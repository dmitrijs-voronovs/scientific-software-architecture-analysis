quality_attribute,sentence,source,author,repo,version,id,keyword,matched_word,match_idx,filename,wiki,url,total_similar,target_keywords,target_matched_words
Deployability,"o root n within irrep i. DFT; functional labeled if canonical. TD-fctl ROOT 0 (h) -> ROOT n (i) RIGHT EIGENVECTOR BETA¶; The right beta spin eigenvectors of the named method; from ground state, which is in irrep h, to root n, which is in irrep i. DFT; functional labeled if canonical. TD-fctl ROOT 0 -> ROOT n RIGHT EIGENVECTOR BETA - h TRANSITION¶; The right alpha and beta spin eigenvectors of the named method; from ground state to root n, and the transition is of irrep h. DFT; functional labeled if canonical. THERMAL ENERGY¶; Total thermal energy E [E_h] at given temperature. THERMAL ENERGY CORRECTION¶; Sum of electronic, translational, rotational, and vibrational corrections [E_h] to the thermal energy at given temperature. TWO-ELECTRON ENERGY¶; The two-electron energy contribution [E_h] to the total SCF energy.; Quantity \(E_{2e^-}\) in Eq. (4). UNCP-CORRECTED 2-BODY INTERACTION ENERGY¶; The interaction energy [E_h] considering only two-body interactions,; computed without counterpoise correction.; Related variable CP-CORRECTED 2-BODY INTERACTION ENERGY. \[E_{\text{IE}} = E_{dimer} - \sum_{monomer}^{n}{E_{monomer}^{\text{unCP}}}\]. WIBERG LOWDIN INDICES¶; Property of Wiberg bond indices using orthogonal Löwdin orbitals, (nat, nat). ZAPTn TOTAL ENERGY¶. ZAPTn CORRELATION ENERGY¶; The total electronic energy [E_h] and correlation energy component [E_h]; for the labeled Z-averaged perturbation theory level.; n is ZAPT perturbation order. ZERO K ENTHALPY¶; Total electronic and zero-point energy [E_h] at 0 [K]. ZPVE¶; Vibrational zero-point energy [E_h] at 0 [K]. 2-BODY PAIRWISE DISPERSION CORRECTION ANALYSIS¶; The interatomic contributions to the dispersion correction [E_h].; Sums to the dispersion energy. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; PSI Variables by Alpha. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/glossary_psivariables.html:64474,update,updated,64474,psi4manual/1.8.x/glossary_psivariables.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/glossary_psivariables.html,1,['update'],['updated']
Deployability,"o root n within irrep i. DFT; functional labeled if canonical. TD-fctl ROOT 0 (h) -> ROOT n (i) RIGHT EIGENVECTOR BETA¶; The right beta spin eigenvectors of the named method; from ground state, which is in irrep h, to root n, which is in irrep i. DFT; functional labeled if canonical. TD-fctl ROOT 0 -> ROOT n RIGHT EIGENVECTOR BETA - h TRANSITION¶; The right alpha and beta spin eigenvectors of the named method; from ground state to root n, and the transition is of irrep h. DFT; functional labeled if canonical. THERMAL ENERGY¶; Total thermal energy E [E_h] at given temperature. THERMAL ENERGY CORRECTION¶; Sum of electronic, translational, rotational, and vibrational corrections [E_h] to the thermal energy at given temperature. TWO-ELECTRON ENERGY¶; The two-electron energy contribution [E_h] to the total SCF energy.; Quantity \(E_{2e^-}\) in Eq. (4). UNCP-CORRECTED 2-BODY INTERACTION ENERGY¶; The interaction energy [E_h] considering only two-body interactions,; computed without counterpoise correction.; Related variable CP-CORRECTED 2-BODY INTERACTION ENERGY. \[E_{\text{IE}} = E_{dimer} - \sum_{monomer}^{n}{E_{monomer}^{\text{unCP}}}\]. WIBERG LOWDIN INDICES¶; Property of Wiberg bond indices using orthogonal Löwdin orbitals, (nat, nat). ZAPTn TOTAL ENERGY¶. ZAPTn CORRELATION ENERGY¶; The total electronic energy [E_h] and correlation energy component [E_h]; for the labeled Z-averaged perturbation theory level.; n is ZAPT perturbation order. ZERO K ENTHALPY¶; Total electronic and zero-point energy [E_h] at 0 [K]. ZPVE¶; Vibrational zero-point energy [E_h] at 0 [K]. 2-BODY PAIRWISE DISPERSION CORRECTION ANALYSIS¶; The interatomic contributions to the dispersion correction [E_h].; Sums to the dispersion energy. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.9.1;  · . PSI4. Appendices; PSI Variables by Alpha. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 08 February 2024 09:32PM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/glossary_psivariables.html:64474,update,updated,64474,psi4manual/1.9.x/glossary_psivariables.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/glossary_psivariables.html,1,['update'],['updated']
Deployability,"o the conda-forge channel. Neither install docs; for users nor compile docs for developers have been updated yet to; reflect new patterns. Please consult psicode downloads; page for the latest guides. Warning; As of v1.2rc1, new (conda build 3; updated compilers); conda packages are available for Linux but not Mac).; Psi4conda installers are not ready for either platform. PSI4 is available as a pre-compiled binary for Mac and Linux (and; Windows, through the Ubuntu shell) and native Windows architectures; through Anaconda (formerly Continuum Analytics, the company that produces; Anaconda Python (a; full-fledged scientific python environment with package manager conda) and, more particularly, Miniconda (a lightweight Python; distribution with same package manager conda). Some nice features for us:. cross-platform; no root, administrator, or sudo access required; built with high-performance math libraries; lightweight software stack (<100 MB w/o PSI4; ~1 GB including PSI4, numpy, and MKL); updated nightly so new features accessible; standardizes python distribution so no need to find/install libpython packages; add-ons (plugins, extra features requiring Fortran compiler, etc.) can be made available as conda packages; develop PSI4 through plugins without a pre-existing development environment, see Creating a New Plugin Using a Conda Pre-compiled Binary. The PSI4 binary repository is at Anaconda (formerly Binstar).; For commands to get a default installation, go to How to install a Psi4 binary with the Psi4conda installer, command-line; or the psicode downloads page .; Users proficient with conda may prefer to consult What do the conda packages psi4 & psi4-dev and the installer psi4conda contain.; For more flexibility and a detailed explanation, go to; Detailed Installation of Miniconda and Detailed Installation of . How to install a Psi4 binary with the Psi4conda installer, download site¶; Download one of the nine installers (Linux/Mac/Windows; Py38/39/310).; bash it. ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/conda.html:1281,update,updated,1281,psi4manual/1.8.x/conda.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/conda.html,6,"['install', 'update']","['install', 'updated']"
Deployability,"o the more general scratch documentation. How do I retain specific Psi4 scratch files¶; You can set up a specific path for PSI4 scratch file and keep them; for later use through the psi4_io handler. How to use Psi4 within a PBS queue¶; You will usually need to set up a PBS job script that is setting all; necessary environment variables, making sure the scratch directories are; set up, and invokes the executable. An example PBS script; is provided in the manual, but make sure to also consult your own PBS; documentation for appropriate setup. How to update and rebuild Psi4¶; Obtain code updates as appropriate from Binary Installer,; Clone from GitHub Repository, or Fork from GitHub Repository. Move into; objdir and reissue make, whereupon CMake may reconfigure but; will only rebuild objects and libraries depending on changed files. It is; scarcely ever necessary for the user to reinvoke cmake to update; objdir. How to run a minute’s worth of tests¶; When you want to do a very minimal test of the build and have; CTest installed, the following command can be useful.; 1>>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through:; 1>>> make pytest. How to run a subset of tests¶; CTest allows flexibly partitioned running of the test suite. In; the examples below, testname are regex of test names,; and testlabel are regex of labels (e.g., cc, mints,; libefp defined [here, for example]. Run tests in parallel with -j flag. For maximum parallelism: ctest -j`getconf _NPROCESSORS_ONLN`; Run full test suite: ctest; Run about a third of the tests in 10–20 minutes, the so-called quicktests: ctest -L quick; Run the same subset of tests that TravisCI checks (not the full test suite): ctest -L quick; Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ctest -L smoke; Run tests matching by name: ctest -R testname; Run tests excluding those by name: ctest -E testname; Run tests matching by label: ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/build_planning-1.html:45522,install,installed,45522,psi4manual/1.2.1/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html,4,['install'],['installed']
Deployability,"o the more general scratch documentation. How do I retain specific Psi4 scratch files¶; You can set up a specific path for PSI4 scratch file and keep them; for later use through the psi4_io handler. How to use Psi4 within a PBS queue¶; You will usually need to set up a PBS job script that is setting all; necessary environment variables, making sure the scratch directories are; set up, and invokes the executable. An example PBS script; is provided in the manual, but make sure to also consult your own PBS; documentation for appropriate setup. How to update and rebuild Psi4¶; Obtain code updates as appropriate from Binary Installer,; Clone from GitHub Repository, or Fork from GitHub Repository. Move into; objdir and reissue make, whereupon CMake may reconfigure but; will only rebuild objects and libraries depending on changed files. It is; scarcely ever necessary for the user to reinvoke cmake to update; objdir. How to run a minute’s worth of tests¶; When you want to do a very minimal test of the build and have; CTest installed, the following command can be useful.; 1>>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through:; 1>>> make pytest. How to run a subset of tests¶; CTest allows flexibly partitioned running of the test suite. In; the examples below, testname are regex of test names,; and testlabel are regex of labels (e.g., cc, mints,; libefp). Run tests in parallel with -j flag. For maximum parallelism: ctest -j`getconf _NPROCESSORS_ONLN`; Run full test suite: ctest; Run about a third of the tests in 10–20 minutes, the so-called quicktests: ctest -L quick; Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ctest -L smoke; Run tests matching by name: ctest -R testname; Run tests excluding those by name: ctest -E testname; Run tests matching by label: ctest -L testlabel; Run tests excluding those by label: ctest -LE testlabel. How to see CTest testing errors¶; 1; 2; 3; ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/build_planning-1.html:39142,install,installed,39142,psi4manual/1.1.0/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/build_planning-1.html,2,['install'],['installed']
Deployability,"o variable takes effect. All done!. Note; Above commands use bash for installation and set up your environment for bash at runtime. To use csh at runtime, follow the on-screen directions at the end of the installation or consult step 7 below. Detailed Installation of Miniconda¶. Sanity check. If you already have Miniconda or Anaconda, skip to step 5. The whole installation takes ~5 min; reading this page takes far longer.; Get bzip2. You’ll need this slightly exotic command so run which to test for availability, and install from yum, source, etc. if unavailable. You’ll also need an internet connection for downloading; computers behind a firewall or with restricted login domains are eligible. So long as you can ssh into the computer to an account with write permissions and can connect to the internet from the computer, all is well. # check; >>> which bzip2; /usr/bin/bzip2; >>> curl -O ""http://psicode.org/psi4manual/master/introduction.html""; >>> ls -1; introduction.html. Get Miniconda installer script. Either issue the command below or download from http://conda.pydata.org/miniconda.html by clicking on the appropriate link for your OS. If you already have or would prefer to use Anaconda rather than Miniconda, that’s fine. Locate or install Anaconda, check that conda is in your path, and skip to step 4. >>> curl -O ""http://repo.continuum.io/miniconda/Miniconda-latest-Linux-x86_64.sh""; # check; >>> ls -1; Miniconda-latest-Linux-x86_64.sh. Install Miniconda. Execute the script and answer its questions, particularly your choice of installation location. You may need to replace the filename below with the correct filename for the OS/version of installer you downloaded. Execute with bash regardless of csh/bash shell. If you’re a bash user, it’s convenient to agree to its offer to prepend conda commands to your PATH in ~/.bashrc. If you’re a csh/tcsh user, it’s convenient to do the same by hand to your ~/.tcshrc: setenv PATH /path/to/miniconda/bin:${PATH}. Further direction",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/conda-1.html:14275,install,installer,14275,psi4manual/1.2.1/conda-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/conda-1.html,8,['install'],['installer']
Deployability,"o you’ll have to turn off simint to get an; internal compile of AM>=8 Libint. The keyword is only a lower bound for; detection, so you can set it at 7, have both Libint and simint enabled,; and point CMake toward a pre-built Libint AM8 just fine. How to configure Libint for building Psi4. How to get high angular momentum integrals from conda¶; Libint2 conda packages are available from conda for Linux, Mac, and Windows.; The Linux package has base MAX_AM_ERI=7 and can run 7z energies; and gradients conventional, 6z energies and gradients density-fitted,; and qz Hessians both conventional and density fitted.; The Mac and Windows packages have base MAX_AM_ERI=5 and can run; 5z energies, qz gradients, and tz Hessians, both conventional and; density-fitted.; Details about angular momentum settings are available here; https://github.com/psi4/psi4/blob/master/external/upstream/libint2/CMakeLists.txt; . How to see what build configuration options are available¶; CMake doesn’t provide a summary for this (unless you want to try the CMake; GUI, which the developers have never looked at). However, the top half of; the main CMakeLists.txt is a passable summary:; LANGUAGES C CXX); set(psi4_URL ""http://www.psicode.org/""); set(psi4_EMAIL ""psi4aiqc+cmake@gmail.com""); set(psi4_LICENSE ""GNU Lesser General Public License, version 3 (LGPL-3.0)""); set(psi4_DESCRIPTION ""Open-Source Quantum Chemistry""). list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake). ################ Options: Overview and Not Otherwise Mentioned ###############. # <<< CMake build overview >>>; #; # >>> ls; # external/ COPYING psi4/ tests/ ...; # >>> cmake -S. -Bobjdir -DCMAKE_INSTALL_PREFIX=/path/to/install-psi4 ...; # ...; # -- Generating done; # -- Build files have been written to: /current/dir/objdir; # >>> cmake --build objdir --target install -j`getconf _NPROCESSORS_ONLN`. # <<< Required build dependencies that Psi4 can't build itself >>>; #; # - CMake (e.g., `conda install cmake`); # - C++ and C comp",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/build_planning-1.html:12873,configurat,configuration,12873,psi4manual/1.4.0/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/build_planning-1.html,4,['configurat'],['configuration']
Deployability,"o_atomicresult(record). return self.result. def _singlepointrecord_to_atomicresult(spr: ""qcportal.singlepoint.SinglepointRecord"") -> AtomicResult:; atres = spr.to_qcschema_result(). # QCFractal `next` database stores return_result, properties, and extras[""qcvars""] merged; # together and with lowercase keys. `to_qcschema_result` partitions properties back out,; # but we need to restore qcvars keys, types, and dimensions.; # QCFractal v0.51 starts saving space by removing qcvars whose qcvar.lower().replace("" "", ""_""); # are defined, so we also need to reconstruct these.; shared_qcvars = {}; for pv, dpv in atres.properties.dict().items():; if dpv is None:; continue; if pv.startswith(""return_"") or pv.endswith(""_moment""):; continue; if pv in [; ""scf_one_electron_energy"",; ""scf_two_electron_energy"",; ""scf_vv10_energy"",; ""scf_xc_energy"",; ""scf_dispersion_correction_energy"",; ""mp2_same_spin_correlation_energy"",; ""mp2_opposite_spin_correlation_energy"",; ""ccsd_same_spin_correlation_energy"",; ""ccsd_opposite_spin_correlation_energy"",; ""ccsd_prt_pr_correlation_energy"",; ""ccsd_prt_pr_total_energy"",; ]:; continue; shared_qcvars[pv.upper().replace(""_"", "" "")] = dpv; qcvars = atres.extras.pop(""extra_properties""); qcvars.pop(""return_result""); qcvars = {k.upper(): p4util.plump_qcvar(k, v) for k, v in qcvars.items()}; atres.extras[""qcvars""] = {**qcvars, **shared_qcvars}. return atres. def _drink_filter(stdout: str) -> str:; """"""Don't mess up the widespread ``grep beer`` test of Psi4 doneness by printing multiple drinks per outfile."""""". stdout = stdout.replace(""\n*** Psi4 exiting successfully. Buy a developer a beer!"", """"); stdout = stdout.replace(""\n*** Psi4 encountered an error. Buy a developer more coffee!"", """"); return stdout. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .  · ; 1.10a1.dev61;  · . PSI4. Module code; psi4.driver.task_base. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/_modules/psi4/driver/task_base.html:8698,update,updated,8698,psi4manual/master/_modules/psi4/driver/task_base.html,https://psicode.org,https://psicode.org/psi4manual/master/_modules/psi4/driver/task_base.html,1,['update'],['updated']
Deployability,"o_shift=do_shift,; do_rotate=do_rotate,; deflection=deflection,; do_resort=do_resort,; do_mirror=do_mirror); cgeom, cmass, celem, celez, cuniq = perturbation.align_system(rgeom, rmass, relem, relez, runiq, reverse=True); cmol = Molecule.from_arrays(; geom=cgeom,; mass=cmass,; elem=celem,; elez=celez,; units='Bohr',; molecular_charge=ref_mol.molecular_charge(),; molecular_multiplicity=ref_mol.multiplicity(),; fix_com=True,; fix_orientation=True). rmsd = np.linalg.norm(cgeom - rgeom) * qcel.constants.bohr2angstroms / np.sqrt(nat); if verbose >= 1:; print('Start RMSD = {:8.4f} [A]'.format(rmsd)). rmsd, solution, amol = cmol.B787(; ref_mol,; do_plot=do_plot,; atoms_map=(not do_resort),; run_resorting=run_resorting,; mols_align=True,; run_to_completion=run_to_completion,; run_mirror=do_mirror,; verbose=verbose). compare_integers(; True, np.allclose(solution.shift, perturbation.shift, atol=6), 'shifts equiv', verbose=verbose - 1); if not do_resort:; compare_integers(; True,; np.allclose(solution.rotation.T, perturbation.rotation),; 'rotations transpose',; verbose=verbose - 1); if solution.mirror:; compare_integers(True, do_mirror, 'mirror allowed', verbose=verbose - 1). def set_fragment_pattern(self, frl, frt, frc, frm):; """"""Set fragment member data through public method analogous to psi4.core.Molecule"""""". if not (len(frl) == len(frt) == len(frc) == len(frm)):; raise ValidationError(""""""Molecule::set_fragment_pattern: fragment arguments not of same length.""""""). self.fragments = frl; self.fragment_types = frt; self.fragment_charges = frc; self.fragment_multiplicities = frm. # Attach methods to qcdb.Molecule class; from .parker import xyz2mol as _parker_xyz2mol_yo; Molecule.format_molecule_for_mol = _parker_xyz2mol_yo. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .  · ; 1.8.2;  · . PSI4. Module code; psi4.driver.qcdb.molecule. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:04AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/qcdb/molecule.html:67812,update,updated,67812,psi4manual/1.8.x/_modules/psi4/driver/qcdb/molecule.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/qcdb/molecule.html,1,['update'],['updated']
Deployability,"oad Intel compilers and specify them in compilers and flags CMake arguments. Prepare recipe, make sure psi4-cf is the only target uncommented in kitandkapoodle.py, set; crontab, view in kpd-anom.log.; Files will upload to psi4/label/dev. For releases and postreleases, on the anaconda.org site; (logged in as psi4), add, not replace, main label, so accessible from psi4/label/main. Build Psi4conda set¶; Installers are build using the project constructor to build binary bash or exe scripts, one per; OS per Python version. For example, there’s 16 installers when OSes are linux-64, win-64, osx-64,; osx-arm64 and pythons are 38, 39, 310, 311. In analogy to Miniconda, they’re called Psi4Conda. They; are built through GHA on the https://github.com/psi4/psi4meta repository and get served from vergil; (the cdsgroup webserver). If the previous release hasn’t had a snapshot saved, copy construct.yaml into a version-labeled; file and check it in.; Edit recipe https://github.com/psi4/psi4meta/blob/master/installers/construct.yaml. Edit the top matter for Configuration, mainly the release field. See snapshots in directory for examples.; Edit the packages and channels info if necessary. Probably long-term stable. Edit the GHA control file https://github.com/psi4/psi4meta/blob/master/.github/workflows/Installers.yml; matrix.cfg list if Python versions or target architectures have changed.; All conda packages must already have been built and present in the right channels on; https://anaconda.org/conda-forge/psi4/files .; Commit construct.yaml to trigger installer builds. (Even workflow edits need a dummy commit to; construct.yaml to retrigger.); When all build successfully, hover over the artifacts, and note the smallest and largest of the; near-consecutive numbers GH has assigned them. These artifacts only linger for a day.; Log in to vergil root and cd to /var/www/html/psicode-download.; Use the pull_gha_installers.sh script to download the installers from GH to vergil. First two; ar",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/manage_release.html:14840,install,installers,14840,psi4manual/1.9.x/manage_release.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/manage_release.html,2,['install'],['installers']
Deployability,"oaded from Psi4 LibMints for basis %s\n' % (core.get_global_option('BASIS'))); molecule.reset_point_group(user_pg); molecule.update_geometry(); bascmd, baskw = qcdbmolecule.format_basis_for_cfour(qbs.has_puream()). # Handle psi4 keywords implying cfour keyword values; if core.get_option('CFOUR', 'TRANSLATE_PSI4'):; psicmd, psikw = qcdb.cfour.muster_psi4options(p4util.prepare_options_for_modules(changedOnly=True)); else:; psicmd, psikw = '', {}. # Handle calc type and quantum chemical method; mdccmd, mdckw = qcdb.cfour.muster_modelchem(name, dertype). # Handle calc type and quantum chemical method; mdccmd, mdckw = qcdb.cfour.muster_modelchem(name, dertype). # Handle driver vs input/default keyword reconciliation; userkw = p4util.prepare_options_for_modules(); userkw = qcdb.options.reconcile_options(userkw, memkw); userkw = qcdb.options.reconcile_options(userkw, molkw); userkw = qcdb.options.reconcile_options(userkw, baskw); userkw = qcdb.options.reconcile_options(userkw, psikw); userkw = qcdb.options.reconcile_options(userkw, mdckw). # Handle conversion of psi4 keyword structure into cfour format; optcmd = qcdb.options.prepare_options_for_cfour(userkw). # Handle text to be passed untouched to cfour; litcmd = core.get_global_option('LITERAL_CFOUR'). # Assemble ZMAT pieces; zmat = memcmd + molcmd + optcmd + mdccmd + psicmd + bascmd + litcmd. if len(re.findall(r'^\*(ACES2|CFOUR|CRAPS)\(', zmat, re.MULTILINE)) != 1:; core.print_out('\n Faulty ZMAT constructed:\n%s' % (zmat)); raise ValidationError(""""""; Multiple *CFOUR(...) blocks in input. This usually arises; because molecule or options are specified both the psi4 way through; molecule {...} and set ... and the cfour way through cfour {...}.""""""). return zmat. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .  · ; 1.4;  · . PSI4. Module code; psi4.driver.procrouting.interface_cfour. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/procrouting/interface_cfour.html:17452,update,updated,17452,psi4manual/1.4.0/_modules/psi4/driver/procrouting/interface_cfour.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/procrouting/interface_cfour.html,1,['update'],['updated']
Deployability,"oaded from Psi4 LibMints for basis %s\n' % (core.get_global_option('BASIS'))); molecule.reset_point_group(user_pg); molecule.update_geometry(); bascmd, baskw = qcdbmolecule.format_basis_for_cfour(qbs.has_puream()). # Handle psi4 keywords implying cfour keyword values; if core.get_option('CFOUR', 'TRANSLATE_PSI4'):; psicmd, psikw = qcdb.cfour.muster_psi4options(p4util.prepare_options_for_modules(changedOnly=True)); else:; psicmd, psikw = '', {}. # Handle calc type and quantum chemical method; mdccmd, mdckw = qcdb.cfour.muster_modelchem(name, dertype). # Handle calc type and quantum chemical method; mdccmd, mdckw = qcdb.cfour.muster_modelchem(name, dertype). # Handle driver vs input/default keyword reconciliation; userkw = p4util.prepare_options_for_modules(); userkw = qcdb.options.reconcile_options(userkw, memkw); userkw = qcdb.options.reconcile_options(userkw, molkw); userkw = qcdb.options.reconcile_options(userkw, baskw); userkw = qcdb.options.reconcile_options(userkw, psikw); userkw = qcdb.options.reconcile_options(userkw, mdckw). # Handle conversion of psi4 keyword structure into cfour format; optcmd = qcdb.options.prepare_options_for_cfour(userkw). # Handle text to be passed untouched to cfour; litcmd = core.get_global_option('LITERAL_CFOUR'). # Assemble ZMAT pieces; zmat = memcmd + molcmd + optcmd + mdccmd + psicmd + bascmd + litcmd. if len(re.findall(r'^\*(ACES2|CFOUR|CRAPS)\(', zmat, re.MULTILINE)) != 1:; core.print_out('\n Faulty ZMAT constructed:\n%s' % (zmat)); raise ValidationError(""""""; Multiple *CFOUR(...) blocks in input. This usually arises; because molecule or options are specified both the psi4 way through; molecule {...} and set ... and the cfour way through cfour {...}.""""""). return zmat. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .  · ; 1.5;  · . PSI4. Module code; psi4.driver.procrouting.interface_cfour. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/_modules/psi4/driver/procrouting/interface_cfour.html:17593,update,updated,17593,psi4manual/1.5.0/_modules/psi4/driver/procrouting/interface_cfour.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/_modules/psi4/driver/procrouting/interface_cfour.html,1,['update'],['updated']
Deployability,"objdir; # >>> cmake --build objdir --target install -j`getconf _NPROCESSORS_ONLN`. # <<< Required build dependencies that Psi4 can't build itself >>>; #; # - CMake (e.g., `conda install cmake`); # - C++ and C compilers (C++17 compliant); # - BLAS/LAPACK (also runtime; e.g., `conda install mkl-devel`); # - Python (also runtime; interpreter and headers; e.g., `conda install python`); # - NumPy (also runtime; avoidable at buildtime if gau2grid pre-built; e.g., `conda install numpy`); # - networkx >=2.4 (runtime only; e.g., `conda install networkx`); # - pint >=0.10 (runtime only; e.g., `conda install pint -c conda-forge`); # - pydantic >=1.0 (runtime only; e.g., `conda install pydantic -c conda-forge`); # - msgpack-python (runtime only; e.g., `conda install msgpack-python`); # - Eigen (for Libint2; e.g., `conda install eigen`); # - SciPy (runtime only; e.g., `conda install scipy`); # - py-cpuinfo (runtime only; e.g., `conda install py-cpuinfo`); # - psutil (runtime only; e.g., `conda install psutil`). # These three ""### Options ###"" sections contain useful CMake variables for build configuration. # <<< Compilers and flags >>>; #; # - CMAKE_C_COMPILER ""C compiler""; # - CMAKE_C_FLAGS ""Additional C flags""; # - CMAKE_CXX_COMPILER ""C++ compiler""; # - CMAKE_CXX_FLAGS ""Additional C++ flags""; # - CMAKE_Fortran_COMPILER ""Fortran compiler (required for some add-ons)""; # - CMAKE_Fortran_FLAGS ""Additional Fortran flags"". # <<< Detecting dependencies and add-ons >>>; #; # - Python_EXECUTABLE ""Python interpreter to use (e.g., /path/to/bin/python3.7)""; # - Python_LIBRARY ""Python library that goes with the interpreter (e.g., /path/to/lib/python3.7.so)""; # - Python_INCLUDE_DIR ""Path to the python include files (e.g., /path/to/include/python3.7)""; # - SPHINX_ROOT ""Root directory for Sphinx: 'bin/sphinx-build' (or similar) should be in this dir.""; #; # For any ${AddOn} of: ambit, CheMPS2, dkh, ecpint, libefp, erd, gau2grid, gdma, Libint2, PCMSolver, pybind11, pylibefp,; # qcelemental, qc",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/build_planning.html:15709,install,install,15709,psi4manual/1.7.x/build_planning.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/build_planning.html,1,['install'],['install']
Deployability,"obtained through conda install libecpint.; Then enable it as a feature with ENABLE_ecpint,; hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect LibECPInt and activate dependent code.; To remove a conda installation, conda remove libecpint. Source. If using PSI4 built from source and you want LibECPInt built from; from source also,; enable it as a feature with ENABLE_ecpint,; and let the build system fetch and build it and activate dependent code. How to configure LibECPInt for building Psi4¶; Role and Dependencies. Role — In PSI4, LibECPInt is a library that provides additional; quantum chemical capabilities (ECP integrals).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) LibECPInt; Upstream Dependencies — LibECPInt \(\Leftarrow\) None. CMake Variables. ENABLE_ecpint — CMake variable toggling whether Psi4 builds with LibECPInt; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For LibECPInt, set to an installation directory containing include/libecpint.hpp; ecpint_DIR — CMake variable to specify where pre-built LibECPInt can be found. Set to installation directory containing lib/cmake/ecpint/ecpint-config.cmake; CMAKE_DISABLE_FIND_PACKAGE_ecpint — CMake variable to force internal build of ecpint instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_ecpint — CMake variable to force detecting pre-built LibECPInt and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_ecpint=ON. Build without LibECPInt. >>> cmake. Link against pre-built. >>> cmake -DENABLE_ecpint=ON -DCMAKE_PREFIX_PATH=/path/to/ecpint/root. >>> cmake -DENABLE_ecpint=ON -Decpint_DIR=/path/to/ecpint/configdir. Build bundled despite pre-built being detectable. >>> cmake -DENABLE_ecpint=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/ecpint/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_ecpint=ON. table of contents. Interface to LibECPInt by R. Shaw; Installation; How to configure LibECPIn",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/ecpint.html:1575,install,installation,1575,psi4manual/1.6.x/ecpint.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/ecpint.html,5,['install'],['installation']
Deployability,"ocessed into method=”cbs” & CBSMetadata spec;; method=""cbs"", cbsmeta=CBSMetadata – passes through. Parameters:. method (str) – User first argument to driver function. A string hint of the method –; see cases above.; basis (str) – User basis hint.; driver (DriverEnum) – The calling driver function. Note for finite difference that this is; the target driver, not the means driver. Return type:; Tuple[str, str, Dict]. psi4.driver.task_planner.task_planner(driver, method, molecule, **kwargs)[source]¶; Plans a task graph of a complex computation. Canonical Task layering:; ManyBody - BSSE treatment, many-body expansion; FiniteDifference - derivatives through stencils; Composite - basis set extrapolation, focal-point methods; Atomic - analytic single-points. Parameters:. driver (DriverEnum) – The resulting type of computation: e/g/h. Note for finite difference; that this should be the target driver, not the means driver.; method (str) – A string representation of the method such as “HF” or “B3LYP”. Special; cases are: “cbs”.; molecule (Molecule) – A Psi4 base molecule to use.; kwargs – User keyword arguments, often used to configure task computers. Returns:; A simple (AtomicComputer) or layered (CompositeComputer, FiniteDifferenceComputer, ManyBodyComputer) task object. Layered objects contain many and multiple types of computers in a graph. Return type:; Union[AtomicComputer, CompositeComputer, FiniteDifferenceComputer, ManyBodyComputer]. table of contents. External API Objects; Molecule; IPIBroker; auto_fragments(); process_input(); ip_fitting(); frac_traverse(); frac_nuke(); set_output_file(); BaseComputer; BaseComputer.compute(); BaseComputer.plan(). TaskComputers; SubTaskComputers; expand_cbs_methods(); task_planner(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .  · ; 1.10a1.dev61;  · . PSI4. External API Objects. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/external_apis.html:9380,update,updated,9380,psi4manual/master/external_apis.html,https://psicode.org,https://psicode.org/psi4manual/master/external_apis.html,1,['update'],['updated']
Deployability,"oconf, python-dev. II. Brief Summary of Configuration, Compilation, and Installation¶; This section outlines the main steps of configuring, compiling, and; installing PSI. More detail is given below in Section III. Autoconf. For unusual architectures (or for developers working in the development; branch), one needs to first run autoconf to generate; the file “configure” in the top-level psi4 directory. For most Linux; and Mac compilations, this should not be necessary because the configure; file provided with PSI4 should be sufficient. To replace the general; configure file with one specific to your architecture, in the top-level; psi4 directory, run autoconf:; >>> autoconf. Configuration and Compilation; Make an object directory in which you can compile the code; >>> mkdir obj. Next you need to configure the code. Find a configuration; option line or combination of; configuration options at Section III(1)A. Either, use the line directly:; >>> cd obj; >>> ../configure [your compilation configuration options here]. or, save your configuration options for a future compilation.; In the top-level psi4 directory, create a file like “do-configure” with; the configure command and options on one line.; >>> cat do-configure; ../configure [your compilation configuration options here]; >>> chmod u+x do-configure; >>> cd obj; >>> ../do-configure. Compile the code, run the tests, and (if tests pass) install it.; >>> make; >>> make tests; >>> make install. That’s it! The details about final user configuration are given below in; Section III(7). If something goes wrong,; check Section VI about common compilation problems. III. Detailed Installation Instructions¶; This section provides a more detailed explanation of the procedure for; compiling and installing the PSI4 package. Step 1: Configuration. General Information about Configuration; First, we recommend that you choose for the top-level psi4 source; directory something other than /usr/local/psi; $HOME/psi4 or; /usr/local/src/p",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/installfile.html:3158,configurat,configuration,3158,psi4manual/4.0b4/installfile.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/installfile.html,1,['configurat'],['configuration']
Deployability,"ocstring. clear(self); docstring. compute(self); docstring. set_Da_ao(self, Da, symmetry); docstring. set_Da_mo(self, arg0); docstring. set_Da_so(self, arg0); docstring. set_Db_ao(self, Db, symmetry); docstring. set_Db_mo(self, arg0); docstring. set_Db_so(self, arg0); docstring. set_title(self, arg0); docstring. Attributes Documentation. valid_methods = ['DIPOLE', 'QUADRUPOLE', 'MULLIKEN_CHARGES', 'LOWDIN_CHARGES', 'WIBERG_LOWDIN_INDICES', 'MAYER_INDICES', 'MBIS_CHARGES', 'MO_EXTENTS', 'GRID_FIELD', 'GRID_ESP', 'ESP_AT_NUCLEI', 'NO_OCCUPATIONS']¶. Methods Documentation. Exvals(self: psi4.core.OEProp) → List[float]¶; The x component of the field (in a.u.) at each grid point. Eyvals(self: psi4.core.OEProp) → List[float]¶; The y component of the field (in a.u.) at each grid point. Ezvals(self: psi4.core.OEProp) → List[float]¶; The z component of the field (in a.u.) at each grid point. Vvals(self: psi4.core.OEProp) → List[float]¶; The electrostatic potential (in a.u.) at each grid point. add(self: psi4.core.OEProp, arg0: str) → None¶; docstring. clear(self: psi4.core.OEProp) → None¶; docstring. compute(self: psi4.core.OEProp) → None¶; docstring. set_Da_ao(self: psi4.core.OEProp, Da: psi4.core.Matrix, symmetry: int = 0) → None¶; docstring. set_Da_mo(self: psi4.core.OEProp, arg0: psi4.core.Matrix) → None¶; docstring. set_Da_so(self: psi4.core.OEProp, arg0: psi4.core.Matrix) → None¶; docstring. set_Db_ao(self: psi4.core.OEProp, Db: psi4.core.Matrix, symmetry: int = 0) → None¶; docstring. set_Db_mo(self: psi4.core.OEProp, arg0: psi4.core.Matrix) → None¶; docstring. set_Db_so(self: psi4.core.OEProp, arg0: psi4.core.Matrix) → None¶; docstring. set_title(self: psi4.core.TaskListComputer, arg0: str) → None¶; docstring. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. PSI4 API: Linking C++ and Python; OEProp. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/api/psi4.core.oeprop.html:2484,update,updated,2484,psi4manual/1.4.0/api/psi4.core.oeprop.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/api/psi4.core.oeprop.html,1,['update'],['updated']
Deployability,"ocstring. get_pivots(self); docstring. get_reverse_pivots(self); docstring. is_inverted(self); docstring. is_poisson(self); docstring. Methods Documentation. form_QR_inverse(self: psi4.core.FittingMetric, arg0: float) → None¶; docstring. form_cholesky_inverse(self: psi4.core.FittingMetric) → None¶; docstring. form_eig_inverse(self: psi4.core.FittingMetric, arg0: float) → None¶; docstring. form_fitting_metric(self: psi4.core.FittingMetric) → None¶; docstring. form_full_inverse(self: psi4.core.FittingMetric) → None¶; docstring. get_algorithm(self: psi4.core.FittingMetric) → str¶; docstring. get_metric(self: psi4.core.FittingMetric) → psi4.core.Matrix¶; docstring. get_pivots(self: psi4.core.FittingMetric) → psi4.core.IntVector¶; docstring. get_reverse_pivots(self: psi4.core.FittingMetric) → psi4.core.IntVector¶; docstring. is_inverted(self: psi4.core.FittingMetric) → bool¶; docstring. is_poisson(self: psi4.core.FittingMetric) → bool¶; docstring. form_QR_inverse(self: psi4.core.FittingMetric, arg0: float) → None; docstring. form_cholesky_inverse(self: psi4.core.FittingMetric) → None; docstring. form_eig_inverse(self: psi4.core.FittingMetric, arg0: float) → None; docstring. form_fitting_metric(self: psi4.core.FittingMetric) → None; docstring. form_full_inverse(self: psi4.core.FittingMetric) → None; docstring. get_algorithm(self: psi4.core.FittingMetric) → str; docstring. get_metric(self: psi4.core.FittingMetric) → psi4.core.Matrix; docstring. get_pivots(self: psi4.core.FittingMetric) → psi4.core.IntVector; docstring. get_reverse_pivots(self: psi4.core.FittingMetric) → psi4.core.IntVector; docstring. is_inverted(self: psi4.core.FittingMetric) → bool; docstring. is_poisson(self: psi4.core.FittingMetric) → bool; docstring. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/api/psi4.core.fittingmetric.html:2411,update,updated,2411,psi4manual/1.3.2/api/psi4.core.fittingmetric.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.fittingmetric.html,1,['update'],['updated']
Deployability,"ocstring. push_back_external_potential(self: psi4.core.HF, V: psi4.core.Matrix) → None¶; Add an external potential to the private external_potentials list. reset_occupation(self: psi4.core.HF) → None¶; docstring. rotate_orbitals(self: psi4.core.HF, arg0: psi4.core.Matrix, arg1: psi4.core.Matrix) → None¶; docstring. save_density_and_energy(self: psi4.core.HF) → None¶; docstring. semicanonicalize(self: psi4.core.HF) → None¶; Semicanonicalizes the orbitals for ROHF. set_energies(self: psi4.core.HF, arg0: str, arg1: float) → None¶; docstring. set_jk(self: psi4.core.HF, arg0: psi4.core.JK) → None¶; Sets the internal JK object !expert. set_sad_basissets(self: psi4.core.HF, arg0: List[psi4.core.BasisSet]) → None¶; Sets the Superposition of Atomic Densities basisset. set_sad_fitting_basissets(self: psi4.core.HF, arg0: List[psi4.core.BasisSet]) → None¶; Sets the Superposition of Atomic Densities density-fitted basisset. soscf_update(self: psi4.core.HF, arg0: float, arg1: int, arg2: int, arg3: int) → int¶; Computes a second-order SCF update. stability_analysis(self: psi4.core.HF) → bool¶; Assess wfn stability and correct if requested. twoel_Hx(self: psi4.core.HF, arg0: List[psi4.core.Matrix], arg1: bool, arg2: str) → List[psi4.core.Matrix]¶; Two-electron Hessian-vector products. Ca(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Alpha Orbitals. Ca_subset(self: psi4.core.Wavefunction, arg0: str, arg1: str) → psi4.core.Matrix¶; Returns the requested Alpha Orbital subset. Cb(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Beta Orbitals. Cb_subset(self: psi4.core.Wavefunction, arg0: str, arg1: str) → psi4.core.Matrix¶; Returns the requested Beta Orbital subset. Da(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Alpha Density Matrix. Da_subset(self: psi4.core.Wavefunction, arg0: str) → psi4.core.Matrix¶; Returns the requested Alpha Density subset. Db(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Beta Density Matrix. Db_s",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/api/psi4.core.hf.html:9450,update,update,9450,psi4manual/1.3.2/api/psi4.core.hf.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.hf.html,1,['update'],['update']
Deployability,"ocumented the EFP fragments available from the LIBEFP library.; These systems are accessible in molecule {...} blocks without; additional configuration. How to configure libefp for building Psi4¶; Role and Dependencies. Role — In PSI4, libefp is a library that provides additional; molecular modeling capabilities (EFP).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) libefp; Upstream Dependencies — libefp \(\Leftarrow\) BLAS/LAPACK. CMake Variables. ENABLE_libefp — CMake variable toggling whether Psi4 builds with libefp; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For libefp, set to an installation directory containing include/efp.h; libefp_DIR — CMake variable to specify where pre-built libefp can be found. Set to installation directory containing share/cmake/libefp/libefpConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_libefp — CMake variable to force internal build of libefp instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_libefp — CMake variable to force detecting pre-built libefp and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_libefp=ON. Build without libefp. >>> cmake. Link against pre-built. >>> cmake -DENABLE_libefp=ON -DCMAKE_PREFIX_PATH=/path/to/libefp/root. >>> cmake -DENABLE_libefp=ON -Dlibefp_DIR=/path/to/libefp/configdir. Build bundled despite pre-built being detectable. >>> cmake -DENABLE_libefp=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/libefp/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_libefp=ON. table of contents. Interface to LIBEFP by I. Kaliman; Installation; EFP Fragments; Molecule Specification; Running EFP; Fragment Library; How to configure libefp for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 July 2018 04:21AM.; Created using Sphinx 1.7.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/libefp-1.html:9245,update,updated,9245,psi4manual/1.2.1/libefp-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/libefp-1.html,2,['update'],['updated']
Deployability,"od. psi4.driver.ManagedMethodError method. psi4.driver.ParsingError method. psi4.driver.PastureRequiredError method. psi4.driver.PsiException method. psi4.driver.PsiImportError method. psi4.driver.TestComparisonError method. psi4.driver.ValidationError method. wK() psi4.core.JK method, [1], [2]. write() psi4.core.CIVector method, [1], [2]. psi4.core.FCHKWriter method, [1], [2]. psi4.core.MOWriter method, [1], [2]. psi4.core.MoldenWriter method, [1], [2]. psi4.core.NBOWriter method, [1], [2]. write_scratch_file() psi4.core.IOManager method, [1], [2]. WRITER_FILE_LABEL (GLOBALS). X. X() psi4.core.CIWavefunction method, [1]. psi4.core.CUHF method, [1]. psi4.core.HF method, [1]. x() psi4.core.Molecule method, [1], [2]. X() psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. psi4.core.Wavefunction method, [1], [2]. x_alpha() psi4.core.SuperFunctional method, [1], [2]. x_functional() psi4.core.SuperFunctional method, [1], [2]. x_omega() psi4.core.SuperFunctional method, [1], [2]. XI (CCDENSITY). XI_CONNECT (CCDENSITY). xml2dict() in module psi4.driver. xtpl_highest_1() in module psi4.driver.driver_cbs. Y. y() psi4.core.Molecule method, [1], [2]. Z. Z() psi4.core.Molecule method, [1], [2]. z() psi4.core.Molecule method, [1], [2]. ZAPTnCORRELATIONENERGY. ZAPTnTOTALENERGY. zero() psi4.core.CIVector method, [1], [2]. psi4.core.Matrix method, [1], [2]. psi4.core.SymmetryOperation method, [1], [2]. zero_ao_basis_set() psi4.core.BasisSet method, [1], [2]. zero_diagonal() psi4.core.Matrix method, [1], [2]. ZERO_INTERNAL_AMPS (PSIMRCC). zero_lower() psi4.core.Matrix method, [1], [2]. zero_redundant() psi4.core.DFSOMCSCF method, [1]. psi4.core.DiskSOMCSCF method, [1]. psi4.core.SOMCSCF method, [1], [2]. zero_upper() psi4.core.Matrix method, [1], [2]. ZETA (CCDENSITY). (CCLAMBDA). Navigation. Index. modules    .    .  · ; 1.1;  · . PSI4. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/genindex-1.html:104309,update,updated,104309,psi4manual/1.1.0/genindex-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/genindex-1.html,2,['update'],['updated']
Deployability,"od_string (string) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, lowercase and usually unlabeled. Indicates the computational; method to be passed to func. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || 'off' ; Indicate to additionally return the Wavefunction; calculation result as the second element of a tuple. bsse_type (string or list) – 'cp' || ['nocp', 'vmfc'] || None || etc.; Type of BSSE correction to compute: CP, NoCP, or VMFC. The first in this; list is returned by this function. By default, this function is not called. max_nbody (int) – 3 || etc.; Maximum n-body to compute, cannot exceed the number of fragments in the moleucle. ptype (string) – 'energy' || 'gradient' || 'hessian'; Type of the procedure passed in. return_total_data (boolean) – 'on' || 'off' ; If True returns the total data (energy/gradient/etc) of the system,; otherwise returns interaction data. The nbody function computes counterpoise-corrected (CP), non-CP (noCP), and Valiron-Mayer Function Couterpoise (VMFC) interaction energies for complexes composed of arbitrary numbers of monomers.; Examples :; # Counterpoise corrected CCSD(T) energy for the Helium dimer; molecule mol {; He; --; He 1 3; }. energy('CCSD(T)', bsse_type='cp'). # noCP, VMFC, and CP energy for a helium cluster, limited at 3 bodies; molecule mol {; He 0 0 0; --; He 0 0 4; --; He 0 4 0; --; He 4 0 0; }. # Returns the nocp energy as its first in the list; energy('CCSD(T)', bsse_type=['nocp', 'cp', 'vmfc'], max_nbody=3). Previous topic; Property; Next topic; Geometry Optimization, optimize() and gradient(). This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Psithon Functions: Invoking a Calculation ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/nbody-1.html:2790,update,updated,2790,psi4manual/1.0.0/nbody-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/nbody-1.html,2,['update'],['updated']
Deployability,"ode is quite new, but relatively complete. During code development,; emphasis was placed on flexibility of functional technology, efficiency for; medium to large systems in difficult electronic environments (e.g., compact; spatial extents, diffuse basis sets, low band-gaps, LRC and/or hybrid GKS; functionals), and time to code completion. We are very interested in optimizing; and extending the code, so expect performance gains and extensions to; gradients/hessians and TDDFT in future releases.; Some rough guidelines for using the KS-DFT code are as follows,. Use DF for the ERI algorithm wherever possible.; PSI4 is a “tight” code, meaning we’ve set the default numerical cutoffs; for integrals, grids, and convergence criteria in such a way that you will often; get many more digits of precision than needed. You may be able to realize; additional speed gains by loosening some of these thresholds. See; SCF Convergence for default convergence criteria.; Read the literature to determine which functional technology to use. The world; contains far too many papers using B3LYP on noncovalent interactions without a -D. The “best-practice” input file for KS-DFT is:; memory 1 GB # As much as you've got, the DF algorithm can use. molecule {; H; H 1 0.7; }. set {; basis cc-pvdz; scf_type df; guess sad; }. energy('b3lyp'). Table Of Contents. DFT: Density Functional Theory; Theory; Minimal Input; Spin/Symmetry Treatment; Functional Selection; Grid Selection; ERI Algorithms; IP Fitting; Fractional Particle Curves; Dispersion Corrections; Recommendations. Previous topic; HF: Hartree–Fock Theory; Next topic; DF-MP2: Density-Fitted Second-Order Møller-Plesset Perturbation Theory; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Theoretical Methods: SCF to FCI ». © Copyright 2012, The Psi4 Project.; Last updated on Oct 16, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/dft-1.html:23847,update,updated,23847,psi4manual/4.0b3/dft-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/dft-1.html,2,['update'],['updated']
Deployability,"ode. [docs]def ternary(sapt, title='', labeled=True, view=True,; saveas=None, relpath=False, graphicsformat=['pdf']):; """"""Takes array of arrays *sapt* in form [elst, indc, disp] and builds formatted; two-triangle ternary diagrams. Either fully-readable or dotsonly depending; on *labeled*. Saves in formats *graphicsformat*. """"""; import hashlib; import numpy as np; import matplotlib.pyplot as plt; import matplotlib as mpl; from matplotlib.path import Path; import matplotlib.patches as patches. # initialize plot; fig, ax = plt.subplots(figsize=(6, 3.6)); plt.xlim([-0.75, 1.25]); plt.ylim([-0.18, 1.02]); plt.xticks([]); plt.yticks([]); ax.set_aspect('equal'). if labeled:; # form and color ternary triangles; codes = [Path.MOVETO, Path.LINETO, Path.LINETO, Path.CLOSEPOLY]; pathPos = Path([(0., 0.), (1., 0.), (0.5, 0.866), (0., 0.)], codes); pathNeg = Path([(0., 0.), (-0.5, 0.866), (0.5, 0.866), (0., 0.)], codes); ax.add_patch(patches.PathPatch(pathPos, facecolor='white', lw=2)); ax.add_patch(patches.PathPatch(pathNeg, facecolor='#fff5ee', lw=2)). # form and color HB/MX/DD dividing lines; ax.plot([0.667, 0.5], [0., 0.866], color='#eeb4b4', lw=0.5); ax.plot([-0.333, 0.5], [0.577, 0.866], color='#eeb4b4', lw=0.5); ax.plot([0.333, 0.5], [0., 0.866], color='#7ec0ee', lw=0.5); ax.plot([-0.167, 0.5], [0.289, 0.866], color='#7ec0ee', lw=0.5). # label corners; ax.text(1.0, -0.15, u'Elst (\u2212)',; verticalalignment='bottom', horizontalalignment='center',; family='Times New Roman', weight='bold', fontsize=18); ax.text(0.5, 0.9, u'Ind (\u2212)',; verticalalignment='bottom', horizontalalignment='center',; family='Times New Roman', weight='bold', fontsize=18); ax.text(0.0, -0.15, u'Disp (\u2212)',; verticalalignment='bottom', horizontalalignment='center',; family='Times New Roman', weight='bold', fontsize=18); ax.text(-0.5, 0.9, u'Elst (+)',; verticalalignment='bottom', horizontalalignment='center',; family='Times New Roman', weight='bold', fontsize=18). xvals = []; yvals = []; cvals",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/mpl.html:24087,patch,patches,24087,psi4manual/1.0.0/_modules/qcdb/mpl.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/mpl.html,1,['patch'],['patches']
Deployability,"odemeta.json; Invite any contributors with at least 3 PRs to join GitHub Organization. Anticipate next release¶. Bump version in codemeta.json, https://github.com/psi4/psi4/blob/master/codemeta.json#L9; Add to branch list in azure-pipelines.yml, psi4/azure-pipelines.yml. Build Conda ecosystem stack¶; By “ecosystem stack”, mean packages that are upstream, downstream, required, and optional for a fully featured Psi4 build and which we can’t get from “defaults” or “conda-forge” channels. Main directions are in [cbcy](https://github.com/psi4/psi4meta/blob/master/conda-recipes/conda_build_config.yaml) and [poodle](https://github.com/psi4/psi4meta/blob/master/psinet-nightly/kitandkapoodle.py); A couple weeks before the first “rc” is planned, start going through L/LT in poodle, checking with upstream to see if new versions have been released. If good changes present, rebuild the packages, changing the version numbers in the respective recipes; When L/LT all built and passed, edit the individual package version numbers in cbcy and increment to a new ltrtver with updated version numbers and/or build numbers (only if code changes); Build L/PSI4. If any trouble, edit psi4 code. Iterate until builds and passes. This stage is the only full ctest & pytest on Psi4+upstream; Build L/RT-MP. If any trouble, edit code in L/RT and rebuild those package(s). Iterate until builds and passes. This stage is the only full ctest & pytest of Psi4+downstream; Build L/DEV. If any trouble, edit psi4 build system, plugin system, or OpenMP setup. Iterate until builds and passes; Build L/DOCS. If any trouble, edit the docs or the tests. Iterate until builds and passes; Results of last should upload to psicode.org (docs) and codecov.io (coverage); Changes to targets’ “source” and “version” in individual recipes should be edited in psi4 external/*/*/CMakeLists.txt files; Once everything’s working on Linux, repeat on Mac; At this point, ready to fine-tune builds of “Psi4 stack”. Assemble postrelease ch",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/manage_release-1.html:3192,update,updated,3192,psi4manual/1.4.0/manage_release-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/manage_release-1.html,4,['update'],['updated']
Deployability,"ods: SCF to FCI; Notes on Options; HF: Hartree–Fock Theory; DFT: Density Functional Theory; DF-MP2: Density-Fitted Second-Order Møller-Plesset Perturbation Theory; OMPn: Orbital-Optimized Møller–Plesset Perturbation Theory; ADC: Ab Initio Polarization Propagator; SAPT: Symmetry-Adapted Perturbation Theory; CEPA: Coupled-Pair Methods; CC: Coupled Cluster Methods; PSIMRCC Implementation of Mk-MRCC Theory; Interface to MRCC by M. Kállay; CI: Configuration Interaction; Geometry Optimization; Evaluation of One-Electron Properties. Psithon Functions: Invoking a Calculation; Notes on Options; Energy; Property; Counterpoise Correct; Optimize; Frequency; Database; Complete Basis Set; Spectroscopic Constants for Diatomics; Function Intercalls. Interfaces: Enhancing PSI4 Capabilities. Customization: Adding Simple Extensions; User-Defined Basis Sets; Defining a Method Alias; Creating a Database. Contributions: Intro to Programming in PSI4; Plugins: Adding New Functionality to PSI4; Best Practices for Python Functions; Documentation; PsiPEP: Plans and Practices to Organize PSI4. Programming: Using the Core Libraries; LibOptions: globals, locals, has_changed and all that. Python Driver; basislist; input; pubchem; psiexceptions; frac; molutil; proc; dashparam; procutil; driver; optproc; physconst; wrappers; qmmm; basislistother; diatomic; functional; text; util; basislistdunning; aliases; qcdb. PsiMod: Linking C++ and Python; Appendices; Bibliography; Test Suite and Sample Inputs; Basis Sets by Element; Auxiliary Basis Sets; DFT Functionals; PSIOH Intermediate Files; Keywords by Alpha; Keywords by Module; PSI Variables by Alpha; PSI Variables by Module. Indices. Index; Module Index; Search Page. Next topic; Introduction; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    ; PSI4 [beta3] » . © Copyright 2012, The Psi4 Project.; Last updated on Apr 05, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/index.html:2919,update,updated,2919,psi4manual/4.0b3/index.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/index.html,1,['update'],['updated']
Deployability,"odule from conda installation¶; The configuration commands below are generic versions of the ones printed; to your screen as advice upon installing PSI4 into a Anaconda,; Miniconda, or Psi4conda distribution, condadist =; ana|mini|psi4conda. To see the message again after initial installation,; with the conda environment active, run .psi4-post-link.sh.; If which conda python psi4 points to your; condadist and echo $PSI_SCRATCH is set, skip ahead to the; “Run PSI4"" commands below. Otherwise, issue the following; commands directly in your terminal or place them into your “rc” file and; open a new terminal.; If you installed the Psi4conda distribution or installed the PSI4; conda package into the main environment of an Anaconda or Miniconda; distribution and added that to your PATH, as prompted, then; which psi4 likely yields condadist/bin/psi4 and the PATH; setting lines below are redundant.; If you installed into a conda environment p4env and performed; conda activate p4env, then which psi4 likely yields; condadist/envs/p4env/bin/psi4 and the PATH setting lines; below are redundant.; # csh, tcsh: add to shell or ~/.tcshrc file; unsetenv PSIDATADIR; setenv PATH {prefix}/bin:$PATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; unset PSIDATADIR; export PATH={prefix}/bin:$PATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. Run PSI4 as executable.; >>> cat sample.in; molecule {; He; }; energy('hf/cc-pvdz'); compare_values(-2.85518839, get_variable('current energy'), 5, 'SCF E'); >>> psi4 sample.in; SCF E.............................................................PASSED. or Run PSI4 as Python module.; >>> cat sample.py; import psi4; mol = psi4.geometry(""""""; He; """"""); psi4.energy('hf/cc-pvdz'); psi4.compare_values(-2.85518839, psi4.core.get_variable('current energy'), 5, 'SCF E'); >>> python sampl",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/build_planning-1.html:29625,install,installed,29625,psi4manual/1.4.0/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/build_planning-1.html,9,['install'],['installed']
Deployability,"odule from conda installation¶; The configuration commands below are generic versions of the ones printed; to your screen as advice upon installing PSI4 into a Anaconda,; Miniconda, or Psi4conda distribution, condadist =; ana|mini|psi4conda. To see the message again after initial installation,; with the conda environment active, run .psi4-post-link.sh.; If which conda python psi4 points to your; condadist and echo $PSI_SCRATCH is set, skip ahead to the; “Run PSI4” commands below. Otherwise, issue the following; commands directly in your terminal or place them into your “rc” file and; open a new terminal.; If you installed the Psi4conda distribution or installed the PSI4; conda package into the main environment of an Anaconda or Miniconda; distribution and added that to your PATH, as prompted, then; which psi4 likely yields condadist/bin/psi4 and the PATH; setting lines below are redundant.; If you installed into a conda environment p4env and performed; conda activate p4env, then which psi4 likely yields; condadist/envs/p4env/bin/psi4 and the PATH setting lines; below are redundant.; # csh, tcsh: add to shell or ~/.tcshrc file; unsetenv PSIDATADIR; setenv PATH {prefix}/bin:$PATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; unset PSIDATADIR; export PATH={prefix}/bin:$PATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. Run PSI4 as executable.; 1; 2; 3; 4; 5; 6; 7; 8>>> cat sample.in; molecule {; He; }; energy('hf/cc-pvdz'); compare_values(-2.85518839, get_variable('current energy'), 5, 'SCF E'); >>> psi4 sample.in; SCF E.............................................................PASSED. or Run PSI4 as Python module.; 1; 2; 3; 4; 5; 6; 7; 8; 9>>> cat sample.py; import psi4; mol = psi4.geometry(""""""; He; """"""); psi4.energy('hf/cc-pvdz'); psi4.compare_values(-2.85518839, psi4.core.get_variable('",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/build_planning-1.html:26653,install,installed,26653,psi4manual/1.3.2/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/build_planning-1.html,2,['install'],['installed']
Deployability,"oeff[dashlvl][func]['s6'], dashcoeff[dashlvl][func]['a1'], dashcoeff[dashlvl][func]['s8'],; dashcoeff[dashlvl][func]['a2'], 0.0, 4)); pfile.close(). # Write dftd3_geometry file that supplies geometry to dispersion calc; geomfile = './dftd3_geometry.xyz'; gfile = open(geomfile, 'w'); gfile.write(self.save_string_xyz()); gfile.close(). # Call dftd3 program; try:; dashout = subprocess.Popen(['dftd3', geomfile, '-grad'], stdout=subprocess.PIPE); except OSError:; raise ValidationError('Program dftd3 not found in path.'); out, err = dashout.communicate(); if verbosity >= 3:; print out. # Parse output (could go further and break into E6, E8, E10 and Cn coeff); success = False; for line in out.splitlines():; if re.match(' Edisp /kcal,au', line):; sline = line.split(); dashd = float(sline[3]); if re.match(' normal termination of dftd3', line):; success = True. if not success:; raise ValidationError('Program dftd3 did not complete successfully.'). # Parse grad output; derivfile = './dftd3_gradient'; dfile = open(derivfile, 'r'); dashdderiv = []; for at in dfile.readlines():; dashdderiv.append([float(x.replace('D', 'E')) for x in at.split()]); dfile.close(); if len(dashdderiv) != self.natom():; raise ValidationError('Program dftd3 gradient file has %d atoms- %d expected.' % \; (len(dashdderiv), self.natom())). # Clean up files and remove scratch directory; # os.unlink(paramfile); # os.unlink(geomfile); # os.unlink(derivfile); if defmoved is True:; os.rename(defaultfile + '_hide', defaultfile). os.chdir('..'); # try:; # shutil.rmtree(dftd3_tmpdir); # except OSError as e:; # ValidationError('Unable to remove dftd3 temporary directory %s' % e, file=sys.stderr); os.chdir(current_directory). # return -D & d(-D)/dx; return dashd, dashdderiv. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    ; PSI4 [beta5] » ; Module code ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/_modules/qcdb/molecule.html:30970,update,updated,30970,psi4manual/4.0b5/_modules/qcdb/molecule.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/_modules/qcdb/molecule.html,1,['update'],['updated']
Deployability,oes change the DCFT energy. Type: double; Default: 0.0. IGNORE_TAU¶. Controls whether to ignore terms containing non-idempotent contribution to OPDM or not (for debug puproses only). For practical applications only the default must be used. Type: boolean; Default: false. INTS_TOLERANCE¶. Schwarz screening threshold. Mininum absolute value below which TEI are neglected. Type: conv double; Default: 1e-14. MO_RELAX¶. Controls whether to relax the orbitals during the energy computation or not (for debug puproses only). For practical applications only the default must be used. Type: boolean; Default: true. ORBITAL_LEVEL_SHIFT¶. The shift applied to the denominator in the orbital update iterations. Type: double; Default: 0.0. RELAX_GUESS_ORBITALS¶. Controls whether to relax the guess orbitals by taking the guess density cumulant and performing orbital update on the first macroiteration (for ALOGRITHM = TWOSTEP only). Type: boolean; Default: false. RELAX_TAU¶. Controls whether to relax tau during the cumulant updates or not. Type: boolean; Default: true. STABILITY_ADD_VECTORS¶. The number of vectors that can be added simultaneously into the subspace for Davidson’s diagonalization in stability check. Type: integer; Default: 20. STABILITY_AUGMENT_SPACE_TOL¶. The value of the rms of the residual in Schmidt orthogonalization which is used as a threshold for augmenting the vector subspace in stability check. Type: conv double; Default: 0.1. STABILITY_CHECK¶. Performs stability analysis of the DCFT energy. Type: boolean; Default: false. STABILITY_CONVERGENCE¶. Controls the convergence of the Davidson’s diagonalization in stability check. Type: conv double; Default: 1e-4. STABILITY_MAX_SPACE_SIZE¶. The maximum size of the subspace for the stability check. The program will terminate if this parameter is exceeded and the convergence (STABILITY_CONVERGENCE) is not satisfied. Type: integer; Default: 200. STABILITY_N_EIGENVALUES¶. The number of Hessian eigenvalues computed during the ,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/autodir_options_c/module__dcft-1.html:6153,update,updates,6153,psi4manual/1.3.2/autodir_options_c/module__dcft-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/autodir_options_c/module__dcft-1.html,2,['update'],['updates']
Deployability,"of CI ROOT n DIPOLE. CI ROOT n QUADRUPOLE¶; Redundant quadrupole array [e a0^2] for the requested configuration interaction level of theory and root n, (3, 3). CI ROOT n QUADRUPOLE XX¶. CI ROOT n QUADRUPOLE XY¶. CI ROOT n QUADRUPOLE XZ¶. CI ROOT n QUADRUPOLE YY¶. CI ROOT n QUADRUPOLE YZ¶. CI ROOT n QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the requested; configuration interaction level of theory and root n.; Deprecated in favor of CI ROOT n QUADRUPOLE. CI ROOT n TOTAL ENERGY¶. CI ROOT n CORRELATION ENERGY¶; The total electronic energy [Eh] and correlation energy component [Eh]; for the requested configuration interaction level of theory and root; n (numbering starts at 0). CI STATE-AVERAGED TOTAL ENERGY¶. CI STATE-AVERAGED CORRELATION ENERGY¶; The total electronic energy [Eh] and correlation energy component [Eh]; for state-averaged CI/CASSCF levels of theory. CI TOTAL ENERGY¶. CI CORRELATION ENERGY¶; The total electronic energy [Eh] and correlation energy component [Eh]; for the requested configuration interaction level of theory and root. CISD DIPOLE¶; Dipole array [e a0] for the configuration interaction singles and doubles level of theory, (3,). CISD DIPOLE X¶. CISD DIPOLE Y¶. CISD DIPOLE Z¶; The three components of the dipole [Debye] for the; configuration interaction singles and doubles level of theory and root.; Deprecated in favor of CISD DIPOLE. CISD QUADRUPOLE¶; Redundant quadrupole array [e a0^2] for the configuration interaction singles and doubles level of theory, (3, 3). CISD QUADRUPOLE XX¶. CISD QUADRUPOLE XY¶. CISD QUADRUPOLE XZ¶. CISD QUADRUPOLE YY¶. CISD QUADRUPOLE YZ¶. CISD QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the; configuration interaction singles and doubles level of theory and root.; Deprecated in favor of CISD QUADRUPOLE. CISD TOTAL ENERGY¶. CISD CORRELATION ENERGY¶. CISDT TOTAL ENERGY¶. CISDT CORRELATION ENERGY¶. CISDTQ CORRELATION ENERGY¶. CISDTQ TOTAL ENERGY¶. CIn CORRELATION ENERGY",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/glossary_psivariables-1.html:13314,configurat,configuration,13314,psi4manual/1.4.0/glossary_psivariables-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/glossary_psivariables-1.html,4,['configurat'],['configuration']
Deployability,"of a; template job or that test error handling or that are PsiAPI rather than; PSIthon focused. In these cases, you’ll want to add to the second test; suite that lives at psi4/tests/pytests. Presently, the “normal”; (everything in the tests/ directory that isn’t in tests/pytests/); are run through ctest, while the pytests are run through pytest. In; future, all will be run through Pytest, but the former will still be; run as PSIthon (psi4 input.dat) while the latter will still be; run as PsiAPI (import psi4). In other words, in designing a test,; choose its mode based on whether PSIthon or PsiAPI suits it better and; whether it’s a simple model for users (probably PSIthon) or for expert; users (probably PsiAPI). Both will continue to work in future.; In developing a Pytest test, you probably want to edit it in place,; rather than running make after each change. Easiest is from; <objdir>, run pytest ../tests/pytests. Add any filters (-k; test_name_fragment) or parallelism (-n <N> if pytest-xdist; installed) or print test names (-v) or print warnings (-rws). To; see stdout output from an otherwise passing test, easiest to add assert; 0 at its end to trigger failure. An important point is that because; they’re PsiAPI, import psi4 is happening, so the <objdir> PSI4; module must be in PYTHONPATH. Also, any call to QCEngine is; using which psi4, so the <objdir> PSI4 executable must be in; PATH. The easiest way to prepare your local environment is to; execute the printout of <objdir>/stage/bin/psi4 --psiapi. Test must be in the psi4/tests/pytests/ directory.; Test file name must start with test_. This is how pytest knows to collect it.; Test file may contain many tests. To be recognized as a test, the Python function must start with test_.; No registration required to bring a test to pytest’s attention. There are individual “marks” that can be added to whole tests or parts; of parameterized tests so that they can be run by category (pytest -m; <mark> vs. ctest -L <mark>) ra",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/add_tests-1.html:4458,install,installed,4458,psi4manual/1.4.0/add_tests-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests-1.html,4,['install'],['installed']
Deployability,"of benzene, computed at the DF-SCF cc-pVDZ geometry. mcscf1; ROHF 6-31G** energy of the state of CH2, with Z-matrix input. The occupations are specified explicitly. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). dcft2; DCFT-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. cc32; CC3/cc-pVDZ H2O geom from Olsen et al., JCP 104, 8007 (1996). tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. dcft4; DCFT calculation for the HF+ using DCFT-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. pywrap-db3; Test that Python Molecule class processes geometry like PsiMod Molecule class. fci-h2o; 6-31G H2O Test FCI Energy Point. psimrcc-pt2; Mk-MRPT2 single point. F2 state described using the Ms = 0 component of the singlet. Uses TCSCF singlet orbitals. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. fd-freq-gradient-larg",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/autodoc_testsuite-1.html:1929,update,update,1929,psi4manual/4.0b3/autodoc_testsuite-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_testsuite-1.html,4,['update'],['update']
Deployability,"of the \(^{3}B_1\) state of CH2, with Z-matrix input. The occupations are specified explicitly. cc29; CCSD/cc-pVDZ optical rotation calculation (both gauges) on Cartesian H2O2. dct4; DCT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. pywrap-alias; Test parsed and exotic calls to energy() like zapt4, mp2.5, and cisd are working. scf-guess-read3; Test if the the guess read in the same basis converges. dfmp2-4; conventional and density-fitting mp2 test of mp2 itself and setting scs-mp2. ao-dfcasscf-sp; CASSCF/6-31G** energy point. dft-grad-lr1; wB97X-D cc-pVDZ gradient of S22 HCN update df/pk_ref values due to new BraggSlater radii. fsapt-d; Tests SAPT0-D corrections, with a variety of damping functions/parameters. cc52; CCSD Response for H2O2. cc44; Test case for some of the PSI4 out-of-core codes. The code is given only 2.0 MB of memory, which is insufficient to hold either the A1 or B2 blocks of an ovvv quantity in-core, but is sufficient to hold at least two copies of an oovv quantity in-core. cc13; UHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. mbis-3; MBIS calculation on OH radical. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. dft-grad-disk; A range-seperated gradient for SO2 to test disk algorithms by explicitly setting low memory. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. cisd-sp; 6-31G** H2O Test CISD Energy Point. cbs-xtpl-alpha; Extrapolated water energies. tdscf-3",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html:14793,update,update,14793,psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html,4,['update'],['update']
Deployability,of theory and root; n (numbering starts at GS = 0). CC TOTAL ENERGY¶. CC CORRELATION ENERGY¶. CC2 TOTAL ENERGY¶. CC2 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the CC2 level of theory. CC3 TOTAL ENERGY¶. CC3 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the CC3 level of theory. CCSD TOTAL ENERGY¶. CCSD CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the CCSD level of theory. CCSD(T) TOTAL ENERGY¶. CCSD(T) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the CCSD(T) level of theory. CI DIPOLE X¶. CI DIPOLE Y¶. CI DIPOLE Z¶; The three components of the dipole [Debye] for the requested; configuration interaction level of theory and root. CI QUADRUPOLE XX¶. CI QUADRUPOLE XY¶. CI QUADRUPOLE XZ¶. CI QUADRUPOLE YY¶. CI QUADRUPOLE YZ¶. CI QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the requested; configuration interaction level of theory and root. CI ROOT n -> ROOT m DIPOLE X¶. CI ROOT n -> ROOT m DIPOLE Y¶. CI ROOT n -> ROOT m DIPOLE Z¶; The three components of the transition dipole [Debye] between roots n; and m for the requested configuration interaction level of theory. CI ROOT n -> ROOT m QUADRUPOLE XX¶. CI ROOT n -> ROOT m QUADRUPOLE XY¶. CI ROOT n -> ROOT m QUADRUPOLE XZ¶. CI ROOT n -> ROOT m QUADRUPOLE YY¶. CI ROOT n -> ROOT m QUADRUPOLE YZ¶. CI ROOT n -> ROOT m QUADRUPOLE ZZ¶; The three components of the transition quadrupole [Debye Ang] between; roots n and m for the requested configuration interaction level of; theory. CI ROOT n DIPOLE X¶. CI ROOT n DIPOLE Y¶. CI ROOT n DIPOLE Z¶; The three components of the dipole [Debye] for the requested; configuration interaction level of theory and root n. CI ROOT n QUADRUPOLE XX¶. CI ROOT n QUADRUPOLE XY¶. CI ROOT n QUADRUPOLE XZ¶. CI ROOT n QUADRUPOLE YY¶. CI ROOT n QUADRUPOLE YZ¶. CI ROOT n QUADRUPOLE ZZ¶; T,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/glossary_psivariables-1.html:2045,configurat,configuration,2045,psi4manual/4.0b2/glossary_psivariables-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/glossary_psivariables-1.html,2,['configurat'],['configuration']
Deployability,"of theory this wavefunction corresponds to. set_print(self: psi4.core.Wavefunction, arg0: int) → None¶; Sets the print level of the Wavefunction. set_reference_wavefunction(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; docstring. set_sad_basissets(self: psi4.core.HF, arg0: List[psi4.core.BasisSet]) → None¶; Sets the Superposition of Atomic Densities basisset. set_sad_fitting_basissets(self: psi4.core.HF, arg0: List[psi4.core.BasisSet]) → None¶; Sets the Superposition of Atomic Densities density-fitted basisset. set_scalar_variable(self: psi4.core.Wavefunction, arg0: str, arg1: float) → None¶; Sets the requested (case-insensitive) double QC variable. set_variable(key, val)¶. shallow_copy(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; Copies the pointers to the internal data. sobasisset(self: psi4.core.Wavefunction) → psi4.core.SOBasisSet¶; Returns the symmetry orbitals basis. soccpi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of singly occupied orbitals per irrep. soscf_update(self: psi4.core.HF, arg0: float, arg1: int, arg2: int, arg3: int) → int¶; Computes a second-order SCF update. stability_analysis(self: psi4.core.HF) → bool¶; Assess wfn stability and correct if requested. to_file(filename=None)¶; Converts a Wavefunction object to a base class. Parameters:; wfn (Wavefunction) – A Wavefunction or inherited class; filename (None, optional) – An optional filename to write the data to. Returns:A dictionary and NumPy representation of the Wavefunction. Return type:dict. twoel_Hx(self: psi4.core.HF, arg0: List[psi4.core.Matrix], arg1: bool, arg2: str) → List[psi4.core.Matrix]¶; Two-electron Hessian-vector products. variable(key)¶. variables()¶. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/api/psi4.core.cuhf.html:16208,update,update,16208,psi4manual/1.3.2/api/psi4.core.cuhf.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.cuhf.html,8,['update'],"['update', 'updated']"
Deployability,"of theory. CFOUR ERROR CODE¶; The non-zero return value from a Cfour execution. CI DIPOLE¶; Dipole array [e a0] for the requested configuration interaction level of theory, (3,). CI QUADRUPOLE¶; Redundant quadrupole array [e a0^2] for the requested configuration interaction level of theory, (3, 3). CI ROOT n -> ROOT m DIPOLE¶; Transition dipole array [e a0] between roots n and m for the requested configuration interaction level of theory, (3,). CI ROOT n -> ROOT m QUADRUPOLE¶; Redundant transition quadrupole array [e a0^2] between roots n and m for the requested configuration interaction level of theory, (3, 3). CI ROOT n DIPOLE¶; Dipole array [e a0] for the requested configuration interaction level of theory and root n, (3,). CI ROOT n QUADRUPOLE¶; Redundant quadrupole array [e a0^2] for the requested configuration interaction level of theory and root n, (3, 3). CI ROOT n TOTAL ENERGY¶. CI ROOT n CORRELATION ENERGY¶; The total electronic energy [Eh] and correlation energy component [Eh]; for the requested configuration interaction level of theory and root; n (numbering starts at 0). CI STATE-AVERAGED TOTAL ENERGY¶. CI STATE-AVERAGED CORRELATION ENERGY¶; The total electronic energy [Eh] and correlation energy component [Eh]; for state-averaged CI/CASSCF levels of theory. CI TOTAL ENERGY¶. CI CORRELATION ENERGY¶; The total electronic energy [Eh] and correlation energy component [Eh]; for the requested configuration interaction level of theory and root. CISD DIPOLE¶; Dipole array [e a0] for the configuration interaction singles and doubles level of theory, (3,). CISD QUADRUPOLE¶; Redundant quadrupole array [e a0^2] for the configuration interaction singles and doubles level of theory, (3, 3). CISD TOTAL ENERGY¶. CISD CORRELATION ENERGY¶. CISDT TOTAL ENERGY¶. CISDT CORRELATION ENERGY¶. CISDTQ CORRELATION ENERGY¶. CISDTQ TOTAL ENERGY¶. CIn CORRELATION ENERGY¶. CIn TOTAL ENERGY¶; The total electronic energy [Eh] and correlation energy component [Eh]; for the labeled conf",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/glossary_psivariables.html:21947,configurat,configuration,21947,psi4manual/1.6.x/glossary_psivariables.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/glossary_psivariables.html,1,['configurat'],['configuration']
Deployability,"of virtual orbitals. Multireference Dimensions¶; A orbital diagram of the nomenclature used for CI and MCSCF calculations.; Diagrammatically:; -----------------------------------------------; CI | RAS | CAS; -----------------------------------------------; | frozen_uocc | frozen_uocc; dropped_uocc | rstr_uocc | rstr_uocc; -----------------------------------------------; | RAS IV |; | RAS III |; active | | active; | RAS II |; | RAS I |; -----------------------------------------------; dropped_docc | rstr_docc | rstr_docc; | frozen_docc | frozen_dcc; -----------------------------------------------. Notation:. uocc — Unoccupied orbitals.; active — Variable occupation orbitals.; socc — Singly occupied orbitals.; docc — Doubly occupied orbitals. Orbital spaces:. frozen_uocc — Absolutely frozen virtual orbital.; rstr_uocc — Can have rotations, no excitations into.; dropped_uocc — rstr_uocc + frozen_uocc. —– end CI active —–. RAS IV — uocc, limited number of excitations into.; RAS III — uocc, limited number of excitations into.; RAS II — docc/socc/uocc, equivalent to active in CAS.; RAS I — docc/socc/uocc, limited excitations out of. —– start CI active —–. dropped_docc — rstr_docc + frozen_docc; rstr_docc — Can have rotations, no excitations from.; frozen_docc — Absolutely frozen core orbital. Orbitals are sorted by space, irrep, eigenvalue. table of contents. Linear Algebra in PSI4; How to call BLAS & LAPACK in PSI4; BLAS Wrappers; Important BLAS Routines; LAPACK Wrappers; Important Lapack Routines. How to use low-level BLAS/LAPACK with psi4.core.Matrix; How to name orbital bases (e.g., AO & SO); How to name orbital dimensions; How to name orbital spaces (e.g., docc); Multireference Dimensions. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Programming with the Core Libraries; Linear Algebra in PSI4. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/prog_blas-1.html:15238,update,updated,15238,psi4manual/1.4.0/prog_blas-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/prog_blas-1.html,2,['update'],['updated']
Deployability,"of virtual orbitals. Multireference Dimensions¶; A orbital diagram of the nomenclature used for CI and MCSCF calculations.; Diagrammatically:; -----------------------------------------------; CI | RAS | CAS; -----------------------------------------------; | frozen_uocc | frozen_uocc; dropped_uocc | rstr_uocc | rstr_uocc; -----------------------------------------------; | RAS IV |; | RAS III |; active | | active; | RAS II |; | RAS I |; -----------------------------------------------; dropped_docc | rstr_docc | rstr_docc; | frozen_docc | frozen_dcc; -----------------------------------------------. Notation:. uocc — Unoccupied orbitals.; active — Variable occupation orbitals.; socc — Singly occupied orbitals.; docc — Doubly occupied orbitals. Orbital spaces:. frozen_uocc — Absolutely frozen virtual orbital.; rstr_uocc — Can have rotations, no excitations into.; dropped_uocc — rstr_uocc + frozen_uocc. —– end CI active —–. RAS IV — uocc, limited number of excitations into.; RAS III — uocc, limited number of excitations into.; RAS II — docc/socc/uocc, equivalent to active in CAS.; RAS I — docc/socc/uocc, limited excitations out of. —– start CI active —–. dropped_docc — rstr_docc + frozen_docc; rstr_docc — Can have rotations, no excitations from.; frozen_docc — Absolutely frozen core orbital. Orbitals are sorted by space, irrep, eigenvalue. table of contents. Linear Algebra in PSI4; How to call BLAS & LAPACK in PSI4; BLAS Wrappers; Important BLAS Routines; LAPACK Wrappers; Important Lapack Routines. How to use low-level BLAS/LAPACK with psi4.core.Matrix; How to name orbital bases (e.g., AO & SO); How to name orbital dimensions; How to name orbital spaces (e.g., docc); Multireference Dimensions. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Programming with the Core Libraries; Linear Algebra in PSI4. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/prog_blas-1.html:15238,update,updated,15238,psi4manual/1.5.0/prog_blas-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/prog_blas-1.html,2,['update'],['updated']
Deployability,"oid clean_variables(). psi4.close_outfile()¶; Python Library Documentation: built-in function close_outfile in module psi4; close_outfile(...). close_outfile() -> None :. Closes the output file.; C++ signature :. void close_outfile(). psi4.compute_shell()¶; Python Library Documentation: built-in function compute_shell in module psi4; compute_shell(...). compute_shell( (TwoBodyAOInt)arg1, (int)arg2, (int)arg3, (int)arg4, (int)arg5) -> int :. docstring; C++ signature :. m compute_shell(N3psi12TwoBodyAOIntE {lvalue},i,i,i,i). psi4.dcft()¶; Python Library Documentation: built-in function dcft in module psi4; dcft(...). dcft( (Wavefunction)arg1) -> Wavefunction :. Runs the density cumulant functional theory code.; C++ signature :. N5boost10shared_ptrIN3psi12WavefunctionEEE dcft(N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.detci()¶; Python Library Documentation: built-in function detci in module psi4; detci(...). detci( (Wavefunction)arg1) -> Wavefunction :. Runs the determinant-based configuration interaction code.; C++ signature :. N5boost10shared_ptrIN3psi12WavefunctionEEE detci(N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.dfmp2()¶; Python Library Documentation: built-in function dfmp2 in module psi4; dfmp2(...). dfmp2( (Wavefunction)arg1) -> Wavefunction :. Runs the DF-MP2 code.; C++ signature :. N5boost10shared_ptrIN3psi12WavefunctionEEE dfmp2(N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.dfocc()¶; Python Library Documentation: built-in function dfocc in module psi4; dfocc(...). dfocc( (Wavefunction)arg1) -> Wavefunction :. Runs the density-fitted orbital optimized CC codes.; C++ signature :. N5boost10shared_ptrIN3psi12WavefunctionEEE dfocc(N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.displace_atom()¶; Python Library Documentation: built-in function displace_atom in module psi4; displace_atom(...). displace_atom( (Matrix)arg1, (int)arg2, (int)arg3, (int)arg4, (float)arg5) -> Matrix :. Displaces one coordinate of single atom.; C++ signature :. N5boos",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:19250,configurat,configuration,19250,psi4manual/1.0.0/autodoc_psimod-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html,2,['configurat'],['configuration']
Deployability,"oin)[source]¶; Specialization of table_generic into table with as many statistics; as will fit (mostly fullcurve and a few 5min) plus embedded slat; diagram as suitable for supplementary material. Multiple tables are; formed, one for each in bas with lines mtd within each table. table_reactions(modelchem, benchmark='default', sset='default', failoninc=True, columnplan=['indx', 'tagl', 'bm', 'mc', 'e', 'pe'], title='Reaction energies [kcal/mol] for {sset} $\\subset$ {dbse} with {mc}', indextitle='Detailed results for {sset} $\\subset$ {dbse} with {mc}', plotpath='analysis/mols/', standalone=True, theme='rxns', filename=None)[source]¶; Prepare single LaTeX table to filename or return lines if None showing; the per-reaction results for reactions in sset for single or array; or ‘all’ modelchem, where the last uses self.mcs(), model chemistries; versus benchmark. Use failoninc to toggle between command failing; or blank lines in table. Use standalone to toggle between full; compilable document and suitable for inclusion in another LaTeX document.; Use columnplan to customize column (from among columnreservoir, below); layout. Use title and indextitle to customize table caption and; table-of-contents caption, respectively; variables in curly braces will; be substituted. Use theme to customize the ref{tbl:} code. table_scrunch(plotpath, subjoin)[source]¶. table_wrapper(mtd, bas, tableplan, benchmark='default', opt=['CP'], err=['mae'], sset=['default'], dbse=None, opttarget=None, failoninc=True, xlimit=4.0, xlines=[0.0, 0.3, 1.0], ialimit=2.0, plotpath='autogen', subjoin=True, title=None, indextitle=None, suppressblanks=False, standalone=True, theme=None, filename=None)[source]¶; Prepares dictionary of errors for all combinations of mtd, opt,; bas with respect to model chemistry benchmark, mindful of failoninc.; The general plan for the table, as well as defaults for landscape,; footnotes, title, indextitle, and *theme are got from function; tableplan. Once error dictionary ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:41622,toggle,toggle,41622,psi4manual/1.0.0/autodoc_driver-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html,2,['toggle'],['toggle']
Deployability,"oint extrapolation of the correlation energy; performed according to corl_xtpl_helgaker_2(). >>> energy('sherrillgroup_gold_standard'). qcdb¶; Module to facilitate quantum chemical computations on chemical; databases. Contains Molecule class and physical constants from psi4 suite.; Module to largely replicate in python the psi4 libmints; CoordValue and CoordEntry classes, which were developed by; Justin M. Turney, with incremental improvements by other; psi4 developers. class CartesianEntry(entry_number, Z, charge, mass, symbol, label, x, y, z)[source]¶; Class to hold all information about an atom, including its; coordinate specification as three Cartesians. clone()[source]¶; Returns new, independent CartesianEntry object. compute()[source]¶; Computes the values of the coordinates (in whichever units; were inputted), returning them in a Vector. everything()[source]¶. invalidate()[source]¶; Flags the current coordinates as being outdated. print_in_input_format()[source]¶; Prints the updated geometry, in the format provided by the user. set_coordinates(x, y, z)[source]¶; Given the current set of coordinates, updates the values of this; atom’s coordinates and any variables that may depend on it. type()[source]¶; The type of CoordEntry specialization. class CoordEntry(entry_number, Z, charge, mass, symbol, label='')[source]¶; Class to. Z()[source]¶; The nuclear charge of the current atom (0 if ghosted). static a(a1, a2, a3)[source]¶; Computes the angle (in rad.) between three sets of coordinates. charge()[source]¶; The “atomic charge” of the current atom (for SAD purposes). static d(a1, a2, a3, a4)[source]¶; Computes the dihedral (in rad.) between four sets of coordinates. entry_number()[source]¶; The order in which this appears in the full atom list. everything()[source]¶. is_computed()[source]¶; Whether the current atom’s coordinates are up-to-date. is_equivalent_to(other)[source]¶; Whether this atom has the same mass and ghost status as atom other.; Unlike the libmint",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/autodoc_driver-1.html:35496,update,updated,35496,psi4manual/4.0b3/autodoc_driver-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_driver-1.html,4,['update'],['updated']
Deployability,"oint_group('c1')\n""""""; commands += """"""molecule.fix_orientation(1)\n""""""; commands += """"""molecule.update_geometry()\n"""""". if (openshell_override) and (molecule.multiplicity() != 1):; if user_reference == 'RHF':; commands += """"""PsiMod.set_global_option('REFERENCE', 'UHF')\n""""""; elif user_reference == 'RKS':; commands += """"""PsiMod.set_global_option('REFERENCE', 'UKS')\n"""""". commands += """"""PsiMod.set_global_option('WRITER_FILE_LABEL', '%s')\n"""""" % \; (user_writer_file_label + ('' if user_writer_file_label == '' else '-') + rgt). # all modes need to step through the reagents but all for different purposes; # continuous: defines necessary commands, executes energy(method) call, and collects results into dictionary; # sow: opens individual reagent input file, writes the necessary commands, and writes energy(method) call; # reap: opens individual reagent output file, collects results into a dictionary; if (db_mode.lower() == 'continuous'):; exec(banners); exec(format_molecule_for_input(GEOS[rgt])); exec(commands); #print 'MOLECULE LIVES %23s %8s %4d %4d %4s' % (rgt, PsiMod.get_global_option('REFERENCE'),; # molecule.molecular_charge(), molecule.multiplicity(), molecule.schoenflies_symbol()); PsiMod.set_variable('NATOM', molecule.natom()); PsiMod.set_variable('NUCLEAR REPULSION ENERGY', molecule.nuclear_repulsion_energy()); if re.match(r'^verify', lowername):; compare_values(DATA['NUCLEAR REPULSION ENERGY'][rgt], PsiMod.get_variable('NUCLEAR REPULSION ENERGY'), ; 4, '%s %.4f' % (rgt, PsiMod.get_variable('NUCLEAR REPULSION ENERGY'))); ERGT[rgt] = 7.0; else:; ERGT[rgt] = call_function_in_1st_argument(func, **kwargs); #print ERGT[rgt]; PsiMod.print_variables(); exec(actives); for envv in db_tabulate:; VRGT[rgt][envv.upper()] = PsiMod.get_variable(envv); PsiMod.set_global_option(""REFERENCE"", user_reference); PsiMod.clean(). elif (db_mode.lower() == 'sow'):; freagent = open('%s.in' % (rgt), 'w'); freagent.write('# This is a psi4 input file auto-generated from the database() wrappe",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:43147,continuous,continuous,43147,psi4manual/4.0b4/_modules/wrappers.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html,1,['continuous'],['continuous']
Deployability,"ol.mass(at) for at in range(mol.natom())]); irrep_labels = mol.irrep_labels(). vibinfo, vibtext = qcdb.vib.harmonic_analysis(; nmwhess, geom, m, wfn.basisset(), irrep_labels, dipder=dipder, project_trans=project_trans, project_rot=project_rot); vibrec.update({k: qca.json() for k, qca in vibinfo.items()}). core.print_out(vibtext); core.print_out(qcdb.vib.print_vibs(vibinfo, shortlong=True, normco='x', atom_lbl=symbols)). if core.has_option_changed('THERMO', 'ROTATIONAL_SYMMETRY_NUMBER'):; rsn = core.get_option('THERMO', 'ROTATIONAL_SYMMETRY_NUMBER'); else:; rsn = mol.rotational_symmetry_number(). if irrep is None:; therminfo, thermtext = qcdb.vib.thermo(; vibinfo,; T=core.get_option(""THERMO"", ""T""), # 298.15 [K]; P=core.get_option(""THERMO"", ""P""), # 101325. [Pa]; multiplicity=mol.multiplicity(),; molecular_mass=np.sum(m),; sigma=rsn,; rotor_type=mol.rotor_type(),; rot_const=np.asarray(mol.rotational_constants()),; E0=core.variable('CURRENT ENERGY')) # someday, wfn.energy(); vibrec.update({k: qca.json() for k, qca in therminfo.items()}). core.set_variable(""ZPVE"", therminfo['ZPE_corr'].data) # P::e THERMO; core.set_variable(""THERMAL ENERGY CORRECTION"", therminfo['E_corr'].data) # P::e THERMO; core.set_variable(""ENTHALPY CORRECTION"", therminfo['H_corr'].data) # P::e THERMO; core.set_variable(""GIBBS FREE ENERGY CORRECTION"", therminfo['G_corr'].data) # P::e THERMO. core.set_variable(""ZERO K ENTHALPY"", therminfo['ZPE_tot'].data) # P::e THERMO; core.set_variable(""THERMAL ENERGY"", therminfo['E_tot'].data) # P::e THERMO; core.set_variable(""ENTHALPY"", therminfo['H_tot'].data) # P::e THERMO; core.set_variable(""GIBBS FREE ENERGY"", therminfo['G_tot'].data) # P::e THERMO. core.print_out(thermtext); else:; core.print_out(' Thermochemical analysis skipped for partial frequency calculation.\n'). if core.get_option('FINDIF', 'HESSIAN_WRITE'):; filename = core.get_writer_file_prefix(mol.name()) + "".vibrec""; with open(filename, 'w') as handle:; json.dump(vibrec, handle, sort_keys=True, ind",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/driver.html:89901,update,update,89901,psi4manual/1.4.0/_modules/psi4/driver/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/driver.html,2,['update'],['update']
Deployability,"olarizability, rotation, roa_tensor. dct; density cumulant (functional) theory; [manual]; RHF/UHF; Listed here. omp2; orbital-optimized second-order; MP perturbation theory; [manual]; RHF/UHF; Listed here; Density fitted only. omp3; orbital-optimized third-order; MP perturbation theory; [manual]; RHF/UHF; Listed here; Density fitted only. omp2.5; orbital-optimized MP2.5; [manual]; RHF/UHF; Listed here; Density fitted only. olccd; orbital optimized LCCD; [manual]; RHF/UHF; Listed here; Density fitted only. eom-cc2; 2nd-order approximate EOM-CCSD; RHF; oscillator_strength, rotational_strength. eom-ccsd; Equation-of-motion CCSD (EOM-CCSD); RHF; oscillator_strength, rotational_strength. cisd, cisdt,; cisdt, cisdtq,; ci5, …, fci; Configuration interaction; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. casscf, rasscf; Multi-configurational SCF; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. adc(0), adc(1),; …, adc(3),; cvs-adc(0), …; cvs-adc(3); Algebraic-diagrammatic construction methods; [manual]; RHF/UHF; dipole, transition_dipole, oscillator_strength,; rotational_strength. Parameters:. name (str) – 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. properties (List[str]) – \(\Rightarrow\) [] \(\Leftarrow\) || ['rotation', 'polarizability', 'oscillator_strength', 'roa'] || etc.; Indicates which properties should be computed. Defaults to dipole and quadrupole. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] Optical rotation calculation; >>> properties('cc2', properties=['rotation']). table of contents. properties; properties(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. PSI4 API: Linking C++ and Python; properties. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/api/psi4.driver.properties.html:2832,update,updated,2832,psi4manual/master/api/psi4.driver.properties.html,https://psicode.org,https://psicode.org/psi4manual/master/api/psi4.driver.properties.html,1,['update'],['updated']
Deployability,"ole build matrix (currently 16 builds). After editing this (and; opening the PR), you’ll have to issue a comment @conda-forge-admin, please rerender for the; matrix slimming to take effect.; Possibly: remove any old patches that are now in the main codebase.; Possibly: add in or remove any dependency or ecosystem packages.; Possibly: for any relevant addition, make sure -D CMAKE_INSIST_FIND_PACKAGE_<project>=ON or; -D ENABLE_<project>=ON is set in build.sh and bld.bat.; Possibly: add or release version constraints or architecture constraints (e.g., [not win]) on packages. Submit the PR and rerender (cmd above). Monitor the CI.; When all CI lanes are passing and the tag is final on the maintenance branch, rerender (may be; no-op) and merge the PR.; After all the packages are built on main and show up at https://anaconda.org/conda-forge/psi4/files; with a couple downloads, this means they’re been mirrored and are generally installable. Announce; on slack general channel. Do final pass before release tag¶. Check that psi4/external/ repos and commits have been updated to match conda recipes sources. Also check versions with conda_build_config.yaml; Check psi4/doc/sphinxman/source/introduction.rst for any compiler and Python minimum requirements to edit. Tag (pre)release¶. Thorough version bump directions at master http://psicode.org/psi4manual/master/manage_git.html#how-to-bump-a-version; Below is tl;dr; # be on clean master up-to-date with upstream in both commits and tags; # * mind which version strings get ""v"" and which don't; # * if not fork, replace ""upstream"" with ""origin"". >>> vi psi4/metadata.py; >>> git diff; diff --git a/psi4/metadata.py b/psi4/metadata.py; ...; -__version__ = '1.3rc1'; -__version_long = '1.3rc1+5a7522a'; -__version_upcoming_annotated_v_tag = '1.3rc2'; +__version__ = '1.3rc2'; +__version_long = '1.3rc2+zzzzzzz'; +__version_upcoming_annotated_v_tag = '1.3rc3'. >>> git add psi4/metadata.py; >>> git commit -m ""v1.3rc2""; [master bc8d7f5] v1.3rc2. >",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/manage_release.html:8910,release,release,8910,psi4manual/1.9.x/manage_release.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/manage_release.html,2,['release'],['release']
Deployability,"ole, polarizability, rotation, roa_tensor. ccsd; Coupled cluster singles and doubles (CCSD); RHF; dipole, quadrupole, polarizability, rotation, roa_tensor. dct; density cumulant (functional) theory; [manual]; RHF/UHF; Listed here. omp2; orbital-optimized second-order; MP perturbation theory; [manual]; RHF/UHF; Listed here; Density fitted only. omp3; orbital-optimized third-order; MP perturbation theory; [manual]; RHF/UHF; Listed here; Density fitted only. omp2.5; orbital-optimized MP2.5; [manual]; RHF/UHF; Listed here; Density fitted only. olccd; orbital optimized LCCD; [manual]; RHF/UHF; Listed here; Density fitted only. eom-cc2; 2nd-order approximate EOM-CCSD; RHF; oscillator_strength, rotational_strength. eom-ccsd; Equation-of-motion CCSD (EOM-CCSD); RHF; oscillator_strength, rotational_strength. cisd, cisdt,; cisdt, cisdtq,; ci5, …, fci; Configuration interaction; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. casscf, rasscf; Multi-configurational SCF; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. adc(0), adc(1),; …, adc(3),; cvs-adc(0), …; cvs-adc(3); Algebraic-diagrammatic construction methods; [manual]; RHF/UHF; dipole, transition_dipole, oscillator_strength,; rotational_strength. Parameters. name (str) – 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. properties (List[str]) – \(\Rightarrow\) [] \(\Leftarrow\) || ['rotation', 'polarizability', 'oscillator_strength', 'roa'] || etc.; Indicates which properties should be computed. Defaults to dipole and quadrupole. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples. >>> # [1] Optical rotation calculation; >>> properties('cc2', properties=['rotation']). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. PSI4 API: Linking C++ and Python; prop. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 Augu",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/api/psi4.driver.prop-1.html:1718,configurat,configurational,1718,psi4manual/1.4.0/api/psi4.driver.prop-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/api/psi4.driver.prop-1.html,2,['configurat'],['configurational']
Deployability,"ole, polarizability, rotation, roa_tensor. ccsd; Coupled cluster singles and doubles (CCSD); RHF; dipole, quadrupole, polarizability, rotation, roa_tensor. dct; density cumulant (functional) theory; [manual]; RHF/UHF; Listed here. omp2; orbital-optimized second-order; MP perturbation theory; [manual]; RHF/UHF; Listed here; Density fitted only. omp3; orbital-optimized third-order; MP perturbation theory; [manual]; RHF/UHF; Listed here; Density fitted only. omp2.5; orbital-optimized MP2.5; [manual]; RHF/UHF; Listed here; Density fitted only. olccd; orbital optimized LCCD; [manual]; RHF/UHF; Listed here; Density fitted only. eom-cc2; 2nd-order approximate EOM-CCSD; RHF; oscillator_strength, rotational_strength. eom-ccsd; Equation-of-motion CCSD (EOM-CCSD); RHF; oscillator_strength, rotational_strength. cisd, cisdt,; cisdt, cisdtq,; ci5, …, fci; Configuration interaction; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. casscf, rasscf; Multi-configurational SCF; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. adc(0), adc(1),; …, adc(3),; cvs-adc(0), …; cvs-adc(3); Algebraic-diagrammatic construction methods; [manual]; RHF/UHF; dipole, transition_dipole, oscillator_strength,; rotational_strength. Parameters. name (str) – 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. properties (List[str]) – \(\Rightarrow\) [] \(\Leftarrow\) || ['rotation', 'polarizability', 'oscillator_strength', 'roa'] || etc.; Indicates which properties should be computed. Defaults to dipole and quadrupole. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples. >>> # [1] Optical rotation calculation; >>> properties('cc2', properties=['rotation']). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. PSI4 API: Linking C++ and Python; properties. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 0",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/api/psi4.driver.properties-1.html:1750,configurat,configurational,1750,psi4manual/1.4.0/api/psi4.driver.properties-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/api/psi4.driver.properties-1.html,2,['configurat'],['configurational']
Deployability,"ole, polarizability, rotation, roa_tensor. ccsd; Coupled cluster singles and doubles (CCSD); RHF; dipole, quadrupole, polarizability, rotation, roa_tensor. dct; density cumulant (functional) theory; [manual]; RHF/UHF; Listed here. omp2; orbital-optimized second-order; MP perturbation theory; [manual]; RHF/UHF; Listed here; Density fitted only. omp3; orbital-optimized third-order; MP perturbation theory; [manual]; RHF/UHF; Listed here; Density fitted only. omp2.5; orbital-optimized MP2.5; [manual]; RHF/UHF; Listed here; Density fitted only. olccd; orbital optimized LCCD; [manual]; RHF/UHF; Listed here; Density fitted only. eom-cc2; 2nd-order approximate EOM-CCSD; RHF; oscillator_strength, rotational_strength. eom-ccsd; Equation-of-motion CCSD (EOM-CCSD); RHF; oscillator_strength, rotational_strength. cisd, cisdt,; cisdt, cisdtq,; ci5, …, fci; Configuration interaction; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. casscf, rasscf; Multi-configurational SCF; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. adc(0), adc(1),; …, adc(3),; cvs-adc(0), …; cvs-adc(3); Algebraic-diagrammatic construction methods; [manual]; RHF/UHF; dipole, transition_dipole, oscillator_strength,; rotational_strength. Parameters. name (str) – 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. properties (List[str]) – \(\Rightarrow\) [] \(\Leftarrow\) || ['rotation', 'polarizability', 'oscillator_strength', 'roa'] || etc.; Indicates which properties should be computed. Defaults to dipole and quadrupole. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples. >>> # [1] Optical rotation calculation; >>> properties('cc2', properties=['rotation']). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Psithon Functions: Invoking a Calculation; Property. © Copyright 2021, The Psi4 Project.; Last updated on Thur",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/prop-1.html:1758,configurat,configurational,1758,psi4manual/1.4.0/prop-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/prop-1.html,2,['configurat'],['configurational']
Deployability,"ole, polarizability, rotation, roa_tensor. ccsd; Coupled cluster singles and doubles (CCSD); RHF; dipole, quadrupole, polarizability, rotation, roa_tensor. dct; density cumulant (functional) theory; [manual]; RHF/UHF; Listed here. omp2; orbital-optimized second-order; MP perturbation theory; [manual]; RHF/UHF; Listed here; Density fitted only. omp3; orbital-optimized third-order; MP perturbation theory; [manual]; RHF/UHF; Listed here; Density fitted only. omp2.5; orbital-optimized MP2.5; [manual]; RHF/UHF; Listed here; Density fitted only. olccd; orbital optimized LCCD; [manual]; RHF/UHF; Listed here; Density fitted only. eom-cc2; 2nd-order approximate EOM-CCSD; RHF; oscillator_strength, rotational_strength. eom-ccsd; Equation-of-motion CCSD (EOM-CCSD); RHF; oscillator_strength, rotational_strength. cisd, cisdt,; cisdt, cisdtq,; ci5, …, fci; Configuration interaction; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. casscf, rasscf; Multi-configurational SCF; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. adc(0), adc(1),; …, adc(3),; cvs-adc(0), …; cvs-adc(3); Algebraic-diagrammatic construction methods; [manual]; RHF/UHF; dipole, transition_dipole, oscillator_strength,; rotational_strength. Parameters. name (str) – 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. properties (List[str]) – \(\Rightarrow\) [] \(\Leftarrow\) || ['rotation', 'polarizability', 'oscillator_strength', 'roa'] || etc.; Indicates which properties should be computed. Defaults to dipole and quadrupole. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples. >>> # [1] Optical rotation calculation; >>> properties('cc2', properties=['rotation']). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. PSI4 API: Linking C++ and Python; prop. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 Novemb",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/api/psi4.driver.prop-1.html:1718,configurat,configurational,1718,psi4manual/1.5.0/api/psi4.driver.prop-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/api/psi4.driver.prop-1.html,2,['configurat'],['configurational']
Deployability,"ole, polarizability, rotation, roa_tensor. ccsd; Coupled cluster singles and doubles (CCSD); RHF; dipole, quadrupole, polarizability, rotation, roa_tensor. dct; density cumulant (functional) theory; [manual]; RHF/UHF; Listed here. omp2; orbital-optimized second-order; MP perturbation theory; [manual]; RHF/UHF; Listed here; Density fitted only. omp3; orbital-optimized third-order; MP perturbation theory; [manual]; RHF/UHF; Listed here; Density fitted only. omp2.5; orbital-optimized MP2.5; [manual]; RHF/UHF; Listed here; Density fitted only. olccd; orbital optimized LCCD; [manual]; RHF/UHF; Listed here; Density fitted only. eom-cc2; 2nd-order approximate EOM-CCSD; RHF; oscillator_strength, rotational_strength. eom-ccsd; Equation-of-motion CCSD (EOM-CCSD); RHF; oscillator_strength, rotational_strength. cisd, cisdt,; cisdt, cisdtq,; ci5, …, fci; Configuration interaction; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. casscf, rasscf; Multi-configurational SCF; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. adc(0), adc(1),; …, adc(3),; cvs-adc(0), …; cvs-adc(3); Algebraic-diagrammatic construction methods; [manual]; RHF/UHF; dipole, transition_dipole, oscillator_strength,; rotational_strength. Parameters. name (str) – 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. properties (List[str]) – \(\Rightarrow\) [] \(\Leftarrow\) || ['rotation', 'polarizability', 'oscillator_strength', 'roa'] || etc.; Indicates which properties should be computed. Defaults to dipole and quadrupole. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples. >>> # [1] Optical rotation calculation; >>> properties('cc2', properties=['rotation']). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. PSI4 API: Linking C++ and Python; properties. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/api/psi4.driver.properties-1.html:1750,configurat,configurational,1750,psi4manual/1.5.0/api/psi4.driver.properties-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/api/psi4.driver.properties-1.html,2,['configurat'],['configurational']
Deployability,"ole, polarizability, rotation, roa_tensor. ccsd; Coupled cluster singles and doubles (CCSD); RHF; dipole, quadrupole, polarizability, rotation, roa_tensor. dct; density cumulant (functional) theory; [manual]; RHF/UHF; Listed here. omp2; orbital-optimized second-order; MP perturbation theory; [manual]; RHF/UHF; Listed here; Density fitted only. omp3; orbital-optimized third-order; MP perturbation theory; [manual]; RHF/UHF; Listed here; Density fitted only. omp2.5; orbital-optimized MP2.5; [manual]; RHF/UHF; Listed here; Density fitted only. olccd; orbital optimized LCCD; [manual]; RHF/UHF; Listed here; Density fitted only. eom-cc2; 2nd-order approximate EOM-CCSD; RHF; oscillator_strength, rotational_strength. eom-ccsd; Equation-of-motion CCSD (EOM-CCSD); RHF; oscillator_strength, rotational_strength. cisd, cisdt,; cisdt, cisdtq,; ci5, …, fci; Configuration interaction; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. casscf, rasscf; Multi-configurational SCF; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. adc(0), adc(1),; …, adc(3),; cvs-adc(0), …; cvs-adc(3); Algebraic-diagrammatic construction methods; [manual]; RHF/UHF; dipole, transition_dipole, oscillator_strength,; rotational_strength. Parameters. name (str) – 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. properties (List[str]) – \(\Rightarrow\) [] \(\Leftarrow\) || ['rotation', 'polarizability', 'oscillator_strength', 'roa'] || etc.; Indicates which properties should be computed. Defaults to dipole and quadrupole. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples. >>> # [1] Optical rotation calculation; >>> properties('cc2', properties=['rotation']). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Psithon Functions: Invoking a Calculation; Property. © Copyright 2021, The Psi4 Project.; Last updated on Sund",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/prop-1.html:1758,configurat,configurational,1758,psi4manual/1.5.0/prop-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/prop-1.html,2,['configurat'],['configurational']
Deployability,"ole, polarizability, rotation, roa_tensor. ccsd; Coupled cluster singles and doubles (CCSD); RHF; dipole, quadrupole, polarizability, rotation, roa_tensor. dct; density cumulant (functional) theory; [manual]; RHF/UHF; Listed here. omp2; orbital-optimized second-order; MP perturbation theory; [manual]; RHF/UHF; Listed here; Density fitted only. omp3; orbital-optimized third-order; MP perturbation theory; [manual]; RHF/UHF; Listed here; Density fitted only. omp2.5; orbital-optimized MP2.5; [manual]; RHF/UHF; Listed here; Density fitted only. olccd; orbital optimized LCCD; [manual]; RHF/UHF; Listed here; Density fitted only. eom-cc2; 2nd-order approximate EOM-CCSD; RHF; oscillator_strength, rotational_strength. eom-ccsd; Equation-of-motion CCSD (EOM-CCSD); RHF; oscillator_strength, rotational_strength. cisd, cisdt,; cisdt, cisdtq,; ci5, …, fci; Configuration interaction; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. casscf, rasscf; Multi-configurational SCF; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. adc(0), adc(1),; …, adc(3),; cvs-adc(0), …; cvs-adc(3); Algebraic-diagrammatic construction methods; [manual]; RHF/UHF; dipole, transition_dipole, oscillator_strength,; rotational_strength. Parameters. name (str) – 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. properties (List[str]) – \(\Rightarrow\) [] \(\Leftarrow\) || ['rotation', 'polarizability', 'oscillator_strength', 'roa'] || etc.; Indicates which properties should be computed. Defaults to dipole and quadrupole. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples. >>> # [1] Optical rotation calculation; >>> properties('cc2', properties=['rotation']). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.6;  · . PSI4. PSI4 API: Linking C++ and Python; prop. © Copyright 2022, The Psi4 Project.; Last updated on Thursday, 19 May ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/api/psi4.driver.prop.html:1718,configurat,configurational,1718,psi4manual/1.6.x/api/psi4.driver.prop.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/api/psi4.driver.prop.html,1,['configurat'],['configurational']
Deployability,"ole, polarizability, rotation, roa_tensor. ccsd; Coupled cluster singles and doubles (CCSD); RHF; dipole, quadrupole, polarizability, rotation, roa_tensor. dct; density cumulant (functional) theory; [manual]; RHF/UHF; Listed here. omp2; orbital-optimized second-order; MP perturbation theory; [manual]; RHF/UHF; Listed here; Density fitted only. omp3; orbital-optimized third-order; MP perturbation theory; [manual]; RHF/UHF; Listed here; Density fitted only. omp2.5; orbital-optimized MP2.5; [manual]; RHF/UHF; Listed here; Density fitted only. olccd; orbital optimized LCCD; [manual]; RHF/UHF; Listed here; Density fitted only. eom-cc2; 2nd-order approximate EOM-CCSD; RHF; oscillator_strength, rotational_strength. eom-ccsd; Equation-of-motion CCSD (EOM-CCSD); RHF; oscillator_strength, rotational_strength. cisd, cisdt,; cisdt, cisdtq,; ci5, …, fci; Configuration interaction; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. casscf, rasscf; Multi-configurational SCF; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. adc(0), adc(1),; …, adc(3),; cvs-adc(0), …; cvs-adc(3); Algebraic-diagrammatic construction methods; [manual]; RHF/UHF; dipole, transition_dipole, oscillator_strength,; rotational_strength. Parameters. name (str) – 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. properties (List[str]) – \(\Rightarrow\) [] \(\Leftarrow\) || ['rotation', 'polarizability', 'oscillator_strength', 'roa'] || etc.; Indicates which properties should be computed. Defaults to dipole and quadrupole. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples. >>> # [1] Optical rotation calculation; >>> properties('cc2', properties=['rotation']). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.6;  · . PSI4. PSI4 API: Linking C++ and Python; properties. © Copyright 2022, The Psi4 Project.; Last updated on Thursday, 1",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/api/psi4.driver.properties.html:1750,configurat,configurational,1750,psi4manual/1.6.x/api/psi4.driver.properties.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/api/psi4.driver.properties.html,1,['configurat'],['configurational']
Deployability,"ole, polarizability, rotation, roa_tensor. ccsd; Coupled cluster singles and doubles (CCSD); RHF; dipole, quadrupole, polarizability, rotation, roa_tensor. dct; density cumulant (functional) theory; [manual]; RHF/UHF; Listed here. omp2; orbital-optimized second-order; MP perturbation theory; [manual]; RHF/UHF; Listed here; Density fitted only. omp3; orbital-optimized third-order; MP perturbation theory; [manual]; RHF/UHF; Listed here; Density fitted only. omp2.5; orbital-optimized MP2.5; [manual]; RHF/UHF; Listed here; Density fitted only. olccd; orbital optimized LCCD; [manual]; RHF/UHF; Listed here; Density fitted only. eom-cc2; 2nd-order approximate EOM-CCSD; RHF; oscillator_strength, rotational_strength. eom-ccsd; Equation-of-motion CCSD (EOM-CCSD); RHF; oscillator_strength, rotational_strength. cisd, cisdt,; cisdt, cisdtq,; ci5, …, fci; Configuration interaction; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. casscf, rasscf; Multi-configurational SCF; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. adc(0), adc(1),; …, adc(3),; cvs-adc(0), …; cvs-adc(3); Algebraic-diagrammatic construction methods; [manual]; RHF/UHF; dipole, transition_dipole, oscillator_strength,; rotational_strength. Parameters. name (str) – 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. properties (List[str]) – \(\Rightarrow\) [] \(\Leftarrow\) || ['rotation', 'polarizability', 'oscillator_strength', 'roa'] || etc.; Indicates which properties should be computed. Defaults to dipole and quadrupole. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples. >>> # [1] Optical rotation calculation; >>> properties('cc2', properties=['rotation']). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.6;  · . PSI4. Psithon Functions: Invoking a Calculation; Property. © Copyright 2022, The Psi4 Project.; Last updated on Thur",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/prop.html:1758,configurat,configurational,1758,psi4manual/1.6.x/prop.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/prop.html,1,['configurat'],['configurational']
Deployability,"ole, polarizability, rotation, roa_tensor. ccsd; Coupled cluster singles and doubles (CCSD); RHF; dipole, quadrupole, polarizability, rotation, roa_tensor. dct; density cumulant (functional) theory; [manual]; RHF/UHF; Listed here. omp2; orbital-optimized second-order; MP perturbation theory; [manual]; RHF/UHF; Listed here; Density fitted only. omp3; orbital-optimized third-order; MP perturbation theory; [manual]; RHF/UHF; Listed here; Density fitted only. omp2.5; orbital-optimized MP2.5; [manual]; RHF/UHF; Listed here; Density fitted only. olccd; orbital optimized LCCD; [manual]; RHF/UHF; Listed here; Density fitted only. eom-cc2; 2nd-order approximate EOM-CCSD; RHF; oscillator_strength, rotational_strength. eom-ccsd; Equation-of-motion CCSD (EOM-CCSD); RHF; oscillator_strength, rotational_strength. cisd, cisdt,; cisdt, cisdtq,; ci5, …, fci; Configuration interaction; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. casscf, rasscf; Multi-configurational SCF; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. adc(0), adc(1),; …, adc(3),; cvs-adc(0), …; cvs-adc(3); Algebraic-diagrammatic construction methods; [manual]; RHF/UHF; dipole, transition_dipole, oscillator_strength,; rotational_strength. Parameters:. name (str) – 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. properties (List[str]) – \(\Rightarrow\) [] \(\Leftarrow\) || ['rotation', 'polarizability', 'oscillator_strength', 'roa'] || etc.; Indicates which properties should be computed. Defaults to dipole and quadrupole. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] Optical rotation calculation; >>> properties('cc2', properties=['rotation']). table of contents. prop; prop(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. PSI4 API: Linking C++ and Python; prop. © Copyright 2007-2024, The",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/api/psi4.driver.prop.html:1729,configurat,configurational,1729,psi4manual/master/api/psi4.driver.prop.html,https://psicode.org,https://psicode.org/psi4manual/master/api/psi4.driver.prop.html,1,['configurat'],['configurational']
Deployability,"ole, polarizability, rotation, roa_tensor. ccsd; Coupled cluster singles and doubles (CCSD); RHF; dipole, quadrupole, polarizability, rotation, roa_tensor. dct; density cumulant (functional) theory; [manual]; RHF/UHF; Listed here. omp2; orbital-optimized second-order; MP perturbation theory; [manual]; RHF/UHF; Listed here; Density fitted only. omp3; orbital-optimized third-order; MP perturbation theory; [manual]; RHF/UHF; Listed here; Density fitted only. omp2.5; orbital-optimized MP2.5; [manual]; RHF/UHF; Listed here; Density fitted only. olccd; orbital optimized LCCD; [manual]; RHF/UHF; Listed here; Density fitted only. eom-cc2; 2nd-order approximate EOM-CCSD; RHF; oscillator_strength, rotational_strength. eom-ccsd; Equation-of-motion CCSD (EOM-CCSD); RHF; oscillator_strength, rotational_strength. cisd, cisdt,; cisdt, cisdtq,; ci5, …, fci; Configuration interaction; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. casscf, rasscf; Multi-configurational SCF; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. adc(0), adc(1),; …, adc(3),; cvs-adc(0), …; cvs-adc(3); Algebraic-diagrammatic construction methods; [manual]; RHF/UHF; dipole, transition_dipole, oscillator_strength,; rotational_strength. Parameters:. name (str) – 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. properties (List[str]) – \(\Rightarrow\) [] \(\Leftarrow\) || ['rotation', 'polarizability', 'oscillator_strength', 'roa'] || etc.; Indicates which properties should be computed. Defaults to dipole and quadrupole. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] Optical rotation calculation; >>> properties('cc2', properties=['rotation']). table of contents. prop; prop(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; prop. © Copyright 2007-2023, The Psi4 P",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.prop.html:1722,configurat,configurational,1722,psi4manual/1.8.x/api/psi4.driver.prop.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.prop.html,1,['configurat'],['configurational']
Deployability,"ole, polarizability, rotation, roa_tensor. ccsd; Coupled cluster singles and doubles (CCSD); RHF; dipole, quadrupole, polarizability, rotation, roa_tensor. dct; density cumulant (functional) theory; [manual]; RHF/UHF; Listed here. omp2; orbital-optimized second-order; MP perturbation theory; [manual]; RHF/UHF; Listed here; Density fitted only. omp3; orbital-optimized third-order; MP perturbation theory; [manual]; RHF/UHF; Listed here; Density fitted only. omp2.5; orbital-optimized MP2.5; [manual]; RHF/UHF; Listed here; Density fitted only. olccd; orbital optimized LCCD; [manual]; RHF/UHF; Listed here; Density fitted only. eom-cc2; 2nd-order approximate EOM-CCSD; RHF; oscillator_strength, rotational_strength. eom-ccsd; Equation-of-motion CCSD (EOM-CCSD); RHF; oscillator_strength, rotational_strength. cisd, cisdt,; cisdt, cisdtq,; ci5, …, fci; Configuration interaction; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. casscf, rasscf; Multi-configurational SCF; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. adc(0), adc(1),; …, adc(3),; cvs-adc(0), …; cvs-adc(3); Algebraic-diagrammatic construction methods; [manual]; RHF/UHF; dipole, transition_dipole, oscillator_strength,; rotational_strength. Parameters:. name (str) – 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. properties (List[str]) – \(\Rightarrow\) [] \(\Leftarrow\) || ['rotation', 'polarizability', 'oscillator_strength', 'roa'] || etc.; Indicates which properties should be computed. Defaults to dipole and quadrupole. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] Optical rotation calculation; >>> properties('cc2', properties=['rotation']). table of contents. prop; prop(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.9.1;  · . PSI4. PSI4 API: Linking C++ and Python; prop. © Copyright 2007-2024, The Psi4 P",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/api/psi4.driver.prop.html:1722,configurat,configurational,1722,psi4manual/1.9.x/api/psi4.driver.prop.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/api/psi4.driver.prop.html,1,['configurat'],['configurational']
Deployability,"ole, polarizability, rotation, roa_tensor. ccsd; Coupled cluster singles and doubles (CCSD); RHF; dipole, quadrupole, polarizability, rotation, roa_tensor. dct; density cumulant (functional) theory; [manual]; RHF/UHF; Listed here. omp2; orbital-optimized second-order; MP perturbation theory; [manual]; RHF/UHF; Listed here; Density fitted only. omp3; orbital-optimized third-order; MP perturbation theory; [manual]; RHF/UHF; Listed here; Density fitted only. omp2.5; orbital-optimized MP2.5; [manual]; RHF/UHF; Listed here; Density fitted only. olccd; orbital optimized LCCD; [manual]; RHF/UHF; Listed here; Density fitted only. eom-cc2; 2nd-order approximate EOM-CCSD; RHF; oscillator_strength, rotational_strength. eom-ccsd; Equation-of-motion CCSD (EOM-CCSD); RHF; oscillator_strength, rotational_strength. cisd, cisdt,; cisdt, cisdtq,; ci5, …, fci; Configuration interaction; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. casscf, rasscf; Multi-configurational SCF; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. adc(0), adc(1),; …, adc(3),; cvs-adc(0), …; cvs-adc(3); Algebraic-diagrammatic construction methods; [manual]; RHF/UHF; dipole, transition_dipole, oscillator_strength,; rotational_strength. Parameters:. name (str) – 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. properties (List[str]) – \(\Rightarrow\) [] \(\Leftarrow\) || ['rotation', 'polarizability', 'oscillator_strength', 'roa'] || etc.; Indicates which properties should be computed. Defaults to dipole and quadrupole. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] Optical rotation calculation; >>> properties('cc2', properties=['rotation']). table of contents. properties; properties(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. PSI4 API: Linking C++ and Python; properties. © Copyri",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/api/psi4.driver.properties.html:1761,configurat,configurational,1761,psi4manual/master/api/psi4.driver.properties.html,https://psicode.org,https://psicode.org/psi4manual/master/api/psi4.driver.properties.html,1,['configurat'],['configurational']
Deployability,"ole, polarizability, rotation, roa_tensor. ccsd; Coupled cluster singles and doubles (CCSD); RHF; dipole, quadrupole, polarizability, rotation, roa_tensor. dct; density cumulant (functional) theory; [manual]; RHF/UHF; Listed here. omp2; orbital-optimized second-order; MP perturbation theory; [manual]; RHF/UHF; Listed here; Density fitted only. omp3; orbital-optimized third-order; MP perturbation theory; [manual]; RHF/UHF; Listed here; Density fitted only. omp2.5; orbital-optimized MP2.5; [manual]; RHF/UHF; Listed here; Density fitted only. olccd; orbital optimized LCCD; [manual]; RHF/UHF; Listed here; Density fitted only. eom-cc2; 2nd-order approximate EOM-CCSD; RHF; oscillator_strength, rotational_strength. eom-ccsd; Equation-of-motion CCSD (EOM-CCSD); RHF; oscillator_strength, rotational_strength. cisd, cisdt,; cisdt, cisdtq,; ci5, …, fci; Configuration interaction; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. casscf, rasscf; Multi-configurational SCF; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. adc(0), adc(1),; …, adc(3),; cvs-adc(0), …; cvs-adc(3); Algebraic-diagrammatic construction methods; [manual]; RHF/UHF; dipole, transition_dipole, oscillator_strength,; rotational_strength. Parameters:. name (str) – 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. properties (List[str]) – \(\Rightarrow\) [] \(\Leftarrow\) || ['rotation', 'polarizability', 'oscillator_strength', 'roa'] || etc.; Indicates which properties should be computed. Defaults to dipole and quadrupole. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] Optical rotation calculation; >>> properties('cc2', properties=['rotation']). table of contents. properties; properties(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; properties. © Copyright 200",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.properties.html:1754,configurat,configurational,1754,psi4manual/1.8.x/api/psi4.driver.properties.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.properties.html,1,['configurat'],['configurational']
Deployability,"ole, polarizability, rotation, roa_tensor. ccsd; Coupled cluster singles and doubles (CCSD); RHF; dipole, quadrupole, polarizability, rotation, roa_tensor. dct; density cumulant (functional) theory; [manual]; RHF/UHF; Listed here. omp2; orbital-optimized second-order; MP perturbation theory; [manual]; RHF/UHF; Listed here; Density fitted only. omp3; orbital-optimized third-order; MP perturbation theory; [manual]; RHF/UHF; Listed here; Density fitted only. omp2.5; orbital-optimized MP2.5; [manual]; RHF/UHF; Listed here; Density fitted only. olccd; orbital optimized LCCD; [manual]; RHF/UHF; Listed here; Density fitted only. eom-cc2; 2nd-order approximate EOM-CCSD; RHF; oscillator_strength, rotational_strength. eom-ccsd; Equation-of-motion CCSD (EOM-CCSD); RHF; oscillator_strength, rotational_strength. cisd, cisdt,; cisdt, cisdtq,; ci5, …, fci; Configuration interaction; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. casscf, rasscf; Multi-configurational SCF; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. adc(0), adc(1),; …, adc(3),; cvs-adc(0), …; cvs-adc(3); Algebraic-diagrammatic construction methods; [manual]; RHF/UHF; dipole, transition_dipole, oscillator_strength,; rotational_strength. Parameters:. name (str) – 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. properties (List[str]) – \(\Rightarrow\) [] \(\Leftarrow\) || ['rotation', 'polarizability', 'oscillator_strength', 'roa'] || etc.; Indicates which properties should be computed. Defaults to dipole and quadrupole. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] Optical rotation calculation; >>> properties('cc2', properties=['rotation']). table of contents. properties; properties(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.9.1;  · . PSI4. PSI4 API: Linking C++ and Python; properties. © Copyright 200",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/api/psi4.driver.properties.html:1754,configurat,configurational,1754,psi4manual/1.9.x/api/psi4.driver.properties.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/api/psi4.driver.properties.html,1,['configurat'],['configurational']
Deployability,"ole, polarizability, rotation, roa_tensor. ccsd; Coupled cluster singles and doubles (CCSD); RHF; dipole, quadrupole, polarizability, rotation, roa_tensor. dct; density cumulant (functional) theory; [manual]; RHF/UHF; Listed here. omp2; orbital-optimized second-order; MP perturbation theory; [manual]; RHF/UHF; Listed here; Density fitted only. omp3; orbital-optimized third-order; MP perturbation theory; [manual]; RHF/UHF; Listed here; Density fitted only. omp2.5; orbital-optimized MP2.5; [manual]; RHF/UHF; Listed here; Density fitted only. olccd; orbital optimized LCCD; [manual]; RHF/UHF; Listed here; Density fitted only. eom-cc2; 2nd-order approximate EOM-CCSD; RHF; oscillator_strength, rotational_strength. eom-ccsd; Equation-of-motion CCSD (EOM-CCSD); RHF; oscillator_strength, rotational_strength. cisd, cisdt,; cisdt, cisdtq,; ci5, …, fci; Configuration interaction; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. casscf, rasscf; Multi-configurational SCF; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. adc(0), adc(1),; …, adc(3),; cvs-adc(0), …; cvs-adc(3); Algebraic-diagrammatic construction methods; [manual]; RHF/UHF; dipole, transition_dipole, oscillator_strength,; rotational_strength. Parameters:. name (str) – 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. properties (List[str]) – \(\Rightarrow\) [] \(\Leftarrow\) || ['rotation', 'polarizability', 'oscillator_strength', 'roa'] || etc.; Indicates which properties should be computed. Defaults to dipole and quadrupole. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] Optical rotation calculation; >>> properties('cc2', properties=['rotation']). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Psithon Functions: Invoking a Calculation; Property. © Copyright 2007-2024, The Psi4 Project.; Last",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/prop.html:1769,configurat,configurational,1769,psi4manual/master/prop.html,https://psicode.org,https://psicode.org/psi4manual/master/prop.html,1,['configurat'],['configurational']
Deployability,"ole, polarizability, rotation, roa_tensor. ccsd; Coupled cluster singles and doubles (CCSD); RHF; dipole, quadrupole, polarizability, rotation, roa_tensor. dct; density cumulant (functional) theory; [manual]; RHF/UHF; Listed here. omp2; orbital-optimized second-order; MP perturbation theory; [manual]; RHF/UHF; Listed here; Density fitted only. omp3; orbital-optimized third-order; MP perturbation theory; [manual]; RHF/UHF; Listed here; Density fitted only. omp2.5; orbital-optimized MP2.5; [manual]; RHF/UHF; Listed here; Density fitted only. olccd; orbital optimized LCCD; [manual]; RHF/UHF; Listed here; Density fitted only. eom-cc2; 2nd-order approximate EOM-CCSD; RHF; oscillator_strength, rotational_strength. eom-ccsd; Equation-of-motion CCSD (EOM-CCSD); RHF; oscillator_strength, rotational_strength. cisd, cisdt,; cisdt, cisdtq,; ci5, …, fci; Configuration interaction; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. casscf, rasscf; Multi-configurational SCF; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. adc(0), adc(1),; …, adc(3),; cvs-adc(0), …; cvs-adc(3); Algebraic-diagrammatic construction methods; [manual]; RHF/UHF; dipole, transition_dipole, oscillator_strength,; rotational_strength. Parameters:. name (str) – 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. properties (List[str]) – \(\Rightarrow\) [] \(\Leftarrow\) || ['rotation', 'polarizability', 'oscillator_strength', 'roa'] || etc.; Indicates which properties should be computed. Defaults to dipole and quadrupole. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] Optical rotation calculation; >>> properties('cc2', properties=['rotation']). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; prop. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 0",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.prop.html:1720,configurat,configurational,1720,psi4manual/1.7.x/api/psi4.driver.prop.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.prop.html,1,['configurat'],['configurational']
Deployability,"ole, polarizability, rotation, roa_tensor. ccsd; Coupled cluster singles and doubles (CCSD); RHF; dipole, quadrupole, polarizability, rotation, roa_tensor. dct; density cumulant (functional) theory; [manual]; RHF/UHF; Listed here. omp2; orbital-optimized second-order; MP perturbation theory; [manual]; RHF/UHF; Listed here; Density fitted only. omp3; orbital-optimized third-order; MP perturbation theory; [manual]; RHF/UHF; Listed here; Density fitted only. omp2.5; orbital-optimized MP2.5; [manual]; RHF/UHF; Listed here; Density fitted only. olccd; orbital optimized LCCD; [manual]; RHF/UHF; Listed here; Density fitted only. eom-cc2; 2nd-order approximate EOM-CCSD; RHF; oscillator_strength, rotational_strength. eom-ccsd; Equation-of-motion CCSD (EOM-CCSD); RHF; oscillator_strength, rotational_strength. cisd, cisdt,; cisdt, cisdtq,; ci5, …, fci; Configuration interaction; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. casscf, rasscf; Multi-configurational SCF; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. adc(0), adc(1),; …, adc(3),; cvs-adc(0), …; cvs-adc(3); Algebraic-diagrammatic construction methods; [manual]; RHF/UHF; dipole, transition_dipole, oscillator_strength,; rotational_strength. Parameters:. name (str) – 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. properties (List[str]) – \(\Rightarrow\) [] \(\Leftarrow\) || ['rotation', 'polarizability', 'oscillator_strength', 'roa'] || etc.; Indicates which properties should be computed. Defaults to dipole and quadrupole. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] Optical rotation calculation; >>> properties('cc2', properties=['rotation']). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; properties. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tues",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.properties.html:1752,configurat,configurational,1752,psi4manual/1.7.x/api/psi4.driver.properties.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.properties.html,1,['configurat'],['configurational']
Deployability,"ole, polarizability, rotation, roa_tensor. ccsd; Coupled cluster singles and doubles (CCSD); RHF; dipole, quadrupole, polarizability, rotation, roa_tensor. dct; density cumulant (functional) theory; [manual]; RHF/UHF; Listed here. omp2; orbital-optimized second-order; MP perturbation theory; [manual]; RHF/UHF; Listed here; Density fitted only. omp3; orbital-optimized third-order; MP perturbation theory; [manual]; RHF/UHF; Listed here; Density fitted only. omp2.5; orbital-optimized MP2.5; [manual]; RHF/UHF; Listed here; Density fitted only. olccd; orbital optimized LCCD; [manual]; RHF/UHF; Listed here; Density fitted only. eom-cc2; 2nd-order approximate EOM-CCSD; RHF; oscillator_strength, rotational_strength. eom-ccsd; Equation-of-motion CCSD (EOM-CCSD); RHF; oscillator_strength, rotational_strength. cisd, cisdt,; cisdt, cisdtq,; ci5, …, fci; Configuration interaction; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. casscf, rasscf; Multi-configurational SCF; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. adc(0), adc(1),; …, adc(3),; cvs-adc(0), …; cvs-adc(3); Algebraic-diagrammatic construction methods; [manual]; RHF/UHF; dipole, transition_dipole, oscillator_strength,; rotational_strength. Parameters:. name (str) – 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. properties (List[str]) – \(\Rightarrow\) [] \(\Leftarrow\) || ['rotation', 'polarizability', 'oscillator_strength', 'roa'] || etc.; Indicates which properties should be computed. Defaults to dipole and quadrupole. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] Optical rotation calculation; >>> properties('cc2', properties=['rotation']). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Psithon Functions: Invoking a Calculation; Property. © Copyright 2007-2022, The Psi4 Project.; Last updated ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/prop.html:1760,configurat,configurational,1760,psi4manual/1.7.x/prop.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/prop.html,1,['configurat'],['configurational']
Deployability,"ole, polarizability, rotation, roa_tensor. ccsd; Coupled cluster singles and doubles (CCSD); RHF; dipole, quadrupole, polarizability, rotation, roa_tensor. dct; density cumulant (functional) theory; [manual]; RHF/UHF; Listed here. omp2; orbital-optimized second-order; MP perturbation theory; [manual]; RHF/UHF; Listed here; Density fitted only. omp3; orbital-optimized third-order; MP perturbation theory; [manual]; RHF/UHF; Listed here; Density fitted only. omp2.5; orbital-optimized MP2.5; [manual]; RHF/UHF; Listed here; Density fitted only. olccd; orbital optimized LCCD; [manual]; RHF/UHF; Listed here; Density fitted only. eom-cc2; 2nd-order approximate EOM-CCSD; RHF; oscillator_strength, rotational_strength. eom-ccsd; Equation-of-motion CCSD (EOM-CCSD); RHF; oscillator_strength, rotational_strength. cisd, cisdt,; cisdt, cisdtq,; ci5, …, fci; Configuration interaction; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. casscf, rasscf; Multi-configurational SCF; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. adc(0), adc(1),; …, adc(3),; cvs-adc(0), …; cvs-adc(3); Algebraic-diagrammatic construction methods; [manual]; RHF/UHF; dipole, transition_dipole, oscillator_strength,; rotational_strength. Parameters:. name (str) – 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. properties (List[str]) – \(\Rightarrow\) [] \(\Leftarrow\) || ['rotation', 'polarizability', 'oscillator_strength', 'roa'] || etc.; Indicates which properties should be computed. Defaults to dipole and quadrupole. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] Optical rotation calculation; >>> properties('cc2', properties=['rotation']). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Psithon Functions: Invoking a Calculation; Property. © Copyright 2007-2023, The Psi4 Project.; Last update",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/prop.html:1762,configurat,configurational,1762,psi4manual/1.8.x/prop.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/prop.html,1,['configurat'],['configurational']
Deployability,"ole, polarizability, rotation, roa_tensor. ccsd; Coupled cluster singles and doubles (CCSD); RHF; dipole, quadrupole, polarizability, rotation, roa_tensor. dct; density cumulant (functional) theory; [manual]; RHF/UHF; Listed here. omp2; orbital-optimized second-order; MP perturbation theory; [manual]; RHF/UHF; Listed here; Density fitted only. omp3; orbital-optimized third-order; MP perturbation theory; [manual]; RHF/UHF; Listed here; Density fitted only. omp2.5; orbital-optimized MP2.5; [manual]; RHF/UHF; Listed here; Density fitted only. olccd; orbital optimized LCCD; [manual]; RHF/UHF; Listed here; Density fitted only. eom-cc2; 2nd-order approximate EOM-CCSD; RHF; oscillator_strength, rotational_strength. eom-ccsd; Equation-of-motion CCSD (EOM-CCSD); RHF; oscillator_strength, rotational_strength. cisd, cisdt,; cisdt, cisdtq,; ci5, …, fci; Configuration interaction; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. casscf, rasscf; Multi-configurational SCF; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. adc(0), adc(1),; …, adc(3),; cvs-adc(0), …; cvs-adc(3); Algebraic-diagrammatic construction methods; [manual]; RHF/UHF; dipole, transition_dipole, oscillator_strength,; rotational_strength. Parameters:. name (str) – 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. properties (List[str]) – \(\Rightarrow\) [] \(\Leftarrow\) || ['rotation', 'polarizability', 'oscillator_strength', 'roa'] || etc.; Indicates which properties should be computed. Defaults to dipole and quadrupole. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] Optical rotation calculation; >>> properties('cc2', properties=['rotation']). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.9.1;  · . PSI4. Psithon Functions: Invoking a Calculation; Property. © Copyright 2007-2024, The Psi4 Project.; Last update",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/prop.html:1762,configurat,configurational,1762,psi4manual/1.9.x/prop.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/prop.html,1,['configurat'],['configurational']
Deployability,"ole, quadrupole, polarizability, rotation, roa_tensor. dct; density cumulant (functional) theory; [manual]; RHF/UHF; Listed here. omp2; orbital-optimized second-order; MP perturbation theory; [manual]; RHF/UHF; Listed here; Density fitted only. omp3; orbital-optimized third-order; MP perturbation theory; [manual]; RHF/UHF; Listed here; Density fitted only. omp2.5; orbital-optimized MP2.5; [manual]; RHF/UHF; Listed here; Density fitted only. olccd; orbital optimized LCCD; [manual]; RHF/UHF; Listed here; Density fitted only. eom-cc2; 2nd-order approximate EOM-CCSD; RHF; oscillator_strength, rotational_strength. eom-ccsd; Equation-of-motion CCSD (EOM-CCSD); RHF; oscillator_strength, rotational_strength. cisd, cisdt,; cisdt, cisdtq,; ci5, …, fci; Configuration interaction; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. casscf, rasscf; Multi-configurational SCF; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. adc(0), adc(1),; …, adc(3),; cvs-adc(0), …; cvs-adc(3); Algebraic-diagrammatic construction methods; [manual]; RHF/UHF; dipole, transition_dipole, oscillator_strength,; rotational_strength. Parameters:. name (str) – 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. properties (List[str]) – \(\Rightarrow\) [] \(\Leftarrow\) || ['rotation', 'polarizability', 'oscillator_strength', 'roa'] || etc.; Indicates which properties should be computed. Defaults to dipole and quadrupole. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] Optical rotation calculation; >>> properties('cc2', properties=['rotation']). table of contents. prop; prop(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. PSI4 API: Linking C++ and Python; prop. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/api/psi4.driver.prop.html:2782,update,updated,2782,psi4manual/master/api/psi4.driver.prop.html,https://psicode.org,https://psicode.org/psi4manual/master/api/psi4.driver.prop.html,1,['update'],['updated']
Deployability,"olean; Default: true. LEVEL_SHIFT¶. Level shift to aid convergence. Type: double; Default: 0.0. MAXITER¶. Maximum number of iterations. Type: integer; Default: 100. MO_READ¶. Do read in from file the MOs from a previous computation?. Type: boolean; Default: true. REFERENCE¶. Reference wavefunction type. Type: string; Possible Values: RHF, ROHF, UHF, TWOCON, MCSCF, GENERAL; Default: RHF. SOCC¶. The number of singly occupied orbitals, per irrep. Type: array; Default: No Default. TURN_ON_ACTV¶. Type: integer; Default: 0. WFN_SYM¶. The symmetry of the SCF wavefunction. Type: string; Possible Values: A, AG, AU, AP, APP, A1, A2, B, BG, BU, B1, B2, B3, B1G, B2G, B3G, B1U, B2U, B3U, 0, 1, 2, 3, 4, 5, 6, 7, 8; Default: 1. Expert¶. ROTATE_MO_ANGLE¶. For orbital rotations after convergence, the angle (in degrees) by which to rotate. Type: double; Default: 0.0. ROTATE_MO_IRREP¶. For orbital rotations after convergence, irrep (1-based, Cotton order) of the orbitals to rotate. Type: integer; Default: 1. ROTATE_MO_P¶. For orbital rotations after convergence, number of the first orbital (1-based) to rotate. Type: integer; Default: 1. ROTATE_MO_Q¶. For orbital rotations after convergence, number of the second orbital (1-based) to rotate. Type: integer; Default: 2. Table Of Contents. MCSCF; General; CANONICALIZE_ACTIVE_FAVG; CANONICALIZE_INACTIVE_FAVG; CI_DIIS; DIIS; DIIS_MAX_VECS; DOCC; D_CONVERGENCE; E_CONVERGENCE; FAVG; FAVG_START; FOLLOW_ROOT; FORCE_TWOCON; INTERNAL_ROTATIONS; LEVEL_SHIFT; MAXITER; MO_READ; REFERENCE; SOCC; TURN_ON_ACTV; WFN_SYM. Expert; ROTATE_MO_ANGLE; ROTATE_MO_IRREP; ROTATE_MO_P; ROTATE_MO_Q. Previous topic; WFN; Next topic; CANONICALIZE_ACTIVE_FAVG; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; Keywords by Module ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 25, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/autodir_options_c/module__mcscf-1.html:3698,update,updated,3698,psi4manual/4.0b4/autodir_options_c/module__mcscf-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodir_options_c/module__mcscf-1.html,2,['update'],['updated']
Deployability,"olecule class are reading molecule input strings identically. dft-dens-cut; LibXC density screening test. Tests empty, C-only, X-only and XC superfunctionals. ‘super_mix’ showcases how to use different screening values for X and C parts. SCF will fail or crash (nans) without screening!. fd-freq-gradient; SCF STO-3G finite-differences frequencies from gradients for H2O. castup2; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup3) that output file doesn’t depend on options (scf_type) being set global or local. This input uses global. freq-masses; check nonphysical masses possible. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. dft1; DFT Functional Test all values update for new BraggSlater radii. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. scf-level-shift-rks; SCF level shift on an RKS computation. scf-guess; Test initial SCF guesses on FH and FH+ in cc-pVTZ basis. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. ci-property; CI/MCSCF cc-pvDZ properties for Potassium nitrate (rocket fuel!). dfccsd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. cc31; CCSD/sto-3g optical rotation calculation (both gauges) at two frequencies on methyloxirane. mints3; Test individual integral objects for correctness. dft-smoke; DFT Functional Smoke Test. dfmp2-grad4; DF-MP2 cc-pVDZ gradient for the NO molecule. soscf-ref; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. linK-1; RHF Linear Exchange Algorithm test for water. mbis-3; MBIS calculation on OH radical. sapt6; ch",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/autodoc_testsuite_corepsi4.html:30921,update,update,30921,psi4manual/1.7.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodoc_testsuite_corepsi4.html,2,['update'],['update']
Deployability,"olecule). [docs]; def compute_hessian(self,; molecule: core.Molecule,; wfn: core.Wavefunction = None) -> core.Matrix:; """"""Compute dispersion Hessian based on engine, dispersion level, and parameters in `self`.; Uses finite difference, as no dispersion engine has analytic second derivatives. Parameters; ----------; molecule; System for which to compute empirical dispersion correction.; wfn; Location to set QCVariables. Returns; -------; Matrix; (3*nat, 3*nat) dispersion Hessian [Eh/a0/a0]. """"""; from psi4.driver.driver_findif import assemble_hessian_from_gradients, hessian_from_gradients_geometries. optstash = p4util.OptionsState(['PRINT'], ['PARENT_SYMMETRY']); core.set_global_option('PRINT', 0). core.print_out(""\n\n Analytical Dispersion Hessians are not supported by any engine.\n""); core.print_out("" Computing the Hessian through finite difference of gradients.\n\n""). # Setup the molecule; molclone = molecule.clone(); molclone.reinterpret_coordentry(False); molclone.fix_orientation(True); molclone.fix_com(True). # Record undisplaced symmetry for projection of diplaced point groups; core.set_global_option(""PARENT_SYMMETRY"", molecule.schoenflies_symbol()). findif_meta_dict = hessian_from_gradients_geometries(molclone, -1); for displacement in findif_meta_dict[""displacements""].values():; geom_array = np.reshape(displacement[""geometry""], (-1, 3)); molclone.set_geometry(core.Matrix.from_array(geom_array)); molclone.update_geometry(); displacement[""gradient""] = self.compute_gradient(molclone).np.ravel().tolist(). H = assemble_hessian_from_gradients(findif_meta_dict, -1); if wfn is not None:; wfn.set_variable('DISPERSION CORRECTION HESSIAN', H); optstash.restore(); return core.Matrix.from_array(H). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .  · ; 1.9.1;  · . PSI4. Module code; psi4.driver.procrouting.empirical_dispersion. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 08 February 2024 09:32PM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/_modules/psi4/driver/procrouting/empirical_dispersion.html:14925,update,updated,14925,psi4manual/1.9.x/_modules/psi4/driver/procrouting/empirical_dispersion.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/_modules/psi4/driver/procrouting/empirical_dispersion.html,1,['update'],['updated']
Deployability,"olesky-Decomposed MP3; RHF/UHF; —; MP_TYPE CD. mp2.5; MP2.5; RHF/UHF; RHF/UHF; MP_TYPE CONV. Density-Fitted MP2.5; RHF/UHF; RHF/UHF; MP_TYPE DF. Cholesky-Decomposed MP2.5; RHF/UHF; —; MP_TYPE CD. lccd; Linearized CCD; RHF/UHF; RHF/UHF; CC_TYPE CONV. Density-Fitted LCCD; RHF/UHF; RHF/UHF; CC_TYPE DF. Cholesky-Decomposed LCCD; RHF/UHF; —; CC_TYPE CD. ccd; CCD; —; —; CC_TYPE CONV. Density-Fitted CCD; RHF; RHF; CC_TYPE DF. Cholesky-Decomposed CCD; RHF; —; CC_TYPE CD. ccsd; CCSD; —; —; CC_TYPE CONV. Density-Fitted CCSD; RHF; RHF; CC_TYPE DF. Cholesky-Decomposed CCSD; RHF; —; CC_TYPE CD. ccsd(t); CCSD(T); —; —; CC_TYPE CONV. Density-Fitted CCSD(T); RHF; RHF; CC_TYPE DF. Cholesky-Decomposed CCSD(T); RHF; —; CC_TYPE CD. a-ccsd(t); Lambda-CCSD(T); —; —; CC_TYPE CONV. Density-Fitted Lambda-CCSD(T); RHF; —; CC_TYPE DF. Cholesky-Decomposed Lambda-CCSD(T); RHF; —; CC_TYPE CD. table of contents. OCC: Orbital-Optimized Coupled-Cluster and Møller–Plesset Perturbation Theories; Introduction; Theory; Convergence Problems; Methods; Basic OCC Keywords; E_CONVERGENCE; R_CONVERGENCE; RMS_MOGRAD_CONVERGENCE; MAX_MOGRAD_CONVERGENCE; MO_MAXITER; WFN_TYPE; ORB_OPT. Advanced OCC Keywords; OPT_METHOD; MO_DIIS_NUM_VECS; LINEQ_SOLVER; ORTH_TYPE; MP2_OS_SCALE; MP2_SS_SCALE; MP2_SOS_SCALE; MP2_SOS_SCALE2; NAT_ORBS; OCC_ORBS_PRINT; TPDM_ABCD_TYPE; DO_DIIS; DO_LEVEL_SHIFT. Basic DFOCC Keywords; E_CONVERGENCE; R_CONVERGENCE; RMS_MOGRAD_CONVERGENCE; MAX_MOGRAD_CONVERGENCE; MO_MAXITER; ORB_OPT. Advanced DFOCC Keywords; OPT_METHOD; HESS_TYPE; MO_DIIS_NUM_VECS; ORTH_TYPE; DO_DIIS; DO_LEVEL_SHIFT. Conventional (Non-OO) Coupled-Cluster and Møller–Plesset Perturbation Theories. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Theoretical Methods: SCF to FCI; OCC: Orbital-Optimized Coupled-Cluster and Møller–Plesset Perturbation Theories. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/occ-1.html:19684,update,updated,19684,psi4manual/1.5.0/occ-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/occ-1.html,2,['update'],['updated']
Deployability,"om .molecule import Molecule. # DGAS This should be removed!; import psi4. [docs]def run_dftd3(self, func=None, dashlvl=None, dashparam=None, dertype=None, verbose=False):; """"""Function to call Grimme's dftd3 program (http://toc.uni-muenster.de/DFTD3/); to compute the -D correction of level *dashlvl* using parameters for; the functional *func*. The dictionary *dashparam* can be used to supply; a full set of dispersion parameters in the absense of *func* or to supply; individual overrides in the presence of *func*. Returns energy if *dertype* is 0,; gradient if *dertype* is 1, else tuple of energy and gradient if *dertype*; unspecified. The dftd3 executable must be independently compiled and found in; :envvar:`PATH` or :envvar:`PSIPATH`.; *self* may be either a qcdb.Molecule (sensibly) or a psi4.Molecule; (works b/c psi4.Molecule has been extended by this method py-side and; only public interface fns used) or a string that can be instantiated; into a qcdb.Molecule. """"""; # Create (if necessary) and update qcdb.Molecule; if isinstance(self, Molecule):; # called on a qcdb.Molecule; pass; elif isinstance(self, psi4.Molecule):; # called on a python export of a psi4.Molecule (py-side through Psi4's driver); self.create_psi4_string_from_molecule(); elif isinstance(self, basestring):; # called on a string representation of a psi4.Molecule (c-side through psi4.Dispersion); self = Molecule(self); else:; raise ValidationError(""""""Argument mol must be psi4string or qcdb.Molecule""""""); self.update_geometry(). # Validate arguments; dashlvl = dashlvl.lower(); dashlvl = dash_alias['-' + dashlvl][1:] if ('-' + dashlvl) in dash_alias.keys() else dashlvl; if dashlvl not in dashcoeff.keys():; raise ValidationError(""""""-D correction level %s is not available. Choose among %s."""""" % (dashlvl, dashcoeff.keys())). if dertype is None:; dertype = -1; elif der0th.match(str(dertype)):; dertype = 0; elif der1st.match(str(dertype)):; dertype = 1; elif der2nd.match(str(dertype)):; raise ValidationError",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/interface_dftd3.html:2367,update,update,2367,psi4manual/1.0.0/_modules/qcdb/interface_dftd3.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/interface_dftd3.html,1,['update'],['update']
Deployability,"om a Cfour execution. CI DIPOLE¶; Dipole array [e a0] for the requested configuration interaction level of theory, (3,). CI DIPOLE X¶. CI DIPOLE Y¶. CI DIPOLE Z¶; The three components of the dipole [Debye] for the requested; configuration interaction level of theory and root.; Deprecated in favor of CI DIPOLE. CI QUADRUPOLE¶; Redundant quadrupole array [e a0^2] for the requested configuration interaction level of theory, (3, 3). CI QUADRUPOLE XX¶. CI QUADRUPOLE XY¶. CI QUADRUPOLE XZ¶. CI QUADRUPOLE YY¶. CI QUADRUPOLE YZ¶. CI QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the requested; configuration interaction level of theory and root.; Deprecated in favor of CI QUADRUPOLE. CI ROOT n -> ROOT m DIPOLE¶; Transition dipole array [e a0] between roots n and m for the requested configuration interaction level of theory, (3,). CI ROOT n -> ROOT m DIPOLE X¶. CI ROOT n -> ROOT m DIPOLE Y¶. CI ROOT n -> ROOT m DIPOLE Z¶; The three components of the transition dipole [Debye] between roots n; and m for the requested configuration interaction level of theory.; Deprecated in favor of CI ROOT n -> ROOT m DIPOLE. CI ROOT n -> ROOT m QUADRUPOLE¶; Redundant transition quadrupole array [e a0^2] between roots n and m for the requested configuration interaction level of theory, (3, 3). CI ROOT n -> ROOT m QUADRUPOLE XX¶. CI ROOT n -> ROOT m QUADRUPOLE XY¶. CI ROOT n -> ROOT m QUADRUPOLE XZ¶. CI ROOT n -> ROOT m QUADRUPOLE YY¶. CI ROOT n -> ROOT m QUADRUPOLE YZ¶. CI ROOT n -> ROOT m QUADRUPOLE ZZ¶; The three components of the transition quadrupole [Debye Ang] between; roots n and m for the requested configuration interaction level of; theory.; Deprecated in favor of CI ROOT n -> ROOT m QUADRUPOLE. CI ROOT n DIPOLE¶; Dipole array [e a0] for the requested configuration interaction level of theory and root n, (3,). CI ROOT n DIPOLE X¶. CI ROOT n DIPOLE Y¶. CI ROOT n DIPOLE Z¶; The three components of the dipole [Debye] for the requested; configuration interaction level",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/glossary_psivariables-1.html:11280,configurat,configuration,11280,psi4manual/1.4.0/glossary_psivariables-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/glossary_psivariables-1.html,4,['configurat'],['configuration']
Deployability,"om psi4pasture"" OFF); option(ENABLE_transqt2 ""Enables transqt2 plugin installed from psi4pasture"" OFF); option(psi4_SKIP_ENABLE_Fortran ""Suppress enabling Fortran language even when Fortran addons enabled. Use when only linking pre-built, not compiling addon code."" OFF). # Append modules added to pasture as needed; if(ENABLE_ccsort OR ENABLE_transqt2); set(ENABLE_pasture ON); message(STATUS ""Enabling pasture plugins""); endif(). if(ENABLE_gdma OR ENABLE_dkh OR ENABLE_erd OR ENABLE_PCMSolver); if(psi4_SKIP_ENABLE_Fortran); message(STATUS ""NOT Enabling Fortran""); else(). Note that external projects will have their own sets of build; configuration options. Only the most-common user knobs of those are; mentioned above. How to install elsewhere than /usr/local/psi4¶; The installation directory is the filesystem location for the executable; script, the Python module, basis set data, and other administrative files.; Unless using the conda package, which is relocatable, the installation; directory must be specified with CMake variable CMAKE_INSTALL_PREFIX; before compiling. Build with Specific Install Directory; cmake -DCMAKE_INSTALL_PREFIX=/nfs/common/software/psi4. Relevant CMake Options:; CMAKE_INSTALL_PREFIX=PATH # Location to which Psi4 and internally built; # add-ons are installed (default: /usr/local/psi4). Note; It’s not guaranteed, but if, in a pinch, you need to install a; built Psi4 to a location not configured by CMAKE_INSTALL_PREFIX,; recursively copy the folders under objdir/stage/prefix to; the desired location, chown them if needed, edit the shebang in; bin/psi4 if needed, and recursively delete all the “.pyc” files. It; may just run. How to compile for debugging¶; Flags to turn optimizations off and debugging on can be set across the; project and plugins with CMake variable CMAKE_BUILD_TYPE before; compiling. Note that these flags will not propagate to any add-ons that; are detected pre-built rather than built. Build without optimization; cmake -DCMAKE_BUILD_",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/build_planning.html:23077,install,installation,23077,psi4manual/1.9.x/build_planning.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/build_planning.html,1,['install'],['installation']
Deployability,"om the LIBEFP library.; These systems are accessible in molecule {...} blocks without; additional configuration. How to configure libefp for building Psi4¶; Role and Dependencies. Role — In PSI4, libefp is a library that provides additional; molecular modeling capabilities (EFP).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) libefp; Upstream Dependencies — libefp \(\Leftarrow\) BLAS/LAPACK. CMake Variables. ENABLE_libefp — CMake variable toggling whether Psi4 builds with libefp; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For libefp, set to an installation directory containing include/efp.h; libefp_DIR — CMake variable to specify where pre-built libefp can be found. Set to installation directory containing share/cmake/libefp/libefpConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_libefp — CMake variable to force internal build of libefp instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_libefp — CMake variable to force detecting pre-built libefp and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_libefp=ON. Build without libefp. >>> cmake. Link against pre-built. >>> cmake -DENABLE_libefp=ON -DCMAKE_PREFIX_PATH=/path/to/libefp/root. >>> cmake -DENABLE_libefp=ON -Dlibefp_DIR=/path/to/libefp/configdir. Build bundled despite pre-built being detectable. >>> cmake -DENABLE_libefp=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/libefp/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_libefp=ON. table of contents. Interface to LIBEFP by I. Kaliman; Installation; EFP Fragments; Molecule Specification; Running EFP; Fragment Library; How to configure libefp for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to LIBEFP by I. Kaliman. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/libefp.html:9087,update,updated,9087,psi4manual/1.7.x/libefp.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/libefp.html,1,['update'],['updated']
Deployability,"omb construction; algorithm when specifying SCF_TYPE to use a composite algorithm combination (DFDIRJ+K_alg).; DFDIRJ supports multiple capabilities to improve performance. Specifically, DFDIRJ allows for a combination of density-matrix based ERI; screening (set SCREENING to DENSITY) and incremental Fock matrix construction (set INCFOCK to TRUE). These two, when combined,; enable more aggressive screening of ERI contributions to the Coulomb matrix and thus greatly improve performance. COSX Exchange¶; The semi-numerical COSX algorithm described in [Neese:2009:98] evaluates; two-electron ERIs analytically over one electron coordinate and numerically; over the other electron coordinate, and belongs to the family of pseudospectral; methods originally suggested by Friesner. In COSX, numerical integration is performed on standard; DFT quadrature grids, which are described in DFT: Density Functional Theory.; Both the accuracy of the COSX algorithm and also the computational; cost are directly determined by the size of the integration grid, so selection; of the grid is important. This COSX implementation uses two separate grids.; The SCF algorithm is first converged on a smaller grid, followed by a final SCF; iteration on a larger grid. This results in numerical errors comparable to; performing the entire SCF on the expensive larger grid at a computational cost; much closer to the smaller grid. The size of the initial grid is controlled by the; keywords COSX_RADIAL_POINTS_INITIAL and COSX_SPHERICAL_POINTS_INITIAL.; The final grid is controlled by COSX_RADIAL_POINTS_FINAL and; COSX_SPHERICAL_POINTS_FINAL. The defaults for both grids aim to balance; cost and accuracy.; Screening thresholds over integrals, densities, and basis extents are set; with the COSX_INTS_TOLERANCE, COSX_DENSITY_TOLERANCE, and; COSX_BASIS_TOLERANCE keywords, respectively. COSX_INTS_TOLERANCE; is the most consequential of the three thresholds in both cost and accuracy.; This keyword determines screening o",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/scf.html:35921,integrat,integration,35921,psi4manual/1.8.x/scf.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/scf.html,1,['integrat'],['integration']
Deployability,"omer ghosted. Gradients after three opt cycles are compared with those from psi4. cfour/sp-rhf-ccsdt; single-point CCSDT/qz2p on water. cfour/opt-rhf-scf; optimization HF/svp on water. cfour/sp-rhf-mp2; single-point MP2/qz2p on water. cfour/psi-rohf-scsmp2; ROHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/pywrap-cbs1; Various basis set extrapolation tests only in Cfour instead of Psi4. cfour/kw-2; testing best practices options, part ii. cfour/sp-rohf-ccsdt; single-point CCSDT/qz2p on NH2. cfour/sp-rhf-ccsd-ao; single-point CCSD/qz2p on water with aobasis. cfour/kw-3; Basis set spherical/Cartesian with cfour_basis and cfour_spherical. cfour/sp-rohf-ccsd_t_-ao; single-point CCSD(T)/qz2p on NH2 with aobasis. cfour/sp-rohf-ccsd-ao; single-point CCSD/qz2p on NH2 with aobasis. cfour/mints5-grad; geometry after three optimization cycles for a variety of input formats, references from psi4. cfour/sp-rhf-scf; single-point HF/qz2p on water. cfour/puream; Basis set spherical/Cartesian behavior in cfour. cfour/psi-rhf-mp3; MP3 energy components. Checks that computed identically between cfour and psi4. cfour/opt-rhf-mp2; optimization MP2/cc-pvtz on water. cfour/kw-1; testing best practices options, part i. cfour/kw-6; Basis set spherical/Cartesian with cfour_basis and puream. cfour/sp-uhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/psi-uhf-scsmp2; UHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/sp-uhf-ccsd; single-point CCSD/qz2p on NH2. cfour/kw-4; Basis set spherical/Cartesian with basis and puream. cfour/psi-mp4; MP4 energy components. Checks that computed identically between cfour and psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Test Suite and Sample Inputs; CFOUR. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/autodoc_testsuite_cfour.html:5197,update,updated,5197,psi4manual/1.7.x/autodoc_testsuite_cfour.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodoc_testsuite_cfour.html,1,['update'],['updated']
Deployability,"ompiler""; # - CMAKE_C_FLAGS ""Additional C flags""; # - CMAKE_CXX_COMPILER ""C++ compiler""; # - CMAKE_CXX_FLAGS ""Additional C++ flags""; # - CMAKE_Fortran_COMPILER ""Fortran compiler (required for some add-ons)""; # - CMAKE_Fortran_FLAGS ""Additional Fortran flags"". # <<< Detecting dependencies and add-ons >>>; #; # - PYTHON_EXECUTABLE ""Python interpreter to use (e.g., /path/to/bin/python2.7)""; # - PYTHON_LIBRARY ""Python library that goes with the interpreter (e.g., /path/to/lib/python2.7.so)""; # - PYTHON_INCLUDE_DIR ""Path to the python include files (e.g., /path/to/include/python2.7)""; # - SPHINX_ROOT ""Root directory for Sphinx: 'bin/sphinx-build' (or similar) should be in this dir.""; #; # For any ${AddOn} of: ambit, CheMPS2, dkh, libefp, erd, gau2grid, gdma, Libint, PCMSolver, pybind11, pylibefp,; # qcelemental, simint, Libxc; # - CMAKE_PREFIX_PATH ""Set to list of root directories to look for externally built add-ons and dependencies; # (e.g., /path/to/install-libint;/path/to/install-gdma where exists /path/to/install-libint/lib/libderiv.a)""; # - ${AddOn}_DIR ""Set to directory containing ${AddOn}Config.cmake file to facilitate detection of external build""; # - CMAKE_DISABLE_FIND_PACKAGE_${AddON} ""Set to OFF to force internal build""; # - CMAKE_INSIST_FIND_PACKAGE_${AddON} ""Set to ON to force external detect"". # <<< Detecting BLAS/LAPACK >>>; #; # - ENV(MATH_ROOT) ""Root directory where BLAS/LAPACK libraries should be detected (e.g., ${MATH_ROOT}/lib/libblas.so)""; # - BLAS_TYPE ""Target BLAS distribution for math detection; # (default: search order MKL>OPENBLAS>ESSL>ATLAS>ACML>SYSTEM_NATIVE on Linux; MKL>Accelerate>... on Mac)""; # - LAPACK_TYPE ""Target LAPACK distribution for math detection; # (default: search order MKL>OPENBLAS>ESSL>ATLAS>ACML>SYSTEM_NATIVE on Linux; MKL>Accelerate>... on Mac)""; # - LAPACK_LIBRARIES ""Location of BLAS/LAPACK libraries as "";""-separated list of full paths, bypassing math detection""; # - LAPACK_INCLUDE_DIRS ""Location of BLAS/LAPACK headers (onl",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/build_planning-1.html:11885,install,install-libint,11885,psi4manual/1.3.2/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/build_planning-1.html,6,['install'],"['install-gdma', 'install-libint']"
Deployability,"ompute the contribution to the nuclear repulsion energy for the given molecule. computePotentialMatrix(self, basis); Compute the external potential matrix in the given basis set. getCharges(self); Get the vector of charge tuples. print_out(self); Print python print helper to the outfile. setName(self, arg0); Sets the name. Methods Documentation. addBasis(self: psi4.core.ExternalPotential, basis: psi4.core.BasisSet, coefs: psi4.core.Vector) → None¶; Add a basis of S auxiliary functions iwth Df coefficients. addCharge(self: psi4.core.ExternalPotential, Z: float, x: float, y: float, z: float) → None¶; Add a charge Z at (x,y,z). appendCharges(self: psi4.core.ExternalPotential, arg0: List[Tuple[float, float, float, float]]) → None¶; Append a vector of charge tuples to a current ExternalPotential. clear(self: psi4.core.ExternalPotential) → None¶; Reset the field to zero (eliminates all entries). computeExternExternInteraction(self: psi4.core.ExternalPotential, arg0: psi4.core.ExternalPotential) → float¶; Compute the interaction between this potential and other external potential. computeNuclearEnergy(self: psi4.core.ExternalPotential, arg0: psi4.core.Molecule) → float¶; Compute the contribution to the nuclear repulsion energy for the given molecule. computePotentialMatrix(self: psi4.core.ExternalPotential, basis: psi4.core.BasisSet) → psi4.core.Matrix¶; Compute the external potential matrix in the given basis set. getCharges(self: psi4.core.ExternalPotential) → List[Tuple[float, float, float, float]]¶; Get the vector of charge tuples. print_out(self: psi4.core.ExternalPotential) → None¶; Print python print helper to the outfile. setName(self: psi4.core.ExternalPotential, arg0: str) → None¶; Sets the name. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.6;  · . PSI4. PSI4 API: Linking C++ and Python; ExternalPotential. © Copyright 2022, The Psi4 Project.; Last updated on Thursday, 19 May 2022 08:57PM.; Created using Sphinx 4.5.0.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/api/psi4.core.ExternalPotential.html:2709,update,updated,2709,psi4manual/1.6.x/api/psi4.core.ExternalPotential.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/api/psi4.core.ExternalPotential.html,1,['update'],['updated']
Deployability,"omputes value of coordinate from member data. everything()[source]¶. name()[source]¶; Gets the name of the variable. negated()[source]¶; Gets whether the coordinate value is actually the negative of the variable value. rset(val)[source]¶; Resets value of coordinate if not fixed. type()[source]¶; Gets specialization type of CoordValue. variable_to_string(precision)[source]¶; Takes a CoordValue object, and returns a string for printing. class ZMatrixEntry(entry_number, Z, charge, mass, symbol, label, rto=None, rval=0, ato=None, aval=0, dto=None, dval=0, basis=None, shells=None)[source]¶; Class to hold all information about an atom, including its; coordinate specification as any position of ZMatrix. clone()[source]¶; Returns new, independent ZMatrixEntry object. compute()[source]¶; Compute the Cartesian coordinates in Bohr of current atom’s entry. everything()[source]¶. invalidate()[source]¶; Flags the current coordinates as being outdated. print_in_input_format()[source]¶; Prints the updated geometry, in the format provided by the user. print_in_input_format_cfour()[source]¶; Prints the updated geometry, in the format provided by the user. set_coordinates(x, y, z)[source]¶; Given the current set of coordinates, updates the values of this; atom’s coordinates, and any variables that may depend on it. type()[source]¶; The type of CoordEntry specialization. bond_profile(self)[source]¶; Obtain bonding topology of molecule. missing_bonds(bonds, bond_tree, at_types)[source]¶; Determine number of bonds missing for each atom. missing_neighbors(bond_tree, n_missing)[source]¶; Determine number of neighboring atoms missing bonds for each atom. xyz2mol(self)[source]¶; Returns a string of Molecule formatted for mol2.; Written by Trent M. Parker 9 Jun 2014. Module to define a class BasisFamily that associates; fitting basis sets to an orbital basis and to provide functions to; query appropriate fitting bases for any orbital basis distributed; with Psi4. class BasisFamily(ornate, orbi",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:118495,update,updated,118495,psi4manual/1.0.0/autodoc_driver-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html,2,['update'],['updated']
Deployability,"on Functional. sogga11-x; SOGGA11-X Hybrid Exchange-Correlation Functional. sogga11-x-d3bj. svwn; SVWN3 (RPA) LSDA Functional. t-hcth; Tau HCTH Meta-GGA XC Functional. t-hcth-d3bj. t-hcthh; Hybrid Tau HCTH Meta-GGA XC Functional. teter93; TETER93 Exchange-Correlation Functional. th-fc; TH-FC GGA Exchange-Correlation Functional. th-fcfo; TH-FCFO GGA Exchange-Correlation Functional. th-fco; TH-FCO GGA Exchange-Correlation Functional. th-fl; TH-FL GGA Exchange-Correlation Functional. th1; TH1 GGA Exchange-Correlation Functional. th2; TH2 GGA Exchange-Correlation Functional. th3; TH3 GGA Exchange-Correlation Functional. th4; TH4 GGA Exchange-Correlation Functional. tpss; TPSS Meta-GGA XC Functional. tpss-d3bj. tpss-nl; TPSS Meta-GGA XC Functional. tpssh; TPSSh Hyb-GGA Exchange-Correlation Functional. tpssh-d3bj. tpssh-nl; TPSSh-nl Hyb-GGA Exchange-Correlation Functional. tpsslyp1w; TPSSLYP1W GGA Exchange-Correlation Functional. tuned-cam-b3lyp; TUNED-CAM-B3LYP Hyb-GGA Exchange-Correlation Functional. vsxc; VSXC Meta-GGA XC Functional. vv10; VV10 GGA Exchange-Correlation Functional. wb97; wB97 GGA Exchange-Correlation Functional. wb97m-d3bj. wb97m-v; wB97M-V Hyb-GGA Exchange-Correlation Functional. wb97x; wB97X Hyb-GGA Exchange-Correlation Functional. wb97x-d. wb97x-d3. wb97x-d3bj. wb97x-v; wB97X-V Hyb-GGA Exchange-Correlation Functional. wpbe; PBE SR-XC Functional (HJS Model). wpbe-d3bj. wpbe-d3mbj. wpbe0; PBE0 SR-XC Functional (HJS Model). x1b95; X1B95 Hyb-GGA Exchange-Correlation Functional. x3lyp; X3LYP Hyb-GGA Exchange-Correlation Functional. x3lyp-d3bj. xb1k; XB1K Hyb-GGA Exchange-Correlation Functional. xlyp; XLYP GGA Exchange-Correlation Functional. xlyp-d3bj. zlp; ZLP GGA Exchange-Correlation Functional. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Appendices; DFT Functionals; <no title>. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodoc_dft_energy-1.html:11645,update,updated,11645,psi4manual/1.4.0/autodoc_dft_energy-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_dft_energy-1.html,2,['update'],['updated']
Deployability,"on Functional. sogga11-x; SOGGA11-X Hybrid Exchange-Correlation Functional. sogga11-x-d3bj. svwn; SVWN3 (RPA) LSDA Functional. t-hcth; Tau HCTH Meta-GGA XC Functional. t-hcth-d3bj. t-hcthh; Hybrid Tau HCTH Meta-GGA XC Functional. teter93; TETER93 Exchange-Correlation Functional. th-fc; TH-FC GGA Exchange-Correlation Functional. th-fcfo; TH-FCFO GGA Exchange-Correlation Functional. th-fco; TH-FCO GGA Exchange-Correlation Functional. th-fl; TH-FL GGA Exchange-Correlation Functional. th1; TH1 GGA Exchange-Correlation Functional. th2; TH2 GGA Exchange-Correlation Functional. th3; TH3 GGA Exchange-Correlation Functional. th4; TH4 GGA Exchange-Correlation Functional. tpss; TPSS Meta-GGA XC Functional. tpss-d3bj. tpss-nl; TPSS Meta-GGA XC Functional. tpssh; TPSSh Hyb-GGA Exchange-Correlation Functional. tpssh-d3bj. tpssh-nl; TPSSh-nl Hyb-GGA Exchange-Correlation Functional. tpsslyp1w; TPSSLYP1W GGA Exchange-Correlation Functional. tuned-cam-b3lyp; TUNED-CAM-B3LYP Hyb-GGA Exchange-Correlation Functional. vsxc; VSXC Meta-GGA XC Functional. vv10; VV10 GGA Exchange-Correlation Functional. wb97; wB97 GGA Exchange-Correlation Functional. wb97m-d3bj. wb97m-v; wB97M-V Hyb-GGA Exchange-Correlation Functional. wb97x; wB97X Hyb-GGA Exchange-Correlation Functional. wb97x-d. wb97x-d3. wb97x-d3bj. wb97x-v; wB97X-V Hyb-GGA Exchange-Correlation Functional. wpbe; PBE SR-XC Functional (HJS Model). wpbe-d3bj. wpbe-d3mbj. wpbe0; PBE0 SR-XC Functional (HJS Model). x1b95; X1B95 Hyb-GGA Exchange-Correlation Functional. x3lyp; X3LYP Hyb-GGA Exchange-Correlation Functional. x3lyp-d3bj. xb1k; XB1K Hyb-GGA Exchange-Correlation Functional. xlyp; XLYP GGA Exchange-Correlation Functional. xlyp-d3bj. zlp; ZLP GGA Exchange-Correlation Functional. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; DFT Functionals; <no title>. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/autodoc_dft_energy-1.html:11645,update,updated,11645,psi4manual/1.5.0/autodoc_dft_energy-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_dft_energy-1.html,2,['update'],['updated']
Deployability,"on Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or str) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF and UHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) or LSDA density functional theory (DFT) [manual] [details]. Examples:. >>> # [1] Frequency calculation for all modes through highest available derivatives; >>> frequency('ccsd'). >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> # printing lowest mode frequency to screen and Hessian to output; >>> E, wfn = frequencies('scf', dertype=1, irrep=4, return_wfn=True); >>> print wfn.frequencies().get(0, 0); >>> wfn.hessian().print_out(). >>> # [3] Frequency calculation at default conditions and Hessian reuse at STP; >>> E, wfn = freq('mp2', return_wfn=True); >>> set t 273.15; >>> set p 100000; >>> thermo(wfn, wfn.frequencies()). >>> # [4] Opt+Freq, skipping the gradient recalc at the start of the Hessian; >>> e, wfn = optimize('hf', return_wfn=True); >>> frequencies('hf', ref_gradient=wfn.gradient()). table of contents. frequency; frequency(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; frequency. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.frequency.html:3186,update,updated,3186,psi4manual/1.8.x/api/psi4.driver.frequency.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.frequency.html,1,['update'],['updated']
Deployability,"on Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or str) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF and UHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) or LSDA density functional theory (DFT) [manual] [details]. Examples:. >>> # [1] Frequency calculation for all modes through highest available derivatives; >>> frequency('ccsd'). >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> # printing lowest mode frequency to screen and Hessian to output; >>> E, wfn = frequencies('scf', dertype=1, irrep=4, return_wfn=True); >>> print wfn.frequencies().get(0, 0); >>> wfn.hessian().print_out(). >>> # [3] Frequency calculation at default conditions and Hessian reuse at STP; >>> E, wfn = freq('mp2', return_wfn=True); >>> set t 273.15; >>> set p 100000; >>> thermo(wfn, wfn.frequencies()). >>> # [4] Opt+Freq, skipping the gradient recalc at the start of the Hessian; >>> e, wfn = optimize('hf', return_wfn=True); >>> frequencies('hf', ref_gradient=wfn.gradient()). table of contents. frequency; frequency(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.9.1;  · . PSI4. PSI4 API: Linking C++ and Python; frequency. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 08 February 2024 09:32PM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/api/psi4.driver.frequency.html:3186,update,updated,3186,psi4manual/1.9.x/api/psi4.driver.frequency.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/api/psi4.driver.frequency.html,1,['update'],['updated']
Deployability,"on activating through ``set integral_package erd``, known failures will be caught and halted, but perhaps other types not tested and identified will give *wrong* answers. Consider this your warning.""); endif(). ############################ Options: Build How? #############################; include(psi4OptionsTools); option_with_print(BUILD_SHARED_LIBS ""Build internally built Psi4 add-on libraries as shared, not static"" OFF); option_with_print(ENABLE_OPENMP ""Enables OpenMP parallelization"" ON); option_with_print(ENABLE_AUTO_BLAS ""Enables CMake to auto-detect BLAS"" ON). Note that external projects will have their own sets of build; configuration options. Only the most-common user knobs of those are; mentioned above. How to install elsewhere than /usr/local/psi4¶; The installation directory is the filesystem location for the executable; script, the Python module, basis set data, and other administrative files.; Unless using the conda package, which is relocatable, the installation; directory must be specified with CMake variable CMAKE_INSTALL_PREFIX; before compiling. Build with Specific Install Directory; cmake -DCMAKE_INSTALL_PREFIX=/nfs/common/software/psi4. Relevant CMake Options:; CMAKE_INSTALL_PREFIX=PATH # Location to which Psi4 and internally built; # add-ons are installed (default: /usr/local/psi4). Note; It’s not guaranteed, but if, in a pinch, you need to install a; built Psi4 to a location not configured by CMAKE_INSTALL_PREFIX,; recursively copy the folders under objdir/stage/prefix to; the desired location, chown them if needed, edit the shebang in; bin/psi4 if needed, and recursively delete all the “.pyc” files. It; may just run. How to compile for debugging¶; Flags to turn optimizations off and debugging on can be set across the; project and plugins with CMake variable CMAKE_BUILD_TYPE before; compiling. Note that these flags will not propagate to any add-ons that; are detected pre-built rather than built. Build without optimization; cmake -DCMAKE_BUILD_",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/build_planning.html:21785,install,installation,21785,psi4manual/1.6.x/build_planning.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/build_planning.html,1,['install'],['installation']
Deployability,"on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. mp2-property; MP2 cc-pvDZ properties for Nitrogen oxide. dft-freq-analytic; Analytic SVWN frequencies, compared to finite difference values. cc10; ROHF-CCSD cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical. casscf-sp; CASSCF/6-31G** energy point. extern3; External potential calculation with one Ghost atom and one point charge at the same position. mints10; H2 with tiny basis set, to test basis set parser’s handling of integers. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. tu2-ch2-energy; Sample UHF/6-31G** CH2 computation. dft-ghost; DFT Functional Test for Range-Seperated Hybrids and Ghost atoms. tu6-cp-ne2; Example potential energy surface scan and CP-correction for Ne2. dft-omega; Test omega is setable updated wb97x_20,wb97x_03 to account for new BraggSlater radii. fd-freq-gradient-large; SCF DZ finite difference frequencies by gradients for C4NH4. mints12; test roundtrip-ness of dict repr for psi4.core.Molecule and qcdb.Molecule. cc49; EOM-CC3(UHF) on CH radical with user-specified basis and properties for particular root. dct-grad1; Various DCT analytic gradients for the O2 molecule with 6-31G basis set. cbs-xtpl-dict; Extrapolated water energies. molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. cbs-delta-energy; Extrapolated energies with delta correction. sapt-dft1; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. dfrasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html:8115,update,updated,8115,psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html,4,['update'],['updated']
Deployability,"on cache. compute_V(self: psi4.core.VBase, arg0: List[psi4.core.Matrix]) → None¶; doctsring. compute_Vx(self: psi4.core.VBase, arg0: List[psi4.core.Matrix], arg1: List[psi4.core.Matrix]) → None¶; doctsring. compute_gradient(self: psi4.core.VBase) → psi4.core.Matrix¶; Compute the DFT nuclear gradient contribution. compute_hessain(self: psi4.core.VBase) → psi4.core.Matrix¶; Compute the DFT nuclear Hessian contribution. finalize(*args, **kwargs)¶; Overloaded function. finalize(self: psi4.core.VBase) -> None. doctsring. finalize(self: psi4.core.VBase) -> None. Finalizes the V object. functional(self: psi4.core.VBase) → psi4.core.SuperFunctional¶; Returns the interal superfunctional. get_block(self: psi4.core.VBase, arg0: int) → psi4.core.BlockOPoints¶; Returns the requested BlockOPoints. get_np_xyzw()¶; Returns the x, y, z, and weights of a grid as a tuple of NumPy array objects. grid(self: psi4.core.VBase) → psi4.core.DFTGrid¶; Returns the grid object. initialize(*args, **kwargs)¶; Overloaded function. initialize(self: psi4.core.VBase) -> None. doctsring. initialize(self: psi4.core.VBase) -> None. Initializes the V object. nblocks(self: psi4.core.VBase) → int¶; Total number of blocks. print_header(self: psi4.core.VBase) → None¶; Prints the objects header. properties(self: psi4.core.VBase) → List[psi4.core.PointFunctions]¶; Returns the properties computer. quadrature_values(self: psi4.core.VBase) → Dict[str, float]¶; Returns the quadrature values. set_D(self: psi4.core.VBase, arg0: List[psi4.core.Matrix]) → None¶; Sets the internal density. set_debug(self: psi4.core.VBase, arg0: int) → None¶; Sets the debug level of the object. set_print(self: psi4.core.VBase, arg0: int) → None¶; Sets the print level of the object. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.6;  · . PSI4. PSI4 API: Linking C++ and Python; VBase. © Copyright 2022, The Psi4 Project.; Last updated on Thursday, 19 May 2022 08:57PM.; Created using Sphinx 4.5.0.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/api/psi4.core.VBase.html:3837,update,updated,3837,psi4manual/1.6.x/api/psi4.core.VBase.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/api/psi4.core.VBase.html,1,['update'],['updated']
Deployability,"on contribution back in, producing spin pure expansion vectors and developed by Matt Leininger and works as well as EVANGELISTI. Type: string; Possible Values: EVANGELISTI, HD_EXACT, HD_KAVE, ORB_ENER, LEININGER, Z_KAVE; Default: EVANGELISTI. HD_OTF (DETCI); DETCI (Expert) — Do compute the diagonal elements of the Hamiltonian matrix on-the-fly? Otherwise, a diagonal element vector is written to a separate file on disk. Type: boolean; Default: true. HEFF4 (PSIMRCC); PSIMRCC — Do include the fourth-order contributions to the effective Hamiltonian?. Type: boolean; Default: true. HEFF_PRINT (PSIMRCC); PSIMRCC — Do print the effective Hamiltonian?. Type: boolean; Default: false. HESS_TYPE (OMP2); OMP2 — Type Hessian matrix will be used in orbital optimization procedure. Type: string; Possible Values: NONE; Default: NONE. HESS_TYPE (OMP3); OMP3 — Type Hessian matrix will be used in orbital optimization procedure. Type: string; Possible Values: NONE; Default: NONE. HESS_UPDATE (OPTKING); OPTKING — Hessian update scheme. Type: string; Possible Values: NONE, BFGS, MS, POWELL, BOFILL; Default: BFGS. HESS_UPDATE_LIMIT (OPTKING); OPTKING — Do limit the magnitude of changes caused by the Hessian update?. Type: boolean; Default: true. HESS_UPDATE_LIMIT_MAX (OPTKING); OPTKING — If HESS_UPDATE_LIMIT is true, changes to the Hessian from the update are limited to the larger of HESS_UPDATE_LIMIT_SCALE * (the previous value) and HESS_UPDATE_LIMIT_MAX [au]. Type: double; Default: 1.00. HESS_UPDATE_LIMIT_SCALE (OPTKING); OPTKING — If HESS_UPDATE_LIMIT is true, changes to the Hessian from the update are limited to the larger of HESS_UPDATE_LIMIT_SCALE * (the previous value) and HESS_UPDATE_LIMIT_MAX [au]. Type: double; Default: 0.50. HESS_UPDATE_USE_LAST (OPTKING); OPTKING — Number of previous steps to use in Hessian update, 0 uses all. Type: integer; Default: 1. ICORE (DETCI); DETCI — Specifies how to handle buffering of CI vectors. A value of 0 makes the program perform I/O one RAS subb",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/autodoc_glossary_options_c-1.html:52328,update,update,52328,psi4manual/4.0b3/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_glossary_options_c-1.html,2,['update'],['update']
Deployability,"on during successive DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_NOISE_PREFAC¶. The noise prefactors for successive DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_STATES¶. The number of reduced renormalized basis states to be retained during successive DMRG instructions. Type: array; Default: No Default. DMRG_UNITARY_WRITE¶. Whether or not to store the unitary on disk (convenient for restarting). Type: boolean; Default: true. How to configure CheMPS2 for building Psi4¶; Role and Dependencies. Role — In PSI4, CheMPS2 is a library that provides additional; quantum chemical capabilities (DMRG).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) CheMPS2; Upstream Dependencies — CheMPS2 \(\Leftarrow\) HDF5 \(\Leftarrow\) zlib. CMake Variables. ENABLE_CheMPS2 — CMake variable toggling whether Psi4 builds with CheMPS2; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For CheMPS2, set to an installation directory containing include/chemps2/DMRG.h; CheMPS2_DIR — CMake variable to specify where pre-built CheMPS2 can be found. Set to installation directory containing share/cmake/CheMPS2/CheMPS2Config.cmake; CMAKE_DISABLE_FIND_PACKAGE_CheMPS2 — CMake variable to force internal build of CheMPS2 instead of detecting pre-built. Examples. Build bundled. >>> cmake -DENABLE_CheMPS2=ON. Build without CheMPS2. >>> cmake. Build bundled with specific HDF5. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/hdf5. Link against pre-built. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/chemps2/root. >>> cmake -DENABLE_CheMPS2=ON -DCheMPS2_DIR=/path/to/chemps2/configdir. Link against pre-built with specific HDF5. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=""/path/to/chemps2/root;/path/to/hdf5/root"". Build bundled despite pre-built being detectable. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/chemps2/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FI",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/chemps2-1.html:5782,install,installation,5782,psi4manual/1.1.0/chemps2-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/chemps2-1.html,2,['install'],['installation']
Deployability,"on notes for ATLAS; These shortcut notes might be helpful if you are using Linux. However,; we recommend reading and following the full ATLAS installation notes.; You’ll need a Fortran compiler installed.; Unpack the source code, then make a compilation directory (could; be an obj subdirectory in the source directory, or elsewhere).; Turn off CPU throttling so the auto-tuning capabilities have a chance; to work. On Linux, this can be tune using; /usr/bin/cpufreq-selector -g performance. cd into the compilation directory and run the source; directory configure script there, with any necessary flags, e.g.,; /usr/local/src/atlas/configure --prefix=/usr/local/atlas. where prefix gives the installation directory.; It should automatically detect if you’re on an x86_64; Then make and check using; make; make check; make ptcheck. And install; make install. Compilation notes for netlib’s LAPACK; These shortcut notes might be helpful if you are using Linux. However,; we recommend reading and following the full LAPACK installation notes.; You’ll need a Fortran compiler installed.; If you decide to compile LAPACK from source, it may be obtained from; http://www.netlib.org/lapack/. Unpack the source code, and in the; top-level source directory, you need to create a make.inc file with; the appropriate options for your machine. For Linux/gfortran,; simply; cp make.inc.example make.inc. Next, edit BLASLIB in make.inc to point to your BLAS library; (full pathnames are recommended):; BLASLIB = /home/david/software/atlas3.9.25/lib/libf77blas.a /home/david/software/atlas3.9.25/lib/libatlas.a. Edit Makefile as necessary (probably not needed).; make. Copy the resulting file [lapack_($ARCH).a] where you want it; (a standard location like /usr/local/lib is easier for PSI to find).; It is probably helpful to rename the file liblapack.a. V. Miscellaneous Architecture-Specific Notes¶. Linux on x86 and x86_64; Intel compilers: We had trouble with icpc 12.0.x. Use 12.1 or; later. VI. Common Probl",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/installfile.html:24985,install,installation,24985,psi4manual/4.0b3/installfile.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/installfile.html,3,['install'],['installation']
Deployability,"on of the code found in; PSI4 is capable of up to 4th-order DKH calculations. Keywords¶. RELATIVISTIC¶. Relativistic Hamiltonian type. Type: string; Possible Values: NO, X2C; Default: NO. DKH_ORDER¶. Order of Douglas-Kroll-Hess. Type: integer; Default: 2. Reference¶; When using this code please make reference to the appropriate following paper:. “The Generalized Douglas-Kroll Transformation,” A. Wolf,; M. Reiher, and B. A. Hess, J. Chem. Phys. 117, 9215 (2002).; (doi: 10.1063/1.1515314). How to configure dkh for building Psi4¶; Role and Dependencies. Role — In PSI4, DKH is a library that provides additional; quantum chemical capabilities (relativistic effects).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) dkh; Upstream Dependencies — dkh \(\Leftarrow\) Fortran. CMake Variables. ENABLE_dkh — CMake variable toggling whether Psi4 builds with dkh; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For dkh, set to an installation directory containing include/DKH/DKH_MANGLE.h; dkh_DIR — CMake variable to specify where pre-built dkh can be found. Set to installation directory containing share/cmake/dkh/dkhConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_dkh — CMake variable to force internal build of dkh instead of detecting pre-built. Examples. Build bundled. >>> cmake -DENABLE_dkh=ON. Build without dkh. >>> cmake. Link against pre-built. >>> cmake -DENABLE_dkh=ON -DCMAKE_PREFIX_PATH=/path/to/dkh/root. >>> cmake -DENABLE_dkh=ON -Ddkh_DIR=/path/to/dkh/configdir. Build bundled despite pre-built being detectable. >>> cmake -DENABLE_dkh=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/dkh/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_dkh=ON. table of contents. Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess; Installation; Input; Keywords; RELATIVISTIC; DKH_ORDER. Reference; How to configure dkh for building Psi4. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Interfaces: Enhancing PSI4 C",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/dkh-1.html:2491,install,installation,2491,psi4manual/1.1.0/dkh-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/dkh-1.html,2,['install'],['installation']
Deployability,"on of the code found in; PSI4 is capable of up to 4th-order DKH calculations. Keywords¶. RELATIVISTIC¶. Relativistic Hamiltonian type. Type: string; Possible Values: NO, X2C; Default: NO. DKH_ORDER¶. Order of Douglas-Kroll-Hess. Type: integer; Default: 2. Reference¶; When using this code please make reference to the appropriate following paper:. “The Generalized Douglas-Kroll Transformation,” A. Wolf,; M. Reiher, and B. A. Hess, J. Chem. Phys. 117, 9215 (2002).; (doi: 10.1063/1.1515314). How to configure dkh for building Psi4¶; Role and Dependencies. Role — In PSI4, DKH is a library that provides additional; quantum chemical capabilities (relativistic effects).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) dkh; Upstream Dependencies — dkh \(\Leftarrow\) Fortran. CMake Variables. ENABLE_dkh — CMake variable toggling whether Psi4 builds with dkh; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For dkh, set to an installation directory containing include/DKH/DKH_MANGLE.h; dkh_DIR — CMake variable to specify where pre-built dkh can be found. Set to installation directory containing share/cmake/dkh/dkhConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_dkh — CMake variable to force internal build of dkh instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_dkh — CMake variable to force detecting pre-built dkh and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_dkh=ON. Build without dkh. >>> cmake. Link against pre-built. >>> cmake -DENABLE_dkh=ON -DCMAKE_PREFIX_PATH=/path/to/dkh/root. >>> cmake -DENABLE_dkh=ON -Ddkh_DIR=/path/to/dkh/configdir. Build bundled despite pre-built being detectable. >>> cmake -DENABLE_dkh=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/dkh/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_dkh=ON. table of contents. Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess; Installation; Input; Keywords; RELATIVISTIC; DKH_ORDER. Reference; How to configure",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/dkh-1.html:2624,install,installation,2624,psi4manual/1.2.1/dkh-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/dkh-1.html,13,['install'],['installation']
Deployability,"on of; the proposed change or practice.; Anyone can comment by adding sections to the bottom of the reST file.; Alternatively, e-mail discussions can go out and the (possibly edited); results be pasted into the bottom of the reST file once the furor dies; down.; Comments can be simple statements of agreement (useful for gauging; consensus), notation of possible problems, proposed re-writes of the; proposal, etc. Only the original author or his designate should change; the main body of the PsiPEP (to maintain a history).; Once there’s agreement, file can be stamped final and be placed into; effect. (Yes, this is very vague.). Roles of a PsiPEP Include¶. Best practices or re-vamped best practices; Practices can be easily linked- or referred-to by number and can be; tagged as obsolete by a single label change months later. Request/present viewpoint on organization; Draw attention to organization needed in code outside one’s area of; expertise. Request interface for some structure (e.g., gradients) or; viewpoints on how that interface will behave to ensure compatibility.; Offer philosophy on how processes/definitions should be. Fair Warning: Proposal to change things up; Announce plans to re-organize code structure or how something is; handled. List goals (may be conflicting) and how proposed scheme best; satisfies them. PsiPEP allows discussion before roll-out in case; proposal has deleterious side-effects. The contrast between a PsiPEP and a ticket is that for the latter, there’s; no question of whether the task is to be done as described. Comments¶; 04-Jul-2012, LAB. table of contents. PEP1: Proposing PsiPEP for PSI4; Path of a PsiPEP; Roles of a PsiPEP Include; Comments. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. PsiPEP: Plans and Practices to Organize PSI4; PEP1: Proposing PsiPEP for PSI4. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/pep0001-1.html:3192,update,updated,3192,psi4manual/1.4.0/pep0001-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/pep0001-1.html,2,['update'],['updated']
Deployability,"on of; the proposed change or practice.; Anyone can comment by adding sections to the bottom of the reST file.; Alternatively, e-mail discussions can go out and the (possibly edited); results be pasted into the bottom of the reST file once the furor dies; down.; Comments can be simple statements of agreement (useful for gauging; consensus), notation of possible problems, proposed re-writes of the; proposal, etc. Only the original author or his designate should change; the main body of the PsiPEP (to maintain a history).; Once there’s agreement, file can be stamped final and be placed into; effect. (Yes, this is very vague.). Roles of a PsiPEP Include¶. Best practices or re-vamped best practices; Practices can be easily linked- or referred-to by number and can be; tagged as obsolete by a single label change months later. Request/present viewpoint on organization; Draw attention to organization needed in code outside one’s area of; expertise. Request interface for some structure (e.g., gradients) or; viewpoints on how that interface will behave to ensure compatibility.; Offer philosophy on how processes/definitions should be. Fair Warning: Proposal to change things up; Announce plans to re-organize code structure or how something is; handled. List goals (may be conflicting) and how proposed scheme best; satisfies them. PsiPEP allows discussion before roll-out in case; proposal has deleterious side-effects. The contrast between a PsiPEP and a ticket is that for the latter, there’s; no question of whether the task is to be done as described. Comments¶; 04-Jul-2012, LAB. table of contents. PEP1: Proposing PsiPEP for PSI4; Path of a PsiPEP; Roles of a PsiPEP Include; Comments. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. PsiPEP: Plans and Practices to Organize PSI4; PEP1: Proposing PsiPEP for PSI4. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/pep0001-1.html:3192,update,updated,3192,psi4manual/1.5.0/pep0001-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/pep0001-1.html,2,['update'],['updated']
Deployability,"on section below; are placed as arguments to a Python; function (like energy()), not in set blocks or commands. Note; All Psi4 keyword names and values are insensitive to case, both; those that are placed in set blocks and as Python function arguments.; The one exception is documented for the subset option in the database(); function, where case structure must match the database file. Note; Boolean options can be specified by yes, on, true, or 1; for affirmative and no, off, false, or 0 for negative,; all insensitive to case. Note; The derivative level type for optimize() and frequency() functions can be specified by energy, none, or 0 for 0th derivative, gradient, first, or 1 for 1st derivative, and hessian, second, or 2 for 2nd derivative. For finite difference, as opposed to analytic, derivatives, the POINTS option can be increased to 5 for greater accuracy at increased cost. Note; Function option for the Psithon function called by the current function;; the default is usually energy(). See Sec. Function Intercalls; for a fuller description. Note that the value of the keyword is a Python object; and so is not wrapped in quotes like a string. Note; The molecule to be acted upon by the current function; the default is the; “active” molecule, which is the nearest preceeding molecule declared in a; molecule mymol {...} block or in an activate(mymol) statement. Note; that the value of this keyword (mymol in the example) is a Python object; and so is not wrapped in quotes like a string. Technically, this is a; Molecule object. Previous topic; Psithon Functions: Invoking a Calculation; Next topic; Single-Point Energy, energy(). This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Psithon Functions: Invoking a Calculation ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/notes_py-1.html:2212,update,updated,2212,psi4manual/1.0.0/notes_py-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/notes_py-1.html,2,['update'],['updated']
Deployability,"on version you want, irrespective of any Python version you have. Note; Above commands use bash for installation and set up your environment for bash at runtime. To use csh at runtime, follow the on-screen directions at the end of the installation or consult step 7 below. How to install a Psi4 binary into an Ana/Miniconda distribution¶; Conda command to install the latest nightly build of PSI4 + compiled; add-ons + runtime add-ons into an existing Anaconda or Miniconda; distribution.; # Linux or Mac or Windows; # substitute x.x by 2.7|3.5|3.6 for alternate python versions; >>> conda create -n p4env python=x.x psi4 psi4-rt -c psi4/label/dev -c psi4. Activate environment and make the adjustments to PATH and; PSI_SCRATCH that it suggests at the end. Test with psi4; --test. Configuration for this set-up is summarized at; How to run Psi4 as executable or Python module from conda installation.; Details:. It is strongly recommended to place PSI4 into a conda; environment where its libraries can’t interfere with other programs (on; Linux/Windows, PSI4 installs a non-default gcc 5.2) rather than the main; Anaconda or Miniconda environment. Hence the creation of the environment; above, but the environment name (p4env above) can be; substituted.; Only reason for psi4-rt package is to get the QC runtime; add-ons; could say dftd3 gcp v2rdm_casscf instead of psi4-rt;; or leave them out if you don’t want them. How to update a Psi4 binary¶; Conda command to update an existing PSI4 conda installation to the; newest stable release (roughly annually). Warning; Until 1.1 is official, this pulls the July 2016 1.0 version. 1.0 and 1.1 really shouldn’t be mixed. >>> conda update psi4 -c psi4. # if psi4 channel in defaults (true for Psi4conda installers); >>> conda update psi4. Conda command to update an existing PSI4 conda installation to the; latest development head (roughly nightly).; >>> conda update psi4 -c psi4/label/dev. # if add-on updates required, try; >>> conda update psi4 -c ps",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/conda-1.html:5348,install,installs,5348,psi4manual/1.1.0/conda-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/conda-1.html,2,['install'],['installs']
Deployability,"on ». Embarrassing Parallelism¶; Many of the tasks automated by Python wrappers consist of a number of; independent PSI4 calculations and are thus suited to an embarrassingly; parallel mode of operation. In Psithon, these have been dubbed sow/reap; procedures and have the following general structure. Prepare an input file, simply adding mode='sow' to the; argument list of an available Python function. Run this quick job to; produce input files for lengthier calculations.; According to the instructions in the output file of the above step,; run the generated input files in any order on any variety of computers; and architectures. This is the time-intensive portion of the; calculation.; The ‘sow’ stage also produces a master input file (with a; mode='reap' directive). When all the jobs in the above step are; completed, place their output files in the same location as the; master input, and run this last, quick job to collect the results. Sow/reap procedures are governed by the mode keyword, choices being; 'continuous', 'sow', and 'reap'. Only 'sow' is likely to; be used by the user, as 'continuous' is always the default, and; input files with 'reap' are autogenerated.; Available at present for Database and finite difference operation; of Optimize. Caution; Some features are not yet implemented. Buy a developer a coffee. Local options (e.g., set scf e_convergence 9) will not get transmitted to the child jobs.; Array options (e.g., set states_per_irrep [2, 1]) will not get transmitted to the child jobs.; Function intercalls (e.g., db(opt())) are not tested with sow/reap procedures. Previous topic; Function Intercalls; Next topic; Interfaces: Enhancing PSI4 Capabilities; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Psithon Functions: Invoking a Calculation ». © Copyright 2012, Psi4 Project.; Last updated on Sep 30, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/sowreap-1.html:1184,continuous,continuous,1184,psi4manual/4.0b2/sowreap-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/sowreap-1.html,2,['continuous'],['continuous']
Deployability,"on ». Embarrassing Parallelism¶; Many of the tasks automated by Python wrappers consist of a number of; independent Psi4 calculations and are thus suited to an embarrassingly; parallel mode of operation. In Psithon, these have been dubbed sow/reap; procedures and have the following general structure. Prepare an input file, simply adding mode='sow' to the; argument list of an available Python function. Run this quick job to; produce input files for lengthier calculations.; According to the instructions in the output file of the above step,; run the generated input files in any order on any variety of computers; and architectures. This is the time-intensive portion of the; calculation.; The ‘sow’ stage also produces a master input file (with a; mode='reap' directive). When all the jobs in the above step are; completed, place their output files in the same location as the; master input, and run this last, quick job to collect the results. Sow/reap procedures are governed by the mode keyword, choices being; 'continuous', 'sow', and 'reap'. Only 'sow' is likely to; be used by the user, as 'continuous' is always the default, and; input files with 'reap' are autogenerated.; Embarrassingly parallel algorithm available at present for:; Database, database(); finite difference operation of Geometry Optimization, optimize() and gradient(); finite difference of energies of Harmonic Vibrational Analysis, frequency() and hessian(); finite difference of gradients of Harmonic Vibrational Analysis, frequency() and hessian(). Caution; Some features are not yet implemented. Buy a developer a coffee. Local options (e.g., set scf e_convergence 9) will not get transmitted to the child jobs.; Array options (e.g., set states_per_irrep [2, 1]) will not get transmitted to the child jobs.; Function intercalls (e.g., db(opt())) are not tested with sow/reap procedures. Previous topic; Function Intercalls; Next topic; cubeprop() Generation of cube files. This Page. Show Source. Quick search. Ente",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/sowreap-1.html:1206,continuous,continuous,1206,psi4manual/1.0.0/sowreap-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/sowreap-1.html,2,['continuous'],['continuous']
Deployability,"on(ENABLE_cppe ""Enables CPPE for Polarizable Embedding"" OFF); option(ENABLE_adcc ""Enables adcc for algebraic-diagrammatic construction methods (requires libtensorlight; can also be added at runtime)"" OFF); option(ENABLE_ddx ""Enables ddx for domain-decomposition contiuum solvation models (requires Fortran; can also be added at runtime)"" OFF); option(ENABLE_dkh ""Enables DKH integrals (requires Fortran)"" OFF); option(ENABLE_ecpint ""Enables libecpint for effective core potentials (ECP)"" OFF); option(ENABLE_libefp ""Enables LIBEFP and PylibEFP for fragments"" OFF); option(ENABLE_Einsums ""Enables the Einsums tensor library"" OFF); option(ENABLE_simint ""Enables use of SIMINT two-electron integral library"" OFF); option(ENABLE_gauxc ""Enables use of GauXC density functional library"" OFF); option(ENABLE_gdma ""Enables Stone's GDMA multipole code (requires Fortran; can also be added at runtime)"" OFF); option(ENABLE_PCMSolver ""Enables PCMSolver library (requires Fortran)"" OFF); option(ENABLE_snsmp2 ""Enables SNSMP2 plugin (can also be added at runtime)"" OFF); option(ENABLE_v2rdm_casscf ""Enables V2RDM_CASSCF plugin (requires Fortran; can also be added at runtime)"" OFF); option(ENABLE_psi4fockci ""Enables Psi4FockCI plugin (can also be added at runtime)"" OFF); option(ENABLE_cct3 ""Enables cct3 plugin (requires Fortran; can also be added at runtime)"" OFF); option(ENABLE_gpu_dfcc ""Enables GPU_DFCC plugin for gpu-accelerated df-cc (requires CUDA; can also be added at runtime)"" OFF); option(ENABLE_mdi ""Enables MolSSI driver interface"" OFF); option(ENABLE_BrianQC ""Enables the BrianQC GPU module (requires CUDA; requires separate installation and licensing of the BrianQC module)"" OFF); # These options are relevant to pasture, expert only; option(ENABLE_ccsort ""Enables ccsort plugin installed from psi4pasture"" OFF); option(ENABLE_transqt2 ""Enables transqt2 plugin installed from psi4pasture"" OFF); option(psi4_SKIP_ENABLE_Fortran ""Suppress enabling Fortran language even when Fortran addons enabled.",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/build_planning.html:22100,install,installation,22100,psi4manual/master/build_planning.html,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html,3,['install'],"['installation', 'installed']"
Deployability,"on(psi4_SKIP_ENABLE_Fortran ""Suppress enabling Fortran language even when Fortran addons enabled. Use when only linking pre-built, not compiling addon code."" OFF). # Append modules added to pasture as needed; if(ENABLE_ccsort OR ENABLE_transqt2); set(ENABLE_pasture ON); message(STATUS ""Enabling pasture plugins""); endif(). Note that external projects will have their own sets of build; configuration options. Only the most-common user knobs of those are; mentioned above. How to install elsewhere than /usr/local/psi4¶; The installation directory is the filesystem location for the executable; script, the Python module, basis set data, and other administrative files.; Unless using the conda package, which is relocatable, the installation; directory must be specified with CMake variable CMAKE_INSTALL_PREFIX; before compiling. Build with Specific Install Directory; cmake -DCMAKE_INSTALL_PREFIX=/nfs/common/software/psi4. Relevant CMake Options:; CMAKE_INSTALL_PREFIX=PATH # Location to which Psi4 and internally built; # add-ons are installed (default: /usr/local/psi4). Note; It’s not guaranteed, but if, in a pinch, you need to install a; built Psi4 to a location not configured by CMAKE_INSTALL_PREFIX,; recursively copy the folders under objdir/stage/prefix to; the desired location, chown them if needed, edit the shebang in; bin/psi4 if needed, and recursively delete all the “.pyc” files. It; may just run. How to compile for debugging¶; Flags to turn optimizations off and debugging on can be set across the; project and plugins with CMake variable CMAKE_BUILD_TYPE before; compiling. Note that these flags will not propagate to any add-ons that; are detected pre-built rather than built. Build without optimization; cmake -DCMAKE_BUILD_TYPE=debug. set the CMake build type [default: release]. Relevant CMake Options:; CMAKE_BUILD_TYPE=[debug|release] # Build type (Release or Debug)"" [default: release]. How to choose the compilation directory, {objdir}¶. there is no default; common ch",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/build_planning.html:23413,install,installed,23413,psi4manual/master/build_planning.html,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html,1,['install'],['installed']
Deployability,"on(ref_wfn.Cb(), ref_wfn.nbetapi(), ref_wfn.basisset(), scf_wfn.basisset()); scf_wfn.guess_Ca(pCa); scf_wfn.guess_Cb(pCb). # Print basis set info; if core.get_option(""SCF"", ""PRINT_BASIS""):; scf_wfn.basisset().print_detail_out(). # Compute dftd3; if hasattr(scf_wfn, ""_disp_functor""):; disp_energy = scf_wfn._disp_functor.compute_energy(scf_wfn.molecule(), scf_wfn); scf_wfn.set_variable(""-D Energy"", disp_energy). # PCM preparation; if core.get_option('SCF', 'PCM'):; if core.get_option('SCF', 'PE'):; raise ValidationError(""""""Error: 3-layer QM/MM/PCM not implemented.\n""""""); pcmsolver_parsed_fname = core.get_local_option('PCM', 'PCMSOLVER_PARSED_FNAME'); pcm_print_level = core.get_option('SCF', ""PRINT""); scf_wfn.set_PCM(core.PCM(pcmsolver_parsed_fname, pcm_print_level, scf_wfn.basisset())). # PE preparation; if core.get_option('SCF', 'PE'):; if not solvent._have_pe:; raise ModuleNotFoundError('Python module cppe not found. Solve by installing it: `conda install -c psi4 pycppe`'); # PE needs information about molecule and basis set; pol_embed_options = solvent.pol_embed.get_pe_options(); core.print_out(f"""""" Using potential file; {pol_embed_options[""potfile""]}; for Polarizable Embedding calculation.\n""""""); scf_wfn.pe_state = solvent.pol_embed.CppeInterface(; molecule=scf_molecule, options=pol_embed_options,; basisset=scf_wfn.basisset(); ). e_scf = scf_wfn.compute_energy(); for obj in [core, scf_wfn]:; # set_variable(""SCF TOTAL ENERGY"") # P::e SCF; for pv in [""SCF TOTAL ENERGY"", ""CURRENT ENERGY"", ""CURRENT REFERENCE ENERGY""]:; obj.set_variable(pv, e_scf). # We always would like to print a little property information; if kwargs.get('scf_do_properties', True):; oeprop = core.OEProp(scf_wfn); oeprop.set_title(""SCF""). # Figure our properties, if empty do dipole; props = [x.upper() for x in core.get_option(""SCF"", ""SCF_PROPERTIES"")]; if ""DIPOLE"" not in props:; props.append(""DIPOLE""). proc_util.oeprop_validator(props); for x in props:; oeprop.add(x). # Compute properties; oeprop.com",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/procrouting/proc.html:47985,install,installing,47985,psi4manual/1.4.0/_modules/psi4/driver/procrouting/proc.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/procrouting/proc.html,2,['install'],"['install', 'installing']"
Deployability,"on):; """"""Error called when the specified value of *option* requires some; module(s) from Psi4Pasture, but could not be imported.; """"""; msg_tmpl = """"""Psi4Pasture module(s) [{modlist}] are required to change the default value of {opt}. """"""; install_instructions = """"""; Note: Psi4Pasture is currently in an experimental state with no reliable install; procedure yet, but this is what it would look like. To Build Psi4Pasture and install the required modules within your current; Psi4 installation. >>> # clone the pasture repo; >>> git clone https://github.com/psi4/psi4pasture.git. >>> cmake -S. -Bobjdir -Dpsi4_DIR=$PSI4_INSTALL_PREFIX/share/cmake/psi4 {module_args}; >>> # $PSI4_INSTALL_PREFIX is the $CMAKE_INSTALL_PREFIX for the psi4; >>> # install you want to install pasture to. >>> # build + install install location is detected automatically; >>> cd objdir; >>> make && make install. See https://github.com/psi4/psi4pasture for more details. Or to install using psi4's own build system add; {module_args}; to cmake command line when building psi4.; """"""; pasture_required_modules = {""RUN_CCTRANSORT"": [""ccsort"", ""transqt2""]}. def __init__(self, option):; mods_str = "", "".join([m for m in PastureRequiredError.pasture_required_modules[option]]); msg = PastureRequiredError.msg_tmpl.format(opt=option, modlist=mods_str); PsiException.__init__(self, msg); module_cmake_args = "" "".join(; [""-DENABLE_{}=ON"".format(module) for module in PastureRequiredError.pasture_required_modules[option]]); msg += PastureRequiredError.install_instructions.format(module_args=module_cmake_args); self.message = '\nPsiException: {}\n\n'.format(msg); core.print_out(self.message). [docs]; def sanitize_method(name: str) -> str:; """"""Replace characters in method name so that suitable for function name or Sphinx table anchor; (both as-is) or HTML table link (replace underscore in returned string by dash). """"""; return name.lower(; ).replace(""("", ""_pr"" # ccsd(t); ).replace("")"", ""_pr""; ).replace(""."", ""p"" # mp2.5; ).re",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/p4util/exceptions.html:13893,install,install,13893,psi4manual/1.8.x/_modules/psi4/driver/p4util/exceptions.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/p4util/exceptions.html,3,['install'],['install']
Deployability,"on):; """"""Error called when the specified value of *option* requires some; module(s) from Psi4Pasture, but could not be imported.; """"""; msg_tmpl = """"""Psi4Pasture module(s) [{modlist}] are required to change the default value of {opt}. """"""; install_instructions = """"""; Note: Psi4Pasture is currently in an experimental state with no reliable install; procedure yet, but this is what it would look like. To Build Psi4Pasture and install the required modules within your current; Psi4 installation. >>> # clone the pasture repo; >>> git clone https://github.com/psi4/psi4pasture.git. >>> cmake -S. -Bobjdir -Dpsi4_DIR=$PSI4_INSTALL_PREFIX/share/cmake/psi4 {module_args}; >>> # $PSI4_INSTALL_PREFIX is the $CMAKE_INSTALL_PREFIX for the psi4; >>> # install you want to install pasture to. >>> # build + install install location is detected automatically; >>> cd objdir; >>> make && make install. See https://github.com/psi4/psi4pasture for more details. Or to install using psi4's own build system add; {module_args}; to cmake command line when building psi4.; """"""; pasture_required_modules = {""RUN_CCTRANSORT"": [""ccsort"", ""transqt2""]}. def __init__(self, option):; mods_str = "", "".join([m for m in PastureRequiredError.pasture_required_modules[option]]); msg = PastureRequiredError.msg_tmpl.format(opt=option, modlist=mods_str); PsiException.__init__(self, msg); module_cmake_args = "" "".join(; [""-DENABLE_{}=ON"".format(module) for module in PastureRequiredError.pasture_required_modules[option]]); msg += PastureRequiredError.install_instructions.format(module_args=module_cmake_args); self.message = '\nPsiException: {}\n\n'.format(msg); core.print_out(self.message). [docs]def sanitize_method(name: str) -> str:; """"""Replace characters in method name so that suitable for function name or Sphinx table anchor; (both as-is) or HTML table link (replace underscore in returned string by dash). """"""; return name.lower(; ).replace(""("", ""_pr"" # ccsd(t); ).replace("")"", ""_pr""; ).replace(""."", ""p"" # mp2.5; ).repl",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/p4util/exceptions.html:13867,install,install,13867,psi4manual/1.7.x/_modules/psi4/driver/p4util/exceptions.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/p4util/exceptions.html,1,['install'],['install']
Deployability,"on, Omega = %11.3E <==\n' % omega); E1 = energy('scf'); psi4.IO.change_file_namespace(180,""ot"",""cation""). IP = E1 - E0;; kIP = -E_HOMO;; delta = IP - kIP;. if (kIP > IP):; omega_r = omega; E0r = E0; E1r = E1; IPr = IP; kIPr = kIP; delta_r = delta; repeat_r = 0;; repeat_l = repeat_l + 1;; else:; omega_l = omega; E0l = E0; E1l = E1; IPl = IP; kIPl = kIP; delta_l = delta; repeat_l = 0;; repeat_r = repeat_r + 1;. omegas.append(omega); types.append('Regula-Falsi'); E0s.append(E0); E1s.append(E1); IPs.append(IP); kIPs.append(kIP). # Termination; if (abs(omega_l - omega_r) < omega_tol or step > maxiter):; converged = True;; break. psi4.IO.set_default_namespace(""""). psi4.print_out('\n\t==> IP Fitting Results <==\n\n'). psi4.print_out('\t => Occupation Determination <= \n\n'); psi4.print_out('\t %6s %6s %6s %6s %6s %6s\n' %('N', 'Na', 'Nb', 'Charge', 'Mult', 'HOMO')); psi4.print_out('\t Neutral: %6d %6d %6d %6d %6d %6d\n' %(N, Na, Nb, charge0, mult0, HOMO)); psi4.print_out('\t Cation: %6d %6d %6d %6d %6d\n\n' %(N-1, Na1, Nb1, charge1, mult1)). psi4.print_out('\t => Regula Falsi Iterations <=\n\n'); psi4.print_out('\t%3s %11s %14s %14s %14s %s\n' % ('N','Omega','IP','kIP','Delta','Type')); for k in range(len(omegas)):; psi4.print_out('\t%3d %11.3E %14.6E %14.6E %14.6E %s\n' % (k+1,omegas[k],IPs[k],kIPs[k],IPs[k] - kIPs[k], types[k])); if (converged):; psi4.print_out('\n\tIP Fitting Converged\n'); psi4.print_out('\tFinal omega = %14.6E\n' % ((omega_l + omega_r) / 2)); psi4.print_out('\n\t""M,I. does the dying. Fleet just does the flying.""\n'); psi4.print_out('\t\t\t-Starship Troopers\n'). else:; psi4.print_out('\n\tIP Fitting did not converge!\n'). psi4.set_global_option(""DF_INTS_IO"", ""NONE""); psi4.set_global_option(""GUESS"", old_guess). Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    ; PSI4 [beta5] » ; Module code ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/_modules/frac.html:18689,update,updated,18689,psi4manual/4.0b5/_modules/frac.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/_modules/frac.html,1,['update'],['updated']
Deployability,"on, performed by applying a finite electric field and numerical differentiation. cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in CH2. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. dfcasscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the state of the CN radical, with Z-matrix input. adc1; ADC/6-31G** on H2O. cc37; CC2(UHF)/cc-pVDZ energy of H2O+. omp2p5-grad1; OMP2.5 cc-pVDZ gradient for the H2O molecule. rasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. dft2; DFT Functional Test. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cisd-sp; 6-31G** H2O Test CISD Energy Point. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a tes",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:30153,install,install,30153,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,4,['install'],['install']
Deployability,"on, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. mints-helper; A general test of the MintsHelper function. dfcasscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule. ci-property; CI/MCSCF cc-pvDZ properties for Potassium nitrate (rocket fuel!). scf-upcast-custom-basis; test scf castup with custom basis sets. dct10; The multiple guesses for DCT amplitudes for ODC-12. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. cc34; RHF-CCSD/cc-pVDZ energy of H2O partitioned into pair energy contributions. dft-grad1; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN update ref gradient due to new BraggSlater radii. sapt-ecp; sapt0 of charged system in ECP basis set. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\)). scf-freq1; Analytic vs. finite difference DF-SCF frequency test for water. cbs-xtpl-alpha; Extrapolated water energies. sapt3; SAPT2+3(CCD) aug-cc-pVDZ+midbond computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. fci-tdm; He2+ FCI/cc-pVDZ Transition Dipole Moment. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. dct8; DCT calculation for the NH3+ radical using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_corepsi4.html:21762,update,update,21762,psi4manual/1.9.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_corepsi4.html,2,['update'],['update']
Deployability,"on-Mayer Function Couterpoise Interaction Energy'] = vmfc_interaction_energy. for n in nbody_range[1:]:; var_key = 'VMFC-CORRECTED %d-BODY INTERACTION ENERGY' % n; nbody_dict[var_key] = vmfc_energy_body_dict[n] - vmfc_energy_body_dict[1]. # Returns; results = {}; results['nbody'] = nbody_dict; for b in ['cp', 'nocp', 'vmfc']:; results['%s_energy_body_dict' % b] = eval('%s_energy_body_dict' % b); results['%s_energy_body_dict' % b] = {str(i) + b: j for i, j in results['%s_energy_body_dict' % b].items()}. # Figure out and build return types; return_method = metadata['bsse_type_list'][0]. if return_method == 'cp':; results['ptype_body_dict'] = cp_ptype_body_dict; results['energy_body_dict'] = cp_energy_body_dict; elif return_method == 'nocp':; results['ptype_body_dict'] = nocp_ptype_body_dict; results['energy_body_dict'] = nocp_energy_body_dict; elif return_method == 'vmfc':; results['ptype_body_dict'] = vmfc_ptype_body_dict; results['energy_body_dict'] = vmfc_energy_body_dict; else:; raise ValidationError(; ""N-Body Wrapper: Invalid return type. Should never be here, please post this error on github.""). if metadata['return_total_data']:; results['ret_energy'] = results['energy_body_dict'][metadata['max_nbody']]; else:; results['ret_energy'] = results['energy_body_dict'][metadata['max_nbody']]; results['ret_energy'] -= results['energy_body_dict'][1]. if metadata['ptype'] != 'energy':; if metadata['return_total_data']:; np_final_ptype = results['ptype_body_dict'][metadata['max_nbody']].copy(); else:; np_final_ptype = results['ptype_body_dict'][metadata['max_nbody']].copy(); np_final_ptype -= results['ptype_body_dict'][1]. results['ret_ptype'] = core.Matrix.from_array(np_final_ptype); else:; results['ret_ptype'] = results['ret_energy']. return results. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .  · ; 1.3.2;  · . PSI4. Module code. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/driver_nbody.html:29334,update,updated,29334,psi4manual/1.3.2/_modules/psi4/driver/driver_nbody.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/driver_nbody.html,1,['update'],['updated']
Deployability,on. Type: integer; Default: 3. IGNORE_TAU¶. Controls whether to ignore terms containing non-idempotent contribution to OPDM or not (for debug puproses only). For practical applications only the default must be used. Type: boolean; Default: false. INTS_TOLERANCE¶. Minimum absolute value below which integrals are neglected. Type: conv double; Default: 1e-14. LOCK_OCC¶. Controls whether to force the occupation to be that of the SCF guess. For practical applications only the default must be used. Type: boolean; Default: true. MO_RELAX¶. Controls whether to relax the orbitals during the energy computation or not (for debug puproses only). For practical applications only the default must be used. Type: boolean; Default: true. RELAX_GUESS_ORBITALS¶. Controls whether to relax the guess orbitals by taking the guess density cumulant and performing orbital update on the first macroiteration (for ALOGRITHM = TWOSTEP only). Type: boolean; Default: false. RELAX_TAU¶. Controls whether to relax tau during the cumulant updates or not. Type: boolean; Default: true. STABILITY_ADD_VECTORS¶. The number of vectors that can be added simultaneously into the subspace for Davidson’s diagonalization in stability check. Type: integer; Default: 20. STABILITY_AUGMENT_SPACE_TOL¶. The value of the rms of the residual in Schmidt orthogonalization which is used as a threshold for augmenting the vector subspace in stability check. Type: conv double; Default: 0.1. STABILITY_CHECK¶. Performs stability analysis of the DCFT energy. Type: boolean; Default: false. STABILITY_CONVERGENCE¶. Controls the convergence of the Davidson’s diagonalization in stability check. Type: conv double; Default: 1e-4. STABILITY_MAX_SPACE_SIZE¶. The maximum size of the subspace for the stability check. The program will terminate if this parameter is exceeded and the convergence (STABILITY_CONVERGENCE) is not satisfied. Type: integer; Default: 200. STABILITY_N_EIGENVALUES¶. The number of Hessian eigenvalues computed during the ,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/autodir_options_c/module__dcft-1.html:4920,update,updates,4920,psi4manual/4.0b4/autodir_options_c/module__dcft-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodir_options_c/module__dcft-1.html,4,['update'],['updates']
Deployability,"on. get_str(self: psi4.core.Options, arg0: str) -> str. get string option. print_global_options(self: psi4.core.Options) → None¶; print the global, cross-module options. print_module_options(self: psi4.core.Options) → None¶; print global and local options prepared for current module. read_globals(self: psi4.core.Options) → bool¶; expert. set_array(self: psi4.core.Options, arg0: str, arg1: str) → None¶; set array option. set_bool(self: psi4.core.Options, arg0: str, arg1: str, arg2: bool) → None¶; set bool option. set_current_module(self: psi4.core.Options, arg0: str) → None¶; sets arg0 (all CAPS) as current module. set_double(self: psi4.core.Options, arg0: str, arg1: str, arg2: float) → None¶; set double option. set_int(self: psi4.core.Options, arg0: str, arg1: str, arg2: int) → None¶; set int option. set_read_globals(self: psi4.core.Options, arg0: bool) → None¶; expert. set_str(self: psi4.core.Options, arg0: str, arg1: str, arg2: str) → None¶; set string option. set_str_i(self: psi4.core.Options, arg0: str, arg1: str, arg2: str) → None¶; set string option. validate_options(self: psi4.core.Options) → None¶; validate options for arg0 module. table of contents. Options; Options; Options.add_array(); Options.add_bool(); Options.add_int(); Options.add_str(); Options.add_str_i(); Options.get_bool(); Options.get_current_module(); Options.get_double(); Options.get_int(); Options.get_int_vector(); Options.get_str(); Options.print_global_options(); Options.print_module_options(); Options.read_globals(); Options.set_array(); Options.set_bool(); Options.set_current_module(); Options.set_double(); Options.set_int(); Options.set_read_globals(); Options.set_str(); Options.set_str_i(); Options.validate_options(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; Options. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/api/psi4.core.Options.html:4247,update,updated,4247,psi4manual/1.8.x/api/psi4.core.Options.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.Options.html,1,['update'],['updated']
Deployability,"on. get_str(self: psi4.core.Options, arg0: str) -> str. get string option. print_global_options(self: psi4.core.Options) → None¶; print the global, cross-module options. print_module_options(self: psi4.core.Options) → None¶; print global and local options prepared for current module. read_globals(self: psi4.core.Options) → bool¶; expert. set_array(self: psi4.core.Options, arg0: str, arg1: str) → None¶; set array option. set_bool(self: psi4.core.Options, arg0: str, arg1: str, arg2: bool) → None¶; set bool option. set_current_module(self: psi4.core.Options, arg0: str) → None¶; sets arg0 (all CAPS) as current module. set_double(self: psi4.core.Options, arg0: str, arg1: str, arg2: float) → None¶; set double option. set_int(self: psi4.core.Options, arg0: str, arg1: str, arg2: int) → None¶; set int option. set_read_globals(self: psi4.core.Options, arg0: bool) → None¶; expert. set_str(self: psi4.core.Options, arg0: str, arg1: str, arg2: str) → None¶; set string option. set_str_i(self: psi4.core.Options, arg0: str, arg1: str, arg2: str) → None¶; set string option. validate_options(self: psi4.core.Options) → None¶; validate options for arg0 module. table of contents. Options; Options; Options.add_array(); Options.add_bool(); Options.add_int(); Options.add_str(); Options.add_str_i(); Options.get_bool(); Options.get_current_module(); Options.get_double(); Options.get_int(); Options.get_int_vector(); Options.get_str(); Options.print_global_options(); Options.print_module_options(); Options.read_globals(); Options.set_array(); Options.set_bool(); Options.set_current_module(); Options.set_double(); Options.set_int(); Options.set_read_globals(); Options.set_str(); Options.set_str_i(); Options.validate_options(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.9.1;  · . PSI4. PSI4 API: Linking C++ and Python; Options. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 08 February 2024 09:32PM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/api/psi4.core.Options.html:4247,update,updated,4247,psi4manual/1.9.x/api/psi4.core.Options.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/api/psi4.core.Options.html,1,['update'],['updated']
Deployability,"on.' % (db_name)); else:; ACTV = database.ACTV_SA; # Force open-shell if needed; openshell_override = 0; if user_reference in ['RHF', 'RKS']:; try:; database.isOS; except AttributeError:; pass; else:; if p4util.yes.match(str(database.isOS)):; openshell_override = 1; core.print_out('\nSome reagents in database %s require an open-shell reference; will be reset to UHF/UKS as needed.\n' % (db_name)). # Configuration based upon database keyword options; # Option symmetry- whether symmetry treated normally or turned off (currently req'd for dfmp2 & dft); db_symm = kwargs.get('symm', True). symmetry_override = 0; if db_symm is False:; symmetry_override = 1; elif db_symm is True:; pass; else:; raise ValidationError(""""""Symmetry mode '%s' not valid."""""" % (db_symm)). # Option mode of operation- whether db run in one job or files farmed out; db_mode = kwargs.pop('db_mode', kwargs.pop('mode', 'continuous')).lower(); kwargs['db_mode'] = db_mode. if db_mode == 'continuous':; pass; elif db_mode == 'sow':; pass; elif db_mode == 'reap':; db_linkage = kwargs.get('linkage', None); if db_linkage is None:; raise ValidationError(""""""Database execution mode 'reap' requires a linkage option.""""""); else:; raise ValidationError(""""""Database execution mode '%s' not valid."""""" % (db_mode)). # Option counterpoise- whether for interaction energy databases run in bsse-corrected or not; db_cp = kwargs.get('cp', False). if db_cp is True:; try:; database.ACTV_CP; except AttributeError:; raise ValidationError(""""""Counterpoise correction mode 'yes' invalid for database %s."""""" % (db_name)); else:; ACTV = database.ACTV_CP; elif db_cp is False:; pass; else:; raise ValidationError(""""""Counterpoise correction mode '%s' not valid."""""" % (db_cp)). # Option relaxed- whether for non-frozen-monomer interaction energy databases include deformation correction or not?; db_rlxd = kwargs.get('rlxd', False). if db_rlxd is True:; if db_cp is True:; try:; database.ACTV_CPRLX; database.RXNM_CPRLX; except AttributeError:; raise V",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/wrapper_database.html:11327,continuous,continuous,11327,psi4manual/1.4.0/_modules/psi4/driver/wrapper_database.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/wrapper_database.html,7,['continuous'],['continuous']
Deployability,"on.__init__(self, msg); self.message = '\nDftd3Error: %s\n\n' % msg. [docs]class PastureRequiredError(PsiException):; """"""Error called when the specified value of *option* requires some; module(s) from Psi4Pasture, but could not be imported.; """"""; msg_tmpl = """"""Psi4Pasture module(s) [{modlist}] are required to change the default value of {opt}. """"""; install_instructions = """"""; Note: Psi4Pasture is currently in an experimental state with no reliable install; procedure yet, but this is what it would look like. To Build Psi4Pasture and install the required modules within your current; Psi4 installation. >>> # clone the pasture repo; >>> git clone https://github.com/psi4/psi4pasture.git. >>> cmake -H. -Bobjdir -Dpsi4_DIR=$PSI4_INSTALL_PREFIX/share/cmake/psi4 {module_args}; >>> # $PSI4_INSTALL_PREFIX is the $CMAKE_INSTALL_PREFIX for the psi4; >>> # install you want to install pasture to. >>> # build + install install location is detected automatically; >>> cd objdir; >>> make && make install. See https://github.com/psi4/psi4pasture for more details. Or to install using psi4's own build system add; {module_args}; to cmake command line when building psi4.; """"""; pasture_required_modules = {""RUN_CCTRANSORT"": [""ccsort"", ""transqt2""]}. def __init__(self, option):; mods_str = "", "".join([m for m in PastureRequiredError.pasture_required_modules[option]]); msg = PastureRequiredError.msg_tmpl.format(opt=option, modlist=mods_str); PsiException.__init__(self, msg); module_cmake_args = "" "".join(; [""-DENABLE_{}=ON"".format(module) for module in PastureRequiredError.pasture_required_modules[option]]); msg += PastureRequiredError.install_instructions.format(module_args=module_cmake_args); self.message = '\nPsiException: {}\n\n'.format(msg); core.print_out(self.message). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .  · ; 1.3.2;  · . PSI4. Module code. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/p4util/exceptions.html:5481,install,install,5481,psi4manual/1.3.2/_modules/psi4/driver/p4util/exceptions.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/p4util/exceptions.html,2,"['install', 'update']","['install', 'updated']"
Deployability,"on.py; ""params"": {}, parameters for the dispersion correction; ""nlc"": False (optional) logical switch to turn off nlc (e.g. VV10) correction defined by LibXC; ""citation"": """", special reference for the dispersion correction parameters, appended to output. One can also use the dft_functional keyword argument to use the; orbitals generated by DFT for correlated wavefunction methods:; # MP2 with a PBE0 reference computation. molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis 6-31G; dft_spherical_points 302; dft_radial_points 99; reference rks; }. mp2_dft = energy(""MP2"", dft_functional=""PBE0""). Note that this would only update the generic Psi variables (e.g., “CURRENT ENERGY”) and not the MP2 or DFT variables.; Psi4 also supports easy customization and manipulation of DFT functionals. The values of alpha and omega can be adjusted with the DFT_ALPHA; and DFT_OMEGA keywords. For example, for LRC functionals, one can control the fraction of long-range Hartree-Fock and short-range DFA by changing DFT_OMEGA:; molecule ch2 {; 0 3; C; H 1 R; H 1 R 2 A. R = 1.075; A = 133.93; }. set reference uhf; set guess gwh; set basis cc-pvdz; set e_convergence 8. # Override the default value of omega; set dft_omega 2.0. E = energy('wb97x'). # Revoke the change for later computations if needed; revoke_global_option_changed('DFT_OMEGA'). This feature would be useful after finishing the IP fitting procedure, for example. table of contents. DFT: Density Functional Theory; Theory; Minimal Input; Spin/Symmetry Treatment; Functional Selection; Grid Selection; ERI Algorithms; IP Fitting; Fractional Particle Curves; Dispersion Corrections; Recommendations; Advanced Functional Use and Manipulation. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Theoretical Methods: SCF to FCI; DFT: Density Functional Theory. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/dft.html:36476,update,updated,36476,psi4manual/1.7.x/dft.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/dft.html,1,['update'],['updated']
Deployability,"on; if core.get_option('SCF', 'PCM'):; if core.get_option('SCF', 'PE'):; raise ValidationError(""""""Error: 3-layer QM/MM/PCM not implemented.\n""""""); pcmsolver_parsed_fname = core.get_local_option('PCM', 'PCMSOLVER_PARSED_FNAME'); pcm_print_level = core.get_option('SCF', ""PRINT""); scf_wfn.set_PCM(core.PCM(pcmsolver_parsed_fname, pcm_print_level, scf_wfn.basisset())). # DDPCM preparation; if core.get_option('SCF', 'DDX'):; if not solvent._have_ddx:; raise ModuleNotFoundError('Python module ddx not found. Solve by installing it: `conda install -c conda-forge pyddx` or `pip install pyddx`'); ddx_options = solvent.ddx.get_ddx_options(scf_molecule); scf_wfn.ddx = solvent.ddx.DdxInterface(; molecule=scf_molecule, options=ddx_options,; basisset=scf_wfn.basisset(); ); scf_wfn.ddx_state = None. # PE preparation; if core.get_option('SCF', 'PE'):; if not solvent._have_pe:; raise ModuleNotFoundError('Python module cppe not found. Solve by installing it: `conda install -c conda-forge cppe`'); # PE needs information about molecule and basis set; pol_embed_options = solvent.pol_embed.get_pe_options(); core.print_out(f"""""" Using potential file; {pol_embed_options[""potfile""]}; for Polarizable Embedding calculation.\n""""""); scf_wfn.pe_state = solvent.pol_embed.CppeInterface(; molecule=scf_molecule, options=pol_embed_options,; basisset=scf_wfn.basisset(); ). e_scf = scf_wfn.compute_energy(); for obj in [core, scf_wfn]:; # set_variable(""SCF TOTAL ENERGY"") # P::e SCF; for pv in [""SCF TOTAL ENERGY"", ""CURRENT ENERGY"", ""CURRENT REFERENCE ENERGY""]:; obj.set_variable(pv, e_scf). # We always would like to print a little property information; if kwargs.get('scf_do_properties', True):; oeprop = core.OEProp(scf_wfn); oeprop.set_title(""SCF""). # Figure our properties, if empty do dipole; props = [x.upper() for x in core.get_option(""SCF"", ""SCF_PROPERTIES"")]; if ""DIPOLE"" not in props:; props.append(""DIPOLE""). proc_util.oeprop_validator(props); for x in props:; oeprop.add(x). # Populate free-atom volumes; ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/_modules/psi4/driver/procrouting/proc.html:56731,install,installing,56731,psi4manual/1.9.x/_modules/psi4/driver/procrouting/proc.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/_modules/psi4/driver/procrouting/proc.html,4,['install'],"['install', 'installing']"
Deployability,"on=deflection,; do_resort=do_resort,; do_mirror=do_mirror); cgeom, cmass, celem, celez, cuniq = perturbation.align_system(rgeom, rmass, relem, relez, runiq, reverse=True); cmol = Molecule.from_arrays(; geom=cgeom,; mass=cmass,; elem=celem,; elez=celez,; units='Bohr',; molecular_charge=ref_mol.molecular_charge(),; molecular_multiplicity=ref_mol.multiplicity(),; fix_com=True,; fix_orientation=True). rmsd = np.linalg.norm(cgeom - rgeom) * qcel.constants.bohr2angstroms / np.sqrt(nat); if verbose >= 1:; print('Start RMSD = {:8.4f} [A]'.format(rmsd)). rmsd, solution, amol = cmol.B787(; ref_mol,; do_plot=do_plot,; atoms_map=(not do_resort),; run_resorting=run_resorting,; mols_align=True,; run_to_completion=run_to_completion,; run_mirror=do_mirror,; verbose=verbose). compare_integers(; True, np.allclose(solution.shift, perturbation.shift, atol=6), 'shifts equiv', verbose=verbose - 1); if not do_resort:; compare_integers(; True,; np.allclose(solution.rotation.T, perturbation.rotation),; 'rotations transpose',; verbose=verbose - 1); if solution.mirror:; compare_integers(True, do_mirror, 'mirror allowed', verbose=verbose - 1). def set_fragment_pattern(self, frl, frt, frc, frm):; """"""Set fragment member data through public method analogous to psi4.core.Molecule"""""". if not (len(frl) == len(frt) == len(frc) == len(frm)):; raise ValidationError(""""""Molecule::set_fragment_pattern: fragment arguments not of same length.""""""). self.fragments = frl; self.fragment_types = frt; self.fragment_charges = frc; self.fragment_multiplicities = frm. # Attach methods to qcdb.Molecule class; from .parker import xyz2mol as _parker_xyz2mol_yo; Molecule.format_molecule_for_mol = _parker_xyz2mol_yo; from .interface_gcp import run_gcp as _gcp_qcdb_yo; Molecule.run_gcp = _gcp_qcdb_yo. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .  · ; 1.3.2;  · . PSI4. Module code. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/qcdb/molecule.html:61570,update,updated,61570,psi4manual/1.3.2/_modules/psi4/driver/qcdb/molecule.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/qcdb/molecule.html,1,['update'],['updated']
Deployability,"onal method; to be applied to the system. :type molecule: :ref:`molecule <op_py_molecule>`; :param molecule: ``h2o`` || etc. The target molecule, if not the last molecule defined. :type return_wfn: :ref:`boolean <op_py_boolean>`; :param return_wfn: ``'on'`` || |dl| ``'off'`` |dr|. Indicate to additionally return the :ref:`Wavefunction<sec:psimod_Wavefunction>`; calculation result as the second element (after *float* energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. :type func: :ref:`function <op_py_function>`; :param func: |dl| ``gradient`` |dr| || ``energy`` || ``cbs``. Indicates the type of calculation to be performed on the molecule.; The default dertype accesses ``'gradient'`` or ``'energy'``, while; ``'cbs'`` performs a multistage finite difference calculation.; If a nested series of python functions is intended (see :ref:`sec:intercalls`),; use keyword ``freq_func`` instead of ``func``. :type mode: string; :param mode: |dl| ``'continuous'`` |dr| || ``'sow'`` || ``'reap'``. For a finite difference of energies or gradients frequency, indicates; whether the calculations required to complete the frequency are to be run; in one file (``'continuous'``) or are to be farmed out in an; embarrassingly parallel fashion (``'sow'``/``'reap'``)/ For the latter,; run an initial job with ``'sow'`` and follow instructions in its output file.; For maximum flexibility, ``return_wfn`` is always on in ``'reap'`` mode. :type dertype: :ref:`dertype <op_py_dertype>`; :param dertype: |dl| ``'hessian'`` |dr| || ``'gradient'`` || ``'energy'``. Indicates whether analytic (if available- they're not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. :type irrep: int or string; :param irrep: |dl| ``-1`` |dr| || ``1`` || ``'b2'`` || ``'App'`` || etc. Indicates which symmetry block (:ref:`Cotton <table:irrepOrdering>` ordering) of vibrational; frequencies to be computed. ``1``, ``'1'``, or `",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/driver.html:80106,continuous,continuous,80106,psi4manual/1.0.0/_modules/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/driver.html,1,['continuous'],['continuous']
Deployability,"onal); density_b (Matrix) – density in the MO basis to build beta NO’s from, assumes restricted if not supplied (optional); dovirtual (bool) – do write all the MOs to the MOLDEN file (true) or discard the unoccupied MOs, not valid for NO’s (false) (optional). Examples:. Molden file with the Kohn-Sham orbitals of a DFT calculation.; >>> E, wfn = energy('b3lyp', return_wfn=True); >>> molden(wfn, 'mycalc.molden'). Molden file for CI/MCSCF computation using NO roots.; Any method returning a CIWavefunction object will work: detci,; fci, casscf, etc. The first two arguments of get_opdm can be; set to n, n where n => 0 selects the root to write out, provided; these roots were computed, see NUM_ROOTS. The; third argument controls the spin (""A"", ""B"" or ""SUM"") and the final; boolean option determines whether inactive orbitals are included.; >>> E, wfn = energy('detci', return_wfn=True); >>> molden(wfn, 'no_root1.molden', density_a=wfn.get_opdm(0, 0, ""A"", True)). The following produces an INCORRECT Molden file, because the; molden function needs orbitals in the MO basis (which are internally; converted and written to the Molden file in the AO basis). The correct; usage is given in the next point.; >>> E, wfn = energy('ccsd', return_wfn=True); >>> molden(wfn, 'ccsd_no.molden', density_a=wfn.Da()). Molden file with the natural orbitals of the ground-state 1RDM of a; Post-HF calculation. Note the required transformation of Da (SO->MO).; >>> E, wfn = properties('ccsd', return_wfn=True); >>> Da_so = wfn.Da(); >>> SCa = core.doublet(wfn.S(), wfn.Ca(), False, False); >>> Da_mo = core.triplet(SCa, Da_so, SCa, True, False, False); >>> molden(wfn, 'ccsd_no.molden', density_a=Da_mo). table of contents. molden; molden(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; molden. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.molden.html:2876,update,updated,2876,psi4manual/1.8.x/api/psi4.driver.molden.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.molden.html,1,['update'],['updated']
Deployability,"onal); density_b (Matrix) – density in the MO basis to build beta NO’s from, assumes restricted if not supplied (optional); dovirtual (bool) – do write all the MOs to the MOLDEN file (true) or discard the unoccupied MOs, not valid for NO’s (false) (optional). Examples:. Molden file with the Kohn-Sham orbitals of a DFT calculation.; >>> E, wfn = energy('b3lyp', return_wfn=True); >>> molden(wfn, 'mycalc.molden'). Molden file for CI/MCSCF computation using NO roots.; Any method returning a CIWavefunction object will work: detci,; fci, casscf, etc. The first two arguments of get_opdm can be; set to n, n where n => 0 selects the root to write out, provided; these roots were computed, see NUM_ROOTS. The; third argument controls the spin (""A"", ""B"" or ""SUM"") and the final; boolean option determines whether inactive orbitals are included.; >>> E, wfn = energy('detci', return_wfn=True); >>> molden(wfn, 'no_root1.molden', density_a=wfn.get_opdm(0, 0, ""A"", True)). The following produces an INCORRECT Molden file, because the; molden function needs orbitals in the MO basis (which are internally; converted and written to the Molden file in the AO basis). The correct; usage is given in the next point.; >>> E, wfn = energy('ccsd', return_wfn=True); >>> molden(wfn, 'ccsd_no.molden', density_a=wfn.Da()). Molden file with the natural orbitals of the ground-state 1RDM of a; Post-HF calculation. Note the required transformation of Da (SO->MO).; >>> E, wfn = properties('ccsd', return_wfn=True); >>> Da_so = wfn.Da(); >>> SCa = core.doublet(wfn.S(), wfn.Ca(), False, False); >>> Da_mo = core.triplet(SCa, Da_so, SCa, True, False, False); >>> molden(wfn, 'ccsd_no.molden', density_a=Da_mo). table of contents. molden; molden(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.9.1;  · . PSI4. PSI4 API: Linking C++ and Python; molden. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 08 February 2024 09:32PM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/api/psi4.driver.molden.html:2876,update,updated,2876,psi4manual/1.9.x/api/psi4.driver.molden.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/api/psi4.driver.molden.html,1,['update'],['updated']
Deployability,"onal; Y; —; —; —; —; —; —; —; —. PBELYP1W; PBELYP1W GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; —; —. PW86PBE; PW86PBE GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; —; —. PW91; PW91 GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; —; —. PW91-D3BJ; PW91 GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; Y;  . REVPBE; revPBE GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; —; —. REVPBE-D3BJ; revPBE GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; Y;  . REVPBE-NL; revPBE GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; —; —. RPBE; RPBE GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; —; —. RPBE-D3BJ; RPBE GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; Y;  . SOGGA; SOGGA Exchange + PBE Correlation Functional; Y; —; —; —; —; —; —; —; —. SOGGA11; SOGGA11 Exchange-Correlation Functional; Y; —; —; —; —; —; —; —; —. TH-FC; TH-FC GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; —; —. TH-FCFO; TH-FCFO GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; —; —. TH-FCO; TH-FCO GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; —; —. TH-FL; TH-FL GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; —; —. TH1; TH1 GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; —; —. TH2; TH2 GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; —; —. TH3; TH3 GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; —; —. TH4; TH4 GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; —; —. VV10; VV10 GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; —; —. XLYP; XLYP GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; —; —. XLYP-D3BJ; XLYP-d3bj GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; Y;  . «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Appendices; DFT Functionals. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 July 2018 04:21AM.; Created using Sphinx 1.7.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/autodoc_dft_gga-1.html:5765,update,updated,5765,psi4manual/1.2.1/autodoc_dft_gga-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/autodoc_dft_gga-1.html,2,['update'],['updated']
Deployability,"onality to automatically render specified surfaces, including molecular orbitals,; densities, and basis functions, using VMD. The vmd_cube.py script takes the .cube files generated; in a calculation and generates images aligned with user-input specifications. The script is located; in psi4/psi4/share/psi4/scripts/vmd_cube.py. Script Prerequisites¶. VMD must be installed, and it can be downloaded for free at (http://www.ks.uiuc.edu/Research/vmd/). Additionally,; the script needs to know where to find the VMD executable, and this is defined as VMDPATH. VMDPATH must be defined as; an environment variable.; To generate images with multiple surfaces, ImageMagick must also be installed. ImageMagick is a free program which; can be installed using homebrew/pip or from http://www.imagemagick.org/script/binary-releases.php .; With ImageMagick installed, an environment variable called MONTAGE needs to be created which points to the montage executable.; This executable can be found in the /bin/ sub-directory wherever ImageMagick was installed. Running the Script¶. Run a PSI4 calculation, generating .cube files as detailed in the above documentation. Add vmd_cube.py to your path. Call vmd_cube.py and pass the directory containing; the .cube files as an argument:; 1python vmd_cube.py /path/to/cube/files/. By default the script will search for cube files in the directory in which it is called.; In addition to individual image files for each orbital, vmd_cube will also generate an image containing all surfaces in an array; (very useful for hand-picking orbital spaces). As an example, take the cube files generated from the water calculation from the above input file.; Using vmd_cube the alpha molecular orbitals can be rendered and output in one image with:. python vmd_cube.py /path/to/cube/files/ –opacity=0.5 –rx=90 –ry=60; The desired image in this case is called “AlphaMOs.tga”, and looks like this:. Script Options¶. 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11>>> ./vmd_cube.py --help; usage: ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/cubeprop-1.html:6111,install,installed,6111,psi4manual/1.1.0/cubeprop-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/cubeprop-1.html,2,['install'],['installed']
Deployability,"onality to automatically render specified surfaces, including molecular orbitals,; densities, and basis functions, using VMD. The vmd_cube.py script takes the .cube files generated; in a calculation and generates images aligned with user-input specifications. The script is located; in psi4/psi4/share/psi4/scripts/vmd_cube.py. Script Prerequisites¶. VMD must be installed, and it can be downloaded for free at (http://www.ks.uiuc.edu/Research/vmd/). Additionally,; the script needs to know where to find the VMD executable, and this is defined as VMDPATH. VMDPATH must be defined as; an environment variable.; To generate images with multiple surfaces, ImageMagick must also be installed. ImageMagick is a free program which; can be installed using homebrew/pip or from http://www.imagemagick.org/script/binary-releases.php .; With ImageMagick installed, an environment variable called MONTAGE needs to be created which points to the montage executable.; This executable can be found in the /bin/ sub-directory wherever ImageMagick was installed. Running the Script¶. Run a PSI4 calculation, generating .cube files as detailed in the above documentation. Add vmd_cube.py to your path. Call vmd_cube.py and pass the directory containing; the .cube files as an argument:; 1python vmd_cube.py /path/to/cube/files/. By default the script will search for cube files in the directory in which it is called.; In addition to individual image files for each orbital, vmd_cube will also generate an image containing all surfaces in an array; (very useful for hand-picking orbital spaces). As an example, take the cube files generated from the water calculation from the above input file.; Using vmd_cube the alpha molecular orbitals can be rendered and output in one image with:. python vmd_cube.py /path/to/cube/files/ –opacity=0.5 –rx=90 –ry=60; The desired image in this case is called “AlphaMOs.tga”, and looks like this:. Script Options¶; The help for vmd_cube.py can be obtained from the console:; 1; 2; ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/cubeprop-1.html:6856,install,installed,6856,psi4manual/1.2.1/cubeprop-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cubeprop-1.html,4,['install'],['installed']
Deployability,"onality to automatically render specified surfaces, including molecular orbitals,; densities, and basis functions, using VMD. The vmd_cube.py script takes the .cube files generated; in a calculation and generates images aligned with user-input specifications. The script is located; in psi4/psi4/share/psi4/scripts/vmd_cube.py. Script Prerequisites¶. VMD must be installed, and it can be downloaded for free at (http://www.ks.uiuc.edu/Research/vmd/). Additionally,; the script needs to know where to find the VMD executable, and this is defined as VMDPATH. VMDPATH must be defined as; an environment variable.; To generate images with multiple surfaces, ImageMagick must also be installed. ImageMagick is a free program which; can be installed using homebrew/pip or from http://www.imagemagick.org/script/binary-releases.php .; With ImageMagick installed, an environment variable called MONTAGE needs to be created which points to the montage executable.; This executable can be found in the /bin/ sub-directory wherever ImageMagick was installed. VMDPATH¶; Filesystem path to the VMD executable. MONTAGE¶; Filesystem path to the Montage executable of ImageMagick. Running the Script¶. Run a PSI4 calculation, generating .cube files as detailed in the above documentation.; Add vmd_cube.py to your path. Call vmd_cube.py and pass the directory containing; the .cube files as an argument:; python vmd_cube.py /path/to/cube/files/. By default the script will search for cube files in the directory in which it is called.; In addition to individual image files for each orbital, vmd_cube will also generate an image containing all surfaces in an array; (very useful for hand-picking orbital spaces). As an example, take the cube files generated from the water calculation from the above input file.; Using vmd_cube the alpha molecular orbitals can be rendered and output in one image with:; python vmd_cube.py /path/to/cube/files/ --opacity=0.5 --rx=90 --ry=60. The desired image in this case is called “",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/cubeprop-1.html:7940,install,installed,7940,psi4manual/1.4.0/cubeprop-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cubeprop-1.html,9,['install'],['installed']
Deployability,"onda or miniconda has already; been installed (instructions at Quick Installation), the dftd3; executable can be obtained through conda install dftd3.; To be used by Psi4, the program binary (dftd3) must be; found in your PSIPATH or PATH (in that order). If; Psi4 is unable to execute the binary, an error will be reported.; To preferentially use a particular dftd3 compilation, simply adjust its; position in the path environment variables. To remove the dftd3 that; conda installs alongside Psi4, conda remove dftd3.; Alternatively, to build DFTD3 yourself,; follow the instructions provided with the source; (essentially, unpack the source, edit the Makefile to select a; Fortran compiler, and run make). From version 3.1.0 onwards, DFTD3 can be used; as-is; for earlier versions, patches are available:; psi4/share/scripts/patch_grimme_dftd3.3.0.2.; >>> cd dftd3; >>> ls; dftd3.tar; patch_grimme_dftd3.3.0.2; >>> tar -xvf dftd3.tar; copyc6.f; dftd3.f; Makefile; man.pdf; pars.f; param; >>> patch < patch_grimme_dftd3.3.0.2; patching file dftd3.f; >>> make; making dftd3.o from dftd3.f; ifort -O -c dftd3.f -o dftd3.o; making copyc6.o from copyc6.f; ifort -O -c copyc6.f -o copyc6.o; ifort dftd3.o copyc6.o -o ./dftd3; >>> ls; Makefile copyc6.o dftd3.f dftd3.tar param patch_grimme_dftd3.3.0.2; copyc6.f dftd3 dftd3.o man.pdf pars.f. Theory¶; The local or semilocal character of conventional density functionals; necessarily leads to neglect of the long-range correlation interactions; which capture attractive van der Waals forces. Initially proposed by Yang; [Wu:2002:515] and assiduously developed by Grimme, [Grimme:2004:1463]; [Grimme:2006:1787] [Grimme:2010:154104] the DFT+Dispersion method; appends to the base functional a scaled, damped, and fitted leading term; to the well-known dispersion energy series, . The DFT-D2 [Grimme:2006:1787] variant; takes the explicit form below. Here, dispersion coefficients,; , obtained from the geometric mean of tabulated elemental; values, are summed",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/dftd3-1.html:1674,patch,patch,1674,psi4manual/1.0.0/dftd3-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/dftd3-1.html,2,['patch'],['patch']
Deployability,"onduct; Setting Up Your Development Environment; General layout of the core: where new C++ code should live; Where to Get Help. Adding New Code to PSI4; Ways to Add Code: Psi4NumPy, Plugins, Full Integration; Creating New Plugins; Integrating New Features into PSI4; Adding Methods to Driver; Python Style; C++ Style; FAQ. Programming with the Core Libraries; LibOptions: globals, locals, has_changed and all that; Linear Algebra in PSI4. Integrals in PSI4; Introduction; The older style; The new syntax; One Electron Integrals in PSI4. Test Suite; CTest and pytest, PSIthon and PsiAPI; Test Contents; Adding PSIthon Test Cases; Adding PsiAPI Test Cases; Comparison Functions. Debugging and Profiling; Debugging; Profiling. Updating the PSI4 Users’ and Programmers’ Manual; Installing Sphinx; Documentation Structure; reStructuredText; Math in the Codebase; The Map of the Sphinx. Code style conventions; How to impose code style through your editor; How to impose code style through Git hooks; How to run code-style tools clang-format and yapf manually; How and when to not apply code styling to your contributions. PsiPEP: Plans and Practices to Organize PSI4; PEP1: Proposing PsiPEP for PSI4. Managing: Git, Conda, CMake and all that; Adding Add-Ons; Git, Versioning; Release Procedures. PSI4 API: Linking C++ and Python; psi4.core Module; psi4.driver Package; psi4.driver.p4util Package. External API Objects; Molecule; IPIBroker; auto_fragments(); process_input(); ip_fitting(); frac_traverse(); frac_nuke(); set_output_file(); BaseComputer; TaskComputers; SubTaskComputers; expand_cbs_methods(); task_planner(). Indices. Index; Module Index; Search Page. table of contents. PSI4: Open-Source Quantum Chemistry. Programmers’ Manual. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .  · ; 1.9.1;  · . PSI4. PSI4: Open-Source Quantum Chemistry. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 08 February 2024 09:32PM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x.html:5949,update,updated,5949,psi4manual/1.9.x.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x.html,2,['update'],['updated']
Deployability,"one electron is in RAS IV, then the holes in RAS I cannot exceed the number of particles in RAS III + RAS IV (i.e., EX_LEVEL), or else the string is discarded. Type: boolean; Default: false. R_CONVERGENCE (CCENERGY); CCENERGY — Convergence criterion for wavefunction (change) in CC amplitude equations. Type: conv double; Default: 1e-7. R_CONVERGENCE (CCEOM); CCEOM — Convergence criterion for norm of the residual vector in the Davidson algorithm for CC-EOM. Type: conv double; Default: 1e-6. R_CONVERGENCE (CCLAMBDA); CCLAMBDA — Convergence criterion for wavefunction (change) in CC lambda-amplitude equations. Type: conv double; Default: 1e-7. R_CONVERGENCE (CCRESPONSE); CCRESPONSE — Convergence criterion for wavefunction (change) in perturbed CC equations. Type: conv double; Default: 1e-7. R_CONVERGENCE (CIS); CIS — Convergence criterion for CIS wavefunction. Type: conv double; Default: 1e-7. R_CONVERGENCE (DCFT); DCFT — Convergence criterion for the RMS of the residual vector in the density cumulant updates as well as the solution of the density cumulant and orbital response equations. In the orbital updates controls the RMS of the SCF error vector. Type: conv double; Default: 1e-10. R_CONVERGENCE (DETCI); DETCI — Convergence criterion for CI residual vector in the Davidson algorithm (RMS error). The default is 1e-4 for energies and 1e-7 for gradients. Type: conv double; Default: 1e-4. R_CONVERGENCE (LMP2); LMP2 — Convergence criterion for T2 amplitudes (RMS change). Type: conv double; Default: 1e-5. R_CONVERGENCE (OMP2); OMP2 —. Type: conv double; Default: 1e-5. R_CONVERGENCE (PSIMRCC); PSIMRCC — Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-9. RAS1 (DETCI); DETCI (Expert) — An array giving the number of orbitals per irrep for RAS1. Type: array; Default: No Default. RAS1 (TRANSQT); TRANSQT (Expert) — An array giving the number of orbitals per irrep for RAS1. Type: array; Default: No Default. RAS2 (DETCI); DETCI (Expert) — An array gi",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/autodoc_glossary_options_c-1.html:77641,update,updates,77641,psi4manual/4.0b2/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/autodoc_glossary_options_c-1.html,2,['update'],['updates']
Deployability,"one electron is in RAS IV, then the holes in RAS I cannot exceed the number of particles in RAS III + RAS IV (i.e., EX_LEVEL), or else the string is discarded. Type: boolean; Default: false. R_CONVERGENCE (CCENERGY); CCENERGY — Convergence criterion for wavefunction (change) in CC amplitude equations. Type: conv double; Default: 1e-7. R_CONVERGENCE (CCEOM); CCEOM — Convergence criterion for norm of the residual vector in the Davidson algorithm for CC-EOM. Type: conv double; Default: 1e-6. R_CONVERGENCE (CCLAMBDA); CCLAMBDA — Convergence criterion for wavefunction (change) in CC lambda-amplitude equations. Type: conv double; Default: 1e-7. R_CONVERGENCE (CCRESPONSE); CCRESPONSE — Convergence criterion for wavefunction (change) in perturbed CC equations. Type: conv double; Default: 1e-7. R_CONVERGENCE (CIS); CIS — Convergence criterion for CIS wavefunction. Type: conv double; Default: 1e-7. R_CONVERGENCE (DCFT); DCFT — Convergence criterion for the RMS of the residual vector in the density cumulant updates, as well as the solution of the density cumulant and orbital response equations. In the orbital updates controls the RMS of the SCF error vector. Type: conv double; Default: 1e-10. R_CONVERGENCE (DETCI); DETCI — Convergence criterion for CI residual vector in the Davidson algorithm (RMS error). The default is 1e-4 for energies and 1e-7 for gradients. Type: conv double; Default: 1e-4. R_CONVERGENCE (FNOCC); FNOCC — Convergence for the CC amplitudes. Note that convergence is met only when E_CONVERGENCE and R_CONVERGENCE are satisfied. Type: conv double; Default: 1.0e-7. R_CONVERGENCE (LMP2); LMP2 — Convergence criterion for T2 amplitudes (RMS change). Type: conv double; Default: 1e-5. R_CONVERGENCE (OCC); OCC — Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-5. R_CONVERGENCE (PSIMRCC); PSIMRCC — Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-9. R_POINTS (SCF); SCF — Number of radial grid points for sphe",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/autodoc_glossary_options_c-1.html:103670,update,updates,103670,psi4manual/4.0b4/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_glossary_options_c-1.html,2,['update'],['updates']
Deployability,"one:; # The first atom; text += ""\n""; elif self.ato == None and self.dto == None:; # The second atom; now_rto = self.rto.entry_number() + 1; now_rval = self.rval.variable_to_string(6); text += "" %5d %11s\n"" % (now_rto, now_rval); elif self.dto == None:; # The third atom; now_rto = self.rto.entry_number() + 1; now_rval = self.rval.variable_to_string(6); now_ato = self.ato.entry_number() + 1; now_aval = self.aval.variable_to_string(6); text += "" %5d %11s %5d %11s\n"" % (now_rto, now_rval, now_ato, now_aval); else:; # Remaining atoms; now_rto = self.rto.entry_number() + 1; now_rval = self.rval.variable_to_string(6); now_ato = self.ato.entry_number() + 1; now_aval = self.aval.variable_to_string(6); now_dto = self.dto.entry_number() + 1; now_dval = self.dval.variable_to_string(6); text += "" %5d %11s %5d %11s %5d %11s\n"" % \; (now_rto, now_rval, now_ato, now_aval, now_dto, now_dval); return text; # outfile. [docs] def set_coordinates(self, x, y, z):; """"""Given the current set of coordinates, updates the values of this; atom's coordinates, and any variables that may depend on it. """"""; self.coordinates[0] = 0.0 if math.fabs(x) < 1.0E-14 else x; self.coordinates[1] = 0.0 if math.fabs(y) < 1.0E-14 else y; self.coordinates[2] = 0.0 if math.fabs(z) < 1.0E-14 else z. if self.rto != None:; if not self.rto.is_computed():; raise ValidationError(""Coordinates have been set in the wrong order""); self.rval.rset(self.r(self.coordinates, self.rto.compute())). if self.ato != None:; if not self.ato.is_computed():; raise ValidationError(""Coordinates have been set in the wrong order""); aval = self.a(self.coordinates, self.rto.compute(), self.ato.compute()); # Noise creeps in for linear molecules. Force linearity, if it is close enough.; val = aval * 180.0 / math.pi; self.aval.rset(val). if self.dto != None:; if not self.dto.is_computed():; raise ValidationError(""Coordinates have been set in the wrong order""); val = self.d(self.coordinates, self.rto.compute(), self.ato.compute(), self.dto.compu",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/_modules/qcdb/libmintscoordentry.html:12369,update,updates,12369,psi4manual/4.0b5/_modules/qcdb/libmintscoordentry.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/_modules/qcdb/libmintscoordentry.html,1,['update'],['updates']
Deployability,"one:; finalgradient = np.zeros((nat, 3)); hiloargs.update(_contract_scheme_orders(stage['d_need'], 'f_gradient')); stage['d_gradient'] = xtpl_procedures[stage['d_scheme']](**hiloargs); finalgradient += stage['d_gradient'] * stage['d_coef']. if ptype == 'hessian' or hess_available:; if finalhessian is None:; finalhessian = np.zeros((3 * nat, 3 * nat)); hiloargs.update(_contract_scheme_orders(stage['d_need'], 'f_hessian')); stage['d_hessian'] = xtpl_procedures[stage['d_scheme']](**hiloargs); finalhessian += stage['d_hessian'] * stage['d_coef']. if dipole_available:; if finaldipole is None:; finaldipole = np.zeros((3)); hiloargs.update(_contract_scheme_orders(stage['d_need'], 'f_dipole')); stage['d_dipole'] = xtpl_procedures[stage['d_scheme']](**hiloargs); finaldipole += stage['d_dipole'] * stage['d_coef']. if dipder_available:; if finaldipder is None:; finaldipder = np.zeros((3 * nat, 3)); hiloargs.update(_contract_scheme_orders(stage['d_need'], 'f_dipder')); stage['d_dipder'] = xtpl_procedures[stage['d_scheme']](**hiloargs); finaldipder += stage['d_dipder'] * stage['d_coef']. cbs_results = {; 'ret_ptype': {; 'energy': finalenergy,; 'gradient': finalgradient,; 'hessian': finalhessian,; }[ptype],; 'energy': finalenergy,; 'gradient': finalgradient,; 'hessian': finalhessian,; 'dipole': finaldipole,; 'dipole gradient': finaldipder,; }. return cbs_results, GRAND_NEED. def _summary_table(metadata, TROVE, GRAND_NEED) -> str:; """"""Build string of results table"""""". delimit = ' ' + '-' * 105 + '\n'; blckfmt = """"""\n ==> {} <==\n\n""""""; headfmt = """""" {:>6} {:>20} {:1} {:26} {:>3} {:>16} {}\n""""""; linefmt = """""" {:>6} {:>20} {:1} {:27} {:2} {:16.8f} {}\n"""""". tables = ''; tables += blckfmt.format('Components'); tables += delimit. required = []; finalenergy = 0.0; for stage in GRAND_NEED:; finalenergy += stage['d_energy'] * stage['d_coef']; for lvl in stage['d_need'].values():; required.append((lvl['f_wfn'], lvl['f_basis'], lvl['f_options'])). tables += headfmt.format('', 'Method', '/', ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/driver_cbs.html:49872,update,update,49872,psi4manual/1.6.x/_modules/psi4/driver/driver_cbs.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/driver_cbs.html,5,['update'],['update']
Deployability,"onf is provided by package autoconf,; but it calls another program provided by libtool, so that package must; also be installed):; >>> cd madness; >>> autoreconf; >>> cd .. Configuration and Compilation; Make an object directory in which you can compile the code; >>> mkdir obj. Next you need to configure the code. Find a configuration; option line or combination of; configuration options at Section III(1)A. Either, use the line directly:; >>> cd obj; >>> ../configure [your compilation configuration options here]. or, save your configuration options for a future compilation.; In the top-level psi4 directory, create a file like “do-configure” with; the configure command and options on one line.; >>> cat do-configure; ../configure [your compilation configuration options here]; >>> chmod u+x do-configure; >>> cd obj; >>> ../do-configure. Compile the code, run the tests, and (if tests pass) install it.; >>> make; >>> make tests; >>> make install. That’s it! The details about final user configuration are given below in; Section III(7). If something goes wrong,; check Section VI about common compilation problems. III. Detailed Installation Instructions¶; This section provides a more detailed explanation of the procedure for; compiling and installing the PSI4 package. Step 1: Configuration. General Information about Configuration; First, we recommend that you choose for the top-level psi4 source; directory something other than /usr/local/psi; $HOME/psi4 or; /usr/local/src/psi4 are convenient choices. Next, in the top-level psi4; source directory you’ve chosen, first run autoconf to generate the configure; script from configure.ac. It is best to keep the source code separate; from the compilation area, so you must first choose a subdirectory for; compilation of the codes. A simple option is psi4/objdir, which should; work for most environments. However, if you need executables for several; architectures, you should choose more meaningful subdirectory names. Note; The compila",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/installfile.html:4644,configurat,configuration,4644,psi4manual/4.0b3/installfile.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/installfile.html,2,['configurat'],['configuration']
Deployability,"onfigure environment. Preceding steps have placed conda and psi4 in your PATH, either permanently through rc-files or temporarily in this terminal session. You can keep or undo these changes. For general psi4 use, you must enable the psi4 executable to be found through any of:. prepending to PATH in shell, ~/.bashrc, ~/.tcshrc, or PBS cmd file; activating the conda environment (p4env above) in shell, ~/.bashrc, or PBS cmd file; supplying full path to executable (shell or PBS cmd file). Similarly, the scratch directory (see Scratch Files and Elementary Restart) must be specified through:. defining PSI_SCRATCH in shell, ~/.bashrc, ~/.tcshrc, or PBS cmd file. Suitable values for these variables have been printed to screen during installation (see last codeblock in step 6). Useful Commands¶. Initially install PSI4 stable release. # equivalent; >>> conda install psi4 -c psi4; >>> conda install psi4 –channel psi4. Initially install PSI4 stable release with non-current python. >>> conda install psi4 python=3.6 -c psi4. Update to latest PSI4 stable release. >>> conda update psi4 -c psi4. Initially install stable release into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=0.1.12 -c psi4. Uninstall PSI4 from current environment. >>> conda remove psi4. Initially install PSI4 nightly build. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4 –channel psi4/label/dev. Initially install PSI4 nightly build with non-current python. >>> conda install psi4 python=3.6 -c psi4/label/dev. Update to latest PSI4 nightly build. >>> conda update psi4 -c psi4/label/dev. Initially install nightly build into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4/label/dev; >>> ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/conda-1.html:20819,install,install,20819,psi4manual/1.3.2/conda-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/conda-1.html,2,['install'],['install']
Deployability,"onfigure environment. Preceding steps have placed conda and psi4 in your PATH, either permanently through rc-files or temporarily in this terminal session. You can keep or undo these changes. For general psi4 use, you must enable the psi4 executable to be found through any of:. prepending to PATH in shell, ~/.bashrc, ~/.tcshrc, or PBS cmd file; activating the conda environment (p4env above) in shell, ~/.bashrc, or PBS cmd file; supplying full path to executable (shell or PBS cmd file). Similarly, the scratch directory (see Scratch Files) must be specified through:. defining PSI_SCRATCH in shell, ~/.bashrc, ~/.tcshrc, or PBS cmd file. Useful Commands¶. Initially install PSI4 stable release. # equivalent; >>> conda install psi4 -c psi4; >>> conda install psi4 --channel psi4. Initially install PSI4 stable release with non-current python. >>> conda install psi4 python=3.8 -c psi4. Update to latest PSI4 stable release. >>> conda update psi4 -c psi4. Initially install stable release into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=1.4 -c psi4. Uninstall PSI4 from current environment. >>> conda remove psi4. Initially install PSI4 nightly build. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4 --channel psi4/label/dev. Initially install PSI4 nightly build with non-current python. >>> conda install psi4 python=3.8 -c psi4/label/dev. Update to latest PSI4 nightly build. >>> conda update psi4 -c psi4/label/dev. Initially install nightly build into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4/label/dev; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=1.4 -c psi4/label/dev. table of contents. Conda Binary Distr",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/conda-1.html:16948,install,install,16948,psi4manual/1.4.0/conda-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html,18,"['install', 'release']","['install', 'release']"
Deployability,"onical. TD-fctl ROOT 0 (IN h) -> ROOT n (IN i) RIGHT EIGENVECTOR BETA¶; The right beta spin eigenvectors of the named method; from ground state, which is in irrep h, to root n within irrep i. DFT; functional labeled if canonical. TD-fctl ROOT 0 (h) -> ROOT n (i) RIGHT EIGENVECTOR BETA¶; The right beta spin eigenvectors of the named method; from ground state, which is in irrep h, to root n, which is in irrep i. DFT; functional labeled if canonical. TD-fctl ROOT 0 -> ROOT n RIGHT EIGENVECTOR BETA - h TRANSITION¶; The right alpha and beta spin eigenvectors of the named method; from ground state to root n, and the transition is of irrep h. DFT; functional labeled if canonical. THERMAL ENERGY¶; Total thermal energy E [Eh] at given temperature. THERMAL ENERGY CORRECTION¶; Sum of electronic, translational, rotational, and vibrational corrections [Eh] to the thermal energy at given temperature. TWO-ELECTRON ENERGY¶; The two-electron energy contribution [Eh] to the total SCF energy.; Quantity \(E_{2e^-}\) in Eq. (4). UNCP-CORRECTED 2-BODY INTERACTION ENERGY¶; The interaction energy [Eh] considering only two-body interactions,; computed without counterpoise correction.; Related variable CP-CORRECTED 2-BODY INTERACTION ENERGY. \[E_{\text{IE}} = E_{dimer} - \sum_{monomer}^{n}{E_{monomer}^{\text{unCP}}}\]. WIBERG LOWDIN INDICES¶; Property of Wiberg bond indices using orthogonal Löwdin orbitals, (nat, nat). ZAPTn TOTAL ENERGY¶. ZAPTn CORRELATION ENERGY¶; The total electronic energy [Eh] and correlation energy component [Eh]; for the labeled Z-averaged perturbation theory level.; n is ZAPT perturbation order. ZERO K ENTHALPY¶; Total electronic and zero-point energy [Eh] at 0 [K]. ZPVE¶; Vibrational zero-point energy [Eh] at 0 [K]. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.6;  · . PSI4. Appendices; PSI Variables by Alpha. © Copyright 2022, The Psi4 Project.; Last updated on Thursday, 19 May 2022 08:57PM.; Created using Sphinx 4.5.0.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/glossary_psivariables.html:61216,update,updated,61216,psi4manual/1.6.x/glossary_psivariables.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/glossary_psivariables.html,1,['update'],['updated']
Deployability,"only exceptions are the orbital space; Psi4 keywords RESTRICTED_DOCC (formerly; CheMPS2 used FROZEN_DOCC, contrary to its; definition) and ACTIVE which are passed along to; CheMPS2 keywords NOCC and NACT. A translation table; is available. Installation¶; build psi4 with the plugin option ENABLE_PLUGINS=ON, and then run:; CheMPS2 is available as conda package chemps2 or pychemps2 for Linux and OSX. If using the Psi4 binary, CheMPS2 has already been installed alongside.; If using Psi4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation), CheMPS2; can be obtained through conda install chemps2. Then enable it as a feature and; rebuild Psi4 to detect CheMPS2 and activate dependent code.; If using Psi4 built from source and you want CheMPS2 built from; source also, enable; it as a feature and let the build system fetch and build it and activate; dependent code.; To remove the CheMPS2 that conda installs alongside Psi4,; conda remove chemps2 (or conda remove pychemps2; use conda; list to see which is installed). Methods¶. Density matrix renormalization group capabilities of Psi4 through CheMPS2¶. name; calls method; Energy; Gradient. dmrg-ci; DMRG configuration interaction (CI); RHF/ROHF; —. dmrg-scf; DMRG complete active space SCF (CASSCF); RHF/ROHF; —. dmrg-caspt2; DMRG CAS with 2nd-order perturbation theory (CASPT2); RHF/ROHF; —. DMRG Keywords¶. DMRG_CASPT2_CALC¶. Do calculate the DMRG-CASPT2 energy after the DMRGSCF calculations are done?. Type: boolean; Default: false. DMRG_CASPT2_IMAG¶. CASPT2 Imaginary shift. Type: double; Default: 0.0. DMRG_CASPT2_IPEA¶. CASPT2 IPEA shift. Type: double; Default: 0.0. DMRG_CASPT2_ORBS¶. Whether to calculate the DMRG-CASPT2 energy after the DMRGSCF calculations are done. Type: string; Possible Values: PSEUDOCANONICAL, ACTIVE; Default: PSEUDOCANONICAL. DMRG_DIIS¶. Whether or not to use DIIS for DMRG. Type: boolean; Default: false. DMRG_DIIS_WRITE¶. Whether or not to store the DII",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/chemps2-1.html:1607,install,installs,1607,psi4manual/1.0.0/chemps2-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/chemps2-1.html,4,['install'],"['installed', 'installs']"
Deployability,"only matter for the rotational symmetry number in thermodynamic computations. sapt6; checks that all SAPT physical components (elst, exch, indc, disp) and total IE are being computed correctly for SAPT2+3(CCD)dMP2/aug-cc-pvdz and all lesser methods thereof. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. matrix1; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating matrix multiplication, eigendecomposition, Cholesky decomposition and LU decomposition. These operations are performed on vectors and matrices provided from the Psi library. mp2-property; MP2 cc-pvDZ properties for Nitrogen oxide. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. omp2p5-2; OMP2 cc-pVDZ energy for the H2O molecule. dcft1; DC-06, DC-12, ODC-06 and ODC-12 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. opt7; Various constrained energy minimizations of HOOH with cc-pvdz RHF. For “fixed” coordinates, the final value is provided by the user. sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. This example uses frozen core as well as MP2 natural orbital approximations. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. scf-guess-read2; Test if the the guess read in the same basis converges. dft-pbe0-2; Internal match to psi4, test to match to literature values in litref.in/litref.out. gibbs; Test Gibbs free energies at 298 K of N2, H2O, and CH4. props2; DF-SCF cc-pVDZ of benzene-hydronium ion, scanning the dissociation coordinate with Python’s built-in loop mechanism. The geometry is specified by a Z-matrix with dummy atoms, fixed param",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/testsuite-1.html:30349,update,update,30349,psi4manual/1.1.0/testsuite-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/testsuite-1.html,4,['update'],['update']
Deployability,"ons are not to your taste, use the links within core; dependencies and add-on dependencies to plan a set of arguments to cmake tailored to; your computer. Proceed to quick build or; detailed build. How to build and install Psi4, the compact version¶; This section outlines the main steps of configuring, compiling, and; installing PSI4. More detail is given here.; 1; 2; 3; 4; 5>>> cd {top-level-psi4-dir}; >>> cmake -H. -Bobjdir [your configuration options]; >>> cd objdir; >>> make -j`getconf _NPROCESSORS_ONLN`; >>> make install. How to build, test, and install Psi4, in detail¶; 1. Plan Directories. Get ahold of the PSI4 codebase, and navigate to the top level source; directory, hereafter top-level-psi4-dir. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}. 1>>> cd {top-level-psi4-dir}. Choose a compilation directory, hereafter objdir. How to choose the compilation directory, {objdir}. Choose an installation directory, hereafter prefix. How to install elsewhere than /usr/local/psi4. 2. Plan Configuration. Examine the strict and optional software requirements to make sure the; target computer has all the necessary dependencies installed. What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies. Prepare any necessary or desired configuration options for cmake,; hereafter [your configuration options]. How to see what build configuration options are available; Planning: how to configure Psi4 and invoke CMake. 3. Configure. Run CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates objdir ready for compilation.; 1>>> cmake -H. -B{objdir} -DCMAKE_INSTALL_PREFIX={prefix} [your configuration options]. 4. Compile. Compile the code (optional -j triggers parallel compilation).; 1; 2>>> cd {objdir}; >>> make -j`getconf _NPROCESSORS_ONLN`. 5. Test. Optionally, use CTest (",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/build_planning-1.html:1971,install,install,1971,psi4manual/1.2.1/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html,6,['install'],['install']
Deployability,"ons only the default must be used. Type: boolean; Default: true. RESPONSE_ALGORITHM¶. The algorithm to use for the solution of the response equations for the analytic gradients and properties. Two-step algorithm is generally more efficient than simultaneous and is used by default. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS; Default: TWOSTEP. R_CONVERGENCE¶. Convergence criterion for the RMS of the residual vector in the density cumulant updates as well as the solution of the density cumulant and orbital response equations. In the orbital updates controls the RMS of the SCF error vector. Type: conv double; Default: 1e-10. SCF_MAXITER¶. Maximum number of orbital update micro-iterations per macro-iteration (for ALOGRITHM = TWOSTEP). Same keyword controls the maximum number of orbital response micro-iterations per macro-iteration for the solution of the response equations (for RESPONSE_ALOGRITHM = TWOSTEP). Type: integer; Default: 50. TAU_SQUARED¶. Controls whether to compute the DCFT energy with the Tau^2 correction to Tau. Type: boolean; Default: false. TIKHONOW_OMEGA¶. The shift applied to the denominator in the density cumulant update iterations. Type: double; Default: 0.0. TPDM¶. Controls whether to compute unrelaxed two-particle density matrix at the end of the energy computation. Type: boolean; Default: false. Table Of Contents. DCFT; General; ALGORITHM; AO_BASIS; CACHELEVEL; DAMPING_PERCENTAGE; DIIS_MAX_VECS; DIIS_MIN_VECS; DIIS_START_CONVERGENCE; IGNORE_TAU; INTS_TOLERANCE; LAMBDA_MAXITER; LOCK_OCC; MAXITER; MO_RELAX; RESPONSE_ALGORITHM; R_CONVERGENCE; SCF_MAXITER; TAU_SQUARED; TIKHONOW_OMEGA; TPDM. Previous topic; TDHF_MEM_SAFETY_FACTOR; Next topic; ALGORITHM; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Appendices »; Keywords by Module ». © Copyright 2012, Psi4 Project.; Last updated on Sep 30, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/autodir_options_c/module__dcft-1.html:4091,update,update,4091,psi4manual/4.0b2/autodir_options_c/module__dcft-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/autodir_options_c/module__dcft-1.html,4,['update'],"['update', 'updated']"
Deployability,"ons to SO’s. petite_list1(self: psi4.core.MintsHelper, include_pure_transform: bool) → psi::PetiteList; Returns petite list which transforms AO basis functions to SO’s, setting argument to true is for Cartesian basis, false is for Spherical Harmonic basis. play(self: psi4.core.MintsHelper) → None; play function. potential_grad(self: psi4.core.MintsHelper, arg0: psi4.core.Matrix) → psi4.core.Matrix; First nuclear derivative potential integrals. set_print(self: psi4.core.MintsHelper, arg0: int) → None; Sets the print level. set_rel_basisset(self: psi4.core.MintsHelper, rel_basis: psi::BasisSet) → None; Sets the relativistic basis set. so_angular_momentum(self: psi4.core.MintsHelper) → List[psi4.core.Matrix]; Vector SO angular momentum integrals. so_dipole(self: psi4.core.MintsHelper) → List[psi4.core.Matrix]; Vector SO dipole integrals. so_dkh(self: psi4.core.MintsHelper, arg0: int) → psi4.core.Matrix; SO dkh integrals. so_ecp(self: psi4.core.MintsHelper) → psi4.core.Matrix; SO basis effective core potential integrals. so_kinetic(self: psi4.core.MintsHelper) → psi4.core.Matrix; SO basis kinetic integrals. so_nabla(self: psi4.core.MintsHelper) → List[psi4.core.Matrix]; Vector SO nabla integrals. so_overlap(self: psi4.core.MintsHelper) → psi4.core.Matrix; SO basis overlap integrals. so_potential(self: psi4.core.MintsHelper, include_perturbations: bool=True) → psi4.core.Matrix; SO basis potential integrals. so_quadrupole(self: psi4.core.MintsHelper) → List[psi4.core.Matrix]; Vector SO quadrupole integrals. so_traceless_quadrupole(self: psi4.core.MintsHelper) → List[psi4.core.Matrix]; Vector SO traceless quadrupole integrals. sobasisset(self: psi4.core.MintsHelper) → psi::SOBasisSet; Returns the SO basis set being used. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 July 2018 04:21AM.; Created using Sphinx 1.7.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/api/psi4.core.mintshelper.html:26702,update,updated,26702,psi4manual/1.2.1/api/psi4.core.mintshelper.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/api/psi4.core.mintshelper.html,1,['update'],['updated']
Deployability,"onstrates (by comparison to castup3) that output file doesn’t depend on options (scf_type) being set global or local. This input uses global. cc37; CC2(UHF)/cc-pVDZ energy of H2O+. omp2-1; OMP2 cc-pVDZ energy for the H2O molecule. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. gibbs; Test Gibbs free energies at 298 K of N2, H2O, and CH4. dft-pbe0-2; Internal match to psi4, test to match to literature values in litref.in/litref.out. zaptn-nh2; ZAPT(n)/6-31G NH2 Energy Point, with n=2-25. cc5; RHF CCSD(T) aug-cc-pvtz frozen-core energy of C4NH4 Anion. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. props2; DF-SCF cc-pVDZ of benzene-hydronium ion, scanning the dissociation coordinate with Python’s built-in loop mechanism. The geometry is specified by a Z-matrix with dummy atoms, fixed parameters, updated parameters, and separate charge/multiplicity specifiers for each monomer. One-electron properties computed for dimer and one monomer. mints5; Tests to determine full point group symmetry. Currently, these only matter for the rotational symmetry number in thermodynamic computations. omp3-1; OMP3 cc-pVDZ energy for the H2O molecule. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. dcft1; DCFT-06 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. Previous topic; Bibliography; Next topic; <no title>; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Appendices ». © Copyright 2012, The Psi4 Project.; Last updated on Nov 02, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/testsuite-1.html:20233,update,updated,20233,psi4manual/4.0b3/testsuite-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/testsuite-1.html,6,['update'],"['update', 'updated']"
Deployability,"ontmatter for this and future filenames.; Don’t postdate the date string in frontmatter or it won’t render.; Ultimately, make sure the aliases:\n  - /installs/latest/ lines are added to this new file; and removed from the previous latest file, but this can wait until the installer page has been tested. Copy and edit a new file akin to data/installs/v182.yaml. Add it to the git index. Glance through the menu and notes content to make sure they’re up-to-date. This file determines; the structure of the install page.; Add or remove python versions and architectures if necessary.; Every couple years, update the default python version in datakey: python/selected and; in optsHandler at the end.; Always adjust the datakey: branch/stable block.; For releases, adjust the datakey: branch/previous and nightly blocks. Enter the scripts/ directory. If the previous release hasn’t had a snapshot saved, copy; install-generator.py into a version-labeled file, and add it to the git index.; Edit scripts/install-generator.py. Primarily, edit edition at the top.; Also, edit other arrays (stuff above ## Outputs) or messages (logic below ## Outputs); that should change. Run the install-generator.py in place. It will dump two new files, e.g.,; data/installs/cmd/{edition}.json and data/installs/dlbtn/{edition}.json. Add these to the; index (no need to inspect them).; The installer page is now ready for inspection. Run hugo server --watch=false and view in; browser at http://localhost:1313/ . Click around the options to make sure the buttons and; instructions all look right.; Iterate on the data/installs/{edition}.yaml and the install-generator.py until correct.; It’s fine to push to psicode.org to see it in place. But wait until it’s final (and all the; packages and installers are ready) to shift “latest” alias in frontmatter from whichever page is; currently active to the new page, content/installs/{edition}.md. This makes sure “Downloads”; on the navigation bar points to the new page.; Comm",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/manage_release.html:18045,install,install-generator,18045,psi4manual/1.9.x/manage_release.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/manage_release.html,2,['install'],['install-generator']
Deployability,"ontrol over cfour program. Examples:. >>> # [1] Analytic hf optimization; >>> optimize('hf'). >>> # [2] Finite difference mp5 optimization with gradient; >>> # printed to output file; >>> e, wfn = opt('mp5', return_wfn='yes'); >>> wfn.gradient().print_out(). >>> # [3] Can automatically perform complete basis set extrapolations; >>> optimize('MP2/cc-pV([D,T]+d)Z'). >>> # [4] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> optimize(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). >>> # [5] Get info like geometry, gradient, energy back after an; >>> # optimization fails. Note that the energy and gradient; >>> # correspond to the last optimization cycle, whereas the; >>> # geometry (by default) is the anticipated *next* optimization step.; >>> try:; >>> optimize('hf/cc-pvtz'); >>> except psi4.OptimizationConvergenceError as ex:; >>> next_geom_coords_as_numpy_array = np.asarray(ex.wfn.molecule().geometry()). psi4.gradient(name[, molecule, return_wfn, func, dertype])[source]; Function complementary to optimize(). Carries out one gradient pass,; deciding analytic or finite difference. Returns:; Matrix – Total electronic gradient in Hartrees/Bohr. Returns:; (Matrix, Wavefunction) – gradient and wavefunction when return_wfn specified. Examples:. >>> # [1] Single-point dft gradient getting the gradient; >>> # in file, core.Matrix, and np.array forms; >>> set gradient_write on; >>> G, wfn = gradient('b3lyp-d', return_wfn=True); >>> wfn.gradient().print_out(); >>> np.array(G). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Psithon Functions: Invoking a Calculation; Geometry Optimization — optimize() and gradient(). © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/opt.html:18499,update,updated,18499,psi4manual/1.8.x/opt.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/opt.html,1,['update'],['updated']
Deployability,"ontrol over cfour program. Examples:. >>> # [1] Analytic hf optimization; >>> optimize('hf'). >>> # [2] Finite difference mp5 optimization with gradient; >>> # printed to output file; >>> e, wfn = opt('mp5', return_wfn='yes'); >>> wfn.gradient().print_out(). >>> # [3] Can automatically perform complete basis set extrapolations; >>> optimize('MP2/cc-pV([D,T]+d)Z'). >>> # [4] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> optimize(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). >>> # [5] Get info like geometry, gradient, energy back after an; >>> # optimization fails. Note that the energy and gradient; >>> # correspond to the last optimization cycle, whereas the; >>> # geometry (by default) is the anticipated *next* optimization step.; >>> try:; >>> optimize('hf/cc-pvtz'); >>> except psi4.OptimizationConvergenceError as ex:; >>> next_geom_coords_as_numpy_array = np.asarray(ex.wfn.molecule().geometry()). psi4.gradient(name[, molecule, return_wfn, func, dertype])[source]; Function complementary to optimize(). Carries out one gradient pass,; deciding analytic or finite difference. Returns:; Matrix – Total electronic gradient in Hartrees/Bohr. Returns:; (Matrix, Wavefunction) – gradient and wavefunction when return_wfn specified. Examples:. >>> # [1] Single-point dft gradient getting the gradient; >>> # in file, core.Matrix, and np.array forms; >>> set gradient_write on; >>> G, wfn = gradient('b3lyp-d', return_wfn=True); >>> wfn.gradient().print_out(); >>> np.array(G). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.9.1;  · . PSI4. Psithon Functions: Invoking a Calculation; Geometry Optimization — optimize() and gradient(). © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 08 February 2024 09:32PM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/opt.html:18935,update,updated,18935,psi4manual/1.9.x/opt.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/opt.html,1,['update'],['updated']
Deployability,"onverged, the second set of microiterations is performed for the; self-consistent update of the orbitals with the fixed density cumulant. Each; macroiteration is completed by performing the orbital transformation of the; integrals. As in the simultaneous algorithm, the DIIS; extrapolation is used to accelerate convergence. Two-step algorithm is; only available for the DC-06 and DC-12 methods.; 3) Quadratically-convergent algorithm (set ALGORITHM to QC). The; orbital and cumulant update equations are solved using the Newton-Raphson; method. Each macroiteration of the quadratically-convergent algorithm consists; of a single Newton-Raphson update followed by the orbital transformation; of the integrals. The solution of the Newton-Raphson equations is performed; iteratively using the preconditioned conjugate gradients method, where only the; product of the electronic Hessian with the step vector is computed for; efficiency. By default, the electronic Hessian is build for both the cumulant and orbital; updates and both updates are performed simultaneously. Setting the QC_TYPE; option to TWOSTEP will perform the Newton-Raphson update only for the orbitals,; while the equations for the cumulant will be solved using a standard Jacobi update.; If requested by the user (set QC_COUPLING to TRUE), the electronic Hessian can include; matrix elements that couple the orbitals and the density cumulant.; The computation of these coupling elements increases; the cost of the macroiteration, but usually leads to faster convergence and is; recommended for open-shell systems.; It is important to note that the quadratically-convergent algorithm is not yet fully; optimized and often converges slowly when the RMS of the cumulant or; the orbital gradient is below .; The choice of the iterative algorithm can significantly affect the cost of the; energy computation. While the two-step algorithm requires a small number of; disk-intensive integral transformations, the simultaneous; algorithm ben",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/dcft-1.html:9369,update,updates,9369,psi4manual/1.0.0/dcft-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/dcft-1.html,4,['update'],['updates']
Deployability,"onvergence criterion for density, as measured by the orbital gradient. Type: conv double; Default: 1e-6. D_CONVERGENCE (SAPT); SAPT — Convergence criterion for residual of the CPHF coefficients in the SAPT \(E_{ind,resp}^{(20)}\) term. Type: conv double; Default: 1e-8. D_CONVERGENCE (SCF); SCF — Convergence criterion for SCF density, defined as the RMS or maximum absolute value of the orbital gradient. See Table SCF Convergence & Algorithm for default convergence criteria for different calculation types. Cfour Interface: Keyword translates into CFOUR_SCF_CONV. Type: conv double; Default: 1e-6. DAMPING_CONVERGENCE (SCF); SCF — The density convergence threshold after which damping is no longer performed, if it is enabled. It is recommended to leave damping on until convergence, which is the default. Cfour Interface: Keyword translates into CFOUR_SCF_DAMPING. Type: conv double; Default: 1.0e-18. DAMPING_PERCENTAGE (DCFT); DCFT (Expert) — The amount (percentage) of damping to apply to the orbital update procedure: 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the previous iteration’s density being mixed into the current iteration) can help in cases where oscillatory convergence is observed. Type: double; Default: 0.0. DAMPING_PERCENTAGE (PSIMRCC); PSIMRCC — The amount (percentage) of damping to apply to the amplitude updates. 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the amplitudes from the previous iteration being mixed into the current iteration) can help in cases where oscillatory convergence is observed. Type: double; Default: 0.0. DAMPING_PERCENTAGE (SCF); SCF — The amount (percentage) of damping to apply to the early density updates. 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the previous iteration’s density being mixed into the current density) co",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/autodoc_glossary_options_c-1.html:92315,update,update,92315,psi4manual/1.3.2/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/autodoc_glossary_options_c-1.html,6,['update'],['update']
Deployability,"onvergence criterion for norm of the residual vector in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. SS_SKIP_DIAG¶. Do skip diagonalization of Hbar SS block?. Type: boolean; Default: false. SS_VECS_PER_ROOT¶. SS vectors stored per root. Type: integer; Default: 5. T3_WS_INCORE¶. Do build W intermediates required for eom_cc3 in core memory?. Type: boolean; Default: false. VECS_CC3¶. Vectors stored in CC3 computations. Type: integer; Default: 10. VECS_PER_ROOT¶. Vectors stored per root. Type: integer; Default: 12. Expert¶. EXCITATION_RANGE¶. The depth into the occupied and valence spaces from which one-electron excitations are seeded into the Davidson guess to the CIS (the default of 2 includes all single excitations between HOMO-1, HOMO, LUMO, and LUMO+1). This CIS is in turn the Davidson guess to the EOM-CC. Expand to capture more exotic excited states in the EOM-CC calculation. Type: integer; Default: 2. WFN¶. Wavefunction type. Type: string; Possible Values: EOM_CCSD, EOM_CC2, EOM_CC3; Default: EOM_CCSD. table of contents. CCEOM; General; ABCD; CACHELEVEL; CACHETYPE; CC3_FOLLOW_ROOT; CC_NUM_THREADS; COLLAPSE_WITH_LAST; COLLAPSE_WITH_LAST_CC3; COMPLEX_TOLERANCE; EOM_GUESS; EOM_REFERENCE; E_CONVERGENCE; FULL_MATRIX; LOCAL; LOCAL_CUTOFF; LOCAL_DO_SINGLES; LOCAL_FILTER_SINGLES; LOCAL_METHOD; LOCAL_PRECONDITIONER; LOCAL_WEAKP; MAXITER; NEW_TRIPLES; NUM_AMPS_PRINT; OVERLAP_CHECK; PROP_ROOT; PROP_SYM; REFERENCE; RESTART_EOM_CC3; RHF_TRIPLETS; ROOTS_PER_IRREP; R_CONVERGENCE; SCHMIDT_ADD_RESIDUAL_TOLERANCE; SEMICANONICAL; SINGLES_PRINT; SS_E_CONVERGENCE; SS_R_CONVERGENCE; SS_SKIP_DIAG; SS_VECS_PER_ROOT; T3_WS_INCORE; VECS_CC3; VECS_PER_ROOT. Expert; EXCITATION_RANGE; WFN. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCEOM. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/autodir_options_c/module__cceom.html:7848,update,updated,7848,psi4manual/1.7.x/autodir_options_c/module__cceom.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/module__cceom.html,1,['update'],['updated']
Deployability,"onvergence, which is the default. Type: conv double; Default: 1.0e-18. DAMPING_PERCENTAGE (DCFT); DCFT — The amount (percentage) of damping to apply to the orbital update procedure: 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the previous iteration’s density being mixed into the current iteration) can help in cases where oscillatory convergence is observed. Type: double; Default: 0.0. DAMPING_PERCENTAGE (PSIMRCC); PSIMRCC — The amount (percentage) of damping to apply to the amplitude updates. 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the amplitudes from the previous iteration being mixed into the current iteration) can help in cases where oscillatory convergence is observed. Type: double; Default: 0.0. DAMPING_PERCENTAGE (SCF); SCF — The amount (percentage) of damping to apply to the early density updates. 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the previous iteration’s density being mixed into the current density) could help to solve problems with oscillatory convergence. Type: double; Default: 100.0. DCFT_GUESS (DCFT); DCFT (Expert) — Whether to read the orbitals from a previous computation, or to compute an MP2 guess. Type: string; Possible Values: CC, BCC, MP2; Default: MP2. DEBUG (CPHF); CPHF — The amount of debug information printed to the output file. Type: integer; Default: 0. DEBUG (GLOBALS); GLOBALS (Expert) — The amount of information to print to the output file. Type: integer; Default: 0. DELETE_AO (TRANSQT); TRANSQT — Do delete AO integral files?. Type: boolean; Default: true. DELETE_RESTR_DOCC (TRANSQT); TRANSQT — Do delete restricted doubly occupieds?. Type: boolean; Default: true. DELETE_TEI (TRANSQT2); TRANSQT2 — Boolean to delete the SO-basis two-electron integral file after the transformation. Type: boolean; Default: true. DEL",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/autodoc_glossary_options_c-1.html:21562,update,update,21562,psi4manual/4.0b3/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_glossary_options_c-1.html,4,['update'],['update']
Deployability,"onvergence, which is the default. Type: conv double; Default: 1.0e-18. DAMPING_PERCENTAGE (DCFT); DCFT — The amount (percentage) of damping to apply to the orbital update procedure: 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the previous iteration’s density being mixed into the current iteration) can help in cases where oscillatory convergence is observed. Type: double; Default: 0.0. DAMPING_PERCENTAGE (PSIMRCC); PSIMRCC — The amount (percentage) of damping to apply to the amplitude updates. 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the amplitudes from the previous iteration being mixed into the current iteration) can help in cases where oscillatory convergence is observed. Type: double; Default: 0.0. DAMPING_PERCENTAGE (SCF); SCF — The amount (percentage) of damping to apply to the early density updates. 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the previous iteration’s density being mixed into the current density) could help to solve problems with oscillatory convergence. Type: double; Default: 100.0. DEBUG (CPHF); CPHF — The amount of debug information printed to the output file. Type: integer; Default: 0. DEBUG (GLOBALS); GLOBALS (Expert) — The amount of information to print to the output file. Type: integer; Default: 0. DELETE_AO (TRANSQT); TRANSQT — Don’t ?. Type: boolean; Default: true. DELETE_RESTR_DOCC (TRANSQT); TRANSQT — Don’t ?. Type: boolean; Default: true. DELETE_TEI (TRANSQT2); TRANSQT2 — Boolean to delete the SO-basis two-electron integral file after the transformation. Type: boolean; Default: true. DELETE_TPDM (TRANSQT); TRANSQT — Don’t ?. Type: boolean; Default: true. DENOMINATOR_ALGORITHM (SAPT); SAPT — Denominator algorithm for PT methods. Laplace transformations are slightly more efficient. Type: string; Possible Values: LAPL",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/autodoc_glossary_options_c-1.html:16461,update,update,16461,psi4manual/4.0b2/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/autodoc_glossary_options_c-1.html,4,['update'],['update']
Deployability,"ookup process id. open(self: psi4.core.IO, unit: int, status: int) → None¶; Open unit. Status can be PSIO_OPEN_OLD (if existing file is to be opened) or PSIO_OPEN_NEW if new file should be open. open_check(self: psi4.core.IO, unit: int) → int¶; Return 1 if unit is open. rehash(self: psi4.core.IO, unit: int) → None¶; Sync up the object to the file on disk by closing and opening the file, if necessary. static set_default_namespace(ns: str) → None¶; Set the current namespace (for PREFIX.NAMESPACE.UNIT file numbering). set_pid(self: psi4.core.IO, pid: str) → None¶; Set process id. static shared_object() → psi4.core.IO¶; Return the global shared object. state(self: psi4.core.IO) → int¶; Return 1 if PSIO library is activated. tocclean(self: psi4.core.IO, unit: int, key: str) → None¶; Delete all TOC entries after the given key. If a blank key is given, the entire TOC will be wiped. tocentry_exists(self: psi4.core.IO, arg0: int, arg1: str) → bool¶; Checks the TOC to see if a particular keyword exists there or not. tocprint(self: psi4.core.IO, arg0: int) → None¶; Print the table of contents for the given unit. tocscan(self: psi4.core.IO, arg0: int, arg1: str) → psi4.core.psio_entry¶; Seek string in binary file. This export is only good for catching None, as returned success object not exported. tocwrite(self: psi4.core.IO, arg0: int) → None¶; Write the table of contents for passed file number. table of contents. IO; IO; IO.change_file_namespace(); IO.close(); IO.exists(); IO.get_default_namespace(); IO.getpid(); IO.open(); IO.open_check(); IO.rehash(); IO.set_default_namespace(); IO.set_pid(); IO.shared_object(); IO.state(); IO.tocclean(); IO.tocentry_exists(); IO.tocprint(); IO.tocscan(); IO.tocwrite(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. PSI4 API: Linking C++ and Python; IO. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/api/psi4.core.IO.html:3676,update,updated,3676,psi4manual/master/api/psi4.core.IO.html,https://psicode.org,https://psicode.org/psi4manual/master/api/psi4.core.IO.html,1,['update'],['updated']
Deployability,"oolean; Default: false. REG_PARAM¶. Regularization parameter. Type: double; Default: 0.4. RMS_MOGRAD_CONVERGENCE¶. Convergence criterion for RMS orbital gradient. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-6. R_CONVERGENCE¶. Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-5. SCS_TYPE¶. Type of the SCS method. Type: string; Possible Values: SCS, SCSN, SCSVDW, SCSMI; Default: SCS. SOS_TYPE¶. Type of the SOS method. Type: string; Possible Values: SOS, SOSPI; Default: SOS. TRIPLES_IABC_TYPE¶. The algorithm to handle (ia|bc) type integrals that used for (T) correction. Type: string; Possible Values: INCORE, AUTO, DIRECT, DISK; Default: DISK. WFN_TYPE¶. Type of the wavefunction. Type: string; Possible Values: DF-OMP2, DF-OMP3, DF-OLCCD, DF-OMP2.5, DFGRAD, DF-CCSD, DF-CCD, DF-CCSD(T), DF-CCSD(AT), QCHF; Default: DF-OMP2. Table Of Contents. DFOCC; General; CC_DIIS_MAX_VECS; CC_DIIS_MIN_VECS; CC_LAMBDA; CC_MAXITER; CHOLESKY; CHOLESKY_TOLERANCE; COMPUT_S2; CUTOFF; DO_DIIS; DO_LEVEL_SHIFT; DO_SCS; DO_SOS; E3_SCALE; EKT_IP; E_CONVERGENCE; HESS_TYPE; INTEGRAL_CUTOFF; LEVEL_SHIFT; LINEQ_SOLVER; MAX_MOGRAD_CONVERGENCE; MOLDEN_WRITE; MO_DIIS_NUM_VECS; MO_MAXITER; MO_STEP_MAX; MP2_AMP_TYPE; MP2_OS_SCALE; MP2_SOS_SCALE; MP2_SOS_SCALE2; MP2_SS_SCALE; NAT_ORBS; OCC_ORBS_PRINT; OEPROP; OO_SCALE; OPT_METHOD; ORB_OPT; ORB_RESP_SOLVER; ORTH_TYPE; PCG_BETA_TYPE; PCG_CONVERGENCE; PCG_MAXITER; PPL_TYPE; QCHF; READ_SCF_3INDEX; REGULARIZATION; REG_PARAM; RMS_MOGRAD_CONVERGENCE; R_CONVERGENCE; SCS_TYPE; SOS_TYPE; TRIPLES_IABC_TYPE; WFN_TYPE. Previous topic; OPDM_RELAX; Next topic; CC_DIIS_MAX_VECS. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Keywords by Module ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodir_options_c/module__dfocc-1.html:7506,update,updated,7506,psi4manual/1.0.0/autodir_options_c/module__dfocc-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodir_options_c/module__dfocc-1.html,2,['update'],['updated']
Deployability,"oolean; Default: false. RUN_CEPA¶. Is this a CEPA job? This parameter is used internally by the pythond driver. Changing its value won’t have any effect on the procedure. Type: boolean; Default: false. COMPUTE_TRIPLES¶. Do compute triples contribution?. Type: boolean; Default: true. COMPUTE_MP4_TRIPLES¶. Do compute MP4 triples contribution?. Type: boolean; Default: false. DFCC¶. Do use density fitting or cholesky decomposition in CC? This keyword is used internally by the driver. Changing its value will have no effect on the computation. Type: boolean; Default: false. CEPA_LEVEL¶. Which coupled-pair method is called? This parameter is used internally by the python driver. Changing its value won’t have any effect on the procedure. Type: string; Default: CEPA(0). Table Of Contents. FNOCC: Frozen natural orbitals for CCSD(T), QCISD(T), CEPA, and MP4; Frozen natural orbitals (FNO); QCISD(T), CCSD(T), MP4, and CEPA; Quadratic configuration interaction and coupled cluster; Many-body perturbation theory; Coupled electron pair approximation; Density-fitted coupled cluster; Gn theory; Supported methods; Basic FNOCC Keywords; BASIS; FREEZE_CORE; R_CONVERGENCE; E_CONVERGENCE; MAXITER; DIIS_MAX_VECS; NAT_ORBS; OCC_TOLERANCE; TRIPLES_LOW_MEMORY; CC_TIMINGS; DF_BASIS_CC; CHOLESKY_TOLERANCE; CEPA_NO_SINGLES; DIPMOM. Advanced FNOCC Keywords; SCS_MP2; MP2_SCALE_OS; MP2_SCALE_SS; SCS_CCSD; CC_SCALE_OS; CC_SCALE_SS; RUN_MP2; RUN_MP3; RUN_MP4; RUN_CCSD; RUN_CEPA; COMPUTE_TRIPLES; COMPUTE_MP4_TRIPLES; DFCC; CEPA_LEVEL. Previous topic; CC: Coupled Cluster Methods; Next topic; OCC: Orbital-Optimized Coupled-Cluster and Møller–Plesset Perturbation Theories. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Theoretical Methods: SCF to FCI ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/fnocc-1.html:16996,configurat,configuration,16996,psi4manual/1.0.0/fnocc-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/fnocc-1.html,4,"['configurat', 'update']","['configuration', 'updated']"
Deployability,"oolean; Default: true. LEVEL_SHIFT¶. Level shift to aid convergence. Type: double; Default: 0.0. MAXITER¶. Maximum number of iterations. Type: integer; Default: 100. MO_READ¶. Do read in from file the MOs from a previous computation?. Type: boolean; Default: true. REFERENCE¶. Reference wavefunction type. Type: string; Possible Values: RHF, ROHF, UHF, TWOCON, MCSCF, GENERAL; Default: RHF. SOCC¶. The number of singly occupied orbitals, per irrep. Type: array; Default: No Default. TURN_ON_ACTV¶. Type: integer; Default: 0. WFN_SYM¶. The symmetry of the SCF wavefunction. Type: string; Possible Values: A, AG, AU, AP, APP, A1, A2, B, BG, BU, B1, B2, B3, B1G, B2G, B3G, B1U, B2U, B3U, 0, 1, 2, 3, 4, 5, 6, 7, 8; Default: 1. Expert¶. ROTATE_MO_ANGLE¶. For orbital rotations after convergence, the angle (in degrees) by which to rotate. Type: integer; Default: 0. ROTATE_MO_IRREP¶. For orbital rotations after convergence, irrep (1-based, Cotton order) of the orbitals to rotate. Type: integer; Default: 1. ROTATE_MO_P¶. For orbital rotations after convergence, number of the first orbital (1-based) to rotate. Type: integer; Default: 1. ROTATE_MO_Q¶. For orbital rotations after convergence, number of the second orbital (1-based) to rotate. Type: integer; Default: 2. Table Of Contents. MCSCF; General; CANONICALIZE_ACTIVE_FAVG; CANONICALIZE_INACTIVE_FAVG; CI_DIIS; DIIS; DIIS_MAX_VECS; DOCC; D_CONVERGENCE; E_CONVERGENCE; FAVG; FAVG_START; FOLLOW_ROOT; FORCE_TWOCON; INTERNAL_ROTATIONS; LEVEL_SHIFT; MAXITER; MO_READ; REFERENCE; SOCC; TURN_ON_ACTV; WFN_SYM. Expert; ROTATE_MO_ANGLE; ROTATE_MO_IRREP; ROTATE_MO_P; ROTATE_MO_Q. Previous topic; WFN; Next topic; CANONICALIZE_ACTIVE_FAVG; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Appendices »; Keywords by Module ». © Copyright 2012, The Psi4 Project.; Last updated on Oct 16, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/autodir_options_c/module__mcscf-1.html:3697,update,updated,3697,psi4manual/4.0b3/autodir_options_c/module__mcscf-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodir_options_c/module__mcscf-1.html,2,['update'],['updated']
Deployability,"oordinate step to cartesian coordinates. Type: boolean; Default: false. FIXED_BEND¶. Specify angles between atoms to be fixed (eq. value specified). Type: string; Default: No Default. FIXED_DIHEDRAL¶. Specify dihedral angles between atoms to be fixed (eq. value specified). Type: string; Default: No Default. FIXED_DISTANCE¶. Specify distances between atoms to be fixed (eq. value specified). Type: string; Default: No Default. FROZEN_BEND¶. Specify angles between atoms to be frozen (unchanged). Type: string; Default: No Default. FROZEN_CARTESIAN¶. Specify atom and X, XY, XYZ, ... to be frozen (unchanged). Type: string; Default: No Default. FROZEN_DIHEDRAL¶. Specify dihedral angles between atoms to be frozen (unchanged). Type: string; Default: No Default. FROZEN_DISTANCE¶. Specify distances between atoms to be frozen (unchanged). Type: string; Default: No Default. GEOM_MAXITER¶. Maximum number of geometry optimization steps. Type: integer; Default: 50. H_UPDATE_DEN_TOL¶. Denominator check for hessian update. Type: conv double; Default: 1e-7. INTERFRAG_STEP_LIMIT¶. Maximum step size in bohr or radian along an interfragment coordinate. Type: double; Default: 0.5. INTRAFRAG_STEP_LIMIT¶. Initial maximum step size in bohr or radian along an internal coordinate. Type: double; Default: 0.5. INTRAFRAG_STEP_LIMIT_MAX¶. Upper bound for dynamic trust radius [au]. Type: double; Default: 1.0. INTRAFRAG_STEP_LIMIT_MIN¶. Lower bound for dynamic trust radius [au]. Type: double; Default: 0.001. IRC_DIRECTION¶. IRC mapping direction. Type: string; Possible Values: FORWARD, BACKWARD; Default: FORWARD. IRC_STEP_SIZE¶. IRC step size in bohr(amu). Type: double; Default: 0.2. IRC_STOP¶. Decide when to stop IRC calculations. Type: string; Possible Values: ASK, STOP, GO; Default: STOP. OPT_COORDINATES¶. Geometry optimization coordinates to use. REDUNDANT and INTERNAL are synonyms and the default. DELOCALIZED are the coordinates of Baker. NATURAL are the coordinates of Pulay. CARTESIAN uses only",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodir_options_c/module__optking-1.html:1621,update,update,1621,psi4manual/1.0.0/autodir_options_c/module__optking-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodir_options_c/module__optking-1.html,2,['update'],['update']
Deployability,"oordinate step to cartesian coordinates. Type: boolean; Default: false. FIXED_BEND¶. Specify angles between atoms to be fixed (eq. value specified). Type: string; Default: No Default. FIXED_DIHEDRAL¶. Specify dihedral angles between atoms to be fixed (eq. value specified). Type: string; Default: No Default. FIXED_DISTANCE¶. Specify distances between atoms to be fixed (eq. value specified). Type: string; Default: No Default. FROZEN_BEND¶. Specify angles between atoms to be frozen (unchanged). Type: string; Default: No Default. FROZEN_CARTESIAN¶. Specify atom and X, XY, XYZ, ... to be frozen (unchanged). Type: string; Default: No Default. FROZEN_DIHEDRAL¶. Specify dihedral angles between atoms to be frozen (unchanged). Type: string; Default: No Default. FROZEN_DISTANCE¶. Specify distances between atoms to be frozen (unchanged). Type: string; Default: No Default. GEOM_MAXITER¶. Maximum number of geometry optimization steps. Type: integer; Default: 50. H_UPDATE_DEN_TOL¶. Denominator check for hessian update. Type: conv double; Default: 1e-7. INTERFRAG_STEP_LIMIT¶. Maximum step size in bohr or radian along an interfragment coordinate. Type: double; Default: 0.5. INTRAFRAG_STEP_LIMIT¶. Initial maximum step size in bohr or radian along an internal coordinate. Type: double; Default: 0.5. INTRAFRAG_STEP_LIMIT_MAX¶. Upper bound for dynamic trust radius [au]. Type: double; Default: 1.0. INTRAFRAG_STEP_LIMIT_MIN¶. Lower bound for dynamic trust radius [au]. Type: double; Default: 0.001. IRC_DIRECTION¶. IRC mapping direction. Type: string; Possible Values: FORWARD, BACKWARD; Default: FORWARD. IRC_STEP_SIZE¶. IRC step size in bohr(amu)\(^{1/2}\). Type: double; Default: 0.2. IRC_STOP¶. Decide when to stop IRC calculations. Type: string; Possible Values: ASK, STOP, GO; Default: STOP. OPT_COORDINATES¶. Geometry optimization coordinates to use. REDUNDANT and INTERNAL are synonyms and the default. DELOCALIZED are the coordinates of Baker. NATURAL are the coordinates of Pulay. CARTESIAN",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/autodir_options_c/module__optking-1.html:1567,update,update,1567,psi4manual/1.1.0/autodir_options_c/module__optking-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodir_options_c/module__optking-1.html,2,['update'],['update']
Deployability,"op half of; the main CMakeLists.txt is a passable summary:. ################ Options: Overview and Not Otherwise Mentioned ###############. # <<< CMake build overview >>>; #; # >>> ls; # external/ COPYING psi4/ tests/ ...; # >>> cmake -H. -Bobjdir -DCMAKE_INSTALL_PREFIX=/path/to/install-psi4 ...; # ...; # -- Generating done; # -- Build files have been written to: /current/dir/objdir; # >>> cd objdir && make -j`getconf _NPROCESSORS_ONLN`; # >>> make install. # <<< Required build dependencies that Psi4 can't build itself >>>; #; # - CMake (e.g., `conda install cmake`); # - C++ and C compilers (C++11 compliant); # - BLAS/LAPACK (also runtime; e.g., `conda install mkl-devel`); # - Python (also runtime; interpreter and headers; e.g., `conda install python`); # - NumPy (also runtime; avoidable at buildtime if gau2grid pre-built; e.g., `conda install numpy`); # - deepdiff (runtime only; e.g., `conda install deepdiff -c conda-forge`); # - networkx (runtime only; e.g., `conda install networkx`); # - pint (runtime only; e.g., `conda install pint -c conda-forge`). # These three ""### Options ###"" sections contain useful CMake variables for build configuration. # <<< Compilers and flags >>>; #; # - CMAKE_C_COMPILER ""C compiler""; # - CMAKE_C_FLAGS ""Additional C flags""; # - CMAKE_CXX_COMPILER ""C++ compiler""; # - CMAKE_CXX_FLAGS ""Additional C++ flags""; # - CMAKE_Fortran_COMPILER ""Fortran compiler (required for some add-ons)""; # - CMAKE_Fortran_FLAGS ""Additional Fortran flags"". # <<< Detecting dependencies and add-ons >>>; #; # - PYTHON_EXECUTABLE ""Python interpreter to use (e.g., /path/to/bin/python2.7)""; # - PYTHON_LIBRARY ""Python library that goes with the interpreter (e.g., /path/to/lib/python2.7.so)""; # - PYTHON_INCLUDE_DIR ""Path to the python include files (e.g., /path/to/include/python2.7)""; # - SPHINX_ROOT ""Root directory for Sphinx: 'bin/sphinx-build' (or similar) should be in this dir.""; #; # For any ${AddOn} of: ambit, CheMPS2, dkh, libefp, erd, gau2grid, gdma, Libint, PCM",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/build_planning-1.html:10679,install,install,10679,psi4manual/1.3.2/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/build_planning-1.html,2,['install'],['install']
Deployability,"op half of; the main CMakeLists.txt is a passable summary:; project(psi4; LANGUAGES C CXX); set(psi4_URL ""http://www.psicode.org/""); set(psi4_EMAIL ""psi4aiqc+cmake@gmail.com""); set(psi4_LICENSE ""GNU Lesser General Public License, version 3 (LGPL-3.0)""); set(psi4_DESCRIPTION ""Open-Source Quantum Chemistry""). list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake). message(STATUS ""Building using CMake ${CMAKE_VERSION} Generator ${CMAKE_GENERATOR}""). ################ Options: Overview and Not Otherwise Mentioned ###############. # <<< CMake build overview >>>; #; # >>> ls; # external/ COPYING psi4/ tests/ ...; # >>> cmake -S. -Bobjdir -DCMAKE_INSTALL_PREFIX=/path/to/install-psi4 ...; # ...; # -- Generating done; # -- Build files have been written to: /current/dir/objdir; # >>> cmake --build objdir --target install -j`getconf _NPROCESSORS_ONLN`. # <<< Required build dependencies that Psi4 can't build itself >>>; #; # - CMake (e.g., `conda install cmake`); # - C++ and C compilers (C++17 compliant); # - BLAS/LAPACK (also runtime; e.g., `conda install mkl-devel`); # - Python (also runtime; interpreter and headers; e.g., `conda install python`); # - NumPy (also runtime; avoidable at buildtime if gau2grid pre-built; e.g., `conda install numpy`); # - networkx >=2.4 (runtime only; e.g., `conda install networkx`); # - pint >=0.10 (runtime only; e.g., `conda install pint -c conda-forge`); # - pydantic >=1.0 (runtime only; e.g., `conda install pydantic -c conda-forge`); # - msgpack-python (runtime only; e.g., `conda install msgpack-python`); # - Eigen (for Libint2; e.g., `conda install eigen`); # - Boost (header-only libs for Libint2; e.g., `conda install boost-cpp`); # - SciPy (runtime only; avoidable through keyword setting; e.g., `conda install scipy`); # - py-cpuinfo (runtime only; e.g., `conda install py-cpuinfo`); # - psutil (runtime only; e.g., `conda install psutil`). # These three ""### Options ###"" sections contain useful CMake variables for build configuration.",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/build_planning.html:15423,install,install,15423,psi4manual/1.8.x/build_planning.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/build_planning.html,1,['install'],['install']
Deployability,"op-level-psi4-dir}; Find-the-code Quiz; Binary Installer; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; Psi3 from SourceForge; How to update and rebuild Psi4. Configuring and Installing PSI4 via Binary¶. How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; How to get high angular momentum integrals from conda. Configuring, Building, and Installing PSI4 via Source¶. Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; How to see what build configuration options are available; How to choose the compilation directory, {objdir}; How to install elsewhere than /usr/local/psi4; How to configure code to use high angular momentum basis sets; How to see the actual compiling commands (or errors) with cmake; How to save configuration settings for a future compilation; How to configure a Psi4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “runtime library may be hidden” when building with Anaconda Python; How to configure BLAS/LAPACK for building Psi4; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC Dependencies and Extensions¶",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/build_faq-1.html:1038,install,install,1038,psi4manual/1.2.1/build_faq-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_faq-1.html,30,"['configurat', 'install']","['configuration', 'install']"
Deployability,"opening the PR), you’ll have to issue a comment @conda-forge-admin, please rerender for the; matrix slimming to take effect.; Possibly: remove any old patches that are now in the main codebase.; Possibly: add in or remove any dependency or ecosystem packages.; Possibly: for any relevant addition, make sure -D CMAKE_INSIST_FIND_PACKAGE_<project>=ON or; -D ENABLE_<project>=ON is set in build.sh and bld.bat.; Possibly: add or release version constraints or architecture constraints (e.g., [not win]) on packages. Submit the PR and rerender (cmd above). Monitor the CI.; When all CI lanes are passing and the tag is final on the maintenance branch, rerender (may be; no-op) and merge the PR.; After all the packages are built on main and show up at https://anaconda.org/conda-forge/psi4/files; with a couple downloads, this means they’re been mirrored and are generally installable. Announce; on slack general channel. Do final pass before release tag¶. Check that psi4/external/ repos and commits have been updated to match conda recipes sources. Also check versions with conda_build_config.yaml; Check psi4/doc/sphinxman/source/introduction.rst for any compiler and Python minimum requirements to edit. Tag (pre)release¶. Thorough version bump directions at master http://psicode.org/psi4manual/master/manage_git.html#how-to-bump-a-version; Below is tl;dr; # be on clean master up-to-date with upstream in both commits and tags; # * mind which version strings get ""v"" and which don't; # * if not fork, replace ""upstream"" with ""origin"". >>> vi psi4/metadata.py; >>> git diff; diff --git a/psi4/metadata.py b/psi4/metadata.py; ...; -__version__ = '1.3rc1'; -__version_long = '1.3rc1+5a7522a'; -__version_upcoming_annotated_v_tag = '1.3rc2'; +__version__ = '1.3rc2'; +__version_long = '1.3rc2+zzzzzzz'; +__version_upcoming_annotated_v_tag = '1.3rc3'. >>> git add psi4/metadata.py; >>> git commit -m ""v1.3rc2""; [master bc8d7f5] v1.3rc2. >>> git log --oneline | head -1; bc8d7f5 v1.3rc2; >>> git tag -a ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/manage_release.html:8978,update,updated,8978,psi4manual/1.9.x/manage_release.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/manage_release.html,2,['update'],['updated']
Deployability,"oposed change or practice.; Anyone can comment by adding sections to the bottom of the reST file.; Alternatively, e-mail discussions can go out and the (possibly edited); results be pasted into the bottom of the reST file once the furor dies; down.; Comments can be simple statements of agreement (useful for gauging; consensus), notation of possible problems, proposed re-writes of the; proposal, etc. Only the original author or his designate should change; the main body of the PsiPEP (to maintain a history).; Once there’s agreement, file can be stamped final and be placed into; effect. (Yes, this is very vague.). Roles of a PsiPEP Include¶. Best practices or re-vamped best practices; Practices can be easily linked- or referred-to by number and can be; tagged as obsolete by a single label change months later. Request/present viewpoint on organization; Draw attention to organization needed in code outside one’s area of; expertise. Request interface for some structure (e.g., gradients) or; viewpoints on how that interface will behave to ensure compatibility.; Offer philosophy on how processes/definitions should be. Fair Warning: Proposal to change things up; Announce plans to re-organize code structure or how something is; handled. List goals (may be conflicting) and how proposed scheme best; satisfies them. PsiPEP allows discussion before roll-out in case; proposal has deleterious side-effects. The contrast between a PsiPEP and a ticket is that for the latter, there’s; no question of whether the task is to be done as described. Comments¶; 04-Jul-2012, LAB. table of contents. PEP1: Proposing PsiPEP for PSI4; Path of a PsiPEP; Roles of a PsiPEP Include; Comments. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Contributions: Intro to Programming in PSI4; PsiPEP: Plans and Practices to Organize PSI4. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 July 2018 04:21AM.; Created using Sphinx 1.7.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/pep0001-1.html:3216,update,updated,3216,psi4manual/1.2.1/pep0001-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/pep0001-1.html,2,['update'],['updated']
Deployability,"option(ENABLE_Libint1t ""Enables Libint1 in special _t variety"" OFF); # These options are relevant to pasture, expert only; option(ENABLE_ccsort ""Enables ccsort plugin installed from psi4pasture"" OFF); option(ENABLE_transqt2 ""Enables transqt2 plugin installed from psi4pasture"" OFF); option(psi4_SKIP_ENABLE_Fortran ""Suppress enabling Fortran language even when Fortran addons enabled. Use when only linking pre-built, not compiling addon code."" OFF). # Append modules added to pasture as needed; if(ENABLE_ccsort OR ENABLE_transqt2); set(ENABLE_pasture ON); message(STATUS ""Enabling pasture plugins""); endif(). if(ENABLE_gdma OR ENABLE_dkh OR ENABLE_erd OR ENABLE_PCMSolver); if(psi4_SKIP_ENABLE_Fortran); message(STATUS ""NOT Enabling Fortran""); else(). Note that external projects will have their own sets of build; configuration options. Only the most-common user knobs of those are; mentioned above. How to install elsewhere than /usr/local/psi4¶; The installation directory is the filesystem location for the executable; script, the Python module, basis set data, and other administrative files.; Unless using the conda package, which is relocatable, the installation; directory must be specified with CMake variable CMAKE_INSTALL_PREFIX; before compiling. Build with Specific Install Directory; cmake -DCMAKE_INSTALL_PREFIX=/nfs/common/software/psi4. Relevant CMake Options:; CMAKE_INSTALL_PREFIX=PATH # Location to which Psi4 and internally built; # add-ons are installed (default: /usr/local/psi4). Note; It’s not guaranteed, but if, in a pinch, you need to install a; built Psi4 to a location not configured by CMAKE_INSTALL_PREFIX,; recursively copy the folders under objdir/stage/prefix to; the desired location, chown them if needed, edit the shebang in; bin/psi4 if needed, and recursively delete all the “.pyc” files. It; may just run. How to compile for debugging¶; Flags to turn optimizations off and debugging on can be set across the; project and plugins with CMake variable CMAKE_BUI",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/build_planning.html:22828,install,install,22828,psi4manual/1.9.x/build_planning.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/build_planning.html,2,['install'],"['install', 'installation']"
Deployability,"option) any later version.; #; # This program is distributed in the hope that it will be useful,; # but WITHOUT ANY WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; # GNU General Public License for more details.; #; # You should have received a copy of the GNU General Public License along; # with this program; if not, write to the Free Software Foundation, Inc.,; # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; #; #@END LICENSE; #. """"""Module with functions that call upon those in modules; :py:mod:`proc`, :py:mod:`driver`, and :py:mod:`wrappers`. Place in this file quickly defined procedures such as; - aliases for complex methods; - simple modifications to existing methods. """"""; import re; import os; import math; import warnings; import psi4; import p4util; from driver import *; from wrappers import *; #from extend_Molecule import *; from molutil import *. # Python procedures like these can be run directly from the input file or integrated; # with the energy(), etc. routines by means of lines like those at the end of this file. [docs]def sherrill_gold_standard(name='mp2', **kwargs):; r""""""Function to call the quantum chemical method known as 'Gold Standard'; in the Sherrill group. Uses :py:func:`~wrappers.complete_basis_set` to evaluate; the following expression. Two-point extrapolation of the correlation energy; performed according to :py:func:`~wrappers.corl_xtpl_helgaker_2`. .. math:: E_{total}^{\text{Au\_std}} = E_{total,\; \text{SCF}}^{\text{aug-cc-pVQZ}} \; + E_{corl,\; \text{MP2}}^{\text{aug-cc-pV[TQ]Z}} \; + \delta_{\text{MP2}}^{\text{CCSD(T)}}\big\vert_{\text{aug-cc-pVTZ}}. >>> # [1] single-point energy by this composite method; >>> energy('sherrill_gold_standard'). >>> # [2] finite-difference geometry optimization; >>> optimize('sherrill_gold_standard'). >>> # [3] finite-difference geometry optimization, overwriting some pre-defined sherrill_gold_standard options; >>> optimize('sher",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/_modules/aliases.html:1465,integrat,integrated,1465,psi4manual/4.0b5/_modules/aliases.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/_modules/aliases.html,1,['integrat'],['integrated']
Deployability,"opy_file_to_scratch('/tmp/temp', 'psi', '', 32, True):; -mv /tmp/temp /scratch/parrish/psi.12345.32. """""". pid = str(os.getpid()); scratch = PsiMod.IOManager.shared_object().get_file_path(int(unit)). cp = '/bin/cp';; if move:; cp = '/bin/mv';. unit = str(unit). target = ''; target += prefix; target += '.'; target += pid; if len(namespace):; target += '.'; target += namespace; target += '.'; target += unit. command = ('%s %s %s/%s' % (cp, filename, scratch, target)). os.system(command); #print command. [docs]def copy_file_from_scratch(filename, prefix, namespace, unit, move = False):. """"""Function to move file out of scratch with correct naming; convention. Arguments:. @arg filename full path to target file; @arg prefix computation prefix, usually 'psi'; @arg namespace context namespace, usually molecule name; @arg unit unit number, e.g. 32; @arg move copy or move? (default copy). Example:. Assume PID is 12345 and SCRATCH is /scratch/parrish/. copy_file_to_scratch('temp', 'psi', 'h2o', 32):; -cp /scratch/parrish/psi.12345.h2o.32 .temp; copy_file_to_scratch('/tmp/temp', 'psi', 'h2o', 32):; -cp /scratch/parrish/psi.12345.h2o.32 /tmp/temp; copy_file_to_scratch('/tmp/temp', 'psi', '', 32):; -cp /scratch/parrish/psi.12345.32 /tmp/temp; copy_file_to_scratch('/tmp/temp', 'psi', '', 32, True):; -mv /scratch/parrish/psi.12345.32 /tmp/temp. """""". pid = str(os.getpid()); scratch = PsiMod.IOManager.shared_object().get_file_path(int(unit)). cp = '/bin/cp';; if move:; cp = '/bin/mv';. unit = str(unit). target = ''; target += prefix; target += '.'; target += pid; if len(namespace):; target += '.'; target += namespace; target += '.'; target += unit. command = ('%s %s/%s %s' % (cp, scratch, target, filename)). os.system(command); #print command. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». © Copyright 2013, The Psi4 Project.; Last updated on Mar 20, 2014.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/_modules/util.html:8597,update,updated,8597,psi4manual/4.0b4/_modules/util.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/util.html,1,['update'],['updated']
Deployability,"or DF-MP2. Instead, it should be used for; large calculations that cannot reasonably be performed with DF-MP2. The crossover; point between DF-MP2 and DLPNO-MP2 depends on details of both the calculation and; the hardware, but can be as low as 2,000 basis functions.; The accuracy of DLPNO-MP2 (relative to DF-MP2) can be controlled with the; PNO_CONVERGENCE keyword according to recommendation by Liakos et al.; [Liakos:2015:1525]. For non-covalent interactions TIGHT is highly recommended.; The greater the spatial sparsity of a molecular system, the smaller the pair; domains and consequently the faster the calculation. DLPNO-MP2 is much faster; for linear alkanes than for globular proteins, all else constant.; Similar to molecular sparsity, the sparsity of the orbital basis affects runtime.; Diffuse functions increase the size of the pair domains and therefore lead to; longer calculations.; All aspects of DLPNO-MP2 run in core; no disk is required. As a result, the; code exhibits very good intra-node parallelism, and benefits from many threads.; The amount of memory needed scales linearly with system size.; DLPNO-MP2 is not symmetry aware. This should not be a concern for large systems in; which symmetry is seldom present.; As with DF-MP2, freezing core orbitals (by setting FREEZE_CORE; to True) is recommended for efficiency. In DLPNO methods, this is also; recommended for accuracy, since core excitations are known to exhibit; greater errors relative to valence excitations.; At the moment, the DLPNO-MP2 code is only compatible with with RHF references. table of contents. DLPNO-MP2: Domain-Based Local Pair Natural Orbital MP2; Introduction; Theory; Recommendations. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Theoretical Methods: SCF to FCI; DLPNO-MP2: Domain-Based Local Pair Natural Orbital MP2. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/dlpnomp2-1.html:8575,update,updated,8575,psi4manual/1.5.0/dlpnomp2-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/dlpnomp2-1.html,2,['update'],['updated']
Deployability,"or Debug)"" [default: release]. How to choose the compilation directory, {objdir}¶. there is no default; common choices are objdir or build under top-level-psi4-dir. cd {top-level-psi4-dir} && cmake -S. -Bobjdir; cd {top-level-psi4-dir} && cmake -S. -Bbuild. in-source builds (*.cc and *.o in same directory) are disallowed; builds outside top-level-psi4-dir are permitted. How to save configuration settings for a future compilation¶; Create a file like do-configure with the cmake command and options; on one line.; >>> cd {top-level-psi4-dir}; >>> cat do-configure; cmake -S. -B{objdir} \; -DCMAKE_INSTALL_PATH=""/Users/me/psi4"" \; -DCMAKE_PREFIX_PATH=""/Users/me/externals/install-libint"" \; -DMAX_AM_ERI=6 \; -DENABLE_gdma=ON \; -DBUILD_SHARED_LIBS=ON; >>> chmod u+x do-configure; >>> ./do-configure. What is the directory layout of the installed or staged Psi4¶; After compilation (cd objdir && make), a directory structure like the; below will exist at objdir/stage. This may be tested and used; just like a full installation.; After installation (cd objdir && make && make install), a directory; structure like the below will exist at /prefix. This is a full; installation.; /; bin/ (executables for psi4 + any external proj); bin/psi4 (psi4 executable, actually just a py script); include/ (installed headers for psi4 + any external proj); include/psi4/ (header files for #include-ing); include/psi4/psi4-dec.h (primary psi4 header); include/psi4/masses.h (a project-wide psi4 header); include/psi4/libmints/ (psi4 library headers); include/psi4/libfock/ (ditto); share/ (read-only arch-indep files for psi4 + any external proj); share/cmake/psi4/ (files for detecting installed targets); share/cmake/psi4/psi4Config.cmake (psi4 build/install info); share/cmake/psi4/psi4ConfigVersion.cmake (psi4 cmake version info); share/doc/psi4/html/ (sphinx html documentation); share/psi4/ (text files needed by psi4); share/psi4/basis (basis sets); share/psi4/plugins (plugin template files); share/psi4",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/build_planning-1.html:23774,install,installation,23774,psi4manual/1.4.0/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/build_planning-1.html,9,['install'],['installation']
Deployability,"or H2O. linK-2; RKS Linear Exchange Algorithm test for benzene. opt15; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. freq-isotope1; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures and pressures but not for different isotopologs. tdscf-1; td-uhf test on triplet states of methylene (rpa). dct6; DCT calculation for the triplet O2 using DC-06 and DC-12. Only two-step algorithm is tested. sapt8; SAPT0(ROHF) open-shell computation of CN - Ne interaction energy First with jun-cc-pVDZ and density fitted integrals with ROHF Then with cc-pVDZ and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with ROHF. fnocc4; Test FNO-DF-CCSD(T) energy. cdremp-1; Cholesky decomposed REMP/cc-pVDZ energies for the CO2 molecule. opt13; B3LYP cc-pVDZ geometry optimzation of phenylacetylene, starting from not quite linear structure updated reference due to new BraggSlater radii. olccd2; OLCCD cc-pVDZ energy with B3LYP initial guess for the NO radical. scf-uhf-grad-nobeta; UHF gradient for a one-electron system (no beta electrons). dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. pywrap-align-chiral; testing aligner on enantiomers based on Table 1 of 10.1021/ci100219f aka J Chem Inf Model 2010 50(12) 2129-2140. dft-grad-disk; A range-seperated gradient for SO2 to test disk algorithms by explicitly setting low memory. cc5; RHF CCSD(T) cc-pVDZ frozen-core energy of C4NH4 Anion. cc35; CC3(ROHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. scf-ecp2; Water-Argon complex with ECP present; check of RHF Hessian. cbs-xtpl-gradient; Various gradients for a strained helium dimer and water molecule. scf-response1; Compute the dipole, quadrupole, and traceless quadrupoles for water. dfomp3-grad2; DF-OM",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/autodoc_testsuite_corepsi4.html:31969,update,updated,31969,psi4manual/1.8.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodoc_testsuite_corepsi4.html,2,['update'],['updated']
Deployability,"or IUPAC STP. Type: double; Default: 298.15. T2_COUPLED (CCENERGY); CCENERGY —. Type: boolean; Default: false. T3_WS_INCORE (CCENERGY); CCENERGY — Do build W intermediates required for cc3 in core memory?. Type: boolean; Default: false. T3_WS_INCORE (CCEOM); CCEOM — Do build W intermediates required for eom_cc3 in core memory?. Type: boolean; Default: false. T_AMPS (CCHBAR); CCHBAR — Do compute the T amplitude equation matrix elements?. Type: boolean; Default: false. TDM (DETCI); DETCI — Do compute the transition density? Note: only transition densities between roots of the same symmetry will be evaluated. DETCI does not compute states of different irreps within the same computation; to do this, lower the symmetry of the computation. Type: boolean; Default: false. TEST_B (OPTKING); OPTKING — Do test B matrix?. Type: boolean; Default: false. TEST_DERIVATIVE_B (OPTKING); OPTKING — Do test derivative B matrix?. Type: boolean; Default: false. THETA_POINTS (SCF); SCF — Number of colatitude grid points for spherical potential integration. Type: integer; Default: 360. THICKNESS (SCF); SCF — Thickness (bohr) of a hard-sphere external potential. Type: double; Default: 20.0. THREE_PARTICLE (DCFT); DCFT — Whether to compute three-particle energy correction or not. Type: string; Possible Values: NONE, PERTURBATIVE; Default: NONE. TIKHONOW_MAX (PSIMRCC); PSIMRCC — The cycle after which Tikhonow regularization is stopped. Set to zero to allow regularization in all iterations. Type: integer; Default: 5. TIKHONOW_OMEGA (DCFT); DCFT (Expert) — The shift applied to the denominator in the density cumulant update iterations. Type: double; Default: 0.0. TIKHONOW_OMEGA (PSIMRCC); PSIMRCC — The shift to apply to the denominators, {it c.f.} Taube and Bartlett, JCP, 130, 144112 (2009). Type: double; Default: 0.0. TIKHONOW_TRIPLES (PSIMRCC); PSIMRCC (Expert) — Do use Tikhonow regularization in (T) computations?. Type: boolean; Default: false. TILE_SZ (SCF); SCF (Expert) — The tile size for t",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/autodoc_glossary_options_c-1.html:215867,integrat,integration,215867,psi4manual/1.3.2/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/autodoc_glossary_options_c-1.html,2,['integrat'],['integration']
Deployability,"or None (meaning; an answer is required of the user).; The return value is one of True or False. File for accessory procedures in the chem module.; Credit for the libmints vector3 class to Justin M. Turney and; incremental improvements by other psi4 developers. add(v, u)[source]¶; Compute sum of vectors v and u. cross(v, u)[source]¶; Compute cross product of length 3 vectors v and u. determinant(mat)[source]¶; Given 3x3 matrix mat, compute the determinat. diagonalize3x3symmat(A)[source]¶; Given an real symmetric 3x3 matrix A, compute the eigenvalues. distance(v, u)[source]¶; Compute the distance between points defined by vectors v and u. dot(v, u)[source]¶; Compute dot product of vectors v and u. mscale(matrix, d)[source]¶; Return matrix scaled by scalar d. mult(matrix1, matrix2)[source]¶; Matrix multiplication. norm(v)[source]¶; Compute the magnitude of vector v. normalize(v)[source]¶; Compute normalized vector v. perp_unit(u, v)[source]¶; Compute unit vector perpendicular to length 3 vectors u and v. rotate(v, theta, axis)[source]¶; Rotate length 3 vector v about axis by theta radians. scale(v, d)[source]¶; Compute by-element scale by d of vector v. show(matrix)[source]¶; Print out matrix. sub(v, u)[source]¶; Compute difference of vectors v - u. transpose(matrix)[source]¶; Return matrix transpose. zero(m, n)[source]¶; Create zero matrix. Table Of Contents. Python Driver; basislist; input; pubchem; psiexceptions; frac; molutil; proc; dashparam; procutil; driver; optproc; physconst; wrappers; qmmm; basislistother; diatomic; functional; text; util; basislistdunning; aliases; qcdb. Previous topic; LibOptions: globals, locals, has_changed and all that; Next topic; PsiMod: Linking C++ and Python; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » . © Copyright 2012, The Psi4 Project.; Last updated on Nov 02, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/autodoc_driver-1.html:63987,update,updated,63987,psi4manual/4.0b3/autodoc_driver-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_driver-1.html,2,['update'],['updated']
Deployability,"or building Psi4¶; Role and Dependencies. Role — In PSI4, simint is a library that provides alternate; integrals.; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) simint; Upstream Dependencies — simint \(\Leftarrow\) None. CMake Variables. ENABLE_simint — CMake variable toggling whether PSI4 builds with simint; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For simint, set to an installation directory containing include/simint/simint.h; simint_DIR — CMake variable to specify where pre-built simint can be found. Set to installation directory containing share/cmake/simint/simintConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_simint — CMake variable to force internal build of simint instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_simint — CMake variable to force detecting pre-built simint and not falling back on internal build; SIMINT_VECTOR — CMake variable for simint vectorization (i.e., scalar sse avx avxfma micavx512). Default is avx, not detected, so sse may be required for older chipsets. See http://www.bennyp.org/research/simint/README.txt for details. Examples. Build bundled. >>> cmake -DENABLE_simint=ON. Build without simint. >>> cmake. Link against pre-built. >>> cmake -DENABLE_simint=ON -DCMAKE_PREFIX_PATH=/path/to/simint/root. >>> cmake -DENABLE_simint=ON -Dsimint_DIR=/path/to/simint/configdir. Build bundled despite pre-built being detectable. >>> cmake -DENABLE_simint=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/simint/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_simint=ON. table of contents. Interface to SIMINT by B. Pritchard; Installation; How to configure simint for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to SIMINT by B. Pritchard. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/simint-1.html:3652,update,updated,3652,psi4manual/1.4.0/simint-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/simint-1.html,2,['update'],['updated']
Deployability,"or building Psi4¶; Role and Dependencies. Role — In PSI4, simint is a library that provides alternate; integrals.; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) simint; Upstream Dependencies — simint \(\Leftarrow\) None. CMake Variables. ENABLE_simint — CMake variable toggling whether PSI4 builds with simint; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For simint, set to an installation directory containing include/simint/simint.h; simint_DIR — CMake variable to specify where pre-built simint can be found. Set to installation directory containing share/cmake/simint/simintConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_simint — CMake variable to force internal build of simint instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_simint — CMake variable to force detecting pre-built simint and not falling back on internal build; SIMINT_VECTOR — CMake variable for simint vectorization (i.e., scalar sse avx avxfma micavx512). Default is avx, not detected, so sse may be required for older chipsets. See http://www.bennyp.org/research/simint/README.txt for details. Examples. Build bundled. >>> cmake -DENABLE_simint=ON. Build without simint. >>> cmake. Link against pre-built. >>> cmake -DENABLE_simint=ON -DCMAKE_PREFIX_PATH=/path/to/simint/root. >>> cmake -DENABLE_simint=ON -Dsimint_DIR=/path/to/simint/configdir. Build bundled despite pre-built being detectable. >>> cmake -DENABLE_simint=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/simint/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_simint=ON. table of contents. Interface to SIMINT by B. Pritchard; Installation; How to configure simint for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to SIMINT by B. Pritchard. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/simint-1.html:3652,update,updated,3652,psi4manual/1.5.0/simint-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/simint-1.html,2,['update'],['updated']
Deployability,"or csh/tcsh.; >>> conda create -n p4env psi4; >>> conda activate p4env; # check; >>> which psi4; /path/to/miniconda/envs/p4env/bin/psi4. Configure environment. Preceding steps have placed conda and psi4 in your PATH, either permanently through rc-files or temporarily in this terminal session. You can keep or undo these changes. For general psi4 use, you must enable the psi4 executable to be found through any of:. prepending to PATH in shell, ~/.bashrc, ~/.tcshrc, or PBS cmd file; activating the conda environment (p4env above) in shell, ~/.bashrc, or PBS cmd file; supplying full path to executable (shell or PBS cmd file). Similarly, the scratch directory (see Scratch Files) must be specified through:. defining PSI_SCRATCH in shell, ~/.bashrc, ~/.tcshrc, or PBS cmd file. Useful Commands¶. Initially install PSI4 stable release. # equivalent; >>> conda install psi4 -c psi4; >>> conda install psi4 --channel psi4. Initially install PSI4 stable release with non-current python. >>> conda install psi4 python=3.8 -c psi4. Update to latest PSI4 stable release. >>> conda update psi4 -c psi4. Initially install stable release into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=1.4 -c psi4. Uninstall PSI4 from current environment. >>> conda remove psi4. Initially install PSI4 nightly build. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4 --channel psi4/label/dev. Initially install PSI4 nightly build with non-current python. >>> conda install psi4 python=3.8 -c psi4/label/dev. Update to latest PSI4 nightly build. >>> conda update psi4 -c psi4/label/dev. Initially install nightly build into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4/label/dev; >>> co",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/conda-1.html:16836,install,install,16836,psi4manual/1.4.0/conda-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html,9,['install'],['install']
Deployability,"or desired configuration options for cmake,; hereafter [your configuration options]. How to see what build configuration options are available; Planning: how to configure Psi4 and invoke CMake. 3. Configure. Run CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates objdir ready for compilation.; >>> cmake -S. -B{objdir} -DCMAKE_INSTALL_PREFIX={prefix} [your configuration options]. 4. Compile. Compile the code (optional -j triggers parallel compilation). >>> cd {objdir}; >>> cmake --build . -j`getconf _NPROCESSORS_ONLN`. 5. Test. Optionally, use CTest and Pytest to test the build. How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation. >>> ctest -j`getconf _NPROCESSORS_ONLN`. >>> make pytest. 6. Install. If tests pass, install the code.; >>> cmake --install . 7. Configure Runtime. To run PSI4 after installation, you need to configure a few variables:. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation. What are the tools and dependencies strictly required for building Psi4¶; The core PSI4 build requires the software below. Note that; practically everything (including Python, CMake, NumPy, BLAS/LAPACK,; Libint, and even C++ compilers on Linux and Mac) can be; satisfied through conda. The links below give examples of how to configure; that software for PSI4 and any notes and warnings pertaining to it. C++ and C Compilers (C++17 compliant); Optimized BLAS and LAPACK libraries (preferably NOT one supplied by a standard; Linux distribution); Python interpreter and headers (3.8+) https://www.python.org/; CMake (3.15+) https://cmake.org/download/; NumPy (needed at runtime and buildtime) https://numpy.org/; System utilities: GNU make and GNU install or Ninja, POSIX threads (Pthreads) library. The following are also required for PSI4, but if not detected, t",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/build_planning.html:4218,install,installation,4218,psi4manual/1.8.x/build_planning.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/build_planning.html,1,['install'],['installation']
Deployability,"or desired configuration options for cmake,; hereafter [your configuration options]. How to see what build configuration options are available; Planning: how to configure Psi4 and invoke CMake. 3. Configure. Run CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates objdir ready for compilation.; >>> cmake -S. -B{objdir} -DCMAKE_INSTALL_PREFIX={prefix} [your configuration options]. 4. Compile. Compile the code (optional -j triggers parallel compilation). >>> cd {objdir}; >>> cmake --build . -j`getconf _NPROCESSORS_ONLN`. 5. Test. Optionally, use CTest and Pytest to test the build. How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation. >>> ctest -j`getconf _NPROCESSORS_ONLN`. >>> make pytest. 6. Install. If tests pass, install the code.; >>> cmake --install . 7. Configure Runtime. To run PSI4 after installation, you need to configure a few variables:. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation. What are the tools and dependencies strictly required for building Psi4¶; The core PSI4 build requires the software below. Note that; practically everything (including Python, CMake, NumPy, BLAS/LAPACK,; Libint, and even C++ compilers on Linux and Mac) can be; satisfied through conda. The links below give examples of how to configure; that software for PSI4 and any notes and warnings pertaining to it.; See psi4/codedeps.yaml for a structured listing and history of dependencies. C++ and C Compilers (C++17 compliant); Optimized BLAS and LAPACK libraries (preferably NOT one supplied by a standard; Linux distribution); Python interpreter and headers (3.8+) https://www.python.org/; CMake (3.15+) https://cmake.org/download/; NumPy (needed at runtime and buildtime) https://numpy.org/; System utilities: GNU make and GNU install or Ninja, POSIX threads (Pthre",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/build_planning.html:4310,install,installation,4310,psi4manual/1.9.x/build_planning.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/build_planning.html,1,['install'],['installation']
Deployability,"or desired configuration options for cmake,; hereafter [your configuration options]. How to see what build configuration options are available; Planning: how to configure Psi4 and invoke CMake. 3. Configure. Run CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates objdir ready for compilation.; >>> cmake -S. -B{objdir} -DCMAKE_INSTALL_PREFIX={prefix} [your configuration options]. 4. Compile. Compile the code (optional -j triggers parallel compilation). >>> cd {objdir}; >>> cmake --build . -j`getconf _NPROCESSORS_ONLN`. 5. Test. Optionally, use CTest and Pytest to test the build. How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation. >>> ctest -j`getconf _NPROCESSORS_ONLN`. >>> make pytest. 6. Install. If tests pass, install the code.; >>> cmake --install . 7. Configure Runtime. To run PSI4 after installation, you need to configure a few variables:. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation. What are the tools and dependencies strictly required for building Psi4¶; The core PSI4 build requires the software below. Note that; practically everything (including Python, CMake, NumPy, BLAS/LAPACK,; Libint, and even C++ compilers on Linux and Mac) can be; satisfied through conda. The links below give examples of how to configure; that software for PSI4 and any notes and warnings pertaining to it.; See psi4/codedeps.yaml for a structured listing and history of dependencies. C++ and C Compilers (C++20 compliant); Optimized BLAS and LAPACK libraries (preferably NOT one supplied by a standard; Linux distribution); Python interpreter and headers (3.8+) https://www.python.org/; CMake (3.15+) https://cmake.org/download/; NumPy (needed at runtime and buildtime) https://numpy.org/; System utilities: GNU make and GNU install or Ninja, POSIX threads (Pthre",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/build_planning.html:4317,install,installation,4317,psi4manual/master/build_planning.html,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html,1,['install'],['installation']
Deployability,"or in the density cumulant updates, as well as the solution of the density cumulant and orbital response equations. In the orbital updates controls the RMS of the SCF error vector. Type: conv double; Default: 1e-10. R_CONVERGENCE (DETCI); DETCI — Convergence criterion for CI residual vector in the Davidson algorithm (RMS error). The default is 1e-4 for energies and 1e-7 for gradients. Type: conv double; Default: 1e-4. R_CONVERGENCE (FNOCC); FNOCC — Convergence for the CC amplitudes. Note that convergence is met only when E_CONVERGENCE and R_CONVERGENCE are satisfied. Type: conv double; Default: 1.0e-7. R_CONVERGENCE (LMP2); LMP2 — Convergence criterion for T2 amplitudes (RMS change). Type: conv double; Default: 1e-5. R_CONVERGENCE (OCC); OCC — Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-5. R_CONVERGENCE (PSIMRCC); PSIMRCC — Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-9. R_POINTS (SCF); SCF — Number of radial grid points for sphereical potential integration. Type: integer; Default: 100. RADIUS (SCF); SCF — Radius (bohr) of a hard-sphere external potential. Type: double; Default: 10.0. RAS1 (DETCI); DETCI (Expert) — An array giving the number of orbitals per irrep for RAS1. Type: array; Default: No Default. RAS1 (TRANSQT); TRANSQT (Expert) — An array giving the number of orbitals per irrep for RAS1. Type: array; Default: No Default. RAS2 (DETCI); DETCI (Expert) — An array giving the number of orbitals per irrep for RAS2. Type: array; Default: No Default. RAS2 (TRANSQT); TRANSQT (Expert) — An array giving the number of orbitals per irrep for RAS2. Type: array; Default: No Default. RAS3 (DETCI); DETCI (Expert) — An array giving the number of orbitals per irrep for RAS3. Type: array; Default: No Default. RAS3 (TRANSQT); TRANSQT (Expert) — An array giving the number of orbitals per irrep for RAS3. Type: array; Default: No Default. RAS34_MAX (DETCI); DETCI — maximum number of electrons in RAS III + IV",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/autodoc_glossary_options_c-1.html:104676,integrat,integration,104676,psi4manual/4.0b4/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_glossary_options_c-1.html,2,['integrat'],['integration']
Deployability,"or iterative triples excitations?. Type: boolean; Default: false. USE_SPIN_SYM¶. Do use symmetry to map equivalent determinants onto each other, for efficiency?. Type: boolean; Default: true. WFN_SYM¶. The symmetry of the target wavefunction, specified either by Schönflies symbol, or irrep number (in Cotton ordering). Type: string; Possible Values: A, AG, AU, AP, APP, A1, A2, B, BG, BU, B1, B2, B3, B1G, B2G, B3G, B1U, B2U, B3U, 0, 1, 2, 3, 4, 5, 6, 7, 8; Default: 1. ZERO_INTERNAL_AMPS¶. Do zero the internal amplitudes, i.e., those that map reference determinants onto each other?. Type: boolean; Default: true. Expert¶. PERTURB_CBS¶. Do compute the perturbative corrections for basis set incompleteness?. Type: boolean; Default: false. PERTURB_CBS_COUPLING¶. Do include the terms that couple different reference determinants in perturbative CBS correction computations?. Type: boolean; Default: true. TIKHONOW_TRIPLES¶. Do use Tikhonow regularization in (T) computations?. Type: boolean; Default: false. USE_SPIN_SYMMETRY¶. Whether to use spin symmetry to map equivalent configurations onto each other, for efficiency. Type: boolean; Default: true. table of contents. PSIMRCC; General; CC_NUM_THREADS; CORR_ANSATZ; CORR_CCSD_T; CORR_CHARGE; CORR_MULTP; CORR_WFN; COUPLING; COUPLING_TERMS; DAMPING_PERCENTAGE; DIAGONALIZE_HEFF; DIAGONAL_CCSD_T; DIIS_MAX_VECS; DIIS_START; E_CONVERGENCE; FAVG_CCSD_T; FOLLOW_ROOT; HEFF4; HEFF_PRINT; LOCK_SINGLET; MAXITER; MP2_CCSD_METHOD; MP2_GUESS; NO_SINGLES; OFFDIAGONAL_CCSD_T; PT_ENERGY; R_CONVERGENCE; SMALL_CUTOFF; TIKHONOW_MAX; TIKHONOW_OMEGA; TRIPLES_ALGORITHM; TRIPLES_DIIS; USE_SPIN_SYM; WFN_SYM; ZERO_INTERNAL_AMPS. Expert; PERTURB_CBS; PERTURB_CBS_COUPLING; TIKHONOW_TRIPLES; USE_SPIN_SYMMETRY. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Appendices; Keywords by Module. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 July 2018 04:21AM.; Created using Sphinx 1.7.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/autodir_options_c/module__psimrcc-1.html:5126,configurat,configurations,5126,psi4manual/1.2.1/autodir_options_c/module__psimrcc-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/autodir_options_c/module__psimrcc-1.html,4,"['configurat', 'update']","['configurations', 'updated']"
Deployability,"or local-CC?. Type: boolean; Default: false. LOCAL_DOMAIN_POLAR¶. Do use augment domains with polarized orbitals?. Type: boolean; Default: false. LOCAL_DOMAIN_SEP¶. Type: boolean; Default: false. LOCAL_FILTER_SINGLES¶. Do apply local filtering to single excitation amplitudes?. Type: boolean; Default: false. LOCAL_METHOD¶. Type of local-CCSD scheme to be simulated. WERNER (unique avaliable option) selects the method developed by H.-J. Werner and co-workers. Type: string; Default: WERNER. LOCAL_PAIRDEF¶. Definition of local pair domains, unique avaliable option is BP, Boughton-Pulay. Type: string; Default: BP. LOCAL_WEAKP¶. Desired treatment of “weak pairs” in the local-CCSD method. The value of NONE (unique avaliable option) treats weak pairs in the same manner as strong pairs. Type: string; Default: NONE. OMEGA¶. Energy of applied field [au] for dynamic properties. Type: array; Default: No Default. PROPERTY¶. The response property desired. The unique acceptable values is POLARIZABILITY for dipole-polarizabilitie. Type: string; Default: POLARIZABILITY. REFERENCE¶. Reference wavefunction type. Type: string; Default: RHF. SEMICANONICAL¶. Convert ROHF MOs to semicanonical MOs. Type: boolean; Default: true. Expert¶. WFN¶. Wavefunction type. Type: string; Default: No Default. Table Of Contents. CCSORT; General; AO_BASIS; CACHELEVEL; EOM_REFERENCE; INTS_TOLERANCE; KEEP_OEIFILE; KEEP_TEIFILE; LOCAL; LOCAL_CORE_CUTOFF; LOCAL_CPHF_CUTOFF; LOCAL_CUTOFF; LOCAL_DOMAIN_MAG; LOCAL_DOMAIN_POLAR; LOCAL_DOMAIN_SEP; LOCAL_FILTER_SINGLES; LOCAL_METHOD; LOCAL_PAIRDEF; LOCAL_WEAKP; OMEGA; PROPERTY; REFERENCE; SEMICANONICAL. Expert; WFN. Previous topic; WFN; Next topic; AO_BASIS; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Appendices »; Keywords by Module ». © Copyright 2012, The Psi4 Project.; Last updated on Oct 16, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/autodir_options_c/module__ccsort-1.html:3882,update,updated,3882,psi4manual/4.0b3/autodir_options_c/module__ccsort-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodir_options_c/module__ccsort-1.html,2,['update'],['updated']
Deployability,"or local-CC?. Type: boolean; Default: false. LOCAL_DOMAIN_POLAR¶. Do use augment domains with polarized orbitals?. Type: boolean; Default: false. LOCAL_DOMAIN_SEP¶. Type: boolean; Default: false. LOCAL_FILTER_SINGLES¶. Do apply local filtering to single excitation amplitudes?. Type: boolean; Default: false. LOCAL_METHOD¶. Type of local-CCSD scheme to be simulated. WERNER (unique avaliable option) selects the method developed by H.-J. Werner and co-workers. Type: string; Default: WERNER. LOCAL_PAIRDEF¶. Definition of local pair domains, unique avaliable option is BP, Boughton-Pulay. Type: string; Default: BP. LOCAL_WEAKP¶. Desired treatment of “weak pairs” in the local-CCSD method. The value of NONE (unique avaliable option) treats weak pairs in the same manner as strong pairs. Type: string; Default: NONE. OMEGA¶. Energy of applied field [au] for dynamic properties. Type: array; Default: No Default. PROPERTY¶. The response property desired. The unique acceptable values is POLARIZABILITY for dipole-polarizabilitie. Type: string; Default: POLARIZABILITY. REFERENCE¶. Reference wavefunction type. Type: string; Default: RHF. SEMICANONICAL¶. Convert ROHF MOs to semicanonical MOs. Type: boolean; Default: true. Expert¶. WFN¶. Wavefunction type. Type: string; Default: No Default. Table Of Contents. CCSORT; General; AO_BASIS; CACHELEVEL; EOM_REFERENCE; INTS_TOLERANCE; KEEP_OEIFILE; KEEP_TEIFILE; LOCAL; LOCAL_CORE_CUTOFF; LOCAL_CPHF_CUTOFF; LOCAL_CUTOFF; LOCAL_DOMAIN_MAG; LOCAL_DOMAIN_POLAR; LOCAL_DOMAIN_SEP; LOCAL_FILTER_SINGLES; LOCAL_METHOD; LOCAL_PAIRDEF; LOCAL_WEAKP; OMEGA; PROPERTY; REFERENCE; SEMICANONICAL. Expert; WFN. Previous topic; WFN; Next topic; AO_BASIS; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; Keywords by Module ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 25, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/autodir_options_c/module__ccsort-1.html:3882,update,updated,3882,psi4manual/4.0b4/autodir_options_c/module__ccsort-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodir_options_c/module__ccsort-1.html,2,['update'],['updated']
Deployability,"or local-CC?. Type: boolean; Default: false. LOCAL_DOMAIN_POLAR¶. Do use augment domains with polarized orbitals?. Type: boolean; Default: false. LOCAL_DOMAIN_SEP¶. Type: boolean; Default: false. LOCAL_FILTER_SINGLES¶. Do apply local filtering to single excitation amplitudes?. Type: boolean; Default: false. LOCAL_METHOD¶. Type of local-CCSD scheme to be simulated. WERNER (unique avaliable option) selects the method developed by H.-J. Werner and co-workers. Type: string; Default: WERNER. LOCAL_PAIRDEF¶. Definition of local pair domains, unique avaliable option is BP, Boughton-Pulay. Type: string; Default: BP. LOCAL_WEAKP¶. Desired treatment of “weak pairs” in the local-CCSD method. The value of NONE (unique avaliable option) treats weak pairs in the same manner as strong pairs. Type: string; Default: NONE. OMEGA¶. Energy of applied field [au] for dynamic properties. Type: array; Default: No Default. PROPERTY¶. The response property desired. The unique acceptable values is POLARIZABILITY for dipole-polarizabilitie. Type: string; Default: POLARIZABILITY. REFERENCE¶. Reference wavefunction type. Type: string; Default: RHF. SEMICANONICAL¶. Convert ROHF MOs to semicanonical MOs. Type: boolean; Default: true. Expert¶. WFN¶. Wavefunction type. Type: string; Default: No Default. Table Of Contents. CCSORT; General; AO_BASIS; CACHELEVEL; EOM_REFERENCE; INTS_TOLERANCE; KEEP_OEIFILE; KEEP_TEIFILE; LOCAL; LOCAL_CORE_CUTOFF; LOCAL_CPHF_CUTOFF; LOCAL_CUTOFF; LOCAL_DOMAIN_MAG; LOCAL_DOMAIN_POLAR; LOCAL_DOMAIN_SEP; LOCAL_FILTER_SINGLES; LOCAL_METHOD; LOCAL_PAIRDEF; LOCAL_WEAKP; OMEGA; PROPERTY; REFERENCE; SEMICANONICAL. Expert; WFN. Previous topic; WFN; Next topic; AO_BASIS; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/autodir_options_c/module__ccsort-1.html:3882,update,updated,3882,psi4manual/4.0b5/autodir_options_c/module__ccsort-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/module__ccsort-1.html,2,['update'],['updated']
Deployability,"or miniconda has; already been installed (instructions at Quick Installation),; erd can be obtained through conda install erd -c psi4.; Then enable it as a feature with ENABLE_erd,; hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect erd and activate dependent code. To remove a conda installation, conda remove erd. Source. If using PSI4 built from source and you want erd built from; from source also,; enable it as a feature with ENABLE_erd,; and let the build system fetch and build it and activate dependent code. How to configure erd for building Psi4¶; Role and Dependencies. Role — In PSI4, ERD is a library that provides alternate; integrals.; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) erd; Upstream Dependencies — erd \(\Leftarrow\) Fortran. CMake Variables. ENABLE_erd — CMake variable toggling whether PSI4 builds with erd; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For erd, set to an installation directory containing include/ERD/ERD_MANGLE.h; erd_DIR — CMake variable to specify where pre-built erd can be found. Set to installation directory containing share/cmake/erd/erdConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_erd — CMake variable to force internal build of erd instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_erd — CMake variable to force detecting pre-built erd and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_erd=ON. Build without erd. >>> cmake. Link against pre-built. >>> cmake -DENABLE_erd=ON -DCMAKE_PREFIX_PATH=/path/to/erd/root. >>> cmake -DENABLE_erd=ON -Derd_DIR=/path/to/erd/configdir. Build bundled despite pre-built being detectable. >>> cmake -DENABLE_erd=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/erd/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_erd=ON. table of contents. Interface to ERD by N. Flocke and V. Lotrich; Installation; How to configure erd for building Psi4. «; hide menu. menu; sidebar; »; . Navig",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/erd-1.html:2310,install,installation,2310,psi4manual/1.4.0/erd-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/erd-1.html,8,['install'],['installation']
Deployability,"or the plugin depends on .so codes in other plugin directories (add; additional plugin_load lines relative to the current plugin directory to; the # Load C++ plugin section as modeled in; psi4/tests/plugin_libcim/__init__.py).; """"""Plugin docstring. """"""; __version__ = '0.1'; __author__ = 'Psi4 Developer'. # Load Python modules; from pymodule import *. # Load C++ plugin; import os; import PsiMod; plugdir = os.path.split(os.path.abspath(__file__))[0]; sofile = plugdir + '/' + os.path.split(plugdir)[1] + '.so'; PsiMod.plugin_load(sofile). doc.rst — Documentation file. Place in this file any notes,; equations, warnings to users, todo lists, etc.. Plain text is fine,; though reStructuredText is the ultimate goal. Remove the .. comment; text and build Sphinx documentation for samples of linking keywords,; sections, and math. This file is absorbed into the PSI4; documentation, along with any docstrings to Python functions, and the C++; keywords block in the myplugin.cc file. See Documentation; for building documentation and Available Plugins; for this file’s final destination. To create a purely Python plugin, create a new plugin directory, then; remove the Makefile and myplugin.cc files and; erase the shared object loading portion of __init__.py. Create as many .py; files as necessary (registering each one in __init__.py), use; input.dat as a model for loading the plugin, no recompile ever; necessary. Table Of Contents. Plugins: Adding New Functionality to PSI4; Modular Approach to Development; Creating a New Plugin; Files in a Plugin Directory. Previous topic; Contributions: Intro to Programming in PSI4; Next topic; Best Practices for Python Functions; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Contributions: Intro to Programming in PSI4 ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 25, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/plugins-1.html:7873,update,updated,7873,psi4manual/4.0b4/plugins-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/plugins-1.html,2,['update'],['updated']
Deployability,"or to test python versions, etc.. In practical terms, installing into a conda environment means you can turn PSI4’s availability on/off by switching conda environments without turning on/off the whole Ana/Miniconda installation. Below, PSI4 is installed into an environment called p4env. Then the environment is activated, removing the main Ana/Miniconda bin and adding envs/p4env/bin to PATH. The conda activate command (conda >=4.4; December 2017) works in all shells, but if you’re using old source activate that only works for bash; adjust as needed for csh/tcsh.; >>> conda create -n p4env psi4; >>> conda activate p4env; # check; >>> which psi4; /path/to/miniconda/envs/p4env/bin/psi4. The output for either of the installation commands above looks like the following. It checks what packages are needed, gets your approval for downloading them, fetches and installs them, prints out some useful information, and runs a PSI4 test case to check that all’s well.; >>> conda install psi4; Using Anaconda Cloud api site https://api.anaconda.org; Fetching package metadata: ......; Solving package specifications: ......... Package plan for installation in environment /theoryfs2/ds/cdsgroup/miniconda/envs/tpsi4:. The following packages will be downloaded:. package | build; ---------------------------|-----------------; psi4-0.4.322 | py27_g84b3aa1 44.4 MB http://conda.anaconda.org/psi4/linux-64/. The following NEW packages will be INSTALLED:. psi4: 0.4.322-py27_g84b3aa1 http://conda.anaconda.org/psi4/linux-64/. Proceed ([y]/n)? y. Fetching packages ...; psi4-0.4.322-p 100% |####################################################################################| Time: 0:00:08 5.77 MB/s; Extracting packages ...; [ COMPLETE ]|#######################################################################################################| 100%; Linking packages ... Thank you for installing psi4. Additional resources:; Website: www.psicode.org; Inputs: /theoryfs2/ds/cdsgroup/miniconda/envs/tpsi4/sha",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/conda-1.html:17464,install,install,17464,psi4manual/1.2.1/conda-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/conda-1.html,4,['install'],['install']
Deployability,"or water with cc-pVDZ using; MRCC simply provide the following:; molecule h2o {; O; H 1 1.0; H 1 1.0 2 104.5; }; set {; basis cc-pVDZ; }; energy('mrccsdt'). 'mrccsdt' in the call to energy() instructs PSI4 to first; perform an RHF calculation and then call MRCC to compute the CCSDT energy.; For a CCSDT(Q) energy, simply use 'mrccsdt(q)' in the call to; energy(). MRCC can be used to perform geometry optimization and; frequency calculations for electronic ground states only.; At this time, PSI4 is only able to automatically generate the proper; input file for MRCC for the methods listed in table below.; To utilize any method described in the table, you must prefix; the method name with MR. For other methods, you will be required to; use the MRCC keywords described in Appendix MRCC. Methods available in automatic interface with MRCC. CCSD; CCSD(T) [1]; CCSD(T)_L [1]. CCSDT; CCSDT(Q) [1]; CCSDT(Q)_L [1]. CCSDTQ; CCSDTQ(P) [1]; CCSDTQ(P)_L [1]. CCSDTQP; CCSDTQP(H) [1]; CCSDTQP(H)_L [1]. CCSDTQPH;  ;  . CCSDT-1a; CCSDT-1b; CCSDT-3. CCSDTQ-1a; CCSDTQ-1b; CCSDTQ-3. CCSDTQP-1a; CCSDTQP-1b; CCSDTQP-3. CCSDTQPH-1a; CCSDTQPH-1b; CCSDTQPH-3. CC2;  ;  . CC3;  ;  . CC4;  ;  . CC5;  ;  . CC6;  ;  . [1](1, 2, 3, 4, 5, 6, 7, 8) Pertubative methods not available with ROHF reference. Frozen-core approximation is also supported in the MRCC interface.; To optimize CH4 with CCSDT freezing the 1s on carbon, run:; molecule H2O {; O; H 1 r; H 1 r 2 104.5. r = 1.0; }. set {; basis cc-pVDZ; freeze_core true; }. optimize('mrccsdt'). Table Of Contents. Interface to MRCC by M. Kállay; Installation; Running MRCC. Previous topic; PSIMRCC Implementation of Mk-MRCC Theory; Next topic; Configuration Interaction; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Theoretical Methods: SCF to FCI ». © Copyright 2012, Psi4 Project.; Last updated on Sep 30, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/mrcc-1.html:2851,update,updated,2851,psi4manual/4.0b2/mrcc-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/mrcc-1.html,2,['update'],['updated']
Deployability,"or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. mom; Maximum Overlap Method (MOM) Test. MOM is designed to stabilize SCF convergence and to target excited Slater determinants directly. dft-custom-hybrid; DFT (hybrids) test of implementations in: hybrid_superfuncs.py. fsapt-ext-abc2; FSAPT with external charge on dimer. cc34; RHF-CCSD/cc-pVDZ energy of H2O partitioned into pair energy contributions. cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}B_1\) state of H2O+ (A1 excitation). omp3-1; OMP3 cc-pVDZ energy for the H2O molecule. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. dft-freq-analytic; Analytic SVWN frequencies, compared to finite difference values. scf-response3; UHF Dipole Polarizability Test. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. cc36; CC2(RHF)/cc-pVDZ energy of H2O. opt11; Transition-state optimizations of HOOH to both torsional transition states. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. dfmp2-grad2; DF-MP2 cc-pVDZ gradient for the NO molecule. sapt11; sapt example with orbital freezing with alkali metal and dMP2. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. cc52; CCSD Response for H2O2. dft-grad2; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN updated ref gradient due to new BraggSlater radii. dforemp-grad1; density fitted OO-REMP/cc-pVDZ engrad single points for the H2O molecule. fsapt1; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. dfmp2-freq1; DF-MP2 frequency by difference of energies for H2O. cc56; EOM-CCSD/6-31g excited state transition dat",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/autodoc_testsuite_corepsi4.html:12384,install,install,12384,psi4manual/1.8.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodoc_testsuite_corepsi4.html,2,['install'],['install']
Deployability,"orbitals in both fragment A and B. However, the presence of charges in C does not; directly contribute to the SAPT0 interaction energy.; Examples fsapt-ext-abc and fsapt-ext-abc2; illustrate the use of point charges in F/I-SAPT procedure. F/I-SAPT Keywords¶; The input files described above cover roughly 90% of all F/I-SAPT analyses. For; more delicate or involved problems, there are a large number of user options; that permit the customization of the I-SAPT subsystem partition, the convergence; of the IBO localization procedure, numerical thresholds, etc. We have an entire; video tutorial devoted to F/I-SAPT Options .; Direct source-code documentation on these options is available here. Additional Notes¶. Caution; In constrast to Ed Hohenstein’s SAPT0 code, FISAPT uses the -JKFIT; auxiliary basis sets for all Fock-type terms (e.g., electrostatics, exchange,; induction, and core Fock matrix elements in exchange-dispersion), and the -RI; auxiliary basis sets only for the dispersion term. Ed’s code uses the -RI; basis sets for all SAPT terms, which can be problematic for heavy elements.; As such, Ed’s SAPT0 code will yield slightly different results than FISAPT. The; differences should be very minor for up to and including second-row elements,; after which point one needs to use the DF_BASIS_ELST option in Ed’s code to; provide an accurate result. table of contents. F/I-SAPT: Functional Group and/or Intramolecular SAPT; F-SAPT: A Representative Example; Order-1 Visualization with PyMol; Difference F-SAPT Analysis; I-SAPT: A Representative Example; Cube File Visualization with PyMol; Adding Point Charges to F/I-SAPT Computations; F/I-SAPT Keywords; Additional Notes. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Theoretical Methods: SCF to FCI; F/I-SAPT: Functional Group and/or Intramolecular SAPT. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/fisapt-1.html:14529,update,updated,14529,psi4manual/1.4.0/fisapt-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/fisapt-1.html,2,['update'],['updated']
Deployability,"orbitals in both fragment A and B. However, the presence of charges in C does not; directly contribute to the SAPT0 interaction energy.; Examples fsapt-ext-abc and fsapt-ext-abc2; illustrate the use of point charges in F/I-SAPT procedure. F/I-SAPT Keywords¶; The input files described above cover roughly 90% of all F/I-SAPT analyses. For; more delicate or involved problems, there are a large number of user options; that permit the customization of the I-SAPT subsystem partition, the convergence; of the IBO localization procedure, numerical thresholds, etc. We have an entire; video tutorial devoted to F/I-SAPT Options .; Direct source-code documentation on these options is available here. Additional Notes¶. Caution; In constrast to Ed Hohenstein’s SAPT0 code, FISAPT uses the -JKFIT; auxiliary basis sets for all Fock-type terms (e.g., electrostatics, exchange,; induction, and core Fock matrix elements in exchange-dispersion), and the -RI; auxiliary basis sets only for the dispersion term. Ed’s code uses the -RI; basis sets for all SAPT terms, which can be problematic for heavy elements.; As such, Ed’s SAPT0 code will yield slightly different results than FISAPT. The; differences should be very minor for up to and including second-row elements,; after which point one needs to use the DF_BASIS_ELST option in Ed’s code to; provide an accurate result. table of contents. F/I-SAPT: Functional Group and/or Intramolecular SAPT; F-SAPT: A Representative Example; Order-1 Visualization with PyMol; Difference F-SAPT Analysis; I-SAPT: A Representative Example; Cube File Visualization with PyMol; Adding Point Charges to F/I-SAPT Computations; F/I-SAPT Keywords; Additional Notes. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Theoretical Methods: SCF to FCI; F/I-SAPT: Functional Group and/or Intramolecular SAPT. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/fisapt-1.html:14529,update,updated,14529,psi4manual/1.5.0/fisapt-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/fisapt-1.html,2,['update'],['updated']
Deployability,"orce fields. VIBROT (=3) requests calculation of only those cubic constants of the form , where n is a totally symmetric coordinate. These are sufficient to determine the vibration-rotation interaction constants needed to calculate vibrational corrections to rotational constants, but are not sufficient to generate the corresponding cubic constants of isotopologs that have a lower point-group symmetry (i.e. HOD isotopolog of water). VPT2 (=1, note that the old value CUBIC can be still used and is equivalent to VPT2) generates all cubic constants and all quartic constants apart from those of the form , which is enough for: 1) generation of cubic constants of isotopologs (see manual entries associated with anharmonic calculations for an example); 2) calculation of vibrational energy levels with VPT2. This keyword also directs the program to analyze resonances and calculate intensities of one- and two-quantum transitions. FULLQUARTIC (=2) (not part of the public release) is largely self-explanatory; it directs the program to calculate all quartic constants. This is sufficient (but this has not been implemented) to generate the full quartic force field of all isotopologs. Type: string; Possible Values: CUBIC, VPT2, FULLQUARTIC, VIBROT, OFF; Default: OFF. CFOUR_ANH_ALGORITHM¶. Specifies which algorithm is used for CFOUR_ANHARMONIC =VIBROT, VPT2, and FULLQUARTIC calculations. If STANDARD (=0) is chosen, then simply invoking xcfour will cause a complete job to be run with all second-derivative calculations being done in series. If PARALLEL (=1), then the job stops after the second-derivative calculation at the reference geometry and generates out all input geometries for the remaining calculation. These can be then processed in “parallel” (currently not recommended). Note that it is recommended to carry out all calculations with PARALLEL, even when the actual calculation is carried out in a sequential mode. Type: string; Possible Values: STANDARD, PARALLEL; Default: STANDAR",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodir_options_c/module__cfour-1.html:2795,release,release,2795,psi4manual/1.0.0/autodir_options_c/module__cfour-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodir_options_c/module__cfour-1.html,2,['release'],['release']
Deployability,"orce fields. VIBROT (=3) requests calculation of only those cubic constants of the form , where n is a totally symmetric coordinate. These are sufficient to determine the vibration-rotation interaction constants needed to calculate vibrational corrections to rotational constants, but are not sufficient to generate the corresponding cubic constants of isotopologs that have a lower point-group symmetry (i.e. HOD isotopolog of water). VPT2 (=1, note that the old value CUBIC can be still used and is equivalent to VPT2) generates all cubic constants and all quartic constants apart from those of the form , which is enough for: 1) generation of cubic constants of isotopologs (see manual entries associated with anharmonic calculations for an example); 2) calculation of vibrational energy levels with VPT2. This keyword also directs the program to analyze resonances and calculate intensities of one- and two-quantum transitions. FULLQUARTIC (=2) (not part of the public release) is largely self-explanatory; it directs the program to calculate all quartic constants. This is sufficient (but this has not been implemented) to generate the full quartic force field of all isotopologs. Type: string; Possible Values: CUBIC, VPT2, FULLQUARTIC, VIBROT, OFF; Default: OFF. CFOUR_AO_LADDERS (CFOUR); CFOUR — Can be used to control the algorithm used by CFOUR when terms involving molecular orbital integrals are calculated in the atomic orbital basis (see CFOUR_ABCDTYPE). MULTIPASS (= 0) uses an approach where the AO integral file is read a number of times in order to ensure maximal vectorization and is usually the optimal strategy on supercomputers; SINGLEPASS (= 1) determines the contributions with only a single pass through the AO integrals, but at the cost of significantly reduced vectorization. In general, however, SINGLEPASS is definitely preferable on workstations with RISC architectures. (Default : MULTIPASS on all 64-bit machines (e.g., CRAY-YMP) ; SINGLEPASS on all 32-bit machines (e",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:21797,release,release,21797,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html,2,['release'],['release']
Deployability,"ord commit) and retrigger the docs GHA. Download the artifact (zipped docs dir) at the end to a local computer.; In your hugo site clone, create a new directory under static/psi4manual. Copy the zipped docs there, unpack, rearrange so that static/psi4manual/<new-tag>/index.html is present. Check in. Publish GitHub release¶. On GitHub site “Draft a New Release” with newly minted tag; Fill in frontmatter style and links from previous GitHub release; Fill in RN from hopefully existing RN issue; Fill in RN by going through the top posts from all PRs from this milestone; “publish” release. This establishes release date for GitHub API; Close the RN issue.; Close the milestone (should be 100% complete). Publish GitHub postrelease¶. On GitHub site “Draft a New Release” for anticipated or newly minted tag; Fill in frontmatter style and links from previous GitHub release; Fill in RN as cherry-pick to or edit on branch; “publish” release. This establishes release date for GitHub API. Publish psicode release¶. Copy a recent release page like https://github.com/psi4/psicode-hugo-website/blob/master/content/posts/v1p2.md; Edit its filename, title, date, image, and links; Execute https://api.github.com/repos/psi4/psi4/releases/latest and note the id field value; Use the id value in the shortcode call at the bottom by ghRN. Finalize release¶. Make new PR with; * edits to main README.md badges, python versions, etc.; * edits to CMakeLists.txt find_package(PythonLibsNew 3.6 REQUIRED); Tweet about release. Reset psi4meta for nightly operation¶; On both Linux and Mac:. After (post)release (not prerelease), in conda_build_config.yaml, edit ltrtver to a new “release.dev” label; After postrelease, unpin any dependencies in cbcy that needed older either ver or bld (e.g., v2rdm_casscf_bld); Edit psi4ver back to '' in cbcy; Edit source/git_tag back to master for psi4-multiout, psi4-docs; Edit build string back to 0 if psi4-multiout needed multiple passes; Edit kitandkapoodle.py back to *** s",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/manage_release.html:18449,release,release,18449,psi4manual/1.8.x/manage_release.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/manage_release.html,1,['release'],['release']
Deployability,"ord commit) and retrigger the docs GHA. Download the artifact (zipped docs dir) at the end to a local computer.; In your hugo site clone, create a new directory under static/psi4manual. Copy the zipped docs there, unpack, rearrange so that static/psi4manual/<new-tag>/index.html is present. Check in. Publish GitHub release¶. On GitHub site “Draft a New Release” with newly minted tag; Fill in frontmatter style and links from previous GitHub release; Fill in RN from hopefully existing RN issue; Fill in RN by going through the top posts from all PRs from this milestone; “publish” release. This establishes release date for GitHub API; Close the RN issue.; Close the milestone (should be 100% complete). Publish GitHub postrelease¶. On GitHub site “Draft a New Release” for anticipated or newly minted tag; Fill in frontmatter style and links from previous GitHub release; Fill in RN as cherry-pick to or edit on branch; “publish” release. This establishes release date for GitHub API. Publish psicode release¶. Copy a recent release page like https://github.com/psi4/psicode-hugo-website/blob/master/content/posts/v1p2.md; Edit its filename, title, date, image, and links; Execute https://api.github.com/repos/psi4/psi4/releases/latest and note the id field value; Use the id value in the shortcode call at the bottom. Finalize release¶. Make new PR with; * edits to main README.md badges, python versions, etc.; * edits to CMakeLists.txt find_package(PythonLibsNew 3.6 REQUIRED); Tweet about release. Reset psi4meta for nightly operation¶; On both Linux and Mac:. After (post)release (not prerelease), in conda_build_config.yaml, edit ltrtver to a new “release.dev” label; After postrelease, unpin any dependencies in cbcy that needed older either ver or bld (e.g., v2rdm_casscf_bld); Edit psi4ver back to '' in cbcy; Edit source/git_tag back to master for psi4-multiout, psi4-docs; Edit build string back to 0 if psi4-multiout needed multiple passes; Edit kitandkapoodle.py back to *** stack; Ch",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/manage_release-1.html:18259,release,release,18259,psi4manual/1.5.0/manage_release-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/manage_release-1.html,4,['release'],['release']
Deployability,"order contributions to the effective Hamiltonian?. Type: boolean; Default: true. HEFF_PRINT (PSIMRCC); PSIMRCC — Do print the effective Hamiltonian?. Type: boolean; Default: false. HESS_UPDATE (OPTKING); OPTKING — Hessian update scheme. Type: string; Possible Values: NONE, BFGS, MS, POWELL, BOFILL; Default: BFGS. HESS_UPDATE_LIMIT (OPTKING); OPTKING — Do limit the magnitude of changes caused by the Hessian update?. Type: boolean; Default: true. HESS_UPDATE_LIMIT_MAX (OPTKING); OPTKING — If HESS_UPDATE_LIMIT is true, changes to the Hessian from the update are limited to the larger of HESS_UPDATE_LIMIT_SCALE * (the previous value) and HESS_UPDATE_LIMIT_MAX [au]. Type: double; Default: 1.00. HESS_UPDATE_LIMIT_SCALE (OPTKING); OPTKING — If HESS_UPDATE_LIMIT is true, changes to the Hessian from the update are limited to the larger of HESS_UPDATE_LIMIT_SCALE * (the previous value) and HESS_UPDATE_LIMIT_MAX [au]. Type: double; Default: 0.50. HESS_UPDATE_USE_LAST (OPTKING); OPTKING — Number of previous steps to use in Hessian update, 0 uses all. Type: integer; Default: 1. HESSIAN_WRITE (FINDIF); FINDIF — Do write a hessian output file? If so, the filename will end in .hess, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. ICORE (DETCI); DETCI — Specifies how to handle buffering of CI vectors. A value of 0 makes the program perform I/O one RAS subblock at a time; 1 uses entire CI vectors at a time; and 2 uses one irrep block at a time. Values of 0 or 2 cause some inefficiency in the I/O (requiring multiple reads of the C vector when constructing H in the iterative subspace if DIAG_METHOD = SEM), but require less core memory. Type: integer; Default: 1. IGNORE_TAU (DCFT); DCFT (Expert) — Controls whether to ignore terms containing non-idempotent contribution to OPDM or not (for debug puproses only). For practical applications only the default must be used. Typ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/autodoc_glossary_options_c-1.html:56475,update,update,56475,psi4manual/4.0b4/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_glossary_options_c-1.html,4,['update'],['update']
Deployability,"ore CI completes is fine, though it can be mildly personally embarrassing when CI catches something you didn’t.; All main branches (master and 1.N.x maintenance) are protected by GitHub, including administrators, so even with write access, no one can accidentally push (master) or rewrite the history (master and maintenance).; PR owners who also have maintainer status can merge their PRs as GitHub enforces three external reviews.; Unless there’s been a lot of discussion on core-dev about merge order, generally the 3rd positive reviewer merges the PR. Also fine to add review and leave merge for later.; Presently only Travis-CI is set up as a required-to-merge service. Incomplete Azure won’t block merging, but we do usually let it complete before merging unless it’s a trivial PR.; We don’t enforce branches to be up to date before merging since that’d be a lot of extra CI time and coordination when merging several PRs in a day. So, if a PR hasn’t been updated in a while, and a reviewer is nervous about PR interference, fine to ask submitter to rebase. For this reason, we try to merge newer contributors first so the rebase falls on more experienced contributors.; Ideally a PR consists of atomic, compilable commits. When the PR instead is many successive small changes toward a single goal, consider squashing the PR. For core-dev’s PRs, there’s implicit permission to squash (unless otherwise noted in PR intro), whereas for new contributors, we often let the commits be messy.; When discussion on issue has overcome the original problem and settled on needing long-term work, fine to move the long-term item to Wish List and close issue. table of contents. Git, Versioning; How to bump a version; How to create and remove an annotated Git tag on a remote; What Psi4 version is running; How to locate non-ascii characters in the codebase; How to fix “Psi4 undefined” version; How to fix “cannot import name ‘core’ from {top-level-psi4-dir}; How to find tests without output.ref; How to",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/manage_git-1.html:9839,update,updated,9839,psi4manual/1.4.0/manage_git-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/manage_git-1.html,6,['update'],['updated']
Deployability,"ore.DFHelper method, [1], [2]. psi4.core.HF method, [1], [2]. psi4.core.IntegralTransform method, [1], [2]. psi4.core.JK method, [1], [2]. psi4.core.MemDFJK method, [1]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. psi4.core.VBase method, [1], [2]. initialize_gtfock_jk() psi4.core.CUHF method, [1]. psi4.core.HF method, [1], [2]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. initialize_jk() psi4.core.CUHF method, [1]. psi4.core.HF method, [1], [2]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. initialized_diis_manager_ psi4.core.CUHF attribute, [1]. psi4.core.HF attribute, [1], [2]. psi4.core.RHF attribute, [1]. psi4.core.ROHF attribute, [1]. psi4.core.UHF attribute, [1]. input_units_to_au() psi4.core.Molecule method, [1], [2]. insert() psi4.core.BSVec method, [1], [2]. psi4.core.VectorMatrix method, [1], [2]. install_instructions psi4.driver.PastureRequiredError attribute. installing. INTCOS_GENERATE_EXIT (OPTKING). integral() psi4.core.MintsHelper method, [1], [2]. psi4.core.OrbitalSpace method, [1], [2]. INTEGRAL_CUTOFF (DFOCC). INTEGRAL_PACKAGE (GLOBALS). IntegralFactory class in psi4.core, [1]. integrals, [1]. integrals() psi4.core.MintsHelper method, [1], [2]. integrals_erf() psi4.core.MintsHelper method, [1], [2]. integrals_erfc() psi4.core.MintsHelper method, [1], [2]. IntegralTransform class in psi4.core, [1]. IntegralTransform.FrozenOrbitals class in psi4.core, [1]. IntegralTransform.HalfTrans class in psi4.core, [1]. IntegralTransform.MOOrdering class in psi4.core, [1]. IntegralTransform.OutputType class in psi4.core, [1]. IntegralTransform.SpinType class in psi4.core, [1]. IntegralTransform.TransformationType class in psi4.core, [1]. INTERFRAG_DIST_INV (OPTKING). INTERFRAG_HESS (OPTKING). INTERFRAG_MODE (OPTKING). INTERFRAG_STEP_LIMIT (OPTKING). INTERFRAGMENT_CONNECT (OPTKING). INTERNAL_ROTATIONS (MCSCF). INTRAFRAG_HESS (OPTKING). INTRAFRAG_STEP_LI",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/genindex-1.html:79552,install,installing,79552,psi4manual/1.3.2/genindex-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/genindex-1.html,2,['install'],['installing']
Deployability,"ore.JK. compute(self: psi4.core.JK) → None¶. dfh(self: psi4.core.MemDFJK) → psi4.core.DFHelper¶; Return the DFHelper object. finalize(self: psi4.core.JK) → None¶. get_early_screening(self: psi4.core.JK) → bool¶; Use severe screening techniques? Useful in early SCF iterations. get_omega(self: psi4.core.JK) → float¶; Dampening term for range separated DFT. get_omega_alpha(self: psi4.core.JK) → float¶; Weight for HF exchange term in range-separated DFT. get_omega_beta(self: psi4.core.JK) → float¶; Weight for dampened exchange term in range-separated DFT. get_wcombine(self: psi4.core.JK) → bool¶; wcombine. initialize(self: psi4.core.JK) → None¶. memory_estimate(self: psi4.core.JK) → int¶. name(self: psi4.core.JK) → str¶. print_header(self: psi4.core.JK) → None¶; docstring. set_cutoff(self: psi4.core.JK, arg0: float) → None¶. set_do_J(self: psi4.core.JK, arg0: bool) → None¶. set_do_K(self: psi4.core.JK, arg0: bool) → None¶. set_do_wK(self: psi4.core.JK, arg0: bool) → None¶. set_early_screening(self: psi4.core.JK, early_screening: bool) → None¶; Use severe screening techniques? Useful in early SCF iterations. set_memory(self: psi4.core.JK, arg0: int) → None¶. set_omega(self: psi4.core.JK, omega: float) → None¶; Dampening term for range separated DFT. set_omega_alpha(self: psi4.core.JK, alpha: float) → None¶; Weight for HF exchange term in range-separated DFT. set_omega_beta(self: psi4.core.JK, beta: float) → None¶; Weight for dampened exchange term in range-separated DFT. set_omp_nthread(self: psi4.core.JK, arg0: int) → None¶. set_print(self: psi4.core.JK, arg0: int) → None¶. set_wcombine(self: psi4.core.JK, wcombine: bool) → None¶; Are Exchange terms in one Matrix. wK(self: psi4.core.JK) → List[psi4.core.Matrix]¶. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.6;  · . PSI4. PSI4 API: Linking C++ and Python; MemDFJK. © Copyright 2022, The Psi4 Project.; Last updated on Thursday, 19 May 2022 08:57PM.; Created using Sphinx 4.5.0.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/api/psi4.core.MemDFJK.html:4936,update,updated,4936,psi4manual/1.6.x/api/psi4.core.MemDFJK.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/api/psi4.core.MemDFJK.html,1,['update'],['updated']
Deployability,"ore.Options, arg0: str, arg1: str, arg2: str) → None¶; add string option. get_bool(self: psi4.core.Options, arg0: str) → bool¶; get boolean option. get_current_module(self: psi4.core.Options) → str¶; gets current module. get_double(self: psi4.core.Options, arg0: str) → float¶; get double option. get_int(self: psi4.core.Options, arg0: str) → int¶; get integer option. get_int_vector(self: psi4.core.Options, arg0: str) → List[int]¶; get int vector option. get_str(*args, **kwargs)¶; Overloaded function. get_str(self: psi4.core.Options, arg0: str) -> str. get string option. get_str(self: psi4.core.Options, arg0: str) -> str. get string option. print_global_options(self: psi4.core.Options) → None¶; print the global, cross-module options. print_module_options(self: psi4.core.Options) → None¶; print global and local options prepared for current module. read_globals(self: psi4.core.Options) → bool¶; expert. set_array(self: psi4.core.Options, arg0: str, arg1: str) → None¶; set array option. set_bool(self: psi4.core.Options, arg0: str, arg1: str, arg2: bool) → None¶; set bool option. set_current_module(self: psi4.core.Options, arg0: str) → None¶; sets arg0 (all CAPS) as current module. set_double(self: psi4.core.Options, arg0: str, arg1: str, arg2: float) → None¶; set double option. set_int(self: psi4.core.Options, arg0: str, arg1: str, arg2: int) → None¶; set int option. set_read_globals(self: psi4.core.Options, arg0: bool) → None¶; expert. set_str(self: psi4.core.Options, arg0: str, arg1: str, arg2: str) → None¶; set string option. set_str_i(self: psi4.core.Options, arg0: str, arg1: str, arg2: str) → None¶; set string option. validate_options(self: psi4.core.Options) → None¶; validate options for arg0 module. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; Options. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/api/psi4.core.Options.html:3674,update,updated,3674,psi4manual/1.7.x/api/psi4.core.Options.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.Options.html,1,['update'],['updated']
Deployability,"ore.OrbitalSpace) → psi::BasisSet; The AO basis set used to create C. build_cabs_space(orb_space: psi4.core.OrbitalSpace, ri_space: psi4.core.OrbitalSpace, linear_tol: float) → psi4.core.OrbitalSpace; Given two spaces, it projects out one space from the other and returns the new spaces The first argument (orb_space) is the space to project out. The returned space will be orthogonal to this The second argument (ri_space) is the space that is being projected on. The returned space = this space - orb_space The third argument is the tolerance for linear dependencies. build_ri_space(molecule: psi::Molecule, obs_key: str, aux_key: str, lindep_tol: float) → psi4.core.OrbitalSpace; Given two basis sets, it merges the basis sets and then constructs an orthogonalized space with the same span. Linearly dependent orbitals are thrown out. The first argument, molecule, is the molecule to construct the basis for The second argument, obs_key, is the option keyword for orbital basis set ‘BASIS’ The third argument, aux_key, is the option keyword for auxiliery basis set ‘DF_BASIS_MP2’ The fourth argument, lindep_tol, is the tolerance for linear dependencies. dim(self: psi4.core.OrbitalSpace) → psi4.core.Dimension; MO dimensions. evals(self: psi4.core.OrbitalSpace) → psi4.core.Vector; Corresponding eigenvalues of the C matrix. id(self: psi4.core.OrbitalSpace) → str; Unique identifier. integral(self: psi4.core.OrbitalSpace) → psi4.core.IntegralFactory; The integral factory used to create C. name(self: psi4.core.OrbitalSpace) → str; Name of the orbital space. nirrep(self: psi4.core.OrbitalSpace) → int; Returns number of irreps. print_out(self: psi4.core.OrbitalSpace) → None; Print information about the orbital space to the output file. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 July 2018 04:21AM.; Created using Sphinx 1.7.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/api/psi4.core.orbitalspace.html:5043,update,updated,5043,psi4manual/1.2.1/api/psi4.core.orbitalspace.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/api/psi4.core.orbitalspace.html,1,['update'],['updated']
Deployability,"orl_wfn='mp2', corl_basis='cc-pv[dt]z', corl_scheme='corl_xtpl_helgaker_2'). >>> # [5] a DT-zeta extrapolated coupled-cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference (both equivalent); >>> energy('cbs', corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z'); >>> energy('cbs', corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme='corl_xtpl_helgaker_2', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z', delta_scheme='corl_xtpl_helgaker_2'). >>> # [6] a D-zeta ccsd(t) correction atop a DT-zeta extrapolated ccsd cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference; >>> energy('cbs', corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd', delta_basis='aug-cc-pv[dt]z', delta_scheme='corl_xtpl_helgaker_2', delta2_wfn='ccsd(t)', delta2_wfn_lesser='ccsd', delta2_basis='aug-cc-pvdz'). >>> # [7] a Q5-zeta MP2 calculation, corrected by CCSD(T) at the TQ-zeta extrapolated level, and all-electron CCSD(T) correlation at T-zeta level; >>> energy(cbs, cbs_metadata=[{""wfn"": ""hf"", ""basis"": ""cc-pv5z""}, {""wfn"": ""mp2"", ""basis"": ""cc-pv[q5]z""}, {""wfn"": ""ccsd(t)"", ""basis"": ""cc-pv[tq]z""}, {""wfn"": ""ccsd(t)"", ""basis"": ""cc-pvtz"", ""options"": {""freeze_core"": ""False""}}]). >>> # [8] cbs() coupled with database(); >>> TODO database('mp2', 'BASIC', subset=['h2o','nh3'], symm='on', func=cbs, corl_basis='cc-pV[tq]z', corl_scheme='corl_xtpl_helgaker_2', delta_wfn='ccsd(t)', delta_basis='sto-3g'). >>> # [9] cbs() coupled with optimize(); >>> TODO optimize('mp2', corl_basis='cc-pV[DT]Z', corl_scheme='corl_xtpl_helgaker_2', func=cbs). table of contents. cbs; cbs(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. PSI4 API: Linking C++ and Python; cbs. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/api/psi4.driver.cbs.html:14947,update,updated,14947,psi4manual/master/api/psi4.driver.cbs.html,https://psicode.org,https://psicode.org/psi4manual/master/api/psi4.driver.cbs.html,1,['update'],['updated']
Deployability,"orl},\; \textbf{delta3_wfn}}^{\textbf{delta3_basis}}\right) - \mathcal{F}_{\textbf{delta3_scheme}} \left(E_{\text{corl},\; \textbf{delta3_wfn_lesser}}^{\textbf{delta3_basis}}\right)\]. \[\delta_{\textbf{delta4_wfn_lesser}}^{\textbf{delta4_wfn}} \; = \mathcal{F}_{\textbf{delta4_scheme}} \left(E_{\text{corl},\; \textbf{delta4_wfn}}^{\textbf{delta4_basis}}\right) - \mathcal{F}_{\textbf{delta4_scheme}} \left(E_{\text{corl},\; \textbf{delta4_wfn_lesser}}^{\textbf{delta4_basis}}\right)\]. \[\delta_{\textbf{delta5_wfn_lesser}}^{\textbf{delta5_wfn}} \; = \mathcal{F}_{\textbf{delta5_scheme}} \left(E_{\text{corl},\; \textbf{delta5_wfn}}^{\textbf{delta5_basis}}\right) - \mathcal{F}_{\textbf{delta5_scheme}} \left(E_{\text{corl},\; \textbf{delta5_wfn_lesser}}^{\textbf{delta5_basis}}\right)\]; A translation of this ungainly equation to example [5] below is as; follows. In words, this is a double- and triple-zeta 2-point; Helgaker-extrapolated CCSD(T) coupled-cluster correlation correction; appended to a triple- and quadruple-zeta 2-point; Helgaker-extrapolated MP2 correlation energy appended to a SCF/aug-cc-pVQZ; reference energy. \[E_{\text{total}}^{\text{CBS}} = \mathcal{F}_{\text{highest_1}} \left(E_{\text{total},\; \text{SCF}}^{\text{aug-cc-pVQZ}}\right) \; + \mathcal{F}_{\text{corl_xtpl_helgaker_2}} \left(E_{\text{corl},\; \text{MP2}}^{\text{aug-cc-pV[TQ]Z}}\right) \; + \delta_{\text{MP2}}^{\text{CCSD(T)}}\]. \[\delta_{\text{MP2}}^{\text{CCSD(T)}} \; = \mathcal{F}_{\text{corl_xtpl_helgaker_2}} \left(E_{\text{corl},\; \text{CCSD(T)}}^{\text{aug-cc-pV[DT]Z}}\right) - \mathcal{F}_{\text{corl_xtpl_helgaker_2}} \left(E_{\text{corl},\; \text{MP2}}^{\text{aug-cc-pV[DT]Z}}\right)\]. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Psithon Functions: Invoking a Calculation; Complete Basis Set; <no title>. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/cbs_eqn.html:3454,update,updated,3454,psi4manual/1.8.x/cbs_eqn.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/cbs_eqn.html,1,['update'],['updated']
Deployability,"orl},\; \textbf{delta3_wfn}}^{\textbf{delta3_basis}}\right) - \mathcal{F}_{\textbf{delta3_scheme}} \left(E_{\text{corl},\; \textbf{delta3_wfn_lesser}}^{\textbf{delta3_basis}}\right)\]. \[\delta_{\textbf{delta4_wfn_lesser}}^{\textbf{delta4_wfn}} \; = \mathcal{F}_{\textbf{delta4_scheme}} \left(E_{\text{corl},\; \textbf{delta4_wfn}}^{\textbf{delta4_basis}}\right) - \mathcal{F}_{\textbf{delta4_scheme}} \left(E_{\text{corl},\; \textbf{delta4_wfn_lesser}}^{\textbf{delta4_basis}}\right)\]. \[\delta_{\textbf{delta5_wfn_lesser}}^{\textbf{delta5_wfn}} \; = \mathcal{F}_{\textbf{delta5_scheme}} \left(E_{\text{corl},\; \textbf{delta5_wfn}}^{\textbf{delta5_basis}}\right) - \mathcal{F}_{\textbf{delta5_scheme}} \left(E_{\text{corl},\; \textbf{delta5_wfn_lesser}}^{\textbf{delta5_basis}}\right)\]; A translation of this ungainly equation to example [5] below is as; follows. In words, this is a double- and triple-zeta 2-point; Helgaker-extrapolated CCSD(T) coupled-cluster correlation correction; appended to a triple- and quadruple-zeta 2-point; Helgaker-extrapolated MP2 correlation energy appended to a SCF/aug-cc-pVQZ; reference energy. \[E_{\text{total}}^{\text{CBS}} = \mathcal{F}_{\text{highest_1}} \left(E_{\text{total},\; \text{SCF}}^{\text{aug-cc-pVQZ}}\right) \; + \mathcal{F}_{\text{corl_xtpl_helgaker_2}} \left(E_{\text{corl},\; \text{MP2}}^{\text{aug-cc-pV[TQ]Z}}\right) \; + \delta_{\text{MP2}}^{\text{CCSD(T)}}\]. \[\delta_{\text{MP2}}^{\text{CCSD(T)}} \; = \mathcal{F}_{\text{corl_xtpl_helgaker_2}} \left(E_{\text{corl},\; \text{CCSD(T)}}^{\text{aug-cc-pV[DT]Z}}\right) - \mathcal{F}_{\text{corl_xtpl_helgaker_2}} \left(E_{\text{corl},\; \text{MP2}}^{\text{aug-cc-pV[DT]Z}}\right)\]. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.9.1;  · . PSI4. Psithon Functions: Invoking a Calculation; Complete Basis Set; <no title>. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 08 February 2024 09:32PM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/cbs_eqn.html:3454,update,updated,3454,psi4manual/1.9.x/cbs_eqn.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/cbs_eqn.html,1,['update'],['updated']
Deployability,"ormal(0, 1, 9).reshape(3, 3); noise = np.divide(noise, np.max(noise)). assert(_get_TR_space(m4, g4).shape == (6, 12)); assert(_get_TR_space(m2, g2).shape == (5, 6)); assert(_get_TR_space(m3, g3).shape == (5, 9)); assert(_get_TR_space(m3, g33).shape == (5, 9)); assert(_get_TR_space(m1, g1).shape == (3, 3)); assert(_get_TR_space(m1, g11).shape == (3, 3)); assert(_get_TR_space(m3, g3noisy, tol=1.e-2).shape == (5, 9)); for ns in range(2, 6):; tol = 10. ** -ns; gnoisy = g3 + tol * noise; assert(_get_TR_space(m3, gnoisy, tol=10*tol).shape == (5, 9)). """"""; sqrtmmm = np.repeat(np.sqrt(m), 3); xxx = np.repeat(geom[:, 0], 3); yyy = np.repeat(geom[:, 1], 3); zzz = np.repeat(geom[:, 2], 3). z = np.zeros_like(m); i = np.ones_like(m); ux = np.ravel([i, z, z], order='F'); uy = np.ravel([z, i, z], order='F'); uz = np.ravel([z, z, i], order='F'). # form translation and rotation unit vectors; T1 = sqrtmmm * ux; T2 = sqrtmmm * uy; T3 = sqrtmmm * uz; R4 = sqrtmmm * (yyy * uz - zzz * uy); R5 = sqrtmmm * (zzz * ux - xxx * uz); R6 = sqrtmmm * (xxx * uy - yyy * ux). TRspace = []; if 'T' in space:; TRspace.append([T1, T2, T3]); if 'R' in space:; TRspace.append([R4, R5, R6]); if not TRspace:; # not sure about this, but it runs; ZZ = np.zeros_like(T1); TRspace.append([ZZ]). TRspace = np.vstack(TRspace). def orth(A, tol=tol):; u, s, vh = np.linalg.svd(A, full_matrices=False); if verbose >= 2:; print(s); M, N = A.shape; eps = np.finfo(float).eps; if tol is None:; tol = max(M, N) * np.amax(s) * eps; num = np.sum(s > tol, dtype=int); Q = u[:, :num]; return Q. TRindep = orth(TRspace.T); TRindep = TRindep.T. if verbose >= 2:; print(TRindep.shape, '<--', TRspace.shape); print(np.linalg.norm(TRindep, axis=1)); print('-' * 80). return TRindep. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .  · ; 1.10a1.dev61;  · . PSI4. Module code; psi4.driver.qcdb.vib. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/_modules/psi4/driver/qcdb/vib.html:43848,update,updated,43848,psi4manual/master/_modules/psi4/driver/qcdb/vib.html,https://psicode.org,https://psicode.org/psi4manual/master/_modules/psi4/driver/qcdb/vib.html,1,['update'],['updated']
Deployability,"ormation for; distributed (sow/reap) input files. """"""; if lmode == 2:; kwargs['mode'] = 'reap'; kwargs['linkage'] = os.getpid(); filename.write('''\npickle_kw = (""""""'''); pickle.dump(kwargs, filename); filename.write('''"""""")\n'''); filename.write(""""""\nkwargs = pickle.loads(pickle_kw)\n""""""); if lmode == 2:; kwargs['mode'] = 'sow'; del kwargs['linkage']. [docs]def drop_duplicates(seq):; """"""Function that given an array *seq*, returns an array without any duplicate; entries. There is no guarantee of which duplicate entry is dropped. """"""; noDupes = []; [noDupes.append(i) for i in seq if not noDupes.count(i)]; return noDupes. [docs]def all_casings(input_string):; """"""Function to return a generator of all lettercase permutations; of *input_string*.; ; """"""; if not input_string:; yield """"; else:; first = input_string[:1]; if first.lower() == first.upper():; for sub_casing in all_casings(input_string[1:]):; yield first + sub_casing; else:; for sub_casing in all_casings(input_string[1:]):; yield first.lower() + sub_casing; yield first.upper() + sub_casing. [docs]def getattr_ignorecase(module, attr):; """"""Function to extract attribute *attr* from *module* if *attr*; is available in any possible lettercase permutation. Returns; attribute if available, None if not.; ; """"""; array = None; for per in list(all_casings(attr)):; try:; getattr(module, per); except AttributeError:; pass; else:; array = getattr(module, per); break. return array. [docs]def import_ignorecase(module):; """"""Function to import *module* in any possible lettercase ; permutation. Returns module object if available, None if not.; ; """"""; modobj = None; for per in list(all_casings(module)):; try:; modobj = __import__(per); except ImportError:; pass; else:; break. return modobj. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    ; PSI4 [beta3] » ; Module code ». © Copyright 2012, The Psi4 Project.; Last updated on Apr 05, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/_modules/procutil.html:5600,update,updated,5600,psi4manual/4.0b3/_modules/procutil.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/_modules/procutil.html,1,['update'],['updated']
Deployability,"ormation for; distributed (sow/reap) input files. """"""; if lmode == 2:; kwargs['mode'] = 'reap'; kwargs['linkage'] = os.getpid(); filename.write('''\npickle_kw = (""""""'''); pickle.dump(kwargs, filename); filename.write('''"""""")\n'''); filename.write(""""""\nkwargs = pickle.loads(pickle_kw)\n""""""); if lmode == 2:; kwargs['mode'] = 'sow'; del kwargs['linkage']. [docs]def drop_duplicates(seq):; """"""Function that given an array *seq*, returns an array without any duplicate; entries. There is no guarantee of which duplicate entry is dropped. """"""; noDupes = []; [noDupes.append(i) for i in seq if not noDupes.count(i)]; return noDupes. [docs]def all_casings(input_string):; """"""Function to return a generator of all lettercase permutations; of *input_string*.; ; """"""; if not input_string:; yield """"; else:; first = input_string[:1]; if first.lower() == first.upper():; for sub_casing in all_casings(input_string[1:]):; yield first + sub_casing; else:; for sub_casing in all_casings(input_string[1:]):; yield first.lower() + sub_casing; yield first.upper() + sub_casing. [docs]def getattr_ignorecase(module, attr):; """"""Function to extract attribute *attr* from *module* if *attr*; is available in any possible lettercase permutation. Returns; attribute if available, None if not.; ; """"""; array = None; for per in list(all_casings(attr)):; try:; getattr(module, per); except AttributeError:; pass; else:; array = getattr(module, per); break. return array. [docs]def import_ignorecase(module):; """"""Function to import *module* in any possible lettercase ; permutation. Returns module object if available, None if not.; ; """"""; modobj = None; for per in list(all_casings(module)):; try:; modobj = __import__(per); except ImportError:; pass; else:; break. return modobj. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». © Copyright 2013, The Psi4 Project.; Last updated on Mar 20, 2014.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/_modules/procutil.html:5600,update,updated,5600,psi4manual/4.0b4/_modules/procutil.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/procutil.html,1,['update'],['updated']
Deployability,"orrected CCSD(T) energies, converted from; atomic units (Hartree) to kcal mol-1 by multiplying by the; automatically-defined conversion factor psi_hartree2kcalmol. PSI4; provides several built-in physical constants and conversion factors, as; described in section Physical Constants.; Notice the loop over \(R\) to create; the table looks just like the loop over R to run the different; computations, and the CP-corrected energies ecp[R] are accessed the same; way they were stored. The print line at the end just specifies some; formatting for the printed table (first element is a floating point number 3; spaces wide with one digit after the decimal, and the second element is a; floating point number 10 spaces wide with 6 digits after the decimal); the; format strings are the same as in the C programming language. For tables more; complicated than the simple one used here, Psithon has built-in support for; tables (see the next section).; Our table is printed at the very end of the output file, and looks like; this; CP-corrected CCSD(T)/aug-cc-pVDZ interaction energies. R (Ang) E_int (kcal/mol); -----------------------------------------------------; 2.5 0.757718; 3.0 0.015687; 4.0 -0.016264. The following section goes over Psithon in much more detail, but; hopefully this example already makes it clear that many complex tasks; can be done very easily in PSI4. table of contents. Psithon Tutorial: Using PSI4 as an Executable; Basic Input File Structure; Sample Input Files; Running a Basic Hartree–Fock Calculation; Geometry Optimization and Vibrational Frequency Analysis; Analysis of Intermolecular Interactions; Potential Surface Scans and Counterpoise Correction Made Easy with Psithon. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. A PSI4 Tutorial; Psithon Tutorial: Using PSI4 as an Executable. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/tutorial.html:23699,update,updated,23699,psi4manual/1.8.x/tutorial.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/tutorial.html,1,['update'],['updated']
Deployability,"orrected CCSD(T) energies, converted from; atomic units (Hartree) to kcal mol-1 by multiplying by the; automatically-defined conversion factor psi_hartree2kcalmol. PSI4; provides several built-in physical constants and conversion factors, as; described in section Physical Constants.; Notice the loop over \(R\) to create; the table looks just like the loop over R to run the different; computations, and the CP-corrected energies ecp[R] are accessed the same; way they were stored. The print line at the end just specifies some; formatting for the printed table (first element is a floating point number 3; spaces wide with one digit after the decimal, and the second element is a; floating point number 10 spaces wide with 6 digits after the decimal); the; format strings are the same as in the C programming language. For tables more; complicated than the simple one used here, Psithon has built-in support for; tables (see the next section).; Our table is printed at the very end of the output file, and looks like; this; CP-corrected CCSD(T)/aug-cc-pVDZ interaction energies. R (Ang) E_int (kcal/mol); -----------------------------------------------------; 2.5 0.757718; 3.0 0.015687; 4.0 -0.016264. The following section goes over Psithon in much more detail, but; hopefully this example already makes it clear that many complex tasks; can be done very easily in PSI4. table of contents. Psithon Tutorial: Using PSI4 as an Executable; Basic Input File Structure; Sample Input Files; Running a Basic Hartree–Fock Calculation; Geometry Optimization and Vibrational Frequency Analysis; Analysis of Intermolecular Interactions; Potential Surface Scans and Counterpoise Correction Made Easy with Psithon. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.9.1;  · . PSI4. A PSI4 Tutorial; Psithon Tutorial: Using PSI4 as an Executable. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 08 February 2024 09:32PM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/tutorial.html:23699,update,updated,23699,psi4manual/1.9.x/tutorial.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/tutorial.html,1,['update'],['updated']
Deployability,"orrelation energy”,; R. F. Fink; Chem. Phys. Lett., 428, 461 (2006); https://doi.org/10.1016/j.cplett.2006.07.081. [Bozkaya:2014:dfomp2grad]; U. Bozkaya,; J. Chem. Theory Comput. 10, 4389-4399 (2014).; https://doi.org/10.1021/ct500634s. [Bozkaya:2016:dfomp3]; U. Bozkaya,; J. Chem. Theory Comput. 12, 1179-1188 (2016).; https://doi.org/10.1021/acs.jctc.5b01128. [Bozkaya:2016:dfolccd]; U. Bozkaya,; Phys. Chem. Chem. Phys. 18, 11362-11373 (2016).; https://doi.org/10.1039/c6cp00164e. [Bozkaya:2016:dfccsdat]; U. Bozkaya,; J. Chem. Phys. 144, 144108 (2016).; https://doi.org/10.1063/1.4945706. [Bozkaya:2016:dfccsdgrad]; U. Bozkaya and C. D. Sherrill,; J. Chem. Phys. 144, 174103 (2016).; https://doi.org/10.1063/1.4948318. [Bozkaya:2017:dfccsdtgrad]; U. Bozkaya and C. D. Sherrill,; J. Chem. Phys. 147, 044104 (2017).; https://doi.org/10.1063/1.4994918. [Bozkaya:2018:dfomp3grad]; U. Bozkaya,; J. Comput. Chem. 39, 351-360 (2018).; https://doi.org/10.1002/jcc.25122. [Bozkaya:2020:dfoccd]; U. Bozkaya,; J. Chem. Phys. 153, 244115 (2020).; https://doi.org/10.1063/5.0035811. [Luu:2023:356]; D. Luu and K. Patkowski,; J. Phys. Chem. A 127, 356-377 (2023).; https://doi.org/10.1021/acs.jpca.2c06465. [Weigend:2002:4285]; F. Weigend,; Phys. Chem. Chem. Phys. 4, 4285-4291 (2002).; https://doi.org/10.1039/B204199P. [Brandenburg:2018:b973c]; J. G. Brandenburg, C.Bannwarth, A. Hansen, S. Grimme,; J. Chem. Phys. 148, 064104, (2018).; https://doi.org/10.1063/1.5012601. [Muller:2023:014103]; M. Müller and A. Hansen and S. Grimme; J. Chem. Phys. 158, 014103 (2023).; https://doi.org/10.1063/5.0133026. [Grimme:2021:064103]; S. Grimme and A. Hansen and S. Ehlert and J.-M. Mewes; J. Chem. Phys. 154, 064103 (2021).; https://doi.org/10.1063/5.0040021. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.9.1;  · . PSI4. Appendices; Bibliography. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 08 February 2024 09:32PM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/bibliography.html:19058,update,updated,19058,psi4manual/1.9.x/bibliography.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/bibliography.html,1,['update'],['updated']
Deployability,"ory is insufficient, the use of the AO_BASIS DISK option; is recommended. This will significantly reduce the memory requirements. However, when; used together with the two-step algorithm, this option can significantly; increase the cost of the energy computation.; In cases when the oscillatory convergence is observed before the DIIS; extrapolation is initialized, it is recommended to increase the threshold for; the RMS of the density cumulant or orbital update residual, below which the; DIIS extrapolation starts. This can be done by setting the; DIIS_START_CONVERGENCE option to the value greater than; \(10^{-3}\) by one or two orders of magnitude (e.g. \(10^{-2}\) or; \(10^{-1}\)). This can be particularly useful for computations using the; ODC methods, because it can greatly reduce the number of iterations.; If oscillatory convergence is observed for atoms or molecules with high; symmetry, it is recommended to use the quadratically-convergent algorithm.; When using the quadratically-convergent algorithm for the closed-shell molecules, it; is recommended to set the QC_COUPLING option to FALSE for efficiency; reasons (set by default).; For the ODC computations, the user has a choice of performing the computation of the guess orbitals and cumulants; using the corresponding DC method (set ODC_GUESS to TRUE). This can often lead to; significant computational savings, since the orbital update step in the DC methods is cheap.; Convergence of the guess orbitals and cumulants can be controlled using the; GUESS_R_CONVERGENCE option. table of contents. DCT: Density Cumulant Theory; Theory; Methods; Iterative Algorithms; Analytic Gradients; Methods Summary; Minimal Input; Recommendations. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Theoretical Methods: SCF to FCI; DCT: Density Cumulant Theory. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/dct.html:15577,update,update,15577,psi4manual/1.8.x/dct.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/dct.html,2,['update'],"['update', 'updated']"
Deployability,"ory is insufficient, the use of the AO_BASIS DISK option; is recommended. This will significantly reduce the memory requirements. However, when; used together with the two-step algorithm, this option can significantly; increase the cost of the energy computation.; In cases when the oscillatory convergence is observed before the DIIS; extrapolation is initialized, it is recommended to increase the threshold for; the RMS of the density cumulant or orbital update residual, below which the; DIIS extrapolation starts. This can be done by setting the; DIIS_START_CONVERGENCE option to the value greater than; \(10^{-3}\) by one or two orders of magnitude (e.g. \(10^{-2}\) or; \(10^{-1}\)). This can be particularly useful for computations using the; ODC methods, because it can greatly reduce the number of iterations.; If oscillatory convergence is observed for atoms or molecules with high; symmetry, it is recommended to use the quadratically-convergent algorithm.; When using the quadratically-convergent algorithm for the closed-shell molecules, it; is recommended to set the QC_COUPLING option to FALSE for efficiency; reasons (set by default).; For the ODC computations, the user has a choice of performing the computation of the guess orbitals and cumulants; using the corresponding DC method (set ODC_GUESS to TRUE). This can often lead to; significant computational savings, since the orbital update step in the DC methods is cheap.; Convergence of the guess orbitals and cumulants can be controlled using the; GUESS_R_CONVERGENCE option. table of contents. DCT: Density Cumulant Theory; Theory; Methods; Iterative Algorithms; Analytic Gradients; Methods Summary; Minimal Input; Recommendations. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.9.1;  · . PSI4. Theoretical Methods: SCF to FCI; DCT: Density Cumulant Theory. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 08 February 2024 09:32PM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/dct.html:15577,update,update,15577,psi4manual/1.9.x/dct.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/dct.html,2,['update'],"['update', 'updated']"
Deployability,"ory requirements of the conventional algorithm would exceed the available resources. The low memory algorithm is faster in general and has been turned on by default starting September 2020. Type: boolean; Default: true. Expert¶. CEPA_LEVEL¶. Which coupled-pair method is called? This parameter is used internally by the python driver. Changing its value won’t have any effect on the procedure. Type: string; Default: CEPA(0). COMPUTE_MP4_TRIPLES¶. Do compute MP4 triples contribution?. Type: boolean; Default: false. COMPUTE_TRIPLES¶. Do compute triples contribution?. Type: boolean; Default: true. RUN_CCSD¶. do ccsd rather than qcisd?. Type: boolean; Default: false. RUN_CEPA¶. Is this a CEPA job? This parameter is used internally by the pythond driver. Changing its value won’t have any effect on the procedure. Type: boolean; Default: false. RUN_MP2¶. do only evaluate mp2 energy?. Type: boolean; Default: false. RUN_MP3¶. do only evaluate mp3 energy?. Type: boolean; Default: false. RUN_MP4¶. do only evaluate mp4 energy?. Type: boolean; Default: false. USE_DF_INTS¶. Use 3-index integrals to generate 4-index ERI’s? This keyword is used for testing purposes only. Changing its value will have no effect on the computation. Type: boolean; Default: false. table of contents. FNOCC; General; ACTIVE_NAT_ORBS; BRUECKNER_MAXITER; CC_SCALE_OS; CC_SCALE_SS; CC_TIMINGS; CEPA_NO_SINGLES; CHOLESKY_TOLERANCE; DFCC; DF_BASIS_CC; DIIS_MAX_VECS; DIPMOM; E_CONVERGENCE; MAXITER; MP2_SCALE_OS; MP2_SCALE_SS; NAT_ORBS; OCC_PERCENTAGE; OCC_TOLERANCE; R_CONVERGENCE; SCS_CCSD; SCS_CEPA; SCS_MP2; TRIPLES_LOW_MEMORY. Expert; CEPA_LEVEL; COMPUTE_MP4_TRIPLES; COMPUTE_TRIPLES; RUN_CCSD; RUN_CEPA; RUN_MP2; RUN_MP3; RUN_MP4; USE_DF_INTS. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Keywords by Module; FNOCC. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/autodir_options_c/module__fnocc.html:5272,update,updated,5272,psi4manual/master/autodir_options_c/module__fnocc.html,https://psicode.org,https://psicode.org/psi4manual/master/autodir_options_c/module__fnocc.html,1,['update'],['updated']
Deployability,"ory. OMP2.5 TOTAL ENERGY¶. OMP2.5 CORRELATION ENERGY¶; The total electronic energy [Eh] and correlation energy component [Eh]; for the orbital-optimized MP2.5 level of theory. OMP3 TOTAL ENERGY¶. OMP3 CORRELATION ENERGY¶; The total electronic energy [Eh] and correlation energy component [Eh]; for the orbital-optimized MP3 level of theory. ONE-ELECTRON ENERGY¶; The one-electron energy contribution [Eh] to the total SCF energy.; Quantity \(E_{1e^-}\) in Eq. (4). PCM POLARIZATION ENERGY¶; The energy contribution [Eh] from the polarizable continuum model for solvation. PE ENERGY¶; The energy contribution [Eh] from the polarizable embedding model for solvation. QCISD TOTAL ENERGY¶. QCISD CORRELATION ENERGY¶; The total electronic energy [Eh] and correlation energy component [Eh]; for the quadratic configuration interaction singles and doubles level; of theory. QCISD(T) TOTAL ENERGY¶. QCISD(T) CORRELATION ENERGY¶; The total electronic energy [Eh] and correlation energy component [Eh]; for the quadratic configuration interaction singles and doubles with; perturbative triples correction level of theory. SAPT DISP ENERGY¶. SAPT ELST ENERGY¶. SAPT EXCH ENERGY¶. SAPT IND ENERGY¶; Respectively, the dispersion, electrostatics, exchange, and induction; components of the total electronic interaction energy [Eh] for the; requested SAPT level of theory. The sum of these four components yields; SAPT TOTAL ENERGY. SAPT TOTAL ENERGY¶. SAPT ENERGY¶; The total electronic interaction energy [Eh] for the requested SAPT; level of theory. SAPT ELST10,R ENERGY¶; An electrostatics-classified SAPT term energy [Eh] implemented for SAPT0. SAPT ELST EXTERN-EXTERN ENERGY¶; Electrostatic interaction [Eh] between the point charges in fragments; A and B in F/I-SAPT. SAPT EXCH10 ENERGY¶; An exchange-classified SAPT term energy [Eh] implemented for SAPT0. SAPT EXCH10(S^2) ENERGY¶; An exchange-classified SAPT term energy [Eh] implemented for SAPT0. SAPT IND20,R ENERGY¶. SAPT EXCH-IND20,R ENERGY¶. SAPT IND2",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/glossary_psivariables-1.html:34770,configurat,configuration,34770,psi4manual/1.4.0/glossary_psivariables-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/glossary_psivariables-1.html,5,['configurat'],['configuration']
Deployability,"ory. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. cbs-xtpl-freq; Various gradients for a strained helium dimer and water molecule. linK-1; RHF Linear Exchange Algorithm test for water. stability3; Test LDA stability analysis against QChem. freq-isotope2; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures, pressures, and isotopologs. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. soscf-ref; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. extern3; External potential calculation with one Ghost atom and one point charge at the same position. isapt1; This test case shows an example of running and analyzing an FI-SAPT0/jun-cc-pvdz computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups). dct1; DC-06, DC-12, ODC-06 and ODC-12 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. dfmp2-2; Density fitted MP2 energy of H2, using density fitted reference and automatic looping over cc-pVDZ and cc-pVTZ basis sets. Results are tabulated using the built in table functions by using the default options and by specifiying the format. cbs-xtpl-energy-conv; Extrapolated water energies - conventional integrals version. x2c3; Test of SFX2C-1e on Water uncontracted cc-pVDZ The reference numbers are from Lan Cheng’s implementation in Cfour. nbody-nocp-gradient; Computation of NoCP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). scf-response1; Compute the dipole, quadrupole, and traceless quadrupoles for water. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTE",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_corepsi4.html:12809,update,update,12809,psi4manual/1.9.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_corepsi4.html,2,['update'],['update']
Deployability,"ory; Methods; Iterative Algorithms; Analytic Gradients; Minimal Input; Recommendations. DF-MP2: Density-Fitted Second-Order Møller-Plesset Perturbation Theory; Introduction; Theory; Recommendations. OCC: Orbital-Optimized Coupled-Cluster and Møller–Plesset Perturbation Theories; Introduction; Theory; Methods; Basic Keywords; Advanced Keywords. OCC: Conventional Møller–Plesset Perturbation Theories; Basic Keywords. CC: Coupled Cluster Methods; Basic Keywords; Larger Calculations; Excited State Coupled Cluster Calculations; Linear Response (CCLR) Calculations. FNOCC: Frozen natural orbitals for CCSD(T), QCISD(T), CEPA, and MP4; Frozen natural orbitals (FNO); QCISD(T), CCSD(T), MP4, and CEPA; Quadratic configuration interaction and coupled cluster; Many-body perturbation theory; Coupled electron pair approximation; Density-fitted coupled cluster; Gn theory; Supported methods; Basic FNOCC Keywords; Advanced FNOCC Keywords. PSIMRCC Implementation of Mk-MRCC Theory; A Simple Example; Orbital ordering and selection of the model space. CI: Configuration Interaction; Basic DETCI Keywords; Arbitrary Order Perturbation Theory; Arbitrary Order Coupled-Cluster Theory. SAPT: Symmetry-Adapted Perturbation Theory; A First Example; SAPT0; Higher-Order SAPT; MP2 Natural Orbitals; Charge-Transfer in SAPT; Interpreting SAPT Results. ADC: Ab Initio Polarization Propagator; Partial Renormalization Scheme; Using the ADC(2) code; Implementation. Geometry Optimization; Basic Keywords; Optimizing Minima; Hessian; Transition States, Reaction Paths, and Constrained Optimizations; Convergence Criteria; Output. Evaluation of One-Electron Properties; Basic Keywords. Previous topic; Basis Sets; Next topic; Notes on Options; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » . © Copyright 2013, The Psi4 Project.; Last updated on Apr 25, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/methods-1.html:2991,update,updated,2991,psi4manual/4.0b4/methods-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/methods-1.html,2,['update'],['updated']
Deployability,"os(a); sinABC = math.sin(a); B = self.rto.compute(); C = self.ato.compute(). eCB = sub(B, C); eCB = normalize(eCB); eX = [0.0, 0.0, 0.0]; eY = [0.0, 0.0, 0.0]; if (math.fabs(1.0 - math.fabs(eCB[0])) < 1.0E-5):; # CB is collinear with X, start by finding Y; eY[1] = 1.0; eX = perp_unit(eY, eCB); eY = perp_unit(eX, eCB); else:; # CB is not collinear with X, we can safely find X first; eX[0] = 1.0; eY = perp_unit(eX, eCB); eX = perp_unit(eY, eCB); for xyz in range(3):; self.coordinates[xyz] = B[xyz] + r * (eY[xyz] * sinABC - eCB[xyz] * cosABC); if math.fabs(self.coordinates[xyz]) < 1.E-14:; self.coordinates[xyz] = 0.0. # The fourth, or subsequent, atom; #; # The atom specification is; # this rTo rVal aTo aVal dTo dVal; # A B C D; # which allows us to define the vector from C->B (eCB) as the +z axis, and eDC; # lies in the xz plane. Then eX, eY and eZ (=eBC) are the x, y, and z axes, respecively.; else:; r = self.rval.compute(); a = self.aval.compute() * math.pi / 180.0; d = self.dval.compute() * math.pi / 180.0; B = self.rto.compute(); C = self.ato.compute(); D = self.dto.compute(). eDC = sub(C, D); eCB = sub(B, C); eDC = normalize(eDC); eCB = normalize(eCB); cosABC = math.cos(a); sinABC = math.sin(a); cosABCD = math.cos(d); sinABCD = math.sin(d); eY = perp_unit(eDC, eCB); eX = perp_unit(eY, eCB); for xyz in range(3):; self.coordinates[xyz] = B[xyz] + r * (eX[xyz] * sinABC * cosABCD +; eY[xyz] * sinABC * sinABCD - eCB[xyz] * cosABC); if math.fabs(self.coordinates[xyz]) < 1.E-14:; self.coordinates[xyz] = 0.0. self.computed = True; return self.coordinates. [docs] def everything(self):; CoordEntry.everything(self); print('\nZMatrixEntry\n Type = %s\n\n' % (self.type())); print(self.print_in_input_format()). Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    ; Psi4 [1.0.0 6a9a71b] » ; Module code ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/libmintscoordentry.html:20868,update,updated,20868,psi4manual/1.0.0/_modules/qcdb/libmintscoordentry.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/libmintscoordentry.html,1,['update'],['updated']
Deployability,"os, Jorgensen, and Aa. Jensen [Olsen:1988]. Excitation-class; selected multi-reference CI wavefunctions, such as second-order CI,; can be formulated as RAS CI’s. A RAS CI selects determinants for the; model space as those which have no more than \(n\) holes in the lowest set; of orbitals (called RAS I) and no more than \(m\) electrons in the highest; set of orbitals (called RAS III). An intermediate set of orbitals, if; present (RAS II), has no restrictions placed upon it. All determinants; satisfying these rules are included in the RAS CI.; The DETCI module is also very efficient at computing full configuration; interaction; wavefunctions, and it is used in this capacity in the complete-active-space; self-consistent-field (CASSCF) code. It can also perform approximate; CASSCF computations in which one uses RAS restrictions on the CI excitations,; rather than doing a full CI in the active space. This is called a; RASSCF. CASSCF and RASSCF computations are types of multi-configurational; self-consistent-field procedures, and are described in sec:mcscf.; As mentioned above, the DETCI module is designed for challenging; chemical systems for which simple CISD is not suitable. Because; CI wavefunctions which go beyond CISD (such as RAS CI) are fairly complex,; typically the DETCI code will be used in cases where the; tradeoffs between computational expense and completeness of the; model space are nontrivial. Hence, the user is advised to develop; a good working knowledge of multi-reference and RAS CI methods before; attempting to use the program for a production-level project. This user’s; manual will provide only an elementary introduction to the most; important keywords. Additional information is available in the complete; list of keywords for DETCI provided in Appendix DETCI.; For single-reference CI computations, the easiest way to invoke a CI; computation with DETCI is simply to call energy(), optimize(), etc.,; with the common name for that CI wavefunction, like ene",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/detci-1.html:3549,configurat,configurational,3549,psi4manual/1.2.1/detci-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/detci-1.html,6,['configurat'],['configurational']
Deployability,"oscillatory convergence is observed. Type: double; Default: 0.0. DCT_GUESS¶. Whether to read the orbitals from a previous computation, or to compute an MP2 guess. Type: string; Possible Values: CC, BCC, MP2, DCT; Default: MP2. DIIS_MAX_VECS¶. Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 6. DIIS_MIN_VECS¶. Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 3. ENERGY_LEVEL_SHIFT¶. Level shift applied to the diagonal of the density-weighted Fock operator. While this shift can improve convergence, it does change the DCT energy. Type: double; Default: 0.0. INTS_TOLERANCE¶. Schwarz screening threshold. Mininum absolute value below which TEI are neglected. Type: conv double; Default: 1e-14. ORBITAL_LEVEL_SHIFT¶. The shift applied to the denominator in the orbital update iterations. Type: double; Default: 0.0. RELAX_GUESS_ORBITALS¶. Controls whether to relax the guess orbitals by taking the guess density cumulant and performing orbital update on the first macroiteration (for ALOGRITHM = TWOSTEP only). Type: boolean; Default: false. STABILITY_ADD_VECTORS¶. The number of vectors that can be added simultaneously into the subspace for Davidson’s diagonalization in stability check. Type: integer; Default: 20. STABILITY_AUGMENT_SPACE_TOL¶. The value of the rms of the residual in Schmidt orthogonalization which is used as a threshold for augmenting the vector subspace in stability check. Type: conv double; Default: 0.1. STABILITY_CHECK¶. Performs stability analysis of the DCT energy. Type: boolean; Default: false. STABILITY_CONVERGENCE¶. Controls the convergence of the Davidson’s diagonalization in stability check. Type: conv double; Default: 1e-4. STABILITY_MAX_SPACE_SIZE¶. The maximum size of the subspace for the stability check. The program will terminate if this parameter is exceeded and the convergence (STABILITY_CONVERGENCE) is not satisfied. Type: integer; Default: 200. STABILITY_N_EIGENVALUES¶. T",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodir_options_c/module__dct-1.html:5473,update,update,5473,psi4manual/1.4.0/autodir_options_c/module__dct-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodir_options_c/module__dct-1.html,9,['update'],['update']
Deployability,"ossible Values: CC, BCC, MP2; Default: MP2. IGNORE_TAU¶. Controls whether to ignore terms containing non-idempotent contribution to OPDM or not (for debug puproses only). For practical applications only the default must be used. Type: boolean; Default: false. INTS_TOLERANCE¶. Minimum absolute value below which integrals are neglected. Type: conv double; Default: 1e-14. LOCK_OCC¶. Controls whether to force the occupation to be that of the SCF guess. For practical applications only the default must be used. Type: boolean; Default: true. MO_RELAX¶. Controls whether to relax the orbitals during the energy computation or not (for debug puproses only). For practical applications only the default must be used. Type: boolean; Default: true. QC_COUPLING¶. Controls whether to include the coupling terms in the DCFT electronic Hessian (for ALOGRITHM = QC only). Type: boolean; Default: true. RELAX_GUESS_ORBITALS¶. Controls whether to relax the guess orbitals by taking the guess density cumulant and performing orbital update on the first macroiteration (for ALOGRITHM = TWOSTEP only). Type: boolean; Default: false. RELAX_TAU¶. Controls whether to relax tau during the cumulant updates or not. Type: boolean; Default: true. STABILITY_ADD_VECTORS¶. The number of vectors that can be added simultaneously into the subspace for Davidson’s diagonalization in stability check. Type: integer; Default: 20. STABILITY_AUGMENT_SPACE_TOL¶. The value of the rms of the residual in Schmidt orthogonalization which is used as a threshold for augmenting the vector subspace in stability check. Type: conv double; Default: 0.1. STABILITY_CHECK¶. Performs stability analysis of the DCFT energy. Type: boolean; Default: false. STABILITY_CONVERGENCE¶. Controls the convergence of the Davidson’s diagonalization in stability check. Type: conv double; Default: 1e-4. STABILITY_MAX_SPACE_SIZE¶. The maximum size of the subspace for the stability check. The program will terminate if this parameter is exceeded and the c",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/autodir_options_c/module__dcft-1.html:4478,update,update,4478,psi4manual/4.0b3/autodir_options_c/module__dcft-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodir_options_c/module__dcft-1.html,2,['update'],['update']
Deployability,"ossible Values: basis string; Default: NONE. DFMP2_MEM_FACTOR¶. % of memory for DF-MP2 three-index buffers. Type: double; Default: 0.9. DFMP2_P2_TOLERANCE¶. Minimum error in the 2-norm of the P(2) matrix for corrections to Lia and P. Type: conv double; Default: 0.0. DFMP2_P_TOLERANCE¶. Minimum error in the 2-norm of the P matrix for skeleton-core Fock matrix derivatives. Type: conv double; Default: 0.0. DF_BASIS_MP2¶. Auxiliary basis set for MP2 density fitting computations. Defaults to a RI basis. Type: string; Possible Values: basis string; Default: No Default. DF_INTS_NUM_THREADS¶. Number of threads to compute integrals with. 0 is wild card. Type: integer; Default: 0. INTS_TOLERANCE¶. Minimum absolute value below which integrals are neglected. Type: conv double; Default: 0.0. MP2_OS_SCALE¶. OS Scale. Type: double; Default: 6.0/5.0. MP2_SS_SCALE¶. SS Scale. Type: double; Default: 1.0/3.0. MP2_TYPE¶. Algorithm to use for the MP2 computation. Type: string; Possible Values: DF, CONV; Default: DF. ONEPDM¶. Do compute one-particle density matrix?. Type: boolean; Default: false. OPDM_RELAX¶. Do relax the one-particle density matrix?. Type: boolean; Default: true. Expert¶. DF_INTS_IO¶. IO caching for CP corrections, etc. Type: string; Possible Values: NONE, SAVE, LOAD; Default: NONE. MADMP2_SLEEP¶. A helpful option, used only in debugging the MADNESS version. Type: integer; Default: 0. Table Of Contents. DFMP2; General; BASIS; DFMP2_MEM_FACTOR; DFMP2_P2_TOLERANCE; DFMP2_P_TOLERANCE; DF_BASIS_MP2; DF_INTS_NUM_THREADS; INTS_TOLERANCE; MP2_OS_SCALE; MP2_SS_SCALE; MP2_TYPE; ONEPDM; OPDM_RELAX. Expert; DF_INTS_IO; MADMP2_SLEEP. Previous topic; WFN; Next topic; BASIS; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; Keywords by Module ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 25, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/autodir_options_c/module__dfmp2-1.html:2243,update,updated,2243,psi4manual/4.0b4/autodir_options_c/module__dfmp2-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodir_options_c/module__dfmp2-1.html,2,['update'],['updated']
Deployability,"ossible Values: basis string; Default: NONE. DFMP2_MEM_FACTOR¶. % of memory for DF-MP2 three-index buffers. Type: double; Default: 0.9. DFMP2_P2_TOLERANCE¶. Minimum error in the 2-norm of the P(2) matrix for corrections to Lia and P. Type: conv double; Default: 0.0. DFMP2_P_TOLERANCE¶. Minimum error in the 2-norm of the P matrix for skeleton-core Fock matrix derivatives. Type: conv double; Default: 0.0. DF_BASIS_MP2¶. Auxiliary basis set for MP2 density fitting computations. Defaults to a RI basis. Type: string; Possible Values: basis string; Default: No Default. DF_INTS_NUM_THREADS¶. Number of threads to compute integrals with. 0 is wild card. Type: integer; Default: 0. INTS_TOLERANCE¶. Minimum absolute value below which integrals are neglected. Type: conv double; Default: 0.0. MP2_OS_SCALE¶. OS Scale. Type: double; Default: 6.0/5.0. MP2_SS_SCALE¶. SS Scale. Type: double; Default: 1.0/3.0. MP2_TYPE¶. Algorithm to use for the MP2 computation. Type: string; Possible Values: DF, CONV; Default: DF. ONEPDM¶. Do compute one-particle density matrix?. Type: boolean; Default: false. OPDM_RELAX¶. Do relax the one-particle density matrix?. Type: boolean; Default: true. Expert¶. DF_INTS_IO¶. IO caching for CP corrections, etc. Type: string; Possible Values: NONE, SAVE, LOAD; Default: NONE. MADMP2_SLEEP¶. A helpful option, used only in debugging the MADNESS version. Type: integer; Default: 0. Table Of Contents. DFMP2; General; BASIS; DFMP2_MEM_FACTOR; DFMP2_P2_TOLERANCE; DFMP2_P_TOLERANCE; DF_BASIS_MP2; DF_INTS_NUM_THREADS; INTS_TOLERANCE; MP2_OS_SCALE; MP2_SS_SCALE; MP2_TYPE; ONEPDM; OPDM_RELAX. Expert; DF_INTS_IO; MADMP2_SLEEP. Previous topic; WFN; Next topic; BASIS; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/autodir_options_c/module__dfmp2-1.html:2243,update,updated,2243,psi4manual/4.0b5/autodir_options_c/module__dfmp2-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/module__dfmp2-1.html,2,['update'],['updated']
Deployability,"osurface value (float, default = 0.05); --rx [<angle>] the x-axis rotation angle (float, default = 30.0); --ry [<angle>] the y-axis rotation angle (float, default = 40.0); --rz [<angle>] the z-axis rotation angle (float, default = 15.0); --tx [<length>] the x-axis translation (float, default = 0.0); --ty [<length>] the y-axis translation (float, default = 0.0); --tz [<length>] the z-axis translation (float, default = 0.0); --opacity [<opacity>]; opacity of the isosurface (float, default = 1.0); --scale [<factor>] the scaling factor (float, default = 1.0); --no-montage call montage to combine images. (string, default =; false); --no-labels do not add labels to images. (string, default = false); --imagesize [<integer>]; the size of each image (integer, default = 250); --imagew [<integer>] the width of images (integer, default = 250); --imageh [<integer>] the height of images (integer, default = 250); --fontsize [<integer>]; the font size (integer, default = 20); --interactive run in interactive mode (default = false); --gzip gzip cube files (default = false); --national_scheme use a red/blue color scheme. (string, default = false); --silver_scheme use a gray/white color scheme. (string, default =; false); --bright_scheme use a soft yellow/blue color scheme. (string, default; = false); --electron_scheme use a purple/green color scheme. (string, default =; false). table of contents. Generation of Cube Files — cubeprop(); Introduction; Cubeprop Tasks; Keywords; CUBEPROP_TASKS; CUBEPROP_FILEPATH; CUBEPROP_ORBITALS; CUBEPROP_BASIS_FUNCTIONS; CUBIC_GRID_SPACING; CUBIC_GRID_OVERAGE. Orbital Visualization with VMD; Script Prerequisites; Running the Script; Script Options. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Psithon Functions: Invoking a Calculation; Generation of Cube Files — cubeprop(). © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/cubeprop.html:11930,update,updated,11930,psi4manual/1.7.x/cubeprop.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/cubeprop.html,1,['update'],['updated']
Deployability,"ot occupied in CI wavefunctions, but orbitals can be optimized in MCSCF). Type: array; Default: No Default. SORTED_TEI_FILE¶. Type: integer; Default: PSIF_MO_TEI. SO_S_FILE¶. Type: integer; Default: PSIF_OEI. SO_TEI_FILE¶. Type: integer; Default: PSIF_SO_TEI. SO_T_FILE¶. Type: integer; Default: PSIF_OEI. SO_V_FILE¶. Type: integer; Default: PSIF_OEI. TPDM_ADD_REF¶. Do ?. Type: boolean; Default: false. TPDM_FILE¶. Type: integer; Default: PSIF_MO_TPDM. Expert¶. RAS1¶. An array giving the number of orbitals per irrep for RAS1. Type: array; Default: No Default. RAS2¶. An array giving the number of orbitals per irrep for RAS2. Type: array; Default: No Default. RAS3¶. An array giving the number of orbitals per irrep for RAS3. Type: array; Default: No Default. RAS4¶. An array giving the number of orbitals per irrep for RAS4. Type: array; Default: No Default. WFN¶. Wavefunction type. Type: string; Default: CCSD. Table Of Contents. TRANSQT; General; AA_M_FILE; AB_M_FILE; AO_BASIS; BB_M_FILE; CHECK_C_ORTHONORM; DELETE_AO; DELETE_RESTR_DOCC; DELETE_TPDM; DO_ALL_TEI; FIRST_TMP_FILE; FZC_A_FILE; FZC_B_FILE; FZC_FILE; INTS_TOLERANCE; IVO; J_FILE; KEEP_J; KEEP_PRESORT; LAGRAN_DOUBLE; LAGRAN_HALVE; LAG_IN_FILE; MAX_BUCKETS; MODE; MOORDER; MP2R12A; M_FILE; OEI_A_FILE; OEI_B_FILE; OEI_FILE; OPDM_IN_FILE; OPDM_OUT_FILE; PITZER; PRESORT_FILE; PRINT_LVL; PRINT_MOS; PRINT_OE_INTEGRALS; PRINT_REORDER; PRINT_SORTED_OE_INTS; PRINT_SORTED_TE_INTS; PRINT_TE_INTEGRALS; PSIMRCC; QRHF; REFERENCE; REORDER; RESTRICTED_DOCC; RESTRICTED_UOCC; SORTED_TEI_FILE; SO_S_FILE; SO_TEI_FILE; SO_T_FILE; SO_V_FILE; TPDM_ADD_REF; TPDM_FILE. Expert; RAS1; RAS2; RAS3; RAS4; WFN. Previous topic; SCALE; Next topic; AA_M_FILE; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Appendices »; Keywords by Module ». © Copyright 2012, Psi4 Project.; Last updated on Sep 30, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/autodir_options_c/module__transqt-1.html:4937,update,updated,4937,psi4manual/4.0b2/autodir_options_c/module__transqt-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/autodir_options_c/module__transqt-1.html,2,['update'],['updated']
Deployability,"ot unique because oribital spaces vary. DMRG-CASPT2 TOTAL ENERGY¶; The total DMRG plus CASPT2 total electonic energy [E_h] . Not unique because orbital spaces vary. EFP DISP ENERGY¶. EFP ELST ENERGY¶. EFP EXCH ENERGY¶. EFP IND ENERGY¶; Respectively, the dispersion, electrostatics, exchange, and induction; components of the total electronic interaction energy [E_h] for EFP/EFP; computations. The sum of these four components yields; EFP TOTAL ENERGY. EFP TOTAL ENERGY¶; The total electronic interaction energy [E_h] for EFP/EFP computations. EFP TORQUE¶; The torque, not gradient for EFP/EFP computations. ENTHALPY¶; Total enthalpy H [E_h] at given temperature. ENTHALPY CORRECTION¶; Sum of electronic, translational, rotational, and vibrational corrections [E_h] to the enthalpy at given temperature. ESP AT CENTER n¶; Property of electrostatic potential [E_h / e] at location, usually atom center, n. FCI TOTAL ENERGY¶. FCI CORRELATION ENERGY¶; The total electronic energy [E_h] and correlation energy component [E_h]; for the full configuration interaction level of theory. GIBBS FREE ENERGY¶; Total Gibbs free energy [E_h], free enthalpy at given temperature. GIBBS FREE ENERGY CORRECTION¶; Sum of electronic, translational, rotational, and vibrational corrections [E_h] to the free enthalpy at given temperature. GRID ELECTRONS TOTAL¶. GRID ELECTRONS ALPHA¶. GRID ELECTRONS BETA¶; The number of electrons integrated by the xc quadrature grid. HF TOTAL ENERGY¶; The total electronic energy [E_h] for the Hartree–Fock method, without; any dispersion correction; the first three (or four, since; \(E_{xc} = 0\)) terms in Eq. (4). Quantity \(E_{\text{HF}}\); in Eq. (4). HF KINETIC ENERGY¶; The total kinetic energy [E_h] of the Hartree–Fock method. HF POTENTIAL ENERGY¶; The total potential energy [E_h] of the Hartree–Fock method. HF VIRIAL RATIO¶; The virial ratio of the Hartree–Fock method. Only defined for a fully quantum mechanical computation, i.e., not QM/MM. HF TOTAL GRADIENT¶; The tota",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/glossary_psivariables.html:31713,configurat,configuration,31713,psi4manual/1.7.x/glossary_psivariables.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/glossary_psivariables.html,4,['configurat'],['configuration']
Deployability,"ote that not all dependencies; are encoded (PSI variables, for instance, depend on every .cc file in the; source tree), so for a definitive doc build, run make realclean and; start from scratch. reStructuredText¶; Sphinx files are written in reStructuredText (*.rst). In the html; documentation, source code is available from the sidebar. Here’re a; few resources on Sphinx formatting. reStructuredText; rendered test document; vs. source test document; Another reStructuredText; A third reStructuredText and Sphinx; LaTeX that Sphinx can handle; Sphinx Docs. Math in the Codebase¶; It is often useful to have mathematical expressions in docstrings or; comments in the code that are auto-documented into the manual. Such; locations include the #! comment comments at the top of test case; input files, the /*- comment -*/ comments in; psi4/src/bin/psi4/read_options.cc, and the """""" comment """"""; docstrings in python modules. For the two former, math has traditionally; been written in LaTeX (with the special substitution @@ for; subscripting underscore). The autodoc script has been trained to convert; inline LaTeX math to reST math, provided the expression within dollar; signs is offset from other text. That is, expressions of the form; ^ $latex math$[., ]$ (pseudo-regex) are good, while H$_2$O and LaTeX tables; are not translated correctly. Python docstrings are absorbed as-is, so; please use reST math formatting (essentially $latex math$ ; :math:`latex math`). Table Of Contents. Documentation; Installing Sphinx; Documentation Structure; reStructuredText; Math in the Codebase. Previous topic; Best Practices for Python Functions; Next topic; Programming: Using the Core Libraries; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Contributions: Intro to Programming in PSI4 ». © Copyright 2012, Psi4 Project.; Last updated on Sep 30, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/documentation-1.html:5037,update,updated,5037,psi4manual/4.0b2/documentation-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/documentation-1.html,2,['update'],['updated']
Deployability,"ote the id field value; Use the id value in the shortcode call at the bottom. Finalize release¶. Make new PR with; * edits to main README.md badges, python versions, etc.; * edits to CMakeLists.txt find_package(PythonLibsNew 3.6 REQUIRED); Tweet about release. Reset psi4meta for nightly operation¶; On both Linux and Mac:. After (post)release (not prerelease), in conda_build_config.yaml, edit ltrtver to a new “release.dev” label; After postrelease, unpin any dependencies in cbcy that needed older either ver or bld (e.g., v2rdm_casscf_bld); Edit psi4ver back to '' in cbcy; Edit source/git_tag back to master for psi4-multiout, psi4-docs; Edit build string back to 0 if psi4-multiout needed multiple passes; Edit kitandkapoodle.py back to *** stack; Check in all release, construct, recipe changes on Linux and Mac. Synchronize both to GitHub psi4meta; Copy meta.yaml and build.sh files to vMmp-prefixed files for the record.; Edit crontab back to 2am “norm”. Comment out “anom”. table of contents. Release Procedures; Annual; Pre-Release (e.g., v1.3rc1); Release (e.g., v1.3); Post-Release (e.g., v1.3.1); Update copyright year; Update samples; Collect new authors; Anticipate next release; Build Conda ecosystem stack; Assemble postrelease changes; Tweak Conda for postrelease; Do final pass before release tag; Tag (pre)release; Tag postrelease; Initialize release branch; Build Conda Psi4 stack at specific commit; Publish to main conda label; Build Psi4conda set (pre-Spring 2021); Build Psi4conda set; Generate download page for psicode.org; Collect documentation snapshot; Publish GitHub release; Publish GitHub postrelease; Publish psicode release; Finalize release; Reset psi4meta for nightly operation. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Managing: Git, Conda, CMake and all that; Release Procedures. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/manage_release-1.html:19686,release,release,19686,psi4manual/1.5.0/manage_release-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/manage_release-1.html,16,"['release', 'update']","['release', 'updated']"
Deployability,"otential/electron affinity (IP/EA) [Nooijen:1995:3629]; approaches.; The Psi4FockCI plugin allows one to perform spin-flip (SF), ionization; potential (IP), and electron affinity (EA) calculations, as well as; combined RAS-SF-IP/EA calculations, through the DETCI (CI: Configuration Interaction) module. Installation¶. Download the plugin from the GitHub repository:; >>> git clone https://github.com/shannonhouck/psi4fockci.git. Once downloaded, the plugin can be installed as follows:; >>> cd {top-level-psi4fockci-directory}; >>> python -m pip install . Sample Input¶; To run a CAS-nSF-IP/EA calculation, start with a molecule with the; correct charge and multiplicity for the reference state (i.e. some; state well-represented by a single reference). Then, run an energy; calculation, passing in the charge and multiplicity of the; desired state; the number of spin-flips and IP/EA will be automatically; determined based on this input. If additional excitations outside of the; RAS II space are desired, one can set the level of external; excitations using the conf_space keyword.; A sample input file for a RAS(h)-2SF-IP calculation is shown below:; molecule {; 0 7; N 0.0 0.0 0.0; N 0.0 0.0 1.3; symmetry c1; }. set {; basis cc-pVDZ; }. energy('psi4fockci', new_charge=1, new_multiplicity=1, conf_space=""h""). Note that for calculations involving IP/EA, inclusion of hole (for IP) and; particle (for EA) excitations is strongly recommended. Additional keywords; can be found in the documentation.; This input file can be run with Psi4:; >>> psi4 input.dat. table of contents. Psi4FockCI: A General Fock-Space CI For Spin-Flip And IP/EA; Installation; Sample Input. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Psi4FockCI: A General Fock-Space CI For Spin-Flip And IP/EA. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/plugin_psi4fockci.html:2544,update,updated,2544,psi4manual/1.7.x/plugin_psi4fockci.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/plugin_psi4fockci.html,1,['update'],['updated']
Deployability,"oth conventional and; density-fitted.; Details about angular momentum settings are available here; psi4/external/upstream/libint2/CMakeLists.txt; . How to see what build configuration options are available¶; CMake doesn’t provide a summary for this (unless you want to try the CMake; GUI, which the developers have never looked at). However, the top half of; the main CMakeLists.txt is a passable summary:; LANGUAGES C CXX); set(psi4_URL ""http://www.psicode.org/""); set(psi4_EMAIL ""psi4aiqc+cmake@gmail.com""); set(psi4_LICENSE ""GNU Lesser General Public License, version 3 (LGPL-3.0)""); set(psi4_DESCRIPTION ""Open-Source Quantum Chemistry""). list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake). message(STATUS ""Building using CMake ${CMAKE_VERSION} Generator ${CMAKE_GENERATOR}""). ################ Options: Overview and Not Otherwise Mentioned ###############. # <<< CMake build overview >>>; #; # >>> ls; # external/ COPYING psi4/ tests/ ...; # >>> cmake -S. -Bobjdir -DCMAKE_INSTALL_PREFIX=/path/to/install-psi4 ...; # ...; # -- Generating done; # -- Build files have been written to: /current/dir/objdir; # >>> cmake --build objdir --target install -j`getconf _NPROCESSORS_ONLN`. # <<< Required build dependencies that Psi4 can't build itself >>>; #; # - CMake (e.g., `conda install cmake`); # - C++ and C compilers (C++17 compliant); # - BLAS/LAPACK (also runtime; e.g., `conda install mkl-devel`); # - Python (also runtime; interpreter and headers; e.g., `conda install python`); # - NumPy (also runtime; avoidable at buildtime if gau2grid pre-built; e.g., `conda install numpy`); # - networkx >=2.4 (runtime only; e.g., `conda install networkx`); # - pint >=0.10 (runtime only; e.g., `conda install pint -c conda-forge`); # - pydantic >=1.0 (runtime only; e.g., `conda install pydantic -c conda-forge`); # - msgpack-python (runtime only; e.g., `conda install msgpack-python`); # - Eigen (for Libint2; e.g., `conda install eigen`); # - SciPy (runtime only; e.g., `conda install scip",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/build_planning.html:14008,install,install-,14008,psi4manual/1.6.x/build_planning.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/build_planning.html,2,['install'],['install-']
Deployability,"oto Fork-from-GitHub; I want to develop using PSI4 infrastructure and libraries, not; on them; I think a plugin might do. I’ve got a PSI4 compilation. Use it, then consult plugins; I’d rather not compile PSI4 or I don’t have compilers —; Goto Binary-Package then consult; plugins through conda. I really like parentheses and/or DBOC, so I want Psi3. —; Psi3 is available from sourceforge, but you’re on your own. Binary Installer¶. Get Initially; Just go to http://www.psicode.org/downloads.html, select “Installer”,; “Stable Release”, and your choice of architecture and Python version,; and follow the instructions there. Build; Not applicable as binary is pre-built. Get Updates directions; >>> conda update psi4. Contribute Back; Not applicable as not under git control. Conda Binary Package¶. Get Initially; The pre-compiled conda packages at https://anaconda.org/psi4/psi4; can be installed into an existing Anaconda or Miniconda distribution; according to directions. Locally, install into; a conda environment as below.; >>> conda create -n p4env psi4 -c psi4; >>> conda activate p4env. >>> # nightly build; >>> conda create -n p4env psi4 -c psi4/label/dev; >>> # Windows; >>> conda create -n p4env psi4 -c psi4 -c conda-forge. Build; Not applicable as binary is pre-built. Get Updates directions; >>> conda update psi4 -c psi4. Contribute Back; Not applicable as not under git control. Clone from GitHub Repository¶. Get Initially; The PSI4 repository at https://github.com/psi4/psi4 works like; every other GitHub repo.; Locally, clone as below.; # use https or ssh; >>> git clone https://github.com/psi4/psi4.git; >>> cd psi4; # this is your {top-level-psi4-dir}. Build directions; Get Updates; # on branch master; >>> git pull origin master. Contribute Back; Contributions cannot be made directly to the main repository. Fork; instead.; To convert clone to fork, go to https://github.com/psi4/psi4, and; hit the Fork; button to store a PSI4 repository in your GitHub account.; >>> git remo",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/build_obtaining-1.html:2942,install,install,2942,psi4manual/1.4.0/build_obtaining-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/build_obtaining-1.html,6,['install'],['install']
Deployability,"ot¶. Documentation is built automatically by GHA from the latest psi4 master commit. It gets pushed to; a special “master” folder on the https://github.com/psi4/psi4docs repository. From there, it and; other docs snapshots are built and served to https://psi4.github.io/psi4docs/master/ (independent; of psicode.org). The netlify psicode.org site has a redirect so that; https://psicode.org/psi4manual/master/index.html presents the psi4docs repo content. GHA sphinx-build controller is psi4/.github/workflows/docs.yml; GHA gh-pages deploy controller is https://github.com/psi4/psi4docs/blob/master/.github/workflows/docs.yml; Netlify psicode redirect controller is https://github.com/psi4/psicode-hugo-website/blob/master/netlify.toml#L10-L15. This setup works great for “latest” docs, but it won’t necessarily build a nice copy on the tag; commit itself for release and postrelease snapshots. Get a snapshot on the tag by some means:. For releases and postreleases, any commit to the maintenance branch will build docs and upload; to the branch name in psi4docs. This should be pre-positioned by GHA, so check that docs with; the right version are deployed and then no further action required (can skip ahead to README.md; and netlify.toml steps).; For releases, you can do the atomic push of the tag commit, wait for the docs build to; complete, download the GHA artifact (zipped docs dir), then continue by pushing the record commit.; For releases beyond the atomic push, navigate on psi4 GH to the tag commit (not the record; commit) and retrigger the docs GHA, then download the GHA artifact (zipped docs dir).; For postreleases, build the docs locally at the tag and collect the docs dir. In your local clone of https://github.com/psi4/psi4docs, find the appropriate folder and unpack; your docs snapshot into it. For releases, you’ll need to make a new folder, e.g. sphinxman/1.8.x.; For postreleases, you’ll overwrite the contents of the existing folder.; Unpack and rearrange so that in the",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/manage_release.html:20063,release,releases,20063,psi4manual/1.9.x/manage_release.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/manage_release.html,2,['release'],['releases']
Deployability,"ou are using Linux. However,; we recommend reading and following the full ATLAS installation notes.; You’ll need a Fortran compiler installed.; Unpack the source code, then make a compilation directory (could; be an obj subdirectory in the source directory, or elsewhere).; Turn off CPU throttling so the auto-tuning capabilities have a chance; to work. On Linux, this can be tune using; /usr/bin/cpufreq-selector -g performance. cd into the compilation directory and run the source; directory configure script there, with any necessary flags, e.g.,; /usr/local/src/atlas/configure --prefix=/usr/local/atlas. where prefix gives the installation directory.; It should automatically detect if you’re on an x86_64; Then make and check using; make; make check; make ptcheck. And install; make install. Compilation notes for netlib’s LAPACK; These shortcut notes might be helpful if you are using Linux. However,; we recommend reading and following the full LAPACK installation notes.; You’ll need a Fortran compiler installed.; If you decide to compile LAPACK from source, it may be obtained from; http://www.netlib.org/lapack/. Unpack the source code, and in the; top-level source directory, you need to create a make.inc file with; the appropriate options for your machine. For Linux/gfortran,; simply; cp make.inc.example make.inc. Next, edit BLASLIB in make.inc to point to your BLAS library; (full pathnames are recommended):; BLASLIB = /home/david/software/atlas3.9.25/lib/libf77blas.a /home/david/software/atlas3.9.25/lib/libatlas.a. Edit Makefile as necessary (probably not needed).; make. Copy the resulting file [lapack_($ARCH).a] where you want it; (a standard location like /usr/local/lib is easier for PSI to find).; It is probably helpful to rename the file liblapack.a. V. Miscellaneous Architecture-Specific Notes¶. Linux on x86 and x86_64; Intel compilers: We had trouble with icpc 12.0.x. Use 12.1 or; later. VI. Common Problems with PSI Compilation¶. No rule to make target foo.h, neede",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/installfile.html:25037,install,installed,25037,psi4manual/4.0b3/installfile.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/installfile.html,3,['install'],['installed']
Deployability,"ou must specify the Python executable as the program. Arguments are provided using the --args flag. Here’s an example.::$~> gdb –args /usr/bin/python3 /path/to/psi4 input.dat. In order to debug properly, Psi4 needs to be built with the CMAKE_BUILD_TYPE variable set to either Debug or RelWithDebInfo. These will output debugging symbols that will allow gdb to print line numbers and; inline function names.:; > cmake [your options here] -DCMAKE_BUILD_TYPE=Debug; > cmake [your options here] -DCMAKE_BUILD_TYPE=RelWithDebInfo. Certain symbols may not be output even with this flag set. In general, any template function used should be visible, and anything with the PSI_API modifier will be visible. Other variables, functions, and classes will; likely be hidden from the user. To make these symbols visible, you must modify a few variables. For an example, see TiborGY’s debug branch.; Also see more debugger directions; and a [presentation] .; If building using psi4-path-advisor cmake, one should run it straight, not within eval $(...), note the usage command it outputs, then edit the cache file it has produced to change CMAKE_BUILD_TYPE to Debug and CMAKE_CXX_FLAGS to -O0, then execute the noted cmake ... -C cache command to configure. VSCode¶; When using gdb wath VSCode, you should set the program entry to the Python executable, just as before. Arguments can then be placed in the args entry. If you are debugging a C++ plugin or backend code,; the launch type should be cppdbg. Profiling¶; Instructions on using Psi4 with a profiler, or/and discuss how timers work; in Psi4… they are hierarchical…. I think we have special timers for; parallel blocks. table of contents. Debugging and Profiling; Debugging; VSCode. Profiling. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Debugging and Profiling. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/prog_debug_profile.html:2180,update,updated,2180,psi4manual/master/prog_debug_profile.html,https://psicode.org,https://psicode.org/psi4manual/master/prog_debug_profile.html,1,['update'],['updated']
Deployability,"ouble; Default: 0.75. S_ORTHOGONALIZATION¶. SO orthogonalization: symmetric or canonical?. Type: string; Possible Values: SYMMETRIC, CANONICAL; Default: SYMMETRIC. S_TOLERANCE¶. Minimum S matrix eigenvalue to be used before compensating for linear dependencies. Type: conv double; Default: 1e-7. Convergence Control/Stabilization¶. BASIS_GUESS¶. Accelerate convergence by performing a preliminary scf with this small basis set followed by projection into the full target basis. A value of TRUE turns on projection using the 3-21G small basis set. Type: string; Default: FALSE. DAMPING_CONVERGENCE¶. The density convergence threshold after which damping is no longer performed, if it is enabled. It is recommended to leave damping on until convergence, which is the default. Cfour Interface: Keyword translates into CFOUR_SCF_DAMPING. Type: conv double; Default: 1.0e-18. DAMPING_PERCENTAGE¶. The amount (percentage) of damping to apply to the early density updates. 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the previous iteration’s density being mixed into the current density) could help to solve problems with oscillatory convergence. Type: double; Default: 0.0. DF_BASIS_GUESS¶. When BASIS_GUESS is active, run the preliminary scf in density-fitted mode with this as fitting basis for the small basis set. A value of TRUE turns on density fitting with the default basis, otherwise the specified basis is used. Type: string; Possible Values: basis string; Default: FALSE. DIIS¶. Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. DIIS_MAX_VECS¶. Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 10. DIIS_MIN_VECS¶. Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_START¶. The minimum iteration to start storing DIIS vectors. Type: integer; Default: 1. D_CONVERGENCE¶. Convergence criterion for SCF density",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/autodir_options_c/module__scf-1.html:3480,update,update,3480,psi4manual/1.2.1/autodir_options_c/module__scf-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/autodir_options_c/module__scf-1.html,4,['update'],['update']
Deployability,"ouble; Default: 1.27. CC_RAS34_MAX (DETCI); DETCI — maximum number of electrons in RAS III + IV, for CC. Type: integer; Default: -1. CC_RAS3_MAX (DETCI); DETCI — maximum number of electrons in RAS III, for CC. Type: integer; Default: -1. CC_RAS4_MAX (DETCI); DETCI — maximum number of electrons in RAS IV, for CC. Type: integer; Default: -1. CC_SCALE_OS (FNOCC); FNOCC — Oppposite-spin scaling factor for SCS-CCSD. Type: double; Default: 1.27. CC_SCALE_SS (FNOCC); FNOCC — Same-spin scaling factor for SCS-CCSD. Type: double; Default: 1.13. CC_SS_SCALE (CCENERGY); CCENERGY — Coupled-cluster same-spin scaling value. Type: double; Default: 1.13. CC_TIMINGS (FNOCC); FNOCC — Do time each cc diagram?. Type: boolean; Default: false. CC_TYPE (GLOBALS); GLOBALS — Algorithm to use for CC or CEPA computation (e.g., CCD, CCSD(T), CEPA(3), ACPF). See Cross-module Redundancies for details. Type: string; Possible Values: DF, CONV, CD; Default: CONV. CC_UPDATE_EPS (DETCI); DETCI (Expert) — Do update T amplitudes with orbital eigenvalues? (Usually would do this). Not doing this is experimental. Type: boolean; Default: true. CC_VAL_EX_LEVEL (DETCI); DETCI — The CC valence excitation level. Type: integer; Default: 0. CC_VARIATIONAL (DETCI); DETCI (Expert) — Do use variational energy expression in CC computation? Experimental. Type: boolean; Default: false. CC_VECS_READ (DETCI); DETCI — Do import a CC vector from disk?. Type: boolean; Default: false. CC_VECS_WRITE (DETCI); DETCI — Do export a CC vector to disk?. Type: boolean; Default: false. CCD_E_CONVERGENCE (SAPT); SAPT — E converge value for CCD. Type: conv double; Default: 1e-8. CCD_MAXITER (SAPT); SAPT — Max CCD iterations. Type: integer; Default: 50. CCD_T_CONVERGENCE (SAPT); SAPT — Convergence tolerance for CCD amplitudes. Type: conv double; Default: 1e-8. CCL_ENERGY (OCC); OCC — Do compute CC Lambda energy? In order to this option to be valid one should use “TPDM_ABCD_TYPE = COMPUTE” * option. Type: boolean; Default: false. CEPA_LE",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/autodoc_glossary_options_c-1.html:15110,update,update,15110,psi4manual/1.3.2/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/autodoc_glossary_options_c-1.html,2,['update'],['update']
Deployability,"ouble; Default: 1.27. CC_RAS34_MAX (DETCI); DETCI — maximum number of electrons in RAS III + IV, for CC. Type: integer; Default: -1. CC_RAS3_MAX (DETCI); DETCI — maximum number of electrons in RAS III, for CC. Type: integer; Default: -1. CC_RAS4_MAX (DETCI); DETCI — maximum number of electrons in RAS IV, for CC. Type: integer; Default: -1. CC_SCALE_OS (FNOCC); FNOCC — Oppposite-spin scaling factor for SCS-CCSD. Type: double; Default: 1.27. CC_SCALE_SS (FNOCC); FNOCC — Same-spin scaling factor for SCS-CCSD. Type: double; Default: 1.13. CC_SS_SCALE (CCENERGY); CCENERGY — Coupled-cluster same-spin scaling value. Type: double; Default: 1.13. CC_TIMINGS (FNOCC); FNOCC — Do time each cc diagram?. Type: boolean; Default: false. CC_TYPE (GLOBALS); GLOBALS — Algorithm to use for CC or CEPA computation (e.g., CCD, CCSD(T), CEPA(3), ACPF). See Cross-module Redundancies for details. Type: string; Possible Values: DF, CONV, CD; Default: CONV. CC_UPDATE_EPS (DETCI); DETCI (Expert) — Do update T amplitudes with orbital eigenvalues? (Usually would do this). Not doing this is experimental. Type: boolean; Default: true. CC_VAL_EX_LEVEL (DETCI); DETCI — The CC valence excitation level. Type: integer; Default: 0. CC_VARIATIONAL (DETCI); DETCI (Expert) — Do use variational energy expression in CC computation? Experimental. Type: boolean; Default: false. CC_VECS_READ (DETCI); DETCI — Do import a CC vector from disk?. Type: boolean; Default: false. CC_VECS_WRITE (DETCI); DETCI — Do export a CC vector to disk?. Type: boolean; Default: false. CCD_E_CONVERGENCE (SAPT); SAPT — E converge value for CCD. Type: conv double; Default: 1e-8. CCD_MAXITER (SAPT); SAPT — Max CCD iterations. Type: integer; Default: 50. CCD_T_CONVERGENCE (SAPT); SAPT — Convergence tolerance for CCD amplitudes. Type: conv double; Default: 1e-8. CCL_ENERGY (OCC); OCC — Do compute CC Lambda energy? In order to this option to be valid one should use “TPDM_ABCD_TYPE = COMPUTE” option. Type: boolean; Default: false. CEPA_LEVE",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:15514,update,update,15514,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html,6,['update'],['update']
Deployability,"ould not have any fancy characters or reserved keywords.; template; {{{available_plugins}}}; Which existing template to model off of. """"""; name = sanitize_name(name); template_path = plugin_path / template. # Create, but do not overwrite, plugin directory; if os.path.exists(name):; tty.error(""""""Plugin directory ""{}"" already exists."""""".format(name)). # Do a first pass to determine the template temp_files; template_files = os.listdir(template_path); source_files = []; for temp_file in template_files:; target_file = temp_file. if temp_file.endswith('.template'):; target_file = temp_file[0:-9]. if temp_file.endswith('.cc.template'):; source_files.append(target_file). tty.hline(""""""Creating ""{}"" with ""{}"" template."""""".format(name, template)). os.mkdir(name); created_files = []; for source_file in template_files:. # Skip swp files; if source_file.endswith("".swp""):; continue. target_file = source_file. if source_file.endswith('.template'):; target_file = source_file[0:-9]. try:; print(template_path / source_file); contents = (template_path / source_file).read_text(); except IOError as err:; tty.error(""""""Unable to open {} template."""""".format(source_file)); tty.error(err); sys.exit(1). contents = contents.replace('@plugin@', name); contents = contents.replace('@Plugin@', name.capitalize()); contents = contents.replace('@PLUGIN@', name.upper()); contents = contents.replace('@sources@', ' '.join(source_files)). try:; (Path(name) / target_file).write_text(contents); created_files.append(target_file); except IOError as err:; tty.error(""""""Unable to create {}"""""".format(target_file)); tty.error(err); sys.exit(1). tty.info(""Created plugin files (in {} as {}): "".format(name, template), "", "".join(created_files)). sys.exit(0). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .  · ; 1.10a1.dev61;  · . PSI4. Module code; psi4.driver.pluginutil. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/_modules/psi4/driver/pluginutil.html:5772,update,updated,5772,psi4manual/master/_modules/psi4/driver/pluginutil.html,https://psicode.org,https://psicode.org/psi4manual/master/_modules/psi4/driver/pluginutil.html,1,['update'],['updated']
Deployability,"ound here) of keywords participate. Note; Longtime Cfour users who may consider this keyword; translation a flaw rather than a feature can avoid it entirely by; confining keywords to the Cfour module along with; BASIS and PUREAM (opt, too?). Misc. Running¶; Naturally, in PSI4 multiple jobs can be run in succession from the input file.; Control optimizations with optking keywords HERE. Cfour GRD file is; written to PSI4 output file. Gradient transformed back into the frame; in which it was shipped off to Cfour is also written to the PSI4; output file and is available from input as get_gradient().; sandwich mode := molecule and cfour list within; Naturally, additional jobs can follow in the input file.; Depending on the nature of preceding or following jobs, it is prudent to; separate them with the following:; 1; 2; 3clean() # removes Psi4 scratch files; clean_variables() # empties the PSI variables list; cfour {} # empties. In this scheme, the contents of the cfour {...} block are tacked onto; the end of the ZMAT file that is otherwise written from psi style; format. It is by this route that, for example %excite* sections can at; present be specified.; The execution of xcfour can be modified by a few parameters. Setting; the option CFOUR_OMP_NUM_THREADS sets the environment variable; OMP_NUM_THREADS for only the duration of the Cfour computation.; That is, portions of an input file that run PSI4 modules are; unaffected. Additionally, there are a few arguments to the function; run_cfour() that control the Cfour scratch; directory. table of contents. Interface to CFOUR by J. Stanton & J. Gauss; Installation; Cfour for PSI4 Users; PSI4 for Cfour Users; Output; Functionality; Specification Details; Misc. Running. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/cfour-1.html:34894,update,updated,34894,psi4manual/1.3.2/cfour-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/cfour-1.html,2,['update'],['updated']
Deployability,"oupled cluster singles and doubles (CCSD); RHF; dipole, quadrupole, polarizability, rotation, roa_tensor. dct; density cumulant (functional) theory; [manual]; RHF/UHF; Listed here. omp2; orbital-optimized second-order; MP perturbation theory; [manual]; RHF/UHF; Listed here; Density fitted only. omp3; orbital-optimized third-order; MP perturbation theory; [manual]; RHF/UHF; Listed here; Density fitted only. omp2.5; orbital-optimized MP2.5; [manual]; RHF/UHF; Listed here; Density fitted only. olccd; orbital optimized LCCD; [manual]; RHF/UHF; Listed here; Density fitted only. eom-cc2; 2nd-order approximate EOM-CCSD; RHF; oscillator_strength, rotational_strength. eom-ccsd; Equation-of-motion CCSD (EOM-CCSD); RHF; oscillator_strength, rotational_strength. cisd, cisdt,; cisdt, cisdtq,; ci5, …, fci; Configuration interaction; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. casscf, rasscf; Multi-configurational SCF; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. adc(0), adc(1),; …, adc(3),; cvs-adc(0), …; cvs-adc(3); Algebraic-diagrammatic construction methods; [manual]; RHF/UHF; dipole, transition_dipole, oscillator_strength,; rotational_strength. Parameters. name (str) – 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. properties (List[str]) – \(\Rightarrow\) [] \(\Leftarrow\) || ['rotation', 'polarizability', 'oscillator_strength', 'roa'] || etc.; Indicates which properties should be computed. Defaults to dipole and quadrupole. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples. >>> # [1] Optical rotation calculation; >>> properties('cc2', properties=['rotation']). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. PSI4 API: Linking C++ and Python; prop. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/api/psi4.driver.prop-1.html:2722,update,updated,2722,psi4manual/1.4.0/api/psi4.driver.prop-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/api/psi4.driver.prop-1.html,2,['update'],['updated']
Deployability,"oupled cluster singles and doubles (CCSD); RHF; dipole, quadrupole, polarizability, rotation, roa_tensor. dct; density cumulant (functional) theory; [manual]; RHF/UHF; Listed here. omp2; orbital-optimized second-order; MP perturbation theory; [manual]; RHF/UHF; Listed here; Density fitted only. omp3; orbital-optimized third-order; MP perturbation theory; [manual]; RHF/UHF; Listed here; Density fitted only. omp2.5; orbital-optimized MP2.5; [manual]; RHF/UHF; Listed here; Density fitted only. olccd; orbital optimized LCCD; [manual]; RHF/UHF; Listed here; Density fitted only. eom-cc2; 2nd-order approximate EOM-CCSD; RHF; oscillator_strength, rotational_strength. eom-ccsd; Equation-of-motion CCSD (EOM-CCSD); RHF; oscillator_strength, rotational_strength. cisd, cisdt,; cisdt, cisdtq,; ci5, …, fci; Configuration interaction; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. casscf, rasscf; Multi-configurational SCF; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. adc(0), adc(1),; …, adc(3),; cvs-adc(0), …; cvs-adc(3); Algebraic-diagrammatic construction methods; [manual]; RHF/UHF; dipole, transition_dipole, oscillator_strength,; rotational_strength. Parameters. name (str) – 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. properties (List[str]) – \(\Rightarrow\) [] \(\Leftarrow\) || ['rotation', 'polarizability', 'oscillator_strength', 'roa'] || etc.; Indicates which properties should be computed. Defaults to dipole and quadrupole. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples. >>> # [1] Optical rotation calculation; >>> properties('cc2', properties=['rotation']). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. PSI4 API: Linking C++ and Python; prop. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/api/psi4.driver.prop-1.html:2722,update,updated,2722,psi4manual/1.5.0/api/psi4.driver.prop-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/api/psi4.driver.prop-1.html,2,['update'],['updated']
Deployability,"oupled electron pair approximation variant 0 level of theory, (3, 3). CEPA(0) QUADRUPOLE XX¶. CEPA(0) QUADRUPOLE XY¶. CEPA(0) QUADRUPOLE XZ¶. CEPA(0) QUADRUPOLE YY¶. CEPA(0) QUADRUPOLE YZ¶. CEPA(0) QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the; coupled electron pair approximation variant 0 level of theory.; Deprecated in favor of CEPA(0) QUADRUPOLE. CEPA(0) TOTAL ENERGY¶. CEPA(0) CORRELATION ENERGY¶. CEPA(1) TOTAL ENERGY¶. CEPA(1) CORRELATION ENERGY¶. CEPA(2) TOTAL ENERGY¶. CEPA(2) CORRELATION ENERGY¶. CEPA(3) TOTAL ENERGY¶. CEPA(3) CORRELATION ENERGY¶; The total electronic energy [Eh] and correlation energy component [Eh]; for the requested variant of coupled electron pair approximation level of theory. CFOUR ERROR CODE¶; The non-zero return value from a Cfour execution. CI DIPOLE¶; Dipole array [e a0] for the requested configuration interaction level of theory, (3,). CI DIPOLE X¶. CI DIPOLE Y¶. CI DIPOLE Z¶; The three components of the dipole [Debye] for the requested; configuration interaction level of theory and root.; Deprecated in favor of CI DIPOLE. CI QUADRUPOLE¶; Redundant quadrupole array [e a0^2] for the requested configuration interaction level of theory, (3, 3). CI QUADRUPOLE XX¶. CI QUADRUPOLE XY¶. CI QUADRUPOLE XZ¶. CI QUADRUPOLE YY¶. CI QUADRUPOLE YZ¶. CI QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the requested; configuration interaction level of theory and root.; Deprecated in favor of CI QUADRUPOLE. CI ROOT n -> ROOT m DIPOLE¶; Transition dipole array [e a0] between roots n and m for the requested configuration interaction level of theory, (3,). CI ROOT n -> ROOT m DIPOLE X¶. CI ROOT n -> ROOT m DIPOLE Y¶. CI ROOT n -> ROOT m DIPOLE Z¶; The three components of the transition dipole [Debye] between roots n; and m for the requested configuration interaction level of theory.; Deprecated in favor of CI ROOT n -> ROOT m DIPOLE. CI ROOT n -> ROOT m QUADRUPOLE¶; Redundant transition quadrupole array [e ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/glossary_psivariables-1.html:10462,configurat,configuration,10462,psi4manual/1.4.0/glossary_psivariables-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/glossary_psivariables-1.html,4,['configurat'],['configuration']
Deployability,"our Users; Output; Functionality; Specification Details; Misc. Running. Interface to CheMPS2 by S. Wouters; Installation; Methods; DMRG Keywords; How to configure CheMPS2 for building Psi4; How to fix “plugin needed to handle lto object” when building CheMPS2. Interface to DFTD3 by S. Grimme; Installation; Theory; Running DFTD3. Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess; Installation; Input; Keywords; Reference; How to configure dkh for building Psi4. Interface to LIBEFP by I. Kaliman; Installation; EFP Fragments; Molecule Specification; Running EFP; Fragment Library; How to configure libefp for building Psi4. Interface to ERD by N. Flocke and V. Lotrich; Installation; How to configure erd for building Psi4. Interface to programs through FCHK files — fchk(); Interface to gau2grid by D. G. A. Smith; Installation; How to configure gau2gridfor building Psi4. Interface to gCP by S. Grimme; Installation; Running gCP. Interface to GDMA Distributed Multipole Analysis by A. J. Stone — gdma(); Installation; Input; Options; How to configure gdma for building Psi4. Interface to Libint by E. Valeev; Installation; How to configure Libint for building Psi4. Interface to Molden — molden(); Options. Interface to MRCC by M. Kállay; Installation; Running MRCC; Interface Details. Interface to PCMSolver by R. Di Remigio; Installation; Using the polarizable continuum model; Keywords for PCMSolver; How to configure PCMSolver for building Psi4. Interface to SIMINT by B. Pritchard; Installation; How to configure simint for building Psi4. Spin-Network-Scaled MP2 (SNS-MP2) by D. E. Shaw; Installation; Sample Input. Plugin v2rdm_casscf by A. E. DePrince; Installation. Interface to Libxc by M. A. L. Marques; Installation; How to configure Libxc for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/interfacing-1.html:2491,update,updated,2491,psi4manual/1.3.2/interfacing-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/interfacing-1.html,2,['update'],['updated']
Deployability,"our/sp-rohf-ccsd-ao; single-point CCSD/qz2p on NH2 with aobasis. cfour/sp-rohf-ccsd_t_; single-point CCSD(T)/qz2p on NH2. cfour/puream; Basis set spherical/Cartesian behavior in cfour. cfour/mp2-1; All-electron MP2 6-31G** geometry optimization of water. cfour/opt-rhf-ccsd_t_-ecc; optimization CCSD(T)/dzp on water with ecc, aobasis. cfour/sp-rhf-ccsd-ao; single-point CCSD/qz2p on water with aobasis. cfour/sp-rohf-ccsd; single-point CCSD/qz2p on NH2. cfour/sp-rhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qc2p on water with ecc, aobasis. cfour/kw-1; testing best practices options, part i. cfour/opt-rhf-scf; optimization HF/svp on water. cfour/sp-rhf-cc3; single-point CC3/qz2p on water. cfour/sp-rohf-ccsd_t_-ao; single-point CCSD(T)/qz2p on NH2 with aobasis. cfour/sp-rohf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/sp-rohf-mp4-sc; single-point MP4/qz2p on NH2. cfour/kw-5; Basis set spherical/Cartesian with basis and cfour_spherical. cfour/scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is apecified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cfour/kw-6; Basis set spherical/Cartesian with cfour_basis and puream. cfour/sp-rhf-scf; single-point HF/qz2p on water. cfour/psi-rhf-mp3; MP3 energy components. Checks that computed identically between cfour and psi4. cfour/sp-uhf-ccsd; single-point CCSD/qz2p on NH2. Previous topic; MRCC; Next topic; LIBEFP. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Test Suite and Sample Inputs ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_cfour-1.html:4625,update,updated,4625,psi4manual/1.0.0/autodoc_testsuite_cfour-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_cfour-1.html,4,['update'],['updated']
Deployability,"ource and you want simint built from; from source also,; enable it as a feature with ENABLE_simint,; and let the build system fetch and build it and activate dependent code. How to configure simint for building Psi4¶; Role and Dependencies. Role — In PSI4, simint is a library that provides alternate; integrals.; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) simint; Upstream Dependencies — simint \(\Leftarrow\) None. CMake Variables. ENABLE_simint — CMake variable toggling whether PSI4 builds with simint; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For simint, set to an installation directory containing include/simint/simint.h; simint_DIR — CMake variable to specify where pre-built simint can be found. Set to installation directory containing share/cmake/simint/simintConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_simint — CMake variable to force internal build of simint instead of detecting pre-built; SIMINT_VECTOR — CMake variable for simint vectorization (i.e., scalar sse avx avxfma micavx512). Default is avx, not detected, so sse may be required for older chipsets. See http://www.bennyp.org/research/simint/README.txt for details. Examples. Build bundled. >>> cmake -DENABLE_simint=ON. Build without simint. >>> cmake. Link against pre-built. >>> cmake -DENABLE_simint=ON -DCMAKE_PREFIX_PATH=/path/to/simint/root. >>> cmake -DENABLE_simint=ON -Dsimint_DIR=/path/to/simint/configdir. Build bundled despite pre-built being detectable. >>> cmake -DENABLE_simint=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/simint/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_simint=ON. table of contents. Interface to SIMINT by B. Pritchard; Installation; How to configure simint for building Psi4. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/simint-1.html:3224,update,updated,3224,psi4manual/1.1.0/simint-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/simint-1.html,2,['update'],['updated']
Deployability,"ous constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. ci-property; CI/MCSCF cc-pvDZ properties for Potassium nitrate (rocket fuel!). dfccsd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. cc31; CCSD/sto-3g optical rotation calculation (both gauges) at two frequencies on methyloxirane. mints3; Test individual integral objects for correctness. dft-smoke; DFT Functional Smoke Test. dfmp2-grad4; DF-MP2 cc-pVDZ gradient for the NO molecule. soscf-ref; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. linK-1; RHF Linear Exchange Algorithm test for water. mbis-3; MBIS calculation on OH radical. sapt6; checks that all SAPT physical components (elst, exch, indc, disp) and total IE are being computed correctly for SAPT2+3(CCD)dMP2/aug-cc-pvdz and all lesser methods thereof. dft-grad-lr1; wB97X-D cc-pVDZ gradient of S22 HCN update df/pk_ref values due to new BraggSlater radii. dft2; DFT Functional Test. soscf-large; Second-order SCF convergnece: Benzene. cbs-xtpl-alpha; Extrapolated water energies. cc17; Single point energies of multiple excited states with EOM-CCSD. fd-gradient; SCF STO-3G finite-difference tests. mbis-6; MBIS calculation on H2O. cc14; ROHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. sapt-dft-lrc; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. dft-ghost; DFT Functional Test for Range-Seperated Hybrids and Ghost atoms. scf-hess1; RHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. cbs-delta-energy; Extrapolated energies with delta correction. frac-ip-fitting; Omega optimization for LRC functional wB97 on water. frac-sym; Fractional occupation with symmetry. cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}B_1\) state of H2O+ (A1 excitation). cc32; CC3/cc-pVDZ H2O \(R_e\) geom from Olsen et ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/autodoc_testsuite_corepsi4.html:32140,update,update,32140,psi4manual/1.7.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodoc_testsuite_corepsi4.html,2,['update'],['update']
Deployability,"ous |; PSI4 [beta2] » ; Appendices »; Keywords by Module ». DCFT¶; Performs Density Cumulant Functional Theory computations. General¶. ALGORITHM¶. The algorithm to use for the density cumulant and orbital updates in the energy computation. Two-step algorithm (default) is generally more efficient and shows better convergence than simultaneous. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS; Default: TWOSTEP. AO_BASIS¶. Controls whether to avoid the AO->MO transformation of the two-electron integrals for the four-virtual case (<VV||VV>) by computing the corresponding terms in the AO basis. AO_BASIS = DISK algorithm reduces the memory requirements. It is, however, less efficient due to the extra I/O, so the default algorithm is preferred. Type: string; Possible Values: NONE, DISK; Default: NONE. CACHELEVEL¶. Controls how to cache quantities within the DPD library. Type: integer; Default: 2. DAMPING_PERCENTAGE¶. The amount (percentage) of damping to apply to the orbital update procedure: 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the previous iteration’s density being mixed into the current iteration) can help in cases where oscillatory convergence is observed. Type: double; Default: 0.0. DIIS_MAX_VECS¶. Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 6. DIIS_MIN_VECS¶. Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 3. DIIS_START_CONVERGENCE¶. Value of RMS of the density cumulant residual and SCF error vector below which DIIS extrapolation starts. Same keyword controls the DIIS extrapolation for the solution of the response equations. Type: conv double; Default: 1e-3. IGNORE_TAU¶. Controls whether to ignore terms containing non-idempotent contribution to OPDM or not (for debug puproses only). For practical applications only the default must be used. Type: boolean; Default: false. INTS_TOLERANCE¶. Minimum absolute v",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/autodir_options_c/module__dcft-1.html:1068,update,update,1068,psi4manual/4.0b2/autodir_options_c/module__dcft-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/autodir_options_c/module__dcft-1.html,6,['update'],['update']
Deployability,"out(""Gradient %20.14f\n"" % first); psi4.print_out(""Quadratic Force Constant %14.7f MDYNE/A\n"" % secd); psi4.print_out(""Cubic Force Constant %14.7f MDYNE/A**2\n"" % third); psi4.print_out(""Quartic Force Constant %14.7f MDYNE/A**3\n"" % fourth). hbar = p4const.psi_h / (2.0 * pi); mu = ((m1*m2)/(m1+m2))*p4const.psi_amu2kg; we = 5.3088375e-11*sqrt(secd/mu); wexe = (1.2415491e-6)*(we/secd)**2 * ((5.0*third*third)/(3.0*secd)-fourth). # Rotational constant: Be; I = ((m1*m2)/(m1+m2)) * p4const.psi_amu2kg * (optx * angstrom_to_meter)**2; B = p4const.psi_h / (8.0 * pi**2 * p4const.psi_c * I). # alpha_e and quartic centrifugal distortion constant; ae = -(6.0 * B**2 / we) * ((1.05052209e-3*we*third)/(sqrt(B * secd**3))+1.0); de = 4.0*B**3 / we**2. # B0 and r0 (plus re check using Be); B0 = B - ae / 2.0; r0 = sqrt(p4const.psi_h / (8.0 * pi**2 * mu * p4const.psi_c * B0)); recheck = sqrt(p4const.psi_h / (8.0 * pi**2 * mu * p4const.psi_c * B)); r0 /= angstrom_to_meter;; recheck /= angstrom_to_meter;. # Fundamental frequency nu; nu = we - 2.0 * wexe;; zpve_nu = 0.5 * we - 0.25 * wexe;. psi4.print_out(""\nre = %10.6f A check: %10.6f\n"" % (optx, recheck)); psi4.print_out(""r0 = %10.6f A\n"" % r0); psi4.print_out(""we = %10.4f cm-1\n"" % we); psi4.print_out(""wexe = %10.4f cm-1\n"" % wexe); psi4.print_out(""nu = %10.4f cm-1\n"" % nu); psi4.print_out(""ZPVE(nu) = %10.4f cm-1\n"" % zpve_nu); psi4.print_out(""Be = %10.4f cm-1\n"" % B); psi4.print_out(""B0 = %10.4f cm-1\n"" % B0); psi4.print_out(""ae = %10.4f cm-1\n"" % ae); psi4.print_out(""De = %10.7f cm-1\n"" % de); results = {; ""re"" : optx,; ""r0"" : r0,; ""we"" : we,; ""wexe"" : wexe,; ""nu"" : nu,; ""ZPVE(harmonic)"" : zpve_nu,; ""ZPVE(anharmonic)"" : zpve_nu,; ""Be"" : B,; ""B0"" : B0,; ""ae"" : ae,; ""De"" : de; }; return results. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    ; PSI4 [beta5] » ; Module code ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/_modules/diatomic.html:6425,update,updated,6425,psi4manual/4.0b5/_modules/diatomic.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/_modules/diatomic.html,1,['update'],['updated']
Deployability,"over cfour program. Examples:. >>> # [1] Analytic hf optimization; >>> optimize('hf'). >>> # [2] Finite difference mp5 optimization with gradient; >>> # printed to output file; >>> e, wfn = opt('mp5', return_wfn='yes'); >>> wfn.gradient().print_out(). >>> # [3] Can automatically perform complete basis set extrapolations; >>> optimize('MP2/cc-pV([D,T]+d)Z'). >>> # [4] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> optimize(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). >>> # [5] Get info like geometry, gradient, energy back after an; >>> # optimization fails. Note that the energy and gradient; >>> # correspond to the last optimization cycle, whereas the; >>> # geometry (by default) is the anticipated *next* optimization step.; >>> try:; >>> optimize('hf/cc-pvtz'); >>> except psi4.OptimizationConvergenceError as ex:; >>> next_geom_coords_as_numpy_array = np.asarray(ex.wfn.molecule().geometry()). psi4.gradient(name[, molecule, return_wfn, func, dertype])[source]; Function complementary to optimize(). Carries out one gradient pass,; deciding analytic or finite difference. Returns:; Matrix – Total electronic gradient in Hartrees/Bohr. Returns:; (Matrix, Wavefunction) – gradient and wavefunction when return_wfn specified. Examples:. >>> # [1] Single-point dft gradient getting the gradient; >>> # in file, core.Matrix, and np.array forms; >>> set gradient_write on; >>> G, wfn = gradient('b3lyp-d', return_wfn=True); >>> wfn.gradient().print_out(); >>> np.array(G). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Psithon Functions: Invoking a Calculation; Geometry Optimization — optimize() and gradient(). © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/opt.html:18949,update,updated,18949,psi4manual/master/opt.html,https://psicode.org,https://psicode.org/psi4manual/master/opt.html,1,['update'],['updated']
Deployability,"ow ..."" protections. Tag postrelease¶. # be on clean maintenance branch up-to-date with upstream in both commits and tags; # * mind which version strings get ""v"" and which don't; # * if not fork, replace ""upstream"" with ""origin"". >>> git checkout 1.3.x; Switched to branch '1.3.x'. >>> vi psi4/metadata.py; >>> git diff; diff --git a/psi4/metadata.py b/psi4/metadata.py; ...; -__version__ = '1.3'; -__version_long = '1.3+zzzzzzz'; +__version__ = '1.3.1'; +__version_long = '1.3.1+zzzzzzz'. >>> git add psi4/metadata.py; >>> git commit -m ""v1.3.1""; [1.3.x 2ce1c29] v1.3.1. >>> git log --oneline | head -1; 786fb2b v1.3.1; >>> git tag -a v1.3.1 2ce1c29 -m ""v1.3.1"". # skipping the hash recording and ""upcoming"" step b/c only tags matter on maintenance branch. # free pushing to maintenance branches at present so GitHub interface steps not needed. # see note at ""Tag (pre)release"" for why atomic commit needed. Collect docs from GHA artifacts. >>> git push --atomic upstream 1.3.x v1.3.1. Initialize release branch¶. follow tagging procedure; before re-engaging the admins “Do not allow …” button, push a branch at the tag commit (not the records commit); >>> git log --online | head -2; 45315cb Records tag for v1.3; 20e5c7e v1.3. >>> git checkout 20e5c7e; >>> git checkout -b 1.3.x; Switched to a new branch '1.3.x'; >>> git push upstream 1.3.x. set up new branch as protected branch through GitHub psi4 org Settings. Should be already covered under 1.*.x rule. Build extra Conda packages for Psi4 channel¶; Once upon a time, “Psi4 stack”, meant packages psi4, psi4-rt, psi4-dev, and psi4-docs.; Package psi4-docs used to be in “Psi4 stack”, but it’s handled by GHA and netlify now, not Conda.; Package psi4-rt used to be in “Psi4 stack”, but a maximum ecosystem package isn’t provided now, only a customizable env spec.; Package psi4-dev used to be in “Psi4 stack”, but now build environment and guidance is in-repo with psi4-path-advisor.py.; Other packages in the “ecosystem stack” (e.g., libint, ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/manage_release.html:12188,release,release,12188,psi4manual/1.9.x/manage_release.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/manage_release.html,2,['release'],['release']
Deployability,"ow to use different screening values for X and C parts. SCF will fail or crash (nans) without screening!. aediis-2; EDIIS test case from 10.1063/1.1470195. cc56; EOM-CCSD/6-31g excited state transition data for water cation. scf-uhf-grad-nobeta; UHF gradient for a one-electron system (no beta electrons). dfomp3-grad2; DF-OMP3 cc-pVDZ gradients for the H2O+ cation. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. dfmp2-grad3; DF-MP2 cc-pVDZ gradients for the H2O molecule. scf-response2; Compute the dipole polarizability for water with custom basis set. sapt7; SAPT0 open-shell computation of H2O-HO2 interaction energy First with cc-pVDZ and density fitted integrals with UHF Then with 6-31g and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with UHF. scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. dft-grad2; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN updated ref gradient due to new BraggSlater radii. dft-custom-hybrid; DFT (hybrids) test of implementations in: hybrid_superfuncs.py. scf-ecp3; Water-Argon complex with ECP present; check of UHF Hessian. dft-smoke; DFT Functional Smoke Test. dfcasscf-sp; CASSCF/6-31G** energy point. nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. dfomp3-1; DF-OMP3 cc-pVDZ energy for the H2O molecule. fsapt-allterms; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for HSG-18-dimer from the HSG database. nbo; Generation of NBO file. tdscf-6; td-camb3lyp with DiskDF and method/basis specification. mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. mcscf1; ROHF 6-31G**",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/autodoc_testsuite_corepsi4.html:23916,update,updated,23916,psi4manual/1.6.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/autodoc_testsuite_corepsi4.html,2,['update'],['updated']
Deployability,"ow/reap; procedures and have the following general structure. Prepare an input file, simply adding mode='sow' to the; argument list of an available Python function. Run this quick job to; produce input files for lengthier calculations.; According to the instructions in the output file of the above step,; run the generated input files in any order on any variety of computers; and architectures. This is the time-intensive portion of the; calculation.; The ‘sow’ stage also produces a master input file (with a; mode='reap' directive). When all the jobs in the above step are; completed, place their output files in the same location as the; master input, and run this last, quick job to collect the results. Sow/reap procedures are governed by the mode keyword, choices being; 'continuous', 'sow', and 'reap'. Only 'sow' is likely to; be used by the user, as 'continuous' is always the default, and; input files with 'reap' are autogenerated.; Embarrassingly parallel algorithm available at present for:. Database — database(); finite difference operation of Geometry Optimization — optimize() and gradient(); finite difference of energies of Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); finite difference of gradients of Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(). Caution; Some features are not yet implemented. Buy a developer a coffee. Local options (e.g., set scf e_convergence 9) will not get transmitted to the child jobs.; Array options (e.g., set states_per_irrep [2, 1]) will not get transmitted to the child jobs.; Function intercalls (e.g., db(opt())) are not tested with sow/reap procedures. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Psithon Functions: Invoking a Calculation; Embarrassing Parallelism. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/sowreap.html:2322,update,updated,2322,psi4manual/1.7.x/sowreap.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/sowreap.html,1,['update'],['updated']
Deployability,"owever, the top half of; the main CMakeLists.txt is a passable summary:; ################ Options: Overview and Not Otherwise Mentioned ###############. # <<< CMake build overview >>>; #; # >>> ls; # external/ COPYING psi4/ tests/ ...; # >>> cmake -H. -Bobjdir -DCMAKE_INSTALL_PREFIX=/path/to/install-psi4 ...; # ...; # -- Generating done; # -- Build files have been written to: /current/dir/objdir; # >>> cd objdir && make -j`getconf _NPROCESSORS_ONLN`; # >>> make install. # <<< Required build dependencies that Psi4 can't build itself >>>; #; # - CMake (e.g., `conda install cmake`); # - C++ and C compilers (C++11 compliant); # - BLAS/LAPACK (also runtime; e.g., `conda install mkl-devel`); # - Python (also runtime; interpreter and headers; e.g., `conda install python`); # - NumPy (also runtime; avoidable at buildtime if gau2grid pre-built; e.g., `conda install numpy`); # - deepdiff (runtime only; e.g., `conda install deepdiff -c conda-forge`); # - networkx (runtime only; e.g., `conda install networkx`). # These three ""### Options ###"" sections contain useful CMake variables for build configuration. # <<< Compilers and flags >>>; #; # - CMAKE_C_COMPILER ""C compiler""; # - CMAKE_C_FLAGS ""Additional C flags""; # - CMAKE_CXX_COMPILER ""C++ compiler""; # - CMAKE_CXX_FLAGS ""Additional C++ flags""; # - CMAKE_Fortran_COMPILER ""Fortran compiler (required for some add-ons)""; # - CMAKE_Fortran_FLAGS ""Additional Fortran flags"". # <<< Detecting dependencies and add-ons >>>; #; # - PYTHON_EXECUTABLE ""Python interpreter to use (e.g., /path/to/bin/python2.7)""; # - PYTHON_LIBRARY ""Python library that goes with the interpreter (e.g., /path/to/lib/python2.7.so)""; # - PYTHON_INCLUDE_DIR ""Path to the python include files (e.g., /path/to/include/python2.7)""; # - SPHINX_ROOT ""Root directory for Sphinx: 'bin/sphinx-build' (or similar) should be in this dir.""; #; # For any ${AddOn} of: ambit, CheMPS2, dkh, libefp, erd, gau2grid, gdma, Libint, PCMSolver, pybind11, simint, Libxc; # - CMAKE_PREFIX_PATH",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/build_planning-1.html:9586,install,install,9586,psi4manual/1.2.1/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html,2,['install'],['install']
Deployability,"owners who also have maintainer status can merge their PRs as GitHub enforces three external reviews.; Unless there’s been a lot of discussion on core-dev about merge order, generally the 3rd positive reviewer merges the PR. Also fine to add review and leave merge for later.; Presently only Travis-CI is set up as a required-to-merge service. Incomplete Azure won’t block merging, but we do usually let it complete before merging unless it’s a trivial PR.; We don’t enforce branches to be up to date before merging since that’d be a lot of extra CI time and coordination when merging several PRs in a day. So, if a PR hasn’t been updated in a while, and a reviewer is nervous about PR interference, fine to ask submitter to rebase. For this reason, we try to merge newer contributors first so the rebase falls on more experienced contributors.; Ideally a PR consists of atomic, compilable commits. When the PR instead is many successive small changes toward a single goal, consider squashing the PR. For core-dev’s PRs, there’s implicit permission to squash (unless otherwise noted in PR intro), whereas for new contributors, we often let the commits be messy.; When discussion on issue has overcome the original problem and settled on needing long-term work, fine to move the long-term item to Wish List and close issue. table of contents. Git, Versioning; How to bump a version; How to create and remove an annotated Git tag on a remote; What Psi4 version is running; How to locate non-ascii characters in the codebase; How to fix “Psi4 undefined” version; How to fix “cannot import name ‘core’ from {top-level-psi4-dir}; How to find tests without output.ref; How to do GitHub issue management and code review. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Managing: Git, Conda, CMake and all that; Git, Versioning. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/manage_git.html:11130,update,updated,11130,psi4manual/1.7.x/manage_git.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/manage_git.html,1,['update'],['updated']
Deployability,"ownload location; gogetit; file_name = '_psi4_pubchem_temp_download_.tgz'; response = urlopen(download_url); data = response.read(); fh = open(file_name, 'wb'); fh.write(data); fh.close(); unzipped = gzip.open(file_name); self.dataSDF = unzipped.read(); unzipped.close(); try:; os.remove(file_name); except:; pass; print(""\tDone!""); break; # We didn't find a download location yet.; if attempt == 0:; # If this is the first try, take a ticket; ticket = extract_xml_keyval(xml, 'PCT-Waiting_reqid'); #print(""ticket = "" + ticket); statusrequest = """"""<PCT-Data>; <PCT-Data_input>; <PCT-InputData>; <PCT-InputData_request>; <PCT-Request>; <PCT-Request_reqid>%d</PCT-Request_reqid>; <PCT-Request_type value=""status""/>; </PCT-Request>; </PCT-InputData_request>; </PCT-InputData>; </PCT-Data_input>; </PCT-Data>; """""" % int(ticket); if ticket:; # Wait 10 seconds...; print(""\tPubChem result not available yet, will try again in 10 seconds...""); time.sleep(10); # ...and ask for an update on the progress; server_response = urlopen(url, statusrequest).read(); xml = ET.fromstring(server_response); #print(server_response); else:; # We can't find a ticket number, or a download location. Bail.; raise ValidationError(""""""PubChem: download error""""""); return self.dataSDF. [docs] def name(self):; """"""Function to return the IUPAC name of the PubChem object.""""""; return self.iupac. [docs] def getCartesian(self):; """"""Function to return a string of the atom symbol and XYZ; coordinates of the PubChem object. """"""; try:; sdfText = self.getSDF(); except Exception as e:; raise e. # Find; # NA NB CONSTANT; # 14 13 0 0 0 0 0 0 0999 V2000; m = re.search(r'^\s*(\d+)\s+(?:\d+\s+){8}V2000$', sdfText, re.MULTILINE); self.natom = 0; if (m):; self.natom = int(m.group(1)). if self.natom == 0:; raise ValidationError(""PubChem: Cannot find the number of atoms. 3D data doesn't appear\n"" +; ""to be available for %s.\n"" % self.iupac). lines = re.split('\n', sdfText). # 3.7320 -0.2500 0.0000 C 0 0 0 0 0 0 0 0 0 0 0 0; NUMBER = """,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/pubchem.html:5105,update,update,5105,psi4manual/1.0.0/_modules/pubchem.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/pubchem.html,1,['update'],['update']
Deployability,"p = core.OEProp(ciwfn); oeprop.set_title(name.upper()); oeprop.add(""DIPOLE""); oeprop.compute(); ciwfn.oeprop = oeprop; core.set_variable(""CURRENT DIPOLE X"", core.variable(name.upper() + "" DIPOLE X"")); core.set_variable(""CURRENT DIPOLE Y"", core.variable(name.upper() + "" DIPOLE Y"")); core.set_variable(""CURRENT DIPOLE Z"", core.variable(name.upper() + "" DIPOLE Z"")). optstash.restore(); return ciwfn. def run_efp(name, **kwargs):; """"""Function encoding sequence of module calls for a pure EFP; computation (ignore any QM atoms). """""". efp_molecule = kwargs.get('molecule', core.get_active_molecule()); try:; efpobj = efp_molecule.EFP; except AttributeError:; raise ValidationError(""""""Method 'efp' not available without EFP fragments in molecule""""""). # print efp geom in [A]; core.print_out(efpobj.banner()); core.print_out(efpobj.geometry_summary(units_to_bohr=constants.bohr2angstroms)). # set options; # * 'chtr', 'qm_exch', 'qm_disp', 'qm_chtr' may be enabled in a future libefp release; efpopts = {}; for opt in ['elst', 'exch', 'ind', 'disp',; 'elst_damping', 'ind_damping', 'disp_damping']:; psiopt = 'EFP_' + opt.upper(); if core.has_option_changed('EFP', psiopt):; efpopts[opt] = core.get_option('EFP', psiopt); efpopts['qm_elst'] = False; efpopts['qm_ind'] = False; efpobj.set_opts(efpopts, label='psi', append='psi'); do_gradient = core.get_option('EFP', 'DERTYPE') == 'FIRST'. # compute and report; efpobj.compute(do_gradient=do_gradient); core.print_out(efpobj.energy_summary(label='psi')). ene = efpobj.get_energy(label='psi'); core.set_variable('EFP ELST ENERGY', ene['electrostatic'] + ene['charge_penetration'] + ene['electrostatic_point_charges']); core.set_variable('EFP IND ENERGY', ene['polarization']); core.set_variable('EFP DISP ENERGY', ene['dispersion']); core.set_variable('EFP EXCH ENERGY', ene['exchange_repulsion']); core.set_variable('EFP TOTAL ENERGY', ene['total']); core.set_variable('CURRENT ENERGY', ene['total']). if do_gradient:; core.print_out(efpobj.gradient_summar",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/procrouting/proc.html:132485,release,release,132485,psi4manual/1.3.2/_modules/psi4/driver/procrouting/proc.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/procrouting/proc.html,1,['release'],['release']
Deployability,"p a T-zeta reference; >>> energy('cbs', corl_wfn='mp2', corl_basis='cc-pv[dt]z', corl_scheme='corl_xtpl_helgaker_2'). >>> # [5] a DT-zeta extrapolated coupled-cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference (both equivalent); >>> energy('cbs', corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z'); >>> energy('cbs', corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme='corl_xtpl_helgaker_2', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z', delta_scheme='corl_xtpl_helgaker_2'). >>> # [6] a D-zeta ccsd(t) correction atop a DT-zeta extrapolated ccsd cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference; >>> energy('cbs', corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd', delta_basis='aug-cc-pv[dt]z', delta_scheme='corl_xtpl_helgaker_2', delta2_wfn='ccsd(t)', delta2_wfn_lesser='ccsd', delta2_basis='aug-cc-pvdz'). >>> # [7] a Q5-zeta MP2 calculation, corrected by CCSD(T) at the TQ-zeta extrapolated level, and all-electron CCSD(T) correlation at T-zeta level; >>> energy(cbs, cbs_metadata=[{""wfn"": ""hf"", ""basis"": ""cc-pv5z""}, {""wfn"": ""mp2"", ""basis"": ""cc-pv[q5]z""}, {""wfn"": ""ccsd(t)"", ""basis"": ""cc-pv[tq]z""}, {""wfn"": ""ccsd(t)"", ""basis"": ""cc-pvtz"", ""options"": {""freeze_core"": ""False""}}]). >>> # [8] cbs() coupled with database(); >>> TODO database('mp2', 'BASIC', subset=['h2o','nh3'], symm='on', func=cbs, corl_basis='cc-pV[tq]z', corl_scheme='corl_xtpl_helgaker_2', delta_wfn='ccsd(t)', delta_basis='sto-3g'). >>> # [9] cbs() coupled with optimize(); >>> TODO optimize('mp2', corl_basis='cc-pV[DT]Z', corl_scheme='corl_xtpl_helgaker_2', func=cbs). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; cbs. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html:14898,update,updated,14898,psi4manual/1.7.x/api/psi4.driver.cbs.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html,1,['update'],['updated']
Deployability,"p a connection; between your forked repository and the parent repository.; >>> git remote add upstream https://github.com/psi4/psi4.git. Build directions. Get Updates; Locally, update your fork from the parent; repository and store on GitHub at your fork.; # on branch working_branch; >>> git pull --rebase upstream master; >>> git push origin working_branch. Remember: Working in the master branch of a fork is considered bad practice. Contribute Back; PSI4 contributions process here and; here.; Consider preparing your contribution in a branch; then issue a GitHub pull request. Tarball from GitHub Repository¶. Get Initially; Discouraged! From the PSI4 repository at https://github.com/psi4/psi4, hit the; “Clone or download” then “Download ZIP” button. Locally, unpack as; below.; >>> unzip psi4-master.zip; >>> cd psi4-master; # this is your {top-level-psi4-dir}. Build directions. Get Updates; Download new tarball and rebuild. Contribute Back; Not applicable as source not under git control. Psi3 from SourceForge¶. Get Initially; A tarball of the most recent version of Psi3 (3.4.0 circa 2009) is; available from SourceForge. Build; Follow the INSTALL file that comes with the distribution. An old; computer is probably handy for generating a working executable. Get Updates; Updates are not forthcoming. Contribute Back; This code is not under any development. What is the suggested GitHub workflow¶. table of contents. Obtaining PSI4; How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}; Find-the-code Quiz; Binary Installer; Conda Binary Package; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; Psi3 from SourceForge; What is the suggested GitHub workflow. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Installation and Runtime Configuration. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/build_obtaining-1.html:6102,update,updated,6102,psi4manual/1.3.2/build_obtaining-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/build_obtaining-1.html,2,['update'],['updated']
Deployability,"p availability in table.; ""fcae"": (all_electron, f""FREEZE_CORE={core.get_global_option('FREEZE_CORE')}""),; }. # Note that this message is not generally seen, as driver_util catches and edits it from `stats`; conditions2 = [stats[k][1] for k in [""method_type"", ""reference"", ""fcae"", ""qc_module""]]; msg = f""Method={stats['method']} is not available for target derivative level (dertype={derivative_int}) under conditions {', '.join(conditions2)}. See {stats['link']}."". PsiException.__init__(self, msg); self.message = msg; self.stats = stats. # Dftd3Error ceased to be used by v1.4. Class removed by v1.7; # class Dftd3Error(PsiException):. [docs]; class PastureRequiredError(PsiException):; """"""Error called when the specified value of *option* requires some; module(s) from Psi4Pasture, but could not be imported.; """"""; msg_tmpl = """"""Psi4Pasture module(s) [{modlist}] are required to change the default value of {opt}. """"""; install_instructions = """"""; Note: Psi4Pasture is currently in an experimental state with no reliable install; procedure yet, but this is what it would look like. To Build Psi4Pasture and install the required modules within your current; Psi4 installation. >>> # clone the pasture repo; >>> git clone https://github.com/psi4/psi4pasture.git. >>> cmake -S. -Bobjdir -Dpsi4_DIR=$PSI4_INSTALL_PREFIX/share/cmake/psi4 {module_args}; >>> # $PSI4_INSTALL_PREFIX is the $CMAKE_INSTALL_PREFIX for the psi4; >>> # install you want to install pasture to. >>> # build + install install location is detected automatically; >>> cd objdir; >>> make && make install. See https://github.com/psi4/psi4pasture for more details. Or to install using psi4's own build system add; {module_args}; to cmake command line when building psi4.; """"""; pasture_required_modules = {""RUN_CCTRANSORT"": [""ccsort"", ""transqt2""]}. def __init__(self, option):; mods_str = "", "".join([m for m in PastureRequiredError.pasture_required_modules[option]]); msg = PastureRequiredError.msg_tmpl.format(opt=option, modlist=mods",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/p4util/exceptions.html:13279,install,install,13279,psi4manual/1.8.x/_modules/psi4/driver/p4util/exceptions.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/p4util/exceptions.html,3,['install'],['install']
Deployability,"p(*args, **kwargs)¶; Function to compute various properties. Aliases:prop(). Returns:none. Caution; Some features are not yet implemented. Buy a developer a coffee. This function at present has a limited functionality.; Consult the keywords sections of other modules for further property capabilities. Name; Calls Method; Reference; Supported Properties. scf; Self-consistent field method(s); RHF/ROHF/UHF; Listed here. hf; HF Self-consistent field method(s); RHF/ROHF/UHF; Listed here. mp2; MP2 with density fitting only (mp2_type df); RHF; Listed here. cc2; 2nd-order approximate CCSD; RHF; dipole, quadrupole, polarizability, rotation, roa_tensor. ccsd; Coupled cluster singles and doubles (CCSD); RHF; dipole, quadrupole, polarizability, rotation, roa_tensor. eom-cc2; 2nd-order approximate EOM-CCSD; RHF; oscillator_strength, rotational_strength. eom-ccsd; Equation-of-motion CCSD (EOM-CCSD); RHF; oscillator_strength, rotational_strength. cisd, cisdt,; cisdt, cisdtq,; ci5, …, fci; Configuration interaction; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. casscf, rasscf; Multi-configurational SCF; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. Parameters:; name (string) – 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. properties (array of strings) – \(\Rightarrow\) [] \(\Leftarrow\) || ['rotation', 'polarizability', 'oscillator_strength', 'roa'] || etc.; Indicates which properties should be computed. Defaults to dipole and quadrupole. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] Optical rotation calculation; >>> properties('cc2', properties=['rotation']). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.prop-1.html:1238,configurat,configurational,1238,psi4manual/1.3.2/api/psi4.driver.prop-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.prop-1.html,4,"['configurat', 'update']","['configurational', 'updated']"
Deployability,"p(2)). points.append(point). N = len(points); rho_a = psi4.Vector(N); rho_b = psi4.Vector(N); gamma_aa = psi4.Vector(N); gamma_ab = psi4.Vector(N); gamma_bb = psi4.Vector(N); tau_a = psi4.Vector(N); tau_b = psi4.Vector(N). index = 0; for point in points:; rho_a[index] = point['rho_a']; rho_b[index] = point['rho_b']; gamma_aa[index] = point['gamma_aa']; gamma_ab[index] = point['gamma_ab']; gamma_bb[index] = point['gamma_bb']; index = index + 1. super = build_superfunctional(functional, N, 1); super.test_functional(rho_a, rho_b, gamma_aa, gamma_ab, gamma_bb, tau_a, tau_b). v = super.value('V'); v_rho_a = super.value('V_RHO_A'); v_rho_b = super.value('V_RHO_B'); v_gamma_aa = super.value('V_GAMMA_AA'); v_gamma_ab = super.value('V_GAMMA_AB'); v_gamma_bb = super.value('V_GAMMA_BB'). if not v_gamma_aa:; v_gamma_aa = tau_a; v_gamma_ab = tau_a; v_gamma_bb = tau_a. tasks = ['v', 'v_rho_a', 'v_rho_b', 'v_gamma_aa', 'v_gamma_ab', 'v_gamma_bb']; mapping = {; 'v': v,; 'v_rho_a': v_rho_a,; 'v_rho_b': v_rho_b,; 'v_gamma_aa': v_gamma_aa,; 'v_gamma_ab': v_gamma_ab,; 'v_gamma_bb': v_gamma_bb,; }. super.print_detail(3); index = 0; for point in points:; psi4.print_out('rho_a= %11.3E, rho_b= %11.3E, gamma_aa= %11.3E, gamma_ab= %11.3E, gamma_bb= %11.3E\n' % (rho_a[index], rho_b[index], gamma_aa[index], gamma_ab[index], gamma_bb[index])). for task in tasks:; v_ref = point[task]; v_obs = mapping[task][index]; delta = v_obs - v_ref; if (v_ref == 0.0):; epsilon = 0.0; else:; epsilon = abs(delta / v_ref); if (epsilon < 1.0E-11):; passed = 'PASSED'; else:; passed = 'FAILED'; check = False. psi4.print_out('\t%-15s %24.16E %24.16E %24.16E %24.16E %6s\n' % (task, v_ref, v_obs, delta, epsilon, passed)). index = index + 1. psi4.print_out('\n'); return check. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    ; PSI4 [beta5] » ; Module code ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/_modules/functional.html:89277,update,updated,89277,psi4manual/4.0b5/_modules/functional.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/_modules/functional.html,1,['update'],['updated']
Deployability,"p.random.normal(0, 1, 9).reshape(3, 3); noise = np.divide(noise, np.max(noise)). assert(_get_TR_space(m4, g4).shape == (6, 12)); assert(_get_TR_space(m2, g2).shape == (5, 6)); assert(_get_TR_space(m3, g3).shape == (5, 9)); assert(_get_TR_space(m3, g33).shape == (5, 9)); assert(_get_TR_space(m1, g1).shape == (3, 3)); assert(_get_TR_space(m1, g11).shape == (3, 3)); assert(_get_TR_space(m3, g3noisy, tol=1.e-2).shape == (5, 9)); for ns in range(2, 6):; tol = 10. ** -ns; gnoisy = g3 + tol * noise; assert(_get_TR_space(m3, gnoisy, tol=10*tol).shape == (5, 9)). """"""; sqrtmmm = np.repeat(np.sqrt(m), 3); xxx = np.repeat(geom[:, 0], 3); yyy = np.repeat(geom[:, 1], 3); zzz = np.repeat(geom[:, 2], 3). z = np.zeros_like(m); i = np.ones_like(m); ux = np.ravel([i, z, z], order='F'); uy = np.ravel([z, i, z], order='F'); uz = np.ravel([z, z, i], order='F'). # form translation and rotation unit vectors; T1 = sqrtmmm * ux; T2 = sqrtmmm * uy; T3 = sqrtmmm * uz; R4 = sqrtmmm * (yyy * uz - zzz * uy); R5 = sqrtmmm * (zzz * ux - xxx * uz); R6 = sqrtmmm * (xxx * uy - yyy * ux). TRspace = []; if 'T' in space:; TRspace.append([T1, T2, T3]); if 'R' in space:; TRspace.append([R4, R5, R6]); if not TRspace:; # not sure about this, but it runs; ZZ = np.zeros_like(T1); TRspace.append([ZZ]). TRspace = np.vstack(TRspace). def orth(A, tol=tol):; u, s, vh = np.linalg.svd(A, full_matrices=False); if verbose >= 2:; print(s); M, N = A.shape; eps = np.finfo(float).eps; if tol is None:; tol = max(M, N) * np.amax(s) * eps; num = np.sum(s > tol, dtype=int); Q = u[:, :num]; return Q. TRindep = orth(TRspace.T); TRindep = TRindep.T. if verbose >= 2:; print(TRindep.shape, '<--', TRspace.shape); print(np.linalg.norm(TRindep, axis=1)); print('-' * 80). return TRindep. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .  · ; 1.7;  · . PSI4. Module code; psi4.driver.qcdb.vib. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/qcdb/vib.html:42777,update,updated,42777,psi4manual/1.7.x/_modules/psi4/driver/qcdb/vib.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/qcdb/vib.html,1,['update'],['updated']
Deployability,"p4util.InPsight attribute. wK() psi4.core.JK method. write() psi4.core.CIVector method. psi4.core.FCHKWriter method. psi4.core.MoldenWriter method. psi4.core.MOWriter method. psi4.core.NBOWriter method. write_molden() psi4.core.Wavefunction method. write_nbo() psi4.core.Wavefunction method. WRITE_NOS (CCDENSITY). WRITE_OPT_HISTORY (OPTKING). WRITE_OPT_RESULT (OPTKING). write_scratch_file() psi4.core.IOManager method. WRITE_TRAJECTORY (OPTKING). WRITER_FILE_LABEL (GLOBALS). X. x() psi4.core.BlockOPoints method. psi4.core.Molecule method. x_alpha() psi4.core.SuperFunctional method. x_beta() psi4.core.SuperFunctional method. x_functional() psi4.core.SuperFunctional method. x_functionals() psi4.core.SuperFunctional method. x_omega() psi4.core.SuperFunctional method. XC_build() psi4.core.SuperFunctional static method. XI (CCDENSITY). XI_CONNECT (CCDENSITY). xtpl_highest_1() in module psi4.driver.driver_cbs_helper. xyz psi4.core.SalcComponent attribute. xyz() psi4.core.Molecule method. Y. y() psi4.core.BlockOPoints method. psi4.core.Molecule method. Z. z() psi4.core.BlockOPoints method. Z() psi4.core.Molecule method. z() psi4.core.Molecule method. ZAPTn CORRELATION ENERGY. ZAPTn TOTAL ENERGY. ZERO K ENTHALPY. zero() psi4.core.CIVector method. psi4.core.Dimension method. psi4.core.dpdbuf4 method. psi4.core.dpdfile2 method. psi4.core.IntVector method. psi4.core.Matrix method. psi4.core.SymmetryOperation method. psi4.core.Vector method. zero_ao_basis_set() psi4.core.BasisSet static method. zero_diagonal() psi4.core.Matrix method. ZERO_INTERNAL_AMPS (PSIMRCC). zero_lower() psi4.core.Matrix method. zero_redundant() psi4.core.SOMCSCF method. zero_upper() psi4.core.Matrix method. ZETA (CCDENSITY). (CCLAMBDA). zoom psi4.driver.p4util.InPsight attribute. ZPVE. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .  · ; 1.7;  · . PSI4. Index. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/genindex.html:128772,update,updated,128772,psi4manual/1.7.x/genindex.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/genindex.html,1,['update'],['updated']
Deployability,"pVDZ energy for the H2O molecule. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). cepa2; cc-pvdz H2O Test ACPF Energy/Properties. cc48; reproduces dipole moments in J.F. Stanton’s “biorthogonal” JCP paper. sapt7; SAPT0 open-shell computation of H2O-HO2 interaction energy First with cc-pVDZ and density fitted integrals with UHF Then with 6-31g and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with UHF. dfomp2-4; OMP2 cc-pVDZ energy for the NO molecule. dft-omega; Test omega is setable updated wb97x_20,wb97x_03 to account for new BraggSlater radii. matrix2; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating. extern2; External potential calculation involving a TIP3P water and a QM water for DFMP2. Finite different test of the gradient is performed to validate forces. casscf-sp; CASSCF/6-31G** energy point. dft-grad-lr3; wB97X-D test for a large UKS molecule update ref gradient due to new BraggSlater radii. nbody-intermediates; HF/cc-pVDZ many body energies of an arbitrary noble gas trimer complex Size vs cost tradeoff is rough here. cc44; Test case for some of the PSI4 out-of-core codes. The code is given only 2.0 MB of memory, which is insufficient to hold either the A1 or B2 blocks of an ovvv quantity in-core, but is sufficient to hold at least two copies of an oovv quantity in-core. oremp-grad1; integral conventional OO-REMP/cc-pVDZ engrad single points for the H2O molecule. pywrap-molecule; Check that C++ Molecule class and qcdb molecule class are reading molecule input strings identically. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. rasci-h2o; RASCI/6-31G** H2O Energy Point. casscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule see C. D. Sherrill and P. Piecuch, J. Chem. Phys. 122, 124104 (2005). props3; DF-SCF cc-pVDZ multipole moments of benzene, up to 7th order and electrostatic potentials evaluated at t",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/autodoc_testsuite_corepsi4.html:7274,update,update,7274,psi4manual/1.8.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodoc_testsuite_corepsi4.html,2,['update'],['update']
Deployability,"p_py_boolean>`; :param return_wfn: ``'on'`` || |dl| ``'off'`` |dr|. Indicate to additionally return the :py:class:`~psi4.core.Wavefunction`; calculation result as the second element (after *float* energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. :type func: :ref:`function <op_py_function>`; :param func: |dl| ``gradient`` |dr| || ``energy`` || ``cbs``. Indicates the type of calculation to be performed on the molecule.; The default dertype accesses ``'gradient'`` or ``'energy'``, while; ``'cbs'`` performs a multistage finite difference calculation.; If a nested series of python functions is intended (see :ref:`sec:intercalls`),; use keyword ``freq_func`` instead of ``func``. :type mode: string; :param mode: |dl| ``'continuous'`` |dr| || ``'sow'`` || ``'reap'``. For a finite difference of energies or gradients frequency, indicates; whether the calculations required to complete the frequency are to be run; in one file (``'continuous'``) or are to be farmed out in an; embarrassingly parallel fashion (``'sow'``/``'reap'``)/ For the latter,; run an initial job with ``'sow'`` and follow instructions in its output file.; For maximum flexibility, ``return_wfn`` is always on in ``'reap'`` mode. :type dertype: :ref:`dertype <op_py_dertype>`; :param dertype: |dl| ``'hessian'`` |dr| || ``'gradient'`` || ``'energy'``. Indicates whether analytic (if available- they're not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. :type irrep: int or string; :param irrep: |dl| ``-1`` |dr| || ``1`` || ``'b2'`` || ``'App'`` || etc. Indicates which symmetry block (:ref:`Cotton <table:irrepOrdering>` ordering) of vibrational; frequencies to be computed. ``1``, ``'1'``, or ``'a1'`` represents; :math:`a_1`, requesting only the totally symmetric modes.; ``-1`` indicates a full frequency calculation. .. note:: Analytic hessians are only available for RHF. For all other methods, Frequencies will; p",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/driver.html:82281,continuous,continuous,82281,psi4manual/1.1.0/_modules/psi4/driver/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/driver.html,2,['continuous'],['continuous']
Deployability,"pa2; cc-pvdz H2O Test ACPF Energy/Properties. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for the H2O molecule. sapt2; SAPT0 aug-cc-pVDZ computation of the benzene-methane interaction energy, using the aug-pVDZ-JKFIT DF basis for SCF, the aug-cc-pVDZ-RI DF basis for SAPT0 induction and dispersion, and the aug-pVDZ-JKFIT DF basis for SAPT0 electrostatics and induction. This example uses frozen core as well as asyncronous I/O while forming the DF integrals and CPHF coefficients. nbo; Generation of NBO file. frac-traverse; Scan fractional occupation of electrons updated values due to new BraggSlater radii. sapt-dft-lrc; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. dfcasscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule. soscf-dft; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. sapt-compare; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ cation. cc7; Tests CCENERGY’s CCSD gradient in the presence of a dipole field. ghosts; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using explicit specification of ghost atoms. This is equivalent to the dfmp2_1 sample but uses both (equivalent) specifications of ghost atoms in a manual counterpoise correction. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. olccd-freq1; OLCCD cc-pVDZ freqs for C2H2. opt",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html:22434,update,updated,22434,psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html,4,['update'],['updated']
Deployability,"pace, linear_tol: float = 1e-06) → psi4.core.OrbitalSpace¶; Given two spaces, it projects out one space from the other and returns the new spaces The first argument (orb_space) is the space to project out. The returned space will be orthogonal to this The second argument (ri_space) is the space that is being projected on. The returned space = ri_space - orb_space The third argument is the tolerance for linear dependencies. static build_ri_space(combined: psi4.core.BasisSet, lindep_tol: float = 1e-06) → psi4.core.OrbitalSpace¶; Given combined basis sets, it constructs an orthogonalized space with the same span. Linearly dependent orbitals are thrown out. The first argument, combined, is the two basis sets together but unorthogonalized The second argument, lindep_tol, is the tolerance for linear dependencies. dim(self: psi4.core.OrbitalSpace) → psi4.core.Dimension¶; MO dimensions. evals(self: psi4.core.OrbitalSpace) → psi4.core.Vector¶; Corresponding eigenvalues of the C matrix. id(self: psi4.core.OrbitalSpace) → str¶; Unique identifier. integral(self: psi4.core.OrbitalSpace) → psi4.core.IntegralFactory¶; The integral factory used to create C. name(self: psi4.core.OrbitalSpace) → str¶; Name of the orbital space. nirrep(self: psi4.core.OrbitalSpace) → int¶; Returns number of irreps. print_out(self: psi4.core.OrbitalSpace) → None¶; Print information about the orbital space to the output file. table of contents. OrbitalSpace; OrbitalSpace; OrbitalSpace.C(); OrbitalSpace.basisset(); OrbitalSpace.build_cabs_space(); OrbitalSpace.build_ri_space(); OrbitalSpace.dim(); OrbitalSpace.evals(); OrbitalSpace.id(); OrbitalSpace.integral(); OrbitalSpace.name(); OrbitalSpace.nirrep(); OrbitalSpace.print_out(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.9.1;  · . PSI4. PSI4 API: Linking C++ and Python; OrbitalSpace. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 08 February 2024 09:32PM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/api/psi4.core.OrbitalSpace.html:3271,update,updated,3271,psi4manual/1.9.x/api/psi4.core.OrbitalSpace.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/api/psi4.core.OrbitalSpace.html,1,['update'],['updated']
Deployability,"package manager conda) and, more particularly, Miniconda (a lightweight Python; distribution with same package manager conda). Some nice features for us:. cross-platform; no root, administrator, or sudo access required; built with high-performance math libraries; lightweight software stack (<100 MB w/o PSI4; ~1 GB including PSI4, numpy, and MKL); updated nightly so new features accessible; standardizes python distribution so no need to find/install libpython packages; add-ons (plugins, extra features requiring Fortran compiler, etc.) can be made available as conda packages; develop PSI4 through plugins without a pre-existing development environment, see Creating a New Plugin Using a Conda Pre-compiled Binary. The PSI4 binary repository is at Anaconda (formerly Binstar).; For commands to get a default installation, go to How to install a Psi4 binary with the Psi4conda installer, command-line; or the psicode downloads page.; Users proficient with conda may prefer to consult What do the conda packages psi4 & psi4-dev and the installer psi4conda contain.; For more flexibility and a detailed explanation, go to; Detailed Installation of Miniconda and Detailed Installation of . How to install a Psi4 binary with the Psi4conda installer, download site¶; Download one of the nine installers (Linux/Mac/Windows; Py36/37/38/39).; bash it. Follow the prompts and do make the adjustments to; PATH and PSI_SCRATCH that it suggests at the end. Test; with psi4 --test (green and yellow good; red bad). Done. Explicit commands at How to install a Psi4 binary with the Psi4conda installer, command-line. How to install a Psi4 binary with the Psi4conda installer, command-line¶; Sequence of commands to get you to a working PSI4 on Linux,; Mac, Windows (Ubuntu shell for Windows accepts Linux installers), or native Windows.; Installs Miniconda+Psi4+AddOns into $HOME/psi4conda and; the PSI4 executable into the main conda environment at; $HOME/psi4conda/bin/psi4.; # Linux or WSL (Windows Subsystem f",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/conda-1.html:1684,install,installer,1684,psi4manual/1.4.0/conda-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html,4,['install'],['installer']
Deployability,"packages and channels info if necessary. Probably long-term stable.; Don’t edit the Python version, as that’s controlled by the GHA. Edit the GHA control file https://github.com/psi4/psi4meta/blob/master/.github/workflows/Docker.yml; matrix.cfg list for changed Python version and to label the tags with current Psi4 from c-f.; Commit environment.yaml or Docker.yml to trigger GHA Docker builds.; Check at DockerHub for new images. Generate download page for psicode.org¶. Be in local clone of repository https://github.com/psi4/psicode-hugo-website .; Copy and edit a new file akin to content/installs/v182.md. Add it to the git index. Note the edition string v182 in frontmatter for this and future filenames.; Don’t postdate the date string in frontmatter or it won’t render.; Ultimately, make sure the aliases:\n  - /installs/latest/ lines are added to this new file; and removed from the previous latest file, but this can wait until the installer page has been tested. Copy and edit a new file akin to data/installs/v182.yaml. Add it to the git index. Glance through the menu and notes content to make sure they’re up-to-date. This file determines; the structure of the install page.; Add or remove python versions and architectures if necessary.; Every couple years, update the default python version in datakey: python/selected and; in optsHandler at the end.; Always adjust the datakey: branch/stable block.; For releases, adjust the datakey: branch/previous and nightly blocks. Enter the scripts/ directory. If the previous release hasn’t had a snapshot saved, copy; install-generator.py into a version-labeled file, and add it to the git index.; Edit scripts/install-generator.py. Primarily, edit edition at the top.; Also, edit other arrays (stuff above ## Outputs) or messages (logic below ## Outputs); that should change. Run the install-generator.py in place. It will dump two new files, e.g.,; data/installs/cmd/{edition}.json and data/installs/dlbtn/{edition}.json. Add these to the; ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/manage_release.html:17388,install,installs,17388,psi4manual/1.9.x/manage_release.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/manage_release.html,2,['install'],['installs']
Deployability,"pairs on same strand). S22¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries from Jurecka et al. PCCP 8 1985 (2006).; First revision to interaction energies (S22A) from Takatani et al. JCP 132 144104 (2010).; Second revision to interaction energies (S22B) from Marshall et al. JCP 135 194102 (2011). cp 'off' || 'on'; rlxd 'off'; benchmark; 'S220' Jurecka et al. PCCP 8 1985 (2006).; 'S22A' Takatani et al. JCP 132 144104 (2010).; 'S22B' Marshall et al. JCP 135 194102 (2011). subset; 'small' water dimer, methane dimer, ethene-ethine; 'large' adenine-thymine; 'HB' hydrogen-bonded systems; 'MX' mixed-influence systems; 'DD' dispersion-dominated systems; 'S11' smaller systems in S22. HTBH¶. Database (Truhlar) of hydrogen-transfer barrier height reactions.; Geometries from Truhlar and coworkers at site http://t1.chem.umn.edu/misc/database_group/database_therm_bh/raw_geom.cgi .; Reference energies from Zhao et al. JPCA, 109 2012-2018 (2005) doi: 10.1021/jp045141s [in supporting information]. cp 'off'; rlxd 'off'; subset; 'small'; 'large'. NCB31¶. Database of <description of members and reference energy type>.; Geometries from <Reference>.; Reference interaction energies from <Reference>. cp 'off' || 'on'; rlxd 'off' || 'on'; benchmark; '<benchmark_name>' <Reference>.; '<default_benchmark_name>' <Reference>. subset; 'small'; 'large'; 'HB6' hydrogen-bonded; 'CT7' charge-transfer; 'DI6'; 'WI7' weakly interacting; 'PPS5'. Table Of Contents. BAKERJCC96; ACENES; NBC10; S22by5; BENCH12; BAKERJCC93; RGC10; S66; CORE; BASIC; NHTBH; HBC6; HSG; JSCH; S22; HTBH; NCB31. Previous topic; Database; Next topic; Complete Basis Set; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Psithon Functions: Invoking a Calculation »; Database ». © Copyright 2012, The Psi4 Project.; Last updated on Oct 16, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/autodoc_available_databases-1.html:8901,update,updated,8901,psi4manual/4.0b3/autodoc_available_databases-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_available_databases-1.html,2,['update'],['updated']
Deployability,"paper:. “The Generalized Douglas-Kroll Transformation,” A. Wolf,; M. Reiher, and B. A. Hess, J. Chem. Phys. 117, 9215 (2002).; (doi: 10.1063/1.1515314). How to configure dkh for building Psi4¶; Role and Dependencies. Role — In PSI4, DKH is a library that provides additional; quantum chemical capabilities (relativistic effects).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) dkh; Upstream Dependencies — dkh \(\Leftarrow\) Fortran. CMake Variables. ENABLE_dkh — CMake variable toggling whether Psi4 builds with dkh; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For dkh, set to an installation directory containing include/DKH/DKH_MANGLE.h; dkh_DIR — CMake variable to specify where pre-built dkh can be found. Set to installation directory containing share/cmake/dkh/dkhConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_dkh — CMake variable to force internal build of dkh instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_dkh — CMake variable to force detecting pre-built dkh and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_dkh=ON. Build without dkh. >>> cmake. Link against pre-built. >>> cmake -DENABLE_dkh=ON -DCMAKE_PREFIX_PATH=/path/to/dkh/root. >>> cmake -DENABLE_dkh=ON -Ddkh_DIR=/path/to/dkh/configdir. Build bundled despite pre-built being detectable. >>> cmake -DENABLE_dkh=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/dkh/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_dkh=ON. table of contents. Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess; Installation; Input; Keywords; RELATIVISTIC; DKH_ORDER. Reference; How to configure dkh for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.6;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess. © Copyright 2022, The Psi4 Project.; Last updated on Thursday, 19 May 2022 08:57PM.; Created using Sphinx 4.5.0.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/dkh.html:3819,update,updated,3819,psi4manual/1.6.x/dkh.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/dkh.html,1,['update'],['updated']
Deployability,"parameter. Type: double; Default: 0.0. DFT_OMEGA_C¶. The DFT Correlation Range-separation parameter. Type: double; Default: 0.0. DFT_RADIAL_POINTS¶. Number of radial points. Type: integer; Default: 75. DFT_RADIAL_SCHEME¶. Radial Scheme. Type: string; Possible Values: TREUTLER, BECKE, MULTIEXP, EM, MURA; Default: TREUTLER. DFT_SPHERICAL_POINTS¶. Number of spherical points (A Lebedev Points number). Type: integer; Default: 302. DFT_SPHERICAL_SCHEME¶. Spherical Scheme. Type: string; Possible Values: LEBEDEV; Default: LEBEDEV. DFT_V2_RHO_CUTOFF¶. Minima rho cutoff for the second derivative. Type: double; Default: 1.e-6. DFT_VV10_B¶. Define VV10 parameter b. Type: double; Default: 0.0. DFT_VV10_C¶. Define VV10 parameter C. Type: double; Default: 0.0. DFT_VV10_POSTSCF¶. post-scf VV10 correction. Type: boolean; Default: false. DFT_VV10_RADIAL_POINTS¶. Number of radial points for VV10 NL integration. Type: integer; Default: 50. DFT_VV10_SPHERICAL_POINTS¶. Number of spherical points (A Lebedev Points number) for VV10 NL integration. Type: integer; Default: 146. LOCAL_CONVERGENCE¶. The convergence on the orbital localization procedure. Type: conv double; Default: 1e-12. LOCAL_MAXITER¶. The maxiter on the orbital localization procedure. Type: integer; Default: 200. NL_DISPERSION_PARAMETERS¶. Parameters defining the -NL/-V dispersion correction. First b, then C. Type: array; Default: No Default. SAVE_UHF_NOS¶. Save the UHF NOs. Type: boolean; Default: false. UHF_NOONS¶. The number of NOONs to print in a UHF calc. Type: string; Default: 3. Expert General Wavefunction Info¶. PK_ALGO¶. Select the PK algorithm to use. For debug purposes, selection will be automated later. Type: string; Possible Values: REORDER, YOSHIMINE; Default: REORDER. PK_ALL_NONSYM¶. All densities are considered non symmetric, debug only. Type: boolean; Default: false. PK_MAX_BUCKETS¶. Maximum numbers of batches to read PK supermatrix. Type: integer; Default: 500. PK_NO_INCORE¶. Deactivate in core algorithm. F",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/autodir_options_c/module__scf-1.html:12186,integrat,integration,12186,psi4manual/1.3.2/autodir_options_c/module__scf-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/autodir_options_c/module__scf-1.html,4,['integrat'],['integration']
Deployability,"params; from psi4.driver import p4util; #import numpy as np. [docs]class EmpericalDispersion(object):; def __init__(self, alias, dtype, **kwargs):; # 1) Functional name processing:; # 1a) Cleave out base functional from alias:; for dash in [""-"" + name.lower() for name in get_dispersion_aliases()]:; if dash == alias.lower()[-len(dash):]:; alias = alias[:-len(dash)]. # 1b) Alias must be lowercase; self.alias = alias.lower(). # 2) Figure out dispersion type:; # 2a) Strip ""-"" from dtype; if dtype[0] == ""-"":; dtype = dtype[1:]. # 2b) Un-alias and capitalise dtype for printing; if dtype.lower() in get_dispersion_aliases():; self.dtype = ""-"" + get_dispersion_aliases()[dtype.lower()]; else:; self.dtype = ""-"" + dtype.lower(). # 3) Get dispersion parameters:; # 3a) Set defaults; self.dash_params = get_default_dashparams(dtype). # 3b) Load passed variables from dictionary or from functional type; tuple_params = kwargs.pop('tuple_params', None); if ""dashparams"" in kwargs:; self.dash_params.update(kwargs.pop(""dashparams"")); elif dtype in dftd3.dashcoeff:; self.dash_params.update(dftd3.dash_server(alias, dtype)); else:; self.dash_params = {'s6': 1.0}. # 4) Dispersion class build process:; # 4a) Build coefficients for dftd3; if self.dtype in [""-d2gr"", ""-d3zero"", ""-d3bj"", ""-d3mzero"", ""-d3mbj""]:; self.dtype = self.dtype.replace('-d2gr', '-d2'); self.disp_type = 'gr'. # Odd tuple syntax favored by psi; if (tuple_params is not None):; self.tuple_params = None; self.dash_params['s6'] = tuple_params[0]. if len(tuple_params) > 1:; if ""d2"" in self.dtype:; self.dash_params[""alpha6""] = tuple_params[1]; elif (""zero"" in self.dtype) or (""bj"" in self.dtype):; self.dash_params[""s8""] = tuple_params[1]. if len(tuple_params) > 2:; if ""zero"" in self.dtype:; self.dash_params[""sr6""] = tuple_params[2]; elif ""bj"" in self.dtype:; self.dash_params[""a1""] = tuple_params[2]. if len(tuple_params) > 3:; if ""zero"" in self.dtype:; self.dash_params[""alpha6""] = tuple_params[3]; elif ""bj"" in self.dtype:; self.dash_",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/_modules/psi4/driver/procrouting/empirical_dispersion.html:2447,update,update,2447,psi4manual/1.2.1/_modules/psi4/driver/procrouting/empirical_dispersion.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/_modules/psi4/driver/procrouting/empirical_dispersion.html,1,['update'],['update']
Deployability,"passed as keyword argument, e.g., `energy(..., external_potentials=[[0.5, [0, 0, 1]], [-0.5, [0, 0, -1]]])`.'). [docs]class QMMMbohr():; """"""Hold charges and :py:class:`psi4.core.ExternalPotential`. To add external charges to a calculation, prefer; passing the array of charges with kwarg ``external_potentials``, as in extern2 example."""""". def __init__(self):; self.charges = []; self.diffuses = []; self.extern = core.ExternalPotential(). [docs] def addDiffuse(self, diffuse):; """"""Function to add a diffuse charge field *diffuse*.""""""; self.diffuses.append(diffuse). [docs] def addChargeBohr(self, Q, x, y, z):; """"""Function to add a point charge of magnitude *Q* at; position (*x*, *y*, *z*) Bohr. """"""; self.charges.append([Q, x, y, z]). [docs] def addChargeAngstrom(self, Q, x, y, z):; """"""Function to add a point charge of magnitude *Q* at; position (*x*, *y*, *z*) Angstroms. """"""; self.charges.append([Q, x / constants.bohr2angstroms, y / constants.bohr2angstroms, z / constants.bohr2angstroms]). def __str__(self):. s = ' ==> QMMM <==\n\n'. s = s + ' => Charges (a.u.) <=\n\n'; s = s + ' %11s %11s %11s %11s\n' % ('Z', 'x', 'y', 'z'); for k in range(0, len(self.charges)):; s = s + ' %11.7f %11.3E %11.3E %11.3E\n' % (self.charges[k][0], self.charges[k][1], self.charges[k][2], self.charges[k][3]); s = s + '\n'. s = s + ' => Diffuses <=\n\n'. for k in range(0, len(self.diffuses)):; s = s + str(self.diffuses[k]). return s. [docs] def populateExtern(self):; """"""Function to define a charge field external to the; molecule through point and diffuse charges. """"""; # Charges; for charge in self.charges:; self.extern.addCharge(charge[0], charge[1], charge[2], charge[3]); # Diffuses; for diffuse in self.diffuses:; diffuse.populateExtern(self.extern). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .  · ; 1.7;  · . PSI4. Module code; psi4.driver.qmmm. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/qmmm.html:5652,update,updated,5652,psi4manual/1.7.x/_modules/psi4/driver/qmmm.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/qmmm.html,1,['update'],['updated']
Deployability,"pasture plugins""); endif(). if(ENABLE_gdma OR ENABLE_dkh OR ENABLE_erd OR ENABLE_PCMSolver); if(psi4_SKIP_ENABLE_Fortran); message(STATUS ""NOT Enabling Fortran""); else(); enable_language(Fortran); set(Fortran_ENABLED ON) # communicate required languages with psi4-core; message(STATUS ""Enabling Fortran""); endif(); endif(). Note that external projects will have their own sets of build; configuration options. Only the most-common user knobs of those are; mentioned above. How to install elsewhere than /usr/local/psi4¶; The installation directory is the filesystem location for the executable; script, the Python module, basis set data, and other administrative files.; Unless using the conda package, which is relocatable, the installation; directory must be specified with CMake variable CMAKE_INSTALL_PREFIX; before compiling. Build with Specific Install Directory; cmake -DCMAKE_INSTALL_PREFIX=/nfs/common/software/psi4. Relevant CMake Options:; CMAKE_INSTALL_PREFIX=PATH # Location to which Psi4 and internally built; # add-ons are installed (default: /usr/local/psi4). Note; It’s not guaranteed, but if, in a pinch, you need to install a; built Psi4 to a location not configured by CMAKE_INSTALL_PREFIX,; recursively copy the folders under objdir/stage/prefix to; the desired location, chown them if needed, edit the shebang in; bin/psi4 if needed, and recursively delete all the “.pyc” files. It; may just run. How to compile for debugging¶; Flags to turn optimizations off and debugging on can be set across the; project and plugins with CMake variable CMAKE_BUILD_TYPE before; compiling. Note that these flags will not propagate to any add-ons that; are detected pre-built rather than built. Build without optimization; cmake -DCMAKE_BUILD_TYPE=debug. set the CMake build type [default: release]. Relevant CMake Options:; CMAKE_BUILD_TYPE=[debug|release] # Build type (Release or Debug)"" [default: release]. How to choose the compilation directory, {objdir}¶. there is no default; common ch",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/build_planning.html:23121,install,installed,23121,psi4manual/1.8.x/build_planning.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/build_planning.html,1,['install'],['installed']
Deployability,"pcmsolver/dft, and; pcmsolver/dipole. Keywords for PCMSolver¶. PCM¶. PCM boolean for pcmsolver module. Type: boolean; Default: false. PCM_SCF_TYPE¶. Use total or separate potentials and charges in the PCM-SCF step. Type: string; Possible Values: TOTAL, SEPARATE; Default: TOTAL. PCM_CC_TYPE¶. PCM-CCSD algorithm type. Type: string; Possible Values: PTE; Default: PTE. How to configure PCMSolver for building Psi4¶; Role and Dependencies. Role — In PSI4, PCMSolver is a library that provides additional; quantum chemical capabilities (solvation modeling).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) PCMSolver; Upstream Dependencies — PCMSolver \(\Leftarrow\) Fortran, zlib. CMake Variables. ENABLE_PCMSolver — CMake variable toggling whether Psi4 builds with PCMSolver; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For PCMSolver, set to an installation directory containing include/PCMSolver/pcmsolver.h; PCMSolver_DIR — CMake variable to specify where pre-built PCMSolver can be found. Set to installation directory containing share/cmake/PCMSolver/PCMSolverConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_PCMSolver — CMake variable to force internal build of PCMSolver instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_PCMSolver — CMake variable to force detecting pre-built PCMSolver and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_PCMSolver=ON. Build without PCMSolver. >>> cmake. table of contents. Interface to PCMSolver by R. Di Remigio; Installation; Using the polarizable continuum model; Keywords for PCMSolver; PCM; PCM_SCF_TYPE; PCM_CC_TYPE. How to configure PCMSolver for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.6;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to PCMSolver by R. Di Remigio. © Copyright 2022, The Psi4 Project.; Last updated on Thursday, 19 May 2022 08:57PM.; Created using Sphinx 4.5.0.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/pcmsolver.html:4861,install,installation,4861,psi4manual/1.6.x/pcmsolver.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/pcmsolver.html,2,"['install', 'update']","['installation', 'updated']"
Deployability,"pcseg-0. aug-pcSseg-4; aug-pcsseg-4; aug-cc-pv5z-jkfit; aug-cc-pwcv5z-ri; pcseg-0. pcseg-0; pcseg-0; def2-universal-jkfit; def2-sv_p_-ri; —. pcseg-1; pcseg-1; def2-universal-jkfit; def2-svp-ri; pcseg-0. pcseg-2; pcseg-2; def2-universal-jkfit; def2-tzvpp-ri; pcseg-0. pcseg-3; pcseg-3; def2-universal-jkfit; def2-qzvpp-ri; pcseg-0. pcseg-4; pcseg-4; cc-pv5z-jkfit; cc-pv5z-ri; pcseg-0. pcSseg-0; pcsseg-0; def2-universal-jkfit; def2-sv_p_-ri; pcseg-0. pcSseg-1; pcsseg-1; def2-universal-jkfit; def2-svp-ri; pcseg-0. pcSseg-2; pcsseg-2; def2-universal-jkfit; def2-tzvpp-ri; pcseg-0. pcSseg-3; pcsseg-3; def2-universal-jkfit; def2-qzvpp-ri; pcseg-0. pcSseg-4; pcsseg-4; cc-pv5z-jkfit; cc-pwcv5z-ri; pcseg-0. minix; minix; def2-universal-jkfit; def2-svp-ri; —. vDZP; vdzp; def2-universal-jkfit; def2-svp-ri; —. DZ; dz; —; —; —. DZP; dzp; —; —; —. DZVP; dzvp; dgauss-dzvp-mix; dgauss-dzvp-autoaux; —. psi3-DZP; psi3-dzp; —; —; —. psi3-TZ2P; psi3-tz2p; —; —; —. psi3-TZ2PF; psi3-tz2pf; —; —; —. sadlej-lpol-dl; sadlej-lpol-dl; —; —; —. sadlej-lpol-ds; sadlej-lpol-ds; —; —; —. sadlej-lpol-fl; sadlej-lpol-fl; —; —; —. sadlej-lpol-fs; sadlej-lpol-fs; —; —; —. 2zapa-nr; 2zapa-nr; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; pcseg-0. 3zapa-nr; 3zapa-nr; aug-cc-pvqz-jkfit; aug-cc-pvqz-ri; pcseg-0. 4zapa-nr; 4zapa-nr; aug-cc-pv5z-jkfit; aug-cc-pv5z-ri; pcseg-0. 5zapa-nr; 5zapa-nr; aug-cc-pv5z-jkfit; aug-cc-pv6z-ri; pcseg-0. 6zapa-nr; 6zapa-nr; aug-cc-pv6z-ri; aug-cc-pv6z-ri; pcseg-0. 7zapa-nr; 7zapa-nr; aug-cc-pv6z-ri; aug-cc-pv6z-ri; pcseg-0. cc-pvqz-f12; cc-pvqz-f12; cc-pv5z-jkfit; cc-pv5z-ri; pcseg-0. cc-pvtz-f12; cc-pvtz-f12; cc-pvqz-jkfit; cc-pvqz-ri; pcseg-0. cc-pvqz-f12; cc-pvqz-f12; cc-pv5z-jkfit; cc-pv5z-ri; pcseg-0. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Auxiliary Basis Sets; <no title>. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/autodoc_basissets_byfamily.html:21025,update,updated,21025,psi4manual/master/autodoc_basissets_byfamily.html,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_basissets_byfamily.html,1,['update'],['updated']
Deployability,"pd-ri; pcseg-0. aug-pcSseg-4; aug-pcsseg-4; aug-cc-pv5z-jkfit; aug-cc-pwcv5z-ri; pcseg-0. pcseg-0; pcseg-0; def2-universal-jkfit; def2-sv_p_-ri; —. pcseg-1; pcseg-1; def2-universal-jkfit; def2-svp-ri; pcseg-0. pcseg-2; pcseg-2; def2-universal-jkfit; def2-tzvpp-ri; pcseg-0. pcseg-3; pcseg-3; def2-universal-jkfit; def2-qzvpp-ri; pcseg-0. pcseg-4; pcseg-4; cc-pv5z-jkfit; cc-pv5z-ri; pcseg-0. pcSseg-0; pcsseg-0; def2-universal-jkfit; def2-sv_p_-ri; pcseg-0. pcSseg-1; pcsseg-1; def2-universal-jkfit; def2-svp-ri; pcseg-0. pcSseg-2; pcsseg-2; def2-universal-jkfit; def2-tzvpp-ri; pcseg-0. pcSseg-3; pcsseg-3; def2-universal-jkfit; def2-qzvpp-ri; pcseg-0. pcSseg-4; pcsseg-4; cc-pv5z-jkfit; cc-pwcv5z-ri; pcseg-0. minix; minix; def2-universal-jkfit; def2-svp-ri; —. vDZP; vdzp; def2-universal-jkfit; def2-svp-ri; —. DZ; dz; —; —; —. DZP; dzp; —; —; —. DZVP; dzvp; dgauss-dzvp-mix; dgauss-dzvp-autoaux; —. psi3-DZP; psi3-dzp; —; —; —. psi3-TZ2P; psi3-tz2p; —; —; —. psi3-TZ2PF; psi3-tz2pf; —; —; —. sadlej-lpol-dl; sadlej-lpol-dl; —; —; —. sadlej-lpol-ds; sadlej-lpol-ds; —; —; —. sadlej-lpol-fl; sadlej-lpol-fl; —; —; —. sadlej-lpol-fs; sadlej-lpol-fs; —; —; —. 2zapa-nr; 2zapa-nr; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; pcseg-0. 3zapa-nr; 3zapa-nr; aug-cc-pvqz-jkfit; aug-cc-pvqz-ri; pcseg-0. 4zapa-nr; 4zapa-nr; aug-cc-pv5z-jkfit; aug-cc-pv5z-ri; pcseg-0. 5zapa-nr; 5zapa-nr; aug-cc-pv5z-jkfit; aug-cc-pv6z-ri; pcseg-0. 6zapa-nr; 6zapa-nr; aug-cc-pv6z-ri; aug-cc-pv6z-ri; pcseg-0. 7zapa-nr; 7zapa-nr; aug-cc-pv6z-ri; aug-cc-pv6z-ri; pcseg-0. cc-pvqz-f12; cc-pvqz-f12; cc-pv5z-jkfit; cc-pv5z-ri; pcseg-0. cc-pvtz-f12; cc-pvtz-f12; cc-pvqz-jkfit; cc-pvqz-ri; pcseg-0. cc-pvqz-f12; cc-pvqz-f12; cc-pv5z-jkfit; cc-pv5z-ri; pcseg-0. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.9.1;  · . PSI4. Appendices; Auxiliary Basis Sets; <no title>. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 08 February 2024 09:32PM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/autodoc_basissets_byfamily.html:21011,update,updated,21011,psi4manual/1.9.x/autodoc_basissets_byfamily.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/autodoc_basissets_byfamily.html,1,['update'],['updated']
Deployability,"pe,; footnotes, *title*, *indextitle, and *theme* are got from function; *tableplan*. Once error dictionary is ready, it and all other arguments; are passed along to textables.table_generic. Two arrays, one of table; lines and one of index lines are returned unless *filename* is given,; in which case they're written to file and a filedict returned. """"""; # get plan for table from *tableplan* and some default values; kwargs = {'plotpath': plotpath,; 'subjoin': subjoin,; 'xlines': xlines,; 'xlimit': xlimit,; 'ialimit': ialimit}; rowplan, columnplan, landscape, footnotes, \; suggestedtitle, suggestedtheme = tableplan(**kwargs); #suggestedtitle, suggestedtheme = tableplan(plotpath=plotpath, subjoin=subjoin). # make figure files write themselves; autothread = {}; autoliliowa = {}; if plotpath == 'autogen':; for col in columnplan:; if col[3].__name__ == 'flat':; if col[4] and autothread:; print('TODO: merge not handled'); elif col[4] or autothread:; autothread.update(col[4]); else:; autothread = {'dummy': True}; elif col[3].__name__ == 'liliowa':; autoliliowa = {'dummy': True}. # negotiate some defaults; dbse = [self.dbse] if dbse is None else dbse; theme = suggestedtheme if theme is None else theme; title = suggestedtitle if title is None else title; indextitle = title if indextitle is None else indextitle; opttarget = {'default': ['']} if opttarget is None else opttarget. def unify_options(orequired, opossible):; """"""Perform a merge of options tags in *orequired* and *opossible* so; that the result is free of duplication and has the mode at the end. """"""; opt_combos = []; for oreq in orequired:; for opos in opossible:; pieces = sorted(set(oreq.split('_') + opos.split('_'))); if '' in pieces:; pieces.remove(''); for mode in ['CP', 'unCP', 'SA']:; if mode in pieces:; pieces.remove(mode); pieces.append(mode); pieces = '_'.join(pieces); opt_combos.append(pieces); return opt_combos. # gather list of model chemistries for table; mcs = ['-'.join(prod) for prod in itertools.product",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/dbwrap.html:96179,update,update,96179,psi4manual/1.0.0/_modules/qcdb/dbwrap.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/dbwrap.html,1,['update'],['update']
Deployability,"pe. Type: string; Default: SCF. WFN (DETCI)¶DETCI (Expert) — Wavefunction type. This should be set automatically from the calling Psithon function. Type: string; Possible Values: DETCI, CI, ZAPTN, DETCAS, CASSCF, RASSCF; Default: DETCI. WFN (GLOBALS)¶GLOBALS (Expert) — Wavefunction type. Type: string; Default: SCF. WFN (SCF)¶SCF (Expert) — Wavefunction type. Type: string; Possible Values: SCF; Default: SCF. WFN_SYM (MCSCF)¶MCSCF — The symmetry of the SCF wavefunction. Type: string; Default: 1. WFN_SYM (PSIMRCC)¶PSIMRCC — The symmetry of the target wavefunction, specified either by Schönflies symbol, or irrep number (in Cotton ordering). Type: string; Default: 1. WFN_TYPE (DFOCC)¶DFOCC — Type of the wavefunction. Type: string; Default: DF-OMP2. WFN_TYPE (OCC)¶OCC — Type of the wavefunction. Type: string; Possible Values: OMP2, OMP3, OCEPA, OMP2.5; Default: OMP2. WRITE_NOS (CCDENSITY)¶CCDENSITY — Do write natural orbitals (molden). Type: boolean; Default: false. WRITER_FILE_LABEL (GLOBALS)¶GLOBALS — Base filename for text files written by PSI, such as the MOLDEN output file, the Hessian file, the internal coordinate file, etc. Use the add_str_i function to make this string case sensitive. Type: string; Default: No Default. XI (CCDENSITY)¶CCDENSITY — Do compute Xi?. Type: boolean; Default: false. XI_CONNECT (CCDENSITY)¶CCDENSITY (Expert) — Do require \(\bar{H}\) and \(R\) to be connected?. Type: boolean; Default: false. ZERO_INTERNAL_AMPS (PSIMRCC)¶PSIMRCC — Do zero the internal amplitudes, i.e., those that map reference determinants onto each other?. Type: boolean; Default: true. ZETA (CCDENSITY)¶CCDENSITY — Do use zeta?. Type: boolean; Default: false. ZETA (CCLAMBDA)¶CCLAMBDA — Do use zeta?. Type: boolean; Default: false. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.6;  · . PSI4. Appendices; Keywords by Alpha. © Copyright 2022, The Psi4 Project.; Last updated on Thursday, 19 May 2022 08:57PM.; Created using Sphinx 4.5.0.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/autodoc_glossary_options_c.html:237530,update,updated,237530,psi4manual/1.6.x/autodoc_glossary_options_c.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/autodoc_glossary_options_c.html,1,['update'],['updated']
Deployability,"pe. Type: string; Possible Values: NO, X2C; Default: NO. DKH_ORDER¶. Order of Douglas-Kroll-Hess. Type: integer; Default: 2. Reference¶; When using this code please make reference to the appropriate following paper:. “The Generalized Douglas-Kroll Transformation,” A. Wolf,; M. Reiher, and B. A. Hess, J. Chem. Phys. 117, 9215 (2002).; (doi: 10.1063/1.1515314). How to configure dkh for building Psi4¶; Role and Dependencies. Role — In PSI4, DKH is a library that provides additional; quantum chemical capabilities (relativistic effects).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) dkh; Upstream Dependencies — dkh \(\Leftarrow\) Fortran. CMake Variables. ENABLE_dkh — CMake variable toggling whether Psi4 builds with dkh; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For dkh, set to an installation directory containing include/DKH/DKH_MANGLE.h; dkh_DIR — CMake variable to specify where pre-built dkh can be found. Set to installation directory containing share/cmake/dkh/dkhConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_dkh — CMake variable to force internal build of dkh instead of detecting pre-built. Examples. Build bundled. >>> cmake -DENABLE_dkh=ON. Build without dkh. >>> cmake. Link against pre-built. >>> cmake -DENABLE_dkh=ON -DCMAKE_PREFIX_PATH=/path/to/dkh/root. >>> cmake -DENABLE_dkh=ON -Ddkh_DIR=/path/to/dkh/configdir. Build bundled despite pre-built being detectable. >>> cmake -DENABLE_dkh=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/dkh/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_dkh=ON. table of contents. Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess; Installation; Input; Keywords; RELATIVISTIC; DKH_ORDER. Reference; How to configure dkh for building Psi4. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/dkh-1.html:2628,install,installation,2628,psi4manual/1.1.0/dkh-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/dkh-1.html,4,"['install', 'update']","['installation', 'updated']"
Deployability,"pe: array; Default: No Default. LOCAL_IBO_STARS_COMPLETENESS¶. IBO Charge metric for classification as Pi. Type: double; Default: 0.90. LOCAL_IBO_USE_STARS¶. IBO Stars procedure. Type: boolean; Default: false. LOCAL_MAXITER¶. Maximum iterations in localization. Type: integer; Default: 1000. MAXITER¶. Maximum number of iterations for CPHF. Type: integer; Default: 50. SSAPT0_SCALE¶. Do sSAPT0 exchange-scaling with F-SAPT. Type: boolean; Default: false. Expert¶. CUBIC_BASIS_TOLERANCE¶. CubicScalarGrid basis cutoff. Type: conv double; Default: 1.0e-12. CUBIC_BLOCK_MAX_POINTS¶. CubicScalarGrid maximum number of grid points per evaluation block. Type: integer; Default: 1000. FISAPT_MEM_SAFETY_FACTOR¶. Memory safety factor for heavy FISAPT operations. Type: double; Default: 0.9. LOCAL_IBO_CONDITION¶. Condition number to use in IBO metric inversions. Type: double; Default: 1.0e-7. LOCAL_USE_GHOSTS¶. Use ghost atoms in Pipek-Mezey or IBO metric. Type: boolean; Default: false. MINAO_BASIS¶. MinAO Basis for IBO. Type: string; Default: CC-PVTZ-MINAO. table of contents. FISAPT; General; CUBIC_GRID_OVERAGE; CUBIC_GRID_SPACING; D_CONVERGENCE; FISAPT_CHARGE_COMPLETENESS; FISAPT_DO_FSAPT; FISAPT_DO_FSAPT_DISP; FISAPT_DO_PLOT; FISAPT_FSAPT_EXCH_SCALE; FISAPT_FSAPT_FILEPATH; FISAPT_FSAPT_IND_RESPONSE; FISAPT_FSAPT_IND_SCALE; FISAPT_FSSAPT_FILEPATH; FISAPT_LINK_ASSIGNMENT; FISAPT_LINK_SELECTION; FISAPT_MANUAL_LINKS; FISAPT_PLOT_FILEPATH; INTS_TOLERANCE; LOCAL_CONVERGENCE; LOCAL_IBO_POWER; LOCAL_IBO_STARS; LOCAL_IBO_STARS_COMPLETENESS; LOCAL_IBO_USE_STARS; LOCAL_MAXITER; MAXITER; SSAPT0_SCALE. Expert; CUBIC_BASIS_TOLERANCE; CUBIC_BLOCK_MAX_POINTS; FISAPT_MEM_SAFETY_FACTOR; LOCAL_IBO_CONDITION; LOCAL_USE_GHOSTS; MINAO_BASIS. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; FISAPT. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/autodir_options_c/module__fisapt.html:4276,update,updated,4276,psi4manual/1.7.x/autodir_options_c/module__fisapt.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/module__fisapt.html,1,['update'],['updated']
Deployability,"pe: boolean; Default: false. HESS_TYPE (DFOCC); DFOCC — Type of the MO Hessian matrix. Type: string; Possible Values: APPROX_DIAG, APPROX_DIAG_EKT, APPROX_DIAG_HF, HF; Default: HF. HESS_UPDATE (OPTKING); OPTKING — Hessian update scheme. Type: string; Possible Values: NONE, BFGS, MS, POWELL, BOFILL; Default: BFGS. HESS_UPDATE_LIMIT (OPTKING); OPTKING — Do limit the magnitude of changes caused by the Hessian update?. Type: boolean; Default: true. HESS_UPDATE_LIMIT_MAX (OPTKING); OPTKING — If HESS_UPDATE_LIMIT is true, changes to the Hessian from the update are limited to the larger of HESS_UPDATE_LIMIT_SCALE * (the previous value) and HESS_UPDATE_LIMIT_MAX [au]. Type: double; Default: 1.00. HESS_UPDATE_LIMIT_SCALE (OPTKING); OPTKING — If HESS_UPDATE_LIMIT is true, changes to the Hessian from the update are limited to the larger of HESS_UPDATE_LIMIT_SCALE * (the previous value) and HESS_UPDATE_LIMIT_MAX [au]. Type: double; Default: 0.50. HESS_UPDATE_USE_LAST (OPTKING); OPTKING — Number of previous steps to use in Hessian update, 0 uses all. Type: integer; Default: 2. HESSIAN_WRITE (FINDIF); FINDIF — Do write a hessian output file? If so, the filename will end in .hess, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. ICORE (DETCI); DETCI — Specifies how to handle buffering of CI vectors. A value of 0 makes the program perform I/O one RAS subblock at a time; 1 uses entire CI vectors at a time; and 2 uses one irrep block at a time. Values of 0 or 2 cause some inefficiency in the I/O (requiring multiple reads of the C vector when constructing H in the iterative subspace if DIAG_METHOD = SEM), but require less core memory. Type: integer; Default: 1. IGNORE_TAU (DCFT); DCFT (Expert) — Controls whether to ignore terms containing non-idempotent contribution to OPDM or not (for debug puproses only). For practical applications only the default must be used. Typ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:138742,update,update,138742,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html,8,['update'],['update']
Deployability,"pe: double; Default: 0.4. REMP_A¶. mixing parameter for the REMP hybrid perturbation theory, A specifies the Moller-Plesset fraction. Type: double; Default: 0.15e0. RMS_MOGRAD_CONVERGENCE¶. Convergence criterion for RMS orbital gradient. If this keyword is not set by the user, DFOCC will estimate and use a value required to achieve the desired E_CONVERGENCE The listed default will be used for the default value of E_CONVERGENCE. Type: conv double; Default: 1e-4. R_CONVERGENCE¶. Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-5. SCS_TYPE¶. Type of the SCS method. Type: string; Possible Values: SCS, SCSN, SCSVDW, SCSMI; Default: SCS. SOS_TYPE¶. Type of the SOS method. Type: string; Possible Values: SOS, SOSPI; Default: SOS. TRIPLES_IABC_TYPE¶. The algorithm to handle (ia|bc) type integrals that used for (T) correction. Type: string; Possible Values: INCORE, AUTO, DIRECT, DISK; Default: DISK. WFN_TYPE¶. Type of the wavefunction. Type: string; Default: DF-OMP2. table of contents. DFOCC; General; CC_DIIS_MAX_VECS; CC_DIIS_MIN_VECS; CC_LAMBDA; CC_MAXITER; CHOLESKY; CHOLESKY_TOLERANCE; COMPUT_S2; CUTOFF; DO_DIIS; DO_LEVEL_SHIFT; DO_SCS; DO_SOS; E3_SCALE; EKT_IP; E_CONVERGENCE; HESS_TYPE; INTEGRAL_CUTOFF; LEVEL_SHIFT; LINEQ_SOLVER; MAX_MOGRAD_CONVERGENCE; MOLDEN_WRITE; MO_DIIS_NUM_VECS; MO_MAXITER; MO_STEP_MAX; MP2_AMP_TYPE; MP2_OS_SCALE; MP2_SOS_SCALE; MP2_SOS_SCALE2; MP2_SS_SCALE; NAT_ORBS; OCC_ORBS_PRINT; OEPROP; OO_SCALE; OPT_METHOD; ORB_OPT; ORB_RESP_SOLVER; ORTH_TYPE; PCG_BETA_TYPE; PCG_CONVERGENCE; PCG_MAXITER; PPL_TYPE; QCHF; READ_SCF_3INDEX; REGULARIZATION; REG_PARAM; REMP_A; RMS_MOGRAD_CONVERGENCE; R_CONVERGENCE; SCS_TYPE; SOS_TYPE; TRIPLES_IABC_TYPE; WFN_TYPE. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Keywords by Module; DFOCC. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/autodir_options_c/module__dfocc.html:7947,update,updated,7947,psi4manual/master/autodir_options_c/module__dfocc.html,https://psicode.org,https://psicode.org/psi4manual/master/autodir_options_c/module__dfocc.html,1,['update'],['updated']
Deployability,"pe: double; Default: 0.90. LOCAL_IBO_USE_STARS¶. IBO Stars procedure. Type: boolean; Default: false. LOCAL_MAXITER¶. Maximum iterations in localization. Type: integer; Default: 1000. MAXITER¶. Maximum number of iterations for CPHF. Type: integer; Default: 50. SSAPT0_SCALE¶. Do sSAPT0 exchange-scaling with F-SAPT. Type: boolean; Default: false. Expert¶. CUBIC_BASIS_TOLERANCE¶. CubicScalarGrid basis cutoff. Type: conv double; Default: 1.0e-12. CUBIC_BLOCK_MAX_POINTS¶. CubicScalarGrid maximum number of grid points per evaluation block. Type: integer; Default: 1000. FISAPT_MEM_SAFETY_FACTOR¶. Memory safety factor for heavy FISAPT operations. Type: double; Default: 0.9. LOCAL_IBO_CONDITION¶. Condition number to use in IBO metric inversions. Type: double; Default: 1.0e-7. LOCAL_USE_GHOSTS¶. Use ghost atoms in Pipek-Mezey or IBO metric. Type: boolean; Default: false. MINAO_BASIS¶. MinAO Basis for IBO. Type: string; Default: CC-PVTZ-MINAO. Table Of Contents. FISAPT; General; CUBIC_GRID_OVERAGE; CUBIC_GRID_SPACING; D_CONVERGENCE; FISAPT_CHARGE_COMPLETENESS; FISAPT_DO_FSAPT; FISAPT_DO_PLOT; FISAPT_FSAPT_EXCH_SCALE; FISAPT_FSAPT_FILEPATH; FISAPT_FSAPT_IND_RESPONSE; FISAPT_FSAPT_IND_SCALE; FISAPT_FSSAPT_FILEPATH; FISAPT_LINK_ASSIGNMENT; FISAPT_LINK_SELECTION; FISAPT_MANUAL_LINKS; FISAPT_PLOT_FILEPATH; INTS_TOLERANCE; LOCAL_CONVERGENCE; LOCAL_IBO_POWER; LOCAL_IBO_STARS; LOCAL_IBO_STARS_COMPLETENESS; LOCAL_IBO_USE_STARS; LOCAL_MAXITER; MAXITER; SSAPT0_SCALE. Expert; CUBIC_BASIS_TOLERANCE; CUBIC_BLOCK_MAX_POINTS; FISAPT_MEM_SAFETY_FACTOR; LOCAL_IBO_CONDITION; LOCAL_USE_GHOSTS; MINAO_BASIS. Previous topic; POINTS; Next topic; CUBIC_BASIS_TOLERANCE. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Keywords by Module ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodir_options_c/module__fisapt-1.html:4472,update,updated,4472,psi4manual/1.0.0/autodir_options_c/module__fisapt-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodir_options_c/module__fisapt-1.html,2,['update'],['updated']
Deployability,"pe: integer; Default: 9. DDX_FMM¶. Use the fast multipole method to accelerate the solver. Type: boolean; Default: true. DDX_INCORE¶. Use an in-core version, which uses more memory, but is generally faster. Type: boolean; Default: false. DDX_LOGFILE¶. Logfile to dump a full trace of the DDX solver history for debugging. Type: string; Default: No Default. DDX_SHIFT¶. Shift for characteristic function of sphere overlap. Advanced parameter, which usually does not need to be modified. Valid values are within the range [-1, 1] with -100 denoting an automatic selection of the best shift. Type: double; Default: -100.0. How to configure ddx for building Psi4¶; Role and Dependencies. Role — In PSI4, ddx is a library for providing fast continuum; solvation models.; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) ddx; Upstream Dependencies — ddx \(\Leftarrow\) Fortran. CMake Variables. ENABLE_ddx — CMake variable toggling whether Psi4 automatically installs ddx. Examples. Build and install ddx if needed. >>> cmake -DENABLE_ddx=ON. Build without ddx. >>> cmake. table of contents. Interface to ddx by A. Mikhalev, A. Jha, M. Nottoli and M. F. Herbst; Installation; Using dd-based continum solvation models; Solvent model and solvent cavity definition; DDX; DDX_MODEL; DDX_RADII; DDX_RADII_SCALING; DDX_RADII_SET; DDX_SOLVENT_EPSILON; DDX_SOLVENT. Numerical integration and discretisation parameters; DDX_SOLUTE_RADIAL_POINTS; DDX_SOLUTE_SPHERICAL_POINTS; DDX_LMAX; DDX_N_LEBEDEV. Iterative solver parameters; DDX_DIIS_MAX_VECS; DDX_MAXITER; DDX_SOLVATION_CONVERGENCE. Further keywords for ddx; DDX_ETA; DDX_FMM_LOCAL_LMAX; DDX_FMM_MULTIPOLE_LMAX; DDX_FMM; DDX_INCORE; DDX_LOGFILE; DDX_SHIFT. How to configure ddx for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to ddx by A. Mikhalev, A. Jha, M. Nottoli and M. F. Herbst. © Copyright 2007-2022, The Psi4 Project.; L",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/ddx.html:9534,install,install,9534,psi4manual/1.7.x/ddx.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/ddx.html,1,['install'],['install']
Deployability,"pe: integer; Default: 9. DDX_FMM¶. Use the fast multipole method to accelerate the solver. Type: boolean; Default: true. DDX_INCORE¶. Use an in-core version, which uses more memory, but is generally faster. Type: boolean; Default: false. DDX_LOGFILE¶. Logfile to dump a full trace of the DDX solver history for debugging. Type: string; Default: No Default. DDX_SHIFT¶. Shift for characteristic function of sphere overlap. Advanced parameter, which usually does not need to be modified. Valid values are within the range [-1, 1] with -100 denoting an automatic selection of the best shift. Type: double; Default: -100.0. How to configure ddx for building Psi4¶; Role and Dependencies. Role — In PSI4, ddx is a library for providing fast continuum; solvation models.; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) ddx; Upstream Dependencies — ddx \(\Leftarrow\) Fortran. CMake Variables. ENABLE_ddx — CMake variable toggling whether Psi4 automatically installs ddx. Examples. Build and install ddx if needed. >>> cmake -DENABLE_ddx=ON. Build without ddx. >>> cmake. table of contents. Interface to ddx by A. Mikhalev, A. Jha, M. Nottoli and M. F. Herbst; Installation; Using dd-based continum solvation models; Solvent model and solvent cavity definition; DDX; DDX_MODEL; DDX_RADII; DDX_RADII_SCALING; DDX_RADII_SET; DDX_SOLVENT_EPSILON; DDX_SOLVENT; DDX_SOLVENT_KAPPA. Numerical integration and discretisation parameters; DDX_SOLUTE_RADIAL_POINTS; DDX_SOLUTE_SPHERICAL_POINTS; DDX_LMAX; DDX_N_LEBEDEV. Iterative solver parameters; DDX_DIIS_MAX_VECS; DDX_MAXITER; DDX_SOLVATION_CONVERGENCE. Further keywords for ddx; DDX_ETA; DDX_FMM_LOCAL_LMAX; DDX_FMM_MULTIPOLE_LMAX; DDX_FMM; DDX_INCORE; DDX_LOGFILE; DDX_SHIFT. How to configure ddx for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to ddx by A. Mikhalev, A. Jha, M. Nottoli and M. F. Herbst. © Copyright 200",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/ddx.html:10901,install,install,10901,psi4manual/master/ddx.html,https://psicode.org,https://psicode.org/psi4manual/master/ddx.html,1,['install'],['install']
Deployability,"pe: integer; Default: 9. DDX_FMM¶. Use the fast multipole method to accelerate the solver. Type: boolean; Default: true. DDX_INCORE¶. Use an in-core version, which uses more memory, but is generally faster. Type: boolean; Default: false. DDX_LOGFILE¶. Logfile to dump a full trace of the DDX solver history for debugging. Type: string; Default: No Default. DDX_SHIFT¶. Shift for characteristic function of sphere overlap. Advanced parameter, which usually does not need to be modified. Valid values are within the range [-1, 1] with -100 denoting an automatic selection of the best shift. Type: double; Default: -100.0. How to configure ddx for building Psi4¶; Role and Dependencies. Role — In PSI4, ddx is a library for providing fast continuum; solvation models.; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) ddx; Upstream Dependencies — ddx \(\Leftarrow\) Fortran. CMake Variables. ENABLE_ddx — CMake variable toggling whether Psi4 automatically installs ddx. Examples. Build and install ddx if needed. >>> cmake -DENABLE_ddx=ON. Build without ddx. >>> cmake. table of contents. Interface to ddx by A. Mikhalev, A. Jha, M. Nottoli and M. F. Herbst; Installation; Using dd-based continum solvation models; Solvent model and solvent cavity definition; DDX; DDX_MODEL; DDX_RADII; DDX_RADII_SCALING; DDX_RADII_SET; DDX_SOLVENT_EPSILON; DDX_SOLVENT; DDX_SOLVENT_KAPPA. Numerical integration and discretisation parameters; DDX_SOLUTE_RADIAL_POINTS; DDX_SOLUTE_SPHERICAL_POINTS; DDX_LMAX; DDX_N_LEBEDEV. Iterative solver parameters; DDX_DIIS_MAX_VECS; DDX_MAXITER; DDX_SOLVATION_CONVERGENCE. Further keywords for ddx; DDX_ETA; DDX_FMM_LOCAL_LMAX; DDX_FMM_MULTIPOLE_LMAX; DDX_FMM; DDX_INCORE; DDX_LOGFILE; DDX_SHIFT. How to configure ddx for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to ddx by A. Mikhalev, A. Jha, M. Nottoli and M. F. Herbst. © Copyright 2007-2023,",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/ddx.html:10763,install,install,10763,psi4manual/1.8.x/ddx.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/ddx.html,1,['install'],['install']
Deployability,"pe: integer; Default: 9. DDX_FMM¶. Use the fast multipole method to accelerate the solver. Type: boolean; Default: true. DDX_INCORE¶. Use an in-core version, which uses more memory, but is generally faster. Type: boolean; Default: false. DDX_LOGFILE¶. Logfile to dump a full trace of the DDX solver history for debugging. Type: string; Default: No Default. DDX_SHIFT¶. Shift for characteristic function of sphere overlap. Advanced parameter, which usually does not need to be modified. Valid values are within the range [-1, 1] with -100 denoting an automatic selection of the best shift. Type: double; Default: -100.0. How to configure ddx for building Psi4¶; Role and Dependencies. Role — In PSI4, ddx is a library for providing fast continuum; solvation models.; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) ddx; Upstream Dependencies — ddx \(\Leftarrow\) Fortran. CMake Variables. ENABLE_ddx — CMake variable toggling whether Psi4 automatically installs ddx. Examples. Build and install ddx if needed. >>> cmake -DENABLE_ddx=ON. Build without ddx. >>> cmake. table of contents. Interface to ddx by A. Mikhalev, A. Jha, M. Nottoli and M. F. Herbst; Installation; Using dd-based continum solvation models; Solvent model and solvent cavity definition; DDX; DDX_MODEL; DDX_RADII; DDX_RADII_SCALING; DDX_RADII_SET; DDX_SOLVENT_EPSILON; DDX_SOLVENT; DDX_SOLVENT_KAPPA. Numerical integration and discretisation parameters; DDX_SOLUTE_RADIAL_POINTS; DDX_SOLUTE_SPHERICAL_POINTS; DDX_LMAX; DDX_N_LEBEDEV. Iterative solver parameters; DDX_DIIS_MAX_VECS; DDX_MAXITER; DDX_SOLVATION_CONVERGENCE. Further keywords for ddx; DDX_ETA; DDX_FMM_LOCAL_LMAX; DDX_FMM_MULTIPOLE_LMAX; DDX_FMM; DDX_INCORE; DDX_LOGFILE; DDX_SHIFT. How to configure ddx for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.9.1;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to ddx by A. Mikhalev, A. Jha, M. Nottoli and M. F. Herbst. © Copyright 2007-2024,",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/ddx.html:10894,install,install,10894,psi4manual/1.9.x/ddx.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/ddx.html,1,['install'],['install']
Deployability,"pe: string; Default: No Default. JOBTYPE (CPHF); CPHF (Expert) — Type of job being performed. Type: string; Default: SP. KEEP_INTCOS (OPTKING); OPTKING — Keep internal coordinate definition file. Type: boolean; Default: false. KEEP_J (TRANSQT); TRANSQT — Do keep half-transformed integrals?. Type: boolean; Default: false. KEEP_OEIFILE (CCSORT); CCSORT — Do retain the input one-electron integrals?. Type: boolean; Default: false. KEEP_PRESORT (TRANSQT); TRANSQT — Do keep presort file?. Type: boolean; Default: false. KEEP_TEIFILE (CCSORT); CCSORT — Do retain the input two-electron integrals?. Type: boolean; Default: false. LAG_IN_FILE (TRANSQT); TRANSQT — MO-basis MO-lagrangian file. Type: integer; Default: PSIF_MO_LAG. LAGRAN_DOUBLE (TRANSQT); TRANSQT — Do multiply the MO-lagrangian by 2.0?. Type: boolean; Default: false. LAGRAN_HALVE (TRANSQT); TRANSQT — Do divide the MO-lagrangian by 2.0?. Type: boolean; Default: false. LAMBDA_MAXITER (DCFT); DCFT — Maximum number of density cumulant update micro-iterations per macro-iteration (for ALOGRITHM = TWOSTEP). Same keyword controls the maximum number of density cumulant response micro-iterations per macro-iteration for the solution of the response equations (for RESPONSE_ALOGRITHM = TWOSTEP). Type: integer; Default: 50. LEVEL_SHIFT (MCSCF); MCSCF — Level shift to aid convergence. Type: double; Default: 0.0. LEVEL_SHIFT (OCC); OCC — Level shift to aid convergence. Type: double; Default: 0.02. LINEAR (CCRESPONSE); CCRESPONSE — Do Bartlett size-extensive linear model?. Type: boolean; Default: false. LINEQ_SOLVER (OCC); OCC — The solver will be used for simultaneous linear equations. Type: string; Possible Values: CDGESV, FLIN, POPLE; Default: CDGESV. LINESEARCH_STATIC_MAX (OPTKING); OPTKING — If doing a static line search, this fixes the largest step, whose largest change in an internal coordinate is set to this value (in au). Type: double; Default: 0.100. LINESEARCH_STATIC_MIN (OPTKING); OPTKING — If doing a static line searc",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/autodoc_glossary_options_c-1.html:63166,update,update,63166,psi4manual/4.0b5/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodoc_glossary_options_c-1.html,2,['update'],['update']
Deployability,"pe: string; Possible Values: TREUTLER, BECKE, NAIVE, STRATMANN; Default: TREUTLER. DFT_OMEGA¶. The DFT Range-separation parameter. Type: double; Default: 0.0. DFT_OMEGA_C¶. The DFT Correlation Range-separation parameter. Type: double; Default: 0.0. DFT_RADIAL_POINTS¶. Number of radial points. Type: integer; Default: 75. DFT_RADIAL_SCHEME¶. Radial Scheme. Type: string; Possible Values: TREUTLER, BECKE, MULTIEXP, EM, MURA; Default: TREUTLER. DFT_SPHERICAL_POINTS¶. Number of spherical points (A Lebedev Points number). Type: integer; Default: 302. DFT_SPHERICAL_SCHEME¶. Spherical Scheme. Type: string; Possible Values: LEBEDEV; Default: LEBEDEV. DFT_V2_RHO_CUTOFF¶. Minima rho cutoff for the second derivative. Type: double; Default: 1.e-6. DFT_VV10_B¶. Define VV10 parameter b. Type: double; Default: 0.0. DFT_VV10_C¶. Define VV10 parameter C. Type: double; Default: 0.0. DFT_VV10_POSTSCF¶. post-scf VV10 correction. Type: boolean; Default: false. DFT_VV10_RADIAL_POINTS¶. Number of radial points for VV10 NL integration. Type: integer; Default: 50. DFT_VV10_SPHERICAL_POINTS¶. Number of spherical points (A Lebedev Points number) for VV10 NL integration. Type: integer; Default: 146. LOCAL_CONVERGENCE¶. The convergence on the orbital localization procedure. Type: conv double; Default: 1e-12. LOCAL_MAXITER¶. The maxiter on the orbital localization procedure. Type: integer; Default: 200. NL_DISPERSION_PARAMETERS¶. Parameters defining the -NL/-V dispersion correction. First b, then C. Type: array; Default: No Default. SAVE_UHF_NOS¶. Save the UHF NOs. Type: boolean; Default: false. UHF_NOONS¶. The number of NOONs to print in a UHF calc. Type: string; Default: 3. Expert General Wavefunction Info¶. PK_ALGO¶. Select the PK algorithm to use. For debug purposes, selection will be automated later. Type: string; Possible Values: REORDER, YOSHIMINE; Default: REORDER. PK_ALL_NONSYM¶. All densities are considered non symmetric, debug only. Type: boolean; Default: false. PK_MAX_BUCKETS¶. Maximum",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/autodir_options_c/module__scf-1.html:12052,integrat,integration,12052,psi4manual/1.3.2/autodir_options_c/module__scf-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/autodir_options_c/module__scf-1.html,4,['integrat'],['integration']
Deployability,"pe[0],; do_shift=do_shift,; do_rotate=do_rotate,; deflection=deflection,; do_resort=do_resort,; do_mirror=do_mirror); cgeom, cmass, celem, celez, cuniq = perturbation.align_system(rgeom, rmass, relem, relez, runiq, reverse=True); cmol = Molecule.from_arrays(; geom=cgeom,; mass=cmass,; elem=celem,; elez=celez,; units='Bohr',; molecular_charge=ref_mol.molecular_charge(),; molecular_multiplicity=ref_mol.multiplicity(),; fix_com=True,; fix_orientation=True). rmsd = np.linalg.norm(cgeom - rgeom) * qcel.constants.bohr2angstroms / np.sqrt(nat); if verbose >= 1:; print('Start RMSD = {:8.4f} [A]'.format(rmsd)). rmsd, solution, amol = cmol.B787(; ref_mol,; do_plot=do_plot,; atoms_map=(not do_resort),; run_resorting=run_resorting,; mols_align=True,; run_to_completion=run_to_completion,; run_mirror=do_mirror,; verbose=verbose). compare_integers(; True, np.allclose(solution.shift, perturbation.shift, atol=6), 'shifts equiv', verbose=verbose - 1); if not do_resort:; compare_integers(; True,; np.allclose(solution.rotation.T, perturbation.rotation),; 'rotations transpose',; verbose=verbose - 1); if solution.mirror:; compare_integers(True, do_mirror, 'mirror allowed', verbose=verbose - 1). def set_fragment_pattern(self, frl, frt, frc, frm):; """"""Set fragment member data through public method analogous to psi4.core.Molecule"""""". if not (len(frl) == len(frt) == len(frc) == len(frm)):; raise ValidationError(""""""Molecule::set_fragment_pattern: fragment arguments not of same length.""""""). self.fragments = frl; self.fragment_types = frt; self.fragment_charges = frc; self.fragment_multiplicities = frm. # Attach methods to qcdb.Molecule class; from .parker import xyz2mol as _parker_xyz2mol_yo; Molecule.format_molecule_for_mol = _parker_xyz2mol_yo. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .  · ; 1.4;  · . PSI4. Module code; psi4.driver.qcdb.molecule. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/qcdb/molecule.html:64836,update,updated,64836,psi4manual/1.4.0/_modules/psi4/driver/qcdb/molecule.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/qcdb/molecule.html,1,['update'],['updated']
Deployability,"pe[0],; do_shift=do_shift,; do_rotate=do_rotate,; deflection=deflection,; do_resort=do_resort,; do_mirror=do_mirror); cgeom, cmass, celem, celez, cuniq = perturbation.align_system(rgeom, rmass, relem, relez, runiq, reverse=True); cmol = Molecule.from_arrays(; geom=cgeom,; mass=cmass,; elem=celem,; elez=celez,; units='Bohr',; molecular_charge=ref_mol.molecular_charge(),; molecular_multiplicity=ref_mol.multiplicity(),; fix_com=True,; fix_orientation=True). rmsd = np.linalg.norm(cgeom - rgeom) * qcel.constants.bohr2angstroms / np.sqrt(nat); if verbose >= 1:; print('Start RMSD = {:8.4f} [A]'.format(rmsd)). rmsd, solution, amol = cmol.B787(; ref_mol,; do_plot=do_plot,; atoms_map=(not do_resort),; run_resorting=run_resorting,; mols_align=True,; run_to_completion=run_to_completion,; run_mirror=do_mirror,; verbose=verbose). compare_integers(; True, np.allclose(solution.shift, perturbation.shift, atol=6), 'shifts equiv', verbose=verbose - 1); if not do_resort:; compare_integers(; True,; np.allclose(solution.rotation.T, perturbation.rotation),; 'rotations transpose',; verbose=verbose - 1); if solution.mirror:; compare_integers(True, do_mirror, 'mirror allowed', verbose=verbose - 1). def set_fragment_pattern(self, frl, frt, frc, frm):; """"""Set fragment member data through public method analogous to psi4.core.Molecule"""""". if not (len(frl) == len(frt) == len(frc) == len(frm)):; raise ValidationError(""""""Molecule::set_fragment_pattern: fragment arguments not of same length.""""""). self.fragments = frl; self.fragment_types = frt; self.fragment_charges = frc; self.fragment_multiplicities = frm. # Attach methods to qcdb.Molecule class; from .parker import xyz2mol as _parker_xyz2mol_yo; Molecule.format_molecule_for_mol = _parker_xyz2mol_yo. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .  · ; 1.5;  · . PSI4. Module code; psi4.driver.qcdb.molecule. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/_modules/psi4/driver/qcdb/molecule.html:67684,update,updated,67684,psi4manual/1.5.0/_modules/psi4/driver/qcdb/molecule.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/_modules/psi4/driver/qcdb/molecule.html,1,['update'],['updated']
Deployability,"pecified equilibrium values, this is the force constant (in au) used to apply an additional force to each coordinate. If the user is only concerned to satify the desired constraint, then the user need only ensure that this value is sufficiently large. Alternatively, the user may specify this value to apply a force of a particular magnitude, in which case the given equilibrium value may or may not be reached by the optimization. Type: double; Default: 2.0. KEEP_INTCOS¶. Keep internal coordinate definition file. Type: boolean; Default: false. TEST_B¶. Do test B matrix?. Type: boolean; Default: false. TEST_DERIVATIVE_B¶. Do test derivative B matrix?. Type: boolean; Default: false. Table Of Contents. OPTKING; Optimization Algorithm; CONSECUTIVE_BACKSTEPS; GEOM_MAXITER; INTERFRAG_STEP_LIMIT; INTRAFRAG_STEP_LIMIT; INTRAFRAG_STEP_LIMIT_MAX; INTRAFRAG_STEP_LIMIT_MIN; IRC_DIRECTION; IRC_STEP_SIZE; IRC_STOP; OPT_TYPE; RFO_FOLLOW_ROOT; RFO_ROOT; STEP_TYPE. Convergence Control; FLEXIBLE_G_CONVERGENCE; G_CONVERGENCE; MAX_DISP_G_CONVERGENCE; MAX_ENERGY_G_CONVERGENCE; MAX_FORCE_G_CONVERGENCE; RMS_DISP_G_CONVERGENCE; RMS_FORCE_G_CONVERGENCE. Hessian Update; CART_HESS_READ; FULL_HESS_EVERY; HESS_UPDATE; HESS_UPDATE_LIMIT; HESS_UPDATE_LIMIT_MAX; HESS_UPDATE_LIMIT_SCALE; HESS_UPDATE_USE_LAST; INTRAFRAG_HESS. Fragment/Internal Coordinate Control; ADD_AUXILIARY_BONDS; COVALENT_CONNECT; FRAG_MODE; FREEZE_INTERFRAG; FREEZE_INTRAFRAG; H_BOND_CONNECT; INTCOS_GENERATE_EXIT; INTERFRAG_DIST_INV; INTERFRAG_HESS; INTERFRAG_MODE. Misc.; FINAL_GEOM_WRITE; INTCO_FIXED_EQ_FORCE_CONSTANT; KEEP_INTCOS; TEST_B; TEST_DERIVATIVE_B. Previous topic; TPDM_ABCD_TYPE; Next topic; ADD_AUXILIARY_BONDS; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Appendices »; Keywords by Module ». © Copyright 2012, The Psi4 Project.; Last updated on Oct 16, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/autodir_options_c/module__optking-1.html:8262,update,updated,8262,psi4manual/4.0b3/autodir_options_c/module__optking-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodir_options_c/module__optking-1.html,2,['update'],['updated']
Deployability,"pecifies the orbital occupancy of the reference function in terms of the occupation numbers of the orbitals and their irreducible representations. The occupancy is specified by either NIRREP or 2*NIRREP integers specifying the number of occupied orbitals of each symmetry type, where NIRREP is the number of irreducible representations in the computational point group. If there are no orbitals of a particular symmetry type a zero must be entered. If the reference function is for an open-shell system, two strings of NIRREP occupation numbers separated by a slash are input for the \(\alpha\) and \(\beta\) sets of orbitals. An example of the use of the OCCUPATION keyword for the water molecule would be OCCUPATION=3-1-1-0. For the \(^2A_1\) water cation, an open-shell system, the keyword would be specified by OCCUPATION=3-1-1-0/2-1-1-0. It should be noted that the xvmol integral program orders the irreducible representations in a strange way, which most users do not perceive to be a logical order. Hence, it is usually advisable initially to run just a single point integral and HF-SCF calculation in order to determine the number and ordering of the irreducible representations. The occupation keyword may be omitted, in which case an initial orbital occupancy is determined by diagonalization of the core Hamiltonian. In many cases, HF-SCF calculations run with the core Hamiltonian guess will usually converge to the lowest energy HF-SCF solution, but this should not be blindly assumed. (Default: The occupation is given by the core Hamiltonian initial guess). Psi4 Interface: The arrays above are specified in PSI as (white space tolerant) [3,1,1,0] and [[3,1,1,0],[3,0,1,0]]. Type: array; Default: No Default. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.6;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_OCCUPATION. © Copyright 2022, The Psi4 Project.; Last updated on Thursday, 19 May 2022 08:57PM.; Created using Sphinx 4.5.0.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/autodir_options_c/cfour__cfour_occupation.html:2092,update,updated,2092,psi4manual/1.6.x/autodir_options_c/cfour__cfour_occupation.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/autodir_options_c/cfour__cfour_occupation.html,1,['update'],['updated']
Deployability,"ped dependencies in main psi4/CMakeLists.txt and docs; psi4/doc/sphinxman/source/build_planning.rst . Assemble postrelease changes¶. Collect PRs with “backport” label, and request other backport suggestions through slack.; Be on the maintenance branch (e.g., 1.8.x). git fetch upstream or any other remotes you’re; going to be cherry-picking from.; Cherry-pick backport PRs and commits (git cherry-pick sha), apply other changes manually, not; forgetting CI files or samples.; Possibly apply other changes manually, including:. CI file tweaks like LLVM version or dependency constraint.; samples files from a docs build.; psi4/doc/sphinxman/source/introduction.rst for any compiler and Python minimum requirements to edit. Tag it (Tag postrelease for details). This is needed to compute a version on a maintenance; branch to even run. Until the release is published on GH (final step of; Publish GitHub postrelease), it’s ok to revise a tag (force push to maintenance branch). Add or increment patch number in psi4/metadata.py; leave the “z”s. Commit file.; Tag with git tag -a v1.8.2 -m ""v1.8.2"", then push git push --atomic upstream 1.8.x v1.8.2. Test core PSI4 thoroughly locally (ecosystem will get tested by c-f) by running; pytest ../tests/ -n auto (psithon and psiapi tests). Possibly you may have to step back for; dependency versions from what master needs.; Start Tweak Conda for postrelease PR at conda-forge. This will thoroughly test the ecosystem.; If more changes are needed, git tag -d v1.8.2 to delete the tag, then make more commits,; retag, push, and repeat. Try to finalize the postrelease tag within a session or a day, so; tentative tags don’t linger.; Start the draft parts of Publish GitHub postrelease from the backported PRs assembled here. Tweak Conda for postrelease¶. Start a PR to https://github.com/conda-forge/psi4-feedstock . Always store the PR branch on your; fork, never on the conda-forge feedstock (or your branch itself will get publically packaged).; https://g",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/manage_release.html:6385,patch,patch,6385,psi4manual/1.9.x/manage_release.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/manage_release.html,2,['patch'],['patch']
Deployability,"pen(derivfile, 'r'); dashdderiv = []; for line in geom.splitlines():; lline = line.split(); if len(lline) != 4:; continue; if lline[0] == 'Gh':; dashdderiv.append([0.0, 0.0, 0.0]); else:; dashdderiv.append([float(x.replace('D', 'E')) for x in dfile.readline().split()]); dfile.close(). if len(dashdderiv) != self.natom():; raise ValidationError('Program gcp gradient file has %d atoms- %d expected.' % \; (len(dashdderiv), self.natom())). # Prepare results for Psi4; if isP4regime and dertype != 0:; core.set_variable('GCP CORRECTION ENERGY', dashd); psi_dashdderiv = core.Matrix.from_list(dashdderiv). # Print program output to file if verbose; if not verbose and isP4regime:; verbose = True if core.get_option('SCF', 'PRINT') >= 3 else False; if verbose:. text = '\n ==> GCP Output <==\n'; text += out.decode('utf-8'); if dertype != 0:; with open(derivfile, 'r') as handle:; text += handle.read().replace('D', 'E'); text += '\n'; if isP4regime:; core.print_out(text); else:; print(text). # # Clean up files and remove scratch directory; # os.unlink(paramfile1); # os.unlink(paramfile2); # os.unlink(geomfile); # if dertype != 0:; # os.unlink(derivfile); # if defmoved is True:; # os.rename(defaultfile + '_hide', defaultfile). os.chdir('..'); # try:; # shutil.rmtree(dftd3_tmpdir); # except OSError as e:; # ValidationError('Unable to remove dftd3 temporary directory %s' % e); os.chdir(current_directory). # return -D & d(-D)/dx; if dertype == -1:; return dashd, dashdderiv; elif dertype == 0:; return dashd; elif dertype == 1:; return psi_dashdderiv. try:; # Attach method to libmints psi4.Molecule class; core.Molecule.run_gcp = run_gcp; except (NameError, AttributeError):; # But don't worry if that doesn't work b/c; # it'll get attached to qcdb.Molecule class; pass. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .  · ; 1.2.1;  · . PSI4. Module code. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 July 2018 04:21AM.; Created using Sphinx 1.7.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/_modules/qcdb/interface_gcp.html:10805,update,updated,10805,psi4manual/1.2.1/_modules/qcdb/interface_gcp.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/_modules/qcdb/interface_gcp.html,1,['update'],['updated']
Deployability,"pendices; Keywords by Module; DFMP2. DFMP2¶; Performs density-fitted MP2 computations for RHF/UHF/ROHF reference wavefunctions. General¶. BASIS¶. Primary basis set. Type: string; Possible Values: basis string; Default: NONE. DFMP2_MEM_FACTOR¶. % of memory for DF-MP2 three-index buffers. Type: double; Default: 0.9. DFMP2_P2_TOLERANCE¶. Minimum error in the 2-norm of the P(2) matrix for corrections to Lia and P. Type: conv double; Default: 0.0. DFMP2_P_TOLERANCE¶. Minimum error in the 2-norm of the P matrix for skeleton-core Fock matrix derivatives. Type: conv double; Default: 0.0. DF_BASIS_MP2¶. Auxiliary basis set for MP2 density fitting computations. Defaults to a RI basis. Type: string; Possible Values: basis string; Default: No Default. DF_INTS_NUM_THREADS¶. Number of threads to compute integrals with. 0 is wild card. Type: integer; Default: 0. INTS_TOLERANCE¶. Schwarz screening threshold. Mininum absolute value below which TEI are neglected. Type: conv double; Default: 0.0. MP2_OS_SCALE¶. OS Scale. Type: double; Default: 6.0. MP2_SS_SCALE¶. SS Scale. Type: double; Default: 1.0. ONEPDM¶. Do compute one-particle density matrix?. Type: boolean; Default: false. OPDM_RELAX¶. Do relax the one-particle density matrix?. Type: boolean; Default: true. Expert¶. DF_INTS_IO¶. IO caching for CP corrections, etc. Type: string; Possible Values: NONE, SAVE, LOAD; Default: NONE. MADMP2_SLEEP¶. A helpful option, used only in debugging the MADNESS version. Type: integer; Default: 0. table of contents. DFMP2; General; BASIS; DFMP2_MEM_FACTOR; DFMP2_P2_TOLERANCE; DFMP2_P_TOLERANCE; DF_BASIS_MP2; DF_INTS_NUM_THREADS; INTS_TOLERANCE; MP2_OS_SCALE; MP2_SS_SCALE; ONEPDM; OPDM_RELAX. Expert; DF_INTS_IO; MADMP2_SLEEP. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Keywords by Module; DFMP2. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/autodir_options_c/module__dfmp2.html:2010,update,updated,2010,psi4manual/master/autodir_options_c/module__dfmp2.html,https://psicode.org,https://psicode.org/psi4manual/master/autodir_options_c/module__dfmp2.html,1,['update'],['updated']
Deployability,"perFunctional, arg2: str) → psi4.core.VBase. compute_V(self: psi4.core.VBase, arg0: List[psi4.core.Matrix]) → None; doctsring. compute_Vx(self: psi4.core.VBase, arg0: List[psi4.core.Matrix], arg1: List[psi4.core.Matrix]) → None; doctsring. compute_gradient(self: psi4.core.VBase) → psi4.core.Matrix; Compute the DFT nuclear gradient contribution. compute_hessain(self: psi4.core.VBase) → psi4.core.Matrix; Compute the DFT nuclear Hessian contribution. finalize(*args, **kwargs); Overloaded function. finalize(self: psi4.core.VBase) -> None. doctsring. finalize(self: psi4.core.VBase) -> None. Finalizes the V object. functional(self: psi4.core.VBase) → psi4.core.SuperFunctional; Returns the interal superfunctional. get_block(self: psi4.core.VBase, arg0: int) → psi::BlockOPoints; Returns the requested BlockOPoints. get_np_xyzw(); Returns the x, y, z, and weights of a grid as a tuple of NumPy array objects. grid(self: psi4.core.VBase) → psi::DFTGrid; Returns the grid object. initialize(*args, **kwargs); Overloaded function. initialize(self: psi4.core.VBase) -> None. doctsring. initialize(self: psi4.core.VBase) -> None. Initializes the V object. nblocks(self: psi4.core.VBase) → int; Total number of blocks. print_header(self: psi4.core.VBase) → None; Prints the objects header. properties(self: psi4.core.VBase) → List[psi::PointFunctions]; Returns the properties computer. quadrature_values(self: psi4.core.VBase) → Dict[str, float]; Returns the quadrature values. set_D(self: psi4.core.VBase, arg0: List[psi4.core.Matrix]) → None; Sets the internal density. set_debug(self: psi4.core.VBase, arg0: int) → None; Sets the debug level of the object. set_print(self: psi4.core.VBase, arg0: int) → None; Sets the print level of the object. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 July 2018 04:21AM.; Created using Sphinx 1.7.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/api/psi4.core.vbase.html:5411,update,updated,5411,psi4manual/1.2.1/api/psi4.core.vbase.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/api/psi4.core.vbase.html,1,['update'],['updated']
Deployability,"persion corrected); Y; —; —; 0.720000; —; 1.000000; 0.360000 / 0.510000; —; —. DSD-PBEP86-D3BJ; DSD-PBEP86-D3BJ Dispersion-corrected SCS Double Hybrid XC Functional; Y; —; —; 0.690000; —; 1.000000; 0.220000 / 0.520000; Y. DSD-PBEP86-NL; DSD-PBEP86-NL (D3BJ parameters) VV10 SCS Double Hybrid XC Functional; Y; —; —; 0.690000; —; 1.000000; 0.220000 / 0.520000; —; —. DSD-PBEPBE; DSD-PBEPBE SCS Double Hybrid XC Functional (not dispersion corrected); Y; —; —; 0.720000; —; 1.000000; 0.310000 / 0.540000; —; —. DSD-PBEPBE-D3BJ; DSD-PBEPBE-D3BJ Dispersion-corrected SCS Double Hybrid XC Functional; Y; —; —; 0.680000; —; 1.000000; 0.130000 / 0.550000; Y. DSD-PBEPBE-NL; DSD-PBEPBE-NL (D3BJ parameters) VV10 SCS Double Hybrid XC Functional; Y; —; —; 0.680000; —; 1.000000; 0.130000 / 0.550000; —; —. MP2D. —; —; —; 1.000000; —; 1.000000; —; —; —. MP2MP2. —; —; —; 1.000000; —; 1.000000; —; —; —. PBE0-2; PBE0-2 Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.793701; —; 0.500000; —; —; —. PBE0-DH; PBE0-DH Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.500000; —; 0.125000; —; Y. PBE0-DH-D3BJ; PBE0-DH Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.500000; —; 0.125000; —; Y. PTPSS; PTPSS SOS Double Hybrid XC Functional; Y; Y; —; 0.500000; —; 1.000000; 0.000000 / 0.375000; —; —. PTPSS-D3BJ; PTPSS SOS Double Hybrid XC Functional; Y; Y; —; 0.500000; —; 1.000000; 0.000000 / 0.375000; Y. PWPB95; PWPB95 SOS Double Hybrid XC Functional; Y; Y; —; 0.500000; —; 1.000000; 0.000000 / 0.269000; —; —. PWPB95-D3BJ; PWPB95 SOS Double Hybrid XC Functional; Y; Y; —; 0.500000; —; 1.000000; 0.000000 / 0.269000; Y. PWPB95-NL; PWPB95 SOS Double Hybrid XC Functional; Y; Y; —; 0.500000; —; 1.000000; 0.000000 / 0.269000; —; —. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.6;  · . PSI4. Appendices; DFT Functionals; <no title>. © Copyright 2022, The Psi4 Project.; Last updated on Thursday, 19 May 2022 08:57PM.; Created using Sphinx 4.5.0.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/autodoc_dft_dhybrid.html:4171,update,updated,4171,psi4manual/1.6.x/autodoc_dft_dhybrid.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/autodoc_dft_dhybrid.html,1,['update'],['updated']
Deployability,"persion, arg0: str) → None¶; docstring. sr6(self: psi4.core.Dispersion) → float¶; docstring. a1(self: psi4.core.Dispersion) → float; docstring. a2(self: psi4.core.Dispersion) → float; docstring. bibtex(self: psi4.core.Dispersion) → str; Get the BibTeX key for the literature reference. build(type: str, s6: float=0.0, alpha6: float=0.0, sr6: float=0.0) → psi4.core.Dispersion; Initialize instance capable of computing a dispersion correction of type. citation(self: psi4.core.Dispersion) → str; docstring. compute_energy(self: psi4.core.Dispersion, arg0: psi4.core.Molecule) → float; docstring. compute_gradient(self: psi4.core.Dispersion, arg0: psi4.core.Molecule) → psi4.core.Matrix; docstring. compute_hessian(self: psi4.core.Dispersion, arg0: psi4.core.Molecule) → psi4.core.Matrix; docstring. d(self: psi4.core.Dispersion) → float; docstring. description(self: psi4.core.Dispersion) → str; docstring. name(self: psi4.core.Dispersion) → str; docstring. print_energy(self: psi4.core.Dispersion, arg0: psi4.core.Molecule) → str; docstring. print_gradient(self: psi4.core.Dispersion, arg0: psi4.core.Molecule) → str; docstring. print_hessian(self: psi4.core.Dispersion, arg0: psi4.core.Molecule) → str; docstring. print_out(self: psi4.core.Dispersion) → None; docstring. s6(self: psi4.core.Dispersion) → float; docstring. s8(self: psi4.core.Dispersion) → float; docstring. set_bibtex(self: psi4.core.Dispersion, arg0: str) → None; Set the BibTeX key for the literature reference. set_citation(self: psi4.core.Dispersion, arg0: str) → None; docstring. set_description(self: psi4.core.Dispersion, arg0: str) → None; docstring. set_name(self: psi4.core.Dispersion, arg0: str) → None; docstring. sr6(self: psi4.core.Dispersion) → float; docstring. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/api/psi4.core.dispersion.html:4578,update,updated,4578,psi4manual/1.3.2/api/psi4.core.dispersion.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.dispersion.html,1,['update'],['updated']
Deployability,"pert SAPT(DFT)¶. SAPT_DFT_DO_HYBRID¶. Enables the hybrid xc kernel in dispersion?. Type: boolean; Default: true. SAPT_DFT_EXCH_DISP_FIXED_SCALE¶. Exch-disp scaling factor for FIXED scheme for SAPT_DFT_EXCH_DISP_SCALE_SCHEME Default value of 0.770 suggested in Y. Xie, D. G. A. Smith and C. D. Sherrill, 2022 (submitted). Previous to Nov 2022, default value was 0.686 suggested by Hesselmann and Korona, J. Chem. Phys. 141, 094107 (2014). Type: double; Default: 0.770. SAPT_DFT_FUNCTIONAL¶. Underlying funcitonal to use for SAPT(DFT). Type: string; Default: PBE0. SAPT_DFT_GRAC_DETERMINATION¶. How is the GRAC correction determined?. Type: string; Possible Values: INPUT; Default: INPUT. SAPT_DFT_MP2_DISP_ALG¶. Which MP2 Exch-Disp module to use?. Type: string; Possible Values: FISAPT, SAPT; Default: SAPT. SAPT_FDDS_DISP_LEG_LAMBDA¶. Lambda shift in the space morphing for the FDDS Dispersion time integration. Type: double; Default: 0.3. SAPT_FDDS_DISP_NUM_POINTS¶. Number of points in the Legendre FDDS Dispersion time integration. Type: integer; Default: 10. SAPT_FDDS_V2_RHO_CUTOFF¶. Minimum rho cutoff for the in the LDA response for FDDS. Type: double; Default: 1.e-6. SAPT_QUIET¶. Interior option to clean up printing. Type: boolean; Default: false. table of contents. SAPT; SAPT(HF); AIO_CPHF; AIO_DF_INTS; BASIS; CCD_E_CONVERGENCE; CCD_MAXITER; CCD_T_CONVERGENCE; CPHF_R_CONVERGENCE; DENOMINATOR_ALGORITHM; DENOMINATOR_DELTA; DF_BASIS_ELST; DF_BASIS_SAPT; EXCH_SCALE_ALPHA; FREEZE_CORE; INTS_TOLERANCE; MAXITER; MAX_CCD_DIISVECS; MIN_CCD_DIISVECS; NAT_ORBS_T2; NAT_ORBS_T3; NAT_ORBS_V4; OCC_TOLERANCE; PRINT; SAPT_LEVEL; SAPT_MEM_CHECK; SAPT_MEM_SAFETY. SAPT(DFT); SAPT_DFT_DO_DHF; SAPT_DFT_EXCH_DISP_SCALE_SCHEME; SAPT_DFT_GRAC_SHIFT_A; SAPT_DFT_GRAC_SHIFT_B. Expert SAPT(HF); COUPLED_INDUCTION; DO_CCD_DISP; DO_DISP_EXCH_SINF; DO_IND30_EXCH_SINF; DO_IND_EXCH_SINF; DO_MBPT_DISP; DO_THIRD_ORDER; SAPT0_E10; SAPT0_E20DISP; SAPT0_E20IND; SAPT_MEM_FACTOR. Expert SAPT(DFT); SAPT_DFT_DO_HYBRID;",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/autodir_options_c/module__sapt.html:8403,integrat,integration,8403,psi4manual/master/autodir_options_c/module__sapt.html,https://psicode.org,https://psicode.org/psi4manual/master/autodir_options_c/module__sapt.html,1,['integrat'],['integration']
Deployability,"pert SAPT(DFT)¶. SAPT_DFT_DO_HYBRID¶. Enables the hybrid xc kernel in dispersion?. Type: boolean; Default: true. SAPT_DFT_EXCH_DISP_FIXED_SCALE¶. Exch-disp scaling factor for FIXED scheme for SAPT_DFT_EXCH_DISP_SCALE_SCHEME Default value of 0.770 suggested in Y. Xie, D. G. A. Smith and C. D. Sherrill, 2022 (submitted). Previous to Nov 2022, default value was 0.686 suggested by Hesselmann and Korona, J. Chem. Phys. 141, 094107 (2014). Type: double; Default: 0.770. SAPT_DFT_FUNCTIONAL¶. Underlying funcitonal to use for SAPT(DFT). Type: string; Default: PBE0. SAPT_DFT_GRAC_DETERMINATION¶. How is the GRAC correction determined?. Type: string; Possible Values: INPUT; Default: INPUT. SAPT_DFT_MP2_DISP_ALG¶. Which MP2 Exch-Disp module to use?. Type: string; Possible Values: FISAPT, SAPT; Default: SAPT. SAPT_FDDS_DISP_LEG_LAMBDA¶. Lambda shift in the space morphing for the FDDS Dispersion time integration. Type: double; Default: 0.3. SAPT_FDDS_DISP_NUM_POINTS¶. Number of points in the Legendre FDDS Dispersion time integration. Type: integer; Default: 10. SAPT_FDDS_V2_RHO_CUTOFF¶. Minimum rho cutoff for the in the LDA response for FDDS. Type: double; Default: 1.e-6. SAPT_QUIET¶. Interior option to clean up printing. Type: boolean; Default: false. table of contents. SAPT; SAPT(HF); AIO_CPHF; AIO_DF_INTS; BASIS; CCD_E_CONVERGENCE; CCD_MAXITER; CCD_T_CONVERGENCE; DENOMINATOR_ALGORITHM; DENOMINATOR_DELTA; DF_BASIS_ELST; DF_BASIS_SAPT; D_CONVERGENCE; EXCH_SCALE_ALPHA; E_CONVERGENCE; FREEZE_CORE; INTS_TOLERANCE; MAXITER; MAX_CCD_DIISVECS; MIN_CCD_DIISVECS; NAT_ORBS_T2; NAT_ORBS_T3; NAT_ORBS_V4; OCC_TOLERANCE; PRINT; SAPT_LEVEL; SAPT_MEM_CHECK; SAPT_MEM_SAFETY. SAPT(DFT); SAPT_DFT_DO_DHF; SAPT_DFT_EXCH_DISP_SCALE_SCHEME; SAPT_DFT_GRAC_SHIFT_A; SAPT_DFT_GRAC_SHIFT_B. Expert SAPT(HF); COUPLED_INDUCTION; DO_CCD_DISP; DO_DISP_EXCH_SINF; DO_IND30_EXCH_SINF; DO_IND_EXCH_SINF; DO_MBPT_DISP; DO_THIRD_ORDER; SAPT0_E10; SAPT0_E20DISP; SAPT0_E20IND; SAPT_MEM_FACTOR. Expert SAPT(DFT); SAPT_DFT_",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/autodir_options_c/module__sapt.html:8431,integrat,integration,8431,psi4manual/1.7.x/autodir_options_c/module__sapt.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/module__sapt.html,3,['integrat'],['integration']
Deployability,"perty() function, e.g.:; property('ccsd', properties=['dipole']). The property() function provides limited functionality, but is a lot easier to; use for correlated methods. For capabilities of property() see the; corresponding section of the manual. Basic Keywords¶; Multipole moments may be computed at any origin, which is controlled by the; global PROPERTIES_ORIGIN keyword. The keyword takes an array with; the following possible values:. Allowed origin specifications¶. Keyword; Interpretation. [x, y, z]; Origin is at the coordinates, in the same units as the geometry specification. [“COM”]; Origin is at the center of mass. [“NUCLEAR_CHARGE”]; Origin is at the center of nuclear charge. Properties evaluated on a grid¶; Certain properties may be evaluated a user-specified grid points. The grid; points are completely arbitrary and are specified by providing a file called; grid.dat containing the x,y,z values seperated with spaces for each point in order:; x1 y1 z1; x2 y2 z2; ..........; xn yn zn. The grid.dat file is completely free form; any number of spaces and/or newlines; between entries is permitted. The units of the coordinates in grid.dat are the; same as those used to specify the molecule’s geometry, and the output; quantities are always in atomic units. The requested properties will be; written out in the same order as the grid point specification in grid.dat; see; the above table for the format and file name of the output. Table Of Contents. oeprop() Evaluation of One-Electron Properties; Basic Keywords; Properties evaluated on a grid. Previous topic; Geometry Optimization; Next topic; Vibrational and Thermochemical Analysis. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Theoretical Methods: SCF to FCI ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/oeprop-1.html:5010,update,updated,5010,psi4manual/1.0.0/oeprop-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/oeprop-1.html,2,['update'],['updated']
Deployability,"pes. Type: string; Possible Values: DIRECT, DF, PK, OUT_OF_CORE, PS; Default: PK. S_ORTHOGONALIZATION¶. SO orthogonalization: symmetric or canonical?. Type: string; Possible Values: SYMMETRIC, CANONICAL; Default: SYMMETRIC. S_TOLERANCE¶. Minimum S matrix eigenvalue to be used before compensating for linear dependencies. Type: conv double; Default: 1e-7. Convergence Control/Stabilization¶. BASIS_GUESS¶. Accelerate convergence by performing a preliminary scf with this small basis set followed by projection into the full target basis. A value of TRUE turns on projection using the 3-21G small basis set. Type: string; Default: FALSE. DAMPING_CONVERGENCE¶. The density convergence threshold after which damping is no longer performed, if it is enabled. It is recommended to leave damping on until convergence, which is the default. Type: conv double; Default: 1.0e-18. DAMPING_PERCENTAGE¶. The amount (percentage) of damping to apply to the early density updates. 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the previous iteration’s density being mixed into the current density) could help to solve problems with oscillatory convergence. Type: double; Default: 100.0. DF_BASIS_GUESS¶. When BASIS_GUESS is active, run the preliminary scf in density-fitted mode with this as fitting basis for the small basis set. A value of TRUE turns on density fitting with the cc-pVDZ-RI basis set (when available for all elements). Type: string; Possible Values: basis string; Default: FALSE. DIIS¶. Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. DIIS_MAX_VECS¶. Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 10. DIIS_MIN_VECS¶. Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_START¶. The minimum iteration to start storing DIIS vectors. Type: integer; Default: 1. D_CONVERGENCE¶. Convergence criterion for SCF den",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/autodir_options_c/module__scf-1.html:2550,update,update,2550,psi4manual/4.0b3/autodir_options_c/module__scf-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodir_options_c/module__scf-1.html,4,['update'],['update']
Deployability,"pi / 180.0; cosABC = math.cos(a); sinABC = math.sin(a); B = self.rto.compute(); C = self.ato.compute(). eCB = sub(B, C); eCB = normalize(eCB); eX = [0.0, 0.0, 0.0]; eY = [0.0, 0.0, 0.0]; if (math.fabs(1.0 - math.fabs(eCB[0])) < 1.0E-5):; # CB is collinear with X, start by finding Y; eY[1] = 1.0; eX = perp_unit(eY, eCB); eY = perp_unit(eX, eCB); else:; # CB is not collinear with X, we can safely find X first; eX[0] = 1.0; eY = perp_unit(eX, eCB); eX = perp_unit(eY, eCB); for xyz in range(3):; self.coordinates[xyz] = B[xyz] + r * (eY[xyz] * sinABC - eCB[xyz] * cosABC); if math.fabs(self.coordinates[xyz]) < 1.E-14:; self.coordinates[xyz] = 0.0. # The fourth, or subsequent, atom; #; # The atom specification is; # this rTo rVal aTo aVal dTo dVal; # A B C D; # which allows us to define the vector from C->B (eCB) as the +z axis, and eDC; # lies in the xz plane. Then eX, eY and eZ (=eBC) are the x, y, and z axes, respecively.; else:; r = self.rval.compute(); a = self.aval.compute() * math.pi / 180.0; d = self.dval.compute() * math.pi / 180.0; B = self.rto.compute(); C = self.ato.compute(); D = self.dto.compute(). eDC = sub(C, D); eCB = sub(B, C); eDC = normalize(eDC); eCB = normalize(eCB); cosABC = math.cos(a); sinABC = math.sin(a); cosABCD = math.cos(d); sinABCD = math.sin(d); eY = perp_unit(eDC, eCB); eX = perp_unit(eY, eCB); for xyz in range(3):; self.coordinates[xyz] = B[xyz] + r * (eX[xyz] * sinABC * cosABCD +; eY[xyz] * sinABC * sinABCD - eCB[xyz] * cosABC); if math.fabs(self.coordinates[xyz]) < 1.E-14:; self.coordinates[xyz] = 0.0. self.computed = True; return self.coordinates. [docs] def everything(self):; CoordEntry.everything(self); print '\nZMatrixEntry\n Type = %s\n\n' % (self.type()); print self.print_in_input_format(). Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    ; PSI4 [beta3] » ; Module code ». © Copyright 2012, The Psi4 Project.; Last updated on Apr 05, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/_modules/qcdb/libmintscoordentry.html:15597,update,updated,15597,psi4manual/4.0b3/_modules/qcdb/libmintscoordentry.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/_modules/qcdb/libmintscoordentry.html,1,['update'],['updated']
Deployability,"pi / 180.0; cosABC = math.cos(a); sinABC = math.sin(a); B = self.rto.compute(); C = self.ato.compute(). eCB = sub(B, C); eCB = normalize(eCB); eX = [0.0, 0.0, 0.0]; eY = [0.0, 0.0, 0.0]; if (math.fabs(1.0 - math.fabs(eCB[0])) < 1.0E-5):; # CB is collinear with X, start by finding Y; eY[1] = 1.0; eX = perp_unit(eY, eCB); eY = perp_unit(eX, eCB); else:; # CB is not collinear with X, we can safely find X first; eX[0] = 1.0; eY = perp_unit(eX, eCB); eX = perp_unit(eY, eCB); for xyz in range(3):; self.coordinates[xyz] = B[xyz] + r * (eY[xyz] * sinABC - eCB[xyz] * cosABC); if math.fabs(self.coordinates[xyz]) < 1.E-14:; self.coordinates[xyz] = 0.0. # The fourth, or subsequent, atom; #; # The atom specification is; # this rTo rVal aTo aVal dTo dVal; # A B C D; # which allows us to define the vector from C->B (eCB) as the +z axis, and eDC; # lies in the xz plane. Then eX, eY and eZ (=eBC) are the x, y, and z axes, respecively.; else:; r = self.rval.compute(); a = self.aval.compute() * math.pi / 180.0; d = self.dval.compute() * math.pi / 180.0; B = self.rto.compute(); C = self.ato.compute(); D = self.dto.compute(). eDC = sub(C, D); eCB = sub(B, C); eDC = normalize(eDC); eCB = normalize(eCB); cosABC = math.cos(a); sinABC = math.sin(a); cosABCD = math.cos(d); sinABCD = math.sin(d); eY = perp_unit(eDC, eCB); eX = perp_unit(eY, eCB); for xyz in range(3):; self.coordinates[xyz] = B[xyz] + r * (eX[xyz] * sinABC * cosABCD +; eY[xyz] * sinABC * sinABCD - eCB[xyz] * cosABC); if math.fabs(self.coordinates[xyz]) < 1.E-14:; self.coordinates[xyz] = 0.0. self.computed = True; return self.coordinates. [docs] def everything(self):; CoordEntry.everything(self); print '\nZMatrixEntry\n Type = %s\n\n' % (self.type()); print self.print_in_input_format(). Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». © Copyright 2013, The Psi4 Project.; Last updated on Mar 20, 2014.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintscoordentry.html:15597,update,updated,15597,psi4manual/4.0b4/_modules/qcdb/libmintscoordentry.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintscoordentry.html,1,['update'],['updated']
Deployability,"pi / 180.0; cosABC = math.cos(a); sinABC = math.sin(a); B = self.rto.compute(); C = self.ato.compute(). eCB = sub(B, C); eCB = normalize(eCB); eX = [0.0, 0.0, 0.0]; eY = [0.0, 0.0, 0.0]; if (math.fabs(1.0 - math.fabs(eCB[0])) < 1.0E-5):; # CB is collinear with X, start by finding Y; eY[1] = 1.0; eX = perp_unit(eY, eCB); eY = perp_unit(eX, eCB); else:; # CB is not collinear with X, we can safely find X first; eX[0] = 1.0; eY = perp_unit(eX, eCB); eX = perp_unit(eY, eCB); for xyz in range(3):; self.coordinates[xyz] = B[xyz] + r * (eY[xyz] * sinABC - eCB[xyz] * cosABC); if math.fabs(self.coordinates[xyz]) < 1.E-14:; self.coordinates[xyz] = 0.0. # The fourth, or subsequent, atom; #; # The atom specification is; # this rTo rVal aTo aVal dTo dVal; # A B C D; # which allows us to define the vector from C->B (eCB) as the +z axis, and eDC; # lies in the xz plane. Then eX, eY and eZ (=eBC) are the x, y, and z axes, respecively.; else:; r = self.rval.compute(); a = self.aval.compute() * math.pi / 180.0; d = self.dval.compute() * math.pi / 180.0; B = self.rto.compute(); C = self.ato.compute(); D = self.dto.compute(). eDC = sub(C, D); eCB = sub(B, C); eDC = normalize(eDC); eCB = normalize(eCB); cosABC = math.cos(a); sinABC = math.sin(a); cosABCD = math.cos(d); sinABCD = math.sin(d); eY = perp_unit(eDC, eCB); eX = perp_unit(eY, eCB); for xyz in range(3):; self.coordinates[xyz] = B[xyz] + r * (eX[xyz] * sinABC * cosABCD +; eY[xyz] * sinABC * sinABCD - eCB[xyz] * cosABC); if math.fabs(self.coordinates[xyz]) < 1.E-14:; self.coordinates[xyz] = 0.0. self.computed = True; return self.coordinates. [docs] def everything(self):; CoordEntry.everything(self); print '\nZMatrixEntry\n Type = %s\n\n' % (self.type()); print self.print_in_input_format(). Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    ; PSI4 [beta5] » ; Module code ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/_modules/qcdb/libmintscoordentry.html:16349,update,updated,16349,psi4manual/4.0b5/_modules/qcdb/libmintscoordentry.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/_modules/qcdb/libmintscoordentry.html,1,['update'],['updated']
Deployability,"pied; orbitals by “shape” instead of by orbital eigenvalue, i.e., by choosing the set; of new orbitals which looks most like some previously known “good” set. The; “good” set is typically the occupied orbitals from one of the oscillating; iterations with the lowest total energy. For an oscillating system where the; lowest total energy occurs on iterations \(N,N+2,\ldots\), invoking; MOM_START N can often rescue the convergence of the SCF. MOM can; be used in concert with DIIS, though care should be taken to not turn MOM on; until the oscillatory behavior begins. Damping [Off by Default]In some cases, a static mixing of Fock Matrices from adjacent; iterations can quench oscillations. This mixing, known as; “damping” can be activated by setting the; DAMPING_PERCENTAGE keyword to a nonzero percent. Damping is; turned off when the DIIS error is smaller than; DAMPING_CONVERGENCE. Level shifting [Off by default]A commonly used alternative to damping is to use level shifting,; which decreases the mixing of occupied and unoccupied orbitals in; the SCF update by moving the unoccupied orbitals up in energy. It; can be shown that the SCF procedure always converges with a; suitably large level shift; however, the larger the shift is, the; slower the convergence becomes, and the calculation may end up; converging onto a higher lying SCF solution. Because of this, in; practice level shifting is most useful in the initial phase of the; calculation to reduce the orbital error enough for DIIS to work; well. The level shift is controlled by the parameter; LEVEL_SHIFT, and it is turned off when the DIIS error is; smaller than LEVEL_SHIFT_CUTOFF. Reasonable values for; the shift and convergence threshold are 5.0 and 1e-2,; respectively. SOSCF [Off by Default]See Second-order Convergence. ERI Algorithms¶; The key difficulty in the SCF procedure is treatment of the four-index ERI; contributions to the Fock Matrix. A number of algorithms are available in; PSI4 for these terms. The algorith",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/scf-1.html:23425,update,update,23425,psi4manual/1.4.0/scf-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/scf-1.html,9,['update'],['update']
Deployability,"place PSI4 into a conda; environment where its libraries can’t interfere with other programs; rather than the main; Anaconda or Miniconda environment. Hence the creation of the environment; above, but the environment name (p4env above) can be; substituted.; The psi4-rt package can be added to the package list to get the; QC runtime add-ons; could say any combination of v2rdm_casscf snsmp2; resp etc. instead of psi4-rt.; As of PSI4 v1.7, the psi4-rt package is being slowly retired; due to more optional dependencies being on conda-forge. Similar collections; of dependencies can be obtained from environment spec files like psi4/devtools/conda-envs .; Grab a Miniconda through one of the below, selecting OS.; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-Linux-x86_64.sh""; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-MacOSX-x86_64.sh""; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-Windows-x86_64.exe"". How to update a Psi4 binary¶; A. Conda command to update an existing PSI4 conda installation to the; newest stable release (roughly annually). It’s often a better idea to create; a new environment rather than updating the old one.; >>> # Linux/MacOS; >>> conda update psi4 -c psi4; >>> # Windows; >>> conda update psi4 -c psi4 -c conda-forge. # if psi4 channel in defaults (true for Psi4conda installers); >>> conda update psi4. B. Conda command to update an existing PSI4 conda installation to the; latest development head (roughly nightly).; >>> # Linux/MacOS; >>> conda update psi4 -c psi4/label/dev; >>> # Windows; >>> conda update psi4 -c psi4/label/dev -c conda-forge. C. Conda command to install a very specific package, including version,; build string, and subchannel. The final -c psi4 represents any; additional channels or subchannels needed to locate all dependencies.; >>> conda install psi4=1.2a1.dev249+623ad64=py36_sse41_0 -c psi4/label/subchannel -c psi4. How to use conda to compile Psi4 faster an",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/conda.html:6871,update,update,6871,psi4manual/1.7.x/conda.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/conda.html,4,['update'],['update']
Deployability,"place the; text given in the psi4/do-configure file (all on one long line). Replace the; text after prefix with whatever directory you want to use for your; installation directory. Intel compiler with MKL math library [highly recommended; if you don’t use; this, then at least make sure you have a threaded BLAS (see BLAS; recommendations at Section IV below)]; ../configure --prefix=/usr/local/psi4 --with-blas='-mkl' --with-cc=icc --with-cxx=icpc --with-fc=ifort --with-opt='-O2 -static -no-prec-div' --with-incdirs=-mkl. Note; It’s -mkl, not -lmkl. Warning; There seems to be a problem with icpc 12.0.2 and possibly earlier; 12.0 versions, giving an error like:; error: identifier ""__is_trivial"" is undefined. Use at least version 12.0.4. g++, optimized; ../configure --prefix=/usr/local/psi4. g++, for debugging; ../configure --prefix=/usr/local/psi4 --without-opt --with-debug. Compiling for Mac; PSI4 has been compiled on OS X 10.7 (Lion) and 10.8 (Mountain Lion).; To get the compilers needed, it’s easiest to install XCode.; However, XCode does not provide a Fortran compiler. Although; Fortran compilers are not needed to compile Psi, a broken one can; prevent Psi from configuring properly. Do not download the latest; version of GFortran from the HPC website; this is unlikely to be; compatible with your version of GCC. Instead, you should run gcc; -v to find out what version of GCC you’re using, and then; download the corresponding GFortran from; http://r.research.att.com/tools/. If you configure Psi on a Mac; without any Fortran compiler it will set itself up correctly, so; this is only necessary if you want a Fortran compiler for other; purposes. You can configure Psi by adding something like; ../configure --with-plugins. to the do-configure script. If you want to use the new LLVM compilers that; ship with XCode 4 (they compile quicker than GCC), use; ../configure --with-plugins --with-cxx=llvm-g++. Warning; If you still happen to encouter an error like:; checking Fortran s",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/installfile.html:8454,install,install,8454,psi4manual/4.0b3/installfile.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/installfile.html,1,['install'],['install']
Deployability,"ple inputs are provided in; psi4/samples, in directories starting with the name adc. The most; important keyword is ROOTS_PER_IRREP, which is an array; giving the number of excited states desired for each irreducible; representation. Implementation¶; Some very essential points are emphasized for understanding of the; nature and the limitations of the theory. The ADC(2) response matrix,; denoted as , is expanded in the single (S) and double (D); excitation manifolds as. where the superscript on each matrix block indicates the order of; the fluctuation. Instead of solving the above equation explicitly,; the large D manifold is treated effectively as. This form of the ADC(2) equation requires 7 – 10 iterations for; convergence on only one root. But thanks to Newton-Raphson; acceleration,. the computational time reduces to shorter than half of the simple iterative; procedure. Construction of the denominator of the second term in the above; equation is less computationally expensive than contruction of one $sigma$-vector with respect to the effective response matrix. The non-iterative excitation energy stated above is calculated as a diagonal element of the Davidson mini-Hamiltonian matrix in the SEM as,. where and denote the CIS; excitation energy and wave function, respectively. The explicit form of the; σ-vector is provided in a note accompanying the source code,; in the file psi4/src/bin/adc/sigma.pdf. Table Of Contents. ADC: Ab Initio Polarization Propagator; Partial Renormalization Scheme; Using the ADC(2) code; Implementation. Previous topic; OMPn: Orbital-Optimized Møller–Plesset Perturbation Theory; Next topic; SAPT: Symmetry-Adapted Perturbation Theory; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Theoretical Methods: SCF to FCI ». © Copyright 2012, The Psi4 Project.; Last updated on Oct 16, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/adc-1.html:6999,update,updated,6999,psi4manual/4.0b3/adc-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/adc-1.html,2,['update'],['updated']
Deployability,"ples with iterative quadruples (cheapest terms). ccsdtqp-1a; CC through quadruples with iterative quintuples (cheapest terms). ccsdtqph-1a; CC through quintuples with iterative sextuples (cheapest terms). ccsdt-1b; CC through doubles with iterative triples (cheaper terms). ccsdtq-1b; CC through triples with iterative quadruples (cheaper terms). ccsdtqp-1b; CC through quadruples with iterative quintuples (cheaper terms). ccsdtqph-1b; CC through quintuples with iterative sextuples (cheaper terms). cc2; approximate CC through doubles [details]. cc3; approximate CC through triples [details]. cc4; approximate CC through quadruples. cc5; approximate CC through quintuples. cc6; approximate CC through sextuples. ccsdt-3; CC through doubles with iterative triples (all but the most expensive terms). ccsdtq-3; CC through triples with iterative quadruples (all but the most expensive terms). ccsdtqp-3; CC through quadruples with iterative quintuples (all but the most expensive terms). ccsdtqph-3; CC through quintuples with iterative sextuples (all but the most expensive terms). Frozen-core approximation is also supported in the MRCC interface.; To optimize CH4 with CCSDT freezing the 1s on carbon, run:; molecule H2O {; O; H 1 r; H 1 r 2 104.5. r = 1.0; }. set {; basis cc-pVDZ; freeze_core true; }. optimize('ccsdt'). Interface Details¶. MRCC methods¶. MRCC_METHOD; Method; Description. 1; CC. 2; CC(n-1)[n]. 3; CC(n-1)(n); (CC(n-1)[n] energy is also calculated). 4; CC(n-1)(n)_L; (CC(n-1)[n] and CC(n-1)(n) energies are also calculated). 5; CC(n)-1a. 6; CC(n)-1b. 7; CCn. 8; CC(n)-3. table of contents. Interface to MRCC by M. Kállay; Installation; Running MRCC; Interface Details. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to MRCC by M. Kállay. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/mrcc.html:5428,update,updated,5428,psi4manual/master/mrcc.html,https://psicode.org,https://psicode.org/psi4manual/master/mrcc.html,1,['update'],['updated']
Deployability,"pleted {}"".format(self.result_id)); else:; logger.debug(""Submitting AtomicResult {}"".format(self.result_id)). return. logger.info(f'<<< JSON launch ... {self.molecule.schoenflies_symbol()} {self.molecule.nuclear_repulsion_energy()}'); gof = core.get_output_file(). # EITHER ...; # from psi4.driver import schema_wrapper; # self.result = schema_wrapper.run_qcschema(self.plan()); # ... OR ...; self.result = qcng.compute(; self.plan(),; ""psi4"",; raise_error=True,; # local_options below suitable for serial mode where each job takes all the resources of the parent Psi4 job.; # distributed runs through QCFractal will likely need a different setup.; local_options={; # B -> GiB; ""memory"": core.get_memory() / (2 ** 30),; ""ncores"": core.get_num_threads(),; },; ); # ... END. #pp.pprint(self.result.dict()); #print(""... JSON returns >>>""); core.set_output_file(gof, True); core.reopen_outfile(); logger.debug(pp.pformat(self.result.dict())); core.print_out(_drink_filter(self.result.dict()[""stdout""])); self.computed = True. [docs] def get_results(self, client: Optional[""FractalClient""] = None) -> AtomicResult:; """"""Return results as Atomic-flavored QCSchema."""""". if self.result:; return self.result. if client:; result = client.query_results(id=self.result_id); logger.debug(f""Querying AtomicResult {self.result_id}""); if len(result) == 0:; return self.result. self.result = result[0]; return self.result. def _drink_filter(stdout: str) -> str:; """"""Don't mess up the widespread ``grep beer`` test of Psi4 doneness by printing multiple drinks per outfile."""""". stdout = stdout.replace(""\n*** Psi4 exiting successfully. Buy a developer a beer!"", """"); stdout = stdout.replace(""\n*** Psi4 encountered an error. Buy a developer more coffee!"", """"); return stdout. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .  · ; 1.6;  · . PSI4. Module code; psi4.driver.task_base. © Copyright 2022, The Psi4 Project.; Last updated on Thursday, 19 May 2022 08:57PM.; Created using Sphinx 4.5.0.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/task_base.html:6544,update,updated,6544,psi4manual/1.6.x/_modules/psi4/driver/task_base.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/task_base.html,1,['update'],['updated']
Deployability,"pletes is fine, though it can be mildly personally embarrassing when CI catches something you didn’t.; All main branches (master and 1.N.x maintenance) are protected by GitHub, including administrators, so even with write access, no one can accidentally push (master) or rewrite the history (master and maintenance).; PR owners who also have maintainer status can merge their PRs as GitHub enforces two external reviews.; Unless there’s been a lot of discussion on core-dev about merge order, generally the 2nd positive reviewer merges the PR. Also fine to add review and leave merge for later.; Presently only Azure is set up as a required-to-merge service. Incomplete GHA Ecosystem or Docs won’t block merging, but we do usually let it complete before merging unless it’s a trivial PR.; We don’t enforce branches to be up to date before merging since that’d be a lot of extra CI time and coordination when merging several PRs in a day. So, if a PR hasn’t been updated in a while, and a reviewer is nervous about PR interference, fine to ask submitter to rebase. Or, there’s an update button on the PR – but if this is used, warn the submitted that their remote and local branches will be out of sync. For this reason, we try to merge newer contributors first so the rebase falls on more experienced contributors.; Ideally a PR consists of atomic, compilable commits. It almost never happens, so unless there’s been discussion, squash merge all PRs.; When discussion on issue has overcome the original problem and settled on needing long-term work, fine to move the long-term item to Wish List and close issue. table of contents. Git, Versioning; How to bump a version; How to create and remove an annotated Git tag on a remote; What Psi4 version is running; How to locate non-ascii characters in the codebase; How to fix “Psi4 undefined” version; How to fix “cannot import name ‘core’ from {top-level-psi4-dir}; How to find tests without output.ref; How to do GitHub issue management and code revie",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/manage_git.html:9851,update,updated,9851,psi4manual/1.8.x/manage_git.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/manage_git.html,3,['update'],['updated']
Deployability,"plit-virtual CISD[TQ] from Sherrill and Schaefer, J. Phys. Chem. XXX This uses a “primary” virtual space 3s3p (RAS 2), a “secondary” virtual space 3d4s4p4d4f (RAS 3), and a “tertiary” virtual space consisting of the remaining virtuals. First, an initial CISD computation is run to get the natural orbitals; this allows a meaningful partitioning of the virtual orbitals into groups of different importance. Next, the RASCI is run. The split-virtual CISD[TQ] takes all singles and doubles, and all triples and quadruples with no more than 2 electrons in the secondary virtual subspace (RAS 3). If any electrons are present in the tertiary virtual subspace (RAS 4), then that excitation is only allowed if it is a single or double. scf-property; UFH and B3LYP cc-pVQZ properties for the CH2 molecule. fsapt-diff1; This test case shows an example of running and analyzing a difference F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. frac-traverse; Scan fractional occupation of electrons updated values due to new BraggSlater radii. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. omp2-3; OMP2 cc-pVDZ energy for the NO radical. omp2p5-grad2; OMP2.5 cc-pVDZ gradient for the NO radical. cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}B_1\) state of H2O+ (A1 excitation). sapt11; sapt example with orbital freezing with alkali metal and dMP2. fci-h2o; 6-31G H2O Test FCI Energy Point. psimrcc-sp1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. dct8; DCT calculation for the NH3+ radical using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk al",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:5227,update,updated,5227,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,4,['update'],['updated']
Deployability,"plot as plt. Nweft = 1; positions = range(-1, -1 * Nweft - 1, -1). # initialize plot; fig, ax = plt.subplots(figsize=(12, 0.33)); plt.xlim([-xlimit, xlimit]); plt.ylim([-1 * Nweft - 1, 0]); plt.yticks([]); plt.xticks([]); # fig.patch.set_visible(False); # ax.patch.set_visible(False); ax.axis('off'). for xl in xlines:; plt.axvline(xl, color='grey', linewidth=4); if xl != 0.0:; plt.axvline(-1 * xl, color='grey', linewidth=4). # plot reaction errors and threads; for rxn in data:; xvals = rxn['data']; clr = segment_color(color, rxn['color'] if 'color' in rxn else None). ax.plot(xvals, positions, '|', color=clr, markersize=13.0, mew=4). # plot trimmings; if mae is not None:; plt.axvline(-1 * mae, color='black', linewidth=12); if mape is not None: # equivalent to MAE for a 10 kcal/mol interaction energy; ax.plot(0.025 * mape, positions, 'o', color='black', markersize=15.0). # save and show; pltuid = title # simple (not really unique) filename for LaTeX integration; pltfile = expand_saveas(saveas, pltuid, def_prefix='flat_', relpath=relpath); files_saved = {}; for ext in graphicsformat:; savefile = pltfile + '.' + ext.lower(); plt.savefig(savefile, transparent=True, format=ext, bbox_inches='tight',; frameon=False, pad_inches=0.0); files_saved[ext.lower()] = savefile; if view:; plt.show(); plt.close() # give this a try; return files_saved. #def mpl_distslat_multiplot_files(pltfile, dbid, dbname, xmin, xmax, mcdats, labels, titles):; # """"""Saves a plot with basename *pltfile* with a slat representation; # of the modelchems errors in *mcdat*. Plot is in PNG, PDF, & EPS; # and suitable for download, no mouseover properties. Both labeled; # and labelless (for pub) figures are constructed.; #; # """"""; # import matplotlib as mpl; # from matplotlib.axes import Subplot; # import sapt_colors; # from matplotlib.figure import Figure; #; # nplots = len(mcdats); # fht = nplots * 0.8; # fig, axt = plt.subplots(figsize=(12.0, fht)); # plt.subplots_adjust(left=0.01, right=0.99, hspace=0.3); #",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/mpl.html:5894,integrat,integration,5894,psi4manual/1.0.0/_modules/qcdb/mpl.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/mpl.html,1,['integrat'],['integration']
Deployability,"plugin can be configured; to format files when saving them to disk. How to impose code style through Git hooks¶; Git hooks are scripts that are run before or after certain Git events.; In this particular case, we want to make sure that all files that have been; added to the staging area with git add are formatted according to the style; before they committing them with git commit.; The hook to be modified is then the pre-commit hook.; PSI4 uses the pre-commit framework, with configuration file psi4/.pre-commit-config.yaml.; To take advantage of pre-commit hooks, you will need to install the pre-commit utility:. ::pip install pre-commit. or using Conda:. ::conda install pre_commit -c conda-forge. Finally, you need to install the actual hooks:. ::pre-commit install. Pre-commit hooks will be run on every git commit, but the --no-verify; option can be used to skip their execution.; Hooks are powerful, but integrating the formatter into your editor will prove; to be better. Hooks need to be installed anew for every fresh clone of the; repository you are working on. How to run code-style tools clang-format and yapf manually¶; The least recommended approach to formatting your code is to run manually the; formatters. The following commands will format only the files that have been; modified:. ::clang-format -style=file -i git diff –relative –name-only HEAD – *.cc *.h; yapf -i git diff –relative –name-only HEAD – *.py. How and when to not apply code styling to your contributions¶; TODO. table of contents. Code style conventions; How to impose code style through your editor; How to impose code style through Git hooks; How to run code-style tools clang-format and yapf manually; How and when to not apply code styling to your contributions. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.6;  · . PSI4. Code style conventions. © Copyright 2022, The Psi4 Project.; Last updated on Thursday, 19 May 2022 08:57PM.; Created using Sphinx 4.5.0.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/code_style.html:2180,install,installed,2180,psi4manual/1.6.x/code_style.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/code_style.html,2,"['install', 'update']","['installed', 'updated']"
Deployability,"plugin. Should not have any fancy characters or reserved keywords.; template; {{{available_plugins}}}; Which existing template to model off of. """"""; name = sanitize_name(name); template_path = plugin_path / template. # Create, but do not overwrite, plugin directory; if os.path.exists(name):; tty.error(""""""Plugin directory ""{}"" already exists."""""".format(name)). # Do a first pass to determine the template temp_files; template_files = os.listdir(template_path); source_files = []; for temp_file in template_files:; target_file = temp_file. if temp_file.endswith('.template'):; target_file = temp_file[0:-9]. if temp_file.endswith('.cc.template'):; source_files.append(target_file). tty.hline(""""""Creating ""{}"" with ""{}"" template."""""".format(name, template)). os.mkdir(name); created_files = []; for source_file in template_files:. # Skip swp files; if source_file.endswith("".swp""):; continue. target_file = source_file. if source_file.endswith('.template'):; target_file = source_file[0:-9]. try:; print(template_path / source_file); contents = (template_path / source_file).read_text(); except IOError as err:; tty.error(""""""Unable to open {} template."""""".format(source_file)); tty.error(err); sys.exit(1). contents = contents.replace('@plugin@', name); contents = contents.replace('@Plugin@', name.capitalize()); contents = contents.replace('@PLUGIN@', name.upper()); contents = contents.replace('@sources@', ' '.join(source_files)). try:; (Path(name) / target_file).write_text(contents); created_files.append(target_file); except IOError as err:; tty.error(""""""Unable to create {}"""""".format(target_file)); tty.error(err); sys.exit(1). tty.info(""Created plugin files (in {} as {}): "".format(name, template), "", "".join(created_files)). sys.exit(0). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .  · ; 1.7;  · . PSI4. Module code; psi4.driver.pluginutil. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/pluginutil.html:5761,update,updated,5761,psi4manual/1.7.x/_modules/psi4/driver/pluginutil.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/pluginutil.html,1,['update'],['updated']
Deployability,"plugins or databases.; Modify PSIPATH through normal Linux shell commands before invoking psi4; # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSIPATH /home/user/psiadditions:/home/user/gbs. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSIPATH=/home/user/psiadditions:/home/user/gbs. PYTHONPATH¶; Path in which the Python interpreter looks for modules to import. For; PSI4, these are generally plugins or databases. Note; Configuring PSI4 through PSIPATH is preferred; to modifying this environment variable. Modification of PYTHONPATH can be done in three ways, equivalently. Normal Linux shell commands.; # csh, tcsh: add to shell or ~/.tcshrc file; setenv PYTHONPATH /home/user/psiadditions:$PYTHONPATH. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PYTHONPATH=/home/user/psiadditions:$PYTHONPATH. Place the path in the ~/.psi4rc file so that it is available for; every PSI4 instance.; 1sys.path.insert(0, '/home/user/psiadditions'). Place the path in the input file, either absolute or relative.; 1; 2sys.path.insert(0, '../../psiadditions'); sys.path.insert(0, '/home/user/psiadditions'). PSIDATADIR¶; Path in which the PSI4 executable looks for its non-compiled; dependencies (i.e., basis sets, databases, quadratures, etc.).; This path is always known by the PSI4 program or shared library,; so this variable is relevant primarily to developers wanting a; non-standard location. Value should be set; to directory containing driver, basis, etc. directories, generally; ending in share/psi4. table of contents. Installation and Runtime Configuration; Scratch Files and Elementary Restart; ~/.psi4rc File; Threading; PBS job file; Command Line Options; Environment Variables. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 July 2018 04:21AM.; Created using Sphinx 1.7.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/external-1.html:21933,update,updated,21933,psi4manual/1.2.1/external-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/external-1.html,2,['update'],['updated']
Deployability,"poise-corrected two-body interaction energies; for complexes composed of arbitrary numbers of monomers. Aliases :counterpoise_correct(), counterpoise_correction(). Returns:(float) Counterpoise-corrected interaction energy in Hartrees. Psi variables:. CP-CORRECTED 2-BODY INTERACTION ENERGY; UNCP-CORRECTED 2-BODY INTERACTION ENERGY. Caution; Some features are not yet implemented. Buy a developer a coffee. No values of func besides energy have been tested.; Table print-out needs improving. Add some PSI variables. Parameters:; name (string) – 'scf' || 'ccsd(t)' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the molecule. May be any valid argument to; energy(); however, SAPT is not appropriate. func (function) – energy || optimize || cbs; Indicates the type of calculation to be performed on the molecule; and each of its monomers. The default performs a single-point; energy('name'), while optimize perfoms a geometry optimization; on each system, and cbs performs a compound single-point energy.; If a nested series of python functions is intended; (see Function Intercalls), use keyword cp_func instead of func. check_bsse (boolean) – 'on' || 'off' ; Indicates whether to additionally compute un-counterpoise corrected; monomers and thus obtain an estimate for the basis set superposition error. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples :. >>> # [1] counterpoise-corrected mp2 interaction energy; >>> cp('df-mp2'). n_body(name[, func, bsse, max_n_body, do_total, external, external_monomers, molecule])[source]¶. Previous topic; Property; Next topic; Optimize; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Psithon Functions: Invoking a Calculation ». © Copyright 2012, The Psi4 Project.; Last updated on Oct 16, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/cp-1.html:2260,update,updated,2260,psi4manual/4.0b3/cp-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/cp-1.html,2,['update'],['updated']
Deployability,"poise-corrected two-body interaction energies; for complexes composed of arbitrary numbers of monomers. Aliases :counterpoise_correct(), counterpoise_correction(). Returns:(float) Counterpoise-corrected interaction energy in Hartrees. Psi variables:. CP-CORRECTED 2-BODY INTERACTION ENERGY; UNCP-CORRECTED 2-BODY INTERACTION ENERGY. Caution; Some features are not yet implemented. Buy a developer a coffee. No values of func besides energy have been tested.; Table print-out needs improving. Add some PSI variables. Parameters:; name (string) – 'scf' || 'ccsd(t)' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the molecule. May be any valid argument to; energy(); however, SAPT is not appropriate. func (function) – energy || optimize || cbs; Indicates the type of calculation to be performed on the molecule; and each of its monomers. The default performs a single-point; energy('name'), while optimize perfoms a geometry optimization; on each system, and cbs performs a compound single-point energy.; If a nested series of python functions is intended; (see Function Intercalls), use keyword cp_func instead of func. check_bsse (boolean) – 'on' || 'off' ; Indicates whether to additionally compute un-counterpoise corrected; monomers and thus obtain an estimate for the basis set superposition error. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples :. >>> # [1] counterpoise-corrected mp2 interaction energy; >>> cp('df-mp2'). n_body(name[, func, bsse, max_n_body, do_total, external, external_monomers, molecule])[source]¶. Previous topic; Property; Next topic; Optimize; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Psithon Functions: Invoking a Calculation ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 25, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/cp-1.html:2260,update,updated,2260,psi4manual/4.0b4/cp-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/cp-1.html,2,['update'],['updated']
Deployability,"poise-corrected two-body interaction energies; for complexes composed of arbitrary numbers of monomers. Aliases :counterpoise_correct(), counterpoise_correction(). Returns:(float) Counterpoise-corrected interaction energy in Hartrees. Psi variables:. CP-CORRECTED 2-BODY INTERACTION ENERGY; UNCP-CORRECTED 2-BODY INTERACTION ENERGY. Caution; Some features are not yet implemented. Buy a developer a coffee. No values of func besides energy have been tested.; Table print-out needs improving. Add some PSI variables. Parameters:; name (string) – 'scf' || 'ccsd(t)' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the molecule. May be any valid argument to; energy(); however, SAPT is not appropriate. func (function) – energy || optimize || cbs; Indicates the type of calculation to be performed on the molecule; and each of its monomers. The default performs a single-point; energy('name'), while optimize perfoms a geometry optimization; on each system, and cbs performs a compound single-point energy.; If a nested series of python functions is intended; (see Function Intercalls), use keyword cp_func instead of func. check_bsse (boolean) – 'on' || 'off' ; Indicates whether to additionally compute un-counterpoise corrected; monomers and thus obtain an estimate for the basis set superposition error. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples :. >>> # [1] counterpoise-corrected mp2 interaction energy; >>> cp('df-mp2'). n_body(name[, func, bsse, max_n_body, do_total, external, external_monomers, molecule])[source]¶. Previous topic; Property; Next topic; Optimize; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Psithon Functions: Invoking a Calculation ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/cp-1.html:2260,update,updated,2260,psi4manual/4.0b5/cp-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/cp-1.html,2,['update'],['updated']
Deployability,"polated energies with delta correction. dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cbs-xtpl-nbody; RHF interaction energies using nbody and cbs parts of the driver Ne dimer with mp2/v[dt]z + d:ccsd(t)/vdz. cc10; ROHF-CCSD cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical. dfmp2-freq2; DF-MP2 frequency by difference of energies for H2O. cc1; RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. omp3-grad2; OMP3 cc-pVDZ gradient for the NO radical. cdomp2-2; OMP2 cc-pVDZ energy for the NO molecule. fd-freq-energy-large; SCF DZ finite difference frequencies by energies for C4NH4. dct11; Restricted DF-DCT ODC-12 energies with linearly dependent basis functions. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. mints15; check SP basis Fortran exponent parsing. dct4; DCT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. fci-coverage; 6-31G H2O Test for coverage. castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. pywrap-molecule; Check that C++ Molecule class and qcdb molecule class are reading molecule input strings identically. olccd-grad2; OLCCD cc-pVDZ gradient for the NO rad",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_corepsi4.html:9642,update,update,9642,psi4manual/1.9.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_corepsi4.html,2,['update'],['update']
Deployability,"pole [Debye Ang] for the requested; configuration interaction level of theory and root.; Deprecated in favor of CI QUADRUPOLE. CI ROOT n -> ROOT m DIPOLE¶; Transition dipole array [e a0] between roots n and m for the requested configuration interaction level of theory, (3,). CI ROOT n -> ROOT m DIPOLE X¶. CI ROOT n -> ROOT m DIPOLE Y¶. CI ROOT n -> ROOT m DIPOLE Z¶; The three components of the transition dipole [Debye] between roots n; and m for the requested configuration interaction level of theory.; Deprecated in favor of CI ROOT n -> ROOT m DIPOLE. CI ROOT n -> ROOT m QUADRUPOLE¶; Redundant transition quadrupole array [e a0^2] between roots n and m for the requested configuration interaction level of theory, (3, 3). CI ROOT n -> ROOT m QUADRUPOLE XX¶. CI ROOT n -> ROOT m QUADRUPOLE XY¶. CI ROOT n -> ROOT m QUADRUPOLE XZ¶. CI ROOT n -> ROOT m QUADRUPOLE YY¶. CI ROOT n -> ROOT m QUADRUPOLE YZ¶. CI ROOT n -> ROOT m QUADRUPOLE ZZ¶; The three components of the transition quadrupole [Debye Ang] between; roots n and m for the requested configuration interaction level of; theory.; Deprecated in favor of CI ROOT n -> ROOT m QUADRUPOLE. CI ROOT n DIPOLE¶; Dipole array [e a0] for the requested configuration interaction level of theory and root n, (3,). CI ROOT n DIPOLE X¶. CI ROOT n DIPOLE Y¶. CI ROOT n DIPOLE Z¶; The three components of the dipole [Debye] for the requested; configuration interaction level of theory and root n.; Deprecated in favor of CI ROOT n DIPOLE. CI ROOT n QUADRUPOLE¶; Redundant quadrupole array [e a0^2] for the requested configuration interaction level of theory and root n, (3, 3). CI ROOT n QUADRUPOLE XX¶. CI ROOT n QUADRUPOLE XY¶. CI ROOT n QUADRUPOLE XZ¶. CI ROOT n QUADRUPOLE YY¶. CI ROOT n QUADRUPOLE YZ¶. CI ROOT n QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the requested; configuration interaction level of theory and root n.; Deprecated in favor of CI ROOT n QUADRUPOLE. CI ROOT n TOTAL ENERGY¶. CI ROOT n CORRELATION ENER",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/glossary_psivariables-1.html:11865,configurat,configuration,11865,psi4manual/1.4.0/glossary_psivariables-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/glossary_psivariables-1.html,4,['configurat'],['configuration']
Deployability,"pole, polarizability, rotation, roa_tensor. dct; density cumulant (functional) theory; [manual]; RHF/UHF; Listed here. omp2; orbital-optimized second-order; MP perturbation theory; [manual]; RHF/UHF; Listed here; Density fitted only. omp3; orbital-optimized third-order; MP perturbation theory; [manual]; RHF/UHF; Listed here; Density fitted only. omp2.5; orbital-optimized MP2.5; [manual]; RHF/UHF; Listed here; Density fitted only. olccd; orbital optimized LCCD; [manual]; RHF/UHF; Listed here; Density fitted only. eom-cc2; 2nd-order approximate EOM-CCSD; RHF; oscillator_strength, rotational_strength. eom-ccsd; Equation-of-motion CCSD (EOM-CCSD); RHF; oscillator_strength, rotational_strength. cisd, cisdt,; cisdt, cisdtq,; ci5, …, fci; Configuration interaction; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. casscf, rasscf; Multi-configurational SCF; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. adc(0), adc(1),; …, adc(3),; cvs-adc(0), …; cvs-adc(3); Algebraic-diagrammatic construction methods; [manual]; RHF/UHF; dipole, transition_dipole, oscillator_strength,; rotational_strength. Parameters:. name (str) – 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. properties (List[str]) – \(\Rightarrow\) [] \(\Leftarrow\) || ['rotation', 'polarizability', 'oscillator_strength', 'roa'] || etc.; Indicates which properties should be computed. Defaults to dipole and quadrupole. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] Optical rotation calculation; >>> properties('cc2', properties=['rotation']). table of contents. properties; properties(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; properties. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.properties.html:2818,update,updated,2818,psi4manual/1.8.x/api/psi4.driver.properties.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.properties.html,1,['update'],['updated']
Deployability,"pole, polarizability, rotation, roa_tensor. dct; density cumulant (functional) theory; [manual]; RHF/UHF; Listed here. omp2; orbital-optimized second-order; MP perturbation theory; [manual]; RHF/UHF; Listed here; Density fitted only. omp3; orbital-optimized third-order; MP perturbation theory; [manual]; RHF/UHF; Listed here; Density fitted only. omp2.5; orbital-optimized MP2.5; [manual]; RHF/UHF; Listed here; Density fitted only. olccd; orbital optimized LCCD; [manual]; RHF/UHF; Listed here; Density fitted only. eom-cc2; 2nd-order approximate EOM-CCSD; RHF; oscillator_strength, rotational_strength. eom-ccsd; Equation-of-motion CCSD (EOM-CCSD); RHF; oscillator_strength, rotational_strength. cisd, cisdt,; cisdt, cisdtq,; ci5, …, fci; Configuration interaction; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. casscf, rasscf; Multi-configurational SCF; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. adc(0), adc(1),; …, adc(3),; cvs-adc(0), …; cvs-adc(3); Algebraic-diagrammatic construction methods; [manual]; RHF/UHF; dipole, transition_dipole, oscillator_strength,; rotational_strength. Parameters:. name (str) – 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. properties (List[str]) – \(\Rightarrow\) [] \(\Leftarrow\) || ['rotation', 'polarizability', 'oscillator_strength', 'roa'] || etc.; Indicates which properties should be computed. Defaults to dipole and quadrupole. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] Optical rotation calculation; >>> properties('cc2', properties=['rotation']). table of contents. properties; properties(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.9.1;  · . PSI4. PSI4 API: Linking C++ and Python; properties. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 08 February 2024 09:32PM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/api/psi4.driver.properties.html:2818,update,updated,2818,psi4manual/1.9.x/api/psi4.driver.properties.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/api/psi4.driver.properties.html,1,['update'],['updated']
Deployability,"poles for water. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. nbody-vmfc-gradient; Computation of VMFC-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). dft-custom-mgga; updated dldf reference to new BraggSlater radii Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). psimrcc-fd-freq2; Mk-MRCCSD frequencies. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. dct9; UHF-ODC-12 and RHF-ODC-12 single-point energy for H2O. This performs a simultaneous update of orbitals and cumulants, using DIIS extrapolation. Four-virtual integrals are handled in the AO basis, where integral transformation is avoided. In the next RHF-ODC-12 computation, AO_BASIS=NONE is used, where four-virtual integrals are transformed into MO basis. freq-masses; check nonphysical masses possible. castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. dfomp2p5-grad2; DF-OMP2.5 cc-pVDZ gradients for the H2O+ cation. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. psimrcc-fd-freq1; Mk-MRCCSD single",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:11881,update,update,11881,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,4,['update'],['update']
Deployability,"pon; activation). >>> cmake -DCMAKE_C_COMPILER=${GCC} \; -DCMAKE_CXX_COMPILER=${GXX} \; -DCMAKE_Fortran_COMPILER=${GFORTRAN}. What C and C++ compilers and versions are approved¶; On Linux, the following work nicely. GNU: gcc, g++; Intel: icc, icpc; Clang: clang, clang++. On Mac, the following work nicely. Apple Clang: clang, clang++; Intel: icc, icpc. PSI4 requires full C++20 compliance.; This compliance is checked for at build-time with file; psi4/cmake/custom_cxxstandard.cmake, so either consult that file or; try a test build to ensure your compiler is approved. Note that Intel; compilers on Linux also rely on GCC, so both icpc and gcc versions are checked.; Intel OneAPI Classic compilers work fine, as do OneAPI Clang icpx compilers. How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS. How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew¶; The easiest compiler to obtain is clang which is a drop-in replacement; for gcc and g++. Just install XCode. Some old versions; of XCode can’t handle some of the advanced C++ language features, but this; is a software not hardware limitation. Checks for version compliance; performed at build-time. Note that this “AppleClang” will not be compatible; with conda Mac packages using C++11, nor can it make use of OpenMP directives.; Another route to obtaining clang compilers without the above limitations; is through conda.; # Install Clang 4.0.1 into a non-primary conda environment; >>> conda create -n clang401 clangxx_osx-64 clang_osx-64 llvm-openmp intel-openmp. # To Build, activate environment (prepends PATH and defines environment variables CLANG, CLANGXX, HOST, etc):; >>> conda activate clang401; >>> echo ${CLANGXX}; /path/to/miniconda/envs/clang401/bin/x86_64-apple-darwin13.4.0-clang++; >>> echo ${HOST}; x86_64-apple-darwin13.4.0. # build with Clang; >>> cmake -S. -Bbuild \; -DCMAKE_C_COMPILER=${CLANG} \; -DCMAKE_CXX_COMPILER=${CLANGXX} \; -DCMAKE_CXX_FLAGS=""-stdlib=libc++"" \; -DOp",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/build_planning.html:37184,install,install,37184,psi4manual/master/build_planning.html,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html,1,['install'],['install']
Deployability,"port. For; PSI4, these are generally plugins or databases.; Modify PSIPATH through normal Linux shell commands before invoking psi4; # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSIPATH /home/user/psiadditions:/home/user/gbs. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSIPATH=/home/user/psiadditions:/home/user/gbs. PYTHONPATH¶; Path in which the Python interpreter looks for modules to import. For; PSI4, these are generally plugins or databases. Note; Configuring PSI4 through PSIPATH is preferred; to modifying this environment variable. Modification of PYTHONPATH can be done in three ways, equivalently. Normal Linux shell commands.; # csh, tcsh: add to shell or ~/.tcshrc file; setenv PYTHONPATH /home/user/psiadditions:$PYTHONPATH. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PYTHONPATH=/home/user/psiadditions:$PYTHONPATH. Place the path in the ~/.psi4rc file so that it is available for; every PSI4 instance.; 1sys.path.insert(0, '/home/user/psiadditions'). Place the path in the input file, either absolute or relative.; 1; 2sys.path.insert(0, '../../psiadditions'); sys.path.insert(0, '/home/user/psiadditions'). PSIDATADIR¶; Path in which the PSI4 executable looks for its non-compiled; dependencies (i.e., basis sets, databases, quadratures, etc.).; This path is always known by the PSI4 program or shared library,; so this variable is relevant primarily to developers wanting a; non-standard location. Value should be set; to directory containing driver, basis, etc. directories, generally; ending in share/psi4. table of contents. Installation and Runtime Configuration; Scratch Files and Elementary Restart; ~/.psi4rc File; Threading; PBS job file; Command Line Options; Environment Variables. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/external-1.html:21786,update,updated,21786,psi4manual/1.1.0/external-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/external-1.html,2,['update'],['updated']
Deployability,"ppend(mol.extract_fragments(2, 1).format_molecule_for_molpro()); proc.append('df-hf'); proc.append('df-ks'); proc.append('sapt; monomerB'); options['DF-HF']['OPTIONS']['value'] = """""",basis=jkfit,locorb=0; start,atdens; save,1102.2""""""; options['DF-KS']['OPTIONS']['value'] = """""",lhf,df_basis=dflhf,basis_coul=jkfitb,basis_exch=jkfitb; dftfac,1.0; start,1102.2; save,2102.2"""""". proc.append(mol.format_molecule_for_molpro()); proc.append('sapt; intermol'); options['SAPT; INTERMOL']['OPTIONS']['value'] = """""",saptlevel=3,ca=2101.2,cb=2102.2,icpks=0,fitlevel=3,nlexfac=0.0,cfac=0.0; dfit,basis_coul=jkfit,basis_exch=jkfit,cfit_scf=3"""""". else:; raise ValidationError(""""""Requested Cfour computational methods %d is not available."""""" % (lowername)). # # Set clobbering; # if 'CFOUR_DERIV_LEVEL' in options['CFOUR']:; # options['CFOUR']['CFOUR_DERIV_LEVEL']['clobber'] = True; # options['CFOUR']['CFOUR_DERIV_LEVEL']['superclobber'] = True; # if 'CFOUR_CALC_LEVEL' in options['CFOUR']:; # options['CFOUR']['CFOUR_CALC_LEVEL']['clobber'] = True; # options['CFOUR']['CFOUR_CALC_LEVEL']['superclobber'] = True; # if 'CFOUR_CC_PROGRAM' in options['CFOUR']:; # options['CFOUR']['CFOUR_CC_PROGRAM']['clobber'] = False. return text, options, proc. procedures = {; 'energy': {; 'mp2c' : muster_modelchem,; 'ccsd(t)-f12' : muster_modelchem,; 'ccsd(t)-f12c' : muster_modelchem,; 'ccsd(t)-f12-optri' : muster_modelchem,; 'ccsd(t)-f12-cabsfit' : muster_modelchem,; #'sapt0' : muster_modelchem,; #'sapt2+' : muster_modelchem,; #'sapt2+(3)' : muster_modelchem,; #'sapt2+3(ccd)' : muster_modelchem,; }; }. qcmtdIN = procedures['energy']. [docs]def psi4_list():; """"""Return an array of Psi4 methods with energies. """"""; return procedures['energy'].keys(). Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    ; Psi4 [1.0.0 6a9a71b] » ; Module code ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/molpro2.html:24446,update,updated,24446,psi4manual/1.0.0/_modules/qcdb/molpro2.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/molpro2.html,1,['update'],['updated']
Deployability,"prints out some useful information, and runs a PSI4 test case to check that all’s well.; >>> conda install psi4; Using Anaconda Cloud api site https://api.anaconda.org; Fetching package metadata: ......; Solving package specifications: ......... Package plan for installation in environment /theoryfs2/ds/cdsgroup/miniconda/envs/tpsi4:. The following packages will be downloaded:. package | build; ---------------------------|-----------------; psi4-0.4.322 | py27_g84b3aa1 44.4 MB http://conda.anaconda.org/psi4/linux-64/. The following NEW packages will be INSTALLED:. psi4: 0.4.322-py27_g84b3aa1 http://conda.anaconda.org/psi4/linux-64/. Proceed ([y]/n)? y. Fetching packages ...; psi4-0.4.322-p 100% |####################################################################################| Time: 0:00:08 5.77 MB/s; Extracting packages ...; [ COMPLETE ]|#######################################################################################################| 100%; Linking packages ... Thank you for installing psi4. Additional resources:; Website: www.psicode.org; Inputs: /theoryfs2/ds/cdsgroup/miniconda/envs/tpsi4/share/psi4/samples; Manual: http://psicode.org/psi4manual/master/index.html; GitHub: https://github.com/psi4/psi4/wiki; Binary: https://anaconda.org/psi4; Youtube: https://www.youtube.com/user/psitutorials. For csh/tcsh command-line use, add to shell or ~/.tcshrc file:; unsetenv PSIDATADIR; setenv PATH /theoryfs2/ds/cdsgroup/miniconda/envs/tpsi4/bin:$PATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/disk/for/scratch/files. For sh/bash command-line use, add to shell or ~/.bashrc file:; unset PSIDATADIR; export PATH=/theoryfs2/ds/cdsgroup/miniconda/envs/tpsi4/bin:$PATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/disk/for/scratch/files. Report problems at http://forum.psicode.org/t/report-conda-update-psi4-oddities-here/32. Nuclear Repulsion Energy..........................................PASSED; SAPT0 Eelst..........................",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/conda-1.html:18365,install,installing,18365,psi4manual/1.2.1/conda-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/conda-1.html,6,['install'],['installing']
Deployability,"prints out some useful information, and runs a Psi4 test case to check that all’s well.; >>> conda install psi4; Using Anaconda Cloud api site https://api.anaconda.org; Fetching package metadata: ......; Solving package specifications: ......... Package plan for installation in environment /theoryfs2/ds/cdsgroup/miniconda/envs/tpsi4:. The following packages will be downloaded:. package | build; ---------------------------|-----------------; psi4-0.4.322 | py27_g84b3aa1 44.4 MB http://conda.anaconda.org/psi4/linux-64/. The following NEW packages will be INSTALLED:. psi4: 0.4.322-py27_g84b3aa1 http://conda.anaconda.org/psi4/linux-64/. Proceed ([y]/n)? y. Fetching packages ...; psi4-0.4.322-p 100% |####################################################################################| Time: 0:00:08 5.77 MB/s; Extracting packages ...; [ COMPLETE ]|#######################################################################################################| 100%; Linking packages ... Thank you for installing psi4. Additional resources:; Website: www.psicode.org; Inputs: /theoryfs2/ds/cdsgroup/miniconda/envs/tpsi4/share/psi4/samples; Manual: http://psicode.org/psi4manual/master/index.html; GitHub: https://github.com/psi4/psi4/wiki; Binary: https://anaconda.org/psi4; Youtube: https://www.youtube.com/user/psitutorials. For csh/tcsh command-line use, add to shell or ~/.tcshrc file:; unsetenv PSIDATADIR; setenv PATH /theoryfs2/ds/cdsgroup/miniconda/envs/tpsi4/bin:$PATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/disk/for/scratch/files. For sh/bash command-line use, add to shell or ~/.bashrc file:; unset PSIDATADIR; export PATH=/theoryfs2/ds/cdsgroup/miniconda/envs/tpsi4/bin:$PATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/disk/for/scratch/files. Report problems at http://forum.psicode.org/t/report-conda-update-psi4-oddities-here/32. Nuclear Repulsion Energy..........................................PASSED; SAPT0 Eelst..........................",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/conda-1.html:11225,install,installing,11225,psi4manual/1.0.0/conda-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/conda-1.html,2,['install'],['installing']
Deployability,"processing tools can read information from Gaussian’s formatted; checkpoint (FCHK) files.; To allow interoperability with such tools, PSI4 includes a utility to; generate FCHK files. Wavefunction information, such as orbitals, densities,; orbital energies and basis set information is currently supported, but geometry; optimization and vibrational frequency information are not supported at this; time. To generate a FCHK file, simply store the wavefunction from the energy; calculation, and hand it to the fchk driver function:; energy, wfn = energy('scf', return_wfn=True); fchk(wfn,'output.fchk'). The file will be written to the name passed to the fchk function.; Note that for MP2 and CCSD methods, the energy can be computed without; the expensive steps required to compute the density, so energy calls for these; methods will return a wavefunction that has the Hartree–Fock density. If a; density is required for these methods, the user should instead request a; gradient computation, to ensure that the density is updated appropriately:; grad, wfn = gradient('mp2', return_wfn=True); fchk(wfn,'output.fchk'). psi4.fchk(wfn, filename, *, debug=False, strict_label=True)[source]; Function to write wavefunction information in wfn to filename in; Gaussian FCHK format. Added in version 0.6. Returns:; None. Parameters:. wfn (Wavefunction) – set of molecule, basis, orbitals from which to generate fchk file; filename (str) – destination file name for FCHK file; debug (bool) – returns a dictionary to aid with debugging; strict_label (bool) – If true set a density label compliant with what Gaussian would write. A warning will be printed if this is not possible.; Otherwise set the density label according to the method name. Notes. A description of the FCHK format is http://wild.life.nctu.edu.tw/~jsyu/compchem/g09/g09ur/f_formchk.htm; The allowed headers for methods are general and limited, i.e., “Total SCF|MP2|CI|CC Density”,; PSI4 will try to find the right one for the current calculat",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/fchk.html:1379,update,updated,1379,psi4manual/master/fchk.html,https://psicode.org,https://psicode.org/psi4manual/master/fchk.html,1,['update'],['updated']
Deployability,"processing tools can read information from Gaussian’s formatted; checkpoint (FCHK) files.; To allow interoperability with such tools, PSI4 includes a utility to; generate FCHK files. Wavefunction information, such as orbitals, densities,; orbital energies and basis set information is currently supported, but geometry; optimization and vibrational frequency information are not supported at this; time. To generate a FCHK file, simply store the wavefunction from the energy; calculation, and hand it to the fchk driver function:; energy, wfn = energy('scf', return_wfn=True); fchk(wfn,'output.fchk'). The file will be written to the name passed to the fchk function.; Note that for MP2 and CCSD methods, the energy can be computed without; the expensive steps required to compute the density, so energy calls for these; methods will return a wavefunction that has the Hartree–Fock density. If a; density is required for these methods, the user should instead request a; gradient computation, to ensure that the density is updated appropriately:; grad, wfn = gradient('mp2', return_wfn=True); fchk(wfn,'output.fchk'). psi4.fchk(wfn, filename, *, debug=False, strict_label=True)[source]; Function to write wavefunction information in wfn to filename in; Gaussian FCHK format. New in version 0.6. Returns:; None. Parameters:. wfn (Wavefunction) – set of molecule, basis, orbitals from which to generate fchk file; filename (str) – destination file name for FCHK file; debug (bool) – returns a dictionary to aid with debugging; strict_label (bool) – If true set a density label compliant with what Gaussian would write. A warning will be printed if this is not possible.; Otherwise set the density label according to the method name. Notes. A description of the FCHK format is http://wild.life.nctu.edu.tw/~jsyu/compchem/g09/g09ur/f_formchk.htm; The allowed headers for methods are general and limited, i.e., “Total SCF|MP2|CI|CC Density”,; PSI4 will try to find the right one for the current calculatio",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/fchk.html:1370,update,updated,1370,psi4manual/1.7.x/fchk.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/fchk.html,3,['update'],['updated']
Deployability,"processing tools can read information from Gaussian’s formatted; checkpoint (FCHK) files.; To allow interoperability with such tools, PSI4 includes a utility to; generate FCHK files. Wavefunction information, such as orbitals, densities,; orbital energies and basis set information is currently supported, but geometry; optimization and vibrational frequency information are not supported at this; time. To generate a FCHK file, simply store the wavefunction from the energy; calculation, and hand it to the fchk driver function:; energy, wfn = energy('scf', return_wfn=True); fchk(wfn,'output.fchk'). The file will be written to the name passed to the fchk function.; Note that for MP2 and CCSD methods, the energy can be computed without; the expensive steps required to compute the density, so energy calls for these; methods will return a wavefunction that has the Hartree–Fock density. If a; density is required for these methods, the user should instead request a; gradient computation, to ensure that the density is updated appropriately:; grad, wfn = gradient('mp2', return_wfn=True); fchk(wfn,'output.fchk'). psi4.fchk(wfn, filename, *, debug=False, strict_label=True)[source]; Function to write wavefunction information in wfn to filename in; Gaussian FCHK format. New in version 0.6. Returns; None. Parameters. wfn (Wavefunction) – set of molecule, basis, orbitals from which to generate fchk file; filename (str) – destination file name for FCHK file; debug (bool) – returns a dictionary to aid with debugging; strict_label (bool) – If true set a density label compliant with what Gaussian would write. A warning will be printed if this is not possible.; Otherwise set the density label according to the method name. Notes. A description of the FCHK format is http://wild.life.nctu.edu.tw/~jsyu/compchem/g09/g09ur/f_formchk.htm; The allowed headers for methods are general and limited, i.e., “Total SCF|MP2|CI|CC Density”,; PSI4 will try to find the right one for the current calculation.",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/fchk-1.html:1370,update,updated,1370,psi4manual/1.4.0/fchk-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/fchk-1.html,5,['update'],['updated']
Deployability,"program to handle more; general CI wavefunctions which may be helpful in more challenging cases; such as highly strained molecules or bond breaking reactions. The CI; code is based on the fast, determinant-based string formalism; of Handy [Handy:1980]. It can solve for restricted active space; configuration interaction (RAS CI) wavefunctions as described by Olsen,; Roos, Jorgensen, and Aa. Jensen [Olsen:1988]. Excitation-class; selected multi-reference CI wavefunctions, such as second-order CI,; can be formulated as RAS CI’s. A RAS CI selects determinants for the; model space as those which have no more than holes in the lowest set; of orbitals (called RAS I) and no more than electrons in the highest; set of orbitals (called RAS III). An intermediate set of orbitals, if; present (RAS II), has no restrictions placed upon it. All determinants; satisfying these rules are included in the CI.; The DETCI module is also very efficient at computing full configuration; interaction; wavefunctions, and it is used in this capacity in the complete-active-space; self-consistent-field (CASSCF) code. Use of DETCI for CASSCF; wavefunctions is described in another section of this manual.; As just mentioned, the DETCI module is designed for challenging; chemical systems for which simple CISD is not suitable. Because; CI wavefunctions which go beyond CISD (such as RAS CI) are fairly complex,; typically the DETCI code will be used in cases where the; tradeoffs between computational expense and completeness of the; model space are nontrivial. Hence, the user is advised to develop; a good working knowledge of multi-reference and RAS CI methods before; attempting to use the program for a production-level project. This user’s; manual will provide only an elementary introduction to the most; important keywords. Additional information is available in the complete; list of keywords for DETCI provided in Appendix DETCI.; The division of the molecular orbitals into various subspaces such as; RAS ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/detci-1.html:2780,configurat,configuration,2780,psi4manual/1.0.0/detci-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/detci-1.html,10,['configurat'],['configuration']
Deployability,"properties may be requested, as in the example above. Note that, due to Python; syntax restrictions, the title argument must appear after the list of; properties to compute. The available properties are shown in the table below. Current one-electron property capabilities of PSI4. Feature; Keyword; Notes. Electric dipole moment; DIPOLE;  . Electric quadrupole moment; QUADRUPOLE; Raw (traced) moments and traceless multipoles. All moments up order N; MULTIPOLE(N); Only raw (traced) moments. Sets global variables e.g. “DIPOLE X”, “32-POLE XYYZZ”. Transition dipole moment; TRANSITION_DIPOLE;  . Transition quadrupole moment; TRANSITION_QUADRUPOLE;  . Electrostatic potential, at nuclei; ESP_AT_NUCLEI; Sets global variables “ESP AT CENTER n”, n = 1 to natoms. Molecular orbital extents; MO_EXTENTS;  . Mulliken atomic charges; MULLIKEN_CHARGES;  . Löwdin atomic charges; LOWDIN_CHARGES;  . Wiberg bond indices; WIBERG_LOWDIN_INDICES; Uses (Löwdin) symmetrically orthogonalized orbitals. Mayer bond indices; MAYER_INDICES;  . Natural orbital occupations; NO_OCCUPATIONS;  . Basic Keywords¶; Multipole moments may be computed at any origin, which is controlled by the; global PROPERTIES_ORIGIN keyword. The keyword takes an array with; the following possible values:. Allowed origin specifications. Keyword; Interpretation. [x, y, z]; Origin is at the coordinates, in the same units as the geometry specification. [“COM”]; Origin is at the center of mass. [“NUCLEAR_CHARGE”]; Origin is at the center of nuclear charge. Table Of Contents. Evaluation of One-Electron Properties; Basic Keywords. Previous topic; Geometry Optimization; Next topic; Psithon Functions: Invoking a Calculation; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Theoretical Methods: SCF to FCI ». © Copyright 2012, The Psi4 Project.; Last updated on Oct 16, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/oeprop-1.html:2748,update,updated,2748,psi4manual/4.0b3/oeprop-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/oeprop-1.html,2,['update'],['updated']
Deployability,"prove convergence, it does change the DCFT energy. Type: double; Default: 0.0. IGNORE_TAU¶. Controls whether to ignore terms containing non-idempotent contribution to OPDM or not (for debug puproses only). For practical applications only the default must be used. Type: boolean; Default: false. INTS_TOLERANCE¶. Minimum absolute value below which integrals are neglected. Type: conv double; Default: 1e-14. MO_RELAX¶. Controls whether to relax the orbitals during the energy computation or not (for debug puproses only). For practical applications only the default must be used. Type: boolean; Default: true. ORBITAL_LEVEL_SHIFT¶. The shift applied to the denominator in the orbital update iterations. Type: double; Default: 0.0. RELAX_GUESS_ORBITALS¶. Controls whether to relax the guess orbitals by taking the guess density cumulant and performing orbital update on the first macroiteration (for ALOGRITHM = TWOSTEP only). Type: boolean; Default: false. RELAX_TAU¶. Controls whether to relax tau during the cumulant updates or not. Type: boolean; Default: true. STABILITY_ADD_VECTORS¶. The number of vectors that can be added simultaneously into the subspace for Davidson’s diagonalization in stability check. Type: integer; Default: 20. STABILITY_AUGMENT_SPACE_TOL¶. The value of the rms of the residual in Schmidt orthogonalization which is used as a threshold for augmenting the vector subspace in stability check. Type: conv double; Default: 0.1. STABILITY_CHECK¶. Performs stability analysis of the DCFT energy. Type: boolean; Default: false. STABILITY_CONVERGENCE¶. Controls the convergence of the Davidson’s diagonalization in stability check. Type: conv double; Default: 1e-4. STABILITY_MAX_SPACE_SIZE¶. The maximum size of the subspace for the stability check. The program will terminate if this parameter is exceeded and the convergence (STABILITY_CONVERGENCE) is not satisfied. Type: integer; Default: 200. STABILITY_N_EIGENVALUES¶. The number of Hessian eigenvalues computed during the ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodir_options_c/module__dcft-1.html:6161,update,updates,6161,psi4manual/1.0.0/autodir_options_c/module__dcft-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodir_options_c/module__dcft-1.html,6,['update'],['updates']
Deployability,"provided from the Psi library. cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies. cc29; CCSD/cc-pVDZ optical rotation calculation (both gauges) on Cartesian H2O2. dfmp2-grad3; DF-MP2 cc-pVDZ gradients for the H2O molecule. opt12; SCF cc-pVDZ geometry optimzation of ketene, starting from bent structure. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the state of the CN radical, with Cartesian input. gdma1; Water RHF/cc-pVTZ distributed multipole analysis. cc47; EOM-CCSD/cc-pVDZ on H2O2 with two excited states in each irrep. props2; DF-SCF cc-pVDZ of benzene-hydronium ion, scanning the dissociation coordinate with Python’s built-in loop mechanism. The geometry is specified by a Z-matrix with dummy atoms, fixed parameters, updated parameters, and separate charge/multiplicity specifiers for each monomer. One-electron properties computed for dimer and one monomer. cepa0-grad2; CEPA cc-pVDZ gradient for the NO radical. dcft3; DC-06 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the AO Basis, using integrals stored on disk. cc2; 6-31G** H2O CCSD optimization by energies, with Z-Matrix input. cc6; Frozen-core CCSD(T)/cc-pVDZ on C4H4N anion with disk ao algorithm. dfomp2p5-grad1; DF-OMP2.5 cc-pVDZ gradients for the H2O molecule. omp2-3; OMP2 cc-pVDZ energy for the NO radical. cc49; EOM-CC3(UHF) on CH radical with user-specified basis and properties for particular root. dcft7; DCFT calculation for the triplet O2 using ODC-06 and ODC-12 functionals. Only simultaneous algorithm is tested. cc48; reproduces dipole moments in J.F. Stanton’s “biorthogonal” JCP paper. pywrap-checkrun-rohf; This checks that al",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:22166,update,updated,22166,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,4,['update'],['updated']
Deployability,"provides; many of the benefits of integral-direct SCF algorithms, including no disk I/O,; low memory usage, and effective parallelization. Additionally, the; LINK implementation scales well with system size; while simultaneously providing a formally-exact computation of the; Exchange term. See Linear Exchange for more information. SNLINKAn algorithm based on the “seminumerical Linear Exchange” (sn-LinK); approach described in [Laqua:2020:1456], SNLINK is only available if PSI4; is compiled with the GauXC library, described in [Williams-Young:2023:234104].; Algorithmically, SNLINK is very similar to COSX, differing primarily in screening of; the analytic 3-center integrals. In terms of implementation, SNLINK is more efficient,; owing to more highly-optimized integral contraction kernels; and supports execution; on Graphics Processing Units (GPUs). See Seminumerical Linear Exchange for more information. In some cases the above algorithms have multiple implementations that return; the same result, but are optimal under different molecules sizes and hardware; configurations. Psi4 will automatically detect the correct algorithm to run and; only expert users should manually select the below implementations. The DF; algorithm has the following two implementations. MEM_DFA DF algorithm optimized around memory layout and is optimal as long as; there is sufficient memory to hold the three-index DF tensors in memory. This; algorithm may be faster for builds that require disk if SSDs are used. DISK_DFA DF algorithm (the default DF algorithm before Psi4 1.2) optimized to; minimize Disk IO by sacrificing some performance due to memory layout. Note that these algorithms have both in-memory and on-disk options, but; performance penalties up to a factor of 2.5 can be found if the incorrect; algorithm is chosen. It is therefore highly recommended that the keyword “DF”; be selected in all cases so that the correct implementation can be selected by; PSI4‘s internal routines. Expert user",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/scf.html:31074,configurat,configurations,31074,psi4manual/master/scf.html,https://psicode.org,https://psicode.org/psi4manual/master/scf.html,1,['configurat'],['configurations']
Deployability,"ps://pydantic-docs.helpmanual.io/# (transitive dependency of QCElemental); SciPy https://scipy.org/ (avoidable if necessary by following directions in runtime error message). Dropped Dependencies:. Boost (September 2016; dropped by v1.1); deepdiff https://github.com/seperman/deepdiff (May 2019; dropped by v1.4); MPFR https://www.mpfr.org/ (Mar 2022; dropped by v1.6) no longer needed to compile against Libint2; Perl for testing (April 2022; dropped by v1.6). What are the add-on capabilities for Psi4 and what are their dependencies¶; Each of the items below is an independent additional capability that can; be built with PSI4. Sub-items below are the respective additional; dependencies of the add-on. Select which, if any, you want, and examine; the links for appropriate enabling arguments to cmake. Note that many; are available pre-built from conda. PSI4 Testing. CTest https://cmake.org/download/; pytest (for installed testing) http://doc.pytest.org/en/latest/; pytest-xdist (for installed testing many tests at once) https://github.com/pytest-dev/pytest-xdist. PSI4 Documentation (available pre-built at psicode.org/psi4manual/master/index.html). Sphinx (3.5+) http://sphinx-doc.org; Perl (for some auto-documentation scripts) https://www.perl.org/; nbsphinx (for converting Jupyter notebooks) http://nbsphinx.readthedocs.io/en/jupyter-theme/; sphinx-psi-theme https://github.com/psi4/sphinx-psi-theme; See [“message” lines] :source:`doc/sphinxman/CMakeLists.txt for advice on obtaining docs dependencies; See psi4/.github/workflows/docs.yml for full docs building procedure to follow. Ambit — https://github.com/jturney/ambit; CheMPS2 — [what is CheMPS2?] [CheMPS2 min version]. HDF5 https://support.hdfgroup.org/HDF5/; zlib http://www.zlib.net/. ecpint — [what is ecpint?] [ecpint min version]; dkh — [what is dkh?] [dkh min version]. Fortran Compiler. gdma — [what is gdma?] [gdma min version]. Fortran Compiler. PCMSolver — [what is PCMSolver?]. Fortran Compiler; zlib http://www.zlib.",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/build_planning.html:6661,install,installed,6661,psi4manual/1.6.x/build_planning.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/build_planning.html,1,['install'],['installed']
Deployability,"psi4 ""$(dirname $(which psi4))""/../share/psi4/samples/sapt1/test.in # test installation. works b/c PSI_SCRATCH defaults to /tmp. That last command tested that psi4 is in your path, and it’s finding; all the libraries it needs. Now you need only specify a scratch directory; (see Scratch Files and Elementary Restart) by replacing the placeholder in the following:; >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!. Note; Above commands use bash for installation and set up your environment for bash at runtime. To use csh at runtime, follow the on-screen directions at the end of the installation or consult step 7 below. Detailed Installation of Miniconda¶. Sanity check. If you already have Miniconda or Anaconda, skip to step 5. The whole installation takes ~5 min; reading this page takes far longer.; Get bzip2. You’ll need this slightly exotic command so run which to test for availability, and install from yum, source, etc. if unavailable. You’ll also need an internet connection for downloading; computers behind a firewall or with restricted login domains are eligible. So long as you can ssh into the computer to an account with write permissions and can connect to the internet from the computer, all is well. # check; >>> which bzip2; /usr/bin/bzip2; >>> curl -O ""http://psicode.org/psi4manual/master/introduction.html""; >>> ls -1; introduction.html. Get Miniconda installer script. Either issue the command below or download from http://conda.pydata.org/miniconda.html by clicking on the appropriate link for your OS. If you already have or would prefer to use Anaconda rather than Miniconda, that’s fine. Locate or install Anaconda, check that conda is in your path, and skip to step 4. >>> curl -O ""http://repo.continuum.io/miniconda/Miniconda-latest-Linux-x86_64.sh""; # check; >>> ls -1; Miniconda-latest-Linux-x86_64.sh. Install Miniconda. Execute the scri",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/conda-1.html:13798,install,install,13798,psi4manual/1.2.1/conda-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/conda-1.html,8,['install'],['install']
Deployability,"psi4.core.JK. clear_D_prev(self: psi4.core.DFJCOSK) → None¶; Clear previous D matrices. compute(self: psi4.core.JK) → None¶. finalize(self: psi4.core.JK) → None¶. get_early_screening(self: psi4.core.JK) → bool¶; Use severe screening techniques? Useful in early SCF iterations. get_omega(self: psi4.core.JK) → float¶; Dampening term for range separated DFT. get_omega_alpha(self: psi4.core.JK) → float¶; Weight for HF exchange term in range-separated DFT. get_omega_beta(self: psi4.core.JK) → float¶; Weight for dampened exchange term in range-separated DFT. get_wcombine(self: psi4.core.JK) → bool¶; wcombine. initialize(self: psi4.core.JK) → None¶. memory_estimate(self: psi4.core.JK) → int¶. name(self: psi4.core.JK) → str¶. print_header(self: psi4.core.JK) → None¶; docstring. set_cutoff(self: psi4.core.JK, arg0: float) → None¶. set_do_J(self: psi4.core.JK, arg0: bool) → None¶. set_do_K(self: psi4.core.JK, arg0: bool) → None¶. set_do_wK(self: psi4.core.JK, arg0: bool) → None¶. set_early_screening(self: psi4.core.JK, early_screening: bool) → None¶; Use severe screening techniques? Useful in early SCF iterations. set_memory(self: psi4.core.JK, arg0: int) → None¶. set_omega(self: psi4.core.JK, omega: float) → None¶; Dampening term for range separated DFT. set_omega_alpha(self: psi4.core.JK, alpha: float) → None¶; Weight for HF exchange term in range-separated DFT. set_omega_beta(self: psi4.core.JK, beta: float) → None¶; Weight for dampened exchange term in range-separated DFT. set_omp_nthread(self: psi4.core.JK, arg0: int) → None¶. set_print(self: psi4.core.JK, arg0: int) → None¶. set_wcombine(self: psi4.core.JK, wcombine: bool) → None¶; Are Exchange terms in one Matrix. wK(self: psi4.core.JK) → List[psi4.core.Matrix]¶. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.6;  · . PSI4. PSI4 API: Linking C++ and Python; DFJCOSK. © Copyright 2022, The Psi4 Project.; Last updated on Thursday, 19 May 2022 08:57PM.; Created using Sphinx 4.5.0.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/api/psi4.core.DFJCOSK.html:4938,update,updated,4938,psi4manual/1.6.x/api/psi4.core.DFJCOSK.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/api/psi4.core.DFJCOSK.html,1,['update'],['updated']
Deployability,"psi4.core.Matrix) → None¶; Returns the requested internal array. set_basisset(self: psi4.core.Wavefunction, arg0: str, arg1: psi4.core.BasisSet) → None¶; Sets the requested auxiliary basis. set_frequencies(self: psi4.core.Wavefunction, arg0: psi4.core.Vector) → None¶; Sets the frequencies of the Hessian. set_gradient(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None¶; Sets the Wavefunctions gradient. set_hessian(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None¶; Sets the Wavefunctions Hessian. set_name(self: psi4.core.Wavefunction, arg0: str) → None¶; Sets the level of theory this wavefunction corresponds to. set_oeprop(self: psi4.core.Wavefunction, arg0: psi4.core.OEProp) → None¶; Associate an OEProp object with this wavefunction. set_print(self: psi4.core.Wavefunction, arg0: int) → None¶; Sets the print level of the Wavefunction. set_reference_wavefunction(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; docstring. set_sad_basissets(self: psi4.core.HF, arg0: List[psi4.core.BasisSet]) → None¶; Sets the Superposition of Atomic Densities basisset. set_sad_fitting_basissets(self: psi4.core.HF, arg0: List[psi4.core.BasisSet]) → None¶; Sets the Superposition of Atomic Densities density-fitted basisset. set_variable(self: psi4.core.Wavefunction, arg0: str, arg1: float) → None¶; Sets the requested internal variable. shallow_copy(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; Copies the pointers to the internal data. sobasisset(self: psi4.core.Wavefunction) → psi4.core.SOBasisSet¶; Returns the symmetry orbitals basis. soccpi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of singly occupied orbitals per irrep. variables(self: psi4.core.Wavefunction) → Dict[str, float]¶; Returns the map of all internal variables. Navigation. Index. modules    .    .  · ; 1.1;  · . PSI4. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/api/psi4.core.cuhf.html:9487,update,updated,9487,psi4manual/1.1.0/api/psi4.core.cuhf.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/api/psi4.core.cuhf.html,4,['update'],['updated']
Deployability,"psi4.core.Matrix) → float; docstring. symmetrize_gradient(self: psi4.core.Matrix, arg0: psi::Molecule) → None; docstring. symmetry(self: psi4.core.Matrix) → int; docstring. to_array(matrix, copy=True, dense=False); Converts a Psi4 Matrix or Vector to a numpy array. Either copies the data or simply; consturcts a view. Parameters:; matrix (Matrix or Vector) – Pointers to which Psi4 core class should be used in the construction.; copy (bool) – Copy the data if True, return a view otherwise; dense (bool) – Converts irreped Psi4 objects to diagonally blocked dense arrays. Returns a list of arrays otherwise. Returns:array – Returns either a list of np.array’s or the base array depending on options. Return type:np.array or list of of np.array. Notes; This is a generalized function to convert a Psi4 object to a NumPy array; Examples; 1; 2; 3; 4; 5>>> data = psi4.Matrix(3, 3); >>> data._to_array(); [[ 0. 0. 0.]; [ 0. 0. 0.]; [ 0. 0. 0.]]. to_serial(data); Converts an object with a .nph accessor to a serialized dictionary. trace(self: psi4.core.Matrix) → float; docstring. transform(*args, **kwargs); Overloaded function. transform(self: psi4.core.Matrix, arg0: psi4.core.Matrix) -> None. docstring. transform(self: psi4.core.Matrix, arg0: psi4.core.Matrix, arg1: psi4.core.Matrix) -> None. docstring. transform(self: psi4.core.Matrix, arg0: psi4.core.Matrix) -> None. docstring. triplet(self: psi4.core.Matrix, arg0: psi4.core.Matrix, arg1: psi4.core.Matrix, arg2: bool, arg3: bool, arg4: bool) → psi4.core.Matrix; docstring. vector_dot(self: psi4.core.Matrix, arg0: psi4.core.Matrix) → float; docstring. zero(self: psi4.core.Matrix) → None; docstring. zero_diagonal(self: psi4.core.Matrix) → None; docstring. zero_lower(self: psi4.core.Matrix) → None; docstring. zero_upper(self: psi4.core.Matrix) → None; docstring. Navigation. Index. modules    .    .  · ; 1.1;  · . PSI4. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/api/psi4.core.matrix.html:16967,update,updated,16967,psi4manual/1.1.0/api/psi4.core.matrix.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/api/psi4.core.matrix.html,1,['update'],['updated']
Deployability,"psi4.core.Molecule, arg0: int) → None; Sets the specified fragment arg2 to be Ghost. set_ghost_fragments(self: psi4.core.Molecule, arg0: list) → None; Sets the specified list arg2 of fragments to be Ghost. set_mass(self: psi4.core.Molecule, arg0: int, arg1: float) → None; Gets mass of atom arg1. set_molecular_charge(self: psi4.core.Molecule, arg0: int) → None; Sets the molecular charge. set_multiplicity(self: psi4.core.Molecule, arg0: int) → None; Sets the multiplicity (defined as 2Ms + 1). set_name(self: psi4.core.Molecule, arg0: str) → None; Sets molecule name. set_point_group(self: psi4.core.Molecule, arg0: psi4.core.PointGroup) → None; Sets the molecular point group to the point group object arg2. set_variable(self: psi4.core.Molecule, arg0: str, arg1: float) → None; Assigns the value arg3 to the variable arg2 in the list of geometry variables, then calls update_geometry(). symbol(self: psi4.core.Molecule, arg0: int) → str; Gets the cleaned up label of atom arg1 (C2 => C, H4 = H) (0-indexed). symmetrize(self: psi4.core.Molecule, arg0: float) → None; Finds the highest point Abelian point group within the specified tolerance, and forces the geometry to have that symmetry. translate(self: psi4.core.Molecule, arg0: psi4.core.Vector3) → None; Translates molecule by arg1. units; Units (Angstrom or Bohr) used to define the geometry. update_geometry(self: psi4.core.Molecule) → None; Reevaluates the geometry with current variable values, orientation directives, etc. Must be called after initial Molecule definition by string. x(self: psi4.core.Molecule, arg0: int) → float; x position of atom arg1 (0-indexed in Bohr). y(self: psi4.core.Molecule, arg0: int) → float; y position of atom arg1 (0-indexed in Bohr). z(self: psi4.core.Molecule, arg0: int) → float; z position of atom arg1 (0-indexed in Bohr). Navigation. Index. modules    .    .  · ; 1.1;  · . PSI4. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/api/psi4.core.molecule.html:32724,update,updated,32724,psi4manual/1.1.0/api/psi4.core.molecule.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/api/psi4.core.molecule.html,1,['update'],['updated']
Deployability,"psi4.core.Options, arg0: str, arg1: str, arg2: str) → None¶; add string option. get_bool(self: psi4.core.Options, arg0: str) → bool¶; get boolean option. get_current_module(self: psi4.core.Options) → str¶; gets current module. get_double(self: psi4.core.Options, arg0: str) → float¶; get double option. get_int(self: psi4.core.Options, arg0: str) → int¶; get integer option. get_int_vector(self: psi4.core.Options, arg0: str) → List[int]¶; get int vector option. get_str(*args, **kwargs)¶; Overloaded function. get_str(self: psi4.core.Options, arg0: str) -> str. get string option. get_str(self: psi4.core.Options, arg0: str) -> str. get string option. print_global_options(self: psi4.core.Options) → None¶; print the global, cross-module options. print_module_options(self: psi4.core.Options) → None¶; print global and local options prepared for current module. read_globals(self: psi4.core.Options) → bool¶; expert. set_array(self: psi4.core.Options, arg0: str, arg1: str) → None¶; set array option. set_bool(self: psi4.core.Options, arg0: str, arg1: str, arg2: bool) → None¶; set bool option. set_current_module(self: psi4.core.Options, arg0: str) → None¶; sets arg0 (all CAPS) as current module. set_double(self: psi4.core.Options, arg0: str, arg1: str, arg2: float) → None¶; set double option. set_int(self: psi4.core.Options, arg0: str, arg1: str, arg2: int) → None¶; set int option. set_read_globals(self: psi4.core.Options, arg0: bool) → None¶; expert. set_str(self: psi4.core.Options, arg0: str, arg1: str, arg2: str) → None¶; set string option. set_str_i(self: psi4.core.Options, arg0: str, arg1: str, arg2: str) → None¶; set string option. validate_options(self: psi4.core.Options) → None¶; validate options for arg0 module. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. PSI4 API: Linking C++ and Python; Options. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/api/psi4.core.options.html:3687,update,updated,3687,psi4manual/1.4.0/api/psi4.core.options.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/api/psi4.core.options.html,1,['update'],['updated']
Deployability,"psi4.core.Options, arg0: str, arg1: str, arg2: str) → None¶; add string option. get_bool(self: psi4.core.Options, arg0: str) → bool¶; get boolean option. get_current_module(self: psi4.core.Options) → str¶; gets current module. get_double(self: psi4.core.Options, arg0: str) → float¶; get double option. get_int(self: psi4.core.Options, arg0: str) → int¶; get integer option. get_int_vector(self: psi4.core.Options, arg0: str) → List[int]¶; get int vector option. get_str(*args, **kwargs)¶; Overloaded function. get_str(self: psi4.core.Options, arg0: str) -> str. get string option. get_str(self: psi4.core.Options, arg0: str) -> str. get string option. print_global_options(self: psi4.core.Options) → None¶; print the global, cross-module options. print_module_options(self: psi4.core.Options) → None¶; print global and local options prepared for current module. read_globals(self: psi4.core.Options) → bool¶; expert. set_array(self: psi4.core.Options, arg0: str, arg1: str) → None¶; set array option. set_bool(self: psi4.core.Options, arg0: str, arg1: str, arg2: bool) → None¶; set bool option. set_current_module(self: psi4.core.Options, arg0: str) → None¶; sets arg0 (all CAPS) as current module. set_double(self: psi4.core.Options, arg0: str, arg1: str, arg2: float) → None¶; set double option. set_int(self: psi4.core.Options, arg0: str, arg1: str, arg2: int) → None¶; set int option. set_read_globals(self: psi4.core.Options, arg0: bool) → None¶; expert. set_str(self: psi4.core.Options, arg0: str, arg1: str, arg2: str) → None¶; set string option. set_str_i(self: psi4.core.Options, arg0: str, arg1: str, arg2: str) → None¶; set string option. validate_options(self: psi4.core.Options) → None¶; validate options for arg0 module. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. PSI4 API: Linking C++ and Python; Options. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/api/psi4.core.options.html:3687,update,updated,3687,psi4manual/1.5.0/api/psi4.core.options.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/api/psi4.core.options.html,1,['update'],['updated']
Deployability,"psi4.core.VBase, arg0: List[psi4.core.Matrix], arg1: List[psi4.core.Matrix]) → None¶; doctsring. compute_gradient(self: psi4.core.VBase) → psi4.core.Matrix¶; Compute the DFT nuclear gradient contribution. compute_hessain(self: psi4.core.VBase) → psi4.core.Matrix¶; Compute the DFT nuclear Hessian contribution. finalize(*args, **kwargs)¶; Overloaded function. finalize(self: psi4.core.VBase) -> None. doctsring. finalize(self: psi4.core.VBase) -> None. Finalizes the V object. functional(self: psi4.core.VBase) → psi4.core.SuperFunctional¶; Returns the interal superfunctional. get_block(self: psi4.core.VBase, arg0: int) → psi4.core.BlockOPoints¶; Returns the requested BlockOPoints. get_np_xyzw()¶; Returns the x, y, z, and weights of a grid as a tuple of NumPy array objects. Parameters:; self (VBase) – VBase instance. Return type:; Tuple[ndarray, ndarray, ndarray, ndarray]. grid(self: psi4.core.VBase) → psi4.core.DFTGrid¶; Returns the grid object. initialize(*args, **kwargs)¶; Overloaded function. initialize(self: psi4.core.VBase) -> None. doctsring. initialize(self: psi4.core.VBase) -> None. Initializes the V object. nblocks(self: psi4.core.VBase) → int¶; Total number of blocks. print_header(self: psi4.core.VBase) → None¶; Prints the objects header. properties(self: psi4.core.VBase) → List[psi4.core.PointFunctions]¶; Returns the properties computer. quadrature_values(self: psi4.core.VBase) → Dict[str, float]¶; Returns the quadrature values. set_D(self: psi4.core.VBase, arg0: List[psi4.core.Matrix]) → None¶; Sets the internal density. set_debug(self: psi4.core.VBase, arg0: int) → None¶; Sets the debug level of the object. set_print(self: psi4.core.VBase, arg0: int) → None¶; Sets the print level of the object. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; VBase. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/api/psi4.core.VBase.html:3925,update,updated,3925,psi4manual/1.7.x/api/psi4.core.VBase.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.VBase.html,1,['update'],['updated']
Deployability,"psi4.core.Wavefunction, arg0: float) → None¶; Sets the Wavefunction’s energy. set_external_potential(self: psi4.core.Wavefunction, arg0: psi4.core.ExternalPotential) → None¶; Sets the requested external potential. set_frequencies(val)¶. set_gradient(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None¶; Sets the Wavefunction’s gradient. set_hessian(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None¶; Sets the Wavefunction’s Hessian. set_legacy_frequencies(self: psi4.core.Wavefunction, arg0: psi4.core.Vector) → None¶; Sets the frequencies of the Hessian. set_name(self: psi4.core.Wavefunction, arg0: str) → None¶; Sets the level of theory this wavefunction corresponds to. set_print(self: psi4.core.Wavefunction, arg0: int) → None¶; Sets the print level of the Wavefunction. set_reference_wavefunction(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; docstring. set_scalar_variable(self: psi4.core.Wavefunction, arg0: str, arg1: float) → None¶; Sets the requested (case-insensitive) double QC variable. set_variable(key, val)¶. shallow_copy(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; Copies the pointers to the internal data. sobasisset(self: psi4.core.Wavefunction) → psi4.core.SOBasisSet¶; Returns the symmetry orbitals basis. soccpi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of singly occupied orbitals per irrep. to_file(filename=None)¶; Converts a Wavefunction object to a base class. Parameters:; wfn (Wavefunction) – A Wavefunction or inherited class; filename (None, optional) – An optional filename to write the data to. Returns:A dictionary and NumPy representation of the Wavefunction. Return type:dict. variable(key)¶. variables()¶. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/api/psi4.core.dfep2wavefunction.html:11557,update,updated,11557,psi4manual/1.3.2/api/psi4.core.dfep2wavefunction.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.dfep2wavefunction.html,2,['update'],['updated']
Deployability,"psi4.driver.driver_findif.FiniteDifferenceComputer`, :class:`~psi4.driver.driver_nbody.ManyBodyComputer`) task object. Layered objects contain many and multiple types of computers in a graph. """""". # Only pull the changed options; keywords = p4util.prepare_options_for_set_options(). keywords[""function_kwargs""] = {}; if ""external_potentials"" in kwargs:; keywords[""function_kwargs""].update({""external_potentials"": kwargs.pop(""external_potentials"")}). # Need to add full path to pcm file; if ""PCM__PCMSOLVER_PARSED_FNAME"" in keywords.keys():; fname = keywords[""PCM__PCMSOLVER_PARSED_FNAME""]; keywords[""PCM__PCMSOLVER_PARSED_FNAME""] = os.path.join(os.getcwd(), fname). # Pull basis out of kwargs, override globals if user specified; basis = kwargs.pop(""basis"", keywords.pop(""BASIS"", ""(auto)"")); method = method.lower(). # Expand CBS methods; method, basis, cbsmeta = expand_cbs_methods(method, basis, driver, **kwargs); if method in composite_procedures:; kwargs.update({'cbs_metadata': composite_procedures[method](**kwargs)}); method = 'cbs'. pertinent_findif_kwargs = ['findif_irrep', 'findif_stencil_size', 'findif_step_size', 'findif_verbose']; current_findif_kwargs = {kw: kwargs.pop(kw) for kw in pertinent_findif_kwargs if kw in kwargs}; # explicit: 'findif_mode'. # Build a packet; packet = {""molecule"": molecule, ""driver"": driver, ""method"": method, ""basis"": basis, ""keywords"": keywords}. # First check for BSSE type; if kwargs.get(""bsse_type"", None) is not None:; levels = kwargs.pop('levels', None). plan = ManyBodyComputer(**packet, **kwargs); original_molecule = packet.pop(""molecule""). # Add tasks for every nbody level requested; if levels is None:; levels = {plan.max_nbody: method}; else:; # rearrange bodies in order with supersystem last lest body count fail in organization loop below; levels = dict(sorted(levels.items(), key=lambda item: 1000 if item[0] == ""supersystem"" else item[0])). # We define cp as being a correction to only interaction energies; # If only doing cp, we need ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/task_planner.html:4904,update,update,4904,psi4manual/1.7.x/_modules/psi4/driver/task_planner.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/task_planner.html,4,['update'],['update']
Deployability,"psi4.hessian(name[, molecule, return_wfn, func, dertype, irrep])[source]¶; Function complementary to frequency(). Computes force; constants, deciding analytic, finite difference of gradients, or; finite difference of energies. Returns:Matrix – Total non-mass-weighted electronic Hessian in Hartrees/Bohr/Bohr. Returns:(Matrix, Wavefunction) – Hessian and wavefunction when return_wfn specified. Examples:. 1; 2>>> # [1] Frequency calculation without thermochemical analysis; >>> hessian('mp3'). 1; 2; 3; 4; 5; 6>>> # [2] Frequency calc w/o thermo analysis getting the Hessian; >>> # in file, core.Matrix, and np.array forms; >>> set hessian_write on; >>> H, wfn = hessian('ccsd', return_wfn=True); >>> wfn.hessian().print_out(); >>> np.array(H). Visualization of Normal Modes¶; PSI4 has the ability to export a Molden file that stores information about; the harmonic frequencies and normal modes computed via frequency().; This feature can be enabled by setting the option |globals__normal_modes_write| to true.; The filename of the Molden file ends in .molden_normal_modes, and the prefix is; determined by WRITER_FILE_LABEL (if set), or else by the name of the; output file plus the name of the current molecule.; The normal coordinates saved in the Molden file are normalized and are not; mass weighted. Molden Interface Keywords¶. WRITER_FILE_LABEL¶. Base filename for text files written by PSI, such as the MOLDEN output file, the Hessian file, the internal coordinate file, etc. Use the add_str_i function to make this string case sensitive. Type: string; Default: No Default. table of contents. Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); Visualization of Normal Modes; Molden Interface Keywords; WRITER_FILE_LABEL. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Psithon Functions: Invoking a Calculation. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/freq-1.html:5744,update,updated,5744,psi4manual/1.1.0/freq-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/freq-1.html,2,['update'],['updated']
Deployability,"psi4/releases/tags/v1.8.2 (substituting tag) and note the id; field value.; Copy and edit a new file akin to content/posts/v182.md. Add it to the git index. e.g., v1.8.2 is used for Title and Release Notes.; e.g., 1.8.x is used for Documentation and Source.; e.g., v182 (edition string) is used for Image and Installers.; Use the id value in the shortcode call at the bottom near ghRN. Add a new release page to the psi4_release_fireworks.key Keynote presentation. Run the slide; transition and screenshot the fireworks. Open the PNG file in Preview and save as JPEG while; downsampling to ~400kB. Place the file at e.g., static/images/portfolio/fireworks_slide_v182.jpg.; Add it to the git index.; Edit data/portfolio.yml to add a new block for the release (order matters).; Include these changes in a PR. Check the generated preview if needed. Merge the PR yourself or ask; for it to be merged. Finalize release¶. Make new PR with; * edits to main README.md badges, python versions, etc.; Tweet about release. Misc.¶. Consider rebuilding the PSI4 binder image.; If you want to do trial conda builds from a maintenance branch w/o pushing the tag, requires; source/git_tag: 1.3.x and fake package/version: v1.3.1rc1. table of contents. Release Procedures; Annual; Pre-Release (e.g., v1.3rc1); Release (e.g., v1.3); Post-Release (e.g., v1.8.2); On January first; Update copyright year; Update counter scripts; Update samples; Collect new authors; Run long tests; Anticipate next release; Build Conda ecosystem stack; Assemble postrelease changes; Tweak Conda for postrelease; Do final pass before release tag; Tag (pre)release; Tag postrelease; Initialize release branch; Build extra Conda packages for Psi4 channel; Build Psi4conda set; Build Docker images; Generate download page for psicode.org; Collect documentation snapshot; Publish GitHub release; Publish GitHub postrelease; Publish psicode.org release; Finalize release; Misc. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/manage_release.html:24257,release,release,24257,psi4manual/1.9.x/manage_release.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/manage_release.html,2,['release'],['release']
Deployability,"pstream development. Sometimes, you’re the one; doing that development, and you need the CMake superbuild to pull source; from a local path rather than the approved codeset.; Find the CMakeLists.txt governing the target Add-On in; psi4/external and make changes analogous to the below:; #GIT_REPOSITORY https://github.com/jturney/ambit; #GIT_TAG 1.0; DOWNLOAD_COMMAND """"; SOURCE_DIR ""/path/to/ambit-directclone"". If you’re changing the PSI4 repo codebase between compiles, there’s; nothing more to do as CMake will handle the code rebuild deps for you.; If you’re changing the local Add-On repo codebase between compiles,; CMake does not know when libaddon.[a|so|dylib] needs rebuilding. It; is recommended that the PSI4 build be initially configured with; -DBUILD_SHARED_LIBS=ON (easier to notice changes). And to trigger; Add-On library rebuild, rm -rf {objdir}/external/upstream/addon/; and rm -rf {objdir}/stage/share/cmake/AddOn. This should; re-clone the Add-On, rebuild and install it, rebuild any parts of; PSI4 that interface to it, and relink the main core.so.; If you’re modifying the Add-On’s file or directory structure, be; smart and rm all traces of it within {objdir}/stage/,; especially any *.pyc files.; Alternatively and preferentially to the above, you can instead build and install the; Add-On library yourself, external to the PSI4 repository. This; is especially useful if you want to avoid full recompiles of the; Add-On at each change to the Add-On’s source. Build the Add-On; library dynamically (-DBUILD_SHARED_LIBS=ON) and mind any; “Psi4 wants” in the Add-On’s top-level CMakeLists.txt. Install the; Add-On and note the full path to AddOnConfig.cmake. Pass; the path containing that file to PSI4‘s CMake as; -DAddon_DIR=/path/to/config/usually/ending/in/share/cmake/AddON; and build PSI4. The main core.so should be dynamically linked; to your dev AddOn dynamic lib and update automatically when you rebuild; the AddOn lib. Naturally, you may need to delete core.so and re",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/build_planning-1.html:58372,install,install,58372,psi4manual/1.4.0/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/build_planning-1.html,9,['install'],['install']
Deployability,"pt_dertype)). # 3. if the user provides a custom function THAT takes precendence; if ('opt_func' in kwargs) or ('func' in kwargs):; if ('func' in kwargs):; kwargs['opt_func'] = kwargs['func']; del kwargs['func']; dertype = 0; func = kwargs['opt_func']. # Summary validation; if (dertype == 1) and (lowername in procedures['gradient']):; pass; elif (dertype == 0) and (func is energy) and (lowername in procedures['energy']):; pass; elif (dertype == 0) and not(func is energy):; pass; else:; raise ValidationError('Requested method \'name\' %s and derivative level \'dertype\' %s are not available.'; % (lowername, dertype)). # Make sure the molecule the user provided is the active one; if ('molecule' in kwargs):; activate(kwargs['molecule']); del kwargs['molecule']; molecule = PsiMod.get_active_molecule(); molecule.update_geometry(); PsiMod.set_global_option('BASIS', PsiMod.get_global_option('BASIS')). # S/R: Mode of operation- whether finite difference opt run in one job or files farmed out; opt_mode = 'continuous'; if ('mode' in kwargs) and (dertype == 0):; opt_mode = kwargs['mode']. if (opt_mode.lower() == 'continuous'):; pass; elif (opt_mode.lower() == 'sow'):; pass; elif (opt_mode.lower() == 'reap'):; if('linkage' in kwargs):; opt_linkage = kwargs['linkage']; else:; raise ValidationError('Optimize execution mode \'reap\' requires a linkage option.'); else:; raise ValidationError('Optimize execution mode \'%s\' not valid.' % (opt_mode)). # Does dertype indicate an analytic procedure both exists and is wanted?; if (dertype == 1):; # Nothing to it but to do it. Gradient information is saved; # into the current reference wavefunction; procedures['gradient'][lowername](lowername, **kwargs). if 'mode' in kwargs and kwargs['mode'].lower() == 'sow':; raise ValidationError('Optimize execution mode \'sow\' not valid for analytic gradient calculation.'); PsiMod.reference_wavefunction().energy(); return PsiMod.get_variable('CURRENT ENERGY'); else:; # If not, perform finite differen",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/_modules/driver.html:22571,continuous,continuous,22571,psi4manual/4.0b2/_modules/driver.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/_modules/driver.html,2,['continuous'],['continuous']
Deployability,"pt_dertype)). # 3. if the user provides a custom function THAT takes precendence; if ('opt_func' in kwargs) or ('func' in kwargs):; if ('func' in kwargs):; kwargs['opt_func'] = kwargs['func']; del kwargs['func']; dertype = 0; func = kwargs['opt_func']. # Summary validation; if (dertype == 1) and (lowername in procedures['gradient']):; pass; elif (dertype == 0) and (func is energy) and (lowername in procedures['energy']):; pass; elif (dertype == 0) and not(func is energy):; pass; else:; raise ValidationError('Requested method \'name\' %s and derivative level \'dertype\' %s are not available.'; % (lowername, dertype)). # Make sure the molecule the user provided is the active one; if ('molecule' in kwargs):; activate(kwargs['molecule']); del kwargs['molecule']; molecule = PsiMod.get_active_molecule(); molecule.update_geometry(); PsiMod.set_global_option('BASIS', PsiMod.get_global_option('BASIS')). # S/R: Mode of operation- whether finite difference opt run in one job or files farmed out; opt_mode = 'continuous'; if ('mode' in kwargs) and (dertype == 0):; opt_mode = kwargs['mode']. if (opt_mode.lower() == 'continuous'):; pass; elif (opt_mode.lower() == 'sow'):; pass; elif (opt_mode.lower() == 'reap'):; if('linkage' in kwargs):; opt_linkage = kwargs['linkage']; else:; raise ValidationError('Optimize execution mode \'reap\' requires a linkage option.'); else:; raise ValidationError('Optimize execution mode \'%s\' not valid.' % (opt_mode)). # Set method-dependent scf convergence criteria (test on procedures['energy'] since that's guaranteed); if not PsiMod.has_option_changed('SCF', 'E_CONVERGENCE'):; if procedures['energy'][lowername] == run_scf or procedures['energy'][lowername] == run_dft:; PsiMod.set_local_option('SCF', 'E_CONVERGENCE', 8); else:; PsiMod.set_local_option('SCF', 'E_CONVERGENCE', 10); if not PsiMod.has_option_changed('SCF', 'D_CONVERGENCE'):; if procedures['energy'][lowername] == run_scf or procedures['energy'][lowername] == run_dft:; PsiMod.set_local_opti",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/_modules/driver.html:32551,continuous,continuous,32551,psi4manual/4.0b4/_modules/driver.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html,1,['continuous'],['continuous']
Deployability,"ptions, part ii. cfour/sp-rhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qc2p on water with ecc, aobasis. cfour/psi-uhf-mp3; UHF MP3 energy components. Checks that converted identically between cfour and psi4. cfour/mp2-1; All-electron MP2 6-31G** geometry optimization of water. cfour/kw-1; testing best practices options, part i. cfour/sp-rohf-ccsd_t_; single-point CCSD(T)/qz2p on NH2. cfour/kw-5; Basis set spherical/Cartesian with basis and cfour_spherical. cfour/sp-rohf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/sp-uhf-ccsdt; single-point CCSDT/qz2p on NH2. cfour/sp-rohf-ccsd; single-point CCSD/qz2p on NH2. cfour/psi-rohf-scsmp2; ROHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/psi-rhf-scsmp2; MP2 energy components. Checks that computed identically between cfour and psi4. cfour/sp-rhf-ccsd_t_-fc; single-point CCSD(T)/qz2p on water with ecc, aobasis, and frozen-core. cfour/puream; Basis set spherical/Cartesian behavior in cfour. cfour/sp-uhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on NH2 with aobasis. cfour/psi-a24-grad; geometry after three optimization cycles on A24 database, cfour matches psi4. cfour/sp-uhf-ccsd; single-point CCSD/qz2p on NH2. cfour/sp-rhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on water with ecc module. cfour/sp-rhf-cc3; single-point CC3/qz2p on water. cfour/scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is apecified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Appendices; Test Suite and Sample Inputs; CFOUR. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodoc_testsuite_cfour-1.html:4847,update,updated,4847,psi4manual/1.4.0/autodoc_testsuite_cfour-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_testsuite_cfour-1.html,4,['update'],['updated']
Deployability,"ptions. Raises:; psi4.driver.p4util.exceptions.ValidationError – If any of DIIS options don’t play well together. Returns:; Whether some form of DIIS is enabled during SCF. Return type:; bool. table of contents. HF; HF; HF.MOM_excited_; HF.MOM_performed_; HF.attempt_number_; HF.diis_enabled_; HF.diis_manager_; HF.diis_start_; HF.frac_performed_; HF.initialized_diis_manager_; HF.iteration_; HF.iteration_energies; HF.reset_occ_; HF.sad_; HF.V_potential(); HF.Va(); HF.Vb(); HF.check_phases(); HF.clear_external_cpscf_perturbations(); HF.clear_external_potentials(); HF.compute_E(); HF.compute_energy(); HF.compute_fvpi(); HF.compute_initial_E(); HF.compute_orbital_gradient(); HF.compute_spin_contamination(); HF.cphf_Hx(); HF.cphf_converged(); HF.cphf_solve(); HF.damping_update(); HF.diis(); HF.finalize(); HF.finalize_energy(); HF.find_occupation(); HF.form_C(); HF.form_D(); HF.form_F(); HF.form_FDSmSDF(); HF.form_G(); HF.form_H(); HF.form_Shalf(); HF.form_V(); HF.form_initial_C(); HF.form_initial_F(); HF.frac_renormalize(); HF.functional(); HF.get_energies(); HF.guess(); HF.guess_Ca(); HF.guess_Cb(); HF.initialize(); HF.initialize_gtfock_jk(); HF.initialize_jk(); HF.iterations(); HF.jk(); HF.occupation_a(); HF.occupation_b(); HF.onel_Hx(); HF.print_energies(); HF.print_header(); HF.print_orbitals(); HF.print_preiterations(); HF.print_stability_analysis(); HF.push_back_external_potential(); HF.reset_occupation(); HF.rotate_orbitals(); HF.save_density_and_energy(); HF.scf_type(); HF.semicanonicalize(); HF.set_energies(); HF.set_external_cpscf_perturbation(); HF.set_jk(); HF.set_sad_basissets(); HF.set_sad_fitting_basissets(); HF.soscf_update(); HF.stability_analysis(); HF.twoel_Hx(); HF.validate_diis(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. PSI4 API: Linking C++ and Python; HF. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/api/psi4.core.HF.html:13163,update,updated,13163,psi4manual/master/api/psi4.core.HF.html,https://psicode.org,https://psicode.org/psi4manual/master/api/psi4.core.HF.html,1,['update'],['updated']
Deployability,"ptions: Overview and Not Otherwise Mentioned ###############. # <<< CMake build overview >>>; #; # >>> ls; # external/ COPYING psi4/ tests/ ...; # >>> cmake -S. -Bobjdir -DCMAKE_INSTALL_PREFIX=/path/to/install-psi4 ...; # ...; # -- Generating done; # -- Build files have been written to: /current/dir/objdir; # >>> cmake --build objdir --target install -j`getconf _NPROCESSORS_ONLN`. # <<< Required build dependencies that Psi4 can't build itself >>>; #; # - CMake (e.g., `conda install cmake`); # - C++ and C compilers (C++14 compliant); # - BLAS/LAPACK (also runtime; e.g., `conda install mkl-devel`); # - Python (also runtime; interpreter and headers; e.g., `conda install python`); # - NumPy (also runtime; avoidable at buildtime if gau2grid pre-built; e.g., `conda install numpy`); # - networkx >=2.4 (runtime only; e.g., `conda install networkx`); # - pint (runtime only; e.g., `conda install pint -c conda-forge`); # - pydantic >=1.0 (runtime only; e.g., `conda install pydantic -c conda-forge`); # - msgpack-python (runtime only; e.g., `conda install msgpack-python`); # - mpfr (for Libint2; e.g., `conda install mpfr`)); # - Eigen (for Libint2; e.g., `conda install eigen`). # These three ""### Options ###"" sections contain useful CMake variables for build configuration. # <<< Compilers and flags >>>; #; # - CMAKE_C_COMPILER ""C compiler""; # - CMAKE_C_FLAGS ""Additional C flags""; # - CMAKE_CXX_COMPILER ""C++ compiler""; # - CMAKE_CXX_FLAGS ""Additional C++ flags""; # - CMAKE_Fortran_COMPILER ""Fortran compiler (required for some add-ons)""; # - CMAKE_Fortran_FLAGS ""Additional Fortran flags"". # <<< Detecting dependencies and add-ons >>>; #; # - Python_EXECUTABLE ""Python interpreter to use (e.g., /path/to/bin/python3.7)""; # - Python_LIBRARY ""Python library that goes with the interpreter (e.g., /path/to/lib/python3.7.so)""; # - Python_INCLUDE_DIR ""Path to the python include files (e.g., /path/to/include/python3.7)""; # - SPHINX_ROOT ""Root directory for Sphinx: 'bin/sphinx-build' (or simila",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/build_planning-1.html:14398,install,install,14398,psi4manual/1.4.0/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/build_planning-1.html,4,['install'],['install']
Deployability,"ptype_value. # Drop out for unsupported calls; if ptype not in [""energy"", ""gradient"", ""hessian""]:; raise ValidationError(""%s: Cannot extrapolate or delta correct %s yet."" % (ptype.title(), ptype)). # Catch kwarg issues for CBS methods only; user_dertype = kwargs.pop('dertype', None); cbs_verbose = kwargs.pop('cbs_verbose', False). # If we are not a single call, let CBS wrapper handle it!; cbs_kwargs = {}; cbs_kwargs['ptype'] = ptype; cbs_kwargs['return_wfn'] = True; cbs_kwargs['molecule'] = molecule; cbs_kwargs['verbose'] = cbs_verbose. if user_dertype != None:; cbs_kwargs['dertype'] = user_dertype. # Find method and basis; metadata = []; if method_list[0] in ['scf', 'hf', 'c4-scf', 'c4-hf']:; stage = {}; stage['wfn'] = method_list[0]; stage['basis'] = basis_list[0]; if 'scf_scheme' in kwargs:; stage['scheme'] = kwargs.pop('scf_scheme'); stage['stage'] = ""scf""; stage['treatment'] = ""scf""; else:; # _validate_cbs_inputs will produce scf stage automatically; stage = {}; stage['wfn'] = method_list[0]; stage['basis'] = basis_list[0]; if 'corl_scheme' in kwargs:; stage['scheme'] = kwargs.pop('corl_scheme'); stage['stage'] = ""corl""; stage['treatment'] = ""corl""; metadata.append(stage). # ""method/basis"" syntax only allows for one delta correction; # via ""method/basis+D:delta/basis"". Maximum length of method_list is 2.; if len(method_list) == 2:; stage = {}; stage['wfn'] = method_list[1]; stage['basis'] = basis_list[1]; if 'delta_scheme' in kwargs:; stage['scheme'] = kwargs.pop('delta_scheme'); stage['stage'] = ""delta1""; stage['treatment'] = ""corl""; metadata.append(stage); ; cbs_kwargs[""cbs_metadata""] = metadata; ptype_value, wfn = cbs(func, label, **cbs_kwargs). if return_wfn:; return (ptype_value, wfn); else:; return ptype_value. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .  · ; 1.4;  · . PSI4. Module code; psi4.driver.driver_cbs. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/driver_cbs.html:68322,update,updated,68322,psi4manual/1.4.0/_modules/psi4/driver/driver_cbs.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/driver_cbs.html,1,['update'],['updated']
Deployability,"ptype_value. # Drop out for unsupported calls; if ptype not in [""energy"", ""gradient"", ""hessian""]:; raise ValidationError(""%s: Cannot extrapolate or delta correct %s yet."" % (ptype.title(), ptype)). # Catch kwarg issues for CBS methods only; user_dertype = kwargs.pop('dertype', None); cbs_verbose = kwargs.pop('cbs_verbose', False). # If we are not a single call, let CBS wrapper handle it!; cbs_kwargs = {}; cbs_kwargs['ptype'] = ptype; cbs_kwargs['return_wfn'] = True; cbs_kwargs['molecule'] = molecule; cbs_kwargs['verbose'] = cbs_verbose. if user_dertype != None:; cbs_kwargs['dertype'] = user_dertype. # Find method and basis; metadata = []; if method_list[0] in ['scf', 'hf', 'c4-scf', 'c4-hf']:; stage = {}; stage['wfn'] = method_list[0]; stage['basis'] = basis_list[0]; if 'scf_scheme' in kwargs:; stage['scheme'] = kwargs.pop('scf_scheme'); stage['stage'] = ""scf""; stage['treatment'] = ""scf""; else:; # _validate_cbs_inputs will produce scf stage automatically; stage = {}; stage['wfn'] = method_list[0]; stage['basis'] = basis_list[0]; if 'corl_scheme' in kwargs:; stage['scheme'] = kwargs.pop('corl_scheme'); stage['stage'] = ""corl""; stage['treatment'] = ""corl""; metadata.append(stage). # ""method/basis"" syntax only allows for one delta correction; # via ""method/basis+D:delta/basis"". Maximum length of method_list is 2.; if len(method_list) == 2:; stage = {}; stage['wfn'] = method_list[1]; stage['basis'] = basis_list[1]; if 'delta_scheme' in kwargs:; stage['scheme'] = kwargs.pop('delta_scheme'); stage['stage'] = ""delta1""; stage['treatment'] = ""corl""; metadata.append(stage); ; cbs_kwargs[""cbs_metadata""] = metadata; ptype_value, wfn = cbs(func, label, **cbs_kwargs). if return_wfn:; return (ptype_value, wfn); else:; return ptype_value. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .  · ; 1.5;  · . PSI4. Module code; psi4.driver.driver_cbs. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/_modules/psi4/driver/driver_cbs.html:68405,update,updated,68405,psi4manual/1.5.0/_modules/psi4/driver/driver_cbs.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/_modules/psi4/driver/driver_cbs.html,1,['update'],['updated']
Deployability,"put line, then translated back in the GEOS section; see; NBC10.py for an example. The first line for each xyz file should be the number of atoms in the system.; The second line for each xyz file can be blank (interpreted as no comment), anything (interpreted as a comment), or two integers and anything (interpreted as charge, multiplicity, and remainder as comment).; The third and subsequent lines have four fields: the element symbol and the three cartesian coordinates in angstroms. The atom lines should not contain any dummy atoms (what’s the use in cartesian form). For dimer systems, an algorithm is used to apportion the atoms into two fragments; thus the atoms need not be arranged with all fragmentA atoms before all fragmentB atoms. The algorithm will fail for very closely arranged fragments. For dimers, any charge and multiplicity from the second line will be applied to fragmentA (python); charge and multiplicity may need to be redistributed later in the editing step. Run script psi4/psi4/share/psi4/scripts/ixyz2database.py. Move into the directory where all your xyz files are located. Run the; script. It will ask a number of; questions about your intended database and generate a python file; named for your database. Uppercase is preferable for database names; (according to Sherrill lab convention). Note your choice for the route; variable for the next step. Edit file database.py. According to your responses in to questions in the ixyz2database.py script,; several bullets will be printed of edits you necessarily or optionally; should make. Copy your new database into psi4/psi4/share/psi4/databases.; Alternately, append the directory containing your new database into; PSIPATH. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Customization: Adding Simple Extensions; Creating a Database. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/quickadddatabase.html:4041,update,updated,4041,psi4manual/1.8.x/quickadddatabase.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/quickadddatabase.html,1,['update'],['updated']
Deployability,"put line, then translated back in the GEOS section; see; NBC10.py for an example. The first line for each xyz file should be the number of atoms in the system.; The second line for each xyz file can be blank (interpreted as no comment), anything (interpreted as a comment), or two integers and anything (interpreted as charge, multiplicity, and remainder as comment).; The third and subsequent lines have four fields: the element symbol and the three cartesian coordinates in angstroms. The atom lines should not contain any dummy atoms (what’s the use in cartesian form). For dimer systems, an algorithm is used to apportion the atoms into two fragments; thus the atoms need not be arranged with all fragmentA atoms before all fragmentB atoms. The algorithm will fail for very closely arranged fragments. For dimers, any charge and multiplicity from the second line will be applied to fragmentA (python); charge and multiplicity may need to be redistributed later in the editing step. Run script psi4/psi4/share/psi4/scripts/ixyz2database.py. Move into the directory where all your xyz files are located. Run the; script. It will ask a number of; questions about your intended database and generate a python file; named for your database. Uppercase is preferable for database names; (according to Sherrill lab convention). Note your choice for the route; variable for the next step. Edit file database.py. According to your responses in to questions in the ixyz2database.py script,; several bullets will be printed of edits you necessarily or optionally; should make. Copy your new database into psi4/psi4/share/psi4/databases.; Alternately, append the directory containing your new database into; PSIPATH. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.9.1;  · . PSI4. Customization: Adding Simple Extensions; Creating a Database. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 08 February 2024 09:32PM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/quickadddatabase.html:4041,update,updated,4041,psi4manual/1.9.x/quickadddatabase.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/quickadddatabase.html,1,['update'],['updated']
Deployability,"putation. memory 600 mb. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; energy('scf'). Note; The memory and basis set specifications are placed before the; energy function is called. Any user options need to; be set before the procedure they are meant to affect. For your convenience, the above example can be found in; tu1-h2o-energy.; You can run it if you wish.; Once PSI4 is in your path (see the; User Configuration; section of the installation instructions), you can run this computation by typing; 1>>> psi4 input.dat output.dat. If everything goes well, the computation should complete and should report; a final restricted Hartree–Fock energy in a section like this:; 1; 2; 3Energy converged. @RHF Final Energy: -76.02663273410671. By default, the energy should be converged to about \(1.0 \times 10^{-6}\), so agreement; is only expected for about the first 6 digits after the decimal. If the; computation does not complete, there is probably a problem with the; compilation or installation of the program (see the installation; instructions in Sec. Compiling and Installing from Source).; This very simple input is sufficient to run the requested information.; Notice that we didn’t tell the program some otherwise useful information; like the charge on the molecule (0, it’s neutral), the spin multiplicity; (1 for a closed-shell molecule with all electrons paired), or the reference; wavefunction to use (restricted Hartree–Fock, or RHF, is usually; appropriate for a closed-shell molecule). The program correctly guessed; all of these options for us. We can change the default behavior through; additional keywords.; Let’s consider what we would do for an open-shell molecule, where; not all electrons are paired. For example, let’s run a computation; on methylene (CH2), whose ground electronic state has two unpaired; electrons (triplet electronic state, or a spin multiplicity \(2S+1 = 3\)).; In this case, the default spin multiplicity (1) is not correct, so ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/tutorial-1.html:3103,install,installation,3103,psi4manual/1.1.0/tutorial-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/tutorial-1.html,8,['install'],['installation']
Deployability,"putations can only be run with the unrestricted; orbitals. If the REFERENCE option is not specified in the input file,; the PSI4 Python driver will conveniently set it to UHF for the DCFT; computations. Iterative Algorithms¶; As explained in the Theory section, in order to obtain the DCFT energy one; needs to solve the system of coupled equations for the orbitals and the density; cumulant. At the present moment three iterative algorithms for the solution of the; equations are available. The choice of the algorithm is controlled using the; ALGORITHM option.; 1) Two-step algorithm (can be invoked by setting ALGORITHM option to; TWOSTEP and is currently the default). In two-step algorithm the DCFT equations; are solved in macroiterations. Each macroiteration consists of two sets of; microiterations. In the first set the density cumulant equations are solved; iteratively, while the orbitals are kept fixed. After the density cumulant is; converged, the second set of microiterations is performed for the; self-consistent update of the orbitals with the fixed density cumulant. Each; macroiteration is completed by performing the orbital transformation of the; integrals. The convergence of the two-step algorithm is accelerated using the; DIIS extrapolation technique.; 2) Simultaneous algorithm (set ALGORITHM to SIMULTANEOUS). In this algorithm; each macroiteration consists of a single iteration of the cumulant update; followed by a single iteration of the orbital update and orbital transformation; of the integrals. The macroiterations are repeated until the simultaneous; convergence of the cumulant and the orbitals is achieved. As in the two-step algorithm, the DIIS; extrapolation is used to accelerate the convergence.; 3) Quadratically-convergent algorithm (set ALGORITHM to QC). The; orbital and cumulant update equations are solved using the Newton-Raphson; method. Each macroiteration of the quadratically-convergent algorithm consists; of a single Newton-Raphson update follo",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/dcft-1.html:6252,update,update,6252,psi4manual/4.0b4/dcft-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/dcft-1.html,4,['update'],['update']
Deployability,"putations. sapt6; checks that all SAPT physical components (elst, exch, indc, disp) and total IE are being computed correctly for SAPT2+3(CCD)dMP2/aug-cc-pvdz and all lesser methods thereof. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. nbo; Generation of NBO file. matrix1; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating matrix multiplication, eigendecomposition, Cholesky decomposition and LU decomposition. These operations are performed on vectors and matrices provided from the Psi library. mp2-property; MP2 cc-pvDZ properties for Nitrogen oxide. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. dft-smoke; DFT Functional Smoke Test. omp2p5-2; OMP2 cc-pVDZ energy for the H2O molecule. dcft1; DC-06, DC-12, ODC-06 and ODC-12 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. opt7; Various constrained energy minimizations of HOOH with cc-pvdz RHF. For “fixed” coordinates, the final value is provided by the user. sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. This example uses frozen core as well as MP2 natural orbital approximations. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. scf-guess-read2; Test if the the guess read in the same basis converges. dft-pbe0-2; Internal match to psi4, test to match to literature values in litref.in/litref.out. gibbs; Test Gibbs free energies at 298 K of N2, H2O, and CH4. props2; DF-SCF cc-pVDZ of benzene-hydronium ion, scanning the dissociation coordinate with Python’s built-in loop mechanism. The geometry is specified by a Z-matrix with dummy atoms, fixed param",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/autodoc_testsuite_corepsi4-1.html:34953,update,update,34953,psi4manual/1.3.2/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/autodoc_testsuite_corepsi4-1.html,4,['update'],['update']
Deployability,"pvdz; freeze_core true; }; energy('df-ccsd(t)'). The accuracy of the Cholesky decomposition may be controlled through the; keyword CHOLESKY_TOLERANCE. Note that the keyword; SCF_TYPE has not been specified here. By default, a DF-CCSD(T); computation exploits DF technology in the SCF procedure, but one can; override this behavior through this keyword. Gn theory¶; The FNOCC module contains all the components that comprise the Gn family; of composite methods. Currently, only the G2 method is supported; [Curtiss:1991:7221]. The G2 procedure may be called through the; energy() wrapper:; energy('gaussian-2'). Supported methods¶; The various methods supported by the FNOCC module in PSI4 are detailed; in Table FNOCC Methods. Note that these methods; are implemented for closed-shell references only. For open-shell references,; the calls energy('mp2.5'), energy('mp3'), and energy('mp4') will; default to the DETCI implementations of these methods. name; calls method. qcisd; quadratic configuration interaction singles doubles. qcisd(t); qcisd with perturbative triples. mp2.5; average of second- and third-order perturbation theories. mp3; third-order perturbation theory. mp4(sdq); fourth-order perturbation theory, minus triples contribution. mp4; full fourth-order perturbation theory. cepa(0); coupled electron pair approximation, variant 0. cepa(1); coupled electron pair approximation, variant 1. cepa(3); coupled electron pair approximation, variant 3. acpf; averaged coupled-pair functional. aqcc; averaged quadratic coupled-cluster. sdci; configuration interaction with single and double excitations. dci; configuration interaction with double excitations. fno-qcisd; qcisd with frozen natural orbitals. fno-qcisd(t); qcisd(t) with frozen natural orbitals. fno-ccsd; coupled cluster singles doubles with frozen natural orbitals. fno-ccsd(t); ccsd with perturbative triples and frozen natural orbitals. fno-mp3; mp3 with frozen natural orbitals. fno-mp4(sdq); mp4(sdq) with frozen natural",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/fnocc-1.html:9869,configurat,configuration,9869,psi4manual/4.0b4/fnocc-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/fnocc-1.html,2,['configurat'],['configuration']
Deployability,"py)"" OFF; ""-fsanitize=undefined -fno-omit-frame-pointer""); option_with_flags(ENABLE_MSAN ""Enables memory sanitizer (requires similarly compiled Python and Numpy)"" OFF; ""-fsanitize=memory -fPIE -pie -fno-omit-frame-pointer""); option_with_default(MAX_AM_ERI ""Maximum angular momentum for integrals"" 5); option_with_default(CMAKE_BUILD_TYPE ""Build type (Release or Debug)"" Release); option_with_default(FC_SYMBOL ""The type of Fortran name mangling"" 2); option_with_default(BUILD_FPIC ""Compile static libraries with position independent code"" ON); option_with_default(CMAKE_INSTALL_LIBDIR ""Directory to which libraries installed"" lib); option_with_default(PYMOD_INSTALL_LIBDIR ""Location within CMAKE_INSTALL_LIBDIR to which python modules are installed"" /). Note that external projects will have their own sets of build; configuration options. Only the most-common user knobs of those are; mentioned above. How to install elsewhere than /usr/local/psi4¶; The installation directory is the filesystem location for the executable; script, the Python module, basis set data, and other administrative files.; Unless using the conda package, which is relocatable, the installation; directory must be specified with CMake variable CMAKE_INSTALL_PREFIX; before compiling. Build with Specific Install Directory; cmake -DCMAKE_INSTALL_PREFIX=/nfs/common/software/psi4. Relevant CMake Options:; CMAKE_INSTALL_PREFIX=PATH # Location to which Psi4 and internally built; # add-ons are installed (default: /usr/local/psi4). Note; It’s not guaranteed, but if, in a pinch, you need to install a; built Psi4 to a location not configured by CMAKE_INSTALL_PREFIX,; recursively copy the folders under objdir/stage/prefix to; the desired location, chown them if needed, edit the shebang in; bin/psi4 if needed, and recursively delete all the “.pyc” files. It; may just run. How to compile for debugging¶; Flags to turn optimizations off and debugging on can be set across the; project and plugins with CMake variable CMAKE_BUI",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/build_planning-1.html:17076,install,install,17076,psi4manual/1.2.1/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html,4,['install'],"['install', 'installation']"
Deployability,"py; ""params"": {}, parameters for the dispersion correction; ""nlc"": False (optional) logical switch to turn off nlc (e.g. VV10) correction defined by LibXC; ""citation"": """", special reference for the dispersion correction parameters, appended to output. One can also use the dft_functional keyword argument to use the; orbitals generated by DFT for correlated wavefunction methods:; # MP2 with a PBE0 reference computation. molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis 6-31G; dft_spherical_points 302; dft_radial_points 99; reference rks; }. mp2_dft = energy(""MP2"", dft_functional=""PBE0""). Note that this would only update the generic Psi variables (e.g., “CURRENT ENERGY”) and not the MP2 or DFT variables.; Psi4 also supports easy customization and manipulation of DFT functionals. The values of alpha and omega can be adjusted with the DFT_ALPHA; and DFT_OMEGA keywords. For example, for LRC functionals, one can control the fraction of long-range Hartree-Fock and short-range DFA by changing DFT_OMEGA:; molecule ch2 {; 0 3; C; H 1 R; H 1 R 2 A. R = 1.075; A = 133.93; }. set reference uhf; set guess gwh; set basis cc-pvdz; set e_convergence 8. # Override the default value of omega; set dft_omega 2.0. E = energy('wb97x'). # Revoke the change for later computations if needed; revoke_global_option_changed('DFT_OMEGA'). This feature would be useful after finishing the IP fitting procedure, for example. table of contents. DFT: Density Functional Theory; Theory; Minimal Input; Spin/Symmetry Treatment; Functional Selection; Grid Selection; ERI Algorithms; IP Fitting; Fractional Particle Curves; Dispersion Corrections; Recommendations; Advanced Functional Use and Manipulation. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Theoretical Methods: SCF to FCI; DFT: Density Functional Theory. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/dft.html:36480,update,updated,36480,psi4manual/1.8.x/dft.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/dft.html,1,['update'],['updated']
Deployability,"py; ""params"": {}, parameters for the dispersion correction; ""nlc"": False (optional) logical switch to turn off nlc (e.g. VV10) correction defined by LibXC; ""citation"": """", special reference for the dispersion correction parameters, appended to output. One can also use the dft_functional keyword argument to use the; orbitals generated by DFT for correlated wavefunction methods:; # MP2 with a PBE0 reference computation. molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis 6-31G; dft_spherical_points 302; dft_radial_points 99; reference rks; }. mp2_dft = energy(""MP2"", dft_functional=""PBE0""). Note that this would only update the generic Psi variables (e.g., “CURRENT ENERGY”) and not the MP2 or DFT variables.; Psi4 also supports easy customization and manipulation of DFT functionals. The values of alpha and omega can be adjusted with the DFT_ALPHA; and DFT_OMEGA keywords. For example, for LRC functionals, one can control the fraction of long-range Hartree-Fock and short-range DFA by changing DFT_OMEGA:; molecule ch2 {; 0 3; C; H 1 R; H 1 R 2 A. R = 1.075; A = 133.93; }. set reference uhf; set guess gwh; set basis cc-pvdz; set e_convergence 8. # Override the default value of omega; set dft_omega 2.0. E = energy('wb97x'). # Revoke the change for later computations if needed; revoke_global_option_changed('DFT_OMEGA'). This feature would be useful after finishing the IP fitting procedure, for example. table of contents. DFT: Density Functional Theory; Theory; Minimal Input; Spin/Symmetry Treatment; Functional Selection; Grid Selection; ERI Algorithms; IP Fitting; Fractional Particle Curves; Dispersion Corrections; Recommendations; Advanced Functional Use and Manipulation. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.9.1;  · . PSI4. Theoretical Methods: SCF to FCI; DFT: Density Functional Theory. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 08 February 2024 09:32PM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/dft.html:36488,update,updated,36488,psi4manual/1.9.x/dft.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/dft.html,1,['update'],['updated']
Deployability,"py; (source location) or psi4/share/psi/python/aliases.py (installed; location). No recompilation is necessary after defining an alias. Some; existing examples are below. sherrill_gold_standard(func, label, **kwargs)[source]¶; Function to call the quantum chemical method known as ‘Gold Standard’; in the Sherrill group. Uses complete_basis_set() to evaluate; the following expression. Two-point extrapolation of the correlation energy; performed according to corl_xtpl_helgaker_2(). >>> # [1] single-point energy by this composite method; >>> energy('sherrill_gold_standard'). >>> # [2] finite-difference geometry optimization; >>> optimize('sherrill_gold_standard'). >>> # [3] finite-difference geometry optimization, overwriting some pre-defined sherrill_gold_standard options; >>> optimize('sherrill_gold_standard', corl_basis='cc-pV[DT]Z', delta_basis='3-21g'). allen_focal_point(func, label, **kwargs)[source]¶; Function to call Wes Allen-style Focal; Point Analysis. JCP 127 014306. Uses; complete_basis_set() to evaluate the following; expression. SCF employs a three-point extrapolation according; to scf_xtpl_helgaker_3(). MP2, CCSD, and; CCSD(T) employ two-point extrapolation performed according to; corl_xtpl_helgaker_2(). CCSDT and CCSDT(Q); are plain deltas. This wrapper requires Kallay’s MRCC code. >>> # [1] single-point energy by this composite method; >>> energy('allen_focal_point'). >>> # [2] finite-difference geometry optimization embarrasingly parallel; >>> optimize('allen_focal_point', mode='sow'). Table Of Contents. Complete Basis Set; Output; Extrapolation Schemes; Aliases. Previous topic; RSE42; Next topic; <no title>. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Psithon Functions: Invoking a Calculation ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/cbs-1.html:18280,update,updated,18280,psi4manual/1.0.0/cbs-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/cbs-1.html,2,['update'],['updated']
Deployability,"python the psi4 libmints; CoordValue and CoordEntry classes, which were developed by; Justin M. Turney, with incremental improvements by other; psi4 developers. class CartesianEntry(entry_number, Z, charge, mass, symbol, label, x, y, z, basis=None, shells=None)[source]¶; Class to hold all information about an atom, including its; coordinate specification as three Cartesians. clone()[source]¶; Returns new, independent CartesianEntry object. compute()[source]¶; Computes the values of the coordinates (in whichever units; were inputted), returning them in a Vector. everything()[source]¶. invalidate()[source]¶; Flags the current coordinates as being outdated. print_in_input_format()[source]¶; Prints the updated geometry, in the format provided by the user. print_in_input_format_cfour()[source]¶; Prints the updated geometry, in the format provided by the user.; This, for Cfour, not different from regular version. set_coordinates(x, y, z)[source]¶; Given the current set of coordinates, updates the values of this; atom’s coordinates and any variables that may depend on it. type()[source]¶; The type of CoordEntry specialization. class CoordEntry(entry_number, Z, charge, mass, symbol, label='', basis=None, shells=None)[source]¶; Class to store all the attributes associated with an atom, not the; larger Molecule. Specialized into CartesianEntry and ZMatrixEntry. Z()[source]¶; The nuclear charge of the current atom (0 if ghosted). static a(a1, a2, a3)[source]¶; Computes the angle (in rad.) between three sets of coordinates. basisset(role='BASIS')[source]¶; Returns the basis name for the provided type.; * @param type Keyword from input file.; * @returns the value from input. basissets()[source]¶; Returns basisset to atom map. charge()[source]¶; The “atomic charge” of the current atom (for SAD purposes). static d(a1, a2, a3, a4)[source]¶; Computes the dihedral (in rad.) between four sets of coordinates. entry_number()[source]¶; The order in which this appears in the full atom list",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:114003,update,updates,114003,psi4manual/1.0.0/autodoc_driver-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html,2,['update'],['updates']
Deployability,"q]; if theta < 0.0:; t = -1.0 / (math.sqrt(1.0 + theta * theta) - theta); else:; t = 1.0 / (math.sqrt(1.0 + theta * theta) + theta). c = 1.0 / math.sqrt(1.0 + t * t); s = t * c; z = t * A[p][q]. # Apply Jacobi transformation; A[p][q] = 0.0; w[p] -= z; w[q] += z. for r in range(p):; t = A[r][p]; A[r][p] = c * t - s * A[r][q]; A[r][q] = s * t + c * A[r][q]. for r in range(p + 1, q):; t = A[p][r]; A[p][r] = c * t - s * A[r][q]; A[r][q] = s * t + c * A[r][q]. for r in range(q + 1, 3):; t = A[p][r]; A[p][r] = c * t - s * A[q][r]; A[q][r] = s * t + c * A[q][r]. # Update eigenvectors; for r in range(3):; t = Q[r][p]; Q[r][p] = c * t - s * Q[r][q]; Q[r][q] = s * t + c * Q[r][q]. return None. [docs]def zero(m, n):; """""" Create zero matrix""""""; new_matrix = [[0 for row in range(n)] for col in range(m)]; return new_matrix. [docs]def show(matrix):; """""" Print out matrix""""""; for col in matrix:; print col. [docs]def mscale(matrix, d):; """"""Return *matrix* scaled by scalar *d*""""""; for i in range(len(matrix)):; for j in range(len(matrix[0])):; matrix[i][j] *= d; return matrix. [docs]def mult(matrix1, matrix2):; """""" Matrix multiplication""""""; if len(matrix1[0]) != len(matrix2):; # Check matrix dimensions; raise ValidationError('Matrices must be m*n and n*p to multiply!'). else:; # Multiply if correct dimensions; new_matrix = zero(len(matrix1), len(matrix2[0])); for i in range(len(matrix1)):; for j in range(len(matrix2[0])):; for k in range(len(matrix2)):; new_matrix[i][j] += matrix1[i][k] * matrix2[k][j]; return new_matrix. [docs]def transpose(matrix):; """"""Return matrix transpose""""""; if len(matrix[0]) != len(matrix):; # Check matrix dimensions; raise ValidationError('Matrices must be square.'). tmat = [list(i) for i in zip(*matrix)]; return tmat. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    ; PSI4 [beta5] » ; Module code ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/_modules/qcdb/vecutil.html:8413,update,updated,8413,psi4manual/4.0b5/_modules/qcdb/vecutil.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/_modules/qcdb/vecutil.html,1,['update'],['updated']
Deployability,"qcvars': qcvars,; 'cbs_record': copy.deepcopy(self.cbsrec),; },; 'return_result': assembled_results['ret_ptype'],; 'success': True,; }). logger.debug('CBS QCSchema\n' + pp.pformat(cbs_model.dict())). return cbs_model. def get_psi_results(self, return_wfn: bool = False) -> EnergyGradientHessianWfnReturn:; """"""Called by driver to assemble results into Composite-flavored QCSchema,; then reshape and return them in the customary Psi4 driver interface: ``(e/g/h, wfn)``. Parameters; ----------; return_wfn; Whether to additionally return the dummy :py:class:`~psi4.core.Wavefunction`; calculation result as the second element of a tuple. Contents are:. - molecule; - dummy basis, def2-svp; - e/g/h member data; - QCVariables; - module if simple. Returns; -------; ret; Energy, gradient, or Hessian according to self.driver.; wfn; Wavefunction described above when *return_wfn* specified. """"""; cbs_model = self.get_results(). if cbs_model.driver == 'energy':; ret_ptype = cbs_model.return_result; else:; ret_ptype = core.Matrix.from_array(cbs_model.return_result); wfn = _cbs_schema_to_wfn(cbs_model). if return_wfn:; return (ret_ptype, wfn); else:; return ret_ptype. def _cbs_schema_to_wfn(cbs_model):; """"""Helper function to produce Wavefunction from a Composite-flavored AtomicResult."""""". mol = core.Molecule.from_schema(cbs_model.molecule.dict()); basis = core.BasisSet.build(mol, ""ORBITAL"", 'def2-svp', quiet=True); wfn = core.Wavefunction(mol, basis); if hasattr(cbs_model.provenance, ""module""):; wfn.set_module(cbs_model.provenance.module). # wfn.set_energy(cbs_model['extras'['qcvars'].get('CBS TOTAL ENERGY')) # catches Wfn.energy_; for qcv, val in cbs_model.extras['qcvars'].items():; for obj in [core, wfn]:; obj.set_variable(qcv, val). return wfn. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .  · ; 1.6;  · . PSI4. Module code; psi4.driver.driver_cbs. © Copyright 2022, The Psi4 Project.; Last updated on Thursday, 19 May 2022 08:57PM.; Created using Sphinx 4.5.0.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/driver_cbs.html:61998,update,updated,61998,psi4manual/1.6.x/_modules/psi4/driver/driver_cbs.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/driver_cbs.html,1,['update'],['updated']
Deployability,"quantities and whether the criterion; is active and fulfilled (*), active and unfulfilled ( ), or inactive (o).; --------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------- ~; Convergence Criteria 1.00e-06 * 3.00e-04 * o 1.20e-03 * o ~; --------------------------------------------------------------------------------------------- ~; 1 -38.91591820 -3.89e+01 6.91e-02 5.72e-02 o 1.42e-01 1.19e-01 o ~; 2 -38.92529543 -9.38e-03 6.21e-03 3.91e-03 o 2.00e-02 1.18e-02 o ~; 3 -38.92540669 -1.11e-04 4.04e-03 2.46e-03 o 3.63e-02 2.12e-02 o ~; 4 -38.92548668 -8.00e-05 2.30e-04 * 1.92e-04 o 1.99e-03 1.17e-03 o ~; 5 -38.92548698 -2.98e-07 * 3.95e-05 * 3.35e-05 o 1.37e-04 * 1.05e-04 o ~. The full list of keywords for optking is provided in Appendix OPTKING.; Information on the Psithon function that drives geometry optimizations is provided; at optimize(). Important User Changes from cpp-optking¶. FIXED_COORD keywords have been generalized to RANGED_COORD e.g. RANGED_DISTANCE; Detailed optimization is now printed through the python logging system. If more information about; the optimization is needed. Please see <output_name>.log. table of contents. Geometry Optimization; Basic Keywords; OPT_TYPE; STEP_TYPE; GEOM_MAXITER; G_CONVERGENCE; FULL_HESS_EVERY. Optimizing Minima; Hessian; Transition States and Reaction Paths; Constrained Optimizations; Multi-Fragment Optimizations; Dealing with problematic optimizations; Convergence Criteria; Interface to GeomeTRIC; Output; Important User Changes from cpp-optking. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Theoretical Methods: SCF to FCI; Geometry Optimization. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/optking.html:25778,update,updated,25778,psi4manual/1.8.x/optking.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/optking.html,1,['update'],['updated']
Deployability,"quantities and whether the criterion; is active and fulfilled (*), active and unfulfilled ( ), or inactive (o).; --------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------- ~; Convergence Criteria 1.00e-06 * 3.00e-04 * o 1.20e-03 * o ~; --------------------------------------------------------------------------------------------- ~; 1 -38.91591820 -3.89e+01 6.91e-02 5.72e-02 o 1.42e-01 1.19e-01 o ~; 2 -38.92529543 -9.38e-03 6.21e-03 3.91e-03 o 2.00e-02 1.18e-02 o ~; 3 -38.92540669 -1.11e-04 4.04e-03 2.46e-03 o 3.63e-02 2.12e-02 o ~; 4 -38.92548668 -8.00e-05 2.30e-04 * 1.92e-04 o 1.99e-03 1.17e-03 o ~; 5 -38.92548698 -2.98e-07 * 3.95e-05 * 3.35e-05 o 1.37e-04 * 1.05e-04 o ~. The full list of keywords for optking is provided in Appendix OPTKING.; Information on the Psithon function that drives geometry optimizations is provided; at optimize(). Important User Changes from cpp-optking¶. FIXED_COORD keywords have been generalized to RANGED_COORD e.g. RANGED_DISTANCE; Detailed optimization is now printed through the python logging system. If more information about; the optimization is needed. Please see <output_name>.log. table of contents. Geometry Optimization; Basic Keywords; OPT_TYPE; STEP_TYPE; GEOM_MAXITER; G_CONVERGENCE; FULL_HESS_EVERY. Optimizing Minima; Hessian; Transition States and Reaction Paths; Constrained Optimizations; Multi-Fragment Optimizations; Dealing with problematic optimizations; Convergence Criteria; Interface to GeomeTRIC; Output; Important User Changes from cpp-optking. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.9.1;  · . PSI4. Theoretical Methods: SCF to FCI; Geometry Optimization. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 08 February 2024 09:32PM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/optking.html:25778,update,updated,25778,psi4manual/1.9.x/optking.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/optking.html,1,['update'],['updated']
Deployability,"quence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. pubchem1; Benzene vertical singlet-triplet energy difference computation, using the PubChem database to obtain the initial geometry, which is optimized at the HF/STO-3G level, before computing single point energies at the RHF, UHF and ROHF levels of theory. dcft8; DCFT calculation for the NH3+ radical using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. fci-h2o; 6-31G H2O Test FCI Energy Point. opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. fnocc4; Test FNO-DF-CCSD(T) energy. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. opt10; 6-31G MP2 transition-state optimization with initial, computed Hessian. dcft5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. stability2; ROHF stability a",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:2339,update,update,2339,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,4,['update'],['update']
Deployability,"quency — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Psithon Functions: Invoking a Calculation ». Frequency¶. frequency(name[, func, dertype, irrep, molecule])[source]¶; Function to compute harmonic vibrational frequencies. Aliases :frequencies(), freq(). Returns:(float) Total electronic energy in Hartrees. Note; Analytic hessians are not available. Frequencies will proceed through; finite differences according to availability of gradients or energies. Caution; Some features are not yet implemented. Buy a developer a coffee. Make frequency look analogous to gradient, especially in matching derivative levels. Make dertype actually a dertype type. Parameters:; name (string) – 'scf' || 'df-mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. dertype (dertype) – 'hessian' || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – -1 || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; , requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples :. >>> # [1] <example description>; >>> <example python command>. >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> frequencies('scf', dertype=1, irrep=4). Previous topic; Optimize; Next topic; Database; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Psithon Functions: Invoking a Calculation ». © Copyright 2012, Psi4 Project.; Last updated on Sep 30, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/freq-1.html:1949,update,updated,1949,psi4manual/4.0b2/freq-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/freq-1.html,2,['update'],['updated']
Deployability,"quested configuration interaction level of theory, (3,). CI ROOT n -> ROOT m QUADRUPOLE¶; Redundant transition quadrupole array [e a0^2] between roots n and m for the requested configuration interaction level of theory, (3, 3). CI ROOT n DIPOLE¶; Dipole array [e a0] for the requested configuration interaction level of theory and root n, (3,). CI ROOT n QUADRUPOLE¶; Redundant quadrupole array [e a0^2] for the requested configuration interaction level of theory and root n, (3, 3). CI ROOT n TOTAL ENERGY¶. CI ROOT n CORRELATION ENERGY¶; The total electronic energy [Eh] and correlation energy component [Eh]; for the requested configuration interaction level of theory and root; n (numbering starts at 0). CI STATE-AVERAGED TOTAL ENERGY¶. CI STATE-AVERAGED CORRELATION ENERGY¶; The total electronic energy [Eh] and correlation energy component [Eh]; for state-averaged CI/CASSCF levels of theory. CI TOTAL ENERGY¶. CI CORRELATION ENERGY¶; The total electronic energy [Eh] and correlation energy component [Eh]; for the requested configuration interaction level of theory and root. CISD DIPOLE¶; Dipole array [e a0] for the configuration interaction singles and doubles level of theory, (3,). CISD QUADRUPOLE¶; Redundant quadrupole array [e a0^2] for the configuration interaction singles and doubles level of theory, (3, 3). CISD TOTAL ENERGY¶. CISD CORRELATION ENERGY¶. CISDT TOTAL ENERGY¶. CISDT CORRELATION ENERGY¶. CISDTQ CORRELATION ENERGY¶. CISDTQ TOTAL ENERGY¶. CIn CORRELATION ENERGY¶. CIn TOTAL ENERGY¶; The total electronic energy [Eh] and correlation energy component [Eh]; for the labeled configuration interaction level of theory and root.; n is CI order for n > 4. CP-CORRECTED 2-BODY INTERACTION ENERGY¶; The interaction energy [Eh] considering only two-body interactions,; computed with counterpoise correction.; Related variable UNCP-CORRECTED 2-BODY INTERACTION ENERGY. \[E_{\text{IE}} = E_{dimer} - \sum_{monomer}^{n}{E_{monomer}^{\text{CP}}}\]. CURRENT CORRELATION ENERGY¶; The",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/glossary_psivariables.html:22349,configurat,configuration,22349,psi4manual/1.6.x/glossary_psivariables.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/glossary_psivariables.html,1,['configurat'],['configuration']
Deployability,"question). If it does not, use the; DF_BASIS_MP2 keyword to manually specify the basis.; DFMP2 likes memory. At a minimum, \(2Q^2\) doubles are required,; where \(Q\) is the size of the auxiliary basis set. However, there is; one disk transpose of the \((Q|ov)\) tensor in the RHF-MP2 algorithm; [two for UHF-MP2 and ROHF-MBPT(2)], so more memory will reduce seek times.; If you notice DFMP2 using more memory than allowed, it is possible that; the threaded three-index ERI computers are using too much overhead memory.; Set the DF_INTS_NUM_THREADS to a smaller number to prevent this; in this section (does not affect threaded efficiency in the rest of the; code).; DFMP2 likes disk. At a minimum, \(2Qov\) doubles are required for; RHF-MP2, and \(4Qov\) doubles are required for UHF-MP2.; DFMP2 likes threads. Some of the formation of the \((Q|ov)\) tensor; relies on threaded BLAS (such as MKL) for efficiency. The main; \({\cal O}(N^5)\) step is done via small/medium-sized DGEMMs inside of; OpenMP, so make sure to set the OMP_NESTED environment variable; to FALSE to prevent thread thrash (or just as well, do not define; OMP_NESTED at all).; Freezing core is good for both efficiency and correctness purposes.; Freezing virtuals is not recommended. The DFMP2 module will remind you how; many frozen/active orbitals it is using in a section just below the title.; ROHF-MBPT(2) may be preferred to UHF-MP2, as the latter can suffer from; severe spin contamination in some cases.; MP2 is not suitable for systems with multireference character. The; orbital energies will come together and an explosion will occur. table of contents. DF-MP2: Density-Fitted 2nd-Order Møller–Plesset Perturbation Theory; Introduction; Theory; Recommendations. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Theoretical Methods: SCF to FCI. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 July 2018 04:21AM.; Created using Sphinx 1.7.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/dfmp2-1.html:9392,update,updated,9392,psi4manual/1.2.1/dfmp2-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/dfmp2-1.html,2,['update'],['updated']
Deployability,"r Acenes,”; E. G. Hohenstein and C. D. Sherrill, J. Chem. Phys. 132,; 184111 (2010). SAPT2, SAPT2+, SAPT2+(3), SAPT2+3. “Density Fitting of Intramonomer Correlation Effects in; Symmetry-Adapted Perturbation Theory,”; E. G. Hohenstein and C. D. Sherrill, J. Chem. Phys. 133,; 014101 (2010).; “Wavefunction Methods for Noncovalent Interactions,” E. G.; Hohenstein and C. D. Sherrill, WIREs: Comput. Mol. Sci. 2,; 304-326 (2012). Using Natural Orbitals in SAPT. “Efficient Evaluation of Triple Excitations in Symmetry-Adapted; Perturbation Theory via MP2 Natural Orbitals,” E. G. Hohenstein; and C. D. Sherrill, J. Chem. Phys. 133, 104107 (2010). Obtaining and Installing PSI4¶; The latest version of the PSI4 program package may be obtained at; www.psicode.org. The; source code is available as a gzipped tar archive (named, for example,; psi4.X.tar.gz, and binaries may be available for certain architectures.; For detailed installation and testing instructions, please refer to the; installation instructions at the PSI4 website above or to the file; psi4/INSTALL distributed with the package. Additional compilation; hints may be found at Psi Compiling. Supported Architectures¶; The majority of PSI4 was developed on Mac and Linux machines. In; principle, it should work on any Unix system; however, we have not tested; extensively on systems other than Mac and Linux. There is not a Windows; version of PSI4.; PSI4 has been successfully compiled using Intel, GCC, and Clang; compilers. For the Intel compilers, use versions 11 or; 12.1 (we have had trouble with version 12.0). Capabilities¶; PSI4 can perform ab initio computations employing basis; sets of contrated Gaussian-type functions of virtually arbitrary; orbital quantum number. Many parts of PSI4 can recognize and; exploit the largest Abelian subgroup of the molecular point group.; Table Methods displays the range of theoretical methods; available in PSI4.; For more details, see Tables Energy,; Energy (DFT), Energy (MRCC),; Gradient",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/introduction-1.html:6402,install,installation,6402,psi4manual/4.0b2/introduction-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/introduction-1.html,4,['install'],['installation']
Deployability,"r CCD calculation. run_bccd_t(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a Brueckner CCD(T) calculation. run_cc_gradient(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a CCSD and CCSD(T) gradient calculation. run_cc_property(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; all CC property calculations. run_ccenergy(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a CCSD, CC2, and CC3 calculation. run_cepa(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a cepa-like calculation.; >>> energy('cepa(1)'). run_dcft(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a density cumulant functional theory calculation. run_dcft_gradient(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; DCFT gradient calculation. run_detci(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a configuration interaction calculation, namely FCI,; CIn, MPn, and ZAPTn. run_dfmp2(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a density-fitted MP2 calculation. run_dfmp2_gradient(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a DFMP2 gradient calculation. run_dft(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a density-functional-theory calculation. run_dft_gradient(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a density-functional-theory gradient calculation. run_eom_cc(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; an EOM-CC calculation, namely EOM-CC2, EOM-CCSD, and EOM-CC3. run_eom_cc_gradient(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; an EOM-CCSD gradient calculation. run_libfock(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a calculation through li",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/autodoc_driver-1.html:8838,configurat,configuration,8838,psi4manual/4.0b3/autodoc_driver-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_driver-1.html,2,['configurat'],['configuration']
Deployability,"r Linux and macOS and Windows.; If using the Psi4conda installer, DFTD3 has already been installed alongside.; If using the PSI4 conda package, the classic dftd3 conda package can; be obtained through conda install dftd3 -c psi4 or the newer implementation; through conda install dftd3-python -c conda-forge.; If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; the dftd3 executable can be obtained through conda install dftd3 -c psi4; or conda install dftd3-python -c conda-forge.; To remove a conda installation, conda remove dftd3 or conda remove dftd3-python. Source. If using PSI4 built from source and you want to build DFTD3 from; from source also,; follow the instructions provided with the source; (essentially, download the freely available tarball, unpack the source,; edit the Makefile to select a; Fortran compiler, and run make). From version 3.1.0 onwards, DFTD3 can; be used as-is; for earlier versions, patches are available:; psi4/psi4/share/psi4/scripts/patch_grimme_dftd3.3.0.2. To be used by PSI4, the classic program binary (dftd3) must be; found in your PATH or the s-dftd3 module in your PYTHONPATH; so QCEngine can detect it. Check if and where found through qcengine info. If; PSI4 is unable to execute the binary, an error will be reported.; To preferentially use a particular dftd3 compilation, simply adjust its; position in the path environment variables. Theory¶; The local or semilocal character of conventional density functionals; necessarily leads to neglect of the long-range correlation interactions; which capture attractive van der Waals forces. Initially proposed by Yang; [Wu:2002:515] and assiduously developed by Grimme, [Grimme:2004:1463]; [Grimme:2006:1787] [Grimme:2010:154104] the DFT+Dispersion method; appends to the base functional a scaled, damped, and fitted leading term; to the well-known dispersion energy series, \(E_{disp} = -C_6/R^6; -C_8/R^8 -C_{10}/R^{10}-\cdots\). T",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/dftd3.html:2621,patch,patches,2621,psi4manual/1.7.x/dftd3.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/dftd3.html,4,['patch'],['patches']
Deployability,"r Linux/Mac/Windows. Substitute desired python version: 2.7, 3.5, 3.6. Fine; to choose your own env name. Activate environment, source activate; p4dev. Go to where you’ve cloned psi4. Execute psi4-path-advisor.; It gives you a basic cmake command covering python, sphinx, link-time qc; addons, and run-time qc addons. There’s a help menu -h that gives more; info. There’s other options that will also pre-configure compilers. For; example, at GaTech psi4-path-advisor --intel works. On Macs with; XCode, psi4-path-advisor --clang works. Just read the help. For DGAS,; there’s a --disable-addons, but I don’t encourage it. It gives you a fully; functional cmake command, but those are just setting up CMake cache; — like the plugins you can always add your own CMake variables to; the command.; For run-time, you may also wish to install NumPy and the executable add-ons (e.g., dftd3); >>> conda install numpy psi4-rt. What do the conda packages psi4 & psi4-dev and the installer psi4conda contain¶; psi4 - has full-featured psi4 itself and necessarily all the link-time qc; addons (e.g., chemps2). It has python, pytest, and numpy. Of gcc-ness, it has minimal, run-time libraries,; not compilers, though, for Linux/Windows, full gcc and run-time gcc are the same.; It doesn’t have the run-time qc addons psi4-rt (e.g., dftd3) or build tools (e.g., sphinx and cmake).; psi4-dev - does not have psi4 itself or the run-time addons psi4-rt or numpy (though fine to install them; alongside). Does have all the link-time addons. Does have; cmake and sphinx (and python). Of gcc-ness, has full packages, that is,; compilers, not runtime packages.; Psi4conda installer - has full-featured psi4 itself, all link-time qc addons, all; run-time qc addons, and minimal gcc runtime libraries. Developers should additionally install psi4-dev for build tools.; The How to install a Psi4 binary with the Psi4conda installer, command-line uses a conda constructor to package up Miniconda,; the PSI4 conda package, the P",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/conda-1.html:7484,install,installer,7484,psi4manual/1.1.0/conda-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/conda-1.html,2,['install'],['installer']
Deployability,"r RHF/UHF/ROHF reference wavefunctions. General¶. BASIS¶. Primary basis set. Type: string; Possible Values: basis string; Default: NONE. DFMP2_MEM_FACTOR¶. % of memory for DF-MP2 three-index buffers. Type: double; Default: 0.9. DFMP2_P2_TOLERANCE¶. Minimum error in the 2-norm of the P(2) matrix for corrections to Lia and P. Type: conv double; Default: 0.0. DFMP2_P_TOLERANCE¶. Minimum error in the 2-norm of the P matrix for skeleton-core Fock matrix derivatives. Type: conv double; Default: 0.0. DF_BASIS_MP2¶. Auxiliary basis set for MP2 density fitting computations. Defaults to a RI basis. Type: string; Possible Values: basis string; Default: No Default. DF_INTS_NUM_THREADS¶. Number of threads to compute integrals with. 0 is wild card. Type: integer; Default: 0. INTS_TOLERANCE¶. Minimum absolute value below which integrals are neglected. Type: conv double; Default: 0.0. MP2_OS_SCALE¶. OS Scale. Type: double; Default: 6.0/5.0. MP2_SS_SCALE¶. SS Scale. Type: double; Default: 1.0/3.0. ONEPDM¶. Do compute one-particle density matrix?. Type: boolean; Default: false. OPDM_RELAX¶. Do relax the one-particle density matrix?. Type: boolean; Default: true. Expert¶. DF_INTS_IO¶. IO caching for CP corrections, etc. Type: string; Possible Values: NONE, SAVE, LOAD; Default: NONE. MADMP2_SLEEP¶. A helpful option, used only in debugging the MADNESS version. Type: integer; Default: 0. Table Of Contents. DFMP2; General; BASIS; DFMP2_MEM_FACTOR; DFMP2_P2_TOLERANCE; DFMP2_P_TOLERANCE; DF_BASIS_MP2; DF_INTS_NUM_THREADS; INTS_TOLERANCE; MP2_OS_SCALE; MP2_SS_SCALE; ONEPDM; OPDM_RELAX. Expert; DF_INTS_IO; MADMP2_SLEEP. Previous topic; WFN; Next topic; BASIS. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Keywords by Module ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodir_options_c/module__dfmp2-1.html:2141,update,updated,2141,psi4manual/1.0.0/autodir_options_c/module__dfmp2-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodir_options_c/module__dfmp2-1.html,2,['update'],['updated']
Deployability,"r SCF density, which is defined as the RMS value of the orbital gradient. See Table SCF Convergence & Algorithm for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. DAMPING_CONVERGENCE (SCF); SCF — The density convergence threshold after which damping is no longer performed, if it is enabled. It is recommended to leave damping on until convergence, which is the default. Type: conv double; Default: 1.0e-18. DAMPING_PERCENTAGE (DCFT); DCFT (Expert) — The amount (percentage) of damping to apply to the orbital update procedure: 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the previous iteration’s density being mixed into the current iteration) can help in cases where oscillatory convergence is observed. Type: double; Default: 0.0. DAMPING_PERCENTAGE (PSIMRCC); PSIMRCC — The amount (percentage) of damping to apply to the amplitude updates. 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the amplitudes from the previous iteration being mixed into the current iteration) can help in cases where oscillatory convergence is observed. Type: double; Default: 0.0. DAMPING_PERCENTAGE (SCF); SCF — The amount (percentage) of damping to apply to the early density updates. 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the previous iteration’s density being mixed into the current density) could help to solve problems with oscillatory convergence. Type: double; Default: 100.0. DCFT_FUNCTIONAL (DCFT); DCFT — Chooses appropriate DCFT method. Type: string; Possible Values: DC-06, DC-12, CEPA0; Default: DC-06. DCFT_GUESS (DCFT); DCFT (Expert) — Whether to read the orbitals from a previous computation, or to compute an MP2 guess. Type: string; Possible Values: CC, BCC, MP2; Default: MP2. DEBUG (CPHF); CPHF — The amount of debug informati",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/autodoc_glossary_options_c-1.html:22084,update,update,22084,psi4manual/4.0b5/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodoc_glossary_options_c-1.html,4,['update'],['update']
Deployability,"r SCF density, which is defined as the RMS value of the orbital gradient. See Table SCF Convergence & Algorithm for default convergence criteria for different calculation types. Type: conv double; Default: 1e-8. DAMPING_CONVERGENCE (SCF); SCF — The density convergence threshold after which damping is no longer performed, if it is enabled. It is recommended to leave damping on until convergence, which is the default. Type: conv double; Default: 1.0e-18. DAMPING_PERCENTAGE (DCFT); DCFT (Expert) — The amount (percentage) of damping to apply to the orbital update procedure: 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the previous iteration’s density being mixed into the current iteration) can help in cases where oscillatory convergence is observed. Type: double; Default: 0.0. DAMPING_PERCENTAGE (PSIMRCC); PSIMRCC — The amount (percentage) of damping to apply to the amplitude updates. 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the amplitudes from the previous iteration being mixed into the current iteration) can help in cases where oscillatory convergence is observed. Type: double; Default: 0.0. DAMPING_PERCENTAGE (SCF); SCF — The amount (percentage) of damping to apply to the early density updates. 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the previous iteration’s density being mixed into the current density) could help to solve problems with oscillatory convergence. Type: double; Default: 100.0. DCFT_FUNCTIONAL (DCFT); DCFT — Chooses appropriate DCFT method. Type: string; Possible Values: DC-06, DC-12, CEPA0; Default: DC-06. DCFT_GUESS (DCFT); DCFT (Expert) — Whether to read the orbitals from a previous computation, or to compute an MP2 guess. Type: string; Possible Values: CC, BCC, MP2; Default: MP2. DEBUG (CPHF); CPHF — The amount of debug informati",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/autodoc_glossary_options_c-1.html:22072,update,update,22072,psi4manual/4.0b4/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_glossary_options_c-1.html,4,['update'],['update']
Deployability,"r adapt `cmake` commands above; DepsCache handles python & addons;; # DepsMKLCache handles math; further psi4-path-advisor options handle compilers.; >>> cd objdir && make -j`getconf _NPROCESSORS_ONLN`; >>> make install; --disable-addons Disengage building against the psi4-dev-provided _optional_ link-time Add-Ons like CheMPS2.; --disable-mkl Disengage building against the psi4-dev-provided MKL libraries (`libmkl_rt`).; --intel Engage self-provided icc/icpc/ifort compilers backed by conda's psi4-dev-provided gcc/g++.; --intel-multiarch Engage self-provided icc/icpc/ifort compilers backed by conda's psi4-dev-provided gcc/g++ PLUS compile for multiple architectures (useful for cluster deployments).; --gcc Engage conda's psi4-dev-provided gcc/g++/gfortran compilers. # execute or adapt `cmake` commands above; DepsCache handles python & addons;; # DepsMKLCache handles math; further psi4-path-advisor options handle compilers.; >>> `psi4-path-advisor [your args]` -Dany_addl_cmake_vals=ON; >>> cd objdir && make -j`getconf _NPROCESSORS_ONLN`; >>> make install. Same for Linux/Mac/WSL. Substitute desired python version: 3.6, 3.7, 3.8, 3.9. Fine; to choose your own env name. Include -c psi4/label/dev to get dependencies to; build current master, as opposed to latest release.; Activate environment, conda activate; p4dev. Go to where you’ve cloned psi4. Execute psi4-path-advisor.; It gives you a basic cmake command covering python, sphinx, link-time qc; addons, and run-time qc addons. There’s a help menu -h that gives more; info. There’s other options that will also pre-configure compilers. For; example, at GaTech psi4-path-advisor --intel works. On Macs with; XCode, psi4-path-advisor --clang works. Just read the help. For users; who want a minimal build, there’s a --disable-addons, but it is generally not; encouraged. It gives you a fully; functional cmake command, but those are just setting up CMake cache; — like the plugins you can always add your own CMake variables to; the c",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/conda-1.html:9579,install,install,9579,psi4manual/1.4.0/conda-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html,9,['install'],['install']
Deployability,"r adapt `cmake` commands above; DepsCache handles python & addons;; # DepsMKLCache handles math; further psi4-path-advisor options handle compilers.; >>> cd objdir && make -j`getconf _NPROCESSORS_ONLN`; >>> make install; --disable-addons Disengage building against the psi4-dev-provided _optional_ link-time Add-Ons like CheMPS2.; --disable-mkl Disengage building against the psi4-dev-provided MKL libraries (`libmkl_rt`).; --intel Engage self-provided icc/icpc/ifort compilers backed by conda's psi4-dev-provided gcc/g++.; --intel-multiarch Engage self-provided icc/icpc/ifort compilers backed by conda's psi4-dev-provided gcc/g++ PLUS compile for multiple architectures (useful for cluster deployments).; --gcc Engage conda's psi4-dev-provided gcc/g++/gfortran compilers. # execute or adapt `cmake` commands above; DepsCache handles python & addons;; # DepsMKLCache handles math; further psi4-path-advisor options handle compilers.; >>> `psi4-path-advisor [your args]` -Dany_addl_cmake_vals=ON; >>> cd objdir && make -j`getconf _NPROCESSORS_ONLN`; >>> make install. Same for Linux/Mac/Windows. Substitute desired python version: 2.7, 3.5, 3.6. Fine; to choose your own env name. Include -c psi4/label/dev to get dependencies to; build current master, as opposed to latest release.; Activate environment, conda activate; p4dev. Go to where you’ve cloned psi4. Execute psi4-path-advisor.; It gives you a basic cmake command covering python, sphinx, link-time qc; addons, and run-time qc addons. There’s a help menu -h that gives more; info. There’s other options that will also pre-configure compilers. For; example, at GaTech psi4-path-advisor --intel works. On Macs with; XCode, psi4-path-advisor --clang works. Just read the help. For users; who want a minimal build, there’s a --disable-addons, but it is generally not; encouraged. It gives you a fully; functional cmake command, but those are just setting up CMake cache; — like the plugins you can always add your own CMake variables to; the co",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/conda-1.html:8781,install,install,8781,psi4manual/1.2.1/conda-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/conda-1.html,2,['install'],['install']
Deployability,"r adapt `cmake` commands above; DepsCache handles python & addons;; # DepsMKLCache handles math; further psi4-path-advisor options handle compilers.; >>> cd objdir && make -j`getconf _NPROCESSORS_ONLN`; >>> make install; --disable-addons Disengage building against the psi4-dev-provided _optional_ link-time Add-Ons like CheMPS2.; --disable-mkl Disengage building against the psi4-dev-provided MKL libraries (`libmkl_rt`).; --intel Engage self-provided icc/icpc/ifort compilers backed by conda's psi4-dev-provided gcc/g++.; --intel-multiarch Engage self-provided icc/icpc/ifort compilers backed by conda's psi4-dev-provided gcc/g++ PLUS compile for multiple architectures (useful for cluster deployments).; --gcc Engage conda's psi4-dev-provided gcc/g++/gfortran compilers. # execute or adapt `cmake` commands above; DepsCache handles python & addons;; # DepsMKLCache handles math; further psi4-path-advisor options handle compilers.; >>> `psi4-path-advisor [your args]` -Dany_addl_cmake_vals=ON; >>> cd objdir && make -j`getconf _NPROCESSORS_ONLN`; >>> make install. Same for Linux/Mac/Windows. Substitute desired python version: 3.5, 3.6, 3.7. Fine; to choose your own env name. Include -c psi4/label/dev to get dependencies to; build current master, as opposed to latest release.; Activate environment, conda activate; p4dev. Go to where you’ve cloned psi4. Execute psi4-path-advisor.; It gives you a basic cmake command covering python, sphinx, link-time qc; addons, and run-time qc addons. There’s a help menu -h that gives more; info. There’s other options that will also pre-configure compilers. For; example, at GaTech psi4-path-advisor --intel works. On Macs with; XCode, psi4-path-advisor --clang works. Just read the help. For users; who want a minimal build, there’s a --disable-addons, but it is generally not; encouraged. It gives you a fully; functional cmake command, but those are just setting up CMake cache; — like the plugins you can always add your own CMake variables to; the co",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/conda-1.html:8781,install,install,8781,psi4manual/1.3.2/conda-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/conda-1.html,2,['install'],['install']
Deployability,"r augmenting the vector subspace in stability check. Type: conv double; Default: 0.1. STABILITY_CHECK¶. Performs stability analysis of the DCFT energy. Type: boolean; Default: false. STABILITY_CONVERGENCE¶. Controls the convergence of the Davidson’s diagonalization in stability check. Type: conv double; Default: 1e-4. STABILITY_MAX_SPACE_SIZE¶. The maximum size of the subspace for the stability check. The program will terminate if this parameter is exceeded and the convergence (STABILITY_CONVERGENCE) is not satisfied. Type: integer; Default: 200. STABILITY_N_EIGENVALUES¶. The number of Hessian eigenvalues computed during the stability check. Type: integer; Default: 3. STABILITY_N_GUESS_VECTORS¶. The number of guess vectors used for Davidson’s diagonalization in stability check. Type: integer; Default: 20. TIKHONOW_OMEGA¶. The shift applied to the denominator in the density cumulant update iterations. Type: double; Default: 0.0. Table Of Contents. DCFT; General; ALGORITHM; AO_BASIS; DCFT_FUNCTIONAL; DCFT_TYPE; DF_BASIS_DCFT; DIIS_START_CONVERGENCE; E_CONVERGENCE; GUESS_R_CONVERGENCE; MAXITER; MOLDEN_WRITE; ODC_GUESS; QC_COUPLING; QC_TYPE; REFERENCE; RESPONSE_ALGORITHM; R_CONVERGENCE; THREE_PARTICLE. Expert; CACHELEVEL; DAMPING_PERCENTAGE; DCFT_GUESS; DIIS_MAX_VECS; DIIS_MIN_VECS; ENERGY_LEVEL_SHIFT; IGNORE_TAU; INTS_TOLERANCE; MO_RELAX; ORBITAL_LEVEL_SHIFT; RELAX_GUESS_ORBITALS; RELAX_TAU; STABILITY_ADD_VECTORS; STABILITY_AUGMENT_SPACE_TOL; STABILITY_CHECK; STABILITY_CONVERGENCE; STABILITY_MAX_SPACE_SIZE; STABILITY_N_EIGENVALUES; STABILITY_N_GUESS_VECTORS; TIKHONOW_OMEGA. Previous topic; TDHF_MEM_SAFETY_FACTOR; Next topic; ALGORITHM. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Keywords by Module ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodir_options_c/module__dcft-1.html:8436,update,updated,8436,psi4manual/1.0.0/autodir_options_c/module__dcft-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodir_options_c/module__dcft-1.html,2,['update'],['updated']
Deployability,"r by R. Di Remigio. Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to PCMSolver by R. Di Remigio. Interface to PCMSolver by R. Di Remigio¶; Code author: Roberto Di Remigio, T. Daniel Crawford, Andrew C. Simmonett; Section author: Roberto Di Remigio; Module: Keywords, PSI Variables, PCMSolver. PSI4 contains code to interface to the PCMSolver library developed; by R. Di Remigio and L. Frediani.; The PCMSolver library requires no additional licence, downloads, or; configuration. The library allows for calculations in solution with the; polarizable continuum model (PCM), a continuum solvation model [Tomasi:2005:2999]. Installation¶; Binary. PCMSolver is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell).; If using the PSI4 binary, PCMSolver has already been installed alongside.; If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; PCMSolver can be obtained through conda install pcmsolver -c psi4.; Then enable it as a feature with ENABLE_PCMSolver,; hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect PCMSolver and activate dependent code. To remove a conda installation, conda remove pcmsolver. Source. If using PSI4 built from source and you want PCMSolver built from; from source also,; enable it as a feature with ENABLE_PCMSolver,; and let the build system fetch and build it and activate dependent code. Using the polarizable continuum model¶; The inclusion of a PCM description of the solvent into your calculation; can be achieved in two ways in PSI4, using either the PCMSolver or ddx package.; PCMSolver is based on a boundary-element discretisation [Cances:1998:309],; while ddx is based on a domain decomposition approach; [Cances:2013:054111] making it linear scaling.; For more details about ddx see the section on ddx.; Using PCMsolver is achieved instead by settin",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/pcmsolver.html:1006,install,installed,1006,psi4manual/master/pcmsolver.html,https://psicode.org,https://psicode.org/psi4manual/master/pcmsolver.html,2,['install'],"['install', 'installed']"
Deployability,"r case. One Electron Integral Algorithm Overview¶; The following table summarizes which implementation is used; for each type of one electron integral in PSI4. Algorithms used for One Electron Integrals¶. Integral; Class; Implementation; Comment. Three-Center Overlap; ThreeCenterOverlapInt; Libint2; using libint2::Operator::delta for 4-center integrals. Angular Momentum; AngularMomentumInt; M-D. Dipole; DipoleInt; Libint2; no derivatives supported. Electric Field; ElectricFieldInt; Libint2; using first derivative of libint2::Operator::nuclear. Coulomb Potential; ElectrostaticInt; Libint2; evaluated for a single origin and unity charge. Kinetic; KineticInt; Libint2. Multipole Potential; MultipolePotentialInt; M-D; arbitrary order derivative of 1/R supported. Multipole Moments; MultipoleInt; M-D; arbitrary order multipoles supported, including nuclear gradients. Nabla Operator; NablaInt; Libint2; using first derivative of libint2::Operator::overlap. Overlap; OverlapInt; Libint2. Nuclear Coulomb Potential; PotentialInt; Libint2; assumes nuclear centers/charges as the potential. PCM Potential; PCMPotentialInt; Libint2; parallelized over charge points. Quadrupole; QuadrupoleInt; Libint2. Traceless Quadrupole; TracelessQuadrupoleInt; Libint2. Relativistic Potential; RelPotentialInt; Libint2. table of contents. Integrals in PSI4; Introduction; The older style; The new syntax; Sieving; Buffer address; Density Screening; Shell blocking; Permutational symmetry; Using bra-ket symmetry; Instantiating integral objects. One Electron Integrals in PSI4; Calling compute_shell(int P, int Q); Accessing integrals; Derivative Integrals; Changes to External Potential Engines; New Operators Available; Shell Pairs; One Electron Integral Algorithm Overview. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.6;  · . PSI4. Integrals in PSI4. © Copyright 2022, The Psi4 Project.; Last updated on Thursday, 19 May 2022 08:57PM.; Created using Sphinx 4.5.0.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/prog_integrals.html:19353,update,updated,19353,psi4manual/1.6.x/prog_integrals.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/prog_integrals.html,1,['update'],['updated']
Deployability,"r charge. Properties evaluated on a grid¶; Certain properties may be evaluated a user-specified grid points. The grid; points are completely arbitrary and are specified by providing a file called; grid.dat containing the x,y,z values separated with spaces for each point in order:; 1; 2; 3; 4x1 y1 z1; x2 y2 z2; ..........; xn yn zn. The grid.dat file is completely free form; any number of spaces and/or newlines; between entries is permitted. The units of the coordinates in grid.dat are the; same as those used to specify the molecule’s geometry, and the output; quantities are always in atomic units. The requested properties will be; written out in the same order as the grid point specification in grid.dat; see; the above table for the format and file name of the output.; The grid may be generated in the input file using standard Python loops. By; capturing the wavefunction used to evaluate the one-electron properties, the; values at each grid point may be captured as Python arrays in the input file:; 1; 2; 3; 4; 5E, wfn = prop('scf', properties=[""GRID_ESP"", ""GRID_FIELD""], return_wfn=True); Vvals = wfn.oeprop.Vvals(); Exvals = wfn.oeprop.Exvals(); Eyvals = wfn.oeprop.Eyvals(); Ezvals = wfn.oeprop.Ezvals(). In this example, the Vvals array contains the electrostatic potential at each; grid point, in the order that the grid was specified, while the Exvals,; Eyvals and Ezvals arrays contain the x, y and z components of the; electric field, respectively; all of these arrays can be iterated and; manipulated using standard Python syntax. For a complete demonstration of this; utility, see the props4 test case. table of contents. Evaluation of One-Electron Properties — oeprop(); Basic Keywords; Properties evaluated on a grid. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Theoretical Methods: SCF to FCI. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 July 2018 04:21AM.; Created using Sphinx 1.7.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/oeprop-1.html:5662,update,updated,5662,psi4manual/1.2.1/oeprop-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/oeprop-1.html,2,['update'],['updated']
Deployability,"r complexes.; Geometries taken from https://gitlab.com/piotr.zuchowski/o24x5/-/tree/4ec3cae0546b6ae4f4f2cf28482cd164c8323cc6.; Reference interaction energies taken from J. Chem. Phys. 154, 134106 (2021) https://doi.org/10.1063/5.0043793.; Variant without midbonds. no | name | subset. 1 | CN - He | DD; 2 | NH - He | DD; 3 | C2H3 - C2H4 | DD; 4 | O2 - H2 | DD; 5 | NH - Ar | DD; 6 | CN - Ar | DD; 7 | O2 - N2 | DD; 8 | H2O - O2(sp) | DD; 9 | O2 - O2 | DD. 10 | NH - NH | ED; 11 | CH2O - NH2 | ED; 12 | H2O - Na | ED; 13 | H2O - OH | ED; 14 | H2O - O2H | ED; 15 | Li - NH3(gm) | ED; 16 | Li - O2 | MX; 17 | CN - H2 | MX; 18 | Li - NH3(lm) | MX; 19 | H2O - O2(gm) | MX; 20 | Na - Li | MX; 21 | CO2 - O2 | MX; 22 | C2H3 - CO2 | MX; 23 | He* - He* | MX; 24 | HF - CO+ | MX. cp 'on'; subset; - 'DD' dispersion-dominated systems; - 'ED' electrostatically-dominated systems; - 'MX' mixed-interaction systems. A24¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries from <Reference>.; Reference interaction energies from Rezac and Hobza, JCTC (in press). cp 'off' <erase this comment and after unless on is a valid option> || 'on'; rlxd 'off' <erase this comment and after unless on is valid option> || 'on'; benchmark. '<benchmark_name>' <Reference>.; \(\Rightarrow\) '<default_benchmark_name>' \(\Leftarrow\) <Reference>. subset. 'small' <members_description>; 'large' <members_description>; '<subset>' <members_description>. table of contents. Database — database(); Output; Available Databases; CORE; BAKERJCC93; BAKERJCC96; BASIC; HTR40; A24alt; HTBH; JSCH; HBC6; S22by5; NBC10; HSG; NCB31; BENCH12; RSE42; SSI; S22; RGC10; O24by5mb; S66by8; BBI; NHTBH; ACENES; S66; O24by5; A24. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Psithon Functions: Invoking a Calculation; Database — database(). © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/db.html:26302,update,updated,26302,psi4manual/1.7.x/db.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/db.html,1,['update'],['updated']
Deployability,"r core.Dimension (optional)) – If a single dense numpy array is given, a dimension can be supplied to; apply irreps to this array. Note that this discards all extra information; given in the matrix besides the diagonal blocks determined by the passed; dimension.; dim2 – Same as dim1 only if using a Psi4.Dimension object. Returns:matrix – Returns the given Psi4 object. Return type:Matrix or Vector. Notes; This is a generalized function to convert a NumPy array to a Psi4 object; Examples; 1; 2>>> data = np.random.rand(20); >>> vector = array_to_matrix(data). 1; 2; 3; 4>>> irrep_data = [np.random.rand(2, 2), np.empty(shape=(0,3)), np.random.rand(4, 4)]; >>> matrix = array_to_matrix(irrep_data); >>> print matrix.rowspi().to_tuple(); (2, 0, 4). Matrix to Array¶; A general function that converts NumPy arrays to PSI4 data objects. psi4.driver.p4util.numpy_helper._to_array(matrix, copy=True, dense=False)[source]¶; Converts a Psi4 Matrix or Vector to a numpy array. Either copies the data or simply; consturcts a view. Parameters:; matrix (Matrix or Vector) – Pointers to which Psi4 core class should be used in the construction.; copy (bool) – Copy the data if True, return a view otherwise; dense (bool) – Converts irreped Psi4 objects to diagonally blocked dense arrays. Returns a list of arrays otherwise. Returns:array – Returns either a list of np.array’s or the base array depending on options. Return type:np.array or list of of np.array. Notes; This is a generalized function to convert a Psi4 object to a NumPy array; Examples; 1; 2; 3; 4; 5>>> data = psi4.Matrix(3, 3); >>> data._to_array(); [[ 0. 0. 0.]; [ 0. 0. 0.]; [ 0. 0. 0.]]. table of contents. Interface to NumPy; Basics; NumPy Views; PSI4 Data Objects with Irreps; Array to Matrix; Matrix to Array. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/numpy-1.html:5436,update,updated,5436,psi4manual/1.1.0/numpy-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/numpy-1.html,2,['update'],['updated']
Deployability,"r either monomer. get_tensor_pqQ(self, arg0, arg1); Debug only: fetches 3-index intermediate from disk and return as matrix. metric(self); Obtains the FDDS metric. metric_inv(self); Obtains the FDDS metric_inv. print_tensor_pqQ(self, arg0, arg1, arg2); Debug only: prints formatted 3-index intermediate to file. project_densities(self, arg0); Projects a density from the primary AO to auxiliary AO space. Methods Documentation. R_A(self: psi4.core.FDDS_Dispersion) → psi4.core.Matrix¶; Obtains (R^t)^-1 for monomer A. R_B(self: psi4.core.FDDS_Dispersion) → psi4.core.Matrix¶; Obtains (R^t)^-1 for monomer B. aux_overlap(self: psi4.core.FDDS_Dispersion) → psi4.core.Matrix¶; Obtains the FDDS aux_overlap. form_aux_matrices(self: psi4.core.FDDS_Dispersion, arg0: str, arg1: float) → Dict[str, psi4.core.Matrix]¶; Forms the uncoupled amplitudes and other matrices for either monomer. form_unc_amplitude(self: psi4.core.FDDS_Dispersion, arg0: str, arg1: float) → psi4.core.Matrix¶; Forms the uncoupled amplitudes for either monomer. get_tensor_pqQ(self: psi4.core.FDDS_Dispersion, arg0: str, arg1: Tuple[int, int, int]) → psi4.core.Matrix¶; Debug only: fetches 3-index intermediate from disk and return as matrix. metric(self: psi4.core.FDDS_Dispersion) → psi4.core.Matrix¶; Obtains the FDDS metric. metric_inv(self: psi4.core.FDDS_Dispersion) → psi4.core.Matrix¶; Obtains the FDDS metric_inv. print_tensor_pqQ(self: psi4.core.FDDS_Dispersion, arg0: str, arg1: str, arg2: Tuple[int, int, int]) → None¶; Debug only: prints formatted 3-index intermediate to file. project_densities(self: psi4.core.FDDS_Dispersion, arg0: List[psi4.core.Matrix]) → List[psi4.core.Matrix]¶; Projects a density from the primary AO to auxiliary AO space. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. PSI4 API: Linking C++ and Python; FDDS_Dispersion. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/api/psi4.core.fdds_dispersion.html:2497,update,updated,2497,psi4manual/1.5.0/api/psi4.core.fdds_dispersion.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/api/psi4.core.fdds_dispersion.html,1,['update'],['updated']
Deployability,"r general psi4 use, you must enable the psi4 executable to be found through any of:. prepending to PATH in shell, ~/.bashrc, ~/.tcshrc, or PBS cmd file; activating the conda environment (p4env above) in shell, ~/.bashrc, or PBS cmd file; supplying full path to executable (shell or PBS cmd file). Similarly, the scratch directory (see Scratch Files and Elementary Restart) must be specified through:. defining PSI_SCRATCH in shell, ~/.bashrc, ~/.tcshrc, or PBS cmd file. Suitable values for these variables have been printed to screen during installation (see last codeblock in step 6). Useful Commands¶. Update to latest PSI4 version; 1>>> conda update psi4. Install into a conda environment “p4env” instead of “root”. Second command only works on bash; for csh/tsch, setenv PATH /path/to/miniconda/envs/p4env/bin:$PATH instead. This creates a sandbox with just PSI4 and python (loaded as dependency).; 1; 2>>> conda create -y -n p4env psi4; >>> source activate p4env. Install a particular PSI4 version; 1>>> conda install psi4=0.1.12. Uninstall PSI4 from current environment; 1>>> conda remove psi4. Troubleshooting¶. If the target computer doesn’t have libc >= 2.7 (released c.2007; for reference, 2.10 is newer than 2.7; unlike most libraries, libc generally not available in multiple versions on a computer), the PSI4 conda package won’t work.; 1; 2; 3; 4; 5; 6# unsuitable computer; >>> ldd --version; ldd (GNU libc) 2.5; # suitable computer; >>> ldd --version; ldd (GNU libc) 2.17. It is of greatest importance that the PSI4 executable be linked against conda libpython.so not against any system libpython.so. This is arranged by setting RPATH to seek libraries relative to executable (thanks, conda binary relocation routine!). The conda PSI4 executable is not vulnerable to interference from your LD_LIBRARY_PATH settings. Below shows a well-linked executable. no libraries “not found”; fundamental libraries like libc, ld-linux, pthreads found system libraries to link against; libpython li",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/conda-1.html:18620,install,install,18620,psi4manual/1.1.0/conda-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/conda-1.html,2,['install'],['install']
Deployability,"r generating symmetry adapted linear combinations of Cartesian displacements; Methods Summary. create_matrices(self, basename, factory); Return a vector of matrices with the SALC symmetries. matrix(self); Return the SALCs. matrix_irrep(self, h); Return only the SALCS in irrep h. ncd(self); Return the number of cartesian displacements SALCs. print_out(self); Print the SALC to the output file. salc_name(self, i); Return the name of SALC #i. Methods Documentation. create_matrices(self: psi4.core.CdSalcList, basename: str, factory: psi4.core.MatrixFactory) → List[psi4.core.Matrix]¶; Return a vector of matrices with the SALC symmetries. Dimensions determined by factory. matrix(self: psi4.core.CdSalcList) → psi4.core.Matrix¶; Return the SALCs. matrix_irrep(self: psi4.core.CdSalcList, h: int) → psi4.core.Matrix¶; Return only the SALCS in irrep h. ncd(self: psi4.core.CdSalcList) → int¶; Return the number of cartesian displacements SALCs. print_out(self: psi4.core.CdSalcList) → None¶; Print the SALC to the output file. salc_name(self: psi4.core.CdSalcList, i: int) → str¶; Return the name of SALC #i. create_matrices(self: psi4.core.CdSalcList, basename: str, factory: psi4.core.MatrixFactory) → List[psi4.core.Matrix]; Return a vector of matrices with the SALC symmetries. Dimensions determined by factory. matrix(self: psi4.core.CdSalcList) → psi4.core.Matrix; Return the SALCs. matrix_irrep(self: psi4.core.CdSalcList, h: int) → psi4.core.Matrix; Return only the SALCS in irrep h. ncd(self: psi4.core.CdSalcList) → int; Return the number of cartesian displacements SALCs. print_out(self: psi4.core.CdSalcList) → None; Print the SALC to the output file. salc_name(self: psi4.core.CdSalcList, i: int) → str; Return the name of SALC #i. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 July 2018 04:21AM.; Created using Sphinx 1.7.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/api/psi4.core.cdsalclist.html:2135,update,updated,2135,psi4manual/1.2.1/api/psi4.core.cdsalclist.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/api/psi4.core.cdsalclist.html,1,['update'],['updated']
Deployability,"r instructs otherwise; keep = yes.match(str(kwargs['keep'])) if 'keep' in kwargs else False; os.chdir('..'); try:; if keep or ('path' in kwargs):; core.print_out('\n CFOUR scratch files have been kept in %s\n' % (psioh.get_default_path() + cfour_tmpdir)); else:; shutil.rmtree(cfour_tmpdir); except OSError as e:; print('Unable to remove CFOUR temporary directory %s' % e, file=sys.stderr); exit(1). # Return to submission directory and reopen output file; os.chdir(current_directory). core.print_out('\n'); p4util.banner(' Cfour %s %s Results ' % (name.lower(), calledby.capitalize())); core.print_variables(); if c4grad is not None:; psi_grad.print_out(). core.print_out('\n'); p4util.banner(' Cfour %s %s Results ' % (name.lower(), calledby.capitalize())); core.print_variables(); if c4grad is not None:; psi_grad.print_out(). # Quit if Cfour threw error; if 'CFOUR ERROR CODE' in core.variables():; raise ValidationError(""""""Cfour exited abnormally.""""""). P4C4_INFO.clear(); P4C4_INFO.update(internal_p4c4_info). optstash.restore(). # new skeleton wavefunction w/mol, highest-SCF basis (just to choose one), & not energy; # Feb 2017 hack. Could get proper basis in skel wfn even if not through p4 basis kw; if core.get_global_option('BASIS') in ["""", ""(AUTO)""]:; gobas = ""sto-3g""; else:; gobas = core.get_global_option('BASIS'); basis = core.BasisSet.build(molecule, ""ORBITAL"", gobas); if basis.has_ECP():; raise ValidationError(""""""ECPs not hooked up for Cfour""""""); wfn = core.Wavefunction(molecule, basis); for k, v in psivar.items():; wfn.set_variable(k.upper(), float(v)). optstash.restore(). if dertype == 0:; finalquantity = psivar['CURRENT ENERGY']; elif dertype == 1:; finalquantity = psi_grad; wfn.set_gradient(finalquantity); if finalquantity.rows(0) < 20:; core.print_out('CURRENT GRADIENT'); finalquantity.print_out(); elif dertype == 2:; pass; #finalquantity = finalhessian; #wfn.set_hessian(finalquantity); #if finalquantity.rows(0) < 20:; # core.print_out('CURRENT HESSIAN'); # finalqua",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/procrouting/interface_cfour.html:13144,update,update,13144,psi4manual/1.7.x/_modules/psi4/driver/procrouting/interface_cfour.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/procrouting/interface_cfour.html,4,['update'],['update']
Deployability,"r molecular hydrogen. cc31; CCSD/sto-3g optical rotation calculation (both gauges) at two frequencies on methyloxirane. scf6; Tests RHF/ROHF/UHF SCF gradients. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). dct8; DCT calculation for the NH3+ radical using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly update ref_dft_2e/xc due to new BraggSlater radii. pywrap-align; apply linear fragmentation algorithm to a water cluster. scf-hess2; UHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. This test should match RHF values exactly. cc13c; Tests RHF CCSD(T)gradients. dct-grad3; Restricted DF-DCT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. fnocc1; Test QCISD(T) for H2O/cc-pvdz Energy. sapt3; SAPT2+3(CCD) aug-cc-pVDZ+midbond computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. cc8; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. fci-tdm; He2+ FCI/cc-pVDZ Transition Dipole Moment. dfmp2-grad4; DF-MP2 cc-pVDZ gradient for the NO molecule. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. casscf-fzc-sp; CASSCF/6-31",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html:19576,update,update,19576,psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html,4,['update'],['update']
Deployability,"r of atoms in the system.; The second line for each xyz file can be blank (interpreted as no comment), anything (interpreted as a comment), or two integers and anything (interpreted as charge, multiplicity, and remainder as comment).; The third and subsequent lines have four fields: the element symbol and the three cartesian coordinates in angstroms. The atom lines should not contain any dummy atoms (what’s the use in cartesian form). For dimer systems, an algorithm is used to apportion the atoms into two fragments; thus the atoms need not be arranged with all fragmentA atoms before all fragmentB atoms. The algorithm will fail for very closely arranged fragments. For dimers, any charge and multiplicity from the second line will be applied to fragmentA (python); charge and multiplicity may need to be redistributed later in the editing step. Run script psi4/lib/scripts/ixyz2database.py. Move into the directory where all your xyz files are located. Run the; script, probably as $PSIDATADIR/scripts/ixyz2database.py. (If you; run it in place, there won’t be any path problems. It will ask a number of; questions about your intended database and generate a python file; named for your database. Uppercase is preferable for database names; (according to Sherrill lab convention). Note your choice for the route; variable for the next step. Edit file database.py. According to your responses in to questions in the ixyz2database.py script,; several bullets will be printed of edits you necessarily or optionally; should make. Copy your new database into psi4/lib/databases. Previous topic; Defining a Method Alias; Next topic; Contributions: Intro to Programming in PSI4; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Customization: Adding Simple Extensions ». © Copyright 2012, The Psi4 Project.; Last updated on Oct 16, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/quickadddatabase-1.html:4221,update,updated,4221,psi4manual/4.0b3/quickadddatabase-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/quickadddatabase-1.html,2,['update'],['updated']
Deployability,"r of atoms in the system.; The second line for each xyz file can be blank (interpreted as no comment), anything (interpreted as a comment), or two integers and anything (interpreted as charge, multiplicity, and remainder as comment).; The third and subsequent lines have four fields: the element symbol and the three cartesian coordinates in angstroms. The atom lines should not contain any dummy atoms (what’s the use in cartesian form). For dimer systems, an algorithm is used to apportion the atoms into two fragments; thus the atoms need not be arranged with all fragmentA atoms before all fragmentB atoms. The algorithm will fail for very closely arranged fragments. For dimers, any charge and multiplicity from the second line will be applied to fragmentA (python); charge and multiplicity may need to be redistributed later in the editing step. Run script psi4/lib/scripts/ixyz2database.py. Move into the directory where all your xyz files are located. Run the; script, probably as $PSIDATADIR/scripts/ixyz2database.py. (If you; run it in place, there won’t be any path problems. It will ask a number of; questions about your intended database and generate a python file; named for your database. Uppercase is preferable for database names; (according to Sherrill lab convention). Note your choice for the route; variable for the next step. Edit file database.py. According to your responses in to questions in the ixyz2database.py script,; several bullets will be printed of edits you necessarily or optionally; should make. Copy your new database into psi4/lib/databases. Previous topic; Defining a Method Alias; Next topic; Contributions: Intro to Programming in PSI4; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Customization: Adding Simple Extensions ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 25, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/quickadddatabase-1.html:4221,update,updated,4221,psi4manual/4.0b4/quickadddatabase-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/quickadddatabase-1.html,2,['update'],['updated']
Deployability,"r of atoms in the system.; The second line for each xyz file can be blank (interpreted as no comment), anything (interpreted as a comment), or two integers and anything (interpreted as charge, multiplicity, and remainder as comment).; The third and subsequent lines have four fields: the element symbol and the three cartesian coordinates in angstroms. The atom lines should not contain any dummy atoms (what’s the use in cartesian form). For dimer systems, an algorithm is used to apportion the atoms into two fragments; thus the atoms need not be arranged with all fragmentA atoms before all fragmentB atoms. The algorithm will fail for very closely arranged fragments. For dimers, any charge and multiplicity from the second line will be applied to fragmentA (python); charge and multiplicity may need to be redistributed later in the editing step. Run script psi4/lib/scripts/ixyz2database.py. Move into the directory where all your xyz files are located. Run the; script, probably as $PSIDATADIR/scripts/ixyz2database.py. (If you; run it in place, there won’t be any path problems. It will ask a number of; questions about your intended database and generate a python file; named for your database. Uppercase is preferable for database names; (according to Sherrill lab convention). Note your choice for the route; variable for the next step. Edit file database.py. According to your responses in to questions in the ixyz2database.py script,; several bullets will be printed of edits you necessarily or optionally; should make. Copy your new database into psi4/lib/databases. Previous topic; Defining a Method Alias; Next topic; Contributions: Intro to Programming in PSI4; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Customization: Adding Simple Extensions ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/quickadddatabase-1.html:4221,update,updated,4221,psi4manual/4.0b5/quickadddatabase-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/quickadddatabase-1.html,2,['update'],['updated']
Deployability,"r remove any dependency or ecosystem packages.; Possibly: for any relevant addition, make sure -D CMAKE_INSIST_FIND_PACKAGE_<project>=ON or; -D ENABLE_<project>=ON is set in build.sh and bld.bat.; Possibly: add or release version constraints or architecture constraints (e.g., [not win]) on packages. Submit the PR and rerender (cmd above). Monitor the CI.; When all CI lanes are passing and the tag is final on the maintenance branch, rerender (may be; no-op) and merge the PR.; After all the packages are built on main and show up at https://anaconda.org/conda-forge/psi4/files; with a couple downloads, this means they’re been mirrored and are generally installable. Announce; on slack general channel. Do final pass before release tag¶. Check that psi4/external/ repos and commits have been updated to match conda recipes sources. Also check versions with conda_build_config.yaml; Check psi4/doc/sphinxman/source/introduction.rst for any compiler and Python minimum requirements to edit. Tag (pre)release¶. Thorough version bump directions at master http://psicode.org/psi4manual/master/manage_git.html#how-to-bump-a-version; Below is tl;dr; # be on clean master up-to-date with upstream in both commits and tags; # * mind which version strings get ""v"" and which don't; # * if not fork, replace ""upstream"" with ""origin"". >>> vi psi4/metadata.py; >>> git diff; diff --git a/psi4/metadata.py b/psi4/metadata.py; ...; -__version__ = '1.3rc1'; -__version_long = '1.3rc1+5a7522a'; -__version_upcoming_annotated_v_tag = '1.3rc2'; +__version__ = '1.3rc2'; +__version_long = '1.3rc2+zzzzzzz'; +__version_upcoming_annotated_v_tag = '1.3rc3'. >>> git add psi4/metadata.py; >>> git commit -m ""v1.3rc2""; [master bc8d7f5] v1.3rc2. >>> git log --oneline | head -1; bc8d7f5 v1.3rc2; >>> git tag -a v1.3rc2 bc8d7f5 -m ""v1.3rc2"". # goto GH:psi4/psi4 > Settings > Branches > master > Edit; # https://github.com/psi4/psi4/settings/branch_protection_rules/424295; # uncheck ""Do not allow bypassing the above settings""",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/manage_release.html:9184,release,release,9184,psi4manual/1.9.x/manage_release.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/manage_release.html,2,['release'],['release']
Deployability,"r simply; constructs a view. Parameters:; matrix (Matrix or Vector) – Pointers to which Psi4 core class should be used in the construction.; copy (bool, optional) – Copy the data if True, return a view otherwise; dense (bool, optional) – Converts irreped Psi4 objects to diagonally blocked dense arrays if True. Returns a list of arrays otherwise. Returns:array – Returns either a list of np.array’s or the base array depending on options. Return type:ndarray or list of ndarray. Notes; This is a generalized function to convert a Psi4 object to a NumPy array; Examples; >>> data = psi4.Matrix(3, 3); >>> data.to_array(); [[ 0. 0. 0.]; [ 0. 0. 0.]; [ 0. 0. 0.]]. to_serial(); Converts an object with a .nph accessor to a serialized dictionary. trace(self: psi4.core.Matrix) → float; Returns the trace of the matrix. transform(*args, **kwargs); Overloaded function. transform(self: psi4.core.Matrix, transformer: psi4.core.Matrix) -> None. Transform this matrix with transformer. transform(self: psi4.core.Matrix, a: psi4.core.Matrix, transformer: psi4.core.Matrix) -> None. Transform A with transformer. transpose(self: psi4.core.Matrix) → psi4.core.Matrix; Creates a new matrix that is the transpose of this matrix. transpose_this(self: psi4.core.Matrix) → None; Transpose the matrix in-place. static triplet(A, B, C, transA, transB, transC). vector_dot(self: psi4.core.Matrix, rhs: psi4.core.Matrix) → float; Returns the vector dot product of this with rhs. zero(self: psi4.core.Matrix) → None; Zero all elements of the matrix. zero_diagonal(self: psi4.core.Matrix) → None; Zero the diagonal of the matrix. zero_lower(self: psi4.core.Matrix) → None; Zero the lower triangle. zero_upper(self: psi4.core.Matrix) → None; Zero the upper triangle. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/api/psi4.core.matrix.html:27362,update,updated,27362,psi4manual/1.3.2/api/psi4.core.matrix.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.matrix.html,1,['update'],['updated']
Deployability,"r singles and doubles (CCSD); RHF; dipole, quadrupole, polarizability, rotation, roa_tensor. dct; density cumulant (functional) theory; [manual]; RHF/UHF; Listed here. omp2; orbital-optimized second-order; MP perturbation theory; [manual]; RHF/UHF; Listed here; Density fitted only. omp3; orbital-optimized third-order; MP perturbation theory; [manual]; RHF/UHF; Listed here; Density fitted only. omp2.5; orbital-optimized MP2.5; [manual]; RHF/UHF; Listed here; Density fitted only. olccd; orbital optimized LCCD; [manual]; RHF/UHF; Listed here; Density fitted only. eom-cc2; 2nd-order approximate EOM-CCSD; RHF; oscillator_strength, rotational_strength. eom-ccsd; Equation-of-motion CCSD (EOM-CCSD); RHF; oscillator_strength, rotational_strength. cisd, cisdt,; cisdt, cisdtq,; ci5, …, fci; Configuration interaction; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. casscf, rasscf; Multi-configurational SCF; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. adc(0), adc(1),; …, adc(3),; cvs-adc(0), …; cvs-adc(3); Algebraic-diagrammatic construction methods; [manual]; RHF/UHF; dipole, transition_dipole, oscillator_strength,; rotational_strength. Parameters. name (str) – 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. properties (List[str]) – \(\Rightarrow\) [] \(\Leftarrow\) || ['rotation', 'polarizability', 'oscillator_strength', 'roa'] || etc.; Indicates which properties should be computed. Defaults to dipole and quadrupole. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples. >>> # [1] Optical rotation calculation; >>> properties('cc2', properties=['rotation']). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Psithon Functions: Invoking a Calculation; Property. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/prop-1.html:2775,update,updated,2775,psi4manual/1.4.0/prop-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/prop-1.html,2,['update'],['updated']
Deployability,"r singles and doubles (CCSD); RHF; dipole, quadrupole, polarizability, rotation, roa_tensor. dct; density cumulant (functional) theory; [manual]; RHF/UHF; Listed here. omp2; orbital-optimized second-order; MP perturbation theory; [manual]; RHF/UHF; Listed here; Density fitted only. omp3; orbital-optimized third-order; MP perturbation theory; [manual]; RHF/UHF; Listed here; Density fitted only. omp2.5; orbital-optimized MP2.5; [manual]; RHF/UHF; Listed here; Density fitted only. olccd; orbital optimized LCCD; [manual]; RHF/UHF; Listed here; Density fitted only. eom-cc2; 2nd-order approximate EOM-CCSD; RHF; oscillator_strength, rotational_strength. eom-ccsd; Equation-of-motion CCSD (EOM-CCSD); RHF; oscillator_strength, rotational_strength. cisd, cisdt,; cisdt, cisdtq,; ci5, …, fci; Configuration interaction; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. casscf, rasscf; Multi-configurational SCF; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. adc(0), adc(1),; …, adc(3),; cvs-adc(0), …; cvs-adc(3); Algebraic-diagrammatic construction methods; [manual]; RHF/UHF; dipole, transition_dipole, oscillator_strength,; rotational_strength. Parameters. name (str) – 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. properties (List[str]) – \(\Rightarrow\) [] \(\Leftarrow\) || ['rotation', 'polarizability', 'oscillator_strength', 'roa'] || etc.; Indicates which properties should be computed. Defaults to dipole and quadrupole. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples. >>> # [1] Optical rotation calculation; >>> properties('cc2', properties=['rotation']). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Psithon Functions: Invoking a Calculation; Property. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/prop-1.html:2775,update,updated,2775,psi4manual/1.5.0/prop-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/prop-1.html,2,['update'],['updated']
Deployability,"r to centimeters conversion factor. amu2g; 1.660539040000E-24; amu2g [g] Atomic mass units to grams conversion factor. amu2kg; 1.660539040E-27; amu2kg [kg] Atomic mass units to kg conversion factor. au2amu; 0.000548579909070; au2amu [u] Atomic units (m$@@e$) to atomic mass units conversion factor. hartree2J; 4.359744650E-18; hartree2J [J] Hartree to joule conversion factor. hartree2aJ; 4.359744650; hartree2aJ [aJ] Hartree to attojoule (10$^{-18}$J) conversion factor. cal2J; 4.184; cal2J [J] Calorie to joule conversion factor. dipmom_au2si; 8.478353552E-30; dipmom_au2si [C m] Atomic units to SI units (Cm) conversion factor for dipoles. dipmom_au2debye; 2.541746451895025916414946904; dipmom_au2debye [???] Atomic units to Debye conversion factor for dipoles. dipmom_debye2si; 3.335640951E-30; dipmom_debye2si [???] Debye to SI units (Cm) conversion factor for dipoles. c_au; 137.035999139; c_au [] Speed of light in atomic units. hartree2ev; 27.21138602; hartree2ev [eV] Hartree to eV conversion factor. hartree2wavenumbers; 219474.6313702; hartree2wavenumbers [cm^-1] Hartree to cm$^{-1}$ conversion factor. hartree2kcalmol; 627.5094737775374055927342256; hartree2kcalmol [kcal mol^-1] Hartree to kcal mol$^{-1}$ conversion factor. hartree2kJmol; 2625.4996382852165050; hartree2kJmol [kJ mol^-1] Hartree to kilojoule mol$^{-1}$ conversion factor. hartree2MHz; 6579683920.711; hartree2MHz [MHz] Hartree to MHz conversion factor. kcalmol2wavenumbers; 349.7550882318031839256652313; kcalmol2wavenumbers [kcal cm mol^-1] kcal mol$^{-1}$ to cm$^{-1}$ conversion factor. e0; 8.854187817E-12; e0 [F m^-1] Vacuum permittivity (Fm$^{-1}$). na; 6.022140857E+23; na [mol^-1] Avogadro’s number. me; 9.10938356E-31; me [kg] Electron rest mass (in kg). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Appendices; Physical Constants. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodoc_physconst-1.html:39324,update,updated,39324,psi4manual/1.4.0/autodoc_physconst-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_physconst-1.html,2,['update'],['updated']
Deployability,"r to centimeters conversion factor. amu2g; 1.660539040000E-24; amu2g [g] Atomic mass units to grams conversion factor. amu2kg; 1.660539040E-27; amu2kg [kg] Atomic mass units to kg conversion factor. au2amu; 0.000548579909070; au2amu [u] Atomic units (m$@@e$) to atomic mass units conversion factor. hartree2J; 4.359744650E-18; hartree2J [J] Hartree to joule conversion factor. hartree2aJ; 4.359744650; hartree2aJ [aJ] Hartree to attojoule (10$^{-18}$J) conversion factor. cal2J; 4.184; cal2J [J] Calorie to joule conversion factor. dipmom_au2si; 8.478353552E-30; dipmom_au2si [C m] Atomic units to SI units (Cm) conversion factor for dipoles. dipmom_au2debye; 2.541746451895025916414946904; dipmom_au2debye [???] Atomic units to Debye conversion factor for dipoles. dipmom_debye2si; 3.335640951E-30; dipmom_debye2si [???] Debye to SI units (Cm) conversion factor for dipoles. c_au; 137.035999139; c_au [] Speed of light in atomic units. hartree2ev; 27.21138602; hartree2ev [eV] Hartree to eV conversion factor. hartree2wavenumbers; 219474.6313702; hartree2wavenumbers [cm^-1] Hartree to cm$^{-1}$ conversion factor. hartree2kcalmol; 627.5094737775374055927342256; hartree2kcalmol [kcal mol^-1] Hartree to kcal mol$^{-1}$ conversion factor. hartree2kJmol; 2625.4996382852165050; hartree2kJmol [kJ mol^-1] Hartree to kilojoule mol$^{-1}$ conversion factor. hartree2MHz; 6579683920.711; hartree2MHz [MHz] Hartree to MHz conversion factor. kcalmol2wavenumbers; 349.7550882318031839256652313; kcalmol2wavenumbers [kcal cm mol^-1] kcal mol$^{-1}$ to cm$^{-1}$ conversion factor. e0; 8.854187817E-12; e0 [F m^-1] Vacuum permittivity (Fm$^{-1}$). na; 6.022140857E+23; na [mol^-1] Avogadro’s number. me; 9.10938356E-31; me [kg] Electron rest mass (in kg). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Physical Constants. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html:39324,update,updated,39324,psi4manual/1.5.0/autodoc_physconst-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html,2,['update'],['updated']
Deployability,"r universal; effect) runs libderiv from Libint for derivative integrals and erd for; non-derivative integrals. Warning; The interface between erd and libderiv is not fully; debugged. So analytic gradients, particularly density-fitted ones,; are wrong, as are ESP calculations and some energies for long-range; corrected (“omega”) functionals. Insofar as faulty answers are; anticipated with INTEGRAL_PACKAGE erd, PSI4 will; throw an error if you try to execute that class of computation. But; there may be more, so use with caution. Installation¶; Binary. ERD is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; erd can be obtained through conda install erd.; Then enable it as a feature with ENABLE_erd,; hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect erd and activate dependent code.; To remove a conda installation, conda remove erd. Source. If using PSI4 built from source and you want erd built from; from source also,; enable it as a feature with ENABLE_erd,; and let the build system fetch and build it and activate dependent code. How to configure erd for building Psi4¶; Role and Dependencies. Role — In PSI4, ERD is a library that provides alternate; integrals.; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) erd; Upstream Dependencies — erd \(\Leftarrow\) Fortran. CMake Variables. ENABLE_erd — CMake variable toggling whether PSI4 builds with erd; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For erd, set to an installation directory containing include/ERD/ERD_MANGLE.h; erd_DIR — CMake variable to specify where pre-built erd can be found. Set to installation directory containing share/cmake/erd/erdConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_erd — CMake variable to force internal build of erd instead of detecting pre-built. Examples. Bu",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/erd-1.html:1468,install,installation,1468,psi4manual/1.1.0/erd-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/erd-1.html,2,['install'],['installation']
Deployability,"r""); option_with_default(MAX_AM_ERI ""Maximum angular momentum for integrals"" 5); option_with_default(CMAKE_BUILD_TYPE ""Build type (Release or Debug)"" Release); option_with_default(FC_SYMBOL ""The type of Fortran name mangling"" 2); option_with_default(BUILD_FPIC ""Compile static libraries with position independent code"" ON). Note that external projects will have their own sets of build; configuration options. Only the most-common user knobs of those are; mentioned above. How to install elsewhere than /usr/local/psi4¶; The installation directory is the filesystem location for the executable; script, the Python module, basis set data, and other administrative files.; Unless using the conda package, which is relocatable, the installation; directory must be specified with CMake variable CMAKE_INSTALL_PREFIX; before compiling. Build with Specific Install Directory; cmake -DCMAKE_INSTALL_PREFIX=/nfs/common/software/psi4. Relevant CMake Options:; CMAKE_INSTALL_PREFIX=PATH # Location to which Psi4 and internally built; # add-ons are installed (default: /usr/local/psi4). How to compile for debugging¶; Flags to turn optimizations off and debugging on can be set across the; project and plugins with CMake variable CMAKE_BUILD_TYPE before; compiling. Note that these flags will not propagate to any add-ons that; are detected pre-built rather than built. Build without optimization; cmake -DCMAKE_BUILD_TYPE=debug. set the CMake build type [default: release]. Relevant CMake Options:; CMAKE_BUILD_TYPE=[debug|release] # Build type (Release or Debug)"" [default: release]. How to fix error “RuntimeError: value for ERI“¶; You will need to rebuild Libint. Reissue cmake or edit; CMakeCache.txt with larger MAX_AM_ERI and rebuilt. How to configure code to use high angular momentum basis sets. How to choose the compilation directory, {objdir}¶. there is no default; common choices are objdir or build under top-level-psi4-dir; cd {top-level-psi4-dir} && cmake -H. -Bobjdir; cd {top-level-psi4-dir} &",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/build_planning-1.html:15145,install,installed,15145,psi4manual/1.1.0/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/build_planning-1.html,2,['install'],['installed']
Deployability,"r() + "" DIPOLE X"")); core.set_variable(""CURRENT DIPOLE Y"", core.variable(name.upper() + "" DIPOLE Y"")); core.set_variable(""CURRENT DIPOLE Z"", core.variable(name.upper() + "" DIPOLE Z"")); core.set_variable(""CURRENT DIPOLE"", core.variable(name.upper() + "" DIPOLE"")). # Shove variables into global space; for k, v in ciwfn.variables().items():; core.set_variable(k, v). optstash.restore(); return ciwfn. def run_efp(name, **kwargs):; """"""Function encoding sequence of module calls for a pure EFP; computation (ignore any QM atoms). """""". efp_molecule = kwargs.get('molecule', core.get_active_molecule()); try:; efpobj = efp_molecule.EFP; except AttributeError:; raise ValidationError(""""""Method 'efp' not available without EFP fragments in molecule""""""). # print efp geom in [A]; core.print_out(efpobj.banner()); core.print_out(efpobj.geometry_summary(units_to_bohr=constants.bohr2angstroms)). # set options; # * 'chtr', 'qm_exch', 'qm_disp', 'qm_chtr' may be enabled in a future libefp release; efpopts = {}; for opt in ['elst', 'exch', 'ind', 'disp',; 'elst_damping', 'ind_damping', 'disp_damping']:; psiopt = 'EFP_' + opt.upper(); if core.has_option_changed('EFP', psiopt):; efpopts[opt] = core.get_option('EFP', psiopt); efpopts['qm_elst'] = False; efpopts['qm_ind'] = False; efpobj.set_opts(efpopts, label='psi', append='psi'); do_gradient = core.get_option('EFP', 'DERTYPE') == 'FIRST'. # compute and report; efpobj.compute(do_gradient=do_gradient); core.print_out(efpobj.energy_summary(label='psi')). ene = efpobj.get_energy(label='psi'); core.set_variable('EFP ELST ENERGY', ene['electrostatic'] + ene['charge_penetration'] + ene['electrostatic_point_charges']); core.set_variable('EFP IND ENERGY', ene['polarization']); core.set_variable('EFP DISP ENERGY', ene['dispersion']); core.set_variable('EFP EXCH ENERGY', ene['exchange_repulsion']); core.set_variable('EFP TOTAL ENERGY', ene['total']); core.set_variable('CURRENT ENERGY', ene['total']). if do_gradient:; core.print_out(efpobj.gradient_summar",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/procrouting/proc.html:167880,release,release,167880,psi4manual/1.4.0/_modules/psi4/driver/procrouting/proc.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/procrouting/proc.html,2,['release'],['release']
Deployability,"r(). # Check if this is a CBS extrapolation; if ""/"" in lowername:; return driver_cbs._cbs_gufunc('hessian', lowername, **kwargs). return_wfn = kwargs.pop('return_wfn', False); core.clean_variables(); dertype = 2. # Prevent methods that do not have associated energies; if lowername in energy_only_methods:; raise ValidationError(""hessian('%s') does not have an associated hessian"" % name). optstash = p4util.OptionsState(; ['FINDIF', 'HESSIAN_WRITE'],; ). # Allow specification of methods to arbitrary order; lowername, level = driver_util.parse_arbitrary_order(lowername); if level:; kwargs['level'] = level. dertype = _find_derivative_type('hessian', lowername, kwargs.pop('freq_dertype', kwargs.pop('dertype', None))). # Make sure the molecule the user provided is the active one; molecule = kwargs.pop('molecule', core.get_active_molecule()); molecule.update_geometry(). # S/R: Mode of operation- whether finite difference freq run in one job or files farmed out; freq_mode = kwargs.pop('mode', 'continuous').lower(); if freq_mode == 'continuous':; pass; elif freq_mode == 'sow':; if dertype == 2:; raise ValidationError(""""""Frequency execution mode 'sow' not valid for analytic Hessian calculation.""""""); elif freq_mode == 'reap':; freq_linkage = kwargs.get('linkage', None); if freq_linkage is None:; raise ValidationError(""""""Frequency execution mode 'reap' requires a linkage option.""""""); else:; raise ValidationError(""""""Frequency execution mode '%s' not valid."""""" % (freq_mode)). # Set method-dependent scf convergence criteria (test on procedures['energy'] since that's guaranteed); optstash_conv = driver_util._set_convergence_criterion('energy', lowername, 8, 10, 8, 10, 8). # Select certain irreps; irrep = kwargs.get('irrep', -1); if irrep == -1:; pass # do all irreps; else:; irrep = driver_util.parse_cotton_irreps(irrep, molecule.schoenflies_symbol()); irrep -= 1 # A1 irrep is externally 1, internally 0; if dertype == 2:; core.print_out(""""""hessian() switching to finite difference by ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/driver.html:66015,continuous,continuous,66015,psi4manual/1.1.0/_modules/psi4/driver/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/driver.html,1,['continuous'],['continuous']
Deployability,"r(). # Check if this is a CBS extrapolation; if ""/"" in lowername:; return driver_cbs._cbs_gufunc('hessian', lowername, **kwargs). return_wfn = kwargs.pop('return_wfn', False); psi4.clean_variables(); dertype = 2. # Prevent methods that do not have associated energies; if lowername in energy_only_methods:; raise ValidationError(""hessian('%s') does not have an associated hessian"" % name). optstash = p4util.OptionsState(; ['FINDIF', 'HESSIAN_WRITE'],; ). # Allow specification of methods to arbitrary order; lowername, level = driver_util.parse_arbitrary_order(lowername); if level:; kwargs['level'] = level. dertype = _find_derivative_type('hessian', lowername, kwargs.pop('freq_dertype', kwargs.pop('dertype', None))). # Make sure the molecule the user provided is the active one; molecule = kwargs.pop('molecule', psi4.get_active_molecule()); molecule.update_geometry(). # S/R: Mode of operation- whether finite difference freq run in one job or files farmed out; freq_mode = kwargs.pop('mode', 'continuous').lower(); if freq_mode == 'continuous':; pass; elif freq_mode == 'sow':; if dertype == 2:; raise ValidationError(""""""Frequency execution mode 'sow' not valid for analytic Hessian calculation.""""""); elif freq_mode == 'reap':; freq_linkage = kwargs.get('linkage', None); if freq_linkage is None:; raise ValidationError(""""""Frequency execution mode 'reap' requires a linkage option.""""""); else:; raise ValidationError(""""""Frequency execution mode '%s' not valid."""""" % (freq_mode)). # Set method-dependent scf convergence criteria (test on procedures['energy'] since that's guaranteed); optstash_conv = driver_util._set_convergence_criterion('energy', lowername, 8, 10, 8, 10, 8). # Select certain irreps; irrep = kwargs.get('irrep', -1); if irrep == -1:; pass # do all irreps; else:; irrep = driver_util.parse_cotton_irreps(irrep, molecule.schoenflies_symbol()); irrep -= 1 # A1 irrep is externally 1, internally 0. # Does an analytic procedure exist for the requested method?; if dertype == 2:; ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/driver.html:64178,continuous,continuous,64178,psi4manual/1.0.0/_modules/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/driver.html,1,['continuous'],['continuous']
Deployability,"r):; 	print ""Parse error, line %d: %s"" % ( lineno(err.loc,err.pstr), ; 			line(err.loc,err.pstr)); 	sys.exit(1). ######## Convenience routines for callbacks ########. [docs]def check_opt(sect,key):; 	try:; 		k=sect[key]; 	except:; 		print 'You have a typo in the code for key', key; 		sys.exit(1); 	if k is not None:; 		if k.is_set():; 			return True; 	return False. [docs]def check_required(list, sect):; 	err=""Error: Required option '%s' not set in section '%s%s'!"" ; 	for i in list:; 		if not check_opt(sect, i):; 			if sect.name == sect.tag or sect.tag is None:; 				print err % (i, sect.name, ''); 			else:; 				print err % (i, sect.name, '<' + sect.tag + '>'); 			sys.exit(1). [docs]def check_ignored(list, sect):; 	warn=""Warning: The '%s' option will be ignored in section '%s%s'."" ; 	for i in list:; 		if check_opt(sect, i):; 			if sect.name == sect.tag:; 				print warn % (i, sect.name, ''); 			else:; 				print warn % (i, sect.name, '<' + sect.tag + '>'). ####################################################. [docs]def test( strng ):; 	bnf = GetkwParser(); 	try:; 		tokens=bnf.parseString(strng); 	except ParseException, err:; 		print err.line; 		print "" ""*(err.column-1) + ""^""; 		print err; 	return tokens. if __name__ == '__main__':; 	teststr=""""""; title = foo; string=""fooo bar"". defs {; foo=[1,2,3]; bar=99.0; }. defs<apa> { ; foo=[1, 2, 3,; 4,5, 6,7,8,9, ; 10] ; bar=22.0; }. defs<gorilla> { ; foo=[1, 2, 3,; 4,5, 6,7,8,9, ; 10] ; bar=22.0; }. verbose=False #(yes|true|on|1). raboof {; foo=1; bar=1. 	foobar<gnat>{; 		foo=1; 		bar=2; 	 foobar<gnu>{; 		 foo=1; 		 bar=2; 	 }. 	}. $COORD; o 0.0 0.0 0.0; h 1.0 1.0 0.0; h -1.0 1.0 0.0; $end; }. """"""; #ini = test(teststr); #print ini.top; # foo=ini.get_keyword('raboof.foo'); # print dir(foo). Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    ; PSI4 [beta5] » ; Module code ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/_modules/pcmgetkw.html:21421,update,updated,21421,psi4manual/4.0b5/_modules/pcmgetkw.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/_modules/pcmgetkw.html,1,['update'],['updated']
Deployability,"r)arg1, (str)arg2, (int)arg3) -> bool :; Sets an integer option scoped only to a specific module.; ; set_local_option( (str)arg1, (str)arg2, (list)arg3 [, (object)arg4]) -> bool; ; set_local_option_python(...); set_local_option_python( (str)arg1, (object)arg2) -> None :; Sets an option to a Python object, but scoped only to a single module.; ; set_memory(...); set_memory( (int)arg1) -> None :; Sets the memory available to Psi (in bytes).; ; set_nthread(...); set_nthread( (int)arg1) -> None :; Sets the number of threads to use in SMP parallel computations.; ; set_parent_symmetry(...); set_parent_symmetry( (str)arg1) -> None :; Sets the symmetry of the 'parent' (undisplaced) geometry, by Schoenflies symbol, at the beginning of a finite difference computation.; ; set_variable(...); set_variable( (str)arg1, (float)arg2) -> None :; Sets a PSI variable, by name.; ; stability(...); stability() -> int :; Runs the (experimental version) of HF stability analysis.; ; thermo(...); thermo() -> float :; Computes thermodynamic data.; ; transqt(...); transqt() -> float :; Runs the (deprecated) transformation code.; ; transqt2(...); transqt2() -> float :; Runs the (deprecated) transformation code.; ; version(...); version() -> str :; Returns the version ID of this copy of Psi.; ; wavefunction(...); wavefunction() -> Wavefunction :; Returns the current wavefunction object from the most recent computation. DATA; Ascending = PsiMod.DiagonalizeOrder.Ascending; Balk = PsiMod.PsiReturnType.Balk; Descending = PsiMod.DiagonalizeOrder.Descending; EndLoop = PsiMod.PsiReturnType.EndLoop; Failure = PsiMod.PsiReturnType.Failure; Success = PsiMod.PsiReturnType.Success. Previous topic; Python Driver; Next topic; Appendices; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » . © Copyright 2013, The Psi4 Project.; Last updated on Apr 25, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/psimod-1.html:116967,update,updated,116967,psi4manual/4.0b4/psimod-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/psimod-1.html,2,['update'],['updated']
Deployability,"r, it’s convenient to agree to its offer to prepend conda commands to your PATH in ~/.bashrc. If you’re a csh/tcsh user, it’s convenient to do the same by hand to your ~/.tcshrc: setenv PATH /path/to/miniconda/bin:${PATH}. Further directions assume that the conda command is in your path; you may have to log out and log back in for which conda to return correctly. >>> bash Miniconda-latest-Linux-x86_64.sh; # check; >>> which conda; /path/to/miniconda/bin/conda. Update conda. This updates the package manager itself. >>> conda update conda. Detailed Installation of PSI4¶. Subscribe to PSI4. Subscribe to our channel at http://anaconda.org/psi4 that contains the PSI4 package and several dependency packages. Make sure this shows up in your ~/.condarc file. >>> conda config --add channels http://conda.anaconda.org/psi4; # check; >>> cat ~/.condarc; channels:; - http://conda.anaconda.org/psi4; - defaults. Install PSI4. You can install into the main conda environment so that whenever commands conda or (Ana/Miniconda’s) python are available, then psi4 is available, too. >>> conda install psi4; # check; >>> which psi4; /path/to/miniconda/bin/psi4. Or, you can install into a conda environment that places PSI4 and its dependencies (including python) into a sandbox unaffected by any other software installed in Ana/Miniconda. This is recommended for developers to avoid interference between multiple versions (including github/conda versions) or to test python versions, etc.. If your main conda is not python=2.7, then PSI4 must be installed into a conda environment. In practical terms, installing into a conda environment means you can turn PSI4‘s availability on/off by switching conda environments without turning on/off the whole Ana/Miniconda installation. Below, PSI4 is installed into an environment called p4env. Then the environment is activated, removing the main Ana/Miniconda bin and adding envs/p4env/bin to PATH. The activate command only works in bash, so csh/tcsh will need c",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/conda-1.html:13546,install,install,13546,psi4manual/1.1.0/conda-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/conda-1.html,2,['install'],['install']
Deployability,"r, it’s convenient to agree to its offer to prepend conda commands to your PATH in ~/.bashrc. If you’re a csh/tcsh user, it’s convenient to do the same by hand to your ~/.tcshrc: setenv PATH /path/to/miniconda/bin:${PATH}. Further directions assume that the conda command is in your path; you may have to log out and log back in for which conda to return correctly. >>> bash Miniconda-latest-Linux-x86_64.sh; # check; >>> which conda; /path/to/miniconda/bin/conda. Update conda. This updates the package manager itself. >>> conda update conda. Detailed Installation of PSI4¶. Subscribe to PSI4. Subscribe to our channel at http://anaconda.org/psi4 that contains the PSI4 package and several dependency packages. Make sure this shows up in your ~/.condarc file. >>> conda config --add channels http://conda.anaconda.org/psi4; # check; >>> cat ~/.condarc; channels:; - http://conda.anaconda.org/psi4; - defaults. Install PSI4. You can install into the main conda environment so that whenever commands conda or (Ana/Miniconda’s) python are available, then psi4 is available, too. >>> conda install psi4; # check; >>> which psi4; /path/to/miniconda/bin/psi4. Or, you can install into a conda environment that places PSI4 and its dependencies (including python) into a sandbox unaffected by any other software installed in Ana/Miniconda. This is recommended for developers to avoid interference between multiple versions (including github/conda versions) or to test python versions, etc.. In practical terms, installing into a conda environment means you can turn PSI4’s availability on/off by switching conda environments without turning on/off the whole Ana/Miniconda installation. Below, PSI4 is installed into an environment called p4env. Then the environment is activated, removing the main Ana/Miniconda bin and adding envs/p4env/bin to PATH. The conda activate command (conda >=4.4; December 2017) works in all shells, but if you’re using old source activate that only works for bash; adjust as nee",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/conda-1.html:15969,install,install,15969,psi4manual/1.2.1/conda-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/conda-1.html,4,['install'],['install']
Deployability,"r, it’s convenient to agree to its offer to prepend conda commands to your PATH in ~/.bashrc. If you’re a csh/tcsh user, it’s convenient to do the same by hand to your ~/.tcshrc: setenv PATH /path/to/miniconda/bin:${PATH}. Further directions assume that the conda command is in your path; you may have to log out and log back in for which conda to return correctly. >>> bash Miniconda-latest-Linux-x86_64.sh; # check; >>> which conda; /path/to/miniconda/bin/conda. Update conda. This updates the package manager itself. >>> conda update conda. Detailed Installation of Psi4¶. Subscribe to Psi4. Subscribe to our channel at http://anaconda.org/psi4 that contains the Psi4 package and several dependency packages. Make sure this shows up in your ~/.condarc file. >>> conda config --add channels http://conda.anaconda.org/psi4; # check; >>> cat ~/.condarc; channels:; - http://conda.anaconda.org/psi4; - defaults. Install Psi4. You can install into the main conda environment so that whenever commands conda or (Ana/Miniconda’s) python are available, then psi4 is available, too. >>> conda install psi4; # check; >>> which psi4; /path/to/miniconda/bin/psi4. Or, you can install into a conda environment that places Psi4 and its dependencies (including python) into a sandbox unaffected by any other software installed in Ana/Miniconda. This is recommended for developers to avoid interference between multiple versions (including github/conda versions) or to test python versions, etc.. If your main conda is not python=2.7, then Psi4 must be installed into a conda environment. In practical terms, installing into a conda environment means you can turn Psi4‘s availability on/off by switching conda environments without turning on/off the whole Ana/Miniconda installation. Below, Psi4 is installed into an environment called p4env. Then the environment is activated, removing the main Ana/Miniconda bin and adding envs/p4env/bin to PATH. The activate command only works in bash, so csh/tcsh will need c",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/conda-1.html:8820,install,install,8820,psi4manual/1.0.0/conda-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/conda-1.html,2,['install'],['install']
Deployability,"r. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to adcc by M. F. Herbst and M. Scheurer. Interface to adcc by M. F. Herbst and M. Scheurer¶; Code author: Michael F. Herbst; Section author: Michael F. Herbst; Module: Keywords, PSI Variables. PSI4 contains code to interface to the adcc python module developed; by M. F. Herbst et. al.. No additional licence or configuration; is required to use adcc. The module serves as the backend for; most algebraic-diagrammatic construction methods for correlated; excited states in PSI4. For more details on ADC methods,; see ADC: Ab Initio Polarization Propagator. Installation¶; For up to date information and more details,; see the adcc installation documentation.; Binary. adcc is available as a conda package for Linux and macOS; and on pypi. To remove a conda installation, conda remove adcc. Source. If using PSI4 built from source and you want adcc installed as well,; enable it as a feature with ENABLE_adcc,; and let the build system fetch and install it. Keywords for adcc¶. CUTOFF_AMPS_PRINT¶. Tolerance for extracted or printed amplitudes. This option is only available for the adcc backend. Type: double; Default: 0.01. KIND¶. The kind of states to compute. Type: string; Possible Values: SINGLET, TRIPLET, SPIN_FLIP, ANY; Default: SINGLET. MAX_NUM_VECS¶. Maximum number of subspace vectors. A negative value uses * the adcc default (roughly between 20 and 5 * N_GUESSES). This option is only available for the adcc backend. Type: integer; Default: -1. MAXITER¶. Maximum number of iterations. Type: integer; Default: 50. NUM_CORE_ORBITALS¶. Number of orbitals to place in the core. This option is only available for the adcc backend. Type: integer; Default: 0. NUM_GUESSES¶. Number of guess vectors to generate and use. Negative values keep * the adcc default (currently 2 * ROOTS_PER_IRREP). This option is only available for the adcc backend. Type: integer; Default: -1.",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/adcc.html:1023,install,installed,1023,psi4manual/1.8.x/adcc.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/adcc.html,2,['install'],"['install', 'installed']"
Deployability,"r. Navigation. Index. modules    .    .    .    .  · ; 1.9.1;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to adcc by M. F. Herbst and M. Scheurer. Interface to adcc by M. F. Herbst and M. Scheurer¶; Code author: Michael F. Herbst; Section author: Michael F. Herbst; Module: Keywords, PSI Variables. PSI4 contains code to interface to the adcc python module developed; by M. F. Herbst et. al.. No additional licence or configuration; is required to use adcc. The module serves as the backend for; most algebraic-diagrammatic construction methods for correlated; excited states in PSI4. For more details on ADC methods,; see ADC: Ab Initio Polarization Propagator. Installation¶; For up to date information and more details,; see the adcc installation documentation.; Binary. adcc is available as a conda package for Linux and macOS; and on pypi. To remove a conda installation, conda remove adcc. Source. If using PSI4 built from source and you want adcc installed as well,; enable it as a feature with ENABLE_adcc,; and let the build system fetch and install it. Keywords for adcc¶. CUTOFF_AMPS_PRINT¶. Tolerance for extracted or printed amplitudes. This option is only available for the adcc backend. Type: double; Default: 0.01. KIND¶. The kind of states to compute. Type: string; Possible Values: SINGLET, TRIPLET, SPIN_FLIP, ANY; Default: SINGLET. MAX_NUM_VECS¶. Maximum number of subspace vectors. A negative value uses * the adcc default (roughly between 20 and 5 * N_GUESSES). This option is only available for the adcc backend. Type: integer; Default: -1. MAXITER¶. Maximum number of iterations. Type: integer; Default: 50. NUM_CORE_ORBITALS¶. Number of orbitals to place in the core. This option is only available for the adcc backend. Type: integer; Default: 0. NUM_GUESSES¶. Number of guess vectors to generate and use. Negative values keep * the adcc default (currently 2 * ROOTS_PER_IRREP). This option is only available for the adcc backend. Type: integer; Default: -1.",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/adcc.html:1023,install,installed,1023,psi4manual/1.9.x/adcc.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/adcc.html,2,['install'],"['install', 'installed']"
Deployability,"r. psi3-dzp; 6D/10F; H. B; C; N; O; F; Ne. Al; Si; P; S; Cl. sadlej-lpol-fl; 5D/7F; H. C; N; O; F. dgauss-dzvp-autoaux; 5D/7F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr; Rb; Sr; Y; Zr; Nb; Mo; Tc; Ru; Rh; Pd; Ag; Cd; In; Sn; Sb; Te; I; Xe. sto-6g; 5D/7F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr; Rb; Sr; Y; Zr; Nb; Mo; Tc; Ru; Rh; Pd; Ag; Cd; In; Sn; Sb; Te; I; Xe. dz; 6D/10F; H. Li. B; C; N; O; F; Ne. Al; Si; P; S; Cl. roos-ano-dz; 5D/7F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn. weigand-jfit; 5D/7F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr; Rb; Sr; Y; Zr; Nb; Mo; Tc; Ru; Rh; Pd; Ag; Cd; In; Sn; Sb; Te; I; Xe; Cs; Ba; La; Hf; Ta; W; Re; Os; Ir; Pt; Au; Hg; Tl; Pb; Bi; Po; At; Rn. lanl2dz; 6D/10F; H. Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr; Rb; Sr; Y; Zr; Nb; Mo; Tc; Ru; Rh; Pd; Ag; Cd; In; Sn; Sb; Te; I; Xe; Cs; Ba; La; Hf; Ta; W; Re; Os; Ir; Pt; Au; Hg; Tl; Pb; Bi. sad-fit; 5D/7F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr; Rb; Sr; Y; Zr; Nb; Mo; Tc; Ru; Rh; Pd; Ag; Cd; In; Sn; Sb; Te; I; Xe; Cs; Ba; La; Hf; Ta; W; Re; Os; Ir; Pt; Au; Hg; Tl; Pb; Bi; Po; At; Rn. psi3-tz2pf; 6D/10F; H. B; C; N; O; F. Al; Si; P; S; Cl. 7zapa-nr; 5D/7F; H; He; Li; Be; B; C; N; O; F; Ne. Mg; Al; Si; P; S; Cl; Ar. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Basis Sets by Element; <no title>. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/autodoc_psi4bases-1.html:56802,update,updated,56802,psi4manual/1.5.0/autodoc_psi4bases-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_psi4bases-1.html,2,['update'],['updated']
Deployability,"r: /usr/bin/clang++; -- Check for working CXX compiler: /usr/bin/clang++ -- works; ...; -- Generating done; -- Build files have been written to: testplugin. # compile the plugin to produce testplugin.so; >>> make; Scanning dependencies of target testplugin; [ 50%] Building CXX object CMakeFiles/testplugin.dir/plugin.cc.o; [100%] Linking CXX shared module testplugin.so; [100%] Built target testplugin. # run sample input.dat; >>> psi4; Attention! This SCF may be density-fitted. Please note that the conda distribution must be in $PATH or the; conda enviroment must be activated before compilation and execution of; plugins created using this procedure. Files in a Plugin Directory¶; In addition to the main myplugin.cc file, a fresh plugin directory contains the following files. CMakeLists.txt — CMake file governing project plugin.; The plugin source and CMakeLists.txt is independent of platform; and PSI4 installation. You use CMake (version 3.1 or later); to generate a Makefile for the plugin by pointing it to a specific; PSI4 installation. Run psi4 --plugin-compile to get a command; to execute to generate the Makefile. What that command is doing is; loading the compilers and options used to build the parent PSI4; (the -C psi4PluginCache part) which in turn can be overridden; by passing -Doption=value commands to cmake and pointing; toward a particular PSI4 (and probably pybind11) library to; link against (the CMAKE_PREFIX_PATH part) and telling it to; do an in-source build (the . part). Then just run make in; your plugin directory. After any change to the plugin C++ code,; make must be run in the plugin directory to recompile the; myplugin.so executable, but recompiling the main PSI4 code; is not necessary. Should you add additional (non-header) files to; the plugin or need to link to additional external libraries, add that; information here.; input.dat — Sample input file for the plugin.; Since the __init__.py file makes the plugin directory look like a; Python module, t",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/plugins-1.html:5365,install,installation,5365,psi4manual/1.1.0/plugins-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/plugins-1.html,15,['install'],['installation']
Deployability,"r: Lori A. Burns; Module: Keywords, PSI Variables, Samples. Note; As of late June 2016, DMRG keywords in PSI4 have been; realigned with those of the chemps2 executable, plus a; “dmrg_” prefix. The only exceptions are the orbital space; PSI4 keywords RESTRICTED_DOCC (formerly; CheMPS2 used FROZEN_DOCC, contrary to its; definition) and ACTIVE which are passed along to; CheMPS2 keywords NOCC and NACT. A translation table; is available. Installation¶; Binary. CheMPS2 is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell).; If using the PSI4 binary, CheMPS2 has already been installed alongside.; If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; CheMPS2 can be obtained through conda install chemps2.; Then enable it as a feature with ENABLE_CheMPS2,; hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect CheMPS2 and activate dependent code. To remove a conda installation, conda remove chemps2. Source. If using PSI4 built from source and you want CheMPS2 built from; from source also,; enable it as a feature with ENABLE_CheMPS2,; and let the build system fetch and build it and activate dependent code. Methods¶. Density matrix renormalization group capabilities of PSI4 through CheMPS2¶. name; calls method; Energy; Gradient. dmrg-ci; DMRG configuration interaction (CI); RHF/ROHF; —. dmrg-scf; DMRG complete active space SCF (CASSCF); RHF/ROHF; —. dmrg-caspt2; DMRG CAS with 2nd-order perturbation theory (CASPT2); RHF/ROHF; —. DMRG Keywords¶. DMRG_CASPT2_CALC¶. Do calculate the DMRG-CASPT2 energy after the DMRGSCF calculations are done?. Type: boolean; Default: false. DMRG_CASPT2_IMAG¶. CASPT2 Imaginary shift. Type: double; Default: 0.0. DMRG_CASPT2_IPEA¶. CASPT2 IPEA shift. Type: double; Default: 0.0. DMRG_CASPT2_ORBS¶. Whether to calculate the DMRG-CASPT2 energy after the DMRGSCF calculations are done. Type: string; Possible Values: PSEUDOCANONICAL, AC",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/chemps2-1.html:1258,install,installation,1258,psi4manual/1.4.0/chemps2-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/chemps2-1.html,9,['install'],['installation']
Deployability,"r; # >>> cmake --build objdir --target install -j`getconf _NPROCESSORS_ONLN`. # <<< Required build dependencies that Psi4 can't build itself >>>; #; # - CMake (e.g., `conda install cmake`); # - C++ and C compilers (C++17 compliant); # - BLAS/LAPACK (also runtime; e.g., `conda install mkl-devel`); # - Python (also runtime; interpreter and headers; e.g., `conda install python`); # - NumPy (also runtime; avoidable at buildtime if gau2grid pre-built; e.g., `conda install numpy`); # - networkx >=2.4 (runtime only; e.g., `conda install networkx`); # - pint >=0.10 (runtime only; e.g., `conda install pint -c conda-forge`); # - pydantic >=1.0 (runtime only; e.g., `conda install pydantic -c conda-forge`); # - msgpack-python (runtime only; e.g., `conda install msgpack-python`); # - Eigen (for Libint2; e.g., `conda install eigen`); # - Boost (header-only libs for Libint2; e.g., `conda install boost-cpp`); # - SciPy (runtime only; avoidable through keyword setting; e.g., `conda install scipy`); # - py-cpuinfo (runtime only; e.g., `conda install py-cpuinfo`); # - psutil (runtime only; e.g., `conda install psutil`). # These three ""### Options ###"" sections contain useful CMake variables for build configuration. # <<< Compilers and flags >>>; #; # - CMAKE_C_COMPILER ""C compiler""; # - CMAKE_C_FLAGS ""Additional C flags""; # - CMAKE_CXX_COMPILER ""C++ compiler""; # - CMAKE_CXX_FLAGS ""Additional C++ flags""; # - CMAKE_Fortran_COMPILER ""Fortran compiler (required for some add-ons)""; # - CMAKE_Fortran_FLAGS ""Additional Fortran flags"". # <<< Detecting dependencies and add-ons >>>; #; # - Python_EXECUTABLE ""Python interpreter to use (e.g., /path/to/bin/python3.7)""; # - Python_LIBRARY ""Python library that goes with the interpreter (e.g., /path/to/lib/python3.7.so)""; # - Python_INCLUDE_DIR ""Path to the python include files (e.g., /path/to/include/python3.7)""; # - SPHINX_ROOT ""Root directory for Sphinx: 'bin/sphinx-build' (or similar) should be in this dir.""; #; # For any ${AddOn} of: ambit, CheM",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/build_planning.html:16230,install,install,16230,psi4manual/1.8.x/build_planning.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/build_planning.html,2,['install'],['install']
Deployability,"r; # >>> cmake --build objdir --target install -j`getconf _NPROCESSORS_ONLN`. # <<< Required build dependencies that Psi4 can't build itself >>>; #; # - CMake (e.g., `conda install cmake`); # - C++ and C compilers (C++20 compliant); # - BLAS/LAPACK (also runtime; e.g., `conda install mkl-devel`); # - Python (also runtime; interpreter and headers; e.g., `conda install python`); # - NumPy (also runtime; avoidable at buildtime if gau2grid pre-built; e.g., `conda install numpy`); # - networkx >=2.4 (runtime only; e.g., `conda install networkx`); # - pint >=0.10 (runtime only; e.g., `conda install pint -c conda-forge`); # - pydantic >=1.0 (runtime only; e.g., `conda install pydantic -c conda-forge`); # - msgpack-python (runtime only; e.g., `conda install msgpack-python`); # - Eigen (for Libint2; e.g., `conda install eigen`); # - Boost (header-only libs for Libint2; e.g., `conda install boost-cpp`); # - SciPy (runtime only; avoidable through keyword setting; e.g., `conda install scipy`); # - py-cpuinfo (runtime only; e.g., `conda install py-cpuinfo`); # - psutil (runtime only; e.g., `conda install psutil`). # These three ""### Options ###"" sections contain useful CMake variables for build configuration. # <<< Compilers and flags >>>; #; # - CMAKE_C_COMPILER ""C compiler""; # - CMAKE_C_FLAGS ""Additional C flags""; # - CMAKE_CXX_COMPILER ""C++ compiler""; # - CMAKE_CXX_FLAGS ""Additional C++ flags""; # - CMAKE_Fortran_COMPILER ""Fortran compiler (required for some add-ons)""; # - CMAKE_Fortran_FLAGS ""Additional Fortran flags"". # <<< Detecting dependencies and add-ons >>>; #; # - Python_EXECUTABLE ""Python interpreter to use (e.g., /path/to/bin/python3.7)""; # - Python_LIBRARY ""Python library that goes with the interpreter (e.g., /path/to/lib/python3.7.so)""; # - Python_INCLUDE_DIR ""Path to the python include files (e.g., /path/to/include/python3.7)""; # - SPHINX_ROOT ""Root directory for Sphinx: 'bin/sphinx-build' (or similar) should be in this dir.""; #; # For any ${AddOn} of: ambit, CheM",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/build_planning.html:16774,install,install,16774,psi4manual/master/build_planning.html,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html,1,['install'],['install']
Deployability,"r; expert full control over cfour program. Examples. >>> # [1] Analytic hf optimization; >>> optimize('hf'). >>> # [2] Finite difference mp5 optimization with gradient; >>> # printed to output file; >>> e, wfn = opt('mp5', return_wfn='yes'); >>> wfn.gradient().print_out(). >>> # [3] Can automatically perform complete basis set extrapolations; >>> optimize('MP2/cc-pV([D,T]+d)Z'). >>> # [4] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> optimize(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). >>> # [5] Get info like geometry, gradient, energy back after an; >>> # optimization fails. Note that the energy and gradient; >>> # correspond to the last optimization cycle, whereas the; >>> # geometry (by default) is the anticipated *next* optimization step.; >>> try:; >>> optimize('hf/cc-pvtz'); >>> except psi4.OptimizationConvergenceError as ex:; >>> next_geom_coords_as_numpy_array = np.asarray(ex.wfn.molecule().geometry()). psi4.gradient(name[, molecule, return_wfn, func, dertype])[source]; Function complementary to optimize(). Carries out one gradient pass,; deciding analytic or finite difference. Returns; Matrix – Total electronic gradient in Hartrees/Bohr. Returns; (Matrix, Wavefunction) – gradient and wavefunction when return_wfn specified. Examples. >>> # [1] Single-point dft gradient getting the gradient; >>> # in file, core.Matrix, and np.array forms; >>> set gradient_write on; >>> G, wfn = gradient('b3lyp-d', return_wfn=True); >>> wfn.gradient().print_out(); >>> np.array(G). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.6;  · . PSI4. Psithon Functions: Invoking a Calculation; Geometry Optimization — optimize() and gradient(). © Copyright 2022, The Psi4 Project.; Last updated on Thursday, 19 May 2022 08:57PM.; Created using Sphinx 4.5.0.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/opt.html:15308,update,updated,15308,psi4manual/1.6.x/opt.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/opt.html,1,['update'],['updated']
Deployability,"rFunctional, arg0: int) → None; Sets the maximum number of points. set_name(self: psi4.core.SuperFunctional, arg0: str) → None; Sets the SuperFunctional name. set_vv10_b(self: psi4.core.SuperFunctional, arg0: float) → None; Sets the VV10 b parameter. set_vv10_c(self: psi4.core.SuperFunctional, arg0: float) → None; Sets the VV10 c parameter. set_x_alpha(self: psi4.core.SuperFunctional, arg0: float) → None; Sets the amount of exact global HF exchange. set_x_beta(self: psi4.core.SuperFunctional, arg0: float) → None; Sets how much more long-range exchange than short-range exchange. set_x_omega(self: psi4.core.SuperFunctional, arg0: float) → None; Sets the range-seperation exchange parameter. test_functional(self: psi4.core.SuperFunctional, arg0: psi4.core.Vector, arg1: psi4.core.Vector, arg2: psi4.core.Vector, arg3: psi4.core.Vector, arg4: psi4.core.Vector, arg5: psi4.core.Vector, arg6: psi4.core.Vector) → None; Quick testing capabilities. value(self: psi4.core.SuperFunctional, arg0: str) → psi4.core.Vector; Returns a given internal value. values(self: psi4.core.SuperFunctional) → Dict[str, psi4.core.Vector]; Return all internal values. vv10_b(self: psi4.core.SuperFunctional) → float; The VV10 b parameter. vv10_c(self: psi4.core.SuperFunctional) → float; The VV10 c parameter. x_alpha(self: psi4.core.SuperFunctional) → float; Amount of exact HF exchange. x_beta(self: psi4.core.SuperFunctional) → float; Amount of exact HF exchange. x_functional(self: psi4.core.SuperFunctional, arg0: str) → psi::Functional; Returns the desired X Functional. x_functionals(self: psi4.core.SuperFunctional) → List[psi::Functional]; Returns all X Functionals. x_omega(self: psi4.core.SuperFunctional) → float; Range-seperated exchange parameter. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/api/psi4.core.superfunctional.html:15988,update,updated,15988,psi4manual/1.3.2/api/psi4.core.superfunctional.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.superfunctional.html,1,['update'],['updated']
Deployability,"r_cbs.scf_xtpl_helgaker_3(functionname, zLO, valueLO, zMD, valueMD, zHI, valueHI, verbose=True)[source]¶; Extrapolation scheme for reference energies with three adjacent zeta-level bases.; Used by cbs().; Halkier, Helgaker, Jorgensen, Klopper, & Olsen, Chem. Phys. Lett. 302 (1999) 437-446. \[E_{total}^X = E_{total}^{\infty} + \beta e^{-\alpha X}\]. psi4.driver.driver_cbs.corl_xtpl_helgaker_2(functionname, zLO, valueLO, zHI, valueHI, verbose=True)[source]¶; Extrapolation scheme for correlation energies with two adjacent zeta-level bases.; Used by cbs().; Halkier, Helgaker, Jorgensen, Klopper, Koch, Olsen, & Wilson, Chem. Phys. Lett. 286 (1998) 243-252. \[E_{corl}^X = E_{corl}^{\infty} + \beta X^{-3}\]. Aliases¶; When a particular composite method or its functional form is going to be; reused often, it is convenient to define an alias to it. A convenient; place for such Python code to reside is in psi4/psi4/driver/aliases.py; (source location) or psi4/lib/psi4/driver/aliases.py (installed; location). No recompilation is necessary after defining an alias. Some; existing examples are below. psi4.driver.aliases.sherrill_gold_standard(func, label, **kwargs)[source]¶; Function to call the quantum chemical method known as ‘Gold Standard’; in the Sherrill group. Uses complete_basis_set() to evaluate; the following expression. Two-point extrapolation of the correlation energy; performed according to corl_xtpl_helgaker_2(). \[E_{total}^{\text{Au\_std}} = E_{total,\; \text{SCF}}^{\text{aug-cc-pVQZ}} \; + E_{corl,\; \text{MP2}}^{\text{aug-cc-pV[TQ]Z}} \; + \delta_{\text{MP2}}^{\text{CCSD(T)}}\big\vert_{\text{aug-cc-pVTZ}}\]; 1; 2>>> # [1] single-point energy by this composite method; >>> energy('sherrill_gold_standard'). 1; 2>>> # [2] finite-difference geometry optimization; >>> optimize('sherrill_gold_standard'). 1; 2>>> # [3] finite-difference geometry optimization, overwriting some pre-defined sherrill_gold_standard options; >>> optimize('sherrill_gold_standard', corl_basis='c",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/cbs-1.html:18034,install,installed,18034,psi4manual/1.1.0/cbs-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/cbs-1.html,2,['install'],['installed']
Deployability,"radient = False. return_wfn = kwargs.pop('return_wfn', False). return_history = kwargs.pop('return_history', False); if return_history:; # Add wfn once the deep copy issues are worked out; step_energies = []; step_gradients = []; step_coordinates = []. # For CBS wrapper, need to set retention on INTCO file; if custom_gradient or ('/' in lowername):; core.IOManager.shared_object().set_specific_retention(1, True). if kwargs.get('bsse_type', None) is not None:; raise ValidationError(""Optimize: Does not currently support 'bsse_type' arguements""). full_hess_every = core.get_option('OPTKING', 'FULL_HESS_EVERY'); steps_since_last_hessian = 0. if custom_gradient and core.has_option_changed('OPTKING', 'FULL_HESS_EVERY'):; raise ValidationError(""Optimize: Does not support custom Hessian's yet.""); else:; hessian_with_method = kwargs.get('hessian_with', lowername). # are we in sow/reap mode?; opt_mode = kwargs.get('mode', 'continuous').lower(); if opt_mode not in ['continuous', 'sow', 'reap']:; raise ValidationError(""""""Optimize execution mode '%s' not valid."""""" % (opt_mode)). optstash = p4util.OptionsState(; ['OPTKING', 'INTRAFRAG_STEP_LIMIT'],; ['FINDIF', 'HESSIAN_WRITE'],; ['OPTKING', 'CART_HESS_READ'],; ['SCF', 'GUESS_PERSIST'], # handle on behalf of cbs(); ['SCF', 'GUESS']). n = kwargs.get('opt_iter', 1). # Make sure the molecule the user provided is the active one; molecule = kwargs.pop('molecule', core.get_active_molecule()). # If we are freezing cartesian, do not orient or COM; if core.get_local_option(""OPTKING"", ""FROZEN_CARTESIAN""):; molecule.fix_orientation(True); molecule.fix_com(True); molecule.update_geometry(). # Shifting the geometry so need to copy the active molecule; moleculeclone = molecule.clone(). initial_sym = moleculeclone.schoenflies_symbol(); while n <= core.get_option('OPTKING', 'GEOM_MAXITER'):; current_sym = moleculeclone.schoenflies_symbol(); if initial_sym != current_sym:; raise ValidationError(""""""Point group changed! (%s <-- %s) You should restart ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/_modules/psi4/driver/driver.html:59878,continuous,continuous,59878,psi4manual/1.2.1/_modules/psi4/driver/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/_modules/psi4/driver/driver.html,1,['continuous'],['continuous']
Deployability,"radient'; dfile = open(derivfile, 'r'); dashdderiv = []; for line in geom.splitlines():; lline = line.split(); if len(lline) != 4:; continue; if lline[0] == 'Gh':; dashdderiv.append([0.0, 0.0, 0.0]); else:; dashdderiv.append([float(x.replace('D', 'E')) for x in dfile.readline().split()]); dfile.close(). if len(dashdderiv) != self.natom():; raise ValidationError('Program dftd3 gradient file has %d atoms- %d expected.' % \; (len(dashdderiv), self.natom())). # Prepare results for Psi4; if isP4regime and dertype != 0:; core.set_variable('DISPERSION CORRECTION ENERGY', dashd); psi_dashdderiv = core.Matrix(self.natom(), 3); psi_dashdderiv.set(dashdderiv). # Print program output to file if verbose; if not verbose and isP4regime:; verbose = True if core.get_option('SCF', 'PRINT') >= 3 else False; if verbose:. text = '\n ==> DFTD3 Output <==\n'; text += out.decode('utf-8'); if dertype != 0:; with open(derivfile, 'r') as handle:; text += handle.read().replace('D', 'E'); text += '\n'; if isP4regime:; core.print_out(text); else:; print(text). # Clean up files and remove scratch directory; os.unlink(paramfile1); os.unlink(paramfile2); os.unlink(geomfile); if dertype != 0:; os.unlink(derivfile); if defmoved is True:; os.rename(defaultfile + '_hide', defaultfile). os.chdir('..'); try:; shutil.rmtree(dftd3_tmpdir); except OSError as e:; ValidationError('Unable to remove dftd3 temporary directory %s' % e); os.chdir(current_directory). # return -D & d(-D)/dx; if dertype == -1:; return dashd, dashdderiv; elif dertype == 0:; return dashd; elif dertype == 1:; return psi_dashdderiv. try:; # Attach method to libmints psi4.Molecule class; core.Molecule.run_dftd3 = run_dftd3; except (NameError, AttributeError):; # But don't worry if that doesn't work b/c; # it'll get attached to qcdb.Molecule class; pass. Navigation. Index. modules    .    .  · ; 1.1;  · . PSI4. Module code. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/_modules/qcdb/interface_dftd3.html:9369,update,updated,9369,psi4manual/1.1.0/_modules/qcdb/interface_dftd3.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/_modules/qcdb/interface_dftd3.html,1,['update'],['updated']
Deployability,"ral(...); docstring. name((self: psi4.core.OrbitalSpace) -> str); docstring. nirrep((self: psi4.core.OrbitalSpace) -> int); docstring. print_out((self: psi4.core.OrbitalSpace) -> None); docstring. Methods Documentation. C(self: psi4.core.OrbitalSpace) → psi4.core.Matrix¶; docstring. basisset(self: psi4.core.OrbitalSpace) → psi::BasisSet¶; docstring. build_cabs_space(arg0: psi4.core.OrbitalSpace, arg1: psi4.core.OrbitalSpace, arg2: float) → psi4.core.OrbitalSpace¶; docstring. build_ri_space(arg0: psi::Molecule, arg1: str, arg2: str, arg3: float) → psi4.core.OrbitalSpace¶; docstring. dim(self: psi4.core.OrbitalSpace) → psi4.core.Dimension¶; docstring. evals(self: psi4.core.OrbitalSpace) → psi4.core.Vector¶; docstring. id(self: psi4.core.OrbitalSpace) → str¶; docstring. integral(self: psi4.core.OrbitalSpace) → psi4.core.IntegralFactory¶; docstring. name(self: psi4.core.OrbitalSpace) → str¶; docstring. nirrep(self: psi4.core.OrbitalSpace) → int¶; docstring. print_out(self: psi4.core.OrbitalSpace) → None¶; docstring. C(self: psi4.core.OrbitalSpace) → psi4.core.Matrix; docstring. basisset(self: psi4.core.OrbitalSpace) → psi::BasisSet; docstring. build_cabs_space(arg0: psi4.core.OrbitalSpace, arg1: psi4.core.OrbitalSpace, arg2: float) → psi4.core.OrbitalSpace; docstring. build_ri_space(arg0: psi::Molecule, arg1: str, arg2: str, arg3: float) → psi4.core.OrbitalSpace; docstring. dim(self: psi4.core.OrbitalSpace) → psi4.core.Dimension; docstring. evals(self: psi4.core.OrbitalSpace) → psi4.core.Vector; docstring. id(self: psi4.core.OrbitalSpace) → str; docstring. integral(self: psi4.core.OrbitalSpace) → psi4.core.IntegralFactory; docstring. name(self: psi4.core.OrbitalSpace) → str; docstring. nirrep(self: psi4.core.OrbitalSpace) → int; docstring. print_out(self: psi4.core.OrbitalSpace) → None; docstring. Navigation. Index. modules    .    .  · ; 1.1;  · . PSI4. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/api/psi4.core.orbitalspace.html:2345,update,updated,2345,psi4manual/1.1.0/api/psi4.core.orbitalspace.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/api/psi4.core.orbitalspace.html,1,['update'],['updated']
Deployability,"rals version. cc10; ROHF-CCSD cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical. frac-ip-fitting; Omega optimization for LRC functional wB97 on water. cc3; cc3: RHF-CCSD/6-31G** H2O geometry optimization and vibrational frequency analysis by finite-differences of gradients. fsapt-ext-abc-au; analog of fsapt-ext-abc with molecule and external potentials in Bohr. sapt-exch-ind30-inf; SAPT2+3 with S^inf exch-ind30 Geometries taken from the S66x10 database, the shortest-range point (R = 0.7 R_e). dlpnomp2-2; comparison of DF-MP2 and DLPNO-MP2 with a CBS extrapolation. stability3; Test LDA stability analysis against QChem. dfmp2-grad3; DF-MP2 cc-pVDZ gradients for the H2O molecule. options1; check all variety of options parsing. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. dfccsd1; DF-CCSD cc-pVDZ energy for the H2O molecule. omp2p5-1; OMP2.5 cc-pVDZ energy for the H2O molecule. cc-module; check that CC is returning the same values btwn CC*, FNOCC, and DFOCC modules. opt-full-hess-every; SCF/sto-3g optimization with a hessian every step. cbs-xtpl-freq; Various gradients for a strained helium dimer and water molecule. dft-grac; Gradient regularized asymptotic correction (GRAC) test. cc13b; Tests RHF CCSD(T)gradients. sapt-sf1; Tests the Psi4 SF-SAPT code. tdscf-2; td-uhf test on triplet states of methylene (tda), wfn passing. x2c3; Test of SFX2C-1e on Water uncontracted cc-pVDZ The reference numbers are from Lan Cheng",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/autodoc_testsuite_corepsi4.html:41849,update,updated,41849,psi4manual/1.8.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodoc_testsuite_corepsi4.html,2,['update'],['updated']
Deployability,"ral¶. ABCD¶. Type: string; Default: NEW. AO_BASIS¶. The algorithm to use for the terms. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. CACHELEVEL¶. Type: integer; Default: 2. DIIS¶. Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. LOCAL¶. Do ?. Type: boolean; Default: false. LOCAL_CPHF_CUTOFF¶. Type: double; Default: 0.10. LOCAL_CUTOFF¶. Type: double; Default: 0.02. LOCAL_FILTER_SINGLES¶. Do ?. Type: boolean; Default: true. LOCAL_METHOD¶. Type: string; Default: WERNER. LOCAL_PAIRDEF¶. Type: string; Default: No Default. LOCAL_WEAKP¶. Type: string; Default: NONE. MAXITER¶. Maximum number of iterations. Type: integer; Default: 50. NUM_AMPS_PRINT¶. Type: integer; Default: 10. PROP_ALL¶. Compute unrelaxed properties for all excited states. Type: boolean; Default: true. PROP_ROOT¶. Type: integer; Default: 1. PROP_SYM¶. Type: integer; Default: 1. RESTART¶. Do ?. Type: boolean; Default: false. ROOTS_PER_IRREP¶. Type: array; Default: No Default. R_CONVERGENCE¶. Convergence criterion for wavefunction (change) in CC lambda-amplitude equations. Type: conv double; Default: 1e-7. SEKINO¶. Do ?. Type: boolean; Default: false. ZETA¶. Type: boolean; Default: false. Expert¶. JOBTYPE¶. Type of job being performed. Type: string; Default: No Default. WFN¶. Wavefunction type. Type: string; Default: SCF. Table Of Contents. CCLAMBDA; General; ABCD; AO_BASIS; CACHELEVEL; DIIS; LOCAL; LOCAL_CPHF_CUTOFF; LOCAL_CUTOFF; LOCAL_FILTER_SINGLES; LOCAL_METHOD; LOCAL_PAIRDEF; LOCAL_WEAKP; MAXITER; NUM_AMPS_PRINT; PROP_ALL; PROP_ROOT; PROP_SYM; RESTART; ROOTS_PER_IRREP; R_CONVERGENCE; SEKINO; ZETA. Expert; JOBTYPE; WFN. Previous topic; WFN; Next topic; ABCD; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Appendices »; Keywords by Module ». © Copyright 2012, Psi4 Project.; Last updated on Sep 30, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/autodir_options_c/module__cclambda-1.html:2221,update,updated,2221,psi4manual/4.0b2/autodir_options_c/module__cclambda-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/autodir_options_c/module__cclambda-1.html,2,['update'],['updated']
Deployability,"ram [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples:. >>> # [1] Analytic hf optimization; >>> optimize('hf'). >>> # [2] Finite difference mp5 optimization with gradient; >>> # printed to output file; >>> e, wfn = opt('mp5', return_wfn='yes'); >>> wfn.gradient().print_out(). >>> # [3] Can automatically perform complete basis set extrapolations; >>> optimize('MP2/cc-pV([D,T]+d)Z'). >>> # [4] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> optimize(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). >>> # [5] Get info like geometry, gradient, energy back after an; >>> # optimization fails. Note that the energy and gradient; >>> # correspond to the last optimization cycle, whereas the; >>> # geometry (by default) is the anticipated *next* optimization step.; >>> try:; >>> optimize('hf/cc-pvtz'); >>> except psi4.OptimizationConvergenceError as ex:; >>> next_geom_coords_as_numpy_array = np.asarray(ex.wfn.molecule().geometry()). table of contents. optimize; optimize(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; optimize. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.optimize.html:17263,update,updated,17263,psi4manual/1.8.x/api/psi4.driver.optimize.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.optimize.html,1,['update'],['updated']
Deployability,"ram [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples:. >>> # [1] Analytic hf optimization; >>> optimize('hf'). >>> # [2] Finite difference mp5 optimization with gradient; >>> # printed to output file; >>> e, wfn = opt('mp5', return_wfn='yes'); >>> wfn.gradient().print_out(). >>> # [3] Can automatically perform complete basis set extrapolations; >>> optimize('MP2/cc-pV([D,T]+d)Z'). >>> # [4] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> optimize(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). >>> # [5] Get info like geometry, gradient, energy back after an; >>> # optimization fails. Note that the energy and gradient; >>> # correspond to the last optimization cycle, whereas the; >>> # geometry (by default) is the anticipated *next* optimization step.; >>> try:; >>> optimize('hf/cc-pvtz'); >>> except psi4.OptimizationConvergenceError as ex:; >>> next_geom_coords_as_numpy_array = np.asarray(ex.wfn.molecule().geometry()). table of contents. optimize; optimize(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.9.1;  · . PSI4. PSI4 API: Linking C++ and Python; optimize. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 08 February 2024 09:32PM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/api/psi4.driver.optimize.html:17699,update,updated,17699,psi4manual/1.9.x/api/psi4.driver.optimize.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/api/psi4.driver.optimize.html,1,['update'],['updated']
Deployability,"rameters initialized can be overwritten via dashparam.; dashlvl ({'d2p4', 'd2gr', 'd3zero', 'd3bj', 'd3mzero', d3mbj', 'd', 'd2', 'd3', 'd3m'}) – Flavor of a posteriori dispersion correction for which to load; parameters and call procedure in DFTD3. Must be a keys in; dashcoeff dict (or a key in dashalias that resolves to one).; dashparam (dict, optional) – Dictionary of the same keys as dashcoeff[dashlvl] used to; override any or all values initialized by; dashcoeff[dashlvl][func].; dertype ({None, 0, 'none', 'energy', 1, 'first', 'gradient'}, optional) – Maximum derivative level at which to run DFTD3. For large; mol, energy-only calculations can be significantly more; efficient. Also controls return values, see below.; verbose (bool, optional) – When True, additionally include DFTD3 output in output. Returns:; energy (float, optional) – When dertype is 0, energy [Eh].; gradient (list of lists of floats or psi4.core.Matrix, optional) – When dertype is 1, (nat, 3) gradient [Eh/a0].; (energy, gradient) (float and list of lists of floats or psi4.core.Matrix, optional) – When dertype is unspecified, both energy [Eh] and (nat, 3) gradient [Eh/a0]. Notes; research site: https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/dft-d3; Psi4 mode: When psi4 the python module is importable at import qcdb. time, Psi4 mode is activated, with the following alterations:; * output goes to output file; * gradient returned as psi4.core.Matrix, not list o’lists; * scratch is written to randomly named subdirectory of psi scratch; * psivar “DISPERSION CORRECTION ENERGY” is set; * verbose triggered when PRINT keywork of SCF module >=3. table of contents. Interface to DFTD3 by S. Grimme; Installation; Theory; Running DFTD3. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 July 2018 04:21AM.; Created using Sphinx 1.7.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/dftd3-1.html:10945,update,updated,10945,psi4manual/1.2.1/dftd3-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/dftd3-1.html,2,['update'],['updated']
Deployability,"rams"": {}, parameters for the dispersion correction; ""nlc"": False (optional) logical switch to turn off nlc (e.g. VV10) correction defined by LibXC; ""citation"": """", special reference for the dispersion correction parameters, appended to output. One can also use the dft_functional keyword argument to use the; orbitals generated by DFT for correlated wavefunction methods:; # MP2 with a PBE0 reference computation. molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis 6-31G; dft_spherical_points 302; dft_radial_points 99; reference rks; }. mp2_dft = energy(""MP2"", dft_functional=""PBE0""). Note that this would only update the generic Psi variables (e.g., “CURRENT ENERGY”) and not the MP2 or DFT variables.; Psi4 also supports easy customization and manipulation of DFT functionals. The values of alpha and omega can be adjusted with the DFT_ALPHA; and DFT_OMEGA keywords. For example, for LRC functionals, one can control the fraction of long-range Hartree-Fock and short-range DFA by changing DFT_OMEGA:; molecule ch2 {; 0 3; C; H 1 R; H 1 R 2 A. R = 1.075; A = 133.93; }. set reference uhf; set guess gwh; set basis cc-pvdz; set e_convergence 8. # Override the default value of omega; set dft_omega 2.0. E = energy('wb97x'). # Revoke the change for later computations if needed; revoke_global_option_changed('DFT_OMEGA'). This feature would be useful after finishing the IP fitting procedure, for example. table of contents. DFT: Density Functional Theory; Theory; Minimal Input; Spin/Symmetry Treatment; Functional Selection; Grid Selection; ERI Algorithms; IP Fitting; Fractional Particle Curves; Dispersion Corrections; Recommendations; Advanced Functional Use and Manipulation. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Theoretical Methods: SCF to FCI; DFT: Density Functional Theory. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/dft.html:36502,update,updated,36502,psi4manual/master/dft.html,https://psicode.org,https://psicode.org/psi4manual/master/dft.html,1,['update'],['updated']
Deployability,"rapolation starts. Same keyword controls the DIIS extrapolation for the solution of the response equations. Type: conv double; Default: 1e-3. LAMBDA_MAXITER¶. Maximum number of density cumulant update micro-iterations per macro-iteration (for ALOGRITHM = TWOSTEP). Same keyword controls the maximum number of density cumulant response micro-iterations per macro-iteration for the solution of the response equations (for RESPONSE_ALOGRITHM = TWOSTEP). Type: integer; Default: 50. MAXITER¶. Maximum number of macro-iterations for both energy and the solution of the response equations. Type: integer; Default: 40. RESPONSE_ALGORITHM¶. The algorithm to use for the solution of the response equations for the analytic gradients and properties. Two-step algorithm is generally more efficient than simultaneous and is used by default. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS; Default: TWOSTEP. R_CONVERGENCE¶. Convergence criterion for the RMS of the residual vector in the density cumulant updates as well as the solution of the density cumulant and orbital response equations. In the orbital updates controls the RMS of the SCF error vector. Type: conv double; Default: 1e-10. SCF_MAXITER¶. Maximum number of orbital update micro-iterations per macro-iteration (for ALOGRITHM = TWOSTEP). Same keyword controls the maximum number of orbital response micro-iterations per macro-iteration for the solution of the response equations (for RESPONSE_ALOGRITHM = TWOSTEP). Type: integer; Default: 50. TIKHONOW_OMEGA¶. The shift applied to the denominator in the density cumulant update iterations. Type: double; Default: 0.0. Expert¶. CACHELEVEL¶. Controls how to cache quantities within the DPD library. Type: integer; Default: 2. DCFT_GUESS¶. Whether to read the orbitals from a previous computation, or to compute an MP2 guess. Type: string; Possible Values: CC, BCC, MP2; Default: MP2. IGNORE_TAU¶. Controls whether to ignore terms containing non-idempotent contribution to OPDM or not (for debug",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/autodir_options_c/module__dcft-1.html:2609,update,updates,2609,psi4manual/4.0b3/autodir_options_c/module__dcft-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodir_options_c/module__dcft-1.html,2,['update'],['updates']
Deployability,"rary; developed by E. Valeev from early roots by J. Fermann. Libint requires no; additional licence, downloads, or configuration. Conversely, PSI4; cannot build without Libint. Note; As of Nov 2020 or release v1.4, PSI4 uses Libint2, not Libint1.; Compared to many other open-source QC codes, PSI4 requires a separate; Libint compilation with a different integrals ordering. See notes at top of; https://github.com/psi4/psi4/blob/master/external/upstream/libint2/CMakeLists.txt. Installation¶; Binary. Libint is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell).; If using the PSI4 binary, Libint has already been installed alongside.; If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; Libint can be obtained through conda install libint -c psi4.; Then, hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect Libint and activate dependent code. To remove a conda installation, conda remove libint. Source. Note that PSI4 uses v1. If using PSI4 built from source and you want Libint built from; from source also,; let the build system fetch and build it and activate dependent code. How to configure Libint for building Psi4¶; Role and Dependencies. Role — In PSI4, Libint is a library that provides essential; two-body molecular integrals over Gaussian functions.; Downstream Dependencies — PSI4 \(\Leftarrow\) Libint; Upstream Dependencies — Libint \(\Leftarrow\) None. CMake Variables. CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For Libint, set to an installation directory containing include/libint/libint.h; Libint_DIR — CMake variable to specify where pre-built Libint can be found. Set to installation directory containing share/cmake/Libint/LibintConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_Libint — CMake variable to force internal build of Libint instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_Libint — ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/libint-1.html:1354,install,installation,1354,psi4manual/1.4.0/libint-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/libint-1.html,4,['install'],['installation']
Deployability,"rate download page for psicode.org¶. Be in repo psicode-hugo-website; Copy and edit new file akin to https://github.com/psi4/psicode-hugo-website/blob/master/content/installs/v13rc2.md. Note the edition string v13rc2 in frontmatter for this and future filenames; Copy and edit new file akin to https://github.com/psi4/psicode-hugo-website/blob/master/data/installs/v13rc2.yaml for menu and notes content; Enter scripts/ dir and edit primarily https://github.com/psi4/psicode-hugo-website/blob/master/scripts/install-generator.py#L9 but also any other arrays or messages that should change.; Run the install-generator.py in place. It will dump new files into data/installs/ _subdirs_. Be sure to git add them.; Installer page is now ready.; Shift “latest” alias in frontmatter from whichever page is currently active to the new page. This makes sure “Downloads” on the navigation bar points to new page.; Conscientiously, one should test. installer downloads in Mac and Linux. And actually installing them and psi4 --test them.; that download button and curl downloading register on the download counters on vergil. Commit the new files, PR, and deploy psicode site; Petition on Slack for testers. Collect documentation snapshot¶. Documentation is built automatically by GHA from the latest psi4 master commit. It gets pushed to the psi4/psi4docs repository and thence served by netlify to a site independent of psicode.org. The netlify psicode.org site has a redirect so that psicode.org/psi4manual/master presents the psi4docs netlify content.; GHA controller is https://github.com/psi4/psi4/blob/master/.github/workflows/docs.yml; This setup works great for “latest” docs, but it won’t build a nice copy on the tag because the tag commit is pushed before the tag itself, so the version shows up “undefined”.; So, anytime after “Tag (pre)release” is over, navigate on psi4 GH to the tag commit (not the record commit) and retrigger the docs GHA. Download the artifact (zipped docs dir) at the end to ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/manage_release-1.html:16337,install,installing,16337,psi4manual/1.5.0/manage_release-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/manage_release-1.html,2,['install'],['installing']
Deployability,"rate download page for psicode.org¶. Be in repo psicode-hugo-website; Copy and edit new file akin to https://github.com/psi4/psicode-hugo-website/blob/master/content/installs/v13rc2.md. Note the edition string v13rc2 in frontmatter for this and future filenames; Copy and edit new file akin to https://github.com/psi4/psicode-hugo-website/blob/master/data/installs/v13rc2.yaml for menu and notes content; Enter scripts/ dir and edit primarily https://github.com/psi4/psicode-hugo-website/blob/master/scripts/install-generator.py#L9 but also any other arrays or messages that should change.; Run the install-generator.py in place. It will dump new files into data/installs/ _subdirs_. Be sure to git add them.; Installer page is now ready.; Shift “latest” alias in frontmatter from whichever page is currently active to the new page. This makes sure “Downloads” on the navigation bar points to new page.; Conscientiously, one should test. installer downloads in Mac and Linux. And actually installing them and psi4 --test them.; that download button and curl downloading register on the download counters on vergil. Commit the new files, PR, and deploy psicode site; Petition on Slack for testers. Collect documentation snapshot¶. Documentation is built automatically by GHA from the latest psi4 master commit. It gets pushed to the psi4/psi4docs repository and thence served by netlify to a site independent of psicode.org. The netlify psicode.org site has a redirect so that psicode.org/psi4manual/master presents the psi4docs netlify content.; GHA controller is psi4/.github/workflows/docs.yml; This setup works great for “latest” docs, but it won’t build a nice copy on the tag because the tag commit is pushed before the tag itself, so the version shows up “undefined”.; So, anytime after “Tag (pre)release” is over, navigate on psi4 GH to the tag commit (not the record commit) and retrigger the docs GHA. Download the artifact (zipped docs dir) at the end to a local computer.; In your hugo site",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/manage_release.html:16412,install,installing,16412,psi4manual/1.6.x/manage_release.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/manage_release.html,3,['install'],['installing']
Deployability,"rate download page for psicode.org¶. Be in repo psicode-hugo-website; Copy and edit new file akin to https://github.com/psi4/psicode-hugo-website/blob/master/content/installs/v13rc2.md. Note the edition string v13rc2 in frontmatter for this and future filenames; Copy and edit new file akin to https://github.com/psi4/psicode-hugo-website/blob/master/data/installs/v13rc2.yaml for menu and notes content; Enter scripts/ dir and edit primarily https://github.com/psi4/psicode-hugo-website/blob/master/scripts/install-generator.py#L9 but also any other arrays or messages that should change.; Run the install-generator.py in place. It will dump new files into data/installs/ _subdirs_. Be sure to git add them.; Installer page is now ready.; Shift “latest” alias in frontmatter from whichever page is currently active to the new page. This makes sure “Downloads” on the navigation bar points to new page.; Conscientiously, one should test. installer downloads in Mac and Linux. And actually installing them and psi4 --test them.; that download button and curl downloading register on the download counters on vergil. Commit the new files, PR, and deploy psicode site; Petition on Slack for testers. Publish GitHub release¶. On GitHub site “Draft a New Release” with newly minted tag; Fill in frontmatter style and links from previous GitHub release; Fill in RN from hopefully existing RN issue; Fill in RN by going through the top posts from all PRs from this milestone; “publish” release. This establishes release date for GitHub API; Close the RN issue.; Close the milestone (should be 100% complete). Publish GitHub postrelease¶. On GitHub site “Draft a New Release” for anticipated or newly minted tag; Fill in frontmatter style and links from previous GitHub release; Fill in RN as cherry-pick to or edit on branch; “publish” release. This establishes release date for GitHub API. Publish psicode release¶. Copy a recent release page like https://github.com/psi4/psicode-hugo-website/blob/master/co",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/manage_release-1.html:14405,install,installing,14405,psi4manual/1.4.0/manage_release-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/manage_release-1.html,2,['install'],['installing']
Deployability,"rations, rather than the; full density matrix. To turn on this option, set INCFOCK to true.; We have added the automatic capability to use the extremely fast DF; code for intermediate convergence of the orbitals, for SCF_TYPE; DIRECT. At the moment, the code defaults to cc-pVDZ-JKFIT as the; auxiliary basis, unless the user specifies DF_BASIS_SCF manually. For; some atoms, cc-pVDZ-JKFIT is not defined, so a very large fitting basis of last; resort will be used.; To avoid this, either set DF_BASIS_SCF to an auxiliary; basis set defined for all atoms in the system, or set DF_SCF_GUESS; to false, which disables this acceleration entirely. COSX Exchange¶; The semi-numerical COSX algorithm described in [Neese:2009:98] evaluates; two-electron ERIs analytically over one electron coordinate and numerically; over the other electron coordinate, and belongs to the family of pseudospectral; methods originally suggested by Friesner. In COSX, numerical integration is performed on standard; DFT quadrature grids, which are described in DFT: Density Functional Theory.; Both the accuracy of the COSX algorithm and also the computational; cost are directly determined by the size of the integration grid, so selection; of the grid is important. This COSX implementation uses two separate grids.; The SCF algorithm is first converged on a smaller grid, followed by a final SCF; iteration on a larger grid. This results in numerical errors comparable to; performing the entire SCF on the expensive larger grid at a computational cost; much closer to the smaller grid. The size of the initial grid is controlled by the; keywords COSX_RADIAL_POINTS_INITIAL and COSX_SPHERICAL_POINTS_INITIAL.; The final grid is controlled by COSX_RADIAL_POINTS_FINAL and; COSX_SPHERICAL_POINTS_FINAL. The defaults for both grids aim to balance; cost and accuracy.; Screening thresholds over integrals, densities, and basis extents are set; with the COSX_INTS_TOLERANCE, COSX_DENSITY_TOLERANCE, and; COSX_BASIS_TOLERANCE key",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/scf.html:30562,integrat,integration,30562,psi4manual/1.6.x/scf.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/scf.html,2,['integrat'],['integration']
Deployability,"rator.py#L9 but also any other arrays or messages that should change.; Run the install-generator.py in place. It will dump new files into data/installs/ _subdirs_. Be sure to git add them.; Installer page is now ready.; Shift “latest” alias in frontmatter from whichever page is currently active to the new page. This makes sure “Downloads” on the navigation bar points to new page.; Conscientiously, one should test. installer downloads in Mac and Linux. And actually installing them and psi4 --test them.; that download button and curl downloading register on the download counters on vergil. Commit the new files, PR, and deploy psicode site; Petition on Slack for testers. Publish GitHub release¶. On GitHub site “Draft a New Release” with newly minted tag; Fill in frontmatter style and links from previous GitHub release; Fill in RN from hopefully existing RN issue; Fill in RN by going through the top posts from all PRs from this milestone; “publish” release. This establishes release date for GitHub API; Close the RN issue.; Close the milestone (should be 100% complete). Publish GitHub postrelease¶. On GitHub site “Draft a New Release” for anticipated or newly minted tag; Fill in frontmatter style and links from previous GitHub release; Fill in RN as cherry-pick to or edit on branch; “publish” release. This establishes release date for GitHub API. Publish psicode release¶. Copy a recent release page like https://github.com/psi4/psicode-hugo-website/blob/master/content/posts/v1p2.md; Edit its filename, title, date, image, and links; Execute https://api.github.com/repos/psi4/psi4/releases/latest and note the id field value; Use the id value in the shortcode call at the bottom. Finalize release¶. Make new PR with; * edits to main README.md badges, python versions, etc.; * edits to CMakeLists.txt find_package(PythonLibsNew 3.6 REQUIRED); On godaddy, grab the exact tag 1.3 manual before it gets overwritten and preserve it: cp -pR master 1.3; Tweet about release. Reset psi4meta",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/manage_release-1.html:14921,release,release,14921,psi4manual/1.4.0/manage_release-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/manage_release-1.html,2,['release'],['release']
Deployability,"rbital-optimized MP2.5 [manual]. lccd; Linear CCD [manual] [details]. olccd; orbital optimized LCCD [manual]. ccd; coupled cluster doubles (CCD) [manual]. ccsd; coupled cluster singles and doubles (CCSD) [manual] [details]. ccsd(t); CCSD with perturbative triples (CCSD(T)) [manual] [details]. eom-ccsd; equation of motion (EOM) CCSD [manual]. Examples:. 1; 2>>> # [1] Analytic hf optimization; >>> optimize('hf'). 1; 2; 3; 4>>> # [2] Finite difference mp5 optimization with gradient; >>> # printed to output file; >>> e, wfn = opt('mp5', return_wfn='yes'); >>> wfn.gradient().print_out(). 1; 2; 3>>> # [3] Forced finite difference hf optimization run in; >>> # embarrassingly parallel fashion; >>> optimize('hf', dertype='energy', mode='sow'). 1; 2>>> # [4] Can automatically perform complete basis set extrapolations; >>> optimize('MP2/cc-pV([D,T]+d)Z'). 1; 2; 3; 4>>> # [5] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> optimize(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). psi4.gradient(name[, molecule, return_wfn, func, dertype])[source]¶; Function complementary to :py:func:~driver.optimize(). Carries out one gradient pass,; deciding analytic or finite difference. Returns:Matrix – Total electronic gradient in Hartrees/Bohr. Returns:(Matrix, Wavefunction) – gradient and wavefunction when return_wfn specified. Examples:. 1; 2; 3; 4; 5; 6>>> # [1] Single-point dft gradient getting the gradient; >>> # in file, core.Matrix, and np.array forms; >>> set gradient_write on; >>> G, wfn = gradient('b3lyp-d', return_wfn=True); >>> wfn.gradient().print_out(); >>> np.array(G). Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Psithon Functions: Invoking a Calculation. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/opt-1.html:5601,update,updated,5601,psi4manual/1.1.0/opt-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/opt-1.html,2,['update'],['updated']
Deployability,"rcalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or str) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF and UHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) or LSDA density functional theory (DFT) [manual] [details]. Examples:. >>> # [1] Frequency calculation for all modes through highest available derivatives; >>> frequency('ccsd'). >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> # printing lowest mode frequency to screen and Hessian to output; >>> E, wfn = frequencies('scf', dertype=1, irrep=4, return_wfn=True); >>> print wfn.frequencies().get(0, 0); >>> wfn.hessian().print_out(). >>> # [3] Frequency calculation at default conditions and Hessian reuse at STP; >>> E, wfn = freq('mp2', return_wfn=True); >>> set t 273.15; >>> set p 100000; >>> thermo(wfn, wfn.frequencies()). >>> # [4] Opt+Freq, skipping the gradient recalc at the start of the Hessian; >>> e, wfn = optimize('hf', return_wfn=True); >>> frequencies('hf', ref_gradient=wfn.gradient()). table of contents. frequency; frequency(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. PSI4 API: Linking C++ and Python; frequency. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/api/psi4.driver.frequency.html:3200,update,updated,3200,psi4manual/master/api/psi4.driver.frequency.html,https://psicode.org,https://psicode.org/psi4manual/master/api/psi4.driver.frequency.html,1,['update'],['updated']
Deployability,"rce]¶; Function to compute various properties. Aliases:prop(). Returns:none. Caution; Some features are not yet implemented. Buy a developer a coffee. This function at present has a limited functionality.; Consult the keywords sections of other modules for further property capabilities. Name; Calls Method; Reference; Supported Properties. scf; Self-consistent field method(s); RHF/ROHF/UHF; Listed here. hf; HF Self-consistent field method(s); RHF/ROHF/UHF; Listed here. mp2; MP2 with density fitting only (mp2_type df); RHF; Listed here. cc2; 2nd-order approximate CCSD; RHF; dipole, quadrupole, polarizability, rotation, roa_tensor. ccsd; Coupled cluster singles and doubles (CCSD); RHF; dipole, quadrupole, polarizability, rotation, roa_tensor. eom-cc2; 2nd-order approximate EOM-CCSD; RHF; oscillator_strength, rotational_strength. eom-ccsd; Equation-of-motion CCSD (EOM-CCSD); RHF; oscillator_strength, rotational_strength. cisd, cisdt,; cisdt, cisdtq,; ci5, …, fci; Configuration interaction; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. casscf, rasscf; Multi-configurational SCF; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. Parameters:; name (string) – 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. properties (array of strings) – \(\Rightarrow\) [] \(\Leftarrow\) || ['rotation', 'polarizability', 'oscillator_strength', 'roa'] || etc.; Indicates which properties should be computed. Defaults to dipole and quadrupole. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. 1; 2>>> # [1] Optical rotation calculation; >>> properties('cc2', properties=['rotation']). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Psithon Functions: Invoking a Calculation. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 July 2018 04:21AM.; Created using Sphinx 1.7.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/prop-1.html:1275,configurat,configurational,1275,psi4manual/1.2.1/prop-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/prop-1.html,4,"['configurat', 'update']","['configurational', 'updated']"
Deployability,"rd DMA. Type: double; Default: 4.0. How to configure gdma for building Psi4¶; Role and Dependencies. Role — In PSI4, GDMA is a library that provides additional; quantum chemical capabilities (multipole analysis).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) gdma; Upstream Dependencies — gdma \(\Leftarrow\) Fortran. CMake Variables. ENABLE_gdma — CMake variable toggling whether Psi4 builds with gdma; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For gdma, set to an installation directory containing include/GDMA/GDMA_MANGLE.h; gdma_DIR — CMake variable to specify where pre-built gdma can be found. Set to installation directory containing share/cmake/gdma/gdmaConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_gdma — CMake variable to force internal build of gdma instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_gdma — CMake variable to force detecting pre-built gdma and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_gdma=ON. Build without gdma. >>> cmake. Link against pre-built. >>> cmake -DENABLE_gdma=ON -DCMAKE_PREFIX_PATH=/path/to/gdma/root. >>> cmake -DENABLE_gdma=ON -Dgdma_DIR=/path/to/gdma/configdir. Build bundled despite pre-built being detectable. >>> cmake -DENABLE_gdma=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/gdma/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_gdma=ON. table of contents. Interface to GDMA Distributed Multipole Analysis by A. J. Stone — gdma(); Installation; Input; Options; GDMA_LIMIT; GDMA_ORIGIN; GDMA_MULTIPOLE_UNITS; GDMA_RADIUS; GDMA_SWITCH. How to configure gdma for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to GDMA Distributed Multipole Analysis by A. J. Stone — gdma(). © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/gdma.html:7108,update,updated,7108,psi4manual/master/gdma.html,https://psicode.org,https://psicode.org/psi4manual/master/gdma.html,1,['update'],['updated']
Deployability,"rd'). qcdb¶; Module to facilitate quantum chemical computations on chemical; databases. Contains Molecule class and physical constants from psi4 suite.; Module to largely replicate in python the psi4 libmints; CoordValue and CoordEntry classes, which were developed by; Justin M. Turney, with incremental improvements by other; psi4 developers. class CartesianEntry(entry_number, Z, charge, mass, symbol, label, x, y, z)[source]¶; Class to hold all information about an atom, including its; coordinate specification as three Cartesians. clone()[source]¶; Returns new, independent CartesianEntry object. compute()[source]¶; Computes the values of the coordinates (in whichever units; were inputted), returning them in a Vector. everything()[source]¶. invalidate()[source]¶; Flags the current coordinates as being outdated. print_in_input_format()[source]¶; Prints the updated geometry, in the format provided by the user. set_coordinates(x, y, z)[source]¶; Given the current set of coordinates, updates the values of this; atom’s coordinates and any variables that may depend on it. type()[source]¶; The type of CoordEntry specialization. class CoordEntry(entry_number, Z, charge, mass, symbol, label='')[source]¶; Class to. Z()[source]¶; The nuclear charge of the current atom (0 if ghosted). static a(a1, a2, a3)[source]¶; Computes the angle (in rad.) between three sets of coordinates. charge()[source]¶; The “atomic charge” of the current atom (for SAD purposes). static d(a1, a2, a3, a4)[source]¶; Computes the dihedral (in rad.) between four sets of coordinates. entry_number()[source]¶; The order in which this appears in the full atom list. everything()[source]¶. is_computed()[source]¶; Whether the current atom’s coordinates are up-to-date. is_equivalent_to(other)[source]¶; Whether this atom has the same mass and ghost status as atom other.; Unlike the libmints version, this does not compare basisset assignment. is_ghosted()[source]¶; Whether the current atom is ghosted or not. label()[s",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/autodoc_driver-1.html:35623,update,updates,35623,psi4manual/4.0b3/autodoc_driver-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_driver-1.html,4,['update'],['updates']
Deployability,"rd.; DFMP2 likes memory. At a minimum, \(2Q^2\) doubles are required,; where \(Q\) is the size of the auxiliary basis set. However, there is; one disk transpose of the \((Q|ov)\) tensor in the RHF-MP2 algorithm; [two for UHF-MP2 and ROHF-MBPT(2)], so more memory will reduce seek times.; If you notice DFMP2 using more memory than allowed, it is possible that; the threaded three-index ERI computers are using too much overhead memory.; Set the DF_INTS_NUM_THREADS to a smaller number to prevent this; in this section (does not affect threaded efficiency in the rest of the; code).; DFMP2 likes disk. At a minimum, \(2Qov\) doubles are required for; RHF-MP2, and \(4Qov\) doubles are required for UHF-MP2.; DFMP2 likes threads. Some of the formation of the \((Q|ov)\) tensor; relies on threaded BLAS (such as MKL) for efficiency. The main; \({\cal O}(N^5)\) step is done via small/medium-sized DGEMMs inside of; OpenMP, so make sure to set the OMP_NESTED environment variable; to FALSE to prevent thread thrash (or just as well, do not define; OMP_NESTED at all).; Freezing core is good for both efficiency and correctness purposes.; Freezing virtuals is not recommended. The DFMP2 module will remind you how; many frozen/active orbitals it is using in a section just below the title.; ROHF-MBPT(2) may be preferred to UHF-MP2, as the latter can suffer from; severe spin contamination in some cases.; MP2 is not suitable for systems with multireference character. The; orbital energies will come together and an explosion will occur. table of contents. DF-MP2: Density-Fitted 2nd-Order Møller–Plesset Perturbation Theory; Introduction; Theory; Recommendations. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Theoretical Methods: SCF to FCI; DF-MP2: Density-Fitted 2nd-Order Møller–Plesset Perturbation Theory. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/dfmp2.html:10865,update,updated,10865,psi4manual/master/dfmp2.html,https://psicode.org,https://psicode.org/psi4manual/master/dfmp2.html,1,['update'],['updated']
Deployability,"rder Convergence; Stability Analysis; Effective core potentials (ECPs); External potentials and QM/MM; Convergence and Algorithm Defaults; Recommendations. DFT: Density Functional Theory; Theory; Minimal Input; Spin/Symmetry Treatment; Functional Selection; Grid Selection; ERI Algorithms; IP Fitting; Fractional Particle Curves; Dispersion Corrections; Recommendations; Advanced Functional Use and Manipulation. DCFT: Density Cumulant Functional Theory; Theory; Methods; Iterative Algorithms; Analytic Gradients; Methods Summary; Minimal Input; Recommendations. DF-MP2: Density-Fitted 2nd-Order Møller–Plesset Perturbation Theory; Introduction; Theory; Recommendations. CC: Coupled Cluster Theory; Basic Keywords; Larger Calculations; Excited State Coupled Cluster Calculations; Linear Response (CCLR) Calculations. FNOCC: Frozen natural orbitals for CCSD(T), QCISD(T), CEPA, and MP4; Frozen natural orbitals (FNO); QCISD(T), CCSD(T), MP4, and CEPA; Quadratic configuration interaction and coupled cluster; Many-body perturbation theory; Coupled electron pair approximation; Density-fitted coupled cluster; Gn theory; Supported methods; Basic FNOCC Keywords; Advanced FNOCC Keywords. OCC: Orbital-Optimized Coupled-Cluster and Møller–Plesset Perturbation Theories; Introduction; Theory; Convergence Problems; Methods; Basic OCC Keywords; Advanced OCC Keywords; Basic DFOCC Keywords; Advanced DFOCC Keywords; Conventional (Non-OO) Coupled-Cluster and Møller–Plesset Perturbation Theories. PSIMRCC Implementation of Mk-MRCC Theory; A Simple Example; Orbital ordering and selection of the model space. CI: Configuration Interaction; Basic DETCI Keywords; Arbitrary Order Perturbation Theory; Arbitrary Order Coupled-Cluster Theory. SAPT: Symmetry-Adapted Perturbation Theory; The S2 approximation and scaling; A First Example; Advanced example; SAPT0; Higher-Order SAPT; MP2 Natural Orbitals; Charge-Transfer in SAPT; Monomer-Centered Basis Computations; Computations with Mid-bonds; Interpreting SAPT ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/methods-1.html:1691,configurat,configuration,1691,psi4manual/1.2.1/methods-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/methods-1.html,4,['configurat'],['configuration']
Deployability,"rdinate information of the molecule is accessible; molecule eneyne {; 0 1; C_ene 0.000000 -0.667578 -2.124659; C_ene 0.000000 0.667578 -2.124659; H_ene@2.014 0.923621 -1.232253 -2.126185; H_ene -0.923621 -1.232253 -2.126185; H_ene -0.923621 1.232253 -2.126185; Gh(H_ene) 0.923621 1.232253 -2.126185; --; 0 1; X 9.0 9.0 9.0; C_yne 0.000000 0.000000 2.900503; C_yne 0.000000 0.000000 1.693240; H_yne 0.000000 0.000000 0.627352; H_yne 0.000000 0.000000 3.963929; }. eneyne.update_geometry(). for iat in range(eneyne.natom()):; print """"""{:4} {:4} {:12} {:8.4f} {:12.6f} {:12.6f} {:12.6f} {:12.6f}"""""".format(; eneyne.Z(iat), # atomic number; eneyne.symbol(iat), # element symbol; eneyne.label(iat), # input element label; eneyne.charge(iat), # element charge; eneyne.x(iat), # x-coordinate; eneyne.y(iat), # y-coordinate; eneyne.z(iat), # z-coordinate; eneyne.mass(iat), # mass; ). # 6.0 C C_ENE 6.0000 -0.031900 -1.218981 -3.948079 12.000000; # 6.0 C C_ENE 6.0000 -0.031900 1.304098 -3.948079 12.000000; # 1.0 H H_ENE 1.0000 1.713491 -2.286062 -3.950962 2.014000; # 1.0 H H_ENE 1.0000 -1.777290 -2.286062 -3.950962 1.007825; # 1.0 H H_ENE 1.0000 -1.777290 2.371180 -3.950962 1.007825; # 0.0 H H_ENE 0.0000 1.713491 2.371180 -3.950962 1.007825; # 6.0 C C_YNE 6.0000 -0.031900 0.042559 5.548101 12.000000; # 6.0 C C_YNE 6.0000 -0.031900 0.042559 3.266705 12.000000; # 1.0 H H_YNE 1.0000 -0.031900 0.042559 1.252468 1.007825; # 1.0 H H_YNE 1.0000 -0.031900 0.042559 7.557685 1.007825. table of contents. Molecule and Geometry Specification; Coordinates; Molecule Keywords; Multiple Molecules; Ghost Atoms; Isotopic Substitution; PubChem Database; Symmetry; Non-Covalently Bonded Molecule Fragments; Advanced Python. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.6;  · . PSI4. Psithon: Structuring an Input File; Molecule and Geometry Specification. © Copyright 2022, The Psi4 Project.; Last updated on Thursday, 19 May 2022 08:57PM.; Created using Sphinx 4.5.0.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/psithonmol.html:21129,update,updated,21129,psi4manual/1.6.x/psithonmol.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/psithonmol.html,1,['update'],['updated']
Deployability,"re BLAS/LAPACK for building Psi4; How to configure Python for building Psi4; What Python is Psi4 running; How to fix “undefined symbol: _Py_FalseStruct”; How to use gdb and lldb with Psi4; How to see the actual compiling commands (or errors) with cmake; How to highlight git merge conflicts in vi; How to handle “runtime library may be hidden” when building with Anaconda Python; How to set up the scratch directory; How do I retain specific Psi4 scratch files; How to use Psi4 within a PBS queue; How to update and rebuild Psi4; How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation; How to refer to Psi4; How to use a local Add-On repository in the Psi4 build. Installing from Binary; How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; Quick Installation; Detailed Installation of Miniconda; Detailed Installation of PSI4; Useful Commands; Troubleshooting. Scratch Files and Elementary Restart¶; One very important part of user configuration at the end of the; installation process; is to tell PSI4 where to write its temporary; (“scratch”) files. Electronic structure packages like PSI4 can; create rather large temporary disk files. It is very important to; ensure that PSI4 is writing its temporary files to a disk drive; physically attached to the computer running the computation. If it; is not, it will significantly slow down the program and the network.; By default, PSI4 will write temporary files to /tmp, but this; directory is often not large enough for typical computations. Therefore,; you need to (a) make sure there is a sufficiently large directory on a; locally attached disk dri",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/external-1.html:3127,install,install,3127,psi4manual/1.2.1/external-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/external-1.html,14,"['install', 'update']","['install', 'installer', 'update']"
Deployability,"re compilation; What is the directory layout of the installed or staged Psi4; How to run Psi4 as executable after compilation; How to solve ModuleNotFoundError: No module named 'psi4'; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4; How to configure Python for building Psi4; What Python is Psi4 running; How to fix “undefined symbol: _Py_FalseStruct”; How to use gdb and lldb with Psi4; How to see the actual compiling commands (or errors) with cmake; How to highlight git merge conflicts in vi; How to handle “runtime library may be hidden” when building with Anaconda Python; How to set up the scratch directory; How do I retain specific Psi4 scratch files; How to use Psi4 within a PBS queue; How to update and rebuild Psi4; How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation; How to refer to Psi4; How to get a Psi4 logo file; How to use a local Add-On repository in the Psi4 build. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Installation and Runtime Configuration; Compiling and Installing from Source. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/build_planning-1.html:61606,update,update,61606,psi4manual/1.4.0/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/build_planning-1.html,6,"['install', 'update']","['installation', 'update', 'updated']"
Deployability,"re compilation; What is the directory layout of the installed or staged Psi4; How to run Psi4 as executable after compilation; How to solve ModuleNotFoundError: No module named 'psi4'; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4; How to configure Python for building Psi4; What Python is Psi4 running; How to fix “undefined symbol: _Py_FalseStruct”; How to use gdb and lldb with Psi4; How to see the actual compiling commands (or errors) with cmake; How to highlight git merge conflicts in vi; How to handle “runtime library may be hidden” when building with Anaconda Python; How to set up the scratch directory; How do I retain specific Psi4 scratch files; How to use Psi4 within a PBS queue; How to update and rebuild Psi4; How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation; How to refer to Psi4; How to get a Psi4 logo file; How to use a local Add-On repository in the Psi4 build. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Installation and Runtime Configuration; Compiling and Installing from Source. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/build_planning-1.html:61606,update,update,61606,psi4manual/1.5.0/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_planning-1.html,6,"['install', 'update']","['installation', 'update', 'updated']"
Deployability,"re good, while H$_2$O and LaTeX tables; are not translated correctly. Python docstrings are absorbed as-is, so; please use reST math formatting (essentially $latex math$ \(\Rightarrow\); :math:`latex math`).; Starting around PSI4 1.1, MathJax is used for in-browser LaTeX; rendering in place of offline PNG generation of math images. Check the; online rendering, as occasionally there will be errors even when the LaTeX; looked sound. The Map of the Sphinx¶. Adding a new Appendix or First-TOC-Level page; Create your reST file and fill it with information. Add the name of your; file to psi4/doc/sphinxman/source/appendices.rst for an appendix or; to psi4/doc/sphinxman/source/index.rst for a first-TOC-level.; Finally, add your file to the STATICDOC variable in; psi4/doc/sphinxman/CMakeLists.txt. Sphinx will now build with your; new page. Adding a new module to “Theoretical Methods”; Copy the file of a well-established module, like; psi4/doc/sphinxman/source/sapt.rst. Change the title, author, sec; label, ref, and source labels at the top of the file to point instead to; your code. Edit psi4/doc/sphinxman/source/methods.rst to add the; name of your file so that it will appear in the TOC tree. Add your file; to the STATICDOC variable in; psi4/doc/sphinxman/CMakeLists.txt. Sphinx will now build with your new; file. Follow the models in existing methods pages to write your; documentation. If you don’t get all the keyword links, bibliography; links, sample inputs, math, tables, etc. working in Sphinx, don’t worry; about it. A genie will probably come through and tidy up all your; source. table of contents. Updating the PSI4 Users’ and Programmers’ Manual; Installing Sphinx; Documentation Structure; reStructuredText; Math in the Codebase; The Map of the Sphinx. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/documentation-1.html:6884,update,updated,6884,psi4manual/1.3.2/documentation-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/documentation-1.html,2,['update'],['updated']
Deployability,"re particularly, Miniconda (a lightweight python; distribution with same package manager conda). Some nice features for us:. cross-platform; no root, administrator, or sudo access required; built with high-performance math libraries; lightweight software stack (<100 MB w/o PSI4; ~1 GB including PSI4, numpy, and MKL); updated nightly so new features accessible; standardizes python distribution so no need to find/install libpython packages; add-ons (plugins, extra features requiring Fortran compiler, etc.) can be made available as conda packages; develop PSI4 through plugins without a pre-existing development environment, see Creating a New Plugin Using a Conda Pre-compiled Binary. The PSI4 binary repository is at Anaconda (formerly Binstar).; For commands to get a default installation, go to How to install a Psi4 binary with the Psi4conda installer, command-line; or the psicode downloads page; (pre-release downloads page).; Users proficient with conda may prefer to consult What do the conda packages psi4 & psi4-dev and the installer psi4conda contain.; For more flexibility and a detailed explanation, go to; Detailed Installation of Miniconda and Detailed Installation of . How to install a Psi4 binary with the Psi4conda installer, download site¶; Download one of the nine installers (Linux/Mac/Windows; Py27/35/36).; bash it. Follow the prompts and do make the adjustments to; PATH and PSI_SCRATCH that it suggests at the end. Test; with psi4 --test (green and yellow good; red bad). Done. Explicit commands at How to install a Psi4 binary with the Psi4conda installer, command-line. How to install a Psi4 binary with the Psi4conda installer, command-line¶; Sequence of commands to get you to a working PSI4 on Linux,; Mac, or Windows (Ubuntu shell for Windows accepts Linux installers).; Installs Miniconda+Psi4+AddOns into $HOME/psi4conda and; the PSI4 executable into the main conda environment at; $HOME/psi4conda/bin/psi4.; # Linux; # py27|py35|py36 for alternate python version",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/conda-1.html:1651,install,installer,1651,psi4manual/1.2.1/conda-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/conda-1.html,4,['install'],['installer']
Deployability,"re particularly, Miniconda (a lightweight python; distribution with same package manager conda). Some nice features for us:. cross-platform; no root, administrator, or sudo access required; built with high-performance math libraries; lightweight software stack (<100 MB w/o PSI4; ~1 GB including PSI4, numpy, and MKL); updated nightly so new features accessible; standardizes python distribution so no need to find/install libpython packages; add-ons (plugins, extra features requiring Fortran compiler, etc.) can be made available as conda packages; develop PSI4 through plugins without a pre-existing development environment, see Creating a New Plugin Using a Conda Pre-compiled Binary. The PSI4 binary repository is at Anaconda (formerly Binstar).; For commands to get a default installation, go to How to install a Psi4 binary with the Psi4conda installer, command-line; or the psicode downloads page; (pre-release downloads page).; Users proficient with conda may prefer to consult What do the conda packages psi4 & psi4-dev and the installer psi4conda contain.; For more flexibility and a detailed explanation, go to; Detailed Installation of Miniconda and Detailed Installation of . How to install a Psi4 binary with the Psi4conda installer, download site¶; Download one of the nine installers (Linux/Mac/Windows; Py27/35/36).; bash it. Follow the prompts and do make the adjustments to; PATH and PSI_SCRATCH that it suggests at the end. Test; with psi4 --test. Done. Explicit commands at How to install a Psi4 binary with the Psi4conda installer, command-line. How to install a Psi4 binary with the Psi4conda installer, command-line¶; Sequence of commands to get you to a working PSI4 on Linux,; Mac, or Windows (Ubuntu shell for Windows accepts Linux installers).; Installs Miniconda+Psi4+AddOns into $HOME/psi4conda and; the PSI4 executable into the main conda environment at; $HOME/psi4conda/bin/psi4.; # Linux; # py27|py35|py36 for alternate python versions; >>> curl -O ""http://vergil.che",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/conda-1.html:1475,install,installer,1475,psi4manual/1.1.0/conda-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/conda-1.html,2,['install'],['installer']
Deployability,"re that a calculation works with BrianQC, the following options need to; be set when enabling BrianQC:. BrianQC currently only handles the C1 molecular symmetry point group. Thus, if; the molecule has any symmetries (which PSI4 would detect by default), the; input geometry must contain the line symmetry c1 to force PSI4 to; disregard the symmetry. To achieve peak performance, the following settings are recommended when enabling; BrianQC:. By default, PSI4 uses density-fitted preiterations for SCF, which BrianQC; doesn’t handle yet. To ensure that no non-BrianQC-accelerated iterations are; performed, disable the preiterations by setting DF_SCF_GUESS to False.; By default, PSI4 uses a disk-based Fock building, but BrianQC currently only; accelerates direct Fock builds. To ensure that Fock building is accelerated by; BrianQC, set SCF_TYPE to direct. Keywords¶. BRIANQC_ENABLE¶. Whether to enable using the BrianQC GPU module. Type: boolean; Default: false. Environment Variables¶. BRIANQC_SDK_INSTALL¶; Toggle for type of BrianQC installation.; See https://s3.amazonaws.com/streamnovation-brianqc-manual/BrianQC_Manual_v1_1_0.pdf for details. BRIANQC_INSTALL_PATH¶; Location of BrianQC installation.; See https://s3.amazonaws.com/streamnovation-brianqc-manual/BrianQC_Manual_v1_1_0.pdf for details. BRIANQC_ENABLE¶; Runtime toggle of whether to use BrianQC. table of contents. Interface to the BrianQC GPU module by the BrianQC team; Installing BrianQC; Building BrianQC’s user-built components; Building PSI4 with BrianQC; Using BrianQC from PSI4; When to enable BrianQC; Necessary and recommended option values. Keywords; BRIANQC_ENABLE. Environment Variables. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to the BrianQC GPU module by the BrianQC team. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/brianqc.html:4399,install,installation,4399,psi4manual/1.8.x/brianqc.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/brianqc.html,4,"['install', 'toggle', 'update']","['installation', 'toggle', 'updated']"
Deployability,"re that a calculation works with BrianQC, the following options need to; be set when enabling BrianQC:. BrianQC currently only handles the C1 molecular symmetry point group. Thus, if; the molecule has any symmetries (which PSI4 would detect by default), the; input geometry must contain the line symmetry c1 to force PSI4 to; disregard the symmetry. To achieve peak performance, the following settings are recommended when enabling; BrianQC:. By default, PSI4 uses density-fitted preiterations for SCF, which BrianQC; doesn’t handle yet. To ensure that no non-BrianQC-accelerated iterations are; performed, disable the preiterations by setting DF_SCF_GUESS to False.; By default, PSI4 uses a disk-based Fock building, but BrianQC currently only; accelerates direct Fock builds. To ensure that Fock building is accelerated by; BrianQC, set SCF_TYPE to direct. Keywords¶. BRIANQC_ENABLE¶. Whether to enable using the BrianQC GPU module. Type: boolean; Default: false. Environment Variables¶. BRIANQC_SDK_INSTALL¶; Toggle for type of BrianQC installation.; See https://s3.amazonaws.com/streamnovation-brianqc-manual/BrianQC_Manual_v1_1_0.pdf for details. BRIANQC_INSTALL_PATH¶; Location of BrianQC installation.; See https://s3.amazonaws.com/streamnovation-brianqc-manual/BrianQC_Manual_v1_1_0.pdf for details. BRIANQC_ENABLE¶; Runtime toggle of whether to use BrianQC. table of contents. Interface to the BrianQC GPU module by the BrianQC team; Installing BrianQC; Building BrianQC’s user-built components; Building PSI4 with BrianQC; Using BrianQC from PSI4; When to enable BrianQC; Necessary and recommended option values. Keywords; BRIANQC_ENABLE. Environment Variables. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.9.1;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to the BrianQC GPU module by the BrianQC team. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 08 February 2024 09:32PM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/brianqc.html:4399,install,installation,4399,psi4manual/1.9.x/brianqc.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/brianqc.html,4,"['install', 'toggle', 'update']","['installation', 'toggle', 'updated']"
Deployability,"re the molecule is specified in Z-matrix format; with dummy atoms will result in the geometry being converted to a Cartesian representation. Parameters:; name (string) – 'scf' || 'df-mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; energy(). func (function) – gradient || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. mode (string) – 'continuous' || 'sow' || 'reap'; For a finite difference of energies optimization, indicates whether; the calculations required to complete the; optimization are to be run in one file ('continuous') or are to be; farmed out in an embarrassingly parallel fashion; ('sow'/'reap'). For the latter, run an initial job with; 'sow' and follow instructions in its output file. dertype (dertype) – 'gradient' || 'energy'; Indicates whether analytic (if available) or finite difference; optimization is to be performed. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples :. >>> # [1] Analytic scf optimization; >>> optimize('scf'). >>> # [2] Finite difference mp5 optimization; >>> opt('mp5'). >>> # [3] Forced finite difference ccsd optimization; >>> optimize('ccsd', dertype=1). For further discussion of geometry optimization, see; Sec. Geometry Optimization. Previous topic; Counterpoise Correct; Next topic; Frequency; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Psithon Functions: Invoking a Calculation ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/opt-1.html:8224,update,updated,8224,psi4manual/4.0b5/opt-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/opt-1.html,2,['update'],['updated']
Deployability,"re verbose errors: pytest -vv. How to see CTest testing errors¶; >>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ctest reports that some (or all) tests have failed, look in your; build directory for file; objdir/Testing/Temporary/LastTest.log. It may have a; .tmp extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake’s testing; output, as well as everything that was printed to the screen. How to test a Psi4 installation¶; ctest requires a connection to source files and cmake; machinery and so can only be performed from objdir; (staged installation). To test an installed PSI4 (full or staged; installation), a supplementary test suite is available to be; run via pytest. Running a limited number of “smoke” tests is; generally sufficient to verify an installation. From the executable; # smoke tests only in serial; psi4 --test; # smoke tests only in parallel; psi4 --test -n`getconf _NPROCESSORS_ONLN`; # most tests; psi4 --test full. From the library (PSI4 must be detectable as a Python; module. See setup at How to configure paths for PsiAPI; if needed.); # smoke tests only; python -c ""import psi4; psi4.test('smoke')""; # most tests; python -c ""import psi4; psi4.test()"". From pytest directly. If package pytest-xdist is installed, can run in parallel.; # smoke tests only; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -m smoke -n auto; # all tests; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -n auto. Output looks something like the below. PASSED in green is good; (means test ran correctly); SKIPPED in yellow is good (means that; not all software required for test is available); XPASS or XFAIL; in yellow is fine (unexpected pass or expected fail happens when we; include tests that nee",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/build_planning.html:55130,install,installation,55130,psi4manual/1.6.x/build_planning.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/build_planning.html,5,['install'],['installation']
Deployability,"re wrong, as are ESP calculations and some energies for long-range; corrected (“omega”) functionals. Insofar as faulty answers are; anticipated with INTEGRAL_PACKAGE erd, PSI4 will; throw an error if you try to execute that class of computation. But; there may be more, so use with caution. Warning; erd seems to be having some problems with Intel 2018 compilers. presently disabled in conda package. Installation¶; Binary. ERD is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; erd can be obtained through conda install erd -c psi4.; Then enable it as a feature with ENABLE_erd,; hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect erd and activate dependent code.; Previous bullet had details. To build PSI4 from source and use; erd from conda without thinking, consult sec:condapsi4dev.; To remove a conda installation, conda remove erd. Source. If using PSI4 built from source and you want erd built from; from source also,; enable it as a feature with ENABLE_erd,; and let the build system fetch and build it and activate dependent code. How to configure erd for building Psi4¶; Role and Dependencies. Role — In PSI4, ERD is a library that provides alternate; integrals.; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) erd; Upstream Dependencies — erd \(\Leftarrow\) Fortran. CMake Variables. ENABLE_erd — CMake variable toggling whether PSI4 builds with erd; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For erd, set to an installation directory containing include/ERD/ERD_MANGLE.h; erd_DIR — CMake variable to specify where pre-built erd can be found. Set to installation directory containing share/cmake/erd/erdConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_erd — CMake variable to force internal build of erd instead of detecting pre-built; CMAKE_INSIST",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/erd-1.html:1712,install,installation,1712,psi4manual/1.2.1/erd-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/erd-1.html,4,['install'],['installation']
Deployability,"re.ROHF¶; Bases: HF; docstring; Methods Summary. Ct(self); MO coefficients in the orthogonalized MO basis. c1_deep_copy(self, basis); Returns a new wavefunction with internal data converted to C_1 symmetry, using pre-c1-constructed BasisSet basis. compute_orbital_gradient(save_fock, ...); docstring. diis(self, arg0); docstring. mintshelper(self); The MintsHelper object. moFa(self); docstring. moFb(self); docstring. moFeff(self); docstring. soFeff(self); Returns the effective Fock matrix in the orthogonalized SO basis. Methods Documentation. Ct(self: psi4.core.ROHF) → psi4.core.Matrix¶; MO coefficients in the orthogonalized MO basis. Differs from the standard C matrix by an orthogonalizer matrix. c1_deep_copy(self: psi4.core.ROHF, basis: psi4.core.BasisSet) → psi4.core.ROHF¶; Returns a new wavefunction with internal data converted to C_1 symmetry, using pre-c1-constructed BasisSet basis. compute_orbital_gradient(save_fock, max_diis_vectors)¶; docstring. Return type:; float. Parameters:. save_fock (bool) – ; max_diis_vectors (int) – . diis(self: psi4.core.HF, arg0: float) → bool¶; docstring. mintshelper(self: psi4.core.ROHF) → psi4.core.MintsHelper¶; The MintsHelper object. moFa(self: psi4.core.ROHF) → psi4.core.Matrix¶; docstring. moFb(self: psi4.core.ROHF) → psi4.core.Matrix¶; docstring. moFeff(self: psi4.core.ROHF) → psi4.core.Matrix¶; docstring. soFeff(self: psi4.core.ROHF) → psi4.core.Matrix¶; Returns the effective Fock matrix in the orthogonalized SO basis. See libscf_solver/rohf.cc::form_Cfor technical definition. table of contents. ROHF; ROHF; ROHF.Ct(); ROHF.c1_deep_copy(); ROHF.compute_orbital_gradient(); ROHF.diis(); ROHF.mintshelper(); ROHF.moFa(); ROHF.moFb(); ROHF.moFeff(); ROHF.soFeff(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; ROHF. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/api/psi4.core.ROHF.html:2060,update,updated,2060,psi4manual/1.8.x/api/psi4.core.ROHF.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.ROHF.html,1,['update'],['updated']
Deployability,"re.SymmetryOperation) → None¶; Performs transposition of matrix operation. unit(self: psi4.core.SymmetryOperation) → None¶; Set equal to a unit matrix. zero(self: psi4.core.SymmetryOperation) → None¶; Zero out the symmetry operation. E(self: psi4.core.SymmetryOperation) → None; Set equal to E. c2_x(self: psi4.core.SymmetryOperation) → None; Set equal to C2 about the x axis. c2_y(self: psi4.core.SymmetryOperation) → None; Set equal to C2 about the y axis. c2_z(self: psi4.core.SymmetryOperation) → None; Set equal to C2 about the z axis. i(self: psi4.core.SymmetryOperation) → None; Set equal to an inversion. operate(self: psi4.core.SymmetryOperation, arg0: psi4.core.SymmetryOperation) → psi4.core.SymmetryOperation; Performs the operation arg2 * arg1. rotate_n(self: psi4.core.SymmetryOperation, arg0: int) → None; Set equal to a clockwise rotation by 2pi/n. rotate_theta(self: psi4.core.SymmetryOperation, arg0: float) → None; Set equal to a clockwise rotation by theta. sigma_xy(self: psi4.core.SymmetryOperation) → None; Set equal to reflection in xy plane. sigma_xz(self: psi4.core.SymmetryOperation) → None; Set equal to reflection in xz plane. sigma_yz(self: psi4.core.SymmetryOperation) → None; Set equal to reflection in yz plane. trace(self: psi4.core.SymmetryOperation) → float; Returns trace of transformation matrix. transform(self: psi4.core.SymmetryOperation, arg0: psi4.core.SymmetryOperation) → psi4.core.SymmetryOperation; Performs the transform arg2 * arg1 * arg2~. transpose(self: psi4.core.SymmetryOperation) → None; Performs transposition of matrix operation. unit(self: psi4.core.SymmetryOperation) → None; Set equal to a unit matrix. zero(self: psi4.core.SymmetryOperation) → None; Zero out the symmetry operation. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 July 2018 04:21AM.; Created using Sphinx 1.7.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/api/psi4.core.symmetryoperation.html:4405,update,updated,4405,psi4manual/1.2.1/api/psi4.core.symmetryoperation.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/api/psi4.core.symmetryoperation.html,1,['update'],['updated']
Deployability,"reap; procedures and have the following general structure. Prepare an input file, simply adding mode='sow' to the; argument list of an available Python function. Run this quick job to; produce input files for lengthier calculations.; According to the instructions in the output file of the above step,; run the generated input files in any order on any variety of computers; and architectures. This is the time-intensive portion of the; calculation.; The ‘sow’ stage also produces a master input file (with a; mode='reap' directive). When all the jobs in the above step are; completed, place their output files in the same location as the; master input, and run this last, quick job to collect the results. Sow/reap procedures are governed by the mode keyword, choices being; 'continuous', 'sow', and 'reap'. Only 'sow' is likely to; be used by the user, as 'continuous' is always the default, and; input files with 'reap' are autogenerated.; Embarrassingly parallel algorithm available at present for:. Database — database(); finite difference operation of Geometry Optimization — optimize() and gradient(); finite difference of energies of Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); finite difference of gradients of Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(). Caution; Some features are not yet implemented. Buy a developer a coffee. Local options (e.g., set scf e_convergence 9) will not get transmitted to the child jobs.; Array options (e.g., set states_per_irrep [2, 1]) will not get transmitted to the child jobs.; Function intercalls (e.g., db(opt())) are not tested with sow/reap procedures. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Psithon Functions: Invoking a Calculation; Embarrassing Parallelism. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/sowreap.html:2326,update,updated,2326,psi4manual/1.8.x/sowreap.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/sowreap.html,1,['update'],['updated']
Deployability,"reap; procedures and have the following general structure. Prepare an input file, simply adding mode='sow' to the; argument list of an available Python function. Run this quick job to; produce input files for lengthier calculations.; According to the instructions in the output file of the above step,; run the generated input files in any order on any variety of computers; and architectures. This is the time-intensive portion of the; calculation.; The ‘sow’ stage also produces a master input file (with a; mode='reap' directive). When all the jobs in the above step are; completed, place their output files in the same location as the; master input, and run this last, quick job to collect the results. Sow/reap procedures are governed by the mode keyword, choices being; 'continuous', 'sow', and 'reap'. Only 'sow' is likely to; be used by the user, as 'continuous' is always the default, and; input files with 'reap' are autogenerated.; Embarrassingly parallel algorithm available at present for:. Database — database(); finite difference operation of Geometry Optimization — optimize() and gradient(); finite difference of energies of Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); finite difference of gradients of Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(). Caution; Some features are not yet implemented. Buy a developer a coffee. Local options (e.g., set scf e_convergence 9) will not get transmitted to the child jobs.; Array options (e.g., set states_per_irrep [2, 1]) will not get transmitted to the child jobs.; Function intercalls (e.g., db(opt())) are not tested with sow/reap procedures. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.9.1;  · . PSI4. Psithon Functions: Invoking a Calculation; Embarrassing Parallelism. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 08 February 2024 09:32PM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/sowreap.html:2326,update,updated,2326,psi4manual/1.9.x/sowreap.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/sowreap.html,1,['update'],['updated']
Deployability,"recipe https://github.com/psi4/psi4meta/blob/master/installers/construct.yaml. Edit the top matter for Configuration. See snapshots in directory for examples. Edit release fields. (Windows is often dev1 unless separate steps.); Edit ltrtver field. This matches the current setting in conda_build_config.yaml; For prereleases, ""channel_tag"": ""/label/dev"", while for (post)releases, it should be the empty string. Edit the packages and channels info if necessary. Probably long-term stable. Edit the GHA control file https://github.com/psi4/psi4meta/blob/master/.github/workflows/Installers.yml matrix.cfg; All conda packages must already have been built and in the right channel_tag channel.; Commit construct.yaml to trigger installer builds.; When all build successfully, hover over the artifacts, and note the consecutive numbers GH has assigned them. These artifacts only linger for a day.; Log in to vergil root and move to /var/www/html/psicode-download.; Use the pull_gha_installers script to download the installers from GH to vergil. First two arguments are first and last of the artifact numbers, and third argument is an auth token. bash pull_gha_installers.sh 47226565 47226573 715...4f3.; Make WindowsWSL and any other symlinks the script head matter advises. Generate download page for psicode.org¶. Be in repo psicode-hugo-website; Copy and edit new file akin to https://github.com/psi4/psicode-hugo-website/blob/master/content/installs/v13rc2.md. Note the edition string v13rc2 in frontmatter for this and future filenames; Copy and edit new file akin to https://github.com/psi4/psicode-hugo-website/blob/master/data/installs/v13rc2.yaml for menu and notes content; Enter scripts/ dir and edit primarily https://github.com/psi4/psicode-hugo-website/blob/master/scripts/install-generator.py#L9 but also any other arrays or messages that should change.; Run the install-generator.py in place. It will dump new files into data/installs/ _subdirs_. Be sure to git add them.; Installer page",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/manage_release-1.html:15084,install,installers,15084,psi4manual/1.5.0/manage_release-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/manage_release-1.html,5,['install'],['installers']
Deployability,"records which can be held is 100. Type: integer; Default: 10. CFOUR_CALC_LEVEL¶. Defines the level of calculation to be performed. Psi4 Interface: Keyword set from argument of computation command: CCSD if energy('c4-ccsd'), etc. See Energy (CFOUR) and Gradient (CFOUR). for all available. Type: string; Default: SCF. CFOUR_CC_CONV¶. Specifies the convergence criterion for the CC amplitude equations. The amplitudes are considered to be converged when the maximum of all (absolute) changes in the amplitudes is less than \(10^N\), where \(N\) is the value associated with the keyword. Type: integer; Default: 7. CFOUR_CC_EXPORDER¶. Specifies the maximum number of expansion vectors used in the iterative subspace to enhance convergence in the solution of the CC equations. Type: integer; Default: 5. CFOUR_CC_EXTRAPOLATION¶. Specifies the type of convergence acceleration used to solve the CC equations. RLE (=0) uses the RLE methods of Purvis and Bartlett, DIIS (=1) uses the DIIS approach by Pulay, NOJACOBI (=2) uses RLE with continuous extrapolation, OFF (=3) uses no convergence acceleration. In general, DIIS provides the best results and is recommended, while OFF often results in poor convergence and thus cannot be recommended. Type: string; Possible Values: RLE, DIIS, NOJACOBI, OFF; Default: DIIS. CFOUR_CC_MAXCYC¶. Specifies the maximum number of iterations in solving the CC amplitude equations. Type: integer; Default: 50. CFOUR_CC_PROGRAM¶. Specifies which CC program is used. The available options are VCC (=0), ECC (=1), MRCC (=2), and EXTERNAL (=3). The default for all calculations is currently VCC which requests usage of xvcc, but in many cases (e.g., for CCSD and CCSD(T)) ECC should be preferred due to the better performance of xecc (available currently for CCSD, CCSD+T, CCSD(T), and closed-shell CCSDT-n, CC3, and CCSDT). MRCC and External are intended for CC programs outside the CFOUR suite, e.g., the general CC module mrcc written by M. Kallay (Budapest, Hungary). Defau",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/autodir_options_c/module__cfour-1.html:8715,continuous,continuous,8715,psi4manual/1.3.2/autodir_options_c/module__cfour-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/autodir_options_c/module__cfour-1.html,11,['continuous'],['continuous']
Deployability,"rected Interaction Energy'] = nocp_interaction_energy. for n in nbody_range[1:]:; var_key = 'NOCP-CORRECTED %d-BODY INTERACTION ENERGY' % n; nbody_dict[var_key] = nocp_energy_body_dict[n] - nocp_energy_body_dict[1]. # Compute vmfc energy and ptype; if 'vmfc' in metadata['bsse_type_list']:; _print_nbody_energy(vmfc_energy_body_dict, ""Valiron-Mayer Function Couterpoise (VMFC)""); vmfc_interaction_energy = vmfc_energy_body_dict[metadata['max_nbody']] - vmfc_energy_body_dict[1]; nbody_dict['Valiron-Mayer Function Couterpoise Total Energy'] = vmfc_energy_body_dict[metadata['max_nbody']]; nbody_dict['Valiron-Mayer Function Couterpoise Interaction Energy'] = vmfc_interaction_energy. for n in nbody_range[1:]:; var_key = 'VMFC-CORRECTED %d-BODY INTERACTION ENERGY' % n; nbody_dict[var_key] = vmfc_energy_body_dict[n] - vmfc_energy_body_dict[1]. # Returns; results = {}; results['nbody'] = nbody_dict. # Figure out and build return types; return_method = metadata['bsse_type_list'][0]. if return_method == 'cp':; results['ptype_body_dict'] = cp_ptype_body_dict; results['energy_body_dict'] = cp_energy_body_dict; elif return_method == 'nocp':; results['ptype_body_dict'] = nocp_ptype_body_dict; results['energy_body_dict'] = nocp_energy_body_dict; elif return_method == 'vmfc':; results['ptype_body_dict'] = vmfc_ptype_body_dict; results['energy_body_dict'] = vmfc_energy_body_dict; else:; raise ValidationError(""N-Body Wrapper: Invalid return type. Should never be here, please post this error on github.""). if metadata['return_total_data']:; results['ret_energy'] = results['energy_body_dict'][metadata['max_nbody']]; else:; results['ret_energy'] = results['energy_body_dict'][metadata['max_nbody']]; results['ret_energy'] -= results['energy_body_dict'][1]. return results. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .  · ; 1.2.1;  · . PSI4. Module code. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 July 2018 04:21AM.; Created using Sphinx 1.7.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/_modules/psi4/driver/driver_nbody.html:24882,update,updated,24882,psi4manual/1.2.1/_modules/psi4/driver/driver_nbody.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/_modules/psi4/driver/driver_nbody.html,1,['update'],['updated']
Deployability,"rection.; wfn (Wavefunction) – Location to set QCVariables. Returns:; Dispersion energy [Eh]. Return type:; float. Notes. DISPERSION CORRECTION ENERGYDisp always set. Overridden in SCF finalization, but that only changes for “-3C” methods. fctl DISPERSION CORRECTION ENERGYSet if fctldash nonempty. compute_gradient(molecule, wfn=None)[source]¶; Compute dispersion gradient based on engine, dispersion level, and parameters in self. Parameters:. molecule (Molecule) – System for which to compute empirical dispersion correction.; wfn (Wavefunction) – Location to set QCVariables. Returns:; (nat, 3) dispersion gradient [Eh/a0]. Return type:; Matrix. compute_hessian(molecule, wfn=None)[source]¶; Compute dispersion Hessian based on engine, dispersion level, and parameters in self.; Uses finite difference, as no dispersion engine has analytic second derivatives. Parameters:. molecule (Molecule) – System for which to compute empirical dispersion correction.; wfn (Wavefunction) – Location to set QCVariables. Returns:; (3*nat, 3*nat) dispersion Hessian [Eh/a0/a0]. Return type:; Matrix. print_out()[source]¶; Format dispersion parameters of self for output file. table of contents. EmpiricalDispersion; EmpiricalDispersion; EmpiricalDispersion.dashlevel; EmpiricalDispersion.dashparams; EmpiricalDispersion.fctldash; EmpiricalDispersion.description; EmpiricalDispersion.dashlevel_citation; EmpiricalDispersion.dashparams_citation; EmpiricalDispersion.dashcoeff_supplement; EmpiricalDispersion.engine; EmpiricalDispersion.disp; EmpiricalDispersion.ordered_params; EmpiricalDispersion.compute_energy(); EmpiricalDispersion.compute_gradient(); EmpiricalDispersion.compute_hessian(); EmpiricalDispersion.print_out(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; EmpiricalDispersion. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.EmpiricalDispersion.html:6289,update,updated,6289,psi4manual/1.8.x/api/psi4.driver.EmpiricalDispersion.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.EmpiricalDispersion.html,1,['update'],['updated']
Deployability,"rectory; cmake -DCMAKE_INSTALL_PREFIX=/nfs/common/software/psi4. Relevant CMake Options:; CMAKE_INSTALL_PREFIX=PATH # Location to which Psi4 and internally built; # add-ons are installed (default: /usr/local/psi4). Note; It’s not guaranteed, but if, in a pinch, you need to install a; built Psi4 to a location not configured by CMAKE_INSTALL_PREFIX,; recursively copy the folders under objdir/stage/prefix to; the desired location, chown them if needed, edit the shebang in; bin/psi4 if needed, and recursively delete all the “.pyc” files. It; may just run. How to compile for debugging¶; Flags to turn optimizations off and debugging on can be set across the; project and plugins with CMake variable CMAKE_BUILD_TYPE before; compiling. Note that these flags will not propagate to any add-ons that; are detected pre-built rather than built. Build without optimization; cmake -DCMAKE_BUILD_TYPE=debug. set the CMake build type [default: release]. Relevant CMake Options:; CMAKE_BUILD_TYPE=[debug|release] # Build type (Release or Debug)"" [default: release]. How to choose the compilation directory, {objdir}¶. there is no default; common choices are objdir or build under top-level-psi4-dir. cd {top-level-psi4-dir} && cmake -S. -Bobjdir; cd {top-level-psi4-dir} && cmake -S. -Bbuild. in-source builds (*.cc and *.o in same directory) are disallowed; builds outside top-level-psi4-dir are permitted. How to save configuration settings for a future compilation¶; Create a file like do-configure with the cmake command and options; on one line.; >>> cd {top-level-psi4-dir}; >>> cat do-configure; cmake -S. -B{objdir} \; -DCMAKE_INSTALL_PATH=""/Users/me/psi4"" \; -DCMAKE_PREFIX_PATH=""/Users/me/externals/install-libint"" \; -DMAX_AM_ERI=6 \; -DENABLE_gdma=ON \; -DBUILD_SHARED_LIBS=ON; >>> chmod u+x do-configure; >>> ./do-configure. What is the directory layout of the installed or staged Psi4¶; After compilation (cd objdir && make), a directory structure like the; below will exist at objdir/stage. This",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/build_planning-1.html:22726,release,release,22726,psi4manual/1.4.0/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/build_planning-1.html,18,['release'],['release']
Deployability,"rectory; cmake -DCMAKE_INSTALL_PREFIX=/nfs/common/software/psi4. Relevant CMake Options:; CMAKE_INSTALL_PREFIX=PATH # Location to which Psi4 and internally built; # add-ons are installed (default: /usr/local/psi4). Note; It’s not guaranteed, but if, in a pinch, you need to install a; built Psi4 to a location not configured by CMAKE_INSTALL_PREFIX,; recursively copy the folders under objdir/stage/prefix to; the desired location, chown them if needed, edit the shebang in; bin/psi4 if needed, and recursively delete all the “.pyc” files. It; may just run. How to compile for debugging¶; Flags to turn optimizations off and debugging on can be set across the; project and plugins with CMake variable CMAKE_BUILD_TYPE before; compiling. Note that these flags will not propagate to any add-ons that; are detected pre-built rather than built. Build without optimization; cmake -DCMAKE_BUILD_TYPE=debug. set the CMake build type [default: release]. Relevant CMake Options:; CMAKE_BUILD_TYPE=[debug|release] # Build type (Release or Debug)"" [default: release]. How to fix error “RuntimeError: value for ERI”¶; You will need to rebuild Libint. Reissue cmake or edit; CMakeCache.txt with larger MAX_AM_ERI and rebuild. How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda. How to choose the compilation directory, {objdir}¶. there is no default; common choices are objdir or build under top-level-psi4-dir; cd {top-level-psi4-dir} && cmake -H. -Bobjdir; cd {top-level-psi4-dir} && cmake -H. -Bbuild. in-source builds (*.cc and *.o in same directory) are disallowed; builds outside top-level-psi4-dir are permitted. How to save configuration settings for a future compilation¶; Create a file like do-configure with the cmake command and options; on one line.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10>>> cd {top-level-psi4-dir}; >>> cat do-configure; cmake -H. -B{objdir} \; -DCMAKE_INSTALL_PATH=""/Users/me/psi4"" \; -DCMAKE_PREFIX_PATH=""/Users/me/external",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/build_planning-1.html:18452,release,release,18452,psi4manual/1.2.1/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html,8,['release'],['release']
Deployability,"recv_multiplicity(self, multiplicity=None):; """""" Receive the electronic multiplicity through MDI. Arguments:; multiplicity: New multiplicity of the system. If None, receive through MDI.; """"""; if multiplicity is None:; multiplicity = MDI_Recv(1, MDI_INT, self.comm); self.molecule.set_multiplicity(multiplicity). # Respond to the EXIT command; def exit(self):; """""" Stop listening for MDI commands; """"""; self.stop_listening = True. # If a lattice of point charges was set, unset it now; if self.set_lattice:; self.kwargs.pop(""external_potentials"", None); . # Enter server mode, listening for commands from the driver; def listen_for_commands(self):; """""" Receive commands through MDI and respond to them as defined by the MDI Standard; """""". while not self.stop_listening:; if self.world_rank == 0:; command = MDI_Recv_Command(self.comm); else:; command = None; if use_mpi4py:; command = self.mpi_world.bcast(command, root=0); if self.world_rank == 0:; psi4.core.print_out('\nMDI command received: ' + str(command) + ' \n'). # Search for this command in self.commands; found_command = False; for supported_command in self.commands:; if not found_command and command == supported_command:; # Run the function corresponding to this command; self.commands[supported_command](); found_command = True; if not found_command:; raise Exception('Unrecognized command: ' + str(command)). def mdi_init(mdi_arguments):; """""" Initialize the MDI Library. Arguments:; mdi_arguments: MDI configuration options; """"""; MDI_Init(mdi_arguments). [docs]def mdi_run(scf_method, **kwargs):; """""" Begin functioning as an MDI engine. Arguments:; scf_method: Method used when calculating energies or gradients; """"""; engine = MDIEngine(scf_method, **kwargs); engine.listen_for_commands(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .  · ; 1.6;  · . PSI4. Module code; psi4.driver.mdi_engine. © Copyright 2022, The Psi4 Project.; Last updated on Thursday, 19 May 2022 08:57PM.; Created using Sphinx 4.5.0.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/mdi_engine.html:12967,configurat,configuration,12967,psi4manual/1.6.x/_modules/psi4/driver/mdi_engine.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/mdi_engine.html,2,"['configurat', 'update']","['configuration', 'updated']"
Deployability,"ree components of the transition dipole [Debye] between roots n; and m for the requested configuration interaction level of theory.; Deprecated in favor of CI ROOT n -> ROOT m DIPOLE. CI ROOT n -> ROOT m QUADRUPOLE¶; Redundant transition quadrupole array [e a0^2] between roots n and m for the requested configuration interaction level of theory, (3, 3). CI ROOT n -> ROOT m QUADRUPOLE XX¶. CI ROOT n -> ROOT m QUADRUPOLE XY¶. CI ROOT n -> ROOT m QUADRUPOLE XZ¶. CI ROOT n -> ROOT m QUADRUPOLE YY¶. CI ROOT n -> ROOT m QUADRUPOLE YZ¶. CI ROOT n -> ROOT m QUADRUPOLE ZZ¶; The three components of the transition quadrupole [Debye Ang] between; roots n and m for the requested configuration interaction level of; theory.; Deprecated in favor of CI ROOT n -> ROOT m QUADRUPOLE. CI ROOT n DIPOLE¶; Dipole array [e a0] for the requested configuration interaction level of theory and root n, (3,). CI ROOT n DIPOLE X¶. CI ROOT n DIPOLE Y¶. CI ROOT n DIPOLE Z¶; The three components of the dipole [Debye] for the requested; configuration interaction level of theory and root n.; Deprecated in favor of CI ROOT n DIPOLE. CI ROOT n QUADRUPOLE¶; Redundant quadrupole array [e a0^2] for the requested configuration interaction level of theory and root n, (3, 3). CI ROOT n QUADRUPOLE XX¶. CI ROOT n QUADRUPOLE XY¶. CI ROOT n QUADRUPOLE XZ¶. CI ROOT n QUADRUPOLE YY¶. CI ROOT n QUADRUPOLE YZ¶. CI ROOT n QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the requested; configuration interaction level of theory and root n.; Deprecated in favor of CI ROOT n QUADRUPOLE. CI ROOT n TOTAL ENERGY¶. CI ROOT n CORRELATION ENERGY¶; The total electronic energy [Eh] and correlation energy component [Eh]; for the requested configuration interaction level of theory and root; n (numbering starts at 0). CI STATE-AVERAGED TOTAL ENERGY¶. CI STATE-AVERAGED CORRELATION ENERGY¶; The total electronic energy [Eh] and correlation energy component [Eh]; for state-averaged CI/CASSCF levels of theory. CI TOTAL E",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/glossary_psivariables-1.html:12207,configurat,configuration,12207,psi4manual/1.4.0/glossary_psivariables-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/glossary_psivariables-1.html,4,['configurat'],['configuration']
Deployability,"reference determinant, it must be zero otherwise. This becomes nsing (option #2) in fort.56. Type: integer; Default: 1. MRCC_NUM_TRIPLET_ROOTS¶. Number of triplet roots. (Strictly speaking number of of roots with \(M_s=0\) and S is odd.) See notes at option MRCC_NUM_SINGLET_ROOTS This becomes ntrip (option #3) in fort.56. Type: integer; Default: 0. Expert¶. MRCC_METHOD¶. If more than one root is requested and calc=1, LR-CC (EOM-CC) calculation is performed automatically for the excited states. This overrides all automatic determination of method and will only work with energy(). This becomes CC/CI (option #5) in fort.56. See Table MRCC_METHOD for details. Type: integer; Default: 1. MRCC_OMP_NUM_THREADS¶. Sets the OMP_NUM_THREADS environment variable before calling MRCC. If the environment variable OMP_NUM_THREADS is set prior to calling Psi4 then that value is used. When set, this option overrides everything. Be aware the -n command-line option described in section Threading does not affect MRCC. Type: integer; Default: 1. MRCC_RESTART¶. The program restarts from the previously calculated parameters if it is 1. In case it is 2, the program executes automatically the lower-level calculations of the same type consecutively (e.g., CCSD, CCSDT, and CCSDTQ if CCSDTQ is requested) and restarts each calculation from the previous one (rest=2 is available only for energy calculations). Currently, only a value of 0 and 2 are supported. This becomes rest (option #4) in fort.56. Type: integer; Default: 0. table of contents. MRCC; General; E_CONVERGENCE; INTS_TOLERANCE; MRCC_LEVEL; MRCC_NUM_DOUBLET_ROOTS; MRCC_NUM_SINGLET_ROOTS; MRCC_NUM_TRIPLET_ROOTS. Expert; MRCC_METHOD; MRCC_OMP_NUM_THREADS; MRCC_RESTART. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Keywords by Module; MRCC. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/autodir_options_c/module__mrcc.html:3055,update,updated,3055,psi4manual/master/autodir_options_c/module__mrcc.html,https://psicode.org,https://psicode.org/psi4manual/master/autodir_options_c/module__mrcc.html,1,['update'],['updated']
Deployability,"release; Publish psicode release; Finalize release; Reset psi4meta for nightly operation. Post-Release (e.g., v1.3.1)¶. Assemble postrelease changes; Tweak Conda for postrelease; Do final pass before release tag; Tag postrelease; Build Conda Psi4 stack at specific commit; Publish to main conda label; Build Psi4conda set; Generate download page for psicode.org; Collect documentation snapshot; Publish GitHub postrelease; Publish psicode release; Finalize release; Reset psi4meta for nightly operation. Update copyright year¶. cd ~/path/to/psi4; Primary target is licenses. grep -rl ""(c) 2007-2017"" * | xargs sed -i '' ""s/(c) 2007-2017/(c) 2007-2018/g""; On Linux, drop the '' in above command; Need to do psi4/ and docs/ dirs. Also, license in these files. tests/runtest.py; README.md. Also, in content of psi4/doc/sphinxman/source/conf.py.in#L130. Update samples¶. Run make sphinxman at least once by hand; Check in resulting psifiles.py and all the updated and new samples/ files and dirs; Make a lone PR and warn reviewers not to read it, since autogenerated. Collect new authors¶. Survey contributions to current Milestone. Add new contribs and PR lists to release notes GitHub issue; Figure out any new “Additional Contributors” authors since last release; Edit psi4/header.py accordingly, make PR; Get permission of new authors and their particulars for codemeta.json; Invite any contributors with at least 3 PRs to join GitHub Organization. Anticipate next release¶. Bump version in codemeta.json, psi4/codemeta.json#L9; Add to branch list in azure-pipelines.yml, psi4/azure-pipelines.yml. Build Conda ecosystem stack¶; By “ecosystem stack”, mean packages that are upstream, downstream, required, and optional for a fully featured Psi4 build and which we can’t get from “defaults” or “conda-forge” channels. Main directions are in [cbcy](https://github.com/psi4/psi4meta/blob/master/conda-recipes/conda_build_config.yaml) and [poodle](https://github.com/psi4/psi4meta/blob/master/psinet-night",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/manage_release.html:1721,update,updated,1721,psi4manual/1.7.x/manage_release.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/manage_release.html,2,['update'],['updated']
Deployability,"releases, add a new redirects block to https://github.com/psi4/psicode-hugo-website/edit/master/netlify.toml .; Details:. If you sequentially push the tag commit, push the tag, push the record commit, GHA will build the docs at v1.{Y+1}.dev1, not at v1.Y .; If you sequentially push the tag commit, then push the tag, GHA will build the docs at the tag commit, but the version will show up as “undefined”.; If you atomic push the tag commit and tag together and wait, GHA will build the docs at v1.Y, as desired. Publish GitHub release¶. With an anticipated or newly minted tag, go to https://github.com/psi4/psi4/releases/new (or; “Draft a new release” button on GitHub site).; Release title takes the form: v1.8, 2023-05-11; Fill in frontmatter style and links from previous GitHub release; Fill in RN from hopefully existing RN issue.; Fill in RN by going through the frontmatter from all PRs from this milestone, particularly the; “User API & Changelog headlines” section.; Save the draft release until tag is finalized.; “publish” release. This establishes the release date for the GitHub API.; Close the RN issue.; Close the milestone (should be 100% complete).; Open a milestone for the release that’s a year out. Publish GitHub postrelease¶. With an anticipated or newly minted tag, go to https://github.com/psi4/psi4/releases/new (or; “Draft a new release” button on GitHub site).; Release title takes the form: v1.8.2, 2023-10-03; Fill in frontmatter style and links from previous GitHub release.; Fill in RN bullets for changes cherry-picked or edited to the maintenance branch.; Save the draft release until tag is finalized.; “publish” release. This establishes the release date for the GitHub API. Publish psicode.org release¶. Be in local clone of repository https://github.com/psi4/psicode-hugo-website .; Execute https://api.github.com/repos/psi4/psi4/releases/latest or; https://api.github.com/repos/psi4/psi4/releases/tags/v1.8.2 (substituting tag) and note the id; field value.; C",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/manage_release.html:22324,release,release,22324,psi4manual/1.9.x/manage_release.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/manage_release.html,2,['release'],['release']
Deployability,"rence of energies frequency, run in sow/reap mode. pywrap-db2; Database calculation, run in sow/reap mode. zaptn-nh2; ZAPT(n)/6-31G NH2 Energy Point, with n=2-25. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. dft-custom; DFT custom functional test. basis-ecp; check mixing ECP and non-ECP orbital/fitting basis sets in a session. adc2; ADC(2)/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. cubeprop-esp; RHF orbitals and density for water. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. dct-grad4; Unrestricted DF-DCT ODC-12 gradient for O2 with cc-pVTZ/cc-pVTZ-RI standard/auxiliary basis set. fsapt-allterms; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for HSG-18-dimer from the HSG database. dct-grad2; RHF-ODC-12 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. RHF-ODC-06 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. omp3-1; OMP3 cc-pVDZ energy for the H2O molecule. omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. scf-guess-read1; Sample UHF/cc-pVDZ H2O computation on a doublet cation, using RHF/cc-pVDZ orbitals for the closed-shell neutral as a guess. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Appendices; Test Suite and Sample Inputs; <no title>. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html:44830,update,updated,44830,psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html,2,['update'],['updated']
Deployability,"rent helpers to export various quantities from the wavefunction; to external formats such as FCHK and MOLDEN. Because the Wavefunction makes; its members available to the Python layer, any other similar export functions; should be written in python. Integral consuming technologies¶; The general philosophy in PSI4 is to try write two-electron integral; driven tasks in methods like Hartree-Fock, CIS and CPHF in terms of generalized; Fock-like matrices. From here, a single class can be used to construct these; generalized Fock matrices, which is what libFock; (psi4/psi4/src/psi4/libfock) accomplishes. A number of integral; technologies – such as integral-direct, disk-based and density fitting – are; supported in libFock, making them generally available to all elements of the; code that use the generalized Fock matrix strategy. Exposing C++ code to Python¶; The recent push to move sections of the code that are not a bottleneck into the; Python layer requires that the C++ code is callable from Python and that its; results are accessible. The result accessibility is addressed by populating; the appropriate variables in the Wavefunction object. To make the code; callable from Python, we rely on the excellent PyBind11 library; to create the bindings. Existing code to export various PSI4 classes can; be found in psi4/psi4/src in the files whose name begins with export_.; The code to export functions that run entire calculations is usually found in; psi4/psi4/src/core.cc. table of contents. General layout of the core: where new C++ code should live; New integral operators; Completely new methods; Integral consuming technologies; Exposing C++ code to Python. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Introduction to Programming in PSI4; General layout of the core: where new C++ code should live. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/prog_tour.html:3512,update,updated,3512,psi4manual/1.7.x/prog_tour.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/prog_tour.html,1,['update'],['updated']
Deployability,"replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> cbs(name='scf', scf_basis='cc-pVDZ'). 1; 2>>> # [2] replicates with cbs() the simple model chemistry mp2/jun-cc-pVDZ: set basis jun-cc-pVDZ energy('mp2'); >>> cbs(name='mp2', corl_basis='jun-cc-pVDZ'). 1; 2>>> # [3] DTQ-zeta extrapolated scf reference energy; >>> cbs(name='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3). 1; 2>>> # [4] DT-zeta extrapolated mp2 correlation energy atop a T-zeta reference; >>> cbs(corl_wfn='mp2', corl_basis='cc-pv[dt]z', corl_scheme=corl_xtpl_helgaker_2). 1; 2; 3>>> # [5] a DT-zeta extrapolated coupled-cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference (both equivalent); >>> cbs(corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z'); >>> cbs(energy, wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2). 1; 2>>> # [6] a D-zeta ccsd(t) correction atop a DT-zeta extrapolated ccsd cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference; >>> cbs(name='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2, delta2_wfn='ccsd(t)', delta2_wfn_lesser='ccsd', delta2_basis='aug-cc-pvdz'). 1; 2>>> # [7] cbs() coupled with database(); >>> TODO database('mp2', 'BASIC', subset=['h2o','nh3'], symm='on', func=cbs, corl_basis='cc-pV[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd(t)', delta_basis='sto-3g'). 1; 2>>> # [8] cbs() coupled with optimize(); >>> TODO optimize('mp2', corl_basis='cc-pV[DT]Z', corl_scheme=corl_xtpl_helgaker_2, func=cbs). Navigation. Index. modules    .    .  · ; 1.1;  · . PSI4. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/api/psi4.driver.cbs.html:13956,update,updated,13956,psi4manual/1.1.0/api/psi4.driver.cbs.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/api/psi4.driver.cbs.html,1,['update'],['updated']
Deployability,"reps to this array. Note that this discards all extra information; given in the matrix besides the diagonal blocks determined by the passed; dimension.; dim2 (Optional[Dimension]) – Same as dim1 only if using a Dimension object. Returns:; Returns the given (self) Psi4 object. Return type:; Matrix or Vector. Notes; This is a generalized function to convert a NumPy array to a Psi4 object; Examples; >>> data = np.random.rand(20,1); >>> vector = psi4.core.Matrix.from_array(data). >>> irrep_data = [np.random.rand(2, 2), np.empty(shape=(0,3)), np.random.rand(4, 4)]; >>> matrix = psi4.core.Matrix.from_array(irrep_data); >>> print(matrix.rowdim().to_tuple()); (2, 0, 4). Matrix to Array¶; A general function that converts NumPy arrays to PSI4 data objects. psi4.driver.p4util.numpy_helper._to_array(matrix, copy=True, dense=False)[source]¶; Converts a PSI4 Matrix or Vector to a NumPy array. Either copies the; data or simply constructs a view. Parameters:. matrix (Union[Matrix, Vector]) – Pointers to which Psi4 core class should be used in the construction.; copy (bool) – Copy the data if True, return a view otherwise; dense (bool) – Converts irrepped Psi4 objects to diagonally blocked dense arrays if; True. Returns a list of arrays otherwise. Returns:; Returns a single or list of NumPy arrays depending on options. Return type:; ndarray or List[ndarray]. Notes; This is a generalized function to convert a Psi4 object to a NumPy array; Examples; >>> data = psi4.core.Matrix(3, 3); >>> data.to_array(); [[ 0. 0. 0.]; [ 0. 0. 0.]; [ 0. 0. 0.]]. table of contents. Interface to NumPy; Basics; NumPy Views; PSI4 Data Objects with Irreps; Array to Matrix; array_to_matrix(). Matrix to Array; _to_array(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to NumPy. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/numpy.html:5233,update,updated,5233,psi4manual/1.8.x/numpy.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/numpy.html,1,['update'],['updated']
Deployability,"reps to this array. Note that this discards all extra information; given in the matrix besides the diagonal blocks determined by the passed; dimension.; dim2 (Optional[Dimension]) – Same as dim1 only if using a Dimension object. Returns:; Returns the given (self) Psi4 object. Return type:; Matrix or Vector. Notes; This is a generalized function to convert a NumPy array to a Psi4 object; Examples; >>> data = np.random.rand(20,1); >>> vector = psi4.core.Matrix.from_array(data). >>> irrep_data = [np.random.rand(2, 2), np.empty(shape=(0,3)), np.random.rand(4, 4)]; >>> matrix = psi4.core.Matrix.from_array(irrep_data); >>> print(matrix.rowdim().to_tuple()); (2, 0, 4). Matrix to Array¶; A general function that converts NumPy arrays to PSI4 data objects. psi4.driver.p4util.numpy_helper._to_array(matrix, copy=True, dense=False)[source]¶; Converts a PSI4 Matrix or Vector to a NumPy array. Either copies the; data or simply constructs a view. Parameters:. matrix (Union[Matrix, Vector]) – Pointers to which Psi4 core class should be used in the construction.; copy (bool) – Copy the data if True, return a view otherwise; dense (bool) – Converts irrepped Psi4 objects to diagonally blocked dense arrays if; True. Returns a list of arrays otherwise. Returns:; Returns a single or list of NumPy arrays depending on options. Return type:; ndarray or List[ndarray]. Notes; This is a generalized function to convert a Psi4 object to a NumPy array; Examples; >>> data = psi4.core.Matrix(3, 3); >>> data.to_array(); [[ 0. 0. 0.]; [ 0. 0. 0.]; [ 0. 0. 0.]]. table of contents. Interface to NumPy; Basics; NumPy Views; PSI4 Data Objects with Irreps; Array to Matrix; array_to_matrix(). Matrix to Array; _to_array(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.9.1;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to NumPy. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 08 February 2024 09:32PM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/numpy.html:5233,update,updated,5233,psi4manual/1.9.x/numpy.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/numpy.html,1,['update'],['updated']
Deployability,requested; configuration interaction level of theory and root. CI QUADRUPOLE XX¶. CI QUADRUPOLE XY¶. CI QUADRUPOLE XZ¶. CI QUADRUPOLE YY¶. CI QUADRUPOLE YZ¶. CI QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the requested; configuration interaction level of theory and root. CI ROOT n -> ROOT m DIPOLE X¶. CI ROOT n -> ROOT m DIPOLE Y¶. CI ROOT n -> ROOT m DIPOLE Z¶; The three components of the transition dipole [Debye] between roots n; and m for the requested configuration interaction level of theory. CI ROOT n -> ROOT m QUADRUPOLE XX¶. CI ROOT n -> ROOT m QUADRUPOLE XY¶. CI ROOT n -> ROOT m QUADRUPOLE XZ¶. CI ROOT n -> ROOT m QUADRUPOLE YY¶. CI ROOT n -> ROOT m QUADRUPOLE YZ¶. CI ROOT n -> ROOT m QUADRUPOLE ZZ¶; The three components of the transition quadrupole [Debye Ang] between; roots n and m for the requested configuration interaction level of; theory. CI ROOT n DIPOLE X¶. CI ROOT n DIPOLE Y¶. CI ROOT n DIPOLE Z¶; The three components of the dipole [Debye] for the requested; configuration interaction level of theory and root n. CI ROOT n QUADRUPOLE XX¶. CI ROOT n QUADRUPOLE XY¶. CI ROOT n QUADRUPOLE XZ¶. CI ROOT n QUADRUPOLE YY¶. CI ROOT n QUADRUPOLE YZ¶. CI ROOT n QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the requested; configuration interaction level of theory and root n. CI ROOT n TOTAL ENERGY¶. CI ROOT n CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested configuration interaction level of theory and root; n (numbering starts at 0). CI STATE-AVERAGED TOTAL ENERGY¶. CI STATE-AVERAGED CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for state-averaged CI/CASSCF levels of theory. CI TOTAL ENERGY¶. CI CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested configuration interaction level of theory and root. CISD DIPOLE X¶. CISD DIPOLE Y¶. CISD DIPOLE Z¶; The three c,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/glossary_psivariables-1.html:7717,configurat,configuration,7717,psi4manual/1.1.0/glossary_psivariables-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/glossary_psivariables-1.html,6,['configurat'],['configuration']
Deployability,requested; configuration interaction level of theory and root. CI QUADRUPOLE XX¶. CI QUADRUPOLE XY¶. CI QUADRUPOLE XZ¶. CI QUADRUPOLE YY¶. CI QUADRUPOLE YZ¶. CI QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the requested; configuration interaction level of theory and root. CI ROOT n -> ROOT m DIPOLE X¶. CI ROOT n -> ROOT m DIPOLE Y¶. CI ROOT n -> ROOT m DIPOLE Z¶; The three components of the transition dipole [Debye] between roots n; and m for the requested configuration interaction level of theory. CI ROOT n -> ROOT m QUADRUPOLE XX¶. CI ROOT n -> ROOT m QUADRUPOLE XY¶. CI ROOT n -> ROOT m QUADRUPOLE XZ¶. CI ROOT n -> ROOT m QUADRUPOLE YY¶. CI ROOT n -> ROOT m QUADRUPOLE YZ¶. CI ROOT n -> ROOT m QUADRUPOLE ZZ¶; The three components of the transition quadrupole [Debye Ang] between; roots n and m for the requested configuration interaction level of; theory. CI ROOT n DIPOLE X¶. CI ROOT n DIPOLE Y¶. CI ROOT n DIPOLE Z¶; The three components of the dipole [Debye] for the requested; configuration interaction level of theory and root n. CI ROOT n QUADRUPOLE XX¶. CI ROOT n QUADRUPOLE XY¶. CI ROOT n QUADRUPOLE XZ¶. CI ROOT n QUADRUPOLE YY¶. CI ROOT n QUADRUPOLE YZ¶. CI ROOT n QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the requested; configuration interaction level of theory and root n. CI ROOT n TOTAL ENERGY¶. CI ROOT n CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested configuration interaction level of theory and root; n (numbering starts at 1). CI STATE-AVERAGED TOTAL ENERGY¶. CI STATE-AVERAGED CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for state-averaged CI/CASSCF levels of theory. CI TOTAL ENERGY¶. CI CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested configuration interaction level of theory and root. CISD DIPOLE X¶. CISD DIPOLE Y¶. CISD DIPOLE Z¶; The three c,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/glossary_psivariables-1.html:7209,configurat,configuration,7209,psi4manual/1.0.0/glossary_psivariables-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/glossary_psivariables-1.html,8,['configurat'],['configuration']
Deployability,requested; configuration interaction level of theory and root. CI QUADRUPOLE XX¶. CI QUADRUPOLE XY¶. CI QUADRUPOLE XZ¶. CI QUADRUPOLE YY¶. CI QUADRUPOLE YZ¶. CI QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the requested; configuration interaction level of theory and root. CI ROOT n -> ROOT m DIPOLE X¶. CI ROOT n -> ROOT m DIPOLE Y¶. CI ROOT n -> ROOT m DIPOLE Z¶; The three components of the transition dipole [Debye] between roots n; and m for the requested configuration interaction level of theory. CI ROOT n -> ROOT m QUADRUPOLE XX¶. CI ROOT n -> ROOT m QUADRUPOLE XY¶. CI ROOT n -> ROOT m QUADRUPOLE XZ¶. CI ROOT n -> ROOT m QUADRUPOLE YY¶. CI ROOT n -> ROOT m QUADRUPOLE YZ¶. CI ROOT n -> ROOT m QUADRUPOLE ZZ¶; The three components of the transition quadrupole [Debye Ang] between; roots n and m for the requested configuration interaction level of; theory. CI ROOT n DIPOLE X¶. CI ROOT n DIPOLE Y¶. CI ROOT n DIPOLE Z¶; The three components of the dipole [Debye] for the requested; configuration interaction level of theory and root n. CI ROOT n QUADRUPOLE XX¶. CI ROOT n QUADRUPOLE XY¶. CI ROOT n QUADRUPOLE XZ¶. CI ROOT n QUADRUPOLE YY¶. CI ROOT n QUADRUPOLE YZ¶. CI ROOT n QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the requested; configuration interaction level of theory and root n. CI ROOT n TOTAL ENERGY¶. CI ROOT n CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested configuration interaction level of theory and root; n (numbering starts at 1). CI STATE-AVERAGED TOTAL ENERGY¶. CI STATE-AVERAGED CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for state-averaged CI/CASSCF levels of theory. CI TOTAL ENERGY¶. CI CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested configuration interaction level of theory and root. CISD TOTAL ENERGY¶. CISD CORRELATION ENERGY¶. CISDT TOTAL E,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/glossary_psivariables-1.html:2816,configurat,configuration,2816,psi4manual/4.0b2/glossary_psivariables-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/glossary_psivariables-1.html,2,['configurat'],['configuration']
Deployability,"rer. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to adcc by M. F. Herbst and M. Scheurer. Interface to adcc by M. F. Herbst and M. Scheurer¶; Code author: Michael F. Herbst; Section author: Michael F. Herbst; Module: Keywords, PSI Variables. PSI4 contains code to interface to the adcc python module developed; by M. F. Herbst et. al.. No additional licence or configuration; is required to use adcc. The module serves as the backend for; most algebraic-diagrammatic construction methods for correlated; excited states in PSI4. For more details on ADC methods,; see ADC: Ab Initio Polarization Propagator. Installation¶; For up to date information and more details,; see the adcc installation documentation.; Binary. adcc is available as a conda package for Linux and macOS; and on pypi. To remove a conda installation, conda remove adcc. Source. If using PSI4 built from source and you want adcc installed as well,; enable it as a feature with ENABLE_adcc,; and let the build system fetch and install it. Keywords for adcc¶. CUTOFF_AMPS_PRINT¶. Tolerance for extracted or printed amplitudes. This option is only available for the adcc backend. Type: double; Default: 0.01. KIND¶. The kind of states to compute. Type: string; Possible Values: SINGLET, TRIPLET, SPIN_FLIP, ANY; Default: SINGLET. MAX_NUM_VECS¶. Maximum number of subspace vectors. A negative value uses * the adcc default (roughly between 20 and 5 * N_GUESSES). This option is only available for the adcc backend. Type: integer; Default: -1. MAXITER¶. Maximum number of iterations. Type: integer; Default: 50. NUM_CORE_ORBITALS¶. Number of orbitals to place in the core. This option is only available for the adcc backend. Type: integer; Default: 0. NUM_GUESSES¶. Number of guess vectors to generate and use. Negative values keep * the adcc default (currently 2 * ROOTS_PER_IRREP). This option is only available for the adcc backend. Type: integer; Default: -1.",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/adcc-1.html:1021,install,installed,1021,psi4manual/1.4.0/adcc-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/adcc-1.html,4,['install'],"['install', 'installed']"
Deployability,"rer. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to adcc by M. F. Herbst and M. Scheurer. Interface to adcc by M. F. Herbst and M. Scheurer¶; Code author: Michael F. Herbst; Section author: Michael F. Herbst; Module: Keywords, PSI Variables. PSI4 contains code to interface to the adcc python module developed; by M. F. Herbst et. al.. No additional licence or configuration; is required to use adcc. The module serves as the backend for; most algebraic-diagrammatic construction methods for correlated; excited states in PSI4. For more details on ADC methods,; see ADC: Ab Initio Polarization Propagator. Installation¶; For up to date information and more details,; see the adcc installation documentation.; Binary. adcc is available as a conda package for Linux and macOS; and on pypi. To remove a conda installation, conda remove adcc. Source. If using PSI4 built from source and you want adcc installed as well,; enable it as a feature with ENABLE_adcc,; and let the build system fetch and install it. Keywords for adcc¶. CUTOFF_AMPS_PRINT¶. Tolerance for extracted or printed amplitudes. This option is only available for the adcc backend. Type: double; Default: 0.01. KIND¶. The kind of states to compute. Type: string; Possible Values: SINGLET, TRIPLET, SPIN_FLIP, ANY; Default: SINGLET. MAX_NUM_VECS¶. Maximum number of subspace vectors. A negative value uses * the adcc default (roughly between 20 and 5 * N_GUESSES). This option is only available for the adcc backend. Type: integer; Default: -1. MAXITER¶. Maximum number of iterations. Type: integer; Default: 50. NUM_CORE_ORBITALS¶. Number of orbitals to place in the core. This option is only available for the adcc backend. Type: integer; Default: 0. NUM_GUESSES¶. Number of guess vectors to generate and use. Negative values keep * the adcc default (currently 2 * ROOTS_PER_IRREP). This option is only available for the adcc backend. Type: integer; Default: -1.",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/adcc-1.html:1021,install,installed,1021,psi4manual/1.5.0/adcc-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/adcc-1.html,4,['install'],"['install', 'installed']"
Deployability,"rer. Navigation. Index. modules    .    .    .    .  · ; 1.6;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to adcc by M. F. Herbst and M. Scheurer. Interface to adcc by M. F. Herbst and M. Scheurer¶; Code author: Michael F. Herbst; Section author: Michael F. Herbst; Module: Keywords, PSI Variables. PSI4 contains code to interface to the adcc python module developed; by M. F. Herbst et. al.. No additional licence or configuration; is required to use adcc. The module serves as the backend for; most algebraic-diagrammatic construction methods for correlated; excited states in PSI4. For more details on ADC methods,; see ADC: Ab Initio Polarization Propagator. Installation¶; For up to date information and more details,; see the adcc installation documentation.; Binary. adcc is available as a conda package for Linux and macOS; and on pypi. To remove a conda installation, conda remove adcc. Source. If using PSI4 built from source and you want adcc installed as well,; enable it as a feature with ENABLE_adcc,; and let the build system fetch and install it. Keywords for adcc¶. CUTOFF_AMPS_PRINT¶. Tolerance for extracted or printed amplitudes. This option is only available for the adcc backend. Type: double; Default: 0.01. KIND¶. The kind of states to compute. Type: string; Possible Values: SINGLET, TRIPLET, SPIN_FLIP, ANY; Default: SINGLET. MAX_NUM_VECS¶. Maximum number of subspace vectors. A negative value uses * the adcc default (roughly between 20 and 5 * N_GUESSES). This option is only available for the adcc backend. Type: integer; Default: -1. MAXITER¶. Maximum number of iterations. Type: integer; Default: 50. NUM_CORE_ORBITALS¶. Number of orbitals to place in the core. This option is only available for the adcc backend. Type: integer; Default: 0. NUM_GUESSES¶. Number of guess vectors to generate and use. Negative values keep * the adcc default (currently 2 * ROOTS_PER_IRREP). This option is only available for the adcc backend. Type: integer; Default: -1.",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/adcc.html:1021,install,installed,1021,psi4manual/1.6.x/adcc.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/adcc.html,2,['install'],"['install', 'installed']"
Deployability,"rer. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to adcc by M. F. Herbst and M. Scheurer. Interface to adcc by M. F. Herbst and M. Scheurer¶; Code author: Michael F. Herbst; Section author: Michael F. Herbst; Module: Keywords, PSI Variables. PSI4 contains code to interface to the adcc python module developed; by M. F. Herbst et. al.. No additional licence or configuration; is required to use adcc. The module serves as the backend for; most algebraic-diagrammatic construction methods for correlated; excited states in PSI4. For more details on ADC methods,; see ADC: Ab Initio Polarization Propagator. Installation¶; For up to date information and more details,; see the adcc installation documentation.; Binary. adcc is available as a conda package for Linux and macOS; and on pypi. To remove a conda installation, conda remove adcc. Source. If using PSI4 built from source and you want adcc installed as well,; enable it as a feature with ENABLE_adcc,; and let the build system fetch and install it. Keywords for adcc¶. CUTOFF_AMPS_PRINT¶. Tolerance for extracted or printed amplitudes. This option is only available for the adcc backend. Type: double; Default: 0.01. KIND¶. The kind of states to compute. Type: string; Possible Values: SINGLET, TRIPLET, SPIN_FLIP, ANY; Default: SINGLET. MAX_NUM_VECS¶. Maximum number of subspace vectors. A negative value uses * the adcc default (roughly between 20 and 5 * N_GUESSES). This option is only available for the adcc backend. Type: integer; Default: -1. MAXITER¶. Maximum number of iterations. Type: integer; Default: 50. NUM_CORE_ORBITALS¶. Number of orbitals to place in the core. This option is only available for the adcc backend. Type: integer; Default: 0. NUM_GUESSES¶. Number of guess vectors to generate and use. Negative values keep * the adcc default (currently 2 * ROOTS_PER_IRREP). This option is only available for the adcc backend. Type: integer; Default: -1.",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/adcc.html:1021,install,installed,1021,psi4manual/1.7.x/adcc.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/adcc.html,2,['install'],"['install', 'installed']"
Deployability,"reshold after which damping is no longer performed, if it is enabled. It is recommended to leave damping on until convergence, which is the default. Cfour Interface: Keyword translates into CFOUR_SCF_DAMPING. Type: conv double; Default: 1.0e-18. DAMPING_FACTOR_INDUCED (PE)¶PE — Thole damping factor for induced moments. Type: double; Default: 2.1304. DAMPING_FACTOR_MULTIPOLE (PE)¶PE — Thole damping factor for multipole fields. Type: double; Default: 2.1304. DAMPING_PERCENTAGE (DCT)¶DCT (Expert) — The amount (percentage) of damping to apply to the orbital update procedure: 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the previous iteration’s density being mixed into the current iteration) can help in cases where oscillatory convergence is observed. Type: double; Default: 0.0. DAMPING_PERCENTAGE (PSIMRCC)¶PSIMRCC — The amount (percentage) of damping to apply to the amplitude updates. 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the amplitudes from the previous iteration being mixed into the current iteration) can help in cases where oscillatory convergence is observed. Type: double; Default: 0.0. DAMPING_PERCENTAGE (SCF)¶SCF — The amount (percentage) of damping to apply to the early density updates. 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the previous iteration’s density being mixed into the current density) could help to solve problems with oscillatory convergence. Type: double; Default: 0.0. DCT_FUNCTIONAL (DCT)¶DCT — Chooses appropriate DCT method. Type: string; Possible Values: DC-06, DC-12, ODC-06, ODC-12, ODC-13, CEPA0; Default: ODC-12. DCT_GUESS (DCT)¶DCT (Expert) — Whether to read the orbitals from a previous computation, or to compute an MP2 guess. Type: string; Possible Values: CC, BCC, MP2, DCT; Default: MP2. DCT_TYPE (DCT)¶DCT — What algori",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:94707,update,update,94707,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html,18,['update'],['update']
Deployability,"reshold for augmenting the vector subspace in stability check. Type: conv double; Default: 0.1. STABILITY_CHECK¶. Performs stability analysis of the DCFT energy. Type: boolean; Default: false. STABILITY_CONVERGENCE¶. Controls the convergence of the Davidson’s diagonalization in stability check. Type: conv double; Default: 1e-4. STABILITY_MAX_SPACE_SIZE¶. The maximum size of the subspace for the stability check. The program will terminate if this parameter is exceeded and the convergence (STABILITY_CONVERGENCE) is not satisfied. Type: integer; Default: 200. STABILITY_N_EIGENVALUES¶. The number of Hessian eigenvalues computed during the stability check. Type: integer; Default: 3. STABILITY_N_GUESS_VECTORS¶. The number of guess vectors used for Davidson’s diagonalization in stability check. Type: integer; Default: 20. TIKHONOW_OMEGA¶. The shift applied to the denominator in the density cumulant update iterations. Type: double; Default: 0.0. TPDM¶. Controls whether to compute unrelaxed two-particle density matrix at the end of the energy computation. Type: boolean; Default: false. Table Of Contents. DCFT; General; ALGORITHM; AO_BASIS; DCFT_FUNCTIONAL; DIIS_START_CONVERGENCE; LAMBDA_MAXITER; MAXITER; QC_COUPLING; REFERENCE; RESPONSE_ALGORITHM; R_CONVERGENCE; SCF_MAXITER. Expert; CACHELEVEL; DAMPING_PERCENTAGE; DCFT_GUESS; DIIS_MAX_VECS; DIIS_MIN_VECS; IGNORE_TAU; INTS_TOLERANCE; LOCK_OCC; MO_RELAX; RELAX_GUESS_ORBITALS; RELAX_TAU; STABILITY_ADD_VECTORS; STABILITY_AUGMENT_SPACE_TOL; STABILITY_CHECK; STABILITY_CONVERGENCE; STABILITY_MAX_SPACE_SIZE; STABILITY_N_EIGENVALUES; STABILITY_N_GUESS_VECTORS; TIKHONOW_OMEGA; TPDM. Previous topic; WFN; Next topic; ALGORITHM; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/autodir_options_c/module__dcft-1.html:7202,update,updated,7202,psi4manual/4.0b5/autodir_options_c/module__dcft-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/module__dcft-1.html,2,['update'],['updated']
Deployability,"rest cc-pVXZ or aug-cc-pVXZ; """"""; Dunmatch = re.compile(r'^(.*cc-)(pv|pcv|pwcv).*?([dtq56]).*z$').match(self.basis). if Dunmatch:; rootbas = 'cc-' + Dunmatch.group(2) + Dunmatch.group(3) + 'z'; augbas = 'aug-cc-' + Dunmatch.group(2) + Dunmatch.group(3) + 'z'; if Dunmatch.group(1) == 'cc-':; auxbas = rootbas; else:; auxbas = augbas; else:; rootbas = None; augbas = None; auxbas = None. return [rootbas, augbas, auxbas]. [docs]class InputFormat2(object):. def __init__(self, mem, mol, mtd, der, opt):. # total job memory in MB; self.memory = mem; # qcdb.Molecule object; self.molecule = mol; # computational method; self.method = mtd.lower(); # computational derivative level; self.dertype = der; # options dictionary; self.options = opt; # orbital basis set; self.basis = opt['GLOBALS']['BASIS']['value'].lower(); # do cast up from sto-3g basis?; self.castup = opt['SCF']['BASIS_GUESS']['value']. [docs] def corresponding_aux_basis(self):; """"""For Dunning basis sets, returns strings from which auxiliary; basis sets and heavy-aug can be constructed. Note that; valence/core-valence/etc. is conserved and X-zeta/(X+d)zeta is; not, since this is the usual aux basis pattern.; *augbasis* is round up to the nearest aug-cc-pVXZ; *rootbasis* is round down to the nearest cc-pVXZ; *auxbasis* is round up to the nearest cc-pVXZ or aug-cc-pVXZ; """"""; Dunmatch = re.compile(r'^(.*cc-)(pv|pcv|pwcv).*?([dtq56]).*z$').match(self.basis). if Dunmatch:; rootbas = 'cc-' + Dunmatch.group(2) + Dunmatch.group(3) + 'z'; augbas = 'aug-cc-' + Dunmatch.group(2) + Dunmatch.group(3) + 'z'; if Dunmatch.group(1) == 'cc-':; auxbas = rootbas; else:; auxbas = augbas; else:; rootbas = None; augbas = None; auxbas = None. return [rootbas, augbas, auxbas]. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    ; Psi4 [1.0.0 6a9a71b] » ; Module code ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/qcformat.html:3861,update,updated,3861,psi4manual/1.0.0/_modules/qcdb/qcformat.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/qcformat.html,1,['update'],['updated']
Deployability,"return *name* in coded form, stripped of; characters that confuse filenames, characters into lowercase,; ``+`` into ``p``, ``*`` into ``s``, and ``(``, ``)``, & ``,``; into ``_``. """"""; temp = name.lower(); temp = temp.replace('+', 'p'); temp = temp.replace('*', 's'); temp = temp.replace('(', '_'); temp = temp.replace(')', '_'); temp = temp.replace(',', '_'); return temp. [docs]def load_basis_families():; """"""Function to load into the array ``basisfamily_list``; BasisFamily objects for all Psi4's standard installed bases. """"""; from .basislistdunning import load_basfam_dunning; from .basislistother import load_basfam_other. if len(basisfamily_list) == 0:; load_basfam_dunning(); load_basfam_other(); return basisfamily_list. [docs]def print_basis_families():; """"""Function to print to the output file a formatted summary; of all the BasisFamily objects in ``basisfamily_list``, by; default all Psi4's standard installed bases. """"""; basisfamily_list = load_basis_families(). text = ''; for fam in basisfamily_list:; text += '%s' % (fam); return text. [docs]def corresponding_basis(name, role='BASIS'):; """"""Function to validate if the orbital basis *name* in coded or; ornate form is in Psi4's standard installed bases list. ``None``; is returned if the orbital basis is not found. """"""; role = role.upper(); basisfamily_list = load_basis_families(). for fam in basisfamily_list:; if sanitize_basisname(fam.ornate) == sanitize_basisname(name):; if role == 'ORNATE':; return fam.ornate; elif role == 'BASIS' or role == 'ORBITAL':; return fam.orbital; elif role == 'JFIT':; return fam.jfit; elif role == 'JKFIT':; return fam.jkfit; elif role == 'RIFIT':; return fam.rifit; elif role == 'DUALFIT':; return fam.dualfit; return None. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    ; Psi4 [1.0.0 6a9a71b] » ; Module code ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/basislist.html:5670,install,installed,5670,psi4manual/1.0.0/_modules/qcdb/basislist.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/basislist.html,2,"['install', 'update']","['installed', 'updated']"
Deployability,"return cls.array_variables(). core.Wavefunction.get_variable = _core_wavefunction_get_variable; core.Wavefunction.get_array = _core_wavefunction_get_array; core.Wavefunction.set_array = _core_wavefunction_set_array; core.Wavefunction.arrays = _core_wavefunction_arrays. def _core_wavefunction_frequencies(self):; """"""Returns the results of a frequency analysis. Parameters; ----------; self; Wavefunction instance. Returns; -------; ~typing.Optional[~typing.Dict[str, ~numpy.ndarray]]; A dictionary of vibrational information. See :py:func:`psi4.driver.qcdb.vib.harmonic_analysis`. """"""; if not hasattr(self, 'frequency_analysis'):; return None. vibinfo = self.frequency_analysis; vibonly = qcdb.vib.filter_nonvib(vibinfo); return core.Vector.from_array(qcdb.vib.filter_omega_to_real(vibonly['omega'].data)). core.Wavefunction.frequencies = _core_wavefunction_frequencies. def _core_doublet(A, B, transA, transB):; """"""Multiply two matrices together. .. deprecated:: 1.4; Use :py:func:`psi4.core.doublet` instead. """"""; warnings.warn(; ""Using `psi4.core.Matrix.doublet` instead of `psi4.core.doublet` is deprecated, and as soon as 1.4 it will stop working\n"",; category=FutureWarning,; stacklevel=2); return core.doublet(A, B, transA, transB). def _core_triplet(A, B, C, transA, transB, transC):; """"""Multiply three matrices together. .. deprecated:: 1.4; Use :py:func:`psi4.core.triplet` instead. """"""; warnings.warn(; ""Using `psi4.core.Matrix.triplet` instead of `psi4.core.triplet` is deprecated, and as soon as 1.4 it will stop working\n"",; category=FutureWarning,; stacklevel=2); return core.triplet(A, B, C, transA, transB, transC). core.Matrix.doublet = staticmethod(_core_doublet); core.Matrix.triplet = staticmethod(_core_triplet). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .  · ; 1.7;  · . PSI4. Module code; psi4.driver.p4util.python_helpers. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/p4util/python_helpers.html:48238,update,updated,48238,psi4manual/1.7.x/_modules/psi4/driver/p4util/python_helpers.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/p4util/python_helpers.html,1,['update'],['updated']
Deployability,"rface to CPPE by M. Scheurer. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to CPPE by M. Scheurer. Interface to CPPE by M. Scheurer¶; Code author: Maximilian Scheurer; Section author: Maximilian Scheurer; Module: Keywords, PSI Variables. PSI4 contains code to interface to the CPPE library developed; by M. Scheurer.; The CPPE library requires no additional licence, downloads, or; configuration. The library allows for calculations in solution with the; polarizable embedding model (PE), an explicit, fragment-based solvent model [Olsen:2010:3721].; For a general tutorial on how to prepare/perform PE calculations, read the; tutorial review. Installation¶; Binary. CPPE is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell).; If using the PSI4 binary, CPPE has already been installed alongside.; If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; CPPE can be obtained through conda install cppe -c psi4.; Then enable it as a feature with ENABLE_cppe,; hint its location with cppe_DIR,; and rebuild PSI4 to detect CPPE and activate dependent code. To remove a conda installation, conda remove cppe. Source. If using PSI4 built from source and you want CPPE built from; from source also,; enable it as a feature with ENABLE_cppe,; and let the build system fetch and build it and activate dependent code. Using the polarizable embedding model¶; The inclusion of a PE description of the solvent into your calculation; is achieved by setting PE true in your input file. Note; At present, PE can only be used for energy calculations with SCF; wavefunctions and CC wavefunctions in the PTE approximation [Cammi:2009:164104].; All ERI algorithms (PK, OUT_OF_CORE, DIRECT, DF, CD) are supported. Note; linear response calculations (static polarisabilities, TD-SCF) are supported for RHF/UHF if available. Warning; The CP",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/cppe-1.html:994,install,installed,994,psi4manual/1.4.0/cppe-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cppe-1.html,4,['install'],"['install', 'installed']"
Deployability,"rface to CPPE by M. Scheurer. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to CPPE by M. Scheurer. Interface to CPPE by M. Scheurer¶; Code author: Maximilian Scheurer; Section author: Maximilian Scheurer; Module: Keywords, PSI Variables. PSI4 contains code to interface to the CPPE library developed; by M. Scheurer.; The CPPE library requires no additional licence, downloads, or; configuration. The library allows for calculations in solution with the; polarizable embedding model (PE), an explicit, fragment-based solvent model [Olsen:2010:3721].; For a general tutorial on how to prepare/perform PE calculations, read the; tutorial review. Installation¶; Binary. CPPE is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell).; If using the PSI4 binary, CPPE has already been installed alongside.; If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; CPPE can be obtained through conda install cppe -c psi4.; Then enable it as a feature with ENABLE_cppe,; hint its location with cppe_DIR,; and rebuild PSI4 to detect CPPE and activate dependent code. To remove a conda installation, conda remove cppe. Source. If using PSI4 built from source and you want CPPE built from; from source also,; enable it as a feature with ENABLE_cppe,; and let the build system fetch and build it and activate dependent code. Using the polarizable embedding model¶; The inclusion of a PE description of the solvent into your calculation; is achieved by setting PE true in your input file. Note; At present, PE can only be used for energy calculations with SCF; wavefunctions and CC wavefunctions in the PTE approximation [Cammi:2009:164104].; All ERI algorithms (PK, OUT_OF_CORE, DIRECT, DF, CD) are supported. Note; linear response calculations (static polarisabilities, TD-SCF) are supported for RHF/UHF if available. Warning; The CP",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/cppe-1.html:994,install,installed,994,psi4manual/1.5.0/cppe-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/cppe-1.html,4,['install'],"['install', 'installed']"
Deployability,"rface to CPPE by M. Scheurer. Navigation. Index. modules    .    .    .    .  · ; 1.6;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to CPPE by M. Scheurer. Interface to CPPE by M. Scheurer¶; Code author: Maximilian Scheurer; Section author: Maximilian Scheurer; Module: Keywords, PSI Variables. PSI4 contains code to interface to the CPPE library developed; by M. Scheurer.; The CPPE library requires no additional licence, downloads, or; configuration. The library allows for calculations in solution with the; polarizable embedding model (PE), an explicit, fragment-based solvent model [Olsen:2010:3721].; For a general tutorial on how to prepare/perform PE calculations, read the; tutorial review. Installation¶; Binary. CPPE is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell).; If using the PSI4 binary, CPPE has already been installed alongside.; If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; CPPE can be obtained through conda install cppe -c psi4.; Then enable it as a feature with ENABLE_cppe,; hint its location with cppe_DIR,; and rebuild PSI4 to detect CPPE and activate dependent code. To remove a conda installation, conda remove cppe. Source. If using PSI4 built from source and you want CPPE built from; from source also,; enable it as a feature with ENABLE_cppe,; and let the build system fetch and build it and activate dependent code. Using the polarizable embedding model¶; The inclusion of a PE description of the solvent into your calculation; is achieved by setting PE true in your input file. Note; At present, PE can only be used for energy calculations with SCF; wavefunctions and CC wavefunctions in the PTE approximation [Cammi:2009:164104].; All ERI algorithms (PK, OUT_OF_CORE, DIRECT, DF, CD) are supported. Note; linear response calculations (static polarisabilities, TD-SCF) are supported for RHF/UHF if available. Warning; The CP",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/cppe.html:994,install,installed,994,psi4manual/1.6.x/cppe.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/cppe.html,2,['install'],"['install', 'installed']"
Deployability,"rface to CPPE by M. Scheurer. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to CPPE by M. Scheurer. Interface to CPPE by M. Scheurer¶; Code author: Maximilian Scheurer; Section author: Maximilian Scheurer; Module: Keywords, PSI Variables. PSI4 contains code to interface to the CPPE library developed; by M. Scheurer.; The CPPE library requires no additional licence, downloads, or; configuration. The library allows for calculations in solution with the; polarizable embedding model (PE), an explicit, fragment-based solvent model [Olsen:2010:3721].; For a general tutorial on how to prepare/perform PE calculations, read the; tutorial review. Installation¶; Binary. CPPE is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell).; If using the PSI4 binary, CPPE has already been installed alongside.; If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; CPPE can be obtained through conda install cppe -c psi4.; Then enable it as a feature with ENABLE_cppe,; hint its location with cppe_DIR,; and rebuild PSI4 to detect CPPE and activate dependent code. To remove a conda installation, conda remove cppe. Source. If using PSI4 built from source and you want CPPE built from; from source also,; enable it as a feature with ENABLE_cppe,; and let the build system fetch and build it and activate dependent code. Using the polarizable embedding model¶; The inclusion of a PE description of the solvent into your calculation; is achieved by setting PE true in your input file. Note; At present, PE can only be used for energy calculations with SCF; wavefunctions and CC wavefunctions in the PTE approximation [Cammi:2009:164104].; All ERI algorithms (PK, OUT_OF_CORE, DIRECT, DF, CD) are supported. Note; linear response calculations (static polarisabilities, TD-SCF) are supported for RHF/UHF if available. Warning; The CP",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/cppe.html:994,install,installed,994,psi4manual/1.7.x/cppe.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/cppe.html,2,['install'],"['install', 'installed']"
Deployability,"rface to Libxc by M. A. L. Marques. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to Libxc by M. A. L. Marques. Interface to Libxc by M. A. L. Marques¶; Code author: M. A. L. Marques and Micael Oliveira; Section author: Lori A. Burns. PSI4, relies upon the Libxc library for density functionals. Libxc; requires no; additional licence, downloads, or configuration. Conversely, PSI4; cannot build without Libxc. Installation¶; Binary. Libxc is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell).; If using the PSI4 binary, Libxc has already been installed alongside.; If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; Libxc can be obtained through conda install libxc -c psi4.; Then, hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect Libxc and activate dependent code. To remove a conda installation, conda remove libxc. Source. Note that PSI4 has forked and slightly modified upstream Libxc from; https://gitlab.com/libxc/libxc to regain functionality. If using PSI4 built from source and you want Libxc built from; from source also,; let the build system fetch and build it and activate dependent code. How to configure Libxc for building Psi4¶; Role and Dependencies. Role — In PSI4, Libxc is a library that provides essential; density functional definitions and compositions.; Downstream Dependencies — PSI4 \(\Leftarrow\) Libxc; Upstream Dependencies — Libxc \(\Leftarrow\) None. CMake Variables. CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For Libxc, set to an installation directory containing include/libxc/xc.h; Libxc_DIR — CMake variable to specify where pre-built Libxc can be found. Set to installation directory containing share/cmake/Libxc/LibxcConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_Libxc — CMake variable to force internal bui",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/libxc-1.html:1000,install,installation,1000,psi4manual/1.4.0/libxc-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/libxc-1.html,2,['install'],['installation']
Deployability,"rface to Libxc by M. A. L. Marques. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to Libxc by M. A. L. Marques. Interface to Libxc by M. A. L. Marques¶; Code author: M. A. L. Marques and Micael Oliveira; Section author: Lori A. Burns. PSI4, relies upon the Libxc library for density functionals. Libxc; requires no; additional licence, downloads, or configuration. Conversely, PSI4; cannot build without Libxc. Installation¶; Binary. Libxc is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell).; If using the PSI4 binary, Libxc has already been installed alongside.; If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; Libxc can be obtained through conda install libxc -c psi4.; Then, hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect Libxc and activate dependent code. To remove a conda installation, conda remove libxc. Source. Note that PSI4 has forked and slightly modified upstream Libxc from; https://gitlab.com/libxc/libxc to regain functionality. If using PSI4 built from source and you want Libxc built from; from source also,; let the build system fetch and build it and activate dependent code. How to configure Libxc for building Psi4¶; Role and Dependencies. Role — In PSI4, Libxc is a library that provides essential; density functional definitions and compositions.; Downstream Dependencies — PSI4 \(\Leftarrow\) Libxc; Upstream Dependencies — Libxc \(\Leftarrow\) None. CMake Variables. CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For Libxc, set to an installation directory containing include/libxc/xc.h; Libxc_DIR — CMake variable to specify where pre-built Libxc can be found. Set to installation directory containing share/cmake/Libxc/LibxcConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_Libxc — CMake variable to force internal bui",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/libxc-1.html:1000,install,installation,1000,psi4manual/1.5.0/libxc-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/libxc-1.html,2,['install'],['installation']
Deployability,"rface to Libxc by M. A. L. Marques. Navigation. Index. modules    .    .    .    .  · ; 1.6;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to Libxc by M. A. L. Marques. Interface to Libxc by M. A. L. Marques¶; Code author: M. A. L. Marques and Micael Oliveira; Section author: Lori A. Burns. PSI4, relies upon the Libxc library for density functionals. Libxc; requires no; additional licence, downloads, or configuration. Conversely, PSI4; cannot build without Libxc. Installation¶; Binary. Libxc is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell).; If using the PSI4 binary, Libxc has already been installed alongside.; If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; Libxc can be obtained through conda install libxc -c psi4.; Then, hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect Libxc and activate dependent code. To remove a conda installation, conda remove libxc. Source. Note that PSI4 has forked and slightly modified upstream Libxc from; https://gitlab.com/libxc/libxc to regain functionality. If using PSI4 built from source and you want Libxc built from; from source also,; let the build system fetch and build it and activate dependent code. How to configure Libxc for building Psi4¶; Role and Dependencies. Role — In PSI4, Libxc is a library that provides essential; density functional definitions and compositions.; Downstream Dependencies — PSI4 \(\Leftarrow\) Libxc; Upstream Dependencies — Libxc \(\Leftarrow\) None. CMake Variables. CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For Libxc, set to an installation directory containing include/libxc/xc.h; Libxc_DIR — CMake variable to specify where pre-built Libxc can be found. Set to installation directory containing share/cmake/Libxc/LibxcConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_Libxc — CMake variable to force internal bui",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/libxc.html:1000,install,installation,1000,psi4manual/1.6.x/libxc.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/libxc.html,1,['install'],['installation']
Deployability,"rface to Libxc by M. A. L. Marques. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to Libxc by M. A. L. Marques. Interface to Libxc by M. A. L. Marques¶; Code author: M. A. L. Marques and Micael Oliveira; Section author: Lori A. Burns. PSI4, relies upon the Libxc library for density functionals. Libxc; requires no; additional licence, downloads, or configuration. Conversely, PSI4; cannot build without Libxc. Installation¶; Binary. Libxc is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell).; If using the PSI4 binary, Libxc has already been installed alongside.; If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; Libxc can be obtained through conda install libxc -c psi4.; Then, hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect Libxc and activate dependent code. To remove a conda installation, conda remove libxc. Source. Note that PSI4 has forked and slightly modified upstream Libxc from; https://gitlab.com/libxc/libxc to regain functionality. If using PSI4 built from source and you want Libxc built from; from source also,; let the build system fetch and build it and activate dependent code. How to configure Libxc for building Psi4¶; Role and Dependencies. Role — In PSI4, Libxc is a library that provides essential; density functional definitions and compositions.; Downstream Dependencies — PSI4 \(\Leftarrow\) Libxc; Upstream Dependencies — Libxc \(\Leftarrow\) None. CMake Variables. CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For Libxc, set to an installation directory containing include/libxc/xc.h; Libxc_DIR — CMake variable to specify where pre-built Libxc can be found. Set to installation directory containing share/cmake/Libxc/LibxcConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_Libxc — CMake variable to force internal bui",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/libxc.html:1000,install,installation,1000,psi4manual/1.7.x/libxc.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/libxc.html,1,['install'],['installation']
Deployability,"rface value (float, default = 0.05); --rx [<angle>] the x-axis rotation angle (float, default = 30.0); --ry [<angle>] the y-axis rotation angle (float, default = 40.0); --rz [<angle>] the z-axis rotation angle (float, default = 15.0); --tx [<length>] the x-axis translation (float, default = 0.0); --ty [<length>] the y-axis translation (float, default = 0.0); --tz [<length>] the z-axis translation (float, default = 0.0); --opacity [<opacity>]; opacity of the isosurface (float, default = 1.0); --scale [<factor>] the scaling factor (float, default = 1.0); --no-montage call montage to combine images. (string, default =; false); --no-labels do not add labels to images. (string, default = false); --imagesize [<integer>]; the size of each image (integer, default = 250); --imagew [<integer>] the width of images (integer, default = 250); --imageh [<integer>] the height of images (integer, default = 250); --fontsize [<integer>]; the font size (integer, default = 20); --interactive run in interactive mode (default = false); --gzip gzip cube files (default = false); --national_scheme use a red/blue color scheme. (string, default = false); --silver_scheme use a gray/white color scheme. (string, default =; false); --bright_scheme use a soft yellow/blue color scheme. (string, default; = false); --electron_scheme use a purple/green color scheme. (string, default =; false). table of contents. Generation of Cube Files — cubeprop(); Introduction; Cubeprop Tasks; Keywords; CUBEPROP_TASKS; CUBEPROP_FILEPATH; CUBEPROP_ORBITALS; CUBEPROP_BASIS_FUNCTIONS; CUBIC_GRID_SPACING; CUBIC_GRID_OVERAGE. Orbital Visualization with VMD; Script Prerequisites; Running the Script; Script Options. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Psithon Functions: Invoking a Calculation; Generation of Cube Files — cubeprop(). © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/cubeprop.html:11934,update,updated,11934,psi4manual/1.8.x/cubeprop.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/cubeprop.html,1,['update'],['updated']
Deployability,"rface value (float, default = 0.05); --rx [<angle>] the x-axis rotation angle (float, default = 30.0); --ry [<angle>] the y-axis rotation angle (float, default = 40.0); --rz [<angle>] the z-axis rotation angle (float, default = 15.0); --tx [<length>] the x-axis translation (float, default = 0.0); --ty [<length>] the y-axis translation (float, default = 0.0); --tz [<length>] the z-axis translation (float, default = 0.0); --opacity [<opacity>]; opacity of the isosurface (float, default = 1.0); --scale [<factor>] the scaling factor (float, default = 1.0); --no-montage call montage to combine images. (string, default =; false); --no-labels do not add labels to images. (string, default = false); --imagesize [<integer>]; the size of each image (integer, default = 250); --imagew [<integer>] the width of images (integer, default = 250); --imageh [<integer>] the height of images (integer, default = 250); --fontsize [<integer>]; the font size (integer, default = 20); --interactive run in interactive mode (default = false); --gzip gzip cube files (default = false); --national_scheme use a red/blue color scheme. (string, default = false); --silver_scheme use a gray/white color scheme. (string, default =; false); --bright_scheme use a soft yellow/blue color scheme. (string, default; = false); --electron_scheme use a purple/green color scheme. (string, default =; false). table of contents. Generation of Cube Files — cubeprop(); Introduction; Cubeprop Tasks; Keywords; CUBEPROP_TASKS; CUBEPROP_FILEPATH; CUBEPROP_ORBITALS; CUBEPROP_BASIS_FUNCTIONS; CUBIC_GRID_SPACING; CUBIC_GRID_OVERAGE. Orbital Visualization with VMD; Script Prerequisites; Running the Script; Script Options. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.9.1;  · . PSI4. Psithon Functions: Invoking a Calculation; Generation of Cube Files — cubeprop(). © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 08 February 2024 09:32PM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/cubeprop.html:11934,update,updated,11934,psi4manual/1.9.x/cubeprop.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/cubeprop.html,1,['update'],['updated']
Deployability,"rforms effective fragment potential computations through calls to Kaliman’s libefp library. General¶. EFP_DISP¶. Do include dispersion energy term in EFP computation?. Type: boolean; Default: true. EFP_DISP_DAMPING¶. Fragment-fragment dispersion damping type. TT is a damping formula by Tang and Toennies. OVERLAP is overlap-based dispersion damping. Type: string; Possible Values: TT, OVERLAP, OFF; Default: OVERLAP. EFP_ELST¶. Do include electrostatics energy term in EFP computation?. Type: boolean; Default: true. EFP_ELST_DAMPING¶. Fragment-fragment electrostatic damping type. SCREEN is a damping formula based on screen group in the EFP potential. OVERLAP is damping that computes charge penetration energy. Type: string; Possible Values: SCREEN, OVERLAP, OFF; Default: SCREEN. EFP_EXCH¶. Do include exchange repulsion energy term in EFP computation?. Type: boolean; Default: true. EFP_POL¶. Do include polarization energy term in EFP computation?. Type: boolean; Default: true. EFP_POL_DAMPING¶. Fragment-fragment polarization damping type. TT is a damping formula like Tang and Toennies. Type: string; Possible Values: TT, OFF; Default: TT. PRINT¶. The amount of information printed to the output file. Type: integer; Default: 1. QMEFP_ELST¶. Do include electrostatics energy term in QM/EFP computation?. Type: boolean; Default: true. QMEFP_POL¶. Do include polarization energy term in EFP computation?. Type: boolean; Default: true. Expert¶. DERTYPE¶. Do EFP gradient?. Type: string; Possible Values: NONE, FIRST; Default: NONE. QMEFP¶. Do turn on QM/EFP terms?. Type: boolean; Default: false. table of contents. EFP; General; EFP_DISP; EFP_DISP_DAMPING; EFP_ELST; EFP_ELST_DAMPING; EFP_EXCH; EFP_POL; EFP_POL_DAMPING; PRINT; QMEFP_ELST; QMEFP_POL. Expert; DERTYPE; QMEFP. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Keywords by Module. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/autodir_options_c/module__efp-1.html:2041,update,updated,2041,psi4manual/1.1.0/autodir_options_c/module__efp-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodir_options_c/module__efp-1.html,2,['update'],['updated']
Deployability,"rg0: str) → None¶; docstring. set_description(self: psi4.core.Dispersion, arg0: str) → None¶; docstring. set_name(self: psi4.core.Dispersion, arg0: str) → None¶; docstring. sr6(self: psi4.core.Dispersion) → float¶; docstring. a1(self: psi4.core.Dispersion) → float; docstring. a2(self: psi4.core.Dispersion) → float; docstring. bibtex(self: psi4.core.Dispersion) → str; Get the BibTeX key for the literature reference. build(type: str, s6: float=0.0, p1: float=0.0, p2: float=0.0, p3: float=0.0) → psi4.core.Dispersion; docstring. citation(self: psi4.core.Dispersion) → str; docstring. compute_energy(self: psi4.core.Dispersion, arg0: psi4.core.Molecule) → float; docstring. compute_gradient(self: psi4.core.Dispersion, arg0: psi4.core.Molecule) → psi4.core.Matrix; docstring. compute_hessian(self: psi4.core.Dispersion, arg0: psi4.core.Molecule) → psi4.core.Matrix; docstring. d(self: psi4.core.Dispersion) → float; docstring. description(self: psi4.core.Dispersion) → str; docstring. name(self: psi4.core.Dispersion) → str; docstring. print_energy(self: psi4.core.Dispersion, arg0: psi4.core.Molecule) → str; docstring. print_gradient(self: psi4.core.Dispersion, arg0: psi4.core.Molecule) → str; docstring. print_hessian(self: psi4.core.Dispersion, arg0: psi4.core.Molecule) → str; docstring. print_out(self: psi4.core.Dispersion) → None; docstring. s6(self: psi4.core.Dispersion) → float; docstring. s8(self: psi4.core.Dispersion) → float; docstring. set_bibtex(self: psi4.core.Dispersion, arg0: str) → None; Set the BibTeX key for the literature reference. set_citation(self: psi4.core.Dispersion, arg0: str) → None; docstring. set_description(self: psi4.core.Dispersion, arg0: str) → None; docstring. set_name(self: psi4.core.Dispersion, arg0: str) → None; docstring. sr6(self: psi4.core.Dispersion) → float; docstring. Navigation. Index. modules    .    .  · ; 1.1;  · . PSI4. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/api/psi4.core.dispersion.html:4830,update,updated,4830,psi4manual/1.1.0/api/psi4.core.dispersion.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/api/psi4.core.dispersion.html,1,['update'],['updated']
Deployability,"rg0: str, arg1: bool) → None; add bool option. add_int(self: psi4.core.Options, arg0: str, arg1: int) → None; add int option. add_str(self: psi4.core.Options, arg0: str, arg1: str, arg2: str) → None; add string option. add_str_i(self: psi4.core.Options, arg0: str, arg1: str, arg2: str) → None; add string option. get_bool(self: psi4.core.Options, arg0: str) → bool; get boolean option. get_current_module(self: psi4.core.Options) → str; gets current module. get_double(self: psi4.core.Options, arg0: str) → float; get double option. get_int(self: psi4.core.Options, arg0: str) → int; get integer option. get_int_vector(self: psi4.core.Options, arg0: str) → List[int]; get int vector option. get_str(*args, **kwargs); Overloaded function. get_str(self: psi4.core.Options, arg0: str) -> str. get string option. get_str(self: psi4.core.Options, arg0: str) -> str. get string option. read_globals(self: psi4.core.Options) → bool; expert. set_array(self: psi4.core.Options, arg0: str, arg1: str) → None; set array option. set_bool(self: psi4.core.Options, arg0: str, arg1: str, arg2: bool) → None; set bool option. set_current_module(self: psi4.core.Options, arg0: str) → None; sets arg0 (all CAPS) as current module. set_double(self: psi4.core.Options, arg0: str, arg1: str, arg2: float) → None; set double option. set_int(self: psi4.core.Options, arg0: str, arg1: str, arg2: int) → None; set int option. set_read_globals(self: psi4.core.Options, arg0: bool) → None; expert. set_str(self: psi4.core.Options, arg0: str, arg1: str, arg2: str) → None; set string option. set_str_i(self: psi4.core.Options, arg0: str, arg1: str, arg2: str) → None; set string option. validate_options(self: psi4.core.Options) → None; validate options for arg0 module. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 July 2018 04:21AM.; Created using Sphinx 1.7.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/api/psi4.core.options.html:5158,update,updated,5158,psi4manual/1.2.1/api/psi4.core.options.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/api/psi4.core.options.html,1,['update'],['updated']
Deployability,"rg1: psi4.core.CIVector, arg2: int, arg3: int) → None¶; docstring. close_io_files(self: psi4.core.CIVector, arg0: int) → None¶; docstring. copy(self: psi4.core.CIVector, arg0: psi4.core.CIVector, arg1: int, arg2: int) → None¶; docstring. dcalc(self: psi4.core.CIVector, arg0: float, arg1: psi4.core.CIVector, arg2: int) → float¶; docstring. divide(self: psi4.core.CIVector, arg0: psi4.core.CIVector, arg1: float, arg2: int, arg3: int) → None¶; docstring. init_io_files(self: psi4.core.CIVector, arg0: bool) → None¶; docstring. norm(self: psi4.core.CIVector, arg0: int) → float¶; docstring. read(self: psi4.core.CIVector, arg0: int, arg1: int) → int¶; docstring. scale(self: psi4.core.CIVector, arg0: float, arg1: int) → None¶; docstring. set_nvec(self: psi4.core.CIVector, arg0: int) → None¶; docstring. shift(self: psi4.core.CIVector, arg0: float, arg1: int) → None¶; docstring. symnormalize(self: psi4.core.CIVector, arg0: float, arg1: int) → None¶; docstring. vdot(self: psi4.core.CIVector, arg0: psi4.core.CIVector, arg1: int, arg2: int) → float¶; docstring. vector_multiply(self: psi4.core.CIVector, arg0: float, arg1: psi4.core.CIVector, arg2: psi4.core.CIVector, arg3: int, arg4: int, arg5: int) → None¶; docstring. write(self: psi4.core.CIVector, arg0: int, arg1: int) → int¶; docstring. zero(self: psi4.core.CIVector) → None¶; docstring. table of contents. CIVector; CIVector; CIVector.np; CIVector.axpy(); CIVector.close_io_files(); CIVector.copy(); CIVector.dcalc(); CIVector.divide(); CIVector.init_io_files(); CIVector.norm(); CIVector.read(); CIVector.scale(); CIVector.set_nvec(); CIVector.shift(); CIVector.symnormalize(); CIVector.vdot(); CIVector.vector_multiply(); CIVector.write(); CIVector.zero(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. PSI4 API: Linking C++ and Python; CIVector. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/api/psi4.core.CIVector.html:2975,update,updated,2975,psi4manual/master/api/psi4.core.CIVector.html,https://psicode.org,https://psicode.org/psi4manual/master/api/psi4.core.CIVector.html,1,['update'],['updated']
Deployability,"rgence of the cumulant and orbitals is achieved.; Convergence of the simultaneous algorithm is accelerated using the; DIIS extrapolation technique.; TWOSTEP; In the two-step algorithm each macroiteration consists of two sets of; microiterations. In the first set, the density cumulant equations are solved; iteratively, while the orbitals are kept fixed. After the density cumulant is; converged, the second set of microiterations is performed for the; self-consistent update of the orbitals with the fixed density cumulant. Each; macroiteration is completed by performing the orbital transformation of the; integrals. As in the simultaneous algorithm, the DIIS; extrapolation is used to accelerate convergence. Two-step algorithm is; only available for the DC-06 and DC-12 methods.; QC; In the quadratically-convergent algorithm, the; orbital and cumulant update equations are solved using the Newton-Raphson; method. Each macroiteration of the quadratically-convergent algorithm consists; of a single Newton-Raphson update followed by the orbital transformation; of the integrals. The solution of the Newton-Raphson equations is performed; iteratively using the preconditioned conjugate gradients method, where only the; product of the electronic Hessian with the step vector is computed for; efficiency. By default, the electronic Hessian is build for both the cumulant and orbital; updates and both updates are performed simultaneously. Setting the QC_TYPE; option to TWOSTEP will perform the Newton-Raphson update only for the orbitals,; while the equations for the cumulant will be solved using a standard Jacobi update.; If requested by the user (set QC_COUPLING to TRUE), the electronic Hessian can include; matrix elements that couple the orbitals and the density cumulant.; The computation of these coupling elements increases; the cost of the macroiteration, but usually leads to faster convergence and is; recommended for open-shell systems.; It is important to note that the quadraticall",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/dcft-1.html:9896,update,update,9896,psi4manual/1.2.1/dcft-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/dcft-1.html,6,['update'],['update']
Deployability,"rget install -j`getconf _NPROCESSORS_ONLN`. How to build, test, and install Psi4, in detail¶; 1. Plan Directories. Get ahold of the PSI4 codebase, and navigate to the top level source; directory, hereafter top-level-psi4-dir. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}. >>> cd {top-level-psi4-dir}. Choose a compilation directory, hereafter objdir. How to choose the compilation directory, {objdir}. Choose an installation directory, hereafter prefix. How to install elsewhere than /usr/local/psi4. 2. Plan Configuration. Examine the strict and optional software requirements to make sure the; target computer has all the necessary dependencies installed. What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies. Prepare any necessary or desired configuration options for cmake,; hereafter [your configuration options]. How to see what build configuration options are available; Planning: how to configure Psi4 and invoke CMake. 3. Configure. Run CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates objdir ready for compilation.; >>> cmake -S. -B{objdir} -DCMAKE_INSTALL_PREFIX={prefix} [your configuration options]. 4. Compile. Compile the code (optional -j triggers parallel compilation). >>> cd {objdir}; >>> cmake --build . -j`getconf _NPROCESSORS_ONLN`. 5. Test. Optionally, use CTest and Pytest to test the build. How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation. >>> ctest -j`getconf _NPROCESSORS_ONLN`. >>> make pytest. 6. Install. If tests pass, install the code.; >>> cmake --install . 7. Configure Runtime. To run PSI4 after installation, you need to configure a few variables:. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation. W",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/build_planning.html:3342,configurat,configuration,3342,psi4manual/1.8.x/build_planning.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/build_planning.html,3,['configurat'],['configuration']
Deployability,"rgil root and make WindowsWSL symlinks. Generate download page for psicode.org¶. Be in repo psicode-hugo-website; Copy and edit new file akin to https://github.com/psi4/psicode-hugo-website/blob/master/content/installs/v13rc2.md. Note the edition string v13rc2 in frontmatter for this and future filenames; Copy and edit new file akin to https://github.com/psi4/psicode-hugo-website/blob/master/data/installs/v13rc2.yaml for menu and notes content; Enter scripts/ dir and edit primarily https://github.com/psi4/psicode-hugo-website/blob/master/scripts/install-generator.py#L9 but also any other arrays or messages that should change.; Run the install-generator.py in place. It will dump new files into data/installs/ _subdirs_. Be sure to git add them.; Installer page is now ready.; Shift “latest” alias in frontmatter from whichever page is currently active to the new page. This makes sure “Downloads” on the navigation bar points to new page.; Conscientiously, one should test. installer downloads in Mac and Linux. And actually installing them and psi4 --test them.; that download button and curl downloading register on the download counters on vergil. Commit the new files, PR, and deploy psicode site; Petition on Slack for testers. Publish GitHub release¶. On GitHub site “Draft a New Release” with newly minted tag; Fill in frontmatter style and links from previous GitHub release; Fill in RN from hopefully existing RN issue; Fill in RN by going through the top posts from all PRs from this milestone; “publish” release. This establishes release date for GitHub API; Close the RN issue.; Close the milestone (should be 100% complete). Publish GitHub postrelease¶. On GitHub site “Draft a New Release” for anticipated or newly minted tag; Fill in frontmatter style and links from previous GitHub release; Fill in RN as cherry-pick to or edit on branch; “publish” release. This establishes release date for GitHub API. Publish psicode release¶. Copy a recent release page like https://github",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/manage_release-1.html:14354,install,installer,14354,psi4manual/1.4.0/manage_release-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/manage_release-1.html,2,['install'],['installer']
Deployability,"rgs):; """"""Function encoding sequence of module calls for a pure EFP; computation (ignore any QM atoms). """""". efp_molecule = kwargs.get('molecule', core.get_active_molecule()); try:; efpobj = efp_molecule.EFP; except AttributeError:; raise ValidationError(""""""Method 'efp' not available without EFP fragments in molecule""""""). # print efp geom in [A]; core.print_out(efpobj.banner()); core.print_out(efpobj.geometry_summary(units_to_bohr=constants.bohr2angstroms)). # set options; # * 'chtr', 'qm_exch', 'qm_disp', 'qm_chtr' may be enabled in a future libefp release; efpopts = {}; for opt in ['elst', 'exch', 'ind', 'disp',; 'elst_damping', 'ind_damping', 'disp_damping']:; psiopt = 'EFP_' + opt.upper(); if core.has_option_changed('EFP', psiopt):; efpopts[opt] = core.get_option('EFP', psiopt); efpopts['qm_elst'] = False; efpopts['qm_ind'] = False; efpobj.set_opts(efpopts, label='psi', append='psi'); do_gradient = core.get_option('EFP', 'DERTYPE') == 'FIRST'. # compute and report; efpobj.compute(do_gradient=do_gradient); core.print_out(efpobj.energy_summary(label='psi')). ene = efpobj.get_energy(label='psi'); core.set_variable('EFP ELST ENERGY', ene['electrostatic'] + ene['charge_penetration'] + ene['electrostatic_point_charges']); core.set_variable('EFP IND ENERGY', ene['polarization']); core.set_variable('EFP DISP ENERGY', ene['dispersion']); core.set_variable('EFP EXCH ENERGY', ene['exchange_repulsion']); core.set_variable('EFP TOTAL ENERGY', ene['total']); core.set_variable('CURRENT ENERGY', ene['total']). if do_gradient:; core.print_out(efpobj.gradient_summary()). torq = efpobj.get_gradient(); torq = core.Matrix.from_array(np.asarray(torq).reshape(-1, 6)); core.set_variable(""EFP TORQUE"", torq) # P::e EFP. return ene['total']. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .  · ; 1.6;  · . PSI4. Module code; psi4.driver.procrouting.proc. © Copyright 2022, The Psi4 Project.; Last updated on Thursday, 19 May 2022 08:57PM.; Created using Sphinx 4.5.0.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/procrouting/proc.html:177515,update,updated,177515,psi4manual/1.6.x/_modules/psi4/driver/procrouting/proc.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/procrouting/proc.html,1,['update'],['updated']
Deployability,"rgy = vmfc_energy_body_dict[max_nbody] - vmfc_energy_body_dict[1]; core.set_variable('Valiron-Mayer Function Couterpoise Total Energy', vmfc_energy_body_dict[max_nbody]); core.set_variable('Valiron-Mayer Function Couterpoise Interaction Energy', vmfc_interaction_energy). for n in nbody_range[1:]:; var_key = 'VMFC-CORRECTED %d-BODY INTERACTION ENERGY' % n; core.set_variable(var_key, vmfc_energy_body_dict[n] - vmfc_energy_body_dict[1]). if return_method == 'cp':; ptype_body_dict = cp_ptype_body_dict; energy_body_dict = cp_energy_body_dict; elif return_method == 'nocp':; ptype_body_dict = nocp_ptype_body_dict; energy_body_dict = nocp_energy_body_dict; elif return_method == 'vmfc':; ptype_body_dict = vmfc_ptype_body_dict; energy_body_dict = vmfc_energy_body_dict; else:; raise ValidationError(""N-Body Wrapper: Invalid return type. Should never be here, please post this error on github.""). # Figure out and build return types; if return_total_data:; ret_energy = energy_body_dict[max_nbody]; else:; ret_energy = energy_body_dict[max_nbody]; ret_energy -= energy_body_dict[1]. if ptype != 'energy':; if return_total_data:; np_final_ptype = ptype_body_dict[max_nbody].copy(); else:; np_final_ptype = ptype_body_dict[max_nbody].copy(); np_final_ptype -= ptype_body_dict[1]. ret_ptype = core.Matrix.from_array(np_final_ptype); else:; ret_ptype = ret_energy. # Build and set a wavefunction; wfn = core.Wavefunction.build(molecule, 'sto-3g'); wfn.nbody_energy = energies_dict; wfn.nbody_ptype = ptype_dict; wfn.nbody_body_energy = energy_body_dict; wfn.nbody_body_ptype = ptype_body_dict. if ptype == 'gradient':; wfn.set_gradient(ret_ptype); elif ptype == 'hessian':; wfn.set_hessian(ret_ptype). core.set_variable(""CURRENT ENERGY"", ret_energy). if return_wfn:; return (ret_ptype, wfn); else:; return ret_ptype. Navigation. Index. modules    .    .  · ; 1.1;  · . PSI4. Module code. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/driver_nbody.html:16362,update,updated,16362,psi4manual/1.1.0/_modules/psi4/driver/driver_nbody.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/driver_nbody.html,1,['update'],['updated']
Deployability,"rgy change. Type: conv double; Default: 1.0e-6. MAX_FORCE_G_CONVERGENCE¶. Convergence criterion for geometry optmization: maximum force (internal coordinates, atomic units). Type: conv double; Default: 3.0e-4. RMS_DISP_G_CONVERGENCE¶. Convergence criterion for geometry optmization: rms displacement (internal coordinates, atomic units). Type: conv double; Default: 1.2e-3. RMS_FORCE_G_CONVERGENCE¶. Convergence criterion for geometry optmization: rms force (internal coordinates, atomic units). Type: conv double; Default: 3.0e-4. Hessian Update¶. CART_HESS_READ¶. Do read Cartesian Hessian? Only for experts - use FULL_HESS_EVERY instead. Type: boolean; Default: false. FULL_HESS_EVERY¶. Frequency with which to compute the full Hessian in the course of a geometry optimization. 0 means to compute the initial Hessian only, 1 means recompute every step, and N means recompute every N steps. The default (-1) is to never compute the full Hessian. Type: integer; Default: -1. HESS_UPDATE¶. Hessian update scheme. Type: string; Possible Values: NONE, BFGS, MS, POWELL, BOFILL; Default: BFGS. HESS_UPDATE_LIMIT¶. Do limit the magnitude of changes caused by the Hessian update?. Type: boolean; Default: true. HESS_UPDATE_LIMIT_MAX¶. If HESS_UPDATE_LIMIT is true, changes to the Hessian from the update are limited to the larger of HESS_UPDATE_LIMIT_SCALE * (the previous value) and HESS_UPDATE_LIMIT_MAX [au]. Type: double; Default: 1.00. HESS_UPDATE_LIMIT_SCALE¶. If HESS_UPDATE_LIMIT is true, changes to the Hessian from the update are limited to the larger of HESS_UPDATE_LIMIT_SCALE * (the previous value) and HESS_UPDATE_LIMIT_MAX [au]. Type: double; Default: 0.50. HESS_UPDATE_USE_LAST¶. Number of previous steps to use in Hessian update, 0 uses all. Type: integer; Default: 1. INTRAFRAG_HESS¶. Model Hessian to guess intrafragment force constants. Type: string; Possible Values: FISCHER, SCHLEGEL, SIMPLE, LINDH; Default: SCHLEGEL. Fragment/Internal Coordinate Control¶. ADD_AUXILIARY_BONDS¶. Do a",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/autodir_options_c/module__optking-1.html:3508,update,update,3508,psi4manual/4.0b3/autodir_options_c/module__optking-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodir_options_c/module__optking-1.html,6,['update'],['update']
Deployability,"rgy change. Type: conv double; Default: 1.0e-6. MAX_FORCE_G_CONVERGENCE¶. Convergence criterion for geometry optmization: maximum force (internal coordinates, atomic units). Type: conv double; Default: 3.0e-4. RMS_DISP_G_CONVERGENCE¶. Convergence criterion for geometry optmization: rms displacement (internal coordinates, atomic units). Type: conv double; Default: 1.2e-3. RMS_FORCE_G_CONVERGENCE¶. Convergence criterion for geometry optmization: rms force (internal coordinates, atomic units). Type: conv double; Default: 3.0e-4. Hessian Update¶. CART_HESS_READ¶. Do read Cartesian Hessian? Only for experts - use FULL_HESS_EVERY instead. Type: boolean; Default: false. FULL_HESS_EVERY¶. Frequency with which to compute the full Hessian in the course of a geometry optimization. 0 means to compute the initial Hessian only, 1 means recompute every step, and N means recompute every N steps. The default (-1) is to never compute the full Hessian. Type: integer; Default: -1. HESS_UPDATE¶. Hessian update scheme. Type: string; Possible Values: NONE, BFGS, MS, POWELL, BOFILL; Default: BFGS. HESS_UPDATE_LIMIT¶. Do limit the magnitude of changes caused by the Hessian update?. Type: boolean; Default: true. HESS_UPDATE_LIMIT_MAX¶. If HESS_UPDATE_LIMIT is true, changes to the Hessian from the update are limited to the larger of HESS_UPDATE_LIMIT_SCALE * (the previous value) and HESS_UPDATE_LIMIT_MAX [au]. Type: double; Default: 1.00. HESS_UPDATE_LIMIT_SCALE¶. If HESS_UPDATE_LIMIT is true, changes to the Hessian from the update are limited to the larger of HESS_UPDATE_LIMIT_SCALE * (the previous value) and HESS_UPDATE_LIMIT_MAX [au]. Type: double; Default: 0.50. HESS_UPDATE_USE_LAST¶. Number of previous steps to use in Hessian update, 0 uses all. Type: integer; Default: 1. INTRAFRAG_HESS¶. Model Hessian to guess intrafragment force constants. Type: string; Possible Values: FISCHER, SCHLEGEL, SIMPLE; Default: SCHLEGEL. Fragment/Internal Coordinate Control¶. ADD_AUXILIARY_BONDS¶. Do add bond",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/autodir_options_c/module__optking-1.html:3493,update,update,3493,psi4manual/4.0b2/autodir_options_c/module__optking-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/autodir_options_c/module__optking-1.html,2,['update'],['update']
Deployability,"rgy change. Type: conv double; Default: 1.0e-6. MAX_FORCE_G_CONVERGENCE¶. Convergence criterion for geometry optmization: maximum force (internal coordinates, atomic units). Type: conv double; Default: 3.0e-4. RMS_DISP_G_CONVERGENCE¶. Convergence criterion for geometry optmization: rms displacement (internal coordinates, atomic units). Type: conv double; Default: 1.2e-3. RMS_FORCE_G_CONVERGENCE¶. Convergence criterion for geometry optmization: rms force (internal coordinates, atomic units). Type: conv double; Default: 3.0e-4. Hessian Update¶. CART_HESS_READ¶. Do read Cartesian Hessian? Only for experts - use FULL_HESS_EVERY instead. Type: boolean; Default: false. FULL_HESS_EVERY¶. Frequency with which to compute the full Hessian in the course of a geometry optimization. 0 means to compute the initial Hessian only, 1 means recompute every step, and N means recompute every N steps. The default (-1) is to never compute the full Hessian. Type: integer; Default: -1. HESS_UPDATE¶. Hessian update scheme. Type: string; Possible Values: NONE, BFGS, MS, POWELL, BOFILL; Default: BFGS. HESS_UPDATE_LIMIT¶. Do limit the magnitude of changes caused by the Hessian update?. Type: boolean; Default: true. HESS_UPDATE_LIMIT_MAX¶. If HESS_UPDATE_LIMIT is true, changes to the Hessian from the update are limited to the larger of HESS_UPDATE_LIMIT_SCALE * (the previous value) and HESS_UPDATE_LIMIT_MAX [au]. Type: double; Default: 1.00. HESS_UPDATE_LIMIT_SCALE¶. If HESS_UPDATE_LIMIT is true, changes to the Hessian from the update are limited to the larger of HESS_UPDATE_LIMIT_SCALE * (the previous value) and HESS_UPDATE_LIMIT_MAX [au]. Type: double; Default: 0.50. HESS_UPDATE_USE_LAST¶. Number of previous steps to use in Hessian update, 0 uses all. Type: integer; Default: 2. INTRAFRAG_HESS¶. Model Hessian to guess intrafragment force constants. Type: string; Possible Values: FISCHER, SCHLEGEL, SIMPLE, LINDH, LINDH_SIMPLE; Default: SCHLEGEL. Fragment/Internal Coordinate Control¶. ADD_AUXILIAR",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/autodir_options_c/module__optking-1.html:5615,update,update,5615,psi4manual/1.3.2/autodir_options_c/module__optking-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/autodir_options_c/module__optking-1.html,13,['update'],['update']
Deployability,"rgy change. Type: conv double; Default: 1.0e-6. MAX_FORCE_G_CONVERGENCE¶. Convergence criterion for geometry optmization: maximum force (internal coordinates, atomic units). Type: conv double; Default: 3.0e-4. RMS_DISP_G_CONVERGENCE¶. Convergence criterion for geometry optmization: rms displacement (internal coordinates, atomic units). Type: conv double; Default: 1.2e-3. RMS_FORCE_G_CONVERGENCE¶. Convergence criterion for geometry optmization: rms force (internal coordinates, atomic units). Type: conv double; Default: 3.0e-4. Hessian Update¶. CART_HESS_READ¶. Do read Cartesian Hessian? Only for experts - use FULL_HESS_EVERY instead. Type: boolean; Default: false. FULL_HESS_EVERY¶. Frequency with which to compute the full Hessian in the course of a geometry optimization. 0 means to compute the initial Hessian only, 1 means recompute every step, and N means recompute every N steps. The default (-1) is to never compute the full Hessian. Type: integer; Default: -1. HESS_UPDATE¶. Hessian update scheme. Type: string; Possible Values: NONE, BFGS, MS, POWELL, BOFILL; Default: BFGS. HESS_UPDATE_LIMIT¶. Do limit the magnitude of changes caused by the Hessian update?. Type: boolean; Default: true. HESS_UPDATE_LIMIT_MAX¶. If HESS_UPDATE_LIMIT is true, changes to the Hessian from the update are limited to the larger of HESS_UPDATE_LIMIT_SCALE * (the previous value) and HESS_UPDATE_LIMIT_MAX [au]. Type: double; Default: 1.00. HESS_UPDATE_LIMIT_SCALE¶. If HESS_UPDATE_LIMIT is true, changes to the Hessian from the update are limited to the larger of HESS_UPDATE_LIMIT_SCALE * (the previous value) and HESS_UPDATE_LIMIT_MAX [au]. Type: double; Default: 0.50. HESS_UPDATE_USE_LAST¶. Number of previous steps to use in Hessian update, 0 uses all. Type: integer; Default: 4. INTRAFRAG_HESS¶. Model Hessian to guess intrafragment force constants. Type: string; Possible Values: FISCHER, SCHLEGEL, SIMPLE, LINDH, LINDH_SIMPLE; Default: SCHLEGEL. Fragment/Internal Coordinate Control¶. ADD_AUXILIAR",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/autodir_options_c/module__optking.html:6513,update,update,6513,psi4manual/1.7.x/autodir_options_c/module__optking.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/module__optking.html,4,['update'],['update']
Deployability,"rgy terms like MP2 correlation energy, MP3 correlation energy,; MP2 total energy, MP3 total energy, current correlation energy and current energy.; MP2 dipole X and the other components: Ground state dipole moments at MP(2) level.; number of iterations: The number of iterations the iterative solver required to converge.; number of excited states: The number of excited states, which were computed.; More variables are summarized in PSI Variables by Alpha. The following attribute is set on returned wavefunctions:. adcc_state: The adcc.ExcitedStates; object used by adcc to store the ADC(n) excitation energies and all precomputed data; in the format used by adcc.; Provides direct access to analysis and plotting capabilities from adcc.; For example adcc_state.plot_spectrum() plots a broadened excited states spectrum; in matplotlib. See the adcc calculations documentation; for details. Tips for convergence issues.; If you encounter convergence issues inside adcc, the following parameters; are worth tweaking:. MAX_NUM_VECS: Specifies the maximal number of subspace vectors; in the Jacobi-Davidson scheme before a restart occurs. The defaults are usually; good, but do not be shy to increase this value if you encounter convergence problems.; NUM_GUESSES: By default adcc uses twice as many guess vectors as; states to be computed. Sometimes increasing this value by a few vectors can be helpful.; If you encounter a convergence to zero eigenvalues, than decreasing this parameter might; solve the problems. table of contents. ADC: Ab Initio Polarization Propagator; Available ADC methods; Running ADC calculations; REFERENCE; R_CONVERGENCE; NUM_GUESSES; CUTOFF_AMPS_PRINT. Interface to adcc. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Theoretical Methods: SCF to FCI; ADC: Ab Initio Polarization Propagator. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/adc.html:11723,update,updated,11723,psi4manual/1.7.x/adc.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/adc.html,1,['update'],['updated']
Deployability,"rgy('hf/cc-pvdz'); psi4.compare_values(-2.85518839, psi4.core.get_variable('current energy'), 5, 'SCF E'); >>> python sample.py; SCF E.............................................................PASSED. How to run Psi4 as executable or Python module from conda installation¶; The configuration commands below are generic versions of the ones printed; to your screen as advice upon installing PSI4 into a Anaconda,; Miniconda, or Psi4conda distribution, condadist =; ana|mini|psi4conda. To see the message again after initial installation,; with the conda environment active, run .psi4-post-link.sh.; If which conda python psi4 points to your; condadist and echo $PSI_SCRATCH is set, skip ahead to the; “Run PSI4"" commands below. Otherwise, issue the following; commands directly in your terminal or place them into your “rc” file and; open a new terminal.; If you installed the Psi4conda distribution or installed the PSI4; conda package into the main environment of an Anaconda or Miniconda; distribution and added that to your PATH, as prompted, then; which psi4 likely yields condadist/bin/psi4 and the PATH; setting lines below are redundant.; If you installed into a conda environment p4env and performed; conda activate p4env, then which psi4 likely yields; condadist/envs/p4env/bin/psi4 and the PATH setting lines; below are redundant.; # csh, tcsh: add to shell or ~/.tcshrc file; unsetenv PSIDATADIR; setenv PATH {prefix}/bin:$PATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; unset PSIDATADIR; export PATH={prefix}/bin:$PATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. Run PSI4 as executable.; >>> cat sample.in; molecule {; He; }; energy('hf/cc-pvdz'); compare_values(-2.85518839, get_variable('current energy'), 5, 'SCF E'); >>> psi4 sample.in; SCF E.......................................................",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/build_planning-1.html:29334,install,installed,29334,psi4manual/1.4.0/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/build_planning-1.html,18,['install'],['installed']
Deployability,"rgy('hf/cc-pvdz'); psi4.compare_values(-2.85518839, psi4.core.get_variable('current energy'), 5, 'SCF E'); >>> python sample.py; SCF E.............................................................PASSED. How to run Psi4 as executable or Python module from conda installation¶; The configuration commands below are generic versions of the ones printed; to your screen as advice upon installing PSI4 into a Anaconda,; Miniconda, or Psi4conda distribution, condadist =; ana|mini|psi4conda. To see the message again after initial installation,; with the conda environment active, run .psi4-post-link.sh.; If which conda python psi4 points to your; condadist and echo $PSI_SCRATCH is set, skip ahead to the; “Run PSI4” commands below. Otherwise, issue the following; commands directly in your terminal or place them into your “rc” file and; open a new terminal.; If you installed the Psi4conda distribution or installed the PSI4; conda package into the main environment of an Anaconda or Miniconda; distribution and added that to your PATH, as prompted, then; which psi4 likely yields condadist/bin/psi4 and the PATH; setting lines below are redundant.; If you installed into a conda environment p4env and performed; conda activate p4env, then which psi4 likely yields; condadist/envs/p4env/bin/psi4 and the PATH setting lines; below are redundant.; # csh, tcsh: add to shell or ~/.tcshrc file; unsetenv PSIDATADIR; setenv PATH {prefix}/bin:$PATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; unset PSIDATADIR; export PATH={prefix}/bin:$PATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. Run PSI4 as executable.; 1; 2; 3; 4; 5; 6; 7; 8>>> cat sample.in; molecule {; He; }; energy('hf/cc-pvdz'); compare_values(-2.85518839, get_variable('current energy'), 5, 'SCF E'); >>> psi4 sample.in; SCF E.................................",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/build_planning-1.html:26362,install,installed,26362,psi4manual/1.3.2/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/build_planning-1.html,4,['install'],['installed']
Deployability,"rgy(self). current_total_energy(self). form_rotation_matrix(self, x, order). gradient(self). gradient_rms(self). rhf_energy(self, arg0). solve(self, arg0, arg1, arg2). update(self, arg0, arg1, arg2, arg3, arg4). zero_redundant(self, arg0). Methods Documentation. Ck(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix, arg1: psi4.core.Matrix) → psi4.core.Matrix¶. H_approx_diag(self: psi4.core.SOMCSCF) → psi4.core.Matrix¶. approx_solve(self: psi4.core.SOMCSCF) → psi4.core.Matrix¶. compute_AFock(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix) → psi4.core.Matrix¶. compute_Hk(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix) → psi4.core.Matrix¶. compute_Q(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix) → psi4.core.Matrix¶. compute_Qk(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix, arg1: psi4.core.Matrix, arg2: psi4.core.Matrix) → psi4.core.Matrix¶. current_AFock(self: psi4.core.SOMCSCF) → psi4.core.Matrix¶. current_IFock(self: psi4.core.SOMCSCF) → psi4.core.Matrix¶. current_ci_energy(self: psi4.core.SOMCSCF) → float¶. current_docc_energy(self: psi4.core.SOMCSCF) → float¶. current_total_energy(self: psi4.core.SOMCSCF) → float¶. form_rotation_matrix(self: psi4.core.SOMCSCF, x: psi4.core.Matrix, order: int = 2) → psi4.core.Matrix¶. gradient(self: psi4.core.SOMCSCF) → psi4.core.Matrix¶. gradient_rms(self: psi4.core.SOMCSCF) → float¶. rhf_energy(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix) → float¶. solve(self: psi4.core.SOMCSCF, arg0: int, arg1: float, arg2: bool) → psi4.core.Matrix¶. update(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix, arg1: psi4.core.Matrix, arg2: psi4.core.Matrix, arg3: psi4.core.Matrix, arg4: psi4.core.Matrix) → None¶. zero_redundant(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix) → None¶. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. PSI4 API: Linking C++ and Python; SOMCSCF. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/api/psi4.core.somcscf.html:1987,update,update,1987,psi4manual/1.4.0/api/psi4.core.somcscf.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/api/psi4.core.somcscf.html,2,['update'],"['update', 'updated']"
Deployability,"ri=integer — Specifies the maximum angular momentum; level for the primitive Gaussian basis functions when computing; electron repulsion integrals. This is set to h-type functions (AM=5); by default. --with-max-am-deriv1=integer — Specifies the maximum angular; momentum level for first derivatives of the primitive Gaussian; basis functions. This is set to g-type functions (AM=4) by default. --with-max-am-deriv2=integer — Specifies the maximum angular; momentum level for second derivatives of the primitive Gaussian; basis functions. This is set to f-type functions (AM=3) by default. --with-debug=yes/no — Turns on debugging flags (-g) if yes. This is; set to no by default. --with-opt=yes/no — Turns off compiler optimizations (-OX) if no.; This is set to yes by default. --with-strict=yes — Turns on strict compiler warnings. Python interpreter; Usually Python will be detected automatically. If this fails, or if; you have multiple versions installed and want to specify a particular; one, set the PYTHON environmental variable to the full path name; of the Python interpreter you want to use. This defaults to the; python in your path. For example, if you want to use; python2.6 located in /usr/bin set the environmental variable to be:; PYTHON=/usr/bin/python2.6. Note; If the variable PYTHON is set, the config program must be; present with a similar name. For instance, in the above example; the following must exist:; /usr/bin/python2.6-config. You either set the environmental variable before you call configure, or; tell configure about it:; ../configure PYTHON=/usr/bin/python2.6. Boost Libraries; PSI4 can use a user-provided boost C++ library, or, alternatively,; build the boost version 1.53.0 that comes bundled with the distribution.; By default, PSI4 will look in your include/library paths for; a compatible and complete boost installation (boost 1.46 or newer). A; boost installation in a nonstandard location can be specified by the; --with-boost=PATH and --with-boost-libdir",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/installfile.html:13846,install,installed,13846,psi4manual/4.0b5/installfile.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/installfile.html,1,['install'],['installed']
Deployability,"ribe to PSI4. Subscribe to our channel at https://anaconda.org/psi4 that contains the PSI4 package and several dependency packages. Make sure this shows up in your ~/.condarc file. >>> conda config --add channels http://conda.anaconda.org/psi4; # check; >>> cat ~/.condarc; channels:; - http://conda.anaconda.org/psi4; - defaults. Install PSI4. You can install into the main conda environment so that whenever commands conda or (Ana/Miniconda’s) python are available, then psi4 is available, too. >>> conda install psi4; # check; >>> which psi4; /path/to/miniconda/bin/psi4. Or, you can install into a conda environment that places PSI4 and its dependencies (including python) into a sandbox unaffected by any other software installed in Ana/Miniconda. This is recommended for developers to avoid interference between multiple versions (including github/conda versions) or to test python versions, etc.. In practical terms, installing into a conda environment means you can turn PSI4‘s availability on/off by switching conda environments without turning on/off the whole Ana/Miniconda installation. Below, PSI4 is installed into an environment called p4env. Then the environment is activated, removing the main Ana/Miniconda bin and adding envs/p4env/bin to PATH. The conda activate command (conda >=4.4; December 2017) works in all shells, but if you’re using old source activate that only works for bash; adjust as needed for csh/tcsh.; >>> conda create -n p4env psi4; >>> conda activate p4env; # check; >>> which psi4; /path/to/miniconda/envs/p4env/bin/psi4. Configure environment. Preceding steps have placed conda and psi4 in your PATH, either permanently through rc-files or temporarily in this terminal session. You can keep or undo these changes. For general psi4 use, you must enable the psi4 executable to be found through any of:. prepending to PATH in shell, ~/.bashrc, ~/.tcshrc, or PBS cmd file; activating the conda environment (p4env above) in shell, ~/.bashrc, or PBS cmd file; supply",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/conda-1.html:15340,install,installing,15340,psi4manual/1.4.0/conda-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html,18,['install'],"['installation', 'installing']"
Deployability,"ribution to the nuclear repulsion energy for the given molecule. computePotentialMatrix(self, basis); Compute the external potential matrix in the given basis set. getCharges(self); Get the vector of charge tuples. print_out(self); Print python print helper to the outfile. setName(self, arg0); Sets the name. Methods Documentation. addBasis(self: psi4.core.ExternalPotential, basis: psi4.core.BasisSet, coefs: psi4.core.Vector) → None¶; Add a basis of S auxiliary functions iwth Df coefficients. addCharge(self: psi4.core.ExternalPotential, Z: float, x: float, y: float, z: float) → None¶; Add a charge Z at (x,y,z). appendCharges(self: psi4.core.ExternalPotential, arg0: List[Tuple[float, float, float, float]]) → None¶; Append a vector of charge tuples to a current ExternalPotential. clear(self: psi4.core.ExternalPotential) → None¶; Reset the field to zero (eliminates all entries). computeExternExternInteraction(self: psi4.core.ExternalPotential, arg0: psi4.core.ExternalPotential, arg1: bool) → float¶; Compute the interaction between this potential and other external potential. computeNuclearEnergy(self: psi4.core.ExternalPotential, arg0: psi4.core.Molecule) → float¶; Compute the contribution to the nuclear repulsion energy for the given molecule. computePotentialMatrix(self: psi4.core.ExternalPotential, basis: psi4.core.BasisSet) → psi4.core.Matrix¶; Compute the external potential matrix in the given basis set. getCharges(self: psi4.core.ExternalPotential) → List[Tuple[float, float, float, float]]¶; Get the vector of charge tuples. print_out(self: psi4.core.ExternalPotential) → None¶; Print python print helper to the outfile. setName(self: psi4.core.ExternalPotential, arg0: str) → None¶; Sets the name. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. PSI4 API: Linking C++ and Python; ExternalPotential. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/api/psi4.core.externalpotential.html:2750,update,updated,2750,psi4manual/1.4.0/api/psi4.core.externalpotential.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/api/psi4.core.externalpotential.html,1,['update'],['updated']
Deployability,"ribution to the nuclear repulsion energy for the given molecule. computePotentialMatrix(self, basis); Compute the external potential matrix in the given basis set. getCharges(self); Get the vector of charge tuples. print_out(self); Print python print helper to the outfile. setName(self, arg0); Sets the name. Methods Documentation. addBasis(self: psi4.core.ExternalPotential, basis: psi4.core.BasisSet, coefs: psi4.core.Vector) → None¶; Add a basis of S auxiliary functions iwth Df coefficients. addCharge(self: psi4.core.ExternalPotential, Z: float, x: float, y: float, z: float) → None¶; Add a charge Z at (x,y,z). appendCharges(self: psi4.core.ExternalPotential, arg0: List[Tuple[float, float, float, float]]) → None¶; Append a vector of charge tuples to a current ExternalPotential. clear(self: psi4.core.ExternalPotential) → None¶; Reset the field to zero (eliminates all entries). computeExternExternInteraction(self: psi4.core.ExternalPotential, arg0: psi4.core.ExternalPotential, arg1: bool) → float¶; Compute the interaction between this potential and other external potential. computeNuclearEnergy(self: psi4.core.ExternalPotential, arg0: psi4.core.Molecule) → float¶; Compute the contribution to the nuclear repulsion energy for the given molecule. computePotentialMatrix(self: psi4.core.ExternalPotential, basis: psi4.core.BasisSet) → psi4.core.Matrix¶; Compute the external potential matrix in the given basis set. getCharges(self: psi4.core.ExternalPotential) → List[Tuple[float, float, float, float]]¶; Get the vector of charge tuples. print_out(self: psi4.core.ExternalPotential) → None¶; Print python print helper to the outfile. setName(self: psi4.core.ExternalPotential, arg0: str) → None¶; Sets the name. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. PSI4 API: Linking C++ and Python; ExternalPotential. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/api/psi4.core.externalpotential.html:2727,update,updated,2727,psi4manual/1.5.0/api/psi4.core.externalpotential.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/api/psi4.core.externalpotential.html,1,['update'],['updated']
Deployability,"ribution); Python interpreter and headers (2.7, 3.5, or 3.6) https://www.python.org/; CMake (3.3+) http://www.cmake.org/download/; NumPy (needed at runtime, not buildtime) http://www.numpy.org/; System utilities: GNU make, GNU install, POSIX threads (Pthreads) library. The following are also required for PSI4, but if not detected, the; build system will automatically download and build. Libint — [what is this?] [min version]; pybind11 — [what is this?] [min version]. What are the add-on capabilities for Psi4 and what are their dependencies¶; Each of the items below is an independent additional capability that can; be built with PSI4. Sub-items below are the respective additional; dependencies of the add-on. Select which, if any, you want, and examine; the links for appropriate enabling arguments to cmake. Note that many; are available pre-built from conda. PSI4 Testing; CTest http://www.cmake.org/download/; Perl (for some coupled-cluster CTest tests) http://perl.org; pytest (for installed testing) http://doc.pytest.org/en/latest/. PSI4 Documentation (available pre-built at http://www.psicode.org/psi4manual/master/index.html); Sphinx (1.4+) http://sphinx-doc.org; Perl (for some auto-documentation scripts) http://perl.org; nbsphinx (for converting Jupyter notebooks) http://nbsphinx.readthedocs.io/en/jupyter-theme/. CheMPS2 — [what is this?] [min version]; HDF5 https://support.hdfgroup.org/HDF5/; zlib http://www.zlib.net/. libefp — [what is this?] [min version]; erd — [what is this?] [min version]; Fortran Compiler. dkh — [what is this?] [min version]; Fortran Compiler. gdma — [what is this?] [min version]; Fortran Compiler. PCMSolver — [what is this?]; Fortran Compiler; zlib http://www.zlib.net/. simint — [what is this?] [min version]. Additionally, there are runtime-only capabilities:. cfour — [what is this?]; dftd3 — [what is this?]; gcp — [what is this?]; mrcc — [what is this?]. How to configure code to use high angular momentum basis sets¶; The Libint integral code",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/build_planning-1.html:4964,install,installed,4964,psi4manual/1.1.0/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/build_planning-1.html,2,['install'],['installed']
Deployability,"ric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cc33; CC3(UHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). dct-grad2; RHF-ODC-12 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. RHF-ODC-06 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. lccd-grad1; LCCD cc-pVDZ gradient for the H2O molecule. sapt-exch-ind-inf; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. dct2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. dct3; DC-06 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the AO Basis, using integrals stored on disk. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\) ). frac-sym; Fractional occupation with symmetry. scf-ecp2; Water-Argon complex with ECP present; check of RHF Hessian. cc8a; ROHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. pywrap-checkrun-convcrit; Advanced python example sets different sets of scf/post-scf conv crit and check to be sure computation has actually converged to the expected accuracy. dfomp3-grad2; DF-OMP3 cc-pVDZ gradients for the H2O+ cation. mbis-6; MBIS calculation on H2O. omp2-3; OMP2 cc-pVDZ energy for the NO radical. castup1; Test of SAD/Cast-up (mainly not dying due ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_corepsi4.html:39873,update,update,39873,psi4manual/1.9.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_corepsi4.html,2,['update'],['update']
Deployability,"rid -c psi4.; Then, hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect gau2grid and activate dependent code. To remove a conda installation, conda remove gau2grid. Source. If using PSI4 built from source and you want gau2grid built from; from source also, let the build system fetch and build it and activate; dependent code. How to configure gau2gridfor building Psi4¶; Role and Dependencies. Role — In PSI4, gau2grid is a library that provides essential; grid operations for DFT.; Downstream Dependencies — PSI4 \(\Leftarrow\) gau2grid; Upstream Dependencies — gau2grid \(\Leftarrow\) None. CMake Variables. CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For gau2grid, set to an installation directory containing include/gau2grid/gau2grid.h; gau2grid_DIR — CMake variable to specify where pre-built gau2grid can be found. Set to installation directory containing share/cmake/gau2grid/gau2gridConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_gau2grid — CMake variable to force internal build of gau2grid instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_gau2grid — CMake variable to force detecting pre-built gau2grid and not falling back on internal build. Examples. Build bundled. >>> cmake. Link against pre-built. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/gau2grid/root. >>> cmake -Dgau2grid_DIR=/path/to/gau2grid/configdir. Build bundled despite pre-built being detectable. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/unwanted/gau2grid/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_gau2grid=ON. table of contents. Interface to gau2grid by D. G. A. Smith; Installation; How to configure gau2gridfor building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.6;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to gau2grid by D. G. A. Smith. © Copyright 2022, The Psi4 Project.; Last updated on Thursday, 19 May 2022 08:57PM.; Created using Sphinx 4.5.0.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/gau2grid.html:2795,update,updated,2795,psi4manual/1.6.x/gau2grid.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/gau2grid.html,1,['update'],['updated']
Deployability,"rid functionals available in PSI4. Name; Description; GGA?; Meta?; X_LRC?; X_Hybrid?; C_LRC?; C_Hybrid?; C_SCS? SS/OS; Dispersion?; Dispersion Description. B2PLYP; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; —; —. B2PLYP-D; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; -D2; Grimme’s -D2 Dispersion Correction. B2PLYP-D3; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; -D3ZERO; Grimme’s -D3 (zero-damping) Dispersion Correction. B2PLYP-D3BJ; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; -D3BJ; Grimme’s -D3 (BJ-damping) Dispersion Correction. DSD-BLYP; DSD-BLYP Dispersion-corrected SCS Double Hybrid XC Functional; Y; —; —; 0.710000; —; 1.000000; 0.430000 / 0.460000; -D2; Grimme’s -D2 Dispersion Correction. DSD-PBEP86; DSD-PBEP86 Dispersion-corrected SCS Double Hybrid XC Functional (opt. for -D2); Y; —; —; 0.680000; —; 1.000000; 0.230000 / 0.510000; -D2; Grimme’s -D2 Dispersion Correction. DSD-PBEPBE; DSD-PBEPBE Dispersion-corrected SCS Double Hybrid XC Functional; Y; —; —; 0.660000; —; 1.000000; 0.120000 / 0.530000; -D2; Grimme’s -D2 Dispersion Correction. PBE0-2; PBE0-2 Double Hydrid Exchange-Correlation Functional; Y; —; —; 0.793701; —; 0.500000; —; —; —. wB97X-2(LP); Double Hybrid LRC B97 GGA XC Functional (Large Pople parametrization); Y; —; 0.300000; 0.678792; —; 1.000000; 0.581569 / 0.477992; —; —. wB97X-2(TQZ); Double Hybrid LRC B97 GGA XC Functional (TQZ parametrization); Y; —; 0.300000; 0.636158; —; 1.000000; 0.529319 / 0.447105; —; —. Previous topic; <no title>; Next topic; <no title>; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Appendices »; DFT Functionals ». © Copyright 2012, The Psi4 Project.; Last updated on Nov 02, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/autodoc_dft_dhybrid-1.html:2112,update,updated,2112,psi4manual/4.0b3/autodoc_dft_dhybrid-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_dft_dhybrid-1.html,2,['update'],['updated']
Deployability,"rid functionals available in PSI4. Name; Description; GGA?; Meta?; X_LRC?; X_Hybrid?; C_LRC?; C_Hybrid?; C_SCS? SS/OS; Dispersion?; Dispersion Description. B2PLYP; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; —; —. B2PLYP-D; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; -D2; Grimme’s -D2 Dispersion Correction. B2PLYP-D3; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; -D3ZERO; Grimme’s -D3 (zero-damping) Dispersion Correction. B2PLYP-D3BJ; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; -D3BJ; Grimme’s -D3 (BJ-damping) Dispersion Correction. DSD-BLYP; DSD-BLYP Dispersion-corrected SCS Double Hybrid XC Functional; Y; —; —; 0.710000; —; 1.000000; 0.430000 / 0.460000; -D2; Grimme’s -D2 Dispersion Correction. DSD-PBEP86; DSD-PBEP86 Dispersion-corrected SCS Double Hybrid XC Functional (opt. for -D2); Y; —; —; 0.680000; —; 1.000000; 0.230000 / 0.510000; -D2; Grimme’s -D2 Dispersion Correction. DSD-PBEPBE; DSD-PBEPBE Dispersion-corrected SCS Double Hybrid XC Functional; Y; —; —; 0.660000; —; 1.000000; 0.120000 / 0.530000; -D2; Grimme’s -D2 Dispersion Correction. PBE0-2; PBE0-2 Double Hydrid Exchange-Correlation Functional; Y; —; —; 0.793701; —; 0.500000; —; —; —. wB97X-2(LP); Double Hybrid LRC B97 GGA XC Functional (Large Pople parametrization); Y; —; 0.300000; 0.678792; —; 1.000000; 0.581569 / 0.477992; —; —. wB97X-2(TQZ); Double Hybrid LRC B97 GGA XC Functional (TQZ parametrization); Y; —; 0.300000; 0.636158; —; 1.000000; 0.529319 / 0.447105; —; —. Previous topic; <no title>; Next topic; <no title>; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; DFT Functionals ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 05, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/autodoc_dft_dhybrid-1.html:2112,update,updated,2112,psi4manual/4.0b4/autodoc_dft_dhybrid-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_dft_dhybrid-1.html,2,['update'],['updated']
Deployability,"rid functionals available in PSI4. Name; Description; GGA?; Meta?; X_LRC?; X_Hybrid?; C_LRC?; C_Hybrid?; C_SCS? SS/OS; Dispersion?; Dispersion Description. B2PLYP; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; —; —. B2PLYP-D; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; -D2; Grimme’s -D2 Dispersion Correction. B2PLYP-D3; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; -D3ZERO; Grimme’s -D3 (zero-damping) Dispersion Correction. B2PLYP-D3BJ; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; -D3BJ; Grimme’s -D3 (BJ-damping) Dispersion Correction. DSD-BLYP; DSD-BLYP Dispersion-corrected SCS Double Hybrid XC Functional; Y; —; —; 0.710000; —; 1.000000; 0.430000 / 0.460000; -D2; Grimme’s -D2 Dispersion Correction. DSD-PBEP86; DSD-PBEP86 Dispersion-corrected SCS Double Hybrid XC Functional (opt. for -D2); Y; —; —; 0.680000; —; 1.000000; 0.230000 / 0.510000; -D2; Grimme’s -D2 Dispersion Correction. DSD-PBEPBE; DSD-PBEPBE Dispersion-corrected SCS Double Hybrid XC Functional; Y; —; —; 0.660000; —; 1.000000; 0.120000 / 0.530000; -D2; Grimme’s -D2 Dispersion Correction. PBE0-2; PBE0-2 Double Hydrid Exchange-Correlation Functional; Y; —; —; 0.793701; —; 0.500000; —; —; —. wB97X-2(LP); Double Hybrid LRC B97 GGA XC Functional (Large Pople parametrization); Y; —; 0.300000; 0.678792; —; 1.000000; 0.581569 / 0.477992; —; —. wB97X-2(TQZ); Double Hybrid LRC B97 GGA XC Functional (TQZ parametrization); Y; —; 0.300000; 0.636158; —; 1.000000; 0.529319 / 0.447105; —; —. Previous topic; <no title>; Next topic; <no title>; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; DFT Functionals ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/autodoc_dft_dhybrid-1.html:2112,update,updated,2112,psi4manual/4.0b5/autodoc_dft_dhybrid-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodoc_dft_dhybrid-1.html,2,['update'],['updated']
Deployability,"right year¶. cd ~/path/to/psi4; Primary target is licenses. grep -rl ""(c) 2007-2017"" * | xargs sed -i '' ""s/(c) 2007-2017/(c) 2007-2018/g""; On Linux, drop the '' in above command; Need to do psi4/ and docs/ dirs. Also, license in these files. tests/runtest.py; README.md; tests/psitest.pl. Also, in content of https://github.com/psi4/psi4/blob/master/doc/sphinxman/source/conf.py.in#L118. Update samples¶. Run make sphinxman at least once by hand; Check in resulting psifiles.py and all the updated and new samples/ files and dirs; Make a lone PR and warn reviewers not to read it, since autogenerated. Collect new authors¶. Survey contributions to current Milestone. Add new contribs and PR lists to release notes GitHub issue; Figure out any new “Additional Contributors” authors since last release; Edit psi4/header.py accordingly, make PR; Get permission of new authors and their particulars for codemeta.json; Invite any contributors with at least 3 PRs to join GitHub Organization. Anticipate next release¶. Bump version in codemeta.json, https://github.com/psi4/psi4/blob/master/codemeta.json#L9; Add to branch list in azure-pipelines.yml, psi4/azure-pipelines.yml. Build Conda ecosystem stack¶; By “ecosystem stack”, mean packages that are upstream, downstream, required, and optional for a fully featured Psi4 build and which we can’t get from “defaults” or “conda-forge” channels. Main directions are in [cbcy](https://github.com/psi4/psi4meta/blob/master/conda-recipes/conda_build_config.yaml) and [poodle](https://github.com/psi4/psi4meta/blob/master/psinet-nightly/kitandkapoodle.py); A couple weeks before the first “rc” is planned, start going through L/LT in poodle, checking with upstream to see if new versions have been released. If good changes present, rebuild the packages, changing the version numbers in the respective recipes; When L/LT all built and passed, edit the individual package version numbers in cbcy and increment to a new ltrtver with updated version numbers and/",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/manage_release-1.html:2224,release,release,2224,psi4manual/1.4.0/manage_release-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/manage_release-1.html,4,['release'],['release']
Deployability,"rill, and Matthew L. Leininger; Section author: Daniel G. A. Smith and C. David Sherrill; Module: Keywords, PSI Variables, DETCI; As the cost of Full CI scales exponentially with respect to the number of; active orbitals it is often advantageous to neglect orbitals that do not; exhibit strong correlation. These orbitals are variationally optimized; simultaneously with the CI coefficients and known as Multi-Configurational; Self-Consistent Field (MCSCF). The most commonly used MCSCF procedure is the; complete-active-space self-consistent-field (CASSCF) approach [Roos:1980],; which includes all possible determinants (with the proper symmetry) that can be; formed by distributing a set of active electrons among a set of active; orbitals. The MCSCF module performs CASSCF optimization of molecular orbitals; via a two-step procedure in which the CI coefficients and orbitals are; optimized in an alternating manner. The program uses a fairly simple; approximate orbital Hessian [Chaban:1997:88] and a Newton-Raphson update,; accelerated by Pulay’s DIIS procedure [Pulay:1980]. We have also implemented; the RASSCF method [Malmqvist:1990:RASSCF], which is another kind of MCSCF; which is typically less complete (and less expensive) than CASSCF.; Inactive orbitals in the MCSCF may be specified by the; RESTRICTED_DOCC and RESTRICTED_UOCC keywords. These; orbitals will remain doubly-occupied or doubly-unoccupied, respectively, in the; MCSCF wavefunction. However, the form of these orbitals will be optimized in; the MCSCF procedure. It is also possible to literally freeze inactive orbitals; in their original (SCF) form using the FROZEN_DOCC and; FROZEN_UOCC keywords. This is not normally what one wishes to do in; an MCSCF computation (e.g., it complicates the computation of gradients), but; it can make the computations faster and is helpful in some circumstances where; unphysical mixing of inactive and active occupied orbitals might occur.; Presently, it is not possible to mix the use ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/mcscf-1.html:1328,update,update,1328,psi4manual/1.4.0/mcscf-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/mcscf-1.html,9,['update'],['update']
Deployability,"rimer. 221; PSIF_3B_SAPT_DIMER_AB; SAPT Three-Body Dimer AB. 222; PSIF_3B_SAPT_DIMER_AC; SAPT Three-Body Dimer AC. 223; PSIF_3B_SAPT_DIMER_BC; SAPT Three-Body Dimer BC. 224; PSIF_3B_SAPT_MONOMER_A; SAPT Three-Body Mon A. 225; PSIF_3B_SAPT_MONOMER_B; SAPT Three-Body Mon B. 226; PSIF_3B_SAPT_MONOMER_C; SAPT Three-Body Mon C. 227; PSIF_3B_SAPT_AA_DF_INTS;  . 228; PSIF_3B_SAPT_BB_DF_INTS;  . 229; PSIF_3B_SAPT_CC_DF_INTS;  . 230; PSIF_3B_SAPT_AMPS;  . 250; PSIF_DCC_IJAK; CEPA/CC (ij|ak). 251; PSIF_DCC_IJAK2; CEPA/CC (ij|ak). 252; PSIF_DCC_ABCI; CEPA/CC (ia|bc). 253; PSIF_DCC_ABCI2; CEPA/CC (ia|bc). 254; PSIF_DCC_ABCI3; CEPA/CC (ia|bc). 255; PSIF_DCC_ABCI4; CEPA/CC (ia|bc). 256; PSIF_DCC_ABCI5; CEPA/CC (ia|bc). 257; PSIF_DCC_ABCD1; CEPA/CC (ab|cd)+. 258; PSIF_DCC_ABCD2; CEPA/CC (ab|cd)-. 259; PSIF_DCC_IJAB; CEPA/CC (ij|ab). 260; PSIF_DCC_IAJB; CEPA/CC (ia|jb). 261; PSIF_DCC_IJKL; CEPA/CC (ij|kl). 262; PSIF_DCC_OVEC; CEPA/CC old vectors for diis. 263; PSIF_DCC_EVEC; CEPA/CC error vectors for diis. 264; PSIF_DCC_R2; CEPA/CC residual. 265; PSIF_DCC_TEMP; CEPA/CC temporary storage. 266; PSIF_DCC_T2; CEPA/CC t2 amplitudes. 267; PSIF_DCC_QSO; DFCC 3-index integrals. 270; PSIF_DCC_SORT_START; CEPA/CC integral sort starting file number. 271; PSIF_SAPT_CCD; SAPT2+ CCD Utility File. 272; PSIF_HESS; Hessian Utility File. 273; PSIF_OCC_DPD; OCC DPD. 274; PSIF_OCC_DENSITY; OCC Density. 275; PSIF_OCC_IABC; OCC out-of-core <IA|BC>. 276; PSIF_DFOCC_INTS; DFOCC Integrals. 277; PSIF_DFOCC_AMPS; DFOCC Amplitudes. 278; PSIF_DFOCC_DENS; DFOCC PDMs. 279; PSIF_DFOCC_IABC; DFOCC (IA|BC). 280; PSIF_DFOCC_ABIC; DFOCC <AB|IC>. 281; PSIF_DFOCC_MIABC; DFOCC M_iabc. 282; PSIF_DFOCC_TEMP; DFOCC temporary storage. 300; PSIF_SAD; A SAD file (File for SAD related quantities. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Appendices. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 July 2018 04:21AM.; Created using Sphinx 1.7.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/autodoc_psifiles-1.html:7176,update,updated,7176,psi4manual/1.2.1/autodoc_psifiles-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/autodoc_psifiles-1.html,2,['update'],['updated']
Deployability,"ring. clear(self); docstring. compute(self); docstring. set_Da_ao(self, Da[, symmetry]); docstring. set_Da_mo(self, arg0); docstring. set_Da_so(self, arg0); docstring. set_Db_ao(self, Db[, symmetry]); docstring. set_Db_mo(self, arg0); docstring. set_Db_so(self, arg0); docstring. set_title(self, arg0); docstring. Attributes Documentation. valid_methods = ['DIPOLE', 'QUADRUPOLE', 'MULLIKEN_CHARGES', 'LOWDIN_CHARGES', 'WIBERG_LOWDIN_INDICES', 'MAYER_INDICES', 'MBIS_CHARGES', 'MO_EXTENTS', 'GRID_FIELD', 'GRID_ESP', 'ESP_AT_NUCLEI', 'NO_OCCUPATIONS']¶. Methods Documentation. Exvals(self: psi4.core.OEProp) → List[float]¶; The x component of the field (in a.u.) at each grid point. Eyvals(self: psi4.core.OEProp) → List[float]¶; The y component of the field (in a.u.) at each grid point. Ezvals(self: psi4.core.OEProp) → List[float]¶; The z component of the field (in a.u.) at each grid point. Vvals(self: psi4.core.OEProp) → List[float]¶; The electrostatic potential (in a.u.) at each grid point. add(self: psi4.core.OEProp, arg0: str) → None¶; docstring. clear(self: psi4.core.OEProp) → None¶; docstring. compute(self: psi4.core.OEProp) → None¶; docstring. set_Da_ao(self: psi4.core.OEProp, Da: psi4.core.Matrix, symmetry: int = 0) → None¶; docstring. set_Da_mo(self: psi4.core.OEProp, arg0: psi4.core.Matrix) → None¶; docstring. set_Da_so(self: psi4.core.OEProp, arg0: psi4.core.Matrix) → None¶; docstring. set_Db_ao(self: psi4.core.OEProp, Db: psi4.core.Matrix, symmetry: int = 0) → None¶; docstring. set_Db_mo(self: psi4.core.OEProp, arg0: psi4.core.Matrix) → None¶; docstring. set_Db_so(self: psi4.core.OEProp, arg0: psi4.core.Matrix) → None¶; docstring. set_title(self: psi4.core.TaskListComputer, arg0: str) → None¶; docstring. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. PSI4 API: Linking C++ and Python; OEProp. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/api/psi4.core.oeprop.html:2488,update,updated,2488,psi4manual/1.5.0/api/psi4.core.oeprop.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/api/psi4.core.oeprop.html,1,['update'],['updated']
Deployability,"ring. shift(self, arg0, arg1); docstring. symnormalize(self, arg0, arg1); docstring. vdot(self, arg0, arg1, arg2); docstring. vector_multiply(self, arg0, arg1, arg2, ...); docstring. write(self, arg0, arg1); docstring. zero(self); docstring. Attributes Documentation. np¶; Returns a view of the CIVector’s buffer. Methods Documentation. axpy(self: psi4.core.CIVector, arg0: float, arg1: psi4.core.CIVector, arg2: int, arg3: int) → None¶; docstring. close_io_files(self: psi4.core.CIVector, arg0: int) → None¶; docstring. copy(self: psi4.core.CIVector, arg0: psi4.core.CIVector, arg1: int, arg2: int) → None¶; docstring. dcalc(self: psi4.core.CIVector, arg0: float, arg1: psi4.core.CIVector, arg2: int) → float¶; docstring. divide(self: psi4.core.CIVector, arg0: psi4.core.CIVector, arg1: float, arg2: int, arg3: int) → None¶; docstring. init_io_files(self: psi4.core.CIVector, arg0: bool) → None¶; docstring. norm(self: psi4.core.CIVector, arg0: int) → float¶; docstring. read(self: psi4.core.CIVector, arg0: int, arg1: int) → int¶; docstring. scale(self: psi4.core.CIVector, arg0: float, arg1: int) → None¶; docstring. set_nvec(self: psi4.core.CIVector, arg0: int) → None¶; docstring. shift(self: psi4.core.CIVector, arg0: float, arg1: int) → None¶; docstring. symnormalize(self: psi4.core.CIVector, arg0: float, arg1: int) → None¶; docstring. vdot(self: psi4.core.CIVector, arg0: psi4.core.CIVector, arg1: int, arg2: int) → float¶; docstring. vector_multiply(self: psi4.core.CIVector, arg0: float, arg1: psi4.core.CIVector, arg2: psi4.core.CIVector, arg3: int, arg4: int, arg5: int) → None¶; docstring. write(self: psi4.core.CIVector, arg0: int, arg1: int) → int¶; docstring. zero(self: psi4.core.CIVector) → None¶; docstring. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; CIVector. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/api/psi4.core.CIVector.html:2585,update,updated,2585,psi4manual/1.7.x/api/psi4.core.CIVector.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.CIVector.html,1,['update'],['updated']
Deployability,"ring; Possible Values: DIRECT, COMPUTE; Default: DIRECT. TPDM_ADD_REF (TRANSQT); TRANSQT — Do add reference contribution to TPDM?. Type: boolean; Default: false. TPDM_FILE (TRANSQT); TRANSQT — MO-basis two-particle density matrix file. Type: integer; Default: PSIF_MO_TPDM. TPDM_PRINT (DETCI); DETCI — Do print the two-particle density matrix? (Warning: large tensor). Type: boolean; Default: false. TRIPLES_ALGORITHM (PSIMRCC); PSIMRCC — The type of algorithm to use for (T) computations. Type: string; Possible Values: SPIN_ADAPTED, RESTRICTED, UNRESTRICTED; Default: RESTRICTED. TRIPLES_DIIS (PSIMRCC); PSIMRCC — Do use DIIS extrapolation to accelerate convergence for iterative triples excitations?. Type: boolean; Default: false. TURN_ON_ACTV (MCSCF); MCSCF —. Type: integer; Default: 0. UNITS (GLOBALS); GLOBALS — Units used in geometry specification. Type: string; Possible Values: BOHR, AU, A.U., ANGSTROMS, ANG, ANGSTROM; Default: ANGSTROMS. UPDATE (DETCI); DETCI — The update or correction vector formula, either DAVIDSON (default) or OLSEN. Type: string; Possible Values: DAVIDSON, OLSEN; Default: DAVIDSON. USE_SPIN_SYM (PSIMRCC); PSIMRCC — Do use symmetry to map equivalent determinants onto each other, for efficiency?. Type: boolean; Default: true. USE_SPIN_SYMMETRY (PSIMRCC); PSIMRCC (Expert) — Whether to use spin symmetry to map equivalent configurations onto each other, for efficiency. Type: boolean; Default: true. VAL_EX_LEVEL (DETCI); DETCI — In a RAS CI, this is the additional excitation level for allowing electrons out of RAS I into RAS II. The maximum number of holes in RAS I is therefore EX_LEVEL + VAL_EX_LEVEL. Type: integer; Default: 0. VECS_CC3 (CCEOM); CCEOM — Vectors stored in CC3 computations. Type: integer; Default: 10. VECS_PER_ROOT (CCEOM); CCEOM — Vectors stored per root. Type: integer; Default: 12. VECS_WRITE (DETCI); DETCI — Do store converged vector(s) at the end of the run? The vector(s) is(are) stored in a transparent format such that other program",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/autodoc_glossary_options_c-1.html:124190,update,update,124190,psi4manual/4.0b3/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_glossary_options_c-1.html,2,['update'],['update']
Deployability,"rite_eigenvalues(eigs, mo_idx); Prepare multi-line string with one-particle eigenvalues to be written to the FCIDUMP file. Classes¶. CSXError(msg); Error called when CSX generation fails. ConvergenceError(eqn_description, iteration); Error called for problems with converging an iterative method. Dftd3Error(msg). EmpiricalDispersion(*[, name_hint, ...]); Lightweight unification of empirical dispersion calculation modes. ManagedMethodError(circs). MissingMethodError(msg); Error called when method not available. OptimizationConvergenceError(...); Error called for problems with geometry optimizer. ParsingError(msg); Error called for problems parsing a text file. PastureRequiredError(option); Error called when the specified value of option requires some module(s) from Psi4Pasture, but could not be imported. PsiException; Error class for Psi. PsiImportError(msg); Error called for problems import python dependencies. QMMM(). SCFConvergenceError(eqn_description, ...); Error called for problems with SCF iterations. TDSCFConvergenceError(iteration, wfn, what, ...); Error called for problems with TDSCF iterations. Table([rows, row_label_width, ...]); Class defining a flexible Table object for storing data. TestComparisonError(msg); Error called when a test case fails due to a failed compare_values() call. UpgradeHelper(old, new, version, elaboration); Error called on previously valid syntax that now isn't and a simple syntax transition is possible. ValidationError(msg); Error called for problems with the input file. Class Inheritance Diagram¶. table of contents. PSI4 API: Linking C++ and Python; psi4.core Module; Functions; Classes; Class Inheritance Diagram. psi4.driver Package; Functions; Classes; Class Inheritance Diagram. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/psi4api-1.html:23425,update,updated,23425,psi4manual/1.5.0/psi4api-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/psi4api-1.html,2,['update'],['updated']
Deployability,"ritten to a separate file on disk. Type: boolean; Default: true. HEFF4 (PSIMRCC); PSIMRCC — Do include the fourth-order contributions to the effective Hamiltonian?. Type: boolean; Default: true. HEFF_PRINT (PSIMRCC); PSIMRCC — Do print the effective Hamiltonian?. Type: boolean; Default: false. HESS_TYPE (OMP2); OMP2 —. Type: string; Possible Values: NONE; Default: NONE. HESS_UPDATE (OPTKING); OPTKING — Hessian update scheme. Type: string; Possible Values: NONE, BFGS, MS, POWELL, BOFILL; Default: BFGS. HESS_UPDATE_LIMIT (OPTKING); OPTKING — Do limit the magnitude of changes caused by the Hessian update?. Type: boolean; Default: true. HESS_UPDATE_LIMIT_MAX (OPTKING); OPTKING — If HESS_UPDATE_LIMIT is true, changes to the Hessian from the update are limited to the larger of HESS_UPDATE_LIMIT_SCALE * (the previous value) and HESS_UPDATE_LIMIT_MAX [au]. Type: double; Default: 1.00. HESS_UPDATE_LIMIT_SCALE (OPTKING); OPTKING — If HESS_UPDATE_LIMIT is true, changes to the Hessian from the update are limited to the larger of HESS_UPDATE_LIMIT_SCALE * (the previous value) and HESS_UPDATE_LIMIT_MAX [au]. Type: double; Default: 0.50. HESS_UPDATE_USE_LAST (OPTKING); OPTKING — Number of previous steps to use in Hessian update, 0 uses all. Type: integer; Default: 1. ICORE (DETCI); DETCI — Specifies how to handle buffering of CI vectors. A value of 0 makes the program perform I/O one RAS subblock at a time; 1 uses entire CI vectors at a time; and 2 uses one irrep block at a time. Values of 0 or 2 cause some inefficiency in the I/O (requiring multiple reads of the C vector when constructing H in the iterative subspace if DIAG_METHOD = SEM), but require less core memory. Type: integer; Default: 1. IGNORE_TAU (DCFT); DCFT — Controls whether to ignore terms containing non-idempotent contribution to OPDM or not (for debug puproses only). For practical applications only the default must be used. Type: boolean; Default: false. INTCO_FIXED_EQ_FORCE_CONSTANT (OPTKING); OPTKING — In constra",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/autodoc_glossary_options_c-1.html:43725,update,update,43725,psi4manual/4.0b2/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/autodoc_glossary_options_c-1.html,2,['update'],['update']
Deployability,"rix. zero(self); Zero out the symmetry operation. Methods Documentation. E(self: psi4.core.SymmetryOperation) → None¶; Set equal to E. c2_x(self: psi4.core.SymmetryOperation) → None¶; Set equal to C2 about the x axis. c2_y(self: psi4.core.SymmetryOperation) → None¶; Set equal to C2 about the y axis. c2_z(self: psi4.core.SymmetryOperation) → None¶; Set equal to C2 about the z axis. i(self: psi4.core.SymmetryOperation) → None¶; Set equal to an inversion. matrix(self: psi4.core.SymmetryOperation) → List[List[float[3]][3]]¶; Return the matrix for the operation on Cartesians. operate(self: psi4.core.SymmetryOperation, arg0: psi4.core.SymmetryOperation) → psi4.core.SymmetryOperation¶; Performs the operation arg2 * arg1. rotate_n(self: psi4.core.SymmetryOperation, arg0: int) → None¶; Set equal to a clockwise rotation by 2pi/n. rotate_theta(self: psi4.core.SymmetryOperation, arg0: float) → None¶; Set equal to a clockwise rotation by theta. sigma_xy(self: psi4.core.SymmetryOperation) → None¶; Set equal to reflection in xy plane. sigma_xz(self: psi4.core.SymmetryOperation) → None¶; Set equal to reflection in xz plane. sigma_yz(self: psi4.core.SymmetryOperation) → None¶; Set equal to reflection in yz plane. trace(self: psi4.core.SymmetryOperation) → float¶; Returns trace of transformation matrix. transform(self: psi4.core.SymmetryOperation, arg0: psi4.core.SymmetryOperation) → psi4.core.SymmetryOperation¶; Performs the transform arg2 * arg1 * arg2~. transpose(self: psi4.core.SymmetryOperation) → None¶; Performs transposition of matrix operation. unit(self: psi4.core.SymmetryOperation) → None¶; Set equal to a unit matrix. zero(self: psi4.core.SymmetryOperation) → None¶; Zero out the symmetry operation. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; SymmetryOperation. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/api/psi4.core.SymmetryOperation.html:3102,update,updated,3102,psi4manual/1.7.x/api/psi4.core.SymmetryOperation.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.SymmetryOperation.html,1,['update'],['updated']
Deployability,"rl -o ""http://www.psicode.org/downloads/Psi4conda2-latest-MacOSX.sh"" --keepalive-time 2; >>> bash; >>> bash Psi4conda-latest-MacOSX.sh -b -p $HOME/psi4conda # agrees to license terms; >>> echo ""export PATH=$HOME/psi4conda/bin:\$PATH"" >> ~/.bash_profile; # log out, log back in so conda and psi4 in path; >>> psi4 ""$(dirname $(which psi4))""/../share/psi4/samples/sapt1/test.in # test installation. works b/c PSI_SCRATCH defaults to /tmp. That last command tested that psi4 is in your path, and it’s finding; all the libraries it needs. Now you need only specify a scratch directory; (see Scratch Files and Elementary Restart) by replacing the placeholder in the following:; >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!. Note; Above commands use bash for installation and set up your environment for bash at runtime. To use csh at runtime, follow the on-screen directions at the end of the installation or consult step 7 below. Conda Proficients¶; The Psi4conda Installer uses a conda constructor to package up Miniconda,; the psi4 conda packages, the psi4 add-on conda packages, dependencies; thereof (possibly from particular channels), and the psi4 channel; as a default. This is very convenient for novice users and robust; against differing channel settings in ~/.condarc. But proficient; conda users may prefer to treat psi4 as a normal conda package and; not have another large Miniconda installation (including the hefty MKL); lying around just for Psi4. Installing just the psi4 package; itself will get you Psi4, whatever add-ons require linking in to; Psi4 (e.g., CheMPS2 and PCMSolver), and the correct versions of; packages. However, just the psi4 package won’t get you add-ons that; don’t need linking (e.g., DFTD3 and v2rdm_casscf) or dependencies; from the “right” channels, which can be important for issues of fPIC; and libc++ vs. libstdc++. So conda cre",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/conda-1.html:3209,install,installation,3209,psi4manual/1.0.0/conda-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/conda-1.html,2,['install'],['installation']
Deployability,"rly the; “User API & Changelog headlines” section.; Save the draft release until tag is finalized.; “publish” release. This establishes the release date for the GitHub API.; Close the RN issue.; Close the milestone (should be 100% complete).; Open a milestone for the release that’s a year out. Publish GitHub postrelease¶. With an anticipated or newly minted tag, go to https://github.com/psi4/psi4/releases/new (or; “Draft a new release” button on GitHub site).; Release title takes the form: v1.8.2, 2023-10-03; Fill in frontmatter style and links from previous GitHub release.; Fill in RN bullets for changes cherry-picked or edited to the maintenance branch.; Save the draft release until tag is finalized.; “publish” release. This establishes the release date for the GitHub API. Publish psicode.org release¶. Be in local clone of repository https://github.com/psi4/psicode-hugo-website .; Execute https://api.github.com/repos/psi4/psi4/releases/latest or; https://api.github.com/repos/psi4/psi4/releases/tags/v1.8.2 (substituting tag) and note the id; field value.; Copy and edit a new file akin to content/posts/v182.md. Add it to the git index. e.g., v1.8.2 is used for Title and Release Notes.; e.g., 1.8.x is used for Documentation and Source.; e.g., v182 (edition string) is used for Image and Installers.; Use the id value in the shortcode call at the bottom near ghRN. Add a new release page to the psi4_release_fireworks.key Keynote presentation. Run the slide; transition and screenshot the fireworks. Open the PNG file in Preview and save as JPEG while; downsampling to ~400kB. Place the file at e.g., static/images/portfolio/fireworks_slide_v182.jpg.; Add it to the git index.; Edit data/portfolio.yml to add a new block for the release (order matters).; Include these changes in a PR. Check the generated preview if needed. Merge the PR yourself or ask; for it to be merged. Finalize release¶. Make new PR with; * edits to main README.md badges, python versions, etc.; Tweet about r",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/manage_release.html:23259,release,releases,23259,psi4manual/1.9.x/manage_release.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/manage_release.html,2,['release'],['releases']
Deployability,"rm], 'b', linewidth=1); plt.plot(xvals4, [Evpt2, Evpt2], 'g', linewidth=1); maxE = Eharm; maxR = np.max([xvals2,xvals4]); minR = np.min([xvals2,xvals4]). # Find ranges for the plot; dE = maxE - minE; minE -= 0.2*dE; maxE += 0.4*dE; dR = maxR - minR; minR -= 0.2*dR; maxR += 0.2*dR. # Generate the fitted PES; xpts = np.linspace(minR, maxR, 1000); xrel = xpts - re; xpows = xrel[:, None] ** range(5); fit2 = np.einsum('xd,d', xpows[:,0:3], dvals[0:3]); fit4 = np.einsum('xd,d', xpows, dvals). # Make / display the plot; plt.plot(xpts, fit2, 'b', linewidth=2.5, label='Harmonic (quadratic) fit'); plt.plot(xpts, fit4, 'g', linewidth=2.5, label='Anharmonic (quartic) fit'); plt.plot([re, re], [minE, maxE], 'b--', linewidth=0.5); plt.plot([r0, r0], [minE, maxE], 'g--', linewidth=0.5); plt.scatter(rvals, energies, c='Black', linewidth=3, label='Input Data'); plt.legend(). plt.xlabel('Bond length (Angstroms)'); plt.ylabel('Energy (Eh)'); plt.xlim(minR, maxR); plt.ylim(minE, maxE); if plot_fit == 'screen':; plt.show(); else:; plt.savefig(plot_fit); core.print_out(""\n\tPES fit saved to %s.\n\n"" % plot_fit). core.print_out(""\nre = %10.6f A check: %10.6f\n"" % (re, recheck)); core.print_out(""r0 = %10.6f A\n"" % r0); core.print_out(""we = %10.4f cm-1\n"" % we); core.print_out(""wexe = %10.4f cm-1\n"" % wexe); core.print_out(""nu = %10.4f cm-1\n"" % nu); core.print_out(""ZPVE(nu) = %10.4f cm-1\n"" % zpve_nu); core.print_out(""Be = %10.4f cm-1\n"" % B); core.print_out(""B0 = %10.4f cm-1\n"" % B0); core.print_out(""ae = %10.4f cm-1\n"" % ae); core.print_out(""De = %10.7f cm-1\n"" % de); results = {; ""re"" : re,; ""r0"" : r0,; ""we"" : we,; ""wexe"" : wexe,; ""nu"" : nu,; ""ZPVE(harmonic)"" : zpve_nu,; ""ZPVE(anharmonic)"" : zpve_nu,; ""Be"" : B,; ""B0"" : B0,; ""ae"" : ae,; ""De"" : de; }; return results. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .  · ; 1.2.1;  · . PSI4. Module code. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 July 2018 04:21AM.; Created using Sphinx 1.7.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/_modules/psi4/driver/diatomic.html:9536,update,updated,9536,psi4manual/1.2.1/_modules/psi4/driver/diatomic.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/_modules/psi4/driver/diatomic.html,1,['update'],['updated']
Deployability,"rmation of the molecule is accessible; molecule eneyne {; 0 1; C_ene 0.000000 -0.667578 -2.124659; C_ene 0.000000 0.667578 -2.124659; H_ene@2.014 0.923621 -1.232253 -2.126185; H_ene -0.923621 -1.232253 -2.126185; H_ene -0.923621 1.232253 -2.126185; Gh(H_ene) 0.923621 1.232253 -2.126185; --; 0 1; X 9.0 9.0 9.0; C_yne 0.000000 0.000000 2.900503; C_yne 0.000000 0.000000 1.693240; H_yne 0.000000 0.000000 0.627352; H_yne 0.000000 0.000000 3.963929; }. eneyne.update_geometry(). for iat in range(eneyne.natom()):; print """"""{:4} {:4} {:12} {:8.4f} {:12.6f} {:12.6f} {:12.6f} {:12.6f}"""""".format(; eneyne.Z(iat), # atomic number; eneyne.symbol(iat), # element symbol; eneyne.label(iat), # input element label; eneyne.charge(iat), # element charge; eneyne.x(iat), # x-coordinate; eneyne.y(iat), # y-coordinate; eneyne.z(iat), # z-coordinate; eneyne.mass(iat), # mass; ). # 6.0 C C_ENE 6.0000 -0.031900 -1.218981 -3.948079 12.000000; # 6.0 C C_ENE 6.0000 -0.031900 1.304098 -3.948079 12.000000; # 1.0 H H_ENE 1.0000 1.713491 -2.286062 -3.950962 2.014000; # 1.0 H H_ENE 1.0000 -1.777290 -2.286062 -3.950962 1.007825; # 1.0 H H_ENE 1.0000 -1.777290 2.371180 -3.950962 1.007825; # 0.0 H H_ENE 0.0000 1.713491 2.371180 -3.950962 1.007825; # 6.0 C C_YNE 6.0000 -0.031900 0.042559 5.548101 12.000000; # 6.0 C C_YNE 6.0000 -0.031900 0.042559 3.266705 12.000000; # 1.0 H H_YNE 1.0000 -0.031900 0.042559 1.252468 1.007825; # 1.0 H H_YNE 1.0000 -0.031900 0.042559 7.557685 1.007825. table of contents. Molecule and Geometry Specification; Coordinates; Molecule Keywords; Multiple Molecules; Ghost Atoms; Isotopic Substitution; PubChem Database; Symmetry; Non-Covalently Bonded Molecule Fragments; Advanced Python. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Psithon: Structuring an Input File; Molecule and Geometry Specification. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/psithonmol.html:21850,update,updated,21850,psi4manual/1.8.x/psithonmol.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/psithonmol.html,1,['update'],['updated']
Deployability,"rmation of the molecule is accessible; molecule eneyne {; 0 1; C_ene 0.000000 -0.667578 -2.124659; C_ene 0.000000 0.667578 -2.124659; H_ene@2.014 0.923621 -1.232253 -2.126185; H_ene -0.923621 -1.232253 -2.126185; H_ene -0.923621 1.232253 -2.126185; Gh(H_ene) 0.923621 1.232253 -2.126185; --; 0 1; X 9.0 9.0 9.0; C_yne 0.000000 0.000000 2.900503; C_yne 0.000000 0.000000 1.693240; H_yne 0.000000 0.000000 0.627352; H_yne 0.000000 0.000000 3.963929; }. eneyne.update_geometry(). for iat in range(eneyne.natom()):; print """"""{:4} {:4} {:12} {:8.4f} {:12.6f} {:12.6f} {:12.6f} {:12.6f}"""""".format(; eneyne.Z(iat), # atomic number; eneyne.symbol(iat), # element symbol; eneyne.label(iat), # input element label; eneyne.charge(iat), # element charge; eneyne.x(iat), # x-coordinate; eneyne.y(iat), # y-coordinate; eneyne.z(iat), # z-coordinate; eneyne.mass(iat), # mass; ). # 6.0 C C_ENE 6.0000 -0.031900 -1.218981 -3.948079 12.000000; # 6.0 C C_ENE 6.0000 -0.031900 1.304098 -3.948079 12.000000; # 1.0 H H_ENE 1.0000 1.713491 -2.286062 -3.950962 2.014000; # 1.0 H H_ENE 1.0000 -1.777290 -2.286062 -3.950962 1.007825; # 1.0 H H_ENE 1.0000 -1.777290 2.371180 -3.950962 1.007825; # 0.0 H H_ENE 0.0000 1.713491 2.371180 -3.950962 1.007825; # 6.0 C C_YNE 6.0000 -0.031900 0.042559 5.548101 12.000000; # 6.0 C C_YNE 6.0000 -0.031900 0.042559 3.266705 12.000000; # 1.0 H H_YNE 1.0000 -0.031900 0.042559 1.252468 1.007825; # 1.0 H H_YNE 1.0000 -0.031900 0.042559 7.557685 1.007825. table of contents. Molecule and Geometry Specification; Coordinates; Molecule Keywords; Multiple Molecules; Ghost Atoms; Isotopic Substitution; PubChem Database; Symmetry; Non-Covalently Bonded Molecule Fragments; Advanced Python. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.9.1;  · . PSI4. Psithon: Structuring an Input File; Molecule and Geometry Specification. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 08 February 2024 09:32PM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/psithonmol.html:21850,update,updated,21850,psi4manual/1.9.x/psithonmol.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/psithonmol.html,1,['update'],['updated']
Deployability,"rminal session. You can keep or undo these changes. For general psi4 use, you must enable the psi4 executable to be found through any of:. prepending to PATH in shell, ~/.bashrc, ~/.tcshrc, or PBS cmd file; activating the conda environment (p4env above) in shell, ~/.bashrc, or PBS cmd file; supplying full path to executable (shell or PBS cmd file). Similarly, the scratch directory (see Scratch Files and Elementary Restart) must be specified through:. defining PSI_SCRATCH in shell, ~/.bashrc, ~/.tcshrc, or PBS cmd file. Suitable values for these variables have been printed to screen during installation (see last codeblock in step 6). Useful Commands¶. Initially install PSI4 stable release. # equivalent; >>> conda install psi4 -c psi4; >>> conda install psi4 –channel psi4. Initially install PSI4 stable release with non-current python. 1>>> conda install psi4 python=3.6 -c psi4. Update to latest PSI4 stable release. 1>>> conda update psi4 -c psi4. Initially install stable release into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). 1; 2>>> conda create -y -n p4env psi4 -c psi4; >>> conda activate p4env. Install a particular PSI4 version. 1>>> conda install psi4=0.1.12 -c psi4. Uninstall PSI4 from current environment. 1>>> conda remove psi4. Initially install PSI4 nightly build. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4 –channel psi4/label/dev. Initially install PSI4 nightly build with non-current python. 1>>> conda install psi4 python=3.6 -c psi4/label/dev. Update to latest PSI4 nightly build. 1>>> conda update psi4 -c psi4/label/dev. Initially install nightly build into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). 1; 2>>> conda create -y -n p4env psi4 -c psi4/label/dev; >>> conda activate p4env. Install a particular PSI4 version. 1>>> conda install psi4=0.1.12 -c psi4/label/dev. Troubleshooting¶. I",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/conda-1.html:20933,install,install,20933,psi4manual/1.2.1/conda-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/conda-1.html,4,"['install', 'release']","['install', 'release']"
Deployability,"rms a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or str) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF and UHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) [manual]. Examples. >>> # [1] Frequency calculation for all modes through highest available derivatives; >>> frequency('ccsd'). >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> # printing lowest mode frequency to screen and Hessian to output; >>> E, wfn = frequencies('scf', dertype=1, irrep=4, return_wfn=True); >>> print wfn.frequencies().get(0, 0); >>> wfn.hessian().print_out(). >>> # [3] Frequency calculation at default conditions and Hessian reuse at STP; >>> E, wfn = freq('mp2', return_wfn=True); >>> set t 273.15; >>> set p 100000; >>> thermo(wfn, wfn.frequencies()). >>> # [4] Opt+Freq, skipping the gradient recalc at the start of the Hessian; >>> e, wfn = optimize('hf', return_wfn=True); >>> frequencies('hf', ref_gradient=wfn.gradient()). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.6;  · . PSI4. PSI4 API: Linking C++ and Python; freq. © Copyright 2022, The Psi4 Project.; Last updated on Thursday, 19 May 2022 08:57PM.; Created using Sphinx 4.5.0.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/api/psi4.driver.freq.html:3046,update,updated,3046,psi4manual/1.6.x/api/psi4.driver.freq.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/api/psi4.driver.freq.html,1,['update'],['updated']
Deployability,"rn ''. future_string = re.compile('^from __future__ import .*$', flags=re.MULTILINE); temp = re.sub(future_string, future_replace, temp). # imports; imports = '\n'.join(future_imports) + '\n'; imports += 'import psi4\n'; imports += 'from psi4 import *\n'; imports += 'from psi4.core import *\n'; imports += 'from psi4.driver.diatomic import anharmonicity\n'; imports += 'from psi4.driver.gaussian_n import *\n'; imports += 'from psi4.driver.frac import ip_fitting, frac_traverse\n'; imports += 'from psi4.driver.aliases import *\n'; imports += 'from psi4.driver.driver_cbs import *\n'; imports += 'from psi4.driver.wrapper_database import database, db, DB_RGT, DB_RXN\n'; imports += 'from psi4.driver.wrapper_autofrag import auto_fragments\n'; imports += 'psi4_io = core.IOManager.shared_object()\n'. # psirc (a baby PSIthon script that might live in ~/.psi4rc); psirc_file = os.path.expanduser('~') + os.path.sep + '.psi4rc'; if os.path.isfile(psirc_file):; fh = open(psirc_file); psirc = fh.read(); fh.close(); psirc = psirc.replace('psi4.IOManager', 'psi4.core.IOManager'); else:; psirc = ''. blank_mol = 'geometry(""""""\n'; blank_mol += '0 1\nH 0 0 0\nH 0.74 0 0\n'; blank_mol += '"""""",""blank_molecule_psi4_yo"")\n'. temp = imports + psirc + blank_mol + temp. # Move up the psi4.core namespace; for func in dir(core):; temp = temp.replace(""psi4."" + func, ""psi4.core."" + func). # Move pseudonamespace for physconst into proper namespace; from psi4.driver import constants; for pc in dir(constants):; if not pc.startswith('__'):; temp = temp.replace('psi_' + pc, 'psi4.constants.' + pc). return temp. if __name__ == ""__main__"":; result = process_input(""""""; molecule h2 {; H; H 1 R. R = .9; }. set basis 6-31G**. """"""). print(""Result\n==========================""); print(result). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .  · ; 1.3.2;  · . PSI4. Module code. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/inputparser.html:25572,update,updated,25572,psi4manual/1.3.2/_modules/psi4/driver/inputparser.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/inputparser.html,1,['update'],['updated']
Deployability,"rn the ornate name of the orbital basis,; e.g., 6-311++G** for 6-311ppgss. corresponding_dualfit(name)[source]¶; Function to return an appropriate DUAL helper basis for; the orbital basis name in coded or ornate form. None; is returned if no fitting basis is defined or if the; orbital basis is not found. corresponding_jkfit(name)[source]¶; Function to return an appropriate JK fitting basis for; the orbital basis name in coded or ornate form. None; is returned if no fitting basis is defined or if the; orbital basis is not found. corresponding_rifit(name)[source]¶; Function to return an appropriate RI fitting basis for; the orbital basis name in coded or ornate form. None; is returned if no fitting basis is defined or if the; orbital basis is not found. load_basis_families()[source]¶; Function to load into the array basisfamily_list; BasisFamily objects for all Psi4’s standard installed bases. print_basis_families()[source]¶; Function to print to the output file a formatted summary; of all the BasisFamily objects in basisfamily_list, by; default all Psi4’s standard installed bases. sanitize_basisname(name)[source]¶; Function to return name in coded form, stripped of ; characters that confuse filenames, characters into lowercase, ; + into p, * into s, and (, ), & , ; into _. input¶. bad_option_syntax(line)[source]¶; Function to report bad syntax to screen and output file. check_parentheses_and_brackets(input_string, exit_on_error)[source]¶; Function to check that all parenthesis and brackets; in input_string are paired. On that condition, exit_on_error =1,; otherwise 0. parse_multiline_array(input_list)[source]¶; Function to squash multiline arrays into a single line; until all parentheses and brackets are fully paired. process_basis_block(matchobj)[source]¶; Function to process match of basis name { ... }. process_basis_file(matchobj)[source]¶; Function to process match of basis file .... process_external_command(matchobj)[source]¶; Function to process match of extern",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/autodoc_driver-1.html:2114,install,installed,2114,psi4manual/4.0b3/autodoc_driver-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_driver-1.html,4,['install'],['installed']
Deployability,"rn. Parameters; ----------; largs; Specify which keywords to store value and has_changed state. Examples; --------; >>> optstash = OptionsState(; ['DF_BASIS_SCF'],; ['SCF_TYPE'],; ['SCF', 'REFERENCE']). >>> print(optstash). >>> optstash.restore(). """""". def __init__(self, *largs: List[List[str]]):; self.data = {}; for item in largs:; self.add_option(item). [docs] def add_option(self, item: List[str]):; """"""Store info for another keyword, `item`. Parameters; ----------; item; A one-membered list with a global keyword or a two-membered list; with a module keyword and module. """"""; if len(item) == 2:; key = (item[1], item[0]); elif len(item) == 1:; key = (item[0], ); else:; raise ValidationError(; 'Each argument to OptionsState should be an array, the first element of which is the module scope and the second element of which is the module name. Bad argument: %s'; % (item)). if key in self.data:; raise ValidationError(; 'Malformed options state, duplicate key adds of ""{}"". This should not happen, please raise a issue on github.com/psi4/psi4'.format(key)); else:; self.data[key] = OptionState(*key). def __str__(self):; text = ''; for key, item in self.data.items():; text += str(item); return text. [docs] def restore(self):; """"""Restore value and has_changed status of each keyword to saved condition.""""""; for key, item in self.data.items():; item.restore(). [docs]@contextmanager; def OptionsStateCM(osd) -> Iterator[None]:; """"""Return a context manager that will collect the state (value and changed; status) of a list of keywords `osd` that can initialize; :py:class:`OptionsState` on entry to the with-statement and restore the; collected state when exiting the with-statement. """"""; oso = OptionsState(osd); yield; oso.restore(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .  · ; 1.7;  · . PSI4. Module code; psi4.driver.p4util.optproc. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/p4util/optproc.html:5855,update,updated,5855,psi4manual/1.7.x/_modules/psi4/driver/p4util/optproc.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/p4util/optproc.html,1,['update'],['updated']
Deployability,"rn_wfn = kwargs.pop('return_wfn', False); core.clean_variables(); dertype = 2. # Prevent methods that do not have associated energies; if lowername in energy_only_methods:; raise ValidationError(""hessian('%s') does not have an associated hessian"" % name). optstash = p4util.OptionsState(; ['FINDIF', 'HESSIAN_WRITE'],; ['FINDIF', 'FD_PROJECT'],; ). # Allow specification of methods to arbitrary order; lowername, level = driver_util.parse_arbitrary_order(lowername); if level:; kwargs['level'] = level. dertype = _find_derivative_type('hessian', lowername, kwargs.pop('freq_dertype', kwargs.pop('dertype', None))). # Make sure the molecule the user provided is the active one; molecule = kwargs.pop('molecule', core.get_active_molecule()); molecule.update_geometry(). # S/R: Mode of operation- whether finite difference freq run in one job or files farmed out; freq_mode = kwargs.pop('mode', 'continuous').lower(); if freq_mode == 'continuous':; pass; elif freq_mode == 'sow':; if dertype == 2:; raise ValidationError(""""""Frequency execution mode 'sow' not valid for analytic Hessian calculation.""""""); elif freq_mode == 'reap':; freq_linkage = kwargs.get('linkage', None); if freq_linkage is None:; raise ValidationError(""""""Frequency execution mode 'reap' requires a linkage option.""""""); else:; raise ValidationError(""""""Frequency execution mode '%s' not valid."""""" % (freq_mode)). # Set method-dependent scf convergence criteria (test on procedures['energy'] since that's guaranteed); optstash_conv = driver_util._set_convergence_criterion('energy', lowername, 8, 10, 8, 10, 8). # Select certain irreps; irrep = kwargs.get('irrep', -1); if irrep == -1:; pass # do all irreps; else:; irrep = driver_util.parse_cotton_irreps(irrep, molecule.schoenflies_symbol()); irrep -= 1 # A1 irrep is externally 1, internally 0; if dertype == 2:; core.print_out(""""""hessian() switching to finite difference by gradients for partial Hessian calculation.\n""""""); dertype = 1. # At stationary point?; if 'ref_gradient' in ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/_modules/psi4/driver/driver.html:68853,continuous,continuous,68853,psi4manual/1.2.1/_modules/psi4/driver/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/_modules/psi4/driver/driver.html,1,['continuous'],['continuous']
Deployability,"rnal files (e.g., MOINTS and GAMLAM, default choice INTERNAL, =0) or on external files (EXTERNAL, =1). Type: string; Possible Values: INTERNAL, EXTERNAL; Default: INTERNAL. CFOUR_PROPS (CFOUR)¶CFOUR — Specifies whether and which molecular property is calculated. OFF (=0) means that no property is calculated, FIRST_ORDER (=1) requests computation of various one-electron first-order properties (e.g., dipole moment, quadrupole moment, electric field gradient, spin densities,etc.), SECOND_ORDER (=2, in the next release replaced by STAT_POL) computes static electric polarizabilities, DYNAMICAL (=7, in the next release replaced by DYN_POL) requests the calculation of frequency-dependent polarizabilities (note that here an additional input of the frequency is required), NMR (=5) requests the calculation of NMR chemical shifts/chemical shielding tensors (by default using GIAOs), J_FC requests the calculation of the Fermi-Contact contribution to indirect spin-spin coupling constants, J_SD the calculation of the corresponding spin-dipole contribution, and J_SO the calculation of the corresponding spin-orbit contribution to J; HYPERPOL (=22) invokes a calculation of static hyperpolarizabilities, DYN_HYP (=23) requests the calculation of frequency-dependent hyperpolarizabilities, SHG (=24) the calculation of hyperpolarizabilities related to the second-harmonic generation, OPT_REC (=25) the computation of hyperpolarizabilities related to optical rectification, VERDET (=26) the calculation of Verdet constants. Type: string; Possible Values: OFF, FIRST_ORDER, SECOND_ORDER, NMR, HYPERPOL, DYN_HYP, SHG, OPT_REC, VERDET; Default: OFF. CFOUR_QRHF_GENERAL (CFOUR)¶CFOUR — The presence of this keyword specifies that a QRHF based CC calculation, or alternatively, an SCF calculation that uses the CFOUR_QRHFGUES option, is to be performed. Type: array; Default: No Default. CFOUR_QRHF_ORBITAL (CFOUR)¶CFOUR — By default, in QRHF calculations, electrons are removed from the highest occupied orb",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:66356,release,release,66356,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html,18,['release'],['release']
Deployability,"rns; Section author: Lori A. Burns; Module: Keywords, PSI Variables, LIBEFP. PSI4 contains code to interface to the LIBEFP library developed; in L. Slipchenko’s group by I. Kaliman. LIBEFP; requires no additional licence,; downloads, or configuration. Since February 2017, libefp is not required to build; PSI4. Installation¶; Binary. libefp is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). If using the PSI4 binary, libefp has already been installed alongside. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; libefp can be obtained through conda install libefp -c psi4.; Then enable it as a feature with ENABLE_libefp,; hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect libefp and activate dependent code. Previous bullet had details. To build PSI4 from source and use; libefp from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove libefp. Source. If using PSI4 built from source and you want libefp built from; from source also,; enable it as a feature with ENABLE_libefp,; and let the build system fetch and build it and activate dependent code. EFP Fragments¶; LIBEFP comes with a couple dozen ready-to-use fragments (water, benzene,; common solvents, etc.) listed here; with source psi4/psi4/share/psi4/efpfrag. Any of these may be used directly in; a PSI4 input file as described here.; Creating new efp fragments requires the GAMESS quantum chemistry package.; Instructions on building new fragments are here.; Once your new fragment is ready, make it accessible to PSI4 by; including the directory in which the .efp file is located to the colon; separated environment variable PSIPATH. Fragments are searched; for first in the current directory, next in the paths of PSIPATH, and; finally in built-in library. If PSI4 is unable to find the; fragment, an error will be reported. Note; When constructing new ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/libefp-1.html:1266,install,installation,1266,psi4manual/1.2.1/libefp-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/libefp-1.html,4,['install'],['installation']
Deployability,"rocedures and have the following general structure. Prepare an input file, simply adding mode='sow' to the; argument list of an available Python function. Run this quick job to; produce input files for lengthier calculations.; According to the instructions in the output file of the above step,; run the generated input files in any order on any variety of computers; and architectures. This is the time-intensive portion of the; calculation.; The ‘sow’ stage also produces a master input file (with a; mode='reap' directive). When all the jobs in the above step are; completed, place their output files in the same location as the; master input, and run this last, quick job to collect the results. Sow/reap procedures are governed by the mode keyword, choices being; 'continuous', 'sow', and 'reap'. Only 'sow' is likely to; be used by the user, as 'continuous' is always the default, and; input files with 'reap' are autogenerated.; Embarrassingly parallel algorithm available at present for:. Database — database(); finite difference operation of Geometry Optimization — optimize() and gradient(); finite difference of energies of Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); finite difference of gradients of Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(). Caution; Some features are not yet implemented. Buy a developer a coffee. Local options (e.g., set scf e_convergence 9) will not get transmitted to the child jobs.; Array options (e.g., set states_per_irrep [2, 1]) will not get transmitted to the child jobs.; Function intercalls (e.g., db(opt())) are not tested with sow/reap procedures. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Psithon Functions: Invoking a Calculation; Embarrassing Parallelism. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/sowreap.html:2340,update,updated,2340,psi4manual/master/sowreap.html,https://psicode.org,https://psicode.org/psi4manual/master/sowreap.html,1,['update'],['updated']
Deployability,"rocess_input line, then translated back in the GEOS section; see; NBC10.py for an example. The first line for each xyz file should be the number of atoms in the system.; The second line for each xyz file can be blank (interpreted as no comment), anything (interpreted as a comment), or two integers and anything (interpreted as charge, multiplicity, and remainder as comment).; The third and subsequent lines have four fields: the element symbol and the three cartesian coordinates in angstroms. The atom lines should not contain any dummy atoms (what’s the use in cartesian form). For dimer systems, an algorithm is used to apportion the atoms into two fragments; thus the atoms need not be arranged with all fragmentA atoms before all fragmentB atoms. The algorithm will fail for very closely arranged fragments. For dimers, any charge and multiplicity from the second line will be applied to fragmentA (python); charge and multiplicity may need to be redistributed later in the editing step. Run script psi4/psi4/share/psi4/scripts/ixyz2database.py. Move into the directory where all your xyz files are located. Run the; script. It will ask a number of; questions about your intended database and generate a python file; named for your database. Uppercase is preferable for database names; (according to Sherrill lab convention). Note your choice for the route; variable for the next step. Edit file database.py. According to your responses in to questions in the ixyz2database.py script,; several bullets will be printed of edits you necessarily or optionally; should make. Copy your new database into psi4/psi4/share/psi4/databases.; Alternately, append the directory containing your new database into; PSIPATH. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Customization: Adding Simple Extensions; Creating a Database. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/quickadddatabase-1.html:4032,update,updated,4032,psi4manual/1.4.0/quickadddatabase-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/quickadddatabase-1.html,2,['update'],['updated']
Deployability,"rocess_input line, then translated back in the GEOS section; see; NBC10.py for an example. The first line for each xyz file should be the number of atoms in the system.; The second line for each xyz file can be blank (interpreted as no comment), anything (interpreted as a comment), or two integers and anything (interpreted as charge, multiplicity, and remainder as comment).; The third and subsequent lines have four fields: the element symbol and the three cartesian coordinates in angstroms. The atom lines should not contain any dummy atoms (what’s the use in cartesian form). For dimer systems, an algorithm is used to apportion the atoms into two fragments; thus the atoms need not be arranged with all fragmentA atoms before all fragmentB atoms. The algorithm will fail for very closely arranged fragments. For dimers, any charge and multiplicity from the second line will be applied to fragmentA (python); charge and multiplicity may need to be redistributed later in the editing step. Run script psi4/psi4/share/psi4/scripts/ixyz2database.py. Move into the directory where all your xyz files are located. Run the; script. It will ask a number of; questions about your intended database and generate a python file; named for your database. Uppercase is preferable for database names; (according to Sherrill lab convention). Note your choice for the route; variable for the next step. Edit file database.py. According to your responses in to questions in the ixyz2database.py script,; several bullets will be printed of edits you necessarily or optionally; should make. Copy your new database into psi4/psi4/share/psi4/databases.; Alternately, append the directory containing your new database into; PSIPATH. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Customization: Adding Simple Extensions; Creating a Database. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/quickadddatabase-1.html:4032,update,updated,4032,psi4manual/1.5.0/quickadddatabase-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/quickadddatabase-1.html,2,['update'],['updated']
Deployability,"rocessed); nat = len(molinit[""geom_unsettled""]). else:; processed = validate_and_fill_geometry(geom=geom, tooclose=tooclose, copy=copy); update_with_error(molinit, processed); nat = molinit[""geom""].shape[0] // 3. processed = validate_and_fill_nuclei(; nat,; elea=elea,; elez=elez,; elem=elem,; mass=mass,; real=real,; elbl=elbl,; speclabel=speclabel,; nonphysical=nonphysical,; mtol=mtol,; verbose=verbose,; ); update_with_error(molinit, processed). processed = validate_and_fill_fragments(; nat,; fragment_separators=fragment_separators,; fragment_charges=fragment_charges,; fragment_multiplicities=fragment_multiplicities,; ); update_with_error(molinit, processed). Z_available = molinit[""elez""] * molinit[""real""] * 1.0; processed = validate_and_fill_chgmult(; zeff=Z_available,; fragment_separators=molinit[""fragment_separators""],; molecular_charge=molecular_charge,; fragment_charges=molinit[""fragment_charges""],; molecular_multiplicity=molecular_multiplicity,; fragment_multiplicities=molinit[""fragment_multiplicities""],; zero_ghost_fragments=zero_ghost_fragments,; verbose=verbose,; ); del molinit[""fragment_charges""] # sometimes safe update is too picky about overwriting v_a_f_fragments values; del molinit[""fragment_multiplicities""]; update_with_error(molinit, processed). extern = domain == ""efp"". processed = validate_and_fill_frame(; extern=extern, fix_com=fix_com, fix_orientation=fix_orientation, fix_symmetry=fix_symmetry; ); update_with_error(molinit, processed). if verbose >= 2:; print(""RETURN FROM qcel.molparse.from_arrays(domain={})"".format(domain.upper())); pprint.pprint(molinit). if not np_out:; molinit = unnp(molinit). return molinit. def validate_and_fill_units(; name=None,; units=""Angstrom"",; input_units_to_au=None,; comment=None,; provenance=None,; connectivity=None,; always_return_iutau=False,; ):; molinit = {}. if name is not None:; molinit[""name""] = name. if comment is not None:; molinit[""comment""] = comment. def validate_provenance(dicary):; expected_prov_keys =",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/_modules/qcelemental/molparse/from_arrays.html:11605,update,update,11605,psi4manual/1.4.0/_modules/qcelemental/molparse/from_arrays.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/_modules/qcelemental/molparse/from_arrays.html,3,['update'],['update']
Deployability,"rofile (Mac) file; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. See also the more general scratch documentation. How do I retain specific Psi4 scratch files¶; You can set up a specific path for PSI4 scratch file and keep them; for later use through the psi4_io handler. How to use Psi4 within a PBS queue¶; You will usually need to set up a PBS job script that is setting all; necessary environment variables, making sure the scratch directories are; set up, and invokes the executable. An example PBS script; is provided in the manual, but make sure to also consult your own PBS; documentation for appropriate setup. How to update and rebuild Psi4¶; Obtain code updates as appropriate from Binary Installer,; Clone from GitHub Repository, or Fork from GitHub Repository. Move into; objdir and reissue make, whereupon CMake may reconfigure but; will only rebuild objects and libraries depending on changed files. It is; scarcely ever necessary for the user to reinvoke cmake to update; objdir. How to run a minute’s worth of tests¶; When you want to do a very minimal test of the build and have; CTest installed, the following command can be useful.; 1>>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through:; 1>>> make pytest. How to run a subset of tests¶; CTest allows flexibly partitioned running of the test suite. In; the examples below, testname are regex of test names,; and testlabel are regex of labels (e.g., cc, mints,; libefp defined [here, for example]. Run tests in parallel with -j flag. For maximum parallelism: ctest -j`getconf _NPROCESSORS_ONLN`; Run full test suite: ctest; Run about a third of the tests in 10–20 minutes, the so-called quicktests: ctest -L quick; Run the same subset of tests that TravisCI checks (not the full test suite): ctest -L quick; Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ctest -L smoke; Run tests ma",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/build_planning-1.html:45398,update,update,45398,psi4manual/1.2.1/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html,4,['update'],['update']
Deployability,"rofile (Mac) file; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. See also the more general scratch documentation. How do I retain specific Psi4 scratch files¶; You can set up a specific path for PSI4 scratch file and keep them; for later use through the psi4_io handler. How to use Psi4 within a PBS queue¶; You will usually need to set up a PBS job script that is setting all; necessary environment variables, making sure the scratch directories are; set up, and invokes the executable. An example PBS script; is provided in the manual, but make sure to also consult your own PBS; documentation for appropriate setup. How to update and rebuild Psi4¶; Obtain code updates as appropriate from Binary Installer,; Clone from GitHub Repository, or Fork from GitHub Repository. Move into; objdir and reissue make, whereupon CMake may reconfigure but; will only rebuild objects and libraries depending on changed files. It is; scarcely ever necessary for the user to reinvoke cmake to update; objdir. How to run a minute’s worth of tests¶; When you want to do a very minimal test of the build and have; CTest installed, the following command can be useful.; 1>>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through:; 1>>> make pytest. How to run a subset of tests¶; CTest allows flexibly partitioned running of the test suite. In; the examples below, testname are regex of test names,; and testlabel are regex of labels (e.g., cc, mints,; libefp). Run tests in parallel with -j flag. For maximum parallelism: ctest -j`getconf _NPROCESSORS_ONLN`; Run full test suite: ctest; Run about a third of the tests in 10–20 minutes, the so-called quicktests: ctest -L quick; Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ctest -L smoke; Run tests matching by name: ctest -R testname; Run tests excluding those by name: ctest -E testname; Run tests matching by label: ct",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/build_planning-1.html:39018,update,update,39018,psi4manual/1.1.0/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/build_planning-1.html,2,['update'],['update']
Deployability,"rol print level. If unspecified (None), value taken from; :term:`PRINT <PRINT (GLOBALS)>`. Status printing when verbose > 2. Examples; --------; >>> pv1 = dict(); >>> pv1['SAPT CCD DISP'] = {'func': lambda x: x[0] * x[1] + x[2] + x[3] + x[4],; 'args': ['SAPT EXCHSCAL', 'SAPT EXCH-DISP20 ENERGY', 'SAPT DISP2(CCD) ENERGY',; 'SAPT DISP22(S)(CCD) ENERGY', 'SAPT EST.DISP22(T)(CCD) ENERGY']}; >>> pv1['SAPT0 ELST ENERGY'] = {'func': sum, 'args': ['SAPT ELST10,R ENERGY']}; >>> expand_psivars(pv1). """"""; if verbose is None:; verbose = core.get_global_option('PRINT'). for pvar, action in pvdefs.items():; if verbose >= 2:; print(""""""building %s %s"""""" % (pvar, '.' * (50 - len(pvar))), end=''). psivars = core.scalar_variables(); data_rich_args = []. for pv in action['args']:; if isinstance(pv, str):; if pv in psivars:; data_rich_args.append(psivars[pv]); else:; if verbose >= 2:; print(""""""EMPTY, missing {}"""""".format(pv)); break; else:; data_rich_args.append(pv); else:; result = action['func'](data_rich_args); core.set_variable(pvar, result); if verbose >= 2:; print(""""""SUCCESS""""""). [docs]; def provenance_stamp(routine: str, module: str = None) -> Dict[str, str]:; """"""Prepare QCSchema Provenance with |PSIfour| credentials. Parameters; ----------; routine; Name of driver function generating the QCSchema.; module; Primary contributing |PSIfour| library, like ``ccenergy`` or ``dfmp2``. Returns; -------; provenance : Dict[str, str]; Dictionary satisfying QCSchema, with |PSIfour| credentials for creator; and version.; https://github.com/MolSSI/QCSchema/blob/master/qcschema/dev/definitions.py#L23-L41. """"""; prov = {'creator': 'Psi4', 'version': __version__, 'routine': routine}; if module:; prov[""module""] = module. return prov. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .  · ; 1.10a1.dev61;  · . PSI4. Module code; psi4.driver.p4util.procutil. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/_modules/psi4/driver/p4util/procutil.html:20410,update,updated,20410,psi4manual/master/_modules/psi4/driver/p4util/procutil.html,https://psicode.org,https://psicode.org/psi4manual/master/_modules/psi4/driver/p4util/procutil.html,1,['update'],['updated']
Deployability,"rom source also,; enable it as a feature with ENABLE_ecpint,; and let the build system fetch and build it and activate dependent code. How to configure LibECPInt for building Psi4¶; Role and Dependencies. Role — In PSI4, LibECPInt is a library that provides additional; quantum chemical capabilities (ECP integrals).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) LibECPInt; Upstream Dependencies — LibECPInt \(\Leftarrow\) None. CMake Variables. ENABLE_ecpint — CMake variable toggling whether Psi4 builds with LibECPInt; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For LibECPInt, set to an installation directory containing include/libecpint.hpp; ecpint_DIR — CMake variable to specify where pre-built LibECPInt can be found. Set to installation directory containing lib/cmake/ecpint/ecpint-config.cmake; CMAKE_DISABLE_FIND_PACKAGE_ecpint — CMake variable to force internal build of ecpint instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_ecpint — CMake variable to force detecting pre-built LibECPInt and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_ecpint=ON. Build without LibECPInt. >>> cmake. Link against pre-built. >>> cmake -DENABLE_ecpint=ON -DCMAKE_PREFIX_PATH=/path/to/ecpint/root. >>> cmake -DENABLE_ecpint=ON -Decpint_DIR=/path/to/ecpint/configdir. Build bundled despite pre-built being detectable. >>> cmake -DENABLE_ecpint=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/ecpint/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_ecpint=ON. table of contents. Interface to LibECPInt by R. Shaw; Installation; How to configure LibECPInt for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to LibECPInt by R. Shaw. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/ecpint.html:2852,update,updated,2852,psi4manual/master/ecpint.html,https://psicode.org,https://psicode.org/psi4manual/master/ecpint.html,1,['update'],['updated']
Deployability,ron pair approximation level of theory. CFOUR ERROR CODE¶; The non-zero return value from a Cfour execution. CI DIPOLE X¶. CI DIPOLE Y¶. CI DIPOLE Z¶; The three components of the dipole [Debye] for the requested; configuration interaction level of theory and root. CI QUADRUPOLE XX¶. CI QUADRUPOLE XY¶. CI QUADRUPOLE XZ¶. CI QUADRUPOLE YY¶. CI QUADRUPOLE YZ¶. CI QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the requested; configuration interaction level of theory and root. CI ROOT n -> ROOT m DIPOLE X¶. CI ROOT n -> ROOT m DIPOLE Y¶. CI ROOT n -> ROOT m DIPOLE Z¶; The three components of the transition dipole [Debye] between roots n; and m for the requested configuration interaction level of theory. CI ROOT n -> ROOT m QUADRUPOLE XX¶. CI ROOT n -> ROOT m QUADRUPOLE XY¶. CI ROOT n -> ROOT m QUADRUPOLE XZ¶. CI ROOT n -> ROOT m QUADRUPOLE YY¶. CI ROOT n -> ROOT m QUADRUPOLE YZ¶. CI ROOT n -> ROOT m QUADRUPOLE ZZ¶; The three components of the transition quadrupole [Debye Ang] between; roots n and m for the requested configuration interaction level of; theory. CI ROOT n DIPOLE X¶. CI ROOT n DIPOLE Y¶. CI ROOT n DIPOLE Z¶; The three components of the dipole [Debye] for the requested; configuration interaction level of theory and root n. CI ROOT n QUADRUPOLE XX¶. CI ROOT n QUADRUPOLE XY¶. CI ROOT n QUADRUPOLE XZ¶. CI ROOT n QUADRUPOLE YY¶. CI ROOT n QUADRUPOLE YZ¶. CI ROOT n QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the requested; configuration interaction level of theory and root n. CI ROOT n TOTAL ENERGY¶. CI ROOT n CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested configuration interaction level of theory and root; n (numbering starts at 0). CI STATE-AVERAGED TOTAL ENERGY¶. CI STATE-AVERAGED CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for state-averaged CI/CASSCF levels of theory. CI TOTAL ENERGY¶. CI CORRELATION ENERGY,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/glossary_psivariables-1.html:7548,configurat,configuration,7548,psi4manual/1.1.0/glossary_psivariables-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/glossary_psivariables-1.html,6,['configurat'],['configuration']
Deployability,ron pair approximation level of theory. CFOUR ERROR CODE¶; The non-zero return value from a Cfour execution. CI DIPOLE X¶. CI DIPOLE Y¶. CI DIPOLE Z¶; The three components of the dipole [Debye] for the requested; configuration interaction level of theory and root. CI QUADRUPOLE XX¶. CI QUADRUPOLE XY¶. CI QUADRUPOLE XZ¶. CI QUADRUPOLE YY¶. CI QUADRUPOLE YZ¶. CI QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the requested; configuration interaction level of theory and root. CI ROOT n -> ROOT m DIPOLE X¶. CI ROOT n -> ROOT m DIPOLE Y¶. CI ROOT n -> ROOT m DIPOLE Z¶; The three components of the transition dipole [Debye] between roots n; and m for the requested configuration interaction level of theory. CI ROOT n -> ROOT m QUADRUPOLE XX¶. CI ROOT n -> ROOT m QUADRUPOLE XY¶. CI ROOT n -> ROOT m QUADRUPOLE XZ¶. CI ROOT n -> ROOT m QUADRUPOLE YY¶. CI ROOT n -> ROOT m QUADRUPOLE YZ¶. CI ROOT n -> ROOT m QUADRUPOLE ZZ¶; The three components of the transition quadrupole [Debye Ang] between; roots n and m for the requested configuration interaction level of; theory. CI ROOT n DIPOLE X¶. CI ROOT n DIPOLE Y¶. CI ROOT n DIPOLE Z¶; The three components of the dipole [Debye] for the requested; configuration interaction level of theory and root n. CI ROOT n QUADRUPOLE XX¶. CI ROOT n QUADRUPOLE XY¶. CI ROOT n QUADRUPOLE XZ¶. CI ROOT n QUADRUPOLE YY¶. CI ROOT n QUADRUPOLE YZ¶. CI ROOT n QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the requested; configuration interaction level of theory and root n. CI ROOT n TOTAL ENERGY¶. CI ROOT n CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested configuration interaction level of theory and root; n (numbering starts at 1). CI STATE-AVERAGED TOTAL ENERGY¶. CI STATE-AVERAGED CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for state-averaged CI/CASSCF levels of theory. CI TOTAL ENERGY¶. CI CORRELATION ENERGY,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/glossary_psivariables-1.html:7040,configurat,configuration,7040,psi4manual/1.0.0/glossary_psivariables-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/glossary_psivariables-1.html,2,['configurat'],['configuration']
Deployability,"ron properties computed for dimer and one monomer. cc12; Single point energies of multiple excited states with EOM-CCSD. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. dfccsd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. cc7; Tests CCENERGY’s CCSD gradient in the presence of a dipole field. cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. sapt0-d; Tests SAPT0-D corrections, with a variety of damping functions/parameters. omp2-1; OMP2 cc-pVDZ energy for the H2O molecule. tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. opt-multi-frozen-dimer-c2h; Frozen-fragment opt of C2h methane dimer with user-combined reference points. dct1; DC-06, DC-12, ODC-06 and ODC-12 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\) ). x2c3; Test of SFX2C-1e on Water uncontracted cc-pVDZ The reference numbers are from Lan Cheng’s implementation in Cfour. mp2-h; check that methods can act on single atom. sapt3; SAPT2+3(CCD) aug-cc-pVDZ+midbond computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. fci-dipole; 6-31G H2O Test FCI Energy Point. dfomp2p5-1; DF-OMP2.5 cc-pVDZ energy for the H2O molecule. sapt-dft-api; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input. Various gradients for a strained helium dimer and water molecule. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). o",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:18440,update,update,18440,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,4,['update'],['update']
Deployability,"ronment (p4env above) in shell, ~/.bashrc, or PBS cmd file; supplying full path to executable (shell or PBS cmd file). Similarly, the scratch directory (see Scratch Files and Elementary Restart) must be specified through:. defining PSI_SCRATCH in shell, ~/.bashrc, ~/.tcshrc, or PBS cmd file. Suitable values for these variables have been printed to screen during installation (see last codeblock in step 6). Useful Commands¶. Initially install PSI4 stable release. # equivalent; >>> conda install psi4 -c psi4; >>> conda install psi4 –channel psi4. Initially install PSI4 stable release with non-current python. 1>>> conda install psi4 python=3.6 -c psi4. Update to latest PSI4 stable release. 1>>> conda update psi4 -c psi4. Initially install stable release into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). 1; 2>>> conda create -y -n p4env psi4 -c psi4; >>> conda activate p4env. Install a particular PSI4 version. 1>>> conda install psi4=0.1.12 -c psi4. Uninstall PSI4 from current environment. 1>>> conda remove psi4. Initially install PSI4 nightly build. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4 –channel psi4/label/dev. Initially install PSI4 nightly build with non-current python. 1>>> conda install psi4 python=3.6 -c psi4/label/dev. Update to latest PSI4 nightly build. 1>>> conda update psi4 -c psi4/label/dev. Initially install nightly build into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). 1; 2>>> conda create -y -n p4env psi4 -c psi4/label/dev; >>> conda activate p4env. Install a particular PSI4 version. 1>>> conda install psi4=0.1.12 -c psi4/label/dev. Troubleshooting¶. If the target computer doesn’t have libc >= 2.7 (released c.2007; for reference, 2.10 is newer than 2.7; unlike most libraries, libc generally not available in multiple versions on a computer), the PSI4 conda package won’t work.; 1; ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/conda-1.html:21195,install,install,21195,psi4manual/1.2.1/conda-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/conda-1.html,2,['install'],['install']
Deployability,"rough sextuples. ccsd(t); CC through doubles with perturbative triples [details]. ccsdt(q); CC through triples with perturbative quadruples. ccsdtq(p); CC through quadruples with pertubative quintuples. ccsdtqp(h); CC through quintuples with pertubative sextuples. ccsd(t)_l; CC through doubles with asymmetric perturbative triples [details]. ccsdt(q)_l; CC through triples with asymmetric perturbative quadruples. ccsdtq(p)_l; CC through quadruples with asymmetric perturbative quintuples. ccsdtqp(h)_l; CC through quintuples with asymmetric perturbative sextuples. ccsdt-1a; CC through doubles with iterative triples (cheapest terms). ccsdtq-1a; CC through triples with iterative quadruples (cheapest terms). ccsdtqp-1a; CC through quadruples with iterative quintuples (cheapest terms). ccsdtqph-1a; CC through quintuples with iterative sextuples (cheapest terms). ccsdt-1b; CC through doubles with iterative triples (cheaper terms). ccsdtq-1b; CC through triples with iterative quadruples (cheaper terms). ccsdtqp-1b; CC through quadruples with iterative quintuples (cheaper terms). ccsdtqph-1b; CC through quintuples with iterative sextuples (cheaper terms). cc2; approximate CC through doubles [details]. cc3; approximate CC through triples [details]. cc4; approximate CC through quadruples. cc5; approximate CC through quintuples. cc6; approximate CC through sextuples. ccsdt-3; CC through doubles with iterative triples (all but the most expensive terms). ccsdtq-3; CC through triples with iterative quadruples (all but the most expensive terms). ccsdtqp-3; CC through quadruples with iterative quintuples (all but the most expensive terms). ccsdtqph-3; CC through quintuples with iterative sextuples (all but the most expensive terms). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Introduction; <no title>. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/mrcc_table_energy.html:2243,update,updated,2243,psi4manual/1.8.x/mrcc_table_energy.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/mrcc_table_energy.html,1,['update'],['updated']
Deployability,"rough sextuples. ccsd(t); CC through doubles with perturbative triples [details]. ccsdt(q); CC through triples with perturbative quadruples. ccsdtq(p); CC through quadruples with pertubative quintuples. ccsdtqp(h); CC through quintuples with pertubative sextuples. ccsd(t)_l; CC through doubles with asymmetric perturbative triples [details]. ccsdt(q)_l; CC through triples with asymmetric perturbative quadruples. ccsdtq(p)_l; CC through quadruples with asymmetric perturbative quintuples. ccsdtqp(h)_l; CC through quintuples with asymmetric perturbative sextuples. ccsdt-1a; CC through doubles with iterative triples (cheapest terms). ccsdtq-1a; CC through triples with iterative quadruples (cheapest terms). ccsdtqp-1a; CC through quadruples with iterative quintuples (cheapest terms). ccsdtqph-1a; CC through quintuples with iterative sextuples (cheapest terms). ccsdt-1b; CC through doubles with iterative triples (cheaper terms). ccsdtq-1b; CC through triples with iterative quadruples (cheaper terms). ccsdtqp-1b; CC through quadruples with iterative quintuples (cheaper terms). ccsdtqph-1b; CC through quintuples with iterative sextuples (cheaper terms). cc2; approximate CC through doubles [details]. cc3; approximate CC through triples [details]. cc4; approximate CC through quadruples. cc5; approximate CC through quintuples. cc6; approximate CC through sextuples. ccsdt-3; CC through doubles with iterative triples (all but the most expensive terms). ccsdtq-3; CC through triples with iterative quadruples (all but the most expensive terms). ccsdtqp-3; CC through quadruples with iterative quintuples (all but the most expensive terms). ccsdtqph-3; CC through quintuples with iterative sextuples (all but the most expensive terms). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.9.1;  · . PSI4. Introduction; <no title>. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 08 February 2024 09:32PM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/mrcc_table_energy.html:2243,update,updated,2243,psi4manual/1.9.x/mrcc_table_energy.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/mrcc_table_energy.html,1,['update'],['updated']
Deployability,"rough triples with iterative quadruples (cheapest terms). mrccsdtqp-1a; CC through quadruples with iterative quintuples (cheapest terms). mrccsdtqph-1a; CC through quintuples with iterative sextuples (cheapest terms). mrccsdt-1b; CC through doubles with iterative triples (cheaper terms). mrccsdtq-1b; CC through triples with iterative quadruples (cheaper terms). mrccsdtqp-1b; CC through quadruples with iterative quintuples (cheaper terms). mrccsdtqph-1b; CC through quintuples with iterative sextuples (cheaper terms). mrcc2; approximate CC through doubles. mrcc3; approximate CC through triples. mrcc4; approximate CC through quadruples. mrcc5; approximate CC through quintuples. mrcc6; approximate CC through sextuples. mrccsdt-3; CC through doubles with iterative triples (all but the most expensive terms). mrccsdtq-3; CC through triples with iterative quadruples (all but the most expensive terms). mrccsdtqp-3; CC through quadruples with iterative quintuples (all but the most expensive terms). mrccsdtqph-3; CC through quintuples with iterative sextuples (all but the most expensive terms). Frozen-core approximation is also supported in the MRCC interface.; To optimize CH4 with CCSDT freezing the 1s on carbon, run:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14molecule H2O {; O; H 1 r; H 1 r 2 104.5. r = 1.0; }. set {; basis cc-pVDZ; freeze_core true; }. optimize('mrccsdt'). Interface Details¶. MRCC methods¶. MRCC_METHOD; Method; Description. 1; CC;  . 2; CC(n-1)[n];  . 3; CC(n-1)(n); (CC(n-1)[n] energy is also calculated). 4; CC(n-1)(n)_L; (CC(n-1)[n] and CC(n-1)(n) energies are also calculated). 5; CC(n)-1a;  . 6; CC(n)-1b;  . 7; CCn;  . 8; CC(n)-3;  . table of contents. Interface to MRCC by M. Kállay; Installation; Running MRCC; Interface Details. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/mrcc-1.html:4677,update,updated,4677,psi4manual/1.1.0/mrcc-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/mrcc-1.html,2,['update'],['updated']
Deployability,"rovenance with PSI4 credentials. sanitize_method(name); Replace characters in method name so that suitable for function name or Sphinx table anchor (both as-is) or HTML table link (replace underscore in returned string by dash). set_memory(inputval[, execute, quiet]); Reset the total memory allocation. set_module_options(module, options_dict); Sets Psi4 module options from a module specification and input dictionary. set_options(options_dict[, verbose]); Sets Psi4 options from an input dictionary. spectrum(*, poles, residues[, kind, ...]); One-photon absorption (OPA) or electronic circular dichroism (ECD) spectra with phenomenological line broadening. state_to_atomicinput(*, driver, method[, ...]); Form a QCSchema for job input from the current state of PSI4 settings. temp_circular_import_blocker(). Classes¶. DIIS([max_vec, removal_policy]); An object to assist in the DIIS extrpolation procedure. Gaussian(domain, gamma); Gaussian function on domain, centered at x_0 with broadening gamma. InPsight(molecule); POV-Ray visualization. Lineshape(domain, gamma); Lineshape ABC. Lorentzian(domain, gamma); Lorentzian function on domain, centered at x_0 with broadening gamma. OptionState(option[, module]); Store the state (value and changed status) of a single option. OptionsState(*largs); Store multiple OptionState() objects. SolverEngine(); Abstract Base Class defining the API for a matrix-vector product object required by solvers. Class Inheritance Diagram¶. table of contents. PSI4 API: Linking C++ and Python; psi4.core Module; Functions; Classes; Class Inheritance Diagram. psi4.driver Package; Functions; Classes; Class Inheritance Diagram. psi4.driver.p4util Package; Functions; Classes; Class Inheritance Diagram. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/psi4api.html:29425,update,updated,29425,psi4manual/1.8.x/psi4api.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/psi4api.html,1,['update'],['updated']
Deployability,"rray; Default: No Default. CUBIC_GRID_SPACING¶. CubicScalarGrid grid spacing in bohr [D_X, D_Y, D_Z]. Defaults to 0.2 bohr each. Type: array; Default: No Default. CUBIC_GRID_OVERAGE¶. CubicScalarGrid spatial extent in bohr [O_X, O_Y, O_Z]. Defaults to 4.0 bohr each. Type: array; Default: No Default. Orbital Visualization with VMD¶; Included in Psi4 is functionality to automatically render specified surfaces, including molecular orbitals,; densities, and basis functions, using VMD. The vmd_cube.py script takes the .cube files generated; in a calculation and generates images alinged with user-input specifications. The script is located; in psi4//share/scripts/vmd_cube.py. Script Prerequisites¶. VMD must be installed, and it can be downloaded for free at (http://www.ks.uiuc.edu/Research/vmd/). Additionally,; the script needs to know where to find the VMD executable, and this is defined as VMDPATH. VMDPATH must be defined as; an environment variable.; To generate images with multiple surfaces, ImageMagick must also be installed. ImageMagick is a free program which; can be installed using homebrew/pip or from http://www.imagemagick.org/script/binary-releases.php .; With ImageMagick installed, an environment variable called MONTAGE needs to be created which points to the montage executable.; This executable can be found in the /bin/ sub-directory wherever ImageMagick was installed. Running the Script¶. Run a Psi4 calculation, generating .cube files as detailed in the above documentation. Copy vmd_script.py into a directory where the image files are desired, and pass the directory; pointing to the .cube files as an argument to run:; python vmd_cube.py /path/to/cube/files/. Alternatively, the script can be run in the same directory as the cube files with no need to pass the; directory as an argument. For an additional image containing all surfaces in an array (very useful for hand-picking orbital spaces), set the montage; flag to True:; python vmd_cube.py /path/to/cube/file",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/cubeprop-1.html:5445,install,installed,5445,psi4manual/1.0.0/cubeprop-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/cubeprop-1.html,2,['install'],['installed']
Deployability,"rrectly. Now also testing that CSX harvesting PSI variables correctly. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. scf3; File retention, docc, socc, and bond distances specified explicitly. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. dfomp3-grad2; DF-OMP3 cc-pVDZ gradients for the H2O+ cation. sapt6; checks that all SAPT physical components (elst, exch, indc, disp) and total IE are being computed correctly for SAPT2+3(CCD)dMP2/aug-cc-pvdz and all lesser methods thereof. dft1; DFT Functional Test. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. omp3-3; OMP3 cc-pVDZ energy with B3LYP initial guess for the NO radical. dcft9; UHF-ODC-12 and RHF-ODC-12 single-point energy for H2O. This performs a simultaneous update of orbitals and cumulants, using DIIS extrapolation. Four-virtual integrals are handled in the AO basis, where integral transformation is avoided. In the next RHF-ODC-12 computation, AO_BASIS=NONE is used, where four-virtual integrals are transformed into MO basis. opt-irc-2; Compute the IRC for HCN <-> NCH interconversion at the RHF/DZP level of theory. pywrap-freq-g-sowreap; Finite difference of gradients frequency, run in sow/reap mode. Previous topic; DMRG; Next topic; DFT Functionals. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Test Suite and Sample Inputs ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:32054,update,update,32054,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,4,['update'],"['update', 'updated']"
Deployability,"rror('Impostor molecule trying to be analyzed! natom {} != {}'.format(mol.natom(), molecule.natom())); if abs(mol.nuclear_repulsion_energy() - molecule.nuclear_repulsion_energy()) > 1.e-6:; raise ValidationError('Impostor molecule trying to be analyzed! NRE {} != {}'.format(mol.nuclear_repulsion_energy(), molecule.nuclear_repulsion_energy())); if not np.allclose(np.asarray(mol.geometry()), np.asarray(molecule.geometry()), atol=1.e-6):; core.print_out('Warning: geometry center/orientation mismatch. Normal modes may not be in expected coordinate system.'); # raise ValidationError('Impostor molecule trying to be analyzed! geometry\n{}\n !=\n{}'.format(; # np.asarray(mol.geometry()), np.asarray(molecule.geometry()))); mol = molecule. m = np.asarray([mol.mass(at) for at in range(mol.natom())]); irrep_labels = mol.irrep_labels(). vibinfo, vibtext = qcdb.vib.harmonic_analysis(nmwhess, geom, m, wfn.basisset(), irrep_labels,; project_trans=project_trans, project_rot=project_rot); vibrec.update({k: qca.to_dict() for k, qca in vibinfo.items()}). core.print_out(vibtext); core.print_out(qcdb.vib.print_vibs(vibinfo, shortlong=True, normco='x', atom_lbl=symbols)). if core.has_option_changed('THERMO', 'ROTATIONAL_SYMMETRY_NUMBER'):; rsn = core.get_option('THERMO', 'ROTATIONAL_SYMMETRY_NUMBER'); else:; rsn = mol.rotational_symmetry_number(). if irrep is None:; therminfo, thermtext = qcdb.vib.thermo(vibinfo,; T=core.get_option(""THERMO"", ""T""), # 298.15 [K]; P=core.get_option(""THERMO"", ""P""), # 101325. [Pa]; multiplicity=mol.multiplicity(),; molecular_mass=np.sum(m),; sigma=rsn,; rotor_type=mol.rotor_type(),; rot_const=np.asarray(mol.rotational_constants()),; E0=core.get_variable('CURRENT ENERGY')) # someday, wfn.energy(); vibrec.update({k: qca.to_dict() for k, qca in therminfo.items()}). core.set_variable(""ZPVE"", therminfo['ZPE_corr'].data); core.set_variable(""THERMAL ENERGY CORRECTION"", therminfo['E_corr'].data); core.set_variable(""ENTHALPY CORRECTION"", therminfo['H_corr'].data); core.",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/_modules/psi4/driver/driver.html:91593,update,update,91593,psi4manual/1.2.1/_modules/psi4/driver/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/_modules/psi4/driver/driver.html,1,['update'],['update']
Deployability,"rs and developed by Matt Leininger and works as well as EVANGELISTI. Type: string; Possible Values: EVANGELISTI, HD_EXACT, HD_KAVE, ORB_ENER, LEININGER, Z_KAVE; Default: EVANGELISTI. HD_OTF (DETCI); DETCI (Expert) — Do compute the diagonal elements of the Hamiltonian matrix on-the-fly? Otherwise, a diagonal element vector is written to a separate file on disk. Type: boolean; Default: true. HEFF4 (PSIMRCC); PSIMRCC — Do include the fourth-order contributions to the effective Hamiltonian?. Type: boolean; Default: true. HEFF_PRINT (PSIMRCC); PSIMRCC — Do print the effective Hamiltonian?. Type: boolean; Default: false. HESS_UPDATE (OPTKING); OPTKING — Hessian update scheme. Type: string; Possible Values: NONE, BFGS, MS, POWELL, BOFILL; Default: BFGS. HESS_UPDATE_LIMIT (OPTKING); OPTKING — Do limit the magnitude of changes caused by the Hessian update?. Type: boolean; Default: true. HESS_UPDATE_LIMIT_MAX (OPTKING); OPTKING — If HESS_UPDATE_LIMIT is true, changes to the Hessian from the update are limited to the larger of HESS_UPDATE_LIMIT_SCALE * (the previous value) and HESS_UPDATE_LIMIT_MAX [au]. Type: double; Default: 1.00. HESS_UPDATE_LIMIT_SCALE (OPTKING); OPTKING — If HESS_UPDATE_LIMIT is true, changes to the Hessian from the update are limited to the larger of HESS_UPDATE_LIMIT_SCALE * (the previous value) and HESS_UPDATE_LIMIT_MAX [au]. Type: double; Default: 0.50. HESS_UPDATE_USE_LAST (OPTKING); OPTKING — Number of previous steps to use in Hessian update, 0 uses all. Type: integer; Default: 1. HESSIAN_WRITE (FINDIF); FINDIF — Do write a hessian output file? If so, the filename will end in .hess, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. ICORE (DETCI); DETCI — Specifies how to handle buffering of CI vectors. A value of 0 makes the program perform I/O one RAS subblock at a time; 1 uses entire CI vectors at a time; and 2 uses one irrep bloc",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/autodoc_glossary_options_c-1.html:55995,update,update,55995,psi4manual/4.0b4/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_glossary_options_c-1.html,4,['update'],['update']
Deployability,"rs in the same manner as strong pairs. Type: string; Default: NONE. MAXITER¶. Maximum number of iterations to converge perturbed amplitude equations. Type: integer; Default: 50. NUM_AMPS_PRINT¶. Number of important CC amplitudes per excitation level to print. CC analog to NUM_DETS_PRINT. Type: integer; Default: 5. OMEGA¶. Array that specifies the desired frequencies of the incident radiation field in CCLR calculations. If only one element is given, the units will be assumed to be atomic units. If more than one element is given, then the units must be specified as the final element of the array. Acceptable units are HZ, NM, EV, and AU. Type: array; Default: No Default. PROPERTY¶. The response property desired. Acceptable values are POLARIZABILITY (default) for dipole polarizabilities, ROTATION for specific rotations, ROA for Raman Optical Activity (ROA_TENSOR for each displacement), and ALL for all of the above. Type: string; Possible Values: POLARIZABILITY, ROTATION, ROA, ROA_TENSOR, ALL; Default: POLARIZABILITY. REFERENCE¶. Reference wavefunction type. Type: string; Default: RHF. RESTART¶. Do restart from on-disk amplitudes?. Type: boolean; Default: true. R_CONVERGENCE¶. Convergence criterion for wavefunction (change) in perturbed CC equations. Type: conv double; Default: 1e-7. SEKINO¶. Do Sekino-Bartlett size-extensive model-III?. Type: boolean; Default: false. Expert¶. WFN¶. Wavefunction type. Type: string; Default: SCF. table of contents. CCRESPONSE; General; ABCD; ANALYZE; CACHELEVEL; DIIS; GAUGE; LINEAR; LOCAL; LOCAL_CPHF_CUTOFF; LOCAL_CUTOFF; LOCAL_FILTER_SINGLES; LOCAL_METHOD; LOCAL_PAIRDEF; LOCAL_WEAKP; MAXITER; NUM_AMPS_PRINT; OMEGA; PROPERTY; REFERENCE; RESTART; R_CONVERGENCE; SEKINO. Expert; WFN. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.6;  · . PSI4. Appendices; Keywords by Module; CCRESPONSE. © Copyright 2022, The Psi4 Project.; Last updated on Thursday, 19 May 2022 08:57PM.; Created using Sphinx 4.5.0.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/autodir_options_c/module__ccresponse.html:4204,update,updated,4204,psi4manual/1.6.x/autodir_options_c/module__ccresponse.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/autodir_options_c/module__ccresponse.html,1,['update'],['updated']
Deployability,"rs to export various quantities from the wavefunction; to external formats such as FCHK and MOLDEN. Because the Wavefunction makes; its members available to the Python layer, any other similar export functions; should be written in python. Integral consuming technologies¶; The general philosophy in PSI4 is to try write two-electron integral; driven tasks in methods like Hartree-Fock, CIS and CPHF in terms of generalized; Fock-like matrices. From here, a single class can be used to construct these; generalized Fock matrices, which is what libFock; (psi4/psi4/src/psi4/libfock) accomplishes. A number of integral; technologies – such as integral-direct, disk-based and density fitting – are; supported in libFock, making them generally available to all elements of the; code that use the generalized Fock matrix strategy. Exposing C++ code to Python¶; The recent push to move sections of the code that are not a bottleneck into the; Python layer requires that the C++ code is callable from Python and that its; results are accessible. The result accessibility is addressed by populating; the appropriate variables in the Wavefunction object. To make the code; callable from Python, we rely on the excellent PyBind11 library; to create the bindings. Existing code to export various PSI4 classes can; be found in psi4/psi4/src in the files whose name begins with export_.; The code to export functions that run entire calculations is usually found in; psi4/psi4/src/core.cc. table of contents. General layout of the core: where new C++ code should live; New integral operators; Completely new methods; Integral consuming technologies; Exposing C++ code to Python. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Introduction to Programming in PSI4; General layout of the core: where new C++ code should live. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/prog_tour.html:3530,update,updated,3530,psi4manual/master/prog_tour.html,https://psicode.org,https://psicode.org/psi4manual/master/prog_tour.html,1,['update'],['updated']
Deployability,"rs will be identical to those for SCS-CCSD. Type: boolean; Default: false. SCS_MP2¶. Do SCS-MP2?. Type: boolean; Default: false. TRIPLES_LOW_MEMORY¶. Do use low memory option for triples contribution? Note that this option is enabled automatically if the memory requirements of the conventional algorithm would exceed the available resources. Type: boolean; Default: false. Expert¶. CEPA_LEVEL¶. Which coupled-pair method is called? This parameter is used internally by the python driver. Changing its value won’t have any effect on the procedure. Type: string; Default: CEPA(0). COMPUTE_MP4_TRIPLES¶. Do compute MP4 triples contribution?. Type: boolean; Default: false. COMPUTE_TRIPLES¶. Do compute triples contribution?. Type: boolean; Default: true. RUN_CCSD¶. do ccsd rather than qcisd?. Type: boolean; Default: false. RUN_CEPA¶. Is this a CEPA job? This parameter is used internally by the pythond driver. Changing its value won’t have any effect on the procedure. Type: boolean; Default: false. RUN_MP2¶. do only evaluate mp2 energy?. Type: boolean; Default: false. RUN_MP3¶. do only evaluate mp3 energy?. Type: boolean; Default: false. RUN_MP4¶. do only evaluate mp4 energy?. Type: boolean; Default: false. Table Of Contents. FNOCC; General; BRUECKNER_MAXITER; CC_SCALE_OS; CC_SCALE_SS; CC_TIMINGS; CEPA_NO_SINGLES; CHOLESKY_TOLERANCE; DFCC; DF_BASIS_CC; DIIS_MAX_VECS; DIPMOM; E_CONVERGENCE; MAXITER; MP2_SCALE_OS; MP2_SCALE_SS; NAT_ORBS; OCC_TOLERANCE; R_CONVERGENCE; SCS_CCSD; SCS_CEPA; SCS_MP2; TRIPLES_LOW_MEMORY. Expert; CEPA_LEVEL; COMPUTE_MP4_TRIPLES; COMPUTE_TRIPLES; RUN_CCSD; RUN_CEPA; RUN_MP2; RUN_MP3; RUN_MP4. Previous topic; POINTS; Next topic; BRUECKNER_MAXITER; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; Keywords by Module ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 25, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/autodir_options_c/module__fnocc-1.html:4304,update,updated,4304,psi4manual/4.0b4/autodir_options_c/module__fnocc-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodir_options_c/module__fnocc-1.html,2,['update'],['updated']
Deployability,"rs""] = [(s if s is None else int(s)) for s in dicary[""fragment_separators""]]; # forgive generator version changes; if ""provenance"" in dicary:; dicary[""provenance""].pop(""version""); # regularize connectivity ordering; if ""connectivity"" in dicary:; conn = [(min(at1, at2), max(at1, at2), bo) for (at1, at2, bo) in dicary[""connectivity""]]; conn.sort(key=lambda tup: tup[0]); dicary[""connectivity""] = conn. return dicary. xptd = massage_dicts(xptd); cptd = massage_dicts(cptd). if relative_geoms == ""exact"":; pass; elif relative_geoms == ""align"":; # can't just expect geometries to match, so we'll align them, check that; # they overlap and that the translation/rotation arrays jibe with; # fix_com/orientation, then attach the oriented geom to computed before the; # recursive dict comparison.; from .molutil.align import B787. cgeom = np.array(cptd[""geom""]).reshape((-1, 3)); rgeom = np.array(xptd[""geom""]).reshape((-1, 3)); rmsd, mill = B787(; rgeom=rgeom,; cgeom=cgeom,; runiq=None,; cuniq=None,; atoms_map=True,; mols_align=True,; run_mirror=False,; verbose=0,; ); if cptd[""fix_com""]:; return compare(; True,; np.allclose(np.zeros((3)), mill.shift, atol=atol),; ""null shift"",; quiet=(verbose == 0),; return_message=return_message,; return_handler=return_handler,; ); if cptd[""fix_orientation""]:; return compare(; True,; np.allclose(np.identity(3), mill.rotation, atol=atol),; ""null rotation"",; quiet=(verbose == 0),; return_message=return_message,; return_handler=return_handler,; ); ageom = mill.align_coordinates(cgeom); cptd[""geom""] = ageom.reshape((-1)). return compare_recursive(; xptd,; cptd,; atol=atol,; rtol=rtol,; label=label,; forgive=forgive,; quiet=(verbose == 0),; return_message=return_message,; return_handler=return_handler,; ). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .  · ; 1.8.2;  · . PSI4. Module code; qcelemental.testing. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:04AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/_modules/qcelemental/testing.html:17485,update,updated,17485,psi4manual/1.8.x/_modules/qcelemental/testing.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/_modules/qcelemental/testing.html,1,['update'],['updated']
Deployability,"rs""] = [(s if s is None else int(s)) for s in dicary[""fragment_separators""]]; # forgive generator version changes; if ""provenance"" in dicary:; dicary[""provenance""].pop(""version""); # regularize connectivity ordering; if ""connectivity"" in dicary:; conn = [(min(at1, at2), max(at1, at2), bo) for (at1, at2, bo) in dicary[""connectivity""]]; conn.sort(key=lambda tup: tup[0]); dicary[""connectivity""] = conn. return dicary. xptd = massage_dicts(xptd); cptd = massage_dicts(cptd). if relative_geoms == ""exact"":; pass; elif relative_geoms == ""align"":; # can't just expect geometries to match, so we'll align them, check that; # they overlap and that the translation/rotation arrays jibe with; # fix_com/orientation, then attach the oriented geom to computed before the; # recursive dict comparison.; from .molutil.align import B787. cgeom = np.array(cptd[""geom""]).reshape((-1, 3)); rgeom = np.array(xptd[""geom""]).reshape((-1, 3)); rmsd, mill = B787(; rgeom=rgeom,; cgeom=cgeom,; runiq=None,; cuniq=None,; atoms_map=True,; mols_align=True,; run_mirror=False,; verbose=0,; ); if cptd[""fix_com""]:; return compare(; True,; np.allclose(np.zeros((3)), mill.shift, atol=atol),; ""null shift"",; quiet=(verbose == 0),; return_message=return_message,; return_handler=return_handler,; ); if cptd[""fix_orientation""]:; return compare(; True,; np.allclose(np.identity(3), mill.rotation, atol=atol),; ""null rotation"",; quiet=(verbose == 0),; return_message=return_message,; return_handler=return_handler,; ); ageom = mill.align_coordinates(cgeom); cptd[""geom""] = ageom.reshape((-1)). return compare_recursive(; xptd,; cptd,; atol=atol,; rtol=rtol,; label=label,; forgive=forgive,; quiet=(verbose == 0),; return_message=return_message,; return_handler=return_handler,; ). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .  · ; 1.9.1;  · . PSI4. Module code; qcelemental.testing. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 08 February 2024 09:32PM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/_modules/qcelemental/testing.html:17485,update,updated,17485,psi4manual/1.9.x/_modules/qcelemental/testing.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/_modules/qcelemental/testing.html,1,['update'],['updated']
Deployability,"rs. LEININGER approximation which subtracts the one-electron contribution from the orbital energies, multiplies by 0.5, and adds the one-electron contribution back in, producing spin pure expansion vectors and developed by Matt Leininger and works as well as EVANGELISTI. Type: string; Possible Values: EVANGELISTI, HD_EXACT, HD_KAVE, ORB_ENER, LEININGER, Z_KAVE; Default: EVANGELISTI. HD_OTF (DETCI)¶DETCI (Expert) — Do compute the diagonal elements of the Hamiltonian matrix on-the-fly? Otherwise, a diagonal element vector is written to a separate file on disk. Type: boolean; Default: true. HEFF4 (PSIMRCC)¶PSIMRCC — Do include the fourth-order contributions to the effective Hamiltonian?. Type: boolean; Default: true. HEFF_PRINT (PSIMRCC)¶PSIMRCC — Do print the effective Hamiltonian?. Type: boolean; Default: false. HESS_TYPE (DFOCC)¶DFOCC — Type of the MO Hessian matrix. Type: string; Possible Values: APPROX_DIAG, APPROX_DIAG_EKT, APPROX_DIAG_HF, HF; Default: HF. HESS_UPDATE (OPTKING)¶OPTKING — Hessian update scheme. Type: string; Possible Values: NONE, BFGS, MS, POWELL, BOFILL; Default: BFGS. HESS_UPDATE_LIMIT (OPTKING)¶OPTKING — Do limit the magnitude of changes caused by the Hessian update?. Type: boolean; Default: true. HESS_UPDATE_LIMIT_MAX (OPTKING)¶OPTKING — If HESS_UPDATE_LIMIT is true, changes to the Hessian from the update are limited to the larger of HESS_UPDATE_LIMIT_SCALE * (the previous value) and HESS_UPDATE_LIMIT_MAX [au]. Type: double; Default: 1.00. HESS_UPDATE_LIMIT_SCALE (OPTKING)¶OPTKING — If HESS_UPDATE_LIMIT is true, changes to the Hessian from the update are limited to the larger of HESS_UPDATE_LIMIT_SCALE * (the previous value) and HESS_UPDATE_LIMIT_MAX [au]. Type: double; Default: 0.50. HESS_UPDATE_USE_LAST (OPTKING)¶OPTKING — Number of previous steps to use in Hessian update, 0 uses all. Type: integer; Default: 2. HESSIAN_WRITE (FINDIF)¶FINDIF — Do write a hessian output file? If so, the filename will end in .hess, and the prefix is determined ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:143702,update,update,143702,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html,5,['update'],['update']
Deployability,"rs. LEININGER approximation which subtracts the one-electron contribution from the orbital energies, multiplies by 0.5, and adds the one-electron contribution back in, producing spin pure expansion vectors and developed by Matt Leininger and works as well as EVANGELISTI. Type: string; Possible Values: EVANGELISTI, HD_EXACT, HD_KAVE, ORB_ENER, LEININGER, Z_KAVE; Default: EVANGELISTI. HD_OTF (DETCI)¶DETCI (Expert) — Do compute the diagonal elements of the Hamiltonian matrix on-the-fly? Otherwise, a diagonal element vector is written to a separate file on disk. Type: boolean; Default: true. HEFF4 (PSIMRCC)¶PSIMRCC — Do include the fourth-order contributions to the effective Hamiltonian?. Type: boolean; Default: true. HEFF_PRINT (PSIMRCC)¶PSIMRCC — Do print the effective Hamiltonian?. Type: boolean; Default: false. HESS_TYPE (DFOCC)¶DFOCC — Type of the MO Hessian matrix. Type: string; Possible Values: APPROX_DIAG, APPROX_DIAG_EKT, APPROX_DIAG_HF, HF; Default: HF. HESS_UPDATE (OPTKING)¶OPTKING — Hessian update scheme. Type: string; Possible Values: NONE, BFGS, MS, POWELL, BOFILL; Default: BFGS. HESS_UPDATE_LIMIT (OPTKING)¶OPTKING — Do limit the magnitude of changes caused by the Hessian update?. Type: boolean; Default: true. HESS_UPDATE_LIMIT_MAX (OPTKING)¶OPTKING — If HESS_UPDATE_LIMIT is true, changes to the Hessian from the update are limited to the larger of HESS_UPDATE_LIMIT_SCALE * (the previous value) and HESS_UPDATE_LIMIT_MAX [au]. Type: double; Default: 1.00. HESS_UPDATE_LIMIT_SCALE (OPTKING)¶OPTKING — If HESS_UPDATE_LIMIT is true, changes to the Hessian from the update are limited to the larger of HESS_UPDATE_LIMIT_SCALE * (the previous value) and HESS_UPDATE_LIMIT_MAX [au]. Type: double; Default: 0.50. HESS_UPDATE_USE_LAST (OPTKING)¶OPTKING — Number of previous steps to use in Hessian update, 0 uses all. Type: integer; Default: 4. HESSIAN_WRITE (FINDIF)¶FINDIF — Do write a hessian output file? If so, the filename will end in .hess, and the prefix is determined ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/autodoc_glossary_options_c.html:148977,update,update,148977,psi4manual/1.7.x/autodoc_glossary_options_c.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodoc_glossary_options_c.html,4,['update'],['update']
Deployability,"rsion energy term in EFP computation?. Type: boolean; Default: true. EFP_DISP_DAMPING¶. Fragment-fragment dispersion damping type. TT is a damping formula by Tang and Toennies. OVERLAP is overlap-based dispersion damping. Type: string; Possible Values: TT, OVERLAP, OFF; Default: OVERLAP. EFP_ELST¶. Do include electrostatics energy term in EFP computation?. Type: boolean; Default: true. EFP_ELST_DAMPING¶. Fragment-fragment electrostatic damping type. SCREEN is a damping formula based on screen group in the EFP potential. OVERLAP is damping that computes charge penetration energy. Type: string; Possible Values: SCREEN, OVERLAP, OFF; Default: SCREEN. EFP_EXCH¶. Do include exchange repulsion energy term in EFP computation?. Type: boolean; Default: true. EFP_IND¶. Do include polarization energy term in EFP computation? (EFP_POL c. v1.1). Type: boolean; Default: true. EFP_IND_DAMPING¶. Fragment-fragment polarization damping type. TT is a damping formula like Tang and Toennies. (EFP_POL_DAMPING c. v1.1). Type: string; Possible Values: TT, OFF; Default: TT. EFP_QM_ELST¶. Do include electrostatics energy term in QM/EFP computation? (QMEFP_ELST c. v1.1). Type: boolean; Default: true. EFP_QM_IND¶. Do include polarization energy term in QM/EFP computation? (QMEFP_POL c. v1.1). Type: boolean; Default: true. PRINT¶. The amount of information printed to the output file. Type: integer; Default: 1. Expert¶. DERTYPE¶. Do EFP gradient?. Type: string; Possible Values: NONE, FIRST; Default: NONE. QMEFP¶. Do turn on QM/EFP terms?. Type: boolean; Default: false. table of contents. EFP; General; EFP_DISP; EFP_DISP_DAMPING; EFP_ELST; EFP_ELST_DAMPING; EFP_EXCH; EFP_IND; EFP_IND_DAMPING; EFP_QM_ELST; EFP_QM_IND; PRINT. Expert; DERTYPE; QMEFP. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Appendices; Keywords by Module. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/autodir_options_c/module__efp-1.html:2172,update,updated,2172,psi4manual/1.3.2/autodir_options_c/module__efp-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/autodir_options_c/module__efp-1.html,2,['update'],['updated']
Deployability,"rt psi4. from psi4.driver.procrouting.response.scf_response import tdscf_excitations; from psi4.driver.p4util import spectrum. psi4.core.set_output_file(""moxy.out""). moxy = psi4.geometry(""""""0 1; C 0.152133 -0.035800 0.485797; C -1.039475 0.615938 -0.061249; C 1.507144 0.097806 -0.148460; O -0.828215 -0.788248 -0.239431; H 0.153725 -0.249258 1.552136; H -1.863178 0.881921 0.593333; H -0.949807 1.214210 -0.962771; H 2.076806 -0.826189 -0.036671; H 2.074465 0.901788 0.325106; H 1.414895 0.315852 -1.212218; """""", name=""(S)-methyloxirane""). psi4.set_options({; 'save_jk': True,; }). e, wfn = psi4.energy(""HF/cc-pvdz"", return_wfn=True, molecule=moxy); res = tdscf_excitations(wfn, states=8, triplets=""also""). # get poles and residues to plot OPA and ECD spectra; poles = [r[""EXCITATION ENERGY""] for r in res]; opa_residues = [np.linalg.norm(r[""LENGTH-GAUGE ELECTRIC DIPOLE TRANSITION MOMENT""])**2 for r in res]; ecd_residues = [r[""LENGTH-GAUGE ROTATORY STRENGTH""] for r in res]. opa_spectrum = spectrum(poles=poles, residues=opa_residues, gamma=0.01, out_units=""nm""); ecd_spectrum = spectrum(poles=poles, residues=ecd_residues, kind=""ECD"", gamma=0.01, out_units=""nm""). The data produced by running the above PsiAPI code can, for example, be used; with the Altair plotting library to produce the desired spectra. table of contents. TDSCF: Time-dependent Hartree–Fock and density-functional theory; Introduction; Known limitations; Theory; Psithon keywords; TDSCF_STATES; TDSCF_TRIPLETS; TDSCF_TDA; TDSCF_R_CONVERGENCE; TDSCF_MAXITER; TDSCF_GUESS; TDSCF_PRINT; TDSCF_COEFF_CUTOFF; TDSCF_TDM_PRINT. PsiAPI usage; Plotting one-photon absorption and electronic circular dichroism spectra. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.6;  · . PSI4. Theoretical Methods: SCF to FCI; TDSCF: Time-dependent Hartree–Fock and density-functional theory. © Copyright 2022, The Psi4 Project.; Last updated on Thursday, 19 May 2022 08:57PM.; Created using Sphinx 4.5.0.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/tdscf.html:13512,update,updated,13512,psi4manual/1.6.x/tdscf.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/tdscf.html,1,['update'],['updated']
Deployability,"rties""; ],; ""type"": ""string""; }; }; }. Fields:. basis (str); computed (bool); driver (qcelemental.models.common_models.DriverEnum); keywords (Dict[str, Any]); method (str); molecule (Any); result (Any); result_id (Optional[str]). Validators:. set_basis » basis; set_keywords » keywords; set_method » method. field basis: str [Required]¶; The quantum chemistry basis set to evaluate (e.g., 6-31g, cc-pVDZ, …). Validated by:. set_basis. field computed: bool = False¶; Whether quantum chemistry has been run on this task. field driver: DriverEnum [Required]¶; The resulting type of computation: energy, gradient, hessian, properties.Note for finite difference that this should be the target driver, not the means driver. field keywords: Dict[str, Any] [Optional]¶; The keywords to use in the computation. Validated by:. set_keywords. field method: str [Required]¶; The quantum chemistry method to evaluate (e.g., B3LYP, MP2, …). Validated by:. set_method. field molecule: Any [Required]¶; The molecule to use in the computation. field result: Any [Optional]¶; AtomicResult return. field result_id: Optional[str] = None¶; The optional ID for the computation. compute(client=None)[source]¶; Run quantum chemistry. Parameters:; client (Optional[qcportal.client.FractalClient]) – . get_results(client=None)[source]¶; Return results as Atomic-flavored QCSchema. Return type:; AtomicResult. Parameters:; client (Optional[FractalClient]) – . plan()[source]¶; Form QCSchema input from member data. Return type:; AtomicInput. validator set_basis  »  psi4.driver.AtomicComputer.basis[source]¶. validator set_keywords  »  psi4.driver.AtomicComputer.keywords[source]¶. validator set_method  »  psi4.driver.AtomicComputer.method[source]¶. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; AtomicComputer. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.AtomicComputer.html:3698,update,updated,3698,psi4manual/1.7.x/api/psi4.driver.AtomicComputer.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.AtomicComputer.html,1,['update'],['updated']
Deployability,"rties. Type: string; Default: LENGTH. INTS_TOLERANCE¶. Minimum absolute value below which integrals are neglected. Type: conv double; Default: 1e-14. ONEPDM¶. Do compute one-particle density matrix?. Type: boolean; Default: false. ONEPDM_GRID_CUTOFF¶. Cutoff (e/A^3) for printing one-particle density matrix values on a grid. Type: double; Default: 1.0e-30. ONEPDM_GRID_DUMP¶. Write one-particle density matrix on a grid to file opdm.dx. Type: boolean; Default: false. ONEPDM_GRID_STEPSIZE¶. Step size (Angstrom) for one-particle density matrix values on a grid. Type: double; Default: 0.1. OPDM_RELAX¶. Do relax the one-particle density matrix?. Type: boolean; Default: false. PROP_ALL¶. Compute non-relaxed properties for all excited states. Type: boolean; Default: true. PROP_ROOT¶. Root number (within its irrep) for computing properties. Type: integer; Default: 1. PROP_SYM¶. The symmetry of states. Type: integer; Default: 1. REFERENCE¶. Reference wavefunction type. Type: string; Default: RHF. ROOTS_PER_IRREP¶. The number of electronic states to computed, per irreducible representation. Type: array; Default: No Default. XI¶. Do compute Xi?. Type: boolean; Default: false. ZETA¶. Do use zeta?. Type: boolean; Default: false. Expert¶. AEL¶. Do compute the approximate excitation level? See Stanton and Bartlett, JCP, 98, 1993, 7034. Type: boolean; Default: false. WFN¶. Wavefunction type. Type: string; Default: SCF. XI_CONNECT¶. Do require \(\bar{H}\) and \(R\) to be connected?. Type: boolean; Default: false. table of contents. CCDENSITY; General; AO_BASIS; CACHELEVEL; GAUGE; INTS_TOLERANCE; ONEPDM; ONEPDM_GRID_CUTOFF; ONEPDM_GRID_DUMP; ONEPDM_GRID_STEPSIZE; OPDM_RELAX; PROP_ALL; PROP_ROOT; PROP_SYM; REFERENCE; ROOTS_PER_IRREP; XI; ZETA. Expert; AEL; WFN; XI_CONNECT. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Keywords by Module. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/autodir_options_c/module__ccdensity-1.html:2444,update,updated,2444,psi4manual/1.1.0/autodir_options_c/module__ccdensity-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodir_options_c/module__ccdensity-1.html,2,['update'],['updated']
Deployability,"rts = '\n'.join(future_imports) + '\n'; imports += 'import psi4\n'; imports += 'from psi4 import *\n'; imports += 'from psi4.core import *\n'; imports += 'from psi4.driver.diatomic import anharmonicity\n'; imports += 'from psi4.driver.gaussian_n import *\n'; imports += 'from psi4.driver.frac import ip_fitting, frac_traverse\n'; imports += 'from psi4.driver.aliases import *\n'; imports += 'from psi4.driver.driver_cbs import *\n'; imports += 'from psi4.driver.wrapper_database import database, db, DB_RGT, DB_RXN\n'; imports += 'from psi4.driver.wrapper_autofrag import auto_fragments\n'; imports += 'psi4_io = core.IOManager.shared_object()\n'. # psirc (a baby PSIthon script that might live in ~/.psi4rc); psirc_file = os.path.expanduser('~') + os.path.sep + '.psi4rc'; if os.path.isfile(psirc_file):; fh = open(psirc_file); psirc = fh.read(); fh.close(); psirc = psirc.replace('psi4.IOManager', 'psi4.core.IOManager'); psirc += ""\npsi4.core.print_out('Warning: As of v1.5, the ~/.psi4rc file will no longer be read into Psi4 input.\\n')\n""; else:; psirc = ''. blank_mol = 'geometry(""""""\n'; blank_mol += '0 1\nH 0 0 0\nH 0.74 0 0\n'; blank_mol += '"""""",""blank_molecule_psi4_yo"")\n'. temp = imports + psirc + blank_mol + temp. # Move up the psi4.core namespace; for func in dir(core):; temp = temp.replace(""psi4."" + func, ""psi4.core."" + func). # Move pseudonamespace for physconst into proper namespace; from psi4.driver import constants; for pc in dir(constants):; if not pc.startswith('__'):; temp = temp.replace('psi_' + pc, 'psi4.constants.' + pc). return temp. if __name__ == ""__main__"":; result = process_input(""""""; molecule h2 {; H; H 1 R. R = .9; }. set basis 6-31G**. """"""). print(""Result\n==========================""); print(result). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .  · ; 1.7;  · . PSI4. Module code; psi4.driver.inputparser. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/inputparser.html:25934,update,updated,25934,psi4manual/1.7.x/_modules/psi4/driver/inputparser.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/inputparser.html,1,['update'],['updated']
Deployability,"rts; imports = '\n'.join(future_imports) + '\n'; imports += 'import psi4\n'; imports += 'from psi4 import *\n'; imports += 'from psi4.core import *\n'; imports += 'from psi4.driver.diatomic import anharmonicity\n'; imports += 'from psi4.driver.gaussian_n import *\n'; imports += 'from psi4.driver.frac import ip_fitting, frac_traverse\n'; imports += 'from psi4.driver.aliases import *\n'; imports += 'from psi4.driver.driver_cbs import *\n'; imports += 'from psi4.driver.wrapper_database import database, db, DB_RGT, DB_RXN\n'; imports += 'from psi4.driver.wrapper_autofrag import auto_fragments\n'; imports += 'psi4_io = core.IOManager.shared_object()\n'. # psirc (a baby PSIthon script that might live in ~/.psi4rc); psirc_file = os.path.expanduser('~') + os.path.sep + '.psi4rc'; if os.path.isfile(psirc_file):; fh = open(psirc_file); psirc = fh.read(); fh.close(); psirc = psirc.replace('psi4.IOManager', 'psi4.core.IOManager'); psirc += ""\npsi4.core.print_out('Warning: As of v1.5, the ~/.psi4rc file will no longer be read into Psi4 input.\\n')\n""; else:; psirc = ''. blank_mol = 'geometry(""""""\n'; blank_mol += '0 1\nH 0 0 0\nH 0.74 0 0\n'; blank_mol += '"""""",""blank_molecule_psi4_yo"")\n'. temp = imports + psirc + blank_mol + temp. # Move up the psi4.core namespace; for func in dir(core):; temp = temp.replace(""psi4."" + func, ""psi4.core."" + func). # Move pseudonamespace for physconst into proper namespace; from psi4.driver import constants; for pc in dir(constants):; if not pc.startswith('__'):; temp = temp.replace('psi_' + pc, 'psi4.constants.' + pc). return temp. if __name__ == ""__main__"":; result = process_input(""""""; molecule h2 {; H; H 1 R. R = .9; }. set basis 6-31G**. """"""). print(""Result\n==========================""); print(result). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .  · ; 1.6;  · . PSI4. Module code; psi4.driver.inputparser. © Copyright 2022, The Psi4 Project.; Last updated on Thursday, 19 May 2022 08:57PM.; Created using Sphinx 4.5.0.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/inputparser.html:25766,update,updated,25766,psi4manual/1.6.x/_modules/psi4/driver/inputparser.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/inputparser.html,1,['update'],['updated']
Deployability,"rty(name[, properties, molecule])[source]¶; Function to compute various properties. Aliases:prop(). Returns:none. Caution; Some features are not yet implemented. Buy a developer a coffee. This function at present has a limited functionality.; Consult the keywords sections of other modules for further property capabilities. Name; Calls Method; Reference; Supported Properties. scf; Self-consistent field method(s); RHF/ROHF/UHF; Listed here. hf; HF Self-consistent field method(s); RHF/ROHF/UHF; Listed here. mp2; MP2 with density fitting only (mp2_type df); RHF; Listed here. cc2; 2nd-order approximate CCSD; RHF; dipole, quadrupole, polarizability, rotation, roa_tensor. ccsd; Coupled cluster singles and doubles (CCSD); RHF; dipole, quadrupole, polarizability, rotation, roa_tensor. eom-cc2; 2nd-order approximate EOM-CCSD; RHF; oscillator_strength, rotational_strength. eom-ccsd; Equation-of-motion CCSD (EOM-CCSD); RHF; oscillator_strength, rotational_strength. cisd, cisdt,; cisdt, cisdtq,; ci5, ..., fci; Configuration interaction; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. casscf, rasscf; Multi-configurational SCF; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. Parameters:; name (string) – 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. properties (array of strings) – \(\Rightarrow\) [] \(\Leftarrow\) || ['rotation', 'polarizability', 'oscillator_strength', 'roa'] || etc.; Indicates which properties should be computed. Defaults to dipole and quadrupole. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. 1; 2>>> # [1] Optical rotation calculation; >>> property('cc2', properties=['rotation']). Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Psithon Functions: Invoking a Calculation. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/prop-1.html:1273,configurat,configurational,1273,psi4manual/1.1.0/prop-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/prop-1.html,4,"['configurat', 'update']","['configurational', 'updated']"
Deployability,"rue. Returns a list of arrays otherwise. Returns:; Returns a single or list of NumPy arrays depending on options. Return type:; ndarray or List[ndarray]. Notes; This is a generalized function to convert a Psi4 object to a NumPy array; Examples; >>> data = psi4.core.Matrix(3, 3); >>> data.to_array(); [[ 0. 0. 0.]; [ 0. 0. 0.]; [ 0. 0. 0.]]. to_serial()¶; Converts an object with a .nph accessor to a serialized dictionary. Parameters:; self (Union[Matrix, Vector]) – Matrix or Vector instance. Returns:; Serialized dictionary with keys:. shape; data : List[str]; type : {‘matrix’, ‘vector’}. Return type:; Dict[str, Any]. trace(self: psi4.core.Matrix) → float¶; Returns the trace of the matrix. transform(*args, **kwargs)¶; Overloaded function. transform(self: psi4.core.Matrix, transformer: psi4.core.Matrix) -> None. Transform this matrix with transformer. transform(self: psi4.core.Matrix, a: psi4.core.Matrix, transformer: psi4.core.Matrix) -> None. Transform A with transformer. transpose(self: psi4.core.Matrix) → psi4.core.Matrix¶; Creates a new matrix that is the transpose of this matrix. transpose_this(self: psi4.core.Matrix) → None¶; Transpose the matrix in-place. static triplet(A, B, C, transA, transB, transC)¶; Multiply three matrices together. Deprecated since version 1.4: Use psi4.core.triplet() instead. vector_dot(self: psi4.core.Matrix, rhs: psi4.core.Matrix) → float¶; Returns the vector dot product of this with rhs. zero(self: psi4.core.Matrix) → None¶; Zero all elements of the matrix. zero_diagonal(self: psi4.core.Matrix) → None¶; Zero the diagonal of the matrix. zero_lower(self: psi4.core.Matrix) → None¶; Zero the lower triangle. zero_upper(self: psi4.core.Matrix) → None¶; Zero the upper triangle. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; Matrix. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/api/psi4.core.Matrix.html:18292,update,updated,18292,psi4manual/1.7.x/api/psi4.core.Matrix.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.Matrix.html,1,['update'],['updated']
Deployability,"run; 5z energies, qz gradients, and tz Hessians, both conventional and; density-fitted.; Details about angular momentum settings are available here; https://github.com/psi4/psi4/blob/master/external/upstream/libint2/CMakeLists.txt; . How to see what build configuration options are available¶; CMake doesn’t provide a summary for this (unless you want to try the CMake; GUI, which the developers have never looked at). However, the top half of; the main CMakeLists.txt is a passable summary:; LANGUAGES C CXX); set(psi4_URL ""http://www.psicode.org/""); set(psi4_EMAIL ""psi4aiqc+cmake@gmail.com""); set(psi4_LICENSE ""GNU Lesser General Public License, version 3 (LGPL-3.0)""); set(psi4_DESCRIPTION ""Open-Source Quantum Chemistry""). list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake). ################ Options: Overview and Not Otherwise Mentioned ###############. # <<< CMake build overview >>>; #; # >>> ls; # external/ COPYING psi4/ tests/ ...; # >>> cmake -S. -Bobjdir -DCMAKE_INSTALL_PREFIX=/path/to/install-psi4 ...; # ...; # -- Generating done; # -- Build files have been written to: /current/dir/objdir; # >>> cmake --build objdir --target install -j`getconf _NPROCESSORS_ONLN`. # <<< Required build dependencies that Psi4 can't build itself >>>; #; # - CMake (e.g., `conda install cmake`); # - C++ and C compilers (C++14 compliant); # - BLAS/LAPACK (also runtime; e.g., `conda install mkl-devel`); # - Python (also runtime; interpreter and headers; e.g., `conda install python`); # - NumPy (also runtime; avoidable at buildtime if gau2grid pre-built; e.g., `conda install numpy`); # - networkx >=2.4 (runtime only; e.g., `conda install networkx`); # - pint (runtime only; e.g., `conda install pint -c conda-forge`); # - pydantic >=1.0 (runtime only; e.g., `conda install pydantic -c conda-forge`); # - msgpack-python (runtime only; e.g., `conda install msgpack-python`); # - mpfr (for Libint2; e.g., `conda install mpfr`)); # - Eigen (for Libint2; e.g., `conda install eigen`). # Th",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/build_planning-1.html:13631,install,install-,13631,psi4manual/1.4.0/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/build_planning-1.html,4,['install'],['install-']
Deployability,"rvables.; import numpy as np. import psi4. from psi4.driver.procrouting.response.scf_response import tdscf_excitations; from psi4.driver.p4util import spectrum. psi4.core.set_output_file(""moxy.out""). moxy = psi4.geometry(""""""0 1; C 0.152133 -0.035800 0.485797; C -1.039475 0.615938 -0.061249; C 1.507144 0.097806 -0.148460; O -0.828215 -0.788248 -0.239431; H 0.153725 -0.249258 1.552136; H -1.863178 0.881921 0.593333; H -0.949807 1.214210 -0.962771; H 2.076806 -0.826189 -0.036671; H 2.074465 0.901788 0.325106; H 1.414895 0.315852 -1.212218; """""", name=""(S)-methyloxirane""). psi4.set_options({; 'save_jk': True,; }). e, wfn = psi4.energy(""HF/cc-pvdz"", return_wfn=True, molecule=moxy); res = tdscf_excitations(wfn, states=8, triplets=""also""). # get poles and residues to plot OPA and ECD spectra; poles = [r[""EXCITATION ENERGY""] for r in res]; opa_residues = [np.linalg.norm(r[""LENGTH-GAUGE ELECTRIC DIPOLE TRANSITION MOMENT""])**2 for r in res]; ecd_residues = [r[""LENGTH-GAUGE ROTATORY STRENGTH""] for r in res]. opa_spectrum = spectrum(poles=poles, residues=opa_residues, gamma=0.01, out_units=""nm""); ecd_spectrum = spectrum(poles=poles, residues=ecd_residues, kind=""ECD"", gamma=0.01, out_units=""nm""). The data produced by running the above PsiAPI code can, for example, be used; with the Altair plotting library to produce the desired spectra. table of contents. TDSCF: Time-dependent Hartree–Fock and density-functional theory; Introduction; Known limitations; Theory; Psithon keywords; TDSCF_STATES; TDSCF_TRIPLETS; TDSCF_TDA; TDSCF_R_CONVERGENCE; TDSCF_MAXITER; TDSCF_GUESS; TDSCF_PRINT. PsiAPI usage; Plotting one-photon absorption and electronic circular dichroism spectra. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Theoretical Methods: SCF to FCI; TDSCF: Time-dependent Hartree–Fock and density-functional theory. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/tdscf-1.html:13048,update,updated,13048,psi4manual/1.4.0/tdscf-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/tdscf-1.html,2,['update'],['updated']
Deployability,"rvables.; import numpy as np. import psi4. from psi4.driver.procrouting.response.scf_response import tdscf_excitations; from psi4.driver.p4util import spectrum. psi4.core.set_output_file(""moxy.out""). moxy = psi4.geometry(""""""0 1; C 0.152133 -0.035800 0.485797; C -1.039475 0.615938 -0.061249; C 1.507144 0.097806 -0.148460; O -0.828215 -0.788248 -0.239431; H 0.153725 -0.249258 1.552136; H -1.863178 0.881921 0.593333; H -0.949807 1.214210 -0.962771; H 2.076806 -0.826189 -0.036671; H 2.074465 0.901788 0.325106; H 1.414895 0.315852 -1.212218; """""", name=""(S)-methyloxirane""). psi4.set_options({; 'save_jk': True,; }). e, wfn = psi4.energy(""HF/cc-pvdz"", return_wfn=True, molecule=moxy); res = tdscf_excitations(wfn, states=8, triplets=""also""). # get poles and residues to plot OPA and ECD spectra; poles = [r[""EXCITATION ENERGY""] for r in res]; opa_residues = [np.linalg.norm(r[""LENGTH-GAUGE ELECTRIC DIPOLE TRANSITION MOMENT""])**2 for r in res]; ecd_residues = [r[""LENGTH-GAUGE ROTATORY STRENGTH""] for r in res]. opa_spectrum = spectrum(poles=poles, residues=opa_residues, gamma=0.01, out_units=""nm""); ecd_spectrum = spectrum(poles=poles, residues=ecd_residues, kind=""ECD"", gamma=0.01, out_units=""nm""). The data produced by running the above PsiAPI code can, for example, be used; with the Altair plotting library to produce the desired spectra. table of contents. TDSCF: Time-dependent Hartree–Fock and density-functional theory; Introduction; Known limitations; Theory; Psithon keywords; TDSCF_STATES; TDSCF_TRIPLETS; TDSCF_TDA; TDSCF_R_CONVERGENCE; TDSCF_MAXITER; TDSCF_GUESS; TDSCF_PRINT. PsiAPI usage; Plotting one-photon absorption and electronic circular dichroism spectra. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Theoretical Methods: SCF to FCI; TDSCF: Time-dependent Hartree–Fock and density-functional theory. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/tdscf-1.html:13048,update,updated,13048,psi4manual/1.5.0/tdscf-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/tdscf-1.html,2,['update'],['updated']
Deployability,"ry = total_memory * 0.1. if collocation_memory > collocation_size:; collocation_memory = collocation_size. # Set constants; self.iteration_ = 0; self.memory_jk_ = int(total_memory - collocation_memory); self.memory_collocation_ = int(collocation_memory). # Print out initial docc/socc/etc data; if self.get_print():; core.print_out("" ==> Pre-Iterations <==\n\n""); self.print_preiterations(). if self.get_print():; core.print_out("" ==> Integral Setup <==\n\n""). # Initialize EFP; efp_enabled = hasattr(self.molecule(), 'EFP'); if efp_enabled:; # EFP: Set QM system, options, and callback. Display efp geom in [A]; efpobj = self.molecule().EFP; core.print_out(efpobj.banner()); core.print_out(efpobj.geometry_summary(units_to_bohr=constants.bohr2angstroms)). efpptc, efpcoords, efpopts = get_qm_atoms_opts(self.molecule()); efpobj.set_point_charges(efpptc, efpcoords); efpobj.set_opts(efpopts, label='psi', append='psi'). efpobj.set_electron_density_field_fn(field_fn). # Initilize all integratals and perform the first guess; if self.attempt_number_ == 1:; mints = core.MintsHelper(self.basisset()); if core.get_global_option('RELATIVISTIC') in ['X2C', 'DKH']:; mints.set_rel_basisset(self.get_basisset('BASIS_RELATIVISTIC')). mints.one_electron_integrals(); self.initialize_jk(self.memory_jk_, jk=jk); if self.V_potential():; self.V_potential().build_collocation_cache(self.memory_collocation_). core.timer_on(""HF: Form core H""); self.form_H(); core.timer_off(""HF: Form core H""). if efp_enabled:; # EFP: Add in permanent moment contribution and cache; core.timer_on(""HF: Form Vefp""); verbose = core.get_option('SCF', ""PRINT""); Vefp = modify_Fock_permanent(self.molecule(), mints, verbose=verbose-1); Vefp = core.Matrix.from_array(Vefp); self.H().add(Vefp); Horig = self.H().clone(); self.Horig = Horig; core.print_out("" QM/EFP: iterating Total Energy including QM/EFP Induction\n""); core.timer_off(""HF: Form Vefp""). core.timer_on(""HF: Form S/X""); self.form_Shalf(); core.timer_off(""HF: Form S/X""). co",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/procrouting/scf_proc/scf_iterator.html:6011,integrat,integratals,6011,psi4manual/1.3.2/_modules/psi4/driver/procrouting/scf_proc/scf_iterator.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/procrouting/scf_proc/scf_iterator.html,1,['integrat'],['integratals']
Deployability,"ry""). list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake). ################ Options: Overview and Not Otherwise Mentioned ###############. # <<< CMake build overview >>>; #; # >>> ls; # external/ COPYING psi4/ tests/ ...; # >>> cmake -S. -Bobjdir -DCMAKE_INSTALL_PREFIX=/path/to/install-psi4 ...; # ...; # -- Generating done; # -- Build files have been written to: /current/dir/objdir; # >>> cmake --build objdir --target install -j`getconf _NPROCESSORS_ONLN`. # <<< Required build dependencies that Psi4 can't build itself >>>; #; # - CMake (e.g., `conda install cmake`); # - C++ and C compilers (C++14 compliant); # - BLAS/LAPACK (also runtime; e.g., `conda install mkl-devel`); # - Python (also runtime; interpreter and headers; e.g., `conda install python`); # - NumPy (also runtime; avoidable at buildtime if gau2grid pre-built; e.g., `conda install numpy`); # - networkx >=2.4 (runtime only; e.g., `conda install networkx`); # - pint (runtime only; e.g., `conda install pint -c conda-forge`); # - pydantic >=1.0 (runtime only; e.g., `conda install pydantic -c conda-forge`); # - msgpack-python (runtime only; e.g., `conda install msgpack-python`); # - mpfr (for Libint2; e.g., `conda install mpfr`)); # - Eigen (for Libint2; e.g., `conda install eigen`). # These three ""### Options ###"" sections contain useful CMake variables for build configuration. # <<< Compilers and flags >>>; #; # - CMAKE_C_COMPILER ""C compiler""; # - CMAKE_C_FLAGS ""Additional C flags""; # - CMAKE_CXX_COMPILER ""C++ compiler""; # - CMAKE_CXX_FLAGS ""Additional C++ flags""; # - CMAKE_Fortran_COMPILER ""Fortran compiler (required for some add-ons)""; # - CMAKE_Fortran_FLAGS ""Additional Fortran flags"". # <<< Detecting dependencies and add-ons >>>; #; # - Python_EXECUTABLE ""Python interpreter to use (e.g., /path/to/bin/python3.7)""; # - Python_LIBRARY ""Python library that goes with the interpreter (e.g., /path/to/lib/python3.7.so)""; # - Python_INCLUDE_DIR ""Path to the python include files (e.g., /path/to/inclu",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/build_planning-1.html:14320,install,install,14320,psi4manual/1.4.0/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/build_planning-1.html,4,['install'],['install']
Deployability,"ryOperation¶; Performs the transform arg2 * arg1 * arg2~. transpose(self: psi4.core.SymmetryOperation) → None¶; Performs transposition of matrix operation. unit(self: psi4.core.SymmetryOperation) → None¶; Set equal to a unit matrix. zero(self: psi4.core.SymmetryOperation) → None¶; Zero out the symmetry operation. E(self: psi4.core.SymmetryOperation) → None; Set equal to E. c2_x(self: psi4.core.SymmetryOperation) → None; Set equal to C2 about the x axis. c2_y(self: psi4.core.SymmetryOperation) → None; Set equal to C2 about the y axis. c2_z(self: psi4.core.SymmetryOperation) → None; Set equal to C2 about the z axis. i(self: psi4.core.SymmetryOperation) → None; Set equal to an inversion. operate(self: psi4.core.SymmetryOperation, arg0: psi4.core.SymmetryOperation) → psi4.core.SymmetryOperation; Performs the operation arg2 * arg1. rotate_n(self: psi4.core.SymmetryOperation, arg0: int) → None; Set equal to a clockwise rotation by 2pi/n. rotate_theta(self: psi4.core.SymmetryOperation, arg0: float) → None; Set equal to a clockwise rotation by theta. sigma_xy(self: psi4.core.SymmetryOperation) → None; Set equal to reflection in xy plane. sigma_xz(self: psi4.core.SymmetryOperation) → None; Set equal to reflection in xz plane. sigma_yz(self: psi4.core.SymmetryOperation) → None; Set equal to reflection in yz plane. trace(self: psi4.core.SymmetryOperation) → float; Returns trace of transformation matrix. transform(self: psi4.core.SymmetryOperation, arg0: psi4.core.SymmetryOperation) → psi4.core.SymmetryOperation; Performs the transform arg2 * arg1 * arg2~. transpose(self: psi4.core.SymmetryOperation) → None; Performs transposition of matrix operation. unit(self: psi4.core.SymmetryOperation) → None; Set equal to a unit matrix. zero(self: psi4.core.SymmetryOperation) → None; Zero out the symmetry operation. Navigation. Index. modules    .    .  · ; 1.1;  · . PSI4. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/api/psi4.core.symmetryoperation.html:4584,update,updated,4584,psi4manual/1.1.0/api/psi4.core.symmetryoperation.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/api/psi4.core.symmetryoperation.html,1,['update'],['updated']
Deployability,"r–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples:. 1; 2>>> # [1] Analytic hf optimization; >>> optimize('hf'). 1; 2; 3; 4>>> # [2] Finite difference mp5 optimization with gradient; >>> # printed to output file; >>> e, wfn = opt('mp5', return_wfn='yes'); >>> wfn.gradient().print_out(). 1; 2; 3>>> # [3] Forced finite difference hf optimization run in; >>> # embarrassingly parallel fashion; >>> optimize('hf', dertype='energy', mode='sow'). 1; 2>>> # [4] Can automatically perform complete basis set extrapolations; >>> optimize('MP2/cc-pV([D,T]+d)Z'). 1; 2; 3; 4>>> # [5] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> optimize(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). 1; 2; 3; 4; 5; 6; 7; 8>>> # [6] Get info like geometry, gradient, energy back after an; >>> # optimization fails. Note that the energy and gradient; >>> # correspond to the last optimization cycle, whereas the; >>> # geometry (by default) is the anticipated *next* optimization step.; >>> try:; >>> optimize('hf/cc-pvtz'); >>> except psi4.OptimizationConvergenceError as ex:; >>> next_geom_coords_as_numpy_array = np.asarray(ex.wfn.molecule().geometry()). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 July 2018 04:21AM.; Created using Sphinx 1.7.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/api/psi4.driver.opt-1.html:13769,update,updated,13769,psi4manual/1.2.1/api/psi4.driver.opt-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/api/psi4.driver.opt-1.html,4,['update'],['updated']
Deployability,"r’s plot appears at https://psicode.netlify.app/posts/downloads/ . Update copyright year¶. cd ~/path/to/psi4; Primary target is licenses. grep -rl ""(c) 2007-2017"" * | xargs sed -i '' ""s/(c) 2007-2017/(c) 2007-2018/g""; On Linux, drop the '' in above command; Need to do psi4/ and docs/ dirs. Also, license in these files. tests/runtest.py; README.md. Also, in content of psi4/doc/sphinxman/source/conf.py.in#L130. Update counter scripts¶. Log onto vergil as cdsgroup.; Add new years, Python versions, and Psi4 versions as needed.; check vergil /home/cdsgroup/psi4meta/download-analysis/installer: vi downloads_updater.py any new patterns to add?; check vergil if changing any download patterns. Update samples¶. Run make sphinxman at least once by hand; Check in resulting psifiles.py and all the updated and new samples/ files and dirs; Make a lone PR and warn reviewers not to read it, since autogenerated. Collect new authors¶. Survey contributions to current Milestone. Add new contributors to the release notes GitHub issue.; Figure out any new “Additional Contributors” authors since last release.; Get permission of new authors and their particulars for codemeta.json.; Edit psi4/header.py accordingly and make PR. Run long tests¶. Run the full test suite with threading parallelism on. There’s one CC test that’s a known fail; in parallel b/c it sets memory very low, iirc. CTest (CLI):; +++ b/tests/runtest.py; @@ -104,7 +104,7 @@ def backtick(exelist):. # run psi4 and collect testing status from any compare_* in input file; if os.path.isfile(infile):; - exelist = [psi, infile, outfile, '-l', psidatadir]; + exelist = [psi, infile, outfile, '-l', psidatadir, '-n2']; # On Windows set Python interpreter explicitly as the shebang is ignored; if sys.platform.startswith('win'):. Pytest (API):; +++ b/tests/pytests/conftest.py; @@ -22,6 +22,7 @@ def pytest_collection_modifyitems(config, items):; def set_up_overall(request, tmp_path_factory):; import psi4. + psi4.core.set_num_threads(2); ps",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/manage_release.html:2593,release,release,2593,psi4manual/1.9.x/manage_release.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/manage_release.html,2,['release'],['release']
Deployability,"s (1, 2) in the basis of fragments (1, 2).; ...; N-Body: Complex Energy (fragments = (1, 2), basis = (1, 2): -257.41867403127321); ...; ==> N-Body: Counterpoise Corrected (CP) energies <==. n-Body Total Energy [Eh] I.E. [kcal/mol] Delta [kcal/mol]; 1 -257.418648109779 0.000000000000 0.000000000000; 2 -257.418674031273 -0.016265984132 -0.016265984132. And that’s it! The only remaining part of the example is a little table of the different R values and the CP-corrected CCSD(T) energies, converted from atomic units (Hartree) to kcal mol\(^{-1}\) by multiplying by the automatically-defined conversion factor psi4.constants.hartree2kcalmol. Psi4 provides several built-in physical constants and conversion factors, as described in the Psi4 manual section Physical; Constants. The table can be printed either to the screen, by using standard Python ``print()` syntax <https://docs.python.org/3/whatsnew/3.0.html#print-is-a-function>`__, or to the designated output file output.dat using Psi4’s built-in function psi4.core.print_out() :psicode:[API] <psi4manual/master/api/psi4.core.print_out> (C style printing).; As we’ve seen so far, the combination of Psi4 and Python creates a unique, interactive approach to quantum chemistry. The next section will explore this synergistic relationship in greater detail, describing how even very complex tasks can be done very easily with Psi4. [ ]:. table of contents. PsiAPI Tutorial: Using Psi4 as a Python Module; I. Basic Input Structure; II. Running a Basic Hartree-Fock Calculation; III. Geometry Optimization and Vibrational Frequency Analysis; IV. Analysis of Intermolecular Interactions; V. Potential Surface Scans and Counterpoise Correction Made Easy. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. A PSI4 Tutorial; PsiAPI Tutorial: Using Psi4 as a Python Module. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/psiapi.html:23965,update,updated,23965,psi4manual/1.8.x/psiapi.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/psiapi.html,1,['update'],['updated']
Deployability,"s (dict) – {1: 'ccsd(t)', 2: 'mp2', 'supersystem': 'scf'} || {1: 2, 2: 'ccsd(t)', 3: 'mp2'} || etc; Dictionary of different levels of theory for different levels of expansion; Note that method_string is not used in this case. supersystem computes; all higher order n-body effects up to the number of fragments. embedding_charges (dict) – {1: [-0.834, 0.417, 0.417], ..}; Dictionary of atom-centered point charges. keys: 1-based index of fragment, values: list of charges for each fragment. charge_method (str) – scf/6-31g || b3lyp/6-31g* || etc; Method to compute point charges for monomers. Overridden by embedding_charges; if both are provided. charge_type (str) – MULLIKEN_CHARGES || LOWDIN_CHARGES; Default is MULLIKEN_CHARGES. The nbody function computes counterpoise-corrected (CP), non-CP (noCP), and Valiron-Mayer Function Counterpoise (VMFC) interaction energies for complexes composed of arbitrary numbers of monomers.; Examples :; # Counterpoise corrected CCSD(T) energies for the Helium dimer; molecule mol {; He; --; He 1 3; }; # Calculate interaction energies only (skips monomers in monomer basis):; energy('CCSD(T)', bsse_type='cp'); # Calculate interaction and total energies, return interaction energies:; energy('CCSD(T)', bsse_type=['cp','nocp']); # Calculate and return counterpoise-corrected gradient; # Useful for e.g. CP-corrected geometry optimization; gradient('CCSD(T)', bsse_type='cp', return_total_data=True). # noCP, VMFC, and CP energy for a helium cluster, limited at 3 bodies; molecule mol {; He 0 0 0; --; He 0 0 4; --; He 0 4 0; --; He 4 0 0; }. # Returns the nocp energy as its first in the list; energy('CCSD(T)', bsse_type=['nocp', 'cp', 'vmfc'], max_nbody=3). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Psithon Functions: Invoking a Calculation; Basis Set Superposition Corrections. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/nbody-1.html:4367,update,updated,4367,psi4manual/1.4.0/nbody-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/nbody-1.html,2,['update'],['updated']
Deployability,"s (dict) – {1: 'ccsd(t)', 2: 'mp2', 'supersystem': 'scf'} || {1: 2, 2: 'ccsd(t)', 3: 'mp2'} || etc; Dictionary of different levels of theory for different levels of expansion; Note that method_string is not used in this case. supersystem computes; all higher order n-body effects up to the number of fragments. embedding_charges (dict) – {1: [-0.834, 0.417, 0.417], ..}; Dictionary of atom-centered point charges. keys: 1-based index of fragment, values: list of charges for each fragment. charge_method (str) – scf/6-31g || b3lyp/6-31g* || etc; Method to compute point charges for monomers. Overridden by embedding_charges; if both are provided. charge_type (str) – MULLIKEN_CHARGES || LOWDIN_CHARGES; Default is MULLIKEN_CHARGES. The nbody function computes counterpoise-corrected (CP), non-CP (noCP), and Valiron-Mayer Function Counterpoise (VMFC) interaction energies for complexes composed of arbitrary numbers of monomers.; Examples :; # Counterpoise corrected CCSD(T) energies for the Helium dimer; molecule mol {; He; --; He 1 3; }; # Calculate interaction energies only (skips monomers in monomer basis):; energy('CCSD(T)', bsse_type='cp'); # Calculate interaction and total energies, return interaction energies:; energy('CCSD(T)', bsse_type=['cp','nocp']); # Calculate and return counterpoise-corrected gradient; # Useful for e.g. CP-corrected geometry optimization; gradient('CCSD(T)', bsse_type='cp', return_total_data=True). # noCP, VMFC, and CP energy for a helium cluster, limited at 3 bodies; molecule mol {; He 0 0 0; --; He 0 0 4; --; He 0 4 0; --; He 4 0 0; }. # Returns the nocp energy as its first in the list; energy('CCSD(T)', bsse_type=['nocp', 'cp', 'vmfc'], max_nbody=3). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Psithon Functions: Invoking a Calculation; Basis Set Superposition Corrections. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/nbody-1.html:4367,update,updated,4367,psi4manual/1.5.0/nbody-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/nbody-1.html,2,['update'],['updated']
Deployability,"s (unless you want to try the CMake; GUI, which the developers have never looked at). However, the top half of; the main CMakeLists.txt is a passable summary:; LANGUAGES C CXX); set(psi4_URL ""http://www.psicode.org/""); set(psi4_EMAIL ""psi4aiqc+cmake@gmail.com""); set(psi4_LICENSE ""GNU Lesser General Public License, version 3 (LGPL-3.0)""); set(psi4_DESCRIPTION ""Open-Source Quantum Chemistry""). list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake). ################ Options: Overview and Not Otherwise Mentioned ###############. # <<< CMake build overview >>>; #; # >>> ls; # external/ COPYING psi4/ tests/ ...; # >>> cmake -S. -Bobjdir -DCMAKE_INSTALL_PREFIX=/path/to/install-psi4 ...; # ...; # -- Generating done; # -- Build files have been written to: /current/dir/objdir; # >>> cmake --build objdir --target install -j`getconf _NPROCESSORS_ONLN`. # <<< Required build dependencies that Psi4 can't build itself >>>; #; # - CMake (e.g., `conda install cmake`); # - C++ and C compilers (C++14 compliant); # - BLAS/LAPACK (also runtime; e.g., `conda install mkl-devel`); # - Python (also runtime; interpreter and headers; e.g., `conda install python`); # - NumPy (also runtime; avoidable at buildtime if gau2grid pre-built; e.g., `conda install numpy`); # - networkx >=2.4 (runtime only; e.g., `conda install networkx`); # - pint (runtime only; e.g., `conda install pint -c conda-forge`); # - pydantic >=1.0 (runtime only; e.g., `conda install pydantic -c conda-forge`); # - msgpack-python (runtime only; e.g., `conda install msgpack-python`); # - mpfr (for Libint2; e.g., `conda install mpfr`)); # - Eigen (for Libint2; e.g., `conda install eigen`). # These three ""### Options ###"" sections contain useful CMake variables for build configuration. # <<< Compilers and flags >>>; #; # - CMAKE_C_COMPILER ""C compiler""; # - CMAKE_C_FLAGS ""Additional C flags""; # - CMAKE_CXX_COMPILER ""C++ compiler""; # - CMAKE_CXX_FLAGS ""Additional C++ flags""; # - CMAKE_Fortran_COMPILER ""Fortran compiler (re",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/build_planning-1.html:13908,install,install,13908,psi4manual/1.4.0/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/build_planning-1.html,4,['install'],['install']
Deployability,"s = %f\n Symbol = %s\n Label = %s\n Ghosted = %s\n Coordinates = %s\n\n' % \; (self.entry_number(), self.is_computed(), self.Z(), self.charge(), self.mass(), self.symbol(), self.label(), self.is_ghosted(), self.coordinates). [docs]class CartesianEntry(CoordEntry):; """"""Class to hold all information about an atom, including its; coordinate specification as three Cartesians. """"""; def __init__(self, entry_number, Z, charge, mass, symbol, label, x, y, z):; CoordEntry.__init__(self, entry_number, Z, charge, mass, symbol, label); self.x = x; self.y = y; self.z = z. [docs] def compute(self):; """"""Computes the values of the coordinates (in whichever units; were inputted), returning them in a Vector. """"""; if self.computed:; return self.coordinates; self.coordinates[0] = self.x.compute(); self.coordinates[1] = self.y.compute(); self.coordinates[2] = self.z.compute(); self.computed = True; return self.coordinates. [docs] def set_coordinates(self, x, y, z):; """"""Given the current set of coordinates, updates the values of this; atom's coordinates and any variables that may depend on it. """"""; self.coordinates[0] = x; self.coordinates[1] = y; self.coordinates[2] = z. self.x.rset(x); self.y.rset(y); self.z.rset(z). self.computed = True. [docs] def type(self):; """"""The type of CoordEntry specialization.""""""; return 'CartesianCoord'. [docs] def print_in_input_format(self):; """"""Prints the updated geometry, in the format provided by the user.""""""; xstr = self.x.variable_to_string(10); ystr = self.y.variable_to_string(10); zstr = self.z.variable_to_string(10); return ""\t%16s %16s %16s\n"" % (xstr, ystr, zstr); # should go to outfile. [docs] def invalidate(self):; """"""Flags the current coordinates as being outdated.""""""; self.computed = False; self.x.invalidate(); self.y.invalidate(); self.z.invalidate(). [docs] def clone(self):; """"""Returns new, independent CartesianEntry object""""""; return copy.deepcopy(self). [docs] def everything(self):; CoordEntry.everything(self); print '\nCartesianEntry\n Typ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/_modules/qcdb/libmintscoordentry.html:8524,update,updates,8524,psi4manual/4.0b3/_modules/qcdb/libmintscoordentry.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/_modules/qcdb/libmintscoordentry.html,2,['update'],['updates']
Deployability,"s = %f\n Symbol = %s\n Label = %s\n Ghosted = %s\n Coordinates = %s\n\n' % \; (self.entry_number(), self.is_computed(), self.Z(), self.charge(), self.mass(), self.symbol(), self.label(), self.is_ghosted(), self.coordinates). [docs]class CartesianEntry(CoordEntry):; """"""Class to hold all information about an atom, including its; coordinate specification as three Cartesians. """"""; def __init__(self, entry_number, Z, charge, mass, symbol, label, x, y, z):; CoordEntry.__init__(self, entry_number, Z, charge, mass, symbol, label); self.x = x; self.y = y; self.z = z. [docs] def compute(self):; """"""Computes the values of the coordinates (in whichever units; were inputted), returning them in a Vector. """"""; if self.computed:; return self.coordinates; self.coordinates[0] = self.x.compute(); self.coordinates[1] = self.y.compute(); self.coordinates[2] = self.z.compute(); self.computed = True; return self.coordinates. [docs] def set_coordinates(self, x, y, z):; """"""Given the current set of coordinates, updates the values of this; atom's coordinates and any variables that may depend on it. """"""; self.coordinates[0] = x; self.coordinates[1] = y; self.coordinates[2] = z. self.x.rset(x); self.y.rset(y); self.z.rset(z). self.computed = True. [docs] def type(self):; """"""The type of CoordEntry specialization.""""""; return 'CartesianCoord'. [docs] def print_in_input_format(self):; """"""Prints the updated geometry, in the format provided by the user.""""""; xstr = self.x.variable_to_string(12); ystr = self.y.variable_to_string(12); zstr = self.z.variable_to_string(12); return "" %17s %17s %17s\n"" % (xstr, ystr, zstr); # should go to outfile. [docs] def invalidate(self):; """"""Flags the current coordinates as being outdated.""""""; self.computed = False; self.x.invalidate(); self.y.invalidate(); self.z.invalidate(). [docs] def clone(self):; """"""Returns new, independent CartesianEntry object""""""; return copy.deepcopy(self). [docs] def everything(self):; CoordEntry.everything(self); print '\nCartesianEntry\n Type",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/_modules/qcdb/libmintscoordentry.html:9344,update,updates,9344,psi4manual/4.0b5/_modules/qcdb/libmintscoordentry.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/_modules/qcdb/libmintscoordentry.html,1,['update'],['updates']
Deployability,"s Algebraic-Diagrammatic Construction (ADC) propagator computations for excited states. General¶. CUTOFF_AMPS_PRINT¶. Tolerance for extracted or printed amplitudes. This option is only available for the adcc backend. Type: double; Default: 0.01. GAUGE¶. Specifies the choice of representation of the electric dipole operator. * Acceptable values are LENGTH (default) and VELOCITY. Type: string; Possible Values: LENGTH, VELOCITY; Default: LENGTH. KIND¶. The kind of states to compute. Type: string; Possible Values: SINGLET, TRIPLET, SPIN_FLIP, ANY; Default: SINGLET. MAXITER¶. Maximum number of iterations. Type: integer; Default: 50. MAX_NUM_VECS¶. Maximum number of subspace vectors. A negative value uses * the adcc default (roughly between 20 and 5 * N_GUESSES). This option is only available for the adcc backend. Type: integer; Default: -1. NUM_CORE_ORBITALS¶. Number of orbitals to place in the core. This option is only available for the adcc backend. Type: integer; Default: 0. NUM_GUESSES¶. Number of guess vectors to generate and use. Negative values keep * the adcc default (currently 2 * ROOTS_PER_IRREP). This option is only available for the adcc backend. Type: integer; Default: -1. REFERENCE¶. Reference wavefunction type. Type: string; Possible Values: RHF, UHF; Default: RHF. ROOTS_PER_IRREP¶. The number of poles / excited states to obtain per irrep vector. Type: array; Default: No Default. R_CONVERGENCE¶. Convergence threshold for ADC matrix diagonalisation. Negative values keep the * adcc default (1e-6). Type: conv double; Default: -1. table of contents. ADC; General; CUTOFF_AMPS_PRINT; GAUGE; KIND; MAXITER; MAX_NUM_VECS; NUM_CORE_ORBITALS; NUM_GUESSES; REFERENCE; ROOTS_PER_IRREP; R_CONVERGENCE. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Keywords by Module; ADC. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/autodir_options_c/module__adc.html:2056,update,updated,2056,psi4manual/master/autodir_options_c/module__adc.html,https://psicode.org,https://psicode.org/psi4manual/master/autodir_options_c/module__adc.html,1,['update'],['updated']
Deployability,"s ERIs.; For converged RHF and UHF references, the singles correction,. is zero due to the Brillioun Condition, and the first contribution to the; perturbation series is at the second order:. In the DFMP2 module, the first-order contribution, or “singles energy” is; always evaluated. This term is a significant contributor to the total; second-order energy if a ROHF reference is used. In this case, we have chosen; to use the ROHF-MBPT(2) ansatz, in which the ROHF orbitals are; semicanonicalized, the resultant nonzero Fock matrix elements are used; to form the singles amplitudes, and then the second-order amplitudes are formed; with the semicanonical spin orbitals via the same machinery as a UHF-MP2. Note; that the singles energy should be very close to zero for RHF and UHF references;; if it is not, there is a good chance your orbitals are not well converged.; Tighten the SCF E_CONVERGENCE and/or D_CONVERGENCE keywords; and try again.; To increase the efficiency of MP2 energy evaluation, spin integration; and simplification is carried out. This also allows for the identification of; Same-Spin (SS) and Opposite-Spin (OS) terms for use in Grimme’s Spin-Component; Scaled (SCS) MP2. For RHF-MP2 (also labeled as RMP2), the spin-free equations are; (note that the integrals are now chemist’s integrals over spatial orbitals). and. For UHF-MP2 (also labeled as UMP2) and the second-order contribution to; ROHF-MBPT(2) using semicanonical orbitals, the spin-free equations are. and. Note that the UHF-MP2 equations use three classes of integrals, while the; RHF-MP2 equations use only one class. Because of this, a UHF-MP2 or; ROHF-MBPT(2) energy should take roughly three times as long as an RHF-MP2; energy. Recommendations¶; All-in-all, DFMP2 should be a simple module to use, with few keywords (fully; documented in the Appendix DFMP2). Some basic recommendations are included below:. DFMP2 should be run with the -type RI or MP2FIT auxiliary; basis sets, not the -JKFIT basis sets. The",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/dfmp2-1.html:5032,integrat,integration,5032,psi4manual/1.0.0/dfmp2-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/dfmp2-1.html,10,['integrat'],['integration']
Deployability,"s alpha = 1.0; ""os"": 0.0, coefficient for opposite spin correlation in SCS methods, forces alpha = 1.0; },. ""dispersion"": { definition of dispersion corrections; ""type"": """", dispersion type - ""d2"", ""d3zero"", ""d3bj"" etc., see empirical_dispersion.py; ""params"": {}, parameters for the dispersion correction; ""nlc"": False (optional) logical switch to turn off nlc (e.g. VV10) correction defined by LibXC; ""citation"": """", special reference for the dispersion correction parameters, appended to output; (if defined in driver, not if defined in input file); },. One can also use the dft_functional keyword argument to use the; orbitals generated by DFT for correlated wavefunction methods:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17# MP2 with a PBE0 reference computation. molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis 6-31G; dft_spherical_points 302; dft_radial_points 99; reference rks; }. mp2_dft = energy(""MP2"", dft_functional=""PBE0""). Note that this would only update the generic Psi variables (e.g., “CURRENT ENERGY”) and not the MP2 or DFT variables.; Psi4 also supports easy customization and manipulation of DFT functionals. The values of alpha and omega can be adjusted with the DFT_ALPHA; and DFT_OMEGA keywords. For example, for LRC functionals, one can control the fraction of long-range Hartree-Fock and short-range DFA by changing DFT_OMEGA:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22molecule ch2 {; 0 3; C; H 1 R; H 1 R 2 A. R = 1.075; A = 133.93; }. set reference uhf; set guess gwh; set basis cc-pvdz; set e_convergence 8. # Override the default value of omega; set dft_omega 2.0. E = energy('wb97x'). # Revoke the change for later computations if needed; revoke_global_option_changed('DFT_OMEGA'). This feature would be useful after finishing the IP fitting procedure, for example. table of contents. DFT: Density Functional Theory; Theory; Minimal Input; Spin/Symmetry Treatment; Functional Selection; Grid Selectio",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/dft-1.html:31668,update,update,31668,psi4manual/1.3.2/dft-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/dft-1.html,2,['update'],['update']
Deployability,"s and doubles (CCSD); RHF; dipole, quadrupole, polarizability, rotation, roa_tensor. dct; density cumulant (functional) theory; [manual]; RHF/UHF; Listed here. omp2; orbital-optimized second-order; MP perturbation theory; [manual]; RHF/UHF; Listed here; Density fitted only. omp3; orbital-optimized third-order; MP perturbation theory; [manual]; RHF/UHF; Listed here; Density fitted only. omp2.5; orbital-optimized MP2.5; [manual]; RHF/UHF; Listed here; Density fitted only. olccd; orbital optimized LCCD; [manual]; RHF/UHF; Listed here; Density fitted only. eom-cc2; 2nd-order approximate EOM-CCSD; RHF; oscillator_strength, rotational_strength. eom-ccsd; Equation-of-motion CCSD (EOM-CCSD); RHF; oscillator_strength, rotational_strength. cisd, cisdt,; cisdt, cisdtq,; ci5, …, fci; Configuration interaction; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. casscf, rasscf; Multi-configurational SCF; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. adc(0), adc(1),; …, adc(3),; cvs-adc(0), …; cvs-adc(3); Algebraic-diagrammatic construction methods; [manual]; RHF/UHF; dipole, transition_dipole, oscillator_strength,; rotational_strength. Parameters:. name (str) – 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. properties (List[str]) – \(\Rightarrow\) [] \(\Leftarrow\) || ['rotation', 'polarizability', 'oscillator_strength', 'roa'] || etc.; Indicates which properties should be computed. Defaults to dipole and quadrupole. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] Optical rotation calculation; >>> properties('cc2', properties=['rotation']). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Psithon Functions: Invoking a Calculation; Property. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/prop.html:2784,update,updated,2784,psi4manual/1.7.x/prop.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/prop.html,1,['update'],['updated']
Deployability,"s are not size-extensive, meaning; that their quality degrades for larger molecules. MP2 is a less; expensive alternative giving results similar to those of CISD for small; molecules, but the quality of MP2 does not degrade for larger molecules.; Coupled-cluster singles and doubles (CCSD) is another size-extensive; alternative; it is only slightly more costly computationally than CISD,; but it typically provides significantly more accurate results.; The CI code in PSI4 is described in detail in; [Sherrill:1999:CI]. For the reasons stated above, the CI code in; PSI4 is not optimized for CISD computations. Instead, emphasis; has been placed on developing a very efficient program to handle more; general CI wavefunctions which may be helpful in more challenging cases; such as highly strained molecules or bond breaking reactions. The CI; code is based on the fast, determinant-based string formalism; of Handy [Handy:1980]. It can solve for restricted active space; configuration interaction (RAS CI) wavefunctions as described by Olsen,; Roos, Jorgensen, and Aa. Jensen [Olsen:1988]. Excitation-class; selected multi-reference CI wavefunctions, such as second-order CI,; can be formulated as RAS CI’s. A RAS CI selects determinants for the; model space as those which have no more than \(n\) holes in the lowest set; of orbitals (called RAS I) and no more than \(m\) electrons in the highest; set of orbitals (called RAS III). An intermediate set of orbitals, if; present (RAS II), has no restrictions placed upon it. All determinants; satisfying these rules are included in the RAS CI.; The DETCI module is also very efficient at computing full configuration; interaction; wavefunctions, and it is used in this capacity in the complete-active-space; self-consistent-field (CASSCF) code. It can also perform approximate; CASSCF computations in which one uses RAS restrictions on the CI excitations,; rather than doing a full CI in the active space. This is called a; RASSCF. CASSCF and RASSCF",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/detci-1.html:2489,configurat,configuration,2489,psi4manual/1.2.1/detci-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/detci-1.html,6,['configurat'],['configuration']
Deployability,"s are not size-extensive, meaning; that their quality degrades for larger molecules. MP2 is a less; expensive alternative giving results similar to those of CISD for small; molecules, but the quality of MP2 does not degrade for larger molecules.; Coupled-cluster singles and doubles (CCSD) is another size-extensive; alternative; it is only slightly more costly computationally than CISD,; but it typically provides significantly more accurate results.; The CI code in PSI4 is described in detail in; [Sherrill:1999:CI]. For the reasons stated above, the CI code in; PSI4 is not optimized for CISD computations. Instead, emphasis; has been placed on developing a very efficient program to handle more; general CI wavefunctions which may be helpful in more challenging cases; such as highly strained molecules or bond breaking reactions. The CI; code is based on the fast, determinant-based string formalism; of Handy [Handy:1980]. It can solve for restricted active space; configuration interaction (RAS CI) wavefunctions as described by Olsen,; Roos, Jorgensen, and Aa. Jensen [Olsen:1988]. Excitation-class; selected multi-reference CI wavefunctions, such as second-order CI,; can be formulated as RAS CI’s. A RAS CI selects determinants for the; model space as those which have no more than holes in the lowest set; of orbitals (called RAS I) and no more than electrons in the highest; set of orbitals (called RAS III). An intermediate set of orbitals, if; present (RAS II), has no restrictions placed upon it. All determinants; satisfying these rules are included in the CI.; The DETCI module is also very efficient at computing full configuration; interaction; wavefunctions, and it is used in this capacity in the complete-active-space; self-consistent-field (CASSCF) code. Use of DETCI for CASSCF; wavefunctions is described in another section of this manual.; As just mentioned, the DETCI module is designed for challenging; chemical systems for which simple CISD is not suitable. Because; CI",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/detci-1.html:2085,configurat,configuration,2085,psi4manual/4.0b2/detci-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/detci-1.html,8,['configurat'],['configuration']
Deployability,"s are not size-extensive, meaning; that their quality degrades for larger molecules. MP2 is a less; expensive alternative giving results similar to those of CISD for small; molecules, but the quality of MP2 does not degrade for larger molecules.; Coupled-cluster singles and doubles (CCSD) is another size-extensive; alternative; it is only slightly more costly computationally than CISD,; but it typically provides significantly more accurate results.; The CI code in Psi4 is described in detail in; [Sherrill:1999:CI]. For the reasons stated above, the CI code in; Psi4 is not optimized for CISD computations. Instead, emphasis; has been placed on developing a very efficient program to handle more; general CI wavefunctions which may be helpful in more challenging cases; such as highly strained molecules or bond breaking reactions. The CI; code is based on the fast, determinant-based string formalism; of Handy [Handy:1980]. It can solve for restricted active space; configuration interaction (RAS CI) wavefunctions as described by Olsen,; Roos, Jorgensen, and Aa. Jensen [Olsen:1988]. Excitation-class; selected multi-reference CI wavefunctions, such as second-order CI,; can be formulated as RAS CI’s. A RAS CI selects determinants for the; model space as those which have no more than holes in the lowest set; of orbitals (called RAS I) and no more than electrons in the highest; set of orbitals (called RAS III). An intermediate set of orbitals, if; present (RAS II), has no restrictions placed upon it. All determinants; satisfying these rules are included in the CI.; The DETCI module is also very efficient at computing full configuration; interaction; wavefunctions, and it is used in this capacity in the complete-active-space; self-consistent-field (CASSCF) code. Use of DETCI for CASSCF; wavefunctions is described in another section of this manual.; As just mentioned, the DETCI module is designed for challenging; chemical systems for which simple CISD is not suitable. Because; CI",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/detci-1.html:2115,configurat,configuration,2115,psi4manual/1.0.0/detci-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/detci-1.html,2,['configurat'],['configuration']
Deployability,"s as follows:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16molecule {; H; H 1 0.7; }. set {; basis cc-pvdz; scf_type df; dft_spherical_points 590 # Often needed; dft_radial_points 99 # Often needed; dft_radial_scheme treutler # Rarely needed; dft_nuclear_scheme treutler # Rarely needed; dft_basis_tolerance 1.0E-11 # Can speed things up, but benchmark the error; }. energy('b3lyp'). ERI Algorithms¶; The ERI algorithms for the Coulomb and hybrid exchange are identical to; those for Hartree–Fock. However, for LRC functionals, the long-range; exchange contributions to the Kohn–Sham matrix have only been implemented in the; DF and DIRECT algorithms. The use of DF is highly recommended for KS-DFT, as the; errors incurred by the density fitting approximation (in a proper -JKFIT; auxiliary basis) are orders of magnitude smaller than the accuracy of any known; functional.; Note: gradients with LRC functionals and DF integrals technology are not; currently enabled. We hope to have a patch for this deficit soon. Please let us; know if you have a strong need for this capability, and we will move the; priority up. IP Fitting¶; In collaboration with the Bredas group, we have developed an automatic procedure; for IP fitting of LRC functionals, based on a modified Regula-Falsi method. To; perform IP fitting, one simply calls the ip_fitting() Python macro, after; setting up a standard LRC UKS computation. A representative example is:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20memory 512 MB; from frac import *. molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; symmetry c1 # IP fitting must be run in C1 symmetry; }. set {; reference uks # UKS, as we need to do neutral/cation; basis cc-pvdz; scf_type df; dft_functional wb97; }. # Arguments are molecule object, minimum omega, maximum omega; ip_fitting(h2o, 0.4, 2.0). This performs IP fitting on water for wB97/cc-pVDZ with density fitting. A; number of neutral and cation single-point computations are run",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/dft-1.html:22006,patch,patch,22006,psi4manual/1.1.0/dft-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/dft-1.html,2,['patch'],['patch']
Deployability,"s as follows:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16molecule {; H; H 1 0.7; }. set {; basis cc-pvdz; scf_type df; dft_spherical_points 590 # Often needed; dft_radial_points 99 # Often needed; dft_radial_scheme treutler # Rarely needed; dft_nuclear_scheme treutler # Rarely needed; dft_basis_tolerance 1.0E-11 # Can speed things up, but benchmark the error; }. energy('b3lyp'). ERI Algorithms¶; The ERI algorithms for the Coulomb and hybrid exchange are identical to; those for Hartree–Fock. However, for LRC functionals, the long-range; exchange contributions to the Kohn–Sham matrix have only been implemented in the; DF and DIRECT algorithms. The use of DF is highly recommended for KS-DFT, as the; errors incurred by the density fitting approximation (in a proper -JKFIT; auxiliary basis) are orders of magnitude smaller than the accuracy of any known; functional.; Note: gradients with LRC functionals and DF integrals technology are not; currently enabled. We hope to have a patch for this deficit soon. Please let us; know if you have a strong need for this capability, and we will move the; priority up. IP Fitting¶; In collaboration with the Bredas group, we have developed an automatic procedure; for IP fitting of LRC functionals, based on a modified Regula-Falsi method. To; perform IP fitting, one simply calls the ip_fitting() Python macro, after; setting up a standard LRC UKS computation. A representative example is:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18memory 512 MB. molecule h2o {; 0 1 # must be neutral; O; H 1 1.0; H 1 1.0 2 104.5; # IP fitting runs in C1 symmetry; }. set {; reference uks # UKS, as we need to do neutral/cation; basis cc-pvdz; scf_type df; }. # Optional arguments are minimum omega, maximum omega, molecule object; omega = ip_fitting('wb97', 0.4, 2.0, molecule=h2o). This performs IP fitting on water for wB97/cc-pVDZ with density fitting. A; number of neutral and cation single-point computations are run at various valu",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/dft-1.html:22643,patch,patch,22643,psi4manual/1.2.1/dft-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/dft-1.html,2,['patch'],['patch']
Deployability,"s be; queried and set globally. Same for FREEZE_CORE. Setting-Up Calculations; The other types of options calls in python driver functions are (a); those to query what option value an upcoming c++ module is going to use; (determined by user and defaults) and (b) those to set options to govern; the course of a procedure. Finding out the intended option value for a; molecule should employ the get_option() command; (and has_option_changed() for has_changed), which; (newly) requires a module for scope. (Previously, this command used the; “active module”, which isn’t well-defined in the context of the python; driver, and consequently, the command gave variable results, depending; on whether a get_local/set_local command had been previously executed to; define the active module.); if (psi4.get_option('SCF', 'REFERENCE') == 'RHF'):; psi4.set_local_option('SCF', 'REFERENCE', 'RKS'). Setting of options in python should use the; set_local_option() command. Using the local, rather; than global, scope will ensure that the newly set option will be used by; the module. Otherwise, if the python procedure set in the global scope; and the user had happened to set that option in local scope, the local; user option will take precedence against the programmer’s intent.; (Anyone who has heard advice to “query local, set global” should forget; that and follow the new scheme outlined here.). Table Of Contents. LibOptions: globals, locals, has_changed and all that; Declaring Options; What is has_changed ?; Reading Options in Module; Handling Options in Driver. Previous topic; Programming: Using the Core Libraries; Next topic; Adding Methods to Driver. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Programming: Using the Core Libraries ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/optionshandling-1.html:11698,update,updated,11698,psi4manual/1.0.0/optionshandling-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/optionshandling-1.html,2,['update'],['updated']
Deployability,"s can wait until the installer page has been tested. Copy and edit a new file akin to data/installs/v182.yaml. Add it to the git index. Glance through the menu and notes content to make sure they’re up-to-date. This file determines; the structure of the install page.; Add or remove python versions and architectures if necessary.; Every couple years, update the default python version in datakey: python/selected and; in optsHandler at the end.; Always adjust the datakey: branch/stable block.; For releases, adjust the datakey: branch/previous and nightly blocks. Enter the scripts/ directory. If the previous release hasn’t had a snapshot saved, copy; install-generator.py into a version-labeled file, and add it to the git index.; Edit scripts/install-generator.py. Primarily, edit edition at the top.; Also, edit other arrays (stuff above ## Outputs) or messages (logic below ## Outputs); that should change. Run the install-generator.py in place. It will dump two new files, e.g.,; data/installs/cmd/{edition}.json and data/installs/dlbtn/{edition}.json. Add these to the; index (no need to inspect them).; The installer page is now ready for inspection. Run hugo server --watch=false and view in; browser at http://localhost:1313/ . Click around the options to make sure the buttons and; instructions all look right.; Iterate on the data/installs/{edition}.yaml and the install-generator.py until correct.; It’s fine to push to psicode.org to see it in place. But wait until it’s final (and all the; packages and installers are ready) to shift “latest” alias in frontmatter from whichever page is; currently active to the new page, content/installs/{edition}.md. This makes sure “Downloads”; on the navigation bar points to the new page.; Commit the new files, PR, and deploy psicode site. Collect documentation snapshot¶. Documentation is built automatically by GHA from the latest psi4 master commit. It gets pushed to; a special “master” folder on the https://github.com/psi4/psi4docs reposi",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/manage_release.html:18290,install,installs,18290,psi4manual/1.9.x/manage_release.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/manage_release.html,2,['install'],['installs']
Deployability,"s check used to contruct orbital domains for local-CC calculations. See J. Broughton and P. Pulay, J. Comp. Chem. 14, 736-740 (1993) and C. Hampel and H.-J. Werner, J. Chem. Phys. 104, 6286-6297 (1996). Type: double; Default: 0.02. LOCAL_GHOST¶. Type: integer; Default: -1. LOCAL_METHOD¶. Type of local-CIS scheme to be simulated. WERNER selects the method developed by H.-J. Werner and co-workers, and AOBASIS selects the method developed by G.E. Scuseria and co-workers. Type: string; Possible Values: AOBASIS, WERNER; Default: WERNER. LOCAL_WEAKP¶. Desired treatment of “weak pairs” in the local-CIS method. A value of NEGLECT ignores weak pairs entirely. A value of NONE treats weak pairs in the same manner as strong pairs. A value of MP2 uses second-order perturbation theory to correct the local-CIS energy computed with weak pairs ignored. Type: string; Possible Values: MP2, NEGLECT, NONE; Default: MP2. MAXITER¶. Maximum number of iterations. Type: integer; Default: 500. REFERENCE¶. Reference wavefunction type. Type: string; Possible Values: RHF, ROHF, UHF; Default: RHF. ROOTS_PER_IRREP¶. The number of electronic states to computed, per irreducible representation. Type: array; Default: No Default. R_CONVERGENCE¶. Convergence criterion for CIS wavefunction. Type: conv double; Default: 1e-7. Expert¶. WFN¶. Wavefunction type. Type: string; Possible Values: CCSD, CCSD_T, EOM_CCSD, CIS; Default: CIS. Table Of Contents. CIS; General; DIAG_METHOD; DOMAINS; DOMAIN_PRINT; LOCAL; LOCAL_AMPS_PRINT_CUTOFF; LOCAL_CUTOFF; LOCAL_GHOST; LOCAL_METHOD; LOCAL_WEAKP; MAXITER; REFERENCE; ROOTS_PER_IRREP; R_CONVERGENCE. Expert; WFN. Previous topic; SCS_CEPA; Next topic; DIAG_METHOD; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Appendices »; Keywords by Module ». © Copyright 2012, The Psi4 Project.; Last updated on Oct 16, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/autodir_options_c/module__cis-1.html:2720,update,updated,2720,psi4manual/4.0b3/autodir_options_c/module__cis-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodir_options_c/module__cis-1.html,2,['update'],['updated']
Deployability,"s completed by performing the orbital transformation of the; integrals. As in the simultaneous algorithm, the DIIS; extrapolation is used to accelerate convergence. Two-step algorithm is; only available for the DC-06 and DC-12 methods.; 3) Quadratically-convergent algorithm (set ALGORITHM to QC). The; orbital and cumulant update equations are solved using the Newton-Raphson; method. Each macroiteration of the quadratically-convergent algorithm consists; of a single Newton-Raphson update followed by the orbital transformation; of the integrals. The solution of the Newton-Raphson equations is performed; iteratively using the preconditioned conjugate gradients method, where only the; product of the electronic Hessian with the step vector is computed for; efficiency. By default, the electronic Hessian is build for both the cumulant and orbital; updates and both updates are performed simultaneously. Setting the QC_TYPE; option to TWOSTEP will perform the Newton-Raphson update only for the orbitals,; while the equations for the cumulant will be solved using a standard Jacobi update.; If requested by the user (set QC_COUPLING to TRUE), the electronic Hessian can include; matrix elements that couple the orbitals and the density cumulant.; The computation of these coupling elements increases; the cost of the macroiteration, but usually leads to faster convergence and is; recommended for open-shell systems.; It is important to note that the quadratically-convergent algorithm is not yet fully; optimized and often converges slowly when the RMS of the cumulant or; the orbital gradient is below .; The choice of the iterative algorithm can significantly affect the cost of the; energy computation. While the two-step algorithm requires a small number of; disk-intensive integral transformations, the simultaneous; algorithm benefits from a smaller number of expensive ; cumulant updates. As a result, for small closed-shell systems the two-step; algorithm is usually preferred, while for",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/dcft-1.html:9495,update,update,9495,psi4manual/1.0.0/dcft-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/dcft-1.html,4,['update'],['update']
Deployability,"s directory, otherwise the PSI4; configure script will fail (autoreconf is provided by package autoconf,; but it calls another program provided by libtool, so that package must; also be installed):; >>> cd madness; >>> autoreconf; >>> cd .. Configuration and Compilation; Make an object directory in which you can compile the code; >>> mkdir obj. Next you need to configure the code. Find a configuration; option line or combination of; configuration options at Section III(1)A. Either, use the line directly:; >>> cd obj; >>> ../configure [your compilation configuration options here]. or, save your configuration options for a future compilation.; In the top-level psi4 directory, create a file like “do-configure” with; the configure command and options on one line.; >>> cat do-configure; ../configure [your compilation configuration options here]; >>> chmod u+x do-configure; >>> cd obj; >>> ../do-configure. Compile the code, run the tests, and (if tests pass) install it.; >>> make; >>> make tests; >>> make install. That’s it! The details about final user configuration are given below in; Section III(7). If something goes wrong,; check Section VI about common compilation problems. III. Detailed Installation Instructions¶; This section provides a more detailed explanation of the procedure for; compiling and installing the PSI4 package. Step 1: Configuration. General Information about Configuration; First, we recommend that you choose for the top-level psi4 source; directory something other than /usr/local/psi; $HOME/psi4 or; /usr/local/src/psi4 are convenient choices. Next, in the top-level psi4; source directory you’ve chosen, first run autoconf to generate the configure; script from configure.ac. It is best to keep the source code separate; from the compilation area, so you must first choose a subdirectory for; compilation of the codes. A simple option is psi4/objdir, which should; work for most environments. However, if you need executables for several; architectures, you ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/installfile.html:4595,install,install,4595,psi4manual/4.0b3/installfile.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/installfile.html,2,['install'],['install']
Deployability,"s empty, C-only, X-only and XC superfunctionals. ‘super_mix’ showcases how to use different screening values for X and C parts. SCF will fail or crash (nans) without screening!. freq-isotope1; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures and pressures but not for different isotopologs. pywrap-cbs1; Various basis set extrapolation tests. mp3-grad2; MP3 cc-pVDZ gradient for the NO radical. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. dft-grad-lr3; wB97X-D test for a large UKS molecule update ref gradient due to new BraggSlater radii. dfomp2p5-grad1; DF-OMP2.5 cc-pVDZ gradients for the H2O molecule. lccd-grad1; LCCD cc-pVDZ gradient for the H2O molecule. freq-masses; check nonphysical masses possible. dfep2-1; Compute three IP and 2 EA’s for the PH3 molecule. scf-cholesky-basis; incremental Cholesky filtered SCF. rasci-h2o; RASCI/6-31G** H2O Energy Point. dft-grad2; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN updated ref gradient due to new BraggSlater radii. props4; Electrostatic potential and electric field evaluated on a grid around water. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. cepa1; cc-pvdz H2O Test CEPA(1) Energy. psimrcc-pt2; Mk-MRPT2 single point. \(^1A_1\) F2 state described using the Ms = 0 component of the singlet. Uses TCSCF singlet orbitals. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). explicit-am-basis; Check that basis sets can be input with explicit angular momentum format. dct11; Restricted DF-DCT ODC-12 energies with linearly dependent basis functions. sapt1; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html:2981,update,updated,2981,psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html,4,['update'],['updated']
Deployability,"s for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC Dependencies and Extensions¶. What are the add-on capabilities for Psi4 and what are their dependencies; How to use a local Add-On repository in the Psi4 build; How to configure CheMPS2 for building Psi4; How to fix “plugin needed to handle lto object” when building CheMPS2; How to configure dkh for building Psi4; How to configure libefp for building Psi4; How to configure erd for building Psi4; How to configure gdma for building Psi4; How to configure Libint for building Psi4; How to configure PCMSolver for building Psi4. Testing¶. How to see CTest testing errors; How to run a subset of tests; How to run a minute’s worth of tests; How to test a Psi4 installation. Runtime Setup¶. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; How to set up the scratch directory; Why not to set PSIDATADIR; How to configure paths for PsiAPI. Running PSI4¶. What command line options does Psi4 have; What environment variables affect Psi4; What Python is Psi4 running; What Psi4 version is running; How to use Psi4 within a PBS queue; How do I retain specific Psi4 scratch files. Runtime Errors and Debugging¶. How to use gdb and lldb with Psi4; How to compile for debugging; How to fix “undefined symbol: _Py_FalseStruct”; How to fix error “RuntimeError: value for ERI”. Managing Code¶. What is the directory layout of the installed or staged Psi4; What is the suggested GitHub workflow; How to highlight git merge conflicts in vi. Miscellaneous¶. How to refer to Psi4. table of contents. Build & Run FAQ; Obtaining and Updating PSI4; Configuring and Installing PSI4 via Binary; Configuring, Building, and Installing PSI4 via Source; Non-QC Dependencies; QC Dependenci",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/build_faq-1.html:3058,install,installation,3058,psi4manual/1.2.1/build_faq-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_faq-1.html,2,['install'],['installation']
Deployability,"s import cpuinfo) https://github.com/workhorsy/py-cpuinfo (transitive dependency of QCEngine); psutil https://github.com/giampaolo/psutil (transitive dependency of QCEngine). Dropped Dependencies:. Boost (September 2016; dropped by v1.1); deepdiff https://github.com/seperman/deepdiff (May 2019; dropped by v1.4); MPFR https://www.mpfr.org/ (Mar 2022; dropped by v1.6) no longer needed to compile against Libint2; Perl for testing (April 2022; dropped by v1.6). What are the add-on capabilities for Psi4 and what are their dependencies¶; Each of the items below is an independent additional capability that can; be built with PSI4. Sub-items below are the respective additional; dependencies of the add-on. Select which, if any, you want, and examine; the links for appropriate enabling arguments to cmake. Note that many; are available pre-built from conda. PSI4 Testing. CTest https://cmake.org/download/; pytest (for installed testing) http://doc.pytest.org/en/latest/; pytest-xdist (for installed testing many tests at once) https://github.com/pytest-dev/pytest-xdist. PSI4 Documentation (available pre-built at psicode.org/psi4manual/master/index.html). Sphinx (3.5+) http://sphinx-doc.org; Perl (for some auto-documentation scripts) https://www.perl.org/; nbsphinx (for converting Jupyter notebooks) http://nbsphinx.readthedocs.io/en/jupyter-theme/; sphinx-psi-theme https://github.com/psi4/sphinx-psi-theme; See [“message” lines] :source:`doc/sphinxman/CMakeLists.txt for advice on obtaining docs dependencies; See psi4/.github/workflows/docs.yml for full docs building procedure to follow. Ambit — https://github.com/jturney/ambit; CheMPS2 — [what is CheMPS2?] [CheMPS2 min version]. HDF5 https://support.hdfgroup.org/HDF5/; zlib http://www.zlib.net/. ecpint — [what is ecpint?] [ecpint min version]; dkh — [what is dkh?] [dkh min version]. Fortran Compiler. gdma — [what is gdma?] [gdma min version]. Fortran Compiler. PCMSolver — [what is PCMSolver?]. Fortran Compiler; zlib http://www.zlib.",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/build_planning.html:6929,install,installed,6929,psi4manual/1.7.x/build_planning.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/build_planning.html,1,['install'],['installed']
Deployability,"s import cpuinfo) https://github.com/workhorsy/py-cpuinfo (transitive dependency of QCEngine); psutil https://github.com/giampaolo/psutil (transitive dependency of QCEngine). Dropped Dependencies:. Boost (September 2016; dropped by v1.1); deepdiff https://github.com/seperman/deepdiff (May 2019; dropped by v1.4); MPFR https://www.mpfr.org/ (Mar 2022; dropped by v1.6) no longer needed to compile against Libint2; Perl for testing (April 2022; dropped by v1.6). What are the add-on capabilities for Psi4 and what are their dependencies¶; Each of the items below is an independent additional capability that can; be built with PSI4. Sub-items below are the respective additional; dependencies of the add-on. Select which, if any, you want, and examine; the links for appropriate enabling arguments to cmake. Note that many; are available pre-built from conda. PSI4 Testing. CTest https://cmake.org/download/; pytest (for installed testing) http://doc.pytest.org/en/latest/; pytest-xdist (for installed testing many tests at once) https://github.com/pytest-dev/pytest-xdist. PSI4 Documentation (available pre-built at psicode.org/psi4manual/master/index.html). Sphinx (3.5+) http://sphinx-doc.org; Perl (for some auto-documentation scripts) https://www.perl.org/; nbsphinx (for converting Jupyter notebooks) http://nbsphinx.readthedocs.io/en/jupyter-theme/; sphinx-psi-theme https://github.com/psi4/sphinx-psi-theme; See [“message” lines] for advice on obtaining docs dependencies or [conda env spec]; See psi4/.github/workflows/docs.yml for full docs building procedure to follow. Ambit — https://github.com/jturney/ambit; CheMPS2 — [what is CheMPS2?] [CheMPS2 min version]. HDF5 https://support.hdfgroup.org/HDF5/; zlib http://www.zlib.net/. ecpint — [what is ecpint?] [ecpint min version]; dkh — [what is dkh?] [dkh min version]. Fortran Compiler. gdma — [what is gdma?] [gdma min version]. Fortran Compiler. PCMSolver — [what is PCMSolver?]. Fortran Compiler; zlib http://www.zlib.net/. simint — [wh",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/build_planning.html:7465,install,installed,7465,psi4manual/1.8.x/build_planning.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/build_planning.html,3,['install'],['installed']
Deployability,"s in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (TRANSQT2); TRANSQT2 (Expert) — Controls how to cache quantities within the DPD library. Type: integer; Default: 2. CACHETYPE (CCENERGY); CCENERGY — Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “low priority” scheme in which the deletion of items from the cache is based on pre-programmed priorities. A value of LRU selects a “least recently used” scheme in which the oldest item in the cache will be the first one deleted. Type: string; Possible Values: LOW, LRU; Default: LOW. CACHETYPE (CCEOM); CCEOM — The criterion used to retain/release cached data. Type: string; Possible Values: LOW, LRU; Default: LRU. CALC_S_SQUARED (DETCI); DETCI — Do calculate the value of for each root? Only supported for ICORE = 1. Type: boolean; Default: false. CANONICALIZE_ACTIVE_FAVG (MCSCF); MCSCF — Do canonicalize the active orbitals such that the average Fock matrix is diagonal?. Type: boolean; Default: false. CANONICALIZE_INACTIVE_FAVG (MCSCF); MCSCF — Do canonicalize the inactive (DOCC and Virtual) orbitals such that the average Fock matrix is diagonal?. Type: boolean; Default: false. CART_HESS_READ (OPTKING); OPTKING — Do read Cartesian Hessian? Only for experts - use FULL_HESS_EVERY instead. Type: boolean; Default: false. CC (DETCI); DETCI — Do coupled-cluster computation?. Type: boolean; Default: false. CC3_FOLLOW_ROOT (CCEOM); CCEOM — Do turn on root following for CC3. Type: boolean; Default: false. CC_A_RAS3_MAX (DETCI); DETCI — maximum number of alpha electrons in RAS III, for CC. Type: integer; Default: -",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:10993,release,release,10993,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html,2,['release'],['release']
Deployability,"s in the full and; truncated spaces captures much of the missing correlation effects. More; details on the implementation and numerical accuracy of FNO methods in; PSI4 can be found in [DePrince:2013:293]. FNO computations; are controlled through the keywords NAT_ORBS and; OCC_TOLERANCE, or by prepending a valid method name with “fno” in; the energy call as; energy('fno-ccsd(t)'). If you wish to specify the number of active natural orbitals manually, use; the keyword ACTIVE_NAT_ORBS. This keyword will override the; keyword OCC_TOLERANCE. QCISD(T), CCSD(T), MP4, and CEPA¶; The FNOCC module in PSI4 supports several related many-body quantum; chemistry methods, including the CCSD(T) and QCISD(T) methods, several; orders of many-body perturbation theory (MP2-MP4), and a family methods; related to the coupled electron pair approximation (CEPA). Quadratic configuration interaction and coupled cluster¶; The quadratic configuration interaction singles doubles (QCISD) method of; Pople, Head-Gordon, and Raghavachari [Pople:1987:5968] was originally; presented as a size-consistent extension of configuration interaction; singles doubles (CISD). The method can also be obtained as a; simplified version of the coupled cluster singles doubles (CCSD); method [Purvis:1982]. Consider the set of equations defining CCSD:. (1)¶\[\begin{split}\langle \Psi_0 | (H - E) (1 + T_1 + T_2 + \frac{1}{2}T_1^2)|\Psi_0\rangle = 0, \\; \langle \Psi_i^a | (H - E) (1 + T_1 + T_2 + \frac{1}{2}T_1^2+T_1T_2+\frac{1}{3!}T_1^3)|\Psi_0\rangle = 0, \\; \langle \Psi_{ij}^{ab} | (H - E) (1 + T_1 + T_2 + \frac{1}{2}T_1^2 + T_1T_2+\frac{1}{3!}T_1^3+\frac{1}{2}T_2^2+\frac{1}{2}T_1^2T_2+\frac{1}{4!}T_1^4)|\Psi_0\rangle = 0, \\\end{split}\]; where we have chosen the intermediate normalization,; \(\langle \Psi_0| \Psi \rangle = 1\), and the symbols \(T_1\); and \(T_2\) represent single and double excitation operators. The; QCISD equations can be obtained by omitting all but two terms that; are nonlinear in \(T_1\) and",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/fnocc-1.html:3151,configurat,configuration,3151,psi4manual/1.4.0/fnocc-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/fnocc-1.html,27,['configurat'],['configuration']
Deployability,"s is often; much more costly than the energy. In addition, the Wavefunction density attributes; (Da and Db) return the SO density and must be transformed to the MO basis; to use with this function. New in version 0.5: wfn parameter passed explicitly. Returns; None. Parameters. filename (string) – destination file name for MOLDEN file (optional); do_virtual (bool) – do write all the MOs to the MOLDEN file (true) or discard the unoccupied MOs, not valid for NO’s (false) (optional); use_natural (bool) – write natural orbitals determined from density on wavefunction. Examples. Molden file with the Kohn-Sham orbitals of a DFT calculation.; >>> E, wfn = energy('b3lyp', return_wfn=True); >>> wfn.molden('mycalc.molden'). Molden file with the natural orbitals of a CCSD computation. For correlated methods, an energy call will not compute the density.; “properties” or “gradient” must be called.; >>> E, wfn = properties('ccsd', return_wfn=True); >>> wfn.molden('ccsd_no.molden', use_natural=True). To supply a custom density matrix, manually set the Da and Db of the wavefunction.; This is used, for example, to write natural orbitals coming from a root computed; by a CIWavefunction computation, e.g., detci, fci, casscf.`; The first two arguments of get_opdm can be set to n, n where n => 0 selects the root to; write out, provided these roots were computed, see NUM_ROOTS. The; third argument controls the spin (""A"", ""B"" or ""SUM"") and the final; boolean option determines whether inactive orbitals are included.; >>> E, wfn = energy('detci', return_wfn=True); >>> wfn.Da() = wfn.get_opdm(0, 0, ""A"", True); >>> wfn.Db() = wfn.get_opdm(0, 0, ""B"", True); >>> molden(wfn, 'no_root1.molden', use_natural=True). write_nbo(name)¶. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. PSI4 API: Linking C++ and Python; CCWavefunction. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/api/psi4.core.ccwavefunction.html:27460,update,updated,27460,psi4manual/1.4.0/api/psi4.core.ccwavefunction.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/api/psi4.core.ccwavefunction.html,1,['update'],['updated']
Deployability,"s is often; much more costly than the energy. In addition, the Wavefunction density attributes; (Da and Db) return the SO density and must be transformed to the MO basis; to use with this function. New in version 0.5: wfn parameter passed explicitly. Returns; None. Parameters. filename (string) – destination file name for MOLDEN file (optional); do_virtual (bool) – do write all the MOs to the MOLDEN file (true) or discard the unoccupied MOs, not valid for NO’s (false) (optional); use_natural (bool) – write natural orbitals determined from density on wavefunction. Examples. Molden file with the Kohn-Sham orbitals of a DFT calculation.; >>> E, wfn = energy('b3lyp', return_wfn=True); >>> wfn.molden('mycalc.molden'). Molden file with the natural orbitals of a CCSD computation. For correlated methods, an energy call will not compute the density.; “properties” or “gradient” must be called.; >>> E, wfn = properties('ccsd', return_wfn=True); >>> wfn.molden('ccsd_no.molden', use_natural=True). To supply a custom density matrix, manually set the Da and Db of the wavefunction.; This is used, for example, to write natural orbitals coming from a root computed; by a CIWavefunction computation, e.g., detci, fci, casscf.`; The first two arguments of get_opdm can be set to n, n where n => 0 selects the root to; write out, provided these roots were computed, see NUM_ROOTS. The; third argument controls the spin (""A"", ""B"" or ""SUM"") and the final; boolean option determines whether inactive orbitals are included.; >>> E, wfn = energy('detci', return_wfn=True); >>> wfn.Da() = wfn.get_opdm(0, 0, ""A"", True); >>> wfn.Db() = wfn.get_opdm(0, 0, ""B"", True); >>> molden(wfn, 'no_root1.molden', use_natural=True). write_nbo(name)¶. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. PSI4 API: Linking C++ and Python; CIWavefunction. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/api/psi4.core.ciwavefunction.html:32366,update,updated,32366,psi4manual/1.4.0/api/psi4.core.ciwavefunction.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/api/psi4.core.ciwavefunction.html,1,['update'],['updated']
Deployability,"s is often; much more costly than the energy. In addition, the Wavefunction density attributes; (Da and Db) return the SO density and must be transformed to the MO basis; to use with this function. New in version 0.5: wfn parameter passed explicitly. Returns; None. Parameters. filename (string) – destination file name for MOLDEN file (optional); do_virtual (bool) – do write all the MOs to the MOLDEN file (true) or discard the unoccupied MOs, not valid for NO’s (false) (optional); use_natural (bool) – write natural orbitals determined from density on wavefunction. Examples. Molden file with the Kohn-Sham orbitals of a DFT calculation.; >>> E, wfn = energy('b3lyp', return_wfn=True); >>> wfn.molden('mycalc.molden'). Molden file with the natural orbitals of a CCSD computation. For correlated methods, an energy call will not compute the density.; “properties” or “gradient” must be called.; >>> E, wfn = properties('ccsd', return_wfn=True); >>> wfn.molden('ccsd_no.molden', use_natural=True). To supply a custom density matrix, manually set the Da and Db of the wavefunction.; This is used, for example, to write natural orbitals coming from a root computed; by a CIWavefunction computation, e.g., detci, fci, casscf.`; The first two arguments of get_opdm can be set to n, n where n => 0 selects the root to; write out, provided these roots were computed, see NUM_ROOTS. The; third argument controls the spin (""A"", ""B"" or ""SUM"") and the final; boolean option determines whether inactive orbitals are included.; >>> E, wfn = energy('detci', return_wfn=True); >>> wfn.Da() = wfn.get_opdm(0, 0, ""A"", True); >>> wfn.Db() = wfn.get_opdm(0, 0, ""B"", True); >>> molden(wfn, 'no_root1.molden', use_natural=True). write_nbo(name)¶. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. PSI4 API: Linking C++ and Python; CCWavefunction. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/api/psi4.core.ccwavefunction.html:28564,update,updated,28564,psi4manual/1.5.0/api/psi4.core.ccwavefunction.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/api/psi4.core.ccwavefunction.html,1,['update'],['updated']
Deployability,"s is often; much more costly than the energy. In addition, the Wavefunction density attributes; (Da and Db) return the SO density and must be transformed to the MO basis; to use with this function. New in version 0.5: wfn parameter passed explicitly. Returns; None. Parameters. filename (string) – destination file name for MOLDEN file (optional); do_virtual (bool) – do write all the MOs to the MOLDEN file (true) or discard the unoccupied MOs, not valid for NO’s (false) (optional); use_natural (bool) – write natural orbitals determined from density on wavefunction. Examples. Molden file with the Kohn-Sham orbitals of a DFT calculation.; >>> E, wfn = energy('b3lyp', return_wfn=True); >>> wfn.molden('mycalc.molden'). Molden file with the natural orbitals of a CCSD computation. For correlated methods, an energy call will not compute the density.; “properties” or “gradient” must be called.; >>> E, wfn = properties('ccsd', return_wfn=True); >>> wfn.molden('ccsd_no.molden', use_natural=True). To supply a custom density matrix, manually set the Da and Db of the wavefunction.; This is used, for example, to write natural orbitals coming from a root computed; by a CIWavefunction computation, e.g., detci, fci, casscf.`; The first two arguments of get_opdm can be set to n, n where n => 0 selects the root to; write out, provided these roots were computed, see NUM_ROOTS. The; third argument controls the spin (""A"", ""B"" or ""SUM"") and the final; boolean option determines whether inactive orbitals are included.; >>> E, wfn = energy('detci', return_wfn=True); >>> wfn.Da() = wfn.get_opdm(0, 0, ""A"", True); >>> wfn.Db() = wfn.get_opdm(0, 0, ""B"", True); >>> molden(wfn, 'no_root1.molden', use_natural=True). write_nbo(name)¶. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. PSI4 API: Linking C++ and Python; CIWavefunction. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/api/psi4.core.ciwavefunction.html:33576,update,updated,33576,psi4manual/1.5.0/api/psi4.core.ciwavefunction.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/api/psi4.core.ciwavefunction.html,1,['update'],['updated']
Deployability,"s is often; much more costly than the energy. In addition, the Wavefunction density attributes; (Da and Db) return the SO density and must be transformed to the MO basis; to use with this function. New in version 0.5: wfn parameter passed explicitly. Returns; None. Parameters. filename (string) – destination file name for MOLDEN file (optional); do_virtual (bool) – do write all the MOs to the MOLDEN file (true) or discard the unoccupied MOs, not valid for NO’s (false) (optional); use_natural (bool) – write natural orbitals determined from density on wavefunction. Examples. Molden file with the Kohn-Sham orbitals of a DFT calculation.; >>> E, wfn = energy('b3lyp', return_wfn=True); >>> wfn.molden('mycalc.molden'). Molden file with the natural orbitals of a CCSD computation. For correlated methods, an energy call will not compute the density.; “properties” or “gradient” must be called.; >>> E, wfn = properties('ccsd', return_wfn=True); >>> wfn.molden('ccsd_no.molden', use_natural=True). To supply a custom density matrix, manually set the Da and Db of the wavefunction.; This is used, for example, to write natural orbitals coming from a root computed; by a CIWavefunction computation, e.g., detci, fci, casscf.`; The first two arguments of get_opdm can be set to n, n where n => 0 selects the root to; write out, provided these roots were computed, see NUM_ROOTS. The; third argument controls the spin (""A"", ""B"" or ""SUM"") and the final; boolean option determines whether inactive orbitals are included.; >>> E, wfn = energy('detci', return_wfn=True); >>> wfn.Da() = wfn.get_opdm(0, 0, ""A"", True); >>> wfn.Db() = wfn.get_opdm(0, 0, ""B"", True); >>> molden(wfn, 'no_root1.molden', use_natural=True). write_nbo(name)¶. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.6;  · . PSI4. PSI4 API: Linking C++ and Python; DFEP2Wavefunction. © Copyright 2022, The Psi4 Project.; Last updated on Thursday, 19 May 2022 08:57PM.; Created using Sphinx 4.5.0.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/api/psi4.core.DFEP2Wavefunction.html:27898,update,updated,27898,psi4manual/1.6.x/api/psi4.core.DFEP2Wavefunction.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/api/psi4.core.DFEP2Wavefunction.html,1,['update'],['updated']
Deployability,"s methods supported by the FNOCC module in PSI4 are detailed; in Table FNOCC Methods. Note that these methods; are implemented for closed-shell references only. For open-shell references,; the calls energy('mp2.5'), energy('mp3'), and energy('mp4') will; default to the DETCI implementations of these methods. name; calls method. qcisd; quadratic configuration interaction singles doubles. qcisd(t); qcisd with perturbative triples. mp2.5; average of second- and third-order perturbation theories. mp3; third-order perturbation theory. mp4(sdq); fourth-order perturbation theory, minus triples contribution. mp4; full fourth-order perturbation theory. cepa(0); coupled electron pair approximation, variant 0. cepa(1); coupled electron pair approximation, variant 1. cepa(3); coupled electron pair approximation, variant 3. acpf; averaged coupled-pair functional. aqcc; averaged quadratic coupled-cluster. sdci; configuration interaction with single and double excitations. dci; configuration interaction with double excitations. fno-qcisd; qcisd with frozen natural orbitals. fno-qcisd(t); qcisd(t) with frozen natural orbitals. fno-ccsd; coupled cluster singles doubles with frozen natural orbitals. fno-ccsd(t); ccsd with perturbative triples and frozen natural orbitals. fno-mp3; mp3 with frozen natural orbitals. fno-mp4(sdq); mp4(sdq) with frozen natural orbitals. fno-mp4; mp4 with frozen natural orbitals. fno-cepa(0); cepa(0) with frozen natural orbitals. fno-cepa(1); cepa(1) with frozen natural orbitals. fno-cepa(3); cepa(3) with frozen natural orbitals. fno-acpf; acpf with frozen natural orbitals. fno-aqcc; aqcc with frozen natural orbitals. fno-sdci; sdci with frozen natural orbitals. fno-dci; dci with frozen natural orbitals. df-ccsd; ccsd with density fitting. df-ccsd(t); ccsd(t) with density fitting. fno-df-ccsd; ccsd with density fitting and frozen natural orbitals. fno-df-ccsd(t); ccsd(t) with density fitting and frozen natural orbitals. Basic FNOCC Keywords¶. BASIS¶. Prima",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/fnocc-1.html:10500,configurat,configuration,10500,psi4manual/4.0b4/fnocc-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/fnocc-1.html,4,['configurat'],['configuration']
Deployability,"s of the same symmetry will be evaluated. DETCI does not compute states of different irreps within the same computation; to do this, lower the symmetry of the computation. Type: boolean; Default: false. TEST_B (OPTKING); OPTKING — Do test B matrix?. Type: boolean; Default: false. TEST_DERIVATIVE_B (OPTKING); OPTKING — Do test derivative B matrix?. Type: boolean; Default: false. THETA_POINTS (SCF); SCF — Number of colatitude grid points for spherical potential integration. Type: integer; Default: 360. THICKNESS (SCF); SCF — Thickness (bohr) of a hard-sphere external potential. Type: double; Default: 20.0. THREE_PARTICLE (DCFT); DCFT — Whether to compute three-particle energy correction or not. Type: string; Possible Values: NONE, PERTURBATIVE; Default: NONE. TIKHONOW_MAX (PSIMRCC); PSIMRCC — The cycle after which Tikhonow regularization is stopped. Set to zero to allow regularization in all iterations. Type: integer; Default: 5. TIKHONOW_OMEGA (DCFT); DCFT (Expert) — The shift applied to the denominator in the density cumulant update iterations. Type: double; Default: 0.0. TIKHONOW_OMEGA (PSIMRCC); PSIMRCC — The shift to apply to the denominators, {it c.f.} Taube and Bartlett, JCP, 130, 144112 (2009). Type: double; Default: 0.0. TIKHONOW_TRIPLES (PSIMRCC); PSIMRCC (Expert) — Do use Tikhonow regularization in (T) computations?. Type: boolean; Default: false. TILE_SZ (SCF); SCF (Expert) — The tile size for the distributed matrices. Type: integer; Default: 512. TPDM (DETCI); DETCI (Expert) — Do compute two-particle density matrix if not otherwise required? Warning: This will hold 4 dense active TPDM’s in memory. Type: boolean; Default: false. TPDM_ABCD_TYPE (OCC); OCC — How to take care of the TPDM VVVV-block. The COMPUTE option means it will be computed via an IC/OOC algorithm. The DIRECT option (default) means it will not be computed and stored, instead its contribution will be directly added to Generalized-Fock Matrix. Type: string; Possible Values: DIRECT, COMPUTE; D",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/autodoc_glossary_options_c-1.html:216445,update,update,216445,psi4manual/1.3.2/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/autodoc_glossary_options_c-1.html,2,['update'],['update']
Deployability,"s of the same symmetry will be evaluated. DETCI does not compute states of different irreps within the same computation; to do this, lower the symmetry of the computation. Type: boolean; Default: false. TEST_B (OPTKING); OPTKING — Do test B matrix?. Type: boolean; Default: false. TEST_DERIVATIVE_B (OPTKING); OPTKING — Do test derivative B matrix?. Type: boolean; Default: false. THETA_POINTS (SCF); SCF — Number of colatitude grid points for spherical potential integration. Type: integer; Default: 360. THICKNESS (SCF); SCF — Thickness (bohr) of a hard-sphere external potential. Type: double; Default: 20.0. THREE_PARTICLE (DCFT); DCFT — Whether to compute three-particle energy correction or not. Type: string; Possible Values: NONE, PERTURBATIVE; Default: NONE. TIKHONOW_MAX (PSIMRCC); PSIMRCC — The cycle after which Tikhonow regularization is stopped. Set to zero to allow regularization in all iterations. Type: integer; Default: 5. TIKHONOW_OMEGA (DCFT); DCFT (Expert) — The shift applied to the denominator in the density cumulant update iterations. Type: double; Default: 0.0. TIKHONOW_OMEGA (PSIMRCC); PSIMRCC — The shift to apply to the denominators, {it c.f.} Taube and Bartlett, JCP, 130, 144112 (2009). Type: double; Default: 0.0. TIKHONOW_TRIPLES (PSIMRCC); PSIMRCC (Expert) — Do use Tikhonow regularization in (T) computations?. Type: boolean; Default: false. TILE_SZ (SCF); SCF (Expert) — The tile size for the distributed matrices. Type: integer; Default: 512. TPDM (DETCI); DETCI (Expert) — Do compute two-particle density matrix if not otherwise required? Warning: This will hold 4 dense active TPDM’s in memory. Type: boolean; Default: false. TPDM_ABCD_TYPE (OCC); OCC — How to take care of the TPDM VVVV-block. The COMPUTE option means it will be computed via an IC/OOC algoritm. The DIRECT option (default) means it will not be computed and stored, instead its contribution will be directly added to Generalized-Fock Matrix. Type: string; Possible Values: DIRECT, COMPUTE; De",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/autodoc_glossary_options_c-1.html:217144,update,update,217144,psi4manual/1.2.1/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/autodoc_glossary_options_c-1.html,4,['update'],['update']
Deployability,"s of this input style; >>> optimize(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). """"""; kwargs = p4util.kwargs_lower(kwargs). if hasattr(name, '__call__'):; lowername = name; custom_gradient = True; else:; lowername = name.lower(); custom_gradient = False. return_wfn = kwargs.pop('return_wfn', False). # For CBS wrapper, need to set retention on INTCO file; if custom_gradient or ('/' in lowername):; core.IOManager.shared_object().set_specific_retention(1, True). if kwargs.get('bsse_type', None) is not None:; raise ValidationError(""Optimize: Does not currently support 'bsse_type' arguements""). full_hess_every = core.get_option('OPTKING', 'FULL_HESS_EVERY'); steps_since_last_hessian = 0. if custom_gradient and core.has_option_changed('OPTKING', 'FULL_HESS_EVERY'):; raise ValidationError(""Optimize: Does not support custom Hessian's yet.""); else:; hessian_with_method = kwargs.get('hessian_with', lowername). # are we in sow/reap mode?; opt_mode = kwargs.get('mode', 'continuous').lower(); if opt_mode not in ['continuous', 'sow', 'reap']:; raise ValidationError(""""""Optimize execution mode '%s' not valid."""""" % (opt_mode)). optstash = p4util.OptionsState(; ['OPTKING', 'INTRAFRAG_STEP_LIMIT'],; ['FINDIF', 'HESSIAN_WRITE'],; ['OPTKING', 'CART_HESS_READ'],; ['SCF', 'GUESS_PERSIST'], # handle on behalf of cbs(); ['SCF', 'GUESS']). n = kwargs.get('opt_iter', 1). # Make sure the molecule the user provided is the active one; molecule = kwargs.pop('molecule', core.get_active_molecule()). # If we are feezing cartesian, do not orient or COM; if core.get_local_option(""OPTKING"", ""FROZEN_CARTESIAN""):; molecule.fix_orientation(True); molecule.fix_com(True); molecule.update_geometry(). # Shifting the geometry so need to copy the active molecule; moleculeclone = molecule.clone(). initial_sym = moleculeclone.schoenflies_symbol(); while n <= core.get_option('OPTKING', 'GEOM_MAXITER'):; current_sym = moleculeclone.schoenflies_symbol(); if initial_sym != current_sym:; rai",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/driver.html:57613,continuous,continuous,57613,psi4manual/1.1.0/_modules/psi4/driver/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/driver.html,1,['continuous'],['continuous']
Deployability,"s of those are; mentioned above. How to install elsewhere than /usr/local/psi4¶; The installation directory is the filesystem location for the executable; script, the Python module, basis set data, and other administrative files.; Unless using the conda package, which is relocatable, the installation; directory must be specified with CMake variable CMAKE_INSTALL_PREFIX; before compiling. Build with Specific Install Directory; cmake -DCMAKE_INSTALL_PREFIX=/nfs/common/software/psi4. Relevant CMake Options:; CMAKE_INSTALL_PREFIX=PATH # Location to which Psi4 and internally built; # add-ons are installed (default: /usr/local/psi4). How to compile for debugging¶; Flags to turn optimizations off and debugging on can be set across the; project and plugins with CMake variable CMAKE_BUILD_TYPE before; compiling. Note that these flags will not propagate to any add-ons that; are detected pre-built rather than built. Build without optimization; cmake -DCMAKE_BUILD_TYPE=debug. set the CMake build type [default: release]. Relevant CMake Options:; CMAKE_BUILD_TYPE=[debug|release] # Build type (Release or Debug)"" [default: release]. How to fix error “RuntimeError: value for ERI“¶; You will need to rebuild Libint. Reissue cmake or edit; CMakeCache.txt with larger MAX_AM_ERI and rebuilt. How to configure code to use high angular momentum basis sets. How to choose the compilation directory, {objdir}¶. there is no default; common choices are objdir or build under top-level-psi4-dir; cd {top-level-psi4-dir} && cmake -H. -Bobjdir; cd {top-level-psi4-dir} && cmake -H. -Bbuild. in-source builds (*.cc and *.o in same directory) are disallowed; builds outside top-level-psi4-dir are permitted. How to save configuration settings for a future compilation¶; Create a file like do-configure with the cmake command and options; on one line.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10>>> cd {top-level-psi4-dir}; >>> cat do-configure; cmake -H. -B{objdir} \; -DCMAKE_INSTALL_PATH=""/Users/me/psi4"" \; -DCMAKE_PREFIX_P",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/build_planning-1.html:15561,release,release,15561,psi4manual/1.1.0/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/build_planning-1.html,2,['release'],['release']
Deployability,"s often; much more costly than the energy. In addition, the Wavefunction density attributes; (Da and Db) return the SO density and must be transformed to the MO basis; to use with this function. New in version 0.5: wfn parameter passed explicitly. Returns; None. Parameters. filename (string) – destination file name for MOLDEN file (optional); do_virtual (bool) – do write all the MOs to the MOLDEN file (true) or discard the unoccupied MOs, not valid for NO’s (false) (optional); use_natural (bool) – write natural orbitals determined from density on wavefunction. Examples. Molden file with the Kohn-Sham orbitals of a DFT calculation.; >>> E, wfn = energy('b3lyp', return_wfn=True); >>> wfn.molden('mycalc.molden'). Molden file with the natural orbitals of a CCSD computation. For correlated methods, an energy call will not compute the density.; “properties” or “gradient” must be called.; >>> E, wfn = properties('ccsd', return_wfn=True); >>> wfn.molden('ccsd_no.molden', use_natural=True). To supply a custom density matrix, manually set the Da and Db of the wavefunction.; This is used, for example, to write natural orbitals coming from a root computed; by a CIWavefunction computation, e.g., detci, fci, casscf.`; The first two arguments of get_opdm can be set to n, n where n => 0 selects the root to; write out, provided these roots were computed, see NUM_ROOTS. The; third argument controls the spin (""A"", ""B"" or ""SUM"") and the final; boolean option determines whether inactive orbitals are included.; >>> E, wfn = energy('detci', return_wfn=True); >>> wfn.Da() = wfn.get_opdm(0, 0, ""A"", True); >>> wfn.Db() = wfn.get_opdm(0, 0, ""B"", True); >>> molden(wfn, 'no_root1.molden', use_natural=True). write_nbo(name)¶. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. PSI4 API: Linking C++ and Python; DFEP2Wavefunction. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/api/psi4.core.dfep2wavefunction.html:26613,update,updated,26613,psi4manual/1.4.0/api/psi4.core.dfep2wavefunction.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/api/psi4.core.dfep2wavefunction.html,1,['update'],['updated']
Deployability,"s often; much more costly than the energy. In addition, the Wavefunction density attributes; (Da and Db) return the SO density and must be transformed to the MO basis; to use with this function. New in version 0.5: wfn parameter passed explicitly. Returns; None. Parameters. filename (string) – destination file name for MOLDEN file (optional); do_virtual (bool) – do write all the MOs to the MOLDEN file (true) or discard the unoccupied MOs, not valid for NO’s (false) (optional); use_natural (bool) – write natural orbitals determined from density on wavefunction. Examples. Molden file with the Kohn-Sham orbitals of a DFT calculation.; >>> E, wfn = energy('b3lyp', return_wfn=True); >>> wfn.molden('mycalc.molden'). Molden file with the natural orbitals of a CCSD computation. For correlated methods, an energy call will not compute the density.; “properties” or “gradient” must be called.; >>> E, wfn = properties('ccsd', return_wfn=True); >>> wfn.molden('ccsd_no.molden', use_natural=True). To supply a custom density matrix, manually set the Da and Db of the wavefunction.; This is used, for example, to write natural orbitals coming from a root computed; by a CIWavefunction computation, e.g., detci, fci, casscf.`; The first two arguments of get_opdm can be set to n, n where n => 0 selects the root to; write out, provided these roots were computed, see NUM_ROOTS. The; third argument controls the spin (""A"", ""B"" or ""SUM"") and the final; boolean option determines whether inactive orbitals are included.; >>> E, wfn = energy('detci', return_wfn=True); >>> wfn.Da() = wfn.get_opdm(0, 0, ""A"", True); >>> wfn.Db() = wfn.get_opdm(0, 0, ""B"", True); >>> molden(wfn, 'no_root1.molden', use_natural=True). write_nbo(name)¶. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. PSI4 API: Linking C++ and Python; DFEP2Wavefunction. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/api/psi4.core.dfep2wavefunction.html:27717,update,updated,27717,psi4manual/1.5.0/api/psi4.core.dfep2wavefunction.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/api/psi4.core.dfep2wavefunction.html,1,['update'],['updated']
Deployability,s only). For practical applications only the default must be used. Type: boolean; Default: false. INTS_TOLERANCE¶. Minimum absolute value below which integrals are neglected. Type: conv double; Default: 1e-14. LOCK_OCC¶. Controls whether to force the occupation to be that of the SCF guess. For practical applications only the default must be used. Type: boolean; Default: true. MO_RELAX¶. Controls whether to relax the orbitals during the energy computation or not (for debug puproses only). For practical applications only the default must be used. Type: boolean; Default: true. QC_COUPLING¶. Controls whether to include the coupling terms in the DCFT electronic Hessian (for ALOGRITHM = QC only). Type: boolean; Default: true. RELAX_GUESS_ORBITALS¶. Controls whether to relax the guess orbitals by taking the guess density cumulant and performing orbital update on the first macroiteration (for ALOGRITHM = TWOSTEP only). Type: boolean; Default: false. RELAX_TAU¶. Controls whether to relax tau during the cumulant updates or not. Type: boolean; Default: true. STABILITY_ADD_VECTORS¶. The number of vectors that can be added simultaneously into the subspace for Davidson’s diagonalization in stability check. Type: integer; Default: 20. STABILITY_AUGMENT_SPACE_TOL¶. The value of the rms of the residual in Schmidt orthogonalization which is used as a threshold for augmenting the vector subspace in stability check. Type: conv double; Default: 0.1. STABILITY_CHECK¶. Performs stability analysis of the DCFT energy. Type: boolean; Default: false. STABILITY_CONVERGENCE¶. Controls the convergence of the Davidson’s diagonalization in stability check. Type: conv double; Default: 1e-4. STABILITY_MAX_SPACE_SIZE¶. The maximum size of the subspace for the stability check. The program will terminate if this parameter is exceeded and the convergence (STABILITY_CONVERGENCE) is not satisfied. Type: integer; Default: 200. STABILITY_N_EIGENVALUES¶. The number of Hessian eigenvalues computed during the ,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/autodir_options_c/module__dcft-1.html:4638,update,updates,4638,psi4manual/4.0b3/autodir_options_c/module__dcft-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodir_options_c/module__dcft-1.html,2,['update'],['updates']
Deployability,"s option is enabled automatically if the memory requirements of the conventional algorithm would exceed the available resources. Type: boolean; Default: false. Expert¶. CEPA_LEVEL¶. Which coupled-pair method is called? This parameter is used internally by the python driver. Changing its value won’t have any effect on the procedure. Type: string; Default: CEPA(0). COMPUTE_MP4_TRIPLES¶. Do compute MP4 triples contribution?. Type: boolean; Default: false. COMPUTE_TRIPLES¶. Do compute triples contribution?. Type: boolean; Default: true. RUN_CCSD¶. do ccsd rather than qcisd?. Type: boolean; Default: false. RUN_CEPA¶. Is this a CEPA job? This parameter is used internally by the pythond driver. Changing its value won’t have any effect on the procedure. Type: boolean; Default: false. RUN_MP2¶. do only evaluate mp2 energy?. Type: boolean; Default: false. RUN_MP3¶. do only evaluate mp3 energy?. Type: boolean; Default: false. RUN_MP4¶. do only evaluate mp4 energy?. Type: boolean; Default: false. USE_DF_INTS¶. Use 3-index integrals to generate 4-index ERI’s? This keyword is used for testing purposes only. Changing its value will have no effect on the computation. Type: boolean; Default: false. Table Of Contents. FNOCC; General; BRUECKNER_MAXITER; CC_SCALE_OS; CC_SCALE_SS; CC_TIMINGS; CEPA_NO_SINGLES; CHOLESKY_TOLERANCE; DFCC; DF_BASIS_CC; DIIS_MAX_VECS; DIPMOM; E_CONVERGENCE; MAXITER; MP2_SCALE_OS; MP2_SCALE_SS; NAT_ORBS; OCC_TOLERANCE; R_CONVERGENCE; SCS_CCSD; SCS_CEPA; SCS_MP2; TRIPLES_LOW_MEMORY. Expert; CEPA_LEVEL; COMPUTE_MP4_TRIPLES; COMPUTE_TRIPLES; RUN_CCSD; RUN_CEPA; RUN_MP2; RUN_MP3; RUN_MP4; USE_DF_INTS. Previous topic; POINTS; Next topic; BRUECKNER_MAXITER; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/autodir_options_c/module__fnocc-1.html:4544,update,updated,4544,psi4manual/4.0b5/autodir_options_c/module__fnocc-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/module__fnocc-1.html,2,['update'],['updated']
Deployability,"s provided in; Appendix ADC. Some sample inputs are provided in; psi4/samples, in directories starting with the name adc. The most; important keyword is ROOTS_PER_IRREP, which is an array; giving the number of excited states desired for each irreducible; representation. Implementation¶; Some very essential points are emphasized for understanding of the; nature and the limitations of the theory. The ADC(2) response matrix,; denoted as , is expanded in the single (S) and double (D); excitation manifolds as. where the superscript on each matrix block indicates the order of; the fluctuation. Instead of solving the above equation explicitly,; the large D manifold is treated effectively as. This form of the ADC(2) equation requires 7 – 10 iterations for; convergence on only one root. But thanks to Newton-Raphson; acceleration,. the computational time reduces to shorter than half of the simple iterative; procedure. Construction of the denominator of the second term in the above; equation is less computationally expensive than contruction of one $sigma$-vector with respect to the effective response matrix. The non-iterative excitation energy stated above is calculated as a diagonal element of the Davidson mini-Hamiltonian matrix in the SEM as,. where and denote the CIS; excitation energy and wave function, respectively. The explicit form of the; σ-vector is provided in a note accompanying the source code,; in the file psi4/src/bin/adc/sigma.pdf. Table Of Contents. ADC: Ab Initio Polarization Propagator; Partial Renormalization Scheme; Using the ADC(2) code; Implementation. Previous topic; SAPT: Symmetry-Adapted Perturbation Theory; Next topic; Geometry Optimization; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Theoretical Methods: SCF to FCI ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 25, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/adc-1.html:6962,update,updated,6962,psi4manual/4.0b4/adc-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/adc-1.html,2,['update'],['updated']
Deployability,"s provided in; Appendix ADC. Some sample inputs are provided in; psi4/samples, in directories starting with the name adc. The most; important keyword is ROOTS_PER_IRREP, which is an array; giving the number of excited states desired for each irreducible; representation. Implementation¶; Some very essential points are emphasized for understanding of the; nature and the limitations of the theory. The ADC(2) response matrix,; denoted as , is expanded in the single (S) and double (D); excitation manifolds as. where the superscript on each matrix block indicates the order of; the fluctuation. Instead of solving the above equation explicitly,; the large D manifold is treated effectively as. This form of the ADC(2) equation requires 7 – 10 iterations for; convergence on only one root. But thanks to Newton-Raphson; acceleration,. the computational time reduces to shorter than half of the simple iterative; procedure. Construction of the denominator of the second term in the above; equation is less computationally expensive than contruction of one $sigma$-vector with respect to the effective response matrix. The non-iterative excitation energy stated above is calculated as a diagonal element of the Davidson mini-Hamiltonian matrix in the SEM as,. where and denote the CIS; excitation energy and wave function, respectively. The explicit form of the; σ-vector is provided in a note accompanying the source code,; in the file psi4/src/bin/adc/sigma.pdf. Table Of Contents. ADC: Ab Initio Polarization Propagator; Partial Renormalization Scheme; Using the ADC(2) code; Implementation. Previous topic; SAPT: Symmetry-Adapted Perturbation Theory; Next topic; Geometry Optimization; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Theoretical Methods: SCF to FCI ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/adc-1.html:6962,update,updated,6962,psi4manual/4.0b5/adc-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/adc-1.html,2,['update'],['updated']
Deployability,"s required for eom_cc3 in core memory?. Type: boolean; Default: false. T_AMPS (CCHBAR); CCHBAR — Do compute the Tamplitude equation matrix elements?. Type: boolean; Default: false. TDHF_MEM_SAFETY_FACTOR (CPHF); CPHF — Memory safety factor for allocating JK. Type: double; Default: 0.75. TDM (DETCI); DETCI — Do compute the transition density? Note: only transition densities between roots of the same symmetry will be evaluated. DETCI does not compute states of different irreps within the same computation; to do this, lower the symmetry of the computation. Type: boolean; Default: false. TDM_PRINT (DETCI); DETCI — Do print the transition density?. Type: boolean; Default: false. TDM_WRITE (DETCI); DETCI — Do write the transition density?. Type: boolean; Default: false. TEST_B (OPTKING); OPTKING — Do test B matrix?. Type: boolean; Default: false. TEST_DERIVATIVE_B (OPTKING); OPTKING — Do test derivative B matrix?. Type: boolean; Default: false. THETA_POINTS (SCF); SCF — Number of colatitude grid points for sphereical potential integration. Type: integer; Default: 360. THICKNESS (SCF); SCF — Thickness (bohr) of a hard-sphere external potential. Type: double; Default: 20.0. THREE_PARTICLE (DCFT); DCFT — Whether to compute three-particle energy correction or not. Type: string; Possible Values: NONE, PERTURBATIVE; Default: NONE. TIKHONOW_MAX (PSIMRCC); PSIMRCC — The cycle after which Tikhonow regularization is stopped. Set to zero to allow regularization in all iterations. Type: integer; Default: 5. TIKHONOW_OMEGA (DCFT); DCFT (Expert) — The shift applied to the denominator in the density cumulant update iterations. Type: double; Default: 0.0. TIKHONOW_OMEGA (PSIMRCC); PSIMRCC — The shift to apply to the denominators, {it c.f.} Taube and Bartlett, JCP, 130, 144112 (2009). Type: double; Default: 0.0. TIKHONOW_TRIPLES (PSIMRCC); PSIMRCC (Expert) — Do use Tikhonow regularization in (T) computations?. Type: boolean; Default: false. TILE_SZ (SCF); SCF (Expert) — The tile size for t",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:213083,integrat,integration,213083,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html,2,['integrat'],['integration']
Deployability,"s required for eom_cc3 in core memory?. Type: boolean; Default: false. T_AMPS (CCHBAR); CCHBAR — Do compute the Tamplitude equation matrix elements?. Type: boolean; Default: false. TDHF_MEM_SAFETY_FACTOR (CPHF); CPHF — Memory safety factor for allocating JK. Type: double; Default: 0.75. TDM (DETCI); DETCI — Do compute the transition density? Note: only transition densities between roots of the same symmetry will be evaluated. DETCI does not compute states of different irreps within the same computation; to do this, lower the symmetry of the computation. Type: boolean; Default: false. TDM_PRINT (DETCI); DETCI — Do print the transition density?. Type: boolean; Default: false. TDM_WRITE (DETCI); DETCI — Do write the transition density?. Type: boolean; Default: false. TEST_B (OPTKING); OPTKING — Do test B matrix?. Type: boolean; Default: false. TEST_DERIVATIVE_B (OPTKING); OPTKING — Do test derivative B matrix?. Type: boolean; Default: false. THETA_POINTS (SCF); SCF — Number of colatitude grid points for sphereical potential integration. Type: integer; Default: 360. THICKNESS (SCF); SCF — Thickness (bohr) of a hard-sphere external potential. Type: double; Default: 20.0. TIKHONOW_MAX (PSIMRCC); PSIMRCC — The cycle after which Tikhonow regularization is stopped. Set to zero to allow regularization in all iterations. Type: integer; Default: 5. TIKHONOW_OMEGA (DCFT); DCFT (Expert) — The shift applied to the denominator in the density cumulant update iterations. Type: double; Default: 0.0. TIKHONOW_OMEGA (PSIMRCC); PSIMRCC — The shift to apply to the denominators, {it c.f.} Taube and Bartlett, JCP, 130, 144112 (2009). Type: double; Default: 0.0. TIKHONOW_TRIPLES (PSIMRCC); PSIMRCC (Expert) — Do use Tikhonow regularization in (T) computations?. Type: boolean; Default: false. TILE_SZ (SCF); SCF (Expert) — The tile size for the distributed matrices. Type: integer; Default: 512. TPDM (DCFT); DCFT (Expert) — Controls whether to compute unrelaxed two-particle density matrix at the ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/autodoc_glossary_options_c-1.html:127008,integrat,integration,127008,psi4manual/4.0b4/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_glossary_options_c-1.html,4,['integrat'],['integration']
Deployability,"s setting environment variables CRAYPE_LINK_TYPE; and CRAY_ADD_RPATH before running cmake.; 1CRAYPE_LINK_TYPE=dynamic CRAY_ADD_RPATH=yes cmake ... How to configure Fortran compilers for building Psi4¶; Role and Dependencies. Role — In PSI4, a Fortran compiler in unneeded for core; features but may be required for add-ons.; Downstream Dependencies; PSI4 (\(\Leftarrow\) optional) Fortran Compiler; erd, dkh, gdma, PCMSolver \(\Leftarrow\) Fortran Compiler. CMake Variables. CMAKE_Fortran_COMPILER — CMake variable to specify name or full path to Fortran compiler.; CMAKE_Fortran_FLAGS — CMake variable to specify any additional custom compiler flags for Fortran source. Examples. Build with detected compiler from PATH. >>> cmake. Build with specific (Intel) compiler from PATH. >>> cmake -DCMAKE_Fortran_COMPILER=ifort. What Fortran compilers are approved¶; On Linux and Mac, the following work nicely. GNU: gfortran; Intel: ifort. Packages to install for specific OS or package managers:; Ubuntu gfortran; conda gfortran_linux-64 or gfortran_osx-64 to get gfortran. How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew¶; Xcode does not provide a Fortran compiler. A way to get one is to download; the gfortran_osx-64 conda package. This provides; gfortran compilers for Mac. The version is 4.8.5, which is quite old,; but the Fortran compiler will work. How to configure BLAS/LAPACK for building Psi4¶; Role and Dependencies. Role — In PSI4, BLAS and LAPACK control much of the speed; and efficiency of the code since computational chemistry is essentially; linear algebra on molecular systems.; Downstream Dependencies — PSI4 \(\Leftarrow\) LAPACK Libraries. CMake Variables. BLAS_TYPE — CMake variable to specify which BLAS libraries to look for among MKL|OPENBLAS|ESSL|ATLAS|ACML|SYSTEM_NATIVE.; LAPACK_TYPE — CMake variable to specify which LAPACK libraries to look for among MKL|OPENBLAS|ESSL|ATLAS|ACML|SYSTEM_NATIVE.; MKL_ROOT — Environment variable set by Intel comp",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/build_planning-1.html:37017,install,install,37017,psi4manual/1.3.2/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/build_planning-1.html,2,['install'],['install']
Deployability,"s strings in quotes by default, we have to tell it that basis_set is a; Python variable, not a string, by prefixing it with a dollar sign.; The geometry specification supports delayed initialization of variable,; which permits potential energy scans. As an example, we can scan both the; angle and bond length in water:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16molecule h2o{; O; H 1 R; H 1 R 2 A; }. Rvals = [0.9, 1.0, 1.1]; Avals = range(102, 106, 2). set basis cc-pvdz; set scf e_convergence=11; for R in Rvals:; h2o.R = R; for A in Avals:; h2o.A = A; energy('scf'). The declarations of Rvals and Avals are both completely standard Python syntax.; Having named our molecule h2o we can then set the values of R and A within; the loops. Note that we do not need the dollar sign to access the Python; variable in this example; that is required only when using Python variables; with the set keyword.; Cartesian geometries, because of details of the geometry update process,; need to be specified within the loop(s) along with their basis set when; geometry scans are performed. See scf4 for analogous Z-matrix; and Cartiesian scans. Tables of Results¶; The results of computations can be compactly tabulated with the Table() Psithon; function. For example, in the following potential energy surface scan for water; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27molecule h2o {; O; H 1 R; H 1 R 2 A; }. Rvals=[0.9,1.0,1.1]; Avals=range(100,102,2). table=Table(rows=[""R"",""A""], cols=[""E(SCF)"",""E(SCS)"",""E(DFMP2)""]). set basis cc-pvdz. for R in Rvals:; h2o.R = R; for A in Avals:; h2o.A = A; energy('mp2'); escf = get_variable('SCF TOTAL ENERGY'); edfmp2 = get_variable('MP2 TOTAL ENERGY'); escsmp2 = get_variable('SCS-MP2 TOTAL ENERGY'); table[R][A] = [escf, escsmp2, edfmp2]. print table; relative=table.copy(); relative.absolute_to_relative(); print relative. we first define a table (on line 10) with two row indices and three column; ind",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/psithoninput-1.html:13157,update,update,13157,psi4manual/1.1.0/psithoninput-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/psithoninput-1.html,6,['update'],['update']
Deployability,"s strongly recommended to place PSI4 into a conda; environment where its libraries can’t interfere with other programs (on; Linux/Windows, PSI4 installs a non-default gcc 5.2) rather than the main; Anaconda or Miniconda environment. Hence the creation of the environment; above, but the environment name (p4env above) can be; substituted.; Only reason for psi4-rt package is to get the QC runtime; add-ons; could say dftd3 gcp v2rdm_casscf instead of psi4-rt;; or leave them out if you don’t want them. How to update a Psi4 binary¶; Conda command to update an existing PSI4 conda installation to the; newest stable release (roughly annually). Warning; Until 1.1 is official, this pulls the July 2016 1.0 version. 1.0 and 1.1 really shouldn’t be mixed. >>> conda update psi4 -c psi4. # if psi4 channel in defaults (true for Psi4conda installers); >>> conda update psi4. Conda command to update an existing PSI4 conda installation to the; latest development head (roughly nightly).; >>> conda update psi4 -c psi4/label/dev. # if add-on updates required, try; >>> conda update psi4 -c psi4/label/dev -c psi4. How to use conda to compile Psi4 faster and easier¶; # Linux or Mac or Windows; # substitute x.x by 2.7|3.5|3.6 for alternate python versions; >>> conda create -n p4dev python=x.x psi4-dev -c psi4. Same for Linux/Mac/Windows. Substitute desired python version: 2.7, 3.5, 3.6. Fine; to choose your own env name. Activate environment, source activate; p4dev. Go to where you’ve cloned psi4. Execute psi4-path-advisor.; It gives you a basic cmake command covering python, sphinx, link-time qc; addons, and run-time qc addons. There’s a help menu -h that gives more; info. There’s other options that will also pre-configure compilers. For; example, at GaTech psi4-path-advisor --intel works. On Macs with; XCode, psi4-path-advisor --clang works. Just read the help. For DGAS,; there’s a --disable-addons, but I don’t encourage it. It gives you a fully; functional cmake command, but those are just ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/conda-1.html:6195,update,update,6195,psi4manual/1.1.0/conda-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/conda-1.html,2,['update'],['update']
Deployability,"s the code to generate the similariry transformed Hamiltonian.; ; cclambda(...); cclambda() -> float :; Runs the coupled cluster lambda equations code.; ; ccresponse(...); ccresponse() -> float :; Runs the coupled cluster response theory code.; ; ccsort(...); ccsort() -> float :; Runs CCSORT, which reorders integrals for use in the coupled cluster codes.; ; cctriples(...); cctriples() -> float :; Runs the coupled cluster (T) energy code.; ; clean(...); clean() -> None :; Function to remove scratch files. Call between independent jobs.; ; close_outfile(...); close_outfile() -> None :; Closes the output file.; ; compute_shell(...); compute_shell( (TwoBodyAOInt)arg1, (int)arg2, (int)arg3, (int)arg4, (int)arg5) -> None :; docstring; ; dcft(...); dcft() -> float :; Runs the density cumulant functional theory code.; ; deriv(...); deriv() -> int :; Runs deriv, which contracts density matrices with derivative integrals, to compute gradients.; ; detci(...); detci() -> float :; Runs the determinant-based configuration interaction code.; ; dfmp2(...); dfmp2() -> float :; Runs the DF-MP2 code.; ; dfmp2grad(...); dfmp2grad() -> float :; Runs the DF-MP2 gradient.; ; fd_1_0(...); fd_1_0( (list)arg1) -> PsiReturnType :; Performs a finite difference gradient computation, from energy points.; ; fd_freq_0(...); fd_freq_0( (list)arg1, (int)arg2) -> PsiReturnType :; Performs a finite difference frequency computation, from energy points, for a given irrep.; ; fd_freq_1(...); fd_freq_1( (list)arg1, (int)arg2) -> PsiReturnType :; Performs a finite difference frequency computation, from gradients, for a given irrep.; ; fd_geoms_1_0(...); fd_geoms_1_0() -> matrix_vector :; Gets the list of displacements needed for a finite difference gradient computation, from energy points.; ; fd_geoms_freq_0(...); fd_geoms_freq_0( (int)arg1) -> matrix_vector :; Gets the list of displacements needed for a finite difference frequency computation, from energy points, for a given irrep.; ; fd_geoms_freq_1(...);",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/psimod-1.html:155714,configurat,configuration,155714,psi4manual/4.0b5/psimod-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/psimod-1.html,2,['configurat'],['configuration']
Deployability,"s the coupled cluster energy code. cceom((arg0: psi::Wavefunction) -> float); Runs the equation of motion coupled cluster code, for excited states. cchbar((arg0: psi::Wavefunction) -> None); Runs the code to generate the similarity transformed Hamiltonian. cclambda(...); Runs the coupled cluster lambda equations code. ccresponse((arg0: psi::Wavefunction) -> float); Runs the coupled cluster response theory code. cctransort((arg0: psi::Wavefunction) -> None); Runs CCTRANSORT, which transforms and reorders integrals for use in the coupled cluster codes. cctriples((arg0: psi::Wavefunction) -> float); Runs the coupled cluster (T) energy code. clean(() -> None); Function to remove scratch files. clean_options(() -> None); Function to reset options to clean state. clean_variables(() -> None); Empties all PSI variables that have set internally. close_outfile(() -> None); Closes the output file. dcft(...); Runs the density cumulant functional theory code. detci(...); Runs the determinant-based configuration interaction code. dfmp2(...); Runs the DF-MP2 code. dfocc(...); Runs the density-fitted orbital optimized CC codes. displace_atom((arg0: psi::Matrix, arg1: int, ...); Displaces one coordinate of single atom. dmrg(...); Runs the DMRG code. efp_init(() -> psi4.core.EFP); Initializes the EFP library and returns an EFP object. efp_set_options(() -> None); Set EFP options from environment options object. fd_1_0((arg0: psi::Molecule, ...); Performs a finite difference gradient computation, from energy points. fd_freq_0((arg0: psi::Molecule, arg1: list, ...); Performs a finite difference frequency computation, from energy points, for a given irrep. fd_freq_1((arg0: psi::Molecule, arg1: list, ...); Performs a finite difference frequency computation, from gradients, for a given irrep. fd_geoms_1_0(...); Gets list of displacements needed for a finite difference gradient computation, from energy points. fd_geoms_freq_0((arg0: psi::Molecule, ...); Gets list of displacements needed for",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/psi4api-1.html:163295,configurat,configuration,163295,psi4manual/1.1.0/psi4api-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/psi4api-1.html,2,['configurat'],['configuration']
Deployability,"s this is often; much more costly than the energy. In addition, the Wavefunction density attributes; (Da and Db) return the SO density and must be transformed to the MO basis; to use with this function. New in version 0.5: wfn parameter passed explicitly. Returns; None. Parameters. filename (string) – destination file name for MOLDEN file (optional); do_virtual (bool) – do write all the MOs to the MOLDEN file (true) or discard the unoccupied MOs, not valid for NO’s (false) (optional); use_natural (bool) – write natural orbitals determined from density on wavefunction. Examples. Molden file with the Kohn-Sham orbitals of a DFT calculation.; >>> E, wfn = energy('b3lyp', return_wfn=True); >>> wfn.molden('mycalc.molden'). Molden file with the natural orbitals of a CCSD computation. For correlated methods, an energy call will not compute the density.; “properties” or “gradient” must be called.; >>> E, wfn = properties('ccsd', return_wfn=True); >>> wfn.molden('ccsd_no.molden', use_natural=True). To supply a custom density matrix, manually set the Da and Db of the wavefunction.; This is used, for example, to write natural orbitals coming from a root computed; by a CIWavefunction computation, e.g., detci, fci, casscf.`; The first two arguments of get_opdm can be set to n, n where n => 0 selects the root to; write out, provided these roots were computed, see NUM_ROOTS. The; third argument controls the spin (""A"", ""B"" or ""SUM"") and the final; boolean option determines whether inactive orbitals are included.; >>> E, wfn = energy('detci', return_wfn=True); >>> wfn.Da() = wfn.get_opdm(0, 0, ""A"", True); >>> wfn.Db() = wfn.get_opdm(0, 0, ""B"", True); >>> molden(wfn, 'no_root1.molden', use_natural=True). write_nbo(name)¶. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.6;  · . PSI4. PSI4 API: Linking C++ and Python; Wavefunction. © Copyright 2022, The Psi4 Project.; Last updated on Thursday, 19 May 2022 08:57PM.; Created using Sphinx 4.5.0.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/api/psi4.core.Wavefunction.html:27581,update,updated,27581,psi4manual/1.6.x/api/psi4.core.Wavefunction.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/api/psi4.core.Wavefunction.html,1,['update'],['updated']
Deployability,"s {...}, as shown below. Multiple basis sets can be; specified by adding additional sections within the surrounding brackets.; Use assign statements to actually request the basis set. This; basis {...} section replaces the usual set basis XXX line.; In a more complex input, if the user needs to call the user-defined; basis by name, this can be achieved using the syntax basis mybas {...},; and then the basis can be recalled later as set basis mybas.; To use a custom basis set as described in this section, it must be; defined prior to its use in a function that performs a computation.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14basis {. # assign basset to all atoms and addl to hydrogens; assign basset; assign H addl. # basis set section like in snippet above goes here; [basset]; ... # additional basis set sections follow; [addl]; ...; }. The test case mints2 provides a complete example of; user-specified basis sets. Inputting effective core potentials (ECPs)¶; For ECP containing basis sets, all of the above mechanisms may still be used to; input the basis set; simply place the ECP definitions (in G94 format) in the; same file or input section as the orbital basis definition. Because the ECP; appears in the same section as the orbital basis, it will be parsed; automatically and the number of core electrons the ECP represents will be; detected, so no further input is required to use a core potential. See; Effective core potentials (ECPs) for more information about using ECPs and the; Def2-TZVP basis set definition; for an example of their input syntax. table of contents. Basis Sets; Built-In Basis Sets; Mixing Basis Sets; Decontracted Basis Sets; User-Defined Basis Sets; Inputting effective core potentials (ECPs). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Psithon: Structuring an Input File. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 July 2018 04:21AM.; Created using Sphinx 1.7.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/basissets-1.html:11142,update,updated,11142,psi4manual/1.2.1/basissets-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/basissets-1.html,2,['update'],['updated']
Deployability,"s |. next |. previous |; PSI4 [beta2] » ; Psithon Functions: Invoking a Calculation ». Function Intercalls¶; For many of the PSI4 Python functions described above, it makes scientific; sense that they could be called in combination. For instance, one could; optimize all the reagents in a database or compute a; counterpoise-corrected interaction energy with an extrapolated method. The; table below outlines permitted intercalls between functions, showing that; db(opt(cbs(energy()))) is allowed, while db(cp(energy())) is not. This; table is not yet validated for calls with cp(). Permitted nesting of Psithon functions. Caller; Callee.  ; cp; db; opt; cbs; energy. Counterpoise Correct;  ; —; Y; Y; Y. Database; —;  ; Y; Y; Y. Optimize; —; —;  ; Y; Y. Complete Basis Set; —; —; —;  ; Y. Energy; —; —; —; —;  . The command db(opt(cbs(energy()))) is actually expressed as db(...,; db_func=opt, opt_func=cbs). The perhaps expected final argument of; cbs_func=energy is not necessary since energy() is always the function; called by default. Also, the outermost internal function call (db_func; above can be called as just func. Several examples of intercalls; between Python functions can be found in sample input pywrap_all.; All keyword arguments are passed along to each function traversed in the; Python driver, so there should be no concern for separating them, grouping; them, or designating them for a particular function when undertaking a; nested calculation. Where the same keyword is used by multiple functions,; prefixes are added, e.g., db_mode and opt_mode.; Function intercalls should not be used in sow/reap mode. Previous topic; <no title>; Next topic; Embarrassing Parallelism; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Psithon Functions: Invoking a Calculation ». © Copyright 2012, Psi4 Project.; Last updated on Sep 30, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/intercalls-1.html:2021,update,updated,2021,psi4manual/4.0b2/intercalls-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/intercalls-1.html,2,['update'],['updated']
Deployability,"s |; +-------------------------+---------------------------------------------------------------------------------------+; | eom-ccsd | equation of motion (EOM) CCSD |; +-------------------------+---------------------------------------------------------------------------------------+. :type name: string; :param name: ``'scf'`` || ``'df-mp2'`` || ``'ci5'`` || etc. First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; :py:func:`driver.energy`. :type func: :ref:`function <op_py_function>`; :param func: |dl| ``gradient`` |dr| || ``energy`` || ``cbs``. Indicates the type of calculation to be performed on the molecule.; The default dertype accesses``'gradient'`` or ``'energy'``, while; ``'cbs'`` performs a multistage finite difference calculation.; If a nested series of python functions is intended (see :ref:`sec:intercalls`),; use keyword ``opt_func`` instead of ``func``. :type mode: string; :param mode: |dl| ``'continuous'`` |dr| || ``'sow'`` || ``'reap'``. For a finite difference of energies optimization, indicates whether; the calculations required to complete the; optimization are to be run in one file (``'continuous'``) or are to be; farmed out in an embarrassingly parallel fashion; (``'sow'``/``'reap'``). For the latter, run an initial job with; ``'sow'`` and follow instructions in its output file. :type dertype: :ref:`dertype <op_py_dertype>`; :param dertype: ``'gradient'`` || ``'energy'``. Indicates whether analytic (if available) or finite difference; optimization is to be performed. :type molecule: :ref:`molecule <op_py_molecule>`; :param molecule: ``h2o`` || etc. The target molecule, if not the last molecule defined. :examples:. >>> # [1] Analytic scf optimization; >>> optimize('scf'). >>> # [2] Finite difference mp3 optimization; >>> opt('mp3'). >>> # [3] Forced finite difference ccsd optimization; >>> optimize('ccsd', dertype=1). """"""; lowername = name.lower(); kwargs = kwargs_lower(",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/_modules/driver.html:35248,continuous,continuous,35248,psi4manual/4.0b2/_modules/driver.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/_modules/driver.html,2,['continuous'],['continuous']
Deployability,"s"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!; Configuration for this set-up is summarized at How to run Psi4 as executable or Python module from conda installation. Note; PSI4 installs a Python distribution alongside, so you should choose an installer based on the Python version you want, irrespective of any Python version you have. How to install a Psi4 binary into an Ana/Miniconda distribution¶; Conda command to install the latest nightly build of PSI4 + compiled; add-ons + runtime add-ons into an existing Anaconda or Miniconda; distribution.; # Linux or Mac or Windows; # substitute x.x by 3.6|3.7|3.8|3.9 for alternate python versions; # remove `-c psi4/label/dev` to get stable releases instead of nightly builds; >>> conda create -n p4env python=x.x psi4 -c psi4/label/dev. Activate environment and make the adjustments to PATH and; PSI_SCRATCH that it suggests at the end. Test with psi4; --test. Configuration for this set-up is summarized at; How to run Psi4 as executable or Python module from conda installation.; Details:. It is advised to place PSI4 into a conda; environment where its libraries can’t interfere with other programs; rather than the main; Anaconda or Miniconda environment. Hence the creation of the environment; above, but the environment name (p4env above) can be; substituted.; The psi4-rt package can be added to the package list to get the; QC runtime add-ons; could say any combination of v2rdm_casscf snsmp2; openfermion-psi4 adcc cppe etc. instead of psi4-rt.; Grab a Miniconda through one of the below, selecting OS.; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-Linux-x86_64.sh""; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-MacOSX-x86_64.sh""; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-Windows-x86_64.exe"". How to update a Psi4 binary¶; A. Conda command to update an existing PSI4 conda installation to the; newest stable release (roughly annu",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/conda-1.html:5846,install,installation,5846,psi4manual/1.4.0/conda-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html,5,['install'],['installation']
Deployability,"s"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!; Configuration for this set-up is summarized at How to run Psi4 as executable or Python module from conda installation. Note; PSI4 installs a Python distribution alongside, so you should choose an installer based on the Python version you want, irrespective of any Python version you have. How to install a Psi4 binary into an Ana/Miniconda distribution¶; Conda command to install the latest nightly build of PSI4 + compiled; add-ons + runtime add-ons into an existing Anaconda or Miniconda; distribution.; # Linux or Mac or Windows; # substitute x.x by 3.6|3.7|3.8|3.9 for alternate python versions; # remove `-c psi4/label/dev` to get stable releases instead of nightly builds; >>> conda create -n p4env python=x.x psi4 -c psi4/label/dev. Activate environment and make the adjustments to PATH and; PSI_SCRATCH that it suggests at the end. Test with psi4; --test. Configuration for this set-up is summarized at; How to run Psi4 as executable or Python module from conda installation.; Details:. It is advised to place PSI4 into a conda; environment where its libraries can’t interfere with other programs; rather than the main; Anaconda or Miniconda environment. Hence the creation of the environment; above, but the environment name (p4env above) can be; substituted.; The psi4-rt package can be added to the package list to get the; QC runtime add-ons; could say any combination of v2rdm_casscf snsmp2; resp etc. instead of psi4-rt.; As of PSI4 v1.7, the psi4-rt package is being slowly retired; due to more optional dependencies being on conda-forge. Similar collections; of dependencies can be obtained from environment spec files like psi4/devtools/conda-envs .; Grab a Miniconda through one of the below, selecting OS.; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-Linux-x86_64.sh""; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-MacOSX-x86_64.sh""; >>> curl -O ""https",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/conda.html:5837,install,installation,5837,psi4manual/1.7.x/conda.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/conda.html,4,['install'],['installation']
Deployability,"s(). In this example, the Vvals array contains the electrostatic potential at each; grid point, in the order that the grid was specified, while the Exvals,; Eyvals and Ezvals arrays contain the x, y and z components of the; electric field, respectively; all of these arrays can be iterated and; manipulated using standard Python syntax. For a complete demonstration of this; utility, see the props4 test case. Minimal Basis Iterative Stockholder¶; The Minimal Basis Iterative Stockholder (MBIS) method is one of many procedures; that partitions a molecular one-particle density matrix into atomic electron densities.; Running MBIS in PSI4 will calculate atomic valence charge widths, volume ratios,; atomic charges, as well as dipoles, quadrupoles, and octupoles.; Additionally, all expectation values of radial moments of n-th order (\(<r^n>\)); are computed up to fourth order. Higher moments can be computed by specifying MAX_RADIAL_MOMENT.; The volume ratios are computed as the ratio between the volume of the atomic density; (\(<r^3>\)) and the volume of the free atom computed using the same level; of theory, but with a potentially unrestricted reference.; The allowed number of iterations and convergence criteria for the stockholder; algorithm is controlled by MBIS_MAXITER and MBIS_D_CONVERGENCE. Note; that the density is partitioned on a molecular quadrature grid, the details of which can be; controlled with the keywords MBIS_RADIAL_POINTS, MBIS_SPHERICAL_POINTS, and; MBIS_PRUNING_SCHEME. (Associated Paper: [Verstraelen:2016]). table of contents. Evaluation of One-Electron Properties — oeprop(); Basic Keywords; Properties evaluated on a grid; Minimal Basis Iterative Stockholder. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.6;  · . PSI4. Theoretical Methods: SCF to FCI; Evaluation of One-Electron Properties — oeprop(). © Copyright 2022, The Psi4 Project.; Last updated on Thursday, 19 May 2022 08:57PM.; Created using Sphinx 4.5.0.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/oeprop.html:7038,update,updated,7038,psi4manual/1.6.x/oeprop.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/oeprop.html,1,['update'],['updated']
Deployability,"s)). @staticmethod; [docs] def full_name_to_bits(pg): # altered signature from (pg, bits):; """""". """"""; pgc = pg.capitalize(). if pgc == 'C1':; bits = PointGroups['C1']; elif pgc == 'Ci':; bits = PointGroups['Ci']; elif pgc == 'C2(x)' or pgc == 'C2x' or pgc == 'C2_x':; bits = PointGroups['C2X']; elif pgc == 'C2(y)' or pgc == 'C2y' or pgc == 'C2_y':; bits = PointGroups['C2Y']; elif pgc == 'C2(z)' or pgc == 'C2z' or pgc == 'C2_z':; bits = PointGroups['C2Z']; elif pgc == 'Cs(x)' or pgc == 'Csx' or pgc == 'Cs_x':; bits = PointGroups['CsX']; elif pgc == 'Cs(y)' or pgc == 'Csy' or pgc == 'Cs_y':; bits = PointGroups['CsY']; elif pgc == 'Cs(z)' or pgc == 'Csz' or pgc == 'Cs_z':; bits = PointGroups['CsZ']; elif pgc == 'D2':; bits = PointGroups['D2']; elif pgc == 'C2v(x)' or pgc == 'C2vx' or pgc == 'C2v_x': # changed from C2v(X); bits = PointGroups['C2vX']; elif pgc == 'C2v(y)' or pgc == 'C2vy' or pgc == 'C2v_y': # changed from C2v(Y); bits = PointGroups['C2vY']; elif pgc == 'C2v(z)' or pgc == 'C2vz' or pgc == 'C2v_z': # changed from C2v(Z); bits = PointGroups['C2vZ']; elif pgc == 'C2h(x)' or pgc == 'C2hx' or pgc == 'C2h_x': # changed from C2h(X); bits = PointGroups['C2hX']; elif pgc == 'C2h(y)' or pgc == 'C2hy' or pgc == 'C2h_y': # changed from C2h(Y); bits = PointGroups['C2hY']; elif pgc == 'C2h(z)' or pgc == 'C2hz' or pgc == 'C2h_z': # changed from C2h(Z); bits = PointGroups['C2hZ']; elif pgc == 'D2h':; bits = PointGroups['D2h']. # Ok, the user gave us Cs, C2v, C2h, C2, but no directionality; elif pgc == 'Cs':; bits = PointGroups['CsX']; elif pgc == 'C2v':; bits = PointGroups['C2vZ']; elif pgc == 'C2h':; bits = PointGroups['C2hZ']; elif pgc == 'C2':; bits = PointGroups['C2Z']. else:; bits = None. return bits. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    ; Psi4 [1.0.0 6a9a71b] » ; Module code ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/libmintspointgrp.html:46697,update,updated,46697,psi4manual/1.0.0/_modules/qcdb/libmintspointgrp.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/libmintspointgrp.html,1,['update'],['updated']
Deployability,"s). Recommendations¶; The SCF code is already quite flexible and powerful, with new features being; added weekly. We have tried as much as possible to keep the number of options to; a minimum, and to allow all options to be used in the presence of all other; options. Below are some rough words of advice about using the SCF code for; practical calculations:. For GUESS, the SAD guess is usually your; friend, even for open-shell systems (at the very least, it gets the right; number of electrons, unlike some other programs). For instance, we have found; that a simple SAD guess is often as good as doing a full SCF in a 3-21G basis; and then performing a cast-up, at a fraction of the cost. However, SAD and; DOCC/SOCC arrays do not play very well together at the moment.; For wall time, DF may be a factor of ten or more faster than the exact; integral technologies available in PSI4.; Use DF unless you need absolute accuracy or do not; have a -JKFIT auxiliary set for your primary basis/atom type. Then use; OUT_OF_CORE unless you run out of disk space.; Don’t mess with the DIIS convergence options unless convergence is a problem.; We have optimized the parameters for efficiency over a wide array of system; types.; Buy a developer a beer!. The “best-practice” input file for HF is:; memory 1 GB # As much as you've got, the DF algorithm can use. molecule {; He; }. set {; basis cc-pvdz; scf_type df; guess sad; }. energy('scf'). Table Of Contents. Hartree–Fock Theory; Introduction; Theory; Minimal Input; Spin/Symmetry Treatment; Orthogonalization; Initial Guess/Convergence Stabilization; ERI Algorithms; Recommendations. Previous topic; Notes on Options; Next topic; Density Functional Theory; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Theoretical Methods: SCF to FCI ». © Copyright 2012, Psi4 Project.; Last updated on Sep 30, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/scf-1.html:20640,update,updated,20640,psi4manual/4.0b2/scf-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/scf-1.html,2,['update'],['updated']
Deployability,"s)[source]¶; Function to call Wes Allen-style Focal; Point Analysis. JCP 127 014306. Uses; the composite wrapper to evaluate the following; expression. SCF employs a three-point extrapolation according; to scf_xtpl_helgaker_3(). MP2, CCSD, and; CCSD(T) employ two-point extrapolation performed according to; corl_xtpl_helgaker_2(). CCSDT and CCSDT(Q); are plain deltas. This wrapper requires Kallay’s MRCC code. \[E_{total}^{\text{FPA}} = E_{total,\; \text{SCF}}^{\text{cc-pV[Q56]Z}} \; + E_{corl,\; \text{MP2}}^{\text{cc-pV[56]Z}} \; + \delta_{\text{MP2}}^{\text{CCSD}}\big\vert_{\text{cc-pV[56]Z}} \; + \delta_{\text{CCSD}}^{\text{CCSD(T)}}\big\vert_{\text{cc-pV[56]Z}} \; + \delta_{\text{CCSD(T)}}^{\text{CCSDT}}\big\vert_{\text{cc-pVTZ}} \; + \delta_{\text{CCSDT}}^{\text{CCSDT(Q)}}\big\vert_{\text{cc-pVDZ}}\]; >>> # [1] single-point energy by this composite method; >>> energy('allen_focal_point'). >>> # [2] single-point energy reducing the Hartree-Fock basis sets size; >>> energy('allen_focal_point', scf_basis='cc-pV[TQ5]Z'). Return type; List[Dict[str, Any]]. Additional composite aliases are easy to define by the; user. Follow models in psi4/psi4/driver/aliases.py; and cbs-xtpl-nbody and use the; psi4.driver.driver_cbs_helper.register_composite_function(); to make user-defined functions known to PSI4. psi4.driver.driver_cbs_helper.register_composite_function(func)[source]¶; Register a user-defined composite method function to use like a built-in one. Parameters; func (Callable) – A Python function that defines a configuration of the psi4.cbs() wrapper.; See psi4/psi4/driver/aliases.py and cbs-xtpl-nbody for examples. table of contents. Complete Basis Set; Output; Extrapolation Schemes; Aliases. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.6;  · . PSI4. Psithon Functions: Invoking a Calculation; Complete Basis Set. © Copyright 2022, The Psi4 Project.; Last updated on Thursday, 19 May 2022 08:57PM.; Created using Sphinx 4.5.0.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/cbs.html:32811,configurat,configuration,32811,psi4manual/1.6.x/cbs.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/cbs.html,2,"['configurat', 'update']","['configuration', 'updated']"
Deployability,"s, ROTATION for specific rotations, ROA for Raman Optical Activity (ROA_TENSOR for each displacement), and ALL for all of the above. Type: string; Possible Values: POLARIZABILITY, ROTATION, ROA, ROA_TENSOR, ALL; Default: POLARIZABILITY. OMEGA¶. Array that specifies the desired frequencies of the incident radiation field in CCLR calculations. If only one element is given, the units will be assumed to be atomic units. If more than one element is given, then the units must be specified as the final element of the array. Acceptable units are HZ, NM, EV, and AU. Type: array; Default: No Default. GAUGE¶. Specifies the choice of representation of the electric dipole operator. For polarizability, this keyword is ignored and LENGTH gauge is computed. For optical rotation and raman optical activity, this keyword is active, and acceptable values are LENGTH for the usual length-gauge representation, VELOCITY``(default) for the modified velocity-gauge representation in which the static-limit optical rotation tensor is subtracted from the frequency- dependent tensor, or ``BOTH. Note that, for optical rotation and raman optical activity calculations, only the choices of VELOCITY or BOTH will yield origin-independent results. Type: string; Possible Values: LENGTH, VELOCITY, BOTH; Default: VELOCITY. table of contents. CC: Coupled Cluster Theory; Basic Keywords; REFERENCE; R_CONVERGENCE; MAXITER; BRUECKNER_ORBS_R_CONVERGENCE; RESTART; CACHELEVEL; CACHETYPE; NUM_AMPS_PRINT; MP2_AMPS_PRINT. Larger Calculations; Excited State Coupled Cluster Calculations; ROOTS_PER_IRREP; E_CONVERGENCE; SINGLES_PRINT; SCHMIDT_ADD_RESIDUAL_TOLERANCE; EOM_GUESS. Linear Response (CCLR) Calculations; PROPERTY; OMEGA; GAUGE. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Theoretical Methods: SCF to FCI; CC: Coupled Cluster Theory. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/cc.html:13355,update,updated,13355,psi4manual/1.7.x/cc.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/cc.html,1,['update'],['updated']
Deployability,"s-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> echo ""export PATH=$HOME/psi4conda/bin:\$PATH"" >> ~/.bashrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. That last command tested that psi4 is in your path, and it’s finding; all the libraries it needs. It works because PSI_SCRATCH; defaults to /tmp. Now you need only specify a permanent scratch; directory (see Scratch Files and Elementary Restart) by replacing the placeholder in the; following:; >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!; Configuration for this set-up is summarized at How to run Psi4 as executable or Python module from conda installation. Note; PSI4 installs a Python distribution alongside, so you should choose an installer based on the Python version you want, irrespective of any Python version you have. Note; Above commands use bash for installation and set up your environment for bash at runtime. To use csh at runtime, follow the on-screen directions at the end of the installation or consult step 7 below. How to install a Psi4 binary into an Ana/Miniconda distribution¶; Conda command to install the latest nightly build of PSI4 + compiled; add-ons + runtime add-ons into an existing Anaconda or Miniconda; distribution.; # Linux or Mac or Windows; # substitute x.x by 2.7|3.5|3.6 for alternate python versions; # remove `-c psi4/label/dev` to get stable releases instead of nightly builds; >>> conda create -n p4env python=x.x psi4 psi4-rt -c psi4/label/dev -c psi4. Activate environment and make the adjustments to PATH and; PSI_SCRATCH that it suggests at the end. Test with psi4; --test. Configuration for this set-up is summarized at; How to run Psi4 as executable or Python module from conda installation.; Details:. It is advised to place PSI4 into a conda; environment where its libraries can’t interfere with other programs; rather than",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/conda-1.html:4597,install,installation,4597,psi4manual/1.2.1/conda-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/conda-1.html,2,['install'],['installation']
Deployability,"s-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> echo ""export PATH=$HOME/psi4conda/bin:\$PATH"" >> ~/.bashrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. That last command tested that psi4 is in your path, and it’s finding; all the libraries it needs. It works because PSI_SCRATCH; defaults to /tmp. Now you need only specify a permanent scratch; directory (see Scratch Files and Elementary Restart) by replacing the placeholder in the; following:; >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!; Configuration for this set-up is summarized at How to run Psi4 as executable or Python module from conda installation. Note; PSI4 installs a Python distribution alongside, so you should choose an installer based on the Python version you want, irrespective of any Python version you have. Note; Above commands use bash for installation and set up your environment for bash at runtime. To use csh at runtime, follow the on-screen directions at the end of the installation or consult step 7 below. How to install a Psi4 binary into an Ana/Miniconda distribution¶; Conda command to install the latest nightly build of PSI4 + compiled; add-ons + runtime add-ons into an existing Anaconda or Miniconda; distribution.; # Linux or Mac or Windows; # substitute x.x by 2.7|3.5|3.6 for alternate python versions; >>> conda create -n p4env python=x.x psi4 psi4-rt -c psi4/label/dev -c psi4. Activate environment and make the adjustments to PATH and; PSI_SCRATCH that it suggests at the end. Test with psi4; --test. Configuration for this set-up is summarized at; How to run Psi4 as executable or Python module from conda installation.; Details:. It is strongly recommended to place PSI4 into a conda; environment where its libraries can’t interfere with other programs (on; Linux/Windows, PSI4 installs a non-default gcc 5.2) rather than the main;",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/conda-1.html:4388,install,installation,4388,psi4manual/1.1.0/conda-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/conda-1.html,2,['install'],['installation']
Deployability,"s-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> echo ""export PATH=$HOME/psi4conda/bin:\$PATH"" >> ~/.bashrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. That last command tested that psi4 is in your path, and it’s finding; all the libraries it needs. It works because PSI_SCRATCH; defaults to /tmp. Now you need only specify a permanent scratch; directory (see Scratch Files and Elementary Restart) by replacing the placeholder in the; following:; >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!; Configuration for this set-up is summarized at How to run Psi4 as executable or Python module from conda installation. Note; PSI4 installs a Python distribution alongside, so you should choose an installer based on the Python version you want, irrespective of any Python version you have. Note; Above commands use bash for installation and set up your environment for bash at runtime. To use csh at runtime, follow the on-screen directions at the end of the installation or consult step 7 below. How to install a Psi4 binary into an Ana/Miniconda distribution¶; Conda command to install the latest nightly build of PSI4 + compiled; add-ons + runtime add-ons into an existing Anaconda or Miniconda; distribution.; # Linux or Mac or Windows; # substitute x.x by 3.5|3.6|3.7 for alternate python versions; # remove `-c psi4/label/dev` to get stable releases instead of nightly builds; >>> conda create -n p4env python=x.x psi4 psi4-rt -c psi4/label/dev -c psi4. Activate environment and make the adjustments to PATH and; PSI_SCRATCH that it suggests at the end. Test with psi4; --test. Configuration for this set-up is summarized at; How to run Psi4 as executable or Python module from conda installation.; Details:. It is advised to place PSI4 into a conda; environment where its libraries can’t interfere with other programs; rather than",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/conda-1.html:4597,install,installation,4597,psi4manual/1.3.2/conda-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/conda-1.html,2,['install'],['installation']
Deployability,"s. Type: integer; Default: 5. TIKHONOW_OMEGA¶. The shift to apply to the denominators, {it c.f.} Taube and Bartlett, JCP, 130, 144112 (2009). Type: double; Default: 0.0. TRIPLES_ALGORITHM¶. The type of algorithm to use for (T) computations. Type: string; Possible Values: SPIN_ADAPTED, RESTRICTED, UNRESTRICTED; Default: RESTRICTED. TRIPLES_DIIS¶. Do use DIIS extrapolation to accelerate convergence for iterative triples excitations?. Type: boolean; Default: false. USE_SPIN_SYM¶. Do use symmetry to map equivalent determinants onto each other, for efficiency?. Type: boolean; Default: true. WFN_SYM¶. The symmetry of the target wavefunction, specified either by Schönflies symbol, or irrep number (in Cotton ordering). Type: string; Default: 1. ZERO_INTERNAL_AMPS¶. Do zero the internal amplitudes, i.e., those that map reference determinants onto each other?. Type: boolean; Default: true. Expert¶. TIKHONOW_TRIPLES¶. Do use Tikhonow regularization in (T) computations?. Type: boolean; Default: false. USE_SPIN_SYMMETRY¶. Whether to use spin symmetry to map equivalent configurations onto each other, for efficiency. Type: boolean; Default: true. table of contents. PSIMRCC; General; CC_NUM_THREADS; CORR_ANSATZ; CORR_CCSD_T; CORR_CHARGE; CORR_MULTP; CORR_WFN; COUPLING; COUPLING_TERMS; DAMPING_PERCENTAGE; DIAGONALIZE_HEFF; DIAGONAL_CCSD_T; DIIS_MAX_VECS; DIIS_START; E_CONVERGENCE; FAVG_CCSD_T; FOLLOW_ROOT; HEFF4; HEFF_PRINT; LOCK_SINGLET; MAXITER; MP2_CCSD_METHOD; MP2_GUESS; NO_SINGLES; OFFDIAGONAL_CCSD_T; PERTURB_CBS; PERTURB_CBS_COUPLING; PT_ENERGY; R_CONVERGENCE; SMALL_CUTOFF; TIKHONOW_MAX; TIKHONOW_OMEGA; TRIPLES_ALGORITHM; TRIPLES_DIIS; USE_SPIN_SYM; WFN_SYM; ZERO_INTERNAL_AMPS. Expert; TIKHONOW_TRIPLES; USE_SPIN_SYMMETRY. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.6;  · . PSI4. Appendices; Keywords by Module; PSIMRCC. © Copyright 2022, The Psi4 Project.; Last updated on Thursday, 19 May 2022 08:57PM.; Created using Sphinx 4.5.0.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/autodir_options_c/module__psimrcc.html:4818,configurat,configurations,4818,psi4manual/1.6.x/autodir_options_c/module__psimrcc.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/autodir_options_c/module__psimrcc.html,2,"['configurat', 'update']","['configurations', 'updated']"
Deployability,"s. mrcc4; approximate CC through quadruples. mrcc5; approximate CC through quintuples. mrcc6; approximate CC through sextuples. mrccsdt-3; CC through doubles with iterative triples (all but the most expensive terms). mrccsdtq-3; CC through triples with iterative quadruples (all but the most expensive terms). mrccsdtqp-3; CC through quadruples with iterative quintuples (all but the most expensive terms). mrccsdtqph-3; CC through quintuples with iterative sextuples (all but the most expensive terms). Parameters:; name (string) – 'scf' || 'df-mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Parameters:bypass_scf (boolean) – 'on' || 'off' ; Indicates whether, for name values built atop of scf calculations,; the scf step is skipped. Suitable when special steps are taken to get; the scf to converge in an explicit preceeding scf step. Examples :. >>> # [1] Coupled-cluster singles and doubles calculation with psi code; >>> energy('ccsd'). >>> # [2] Charge-transfer SAPT calculation with scf projection from small into; >>> # requested basis, with specified projection fitting basis; >>> set basis_guess true; >>> set df_basis_guess jun-cc-pVDZ-JKFIT; >>> energy('sapt0-ct'). >>> # [3] Arbitrary-order MPn calculation; >>> energy('mp4'). >>> # [4] Converge scf as singlet, then run detci as triplet upon singlet reference; >>> molecule H2 {\\n0 1\\nH\\nH 1 0.74\\n}; >>> energy('scf'); >>> H2.set_multiplicity(3); >>> energy('detci', bypass_scf=True). Previous topic; Notes on Options; Next topic; Property; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Psithon Functions: Invoking a Calculation ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 25, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/energy-1.html:13705,update,updated,13705,psi4manual/4.0b4/energy-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/energy-1.html,2,['update'],['updated']
Deployability,"s. mrcc4; approximate CC through quadruples. mrcc5; approximate CC through quintuples. mrcc6; approximate CC through sextuples. mrccsdt-3; CC through doubles with iterative triples (all but the most expensive terms). mrccsdtq-3; CC through triples with iterative quadruples (all but the most expensive terms). mrccsdtqp-3; CC through quadruples with iterative quintuples (all but the most expensive terms). mrccsdtqph-3; CC through quintuples with iterative sextuples (all but the most expensive terms). Parameters:; name (string) – 'scf' || 'df-mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Parameters:bypass_scf (boolean) – 'on' || 'off' ; Indicates whether, for name values built atop of scf calculations,; the scf step is skipped. Suitable when special steps are taken to get; the scf to converge in an explicit preceeding scf step. Examples :. >>> # [1] Coupled-cluster singles and doubles calculation with psi code; >>> energy('ccsd'). >>> # [2] Charge-transfer SAPT calculation with scf projection from small into; >>> # requested basis, with specified projection fitting basis; >>> set basis_guess true; >>> set df_basis_guess jun-cc-pVDZ-JKFIT; >>> energy('sapt0-ct'). >>> # [3] Arbitrary-order MPn calculation; >>> energy('mp4'). >>> # [4] Converge scf as singlet, then run detci as triplet upon singlet reference; >>> molecule H2 {\\n0 1\\nH\\nH 1 0.74\\n}; >>> energy('scf'); >>> H2.set_multiplicity(3); >>> energy('detci', bypass_scf=True). Previous topic; Notes on Options; Next topic; Property; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Psithon Functions: Invoking a Calculation ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/energy-1.html:13705,update,updated,13705,psi4manual/4.0b5/energy-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/energy-1.html,2,['update'],['updated']
Deployability,"s.match(str(kwargs['keep'])) if 'keep' in kwargs else False; os.chdir('..'); try:; if keep or ('path' in kwargs):; p4out.write('\n CFOUR scratch files have been kept in %s\n' % (psioh.get_default_path() + cfour_tmpdir)); else:; shutil.rmtree(cfour_tmpdir); except OSError as e:; print('Unable to remove CFOUR temporary directory %s' % e, file=sys.stderr); exit(1). # Return to submission directory and reopen output file; os.chdir(current_directory); p4out.close(); psi4.reopen_outfile(). psi4.print_out('\n'); p4util.banner(' Cfour %s %s Results ' % (name.lower(), calledby.capitalize())); psi4.print_variables(); if c4grad:; psi4.get_gradient().print_out(). psi4.print_out('\n'); p4util.banner(' Cfour %s %s Results ' % (name.lower(), calledby.capitalize())); psi4.print_variables(); if c4grad:; psi4.get_gradient().print_out(). # Quit if Cfour threw error; if psi4.get_variable('CFOUR ERROR CODE'):; raise ValidationError(""""""Cfour exited abnormally.""""""). P4C4_INFO.clear(); P4C4_INFO.update(internal_p4c4_info). optstash.restore(). [docs]def cfour_list():; """"""Form list of Cfour :py:func:`~driver.energy` arguments.""""""; return qcdb.cfour.cfour_list(). [docs]def cfour_gradient_list():; """"""Form list of Cfour analytic :py:func:`~driver.gradient` arguments.""""""; return qcdb.cfour.cfour_gradient_list(). [docs]def cfour_psivar_list():; """"""Form dictionary of :ref:`PSI Variables <apdx:cfour_psivar>` set by Cfour methods.""""""; return qcdb.cfour.cfour_psivar_list(). [docs]def write_zmat(name, dertype):; """"""Returns string with contents of Cfour ZMAT file as gathered from; active molecule, current keyword settings, and cfour {...} block. """"""; # Handle memory; mem = int(0.000001 * psi4.get_memory()); if mem == 256:; memcmd, memkw = '', {}; else:; memcmd, memkw = qcdb.cfour.muster_memory(mem). # Handle molecule and basis set; molecule = psi4.get_active_molecule(); if molecule.name() == 'blank_molecule_psi4_yo':; molcmd, molkw = '', {}; bascmd, baskw = '', {}; psi4.set_local_option('CFOUR', 'TRANSL",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/procedures/interface_cfour.html:13319,update,update,13319,psi4manual/1.0.0/_modules/procedures/interface_cfour.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/procedures/interface_cfour.html,1,['update'],['update']
Deployability,"s/424295; # uncheck admins ""Do not allow ..."" and Save changes. >>> git push upstream master. # re-engage admins ""Do not allow ..."" protections. Tag postrelease¶. # be on clean maintenance branch up-to-date with upstream in both commits and tags; # * mind which version strings get ""v"" and which don't; # * if not fork, replace ""upstream"" with ""origin"". >>> git checkout 1.3.x; Switched to branch '1.3.x'. >>> vi psi4/metadata.py; >>> git diff; diff --git a/psi4/metadata.py b/psi4/metadata.py; ...; -__version__ = '1.3'; -__version_long = '1.3+zzzzzzz'; +__version__ = '1.3.1'; +__version_long = '1.3.1+zzzzzzz'. >>> git add psi4/metadata.py; >>> git commit -m ""v1.3.1""; [1.3.x 2ce1c29] v1.3.1. >>> git log --oneline | head -1; 786fb2b v1.3.1; >>> git tag -a v1.3.1 2ce1c29 -m ""v1.3.1"". # skipping the hash recording and ""upcoming"" step b/c only tags matter on maintenance branch. # free pushing to maintenance branches at present so GitHub interface steps not needed. # see note at ""Tag (pre)release"" for why atomic commit needed. Collect docs from GHA artifacts. >>> git push --atomic upstream 1.3.x v1.3.1. Initialize release branch¶. follow tagging procedure; before re-engaging the admins “Do not allow …” button, push a branch at the tag commit (not the records commit); >>> git log --online | head -2; 45315cb Records tag for v1.3; 20e5c7e v1.3. >>> git checkout 20e5c7e; >>> git checkout -b 1.3.x; Switched to a new branch '1.3.x'; >>> git push upstream 1.3.x. set up new branch as protected branch through GitHub psi4 org Settings. Should be already covered under 1.*.x rule. Build extra Conda packages for Psi4 channel¶; Once upon a time, “Psi4 stack”, meant packages psi4, psi4-rt, psi4-dev, and psi4-docs.; Package psi4-docs used to be in “Psi4 stack”, but it’s handled by GHA and netlify now, not Conda.; Package psi4-rt used to be in “Psi4 stack”, but a maximum ecosystem package isn’t provided now, only a customizable env spec.; Package psi4-dev used to be in “Psi4 stack”, but now bu",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/manage_release.html:12060,release,release,12060,psi4manual/1.9.x/manage_release.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/manage_release.html,2,['release'],['release']
Deployability,"s/4385008 # !Varies!; # uncheck ""Include administrators"" and Save changes. >>> git push upstream 1.3.x; >>> git push upstream v1.3.1. # re-engage ""Include administrators"" protections. Initialize release branch¶. follow tagging procedure; before re-engaing the “include admin” button, push a branch at the tag commit (not the records commit); >>> git log --online | head -2; 45315cb Records tag for v1.3; 20e5c7e v1.3. >>> git checkout 20e5c7e; >>> git checkout -b 1.3.x; Switched to a new branch '1.3.x'; >>> git push upstream 1.3.x. set up new branch as protected branch through GitHub psi4 org Settings. Build Conda Psi4 stack at specific commit¶; By “Psi4 stack”, mean packages psi4, psi4-rt, psi4-dev, psi4-docs.; Other packages, the “ecosystem stack” (e.g., libint, v2rdm_casscf) should be already built. Check poodle for stray channels that may have crept in for dependencies (like c-f for ACS season). Copy over new dependencies if needed to psi4 channel; Particularly before release (not prerelease), consider max pinnings on dependencies, particularly any fast-moving dependencies (e.g., qcel) and whether they need version space to grow compatibly and grow incompatibly.; Nightly conda-builds work from master psi4. (Postrelease “practice” works from 1.N.x psi4.). Instead, switch source/git_tag from master to tag (e.g., v1.3rc1) in:. psi4-multiout on Linux & Mac, https://github.com/psi4/psi4meta/blob/master/conda-recipes/psi4-multiout/meta.yaml#L10; psi4-docs on Linux, https://github.com/psi4/psi4meta/blob/master/conda-recipes/psi4-docs/meta.yaml#L10 on L. In cbcy, edit psi4ver to “v”-less tag. For releases and postreleases (not prereleases), in conda_build_config.yaml, edit ltrtver to a new non-dev label (probably a ditto) matching the release (e.g., “1.3”); Set kitandkapoodle.py to the normal *** stack. Should be (psi4, psi4-rt, psi4-dev) * python_versions for Linux & Mac. Also single psi4-docs from Linux; Run kitandkapoodle.py and allow stack to upload to anaconda.org to ps",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/manage_release-1.html:8776,release,release,8776,psi4manual/1.4.0/manage_release-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/manage_release-1.html,2,['release'],['release']
Deployability,"s2,xvals4]). # Find ranges for the plot; dE = maxE - minE; minE -= 0.2*dE; maxE += 0.4*dE; dR = maxR - minR; minR -= 0.2*dR; maxR += 0.2*dR. # Generate the fitted PES; xpts = np.linspace(minR, maxR, 1000); xrel = xpts - re; xpows = xrel[:, None] ** range(5); fit2 = np.einsum('xd,d', xpows[:,0:3], dvals[0:3]); fit4 = np.einsum('xd,d', xpows, dvals). # Make / display the plot; plt.plot(xpts, fit2, 'b', linewidth=2.5, label='Harmonic (quadratic) fit'); plt.plot(xpts, fit4, 'g', linewidth=2.5, label='Anharmonic (quartic) fit'); plt.plot([re, re], [minE, maxE], 'b--', linewidth=0.5); plt.plot([r0, r0], [minE, maxE], 'g--', linewidth=0.5); plt.scatter(rvals, energies, c='Black', linewidth=3, label='Input Data'); plt.legend(). plt.xlabel('Bond length (Angstroms)'); plt.ylabel('Energy (Eh)'); plt.xlim(minR, maxR); plt.ylim(minE, maxE); if plot_fit == 'screen':; plt.show(); else:; plt.savefig(plot_fit); core.print_out(""\n\tPES fit saved to %s.\n\n"" % plot_fit). core.print_out(""\nre = %10.6f A check: %10.6f\n"" % (re, recheck)); core.print_out(""r0 = %10.6f A\n"" % r0); core.print_out(""E at re = %17.10f Eh\n"" % e); core.print_out(""we = %10.4f cm-1\n"" % we); core.print_out(""wexe = %10.4f cm-1\n"" % wexe); core.print_out(""nu = %10.4f cm-1\n"" % nu); core.print_out(""ZPVE(we) = %10.4f cm-1\n"" % zpve_we); core.print_out(""ZPVE(nu) = %10.4f cm-1\n"" % zpve_nu); core.print_out(""Be = %10.4f cm-1\n"" % B); core.print_out(""B0 = %10.4f cm-1\n"" % B0); core.print_out(""ae = %10.4f cm-1\n"" % ae); core.print_out(""De = %10.7f cm-1\n"" % de); results = {; ""re"" : re,; ""r0"" : r0,; ""we"" : we,; ""wexe"" : wexe,; ""nu"" : nu,; ""E(re)"" : e,; ""ZPVE(harmonic)"" : zpve_we,; ""ZPVE(anharmonic)"" : zpve_nu,; ""Be"" : B,; ""B0"" : B0,; ""ae"" : ae,; ""De"" : de; }; return results. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .  · ; 1.7;  · . PSI4. Module code; psi4.driver.diatomic. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/diatomic.html:10296,update,updated,10296,psi4manual/1.7.x/_modules/psi4/driver/diatomic.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/diatomic.html,1,['update'],['updated']
Deployability,"s: We had trouble with icpc 12.0.x. Use 12.1 or; later. VI. Common Problems with PSI Compilation¶. No rule to make target foo.h, needed by bar.d. Stop.; This commonly happens after pulling updates from the repository. It happens; when a library header file is removed or renamed by the update, but there are; still old dependency files in the object directory, which think that they; still need to know about that header. There’s a simple remedy, just run; >>> make DODEPEND=no dclean. in the object directory. Make gets stuck in an infinite loop; This means that the makefiles have not been properly updated. Running; >>> autoconf. in the top-level Psi directory, followed by; >>> ./config.status --recheck; >>> ./config.status. in the object directory should fix it. This procedure will need to be run; whenever an update changes the directory structure. Incompatible g++/icpc; The Intel compilers require an installed set of C++ headers. Unfortunately,; the GNU compilers tend to be more cutting-edge than the Intel compilers,; meaning that Intel is always playing catch-up to new features in g++. This; means the two are often incompatible, leading to trouble if one wants to use; icpc to compile PSI4 (or anything else...). Your best bet in general is to not; upgrade Linux too fast, and always keep the very latest Intel compilers; around. Missing symbols like “do_fio” or “e_wsfe”; See Section IV(3) above. Table Of Contents. Installation Instructions for PSI4; I. Compilation Prerequisites; II. Brief Summary of Configuration, Compilation, and Installation; III. Detailed Installation Instructions; IV. Recommendations for BLAS and LAPACK libraries; V. Miscellaneous Architecture-Specific Notes; VI. Common Problems with PSI Compilation. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    ; PSI4 [beta3] » . © Copyright 2012, The Psi4 Project.; Last updated on Oct 01, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/installfile.html:27157,upgrade,upgrade,27157,psi4manual/4.0b3/installfile.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/installfile.html,2,"['update', 'upgrade']","['updated', 'upgrade']"
Deployability,"s: We had trouble with icpc 12.0.x. Use 12.1 or; later. VI. Common Problems with PSI Compilation¶. No rule to make target foo.h, needed by bar.d. Stop.; This commonly happens after pulling updates from the repository. It happens; when a library header file is removed or renamed by the update, but there are; still old dependency files in the object directory, which think that they; still need to know about that header. There’s a simple remedy, just run; >>> make DODEPEND=no dclean. in the object directory. Make gets stuck in an infinite loop; This means that the makefiles have not been properly updated. Running; >>> autoconf. in the top-level Psi directory, followed by; >>> ./config.status --recheck; >>> ./config.status. in the object directory should fix it. This procedure will need to be run; whenever an update changes the directory structure. Incompatible g++/icpc; The Intel compilers require an installed set of C++ headers. Unfortunately,; the GNU compilers tend to be more cutting-edge than the Intel compilers,; meaning that Intel is always playing catch-up to new features in g++. This; means the two are often incompatible, leading to trouble if one wants to use; icpc to compile PSI4 (or anything else...). Your best bet in general is to not; upgrade Linux too fast, and always keep the very latest Intel compilers; around. Missing symbols like “do_fio” or “e_wsfe”; See Section IV(3) above. Table Of Contents. Installation Instructions for PSI4; I. Compilation Prerequisites; II. Brief Summary of Configuration, Compilation, and Installation; III. Detailed Installation Instructions; IV. Recommendations for BLAS and LAPACK libraries; V. Miscellaneous Architecture-Specific Notes; VI. Common Problems with PSI Compilation. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    ; PSI4 [beta4] » . © Copyright 2013, The Psi4 Project.; Last updated on Apr 25, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/installfile.html:26349,upgrade,upgrade,26349,psi4manual/4.0b4/installfile.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/installfile.html,2,"['update', 'upgrade']","['updated', 'upgrade']"
Deployability,"s: We had trouble with icpc 12.0.x. Use 12.1 or; later. VI. Common Problems with PSI Compilation¶. No rule to make target foo.h, needed by bar.d. Stop.; This commonly happens after pulling updates from the repository. It happens; when a library header file is removed or renamed by the update, but there are; still old dependency files in the object directory, which think that they; still need to know about that header. There’s a simple remedy, just run; >>> make DODEPEND=no dclean. in the object directory. Make gets stuck in an infinite loop; This means that the makefiles have not been properly updated. Running; >>> autoconf. in the top-level Psi directory, followed by; >>> ./config.status --recheck; >>> ./config.status. in the object directory should fix it. This procedure will need to be run; whenever an update changes the directory structure. Incompatible g++/icpc; The Intel compilers require an installed set of C++ headers. Unfortunately,; the GNU compilers tend to be more cutting-edge than the Intel compilers,; meaning that Intel is always playing catch-up to new features in g++. This; means the two are often incompatible, leading to trouble if one wants to use; icpc to compile PSI4 (or anything else...). Your best bet in general is to not; upgrade Linux too fast, and always keep the very latest Intel compilers; around. Missing symbols like “do_fio” or “e_wsfe”; See Section IV(3) above. Table Of Contents. Installation Instructions for PSI4; I. Compilation Prerequisites; II. Brief Summary of Configuration, Compilation, and Installation; III. Detailed Installation Instructions; IV. Recommendations for BLAS and LAPACK libraries; V. Miscellaneous Architecture-Specific Notes; VI. Common Problems with PSI Compilation. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    ; PSI4 [beta5] » . © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/installfile.html:27138,upgrade,upgrade,27138,psi4manual/4.0b5/installfile.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/installfile.html,2,"['update', 'upgrade']","['updated', 'upgrade']"
Deployability,"s; -DAddon_DIR=/path/to/config/usually/ending/in/share/cmake/AddON; and build PSI4. The main core.so should be dynamically linked; to your dev AddOn dynamic lib and update automatically when you rebuild; the AddOn lib. Naturally, you may need to delete core.so and remake; as needed. table of contents. Compiling and Installing from Source; Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies; How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda; How to see what build configuration options are available; How to install elsewhere than /usr/local/psi4; How to compile for debugging; How to fix error “RuntimeError: value for ERI”; How to choose the compilation directory, {objdir}; How to save configuration settings for a future compilation; What is the directory layout of the installed or staged Psi4; How to run Psi4 as executable after compilation; How to solve ModuleNotFoundError: No module named 'psi4'; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/build_planning-1.html:55013,install,install,55013,psi4manual/1.3.2/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/build_planning-1.html,14,"['configurat', 'install']","['configuration', 'install', 'installation', 'installed']"
Deployability,"s; Interface to gCP by S. Grimme. Interface to gCP by S. Grimme¶; Code author: Lori A. Burns; Section author: Lori A. Burns; Module: Samples. Installation¶; Binary. There are two implementations of gCP; see Empirical dispersion correction packages . The newer; “mctc” one is preferred, while the older “classic” one will work for the immediate future.; PSI4 will automatically select whichever is available.; Starting with v1.9, only “mctc-gcp” is supported, though the now untested; “classic” continues to work for many applications.; gCP is available as a conda package for Linux and macOS and Windows.; If using the Psi4conda installer, gCP has already been installed alongside.; If using the PSI4 conda package, the classic gcp conda package can; be obtained through conda install gcp -c psi4 or the newer implementation; through conda install gcp-correction -c conda-forge.; If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; the gcp executable can be obtained through conda install gcp -c psi4; or conda install gcp-correction -c conda-forge.; To remove a conda installation, conda remove gcp or conda remove gcp-correction. Source. If using PSI4 built from source and you want to build gCP from; from source also, follow the instructions provided with the source; (essentially, download the freely available tarball, unpack the source,; edit the Makefile to select a Fortran compiler, and run make). To be used by PSI4, the program binary (gcp or mctc-gcp) must be; found in your PATH so that QCEngine can detect it. Check if and where; found through qcengine info. If; PSI4 is unable to execute the binary, an error will be reported.; To preferentially use a particular gcp compilation, simply adjust its; position in the path environment variables. Running gCP¶; At present there is a limited interface to gCP that is used; only to implement the “HF-3c” [Sure:2013:1672], “PBEh-3c”; [Grimme:2015:054107], “B97-3c” [Br",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/gcp.html:1099,install,installed,1099,psi4manual/1.9.x/gcp.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/gcp.html,6,['install'],"['install', 'installed']"
Deployability,"s>, --nthread <threads>¶; Number of threads to use (overrides OMP_NUM_THREADS).; Also controls the testing parallelism with pytest. -o <filename>, --output <filename>¶; Output file name. Use stdout as <filename> to redirect; to the screen. Default: when the input filename is “input.dat”,; then the output filename defaults to “output.dat”. Otherwise, the; output filename defaults to the the input filename with; “.out” extension. --psiapi-path¶; Generates a bash command to source correct Python interpreter and path for python -c ""import psi4"". --qcschema, --schema¶; Runs input files as QCSchema. Can either be JSON or MessagePack input. -s <name>, --scratch <name>¶; This overrides the value of PSI_SCRATCH and provides; a path to the location of scratch files. -t <subset>, --test <subset>¶; Runs pytest tests. If pytest-xdist installed, parallel with -n. -v, --verbose¶; Print the Psithon to Python translation of the input file. -V, --version¶; Print version information.; # stable release; >>> psi4 --version; 1.3.2. # development snapshot between 1.3 and 1.4; >>> psi4 --version; 1.4a2.dev525. Environment Variables¶; These environment variables will influence PSI4‘s behavior. CONDA_PREFIX¶; Set when a conda environment is activated. Note that if PSI4 has been; built against any library in CONDA_PREFIX, the path has been baked into the; program, so any available dependencies are liable to been loaded from the environment. HOST¶; Set when a conda environment with conda compilers is activated. Used; when compatibly building PSI4 from source against conda; dependencies. MKL_NUM_THREADS¶; Number of threads to use by operations with Intel threaded BLAS libraries. OMP_NESTED¶; Do access nested DGEMM in OpenMP sections in DFMP2 for multi-socket; platforms. This is very low-level access to OpenMP functions for; experienced programmers. Users should leave this variable unset or set; to False. OMP_NUM_THREADS¶; Number of threads to use by modules with OpenMP threading. PATH¶; Path fo",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/external.html:20165,release,release,20165,psi4manual/1.6.x/external.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/external.html,5,['release'],['release']
Deployability,"sP4regime = True; except ImportError:; from .exceptions import *; isP4regime = False; from .util import parse_dertype; from .molecule import Molecule. [docs]def run_gcp(self, func=None, dertype=None, verbose=False): # dashlvl=None, dashparam=None; """"""Function to call Grimme's GCP program; https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp/gcp; to compute an a posteriori geometrical BSSE correction to *self* for; several HF, generic DFT, and specific HF-3c and PBEh-3c method/basis; combinations, *func*. Returns energy if *dertype* is 0, gradient; if *dertype* is 1, else tuple of energy and gradient if *dertype*; unspecified. The gcp executable must be independently compiled and; found in :envvar:`PATH` or :envvar:`PSIPATH`. *self* may be either a; qcdb.Molecule (sensibly) or a psi4.Molecule (works b/c psi4.Molecule; has been extended by this method py-side and only public interface; fns used) or a string that can be instantiated into a qcdb.Molecule. """"""; # Create (if necessary) and update qcdb.Molecule; if isinstance(self, Molecule):; # called on a qcdb.Molecule; pass; elif isinstance(self, core.Molecule):; # called on a python export of a psi4.core.Molecule (py-side through Psi4's driver); self.create_psi4_string_from_molecule(); elif isinstance(self, str):; # called on a string representation of a psi4.Molecule (c-side through psi4.Dispersion); self = Molecule(self); else:; raise ValidationError(""""""Argument mol must be psi4string or qcdb.Molecule""""""); self.update_geometry(). # # Validate arguments; # dashlvl = dashlvl.lower(); # dashlvl = dash_alias['-' + dashlvl][1:] if ('-' + dashlvl) in dash_alias.keys() else dashlvl; # if dashlvl not in dashcoeff.keys():; # raise ValidationError(""""""-D correction level %s is not available. Choose among %s."""""" % (dashlvl, dashcoeff.keys())). if dertype is None:; derint, derdriver = -1, 'gradient'; else:; derint, derdriver = parse_dertype(dertype, max_derivative=1). # if func is None:; # if dashparam is None:; # # d",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/_modules/qcdb/interface_gcp.html:2309,update,update,2309,psi4manual/1.3.2/_modules/qcdb/interface_gcp.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/_modules/qcdb/interface_gcp.html,1,['update'],['update']
Deployability,"s\n z = %s\n\n' % (self.type(), self.x.variable_to_string(8), self.y.variable_to_string(8), self.z.variable_to_string(8))). [docs]class ZMatrixEntry(CoordEntry):; """"""Class to hold all information about an atom, including its; coordinate specification as any position of ZMatrix. """""". def __init__(self, entry_number, Z, charge, mass, symbol, label, \; rto=None, rval=0, ato=None, aval=0, dto=None, dval=0, basis=None, shells=None):; """"""Constructor"""""" # note that pos'n of basis arg changed from libmints; CoordEntry.__init__(self, entry_number, Z, charge, mass, symbol, label, basis, shells); self.rto = rto; self.rval = rval; self.ato = ato; self.aval = aval; self.dto = dto; self.dval = dval. [docs] def invalidate(self):; """"""Flags the current coordinates as being outdated""""""; self.computed = False; if self.rval != 0:; self.rval.invalidate(); if self.aval != 0:; self.aval.invalidate(); if self.dval != 0:; self.dval.invalidate(). [docs] def print_in_input_format(self):; """"""Prints the updated geometry, in the format provided by the user""""""; text = """"; if self.rto == None and self.ato == None and self.dto == None:; # The first atom; text += ""\n""; elif self.ato == None and self.dto == None:; # The second atom; now_rto = self.rto.entry_number() + 1; now_rval = self.rval.variable_to_string(10); text += "" %5d %11s\n"" % (now_rto, now_rval); elif self.dto == None:; # The third atom; now_rto = self.rto.entry_number() + 1; now_rval = self.rval.variable_to_string(10); now_ato = self.ato.entry_number() + 1; now_aval = self.aval.variable_to_string(10); text += "" %5d %11s %5d %11s\n"" % (now_rto, now_rval, now_ato, now_aval); else:; # Remaining atoms; now_rto = self.rto.entry_number() + 1; now_rval = self.rval.variable_to_string(10); now_ato = self.ato.entry_number() + 1; now_aval = self.aval.variable_to_string(10); now_dto = self.dto.entry_number() + 1; now_dval = self.dval.variable_to_string(10); text += "" %5d %11s %5d %11s %5d %11s\n"" % \; (now_rto, now_rval, now_ato, now_aval, now_dto,",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/libmintscoordentry.html:14658,update,updated,14658,psi4manual/1.0.0/_modules/qcdb/libmintscoordentry.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/libmintscoordentry.html,1,['update'],['updated']
Deployability,"s\n'); fh.write('// ***********************************************\n'); fh.write('#macro check_shadow()\n'); fh.write(' #if (!Shadows)\n'); fh.write(' no_shadow \n'); fh.write(' #end\n'); fh.write('#end\n'); fh.write('\n'); fh.write('#macro translucentFinish(T)\n'); fh.write(' #local shineFactor = T;\n'); fh.write(' #if (T <= 0.25)\n'); fh.write(' #declare shineFactor = (1.0-4*T);\n'); fh.write(' #end\n'); fh.write(' #if (T > 0.25)\n'); fh.write(' #declare shineFactor = 0;\n'); fh.write(' #end\n'); fh.write(' finish {\n'); fh.write(' ambient 0.45\n'); fh.write(' diffuse 0.84\n'); fh.write(' specular 0.22\n'); fh.write(' roughness .00001\n'); fh.write(' metallic shineFactor\n'); fh.write(' phong 0.9*shineFactor\n'); fh.write(' phong_size 120*shineFactor\n'); fh.write('}#end\n'); fh.write('\n'); fh.write('#macro a(X,Y,Z,RADIUS,R,G,B,T)\n'); fh.write(' sphere{<X,Y,Z>,RADIUS\n'); fh.write(' pigment{rgbt<R,G,B,T>}\n'); fh.write(' translucentFinish(T)\n'); fh.write(' check_shadow()}\n'); fh.write('#end\n'); fh.write('\n'); fh.write('#macro b(X1,Y1,Z1,RADIUS1,X2,Y2,Z2,RADIUS2,R,G,B,T)\n'); fh.write(' cone{<X1,Y1,Z1>,RADIUS1,<X2,Y2,Z2>,RADIUS2\n'); fh.write(' pigment{rgbt<R,G,B,T>}\n'); fh.write(' translucentFinish(T)\n'); fh.write(' check_shadow()}\n'); fh.write('#end \n'). for bond in self.bonds:; fh.write('b(%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s)\n' %; (str(bond[0]),str(bond[1]),str(bond[2]),str(bond[3]),; str(bond[4]),str(bond[5]),str(bond[6]),str(bond[7]),; str(bond[8]),str(bond[9]),str(bond[10]),str(bond[11]))); for atom in self.atoms:; fh.write('a(%s,%s,%s,%s,%s,%s,%s,%s)\n' %; (str(atom[1]),str(atom[2]),str(atom[3]),str(atom[4]),; str(atom[5]),str(atom[6]),str(atom[7]),str(atom[8]))). fh.close(); # yapf: enable. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .  · ; 1.7;  · . PSI4. Module code; psi4.driver.p4util.inpsight. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/p4util/inpsight.html:20198,update,updated,20198,psi4manual/1.7.x/_modules/psi4/driver/p4util/inpsight.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/p4util/inpsight.html,1,['update'],['updated']
Deployability,"s]. fno-lccd; LCCD with frozen natural orbitals [manual]. olccd; orbital optimized LCCD [manual] [details]. cc2; approximate coupled cluster singles and doubles (CC2) [manual] [details]. ccd; coupled cluster doubles (CCD) [manual] [details]. ccsd; coupled cluster singles and doubles (CCSD) [manual] [details]. bccd; Brueckner coupled cluster doubles (BCCD) [manual] [details]. fno-ccsd; CCSD with frozen natural orbitals [manual]. qcisd(t); QCISD with perturbative triples [manual] [details]. fno-qcisd(t); QCISD(T) with frozen natural orbitals [manual]. ccsd(t); CCSD with perturbative triples (CCSD(T)) [manual] [details]. a-ccsd(t); CCSD with asymmetric perturbative triples (A-CCSD(T)) [manual] [details]. bccd(t); BCCD with perturbative triples [manual] [details]. fno-ccsd(t); CCSD(T) with frozen natural orbitals [manual]. cc3; approximate CC singles, doubles, and triples (CC3) [manual] [details]. ccenergy; expert full control over ccenergy module. cisd; configuration interaction (CI) singles and doubles (CISD) [manual] [details]. fno-cisd; CISD with frozen natural orbitals [manual]. cisdt; CI singles, doubles, and triples (CISDT) [manual]. cisdtq; CI singles, doubles, triples, and quadruples (CISDTQ) [manual]. cin; nth-order CI [manual] [details]. fci; full configuration interaction (FCI) [manual] [details]. detci; expert full control over detci module. gaussian-2, g2; Gaussian-2 composite method [manual]. casscf; complete active space self consistent field (CASSCF) [manual]. rasscf; restricted active space self consistent field (RASSCF) [manual]. mcscf; multiconfigurational self consistent field (SCF) [manual]. psimrcc; Mukherjee multireference coupled cluster (Mk-MRCC) [manual]. psimrcc_scf; Mk-MRCC with regular SCF module (convenience function) [manual]. dmrg-scf; (with CheMPS2) density matrix renormalization group SCF [manual]. dmrg-caspt2; (with CheMPS2) density matrix renormalization group CASPT2 [manual]. dmrg-ci; (with CheMPS2) density matrix renormalization gr",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.energy.html:5357,configurat,configuration,5357,psi4manual/1.7.x/api/psi4.driver.energy.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.energy.html,8,['configurat'],['configuration']
Deployability,"s_elst == 'NONE')):; commands += """"""PsiMod.set_global_option('DF_BASIS_ELST', '%s')\n"""""" % (user_df_basis_elst); commands += """"""molecule = PsiMod.get_active_molecule()\n""""""; commands += """"""molecule.update_geometry()\n"""""". if symmetry_override:; commands += """"""molecule.reset_point_group('c1')\n""""""; commands += """"""molecule.fix_orientation(1)\n""""""; commands += """"""molecule.update_geometry()\n"""""". if (openshell_override) and (molecule.multiplicity() != 1):; if user_reference == 'RHF':; commands += """"""PsiMod.set_global_option('REFERENCE', 'UHF')\n""""""; elif user_reference == 'RKS':; commands += """"""PsiMod.set_global_option('REFERENCE', 'UKS')\n"""""". commands += """"""PsiMod.set_global_option('WRITER_FILE_LABEL', '%s')\n"""""" % \; (user_writer_file_label + ('' if user_writer_file_label == '' else '-') + rgt). # all modes need to step through the reagents but all for different purposes; # continuous: defines necessary commands, executes energy(method) call, and collects results into dictionary; # sow: opens individual reagent input file, writes the necessary commands, and writes energy(method) call; # reap: opens individual reagent output file, collects results into a dictionary; if (db_mode.lower() == 'continuous'):; exec(banners); exec(format_molecule_for_input(GEOS[rgt])); exec(commands); #print 'MOLECULE LIVES %23s %8s %4d %4d %4s' % (rgt, PsiMod.get_global_option('REFERENCE'),; # molecule.molecular_charge(), molecule.multiplicity(), molecule.schoenflies_symbol()); PsiMod.set_variable('NATOM', molecule.natom()); PsiMod.set_variable('NUCLEAR REPULSION ENERGY', molecule.nuclear_repulsion_energy()); if re.match(r'^verify', lowername):; compare_values(DATA['NUCLEAR REPULSION ENERGY'][rgt], PsiMod.get_variable('NUCLEAR REPULSION ENERGY'), ; 4, '%s %.4f' % (rgt, PsiMod.get_variable('NUCLEAR REPULSION ENERGY'))); ERGT[rgt] = 7.0; else:; ERGT[rgt] = call_function_in_1st_argument(func, **kwargs); #print ERGT[rgt]; PsiMod.print_variables(); exec(actives); for envv in db_tabulate:; VRGT[r",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:42826,continuous,continuous,42826,psi4manual/4.0b4/_modules/wrappers.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html,1,['continuous'],['continuous']
Deployability,"s_elst); commands += """"""molecule = PsiMod.get_active_molecule()\n""""""; commands += """"""molecule.update_geometry()\n"""""". if symmetry_override:; commands += """"""molecule.reset_point_group('c1')\n""""""; commands += """"""molecule.fix_orientation(1)\n""""""; commands += """"""molecule.update_geometry()\n"""""". if (openshell_override) and (molecule.multiplicity() != 1):; if user_reference == 'RHF':; commands += """"""PsiMod.set_global_option('REFERENCE', 'UHF')\n""""""; elif user_reference == 'RKS':; commands += """"""PsiMod.set_global_option('REFERENCE', 'UKS')\n"""""". # all modes need to step through the reagents but all for different purposes; # continuous: defines necessary commands, executes energy(method) call, and collects results into dictionary; # sow: opens individual reagent input file, writes the necessary commands, and writes energy(method) call; # reap: opens individual reagent output file, collects results into a dictionary; if (db_mode.lower() == 'continuous'):; exec banners; exec GEOS[rgt]; exec commands; #print 'MOLECULE LIVES %23s %8s %4d %4d %4s' % (rgt, PsiMod.get_option('REFERENCE'),; # molecule.molecular_charge(), molecule.multiplicity(), molecule.schoenflies_symbol()); PsiMod.set_variable('NATOM', molecule.natom()); ERGT[rgt] = call_function_in_1st_argument(func, **kwargs); #print ERGT[rgt]; PsiMod.print_variables(); exec actives; for envv in db_tabulate:; VRGT[rgt][envv] = PsiMod.get_variable(envv); PsiMod.set_global_option(""REFERENCE"", user_reference); PsiMod.clean(). elif (db_mode.lower() == 'sow'):; freagent = open('%s.in' % (rgt), 'w'); freagent.write('# This is a psi4 input file auto-generated from the database() wrapper.\n\n'); freagent.write(banners); freagent.write(GEOS[rgt]); freagent.write(commands); freagent.write('''\npickle_kw = (""""""'''); pickle.dump(kwargs, freagent); freagent.write('''"""""")\n'''); freagent.write(""""""\nkwargs = pickle.loads(pickle_kw)\n""""""); freagent.write(""""""electronic_energy = %s(**kwargs)\n\n"""""" % (func.__name__)); freagent.write(""""""PsiMod.p",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/_modules/wrappers.html:42574,continuous,continuous,42574,psi4manual/4.0b2/_modules/wrappers.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/_modules/wrappers.html,1,['continuous'],['continuous']
Deployability,"same results as output; files but more as structured data than narrative, nicely formatted data.; In some cases where external calls are involved, the most detailed; information may only be collectable in the log file. It is; worthwhile to check the log file if expected results are missing from; the usual output file. If the log file is empty, the logging level may; be set too low.; To change the logging level to DEBUG from the command-line:; >>> psi4 --logging 10. To change the logging level to DEBUG in PsiAPI:; >>> psi4.set_output_file(<filebase>, loglevel=10). How to find the Psi4 module from the executable and vice versa¶; Because of the different conventions of C++/Linux and Python installation; layouts, the PSI4 executable and the PSI4 Python module aren’t; at fixed locations relative to each other. Accessors have been added; so that the executable can show where the module is, and the module; can show where the executable is. > /path/to/psi4/install/bin/psi4 --module; /path/to/psi4/install/lib//; > python -c ""import psi4;print(psi4.executable)""; /path/to/psi4/install/bin/psi4. table of contents. Compiling and Installing from Source; Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies; How to use conda to get a Psi4 development environment; How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda; How to see what build configuration options are available; How to install elsewhere than /usr/local/psi4; How to compile for debugging; How to choose the compilation directory, {objdir}; How to save configuration settings for a future compilation; What is the directory layout of the installed or staged Psi4; How to run Psi4 as executable after compilation; How to solv",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/build_planning.html:61017,install,install,61017,psi4manual/1.6.x/build_planning.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/build_planning.html,10,['install'],['install']
Deployability,"same.; Reference value against which computed is compared.; computed – int, bool, str or array-like of same.; Input value to compare against expected.; label – Label for passed and error messages. Defaults to calling function name.; equal_phase – Compare computed or its opposite as equal.; quiet – Whether to log the return message.; return_message – Whether to return tuple. See below.; return_handler – Function to control printing, logging, raising, and returning.; Specialized interception for interfacing testing systems. Returns:. allclose (bool) – Returns True if expected and computed are equal; False otherwise.; message (str) – When return_message=True, also return passed or error message. Return type:; bool | Tuple[bool, str]. Notes. Akin to numpy.array_equal().; For scalar exactly-comparable types and for arbitrary-dimension, np.ndarray-castable, uniform-type,; exactly-comparable types. For mixed types, use compare_recursive(). psi4.compare_recursive(expected, computed, *args, **kwargs)¶; Comparison function for recursively comparing mixed-type and nested structures such as dictionaries and lists.; See qcelemental.testing.compare_recursive() for details. table of contents. Test Suite; CTest and pytest, PSIthon and PsiAPI; Test Contents; Adding PSIthon Test Cases; CMakeLists.txt; input.dat; output.ref; test_input.py; Running for Debugging. Adding PsiAPI Test Cases; Running for Debugging. Comparison Functions; Plain Old Data; compare_values(); compare_integers(). Objects; compare_matrices(); compare_vectors(); compare_wavefunctions(); compare_molrecs(). File Formats; compare_cubes(); compare_fchkfiles(); compare_fcidumps(); compare_moldenfiles(); compare_vibinfos(). Extra QCA Functions; compare(); compare_recursive(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Test Suite. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/add_tests.html:30908,update,updated,30908,psi4manual/master/add_tests.html,https://psicode.org,https://psicode.org/psi4manual/master/add_tests.html,1,['update'],['updated']
Deployability,"save configuration settings for a future compilation; What is the directory layout of the installed or staged Psi4; How to run Psi4 as executable after compilation; How to solve ModuleNotFoundError: No module named 'psi4'; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4; How to configure Python for building Psi4; What Python is Psi4 running; How to fix “undefined symbol: _Py_FalseStruct”; How to use gdb and lldb with Psi4; How to see the actual compiling commands (or errors) with cmake; How to highlight git merge conflicts in vi; How to handle “runtime library may be hidden” when building with Anaconda Python; How to set up the scratch directory; How do I retain specific Psi4 scratch files; How to use Psi4 within a PBS queue; How to update and rebuild Psi4; How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation; How to refer to Psi4; How to get a Psi4 logo file; How to use a local Add-On repository in the Psi4 build. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Installation and Runtime Configuration. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/build_planning-1.html:57078,update,update,57078,psi4manual/1.3.2/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/build_planning-1.html,6,"['install', 'update']","['installation', 'update', 'updated']"
Deployability,"scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. mom-h2o-4; MOM excitation from LUMO HOMO+4. scf-freq1; Analytic vs. finite difference DF-SCF frequency test for water. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. mp2-1; All-electron MP2 6-31G** geometry optimization of water. scf-guess; Test initial SCF guesses on FH and FH+ in cc-pVTZ basis. dfccd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. cc11; Frozen-core CCSD(ROHF)/cc-pVDZ on CN radical with disk-based AO algorithm. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. cc49; EOM-CC3(UHF) on CH radical with user-specified basis and properties for particular root. dfomp2p5-grad2; DF-OMP2.5 cc-pVDZ gradients for the H2O+ cation. mp3-grad2; MP3 cc-pVDZ gradient for the NO radical. dct9; UHF-ODC-12 and RHF-ODC-12 single-point energy for H2O. This performs a simultaneous update of orbitals and cumulants, using DIIS extrapolation. Four-virtual integrals are handled in the AO basis, where integral transformation is avoided. In the next RHF-ODC-12 computation, AO_BASIS=NONE is used, where four-virtual integrals are transformed into MO basis. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. freq-masses; check nonphysical masses possible. dft3; DFT integral algorithms test, performing w-B97 RKS and UKS computations on water and its cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. cbs-xtpl-freq; Various gradients for a strained helium dimer and water molecule. scf6; Tests RHF/ROHF/UHF SCF gradients. opt13; B3LYP cc-pVDZ geometry optimzation of phenylacetylene, starting from not quite linear structure updated reference due to new BraggSlater radii. scf1; RHF cc-pVQZ energy fo",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/autodoc_testsuite_corepsi4.html:5469,update,update,5469,psi4manual/1.6.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/autodoc_testsuite_corepsi4.html,2,['update'],['update']
Deployability,"scellaneous. Obtaining PSI4; How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}; Find-the-code Quiz; Binary Installer; Conda Binary Package; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; What is the suggested GitHub workflow. Compiling and Installing from Source; Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies; How to use conda to get a Psi4 development environment; How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda; How to see what build configuration options are available; How to install elsewhere than /usr/local/psi4; How to compile for debugging; How to choose the compilation directory, {objdir}; How to save configuration settings for a future compilation; What is the directory layout of the installed or staged Psi4; How to run Psi4 as executable after compilation; How to solve ModuleNotFoundError: No module named 'psi4'; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/external-1.html:867,install,install,867,psi4manual/1.4.0/external-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/external-1.html,63,"['configurat', 'install']","['configuration', 'install', 'installation', 'installed']"
Deployability,"scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; energy(). molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. mode (string) – \(\Rightarrow\) 'continuous' \(\Leftarrow\) || 'sow' || 'reap'; For a finite difference of energies optimization, indicates whether; the calculations required to complete the; optimization are to be run in one file ('continuous') or are to be; farmed out in an embarrassingly parallel fashion; ('sow'/'reap'). For the latter, run an initial job with; 'sow' and follow instructions in its output file. For maximum; flexibility, return_wfn is always on in 'reap' mode. dertype (dertype) – 'gradient' || 'energy'; Indicates whether analytic (if available) or finite difference; optimization is to be performed. hessian_with (string) – 'scf' || 'mp2' || etc.; Indicates the computational method with which to perform a hessian; analysis to guide the geometry optimization. Warning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the geometry being converted to a Cartesian representation. Note; Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. name; calls method. efp; efp-only optimizations.",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/opt-1.html:2032,continuous,continuous,2032,psi4manual/1.1.0/opt-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/opt-1.html,8,['continuous'],['continuous']
Deployability,"scratch files; How to use Psi4 within a PBS queue; How to update and rebuild Psi4; How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation; How to refer to Psi4; How to get a Psi4 logo file; How to use a local Add-On repository in the Psi4 build; How to use logging in Psi4; How to find the Psi4 module from the executable and vice versa. Installing from Binary; How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; Quick Installation; Detailed Installation of Miniconda; Detailed Installation of PSI4; Useful Commands. Scratch Files¶; One very important part of user configuration at the end of the; installation process; is to tell PSI4 where to write its temporary; (“scratch”) files. Electronic structure packages like PSI4 can; create rather large temporary disk files. It is very important to; ensure that PSI4 is writing its temporary files to a disk drive; physically attached to the computer running the computation. If it; is not, it will significantly slow down the program and the network.; By default, PSI4 will write temporary files to /tmp, but this; directory is often not large enough for typical computations. Therefore,; you need to (a) make sure there is a sufficiently large directory on a; locally attached disk drive (100GB–1TB or more, depending on the size of; the molecules to be studied) and (b) tell PSI4 the path to this; directory. Scratch file location can be specified through the; PSI_SCRATCH environment variable or through the ~/.psi4rc file; (see section ~/.psi4rc File). Most of the time, PSI_SCRATCH; is preferred, and it overrides any existing ~/.psi4rc setting. Y",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/external.html:3847,configurat,configuration,3847,psi4manual/1.6.x/external.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/external.html,10,"['configurat', 'install']","['configuration', 'installation']"
Deployability,se %s not suitable for non-supramolecular calculation.' % (db_name)); else:; ACTV = database.ACTV_SA; # Force open-shell if needed; openshell_override = 0; if (user_reference == 'RHF') or (user_reference == 'RKS'):; try:; database.isOS; except AttributeError:; pass; else:; if yes.match(str(database.isOS)):; openshell_override = 1; psi4.print_out('\nSome reagents in database %s require an open-shell reference; will be reset to UHF/UKS as needed.\n' % (db_name)). # Configuration based upon database keyword options; # Option symmetry- whether symmetry treated normally or turned off (currently req'd for dfmp2 & dft); db_symm = 'yes'; if 'symm' in kwargs:; db_symm = kwargs['symm']. symmetry_override = 0; if no.match(str(db_symm)):; symmetry_override = 1; elif yes.match(str(db_symm)):; pass; else:; raise ValidationError('Symmetry mode \'%s\' not valid.' % (db_symm)). # Option mode of operation- whether db run in one job or files farmed out; if not('db_mode' in kwargs):; if ('mode' in kwargs):; kwargs['db_mode'] = kwargs['mode']; del kwargs['mode']; else:; kwargs['db_mode'] = 'continuous'; db_mode = kwargs['db_mode']. if (db_mode.lower() == 'continuous'):; pass; elif (db_mode.lower() == 'sow'):; pass; elif (db_mode.lower() == 'reap'):; if 'linkage' in kwargs:; db_linkage = kwargs['linkage']; else:; raise ValidationError('Database execution mode \'reap\' requires a linkage option.'); else:; raise ValidationError('Database execution mode \'%s\' not valid.' % (db_mode)). # Option counterpoise- whether for interaction energy databases run in bsse-corrected or not; db_cp = 'no'; if 'cp' in kwargs:; db_cp = kwargs['cp']. if yes.match(str(db_cp)):; try:; database.ACTV_CP; except AttributeError:; raise ValidationError('Counterpoise correction mode \'yes\' invalid for database %s.' % (db_name)); else:; ACTV = database.ACTV_CP; elif no.match(str(db_cp)):; pass; else:; raise ValidationError('Counterpoise correction mode \'%s\' not valid.' % (db_cp)). # Option relaxed- whether for non-,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/_modules/wrappers.html:33274,continuous,continuous,33274,psi4manual/4.0b5/_modules/wrappers.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/_modules/wrappers.html,1,['continuous'],['continuous']
Deployability,"se (bool, optional) – Converts irreped Psi4 objects to diagonally blocked dense arrays if True. Returns a list of arrays otherwise. Returns:array – Returns either a list of np.array’s or the base array depending on options. Return type:ndarray or list of ndarray. Notes; This is a generalized function to convert a Psi4 object to a NumPy array; Examples; 1; 2; 3; 4; 5>>> data = psi4.Matrix(3, 3); >>> data.to_array(); [[ 0. 0. 0.]; [ 0. 0. 0.]; [ 0. 0. 0.]]. to_serial(); Converts an object with a .nph accessor to a serialized dictionary. trace(self: psi4.core.Matrix) → float; Returns the trace of the matrix. transform(*args, **kwargs); Overloaded function. transform(self: psi4.core.Matrix, transformer: psi4.core.Matrix) -> None. Transform this matrix with transformer. transform(self: psi4.core.Matrix, a: psi4.core.Matrix, transformer: psi4.core.Matrix) -> None. Transform A with transformer. transpose(self: psi4.core.Matrix) → psi4.core.Matrix; Creates a new matrix that is the transpose of this matrix. transpose_this(self: psi4.core.Matrix) → None; Transpose the matrix in-place. triplet(A: psi4.core.Matrix, B: psi4.core.Matrix, C: psi4.core.Matrix, transA: bool=False, transB: bool=False, transC: bool=False) → psi4.core.Matrix; Returns the multiplication of three matrics A, B, and C, with options to transpose each beforehand. vector_dot(self: psi4.core.Matrix, rhs: psi4.core.Matrix) → float; Returns the vector dot product of this with rhs. zero(self: psi4.core.Matrix) → None; Zero all elements of the matrix. zero_diagonal(self: psi4.core.Matrix) → None; Zero the diagonal of the matrix. zero_lower(self: psi4.core.Matrix) → None; Zero the lower triangle. zero_upper(self: psi4.core.Matrix) → None; Zero the upper triangle. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 July 2018 04:21AM.; Created using Sphinx 1.7.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/api/psi4.core.matrix.html:27670,update,updated,27670,psi4manual/1.2.1/api/psi4.core.matrix.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/api/psi4.core.matrix.html,1,['update'],['updated']
Deployability,"se = np.random.normal(0, 1, 9).reshape(3, 3); noise = np.divide(noise, np.max(noise)). assert(_get_TR_space(m4, g4).shape == (6, 12)); assert(_get_TR_space(m2, g2).shape == (5, 6)); assert(_get_TR_space(m3, g3).shape == (5, 9)); assert(_get_TR_space(m3, g33).shape == (5, 9)); assert(_get_TR_space(m1, g1).shape == (3, 3)); assert(_get_TR_space(m1, g11).shape == (3, 3)); assert(_get_TR_space(m3, g3noisy, tol=1.e-2).shape == (5, 9)); for ns in range(2, 6):; tol = 10. ** -ns; gnoisy = g3 + tol * noise; assert(_get_TR_space(m3, gnoisy, tol=10*tol).shape == (5, 9)). """"""; sqrtmmm = np.repeat(np.sqrt(m), 3); xxx = np.repeat(geom[:, 0], 3); yyy = np.repeat(geom[:, 1], 3); zzz = np.repeat(geom[:, 2], 3). z = np.zeros_like(m); i = np.ones_like(m); ux = np.ravel([i, z, z], order='F'); uy = np.ravel([z, i, z], order='F'); uz = np.ravel([z, z, i], order='F'). # form translation and rotation unit vectors; T1 = sqrtmmm * ux; T2 = sqrtmmm * uy; T3 = sqrtmmm * uz; R4 = sqrtmmm * (yyy * uz - zzz * uy); R5 = sqrtmmm * (zzz * ux - xxx * uz); R6 = sqrtmmm * (xxx * uy - yyy * ux). TRspace = []; if 'T' in space:; TRspace.append([T1, T2, T3]); if 'R' in space:; TRspace.append([R4, R5, R6]); if not TRspace:; # not sure about this, but it runs; ZZ = np.zeros_like(T1); TRspace.append([ZZ]). TRspace = np.vstack(TRspace). def orth(A, tol=tol):; u, s, vh = np.linalg.svd(A, full_matrices=False); if verbose >= 2:; print(s); M, N = A.shape; eps = np.finfo(float).eps; if tol is None:; tol = max(M, N) * np.amax(s) * eps; num = np.sum(s > tol, dtype=int); Q = u[:, :num]; return Q. TRindep = orth(TRspace.T); TRindep = TRindep.T. if verbose >= 2:; print(TRindep.shape, '<--', TRspace.shape); print(np.linalg.norm(TRindep, axis=1)); print('-' * 80). return TRindep. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .  · ; 1.4;  · . PSI4. Module code; psi4.driver.qcdb.vib. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/qcdb/vib.html:42778,update,updated,42778,psi4manual/1.4.0/_modules/psi4/driver/qcdb/vib.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/qcdb/vib.html,1,['update'],['updated']
Deployability,"se = np.random.normal(0, 1, 9).reshape(3, 3); noise = np.divide(noise, np.max(noise)). assert(_get_TR_space(m4, g4).shape == (6, 12)); assert(_get_TR_space(m2, g2).shape == (5, 6)); assert(_get_TR_space(m3, g3).shape == (5, 9)); assert(_get_TR_space(m3, g33).shape == (5, 9)); assert(_get_TR_space(m1, g1).shape == (3, 3)); assert(_get_TR_space(m1, g11).shape == (3, 3)); assert(_get_TR_space(m3, g3noisy, tol=1.e-2).shape == (5, 9)); for ns in range(2, 6):; tol = 10. ** -ns; gnoisy = g3 + tol * noise; assert(_get_TR_space(m3, gnoisy, tol=10*tol).shape == (5, 9)). """"""; sqrtmmm = np.repeat(np.sqrt(m), 3); xxx = np.repeat(geom[:, 0], 3); yyy = np.repeat(geom[:, 1], 3); zzz = np.repeat(geom[:, 2], 3). z = np.zeros_like(m); i = np.ones_like(m); ux = np.ravel([i, z, z], order='F'); uy = np.ravel([z, i, z], order='F'); uz = np.ravel([z, z, i], order='F'). # form translation and rotation unit vectors; T1 = sqrtmmm * ux; T2 = sqrtmmm * uy; T3 = sqrtmmm * uz; R4 = sqrtmmm * (yyy * uz - zzz * uy); R5 = sqrtmmm * (zzz * ux - xxx * uz); R6 = sqrtmmm * (xxx * uy - yyy * ux). TRspace = []; if 'T' in space:; TRspace.append([T1, T2, T3]); if 'R' in space:; TRspace.append([R4, R5, R6]); if not TRspace:; # not sure about this, but it runs; ZZ = np.zeros_like(T1); TRspace.append([ZZ]). TRspace = np.vstack(TRspace). def orth(A, tol=tol):; u, s, vh = np.linalg.svd(A, full_matrices=False); if verbose >= 2:; print(s); M, N = A.shape; eps = np.finfo(float).eps; if tol is None:; tol = max(M, N) * np.amax(s) * eps; num = np.sum(s > tol, dtype=int); Q = u[:, :num]; return Q. TRindep = orth(TRspace.T); TRindep = TRindep.T. if verbose >= 2:; print(TRindep.shape, '<--', TRspace.shape); print(np.linalg.norm(TRindep, axis=1)); print('-' * 80). return TRindep. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .  · ; 1.5;  · . PSI4. Module code; psi4.driver.qcdb.vib. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/_modules/psi4/driver/qcdb/vib.html:42778,update,updated,42778,psi4manual/1.5.0/_modules/psi4/driver/qcdb/vib.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/_modules/psi4/driver/qcdb/vib.html,1,['update'],['updated']
Deployability,"se calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. cfour/kw-5; Basis set spherical/Cartesian with basis and cfour_spherical. cfour/sp-rohf-ccsd; single-point CCSD/qz2p on NH2. cfour/sp-uhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on NH2 with ecc. cfour/kw-1; testing best practices options, part i. cfour/mints5; geometries from a variety of input formats. references from psi4, testing whether geometry strings read identically for psi4/cfour. cfour/kw-8; Translating psi4 options to cfour, part ii. cfour/sp-uhf-cc3; single-point CC3/qz2p on NH2. cfour/sp-rohf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/sp-uhf-mp2; single-point MP2/qz2p on NH2. cfour/opt-rhf-ccsd_t_; optimization CCSD(T)/dzp on water. cfour/psi-uhf-scsmp2; UHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/sp-uhf-scf; single-point HF/qz2p on NH2. cfour/sp-rhf-ccsd-ao; single-point CCSD/qz2p on water with aobasis. cfour/sp-uhf-ccsdt; single-point CCSDT/qz2p on NH2. cfour/sp-rhf-scf; single-point HF/qz2p on water. cfour/kw-7; Translating psi4 options to cfour, part i. cfour/opt-rhf-scf; optimization HF/svp on water. cfour/puream; Basis set spherical/Cartesian behavior in cfour. cfour/sp-uhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/sp-rohf-ccsd_t_; single-point CCSD(T)/qz2p on NH2. cfour/psi-a24-grad; geometry after three optimization cycles on A24 database, cfour matches psi4. cfour/kw-2; testing best practices options, part ii. cfour/mints5-grad; geometry after three optimization cycles for a variety of input formats, references from psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.6;  · . PSI4. Appendices; Test Suite and Sample Inputs; CFOUR. © Copyright 2022, The Psi4 Project.; Last updated on Thursday, 19 May 2022 08:57PM.; Created using Sphinx 4.5.0.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/autodoc_testsuite_cfour.html:5192,update,updated,5192,psi4manual/1.6.x/autodoc_testsuite_cfour.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/autodoc_testsuite_cfour.html,1,['update'],['updated']
Deployability,"se new triples?. Type: boolean; Default: true. NUM_AMPS_PRINT¶. Number of important and amplitudes to print. Type: integer; Default: 10. PAIR_ENERGIES_PRINT¶. Do print MP2 and CCSD pair energies for RHF references?. Type: boolean; Default: false. PROPERTY¶. The response property desired. Acceptable values are POLARIZABILITY (default) for dipole-polarizabilities, ROTATION for specific rotations, ROA for Raman Optical Activity, and ALL for all of the above. Type: string; Possible Values: POLARIZABILITY, ROTATION, MAGNETIZABILITY, ROA, ALL; Default: POLARIZABILITY. REFERENCE¶. Reference wavefunction type. Type: string; Possible Values: RHF, ROHF, UHF; Default: RHF. RESTART¶. Do restart the coupled-cluster iterations from old and amplitudes? For geometry optimizations, Brueckner calculations, etc. the iterative solution of the CC amplitude equations may benefit considerably by reusing old vectors as initial guesses. Assuming that the MO phases remain the same between updates, the CC codes will, by default, re-use old vectors, unless the user sets RESTART = false. Type: boolean; Default: true. R_CONVERGENCE¶. Convergence criterion for wavefunction (change) in CC amplitude equations. Type: conv double; Default: 1e-7. SCSN_MP2¶. Do SCS-MP2 with parameters optimized for nucleic acids?. Type: boolean; Default: false. SCS_CCSD¶. Do spin-component-scaled CCSD. Type: boolean; Default: false. SCS_MP2¶. Do spin-component-scaled MP2 (SCS-MP2)?. Type: boolean; Default: false. SEMICANONICAL¶. Convert ROHF MOs to semicanonical MOs. Type: boolean; Default: true. SPINADAPT_ENERGIES¶. Do print spin-adapted pair energies?. Type: boolean; Default: false. T2_COUPLED¶. Type: boolean; Default: false. T3_WS_INCORE¶. Do build W intermediates required for cc3 in core memory?. Type: boolean; Default: false. Expert¶. AO_BASIS¶. The algorithm to use for the terms If AO_BASIS is NONE, the MO-basis integrals will be used; if AO_BASIS is DISK, the AO-basis integrals stored on disk will be used; if AO",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/autodir_options_c/module__ccenergy-1.html:4563,update,updates,4563,psi4manual/4.0b3/autodir_options_c/module__ccenergy-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodir_options_c/module__ccenergy-1.html,6,['update'],['updates']
Deployability,"se the string is discarded. Type: boolean; Default: false. R_CONVERGENCE (CCENERGY); CCENERGY — Convergence criterion for wavefunction (change) in CC amplitude equations. Type: conv double; Default: 1e-7. R_CONVERGENCE (CCEOM); CCEOM — Convergence criterion for norm of the residual vector in the Davidson algorithm for CC-EOM. Type: conv double; Default: 1e-6. R_CONVERGENCE (CCLAMBDA); CCLAMBDA — Convergence criterion for wavefunction (change) in CC lambda-amplitude equations. Type: conv double; Default: 1e-7. R_CONVERGENCE (CCRESPONSE); CCRESPONSE — Convergence criterion for wavefunction (change) in perturbed CC equations. Type: conv double; Default: 1e-7. R_CONVERGENCE (CIS); CIS — Convergence criterion for CIS wavefunction. Type: conv double; Default: 1e-7. R_CONVERGENCE (DCFT); DCFT — Convergence criterion for the RMS of the residual vector in the density cumulant updates, as well as the solution of the density cumulant and orbital response equations. In the orbital updates controls the RMS of the SCF error vector. Type: conv double; Default: 1e-10. R_CONVERGENCE (DETCI); DETCI — Convergence criterion for CI residual vector in the Davidson algorithm (RMS error). The default is 1e-4 for energies and 1e-7 for gradients. Type: conv double; Default: 1e-4. R_CONVERGENCE (FNOCC); FNOCC — Convergence for the CC amplitudes. Note that convergence is met only when E_CONVERGENCE and R_CONVERGENCE are satisfied. Type: conv double; Default: 1.0e-7. R_CONVERGENCE (LMP2); LMP2 — Convergence criterion for T2 amplitudes (RMS change). Type: conv double; Default: 1e-5. R_CONVERGENCE (OCC); OCC — Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-5. R_CONVERGENCE (PSIMRCC); PSIMRCC — Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-9. R_POINTS (SCF); SCF — Number of radial grid points for sphereical potential integration. Type: integer; Default: 100. RADIUS (SCF); SCF — Radius (bohr) of a hard-sphere external potential. Ty",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/autodoc_glossary_options_c-1.html:103774,update,updates,103774,psi4manual/4.0b4/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_glossary_options_c-1.html,2,['update'],['updates']
Deployability,"se theory code. psi4.core.cctransort(arg0: psi::Wavefunction) → None¶; Runs CCTRANSORT, which transforms and reorders integrals for use in the coupled cluster codes. psi4.core.cctriples(arg0: psi::Wavefunction) → float¶; Runs the coupled cluster (T) energy code. psi4.core.clean() → None¶; Function to remove scratch files. Call between independent jobs. psi4.core.clean_options() → None¶; Function to reset options to clean state. psi4.core.clean_variables() → None¶; Empties all PSI scalar and array variables that have been set internally. psi4.core.close_outfile() → None¶; Closes the output file. psi4.core.dcft(arg0: psi::Wavefunction) → psi::Wavefunction¶; Runs the density cumulant functional theory code. psi4.core.del_array_variable(arg0: str) → None¶; Removes the requested (case-insensitive) Matrix QC variable. psi4.core.del_scalar_variable(arg0: str) → None¶; Removes the requested (case-insensitive) double QC variable. psi4.core.detci(arg0: psi::Wavefunction) → psi::Wavefunction¶; Runs the determinant-based configuration interaction code. psi4.core.dfmp2(arg0: psi::Wavefunction) → psi::Wavefunction¶; Runs the DF-MP2 code. psi4.core.dfocc(arg0: psi::Wavefunction) → psi::Wavefunction¶; Runs the density-fitted orbital optimized CC codes. psi4.core.dmrg(arg0: psi::Wavefunction) → float¶; Runs the DMRG code. psi4.core.doublet(A: psi4.core.Matrix, B: psi4.core.Matrix, transA: bool=False, transB: bool=False) → psi4.core.Matrix¶; Returns the multiplication of two matrices A and B, with options to transpose each beforehand. psi4.core.fcidump_tei_helper(nirrep: int, restricted: bool, DPD_info: Dict[str, int], ints_tolerance: float, fname: str='INTDUMP') → None¶; Write integrals to file in FCIDUMP format. psi4.core.finalize() → None¶. psi4.core.flush_outfile() → None¶; Flushes the output file. psi4.core.fnocc(arg0: psi::Wavefunction) → psi::Wavefunction¶; Runs the fno-ccsd(t)/qcisd(t)/mp4/cepa energy code. psi4.core.get_active_molecule() → psi::Molecule¶; Returns the currentl",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/psi4api-1.html:279370,configurat,configuration,279370,psi4manual/1.3.2/psi4api-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psi4api-1.html,2,['configurat'],['configuration']
Deployability,"se title takes the form: v1.8, 2023-05-11; Fill in frontmatter style and links from previous GitHub release; Fill in RN from hopefully existing RN issue.; Fill in RN by going through the frontmatter from all PRs from this milestone, particularly the; “User API & Changelog headlines” section.; Save the draft release until tag is finalized.; “publish” release. This establishes the release date for the GitHub API.; Close the RN issue.; Close the milestone (should be 100% complete).; Open a milestone for the release that’s a year out. Publish GitHub postrelease¶. With an anticipated or newly minted tag, go to https://github.com/psi4/psi4/releases/new (or; “Draft a new release” button on GitHub site).; Release title takes the form: v1.8.2, 2023-10-03; Fill in frontmatter style and links from previous GitHub release.; Fill in RN bullets for changes cherry-picked or edited to the maintenance branch.; Save the draft release until tag is finalized.; “publish” release. This establishes the release date for the GitHub API. Publish psicode.org release¶. Be in local clone of repository https://github.com/psi4/psicode-hugo-website .; Execute https://api.github.com/repos/psi4/psi4/releases/latest or; https://api.github.com/repos/psi4/psi4/releases/tags/v1.8.2 (substituting tag) and note the id; field value.; Copy and edit a new file akin to content/posts/v182.md. Add it to the git index. e.g., v1.8.2 is used for Title and Release Notes.; e.g., 1.8.x is used for Documentation and Source.; e.g., v182 (edition string) is used for Image and Installers.; Use the id value in the shortcode call at the bottom near ghRN. Add a new release page to the psi4_release_fireworks.key Keynote presentation. Run the slide; transition and screenshot the fireworks. Open the PNG file in Preview and save as JPEG while; downsampling to ~400kB. Place the file at e.g., static/images/portfolio/fireworks_slide_v182.jpg.; Add it to the git index.; Edit data/portfolio.yml to add a new block for the release (or",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/manage_release.html:23010,release,release,23010,psi4manual/1.9.x/manage_release.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/manage_release.html,2,['release'],['release']
Deployability,"se. Frozen doubly occupied orbitals (FROZEN_DOCC) are doubly; occupied in each reference determinant and are not correlated in the; MRCC procedure.; Doubly occupied orbitals (RESTRICTED_DOCC) are doubly; occupied in each reference determinant and are correlated in the MRCC; procedure.; Active orbitals (ACTIVE) are partially occupied in each; reference determinant.; Frozen virtual orbitals (FROZEN_UOCC) are unoccupied in; all reference determinants and are excluded from the correlated wave; function. The model space is selected by considering all possible occupations; of the electrons among the orbitals in the active space that result; in determinants with the correct symmetry (WFN_SYM); and the correct value specified by the keyword; CORR_MULTP. Note that this does not consider the multiplicity; of the wavefunction. Thus, in order to obtain the wavefunction; with a set of reference determinants for; an open-shell system you should request a CORR_MULTP of; 1 within the PSIMRCC module, and select the root of the effective; Hamiltonian that corresponds to the state of interest. In addition,; the WFN_SYM keyword needs to be specified otherwise the; wavefunction belonging to the all-symmetric irrep will be selected. In; addition, it should be noted that for an open-shell singlet based; on two determinants the eigenvector is; [], which corresponds; to a wavefunction of the following form:. See Appendix PSIMRCC for a complete list of PSIMRCC options. Table Of Contents. PSIMRCC Implementation of Mk-MRCC Theory; A Simple Example; Orbital ordering and selection of the model space. Previous topic; CC: Coupled Cluster Methods; Next topic; Interface to MRCC by M. Kállay; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Theoretical Methods: SCF to FCI ». © Copyright 2012, The Psi4 Project.; Last updated on Oct 16, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/psimrcc-1.html:7398,update,updated,7398,psi4manual/4.0b3/psimrcc-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/psimrcc-1.html,2,['update'],['updated']
Deployability,"se. R_CONVERGENCE (CCENERGY); CCENERGY — Convergence criterion for wavefunction (change) in CC amplitude equations. Type: conv double; Default: 1e-7. R_CONVERGENCE (CCEOM); CCEOM — Convergence criterion for norm of the residual vector in the Davidson algorithm for CC-EOM. Type: conv double; Default: 1e-6. R_CONVERGENCE (CCLAMBDA); CCLAMBDA — Convergence criterion for wavefunction (change) in CC lambda-amplitude equations. Type: conv double; Default: 1e-7. R_CONVERGENCE (CCRESPONSE); CCRESPONSE — Convergence criterion for wavefunction (change) in perturbed CC equations. Type: conv double; Default: 1e-7. R_CONVERGENCE (CEPA); CEPA — Desired convergence for the t1 and t2 amplitudes, defined as the norm of the change in the amplitudes between iterations. Type: conv double; Default: 1.0e-7. R_CONVERGENCE (CIS); CIS — Convergence criterion for CIS wavefunction. Type: conv double; Default: 1e-7. R_CONVERGENCE (DCFT); DCFT — Convergence criterion for the RMS of the residual vector in the density cumulant updates as well as the solution of the density cumulant and orbital response equations. In the orbital updates controls the RMS of the SCF error vector. Type: conv double; Default: 1e-10. R_CONVERGENCE (DETCI); DETCI — Convergence criterion for CI residual vector in the Davidson algorithm (RMS error). The default is 1e-4 for energies and 1e-7 for gradients. Type: conv double; Default: 1e-4. R_CONVERGENCE (LMP2); LMP2 — Convergence criterion for T2 amplitudes (RMS change). Type: conv double; Default: 1e-5. R_CONVERGENCE (OMP2); OMP2 — Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-5. R_CONVERGENCE (OMP3); OMP3 — Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-5. R_CONVERGENCE (PSIMRCC); PSIMRCC — Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-9. R_POINTS (SCF); SCF — Number of radial grid points for sphereical potential integration. Type: integer; Default: 100. RADIUS (SCF); ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/autodoc_glossary_options_c-1.html:98176,update,updates,98176,psi4manual/4.0b3/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_glossary_options_c-1.html,2,['update'],['updates']
Deployability,"se. T3_WS_INCORE (CCENERGY); CCENERGY — Do build W intermediates required for cc3 in core memory?. Type: boolean; Default: false. T3_WS_INCORE (CCEOM); CCEOM — Do build W intermediates required for eom_cc3 in core memory?. Type: boolean; Default: false. T_AMPS (CCHBAR); CCHBAR — Do compute the T amplitude equation matrix elements?. Type: boolean; Default: false. TDHF_MEM_SAFETY_FACTOR (CPHF); CPHF — Memory safety factor for allocating JK. Type: double; Default: 0.75. TDM (DETCI); DETCI — Do compute the transition density? Note: only transition densities between roots of the same symmetry will be evaluated. DETCI does not compute states of different irreps within the same computation; to do this, lower the symmetry of the computation. Type: boolean; Default: false. TEST_B (OPTKING); OPTKING — Do test B matrix?. Type: boolean; Default: false. TEST_DERIVATIVE_B (OPTKING); OPTKING — Do test derivative B matrix?. Type: boolean; Default: false. THETA_POINTS (SCF); SCF — Number of colatitude grid points for spherical potential integration. Type: integer; Default: 360. THICKNESS (SCF); SCF — Thickness (bohr) of a hard-sphere external potential. Type: double; Default: 20.0. THREE_PARTICLE (DCFT); DCFT — Whether to compute three-particle energy correction or not. Type: string; Possible Values: NONE, PERTURBATIVE; Default: NONE. TIKHONOW_MAX (PSIMRCC); PSIMRCC — The cycle after which Tikhonow regularization is stopped. Set to zero to allow regularization in all iterations. Type: integer; Default: 5. TIKHONOW_OMEGA (DCFT); DCFT (Expert) — The shift applied to the denominator in the density cumulant update iterations. Type: double; Default: 0.0. TIKHONOW_OMEGA (PSIMRCC); PSIMRCC — The shift to apply to the denominators, {it c.f.} Taube and Bartlett, JCP, 130, 144112 (2009). Type: double; Default: 0.0. TIKHONOW_TRIPLES (PSIMRCC); PSIMRCC (Expert) — Do use Tikhonow regularization in (T) computations?. Type: boolean; Default: false. TILE_SZ (SCF); SCF (Expert) — The tile size for t",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/autodoc_glossary_options_c-1.html:216566,integrat,integration,216566,psi4manual/1.2.1/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/autodoc_glossary_options_c-1.html,4,['integrat'],['integration']
Deployability,"se; Build Conda Psi4 stack at specific commit; Publish to main conda label; Build Psi4conda set; Generate download page for psicode.org; Publish GitHub postrelease; Publish psicode release; Finalize release; Reset psi4meta for nightly operation. Update copyright year¶. cd ~/path/to/psi4; Primary target is licenses. grep -rl ""(c) 2007-2017"" * | xargs sed -i '' ""s/(c) 2007-2017/(c) 2007-2018/g""; On Linux, drop the '' in above command; Need to do psi4/ and docs/ dirs. Also, license in these files. tests/runtest.py; README.md; tests/psitest.pl. Also, in content of https://github.com/psi4/psi4/blob/master/doc/sphinxman/source/conf.py.in#L118. Update samples¶. Run make sphinxman at least once by hand; Check in resulting psifiles.py and all the updated and new samples/ files and dirs; Make a lone PR and warn reviewers not to read it, since autogenerated. Collect new authors¶. Survey contributions to current Milestone. Add new contribs and PR lists to release notes GitHub issue; Figure out any new “Additional Contributors” authors since last release; Edit psi4/header.py accordingly, make PR; Get permission of new authors and their particulars for codemeta.json; Invite any contributors with at least 3 PRs to join GitHub Organization. Anticipate next release¶. Bump version in codemeta.json, https://github.com/psi4/psi4/blob/master/codemeta.json#L9; Add to branch list in azure-pipelines.yml, psi4/azure-pipelines.yml. Build Conda ecosystem stack¶; By “ecosystem stack”, mean packages that are upstream, downstream, required, and optional for a fully featured Psi4 build and which we can’t get from “defaults” or “conda-forge” channels. Main directions are in [cbcy](https://github.com/psi4/psi4meta/blob/master/conda-recipes/conda_build_config.yaml) and [poodle](https://github.com/psi4/psi4meta/blob/master/psinet-nightly/kitandkapoodle.py); A couple weeks before the first “rc” is planned, start going through L/LT in poodle, checking with upstream to see if new versions have been rele",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/manage_release-1.html:1921,release,release,1921,psi4manual/1.4.0/manage_release-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/manage_release-1.html,4,['release'],['release']
Deployability,"se; verbose = PsiMod.get_option('SCF', 'PRINT'); if verbose >= 3:; PsiMod.print_out('\n ==> DFTD3 Output <==\n'); PsiMod.print_out(out); dfile = open(derivfile, 'r'); PsiMod.print_out(dfile.read().replace('D', 'E')); dfile.close(); PsiMod.print_out('\n'). # Clean up files and remove scratch directory; os.unlink(paramfile); os.unlink(geomfile); os.unlink(derivfile); if defmoved is True:; os.rename(defaultfile + '_hide', defaultfile). os.chdir('..'); try:; shutil.rmtree(dftd3_tmpdir); except OSError as e:; ValidationError('Unable to remove dftd3 temporary directory %s' % e, file=sys.stderr); os.chdir(current_directory). # return -D & d(-D)/dx; PsiMod.set_variable('DISPERSION CORRECTION ENERGY', dashd); if dertype == -1:; return dashd, dashdderiv; elif dertype == 0:; return dashd; elif dertype == 1:; return psi_dashdderiv. [docs]def dynamic_variable_bind(cls):; """"""Function to dynamically add extra members to; the PsiMod.Molecule class. """"""; cls.__setattr__ = new_set_attr; cls.__getattr__ = new_get_attr; cls.BFS = BFS; cls.run_dftd3 = run_dftd3. dynamic_variable_bind(PsiMod.Molecule) # pass class type, not class instance. #; # Define geometry to be used by PSI4.; # The molecule created by this will be set in options.; #; # geometry(""; # O 1.0 0.0 0.0; # H 0.0 1.0 0.0; # H 0.0 0.0 0.0; #; [docs]def geometry(geom, name=""default""):; """"""Function to create a molecule object of name *name*; from the geometry in string *geom*. """"""; molecule = PsiMod.Molecule.create_molecule_from_string(geom); molecule.set_name(name). activate(molecule). return molecule. [docs]def activate(mol):; """"""Function to set molecule object *mol* as the current active molecule.""""""; PsiMod.set_active_molecule(mol); #PsiMod.IO.set_default_namespace(mol.get_name()). Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». © Copyright 2013, The Psi4 Project.; Last updated on Mar 20, 2014.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/_modules/molutil.html:13194,update,updated,13194,psi4manual/4.0b4/_modules/molutil.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/molutil.html,1,['update'],['updated']
Deployability,"sed change or practice.; Anyone can comment by adding sections to the bottom of the reST file.; Alternatively, e-mail discussions can go out and the (possibly edited); results be pasted into the bottom of the reST file once the furor dies; down.; Comments can be simple statements of agreement (useful for gauging; consensus), notation of possible problems, proposed re-writes of the; proposal, etc. Only the original author or his designate should change; the main body of the PsiPEP (to maintain a history).; Once there’s agreement, file can be stamped final and be placed into; effect. (Yes, this is very vague.). Roles of a PsiPEP Include¶. Best practices or re-vamped best practices; Practices can be easily linked- or referred-to by number and can be; tagged as obsolete by a single label change months later. Request/present viewpoint on organization; Draw attention to organization needed in code outside one’s area of; expertise. Request interface for some structure (e.g., gradients) or; viewpoints on how that interface will behave to ensure compatibility.; Offer philosophy on how processes/definitions should be. Fair Warning: Proposal to change things up; Announce plans to re-organize code structure or how something is; handled. List goals (may be conflicting) and how proposed scheme best; satisfies them. PsiPEP allows discussion before roll-out in case; proposal has deleterious side-effects. The contrast between a PsiPEP and a ticket is that for the latter, there’s; no question of whether the task is to be done as described. Comments¶; 04-Jul-2012, LAB. table of contents. PEP1: Proposing PsiPEP for PSI4; Path of a PsiPEP; Roles of a PsiPEP Include; Comments. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. PsiPEP: Plans and Practices to Organize PSI4; PEP1: Proposing PsiPEP for PSI4. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/pep0001.html:3221,update,updated,3221,psi4manual/master/pep0001.html,https://psicode.org,https://psicode.org/psi4manual/master/pep0001.html,1,['update'],['updated']
Deployability,"sed shell reference determinant, it must be zero otherwise. This becomes nsing (option #2) in fort.56. Type: integer; Default: 1. MRCC_NUM_TRIPLET_ROOTS¶. Number of triplet roots. (Strictly speaking number of of roots with \(M_s=0\) and S is odd.) See notes at option MRCC_NUM_SINGLET_ROOTS This becomes ntrip (option #3) in fort.56. Type: integer; Default: 0. Expert¶. MRCC_METHOD¶. If more than one root is requested and calc=1, LR-CC (EOM-CC) calculation is performed automatically for the excited states. This overrides all automatic determination of method and will only work with energy(). This becomes CC/CI (option #5) in fort.56. See Table MRCC_METHOD for details. Type: integer; Default: 1. MRCC_OMP_NUM_THREADS¶. Sets the OMP_NUM_THREADS environment variable before calling MRCC. If the environment variable OMP_NUM_THREADS is set prior to calling Psi4 then that value is used. When set, this option overrides everything. Be aware the -n command-line option described in section Threading does not affect MRCC. Type: integer; Default: 1. MRCC_RESTART¶. The program restarts from the previously calculated parameters if it is 1. In case it is 2, the program executes automatically the lower-level calculations of the same type consecutively (e.g., CCSD, CCSDT, and CCSDTQ if CCSDTQ is requested) and restarts each calculation from the previous one (rest=2 is available only for energy calculations). Currently, only a value of 0 and 2 are supported. This becomes rest (option #4) in fort.56. Type: integer; Default: 0. table of contents. MRCC; General; E_CONVERGENCE; INTS_TOLERANCE; MRCC_LEVEL; MRCC_NUM_DOUBLET_ROOTS; MRCC_NUM_SINGLET_ROOTS; MRCC_NUM_TRIPLET_ROOTS. Expert; MRCC_METHOD; MRCC_OMP_NUM_THREADS; MRCC_RESTART. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; MRCC. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/autodir_options_c/module__mrcc.html:3037,update,updated,3037,psi4manual/1.7.x/autodir_options_c/module__mrcc.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/module__mrcc.html,1,['update'],['updated']
Deployability,"self). current_total_energy(self). form_rotation_matrix(self, x, order). gradient(self). gradient_rms(self). rhf_energy(self, arg0). solve(self, arg0, arg1, arg2). update(self, arg0, arg1, arg2, arg3, arg4). zero_redundant(self, arg0). Methods Documentation. Ck(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix, arg1: psi4.core.Matrix) → psi4.core.Matrix¶. H_approx_diag(self: psi4.core.SOMCSCF) → psi4.core.Matrix¶. approx_solve(self: psi4.core.SOMCSCF) → psi4.core.Matrix¶. compute_AFock(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix) → psi4.core.Matrix¶. compute_Hk(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix) → psi4.core.Matrix¶. compute_Q(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix) → psi4.core.Matrix¶. compute_Qk(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix, arg1: psi4.core.Matrix, arg2: psi4.core.Matrix) → psi4.core.Matrix¶. current_AFock(self: psi4.core.SOMCSCF) → psi4.core.Matrix¶. current_IFock(self: psi4.core.SOMCSCF) → psi4.core.Matrix¶. current_ci_energy(self: psi4.core.SOMCSCF) → float¶. current_docc_energy(self: psi4.core.SOMCSCF) → float¶. current_total_energy(self: psi4.core.SOMCSCF) → float¶. form_rotation_matrix(self: psi4.core.SOMCSCF, x: psi4.core.Matrix, order: int = 2) → psi4.core.Matrix¶. gradient(self: psi4.core.SOMCSCF) → psi4.core.Matrix¶. gradient_rms(self: psi4.core.SOMCSCF) → float¶. rhf_energy(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix) → float¶. solve(self: psi4.core.SOMCSCF, arg0: int, arg1: float, arg2: bool) → psi4.core.Matrix¶. update(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix, arg1: psi4.core.Matrix, arg2: psi4.core.Matrix, arg3: psi4.core.Matrix, arg4: psi4.core.Matrix) → None¶. zero_redundant(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix) → None¶. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. PSI4 API: Linking C++ and Python; DiskSOMCSCF. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/api/psi4.core.disksomcscf.html:1987,update,update,1987,psi4manual/1.4.0/api/psi4.core.disksomcscf.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/api/psi4.core.disksomcscf.html,2,['update'],"['update', 'updated']"
Deployability,"self). current_total_energy(self). form_rotation_matrix(self, x[, order]). gradient(self). gradient_rms(self). rhf_energy(self, arg0). solve(self, arg0, arg1, arg2). update(self, arg0, arg1, arg2, arg3, arg4). zero_redundant(self, arg0). Methods Documentation. Ck(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix, arg1: psi4.core.Matrix) → psi4.core.Matrix¶. H_approx_diag(self: psi4.core.SOMCSCF) → psi4.core.Matrix¶. approx_solve(self: psi4.core.SOMCSCF) → psi4.core.Matrix¶. compute_AFock(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix) → psi4.core.Matrix¶. compute_Hk(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix) → psi4.core.Matrix¶. compute_Q(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix) → psi4.core.Matrix¶. compute_Qk(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix, arg1: psi4.core.Matrix, arg2: psi4.core.Matrix) → psi4.core.Matrix¶. current_AFock(self: psi4.core.SOMCSCF) → psi4.core.Matrix¶. current_IFock(self: psi4.core.SOMCSCF) → psi4.core.Matrix¶. current_ci_energy(self: psi4.core.SOMCSCF) → float¶. current_docc_energy(self: psi4.core.SOMCSCF) → float¶. current_total_energy(self: psi4.core.SOMCSCF) → float¶. form_rotation_matrix(self: psi4.core.SOMCSCF, x: psi4.core.Matrix, order: int = 2) → psi4.core.Matrix¶. gradient(self: psi4.core.SOMCSCF) → psi4.core.Matrix¶. gradient_rms(self: psi4.core.SOMCSCF) → float¶. rhf_energy(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix) → float¶. solve(self: psi4.core.SOMCSCF, arg0: int, arg1: float, arg2: bool) → psi4.core.Matrix¶. update(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix, arg1: psi4.core.Matrix, arg2: psi4.core.Matrix, arg3: psi4.core.Matrix, arg4: psi4.core.Matrix) → None¶. zero_redundant(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix) → None¶. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. PSI4 API: Linking C++ and Python; DFSOMCSCF. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/api/psi4.core.dfsomcscf.html:1981,update,update,1981,psi4manual/1.5.0/api/psi4.core.dfsomcscf.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/api/psi4.core.dfsomcscf.html,2,['update'],"['update', 'updated']"
Deployability,"self); docstring. basis_values(self); docstring. compute_functions(self, arg0); docstring. compute_points(self, block[, force_compute]); docstring. deriv(self); docstring. max_functions(self); docstring. max_points(self); docstring. orbital_values(self); docstring. point_values(self); docstring. print_out(self[, out_fname, print]); docstring. set_ansatz(self, arg0); docstring. set_deriv(self, arg0); docstring. set_pointers(*args, **kwargs); Overloaded function. Methods Documentation. ansatz(self: psi4.core.PointFunctions) → int¶; docstring. basis_values(self: psi4.core.BasisFunctions) → Dict[str, psi4.core.Matrix]¶; docstring. compute_functions(self: psi4.core.BasisFunctions, arg0: psi4.core.BlockOPoints) → None¶; docstring. compute_points(self: psi4.core.PointFunctions, block: psi4.core.BlockOPoints, force_compute: bool = True) → None¶; docstring. deriv(self: psi4.core.BasisFunctions) → int¶; docstring. max_functions(self: psi4.core.BasisFunctions) → int¶; docstring. max_points(self: psi4.core.BasisFunctions) → int¶; docstring. orbital_values(self: psi4.core.PointFunctions) → Dict[str, psi4.core.Matrix]¶; docstring. point_values(self: psi4.core.PointFunctions) → Dict[str, psi4.core.Vector]¶; docstring. print_out(self: psi4.core.PointFunctions, out_fname: str = 'outfile', print: int = 2) → None¶; docstring. set_ansatz(self: psi4.core.PointFunctions, arg0: int) → None¶; docstring. set_deriv(self: psi4.core.BasisFunctions, arg0: int) → None¶; docstring. set_pointers(*args, **kwargs)¶; Overloaded function. set_pointers(self: psi4.core.PointFunctions, arg0: psi4.core.Matrix) -> None. docstring. set_pointers(self: psi4.core.PointFunctions, arg0: psi4.core.Matrix, arg1: psi4.core.Matrix) -> None. docstring. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. PSI4 API: Linking C++ and Python; RKSFunctions. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/api/psi4.core.rksfunctions.html:2170,update,updated,2170,psi4manual/1.5.0/api/psi4.core.rksfunctions.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/api/psi4.core.rksfunctions.html,1,['update'],['updated']
Deployability,"self); docstring. basis_values(self); docstring. compute_functions(self, arg0); docstring. compute_points(self, block[, force_compute]); docstring. deriv(self); docstring. max_functions(self); docstring. max_points(self); docstring. orbital_values(self); docstring. point_values(self); docstring. print_out(self[, out_fname, print]); docstring. set_ansatz(self, arg0); docstring. set_deriv(self, arg0); docstring. set_pointers(*args, **kwargs); Overloaded function. Methods Documentation. ansatz(self: psi4.core.PointFunctions) → int¶; docstring. basis_values(self: psi4.core.BasisFunctions) → Dict[str, psi4.core.Matrix]¶; docstring. compute_functions(self: psi4.core.BasisFunctions, arg0: psi4.core.BlockOPoints) → None¶; docstring. compute_points(self: psi4.core.PointFunctions, block: psi4.core.BlockOPoints, force_compute: bool = True) → None¶; docstring. deriv(self: psi4.core.BasisFunctions) → int¶; docstring. max_functions(self: psi4.core.BasisFunctions) → int¶; docstring. max_points(self: psi4.core.BasisFunctions) → int¶; docstring. orbital_values(self: psi4.core.PointFunctions) → Dict[str, psi4.core.Matrix]¶; docstring. point_values(self: psi4.core.PointFunctions) → Dict[str, psi4.core.Vector]¶; docstring. print_out(self: psi4.core.PointFunctions, out_fname: str = 'outfile', print: int = 2) → None¶; docstring. set_ansatz(self: psi4.core.PointFunctions, arg0: int) → None¶; docstring. set_deriv(self: psi4.core.BasisFunctions, arg0: int) → None¶; docstring. set_pointers(*args, **kwargs)¶; Overloaded function. set_pointers(self: psi4.core.PointFunctions, arg0: psi4.core.Matrix) -> None. docstring. set_pointers(self: psi4.core.PointFunctions, arg0: psi4.core.Matrix, arg1: psi4.core.Matrix) -> None. docstring. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. PSI4 API: Linking C++ and Python; UKSFunctions. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/api/psi4.core.uksfunctions.html:2170,update,updated,2170,psi4manual/1.5.0/api/psi4.core.uksfunctions.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/api/psi4.core.uksfunctions.html,1,['update'],['updated']
Deployability,"self, arg0). transform(self). transpose(self, arg0, arg1, int, int]). Methods Documentation. add_space(self: psi4.core.DFHelper, arg0: str, arg1: psi4.core.Matrix) → None¶. add_transformation(self: psi4.core.DFHelper, name: str, key1: str, key2: str, order: str = 'Qpq') → None¶. clear_all(self: psi4.core.DFHelper) → None¶. clear_spaces(self: psi4.core.DFHelper) → None¶. get_AO_core(self: psi4.core.DFHelper) → bool¶. get_AO_size(self: psi4.core.DFHelper) → int¶. get_MO_core(self: psi4.core.DFHelper) → bool¶. get_memory(self: psi4.core.DFHelper) → int¶. get_method(self: psi4.core.DFHelper) → str¶. get_schwarz_cutoff(self: psi4.core.DFHelper) → float¶. get_space_size(self: psi4.core.DFHelper, arg0: str) → int¶. get_tensor(*args, **kwargs)¶; Overloaded function. get_tensor(self: psi4.core.DFHelper, arg0: str) -> psi4.core.Matrix; get_tensor(self: psi4.core.DFHelper, arg0: str, arg1: List[int], arg2: List[int], arg3: List[int]) -> psi4.core.Matrix. get_tensor_shape(self: psi4.core.DFHelper, arg0: str) → Tuple[int, int, int]¶. get_tensor_size(self: psi4.core.DFHelper, arg0: str) → int¶. hold_met(self: psi4.core.DFHelper, arg0: bool) → None¶. initialize(self: psi4.core.DFHelper) → None¶. print_header(self: psi4.core.DFHelper) → None¶. set_AO_core(self: psi4.core.DFHelper, arg0: bool) → None¶. set_MO_core(self: psi4.core.DFHelper, arg0: bool) → None¶. set_memory(self: psi4.core.DFHelper, arg0: int) → None¶. set_method(self: psi4.core.DFHelper, arg0: str) → None¶. set_nthreads(self: psi4.core.DFHelper, arg0: int) → None¶. set_schwarz_cutoff(self: psi4.core.DFHelper, arg0: float) → None¶. transform(self: psi4.core.DFHelper) → None¶. transpose(self: psi4.core.DFHelper, arg0: str, arg1: Tuple[int, int, int]) → None¶. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. PSI4 API: Linking C++ and Python; DFHelper. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/api/psi4.core.dfhelper.html:2732,update,updated,2732,psi4manual/1.4.0/api/psi4.core.dfhelper.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/api/psi4.core.dfhelper.html,1,['update'],['updated']
Deployability,"self.; CMake does a good job scanning your computer to locate libraries, header; files, and executables needed for compilation. So it’s very possible that; from top-level-psi4-dir source directory, you can call cmake -S.; -Bobjdir without any further arguments, and it will invoke cmake,; detect some appropriate defaults, configure the build, create a build; directory objdir, and complete, leaving you to only invoke; make or Ninja in the new build directory.; Should this happy scenario not come to pass, or if the default build; options are not to your taste, use the links within core; dependencies and add-on dependencies to plan a set of arguments to cmake tailored to; your computer. Proceed to quick build or; detailed build. How to build and install Psi4, the compact version¶; This section outlines the main steps of configuring, compiling, and; installing PSI4. More detail is given here.; >>> cd {top-level-psi4-dir}; >>> cmake -S. -Bobjdir [your configuration options]; >>> cd objdir; >>> make -j`getconf _NPROCESSORS_ONLN`; >>> make install. How to build, test, and install Psi4, in detail¶; 1. Plan Directories. Get ahold of the PSI4 codebase, and navigate to the top level source; directory, hereafter top-level-psi4-dir. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}. >>> cd {top-level-psi4-dir}. Choose a compilation directory, hereafter objdir. How to choose the compilation directory, {objdir}. Choose an installation directory, hereafter prefix. How to install elsewhere than /usr/local/psi4. 2. Plan Configuration. Examine the strict and optional software requirements to make sure the; target computer has all the necessary dependencies installed. What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies. Prepare any necessary or desired configuration options for cmake,; hereafter [your configuration options]. How to see what build configuration opti",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/build_planning-1.html:1861,configurat,configuration,1861,psi4manual/1.4.0/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/build_planning-1.html,8,"['configurat', 'install']","['configuration', 'install']"
Deployability,"self.da = fitter.fit(); self.da.scale(2.0). [docs] def populateExtern(self, extern):; # Electronic Part; extern.addBasis(self.ribasis, self.da); # Nuclear Part; for A in range(0, self.molecule.natom()):; extern.addCharge(self.molecule.Z(A), self.molecule.x(A), self.molecule.y(A), self.molecule.z(A)). [docs]class QMMM(object):. def __init__(self):; self.charges = []; self.diffuses = []; self.extern = PsiMod.ExternalPotential(). [docs] def addDiffuse(self, diffuse):; """"""Function to add a diffuse charge field *diffuse*.""""""; self.diffuses.append(diffuse). [docs] def addChargeBohr(self, Q, x, y, z):; """"""Function to add a point charge of magnitude *Q* at; position (*x*, *y*, *z*) Bohr. """"""; self.charges.append([Q, x, y, z]). [docs] def addChargeAngstrom(self, Q, x, y, z):; """"""Function to add a point charge of magnitude *Q* at; position (*x*, *y*, *z*) Angstroms. """"""; self.charges.append([Q, x / physconst.psi_bohr2angstroms, y / physconst.psi_bohr2angstroms, z / physconst.psi_bohr2angstroms]). def __str__(self):. s = ' ==> QMMM <==\n\n'. s = s + ' => Charges (a.u.) <=\n\n'; s = s + ' %11s %11s %11s %11s\n' % ('Z', 'x', 'y', 'z'); for k in range(0, len(self.charges)):; s = s + ' %11.7f %11.3E %11.3E %11.3E\n' % (self.charges[k][0], self.charges[k][1], self.charges[k][2], self.charges[k][3]); s = s + '\n'. s = s + ' => Diffuses <=\n\n'. for k in range(0, len(self.diffuses)):; s = s + str(self.diffuses[k]). return s. [docs] def populateExtern(self):; """"""Function to define a charge field external to the; molecule through point and diffuse charges. """"""; # Charges; for charge in self.charges:; self.extern.addCharge(charge[0], charge[1], charge[2], charge[3]); # Diffuses; for diffuse in self.diffuses:; diffuse.populateExtern(self.extern). Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    ; PSI4 [beta3] » ; Module code ». © Copyright 2012, The Psi4 Project.; Last updated on Apr 05, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/_modules/qmmm.html:4303,update,updated,4303,psi4manual/4.0b3/_modules/qmmm.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/_modules/qmmm.html,1,['update'],['updated']
Deployability,"self.da = fitter.fit(); self.da.scale(2.0). [docs] def populateExtern(self, extern):; # Electronic Part; extern.addBasis(self.ribasis, self.da); # Nuclear Part; for A in range(0, self.molecule.natom()):; extern.addCharge(self.molecule.Z(A), self.molecule.x(A), self.molecule.y(A), self.molecule.z(A)). [docs]class QMMM(object):. def __init__(self):; self.charges = []; self.diffuses = []; self.extern = PsiMod.ExternalPotential(). [docs] def addDiffuse(self, diffuse):; """"""Function to add a diffuse charge field *diffuse*.""""""; self.diffuses.append(diffuse). [docs] def addChargeBohr(self, Q, x, y, z):; """"""Function to add a point charge of magnitude *Q* at; position (*x*, *y*, *z*) Bohr. """"""; self.charges.append([Q, x, y, z]). [docs] def addChargeAngstrom(self, Q, x, y, z):; """"""Function to add a point charge of magnitude *Q* at; position (*x*, *y*, *z*) Angstroms. """"""; self.charges.append([Q, x / physconst.psi_bohr2angstroms, y / physconst.psi_bohr2angstroms, z / physconst.psi_bohr2angstroms]). def __str__(self):. s = ' ==> QMMM <==\n\n'. s = s + ' => Charges (a.u.) <=\n\n'; s = s + ' %11s %11s %11s %11s\n' % ('Z', 'x', 'y', 'z'); for k in range(0, len(self.charges)):; s = s + ' %11.7f %11.3E %11.3E %11.3E\n' % (self.charges[k][0], self.charges[k][1], self.charges[k][2], self.charges[k][3]); s = s + '\n'. s = s + ' => Diffuses <=\n\n'. for k in range(0, len(self.diffuses)):; s = s + str(self.diffuses[k]). return s. [docs] def populateExtern(self):; """"""Function to define a charge field external to the; molecule through point and diffuse charges. """"""; # Charges; for charge in self.charges:; self.extern.addCharge(charge[0], charge[1], charge[2], charge[3]); # Diffuses; for diffuse in self.diffuses:; diffuse.populateExtern(self.extern). Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». © Copyright 2013, The Psi4 Project.; Last updated on Mar 20, 2014.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/_modules/qmmm.html:4293,update,updated,4293,psi4manual/4.0b4/_modules/qmmm.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qmmm.html,1,['update'],['updated']
Deployability,"self.molecule.set_multiplicity(multiplicity). # Respond to the EXIT command; def exit(self):; """""" Stop listening for MDI commands; """"""; self.stop_listening = True. # If a lattice of point charges was set, unset it now; if self.set_lattice:; self.kwargs.pop(""external_potentials"", None); . # Enter server mode, listening for commands from the driver; def listen_for_commands(self):; """""" Receive commands through MDI and respond to them as defined by the MDI Standard; """""". while not self.stop_listening:; if self.world_rank == 0:; command = MDI_Recv_Command(self.comm); else:; command = None; if use_mpi4py:; command = self.mpi_world.bcast(command, root=0); if self.world_rank == 0:; psi4.core.print_out('\nMDI command received: ' + str(command) + ' \n'). # Search for this command in self.commands; found_command = False; for supported_command in self.commands:; if not found_command and command == supported_command:; # Run the function corresponding to this command; self.commands[supported_command](); found_command = True; if not found_command:; raise Exception('Unrecognized command: ' + str(command)). def mdi_init(mdi_arguments):; """""" Initialize the MDI Library. Parameters; ----------; mdi_arguments; MDI configuration options. """"""; MDI_Init(mdi_arguments). [docs]def mdi_run(scf_method: str, **kwargs):; """""" Begin functioning as an MDI (MolSSI driver interface) engine. Parameters; ----------; scf_method; Method (SCF or post-SCF) used when calculating energies or gradients.; molecule; The target molecule, if not the last molecule defined.; kwargs; Any additional arguments to pass to :func:`psi4.driver.energy` or; :func:`psi4.driver.gradient` computation. """"""; engine = MDIEngine(scf_method, **kwargs); engine.listen_for_commands(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .  · ; 1.7;  · . PSI4. Module code; psi4.driver.mdi_engine. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/mdi_engine.html:13279,configurat,configuration,13279,psi4manual/1.7.x/_modules/psi4/driver/mdi_engine.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/mdi_engine.html,2,"['configurat', 'update']","['configuration', 'updated']"
Deployability,"self: psi4.core.IntegralFactory) → psi4.core.ThreeCenterOverlapInt; Returns a OneBodyInt that computes the 3 center overlap integral. shells_iterator(self: psi4.core.IntegralFactory) → psi4.core.AOShellCombinationsIterator; Returns an ERI iterator object, only coded for standard ERIs. so_angular_momentum(self: psi4.core.IntegralFactory, deriv: int=0) → psi::OneBodySOInt; Returns a OneBodyInt that computes the SO angular momentum integral. so_dipole(self: psi4.core.IntegralFactory, deriv: int=0) → psi::OneBodySOInt; Returns a OneBodyInt that computes the SO dipole integrals. so_kinetic(self: psi4.core.IntegralFactory, deriv: int=0) → psi::OneBodySOInt; Returns a OneBodyInt that computes the SO kinetic integrals. so_multipoles(self: psi4.core.IntegralFactory, order: int) → psi::OneBodySOInt; Returns a OneBodyInt that computes arbitrary-order SO multipole integrals. so_nabla(self: psi4.core.IntegralFactory, deriv: int=0) → psi::OneBodySOInt; Returns a OneBodyInt that computes the SO nabla integral. so_overlap(self: psi4.core.IntegralFactory, deriv: int=0) → psi::OneBodySOInt; Returns a OneBodyInt that computes the SO overlap integrals. so_potential(self: psi4.core.IntegralFactory, deriv: int=0) → psi::OneBodySOInt; Returns a OneBodyInt that computes the SO nuclear attraction integral. so_pseudospectral(self: psi4.core.IntegralFactory, deriv: int=0) → psi::OneBodySOInt; Returns a OneBodyInt that computes the SO pseudospectral grid integrals. so_quadrupole(self: psi4.core.IntegralFactory) → psi::OneBodySOInt; Returns a OneBodyInt that computes SO the quadrupole integral. so_traceless_quadrupole(self: psi4.core.IntegralFactory) → psi::OneBodySOInt; Returns a OneBodyInt that computes the traceless SO quadrupole integral. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 July 2018 04:21AM.; Created using Sphinx 1.7.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/api/psi4.core.integralfactory.html:12854,update,updated,12854,psi4manual/1.2.1/api/psi4.core.integralfactory.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/api/psi4.core.integralfactory.html,1,['update'],['updated']
Deployability,"self: psi4.core.JK) → List[psi4.core.Matrix]. basisset(self: psi4.core.JK) → psi4.core.BasisSet. static build(orbital_basis, aux=None, jk_type=None, do_wK=None, memory=None); Constructs a Psi4 JK object from an input basis. Parameters:; orbital_basis (BasisSet) – Orbital basis to use in the JK object.; aux (BasisSet, optional) – Optional auxiliary basis set for density-fitted tensors. Defaults; to the DF_BASIS_SCF if set, otherwise the correspond JKFIT basis; to the passed in orbital_basis.; jk_type (str, optional) – Type of JK object to build (DF, Direct, PK, etc). Defaults to the; current global SCF_TYPE option. Returns:Uninitialized JK object. Return type:JK. Example; jk = psi4.core.JK.build(bas); jk.set_memory(int(5e8)) # 4GB of memory; jk.initialize(); …; jk.C_left_add(matirx); jk.compute(); jk.C_clear(); …. build_JK(*args, **kwargs); Overloaded function. build_JK(arg0: psi4.core.BasisSet, arg1: psi4.core.BasisSet) -> psi4.core.JK; build_JK(arg0: psi4.core.BasisSet, arg1: psi4.core.BasisSet, arg2: bool, arg3: int) -> psi4.core.JK. compute(self: psi4.core.JK) → None. finalize(self: psi4.core.JK) → None. initialize(self: psi4.core.JK) → None. memory_estimate(self: psi4.core.JK) → int. name(self: psi4.core.JK) → str. print_header(self: psi4.core.JK) → None; docstring. set_cutoff(self: psi4.core.JK, arg0: float) → None. set_do_J(self: psi4.core.JK, arg0: bool) → None. set_do_K(self: psi4.core.JK, arg0: bool) → None. set_do_wK(self: psi4.core.JK, arg0: bool) → None. set_memory(self: psi4.core.JK, arg0: int) → None. set_omega(self: psi4.core.JK, arg0: float) → None. set_omp_nthread(self: psi4.core.JK, arg0: int) → None. set_print(self: psi4.core.JK, arg0: int) → None. wK(self: psi4.core.JK) → List[psi4.core.Matrix]. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/api/psi4.core.jk.html:5149,update,updated,5149,psi4manual/1.3.2/api/psi4.core.jk.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.jk.html,1,['update'],['updated']
Deployability,"separate potentials and charges in the PCM-SCF step. Type: string; Possible Values: TOTAL, SEPARATE; Default: TOTAL. PERTURB_CBS (PSIMRCC); PSIMRCC (Expert) — Do compute the perturbative corrections for basis set incompleteness?. Type: boolean; Default: false. PERTURB_CBS_COUPLING (PSIMRCC); PSIMRCC (Expert) — Do include the terms that couple different reference determinants in perturbative CBS correction computations?. Type: boolean; Default: true. PERTURB_H (SCF); SCF — Do perturb the Hamiltonian?. Type: boolean; Default: false. PERTURB_MAGNITUDE (DETCI); DETCI (Expert) — The magnitude of perturbation in . Type: double; Default: 1.0. PERTURB_MAGNITUDE (SCF); SCF — Size of the perturbation (applies only to dipole perturbations). Type: double; Default: 0.0. PERTURB_WITH (SCF); SCF — The operator used to perturb the Hamiltonian, if requested. Type: string; Possible Values: DIPOLE_X, DIPOLE_Y, DIPOLE_Z, EMBPOT, SPHERE, DX; Default: DIPOLE_X. PHI_POINTS (SCF); SCF — Number of azimuthal grid points for sphereical potential integration. Type: integer; Default: 360. PK_ALGO (SCF); SCF (Expert) — Select the PK algorithm to use. For debug purposes, selection will be automated later. Type: string; Possible Values: REORDER, YOSHIMINE; Default: REORDER. PK_ALL_NONSYM (SCF); SCF (Expert) — All densities are considered non symmetric, debug only. Type: boolean; Default: false. PK_MAX_BUCKETS (SCF); SCF (Expert) — Maximum numbers of batches to read PK supermatrix. Type: integer; Default: 500. PK_NO_INCORE (SCF); SCF (Expert) — Deactivate in core algorithm. For debug purposes. Type: boolean; Default: false. POINTS (FINDIF); FINDIF — Number of points for finite-differences (3 or 5). Type: integer; Default: 3. POLE_MAXITER (ADC); ADC — Maximum iteration number in pole searching. Type: integer; Default: 20. PPL_TYPE (DFOCC); DFOCC — Type of the CCSD PPL term. Type: string; Possible Values: LOW_MEM, HIGH_MEM, CD, AUTO; Default: AUTO. PR (ADC); ADC — Do use the partial renormalization s",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:181427,integrat,integration,181427,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html,2,['integrat'],['integration']
Deployability,"sert an item at a given position. pop(*args, **kwargs); Overloaded function. remove(self, x); Remove the first item from the list whose value is x. Methods Documentation. append(self: List[psi::Matrix], x: psi::Matrix) → None¶; Add an item to the end of the list. count(self: List[psi::Matrix], x: psi::Matrix) → int¶; Return the number of times x appears in the list. extend(self: List[psi::Matrix], L: List[psi::Matrix]) → None¶; Extend the list by appending all the items in the given list. insert(self: List[psi::Matrix], i: int, x: psi::Matrix) → None¶; Insert an item at a given position. pop(*args, **kwargs)¶; Overloaded function. pop(self: List[psi::Matrix]) -> psi::Matrix. Remove and return the last item. pop(self: List[psi::Matrix], i: int) -> psi::Matrix. Remove and return the item at index i. remove(self: List[psi::Matrix], x: psi::Matrix) → None¶; Remove the first item from the list whose value is x. It is an error if there is no such item. append(self: List[psi::Matrix], x: psi::Matrix) → None; Add an item to the end of the list. count(self: List[psi::Matrix], x: psi::Matrix) → int; Return the number of times x appears in the list. extend(self: List[psi::Matrix], L: List[psi::Matrix]) → None; Extend the list by appending all the items in the given list. insert(self: List[psi::Matrix], i: int, x: psi::Matrix) → None; Insert an item at a given position. pop(*args, **kwargs); Overloaded function. pop(self: List[psi::Matrix]) -> psi::Matrix. Remove and return the last item. pop(self: List[psi::Matrix], i: int) -> psi::Matrix. Remove and return the item at index i. remove(self: List[psi::Matrix], x: psi::Matrix) → None; Remove the first item from the list whose value is x. It is an error if there is no such item. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/api/psi4.core.vectormatrix.html:2371,update,updated,2371,psi4manual/1.3.2/api/psi4.core.vectormatrix.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.vectormatrix.html,1,['update'],['updated']
Deployability,"ses after; compilation, simply execute make tests in the $objdir directory.; This will run each (relatively small) test case and report the results.; Failure of any of the test cases should be reported to the developers.; By default, any such failure will stop the testing process. If you desire; to run the entire testing suit without interruption, execute make tests; TESTFLAGS='-u -q'. Note that you must do a make testsclean in $objdir; to run the test suite again. Step 4: Installation; Once testing is complete, installation into $prefix is accomplished by; running make install in $objdir. Executable modules are installed in; $prefix/bin, include files in $prefix/include, libraries in $prefix/lib, and; basis set data and various control structures in $prefix/share. Step 5: Building Documentation; This is not recommended because all of the documentation should be; available at http://sirius.chem.vt.edu/psi4manual/latest/index.html; (link “docs” off http://www.psicode.org), and it is automatically updated. However,; if your system has the appropriate utilities (notably the sphinx package; and LaTeX), you may build the package documentation from the top-level; $objdir by running make doc. The resulting files will appear in the; $prefix/doc area. Step 6: Cleaning; All object files and libraries can be removed to save disk space by running; make clean in $objdir. Step 7: User Configuration; After the PSI4 package has been successfully installed, the user will need; to add the installation directory into his/her path. If the package has; been installed in the default location /usr/local/psi, then in C shell,; the user should add something like the following to their .cshrc file:; setenv PSI /usr/local/psi; set path = ($path $PSI/bin). Next, the user needs to tell the PSI4 I/O manager how to handle scratch files.; Identify the path to a fast scratch disk for which the user has write access.; If the local /tmp volume is large enough, it might be used.; However, a dedicated ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/installfile.html:18161,update,updated,18161,psi4manual/4.0b3/installfile.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/installfile.html,3,['update'],['updated']
Deployability,"ses neural networking to; improve the accuracy of MP2 (dfmp2) interaction energies for dimer molecules.; The plugin is distributed under the 2-clause BSD license. Installation¶; Binary. snsmp2 is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). If using the Psi4conda installer, snsmp2 has already been installed alongside. If using the PSI4 conda package, the snsmp2 conda package can; be obtained through conda install snsmp2 -c psi4 or conda install; psi4-rt -c psi4. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; snsmp2 can be obtained through conda install snsmp2 -c psi4.; Then, hint its location with PYTHONPATH. To remove a conda installation, conda remove snsmp2. Source. Download the plugin from the GitHub repository:; >>> git clone https://github.com/DEShawResearch/sns-mp2. Once dowloaded, the plugin can be installed as outlined in the documentation:; >>> cd {top-level-sns-mp2-directory}; >>> PSI4_PYTHON=$(head $(which psi4) -n 1 | sed -r 's/^.{2}//'); >>> $PSI4_PYTHON -m pip install . Sample Input¶; A sample input file, adapted from the documentation, is shown below:; 1; 2; 3; 4; 5; 6; 7; 8; 9# Sample SNS-MP2 calculation for two helium atoms. molecule dimer {; He 0 0 0; --; He 2 0 0; }. energy('sns-mp2'). Note that the two monomers are separated by double dashes, indicating that; they should be treated as separate molecules. (See; sec:analysis-of-intermolecular-interactions for more details on; setting up dimer molecules.) This input file can be run in the usual fashion:; >>> psi4 input.dat. table of contents. Spin-Network-Scaled MP2 (SNS-MP2) by D. E. Shaw; Installation; Sample Input. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 July 2018 04:21AM.; Created using Sphinx 1.7.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/plugin_snsmp2-1.html:1528,install,install,1528,psi4manual/1.2.1/plugin_snsmp2-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/plugin_snsmp2-1.html,4,"['install', 'update']","['install', 'updated']"
Deployability,"ses: pybind11_object; Provides a correlation table between two point groups; Methods Summary. degen(self, arg0); Returns the degenercy of the irrep. group(*args, **kwargs); Overloaded function. n(self); Returns the number of irreps in high order group. ngamma(self, arg0); Returns the number of irreps in the low order group that an irrep from the high order group can be reduced to. subdegen(self, arg0); Returns the degeneracy of the subgroup irrep. subgroup(self); Returns lower order pointgroup. subn(self); Returns number of irreps in subgroup. Methods Documentation. degen(self: psi4.core.CorrelationTable, arg0: int) → int¶; Returns the degenercy of the irrep. group(*args, **kwargs)¶; Overloaded function. group(self: psi4.core.CorrelationTable) -> psi4.core.PointGroup. Returns higher order point group. group(self: psi4.core.CorrelationTable, arg0: int, arg1: int) -> int. Returns the higher order point group. n(self: psi4.core.CorrelationTable) → int¶; Returns the number of irreps in high order group. ngamma(self: psi4.core.CorrelationTable, arg0: int) → int¶; Returns the number of irreps in the low order group that an irrep from the high order group can be reduced to. subdegen(self: psi4.core.CorrelationTable, arg0: int) → int¶; Returns the degeneracy of the subgroup irrep. subgroup(self: psi4.core.CorrelationTable) → psi4.core.PointGroup¶; Returns lower order pointgroup. subn(self: psi4.core.CorrelationTable) → int¶; Returns number of irreps in subgroup. table of contents. CorrelationTable; CorrelationTable; CorrelationTable.degen(); CorrelationTable.group(); CorrelationTable.n(); CorrelationTable.ngamma(); CorrelationTable.subdegen(); CorrelationTable.subgroup(); CorrelationTable.subn(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; CorrelationTable. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/api/psi4.core.CorrelationTable.html:2120,update,updated,2120,psi4manual/1.8.x/api/psi4.core.CorrelationTable.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.CorrelationTable.html,1,['update'],['updated']
Deployability,"ses: pybind11_object; Provides a correlation table between two point groups; Methods Summary. degen(self, arg0); Returns the degenercy of the irrep. group(*args, **kwargs); Overloaded function. n(self); Returns the number of irreps in high order group. ngamma(self, arg0); Returns the number of irreps in the low order group that an irrep from the high order group can be reduced to. subdegen(self, arg0); Returns the degeneracy of the subgroup irrep. subgroup(self); Returns lower order pointgroup. subn(self); Returns number of irreps in subgroup. Methods Documentation. degen(self: psi4.core.CorrelationTable, arg0: int) → int¶; Returns the degenercy of the irrep. group(*args, **kwargs)¶; Overloaded function. group(self: psi4.core.CorrelationTable) -> psi4.core.PointGroup. Returns higher order point group. group(self: psi4.core.CorrelationTable, arg0: int, arg1: int) -> int. Returns the higher order point group. n(self: psi4.core.CorrelationTable) → int¶; Returns the number of irreps in high order group. ngamma(self: psi4.core.CorrelationTable, arg0: int) → int¶; Returns the number of irreps in the low order group that an irrep from the high order group can be reduced to. subdegen(self: psi4.core.CorrelationTable, arg0: int) → int¶; Returns the degeneracy of the subgroup irrep. subgroup(self: psi4.core.CorrelationTable) → psi4.core.PointGroup¶; Returns lower order pointgroup. subn(self: psi4.core.CorrelationTable) → int¶; Returns number of irreps in subgroup. table of contents. CorrelationTable; CorrelationTable; CorrelationTable.degen(); CorrelationTable.group(); CorrelationTable.n(); CorrelationTable.ngamma(); CorrelationTable.subdegen(); CorrelationTable.subgroup(); CorrelationTable.subn(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.9.1;  · . PSI4. PSI4 API: Linking C++ and Python; CorrelationTable. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 08 February 2024 09:32PM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/api/psi4.core.CorrelationTable.html:2120,update,updated,2120,psi4manual/1.9.x/api/psi4.core.CorrelationTable.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/api/psi4.core.CorrelationTable.html,1,['update'],['updated']
Deployability,"set psi4meta for nightly operation. Post-Release (e.g., v1.3.1)¶. Assemble postrelease changes; Tweak Conda for postrelease; Do final pass before release tag; Tag postrelease; Build Conda Psi4 stack at specific commit; Publish to main conda label; Build Psi4conda set; Generate download page for psicode.org; Collect documentation snapshot; Publish GitHub postrelease; Publish psicode release; Finalize release; Reset psi4meta for nightly operation. Update copyright year¶. cd ~/path/to/psi4; Primary target is licenses. grep -rl ""(c) 2007-2017"" * | xargs sed -i '' ""s/(c) 2007-2017/(c) 2007-2018/g""; On Linux, drop the '' in above command; Need to do psi4/ and docs/ dirs. Also, license in these files. tests/runtest.py; README.md; tests/psitest.pl. Also, in content of https://github.com/psi4/psi4/blob/master/doc/sphinxman/source/conf.py.in#L118. Update samples¶. Run make sphinxman at least once by hand; Check in resulting psifiles.py and all the updated and new samples/ files and dirs; Make a lone PR and warn reviewers not to read it, since autogenerated. Collect new authors¶. Survey contributions to current Milestone. Add new contribs and PR lists to release notes GitHub issue; Figure out any new “Additional Contributors” authors since last release; Edit psi4/header.py accordingly, make PR; Get permission of new authors and their particulars for codemeta.json; Invite any contributors with at least 3 PRs to join GitHub Organization. Anticipate next release¶. Bump version in codemeta.json, https://github.com/psi4/psi4/blob/master/codemeta.json#L9; Add to branch list in azure-pipelines.yml, psi4/azure-pipelines.yml. Build Conda ecosystem stack¶; By “ecosystem stack”, mean packages that are upstream, downstream, required, and optional for a fully featured Psi4 build and which we can’t get from “defaults” or “conda-forge” channels. Main directions are in [cbcy](https://github.com/psi4/psi4meta/blob/master/conda-recipes/conda_build_config.yaml) and [poodle](https://github.com/ps",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/manage_release-1.html:1775,update,updated,1775,psi4manual/1.5.0/manage_release-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/manage_release-1.html,2,['update'],['updated']
Deployability,"set up through the PSI_SCRATCH environment variable:; # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. See also the more general scratch documentation. How do I retain specific Psi4 scratch files¶; You can set up a specific path for PSI4 scratch file and keep them; for later use through the psi4_io handler. How to use Psi4 within a PBS queue¶; You will usually need to set up a PBS job script that is setting all; necessary environment variables, making sure the scratch directories are; set up, and invokes the executable. An example PBS script; is provided in the manual, but make sure to also consult your own PBS; documentation for appropriate setup. How to update and rebuild Psi4¶; Obtain code updates as appropriate from Binary Installer,; Clone from GitHub Repository, or Fork from GitHub Repository. Move into; objdir and reissue make, whereupon CMake may reconfigure but; will only rebuild objects and libraries depending on changed files. It is; scarcely ever necessary for the user to reinvoke cmake to update; objdir. How to run a minute’s worth of tests¶; When you want to do a very minimal test of the build and have; CTest installed, the following command can be useful.; 1>>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through:; 1>>> make pytest. How to run a subset of tests¶; CTest allows flexibly partitioned running of the test suite. In; the examples below, testname are regex of test names,; and testlabel are regex of labels (e.g., cc, mints,; libefp defined [here, for example]. Run tests in parallel with -j flag. For maximum parallelism: ctest -j`getconf _NPROCESSORS_ONLN`; Run full test suite: ctest; Run about a third of the tests in ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/build_planning-1.html:45045,update,update,45045,psi4manual/1.2.1/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html,8,['update'],"['update', 'updates']"
Deployability,"set up through the PSI_SCRATCH environment variable:; # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. See also the more general scratch documentation. How do I retain specific Psi4 scratch files¶; You can set up a specific path for PSI4 scratch file and keep them; for later use through the psi4_io handler. How to use Psi4 within a PBS queue¶; You will usually need to set up a PBS job script that is setting all; necessary environment variables, making sure the scratch directories are; set up, and invokes the executable. An example PBS script; is provided in the manual, but make sure to also consult your own PBS; documentation for appropriate setup. How to update and rebuild Psi4¶; Obtain code updates as appropriate from Binary Installer,; Clone from GitHub Repository, or Fork from GitHub Repository. Move into; objdir and reissue make, whereupon CMake may reconfigure but; will only rebuild objects and libraries depending on changed files. It is; scarcely ever necessary for the user to reinvoke cmake to update; objdir. How to run a minute’s worth of tests¶; When you want to do a very minimal test of the build and have; CTest installed, the following command can be useful.; 1>>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through:; 1>>> make pytest. How to run a subset of tests¶; CTest allows flexibly partitioned running of the test suite. In; the examples below, testname are regex of test names,; and testlabel are regex of labels (e.g., cc, mints,; libefp). Run tests in parallel with -j flag. For maximum parallelism: ctest -j`getconf _NPROCESSORS_ONLN`; Run full test suite: ctest; Run about a third of the tests in 10–20 minutes, the so-calle",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/build_planning-1.html:38665,update,update,38665,psi4manual/1.1.0/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/build_planning-1.html,4,['update'],"['update', 'updates']"
Deployability,"setD(self.Da); self.da = fitter.fit(); self.da.scale(2.0). [docs] def populateExtern(self, extern):; # Electronic Part; extern.addBasis(self.ribasis, self.da); # Nuclear Part; for A in range(0, self.molecule.natom()):; extern.addCharge(self.molecule.Z(A), self.molecule.x(A), self.molecule.y(A), self.molecule.z(A)). [docs]class QMMM(object):. def __init__(self):; self.charges = []; self.diffuses = []; self.extern = PsiMod.ExternalPotential(). [docs] def addDiffuse(self, diffuse):; """"""Function to add a diffuse charge field *diffuse*.""""""; self.diffuses.append(diffuse). [docs] def addChargeBohr(self, Q, x, y, z):; """"""Function to add a point charge of magnitude *Q* at; position (*x*, *y*, *z*) Bohr. """"""; self.charges.append([Q, x, y, z]). [docs] def addChargeAngstrom(self, Q, x, y, z):; """"""Function to add a point charge of magnitude *Q* at; position (*x*, *y*, *z*) Angstroms. """"""; self.charges.append([Q, x / physconst.psi_bohr2angstroms, y / physconst.psi_bohr2angstroms, z / physconst.psi_bohr2angstroms]). def __str__(self):. s = ' ==> QMMM <==\n\n'. s = s + ' => Charges (a.u.) <=\n\n'; s = s + ' %11s %11s %11s %11s\n' % ('Z', 'x', 'y', 'z'); for k in range(0, len(self.charges)):; s = s + ' %11.7f %11.3E %11.3E %11.3E\n' % (self.charges[k][0], self.charges[k][1], self.charges[k][2], self.charges[k][3]); s = s + '\n'. s = s + ' => Diffuses <=\n\n'. for k in range(0, len(self.diffuses)):; s = s + str(self.diffuses[k]). return s. [docs] def populateExtern(self):; """"""Function to define a charge field external to the; molecule through point and diffuse charges. """"""; # Charges; for charge in self.charges:; self.extern.addCharge(charge[0], charge[1], charge[2], charge[3]); # Diffuses; for diffuse in self.diffuses:; diffuse.populateExtern(self.extern). Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules |; PSI4 [beta2] » ; Module code ». © Copyright 2012, Psi4 Project.; Last updated on Aug 25, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/_modules/qmmm.html:4291,update,updated,4291,psi4manual/4.0b2/_modules/qmmm.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/_modules/qmmm.html,1,['update'],['updated']
Deployability,"set_energy(self: psi4.core.Wavefunction, arg0: float) → None; Sets the Wavefunction’s energy. set_external_potential(self: psi4.core.Wavefunction, arg0: psi4.core.ExternalPotential) → None; Sets the requested external potential. set_frequencies(val). set_gradient(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None; Sets the Wavefunction’s gradient. set_hessian(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None; Sets the Wavefunction’s Hessian. set_legacy_frequencies(self: psi4.core.Wavefunction, arg0: psi4.core.Vector) → None; Sets the frequencies of the Hessian. set_name(self: psi4.core.Wavefunction, arg0: str) → None; Sets the level of theory this wavefunction corresponds to. set_print(self: psi4.core.Wavefunction, arg0: int) → None; Sets the print level of the Wavefunction. set_reference_wavefunction(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None; docstring. set_scalar_variable(self: psi4.core.Wavefunction, arg0: str, arg1: float) → None; Sets the requested (case-insensitive) double QC variable. set_variable(key, val). shallow_copy(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None; Copies the pointers to the internal data. sobasisset(self: psi4.core.Wavefunction) → psi4.core.SOBasisSet; Returns the symmetry orbitals basis. soccpi(self: psi4.core.Wavefunction) → psi4.core.Dimension; Returns the number of singly occupied orbitals per irrep. to_file(filename=None); Converts a Wavefunction object to a base class. Parameters:; wfn (Wavefunction) – A Wavefunction or inherited class; filename (None, optional) – An optional filename to write the data to. Returns:A dictionary and NumPy representation of the Wavefunction. Return type:dict. variable(key). variables(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/api/psi4.core.wavefunction.html:27672,update,updated,27672,psi4manual/1.3.2/api/psi4.core.wavefunction.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.wavefunction.html,1,['update'],['updated']
Deployability,"setenv PSIPATH /home/user/psiadditions:/home/user/gbs. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSIPATH=/home/user/psiadditions:/home/user/gbs. PYTHONPATH¶; Path in which the Python interpreter looks for modules to import. For; PSI4, these are generally plugins or databases. Note; While once configuring PSI4 through PSIPATH was preferred; to modifying this environment variable, now PYTHONPATH is preferred for; Python moduels to accommodate QCEngine. Modification of PYTHONPATH can be done in three ways, equivalently. Normal Linux shell commands.; # csh, tcsh: add to shell or ~/.tcshrc file; setenv PYTHONPATH /home/user/psiadditions:$PYTHONPATH. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PYTHONPATH=/home/user/psiadditions:$PYTHONPATH. Place the path in the ~/.psi4rc file so that it is available for; every PSI4 instance.; sys.path.insert(0, '/home/user/psiadditions'). Place the path in the input file, either absolute or relative.; sys.path.insert(0, '../../psiadditions'); sys.path.insert(0, '/home/user/psiadditions'). PSIDATADIR¶; Path in which the PSI4 executable looks for its non-compiled; dependencies (i.e., basis sets, databases, quadratures, etc.).; This path is always known by the PSI4 program or shared library,; so this variable is relevant primarily to developers wanting a; non-standard location. Value should be set; to directory containing driver, basis, etc. directories, generally; ending in share/psi4. table of contents. Installation and Runtime Configuration; Scratch Files; Elementary Restart; Saving the Wavefunction; ~/.psi4rc File; Threading; PBS job file; Command Line Options; Environment Variables. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Installation and Runtime Configuration. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/external-1.html:24744,update,updated,24744,psi4manual/1.4.0/external-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/external-1.html,2,['update'],['updated']
Deployability,"setenv PSIPATH /home/user/psiadditions:/home/user/gbs. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSIPATH=/home/user/psiadditions:/home/user/gbs. PYTHONPATH¶; Path in which the Python interpreter looks for modules to import. For; PSI4, these are generally plugins or databases. Note; While once configuring PSI4 through PSIPATH was preferred; to modifying this environment variable, now PYTHONPATH is preferred for; Python moduels to accommodate QCEngine. Modification of PYTHONPATH can be done in three ways, equivalently. Normal Linux shell commands.; # csh, tcsh: add to shell or ~/.tcshrc file; setenv PYTHONPATH /home/user/psiadditions:$PYTHONPATH. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PYTHONPATH=/home/user/psiadditions:$PYTHONPATH. Place the path in the ~/.psi4rc file so that it is available for; every PSI4 instance.; sys.path.insert(0, '/home/user/psiadditions'). Place the path in the input file, either absolute or relative.; sys.path.insert(0, '../../psiadditions'); sys.path.insert(0, '/home/user/psiadditions'). PSIDATADIR¶; Path in which the PSI4 executable looks for its non-compiled; dependencies (i.e., basis sets, databases, quadratures, etc.).; This path is always known by the PSI4 program or shared library,; so this variable is relevant primarily to developers wanting a; non-standard location. Value should be set; to directory containing driver, basis, etc. directories, generally; ending in share/psi4. table of contents. Installation and Runtime Configuration; Scratch Files; Elementary Restart; Saving the Wavefunction; ~/.psi4rc File; Threading; PBS job file; Command Line Options; Environment Variables. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Installation and Runtime Configuration. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/external-1.html:24744,update,updated,24744,psi4manual/1.5.0/external-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/external-1.html,2,['update'],['updated']
Deployability,"sg; self.stats = stats. # Dftd3Error ceased to be used by v1.4. Class removed by v1.7; # class Dftd3Error(PsiException):. [docs]class PastureRequiredError(PsiException):; """"""Error called when the specified value of *option* requires some; module(s) from Psi4Pasture, but could not be imported.; """"""; msg_tmpl = """"""Psi4Pasture module(s) [{modlist}] are required to change the default value of {opt}. """"""; install_instructions = """"""; Note: Psi4Pasture is currently in an experimental state with no reliable install; procedure yet, but this is what it would look like. To Build Psi4Pasture and install the required modules within your current; Psi4 installation. >>> # clone the pasture repo; >>> git clone https://github.com/psi4/psi4pasture.git. >>> cmake -S. -Bobjdir -Dpsi4_DIR=$PSI4_INSTALL_PREFIX/share/cmake/psi4 {module_args}; >>> # $PSI4_INSTALL_PREFIX is the $CMAKE_INSTALL_PREFIX for the psi4; >>> # install you want to install pasture to. >>> # build + install install location is detected automatically; >>> cd objdir; >>> make && make install. See https://github.com/psi4/psi4pasture for more details. Or to install using psi4's own build system add; {module_args}; to cmake command line when building psi4.; """"""; pasture_required_modules = {""RUN_CCTRANSORT"": [""ccsort"", ""transqt2""]}. def __init__(self, option):; mods_str = "", "".join([m for m in PastureRequiredError.pasture_required_modules[option]]); msg = PastureRequiredError.msg_tmpl.format(opt=option, modlist=mods_str); PsiException.__init__(self, msg); module_cmake_args = "" "".join(; [""-DENABLE_{}=ON"".format(module) for module in PastureRequiredError.pasture_required_modules[option]]); msg += PastureRequiredError.install_instructions.format(module_args=module_cmake_args); self.message = '\nPsiException: {}\n\n'.format(msg); core.print_out(self.message). [docs]def sanitize_method(name: str) -> str:; """"""Replace characters in method name so that suitable for function name or Sphinx table anchor; (both as-is) or HTML table lin",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/p4util/exceptions.html:13710,install,install,13710,psi4manual/1.7.x/_modules/psi4/driver/p4util/exceptions.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/p4util/exceptions.html,3,['install'],['install']
Deployability,"shape[0],; do_shift=do_shift,; do_rotate=do_rotate,; deflection=deflection,; do_resort=do_resort,; do_mirror=do_mirror); cgeom, cmass, celem, celez, cuniq = perturbation.align_system(rgeom, rmass, relem, relez, runiq, reverse=True); cmol = Molecule.from_arrays(; geom=cgeom,; mass=cmass,; elem=celem,; elez=celez,; units='Bohr',; molecular_charge=ref_mol.molecular_charge(),; molecular_multiplicity=ref_mol.multiplicity(),; fix_com=True,; fix_orientation=True). rmsd = np.linalg.norm(cgeom - rgeom) * qcel.constants.bohr2angstroms / np.sqrt(nat); if verbose >= 1:; print('Start RMSD = {:8.4f} [A]'.format(rmsd)). rmsd, solution, amol = cmol.B787(; ref_mol,; do_plot=do_plot,; atoms_map=(not do_resort),; run_resorting=run_resorting,; mols_align=True,; run_to_completion=run_to_completion,; run_mirror=do_mirror,; verbose=verbose). compare_integers(; True, np.allclose(solution.shift, perturbation.shift, atol=6), 'shifts equiv', verbose=verbose - 1); if not do_resort:; compare_integers(; True,; np.allclose(solution.rotation.T, perturbation.rotation),; 'rotations transpose',; verbose=verbose - 1); if solution.mirror:; compare_integers(True, do_mirror, 'mirror allowed', verbose=verbose - 1). def set_fragment_pattern(self, frl, frt, frc, frm):; """"""Set fragment member data through public method analogous to psi4.core.Molecule"""""". if not (len(frl) == len(frt) == len(frc) == len(frm)):; raise ValidationError(""""""Molecule::set_fragment_pattern: fragment arguments not of same length.""""""). self.fragments = frl; self.fragment_types = frt; self.fragment_charges = frc; self.fragment_multiplicities = frm. # Attach methods to qcdb.Molecule class; from .parker import xyz2mol as _parker_xyz2mol_yo; Molecule.format_molecule_for_mol = _parker_xyz2mol_yo. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .  · ; 1.6;  · . PSI4. Module code; psi4.driver.qcdb.molecule. © Copyright 2022, The Psi4 Project.; Last updated on Thursday, 19 May 2022 08:57PM.; Created using Sphinx 4.5.0.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/qcdb/molecule.html:67668,update,updated,67668,psi4manual/1.6.x/_modules/psi4/driver/qcdb/molecule.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/qcdb/molecule.html,1,['update'],['updated']
Deployability,"shift=do_shift,; do_rotate=do_rotate,; deflection=deflection,; do_resort=do_resort,; do_mirror=do_mirror); cgeom, cmass, celem, celez, cuniq = perturbation.align_system(rgeom, rmass, relem, relez, runiq, reverse=True); cmol = Molecule.from_arrays(; geom=cgeom,; mass=cmass,; elem=celem,; elez=celez,; units='Bohr',; molecular_charge=ref_mol.molecular_charge(),; molecular_multiplicity=ref_mol.multiplicity(),; fix_com=True,; fix_orientation=True). rmsd = np.linalg.norm(cgeom - rgeom) * constants.bohr2angstroms / np.sqrt(nat); if verbose >= 1:; print('Start RMSD = {:8.4f} [A]'.format(rmsd)). rmsd, solution, amol = cmol.B787(; ref_mol,; do_plot=do_plot,; atoms_map=(not do_resort),; run_resorting=run_resorting,; mols_align=True,; run_to_completion=run_to_completion,; run_mirror=do_mirror,; verbose=verbose). compare_integers(; True, np.allclose(solution.shift, perturbation.shift, atol=6), 'shifts equiv', verbose=verbose - 1); if not do_resort:; compare_integers(; True,; np.allclose(solution.rotation.T, perturbation.rotation),; 'rotations transpose',; verbose=verbose - 1); if solution.mirror:; compare_integers(True, do_mirror, 'mirror allowed', verbose=verbose - 1). def set_fragment_pattern(self, frl, frt, frc, frm):; """"""Set fragment member data through public method analogous to psi4.core.Molecule"""""". if not (len(frl) == len(frt) == len(frc) == len(frm)):; raise ValidationError(""""""Molecule::set_fragment_pattern: fragment arguments not of same length.""""""). self.fragments = frl; self.fragment_types = frt; self.fragment_charges = frc; self.fragment_multiplicities = frm. # Attach methods to qcdb.Molecule class; from .parker import xyz2mol as _parker_xyz2mol_yo; Molecule.format_molecule_for_mol = _parker_xyz2mol_yo. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .  · ; 1.10a1.dev61;  · . PSI4. Module code; psi4.driver.qcdb.molecule. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/_modules/psi4/driver/qcdb/molecule.html:67765,update,updated,67765,psi4manual/master/_modules/psi4/driver/qcdb/molecule.html,https://psicode.org,https://psicode.org/psi4manual/master/_modules/psi4/driver/qcdb/molecule.html,1,['update'],['updated']
Deployability,"shold for augmenting the vector subspace in stability check. Type: conv double; Default: 0.1. STABILITY_CHECK¶. Performs stability analysis of the DCFT energy. Type: boolean; Default: false. STABILITY_CONVERGENCE¶. Controls the convergence of the Davidson’s diagonalization in stability check. Type: conv double; Default: 1e-4. STABILITY_MAX_SPACE_SIZE¶. The maximum size of the subspace for the stability check. The program will terminate if this parameter is exceeded and the convergence (STABILITY_CONVERGENCE) is not satisfied. Type: integer; Default: 200. STABILITY_N_EIGENVALUES¶. The number of Hessian eigenvalues computed during the stability check. Type: integer; Default: 3. STABILITY_N_GUESS_VECTORS¶. The number of guess vectors used for Davidson’s diagonalization in stability check. Type: integer; Default: 20. TAU_SQUARED¶. Controls whether to compute the DCFT energy with the Tau^2 correction to Tau. Type: boolean; Default: false. TPDM¶. Controls whether to compute unrelaxed two-particle density matrix at the end of the energy computation. Type: boolean; Default: false. Table Of Contents. DCFT; General; ALGORITHM; AO_BASIS; DAMPING_PERCENTAGE; DIIS_MAX_VECS; DIIS_MIN_VECS; DIIS_START_CONVERGENCE; LAMBDA_MAXITER; MAXITER; RESPONSE_ALGORITHM; R_CONVERGENCE; SCF_MAXITER; TIKHONOW_OMEGA. Expert; CACHELEVEL; DCFT_GUESS; IGNORE_TAU; INTS_TOLERANCE; LOCK_OCC; MO_RELAX; QC_COUPLING; RELAX_GUESS_ORBITALS; RELAX_TAU; STABILITY_ADD_VECTORS; STABILITY_AUGMENT_SPACE_TOL; STABILITY_CHECK; STABILITY_CONVERGENCE; STABILITY_MAX_SPACE_SIZE; STABILITY_N_EIGENVALUES; STABILITY_N_GUESS_VECTORS; TAU_SQUARED; TPDM. Previous topic; TDHF_MEM_SAFETY_FACTOR; Next topic; ALGORITHM; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Appendices »; Keywords by Module ». © Copyright 2012, The Psi4 Project.; Last updated on Oct 16, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/autodir_options_c/module__dcft-1.html:6922,update,updated,6922,psi4manual/4.0b3/autodir_options_c/module__dcft-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodir_options_c/module__dcft-1.html,2,['update'],['updated']
Deployability,"si4 calculations and are thus suited to an embarrassingly; parallel mode of operation. In Psithon, these have been dubbed sow/reap; procedures and have the following general structure. Prepare an input file, simply adding mode='sow' to the; argument list of an available Python function. Run this quick job to; produce input files for lengthier calculations.; According to the instructions in the output file of the above step,; run the generated input files in any order on any variety of computers; and architectures. This is the time-intensive portion of the; calculation.; The ‘sow’ stage also produces a master input file (with a; mode='reap' directive). When all the jobs in the above step are; completed, place their output files in the same location as the; master input, and run this last, quick job to collect the results. Sow/reap procedures are governed by the mode keyword, choices being; 'continuous', 'sow', and 'reap'. Only 'sow' is likely to; be used by the user, as 'continuous' is always the default, and; input files with 'reap' are autogenerated.; Embarrassingly parallel algorithm available at present for:; Database, database(); finite difference operation of Geometry Optimization, optimize() and gradient(); finite difference of energies of Harmonic Vibrational Analysis, frequency() and hessian(); finite difference of gradients of Harmonic Vibrational Analysis, frequency() and hessian(). Caution; Some features are not yet implemented. Buy a developer a coffee. Local options (e.g., set scf e_convergence 9) will not get transmitted to the child jobs.; Array options (e.g., set states_per_irrep [2, 1]) will not get transmitted to the child jobs.; Function intercalls (e.g., db(opt())) are not tested with sow/reap procedures. Previous topic; Function Intercalls; Next topic; cubeprop() Generation of cube files. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/sowreap-1.html:1288,continuous,continuous,1288,psi4manual/1.0.0/sowreap-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/sowreap-1.html,2,['continuous'],['continuous']
Deployability,"si4 header to the ASCII output file. (Only applicable if ``execute=True``.) By default,; writes if file is truncated (``append=False``) but not if appended.; inherit_loglevel; If true, do not set loglevel even to default value. Instead, allow level to be inherited from existing logger. Returns; -------; ~pathlib.Path; ``Path(ofile)``. Notes; -----; This :py:func:`psi4.set_output_file` command calls :py:func:`psi4.core.set_output_file` and should be used in; preference to it as this additionally sets up logging. """"""; out = Path(ofile); log = out.with_suffix("".log""). # Get the custom logger; import logging. from psi4 import logger; if not inherit_loglevel:; logger.setLevel(loglevel). # Create formatters; # * detailed: example: 2019-11-20:01:13:46,811 DEBUG [psi4.driver.task_base:156]; f_format_detailed = logging.Formatter(""%(asctime)s,%(msecs)d %(levelname)-8s [%(name)s:%(lineno)d] %(message)s"", datefmt=""%Y-%m-%d:%H:%M:%S""); # * light: example: 2019-11-20:10:45:21 FINDIFREC CLASS INIT DATA; f_format_light = logging.Formatter(""%(asctime)s %(message)s"", datefmt=""%Y-%m-%d:%H:%M:%S""). # Create handlers, add formatters to handlers, and add handlers to logger (StreamHandler() also available); filemode = ""a"" if append else ""w""; f_handler = logging.FileHandler(log, filemode); f_handler.setLevel(logging.DEBUG); f_handler.setFormatter(f_format_detailed). if execute:; core.set_output_file(str(out), append); if print_header is True or (print_header is None and not append):; _print_header(); # Warning: baseFilename is not part of the documented API for the logging module and could change.; filenames = [handle.baseFilename for handle in logger.handlers]; if not f_handler.baseFilename in filenames:; logger.addHandler(f_handler); return out. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .  · ; 1.9.1;  · . PSI4. Module code; psi4.extras. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 08 February 2024 09:32PM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/_modules/psi4/extras.html:10308,update,updated,10308,psi4manual/1.9.x/_modules/psi4/extras.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/_modules/psi4/extras.html,1,['update'],['updated']
Deployability,"si4 header to the ASCII output file. (Only applicable if ``execute=True``.) By default,; writes if file is truncated (``append=False``) but not if appended.; inherit_loglevel; If true, do not set loglevel even to default value. Instead, allow level to be inherited from existing logger. Returns; -------; ~pathlib.Path; ``Path(ofile)``. Notes; -----; This :py:func:`psi4.set_output_file` command calls :py:func:`psi4.core.set_output_file` and should be used in; preference to it as this additionally sets up logging. """"""; out = Path(ofile); log = out.with_suffix("".log""). # Get the custom logger; import logging; from psi4 import logger; if not inherit_loglevel:; logger.setLevel(loglevel). # Create formatters; # * detailed: example: 2019-11-20:01:13:46,811 DEBUG [psi4.driver.task_base:156]; f_format_detailed = logging.Formatter(""%(asctime)s,%(msecs)d %(levelname)-8s [%(name)s:%(lineno)d] %(message)s"", datefmt=""%Y-%m-%d:%H:%M:%S""); # * light: example: 2019-11-20:10:45:21 FINDIFREC CLASS INIT DATA; f_format_light = logging.Formatter(""%(asctime)s %(message)s"", datefmt=""%Y-%m-%d:%H:%M:%S""). # Create handlers, add formatters to handlers, and add handlers to logger (StreamHandler() also available); filemode = ""a"" if append else ""w""; f_handler = logging.FileHandler(log, filemode); f_handler.setLevel(logging.DEBUG); f_handler.setFormatter(f_format_detailed). if execute:; core.set_output_file(str(out), append); if print_header is True or (print_header is None and not append):; _print_header(); # Warning: baseFilename is not part of the documented API for the logging module and could change.; filenames = [handle.baseFilename for handle in logger.handlers]; if not f_handler.baseFilename in filenames:; logger.addHandler(f_handler); return out. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .  · ; 1.8.2;  · . PSI4. Module code; psi4.extras. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:04AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/_modules/psi4/extras.html:10257,update,updated,10257,psi4manual/1.8.x/_modules/psi4/extras.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/_modules/psi4/extras.html,1,['update'],['updated']
Deployability,"si4.core.BasisSet, arg0: str, arg1: psi4.core.Molecule) → int; Returns the number of orbital (non-ECP) frozen core electrons. For a given molecule and |globals__freeze_core|, (n_ecp_core()/2 + n_frozen_core()) = constant. name(self: psi4.core.BasisSet) → str; Callback handle, may represent string or function. nao(self: psi4.core.BasisSet) → int; Returns number of atomic orbitals (Cartesian). nbf(self: psi4.core.BasisSet) → int; Returns number of basis functions (Cartesian or spherical depending on has_puream). nprimitive(self: psi4.core.BasisSet) → int; Returns total number of primitives in all contractions. nshell(self: psi4.core.BasisSet) → int; Returns number of shells. nshell_on_center(self: psi4.core.BasisSet, i: int) → int; Return the number of shells on a given center. print_detail_out(self: psi4.core.BasisSet) → None; Prints detailed basis set info to outfile. print_out(self: psi4.core.BasisSet) → None; Prints basis set info to outfile. shell(*args, **kwargs); Overloaded function. shell(self: psi4.core.BasisSet, si: int) -> psi4.core.GaussianShell. Return the si’th Gaussian shell. shell(self: psi4.core.BasisSet, center: int, si: int) -> psi4.core.GaussianShell. Return the si’th Gaussian shell on center. shell_to_ao_function(self: psi4.core.BasisSet, i: int) → int; Return the function number for the first function for the i’th shell. shell_to_basis_function(self: psi4.core.BasisSet, i: int) → int; Given a shell return its first basis function. shell_to_center(self: psi4.core.BasisSet, i: int) → int; Return the atomic center for the i’th shell. zero_ao_basis_set() → psi4.core.BasisSet; Returns a BasisSet object that actually has a single s-function at the origin with an exponent of 0.0 and contraction of 1.0. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/api/psi4.core.basisset.html:9892,update,updated,9892,psi4manual/1.3.2/api/psi4.core.basisset.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.basisset.html,1,['update'],['updated']
Deployability,"si4.core.FISAPT method. INDUCED_CONVERGENCE (PE). induction_operator() psi4.core.MintsHelper method. inertia_tensor() psi4.core.Molecule method. init() psi4.core.Dimension method. init_io_files() psi4.core.CIVector method. initialize() in module psi4.core. psi4.core.CUHF method. psi4.core.DFHelper method. psi4.core.HF method. psi4.core.IntegralTransform method. psi4.core.JK method. psi4.core.MemDFJK method. psi4.core.RHF method. psi4.core.ROHF method. psi4.core.UHF method. psi4.core.VBase method. initialize_gtfock_jk() psi4.core.CUHF method. psi4.core.HF method. psi4.core.RHF method. psi4.core.ROHF method. psi4.core.UHF method. initialize_jk() psi4.core.CUHF method. psi4.core.HF method. psi4.core.RHF method. psi4.core.ROHF method. psi4.core.UHF method. initialized_diis_manager_ psi4.core.CUHF attribute. psi4.core.HF attribute. psi4.core.RHF attribute. psi4.core.ROHF attribute. psi4.core.UHF attribute. input_units_to_au() psi4.core.Molecule method. insert() psi4.core.BSVec method. installing. INTCOS_GENERATE_EXIT (OPTKING). integral() psi4.core.MintsHelper method. psi4.core.OrbitalSpace method. INTEGRAL_CUTOFF (DFOCC). INTEGRAL_PACKAGE (GLOBALS). IntegralFactory class in psi4.core. integrals, [1]. integrals() psi4.core.MintsHelper method. integrals_erf() psi4.core.MintsHelper method. integrals_erfc() psi4.core.MintsHelper method. IntegralTransform class in psi4.core. INTERFRAG_DIST_INV (OPTKING). INTERFRAG_HESS (OPTKING). INTERFRAG_MODE (OPTKING). INTERFRAG_STEP_LIMIT (OPTKING). INTERFRAGMENT_CONNECT (OPTKING). INTERNAL_ROTATIONS (MCSCF). INTRAFRAG_HESS (OPTKING). INTRAFRAG_STEP_LIMIT (OPTKING). INTRAFRAG_STEP_LIMIT_MAX (OPTKING). INTRAFRAG_STEP_LIMIT_MIN (OPTKING). INTS_TOLERANCE (CCDENSITY). (DCT). (DFMP2). (FISAPT). (MRCC). (SAPT). (SCF). IntVector class in psi4.core. invert() psi4.core.Matrix method. IO class in psi4.core. IOManager class in psi4.core. IP_POLES (OCC). ipi_broker() in module psi4.driver. IRC. ; geometry optimization. IRC_DIRECTION (OPTKING). IRC_S",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/genindex-1.html:77185,install,installing,77185,psi4manual/1.4.0/genindex-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/genindex-1.html,2,['install'],['installing']
Deployability,"si4.core.Functional, arg0: bool) → None¶; docstring. set_meta_cutoff(self: psi4.core.Functional, arg0: float) → None¶; docstring. set_name(self: psi4.core.Functional, arg0: str) → None¶; docstring. set_omega(self: psi4.core.Functional, arg0: float) → None¶; docstring. set_parameter(self: psi4.core.Functional, arg0: str, arg1: float) → None¶; docstring. alpha(self: psi4.core.Functional) → float; docstring. build_base(alias: str) → psi4.core.Functional; docstring. citation(self: psi4.core.Functional) → str; docstring. description(self: psi4.core.Functional) → str; docstring. is_gga(self: psi4.core.Functional) → bool; docstring. is_lrc(self: psi4.core.Functional) → bool; docstring. is_meta(self: psi4.core.Functional) → bool; docstring. lsda_cutoff(self: psi4.core.Functional) → float; docstring. meta_cutoff(self: psi4.core.Functional) → float; docstring. name(self: psi4.core.Functional) → str; docstring. omega(self: psi4.core.Functional) → float; docstring. print_detail(self: psi4.core.SuperFunctional, arg0: int) → None; docstring. print_out(self: psi4.core.Functional) → None; docstring. set_alpha(self: psi4.core.Functional, arg0: float) → None; docstring. set_citation(self: psi4.core.Functional, arg0: str) → None; docstring. set_description(self: psi4.core.Functional, arg0: str) → None; docstring. set_gga(self: psi4.core.Functional, arg0: bool) → None; docstring. set_lsda_cutoff(self: psi4.core.Functional, arg0: float) → None; docstring. set_meta(self: psi4.core.Functional, arg0: bool) → None; docstring. set_meta_cutoff(self: psi4.core.Functional, arg0: float) → None; docstring. set_name(self: psi4.core.Functional, arg0: str) → None; docstring. set_omega(self: psi4.core.Functional, arg0: float) → None; docstring. set_parameter(self: psi4.core.Functional, arg0: str, arg1: float) → None; docstring. Navigation. Index. modules    .    .  · ; 1.1;  · . PSI4. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/api/psi4.core.functional.html:4513,update,updated,4513,psi4manual/1.1.0/api/psi4.core.functional.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/api/psi4.core.functional.html,1,['update'],['updated']
Deployability,"si4.core.SOMCSCF, arg0: psi4.core.Matrix) → psi4.core.Matrix¶. compute_Hk(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix) → psi4.core.Matrix¶. compute_Q(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix) → psi4.core.Matrix¶. compute_Qk(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix, arg1: psi4.core.Matrix, arg2: psi4.core.Matrix) → psi4.core.Matrix¶. current_AFock(self: psi4.core.SOMCSCF) → psi4.core.Matrix¶. current_IFock(self: psi4.core.SOMCSCF) → psi4.core.Matrix¶. current_ci_energy(self: psi4.core.SOMCSCF) → float¶. current_docc_energy(self: psi4.core.SOMCSCF) → float¶. current_total_energy(self: psi4.core.SOMCSCF) → float¶. form_rotation_matrix(self: psi4.core.SOMCSCF, x: psi4.core.Matrix, order: int = 2) → psi4.core.Matrix¶. gradient(self: psi4.core.SOMCSCF) → psi4.core.Matrix¶. gradient_rms(self: psi4.core.SOMCSCF) → float¶. rhf_energy(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix) → float¶. solve(self: psi4.core.SOMCSCF, arg0: int, arg1: float, arg2: bool) → psi4.core.Matrix¶. update(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix, arg1: psi4.core.Matrix, arg2: psi4.core.Matrix, arg3: psi4.core.Matrix, arg4: psi4.core.Matrix) → None¶. zero_redundant(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix) → None¶. table of contents. SOMCSCF; SOMCSCF; SOMCSCF.Ck(); SOMCSCF.H_approx_diag(); SOMCSCF.approx_solve(); SOMCSCF.compute_AFock(); SOMCSCF.compute_Hk(); SOMCSCF.compute_Q(); SOMCSCF.compute_Qk(); SOMCSCF.current_AFock(); SOMCSCF.current_IFock(); SOMCSCF.current_ci_energy(); SOMCSCF.current_docc_energy(); SOMCSCF.current_total_energy(); SOMCSCF.form_rotation_matrix(); SOMCSCF.gradient(); SOMCSCF.gradient_rms(); SOMCSCF.rhf_energy(); SOMCSCF.solve(); SOMCSCF.update(); SOMCSCF.zero_redundant(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; SOMCSCF. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/api/psi4.core.SOMCSCF.html:1973,update,update,1973,psi4manual/1.8.x/api/psi4.core.SOMCSCF.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.SOMCSCF.html,3,['update'],"['update', 'updated']"
Deployability,"si4.core.SOMCSCF, arg0: psi4.core.Matrix) → psi4.core.Matrix¶. compute_Hk(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix) → psi4.core.Matrix¶. compute_Q(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix) → psi4.core.Matrix¶. compute_Qk(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix, arg1: psi4.core.Matrix, arg2: psi4.core.Matrix) → psi4.core.Matrix¶. current_AFock(self: psi4.core.SOMCSCF) → psi4.core.Matrix¶. current_IFock(self: psi4.core.SOMCSCF) → psi4.core.Matrix¶. current_ci_energy(self: psi4.core.SOMCSCF) → float¶. current_docc_energy(self: psi4.core.SOMCSCF) → float¶. current_total_energy(self: psi4.core.SOMCSCF) → float¶. form_rotation_matrix(self: psi4.core.SOMCSCF, x: psi4.core.Matrix, order: int = 2) → psi4.core.Matrix¶. gradient(self: psi4.core.SOMCSCF) → psi4.core.Matrix¶. gradient_rms(self: psi4.core.SOMCSCF) → float¶. rhf_energy(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix) → float¶. solve(self: psi4.core.SOMCSCF, arg0: int, arg1: float, arg2: bool) → psi4.core.Matrix¶. update(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix, arg1: psi4.core.Matrix, arg2: psi4.core.Matrix, arg3: psi4.core.Matrix, arg4: psi4.core.Matrix) → None¶. zero_redundant(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix) → None¶. table of contents. SOMCSCF; SOMCSCF; SOMCSCF.Ck(); SOMCSCF.H_approx_diag(); SOMCSCF.approx_solve(); SOMCSCF.compute_AFock(); SOMCSCF.compute_Hk(); SOMCSCF.compute_Q(); SOMCSCF.compute_Qk(); SOMCSCF.current_AFock(); SOMCSCF.current_IFock(); SOMCSCF.current_ci_energy(); SOMCSCF.current_docc_energy(); SOMCSCF.current_total_energy(); SOMCSCF.form_rotation_matrix(); SOMCSCF.gradient(); SOMCSCF.gradient_rms(); SOMCSCF.rhf_energy(); SOMCSCF.solve(); SOMCSCF.update(); SOMCSCF.zero_redundant(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.9.1;  · . PSI4. PSI4 API: Linking C++ and Python; SOMCSCF. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 08 February 2024 09:32PM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/api/psi4.core.SOMCSCF.html:1973,update,update,1973,psi4manual/1.9.x/api/psi4.core.SOMCSCF.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/api/psi4.core.SOMCSCF.html,3,['update'],"['update', 'updated']"
Deployability,"si4.core.SuperFunctional, arg0: int) → None; Sets the maximum number of points. set_name(self: psi4.core.SuperFunctional, arg0: str) → None; Sets the SuperFunctional name. set_vv10_b(self: psi4.core.SuperFunctional, arg0: float) → None; Sets the VV10 b parameter. set_vv10_c(self: psi4.core.SuperFunctional, arg0: float) → None; Sets the VV10 c parameter. set_x_alpha(self: psi4.core.SuperFunctional, arg0: float) → None; Sets the amount of exact global HF exchange. set_x_beta(self: psi4.core.SuperFunctional, arg0: float) → None; Sets the amount of exact HF exchange at long range. set_x_omega(self: psi4.core.SuperFunctional, arg0: float) → None; Sets the range-seperation exchange parameter. test_functional(self: psi4.core.SuperFunctional, arg0: psi4.core.Vector, arg1: psi4.core.Vector, arg2: psi4.core.Vector, arg3: psi4.core.Vector, arg4: psi4.core.Vector, arg5: psi4.core.Vector, arg6: psi4.core.Vector) → None; Quick testing capabilities. value(self: psi4.core.SuperFunctional, arg0: str) → psi4.core.Vector; Returns a given internal value. values(self: psi4.core.SuperFunctional) → Dict[str, psi4.core.Vector]; Return all internal values. vv10_b(self: psi4.core.SuperFunctional) → float; The VV10 b parameter. vv10_c(self: psi4.core.SuperFunctional) → float; The VV10 c parameter. x_alpha(self: psi4.core.SuperFunctional) → float; Amount of exact HF exchange. x_beta(self: psi4.core.SuperFunctional) → float; Amount of exact HF exchange. x_functional(self: psi4.core.SuperFunctional, arg0: str) → psi::Functional; Returns the desired X Functional. x_functionals(self: psi4.core.SuperFunctional) → List[psi::Functional]; Returns all X Functionals. x_omega(self: psi4.core.SuperFunctional) → float; Range-seperated exchange parameter. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 July 2018 04:21AM.; Created using Sphinx 1.7.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/api/psi4.core.superfunctional.html:15682,update,updated,15682,psi4manual/1.2.1/api/psi4.core.superfunctional.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/api/psi4.core.superfunctional.html,1,['update'],['updated']
Deployability,"si4.git; >>> cd psi4; # this is your {top-level-psi4-dir}. Build directions; Get Updates; # on branch master; >>> git pull origin master. Contribute Back; Contributions cannot be made directly to the main repository. Fork; instead.; To convert clone to fork, go to https://github.com/psi4/psi4, and; hit the Fork; button to store a PSI4 repository in your GitHub account.; >>> git remote rename origin upstream; >>> git remote add origin https://github.com/johndoe/psi4.git. Fork from GitHub Repository¶. Get Initially; Go to https://github.com/psi4/psi4, and hit the Fork button to store a; PSI4 repository in your GitHub account. Locally, proceed to clone:; # replace johndoe; # use https or ssh; >>> git clone https://github.com/johndoe/psi4.git; >>> cd psi4; # this is your {top-level-psi4-dir}. Set up a connection; between your forked repository and the parent repository.; >>> git remote add upstream https://github.com/psi4/psi4.git. Build directions; Get Updates; Locally, update your fork from the parent; repository and store on GitHub at your fork.; # on branch working_branch; >>> git pull --rebase upstream master; >>> git push origin working_branch. Remember: Working in the master branch of a fork is considered bad practice. Contribute Back; PSI4 contributions process here and; here.; Consider preparing your contribution in a branch; then issue a GitHub pull request. Tarball from GitHub Repository¶. Get Initially; Discouraged! From the PSI4 repository at https://github.com/psi4/psi4, hit the; “Clone or download” then “Download ZIP” button. Locally, unpack as; below.; >>> unzip psi4-master.zip; >>> cd psi4-master; # this is your {top-level-psi4-dir}. Build directions; Get Updates; Download new tarball and rebuild. Contribute Back; Not applicable as source not under git control. What is the suggested GitHub workflow¶. table of contents. Obtaining PSI4; How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}; Find-the-code Quiz; Binary Installer; Con",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/build_obtaining-1.html:4556,update,update,4556,psi4manual/1.4.0/build_obtaining-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/build_obtaining-1.html,9,['update'],['update']
Deployability,"si4/label/dev -c psi4. Activate environment and make the adjustments to PATH and; PSI_SCRATCH that it suggests at the end. Test with psi4; --test. Configuration for this set-up is summarized at; How to run Psi4 as executable or Python module from conda installation.; Details:. It is advised to place PSI4 into a conda; environment where its libraries can’t interfere with other programs; rather than the main; Anaconda or Miniconda environment. Hence the creation of the environment; above, but the environment name (p4env above) can be; substituted.; Only reason for psi4-rt package is to get the QC runtime; add-ons; could say any combination of dftd3 gcp v2rdm_casscf snsmp2 instead of psi4-rt;; or leave them out if you don’t want them.; Grab a Miniconda through curl -o Miniconda-latest.sh; ""https://repo.continuum.io/miniconda/Miniconda3-latest-[MacOSX|Linux]-x86_64.sh"",; selecting between Mac and Linux. How to update a Psi4 binary¶; A. Conda command to update an existing PSI4 conda installation to the; newest stable release (roughly annually).; >>> conda update psi4 -c psi4. # if psi4 channel in defaults (true for Psi4conda installers); >>> conda update psi4. B. Conda command to update an existing PSI4 conda installation to the; latest development head (roughly nightly).; >>> conda update psi4 -c psi4/label/dev. C. Conda command to install a very specific package, including version,; build string, and subchannel. The final -c psi4 represents any; additional channels or subchannels needed to locate all dependencies.; >>> conda install psi4=1.2a1.dev249+623ad64=py36_sse41_0 -c psi4/label/subchannel -c psi4. How to use conda to compile Psi4 faster and easier¶; # Linux # c. v1.2rc1 ###or Mac or Windows; # substitute x.x by 2.7|3.5|3.6 for alternate python versions; >>> conda create -n p4dev python=x.x psi4-dev -c psi4/label/dev -c psi4; >>> conda activate p4dev. >>> cd {top-level-psi4-dir}; >>> psi4-path-advisor --help; usage: psi4-path-advisor [-h] [--psi4-compile] [--disa",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/conda-1.html:6173,update,update,6173,psi4manual/1.2.1/conda-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/conda-1.html,6,"['install', 'release', 'update']","['installation', 'release', 'update']"
Deployability,"si4/label/dev -c psi4. Activate environment and make the adjustments to PATH and; PSI_SCRATCH that it suggests at the end. Test with psi4; --test. Configuration for this set-up is summarized at; How to run Psi4 as executable or Python module from conda installation.; Details:. It is advised to place PSI4 into a conda; environment where its libraries can’t interfere with other programs; rather than the main; Anaconda or Miniconda environment. Hence the creation of the environment; above, but the environment name (p4env above) can be; substituted.; Only reason for psi4-rt package is to get the QC runtime; add-ons; could say any combination of dftd3 gcp v2rdm_casscf snsmp2 instead of psi4-rt;; or leave them out if you don’t want them.; Grab a Miniconda through curl -o Miniconda-latest.sh; ""https://repo.continuum.io/miniconda/Miniconda3-latest-[MacOSX|Linux]-x86_64.sh"",; selecting between Mac and Linux. How to update a Psi4 binary¶; A. Conda command to update an existing PSI4 conda installation to the; newest stable release (roughly annually).; >>> conda update psi4 -c psi4. # if psi4 channel in defaults (true for Psi4conda installers); >>> conda update psi4. B. Conda command to update an existing PSI4 conda installation to the; latest development head (roughly nightly).; >>> conda update psi4 -c psi4/label/dev. C. Conda command to install a very specific package, including version,; build string, and subchannel. The final -c psi4 represents any; additional channels or subchannels needed to locate all dependencies.; >>> conda install psi4=1.2a1.dev249+623ad64=py36_sse41_0 -c psi4/label/subchannel -c psi4. How to use conda to compile Psi4 faster and easier¶; # Linux # c. v1.2rc1 ###or Mac or Windows; # substitute x.x by 3.5|3.6|3.7 for alternate python versions; >>> conda create -n p4dev python=x.x psi4-dev -c psi4/label/dev -c psi4; >>> conda activate p4dev. >>> cd {top-level-psi4-dir}; >>> psi4-path-advisor --help; usage: psi4-path-advisor [-h] [--psi4-compile] [--disa",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/conda-1.html:6173,update,update,6173,psi4manual/1.3.2/conda-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/conda-1.html,6,"['install', 'release', 'update']","['installation', 'release', 'update']"
Deployability,"si4; How to configure Python for building Psi4; What Python is Psi4 running; How to fix “undefined symbol: _Py_FalseStruct”; How to use gdb and lldb with Psi4; How to see the actual compiling commands (or errors) with cmake; How to highlight git merge conflicts in vi; How to handle “runtime library may be hidden” when building with Anaconda Python; How to set up the scratch directory; How do I retain specific Psi4 scratch files; How to use Psi4 within a PBS queue; How to update and rebuild Psi4; How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation; How to refer to Psi4; How to get a Psi4 logo file; How to use a local Add-On repository in the Psi4 build. Installing from Binary; How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; Quick Installation; Detailed Installation of Miniconda; Detailed Installation of PSI4; Useful Commands; Troubleshooting. Scratch Files and Elementary Restart¶; One very important part of user configuration at the end of the; installation process; is to tell PSI4 where to write its temporary; (“scratch”) files. Electronic structure packages like PSI4 can; create rather large temporary disk files. It is very important to; ensure that PSI4 is writing its temporary files to a disk drive; physically attached to the computer running the computation. If it; is not, it will significantly slow down the program and the network.; By default, PSI4 will write temporary files to /tmp, but this; directory is often not large enough for typical computations. Therefore,; you need to (a) make sure there is a sufficiently large directory on a; locally attached disk dri",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/external-1.html:3214,install,install,3214,psi4manual/1.3.2/external-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external-1.html,14,"['install', 'update']","['install', 'installer', 'update']"
Deployability,"si::Matrix, symmetry: int=0) → None¶; docstring. set_Da_mo(self: psi4.core.OEProp, arg0: psi::Matrix) → None¶; docstring. set_Da_so(self: psi4.core.OEProp, arg0: psi::Matrix) → None¶; docstring. set_Db_ao(self: psi4.core.OEProp, Db: psi::Matrix, symmetry: int=0) → None¶; docstring. set_Db_mo(self: psi4.core.OEProp, arg0: psi::Matrix) → None¶; docstring. set_Db_so(self: psi4.core.OEProp, arg0: psi::Matrix) → None¶; docstring. Exvals(self: psi4.core.OEProp) → List[float]; The x component of the field (in a.u.) at each grid point. Eyvals(self: psi4.core.OEProp) → List[float]; The y component of the field (in a.u.) at each grid point. Ezvals(self: psi4.core.OEProp) → List[float]; The z component of the field (in a.u.) at each grid point. Vvals(self: psi4.core.OEProp) → List[float]; The electrostatic potential (in a.u.) at each grid point. add(self: psi4.core.OEProp, arg0: str) → None; docstring. clear(self: psi4.core.OEProp) → None; docstring. compute(self: psi4.core.OEProp) → None; docstring. set_Da_ao(self: psi4.core.OEProp, Da: psi::Matrix, symmetry: int=0) → None; docstring. set_Da_mo(self: psi4.core.OEProp, arg0: psi::Matrix) → None; docstring. set_Da_so(self: psi4.core.OEProp, arg0: psi::Matrix) → None; docstring. set_Db_ao(self: psi4.core.OEProp, Db: psi::Matrix, symmetry: int=0) → None; docstring. set_Db_mo(self: psi4.core.OEProp, arg0: psi::Matrix) → None; docstring. set_Db_so(self: psi4.core.OEProp, arg0: psi::Matrix) → None; docstring. set_title(self: psi4.core.Prop, arg0: str) → None¶; docstring. valid_methods = ['DIPOLE', 'QUADRUPOLE', 'MULLIKEN_CHARGES', 'LOWDIN_CHARGES', 'WIBERG_LOWDIN_INDICES', 'MAYER_INDICES', 'MAYER_INDICES', 'MO_EXTENTS', 'GRID_FIELD', 'GRID_ESP', 'ESP_AT_NUCLEI', 'NO_OCCUPATIONS']. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 July 2018 04:21AM.; Created using Sphinx 1.7.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/api/psi4.core.oeprop.html:3633,update,updated,3633,psi4manual/1.2.1/api/psi4.core.oeprop.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/api/psi4.core.oeprop.html,1,['update'],['updated']
Deployability,"sian”, “lorentzian”}; The lineshape function to use in the fitting. Default is gaussian.; gamma (float) – Full width at half maximum of the lineshape function.; Default is 0.2 au of angular frequency.; This value is expected in atomic units of angular frequency.; npoints (int) – How many points to generate for the x axis. Default is 5000.; out_units (str) – Units for the output array x, the x axis of the spectrum plot.; Default is wavelengths in nanometers.; Valid (and case-insensitive) values for the units are:. au atomic units of angular frequency; Eh atomic units of energy; eV; nm; THz. Returns:; spectrum – The fitted electronic absorption spectrum, with units for the x axis specified by the out_units parameter.; This is a dictionary containing the convoluted (key: convolution) and the infinitely narrow spectra (key: sticks).; {""convolution"": {""x"": np.ndarray, ""y"": np.ndarray},; ""sticks"": {""poles"": np.ndarray, ""residues"": np.ndarray}}. Return type:; Dict[str, numpy.ndarray]. Notes. Conversion of the broadening parameter \(\gamma\).; The lineshape functions are formulated as functions of the angular frequency \(\omega\).; When converting to other physical quantities, the broadening parameter has to be modified accordingly.; If \(\gamma_{\omega}\) is the chosen broadening parameter then:. Wavelength: \(gamma_{\lambda} = \frac{\lambda_{ij}^{2}}{2\pi c}\gamma_{\omega}\); Frequency: \(gamma_{\nu} = \frac{\gamma_{\omega}}{2\pi}\); Energy: \(gamma_{E} = \gamma_{\omega}\hbar\). References; A. Rizzo, S. Coriani, K. Ruud, “Response Function Theory Computational Approaches to Linear and Nonlinear Optical Spectroscopy”. In Computational Strategies for Spectroscopy.; https://doi.org/10.1002/9781118008720.ch2. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; spectrum. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.spectrum.html:3607,update,updated,3607,psi4manual/1.7.x/api/psi4.driver.p4util.spectrum.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.spectrum.html,1,['update'],['updated']
Deployability,"sible Values: TWOSTEP, SIMULTANEOUS, QC; Default: TWOSTEP. AO_BASIS¶. Controls whether to avoid the AO->MO transformation of the two-electron integrals for the four-virtual case (<VV||VV>) by computing the corresponding terms in the AO basis. AO_BASIS = DISK algorithm reduces the memory requirements and can significantly reduce the cost of the energy computation if SIMULTANEOUS algorithm is used. For the TWOSTEP algorithm, however, AO_BASIS = DISK option is not recommended due to the extra I/O. Type: string; Possible Values: NONE, DISK; Default: NONE. DCFT_FUNCTIONAL¶. Chooses appropriate DCFT method. Type: string; Possible Values: DC-06, DC-12, CEPA0; Default: DC-06. DIIS_START_CONVERGENCE¶. Value of RMS of the density cumulant residual and SCF error vector below which DIIS extrapolation starts. Same keyword controls the DIIS extrapolation for the solution of the response equations. Type: conv double; Default: 1e-3. LAMBDA_MAXITER¶. Maximum number of density cumulant update micro-iterations per macro-iteration (for ALOGRITHM = TWOSTEP). Same keyword controls the maximum number of density cumulant response micro-iterations per macro-iteration for the solution of the response equations (for RESPONSE_ALOGRITHM = TWOSTEP). Type: integer; Default: 50. MAXITER¶. Maximum number of the macro-iterations for both the energy and the solution of the response equations. Type: integer; Default: 40. QC_COUPLING¶. Controls whether to include the coupling terms in the DCFT electronic Hessian (for ALOGRITHM = QC only). Type: boolean; Default: true. REFERENCE¶. Reference wavefunction type. Type: string; Possible Values: UHF; Default: UHF. RESPONSE_ALGORITHM¶. The algorithm to use for the solution of the response equations for the analytic gradients and properties. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS; Default: TWOSTEP. R_CONVERGENCE¶. Convergence criterion for the RMS of the residual vector in the density cumulant updates, as well as the solution of the density cumula",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/autodir_options_c/module__dcft-1.html:1608,update,update,1608,psi4manual/4.0b4/autodir_options_c/module__dcft-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodir_options_c/module__dcft-1.html,4,['update'],['update']
Deployability,"sicode release; Finalize release; Reset psi4meta for nightly operation. Post-Release (e.g., v1.3.1)¶. Assemble postrelease changes; Tweak Conda for postrelease; Do final pass before release tag; Tag postrelease; Build Conda Psi4 stack at specific commit; Publish to main conda label; Build Psi4conda set; Generate download page for psicode.org; Collect documentation snapshot; Publish GitHub postrelease; Publish psicode release; Finalize release; Reset psi4meta for nightly operation. Update copyright year¶. cd ~/path/to/psi4; Primary target is licenses. grep -rl ""(c) 2007-2017"" * | xargs sed -i '' ""s/(c) 2007-2017/(c) 2007-2018/g""; On Linux, drop the '' in above command; Need to do psi4/ and docs/ dirs. Also, license in these files. tests/runtest.py; README.md; tests/psitest.pl. Also, in content of psi4/doc/sphinxman/source/conf.py.in#L130. Update samples¶. Run make sphinxman at least once by hand; Check in resulting psifiles.py and all the updated and new samples/ files and dirs; Make a lone PR and warn reviewers not to read it, since autogenerated. Collect new authors¶. Survey contributions to current Milestone. Add new contribs and PR lists to release notes GitHub issue; Figure out any new “Additional Contributors” authors since last release; Edit psi4/header.py accordingly, make PR; Get permission of new authors and their particulars for codemeta.json; Invite any contributors with at least 3 PRs to join GitHub Organization. Anticipate next release¶. Bump version in codemeta.json, psi4/codemeta.json#L9; Add to branch list in azure-pipelines.yml, psi4/azure-pipelines.yml. Build Conda ecosystem stack¶; By “ecosystem stack”, mean packages that are upstream, downstream, required, and optional for a fully featured Psi4 build and which we can’t get from “defaults” or “conda-forge” channels. Main directions are in [cbcy](https://github.com/psi4/psi4meta/blob/master/conda-recipes/conda_build_config.yaml) and [poodle](https://github.com/psi4/psi4meta/blob/master/psinet-night",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/manage_release.html:1739,update,updated,1739,psi4manual/1.6.x/manage_release.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/manage_release.html,1,['update'],['updated']
Deployability,"since spring 2017. It's toast (comment this line to try), but disabling for now.""); message(WARNING ""ERD will build, link, and run in Psi4 just fine. However, it has not been hooked into Psi4 in all roles, notably gradients, LRC DFT energies, and ESP. So upon activating through ``set integral_package erd``, known failures will be caught and halted, but perhaps other types not tested and identified will give *wrong* answers. Consider this your warning.""); endif(). ############################ Options: Build How? #############################; include(psi4OptionsTools). Note that external projects will have their own sets of build; configuration options. Only the most-common user knobs of those are; mentioned above. How to install elsewhere than /usr/local/psi4¶; The installation directory is the filesystem location for the executable; script, the Python module, basis set data, and other administrative files.; Unless using the conda package, which is relocatable, the installation; directory must be specified with CMake variable CMAKE_INSTALL_PREFIX; before compiling. Build with Specific Install Directory; cmake -DCMAKE_INSTALL_PREFIX=/nfs/common/software/psi4. Relevant CMake Options:; CMAKE_INSTALL_PREFIX=PATH # Location to which Psi4 and internally built; # add-ons are installed (default: /usr/local/psi4). Note; It’s not guaranteed, but if, in a pinch, you need to install a; built Psi4 to a location not configured by CMAKE_INSTALL_PREFIX,; recursively copy the folders under objdir/stage/prefix to; the desired location, chown them if needed, edit the shebang in; bin/psi4 if needed, and recursively delete all the “.pyc” files. It; may just run. How to compile for debugging¶; Flags to turn optimizations off and debugging on can be set across the; project and plugins with CMake variable CMAKE_BUILD_TYPE before; compiling. Note that these flags will not propagate to any add-ons that; are detected pre-built rather than built. Build without optimization; cmake -DCMAKE_BUILD_",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/build_planning.html:22428,install,installation,22428,psi4manual/1.7.x/build_planning.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/build_planning.html,1,['install'],['installation']
Deployability,"sing RHF/cc-pVDZ orbitals for the closed-shell neutral as a guess. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). omp3-1; OMP3 cc-pVDZ energy for the H2O molecule. omp2-grad1; OMP2 cc-pVDZ gradient for the H2O molecule. ocepa-grad2; OCEPA cc-pVDZ gradient for the NO radical. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. mp2-grad2; MP2 cc-pVDZ gradient for the NO radical. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. dfomp2-3; OMP2 cc-pVDZ energy for the H2O molecule. fd-freq-gradient-large; SCF DZ finite difference frequencies by energies for C4NH4. pywrap-alias; Test parsed and exotic calls to energy() like zapt4, mp2.5, and cisd are working. dcft4; DCFT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. dfrasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. cdomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. freq-isotope; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures and pressures but not for different isotopologs. cc36; CC2(RHF)/cc-pVDZ energy of H2O. cbs-delta-energy; Extrapolated energies with delta correction. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. p",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:11373,update,update,11373,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,4,['update'],['update']
Deployability,"sing; MRCC simply provide the following:; molecule h2o {; O; H 1 1.0; H 1 1.0 2 104.5; }; set {; basis cc-pVDZ; }; energy('mrccsdt'). 'mrccsdt' in the call to energy() instructs PSI4 to first; perform an RHF calculation and then call MRCC to compute the CCSDT energy.; For a CCSDT(Q) energy, simply use 'mrccsdt(q)' in the call to; energy(). MRCC can be used to perform geometry optimization and; frequency calculations for electronic ground states only.; At this time, PSI4 is only able to automatically generate the proper; input file for MRCC for the methods listed in table below.; To utilize any method described in the table, you must prefix; the method name with MR. For other methods, you will be required to; use the MRCC keywords described in Appendix MRCC. Methods available in automatic interface with MRCC. CCSD; CCSD(T) [1]; CCSD(T)_L [1]. CCSDT; CCSDT(Q) [1]; CCSDT(Q)_L [1]. CCSDTQ; CCSDTQ(P) [1]; CCSDTQ(P)_L [1]. CCSDTQP; CCSDTQP(H) [1]; CCSDTQP(H)_L [1]. CCSDTQPH;  ;  . CCSDT-1a; CCSDT-1b; CCSDT-3. CCSDTQ-1a; CCSDTQ-1b; CCSDTQ-3. CCSDTQP-1a; CCSDTQP-1b; CCSDTQP-3. CCSDTQPH-1a; CCSDTQPH-1b; CCSDTQPH-3. CC2;  ;  . CC3;  ;  . CC4;  ;  . CC5;  ;  . CC6;  ;  . [1](1, 2, 3, 4, 5, 6, 7, 8) Pertubative methods not available with ROHF reference. Frozen-core approximation is also supported in the MRCC interface.; To optimize CH4 with CCSDT freezing the 1s on carbon, run:; molecule H2O {; O; H 1 r; H 1 r 2 104.5. r = 1.0; }. set {; basis cc-pVDZ; freeze_core true; }. optimize('mrccsdt'). Table Of Contents. Interface to MRCC by M. Kállay; Installation; Running MRCC. Previous topic; PSIMRCC Implementation of Mk-MRCC Theory; Next topic; CI: Configuration Interaction; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Theoretical Methods: SCF to FCI ». © Copyright 2012, The Psi4 Project.; Last updated on Oct 16, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/mrcc-1.html:2889,update,updated,2889,psi4manual/4.0b3/mrcc-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/mrcc-1.html,2,['update'],['updated']
Deployability,"single dense numpy array is given, a dimension can be supplied to; apply irreps to this array. Note that this discards all extra information; given in the matrix besides the diagonal blocks determined by the passed; dimension.; dim2 – Same as dim1 only if using a psi4.core.Dimension object. Returns:matrix – Returns the given Psi4 object. Return type:Matrix or Vector. Notes; This is a generalized function to convert a NumPy array to a Psi4 object; Examples; >>> data = np.random.rand(20); >>> vector = array_to_matrix(data). >>> irrep_data = [np.random.rand(2, 2), np.empty(shape=(0,3)), np.random.rand(4, 4)]; >>> matrix = array_to_matrix(irrep_data); >>> print matrix.rowspi().to_tuple(); (2, 0, 4). Matrix to Array¶; A general function that converts NumPy arrays to PSI4 data objects. psi4.driver.p4util.numpy_helper._to_array(matrix, copy=True, dense=False)[source]¶; Converts a Psi4 Matrix or Vector to a numpy array. Either copies the data or simply; constructs a view. Parameters:; matrix (Matrix or Vector) – Pointers to which Psi4 core class should be used in the construction.; copy (bool, optional) – Copy the data if True, return a view otherwise; dense (bool, optional) – Converts irreped Psi4 objects to diagonally blocked dense arrays if True. Returns a list of arrays otherwise. Returns:array – Returns either a list of np.array’s or the base array depending on options. Return type:ndarray or list of ndarray. Notes; This is a generalized function to convert a Psi4 object to a NumPy array; Examples; >>> data = psi4.Matrix(3, 3); >>> data.to_array(); [[ 0. 0. 0.]; [ 0. 0. 0.]; [ 0. 0. 0.]]. table of contents. Interface to NumPy; Basics; NumPy Views; PSI4 Data Objects with Irreps; Array to Matrix; Matrix to Array. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/numpy-1.html:5131,update,updated,5131,psi4manual/1.3.2/numpy-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/numpy-1.html,2,['update'],['updated']
Deployability,"single-point MP4/qz2p on NH2. cfour/kw-6; Basis set spherical/Cartesian with cfour_basis and puream. cfour/kw-1; testing best practices options, part i. cfour/sp-uhf-scf; single-point HF/qz2p on NH2. cfour/kw-8; Translating psi4 options to cfour, part ii. cfour/kw-3; Basis set spherical/Cartesian with cfour_basis and cfour_spherical. cfour/opt-rhf-ccsd_t_-ecc; optimization CCSD(T)/dzp on water with ecc, aobasis. cfour/sp-rohf-ccsd_t_; single-point CCSD(T)/qz2p on NH2. cfour/sp-rhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on water with ecc module. cfour/sp-rohf-ccsd-ao; single-point CCSD/qz2p on NH2 with aobasis. cfour/kw-2; testing best practices options, part ii. cfour/sp-uhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on NH2 with ecc. cfour/scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is apecified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cfour/psi-ghost-grad; MP2 optimization of dimers with one momomer ghosted. Gradients after three opt cycles are compared with those from psi4. cfour/opt-rhf-scf; optimization HF/svp on water. cfour/sp-uhf-mp2; single-point MP2/qz2p on NH2. cfour/kw-5; Basis set spherical/Cartesian with basis and cfour_spherical. cfour/sp-uhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/psi-rohf-scsmp2; ROHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/psi-uhf-mp3; UHF MP3 energy components. Checks that converted identically between cfour and psi4. cfour/dfmp2-1; MP2/cc-PVDZ computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. cfour/sp-uhf-ccsd; single-point CCSD/qz2p on NH2. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_cfour.html:4024,update,updated,4024,psi4manual/1.9.x/autodoc_testsuite_cfour.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_cfour.html,1,['update'],['updated']
Deployability,"sion corrected); Y; —; —; 0.720000; —; 1.000000; 0.360000 / 0.510000; —; —. DSD-PBEP86-D3BJ; DSD-PBEP86-D3BJ Dispersion-corrected SCS Double Hybrid XC Functional; Y; —; —; 0.690000; —; 1.000000; 0.220000 / 0.520000; Y. DSD-PBEP86-NL; DSD-PBEP86-NL (D3BJ parameters) VV10 SCS Double Hybrid XC Functional; Y; —; —; 0.690000; —; 1.000000; 0.220000 / 0.520000; —; —. DSD-PBEPBE; DSD-PBEPBE SCS Double Hybrid XC Functional (not dispersion corrected); Y; —; —; 0.720000; —; 1.000000; 0.310000 / 0.540000; —; —. DSD-PBEPBE-D3BJ; DSD-PBEPBE-D3BJ Dispersion-corrected SCS Double Hybrid XC Functional; Y; —; —; 0.680000; —; 1.000000; 0.130000 / 0.550000; Y. DSD-PBEPBE-NL; DSD-PBEPBE-NL (D3BJ parameters) VV10 SCS Double Hybrid XC Functional; Y; —; —; 0.680000; —; 1.000000; 0.130000 / 0.550000; —; —. MP2D. —; —; —; 1.000000; —; 1.000000; —; —; —. MP2MP2. —; —; —; 1.000000; —; 1.000000; —; —; —. PBE0-2; PBE0-2 Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.793701; —; 0.500000; —; —; —. PBE0-DH; PBE0-DH Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.500000; —; 0.125000; —; Y. PBE0-DH-D3BJ; PBE0-DH Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.500000; —; 0.125000; —; Y. PTPSS; PTPSS SOS Double Hybrid XC Functional; Y; Y; —; 0.500000; —; 1.000000; 0.000000 / 0.375000; —; —. PTPSS-D3BJ; PTPSS SOS Double Hybrid XC Functional; Y; Y; —; 0.500000; —; 1.000000; 0.000000 / 0.375000; Y. PWPB95; PWPB95 SOS Double Hybrid XC Functional; Y; Y; —; 0.500000; —; 1.000000; 0.000000 / 0.269000; —; —. PWPB95-D3BJ; PWPB95 SOS Double Hybrid XC Functional; Y; Y; —; 0.500000; —; 1.000000; 0.000000 / 0.269000; Y. PWPB95-NL; PWPB95 SOS Double Hybrid XC Functional; Y; Y; —; 0.500000; —; 1.000000; 0.000000 / 0.269000; —; —. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Appendices; DFT Functionals; <no title>. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodoc_dft_dhybrid-1.html:4171,update,updated,4171,psi4manual/1.4.0/autodoc_dft_dhybrid-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_dft_dhybrid-1.html,2,['update'],['updated']
Deployability,"sion corrected); Y; —; —; 0.720000; —; 1.000000; 0.360000 / 0.510000; —; —. DSD-PBEP86-D3BJ; DSD-PBEP86-D3BJ Dispersion-corrected SCS Double Hybrid XC Functional; Y; —; —; 0.690000; —; 1.000000; 0.220000 / 0.520000; Y. DSD-PBEP86-NL; DSD-PBEP86-NL (D3BJ parameters) VV10 SCS Double Hybrid XC Functional; Y; —; —; 0.690000; —; 1.000000; 0.220000 / 0.520000; —; —. DSD-PBEPBE; DSD-PBEPBE SCS Double Hybrid XC Functional (not dispersion corrected); Y; —; —; 0.720000; —; 1.000000; 0.310000 / 0.540000; —; —. DSD-PBEPBE-D3BJ; DSD-PBEPBE-D3BJ Dispersion-corrected SCS Double Hybrid XC Functional; Y; —; —; 0.680000; —; 1.000000; 0.130000 / 0.550000; Y. DSD-PBEPBE-NL; DSD-PBEPBE-NL (D3BJ parameters) VV10 SCS Double Hybrid XC Functional; Y; —; —; 0.680000; —; 1.000000; 0.130000 / 0.550000; —; —. MP2D. —; —; —; 1.000000; —; 1.000000; —; —; —. MP2MP2. —; —; —; 1.000000; —; 1.000000; —; —; —. PBE0-2; PBE0-2 Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.793701; —; 0.500000; —; —; —. PBE0-DH; PBE0-DH Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.500000; —; 0.125000; —; Y. PBE0-DH-D3BJ; PBE0-DH Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.500000; —; 0.125000; —; Y. PTPSS; PTPSS SOS Double Hybrid XC Functional; Y; Y; —; 0.500000; —; 1.000000; 0.000000 / 0.375000; —; —. PTPSS-D3BJ; PTPSS SOS Double Hybrid XC Functional; Y; Y; —; 0.500000; —; 1.000000; 0.000000 / 0.375000; Y. PWPB95; PWPB95 SOS Double Hybrid XC Functional; Y; Y; —; 0.500000; —; 1.000000; 0.000000 / 0.269000; —; —. PWPB95-D3BJ; PWPB95 SOS Double Hybrid XC Functional; Y; Y; —; 0.500000; —; 1.000000; 0.000000 / 0.269000; Y. PWPB95-NL; PWPB95 SOS Double Hybrid XC Functional; Y; Y; —; 0.500000; —; 1.000000; 0.000000 / 0.269000; —; —. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; DFT Functionals; <no title>. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/autodoc_dft_dhybrid-1.html:4171,update,updated,4171,psi4manual/1.5.0/autodoc_dft_dhybrid-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_dft_dhybrid-1.html,2,['update'],['updated']
Deployability,"sion energy term in EFP computation?. Type: boolean; Default: true. EFP_DISP_DAMPING¶. Fragment-fragment dispersion damping type. TT is a damping formula by Tang and Toennies. OVERLAP is overlap-based dispersion damping. Type: string; Possible Values: TT, OVERLAP, OFF; Default: OVERLAP. EFP_ELST¶. Do include electrostatics energy term in EFP computation?. Type: boolean; Default: true. EFP_ELST_DAMPING¶. Fragment-fragment electrostatic damping type. SCREEN is a damping formula based on screen group in the EFP potential. OVERLAP is damping that computes charge penetration energy. Type: string; Possible Values: SCREEN, OVERLAP, OFF; Default: SCREEN. EFP_EXCH¶. Do include exchange repulsion energy term in EFP computation?. Type: boolean; Default: true. EFP_IND¶. Do include polarization energy term in EFP computation? (EFP_POL c. v1.1). Type: boolean; Default: true. EFP_IND_DAMPING¶. Fragment-fragment polarization damping type. TT is a damping formula like Tang and Toennies. (EFP_POL_DAMPING c. v1.1). Type: string; Possible Values: TT, OFF; Default: TT. EFP_QM_ELST¶. Do include electrostatics energy term in QM/EFP computation? (QMEFP_ELST c. v1.1). Type: boolean; Default: true. EFP_QM_IND¶. Do include polarization energy term in QM/EFP computation? (QMEFP_POL c. v1.1). Type: boolean; Default: true. PRINT¶. The amount of information printed to the output file. Type: integer; Default: 1. Expert¶. DERTYPE¶. Do EFP gradient?. Type: string; Possible Values: NONE, FIRST; Default: NONE. QMEFP¶. Do turn on QM/EFP terms?. Type: boolean; Default: false. table of contents. EFP; General; EFP_DISP; EFP_DISP_DAMPING; EFP_ELST; EFP_ELST_DAMPING; EFP_EXCH; EFP_IND; EFP_IND_DAMPING; EFP_QM_ELST; EFP_QM_IND; PRINT. Expert; DERTYPE; QMEFP. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Appendices; Keywords by Module. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 July 2018 04:21AM.; Created using Sphinx 1.7.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/autodir_options_c/module__efp-1.html:2172,update,updated,2172,psi4manual/1.2.1/autodir_options_c/module__efp-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/autodir_options_c/module__efp-1.html,2,['update'],['updated']
Deployability,"sion information. -w, --wipe¶; Clean out scratch area. Environment Variables¶; These environment variables will influence PSI4’s behavior. MKL_NUM_THREADS¶; Number of threads to use by operations with Intel threaded BLAS libraries. OMP_NESTED¶; Do access nested DGEMM in OpenMP sections in DFMP2 for multi-socket; platforms. This is very low-level access to OpenMP functions for; experienced programmers. Users should leave this variable unset or set; to False. OMP_NUM_THREADS¶; Number of threads to use by modules with OpenMP threading. PATH¶; Path for executables. To run Kállay’s MRCC program; (see MRCC), the dmrcc executable must be in PATH. PSI_SCRATCH¶; Directory where scratch files are written. Overrides settings in ~/.psi4rc. PYTHONPATH¶; Path in which the Python interpreter looks for modules to import. For; PSI4, these are generally plugins (see Plugins: Adding New Functionality to PSI4) or databases.; Modification of PYTHONPATH can be done in three ways, equivalently. Normal Linux shell commands. First line for C shell; second for bash.; setenv PYTHONPATH /home/user/psiadditions:$PYTHONPATH; PYTHONPATH=/home/user/psiadditions:$PYTHONPATH; export PYTHONPATH. Place the path in the ~/.psi4rc file so that it is available for; every PSI4 instance.; sys.path.insert(0, '/home/user/psiadditions'). Place the path in the input file, either absolute or relative.; sys.path.insert(0, '../../psiadditions'); sys.path.insert(0, '/home/user/psiadditions'). Table Of Contents. Installation and Runtime Configuration; Obtaining PSI4; Compiling and Installing; Scratch Files and the ~/.psi4rc File; Threading; Command Line Options; Environment Variables. Previous topic; Introduction; Next topic; A PSI4 Tutorial; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » . © Copyright 2012, The Psi4 Project.; Last updated on Oct 16, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/external-1.html:11507,update,updated,11507,psi4manual/4.0b3/external-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/external-1.html,2,['update'],['updated']
Deployability,"sion of this feature is not yet released. However,; the current version of the code does include an interface to; Kallay’s MRCC code.; The DETCI module is also capable of computing arbitrary-order; coupled-cluster energies, using an approach similar to that of Hirata; and Bartlett [Hirata:2000:216], or of Olsen [Olsen:2000:7140].; Notably, the approach in DETCI also allows arbitrary-order; active space coupled-cluster procedures. The general algorithm; for doing this in DETCI is inefficient compared to optimized; lower-order coupled-cluster codes and should not be used for CCSD,; where the CCENERGY module is much more efficient. For higher-order; CC (like CCSDT and beyond), the code is also not as efficient as the; MRCC code by Kállay, to which PSI4 can interface (see Section; Interface to MRCC by M. Kállay); however, it may allow certain truncations of the model; space that might not be available presently in MRCC. For very small; systems, the code can be useful for testing of, for example, CCSDTQ or; its active-space CCSDtq analog [Piecuch:1999:6103].; To perform arbitrary-order coupled-cluster, set the DETCI; option CC to TRUE, and set; CC_EX_LEVEL (note: not EX_LEVEL); to the desired coupled-cluster excitation level, and invoke; energy('detci'). Various other DETCI options have a similar; option for coupled-cluster, usually named beginning with CC. The full; list of options is given in Appendix DETCI. table of contents. CI: Configuration Interaction; Basic DETCI Keywords; REFERENCE; R_CONVERGENCE; EX_LEVEL; FCI; FROZEN_DOCC; RESTRICTED_DOCC; RESTRICTED_UOCC; FROZEN_UOCC; CI_MAXITER; NUM_ROOTS; ICORE; DIAG_METHOD; OPDM; TDM; DIPMOM; MPN. Arbitrary Order Perturbation Theory; Arbitrary Order Coupled-Cluster Theory. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Theoretical Methods: SCF to FCI. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/detci-1.html:13524,update,updated,13524,psi4manual/1.3.2/detci-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/detci-1.html,2,['update'],['updated']
Deployability,"sis %s\n' % (psi4.get_global_option('BASIS'))); molecule.reset_point_group(user_pg); molecule.update_geometry(); bascmd, baskw = qcdbmolecule.format_basis_for_cfour(psi4.MintsHelper().basisset().has_puream()). # Handle psi4 keywords implying cfour keyword values; if psi4.get_option('CFOUR', 'TRANSLATE_PSI4'):; psicmd, psikw = qcdb.cfour.muster_psi4options(p4util.prepare_options_for_modules(changedOnly=True)); else:; psicmd, psikw = '', {}. # Handle calc type and quantum chemical method; mdccmd, mdckw = qcdb.cfour.muster_modelchem(name, dertype). # Handle calc type and quantum chemical method; mdccmd, mdckw = qcdb.cfour.muster_modelchem(name, dertype). # Handle driver vs input/default keyword reconciliation; userkw = p4util.prepare_options_for_modules(); userkw = qcdb.options.reconcile_options(userkw, memkw); userkw = qcdb.options.reconcile_options(userkw, molkw); userkw = qcdb.options.reconcile_options(userkw, baskw); userkw = qcdb.options.reconcile_options(userkw, psikw); userkw = qcdb.options.reconcile_options(userkw, mdckw). # Handle conversion of psi4 keyword structure into cfour format; optcmd = qcdb.options.prepare_options_for_cfour(userkw). # Handle text to be passed untouched to cfour; litcmd = psi4.get_global_option('LITERAL_CFOUR'). # Assemble ZMAT pieces; zmat = memcmd + molcmd + optcmd + mdccmd + psicmd + bascmd + litcmd. if len(re.findall(r'^\*(ACES2|CFOUR|CRAPS)\(', zmat, re.MULTILINE)) != 1:; psi4.print_out('\n Faulty ZMAT constructed:\n%s' % (zmat)); raise ValidationError(""""""; Multiple *CFOUR(...) blocks in input. This usually arises; because molecule or options are specified both the psi4 way through; molecule {...} and set ... and the cfour way through cfour {...}.""""""). return zmat. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    ; Psi4 [1.0.0 6a9a71b] » ; Module code ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/procedures/interface_cfour.html:16943,update,updated,16943,psi4manual/1.0.0/_modules/procedures/interface_cfour.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/procedures/interface_cfour.html,1,['update'],['updated']
Deployability,"sis functions. nprimitive; The number of primitive gaussians. Methods Summary. coef(self, pi); Return coefficient of the pi'th primitive. erd_coef(self, pi); Return ERD normalized coefficient of pi'th primitive. exp(self, prim); Returns the exponent of the given primitive. is_cartesian(self); Returns true if the contraction is Cartesian. is_pure(self); Returns true if the contraction is pure, i.e. a spherical harmonic basis function. original_coef(self, pi); Return unnormalized coefficient of the pi'th primitive. Attributes Documentation. AMCHAR¶; The upper-case character symbol for the angular momentum of the given contraction. am¶; The angular momentum of the given contraction. amchar¶; The character symbol for the angular momentum of the given contraction. function_index¶; Basis function index where this shell starts. ncartesian¶; Total number of basis functions if this shell was Cartesian. ncenter¶; Returns atom number this shell is on. nfunction¶; Total number of basis functions. nprimitive¶; The number of primitive gaussians. Methods Documentation. coef(self: psi4.core.GaussianShell, pi: int) → float¶; Return coefficient of the pi’th primitive. erd_coef(self: psi4.core.GaussianShell, pi: int) → float¶; Return ERD normalized coefficient of pi’th primitive. exp(self: psi4.core.GaussianShell, prim: int) → float¶; Returns the exponent of the given primitive. is_cartesian(self: psi4.core.GaussianShell) → bool¶; Returns true if the contraction is Cartesian. is_pure(self: psi4.core.GaussianShell) → bool¶; Returns true if the contraction is pure, i.e. a spherical harmonic basis function. original_coef(self: psi4.core.GaussianShell, pi: int) → float¶; Return unnormalized coefficient of the pi’th primitive. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.6;  · . PSI4. PSI4 API: Linking C++ and Python; GaussianShell. © Copyright 2022, The Psi4 Project.; Last updated on Thursday, 19 May 2022 08:57PM.; Created using Sphinx 4.5.0.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/api/psi4.core.GaussianShell.html:2656,update,updated,2656,psi4manual/1.6.x/api/psi4.core.GaussianShell.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/api/psi4.core.GaussianShell.html,1,['update'],['updated']
Deployability,"sis-set extrapolation (and; automatically sets up the computations with different basis sets required to; do the extrapolation). For example,:; # all equivalent. energy('mp2', corl_basis='cc-pv[dt]z', corl_scheme=corl_xtpl_helgaker_2). energy('mp2/cc-pv[dt]z'). will compute a 2-point Helgaker extrapolation of the correlation energy; using the cc-pVDZ and cc-pVTZ basis sets (with method MP2) and add this; extrapolated correlation energy to the Hartree–Fock energy in the; largest basis (cc-pVTZ). cbs() can; be configured behind-the-scenes with explicit arguments, as in the; first example, or the convenience syntax of the equivalent second; example can be used.; Another very useful and powerful feature of PSI4 is the ability; to compute results on entire databases of molecules at a time,; as provided by the database() wrapper. For example,:; database('mp2', 'S22', cp=1, benchmark='S22B'). will perform DF-MP2 counterpoise-corrected interaction energies; (cp=1) on all members of Hobza’s S22 database set of van der Waals; dimers, and then compare the results against the S22B benchmark energies.; Built-in databases include S22, A24, HTBH, HBC6, HSG, S22by5, S66, JSCH,; NCB31, S66by8, and NBC10, among others.; These wrapper functions are discussed separately in; Psithon Functions: Invoking a Calculation. Note that the options documented for Python; functions are placed as arguments in the command that calls the function,; not in the set {...} block or with any other set command. table of contents. Psithon: Structuring an Input File; Physical Constants; Memory Specification; Molecule and Geometry Specification; Job Control Keywords; Basis Sets; PSI Variables; Return Values; Loops; Tables of Results; Python Wrappers. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Psithon: Structuring an Input File. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/psithoninput.html:15458,update,updated,15458,psi4manual/1.7.x/psithoninput.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/psithoninput.html,1,['update'],['updated']
Deployability,"sithon Functions: Invoking a Calculation; Notes on Options. Notes on Options¶. Note; The Python options referred to in the Psithon Functions: Invoking a Calculation section below; are placed as arguments to a Python; function (like energy()), not in set blocks or commands. Note; All PSI4 keyword names and values are insensitive to case, both; those that are placed in set blocks and as Python function arguments.; The one exception is documented for the subset option in the database(); function, where case structure must match the database file. Note; Boolean options can be specified by yes, on, true, or 1; for affirmative and no, off, false, or 0 for negative,; all insensitive to case. Note; The derivative level type for optimize() and frequency() functions can be specified by energy, none, or 0 for 0th derivative, gradient, first, or 1 for 1st derivative, and hessian, second, or 2 for 2nd derivative. For finite difference, as opposed to analytic, derivatives, the POINTS option can be increased to 5 for greater accuracy at increased cost. Note; Function option for the Psithon function called by the current function;; the default is usually energy(). See Sec. Function Intercalls; for a fuller description. Note that the value of the keyword is a Python object; and so is not wrapped in quotes like a string. Note; The molecule to be acted upon by the current function; the default is the; “active” molecule, which is the nearest preceeding molecule declared in a; molecule mymol {...} block or in an activate(mymol) statement. Note; that the value of this keyword (mymol in the example) is a Python object; and so is not wrapped in quotes like a string. Technically, this is a; Molecule object. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Psithon Functions: Invoking a Calculation; Notes on Options. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/notes_py.html:2012,update,updated,2012,psi4manual/1.7.x/notes_py.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/notes_py.html,1,['update'],['updated']
Deployability,"sithon function. Type: string; Possible Values: DETCI, CI, ZAPTN, DETCAS, CASSCF, RASSCF; Default: DETCI. WFN (GLOBALS); GLOBALS (Expert) — Wavefunction type. Type: string; Default: SCF. WFN (LMP2); LMP2 (Expert) — Wavefunction type. Type: string; Default: LMP2. WFN (MP2); MP2 (Expert) — Wavefunction type. Type: string; Possible Values: MP2; Default: MP2. WFN (SCF); SCF (Expert) — Wavefunction type. Type: string; Possible Values: SCF; Default: SCF. WFN (TRANSQT); TRANSQT (Expert) — Wavefunction type. Type: string; Default: CCSD. WFN (TRANSQT2); TRANSQT2 (Expert) — Wavefunction type. Type: string; Default: No Default. WFN_SYM (MCSCF); MCSCF — The symmetry of the SCF wavefunction. Type: string; Possible Values: A, AG, AU, AP, APP, A1, A2, B, BG, BU, B1, B2, B3, B1G, B2G, B3G, B1U, B2U, B3U, 0, 1, 2, 3, 4, 5, 6, 7, 8; Default: 1. WFN_SYM (PSIMRCC); PSIMRCC — The symmetry of the target wavefunction, specified either by Schönflies symbol, or irrep number (in Cotton ordering). Type: string; Possible Values: A, AG, AU, AP, APP, A1, A2, B, BG, BU, B1, B2, B3, B1G, B2G, B3G, B1U, B2U, B3U, 0, 1, 2, 3, 4, 5, 6, 7, 8; Default: 1. XI (CCDENSITY); CCDENSITY — Do compute Xi?. Type: boolean; Default: false. XI_CONNECT (CCDENSITY); CCDENSITY (Expert) — Do require and to be connected?. Type: boolean; Default: false. ZERO_INTERNAL_AMPS (PSIMRCC); PSIMRCC — Do zero the internal amplitudes, i.e., those that map reference determinants onto each other?. Type: boolean; Default: true. ZETA (CCDENSITY); CCDENSITY — Do use zeta?. Type: boolean; Default: false. ZETA (CCLAMBDA); CCLAMBDA — Do use zeta?. Type: boolean; Default: false. Previous topic; PSIOH Intermediate Files; Next topic; Keywords by Module; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Appendices ». © Copyright 2012, The Psi4 Project.; Last updated on Oct 16, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/autodoc_glossary_options_c-1.html:128509,update,updated,128509,psi4manual/4.0b3/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_glossary_options_c-1.html,2,['update'],['updated']
Deployability,"sithon, these have been dubbed sow/reap; procedures and have the following general structure. Prepare an input file, simply adding mode='sow' to the; argument list of an available Python function. Run this quick job to; produce input files for lengthier calculations.; According to the instructions in the output file of the above step,; run the generated input files in any order on any variety of computers; and architectures. This is the time-intensive portion of the; calculation.; The ‘sow’ stage also produces a master input file (with a; mode='reap' directive). When all the jobs in the above step are; completed, place their output files in the same location as the; master input, and run this last, quick job to collect the results. Sow/reap procedures are governed by the mode keyword, choices being; 'continuous', 'sow', and 'reap'. Only 'sow' is likely to; be used by the user, as 'continuous' is always the default, and; input files with 'reap' are autogenerated.; Embarrassingly parallel algorithm available at present for:; Database — database(); finite difference operation of Geometry Optimization — optimize() and gradient(); finite difference of energies of Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); finite difference of gradients of Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(). Caution; Some features are not yet implemented. Buy a developer a coffee. Local options (e.g., set scf e_convergence 9) will not get transmitted to the child jobs.; Array options (e.g., set states_per_irrep [2, 1]) will not get transmitted to the child jobs.; Function intercalls (e.g., db(opt())) are not tested with sow/reap procedures. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Psithon Functions: Invoking a Calculation. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/sowreap-1.html:2269,update,updated,2269,psi4manual/1.3.2/sowreap-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sowreap-1.html,2,['update'],['updated']
Deployability,"sity Functional Theory; Theory; Minimal Input; Spin/Symmetry Treatment; Functional Selection; Grid Selection; ERI Algorithms; IP Fitting; Fractional Particle Curves; Dispersion Corrections; Recommendations. DCFT: Density Cumulant Functional Theory; Theory; Methods; Iterative Algorithms; Analytic Gradients; Minimal Input; Recommendations. DF-MP2: Density-Fitted Second-Order Møller-Plesset Perturbation Theory; Introduction; Theory; Recommendations. OCC: Orbital-Optimized Coupled-Cluster and Møller–Plesset Perturbation Theories; Introduction; Theory; Methods; Basic Keywords; Advanced Keywords. OCC: Conventional Møller–Plesset Perturbation Theories; Basic Keywords. CC: Coupled Cluster Methods; Basic Keywords; Larger Calculations; Excited State Coupled Cluster Calculations; Linear Response (CCLR) Calculations. FNOCC: Frozen natural orbitals for CCSD(T), QCISD(T), CEPA, and MP4; Frozen natural orbitals (FNO); QCISD(T), CCSD(T), MP4, and CEPA; Quadratic configuration interaction and coupled cluster; Many-body perturbation theory; Coupled electron pair approximation; Density-fitted coupled cluster; Gn theory; Supported methods; Basic FNOCC Keywords; Advanced FNOCC Keywords. PSIMRCC Implementation of Mk-MRCC Theory; A Simple Example; Orbital ordering and selection of the model space. CI: Configuration Interaction; Basic DETCI Keywords; Arbitrary Order Perturbation Theory; Arbitrary Order Coupled-Cluster Theory. SAPT: Symmetry-Adapted Perturbation Theory; A First Example; SAPT0; Higher-Order SAPT; MP2 Natural Orbitals; Charge-Transfer in SAPT; Interpreting SAPT Results. ADC: Ab Initio Polarization Propagator; Partial Renormalization Scheme; Using the ADC(2) code; Implementation. Geometry Optimization; Basic Keywords; Optimizing Minima; Hessian; Transition States, Reaction Paths, and Constrained Optimizations; Convergence Criteria; Output. Evaluation of One-Electron Properties; Basic Keywords. Previous topic; Basis Sets; Next topic; Notes on Options; This Page. Show Source. Qu",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/methods-1.html:1757,configurat,configuration,1757,psi4manual/4.0b4/methods-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/methods-1.html,2,['configurat'],['configuration']
Deployability,"sity as this is often; much more costly than the energy. In addition, the Wavefunction density attributes; (Da and Db) return the SO density and must be transformed to the MO basis; to use with this function. New in version 0.5: wfn parameter passed explicitly. Returns; None. Parameters. filename (string) – destination file name for MOLDEN file (optional); do_virtual (bool) – do write all the MOs to the MOLDEN file (true) or discard the unoccupied MOs, not valid for NO’s (false) (optional); use_natural (bool) – write natural orbitals determined from density on wavefunction. Examples. Molden file with the Kohn-Sham orbitals of a DFT calculation.; >>> E, wfn = energy('b3lyp', return_wfn=True); >>> wfn.molden('mycalc.molden'). Molden file with the natural orbitals of a CCSD computation. For correlated methods, an energy call will not compute the density.; “properties” or “gradient” must be called.; >>> E, wfn = properties('ccsd', return_wfn=True); >>> wfn.molden('ccsd_no.molden', use_natural=True). To supply a custom density matrix, manually set the Da and Db of the wavefunction.; This is used, for example, to write natural orbitals coming from a root computed; by a CIWavefunction computation, e.g., detci, fci, casscf.`; The first two arguments of get_opdm can be set to n, n where n => 0 selects the root to; write out, provided these roots were computed, see NUM_ROOTS. The; third argument controls the spin (""A"", ""B"" or ""SUM"") and the final; boolean option determines whether inactive orbitals are included.; >>> E, wfn = energy('detci', return_wfn=True); >>> wfn.Da() = wfn.get_opdm(0, 0, ""A"", True); >>> wfn.Db() = wfn.get_opdm(0, 0, ""B"", True); >>> molden(wfn, 'no_root1.molden', use_natural=True). write_nbo(name)¶. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. PSI4 API: Linking C++ and Python; RHF. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/api/psi4.core.rhf.html:36205,update,updated,36205,psi4manual/1.4.0/api/psi4.core.rhf.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/api/psi4.core.rhf.html,1,['update'],['updated']
Deployability,"sity as this is often; much more costly than the energy. In addition, the Wavefunction density attributes; (Da and Db) return the SO density and must be transformed to the MO basis; to use with this function. New in version 0.5: wfn parameter passed explicitly. Returns; None. Parameters. filename (string) – destination file name for MOLDEN file (optional); do_virtual (bool) – do write all the MOs to the MOLDEN file (true) or discard the unoccupied MOs, not valid for NO’s (false) (optional); use_natural (bool) – write natural orbitals determined from density on wavefunction. Examples. Molden file with the Kohn-Sham orbitals of a DFT calculation.; >>> E, wfn = energy('b3lyp', return_wfn=True); >>> wfn.molden('mycalc.molden'). Molden file with the natural orbitals of a CCSD computation. For correlated methods, an energy call will not compute the density.; “properties” or “gradient” must be called.; >>> E, wfn = properties('ccsd', return_wfn=True); >>> wfn.molden('ccsd_no.molden', use_natural=True). To supply a custom density matrix, manually set the Da and Db of the wavefunction.; This is used, for example, to write natural orbitals coming from a root computed; by a CIWavefunction computation, e.g., detci, fci, casscf.`; The first two arguments of get_opdm can be set to n, n where n => 0 selects the root to; write out, provided these roots were computed, see NUM_ROOTS. The; third argument controls the spin (""A"", ""B"" or ""SUM"") and the final; boolean option determines whether inactive orbitals are included.; >>> E, wfn = energy('detci', return_wfn=True); >>> wfn.Da() = wfn.get_opdm(0, 0, ""A"", True); >>> wfn.Db() = wfn.get_opdm(0, 0, ""B"", True); >>> molden(wfn, 'no_root1.molden', use_natural=True). write_nbo(name)¶. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. PSI4 API: Linking C++ and Python; UHF. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/api/psi4.core.uhf.html:36205,update,updated,36205,psi4manual/1.4.0/api/psi4.core.uhf.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/api/psi4.core.uhf.html,1,['update'],['updated']
Deployability,"sity as this is often; much more costly than the energy. In addition, the Wavefunction density attributes; (Da and Db) return the SO density and must be transformed to the MO basis; to use with this function. New in version 0.5: wfn parameter passed explicitly. Returns; None. Parameters. filename (string) – destination file name for MOLDEN file (optional); do_virtual (bool) – do write all the MOs to the MOLDEN file (true) or discard the unoccupied MOs, not valid for NO’s (false) (optional); use_natural (bool) – write natural orbitals determined from density on wavefunction. Examples. Molden file with the Kohn-Sham orbitals of a DFT calculation.; >>> E, wfn = energy('b3lyp', return_wfn=True); >>> wfn.molden('mycalc.molden'). Molden file with the natural orbitals of a CCSD computation. For correlated methods, an energy call will not compute the density.; “properties” or “gradient” must be called.; >>> E, wfn = properties('ccsd', return_wfn=True); >>> wfn.molden('ccsd_no.molden', use_natural=True). To supply a custom density matrix, manually set the Da and Db of the wavefunction.; This is used, for example, to write natural orbitals coming from a root computed; by a CIWavefunction computation, e.g., detci, fci, casscf.`; The first two arguments of get_opdm can be set to n, n where n => 0 selects the root to; write out, provided these roots were computed, see NUM_ROOTS. The; third argument controls the spin (""A"", ""B"" or ""SUM"") and the final; boolean option determines whether inactive orbitals are included.; >>> E, wfn = energy('detci', return_wfn=True); >>> wfn.Da() = wfn.get_opdm(0, 0, ""A"", True); >>> wfn.Db() = wfn.get_opdm(0, 0, ""B"", True); >>> molden(wfn, 'no_root1.molden', use_natural=True). write_nbo(name)¶. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. PSI4 API: Linking C++ and Python; RHF. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/api/psi4.core.rhf.html:37895,update,updated,37895,psi4manual/1.5.0/api/psi4.core.rhf.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/api/psi4.core.rhf.html,1,['update'],['updated']
Deployability,"sity as this is often; much more costly than the energy. In addition, the Wavefunction density attributes; (Da and Db) return the SO density and must be transformed to the MO basis; to use with this function. New in version 0.5: wfn parameter passed explicitly. Returns; None. Parameters. filename (string) – destination file name for MOLDEN file (optional); do_virtual (bool) – do write all the MOs to the MOLDEN file (true) or discard the unoccupied MOs, not valid for NO’s (false) (optional); use_natural (bool) – write natural orbitals determined from density on wavefunction. Examples. Molden file with the Kohn-Sham orbitals of a DFT calculation.; >>> E, wfn = energy('b3lyp', return_wfn=True); >>> wfn.molden('mycalc.molden'). Molden file with the natural orbitals of a CCSD computation. For correlated methods, an energy call will not compute the density.; “properties” or “gradient” must be called.; >>> E, wfn = properties('ccsd', return_wfn=True); >>> wfn.molden('ccsd_no.molden', use_natural=True). To supply a custom density matrix, manually set the Da and Db of the wavefunction.; This is used, for example, to write natural orbitals coming from a root computed; by a CIWavefunction computation, e.g., detci, fci, casscf.`; The first two arguments of get_opdm can be set to n, n where n => 0 selects the root to; write out, provided these roots were computed, see NUM_ROOTS. The; third argument controls the spin (""A"", ""B"" or ""SUM"") and the final; boolean option determines whether inactive orbitals are included.; >>> E, wfn = energy('detci', return_wfn=True); >>> wfn.Da() = wfn.get_opdm(0, 0, ""A"", True); >>> wfn.Db() = wfn.get_opdm(0, 0, ""B"", True); >>> molden(wfn, 'no_root1.molden', use_natural=True). write_nbo(name)¶. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. PSI4 API: Linking C++ and Python; UHF. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/api/psi4.core.uhf.html:37895,update,updated,37895,psi4manual/1.5.0/api/psi4.core.uhf.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/api/psi4.core.uhf.html,1,['update'],['updated']
Deployability,"sity. In practice, the SCF energy will be good to 1-4 more than this number of digits. (This means that D_CONVERGENCE = 11 is overkill and will approach machine precision.) See Table SCF Convergence & Algorithm for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. DAMPING_CONVERGENCE (SCF); SCF — The density convergence threshold after which damping is no longer performed, if it is enabled. It is recommended to leave damping on until convergence, which is the default. Type: conv double; Default: 1.0e-18. DAMPING_PERCENTAGE (DCFT); DCFT — The amount (percentage) of damping to apply to the orbital update procedure: 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the previous iteration’s density being mixed into the current iteration) can help in cases where oscillatory convergence is observed. Type: double; Default: 0.0. DAMPING_PERCENTAGE (PSIMRCC); PSIMRCC — The amount (percentage) of damping to apply to the amplitude updates. 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the amplitudes from the previous iteration being mixed into the current iteration) can help in cases where oscillatory convergence is observed. Type: double; Default: 0.0. DAMPING_PERCENTAGE (SCF); SCF — The amount (percentage) of damping to apply to the early density updates. 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the previous iteration’s density being mixed into the current density) could help to solve problems with oscillatory convergence. Type: double; Default: 100.0. DCFT_GUESS (DCFT); DCFT (Expert) — Whether to read the orbitals from a previous computation, or to compute an MP2 guess. Type: string; Possible Values: CC, BCC, MP2; Default: MP2. DEBUG (CPHF); CPHF — The amount of debug information printed to the output file. Type: integ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/autodoc_glossary_options_c-1.html:21134,update,updates,21134,psi4manual/4.0b3/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_glossary_options_c-1.html,2,['update'],['updates']
Deployability,"sjoint test suites, and you have to run both ctest and pytest to fully test PSI4.; This has indeed been the case until March 2022.; The difficulty has been that (1) two test suites is unexpected so some developers don’t know to run both; and (2) there are important tests in the PSIthon suite that can’t be run on a PSI4 installation since CTest only works in a build directory.; Now, by adding an extra file to the test directory (test_input.py), PSIthon tests can also be run through pytest.; This hasn’t rolled out to all ~500 PSIthon tests (help wanted), but eventually PSI4 can be tested with a single command from a build or from an installation.; Therefore, in designing a test, choose its mode based on whether PSIthon or PsiAPI suits it better and whether it’s a simple model for users (probably PSIthon) or for expert users (probably PsiAPI).; Both will continue to work in future, and neither have limitations. Test Contents¶. Most PSI4 tests will be integration tests focusing on non-regression of user input to answers, and we insist on having these.; But if you find unit tests helpful, by all means add them to the test suite.; Most tests should store reference results (from literature or another implementation or a carefully run PSI4 calculation),; run quantum chemistry, then apply one or more of the Comparison Functions so that the test will fail if the answer is unexpected.; The functions are the same in CTest and pytest, but in the former they are, for example, compare_matrices(refmat, mat, ...) while in the latter it’s asserted, like assert compare_matrices(refmat, mat, ...).; The main advantage of the testing functions is that they provide helpful error printing upon failure. Deep down, they’re NumPy functions.; In preparing the test case reference values, aim for the converged value rather than many digits from your computer under default convergence conditions.; This will make the test more robust for different OS, different BLAS libraries, and variations in SC",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/add_tests.html:3015,integrat,integration,3015,psi4manual/1.6.x/add_tests.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/add_tests.html,5,['integrat'],['integration']
Deployability,"snapshot¶. Documentation is built automatically by GHA from the latest psi4 master commit. It gets pushed to the psi4/psi4docs repository and thence served by netlify to a site independent of psicode.org. The netlify psicode.org site has a redirect so that psicode.org/psi4manual/master presents the psi4docs netlify content.; GHA controller is https://github.com/psi4/psi4/blob/master/.github/workflows/docs.yml; This setup works great for “latest” docs, but it won’t build a nice copy on the tag because the tag commit is pushed before the tag itself, so the version shows up “undefined”.; So, anytime after “Tag (pre)release” is over, navigate on psi4 GH to the tag commit (not the record commit) and retrigger the docs GHA. Download the artifact (zipped docs dir) at the end to a local computer.; In your hugo site clone, create a new directory under static/psi4manual. Copy the zipped docs there, unpack, rearrange so that static/psi4manual/<new-tag>/index.html is present. Check in. Publish GitHub release¶. On GitHub site “Draft a New Release” with newly minted tag; Fill in frontmatter style and links from previous GitHub release; Fill in RN from hopefully existing RN issue; Fill in RN by going through the top posts from all PRs from this milestone; “publish” release. This establishes release date for GitHub API; Close the RN issue.; Close the milestone (should be 100% complete). Publish GitHub postrelease¶. On GitHub site “Draft a New Release” for anticipated or newly minted tag; Fill in frontmatter style and links from previous GitHub release; Fill in RN as cherry-pick to or edit on branch; “publish” release. This establishes release date for GitHub API. Publish psicode release¶. Copy a recent release page like https://github.com/psi4/psicode-hugo-website/blob/master/content/posts/v1p2.md; Edit its filename, title, date, image, and links; Execute https://api.github.com/repos/psi4/psi4/releases/latest and note the id field value; Use the id value in the shortcode call at the",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/manage_release-1.html:17571,release,release,17571,psi4manual/1.5.0/manage_release-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/manage_release-1.html,2,['release'],['release']
Deployability,"solver. Type: boolean; Default: true. DDX_INCORE¶. Use an in-core version, which uses more memory, but is generally faster. Type: boolean; Default: false. DDX_LOGFILE¶. Logfile to dump a full trace of the DDX solver history for debugging. Type: string; Default: No Default. DDX_SHIFT¶. Shift for characteristic function of sphere overlap. Advanced parameter, which usually does not need to be modified. Valid values are within the range [-1, 1] with -100 denoting an automatic selection of the best shift. Type: double; Default: -100.0. How to configure ddx for building Psi4¶; Role and Dependencies. Role — In PSI4, ddx is a library for providing fast continuum; solvation models.; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) ddx; Upstream Dependencies — ddx \(\Leftarrow\) Fortran. CMake Variables. ENABLE_ddx — CMake variable toggling whether Psi4 automatically installs ddx. Examples. Build and install ddx if needed. >>> cmake -DENABLE_ddx=ON. Build without ddx. >>> cmake. table of contents. Interface to ddx by A. Mikhalev, A. Jha, M. Nottoli and M. F. Herbst; Installation; Using dd-based continum solvation models; Solvent model and solvent cavity definition; DDX; DDX_MODEL; DDX_RADII; DDX_RADII_SCALING; DDX_RADII_SET; DDX_SOLVENT_EPSILON; DDX_SOLVENT. Numerical integration and discretisation parameters; DDX_SOLUTE_RADIAL_POINTS; DDX_SOLUTE_SPHERICAL_POINTS; DDX_LMAX; DDX_N_LEBEDEV. Iterative solver parameters; DDX_DIIS_MAX_VECS; DDX_MAXITER; DDX_SOLVATION_CONVERGENCE. Further keywords for ddx; DDX_ETA; DDX_FMM_LOCAL_LMAX; DDX_FMM_MULTIPOLE_LMAX; DDX_FMM; DDX_INCORE; DDX_LOGFILE; DDX_SHIFT. How to configure ddx for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to ddx by A. Mikhalev, A. Jha, M. Nottoli and M. F. Herbst. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/ddx.html:9909,integrat,integration,9909,psi4manual/1.7.x/ddx.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/ddx.html,2,"['integrat', 'update']","['integration', 'updated']"
Deployability,"solver/dft, and; pcmsolver/dipole. Keywords for PCMSolver¶. PCM¶. PCM boolean for pcmsolver module. Type: boolean; Default: false. PCM_SCF_TYPE¶. Use total or separate potentials and charges in the PCM-SCF step. Type: string; Possible Values: TOTAL, SEPARATE; Default: TOTAL. PCM_CC_TYPE¶. PCM-CCSD algorithm type. Type: string; Possible Values: PTE; Default: PTE. How to configure PCMSolver for building Psi4¶; Role and Dependencies. Role — In PSI4, PCMSolver is a library that provides additional; quantum chemical capabilities (solvation modeling).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) PCMSolver; Upstream Dependencies — PCMSolver \(\Leftarrow\) Fortran, zlib. CMake Variables. ENABLE_PCMSolver — CMake variable toggling whether Psi4 builds with PCMSolver; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For PCMSolver, set to an installation directory containing include/PCMSolver/pcmsolver.h; PCMSolver_DIR — CMake variable to specify where pre-built PCMSolver can be found. Set to installation directory containing share/cmake/PCMSolver/PCMSolverConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_PCMSolver — CMake variable to force internal build of PCMSolver instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_PCMSolver — CMake variable to force detecting pre-built PCMSolver and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_PCMSolver=ON. Build without PCMSolver. >>> cmake. table of contents. Interface to PCMSolver by R. Di Remigio; Installation; Using the polarizable continuum model; Keywords for PCMSolver; PCM; PCM_SCF_TYPE; PCM_CC_TYPE. How to configure PCMSolver for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to PCMSolver by R. Di Remigio. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/pcmsolver-1.html:4861,install,installation,4861,psi4manual/1.4.0/pcmsolver-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/pcmsolver-1.html,4,"['install', 'update']","['installation', 'updated']"
Deployability,"solver/dft, and; pcmsolver/dipole. Keywords for PCMSolver¶. PCM¶. PCM boolean for pcmsolver module. Type: boolean; Default: false. PCM_SCF_TYPE¶. Use total or separate potentials and charges in the PCM-SCF step. Type: string; Possible Values: TOTAL, SEPARATE; Default: TOTAL. PCM_CC_TYPE¶. PCM-CCSD algorithm type. Type: string; Possible Values: PTE; Default: PTE. How to configure PCMSolver for building Psi4¶; Role and Dependencies. Role — In PSI4, PCMSolver is a library that provides additional; quantum chemical capabilities (solvation modeling).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) PCMSolver; Upstream Dependencies — PCMSolver \(\Leftarrow\) Fortran, zlib. CMake Variables. ENABLE_PCMSolver — CMake variable toggling whether Psi4 builds with PCMSolver; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For PCMSolver, set to an installation directory containing include/PCMSolver/pcmsolver.h; PCMSolver_DIR — CMake variable to specify where pre-built PCMSolver can be found. Set to installation directory containing share/cmake/PCMSolver/PCMSolverConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_PCMSolver — CMake variable to force internal build of PCMSolver instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_PCMSolver — CMake variable to force detecting pre-built PCMSolver and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_PCMSolver=ON. Build without PCMSolver. >>> cmake. table of contents. Interface to PCMSolver by R. Di Remigio; Installation; Using the polarizable continuum model; Keywords for PCMSolver; PCM; PCM_SCF_TYPE; PCM_CC_TYPE. How to configure PCMSolver for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to PCMSolver by R. Di Remigio. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/pcmsolver-1.html:4861,install,installation,4861,psi4manual/1.5.0/pcmsolver-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/pcmsolver-1.html,4,"['install', 'update']","['installation', 'updated']"
Deployability,"source/build_planning.rst; Add the new page to the long list in; psi4/doc/sphinxman/CMakeLists.txt. If there are any files or; images referred to, add them to the file, too, following precedent. else¶. Build conda packages. Recipes in https://github.com/psi4/psi4meta/tree/master/conda-recipes. PSI4 and Add-On Projects Working Together. Obligations of the External Project owners are to:. allow us to contribute some CMake files to your build system; so that compile flags and dependencies (e.g., BLAS/LAPACK) can be; consistent with the PSI4 build and so the installed project can; be readily detected by PSI4 or any interested party (through a; CMake imported target).; provide us a tag at a tested commit/version number so their; development may be ongoing.; communicate with us when they’ve made improvements and minted; a new tag. In return, for Add-Ons the PSI4 project will:. leave control of their code under your purview.; maintain any interfacing code needed.; regularly run integration tests between PSI4 and your code.; build a mostly statically linked conda package so that any; of your users can obtain a pre-built binary distribution through; conda install addon --channel psi4.; provide a development sandbox for your code through PSI4 plugins.; provide conda download counts independent of PSI4. How to name keywords in psi4/src/read_options.cc¶; A few guidelines for standardizing option names among modules. TRIPLES (not trip), TRIPLETS (not trip), SINGLES (not sing),; SINGLETS (not sing); CONVERGENCE (not conv, not converge) and TOLERANCE (not tol); Convergence of a method should be governed by an E_CONVERGENCE for; energy and either a D_CONVERGENCE for density or a R_CONVERGENCE; for residual/amplitudes. All of these should be doubles- let the input; parser handle the flexible input format.; Diis should have a boolean DIIS (not do_diis, not use_diis) to turn; on/off diis extrapolation, a DIIS_MIN_VECS and DIIS_MAX_VECS for; minimum and maximum number of diis vectors to",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/manage_addon-1.html:5816,integrat,integration,5816,psi4manual/1.4.0/manage_addon-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/manage_addon-1.html,9,['integrat'],['integration']
Deployability,"source/build_planning.rst; Add the new page to the long list in; psi4/doc/sphinxman/CMakeLists.txt. If there are any files or; images referred to, add them to the file, too, following precedent. else¶. Build conda packages; Recipes in https://github.com/psi4/psi4meta/tree/master/conda-recipes. PSI4 and Add-On Projects Working Together; Obligations of the External Project owners are to:; allow us to contribute some CMake files to your build system; so that compile flags and dependencies (e.g., BLAS/LAPACK) can be; consistent with the PSI4 build and so the installed project can; be readily detected by PSI4 or any interested party (through a; CMake imported target).; provide us a tag at a tested commit/version number so their; development may be ongoing.; communicate with us when they’ve made improvements and minted; a new tag. In return, for Add-Ons the PSI4 project will:; leave control of their code under your purview.; maintain any interfacing code needed.; regularly run integration tests between PSI4 and your code.; build a mostly statically linked conda package so that any; of your users can obtain a pre-built binary distribution through; conda install addon --channel psi4.; provide a development sandbox for your code through PSI4 plugins.; provide conda download counts independent of PSI4. How to name keywords in psi4/src/read_options.cc¶; A few guidelines for standardizing option names among modules. TRIPLES (not trip), TRIPLETS (not trip), SINGLES (not sing),; SINGLETS (not sing); CONVERGENCE (not conv, not converge) and TOLERANCE (not tol); Convergence of a method should be governed by an E_CONVERGENCE for; energy and either a D_CONVERGENCE for density or a R_CONVERGENCE; for residual/amplitudes. All of these should be doubles- let the input; parser handle the flexible input format.; Diis should have a boolean DIIS (not do_diis, not use_diis) to turn; on/off diis extrapolation, a DIIS_MIN_VECS and DIIS_MAX_VECS for; minimum and maximum number of diis vectors to",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/manage_addon-1.html:5809,integrat,integration,5809,psi4manual/1.2.1/manage_addon-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/manage_addon-1.html,4,['integrat'],['integration']
Deployability,"specify:; set MODULE_NAME df_ints_num_threads n. to explicitly control the number of threads used for integral formation. Setting; this variable to 0 (the default) uses the number of threads specified by the; set_num_threads() Psithon method or the default environmental variables. PBS job file¶; To run a Psi4 job on a PBS queueing system, you need to properly set up; all necessary variables in the PBS job file. Below is a minimal example of; a PBS job file for a threaded job, and a short explanation for each section.; #!/bin/tcsh; #PBS -j oe; #PBS -l pmem=2120mb; #PBS -N jobname; #PBS -V. setenv OMP_NUM_THREADS 4; setenv MKL_NUM_THREADS 4; cd $PBS_O_WORKDIR; setenv myscratch /scratch/user/psi4.$PBS_JOBID. foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Creating scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; ssh $i mkdir -p $myscratch; end. unsetenv PSI4DATADIR; unsetenv PSIDATADIR; setenv PSI_SCRATCH $myscratch; if ! ( $?PSIPATH ) setenv PSIPATH """"; setenv PSIPATH /path/to/external/modules:${PSIPATH}; setenv PSIPATH /path/to/python/modules:${PSIPATH}; /psi/install/directory/bin/psi4 -i input.in -o input.out. foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Removing scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; end. The top section features PBS-specific commands. These depend on the; specific characteristics of your PBS queuing system but they may include:; #!/bin/tcsh; #PBS -j oe; #PBS -l pmem=2120mb; #PBS -N jobname; #PBS -V. The PBS -j oe option instructs PBS to write any output or error message; from the queuing system in dedicated files. PBS -l pmem=2120mb requests; 2120 MB of memory for each thread on the node. The total memory requested for; the job by PBS should generally be slightly greater than what indicated; in the input file (see memory setting).; In the next section, we define OMP_NUM_THREADS and MKL_NUM_THREADS; to use 4 threads for OpenMP parallelization and in threaded BLAS (see section Threading).; setenv OMP_",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/external-1.html:10518,install,install,10518,psi4manual/1.0.0/external-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/external-1.html,2,['install'],['install']
Deployability,"spersion.py; ""params"": {}, parameters for the dispersion correction; ""nlc"": False (optional) logical switch to turn off nlc (e.g. VV10) correction defined by LibXC; ""citation"": """", special reference for the dispersion correction parameters, appended to output. One can also use the dft_functional keyword argument to use the; orbitals generated by DFT for correlated wavefunction methods:; # MP2 with a PBE0 reference computation. molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis 6-31G; dft_spherical_points 302; dft_radial_points 99; reference rks; }. mp2_dft = energy(""MP2"", dft_functional=""PBE0""). Note that this would only update the generic Psi variables (e.g., “CURRENT ENERGY”) and not the MP2 or DFT variables.; Psi4 also supports easy customization and manipulation of DFT functionals. The values of alpha and omega can be adjusted with the DFT_ALPHA; and DFT_OMEGA keywords. For example, for LRC functionals, one can control the fraction of long-range Hartree-Fock and short-range DFA by changing DFT_OMEGA:; molecule ch2 {; 0 3; C; H 1 R; H 1 R 2 A. R = 1.075; A = 133.93; }. set reference uhf; set guess gwh; set basis cc-pvdz; set e_convergence 8. # Override the default value of omega; set dft_omega 2.0. E = energy('wb97x'). # Revoke the change for later computations if needed; revoke_global_option_changed('DFT_OMEGA'). This feature would be useful after finishing the IP fitting procedure, for example. table of contents. DFT: Density Functional Theory; Theory; Minimal Input; Spin/Symmetry Treatment; Functional Selection; Grid Selection; ERI Algorithms; IP Fitting; Fractional Particle Curves; Dispersion Corrections; Recommendations; Advanced Functional Use and Manipulation. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Theoretical Methods: SCF to FCI; DFT: Density Functional Theory. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/dft-1.html:34298,update,updated,34298,psi4manual/1.4.0/dft-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dft-1.html,2,['update'],['updated']
Deployability,"spersion.py; ""params"": {}, parameters for the dispersion correction; ""nlc"": False (optional) logical switch to turn off nlc (e.g. VV10) correction defined by LibXC; ""citation"": """", special reference for the dispersion correction parameters, appended to output. One can also use the dft_functional keyword argument to use the; orbitals generated by DFT for correlated wavefunction methods:; # MP2 with a PBE0 reference computation. molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis 6-31G; dft_spherical_points 302; dft_radial_points 99; reference rks; }. mp2_dft = energy(""MP2"", dft_functional=""PBE0""). Note that this would only update the generic Psi variables (e.g., “CURRENT ENERGY”) and not the MP2 or DFT variables.; Psi4 also supports easy customization and manipulation of DFT functionals. The values of alpha and omega can be adjusted with the DFT_ALPHA; and DFT_OMEGA keywords. For example, for LRC functionals, one can control the fraction of long-range Hartree-Fock and short-range DFA by changing DFT_OMEGA:; molecule ch2 {; 0 3; C; H 1 R; H 1 R 2 A. R = 1.075; A = 133.93; }. set reference uhf; set guess gwh; set basis cc-pvdz; set e_convergence 8. # Override the default value of omega; set dft_omega 2.0. E = energy('wb97x'). # Revoke the change for later computations if needed; revoke_global_option_changed('DFT_OMEGA'). This feature would be useful after finishing the IP fitting procedure, for example. table of contents. DFT: Density Functional Theory; Theory; Minimal Input; Spin/Symmetry Treatment; Functional Selection; Grid Selection; ERI Algorithms; IP Fitting; Fractional Particle Curves; Dispersion Corrections; Recommendations; Advanced Functional Use and Manipulation. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Theoretical Methods: SCF to FCI; DFT: Density Functional Theory. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/dft-1.html:34371,update,updated,34371,psi4manual/1.5.0/dft-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/dft-1.html,2,['update'],['updated']
Deployability,"spersion_parameters [1.20]; optimize('b3lyp-d2'). DFT-D3ZERO single point (b3lyp) with custom s8 parameter (reset all four values); set dft_dispersion_parameters [1.0, 2.0, 1.261, 14.0]; energy('b3lyp-d3'). If only dispersion corrections (rather than total energies) are of; interest, the dftd3 program can be run independently of the scf; through the python function run_dftd3(). (This function; is the same PSI4/dftd3 interface that is called during an scf job.); This route is much faster than running a DFT-D energy. Some set-up:; molecule nene {; Ne; Ne 1 2.0; }. nene.update_geometry(). The same four dispersion corrections/gradients as the section above:; >>> print nene.run_dftd3('bp86', 'd', dertype=0); -7.735e-05. >>> E, G = nene.run_dftd3('pbe', 'd3bj'); >>> print G; [[0.0, 0.0, -1.1809087569358e-05], [0.0, 0.0, 1.1809087569358e-05]]. >>> E, G = nene.run_dftd3('b3lyp', 'd2', {'s6': 1.20}); >>> print E; -8.84e-05. >>> E, G = nene.run_dftd3(dashlvl='d3', dashparam={'s8': 2.0, 'alpha6': 14.0, 'sr6': 1.261, 's6': 1.0}); >>> print E; -0.00024762. run_dftd3(self, func=None, dashlvl=None, dashparam=None, dertype=None)¶; Function to call Grimme’s dftd3 program (http://toc.uni-muenster.de/DFTD3/); to compute the -D correction of level dashlvl using parameters for; the functional func. The dictionary dashparam can be used to supply; a full set of dispersion parameters in the absense of func or to supply; individual overrides in the presence of func. Returns energy if dertype is 0,; gradient if dertype is 1, else tuple of energy and gradient if dertype; unspecified. The dftd3 executable must be independently compiled and found in ; PATH. Table Of Contents. Interface to DFTD3 by S. Grimme; Installation; Theory; Running DFTD3. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    ; PSI4 [beta3] » . © Copyright 2012, The Psi4 Project.; Last updated on Oct 16, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/dftd3.html:7332,update,updated,7332,psi4manual/4.0b3/dftd3.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/dftd3.html,1,['update'],['updated']
Deployability,"sponse contributions for PDMs and GFM?. Type: boolean; Default: true. REPL_OTF (DETCI); DETCI (Expert) — Do string replacements on the fly in DETCI? Can save a gigantic amount of memory (especially for truncated CI’s) but is somewhat flaky and hasn’t been tested for a while. It may work only works for certain classes of RAS calculations. The current code is very slow with this option turned on. Type: boolean; Default: false. RESPONSE_ALGORITHM (DCFT); DCFT — Algorithm to use for the solution of DC-06 response equations in computation of analytic gradients and properties. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS; Default: TWOSTEP. RESTART (CCENERGY); CCENERGY — Do restart the coupled-cluster iterations from old and amplitudes? For geometry optimizations, Brueckner calculations, etc. the iterative solution of the CC amplitude equations may benefit considerably by reusing old vectors as initial guesses. Assuming that the MO phases remain the same between updates, the CC codes will, by default, re-use old vectors, unless the user sets RESTART = false. Type: boolean; Default: true. RESTART (CCLAMBDA); CCLAMBDA — Do restart the coupled-cluster iterations from old and amplitudes?. Type: boolean; Default: false. RESTART (CCRESPONSE); CCRESPONSE — Do restart from on-disk amplitudes?. Type: boolean; Default: true. RESTART (DETCI); DETCI — Do restart a DETCI iteration that terminated prematurely? It assumes that the CI and sigma vectors are on disk. Type: boolean; Default: false. RESTART_EOM_CC3 (CCEOM); CCEOM — Do restart from on-disk?. Type: boolean; Default: false. RESTRICTED_DOCC (GLOBALS); GLOBALS — An array giving the number of restricted doubly-occupied orbitals per irrep (not excited in CI wavefunctions, but orbitals can be optimized in MCSCF). Type: array; Default: No Default. RESTRICTED_UOCC (GLOBALS); GLOBALS — An array giving the number of restricted unoccupied orbitals per irrep (not occupied in CI wavefunctions, but orbitals can be optimized in MCSCF)",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:195311,update,updates,195311,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html,2,['update'],['updates']
Deployability,"ss(at) for at in range(mol.natom())]); irrep_labels = mol.irrep_labels(). vibinfo, vibtext = qcdb.vib.harmonic_analysis(nmwhess,; geom,; m,; wfn.basisset(),; irrep_labels,; dipder=dipder,; project_trans=project_trans,; project_rot=project_rot); vibrec.update({k: qca.json() for k, qca in vibinfo.items()}). core.print_out(vibtext); core.print_out(qcdb.vib.print_vibs(vibinfo, shortlong=True, normco='x', atom_lbl=symbols)). if core.has_option_changed('THERMO', 'ROTATIONAL_SYMMETRY_NUMBER'):; rsn = core.get_option('THERMO', 'ROTATIONAL_SYMMETRY_NUMBER'); else:; rsn = mol.rotational_symmetry_number(). if irrep is None:; therminfo, thermtext = qcdb.vib.thermo(; vibinfo,; T=core.get_option(""THERMO"", ""T""), # 298.15 [K]; P=core.get_option(""THERMO"", ""P""), # 101325. [Pa]; multiplicity=mol.multiplicity(),; molecular_mass=np.sum(m),; sigma=rsn,; rotor_type=mol.rotor_type(),; rot_const=np.asarray(mol.rotational_constants()),; E0=core.variable('CURRENT ENERGY')) # someday, wfn.energy(); vibrec.update({k: qca.json() for k, qca in therminfo.items()}). core.set_variable(""ZPVE"", therminfo['ZPE_corr'].data) # P::e THERMO; core.set_variable(""THERMAL ENERGY CORRECTION"", therminfo['E_corr'].data) # P::e THERMO; core.set_variable(""ENTHALPY CORRECTION"", therminfo['H_corr'].data) # P::e THERMO; core.set_variable(""GIBBS FREE ENERGY CORRECTION"", therminfo['G_corr'].data) # P::e THERMO. core.set_variable(""ZERO K ENTHALPY"", therminfo['ZPE_tot'].data) # P::e THERMO; core.set_variable(""THERMAL ENERGY"", therminfo['E_tot'].data) # P::e THERMO; core.set_variable(""ENTHALPY"", therminfo['H_tot'].data) # P::e THERMO; core.set_variable(""GIBBS FREE ENERGY"", therminfo['G_tot'].data) # P::e THERMO. core.print_out(thermtext); else:; core.print_out(' Thermochemical analysis skipped for partial frequency calculation.\n'). if core.get_option('FINDIF', 'HESSIAN_WRITE'):; filename = core.get_writer_file_prefix(mol.name()) + "".vibrec""; with open(filename, 'w') as handle:; json.dump(vibrec, handle, sort_keys=True, ind",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/driver.html:83356,update,update,83356,psi4manual/1.6.x/_modules/psi4/driver/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/driver.html,5,['update'],['update']
Deployability,"ss, symbol, label, x, y, z, basis=None, shells=None):; CoordEntry.__init__(self, entry_number, Z, charge, mass, symbol, label, basis, shells); self.x = x; self.y = y; self.z = z. [docs] def compute(self):; """"""Computes the values of the coordinates (in whichever units; were inputted), returning them in a Vector. """"""; if self.computed:; return self.coordinates; self.coordinates[0] = self.x.compute(); self.coordinates[1] = self.y.compute(); self.coordinates[2] = self.z.compute(); self.computed = True; return self.coordinates. [docs] def set_coordinates(self, x, y, z):; """"""Given the current set of coordinates, updates the values of this; atom's coordinates and any variables that may depend on it. """"""; self.coordinates[0] = x; self.coordinates[1] = y; self.coordinates[2] = z. self.x.rset(x); self.y.rset(y); self.z.rset(z). self.computed = True. [docs] def type(self):; """"""The type of CoordEntry specialization.""""""; return 'CartesianCoord'. [docs] def print_in_input_format(self):; """"""Prints the updated geometry, in the format provided by the user.""""""; xstr = self.x.variable_to_string(12); ystr = self.y.variable_to_string(12); zstr = self.z.variable_to_string(12); return "" %17s %17s %17s\n"" % (xstr, ystr, zstr); # should go to outfile. [docs] def print_in_input_format_cfour(self):; """"""Prints the updated geometry, in the format provided by the user.; This, for Cfour, not different from regular version. """"""; xstr = self.x.variable_to_string(12); ystr = self.y.variable_to_string(12); zstr = self.z.variable_to_string(12); return "" %17s %17s %17s\n"" % (xstr, ystr, zstr); # should go to outfile. [docs] def invalidate(self):; """"""Flags the current coordinates as being outdated.""""""; self.computed = False; self.x.invalidate(); self.y.invalidate(); self.z.invalidate(). [docs] def clone(self):; """"""Returns new, independent CartesianEntry object""""""; return copy.deepcopy(self). [docs] def everything(self):; CoordEntry.everything(self); print('\nCartesianEntry\n Type = %s\n x = %s\n y = %s\n",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/libmintscoordentry.html:12672,update,updated,12672,psi4manual/1.0.0/_modules/qcdb/libmintscoordentry.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/libmintscoordentry.html,1,['update'],['updated']
Deployability,"ssage = '\nDftd3Error: %s\n\n' % msg. [docs]class PastureRequiredError(PsiException):; """"""Error called when the specified value of *option* requires some; module(s) from Psi4Pasture, but could not be imported.; """"""; msg_tmpl = """"""Psi4Pasture module(s) [{modlist}] are required to change the default value of {opt}. """"""; install_instructions = """"""; Note: Psi4Pasture is currently in an experimental state with no reliable install; procedure yet, but this is what it would look like. To Build Psi4Pasture and install the required modules within your current; Psi4 installation. >>> # clone the pasture repo; >>> git clone https://github.com/psi4/psi4pasture.git. >>> cmake -S. -Bobjdir -Dpsi4_DIR=$PSI4_INSTALL_PREFIX/share/cmake/psi4 {module_args}; >>> # $PSI4_INSTALL_PREFIX is the $CMAKE_INSTALL_PREFIX for the psi4; >>> # install you want to install pasture to. >>> # build + install install location is detected automatically; >>> cd objdir; >>> make && make install. See https://github.com/psi4/psi4pasture for more details. Or to install using psi4's own build system add; {module_args}; to cmake command line when building psi4.; """"""; pasture_required_modules = {""RUN_CCTRANSORT"": [""ccsort"", ""transqt2""]}. def __init__(self, option):; mods_str = "", "".join([m for m in PastureRequiredError.pasture_required_modules[option]]); msg = PastureRequiredError.msg_tmpl.format(opt=option, modlist=mods_str); PsiException.__init__(self, msg); module_cmake_args = "" "".join(; [""-DENABLE_{}=ON"".format(module) for module in PastureRequiredError.pasture_required_modules[option]]); msg += PastureRequiredError.install_instructions.format(module_args=module_cmake_args); self.message = '\nPsiException: {}\n\n'.format(msg); core.print_out(self.message). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .  · ; 1.4;  · . PSI4. Module code; psi4.driver.p4util.exceptions. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/p4util/exceptions.html:8085,install,install,8085,psi4manual/1.4.0/_modules/psi4/driver/p4util/exceptions.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/p4util/exceptions.html,2,"['install', 'update']","['install', 'updated']"
Deployability,"ssage = '\nDftd3Error: %s\n\n' % msg. [docs]class PastureRequiredError(PsiException):; """"""Error called when the specified value of *option* requires some; module(s) from Psi4Pasture, but could not be imported.; """"""; msg_tmpl = """"""Psi4Pasture module(s) [{modlist}] are required to change the default value of {opt}. """"""; install_instructions = """"""; Note: Psi4Pasture is currently in an experimental state with no reliable install; procedure yet, but this is what it would look like. To Build Psi4Pasture and install the required modules within your current; Psi4 installation. >>> # clone the pasture repo; >>> git clone https://github.com/psi4/psi4pasture.git. >>> cmake -S. -Bobjdir -Dpsi4_DIR=$PSI4_INSTALL_PREFIX/share/cmake/psi4 {module_args}; >>> # $PSI4_INSTALL_PREFIX is the $CMAKE_INSTALL_PREFIX for the psi4; >>> # install you want to install pasture to. >>> # build + install install location is detected automatically; >>> cd objdir; >>> make && make install. See https://github.com/psi4/psi4pasture for more details. Or to install using psi4's own build system add; {module_args}; to cmake command line when building psi4.; """"""; pasture_required_modules = {""RUN_CCTRANSORT"": [""ccsort"", ""transqt2""]}. def __init__(self, option):; mods_str = "", "".join([m for m in PastureRequiredError.pasture_required_modules[option]]); msg = PastureRequiredError.msg_tmpl.format(opt=option, modlist=mods_str); PsiException.__init__(self, msg); module_cmake_args = "" "".join(; [""-DENABLE_{}=ON"".format(module) for module in PastureRequiredError.pasture_required_modules[option]]); msg += PastureRequiredError.install_instructions.format(module_args=module_cmake_args); self.message = '\nPsiException: {}\n\n'.format(msg); core.print_out(self.message). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .  · ; 1.5;  · . PSI4. Module code; psi4.driver.p4util.exceptions. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/_modules/psi4/driver/p4util/exceptions.html:8085,install,install,8085,psi4manual/1.5.0/_modules/psi4/driver/p4util/exceptions.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/_modules/psi4/driver/p4util/exceptions.html,2,"['install', 'update']","['install', 'updated']"
Deployability,"ssage is not generally seen, as driver_util catches and edits it from `stats`; conditions2 = [stats[k][1] for k in [""method_type"", ""reference"", ""fcae"", ""qc_module""]]; msg = f""Method={stats['method']} is not available for target derivative level (dertype={derivative_int}) under conditions {', '.join(conditions2)}. See {stats['link']}."". PsiException.__init__(self, msg); self.message = msg; self.stats = stats. # Dftd3Error ceased to be used by v1.4. Class removed by v1.7; # class Dftd3Error(PsiException):. [docs]class PastureRequiredError(PsiException):; """"""Error called when the specified value of *option* requires some; module(s) from Psi4Pasture, but could not be imported.; """"""; msg_tmpl = """"""Psi4Pasture module(s) [{modlist}] are required to change the default value of {opt}. """"""; install_instructions = """"""; Note: Psi4Pasture is currently in an experimental state with no reliable install; procedure yet, but this is what it would look like. To Build Psi4Pasture and install the required modules within your current; Psi4 installation. >>> # clone the pasture repo; >>> git clone https://github.com/psi4/psi4pasture.git. >>> cmake -S. -Bobjdir -Dpsi4_DIR=$PSI4_INSTALL_PREFIX/share/cmake/psi4 {module_args}; >>> # $PSI4_INSTALL_PREFIX is the $CMAKE_INSTALL_PREFIX for the psi4; >>> # install you want to install pasture to. >>> # build + install install location is detected automatically; >>> cd objdir; >>> make && make install. See https://github.com/psi4/psi4pasture for more details. Or to install using psi4's own build system add; {module_args}; to cmake command line when building psi4.; """"""; pasture_required_modules = {""RUN_CCTRANSORT"": [""ccsort"", ""transqt2""]}. def __init__(self, option):; mods_str = "", "".join([m for m in PastureRequiredError.pasture_required_modules[option]]); msg = PastureRequiredError.msg_tmpl.format(opt=option, modlist=mods_str); PsiException.__init__(self, msg); module_cmake_args = "" "".join(; [""-DENABLE_{}=ON"".format(module) for module in PastureRequ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/p4util/exceptions.html:13339,install,install,13339,psi4manual/1.7.x/_modules/psi4/driver/p4util/exceptions.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/p4util/exceptions.html,2,['install'],"['install', 'installation']"
Deployability,"ssians with vmfc treatment.   2vmfc;   (nat*3, nat*3); when driver is h & max_nbody>=2; zeroed if vmfc not in bsse_type; cumulative through 2-body total Hessians with vmfc treatment.   {max_nbody}vmfc;   (nat*3, nat*3); when driver is h; zeroed if vmfc not in bsse_type; cumulative through {max_nbody}-body total Hessians with vmfc treatment. intermediates; ntasks; always; all individual energies with nice labels.   N-BODY (1, 2)@(1, 2) TOTAL ENERGY;   1; always; total energy for 1st modelchem, 1st & 2nd fragments in basis of 1st & 2nd fragments.   N-BODY (3)@(2, 3) TOTAL ENERGY;   1; always; total energy for 2nd modelchem, 3rd fragment in basis of 2nd and 3rd fragments.   …. intermediates_energy; ntasks; always; all individual energies.   1_((1, 2), (1, 2));   1; always; total energy for 1st modelchem, 1st & 2nd fragments in basis of 1st & 2nd fragments.   2_((3,), (2, 3));   1; always; total energy for 2nd modelchem, 3rd fragment in basis of 2nd and 3rd fragments.   …. intermediates_gradient; ntasks; when driver is g/h; all individual gradients.   1_((1, 2), (1, 2));   (nat, 3); when driver is g/h; total gradient for 1st modelchem, 1st & 2nd fragments in basis of 1st & 2nd fragments.   2_((3,), (2, 3));   (nat, 3); when driver is g/h; total gradient for 2nd modelchem, 3rd fragment in basis of 2nd and 3rd fragments.   …. intermediates_hessian; ntasks; when driver is h; all individual Hessians.   1_((1, 2), (1, 2));   (nat*3, nat*3); when driver is h; total Hessian for 1st modelchem, 1st & 2nd fragments in basis of 1st & 2nd fragments.   2_((3,), (2, 3));   (nat*3, nat*3); when driver is h; total Hessian for 2nd modelchem, 3rd fragment in basis of 2nd and 3rd fragments.   …. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.6;  · . PSI4. Psithon Functions: Invoking a Calculation; Basis Set Superposition Corrections. © Copyright 2022, The Psi4 Project.; Last updated on Thursday, 19 May 2022 08:57PM.; Created using Sphinx 4.5.0.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/nbody.html:23616,update,updated,23616,psi4manual/1.6.x/nbody.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/nbody.html,1,['update'],['updated']
Deployability,"ssible Values: NONE; Default: NONE. HESS_TYPE (OMP3); OMP3 — Type Hessian matrix will be used in orbital optimization procedure. Type: string; Possible Values: NONE; Default: NONE. HESS_UPDATE (OPTKING); OPTKING — Hessian update scheme. Type: string; Possible Values: NONE, BFGS, MS, POWELL, BOFILL; Default: BFGS. HESS_UPDATE_LIMIT (OPTKING); OPTKING — Do limit the magnitude of changes caused by the Hessian update?. Type: boolean; Default: true. HESS_UPDATE_LIMIT_MAX (OPTKING); OPTKING — If HESS_UPDATE_LIMIT is true, changes to the Hessian from the update are limited to the larger of HESS_UPDATE_LIMIT_SCALE * (the previous value) and HESS_UPDATE_LIMIT_MAX [au]. Type: double; Default: 1.00. HESS_UPDATE_LIMIT_SCALE (OPTKING); OPTKING — If HESS_UPDATE_LIMIT is true, changes to the Hessian from the update are limited to the larger of HESS_UPDATE_LIMIT_SCALE * (the previous value) and HESS_UPDATE_LIMIT_MAX [au]. Type: double; Default: 0.50. HESS_UPDATE_USE_LAST (OPTKING); OPTKING — Number of previous steps to use in Hessian update, 0 uses all. Type: integer; Default: 1. ICORE (DETCI); DETCI — Specifies how to handle buffering of CI vectors. A value of 0 makes the program perform I/O one RAS subblock at a time; 1 uses entire CI vectors at a time; and 2 uses one irrep block at a time. Values of 0 or 2 cause some inefficiency in the I/O (requiring multiple reads of the C vector when constructing H in the iterative subspace if DIAG_METHOD = SEM), but require less core memory. Type: integer; Default: 1. IGNORE_TAU (DCFT); DCFT (Expert) — Controls whether to ignore terms containing non-idempotent contribution to OPDM or not (for debug puproses only). For practical applications only the default must be used. Type: boolean; Default: false. INTCO_FIXED_EQ_FORCE_CONSTANT (OPTKING); OPTKING — In constrained optimizations, for internal coordinates with user-specified equilibrium values, this is the force constant (in au) used to apply an additional force to each coordinate. If the use",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/autodoc_glossary_options_c-1.html:53140,update,update,53140,psi4manual/4.0b3/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_glossary_options_c-1.html,2,['update'],['update']
Deployability,"ssible to specify a certain; library for the linker e.g.,; --with-boost-thread=boost_thread-gcc-mt. Step 2: Compilation; Running make (which must be GNU’s ‘make’ utility) in $objdir will compile; the PSI4 libraries and executable modules. Step 3: Testing; To execute automatically the ever-growing number of test cases after; compilation, simply execute make tests in the $objdir directory.; This will run each (relatively small) test case and report the results.; Failure of any of the test cases should be reported to the developers.; By default, any such failure will stop the testing process. If you desire; to run the entire testing suit without interruption, execute make tests; TESTFLAGS='-u -q'. Note that you must do a make testsclean in $objdir; to run the test suite again. Step 4: Installation; Once testing is complete, installation into $prefix is accomplished by; running make install in $objdir. Executable modules are installed in; $prefix/bin, include files in $prefix/include, libraries in $prefix/lib, and; basis set data and various control structures in $prefix/share. Step 5: Building Documentation; This is not recommended because all of the documentation should be; available at http://sirius.chem.vt.edu/psi4manual/latest/index.html; (link “docs” off http://www.psicode.org), and it is automatically updated. However,; if your system has the appropriate utilities (notably the sphinx package; and LaTeX), you may build the package documentation from the top-level; $objdir by running make doc. The resulting files will appear in the; $prefix/doc area. Step 6: Cleaning; All object files and libraries can be removed to save disk space by running; make clean in $objdir. Step 7: User Configuration; After the PSI4 package has been successfully installed, the user will need; to add the installation directory into his/her path. If the package has; been installed in the default location /usr/local/psi, then in C shell,; the user should add something like the following to the",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/installfile.html:17770,install,installed,17770,psi4manual/4.0b3/installfile.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/installfile.html,3,['install'],['installed']
Deployability,"ssion of; the proposed change or practice.; Anyone can comment by adding sections to the bottom of the reST file.; Alternatively, e-mail discussions can go out and the (possibly edited); results be pasted into the bottom of the reST file once the furor dies; down.; Comments can be simple statements of agreement (useful for gauging; consensus), notation of possible problems, proposed re-writes of the; proposal, etc. Only the original author or his designate should change; the main body of the PsiPEP (to maintain a history).; Once there’s agreement, file can be stamped final and be placed into; effect. (Yes, this is very vague.). Roles of a PsiPEP Include¶. Best practices or re-vamped best practices; Practices can be easily linked- or referred-to by number and can be; tagged as obsolete by a single label change months later. Request/present viewpoint on organization; Draw attention to organization needed in code outside one’s area of; expertise. Request interface for some structure (e.g., gradients) or; viewpoints on how that interface will behave to ensure compatibility.; Offer philosophy on how processes/definitions should be. Fair Warning: Proposal to change things up; Announce plans to re-organize code structure or how something is; handled. List goals (may be conflicting) and how proposed scheme best; satisfies them. PsiPEP allows discussion before roll-out in case; proposal has deleterious side-effects. The contrast between a PsiPEP and a ticket is that for the latter, there’s; no question of whether the task is to be done as described. Comments¶; 04-Jul-2012, LAB. table of contents. PEP1: Proposing PsiPEP for PSI4; Path of a PsiPEP; Roles of a PsiPEP Include; Comments. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.6;  · . PSI4. PsiPEP: Plans and Practices to Organize PSI4; PEP1: Proposing PsiPEP for PSI4. © Copyright 2022, The Psi4 Project.; Last updated on Thursday, 19 May 2022 08:57PM.; Created using Sphinx 4.5.0.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/pep0001.html:3192,update,updated,3192,psi4manual/1.6.x/pep0001.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/pep0001.html,1,['update'],['updated']
Deployability,"ssors have been added; so that the executable can show where the module is, and the module; can show where the executable is. > /path/to/psi4/install/bin/psi4 --module; /path/to/psi4/install/lib//; > python -c ""import psi4;print(psi4.executable)""; /path/to/psi4/install/bin/psi4. table of contents. Compiling and Installing from Source; Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies; How to use conda to get a Psi4 development environment; How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda; How to see what build configuration options are available; How to install elsewhere than /usr/local/psi4; How to compile for debugging; How to choose the compilation directory, {objdir}; How to save configuration settings for a future compilation; What is the directory layout of the installed or staged Psi4; How to run Psi4 as executable after compilation; How to solve ModuleNotFoundError: No module named 'psi4'; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/build_planning.html:61279,install,install,61279,psi4manual/1.6.x/build_planning.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/build_planning.html,35,"['configurat', 'install']","['configuration', 'install', 'installation', 'installed']"
Deployability,"ssume that the conda command is in your path; you may have to log out and log back in for which conda to return correctly. >>> bash Miniconda-latest-Linux-x86_64.sh; # check; >>> which conda; /path/to/miniconda/bin/conda. Update conda. This updates the package manager itself. >>> conda update conda. Detailed Installation of PSI4¶. Subscribe to PSI4. Subscribe to our channel at http://anaconda.org/psi4 that contains the PSI4 package and several dependency packages. Make sure this shows up in your ~/.condarc file. >>> conda config --add channels http://conda.anaconda.org/psi4; # check; >>> cat ~/.condarc; channels:; - http://conda.anaconda.org/psi4; - defaults. Install PSI4. You can install into the main conda environment so that whenever commands conda or (Ana/Miniconda’s) python are available, then psi4 is available, too. >>> conda install psi4; # check; >>> which psi4; /path/to/miniconda/bin/psi4. Or, you can install into a conda environment that places PSI4 and its dependencies (including python) into a sandbox unaffected by any other software installed in Ana/Miniconda. This is recommended for developers to avoid interference between multiple versions (including github/conda versions) or to test python versions, etc.. If your main conda is not python=2.7, then PSI4 must be installed into a conda environment. In practical terms, installing into a conda environment means you can turn PSI4‘s availability on/off by switching conda environments without turning on/off the whole Ana/Miniconda installation. Below, PSI4 is installed into an environment called p4env. Then the environment is activated, removing the main Ana/Miniconda bin and adding envs/p4env/bin to PATH. The activate command only works in bash, so csh/tcsh will need corresponding adjustments.; >>> conda create -n p4env psi4; >>> source activate p4env; # check; >>> which psi4; /path/to/miniconda/envs/p4env/bin/psi4. The output for either of the installation commands above looks like the following. It checks",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/conda-1.html:13780,install,install,13780,psi4manual/1.1.0/conda-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/conda-1.html,4,['install'],"['install', 'installed']"
Deployability,"ssume that the conda command is in your path; you may have to log out and log back in for which conda to return correctly. >>> bash Miniconda-latest-Linux-x86_64.sh; # check; >>> which conda; /path/to/miniconda/bin/conda. Update conda. This updates the package manager itself. >>> conda update conda. Detailed Installation of PSI4¶. Subscribe to PSI4. Subscribe to our channel at http://anaconda.org/psi4 that contains the PSI4 package and several dependency packages. Make sure this shows up in your ~/.condarc file. >>> conda config --add channels http://conda.anaconda.org/psi4; # check; >>> cat ~/.condarc; channels:; - http://conda.anaconda.org/psi4; - defaults. Install PSI4. You can install into the main conda environment so that whenever commands conda or (Ana/Miniconda’s) python are available, then psi4 is available, too. >>> conda install psi4; # check; >>> which psi4; /path/to/miniconda/bin/psi4. Or, you can install into a conda environment that places PSI4 and its dependencies (including python) into a sandbox unaffected by any other software installed in Ana/Miniconda. This is recommended for developers to avoid interference between multiple versions (including github/conda versions) or to test python versions, etc.. In practical terms, installing into a conda environment means you can turn PSI4’s availability on/off by switching conda environments without turning on/off the whole Ana/Miniconda installation. Below, PSI4 is installed into an environment called p4env. Then the environment is activated, removing the main Ana/Miniconda bin and adding envs/p4env/bin to PATH. The conda activate command (conda >=4.4; December 2017) works in all shells, but if you’re using old source activate that only works for bash; adjust as needed for csh/tcsh.; >>> conda create -n p4env psi4; >>> conda activate p4env; # check; >>> which psi4; /path/to/miniconda/envs/p4env/bin/psi4. The output for either of the installation commands above looks like the following. It checks what pac",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/conda-1.html:16203,install,install,16203,psi4manual/1.2.1/conda-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/conda-1.html,8,['install'],"['install', 'installed']"
Deployability,"ssume that the conda command is in your path; you may have to log out and log back in for which conda to return correctly. >>> bash Miniconda-latest-Linux-x86_64.sh; # check; >>> which conda; /path/to/miniconda/bin/conda. Update conda. This updates the package manager itself. >>> conda update conda. Detailed Installation of Psi4¶. Subscribe to Psi4. Subscribe to our channel at http://anaconda.org/psi4 that contains the Psi4 package and several dependency packages. Make sure this shows up in your ~/.condarc file. >>> conda config --add channels http://conda.anaconda.org/psi4; # check; >>> cat ~/.condarc; channels:; - http://conda.anaconda.org/psi4; - defaults. Install Psi4. You can install into the main conda environment so that whenever commands conda or (Ana/Miniconda’s) python are available, then psi4 is available, too. >>> conda install psi4; # check; >>> which psi4; /path/to/miniconda/bin/psi4. Or, you can install into a conda environment that places Psi4 and its dependencies (including python) into a sandbox unaffected by any other software installed in Ana/Miniconda. This is recommended for developers to avoid interference between multiple versions (including github/conda versions) or to test python versions, etc.. If your main conda is not python=2.7, then Psi4 must be installed into a conda environment. In practical terms, installing into a conda environment means you can turn Psi4‘s availability on/off by switching conda environments without turning on/off the whole Ana/Miniconda installation. Below, Psi4 is installed into an environment called p4env. Then the environment is activated, removing the main Ana/Miniconda bin and adding envs/p4env/bin to PATH. The activate command only works in bash, so csh/tcsh will need corresponding adjustments.; >>> conda create -n p4env psi4; >>> source activate p4env; # check; >>> which psi4; /path/to/miniconda/envs/p4env/bin/psi4. The output for either of the installation commands above looks like the following. It checks",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/conda-1.html:9054,install,install,9054,psi4manual/1.0.0/conda-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/conda-1.html,4,['install'],"['install', 'installed']"
Deployability,"ss’s CFOUR program [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples:. >>> # [1] Analytic hf optimization; >>> optimize('hf'). >>> # [2] Finite difference mp5 optimization with gradient; >>> # printed to output file; >>> e, wfn = opt('mp5', return_wfn='yes'); >>> wfn.gradient().print_out(). >>> # [3] Can automatically perform complete basis set extrapolations; >>> optimize('MP2/cc-pV([D,T]+d)Z'). >>> # [4] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> optimize(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). >>> # [5] Get info like geometry, gradient, energy back after an; >>> # optimization fails. Note that the energy and gradient; >>> # correspond to the last optimization cycle, whereas the; >>> # geometry (by default) is the anticipated *next* optimization step.; >>> try:; >>> optimize('hf/cc-pvtz'); >>> except psi4.OptimizationConvergenceError as ex:; >>> next_geom_coords_as_numpy_array = np.asarray(ex.wfn.molecule().geometry()). table of contents. opt; opt(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; opt. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.opt.html:17220,update,updated,17220,psi4manual/1.8.x/api/psi4.driver.opt.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.opt.html,1,['update'],['updated']
Deployability,"ss’s CFOUR program [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples:. >>> # [1] Analytic hf optimization; >>> optimize('hf'). >>> # [2] Finite difference mp5 optimization with gradient; >>> # printed to output file; >>> e, wfn = opt('mp5', return_wfn='yes'); >>> wfn.gradient().print_out(). >>> # [3] Can automatically perform complete basis set extrapolations; >>> optimize('MP2/cc-pV([D,T]+d)Z'). >>> # [4] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> optimize(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). >>> # [5] Get info like geometry, gradient, energy back after an; >>> # optimization fails. Note that the energy and gradient; >>> # correspond to the last optimization cycle, whereas the; >>> # geometry (by default) is the anticipated *next* optimization step.; >>> try:; >>> optimize('hf/cc-pvtz'); >>> except psi4.OptimizationConvergenceError as ex:; >>> next_geom_coords_as_numpy_array = np.asarray(ex.wfn.molecule().geometry()). table of contents. opt; opt(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.9.1;  · . PSI4. PSI4 API: Linking C++ and Python; opt. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 08 February 2024 09:32PM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/api/psi4.driver.opt.html:17656,update,updated,17656,psi4manual/1.9.x/api/psi4.driver.opt.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/api/psi4.driver.opt.html,1,['update'],['updated']
Deployability,"st -k ""not testname""; * Run tests matching by label: pytest -m testlabel; * Run tests excluding those by label: pytest -m ""not testlabel"". How to see CTest testing errors¶; >>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ctest reports that some (or all) tests have failed, look in your; build directory for file; objdir/Testing/Temporary/LastTest.log. It may have a; .tmp extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake’s testing; output, as well as everything that was printed to the screen. How to test a Psi4 installation¶; ctest requires a connection to source files and cmake; machinery and so can only be performed from objdir; (staged installation). To test an installed PSI4 (full or staged; installation), a supplementary test suite is available to be; run via pytest. Running a limited number of “smoke” tests is; generally sufficient to verify an installation. From the executable; # smoke tests only in serial; psi4 --test; # smoke tests only in parallel; psi4 --test -n`getconf _NPROCESSORS_ONLN`; # most tests; psi4 --test full. From the library (PSI4 must be detectable as a Python; module. See setup at How to configure paths for PsiAPI; if needed.); # smoke tests only; python -c ""import psi4; psi4.test('smoke')""; # most tests; python -c ""import psi4; psi4.test()"". From pytest directly. If package pytest-xdist is installed, can run in parallel.; # smoke tests only; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -m smoke -n`getconf _NPROCESSORS_ONLN`; # all tests; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -n`getconf _NPROCESSORS_ONLN`. Output looks something like the below. PASSED in green is good; (means test ran correctly); SKIPPED in yellow is good (means that; not al",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/build_planning-1.html:54550,install,installed,54550,psi4manual/1.4.0/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/build_planning-1.html,8,['install'],"['installation', 'installed']"
Deployability,"st define a table (on line 10) with two row indices and three column; indices. As the potential energy scan is performed, the results are stored; (line 22) and the final table is printed to the output file (line 24). The; table is converted from absolute energies to relative energies (in kcal mol-1); on line 26, before being printed again. The relative energies are reported with; respect to the lowest value in each column. More examples of how to control the; formatting of the tables can be found in the sample input files provided; see; Appendix Test Suite and Sample Inputs for a complete listing. Python Wrappers¶; The Python foundations of the PSI4 driver and Psithon syntax permit; many commonly performed post-processing procedures to be integrated into; the PSI4 suite.; Among these are automated computations of interaction energies through; cp(), of a model chemistry applied to a database of systems through; database(), and of several model chemistries together approximating greater; accuracy through cbs().; These are discussed separately in section Psithon Functions: Invoking a Calculation.; Note that the options documented for Python functions are placed as arguments; in the command that calls the function; not in the set globals block or with any other set command. Table Of Contents. Psithon: Structuring an Input File; Physical Constants; Molecule Specification; Multiple Molecules; Molecule Keywords; Ghost Atoms. Geometries from the PubChem Database; Symmetry; Non-Covalently Bonded Molecule Fragments; Job Control; Assigning Basis Sets; Memory Specification; Return Values and PSI Variables; Loops; Tables of Results; Python Wrappers. Previous topic; A PSI4 Tutorial; Next topic; Basis Sets; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » . © Copyright 2012, The Psi4 Project.; Last updated on Oct 16, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/psithoninput-1.html:25618,update,updated,25618,psi4manual/4.0b3/psithoninput-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/psithoninput-1.html,2,['update'],['updated']
Deployability,"st functions within the energy computation. OCEPA(0) TOTAL ENERGY¶. OCEPA(0) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized CEPA(0) level of theory. OMP2 TOTAL ENERGY¶. OMP2 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized MP2 level of theory. OMP3 TOTAL ENERGY¶. OMP3 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized MP3 level of theory. ONE-ELECTRON ENERGY¶; The one-electron energy contribution [H] to the total SCF energy.; Quantity \(E_{1e^-}\) in Eq. (4). QCISD TOTAL ENERGY¶. QCISD CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the quadratic configuration interaction singles and doubles level; of theory. QCISD(T) TOTAL ENERGY¶. QCISD(T) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the quadratic configuration interaction singles and doubles with; perturbative triples correction level of theory. SAPT DISP ENERGY¶. SAPT ELST ENERGY¶. SAPT EXCH ENERGY¶. SAPT IND ENERGY¶; Respectively, the dispersion, electrostatics, exchange, and induction; components of the total electronic interaction energy [H] for the the; requested SAPT level of theory. The sum of these four components yields; SAPT TOTAL ENERGY. SAPT TOTAL ENERGY¶; The total electronic interaction energy [H] for the requested SAPT; level of theory. SAPT0 TOTAL ENERGY¶. SSAPT0 TOTAL ENERGY¶. SAPT2 TOTAL ENERGY¶. SAPT2+ TOTAL ENERGY¶. SAPT2+(3) TOTAL ENERGY¶. SAPT2+3 TOTAL ENERGY¶; The total electronic interaction energy [H] for the labeled SAPT level; of theory. SAPT2+(CCD) TOTAL ENERGY¶. SAPT2+(3)(CCD) TOTAL ENERGY¶. SAPT2+3(CCD) TOTAL ENERGY¶; The total electronic interaction energy [H] for the labeled SAPT level; of theory that incorporates coupled-cluster dispersion. SAPT2+DMP2 TOTAL ENERGY¶. SAPT2+(3)DMP2 TOTAL ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/glossary_psivariables-1.html:17888,configurat,configuration,17888,psi4manual/1.2.1/glossary_psivariables-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/glossary_psivariables-1.html,4,['configurat'],['configuration']
Deployability,"st roundtrip-ness of dict repr for psi4.core.Molecule and qcdb.Molecule. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. mbis-5; MBIS calculation on ZnO. sapt8; SAPT0(ROHF) open-shell computation of CN - Ne interaction energy First with jun-cc-pVDZ and density fitted integrals with ROHF Then with cc-pVDZ and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with ROHF. cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. cc3; cc3: RHF-CCSD/6-31G** H2O geometry optimization and vibrational frequency analysis by finite-differences of gradients. cc6; Frozen-core CCSD(T)/cc-pVDZ on C4H4N anion with disk ao algorithm. dft-custom-mgga; updated dldf reference to new BraggSlater radii Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). omp3-grad2; OMP3 cc-pVDZ gradient for the NO radical. isapt2; This is a shorter version if isapt1 - does not do cube plots. See isapt1 for full details. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in \(^{3}B_1\) CH2. scf-bz2; Benzene Dimer Out-of-Core HF/cc-pVDZ. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies for H2O. dct4; DCT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/autodoc_testsuite_corepsi4.html:11540,update,updated,11540,psi4manual/1.7.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodoc_testsuite_corepsi4.html,2,['update'],['updated']
Deployability,"stance between; atoms 1 and 3, as well as that between 2 and 4. set optking {; fixed_distance = (""; 1 3 0.95; 2 4 0.95; ""); }. Note that the effect of the frozen and fixed keywords is independent of; how the geometry of the molecule was input (whether Z-matrix or cartesian, etc.).. To scan the potential energy surface by optimizing at several fixed values; of the dihedral angle of HOOH. molecule hooh {; 0 1; H 0.850718 0.772960 0.563468; O 0.120432 0.684669 -0.035503; O -0.120432 -0.684669 -0.035503; H -0.850718 -0.772960 0.563468; }. set {; basis cc-pvdz; intrafrag_step_limit 0.1; }. dihedrals = [100,110,120,130,140,150]; PES = []. for phi in dihedrals:; my_string = ""1 2 3 4 "" + str(phi); set optking fixed_dihedral = $my_string; E = optimize('scf'); PES.append((phi, E)). print ""\n\tcc-pVDZ SCF energy as a function of phi\n""; for point in PES:; print ""\t%5.1f%20.10f"" % (point[0], point[1]). Dealing with problematic optimizations¶; Although optking is continuously improved with robustness in mind, some; attempted optimizations will inevitably fail to converge to the desired minima.; For difficult cases, the following suggestions are made. As for any optimizer, computing the Hessian and limiting the step size will; successfully converge a higher percentage of cases. The default settings have; been chosen because they perform efficiently for common, representative test sets.; More restrictive, cautious steps are sometimes necessary.; DYNAMIC_LEVEL allows optking to change the method of optimization; toward algorithms that, while often less efficient, may help to converge difficult; cases. If this is initially set to 1, then optking, as poor steps are detected,; will increase the level through several forms of more robust and cautious algorithms.; The changes will reduce the trust radius, allow backward steps (partial line; searching), add cartesian coordinates, switch to cartesian coordinates, and take; steepest-descent steps.; The developers have found the OPT_COORDIN",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/optking-1.html:7814,continuous,continuously,7814,psi4manual/1.4.0/optking-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/optking-1.html,5,['continuous'],['continuously']
Deployability,"stash.restore(). # Clear the ""parent"" symmetry now; PsiMod.set_parent_symmetry(""""). # call thermo module; PsiMod.thermo(). optstash.restore(); return energies[-1]. ## Aliases ##; frequencies = frequency; freq = frequency. # hessian to be changed later to compute force constants; [docs]def hessian(name, **kwargs):; r""""""Function to compute force constants. Presently identical to frequency().""""""; lowername = name.lower(); kwargs = kwargs_lower(kwargs); frequencies(name, **kwargs). [docs]def molden(filename):; """"""Function to write wavefunction information in molden; format to *filename*. """"""; m = PsiMod.MoldenWriter(PsiMod.wavefunction()); m.write(filename). [docs]def parse_cotton_irreps(irrep):; r""""""Function to return validated Cotton ordering index from string or integer; irreducible representation *irrep*. """"""; cotton = {; 'c1': {; 'a': 1,; '1': 1; },; 'ci': {; 'ag': 1,; 'au': 2,; '1': 1,; '2': 2; },; 'c2': {; 'a': 1,; 'b': 2,; '1': 1,; '2': 2; },; 'cs': {; 'ap': 1,; 'app': 2,; '1': 1,; '2': 2; },; 'd2': {; 'a': 1,; 'b1': 2,; 'b2': 3,; 'b3': 4,; '1': 1,; '2': 2,; '3': 3,; '4': 4; },; 'c2v': {; 'a1': 1,; 'a2': 2,; 'b1': 3,; 'b2': 4,; '1': 1,; '2': 2,; '3': 3,; '4': 4; },; 'c2h': {; 'ag': 1,; 'bg': 2,; 'au': 3,; 'bu': 4,; '1': 1,; '2': 2,; '3': 3,; '4': 4,; },; 'd2h': {; 'ag': 1,; 'b1g': 2,; 'b2g': 3,; 'b3g': 4,; 'au': 5,; 'b1u': 6,; 'b2u': 7,; 'b3u': 8,; '1': 1,; '2': 2,; '3': 3,; '4': 4,; '5': 5,; '6': 6,; '7': 7,; '8': 8; }; }. point_group = PsiMod.get_active_molecule().schoenflies_symbol().lower(); irreducible_representation = str(irrep).lower(). try:; return cotton[point_group][irreducible_representation]; except KeyError:; raise ValidationError(""Irrep \'%s\' not valid for point group \'%s\'."" % (str(irrep), point_group)). Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». © Copyright 2013, The Psi4 Project.; Last updated on Mar 20, 2014.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/_modules/driver.html:69272,update,updated,69272,psi4manual/4.0b4/_modules/driver.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html,1,['update'],['updated']
Deployability,"states by a triplet UHF reference, flipping the spin during excitation. The first excited states of the ADC(2) calculation now describes the actual ground state. adcc/h2o-fv-adc2x; ADC(2)-x/cc-pvdz calculation of 5 water singlet excited states keeping 5 virtual orbitals frozen for the calculation. adcc/methyloxirane-rotation; ADC(2)/sto-3g calculation of methyloxirane computing rotational strength of 5 states. adcc/h2o-cvs-adc1; CVS-ADC(1)/cc-pvdz calculation of 10 water singlet excited states tackling the Oxygen 1s edge core exitations. adcc/h2o-cvs-adc3; CVS-ADC(3)/cc-pvdz calculation of 10 water singlet excited states tackling the Oxygen 1s edge core exitations. adcc/h2o-cvs-adc2x-triplets; CVS-ADC(2)-x/cc-pvdz calculation of 7 water triplet excited states tackling the Oxygen 1s edge core exitations. adcc/h2o-adc2; ADC(2)/cc-pvdz calculation of 10 water singlet excited states. adcc/formaldehyde-pe-adc2; PE-ADC(2)/cc-pvdz formaldehyde in presence of 6 water molecules Reference data from Q-Chem calculation. adcc/h2o-adc2-any; ADC(2)/cc-pvdz calculation of 6 states of water of any spin kind. adcc/h2o-cvs-adc2; CVS-ADC(2)/cc-pvdz calculation of 10 water singlet excited states tackling the Oxygen 1s edge core exitations. adcc/h2o-adc2x; ADC(2)-x/cc-pvdz calculation of 10 water singlet excited states. adcc/h2o-fc-adc2; ADC(2)/cc-pvdz calculation of 5 water singlet excited states employing the frozen-core approximation. adcc/cn-adc2; UADC(2)/cc-pvdz calculation of 5 states for the cyanide radical. adcc/cn-adc1; UADC(1)/cc-pvdz calculation of 4 states for the cyanide radical. adcc/h2o-cvs-adc2x; CVS-ADC(2)-x/cc-pvdz calculation of 10 water singlet excited states tackling the Oxygen 1s edge core exitations. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Appendices; Test Suite and Sample Inputs; ADCC. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodoc_testsuite_adcc-1.html:2403,update,updated,2403,psi4manual/1.4.0/autodoc_testsuite_adcc-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_testsuite_adcc-1.html,2,['update'],['updated']
Deployability,"ster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples:. >>> # [1] Coupled-cluster singles and doubles calculation with psi code; >>> energy('ccsd'). >>> # [2] Charge-transfer SAPT calculation with scf projection from small into; >>> # requested basis, with specified projection fitting basis; >>> set basis_guess true; >>> set df_basis_guess jun-cc-pVDZ-JKFIT; >>> energy('sapt0-ct'). >>> # [3] Arbitrary-order MPn calculation; >>> energy('mp7'). >>> # [4] Converge scf as singlet, then run detci as triplet upon singlet reference; >>> # Note that the integral transformation is not done automatically when detci is run in a separate step.; >>> molecule H2 {\n0 1\nH\nH 1 0.74\n}; >>> set basis cc-pVDZ; >>> set reference rohf; >>> scf_e, scf_wfn = energy('scf', return_wfn=True); >>> H2.set_multiplicity(3); >>> core.MintsHelper(scf_wfn.basisset()).integrals(); >>> energy('detci', ref_wfn=scf_wfn). >>> # [5] Run two CI calculations, keeping the integrals generated in the first one.; >>> molecule ne {\nNe\n}; >>> set basis cc-pVDZ; >>> cisd_e, cisd_wfn = energy('cisd', return_wfn=True); >>> energy('fci', ref_wfn=cisd_wfn). >>> # [6] Can automatically perform complete basis set extrapolations; >>> energy(""CCSD/cc-pV[DT]Z""). >>> # [7] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> energy(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energy-1.html:21815,update,updated,21815,psi4manual/1.3.2/api/psi4.driver.energy-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energy-1.html,2,['update'],['updated']
Deployability,"ster singles and doubles (CCSD); RHF; dipole, quadrupole, polarizability, rotation, roa_tensor. dct; density cumulant (functional) theory; [manual]; RHF/UHF; Listed here. omp2; orbital-optimized second-order; MP perturbation theory; [manual]; RHF/UHF; Listed here; Density fitted only. omp3; orbital-optimized third-order; MP perturbation theory; [manual]; RHF/UHF; Listed here; Density fitted only. omp2.5; orbital-optimized MP2.5; [manual]; RHF/UHF; Listed here; Density fitted only. olccd; orbital optimized LCCD; [manual]; RHF/UHF; Listed here; Density fitted only. eom-cc2; 2nd-order approximate EOM-CCSD; RHF; oscillator_strength, rotational_strength. eom-ccsd; Equation-of-motion CCSD (EOM-CCSD); RHF; oscillator_strength, rotational_strength. cisd, cisdt,; cisdt, cisdtq,; ci5, …, fci; Configuration interaction; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. casscf, rasscf; Multi-configurational SCF; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. adc(0), adc(1),; …, adc(3),; cvs-adc(0), …; cvs-adc(3); Algebraic-diagrammatic construction methods; [manual]; RHF/UHF; dipole, transition_dipole, oscillator_strength,; rotational_strength. Parameters. name (str) – 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. properties (List[str]) – \(\Rightarrow\) [] \(\Leftarrow\) || ['rotation', 'polarizability', 'oscillator_strength', 'roa'] || etc.; Indicates which properties should be computed. Defaults to dipole and quadrupole. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples. >>> # [1] Optical rotation calculation; >>> properties('cc2', properties=['rotation']). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.6;  · . PSI4. Psithon Functions: Invoking a Calculation; Property. © Copyright 2022, The Psi4 Project.; Last updated on Thursday, 19 May 2022 08:57PM.; Created using Sphinx 4.5.0.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/prop.html:2775,update,updated,2775,psi4manual/1.6.x/prop.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/prop.html,1,['update'],['updated']
Deployability,"stimate of the splittings between different spin; states of a complex the first-order exchange energies for all multiplets can be; shown to be a linear combination of two matrix elements: a diagonal exchange; term that determines the spin-averaged effect and a spin-flip term responsible; for the splittings between the states. The numerical factors in this linear; combination are determined solely by the Clebsch-Gordan coefficients:; accordingly, the \(S^{2}\) approximation implies a Heisenberg Hamiltonian; picture with a single coupling strength parameter determining all the; splittings. This method can be invoked with energy(“SF-SAPT”) and; publications resulting from the use of the SF-SAPT code should cite the; following publications: [Patkowski:2018:164110]. table of contents. SAPT: Symmetry-Adapted Perturbation Theory; The S2 approximation and scaling; A First Example; Advanced example; SAPT0; Basic SAPT0 Keywords; SAPT_LEVEL; BASIS; DF_BASIS_SAPT; DF_BASIS_ELST; FREEZE_CORE; D_CONVERGENCE; E_CONVERGENCE; MAXITER; PRINT. Advanced SAPT0 Keywords; AIO_CPHF; AIO_DF_INTS; COUPLED_INDUCTION; EXCH_SCALE_ALPHA; INTS_TOLERANCE; DENOMINATOR_DELTA; DENOMINATOR_ALGORITHM; DEBUG. Specific open-shell SAPT0 keywords; SAPT_MEM_SAFETY; COUPLED_INDUCTION. Higher-Order SAPT; Basic Keywords for Higher-order SAPT; BASIS; DF_BASIS_SAPT; FREEZE_CORE; PRINT. Advanced Keywords for Higher-order SAPT; DO_CCD_DISP; DO_MBPT_DISP; DO_THIRD_ORDER; INTS_TOLERANCE; SAPT_MEM_CHECK; DEBUG. MP2 Natural Orbitals; Basic Keywords Controlling MP2 NO Approximations; NAT_ORBS_T2; NAT_ORBS_T3; NAT_ORBS_V4; OCC_TOLERANCE. Charge-Transfer in SAPT; Monomer-Centered Basis Computations; Computations with Mid-bonds; Interpreting SAPT Results; Spin-Flip SAPT. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Theoretical Methods: SCF to FCI. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 July 2018 04:21AM.; Created using Sphinx 1.7.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/sapt-1.html:40138,update,updated,40138,psi4manual/1.2.1/sapt-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/sapt-1.html,2,['update'],['updated']
Deployability,"sting/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!. Note; Above commands use bash for installation and set up your environment for bash at runtime. To use csh at runtime, follow the on-screen directions at the end of the installation or consult step 7 below. Detailed Installation of Miniconda¶; https://docs.conda.io/en/latest/miniconda.html. Detailed Installation of PSI4¶. Subscribe to PSI4. Subscribe to our channel at https://anaconda.org/psi4 that contains the PSI4 package and several dependency packages. Make sure this shows up in your ~/.condarc file. >>> conda config --add channels http://conda.anaconda.org/psi4; # check; >>> cat ~/.condarc; channels:; - http://conda.anaconda.org/psi4; - defaults. Install PSI4. You can install into the main conda environment so that whenever commands conda or (Ana/Miniconda’s) python are available, then psi4 is available, too. >>> conda install psi4; # check; >>> which psi4; /path/to/miniconda/bin/psi4. Or, you can install into a conda environment that places PSI4 and its dependencies (including python) into a sandbox unaffected by any other software installed in Ana/Miniconda. This is recommended for developers to avoid interference between multiple versions (including github/conda versions) or to test python versions, etc.. In practical terms, installing into a conda environment means you can turn PSI4‘s availability on/off by switching conda environments without turning on/off the whole Ana/Miniconda installation. Below, PSI4 is installed into an environment called p4env. Then the environment is activated, removing the main Ana/Miniconda bin and adding envs/p4env/bin to PATH. The conda activate command (conda >=4.4; December 2017) works in all shells, but if you’re using old source activate that only works for bash; adjust as needed for csh/tcsh.; >>> conda create -n p4env psi4; >>> conda activate p4env; # check; >>> which psi4; /path/to/mini",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/conda-1.html:14923,install,install,14923,psi4manual/1.4.0/conda-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html,9,['install'],['install']
Deployability,"string; Default: NONE. MAXITER¶. Maximum number of iterations to converge perturbed amplitude equations. Type: integer; Default: 50. NUM_AMPS_PRINT¶. Number of important CC amplitudes per excitation level to print. CC analog to NUM_DETS_PRINT. Type: integer; Default: 5. OMEGA¶. Array that specifies the desired frequencies of the incident radiation field in CCLR calculations. If only one element is given, the units will be assumed to be atomic units. If more than one element is given, then the units must be specified as the final element of the array. Acceptable units are HZ, NM, EV, and AU. Type: array; Default: No Default. PROPERTY¶. The response property desired. Acceptable values are POLARIZABILITY (default) for dipole-polarizabilities, ROTATION for specific rotations, ROA for Raman Optical Activity, and ALL for all of the above. Type: string; Possible Values: POLARIZABILITY, ROTATION, ROA, ALL; Default: POLARIZABILITY. REFERENCE¶. Reference wavefunction type. Type: string; Default: RHF. RESTART¶. Do restart from on-disk amplitudes?. Type: boolean; Default: true. R_CONVERGENCE¶. Convergence criterion for wavefunction (change) in perturbed CC equations. Type: conv double; Default: 1e-7. SEKINO¶. Do Sekino-Bartlett size-extensive model-III?. Type: boolean; Default: false. Expert¶. WFN¶. Wavefunction type. Type: string; Default: SCF. Table Of Contents. CCRESPONSE; General; ABCD; ANALYZE; CACHELEVEL; DIIS; GAUGE; LINEAR; LOCAL; LOCAL_CPHF_CUTOFF; LOCAL_CUTOFF; LOCAL_FILTER_SINGLES; LOCAL_METHOD; LOCAL_PAIRDEF; LOCAL_WEAKP; MAXITER; NUM_AMPS_PRINT; OMEGA; PROPERTY; REFERENCE; RESTART; R_CONVERGENCE; SEKINO. Expert; WFN. Previous topic; ZETA; Next topic; ABCD; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Appendices »; Keywords by Module ». © Copyright 2012, The Psi4 Project.; Last updated on Oct 16, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/autodir_options_c/module__ccresponse-1.html:4123,update,updated,4123,psi4manual/4.0b3/autodir_options_c/module__ccresponse-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodir_options_c/module__ccresponse-1.html,2,['update'],['updated']
Deployability,"string; Default: NONE. MAXITER¶. Maximum number of iterations to converge perturbed amplitude equations. Type: integer; Default: 50. NUM_AMPS_PRINT¶. Number of important CC amplitudes per excitation level to print. CC analog to NUM_DETS_PRINT. Type: integer; Default: 5. OMEGA¶. Array that specifies the desired frequencies of the incident radiation field in CCLR calculations. If only one element is given, the units will be assumed to be atomic units. If more than one element is given, then the units must be specified as the final element of the array. Acceptable units are HZ, NM, EV, and AU. Type: array; Default: No Default. PROPERTY¶. The response property desired. Acceptable values are POLARIZABILITY (default) for dipole-polarizabilities, ROTATION for specific rotations, ROA for Raman Optical Activity, and ALL for all of the above. Type: string; Possible Values: POLARIZABILITY, ROTATION, ROA, ALL; Default: POLARIZABILITY. REFERENCE¶. Reference wavefunction type. Type: string; Default: RHF. RESTART¶. Do restart from on-disk amplitudes?. Type: boolean; Default: true. R_CONVERGENCE¶. Convergence criterion for wavefunction (change) in perturbed CC equations. Type: conv double; Default: 1e-7. SEKINO¶. Do Sekino-Bartlett size-extensive model-III?. Type: boolean; Default: false. Expert¶. WFN¶. Wavefunction type. Type: string; Default: SCF. Table Of Contents. CCRESPONSE; General; ABCD; ANALYZE; CACHELEVEL; DIIS; GAUGE; LINEAR; LOCAL; LOCAL_CPHF_CUTOFF; LOCAL_CUTOFF; LOCAL_FILTER_SINGLES; LOCAL_METHOD; LOCAL_PAIRDEF; LOCAL_WEAKP; MAXITER; NUM_AMPS_PRINT; OMEGA; PROPERTY; REFERENCE; RESTART; R_CONVERGENCE; SEKINO. Expert; WFN. Previous topic; ZETA; Next topic; ABCD; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; Keywords by Module ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 25, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/autodir_options_c/module__ccresponse-1.html:4123,update,updated,4123,psi4manual/4.0b4/autodir_options_c/module__ccresponse-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodir_options_c/module__ccresponse-1.html,2,['update'],['updated']
Deployability,"stry.gatech.edu/download/Psi4conda-latest-py35-Windows-x86_64.sh"" --keepalive-time 2; >>> bash; >>> bash Psi4conda-latest-py35-Windows-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> echo ""export PATH=$HOME/psi4conda/bin:\$PATH"" >> ~/.bashrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. That last command tested that psi4 is in your path, and it’s finding; all the libraries it needs. It works because PSI_SCRATCH; defaults to /tmp. Now you need only specify a permanent scratch; directory (see Scratch Files and Elementary Restart) by replacing the placeholder in the; following:; >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!; Configuration for this set-up is summarized at How to run Psi4 as executable or Python module from conda installation. Note; PSI4 installs a Python distribution alongside, so you should choose an installer based on the Python version you want, irrespective of any Python version you have. Note; Above commands use bash for installation and set up your environment for bash at runtime. To use csh at runtime, follow the on-screen directions at the end of the installation or consult step 7 below. How to install a Psi4 binary into an Ana/Miniconda distribution¶; Conda command to install the latest nightly build of PSI4 + compiled; add-ons + runtime add-ons into an existing Anaconda or Miniconda; distribution.; # Linux or Mac or Windows; # substitute x.x by 2.7|3.5|3.6 for alternate python versions; # remove `-c psi4/label/dev` to get stable releases instead of nightly builds; >>> conda create -n p4env python=x.x psi4 psi4-rt -c psi4/label/dev -c psi4. Activate environment and make the adjustments to PATH and; PSI_SCRATCH that it suggests at the end. Test with psi4; --test. Configuration for this set-up is summarized at; How to run Psi4 as executable or Python module from conda installation.;",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/conda-1.html:4404,install,installs,4404,psi4manual/1.2.1/conda-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/conda-1.html,4,['install'],"['installer', 'installs']"
Deployability,"stry.gatech.edu/download/Psi4conda-latest-py35-Windows-x86_64.sh"" --keepalive-time 2; >>> bash; >>> bash Psi4conda-latest-py35-Windows-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> echo ""export PATH=$HOME/psi4conda/bin:\$PATH"" >> ~/.bashrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. That last command tested that psi4 is in your path, and it’s finding; all the libraries it needs. It works because PSI_SCRATCH; defaults to /tmp. Now you need only specify a permanent scratch; directory (see Scratch Files and Elementary Restart) by replacing the placeholder in the; following:; >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!; Configuration for this set-up is summarized at How to run Psi4 as executable or Python module from conda installation. Note; PSI4 installs a Python distribution alongside, so you should choose an installer based on the Python version you want, irrespective of any Python version you have. Note; Above commands use bash for installation and set up your environment for bash at runtime. To use csh at runtime, follow the on-screen directions at the end of the installation or consult step 7 below. How to install a Psi4 binary into an Ana/Miniconda distribution¶; Conda command to install the latest nightly build of PSI4 + compiled; add-ons + runtime add-ons into an existing Anaconda or Miniconda; distribution.; # Linux or Mac or Windows; # substitute x.x by 2.7|3.5|3.6 for alternate python versions; >>> conda create -n p4env python=x.x psi4 psi4-rt -c psi4/label/dev -c psi4. Activate environment and make the adjustments to PATH and; PSI_SCRATCH that it suggests at the end. Test with psi4; --test. Configuration for this set-up is summarized at; How to run Psi4 as executable or Python module from conda installation.; Details:. It is strongly recommended to place PSI4 into a conda; environment w",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/conda-1.html:4195,install,installs,4195,psi4manual/1.1.0/conda-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/conda-1.html,4,['install'],"['installer', 'installs']"
Deployability,"stry.gatech.edu/download/Psi4conda-latest-py35-Windows-x86_64.sh"" --keepalive-time 2; >>> bash; >>> bash Psi4conda-latest-py35-Windows-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> echo ""export PATH=$HOME/psi4conda/bin:\$PATH"" >> ~/.bashrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. That last command tested that psi4 is in your path, and it’s finding; all the libraries it needs. It works because PSI_SCRATCH; defaults to /tmp. Now you need only specify a permanent scratch; directory (see Scratch Files and Elementary Restart) by replacing the placeholder in the; following:; >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!; Configuration for this set-up is summarized at How to run Psi4 as executable or Python module from conda installation. Note; PSI4 installs a Python distribution alongside, so you should choose an installer based on the Python version you want, irrespective of any Python version you have. Note; Above commands use bash for installation and set up your environment for bash at runtime. To use csh at runtime, follow the on-screen directions at the end of the installation or consult step 7 below. How to install a Psi4 binary into an Ana/Miniconda distribution¶; Conda command to install the latest nightly build of PSI4 + compiled; add-ons + runtime add-ons into an existing Anaconda or Miniconda; distribution.; # Linux or Mac or Windows; # substitute x.x by 3.5|3.6|3.7 for alternate python versions; # remove `-c psi4/label/dev` to get stable releases instead of nightly builds; >>> conda create -n p4env python=x.x psi4 psi4-rt -c psi4/label/dev -c psi4. Activate environment and make the adjustments to PATH and; PSI_SCRATCH that it suggests at the end. Test with psi4; --test. Configuration for this set-up is summarized at; How to run Psi4 as executable or Python module from conda installation.;",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/conda-1.html:4404,install,installs,4404,psi4manual/1.3.2/conda-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/conda-1.html,4,['install'],"['installer', 'installs']"
Deployability,"str¶; Lookup process id. open(self: psi4.core.IO, unit: int, status: int) → None¶; Open unit. Status can be PSIO_OPEN_OLD (if existing file is to be opened) or PSIO_OPEN_NEW if new file should be open. open_check(self: psi4.core.IO, unit: int) → int¶; Return 1 if unit is open. rehash(self: psi4.core.IO, unit: int) → None¶; Sync up the object to the file on disk by closing and opening the file, if necessary. static set_default_namespace(ns: str) → None¶; Set the current namespace (for PREFIX.NAMESPACE.UNIT file numbering). set_pid(self: psi4.core.IO, pid: str) → None¶; Set process id. static shared_object() → psi4.core.IO¶; Return the global shared object. state(self: psi4.core.IO) → int¶; Return 1 if PSIO library is activated. tocclean(self: psi4.core.IO, unit: int, key: str) → None¶; Delete all TOC entries after the given key. If a blank key is given, the entire TOC will be wiped. tocentry_exists(self: psi4.core.IO, arg0: int, arg1: str) → bool¶; Checks the TOC to see if a particular keyword exists there or not. tocprint(self: psi4.core.IO, arg0: int) → None¶; Print the table of contents for the given unit. tocscan(self: psi4.core.IO, arg0: int, arg1: str) → psi4.core.psio_entry¶; Seek string in binary file. This export is only good for catching None, as returned success object not exported. tocwrite(self: psi4.core.IO, arg0: int) → None¶; Write the table of contents for passed file number. table of contents. IO; IO; IO.change_file_namespace(); IO.close(); IO.exists(); IO.get_default_namespace(); IO.getpid(); IO.open(); IO.open_check(); IO.rehash(); IO.set_default_namespace(); IO.set_pid(); IO.shared_object(); IO.state(); IO.tocclean(); IO.tocentry_exists(); IO.tocprint(); IO.tocscan(); IO.tocwrite(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; IO. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/api/psi4.core.IO.html:3662,update,updated,3662,psi4manual/1.8.x/api/psi4.core.IO.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.IO.html,1,['update'],['updated']
Deployability,"str¶; Lookup process id. open(self: psi4.core.IO, unit: int, status: int) → None¶; Open unit. Status can be PSIO_OPEN_OLD (if existing file is to be opened) or PSIO_OPEN_NEW if new file should be open. open_check(self: psi4.core.IO, unit: int) → int¶; Return 1 if unit is open. rehash(self: psi4.core.IO, unit: int) → None¶; Sync up the object to the file on disk by closing and opening the file, if necessary. static set_default_namespace(ns: str) → None¶; Set the current namespace (for PREFIX.NAMESPACE.UNIT file numbering). set_pid(self: psi4.core.IO, pid: str) → None¶; Set process id. static shared_object() → psi4.core.IO¶; Return the global shared object. state(self: psi4.core.IO) → int¶; Return 1 if PSIO library is activated. tocclean(self: psi4.core.IO, unit: int, key: str) → None¶; Delete all TOC entries after the given key. If a blank key is given, the entire TOC will be wiped. tocentry_exists(self: psi4.core.IO, arg0: int, arg1: str) → bool¶; Checks the TOC to see if a particular keyword exists there or not. tocprint(self: psi4.core.IO, arg0: int) → None¶; Print the table of contents for the given unit. tocscan(self: psi4.core.IO, arg0: int, arg1: str) → psi4.core.psio_entry¶; Seek string in binary file. This export is only good for catching None, as returned success object not exported. tocwrite(self: psi4.core.IO, arg0: int) → None¶; Write the table of contents for passed file number. table of contents. IO; IO; IO.change_file_namespace(); IO.close(); IO.exists(); IO.get_default_namespace(); IO.getpid(); IO.open(); IO.open_check(); IO.rehash(); IO.set_default_namespace(); IO.set_pid(); IO.shared_object(); IO.state(); IO.tocclean(); IO.tocentry_exists(); IO.tocprint(); IO.tocscan(); IO.tocwrite(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.9.1;  · . PSI4. PSI4 API: Linking C++ and Python; IO. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 08 February 2024 09:32PM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/api/psi4.core.IO.html:3662,update,updated,3662,psi4manual/1.9.x/api/psi4.core.IO.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/api/psi4.core.IO.html,1,['update'],['updated']
Deployability,"sts at the end. Test with psi4; --test. Configuration for this set-up is summarized at; How to run Psi4 as executable or Python module from conda installation.; Details:. It is strongly recommended to place PSI4 into a conda; environment where its libraries can’t interfere with other programs (on; Linux/Windows, PSI4 installs a non-default gcc 5.2) rather than the main; Anaconda or Miniconda environment. Hence the creation of the environment; above, but the environment name (p4env above) can be; substituted.; Only reason for psi4-rt package is to get the QC runtime; add-ons; could say dftd3 gcp v2rdm_casscf instead of psi4-rt;; or leave them out if you don’t want them. How to update a Psi4 binary¶; Conda command to update an existing PSI4 conda installation to the; newest stable release (roughly annually). Warning; Until 1.1 is official, this pulls the July 2016 1.0 version. 1.0 and 1.1 really shouldn’t be mixed. >>> conda update psi4 -c psi4. # if psi4 channel in defaults (true for Psi4conda installers); >>> conda update psi4. Conda command to update an existing PSI4 conda installation to the; latest development head (roughly nightly).; >>> conda update psi4 -c psi4/label/dev. # if add-on updates required, try; >>> conda update psi4 -c psi4/label/dev -c psi4. How to use conda to compile Psi4 faster and easier¶; # Linux or Mac or Windows; # substitute x.x by 2.7|3.5|3.6 for alternate python versions; >>> conda create -n p4dev python=x.x psi4-dev -c psi4. Same for Linux/Mac/Windows. Substitute desired python version: 2.7, 3.5, 3.6. Fine; to choose your own env name. Activate environment, source activate; p4dev. Go to where you’ve cloned psi4. Execute psi4-path-advisor.; It gives you a basic cmake command covering python, sphinx, link-time qc; addons, and run-time qc addons. There’s a help menu -h that gives more; info. There’s other options that will also pre-configure compilers. For; example, at GaTech psi4-path-advisor --intel works. On Macs with; XCode, psi4-path-",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/conda-1.html:6037,install,installers,6037,psi4manual/1.1.0/conda-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/conda-1.html,4,"['install', 'update']","['installers', 'update']"
Deployability,"surround it with the; command basis {...}, as shown below. Multiple basis sets can be; specified by adding additional sections within the surrounding brackets.; Use assign statements to actually request the basis set. This; basis {...} section replaces the usual set basis XXX line.; In a more complex input, if the user needs to call the user-defined; basis by name, this can be achieved using the syntax basis mybas {...},; and then the basis can be recalled later as set basis mybas.; To use a custom basis set as described in this section, it must be; defined prior to its use in a function that performs a computation.; basis {. # assign basset to all atoms and addl to hydrogens; assign basset; assign H addl. # basis set section like in snippet above goes here; [basset]; ... # additional basis set sections follow; [addl]; ...; }. The test case mints2 provides a complete example of; user-specified basis sets. Inputting effective core potentials (ECPs)¶; For ECP containing basis sets, all of the above mechanisms may still be used to; input the basis set; simply place the ECP definitions (in G94 format) in the; same file or input section as the orbital basis definition. Because the ECP; appears in the same section as the orbital basis, it will be parsed; automatically and the number of core electrons the ECP represents will be; detected, so no further input is required to use a core potential. See; Effective core potentials (ECPs) for more information about using ECPs and the; Def2-TZVP basis set definition; for an example of their input syntax. table of contents. Basis Sets; Built-In Basis Sets; Mixing Basis Sets; Decontracted Basis Sets; User-Defined Basis Sets; Inputting effective core potentials (ECPs). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Psithon: Structuring an Input File; Basis Sets. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/basissets-1.html:11134,update,updated,11134,psi4manual/1.4.0/basissets-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/basissets-1.html,2,['update'],['updated']
Deployability,"surround it with the; command basis {...}, as shown below. Multiple basis sets can be; specified by adding additional sections within the surrounding brackets.; Use assign statements to actually request the basis set. This; basis {...} section replaces the usual set basis XXX line.; In a more complex input, if the user needs to call the user-defined; basis by name, this can be achieved using the syntax basis mybas {...},; and then the basis can be recalled later as set basis mybas.; To use a custom basis set as described in this section, it must be; defined prior to its use in a function that performs a computation.; basis {. # assign basset to all atoms and addl to hydrogens; assign basset; assign H addl. # basis set section like in snippet above goes here; [basset]; ... # additional basis set sections follow; [addl]; ...; }. The test case mints2 provides a complete example of; user-specified basis sets. Inputting effective core potentials (ECPs)¶; For ECP containing basis sets, all of the above mechanisms may still be used to; input the basis set; simply place the ECP definitions (in G94 format) in the; same file or input section as the orbital basis definition. Because the ECP; appears in the same section as the orbital basis, it will be parsed; automatically and the number of core electrons the ECP represents will be; detected, so no further input is required to use a core potential. See; Effective core potentials (ECPs) for more information about using ECPs and the; Def2-TZVP basis set definition; for an example of their input syntax. table of contents. Basis Sets; Built-In Basis Sets; Mixing Basis Sets; Decontracted Basis Sets; User-Defined Basis Sets; Inputting effective core potentials (ECPs). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Psithon: Structuring an Input File; Basis Sets. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/basissets-1.html:11134,update,updated,11134,psi4manual/1.5.0/basissets-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/basissets-1.html,2,['update'],['updated']
Deployability,"sxdict = xd.parse(handle). return csxdict. [docs]def getFromDict(dataDict, mapList):; return reduce(lambda d, k: d[k], mapList, dataDict). [docs]def csx2endict():; """"""Grabs the CSX file as a dictionary, encodes translation of PSI variables; to XML blocks, gathers all available energies from CSX file into returned; dictionary. """"""; blockprefix = ['chemicalSemantics', 'molecularCalculation', 'quantumMechanics', 'singleReferenceState',; 'singleDeterminant']; blockmidfix = ['energies', 'energy']; prefix = 'cs:'. pv2xml = {; 'MP2 CORRELATION ENERGY': [['mp2'], 'correlation'],; 'MP2 SAME-SPIN CORRELATION ENERGY': [['mp2'], 'sameSpin correlation'],; 'HF TOTAL ENERGY': [['abinitioScf'], 'electronic'],; 'NUCLEAR REPULSION ENERGY': [['abinitioScf'], 'nuclearRepulsion'],; 'DFT FUNCTIONAL TOTAL ENERGY': [['dft'], 'dftFunctional'],; 'DFT TOTAL ENERGY': [['dft'], 'electronic'],; 'DOUBLE-HYBRID CORRECTION ENERGY': [['dft'], 'doubleHybrid correction'],; 'DISPERSION CORRECTION ENERGY': [['dft'], 'dispersion correction'],; }. csxdict = xml2dict(); enedict = {}; for pv, lpv in pv2xml.items():; address = blockprefix + lpv[0] + blockmidfix; indices = [prefix + bit for bit in address]; try:; qwer = getFromDict(csxdict, indices); except KeyError:; continue; for v in qwer:; vv = v.values(); if vv[0] == prefix + lpv[1]:; enedict[pv] = float(vv[1]). return enedict. [docs]def compare_csx():; """"""Function to validate energies in CSX files against PSIvariables. Only; active if write_csx flag on. """"""; if 'csx4psi' in sys.modules.keys():; if core.get_global_option('WRITE_CSX'):; enedict = csx2endict(); compare_integers(len(enedict) >= 2, True, 'CSX harvested'); for pv, en in enedict.items():; compare_values(core.get_variable(pv), en, 6, 'CSX ' + pv + ' ' + str(round(en, 4))). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .  · ; 1.2.1;  · . PSI4. Module code. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 July 2018 04:21AM.; Created using Sphinx 1.7.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/_modules/psi4/driver/p4util/util.html:19249,update,updated,19249,psi4manual/1.2.1/_modules/psi4/driver/p4util/util.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/_modules/psi4/driver/p4util/util.html,1,['update'],['updated']
Deployability,"t Perturbation Theory) interaction energies for dimer molecules.; The plugin is distributed under the 2-clause BSD license. Installation¶; Binary. snsmp2 is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell).; If using the Psi4conda installer, snsmp2 has already been installed alongside.; If using the PSI4 conda package, the snsmp2 conda package can; be obtained through conda install snsmp2 -c psi4 or conda install; psi4-rt -c psi4.; If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; snsmp2 can be obtained through conda install snsmp2 -c psi4.; Then, hint its location with PYTHONPATH.; To remove a conda installation, conda remove snsmp2. Source. Download the plugin from the GitHub repository:; >>> git clone https://github.com/DEShawResearch/sns-mp2. Once dowloaded, the plugin can be installed as outlined in the documentation:; >>> cd {top-level-sns-mp2-directory}; >>> PSI4_PYTHON=$(head $(which psi4) -n 1 | sed -r 's/^.{2}//'); >>> $PSI4_PYTHON -m pip install . Sample Input¶; A sample input file, adapted from the documentation, is shown below:; # Sample SNS-MP2 calculation for two helium atoms. molecule dimer {; He 0 0 0; --; He 2 0 0; }. energy('sns-mp2'). Note that the two monomers are separated by double dashes, indicating that; they should be treated as separate molecules. (See; Analysis of Intermolecular Interactions for more details on; setting up dimer molecules.) This input file can be run in the usual fashion:; >>> psi4 input.dat. table of contents. Spin-Network-Scaled MP2 (SNS-MP2) by D. E. Shaw; Installation; Sample Input. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Spin-Network-Scaled MP2 (SNS-MP2) by D. E. Shaw. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/plugin_snsmp2.html:1650,install,install,1650,psi4manual/master/plugin_snsmp2.html,https://psicode.org,https://psicode.org/psi4manual/master/plugin_snsmp2.html,2,"['install', 'update']","['install', 'updated']"
Deployability,"t a given level of SAPT computed; from a subset of the terms of that grouping. The groupings shown above are; not unique and are certainly not rigorously defined. We regard the groupings; used in PSI4 as a “chemist’s grouping” as opposed to a more; mathematically based grouping, which would group all exchange terms; (i.e. , , etc. in; the exchange component. A final note is that both Disp22(T); and Est.Disp22(T) results appear if MP2 natural orbitals are; used to evaluate the triples correction to dispersion. The Disp22(T); result is the triples correction as computed in the truncated NO basis;; Est.Disp22(T) is a scaled result that attempts to recover; the effect of the truncated virtual space. The Est.Disp22(T); value used in the SAPT energy and dispersion component (see [Hohenstein:2010:104107]; for details). Table Of Contents. SAPT: Symmetry-Adapted Perturbation Theory; A First Example; SAPT0; Basic SAPT0 Keywords; SAPT_LEVEL; BASIS; DF_BASIS_SAPT; DF_BASIS_ELST; FREEZE_CORE; D_CONVERGENCE; E_CONVERGENCE; MAXITER; PRINT. Advanced SAPT0 Keywords; AIO_CPHF; AIO_DF_INTS; NO_RESPONSE; INTS_TOLERANCE; DENOMINATOR_DELTA; DENOMINATOR_ALGORITHM; SAPT_OS_SCALE; SAPT_SS_SCALE; DEBUG. Higher-Order SAPT; Basic Keywords for Higher-order SAPT; BASIS; DF_BASIS_SAPT; FREEZE_CORE; PRINT. Advanced Keywords for Higher-order SAPT; INTS_TOLERANCE; SAPT_MEM_CHECK; DEBUG. MP2 Natural Orbitals; Basic Keywords Controlling MP2 NO Approximations; NAT_ORBS; OCC_TOLERANCE. Advanced Keywords Controlling MP2 NO Approximations; NAT_ORBS_T2. Charge-Transfer in SAPT; Interpreting SAPT Results. Previous topic; ADC: Ab Initio Polarization Propagator; Next topic; CEPA: Coupled-Pair Methods; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Theoretical Methods: SCF to FCI ». © Copyright 2012, The Psi4 Project.; Last updated on Oct 16, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/sapt-1.html:18434,update,updated,18434,psi4manual/4.0b3/sapt-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/sapt-1.html,2,['update'],['updated']
Deployability,"t be yes (the default), no or None (meaning; an answer is required of the user).; The return value is one of True or False. File for accessory procedures in the chem module.; Credit for the libmints vector3 class to Justin M. Turney and; incremental improvements by other psi4 developers. add(v, u)[source]¶; Compute sum of vectors v and u. cross(v, u)[source]¶; Compute cross product of length 3 vectors v and u. determinant(mat)[source]¶; Given 3x3 matrix mat, compute the determinat. diagonalize3x3symmat(M)[source]¶; Given an real symmetric 3x3 matrix M, compute the eigenvalues. distance(v, u)[source]¶; Compute the distance between points defined by vectors v and u. dot(v, u)[source]¶; Compute dot product of vectors v and u. mscale(matrix, d)[source]¶; Return matrix scaled by scalar d. mult(matrix1, matrix2)[source]¶; Matrix multiplication. norm(v)[source]¶; Compute the magnitude of vector v. normalize(v)[source]¶; Compute normalized vector v. perp_unit(u, v)[source]¶; Compute unit vector perpendicular to length 3 vectors u and v. rotate(v, theta, axis)[source]¶; Rotate length 3 vector v about axis by theta radians. scale(v, d)[source]¶; Compute by-element scale by d of vector v. show(matrix)[source]¶; Print out matrix. sub(v, u)[source]¶; Compute difference of vectors v - u. transpose(matrix)[source]¶; Return matrix transpose. zero(m, n)[source]¶; Create zero matrix. Table Of Contents. Python Driver; inputparser; interactive; pubchem; psiexceptions; frac; molutil; p4regex; proc; dashparam; driver; gaussian_n; pcmgetkw; wrappers; qmmm; diatomic; functional; pcmpreprocess; aliases; grendel; p4util; p4const; qcdb. Previous topic; Adding Methods to Driver; Next topic; psi4: Linking C++ and Python; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » . © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/autodoc_driver-1.html:69506,update,updated,69506,psi4manual/4.0b5/autodoc_driver-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodoc_driver-1.html,2,['update'],['updated']
Deployability,"t correlated in the; MRCC procedure.; Doubly occupied orbitals (RESTRICTED_DOCC) are doubly; occupied in each reference determinant and are correlated in the MRCC; procedure.; Active orbitals (ACTIVE) are partially occupied in each; reference determinant.; Frozen virtual orbitals (FROZEN_UOCC) are unoccupied in; all reference determinants and are excluded from the correlated wave; function. The model space is selected by considering all possible occupations; of the electrons among the orbitals in the active space that result; in determinants with the correct symmetry (WFN_SYM); and the correct \(\textrm{M}_s\) value specified by the keyword; CORR_MULTP. Note that this does not consider the multiplicity; of the wavefunction. Thus, in order to obtain the wavefunction; with a set of \(\textrm{M}_s = 0\) reference determinants for; an open-shell system you should request a CORR_MULTP of; 1 within the PSIMRCC module, and select the root of the effective; Hamiltonian that corresponds to the state of interest. In addition,; the WFN_SYM keyword needs to be specified otherwise the; wavefunction belonging to the all-symmetric irrep will be selected. In; addition, it should be noted that for an open-shell singlet based; on two \(\textrm{M}_s = 0\) determinants the eigenvector is; [\(\frac{1}{\sqrt{2}}\text{,}\frac{1}{\sqrt{2}}\)], which corresponds; to a wavefunction of the following form:. \[\frac{1}{\sqrt{2}} \left( \chi_1 \alpha (1) \chi_2 \beta (2) + \chi_2 \alpha(1) \chi_1 \beta (2) \right)\]; See Appendix PSIMRCC for a complete list of PSIMRCC options. table of contents. PSIMRCC Implementation of Mk-MRCC Theory; A Simple Example; Orbital ordering and selection of the model space. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Theoretical Methods: SCF to FCI; PSIMRCC Implementation of Mk-MRCC Theory. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/psimrcc-1.html:8217,update,updated,8217,psi4manual/1.4.0/psimrcc-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/psimrcc-1.html,2,['update'],['updated']
Deployability,"t correlated in the; MRCC procedure.; Doubly occupied orbitals (RESTRICTED_DOCC) are doubly; occupied in each reference determinant and are correlated in the MRCC; procedure.; Active orbitals (ACTIVE) are partially occupied in each; reference determinant.; Frozen virtual orbitals (FROZEN_UOCC) are unoccupied in; all reference determinants and are excluded from the correlated wave; function. The model space is selected by considering all possible occupations; of the electrons among the orbitals in the active space that result; in determinants with the correct symmetry (WFN_SYM); and the correct \(\textrm{M}_s\) value specified by the keyword; CORR_MULTP. Note that this does not consider the multiplicity; of the wavefunction. Thus, in order to obtain the wavefunction; with a set of \(\textrm{M}_s = 0\) reference determinants for; an open-shell system you should request a CORR_MULTP of; 1 within the PSIMRCC module, and select the root of the effective; Hamiltonian that corresponds to the state of interest. In addition,; the WFN_SYM keyword needs to be specified otherwise the; wavefunction belonging to the all-symmetric irrep will be selected. In; addition, it should be noted that for an open-shell singlet based; on two \(\textrm{M}_s = 0\) determinants the eigenvector is; [\(\frac{1}{\sqrt{2}}\text{,}\frac{1}{\sqrt{2}}\)], which corresponds; to a wavefunction of the following form:. \[\frac{1}{\sqrt{2}} \left( \chi_1 \alpha (1) \chi_2 \beta (2) + \chi_2 \alpha(1) \chi_1 \beta (2) \right)\]; See Appendix PSIMRCC for a complete list of PSIMRCC options. table of contents. PSIMRCC Implementation of Mk-MRCC Theory; A Simple Example; Orbital ordering and selection of the model space. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Theoretical Methods: SCF to FCI; PSIMRCC Implementation of Mk-MRCC Theory. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/psimrcc-1.html:8217,update,updated,8217,psi4manual/1.5.0/psimrcc-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/psimrcc-1.html,2,['update'],['updated']
Deployability,"t each grid point. Vvals(self: psi4.core.OEProp) → List[float]¶; The electrostatic potential (in a.u.) at each grid point. add(self: psi4.core.OEProp, arg0: str) → None¶; docstring. clear(self: psi4.core.Prop) → None¶; docstring. compute(self: psi4.core.OEProp) → None¶; docstring. set_Da_ao(self: psi4.core.Prop, Da: psi::Matrix, symmetry: int=0) → None¶; docstring. set_Da_mo(self: psi4.core.Prop, arg0: psi::Matrix) → None¶; docstring. set_Da_so(self: psi4.core.Prop, arg0: psi::Matrix) → None¶; docstring. set_Db_ao(self: psi4.core.Prop, Db: psi::Matrix, symmetry: int=0) → None¶; docstring. set_Db_mo(self: psi4.core.Prop, arg0: psi::Matrix) → None¶; docstring. set_Db_so(self: psi4.core.Prop, arg0: psi::Matrix) → None¶; docstring. Exvals(self: psi4.core.OEProp) → List[float]; The x component of the field (in a.u.) at each grid point. Eyvals(self: psi4.core.OEProp) → List[float]; The y component of the field (in a.u.) at each grid point. Ezvals(self: psi4.core.OEProp) → List[float]; The z component of the field (in a.u.) at each grid point. Vvals(self: psi4.core.OEProp) → List[float]; The electrostatic potential (in a.u.) at each grid point. add(self: psi4.core.OEProp, arg0: str) → None; docstring. clear(self: psi4.core.Prop) → None; docstring. compute(self: psi4.core.OEProp) → None; docstring. set_Da_ao(self: psi4.core.Prop, Da: psi::Matrix, symmetry: int=0) → None; docstring. set_Da_mo(self: psi4.core.Prop, arg0: psi::Matrix) → None; docstring. set_Da_so(self: psi4.core.Prop, arg0: psi::Matrix) → None; docstring. set_Db_ao(self: psi4.core.Prop, Db: psi::Matrix, symmetry: int=0) → None; docstring. set_Db_mo(self: psi4.core.Prop, arg0: psi::Matrix) → None; docstring. set_Db_so(self: psi4.core.Prop, arg0: psi::Matrix) → None; docstring. set_title(self: psi4.core.Prop, arg0: str) → None¶; docstring. Navigation. Index. modules    .    .  · ; 1.1;  · . PSI4. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/api/psi4.core.oeprop.html:3316,update,updated,3316,psi4manual/1.1.0/api/psi4.core.oeprop.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/api/psi4.core.oeprop.html,1,['update'],['updated']
Deployability,"t equations are solved; iteratively, while the orbitals are kept fixed. After the density cumulant is; converged, the second set of microiterations is performed for the; self-consistent update of the orbitals with the fixed density cumulant. Each; macroiteration is completed by performing the orbital transformation of the; integrals. The convergence of the two-step algorithm is accelerated using the; DIIS extrapolation technique.; 2) Simultaneous algorithm (set ALGORITHM to SIMULTANEOUS). In this algorithm; each macroiteration consists of a single iteration of the cumulant update; followed by a single iteration of the orbital update and orbital transformation; of the integrals. The macroiterations are repeated until the simultaneous; convergence of the cumulant and the orbitals is achieved. As in the two-step algorithm, the DIIS; extrapolation is used to accelerate the convergence.; 3) Quadratically-convergent algorithm (set ALGORITHM to QC). The; orbital and cumulant update equations are solved using the Newton-Raphson; method. Each macroiteration of the quadratically-convergent algorithm consists; of a single Newton-Raphson update followed by the orbital transformation; of the integrals. The solution of the Newton-Raphson equations is performed; iteratively using the preconditioned conjugate gradients method, where only the; product of the electronic Hessian with the step vector is computed for; efficiency. The electronic Hessian is build for both the cumulant and orbital; updates and both updates are performed simultaneously. By default the; electronic Hessian also contains the matrix elements that couple the orbitals; and the density cumulant. The computation of these coupling elements increases; the cost of the macroiteration, but usually leads to faster convergence and is; recommended for open-shell systems. If the computation of the coupling elements; is not desired, it can be turned off by setting QC_COUPLING to FALSE.; It is important to note that the quadr",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/dcft-1.html:7049,update,update,7049,psi4manual/4.0b4/dcft-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/dcft-1.html,4,['update'],['update']
Deployability,"t for DF-MP2. Instead, it should be used for; large calculations that cannot reasonably be performed with DF-MP2. The crossover; point between DF-MP2 and DLPNO-MP2 depends on details of both the calculation and; the hardware, but can be as low as 2,000 basis functions.; The accuracy of DLPNO-MP2 (relative to DF-MP2) can be controlled with the; PNO_CONVERGENCE keyword according to recommendation by Liakos et al.; [Liakos:2015:1525]. For non-covalent interactions TIGHT is highly recommended.; The greater the spatial sparsity of a molecular system, the smaller the pair; domains and consequently the faster the calculation. DLPNO-MP2 is much faster; for linear alkanes than for globular proteins, all else constant.; Similar to molecular sparsity, the sparsity of the orbital basis affects runtime.; Diffuse functions increase the size of the pair domains and therefore lead to; longer calculations.; All aspects of DLPNO-MP2 run in core; no disk is required. As a result, the; code exhibits very good intra-node parallelism, and benefits from many threads.; The amount of memory needed scales linearly with system size.; DLPNO-MP2 is not symmetry aware. This should not be a concern for large systems in; which symmetry is seldom present.; As with DF-MP2, freezing core orbitals (by setting FREEZE_CORE; to True) is recommended for efficiency. In DLPNO methods, this is also; recommended for accuracy, since core excitations are known to exhibit; greater errors relative to valence excitations.; At the moment, the DLPNO-MP2 code is only compatible with with RHF references. table of contents. DLPNO-MP2: Domain-Based Local Pair Natural Orbital MP2; Introduction; Theory; Recommendations. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.6;  · . PSI4. Theoretical Methods: SCF to FCI; DLPNO-MP2: Domain-Based Local Pair Natural Orbital MP2. © Copyright 2022, The Psi4 Project.; Last updated on Thursday, 19 May 2022 08:57PM.; Created using Sphinx 4.5.0.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/dlpnomp2.html:8575,update,updated,8575,psi4manual/1.6.x/dlpnomp2.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/dlpnomp2.html,1,['update'],['updated']
Deployability,"t for building Psi4¶; Role and Dependencies. Role — In PSI4, simint is a library that provides alternate; integrals.; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) simint; Upstream Dependencies — simint \(\Leftarrow\) None. CMake Variables. ENABLE_simint — CMake variable toggling whether PSI4 builds with simint; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For simint, set to an installation directory containing include/simint/simint.h; simint_DIR — CMake variable to specify where pre-built simint can be found. Set to installation directory containing share/cmake/simint/simintConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_simint — CMake variable to force internal build of simint instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_simint — CMake variable to force detecting pre-built simint and not falling back on internal build; SIMINT_VECTOR — CMake variable for simint vectorization (i.e., scalar sse avx avxfma micavx512). Default is avx, not detected, so sse may be required for older chipsets. See http://www.bennyp.org/research/simint/README.txt for details. Examples. Build bundled. >>> cmake -DENABLE_simint=ON. Build without simint. >>> cmake. Link against pre-built. >>> cmake -DENABLE_simint=ON -DCMAKE_PREFIX_PATH=/path/to/simint/root. >>> cmake -DENABLE_simint=ON -Dsimint_DIR=/path/to/simint/configdir. Build bundled despite pre-built being detectable. >>> cmake -DENABLE_simint=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/simint/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_simint=ON. table of contents. Interface to SIMINT by B. Pritchard; Installation; How to configure simint for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.6;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to SIMINT by B. Pritchard. © Copyright 2022, The Psi4 Project.; Last updated on Thursday, 19 May 2022 08:57PM.; Created using Sphinx 4.5.0.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/simint.html:3652,update,updated,3652,psi4manual/1.6.x/simint.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/simint.html,1,['update'],['updated']
Deployability,"t helpers to export various quantities from the wavefunction; to external formats such as FCHK and MOLDEN. Because the Wavefunction makes; its members available to the Python layer, any other similar export functions; should be written in python. Integral consuming technologies¶; The general philosophy in PSI4 is to try write two-electron integral; driven tasks in methods like Hartree-Fock, CIS and CPHF in terms of generalized; Fock-like matrices. From here, a single class can be used to construct these; generalized Fock matrices, which is what libFock; (psi4/psi4/src/psi4/libfock) accomplishes. A number of integral; technologies – such as integral-direct, disk-based and density fitting – are; supported in libFock, making them generally available to all elements of the; code that use the generalized Fock matrix strategy. Exposing C++ code to Python¶; The recent push to move sections of the code that are not a bottleneck into the; Python layer requires that the C++ code is callable from Python and that its; results are accessible. The result accessibility is addressed by populating; the appropriate variables in the Wavefunction object. To make the code; callable from Python, we rely on the excellent PyBind11 library; to create the bindings. Existing code to export various PSI4 classes can; be found in psi4/psi4/src in the files whose name begins with export_.; The code to export functions that run entire calculations is usually found in; psi4/psi4/src/core.cc. table of contents. General layout of the core: where new C++ code should live; New integral operators; Completely new methods; Integral consuming technologies; Exposing C++ code to Python. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Introduction to Programming in PSI4; General layout of the core: where new C++ code should live. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/prog_tour.html:3516,update,updated,3516,psi4manual/1.8.x/prog_tour.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/prog_tour.html,1,['update'],['updated']
Deployability,"t helpers to export various quantities from the wavefunction; to external formats such as FCHK and MOLDEN. Because the Wavefunction makes; its members available to the Python layer, any other similar export functions; should be written in python. Integral consuming technologies¶; The general philosophy in PSI4 is to try write two-electron integral; driven tasks in methods like Hartree-Fock, CIS and CPHF in terms of generalized; Fock-like matrices. From here, a single class can be used to construct these; generalized Fock matrices, which is what libFock; (psi4/psi4/src/psi4/libfock) accomplishes. A number of integral; technologies – such as integral-direct, disk-based and density fitting – are; supported in libFock, making them generally available to all elements of the; code that use the generalized Fock matrix strategy. Exposing C++ code to Python¶; The recent push to move sections of the code that are not a bottleneck into the; Python layer requires that the C++ code is callable from Python and that its; results are accessible. The result accessibility is addressed by populating; the appropriate variables in the Wavefunction object. To make the code; callable from Python, we rely on the excellent PyBind11 library; to create the bindings. Existing code to export various PSI4 classes can; be found in psi4/psi4/src in the files whose name begins with export_.; The code to export functions that run entire calculations is usually found in; psi4/psi4/src/core.cc. table of contents. General layout of the core: where new C++ code should live; New integral operators; Completely new methods; Integral consuming technologies; Exposing C++ code to Python. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.9.1;  · . PSI4. Introduction to Programming in PSI4; General layout of the core: where new C++ code should live. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 08 February 2024 09:32PM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/prog_tour.html:3516,update,updated,3516,psi4manual/1.9.x/prog_tour.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/prog_tour.html,1,['update'],['updated']
Deployability,"t in the tertiary virtual subspace (RAS 4), then that excitation is only allowed if it is a single or double. omp2-1; OMP2 cc-pVDZ energy for the H2O molecule. scf-upcast-custom-basis; test scf castup with custom basis sets. matrix1; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating matrix multiplication, eigendecomposition, Cholesky decomposition and LU decomposition. These operations are performed on vectors and matrices provided from the Psi library. opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. omp2p5-grad1; OMP2.5 cc-pVDZ gradient for the H2O molecule. fnocc5; Test FNO-DF-CCSD(T) energy. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. scf-ecp; Water-Argon complex with ECP present; check of energies and forces. olccd1; OLCCD cc-pVDZ energy for the H2O molecule. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. dft-pruning; Tests all grid pruning options available and screening of small weights. Check against grid size. psimrcc-fd-freq2; Mk-MRCCSD frequencies. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. cbs-xtpl-energy; Extrapolated water energies. dct2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. dft-reference; MP2 with a PBE0 reference computation. mbis-1; MBIS calculation on H2O. dfomp3-1; DF-OMP3 cc-pVDZ energy for the H2O molecule",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html:39724,install,install,39724,psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html,4,['install'],['install']
Deployability,"t interfere with other programs; rather than the main; Anaconda or Miniconda environment. Hence the creation of the environment; above, but the environment name (p4env above) can be; substituted.; The psi4-rt package can be added to the package list to get the; QC runtime add-ons; could say any combination of v2rdm_casscf snsmp2; openfermion-psi4 adcc cppe etc. instead of psi4-rt.; Grab a Miniconda through one of the below, selecting OS.; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-Linux-x86_64.sh""; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-MacOSX-x86_64.sh""; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-Windows-x86_64.exe"". How to update a Psi4 binary¶; A. Conda command to update an existing PSI4 conda installation to the; newest stable release (roughly annually). It’s often a better idea to create; a new environment rather than updating the old one.; >>> # Linux/MacOS; >>> conda update psi4 -c psi4; >>> # Windows; >>> conda update psi4 -c psi4 -c conda-forge. # if psi4 channel in defaults (true for Psi4conda installers); >>> conda update psi4. B. Conda command to update an existing PSI4 conda installation to the; latest development head (roughly nightly).; >>> # Linux/MacOS; >>> conda update psi4 -c psi4/label/dev; >>> # Windows; >>> conda update psi4 -c psi4/label/dev -c conda-forge. C. Conda command to install a very specific package, including version,; build string, and subchannel. The final -c psi4 represents any; additional channels or subchannels needed to locate all dependencies.; >>> conda install psi4=1.2a1.dev249+623ad64=py36_sse41_0 -c psi4/label/subchannel -c psi4. How to use conda to compile Psi4 faster and easier¶; # Linux # c. v1.2rc1 ###or Mac or Windows; # substitute x.x by 3.5|3.6|3.7 for alternate python versions; >>> conda create -n p4dev python=x.x psi4-dev -c psi4/label/dev -c psi4; >>> conda activate p4dev. >>> cd {top-level-psi4-dir}; >>> psi4-path-advisor --h",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/conda-1.html:6924,update,update,6924,psi4manual/1.4.0/conda-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html,10,['update'],['update']
Deployability,"t is a passable summary:; cmake_policy(SET CMP0167 OLD); endif (); # 3.15: useable FindPython with NumPy component and LOCATION; # 3.8: CXX_STANDARD recognizes C++17; # 3.3: EP_add(DEPENDS interfacelib, CheckFortranCompilerFlag; # 3.2: continue(); # 3.1: CMAKE_CXX_STANDARD, BUILD_ALWAYS. set(CMAKE_BUILD_TYPE ""Release"" CACHE STRING ""Choose the type of build."") # foil Ninja Debug on Windows. project(psi4; LANGUAGES C CXX); set(psi4_URL ""http://www.psicode.org/""); set(psi4_EMAIL ""psi4aiqc+cmake@gmail.com""); set(psi4_LICENSE ""GNU Lesser General Public License, version 3 (LGPL-3.0)""); set(psi4_DESCRIPTION ""Open-Source Quantum Chemistry""). list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake). message(STATUS ""Building using CMake ${CMAKE_VERSION} Generator ${CMAKE_GENERATOR}""). ################ Options: Overview and Not Otherwise Mentioned ###############. # <<< CMake build overview >>>; #; # >>> ls; # external/ COPYING psi4/ tests/ ...; # >>> cmake -S. -Bobjdir -DCMAKE_INSTALL_PREFIX=/path/to/install-psi4 ...; # ...; # -- Generating done; # -- Build files have been written to: /current/dir/objdir; # >>> cmake --build objdir --target install -j`getconf _NPROCESSORS_ONLN`. # <<< Required build dependencies that Psi4 can't build itself >>>; #; # - CMake (e.g., `conda install cmake`); # - C++ and C compilers (C++20 compliant); # - BLAS/LAPACK (also runtime; e.g., `conda install mkl-devel`); # - Python (also runtime; interpreter and headers; e.g., `conda install python`); # - NumPy (also runtime; avoidable at buildtime if gau2grid pre-built; e.g., `conda install numpy`); # - networkx >=2.4 (runtime only; e.g., `conda install networkx`); # - pint >=0.10 (runtime only; e.g., `conda install pint -c conda-forge`); # - pydantic >=1.0 (runtime only; e.g., `conda install pydantic -c conda-forge`); # - msgpack-python (runtime only; e.g., `conda install msgpack-python`); # - Eigen (for Libint2; e.g., `conda install eigen`); # - Boost (header-only libs for Libint2; e.g., `co",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/build_planning.html:15690,install,install-,15690,psi4manual/master/build_planning.html,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html,1,['install'],['install-']
Deployability,"t needs. It works because PSI_SCRATCH; defaults to /tmp. Now you need only specify a permanent scratch; directory (see Scratch Files) by replacing the placeholder in the; following:; >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!; Configuration for this set-up is summarized at How to run Psi4 as executable or Python module from conda installation. Note; PSI4 installs a Python distribution alongside, so you should choose an installer based on the Python version you want, irrespective of any Python version you have. How to install a Psi4 binary into an Ana/Miniconda distribution¶; Conda command to install the latest nightly build of PSI4 + compiled; add-ons + runtime add-ons into an existing Anaconda or Miniconda; distribution.; # Linux or Mac or Windows; # substitute x.x by 3.6|3.7|3.8|3.9 for alternate python versions; # remove `-c psi4/label/dev` to get stable releases instead of nightly builds; >>> conda create -n p4env python=x.x psi4 -c psi4/label/dev. Activate environment and make the adjustments to PATH and; PSI_SCRATCH that it suggests at the end. Test with psi4; --test. Configuration for this set-up is summarized at; How to run Psi4 as executable or Python module from conda installation.; Details:. It is advised to place PSI4 into a conda; environment where its libraries can’t interfere with other programs; rather than the main; Anaconda or Miniconda environment. Hence the creation of the environment; above, but the environment name (p4env above) can be; substituted.; The psi4-rt package can be added to the package list to get the; QC runtime add-ons; could say any combination of v2rdm_casscf snsmp2; openfermion-psi4 adcc cppe etc. instead of psi4-rt.; Grab a Miniconda through one of the below, selecting OS.; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-Linux-x86_64.sh""; >>> curl -O ""https://repo.anaconda.c",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/conda-1.html:5519,release,releases,5519,psi4manual/1.4.0/conda-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html,5,['release'],['releases']
Deployability,"t needs. It works because PSI_SCRATCH; defaults to /tmp. Now you need only specify a permanent scratch; directory (see Scratch Files) by replacing the placeholder in the; following:; >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!; Configuration for this set-up is summarized at How to run Psi4 as executable or Python module from conda installation. Note; PSI4 installs a Python distribution alongside, so you should choose an installer based on the Python version you want, irrespective of any Python version you have. How to install a Psi4 binary into an Ana/Miniconda distribution¶; Conda command to install the latest nightly build of PSI4 + compiled; add-ons + runtime add-ons into an existing Anaconda or Miniconda; distribution.; # Linux or Mac or Windows; # substitute x.x by 3.6|3.7|3.8|3.9 for alternate python versions; # remove `-c psi4/label/dev` to get stable releases instead of nightly builds; >>> conda create -n p4env python=x.x psi4 -c psi4/label/dev. Activate environment and make the adjustments to PATH and; PSI_SCRATCH that it suggests at the end. Test with psi4; --test. Configuration for this set-up is summarized at; How to run Psi4 as executable or Python module from conda installation.; Details:. It is advised to place PSI4 into a conda; environment where its libraries can’t interfere with other programs; rather than the main; Anaconda or Miniconda environment. Hence the creation of the environment; above, but the environment name (p4env above) can be; substituted.; The psi4-rt package can be added to the package list to get the; QC runtime add-ons; could say any combination of v2rdm_casscf snsmp2; resp etc. instead of psi4-rt.; As of PSI4 v1.7, the psi4-rt package is being slowly retired; due to more optional dependencies being on conda-forge. Similar collections; of dependencies can be obtained from environment spec files like p",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/conda.html:5510,release,releases,5510,psi4manual/1.7.x/conda.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/conda.html,4,['release'],['releases']
Deployability,"t of (key, value) pairs in od'; return [(key, self[key]) for key in self]. [docs] def iterkeys(self):; 'od.iterkeys() -> an iterator over the keys in od'; return iter(self). [docs] def itervalues(self):; 'od.itervalues -> an iterator over the values in od'; for k in self:; yield self[k]. [docs] def iteritems(self):; 'od.iteritems -> an iterator over the (key, value) items in od'; for k in self:; yield (k, self[k]). [docs] def update(*args, **kwds):; '''od.update(E, **F) -> None. Update od from dict/iterable E and F. If E is a dict instance, does: for k in E: od[k] = E[k]; If E has a .keys() method, does: for k in E.keys(): od[k] = E[k]; Or if E is an iterable of items, does: for k, v in E: od[k] = v; In either case, this is followed by: for k, v in F.items(): od[k] = v. '''; if len(args) > 2:; raise TypeError('update() takes at most 2 positional '; 'arguments (%d given)' % (len(args),)); elif not args:; raise TypeError('update() takes at least 1 argument (0 given)'); self = args[0]; # Make progressively weaker assumptions about ""other""; other = (); if len(args) == 2:; other = args[1]; if isinstance(other, dict):; for key in other:; self[key] = other[key]; elif hasattr(other, 'keys'):; for key in other.keys():; self[key] = other[key]; else:; for key, value in other:; self[key] = value; for key, value in kwds.items():; self[key] = value. __update = update # let subclasses override update without breaking __init__. __marker = object(). [docs] def pop(self, key, default=__marker):; '''od.pop(k[,d]) -> v, remove specified key and return the corresponding value.; If key is not found, d is returned if given, otherwise KeyError is raised. '''; if key in self:; result = self[key]; del self[key]; return result; if default is self.__marker:; raise KeyError(key); return default. [docs] def setdefault(self, key, default=None):; 'od.setdefault(k[,d]) -> od.get(k,d), also set od[k]=d if k not in od'; if key in self:; return self[key]; self[key] = default; return default. def __repr",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/oldpymodules.html:4725,update,update,4725,psi4manual/1.0.0/_modules/qcdb/oldpymodules.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/oldpymodules.html,2,['update'],['update']
Deployability,"t python versions, etc.. If your main conda is not python=2.7, then PSI4 must be installed into a conda environment. In practical terms, installing into a conda environment means you can turn PSI4‘s availability on/off by switching conda environments without turning on/off the whole Ana/Miniconda installation. Below, PSI4 is installed into an environment called p4env. Then the environment is activated, removing the main Ana/Miniconda bin and adding envs/p4env/bin to PATH. The activate command only works in bash, so csh/tcsh will need corresponding adjustments.; >>> conda create -n p4env psi4; >>> source activate p4env; # check; >>> which psi4; /path/to/miniconda/envs/p4env/bin/psi4. The output for either of the installation commands above looks like the following. It checks what packages are needed, gets your approval for downloading them, fetches and installs them, prints out some useful information, and runs a PSI4 test case to check that all’s well.; >>> conda install psi4; Using Anaconda Cloud api site https://api.anaconda.org; Fetching package metadata: ......; Solving package specifications: ......... Package plan for installation in environment /theoryfs2/ds/cdsgroup/miniconda/envs/tpsi4:. The following packages will be downloaded:. package | build; ---------------------------|-----------------; psi4-0.4.322 | py27_g84b3aa1 44.4 MB http://conda.anaconda.org/psi4/linux-64/. The following NEW packages will be INSTALLED:. psi4: 0.4.322-py27_g84b3aa1 http://conda.anaconda.org/psi4/linux-64/. Proceed ([y]/n)? y. Fetching packages ...; psi4-0.4.322-p 100% |####################################################################################| Time: 0:00:08 5.77 MB/s; Extracting packages ...; [ COMPLETE ]|#######################################################################################################| 100%; Linking packages ... Thank you for installing psi4. Additional resources:; Website: www.psicode.org; Inputs: /theoryfs2/ds/cdsgroup/miniconda/envs/tpsi4/sha",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/conda-1.html:15050,install,install,15050,psi4manual/1.1.0/conda-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/conda-1.html,2,['install'],['install']
Deployability,"t python versions, etc.. If your main conda is not python=2.7, then Psi4 must be installed into a conda environment. In practical terms, installing into a conda environment means you can turn Psi4‘s availability on/off by switching conda environments without turning on/off the whole Ana/Miniconda installation. Below, Psi4 is installed into an environment called p4env. Then the environment is activated, removing the main Ana/Miniconda bin and adding envs/p4env/bin to PATH. The activate command only works in bash, so csh/tcsh will need corresponding adjustments.; >>> conda create -n p4env psi4; >>> source activate p4env; # check; >>> which psi4; /path/to/miniconda/envs/p4env/bin/psi4. The output for either of the installation commands above looks like the following. It checks what packages are needed, gets your approval for downloading them, fetches and installs them, prints out some useful information, and runs a Psi4 test case to check that all’s well.; >>> conda install psi4; Using Anaconda Cloud api site https://api.anaconda.org; Fetching package metadata: ......; Solving package specifications: ......... Package plan for installation in environment /theoryfs2/ds/cdsgroup/miniconda/envs/tpsi4:. The following packages will be downloaded:. package | build; ---------------------------|-----------------; psi4-0.4.322 | py27_g84b3aa1 44.4 MB http://conda.anaconda.org/psi4/linux-64/. The following NEW packages will be INSTALLED:. psi4: 0.4.322-py27_g84b3aa1 http://conda.anaconda.org/psi4/linux-64/. Proceed ([y]/n)? y. Fetching packages ...; psi4-0.4.322-p 100% |####################################################################################| Time: 0:00:08 5.77 MB/s; Extracting packages ...; [ COMPLETE ]|#######################################################################################################| 100%; Linking packages ... Thank you for installing psi4. Additional resources:; Website: www.psicode.org; Inputs: /theoryfs2/ds/cdsgroup/miniconda/envs/tpsi4/sha",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/conda-1.html:10324,install,install,10324,psi4manual/1.0.0/conda-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/conda-1.html,2,['install'],['install']
Deployability,"t the Exchange term within a composite framework; are as follows:. COSXAn algorithm based on the semi-numerical “chain of spheres exchange” (COSX); approach described in [Neese:2009:98]. The coulomb term is computed with a; direct density-fitting algorithm. The COSX algorithm uses no I/O, scales; well with system size, and requires minimal memory, making it ideal for; large systems and multi-core CPUs. See COSX Exchange for more information. LINKAn implementation of the linear-scaling “Linear Exchange” (LinK); algorithm described in [Ochsenfeld:1998:1663]. The LINK algorithm provides; many of the benefits of integral-direct SCF algorithms, including no disk I/O,; low memory usage, and effective parallelization. Additionally, the; LINK implementation scales well with system size; while simultaneously providing a formally-exact computation of the; Exchange term. See Linear Exchange for more information. In some cases the above algorithms have multiple implementations that return; the same result, but are optimal under different molecules sizes and hardware; configurations. Psi4 will automatically detect the correct algorithm to run and; only expert users should manually select the below implementations. The DF; algorithm has the following two implementations. MEM_DFA DF algorithm optimized around memory layout and is optimal as long as; there is sufficient memory to hold the three-index DF tensors in memory. This; algorithm may be faster for builds that require disk if SSDs are used. DISK_DFA DF algorithm (the default DF algorithm before Psi4 1.2) optimized to; minimize Disk IO by sacrificing some performance due to memory layout. Note that these algorithms have both in-memory and on-disk options, but; performance penalties up to a factor of 2.5 can be found if the incorrect; algorithm is chosen. It is therefore highly recommended that the keyword “DF”; be selected in all cases so that the correct implementation can be selected by; PSI4‘s internal routines. Expert user",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/scf.html:30109,configurat,configurations,30109,psi4manual/1.8.x/scf.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/scf.html,2,['configurat'],['configurations']
Deployability,"t these functionals are not appropriate for modeling; dispersion interactions, as they lack dispersion physics. A -D functional (Such; as the much cheaper B97-D) should be used instead.; Hybrid Functionals; Many common hybrid functionals, including the ubiquitous B3LYP. PBE0 and the; B97 series are also quite good for many thermochemical problems.; LRC Functionals; LRC functionals are a particular area of interest of the PSI4 DFT team.; LRC functionals are all denoted by a lower-case “w” in front of the standard DFA; functional, such as wPBE. We offer a stable implementation of the Gill; association function for wS and Head-Gordon’s wB97/wB97X functionals.; Additionally, we are pleased to have recently completed a heavily conditioned; implementation of the HJS exchange-hole model, which provides an analytical form; for the short-range enhancement factor for wPBE, wPBEsol, and wB88. From a; physics perspective, this implementation of wPBE is extremely useful for; theoretical investigations, as it is parameter free, and properly integrated; against the partition function in the exchange hole. We would like to thank Dr.; Scuseria for providing helpful advice and a reference implementations of the; older HSE exchange-hole model which led to the successful implementation of the; HJS model.; -D Functionals; We have several -D2 functionals implemented, and will shortly be adding many; more combinations of -D2 and -D3 functionals. For now, the pure-GGA B97-D; functional of Grimme is remarkably accurate, and the hybrid B3LYP-D; functional is also quite reliable. Note: we have made a sincere effort to rigorously test all functionals; implemented in PSI4 for both numerical stability and correctness. If you; observe any unexpected results, please email Rob Parrish (robparrish@gmail.com); for immediate assistance. Additionally, if you have a request for a new; functional, please let us know. Grid Selection¶; PSI4 uses the standard Lebedev-Laikov spherical quadratures in concert w",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/dft-1.html:13429,integrat,integrated,13429,psi4manual/4.0b2/dft-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/dft-1.html,2,['integrat'],['integrated']
Deployability,"t these functionals are not appropriate for modeling; dispersion interactions, as they lack dispersion physics. A -D functional (Such; as the much cheaper B97-D) should be used instead.; Hybrid Functionals; Many common hybrid functionals, including the ubiquitous B3LYP. PBE0 and the; B97 series are also quite good for many thermochemical problems.; LRC Functionals; LRC functionals are a particular area of interest of the PSI4 DFT team.; LRC functionals are all denoted by a lower-case “w” in front of the standard DFA; functional, such as wPBE. We offer a stable implementation of the Gill; association function for wS and Head-Gordon’s wB97/wB97X functionals.; Additionally, we are pleased to have recently completed a heavily conditioned; implementation of the HJS exchange-hole model, which provides an analytical form; for the short-range enhancement factor for wPBE, wPBEsol, and wB88. From a; physics perspective, this implementation of wPBE is extremely useful for; theoretical investigations, as it is parameter free, and properly integrated; against the partition function in the exchange hole. We would like to thank Dr.; Scuseria for providing helpful advice and a reference implementations of the; older HSE exchange-hole model which led to the successful implementation of the; HJS model.; Double-Hybrid Functionals; Double hybrids are percolating into PSI4. Note that these are; only available with density-fitted, not conventional, MP2 algorithms.; -D Functionals; We have several -D2 functionals implemented. -D3 functionls are available; with the installation of Grimme’s DFTD3 program.; For now, the pure-GGA B97-D; functional of Grimme is remarkably accurate, and the hybrid B3LYP-D; functional is also quite reliable. Note: we have made a sincere effort to rigorously test all functionals; implemented in PSI4 for correctness. If you find an error in a DFT; functional or have a request for a new functional, please let us know on our; forum or GitHub page. Grid Selection¶; PS",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/dft-1.html:17658,integrat,integrated,17658,psi4manual/1.3.2/dft-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/dft-1.html,2,['integrat'],['integrated']
Deployability,"t these functionals are not appropriate for modeling; dispersion interactions, as they lack dispersion physics. A -D functional (Such; as the much cheaper B97-D) should be used instead.; Hybrid Functionals; Many common hybrid functionals, including the ubiquitous B3LYP. PBE0 and the; B97 series are also quite good for many thermochemical problems.; LRC Functionals; LRC functionals are a particular area of interest of the PSI4 DFT team.; LRC functionals are all denoted by a lower-case “w” in front of the standard DFA; functional, such as wPBE. We offer a stable implementation of the Gill; association function for wS and Head-Gordon’s wB97/wB97X functionals.; Additionally, we are pleased to have recently completed a heavily conditioned; implementation of the HJS exchange-hole model, which provides an analytical form; for the short-range enhancement factor for wPBE, wPBEsol, and wB88. From a; physics perspective, this implementation of wPBE is extremely useful for; theoretical investigations, as it is parameter free, and properly integrated; against the partition function in the exchange hole. We would like to thank Dr.; Scuseria for providing helpful advice and a reference implementations of the; older HSE exchange-hole model which led to the successful implementation of the; HJS model.; Double-Hybrid Functionals; Double hybrids are percolating into PSI4. Note that these are; only available with density-fitted, not conventional, mp2 algorithms.; -D Functionals; We have several -D2 functionals implemented, -D3 functionls are available; with the installation of Grimme’s DFTD3 program, and we; will shortly be adding many; more combinations of -D2 and -D3 functionals. For now, the pure-GGA B97-D; functional of Grimme is remarkably accurate, and the hybrid B3LYP-D; functional is also quite reliable. Note: we have made a sincere effort to rigorously test all functionals; implemented in PSI4 for both numerical stability and correctness. If you; observe any unexpected results,",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/dft-1.html:13454,integrat,integrated,13454,psi4manual/4.0b3/dft-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/dft-1.html,6,['integrat'],['integrated']
Deployability,"t these functionals are not appropriate for modeling; dispersion interactions, as they lack dispersion physics. A -D functional (Such; as the much cheaper B97-D) should be used instead.; Hybrid Functionals; Many common hybrid functionals, including the ubiquitous B3LYP. PBE0 and the; B97 series are also quite good for many thermochemical problems.; LRC Functionals; LRC functionals are a particular area of interest of the PSI4 DFT team.; LRC functionals are all denoted by a lower-case “w” in front of the standard DFA; functional, such as wPBE. We offer a stable implementation of the Gill; association function for wS and Head-Gordon’s wB97/wB97X functionals.; Additionally, we are pleased to have recently completed a heavily conditioned; implementation of the HJS exchange-hole model, which provides an analytical form; for the short-range enhancement factor for wPBE, wPBEsol, and wB88. From a; physics perspective, this implementation of wPBE is extremely useful for; theoretical investigations, as it is parameter free, and properly integrated; against the partition function in the exchange hole. We would like to thank Dr.; Scuseria for providing helpful advice and a reference implementations of the; older HSE exchange-hole model which led to the successful implementation of the; HJS model.; Double-Hybrid Functionals; Double hybrids are percolating into PSI4. Note that these are; only available with density-fitted, not conventional, mp2 algorithms.; -D Functionals; We have several -D2 functionals implemented. -D3 functionls are available; with the installation of Grimme’s DFTD3 program.; For now, the pure-GGA B97-D; functional of Grimme is remarkably accurate, and the hybrid B3LYP-D; functional is also quite reliable. Note: we have made a sincere effort to rigorously test all functionals; implemented in PSI4 for both numerical stability and correctness. If you; observe any unexpected results, please email Rob Parrish (robparrish@gmail.com); for immediate assistance. Additi",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/dft-1.html:17641,integrat,integrated,17641,psi4manual/1.2.1/dft-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/dft-1.html,4,['integrat'],['integrated']
Deployability,"t these functionals are not appropriate for modeling; dispersion interactions, as they lack dispersion physics. A -D functional (Such; as the much cheaper B97-D) should be used instead.; Hybrid Functionals; Many common hybrid functionals, including the ubiquitous B3LYP. PBE0 and the; B97 series are also quite good for many thermochemical problems.; LRC Functionals; LRC functionals are a particular area of interest of the Psi4 DFT team.; LRC functionals are all denoted by a lower-case “w” in front of the standard DFA; functional, such as wPBE. We offer a stable implementation of the Gill; association function for wS and Head-Gordon’s wB97/wB97X functionals.; Additionally, we are pleased to have recently completed a heavily conditioned; implementation of the HJS exchange-hole model, which provides an analytical form; for the short-range enhancement factor for wPBE, wPBEsol, and wB88. From a; physics perspective, this implementation of wPBE is extremely useful for; theoretical investigations, as it is parameter free, and properly integrated; against the partition function in the exchange hole. We would like to thank Dr.; Scuseria for providing helpful advice and a reference implementations of the; older HSE exchange-hole model which led to the successful implementation of the; HJS model.; Double-Hybrid Functionals; Double hybrids are percolating into Psi4. Note that these are; only available with density-fitted, not conventional, mp2 algorithms.; -D Functionals; We have several -D2 functionals implemented, -D3 functionls are available; with the installation of Grimme’s DFTD3 program, and we; will shortly be adding many; more combinations of -D2 and -D3 functionals. For now, the pure-GGA B97-D; functional of Grimme is remarkably accurate, and the hybrid B3LYP-D; functional is also quite reliable. Note: we have made a sincere effort to rigorously test all functionals; implemented in Psi4 for both numerical stability and correctness. If you; observe any unexpected results,",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/dft-1.html:13539,integrat,integrated,13539,psi4manual/1.0.0/dft-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/dft-1.html,2,['integrat'],['integrated']
Deployability,"t will stop working\n"",; category=FutureWarning,; stacklevel=2). print(stuff, file=sys.stderr). [docs]def levenshtein(seq1, seq2):; """"""Compute the Levenshtein distance between two strings."""""". oneago = None; thisrow = list(range(1, len(seq2) + 1)) + [0]; for x in range(len(seq1)):; twoago, oneago, thisrow = oneago, thisrow, [0] * len(seq2) + [x + 1]; for y in range(len(seq2)):; delcost = oneago[y] + 1; addcost = thisrow[y - 1] + 1; subcost = oneago[y - 1] + (seq1[x] != seq2[y]); thisrow[y] = min(delcost, addcost, subcost); return thisrow[len(seq2) - 1]. [docs]def find_approximate_string_matches(seq1, options, max_distance):; """"""Find list of approximate (within `max_distance`) matches to string `seq1` among `options`."""""". return [seq2 for seq2 in options if (levenshtein(seq1, seq2) <= max_distance)]. [docs]def message_box(message: str = None, max_width: int = 80, min_width: int = 30):; """""" put a message string into a box for extra attention. Parameters; -----------; message; message string to be boxed. max_width; maximal character width of the box. Returns; --------; str; box containing the message as a multiline string; """"""; from textwrap import wrap. # ensure box is within min/max boundaries; msg = message.splitlines(); max_line = len(max(msg, key=len)); box_width = max(min(max_width, max_line), min_width). error_str = []; error_str.append('\n!' + '-' * box_width + '--!\n'); error_str.append('!' + ' ' * box_width + ' !\n'). fmt = ""! {:"" + str(box_width) + ""} !\n""; for line in msg[:]:; error_str.extend([fmt.format(x) for x in wrap(line, box_width, subsequent_indent="" "")]). error_str.append('!' + ' ' * box_width + ' !\n'); error_str.append('!' + '-' * box_width + '--!\n'); error_str = ''.join(error_str). return error_str. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .  · ; 1.4;  · . PSI4. Module code; psi4.driver.p4util.text. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/p4util/text.html:7718,update,updated,7718,psi4manual/1.4.0/_modules/psi4/driver/p4util/text.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/p4util/text.html,1,['update'],['updated']
Deployability,"t will stop working\n"",; category=FutureWarning,; stacklevel=2). print(stuff, file=sys.stderr). [docs]def levenshtein(seq1, seq2):; """"""Compute the Levenshtein distance between two strings."""""". oneago = None; thisrow = list(range(1, len(seq2) + 1)) + [0]; for x in range(len(seq1)):; twoago, oneago, thisrow = oneago, thisrow, [0] * len(seq2) + [x + 1]; for y in range(len(seq2)):; delcost = oneago[y] + 1; addcost = thisrow[y - 1] + 1; subcost = oneago[y - 1] + (seq1[x] != seq2[y]); thisrow[y] = min(delcost, addcost, subcost); return thisrow[len(seq2) - 1]. [docs]def find_approximate_string_matches(seq1, options, max_distance):; """"""Find list of approximate (within `max_distance`) matches to string `seq1` among `options`."""""". return [seq2 for seq2 in options if (levenshtein(seq1, seq2) <= max_distance)]. [docs]def message_box(message: str = None, max_width: int = 80, min_width: int = 30):; """""" put a message string into a box for extra attention. Parameters; -----------; message; message string to be boxed. max_width; maximal character width of the box. Returns; --------; str; box containing the message as a multiline string; """"""; from textwrap import wrap. # ensure box is within min/max boundaries; msg = message.splitlines(); max_line = len(max(msg, key=len)); box_width = max(min(max_width, max_line), min_width). error_str = []; error_str.append('\n!' + '-' * box_width + '--!\n'); error_str.append('!' + ' ' * box_width + ' !\n'). fmt = ""! {:"" + str(box_width) + ""} !\n""; for line in msg[:]:; error_str.extend([fmt.format(x) for x in wrap(line, box_width, subsequent_indent="" "")]). error_str.append('!' + ' ' * box_width + ' !\n'); error_str.append('!' + '-' * box_width + '--!\n'); error_str = ''.join(error_str). return error_str. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .  · ; 1.5;  · . PSI4. Module code; psi4.driver.p4util.text. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/_modules/psi4/driver/p4util/text.html:7718,update,updated,7718,psi4manual/1.5.0/_modules/psi4/driver/p4util/text.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/_modules/psi4/driver/p4util/text.html,1,['update'],['updated']
Deployability,"t |. previous |; PSI4 [beta2] » ; Appendices »; PSI Variables by Module ». DETCI¶; Performs configuration interaction (CI) computations of various types, including restricted-active-space (RAS) CI, full CI, the CI component of multi-configuration self-consistent-field (MCSCF) and complete-active-space self-consistent-field (CASSCF) computations, and arbitrary-order perturbation theory and arbitrary-order coupled-cluster computations for small molecules. CI CORRELATION ENERGY; CI DIPOLE X; CI DIPOLE Y; CI DIPOLE Z; CI QUADRUPOLE XX; CI QUADRUPOLE XY; CI QUADRUPOLE XZ; CI QUADRUPOLE YY; CI QUADRUPOLE YZ; CI QUADRUPOLE ZZ; CI ROOT n -> ROOT m DIPOLE X; CI ROOT n -> ROOT m DIPOLE Y; CI ROOT n -> ROOT m DIPOLE Z; CI ROOT n -> ROOT m QUADRUPOLE XX; CI ROOT n -> ROOT m QUADRUPOLE XY; CI ROOT n -> ROOT m QUADRUPOLE XZ; CI ROOT n -> ROOT m QUADRUPOLE YY; CI ROOT n -> ROOT m QUADRUPOLE YZ; CI ROOT n -> ROOT m QUADRUPOLE ZZ; CI ROOT n CORRELATION ENERGY; CI ROOT n DIPOLE X; CI ROOT n DIPOLE Y; CI ROOT n DIPOLE Z; CI ROOT n QUADRUPOLE XX; CI ROOT n QUADRUPOLE XY; CI ROOT n QUADRUPOLE XZ; CI ROOT n QUADRUPOLE YY; CI ROOT n QUADRUPOLE YZ; CI ROOT n QUADRUPOLE ZZ; CI ROOT n TOTAL ENERGY; CI STATE-AVERAGED CORRELATION ENERGY; CI STATE-AVERAGED TOTAL ENERGY; CI TOTAL ENERGY; CISD CORRELATION ENERGY; CISD TOTAL ENERGY; CISDT CORRELATION ENERGY; CISDT TOTAL ENERGY; CISDTQ CORRELATION ENERGY; CISDTQ TOTAL ENERGY; CIn CORRELATION ENERGY; CIn TOTAL ENERGY; CURRENT CORRELATION ENERGY; CURRENT ENERGY; CURRENT REFERENCE ENERGY; FCI CORRELATION ENERGY; FCI TOTAL ENERGY; MPn CORRELATION ENERGY; MPn TOTAL ENERGY; ZAPTn CORRELATION ENERGY; ZAPTn TOTAL ENERGY. Previous topic; DCFT; Next topic; DFMP2; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Appendices »; PSI Variables by Module ». © Copyright 2012, Psi4 Project.; Last updated on Sep 30, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/autodir_psivariables/module__detci-1.html:2015,update,updated,2015,psi4manual/4.0b2/autodir_psivariables/module__detci-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/autodir_psivariables/module__detci-1.html,2,['update'],['updated']
Deployability,"t('heavy-aug-cc-pvtz-ri'). basis_6311ppg.add_jkfit('aug-cc-pvtz-jkfit'); basis_6311ppg_d_.add_jkfit('aug-cc-pvtz-jkfit'); basis_6311ppg_d_p_.add_jkfit('aug-cc-pvtz-jkfit'); basis_6311ppgs.add_jkfit('aug-cc-pvtz-jkfit'); basis_6311ppgss.add_jkfit('aug-cc-pvtz-jkfit'); basis_6311ppg_2d_.add_jkfit('aug-cc-pvtz-jkfit'); basis_6311ppg_2d_p_.add_jkfit('aug-cc-pvtz-jkfit'); basis_6311ppg_2d_2p_.add_jkfit('aug-cc-pvtz-jkfit'); basis_6311ppg_2df_.add_jkfit('aug-cc-pvtz-jkfit'); basis_6311ppg_2df_p_.add_jkfit('aug-cc-pvtz-jkfit'); basis_6311ppg_2df_2p_.add_jkfit('aug-cc-pvtz-jkfit'); basis_6311ppg_2df_2pd_.add_jkfit('aug-cc-pvtz-jkfit'); basis_6311ppg_3df_.add_jkfit('aug-cc-pvtz-jkfit'); basis_6311ppg_3df_p_.add_jkfit('aug-cc-pvtz-jkfit'); basis_6311ppg_3df_2p_.add_jkfit('aug-cc-pvtz-jkfit'); basis_6311ppg_3df_2pd_.add_jkfit('aug-cc-pvtz-jkfit'); basis_6311ppg_3df_3pd_.add_jkfit('aug-cc-pvtz-jkfit'). basis_6311ppg.add_rifit('aug-cc-pvtz-ri'); basis_6311ppg_d_.add_rifit('aug-cc-pvtz-ri'); basis_6311ppg_d_p_.add_rifit('aug-cc-pvtz-ri'); basis_6311ppgs.add_rifit('aug-cc-pvtz-ri'); basis_6311ppgss.add_rifit('aug-cc-pvtz-ri'); basis_6311ppg_2d_.add_rifit('aug-cc-pvtz-ri'); basis_6311ppg_2d_p_.add_rifit('aug-cc-pvtz-ri'); basis_6311ppg_2d_2p_.add_rifit('aug-cc-pvtz-ri'); basis_6311ppg_2df_.add_rifit('aug-cc-pvtz-ri'); basis_6311ppg_2df_p_.add_rifit('aug-cc-pvtz-ri'); basis_6311ppg_2df_2p_.add_rifit('aug-cc-pvtz-ri'); basis_6311ppg_2df_2pd_.add_rifit('aug-cc-pvtz-ri'); basis_6311ppg_3df_.add_rifit('aug-cc-pvtz-ri'); basis_6311ppg_3df_p_.add_rifit('aug-cc-pvtz-ri'); basis_6311ppg_3df_2p_.add_rifit('aug-cc-pvtz-ri'); basis_6311ppg_3df_2pd_.add_rifit('aug-cc-pvtz-ri'); basis_6311ppg_3df_3pd_.add_rifit('aug-cc-pvtz-ri'). Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    ; Psi4 [1.0.0 6a9a71b] » ; Module code ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/p4util/basislistother.html:17901,update,updated,17901,psi4manual/1.0.0/_modules/p4util/basislistother.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/p4util/basislistother.html,2,['update'],['updated']
Deployability,"t(); return ssA.intersection(ssB). [docs]def genset_DDn5min(dbinstance):; """"""DD-5min; near-equilibrium systems also in dd. """"""; try:; ssA = set(dbinstance.sset['dd'].keys()); except KeyError:; ssA = set(); try:; ssB = set(dbinstance.sset['5min'].keys()); except KeyError:; ssB = set(); return ssA.intersection(ssB). [docs]def genset_MXDDPPn5min(dbinstance):; """"""MXDDPP-5min; near-equilibrium systems also in mxddpp. """"""; try:; ssA = set(dbinstance.sset['mxddpp'].keys()); except KeyError:; ssA = set(); try:; ssB = set(dbinstance.sset['5min'].keys()); except KeyError:; ssB = set(); return ssA.intersection(ssB). [docs]def genset_MXDDNPn5min(dbinstance):; """"""MXDDNP-5min; near-equilibrium systems also in mxddnp. """"""; try:; ssA = set(dbinstance.sset['mxddnp'].keys()); except KeyError:; ssA = set(); try:; ssB = set(dbinstance.sset['5min'].keys()); except KeyError:; ssB = set(); return ssA.intersection(ssB). [docs]def genset_allneutral(dbinstance):; """"""neutral; systems where all components are neutral. """"""; eligible = []; for rxn, orxn in dbinstance.hrxn.iteritems():; if all([True if rgt.charge == 0 else False for rgt in orxn.rxnm['default'].keys()]):; eligible.append(rxn); return eligible. [docs]def genset_anyanion(dbinstance):; """"""anion; systems where any component is an anion. """"""; eligible = []; for rxn, orxn in dbinstance.hrxn.iteritems():; for rgt in orxn.rxnm['default'].keys():; if rgt.charge < 0:; eligible.append(rxn); break; return eligible. [docs]def genset_anycation(dbinstance):; """"""cation; systems where any component is a cation. """"""; eligible = []; for rxn, orxn in dbinstance.hrxn.iteritems():; for rgt in orxn.rxnm['default'].keys():; if rgt.charge > 0:; eligible.append(rxn); break; return eligible. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    ; Psi4 [1.0.0 6a9a71b] » ; Module code ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/subsetgenerator.html:3321,update,updated,3321,psi4manual/1.0.0/_modules/qcdb/subsetgenerator.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/subsetgenerator.html,1,['update'],['updated']
Deployability,"t(E_{\text{corl},\; \textbf{delta3_wfn}}^{\textbf{delta3_basis}}\right) - \mathcal{F}_{\textbf{delta3_scheme}} \left(E_{\text{corl},\; \textbf{delta3_wfn_lesser}}^{\textbf{delta3_basis}}\right)\]. \[\delta_{\textbf{delta4_wfn_lesser}}^{\textbf{delta4_wfn}} \; = \mathcal{F}_{\textbf{delta4_scheme}} \left(E_{\text{corl},\; \textbf{delta4_wfn}}^{\textbf{delta4_basis}}\right) - \mathcal{F}_{\textbf{delta4_scheme}} \left(E_{\text{corl},\; \textbf{delta4_wfn_lesser}}^{\textbf{delta4_basis}}\right)\]. \[\delta_{\textbf{delta5_wfn_lesser}}^{\textbf{delta5_wfn}} \; = \mathcal{F}_{\textbf{delta5_scheme}} \left(E_{\text{corl},\; \textbf{delta5_wfn}}^{\textbf{delta5_basis}}\right) - \mathcal{F}_{\textbf{delta5_scheme}} \left(E_{\text{corl},\; \textbf{delta5_wfn_lesser}}^{\textbf{delta5_basis}}\right)\]; A translation of this ungainly equation to example [5] below is as; follows. In words, this is a double- and triple-zeta 2-point; Helgaker-extrapolated CCSD(T) coupled-cluster correlation correction; appended to a triple- and quadruple-zeta 2-point; Helgaker-extrapolated MP2 correlation energy appended to a SCF/aug-cc-pVQZ; reference energy. \[E_{\text{total}}^{\text{CBS}} = \mathcal{F}_{\text{highest_1}} \left(E_{\text{total},\; \text{SCF}}^{\text{aug-cc-pVQZ}}\right) \; + \mathcal{F}_{\text{corl_xtpl_helgaker_2}} \left(E_{\text{corl},\; \text{MP2}}^{\text{aug-cc-pV[TQ]Z}}\right) \; + \delta_{\text{MP2}}^{\text{CCSD(T)}}\]. \[\delta_{\text{MP2}}^{\text{CCSD(T)}} \; = \mathcal{F}_{\text{corl_xtpl_helgaker_2}} \left(E_{\text{corl},\; \text{CCSD(T)}}^{\text{aug-cc-pV[DT]Z}}\right) - \mathcal{F}_{\text{corl_xtpl_helgaker_2}} \left(E_{\text{corl},\; \text{MP2}}^{\text{aug-cc-pV[DT]Z}}\right)\]. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.6;  · . PSI4. Psithon Functions: Invoking a Calculation; Complete Basis Set; <no title>. © Copyright 2022, The Psi4 Project.; Last updated on Thursday, 19 May 2022 08:57PM.; Created using Sphinx 4.5.0.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/cbs_eqn.html:3445,update,updated,3445,psi4manual/1.6.x/cbs_eqn.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/cbs_eqn.html,1,['update'],['updated']
Deployability,"t(psi4_URL ""http://www.psicode.org/""); set(psi4_EMAIL ""psi4aiqc+cmake@gmail.com""); set(psi4_LICENSE ""GNU Lesser General Public License, version 3 (LGPL-3.0)""); set(psi4_DESCRIPTION ""Open-Source Quantum Chemistry""). list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake). message(STATUS ""Building using CMake ${CMAKE_VERSION} Generator ${CMAKE_GENERATOR}""). ################ Options: Overview and Not Otherwise Mentioned ###############. # <<< CMake build overview >>>; #; # >>> ls; # external/ COPYING psi4/ tests/ ...; # >>> cmake -S. -Bobjdir -DCMAKE_INSTALL_PREFIX=/path/to/install-psi4 ...; # ...; # -- Generating done; # -- Build files have been written to: /current/dir/objdir; # >>> cmake --build objdir --target install -j`getconf _NPROCESSORS_ONLN`. # <<< Required build dependencies that Psi4 can't build itself >>>; #; # - CMake (e.g., `conda install cmake`); # - C++ and C compilers (C++17 compliant); # - BLAS/LAPACK (also runtime; e.g., `conda install mkl-devel`); # - Python (also runtime; interpreter and headers; e.g., `conda install python`); # - NumPy (also runtime; avoidable at buildtime if gau2grid pre-built; e.g., `conda install numpy`); # - networkx >=2.4 (runtime only; e.g., `conda install networkx`); # - pint >=0.10 (runtime only; e.g., `conda install pint -c conda-forge`); # - pydantic >=1.0 (runtime only; e.g., `conda install pydantic -c conda-forge`); # - msgpack-python (runtime only; e.g., `conda install msgpack-python`); # - Eigen (for Libint2; e.g., `conda install eigen`); # - Boost (header-only libs for Libint2; e.g., `conda install boost-cpp`); # - SciPy (runtime only; avoidable through keyword setting; e.g., `conda install scipy`); # - py-cpuinfo (runtime only; e.g., `conda install py-cpuinfo`); # - psutil (runtime only; e.g., `conda install psutil`). # These three ""### Options ###"" sections contain useful CMake variables for build configuration. # <<< Compilers and flags >>>; #; # - CMAKE_C_COMPILER ""C compiler""; # - CMAKE_C_FLAGS ""Additi",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/build_planning.html:15527,install,install,15527,psi4manual/1.8.x/build_planning.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/build_planning.html,2,['install'],['install']
Deployability,"t(psi4_URL ""http://www.psicode.org/""); set(psi4_EMAIL ""psi4aiqc+cmake@gmail.com""); set(psi4_LICENSE ""GNU Lesser General Public License, version 3 (LGPL-3.0)""); set(psi4_DESCRIPTION ""Open-Source Quantum Chemistry""). list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake). message(STATUS ""Building using CMake ${CMAKE_VERSION} Generator ${CMAKE_GENERATOR}""). ################ Options: Overview and Not Otherwise Mentioned ###############. # <<< CMake build overview >>>; #; # >>> ls; # external/ COPYING psi4/ tests/ ...; # >>> cmake -S. -Bobjdir -DCMAKE_INSTALL_PREFIX=/path/to/install-psi4 ...; # ...; # -- Generating done; # -- Build files have been written to: /current/dir/objdir; # >>> cmake --build objdir --target install -j`getconf _NPROCESSORS_ONLN`. # <<< Required build dependencies that Psi4 can't build itself >>>; #; # - CMake (e.g., `conda install cmake`); # - C++ and C compilers (C++17 compliant); # - BLAS/LAPACK (also runtime; e.g., `conda install mkl-devel`); # - Python (also runtime; interpreter and headers; e.g., `conda install python`); # - NumPy (also runtime; avoidable at buildtime if gau2grid pre-built; e.g., `conda install numpy`); # - networkx >=2.4 (runtime only; e.g., `conda install networkx`); # - pint >=0.10 (runtime only; e.g., `conda install pint -c conda-forge`); # - pydantic >=1.0 (runtime only; e.g., `conda install pydantic -c conda-forge`); # - msgpack-python (runtime only; e.g., `conda install msgpack-python`); # - Eigen (for Libint2; e.g., `conda install eigen`); # - SciPy (runtime only; e.g., `conda install scipy`). # These three ""### Options ###"" sections contain useful CMake variables for build configuration. # <<< Compilers and flags >>>; #; # - CMAKE_C_COMPILER ""C compiler""; # - CMAKE_C_FLAGS ""Additional C flags""; # - CMAKE_CXX_COMPILER ""C++ compiler""; # - CMAKE_CXX_FLAGS ""Additional C++ flags""; # - CMAKE_Fortran_COMPILER ""Fortran compiler (required for some add-ons)""; # - CMAKE_Fortran_FLAGS ""Additional Fortran flags"". # <<< D",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/build_planning.html:14389,install,install,14389,psi4manual/1.6.x/build_planning.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/build_planning.html,1,['install'],['install']
Deployability,"t(psi4_URL ""http://www.psicode.org/""); set(psi4_EMAIL ""psi4aiqc+cmake@gmail.com""); set(psi4_LICENSE ""GNU Lesser General Public License, version 3 (LGPL-3.0)""); set(psi4_DESCRIPTION ""Open-Source Quantum Chemistry""). list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake). message(STATUS ""Building using CMake ${CMAKE_VERSION} Generator ${CMAKE_GENERATOR}""). ################ Options: Overview and Not Otherwise Mentioned ###############. # <<< CMake build overview >>>; #; # >>> ls; # external/ COPYING psi4/ tests/ ...; # >>> cmake -S. -Bobjdir -DCMAKE_INSTALL_PREFIX=/path/to/install-psi4 ...; # ...; # -- Generating done; # -- Build files have been written to: /current/dir/objdir; # >>> cmake --build objdir --target install -j`getconf _NPROCESSORS_ONLN`. # <<< Required build dependencies that Psi4 can't build itself >>>; #; # - CMake (e.g., `conda install cmake`); # - C++ and C compilers (C++17 compliant); # - BLAS/LAPACK (also runtime; e.g., `conda install mkl-devel`); # - Python (also runtime; interpreter and headers; e.g., `conda install python`); # - NumPy (also runtime; avoidable at buildtime if gau2grid pre-built; e.g., `conda install numpy`); # - networkx >=2.4 (runtime only; e.g., `conda install networkx`); # - pint >=0.10 (runtime only; e.g., `conda install pint -c conda-forge`); # - pydantic >=1.0 (runtime only; e.g., `conda install pydantic -c conda-forge`); # - msgpack-python (runtime only; e.g., `conda install msgpack-python`); # - Eigen (for Libint2; e.g., `conda install eigen`); # - SciPy (runtime only; e.g., `conda install scipy`); # - py-cpuinfo (runtime only; e.g., `conda install py-cpuinfo`); # - psutil (runtime only; e.g., `conda install psutil`). # These three ""### Options ###"" sections contain useful CMake variables for build configuration. # <<< Compilers and flags >>>; #; # - CMAKE_C_COMPILER ""C compiler""; # - CMAKE_C_FLAGS ""Additional C flags""; # - CMAKE_CXX_COMPILER ""C++ compiler""; # - CMAKE_CXX_FLAGS ""Additional C++ flags""; # - CMAKE_Fo",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/build_planning.html:14995,install,install,14995,psi4manual/1.7.x/build_planning.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/build_planning.html,1,['install'],['install']
Deployability,"t(psi4_URL ""http://www.psicode.org/""); set(psi4_EMAIL ""psi4aiqc+cmake@gmail.com""); set(psi4_LICENSE ""GNU Lesser General Public License, version 3 (LGPL-3.0)""); set(psi4_DESCRIPTION ""Open-Source Quantum Chemistry""). list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake). message(STATUS ""Building using CMake ${CMAKE_VERSION} Generator ${CMAKE_GENERATOR}""). ################ Options: Overview and Not Otherwise Mentioned ###############. # <<< CMake build overview >>>; #; # >>> ls; # external/ COPYING psi4/ tests/ ...; # >>> cmake -S. -Bobjdir -DCMAKE_INSTALL_PREFIX=/path/to/install-psi4 ...; # ...; # -- Generating done; # -- Build files have been written to: /current/dir/objdir; # >>> cmake --build objdir --target install -j`getconf _NPROCESSORS_ONLN`. # <<< Required build dependencies that Psi4 can't build itself >>>; #; # - CMake (e.g., `conda install cmake`); # - C++ and C compilers (C++20 compliant); # - BLAS/LAPACK (also runtime; e.g., `conda install mkl-devel`); # - Python (also runtime; interpreter and headers; e.g., `conda install python`); # - NumPy (also runtime; avoidable at buildtime if gau2grid pre-built; e.g., `conda install numpy`); # - networkx >=2.4 (runtime only; e.g., `conda install networkx`); # - pint >=0.10 (runtime only; e.g., `conda install pint -c conda-forge`); # - pydantic >=1.0 (runtime only; e.g., `conda install pydantic -c conda-forge`); # - msgpack-python (runtime only; e.g., `conda install msgpack-python`); # - Eigen (for Libint2; e.g., `conda install eigen`); # - Boost (header-only libs for Libint2; e.g., `conda install boost-cpp`); # - SciPy (runtime only; avoidable through keyword setting; e.g., `conda install scipy`); # - py-cpuinfo (runtime only; e.g., `conda install py-cpuinfo`); # - psutil (runtime only; e.g., `conda install psutil`). # These three ""### Options ###"" sections contain useful CMake variables for build configuration. # <<< Compilers and flags >>>; #; # - CMAKE_C_COMPILER ""C compiler""; # - CMAKE_C_FLAGS ""Additi",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/build_planning.html:16071,install,install,16071,psi4manual/master/build_planning.html,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html,1,['install'],['install']
Deployability,"t(q)')\n\n"""""". elif lowername == 'c4-ccsdt(q)':; options['CFOUR']['CFOUR_SCF_CONV']['value'] = 11; options['CFOUR']['CFOUR_CC_CONV']['value'] = 10; options['CFOUR']['CFOUR_FROZEN_CORE']['value'] = True; text += """"""c4-ccsdt(q)')\n\n"""""". elif lowername == 'df-m05-2x':; options['SCF']['SCF_TYPE']['value'] = 'df'; options['SCF']['DFT_SPHERICAL_POINTS']['value'] = 302; options['SCF']['DFT_RADIAL_POINTS']['value'] = 100; text += """"""m05-2x')\n\n"""""". else:; raise ValidationError(""""""Requested Psi4 computational methods %d is not available."""""" % (lowername)). # # Set clobbering; # if 'CFOUR_DERIV_LEVEL' in options['CFOUR']:; # options['CFOUR']['CFOUR_DERIV_LEVEL']['clobber'] = True; # options['CFOUR']['CFOUR_DERIV_LEVEL']['superclobber'] = True; # if 'CFOUR_CALC_LEVEL' in options['CFOUR']:; # options['CFOUR']['CFOUR_CALC_LEVEL']['clobber'] = True; # options['CFOUR']['CFOUR_CALC_LEVEL']['superclobber'] = True; # if 'CFOUR_CC_PROGRAM' in options['CFOUR']:; # options['CFOUR']['CFOUR_CC_PROGRAM']['clobber'] = False. return text, options. procedures = {; 'energy': {; 'df-b97-d3' : muster_modelchem,; 'df-wb97x-d' : muster_modelchem,; 'df-b3lyp-d3' : muster_modelchem,; 'mp2' : muster_modelchem,; 'df-mp2' : muster_modelchem,; 'sapt0' : muster_modelchem,; 'sapt2+' : muster_modelchem,; 'sapt2+(3)' : muster_modelchem,; 'sapt2+3(ccd)' : muster_modelchem,; 'mrccsdt(q)' : muster_modelchem,; 'c4-ccsdt(q)' : muster_modelchem,; 'ccsd-polarizability' : muster_modelchem,; 'dfdf-b2plyp-d3': muster_modelchem,; 'df-wpbe' : muster_modelchem,; 'df-m05-2x' : muster_modelchem,; }; }. qcmtdIN = procedures['energy']. [docs]def psi4_list():; """"""Return an array of Psi4 methods with energies. """"""; return sorted(procedures['energy'].keys()). Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    ; Psi4 [1.0.0 6a9a71b] » ; Module code ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/psi4.html:11407,update,updated,11407,psi4manual/1.0.0/_modules/qcdb/psi4.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/psi4.html,1,['update'],['updated']
Deployability,"t)); # oriElem = p4c4.transform_elementlist(p4Elem); # oriElemMap = p4c4.Catommap; # oriDip = p4c4.transform_vector(p4Dip); #; # #print p4c4; # #print ' <<< Input C4 Mol >>>'; # #c4Mol.print_out(); # #print ' <<< Input P4 Mol >>>'; # #p4Mol.print_out(); # #print ' <<< Input P4 Grad >>>'; # #if p4Grd is not None:; # # for item in p4Grd:; # # print(' %16.8f %16.8f %16.8f' % (item[0], item[1], item[2])); # #print ' <<< Rotated P4 Coord >>>'; # #if oriCoord is not None:; # # for item in oriCoord:; # # print(' %16.8f %16.8f %16.8f' % (item[0], item[1], item[2])); # #print ' <<< Rotated P4 Elem >>>'; # #if oriElem is not None:; # # for item in oriElem :; # # print(' %16.8f' % (item)); # #print ' <<< Rotated P4 Dip >>>'; # #if oriDip is not None:; # # print(' %16.8f %16.8f %16.8f' % (oriDip[0], oriDip[1], oriDip[2])); # #print ' <<< Rotated P4 Grad >>>'; # #if oriGrad is not None:; # # for item in oriGrad:; # # print(' %16.8f %16.8f %16.8f' % (item[0], item[1], item[2])); #; # return oriElemMap, oriElem, oriCoord, oriGrad, oriDip; # #return oriElem, oriCoord, oriGrad, oriElemMap, oriDip. [docs]def jajo2mol(jajodic):; """"""Returns a Molecule from entries in dictionary *jajodic* extracted; from JAINDX and JOBARC. """"""; map = jajodic['MAP2ZMAT']; elem = jajodic['ATOMCHRG']; coord = jajodic['COORD ']; Nat = len(elem). molxyz = '%d bohr\n\n' % (Nat); # TODO chgmult, though not really necessary for reorientation; for at in range(Nat):; posn = map[at] - 1; el = 'GH' if elem[posn] == 0 else z2el[elem[posn]]; posn *= 3; molxyz += '%s %21.15f %21.15f %21.15f\n' % (el, coord[posn], coord[posn + 1], coord[posn + 2]); mol = Molecule.init_with_xyz(molxyz, no_com=True, no_reorient=True, contentsNotFilename=True). return mol. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    ; Psi4 [1.0.0 6a9a71b] » ; Module code ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/cfour.html:40293,update,updated,40293,psi4manual/1.0.0/_modules/qcdb/cfour.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/cfour.html,1,['update'],['updated']
Deployability,"t). N = len(points); rho_a = psi4.Vector(N); rho_b = psi4.Vector(N); gamma_aa = psi4.Vector(N); gamma_ab = psi4.Vector(N); gamma_bb = psi4.Vector(N); tau_a = psi4.Vector(N); tau_b = psi4.Vector(N). index = 0; for point in points:; rho_a[index] = point['rho_a']; rho_b[index] = point['rho_b']; gamma_aa[index] = point['gamma_aa']; gamma_ab[index] = point['gamma_ab']; gamma_bb[index] = point['gamma_bb']; index = index + 1. super = build_superfunctional(functional, N, 1); super.test_functional(rho_a, rho_b, gamma_aa, gamma_ab, gamma_bb, tau_a, tau_b). v = super.value('V'); v_rho_a = super.value('V_RHO_A'); v_rho_b = super.value('V_RHO_B'); v_gamma_aa = super.value('V_GAMMA_AA'); v_gamma_ab = super.value('V_GAMMA_AB'); v_gamma_bb = super.value('V_GAMMA_BB'). if not v_gamma_aa:; v_gamma_aa = tau_a; v_gamma_ab = tau_a; v_gamma_bb = tau_a. tasks = ['v', 'v_rho_a', 'v_rho_b', 'v_gamma_aa', 'v_gamma_ab', 'v_gamma_bb']; mapping = {; 'v': v,; 'v_rho_a': v_rho_a,; 'v_rho_b': v_rho_b,; 'v_gamma_aa': v_gamma_aa,; 'v_gamma_ab': v_gamma_ab,; 'v_gamma_bb': v_gamma_bb,; }. super.print_detail(3); index = 0; for point in points:; psi4.print_out('rho_a= %11.3E, rho_b= %11.3E, gamma_aa= %11.3E, gamma_ab= %11.3E, gamma_bb= %11.3E\n' % (rho_a[index], rho_b[index], gamma_aa[index], gamma_ab[index], gamma_bb[index])). for task in tasks:; v_ref = point[task]; v_obs = mapping[task][index]; delta = v_obs - v_ref; if (v_ref == 0.0):; epsilon = 0.0; else:; epsilon = abs(delta / v_ref); if (epsilon < 1.0E-11):; passed = 'PASSED'; else:; passed = 'FAILED'; check = False. psi4.print_out('\t%-15s %24.16E %24.16E %24.16E %24.16E %6s\n' % (task, v_ref, v_obs, delta, epsilon, passed)). index = index + 1. psi4.print_out('\n'); return check. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    ; Psi4 [1.0.0 6a9a71b] » ; Module code ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/procedures/functional.html:99670,update,updated,99670,psi4manual/1.0.0/_modules/procedures/functional.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/procedures/functional.html,1,['update'],['updated']
Deployability,"t); dashd_part.add(gcp_part). return dashd_part; else:; return self.disp.compute_gradient(molecule). [docs] def compute_hessian(self,; molecule: core.Molecule,; wfn: core.Wavefunction = None) -> core.Matrix:; """"""Compute dispersion Hessian based on engine, dispersion level, and parameters in `self`.; Uses finite difference, as no dispersion engine has analytic second derivatives. Parameters; ----------; molecule; System for which to compute empirical dispersion correction.; wfn; Location to set QCVariables. Returns; -------; Matrix; (3*nat, 3*nat) dispersion Hessian [Eh/a0/a0]. """"""; optstash = p4util.OptionsState(['PRINT'], ['PARENT_SYMMETRY']); core.set_global_option('PRINT', 0). core.print_out(""\n\n Analytical Dispersion Hessians are not supported by any engine.\n""); core.print_out("" Computing the Hessian through finite difference of gradients.\n\n""). # Setup the molecule; molclone = molecule.clone(); molclone.reinterpret_coordentry(False); molclone.fix_orientation(True); molclone.fix_com(True). # Record undisplaced symmetry for projection of diplaced point groups; core.set_global_option(""PARENT_SYMMETRY"", molecule.schoenflies_symbol()). findif_meta_dict = driver_findif.hessian_from_gradients_geometries(molclone, -1); for displacement in findif_meta_dict[""displacements""].values():; geom_array = np.reshape(displacement[""geometry""], (-1, 3)); molclone.set_geometry(core.Matrix.from_array(geom_array)); molclone.update_geometry(); displacement[""gradient""] = self.compute_gradient(molclone).np.ravel().tolist(). H = driver_findif.assemble_hessian_from_gradients(findif_meta_dict, -1); if wfn is not None:; wfn.set_variable('DISPERSION CORRECTION HESSIAN', H); optstash.restore(); return core.Matrix.from_array(H). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .  · ; 1.6;  · . PSI4. Module code; psi4.driver.procrouting.empirical_dispersion. © Copyright 2022, The Psi4 Project.; Last updated on Thursday, 19 May 2022 08:57PM.; Created using Sphinx 4.5.0.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/procrouting/empirical_dispersion.html:12607,update,updated,12607,psi4manual/1.6.x/_modules/psi4/driver/procrouting/empirical_dispersion.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/procrouting/empirical_dispersion.html,1,['update'],['updated']
Deployability,"t* as associated helper basis; member *dualfit* to a BasisFamily object.; """"""; self.dualfit = sanitize_basisname(fit). [docs]def sanitize_basisname(name):; """"""Function to return *name* in coded form, stripped of; characters that confuse filenames, characters into lowercase,; ``+`` into ``p``, ``*`` into ``s``, and ``(``, ``)``, & ``,``; into ``_``.; """"""; temp = name.lower(); temp = temp.replace('+', 'p'); temp = temp.replace('*', 's'); temp = temp.replace('(', '_'); temp = temp.replace(')', '_'); temp = temp.replace(',', '_'); return temp. [docs]def load_basis_families():; """"""Function to load into the array ``basisfamily_list``; BasisFamily objects for all Psi4's standard installed bases.; """"""; from basislistdunning import load_basfam_dunning; from basislistother import load_basfam_other. if len(basisfamily_list) == 0:; load_basfam_dunning(); load_basfam_other(); return basisfamily_list. [docs]def print_basis_families():; """"""Function to print to the output file a formatted summary; of all the BasisFamily objects in ``basisfamily_list``, by; default all Psi4's standard installed bases.; """"""; basisfamily_list = load_basis_families(). text = ''; for fam in basisfamily_list:; text += '%s' % (fam); return text. [docs]def corresponding_orbital(name):; """"""Function to validate if the orbital basis *name* in coded or; ornate form is in Psi4's standard installed bases list. ``None``; is returned if the orbital basis is not found.; """"""; basisfamily_list = load_basis_families(). for fam in basisfamily_list:; if sanitize_basisname(fam.ornate) == sanitize_basisname(name):; return fam.ornate; return None. [docs]def corresponding_jkfit(name):; """"""Function to return an appropriate JK fitting basis for; the orbital basis *name* in coded or ornate form. ``None``; is returned if no fitting basis is defined or if the; orbital basis is not found.; """"""; basisfamily_list = load_basis_families(). for fam in basisfamily_list:; if sanitize_basisname(fam.ornate) == sanitize_basisname(name):; re",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/_modules/p4util/basislist.html:3747,install,installed,3747,psi4manual/4.0b5/_modules/p4util/basislist.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/_modules/p4util/basislist.html,1,['install'],['installed']
Deployability,"t, 3) geometry [a0].; (nat,) mass [u].; (nat,) element symbol.; (nat,) atomic number.; (nat,) hash of element symbol and mass.; Note that coordinate, orientation, and element information is; preserved but fragmentation, chgmult, and dummy/ghost is lost.; Usage; —–; geom, mass, elem, elez, uniq = molinstance.to_arrays(). to_dict(force_c1=False, force_units=False, np_out=True)[source]¶; Serializes instance into Molecule dictionary. to_schema(dtype, units='Bohr')[source]¶; Serializes instance into dictionary according to schema dtype. to_string(dtype, units=None, atom_format=None, ghost_format=None, width=17, prec=12)[source]¶; Format a string representation of QM molecule. translate(self: psi4.core.Molecule, arg0: psi4.core.Vector3) → None¶; Translates molecule by arg0. true_atomic_number(self: psi4.core.Molecule, atom: int) → int¶; Gets atomic number of atom from element (0-indexed without dummies). units(self: psi4.core.Molecule) → str¶; Returns units used to define the geometry, i.e. ‘Angstrom’ or ‘Bohr’. update_geometry(self: psi4.core.Molecule) → None¶; Reevaluates the geometry with current variable values, orientation directives, etc. by clearing the atoms list and rebuilding it. Idempotent. Use liberally.Must be called after initial Molecule definition by string. x(self: psi4.core.Molecule, arg0: int) → float¶; x position [Bohr] of atom arg0 (0-indexed without dummies). xyz(self: psi4.core.Molecule, i: int) → psi4.core.Vector3¶; Return the Vector3 for atom i (0-indexed without dummies). y(self: psi4.core.Molecule, arg0: int) → float¶; y position [Bohr] of atom arg0 (0-indexed without dummies). z(self: psi4.core.Molecule, arg0: int) → float¶; z position [Bohr] of atom arg0 (0-indexed without dummies). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. PSI4 API: Linking C++ and Python; Molecule. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/api/psi4.core.molecule.html:37841,update,updated,37841,psi4manual/1.4.0/api/psi4.core.molecule.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/api/psi4.core.molecule.html,1,['update'],['updated']
Deployability,"t, 3) geometry [a0].; (nat,) mass [u].; (nat,) element symbol.; (nat,) atomic number.; (nat,) hash of element symbol and mass.; Note that coordinate, orientation, and element information is; preserved but fragmentation, chgmult, and dummy/ghost is lost.; Usage; —–; geom, mass, elem, elez, uniq = molinstance.to_arrays(). to_dict(force_c1=False, force_units=False, np_out=True)[source]¶; Serializes instance into Molecule dictionary. to_schema(dtype, units='Bohr')[source]¶; Serializes instance into dictionary according to schema dtype. to_string(dtype, units=None, atom_format=None, ghost_format=None, width=17, prec=12)[source]¶; Format a string representation of QM molecule. translate(self: psi4.core.Molecule, arg0: psi4.core.Vector3) → None¶; Translates molecule by arg0. true_atomic_number(self: psi4.core.Molecule, atom: int) → int¶; Gets atomic number of atom from element (0-indexed without dummies). units(self: psi4.core.Molecule) → str¶; Returns units used to define the geometry, i.e. ‘Angstrom’ or ‘Bohr’. update_geometry(self: psi4.core.Molecule) → None¶; Reevaluates the geometry with current variable values, orientation directives, etc. by clearing the atoms list and rebuilding it. Idempotent. Use liberally.Must be called after initial Molecule definition by string. x(self: psi4.core.Molecule, arg0: int) → float¶; x position [Bohr] of atom arg0 (0-indexed without dummies). xyz(self: psi4.core.Molecule, i: int) → psi4.core.Vector3¶; Return the Vector3 for atom i (0-indexed without dummies). y(self: psi4.core.Molecule, arg0: int) → float¶; y position [Bohr] of atom arg0 (0-indexed without dummies). z(self: psi4.core.Molecule, arg0: int) → float¶; z position [Bohr] of atom arg0 (0-indexed without dummies). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. PSI4 API: Linking C++ and Python; Molecule. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/api/psi4.core.molecule.html:39478,update,updated,39478,psi4manual/1.5.0/api/psi4.core.molecule.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/api/psi4.core.molecule.html,1,['update'],['updated']
Deployability,"t, all of the DCFT methods support unrestricted reference; orbitals (REFERENCE UHF), which can be used to perform energy and; gradient computations for both closed- and open-shell molecules. In addition,; the ODC-06 and ODC-12 methods support restricted reference orbitals; (REFERENCE RHF) for the energy and gradient computations of; closed-shell molecules. Note that in this case restricted reference orbitals; are only available for ALGORITHM SIMULTANEOUS. Iterative Algorithms¶; As explained in the Theory section, in order to obtain the DCFT energy one; needs to solve a system of coupled equations for orbitals and density; cumulant. At the present moment three iterative algorithms for the solution of the; equations are available. The choice of the algorithm is controlled using the; ALGORITHM option. SIMULTANEOUS [Default]; In the simultaneous algorithm the DCFT equations are solved in macroiterations.; Each macroiteration consists of a single iteration of the cumulant update; followed by a single iteration of the orbital update and orbital transformation; of the integrals. The macroiterations are repeated until the simultaneous; convergence of the cumulant and orbitals is achieved.; Convergence of the simultaneous algorithm is accelerated using the; DIIS extrapolation technique.; TWOSTEP; In the two-step algorithm each macroiteration consists of two sets of; microiterations. In the first set, the density cumulant equations are solved; iteratively, while the orbitals are kept fixed. After the density cumulant is; converged, the second set of microiterations is performed for the; self-consistent update of the orbitals with the fixed density cumulant. Each; macroiteration is completed by performing the orbital transformation of the; integrals. As in the simultaneous algorithm, the DIIS; extrapolation is used to accelerate convergence. Two-step algorithm is; only available for the DC-06 and DC-12 methods.; QC; In the quadratically-convergent algorithm, the; orbital and cu",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/dcft-1.html:8709,update,update,8709,psi4manual/1.2.1/dcft-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/dcft-1.html,12,['update'],['update']
Deployability,"t, and; pcmsolver/dipole. Keywords for PCMSolver¶. PCM¶. PCM boolean for pcmsolver module. Type: boolean; Default: false. PCM_SCF_TYPE¶. Use total or separate potentials and charges in the PCM-SCF step. Type: string; Possible Values: TOTAL, SEPARATE; Default: TOTAL. PCM_CC_TYPE¶. PCM-CCSD algorithm type. Type: string; Possible Values: PTE; Default: PTE. How to configure PCMSolver for building Psi4¶; Role and Dependencies. Role — In PSI4, PCMSolver is a library that provides additional; quantum chemical capabilities (solvation modeling).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) PCMSolver; Upstream Dependencies — PCMSolver \(\Leftarrow\) Fortran, zlib. CMake Variables. ENABLE_PCMSolver — CMake variable toggling whether Psi4 builds with PCMSolver; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For PCMSolver, set to an installation directory containing include/PCMSolver/pcmsolver.h; PCMSolver_DIR — CMake variable to specify where pre-built PCMSolver can be found. Set to installation directory containing share/cmake/PCMSolver/PCMSolverConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_PCMSolver — CMake variable to force internal build of PCMSolver instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_PCMSolver — CMake variable to force detecting pre-built PCMSolver and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_PCMSolver=ON. Build without PCMSolver. >>> cmake. table of contents. Interface to PCMSolver by R. Di Remigio; Installation; Using the polarizable continuum model; Keywords for PCMSolver; PCM; PCM_SCF_TYPE; PCM_CC_TYPE. How to configure PCMSolver for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to PCMSolver by R. Di Remigio. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/pcmsolver.html:5199,install,installation,5199,psi4manual/1.8.x/pcmsolver.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/pcmsolver.html,2,"['install', 'update']","['installation', 'updated']"
Deployability,"t, and; pcmsolver/dipole. Keywords for PCMSolver¶. PCM¶. PCM boolean for pcmsolver module. Type: boolean; Default: false. PCM_SCF_TYPE¶. Use total or separate potentials and charges in the PCM-SCF step. Type: string; Possible Values: TOTAL, SEPARATE; Default: TOTAL. PCM_CC_TYPE¶. PCM-CCSD algorithm type. Type: string; Possible Values: PTE; Default: PTE. How to configure PCMSolver for building Psi4¶; Role and Dependencies. Role — In PSI4, PCMSolver is a library that provides additional; quantum chemical capabilities (solvation modeling).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) PCMSolver; Upstream Dependencies — PCMSolver \(\Leftarrow\) Fortran, zlib. CMake Variables. ENABLE_PCMSolver — CMake variable toggling whether Psi4 builds with PCMSolver; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For PCMSolver, set to an installation directory containing include/PCMSolver/pcmsolver.h; PCMSolver_DIR — CMake variable to specify where pre-built PCMSolver can be found. Set to installation directory containing share/cmake/PCMSolver/PCMSolverConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_PCMSolver — CMake variable to force internal build of PCMSolver instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_PCMSolver — CMake variable to force detecting pre-built PCMSolver and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_PCMSolver=ON. Build without PCMSolver. >>> cmake. table of contents. Interface to PCMSolver by R. Di Remigio; Installation; Using the polarizable continuum model; Keywords for PCMSolver; PCM; PCM_SCF_TYPE; PCM_CC_TYPE. How to configure PCMSolver for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.9.1;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to PCMSolver by R. Di Remigio. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 08 February 2024 09:32PM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/pcmsolver.html:5199,install,installation,5199,psi4manual/1.9.x/pcmsolver.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/pcmsolver.html,2,"['install', 'update']","['installation', 'updated']"
Deployability,"t, as that has more details. For (post)releases (not prereleases), copy cookiecutter.json to cookiecutter.json-vXXX; Edit cookiecutter/{{.../construct.yaml for templating. This is rarely needed; If it’s been a while or you need the space, clear out ~/.conda/constructor, where the downloaded packages are cached; Note that installers get written to build/ and this gets regenerated each time. Clear out between runs.; python run.py; [Outdated] Watch out for py_ in buildstring as this means a noarch package has been pulled. It must be eliminated. Constructors can’t handle “noarch” packages and will fail at runtime. If see a “noarch” package, must find the recipe and rebuild for all OS & Python combinations. Then run constructor again.; [Replacement] After adding a post_install to reposition the noarch packages, they are safe to include.; If fetching times out, may have to run run.py several times. Clear out build/ in between. It’s the fetching that takes a long time, not constucting; In the end, should have several installers; >>> ls -l build/psi4conda-1.3-py3.*/*64.sh; -rwxr-xr-x. 516M Feb 28 20:30 build/psi4conda-1.3-py3.6-linux-64/psi4conda-1.3-py36-Linux-x86_64.sh; -rwxr-xr-x. 299M Feb 28 20:31 build/psi4conda-1.3-py3.6-osx-64/psi4conda-1.3-py36-MacOSX-x86_64.sh; -rwxr-xr-x. 518M Feb 28 20:30 build/psi4conda-1.3-py3.7-linux-64/psi4conda-1.3-py37-Linux-x86_64.sh; -rwxr-xr-x. 299M Feb 28 20:31 build/psi4conda-1.3-py3.7-osx-64/psi4conda-1.3-py37-MacOSX-x86_64.sh. Upload installer files to vergil, scp -r build/Psi4*/Psi4*sh root@vergil.chemistry.gatech.edu:/var/www/html/psicode-download/; Log in to vergil root and make WindowsWSL symlinks. Build Psi4conda set¶; Installers are build using the project constructor and build binary bash or exe scripts, one per OS per Python version. In analogy to Miniconda, they’re called Psi4Conda. They are built through GHA on the psi4meta repo and get served from vergil (cdsgroup webserver). Edit recipe https://github.com/psi4/psi4meta/bl",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/manage_release-1.html:13140,install,installers,13140,psi4manual/1.5.0/manage_release-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/manage_release-1.html,5,['install'],['installers']
Deployability,"t, as that has more details. For (post)releases (not prereleases), copy cookiecutter.json to cookiecutter.json-vXXX; Edit cookiecutter/{{.../construct.yaml for templating. This is rarely needed; If it’s been a while or you need the space, clear out ~/.conda/constructor, where the downloaded packages are cached; Note that installers get written to build/ and this gets regenerated each time. Clear out between runs.; python run.py; [Outdated] Watch out for py_ in buildstring as this means a noarch package has been pulled. It must be eliminated. Constructors can’t handle “noarch” packages and will fail at runtime. If see a “noarch” package, must find the recipe and rebuild for all OS & Python combinations. Then run constructor again.; [Replacement] After adding a post_install to reposition the noarch packages, they are safe to include.; If fetching times out, may have to run run.py several times. Clear out build/ in between. It’s the fetching that takes a long time, not constucting; In the end, should have several installers; >>> ls -l build/psi4conda-1.3-py3.*/*64.sh; -rwxr-xr-x. 516M Feb 28 20:30 build/psi4conda-1.3-py3.6-linux-64/psi4conda-1.3-py36-Linux-x86_64.sh; -rwxr-xr-x. 299M Feb 28 20:31 build/psi4conda-1.3-py3.6-osx-64/psi4conda-1.3-py36-MacOSX-x86_64.sh; -rwxr-xr-x. 518M Feb 28 20:30 build/psi4conda-1.3-py3.7-linux-64/psi4conda-1.3-py37-Linux-x86_64.sh; -rwxr-xr-x. 299M Feb 28 20:31 build/psi4conda-1.3-py3.7-osx-64/psi4conda-1.3-py37-MacOSX-x86_64.sh. Upload installer files to vergil, scp -r build/Psi4*/Psi4*sh root@vergil.chemistry.gatech.edu:/var/www/html/psicode-download/; Log in to vergil root and make WindowsWSL symlinks. Generate download page for psicode.org¶. Be in repo psicode-hugo-website; Copy and edit new file akin to https://github.com/psi4/psicode-hugo-website/blob/master/content/installs/v13rc2.md. Note the edition string v13rc2 in frontmatter for this and future filenames; Copy and edit new file akin to https://github.com/psi4/psicode-hugo-we",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/manage_release-1.html:12775,install,installers,12775,psi4manual/1.4.0/manage_release-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/manage_release-1.html,2,['install'],['installers']
Deployability,"t, log back in so conda and psi4 in path; >>> psi4 --test. # Windows; # py27|py35|py36 for alternate python versions; >>> curl -O ""http://vergil.chemistry.gatech.edu/download/Psi4conda-latest-py35-Windows-x86_64.sh"" --keepalive-time 2; >>> bash; >>> bash Psi4conda-latest-py35-Windows-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> echo ""export PATH=$HOME/psi4conda/bin:\$PATH"" >> ~/.bashrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. That last command tested that psi4 is in your path, and it’s finding; all the libraries it needs. It works because PSI_SCRATCH; defaults to /tmp. Now you need only specify a permanent scratch; directory (see Scratch Files and Elementary Restart) by replacing the placeholder in the; following:; >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!; Configuration for this set-up is summarized at How to run Psi4 as executable or Python module from conda installation. Note; PSI4 installs a Python distribution alongside, so you should choose an installer based on the Python version you want, irrespective of any Python version you have. Note; Above commands use bash for installation and set up your environment for bash at runtime. To use csh at runtime, follow the on-screen directions at the end of the installation or consult step 7 below. How to install a Psi4 binary into an Ana/Miniconda distribution¶; Conda command to install the latest nightly build of PSI4 + compiled; add-ons + runtime add-ons into an existing Anaconda or Miniconda; distribution.; # Linux or Mac or Windows; # substitute x.x by 2.7|3.5|3.6 for alternate python versions; # remove `-c psi4/label/dev` to get stable releases instead of nightly builds; >>> conda create -n p4env python=x.x psi4 psi4-rt -c psi4/label/dev -c psi4. Activate environment and make the adjustments to PATH and; PSI_SCRATCH that it suggests at the",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/conda-1.html:4379,install,installation,4379,psi4manual/1.2.1/conda-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/conda-1.html,2,['install'],['installation']
Deployability,"t, log back in so conda and psi4 in path; >>> psi4 --test. # Windows; # py27|py35|py36 for alternate python versions; >>> curl -O ""http://vergil.chemistry.gatech.edu/download/Psi4conda-latest-py35-Windows-x86_64.sh"" --keepalive-time 2; >>> bash; >>> bash Psi4conda-latest-py35-Windows-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> echo ""export PATH=$HOME/psi4conda/bin:\$PATH"" >> ~/.bashrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. That last command tested that psi4 is in your path, and it’s finding; all the libraries it needs. It works because PSI_SCRATCH; defaults to /tmp. Now you need only specify a permanent scratch; directory (see Scratch Files and Elementary Restart) by replacing the placeholder in the; following:; >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!; Configuration for this set-up is summarized at How to run Psi4 as executable or Python module from conda installation. Note; PSI4 installs a Python distribution alongside, so you should choose an installer based on the Python version you want, irrespective of any Python version you have. Note; Above commands use bash for installation and set up your environment for bash at runtime. To use csh at runtime, follow the on-screen directions at the end of the installation or consult step 7 below. How to install a Psi4 binary into an Ana/Miniconda distribution¶; Conda command to install the latest nightly build of PSI4 + compiled; add-ons + runtime add-ons into an existing Anaconda or Miniconda; distribution.; # Linux or Mac or Windows; # substitute x.x by 2.7|3.5|3.6 for alternate python versions; >>> conda create -n p4env python=x.x psi4 psi4-rt -c psi4/label/dev -c psi4. Activate environment and make the adjustments to PATH and; PSI_SCRATCH that it suggests at the end. Test with psi4; --test. Configuration for this set-up is summarized at; H",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/conda-1.html:4170,install,installation,4170,psi4manual/1.1.0/conda-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/conda-1.html,2,['install'],['installation']
Deployability,"t, log back in so conda and psi4 in path; >>> psi4 --test. # Windows; # py27|py35|py36 for alternate python versions; >>> curl -O ""http://vergil.chemistry.gatech.edu/download/Psi4conda-latest-py35-Windows-x86_64.sh"" --keepalive-time 2; >>> bash; >>> bash Psi4conda-latest-py35-Windows-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> echo ""export PATH=$HOME/psi4conda/bin:\$PATH"" >> ~/.bashrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. That last command tested that psi4 is in your path, and it’s finding; all the libraries it needs. It works because PSI_SCRATCH; defaults to /tmp. Now you need only specify a permanent scratch; directory (see Scratch Files and Elementary Restart) by replacing the placeholder in the; following:; >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!; Configuration for this set-up is summarized at How to run Psi4 as executable or Python module from conda installation. Note; PSI4 installs a Python distribution alongside, so you should choose an installer based on the Python version you want, irrespective of any Python version you have. Note; Above commands use bash for installation and set up your environment for bash at runtime. To use csh at runtime, follow the on-screen directions at the end of the installation or consult step 7 below. How to install a Psi4 binary into an Ana/Miniconda distribution¶; Conda command to install the latest nightly build of PSI4 + compiled; add-ons + runtime add-ons into an existing Anaconda or Miniconda; distribution.; # Linux or Mac or Windows; # substitute x.x by 3.5|3.6|3.7 for alternate python versions; # remove `-c psi4/label/dev` to get stable releases instead of nightly builds; >>> conda create -n p4env python=x.x psi4 psi4-rt -c psi4/label/dev -c psi4. Activate environment and make the adjustments to PATH and; PSI_SCRATCH that it suggests at the",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/conda-1.html:4379,install,installation,4379,psi4manual/1.3.2/conda-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/conda-1.html,2,['install'],['installation']
Deployability,"t. CISD DIPOLE¶; Dipole array [e a0] for the configuration interaction singles and doubles level of theory, (3,). CISD DIPOLE X¶. CISD DIPOLE Y¶. CISD DIPOLE Z¶; The three components of the dipole [Debye] for the; configuration interaction singles and doubles level of theory and root.; Deprecated in favor of CISD DIPOLE. CISD QUADRUPOLE¶; Redundant quadrupole array [e a0^2] for the configuration interaction singles and doubles level of theory, (3, 3). CISD QUADRUPOLE XX¶. CISD QUADRUPOLE XY¶. CISD QUADRUPOLE XZ¶. CISD QUADRUPOLE YY¶. CISD QUADRUPOLE YZ¶. CISD QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the; configuration interaction singles and doubles level of theory and root.; Deprecated in favor of CISD QUADRUPOLE. CISD TOTAL ENERGY¶. CISD CORRELATION ENERGY¶. CISDT TOTAL ENERGY¶. CISDT CORRELATION ENERGY¶. CISDTQ CORRELATION ENERGY¶. CISDTQ TOTAL ENERGY¶. CIn CORRELATION ENERGY¶. CIn TOTAL ENERGY¶; The total electronic energy [Eh] and correlation energy component [Eh]; for the labeled configuration interaction level of theory and root.; n is CI order for n > 4. CP-CORRECTED 2-BODY INTERACTION ENERGY¶; The interaction energy [Eh] considering only two-body interactions,; computed with counterpoise correction.; Related variable UNCP-CORRECTED 2-BODY INTERACTION ENERGY. \[E_{\text{IE}} = E_{dimer} - \sum_{monomer}^{n}{E_{monomer}^{\text{CP}}}\]. CURRENT CORRELATION ENERGY¶; The correlation energy [Eh] corresponding to the CURRENT ENERGY variable. CURRENT ENERGY¶; The total electronic energy [Eh] of the most recent stage of a; calculation (frequently overwritten). This is the quantity tracked by; the geometry optimizer. CURRENT REFERENCE ENERGY¶; The total electronic energy [Eh] of the reference stage corresponding to; the CURRENT ENERGY variable. CURRENT DIPOLE¶; The total dipole [e a0] of the most recent stage of a calculation (frequently overwritten), (3,). CURRENT GRADIENT¶; The total electronic gradient [E_h/a0] of the most recent stage o",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/glossary_psivariables-1.html:14392,configurat,configuration,14392,psi4manual/1.4.0/glossary_psivariables-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/glossary_psivariables-1.html,4,['configurat'],['configuration']
Deployability,"t. LOCAL_WEAKP¶. Desired treatment of “weak pairs” in the local-CCSD method. The value of NONE (unique avaliable option) treats weak pairs in the same manner as strong pairs. Type: string; Default: NONE. MAXITER¶. Maximum number of iterations. Type: integer; Default: 50. NUM_AMPS_PRINT¶. Number of important CC amplitudes per excitation level to print. CC analog to NUM_DETS_PRINT. Type: integer; Default: 10. PROP_ALL¶. Compute unrelaxed properties for all excited states. Type: boolean; Default: true. PROP_ROOT¶. Root number (within its irrep) for computing properties. Type: integer; Default: 1. PROP_SYM¶. The symmetry of states. Type: integer; Default: 1. RESTART¶. Do restart the coupled-cluster iterations from old and amplitudes?. Type: boolean; Default: false. ROOTS_PER_IRREP¶. The number of electronic states to computed, per irreducible representation. Type: array; Default: No Default. R_CONVERGENCE¶. Convergence criterion for wavefunction (change) in CC lambda-amplitude equations. Type: conv double; Default: 1e-7. SEKINO¶. Do Sekino-Bartlett size-extensive model-III?. Type: boolean; Default: false. ZETA¶. Do use zeta?. Type: boolean; Default: false. Expert¶. JOBTYPE¶. Type of job being performed. Type: string; Default: No Default. WFN¶. Wavefunction type. Type: string; Default: NONE. Table Of Contents. CCLAMBDA; General; ABCD; AO_BASIS; CACHELEVEL; CAS_FILES_WRITE; DIIS; FOLLOW_ROOT; LOCAL; LOCAL_CPHF_CUTOFF; LOCAL_CUTOFF; LOCAL_FILTER_SINGLES; LOCAL_METHOD; LOCAL_PAIRDEF; LOCAL_WEAKP; MAXITER; NUM_AMPS_PRINT; PROP_ALL; PROP_ROOT; PROP_SYM; RESTART; ROOTS_PER_IRREP; R_CONVERGENCE; SEKINO; ZETA. Expert; JOBTYPE; WFN. Previous topic; WFN; Next topic; ABCD; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/autodir_options_c/module__cclambda-1.html:4088,update,updated,4088,psi4manual/4.0b5/autodir_options_c/module__cclambda-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/module__cclambda-1.html,2,['update'],['updated']
Deployability,"t. Source. Note that PSI4 uses v1. If using PSI4 built from source and you want Libint built from; from source also,; let the build system fetch and build it and activate dependent code. How to configure Libint for building Psi4¶; Role and Dependencies. Role — In PSI4, Libint is a library that provides essential; two-body molecular integrals over Gaussian functions.; Downstream Dependencies — PSI4 \(\Leftarrow\) Libint; Upstream Dependencies — Libint \(\Leftarrow\) None. CMake Variables. CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For Libint, set to an installation directory containing include/libint/libint.h; Libint_DIR — CMake variable to specify where pre-built Libint can be found. Set to installation directory containing share/cmake/Libint/LibintConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_Libint — CMake variable to force internal build of Libint instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_Libint — CMake variable to force detecting pre-built Libint and not falling back on internal build; MAX_AM_ERI — CMake variable to specify minimum highest angular momentum built or detected. Examples. Build bundled. >>> cmake. Link against pre-built. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/libint/root. >>> cmake -DLibint_DIR=/path/to/libint/configdir. Build bundled despite pre-built being detectable. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/unwanted/libint/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_Libint=ON. Build bundled shared library with AM=6. >>> cmake -DMAX_AM_ERI=6 -DBUILD_SHARED_LIBS=ON. table of contents. Interface to Libint by E. Valeev; Installation; How to configure Libint for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to Libint by E. Valeev. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/libint-1.html:3309,update,updated,3309,psi4manual/1.4.0/libint-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/libint-1.html,2,['update'],['updated']
Deployability,"t. Source. Note that PSI4 uses v1. If using PSI4 built from source and you want Libint built from; from source also,; let the build system fetch and build it and activate dependent code. How to configure Libint for building Psi4¶; Role and Dependencies. Role — In PSI4, Libint is a library that provides essential; two-body molecular integrals over Gaussian functions.; Downstream Dependencies — PSI4 \(\Leftarrow\) Libint; Upstream Dependencies — Libint \(\Leftarrow\) None. CMake Variables. CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For Libint, set to an installation directory containing include/libint/libint.h; Libint_DIR — CMake variable to specify where pre-built Libint can be found. Set to installation directory containing share/cmake/Libint/LibintConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_Libint — CMake variable to force internal build of Libint instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_Libint — CMake variable to force detecting pre-built Libint and not falling back on internal build; MAX_AM_ERI — CMake variable to specify minimum highest angular momentum built or detected. Examples. Build bundled. >>> cmake. Link against pre-built. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/libint/root. >>> cmake -DLibint_DIR=/path/to/libint/configdir. Build bundled despite pre-built being detectable. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/unwanted/libint/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_Libint=ON. Build bundled shared library with AM=6. >>> cmake -DMAX_AM_ERI=6 -DBUILD_SHARED_LIBS=ON. table of contents. Interface to Libint by E. Valeev; Installation; How to configure Libint for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to Libint by E. Valeev. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/libint-1.html:3309,update,updated,3309,psi4manual/1.5.0/libint-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/libint-1.html,2,['update'],['updated']
Deployability,"t. cc35; CC3(ROHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input. Various gradients for a strained helium dimer and water molecule. nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. dfrasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. cc52; CCSD Response for H2O2. matrix1; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating matrix multiplication, eigendecomposition, Cholesky decomposition and LU decomposition. These operations are performed on vectors and matrices provided from the Psi library. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. dft-custom-mgga; updated dldf reference to new BraggSlater radii Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. scf-ecp; Water-Argon complex with ECP present; check of energies and forces. linK-2; RKS Linear Exchange Algorithm test for benzene. sapt-dft1; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. ao-dfcasscf-sp; CASSCF/6-31G** energy point. cbs-parser; mtd/basis syntax examples. dlpnomp2-3; comparison of DF-MP2 and DLPNO-MP2 with a cartesian basis set. fisapt-siao1; This test case shows an example of running the I-SAPT0/jun-cc-pVDZ computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups) The SIAO1 link partitioning algorithm is used. An F-SAPT partitioning follows I-SAPT. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. dft-jk; DF",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:30544,update,updated,30544,psi4manual/master/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html,2,['update'],['updated']
Deployability,"t.add(gcp_part). return dashd_part; else:; return self.disp.compute_gradient(molecule). [docs]; def compute_hessian(self,; molecule: core.Molecule,; wfn: core.Wavefunction = None) -> core.Matrix:; """"""Compute dispersion Hessian based on engine, dispersion level, and parameters in `self`.; Uses finite difference, as no dispersion engine has analytic second derivatives. Parameters; ----------; molecule; System for which to compute empirical dispersion correction.; wfn; Location to set QCVariables. Returns; -------; Matrix; (3*nat, 3*nat) dispersion Hessian [Eh/a0/a0]. """"""; optstash = p4util.OptionsState(['PRINT'], ['PARENT_SYMMETRY']); core.set_global_option('PRINT', 0). core.print_out(""\n\n Analytical Dispersion Hessians are not supported by any engine.\n""); core.print_out("" Computing the Hessian through finite difference of gradients.\n\n""). # Setup the molecule; molclone = molecule.clone(); molclone.reinterpret_coordentry(False); molclone.fix_orientation(True); molclone.fix_com(True). # Record undisplaced symmetry for projection of diplaced point groups; core.set_global_option(""PARENT_SYMMETRY"", molecule.schoenflies_symbol()). findif_meta_dict = driver_findif.hessian_from_gradients_geometries(molclone, -1); for displacement in findif_meta_dict[""displacements""].values():; geom_array = np.reshape(displacement[""geometry""], (-1, 3)); molclone.set_geometry(core.Matrix.from_array(geom_array)); molclone.update_geometry(); displacement[""gradient""] = self.compute_gradient(molclone).np.ravel().tolist(). H = driver_findif.assemble_hessian_from_gradients(findif_meta_dict, -1); if wfn is not None:; wfn.set_variable('DISPERSION CORRECTION HESSIAN', H); optstash.restore(); return core.Matrix.from_array(H). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .  · ; 1.8.2;  · . PSI4. Module code; psi4.driver.procrouting.empirical_dispersion. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:04AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/procrouting/empirical_dispersion.html:14865,update,updated,14865,psi4manual/1.8.x/_modules/psi4/driver/procrouting/empirical_dispersion.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/procrouting/empirical_dispersion.html,1,['update'],['updated']
Deployability,"t: 0.686. SAPT_DFT_FUNCTIONAL¶. Underlying funcitonal to use for SAPT(DFT). Type: string; Default: PBE0. SAPT_DFT_GRAC_DETERMINATION¶. How is the GRAC correction determined?. Type: string; Possible Values: INPUT; Default: INPUT. SAPT_DFT_MP2_DISP_ALG¶. Which MP2 Exch-Disp module to use?. Type: string; Possible Values: FISAPT, SAPT; Default: SAPT. SAPT_FDDS_DISP_LEG_LAMBDA¶. Lambda shift in the space morphing for the FDDS Dispersion time integration. Type: double; Default: 0.3. SAPT_FDDS_DISP_NUM_POINTS¶. Number of points in the Legendre FDDS Dispersion time integration. Type: integer; Default: 10. SAPT_FDDS_V2_RHO_CUTOFF¶. Minimum rho cutoff for the in the LDA response for FDDS. Type: double; Default: 1.e-6. SAPT_QUIET¶. Interior option to clean up printing. Type: boolean; Default: false. table of contents. SAPT; SAPT(HF); AIO_CPHF; AIO_DF_INTS; BASIS; CCD_E_CONVERGENCE; CCD_MAXITER; CCD_T_CONVERGENCE; DENOMINATOR_ALGORITHM; DENOMINATOR_DELTA; DF_BASIS_ELST; DF_BASIS_SAPT; D_CONVERGENCE; EXCH_SCALE_ALPHA; E_CONVERGENCE; FREEZE_CORE; INTS_TOLERANCE; MAXITER; MAX_CCD_DIISVECS; MIN_CCD_DIISVECS; NAT_ORBS_T2; NAT_ORBS_T3; NAT_ORBS_V4; OCC_TOLERANCE; PRINT; SAPT_LEVEL; SAPT_MEM_CHECK; SAPT_MEM_SAFETY; SCREENING. SAPT(DFT); SAPT_DFT_DO_DHF; SAPT_DFT_EXCH_DISP_SCALE_SCHEME; SAPT_DFT_GRAC_SHIFT_A; SAPT_DFT_GRAC_SHIFT_B. Expert SAPT(HF); COUPLED_INDUCTION; DO_CCD_DISP; DO_DISP_EXCH_SINF; DO_IND_EXCH_SINF; DO_MBPT_DISP; DO_THIRD_ORDER; SAPT0_E10; SAPT0_E20DISP; SAPT0_E20IND; SAPT_MEM_FACTOR. Expert SAPT(DFT); SAPT_DFT_DO_HYBRID; SAPT_DFT_EXCH_DISP_FIXED_SCALE; SAPT_DFT_FUNCTIONAL; SAPT_DFT_GRAC_DETERMINATION; SAPT_DFT_MP2_DISP_ALG; SAPT_FDDS_DISP_LEG_LAMBDA; SAPT_FDDS_DISP_NUM_POINTS; SAPT_FDDS_V2_RHO_CUTOFF; SAPT_QUIET. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Appendices; Keywords by Module; SAPT. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodir_options_c/module__sapt-1.html:9594,update,updated,9594,psi4manual/1.4.0/autodir_options_c/module__sapt-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodir_options_c/module__sapt-1.html,2,['update'],['updated']
Deployability,"t: WERNER. LOCAL_PAIRDEF¶. Definition of local pair domains. Type: string; Default: No Default. LOCAL_WEAKP¶. Desired treatment of “weak pairs” in the local-CCSD method. The value of NONE (unique available option) treats weak pairs in the same manner as strong pairs. Type: string; Default: NONE. MAXITER¶. Maximum number of iterations. Type: integer; Default: 50. NUM_AMPS_PRINT¶. Number of important CC amplitudes per excitation level to print. CC analog to NUM_DETS_PRINT. Type: integer; Default: 10. PROP_ALL¶. Compute unrelaxed properties for all excited states. Type: boolean; Default: true. PROP_ROOT¶. Root number (within its irrep) for computing properties. Type: integer; Default: 1. PROP_SYM¶. The symmetry of states. Type: integer; Default: 1. RESTART¶. Do restart the coupled-cluster iterations from old \(\lambda_1\) and \(\lambda_2\) amplitudes?. Type: boolean; Default: false. ROOTS_PER_IRREP¶. The number of electronic states to computed, per irreducible representation. Type: array; Default: No Default. R_CONVERGENCE¶. Convergence criterion for wavefunction (change) in CC lambda-amplitude equations. Type: conv double; Default: 1e-7. SEKINO¶. Do Sekino-Bartlett size-extensive model-III?. Type: boolean; Default: false. ZETA¶. Do use zeta?. Type: boolean; Default: false. Expert¶. JOBTYPE¶. Type of job being performed. Type: string; Default: No Default. WFN¶. Wavefunction type. Type: string; Default: SCF. table of contents. CCLAMBDA; General; ABCD; AO_BASIS; CACHELEVEL; DIIS; LOCAL; LOCAL_CPHF_CUTOFF; LOCAL_CUTOFF; LOCAL_FILTER_SINGLES; LOCAL_METHOD; LOCAL_PAIRDEF; LOCAL_WEAKP; MAXITER; NUM_AMPS_PRINT; PROP_ALL; PROP_ROOT; PROP_SYM; RESTART; ROOTS_PER_IRREP; R_CONVERGENCE; SEKINO; ZETA. Expert; JOBTYPE; WFN. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Appendices; Keywords by Module; CCLAMBDA. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodir_options_c/module__cclambda-1.html:3860,update,updated,3860,psi4manual/1.4.0/autodir_options_c/module__cclambda-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodir_options_c/module__cclambda-1.html,2,['update'],['updated']
Deployability,"t: WERNER. LOCAL_PAIRDEF¶. Definition of local pair domains. Type: string; Default: No Default. LOCAL_WEAKP¶. Desired treatment of “weak pairs” in the local-CCSD method. The value of NONE (unique available option) treats weak pairs in the same manner as strong pairs. Type: string; Default: NONE. MAXITER¶. Maximum number of iterations. Type: integer; Default: 50. NUM_AMPS_PRINT¶. Number of important CC amplitudes per excitation level to print. CC analog to NUM_DETS_PRINT. Type: integer; Default: 10. PROP_ALL¶. Compute unrelaxed properties for all excited states. Type: boolean; Default: true. PROP_ROOT¶. Root number (within its irrep) for computing properties. Type: integer; Default: 1. PROP_SYM¶. The symmetry of states. Type: integer; Default: 1. RESTART¶. Do restart the coupled-cluster iterations from old \(\lambda_1\) and \(\lambda_2\) amplitudes?. Type: boolean; Default: false. ROOTS_PER_IRREP¶. The number of electronic states to computed, per irreducible representation. Type: array; Default: No Default. R_CONVERGENCE¶. Convergence criterion for wavefunction (change) in CC lambda-amplitude equations. Type: conv double; Default: 1e-7. SEKINO¶. Do Sekino-Bartlett size-extensive model-III?. Type: boolean; Default: false. ZETA¶. Do use zeta?. Type: boolean; Default: false. Expert¶. JOBTYPE¶. Type of job being performed. Type: string; Default: No Default. WFN¶. Wavefunction type. Type: string; Default: SCF. table of contents. CCLAMBDA; General; ABCD; AO_BASIS; CACHELEVEL; DIIS; LOCAL; LOCAL_CPHF_CUTOFF; LOCAL_CUTOFF; LOCAL_FILTER_SINGLES; LOCAL_METHOD; LOCAL_PAIRDEF; LOCAL_WEAKP; MAXITER; NUM_AMPS_PRINT; PROP_ALL; PROP_ROOT; PROP_SYM; RESTART; ROOTS_PER_IRREP; R_CONVERGENCE; SEKINO; ZETA. Expert; JOBTYPE; WFN. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Keywords by Module; CCLAMBDA. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/autodir_options_c/module__cclambda-1.html:3860,update,updated,3860,psi4manual/1.5.0/autodir_options_c/module__cclambda-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodir_options_c/module__cclambda-1.html,2,['update'],['updated']
Deployability,"t: true. DDX_INCORE¶. Use an in-core version, which uses more memory, but is generally faster. Type: boolean; Default: false. DDX_LOGFILE¶. Logfile to dump a full trace of the DDX solver history for debugging. Type: string; Default: No Default. DDX_SHIFT¶. Shift for characteristic function of sphere overlap. Advanced parameter, which usually does not need to be modified. Valid values are within the range [-1, 1] with -100 denoting an automatic selection of the best shift. Type: double; Default: -100.0. How to configure ddx for building Psi4¶; Role and Dependencies. Role — In PSI4, ddx is a library for providing fast continuum; solvation models.; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) ddx; Upstream Dependencies — ddx \(\Leftarrow\) Fortran. CMake Variables. ENABLE_ddx — CMake variable toggling whether Psi4 automatically installs ddx. Examples. Build and install ddx if needed. >>> cmake -DENABLE_ddx=ON. Build without ddx. >>> cmake. table of contents. Interface to ddx by A. Mikhalev, A. Jha, M. Nottoli and M. F. Herbst; Installation; Using dd-based continum solvation models; Solvent model and solvent cavity definition; DDX; DDX_MODEL; DDX_RADII; DDX_RADII_SCALING; DDX_RADII_SET; DDX_SOLVENT_EPSILON; DDX_SOLVENT; DDX_SOLVENT_KAPPA. Numerical integration and discretisation parameters; DDX_SOLUTE_RADIAL_POINTS; DDX_SOLUTE_SPHERICAL_POINTS; DDX_LMAX; DDX_N_LEBEDEV. Iterative solver parameters; DDX_DIIS_MAX_VECS; DDX_MAXITER; DDX_SOLVATION_CONVERGENCE. Further keywords for ddx; DDX_ETA; DDX_FMM_LOCAL_LMAX; DDX_FMM_MULTIPOLE_LMAX; DDX_FMM; DDX_INCORE; DDX_LOGFILE; DDX_SHIFT. How to configure ddx for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to ddx by A. Mikhalev, A. Jha, M. Nottoli and M. F. Herbst. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/ddx.html:11295,integrat,integration,11295,psi4manual/master/ddx.html,https://psicode.org,https://psicode.org/psi4manual/master/ddx.html,2,"['integrat', 'update']","['integration', 'updated']"
Deployability,"t; (CONDA_PREFIX and HOST are defined upon; activation). >>> cmake -DCMAKE_C_COMPILER=${GCC} \; -DCMAKE_CXX_COMPILER=${GXX} \; -DCMAKE_Fortran_COMPILER=${GFORTRAN}. What C and C++ compilers and versions are approved¶; On Linux, the following work nicely. GNU: gcc, g++; Intel: icc, icpc; Clang: clang, clang++. On Mac, the following work nicely. Apple Clang: clang, clang++; Intel: icc, icpc. PSI4 requires full C++11 compliance, meaning, most importantly, GCC; >= 4.9. This compliance is checked for at build-time with file; psi4/cmake/custom_cxxstandard.cmake, so either consult that file or; try a test build to ensure your compiler is approved. Note that Intel; compilers on Linux also rely on GCC, so both icpc and gcc versions are checked. How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS. How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew¶; The easiest compiler to obtain is clang which is a drop-in replacement; for gcc and g++. Just install XCode. Some old versions; of XCode can’t handle some of the advanced C++ language features, but this; is a software not hardware limitation. Checks for version compliance; performed at build-time. How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS¶; # See if GCC too old (in this case, yes); >>> gcc --version; gcc (GCC) 4.8.5 20150623 (Red Hat 4.8.5-4). Even if you’re not using GCC as a compiler, your Intel compiler seeks; gcc to generate code compatible with your current GCC version. If your; GCC is too old (like above), you can update your system GCC through your; package manager or install an acceptable version elsewhere on your; system. The latter route, tested on Linux with Intel compilers, is below.; # Install GCC 7.2 into a non-primary conda environment; >>> conda create -n gcc72 gxx_linux-64 gcc_linux-64. # To Build, either:. # (A) activate environment (prepends PATH and defines environment variables CC, CXX, HOST, etc); >>> conda activate gcc72; >>> ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/build_planning-1.html:31359,install,install,31359,psi4manual/1.2.1/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html,2,['install'],['install']
Deployability,"t; (CONDA_PREFIX and HOST are defined upon; activation). >>> cmake -DCMAKE_C_COMPILER=${GCC} \; -DCMAKE_CXX_COMPILER=${GXX} \; -DCMAKE_Fortran_COMPILER=${GFORTRAN}. What C and C++ compilers and versions are approved¶; On Linux, the following work nicely. GNU: gcc, g++; Intel: icc, icpc; Clang: clang, clang++. On Mac, the following work nicely. Apple Clang: clang, clang++; Intel: icc, icpc. PSI4 requires full C++11 compliance, meaning, most importantly, GCC; >= 4.9. This compliance is checked for at build-time with file; psi4/cmake/custom_cxxstandard.cmake, so either consult that file or; try a test build to ensure your compiler is approved. Note that Intel; compilers on Linux also rely on GCC, so both icpc and gcc versions are checked. How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS. How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew¶; The easiest compiler to obtain is clang which is a drop-in replacement; for gcc and g++. Just install XCode. Some old versions; of XCode can’t handle some of the advanced C++ language features, but this; is a software not hardware limitation. Checks for version compliance; performed at build-time. Note that this “AppleClang” will not be compatible; with conda Mac packages using C++11, nor can it make use of OpenMP directives.; Another route to obtaining clang compilers without the above limitations; is through conda.; # Install Clang 4.0.1 into a non-primary conda environment; >>> conda create -n clang401 clangxx_osx-64 clang_osx-64 llvm-openmp intel-openmp. # To Build, activate environment (prepends PATH and defines environment variables CLANG, CLANGXX, HOST, etc):; >>> conda activate clang401; >>> echo ${CLANGXX}; /path/to/miniconda/envs/clang401/bin/x86_64-apple-darwin13.4.0-clang++; >>> echo ${HOST}; x86_64-apple-darwin13.4.0. # build with Clang; >>> cmake -H. -Bbuild \; -DCMAKE_C_COMPILER=${CLANG} \; -DCMAKE_CXX_COMPILER=${CLANGXX} \; -DCMAKE_CXX_FLAGS=""-stdlib=libc++"" \; -DOp",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/build_planning-1.html:32722,install,install,32722,psi4manual/1.3.2/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/build_planning-1.html,2,['install'],['install']
Deployability,"t; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. sapt-compare; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ cation. cc7; Tests CCENERGY’s CCSD gradient in the presence of a dipole field. ghosts; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using explicit specification of ghost atoms. This is equivalent to the dfmp2_1 sample but uses both (equivalent) specifications of ghost atoms in a manual counterpoise correction. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. olccd-freq1; OLCCD cc-pVDZ freqs for C2H2. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. dft-custom-mgga; updated dldf reference to new BraggSlater radii Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). dfmp2-grad2; DF-MP2 cc-pVDZ gradient for the NO molecule. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. sapt-exch-ind-inf; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. adc1; ADC(2)/6-31G** on H2O using builtin ADC module. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. cc2; 6-31G** H2O CCSD optimization by energies, with Z-Matrix input. dfep2-2; Compute three IP and 2 EA’s for the PH3 molecule. omp2p5-2; OMP2.5 cc-pVDZ energy for the H2O molecule. sad-scf-type; Test SAD SCF guesses on noble gas atom. dfmp2-1; Dens",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html:23552,update,updated,23552,psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html,4,['update'],['updated']
Deployability,"t; def2-qzvppd-ri; pcseg-0. aug-pcSseg-4; aug-pcsseg-4; aug-cc-pv5z-jkfit; aug-cc-pwcv5z-ri; pcseg-0. pcseg-0; pcseg-0; def2-universal-jkfit; def2-sv_p_-ri; —. pcseg-1; pcseg-1; def2-universal-jkfit; def2-svp-ri; pcseg-0. pcseg-2; pcseg-2; def2-universal-jkfit; def2-tzvpp-ri; pcseg-0. pcseg-3; pcseg-3; def2-universal-jkfit; def2-qzvpp-ri; pcseg-0. pcseg-4; pcseg-4; cc-pv5z-jkfit; cc-pv5z-ri; pcseg-0. pcSseg-0; pcsseg-0; def2-universal-jkfit; def2-sv_p_-ri; pcseg-0. pcSseg-1; pcsseg-1; def2-universal-jkfit; def2-svp-ri; pcseg-0. pcSseg-2; pcsseg-2; def2-universal-jkfit; def2-tzvpp-ri; pcseg-0. pcSseg-3; pcsseg-3; def2-universal-jkfit; def2-qzvpp-ri; pcseg-0. pcSseg-4; pcsseg-4; cc-pv5z-jkfit; cc-pwcv5z-ri; pcseg-0. minix; minix; def2-universal-jkfit; def2-svp-ri; —. vDZP; vdzp; def2-universal-jkfit; def2-svp-ri; —. DZ; dz; —; —; —. DZP; dzp; —; —; —. DZVP; dzvp; dgauss-dzvp-mix; dgauss-dzvp-autoaux; —. psi3-DZP; psi3-dzp; —; —; —. psi3-TZ2P; psi3-tz2p; —; —; —. psi3-TZ2PF; psi3-tz2pf; —; —; —. sadlej-lpol-dl; sadlej-lpol-dl; —; —; —. sadlej-lpol-ds; sadlej-lpol-ds; —; —; —. sadlej-lpol-fl; sadlej-lpol-fl; —; —; —. sadlej-lpol-fs; sadlej-lpol-fs; —; —; —. 2zapa-nr; 2zapa-nr; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; pcseg-0. 3zapa-nr; 3zapa-nr; aug-cc-pvqz-jkfit; aug-cc-pvqz-ri; pcseg-0. 4zapa-nr; 4zapa-nr; aug-cc-pv5z-jkfit; aug-cc-pv5z-ri; pcseg-0. 5zapa-nr; 5zapa-nr; aug-cc-pv5z-jkfit; aug-cc-pv6z-ri; pcseg-0. 6zapa-nr; 6zapa-nr; aug-cc-pv6z-ri; aug-cc-pv6z-ri; pcseg-0. 7zapa-nr; 7zapa-nr; aug-cc-pv6z-ri; aug-cc-pv6z-ri; pcseg-0. cc-pvqz-f12; cc-pvqz-f12; cc-pv5z-jkfit; cc-pv5z-ri; pcseg-0. cc-pvtz-f12; cc-pvtz-f12; cc-pvqz-jkfit; cc-pvqz-ri; pcseg-0. cc-pvqz-f12; cc-pvqz-f12; cc-pv5z-jkfit; cc-pv5z-ri; pcseg-0. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.9.1;  · . PSI4. Appendices; Auxiliary Basis Sets. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 08 February 2024 09:32PM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/basissets_byfamily.html:21020,update,updated,21020,psi4manual/1.9.x/basissets_byfamily.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/basissets_byfamily.html,1,['update'],['updated']
Deployability,t; module__optking.txt; module__psimrcc.txt; module__sapt.txt; module__scf.txt; module__thermo.txt. adc.txt; appendices.txt; autodoc_available_databases.txt; autodoc_basissets_byfamily.txt; autodoc_dft_all.txt; autodoc_dft_dhybrid.txt; autodoc_dft_disp.txt; autodoc_dft_energy.txt; autodoc_dft_gga.txt; autodoc_dft_hybrid.txt; autodoc_dft_lrc.txt; autodoc_dft_meta.txt; autodoc_dft_opt.txt; autodoc_dft_scsdhybrid.txt; autodoc_driver.txt; autodoc_glossary_options_c.txt; autodoc_options_c_bymodule.txt; autodoc_psi4bases.txt; autodoc_psifiles.txt; autodoc_psivariables_bymodule.txt; autodoc_testsuite.txt; basissets.txt; basissets_byelement.txt; basissets_byfamily.txt; bestpractices_py.txt; bibliography.txt; cbs.txt; cbs_eqn.txt; cc.txt; contents.txt; contributing.txt; cp.txt; customizing.txt; db.txt; dcft.txt; detci.txt; dfmp2.txt; dft.txt; dft_byfunctional.txt; dftd3.txt; diatomic.txt; documentation.txt; energy.txt; external.txt; fnocc.txt; freq.txt; glossary_psivariables.txt; index.txt; installfile.txt; intercalls.txt; interfacing.txt; introduction.txt; methods.txt; molden.txt; mrcc.txt; notes_c.txt; notes_py.txt; occ.txt; oeprop.txt; opt.txt; optionshandling.txt; optking.txt; pep0001.txt; plugins.txt; proc_py.txt; programming.txt; prop.txt; psimod.txt; psimrcc.txt; psipep.txt; psithonfunc.txt; psithoninput.txt; quickaddalias.txt; quickaddbasis.txt; quickadddatabase.txt; sapt.txt; scf.txt; testsuite.txt; tutorial.txt. /_static; ; basic.css; doctools.js; jquery.cookie.js; jquery.js; psi4.css; pygments.css; searchtools.js; toggle_codeprompt.js; toggle_sections.js; toggle_sidebar.js; underscore.js. ADC: Ab Initio Polarization Propagator — PSI4 [beta4] documentation; ADC: Ab Initio Polarization Propagator — PSI4 [beta4] documentation; Appendices — PSI4 [beta4] documentation; Appendices — PSI4 [beta4] documentation. /autodir_options_c; ; CACHELEVEL — PSI4 [beta4] documentation; MEMORY — PSI4 [beta4] documentation; NEWTON_CONVERGENCE — PSI4 [beta4] documentation; NORM_TOLERANCE,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/index-wcopy.html:1431568,install,installfile,1431568,index-wcopy.html,https://psicode.org,https://psicode.org/index-wcopy.html,1,['install'],['installfile']
Deployability,t; module__optking.txt; module__psimrcc.txt; module__sapt.txt; module__scf.txt; module__thermo.txt. adc.txt; appendices.txt; autodoc_available_databases.txt; autodoc_basissets_byfamily.txt; autodoc_dft_all.txt; autodoc_dft_dhybrid.txt; autodoc_dft_disp.txt; autodoc_dft_energy.txt; autodoc_dft_gga.txt; autodoc_dft_hybrid.txt; autodoc_dft_lrc.txt; autodoc_dft_meta.txt; autodoc_dft_opt.txt; autodoc_dft_scsdhybrid.txt; autodoc_driver.txt; autodoc_glossary_options_c.txt; autodoc_options_c_bymodule.txt; autodoc_psi4bases.txt; autodoc_psifiles.txt; autodoc_psivariables_bymodule.txt; autodoc_testsuite.txt; basissets.txt; basissets_byelement.txt; basissets_byfamily.txt; bestpractices_py.txt; bibliography.txt; cbs.txt; cbs_eqn.txt; cc.txt; contents.txt; contributing.txt; cp.txt; customizing.txt; db.txt; dcft.txt; detci.txt; dfmp2.txt; dft.txt; dft_byfunctional.txt; dftd3.txt; diatomic.txt; documentation.txt; energy.txt; external.txt; fnocc.txt; freq.txt; glossary_psivariables.txt; index.txt; installfile.txt; intercalls.txt; interfacing.txt; introduction.txt; methods.txt; molden.txt; mrcc.txt; notes_c.txt; notes_py.txt; occ.txt; oeprop.txt; opt.txt; optionshandling.txt; optking.txt; pep0001.txt; plugins.txt; proc_py.txt; programming.txt; prop.txt; psimod.txt; psimrcc.txt; psipep.txt; psithonfunc.txt; psithoninput.txt; quickaddalias.txt; quickaddbasis.txt; quickadddatabase.txt; sapt.txt; scf.txt; testsuite.txt; tutorial.txt. /_static; ; basic.css; doctools.js; jquery.cookie.js; jquery.js; psi4.css; pygments.css; searchtools.js; toggle_codeprompt.js; toggle_sections.js; toggle_sidebar.js; underscore.js. ADC: Ab Initio Polarization Propagator — PSI4 [beta5] documentation; ADC: Ab Initio Polarization Propagator — PSI4 [beta5] documentation; Appendices — PSI4 [beta5] documentation; Appendices — PSI4 [beta5] documentation. /autodir_options_c; ; CACHELEVEL — PSI4 [beta5] documentation; MEMORY — PSI4 [beta5] documentation; NEWTON_CONVERGENCE — PSI4 [beta5] documentation; NORM_TOLERANCE,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/index-wcopy.html:1648627,install,installfile,1648627,index-wcopy.html,https://psicode.org,https://psicode.org/index-wcopy.html,1,['install'],['installfile']
Deployability,t; module__optking.txt; module__psimrcc.txt; module__sapt.txt; module__scf.txt; module__thermo.txt. adc.txt; appendices.txt; autodoc_available_databases.txt; autodoc_basissets_byfamily.txt; autodoc_dft_all.txt; autodoc_dft_dhybrid.txt; autodoc_dft_disp.txt; autodoc_dft_energy.txt; autodoc_dft_gga.txt; autodoc_dft_hybrid.txt; autodoc_dft_lrc.txt; autodoc_dft_meta.txt; autodoc_dft_opt.txt; autodoc_dft_scsdhybrid.txt; autodoc_driver.txt; autodoc_glossary_options_c.txt; autodoc_options_c_bymodule.txt; autodoc_psi4bases.txt; autodoc_psifiles.txt; autodoc_psivariables_bymodule.txt; autodoc_testsuite.txt; basissets.txt; basissets_byelement.txt; basissets_byfamily.txt; bestpractices_py.txt; bibliography.txt; cbs.txt; cbs_eqn.txt; cc.txt; contents.txt; contributing.txt; cp.txt; customizing.txt; db.txt; dcft.txt; detci.txt; dfmp2.txt; dft.txt; dft_byfunctional.txt; dftd3.txt; diatomic.txt; documentation.txt; energy.txt; external.txt; fnocc.txt; freq.txt; glossary_psivariables.txt; index.txt; installfile.txt; intercalls.txt; interfacing.txt; introduction.txt; methods.txt; molden.txt; mrcc.txt; notes_c.txt; notes_py.txt; occ.txt; oeprop.txt; opt.txt; optionshandling.txt; optking.txt; pep0001.txt; plugins.txt; proc_py.txt; programming.txt; prop.txt; psimod.txt; psimrcc.txt; psipep.txt; psithonfunc.txt; psithoninput.txt; quickaddalias.txt; quickaddbasis.txt; quickadddatabase.txt; sapt.txt; scf.txt; testsuite.txt; tutorial.txt. _static; ; basic.css; doctools.js; jquery.cookie.js; jquery.js; psi4.css; pygments.css; searchtools.js; toggle_codeprompt.js; toggle_sections.js; toggle_sidebar.js; underscore.js. <no title> — PSI4 [beta4] documentation; ADC: Ab Initio Polarization Propagator — PSI4 [beta4] documentation; ADC: Ab Initio Polarization Propagator — PSI4 [beta4] documentation; Appendices — PSI4 [beta4] documentation; Appendices — PSI4 [beta4] documentation. autodir_options_c; ; CACHELEVEL — PSI4 [beta4] documentation; MEMORY — PSI4 [beta4] documentation; NEWTON_CONVERGENCE — PSI,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/index-wcopy.html:1322567,install,installfile,1322567,index-wcopy.html,https://psicode.org,https://psicode.org/index-wcopy.html,1,['install'],['installfile']
Deployability,t; module__optking.txt; module__psimrcc.txt; module__sapt.txt; module__scf.txt; module__thermo.txt. adc.txt; appendices.txt; autodoc_available_databases.txt; autodoc_basissets_byfamily.txt; autodoc_dft_all.txt; autodoc_dft_dhybrid.txt; autodoc_dft_disp.txt; autodoc_dft_energy.txt; autodoc_dft_gga.txt; autodoc_dft_hybrid.txt; autodoc_dft_lrc.txt; autodoc_dft_meta.txt; autodoc_dft_opt.txt; autodoc_dft_scsdhybrid.txt; autodoc_driver.txt; autodoc_glossary_options_c.txt; autodoc_options_c_bymodule.txt; autodoc_psi4bases.txt; autodoc_psifiles.txt; autodoc_psivariables_bymodule.txt; autodoc_testsuite.txt; basissets.txt; basissets_byelement.txt; basissets_byfamily.txt; bestpractices_py.txt; bibliography.txt; cbs.txt; cbs_eqn.txt; cc.txt; contents.txt; contributing.txt; cp.txt; customizing.txt; db.txt; dcft.txt; detci.txt; dfmp2.txt; dft.txt; dft_byfunctional.txt; dftd3.txt; diatomic.txt; documentation.txt; energy.txt; external.txt; fnocc.txt; freq.txt; glossary_psivariables.txt; index.txt; installfile.txt; intercalls.txt; interfacing.txt; introduction.txt; methods.txt; molden.txt; mrcc.txt; notes_c.txt; notes_py.txt; occ.txt; oeprop.txt; opt.txt; optionshandling.txt; optking.txt; pep0001.txt; plugins.txt; proc_py.txt; programming.txt; prop.txt; psimod.txt; psimrcc.txt; psipep.txt; psithonfunc.txt; psithoninput.txt; quickaddalias.txt; quickaddbasis.txt; quickadddatabase.txt; sapt.txt; scf.txt; testsuite.txt; tutorial.txt. _static; ; basic.css; doctools.js; jquery.cookie.js; jquery.js; psi4.css; pygments.css; searchtools.js; toggle_codeprompt.js; toggle_sections.js; toggle_sidebar.js; underscore.js. <no title> — PSI4 [beta5] documentation; ADC: Ab Initio Polarization Propagator — PSI4 [beta5] documentation; ADC: Ab Initio Polarization Propagator — PSI4 [beta5] documentation; Appendices — PSI4 [beta5] documentation; Appendices — PSI4 [beta5] documentation. autodir_options_c; ; CACHELEVEL — PSI4 [beta5] documentation; MEMORY — PSI4 [beta5] documentation; NEWTON_CONVERGENCE — PSI,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/index-wcopy.html:1540584,install,installfile,1540584,index-wcopy.html,https://psicode.org,https://psicode.org/index-wcopy.html,1,['install'],['installfile']
Deployability,"t_charges not among None or float: {}"""""".format(fragment_charges)). if fragment_multiplicities is None:; frm = [None] * nfr; elif all(f is None or (isinstance(f, (int, np.integer)) and f >= 1) for f in fragment_multiplicities):; frm = fragment_multiplicities; else:; raise ValidationError(; """"""fragment_multiplicities not among None or positive integer: {}"""""".format(fragment_multiplicities); ). if not (len(frc) == len(frm) == len(frs) + 1):; raise ValidationError(; """"""Dimension mismatch among fragment quantities: sep + 1 ({}), chg ({}), and mult({})"""""".format(; len(frs) + 1, len(frc), len(frm); ); ). return {""fragment_separators"": list(frs), ""fragment_charges"": frc, ""fragment_multiplicities"": frm}. def validate_and_fill_unsettled_geometry(geom_unsettled, variables):; lgeom = [len(g) for g in geom_unsettled]. if lgeom[0] not in [0, 3]:; raise ValidationError(""""""First line must be Cartesian or single atom.""""""). if any(l == 3 for l in lgeom) and not all((l in [3, 6]) for l in lgeom):; raise ValidationError(; """"""Mixing Cartesian and Zmat formats must occur in just that order once absolute frame established.""""""; ). allowed_to_follow = {0: [2], 2: [4], 3: [3, 6], 4: [6], 6: [3, 6]}. for il in range(len(lgeom) - 1):; if lgeom[il + 1] not in allowed_to_follow[lgeom[il]]:; raise ValidationError(; """"""This is not how a Zmat works - aim for lower triangular. Line len ({}) may be followed by line len ({}), not ({})."""""".format(; lgeom[il], allowed_to_follow[lgeom[il]], lgeom[il + 1]; ); ). if not all(len(v) == 2 for v in variables):; raise ValidationError(""""""Variables should come in pairs: {}"""""".format(variables)). vvars = [[str(v[0]), float(v[1])] for v in variables]. return {""geom_unsettled"": geom_unsettled, ""variables"": vvars}. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .  · ; 1.6;  · . PSI4. Module code; qcelemental.molparse.from_arrays. © Copyright 2022, The Psi4 Project.; Last updated on Thursday, 19 May 2022 08:57PM.; Created using Sphinx 4.5.0.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/_modules/qcelemental/molparse/from_arrays.html:23569,update,updated,23569,psi4manual/1.6.x/_modules/qcelemental/molparse/from_arrays.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/_modules/qcelemental/molparse/from_arrays.html,1,['update'],['updated']
Deployability,"t_frequencies(self: psi4.core.Wavefunction, arg0: psi4.core.Vector) → None¶; Sets the frequencies of the Hessian. set_gradient(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None¶; Sets the Wavefunctions gradient. set_hessian(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None¶; Sets the Wavefunctions Hessian. set_jk(self: psi4.core.HF, arg0: psi4.core.JK) → None; Sets the internal JK object !expert. set_name(self: psi4.core.Wavefunction, arg0: str) → None¶; Sets the level of theory this wavefunction corresponds to. set_print(self: psi4.core.Wavefunction, arg0: int) → None¶; Sets the print level of the Wavefunction. set_reference_wavefunction(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; docstring. set_sad_basissets(self: psi4.core.HF, arg0: List[psi4.core.BasisSet]) → None; Sets the Superposition of Atomic Densities basisset. set_sad_fitting_basissets(self: psi4.core.HF, arg0: List[psi4.core.BasisSet]) → None; Sets the Superposition of Atomic Densities density-fitted basisset. set_variable(self: psi4.core.Wavefunction, arg0: str, arg1: float) → None¶; Sets the requested internal variable. shallow_copy(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; Copies the pointers to the internal data. sobasisset(self: psi4.core.Wavefunction) → psi4.core.SOBasisSet¶; Returns the symmetry orbitals basis. soccpi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of singly occupied orbitals per irrep. twoel_Hx(self: psi4.core.HF, arg0: List[psi4.core.Matrix], arg1: bool, arg2: str) → List[psi4.core.Matrix]; Two-electron Hessian-vector products. variables(self: psi4.core.Wavefunction) → Dict[str, float]¶; Returns the map of all internal variables. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 July 2018 04:21AM.; Created using Sphinx 1.7.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/api/psi4.core.hf.html:16184,update,updated,16184,psi4manual/1.2.1/api/psi4.core.hf.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/api/psi4.core.hf.html,1,['update'],['updated']
Deployability,"t_name(self: psi4.core.IntegralTransform, arg0: str) → None¶. set_dpd_id(self: psi4.core.IntegralTransform, arg0: int) → None¶. set_dpd_int_file(self: psi4.core.IntegralTransform, arg0: int) → None¶. set_keep_dpd_so_ints(self: psi4.core.IntegralTransform, arg0: bool) → None¶. set_keep_ht_ints(self: psi4.core.IntegralTransform, arg0: bool) → None¶. set_keep_iwl_so_ints(self: psi4.core.IntegralTransform, arg0: bool) → None¶. set_memory(self: psi4.core.IntegralTransform, arg0: int) → None¶. set_orbitals(self: psi4.core.IntegralTransform, arg0: psi4.core.Matrix) → None¶. set_print(self: psi4.core.IntegralTransform, arg0: int) → None¶. set_psio(self: psi4.core.IntegralTransform, arg0: psi4.core.IO) → None¶. set_so_tei_file(self: psi4.core.IntegralTransform, arg0: int) → None¶. set_tei_already_presorted(self: psi4.core.IntegralTransform, arg0: bool) → None¶. set_tpdm_already_presorted(self: psi4.core.IntegralTransform, arg0: bool) → None¶. set_write_dpd_so_tpdm(self: psi4.core.IntegralTransform, arg0: bool) → None¶. transform_tei(self: psi4.core.IntegralTransform, s1: psi4.core.MOSpace, s2: psi4.core.MOSpace, s3: psi4.core.MOSpace, s4: psi4.core.MOSpace, half_trans: psi4.core.IntegralTransform.HalfTrans = <HalfTrans.MakeAndNuke: 2>) → None¶; Transform two-electron integrals. transform_tei_first_half(self: psi4.core.IntegralTransform, s1: psi4.core.MOSpace, s2: psi4.core.MOSpace) → None¶; First half-transform two-electron integrals. transform_tei_second_half(self: psi4.core.IntegralTransform, s1: psi4.core.MOSpace, s2: psi4.core.MOSpace, s3: psi4.core.MOSpace, s4: psi4.core.MOSpace) → None¶; Second half-transform two-electron integrals. update_orbitals(self: psi4.core.IntegralTransform) → None¶; docstring. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.6;  · . PSI4. PSI4 API: Linking C++ and Python; IntegralTransform. © Copyright 2022, The Psi4 Project.; Last updated on Thursday, 19 May 2022 08:57PM.; Created using Sphinx 4.5.0.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/api/psi4.core.IntegralTransform.html:5539,update,updated,5539,psi4manual/1.6.x/api/psi4.core.IntegralTransform.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/api/psi4.core.IntegralTransform.html,1,['update'],['updated']
Deployability,"t_subsets(2,[1,3]):; mA = eneyne.extract_subsets(1); energy('scf'). clean(). mAcp = eneyne.extract_subsets(1,2); energy('scf'). If the molecule contains fragments but is not conveniently ordered for the; -- marker, the auto_fragments() function can be applied, as shown in; pywrap-basis, to return as active molecule the previous; active molecule, only fragmented. Advanced Python¶; A named molecule in an input file is a full-fledged instance of the; powerful C++ Molecule class. Thus, all member; functions (that have been exported via Boost Python) documented thereat; are accessible through the handle option_molecule_name in; molecule optional_molecule_name {...}. The molecular geometry can be got and set and manipulated as a; psi4.Matrix object. Below shows how to access; coordinates in an input file in Python.; molecule formaldehyde {; C 0.0 0.0 0.0; O 0.0 1.2 0.0; H -0.8 -0.3 0.0; H 0.8 -0.3 0.0 # set geometry in angstroms; }. formaldehyde.update_geometry() # update the molecule internals since pre-energy()-like call; formaldehyde.print_out() # print molecule to output file; geom1psi = formaldehyde.geometry() # get coordinates in bohr as a psi4.Matrix. geom1psi.print_out() # print coordinates array to output file; geom1py = mat2arr(geom1psi) # get coordinates as a Python array; print geom1py # print coordinates to screen. geom2py = [[ 0.0, 0.0, 0.0],; [ 0.0, 1.5, 0.0],; [-0.8, -0.3, 0.0],; [ 0.8, -0.3, 0.0]] # define alternate coordinates in angstroms as Python array. geom2psi = psi4.Matrix(4, 3) # initialize psi4.Matrix; geom2psi.set(geom2py) # load Python array into psi4.Matrix; geom2psi.scale(1.0/psi_bohr2angstroms) # scale into bohr; geom2psi.print_out() # print alternate coord array to output file. formaldehyde.set_geometry(geom2psi) # load alternate coordinates into molecule; formaldehyde.update_geometry() # update the molecule internals; formaldehyde.print_out() # print new molecule to output file; compare_values(28.9950517332, formaldehyde.nuclear_repulsion_e",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/psithonmol-1.html:16336,update,update,16336,psi4manual/1.0.0/psithonmol-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/psithonmol-1.html,2,['update'],['update']
Deployability,"ta densities are the same. same_a_b_orbs(self: psi4.core.Wavefunction) → bool¶; Returns true if the alpha and beta orbitals are the same. set_array(self: psi4.core.Wavefunction, arg0: str, arg1: psi4.core.Matrix) → None¶; Returns the requested internal array. set_basisset(self: psi4.core.Wavefunction, arg0: str, arg1: psi4.core.BasisSet) → None¶; Sets the requested auxiliary basis. set_external_potential(self: psi4.core.Wavefunction, arg0: psi4.core.ExternalPotential) → None¶; Sets the requested external potential. set_frequencies(self: psi4.core.Wavefunction, arg0: psi4.core.Vector) → None¶; Sets the frequencies of the Hessian. set_gradient(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None¶; Sets the Wavefunctions gradient. set_hessian(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None¶; Sets the Wavefunctions Hessian. set_name(self: psi4.core.Wavefunction, arg0: str) → None¶; Sets the level of theory this wavefunction corresponds to. set_print(self: psi4.core.Wavefunction, arg0: int) → None¶; Sets the print level of the Wavefunction. set_reference_wavefunction(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; docstring. set_variable(self: psi4.core.Wavefunction, arg0: str, arg1: float) → None¶; Sets the requested internal variable. shallow_copy(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; Copies the pointers to the internal data. sobasisset(self: psi4.core.Wavefunction) → psi4.core.SOBasisSet¶; Returns the symmetry orbitals basis. soccpi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of singly occupied orbitals per irrep. variables(self: psi4.core.Wavefunction) → Dict[str, float]¶; Returns the map of all internal variables. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 July 2018 04:21AM.; Created using Sphinx 1.7.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/api/psi4.core.dfep2wavefunction.html:9425,update,updated,9425,psi4manual/1.2.1/api/psi4.core.dfep2wavefunction.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/api/psi4.core.dfep2wavefunction.html,1,['update'],['updated']
Deployability,"tabase of Ed and Rob’s favorite linear acene dimers.; Geometries from nowhere special, and reference energies undefined. cp 'off' || 'on'; rlxd 'off'; subset. 'small'; 'large'; 'FIRST3' benzene, napthalene, and anthracene dimers; 'FIRST5' benzene - pentacene dimers; 'FIRST10' benzene - decacene dimers. HSG¶. Database (Merz) of interaction energies for bimolecular complexes from protein-indinavir reaction site.; Geometries from and original reference energies from Faver et al. JCTC 7 790 (2011).; Revised reference interaction energies (HSGA) from Marshall et al. JCP 135 194102 (2011). cp 'off' || 'on'; rlxd 'off'; benchmark. 'HSG0' Faver et al. JCTC 7 790 (2011).; \(\Rightarrow\) 'HSGA' \(\Leftarrow\) Marshall et al. JCP 135 194102 (2011). subset. 'small'; 'large'. NCB31¶. Database (Truhlar) of several classes of noncovalent interactions.; Geometries from Truhlar and coworkers at site http://comp.chem.umn.edu/database_noncov/noncovalent.htm; Reference energies from Truhlar and coworkers at site http://comp.chem.umn.edu/database_noncov/noncovalent.htm; First comprehensive citation JPCA 109 5656 (2005). cp 'off' || 'on'; rlxd 'off' || 'on'; benchmark. '<benchmark_name>' <Reference>.; \(\Rightarrow\) '<default_benchmark_name>' \(\Leftarrow\) <Reference>. subset. 'small' 3: HF-HF, He-Ne, HCCH-HCCH; 'large' 1: BzBz_PD; 'HB6' hydrogen-bonded; 'CT7' charge-transfer; 'DI6' dipole-interacting; 'WI7' weakly interacting; 'PPS5' pi-pi stacking. table of contents. Database — database(); Output; Available Databases; A24; RSE42; A24alt; BENCH12; CORE; SSI; BASIC; S66by8; O24by5mb; BBI; BAKERJCC93; NBC10; HTR40; S66; NHTBH; O24by5; BAKERJCC96; S22; RGC10; HBC6; HTBH; JSCH; S22by5; ACENES; HSG; NCB31. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Psithon Functions: Invoking a Calculation; Database — database(). © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/db-1.html:26285,update,updated,26285,psi4manual/1.4.0/db-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db-1.html,2,['update'],['updated']
Deployability,"tability Analysis; Effective core potentials (ECPs); External potentials and QM/MM; Convergence and Algorithm Defaults; Recommendations. DFT: Density Functional Theory; Theory; Minimal Input; Spin/Symmetry Treatment; Functional Selection; Grid Selection; ERI Algorithms; IP Fitting; Fractional Particle Curves; Dispersion Corrections; Recommendations; Advanced Functional Use and Manipulation. DFT-NL; post-SCF time savings. DCT: Density Cumulant Theory; Theory; Methods; Iterative Algorithms; Analytic Gradients; Methods Summary; Minimal Input; Recommendations. DF-MP2: Density-Fitted 2nd-Order Møller–Plesset Perturbation Theory; Introduction; Theory; Recommendations. CC: Coupled Cluster Theory; Basic Keywords; Larger Calculations; Excited State Coupled Cluster Calculations; Linear Response (CCLR) Calculations. FNOCC: Frozen natural orbitals for CCSD(T), QCISD(T), CEPA, and MP4; Frozen natural orbitals (FNO); QCISD(T), CCSD(T), MP4, and CEPA; Quadratic configuration interaction and coupled cluster; Many-body perturbation theory; Coupled electron pair approximation; Density-fitted coupled cluster; Gn theory; Supported methods; Basic FNOCC Keywords; Advanced FNOCC Keywords. OCC: Orbital-Optimized Coupled-Cluster and Møller–Plesset Perturbation Theories; Introduction; Theory; Convergence Problems; Methods; Basic OCC Keywords; Advanced OCC Keywords; Basic DFOCC Keywords; Advanced DFOCC Keywords; Conventional (Non-OO) Coupled-Cluster and Møller–Plesset Perturbation Theories. PSIMRCC Implementation of Mk-MRCC Theory; A Simple Example; Orbital ordering and selection of the model space. CI: Configuration Interaction; Basic DETCI Keywords; Spin Multiplicities of Higher Roots; Arbitrary Order Perturbation Theory; Arbitrary Order Coupled-Cluster Theory. MCSCF: Multi-Configurational Self-Consistent-Field; Basic MCSCF Keywords. SAPT: Symmetry-Adapted Perturbation Theory; The S2 approximation and scaling; A First Example; Advanced example; SAPT0; SAPT(DFT); Higher-Order SAPT; MP2 Natur",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/methods-1.html:1761,configurat,configuration,1761,psi4manual/1.4.0/methods-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/methods-1.html,2,['configurat'],['configuration']
Deployability,"table implementation of the Gill; association function for wS and Head-Gordon’s wB97/wB97X functionals.; Additionally, we are pleased to have recently completed a heavily conditioned; implementation of the HJS exchange-hole model, which provides an analytical form; for the short-range enhancement factor for wPBE, wPBEsol, and wB88. From a; physics perspective, this implementation of wPBE is extremely useful for; theoretical investigations, as it is parameter free, and properly integrated; against the partition function in the exchange hole. We would like to thank Dr.; Scuseria for providing helpful advice and a reference implementations of the; older HSE exchange-hole model which led to the successful implementation of the; HJS model. Double-Hybrid FunctionalsDouble hybrids are percolating into PSI4. Note that these are; only available with density-fitted, not conventional, MP2 algorithms. -D FunctionalsWe have several -D2 functionals implemented. -D3 functionls are available; with the installation of Grimme’s DFTD3 program.; For now, the pure-GGA B97-D; functional of Grimme is remarkably accurate, and the hybrid B3LYP-D; functional is also quite reliable. Note: we have made a sincere effort to rigorously test all functionals; implemented in PSI4 for correctness. If you find an error in a DFT; functional or have a request for a new functional, please let us know on our; forum or GitHub page. Grid Selection¶; PSI4 uses the standard Lebedev-Laikov spherical quadratures in concert with a; number of radial quadratures and atomic partitioning schemes.; The default grid in PSI4 is a Lebedev-Treutler (75,302) grid with a Treutler; partition of the atomic weights.; Spherical grids are all of the extremely efficient Lebedev-Laikov type.; Spherical grid resolution is controlled by the DFT_SPHERICAL_POINTS; option, which may take one of the following values:. DFT_SPHERICAL_POINTS; Order. 6; 3. 14; 5. 26; 7. 38; 9. 50; 11. 74; 13. 86; 15. 110; 17. 146; 19. 170; 21. 194; 23. 230;",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/dft-1.html:18629,install,installation,18629,psi4manual/1.4.0/dft-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dft-1.html,9,['install'],['installation']
Deployability,"tal definitions in; psi4/lib/basis/NOTES and fitting bases designed for those; orbital bases. load_basfam_dunning()[source]¶. p4const¶. qcdb¶; Module to facilitate quantum chemical computations on chemical; databases. Contains Molecule class and physical constants from psi4 suite.; Module to largely replicate in python the psi4 libmints; CoordValue and CoordEntry classes, which were developed by; Justin M. Turney, with incremental improvements by other; psi4 developers. class CartesianEntry(entry_number, Z, charge, mass, symbol, label, x, y, z)[source]¶; Class to hold all information about an atom, including its; coordinate specification as three Cartesians. clone()[source]¶; Returns new, independent CartesianEntry object. compute()[source]¶; Computes the values of the coordinates (in whichever units; were inputted), returning them in a Vector. everything()[source]¶. invalidate()[source]¶; Flags the current coordinates as being outdated. print_in_input_format()[source]¶; Prints the updated geometry, in the format provided by the user. set_coordinates(x, y, z)[source]¶; Given the current set of coordinates, updates the values of this; atom’s coordinates and any variables that may depend on it. type()[source]¶; The type of CoordEntry specialization. class CoordEntry(entry_number, Z, charge, mass, symbol, label='')[source]¶; Class to. Z()[source]¶; The nuclear charge of the current atom (0 if ghosted). static a(a1, a2, a3)[source]¶; Computes the angle (in rad.) between three sets of coordinates. charge()[source]¶; The “atomic charge” of the current atom (for SAD purposes). static d(a1, a2, a3, a4)[source]¶; Computes the dihedral (in rad.) between four sets of coordinates. entry_number()[source]¶; The order in which this appears in the full atom list. everything()[source]¶. is_computed()[source]¶; Whether the current atom’s coordinates are up-to-date. is_equivalent_to(other)[source]¶; Whether this atom has the same mass and ghost status as atom other.; Unlike the libmint",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/autodoc_driver-1.html:39182,update,updated,39182,psi4manual/4.0b5/autodoc_driver-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodoc_driver-1.html,2,['update'],['updated']
Deployability,"tall: /python3.6/site-packages ."". ############################ Options: Build What? ############################; option(ENABLE_ambit ""Enables the ambit tensor library"" OFF); option(ENABLE_CheMPS2 ""Enables CheMPS2 for DMRG (requires HDF5)"" OFF); option(ENABLE_cppe ""Enables CPPE for Polarizable Embedding"" OFF); option(ENABLE_adcc ""Enables adcc for algebraic-diagrammatic construction methods (can also be added at runtime)"" OFF); option(ENABLE_dkh ""Enables DKH integrals (requires Fortran)"" OFF); option(ENABLE_ecpint ""Enables libecpint for effective core potentials (ECP)"" OFF); option(ENABLE_libefp ""Enables LIBEFP and PylibEFP for fragments"" OFF); option(ENABLE_erd ""Enables use of ERD instead of Libint (requires Fortran)"" OFF); option(ENABLE_simint ""Enables use of SIMINT two-electron integral library"" OFF); option(ENABLE_gdma ""Enables Stone's GDMA multipole code (requires Fortran)"" OFF); option(ENABLE_PCMSolver ""Enables PCMSolver library (requires Fortran)"" OFF); option(ENABLE_snsmp2 ""Enables SNSMP2 plugin (can also be added at runtime)"" OFF); option(ENABLE_v2rdm_casscf ""Enables V2RDM_CASSCF plugin (requires Fortran; can also be added at runtime)"" OFF); option(ENABLE_psi4fockci ""Enables Psi4FockCI plugin (can also be added at runtime)"" OFF); option(ENABLE_cct3 ""Enables cct3 plugin (requires Fortran; can also be added at runtime)"" OFF); option(ENABLE_gpu_dfcc ""Enables GPU_DFCC plugin for gpu-accelerated df-cc (requires CUDA; can also be added at runtime)"" OFF); option(ENABLE_mdi ""Enables MolSSI driver interface"" OFF); option(ENABLE_BrianQC ""Enables the BrianQC GPU module (requires CUDA; requires separate installation and licensing of the BrianQC module)"" OFF); option(ENABLE_Libint1t ""Enables Libint1 in special _t variety"" OFF); # These options are relevant to pasture, expert only; option(ENABLE_ccsort ""Enables ccsort plugin installed from psi4pasture"" OFF); option(ENABLE_transqt2 ""Enables transqt2 plugin installed from psi4pasture"" OFF). # Append modules added to pasture",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/build_planning.html:19759,install,installation,19759,psi4manual/1.6.x/build_planning.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/build_planning.html,3,['install'],"['installation', 'installed']"
Deployability,"tance between; atoms 1 and 3, as well as that between 2 and 4; set optking {; fixed_distance = (""; 1 3 0.95; 2 4 0.95; ""); }. Note that the effect of the frozen and fixed keywords is independent of; how the geometry of the molecule was input (whether Z-matrix or cartesian, etc.).. To scan the potential energy surface by optimizing at several fixed values; of the dihedral angle of HOOH.; molecule hooh {; 0 1; H 0.850718 0.772960 0.563468; O 0.120432 0.684669 -0.035503; O -0.120432 -0.684669 -0.035503; H -0.850718 -0.772960 0.563468; }. set {; basis cc-pvdz; intrafrag_step_limit 0.1; }. dihedrals = [100,110,120,130,140,150]; PES = []. for phi in dihedrals:; my_string = ""1 2 3 4 "" + str(phi); set optking fixed_dihedral = $my_string; E = optimize('scf'); PES.append((phi, E)). print ""\n\tcc-pVDZ SCF energy as a function of phi\n""; for point in PES:; print ""\t%5.1f%20.10f"" % (point[0], point[1]). Dealing with problematic optimizations¶; Although optking is continuously improved with robustness in mind, some; attempted optimizations will inevitably fail to converge to the desired minima.; For difficult cases, the following suggestions are made. As for any optimizer, computing the Hessian and limiting the step size will; successfully converge a higher percentage of cases. The default settings have; been chosen because they perform efficiently for common, representative test sets.; More restrictive, cautious steps are sometimes necessary.; DYNAMIC_LEVEL allows optking to change the method of optimization; toward algorithms that, while often less efficient, may help to converge difficult; cases. If this is initially set to 1, then optking, as poor steps are detected,; will increase the level through several forms of more robust and cautious algorithms.; The changes will reduce the trust radius, allow backward steps (partial line; searching), add cartesian coordinates, switch to cartesian coordinates, and take; steepest-descent steps.; The developers have found the OPT_COORDIN",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/optking-1.html:7827,continuous,continuously,7827,psi4manual/1.0.0/optking-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/optking-1.html,2,['continuous'],['continuously']
Deployability,"tart with: / . Used to imitate python install: /python3.6/site-packages ."". ############################ Options: Build What? ############################; option(ENABLE_ambit ""Enables the ambit tensor library"" OFF); option(ENABLE_CheMPS2 ""Enables CheMPS2 for DMRG (requires HDF5)"" OFF); option(ENABLE_cppe ""Enables CPPE for Polarizable Embedding"" OFF); option(ENABLE_adcc ""Enables adcc for algebraic-diagrammatic construction methods (can also be added at runtime)"" OFF); option(ENABLE_dkh ""Enables DKH integrals (requires Fortran)"" OFF); option(ENABLE_libefp ""Enables LIBEFP and PylibEFP for fragments"" OFF); option(ENABLE_erd ""Enables use of ERD instead of Libint (requires Fortran)"" OFF); option(ENABLE_simint ""Enables use of SIMINT two-electron integral library"" OFF); option(ENABLE_gdma ""Enables Stone's GDMA multipole code (requires Fortran)"" OFF); option(ENABLE_PCMSolver ""Enables PCMSolver library (requires Fortran)"" OFF); option(ENABLE_snsmp2 ""Enables SNSMP2 plugin (can also be added at runtime)"" OFF); option(ENABLE_v2rdm_casscf ""Enables V2RDM_CASSCF plugin (requires Fortran; can also be added at runtime)"" OFF); option(ENABLE_psi4fockci ""Enables Psi4FockCI plugin (can also be added at runtime)"" OFF); option(ENABLE_cct3 ""Enables cct3 plugin (requires Fortran; can also be added at runtime)"" OFF); option(ENABLE_gpu_dfcc ""Enables GPU_DFCC plugin for gpu-accelerated df-cc (requires CUDA; can also be added at runtime)"" OFF); option(ENABLE_mdi ""Enables MolSSI driver interface"" OFF); option(ENABLE_BrianQC ""Enables the BrianQC GPU module (requires CUDA; requires separate installation and licensing of the BrianQC module)"" OFF); option(ENABLE_Libint1t ""Enables Libint1 in special _t variety"" OFF); # These options are relevant to pasture, expert only; option(ENABLE_ccsort ""Enables ccsort plugin installed from psi4pasture"" OFF); option(ENABLE_transqt2 ""Enables transqt2 plugin installed from psi4pasture"" OFF). # Append modules added to pasture as needed; if(ENABLE_ccsort OR ENABLE_tr",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/build_planning-1.html:19282,install,installation,19282,psi4manual/1.4.0/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/build_planning-1.html,12,['install'],"['installation', 'installed']"
Deployability,"tatics and induction. This example uses frozen core as well as asyncronous I/O while forming the DF integrals and CPHF coefficients. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. plugin_libfock; LibFock test input. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. cc10; ROHF-CCSD cc-pVDZ energy for the state of the CN radical. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the state of the CN radical, with Cartesian input. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. cisd-sp-2; 6-31G** H2O Test CISD Energy Point. pywrap_db2; Database calculation with psi4-generated input. Should not be used as a model input file but as a canary to avoid breaking database/input parser dependencies. opt1; SCF STO-3G geometry optimzation, with Z-matrix input. dft2; DFT Functional Test. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis ). dft1; DFT Functional Test. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. mom; Maximum Overlap Method (MOM) Test. MOM is designed to stabilize SCF convergence and to target excited Slater determinants directly. fci-h2o-fzcv; 6-31G H2O Test FCI Energy Point. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies. dcft5; DCFT-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. opt2; SCF DZ allene geometry optimzation, with Cartesian input. scf11-freq-from-energies; Test frequencies by finite differences of energies for planar C4NH4 TS. opt5; 6-31G** UHF CH2 3B1 optimization. cc23; ROHF-EOM-CCSD/DZ analytic gradient lowes",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/autodoc_testsuite-1.html:6739,canary,canary,6739,psi4manual/4.0b2/autodoc_testsuite-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/autodoc_testsuite-1.html,4,['canary'],['canary']
Deployability,"tation if CHOLESKY_TOLERANCE is; sufficiently small (e.g. 1e-9). Gn theory¶; The FNOCC module contains all the components that comprise the Gn family; of composite methods. Currently, only the G2 method is supported; [Curtiss:1991:7221]. The G2 procedure may be called through the; energy() wrapper:; energy('gaussian-2'). Supported methods¶; The various methods supported by the FNOCC module in PSI4 are; summarized in Table FNOCC Methods; and detailed (except FNO) in Table FNOCC Capabilities. Note that these methods are implemented; for closed-shell reference only. Without set qc_module fnocc,; these methods may default to implementations in other modules. Theoretical methods accessible through FNOCC¶. name; calls method; plain; FNO. mp3; third-order MP perturbation theory; E; E. mp4(sdq); fourth-order MP perturbation theory, less triples; E; E. mp4; full fourth-order MP perturbation theory; E; E. cisd; configuration interaction singles and doubles; E; E. qcisd; quadratic configuration interaction singles doubles; E; E. qcisd(t); QCISD with perturbative triples; E; E. lccd; linear coupled cluster doubles; E; E. cepa(0), lccsd; coupled electron pair approximation, variant 0; E; E. cepa(1); coupled electron pair approximation, variant 1; E; E. cepa(3); coupled electron pair approximation, variant 3; E; E. acpf; averaged coupled-pair functional; E; E. aqcc; averaged quadratic coupled-cluster; E; E. ccsd; coupled cluster singles and doubles; E; E. ccsd(t); coupled cluster singles and doubles with perturbative triples; E; E. Detailed capabilities of the FNOCC module. “✓” runs analytically. Single underline “✓̲” is default module when QC_MODULE unspecified. Double underline “✓̳” is default algorithm type when type selector (e.g., CC_TYPE) unspecified.¶. ◻; ◻; name ↓ →; ◻; ◻. ◻; REFERENCE →; ◻; type[1] ↓ →; FREEZE_CORE[2]→. QC_MODULE=FNOCC Capabilities. Restricted (RHF); Unrestricted (UHF); ROHF. energy(); energy(); energy(). CV; DF; CD; CV; DF; CD; CV; DF; CD. A; F; A; F; A",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/fnocc.html:13238,configurat,configuration,13238,psi4manual/1.7.x/fnocc.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/fnocc.html,4,['configurat'],['configuration']
Deployability,"tation. AMCHAR¶; The upper-case character symbol for the angular momentum of the given contraction. am¶; The angular momentum of the given contraction. amchar¶; The character symbol for the angular momentum of the given contraction. function_index¶; Basis function index where this shell starts. ncartesian¶; Total number of basis functions if this shell was Cartesian. ncenter¶; Returns atom number this shell is on. nfunction¶; Total number of basis functions. nprimitive¶; The number of primitive gaussians. Methods Documentation. coef(self: psi4.core.GaussianShell, pi: int) → float¶; Return coefficient of the pi’th primitive. coord(self: psi4.core.GaussianShell, arg0: int) → float¶; Returns ith coordinate this shell is on. erd_coef(self: psi4.core.GaussianShell, pi: int) → float¶; Return ERD normalized coefficient of pi’th primitive. exp(self: psi4.core.GaussianShell, prim: int) → float¶; Returns the exponent of the given primitive. is_cartesian(self: psi4.core.GaussianShell) → bool¶; Returns true if the contraction is Cartesian. is_pure(self: psi4.core.GaussianShell) → bool¶; Returns true if the contraction is pure, i.e. a spherical harmonic basis function. original_coef(self: psi4.core.GaussianShell, pi: int) → float¶; Return unnormalized coefficient of the pi’th primitive. table of contents. GaussianShell; GaussianShell; GaussianShell.AMCHAR; GaussianShell.am; GaussianShell.amchar; GaussianShell.function_index; GaussianShell.ncartesian; GaussianShell.ncenter; GaussianShell.nfunction; GaussianShell.nprimitive; GaussianShell.coef(); GaussianShell.coord(); GaussianShell.erd_coef(); GaussianShell.exp(); GaussianShell.is_cartesian(); GaussianShell.is_pure(); GaussianShell.original_coef(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. PSI4 API: Linking C++ and Python; GaussianShell. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/api/psi4.core.GaussianShell.html:3239,update,updated,3239,psi4manual/master/api/psi4.core.GaussianShell.html,https://psicode.org,https://psicode.org/psi4manual/master/api/psi4.core.GaussianShell.html,1,['update'],['updated']
Deployability,"tations, ROA for Raman Optical Activity (ROA_TENSOR for each displacement), and ALL for all of the above. Type: string; Possible Values: POLARIZABILITY, ROTATION, ROA, ROA_TENSOR, ALL; Default: POLARIZABILITY. OMEGA¶. Array that specifies the desired frequencies of the incident radiation field in CCLR calculations. If only one element is given, the units will be assumed to be atomic units. If more than one element is given, then the units must be specified as the final element of the array. Acceptable units are HZ, NM, EV, and AU. Type: array; Default: No Default. GAUGE¶. Specifies the choice of representation of the electric dipole operator. Acceptable values are LENGTH for the usual length-gauge representation, VELOCITY for the modified velocity-gauge representation in which the static-limit optical rotation tensor is subtracted from the frequency- dependent tensor, or BOTH. Note that, for optical rotation calculations, only the choices of VELOCITY or BOTH will yield origin-independent results. Type: string; Possible Values: LENGTH, VELOCITY, BOTH; Default: LENGTH. Table Of Contents. CC: Coupled Cluster Methods; Basic Keywords; REFERENCE; R_CONVERGENCE; MAXITER; BRUECKNER_ORBS_R_CONVERGENCE; RESTART; CACHELEVEL; CACHETYPE; NUM_AMPS_PRINT; MP2_AMPS_PRINT. Larger Calculations; Excited State Coupled Cluster Calculations; ROOTS_PER_IRREP; E_CONVERGENCE; SINGLES_PRINT; SCHMIDT_ADD_RESIDUAL_TOLERANCE; EOM_GUESS. Linear Response (CCLR) Calculations; PROPERTY; OMEGA; GAUGE. Previous topic; DF-MP2: Density-Fitted Second-Order Møller-Plesset Perturbation Theory; Next topic; FNOCC: Frozen natural orbitals for CCSD(T), QCISD(T), CEPA, and MP4. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Theoretical Methods: SCF to FCI ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/cc-1.html:10907,update,updated,10907,psi4manual/1.0.0/cc-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/cc-1.html,2,['update'],['updated']
Deployability,"tconf _NPROCESSORS_ONLN`; >>> make install. How to build, test, and install Psi4, in detail¶; 1. Plan Directories. Get ahold of the PSI4 codebase, and navigate to the top level source; directory, hereafter top-level-psi4-dir. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}. >>> cd {top-level-psi4-dir}. Choose a compilation directory, hereafter objdir. How to choose the compilation directory, {objdir}. Choose an installation directory, hereafter prefix. How to install elsewhere than /usr/local/psi4. 2. Plan Configuration. Examine the strict and optional software requirements to make sure the; target computer has all the necessary dependencies installed. What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies. Prepare any necessary or desired configuration options for cmake,; hereafter [your configuration options]. How to see what build configuration options are available; Planning: how to configure Psi4 and invoke CMake. 3. Configure. Run CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates objdir ready for compilation.; >>> cmake -S. -B{objdir} -DCMAKE_INSTALL_PREFIX={prefix} [your configuration options]. 4. Compile. Compile the code (optional -j triggers parallel compilation). >>> cd {objdir}; >>> make -j`getconf _NPROCESSORS_ONLN`. 5. Test. Optionally, use CTest and Pytest to test the build. How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation. >>> ctest -j`getconf _NPROCESSORS_ONLN`. >>> make pytest. 6. Install. If tests pass, install the code.; >>> make install. 7. Configure Runtime. To run PSI4 after installation, you need to configure a few variables:. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation. What are the too",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/build_planning-1.html:2883,configurat,configuration,2883,psi4manual/1.4.0/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/build_planning-1.html,6,['configurat'],['configuration']
Deployability,"td3; bin/simple-dftd3. https://github.com/dftd3/simple-dftd3. D4. psi4::dftd4; bin/dftd4, import dftd4; preferred; works; engine=""dftd4""; https://github.com/dftd4/dftd4. conda-forge::dftd4-python; import dftd4; nyi; preferred; engine=""dftd4""; https://github.com/dftd4/dftd4. (dep) conda-forge::dftd4; bin/dftd4. https://github.com/dftd4/dftd4. GCP. psi4::gcp; bin/gcp; preferred; works; gcp_engine=""gcp""; https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp/gcp_v202.tar.gz; classic. conda-forge::gcp-correction; bin/mctc-gcp; nyi; preferred; gcp_engine=""mctc-gcp""; https://github.com/grimme-lab/gcp; mctc. Installation¶; Binary. There are two implementations of DFTD3; see Empirical dispersion correction packages . The newer; “s-dftd3” one is preferred, while the older “classic” one will work for the immediate future.; PSI4 will automatically select whichever is available.; DFTD3 is available as a conda package for Linux and macOS and Windows.; If using the Psi4conda installer, DFTD3 has already been installed alongside.; If using the PSI4 conda package, the classic dftd3 conda package can; be obtained through conda install dftd3 -c psi4 or the newer implementation; through conda install dftd3-python -c conda-forge.; If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; the dftd3 executable can be obtained through conda install dftd3 -c psi4; or conda install dftd3-python -c conda-forge.; To remove a conda installation, conda remove dftd3 or conda remove dftd3-python. Source. If using PSI4 built from source and you want to build DFTD3 from; from source also,; follow the instructions provided with the source; (essentially, download the freely available tarball, unpack the source,; edit the Makefile to select a; Fortran compiler, and run make). From version 3.1.0 onwards, DFTD3 can; be used as-is; for earlier versions, patches are available:; psi4/psi4/share/psi4/scripts/patch_grimme_dftd3.3.0.",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/dftd3.html:1682,install,installer,1682,psi4manual/1.7.x/dftd3.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/dftd3.html,4,['install'],"['installed', 'installer']"
Deployability,"te CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples:. >>> # [1] Coupled-cluster singles and doubles calculation with psi code; >>> energy('ccsd'). >>> # [2] Charge-transfer SAPT calculation with scf projection from small into; >>> # requested basis, with specified projection fitting basis; >>> set basis_guess true; >>> set df_basis_guess jun-cc-pVDZ-JKFIT; >>> energy('sapt0-ct'). >>> # [3] Arbitrary-order MPn calculation; >>> energy('mp7'). >>> # [4] Converge scf as singlet, then run detci as triplet upon singlet reference; >>> # Note that the integral transformation is not done automatically when detci is run in a separate step.; >>> molecule H2 {\n0 1\nH\nH 1 0.74\n}; >>> set basis cc-pVDZ; >>> set reference rohf; >>> scf_e, scf_wfn = energy('scf', return_wfn=True); >>> H2.set_multiplicity(3); >>> core.MintsHelper(scf_wfn.basisset()).integrals(); >>> energy('detci', ref_wfn=scf_wfn). >>> # [5] Run two CI calculations, keeping the integrals generated in the first one.; >>> molecule ne {\nNe\n}; >>> set basis cc-pVDZ; >>> cisd_e, cisd_wfn = energy('cisd', return_wfn=True); >>> energy('fci', ref_wfn=cisd_wfn). >>> # [6] Can automatically perform complete basis set extrapolations; >>> energy(""CCSD/cc-pV[DT]Z""). >>> # [7] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> energy(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Psithon Functions: Invoking a Calculation; Single-Point Energy — energy(). © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/energy.html:38244,update,updated,38244,psi4manual/1.8.x/energy.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/energy.html,1,['update'],['updated']
Deployability,"te CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples:. >>> # [1] Coupled-cluster singles and doubles calculation with psi code; >>> energy('ccsd'). >>> # [2] Charge-transfer SAPT calculation with scf projection from small into; >>> # requested basis, with specified projection fitting basis; >>> set basis_guess true; >>> set df_basis_guess jun-cc-pVDZ-JKFIT; >>> energy('sapt0-ct'). >>> # [3] Arbitrary-order MPn calculation; >>> energy('mp7'). >>> # [4] Converge scf as singlet, then run detci as triplet upon singlet reference; >>> # Note that the integral transformation is not done automatically when detci is run in a separate step.; >>> molecule H2 {\n0 1\nH\nH 1 0.74\n}; >>> set basis cc-pVDZ; >>> set reference rohf; >>> scf_e, scf_wfn = energy('scf', return_wfn=True); >>> H2.set_multiplicity(3); >>> core.MintsHelper(scf_wfn.basisset()).integrals(); >>> energy('detci', ref_wfn=scf_wfn). >>> # [5] Run two CI calculations, keeping the integrals generated in the first one.; >>> molecule ne {\nNe\n}; >>> set basis cc-pVDZ; >>> cisd_e, cisd_wfn = energy('cisd', return_wfn=True); >>> energy('fci', ref_wfn=cisd_wfn). >>> # [6] Can automatically perform complete basis set extrapolations; >>> energy(""CCSD/cc-pV[DT]Z""). >>> # [7] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> energy(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.9.1;  · . PSI4. Psithon Functions: Invoking a Calculation; Single-Point Energy — energy(). © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 08 February 2024 09:32PM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/energy.html:39574,update,updated,39574,psi4manual/1.9.x/energy.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/energy.html,1,['update'],['updated']
Deployability,"te add origin https://github.com/johndoe/psi4.git. Fork from GitHub Repository¶. Get Initially; Go to https://github.com/psi4/psi4, and hit the Fork button to store a; PSI4 repository in your GitHub account. Locally, proceed to clone:; # replace johndoe; # use https or ssh; >>> git clone https://github.com/johndoe/psi4.git; >>> cd psi4; # this is your {top-level-psi4-dir}. Set up a connection; between your forked repository and the parent repository.; >>> git remote add upstream https://github.com/psi4/psi4.git. Build directions; Get Updates; Locally, update your fork from the parent; repository and store on GitHub at your fork.; # on branch working_branch; >>> git pull --rebase upstream master; >>> git push origin working_branch. Remember: Working in the master branch of a fork is considered bad practice. Contribute Back; PSI4 contributions process here and; here.; Consider preparing your contribution in a branch; then issue a GitHub pull request. Tarball from GitHub Repository¶. Get Initially; Discouraged! From the PSI4 repository at https://github.com/psi4/psi4, hit the; “Clone or download” then “Download ZIP” button. Locally, unpack as; below.; >>> unzip psi4-master.zip; >>> cd psi4-master; # this is your {top-level-psi4-dir}. Build directions; Get Updates; Download new tarball and rebuild. Contribute Back; Not applicable as source not under git control. What is the suggested GitHub workflow¶. table of contents. Obtaining PSI4; How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}; Find-the-code Quiz; Binary Installer; Conda Binary Package; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; What is the suggested GitHub workflow. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.6;  · . PSI4. Installation and Runtime Configuration; Obtaining PSI4. © Copyright 2022, The Psi4 Project.; Last updated on Thursday, 19 May 2022 08:57PM.; Created using Sphinx 4.5.0.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/build_obtaining.html:5924,update,updated,5924,psi4manual/1.6.x/build_obtaining.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/build_obtaining.html,1,['update'],['updated']
Deployability,"te norm is smaller than this value DIIS starts. Type: double; Default: 1e-2. DMRG_SCF_GRAD_THR¶. The density RMS convergence to stop an instruction during successive DMRG instructions. Type: double; Default: 1.e-6. DMRG_SCF_MAX_ITER¶. Maximum number of DMRG iterations. Type: integer; Default: 100. DMRG_SCF_STATE_AVG¶. Whether or not to use state-averaging for roots >=2 with DMRG-SCF. Type: boolean; Default: true. DMRG_SWEEP_DVDSON_RTOL¶. The residual tolerances for the Davidson diagonalization during DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_ENERGY_CONV¶. The energy convergence to stop an instruction during successive DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_MAX_SWEEPS¶. The maximum number of sweeps to stop an instruction during successive DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_NOISE_PREFAC¶. The noise prefactors for successive DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_STATES¶. The number of reduced renormalized basis states to be retained during successive DMRG instructions. Type: array; Default: No Default. DMRG_UNITARY_WRITE¶. Whether or not to store the unitary on disk (convenient for restarting). Type: boolean; Default: true. table of contents. DMRG; General; DMRG_CASPT2_CALC; DMRG_CASPT2_IMAG; DMRG_CASPT2_IPEA; DMRG_CASPT2_ORBS; DMRG_DIIS; DMRG_DIIS_WRITE; DMRG_EXCITATION; DMRG_IRREP; DMRG_LOCAL_INIT; DMRG_MOLDEN_WRITE; DMRG_MPS_WRITE; DMRG_MULTIPLICITY; DMRG_OPDM_AO_PRINT; DMRG_PRINT_CORR; DMRG_SCF_ACTIVE_SPACE; DMRG_SCF_DIIS_THR; DMRG_SCF_GRAD_THR; DMRG_SCF_MAX_ITER; DMRG_SCF_STATE_AVG; DMRG_SWEEP_DVDSON_RTOL; DMRG_SWEEP_ENERGY_CONV; DMRG_SWEEP_MAX_SWEEPS; DMRG_SWEEP_NOISE_PREFAC; DMRG_SWEEP_STATES; DMRG_UNITARY_WRITE. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Appendices; Keywords by Module. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/autodir_options_c/module__dmrg-1.html:4339,update,updated,4339,psi4manual/1.3.2/autodir_options_c/module__dmrg-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/autodir_options_c/module__dmrg-1.html,2,['update'],['updated']
Deployability,"te required languages with psi4-core; message(STATUS ""Enabling Fortran""); endif(); endif(). Note that external projects will have their own sets of build; configuration options. Only the most-common user knobs of those are; mentioned above. How to install elsewhere than /usr/local/psi4¶; The installation directory is the filesystem location for the executable; script, the Python module, basis set data, and other administrative files.; Unless using the conda package, which is relocatable, the installation; directory must be specified with CMake variable CMAKE_INSTALL_PREFIX; before compiling. Build with Specific Install Directory; cmake -DCMAKE_INSTALL_PREFIX=/nfs/common/software/psi4. Relevant CMake Options:; CMAKE_INSTALL_PREFIX=PATH # Location to which Psi4 and internally built; # add-ons are installed (default: /usr/local/psi4). Note; It’s not guaranteed, but if, in a pinch, you need to install a; built Psi4 to a location not configured by CMAKE_INSTALL_PREFIX,; recursively copy the folders under objdir/stage/prefix to; the desired location, chown them if needed, edit the shebang in; bin/psi4 if needed, and recursively delete all the “.pyc” files. It; may just run. How to compile for debugging¶; Flags to turn optimizations off and debugging on can be set across the; project and plugins with CMake variable CMAKE_BUILD_TYPE before; compiling. Note that these flags will not propagate to any add-ons that; are detected pre-built rather than built. Build without optimization; cmake -DCMAKE_BUILD_TYPE=debug. set the CMake build type [default: release]. Relevant CMake Options:; CMAKE_BUILD_TYPE=[debug|release] # Build type (Release or Debug)"" [default: release]. How to choose the compilation directory, {objdir}¶. there is no default; common choices are objdir or build under top-level-psi4-dir. cd {top-level-psi4-dir} && cmake -S. -Bobjdir; cd {top-level-psi4-dir} && cmake -S. -Bbuild. in-source builds (*.cc and *.o in same directory) are disallowed; builds outside top-le",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/build_planning.html:23218,install,install,23218,psi4manual/1.8.x/build_planning.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/build_planning.html,1,['install'],['install']
Deployability,"te that 100000. is the value for IUPAC STP. Type: double; Default: 101325. ROTATIONAL_SYMMETRY_NUMBER¶. Rotational symmetry number for thermodynamic analysis. Default is set from the full point group (e.g., Td for methane) as opposed to the computational point group (e.g., C2v for methane). Default takes into account symmetry reduction through asymmetric isotopic substitution and is unaffected by user-set symmetry on molecule, so this option is the sole way to influence the symmetry-dependent aspects of the thermodynamic analysis. Note that this factor is handled differently among quantum chemistry software. Type: integer; Default: 1. Examples¶; A thermochemical analysis is performed after any full (not just specific; symmetry subgroups). If the wavefunction is retained, it may be reused; at a different temperature, pressure, rotational symmetry number, or; isotopic substitution through the function qcdb.vib.thermo(); as is shown in freq-isotope2.; A few summary psivars are set: “ZPVE”, “THERMAL ENERGY CORRECTION”,; “ENTHALPY CORRECTION”, “GIBBS FREE ENERGY CORRECTION”, “ZERO K; ENTHALPHY”, “THERMAL ENERGY”, “ENTHALPY”, “GIBBS FREE ENERGY”.; But additionally, every valid combination of {S, Cv, Cp, ZPE, E, H, G}; with {elec, trans, rot, vib, corr, tot} (e.g., vibrational entropy,; S_vib, and enthalpy correction, H_corr) is returned by dictionary; from the thermo function. See python/vibanalysis; (near the end) for an example. Output¶; The full list of keywords for thermo is provided in Appendix THERMO.; Information on the Psithon function that drives frequency analyses is provided; at frequency(). table of contents. Vibrational and Thermochemical Analysis; Keywords; T; P; ROTATIONAL_SYMMETRY_NUMBER. Examples; Output. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Theoretical Methods: SCF to FCI. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/thermo-1.html:3447,update,updated,3447,psi4manual/1.3.2/thermo-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/thermo-1.html,2,['update'],['updated']
Deployability,"te that these functionals are not appropriate for modeling; dispersion interactions, as they lack dispersion physics. A -D functional (Such; as the much cheaper B97-D) should be used instead. Hybrid FunctionalsMany common hybrid functionals, including the ubiquitous B3LYP. PBE0 and the; B97 series are also quite good for many thermochemical problems. LRC FunctionalsLRC functionals are a particular area of interest of the PSI4 DFT team.; LRC functionals are all denoted by a lower-case “w” in front of the standard DFA; functional, such as wPBE. We offer a stable implementation of the Gill; association function for wS and Head-Gordon’s wB97/wB97X functionals.; Additionally, we are pleased to have recently completed a heavily conditioned; implementation of the HJS exchange-hole model, which provides an analytical form; for the short-range enhancement factor for wPBE, wPBEsol, and wB88. From a; physics perspective, this implementation of wPBE is extremely useful for; theoretical investigations, as it is parameter free, and properly integrated; against the partition function in the exchange hole. We would like to thank Dr.; Scuseria for providing helpful advice and a reference implementations of the; older HSE exchange-hole model which led to the successful implementation of the; HJS model. Double-Hybrid FunctionalsDouble hybrids are percolating into PSI4. Note that these are; only available with density-fitted, not conventional, MP2 algorithms. -D FunctionalsWe have several -D2 functionals implemented. -D3 functionls are available; with the installation of Grimme’s DFTD3 program.; For now, the pure-GGA B97-D; functional of Grimme is remarkably accurate, and the hybrid B3LYP-D; functional is also quite reliable. Note: we have made a sincere effort to rigorously test all functionals; implemented in PSI4 for correctness. If you find an error in a DFT; functional or have a request for a new functional, please let us know on our; forum or GitHub page. Grid Selection¶; PSI4 use",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/dft-1.html:18110,integrat,integrated,18110,psi4manual/1.4.0/dft-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dft-1.html,9,['integrat'],['integrated']
Deployability,"te that this algorithm is not optimized for doubles-only computations. Type: boolean; Default: false. CEPA_SCALE_OS¶. Oppposite-spin scaling factor for SCS-CEPA. Type: double; Default: 1.27. CEPA_SCALE_SS¶. Same-spin scaling factor for SCS-CEPA. Type: double; Default: 1.13. CEPA_VABCD_DIRECT¶. Use integral-direct implementation of the (ac|bd) t(ij,cd) contraction? AO integrals will be generated on the fly. The CEPA iterations will be slower, but the AO->MO integral transform will be faster, and the out-of-core sort of the (AC|BD) integrals will be avoided. Type: boolean; Default: false. DIIS_MAX_VECS¶. Number of vectors to store for DIIS extrapolation. Type: integer; Default: 8. DIPMOM¶. Compute the dipole moment? Note that quadrupole moments will also be computed if PRINT >= 2. Type: boolean; Default: false. MAXITER¶. Maximum number of iterations to converge the t1 and t2 amplitudes. Type: integer; Default: 100. MP2_SCALE_OS¶. Opposite-spin scaling factor for SCS-MP2. Type: double; Default: 1.20. MP2_SCALE_SS¶. Same-spin scaling factor for SCS-MP2. Type: double; Default: 1.0/3.0. R_CONVERGENCE¶. Desired convergence for the t1 and t2 amplitudes, defined as the norm of the change in the amplitudes between iterations. Type: conv double; Default: 1.0e-7. SCS_CEPA¶. Perform SCS-CEPA? If true, note that the default values for the spin component scaling factors are optimized for the CCSD method. Type: boolean; Default: false. Table Of Contents. CEPA; General; CEPA_LEVEL; CEPA_NO_SINGLES; CEPA_SCALE_OS; CEPA_SCALE_SS; CEPA_VABCD_DIRECT; DIIS_MAX_VECS; DIPMOM; MAXITER; MP2_SCALE_OS; MP2_SCALE_SS; R_CONVERGENCE; SCS_CEPA. Previous topic; WFN; Next topic; CEPA_LEVEL; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Appendices »; Keywords by Module ». © Copyright 2012, The Psi4 Project.; Last updated on Oct 16, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/autodir_options_c/module__cepa-1.html:2401,update,updated,2401,psi4manual/4.0b3/autodir_options_c/module__cepa-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodir_options_c/module__cepa-1.html,2,['update'],['updated']
Deployability,"te “Draft a New Release” with newly minted tag; Fill in frontmatter style and links from previous GitHub release; Fill in RN from hopefully existing RN issue; Fill in RN by going through the top posts from all PRs from this milestone; “publish” release. This establishes release date for GitHub API; Close the RN issue.; Close the milestone (should be 100% complete). Publish GitHub postrelease¶. On GitHub site “Draft a New Release” for anticipated or newly minted tag; Fill in frontmatter style and links from previous GitHub release; Fill in RN as cherry-pick to or edit on branch; “publish” release. This establishes release date for GitHub API. Publish psicode release¶. Copy a recent release page like https://github.com/psi4/psicode-hugo-website/blob/master/content/posts/v1p2.md; Edit its filename, title, date, image, and links; Execute https://api.github.com/repos/psi4/psi4/releases/latest and note the id field value; Use the id value in the shortcode call at the bottom by ghRN. Finalize release¶. Make new PR with; * edits to main README.md badges, python versions, etc.; * edits to CMakeLists.txt find_package(PythonLibsNew 3.6 REQUIRED); Tweet about release. Reset psi4meta for nightly operation¶; On both Linux and Mac:. After (post)release (not prerelease), in conda_build_config.yaml, edit ltrtver to a new “release.dev” label; After postrelease, unpin any dependencies in cbcy that needed older either ver or bld (e.g., v2rdm_casscf_bld); Edit psi4ver back to '' in cbcy; Edit source/git_tag back to master for psi4-multiout, psi4-docs; Edit build string back to 0 if psi4-multiout needed multiple passes; Edit kitandkapoodle.py back to *** stack; Check in all release, construct, recipe changes on Linux and Mac. Synchronize both to GitHub psi4meta; Copy meta.yaml and build.sh files to vMmp-prefixed files for the record.; Edit crontab back to 2am “norm”. Comment out “anom”. table of contents. Release Procedures; Annual; Pre-Release (e.g., v1.3rc1); Release (e.g., v1.3); Post-",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/manage_release.html:18784,release,release,18784,psi4manual/1.8.x/manage_release.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/manage_release.html,1,['release'],['release']
Deployability,"te; Longtime Cfour users who may consider this keyword; translation a flaw rather than a feature can avoid it entirely by; confining keywords to the Cfour module along with; BASIS and PUREAM (opt, too?). Misc. Running¶; Naturally, in PSI4 multiple jobs can be run in succession from the input file.; Control optimizations with optking keywords HERE. Cfour GRD file is; written to PSI4 output file. Gradient transformed back into the frame; in which it was shipped off to Cfour is also written to the PSI4; output file and is available from input as get_gradient().; sandwich mode := molecule and cfour list within; Naturally, additional jobs can follow in the input file.; Depending on the nature of preceding or following jobs, it is prudent to; separate them with the following:; clean() # removes Psi4 scratch files; clean_variables() # empties the PSI variables list; cfour {} # empties. In this scheme, the contents of the cfour {...} block are tacked onto; the end of the ZMAT file that is otherwise written from psi style; format. It is by this route that, for example %excite* sections can at; present be specified.; The execution of xcfour can be modified by a few parameters. Setting; the option CFOUR_OMP_NUM_THREADS sets the environment variable; OMP_NUM_THREADS for only the duration of the Cfour computation.; That is, portions of an input file that run PSI4 modules are; unaffected. Additionally, there are a few arguments to the function; run_cfour() that control the Cfour scratch; directory. table of contents. Interface to CFOUR by J. Stanton & J. Gauss; Installation; Cfour for PSI4 Users; PSI4 for Cfour Users; Output; Functionality; Specification Details; Misc. Running. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to CFOUR by J. Stanton & J. Gauss. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/cfour-1.html:35881,update,updated,35881,psi4manual/1.4.0/cfour-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html,2,['update'],['updated']
Deployability,"te; Longtime Cfour users who may consider this keyword; translation a flaw rather than a feature can avoid it entirely by; confining keywords to the Cfour module along with; BASIS and PUREAM (opt, too?). Misc. Running¶; Naturally, in PSI4 multiple jobs can be run in succession from the input file.; Control optimizations with optking keywords HERE. Cfour GRD file is; written to PSI4 output file. Gradient transformed back into the frame; in which it was shipped off to Cfour is also written to the PSI4; output file and is available from input as get_gradient().; sandwich mode := molecule and cfour list within; Naturally, additional jobs can follow in the input file.; Depending on the nature of preceding or following jobs, it is prudent to; separate them with the following:; clean() # removes Psi4 scratch files; clean_variables() # empties the PSI variables list; cfour {} # empties. In this scheme, the contents of the cfour {...} block are tacked onto; the end of the ZMAT file that is otherwise written from psi style; format. It is by this route that, for example %excite* sections can at; present be specified.; The execution of xcfour can be modified by a few parameters. Setting; the option CFOUR_OMP_NUM_THREADS sets the environment variable; OMP_NUM_THREADS for only the duration of the Cfour computation.; That is, portions of an input file that run PSI4 modules are; unaffected. Additionally, there are a few arguments to the function; run_cfour() that control the Cfour scratch; directory. table of contents. Interface to CFOUR by J. Stanton & J. Gauss; Installation; Cfour for PSI4 Users; PSI4 for Cfour Users; Output; Functionality; Specification Details; Misc. Running. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to CFOUR by J. Stanton & J. Gauss. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/cfour-1.html:35881,update,updated,35881,psi4manual/1.5.0/cfour-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/cfour-1.html,2,['update'],['updated']
Deployability,"ted OptimizationResult. Type: boolean; Default: false. WRITE_OPT_RESULT¶. Write the optimization history / state to disc. Type: boolean; Default: false. WRITE_TRAJECTORY¶. Write Optimization Trajectory. Type: boolean; Default: false. table of contents. OPTKING; Optimization Algorithm; CARTESIAN_SYM_TOLERANCE; CONSECUTIVE_BACKSTEPS; DYNAMIC_LEVEL; ENSURE_BT_CONVERGENCE; EXT_FORCE_BEND; EXT_FORCE_CARTESIAN; EXT_FORCE_DIHEDRAL; EXT_FORCE_DISTANCE; EXT_FORCE_OOFP; FROZEN_BEND; FROZEN_CARTESIAN; FROZEN_DIHEDRAL; FROZEN_DISTANCE; FROZEN_OOFP; GEOM_MAXITER; H_UPDATE_DEN_TOL; INTERFRAG_STEP_LIMIT; INTRAFRAG_STEP_LIMIT; INTRAFRAG_STEP_LIMIT_MAX; INTRAFRAG_STEP_LIMIT_MIN; IRC_DIRECTION; IRC_POINTS; IRC_STEP_SIZE; OPT_COORDINATES; OPT_TYPE; PRINT_OPT_PARAMS; RANGED_BEND; RANGED_DIHEDRAL; RANGED_DISTANCE; RANGED_OOFP; RFO_FOLLOW_ROOT; RFO_NORMALIZATION_MAX; RFO_ROOT; RSRFO_ALPHA_MAX; STEP_TYPE. Convergence Control; FLEXIBLE_G_CONVERGENCE; G_CONVERGENCE; MAX_DISP_G_CONVERGENCE; MAX_ENERGY_G_CONVERGENCE; MAX_FORCE_G_CONVERGENCE; RMS_DISP_G_CONVERGENCE; RMS_FORCE_G_CONVERGENCE. Hessian Update; CART_HESS_READ; FULL_HESS_EVERY; HESS_UPDATE; HESS_UPDATE_LIMIT; HESS_UPDATE_LIMIT_MAX; HESS_UPDATE_LIMIT_SCALE; HESS_UPDATE_USE_LAST; INTRAFRAG_HESS. Fragment/Internal Coordinate Control; ADD_AUXILIARY_BONDS; AUXILIARY_BOND_FACTOR; COVALENT_CONNECT; FRAG_MODE; FRAG_REF_ATOMS; FREEZE_INTERFRAG; FREEZE_INTRAFRAG; H_BOND_CONNECT; H_GUESS_EVERY; INTCOS_GENERATE_EXIT; INTERFRAGMENT_CONNECT; INTERFRAG_COLLINEAR_TOL; INTERFRAG_COORDS; INTERFRAG_DIST_INV; INTERFRAG_HESS; INTERFRAG_MODE. Misc.; OPT_RESTART; PRINT_TRAJECTORY_XYZ_FILE; SAVE_OPTIMIZATION; TEST_B; TEST_DERIVATIVE_B; WRITE_OPT_HISTORY; WRITE_OPT_RESULT; WRITE_TRAJECTORY. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; OPTKING. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/autodir_options_c/module__optking.html:12425,update,updated,12425,psi4manual/1.8.x/autodir_options_c/module__optking.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/module__optking.html,1,['update'],['updated']
Deployability,"ted OptimizationResult. Type: boolean; Default: false. WRITE_OPT_RESULT¶. Write the optimization history / state to disc. Type: boolean; Default: false. WRITE_TRAJECTORY¶. Write Optimization Trajectory. Type: boolean; Default: false. table of contents. OPTKING; Optimization Algorithm; CARTESIAN_SYM_TOLERANCE; CONSECUTIVE_BACKSTEPS; DYNAMIC_LEVEL; ENSURE_BT_CONVERGENCE; EXT_FORCE_BEND; EXT_FORCE_CARTESIAN; EXT_FORCE_DIHEDRAL; EXT_FORCE_DISTANCE; EXT_FORCE_OOFP; FROZEN_BEND; FROZEN_CARTESIAN; FROZEN_DIHEDRAL; FROZEN_DISTANCE; FROZEN_OOFP; GEOM_MAXITER; H_UPDATE_DEN_TOL; INTERFRAG_STEP_LIMIT; INTRAFRAG_STEP_LIMIT; INTRAFRAG_STEP_LIMIT_MAX; INTRAFRAG_STEP_LIMIT_MIN; IRC_DIRECTION; IRC_POINTS; IRC_STEP_SIZE; OPT_COORDINATES; OPT_TYPE; PRINT_OPT_PARAMS; RANGED_BEND; RANGED_DIHEDRAL; RANGED_DISTANCE; RANGED_OOFP; RFO_FOLLOW_ROOT; RFO_NORMALIZATION_MAX; RFO_ROOT; RSRFO_ALPHA_MAX; STEP_TYPE. Convergence Control; FLEXIBLE_G_CONVERGENCE; G_CONVERGENCE; MAX_DISP_G_CONVERGENCE; MAX_ENERGY_G_CONVERGENCE; MAX_FORCE_G_CONVERGENCE; RMS_DISP_G_CONVERGENCE; RMS_FORCE_G_CONVERGENCE. Hessian Update; CART_HESS_READ; FULL_HESS_EVERY; HESS_UPDATE; HESS_UPDATE_LIMIT; HESS_UPDATE_LIMIT_MAX; HESS_UPDATE_LIMIT_SCALE; HESS_UPDATE_USE_LAST; INTRAFRAG_HESS. Fragment/Internal Coordinate Control; ADD_AUXILIARY_BONDS; AUXILIARY_BOND_FACTOR; COVALENT_CONNECT; FRAG_MODE; FRAG_REF_ATOMS; FREEZE_INTERFRAG; FREEZE_INTRAFRAG; H_BOND_CONNECT; H_GUESS_EVERY; INTCOS_GENERATE_EXIT; INTERFRAGMENT_CONNECT; INTERFRAG_COLLINEAR_TOL; INTERFRAG_COORDS; INTERFRAG_DIST_INV; INTERFRAG_HESS; INTERFRAG_MODE. Misc.; OPT_RESTART; PRINT_TRAJECTORY_XYZ_FILE; SAVE_OPTIMIZATION; TEST_B; TEST_DERIVATIVE_B; WRITE_OPT_HISTORY; WRITE_OPT_RESULT; WRITE_TRAJECTORY. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.9.1;  · . PSI4. Appendices; Keywords by Module; OPTKING. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 08 February 2024 09:32PM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/autodir_options_c/module__optking.html:12425,update,updated,12425,psi4manual/1.9.x/autodir_options_c/module__optking.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/autodir_options_c/module__optking.html,1,['update'],['updated']
Deployability,"ted in the; MRCC procedure.; Doubly occupied orbitals (RESTRICTED_DOCC) are doubly; occupied in each reference determinant and are correlated in the MRCC; procedure.; Active orbitals (ACTIVE) are partially occupied in each; reference determinant.; Frozen virtual orbitals (FROZEN_UOCC) are unoccupied in; all reference determinants and are excluded from the correlated wave; function. The model space is selected by considering all possible occupations; of the electrons among the orbitals in the active space that result; in determinants with the correct symmetry (WFN_SYM); and the correct \(\textrm{M}_s\) value specified by the keyword; CORR_MULTP. Note that this does not consider the multiplicity; of the wavefunction. Thus, in order to obtain the wavefunction; with a set of \(\textrm{M}_s = 0\) reference determinants for; an open-shell system you should request a CORR_MULTP of; 1 within the PSIMRCC module, and select the root of the effective; Hamiltonian that corresponds to the state of interest. In addition,; the WFN_SYM keyword needs to be specified otherwise the; wavefunction belonging to the all-symmetric irrep will be selected. In; addition, it should be noted that for an open-shell singlet based; on two \(\textrm{M}_s = 0\) determinants the eigenvector is; [\(\frac{1}{\sqrt{2}}\text{,}\frac{1}{\sqrt{2}}\)], which corresponds; to a wavefunction of the following form:. \[\frac{1}{\sqrt{2}} \left( \chi_1 \alpha (1) \chi_2 \beta (2) + \chi_2 \alpha(1) \chi_1 \beta (2) \right)\]; See Appendix PSIMRCC for a complete list of PSIMRCC options. table of contents. PSIMRCC Implementation of Mk-MRCC Theory; A Simple Example; Orbital ordering and selection of the model space. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Theoretical Methods: SCF to FCI; PSIMRCC Implementation of Mk-MRCC Theory. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/psimrcc.html:8223,update,updated,8223,psi4manual/1.8.x/psimrcc.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/psimrcc.html,1,['update'],['updated']
Deployability,"ted in the; MRCC procedure.; Doubly occupied orbitals (RESTRICTED_DOCC) are doubly; occupied in each reference determinant and are correlated in the MRCC; procedure.; Active orbitals (ACTIVE) are partially occupied in each; reference determinant.; Frozen virtual orbitals (FROZEN_UOCC) are unoccupied in; all reference determinants and are excluded from the correlated wave; function. The model space is selected by considering all possible occupations; of the electrons among the orbitals in the active space that result; in determinants with the correct symmetry (WFN_SYM); and the correct \(\textrm{M}_s\) value specified by the keyword; CORR_MULTP. Note that this does not consider the multiplicity; of the wavefunction. Thus, in order to obtain the wavefunction; with a set of \(\textrm{M}_s = 0\) reference determinants for; an open-shell system you should request a CORR_MULTP of; 1 within the PSIMRCC module, and select the root of the effective; Hamiltonian that corresponds to the state of interest. In addition,; the WFN_SYM keyword needs to be specified otherwise the; wavefunction belonging to the all-symmetric irrep will be selected. In; addition, it should be noted that for an open-shell singlet based; on two \(\textrm{M}_s = 0\) determinants the eigenvector is; [\(\frac{1}{\sqrt{2}}\text{,}\frac{1}{\sqrt{2}}\)], which corresponds; to a wavefunction of the following form:. \[\frac{1}{\sqrt{2}} \left( \chi_1 \alpha (1) \chi_2 \beta (2) + \chi_2 \alpha(1) \chi_1 \beta (2) \right)\]; See Appendix PSIMRCC for a complete list of PSIMRCC options. table of contents. PSIMRCC Implementation of Mk-MRCC Theory; A Simple Example; Orbital ordering and selection of the model space. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.9.1;  · . PSI4. Theoretical Methods: SCF to FCI; PSIMRCC Implementation of Mk-MRCC Theory. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 08 February 2024 09:32PM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/psimrcc.html:8223,update,updated,8223,psi4manual/1.9.x/psimrcc.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/psimrcc.html,1,['update'],['updated']
Deployability,"teger; Default: 1. FORCE_TWOCON¶. Do attempt to force a two configuration solution by starting with CI coefficents of \(\pm \sqrt{\frac{1}{2}}\) ?. Type: boolean; Default: false. INTERNAL_ROTATIONS¶. Do consider internal rotations?. Type: boolean; Default: true. LEVEL_SHIFT¶. Level shift to aid convergence. Type: double; Default: 0.0. MAXITER¶. Maximum number of iterations. Type: integer; Default: 100. MO_READ¶. Do read in from file the MOs from a previous computation?. Type: boolean; Default: true. REFERENCE¶. Reference wavefunction type. Type: string; Possible Values: RHF, ROHF, UHF, TWOCON, MCSCF, GENERAL; Default: RHF. SOCC¶. The number of singly occupied orbitals, per irrep. Type: array; Default: No Default. TURN_ON_ACTV¶. Type: integer; Default: 0. WFN_SYM¶. The symmetry of the SCF wavefunction. Type: string; Default: 1. Expert¶. ROTATE_MO_ANGLE¶. For orbital rotations after convergence, the angle (in degrees) by which to rotate. Type: double; Default: 0.0. ROTATE_MO_IRREP¶. For orbital rotations after convergence, irrep (1-based, Cotton order) of the orbitals to rotate. Type: integer; Default: 1. ROTATE_MO_P¶. For orbital rotations after convergence, number of the first orbital (1-based) to rotate. Type: integer; Default: 1. ROTATE_MO_Q¶. For orbital rotations after convergence, number of the second orbital (1-based) to rotate. Type: integer; Default: 2. table of contents. MCSCF; General; CANONICALIZE_ACTIVE_FAVG; CANONICALIZE_INACTIVE_FAVG; CI_DIIS; DIIS; DIIS_MAX_VECS; DOCC; D_CONVERGENCE; E_CONVERGENCE; FAVG; FAVG_START; FOLLOW_ROOT; FORCE_TWOCON; INTERNAL_ROTATIONS; LEVEL_SHIFT; MAXITER; MO_READ; REFERENCE; SOCC; TURN_ON_ACTV; WFN_SYM. Expert; ROTATE_MO_ANGLE; ROTATE_MO_IRREP; ROTATE_MO_P; ROTATE_MO_Q. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.6;  · . PSI4. Appendices; Keywords by Module; MCSCF. © Copyright 2022, The Psi4 Project.; Last updated on Thursday, 19 May 2022 08:57PM.; Created using Sphinx 4.5.0.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/autodir_options_c/module__mcscf.html:3464,update,updated,3464,psi4manual/1.6.x/autodir_options_c/module__mcscf.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/autodir_options_c/module__mcscf.html,1,['update'],['updated']
Deployability,"teger>] the color ID of surface 2 (integer, default = 23); –iso [<isovalue>] the isosurface value (float, default = 0.05); –rx [<angle>] the x-axis rotation angle (float, default = 30.0); –ry [<angle>] the y-axis rotation angle (float, default = 40.0); –rz [<angle>] the z-axis rotation angle (float, default = 15.0); –tx [<length>] the x-axis translation (float, default = 0.0); –ty [<length>] the y-axis translation (float, default = 0.0); –tz [<length>] the z-axis translation (float, default = 0.0); –opacity [<opacity>]. opacity of the isosurface (float, default = 1.0); –scale [<factor>] the scaling factor (float, default = 1.0); –no-montage call montage to combine images. (string, default =. false). --no-labels; do not add labels to images. (string, default = false). –imagesize [<integer>]; the size of each image (integer, default = 250). –imagew [<integer>] the width of images (integer, default = 250); –imageh [<integer>] the height of images (integer, default = 250); –fontsize [<integer>]. the font size (integer, default = 20). --interactive; run in interactive mode (default = false). --gzip; gzip cube files (default = false). --national_scheme.  use a red/blue color scheme. (string, default = false). --silver_scheme.  use a gray/white color scheme. (string, default =; false). --bright_scheme.  use a soft yellow/blue color scheme. (string, default; = false). --electron_scheme.  use a purple/green color scheme. (string, default =; false). table of contents. Generation of Cube Files — cubeprop(); Introduction; Cubeprop Tasks; Keywords; CUBEPROP_TASKS; CUBEPROP_FILEPATH; CUBEPROP_ORBITALS; CUBEPROP_BASIS_FUNCTIONS; CUBIC_GRID_SPACING; CUBIC_GRID_OVERAGE. Orbital Visualization with VMD; Script Prerequisites; Running the Script; Script Options. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Psithon Functions: Invoking a Calculation. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/cubeprop-1.html:9860,update,updated,9860,psi4manual/1.1.0/cubeprop-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/cubeprop-1.html,2,['update'],['updated']
Deployability,"teness check used to contruct orbital domains for local-CC calculations. See J. Broughton and P. Pulay, J. Comp. Chem. 14, 736-740 (1993) and C. Hampel and H.-J. Werner, J. Chem. Phys. 104, 6286-6297 (1996). Type: double; Default: 0.02. LOCAL_GHOST¶. Type: integer; Default: -1. LOCAL_METHOD¶. Type of local-CIS scheme to be simulated. WERNER selects the method developed by H.-J. Werner and co-workers, and AOBASIS selects the method developed by G.E. Scuseria and co-workers. Type: string; Possible Values: AOBASIS, WERNER; Default: WERNER. LOCAL_WEAKP¶. Desired treatment of “weak pairs” in the local-CIS method. A value of NEGLECT ignores weak pairs entirely. A value of NONE treats weak pairs in the same manner as strong pairs. A value of MP2 uses second-order perturbation theory to correct the local-CIS energy computed with weak pairs ignored. Type: string; Possible Values: MP2, NEGLECT, NONE; Default: MP2. MAXITER¶. Maximum number of iterations. Type: integer; Default: 500. REFERENCE¶. Reference wavefunction type. Type: string; Possible Values: RHF, ROHF, UHF; Default: RHF. ROOTS_PER_IRREP¶. The number of electronic states to computed, per irreducible representation. Type: array; Default: No Default. R_CONVERGENCE¶. Convergence criterion for CIS wavefunction. Type: conv double; Default: 1e-7. Expert¶. WFN¶. Wavefunction type. Type: string; Possible Values: CCSD, CCSD_T, EOM_CCSD, CIS; Default: CIS. Table Of Contents. CIS; General; DIAG_METHOD; DOMAINS; DOMAIN_PRINT; LOCAL; LOCAL_AMPS_PRINT_CUTOFF; LOCAL_CUTOFF; LOCAL_GHOST; LOCAL_METHOD; LOCAL_WEAKP; MAXITER; REFERENCE; ROOTS_PER_IRREP; R_CONVERGENCE. Expert; WFN. Previous topic; WFN; Next topic; DIAG_METHOD; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; Keywords by Module ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 25, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/autodir_options_c/module__cis-1.html:2715,update,updated,2715,psi4manual/4.0b4/autodir_options_c/module__cis-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodir_options_c/module__cis-1.html,2,['update'],['updated']
Deployability,"tential (\(V\)), coupling matrix ( \(X\)) and renormalization matrix ( \(R\)). \[T_{\rm X2C} = R^{\dagger} (TX + {X}^{\dagger}T - {X}^{\dagger}TX ) R\]. \[V_{\rm X2C} = R^{\dagger}(V + \frac{1}{4c^2} X^{\dagger}W^{\text{SF}}X) R\]; The coupling matrix ( \({X} = C^{S} (C^{L})^{-1}\) ) is obtained from the large (\(C^{\rm L}\)) and small (\(C^{\rm S}\)) components of the \(N\) positive energy solutions of the Dirac equation.; The renormalization matrix; \({R}=S^{-1/2}(S^{-1/2}\tilde{S}S^{-1/2})^{-1/2}S^{1/2}\),; depends on the modified overlap matrix; \(\tilde{S}=S+\frac{1}{2c^2}X^{\dagger}TX\). The integrals \(W^{\rm SF}_{\mu\nu} = \langle {\chi_\mu} | \hat{p}\cdot (\hat{V}\hat{p}) |{\chi_\nu}\rangle\) can be easily computed as derivatives of the nuclear-electron attraction integrals with respect to nuclear coordinates.; Existing nonrelativistic electronic structure code can be extended to include scalar relativistic effects; treated with the X2C method by replacing nonrelativistic kinetic and potential energy with the corresponding; X2C operators \(T_{X2C}\) and \(V_{X2C}\). It is important to note that fully uncontracted basis in needed for the construction of X2C Hamiltonian as Foldy-Wouthuysen (FW [FW:1950]) transformation is obtained in kinetically balance basis. Keywords¶. RELATIVISTIC¶. Relativistic Hamiltonian type. Type: string; Possible Values: NO, X2C; Default: NO. BASIS_RELATIVISTIC¶. Auxiliary basis set for solving Dirac equation in X2C and DKH calculations. Defaults to decontracted orbital basis. Type: string; Default: No Default. table of contents. Scalar relativistic Hamiltonians; A First Example; Basis sets options; Theory; Keywords; RELATIVISTIC; BASIS_RELATIVISTIC. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Theoretical Methods: SCF to FCI; Scalar relativistic Hamiltonians. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/relativistic-1.html:5785,update,updated,5785,psi4manual/1.4.0/relativistic-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/relativistic-1.html,2,['update'],['updated']
Deployability,"tential (\(V\)), coupling matrix ( \(X\)) and renormalization matrix ( \(R\)). \[T_{\rm X2C} = R^{\dagger} (TX + {X}^{\dagger}T - {X}^{\dagger}TX ) R\]. \[V_{\rm X2C} = R^{\dagger}(V + \frac{1}{4c^2} X^{\dagger}W^{\text{SF}}X) R\]; The coupling matrix ( \({X} = C^{S} (C^{L})^{-1}\) ) is obtained from the large (\(C^{\rm L}\)) and small (\(C^{\rm S}\)) components of the \(N\) positive energy solutions of the Dirac equation.; The renormalization matrix; \({R}=S^{-1/2}(S^{-1/2}\tilde{S}S^{-1/2})^{-1/2}S^{1/2}\),; depends on the modified overlap matrix; \(\tilde{S}=S+\frac{1}{2c^2}X^{\dagger}TX\). The integrals \(W^{\rm SF}_{\mu\nu} = \langle {\chi_\mu} | \hat{p}\cdot (\hat{V}\hat{p}) |{\chi_\nu}\rangle\) can be easily computed as derivatives of the nuclear-electron attraction integrals with respect to nuclear coordinates.; Existing nonrelativistic electronic structure code can be extended to include scalar relativistic effects; treated with the X2C method by replacing nonrelativistic kinetic and potential energy with the corresponding; X2C operators \(T_{X2C}\) and \(V_{X2C}\). It is important to note that fully uncontracted basis in needed for the construction of X2C Hamiltonian as Foldy-Wouthuysen (FW [FW:1950]) transformation is obtained in kinetically balance basis. Keywords¶. RELATIVISTIC¶. Relativistic Hamiltonian type. Type: string; Possible Values: NO, X2C; Default: NO. BASIS_RELATIVISTIC¶. Auxiliary basis set for solving Dirac equation in X2C and DKH calculations. Defaults to decontracted orbital basis. Type: string; Default: No Default. table of contents. Scalar relativistic Hamiltonians; A First Example; Basis sets options; Theory; Keywords; RELATIVISTIC; BASIS_RELATIVISTIC. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Theoretical Methods: SCF to FCI; Scalar relativistic Hamiltonians. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/relativistic-1.html:5785,update,updated,5785,psi4manual/1.5.0/relativistic-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/relativistic-1.html,2,['update'],['updated']
Deployability,"teps instead of RFO steps:; 1; 2set step_type nr; optimize('scf'). Optimize using energy points instead of gradients:; 1optimize('scf', dertype='energy'). Optimize while limiting the initial step size to 0.1 au:; 1; 2set intrafrag_step_limit 0.1; optimize('scf'). Optimize while always limiting the step size to 0.1 au:; 1; 2; 3; 4; 5; 6; 7set {; intrafrag_step_limit 0.1; intrafrag_step_limit_min 0.1; intrafrag_step_limit_max 0.1; }. optimize('scf'). Optimize while calculating the Hessian at every step:; 1; 2set full_hess_every 1; optimize('scf'). Hessian¶; If Cartesian second derivatives are available, optking can read them; and transform them into internal coordinates to make an initial Hessian in; internal coordinates. Otherwise, several empirical Hessians are available,; including those of Schlegel [Schlegel:1984:333] and Fischer and Almlof; [Fischer:1992:9770].; Either of these or a simple diagonal Hessian may be selected using the; INTRAFRAG_HESS keyword.; All the common Hessian update schemes are available. For formulas, see; Schlegel [Schlegel:1987:AIMQC] and Bofill [Bofill:1994:1].; The Hessian may be computed during an optimization using the; FULL_HESS_EVERY keyword. Transition States, Reaction Paths, and Constrained Optimizations¶. Calculate a starting Hessian and optimize the “transition state” of; linear water (note that without a reasonable starting geometry and; Hessian, such a straightforward search often fails):; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13molecule h2o {; O; H 1 1.0; H 1 1.0 2 160.0; }. set {; basis dz; full_hess_every 0; opt_type ts; }. optimize('scf'). At a transition state (planar HOOH), compute the second derivative, and; then follow the intrinsic reaction path to the minimum:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16molecule hooh {; symmetry c1; H; O 1 0.946347; O 2 1.397780 1 107.243777; H 3 0.946347 2 107.243777 1 0.0; }. set {; basis dzp; opt_type irc; geom_maxiter 50; }. frequencies('scf'); optimize('scf'). Optimize",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/optking-1.html:5291,update,update,5291,psi4manual/1.1.0/optking-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/optking-1.html,6,['update'],['update']
Deployability,"ter installation, you need to configure a few variables:. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation. What are the tools and dependencies strictly required for building Psi4¶; The core PSI4 build requires the software below. Note that; practically everything (including Python, CMake, NumPy, BLAS/LAPACK,; Libint, and even C++ compilers on Linux) can be; satisfied through conda. The links below give examples of how to configure; that software for PSI4 and any notes and warnings pertaining to it. C++ and C Compilers (C++11 compliant); Optimized BLAS and LAPACK libraries (preferably NOT one supplied by a standard; Linux distribution); Python interpreter and headers (2.7, 3.5, or 3.6) https://www.python.org/; CMake (3.3+) http://www.cmake.org/download/; NumPy (needed at runtime and buildtime) http://www.numpy.org/; mpmath (only needed if you build gau2grid to angular momentum >16) http://mpmath.org/; System utilities: GNU make, GNU install, POSIX threads (Pthreads) library. The following are also required for PSI4, but if not detected, the; build system will automatically download and build. gau2grid <cmake:gau2grid — [what is this?] [min version]; Libint — [what is this?] [min version]; Libxc — [what is this?] [min version]; pybind11 — [what is this?] [min version]. Additionally, there are runtime-only dependencies:. NumPy http://www.numpy.org/; networkx https://github.com/networkx/networkx; deepdiff https://github.com/seperman/deepdiff. What are the add-on capabilities for Psi4 and what are their dependencies¶; Each of the items below is an independent additional capability that can; be built with PSI4. Sub-items below are the respective additional; dependencies of the add-on. Select which, if any, you want, and examine; the links for appropriate enabling arguments to cmake. Note that many; are available pre-built from conda. PSI4 Testing; CTest http://www.cmake.org/download/; Perl (for some coupled-cluster CTest",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/build_planning-1.html:4329,install,install,4329,psi4manual/1.2.1/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html,2,['install'],['install']
Deployability,"ter method). (psi4.core.MOWriter method). write_molden() (psi4.core.Wavefunction method). write_nbo() (psi4.core.Wavefunction method). WRITE_NOS (CCDENSITY). WRITE_OPT_HISTORY (OPTKING). WRITE_OPT_RESULT (OPTKING). write_scratch_file() (psi4.core.IOManager method). WRITE_TRAJECTORY (OPTKING). WRITER_FILE_LABEL (GLOBALS). X. x() (psi4.core.BlockOPoints method). (psi4.core.Molecule method). x_alpha() (psi4.core.SuperFunctional method). x_beta() (psi4.core.SuperFunctional method). x_functional() (psi4.core.SuperFunctional method). x_functionals() (psi4.core.SuperFunctional method). x_omega() (psi4.core.SuperFunctional method). XC_build() (psi4.core.SuperFunctional static method). xclib_description() (psi4.core.LibXCFunctional method). (psi4.core.SuperFunctional method). XI (CCDENSITY). XI_CONNECT (CCDENSITY). xtpl_highest_1() (in module psi4.driver.driver_cbs_helper). xyz (psi4.core.SalcComponent attribute). xyz() (psi4.core.Molecule method). Y. y() (psi4.core.BlockOPoints method). (psi4.core.Molecule method). Z. z() (psi4.core.BlockOPoints method). Z() (psi4.core.Molecule method). z() (psi4.core.Molecule method). ZAPTn CORRELATION ENERGY. ZAPTn TOTAL ENERGY. ZERO K ENTHALPY. zero() (psi4.core.CIVector method). (psi4.core.Dimension method). (psi4.core.dpdbuf4 method). (psi4.core.dpdfile2 method). (psi4.core.IntVector method). (psi4.core.Matrix method). (psi4.core.SymmetryOperation method). (psi4.core.Vector method). zero_ao_basis_set() (psi4.core.BasisSet static method). zero_diagonal() (psi4.core.Matrix method). ZERO_INTERNAL_AMPS (PSIMRCC). zero_lower() (psi4.core.Matrix method). zero_redundant() (psi4.core.SOMCSCF method). zero_upper() (psi4.core.Matrix method). ZETA (CCDENSITY). (CCLAMBDA). zoom (psi4.driver.p4util.InPsight attribute). ZPVE. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .  · ; 1.9.1;  · . PSI4. Index. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 08 February 2024 09:32PM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/genindex.html:133376,update,updated,133376,psi4manual/1.9.x/genindex.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/genindex.html,1,['update'],['updated']
Deployability,"ter to locate libraries, header; files, and executables needed for compilation. So it’s very possible that; from top-level-psi4-dir source directory, you can call cmake -S.; -Bobjdir without any further arguments, and it will invoke cmake,; detect some appropriate defaults, configure the build, create a build; directory objdir, and complete, leaving you to only invoke; make or Ninja in the new build directory.; Should this happy scenario not come to pass, or if the default build; options are not to your taste, use the links within core; dependencies and add-on dependencies to plan a set of arguments to cmake tailored to; your computer. Proceed to quick build or; detailed build. How to build and install Psi4, the compact version¶; This section outlines the main steps of configuring, compiling, and; installing PSI4. More detail is given here.; >>> cd {top-level-psi4-dir}; >>> cmake -S. -Bobjdir [your configuration options]; # make; >>> cd objdir; >>> make -j`getconf _NPROCESSORS_ONLN`; >>> make install; # -or- general; >>> cmake --build objdir --target install -j`getconf _NPROCESSORS_ONLN`. How to build, test, and install Psi4, in detail¶; 1. Plan Directories. Get ahold of the PSI4 codebase, and navigate to the top level source; directory, hereafter top-level-psi4-dir. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}. >>> cd {top-level-psi4-dir}. Choose a compilation directory, hereafter objdir. How to choose the compilation directory, {objdir}. Choose an installation directory, hereafter prefix. How to install elsewhere than /usr/local/psi4. 2. Plan Configuration. Examine the strict and optional software requirements to make sure the; target computer has all the necessary dependencies installed. What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies. Prepare any necessary or desired configuration options for cmake,; hereafter [your configuration op",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/build_planning.html:2223,configurat,configuration,2223,psi4manual/1.8.x/build_planning.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/build_planning.html,9,"['configurat', 'install']","['configuration', 'install']"
Deployability,"ter you want to use. This defaults to the; python in your path. For example, if you want to use; python2.6 located in /usr/bin set the environmental variable to be:; PYTHON=/usr/bin/python2.6. Note; If the variable PYTHON is set, the config program must be; present with a similar name. For instance, in the above example; the following must exist:; /usr/bin/python2.6-config. You either set the environmental variable before you call configure, or; tell configure about it:; ../configure PYTHON=/usr/bin/python2.6. Boost Libraries; PSI4 can use a user-provided boost C++ library, or, alternatively,; build the boost version 1.48.0 that comes bundled with the distribution.; By default, PSI4 will look in your include/library paths for; a compatible and complete boost installation (boost 1.46 or newer). A; boost installation in a nonstandard location can be specified by the; --with-boost=PATH and --with-boost-libdir=PATH configure flags. If a; default or user-specified boost installation is found to be incomplete,; incompatible, or nonexistent, boost 1.48.0 will be unpacked automatically; and built as part of the PSI4 build process.; Required Compiled Boost Modules (all Boost 1.46.0 or later):. Filesystem; Python; Regex; Serialization; System; Thread. Relevant Configure Options:. --with-boost[=value] — Use Boost library from a standard location; if yes (default), from the specified location if <path>, or disable; it if no. --with-boost-libdir=directory —; Force given directory for boost libraries. Note that this will override; library path detection, so use this parameter only if default library; detection fails and you know exactly where your boost libraries are; located. --with-boost-filesystem[=special-lib] —; Use the Filesystem library from boost. It is possible to specify a; certain library for the linker e.g.,; --with-boost-filesystem=boost_filesystem-gcc-mt. --with-boost-python — Specify the boost python library or suffix to use. --with-boost-regex[=special-lib] —; Use",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/installfile.html:15192,install,installation,15192,psi4manual/4.0b3/installfile.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/installfile.html,2,['install'],['installation']
Deployability,"ter you want to use. This defaults to the; python in your path. For example, if you want to use; python2.6 located in /usr/bin set the environmental variable to be:; PYTHON=/usr/bin/python2.6. Note; If the variable PYTHON is set, the config program must be; present with a similar name. For instance, in the above example; the following must exist:; /usr/bin/python2.6-config. You either set the environmental variable before you call configure, or; tell configure about it:; ../configure PYTHON=/usr/bin/python2.6. Boost Libraries; PSI4 can use a user-provided boost C++ library, or, alternatively,; build the boost version 1.53.0 that comes bundled with the distribution.; By default, PSI4 will look in your include/library paths for; a compatible and complete boost installation (boost 1.46 or newer). A; boost installation in a nonstandard location can be specified by the; --with-boost=PATH and --with-boost-libdir=PATH configure flags. If a; default or user-specified boost installation is found to be incomplete,; incompatible, or nonexistent, boost 1.53.0 will be unpacked automatically; and built as part of the PSI4 build process.; Required Compiled Boost Modules (all Boost 1.46.0 or later):. Filesystem; Python; Regex; Serialization; System; Thread. Relevant Configure Options:. --with-boost[=value] — Use Boost library from a standard location; if yes (default), from the specified location if <path>, or disable; it if no. --with-boost-libdir=directory —; Force given directory for boost libraries. Note that this will override; library path detection, so use this parameter only if default library; detection fails and you know exactly where your boost libraries are; located. --with-boost-filesystem[=special-lib] —; Use the Filesystem library from boost. It is possible to specify a; certain library for the linker e.g.,; --with-boost-filesystem=boost_filesystem-gcc-mt. --with-boost-python — Specify the boost python library or suffix to use. --with-boost-regex[=special-lib] —; Use",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/installfile.html:14958,install,installation,14958,psi4manual/4.0b5/installfile.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/installfile.html,1,['install'],['installation']
Deployability,"ter. Type: double; Default: 0.4. REMP_A¶. mixing parameter for the REMP hybrid perturbation theory, A specifies the Moller-Plesset fraction. Type: double; Default: 0.15e0. RMS_MOGRAD_CONVERGENCE¶. Convergence criterion for RMS orbital gradient. If this keyword is not set by the user, DFOCC will estimate and use a value required to achieve the desired E_CONVERGENCE The listed default will be used for the default value of E_CONVERGENCE. Type: conv double; Default: 1e-4. R_CONVERGENCE¶. Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-5. SCS_TYPE¶. Type of the SCS method. Type: string; Possible Values: SCS, SCSN, SCSVDW, SCSMI; Default: SCS. SOS_TYPE¶. Type of the SOS method. Type: string; Possible Values: SOS, SOSPI; Default: SOS. TRIPLES_IABC_TYPE¶. The algorithm to handle (ia|bc) type integrals that used for (T) correction. Type: string; Possible Values: INCORE, AUTO, DIRECT, DISK; Default: DISK. WFN_TYPE¶. Type of the wavefunction. Type: string; Default: DF-OMP2. table of contents. DFOCC; General; CC_DIIS_MAX_VECS; CC_DIIS_MIN_VECS; CC_LAMBDA; CC_MAXITER; CHOLESKY; CHOLESKY_TOLERANCE; COMPUT_S2; CUTOFF; DO_DIIS; DO_LEVEL_SHIFT; DO_SCS; DO_SOS; E3_SCALE; EKT_IP; E_CONVERGENCE; HESS_TYPE; INTEGRAL_CUTOFF; LEVEL_SHIFT; LINEQ_SOLVER; MAX_MOGRAD_CONVERGENCE; MOLDEN_WRITE; MO_DIIS_NUM_VECS; MO_MAXITER; MO_STEP_MAX; MP2_AMP_TYPE; MP2_OS_SCALE; MP2_SOS_SCALE; MP2_SOS_SCALE2; MP2_SS_SCALE; NAT_ORBS; OCC_ORBS_PRINT; OEPROP; OO_SCALE; OPT_METHOD; ORB_OPT; ORB_RESP_SOLVER; ORTH_TYPE; PCG_BETA_TYPE; PCG_CONVERGENCE; PCG_MAXITER; PPL_TYPE; QCHF; READ_SCF_3INDEX; REGULARIZATION; REG_PARAM; REMP_A; RMS_MOGRAD_CONVERGENCE; R_CONVERGENCE; SCS_TYPE; SOS_TYPE; TRIPLES_IABC_TYPE; WFN_TYPE. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; DFOCC. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/autodir_options_c/module__dfocc.html:7933,update,updated,7933,psi4manual/1.8.x/autodir_options_c/module__dfocc.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/module__dfocc.html,1,['update'],['updated']
Deployability,"ter. Type: double; Default: 0.4. REMP_A¶. mixing parameter for the REMP hybrid perturbation theory, A specifies the Moller-Plesset fraction. Type: double; Default: 0.15e0. RMS_MOGRAD_CONVERGENCE¶. Convergence criterion for RMS orbital gradient. If this keyword is not set by the user, DFOCC will estimate and use a value required to achieve the desired E_CONVERGENCE The listed default will be used for the default value of E_CONVERGENCE. Type: conv double; Default: 1e-4. R_CONVERGENCE¶. Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-5. SCS_TYPE¶. Type of the SCS method. Type: string; Possible Values: SCS, SCSN, SCSVDW, SCSMI; Default: SCS. SOS_TYPE¶. Type of the SOS method. Type: string; Possible Values: SOS, SOSPI; Default: SOS. TRIPLES_IABC_TYPE¶. The algorithm to handle (ia|bc) type integrals that used for (T) correction. Type: string; Possible Values: INCORE, AUTO, DIRECT, DISK; Default: DISK. WFN_TYPE¶. Type of the wavefunction. Type: string; Default: DF-OMP2. table of contents. DFOCC; General; CC_DIIS_MAX_VECS; CC_DIIS_MIN_VECS; CC_LAMBDA; CC_MAXITER; CHOLESKY; CHOLESKY_TOLERANCE; COMPUT_S2; CUTOFF; DO_DIIS; DO_LEVEL_SHIFT; DO_SCS; DO_SOS; E3_SCALE; EKT_IP; E_CONVERGENCE; HESS_TYPE; INTEGRAL_CUTOFF; LEVEL_SHIFT; LINEQ_SOLVER; MAX_MOGRAD_CONVERGENCE; MOLDEN_WRITE; MO_DIIS_NUM_VECS; MO_MAXITER; MO_STEP_MAX; MP2_AMP_TYPE; MP2_OS_SCALE; MP2_SOS_SCALE; MP2_SOS_SCALE2; MP2_SS_SCALE; NAT_ORBS; OCC_ORBS_PRINT; OEPROP; OO_SCALE; OPT_METHOD; ORB_OPT; ORB_RESP_SOLVER; ORTH_TYPE; PCG_BETA_TYPE; PCG_CONVERGENCE; PCG_MAXITER; PPL_TYPE; QCHF; READ_SCF_3INDEX; REGULARIZATION; REG_PARAM; REMP_A; RMS_MOGRAD_CONVERGENCE; R_CONVERGENCE; SCS_TYPE; SOS_TYPE; TRIPLES_IABC_TYPE; WFN_TYPE. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.9.1;  · . PSI4. Appendices; Keywords by Module; DFOCC. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 08 February 2024 09:32PM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/autodir_options_c/module__dfocc.html:7933,update,updated,7933,psi4manual/1.9.x/autodir_options_c/module__dfocc.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/autodir_options_c/module__dfocc.html,1,['update'],['updated']
Deployability,"terations. Type: integer; Default: 100. DMRG_SCF_STATE_AVG¶. Whether or not to use state-averaging for roots >=2 with DMRG-SCF. Type: boolean; Default: true. DMRG_SWEEP_DVDSON_RTOL¶. The residual tolerances for the Davidson diagonalization during DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_ENERGY_CONV¶. The energy convergence to stop an instruction during successive DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_MAX_SWEEPS¶. The maximum number of sweeps to stop an instruction during successive DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_NOISE_PREFAC¶. The noiseprefactors for successive DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_STATES¶. The number of reduced renormalized basis states to be retained during successive DMRG instructions. Type: array; Default: No Default. DMRG_UNITARY_WRITE¶. Whether or not to store the unitary on disk (convenient for restarting). Type: boolean; Default: true. Table Of Contents. Interface to CheMPS2 by S. Wouters; Installation; Methods; DMRG Keywords; DMRG_CASPT2_CALC; DMRG_CASPT2_IMAG; DMRG_CASPT2_IPEA; DMRG_CASPT2_ORBS; DMRG_DIIS; DMRG_DIIS_WRITE; DMRG_EXCITATION; DMRG_IRREP; DMRG_LOCAL_INIT; DMRG_MOLDEN_WRITE; DMRG_MPS_WRITE; DMRG_MULTIPLICITY; DMRG_OPDM_AO_PRINT; DMRG_PRINT_CORR; DMRG_SCF_ACTIVE_SPACE; DMRG_SCF_DIIS_THR; DMRG_SCF_GRAD_THR; DMRG_SCF_MAX_ITER; DMRG_SCF_STATE_AVG; DMRG_SWEEP_DVDSON_RTOL; DMRG_SWEEP_ENERGY_CONV; DMRG_SWEEP_MAX_SWEEPS; DMRG_SWEEP_NOISE_PREFAC; DMRG_SWEEP_STATES; DMRG_UNITARY_WRITE. Previous topic; Interface to CFOUR by J. Stanton and J. Gauss; Next topic; Interface to DFTD3 by S. Grimme. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Interfaces: Enhancing Psi4 Capabilities ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/chemps2-1.html:6468,update,updated,6468,psi4manual/1.0.0/chemps2-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/chemps2-1.html,2,['update'],['updated']
Deployability,"terative subspace that will; be stored before a collapse is done.; maxiter (int) – The maximum number of iterations; verbose (int) – The amount of logging info to print (0 -> none, 1 -> some, 2 -> all but matrices, >2 -> everything). Returns:. best_values (numpy.ndarray) – (nroots, ) The best approximation of the eigenvalues of w, computed on the last iteration of the solver; best_R (List[vector]) – (nroots) The best approximation of the right hand eigenvectors, \(X+Y\), computed on the last iteration of the solver.; best_L (List[vector]) – (nroots) The best approximation of the left hand eigenvectors, \(X-Y\), computed on the last iteration of the solver.; stats (List[Dict]) – Statistics collected on each iteration. count : int, iteration number; res_norm : np.ndarray (nroots, ), the norm of residual vector for each roots; val : np.ndarray (nroots, ), the eigenvalue corresponding to each root; delta_val : np.ndarray (nroots, ), the change in eigenvalue from the last iteration to this ones; collapse : bool, if a subspace collapse was performed; product_count : int, the running total of product evaluations that was performed; done : bool, if all roots were converged. Notes; The solution vector is normalized to 1/2; The solver will return even when maxiter iterations are performed without convergence.; The caller must check stats[-1]['done'] for failure and handle each case accordingly.; References; R. Eric Stratmann, G. E. Scuseria, and M. J. Frisch, “An efficient; implementation of time-dependent density-functional theory for the; calculation of excitation energies of large molecules.” J. Chem. Phys.,; 109, 8218 (1998). table of contents. hamiltonian_solver; hamiltonian_solver(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. PSI4 API: Linking C++ and Python; hamiltonian_solver. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/api/psi4.driver.p4util.hamiltonian_solver.html:3867,update,updated,3867,psi4manual/master/api/psi4.driver.p4util.hamiltonian_solver.html,https://psicode.org,https://psicode.org/psi4manual/master/api/psi4.driver.p4util.hamiltonian_solver.html,1,['update'],['updated']
Deployability,"terface to ddx by A. Mikhalev, A. Jha, M. Nottoli and M. F. Herbst. Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to ddx by A. Mikhalev, A. Jha, M. Nottoli and M. F. Herbst. Interface to ddx by A. Mikhalev, A. Jha, M. Nottoli and M. F. Herbst¶; Code author: Michael F. Herbst; Section author: Michael F. Herbst; Module: Keywords, PSI Variables. PSI4 contains code to interface to the ddx FORTRAN library developed; by A. Mikhalev et. al.. The library provides a linear-scaling implementation; of standard continuum solvation models using a domain-decomposition ansatz; [Cances:2013:054111] [Stamm:2016:054101].; Currently the conductor-like screening model (COSMO) [Klamt:1993:799] [Lipparini:2014:184108],; the polarisable continuum model (PCM) [Tomasi:2005:2999] [Nottoli:2019:6061]; and the linearized poisson-boltzmann model (LPB) [Lu:2008:973] [Jha:2023:104105] are supported.; No additional licence or configuration is required to use ddx with Psi4. Installation¶; Binary. ddx is available for Linux and macOS in form of the pyddx package; on conda-forge and on pypi.; To install from conda run conda install pyddx -c conda-forge.; To remove a conda installation, conda remove pyddx. Source. If using PSI4 built from source and you want ddx installed as well,; enable it as a feature with ENABLE_ddx,; and let the build system fetch and install it. Using dd-based continum solvation models¶; In PSI4 two option to enable continuum solvation models; are currently implemented using either the PCMSolver or ddx package.; PCMSolver is based on a boundary-element discretisation [Cances:1998:309],; while ddx is based on a domain decomposition approach; [Cances:2013:054111] making it linear scaling.; For more details about PCMSolver see the section on PCMsolver.; For a concise introduction to the; theory behind ddx; or further literature references; see the ddx documentation.; The usage of ddx-based solvation m",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/ddx.html:995,configurat,configuration,995,psi4manual/master/ddx.html,https://psicode.org,https://psicode.org/psi4manual/master/ddx.html,1,['configurat'],['configuration']
Deployability,"term. Type: conv double; Default: 1e-8. D_CONVERGENCE (MCSCF); MCSCF — Convergence criterion for density. Type: conv double; Default: 1e-6. D_CONVERGENCE (SAPT); SAPT — Convergence criterion for residual of the CPHF coefficients in the SAPT term. Type: conv double; Default: 1e-8. D_CONVERGENCE (SCF); SCF — Convergence criterion for SCF density, which is defined as the RMS value of the orbital gradient. See Table SCF Convergence & Algorithm for default convergence criteria for different calculation types. Cfour Interface: Keyword translates into CFOUR_SCF_CONV. Type: conv double; Default: 1e-6. DAMPING_CONVERGENCE (SCF); SCF — The density convergence threshold after which damping is no longer performed, if it is enabled. It is recommended to leave damping on until convergence, which is the default. Cfour Interface: Keyword translates into CFOUR_SCF_DAMPING. Type: conv double; Default: 1.0e-18. DAMPING_PERCENTAGE (DCFT); DCFT (Expert) — The amount (percentage) of damping to apply to the orbital update procedure: 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the previous iteration’s density being mixed into the current iteration) can help in cases where oscillatory convergence is observed. Type: double; Default: 0.0. DAMPING_PERCENTAGE (PSIMRCC); PSIMRCC — The amount (percentage) of damping to apply to the amplitude updates. 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the amplitudes from the previous iteration being mixed into the current iteration) can help in cases where oscillatory convergence is observed. Type: double; Default: 0.0. DAMPING_PERCENTAGE (SCF); SCF — The amount (percentage) of damping to apply to the early density updates. 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the previous iteration’s density being mixed into the current density) co",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:92492,update,update,92492,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html,6,['update'],['update']
Deployability,"terminal session. You can keep or undo these changes. For general psi4 use, you must enable the psi4 executable to be found through any of:. prepending to PATH in shell, ~/.bashrc, ~/.tcshrc, or PBS cmd file; activating the conda environment (p4env above) in shell, ~/.bashrc, or PBS cmd file; supplying full path to executable (shell or PBS cmd file). Similarly, the scratch directory (see Scratch Files and Elementary Restart) must be specified through:. defining PSI_SCRATCH in shell, ~/.bashrc, ~/.tcshrc, or PBS cmd file. Suitable values for these variables have been printed to screen during installation (see last codeblock in step 6). Useful Commands¶. Initially install PSI4 stable release. # equivalent; >>> conda install psi4 -c psi4; >>> conda install psi4 –channel psi4. Initially install PSI4 stable release with non-current python. >>> conda install psi4 python=3.6 -c psi4. Update to latest PSI4 stable release. >>> conda update psi4 -c psi4. Initially install stable release into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=0.1.12 -c psi4. Uninstall PSI4 from current environment. >>> conda remove psi4. Initially install PSI4 nightly build. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4 –channel psi4/label/dev. Initially install PSI4 nightly build with non-current python. >>> conda install psi4 python=3.6 -c psi4/label/dev. Update to latest PSI4 nightly build. >>> conda update psi4 -c psi4/label/dev. Initially install nightly build into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4/label/dev; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=0.1.12 -c psi4/label/dev. Troubleshooting¶. If the target ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/conda-1.html:20931,install,install,20931,psi4manual/1.3.2/conda-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/conda-1.html,4,"['install', 'release']","['install', 'release']"
Deployability,"terms If AO_BASIS is NONE, the MO-basis integrals will be used; if AO_BASIS is DISK, the AO-basis integrals stored on disk will be used; if AO_BASIS is DIRECT, the AO-basis integrals will be computed on the fly as necessary. NB: The DIRECT option is not fully implemented and should only be used by experts. Default is NONE. Note: The developers recommend use of this keyword only as a last resort because it significantly slows the calculation. The current algorithms for handling the MO-basis four-virtual-index integrals have been significantly improved and are preferable to the AO-based approach. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. FORCE_RESTART¶. Do restart the coupled-cluster iterations even if MO phases are screwed up?. Type: boolean; Default: false. WFN¶. Wavefunction type. Type: string; Default: LMP2. Table Of Contents. CCENERGY; General; ABCD; ANALYZE; BRUECKNER_ORBS_R_CONVERGENCE; CACHELEVEL; CACHETYPE; CC_NUM_THREADS; CC_OS_SCALE; CC_SS_SCALE; DF_BASIS_MP2; DF_LMP2; DIAG_METHOD; DIIS; DIIS_MAX_VECS; DIIS_START_ITER; DISTANT_PAIR_CUTOFF; DOMAINS; DOMAIN_PRINT; DOMAIN_PRINT_EXIT; E_CONVERGENCE; FOCK_TOLERANCE; INTS_TOLERANCE; LOCAL; LOCAL_AMPS_PRINT_CUTOFF; LOCAL_CPHF_CUTOFF; LOCAL_CUTOFF; LOCAL_GHOST; LOCAL_METHOD; LOCAL_PAIRDEF; LOCAL_WEAKP; MAXITER; MEMORY; MP2_AMPS_PRINT; MP2_OS_SCALE; MP2_SS_SCALE; NEGLECT_DISTANT_PAIR; NEW_TRIPLES; NUM_AMPS_PRINT; PAIR_ENERGIES_PRINT; PROPERTY; REFERENCE; RESTART; ROOTS_PER_IRREP; R_CONVERGENCE; SCREEN_INTS; SCS; SCSN_MP2; SCS_CCSD; SCS_MP2; SCS_N; SEMICANONICAL; SPINADAPT_ENERGIES; T2_COUPLED; T3_WS_INCORE. Expert; AO_BASIS; FORCE_RESTART; WFN. Previous topic; ZETA; Next topic; ABCD; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/autodir_options_c/module__ccenergy-1.html:9091,update,updated,9091,psi4manual/4.0b5/autodir_options_c/module__ccenergy-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/module__ccenergy-1.html,2,['update'],['updated']
Deployability,"terms of the GNU Lesser General Public License as published by; # the Free Software Foundation, version 3.; #; # Psi4 is distributed in the hope that it will be useful,; # but WITHOUT ANY WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; # GNU Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public License along; # with Psi4; if not, write to the Free Software Foundation, Inc.,; # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; #; # @END LICENSE; #. """"""Module with high-level functions calling wrappers and driver. Place in this file quickly defined procedures such as; - aliases for complex methods; - simple modifications to existing methods. """""". __all__ = [; ""allen_focal_point"",; ""fake_file11"",; ""sherrill_gold_standard"",; ]. from typing import Any, Dict, List. CBSMetadata = List[Dict[str, Any]]. # Python procedures like these can be run directly from the input file or integrated; # with the energy(), etc. routines by means of lines like those at the end; # of this file. def fake_file11(wfn: ""psi4.core.Wavefunction"", filename: str = 'fake_file11.dat', **kwargs):; r""""""Function to print a file *filename* of the old file11 format; from molecule and gradient information in *wfn*. .. versionadded:: 0.6; *wfn* parameter passed explicitly. :returns: None. :param filename: destination file name for file11 file. :param wfn: set of molecule, gradient from which to generate file11. :examples:. >>> # [1] file11 for CISD calculation; >>> G, wfn = gradient('cisd', return_wfn=True); >>> fake_file11(wfn, 'mycalc.11'). """"""; molecule = wfn.molecule(); molecule.update_geometry(); gradient = wfn.gradient(). with open(filename, 'w') as handle:; handle.write('%d\n' % (molecule.natom())). for at in range(molecule.natom()):; handle.write('%6s %16.8f %16.8f %16.8f\n' % (molecule.symbol(; at), molecule.x(at), molecule.y(at), molecule.z(at))). for at in rang",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/_modules/psi4/driver/aliases.html:1521,integrat,integrated,1521,psi4manual/1.9.x/_modules/psi4/driver/aliases.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/_modules/psi4/driver/aliases.html,2,['integrat'],['integrated']
Deployability,"tes Documentation. name¶; The name of the dimension. Used in printing. Methods Documentation. fill(self: psi4.core.Dimension, val: int) → None¶; Fill all elements with given value. classmethod from_list(dims, name='New Dimension')¶; Builds a Dimension object from a Python list or tuple. If a Dimension object is passed, a copy will be returned. Parameters:. dims (Union[Tuple[int], List[int], ndarray, Dimension]) – Iterable of integers defining irrep dimensions.; name – Name for new instance. Return type:; Dimension. init(self: psi4.core.Dimension, arg0: int, arg1: str) → None¶; Re-initializes the dimension object. max(*args, **kwargs)¶; Overloaded function. max(self: psi4.core.Dimension) -> int. Gets the maximum value from the dimension object. max(self: psi4.core.Dimension) -> int. Return the maximum element. n(self: psi4.core.Dimension) → int¶; The order of the dimension. print_out(self: psi4.core.Dimension) → None¶; Print out the dimension object to the output file. sum(*args, **kwargs)¶; Overloaded function. sum(self: psi4.core.Dimension) -> int. Gets the sum of the values in the dimension object. sum(self: psi4.core.Dimension) -> int. Return the sum of constituent dimensions. to_tuple()¶; Serializes Dimension to a tuple. Return type:; Tuple[int]. Parameters:; self (Dimension). zero(*args, **kwargs)¶; Overloaded function. zero(self: psi4.core.Dimension) -> None. Zeros all values in the dimension object. zero(self: psi4.core.Dimension) -> None. Zero all elements. table of contents. Dimension; Dimension; Dimension.name; Dimension.fill(); Dimension.from_list(); Dimension.init(); Dimension.max(); Dimension.n(); Dimension.print_out(); Dimension.sum(); Dimension.to_tuple(); Dimension.zero(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. PSI4 API: Linking C++ and Python; Dimension. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/api/psi4.core.Dimension.html:2715,update,updated,2715,psi4manual/master/api/psi4.core.Dimension.html,https://psicode.org,https://psicode.org/psi4manual/master/api/psi4.core.Dimension.html,1,['update'],['updated']
Deployability,"tes a sandbox with PSI4 and python (loaded as dependency). 1; 2>>> conda create -y -n p4env psi4 -c psi4; >>> conda activate p4env. Install a particular PSI4 version. 1>>> conda install psi4=0.1.12 -c psi4. Uninstall PSI4 from current environment. 1>>> conda remove psi4. Initially install PSI4 nightly build. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4 –channel psi4/label/dev. Initially install PSI4 nightly build with non-current python. 1>>> conda install psi4 python=3.6 -c psi4/label/dev. Update to latest PSI4 nightly build. 1>>> conda update psi4 -c psi4/label/dev. Initially install nightly build into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). 1; 2>>> conda create -y -n p4env psi4 -c psi4/label/dev; >>> conda activate p4env. Install a particular PSI4 version. 1>>> conda install psi4=0.1.12 -c psi4/label/dev. Troubleshooting¶. If the target computer doesn’t have libc >= 2.7 (released c.2007; for reference, 2.10 is newer than 2.7; unlike most libraries, libc generally not available in multiple versions on a computer), the PSI4 conda package won’t work.; 1; 2; 3; 4; 5; 6# unsuitable computer; >>> ldd --version; ldd (GNU libc) 2.5; # suitable computer; >>> ldd --version; ldd (GNU libc) 2.17. It is of greatest importance that the PSI4 executable be linked against conda libpython.so not against any system libpython.so. This is arranged by setting RPATH to seek libraries relative to executable (thanks, conda binary relocation routine!). The conda PSI4 executable is not vulnerable to interference from your LD_LIBRARY_PATH settings. Below shows a well-linked executable. no libraries “not found”; fundamental libraries like libc, ld-linux, pthreads found system libraries to link against; libpython linked against conda python not system python; libm is linked against conda or system; blas, c++, and gcc libraries are absent because statically linked. 1; 2; 3; 4; 5; 6; 7; ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/conda-1.html:22013,release,released,22013,psi4manual/1.2.1/conda-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/conda-1.html,2,['release'],['released']
Deployability,"tesian H2O2. dfmp2-grad3; DF-MP2 cc-pVDZ gradients for the H2O molecule. opt12; SCF cc-pVDZ geometry optimzation of ketene, starting from bent structure. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the state of the CN radical, with Cartesian input. gdma1; Water RHF/cc-pVTZ distributed multipole analysis. cc47; EOM-CCSD/cc-pVDZ on H2O2 with two excited states in each irrep. props2; DF-SCF cc-pVDZ of benzene-hydronium ion, scanning the dissociation coordinate with Python’s built-in loop mechanism. The geometry is specified by a Z-matrix with dummy atoms, fixed parameters, updated parameters, and separate charge/multiplicity specifiers for each monomer. One-electron properties computed for dimer and one monomer. cepa0-grad2; CEPA cc-pVDZ gradient for the NO radical. dcft3; DC-06 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the AO Basis, using integrals stored on disk. cc2; 6-31G** H2O CCSD optimization by energies, with Z-Matrix input. cc6; Frozen-core CCSD(T)/cc-pVDZ on C4H4N anion with disk ao algorithm. dfomp2p5-grad1; DF-OMP2.5 cc-pVDZ gradients for the H2O molecule. omp2-3; OMP2 cc-pVDZ energy for the NO radical. cc49; EOM-CC3(UHF) on CH radical with user-specified basis and properties for particular root. dcft7; DCFT calculation for the triplet O2 using ODC-06 and ODC-12 functionals. Only simultaneous algorithm is tested. cc48; reproduces dipole moments in J.F. Stanton’s “biorthogonal” JCP paper. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. ci-property; CI/MCSCF cc-pvDZ properties for Potassium nitrate (rocket fuel!). tu4-h2o-freq; Optimization followed by frequencies H2O HF/cc-pVDZ. dcft2; DC-06 calculation for the He dimer. This performs a two-step updat",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:22435,update,update,22435,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,4,['update'],['update']
Deployability,"test-MacOSX-x86_64.txt""; >>> conda create --name p4env --file explicitenv2-latest-MacOSX-x86_64.txt; >>> source activate p4env. Quick Installation¶; Sequence of commands to get you to a working Psi4 on Linux. Installs; Miniconda into $HOME/miniconda and the Psi4 executable into the; main conda environment at $HOME/miniconda/bin/psi4.; # Linux or Mac: select between next two lines; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda2-latest-Linux-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda2-latest-MacOSX-x86_64.sh"". >>> bash; >>> bash Miniconda-latest.sh -b -p $HOME/miniconda # agrees to conda's license terms; >>> echo ""export PATH=$HOME/miniconda/bin:\$PATH"" >> ~/.bashrc; # log out, log back in so conda in path; >>> conda update --yes --all; >>> conda config --add channels http://conda.anaconda.org/psi4; >>> conda install --yes psi4; >>> psi4 ""$(dirname $(which psi4))""/../share/psi4/samples/sapt1/test.in # test installation. works b/c PSI_SCRATCH defaults to /tmp. That last command tested that psi4 is in your path, and it’s finding; all the libraries it needs. Now you need only specify a scratch directory; (see Scratch Files and Elementary Restart) by replacing the placeholder in the following:; >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!. Note; Above commands use bash for installation and set up your environment for bash at runtime. To use csh at runtime, follow the on-screen directions at the end of the installation or consult step 7 below. Detailed Installation of Miniconda¶. Sanity check. If you already have Miniconda or Anaconda, skip to step 5. The whole installation takes ~5 min; reading this page takes far longer.; Get bzip2. You’ll need this slightly exotic command so run which to test for availability, and install from yum, source, etc. if unavailable. Yo",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/conda-1.html:5696,install,installation,5696,psi4manual/1.0.0/conda-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/conda-1.html,2,['install'],['installation']
Deployability,"test.sh ""https://repo.continuum.io/miniconda/Miniconda2-latest-MacOSX-x86_64.sh"". >>> bash; >>> bash Miniconda-latest.sh -b -p $HOME/miniconda # agrees to conda's license terms; >>> echo ""export PATH=$HOME/miniconda/bin:\$PATH"" >> ~/.bashrc; # log out, log back in so conda in path; >>> conda update --yes --all; >>> conda config --add channels http://conda.anaconda.org/psi4; >>> conda install --yes psi4; >>> psi4 ""$(dirname $(which psi4))""/../share/psi4/samples/sapt1/test.in # test installation. works b/c PSI_SCRATCH defaults to /tmp. That last command tested that psi4 is in your path, and it’s finding; all the libraries it needs. Now you need only specify a scratch directory; (see Scratch Files and Elementary Restart) by replacing the placeholder in the following:; >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!. Note; Above commands use bash for installation and set up your environment for bash at runtime. To use csh at runtime, follow the on-screen directions at the end of the installation or consult step 7 below. Detailed Installation of Miniconda¶. Sanity check. If you already have Miniconda or Anaconda, skip to step 5. The whole installation takes ~5 min; reading this page takes far longer.; Get bzip2. You’ll need this slightly exotic command so run which to test for availability, and install from yum, source, etc. if unavailable. You’ll also need an internet connection for downloading; computers behind a firewall or with restricted login domains are eligible. So long as you can ssh into the computer to an account with write permissions and can connect to the internet from the computer, all is well. # check; >>> which bzip2; /usr/bin/bzip2; >>> curl -O ""http://psicode.org/psi4manual/master/introduction.html""; >>> ls -1; introduction.html. Get Miniconda installer script. Either issue the command below or download from http://conda.pydat",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/conda-1.html:6197,install,installation,6197,psi4manual/1.0.0/conda-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/conda-1.html,2,['install'],['installation']
Deployability,"th closed shell reference determinant, it must be zero otherwise. This becomes nsing (option #2) in fort.56. Type: integer; Default: 1. MRCC_NUM_TRIPLET_ROOTS¶. Number of triplet roots. (Strictly speaking number of of roots with \(M_s=0\) and S is odd.) See notes at option MRCC_NUM_SINGLET_ROOTS This becomes ntrip (option #3) in fort.56. Type: integer; Default: 0. Expert¶. MRCC_METHOD¶. If more than one root is requested and calc=1, LR-CC (EOM-CC) calculation is performed automatically for the excited states. This overrides all automatic determination of method and will only work with energy(). This becomes CC/CI (option #5) in fort.56. See Table MRCC_METHOD for details. Type: integer; Default: 1. MRCC_OMP_NUM_THREADS¶. Sets the OMP_NUM_THREADS environment variable before calling MRCC. If the environment variable OMP_NUM_THREADS is set prior to calling Psi4 then that value is used. When set, this option overrides everything. Be aware the -n command-line option described in section Threading does not affect MRCC. Type: integer; Default: 1. MRCC_RESTART¶. The program restarts from the previously calculated parameters if it is 1. In case it is 2, the program executes automatically the lower-level calculations of the same type consecutively (e.g., CCSD, CCSDT, and CCSDTQ if CCSDTQ is requested) and restarts each calculation from the previous one (rest=2 is available only for energy calculations). Currently, only a value of 0 and 2 are supported. This becomes rest (option #4) in fort.56. Type: integer; Default: 0. table of contents. MRCC; General; E_CONVERGENCE; INTS_TOLERANCE; MRCC_LEVEL; MRCC_NUM_DOUBLET_ROOTS; MRCC_NUM_SINGLET_ROOTS; MRCC_NUM_TRIPLET_ROOTS. Expert; MRCC_METHOD; MRCC_OMP_NUM_THREADS; MRCC_RESTART. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Appendices; Keywords by Module; MRCC. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodir_options_c/module__mrcc-1.html:3032,update,updated,3032,psi4manual/1.4.0/autodir_options_c/module__mrcc-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodir_options_c/module__mrcc-1.html,2,['update'],['updated']
Deployability,"th closed shell reference determinant, it must be zero otherwise. This becomes nsing (option #2) in fort.56. Type: integer; Default: 1. MRCC_NUM_TRIPLET_ROOTS¶. Number of triplet roots. (Strictly speaking number of of roots with \(M_s=0\) and S is odd.) See notes at option MRCC_NUM_SINGLET_ROOTS This becomes ntrip (option #3) in fort.56. Type: integer; Default: 0. Expert¶. MRCC_METHOD¶. If more than one root is requested and calc=1, LR-CC (EOM-CC) calculation is performed automatically for the excited states. This overrides all automatic determination of method and will only work with energy(). This becomes CC/CI (option #5) in fort.56. See Table MRCC_METHOD for details. Type: integer; Default: 1. MRCC_OMP_NUM_THREADS¶. Sets the OMP_NUM_THREADS environment variable before calling MRCC. If the environment variable OMP_NUM_THREADS is set prior to calling Psi4 then that value is used. When set, this option overrides everything. Be aware the -n command-line option described in section Threading does not affect MRCC. Type: integer; Default: 1. MRCC_RESTART¶. The program restarts from the previously calculated parameters if it is 1. In case it is 2, the program executes automatically the lower-level calculations of the same type consecutively (e.g., CCSD, CCSDT, and CCSDTQ if CCSDTQ is requested) and restarts each calculation from the previous one (rest=2 is available only for energy calculations). Currently, only a value of 0 and 2 are supported. This becomes rest (option #4) in fort.56. Type: integer; Default: 0. table of contents. MRCC; General; E_CONVERGENCE; INTS_TOLERANCE; MRCC_LEVEL; MRCC_NUM_DOUBLET_ROOTS; MRCC_NUM_SINGLET_ROOTS; MRCC_NUM_TRIPLET_ROOTS. Expert; MRCC_METHOD; MRCC_OMP_NUM_THREADS; MRCC_RESTART. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Keywords by Module; MRCC. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/autodir_options_c/module__mrcc-1.html:3032,update,updated,3032,psi4manual/1.5.0/autodir_options_c/module__mrcc-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodir_options_c/module__mrcc-1.html,2,['update'],['updated']
Deployability,"th in html). For Ubuntu users, you will need the following packages installed:; gfortran [for linking to BLAS/LAPACK], g++, autoconf, python-dev. II. Brief Summary of Configuration, Compilation, and Installation¶; This section outlines the main steps of configuring, compiling, and; installing PSI. More detail is given below in Section III. Autoconf. For unusual architectures (or for developers working in the development; branch), one needs to first run autoconf to generate; the file “configure” in the top-level psi4 directory. For most Linux; and Mac compilations, this should not be necessary because the configure; file provided with PSI4 should be sufficient. To replace the general; configure file with one specific to your architecture, in the top-level; psi4 directory, run autoconf:; >>> autoconf. Configuration and Compilation; Make an object directory in which you can compile the code; >>> mkdir obj. Next you need to configure the code. Find a configuration; option line or combination of; configuration options at Section III(1)A. Either, use the line directly:; >>> cd obj; >>> ../configure [your compilation configuration options here]. or, save your configuration options for a future compilation.; In the top-level psi4 directory, create a file like “do-configure” with; the configure command and options on one line.; >>> cat do-configure; ../configure [your compilation configuration options here]; >>> chmod u+x do-configure; >>> cd obj; >>> ../do-configure. Compile the code, run the tests, and (if tests pass) install it.; >>> make; >>> make tests; >>> make install. That’s it! The details about final user configuration are given below in; Section III(7). If something goes wrong,; check Section VI about common compilation problems. III. Detailed Installation Instructions¶; This section provides a more detailed explanation of the procedure for; compiling and installing the PSI4 package. Step 1: Configuration. General Information about Configuration; First, we recommen",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/installfile.html:2991,configurat,configuration,2991,psi4manual/4.0b4/installfile.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/installfile.html,2,['configurat'],['configuration']
Deployability,"th iterative sextuples (cheapest terms). mrccsdt-1b; CC through doubles with iterative triples (cheaper terms). mrccsdtq-1b; CC through triples with iterative quadruples (cheaper terms). mrccsdtqp-1b; CC through quadruples with iterative quintuples (cheaper terms). mrccsdtqph-1b; CC through quintuples with iterative sextuples (cheaper terms). mrcc2; approximate CC through doubles. mrcc3; approximate CC through triples. mrcc4; approximate CC through quadruples. mrcc5; approximate CC through quintuples. mrcc6; approximate CC through sextuples. mrccsdt-3; CC through doubles with iterative triples (all but the most expensive terms). mrccsdtq-3; CC through triples with iterative quadruples (all but the most expensive terms). mrccsdtqp-3; CC through quadruples with iterative quintuples (all but the most expensive terms). mrccsdtqph-3; CC through quintuples with iterative sextuples (all but the most expensive terms). Frozen-core approximation is also supported in the MRCC interface.; To optimize CH4 with CCSDT freezing the 1s on carbon, run:; molecule H2O {; O; H 1 r; H 1 r 2 104.5. r = 1.0; }. set {; basis cc-pVDZ; freeze_core true; }. optimize('mrccsdt'). Interface Details¶. MRCC methods¶. MRCC_METHOD; Method; Description. 1; CC;  . 2; CC(n-1)[n];  . 3; CC(n-1)(n); (CC(n-1)[n] energy is also calculated). 4; CC(n-1)(n)_L; (CC(n-1)[n] and CC(n-1)(n) energies are also calculated). 5; CC(n)-1a;  . 6; CC(n)-1b;  . 7; CCn;  . 8; CC(n)-3;  . Table Of Contents. Interface to MRCC by M. Kállay; Installation; Running MRCC; Interface Details. Previous topic; Interface to Molden, molden(); Next topic; Psithon Functions: Invoking a Calculation. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Interfaces: Enhancing Psi4 Capabilities ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/mrcc-1.html:4561,update,updated,4561,psi4manual/1.0.0/mrcc-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/mrcc-1.html,2,['update'],['updated']
Deployability,"th psi4; --test. Configuration for this set-up is summarized at; How to run Psi4 as executable or Python module from conda installation.; Details:. It is advised to place PSI4 into a conda; environment where its libraries can’t interfere with other programs; rather than the main; Anaconda or Miniconda environment. Hence the creation of the environment; above, but the environment name (p4env above) can be; substituted.; Only reason for psi4-rt package is to get the QC runtime; add-ons; could say any combination of dftd3 gcp v2rdm_casscf snsmp2 instead of psi4-rt;; or leave them out if you don’t want them.; Grab a Miniconda through curl -o Miniconda-latest.sh; ""https://repo.continuum.io/miniconda/Miniconda3-latest-[MacOSX|Linux]-x86_64.sh"",; selecting between Mac and Linux. How to update a Psi4 binary¶; A. Conda command to update an existing PSI4 conda installation to the; newest stable release (roughly annually).; >>> conda update psi4 -c psi4. # if psi4 channel in defaults (true for Psi4conda installers); >>> conda update psi4. B. Conda command to update an existing PSI4 conda installation to the; latest development head (roughly nightly).; >>> conda update psi4 -c psi4/label/dev. C. Conda command to install a very specific package, including version,; build string, and subchannel. The final -c psi4 represents any; additional channels or subchannels needed to locate all dependencies.; >>> conda install psi4=1.2a1.dev249+623ad64=py36_sse41_0 -c psi4/label/subchannel -c psi4. How to use conda to compile Psi4 faster and easier¶; # Linux # c. v1.2rc1 ###or Mac or Windows; # substitute x.x by 2.7|3.5|3.6 for alternate python versions; >>> conda create -n p4dev python=x.x psi4-dev -c psi4/label/dev -c psi4; >>> conda activate p4dev. >>> cd {top-level-psi4-dir}; >>> psi4-path-advisor --help; usage: psi4-path-advisor [-h] [--psi4-compile] [--disable-addons]; [--disable-mkl] [--intel | --intel-multiarch | --gcc]. Build and Run path advisor for Psi4. optional arguments:; -h, ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/conda-1.html:6348,install,installers,6348,psi4manual/1.2.1/conda-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/conda-1.html,4,"['install', 'update']","['installers', 'update']"
Deployability,"th psi4; --test. Configuration for this set-up is summarized at; How to run Psi4 as executable or Python module from conda installation.; Details:. It is advised to place PSI4 into a conda; environment where its libraries can’t interfere with other programs; rather than the main; Anaconda or Miniconda environment. Hence the creation of the environment; above, but the environment name (p4env above) can be; substituted.; Only reason for psi4-rt package is to get the QC runtime; add-ons; could say any combination of dftd3 gcp v2rdm_casscf snsmp2 instead of psi4-rt;; or leave them out if you don’t want them.; Grab a Miniconda through curl -o Miniconda-latest.sh; ""https://repo.continuum.io/miniconda/Miniconda3-latest-[MacOSX|Linux]-x86_64.sh"",; selecting between Mac and Linux. How to update a Psi4 binary¶; A. Conda command to update an existing PSI4 conda installation to the; newest stable release (roughly annually).; >>> conda update psi4 -c psi4. # if psi4 channel in defaults (true for Psi4conda installers); >>> conda update psi4. B. Conda command to update an existing PSI4 conda installation to the; latest development head (roughly nightly).; >>> conda update psi4 -c psi4/label/dev. C. Conda command to install a very specific package, including version,; build string, and subchannel. The final -c psi4 represents any; additional channels or subchannels needed to locate all dependencies.; >>> conda install psi4=1.2a1.dev249+623ad64=py36_sse41_0 -c psi4/label/subchannel -c psi4. How to use conda to compile Psi4 faster and easier¶; # Linux # c. v1.2rc1 ###or Mac or Windows; # substitute x.x by 3.5|3.6|3.7 for alternate python versions; >>> conda create -n p4dev python=x.x psi4-dev -c psi4/label/dev -c psi4; >>> conda activate p4dev. >>> cd {top-level-psi4-dir}; >>> psi4-path-advisor --help; usage: psi4-path-advisor [-h] [--psi4-compile] [--disable-addons]; [--disable-mkl] [--intel | --intel-multiarch | --gcc]. Build and Run path advisor for Psi4. optional arguments:; -h, ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/conda-1.html:6348,install,installers,6348,psi4manual/1.3.2/conda-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/conda-1.html,4,"['install', 'update']","['installers', 'update']"
Deployability,"th$[., ]$ (pseudo-regex) are good, while H$_2$O and LaTeX tables; are not translated correctly. Python docstrings are absorbed as-is, so; please use reST math formatting (essentially $latex math$ \(\Rightarrow\); :math:`latex math`).; Starting around PSI4 1.1, MathJax is used for in-browser LaTeX; rendering in place of offline PNG generation of math images. Check the; online rendering, as occasionally there will be errors even when the LaTeX; looked sound. The Map of the Sphinx¶. Adding a new Appendix or First-TOC-Level page; Create your reST file and fill it with information. Add the name of your; file to psi4/doc/sphinxman/source/appendices.rst for an appendix or; to psi4/doc/sphinxman/source/index.rst for a first-TOC-level.; Finally, add your file to the STATICDOC variable in; psi4/doc/sphinxman/CMakeLists.txt. Sphinx will now build with your; new page. Adding a new module to “Theoretical Methods”; Copy the file of a well-established module, like; psi4/doc/sphinxman/source/sapt.rst. Change the title, author, sec; label, ref, and source labels at the top of the file to point instead to; your code. Edit psi4/doc/sphinxman/source/methods.rst to add the; name of your file so that it will appear in the TOC tree. Add your file; to the STATICDOC variable in; psi4/doc/sphinxman/CMakeLists.txt. Sphinx will now build with your new; file. Follow the models in existing methods pages to write your; documentation. If you don’t get all the keyword links, bibliography; links, sample inputs, math, tables, etc. working in Sphinx, don’t worry; about it. A genie will probably come through and tidy up all your; source. table of contents. Documentation; Installing Sphinx; Documentation Structure; reStructuredText; Math in the Codebase; The Map of the Sphinx. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Contributions: Intro to Programming in PSI4. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/documentation-1.html:6853,update,updated,6853,psi4manual/1.1.0/documentation-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/documentation-1.html,2,['update'],['updated']
Deployability,"th.splitext(filename)[0]; div = '=' * len(basename). module_choices.append(basename); DSD[basename] = {}. M = ast.parse(''.join(open(module))); DS = ast.get_docstring(M); if not DS:; DS = """"; DS = str.replace(DS, '|dl|', '-->'); DS = str.replace(DS, '|dr|', '<--'); DS = str.replace(DS, ""``'"", ''); DS = str.replace(DS, ""'``"", ''). lst = DS.split(""\n- **""). #DSD[basename]['general'] = str.replace(lst[0], '|', ''); DSD[basename]['general'] = lst[0].split('\n'). try:; DSD[basename]['cp'] = [section for section in lst if section.startswith(""cp"")][0]; except IndexError:; DSD[basename]['cp'] = None. try:; DSD[basename]['rlxd'] = [section for section in lst if section.startswith(""rlxd"")][0]; except IndexError:; DSD[basename]['rlxd'] = None. try:; DSD[basename]['benchmark'] = [section for section in lst if section.startswith(""benchmark"")][0]; except IndexError:; DSD[basename]['benchmark'] = None. try:; #DSD[basename]['subset'] = [section for section in lst if section.startswith(""subset"")][0]; temp = [section for section in lst if section.startswith(""subset"")][0].splitlines(); temp = temp[2:]. result = {}; for item in temp:; item = item.lstrip("" -""); try:; key, val = item.split("" "", 1); result[key] = val; except ValueError:; result[item] = """". DSD[basename]['subset'] = result. except IndexError:; DSD[basename]['subset'] = {"""": 'No subsets available'}. return DSD. # print '\ngeneral\n\n', DSD[basename]['general']; # print '\ncp\n\n', DSD[basename]['cp']; # print '\nrlxd\n\n', DSD[basename]['rlxd']; # print '\nbenchmark\n\n', DSD[basename]['benchmark']; # print '\nsubset\n\n', DSD[basename]['subset']. #print ' %-12s %s' % ('[' + basename + ']', DSD[basename]['general'][0]). #print 'DSD2\n', DSD['S22']['subset']. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    ; Psi4 [1.0.0 6a9a71b] » ; Module code ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/dbproc.html:3681,update,updated,3681,psi4manual/1.0.0/_modules/qcdb/dbproc.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/dbproc.html,1,['update'],['updated']
Deployability,"th/to/install-psi4 ...; # ...; # -- Generating done; # -- Build files have been written to: /current/dir/objdir; # >>> cmake --build objdir --target install -j`getconf _NPROCESSORS_ONLN`. # <<< Required build dependencies that Psi4 can't build itself >>>; #; # - CMake (e.g., `conda install cmake`); # - C++ and C compilers (C++17 compliant); # - BLAS/LAPACK (also runtime; e.g., `conda install mkl-devel`); # - Python (also runtime; interpreter and headers; e.g., `conda install python`); # - NumPy (also runtime; avoidable at buildtime if gau2grid pre-built; e.g., `conda install numpy`); # - networkx >=2.4 (runtime only; e.g., `conda install networkx`); # - pint >=0.10 (runtime only; e.g., `conda install pint -c conda-forge`); # - pydantic >=1.0 (runtime only; e.g., `conda install pydantic -c conda-forge`); # - msgpack-python (runtime only; e.g., `conda install msgpack-python`); # - Eigen (for Libint2; e.g., `conda install eigen`); # - SciPy (runtime only; e.g., `conda install scipy`); # - py-cpuinfo (runtime only; e.g., `conda install py-cpuinfo`); # - psutil (runtime only; e.g., `conda install psutil`). # These three ""### Options ###"" sections contain useful CMake variables for build configuration. # <<< Compilers and flags >>>; #; # - CMAKE_C_COMPILER ""C compiler""; # - CMAKE_C_FLAGS ""Additional C flags""; # - CMAKE_CXX_COMPILER ""C++ compiler""; # - CMAKE_CXX_FLAGS ""Additional C++ flags""; # - CMAKE_Fortran_COMPILER ""Fortran compiler (required for some add-ons)""; # - CMAKE_Fortran_FLAGS ""Additional Fortran flags"". # <<< Detecting dependencies and add-ons >>>; #; # - Python_EXECUTABLE ""Python interpreter to use (e.g., /path/to/bin/python3.7)""; # - Python_LIBRARY ""Python library that goes with the interpreter (e.g., /path/to/lib/python3.7.so)""; # - Python_INCLUDE_DIR ""Path to the python include files (e.g., /path/to/include/python3.7)""; # - SPHINX_ROOT ""Root directory for Sphinx: 'bin/sphinx-build' (or similar) should be in this dir.""; #; # For any ${AddOn} of: ambit, CheM",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/build_planning.html:15588,install,install,15588,psi4manual/1.7.x/build_planning.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/build_planning.html,1,['install'],['install']
Deployability,"thOpenMP. MKL_ROOT¶; Environment variable set by Intel compilervars scripts. Sufficient to trigger math detection of MKL at this location. MATH_ROOT¶; Environment variable to specify root directory in which BLAS/LAPACK libraries should be detected (e.g., ${MATH_ROOT}/lib64/libblas.so and ${MATH_ROOT}/lib64/liblapack.so). Examples. Build with any LAPACK in standard location. >>> cmake. Build with native Accelerate LAPACK on Mac (MKL not also present).; If NumPy not using native Accelerate LAPACK, then directing Psi4; to use it is Bad Idea!. >>> cmake. Build with native Accelerate LAPACK on Mac (MKL also present); If NumPy not using native Accelerate LAPACK, then directing Psi4; to use it is Bad Idea!. >>> cmake -DBLAS_TYPE=SYSTEM_NATIVE -DLAPACK_TYPE=SYSTEM_NATIVE. Build with Intel MKL. >>> source /path/to/intel/vers/linux/mkl/bin/mklvars.sh intel64 # adjust sh/csh and arch as needed; >>> cmake. >>> MATH_ROOT=/path/to/intel/vers/linux/mkl/ cmake. Build with Intel MKL from conda (install mkl-devel package from defaults channel). >>> cmake -DLAPACK_LIBRARIES=""${CONDA_PREFIX}/lib/libmkl_rt.so"" -DLAPACK_INCLUDE_DIRS=""${CONDA_PREFIX}/include"". OpenBLAS - see note below. >>> MATH_ROOT=/path/to/openblas/0.2.13_seq/x86_64/gcc_5.2.0/lib cmake. Build with explicit MKL LAPACK. >>> cmake -DLAPACK_LIBRARIES=""/path/to/lib/intel64/libmkl_lapack95_lp64.a;/path/to/lib/intel64/libmkl_rt.so"" -DLAPACK_INCLUDE_DIRS=""/path/to/mkl-h-include/"". Build with explicit non-MKL LAPACK. >>> cmake -DLAPACK_LIBRARIES=""/path/to/lib/liblapack.so;/path/to/lib/libblas.a"". Build with MKL and GCC (iomp5 needed instead of gomp for threading. use OpenMP_LIBRARY_DIRS to hint location.). >>> cmake -DLAPACK_LIBRARIES=/opt/intel/mkl/lib/intel64/libmkl_rt.so -DLAPACK_INCLUDE_DIRS=/opt/intel/mkl/include -DOpenMP_LIBRARY_DIRS=/opt/intel/compiler/lib/intel64/. Notes. Much of PSI4‘s speed and efficiency depends on the corresponding; speed and efficiency of the linked BLAS and LAPACK libraries; (especially the former)",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/build_planning-1.html:42660,install,install,42660,psi4manual/1.4.0/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/build_planning-1.html,9,['install'],['install']
Deployability,"that four arrays be specified; for this purpose. Frozen doubly occupied orbitals (FROZEN_DOCC) are doubly occupied in each reference determinant and are not correlated in the MRCC procedure.; Doubly occupied orbitals (RESTRICTED_DOCC) are doubly occupied in each reference determinant and are correlated in the MRCC procedure.; Active orbitals (ACTIVE) are partially occupied in each reference determinant.; Frozen virtual orbitals (FROZEN_UOCC) are unoccupied in all reference determinants and are excluded from the correlated wave function. The model space is selected by considering all possible occupations of the electrons among the orbitals in the active space that result in determinants with the correct symmetry (WFN_SYM) and the correct value specified by the keyword CORR_MULTP. Note that this does not consider the multiplicity of the wavefunction. Thus, in order to obtain the wavefunction with a set of reference determinants for an open-shell system you should request a CORR_MULTP of 1 within the PSIMRCC module, and select the root of the effective Hamiltonian that corresponds to the state of interest. In addition, the WFN_SYM keyword needs to be specified otherwise the wavefunction belonging to the all-symmetric irrep will be selected. In addition, it should be noted that for an open-shell singlet based on two determinants the eigenvector is [], which corresponds to a wavefunction of the following form:. See Appendix PSIMRCC for a complete list of PSIMRCC options. Table Of Contents. PSIMRCC Implementation of Mk-MRCC Theory; A Simple Example; Orbital ordering and selection of the model space. Previous topic; Coupled Cluster Methods; Next topic; Interface to MRCC by M. Kállay; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Theoretical Methods: SCF to FCI ». © Copyright 2012, Psi4 Project.; Last updated on Sep 30, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/psimrcc-1.html:7315,update,updated,7315,psi4manual/4.0b2/psimrcc-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/psimrcc-1.html,2,['update'],['updated']
Deployability,"the '' in above command; Need to do psi4/ and docs/ dirs. Also, license in these files. tests/runtest.py; README.md; tests/psitest.pl. Also, in content of https://github.com/psi4/psi4/blob/master/doc/sphinxman/source/conf.py.in#L118. Update samples¶. Run make sphinxman at least once by hand; Check in resulting psifiles.py and all the updated and new samples/ files and dirs; Make a lone PR and warn reviewers not to read it, since autogenerated. Collect new authors¶. Survey contributions to current Milestone. Add new contribs and PR lists to release notes GitHub issue; Figure out any new “Additional Contributors” authors since last release; Edit psi4/header.py accordingly, make PR; Get permission of new authors and their particulars for codemeta.json; Invite any contributors with at least 3 PRs to join GitHub Organization. Anticipate next release¶. Bump version in codemeta.json, https://github.com/psi4/psi4/blob/master/codemeta.json#L9; Add to branch list in azure-pipelines.yml, psi4/azure-pipelines.yml. Build Conda ecosystem stack¶; By “ecosystem stack”, mean packages that are upstream, downstream, required, and optional for a fully featured Psi4 build and which we can’t get from “defaults” or “conda-forge” channels. Main directions are in [cbcy](https://github.com/psi4/psi4meta/blob/master/conda-recipes/conda_build_config.yaml) and [poodle](https://github.com/psi4/psi4meta/blob/master/psinet-nightly/kitandkapoodle.py); A couple weeks before the first “rc” is planned, start going through L/LT in poodle, checking with upstream to see if new versions have been released. If good changes present, rebuild the packages, changing the version numbers in the respective recipes; When L/LT all built and passed, edit the individual package version numbers in cbcy and increment to a new ltrtver with updated version numbers and/or build numbers (only if code changes); Build L/PSI4. If any trouble, edit psi4 code. Iterate until builds and passes. This stage is the only full ctest &",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/manage_release-1.html:2378,pipeline,pipelines,2378,psi4manual/1.4.0/manage_release-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/manage_release-1.html,4,['pipeline'],['pipelines']
Deployability,"the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. scf-auto-cholesky; Cholesky filter a complete basis. tdscf-5; td-camb3lyp with DiskDF and method/basis specification. sapt-exch-ind-inf; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. fnocc7; Test fnocc with linear dependencies. scf-bz2; Benzene Dimer Out-of-Core HF/cc-pVDZ. linK-1; RHF Linear Exchange Algorithm test for water. density-screen-1; RHF Density Matrix based-Integral Screening Test for water. mbis-5; MBIS calculation on ZnO. cc13d; Tests analytic CC2 gradients. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. fd-freq-gradient-large; SCF DZ finite difference frequencies by gradients for C4NH4. scf-level-shift-uhf; SCF level shift on a UHF computation. frac; Carbon/UHF Fractionally-Occupied SCF Test Case. dft-custom-mgga; updated dldf reference to new BraggSlater radii Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). dft-grad-meta; meta-GGA gradients of water and ssh molecules reference gradients updated due to new BraggSlater radii. dfomp3-1; DF-OMP3 cc-pVDZ energy for the H2O molecule. omp2-3; OMP2 cc-pVDZ energy for the NO radical. isapt-siao1; This test case shows an example of running the I-SAPT0/jun-cc-pVDZ computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups) The SIAO1 link partitioning algorithm is used. isapt2; This is a shorter version if isapt1 - does not do cube plots. See isapt1 for full details. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. omp2p5-grad2; OMP2.5 cc-pVDZ gradient for the NO radical. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radic",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/autodoc_testsuite_corepsi4.html:46192,update,updated,46192,psi4manual/1.8.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodoc_testsuite_corepsi4.html,2,['update'],['updated']
Deployability,"the GNU Lesser General Public License as published by; # the Free Software Foundation, version 3.; #; # Psi4 is distributed in the hope that it will be useful,; # but WITHOUT ANY WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; # GNU Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public License along; # with Psi4; if not, write to the Free Software Foundation, Inc.,; # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; #; # @END LICENSE; #. """"""Module with functions that call upon those in modules; :py:mod:`proc`, :py:mod:`driver`, and :py:mod:`wrappers`. Place in this file quickly defined procedures such as; - aliases for complex methods; - simple modifications to existing methods. """"""; import os; import re; import warnings; from typing import Any, Dict, List. CBSMetadata = List[Dict[str, Any]]. # Python procedures like these can be run directly from the input file or integrated; # with the energy(), etc. routines by means of lines like those at the end; # of this file. def fake_file11(wfn, filename='fake_file11.dat', **kwargs):; r""""""Function to print a file *filename* of the old file11 format; from molecule and gradient information in *wfn*. .. versionadded:: 0.6; *wfn* parameter passed explicitly. :returns: None. :type filename: str; :param filename: destination file name for file11 file. :type wfn: :py:class:`~psi4.core.Wavefunction`; :param wfn: set of molecule, gradient from which to generate file11. :examples:. >>> # [1] file11 for CISD calculation; >>> G, wfn = gradient('cisd', return_wfn=True); >>> fake_file11(wfn, 'mycalc.11'). """"""; molecule = wfn.molecule(); molecule.update_geometry(); gradient = wfn.gradient(). with open(filename, 'w') as handle:; handle.write('%d\n' % (molecule.natom())). for at in range(molecule.natom()):; handle.write('%6s %16.8f %16.8f %16.8f\n' % (molecule.symbol(; at), molecule.x(at), molecule.y(a",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/aliases.html:1528,integrat,integrated,1528,psi4manual/1.6.x/_modules/psi4/driver/aliases.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/aliases.html,1,['integrat'],['integrated']
Deployability,"the H2O molecule. dfmp2-grad2; DF-MP2 cc-pVDZ gradient for the NO molecule. casscf-semi; CASSCF/6-31G** energy point. Check energy with frozen core/virtual orbs. after semicanonicalization. dlpnomp2-1; comparison of DF-MP2 and DLPNO-MP2. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. dfmp2-grad1; DF-MP2 cc-pVDZ gradients for the H2O molecule. pywrap-cbs1; Various basis set extrapolation tests. dfmp2-ecp; Ne-Xe dimer MP2 energies with ECP, with electrons correlated then frozen. scf3; File retention, docc, socc, and bond distances specified explicitly. mbis-2; MBIS calculation on OH- (Expanded Arrays). opt13; B3LYP cc-pVDZ geometry optimzation of phenylacetylene, starting from not quite linear structure updated reference due to new BraggSlater radii. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. mbis-3; MBIS calculation on OH radical. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. fnocc4; Test FNO-DF-CCSD(T) energy. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). cbs-xtpl-energy; Extrapolated water energies. cc8; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. dft-dsd; DSD S22 Ammonia test. fsapt2; A very quick correctness test of F-SAPT (see fsapt1 for a real example). dft-dens-cut; LibXC density screening test. Tests empty, C-only, X-only and XC superfunctionals. ‘super_mix’ showcases how to use different screening values for X and C parts. SCF will fail or crash (nans) without screening!. casscf-fzc-sp; CASSCF/6-31G** energy point. isapt1; ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:8104,update,updated,8104,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,4,['update'],['updated']
Deployability,"the H2O molecule. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. mom-h2o-4; MOM excitation from LUMO HOMO+4. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. olccd-grad2; OLCCD cc-pVDZ gradient for the NO radical. scf-property; UFH and B3LYP cc-pVQZ properties for the CH2 molecule. olccd-freq1; OLCCD cc-pVDZ freqs for C2H2. omp3-grad2; OMP3 cc-pVDZ gradient for the NO radical. scf-response3; UHF Dipole Polarizability Test. cc37; CC2(UHF)/cc-pVDZ energy of H2O+. sapt10; usapt example with empty beta due to frozen core. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. extern2; External potential calculation involving a TIP3P water and a QM water for DFMP2. Finite different test of the gradient is performed to validate forces. scf-guess; Test initial SCF guesses on FH and FH+ in cc-pVTZ basis. dct8; DCT calculation for the NH3+ radical using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. opt1-fd; SCF STO-3G geometry optimzation, with Z-matrix input, by finite-differences. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies for H2O. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. dfccsd-grad2; DF-CCSD cc-pVDZ gradient for the NH molecule. dft-pruning; Tests all grid pruning options available and screening of small weights. Check against grid size. cc51; EOM-CC3/cc-pVTZ on H2O. opt7; Various constrained energy minimizations of HOOH with cc-pvdz RHF. For “fixed” coordinates, the final value is provided by the user. cbs-xtpl-gradient; Various gradients for a strained helium dimer and water molecule. sapt9; usapt example with emp",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:4826,update,update,4826,psi4manual/master/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html,2,['update'],['update']
Deployability,"the LIBEFP library.; These systems are accessible in molecule {...} blocks without; additional configuration. How to configure libefp for building Psi4¶; Role and Dependencies. Role — In PSI4, libefp is a library that provides additional; molecular modeling capabilities (EFP).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) libefp; Upstream Dependencies — libefp \(\Leftarrow\) BLAS/LAPACK. CMake Variables. ENABLE_libefp — CMake variable toggling whether Psi4 builds with libefp; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For libefp, set to an installation directory containing include/efp.h; libefp_DIR — CMake variable to specify where pre-built libefp can be found. Set to installation directory containing share/cmake/libefp/libefpConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_libefp — CMake variable to force internal build of libefp instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_libefp — CMake variable to force detecting pre-built libefp and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_libefp=ON. Build without libefp. >>> cmake. Link against pre-built. >>> cmake -DENABLE_libefp=ON -DCMAKE_PREFIX_PATH=/path/to/libefp/root. >>> cmake -DENABLE_libefp=ON -Dlibefp_DIR=/path/to/libefp/configdir. Build bundled despite pre-built being detectable. >>> cmake -DENABLE_libefp=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/libefp/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_libefp=ON. table of contents. Interface to LIBEFP by I. Kaliman; Installation; EFP Fragments; Molecule Specification; Running EFP; Fragment Library; How to configure libefp for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to LIBEFP by I. Kaliman. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/libefp.html:9091,update,updated,9091,psi4manual/1.8.x/libefp.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/libefp.html,1,['update'],['updated']
Deployability,"the LIBEFP library.; These systems are accessible in molecule {...} blocks without; additional configuration. How to configure libefp for building Psi4¶; Role and Dependencies. Role — In PSI4, libefp is a library that provides additional; molecular modeling capabilities (EFP).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) libefp; Upstream Dependencies — libefp \(\Leftarrow\) BLAS/LAPACK. CMake Variables. ENABLE_libefp — CMake variable toggling whether Psi4 builds with libefp; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For libefp, set to an installation directory containing include/efp.h; libefp_DIR — CMake variable to specify where pre-built libefp can be found. Set to installation directory containing share/cmake/libefp/libefpConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_libefp — CMake variable to force internal build of libefp instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_libefp — CMake variable to force detecting pre-built libefp and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_libefp=ON. Build without libefp. >>> cmake. Link against pre-built. >>> cmake -DENABLE_libefp=ON -DCMAKE_PREFIX_PATH=/path/to/libefp/root. >>> cmake -DENABLE_libefp=ON -Dlibefp_DIR=/path/to/libefp/configdir. Build bundled despite pre-built being detectable. >>> cmake -DENABLE_libefp=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/libefp/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_libefp=ON. table of contents. Interface to LIBEFP by I. Kaliman; Installation; EFP Fragments; Molecule Specification; Running EFP; Fragment Library; How to configure libefp for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.9.1;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to LIBEFP by I. Kaliman. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 08 February 2024 09:32PM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/libefp.html:9091,update,updated,9091,psi4manual/1.9.x/libefp.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/libefp.html,1,['update'],['updated']
Deployability,"the Python developer libraries; installed look for the Python config program. If your Python interpreter; is named python look for the config program python-config,; likewise if your interpreter is python2.6, the config program is; python2.6-config. If you cannot find the config program the; developer libraries will not be detected and the PSI4 configure script; will fail. The library is called python-devel for Fedora and; python-dev for Ubuntu. GNU utilities: (see http://www.gnu.org). make. autoconf (version 2.52 or higher). Note; autoconf is only needed for special; architectures, to compile with MADNESS, or to compile the; development branch. aclocal. fileutils (esp. install). For documentation: (available pre-built off http://www.psicode.org). latex; sphinx (version 1.1 or higher); dvipng (for latex math in html). To make a distributed-parallel version with MADNESS, you may also need:. libtool (called by autoreconf). For Ubuntu users, you will need the following packages installed:; gfortran [for linking to BLAS/LAPACK], g++, autoconf, python-dev. II. Brief Summary of Configuration, Compilation, and Installation¶; This section outlines the main steps of configuring, compiling, and; installing PSI. More detail is given below in Section III. Autoconf. For unusual architectures (or for developers working in the development; branch), one needs to first run autoconf to generate; the file “configure” in the top-level psi4 directory. For most Linux; and Mac compilations, this should not be necessary because the configure; file provided with PSI4 should be sufficient. To replace the general; configure file with one specific to your architecture, in the top-level; psi4 directory, run autoconf:; >>> autoconf. Distributed-parallel compilation.; Not recommended at this time except for developers. Shared-memory; parallelization is already enabled by default in the standard; compilation.; Distributed-parallel versions of PSI4 require madness. If you select; mpicxx as the compi",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/installfile.html:2229,install,installed,2229,psi4manual/4.0b5/installfile.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/installfile.html,1,['install'],['installed']
Deployability,"the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. This example uses frozen core as well as MP2 natural orbital approximations. dct5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\)). psimrcc-sp1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. dft-custom-dhdf; DSD-PBEP86 S22 Ammonia test. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. tu2-ch2-energy; Sample UHF/6-31G** CH2 computation. mp2-property; MP2 cc-pvDZ properties for Nitrogen oxide. cdremp-2; Cholesky decomposed REMP/cc-pVDZ energies for the CH3 radical. frac-traverse; Scan fractional occupation of electrons updated values due to new BraggSlater radii. cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. scf-ecp; Water-Argon complex with ECP present; check of energies and forces. dlpnomp2-3; comparison of DF-MP2 and DLPNO-MP2 with a cartesian basis set. scf-hess2; UHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. This test should match RHF values exactly. scf-level-shift-cuhf; SCF level shift on a CUHF computation. cubeprop; RHF orbitals and density for water. fci-tdm; He2+ FCI/cc-pVDZ Transition Dipole Moment. scf-hess1; RHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (199",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/autodoc_testsuite_corepsi4.html:10529,update,updated,10529,psi4manual/1.8.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodoc_testsuite_corepsi4.html,2,['update'],['updated']
Deployability,"the cbs() wrapper,; which automatically computes a complete-basis-set extrapolation (and; automatically sets up the computations with different basis sets required to; do the extrapolation). For example,:; 1; 2; 3; 4; 5# all equivalent. cbs('mp2', corl_basis='cc-pv[dt]z', corl_scheme=corl_xtpl_helgaker_2). energy('mp2/cc-pv[dt]z'). will compute a 2-point Helgaker extrapolation of the correlation energy; using the cc-pVDZ and cc-pVTZ basis sets (with method MP2) and add this; extrapolated correlation energy to the Hartree–Fock energy in the; largest basis (cc-pVTZ). cbs() can; either be called directly, as in the first example, or the convenience; syntax of the equivalent second example can be used.; Another very useful and powerful feature of PSI4 is the ability; to compute results on entire databases of molecules at a time,; as provided by the database() wrapper. For example,:; 1database('mp2', 'S22', cp=1, benchmark='S22B'). will perform DF-MP2 counterpoise-corrected interaction energies; (cp=1) on all members of Hobza’s S22 database set of van der Waals; dimers, and then compare the results against the S22B benchmark energies.; Built-in databases include S22, A24, HTBH, HBC6, HSG, S22by5, S66, JSCH,; NCB31, S66by8, and NBC10, among others.; These wrapper functions are discussed separately in; Psithon Functions: Invoking a Calculation. Note that the options documented for Python; functions are placed as arguments in the command that calls the function,; not in the set {...} block or with any other set command. table of contents. Psithon: Structuring an Input File; Physical Constants; Memory Specification; Molecule and Geometry Specification; Job Control Keywords; Basis Sets; PSI Variables; Return Values; Loops; Tables of Results; Python Wrappers. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/psithoninput-1.html:16130,update,updated,16130,psi4manual/1.3.2/psithoninput-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithoninput-1.html,2,['update'],['updated']
Deployability,"the default), no or None (meaning; an answer is required of the user).; The return value is one of True or False. File for accessory procedures in the chem module.; Credit for the libmints vector3 class to Justin M. Turney and; incremental improvements by other psi4 developers. add(v, u)[source]¶; Compute sum of vectors v and u. cross(v, u)[source]¶; Compute cross product of length 3 vectors v and u. determinant(mat)[source]¶; Given 3x3 matrix mat, compute the determinat. diagonalize3x3symmat(A)[source]¶; Given an real symmetric 3x3 matrix A, compute the eigenvalues. distance(v, u)[source]¶; Compute the distance between points defined by vectors v and u. dot(v, u)[source]¶; Compute dot product of vectors v and u. mscale(matrix, d)[source]¶; Return matrix scaled by scalar d. mult(matrix1, matrix2)[source]¶; Matrix multiplication. norm(v)[source]¶; Compute the magnitude of vector v. normalize(v)[source]¶; Compute normalized vector v. perp_unit(u, v)[source]¶; Compute unit vector perpendicular to length 3 vectors u and v. rotate(v, theta, axis)[source]¶; Rotate length 3 vector v about axis by theta radians. scale(v, d)[source]¶; Compute by-element scale by d of vector v. show(matrix)[source]¶; Print out matrix. sub(v, u)[source]¶; Compute difference of vectors v - u. transpose(matrix)[source]¶; Return matrix transpose. zero(m, n)[source]¶; Create zero matrix. Table Of Contents. Python Driver; basislist; input; pubchem; psiexceptions; frac; molutil; proc; dashparam; procutil; driver; optproc; gaussian_n; physconst; wrappers; qmmm; basislistother; diatomic; functional; text; util; basislistdunning; aliases; qcdb. Previous topic; Adding Methods to Driver; Next topic; PsiMod: Linking C++ and Python; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » . © Copyright 2013, The Psi4 Project.; Last updated on Apr 25, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/autodoc_driver-1.html:66257,update,updated,66257,psi4manual/4.0b4/autodoc_driver-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_driver-1.html,2,['update'],['updated']
Deployability,"the full and; truncated spaces captures much of the missing correlation effects. More; details on the implementation and numerical accuracy of FNO methods in; Psi4 can be found in Ref. [DePrince:2013:293]. FNO computations; are controlled through the keywords NAT_ORBS and; OCC_TOLERANCE, or by prepending a valid method name with “fno” in; the energy call as; energy('fno-ccsd(t)'). If you wish to specify the number of active natural orbitals manually, use; the keyword ACTIVE_NAT_ORBS. This keyword will override the; keyword OCC_TOLERANCE. QCISD(T), CCSD(T), MP4, and CEPA¶; The FNOCC module in Psi4 supports several related many-body quantum; chemistry methods, including the CCSD(T) and QCISD(T) methods, several; orders of many-body perturbation theory (MP2-MP4), and a family methods; related to the coupled electron pair approximation (CEPA). Quadratic configuration interaction and coupled cluster¶; The quadratic configuration interaction singles doubles (QCISD) method of; Pople, Head-Gordon, and Raghavachari [Pople:1987:5968] was originally; presented as a size-consistent extension of configuration interaction; singles doubles (CISD). The method can also be obtained as a; simplified version of the coupled cluster singles doubles (CCSD); method [Purvis:1982]. Consider the set of equations defining CCSD:. (1); where we have chosen the intermediate normalization,; , and the symbols ; and represent single and double excitation operators. The; QCISD equations can be obtained by omitting all but two terms that; are nonlinear in and :. (2); QCISD is slightly cheaper that CCSD computationally, but it retains the; complexity of the original equations. Just as in; the familiar CCSD(T) method, the effects of connected triple excitations; may be included noniteratively to yield the QCISD(T) method. Both the; QCISD(T) and CCSD(T) methods are implemented for closed-shell references; in the FNOCC module. Many-body perturbation theory¶; QCI and CC methods are closely related to pertur",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/fnocc-1.html:3054,configurat,configuration,3054,psi4manual/1.0.0/fnocc-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/fnocc-1.html,6,['configurat'],['configuration']
Deployability,"the index. Note we didn’t need to specify ghost atoms, and we didn’t need; to call the monomer and dimer computations separately. The built-in; Psithon function cp() does it all for us, automatically.; And that’s it! The only remaining part of the example input is a little table; of the different R values and the CP-corrected CCSD(T) energies, converted from; atomic units (hartree) to kcal mol-1 by multiplying by the; automatically-defined conversion factor psi_hartree2kcalmol, which is; defined in Sec. Scratch Files and the ~/.psi4rc File. Notice the loop over to create; the table looks just like the loop over R to run the different; computations, and the CP-corrected energies ecp[R] are accessed the same; way they were stored. The print line at the end just specifies some; formatting for the printed table (first element is a floating point number 3; spaces wide with one digit after the decimal, and the second element is a; floating point number 10 spaces wide with 6 digits after the decimal); the; format strings are the same as in the C programming language. For tables more; complicated than the simple one used here, Psithon has built-in support for; tables (see the next section).; The following section goes over Psithon in much more detail, but; hopefully this example already makes it clear that many complex tasks; can be done very easily in PSI4. Table Of Contents. A PSI4 Tutorial; Basic Input File Structure; Running a Basic Hartree–Fock Calculation; Geometry Optimization and Vibrational Frequency Analysis; Analysis of Intermolecular Interactions; Potential Surface Scans and Counterpoise Correction Made Easy with Psithon. Previous topic; Introduction; Next topic; Configuration: Preparing PSI4’s Environment; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules |. next |. previous |; PSI4 [beta2] » . © Copyright 2012, Psi4 Project.; Last updated on Aug 25, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/tutorial-1.html:20437,update,updated,20437,psi4manual/4.0b2/tutorial-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/tutorial-1.html,2,['update'],['updated']
Deployability,"the installed or staged Psi4; How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; How to set PSIDATADIR and why; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4; How to configure Python for building Psi4; What Python is Psi4 running; How to fix “undefined symbol: _Py_FalseStruct“; How to use gdb and lldb with Psi4; How to see the actual compiling commands (or errors) with cmake; How to highlight git merge conflicts in vi; How to handle “runtime library may be hidden” when building with Anaconda Python; How to set up the scratch directory; How do I retain specific Psi4 scratch files; How to use Psi4 within a PBS queue; How to update and rebuild Psi4; How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation; How to refer to Psi4. Installing from Binary; How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; Quick Installation; Detailed Installation of Miniconda; Detailed Installation of PSI4; Useful Commands; Troubleshooting. Scra",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/external-1.html:2804,update,update,2804,psi4manual/1.1.0/external-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/external-1.html,4,"['install', 'update']","['installation', 'update']"
Deployability,"the isosurface value (float, default = 0.05); --rx [<angle>] the x-axis rotation angle (float, default = 30.0); --ry [<angle>] the y-axis rotation angle (float, default = 40.0); --rz [<angle>] the z-axis rotation angle (float, default = 15.0); --tx [<length>] the x-axis translation (float, default = 0.0); --ty [<length>] the y-axis translation (float, default = 0.0); --tz [<length>] the z-axis translation (float, default = 0.0); --opacity [<opacity>]; opacity of the isosurface (float, default = 1.0); --scale [<factor>] the scaling factor (float, default = 1.0); --no-montage call montage to combine images. (string, default =; false); --no-labels do not add labels to images. (string, default = false); --imagesize [<integer>]; the size of each image (integer, default = 250); --imagew [<integer>] the width of images (integer, default = 250); --imageh [<integer>] the height of images (integer, default = 250); --fontsize [<integer>]; the font size (integer, default = 20); --interactive run in interactive mode (default = false); --gzip gzip cube files (default = false); --national_scheme use a red/blue color scheme. (string, default = false); --silver_scheme use a gray/white color scheme. (string, default =; false); --bright_scheme use a soft yellow/blue color scheme. (string, default; = false); --electron_scheme use a purple/green color scheme. (string, default =; false). table of contents. Generation of Cube Files — cubeprop(); Introduction; Cubeprop Tasks; Keywords; CUBEPROP_TASKS; CUBEPROP_FILEPATH; CUBEPROP_ORBITALS; CUBEPROP_BASIS_FUNCTIONS; CUBIC_GRID_SPACING; CUBIC_GRID_OVERAGE. Orbital Visualization with VMD; Script Prerequisites; Running the Script; Script Options. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Psithon Functions: Invoking a Calculation; Generation of Cube Files — cubeprop(). © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/cubeprop-1.html:11912,update,updated,11912,psi4manual/1.4.0/cubeprop-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cubeprop-1.html,2,['update'],['updated']
Deployability,"the isosurface value (float, default = 0.05); --rx [<angle>] the x-axis rotation angle (float, default = 30.0); --ry [<angle>] the y-axis rotation angle (float, default = 40.0); --rz [<angle>] the z-axis rotation angle (float, default = 15.0); --tx [<length>] the x-axis translation (float, default = 0.0); --ty [<length>] the y-axis translation (float, default = 0.0); --tz [<length>] the z-axis translation (float, default = 0.0); --opacity [<opacity>]; opacity of the isosurface (float, default = 1.0); --scale [<factor>] the scaling factor (float, default = 1.0); --no-montage call montage to combine images. (string, default =; false); --no-labels do not add labels to images. (string, default = false); --imagesize [<integer>]; the size of each image (integer, default = 250); --imagew [<integer>] the width of images (integer, default = 250); --imageh [<integer>] the height of images (integer, default = 250); --fontsize [<integer>]; the font size (integer, default = 20); --interactive run in interactive mode (default = false); --gzip gzip cube files (default = false); --national_scheme use a red/blue color scheme. (string, default = false); --silver_scheme use a gray/white color scheme. (string, default =; false); --bright_scheme use a soft yellow/blue color scheme. (string, default; = false); --electron_scheme use a purple/green color scheme. (string, default =; false). table of contents. Generation of Cube Files — cubeprop(); Introduction; Cubeprop Tasks; Keywords; CUBEPROP_TASKS; CUBEPROP_FILEPATH; CUBEPROP_ORBITALS; CUBEPROP_BASIS_FUNCTIONS; CUBIC_GRID_SPACING; CUBIC_GRID_OVERAGE. Orbital Visualization with VMD; Script Prerequisites; Running the Script; Script Options. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Psithon Functions: Invoking a Calculation; Generation of Cube Files — cubeprop(). © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/cubeprop-1.html:11912,update,updated,11912,psi4manual/1.5.0/cubeprop-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/cubeprop-1.html,2,['update'],['updated']
Deployability,"the memory requirements of the conventional algorithm would exceed the available resources. The low memory algorithm is faster in general and has been turned on by default starting September 2020. Type: boolean; Default: true. Expert¶. CEPA_LEVEL¶. Which coupled-pair method is called? This parameter is used internally by the python driver. Changing its value won’t have any effect on the procedure. Type: string; Default: CEPA(0). COMPUTE_MP4_TRIPLES¶. Do compute MP4 triples contribution?. Type: boolean; Default: false. COMPUTE_TRIPLES¶. Do compute triples contribution?. Type: boolean; Default: true. RUN_CCSD¶. do ccsd rather than qcisd?. Type: boolean; Default: false. RUN_CEPA¶. Is this a CEPA job? This parameter is used internally by the pythond driver. Changing its value won’t have any effect on the procedure. Type: boolean; Default: false. RUN_MP2¶. do only evaluate mp2 energy?. Type: boolean; Default: false. RUN_MP3¶. do only evaluate mp3 energy?. Type: boolean; Default: false. RUN_MP4¶. do only evaluate mp4 energy?. Type: boolean; Default: false. USE_DF_INTS¶. Use 3-index integrals to generate 4-index ERI’s? This keyword is used for testing purposes only. Changing its value will have no effect on the computation. Type: boolean; Default: false. table of contents. FNOCC; General; ACTIVE_NAT_ORBS; BRUECKNER_MAXITER; CC_SCALE_OS; CC_SCALE_SS; CC_TIMINGS; CEPA_NO_SINGLES; CHOLESKY_TOLERANCE; DFCC; DF_BASIS_CC; DIIS_MAX_VECS; DIPMOM; E_CONVERGENCE; MAXITER; MP2_SCALE_OS; MP2_SCALE_SS; NAT_ORBS; OCC_PERCENTAGE; OCC_TOLERANCE; R_CONVERGENCE; SCS_CCSD; SCS_CEPA; SCS_MP2; TRIPLES_LOW_MEMORY. Expert; CEPA_LEVEL; COMPUTE_MP4_TRIPLES; COMPUTE_TRIPLES; RUN_CCSD; RUN_CEPA; RUN_MP2; RUN_MP3; RUN_MP4; USE_DF_INTS. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; FNOCC. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/autodir_options_c/module__fnocc.html:5258,update,updated,5258,psi4manual/1.8.x/autodir_options_c/module__fnocc.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/module__fnocc.html,1,['update'],['updated']
Deployability,"the memory requirements of the conventional algorithm would exceed the available resources. The low memory algorithm is faster in general and has been turned on by default starting September 2020. Type: boolean; Default: true. Expert¶. CEPA_LEVEL¶. Which coupled-pair method is called? This parameter is used internally by the python driver. Changing its value won’t have any effect on the procedure. Type: string; Default: CEPA(0). COMPUTE_MP4_TRIPLES¶. Do compute MP4 triples contribution?. Type: boolean; Default: false. COMPUTE_TRIPLES¶. Do compute triples contribution?. Type: boolean; Default: true. RUN_CCSD¶. do ccsd rather than qcisd?. Type: boolean; Default: false. RUN_CEPA¶. Is this a CEPA job? This parameter is used internally by the pythond driver. Changing its value won’t have any effect on the procedure. Type: boolean; Default: false. RUN_MP2¶. do only evaluate mp2 energy?. Type: boolean; Default: false. RUN_MP3¶. do only evaluate mp3 energy?. Type: boolean; Default: false. RUN_MP4¶. do only evaluate mp4 energy?. Type: boolean; Default: false. USE_DF_INTS¶. Use 3-index integrals to generate 4-index ERI’s? This keyword is used for testing purposes only. Changing its value will have no effect on the computation. Type: boolean; Default: false. table of contents. FNOCC; General; ACTIVE_NAT_ORBS; BRUECKNER_MAXITER; CC_SCALE_OS; CC_SCALE_SS; CC_TIMINGS; CEPA_NO_SINGLES; CHOLESKY_TOLERANCE; DFCC; DF_BASIS_CC; DIIS_MAX_VECS; DIPMOM; E_CONVERGENCE; MAXITER; MP2_SCALE_OS; MP2_SCALE_SS; NAT_ORBS; OCC_PERCENTAGE; OCC_TOLERANCE; R_CONVERGENCE; SCS_CCSD; SCS_CEPA; SCS_MP2; TRIPLES_LOW_MEMORY. Expert; CEPA_LEVEL; COMPUTE_MP4_TRIPLES; COMPUTE_TRIPLES; RUN_CCSD; RUN_CEPA; RUN_MP2; RUN_MP3; RUN_MP4; USE_DF_INTS. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.9.1;  · . PSI4. Appendices; Keywords by Module; FNOCC. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 08 February 2024 09:32PM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/autodir_options_c/module__fnocc.html:5258,update,updated,5258,psi4manual/1.9.x/autodir_options_c/module__fnocc.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/autodir_options_c/module__fnocc.html,1,['update'],['updated']
Deployability,"the name of the current molecule. molden(wfn, filename)[source]¶; Function to write wavefunction information in wfn to filename in; molden format. Will write natural orbitals from density (MO basis) if supplied. New in version 0.5: wfn parameter passed explicitly. Returns:None. Parameters:; wfn (Wavefunction) – set of molecule, basis, orbitals from which to generate cube files; filename (string) – destination file name for MOLDEN file; density_a (psi4.Matrix) – density in the MO basis to build alpha NO’s from (optional); density_b (psi4.Matrix) – density in the MO basis to build beta NO’s from, assumes restricted if not supplied (optional). Examples:. >>> # [1] Molden file for DFT calculation; >>> E, wfn = energy('b3lyp', return_wfn=True); >>> molden(wfn, 'mycalc.molden'). >>> # [2] Molden file for CI/MCSCF computation using NO roots; >>> E, wfn = energy('ci', return_wfn=True); >>> molden(wfn, 'no_root1.molden', density_a=wfn.opdm(0, 0, ""A"", True)). Options¶. MOLDEN_WRITE¶. Do write a MOLDEN output file? If so, the filename will end in .molden, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. WRITER_FILE_LABEL¶. Base filename for text files written by PSI, such as the MOLDEN output file, the Hessian file, the internal coordinate file, etc. Use the add_str_i function to make this string case sensitive. Type: string; Default: No Default. Table Of Contents. Interface to Molden, molden(); Options; MOLDEN_WRITE; WRITER_FILE_LABEL. Previous topic; Interface to PCMSolver; Next topic; Interface to MRCC by M. Kállay. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Interfaces: Enhancing Psi4 Capabilities ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/molden-1.html:3069,update,updated,3069,psi4manual/1.0.0/molden-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/molden-1.html,2,['update'],['updated']
Deployability,"the orbital occupancy of the reference function in terms of the occupation numbers of the orbitals and their irreducible representations. The occupancy is specified by either NIRREP or 2*NIRREP integers specifying the number of occupied orbitals of each symmetry type, where NIRREP is the number of irreducible representations in the computational point group. If there are no orbitals of a particular symmetry type a zero must be entered. If the reference function is for an open-shell system, two strings of NIRREP occupation numbers separated by a slash are input for the \(\alpha\) and \(\beta\) sets of orbitals. An example of the use of the OCCUPATION keyword for the water molecule would be OCCUPATION=3-1-1-0. For the \(^2A_1\) water cation, an open-shell system, the keyword would be specified by OCCUPATION=3-1-1-0/2-1-1-0. It should be noted that the xvmol integral program orders the irreducible representations in a strange way, which most users do not perceive to be a logical order. Hence, it is usually advisable initially to run just a single point integral and HF-SCF calculation in order to determine the number and ordering of the irreducible representations. The occupation keyword may be omitted, in which case an initial orbital occupancy is determined by diagonalization of the core Hamiltonian. In many cases, HF-SCF calculations run with the core Hamiltonian guess will usually converge to the lowest energy HF-SCF solution, but this should not be blindly assumed. (Default: The occupation is given by the core Hamiltonian initial guess). Psi4 Interface: The arrays above are specified in PSI as (white space tolerant) [3,1,1,0] and [[3,1,1,0],[3,0,1,0]]. Type: array; Default: No Default. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_OCCUPATION. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_occupation.html:2097,update,updated,2097,psi4manual/1.7.x/autodir_options_c/cfour__cfour_occupation.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_occupation.html,1,['update'],['updated']
Deployability,"the presence of all other; options. Below are some rough words of advice about using the SCF code for; practical calculations:. For GUESS, the SAD guess is usually your; friend, even for open-shell systems (at the very least, it gets the right; number of electrons, unlike some other programs). For instance, we have found; that a simple SAD guess is often as good as doing a full SCF in a 3-21G basis; and then performing a cast-up, at a fraction of the cost. However, SAD and; DOCC/SOCC arrays do not play very well together at the moment. Also, the SAD; UHF guess is very slow in large basis sets, so you may want to cast up for; >TZ.; For wall time, DF may be a factor of ten or more faster than the exact; integral technologies available in PSI4.; Use DF unless you need absolute accuracy or do not; have a -JKFIT auxiliary set for your primary basis/atom type. Then use; DIRECT.; Don’t mess with the DIIS convergence options unless convergence is a problem.; We have optimized the parameters for efficiency over a wide array of system; types.; Buy a developer a beer!. The “best-practice” input file for HF is:; memory 1 GB # As much as you've got, the DF algorithm can use. molecule {; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis cc-pvdz; scf_type df; guess sad; ints_tolerance 1.0E-10 # Even this is epically tight, 1.0E-8 is OK; }. energy('scf'). Table Of Contents. HF: Hartree–Fock Theory; Introduction; Theory; Minimal Input; Spin/Symmetry Treatment; Broken Symmetry; Orthogonalization; Initial Guess/Convergence Stabilization; ERI Algorithms; Convergence and Algorithm Defaults; Recommendations. Previous topic; Notes on Options; Next topic; DFT: Density Functional Theory; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Theoretical Methods: SCF to FCI ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 25, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/scf-1.html:25120,update,updated,25120,psi4manual/4.0b4/scf-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/scf-1.html,2,['update'],['updated']
Deployability,"the presence of all other; options. Below are some rough words of advice about using the SCF code for; practical calculations:. For GUESS, the SAD guess is usually your; friend, even for open-shell systems (at the very least, it gets the right; number of electrons, unlike some other programs). For instance, we have found; that a simple SAD guess is often as good as doing a full SCF in a 3-21G basis; and then performing a cast-up, at a fraction of the cost. However, SAD and; DOCC/SOCC arrays do not play very well together at the moment. Also, the SAD; UHF guess is very slow in large basis sets, so you may want to cast up for; >TZ.; For wall time, DF may be a factor of ten or more faster than the exact; integral technologies available in PSI4.; Use DF unless you need absolute accuracy or do not; have a -JKFIT auxiliary set for your primary basis/atom type. Then use; DIRECT.; Don’t mess with the DIIS convergence options unless convergence is a problem.; We have optimized the parameters for efficiency over a wide array of system; types.; Buy a developer a beer!. The “best-practice” input file for HF is:; memory 1 GB # As much as you've got, the DF algorithm can use. molecule {; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis cc-pvdz; scf_type df; guess sad; ints_tolerance 1.0E-10 # Even this is epically tight, 1.0E-8 is OK; }. energy('scf'). Table Of Contents. HF: Hartree–Fock Theory; Introduction; Theory; Minimal Input; Spin/Symmetry Treatment; Broken Symmetry; Orthogonalization; Initial Guess/Convergence Stabilization; ERI Algorithms; Convergence and Algorithm Defaults; Recommendations. Previous topic; Notes on Options; Next topic; DFT: Density Functional Theory; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Theoretical Methods: SCF to FCI ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/scf-1.html:25535,update,updated,25535,psi4manual/4.0b5/scf-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/scf-1.html,2,['update'],['updated']
Deployability,"the procedures/dft/<rung>_functionals-defined dictionaries; as legit, non-custom, and of equal validity to; qcengine.programs.empirical_dispersion_resources.dashcoeff itself for purposes of; validating fctldash. Type; dict. engine¶; {‘libdisp’, ‘dftd3’, ‘nl’, ‘mp2d’}; Compute engine for dispersion. One of Psi4’s internal libdisp; library, Grimme’s DFTD3 executable, or nl. Type; str. disp¶; Only present for engine =libdisp. Psi4 class instance prepared; to compute dispersion. Type; Dispersion. ordered_params¶; Fixed-order list of relevant parameters for dashlevel. Matches; DISPERSION CORRECTION ENERGY ordering. Used for printing. Type; list. Parameters. name_hint (Optional[str]) – Name of functional (func only, func & disp, or disp only) for; which to compute dispersion (e.g., blyp, BLYP-D2, blyp-d3bj,; blyp-d3(bj), hf+d). Any or all parameters initialized from; dashcoeff[dashlevel][functional-without-dashlevel] or; dashcoeff_supplement[dashlevel][functional-with-dashlevel]; can be overwritten via param_tweaks.; level_hint (Optional[str]) – Name of dispersion correction to be applied (e.g., d, D2,; d3(bj), das2010). Must be key in dashcoeff or “alias” or; “formal” to one.; param_tweaks (Union[Dict, List, None]) – Values for the same keys as dashcoeff[dashlevel][‘default’]; (and same order if list) used to override any or all values; initialized by name_hint. Extra parameters will error.; engine (Optional[str]) – Override which code computes dispersion. See above for allowed; values. Really only relevant for -D2, which can be computed by; libdisp or dftd3. table of contents. Interface to DFTD3 by S. Grimme; Installation; Theory; Running DFTD3; Three-Body Dispersion Corrections. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to DFTD3 by S. Grimme. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/dftd3-1.html:14466,update,updated,14466,psi4manual/1.4.0/dftd3-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dftd3-1.html,2,['update'],['updated']
Deployability,the requested configuration interaction level of theory. CI ROOT n -> ROOT m QUADRUPOLE XX¶. CI ROOT n -> ROOT m QUADRUPOLE XY¶. CI ROOT n -> ROOT m QUADRUPOLE XZ¶. CI ROOT n -> ROOT m QUADRUPOLE YY¶. CI ROOT n -> ROOT m QUADRUPOLE YZ¶. CI ROOT n -> ROOT m QUADRUPOLE ZZ¶; The three components of the transition quadrupole [Debye Ang] between; roots n and m for the requested configuration interaction level of; theory. CI ROOT n DIPOLE X¶. CI ROOT n DIPOLE Y¶. CI ROOT n DIPOLE Z¶; The three components of the dipole [Debye] for the requested; configuration interaction level of theory and root n. CI ROOT n QUADRUPOLE XX¶. CI ROOT n QUADRUPOLE XY¶. CI ROOT n QUADRUPOLE XZ¶. CI ROOT n QUADRUPOLE YY¶. CI ROOT n QUADRUPOLE YZ¶. CI ROOT n QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the requested; configuration interaction level of theory and root n. CI ROOT n TOTAL ENERGY¶. CI ROOT n CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested configuration interaction level of theory and root; n (numbering starts at 0). CI STATE-AVERAGED TOTAL ENERGY¶. CI STATE-AVERAGED CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for state-averaged CI/CASSCF levels of theory. CI TOTAL ENERGY¶. CI CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested configuration interaction level of theory and root. CISD DIPOLE X¶. CISD DIPOLE Y¶. CISD DIPOLE Z¶; The three components of the dipole [Debye] for the; configuration interaction singles and doubles level of theory and root. CISD QUADRUPOLE XX¶. CISD QUADRUPOLE XY¶. CISD QUADRUPOLE XZ¶. CISD QUADRUPOLE YY¶. CISD QUADRUPOLE YZ¶. CISD QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the; configuration interaction singles and doubles level of theory and root. CISD TOTAL ENERGY¶. CISD CORRELATION ENERGY¶. CISDT TOTAL ENERGY¶. CISDT CORRELATION ENERGY¶. CISDTQ ,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/glossary_psivariables-1.html:8193,configurat,configuration,8193,psi4manual/1.1.0/glossary_psivariables-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/glossary_psivariables-1.html,6,['configurat'],['configuration']
Deployability,the requested configuration interaction level of theory. CI ROOT n -> ROOT m QUADRUPOLE XX¶. CI ROOT n -> ROOT m QUADRUPOLE XY¶. CI ROOT n -> ROOT m QUADRUPOLE XZ¶. CI ROOT n -> ROOT m QUADRUPOLE YY¶. CI ROOT n -> ROOT m QUADRUPOLE YZ¶. CI ROOT n -> ROOT m QUADRUPOLE ZZ¶; The three components of the transition quadrupole [Debye Ang] between; roots n and m for the requested configuration interaction level of; theory. CI ROOT n DIPOLE X¶. CI ROOT n DIPOLE Y¶. CI ROOT n DIPOLE Z¶; The three components of the dipole [Debye] for the requested; configuration interaction level of theory and root n. CI ROOT n QUADRUPOLE XX¶. CI ROOT n QUADRUPOLE XY¶. CI ROOT n QUADRUPOLE XZ¶. CI ROOT n QUADRUPOLE YY¶. CI ROOT n QUADRUPOLE YZ¶. CI ROOT n QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the requested; configuration interaction level of theory and root n. CI ROOT n TOTAL ENERGY¶. CI ROOT n CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested configuration interaction level of theory and root; n (numbering starts at 1). CI STATE-AVERAGED TOTAL ENERGY¶. CI STATE-AVERAGED CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for state-averaged CI/CASSCF levels of theory. CI TOTAL ENERGY¶. CI CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested configuration interaction level of theory and root. CISD DIPOLE X¶. CISD DIPOLE Y¶. CISD DIPOLE Z¶; The three components of the dipole [Debye] for the; configuration interaction singles and doubles level of theory and root. CISD QUADRUPOLE XX¶. CISD QUADRUPOLE XY¶. CISD QUADRUPOLE XZ¶. CISD QUADRUPOLE YY¶. CISD QUADRUPOLE YZ¶. CISD QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the; configuration interaction singles and doubles level of theory and root. CISD TOTAL ENERGY¶. CISD CORRELATION ENERGY¶. CISDT TOTAL ENERGY¶. CISDT CORRELATION ENERGY¶. CISDTQ ,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/glossary_psivariables-1.html:7685,configurat,configuration,7685,psi4manual/1.0.0/glossary_psivariables-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/glossary_psivariables-1.html,8,['configurat'],['configuration']
Deployability,"the requested configuration interaction level of theory. CI ROOT n -> ROOT m QUADRUPOLE XX¶. CI ROOT n -> ROOT m QUADRUPOLE XY¶. CI ROOT n -> ROOT m QUADRUPOLE XZ¶. CI ROOT n -> ROOT m QUADRUPOLE YY¶. CI ROOT n -> ROOT m QUADRUPOLE YZ¶. CI ROOT n -> ROOT m QUADRUPOLE ZZ¶; The three components of the transition quadrupole [Debye Ang] between; roots n and m for the requested configuration interaction level of; theory. CI ROOT n DIPOLE X¶. CI ROOT n DIPOLE Y¶. CI ROOT n DIPOLE Z¶; The three components of the dipole [Debye] for the requested; configuration interaction level of theory and root n. CI ROOT n QUADRUPOLE XX¶. CI ROOT n QUADRUPOLE XY¶. CI ROOT n QUADRUPOLE XZ¶. CI ROOT n QUADRUPOLE YY¶. CI ROOT n QUADRUPOLE YZ¶. CI ROOT n QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the requested; configuration interaction level of theory and root n. CI ROOT n TOTAL ENERGY¶. CI ROOT n CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested configuration interaction level of theory and root; n (numbering starts at 1). CI STATE-AVERAGED TOTAL ENERGY¶. CI STATE-AVERAGED CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for state-averaged CI/CASSCF levels of theory. CI TOTAL ENERGY¶. CI CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested configuration interaction level of theory and root. CISD TOTAL ENERGY¶. CISD CORRELATION ENERGY¶. CISDT TOTAL ENERGY¶. CISDT CORRELATION ENERGY¶. CISDTQ CORRELATION ENERGY¶. CISDTQ TOTAL ENERGY¶. CIn CORRELATION ENERGY¶. CIn TOTAL ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the labeled configuration interaction level of theory and root.; n is CI order for n > 4. CP-CORRECTED 2-BODY INTERACTION ENERGY¶; The interaction energy [H] considering only two-body interactions,; computed with counterpoise correction.; Related variable UNCP-CORREC",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/glossary_psivariables-1.html:3292,configurat,configuration,3292,psi4manual/4.0b2/glossary_psivariables-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/glossary_psivariables-1.html,2,['configurat'],['configuration']
Deployability,"the same value as DDX_LMAX is recommended and done by default. Type: integer; Default: 9. DDX_FMM¶. Use the fast multipole method to accelerate the solver. Type: boolean; Default: true. DDX_INCORE¶. Use an in-core version, which uses more memory, but is generally faster. Type: boolean; Default: false. DDX_LOGFILE¶. Logfile to dump a full trace of the DDX solver history for debugging. Type: string; Default: No Default. DDX_SHIFT¶. Shift for characteristic function of sphere overlap. Advanced parameter, which usually does not need to be modified. Valid values are within the range [-1, 1] with -100 denoting an automatic selection of the best shift. Type: double; Default: -100.0. How to configure ddx for building Psi4¶; Role and Dependencies. Role — In PSI4, ddx is a library for providing fast continuum; solvation models.; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) ddx; Upstream Dependencies — ddx \(\Leftarrow\) Fortran. CMake Variables. ENABLE_ddx — CMake variable toggling whether Psi4 automatically installs ddx. Examples. Build and install ddx if needed. >>> cmake -DENABLE_ddx=ON. Build without ddx. >>> cmake. table of contents. Interface to ddx by A. Mikhalev, A. Jha, M. Nottoli and M. F. Herbst; Installation; Using dd-based continum solvation models; Solvent model and solvent cavity definition; DDX; DDX_MODEL; DDX_RADII; DDX_RADII_SCALING; DDX_RADII_SET; DDX_SOLVENT_EPSILON; DDX_SOLVENT. Numerical integration and discretisation parameters; DDX_SOLUTE_RADIAL_POINTS; DDX_SOLUTE_SPHERICAL_POINTS; DDX_LMAX; DDX_N_LEBEDEV. Iterative solver parameters; DDX_DIIS_MAX_VECS; DDX_MAXITER; DDX_SOLVATION_CONVERGENCE. Further keywords for ddx; DDX_ETA; DDX_FMM_LOCAL_LMAX; DDX_FMM_MULTIPOLE_LMAX; DDX_FMM; DDX_INCORE; DDX_LOGFILE; DDX_SHIFT. How to configure ddx for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to ddx by A. Mikhalev, A. Jha, M. Not",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/ddx.html:9500,install,installs,9500,psi4manual/1.7.x/ddx.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/ddx.html,1,['install'],['installs']
Deployability,"the same value as DDX_LMAX is recommended and done by default. Type: integer; Default: 9. DDX_FMM¶. Use the fast multipole method to accelerate the solver. Type: boolean; Default: true. DDX_INCORE¶. Use an in-core version, which uses more memory, but is generally faster. Type: boolean; Default: false. DDX_LOGFILE¶. Logfile to dump a full trace of the DDX solver history for debugging. Type: string; Default: No Default. DDX_SHIFT¶. Shift for characteristic function of sphere overlap. Advanced parameter, which usually does not need to be modified. Valid values are within the range [-1, 1] with -100 denoting an automatic selection of the best shift. Type: double; Default: -100.0. How to configure ddx for building Psi4¶; Role and Dependencies. Role — In PSI4, ddx is a library for providing fast continuum; solvation models.; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) ddx; Upstream Dependencies — ddx \(\Leftarrow\) Fortran. CMake Variables. ENABLE_ddx — CMake variable toggling whether Psi4 automatically installs ddx. Examples. Build and install ddx if needed. >>> cmake -DENABLE_ddx=ON. Build without ddx. >>> cmake. table of contents. Interface to ddx by A. Mikhalev, A. Jha, M. Nottoli and M. F. Herbst; Installation; Using dd-based continum solvation models; Solvent model and solvent cavity definition; DDX; DDX_MODEL; DDX_RADII; DDX_RADII_SCALING; DDX_RADII_SET; DDX_SOLVENT_EPSILON; DDX_SOLVENT; DDX_SOLVENT_KAPPA. Numerical integration and discretisation parameters; DDX_SOLUTE_RADIAL_POINTS; DDX_SOLUTE_SPHERICAL_POINTS; DDX_LMAX; DDX_N_LEBEDEV. Iterative solver parameters; DDX_DIIS_MAX_VECS; DDX_MAXITER; DDX_SOLVATION_CONVERGENCE. Further keywords for ddx; DDX_ETA; DDX_FMM_LOCAL_LMAX; DDX_FMM_MULTIPOLE_LMAX; DDX_FMM; DDX_INCORE; DDX_LOGFILE; DDX_SHIFT. How to configure ddx for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to ddx by",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/ddx.html:10867,install,installs,10867,psi4manual/master/ddx.html,https://psicode.org,https://psicode.org/psi4manual/master/ddx.html,1,['install'],['installs']
Deployability,"the same value as DDX_LMAX is recommended and done by default. Type: integer; Default: 9. DDX_FMM¶. Use the fast multipole method to accelerate the solver. Type: boolean; Default: true. DDX_INCORE¶. Use an in-core version, which uses more memory, but is generally faster. Type: boolean; Default: false. DDX_LOGFILE¶. Logfile to dump a full trace of the DDX solver history for debugging. Type: string; Default: No Default. DDX_SHIFT¶. Shift for characteristic function of sphere overlap. Advanced parameter, which usually does not need to be modified. Valid values are within the range [-1, 1] with -100 denoting an automatic selection of the best shift. Type: double; Default: -100.0. How to configure ddx for building Psi4¶; Role and Dependencies. Role — In PSI4, ddx is a library for providing fast continuum; solvation models.; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) ddx; Upstream Dependencies — ddx \(\Leftarrow\) Fortran. CMake Variables. ENABLE_ddx — CMake variable toggling whether Psi4 automatically installs ddx. Examples. Build and install ddx if needed. >>> cmake -DENABLE_ddx=ON. Build without ddx. >>> cmake. table of contents. Interface to ddx by A. Mikhalev, A. Jha, M. Nottoli and M. F. Herbst; Installation; Using dd-based continum solvation models; Solvent model and solvent cavity definition; DDX; DDX_MODEL; DDX_RADII; DDX_RADII_SCALING; DDX_RADII_SET; DDX_SOLVENT_EPSILON; DDX_SOLVENT; DDX_SOLVENT_KAPPA. Numerical integration and discretisation parameters; DDX_SOLUTE_RADIAL_POINTS; DDX_SOLUTE_SPHERICAL_POINTS; DDX_LMAX; DDX_N_LEBEDEV. Iterative solver parameters; DDX_DIIS_MAX_VECS; DDX_MAXITER; DDX_SOLVATION_CONVERGENCE. Further keywords for ddx; DDX_ETA; DDX_FMM_LOCAL_LMAX; DDX_FMM_MULTIPOLE_LMAX; DDX_FMM; DDX_INCORE; DDX_LOGFILE; DDX_SHIFT. How to configure ddx for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to ddx by A. Mik",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/ddx.html:10729,install,installs,10729,psi4manual/1.8.x/ddx.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/ddx.html,1,['install'],['installs']
Deployability,"the same value as DDX_LMAX is recommended and done by default. Type: integer; Default: 9. DDX_FMM¶. Use the fast multipole method to accelerate the solver. Type: boolean; Default: true. DDX_INCORE¶. Use an in-core version, which uses more memory, but is generally faster. Type: boolean; Default: false. DDX_LOGFILE¶. Logfile to dump a full trace of the DDX solver history for debugging. Type: string; Default: No Default. DDX_SHIFT¶. Shift for characteristic function of sphere overlap. Advanced parameter, which usually does not need to be modified. Valid values are within the range [-1, 1] with -100 denoting an automatic selection of the best shift. Type: double; Default: -100.0. How to configure ddx for building Psi4¶; Role and Dependencies. Role — In PSI4, ddx is a library for providing fast continuum; solvation models.; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) ddx; Upstream Dependencies — ddx \(\Leftarrow\) Fortran. CMake Variables. ENABLE_ddx — CMake variable toggling whether Psi4 automatically installs ddx. Examples. Build and install ddx if needed. >>> cmake -DENABLE_ddx=ON. Build without ddx. >>> cmake. table of contents. Interface to ddx by A. Mikhalev, A. Jha, M. Nottoli and M. F. Herbst; Installation; Using dd-based continum solvation models; Solvent model and solvent cavity definition; DDX; DDX_MODEL; DDX_RADII; DDX_RADII_SCALING; DDX_RADII_SET; DDX_SOLVENT_EPSILON; DDX_SOLVENT; DDX_SOLVENT_KAPPA. Numerical integration and discretisation parameters; DDX_SOLUTE_RADIAL_POINTS; DDX_SOLUTE_SPHERICAL_POINTS; DDX_LMAX; DDX_N_LEBEDEV. Iterative solver parameters; DDX_DIIS_MAX_VECS; DDX_MAXITER; DDX_SOLVATION_CONVERGENCE. Further keywords for ddx; DDX_ETA; DDX_FMM_LOCAL_LMAX; DDX_FMM_MULTIPOLE_LMAX; DDX_FMM; DDX_INCORE; DDX_LOGFILE; DDX_SHIFT. How to configure ddx for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.9.1;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to ddx by A. Mik",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/ddx.html:10860,install,installs,10860,psi4manual/1.9.x/ddx.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/ddx.html,1,['install'],['installs']
Deployability,"the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. mints2-bse; Similar to mints2, but using the BSE to specify the basis sets. x2c-perturb-h; Test SFX2C-1e with a static electric field on He aug-cc-pVTZ. mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. dfccsd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. soscf-large; Second-order SCF convergnece: Benzene. dft-grad1; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN update ref gradient due to new BraggSlater radii. scf-hess5; DF SCF 6-31G analytical vs finite-difference tests Tests DF UHF hessian code for Ca != Cb. pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. omp3-grad1; OMP3 cc-pVDZ gradient for the H2O molecule. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. mom-h2o-3; MOM excitation from LUMO HOMO+3. dfccsdt2; DF-CCSD(T) cc-pVDZ energy for the NH molecule. dfmp2-ecp; Ne-Xe dimer MP2 energies with ECP, with electrons correlated then frozen. ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/autodoc_testsuite_corepsi4.html:18876,update,update,18876,psi4manual/1.8.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodoc_testsuite_corepsi4.html,2,['update'],['update']
Deployability,"the; MRCC procedure.; Doubly occupied orbitals (RESTRICTED_DOCC) are doubly; occupied in each reference determinant and are correlated in the MRCC; procedure.; Active orbitals (ACTIVE) are partially occupied in each; reference determinant.; Frozen virtual orbitals (FROZEN_UOCC) are unoccupied in; all reference determinants and are excluded from the correlated wave; function. The model space is selected by considering all possible occupations; of the electrons among the orbitals in the active space that result; in determinants with the correct symmetry (WFN_SYM); and the correct \(\textrm{M}_s\) value specified by the keyword; CORR_MULTP. Note that this does not consider the multiplicity; of the wavefunction. Thus, in order to obtain the wavefunction; with a set of \(\textrm{M}_s = 0\) reference determinants for; an open-shell system you should request a CORR_MULTP of; 1 within the PSIMRCC module, and select the root of the effective; Hamiltonian that corresponds to the state of interest. In addition,; the WFN_SYM keyword needs to be specified otherwise the; wavefunction belonging to the all-symmetric irrep will be selected. In; addition, it should be noted that for an open-shell singlet based; on two \(\textrm{M}_s = 0\) determinants the eigenvector is; [\(\frac{1}{\sqrt{2}}\text{,}\frac{1}{\sqrt{2}}\)], which corresponds; to a wavefunction of the following form:. \[\frac{1}{\sqrt{2}} \left( \chi_1 \alpha (1) \chi_2 \beta (2) + \chi_2 \alpha(1) \chi_1 \beta (2) \right)\]; See Appendix PSIMRCC for a complete list of PSIMRCC options. table of contents. PSIMRCC Implementation of Mk-MRCC Theory; A Simple Example; Orbital ordering and selection of the model space. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Theoretical Methods: SCF to FCI; PSIMRCC Implementation of Mk-MRCC Theory. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/psimrcc.html:8237,update,updated,8237,psi4manual/master/psimrcc.html,https://psicode.org,https://psicode.org/psi4manual/master/psimrcc.html,1,['update'],['updated']
Deployability,"the; global scope by the user. PsiMod.has_local_option_changed(module, keyword)¶; Returns boolean for whether keyword has been touched in the scope of; the specified module, by either user or code. Notwithstanding, code is; written such that in practice, this returns whether the option has been; touched in the module scope by the user. PsiMod.has_option_changed(module, keyword)¶; Returns boolean for whether keyword has been touched either locally; to specified module or globally, by either user or code.; Notwithstanding, code is written such that in practice, this returns; whether the option has been touched by the user. PsiMod.revoke_global_option_changed(keyword)¶; Given a string of keyword name, sets the has_changed attribute in the; global options scope to false. Used in python driver when a function; sets the value of an option. Before the function exits, this command is; called on the option so that has_changed reflects whether the user (not; the program) has touched the option. PsiMod.revoke_local_option_changed(module, keyword)¶; Given a string of keyword name and a particular module, sets the; has_changed attribute in the module options scope to false. Used in; python driver when a function sets the value of an option. Before the; function exits, this command is called on the option so that; has_changed reflects whether the user (not the program) has touched the; option. Table Of Contents. LibOptions: globals, locals, has_changed and all that; Declaring Options; What is has_changed ?; Reading Options in Module; Handling Options in Driver; PsiMod Options Commands. Previous topic; Programming: Using the Core Libraries; Next topic; Python Driver; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Programming: Using the Core Libraries ». © Copyright 2012, The Psi4 Project.; Last updated on Oct 16, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/optionshandling-1.html:14363,update,updated,14363,psi4manual/4.0b3/optionshandling-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/optionshandling-1.html,2,['update'],['updated']
Deployability,"theory. cc44; Test case for some of the PSI4 out-of-core codes. The code is given only 2.0 MB of memory, which is insufficient to hold either the A1 or B2 blocks of an ovvv quantity in-core, but is sufficient to hold at least two copies of an oovv quantity in-core. cc35; CC3(ROHF)/cc-pVDZ H2O geom from Olsen et al., JCP 104, 8007 (1996). cc9a; ROHF-CCSD(T) cc-pVDZ energy for the state of the CN radical, with Z-matrix input. dfmp2-2; Density fitted MP2 energy of H2, using density fitted reference and automatic looping over cc-pVDZ and cc-pVTZ basis sets. Results are tabulated using the built in table functions by using the default options and by specifiying the format. cc1; RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is apecified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. omp2-3; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. cepa1; cc-pvdz H2O Test CEPA(1) Energy. cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. dftd3-grad; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN, calling Grimme’s dftd3 program for -D2 gradients. cc14; ROHF-CCSD/cc-pVDZ CH2 geometry optimization via analytic gradients. cc29; CCSD/cc-pVDZ optical rotation calculation (both gauges) on Cartesian H2O2. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. psithon1; Spectroscopic constants of H2, and the full ci cc-pVTZ level of theory. matrix1; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating matrix multiplication, eigendecomposition, Cholesky decomposition and LU decomposition. These operations are performed on vectors and matrices provide",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/autodoc_testsuite-1.html:17459,update,updated,17459,psi4manual/4.0b3/autodoc_testsuite-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_testsuite-1.html,4,['update'],['updated']
Deployability,"these four components yields; SAPT ENERGY. SAPT ENERGY¶; The total electronic interaction energy [H] for the requested SAPT; level of theory. SAPT SAPT0 ENERGY¶. SAPT SAPT2 ENERGY¶. SAPT SAPT2+ ENERGY¶. SAPT SAPT2+(3) ENERGY¶. SAPT SAPT2+3 ENERGY¶; The total electronic interaction energy [H] for the labeled SAPT level; of theory. SCF DIPOLE X¶. SCF DIPOLE Y¶. SCF DIPOLE Z¶; The three components of the SCF dipole [Debye]. SCF QUADRUPOLE XX¶. SCF QUADRUPOLE XY¶. SCF QUADRUPOLE XZ¶. SCF QUADRUPOLE YY¶. SCF QUADRUPOLE YZ¶. SCF QUADRUPOLE ZZ¶; The six components of the SCF quadrupole [Debye Ang]. SCF TOTAL ENERGY¶; The total electronic energy [H] of the SCF stage of the calculation.; The CORRELATION ENERGY variables from subsequent stages of a; calculation are often the corresponding TOTAL ENERGY; variables less this quantity. Constructed from Eq. (3),; where this quantity is . (3); Unless the method includes a dispersion correction, this quantity is; equal to HF TOTAL ENERGY (for HF) or; DFT FUNCTIONAL TOTAL ENERGY (for; DFT). Unless the method is a DFT double-hybrid, this quantity is equal; to DFT TOTAL ENERGY. TWO-ELECTRON ENERGY¶; The two-electron energy contribution [H] to the total SCF energy.; Quantity in Eq. (3). UNCP-CORRECTED 2-BODY INTERACTION ENERGY¶; The interaction energy [H] considering only two-body interactions,; computed without counterpoise correction.; Related variable CP-CORRECTED 2-BODY INTERACTION ENERGY. ZAPTn TOTAL ENERGY¶. ZAPTn CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the labeled Z-averaged perturbation theory level.; n is ZAPT perturbation order. Previous topic; WFN; Next topic; PSI Variables by Module; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Appendices ». © Copyright 2012, The Psi4 Project.; Last updated on Oct 16, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/glossary_psivariables-1.html:14870,update,updated,14870,psi4manual/4.0b3/glossary_psivariables-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/glossary_psivariables-1.html,2,['update'],['updated']
Deployability,"these variables have been printed to screen during installation (see last codeblock in step 6). Useful Commands¶. Initially install PSI4 stable release. # equivalent; >>> conda install psi4 -c psi4; >>> conda install psi4 –channel psi4. Initially install PSI4 stable release with non-current python. 1>>> conda install psi4 python=3.6 -c psi4. Update to latest PSI4 stable release. 1>>> conda update psi4 -c psi4. Initially install stable release into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). 1; 2>>> conda create -y -n p4env psi4 -c psi4; >>> conda activate p4env. Install a particular PSI4 version. 1>>> conda install psi4=0.1.12 -c psi4. Uninstall PSI4 from current environment. 1>>> conda remove psi4. Initially install PSI4 nightly build. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4 –channel psi4/label/dev. Initially install PSI4 nightly build with non-current python. 1>>> conda install psi4 python=3.6 -c psi4/label/dev. Update to latest PSI4 nightly build. 1>>> conda update psi4 -c psi4/label/dev. Initially install nightly build into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). 1; 2>>> conda create -y -n p4env psi4 -c psi4/label/dev; >>> conda activate p4env. Install a particular PSI4 version. 1>>> conda install psi4=0.1.12 -c psi4/label/dev. Troubleshooting¶. If the target computer doesn’t have libc >= 2.7 (released c.2007; for reference, 2.10 is newer than 2.7; unlike most libraries, libc generally not available in multiple versions on a computer), the PSI4 conda package won’t work.; 1; 2; 3; 4; 5; 6# unsuitable computer; >>> ldd --version; ldd (GNU libc) 2.5; # suitable computer; >>> ldd --version; ldd (GNU libc) 2.17. It is of greatest importance that the PSI4 executable be linked against conda libpython.so not against any system libpython.so. This is arranged by setting RPATH to seek librar",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/conda-1.html:21504,install,install,21504,psi4manual/1.2.1/conda-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/conda-1.html,2,['install'],['install']
Deployability,"this is often; much more costly than the energy. In addition, the Wavefunction density attributes; (Da and Db) return the SO density and must be transformed to the MO basis; to use with this function. New in version 0.5: wfn parameter passed explicitly. Returns; None. Parameters. filename (string) – destination file name for MOLDEN file (optional); do_virtual (bool) – do write all the MOs to the MOLDEN file (true) or discard the unoccupied MOs, not valid for NO’s (false) (optional); use_natural (bool) – write natural orbitals determined from density on wavefunction. Examples. Molden file with the Kohn-Sham orbitals of a DFT calculation.; >>> E, wfn = energy('b3lyp', return_wfn=True); >>> wfn.molden('mycalc.molden'). Molden file with the natural orbitals of a CCSD computation. For correlated methods, an energy call will not compute the density.; “properties” or “gradient” must be called.; >>> E, wfn = properties('ccsd', return_wfn=True); >>> wfn.molden('ccsd_no.molden', use_natural=True). To supply a custom density matrix, manually set the Da and Db of the wavefunction.; This is used, for example, to write natural orbitals coming from a root computed; by a CIWavefunction computation, e.g., detci, fci, casscf.`; The first two arguments of get_opdm can be set to n, n where n => 0 selects the root to; write out, provided these roots were computed, see NUM_ROOTS. The; third argument controls the spin (""A"", ""B"" or ""SUM"") and the final; boolean option determines whether inactive orbitals are included.; >>> E, wfn = energy('detci', return_wfn=True); >>> wfn.Da() = wfn.get_opdm(0, 0, ""A"", True); >>> wfn.Db() = wfn.get_opdm(0, 0, ""B"", True); >>> molden(wfn, 'no_root1.molden', use_natural=True). write_nbo(name)¶. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.6;  · . PSI4. PSI4 API: Linking C++ and Python; CCWavefunction. © Copyright 2022, The Psi4 Project.; Last updated on Thursday, 19 May 2022 08:57PM.; Created using Sphinx 4.5.0.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/api/psi4.core.CCWavefunction.html:28994,update,updated,28994,psi4manual/1.6.x/api/psi4.core.CCWavefunction.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/api/psi4.core.CCWavefunction.html,1,['update'],['updated']
Deployability,"this is often; much more costly than the energy. In addition, the Wavefunction density attributes; (Da and Db) return the SO density and must be transformed to the MO basis; to use with this function. New in version 0.5: wfn parameter passed explicitly. Returns; None. Parameters. filename (string) – destination file name for MOLDEN file (optional); do_virtual (bool) – do write all the MOs to the MOLDEN file (true) or discard the unoccupied MOs, not valid for NO’s (false) (optional); use_natural (bool) – write natural orbitals determined from density on wavefunction. Examples. Molden file with the Kohn-Sham orbitals of a DFT calculation.; >>> E, wfn = energy('b3lyp', return_wfn=True); >>> wfn.molden('mycalc.molden'). Molden file with the natural orbitals of a CCSD computation. For correlated methods, an energy call will not compute the density.; “properties” or “gradient” must be called.; >>> E, wfn = properties('ccsd', return_wfn=True); >>> wfn.molden('ccsd_no.molden', use_natural=True). To supply a custom density matrix, manually set the Da and Db of the wavefunction.; This is used, for example, to write natural orbitals coming from a root computed; by a CIWavefunction computation, e.g., detci, fci, casscf.`; The first two arguments of get_opdm can be set to n, n where n => 0 selects the root to; write out, provided these roots were computed, see NUM_ROOTS. The; third argument controls the spin (""A"", ""B"" or ""SUM"") and the final; boolean option determines whether inactive orbitals are included.; >>> E, wfn = energy('detci', return_wfn=True); >>> wfn.Da() = wfn.get_opdm(0, 0, ""A"", True); >>> wfn.Db() = wfn.get_opdm(0, 0, ""B"", True); >>> molden(wfn, 'no_root1.molden', use_natural=True). write_nbo(name)¶. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.6;  · . PSI4. PSI4 API: Linking C++ and Python; CIWavefunction. © Copyright 2022, The Psi4 Project.; Last updated on Thursday, 19 May 2022 08:57PM.; Created using Sphinx 4.5.0.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/api/psi4.core.CIWavefunction.html:33757,update,updated,33757,psi4manual/1.6.x/api/psi4.core.CIWavefunction.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/api/psi4.core.CIWavefunction.html,1,['update'],['updated']
Deployability,"thisrow = oneago, thisrow, [0] * len(seq2) + [x + 1]; for y in range(len(seq2)):; delcost = oneago[y] + 1; addcost = thisrow[y - 1] + 1; subcost = oneago[y - 1] + (seq1[x] != seq2[y]); thisrow[y] = min(delcost, addcost, subcost); return thisrow[len(seq2) - 1]. [docs]def find_approximate_string_matches(seq1: str, options: List[str], max_distance: int) -> List[str]:; """"""Find list of approximate (within `max_distance`) matches to string `seq1` among `options`. Parameters; ----------; seq1; Target string to look for near matches to.; options; Alternatives among which to look for near matches to `seq1`.; max_distance; Maximum Levenshtein distance from `seq1` to return. """"""; return [seq2 for seq2 in options if (levenshtein(seq1, seq2) <= max_distance)]. [docs]def message_box(message: str, max_width: int = 80, min_width: int = 30) -> str:; """"""Put a message string into a box for extra attention. Parameters; ----------; message; Message string to be boxed.; max_width; Maximal character width of the box.; min_width; Minimal character width of the box. Returns; -------; str; Box containing the message as a multiline string.; """"""; from textwrap import wrap. # ensure box is within min/max boundaries; msg = message.splitlines(); max_line = len(max(msg, key=len)); box_width = max(min(max_width, max_line), min_width). error_str = []; error_str.append('\n!' + '-' * box_width + '--!\n'); error_str.append('!' + ' ' * box_width + ' !\n'). fmt = ""! {:"" + str(box_width) + ""} !\n""; for line in msg[:]:; error_str.extend([fmt.format(x) for x in wrap(line, box_width, subsequent_indent="" "")]). error_str.append('!' + ' ' * box_width + ' !\n'); error_str.append('!' + '-' * box_width + '--!\n'); error_str = ''.join(error_str). return error_str. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .  · ; 1.7;  · . PSI4. Module code; psi4.driver.p4util.text. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/p4util/text.html:4654,update,updated,4654,psi4manual/1.7.x/_modules/psi4/driver/p4util/text.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/p4util/text.html,1,['update'],['updated']
Deployability,"thod uses neural networking to; improve the accuracy of MP2 (dfmp2) interaction energies for dimer molecules.; The plugin is distributed under the 2-clause BSD license. Installation¶; Binary. snsmp2 is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). If using the Psi4conda installer, snsmp2 has already been installed alongside. If using the PSI4 conda package, the snsmp2 conda package can; be obtained through conda install snsmp2 -c psi4 or conda install; psi4-rt -c psi4. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; snsmp2 can be obtained through conda install snsmp2 -c psi4.; Then, hint its location with PYTHONPATH. To remove a conda installation, conda remove snsmp2. Source. Download the plugin from the GitHub repository:; >>> git clone https://github.com/DEShawResearch/sns-mp2. Once dowloaded, the plugin can be installed as outlined in the documentation:; >>> cd {top-level-sns-mp2-directory}; >>> PSI4_PYTHON=$(head $(which psi4) -n 1 | sed -r 's/^.{2}//'); >>> $PSI4_PYTHON -m pip install . Sample Input¶; A sample input file, adapted from the documentation, is shown below:; 1; 2; 3; 4; 5; 6; 7; 8; 9# Sample SNS-MP2 calculation for two helium atoms. molecule dimer {; He 0 0 0; --; He 2 0 0; }. energy('sns-mp2'). Note that the two monomers are separated by double dashes, indicating that; they should be treated as separate molecules. (See; sec:analysis-of-intermolecular-interactions for more details on; setting up dimer molecules.) This input file can be run in the usual fashion:; >>> psi4 input.dat. table of contents. Spin-Network-Scaled MP2 (SNS-MP2) by D. E. Shaw; Installation; Sample Input. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 July 2018 04:21AM.; Created using Sphinx 1.7.",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/plugin_snsmp2-1.html:1356,install,installed,1356,psi4manual/1.2.1/plugin_snsmp2-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/plugin_snsmp2-1.html,2,['install'],['installed']
Deployability,"thod uses neural networking to; improve the accuracy of MP2 (dfmp2) interaction energies for dimer molecules.; The plugin is distributed under the 2-clause BSD license. Installation¶; Binary. snsmp2 is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). If using the Psi4conda installer, snsmp2 has already been installed alongside. If using the PSI4 conda package, the snsmp2 conda package can; be obtained through conda install snsmp2 -c psi4 or conda install; psi4-rt -c psi4. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; snsmp2 can be obtained through conda install snsmp2 -c psi4.; Then, hint its location with PYTHONPATH. To remove a conda installation, conda remove snsmp2. Source. Download the plugin from the GitHub repository:; >>> git clone https://github.com/DEShawResearch/sns-mp2. Once dowloaded, the plugin can be installed as outlined in the documentation:; >>> cd {top-level-sns-mp2-directory}; >>> PSI4_PYTHON=$(head $(which psi4) -n 1 | sed -r 's/^.{2}//'); >>> $PSI4_PYTHON -m pip install . Sample Input¶; A sample input file, adapted from the documentation, is shown below:; 1; 2; 3; 4; 5; 6; 7; 8; 9# Sample SNS-MP2 calculation for two helium atoms. molecule dimer {; He 0 0 0; --; He 2 0 0; }. energy('sns-mp2'). Note that the two monomers are separated by double dashes, indicating that; they should be treated as separate molecules. (See; sec:analysis-of-intermolecular-interactions for more details on; setting up dimer molecules.) This input file can be run in the usual fashion:; >>> psi4 input.dat. table of contents. Spin-Network-Scaled MP2 (SNS-MP2) by D. E. Shaw; Installation; Sample Input. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/plugin_snsmp2-1.html:1356,install,installed,1356,psi4manual/1.3.2/plugin_snsmp2-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/plugin_snsmp2-1.html,2,['install'],['installed']
Deployability,"thod(method). update_forward_refs(**localns); Try to update ForwardRefs on fields based on this Model, globalns and localns. validate(value). rtype; Model. Methods Documentation. compare(other, **kwargs)¶; Compares the current object to the provided object recursively. Parameters. other (Model) – The model to compare to.; **kwargs – Additional kwargs to pass to qcelemental.compare_recursive. Returns; True if the objects match. Return type; bool. compute(client=None)[source]¶; Run quantum chemistry. Parameters; client (Optional[FractalClient]) – . classmethod construct(_fields_set=None, **values)¶; Creates a new model setting __dict__ and __fields_set__ from trusted or pre-validated data.; Default values are respected, but no other validation is performed.; Behaves as if Config.extra = ‘allow’ was set since it adds all passed values. Return type; Model. Parameters. _fields_set (Optional[SetStr]) – ; values (Any) – . copy(*, include=None, exclude=None, update=None, deep=False)¶; Duplicate a model, optionally choose which fields to include, exclude and change. Parameters. include (Union[AbstractSetIntStr, MappingIntStrAny]) – fields to include in new model; exclude (Union[AbstractSetIntStr, MappingIntStrAny]) – fields to exclude from new model, as with values this takes precedence over include; update (DictStrAny) – values to change/add in the new model. Note: the data is not validated before creating; the new model: you should trust this data; deep (bool) – set to True to make a deep copy of the model; self (Model) – . Return type; Model. Returns; new model instance. dict(**kwargs)¶; Generate a dictionary representation of the model, optionally specifying which fields to include or exclude. Return type; Dict[str, Any]. classmethod from_orm(obj)¶. Return type; Model. Parameters; obj (Any) – . get_results(client=None)[source]¶; Return results as Atomic-flavored QCSchema. Return type; AtomicResult. Parameters; client (Optional[FractalClient]) – . json(**kwargs)¶; Generate",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/api/psi4.driver.AtomicComputer.html:3229,update,update,3229,psi4manual/1.6.x/api/psi4.driver.AtomicComputer.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/api/psi4.driver.AtomicComputer.html,1,['update'],['update']
Deployability,thod. TREE_EXPANSION_ORDER (PE). TREE_THETA (PE). TRIPLES_ALGORITHM (PSIMRCC). TRIPLES_DIIS (PSIMRCC). TRIPLES_IABC_TYPE (DFOCC). TRIPLES_LOW_MEMORY (FNOCC). triplet() in module psi4.core. psi4.core.Matrix static method. trove psi4.driver.driver_cbs.CompositeComputer attribute. true_atomic_number() psi4.core.Molecule method. tstart() in module psi4.core. tstop() in module psi4.core. TURN_ON_ACTV (MCSCF). TWO-ELECTRON ENERGY. TwoBodyAOInt class in psi4.core. twoel_Hx() psi4.core.HF method. twoel_Hx_full() psi4.core.RHF method. TwoElectronInt class in psi4.core. U. U psi4.core.Localizer attribute. UHF class in psi4.core. UHF_NOONS (SCF). UKSFunctions class in psi4.core. UNCP-CORRECTED 2-BODY INTERACTION ENERGY. unify() psi4.core.FISAPT method. unify_part2() psi4.core.FISAPT method. unit() psi4.core.SymmetryOperation method. units. ; molecule. units() psi4.core.Molecule method. Unnormalized psi4.core.PrimitiveType attribute. up psi4.driver.p4util.InPsight attribute. UPDATE (DETCI). update() psi4.core.SOMCSCF method. update_density() psi4.core.TwoBodyAOInt method. update_geometry() psi4.core.Molecule method. psi4.driver.p4util.InPsight method. update_orbitals() psi4.core.IntegralTransform method. UpgradeHelper. USE_DF_INTS (FNOCC). USE_SPIN_SYM (PSIMRCC). USE_SPIN_SYMMETRY (PSIMRCC). V. v2rdm_casscf. ; plugin. V_potential() psi4.core.HF method. Va() psi4.core.HF method. VAL_EX_LEVEL (DETCI). valid_methods psi4.core.OEProp attribute. validate_diis() psi4.core.HF method. validate_options() psi4.core.Options method. ValidationError. value psi4.core.DerivCalcType attribute. psi4.core.DiagonalizeOrder attribute. psi4.core.FragmentType attribute. psi4.core.GaussianType attribute. psi4.core.GeometryUnits attribute. psi4.core.PrimitiveType attribute. psi4.core.PsiReturnType attribute. psi4.core.SaveType attribute. value() psi4.core.SuperFunctional method. values() psi4.core.SuperFunctional method. variable() in module psi4.core. psi4.core.Wavefunction method. variables() in modu,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/genindex.html:124969,update,update,124969,psi4manual/1.8.x/genindex.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/genindex.html,1,['update'],['update']
Deployability,"thod. Type: string; Possible Values: SOS, SOSPI; Default: SOS. SS_SCALE¶. A custom scaling parameter for same-spin terms in OCC. The result goes to a CUSTOM SCS variable, exact name method-dependent. Type: double; Default: 1. SYMMETRIZE¶. Do symmetrize the GFM and OPDM in the EKT computations?. Type: boolean; Default: true. TPDM_ABCD_TYPE¶. How to take care of the TPDM VVVV-block. The COMPUTE option means it will be computed via an IC/OOC algorithm. The DIRECT option (default) means it will not be computed and stored, instead its contribution will be directly added to Generalized-Fock Matrix. Type: string; Possible Values: DIRECT, COMPUTE; Default: DIRECT. WFN_TYPE¶. Type of the wavefunction. Type: string; Possible Values: OMP2, OMP3, OCEPA, OMP2.5, REMP, OREMP; Default: OMP2. Expert¶. SPIN_SCALE_TYPE¶. Controls the spin scaling set to current energy. This is set by Psi internally. Type: string; Possible Values: NONE, CUSTOM, SCS, SCSN, SCSVDW, SOS, SOSPI; Default: NONE. table of contents. OCC; General; CACHELEVEL; CCL_ENERGY; CC_MAXITER; CEPA_OS_SCALE; CEPA_SOS_SCALE; CEPA_SS_SCALE; CEPA_TYPE; CUTOFF; DIIS_MAX_VECS; DIIS_MIN_VECS; DO_DIIS; DO_LEVEL_SHIFT; DO_SCS; DO_SOS; E3_SCALE; EA_POLES; EKT_EA; EKT_IP; EP_EA_POLES; EP_IP_POLES; EP_MAXITER; E_CONVERGENCE; IP_POLES; LEVEL_SHIFT; MAX_MOGRAD_CONVERGENCE; MOGRAD_DAMPING; MO_MAXITER; MO_READ; MO_STEP_MAX; MO_WRITE; MP2_OS_SCALE; MP2_SOS_SCALE; MP2_SOS_SCALE2; MP2_SS_SCALE; NAT_ORBS; OCC_ORBS_PRINT; OEPROP; OPT_METHOD; ORB_OPT; ORB_RESP_SOLVER; ORTH_TYPE; OS_SCALE; PCG_BETA_TYPE; PCG_CONVERGENCE; PCG_MAXITER; RELAXED; REMP_A; RMS_MOGRAD_CONVERGENCE; R_CONVERGENCE; SCS_TYPE; SOS_TYPE; SS_SCALE; SYMMETRIZE; TPDM_ABCD_TYPE; WFN_TYPE. Expert; SPIN_SCALE_TYPE. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; OCC. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/autodir_options_c/module__occ.html:9125,update,updated,9125,psi4manual/1.8.x/autodir_options_c/module__occ.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/module__occ.html,1,['update'],['updated']
Deployability,"thod. Type: string; Possible Values: SOS, SOSPI; Default: SOS. SS_SCALE¶. A custom scaling parameter for same-spin terms in OCC. The result goes to a CUSTOM SCS variable, exact name method-dependent. Type: double; Default: 1. SYMMETRIZE¶. Do symmetrize the GFM and OPDM in the EKT computations?. Type: boolean; Default: true. TPDM_ABCD_TYPE¶. How to take care of the TPDM VVVV-block. The COMPUTE option means it will be computed via an IC/OOC algorithm. The DIRECT option (default) means it will not be computed and stored, instead its contribution will be directly added to Generalized-Fock Matrix. Type: string; Possible Values: DIRECT, COMPUTE; Default: DIRECT. WFN_TYPE¶. Type of the wavefunction. Type: string; Possible Values: OMP2, OMP3, OCEPA, OMP2.5, REMP, OREMP; Default: OMP2. Expert¶. SPIN_SCALE_TYPE¶. Controls the spin scaling set to current energy. This is set by Psi internally. Type: string; Possible Values: NONE, CUSTOM, SCS, SCSN, SCSVDW, SOS, SOSPI; Default: NONE. table of contents. OCC; General; CACHELEVEL; CCL_ENERGY; CC_MAXITER; CEPA_OS_SCALE; CEPA_SOS_SCALE; CEPA_SS_SCALE; CEPA_TYPE; CUTOFF; DIIS_MAX_VECS; DIIS_MIN_VECS; DO_DIIS; DO_LEVEL_SHIFT; DO_SCS; DO_SOS; E3_SCALE; EA_POLES; EKT_EA; EKT_IP; EP_EA_POLES; EP_IP_POLES; EP_MAXITER; E_CONVERGENCE; IP_POLES; LEVEL_SHIFT; MAX_MOGRAD_CONVERGENCE; MOGRAD_DAMPING; MO_MAXITER; MO_READ; MO_STEP_MAX; MO_WRITE; MP2_OS_SCALE; MP2_SOS_SCALE; MP2_SOS_SCALE2; MP2_SS_SCALE; NAT_ORBS; OCC_ORBS_PRINT; OEPROP; OPT_METHOD; ORB_OPT; ORB_RESP_SOLVER; ORTH_TYPE; OS_SCALE; PCG_BETA_TYPE; PCG_CONVERGENCE; PCG_MAXITER; RELAXED; REMP_A; RMS_MOGRAD_CONVERGENCE; R_CONVERGENCE; SCS_TYPE; SOS_TYPE; SS_SCALE; SYMMETRIZE; TPDM_ABCD_TYPE; WFN_TYPE. Expert; SPIN_SCALE_TYPE. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.9.1;  · . PSI4. Appendices; Keywords by Module; OCC. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 08 February 2024 09:32PM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/autodir_options_c/module__occ.html:9125,update,updated,9125,psi4manual/1.9.x/autodir_options_c/module__occ.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/autodir_options_c/module__occ.html,1,['update'],['updated']
Deployability,"thod. efp; efp; efp. pure EFP; EFP interaction energy (IE) on all frags. mixed QM/EFP; EFP IE on EFP frags only. pure QM; error. scf; scf; scf. pure EFP; error. mixed QM/EFP; SCF energy on QM frags w/coupling to EFP frags, plus EFP IE on EFP frags. pure QM; SCF energy on all frags (normal PSI4 operation). Fragment Library¶; Below are documented the EFP fragments available from the LIBEFP library.; These systems are accessible in molecule {...} blocks without; additional configuration. How to configure libefp for building Psi4¶; Role and Dependencies. Role — In PSI4, libefp is a library that provides additional; molecular modeling capabilities (EFP).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) libefp; Upstream Dependencies — libefp \(\Leftarrow\) BLAS/LAPACK. CMake Variables. ENABLE_libefp — CMake variable toggling whether Psi4 builds with libefp; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For libefp, set to an installation directory containing include/efp.h; libefp_DIR — CMake variable to specify where pre-built libefp can be found. Set to installation directory containing share/cmake/libefp/libefpConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_libefp — CMake variable to force internal build of libefp instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_libefp — CMake variable to force detecting pre-built libefp and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_libefp=ON. Build without libefp. >>> cmake. Link against pre-built. >>> cmake -DENABLE_libefp=ON -DCMAKE_PREFIX_PATH=/path/to/libefp/root. >>> cmake -DENABLE_libefp=ON -Dlibefp_DIR=/path/to/libefp/configdir. Build bundled despite pre-built being detectable. >>> cmake -DENABLE_libefp=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/libefp/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_libefp=ON. table of contents. Interface to LIBEFP by I. Kaliman; Installation; EFP Fragments; Molecule Specification; R",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/libefp-1.html:7973,install,installation,7973,psi4manual/1.2.1/libefp-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/libefp-1.html,13,['install'],['installation']
Deployability,"thod_string (string) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, lowercase and usually unlabeled. Indicates the computational; method to be passed to func. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element of a tuple. bsse_type (string or list) – 'cp' || ['nocp', 'vmfc'] || \(\Rightarrow\) None \(\Leftarrow\) || etc.; Type of BSSE correction to compute: CP, NoCP, or VMFC. The first in this; list is returned by this function. By default, this function is not called. max_nbody (int) – 3 || etc.; Maximum n-body to compute, cannot exceed the number of fragments in the moleucle. ptype (string) – 'energy' || 'gradient' || 'hessian'; Type of the procedure passed in. return_total_data (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); If True returns the total data (energy/gradient/etc) of the system,; otherwise returns interaction data. The nbody function computes counterpoise-corrected (CP), non-CP (noCP), and Valiron-Mayer Function Counterpoise (VMFC) interaction energies for complexes composed of arbitrary numbers of monomers.; Examples :; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22# Counterpoise corrected CCSD(T) energy for the Helium dimer; molecule mol {; He; --; He 1 3; }. energy('CCSD(T)', bsse_type='cp'). # noCP, VMFC, and CP energy for a helium cluster, limited at 3 bodies; molecule mol {; He 0 0 0; --; He 0 0 4; --; He 0 4 0; --; He 4 0 0; }. # Returns the nocp energy as its first in the list; energy('CCSD(T)', bsse_type=['nocp', 'cp', 'vmfc'], max_nbody=3). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Psithon Functions: Invoking a Calculation. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 July 2018 04:21AM.; Created using Sphinx 1.7.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/nbody-1.html:2790,update,updated,2790,psi4manual/1.2.1/nbody-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/nbody-1.html,2,['update'],['updated']
Deployability,"thods that do not have associated gradients; if lowername in energy_only_methods:; raise ValidationError(""gradient('%s') does not have an associated gradient"" % name). dertype = _find_derivative_type('gradient', lowername, user_dertype). # Set method-dependent scf convergence criteria (test on procedures['energy'] since that's guaranteed); optstash = driver_util._set_convergence_criterion('energy', lowername, 8, 10, 8, 10, 8). # Commit to procedures[] call hereafter; return_wfn = kwargs.pop('return_wfn', False); core.clean_variables(). # no analytic derivatives for scf_type cd; if core.get_global_option('SCF_TYPE') == 'CD':; if (dertype == 1):; raise ValidationError(""""""No analytic derivatives for SCF_TYPE CD.""""""). # Make sure the molecule the user provided is the active one; molecule = kwargs.pop('molecule', core.get_active_molecule()); molecule.update_geometry(). # S/R: Mode of operation- whether finite difference opt run in one job or files farmed out; opt_mode = kwargs.get('mode', 'continuous').lower(); if opt_mode == 'continuous':; pass; elif opt_mode == 'sow':; if dertype == 1:; raise ValidationError(""""""Optimize execution mode 'sow' not valid for analytic gradient calculation.""""""); elif opt_mode == 'reap':; opt_linkage = kwargs.get('linkage', None); if opt_linkage is None:; raise ValidationError(""""""Optimize execution mode 'reap' requires a linkage option.""""""); else:; raise ValidationError(""""""Optimize execution mode '%s' not valid."""""" % (opt_mode)). # Does dertype indicate an analytic procedure both exists and is wanted?; if dertype == 1:; core.print_out(""""""gradient() will perform analytic gradient computation.\n""""""). # Perform the gradient calculation; wfn = procedures['gradient'][lowername](lowername, molecule=molecule, **kwargs). optstash.restore(); if return_wfn:; return (wfn.gradient(), wfn); else:; return wfn.gradient(). else:; core.print_out(""""""gradient() will perform gradient computation by finite difference of analytic energies.\n""""""). opt_iter = kwargs",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/_modules/psi4/driver/driver.html:38422,continuous,continuous,38422,psi4manual/1.2.1/_modules/psi4/driver/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/_modules/psi4/driver/driver.html,1,['continuous'],['continuous']
Deployability,"thods that do not have associated gradients; if lowername in energy_only_methods:; raise ValidationError(""gradient('%s') does not have an associated gradient"" % name). dertype = _find_derivative_type('gradient', lowername, user_dertype). # Set method-dependent scf convergence criteria (test on procedures['energy'] since that's guaranteed); optstash = driver_util._set_convergence_criterion('energy', lowername, 8, 10, 8, 10, 8). # Commit to procedures[] call hereafter; return_wfn = kwargs.pop('return_wfn', False); core.clean_variables(). # no analytic derivatives for scf_type cd; if core.get_option('SCF', 'SCF_TYPE') == 'CD':; if (dertype == 1):; raise ValidationError(""""""No analytic derivatives for SCF_TYPE CD.""""""). # Make sure the molecule the user provided is the active one; molecule = kwargs.pop('molecule', core.get_active_molecule()); molecule.update_geometry(). # S/R: Mode of operation- whether finite difference opt run in one job or files farmed out; opt_mode = kwargs.get('mode', 'continuous').lower(); if opt_mode == 'continuous':; pass; elif opt_mode == 'sow':; if dertype == 1:; raise ValidationError(""""""Optimize execution mode 'sow' not valid for analytic gradient calculation.""""""); elif opt_mode == 'reap':; opt_linkage = kwargs.get('linkage', None); if opt_linkage is None:; raise ValidationError(""""""Optimize execution mode 'reap' requires a linkage option.""""""); else:; raise ValidationError(""""""Optimize execution mode '%s' not valid."""""" % (opt_mode)). # Does dertype indicate an analytic procedure both exists and is wanted?; if dertype == 1:; core.print_out(""""""gradient() will perform analytic gradient computation.\n""""""). # Perform the gradient calculation; wfn = procedures['gradient'][lowername](lowername, molecule=molecule, **kwargs). optstash.restore(); if return_wfn:; return (wfn.gradient(), wfn); else:; return wfn.gradient(). else:; core.print_out(""""""gradient() will perform gradient computation by finite difference of analytic energies.\n""""""). opt_iter = kwargs",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/driver.html:37249,continuous,continuous,37249,psi4manual/1.1.0/_modules/psi4/driver/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/driver.html,1,['continuous'],['continuous']
Deployability,"thods that do not have associated gradients; if lowername in energy_only_methods:; raise ValidationError(""gradient('%s') does not have an associated gradient"" % name). dertype = _find_derivative_type('gradient', lowername, user_dertype). # Set method-dependent scf convergence criteria (test on procedures['energy'] since that's guaranteed); optstash = driver_util._set_convergence_criterion('energy', lowername, 8, 10, 8, 10, 8). # Commit to procedures[] call hereafter; return_wfn = kwargs.pop('return_wfn', False); psi4.clean_variables(). # no analytic derivatives for scf_type cd; if psi4.get_option('SCF', 'SCF_TYPE') == 'CD':; if (dertype == 1):; raise ValidationError(""""""No analytic derivatives for SCF_TYPE CD.""""""). # Make sure the molecule the user provided is the active one; molecule = kwargs.pop('molecule', psi4.get_active_molecule()); molecule.update_geometry(). # S/R: Mode of operation- whether finite difference opt run in one job or files farmed out; opt_mode = kwargs.get('mode', 'continuous').lower(); if opt_mode == 'continuous':; pass; elif opt_mode == 'sow':; if dertype == 1:; raise ValidationError(""""""Optimize execution mode 'sow' not valid for analytic gradient calculation.""""""); elif opt_mode == 'reap':; opt_linkage = kwargs.get('linkage', None); if opt_linkage is None:; raise ValidationError(""""""Optimize execution mode 'reap' requires a linkage option.""""""); else:; raise ValidationError(""""""Optimize execution mode '%s' not valid."""""" % (opt_mode)). # Does dertype indicate an analytic procedure both exists and is wanted?; if dertype == 1:; psi4.print_out(""""""gradient() will perform analytic gradient computation.\n""""""). # Perform the gradient calculation; wfn = procedures['gradient'][lowername](lowername, molecule=molecule, **kwargs). optstash.restore(); if return_wfn:; return (wfn.gradient(), wfn); else:; return wfn.gradient(). else:; psi4.print_out(""""""gradient() will perform gradient computation by finite difference of analytic energies.\n""""""). opt_iter = kwargs",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/driver.html:36018,continuous,continuous,36018,psi4manual/1.0.0/_modules/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/driver.html,1,['continuous'],['continuous']
Deployability,"thods¶; Code author: T. Daniel Crawford; Section author: T. Daniel Crawford; Module: Keywords, PSI Variables, CCENERGY; Module: Keywords, PSI Variables, CCEOM; Module: Keywords, PSI Variables, CCRESPONSE; Module: Keywords, PSI Variables, CCTRIPLES; Module: Keywords, CCDENSITY; Module: Keywords, CCHBAR; Module: Keywords, CCLAMBDA; Module: Keywords, CCSORT; The coupled cluster approach is one of the most accurate and reliable quantum; chemical techniques for including the effects of electron correlation.; Instead of the linear expansion of the wavefunction used by configuation; interaction, coupled cluster uses an exponential expansion,. (1); where the cluster operator is written as a sum of operators that; generate singly-excited, doubly-excited, etc., determinants:. with. etc. The popular coupled cluster singles and doubles (CCSD) model; [Purvis:1982] truncates the expansion at . This model has the same number of parameters as; configuration interaction singles and doubles (CISD) but improves upon; it by approximately accounting for higher-order terms using products; of lower-order terms (e.g., the term approximately; accounts for quadruple excitations). The inclusion of such products; makes coupled-cluster methods size extensive, meaning that the; quality of the computation should not degrade for larger molecules.; The computational cost for CCSD scales as , where; is the number of occupied orbitals and is the number of virtual; orbitals.; Improving upon CCSD, the CCSD(T) method [Raghavachari:1989] includes; a perturbative estimate of the energy contributed by the ; operator. The computational cost of this additional term scales as; , making it rather expensive for molecules with more than; a dozen heavy atoms or so. However, when this method is affordable, it; provides very high quality results in most cases.; PSI4 is capable of computing energies and analytic gradients for a; number of coupled cluster models. It can also compute linear response; properties (such ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/cc-1.html:1119,configurat,configuration,1119,psi4manual/4.0b2/cc-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/cc-1.html,2,['configurat'],['configuration']
Deployability,"thor: T. Daniel Crawford; Section author: T. Daniel Crawford; Module: Keywords, PSI Variables, CCENERGY; Module: Keywords, PSI Variables, CCEOM; Module: Keywords, PSI Variables, CCRESPONSE; Module: Keywords, PSI Variables, CCTRIPLES; Module: Keywords, PSI Variables, CCDENSITY; Module: Keywords, CCHBAR; Module: Keywords, CCLAMBDA; Module: Keywords, CCSORT; The coupled cluster approach is one of the most accurate and reliable quantum; chemical techniques for including the effects of electron correlation.; Instead of the linear expansion of the wavefunction used by configuation; interaction, coupled cluster uses an exponential expansion,. (1); where the cluster operator is written as a sum of operators that; generate singly-excited, doubly-excited, etc., determinants:. with. etc. The popular coupled cluster singles and doubles (CCSD) model; [Purvis:1982] truncates the expansion at . This model has the same number of parameters as; configuration interaction singles and doubles (CISD) but improves upon; it by approximately accounting for higher-order terms using products; of lower-order terms (e.g., the term approximately; accounts for quadruple excitations). The inclusion of such products; makes coupled-cluster methods size extensive, meaning that the; quality of the computation should not degrade for larger molecules.; The computational cost for CCSD scales as , where; is the number of occupied orbitals and is the number of virtual; orbitals.; Improving upon CCSD, the CCSD(T) method [Raghavachari:1989] includes; a perturbative estimate of the energy contributed by the ; operator. The computational cost of this additional term scales as; , making it rather expensive for molecules with more than; a dozen heavy atoms or so. However, when this method is affordable, it; provides very high quality results in most cases.; PSI4 is capable of computing energies and analytic gradients for a; number of coupled cluster models. It can also compute linear response; properties (such ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/cc-1.html:1157,configurat,configuration,1157,psi4manual/4.0b3/cc-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/cc-1.html,6,['configurat'],['configuration']
Deployability,"thor: T. Daniel Crawford; Section author: T. Daniel Crawford; Module: Keywords, PSI Variables, CCENERGY; Module: Keywords, PSI Variables, CCEOM; Module: Keywords, PSI Variables, CCRESPONSE; Module: Keywords, PSI Variables, CCTRIPLES; Module: Keywords, PSI Variables, CCDENSITY; Module: Keywords, CCHBAR; Module: Keywords, CCLAMBDA; Module: Keywords, CCSORT; The coupled cluster approach is one of the most accurate and reliable quantum; chemical techniques for including the effects of electron correlation.; Instead of the linear expansion of the wavefunction used by configuation; interaction, coupled cluster uses an exponential expansion,. (1); where the cluster operator is written as a sum of operators that; generate singly-excited, doubly-excited, etc., determinants:. with. etc. The popular coupled cluster singles and doubles (CCSD) model; [Purvis:1982] truncates the expansion at . This model has the same number of parameters as; configuration interaction singles and doubles (CISD) but improves upon; it by approximately accounting for higher-order terms using products; of lower-order terms (e.g., the term approximately; accounts for quadruple excitations). The inclusion of such products; makes coupled-cluster methods size extensive, meaning that the; quality of the computation should not degrade for larger molecules.; The computational cost for CCSD scales as , where; is the number of occupied orbitals and is the number of virtual; orbitals.; Improving upon CCSD, the CCSD(T) method [Raghavachari:1989] includes; a perturbative estimate of the energy contributed by the ; operator. The computational cost of this additional term scales as; , making it rather expensive for molecules with more than; a dozen heavy atoms or so. However, when this method is affordable, it; provides very high quality results in most cases.; Psi4 is capable of computing energies and analytic gradients for a; number of coupled cluster models. It can also compute linear response; properties (such ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/cc-1.html:1164,configurat,configuration,1164,psi4manual/1.0.0/cc-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/cc-1.html,2,['configurat'],['configuration']
Deployability,"through Anaconda (formerly Continuum Analytics, the company that produces; Anaconda Python (a; full-fledged scientific python environment with package manager conda) and, more particularly, Miniconda (a lightweight Python; distribution with same package manager conda). Some nice features for us:. cross-platform; no root, administrator, or sudo access required; built with high-performance math libraries; lightweight software stack (<100 MB w/o PSI4; ~1 GB including PSI4, numpy, and MKL); updated nightly so new features accessible; standardizes python distribution so no need to find/install libpython packages; add-ons (plugins, extra features requiring Fortran compiler, etc.) can be made available as conda packages; develop PSI4 through plugins without a pre-existing development environment, see Creating a New Plugin Using a Conda Pre-compiled Binary. The PSI4 binary repository is at Anaconda (formerly Binstar).; For commands to get a default installation, go to How to install a Psi4 binary with the Psi4conda installer, command-line; or the psicode downloads page.; Users proficient with conda may prefer to consult What do the conda packages psi4 & psi4-dev and the installer psi4conda contain.; For more flexibility and a detailed explanation, go to; Detailed Installation of Miniconda and Detailed Installation of . How to install a Psi4 binary with the Psi4conda installer, download site¶; Download one of the nine installers (Linux/Mac/Windows; Py36/37/38/39).; bash it. Follow the prompts and do make the adjustments to; PATH and PSI_SCRATCH that it suggests at the end. Test; with psi4 --test (green and yellow good; red bad). Done. Explicit commands at How to install a Psi4 binary with the Psi4conda installer, command-line. How to install a Psi4 binary with the Psi4conda installer, command-line¶; Sequence of commands to get you to a working PSI4 on Linux,; Mac, Windows (Ubuntu shell for Windows accepts Linux installers), or native Windows.; Installs Miniconda+Psi4+AddOns i",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/conda-1.html:1458,install,installation,1458,psi4manual/1.4.0/conda-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html,12,['install'],"['install', 'installation', 'installer']"
Deployability,"ties. The additive; separability of the density cumulant guarantees that all of the DCFT methods; are size-extensive and size-consistent. Furthermore, the N-representability; problem is now greatly simplified, because the idempotent part of the OPDM is; N-representable by construction. One only needs to worry about the; N-representability of the density cumulant, which is a relatively small part of; the TPDM.; In order to obtain the DCFT energy, two conditions must be satisfied:; 1) The energy must be stationary with respect to the variation of the; idempotent part of the one-particle density matrix . This is; achieved by the self-consistent diagonalization of the generalized Fock; operator matrix defined above, which introduces the relaxation of the orbitals.; 2) The energy must be stationary with respect to the variation of the density; cumulant , constrained to the N-representability conditions.; Making the energy stationary requires the solution of the two sets of coupled; equations for the orbital and cumulant updates, respectively (also known as; residual equations). At the present moment three different algorithms for the; solution of the system of coupled equations are available (see section; Iterative Algorithms for details).; Publications resulting from the use of the DCFT code should cite contributions; listed here. Methods¶; Currently two DCFT methods (functionals) are available: DC-06 and DC-12. Both; methods use approximate N-representability conditions derived from the; second-order perturbation theory, but differ in the description of the; correlated (non-idempotent) part of the one-particle density; matrix. While in the DC-06 method is derived from the density cumulant; in an approximate way, the DC-12 method derives this contribution exactly, and; therefore takes full advantage of the N-representability conditions. Both DC-06; and DC-12 methods have similar computational cost. However, the DC-12 method; usually exhibits much better numerical stabil",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/dcft-1.html:3483,update,updates,3483,psi4manual/4.0b4/dcft-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/dcft-1.html,4,['update'],['updates']
Deployability,"timization run in; >>> # embarrassingly parallel fashion; >>> optimize('hf', dertype='energy', mode='sow'). """"""; kwargs = p4util.kwargs_lower(kwargs). if hasattr(name, '__call__'):; lowername = name; custom_gradient = True; else:; lowername = name.lower(); custom_gradient = False. return_wfn = kwargs.pop('return_wfn', False). # For CBS wrapper, need to set retention on INTCO file; if custom_gradient or ('/' in lowername):; psi4.IOManager.shared_object().set_specific_retention(1, True). if kwargs.get('bsse_type', None) is not None:; raise ValidationError(""Optimize: Does not currently support 'bsse_type' arguements""). full_hess_every = psi4.get_option('OPTKING', 'FULL_HESS_EVERY'); steps_since_last_hessian = 0. if custom_gradient and psi4.has_option_changed('OPTKING', 'FULL_HESS_EVERY'):; raise ValidationError(""Optimize: Does not support custom Hessian's yet.""); else:; hessian_with_method = kwargs.get('hessian_with', lowername). # are we in sow/reap mode?; opt_mode = kwargs.get('mode', 'continuous').lower(); if opt_mode not in ['continuous', 'sow', 'reap']:; raise ValidationError(""""""Optimize execution mode '%s' not valid."""""" % (opt_mode)). optstash = p4util.OptionsState(; ['OPTKING', 'INTRAFRAG_STEP_LIMIT'],; ['FINDIF', 'HESSIAN_WRITE'],; ['OPTKING', 'CART_HESS_READ'],; ['SCF', 'GUESS_PERSIST'], # handle on behalf of cbs(); ['SCF', 'GUESS']). n = kwargs.get('opt_iter', 1). # Make sure the molecule the user provided is the active one; molecule = kwargs.pop('molecule', psi4.get_active_molecule()). # If we are feezing cartesian, do not orient or COM; if psi4.get_local_option(""OPTKING"", ""FROZEN_CARTESIAN""):; molecule.fix_orientation(True); molecule.fix_com(True); molecule.update_geometry(). # Shifting the geometry so need to copy the active molecule; moleculeclone = molecule.clone(). initial_sym = moleculeclone.schoenflies_symbol(); while n <= psi4.get_option('OPTKING', 'GEOM_MAXITER'):; current_sym = moleculeclone.schoenflies_symbol(); if initial_sym != current_sym:; rai",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/driver.html:55771,continuous,continuous,55771,psi4manual/1.0.0/_modules/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/driver.html,1,['continuous'],['continuous']
Deployability,"ting systems,; see psicode.org/installs/latest (select “conda”). Planning: how to configure Psi4 and invoke CMake¶; PSI4 is built through CMake. An abbreviated build guide can be found; within the source itself.; CMake does a good job scanning your computer to locate libraries, header; files, and executables needed for compilation. So it’s very possible that; from top-level-psi4-dir source directory, you can call cmake -H.; -Bobjdir without any further arguments, and it will invoke cmake,; detect some appropriate defaults, configure the build, create a build; directory objdir, and complete, leaving you to only invoke; make in the new build directory.; Should this happy scenario not come to pass, or if the default build; options are not to your taste, use the links within core; dependencies and add-on dependencies to plan a set of arguments to cmake tailored to; your computer. Proceed to quick build or; detailed build. How to build and install Psi4, the compact version¶; This section outlines the main steps of configuring, compiling, and; installing PSI4. More detail is given here.; 1; 2; 3; 4; 5>>> cd {top-level-psi4-dir}; >>> cmake -H. -Bobjdir [your configuration options]; >>> cd objdir; >>> make -j`getconf _NPROCESSORS_ONLN`; >>> make install. How to build, test, and install Psi4, in detail¶; 1. Plan Directories. Get ahold of the PSI4 codebase, and navigate to the top level source; directory, hereafter top-level-psi4-dir. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}. 1>>> cd {top-level-psi4-dir}. Choose a compilation directory, hereafter objdir. How to choose the compilation directory, {objdir}. Choose an installation directory, hereafter prefix. How to install elsewhere than /usr/local/psi4. 2. Plan Configuration. Examine the strict and optional software requirements to make sure the; target computer has all the necessary dependencies installed. What are the tools and dependencies strictly required for building Psi4; What are the",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/build_planning-1.html:1608,install,install,1608,psi4manual/1.3.2/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/build_planning-1.html,4,['install'],"['install', 'installing']"
Deployability,"ting to specified or best-performance default modules. select_omp3(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP3 energy call; and directing to specified or best-performance default modules. select_omp3_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP3 gradient call; and directing to specified or best-performance default modules. check_iwl_file_from_scf_type(scf_type, wfn)[source]¶; Ensures that a IWL file has been written based on input SCF type. check_non_symmetric_jk_density(name)[source]¶; Ensure non-symmetric density matrices are supported for the selected JK routine. dft_set_reference_local(name)[source]¶; Figures out the correct DFT reference to set locally. oeprop_validator(prop_list)[source]¶; Validations a list of OEProp computations. Throws if not found. scf_set_reference_local(name)[source]¶; Figures out the correct SCF reference to set locally. run_roa(name, **kwargs)[source]¶; Main driver for managing Raman Optical activity computations with; CC response theory. Uses distributed finite differences approach –>. Sets up a database to keep track of running/finished/waiting; computations. Generates separate input files for displaced geometries. When all displacements are run, collects the necessary information; from each displaced computation, and computes final result. Table Of Contents. Python Driver; wrapper_database; diatomic; pcm_placeholder; dependency_check; gaussian_n; frac; molutil; driver_util; aliases; interactive; pubchem; inputparser; driver_nbody; driver_cbs; driver; wrapper_autofrag; qmmm; qcdb; p4util; p4const; procedures. Previous topic; BasisSet; Next topic; psi4: Linking C++ and Python. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » . © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:172301,update,updated,172301,psi4manual/1.0.0/autodoc_driver-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html,2,['update'],['updated']
Deployability,"tion Functional. hcth147; HCTH147 Pure-GGA Exchange-Correlation Functional. hcth407; HCTH407 Pure-GGA Exchange-Correlation Functional. lyp_c; LYP Correlation. m05; Heavily Parameterized Hybrid Meta-GGA XC Functional. m05-2x; Heavily Parameterized Hybrid Meta-GGA XC Functional. p86_c; P86 Correlation (PZ81 LSDA + P86 GGA). pbe; PBE GGA Exchange-Correlation Functional. pbe-d; PBE GGA Exchange-Correlation Functional w/ Grimme’s -D2 Dispersion Correction. pbe0; PBE0 Hybrid GGA Exchange-Correlation Functional. pbesol_x; PBEsol GGA Exchange Hole (Parameter Free). pbe_c; PBE Correlation. pbe_x; PBE GGA Exchange Hole (Parameter Free). pw91; PW91 GGA Exchange-Correlation Functional. pw91_c; PW91 Correlation. pw91_x; PW91 Parameterized GGA Exchange. pw92_c;  . pz81_c; PZ81 Correlation. svwn; SVWN3 (RPA) LSDA Functional. s_x; Slater LSDA Exchange. vwn3rpa_c; VWN3 (RPA) LSDA Correlation. vwn3_c; VWN3 LSDA Correlation. vwn5rpa_c; VWN5 (RPA) LSDA Correlation. vwn5_c; VWN5 LSDA Correlation. wb88_x; B88 Short-Range GGA Exchange (HJS Model). wb97; Parameterized LRC B97 GGA XC Functional. wb97x; Parameterized Hybrid LRC B97 GGA XC Functional. wb97x-d; Parameterized Hybrid LRC B97 GGA XC Functional with Dispersion w/ Chai and Head-Gordon Dispersion Correction. wblyp; BLYP SR-XC Functional (HJS Model). wpbe; PBE SR-XC Functional (HJS Model). wpbe0; PBE0 SR-XC Functional (HJS Model). wpbe_x; PBE Short-Range GGA Exchange (HJS Model). wpbesol; PBEsol SR-XC Functional (HJS Model). wpbesol0; PBEsol0 SR-XC Functional (HJS Model). wpbesol_x; PBEsol Short-Range GGA Exchange (HJS Model). wsvwn; LSDA SR-XC Functional. ws_x; Slater Short-Range LSDA Exchange. Previous topic; <no title>; Next topic; <no title>; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Appendices »; DFT Functionals ». © Copyright 2012, Psi4 Project.; Last updated on Sep 30, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/autodoc_dft_energy-1.html:3177,update,updated,3177,psi4manual/4.0b2/autodoc_dft_energy-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/autodoc_dft_energy-1.html,2,['update'],['updated']
Deployability,"tion code like the below (less the final two lines). The net result of this code is that if the user specifies no *_func arguments, then energy() gets called. If the user defines xx_func, then its value gets called. If the user defines func, then its value gets reassigned to xx_func, func itself is deleted, and xx_func() gets called. Whatever is getting called is stored in func within the function.; # Establish function to call; if not('xx_func' in kwargs):; if ('func' in kwargs):; kwargs['xx_func'] = kwargs['func']; del kwargs['func']; else:; kwargs['xx_func'] = energy; func = kwargs['xx_func']; if not func:; raise ValidationError('Function \'%s\' does not exist to be called by wrapper counterpoise_correct.' % (func.__name__)); if (func is db):; raise ValidationError('Wrapper xx is unhappy to be calling function \'%s\'.' % (func.__name__)). If specific interoperabilities are known, code them in. For example, if xx shouldn’t call db, add the last two lines above to the xx function. If db shouldn’t call xx, add the following two lines below to the db function.; if (func is xx):; raise ValidationError('Wrapper database is unhappy to be calling function \'%s\'.' % (func.__name__)). Create a multipart test case that runs some intercalls between your function and others (akin to pywrap_all). In trials, permute the order of calls a few times to expose any calls that don’t clean up after themselves and need further attention. When all is validated, add your findings to the great Permitted nesting of Psithon functions table in the documentation. Previous topic; Plugins: Adding New Functionality to Psi4; Next topic; Documentation. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Contributions: Intro to Programming in Psi4 ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/bestpractices_py-1.html:6754,update,updated,6754,psi4manual/1.0.0/bestpractices_py-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/bestpractices_py-1.html,2,['update'],['updated']
Deployability,tion energy component [H]; for the requested variant of coupled electron pair approximation level of theory. CI DIPOLE X¶. CI DIPOLE Y¶. CI DIPOLE Z¶; The three components of the dipole [Debye] for the requested; configuration interaction level of theory and root. CI QUADRUPOLE XX¶. CI QUADRUPOLE XY¶. CI QUADRUPOLE XZ¶. CI QUADRUPOLE YY¶. CI QUADRUPOLE YZ¶. CI QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the requested; configuration interaction level of theory and root. CI ROOT n -> ROOT m DIPOLE X¶. CI ROOT n -> ROOT m DIPOLE Y¶. CI ROOT n -> ROOT m DIPOLE Z¶; The three components of the transition dipole [Debye] between roots n; and m for the requested configuration interaction level of theory. CI ROOT n -> ROOT m QUADRUPOLE XX¶. CI ROOT n -> ROOT m QUADRUPOLE XY¶. CI ROOT n -> ROOT m QUADRUPOLE XZ¶. CI ROOT n -> ROOT m QUADRUPOLE YY¶. CI ROOT n -> ROOT m QUADRUPOLE YZ¶. CI ROOT n -> ROOT m QUADRUPOLE ZZ¶; The three components of the transition quadrupole [Debye Ang] between; roots n and m for the requested configuration interaction level of; theory. CI ROOT n DIPOLE X¶. CI ROOT n DIPOLE Y¶. CI ROOT n DIPOLE Z¶; The three components of the dipole [Debye] for the requested; configuration interaction level of theory and root n. CI ROOT n QUADRUPOLE XX¶. CI ROOT n QUADRUPOLE XY¶. CI ROOT n QUADRUPOLE XZ¶. CI ROOT n QUADRUPOLE YY¶. CI ROOT n QUADRUPOLE YZ¶. CI ROOT n QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the requested; configuration interaction level of theory and root n. CI ROOT n TOTAL ENERGY¶. CI ROOT n CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested configuration interaction level of theory and root; n (numbering starts at 1). CI STATE-AVERAGED TOTAL ENERGY¶. CI STATE-AVERAGED CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for state-averaged CI/CASSCF levels of theory. CI TOTAL ENERGY¶. CI CORRELATION ENERGY,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/glossary_psivariables-1.html:6682,configurat,configuration,6682,psi4manual/4.0b3/glossary_psivariables-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/glossary_psivariables-1.html,6,['configurat'],['configuration']
Deployability,"tion in wfn to filename in; molden format. Will write natural orbitals from density (MO basis) if supplied.; Warning! Most post-SCF Wavefunctions do not build the density as this is often; much more costly than the energy. In addition, the Wavefunction density attributes; (Da and Db) return the SO density and must be transformed to the MO basis; to use with this function. New in version 0.5: wfn parameter passed explicitly. Returns:None. Parameters:; wfn (Wavefunction) – set of molecule, basis, orbitals from which to generate cube files; filename (string) – destination file name for MOLDEN file (optional); density_a (Matrix) – density in the MO basis to build alpha NO’s from (optional); density_b (Matrix) – density in the MO basis to build beta NO’s from, assumes restricted if not supplied (optional); dovirtual (bool) – do write all the MOs to the MOLDEN file (true) or discard the unoccupied MOs, not valid for NO’s (false) (optional). Examples:. 1; 2; 3>>> # [1] Molden file for DFT calculation; >>> E, wfn = energy('b3lyp', return_wfn=True); >>> molden(wfn, 'mycalc.molden'). 1; 2; 3>>> # [2] Molden file for CI/MCSCF computation using NO roots; >>> E, wfn = energy('ci', return_wfn=True); >>> molden(wfn, 'no_root1.molden', density_a=wfn.opdm(0, 0, ""A"", True)). 1; 2; 3>>> # [3] The following does NOT work, please see below; >>> E, wfn = energy('ccsd', return_wfn=True); >>> molden(wfn, 'ccsd_no.molden', density_a=wfn.Da()). 1; 2; 3; 4; 5>>> # [4] This WILL work, note the transformation of Da (SO->MO); >>> E, wfn = properties('ccsd', properties=['dipole'], return_wfn=True); >>> Da_so = wfn.Da(); >>> Da_mo = Matrix.triplet(wfn.Ca(), Da_so, wfn.Ca(), True, False, False); >>> molden(wfn, 'ccsd_no.molden', density_a=Da_mo). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 July 2018 04:21AM.; Created using Sphinx 1.7.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/api/psi4.driver.molden-1.html:2183,update,updated,2183,psi4manual/1.2.1/api/psi4.driver.molden-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/api/psi4.driver.molden-1.html,2,['update'],['updated']
Deployability,"tion of memory available for the DF-MP2 three-index integral buffers used to evaluate dispersion. Type: double; Default: 0.9. Expert SAPT(DFT)¶. SAPT_DFT_DO_HYBRID¶. Enables the hybrid xc kernel in dispersion?. Type: boolean; Default: true. SAPT_DFT_EXCH_DISP_FIXED_SCALE¶. Exch-disp scaling factor for FIXED scheme for SAPT_DFT_EXCH_DISP_SCALE_SCHEME Default value of 0.770 suggested in Y. Xie, D. G. A. Smith and C. D. Sherrill, 2022 (submitted). Previous to Nov 2022, default value was 0.686 suggested by Hesselmann and Korona, J. Chem. Phys. 141, 094107 (2014). Type: double; Default: 0.770. SAPT_DFT_FUNCTIONAL¶. Underlying funcitonal to use for SAPT(DFT). Type: string; Default: PBE0. SAPT_DFT_GRAC_DETERMINATION¶. How is the GRAC correction determined?. Type: string; Possible Values: INPUT; Default: INPUT. SAPT_DFT_MP2_DISP_ALG¶. Which MP2 Exch-Disp module to use?. Type: string; Possible Values: FISAPT, SAPT; Default: SAPT. SAPT_FDDS_DISP_LEG_LAMBDA¶. Lambda shift in the space morphing for the FDDS Dispersion time integration. Type: double; Default: 0.3. SAPT_FDDS_DISP_NUM_POINTS¶. Number of points in the Legendre FDDS Dispersion time integration. Type: integer; Default: 10. SAPT_FDDS_V2_RHO_CUTOFF¶. Minimum rho cutoff for the in the LDA response for FDDS. Type: double; Default: 1.e-6. SAPT_QUIET¶. Interior option to clean up printing. Type: boolean; Default: false. table of contents. SAPT; SAPT(HF); AIO_CPHF; AIO_DF_INTS; BASIS; CCD_E_CONVERGENCE; CCD_MAXITER; CCD_T_CONVERGENCE; CPHF_R_CONVERGENCE; DENOMINATOR_ALGORITHM; DENOMINATOR_DELTA; DF_BASIS_ELST; DF_BASIS_SAPT; EXCH_SCALE_ALPHA; FREEZE_CORE; INTS_TOLERANCE; MAXITER; MAX_CCD_DIISVECS; MIN_CCD_DIISVECS; NAT_ORBS_T2; NAT_ORBS_T3; NAT_ORBS_V4; OCC_TOLERANCE; PRINT; SAPT_LEVEL; SAPT_MEM_CHECK; SAPT_MEM_SAFETY. SAPT(DFT); SAPT_DFT_DO_DHF; SAPT_DFT_EXCH_DISP_SCALE_SCHEME; SAPT_DFT_GRAC_SHIFT_A; SAPT_DFT_GRAC_SHIFT_B. Expert SAPT(HF); COUPLED_INDUCTION; DO_CCD_DISP; DO_DISP_EXCH_SINF; DO_IND30_EXCH_SINF; DO_IND_EXCH_SI",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/autodir_options_c/module__sapt.html:8280,integrat,integration,8280,psi4manual/master/autodir_options_c/module__sapt.html,https://psicode.org,https://psicode.org/psi4manual/master/autodir_options_c/module__sapt.html,1,['integrat'],['integration']
Deployability,"tion of memory available for the DF-MP2 three-index integral buffers used to evaluate dispersion. Type: double; Default: 0.9. Expert SAPT(DFT)¶. SAPT_DFT_DO_HYBRID¶. Enables the hybrid xc kernel in dispersion?. Type: boolean; Default: true. SAPT_DFT_EXCH_DISP_FIXED_SCALE¶. Exch-disp scaling factor for FIXED scheme for SAPT_DFT_EXCH_DISP_SCALE_SCHEME Default value of 0.770 suggested in Y. Xie, D. G. A. Smith and C. D. Sherrill, 2022 (submitted). Previous to Nov 2022, default value was 0.686 suggested by Hesselmann and Korona, J. Chem. Phys. 141, 094107 (2014). Type: double; Default: 0.770. SAPT_DFT_FUNCTIONAL¶. Underlying funcitonal to use for SAPT(DFT). Type: string; Default: PBE0. SAPT_DFT_GRAC_DETERMINATION¶. How is the GRAC correction determined?. Type: string; Possible Values: INPUT; Default: INPUT. SAPT_DFT_MP2_DISP_ALG¶. Which MP2 Exch-Disp module to use?. Type: string; Possible Values: FISAPT, SAPT; Default: SAPT. SAPT_FDDS_DISP_LEG_LAMBDA¶. Lambda shift in the space morphing for the FDDS Dispersion time integration. Type: double; Default: 0.3. SAPT_FDDS_DISP_NUM_POINTS¶. Number of points in the Legendre FDDS Dispersion time integration. Type: integer; Default: 10. SAPT_FDDS_V2_RHO_CUTOFF¶. Minimum rho cutoff for the in the LDA response for FDDS. Type: double; Default: 1.e-6. SAPT_QUIET¶. Interior option to clean up printing. Type: boolean; Default: false. table of contents. SAPT; SAPT(HF); AIO_CPHF; AIO_DF_INTS; BASIS; CCD_E_CONVERGENCE; CCD_MAXITER; CCD_T_CONVERGENCE; DENOMINATOR_ALGORITHM; DENOMINATOR_DELTA; DF_BASIS_ELST; DF_BASIS_SAPT; D_CONVERGENCE; EXCH_SCALE_ALPHA; E_CONVERGENCE; FREEZE_CORE; INTS_TOLERANCE; MAXITER; MAX_CCD_DIISVECS; MIN_CCD_DIISVECS; NAT_ORBS_T2; NAT_ORBS_T3; NAT_ORBS_V4; OCC_TOLERANCE; PRINT; SAPT_LEVEL; SAPT_MEM_CHECK; SAPT_MEM_SAFETY. SAPT(DFT); SAPT_DFT_DO_DHF; SAPT_DFT_EXCH_DISP_SCALE_SCHEME; SAPT_DFT_GRAC_SHIFT_A; SAPT_DFT_GRAC_SHIFT_B. Expert SAPT(HF); COUPLED_INDUCTION; DO_CCD_DISP; DO_DISP_EXCH_SINF; DO_IND30_EXCH_SINF; DO_I",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/autodir_options_c/module__sapt.html:8308,integrat,integration,8308,psi4manual/1.7.x/autodir_options_c/module__sapt.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/module__sapt.html,3,['integrat'],['integration']
Deployability,"tion potential/electron affinity (IP/EA) [Nooijen:1995:3629]; approaches.; The Psi4FockCI plugin allows one to perform spin-flip (SF), ionization; potential (IP), and electron affinity (EA) calculations, as well as; combined RAS-SF-IP/EA calculations, through the DETCI (CI: Configuration Interaction) module. Installation¶. Download the plugin from the GitHub repository:; >>> git clone https://github.com/shannonhouck/psi4fockci.git. Once downloaded, the plugin can be installed as follows:; >>> cd {top-level-psi4fockci-directory}; >>> python -m pip install . Sample Input¶; To run a CAS-nSF-IP/EA calculation, start with a molecule with the; correct charge and multiplicity for the reference state (i.e. some; state well-represented by a single reference). Then, run an energy; calculation, passing in the charge and multiplicity of the; desired state; the number of spin-flips and IP/EA will be automatically; determined based on this input. If additional excitations outside of the; RAS II space are desired, one can set the level of external; excitations using the conf_space keyword.; A sample input file for a RAS(h)-2SF-IP calculation is shown below:; molecule {; 0 7; N 0.0 0.0 0.0; N 0.0 0.0 1.3; symmetry c1; }. set {; basis cc-pVDZ; }. energy('psi4fockci', new_charge=1, new_multiplicity=1, conf_space=""h""). Note that for calculations involving IP/EA, inclusion of hole (for IP) and; particle (for EA) excitations is strongly recommended. Additional keywords; can be found in the documentation.; This input file can be run with Psi4:; >>> psi4 input.dat. table of contents. Psi4FockCI: A General Fock-Space CI For Spin-Flip And IP/EA; Installation; Sample Input. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Psi4FockCI: A General Fock-Space CI For Spin-Flip And IP/EA. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/plugin_psi4fockci-1.html:2539,update,updated,2539,psi4manual/1.4.0/plugin_psi4fockci-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/plugin_psi4fockci-1.html,2,['update'],['updated']
Deployability,"tion potential/electron affinity (IP/EA) [Nooijen:1995:3629]; approaches.; The Psi4FockCI plugin allows one to perform spin-flip (SF), ionization; potential (IP), and electron affinity (EA) calculations, as well as; combined RAS-SF-IP/EA calculations, through the DETCI (CI: Configuration Interaction) module. Installation¶. Download the plugin from the GitHub repository:; >>> git clone https://github.com/shannonhouck/psi4fockci.git. Once downloaded, the plugin can be installed as follows:; >>> cd {top-level-psi4fockci-directory}; >>> python -m pip install . Sample Input¶; To run a CAS-nSF-IP/EA calculation, start with a molecule with the; correct charge and multiplicity for the reference state (i.e. some; state well-represented by a single reference). Then, run an energy; calculation, passing in the charge and multiplicity of the; desired state; the number of spin-flips and IP/EA will be automatically; determined based on this input. If additional excitations outside of the; RAS II space are desired, one can set the level of external; excitations using the conf_space keyword.; A sample input file for a RAS(h)-2SF-IP calculation is shown below:; molecule {; 0 7; N 0.0 0.0 0.0; N 0.0 0.0 1.3; symmetry c1; }. set {; basis cc-pVDZ; }. energy('psi4fockci', new_charge=1, new_multiplicity=1, conf_space=""h""). Note that for calculations involving IP/EA, inclusion of hole (for IP) and; particle (for EA) excitations is strongly recommended. Additional keywords; can be found in the documentation.; This input file can be run with Psi4:; >>> psi4 input.dat. table of contents. Psi4FockCI: A General Fock-Space CI For Spin-Flip And IP/EA; Installation; Sample Input. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Psi4FockCI: A General Fock-Space CI For Spin-Flip And IP/EA. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/plugin_psi4fockci-1.html:2539,update,updated,2539,psi4manual/1.5.0/plugin_psi4fockci-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/plugin_psi4fockci-1.html,2,['update'],['updated']
Deployability,"tion theory level.; n is MP perturbation order. NUCLEAR REPULSION ENERGY¶; The nuclear repulsion energy contribution [H] to the total SCF energy.; Quantity \(E_{NN}\) in Eq. (4). (3)¶\[E_{NN} = \sum_{i, j<i}^{N_{atom}}\frac{Z_i Z_j}{|\mathbf{R}_i - \mathbf{R}_j|}\]. OCEPA(0) TOTAL ENERGY¶. OCEPA(0) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized CEPA(0) level of theory. OMP2 TOTAL ENERGY¶. OMP2 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized MP2 level of theory. OMP3 TOTAL ENERGY¶. OMP3 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized MP3 level of theory. ONE-ELECTRON ENERGY¶; The one-electron energy contribution [H] to the total SCF energy.; Quantity \(E_{1e^-}\) in Eq. (4). QCISD TOTAL ENERGY¶. QCISD CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the quadratic configuration interaction singles and doubles level; of theory. QCISD(T) TOTAL ENERGY¶. QCISD(T) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the quadratic configuration interaction singles and doubles with; perturbative triples correction level of theory. SAPT DISP ENERGY¶. SAPT ELST ENERGY¶. SAPT EXCH ENERGY¶. SAPT IND ENERGY¶; Respectively, the dispersion, electrostatics, exchange, and induction; components of the total electronic interaction energy [H] for the the; requested SAPT level of theory. The sum of these four components yields; SAPT TOTAL ENERGY. SAPT TOTAL ENERGY¶; The total electronic interaction energy [H] for the requested SAPT; level of theory. SAPT0 TOTAL ENERGY¶. SSAPT0 TOTAL ENERGY¶. SAPT2 TOTAL ENERGY¶. SAPT2+ TOTAL ENERGY¶. SAPT2+(3) TOTAL ENERGY¶. SAPT2+3 TOTAL ENERGY¶; The total electronic interaction energy [H] for the labeled SAPT level; of theory. SAPT2+(CCD) TOTAL ENERGY¶. SAPT2+(3)",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/glossary_psivariables-1.html:15386,configurat,configuration,15386,psi4manual/1.1.0/glossary_psivariables-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/glossary_psivariables-1.html,2,['configurat'],['configuration']
Deployability,"tion theory level.; n is MP perturbation order. NUCLEAR REPULSION ENERGY¶; The nuclear repulsion energy contribution [H] to the total SCF energy.; Quantity in Eq. (2). ONE-ELECTRON ENERGY¶; The one-electron energy contribution [H] to the total SCF energy.; Quantity in Eq. (2). SAPT DISP ENERGY¶. SAPT ELST ENERGY¶. SAPT EXCH ENERGY¶. SAPT IND ENERGY¶; Respectively, the dispersion, electrostatics, exchange, and induction; components of the total electronic interaction energy [H] for the the; requested SAPT level of theory. The sum of these four components yields; SAPT ENERGY. SAPT ENERGY¶; The total electronic interaction energy [H] for the requested SAPT; level of theory. SAPT SAPT0 ENERGY¶. SAPT SAPT2 ENERGY¶. SAPT SAPT2+ ENERGY¶. SAPT SAPT2+(3) ENERGY¶. SAPT SAPT2+3 ENERGY¶; The total electronic interaction energy [H] for the labeled SAPT level; of theory. SCF TOTAL ENERGY¶; The total electronic energy [H] of the SCF stage of the calculation.; The CORRELATION ENERGY variables from subsequent stages of a; calculation are often the corresponding TOTAL ENERGY variables; less this quantity. Constructed from Eq. (2). (2). TWO-ELECTRON ENERGY¶; The two-electron energy contribution [H] to the total SCF energy.; Quantity in Eq. (2). UNCP-CORRECTED 2-BODY INTERACTION ENERGY¶; The interaction energy [H] considering only two-body interactions,; computed without counterpoise correction.; Related variable CP-CORRECTED 2-BODY INTERACTION ENERGY. ZAPTn TOTAL ENERGY¶. ZAPTn CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the labeled Z-averaged perturbation theory level.; n is ZAPT perturbation order. Previous topic; Keywords by Alpha; Next topic; Keywords by Module; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Appendices ». © Copyright 2012, Psi4 Project.; Last updated on Sep 30, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/glossary_psivariables-1.html:9388,update,updated,9388,psi4manual/4.0b2/glossary_psivariables-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/glossary_psivariables-1.html,2,['update'],['updated']
Deployability,"tion to add basis *fit* as associated fitting basis; member *jkfit* to a BasisFamily object.; """"""; self.jkfit = sanitize_basisname(fit). [docs] def add_rifit(self, fit):; """"""Function to add basis *fit* as associated fitting basis; member *rifit* to a BasisFamily object.; """"""; self.rifit = sanitize_basisname(fit). [docs] def add_dualfit(self, fit):; """"""Function to add basis *fit* as associated helper basis; member *dualfit* to a BasisFamily object.; """"""; self.dualfit = sanitize_basisname(fit). [docs]def sanitize_basisname(name):; """"""Function to return *name* in coded form, stripped of; characters that confuse filenames, characters into lowercase,; ``+`` into ``p``, ``*`` into ``s``, and ``(``, ``)``, & ``,``; into ``_``.; """"""; temp = name.lower(); temp = temp.replace('+', 'p'); temp = temp.replace('*', 's'); temp = temp.replace('(', '_'); temp = temp.replace(')', '_'); temp = temp.replace(',', '_'); return temp. [docs]def load_basis_families():; """"""Function to load into the array ``basisfamily_list``; BasisFamily objects for all Psi4's standard installed bases.; """"""; from basislistdunning import load_basfam_dunning; from basislistother import load_basfam_other. if len(basisfamily_list) == 0:; load_basfam_dunning(); load_basfam_other(); return basisfamily_list. [docs]def print_basis_families():; """"""Function to print to the output file a formatted summary; of all the BasisFamily objects in ``basisfamily_list``, by; default all Psi4's standard installed bases.; """"""; basisfamily_list = load_basis_families(). text = ''; for fam in basisfamily_list:; text += '%s' % (fam); return text. [docs]def corresponding_orbital(name):; """"""Function to validate if the orbital basis *name* in coded or; ornate form is in Psi4's standard installed bases list. ``None``; is returned if the orbital basis is not found.; """"""; basisfamily_list = load_basis_families(). for fam in basisfamily_list:; if sanitize_basisname(fam.ornate) == sanitize_basisname(name):; return fam.ornate; return None. [do",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/_modules/p4util/basislist.html:3343,install,installed,3343,psi4manual/4.0b5/_modules/p4util/basislist.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/_modules/p4util/basislist.html,1,['install'],['installed']
Deployability,"tion to add basis *fit* as associated fitting basis; member *jkfit* to a BasisFamily object.; """"""; self.jkfit = sanitize_basisname(fit). [docs] def add_rifit(self, fit):; """"""Function to add basis *fit* as associated fitting basis; member *rifit* to a BasisFamily object.; """"""; self.rifit = sanitize_basisname(fit). [docs] def add_dualfit(self, fit):; """"""Function to add basis *fit* as associated helper basis; member *dualfit* to a BasisFamily object.; """"""; self.dualfit = sanitize_basisname(fit). [docs]def sanitize_basisname(name):; """"""Function to return *name* in coded form, stripped of; characters that confuse filenames, characters into lowercase,; ``+`` into ``p``, ``*`` into ``s``, and ``(``, ``)``, & ``,``; into ``_``.; """"""; temp = name.lower(); temp = temp.replace('+', 'p'); temp = temp.replace('*', 's'); temp = temp.replace('(', '_'); temp = temp.replace(')', '_'); temp = temp.replace(',', '_'); return temp. [docs]def load_basis_families():; """"""Function to load into the array ``basisfamily_list``; BasisFamily objects for all Psi4's standard installed bases.; """"""; from p4util.basislistdunning import load_basfam_dunning; from p4util.basislistother import load_basfam_other. if len(basisfamily_list) == 0:; load_basfam_dunning(); load_basfam_other(); return basisfamily_list. [docs]def print_basis_families():; """"""Function to print to the output file a formatted summary; of all the BasisFamily objects in ``basisfamily_list``, by; default all Psi4's standard installed bases.; """"""; basisfamily_list = load_basis_families(). text = ''; for fam in basisfamily_list:; text += '%s' % (fam); return text. [docs]def corresponding_orbital(name):; """"""Function to validate if the orbital basis *name* in coded or; ornate form is in Psi4's standard installed bases list. ``None``; is returned if the orbital basis is not found.; """"""; basisfamily_list = load_basis_families(). for fam in basisfamily_list:; if sanitize_basisname(fam.ornate) == sanitize_basisname(name):; return fam.ornate; re",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/p4util/basislist.html:3687,install,installed,3687,psi4manual/1.0.0/_modules/p4util/basislist.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/p4util/basislist.html,1,['install'],['installed']
Deployability,"tion via analytic gradients. cc8a; ROHF-CCSD(T) cc-pVDZ frozen-core energy for the state of the CN radical, with Cartesian input. molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. mom; Maximum Overlap Method (MOM) Test. MOM is designed to stabilize SCF convergence and to target excited Slater determinants directly. pywrap-freq-e-sowreap; Finite difference of energies frequency, run in sow/reap mode. cubeprop; RHF orbitals and density for water. fd-freq-gradient; STO-3G frequencies for H2O by finite-differences of gradients. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. dcft1; DC-06, DC-12, ODC-06 and ODC-12 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. pywrap-checkrun-uhf; This checks that all energy methods can run with a minimal input and set symmetry. opt4; SCF cc-pVTZ geometry optimzation, with Z-matrix input. dfomp2p5-2; DF-OMP2.5 cc-pVDZ energy for the H2O+ cation. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. dfcasscf-sp; CASSCF/6-31G** energy point. cc35; CC3(ROHF)/cc-pVDZ H2O geom from Olsen et al., JCP 104, 8007 (1996). psithon1; Spectroscopic constants of H2, and the full ci cc-pVTZ level of theory. cc5a; RHF CCSD(T) STO-3G frozen-core energy of C4NH4 Anion. rasci-ne; Ne atom RASCI/cc-pVQZ Example of split-virtual CISD[TQ] from Sherrill and Schaefer, J. Phys. Chem. XXX This uses a “primary” virtual space 3s3p (RAS 2)",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:17043,update,update,17043,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,4,['update'],['update']
Deployability,"tion('CCLAMBDA', 'ZETA', 'FALSE'); core.set_local_option('CCDENSITY', 'ZETA', 'FALSE'); core.set_local_option('CCDENSITY', 'XI', 'TRUE'); core.cclambda(ref_wfn); core.ccdensity(ref_wfn); core.set_local_option('CCLAMBDA', 'ZETA', 'TRUE'); core.set_local_option('CCDENSITY', 'ZETA', 'TRUE'); core.set_local_option('CCDENSITY', 'XI', 'FALSE'); core.cclambda(ref_wfn); core.ccdensity(ref_wfn). derivobj = core.Deriv(ref_wfn); grad = derivobj.compute(). ref_wfn.set_gradient(grad). optstash.restore(); return ref_wfn. def run_adcc(name, **kwargs):; """"""Prepare and run an ADC calculation in adcc, interpret the result and return; as a wavefunction. """"""; # TODO Maybe it would improve readability if this function was spilt; # up and the whole thing went to a separate file (like for sapt,; # interface_cfour.py, ... try:; import adcc; from adcc.exceptions import InvalidReference; except ModuleNotFoundError:; raise ValidationError(""adcc extras qc_module not available. Try installing ""; ""via 'pip install adcc' or 'conda install -c adcc adcc'.""). from pkg_resources import parse_version; min_version = ""0.15.16""; if parse_version(adcc.__version__) < parse_version(min_version):; raise ModuleNotFoundError(""adcc version {} is required at least. ""; ""Version {}""; "" was found."".format(min_version,; adcc.__version__)). if core.get_option('ADC', 'REFERENCE') not in [""RHF"", ""UHF""]:; raise ValidationError('adcc requires reference RHF or UHF'). # Bypass the scf call if a reference wavefunction is given; ref_wfn = kwargs.pop('ref_wfn', None); if ref_wfn is None:; ref_wfn = scf_helper(name, use_c1=True, **kwargs). # Start timer; do_timer = kwargs.pop(""do_timer"", True); if do_timer:; core.tstart(). #; # Build kwargs for adcc; #; kwargs.pop(""molecule"", None). if ref_wfn.frzcpi()[0] > 0:; kwargs[""frozen_core""] = ref_wfn.frzcpi()[0]; if ref_wfn.frzvpi()[0] > 0:; kwargs[""frozen_virtual""] = ref_wfn.frzvpi()[0]; if core.get_option(""ADC"", ""NUM_CORE_ORBITALS""):; kwargs[""core_orbitals""] = core.get_option(""ADC"", ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/procrouting/proc.html:117119,install,installing,117119,psi4manual/1.8.x/_modules/psi4/driver/procrouting/proc.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/procrouting/proc.html,3,['install'],"['install', 'installing']"
Deployability,"tion('CCLAMBDA', 'ZETA', 'FALSE'); core.set_local_option('CCDENSITY', 'ZETA', 'FALSE'); core.set_local_option('CCDENSITY', 'XI', 'TRUE'); core.cclambda(ref_wfn); core.ccdensity(ref_wfn); core.set_local_option('CCLAMBDA', 'ZETA', 'TRUE'); core.set_local_option('CCDENSITY', 'ZETA', 'TRUE'); core.set_local_option('CCDENSITY', 'XI', 'FALSE'); core.cclambda(ref_wfn); core.ccdensity(ref_wfn). derivobj = core.Deriv(ref_wfn); grad = derivobj.compute(). ref_wfn.set_gradient(grad). optstash.restore(); return ref_wfn. def run_adcc(name, **kwargs):; """"""Prepare and run an ADC calculation in adcc, interpret the result and return; as a wavefunction. """"""; # TODO Maybe it would improve readability if this function was spilt; # up and the whole thing went to a separate file (like for sapt,; # interface_cfour.py, ... try:; import adcc; from adcc.exceptions import InvalidReference; except ModuleNotFoundError:; raise ValidationError(""adcc extras qc_module not available. Try installing ""; ""via 'pip install adcc' or 'conda install -c adcc adcc'.""). if core.get_option('ADC', 'REFERENCE') not in [""RHF"", ""UHF""]:; raise ValidationError('adcc requires reference RHF or UHF'). # Bypass the scf call if a reference wavefunction is given; ref_wfn = kwargs.pop('ref_wfn', None); if ref_wfn is None:; ref_wfn = scf_helper(name, use_c1=True, **kwargs). # Start timer; do_timer = kwargs.pop(""do_timer"", True); if do_timer:; core.tstart(). #; # Build kwargs for adcc; #; kwargs.pop(""molecule"", None). if ref_wfn.frzcpi()[0] > 0:; kwargs[""frozen_core""] = ref_wfn.frzcpi()[0]; if ref_wfn.frzvpi()[0] > 0:; kwargs[""frozen_virtual""] = ref_wfn.frzvpi()[0]; if core.get_option(""ADC"", ""NUM_CORE_ORBITALS""):; kwargs[""core_orbitals""] = core.get_option(""ADC"", ""NUM_CORE_ORBITALS""). scf_accuracy = max(core.get_option(""SCF"", ""E_CONVERGENCE""),; core.get_option(""SCF"", ""D_CONVERGENCE"")); if core.get_option(""ADC"", ""R_CONVERGENCE"") < 0:; kwargs[""conv_tol""] = max(100 * scf_accuracy, 1e-6); else:; kwargs[""conv_tol""] = core.get_option",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/procrouting/proc.html:116865,install,installing,116865,psi4manual/1.7.x/_modules/psi4/driver/procrouting/proc.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/procrouting/proc.html,3,['install'],"['install', 'installing']"
Deployability,"tion, you must; run the following command in the madness directory, otherwise the PSI4; configure script will fail (autoreconf is provided by package autoconf,; but it calls another program provided by libtool, so that package must; also be installed):; >>> cd madness; >>> autoreconf; >>> cd .. Configuration and Compilation; Make an object directory in which you can compile the code; >>> mkdir obj. Next you need to configure the code. Find a configuration; option line or combination of; configuration options at Section III(1)A. Either, use the line directly:; >>> cd obj; >>> ../configure [your compilation configuration options here]. or, save your configuration options for a future compilation.; In the top-level psi4 directory, create a file like “do-configure” with; the configure command and options on one line.; >>> cat do-configure; ../configure [your compilation configuration options here]; >>> chmod u+x do-configure; >>> cd obj; >>> ../do-configure. Compile the code, run the tests, and (if tests pass) install it.; >>> make; >>> make tests; >>> make install. That’s it! The details about final user configuration are given below in; Section III(7). If something goes wrong,; check Section VI about common compilation problems. III. Detailed Installation Instructions¶; This section provides a more detailed explanation of the procedure for; compiling and installing the PSI4 package. Step 1: Configuration. General Information about Configuration; First, we recommend that you choose for the top-level psi4 source; directory something other than /usr/local/psi; $HOME/psi4 or; /usr/local/src/psi4 are convenient choices. Next, in the top-level psi4; source directory you’ve chosen, first run autoconf to generate the configure; script from configure.ac. It is best to keep the source code separate; from the compilation area, so you must first choose a subdirectory for; compilation of the codes. A simple option is psi4/objdir, which should; work for most environments. However, i",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/installfile.html:4547,install,install,4547,psi4manual/4.0b3/installfile.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/installfile.html,2,['install'],['install']
Deployability,"tion. Dispersion Corrections¶; Dispersion corrections are discussed here.; HF-3c and PBEh-3c dispersion and BSSE corrections are discussed here. Recommendations¶; The KS-DFT code is quite new, but relatively complete. During code development,; emphasis was placed on flexibility of functional technology, efficiency for; medium to large systems in difficult electronic environments (e.g., compact; spatial extents, diffuse basis sets, low band-gaps, LRC and/or hybrid GKS; functionals), and time to code completion. We are very interested in optimizing; and extending the code, so expect performance gains and extensions to; gradients/hessians and TDDFT in future releases.; Some rough guidelines for using the KS-DFT code are as follows,. Use DF for the ERI algorithm wherever possible.; PSI4 is a “tight” code, meaning we’ve set the default numerical cutoffs; for integrals, grids, and convergence criteria in such a way that you will often; get many more digits of precision than needed. You may be able to realize; additional speed gains by loosening some of these thresholds. See; SCF Convergence for default convergence criteria.; Read the literature to determine which functional technology to use. The world; contains far too many papers using B3LYP on noncovalent interactions without a -D. The “best-practice” input file for KS-DFT is:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14memory 1 GB # As much as you've got, the DF algorithm can use. molecule {; H; H 1 0.7; }. set {; basis cc-pvdz; scf_type df; guess sad; }. energy('b3lyp'). table of contents. DFT: Density Functional Theory; Theory; Minimal Input; Spin/Symmetry Treatment; Functional Selection; Grid Selection; ERI Algorithms; IP Fitting; Fractional Particle Curves; Dispersion Corrections; Recommendations. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Theoretical Methods: SCF to FCI. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/dft-1.html:27463,update,updated,27463,psi4manual/1.1.0/dft-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/dft-1.html,2,['update'],['updated']
Deployability,"tion. Embarrassing Parallelism¶; Many of the tasks automated by Python wrappers consist of a number of; independent PSI4 calculations and are thus suited to an embarrassingly; parallel mode of operation. In Psithon, these have been dubbed sow/reap; procedures and have the following general structure. Prepare an input file, simply adding mode='sow' to the; argument list of an available Python function. Run this quick job to; produce input files for lengthier calculations.; According to the instructions in the output file of the above step,; run the generated input files in any order on any variety of computers; and architectures. This is the time-intensive portion of the; calculation.; The ‘sow’ stage also produces a master input file (with a; mode='reap' directive). When all the jobs in the above step are; completed, place their output files in the same location as the; master input, and run this last, quick job to collect the results. Sow/reap procedures are governed by the mode keyword, choices being; 'continuous', 'sow', and 'reap'. Only 'sow' is likely to; be used by the user, as 'continuous' is always the default, and; input files with 'reap' are autogenerated.; Embarrassingly parallel algorithm available at present for:; Database — database(); finite difference operation of Geometry Optimization — optimize() and gradient(); finite difference of energies of Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); finite difference of gradients of Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(). Caution; Some features are not yet implemented. Buy a developer a coffee. Local options (e.g., set scf e_convergence 9) will not get transmitted to the child jobs.; Array options (e.g., set states_per_irrep [2, 1]) will not get transmitted to the child jobs.; Function intercalls (e.g., db(opt())) are not tested with sow/reap procedures. Navigation. Index. modules    .    .    .    .  · ; 1.1;",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/sowreap-1.html:1154,continuous,continuous,1154,psi4manual/1.1.0/sowreap-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/sowreap-1.html,2,['continuous'],['continuous']
Deployability,"tion. Embarrassing Parallelism¶; Many of the tasks automated by Python wrappers consist of a number of; independent PSI4 calculations and are thus suited to an embarrassingly; parallel mode of operation. In Psithon, these have been dubbed sow/reap; procedures and have the following general structure. Prepare an input file, simply adding mode='sow' to the; argument list of an available Python function. Run this quick job to; produce input files for lengthier calculations.; According to the instructions in the output file of the above step,; run the generated input files in any order on any variety of computers; and architectures. This is the time-intensive portion of the; calculation.; The ‘sow’ stage also produces a master input file (with a; mode='reap' directive). When all the jobs in the above step are; completed, place their output files in the same location as the; master input, and run this last, quick job to collect the results. Sow/reap procedures are governed by the mode keyword, choices being; 'continuous', 'sow', and 'reap'. Only 'sow' is likely to; be used by the user, as 'continuous' is always the default, and; input files with 'reap' are autogenerated.; Embarrassingly parallel algorithm available at present for:; Database — database(); finite difference operation of Geometry Optimization — optimize() and gradient(); finite difference of energies of Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); finite difference of gradients of Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(). Caution; Some features are not yet implemented. Buy a developer a coffee. Local options (e.g., set scf e_convergence 9) will not get transmitted to the child jobs.; Array options (e.g., set states_per_irrep [2, 1]) will not get transmitted to the child jobs.; Function intercalls (e.g., db(opt())) are not tested with sow/reap procedures. «; hide menu. menu; sidebar; »; . Navigation. Index. mod",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/sowreap-1.html:1156,continuous,continuous,1156,psi4manual/1.2.1/sowreap-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/sowreap-1.html,4,['continuous'],['continuous']
Deployability,"tion. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Managing: Git, Conda, CMake and all that; Git, Versioning. Git, Versioning¶. How to bump a version¶. ACT to check everything in; OBSERVE current versioning state. Be on master of (i) a direct clone or (ii) clone-of-fork with master; up-to-date with upstream (including tags!!!) and with upstream as; remote.; https://github.com/psi4/psi4/releases says v1.1a1 & 007a9b6. >>> git tag; v1.0; v1.1a1. >>> cat psi4/metadata.py; __version__ = '1.1a1'; __version_long = '1.1a1+007a9b6'; __version_upcoming_annotated_v_tag = '1.1a2'. >>> git describe --abbrev=7 --long --always HEAD; v1.1a1-417-gcbee32b. >>> git describe --abbrev=7 --long --dirty; v1.1a1-417-gcbee32b. >>> ./psi4/versioner.py; Defining development snapshot version: 1.1a2.dev417+cbee32b (computed); 1.1a2.dev417 {master} cbee32b 1.0.0.999 1.0 <-- 1.1a2.dev417+cbee32b. >>> git diff. Observe that current latest tag matches metadata scipt and git; describe, that GitHub releases matches metadata script, that upcoming in; metadata script matches current versioner version.; Note that current tag is v1.1a1. Decide on imminent tag, say v1.1rc1. ACT to bump tag in code. Edit current & prospective tag in psi4/psi4/metadata.py. Use your; decided-upon tag v1.1rc1 and a speculative next tag, say v1.1rc2,; and use 7 “z”s for the part you can’t predict. >>> vi psi4/metadata.py. >>> git diff; diff --git a/psi4/metadata.py b/psi4/metadata.py; index 5d87b55..6cbc05e 100644; --- a/psi4/metadata.py; +++ b/psi4/metadata.py; @@ -1,6 +1,6 @@; -__version__ = '1.1a1'; -__version_long = '1.1a1+007a9b6'; -__version_upcoming_annotated_v_tag = '1.1a2'; +__version__ = '1.1rc1'; +__version_long = '1.1rc1+zzzzzzz'; +__version_upcoming_annotated_v_tag = '1.1rc2'. >>> git add psi4/metadata.py. >>> git commit -m ""v1.1rc1"". OBSERVE undefined version state. >>> git describe --abbrev=7 --long --always HEAD; v1.1a1-418-g6100822. >>> git describe --abbrev=7 --long --dirty; v1.1a1-418-g6100822. ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/manage_git.html:1019,release,releases,1019,psi4manual/1.8.x/manage_git.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/manage_git.html,1,['release'],['releases']
Deployability,"tion. Index. modules    .    .    .    .  · ; 1.9.1;  · . PSI4. Managing: Git, Conda, CMake and all that; Git, Versioning. Git, Versioning¶. How to bump a version¶. ACT to check everything in; OBSERVE current versioning state. Be on master of (i) a direct clone or (ii) clone-of-fork with master; up-to-date with upstream (including tags!!!) and with upstream as; remote.; https://github.com/psi4/psi4/releases says v1.1a1 & 007a9b6. >>> git tag; v1.0; v1.1a1. >>> cat psi4/metadata.py; __version__ = '1.1a1'; __version_long = '1.1a1+007a9b6'; __version_upcoming_annotated_v_tag = '1.1a2'. >>> git describe --abbrev=7 --long --always HEAD; v1.1a1-417-gcbee32b. >>> git describe --abbrev=7 --long --dirty; v1.1a1-417-gcbee32b. >>> ./psi4/versioner.py; Defining development snapshot version: 1.1a2.dev417+cbee32b (computed); 1.1a2.dev417 {master} cbee32b 1.0.0.999 1.0 <-- 1.1a2.dev417+cbee32b. >>> git diff. Observe that current latest tag matches metadata scipt and git; describe, that GitHub releases matches metadata script, that upcoming in; metadata script matches current versioner version.; Note that current tag is v1.1a1. Decide on imminent tag, say v1.1rc1. ACT to bump tag in code. Edit current & prospective tag in psi4/psi4/metadata.py. Use your; decided-upon tag v1.1rc1 and a speculative next tag, say v1.1rc2,; and use 7 “z”s for the part you can’t predict. >>> vi psi4/metadata.py. >>> git diff; diff --git a/psi4/metadata.py b/psi4/metadata.py; index 5d87b55..6cbc05e 100644; --- a/psi4/metadata.py; +++ b/psi4/metadata.py; @@ -1,6 +1,6 @@; -__version__ = '1.1a1'; -__version_long = '1.1a1+007a9b6'; -__version_upcoming_annotated_v_tag = '1.1a2'; +__version__ = '1.1rc1'; +__version_long = '1.1rc1+zzzzzzz'; +__version_upcoming_annotated_v_tag = '1.1rc2'. >>> git add psi4/metadata.py. >>> git commit -m ""v1.1rc1"". OBSERVE undefined version state. >>> git describe --abbrev=7 --long --always HEAD; v1.1a1-418-g6100822. >>> git describe --abbrev=7 --long --dirty; v1.1a1-418-g6100822. ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/manage_git.html:1019,release,releases,1019,psi4manual/1.9.x/manage_git.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/manage_git.html,1,['release'],['releases']
Deployability,"tion. Type: integer; Default: 1000. PNO_CONVERGENCE¶. General convergence criteria for DLPNO methods. Type: string; Possible Values: LOOSE, NORMAL, TIGHT; Default: NORMAL. R_CONVERGENCE¶. Residual convergence criteria for local MP2 iterations. Type: conv double; Default: 1e-6. Expert Expert Options¶. F_CUT¶. Fock matrix threshold for treating ampltudes as coupled during local MP2 iterations. Type: double; Default: 1e-5. S_CUT¶. Overlap matrix threshold for removing linear dependencies. Type: double; Default: 1e-8. T_CUT_CLMO¶. Basis set coefficient threshold for including basis function (m) in domain of LMO (i). Type: double; Default: 1e-2. T_CUT_CPAO¶. Basis set coefficient threshold for including basis function (n) in domain of PAO (u). Type: double; Default: 1e-3. T_CUT_DO¶. DOI threshold for including PAO (u) in domain of LMO (i). Type: double; Default: 1e-2. T_CUT_DO_PRE¶. DOI threshold for including PAO (u) in domain of LMO (i) during pre-screening. Type: double; Default: 3e-2. T_CUT_DO_IJ¶. DOI threshold for treating LMOs (i,j) as interacting. Type: double; Default: 1e-5. T_CUT_MKN¶. Mulliken charge threshold for including aux BFs on atom (a) in domain of LMO (i). Type: double; Default: 1e-3. T_CUT_PNO¶. Occupation number threshold for removing PNOs. Type: double; Default: 1e-8. T_CUT_PRE¶. Pair energy threshold (dipole approximation) for treating LMOs (i, j) as interacting. Type: double; Default: 1e-6. table of contents. DLPNO; General Options; DF_BASIS_MP2; DLPNO_LOCAL_ORBITALS; DLPNO_MAXITER; E_CONVERGENCE; LOCAL_CONVERGENCE; LOCAL_MAXITER; PNO_CONVERGENCE; R_CONVERGENCE. Expert Expert Options; F_CUT; S_CUT; T_CUT_CLMO; T_CUT_CPAO; T_CUT_DO; T_CUT_DO_PRE; T_CUT_DO_IJ; T_CUT_MKN; T_CUT_PNO; T_CUT_PRE. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Keywords by Module; DLPNO. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/autodir_options_c/module__dlpno-1.html:2789,update,updated,2789,psi4manual/1.5.0/autodir_options_c/module__dlpno-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodir_options_c/module__dlpno-1.html,2,['update'],['updated']
Deployability,"tion. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. cc38; RHF-CC2-LR/cc-pVDZ static polarizabilities of HOF molecule. mints6; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. sapt-dft2; SAPT(DFT) aug-cc-pVDZ computation for the water dimer interaction energy. rasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. dft-grad-meta; meta-GGA gradients of water and ssh molecules reference gradients updated due to new BraggSlater radii. dfomp2-grad3; Tests OMP2 gradient in the presence of a dipole field. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. dct9; UHF-ODC-12 and RHF-ODC-12 single-point energy for H2O. This performs a simultaneous update of orbitals and cumulants, using DIIS extrapolation. Four-virtual integrals are handled in the AO basis, where integral transformation is avoided. In the next RHF-ODC-12 computation, AO_BASIS=NONE is used, where four-virtual integrals are transformed into MO basis. cc47; EOM-CCSD/cc-pVDZ on H2O2 with two excited states in each irrep. omp3-2; OMP3 cc-pCVDZ energy with ROHF initial guess for the NO radical. cc12; Single point energies of multiple excited states with EOM-CCSD. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. nbody-intermediates; HF/cc-pVDZ many body energies of an arbitrary noble gas trimer complex Size vs cost",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html:30740,update,updated,30740,psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html,4,['update'],['updated']
Deployability,"tion;  ; ndarray(ndof) str irrep or None if unclassifiable. mu; reduced mass; u; ndarray(ndof) float (+/+). k; force constant; mDyne/A; ndarray(ndof) float (+/-). DQ0; RMS deviation v=0; a0 u^1/2; ndarray(ndof) float (+/0). Qtp0; Turning point v=0; a0 u^1/2; ndarray(ndof) float (+/0). Xtp0; Turning point v=0; a0; ndarray(ndof) float (+/0). theta_vib; char temp; K; ndarray(ndof) float (+/0). Visualization of Normal Modes¶; PSI4 has the ability to export a Molden file that stores information about; the harmonic frequencies and normal modes computed via frequency().; This feature can be enabled by setting the option NORMAL_MODES_WRITE to true.; The filename of the Molden file ends in .molden_normal_modes, and the prefix is; determined by WRITER_FILE_LABEL (if set), or else by the name of the; output file plus the name of the current molecule.; The normal coordinates saved in the Molden file are normalized and are not; mass weighted. Molden Interface Keywords¶. NORMAL_MODES_WRITE¶. Do write a file containing the normal modes in Molden format? If so, the filename will end in .molden_normal_modes, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. WRITER_FILE_LABEL¶. Base filename for text files written by PSI, such as the MOLDEN output file, the Hessian file, the internal coordinate file, etc. Use the add_str_i function to make this string case sensitive. Type: string; Default: No Default. table of contents. Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); Visualization of Normal Modes; Molden Interface Keywords; NORMAL_MODES_WRITE; WRITER_FILE_LABEL. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Psithon Functions: Invoking a Calculation. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 July 2018 04:21AM.; Created using Sphinx 1.7.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/freq-1.html:7821,update,updated,7821,psi4manual/1.2.1/freq-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/freq-1.html,2,['update'],['updated']
Deployability,"tionError(""""""Argument mol must be psi4string or qcdb.Molecule""""""); mol.update_geometry(). # Validate arguments; if dertype is None:; dertype = -1; elif der0th.match(str(dertype)):; dertype = 0; elif der1st.match(str(dertype)):; dertype = 1; elif der2nd.match(str(dertype)):; raise ValidationError(""""""Requested derivative level 'dertype' %s not valid for run_dftd3."""""" % (dertype)); else:; raise ValidationError(""""""Requested derivative level 'dertype' %s not valid for run_dftd3."""""" % (dertype)). if dashlvl is not None:; dashlvl = dashlvl.lower(); dashlvl = get_dispersion_aliases()[dashlvl] if dashlvl in get_dispersion_aliases() else dashlvl; if dashlvl not in dashcoeff.keys():; raise ValidationError(""""""-D correction level %s is not available. Choose among %s."""""" % (dashlvl, dashcoeff.keys())); else:; raise ValidationError(""""""Must specify a dashlvl""""""). if func is not None:; dftd3_params = dash_server(func, dashlvl); else:; dftd3_params = {}. if dashparam is not None:; dftd3_params.update(dashparam). # Move ~/.dftd3par.<hostname> out of the way so it won't interfere; defaultfile = os.path.expanduser('~') + '/.dftd3par.' + socket.gethostname(); defmoved = False; if os.path.isfile(defaultfile):; os.rename(defaultfile, defaultfile + '_hide'); defmoved = True. # Find environment by merging PSIPATH and PATH environment variables; lenv = {; 'PATH': ':'.join([os.path.abspath(x) for x in os.environ.get('PSIPATH', '').split(':') if x != '']) + \; ':' + os.environ.get('PATH'),; 'LD_LIBRARY_PATH': os.environ.get('LD_LIBRARY_PATH'); }; # Filter out None values as subprocess will fault on them; lenv = {k: v for k, v in lenv.items() if v is not None}. # Find out if running from Psi4 for scratch details and such; # try:; # import psi4; # except ImportError as err:; # isP4regime = False; # else:; # isP4regime = True. # Setup unique scratch directory and move in; current_directory = os.getcwd(); if isP4regime:; psioh = core.IOManager.shared_object(); psio = core.IO.shared_object(); os.chd",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/_modules/qcdb/interface_dftd3.html:5652,update,update,5652,psi4manual/1.2.1/_modules/qcdb/interface_dftd3.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/_modules/qcdb/interface_dftd3.html,1,['update'],['update']
Deployability,"tion_size(self); Returns the total collocation size of all blocks. max_functions(self); Returns the maximum number of functions in a block. max_points(self); Returns the maximum number of points in a block. npoints(self); Returns the number of grid points. orientation(self); Returns the orientation of the grid. print(self, arg0, arg1); Prints grid information. Methods Documentation. blocks(self: psi4.core.MolecularGrid) → List[psi4.core.BlockOPoints]¶; Returns a list of blocks. collocation_size(self: psi4.core.MolecularGrid) → int¶; Returns the total collocation size of all blocks. max_functions(self: psi4.core.MolecularGrid) → int¶; Returns the maximum number of functions in a block. max_points(self: psi4.core.MolecularGrid) → int¶; Returns the maximum number of points in a block. npoints(self: psi4.core.MolecularGrid) → int¶; Returns the number of grid points. orientation(self: psi4.core.MolecularGrid) → psi4.core.Matrix¶; Returns the orientation of the grid. print(self: psi4.core.MolecularGrid, arg0: str, arg1: int) → None¶; Prints grid information. blocks(self: psi4.core.MolecularGrid) → List[psi4.core.BlockOPoints]; Returns a list of blocks. collocation_size(self: psi4.core.MolecularGrid) → int; Returns the total collocation size of all blocks. max_functions(self: psi4.core.MolecularGrid) → int; Returns the maximum number of functions in a block. max_points(self: psi4.core.MolecularGrid) → int; Returns the maximum number of points in a block. npoints(self: psi4.core.MolecularGrid) → int; Returns the number of grid points. orientation(self: psi4.core.MolecularGrid) → psi4.core.Matrix; Returns the orientation of the grid. print(self: psi4.core.MolecularGrid, arg0: str, arg1: int) → None; Prints grid information. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/api/psi4.core.moleculargrid.html:2212,update,updated,2212,psi4manual/1.3.2/api/psi4.core.moleculargrid.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.moleculargrid.html,1,['update'],['updated']
Deployability,"tional method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. mode (string) – \(\Rightarrow\) 'continuous' \(\Leftarrow\) || 'sow' || 'reap'; For a finite difference of energies or gradients frequency, indicates; whether the calculations required to complete the frequency are to be run; in one file ('continuous') or are to be farmed out in an; embarrassingly parallel fashion ('sow'/'reap')/ For the latter,; run an initial job with 'sow' and follow instructions in its output file.; For maximum flexibility, return_wfn is always on in 'reap' mode. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/freq-1.html:1938,continuous,continuous,1938,psi4manual/1.1.0/freq-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/freq-1.html,26,['continuous'],['continuous']
Deployability,"tional. name; calls method in Stanton and Gauss’s CFOUR program [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples:. >>> # [1] Analytic hf optimization; >>> optimize('hf'). >>> # [2] Finite difference mp5 optimization with gradient; >>> # printed to output file; >>> e, wfn = opt('mp5', return_wfn='yes'); >>> wfn.gradient().print_out(). >>> # [3] Can automatically perform complete basis set extrapolations; >>> optimize('MP2/cc-pV([D,T]+d)Z'). >>> # [4] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> optimize(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). >>> # [5] Get info like geometry, gradient, energy back after an; >>> # optimization fails. Note that the energy and gradient; >>> # correspond to the last optimization cycle, whereas the; >>> # geometry (by default) is the anticipated *next* optimization step.; >>> try:; >>> optimize('hf/cc-pvtz'); >>> except psi4.OptimizationConvergenceError as ex:; >>> next_geom_coords_as_numpy_array = np.asarray(ex.wfn.molecule().geometry()). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.opt-1.html:13125,update,updated,13125,psi4manual/1.3.2/api/psi4.driver.opt-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.opt-1.html,4,['update'],['updated']
Deployability,"tional. sogga; SOGGA Exchange + PBE Correlation Functional. sogga11; SOGGA11 Exchange-Correlation Functional. sogga11-x; SOGGA11-X Hybrid Exchange-Correlation Functional. sogga11-x-d3bj;  . svwn; SVWN3 (RPA) LSDA Functional. teter93; TETER93 Exchange-Correlation Functional. th-fc; TH-FC GGA Exchange-Correlation Functional. th-fcfo; TH-FCFO GGA Exchange-Correlation Functional. th-fco; TH-FCO GGA Exchange-Correlation Functional. th-fl; TH-FL GGA Exchange-Correlation Functional. th1; TH1 GGA Exchange-Correlation Functional. th2; TH2 GGA Exchange-Correlation Functional. th3; TH3 GGA Exchange-Correlation Functional. th4; TH4 GGA Exchange-Correlation Functional. tpss; TPSS Meta-GGA XC Functional. tpss-d3bj;  . tpss-nl; TPSS Meta-GGA XC Functional. tpssh; TPSSh Hyb-GGA Exchange-Correlation Functional. tpssh-d3bj;  . tpssh-nl; TPSSh-nl Hyb-GGA Exchange-Correlation Functional. tpsslyp1w; TPSSLYP1W GGA Exchange-Correlation Functional. tuned-cam-b3lyp; TUNED-CAM-B3LYP Hyb-GGA Exchange-Correlation Functional. vsxc; VSXC Meta-GGA XC Functional. vv10; VV10 GGA Exchange-Correlation Functional. wb97; wB97 GGA Exchange-Correlation Functional. wb97m-d3bj;  . wb97m-v; wB97M-V Hyb-GGA Exchange-Correlation Functional. wb97x; wB97X Hyb-GGA Exchange-Correlation Functional. wb97x-d;  . wb97x-d3bj;  . wb97x-v; wB97X-V Hyb-GGA Exchange-Correlation Functional. wpbe; PBE SR-XC Functional (HJS Model). wpbe-d3bj;  . wpbe-d3mbj;  . wpbe0; PBE0 SR-XC Functional (HJS Model). x1b95; X1B95 Hyb-GGA Exchange-Correlation Functional. x3lyp; X3LYP Hyb-GGA Exchange-Correlation Functional. x3lyp-d3bj;  . xb1k; XB1K Hyb-GGA Exchange-Correlation Functional. xlyp; XLYP GGA Exchange-Correlation Functional. xlyp-d3bj;  . zlp; ZLP GGA Exchange-Correlation Functional. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Appendices; DFT Functionals. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/autodoc_dft_energy-1.html:11044,update,updated,11044,psi4manual/1.3.2/autodoc_dft_energy-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/autodoc_dft_energy-1.html,2,['update'],['updated']
Deployability,"tional; Y; Y; —; 0.500000; —; 1.000000; 0.000000 / 0.269000; Y. REVPBE-D3BJ; revPBE GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; Y. REVPBE0-D3BJ; revPBE0 Hybrid GGA Exchange-Correlation Functional; Y; —; —; 0.250000; —; —; —; Y. REVTPSS-D3BJ; revised TPSS Meta-GGA XC Functional; Y; Y; —; —; —; —; —; Y. REVTPSSH-D3BJ; revTPSSh-d3bj Hyb-GGA Exchange-Correlation Functional; Y; Y; —; 0.100000; —; —; —; Y. RPBE-D3BJ; RPBE GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; Y. SCAN-D3BJ; SCAN Meta-GGA XC Functional; Y; Y; —; —; —; —; —; Y. SOGGA11-X-D3BJ; SOGGA11-X Hybrid Exchange-Correlation Functional; Y; —; —; 0.401500; —; —; —; Y. T-HCTH-D3BJ; Tau HCTH Meta-GGA XC Functional; Y; Y; —; —; —; —; —; Y. TPSS-D3BJ; TPSS Meta-GGA XC Functional; Y; Y; —; —; —; —; —; Y. TPSSH-D3BJ; TPSSh-d3bj Hyb-GGA Exchange-Correlation Functional; Y; Y; —; 0.100000; —; —; —; Y. WB97M-D3BJ; wB97M-V with D3(BJ) instead of VV10 dispersion; Y; Y; 0.300000; 0.150000; —; —; —; Y. WB97X-D; wB97X-D Hyb-GGA Exchange-Correlation Functional; Y; —; 0.200000; 0.222036; —; —; —; Y. WB97X-D3; wB97X-D3 Hyb-GGA Exchange-Correlation Functional; Y; —; 0.250000; 0.195728; —; —; —; Y. WB97X-D3BJ; wB97X-V with D3(BJ) instead of VV10 dispersion; Y; —; 0.300000; 0.167000; —; —; —; Y. WPBE-D3BJ; PBE SR-XC Functional (HJS Model); Y; —; 0.400000; —; —; —; —; Y. WPBE-D3MBJ; PBE SR-XC Functional (HJS Model); Y; —; 0.400000; —; —; —; —; Y. X3LYP-D3BJ; X3LYP-d3bj Hyb-GGA Exchange-Correlation Functional; Y; —; —; 0.218000; —; —; —; Y. XLYP-D3BJ; XLYP-d3bj GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; Y. table of contents. DFT Functionals; All Available; GGA; Meta; Long-Range Corrected; Hybrid; Double-Hybrid; SCS Double-Hybrid; Dispersion-Corrected. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.6;  · . PSI4. Appendices; DFT Functionals. © Copyright 2022, The Psi4 Project.; Last updated on Thursday, 19 May 2022 08:57PM.; Created using Sphinx 4.5.0.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/dft_byfunctional.html:68472,update,updated,68472,psi4manual/1.6.x/dft_byfunctional.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/dft_byfunctional.html,1,['update'],['updated']
Deployability,"tions (for RESPONSE_ALOGRITHM = TWOSTEP). Type: integer; Default: 50. MAXITER¶. Maximum number of the macro-iterations for both the energy and the solution of the response equations. Type: integer; Default: 40. QC_COUPLING¶. Controls whether to include the coupling terms in the DCFT electronic Hessian (for ALOGRITHM = QC only). Type: boolean; Default: true. REFERENCE¶. Reference wavefunction type. Type: string; Possible Values: UHF; Default: UHF. RESPONSE_ALGORITHM¶. The algorithm to use for the solution of the response equations for the analytic gradients and properties. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS; Default: TWOSTEP. R_CONVERGENCE¶. Convergence criterion for the RMS of the residual vector in the density cumulant updates, as well as the solution of the density cumulant and orbital response equations. In the orbital updates controls the RMS of the SCF error vector. Type: conv double; Default: 1e-10. SCF_MAXITER¶. Maximum number of the orbital update micro-iterations per macro-iteration (for ALOGRITHM = TWOSTEP). Same keyword controls the maximum number of orbital response micro-iterations per macro-iteration for the solution of the response equations (for RESPONSE_ALOGRITHM = TWOSTEP). Type: integer; Default: 50. Expert¶. CACHELEVEL¶. Controls how to cache quantities within the DPD library. Type: integer; Default: 2. DAMPING_PERCENTAGE¶. The amount (percentage) of damping to apply to the orbital update procedure: 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the previous iteration’s density being mixed into the current iteration) can help in cases where oscillatory convergence is observed. Type: double; Default: 0.0. DCFT_GUESS¶. Whether to read the orbitals from a previous computation, or to compute an MP2 guess. Type: string; Possible Values: CC, BCC, MP2; Default: MP2. DIIS_MAX_VECS¶. Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/autodir_options_c/module__dcft-1.html:2804,update,update,2804,psi4manual/4.0b4/autodir_options_c/module__dcft-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodir_options_c/module__dcft-1.html,4,['update'],['update']
Deployability,"tions. Type: integer; Default: 40. MAXITER (FISAPT); FISAPT — Maximum number of iterations for CPHF. Type: integer; Default: 50. MAXITER (FNOCC); FNOCC — Maximum number of CC iterations. Type: integer; Default: 100. MAXITER (MCSCF); MCSCF — Maximum number of iterations. Type: integer; Default: 100. MAXITER (PSIMRCC); PSIMRCC — Maximum number of iterations to determine the amplitudes. Type: integer; Default: 100. MAXITER (SAPT); SAPT — Maximum number of CPHF iterations. Type: integer; Default: 50. MAXITER (SCF); SCF — Maximum number of iterations. Cfour Interface: Keyword translates into CFOUR_SCF_MAXCYC. Type: integer; Default: 100. MCSCF_ALGORITHM (DETCI); DETCI — Convergence algorithm to utilize. Two-Step, Augmented Hessian, or One-Step. Defaults to TS for RASSCF. Type: string; Possible Values: TS, AH; Default: TS. MCSCF_CI_CLEANUP (DETCI); DETCI — Cleanup the CI info at the end of a run?. Type: boolean; Default: true. MCSCF_DIIS_ERROR_TYPE (DETCI); DETCI — DIIS error vector type either, the AO orbital gradient or the orbital rotation update matrix. Type: string; Possible Values: GRAD, UPDATE; Default: GRAD. MCSCF_DIIS_FREQ (DETCI); DETCI — How often to do a DIIS extrapolation for TS convergence. Type: integer; Default: 1. MCSCF_DIIS_MAX_VECS (DETCI); DETCI — Maximum number of DIIS vectors for TS convergence. Type: integer; Default: 8. MCSCF_DIIS_START (DETCI); DETCI — Iteration to turn on DIIS for TS convergence. Type: integer; Default: 3. MCSCF_DPD_CLEANUP (DETCI); DETCI — Cleanup the DPD MCSCF object at the end of a run?. Type: boolean; Default: true. MCSCF_E_CONVERGENCE (DETCI); DETCI — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-7. MCSCF_GUESS (DETCI); DETCI — Initial MCSCF starting guess, MP2 natural orbitals only available for DF-RHF reference. Type: string; Possible Values: MP2, SCF; Default: SCF. MCSCF_MAX_ROT (DETCI); DETCI — Maximum value",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/autodoc_glossary_options_c-1.html:159208,update,update,159208,psi4manual/1.3.2/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/autodoc_glossary_options_c-1.html,2,['update'],['update']
Deployability,"tions; Documentation; PsiPEP: Plans and Practices to Organize Psi4. Programming: Using the Core Libraries; LibOptions: globals, locals, has_changed and all that; Adding Methods to Driver; BasisSet. Python Driver; wrapper_database; diatomic; pcm_placeholder; dependency_check; gaussian_n; frac; molutil; driver_util; aliases; interactive; pubchem; inputparser; driver_nbody; driver_cbs; driver; wrapper_autofrag; qmmm; qcdb; p4util; p4const; procedures. psi4: Linking C++ and Python; psi4; AOShellCombinationsIterator; AngularMomentumInt; BasisSet; BasisSetParser; BoysLocalizer; CIVector; CIWavefunction; CUHF; CdSalcList; CorrelationFactor; CubeProperties; DFChargeFitter; DFTensor; Deriv; DiagonalizeOrder; Dimension; DipoleInt; Dispersion; DoublePyBuffer; EFP; ERI; ElectricFieldInt; ElectrostaticInt; Environment; ErfComplementERI; ErfERI; ExternalPotential; F12; F12DoubleCommutator; F12G12; F12Squared; FCHKWriter; FittedSlaterCorrelationFactor; FittingMetric; Functional; Gaussian94BasisSetParser; GaussianShell; GeometryUnits; HF; IO; IOManager; IntVector; IntegralFactory; JK; KineticInt; LaplaceDenominator; LibParallelHelper; Localizer; Matrix; MatrixFactory; MintsHelper; MoldenWriter; Molecule; MultipoleInt; MultipoleSymmetry; NBOWriter; NablaInt; OEProp; OneBodyAOInt; OrbitalSpace; OverlapInt; PMLocalizer; PetiteList; PointGroup; PotentialInt; Process; PseudoTrial; PseudospectralInt; PsiReturnType; Psi_Numpy_Interface; QuadrupoleInt; RHF; ROHF; SOBasisSet; SuperFunctional; SymmetryOperation; ThreeCenterOverlapInt; TracelessQuadrupoleInt; TwoBodyAOInt; TwoElectronInt; Vector; Vector3; View; Wavefunction; matrix_vector; vector_of_doubles; Full Docs Output. Indices. Index; Module Index; Search Page. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    ; Psi4 [1.0.0 6a9a71b] » . © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/contents.html:5056,update,updated,5056,psi4manual/1.0.0/contents.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/contents.html,1,['update'],['updated']
Deployability,"tionsM += """"""# length and give summary results for the frequency computation in its output file.\n#\n""""""; instructionsM += """"""# psi4 -i %-27s -o %-27s\n#\n\n"""""" % ('FREQ-master.in', 'FREQ-master.out'). fmaster = open('FREQ-master.in', 'w'); fmaster.write('# This is a psi4 input file auto-generated from the hessian() wrapper.\n\n'); fmaster.write(p4util.format_molecule_for_input(molecule)); fmaster.write(p4util.format_options_for_input()); p4util.format_kwargs_for_input(fmaster, 2, **kwargs); fmaster.write(""""""%s('%s', **kwargs)\n\n"""""" % (frequency.__name__, lowername)); fmaster.write(instructionsM); fmaster.close(); psi4.print_out(instructionsM). for n, displacement in enumerate(displacements):; rfile = 'FREQ-%s' % (n + 1). # Build string of title banner; banners = ''; banners += """"""psi4.print_out('\\n')\n""""""; banners += """"""p4util.banner(' Hessian Computation: Energy Displacement %d ')\n"""""" % (n + 1); banners += """"""psi4.print_out('\\n')\n\n"""""". if (freq_mode.lower() == 'continuous'):; # Print information to output.dat; psi4.print_out('\n'); p4util.banner('Loading displacement %d of %d' % (n + 1, ndisp)). # Print information to the screen; print(' %d' % (n + 1), end=""""); if (n + 1) == ndisp:; print('\n', end=''); sys.stdout.flush(). # Load in displacement into the active molecule; molecule.set_geometry(displacement). # Perform the energy calculation; func(lowername, **kwargs). # Save the energy; energies.append(psi4.get_variable('CURRENT ENERGY')). # clean may be necessary when changing irreps of displacements; psi4.clean(). # S/R: Write each displaced geometry to an input file; elif (freq_mode.lower() == 'sow'):; molecule.set_geometry(displacement). # S/R: Prepare molecule, options, and kwargs; freagent = open('%s.in' % (rfile), 'w'); freagent.write('# This is a psi4 input file auto-generated from the gradient() wrapper.\n\n'); freagent.write(p4util.format_molecule_for_input(molecule)); freagent.write(p4util.format_options_for_input()); p4util.format_kwargs_for_input(",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/_modules/driver.html:68689,continuous,continuous,68689,psi4manual/4.0b5/_modules/driver.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/_modules/driver.html,1,['continuous'],['continuous']
Deployability,"tionsM += """"""# psi4 -i %-27s -o %-27s\n#\n\n"""""" % ('FREQ-master.in', 'FREQ-master.out'). with open('FREQ-master.in', 'wb') as fmaster:; fmaster.write('# This is a psi4 input file auto-generated from the hessian() wrapper.\n\n'.encode('utf-8')); fmaster.write(p4util.format_molecule_for_input(moleculeclone).encode('utf-8')); fmaster.write(p4util.format_options_for_input(moleculeclone, **kwargs)); p4util.format_kwargs_for_input(fmaster, lmode=2, return_wfn=True, freq_dertype=1, **kwargs); fmaster.write((""""""retE, retwfn = %s('%s', **kwargs)\n\n"""""" % (frequency.__name__, lowername)).encode('utf-8')); fmaster.write(instructionsM.encode('utf-8')); core.print_out(instructionsM). for n, displacement in enumerate(displacements):; rfile = 'FREQ-%s' % (n + 1). # Build string of title banner; banners = ''; banners += """"""core.print_out('\\n')\n""""""; banners += """"""p4util.banner(' Hessian Computation: Gradient Displacement %d ')\n"""""" % (n + 1); banners += """"""core.print_out('\\n')\n\n"""""". if freq_mode == 'continuous':. # print progress to file and screen; core.print_out('\n'); p4util.banner('Loading displacement %d of %d' % (n + 1, ndisp)); print("""""" %d"""""" % (n + 1), end=('\n' if (n + 1 == ndisp) else '')); sys.stdout.flush(). # Load in displacement into the active molecule (xyz coordinates only); moleculeclone.set_geometry(displacement). # Perform the gradient calculation; G, wfn = gradient(lowername, molecule=moleculeclone, return_wfn=True, **kwargs); gradients.append(wfn.gradient()); energies.append(core.get_variable('CURRENT ENERGY')). # clean may be necessary when changing irreps of displacements; core.clean(). # S/R: Write each displaced geometry to an input file; elif freq_mode == 'sow':; moleculeclone.set_geometry(displacement). # S/R: Prepare molecule, options, kwargs, function call and energy save; # forcexyz in molecule writer S/R enforcement of !reinterpret_coordentry above; with open('%s.in' % (rfile), 'wb') as freagent:; freagent.write('# This is a psi4 input file auto-g",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/driver.html:71137,continuous,continuous,71137,psi4manual/1.1.0/_modules/psi4/driver/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/driver.html,2,['continuous'],['continuous']
Deployability,"tionsM += """"""# psi4 -i %-27s -o %-27s\n#\n\n"""""" % ('FREQ-master.in', 'FREQ-master.out'). with open('FREQ-master.in', 'wb') as fmaster:; fmaster.write('# This is a psi4 input file auto-generated from the hessian() wrapper.\n\n'.encode('utf-8')); fmaster.write(p4util.format_molecule_for_input(moleculeclone).encode('utf-8')); fmaster.write(p4util.format_options_for_input(moleculeclone, **kwargs)); p4util.format_kwargs_for_input(fmaster, lmode=2, return_wfn=True, freq_dertype=1, **kwargs); fmaster.write((""""""retE, retwfn = %s('%s', **kwargs)\n\n"""""" % (frequency.__name__, lowername)).encode('utf-8')); fmaster.write(instructionsM.encode('utf-8')); psi4.print_out(instructionsM). for n, displacement in enumerate(displacements):; rfile = 'FREQ-%s' % (n + 1). # Build string of title banner; banners = ''; banners += """"""psi4.print_out('\\n')\n""""""; banners += """"""p4util.banner(' Hessian Computation: Gradient Displacement %d ')\n"""""" % (n + 1); banners += """"""psi4.print_out('\\n')\n\n"""""". if freq_mode == 'continuous':. # print progress to file and screen; psi4.print_out('\n'); p4util.banner('Loading displacement %d of %d' % (n + 1, ndisp)); print("""""" %d"""""" % (n + 1), end=('\n' if (n + 1 == ndisp) else '')); sys.stdout.flush(). # Load in displacement into the active molecule (xyz coordinates only); moleculeclone.set_geometry(displacement). # Perform the gradient calculation; G, wfn = gradient(lowername, molecule=moleculeclone, return_wfn=True, **kwargs); gradients.append(wfn.gradient()); energies.append(psi4.get_variable('CURRENT ENERGY')). # clean may be necessary when changing irreps of displacements; psi4.clean(). # S/R: Write each displaced geometry to an input file; elif freq_mode == 'sow':; moleculeclone.set_geometry(displacement). # S/R: Prepare molecule, options, kwargs, function call and energy save; # forcexyz in molecule writer S/R enforcement of !reinterpret_coordentry above; with open('%s.in' % (rfile), 'wb') as freagent:; freagent.write('# This is a psi4 input file auto-g",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/driver.html:69157,continuous,continuous,69157,psi4manual/1.0.0/_modules/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/driver.html,1,['continuous'],['continuous']
Deployability,"tion¶; PSI4’s documentation is generated by Sphinx; and lives in psi4/doc/sphinxman. It is available online at; http://sirius.chem.vt.edu/psi4manual/latest/index.html; for the latest public release and at; http://sirius.chem.vt.edu/psi4manual/master/index.html; for the latest development branch (not all links may be publically; accessible). Installing Sphinx¶; Installing Sphinx is only necessary to build the documentation; yourself, locally. The docs are served from; from trac and psicode, so most users/developers won’t need Sphinx; installed. Nevertheless, installation is easy.; On Mac:; >>> easy_install sphinx. On Linux:. Download; >>> curl -O http://pypi.python.org/packages/source/S/Sphinx/Sphinx-1.1.3.tar.gz. Unpack, etc. Build and Install; >>> python setup.py build; >>> sudo python setup.py install. Check the path; >>> which sphinx-build; >>> which latex; >>> which dvipng. LaTeX and dvipng are needed to render math. If the latter is missing,; the following may work.; >>> sudo yum install dvipng. Documentation Structure¶; Sphinx has nice capabilities for extracting docstrings from python files,; presenting both auto-generated and narrative documentation in; the same format, hyperlinking within and to trac/external websites, and; generating documentation in different formats from the same source.; PSI4’s documentation is a unified document covering information for; both users and programmers, with different portions served up depending on; the target audience. To this end, one can navigate to $(OBJDIR)/doc/sphinxman; and build the following targets.:; >>> make help # to see options; >>> make # to build html. >>> make html; >>> make html-user; >>> make html-prog; >>> make latexpdf-user; >>> make latexpdf-prog. This will build the following files, respectively.; build/html/index.html; build/html-user/index.html; build/html-prog/index.html; build/latex-prog/psi4_userman.pdf; build/latex-prog/psi4_progman.pdf. Much of the documentation is auto-generated from the sour",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/documentation-1.html:1185,install,install,1185,psi4manual/4.0b4/documentation-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/documentation-1.html,4,['install'],['install']
Deployability,"tip=""Error called when the specified value of *option* requires some""];; ""PsiException"" -> ""PastureRequiredError"" [arrowsize=0.5,style=""setlinewidth(0.5)""];; ""PsiException"" [fontname=""Vera Sans, DejaVu Sans, Liberation Sans, Arial, Helvetica, sans"",fontsize=10,height=0.25,shape=box,style=""setlinewidth(0.5)"",tooltip=""Error class for Psi.""];; ""PsiImportError"" [fontname=""Vera Sans, DejaVu Sans, Liberation Sans, Arial, Helvetica, sans"",fontsize=10,height=0.25,shape=box,style=""setlinewidth(0.5)"",tooltip=""Error called for problems import python dependencies. Prints error message""];; ""PsiException"" -> ""PsiImportError"" [arrowsize=0.5,style=""setlinewidth(0.5)""];; ""QMMM"" [fontname=""Vera Sans, DejaVu Sans, Liberation Sans, Arial, Helvetica, sans"",fontsize=10,height=0.25,shape=box,style=""setlinewidth(0.5)""];; ""Table"" [fontname=""Vera Sans, DejaVu Sans, Liberation Sans, Arial, Helvetica, sans"",fontsize=10,height=0.25,shape=box,style=""setlinewidth(0.5)"",tooltip=""Class defining a flexible Table object for storing data.""];; ""TestComparisonError"" [fontname=""Vera Sans, DejaVu Sans, Liberation Sans, Arial, Helvetica, sans"",fontsize=10,height=0.25,shape=box,style=""setlinewidth(0.5)"",tooltip=""Error called when a test case fails due to a failed""];; ""PsiException"" -> ""TestComparisonError"" [arrowsize=0.5,style=""setlinewidth(0.5)""];; ""ValidationError"" [fontname=""Vera Sans, DejaVu Sans, Liberation Sans, Arial, Helvetica, sans"",fontsize=10,height=0.25,shape=box,style=""setlinewidth(0.5)"",tooltip=""Error called for problems with the input file. Prints""];; ""PsiException"" -> ""ValidationError"" [arrowsize=0.5,style=""setlinewidth(0.5)""];; }. table of contents. PSI4 API: Linking C++ and Python; psi4.core Module; Functions; Classes; Class Inheritance Diagram. psi4.driver Package; Functions; Classes; Class Inheritance Diagram. Navigation. Index. modules    .    .    .  · ; 1.1;  · . PSI4. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/psi4api-1.html:205501,update,updated,205501,psi4manual/1.1.0/psi4api-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/psi4api-1.html,2,['update'],['updated']
Deployability,"tipole Analysis by A. J. Stone — gdma(); Interface to Libint by E. Valeev; Interface to Molden — molden(); Interface to MRCC by M. Kállay; Interface to PCMSolver by R. Di Remigio; Interface to SIMINT by B. Pritchard; Spin-Network-Scaled MP2 (SNS-MP2) by D. E. Shaw; Plugin v2rdm_casscf by A. E. DePrince; Interface to Libxc by M. A. L. Marques. Psithon Functions: Invoking a Calculation; Notes on Options; Single-Point Energy — energy(); Property; Basis Set Superposition Corrections; Geometry Optimization — optimize() and gradient(); Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); Database — database(); Complete Basis Set; Spectroscopic Constants for Diatomics; Function Intercalls; Embarrassing Parallelism; Generation of Cube Files — cubeprop(); Orbital Visualization with VMD. Customization: Adding Simple Extensions; Defining a Method Alias; Creating a Database. Appendices; Keywords; Keywords by Alpha; Keywords by Module. Basis Sets; Basis Sets by Family; Basis Sets by Element; Auxiliary Basis Sets. PSI Variables; PSI Variables by Alpha; PSI Variables by Module. Miscellaneous; Test Suite and Sample Inputs; DFT Functionals; PSIOH Intermediate Files; Physical Constants; Bibliography. Programmers’ Manual¶. Contributions: Intro to Programming in PSI4; FAQ; Plugins: Adding New Functionality to PSI4; Documentation; PsiPEP: Plans and Practices to Organize PSI4; C++ Style. Programming: Using the Core Libraries; LibOptions: globals, locals, has_changed and all that; Adding Methods to Driver; Linear Algebra in PSI4; Adding Test Cases. Managing: Git, Conda, CMake and all that; Adding Add-Ons; Git, Versioning. PSI4 API: Linking C++ and Python; psi4.core Module; psi4.driver Package. Indices. Index; Module Index; Search Page. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .  · ; 1.2.1;  · . PSI4. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 July 2018 04:21AM.; Created using Sphinx 1.7.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/index.html:3998,update,updated,3998,psi4manual/1.2.1/index.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/index.html,1,['update'],['updated']
Deployability,"titute desired python version: 2.7, 3.5, 3.6. Fine; to choose your own env name. Include -c psi4/label/dev to get dependencies to; build current master, as opposed to latest release.; Activate environment, conda activate; p4dev. Go to where you’ve cloned psi4. Execute psi4-path-advisor.; It gives you a basic cmake command covering python, sphinx, link-time qc; addons, and run-time qc addons. There’s a help menu -h that gives more; info. There’s other options that will also pre-configure compilers. For; example, at GaTech psi4-path-advisor --intel works. On Macs with; XCode, psi4-path-advisor --clang works. Just read the help. For users; who want a minimal build, there’s a --disable-addons, but it is generally not; encouraged. It gives you a fully; functional cmake command, but those are just setting up CMake cache; — like the plugins you can always add your own CMake variables to; the command.; For run-time, you may also wish to install the executable add-ons (e.g., dftd3); >>> conda install numpy psi4-rt. What do the conda packages psi4 & psi4-dev and the installer psi4conda contain¶; psi4 - has full-featured psi4 itself and necessarily all the link-time qc; addons (e.g., chemps2). It has python, pytest, numpy, and a few more python; modules for specialized functions. Of gcc-ness, it has minimal, run-time; libraries (e.g., libgcc-ng) not compilers.; It doesn’t have the run-time qc addons psi4-rt (e.g., dftd3) or build tools (e.g., g++, sphinx, cmake).; psi4-dev - does not have psi4 itself or the run-time addons psi4-rt or numpy (though fine to install them; alongside). Does have all the link-time addons. Does have; cmake and sphinx (and python). Of gcc-ness, has full packages, that is,; compilers as well as runtime packages.; Psi4conda installer - has full-featured psi4 itself, all link-time qc addons, all; run-time qc addons, and minimal gcc runtime libraries. Developers should additionally install psi4-dev for build tools.; The How to install a Psi4 binary with t",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/conda-1.html:9821,install,install,9821,psi4manual/1.2.1/conda-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/conda-1.html,2,['install'],['install']
Deployability,"titute desired python version: 3.5, 3.6, 3.7. Fine; to choose your own env name. Include -c psi4/label/dev to get dependencies to; build current master, as opposed to latest release.; Activate environment, conda activate; p4dev. Go to where you’ve cloned psi4. Execute psi4-path-advisor.; It gives you a basic cmake command covering python, sphinx, link-time qc; addons, and run-time qc addons. There’s a help menu -h that gives more; info. There’s other options that will also pre-configure compilers. For; example, at GaTech psi4-path-advisor --intel works. On Macs with; XCode, psi4-path-advisor --clang works. Just read the help. For users; who want a minimal build, there’s a --disable-addons, but it is generally not; encouraged. It gives you a fully; functional cmake command, but those are just setting up CMake cache; — like the plugins you can always add your own CMake variables to; the command.; For run-time, you may also wish to install the executable add-ons (e.g., dftd3); >>> conda install numpy psi4-rt. What do the conda packages psi4 & psi4-dev and the installer psi4conda contain¶; psi4 - has full-featured psi4 itself and necessarily all the link-time qc; addons (e.g., chemps2). It has python, pytest, numpy, and a few more python; modules for specialized functions. Of gcc-ness, it has minimal, run-time; libraries (e.g., libgcc-ng) not compilers.; It doesn’t have the run-time qc addons psi4-rt (e.g., dftd3) or build tools (e.g., g++, sphinx, cmake).; psi4-dev - does not have psi4 itself or the run-time addons psi4-rt or numpy (though fine to install them; alongside). Does have all the link-time addons. Does have; cmake and sphinx (and python). Of gcc-ness, has full packages, that is,; compilers as well as runtime packages.; Psi4conda installer - has full-featured psi4 itself, all link-time qc addons, all; run-time qc addons, and minimal gcc runtime libraries. Developers should additionally install psi4-dev for build tools.; The How to install a Psi4 binary with t",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/conda-1.html:9821,install,install,9821,psi4manual/1.3.2/conda-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/conda-1.html,2,['install'],['install']
Deployability,"tive one; molecule = kwargs.pop('molecule', core.get_active_molecule()); molecule.update_geometry(). # Sanitize total_method_name; label = total_method_name; total_method_name = total_method_name.lower(); total_method_name = total_method_name.replace(' ', ''). # Split into components; method_list, basis_list = _parse_cbs_gufunc_string(total_method_name). # Single energy call?; single_call = len(method_list) == 1; single_call &= '[' not in basis_list[0]; single_call &= ']' not in basis_list[0]. if single_call:; method_name = method_list[0]; basis = basis_list[0]. # Save some global variables so we can reset them later; optstash = p4util.OptionsState(['BASIS']); core.set_global_option('BASIS', basis). ptype_value, wfn = func(method_name, return_wfn=True, molecule=molecule, **kwargs); core.clean(). optstash.restore(). if return_wfn:; return (ptype_value, wfn); else:; return ptype_value. # If we are not a single call, let CBS wrapper handle it!; cbs_kwargs = {}; cbs_kwargs['ptype'] = ptype; cbs_kwargs['return_wfn'] = True; cbs_kwargs['molecule'] = molecule; cbs_kwargs['verbose'] = cbs_verbose. # Find method and basis; if method_list[0] in ['scf', 'hf']:; cbs_kwargs['scf_wfn'] = method_list[0]; cbs_kwargs['scf_basis'] = basis_list[0]; if 'scf_scheme' in kwargs:; cbs_kwargs['scf_scheme'] = kwargs['scf_scheme']; else:; cbs_kwargs['corl_wfn'] = method_list[0]; cbs_kwargs['corl_basis'] = basis_list[0]; if 'corl_scheme' in kwargs:; cbs_kwargs['corl_scheme'] = kwargs['corl_scheme']. if len(method_list) > 1:; cbs_kwargs['delta_wfn'] = method_list[1]; cbs_kwargs['delta_basis'] = basis_list[1]; if 'delta_scheme' in kwargs:; cbs_kwargs['delta_scheme'] = kwargs['delta_scheme']. ptype_value, wfn = cbs(func, label, **cbs_kwargs). if return_wfn:; return (ptype_value, wfn); else:; return ptype_value. Navigation. Index. modules    .    .  · ; 1.1;  · . PSI4. Module code. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/driver_cbs.html:59980,update,updated,59980,psi4manual/1.1.0/_modules/psi4/driver/driver_cbs.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/driver_cbs.html,1,['update'],['updated']
Deployability,"tive space localization process from a random unitary or the unit matrix. Type: boolean; Default: true. DMRG_MOLDEN_WRITE (DMRG)¶DMRG — DMRG-CI or converged DMRG-SCF orbitals in molden format. Type: boolean; Default: false. DMRG_MPS_WRITE (DMRG)¶DMRG — Whether or not to create intermediary MPS checkpoints. Type: boolean; Default: false. DMRG_MULTIPLICITY (DMRG)¶DMRG — The DMRG wavefunction multiplicity in the form (2S+1). Type: integer; Default: -1. DMRG_OPDM_AO_PRINT (DMRG)¶DMRG — Print out the density matrix in the AO basis. Type: boolean; Default: false. DMRG_PRINT_CORR (DMRG)¶DMRG — Whether or not to print the correlation functions after the DMRG calculation. Type: boolean; Default: false. DMRG_SCF_ACTIVE_SPACE (DMRG)¶DMRG — Which active space to use for DMRG calculations: –> input with SCF rotations (INPUT); –> natural orbitals (NO); –> localized and ordered orbitals (LOC). Type: string; Possible Values: INPUT, NO, LOC; Default: INPUT. DMRG_SCF_DIIS_THR (DMRG)¶DMRG — When the update norm is smaller than this value DIIS starts. Type: double; Default: 1e-2. DMRG_SCF_GRAD_THR (DMRG)¶DMRG — The density RMS convergence to stop an instruction during successive DMRG instructions. Type: double; Default: 1.e-6. DMRG_SCF_MAX_ITER (DMRG)¶DMRG — Maximum number of DMRG iterations. Type: integer; Default: 100. DMRG_SCF_STATE_AVG (DMRG)¶DMRG — Whether or not to use state-averaging for roots >=2 with DMRG-SCF. Type: boolean; Default: true. DMRG_SWEEP_DVDSON_RTOL (DMRG)¶DMRG — The residual tolerances for the Davidson diagonalization during DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_ENERGY_CONV (DMRG)¶DMRG — The energy convergence to stop an instruction during successive DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_MAX_SWEEPS (DMRG)¶DMRG — The maximum number of sweeps to stop an instruction during successive DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_NOISE_PREFAC (DMRG)¶DMRG — The noise prefactors for successive DMRG in",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:112444,update,update,112444,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html,2,['update'],['update']
Deployability,"tm2 in skel[cat]:; if itm2.endswith(der):; lmax = max(amstr.index(itm2[-4].upper()), lmax); der_max_store.append(None if lmax == -1 else lmax); skel[cat] = der_max_store. # rename keys from components; skel[""onebody""] = skel.pop(""onebody_""); skel[""eri""] = skel.pop(""eri_c4_""); skel[""eri3""] = skel.pop(""eri_c3_""); skel[""eri2""] = skel.pop(""eri_c2_""); return skel. def _l2_config_style_eri_c4():; skel = {""onebody_"": [], ""eri_c4_"": [], ""eri_c3_"": [], ""eri_c2_"": []}. for itm in core._libint2_configuration().split("";""):; for cat in list(skel.keys()):; if itm.startswith(cat):; skel[cat].append(itm[len(cat):]). for cat in list(skel.keys()):; der_max_store = []; for der in [""d0_l"", ""d1_l"", ""d2_l""]:; lmax = -1; for itm2 in skel[cat]:; if itm2.startswith(der):; lmax = max(int(itm2[len(der):]), lmax); der_max_store.append(None if lmax == -1 else lmax); skel[cat] = der_max_store. # rename keys from components; skel[""onebody""] = skel.pop(""onebody_""); skel[""eri""] = skel.pop(""eri_c4_""); skel[""eri3""] = skel.pop(""eri_c3_""); skel[""eri2""] = skel.pop(""eri_c2_""); return skel. [docs]; def libint2_print_out() -> None:; ams = libint2_configuration(); core.print_out("" => Libint2 <=\n\n"");; # when L2 is pure cmake core.print_out(core.libint2_citation());. core.print_out(f"" Primary basis highest AM E, G, H: {', '.join(('-' if d is None else str(d)) for d in ams['eri'])}\n""); core.print_out(f"" Auxiliary basis highest AM E, G, H: {', '.join(('-' if d is None else str(d)) for d in ams['eri3'])}\n""); core.print_out(f"" Onebody basis highest AM E, G, H: {', '.join(('-' if d is None else str(d)) for d in ams['onebody'])}\n""); # excluding sph_emultipole; core.print_out(f"" Solid Harmonics ordering: {core.libint2_solid_harmonics_ordering()}\n""). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .  · ; 1.10a1.dev61;  · . PSI4. Module code; psi4.driver.p4util.util. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/_modules/psi4/driver/p4util/util.html:12096,update,updated,12096,psi4manual/master/_modules/psi4/driver/p4util/util.html,https://psicode.org,https://psicode.org/psi4manual/master/_modules/psi4/driver/p4util/util.html,1,['update'],['updated']
Deployability,"tmatter from all PRs from this milestone, particularly the; “User API & Changelog headlines” section.; Save the draft release until tag is finalized.; “publish” release. This establishes the release date for the GitHub API.; Close the RN issue.; Close the milestone (should be 100% complete).; Open a milestone for the release that’s a year out. Publish GitHub postrelease¶. With an anticipated or newly minted tag, go to https://github.com/psi4/psi4/releases/new (or; “Draft a new release” button on GitHub site).; Release title takes the form: v1.8.2, 2023-10-03; Fill in frontmatter style and links from previous GitHub release.; Fill in RN bullets for changes cherry-picked or edited to the maintenance branch.; Save the draft release until tag is finalized.; “publish” release. This establishes the release date for the GitHub API. Publish psicode.org release¶. Be in local clone of repository https://github.com/psi4/psicode-hugo-website .; Execute https://api.github.com/repos/psi4/psi4/releases/latest or; https://api.github.com/repos/psi4/psi4/releases/tags/v1.8.2 (substituting tag) and note the id; field value.; Copy and edit a new file akin to content/posts/v182.md. Add it to the git index. e.g., v1.8.2 is used for Title and Release Notes.; e.g., 1.8.x is used for Documentation and Source.; e.g., v182 (edition string) is used for Image and Installers.; Use the id value in the shortcode call at the bottom near ghRN. Add a new release page to the psi4_release_fireworks.key Keynote presentation. Run the slide; transition and screenshot the fireworks. Open the PNG file in Preview and save as JPEG while; downsampling to ~400kB. Place the file at e.g., static/images/portfolio/fireworks_slide_v182.jpg.; Add it to the git index.; Edit data/portfolio.yml to add a new block for the release (order matters).; Include these changes in a PR. Check the generated preview if needed. Merge the PR yourself or ask; for it to be merged. Finalize release¶. Make new PR with; * edits to main RE",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/manage_release.html:23200,release,releases,23200,psi4manual/1.9.x/manage_release.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/manage_release.html,2,['release'],['releases']
Deployability,"to Clone-from-GitHub; I don’t want to deal with this newfangled git, just give me a; tarball of the source code — Goto Tarball-from-GitHub. I want to run and develop in PSI4. In keeping with the open-source philosophy, I don’t mind my code being; as public as Psi4 itself during the development process. —; Goto Fork-from-GitHub; I want to develop using PSI4 infrastructure and libraries, not; on them; I think a plugin might do. I’ve got a PSI4 compilation. Use it, then consult plugins; I’d rather not compile PSI4 or I don’t have compilers —; Goto Binary-Package then consult; plugins through conda. I really like parentheses and/or DBOC, so I want Psi3. —; Psi3 is available from sourceforge, but you’re on your own. Binary Installer¶. Get Initially; Just go to http://www.psicode.org/downloads.html, select “Installer”,; “Stable Release”, and your choice of architecture and Python version,; and follow the instructions there. Build; Not applicable as binary is pre-built. Get Updates directions; >>> conda update psi4. Contribute Back; Not applicable as not under git control. Conda Binary Package¶. Get Initially; The pre-compiled conda packages at https://anaconda.org/conda-forge/psi4; can be installed into an existing Anaconda or Miniconda distribution; according to directions. Locally, install into; a conda environment as below.; >>> conda create -n p4env psi4 -c conda-forge/label/libint_dev -c conda-forge; >>> conda activate p4env. >>> # nightly build (Linux and Windows only); >>> conda create -n p4env psi4/label/dev::psi4 -c conda-forge/label/libint_dev -c conda-forge; >>> # release; >>> conda create -n p4env psi4 -c conda-forge/label/libint_dev -c conda-forge. Build; Not applicable as binary is pre-built. Get Updates directions; >>> conda update psi4 -c conda-forge. Contribute Back; Not applicable as not under git control. Clone from GitHub Repository¶. Get Initially; The PSI4 repository at https://github.com/psi4/psi4 works like; every other GitHub repo.; Locally, clone ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/build_obtaining.html:2984,update,update,2984,psi4manual/1.8.x/build_obtaining.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/build_obtaining.html,3,['update'],['update']
Deployability,"to Clone-from-GitHub; I don’t want to deal with this newfangled git, just give me a; tarball of the source code — Goto Tarball-from-GitHub. I want to run and develop in PSI4. In keeping with the open-source philosophy, I don’t mind my code being; as public as Psi4 itself during the development process. —; Goto Fork-from-GitHub; I want to develop using PSI4 infrastructure and libraries, not; on them; I think a plugin might do. I’ve got a PSI4 compilation. Use it, then consult plugins; I’d rather not compile PSI4 or I don’t have compilers —; Goto Binary-Package then consult; plugins through conda. I really like parentheses and/or DBOC, so I want Psi3. —; Psi3 is available from sourceforge, but you’re on your own. Binary Installer¶. Get Initially; Just go to http://www.psicode.org/downloads.html, select “Installer”,; “Stable Release”, and your choice of architecture and Python version,; and follow the instructions there. Build; Not applicable as binary is pre-built. Get Updates directions; >>> conda update psi4. Contribute Back; Not applicable as not under git control. Conda Binary Package¶. Get Initially; The pre-compiled conda packages at https://anaconda.org/psi4/psi4; can be installed into an existing Anaconda or Miniconda distribution; according to directions. Locally, install into; a conda environment as below.; >>> conda create -n p4env psi4 -c psi4; >>> conda activate p4env. >>> # nightly build; >>> conda create -n p4env psi4 -c psi4/label/dev; >>> # Windows; >>> conda create -n p4env psi4 -c psi4 -c conda-forge. Build; Not applicable as binary is pre-built. Get Updates directions; >>> conda update psi4 -c psi4. Contribute Back; Not applicable as not under git control. Clone from GitHub Repository¶. Get Initially; The PSI4 repository at https://github.com/psi4/psi4 works like; every other GitHub repo.; Locally, clone as below.; # use https or ssh; >>> git clone https://github.com/psi4/psi4.git; >>> cd psi4; # this is your {top-level-psi4-dir}. Build directions; ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/build_obtaining-1.html:2662,update,update,2662,psi4manual/1.4.0/build_obtaining-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/build_obtaining-1.html,6,['update'],['update']
Deployability,"to a conda; environment where its libraries can’t interfere with other programs; rather than the main; Anaconda or Miniconda environment. Hence the creation of the environment; above, but the environment name (p4env above) can be; substituted.; Only reason for psi4-rt package is to get the QC runtime; add-ons; could say any combination of dftd3 gcp v2rdm_casscf snsmp2 instead of psi4-rt;; or leave them out if you don’t want them.; Grab a Miniconda through curl -o Miniconda-latest.sh; ""https://repo.continuum.io/miniconda/Miniconda3-latest-[MacOSX|Linux]-x86_64.sh"",; selecting between Mac and Linux. How to update a Psi4 binary¶; A. Conda command to update an existing PSI4 conda installation to the; newest stable release (roughly annually).; >>> conda update psi4 -c psi4. # if psi4 channel in defaults (true for Psi4conda installers); >>> conda update psi4. B. Conda command to update an existing PSI4 conda installation to the; latest development head (roughly nightly).; >>> conda update psi4 -c psi4/label/dev. C. Conda command to install a very specific package, including version,; build string, and subchannel. The final -c psi4 represents any; additional channels or subchannels needed to locate all dependencies.; >>> conda install psi4=1.2a1.dev249+623ad64=py36_sse41_0 -c psi4/label/subchannel -c psi4. How to use conda to compile Psi4 faster and easier¶; # Linux # c. v1.2rc1 ###or Mac or Windows; # substitute x.x by 2.7|3.5|3.6 for alternate python versions; >>> conda create -n p4dev python=x.x psi4-dev -c psi4/label/dev -c psi4; >>> conda activate p4dev. >>> cd {top-level-psi4-dir}; >>> psi4-path-advisor --help; usage: psi4-path-advisor [-h] [--psi4-compile] [--disable-addons]; [--disable-mkl] [--intel | --intel-multiarch | --gcc]. Build and Run path advisor for Psi4. optional arguments:; -h, --help show this help message and exit; --psi4-compile (Command Default) Generates a minimal CMake command for building Psi4 against; this psi4-dev conda metapackage.; >>> git cl",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/conda-1.html:6509,update,update,6509,psi4manual/1.2.1/conda-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/conda-1.html,2,['update'],['update']
Deployability,"to a conda; environment where its libraries can’t interfere with other programs; rather than the main; Anaconda or Miniconda environment. Hence the creation of the environment; above, but the environment name (p4env above) can be; substituted.; Only reason for psi4-rt package is to get the QC runtime; add-ons; could say any combination of dftd3 gcp v2rdm_casscf snsmp2 instead of psi4-rt;; or leave them out if you don’t want them.; Grab a Miniconda through curl -o Miniconda-latest.sh; ""https://repo.continuum.io/miniconda/Miniconda3-latest-[MacOSX|Linux]-x86_64.sh"",; selecting between Mac and Linux. How to update a Psi4 binary¶; A. Conda command to update an existing PSI4 conda installation to the; newest stable release (roughly annually).; >>> conda update psi4 -c psi4. # if psi4 channel in defaults (true for Psi4conda installers); >>> conda update psi4. B. Conda command to update an existing PSI4 conda installation to the; latest development head (roughly nightly).; >>> conda update psi4 -c psi4/label/dev. C. Conda command to install a very specific package, including version,; build string, and subchannel. The final -c psi4 represents any; additional channels or subchannels needed to locate all dependencies.; >>> conda install psi4=1.2a1.dev249+623ad64=py36_sse41_0 -c psi4/label/subchannel -c psi4. How to use conda to compile Psi4 faster and easier¶; # Linux # c. v1.2rc1 ###or Mac or Windows; # substitute x.x by 3.5|3.6|3.7 for alternate python versions; >>> conda create -n p4dev python=x.x psi4-dev -c psi4/label/dev -c psi4; >>> conda activate p4dev. >>> cd {top-level-psi4-dir}; >>> psi4-path-advisor --help; usage: psi4-path-advisor [-h] [--psi4-compile] [--disable-addons]; [--disable-mkl] [--intel | --intel-multiarch | --gcc]. Build and Run path advisor for Psi4. optional arguments:; -h, --help show this help message and exit; --psi4-compile (Command Default) Generates a minimal CMake command for building Psi4 against; this psi4-dev conda metapackage.; >>> git cl",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/conda-1.html:6509,update,update,6509,psi4manual/1.3.2/conda-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/conda-1.html,2,['update'],['update']
Deployability,"to a larger Libint, enter <objdir>,; remove the result of make install (if ever invoked), remove; external/upstream/libint/. If earlier Libint was built; internally (as opposed to detecting an external installation),; remove stage/include/libint/, stage/share/cmake/Libint/,; stage/lib/libint.so, stage/lib/libderiv.so. Edit MAX_AM_ERI; value in CMakeCache.txt. Reinvoke make and check the number; beside Found Libint in the CMake output.; Note that the same keyword MAX_AM_ERI controls Libint and simint. simint; can’t compile above AM7, so you’ll have to turn off simint to get an; internal compile of AM>=8 Libint. The keyword is only a lower bound for; detection, so you can set it at 7, have both Libint and simint enabled,; and point CMake toward a pre-built Libint AM8 just fine. How to configure Libint for building Psi4. How to get high angular momentum integrals from conda¶; Since February 2019, the PSI4 conda package on Linux has been the; large AM8. Likewise, this is the package you get upon; 1conda install libint -c psi4. There is no need for the extra am8 argument previously documented here.; On Mac, the Libint conda package itself and the Libint compiled into; the PSI4 conda package remain AM6.; Beware this issue: https://github.com/psi4/psi4/issues/1533. How to see what build configuration options are available¶; CMake doesn’t provide a summary for this (unless you want to try the CMake; GUI, which the developers have never looked at). However, the top half of; the main CMakeLists.txt is a passable summary:. ################ Options: Overview and Not Otherwise Mentioned ###############. # <<< CMake build overview >>>; #; # >>> ls; # external/ COPYING psi4/ tests/ ...; # >>> cmake -H. -Bobjdir -DCMAKE_INSTALL_PREFIX=/path/to/install-psi4 ...; # ...; # -- Generating done; # -- Build files have been written to: /current/dir/objdir; # >>> cd objdir && make -j`getconf _NPROCESSORS_ONLN`; # >>> make install. # <<< Required build dependencies that Psi4 can't build itsel",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/build_planning-1.html:9234,install,install,9234,psi4manual/1.3.2/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/build_planning-1.html,2,['install'],['install']
Deployability,"to add basis *fit* as associated fitting basis; member *jdef* to a BasisFamily object. """"""; self.jdef = sanitize_basisname(fit). [docs] def add_jkfit_default(self, fit):; """"""Function to add basis *fit* as associated fitting basis; member *jkdef* to a BasisFamily object. """"""; self.jkdef = sanitize_basisname(fit). [docs] def add_rifit_default(self, fit):; """"""Function to add basis *fit* as associated fitting basis; member *ridef* to a BasisFamily object. """"""; self.ridef = sanitize_basisname(fit). [docs]def sanitize_basisname(name):; """"""Function to return *name* in coded form, stripped of; characters that confuse filenames, characters into lowercase,; ``+`` into ``p``, ``*`` into ``s``, and ``(``, ``)``, & ``,``; into ``_``. """"""; temp = name.lower(); temp = temp.replace('+', 'p'); temp = temp.replace('*', 's'); temp = temp.replace('(', '_'); temp = temp.replace(')', '_'); temp = temp.replace(',', '_'); return temp. [docs]def load_basis_families():; """"""Function to load into the array ``basisfamily_list``; BasisFamily objects for all Psi4's standard installed bases. """"""; from .basislistdunning import load_basfam_dunning; from .basislistother import load_basfam_other. if len(basisfamily_list) == 0:; load_basfam_dunning(); load_basfam_other(); return basisfamily_list. [docs]def print_basis_families():; """"""Function to print to the output file a formatted summary; of all the BasisFamily objects in ``basisfamily_list``, by; default all Psi4's standard installed bases. """"""; basisfamily_list = load_basis_families(). text = ''; for fam in basisfamily_list:; text += '%s' % (fam); return text. [docs]def corresponding_basis(name, role='BASIS'):; """"""Function to validate if the orbital basis *name* in coded or; ornate form is in Psi4's standard installed bases list. ``None``; is returned if the orbital basis is not found. """"""; role = role.upper(); basisfamily_list = load_basis_families(). for fam in basisfamily_list:; if sanitize_basisname(fam.ornate) == sanitize_basisname(name):; if ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/basislist.html:4974,install,installed,4974,psi4manual/1.0.0/_modules/qcdb/basislist.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/basislist.html,1,['install'],['installed']
Deployability,"to configure gdma for building Psi4; How to configure Libint for building Psi4; How to configure PCMSolver for building Psi4. Testing¶. How to see CTest testing errors; How to run a subset of tests; How to run a minute’s worth of tests; How to test a Psi4 installation. Runtime Setup¶. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; How to set up the scratch directory; Why not to set PSIDATADIR; How to configure paths for PsiAPI; How to solve ModuleNotFoundError: No module named 'psi4'. Running PSI4¶. What command line options does Psi4 have; What environment variables affect Psi4; What Python is Psi4 running; What Psi4 version is running; How to use Psi4 within a PBS queue; How do I retain specific Psi4 scratch files; How to use logging in Psi4; How to find the Psi4 module from the executable and vice versa. Runtime Errors and Debugging¶. How to use gdb and lldb with Psi4; How to compile for debugging; How to fix “undefined symbol: _Py_FalseStruct”. Managing Code¶. What is the directory layout of the installed or staged Psi4; What is the suggested GitHub workflow; How to highlight git merge conflicts in vi. Miscellaneous¶. How to refer to Psi4; How to get a Psi4 logo file. table of contents. Build & Run FAQ; Obtaining and Updating PSI4; Configuring and Installing PSI4 via Binary; Configuring, Building, and Installing PSI4 via Source; Non-QC Dependencies; QC Dependencies and Extensions; Testing; Runtime Setup; Running PSI4; Runtime Errors and Debugging; Managing Code; Miscellaneous. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Installation and Runtime Configuration; Build & Run FAQ. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/build_faq.html:4129,install,installed,4129,psi4manual/master/build_faq.html,https://psicode.org,https://psicode.org/psi4manual/master/build_faq.html,2,"['install', 'update']","['installed', 'updated']"
Deployability,"to gCP by S. Grimme. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to gCP by S. Grimme. Interface to gCP by S. Grimme¶; Code author: Lori A. Burns; Section author: Lori A. Burns; Module: Samples. Installation¶; Binary. There are two implementations of gCP; see Empirical dispersion correction packages . The newer; “mctc” one is preferred, while the older “classic” one will work for the immediate future.; PSI4 will automatically select whichever is available.; gCP is available as a conda package for Linux and macOS and Windows.; If using the Psi4conda installer, gCP has already been installed alongside.; If using the PSI4 conda package, the classic gcp conda package can; be obtained through conda install gcp -c psi4 or the newer implementation; through conda install gcp-correction -c conda-forge.; If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; the gcp executable can be obtained through conda install gcp -c psi4; or conda install gcp-correction -c conda-forge.; To remove a conda installation, conda remove gcp or conda remove gcp-correction. Source. If using PSI4 built from source and you want to build gCP from; from source also, follow the instructions provided with the source; (essentially, download the freely available tarball, unpack the source,; edit the Makefile to select a Fortran compiler, and run make). To be used by PSI4, the program binary (gcp or mctc-gcp) must be; found in your PATH so that QCEngine can detect it. Check if and where; found through qcengine info. If; PSI4 is unable to execute the binary, an error will be reported.; To preferentially use a particular gcp compilation, simply adjust its; position in the path environment variables. Running gCP¶; At present there is a limited interface to gCP that is used; only to implement the “HF-3c” [Sure:2013:1672] and “PBEh-3c”; [Grimme:2015:054107] methods (b",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/gcp.html:970,install,installed,970,psi4manual/1.7.x/gcp.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/gcp.html,3,['install'],"['install', 'installed']"
Deployability,"to have been updated along with the classes. """"""; raise FeatureNotImplemented('BasisSet::test_basis_set'). [docs] def get_ao_sorted_shell(self, i):; """"""Returns the value of the sorted shell list. Defunct""""""; raise FeatureNotImplemented('BasisSet::get_ao_sorted_shell'). [docs] def get_ao_sorted_list(self):; """"""Returns the vector of sorted shell list. Defunct""""""; raise FeatureNotImplemented('BasisSet::get_ao_sorted_list'). [docs] def compute_phi(self, phi_ao, x, y, z):; """"""Returns the values of the basis functions at a point"""""". phi_ao = [0.0] * self.nao(); ao = 0; for ns in range(self.nshell()):; shell = self.shells[ns]; am = shell.am(); nprim = shell.nprimitive(); a = shell.exps(); c = shell.coefs(). xyz = shell.center(); dx = x - xyz[0]; dy = y - xyz[1]; dz = z - xyz[2]; rr = dx * dx + dy * dy + dz * dz. cexpr = 0; for np in range(nprim):; cexpr += c[np] * math.exp(-a[np] * rr). for l in range(INT_NCART(am)):; components = exp_ao[am][l]; phi_ao[ao + l] += pow(dx, components[0]) * \; pow(dy, components[1]) * \; pow(dz, components[2]) * \; cexpr. ao += INT_NCART(am). [docs] def concatenate(self, b):; """"""Concatenates two basis sets together into a new basis without; reordering anything. Unless you know what you're doing, you should; use the '+' operator instead of this method. Appears defunct. """"""; raise FeatureNotImplemented('BasisSet::concatenate'). [docs] def add(self, b):; """"""Adds this plus another basis set and returns the result.; Equivalent to the '+' operator. Appears defunct. """"""; raise FeatureNotImplemented('BasisSet::add'). @staticmethod; [docs] def shell_sorter_ncenter(d1, d2):; return d1.ncenter() < d2.ncenter(). @staticmethod; [docs] def shell_sorter_am(d1, d2):; return d1.am() < d2.am(). Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    ; Psi4 [1.0.0 6a9a71b] » ; Module code ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/libmintsbasisset.html:43017,update,updated,43017,psi4manual/1.0.0/_modules/qcdb/libmintsbasisset.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/libmintsbasisset.html,1,['update'],['updated']
Deployability,"to make a new folder, e.g. sphinxman/1.8.x.; For postreleases, you’ll overwrite the contents of the existing folder.; Unpack and rearrange so that in the end, e.g., sphinxman/1.8.x/index.html is present. Commit all your docs files and push to master.; For releases, add a line to the top-level table https://github.com/psi4/psi4docs/edit/master/README.md .; For releases, add a new redirects block to https://github.com/psi4/psicode-hugo-website/edit/master/netlify.toml .; Details:. If you sequentially push the tag commit, push the tag, push the record commit, GHA will build the docs at v1.{Y+1}.dev1, not at v1.Y .; If you sequentially push the tag commit, then push the tag, GHA will build the docs at the tag commit, but the version will show up as “undefined”.; If you atomic push the tag commit and tag together and wait, GHA will build the docs at v1.Y, as desired. Publish GitHub release¶. With an anticipated or newly minted tag, go to https://github.com/psi4/psi4/releases/new (or; “Draft a new release” button on GitHub site).; Release title takes the form: v1.8, 2023-05-11; Fill in frontmatter style and links from previous GitHub release; Fill in RN from hopefully existing RN issue.; Fill in RN by going through the frontmatter from all PRs from this milestone, particularly the; “User API & Changelog headlines” section.; Save the draft release until tag is finalized.; “publish” release. This establishes the release date for the GitHub API.; Close the RN issue.; Close the milestone (should be 100% complete).; Open a milestone for the release that’s a year out. Publish GitHub postrelease¶. With an anticipated or newly minted tag, go to https://github.com/psi4/psi4/releases/new (or; “Draft a new release” button on GitHub site).; Release title takes the form: v1.8.2, 2023-10-03; Fill in frontmatter style and links from previous GitHub release.; Fill in RN bullets for changes cherry-picked or edited to the maintenance branch.; Save the draft release until tag is finalized.; ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/manage_release.html:21945,release,releases,21945,psi4manual/1.9.x/manage_release.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/manage_release.html,4,['release'],"['release', 'releases']"
Deployability,"to output file in a banner of; minimum width *width* and minimum three-line height for; *type* = 1 or one-line height for *type* = 2. If *strNotOutfile*; is True, function returns string rather than printing it; to output file. """"""; lines = text.split('\n'); max_length = 0; for line in lines:; if (len(line) > max_length):; max_length = len(line). max_length = max([width, max_length]). null = ''; if type == 1:; banner = ' //' + null.center(max_length, '>') + '//\n'; for line in lines:; banner += ' //' + line.center(max_length) + '//\n'; banner += ' //' + null.center(max_length, '<') + '//\n'. if type == 2:; banner = ''; for line in lines:; banner += (' ' + line + ' ').center(max_length, '='). if strNotOutfile:; return banner; else:; core.print_out(banner). [docs]def print_stdout(stuff):; """"""Function to print *stuff* to standard output stream.""""""; print(stuff, file=sys.stdout). [docs]def print_stderr(stuff):; """"""Function to print *stuff* to standard error stream.""""""; print(stuff, file=sys.stderr). [docs]def levenshtein(seq1, seq2):; """"""Function to compute the Levenshtein distance between two strings.""""""; oneago = None; thisrow = list(range(1, len(seq2) + 1)) + [0]; for x in range(len(seq1)):; twoago, oneago, thisrow = oneago, thisrow, [0] * len(seq2) + [x + 1]; for y in range(len(seq2)):; delcost = oneago[y] + 1; addcost = thisrow[y - 1] + 1; subcost = oneago[y - 1] + (seq1[x] != seq2[y]); thisrow[y] = min(delcost, addcost, subcost); return thisrow[len(seq2) - 1]. [docs]def find_approximate_string_matches(seq1,options,max_distance):; """"""Function to compute approximate string matches from a list of options.""""""; matches = []; for seq2 in options:; distance = levenshtein(seq1,seq2); if distance <= max_distance:; matches.append(seq2); return matches. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .  · ; 1.2.1;  · . PSI4. Module code. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 July 2018 04:21AM.; Created using Sphinx 1.7.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/_modules/psi4/driver/p4util/text.html:6348,update,updated,6348,psi4manual/1.2.1/_modules/psi4/driver/p4util/text.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/_modules/psi4/driver/p4util/text.html,1,['update'],['updated']
Deployability,"to psi4/psi4/share/psi4/basis.; Request the new basis set in an input file in the usual manner.; 1set basis new_basis_name. (2) Use new basis set file in arbitrary location.; Prepare a basis set file exactly as above. Append the directory; containing the basis set file to the environment variable; PSIPATH.; Request the new basis set in an input file in the usual manner.; 1set basis new_basis_name. (3) Include new basis set in input file.; Construct for a basis set a section like the one below that includes; [basis name], PUREAM value, and element basis set; specifications. Hash signs denote comments. This format is exactly like; the stand-alone basis file except for the addition of the basis name in; brackets.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19[ sto-3g ]; cartesian; ****; H 0; S 3 1.00; 3.42525091 0.15432897; 0.62391373 0.53532814; 0.16885540 0.44463454; ****; O 0; S 3 1.00; 130.7093200 0.15432897; 23.8088610 0.53532814; 6.4436083 0.44463454; SP 3 1.00; 5.0331513 -0.09996723 0.15591627; 1.1695961 0.39951283 0.60768372; 0.3803890 0.70011547 0.39195739; ****. Copy the section into a PSI4 input file and surround it with the; command basis {...}, as shown below. Multiple basis sets can be; specified by adding additional sections within the surrounding brackets.; Use assign statements to actually request the basis set. (See; mints2 for an example.); 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14basis {. # assign basset to all atoms and addl to hydrogens; assign basset; assign H addl. # basis set section like in snippet above goes here; [basset]; ... # additional basis set sections follow; [addl]; ...; }. table of contents. Basis Sets; Built-In Basis Sets; Mixing Basis Sets; Decontracted Basis Sets; User-Defined Basis Sets. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Psithon: Structuring an Input File. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/basissets-1.html:9957,update,updated,9957,psi4manual/1.1.0/basissets-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/basissets-1.html,2,['update'],['updated']
Deployability,"to run high-order perturbation theory computations is to; call, e.g., energy('mp10') to invoke a MP10 computation or; energy('zapt25') to invoke a ZAPT25 computation. This will; automatically set several additional user options to their appropriate; values. The program uses the Wigner (2n+1) rule to obtain higher-order; energies from lower-order wavefunctions.; For the interested reader, the additional user options that are; automatically set up by the calls above are as follows. A call like; energy('mp10') sets MPN to TRUE.; The program uses the Wigner (2n+1) rule by default; (MPN_WIGNER = TRUE); and figures out what order of wavefunction is; necessary to reach the desired order in the energy. The program then; sets MAX_NUM_VECS to the required order in the; wavefunction.; By default, the requested n-th order energy is saved as the current; energy to the process environment. ZAPTN works essentially the same; way for an ROHF reference. Arbitrary Order Coupled-Cluster Theory¶; This DETCI-based version of this feature is not yet released. However,; the current version of the code does include an interface to; Kallay’s MRCC code.; The DETCI module is also capable of computing arbitrary-order; coupled-cluster energies, using an approach similar to that of Hirata; and Bartlett [Hirata:2000:216], or of Olsen [Olsen:2000:7140].; Notably, the approach in DETCI also allows arbitrary-order; active space coupled-cluster procedures. The general algorithm; for doing this in DETCI is inefficient compared to optimized; lower-order coupled-cluster codes and should not be used for CCSD,; where the CCENERGY module is much more efficient. For higher-order; CC (like CCSDT and beyond), the code is also not as efficient as the; MRCC code by Kállay, to which PSI4 can interface (see Section; Interface to MRCC by M. Kállay); however, it may allow certain truncations of the model; space that might not be available presently in MRCC. For very small; systems, the code can be useful for testing ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/detci-1.html:11631,release,released,11631,psi4manual/1.2.1/detci-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/detci-1.html,23,['release'],['released']
Deployability,"to run high-order perturbation theory computations is to; call, e.g., energy('mp10') to invoke a MP10 computation or; energy('zapt25') to invoke a ZAPT25 computation. This will; automatically set several additional user options to their appropriate; values. The program uses the Wigner (2n+1) rule to obtain higher-order; energies from lower-order wavefunctions.; For the interested reader, the additional user options that are; automatically set up by the calls above are as follows. A call like; energy('mp10') sets MPN to TRUE.; The program uses the Wigner (2n+1) rule by default; (MPN_WIGNER = TRUE); and figures out what order of wavefunction is; necessary to reach the desired order in the energy. The program then; sets MAX_NUM_VECS to the required order in the; wavefunction.; By default, the requested n-th order energy is saved as the current; energy to the process environment. ZAPTN works essentially the same; way for an ROHF reference. Arbitrary Order Coupled-Cluster Theory¶; This DETCI-based version of this feature is not yet released. However,; the current version of the code does include an interface to; Kallay’s MRCC code.; The DETCI module is also capable of computing arbitrary-order; coupled-cluster energies, using an approach similar to that of Hirata; and Bartlett [Hirata:2000:216], or of Olsen [Olsen:2000:7140].; Notably, the approach in DETCI also allows arbitrary-order; active space coupled-cluster procedures. The general algorithm; for doing this in DETCI is inefficient compared to optimized; lower-order coupled-cluster codes and should not be used for CCSD,; where the CCENERGY module is much more efficient. For higher-order; CC (like CCSDT and beyond), the code is also not as efficient as the; MRCC code by Kállay, to which Psi4 can interface (see Section; Interface to MRCC by M. Kállay); however, it may allow certain truncations of the model; space that might not be available presently in MRCC. For very small; systems, the code can be useful for testing ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/detci-1.html:10424,release,released,10424,psi4manual/1.0.0/detci-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/detci-1.html,2,['release'],['released']
Deployability,"to the; perturbation series is at the second order:. \[E_{\mathrm{MBPT}}^{(2)} = - \frac{1}{4} \frac{\langle ij|ab\rangle^2}{\epsilon_a +; \epsilon_b - \epsilon_i - \epsilon_j}.\]; In the DFMP2 module, the first-order contribution, or “singles energy” is; always evaluated. This term is a significant contributor to the total; second-order energy if a ROHF reference is used. In this case, we have chosen; to use the ROHF-MBPT(2) ansatz, in which the ROHF orbitals are; semicanonicalized, the resultant nonzero Fock matrix elements \(f_{ia}\) are used; to form the singles amplitudes, and then the second-order amplitudes are formed; with the semicanonical spin orbitals via the same machinery as a UHF-MP2. Note; that the singles energy should be very close to zero for RHF and UHF references;; if it is not, there is a good chance your orbitals are not well converged.; Tighten the SCF E_CONVERGENCE and/or D_CONVERGENCE keywords; and try again.; To increase the efficiency of MP2 energy evaluation, spin integration; and simplification is carried out. This also allows for the identification of; Same-Spin (SS) and Opposite-Spin (OS) terms for use in Grimme’s Spin-Component; Scaled (SCS) MP2. For RHF-MP2 (also labeled as RMP2), the spin-free equations are; (note that the integrals are now chemist’s integrals over spatial orbitals). \[E_{\mathrm{MBPT,OS}}^{(2)} =; - \frac{(ia|jb)(ia|jb)}{\epsilon_a + \epsilon_b - \epsilon_i - \epsilon_j}\]; and. \[E_{\mathrm{MBPT,SS}}^{(2)} =; - \frac{[(ia|jb)-(ib|ja)](ia|jb)}{\epsilon_a + \epsilon_b - \epsilon_i - \epsilon_j}.\]; For UHF-MP2 (also labeled as UMP2) and the second-order contribution to; ROHF-MBPT(2) using semicanonical orbitals, the spin-free equations are. \[E_{\mathrm{MBPT,OS}}^{(2)} =; - \frac{(ia^\alpha|jb^\beta)(ia^\alpha|jb^\beta)}{\epsilon_a + \epsilon_b - \epsilon_i - \epsilon_j}\]; and. \[E_{\mathrm{MBPT,SS}}^{(2)} =; - \frac{1}{2}\frac{[(ia^\alpha|jb^\alpha)-(ib^\alpha|ja^\alpha)](ia^\alpha|jb^\alpha)}; {\epsilon_a + \epsil",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/dfmp2-1.html:5653,integrat,integration,5653,psi4manual/1.2.1/dfmp2-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/dfmp2-1.html,15,['integrat'],['integration']
Deployability,"to which Psi4 core class should be used in the construction.; copy (bool) – Copy the data if True, return a view otherwise; dense (bool) – Converts irreped Psi4 objects to diagonally blocked dense arrays if True. Returns a list of arrays otherwise. Returns; Returns either a list of np.array’s or the base array depending on options. Return type; numpy.ndarray. Notes; This is a generalized function to convert a Psi4 object to a NumPy array; Examples; >>> data = psi4.core.Matrix(3, 3); >>> data.to_array(); [[ 0. 0. 0.]; [ 0. 0. 0.]; [ 0. 0. 0.]]. to_serial()¶; Converts an object with a .nph accessor to a serialized dictionary. trace(self: psi4.core.Matrix) → float¶; Returns the trace of the matrix. transform(*args, **kwargs)¶; Overloaded function. transform(self: psi4.core.Matrix, transformer: psi4.core.Matrix) -> None. Transform this matrix with transformer. transform(self: psi4.core.Matrix, a: psi4.core.Matrix, transformer: psi4.core.Matrix) -> None. Transform A with transformer. transpose(self: psi4.core.Matrix) → psi4.core.Matrix¶; Creates a new matrix that is the transpose of this matrix. transpose_this(self: psi4.core.Matrix) → None¶; Transpose the matrix in-place. static triplet(A, B, C, transA, transB, transC)¶; Multiply three matrices together. Deprecated since version 1.4: Use psi4.core.triplet() instead. vector_dot(self: psi4.core.Matrix, rhs: psi4.core.Matrix) → float¶; Returns the vector dot product of this with rhs. zero(self: psi4.core.Matrix) → None¶; Zero all elements of the matrix. zero_diagonal(self: psi4.core.Matrix) → None¶; Zero the diagonal of the matrix. zero_lower(self: psi4.core.Matrix) → None¶; Zero the lower triangle. zero_upper(self: psi4.core.Matrix) → None¶; Zero the upper triangle. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.6;  · . PSI4. PSI4 API: Linking C++ and Python; Matrix. © Copyright 2022, The Psi4 Project.; Last updated on Thursday, 19 May 2022 08:57PM.; Created using Sphinx 4.5.0.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/api/psi4.core.Matrix.html:16994,update,updated,16994,psi4manual/1.6.x/api/psi4.core.Matrix.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/api/psi4.core.Matrix.html,1,['update'],['updated']
Deployability,"to work with PSI4's FCHK files.; #; # :param expected: reference FCHK file name; # :param computed: computed FCHK file name; # :param digits: tolerance for high accuracy fields -- 1.e-8 or 1.e-9 suitable; # :param label: string labelling the test; # """""". fchk_ref = fchkfile_to_string(expected).splitlines(); fchk_calc = fchkfile_to_string(computed).splitlines(). high_accuracy = digits; low_accuracy = 3. # Those listed below need super high scf convergence (d_conv 1e-12) and might; # show machine dependence. They will be tested with low_accuracy.; sensitive = ['Current cartesian coordinates', 'MO coefficients']. if len(fchk_ref) != len(fchk_calc):; raise ValidationError('The two FCHK files to compare have a different file length! \n'). index = 0; max_length = len(fchk_calc); tests = []; for start in range(max_length):; if index >= max_length:; break; line = fchk_calc[index]; if ""N="" in line:; offset, calc = _consume_fchk_section(fchk_calc, index); _, ref = _consume_fchk_section(fchk_ref, index); if any(x in line for x in sensitive):; test = compare_arrays(ref, calc, low_accuracy, f"" matrix section: {line}""); else:; test = compare_arrays(ref, calc, high_accuracy, f"" matrix section: {line}""); index += offset; elif "" R "" in line and not ""N="" in line:; calc = line.split()[-1]; ref = fchk_ref[index].split()[-1]; test = compare_values(ref, calc, high_accuracy, f"" float value: {line}""); index += 1; elif "" I "" in line and not ""N="" in line:; calc = line.split()[-1]; ref = fchk_ref[index].split()[-1]; test = compare_integers(ref, calc, f"" int value: {line}""); index += 1; else:; test = compare_strings(line, fchk_ref[index], f""FCK text line {index+1}.""); index += 1; tests.append(test). return compare_integers(True, all(tests), label). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .  · ; 1.4;  · . PSI4. Module code; psi4.driver.p4util.fchk. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/p4util/fchk.html:4659,update,updated,4659,psi4manual/1.4.0/_modules/psi4/driver/p4util/fchk.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/p4util/fchk.html,1,['update'],['updated']
Deployability,"to work with PSI4's FCHK files.; #; # :param expected: reference FCHK file name; # :param computed: computed FCHK file name; # :param digits: tolerance for high accuracy fields -- 1.e-8 or 1.e-9 suitable; # :param label: string labelling the test; # """""". fchk_ref = fchkfile_to_string(expected).splitlines(); fchk_calc = fchkfile_to_string(computed).splitlines(). high_accuracy = digits; low_accuracy = 3. # Those listed below need super high scf convergence (d_conv 1e-12) and might; # show machine dependence. They will be tested with low_accuracy.; sensitive = ['Current cartesian coordinates', 'MO coefficients']. if len(fchk_ref) != len(fchk_calc):; raise ValidationError('The two FCHK files to compare have a different file length! \n'). index = 0; max_length = len(fchk_calc); tests = []; for start in range(max_length):; if index >= max_length:; break; line = fchk_calc[index]; if ""N="" in line:; offset, calc = _consume_fchk_section(fchk_calc, index); _, ref = _consume_fchk_section(fchk_ref, index); if any(x in line for x in sensitive):; test = compare_arrays(ref, calc, low_accuracy, f"" matrix section: {line}""); else:; test = compare_arrays(ref, calc, high_accuracy, f"" matrix section: {line}""); index += offset; elif "" R "" in line and not ""N="" in line:; calc = line.split()[-1]; ref = fchk_ref[index].split()[-1]; test = compare_values(ref, calc, high_accuracy, f"" float value: {line}""); index += 1; elif "" I "" in line and not ""N="" in line:; calc = line.split()[-1]; ref = fchk_ref[index].split()[-1]; test = compare_integers(ref, calc, f"" int value: {line}""); index += 1; else:; test = compare_strings(line, fchk_ref[index], f""FCK text line {index+1}.""); index += 1; tests.append(test). return compare_integers(True, all(tests), label). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .  · ; 1.5;  · . PSI4. Module code; psi4.driver.p4util.fchk. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/_modules/psi4/driver/p4util/fchk.html:4659,update,updated,4659,psi4manual/1.5.0/_modules/psi4/driver/p4util/fchk.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/_modules/psi4/driver/p4util/fchk.html,1,['update'],['updated']
Deployability,"to works like template type; deduction, hence the right-hand side of the declaration needs to have an; initializer:; 1; 2; 3int x1; // fine, but uninitialized :(; auto x2; // WON'T COMPILE!!!; auto x3 = 1; // fine and initialized. Problems with unintended type casts and type mismatches that are hard; to impossible to catch:; 1; 2; 3; 4std::vector<int> v;; // !!! The size of a vector is of type std::vector<int>::size_type and is compiler- AND architecture-DEPENDENT; unsigned sz = v.size(); // might not be correct on some compiler/machines; auto size = v.size(); // size is ALWAYS of the correct type. Reference: Items 2 and 5 in [Effective Modern C++]. Mark virtual functions in derived classes with override¶; The override keyword introduced in C++11 is used to mark a function in a; derived class and guarantee that it is overloading a function with the same; signature in the base class. This behavior is checked at compile time. Prefer GiB for memory printing¶; As memory sizes get larger, we should work in giga (requires decimal printing to not round to zero) rather than mega units.; As it’s what we’re computing anyways, we should work in 1024-based (mebi, gibi, etc. https://en.wikipedia.org/wiki/Gibibyte) rather than 1000-based units.; As it’s a unit, put it in brackets.; Note that users can supply MiB, GB, bytes, or whatever; this guideline is for output printing.; 1; 2outfile->Printf("" DFHelper Memory: AOs need %.3f [GiB]; user supplied %.3f [GiB]. "",; (required * 8 / (1024 * 1024 * 1024.0)),. table of contents. C++ Style; Prefer nullptr to 0 or NULL; Prefer std::make_shared to direct use of new; Prefer auto to explicit type declarations; Mark virtual functions in derived classes with override; Prefer GiB for memory printing. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Adding New Code to PSI4. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/prog_style_c-1.html:3685,update,updated,3685,psi4manual/1.3.2/prog_style_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/prog_style_c-1.html,2,['update'],['updated']
Deployability,"to your editor.; By installing Git hooks to run the formatters when committing.; By running the formatters manually on the modified files. How to impose code style through your editor¶; Both clang-format and yapf can be integrated into widely used editors.; The Neoformat plugin can be configured; to format files when saving them to disk. How to impose code style through Git hooks¶; Git hooks are scripts that are run before or after certain Git events.; In this particular case, we want to make sure that all files that have been; added to the staging area with git add are formatted according to the style; before they committing them with git commit.; The hook to be modified is then the pre-commit hook.; PSI4 uses the pre-commit framework, with configuration file psi4/.pre-commit-config.yaml.; To take advantage of pre-commit hooks, you will need to install the pre-commit utility:. ::pip install pre-commit. or using Conda:. ::conda install pre_commit -c conda-forge. Finally, you need to install the actual hooks:. ::pre-commit install. Pre-commit hooks will be run on every git commit, but the --no-verify; option can be used to skip their execution.; Hooks are powerful, but integrating the formatter into your editor will prove; to be better. Hooks need to be installed anew for every fresh clone of the; repository you are working on. How to run code-style tools clang-format and yapf manually¶; The least recommended approach to formatting your code is to run manually the; formatters. The following commands will format only the files that have been; modified:. ::clang-format -style=file -i git diff –relative –name-only HEAD – *.cc *.h; yapf -i git diff –relative –name-only HEAD – *.py. How and when to not apply code styling to your contributions¶; TODO. table of contents. Code style conventions; How to impose code style through your editor; How to impose code style through Git hooks; How to run code-style tools clang-format and yapf manually; How and when to not apply code s",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/code_style-1.html:1905,install,install,1905,psi4manual/1.4.0/code_style-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/code_style-1.html,9,['install'],['install']
Deployability,"to_eV, # Energy in electronvolts; ""nm"": lambda x: au_to_nm / x, # Wavelength in nanometers; ""thz"": lambda x: x * au_to_THz, # Frequency in terahertz; }. # Perform conversion of poles from au of angular frequency to output units; poles = converters[out_units](poles). # Broadening functions; gammas = {; ""au"": lambda x_0: gamma, # Angular frequency in atomic units; ""eh"": lambda x_0: gamma, # Energy in atomic units; ""ev"": lambda x_0: gamma * au_to_eV, # Energy in electronvolts; ""nm"": lambda x_0: ((x_0**2 * gamma * (Eh / hbar)) / (2 * np.pi * c_nm)), # Wavelength in nanometers; ""thz"": lambda x_0: gamma * au_to_THz, # Frequency in terahertz; }. # Generate x axis; # Add a fifth of the range on each side; expand_side = (np.max(poles) - np.min(poles)) / 5; x = np.linspace(np.min(poles) - expand_side, np.max(poles) + expand_side, npoints). # Validate lineshape; lineshape = lineshape.lower(); valid_lineshapes = [""gaussian"", ""lorentzian""]; if lineshape not in valid_lineshapes:; raise ValueError(f""Lineshape {lineshape} not among recognized ({valid_lineshapes})""). # Obtain lineshape function; shape = Gaussian(x, gammas[out_units]) if lineshape == ""gaussian"" else Lorentzian(x, gammas[out_units]). # Generate y axis, i.e. molar decadic absorption coefficient; prefactor = prefactor_opa() if kind == ""opa"" else prefactor_ecd(); transform_residue = (lambda x: x**2) if kind == ""opa"" else (lambda x: x); y = prefactor * x * np.sum([transform_residue(r) * shape.lineshape(p) for p, r in zip(poles, residues)], axis=0). # Generate sticks; sticks = prefactor * np.array([p * transform_residue(r) * shape.maximum(p) for p, r in zip(poles, residues)]). return {""convolution"": {""x"": x, ""y"": y}, ""sticks"": {""poles"": poles, ""residues"": sticks}}. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .  · ; 1.8.2;  · . PSI4. Module code; psi4.driver.p4util.spectrum. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:04AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/p4util/spectrum.html:13152,update,updated,13152,psi4manual/1.8.x/_modules/psi4/driver/p4util/spectrum.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/p4util/spectrum.html,1,['update'],['updated']
Deployability,"to_eV, # Energy in electronvolts; ""nm"": lambda x: au_to_nm / x, # Wavelength in nanometers; ""thz"": lambda x: x * au_to_THz, # Frequency in terahertz; }. # Perform conversion of poles from au of angular frequency to output units; poles = converters[out_units](poles). # Broadening functions; gammas = {; ""au"": lambda x_0: gamma, # Angular frequency in atomic units; ""eh"": lambda x_0: gamma, # Energy in atomic units; ""ev"": lambda x_0: gamma * au_to_eV, # Energy in electronvolts; ""nm"": lambda x_0: ((x_0**2 * gamma * (Eh / hbar)) / (2 * np.pi * c_nm)), # Wavelength in nanometers; ""thz"": lambda x_0: gamma * au_to_THz, # Frequency in terahertz; }. # Generate x axis; # Add a fifth of the range on each side; expand_side = (np.max(poles) - np.min(poles)) / 5; x = np.linspace(np.min(poles) - expand_side, np.max(poles) + expand_side, npoints). # Validate lineshape; lineshape = lineshape.lower(); valid_lineshapes = [""gaussian"", ""lorentzian""]; if lineshape not in valid_lineshapes:; raise ValueError(f""Lineshape {lineshape} not among recognized ({valid_lineshapes})""). # Obtain lineshape function; shape = Gaussian(x, gammas[out_units]) if lineshape == ""gaussian"" else Lorentzian(x, gammas[out_units]). # Generate y axis, i.e. molar decadic absorption coefficient; prefactor = prefactor_opa() if kind == ""opa"" else prefactor_ecd(); transform_residue = (lambda x: x**2) if kind == ""opa"" else (lambda x: x); y = prefactor * x * np.sum([transform_residue(r) * shape.lineshape(p) for p, r in zip(poles, residues)], axis=0). # Generate sticks; sticks = prefactor * np.array([p * transform_residue(r) * shape.maximum(p) for p, r in zip(poles, residues)]). return {""convolution"": {""x"": x, ""y"": y}, ""sticks"": {""poles"": poles, ""residues"": sticks}}. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .  · ; 1.9.1;  · . PSI4. Module code; psi4.driver.p4util.spectrum. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 08 February 2024 09:32PM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/_modules/psi4/driver/p4util/spectrum.html:13152,update,updated,13152,psi4manual/1.9.x/_modules/psi4/driver/p4util/spectrum.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/_modules/psi4/driver/p4util/spectrum.html,1,['update'],['updated']
Deployability,"toff(self, arg0). transform(self). transpose(self, arg0, arg1). Methods Documentation. add_space(self: psi4.core.DFHelper, arg0: str, arg1: psi4.core.Matrix) → None¶. add_transformation(self: psi4.core.DFHelper, name: str, key1: str, key2: str, order: str = 'Qpq') → None¶. clear_all(self: psi4.core.DFHelper) → None¶. clear_spaces(self: psi4.core.DFHelper) → None¶. get_AO_core(self: psi4.core.DFHelper) → bool¶. get_AO_size(self: psi4.core.DFHelper) → int¶. get_MO_core(self: psi4.core.DFHelper) → bool¶. get_memory(self: psi4.core.DFHelper) → int¶. get_method(self: psi4.core.DFHelper) → str¶. get_schwarz_cutoff(self: psi4.core.DFHelper) → float¶. get_space_size(self: psi4.core.DFHelper, arg0: str) → int¶. get_tensor(*args, **kwargs)¶; Overloaded function. get_tensor(self: psi4.core.DFHelper, arg0: str) -> psi4.core.Matrix; get_tensor(self: psi4.core.DFHelper, arg0: str, arg1: List[int], arg2: List[int], arg3: List[int]) -> psi4.core.Matrix. get_tensor_shape(self: psi4.core.DFHelper, arg0: str) → Tuple[int, int, int]¶. get_tensor_size(self: psi4.core.DFHelper, arg0: str) → int¶. hold_met(self: psi4.core.DFHelper, arg0: bool) → None¶. initialize(self: psi4.core.DFHelper) → None¶. print_header(self: psi4.core.DFHelper) → None¶. set_AO_core(self: psi4.core.DFHelper, arg0: bool) → None¶. set_MO_core(self: psi4.core.DFHelper, arg0: bool) → None¶. set_memory(self: psi4.core.DFHelper, arg0: int) → None¶. set_method(self: psi4.core.DFHelper, arg0: str) → None¶. set_nthreads(self: psi4.core.DFHelper, arg0: int) → None¶. set_schwarz_cutoff(self: psi4.core.DFHelper, arg0: float) → None¶. transform(self: psi4.core.DFHelper) → None¶. transpose(self: psi4.core.DFHelper, arg0: str, arg1: Tuple[int, int, int]) → None¶. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; DFHelper. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/api/psi4.core.DFHelper.html:2708,update,updated,2708,psi4manual/1.7.x/api/psi4.core.DFHelper.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.DFHelper.html,1,['update'],['updated']
Deployability,"tom(); 2. """"""; if self.nfragments() == 0:; raise ValidationError(""Molecule::update_geometry: There are no fragments in this molecule.""). # Idempotence condition; if self.lock_frame:; return. #print ""beginning update_geometry:""; #self.print_full(); if self.PYreinterpret_coordentries:; self.reinterpret_coordentries(); #print ""after reinterpret_coordentries:""; #self.print_full(). if self.PYmove_to_com:; self.move_to_com(); #print ""after com:""; #self.print_full(). # If the no_reorient command was given, don't reorient; if not self.PYfix_orientation:; # Now we need to rotate the geometry to its symmetry frame; # to align the axes correctly for the point group; # symmetry_frame looks for the highest point group so that we can align; # the molecule according to its actual symmetry, rather than the symmetry; # the the user might have provided.; frame = self.symmetry_frame(); self.rotate_full(frame); #print ""after rotate:""; #self.print_full(). # Recompute point group of the molecule, so the symmetry info is updated to the new frame; # TODO self.set_point_group(self.find_point_group()); # TODO self.set_full_point_group(). # Disabling symmetrize for now if orientation is fixed, as it is not; # correct. We may want to fix this in the future, but in some cases of; # finite-differences the set geometry is not totally symmetric anyway.; # Symmetrize the molecule to remove any noise; # TODO self.symmetrize(); #print ""after symmetry:""; #self.print_full(). self.lock_frame = True. # <<< Methods for Miscellaneous >>>. [docs] def clear(self):; """"""Zero it out.""""""; self.lock_frame = False; self.atoms = []; self.full_atoms = []. [docs] def nuclear_repulsion_energy(self):; """"""Computes nuclear repulsion energy. >>> print H2OH2O.nuclear_repulsion_energy(); 36.6628478528. """"""; e = 0.0; for at1 in range(self.natom()):; for at2 in range(self.natom()):; if at2 < at1:; Zi = self.Z(at1); Zj = self.Z(at2); dist = distance(self.xyz(at1), self.xyz(at2)); e += Zi * Zj / dist; return e. [docs] def nucle",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/_modules/qcdb/libmintsmolecule.html:43274,update,updated,43274,psi4manual/4.0b3/_modules/qcdb/libmintsmolecule.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/_modules/qcdb/libmintsmolecule.html,3,['update'],['updated']
Deployability,"tories can be used as models; but are in active development. For documentation on plugin modules, see; Available Plugins. psi4/plugins/aointegrals/aointegrals.cc; An example that uses the LibMints library to generate and print AO basis (no symmetry) integrals.; psi4/plugins/backtrans/backtrans.cc; A test of the one- and two-particle density matrix backtransformation code.; psi4/plugins/mointegrals/mointegrals.cc; An example that uses the LibTrans library to generate and print MO basis integrals.; psi4/plugins/mollerplesset2/mp2.cc; A plugin that uses LibTrans to generate open- and closed-shell MP2 energies.; psi4/plugins/sointegrals/sointegrals.cc; An example that uses the LibMints library to generate and print SO basis (with symmetry) integrals. Creating a New Plugin Using a Conda Pre-compiled Binary¶; Psi4 plugins can also be created using Conda for both Psi4 binary and; development environment.; To compile a plugin with the default Makefile, it is necessary to have the; gcc compiler installed in the Conda distribution or environment (below,; $PSI4CONDA) used to run Psi4.; # prepare; >>> bash; >>> export PATH=$PSI4CONDA/bin:$PATH # usually already done from psi4 installation; >>> cd ""$(dirname $(which psi4))""/.. # move into distribution/environment directory, $PSI4CONDA; >>> conda install gcc # install compilers into expected place. # check (yes, next line gives empty result. yes, LD_LIBRARY_PATH irrelevant); >>> echo $PYTHONHOME $PYTHONPATH $DYLD_LIBRARY_PATH $PSIDATADIR. >>> which python psi4 gcc; $PSI4CONDA/bin/python; $PSI4CONDA/bin/psi4; $PSI4CONDA/bin/gcc. # create and compile plugin; >>> psi4 --new-plugin testplugin # generate new plugin; >>> cd testplugin # move into plugin directory; >>> make # compile the plugin to product testplugin.so; >>> psi4 # run sample input.dat; Attention! This SCF may be density-fitted. Please note that the conda distribution must be in $PATH or the; conda enviroment must be activated before compilation and execution of; plugins",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/plugins-1.html:4251,install,installed,4251,psi4manual/1.0.0/plugins-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/plugins-1.html,2,['install'],['installed']
Deployability,"tories with PCM tests; pcmsolver/ccsd-pte,; pcmsolver/scf,; pcmsolver/opt-fd,; pcmsolver/dft, and; pcmsolver/dipole. Keywords for PCMSolver¶. PCM¶. PCM boolean for pcmsolver module. Type: boolean; Default: false. PCM_SCF_TYPE¶. Use total or separate potentials and charges in the PCM-SCF step. Type: string; Possible Values: TOTAL, SEPARATE; Default: TOTAL. PCM_CC_TYPE¶. PCM-CCSD algorithm type. Type: string; Possible Values: PTE; Default: PTE. How to configure PCMSolver for building Psi4¶; Role and Dependencies. Role — In PSI4, PCMSolver is a library that provides additional; quantum chemical capabilities (solvation modeling).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) PCMSolver; Upstream Dependencies — PCMSolver \(\Leftarrow\) Fortran, zlib. CMake Variables. ENABLE_PCMSolver — CMake variable toggling whether Psi4 builds with PCMSolver; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For PCMSolver, set to an installation directory containing include/PCMSolver/pcmsolver.h; PCMSolver_DIR — CMake variable to specify where pre-built PCMSolver can be found. Set to installation directory containing share/cmake/PCMSolver/PCMSolverConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_PCMSolver — CMake variable to force internal build of PCMSolver instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_PCMSolver — CMake variable to force detecting pre-built PCMSolver and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_PCMSolver=ON. Build without PCMSolver. >>> cmake. table of contents. Interface to PCMSolver by R. Di Remigio; Installation; Using the polarizable continuum model; Keywords for PCMSolver; PCM; PCM_SCF_TYPE; PCM_CC_TYPE. How to configure PCMSolver for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to PCMSolver by R. Di Remigio. © Copyright 2007-2024, The P",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/pcmsolver.html:5052,install,installation,5052,psi4manual/master/pcmsolver.html,https://psicode.org,https://psicode.org/psi4manual/master/pcmsolver.html,1,['install'],['installation']
Deployability,"tories with PCM tests; pcmsolver/ccsd-pte,; pcmsolver/scf,; pcmsolver/opt-fd,; pcmsolver/dft, and; pcmsolver/dipole. Keywords for PCMSolver¶. PCM¶. PCM boolean for pcmsolver module. Type: boolean; Default: false. PCM_SCF_TYPE¶. Use total or separate potentials and charges in the PCM-SCF step. Type: string; Possible Values: TOTAL, SEPARATE; Default: TOTAL. PCM_CC_TYPE¶. PCM-CCSD algorithm type. Type: string; Possible Values: PTE; Default: PTE. How to configure PCMSolver for building Psi4¶; Role and Dependencies. Role — In PSI4, PCMSolver is a library that provides additional; quantum chemical capabilities (solvation modeling).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) PCMSolver; Upstream Dependencies — PCMSolver \(\Leftarrow\) Fortran, zlib. CMake Variables. ENABLE_PCMSolver — CMake variable toggling whether Psi4 builds with PCMSolver; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For PCMSolver, set to an installation directory containing include/PCMSolver/pcmsolver.h; PCMSolver_DIR — CMake variable to specify where pre-built PCMSolver can be found. Set to installation directory containing share/cmake/PCMSolver/PCMSolverConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_PCMSolver — CMake variable to force internal build of PCMSolver instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_PCMSolver — CMake variable to force detecting pre-built PCMSolver and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_PCMSolver=ON. Build without PCMSolver. >>> cmake. table of contents. Interface to PCMSolver by R. Di Remigio; Installation; Using the polarizable continuum model; Keywords for PCMSolver; PCM; PCM_SCF_TYPE; PCM_CC_TYPE. How to configure PCMSolver for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 July 2018",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/pcmsolver-1.html:4645,install,installation,4645,psi4manual/1.2.1/pcmsolver-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/pcmsolver-1.html,2,['install'],['installation']
Deployability,"tories with PCM tests; pcmsolver/ccsd-pte,; pcmsolver/scf,; pcmsolver/opt-fd,; pcmsolver/dft, and; pcmsolver/dipole. Keywords for PCMSolver¶. PCM¶. PCM boolean for pcmsolver module. Type: boolean; Default: false. PCM_SCF_TYPE¶. Use total or separate potentials and charges in the PCM-SCF step. Type: string; Possible Values: TOTAL, SEPARATE; Default: TOTAL. PCM_CC_TYPE¶. PCM-CCSD algorithm type. Type: string; Possible Values: PTE; Default: PTE. How to configure PCMSolver for building Psi4¶; Role and Dependencies. Role — In PSI4, PCMSolver is a library that provides additional; quantum chemical capabilities (solvation modeling).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) PCMSolver; Upstream Dependencies — PCMSolver \(\Leftarrow\) Fortran, zlib. CMake Variables. ENABLE_PCMSolver — CMake variable toggling whether Psi4 builds with PCMSolver; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For PCMSolver, set to an installation directory containing include/PCMSolver/pcmsolver.h; PCMSolver_DIR — CMake variable to specify where pre-built PCMSolver can be found. Set to installation directory containing share/cmake/PCMSolver/PCMSolverConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_PCMSolver — CMake variable to force internal build of PCMSolver instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_PCMSolver — CMake variable to force detecting pre-built PCMSolver and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_PCMSolver=ON. Build without PCMSolver. >>> cmake. table of contents. Interface to PCMSolver by R. Di Remigio; Installation; Using the polarizable continuum model; Keywords for PCMSolver; PCM; PCM_SCF_TYPE; PCM_CC_TYPE. How to configure PCMSolver for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to PCMSolver by R. Di Remigio. © Copyright 2021, The Psi4 Project.; ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/pcmsolver-1.html:4707,install,installation,4707,psi4manual/1.4.0/pcmsolver-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/pcmsolver-1.html,2,['install'],['installation']
Deployability,"tories with PCM tests; pcmsolver/ccsd-pte,; pcmsolver/scf,; pcmsolver/opt-fd,; pcmsolver/dft, and; pcmsolver/dipole. Keywords for PCMSolver¶. PCM¶. PCM boolean for pcmsolver module. Type: boolean; Default: false. PCM_SCF_TYPE¶. Use total or separate potentials and charges in the PCM-SCF step. Type: string; Possible Values: TOTAL, SEPARATE; Default: TOTAL. PCM_CC_TYPE¶. PCM-CCSD algorithm type. Type: string; Possible Values: PTE; Default: PTE. How to configure PCMSolver for building Psi4¶; Role and Dependencies. Role — In PSI4, PCMSolver is a library that provides additional; quantum chemical capabilities (solvation modeling).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) PCMSolver; Upstream Dependencies — PCMSolver \(\Leftarrow\) Fortran, zlib. CMake Variables. ENABLE_PCMSolver — CMake variable toggling whether Psi4 builds with PCMSolver; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For PCMSolver, set to an installation directory containing include/PCMSolver/pcmsolver.h; PCMSolver_DIR — CMake variable to specify where pre-built PCMSolver can be found. Set to installation directory containing share/cmake/PCMSolver/PCMSolverConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_PCMSolver — CMake variable to force internal build of PCMSolver instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_PCMSolver — CMake variable to force detecting pre-built PCMSolver and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_PCMSolver=ON. Build without PCMSolver. >>> cmake. table of contents. Interface to PCMSolver by R. Di Remigio; Installation; Using the polarizable continuum model; Keywords for PCMSolver; PCM; PCM_SCF_TYPE; PCM_CC_TYPE. How to configure PCMSolver for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to PCMSolver by R. Di Remigio. © Copyright 2021, The Psi4 Project.; ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/pcmsolver-1.html:4707,install,installation,4707,psi4manual/1.5.0/pcmsolver-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/pcmsolver-1.html,2,['install'],['installation']
Deployability,"tories with PCM tests; pcmsolver/ccsd-pte,; pcmsolver/scf,; pcmsolver/opt-fd,; pcmsolver/dft, and; pcmsolver/dipole. Keywords for PCMSolver¶. PCM¶. PCM boolean for pcmsolver module. Type: boolean; Default: false. PCM_SCF_TYPE¶. Use total or separate potentials and charges in the PCM-SCF step. Type: string; Possible Values: TOTAL, SEPARATE; Default: TOTAL. PCM_CC_TYPE¶. PCM-CCSD algorithm type. Type: string; Possible Values: PTE; Default: PTE. How to configure PCMSolver for building Psi4¶; Role and Dependencies. Role — In PSI4, PCMSolver is a library that provides additional; quantum chemical capabilities (solvation modeling).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) PCMSolver; Upstream Dependencies — PCMSolver \(\Leftarrow\) Fortran, zlib. CMake Variables. ENABLE_PCMSolver — CMake variable toggling whether Psi4 builds with PCMSolver; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For PCMSolver, set to an installation directory containing include/PCMSolver/pcmsolver.h; PCMSolver_DIR — CMake variable to specify where pre-built PCMSolver can be found. Set to installation directory containing share/cmake/PCMSolver/PCMSolverConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_PCMSolver — CMake variable to force internal build of PCMSolver instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_PCMSolver — CMake variable to force detecting pre-built PCMSolver and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_PCMSolver=ON. Build without PCMSolver. >>> cmake. table of contents. Interface to PCMSolver by R. Di Remigio; Installation; Using the polarizable continuum model; Keywords for PCMSolver; PCM; PCM_SCF_TYPE; PCM_CC_TYPE. How to configure PCMSolver for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.6;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to PCMSolver by R. Di Remigio. © Copyright 2022, The Psi4 Project.; ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/pcmsolver.html:4707,install,installation,4707,psi4manual/1.6.x/pcmsolver.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/pcmsolver.html,1,['install'],['installation']
Deployability,"tories with PCM tests; pcmsolver/ccsd-pte,; pcmsolver/scf,; pcmsolver/opt-fd,; pcmsolver/dft, and; pcmsolver/dipole. Keywords for PCMSolver¶. PCM¶. PCM boolean for pcmsolver module. Type: boolean; Default: false. PCM_SCF_TYPE¶. Use total or separate potentials and charges in the PCM-SCF step. Type: string; Possible Values: TOTAL, SEPARATE; Default: TOTAL. PCM_CC_TYPE¶. PCM-CCSD algorithm type. Type: string; Possible Values: PTE; Default: PTE. How to configure PCMSolver for building Psi4¶; Role and Dependencies. Role — In PSI4, PCMSolver is a library that provides additional; quantum chemical capabilities (solvation modeling).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) PCMSolver; Upstream Dependencies — PCMSolver \(\Leftarrow\) Fortran, zlib. CMake Variables. ENABLE_PCMSolver — CMake variable toggling whether Psi4 builds with PCMSolver; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For PCMSolver, set to an installation directory containing include/PCMSolver/pcmsolver.h; PCMSolver_DIR — CMake variable to specify where pre-built PCMSolver can be found. Set to installation directory containing share/cmake/PCMSolver/PCMSolverConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_PCMSolver — CMake variable to force internal build of PCMSolver instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_PCMSolver — CMake variable to force detecting pre-built PCMSolver and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_PCMSolver=ON. Build without PCMSolver. >>> cmake. table of contents. Interface to PCMSolver by R. Di Remigio; Installation; Using the polarizable continuum model; Keywords for PCMSolver; PCM; PCM_SCF_TYPE; PCM_CC_TYPE. How to configure PCMSolver for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to PCMSolver by R. Di Remigio. © Copyright 2007-2022, The Psi4 Proje",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/pcmsolver.html:5043,install,installation,5043,psi4manual/1.7.x/pcmsolver.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/pcmsolver.html,1,['install'],['installation']
Deployability,"tories with PCM tests; pcmsolver/ccsd-pte,; pcmsolver/scf,; pcmsolver/opt-fd,; pcmsolver/dft, and; pcmsolver/dipole. Keywords for PCMSolver¶. PCM¶. PCM boolean for pcmsolver module. Type: boolean; Default: false. PCM_SCF_TYPE¶. Use total or separate potentials and charges in the PCM-SCF step. Type: string; Possible Values: TOTAL, SEPARATE; Default: TOTAL. PCM_CC_TYPE¶. PCM-CCSD algorithm type. Type: string; Possible Values: PTE; Default: PTE. How to configure PCMSolver for building Psi4¶; Role and Dependencies. Role — In PSI4, PCMSolver is a library that provides additional; quantum chemical capabilities (solvation modeling).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) PCMSolver; Upstream Dependencies — PCMSolver \(\Leftarrow\) Fortran, zlib. CMake Variables. ENABLE_PCMSolver — CMake variable toggling whether Psi4 builds with PCMSolver; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For PCMSolver, set to an installation directory containing include/PCMSolver/pcmsolver.h; PCMSolver_DIR — CMake variable to specify where pre-built PCMSolver can be found. Set to installation directory containing share/cmake/PCMSolver/PCMSolverConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_PCMSolver — CMake variable to force internal build of PCMSolver instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_PCMSolver — CMake variable to force detecting pre-built PCMSolver and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_PCMSolver=ON. Build without PCMSolver. >>> cmake. table of contents. Interface to PCMSolver by R. Di Remigio; Installation; Using the polarizable continuum model; Keywords for PCMSolver; PCM; PCM_SCF_TYPE; PCM_CC_TYPE. How to configure PCMSolver for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to PCMSolver by R. Di Remigio. © Copyright 2007-2023, The Psi4 Pro",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/pcmsolver.html:5045,install,installation,5045,psi4manual/1.8.x/pcmsolver.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/pcmsolver.html,1,['install'],['installation']
Deployability,"tories with PCM tests; pcmsolver/ccsd-pte,; pcmsolver/scf,; pcmsolver/opt-fd,; pcmsolver/dft, and; pcmsolver/dipole. Keywords for PCMSolver¶. PCM¶. PCM boolean for pcmsolver module. Type: boolean; Default: false. PCM_SCF_TYPE¶. Use total or separate potentials and charges in the PCM-SCF step. Type: string; Possible Values: TOTAL, SEPARATE; Default: TOTAL. PCM_CC_TYPE¶. PCM-CCSD algorithm type. Type: string; Possible Values: PTE; Default: PTE. How to configure PCMSolver for building Psi4¶; Role and Dependencies. Role — In PSI4, PCMSolver is a library that provides additional; quantum chemical capabilities (solvation modeling).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) PCMSolver; Upstream Dependencies — PCMSolver \(\Leftarrow\) Fortran, zlib. CMake Variables. ENABLE_PCMSolver — CMake variable toggling whether Psi4 builds with PCMSolver; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For PCMSolver, set to an installation directory containing include/PCMSolver/pcmsolver.h; PCMSolver_DIR — CMake variable to specify where pre-built PCMSolver can be found. Set to installation directory containing share/cmake/PCMSolver/PCMSolverConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_PCMSolver — CMake variable to force internal build of PCMSolver instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_PCMSolver — CMake variable to force detecting pre-built PCMSolver and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_PCMSolver=ON. Build without PCMSolver. >>> cmake. table of contents. Interface to PCMSolver by R. Di Remigio; Installation; Using the polarizable continuum model; Keywords for PCMSolver; PCM; PCM_SCF_TYPE; PCM_CC_TYPE. How to configure PCMSolver for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.9.1;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to PCMSolver by R. Di Remigio. © Copyright 2007-2024, The Psi4 Pro",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/pcmsolver.html:5045,install,installation,5045,psi4manual/1.9.x/pcmsolver.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/pcmsolver.html,1,['install'],['installation']
Deployability,"tory; (see Scratch Files) by replacing the placeholder in the following:; >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!. Note; Above commands use bash for installation and set up your environment for bash at runtime. To use csh at runtime, follow the on-screen directions at the end of the installation or consult step 7 below. Detailed Installation of Miniconda¶; https://docs.conda.io/en/latest/miniconda.html. Detailed Installation of PSI4¶. Subscribe to PSI4. Subscribe to our channel at https://anaconda.org/psi4 that contains the PSI4 package and several dependency packages. Make sure this shows up in your ~/.condarc file. >>> conda config --add channels http://conda.anaconda.org/psi4; # check; >>> cat ~/.condarc; channels:; - http://conda.anaconda.org/psi4; - defaults. Install PSI4. You can install into the main conda environment so that whenever commands conda or (Ana/Miniconda’s) python are available, then psi4 is available, too. >>> conda install psi4; # check; >>> which psi4; /path/to/miniconda/bin/psi4. Or, you can install into a conda environment that places PSI4 and its dependencies (including python) into a sandbox unaffected by any other software installed in Ana/Miniconda. This is recommended for developers to avoid interference between multiple versions (including github/conda versions) or to test python versions, etc.. In practical terms, installing into a conda environment means you can turn PSI4‘s availability on/off by switching conda environments without turning on/off the whole Ana/Miniconda installation. Below, PSI4 is installed into an environment called p4env. Then the environment is activated, removing the main Ana/Miniconda bin and adding envs/p4env/bin to PATH. The conda activate command (conda >=4.4; December 2017) works in all shells, but if you’re using old source activate that only works for bash; adjust as nee",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/conda-1.html:14769,install,install,14769,psi4manual/1.4.0/conda-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html,9,['install'],['install']
Deployability,"tr) → None¶; docstring. set_name(self: psi4.core.Dispersion, arg0: str) → None¶; docstring. sr6(self: psi4.core.Dispersion) → float¶; docstring. a1(self: psi4.core.Dispersion) → float; docstring. a2(self: psi4.core.Dispersion) → float; docstring. bibtex(self: psi4.core.Dispersion) → str; Get the BibTeX key for the literature reference. build(type: str, s6: float=0.0, p1: float=0.0, p2: float=0.0, p3: float=0.0) → psi4.core.Dispersion; docstring. citation(self: psi4.core.Dispersion) → str; docstring. compute_energy(self: psi4.core.Dispersion, arg0: psi4.core.Molecule) → float; docstring. compute_gradient(self: psi4.core.Dispersion, arg0: psi4.core.Molecule) → psi4.core.Matrix; docstring. compute_hessian(self: psi4.core.Dispersion, arg0: psi4.core.Molecule) → psi4.core.Matrix; docstring. d(self: psi4.core.Dispersion) → float; docstring. description(self: psi4.core.Dispersion) → str; docstring. name(self: psi4.core.Dispersion) → str; docstring. print_energy(self: psi4.core.Dispersion, arg0: psi4.core.Molecule) → str; docstring. print_gradient(self: psi4.core.Dispersion, arg0: psi4.core.Molecule) → str; docstring. print_hessian(self: psi4.core.Dispersion, arg0: psi4.core.Molecule) → str; docstring. print_out(self: psi4.core.Dispersion) → None; docstring. s6(self: psi4.core.Dispersion) → float; docstring. s8(self: psi4.core.Dispersion) → float; docstring. set_bibtex(self: psi4.core.Dispersion, arg0: str) → None; Set the BibTeX key for the literature reference. set_citation(self: psi4.core.Dispersion, arg0: str) → None; docstring. set_description(self: psi4.core.Dispersion, arg0: str) → None; docstring. set_name(self: psi4.core.Dispersion, arg0: str) → None; docstring. sr6(self: psi4.core.Dispersion) → float; docstring. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 July 2018 04:21AM.; Created using Sphinx 1.7.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/api/psi4.core.dispersion.html:4408,update,updated,4408,psi4manual/1.2.1/api/psi4.core.dispersion.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/api/psi4.core.dispersion.html,1,['update'],['updated']
Deployability,"tr, name: str = ""default"") -> core.Molecule:; """"""Function to create a molecule object of name *name* from the; geometry in string *geom*. Permitted for user use but deprecated; in driver in favor of explicit molecule-passing. Comments within; the string are filtered. """"""; molrec = qcel.molparse.from_string(; geom, enable_qm=True, missing_enabled_return_qm='minimal', enable_efp=True, missing_enabled_return_efp='none'). molecule = core.Molecule.from_dict(molrec['qm']); if ""geom"" in molrec[""qm""]:; geom = np.array(molrec[""qm""][""geom""]).reshape((-1, 3)); if molrec[""qm""][""units""] == ""Angstrom"":; # beware if qcel and psi4 choose different sets of constants; geom = geom / constants.bohr2angstroms; molecule._initial_cartesian = core.Matrix.from_array(geom); molecule.set_name(name). if 'efp' in molrec:; try:; import pylibefp; except ImportError as e: # py36 ModuleNotFoundError; raise ImportError(""""""Install pylibefp to use EFP functionality. `conda install pylibefp -c psi4` Or build with `-DENABLE_libefp=ON`"""""") from e; #print('Using pylibefp: {} (version {})'.format(pylibefp.__file__, pylibefp.__version__)); efpobj = pylibefp.from_dict(molrec['efp']); # pylibefp.core.efp rides along on molecule; molecule.EFP = efpobj. # Attempt to go ahead and construct the molecule; try:; molecule.update_geometry(); except Exception:; core.print_out(""Molecule: geometry: Molecule is not complete, please use 'update_geometry'\n""; "" once all variables are set.\n""). activate(molecule). return molecule. [docs]; def activate(mol: core.Molecule):; """"""Function to set molecule object *mol* as the current active molecule.; Permitted for user use but deprecated in driver in favor of explicit; molecule-passing. """"""; core.set_active_molecule(mol). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .  · ; 1.10a1.dev61;  · . PSI4. Module code; psi4.driver.molutil. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/_modules/psi4/driver/molutil.html:7661,install,install,7661,psi4manual/master/_modules/psi4/driver/molutil.html,https://psicode.org,https://psicode.org/psi4manual/master/_modules/psi4/driver/molutil.html,2,"['install', 'update']","['install', 'updated']"
Deployability,"tr; :param db_name: ``'BASIC'`` || ``'S22'`` || ``'HTBH'`` || etc. Second argument, usually unlabeled. Indicates the requested database; name, matching (case insensitive) the name of a python file in; ``psi4/share/databases`` or :envvar:`PYTHONPATH`. Consult that; directory for available databases and literature citations. :type func: :ref:`function <op_py_function>`; :param func: |dl| ``energy`` |dr| || ``optimize`` || ``cbs``. Indicates the type of calculation to be performed on each database; member. The default performs a single-point ``energy('name')``, while; ``optimize`` perfoms a geometry optimization on each reagent, and; ``cbs`` performs a compound single-point energy. If a nested series; of python functions is intended (see :ref:`sec:intercalls`), use; keyword ``db_func`` instead of ``func``. :type mode: str; :param mode: |dl| ``'continuous'`` |dr| || ``'sow'`` || ``'reap'``. Indicates whether the calculations required to complete the; database are to be run in one file (``'continuous'``) or are to be; farmed out in an embarrassingly parallel fashion; (``'sow'``/``'reap'``). For the latter, run an initial job with; ``'sow'`` and follow instructions in its output file. :type cp: :ref:`boolean <op_py_boolean>`; :param cp: ``'on'`` || |dl| ``'off'`` |dr|. Indicates whether counterpoise correction is employed in computing; interaction energies. Use this option and NOT the ``bsse_type=""cp""``; function for BSSE correction in database(). Option available; (See :ref:`sec:availableDatabases`) only for databases of bimolecular complexes. :type rlxd: :ref:`boolean <op_py_boolean>`; :param rlxd: ``'on'`` || |dl| ``'off'`` |dr|. Indicates whether correction for deformation energy is; employed in computing interaction energies. Option available; (See :ref:`sec:availableDatabases`) only for databases of bimolecular complexes; with non-frozen monomers, e.g., HBC6. :type symm: :ref:`boolean <op_py_boolean>`; :param symm: |dl| ``'on'`` |dr| || ``'off'``. Indicates whether t",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/wrapper_database.html:3972,continuous,continuous,3972,psi4manual/1.4.0/_modules/psi4/driver/wrapper_database.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/wrapper_database.html,7,['continuous'],['continuous']
Deployability,"tran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC Dependencies and Extensions¶. What are the add-on capabilities for Psi4 and what are their dependencies; How to use a local Add-On repository in the Psi4 build; How to configure CheMPS2 for building Psi4; How to fix “plugin needed to handle lto object” when building CheMPS2; How to configure dkh for building Psi4; How to configure libefp for building Psi4; How to configure erd for building Psi4; How to configure gdma for building Psi4; How to configure Libint for building Psi4; How to configure PCMSolver for building Psi4. Testing¶. How to see CTest testing errors; How to run a subset of tests; How to run a minute’s worth of tests; How to test a Psi4 installation. Runtime Setup¶. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; How to set up the scratch directory; Why not to set PSIDATADIR; How to configure paths for PsiAPI; How to solve ModuleNotFoundError: No module named 'psi4'. Running PSI4¶. What command line options does Psi4 have; What environment variables affect Psi4; What Python is Psi4 running; What Psi4 version is running; How to use Psi4 within a PBS queue; How do I retain specific Psi4 scratch files. Runtime Errors and Debugging¶. How to use gdb and lldb with Psi4; How to compile for debugging; How to fix “undefined symbol: _Py_FalseStruct”. Managing Code¶. What is the directory layout of the installed or staged Psi4; What is the suggested GitHub workflow; How to highlight git merge conflicts in vi. Miscellaneous¶. How to refer to Psi4; How to get a Psi4 logo file. table of contents. Build & Run FAQ; Obtaining and Updating PSI4; Configuring and Installing PSI4 via Binary; Configuring, Building, and Installing PSI4 via Source; Non-QC Dependencies; QC ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/build_faq-1.html:3106,install,installation,3106,psi4manual/1.4.0/build_faq-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/build_faq-1.html,4,['install'],['installation']
Deployability,"tran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC Dependencies and Extensions¶. What are the add-on capabilities for Psi4 and what are their dependencies; How to use a local Add-On repository in the Psi4 build; How to configure CheMPS2 for building Psi4; How to fix “plugin needed to handle lto object” when building CheMPS2; How to configure dkh for building Psi4; How to configure libefp for building Psi4; How to configure erd for building Psi4; How to configure gdma for building Psi4; How to configure Libint for building Psi4; How to configure PCMSolver for building Psi4. Testing¶. How to see CTest testing errors; How to run a subset of tests; How to run a minute’s worth of tests; How to test a Psi4 installation. Runtime Setup¶. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; How to set up the scratch directory; Why not to set PSIDATADIR; How to configure paths for PsiAPI; How to solve ModuleNotFoundError: No module named 'psi4'. Running PSI4¶. What command line options does Psi4 have; What environment variables affect Psi4; What Python is Psi4 running; What Psi4 version is running; How to use Psi4 within a PBS queue; How do I retain specific Psi4 scratch files. Runtime Errors and Debugging¶. How to use gdb and lldb with Psi4; How to compile for debugging; How to fix “undefined symbol: _Py_FalseStruct”; How to fix error “RuntimeError: value for ERI”. Managing Code¶. What is the directory layout of the installed or staged Psi4; What is the suggested GitHub workflow; How to highlight git merge conflicts in vi. Miscellaneous¶. How to refer to Psi4; How to get a Psi4 logo file. table of contents. Build & Run FAQ; Obtaining and Updating PSI4; Configuring and Installing PSI4 via Binary; Configuring, Building, and Inst",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/build_faq-1.html:3058,install,installation,3058,psi4manual/1.3.2/build_faq-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/build_faq-1.html,2,['install'],['installation']
Deployability,"tran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC Dependencies and Extensions¶. What are the add-on capabilities for Psi4 and what are their dependencies; How to use a local Add-On repository in the Psi4 build; How to configure CheMPS2 for building Psi4; How to fix “plugin needed to handle lto object” when building CheMPS2; How to configure dkh for building Psi4; How to configure libefp for building Psi4; How to configure erd for building Psi4; How to configure gdma for building Psi4; How to configure Libint for building Psi4; How to configure PCMSolver for building Psi4. Testing¶. How to see CTest testing errors; How to run a subset of tests; How to run a minute’s worth of tests; How to test a Psi4 installation. Runtime Setup¶. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; How to set up the scratch directory; Why not to set PSIDATADIR; How to configure paths for PsiAPI; How to solve ModuleNotFoundError: No module named 'psi4'. Running PSI4¶. What command line options does Psi4 have; What environment variables affect Psi4; What Python is Psi4 running; What Psi4 version is running; How to use Psi4 within a PBS queue; How do I retain specific Psi4 scratch files; How to use logging in Psi4; How to find the Psi4 module from the executable and vice versa. Runtime Errors and Debugging¶. How to use gdb and lldb with Psi4; How to compile for debugging; How to fix “undefined symbol: _Py_FalseStruct”. Managing Code¶. What is the directory layout of the installed or staged Psi4; What is the suggested GitHub workflow; How to highlight git merge conflicts in vi. Miscellaneous¶. How to refer to Psi4; How to get a Psi4 logo file. table of contents. Build & Run FAQ; Obtaining and Updating PSI4; Configuring and Installing PSI4",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/build_faq.html:3106,install,installation,3106,psi4manual/1.6.x/build_faq.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/build_faq.html,4,['install'],['installation']
Deployability,"transform(self: psi4.core.DFHelper) → None¶. transpose(self: psi4.core.DFHelper, arg0: str, arg1: Tuple[int, int, int]) → None¶. add_space(self: psi4.core.DFHelper, arg0: str, arg1: psi4.core.Matrix) → None. add_transformation(self: psi4.core.DFHelper, name: str, key1: str, key2: str, order: str='Qpq') → None. clear_all(self: psi4.core.DFHelper) → None. clear_spaces(self: psi4.core.DFHelper) → None. get_AO_core(self: psi4.core.DFHelper) → bool. get_AO_size(self: psi4.core.DFHelper) → int. get_MO_core(self: psi4.core.DFHelper) → bool. get_memory(self: psi4.core.DFHelper) → int. get_method(self: psi4.core.DFHelper) → str. get_schwarz_cutoff(self: psi4.core.DFHelper) → float. get_space_size(self: psi4.core.DFHelper, arg0: str) → int. get_tensor(*args, **kwargs); Overloaded function. get_tensor(self: psi4.core.DFHelper, arg0: str) -> psi4.core.Matrix; get_tensor(self: psi4.core.DFHelper, arg0: str, arg1: List[int], arg2: List[int], arg3: List[int]) -> psi4.core.Matrix. get_tensor_shape(self: psi4.core.DFHelper, arg0: str) → Tuple[int, int, int]. get_tensor_size(self: psi4.core.DFHelper, arg0: str) → int. hold_met(self: psi4.core.DFHelper, arg0: bool) → None. initialize(self: psi4.core.DFHelper) → None. print_header(self: psi4.core.DFHelper) → None. set_AO_core(self: psi4.core.DFHelper, arg0: bool) → None. set_MO_core(self: psi4.core.DFHelper, arg0: bool) → None. set_memory(self: psi4.core.DFHelper, arg0: int) → None. set_method(self: psi4.core.DFHelper, arg0: str) → None. set_nthreads(self: psi4.core.DFHelper, arg0: int) → None. set_schwarz_cutoff(self: psi4.core.DFHelper, arg0: float) → None. transform(self: psi4.core.DFHelper) → None. transpose(self: psi4.core.DFHelper, arg0: str, arg1: Tuple[int, int, int]) → None. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 July 2018 04:21AM.; Created using Sphinx 1.7.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/api/psi4.core.dfhelper.html:4329,update,updated,4329,psi4manual/1.2.1/api/psi4.core.dfhelper.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/api/psi4.core.dfhelper.html,1,['update'],['updated']
Deployability,"trators"" protections. Tag postrelease¶. # be on clean maintenance branch up-to-date with upstream in both commits and tags; # * mind which version strings get ""v"" and which don't; # * if not fork, replace ""upstream"" with ""origin"". >>> git checkout 1.3.x; Switched to branch '1.3.x'. >>> vi psi4/metadata.py; >>> git diff; diff --git a/psi4/metadata.py b/psi4/metadata.py; ...; -__version__ = '1.3'; -__version_long = '1.3+zzzzzzz'; +__version__ = '1.3.1'; +__version_long = '1.3.1+zzzzzzz'. >>> git add psi4/metadata.py; >>> git commit -m ""v1.3.1""; [1.3.x 2ce1c29] v1.3.1. >>> git log --oneline | head -1; 786fb2b v1.3.1; >>> git tag -a v1.3.1 2ce1c29 -m ""v1.3.1"". # skipping the hash recording and ""upcoming"" step b/c only tags matter on maintenance branch. # free pushing to maintenance branches at present so GitHub interface steps not needed. # see note at ""Tag postrelease"" for why atomic commit needed. Collect docs from GHA artifacts. >>> git push --atomic upstream 1.3.x v1.3.1. Initialize release branch¶. follow tagging procedure; before re-engaing the “include admin” button, push a branch at the tag commit (not the records commit); >>> git log --online | head -2; 45315cb Records tag for v1.3; 20e5c7e v1.3. >>> git checkout 20e5c7e; >>> git checkout -b 1.3.x; Switched to a new branch '1.3.x'; >>> git push upstream 1.3.x. set up new branch as protected branch through GitHub psi4 org Settings. Should be already covered under 1.*.x rule. Build Conda Psi4 stack at specific commit¶; By “Psi4 stack”, mean packages psi4, psi4-rt, psi4-dev.; Package psi4-docs used to be in “Psi4 stack”, but it’s handled by GHA and netlify now, not Conda, so skip directions below.; Other packages, the “ecosystem stack” (e.g., libint, v2rdm_casscf) should be already built. Check poodle for stray channels that may have crept in for dependencies (like c-f for ACS season). Copy over new dependencies if needed to psi4 channel; Particularly before release (not prerelease), consider max pinnings on depen",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/manage_release.html:8398,release,release,8398,psi4manual/1.7.x/manage_release.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/manage_release.html,2,['release'],['release']
Deployability,"tream/libint2/CMakeLists.txt; . How to see what build configuration options are available¶; CMake doesn’t provide a summary for this (unless you want to try the CMake; GUI, which the developers have never looked at). However, the top half of; the main CMakeLists.txt is a passable summary:; LANGUAGES C CXX); set(psi4_URL ""http://www.psicode.org/""); set(psi4_EMAIL ""psi4aiqc+cmake@gmail.com""); set(psi4_LICENSE ""GNU Lesser General Public License, version 3 (LGPL-3.0)""); set(psi4_DESCRIPTION ""Open-Source Quantum Chemistry""). list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake). message(STATUS ""Building using CMake ${CMAKE_VERSION} Generator ${CMAKE_GENERATOR}""). ################ Options: Overview and Not Otherwise Mentioned ###############. # <<< CMake build overview >>>; #; # >>> ls; # external/ COPYING psi4/ tests/ ...; # >>> cmake -S. -Bobjdir -DCMAKE_INSTALL_PREFIX=/path/to/install-psi4 ...; # ...; # -- Generating done; # -- Build files have been written to: /current/dir/objdir; # >>> cmake --build objdir --target install -j`getconf _NPROCESSORS_ONLN`. # <<< Required build dependencies that Psi4 can't build itself >>>; #; # - CMake (e.g., `conda install cmake`); # - C++ and C compilers (C++17 compliant); # - BLAS/LAPACK (also runtime; e.g., `conda install mkl-devel`); # - Python (also runtime; interpreter and headers; e.g., `conda install python`); # - NumPy (also runtime; avoidable at buildtime if gau2grid pre-built; e.g., `conda install numpy`); # - networkx >=2.4 (runtime only; e.g., `conda install networkx`); # - pint >=0.10 (runtime only; e.g., `conda install pint -c conda-forge`); # - pydantic >=1.0 (runtime only; e.g., `conda install pydantic -c conda-forge`); # - msgpack-python (runtime only; e.g., `conda install msgpack-python`); # - Eigen (for Libint2; e.g., `conda install eigen`); # - SciPy (runtime only; e.g., `conda install scipy`). # These three ""### Options ###"" sections contain useful CMake variables for build configuration. # <<< Compiler",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/build_planning.html:14151,install,install,14151,psi4manual/1.6.x/build_planning.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/build_planning.html,1,['install'],['install']
Deployability,"tream/libint2/CMakeLists.txt; . How to see what build configuration options are available¶; CMake doesn’t provide a summary for this (unless you want to try the CMake; GUI, which the developers have never looked at). However, the top half of; the main CMakeLists.txt is a passable summary:; LANGUAGES C CXX); set(psi4_URL ""http://www.psicode.org/""); set(psi4_EMAIL ""psi4aiqc+cmake@gmail.com""); set(psi4_LICENSE ""GNU Lesser General Public License, version 3 (LGPL-3.0)""); set(psi4_DESCRIPTION ""Open-Source Quantum Chemistry""). list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake). message(STATUS ""Building using CMake ${CMAKE_VERSION} Generator ${CMAKE_GENERATOR}""). ################ Options: Overview and Not Otherwise Mentioned ###############. # <<< CMake build overview >>>; #; # >>> ls; # external/ COPYING psi4/ tests/ ...; # >>> cmake -S. -Bobjdir -DCMAKE_INSTALL_PREFIX=/path/to/install-psi4 ...; # ...; # -- Generating done; # -- Build files have been written to: /current/dir/objdir; # >>> cmake --build objdir --target install -j`getconf _NPROCESSORS_ONLN`. # <<< Required build dependencies that Psi4 can't build itself >>>; #; # - CMake (e.g., `conda install cmake`); # - C++ and C compilers (C++17 compliant); # - BLAS/LAPACK (also runtime; e.g., `conda install mkl-devel`); # - Python (also runtime; interpreter and headers; e.g., `conda install python`); # - NumPy (also runtime; avoidable at buildtime if gau2grid pre-built; e.g., `conda install numpy`); # - networkx >=2.4 (runtime only; e.g., `conda install networkx`); # - pint >=0.10 (runtime only; e.g., `conda install pint -c conda-forge`); # - pydantic >=1.0 (runtime only; e.g., `conda install pydantic -c conda-forge`); # - msgpack-python (runtime only; e.g., `conda install msgpack-python`); # - Eigen (for Libint2; e.g., `conda install eigen`); # - SciPy (runtime only; e.g., `conda install scipy`); # - py-cpuinfo (runtime only; e.g., `conda install py-cpuinfo`); # - psutil (runtime only; e.g., `conda install",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/build_planning.html:14757,install,install,14757,psi4manual/1.7.x/build_planning.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/build_planning.html,1,['install'],['install']
Deployability,"treated with standard DMA. Type: double; Default: 4.0. How to configure gdma for building Psi4¶; Role and Dependencies. Role — In PSI4, GDMA is a library that provides additional; quantum chemical capabilities (multipole analysis).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) gdma; Upstream Dependencies — gdma \(\Leftarrow\) Fortran. CMake Variables. ENABLE_gdma — CMake variable toggling whether Psi4 builds with gdma; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For gdma, set to an installation directory containing include/GDMA/GDMA_MANGLE.h; gdma_DIR — CMake variable to specify where pre-built gdma can be found. Set to installation directory containing share/cmake/gdma/gdmaConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_gdma — CMake variable to force internal build of gdma instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_gdma — CMake variable to force detecting pre-built gdma and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_gdma=ON. Build without gdma. >>> cmake. Link against pre-built. >>> cmake -DENABLE_gdma=ON -DCMAKE_PREFIX_PATH=/path/to/gdma/root. >>> cmake -DENABLE_gdma=ON -Dgdma_DIR=/path/to/gdma/configdir. Build bundled despite pre-built being detectable. >>> cmake -DENABLE_gdma=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/gdma/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_gdma=ON. table of contents. Interface to GDMA Distributed Multipole Analysis by A. J. Stone — gdma(); Installation; Input; Options; GDMA_LIMIT; GDMA_ORIGIN; GDMA_MULTIPOLE_UNITS; GDMA_RADIUS; GDMA_SWITCH. How to configure gdma for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.6;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to GDMA Distributed Multipole Analysis by A. J. Stone — gdma(). © Copyright 2022, The Psi4 Project.; Last updated on Thursday, 19 May 2022 08:57PM.; Created using Sphinx 4.5.0.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/gdma.html:7053,update,updated,7053,psi4manual/1.6.x/gdma.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/gdma.html,1,['update'],['updated']
Deployability,"tributed Multipole Analysis by A. J. Stone — gdma(). Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to GDMA Distributed Multipole Analysis by A. J. Stone — gdma(). Interface to GDMA Distributed Multipole Analysis by A. J. Stone — gdma()¶; Code author: Anthony J. Stone, Andrew C. Simmonett; Section author: Andrew C. Simmonett; Module: Keywords, PSI Variables, GDMA_INTERFACE. Installation¶; Binary. GDMA is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell).; If using the PSI4 binary, gdma has already been installed alongside.; If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; gdma can be obtained through conda install gdma -c psi4.; Then enable it as a feature with ENABLE_gdma,; hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect gdma and activate dependent code. To remove a conda installation, conda remove gdma. Source. If using PSI4 built from source and you want gdma built from; from source also,; enable it as a feature with ENABLE_gdma,; and let the build system fetch and build it and activate dependent code. Input¶; The distributed multipole analysis (DMA) technique, developed by Anthony J.; Stone and implemented by him into the GDMA package, is available in PSI4.; The current implementation simply embeds Stone’s GDMA code into the main; executable, and generates the appropriate input files automatically. The; program takes as input a data file, and a Gaussian formatted checkpoint (see; Section FCHK) file. The simplest usage of the GDMA code is; demonstrated below, along with a listing of the options supported; these; options correspond to the options described in the; GDMA manual.; If more advanced usage is desired, which is not is permitted by the options; listed below, the user may provide their own data file containing keywords to; control the GDMA code. Simpl",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/gdma-1.html:1018,install,installation,1018,psi4manual/1.4.0/gdma-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/gdma-1.html,2,['install'],['installation']
Deployability,"tributed Multipole Analysis by A. J. Stone — gdma(). Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to GDMA Distributed Multipole Analysis by A. J. Stone — gdma(). Interface to GDMA Distributed Multipole Analysis by A. J. Stone — gdma()¶; Code author: Anthony J. Stone, Andrew C. Simmonett; Section author: Andrew C. Simmonett; Module: Keywords, PSI Variables, GDMA_INTERFACE. Installation¶; Binary. GDMA is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell).; If using the PSI4 binary, gdma has already been installed alongside.; If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; gdma can be obtained through conda install gdma -c psi4.; Then enable it as a feature with ENABLE_gdma,; hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect gdma and activate dependent code. To remove a conda installation, conda remove gdma. Source. If using PSI4 built from source and you want gdma built from; from source also,; enable it as a feature with ENABLE_gdma,; and let the build system fetch and build it and activate dependent code. Input¶; The distributed multipole analysis (DMA) technique, developed by Anthony J.; Stone and implemented by him into the GDMA package, is available in PSI4.; The current implementation simply embeds Stone’s GDMA code into the main; executable, and generates the appropriate input files automatically. The; program takes as input a data file, and a Gaussian formatted checkpoint (see; Section FCHK) file. The simplest usage of the GDMA code is; demonstrated below, along with a listing of the options supported; these; options correspond to the options described in the; GDMA manual.; If more advanced usage is desired, which is not is permitted by the options; listed below, the user may provide their own data file containing keywords to; control the GDMA code. Simpl",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/gdma-1.html:1018,install,installation,1018,psi4manual/1.5.0/gdma-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/gdma-1.html,2,['install'],['installation']
Deployability,"tributed Multipole Analysis by A. J. Stone — gdma(). Navigation. Index. modules    .    .    .    .  · ; 1.6;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to GDMA Distributed Multipole Analysis by A. J. Stone — gdma(). Interface to GDMA Distributed Multipole Analysis by A. J. Stone — gdma()¶; Code author: Anthony J. Stone, Andrew C. Simmonett; Section author: Andrew C. Simmonett; Module: Keywords, PSI Variables, GDMA_INTERFACE. Installation¶; Binary. GDMA is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell).; If using the PSI4 binary, gdma has already been installed alongside.; If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; gdma can be obtained through conda install gdma -c psi4.; Then enable it as a feature with ENABLE_gdma,; hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect gdma and activate dependent code. To remove a conda installation, conda remove gdma. Source. If using PSI4 built from source and you want gdma built from; from source also,; enable it as a feature with ENABLE_gdma,; and let the build system fetch and build it and activate dependent code. Input¶; The distributed multipole analysis (DMA) technique, developed by Anthony J.; Stone and implemented by him into the GDMA package, is available in PSI4.; The current implementation simply embeds Stone’s GDMA code into the main; executable, and generates the appropriate input files automatically. The; program takes as input a data file, and a Gaussian formatted checkpoint (see; Section FCHK) file. The simplest usage of the GDMA code is; demonstrated below, along with a listing of the options supported; these; options correspond to the options described in the; GDMA manual.; If more advanced usage is desired, which is not is permitted by the options; listed below, the user may provide their own data file containing keywords to; control the GDMA code. Simpl",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/gdma.html:1018,install,installation,1018,psi4manual/1.6.x/gdma.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/gdma.html,1,['install'],['installation']
Deployability,"tributed Multipole Analysis by A. J. Stone — gdma(). Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to GDMA Distributed Multipole Analysis by A. J. Stone — gdma(). Interface to GDMA Distributed Multipole Analysis by A. J. Stone — gdma()¶; Code author: Anthony J. Stone, Andrew C. Simmonett; Section author: Andrew C. Simmonett; Module: Keywords, PSI Variables, GDMA_INTERFACE. Installation¶; Binary. GDMA is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell).; If using the PSI4 binary, gdma has already been installed alongside.; If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; gdma can be obtained through conda install gdma -c psi4.; Then enable it as a feature with ENABLE_gdma,; hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect gdma and activate dependent code. To remove a conda installation, conda remove gdma. Source. If using PSI4 built from source and you want gdma built from; from source also,; enable it as a feature with ENABLE_gdma,; and let the build system fetch and build it and activate dependent code. Input¶; The distributed multipole analysis (DMA) technique, developed by Anthony J.; Stone and implemented by him into the GDMA package, is available in PSI4.; The current implementation simply embeds Stone’s GDMA code into the main; executable, and generates the appropriate input files automatically. The; program takes as input a data file, and a Gaussian formatted checkpoint (see; Section FCHK) file. The simplest usage of the GDMA code is; demonstrated below, along with a listing of the options supported; these; options correspond to the options described in the; GDMA manual.; If more advanced usage is desired, which is not is permitted by the options; listed below, the user may provide their own data file containing keywords to; control the GDMA code. Simpl",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/gdma.html:1018,install,installation,1018,psi4manual/1.7.x/gdma.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/gdma.html,1,['install'],['installation']
Deployability,"trices provided from the Psi library. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. dfmp2-grad1; DF-MP2 cc-pVDZ gradients for the H2O molecule. sapt1; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. dfccsd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. dft1-alt; DFT Functional Test. dct-grad1; Various DCT analytic gradients for the O2 molecule with 6-31G basis set. fd-freq-gradient-large; SCF DZ finite difference frequencies by gradients for C4NH4. nbody-cp-gradient; Computation of CP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). scf-level-shift-rks; SCF level shift on an RKS computation. dft-custom-mgga; updated dldf reference to new BraggSlater radii Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). sapt9; usapt example with empty beta. dft-grad-lr1; wB97X-D cc-pVDZ gradient of S22 HCN update df/pk_ref values due to new BraggSlater radii. dfmp2-fc; Kr–Kr nocp energies with all-electron basis set to check frozen core. dft-vv10; He Dimer VV10 functional test. notes: DFT_VV10_B/C overwrites the NL_DISPERSION_PARAMETERS tuple updated ‘bench’ reference values for new BraggSlater radii. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. dfep2-1; Compute three IP and 2 EA’s for the PH3 molecule. pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. opt4; SCF cc-pVTZ geometry optimzation, with Z-matrix input. lccd-grad2; LCCD cc-pVDZ gradient for t",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_corepsi4.html:26233,update,updated,26233,psi4manual/1.9.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_corepsi4.html,2,['update'],['updated']
Deployability,"tring. point_values(self: psi4.core.PointFunctions) → Dict[str, psi4.core.Vector]¶; docstring. print_out(self: psi4.core.PointFunctions, out_fname: str='outfile', print: int=2) → None¶; docstring. set_ansatz(self: psi4.core.PointFunctions, arg0: int) → None¶; docstring. set_pointers(*args, **kwargs)¶; Overloaded function. set_pointers(self: psi4.core.PointFunctions, arg0: psi4.core.Matrix) -> None. docstring. set_pointers(self: psi4.core.PointFunctions, arg0: psi4.core.Matrix, arg1: psi4.core.Matrix) -> None. docstring. ansatz(self: psi4.core.PointFunctions) → int; docstring. basis_values(self: psi4.core.BasisFunctions) → Dict[str, psi4.core.Matrix]¶; docstring. compute_functions(self: psi4.core.BasisFunctions, arg0: psi::BlockOPoints) → None¶; docstring. compute_points(self: psi4.core.PointFunctions, block: psi::BlockOPoints, force_compute: bool=True) → None; docstring. deriv(self: psi4.core.BasisFunctions) → int¶; docstring. max_functions(self: psi4.core.BasisFunctions) → int¶; docstring. max_points(self: psi4.core.BasisFunctions) → int¶; docstring. orbital_values(self: psi4.core.PointFunctions) → Dict[str, psi4.core.Matrix]; docstring. point_values(self: psi4.core.PointFunctions) → Dict[str, psi4.core.Vector]; docstring. print_out(self: psi4.core.PointFunctions, out_fname: str='outfile', print: int=2) → None; docstring. set_ansatz(self: psi4.core.PointFunctions, arg0: int) → None; docstring. set_deriv(self: psi4.core.BasisFunctions, arg0: int) → None¶; docstring. set_pointers(*args, **kwargs); Overloaded function. set_pointers(self: psi4.core.PointFunctions, arg0: psi4.core.Matrix) -> None. docstring. set_pointers(self: psi4.core.PointFunctions, arg0: psi4.core.Matrix, arg1: psi4.core.Matrix) -> None. docstring. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/api/psi4.core.pointfunctions.html:2719,update,updated,2719,psi4manual/1.3.2/api/psi4.core.pointfunctions.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.pointfunctions.html,1,['update'],['updated']
Deployability,"trix is used to accelerate convergence of the CI iterations in the OLSEN and MITRUSHENKOV iteration schemes, and also to find a good starting guess for the SEM method if GUESS_VECTOR is H0_BLOCK. Defaults to 1000. Note that the program may change the given size for Ms=0 cases (MS0 is TRUE) if it determines that the H0 block includes only one member of a pair of determinants related by time reversal symmetry. For very small block sizes, this could conceivably eliminate the entire H0 block; the program should print warnings if this occurs. Type: integer; Default: 1000. H0_GUESS_SIZE (DETCI)¶DETCI (Expert) — size of H0 block for initial guess. Type: integer; Default: 1000. H_BOND_CONNECT (OPTKING)¶OPTKING — For now, this is a general maximum distance for the definition of H-bonds. Type: double; Default: 4.3. H_GUESS_EVERY (OPTKING)¶OPTKING — Re-estimate the Hessian at every step, i.e., ignore the currently stored Hessian. Type: boolean; Default: false. H_UPDATE_DEN_TOL (OPTKING)¶OPTKING — Denominator check for hessian update. Type: conv double; Default: 1e-7. HD_AVG (DETCI)¶DETCI (Expert) — How to average H diag energies over spin coupling sets. HD_EXACT uses the exact diagonal energies which results in expansion vectors which break spin symmetry. HD_KAVE averages the diagonal energies over a spin-coupling set yielding spin pure expansion vectors. ORB_ENER employs the sum of orbital energy approximation giving spin pure expansion vectors but usually doubles the number of Davidson iterations. EVANGELISTI uses the sums and differences of orbital energies with the SCF reference energy to produce spin pure expansion vectors. LEININGER approximation which subtracts the one-electron contribution from the orbital energies, multiplies by 0.5, and adds the one-electron contribution back in, producing spin pure expansion vectors and developed by Matt Leininger and works as well as EVANGELISTI. Type: string; Possible Values: EVANGELISTI, HD_EXACT, HD_KAVE, ORB_ENER, LEININGER, Z_K",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:142077,update,update,142077,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html,9,['update'],['update']
Deployability,"tronic energy [E_h] and correlation energy component [E_h]; for the MP2-like method formed by reweighting MP2 DOUBLES ENERGY; by 6/5 opposite-spin and 1/3 same-spin contributions, with; any singles carried along. SCS-MP2-VDW TOTAL ENERGY¶. SCS-MP2-VDW CORRELATION ENERGY¶; The total electronic energy [E_h] and correlation energy component [E_h]; for the MP2-like method formed by reweighting MP2 DOUBLES ENERGY; by 1.28 opposite-spin and 0.50 same-spin contributions, with; any singles carried along. DOI: 10.1080/00268970802641242. SCS(N)-MP2 TOTAL ENERGY¶. SCS(N)-MP2 CORRELATION ENERGY¶; The total electronic energy [E_h] and correlation energy component [E_h]; for the MP2-like method formed by reweighting MP2 DOUBLES ENERGY; by 0 opposite-spin and 1.76 same-spin contributions, with; any singles carried along. doi: 10.1021/ct6002737. SCS(N)-OMP2 CORRELATION ENERGY¶. SCS(N)-OMP2 TOTAL ENERGY¶. SCSN-OMP2 CORRELATION ENERGY¶. SCSN-OMP2 TOTAL ENERGY¶; Two spellings of a discontinued QCVariable that may still appear; because the code is frozen pending an update. SCS-OMP2 TOTAL ENERGY¶. SCS-OMP2 CORRELATION ENERGY¶; The total electronic energy [E_h] and correlation energy component [E_h]; for the OMP2-like method formed by reweighting OMP2 DOUBLES ENERGY; by 6/5 opposite-spin and 1/3 same-spin contributions, with; any singles carried along. SCS-MP3 TOTAL ENERGY¶. SCS-MP3 CORRELATION ENERGY¶; The total electronic energy [E_h] and correlation energy component [E_h]; for the MP3-like method formed by reweighting the difference between; MP3 DOUBLES ENERGY and MP2 DOUBLES ENERGY; by 0.25, atop the SCS-MP2 energy, with any singles carried along. SCS-OMP3 TOTAL ENERGY¶. SCS-OMP3 CORRELATION ENERGY¶; The total electronic energy [E_h] and correlation energy component [E_h]; for the OMP3-like method formed by reweighting the difference between; OMP3 DOUBLES ENERGY and OMP2 DOUBLES ENERGY; by 0.25, atop the SCS-OMP2 energy, with any singles carried along. SOS-MP2 TOTAL ENERGY¶. SOS-MP2 C",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/glossary_psivariables.html:55666,update,update,55666,psi4manual/1.7.x/glossary_psivariables.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/glossary_psivariables.html,4,['update'],['update']
Deployability,"tructor and build binary bash scripts, one per OS per Python version. In analogy to Miniconda, they’re called Psi4Conda. They can be built anywhere (Mac can be built on Linux) and get served from vergil (cdsgroup webserver). Need a conda env with constructor and cookiecutter. This env presently accessed through conda activate cookie.; Enter “constructor-cutter-unified” in the psi4meta repo. There’s a good README there, https://github.com/psi4/psi4meta/blob/master/conda-recipes/constructor-cutter-unified/README.md; Edit cookiecutter/cookiecutter.json for control. Edit which python versions, if necessary; Edit release field; Edit hash field. This is the 7-char hash that’s on every psi4 conda pkg as part of version; Edit ltrtver field. This matches the current setting in conda_build_config.yaml; For prereleases, ""channel_tag"": ""/label/dev"", while for (post)releases, it should be the empty string; Leave this file set to a “rc” with Git, as that has more details. For (post)releases (not prereleases), copy cookiecutter.json to cookiecutter.json-vXXX; Edit cookiecutter/{{.../construct.yaml for templating. This is rarely needed; If it’s been a while or you need the space, clear out ~/.conda/constructor, where the downloaded packages are cached; Note that installers get written to build/ and this gets regenerated each time. Clear out between runs.; python run.py; [Outdated] Watch out for py_ in buildstring as this means a noarch package has been pulled. It must be eliminated. Constructors can’t handle “noarch” packages and will fail at runtime. If see a “noarch” package, must find the recipe and rebuild for all OS & Python combinations. Then run constructor again.; [Replacement] After adding a post_install to reposition the noarch packages, they are safe to include.; If fetching times out, may have to run run.py several times. Clear out build/ in between. It’s the fetching that takes a long time, not constucting; In the end, should have several installers; >>> ls -l build/psi",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/manage_release-1.html:11788,release,releases,11788,psi4manual/1.4.0/manage_release-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/manage_release-1.html,7,['release'],['releases']
Deployability,"tructure methods are available in the PSI4; package, from Hartree–Fock molecular orbital theory to coupled-cluster; theory to full configuration interaction. This section introduces; the methods available and some of their most common input parameters.; A complete list of standard keywords is provided in Appendix; Keywords by Module. Notes on Options; Hartree–Fock Theory; Introduction; Theory; Minimal Input; Spin/Symmetry Treatment; Orthogonalization; Initial Guess/Convergence Stabilization; ERI Algorithms; Recommendations. Density Functional Theory; Theory; Minimal Input; Spin/Symmetry Treatment; Functional Selection; Grid Selection; ERI Algorithms; IP Fitting; Fractional Particle Curves; Recommendations. Density-Fitted Second-Order Møller-Plesset Perturbation Theory; Introduction; Theory; Recommendations. Ab Initio Polarization Propagator; Partial Renormalization Scheme; Using the ADC(2) code; Implementation. Symmetry-Adapted Perturbation Theory; A First Example; SAPT0; Higher-Order SAPT; MP2 Natural Orbitals; Charge-Transfer in SAPT; Interpreting SAPT Results. Coupled Cluster Methods; Basic Keywords; Larger Calculations; Excited State Coupled Cluster Calculations; Linear Response (CCLR) Calculations. PSIMRCC Implementation of Mk-MRCC Theory; A Simple Example; Orbital ordering and selection of the model space. Interface to MRCC by M. Kállay; Installation; Running MRCC. Configuration Interaction; Basic DETCI Keywords; Arbitrary Order Perturbation Theory; Arbitrary Order Coupled-Cluster Theory. Geometry Optimization; Basic Keywords; Optimizing Minima; Hessian; Transition States, Reaction Paths, and Constrained Optimizations; Convergence Criteria; Output. Previous topic; Basis Sets; Next topic; Notes on Options; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules |. next |. previous |; PSI4 [beta2] » . © Copyright 2012, Psi4 Project.; Last updated on Sep 30, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/methods-1.html:2129,update,updated,2129,psi4manual/4.0b2/methods-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/methods-1.html,2,['update'],['updated']
Deployability,"try a test build to ensure your compiler is approved. Note that Intel; compilers on Linux also rely on GCC, so both icpc and gcc versions are checked. How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS. How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew¶; The easiest compiler to obtain is clang which is a drop-in replacement; for gcc and g++. Just install XCode. Some old versions; of XCode can’t handle some of the advanced C++ language features, but this; is a software not hardware limitation. Checks for version compliance; performed at build-time. How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS¶; # See if GCC too old (in this case, yes); >>> gcc --version; gcc (GCC) 4.8.5 20150623 (Red Hat 4.8.5-4). Even if you’re not using GCC as a compiler, your Intel compiler seeks; gcc to generate code compatible with your current GCC version. If your; GCC is too old (like above), you can update your system GCC through your; package manager or install an acceptable version elsewhere on your; system. The latter route, tested on Linux with Intel compilers, is below.; # Install GCC 7.2 into a non-primary conda environment; >>> conda create -n gcc72 gxx_linux-64 gcc_linux-64. # To Build, either:. # (A) activate environment (prepends PATH and defines environment variables CC, CXX, HOST, etc); >>> conda activate gcc72; >>> echo ${CXX}; /path/to/miniconda/envs/gcc72/bin/x86_64-conda_cos6-linux-gnu-g++; >>> echo ${HOST}; x86_64-conda_cos6-linux-gnu. # build with GNU; >>> cmake -H. -Bbuild \; -DCMAKE_C_COMPILER=${CC} \; -DCMAKE_CXX_COMPILER=${CXX} \. # build with Intel; >>> cmake -H. -Bbuild \; -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_C_FLAGS=""-gnu-prefix=${HOST}-"" \; -DCMAKE_CXX_FLAGS=""-gnu-prefix=${HOST}-"" \. # (B) tell CMake to tell the compiler which GCC to use; >>> GCC7=/path/to/miniconda/envs/gcc72; >>> cmake -H. -Bbuild \; -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMA",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/build_planning-1.html:31926,update,update,31926,psi4manual/1.2.1/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html,4,"['install', 'update']","['install', 'update']"
Deployability,"try in either Z-matrix or Cartesian format; to allow the string to break over multiple lines, use Python’s triple-quote """"""string"""""" syntax. Finally, we will compute the Hartree-Fock SCF energy with the cc-pVDZ basis set by passing the method/basis set as a string ('scf/cc-pvdz') into the function psi4.energy(); API:. [3]:. #! Sample HF/cc-pVDZ H2O Computation. psi4.set_memory('500 MB'). h2o = psi4.geometry(""""""; O; H 1 0.96; H 1 0.96 2 104.5; """"""). psi4.energy('scf/cc-pvdz'). [3]:. -76.02663273488399. If everything goes well, the computation should complete and should report a final restricted Hartree-Fock energy in the output file output.dat in a section like this:; Energy converged. @DF-RHF Final Energy: -76.02663273486682. By default, the energy should be converged to about \(1.0\times 10^{-6}\), so agreement is only expected for about the first 6 digits after the decimal. If the computation does not complete, there is probably a problem with the compilation or installation of the program (see the installation instructions in the main Psi4 manual section Compiling and Installing from Source).; This very simple input is sufficient to run the requested information. Notice we didn’t tell the program some otherwise useful information like the charge of the molecule (0, it’s neutral), the spin multiplicity (1 for a closed-shell molecule with all electrons paired), or the reference wavefunction to use (restricted Hartree-Fock, or RHF, is usually appropriate for a closed-shell molecule). The program correctly guessed all of these options for us. We can change the default behavior through; additional keywords.; Let’s consider what we would do for an open-shell molecule, where not all the electrons are paired. For example, let’s run a computation on methylene (\(\text{CH}_2\)), whose ground electronic state has two unpaired electrons (triplet electronic state, or a spin multiplicity \(2S + 1 = 3\)). In this case, the default spin multiplicity (1) is not correct, so we nee",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/psiapi-1.html:4089,install,installation,4089,psi4manual/1.3.2/psiapi-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psiapi-1.html,12,['install'],['installation']
Deployability,"trying to be analyzed! natom {} != {}'.format(; mol.natom(), molecule.natom())); if abs(mol.nuclear_repulsion_energy() - molecule.nuclear_repulsion_energy()) > 1.e-6:; raise ValidationError('Impostor molecule trying to be analyzed! NRE {} != {}'.format(; mol.nuclear_repulsion_energy(), molecule.nuclear_repulsion_energy())); if not np.allclose(np.asarray(mol.geometry()), np.asarray(molecule.geometry()), atol=1.e-6):; core.print_out(; 'Warning: geometry center/orientation mismatch. Normal modes may not be in expected coordinate system.'; ); # raise ValidationError('Impostor molecule trying to be analyzed! geometry\n{}\n !=\n{}'.format(; # np.asarray(mol.geometry()), np.asarray(molecule.geometry()))); mol = molecule. m = np.asarray([mol.mass(at) for at in range(mol.natom())]); irrep_labels = mol.irrep_labels(). vibinfo, vibtext = qcdb.vib.harmonic_analysis(; nmwhess, geom, m, wfn.basisset(), irrep_labels, dipder=dipder, project_trans=project_trans, project_rot=project_rot); vibrec.update({k: qca.json() for k, qca in vibinfo.items()}). core.print_out(vibtext); core.print_out(qcdb.vib.print_vibs(vibinfo, shortlong=True, normco='x', atom_lbl=symbols)). if core.has_option_changed('THERMO', 'ROTATIONAL_SYMMETRY_NUMBER'):; rsn = core.get_option('THERMO', 'ROTATIONAL_SYMMETRY_NUMBER'); else:; rsn = mol.rotational_symmetry_number(). if irrep is None:; therminfo, thermtext = qcdb.vib.thermo(; vibinfo,; T=core.get_option(""THERMO"", ""T""), # 298.15 [K]; P=core.get_option(""THERMO"", ""P""), # 101325. [Pa]; multiplicity=mol.multiplicity(),; molecular_mass=np.sum(m),; sigma=rsn,; rotor_type=mol.rotor_type(),; rot_const=np.asarray(mol.rotational_constants()),; E0=core.variable('CURRENT ENERGY')) # someday, wfn.energy(); vibrec.update({k: qca.json() for k, qca in therminfo.items()}). core.set_variable(""ZPVE"", therminfo['ZPE_corr'].data) # P::e THERMO; core.set_variable(""THERMAL ENERGY CORRECTION"", therminfo['E_corr'].data) # P::e THERMO; core.set_variable(""ENTHALPY CORRECTION"", therminfo['H",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/driver.html:89160,update,update,89160,psi4manual/1.4.0/_modules/psi4/driver/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/driver.html,2,['update'],['update']
Deployability,"trying to be analyzed! natom {} != {}'.format(; mol.natom(), molecule.natom())); if abs(mol.nuclear_repulsion_energy() - molecule.nuclear_repulsion_energy()) > 1.e-6:; raise ValidationError('Impostor molecule trying to be analyzed! NRE {} != {}'.format(; mol.nuclear_repulsion_energy(), molecule.nuclear_repulsion_energy())); if not np.allclose(np.asarray(mol.geometry()), np.asarray(molecule.geometry()), atol=1.e-6):; core.print_out(; 'Warning: geometry center/orientation mismatch. Normal modes may not be in expected coordinate system.'; ); # raise ValidationError('Impostor molecule trying to be analyzed! geometry\n{}\n !=\n{}'.format(; # np.asarray(mol.geometry()), np.asarray(molecule.geometry()))); mol = molecule. m = np.asarray([mol.mass(at) for at in range(mol.natom())]); irrep_labels = mol.irrep_labels(). vibinfo, vibtext = qcdb.vib.harmonic_analysis(; nmwhess, geom, m, wfn.basisset(), irrep_labels, dipder=dipder, project_trans=project_trans, project_rot=project_rot); vibrec.update({k: qca.to_dict() for k, qca in vibinfo.items()}). core.print_out(vibtext); core.print_out(qcdb.vib.print_vibs(vibinfo, shortlong=True, normco='x', atom_lbl=symbols)). if core.has_option_changed('THERMO', 'ROTATIONAL_SYMMETRY_NUMBER'):; rsn = core.get_option('THERMO', 'ROTATIONAL_SYMMETRY_NUMBER'); else:; rsn = mol.rotational_symmetry_number(). if irrep is None:; therminfo, thermtext = qcdb.vib.thermo(; vibinfo,; T=core.get_option(""THERMO"", ""T""), # 298.15 [K]; P=core.get_option(""THERMO"", ""P""), # 101325. [Pa]; multiplicity=mol.multiplicity(),; molecular_mass=np.sum(m),; sigma=rsn,; rotor_type=mol.rotor_type(),; rot_const=np.asarray(mol.rotational_constants()),; E0=core.variable('CURRENT ENERGY')) # someday, wfn.energy(); vibrec.update({k: qca.to_dict() for k, qca in therminfo.items()}). core.set_variable(""ZPVE"", therminfo['ZPE_corr'].data); core.set_variable(""THERMAL ENERGY CORRECTION"", therminfo['E_corr'].data); core.set_variable(""ENTHALPY CORRECTION"", therminfo['H_corr'].data); core.se",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/driver.html:76299,update,update,76299,psi4manual/1.3.2/_modules/psi4/driver/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/driver.html,1,['update'],['update']
Deployability,"ts are privileged, i.e. if seeking to converge 5 states in total, 3 will be singlets and 2 will be triplets. - only : Only triplet states computed. Type: string; Possible Values: NONE, ALSO, ONLY; Default: NONE. TEST_B (OPTKING)¶OPTKING — Do test B matrix?. Type: boolean; Default: false. TEST_DERIVATIVE_B (OPTKING)¶OPTKING — Do test derivative B matrix?. Type: boolean; Default: false. THETA_POINTS (SCF)¶SCF — Number of colatitude grid points for spherical potential integration. Type: integer; Default: 360. THICKNESS (SCF)¶SCF — Thickness (bohr) of a hard-sphere external potential. Type: double; Default: 20.0. THREE_PARTICLE (DCT)¶DCT — Whether to compute three-particle energy correction or not. Type: string; Possible Values: NONE, PERTURBATIVE; Default: NONE. TIKHONOW_MAX (PSIMRCC)¶PSIMRCC — The cycle after which Tikhonow regularization is stopped. Set to zero to allow regularization in all iterations. Type: integer; Default: 5. TIKHONOW_OMEGA (DCT)¶DCT (Expert) — The shift applied to the denominator in the density cumulant update iterations. Type: double; Default: 0.0. TIKHONOW_OMEGA (PSIMRCC)¶PSIMRCC — The shift to apply to the denominators, {it c.f.} Taube and Bartlett, JCP, 130, 144112 (2009). Type: double; Default: 0.0. TIKHONOW_TRIPLES (PSIMRCC)¶PSIMRCC (Expert) — Do use Tikhonow regularization in (T) computations?. Type: boolean; Default: false. TILE_SZ (SCF)¶SCF (Expert) — The tile size for the distributed matrices. Type: integer; Default: 512. TPDM (DETCI)¶DETCI (Expert) — Do compute two-particle density matrix if not otherwise required? Warning: This will hold 4 dense active TPDM’s in memory. Type: boolean; Default: false. TPDM_ABCD_TYPE (OCC)¶OCC — How to take care of the TPDM VVVV-block. The COMPUTE option means it will be computed via an IC/OOC algorithm. The DIRECT option (default) means it will not be computed and stored, instead its contribution will be directly added to Generalized-Fock Matrix. Type: string; Possible Values: DIRECT, COMPUTE; Default",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:225777,update,update,225777,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html,9,['update'],['update']
Deployability,ts of the quadrupole [Debye Ang] for the; coupled electron pair approximation variant 0 level of theory. CEPA(0) TOTAL ENERGY¶. CEPA(0) CORRELATION ENERGY¶. CEPA(1) TOTAL ENERGY¶. CEPA(1) CORRELATION ENERGY¶. CEPA(2) TOTAL ENERGY¶. CEPA(2) CORRELATION ENERGY¶. CEPA(3) TOTAL ENERGY¶. CEPA(3) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested variant of coupled electron pair approximation level of theory. CI DIPOLE X¶. CI DIPOLE Y¶. CI DIPOLE Z¶; The three components of the dipole [Debye] for the requested; configuration interaction level of theory and root. CI QUADRUPOLE XX¶. CI QUADRUPOLE XY¶. CI QUADRUPOLE XZ¶. CI QUADRUPOLE YY¶. CI QUADRUPOLE YZ¶. CI QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the requested; configuration interaction level of theory and root. CI ROOT n -> ROOT m DIPOLE X¶. CI ROOT n -> ROOT m DIPOLE Y¶. CI ROOT n -> ROOT m DIPOLE Z¶; The three components of the transition dipole [Debye] between roots n; and m for the requested configuration interaction level of theory. CI ROOT n -> ROOT m QUADRUPOLE XX¶. CI ROOT n -> ROOT m QUADRUPOLE XY¶. CI ROOT n -> ROOT m QUADRUPOLE XZ¶. CI ROOT n -> ROOT m QUADRUPOLE YY¶. CI ROOT n -> ROOT m QUADRUPOLE YZ¶. CI ROOT n -> ROOT m QUADRUPOLE ZZ¶; The three components of the transition quadrupole [Debye Ang] between; roots n and m for the requested configuration interaction level of; theory. CI ROOT n DIPOLE X¶. CI ROOT n DIPOLE Y¶. CI ROOT n DIPOLE Z¶; The three components of the dipole [Debye] for the requested; configuration interaction level of theory and root n. CI ROOT n QUADRUPOLE XX¶. CI ROOT n QUADRUPOLE XY¶. CI ROOT n QUADRUPOLE XZ¶. CI ROOT n QUADRUPOLE YY¶. CI ROOT n QUADRUPOLE YZ¶. CI ROOT n QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the requested; configuration interaction level of theory and root n. CI ROOT n TOTAL ENERGY¶. CI ROOT n CORRELATION ENERGY¶; The total electronic energy [H] and cor,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/glossary_psivariables-1.html:6320,configurat,configuration,6320,psi4manual/4.0b3/glossary_psivariables-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/glossary_psivariables-1.html,6,['configurat'],['configuration']
Deployability,"ts""].items():; clone = self.molecule.clone(); clone.reinterpret_coordentry(False); #clone.fix_orientation(True). # Load in displacement into the active molecule; clone.set_geometry(core.Matrix.from_array(displacement[""geometry""])). # If the user insists on symmetry, weaken it if some is lost when displacing.; # or 'fix_symmetry' in self.findifrec.molecule; logger.debug(f'SYMM {clone.schoenflies_symbol()}'); if self.molecule.symmetry_from_input():; disp_group = clone.find_highest_point_group(); new_bits = parent_group.bits() & disp_group.bits(); new_symm_string = qcdb.PointGroup.bits_to_full_name(new_bits); clone.reset_point_group(new_symm_string). packet = {; ""molecule"": clone,; ""driver"": self.metameta['proxy_driver'],; ""method"": self.method,; ""basis"": data[""basis""],; ""keywords"": data[""keywords""] or {},; }; # Displacements can run in lower symmetry. Don't overwrite orbitals from reference geom; packet['keywords']['function_kwargs'].update({""write_orbitals"": False}); if 'cbs_metadata' in data:; packet['cbs_metadata'] = data['cbs_metadata']. self.task_list[label] = self.computer(**packet, **passalong). # for n, displacement in enumerate(findif_meta_dict[""displacements""].values(), start=2):; # _process_displacement(energy, lowername, molecule, displacement, n, ndisp, write_orbitals=False, **kwargs). [docs]; def build_tasks(self, obj, **kwargs):; # permanently a dummy function; pass. [docs]; def plan(self):; # uncalled function; return [t.plan() for t in self.task_list.values()]. [docs]; def compute(self, client: Optional[""qcportal.FractalClient""] = None):; """"""Run each job in task list.""""""; instructions = ""\n"" + p4util.banner(f"" FiniteDifference Computations"", strNotOutfile=True) + ""\n""; logger.debug(instructions); core.print_out(instructions). with p4util.hold_options_state():; for t in self.task_list.values():; t.compute(client=client). def _prepare_results(self, client: Optional[""qcportal.FractalClient""] = None):; results_list = {k: v.get_results(client=client) for k,",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/driver_findif.html:45766,update,update,45766,psi4manual/1.8.x/_modules/psi4/driver/driver_findif.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/driver_findif.html,3,['update'],['update']
Deployability,"ts, and as soon as 1.7, it will stop working."", category=FutureWarning). error_msg = (""\n\t\t\t\t!!!!! WARNING !!!!!\n"" +; ""\t\tThe built-in ADC(2) method may give incorrect results if\n""; ""\t\tmultiple roots are requested, due to an error in the Davidson solver,\n""; ""\t\tand is no longer maintained. It is slated for removal in Psi4 1.7.\n""; ""\t\tUse of the Psi interface to `adcc` instead is strongly recommended.\n""). core.print_out(error_msg). wfn = core.adc(ref_wfn). core.print_out(error_msg). return wfn. def run_adcc(name, **kwargs):; """"""Prepare and run an ADC calculation in adcc, interpret the result and return; as a wavefunction. """"""; # TODO Maybe it would improve readability if this function was spilt; # up and the whole thing went to a separate file (like for sapt,; # interface_cfour.py, ... try:; import adcc; from adcc.exceptions import InvalidReference; except ModuleNotFoundError:; raise ValidationError(""adcc extras qc_module not available. Try installing ""; ""via 'pip install adcc' or 'conda install -c adcc adcc'.""). if core.get_option('ADC', 'REFERENCE') not in [""RHF"", ""UHF""]:; raise ValidationError('adcc requires reference RHF or UHF'). # Bypass the scf call if a reference wavefunction is given; ref_wfn = kwargs.pop('ref_wfn', None); if ref_wfn is None:; ref_wfn = scf_helper(name, use_c1=True, **kwargs). # Start timer; do_timer = kwargs.pop(""do_timer"", True); if do_timer:; core.tstart(). #; # Build kwargs for adcc; #; kwargs.pop(""molecule"", None). if ref_wfn.frzcpi()[0] > 0:; kwargs[""frozen_core""] = ref_wfn.frzcpi()[0]; if ref_wfn.frzvpi()[0] > 0:; kwargs[""frozen_virtual""] = ref_wfn.frzvpi()[0]; if core.get_option(""ADC"", ""NUM_CORE_ORBITALS""):; kwargs[""core_orbitals""] = core.get_option(""ADC"", ""NUM_CORE_ORBITALS""). scf_accuracy = max(core.get_option(""SCF"", ""E_CONVERGENCE""),; core.get_option(""SCF"", ""D_CONVERGENCE"")); if core.get_option(""ADC"", ""R_CONVERGENCE"") < 0:; kwargs[""conv_tol""] = max(100 * scf_accuracy, 1e-6); else:; kwargs[""conv_tol""] = core.get_option",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/procrouting/proc.html:113132,install,installing,113132,psi4manual/1.6.x/_modules/psi4/driver/procrouting/proc.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/procrouting/proc.html,3,['install'],"['install', 'installing']"
Deployability,"ts?. Type: boolean; Default: false. TAU_SQUARED (DCFT); DCFT (Expert) — Controls whether to compute the DCFT energy with the Tau^2 correction to Tau. Type: boolean; Default: false. TDHF_MEM_SAFETY_FACTOR (CPHF); CPHF — Memory safety factor for allocating JK. Type: double; Default: 0.75. TDM (DETCI); DETCI — Do compute the transition density? Note: only transition densities between roots of the same symmetry will be evaluated. DETCI does not compute states of different irreps within the same computation; to do this, lower the symmetry of the computation. Type: boolean; Default: false. TDM_PRINT (DETCI); DETCI — Do print the transition density?. Type: boolean; Default: false. TDM_WRITE (DETCI); DETCI — Do write the transition density?. Type: boolean; Default: false. TEST_B (OPTKING); OPTKING — Do test B matrix?. Type: boolean; Default: false. TEST_DERIVATIVE_B (OPTKING); OPTKING — Do test derivative B matrix?. Type: boolean; Default: false. THETA_POINTS (SCF); SCF — Number of colatitude grid points for sphereical potential integration. Type: integer; Default: 360. THICKNESS (SCF); SCF — Thickness (bohr) of a hard-sphere external potential. Type: double; Default: 20.0. TIKHONOW_MAX (PSIMRCC); PSIMRCC — The cycle after which Tikhonow regularization is stopped. Set to zero to allow regularization in all iterations. Type: integer; Default: 5. TIKHONOW_OMEGA (DCFT); DCFT — The shift applied to the denominator in the density cumulant update iterations. Type: double; Default: 0.0. TIKHONOW_OMEGA (PSIMRCC); PSIMRCC — The shift to apply to the denominators, {it c.f.} Taube and Bartlett, JCP, 130, 144112 (2009). Type: double; Default: 0.0. TIKHONOW_TRIPLES (PSIMRCC); PSIMRCC (Expert) — Do use Tikhonow regularization in (T) computations?. Type: boolean; Default: false. TILE_SZ (SCF); SCF (Expert) — The tile size for the distributed matrices. Type: integer; Default: 512. TPDM (DCFT); DCFT (Expert) — Controls whether to compute unrelaxed two-particle density matrix at the end of th",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/autodoc_glossary_options_c-1.html:121780,integrat,integration,121780,psi4manual/4.0b3/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_glossary_options_c-1.html,2,['integrat'],['integration']
Deployability,"tsHelper.ao_oei_deriv1(); MintsHelper.ao_oei_deriv2(); MintsHelper.ao_overlap(); MintsHelper.ao_overlap_half_deriv1(); MintsHelper.ao_potential(); MintsHelper.ao_pvp(); MintsHelper.ao_quadrupole(); MintsHelper.ao_tei_deriv1(); MintsHelper.ao_tei_deriv2(); MintsHelper.ao_traceless_quadrupole(); MintsHelper.basisset(); MintsHelper.cdsalcs(); MintsHelper.core_hamiltonian_grad(); MintsHelper.dipole_grad(); MintsHelper.electric_field(); MintsHelper.electric_field_value(); MintsHelper.electrostatic_potential_value(); MintsHelper.f12_cgtg(); MintsHelper.factory(); MintsHelper.induction_operator(); MintsHelper.integral(); MintsHelper.integrals(); MintsHelper.integrals_erf(); MintsHelper.integrals_erfc(); MintsHelper.kinetic_grad(); MintsHelper.mo_elec_dip_deriv1(); MintsHelper.mo_erf_eri(); MintsHelper.mo_eri(); MintsHelper.mo_f12(); MintsHelper.mo_f12_double_commutator(); MintsHelper.mo_f12_squared(); MintsHelper.mo_f12g12(); MintsHelper.mo_oei_deriv1(); MintsHelper.mo_oei_deriv2(); MintsHelper.mo_overlap_half_deriv1(); MintsHelper.mo_spin_eri(); MintsHelper.mo_tei_deriv1(); MintsHelper.mo_tei_deriv2(); MintsHelper.mo_transform(); MintsHelper.multipole_grad(); MintsHelper.nbf(); MintsHelper.one_electron_integrals(); MintsHelper.overlap_grad(); MintsHelper.perturb_grad(); MintsHelper.petite_list(); MintsHelper.petite_list1(); MintsHelper.play(); MintsHelper.potential_grad(); MintsHelper.set_basisset(); MintsHelper.set_print(); MintsHelper.so_angular_momentum(); MintsHelper.so_dipole(); MintsHelper.so_dkh(); MintsHelper.so_kinetic(); MintsHelper.so_nabla(); MintsHelper.so_overlap(); MintsHelper.so_potential(); MintsHelper.so_quadrupole(); MintsHelper.so_traceless_quadrupole(); MintsHelper.sobasisset(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; MintsHelper. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/api/psi4.core.MintsHelper.html:21511,update,updated,21511,psi4manual/1.8.x/api/psi4.core.MintsHelper.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.MintsHelper.html,1,['update'],['updated']
Deployability,"tsHelper.ao_oei_deriv1(); MintsHelper.ao_oei_deriv2(); MintsHelper.ao_overlap(); MintsHelper.ao_overlap_half_deriv1(); MintsHelper.ao_potential(); MintsHelper.ao_pvp(); MintsHelper.ao_quadrupole(); MintsHelper.ao_tei_deriv1(); MintsHelper.ao_tei_deriv2(); MintsHelper.ao_traceless_quadrupole(); MintsHelper.basisset(); MintsHelper.cdsalcs(); MintsHelper.core_hamiltonian_grad(); MintsHelper.dipole_grad(); MintsHelper.electric_field(); MintsHelper.electric_field_value(); MintsHelper.electrostatic_potential_value(); MintsHelper.f12_cgtg(); MintsHelper.factory(); MintsHelper.induction_operator(); MintsHelper.integral(); MintsHelper.integrals(); MintsHelper.integrals_erf(); MintsHelper.integrals_erfc(); MintsHelper.kinetic_grad(); MintsHelper.mo_elec_dip_deriv1(); MintsHelper.mo_erf_eri(); MintsHelper.mo_eri(); MintsHelper.mo_f12(); MintsHelper.mo_f12_double_commutator(); MintsHelper.mo_f12_squared(); MintsHelper.mo_f12g12(); MintsHelper.mo_oei_deriv1(); MintsHelper.mo_oei_deriv2(); MintsHelper.mo_overlap_half_deriv1(); MintsHelper.mo_spin_eri(); MintsHelper.mo_tei_deriv1(); MintsHelper.mo_tei_deriv2(); MintsHelper.mo_transform(); MintsHelper.multipole_grad(); MintsHelper.nbf(); MintsHelper.one_electron_integrals(); MintsHelper.overlap_grad(); MintsHelper.perturb_grad(); MintsHelper.petite_list(); MintsHelper.petite_list1(); MintsHelper.play(); MintsHelper.potential_grad(); MintsHelper.set_basisset(); MintsHelper.set_print(); MintsHelper.so_angular_momentum(); MintsHelper.so_dipole(); MintsHelper.so_dkh(); MintsHelper.so_kinetic(); MintsHelper.so_nabla(); MintsHelper.so_overlap(); MintsHelper.so_potential(); MintsHelper.so_quadrupole(); MintsHelper.so_traceless_quadrupole(); MintsHelper.sobasisset(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.9.1;  · . PSI4. PSI4 API: Linking C++ and Python; MintsHelper. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 08 February 2024 09:32PM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/api/psi4.core.MintsHelper.html:22079,update,updated,22079,psi4manual/1.9.x/api/psi4.core.MintsHelper.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/api/psi4.core.MintsHelper.html,1,['update'],['updated']
Deployability,"tt. psi4.driver.diatomic.anharmonicity(rvals, energies, plot_fit='', mol=None)[source]¶; Generates spectroscopic constants for a diatomic molecules.; Fits a diatomic potential energy curve using a weighted least squares approach; (c.f. https://doi.org/10.1063/1.4862157, particularly eqn. 7), locates the minimum; energy point, and then applies second order vibrational perturbation theory to obtain spectroscopic; constants. Any number of points greater than 4 may be provided, and they should bracket the minimum.; The data need not be evenly spaced, and can be provided in any order. The data are weighted such that; those closest to the minimum have highest impact.; A dictionary with the following keys, which correspond to spectroscopic constants, is returned:. Parameters:. rvals (List[float]) – The bond lengths (in Angstrom) for which energies are; provided, of length at least 5 and equal to the length of the energies array; energies (List[float]) – The energies (Eh) computed at the bond lengths in the rvals list; plot_fit (str) – A string describing where to save a plot of the harmonic and anharmonic fits, the; inputted data points, re, r0 and the first few energy levels, if matplotlib; is available. Set to ‘screen’ to generate an interactive plot on the screen instead. If a filename is; provided, the image type is determined by the extension; see matplotlib for supported file types. Return type:; Dict[str, Any]. Returns:; (dict) Keys: “re”, “r0”, “we”, “wexe”, “nu”, “ZPVE(harmonic)”, “ZPVE(anharmonic)”, “Be”, “B0”, “ae”, “De”; corresponding to the spectroscopic constants in cm-1. table of contents. Spectroscopic Constants for Diatomics; anharmonicity(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Psithon Functions: Invoking a Calculation; Spectroscopic Constants for Diatomics. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/diatomic.html:2192,update,updated,2192,psi4manual/master/diatomic.html,https://psicode.org,https://psicode.org/psi4manual/master/diatomic.html,1,['update'],['updated']
Deployability,"tting; PsiMod.get_active_molecule().fix_orientation(False); # But not this one, it always goes back to True; PsiMod.get_active_molecule().reinterpret_coordentry(True). # The last item in the list is the reference energy, return it; return energies[-1]. ## Aliases ##; frequencies = frequency; freq = frequency. # hessian to be changed later to compute force constants; [docs]def hessian(name, **kwargs):; r""""""Function to compute force constants. Presently identical to frequency().""""""; lowername = name.lower(); kwargs = kwargs_lower(kwargs); frequencies(name, **kwargs). [docs]def molden(filename):; m = PsiMod.MoldenWriter(PsiMod.reference_wavefunction()); m.write(filename). [docs]def parse_cotton_irreps(irrep):; r""""""Function to return validated Cotton ordering index from string or integer; irreducible representation *irrep*. """"""; cotton = {; 'c1': {; 'a': 1,; '1': 1; },; 'ci': {; 'ag': 1,; 'au': 2,; '1': 1,; '2': 2; },; 'c2': {; 'a': 1,; 'b': 2,; '1': 1,; '2': 2; },; 'cs': {; 'ap': 1,; 'app': 2,; '1': 1,; '2': 2; },; 'd2': {; 'a': 1,; 'b1': 2,; 'b2': 3,; 'b3': 4,; '1': 1,; '2': 2,; '3': 3,; '4': 4; },; 'c2v': {; 'a1': 1,; 'a2': 2,; 'b1': 3,; 'b2': 4,; '1': 1,; '2': 2,; '3': 3,; '4': 4; },; 'c2h': {; 'ag': 1,; 'bg': 2,; 'au': 3,; 'bu': 4,; '1': 1,; '2': 2,; '3': 3,; '4': 4,; },; 'd2h': {; 'ag': 1,; 'b1g': 2,; 'b2g': 3,; 'b3g': 4,; 'au': 5,; 'b1u': 6,; 'b2u': 7,; 'b3u': 8,; '1': 1,; '2': 2,; '3': 3,; '4': 4,; '5': 5,; '6': 6,; '7': 7,; '8': 8; }; }. point_group = PsiMod.get_active_molecule().schoenflies_symbol().lower(); irreducible_representation = str(irrep).lower(). try:; return cotton[point_group][irreducible_representation]; except KeyError:; raise ValidationError(""Irrep \'%s\' not valid for point group \'%s\'."" % (str(irrep), point_group)). Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules |; PSI4 [beta2] » ; Module code ». © Copyright 2012, Psi4 Project.; Last updated on Aug 25, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/_modules/driver.html:50042,update,updated,50042,psi4manual/4.0b2/_modules/driver.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/_modules/driver.html,1,['update'],['updated']
Deployability,"ttps://github.com/dftd4/dftd4. conda-forge::dftd4-python; import dftd4; nyi; preferred; engine=""dftd4""; https://github.com/dftd4/dftd4. (dep) conda-forge::dftd4; bin/dftd4. https://github.com/dftd4/dftd4. GCP. psi4::gcp; bin/gcp; preferred; works; gcp_engine=""gcp""; https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp/gcp_v202.tar.gz; classic. conda-forge::gcp-correction; bin/mctc-gcp; nyi; preferred; gcp_engine=""mctc-gcp""; https://github.com/grimme-lab/gcp; mctc. Installation¶; Binary. There are two implementations of DFTD3; see Empirical dispersion correction packages . The newer; “s-dftd3” one is preferred, while the older “classic” one will work for the immediate future.; PSI4 will automatically select whichever is available.; DFTD3 is available as a conda package for Linux and macOS and Windows.; If using the Psi4conda installer, DFTD3 has already been installed alongside.; If using the PSI4 conda package, the classic dftd3 conda package can; be obtained through conda install dftd3 -c psi4 or the newer implementation; through conda install dftd3-python -c conda-forge.; If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; the dftd3 executable can be obtained through conda install dftd3 -c psi4; or conda install dftd3-python -c conda-forge.; To remove a conda installation, conda remove dftd3 or conda remove dftd3-python. Source. If using PSI4 built from source and you want to build DFTD3 from; from source also,; follow the instructions provided with the source; (essentially, download the freely available tarball, unpack the source,; edit the Makefile to select a; Fortran compiler, and run make). From version 3.1.0 onwards, DFTD3 can; be used as-is; for earlier versions, patches are available:; psi4/psi4/share/psi4/scripts/patch_grimme_dftd3.3.0.2. To be used by PSI4, the classic program binary (dftd3) must be; found in your PATH or the s-dftd3 module in your PYTHONPATH; so QCEngine",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/dftd3.html:1834,install,install,1834,psi4manual/1.7.x/dftd3.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/dftd3.html,4,['install'],['install']
Deployability,"ttps://github.com/psi4/psi4meta/blob/master/.github/workflows/Docker.yml; matrix.cfg list for changed Python version and to label the tags with current Psi4 from c-f.; Commit environment.yaml or Docker.yml to trigger GHA Docker builds.; Check at DockerHub for new images. Generate download page for psicode.org¶. Be in local clone of repository https://github.com/psi4/psicode-hugo-website .; Copy and edit a new file akin to content/installs/v182.md. Add it to the git index. Note the edition string v182 in frontmatter for this and future filenames.; Don’t postdate the date string in frontmatter or it won’t render.; Ultimately, make sure the aliases:\n  - /installs/latest/ lines are added to this new file; and removed from the previous latest file, but this can wait until the installer page has been tested. Copy and edit a new file akin to data/installs/v182.yaml. Add it to the git index. Glance through the menu and notes content to make sure they’re up-to-date. This file determines; the structure of the install page.; Add or remove python versions and architectures if necessary.; Every couple years, update the default python version in datakey: python/selected and; in optsHandler at the end.; Always adjust the datakey: branch/stable block.; For releases, adjust the datakey: branch/previous and nightly blocks. Enter the scripts/ directory. If the previous release hasn’t had a snapshot saved, copy; install-generator.py into a version-labeled file, and add it to the git index.; Edit scripts/install-generator.py. Primarily, edit edition at the top.; Also, edit other arrays (stuff above ## Outputs) or messages (logic below ## Outputs); that should change. Run the install-generator.py in place. It will dump two new files, e.g.,; data/installs/cmd/{edition}.json and data/installs/dlbtn/{edition}.json. Add these to the; index (no need to inspect them).; The installer page is now ready for inspection. Run hugo server --watch=false and view in; browser at http://localhost:1313/ .",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/manage_release.html:17551,install,install,17551,psi4manual/1.9.x/manage_release.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/manage_release.html,2,['install'],['install']
Deployability,"tty dependent on the reference geometry being last (as it is now); print ' %d displacements needed ...' % (ndisp),; energies = []. # S/R: Write instructions for sow/reap procedure to output file and reap input file; if (opt_mode.lower() == 'sow'):; instructionsO = """"""\n The optimization sow/reap procedure has been selected through mode='sow'. In addition\n""""""; instructionsO += """""" to this output file (which contains no quantum chemical calculations), this job\n""""""; instructionsO += """""" has produced a number of input files (OPT-%s-*.in) for individual components\n"""""" % (str(opt_iter)); instructionsO += """""" and a single input file (OPT-master.in) with an optimize(mode='reap') command.\n""""""; instructionsO += """""" These files may look very peculiar since they contain processed and pickled python\n""""""; instructionsO += """""" rather than normal input. Follow the instructions in OPT-master.in to continue.\n\n""""""; instructionsO += """""" Alternatively, a single-job execution of the gradient may be accessed through\n""""""; instructionsO += """""" the optimization wrapper option mode='continuous'.\n\n""""""; PsiMod.print_out(instructionsO). instructionsM = """"""\n# Follow the instructions below to carry out this optimization cycle.\n#\n""""""; instructionsM += """"""# (1) Run all of the OPT-%s-*.in input files on any variety of computer architecture.\n"""""" % (str(opt_iter)); instructionsM += """"""# The output file names must be as given below.\n#\n""""""; for rgt in range(ndisp):; pre = 'OPT-' + str(opt_iter) + '-' + str(rgt + 1); instructionsM += """"""# psi4 -i %-27s -o %-27s\n"""""" % (pre + '.in', pre + '.out'); instructionsM += """"""#\n# (2) Gather all the resulting output files in a directory. Place input file\n""""""; instructionsM += """"""# OPT-master.in into that directory and run it. The job will be minimal in\n""""""; instructionsM += """"""# length and give summary results for the gradient step in its output file.\n#\n""""""; if opt_iter == 1:; instructionsM += """"""# psi4 -i %-27s -o %-27s\n#\n"""""" % ('OPT-master.in",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/_modules/driver.html:24920,continuous,continuous,24920,psi4manual/4.0b2/_modules/driver.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/_modules/driver.html,1,['continuous'],['continuous']
Deployability,"tual orbitals. Multireference Dimensions¶; A orbital diagram of the nomenclature used for CI and MCSCF calculations.; Diagrammatically:; -----------------------------------------------; CI | RAS | CAS; -----------------------------------------------; | frozen_uocc | frozen_uocc; dropped_uocc | rstr_uocc | rstr_uocc; -----------------------------------------------; | RAS IV |; | RAS III |; active | | active; | RAS II |; | RAS I |; -----------------------------------------------; dropped_docc | rstr_docc | rstr_docc; | frozen_docc | frozen_dcc; -----------------------------------------------. Notation:. uocc — Unoccupied orbitals.; active — Variable occupation orbitals.; socc — Singly occupied orbitals.; docc — Doubly occupied orbitals. Orbital spaces:. frozen_uocc — Absolutely frozen virtual orbital.; rstr_uocc — Can have rotations, no excitations into.; dropped_uocc — rstr_uocc + frozen_uocc. —– end CI active —–. RAS IV — uocc, limited number of excitations into.; RAS III — uocc, limited number of excitations into.; RAS II — docc/socc/uocc, equivalent to active in CAS.; RAS I — docc/socc/uocc, limited excitations out of. —– start CI active —–. dropped_docc — rstr_docc + frozen_docc; rstr_docc — Can have rotations, no excitations from.; frozen_docc — Absolutely frozen core orbital. Orbitals are sorted by space, irrep, eigenvalue. table of contents. Linear Algebra in PSI4; How to call BLAS & LAPACK in PSI4; BLAS Wrappers; Important BLAS Routines; LAPACK Wrappers; Important Lapack Routines. How to use low-level BLAS/LAPACK with psi4.core.Matrix; How to name orbital bases (e.g., AO & SO); How to name orbital dimensions; How to name orbital spaces (e.g., docc); Multireference Dimensions. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Programming with the Core Libraries; Linear Algebra in PSI4. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/prog_blas.html:15243,update,updated,15243,psi4manual/1.7.x/prog_blas.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/prog_blas.html,1,['update'],['updated']
Deployability,"tual space for QCISD/CCSD and (T)?. Type: boolean; Default: false. OCC_TOLERANCE¶. Cutoff for occupation of MP2 virtual NOs in FNO-QCISD/CCSD(T). Virtual NOs with occupations less than OCC_TOLERANCE will be discarded. This option is only used if NAT_ORBS = true. Type: conv double; Default: 1.0e-6. TRIPLES_LOW_MEMORY¶. Do use low memory option for triples contribution? Note that this option is enabled automatically if the memory requirements of the conventional algorithm would exceed the available resources. The low memory algorithm is faster in general and has been turned on by default starting September 2020. Type: boolean; Default: true. CC_TIMINGS¶. Do time each cc diagram?. Type: boolean; Default: false. DF_BASIS_CC¶. Auxilliary basis for df-ccsd(t). Type: string; Possible Values: basis string; Default: No Default. CHOLESKY_TOLERANCE¶. tolerance for Cholesky decomposition of the ERI tensor. Type: conv double; Default: 1.0e-4. CEPA_NO_SINGLES¶. Flag to exclude singly excited configurations from a coupled-pair computation. Type: boolean; Default: false. DIPMOM¶. Compute the dipole moment? Note that dipole moments are only available in the FNOCC module for the ACPF, AQCC, CISD, and CEPA(0) methods. Type: boolean; Default: false. Advanced FNOCC Keywords¶. SCS_MP2¶. Do SCS-MP2?. Type: boolean; Default: false. MP2_SCALE_OS¶. Opposite-spin scaling factor for SCS-MP2. Type: double; Default: 1.20. MP2_SCALE_SS¶. Same-spin scaling factor for SCS-MP2. Type: double; Default: 1.0. SCS_CCSD¶. Do SCS-CCSD?. Type: boolean; Default: false. CC_SCALE_OS¶. Oppposite-spin scaling factor for SCS-CCSD. Type: double; Default: 1.27. CC_SCALE_SS¶. Same-spin scaling factor for SCS-CCSD. Type: double; Default: 1.13. RUN_MP2¶. do only evaluate mp2 energy?. Type: boolean; Default: false. RUN_MP3¶. do only evaluate mp3 energy?. Type: boolean; Default: false. RUN_MP4¶. do only evaluate mp4 energy?. Type: boolean; Default: false. RUN_CCSD¶. do ccsd rather than qcisd?. Type: boolean; Default: fal",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/fnocc-1.html:17480,configurat,configurations,17480,psi4manual/1.4.0/fnocc-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/fnocc-1.html,9,['configurat'],['configurations']
Deployability,"tum chemistry method to evaluate (e.g., B3LYP, MP2, …). Validated by:. set_method. field molecule: Any [Required]¶; The molecule to use in the computation. field owner_group: Optional[str] = None¶; group in the chown sense. field priority: str = 1¶; The priority of a Task; higher priority will be pulled first. {high:2, normal:1, low:0}. field protocols: Union[AtomicResultProtocols, Dict[str, Any], None] = {'stdout': True}¶; Output modifications. field result: Any [Optional]¶; AtomicResult return. field result_id: Optional[str] = None¶; The optional ID for the computation. field tag: str = '*'¶; The tags to pass along to compute managers. compute(client=None)[source]¶; Run quantum chemistry. Parameters:; client (qcportal.client.FractalClient | None) – . get_results(client=None)[source]¶; Return results as Atomic-flavored QCSchema. Parameters:; client (qcportal.FractalClient | None) – . Return type:; AtomicResult. plan()[source]¶; Form QCSchema input from member data. Return type:; AtomicInput. validator set_basis  »  psi4.driver.AtomicComputer.basis[source]¶. validator set_keywords  »  psi4.driver.AtomicComputer.keywords[source]¶. validator set_method  »  psi4.driver.AtomicComputer.method[source]¶. table of contents. AtomicComputer; AtomicComputer; AtomicComputer.basis; AtomicComputer.computed; AtomicComputer.driver; AtomicComputer.keywords; AtomicComputer.method; AtomicComputer.molecule; AtomicComputer.owner_group; AtomicComputer.priority; AtomicComputer.protocols; AtomicComputer.result; AtomicComputer.result_id; AtomicComputer.tag; AtomicComputer.compute(); AtomicComputer.get_results(); AtomicComputer.plan(); AtomicComputer.set_basis; AtomicComputer.set_keywords; AtomicComputer.set_method. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; AtomicComputer. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.AtomicComputer.html:7448,update,updated,7448,psi4manual/1.8.x/api/psi4.driver.AtomicComputer.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.AtomicComputer.html,1,['update'],['updated']
Deployability,"tum settings are available here; https://github.com/psi4/psi4/blob/master/external/upstream/libint2/CMakeLists.txt; . How to see what build configuration options are available¶; CMake doesn’t provide a summary for this (unless you want to try the CMake; GUI, which the developers have never looked at). However, the top half of; the main CMakeLists.txt is a passable summary:; LANGUAGES C CXX); set(psi4_URL ""http://www.psicode.org/""); set(psi4_EMAIL ""psi4aiqc+cmake@gmail.com""); set(psi4_LICENSE ""GNU Lesser General Public License, version 3 (LGPL-3.0)""); set(psi4_DESCRIPTION ""Open-Source Quantum Chemistry""). list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake). ################ Options: Overview and Not Otherwise Mentioned ###############. # <<< CMake build overview >>>; #; # >>> ls; # external/ COPYING psi4/ tests/ ...; # >>> cmake -S. -Bobjdir -DCMAKE_INSTALL_PREFIX=/path/to/install-psi4 ...; # ...; # -- Generating done; # -- Build files have been written to: /current/dir/objdir; # >>> cmake --build objdir --target install -j`getconf _NPROCESSORS_ONLN`. # <<< Required build dependencies that Psi4 can't build itself >>>; #; # - CMake (e.g., `conda install cmake`); # - C++ and C compilers (C++14 compliant); # - BLAS/LAPACK (also runtime; e.g., `conda install mkl-devel`); # - Python (also runtime; interpreter and headers; e.g., `conda install python`); # - NumPy (also runtime; avoidable at buildtime if gau2grid pre-built; e.g., `conda install numpy`); # - networkx >=2.4 (runtime only; e.g., `conda install networkx`); # - pint (runtime only; e.g., `conda install pint -c conda-forge`); # - pydantic >=1.0 (runtime only; e.g., `conda install pydantic -c conda-forge`); # - msgpack-python (runtime only; e.g., `conda install msgpack-python`); # - mpfr (for Libint2; e.g., `conda install mpfr`)); # - Eigen (for Libint2; e.g., `conda install eigen`). # These three ""### Options ###"" sections contain useful CMake variables for build configuration. # <<< Compilers and fla",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/build_planning-1.html:13774,install,install,13774,psi4manual/1.4.0/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/build_planning-1.html,4,['install'],['install']
Deployability,"tureRequiredError.install_instructions.format(module_args=module_cmake_args); self.message = '\nPsiException: {}\n\n'.format(msg); core.print_out(self.message). [docs]; def sanitize_method(name: str) -> str:; """"""Replace characters in method name so that suitable for function name or Sphinx table anchor; (both as-is) or HTML table link (replace underscore in returned string by dash). """"""; return name.lower(; ).replace(""("", ""_pr"" # ccsd(t); ).replace("")"", ""_pr""; ).replace(""."", ""p"" # mp2.5; ).replace(""+"", ""p"" # ccsd+t(ccsd); ).replace(""-"", """" # ccsdt-1a; ). [docs]; def docs_table_link(name: str, mode: str) -> str:; """"""Compose a link to *mode* documentation table.; For modes {""summary"", ""details""}, link will be anchored at the table row for method *name*. (Method row not guaranteed to exist.); For other modes, link will be to table in general. """"""; DOCS_BASE = ""https://psicode.org/psi4manual/master/"". if mode == ""summary"":; anchor = ""introduction.html#ss""; elif mode == ""details"":; anchor = ""capabilities.html#dd""; elif mode == ""ccenergy"":; anchor = ""cc.html#table-ccenergy-stdsuite""; elif mode == ""dfmp2"":; anchor = ""dfmp2.html#table-dfmp2-stdsuite""; elif mode == ""fnocc"":; anchor = ""fnocc.html#table-fnocc-stdsuite""; elif mode == ""occ_nonoo"":; anchor = ""occ.html#table-occ-stdsuite-nonoo""; elif mode == ""occ_oo"":; anchor = ""occ.html#table-occ-stdsuite-oo""; elif mode == ""scf"":; anchor = ""dft.html#table-scf-stdsuite""; else:; raise KeyError(""invalid table mode""). # Sphinx reST anchors with underscore build into HTML docs with dash; sanitized_method = sanitize_method(name).replace(""_"", ""-""). if mode in [""summary"", ""details""]:; return f""{DOCS_BASE}{anchor}-{sanitized_method}""; else:; return f""{DOCS_BASE}{anchor}"". «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .  · ; 1.10a1.dev61;  · . PSI4. Module code; psi4.driver.p4util.exceptions. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/_modules/psi4/driver/p4util/exceptions.html:16364,update,updated,16364,psi4manual/master/_modules/psi4/driver/p4util/exceptions.html,https://psicode.org,https://psicode.org/psi4manual/master/_modules/psi4/driver/p4util/exceptions.html,1,['update'],['updated']
Deployability,"turn on keyword FLEXIBLE_G_CONVERGENCE. Output¶; The progress of a geometry optimization can be monitored by grepping the output file for the; tilde character (~). This produces a table like the one below that shows; for each iteration the value for each of the five quantities and whether the criterion; is active and fulfilled (*), active and unfulfilled ( ), or inactive (o).; --------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------- ~; Convergence Criteria 1.00e-06 * 3.00e-04 * o 1.20e-03 * o ~; --------------------------------------------------------------------------------------------- ~; 1 -38.91591820 -3.89e+01 6.91e-02 5.72e-02 o 1.42e-01 1.19e-01 o ~; 2 -38.92529543 -9.38e-03 6.21e-03 3.91e-03 o 2.00e-02 1.18e-02 o ~; 3 -38.92540669 -1.11e-04 4.04e-03 2.46e-03 o 3.63e-02 2.12e-02 o ~; 4 -38.92548668 -8.00e-05 2.30e-04 * 1.92e-04 o 1.99e-03 1.17e-03 o ~; 5 -38.92548698 -2.98e-07 * 3.95e-05 * 3.35e-05 o 1.37e-04 * 1.05e-04 o ~. The full list of keywords for optking is provided in Appendix OPTKING.; Information on the Psithon function that drives geometry optimizations is provided; at optimize(). Table Of Contents. Geometry Optimization; Basic Keywords; OPT_TYPE; STEP_TYPE; GEOM_MAXITER; G_CONVERGENCE; FULL_HESS_EVERY; INTCOS_GENERATE_EXIT. Optimizing Minima; Hessian; Transition States, Reaction Paths, and Constrained Optimizations; Convergence Criteria; Output. Previous topic; CI: Configuration Interaction; Next topic; Evaluation of One-Electron Properties; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Theoretical Methods: SCF to FCI ». © Copyright 2012, The Psi4 Project.; Last updated on Oct 16, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/optking-1.html:11349,update,updated,11349,psi4manual/4.0b3/optking-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/optking-1.html,2,['update'],['updated']
Deployability,"turn scf_wfn. def run_dft_gradient(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; a density-functional-theory gradient calculation. """"""; optstash = p4util.OptionsState(; ['SCF', 'DFT_FUNCTIONAL'],; ['SCF', 'REFERENCE'],; ['SCF', 'SCF_TYPE']). # Alter default algorithm; if not core.has_option_changed('SCF', 'SCF_TYPE'):; core.set_local_option('SCF', 'SCF_TYPE', 'DF'). core.set_local_option('SCF', 'DFT_FUNCTIONAL', name.upper()). user_ref = core.get_option('SCF', 'REFERENCE'); if (user_ref == 'RHF'):; core.set_local_option('SCF', 'REFERENCE', 'RKS'); elif (user_ref == 'UHF'):; core.set_local_option('SCF', 'REFERENCE', 'UKS'); elif (user_ref == 'ROHF'):; raise ValidationError('ROHF reference for DFT is not available.'); elif (user_ref == 'CUHF'):; raise ValidationError('CUHF reference for DFT is not available.'). wfn = run_scf_gradient(name, **kwargs). optstash.restore(); return wfn. def run_detci(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; a configuration interaction calculation, namely FCI,; CIn, MPn, and ZAPTn. """"""; optstash = p4util.OptionsState(; ['DETCI', 'WFN'],; ['DETCI', 'MAX_NUM_VECS'],; ['DETCI', 'MPN_ORDER_SAVE'],; ['DETCI', 'MPN'],; ['DETCI', 'FCI'],; ['DETCI', 'EX_LEVEL']). if core.get_option('DETCI', 'REFERENCE') not in ['RHF', 'ROHF']:; raise ValidationError('Reference %s for DETCI is not available.' %; core.get_option('DETCI', 'REFERENCE')). if name == 'zapt':; core.set_local_option('DETCI', 'WFN', 'ZAPTN'); level = kwargs['level']; maxnvect = int((level + 1) / 2) + (level + 1) % 2; core.set_local_option('DETCI', 'MAX_NUM_VECS', maxnvect); if (level + 1) % 2:; core.set_local_option('DETCI', 'MPN_ORDER_SAVE', 2); else:; core.set_local_option('DETCI', 'MPN_ORDER_SAVE', 1); elif name in ['mp', 'mp2', 'mp3', 'mp4']:; core.set_local_option('DETCI', 'WFN', 'DETCI'); core.set_local_option('DETCI', 'MPN', 'TRUE'); if name == 'mp2':; level = 2; elif name == 'mp3':; level = 3; elif name == 'mp4':; level = 4;",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/procrouting/proc.html:86290,configurat,configuration,86290,psi4manual/1.1.0/_modules/psi4/driver/procrouting/proc.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/procrouting/proc.html,1,['configurat'],['configuration']
Deployability,"turn them in the customary Psi4 driver interface: (e/g/h, wfn). Parameters:. return_wfn – Whether to additionally return the dummy Wavefunction; calculation result as the second element of a tuple. Contents are:. undisplaced molecule; compute basis if simple, else dummy basis def2-svp; e/g/h member data; QCVariables; module. client (qcportal.FractalClient | None). Returns:. ret – Gradient or Hessian according to self.driver.; wfn – Wavefunction described above when return_wfn specified. Return type:; float | Matrix | Tuple[float | Matrix, Wavefunction]. get_results(client=None)[source]¶; Return results as FiniteDifference-flavored QCSchema. Parameters:; client (qcportal.FractalClient | None). Return type:; AtomicResult. plan()[source]¶. validator set_driver  »  driver[source]¶. validator set_molecule  »  molecule[source]¶. table of contents. Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); Visualization of Normal Modes; Molden Interface Keywords; NORMAL_MODES_WRITE; WRITER_FILE_LABEL. psi4.driver.qcdb.vib Module; Functions. API; FiniteDifferenceComputer; FiniteDifferenceComputer.driver; FiniteDifferenceComputer.findifrec; FiniteDifferenceComputer.metameta; FiniteDifferenceComputer.method; FiniteDifferenceComputer.molecule; FiniteDifferenceComputer.task_list; FiniteDifferenceComputer.computer; FiniteDifferenceComputer.build_tasks(); FiniteDifferenceComputer.compute(); FiniteDifferenceComputer.get_psi_results(); FiniteDifferenceComputer.get_results(); FiniteDifferenceComputer.plan(); FiniteDifferenceComputer.set_driver; FiniteDifferenceComputer.set_molecule. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Psithon Functions: Invoking a Calculation; Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(). © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/freq.html:11896,update,updated,11896,psi4manual/master/freq.html,https://psicode.org,https://psicode.org/psi4manual/master/freq.html,1,['update'],['updated']
Deployability,"turn_wfn=True); >>> print wfn.frequencies().get(0, 0); >>> wfn.hessian().print_out(). >>> # [3] Frequency calculation at default conditions and Hessian reuse at STP; >>> E, wfn = freq('mp2', return_wfn=True); >>> set t 273.15; >>> set p 100000; >>> thermo(wfn, wfn.frequencies()). >>> # [4] Opt+Freq, skipping the gradient recalc at the start of the Hessian; >>> e, wfn = optimize('hf', return_wfn=True); >>> frequencies('hf', ref_gradient=wfn.gradient()). """"""; kwargs = p4util.kwargs_lower(kwargs). # Bounce (someday) if name is function; if hasattr(name, '__call__'):; raise ValidationError(""Frequency: Cannot use custom function""). lowername = name.lower(). if ""/"" in lowername:; return driver_cbs._cbs_gufunc(frequency, name, ptype='frequency', **kwargs). if kwargs.get('bsse_type', None) is not None:; raise ValdiationError(""Frequency: Does not currently support 'bsse_type' arguements""). return_wfn = kwargs.pop('return_wfn', False). # are we in sow/reap mode?; freq_mode = kwargs.get('mode', 'continuous').lower(); if freq_mode not in ['continuous', 'sow', 'reap']:; raise ValidationError(""""""Frequency execution mode '%s' not valid."""""" % (freq_mode)). # Make sure the molecule the user provided is the active one; molecule = kwargs.pop('molecule', core.get_active_molecule()); molecule.update_geometry(). # Compute the hessian; H, wfn = hessian(lowername, return_wfn=True, molecule=molecule, **kwargs). # S/R: Quit after getting new displacements; if freq_mode == 'sow':; return 0.0. # Project final frequencies?; translations_projection_sound, rotations_projection_sound = _energy_is_invariant(wfn.gradient()); project_trans = kwargs.get('project_trans', translations_projection_sound); project_rot = kwargs.get('project_rot', rotations_projection_sound). irrep = kwargs.get('irrep', None); vibinfo = vibanal_wfn(wfn, irrep=irrep, project_trans=project_trans, project_rot=project_rot); vibonly = qcdb.vib.filter_nonvib(vibinfo); wfn.set_frequencies(core.Vector.from_array(qcdb.vib.filter_omeg",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/_modules/psi4/driver/driver.html:88834,continuous,continuous,88834,psi4manual/1.2.1/_modules/psi4/driver/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/_modules/psi4/driver/driver.html,1,['continuous'],['continuous']
Deployability,"turns petite list which transforms AO basis functions to SO’s, setting argument to true is for Cartesian basis, false is for Spherical Harmonic basis. play(self: psi4.core.MintsHelper) → None¶; play function. potential_grad(self: psi4.core.MintsHelper, arg0: psi4.core.Matrix) → psi4.core.Matrix¶; First nuclear derivative potential integrals. set_basisset(self: psi4.core.MintsHelper, label: str, basis: psi4.core.BasisSet) → None¶; Sets a basis set. set_print(self: psi4.core.MintsHelper, arg0: int) → None¶; Sets the print level. so_angular_momentum(self: psi4.core.MintsHelper) → List[psi4.core.Matrix]¶; Vector SO angular momentum integrals. so_dipole(self: psi4.core.MintsHelper) → List[psi4.core.Matrix]¶; Vector SO dipole integrals. so_dkh(self: psi4.core.MintsHelper, arg0: int) → psi4.core.Matrix¶; SO dkh integrals. so_ecp(self: psi4.core.MintsHelper) → psi4.core.Matrix¶; SO basis effective core potential integrals. so_kinetic(self: psi4.core.MintsHelper, include_perturbations: bool = True) → psi4.core.Matrix¶; SO basis kinetic integrals. so_nabla(self: psi4.core.MintsHelper) → List[psi4.core.Matrix]¶; Vector SO nabla integrals. so_overlap(self: psi4.core.MintsHelper, include_perturbations: bool = True) → psi4.core.Matrix¶; SO basis overlap integrals. so_potential(self: psi4.core.MintsHelper, include_perturbations: bool = True) → psi4.core.Matrix¶; SO basis potential integrals. so_quadrupole(self: psi4.core.MintsHelper) → List[psi4.core.Matrix]¶; Vector SO quadrupole integrals. so_traceless_quadrupole(self: psi4.core.MintsHelper) → List[psi4.core.Matrix]¶; Vector SO traceless quadrupole integrals. sobasisset(self: psi4.core.MintsHelper) → psi4.core.SOBasisSet¶; Returns the SO basis set being used. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; MintsHelper. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/api/psi4.core.MintsHelper.html:19685,update,updated,19685,psi4manual/1.7.x/api/psi4.core.MintsHelper.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.MintsHelper.html,1,['update'],['updated']
Deployability,"turns the degenercy of the irrep. group(*args, **kwargs)¶; Overloaded function. group(self: psi4.core.CorrelationTable) -> psi4.core.PointGroup. Returns higher order point group. group(self: psi4.core.CorrelationTable, arg0: int, arg1: int) -> int. Returns the higher order point group. n(self: psi4.core.CorrelationTable) → int¶; Returns the number of irreps in high order group. ngamma(self: psi4.core.CorrelationTable, arg0: int) → int¶; Returns the number of irreps in the low order group that an irrep from the high order group can be reduced to. subdegen(self: psi4.core.CorrelationTable, arg0: int) → int¶; Returns the degeneracy of the subgroup irrep. subgroup(self: psi4.core.CorrelationTable) → psi4.core.PointGroup¶; Returns lower order pointgroup. subn(self: psi4.core.CorrelationTable) → int¶; Returns number of irreps in subgroup. degen(self: psi4.core.CorrelationTable, arg0: int) → int; Returns the degenercy of the irrep. group(*args, **kwargs); Overloaded function. group(self: psi4.core.CorrelationTable) -> psi4.core.PointGroup. Returns higher order point group. group(self: psi4.core.CorrelationTable, arg0: int, arg1: int) -> int. Returns the higher order point group. n(self: psi4.core.CorrelationTable) → int; Returns the number of irreps in high order group. ngamma(self: psi4.core.CorrelationTable, arg0: int) → int; Returns the number of irreps in the low order group that an irrep from the high order group can be reduced to. subdegen(self: psi4.core.CorrelationTable, arg0: int) → int; Returns the degeneracy of the subgroup irrep. subgroup(self: psi4.core.CorrelationTable) → psi4.core.PointGroup; Returns lower order pointgroup. subn(self: psi4.core.CorrelationTable) → int; Returns number of irreps in subgroup. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 July 2018 04:21AM.; Created using Sphinx 1.7.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/api/psi4.core.correlationtable.html:2757,update,updated,2757,psi4manual/1.2.1/api/psi4.core.correlationtable.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/api/psi4.core.correlationtable.html,1,['update'],['updated']
Deployability,"ty cumulant is; converged, the second set of microiterations is performed for the; self-consistent update of the orbitals with the fixed density cumulant. Each; macroiteration is completed by performing the orbital transformation of the; integrals. As in the simultaneous algorithm, the DIIS; extrapolation is used to accelerate convergence. Two-step algorithm is; only available for the DC-06 and DC-12 methods. QCIn the quadratically-convergent algorithm, the; orbital and cumulant update equations are solved using the Newton-Raphson; method. Each macroiteration of the quadratically-convergent algorithm consists; of a single Newton-Raphson update followed by the orbital transformation; of the integrals. The solution of the Newton-Raphson equations is performed; iteratively using the preconditioned conjugate gradients method, where only the; product of the electronic Hessian with the step vector is computed for; efficiency. By default, the electronic Hessian is build for both the cumulant and orbital; updates and both updates are performed simultaneously. Setting the QC_TYPE; option to TWOSTEP will perform the Newton-Raphson update only for the orbitals,; while the equations for the cumulant will be solved using a standard Jacobi update.; If requested by the user (set QC_COUPLING to TRUE), the electronic Hessian can include; matrix elements that couple the orbitals and the density cumulant.; The computation of these coupling elements increases; the cost of the macroiteration, but usually leads to faster convergence and is; recommended for open-shell systems.; It is important to note that the quadratically-convergent algorithm is not yet fully; optimized and often converges slowly when the RMS of the cumulant or; the orbital gradient is below \(10^{-7}\). The choice of the iterative algorithm can significantly affect the cost of the; energy computation. While the two-step algorithm requires a small number of; disk-intensive \({\cal O}(N^5)\) integral transformations, the",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/dct-1.html:9754,update,updates,9754,psi4manual/1.4.0/dct-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct-1.html,18,['update'],['updates']
Deployability,"type. Type: string; Default: SCF. WFN (DETCI); DETCI (Expert) — Wavefunction type. This should be set automatically from the calling Psithon function. Type: string; Possible Values: DETCI, CI, ZAPTN, DETCAS, CASSCF, RASSCF; Default: DETCI. WFN (GLOBALS); GLOBALS (Expert) — Wavefunction type. Type: string; Default: SCF. WFN (SCF); SCF (Expert) — Wavefunction type. Type: string; Possible Values: SCF; Default: SCF. WFN_SYM (MCSCF); MCSCF — The symmetry of the SCF wavefunction. Type: string; Default: 1. WFN_SYM (PSIMRCC); PSIMRCC — The symmetry of the target wavefunction, specified either by Schönflies symbol, or irrep number (in Cotton ordering). Type: string; Default: 1. WFN_TYPE (DFOCC); DFOCC — Type of the wavefunction. Type: string; Default: DF-OMP2. WFN_TYPE (OCC); OCC — Type of the wavefunction. Type: string; Possible Values: OMP2, OMP3, OCEPA, OMP2.5; Default: OMP2. WRITE_NOS (CCDENSITY); CCDENSITY — Do write natural orbitals (molden). Type: boolean; Default: false. WRITER_FILE_LABEL (GLOBALS); GLOBALS — Base filename for text files written by PSI, such as the MOLDEN output file, the Hessian file, the internal coordinate file, etc. Use the add_str_i function to make this string case sensitive. Type: string; Default: No Default. XI (CCDENSITY); CCDENSITY — Do compute Xi?. Type: boolean; Default: false. XI_CONNECT (CCDENSITY); CCDENSITY (Expert) — Do require \(\bar{H}\) and \(R\) to be connected?. Type: boolean; Default: false. ZERO_INTERNAL_AMPS (PSIMRCC); PSIMRCC — Do zero the internal amplitudes, i.e., those that map reference determinants onto each other?. Type: boolean; Default: true. ZETA (CCDENSITY); CCDENSITY — Do use zeta?. Type: boolean; Default: false. ZETA (CCLAMBDA); CCLAMBDA — Do use zeta?. Type: boolean; Default: false. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Appendices. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/autodoc_glossary_options_c-1.html:222333,update,updated,222333,psi4manual/1.3.2/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/autodoc_glossary_options_c-1.html,2,['update'],['updated']
Deployability,"type=0); gcp_part = gcp.run_gcp(molecule, self.alias.lower(), verbose=False, dertype=0); return dashd_part + gcp_part; else:; return dftd3.run_dftd3(; molecule,; dashlvl=self.dtype.lower().replace('-', ''),; dashparam=self.dash_params,; verbose=False,; dertype=0); else:; return self.disp.compute_energy(molecule). [docs] def compute_gradient(self, molecule):; if self.disp_type == 'gr':; if self.alias in ['hf3c', 'pbeh3c']:; dashd_part = dftd3.run_dftd3(; molecule,; dashlvl=self.dtype.lower().replace('-', ''),; dashparam=self.dash_params,; verbose=False,; dertype=1); gcp_part = gcp.run_gcp(molecule, self.alias.lower(), verbose=False, dertype=1); dashd_part.add(gcp_part); return dashd_part; else:; return dftd3.run_dftd3(; molecule,; dashlvl=self.dtype.lower().replace('-', ''),; dashparam=self.dash_params,; verbose=False,; dertype=1); else:; return self.disp.compute_gradient(molecule). [docs] def compute_hessian(self, molecule):; """"""; #magic (if magic was easy); """""". optstash = p4util.OptionsState(['PRINT']); core.set_global_option('PRINT', 0). core.print_out(""\n\n Analytical Dispersion Hessians are not supported by dftd3 or gcp.\n""); core.print_out("" Computing the Hessian through finite difference of gradients.\n\n""). # Setup the molecule; molclone = molecule.clone(); molclone.reinterpret_coordentry(False); molclone.fix_orientation(True); molclone.fix_com(True). # Record undisplaced symmetry for projection of diplaced point groups; core.set_parent_symmetry(molecule.schoenflies_symbol()). gradients = []; for geom in core.fd_geoms_freq_1(molecule, -1):; molclone.set_geometry(geom); molclone.update_geometry(); gradients.append(self.compute_gradient(molclone)). H = core.fd_freq_1(molecule, gradients, -1); # H.print_out(); optstash.restore(); return H. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .  · ; 1.2.1;  · . PSI4. Module code. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 July 2018 04:21AM.; Created using Sphinx 1.7.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/_modules/psi4/driver/procrouting/empirical_dispersion.html:10373,update,updated,10373,psi4manual/1.2.1/_modules/psi4/driver/procrouting/empirical_dispersion.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/_modules/psi4/driver/procrouting/empirical_dispersion.html,1,['update'],['updated']
Deployability,"types not tested and identified will give *wrong* answers. Consider this your warning.""); endif(). ############################ Options: Build How? #############################; include(psi4OptionsTools); option_with_print(BUILD_SHARED_LIBS ""Build internally built Psi4 add-on libraries as shared, not static"" OFF); option_with_print(ENABLE_OPENMP ""Enables OpenMP parallelization"" ON); option_with_print(ENABLE_AUTO_BLAS ""Enables CMake to auto-detect BLAS"" ON); option_with_print(ENABLE_AUTO_LAPACK ""Enables CMake to auto-detect LAPACK"" ON); option_with_print(ENABLE_PLUGIN_TESTING ""Test the plugin templates build and run"" OFF); option_with_print(ENABLE_CYTHONIZE ""Compile each python file rather than plaintext (requires cython) !experimental!"" OFF). Note that external projects will have their own sets of build; configuration options. Only the most-common user knobs of those are; mentioned above. How to install elsewhere than /usr/local/psi4¶; The installation directory is the filesystem location for the executable; script, the Python module, basis set data, and other administrative files.; Unless using the conda package, which is relocatable, the installation; directory must be specified with CMake variable CMAKE_INSTALL_PREFIX; before compiling. Build with Specific Install Directory; cmake -DCMAKE_INSTALL_PREFIX=/nfs/common/software/psi4. Relevant CMake Options:; CMAKE_INSTALL_PREFIX=PATH # Location to which Psi4 and internally built; # add-ons are installed (default: /usr/local/psi4). Note; It’s not guaranteed, but if, in a pinch, you need to install a; built Psi4 to a location not configured by CMAKE_INSTALL_PREFIX,; recursively copy the folders under objdir/stage/prefix to; the desired location, chown them if needed, edit the shebang in; bin/psi4 if needed, and recursively delete all the “.pyc” files. It; may just run. How to compile for debugging¶; Flags to turn optimizations off and debugging on can be set across the; project and plugins with CMake variable CMAKE_BUI",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/build_planning-1.html:21350,install,install,21350,psi4manual/1.4.0/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/build_planning-1.html,8,['install'],"['install', 'installation']"
Deployability,"tz(self); docstring. basis_values(self); docstring. compute_functions(self, arg0); docstring. compute_points(self, block[, force_compute]); docstring. deriv(self); docstring. max_functions(self); docstring. max_points(self); docstring. orbital_values(self); docstring. point_values(self); docstring. print_out(self[, out_fname, print]); docstring. set_ansatz(self, arg0); docstring. set_deriv(self, arg0); docstring. set_pointers(*args, **kwargs); Overloaded function. Methods Documentation. ansatz(self: psi4.core.PointFunctions) → int¶; docstring. basis_values(self: psi4.core.BasisFunctions) → Dict[str, psi4.core.Matrix]¶; docstring. compute_functions(self: psi4.core.BasisFunctions, arg0: psi4.core.BlockOPoints) → None¶; docstring. compute_points(self: psi4.core.PointFunctions, block: psi4.core.BlockOPoints, force_compute: bool = True) → None¶; docstring. deriv(self: psi4.core.BasisFunctions) → int¶; docstring. max_functions(self: psi4.core.BasisFunctions) → int¶; docstring. max_points(self: psi4.core.BasisFunctions) → int¶; docstring. orbital_values(self: psi4.core.PointFunctions) → Dict[str, psi4.core.Matrix]¶; docstring. point_values(self: psi4.core.PointFunctions) → Dict[str, psi4.core.Vector]¶; docstring. print_out(self: psi4.core.PointFunctions, out_fname: str = 'outfile', print: int = 2) → None¶; docstring. set_ansatz(self: psi4.core.PointFunctions, arg0: int) → None¶; docstring. set_deriv(self: psi4.core.BasisFunctions, arg0: int) → None¶; docstring. set_pointers(*args, **kwargs)¶; Overloaded function. set_pointers(self: psi4.core.PointFunctions, arg0: psi4.core.Matrix) -> None. docstring. set_pointers(self: psi4.core.PointFunctions, arg0: psi4.core.Matrix, arg1: psi4.core.Matrix) -> None. docstring. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.6;  · . PSI4. PSI4 API: Linking C++ and Python; RKSFunctions. © Copyright 2022, The Psi4 Project.; Last updated on Thursday, 19 May 2022 08:57PM.; Created using Sphinx 4.5.0.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/api/psi4.core.RKSFunctions.html:2170,update,updated,2170,psi4manual/1.6.x/api/psi4.core.RKSFunctions.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/api/psi4.core.RKSFunctions.html,1,['update'],['updated']
Deployability,"tz(self); docstring. basis_values(self); docstring. compute_functions(self, arg0); docstring. compute_points(self, block[, force_compute]); docstring. deriv(self); docstring. max_functions(self); docstring. max_points(self); docstring. orbital_values(self); docstring. point_values(self); docstring. print_out(self[, out_fname, print]); docstring. set_ansatz(self, arg0); docstring. set_deriv(self, arg0); docstring. set_pointers(*args, **kwargs); Overloaded function. Methods Documentation. ansatz(self: psi4.core.PointFunctions) → int¶; docstring. basis_values(self: psi4.core.BasisFunctions) → Dict[str, psi4.core.Matrix]¶; docstring. compute_functions(self: psi4.core.BasisFunctions, arg0: psi4.core.BlockOPoints) → None¶; docstring. compute_points(self: psi4.core.PointFunctions, block: psi4.core.BlockOPoints, force_compute: bool = True) → None¶; docstring. deriv(self: psi4.core.BasisFunctions) → int¶; docstring. max_functions(self: psi4.core.BasisFunctions) → int¶; docstring. max_points(self: psi4.core.BasisFunctions) → int¶; docstring. orbital_values(self: psi4.core.PointFunctions) → Dict[str, psi4.core.Matrix]¶; docstring. point_values(self: psi4.core.PointFunctions) → Dict[str, psi4.core.Vector]¶; docstring. print_out(self: psi4.core.PointFunctions, out_fname: str = 'outfile', print: int = 2) → None¶; docstring. set_ansatz(self: psi4.core.PointFunctions, arg0: int) → None¶; docstring. set_deriv(self: psi4.core.BasisFunctions, arg0: int) → None¶; docstring. set_pointers(*args, **kwargs)¶; Overloaded function. set_pointers(self: psi4.core.PointFunctions, arg0: psi4.core.Matrix) -> None. docstring. set_pointers(self: psi4.core.PointFunctions, arg0: psi4.core.Matrix, arg1: psi4.core.Matrix) -> None. docstring. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.6;  · . PSI4. PSI4 API: Linking C++ and Python; UKSFunctions. © Copyright 2022, The Psi4 Project.; Last updated on Thursday, 19 May 2022 08:57PM.; Created using Sphinx 4.5.0.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/api/psi4.core.UKSFunctions.html:2170,update,updated,2170,psi4manual/1.6.x/api/psi4.core.UKSFunctions.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/api/psi4.core.UKSFunctions.html,1,['update'],['updated']
Deployability,"t{Au\_std}} = E_{total,\; \text{SCF}}^{\text{aug-cc-pVQZ}} \; + E_{corl,\; \text{MP2}}^{\text{aug-cc-pV[TQ]Z}} \; + \delta_{\text{MP2}}^{\text{CCSD(T)}}\big\vert_{\text{aug-cc-pVTZ}}\]; >>> # [1] single-point energy by this composite method; >>> energy('sherrill_gold_standard'). >>> # [2] finite-difference geometry optimization; >>> optimize('sherrill_gold_standard'). >>> # [3] finite-difference geometry optimization, overwriting some pre-defined sherrill_gold_standard options; >>> optimize('sherrill_gold_standard', corl_basis='cc-pV[DT]Z', delta_basis='3-21g'). psi4.driver.aliases.allen_focal_point(func, label, **kwargs)[source]¶; Function to call Wes Allen-style Focal; Point Analysis. JCP 127 014306. Uses; cbs() to evaluate the following; expression. SCF employs a three-point extrapolation according; to scf_xtpl_helgaker_3(). MP2, CCSD, and; CCSD(T) employ two-point extrapolation performed according to; corl_xtpl_helgaker_2(). CCSDT and CCSDT(Q); are plain deltas. This wrapper requires Kallay’s MRCC code. \[E_{total}^{\text{FPA}} = E_{total,\; \text{SCF}}^{\text{cc-pV[Q56]Z}} \; + E_{corl,\; \text{MP2}}^{\text{cc-pV[56]Z}} \; + \delta_{\text{MP2}}^{\text{CCSD}}\big\vert_{\text{cc-pV[56]Z}} \; + \delta_{\text{CCSD}}^{\text{CCSD(T)}}\big\vert_{\text{cc-pV[56]Z}} \; + \delta_{\text{CCSD(T)}}^{\text{CCSDT}}\big\vert_{\text{cc-pVTZ}} \; + \delta_{\text{CCSDT}}^{\text{CCSDT(Q)}}\big\vert_{\text{cc-pVDZ}}\]; >>> # [1] single-point energy by this composite method; >>> energy('allen_focal_point'). >>> # [2] finite-difference geometry optimization embarrasingly parallel; >>> optimize('allen_focal_point', mode='sow'). table of contents. Complete Basis Set; Output; Extrapolation Schemes; Aliases. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Psithon Functions: Invoking a Calculation; Complete Basis Set. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/cbs-1.html:28529,update,updated,28529,psi4manual/1.4.0/cbs-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cbs-1.html,2,['update'],['updated']
Deployability,"t{Au\_std}} = E_{total,\; \text{SCF}}^{\text{aug-cc-pVQZ}} \; + E_{corl,\; \text{MP2}}^{\text{aug-cc-pV[TQ]Z}} \; + \delta_{\text{MP2}}^{\text{CCSD(T)}}\big\vert_{\text{aug-cc-pVTZ}}\]; >>> # [1] single-point energy by this composite method; >>> energy('sherrill_gold_standard'). >>> # [2] finite-difference geometry optimization; >>> optimize('sherrill_gold_standard'). >>> # [3] finite-difference geometry optimization, overwriting some pre-defined sherrill_gold_standard options; >>> optimize('sherrill_gold_standard', corl_basis='cc-pV[DT]Z', delta_basis='3-21g'). psi4.driver.aliases.allen_focal_point(func, label, **kwargs)[source]¶; Function to call Wes Allen-style Focal; Point Analysis. JCP 127 014306. Uses; cbs() to evaluate the following; expression. SCF employs a three-point extrapolation according; to scf_xtpl_helgaker_3(). MP2, CCSD, and; CCSD(T) employ two-point extrapolation performed according to; corl_xtpl_helgaker_2(). CCSDT and CCSDT(Q); are plain deltas. This wrapper requires Kallay’s MRCC code. \[E_{total}^{\text{FPA}} = E_{total,\; \text{SCF}}^{\text{cc-pV[Q56]Z}} \; + E_{corl,\; \text{MP2}}^{\text{cc-pV[56]Z}} \; + \delta_{\text{MP2}}^{\text{CCSD}}\big\vert_{\text{cc-pV[56]Z}} \; + \delta_{\text{CCSD}}^{\text{CCSD(T)}}\big\vert_{\text{cc-pV[56]Z}} \; + \delta_{\text{CCSD(T)}}^{\text{CCSDT}}\big\vert_{\text{cc-pVTZ}} \; + \delta_{\text{CCSDT}}^{\text{CCSDT(Q)}}\big\vert_{\text{cc-pVDZ}}\]; >>> # [1] single-point energy by this composite method; >>> energy('allen_focal_point'). >>> # [2] finite-difference geometry optimization embarrasingly parallel; >>> optimize('allen_focal_point', mode='sow'). table of contents. Complete Basis Set; Output; Extrapolation Schemes; Aliases. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Psithon Functions: Invoking a Calculation; Complete Basis Set. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/cbs-1.html:28529,update,updated,28529,psi4manual/1.5.0/cbs-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/cbs-1.html,2,['update'],['updated']
Deployability,"t{corl},\; \textbf{delta3_wfn}}^{\textbf{delta3_basis}}\right) - \mathcal{F}_{\textbf{delta3_scheme}} \left(E_{\text{corl},\; \textbf{delta3_wfn_lesser}}^{\textbf{delta3_basis}}\right)\]. \[\delta_{\textbf{delta4_wfn_lesser}}^{\textbf{delta4_wfn}} \; = \mathcal{F}_{\textbf{delta4_scheme}} \left(E_{\text{corl},\; \textbf{delta4_wfn}}^{\textbf{delta4_basis}}\right) - \mathcal{F}_{\textbf{delta4_scheme}} \left(E_{\text{corl},\; \textbf{delta4_wfn_lesser}}^{\textbf{delta4_basis}}\right)\]. \[\delta_{\textbf{delta5_wfn_lesser}}^{\textbf{delta5_wfn}} \; = \mathcal{F}_{\textbf{delta5_scheme}} \left(E_{\text{corl},\; \textbf{delta5_wfn}}^{\textbf{delta5_basis}}\right) - \mathcal{F}_{\textbf{delta5_scheme}} \left(E_{\text{corl},\; \textbf{delta5_wfn_lesser}}^{\textbf{delta5_basis}}\right)\]; A translation of this ungainly equation to example [5] below is as; follows. In words, this is a double- and triple-zeta 2-point; Helgaker-extrapolated CCSD(T) coupled-cluster correlation correction; appended to a triple- and quadruple-zeta 2-point; Helgaker-extrapolated MP2 correlation energy appended to a SCF/aug-cc-pVQZ; reference energy. \[E_{\text{total}}^{\text{CBS}} = \mathcal{F}_{\text{highest_1}} \left(E_{\text{total},\; \text{SCF}}^{\text{aug-cc-pVQZ}}\right) \; + \mathcal{F}_{\text{corl_xtpl_helgaker_2}} \left(E_{\text{corl},\; \text{MP2}}^{\text{aug-cc-pV[TQ]Z}}\right) \; + \delta_{\text{MP2}}^{\text{CCSD(T)}}\]. \[\delta_{\text{MP2}}^{\text{CCSD(T)}} \; = \mathcal{F}_{\text{corl_xtpl_helgaker_2}} \left(E_{\text{corl},\; \text{CCSD(T)}}^{\text{aug-cc-pV[DT]Z}}\right) - \mathcal{F}_{\text{corl_xtpl_helgaker_2}} \left(E_{\text{corl},\; \text{MP2}}^{\text{aug-cc-pV[DT]Z}}\right)\]. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Psithon Functions: Invoking a Calculation; Complete Basis Set; <no title>. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/cbs_eqn.html:3450,update,updated,3450,psi4manual/1.7.x/cbs_eqn.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/cbs_eqn.html,1,['update'],['updated']
Deployability,"t¶; Returns petite list which transforms AO basis functions to SO’s, setting argument to true is for Cartesian basis, false is for Spherical Harmonic basis. play(self: psi4.core.MintsHelper) → None¶; play function. potential_grad(self: psi4.core.MintsHelper, arg0: psi4.core.Matrix) → psi4.core.Matrix¶; First nuclear derivative potential integrals. set_basisset(self: psi4.core.MintsHelper, label: str, basis: psi4.core.BasisSet) → None¶; Sets a basis set. set_print(self: psi4.core.MintsHelper, arg0: int) → None¶; Sets the print level. so_angular_momentum(self: psi4.core.MintsHelper) → List[psi4.core.Matrix]¶; Vector SO angular momentum integrals. so_dipole(self: psi4.core.MintsHelper) → List[psi4.core.Matrix]¶; Vector SO dipole integrals. so_dkh(self: psi4.core.MintsHelper, arg0: int) → psi4.core.Matrix¶; SO dkh integrals. so_ecp(self: psi4.core.MintsHelper) → psi4.core.Matrix¶; SO basis effective core potential integrals. so_kinetic(self: psi4.core.MintsHelper, include_perturbations: bool = True) → psi4.core.Matrix¶; SO basis kinetic integrals. so_nabla(self: psi4.core.MintsHelper) → List[psi4.core.Matrix]¶; Vector SO nabla integrals. so_overlap(self: psi4.core.MintsHelper, include_perturbations: bool = True) → psi4.core.Matrix¶; SO basis overlap integrals. so_potential(self: psi4.core.MintsHelper, include_perturbations: bool = True) → psi4.core.Matrix¶; SO basis potential integrals. so_quadrupole(self: psi4.core.MintsHelper) → List[psi4.core.Matrix]¶; Vector SO quadrupole integrals. so_traceless_quadrupole(self: psi4.core.MintsHelper) → List[psi4.core.Matrix]¶; Vector SO traceless quadrupole integrals. sobasisset(self: psi4.core.MintsHelper) → psi4.core.SOBasisSet¶; Returns the SO basis set being used. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. PSI4 API: Linking C++ and Python; MintsHelper. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/api/psi4.core.mintshelper.html:19079,update,updated,19079,psi4manual/1.4.0/api/psi4.core.mintshelper.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/api/psi4.core.mintshelper.html,1,['update'],['updated']
Deployability,"t¶; Returns petite list which transforms AO basis functions to SO’s, setting argument to true is for Cartesian basis, false is for Spherical Harmonic basis. play(self: psi4.core.MintsHelper) → None¶; play function. potential_grad(self: psi4.core.MintsHelper, arg0: psi4.core.Matrix) → psi4.core.Matrix¶; First nuclear derivative potential integrals. set_basisset(self: psi4.core.MintsHelper, label: str, basis: psi4.core.BasisSet) → None¶; Sets a basis set. set_print(self: psi4.core.MintsHelper, arg0: int) → None¶; Sets the print level. so_angular_momentum(self: psi4.core.MintsHelper) → List[psi4.core.Matrix]¶; Vector SO angular momentum integrals. so_dipole(self: psi4.core.MintsHelper) → List[psi4.core.Matrix]¶; Vector SO dipole integrals. so_dkh(self: psi4.core.MintsHelper, arg0: int) → psi4.core.Matrix¶; SO dkh integrals. so_ecp(self: psi4.core.MintsHelper) → psi4.core.Matrix¶; SO basis effective core potential integrals. so_kinetic(self: psi4.core.MintsHelper, include_perturbations: bool = True) → psi4.core.Matrix¶; SO basis kinetic integrals. so_nabla(self: psi4.core.MintsHelper) → List[psi4.core.Matrix]¶; Vector SO nabla integrals. so_overlap(self: psi4.core.MintsHelper, include_perturbations: bool = True) → psi4.core.Matrix¶; SO basis overlap integrals. so_potential(self: psi4.core.MintsHelper, include_perturbations: bool = True) → psi4.core.Matrix¶; SO basis potential integrals. so_quadrupole(self: psi4.core.MintsHelper) → List[psi4.core.Matrix]¶; Vector SO quadrupole integrals. so_traceless_quadrupole(self: psi4.core.MintsHelper) → List[psi4.core.Matrix]¶; Vector SO traceless quadrupole integrals. sobasisset(self: psi4.core.MintsHelper) → psi4.core.SOBasisSet¶; Returns the SO basis set being used. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. PSI4 API: Linking C++ and Python; MintsHelper. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/api/psi4.core.mintshelper.html:19093,update,updated,19093,psi4manual/1.5.0/api/psi4.core.mintshelper.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/api/psi4.core.mintshelper.html,1,['update'],['updated']
Deployability,"t’, ‘pickle’}. Returns; The requested model from a serialized format. Return type; Model. plan()[source]¶; Form QCSchema input from member data. Return type; AtomicInput. classmethod schema(by_alias=True, ref_template='#/definitions/{model}')¶. Return type; DictStrAny. Parameters. by_alias (bool) – ; ref_template (unicode) – . classmethod schema_json(*, by_alias=True, ref_template='#/definitions/{model}', **dumps_kwargs)¶. Return type; unicode. Parameters. by_alias (bool) – ; ref_template (unicode) – ; dumps_kwargs (Any) – . serialize(encoding, *, include=None, exclude=None, exclude_unset=None, exclude_defaults=None, exclude_none=None)¶; Generates a serialized representation of the model. Parameters. encoding (str) – The serialization type, available types are: {‘json’, ‘json-ext’, ‘msgpack-ext’}; include (Optional[Set[str]], optional) – Fields to be included in the serialization.; exclude (Optional[Set[str]], optional) – Fields to be excluded in the serialization.; exclude_unset (Optional[bool], optional) – If True, skips fields that have default values provided.; exclude_defaults (Optional[bool], optional) – If True, skips fields that have set or defaulted values equal to the default.; exclude_none (Optional[bool], optional) – If True, skips fields that have value None. Returns; The serialized model. Return type; Union[bytes, str]. classmethod set_basis(basis)[source]¶. classmethod set_keywords(keywords)[source]¶. classmethod set_method(method)[source]¶. classmethod update_forward_refs(**localns)¶; Try to update ForwardRefs on fields based on this Model, globalns and localns. Return type; None. Parameters; localns (Any) – . classmethod validate(value)¶. Return type; Model. Parameters; value (Any) – . «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.6;  · . PSI4. PSI4 API: Linking C++ and Python; AtomicComputer. © Copyright 2022, The Psi4 Project.; Last updated on Thursday, 19 May 2022 08:57PM.; Created using Sphinx 4.5.0.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/api/psi4.driver.AtomicComputer.html:6771,update,update,6771,psi4manual/1.6.x/api/psi4.driver.AtomicComputer.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/api/psi4.driver.AtomicComputer.html,2,['update'],"['update', 'updated']"
Deployability,"t”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=0.1.12 -c psi4. Uninstall PSI4 from current environment. >>> conda remove psi4. Initially install PSI4 nightly build. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4 –channel psi4/label/dev. Initially install PSI4 nightly build with non-current python. >>> conda install psi4 python=3.6 -c psi4/label/dev. Update to latest PSI4 nightly build. >>> conda update psi4 -c psi4/label/dev. Initially install nightly build into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4/label/dev; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=0.1.12 -c psi4/label/dev. Troubleshooting¶. If the target computer doesn’t have libc >= 2.7 (released c.2007; for reference, 2.10 is newer than 2.7; unlike most libraries, libc generally not available in multiple versions on a computer), the PSI4 conda package won’t work.; 1; 2; 3; 4; 5; 6# unsuitable computer; >>> ldd --version; ldd (GNU libc) 2.5; # suitable computer; >>> ldd --version; ldd (GNU libc) 2.17. It is of greatest importance that the PSI4 executable be linked against conda libpython.so not against any system libpython.so. This is arranged by setting RPATH to seek libraries relative to executable (thanks, conda binary relocation routine!). The conda PSI4 executable is not vulnerable to interference from your LD_LIBRARY_PATH settings. Below shows a well-linked executable. no libraries “not found”; fundamental libraries like libc, ld-linux, pthreads found system libraries to link against; libpython linked against conda python not system python; libm is linked against conda or system; blas, c++, and gcc libraries are absent because statically linked. >>> conda install con",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/conda-1.html:21998,release,released,21998,psi4manual/1.3.2/conda-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/conda-1.html,2,['release'],['released']
Deployability,"u may also wish to install NumPy and the executable add-ons (e.g., dftd3); >>> conda install numpy psi4-rt. What do the conda packages psi4 & psi4-dev and the installer psi4conda contain¶; psi4 - has full-featured psi4 itself and necessarily all the link-time qc; addons (e.g., chemps2). It has python, pytest, and numpy. Of gcc-ness, it has minimal, run-time libraries,; not compilers, though, for Linux/Windows, full gcc and run-time gcc are the same.; It doesn’t have the run-time qc addons psi4-rt (e.g., dftd3) or build tools (e.g., sphinx and cmake).; psi4-dev - does not have psi4 itself or the run-time addons psi4-rt or numpy (though fine to install them; alongside). Does have all the link-time addons. Does have; cmake and sphinx (and python). Of gcc-ness, has full packages, that is,; compilers, not runtime packages.; Psi4conda installer - has full-featured psi4 itself, all link-time qc addons, all; run-time qc addons, and minimal gcc runtime libraries. Developers should additionally install psi4-dev for build tools.; The How to install a Psi4 binary with the Psi4conda installer, command-line uses a conda constructor to package up Miniconda,; the PSI4 conda package, the PSI4 add-on conda packages, dependencies; thereof (possibly from particular channels), and the psi4 channel; as a default. This is very convenient for novice users and robust; against differing channel settings in ~/.condarc. But proficient; conda users may prefer to treat psi4 as a normal conda package and; not have another large Miniconda installation (including the hefty MKL); lying around just for PSI4. Installing just the psi4 package; itself will get you PSI4, whatever add-ons require linking in to; PSI4 (e.g., CheMPS2 and PCMSolver), and the correct versions of; packages. However, just the psi4 package won’t get you add-ons that; don’t need linking (e.g., DFTD3 and v2rdm_casscf). Quick Installation¶; Sequence of commands to get you to a working PSI4. Installs; Miniconda into $HOME/miniconda an",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/conda-1.html:8325,install,install,8325,psi4manual/1.1.0/conda-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/conda-1.html,2,['install'],['install']
Deployability,"ual .pymol files (e.g.,; DA.pymol), which in turn load in the molecule and cube file data; (contained in the .cube file), set up the visualization, and render a; .png image of the scene. Generally the view orientation and some specific; details of the .pymol files require some small tweaks to permit; publication-quality renderings. F/I-SAPT Keywords¶; The input files described above cover roughly 90% of all F/I-SAPT analyses. For; more delicate or involved problems, there are a large number of user options; that permit the customization of the I-SAPT subsystem partition, the convergence; of the IBO localization procedure, numerical thresholds, etc. We have an entire; video tutorial devoted to these options F/I-SAPT Options.; Direct source-code documentation on these options is available :ref:`here; <apdx:fisapt_psivar>`_. Additional Notes¶. Caution; In constrast to Ed Hohenstein’s SAPT0 code, FISAPT uses the -JKFIT; auxiliary basis sets for all Fock-type terms (e.g., electrostatics, exchange,; induction, and core Fock matrix elements in exchange-dispersion), and the -RI; auxiliary basis sets only for the dispersion term. Ed’s code uses the -RI; basis sets for all SAPT terms, which can be problematic for heavy elements.; As such, Ed’s SAPT0 code will yield slightly different results than FISAPT. The; differences should be very minor for up to and including second-row elements,; after which point one needs to use the DF_BASIS_ELST option in Ed’s code to; provide an accurate result. table of contents. F/I-SAPT: Functional Group and/or Intramolecular SAPT; F-SAPT: A Representative Example; Order-1 Visualization with PyMol; Difference F-SAPT Analysis; I-SAPT: A Representative Example; Cube File Visualization with PyMol; F/I-SAPT Keywords; Additional Notes. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Theoretical Methods: SCF to FCI. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/fisapt-1.html:13500,update,updated,13500,psi4manual/1.1.0/fisapt-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/fisapt-1.html,2,['update'],['updated']
Deployability,"ual recipes should be edited in psi4; external/*/*/CMakeLists.txt files; Edit any added or dropped dependencies in main psi4/CMakeLists.txt and docs; psi4/doc/sphinxman/source/build_planning.rst . Assemble postrelease changes¶. Collect PRs with “backport” label, and request other backport suggestions through slack.; Be on the maintenance branch (e.g., 1.8.x). git fetch upstream or any other remotes you’re; going to be cherry-picking from.; Cherry-pick backport PRs and commits (git cherry-pick sha), apply other changes manually, not; forgetting CI files or samples.; Possibly apply other changes manually, including:. CI file tweaks like LLVM version or dependency constraint.; samples files from a docs build.; psi4/doc/sphinxman/source/introduction.rst for any compiler and Python minimum requirements to edit. Tag it (Tag postrelease for details). This is needed to compute a version on a maintenance; branch to even run. Until the release is published on GH (final step of; Publish GitHub postrelease), it’s ok to revise a tag (force push to maintenance branch). Add or increment patch number in psi4/metadata.py; leave the “z”s. Commit file.; Tag with git tag -a v1.8.2 -m ""v1.8.2"", then push git push --atomic upstream 1.8.x v1.8.2. Test core PSI4 thoroughly locally (ecosystem will get tested by c-f) by running; pytest ../tests/ -n auto (psithon and psiapi tests). Possibly you may have to step back for; dependency versions from what master needs.; Start Tweak Conda for postrelease PR at conda-forge. This will thoroughly test the ecosystem.; If more changes are needed, git tag -d v1.8.2 to delete the tag, then make more commits,; retag, push, and repeat. Try to finalize the postrelease tag within a session or a day, so; tentative tags don’t linger.; Start the draft parts of Publish GitHub postrelease from the backported PRs assembled here. Tweak Conda for postrelease¶. Start a PR to https://github.com/conda-forge/psi4-feedstock . Always store the PR branch on your; fork, neve",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/manage_release.html:6236,release,release,6236,psi4manual/1.9.x/manage_release.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/manage_release.html,2,['release'],['release']
Deployability,"ual/master presents the psi4docs netlify content.; GHA controller is psi4/.github/workflows/docs.yml; This setup works great for “latest” docs, but it won’t build a nice copy on the tag because the tag commit is pushed before the tag itself, so the version shows up “undefined”.; So, anytime after “Tag (pre)release” is over, navigate on psi4 GH to the tag commit (not the record commit) and retrigger the docs GHA. Download the artifact (zipped docs dir) at the end to a local computer.; In your hugo site clone, create a new directory under static/psi4manual. Copy the zipped docs there, unpack, rearrange so that static/psi4manual/<new-tag>/index.html is present. Check in. Publish GitHub release¶. On GitHub site “Draft a New Release” with newly minted tag; Fill in frontmatter style and links from previous GitHub release; Fill in RN from hopefully existing RN issue; Fill in RN by going through the top posts from all PRs from this milestone; “publish” release. This establishes release date for GitHub API; Close the RN issue.; Close the milestone (should be 100% complete). Publish GitHub postrelease¶. On GitHub site “Draft a New Release” for anticipated or newly minted tag; Fill in frontmatter style and links from previous GitHub release; Fill in RN as cherry-pick to or edit on branch; “publish” release. This establishes release date for GitHub API. Publish psicode release¶. Copy a recent release page like https://github.com/psi4/psicode-hugo-website/blob/master/content/posts/v1p2.md; Edit its filename, title, date, image, and links; Execute https://api.github.com/repos/psi4/psi4/releases/latest and note the id field value; Use the id value in the shortcode call at the bottom by ghRN. Finalize release¶. Make new PR with; * edits to main README.md badges, python versions, etc.; * edits to CMakeLists.txt find_package(PythonLibsNew 3.6 REQUIRED); Tweet about release. Reset psi4meta for nightly operation¶; On both Linux and Mac:. After (post)release (not prerelease), in conda_b",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/manage_release.html:18054,release,release,18054,psi4manual/1.8.x/manage_release.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/manage_release.html,1,['release'],['release']
Deployability,"ual/master presents the psi4docs netlify content.; GHA controller is psi4/.github/workflows/docs.yml; This setup works great for “latest” docs, but it won’t build a nice copy on the tag because the tag commit is pushed before the tag itself, so the version shows up “undefined”.; So, anytime after “Tag (pre)release” is over, navigate on psi4 GH to the tag commit (not the record commit) and retrigger the docs GHA. Download the artifact (zipped docs dir) at the end to a local computer.; In your hugo site clone, create a new directory under static/psi4manual. Copy the zipped docs there, unpack, rearrange so that static/psi4manual/<new-tag>/index.html is present. Check in. Publish GitHub release¶. On GitHub site “Draft a New Release” with newly minted tag; Fill in frontmatter style and links from previous GitHub release; Fill in RN from hopefully existing RN issue; Fill in RN by going through the top posts from all PRs from this milestone; “publish” release. This establishes release date for GitHub API; Close the RN issue.; Close the milestone (should be 100% complete). Publish GitHub postrelease¶. On GitHub site “Draft a New Release” for anticipated or newly minted tag; Fill in frontmatter style and links from previous GitHub release; Fill in RN as cherry-pick to or edit on branch; “publish” release. This establishes release date for GitHub API. Publish psicode release¶. Copy a recent release page like https://github.com/psi4/psicode-hugo-website/blob/master/content/posts/v1p2.md; Edit its filename, title, date, image, and links; Execute https://api.github.com/repos/psi4/psi4/releases/latest and note the id field value; Use the id value in the shortcode call at the bottom. Finalize release¶. Make new PR with; * edits to main README.md badges, python versions, etc.; * edits to CMakeLists.txt find_package(PythonLibsNew 3.6 REQUIRED); Tweet about release. Reset psi4meta for nightly operation¶; On both Linux and Mac:. After (post)release (not prerelease), in conda_build_con",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/manage_release.html:17903,release,release,17903,psi4manual/1.6.x/manage_release.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/manage_release.html,2,['release'],['release']
Deployability,"ual] [details]. bccd; Brueckner coupled cluster doubles (BCCD) [manual] [details]. fno-ccsd; CCSD with frozen natural orbitals [manual]. qcisd(t); QCISD with perturbative triples [manual] [details]. fno-qcisd(t); QCISD(T) with frozen natural orbitals [manual]. ccsd(t); CCSD with perturbative triples (CCSD(T)) [manual] [details]. a-ccsd(t); CCSD with asymmetric perturbative triples (A-CCSD(T)) [manual] [details]. bccd(t); BCCD with perturbative triples [manual] [details]. fno-ccsd(t); CCSD(T) with frozen natural orbitals [manual]. cc3; approximate CC singles, doubles, and triples (CC3) [manual] [details]. ccenergy; expert full control over ccenergy module. cisd; configuration interaction (CI) singles and doubles (CISD) [manual] [details]. fno-cisd; CISD with frozen natural orbitals [manual]. cisdt; CI singles, doubles, and triples (CISDT) [manual]. cisdtq; CI singles, doubles, triples, and quadruples (CISDTQ) [manual]. cin; nth-order CI [manual] [details]. fci; full configuration interaction (FCI) [manual] [details]. detci; expert full control over detci module. gaussian-2, g2; Gaussian-2 composite method [manual]. casscf; complete active space self consistent field (CASSCF) [manual]. rasscf; restricted active space self consistent field (RASSCF) [manual]. mcscf; multiconfigurational self consistent field (SCF) [manual]. psimrcc; Mukherjee multireference coupled cluster (Mk-MRCC) [manual]. psimrcc_scf; Mk-MRCC with regular SCF module (convenience function) [manual]. dmrg-scf; (with CheMPS2) density matrix renormalization group SCF [manual]. dmrg-caspt2; (with CheMPS2) density matrix renormalization group CASPT2 [manual]. dmrg-ci; (with CheMPS2) density matrix renormalization group CI [manual]. sapt0; 0th-order symmetry adapted perturbation theory (SAPT) [manual]. ssapt0; 0th-order SAPT with special exchange scaling [manual]. fisapt0; 0th-order functional and/or intramolecular SAPT [manual]. sf-sapt; 0th-order spin-flip SAPT [manual]. sapt(dft); 0th-order SAPT upon KS",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.energy.html:5667,configurat,configuration,5667,psi4manual/1.7.x/api/psi4.driver.energy.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.energy.html,8,['configurat'],['configuration']
Deployability,"uantum chemistry basis set to evaluate (e.g., 6-31g, cc-pVDZ, …).; method (str) – The quantum chemistry method to evaluate (e.g., B3LYP, MP2, …).; driver ({energy,gradient,hessian,properties}) – The resulting type of computation: energy, gradient, hessian, properties.Note for finite difference that this should be the target driver, not the means driver.; keywords (Dict[Any], Optional) – The keywords to use in the computation.; computed (bool, Default: False) – Whether quantum chemistry has been run on this task.; result (Any, Optional) – AtomicResult return.; result_id (str, Optional) – The optional ID for the computation.; extra_data (Any) – . Return type; None. Methods Summary. compare(other, **kwargs); Compares the current object to the provided object recursively. compute([client]); Run quantum chemistry. construct([_fields_set]); Creates a new model setting __dict__ and __fields_set__ from trusted or pre-validated data. copy(*[, include, exclude, update, deep]); Duplicate a model, optionally choose which fields to include, exclude and change. dict(**kwargs); Generate a dictionary representation of the model, optionally specifying which fields to include or exclude. from_orm(obj). rtype; Model. get_results([client]); Return results as Atomic-flavored QCSchema. json(**kwargs); Generate a JSON representation of the model, include and exclude arguments as per dict(). parse_file(path, *[, encoding]); Parses a file into a Model object. parse_obj(obj). rtype; Model. parse_raw(data, *[, encoding]); Parses raw string or bytes into a Model object. plan(); Form QCSchema input from member data. schema([by_alias, ref_template]). rtype; DictStrAny. schema_json(*[, by_alias, ref_template]). rtype; unicode. serialize(encoding, *[, include, exclude, ...]); Generates a serialized representation of the model. set_basis(basis). set_keywords(keywords). set_method(method). update_forward_refs(**localns); Try to update ForwardRefs on fields based on this Model, globalns and localns. v",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/api/psi4.driver.AtomicComputer.html:1355,update,update,1355,psi4manual/1.6.x/api/psi4.driver.AtomicComputer.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/api/psi4.driver.AtomicComputer.html,1,['update'],['update']
Deployability,"uction during successive DMRG instructions. Type: double; Default: 1.e-6. DMRG_SCF_MAX_ITER¶. Maximum number of DMRG iterations. Type: integer; Default: 100. DMRG_SCF_STATE_AVG¶. Whether or not to use state-averaging for roots >=2 with DMRG-SCF. Type: boolean; Default: true. DMRG_SWEEP_DVDSON_RTOL¶. The residual tolerances for the Davidson diagonalization during DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_ENERGY_CONV¶. The energy convergence to stop an instruction during successive DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_MAX_SWEEPS¶. The maximum number of sweeps to stop an instruction during successive DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_NOISE_PREFAC¶. The noiseprefactors for successive DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_STATES¶. The number of reduced renormalized basis states to be retained during successive DMRG instructions. Type: array; Default: No Default. DMRG_UNITARY_WRITE¶. Whether or not to store the unitary on disk (convenient for restarting). Type: boolean; Default: true. Table Of Contents. DMRG; General; DMRG_CASPT2_CALC; DMRG_CASPT2_IMAG; DMRG_CASPT2_IPEA; DMRG_CASPT2_ORBS; DMRG_DIIS; DMRG_DIIS_WRITE; DMRG_EXCITATION; DMRG_IRREP; DMRG_LOCAL_INIT; DMRG_MOLDEN_WRITE; DMRG_MPS_WRITE; DMRG_MULTIPLICITY; DMRG_OPDM_AO_PRINT; DMRG_PRINT_CORR; DMRG_SCF_ACTIVE_SPACE; DMRG_SCF_DIIS_THR; DMRG_SCF_GRAD_THR; DMRG_SCF_MAX_ITER; DMRG_SCF_STATE_AVG; DMRG_SWEEP_DVDSON_RTOL; DMRG_SWEEP_ENERGY_CONV; DMRG_SWEEP_MAX_SWEEPS; DMRG_SWEEP_NOISE_PREFAC; DMRG_SWEEP_STATES; DMRG_UNITARY_WRITE. Previous topic; WFN_TYPE; Next topic; DMRG_CASPT2_CALC. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Keywords by Module ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodir_options_c/module__dmrg-1.html:4533,update,updated,4533,psi4manual/1.0.0/autodir_options_c/module__dmrg-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodir_options_c/module__dmrg-1.html,2,['update'],['updated']
Deployability,"uction_operator() psi4.core.MintsHelper method. inertia_tensor() psi4.core.Molecule method. init() psi4.core.Dimension method. init_io_files() psi4.core.CIVector method. initialize() in module psi4.core. psi4.core.CUHF method. psi4.core.DFHelper method. psi4.core.DFJCOSK method. psi4.core.DirectJK method. psi4.core.HF method. psi4.core.IntegralTransform method. psi4.core.JK method. psi4.core.MemDFJK method. psi4.core.RHF method. psi4.core.ROHF method. psi4.core.UHF method. psi4.core.VBase method. initialize_gtfock_jk() psi4.core.CUHF method. psi4.core.HF method. psi4.core.RHF method. psi4.core.ROHF method. psi4.core.UHF method. initialize_jk() psi4.core.CUHF method. psi4.core.HF method. psi4.core.RHF method. psi4.core.ROHF method. psi4.core.UHF method. initialized_diis_manager_ psi4.core.CUHF attribute. psi4.core.HF attribute. psi4.core.RHF attribute. psi4.core.ROHF attribute. psi4.core.UHF attribute. input_units_to_au() psi4.core.Molecule method. insert() psi4.core.BSVec method. installing. INTCOS_GENERATE_EXIT (OPTKING). integral() psi4.core.MintsHelper method. psi4.core.OrbitalSpace method. INTEGRAL_CUTOFF (DFOCC). INTEGRAL_PACKAGE (GLOBALS). IntegralFactory class in psi4.core. integrals, [1]. integrals() psi4.core.MintsHelper method. integrals_erf() psi4.core.MintsHelper method. integrals_erfc() psi4.core.MintsHelper method. IntegralTransform class in psi4.core. INTERFRAG_DIST_INV (OPTKING). INTERFRAG_HESS (OPTKING). INTERFRAG_MODE (OPTKING). INTERFRAG_STEP_LIMIT (OPTKING). INTERFRAGMENT_CONNECT (OPTKING). INTERNAL_ROTATIONS (MCSCF). INTRAFRAG_HESS (OPTKING). INTRAFRAG_STEP_LIMIT (OPTKING). INTRAFRAG_STEP_LIMIT_MAX (OPTKING). INTRAFRAG_STEP_LIMIT_MIN (OPTKING). INTS_TOLERANCE (CCDENSITY). (DCT). (DFMP2). (FISAPT). (MRCC). (SAPT). (SCF). IntVector class in psi4.core. invert() psi4.core.Matrix method. IO class in psi4.core. IOManager class in psi4.core. IP_POLES (OCC). ipi_broker() in module psi4.driver. IRC. ; geometry optimization. IRC_DIRECTION (OPTKING). IRC_S",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/genindex.html:81093,install,installing,81093,psi4manual/1.6.x/genindex.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/genindex.html,1,['install'],['installing']
Deployability,"uctionsM += """"""# psi4 -i %-27s -o %-27s\n#\n\n"""""" % ('FREQ-master.in', 'FREQ-master.out'). with open('FREQ-master.in', 'wb') as fmaster:; fmaster.write('# This is a psi4 input file auto-generated from the hessian() wrapper.\n\n'.encode('utf-8')); fmaster.write(p4util.format_molecule_for_input(moleculeclone).encode('utf-8')); fmaster.write(p4util.format_options_for_input(moleculeclone, **kwargs)); p4util.format_kwargs_for_input(fmaster, lmode=2, return_wfn=True, freq_dertype=0, **kwargs); fmaster.write((""""""retE, retwfn = %s('%s', **kwargs)\n\n"""""" % (frequency.__name__, lowername)).encode('utf-8')); fmaster.write(instructionsM.encode('utf-8')); core.print_out(instructionsM). for n, displacement in enumerate(displacements):; rfile = 'FREQ-%s' % (n + 1). # Build string of title banner; banners = ''; banners += """"""core.print_out('\\n')\n""""""; banners += """"""p4util.banner(' Hessian Computation: Energy Displacement %d ')\n"""""" % (n + 1); banners += """"""core.print_out('\\n')\n\n"""""". if freq_mode == 'continuous':. # print progress to file and screen; core.print_out('\n'); p4util.banner('Loading displacement %d of %d' % (n + 1, ndisp)); print("""""" %d"""""" % (n + 1), end=('\n' if (n + 1 == ndisp) else '')); sys.stdout.flush(). # Load in displacement into the active molecule; moleculeclone.set_geometry(displacement). # Perform the energy calculation; E, wfn = energy(lowername, return_wfn=True, molecule=moleculeclone, **kwargs); energies.append(core.get_variable('CURRENT ENERGY')). # clean may be necessary when changing irreps of displacements; core.clean(). # S/R: Write each displaced geometry to an input file; elif freq_mode == 'sow':; moleculeclone.set_geometry(displacement). # S/R: Prepare molecule, options, kwargs, function call and energy save; with open('%s.in' % (rfile), 'wb') as freagent:; freagent.write('# This is a psi4 input file auto-generated from the gradient() wrapper.\n\n'); freagent.write(p4util.format_molecule_for_input(moleculeclone, forcexyz=True).encode('utf-8')); ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/driver.html:78115,continuous,continuous,78115,psi4manual/1.1.0/_modules/psi4/driver/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/driver.html,2,['continuous'],['continuous']
Deployability,"uctionsM += """"""# psi4 -i %-27s -o %-27s\n#\n\n"""""" % ('FREQ-master.in', 'FREQ-master.out'). with open('FREQ-master.in', 'wb') as fmaster:; fmaster.write('# This is a psi4 input file auto-generated from the hessian() wrapper.\n\n'.encode('utf-8')); fmaster.write(p4util.format_molecule_for_input(moleculeclone).encode('utf-8')); fmaster.write(p4util.format_options_for_input(moleculeclone, **kwargs)); p4util.format_kwargs_for_input(fmaster, lmode=2, return_wfn=True, freq_dertype=0, **kwargs); fmaster.write((""""""retE, retwfn = %s('%s', **kwargs)\n\n"""""" % (frequency.__name__, lowername)).encode('utf-8')); fmaster.write(instructionsM.encode('utf-8')); psi4.print_out(instructionsM). for n, displacement in enumerate(displacements):; rfile = 'FREQ-%s' % (n + 1). # Build string of title banner; banners = ''; banners += """"""psi4.print_out('\\n')\n""""""; banners += """"""p4util.banner(' Hessian Computation: Energy Displacement %d ')\n"""""" % (n + 1); banners += """"""psi4.print_out('\\n')\n\n"""""". if freq_mode == 'continuous':. # print progress to file and screen; psi4.print_out('\n'); p4util.banner('Loading displacement %d of %d' % (n + 1, ndisp)); print("""""" %d"""""" % (n + 1), end=('\n' if (n + 1 == ndisp) else '')); sys.stdout.flush(). # Load in displacement into the active molecule; moleculeclone.set_geometry(displacement). # Perform the energy calculation; E, wfn = energy(lowername, return_wfn=True, molecule=moleculeclone, **kwargs); energies.append(psi4.get_variable('CURRENT ENERGY')). # clean may be necessary when changing irreps of displacements; psi4.clean(). # S/R: Write each displaced geometry to an input file; elif freq_mode == 'sow':; moleculeclone.set_geometry(displacement). # S/R: Prepare molecule, options, kwargs, function call and energy save; with open('%s.in' % (rfile), 'wb') as freagent:; freagent.write('# This is a psi4 input file auto-generated from the gradient() wrapper.\n\n'); freagent.write(p4util.format_molecule_for_input(moleculeclone, forcexyz=True).encode('utf-8')); ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/driver.html:76133,continuous,continuous,76133,psi4manual/1.0.0/_modules/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/driver.html,1,['continuous'],['continuous']
Deployability,"ue if two integers, strings, booleans, or integer arrays are element-wise equal. Parameters. expected (Union[int, bool, str, List[int], numpy.ndarray]) – int, bool, str or array-like of same.; Reference value against which computed is compared.; computed (Union[int, bool, str, List[int], numpy.ndarray]) – int, bool, str or array-like of same.; Input value to compare against expected.; label (str) – Label for passed and error messages. Defaults to calling function name.; equal_phase (bool) – Compare computed or its opposite as equal.; quiet (bool) – Whether to log the return message.; return_message (bool) – Whether to return tuple. See below.; return_handler (Callable) – Function to control printing, logging, raising, and returning.; Specialized interception for interfacing testing systems. Returns. allclose (bool) – Returns True if expected and computed are equal; False otherwise.; message (str) – When return_message=True, also return passed or error message. Return type; Union[bool, Tuple[bool, str]]. Notes. Akin to np.array_equal.; For scalar exactly-comparable types and for arbitrary-dimension, np.ndarray-castable, uniform-type,; exactly-comparable types. For mixed types, use compare_recursive(). psi4.compare_recursive(expected, computed, *args, **kwargs)¶; Comparison function for recursively comparing mixed-type and nested structures such as dictionaries and lists.; See qcelemental.testing.compare_recursive() for details. table of contents. Test Suite; CTest and pytest, PSIthon and PsiAPI; Test Contents; Adding PSIthon Test Cases; CMakeLists.txt; input.dat; output.ref; test_input.py; Running for Debugging. Adding PsiAPI Test Cases; Running for Debugging. Comparison Functions; Plain Old Data; Objects; File Formats; Extra QCA Functions. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.6;  · . PSI4. Test Suite. © Copyright 2022, The Psi4 Project.; Last updated on Thursday, 19 May 2022 08:57PM.; Created using Sphinx 4.5.0.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/add_tests.html:30594,update,updated,30594,psi4manual/1.6.x/add_tests.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/add_tests.html,1,['update'],['updated']
Deployability,"ue.; Close the milestone (should be 100% complete). Publish GitHub postrelease¶. On GitHub site “Draft a New Release” for anticipated or newly minted tag; Fill in frontmatter style and links from previous GitHub release; Fill in RN as cherry-pick to or edit on branch; “publish” release. This establishes release date for GitHub API. Publish psicode release¶. Copy a recent release page like https://github.com/psi4/psicode-hugo-website/blob/master/content/posts/v1p2.md; Edit its filename, title, date, image, and links; Execute https://api.github.com/repos/psi4/psi4/releases/latest and note the id field value; Use the id value in the shortcode call at the bottom by ghRN. Finalize release¶. Make new PR with; * edits to main README.md badges, python versions, etc.; * edits to CMakeLists.txt find_package(PythonLibsNew 3.6 REQUIRED); Tweet about release. Reset psi4meta for nightly operation¶; On both Linux and Mac:. After (post)release (not prerelease), in conda_build_config.yaml, edit ltrtver to a new “release.dev” label; After postrelease, unpin any dependencies in cbcy that needed older either ver or bld (e.g., v2rdm_casscf_bld); Edit psi4ver back to '' in cbcy; Edit source/git_tag back to master for psi4-multiout, psi4-docs; Edit build string back to 0 if psi4-multiout needed multiple passes; Edit kitandkapoodle.py back to *** stack; Check in all release, construct, recipe changes on Linux and Mac. Synchronize both to GitHub psi4meta; Copy meta.yaml and build.sh files to vMmp-prefixed files for the record.; Edit crontab back to 2am “norm”. Comment out “anom”. table of contents. Release Procedures; Annual; Pre-Release (e.g., v1.3rc1); Release (e.g., v1.3); Post-Release (e.g., v1.3.1); Update copyright year; Update samples; Collect new authors; Anticipate next release; Build Conda ecosystem stack; Assemble postrelease changes; Tweak Conda for postrelease; Do final pass before release tag; Tag (pre)release; Tag postrelease; Initialize release branch; Build Conda Psi4 stack ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/manage_release.html:19110,release,release,19110,psi4manual/1.8.x/manage_release.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/manage_release.html,1,['release'],['release']
Deployability,"ued in the output file. Type: boolean; Default: true. DO_CCD_DISP¶. Do CCD dispersion correction in SAPT2+, SAPT2+(3) or SAPT2+3?. Type: boolean; Default: false. DO_MBPT_DISP¶. Do MBPT dispersion correction in SAPT2+, SAPT2+(3) or SAPT2+3, if also doing CCD?. Type: boolean; Default: true. DO_THIRD_ORDER¶. Do compute third-order corrections?. Type: boolean; Default: false. SAPT0_E10¶. For SAPT0 only, compute only first-order electrostatics and exchange. The integrals are computed before any terms, so all integrals will be computed even if they are not needed for the requested term. Type: boolean; Default: false. SAPT0_E20DISP¶. For SAPT0 only, compute only second-order induction The integrals are computed before any terms, so all integrals will be computed even if they are not needed for the requested term. Type: boolean; Default: false. SAPT0_E20IND¶. For SAPT0 only, compute only second-order induction The integrals are computed before any terms, so all integrals will be computed even if they are not needed for the requested term. Type: boolean; Default: false. SAPT_MEM_FACTOR¶. Proportion of memory available for the DF-MP2 three-index integral buffers used to evaluate dispersion. Type: double; Default: 0.9. table of contents. SAPT; General; AIO_CPHF; AIO_DF_INTS; BASIS; CCD_E_CONVERGENCE; CCD_MAXITER; CCD_T_CONVERGENCE; DENOMINATOR_ALGORITHM; DENOMINATOR_DELTA; DF_BASIS_ELST; DF_BASIS_SAPT; D_CONVERGENCE; EXCH_SCALE_ALPHA; E_CONVERGENCE; FREEZE_CORE; INTS_TOLERANCE; MAXITER; MAX_CCD_DIISVECS; MIN_CCD_DIISVECS; NAT_ORBS_T2; NAT_ORBS_T3; NAT_ORBS_V4; NO_RESPONSE; OCC_TOLERANCE; PRINT; SAPT_LEVEL; SAPT_MEM_CHECK; SAPT_MEM_SAFETY. Expert; COUPLED_INDUCTION; DO_CCD_DISP; DO_MBPT_DISP; DO_THIRD_ORDER; SAPT0_E10; SAPT0_E20DISP; SAPT0_E20IND; SAPT_MEM_FACTOR. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Keywords by Module. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/autodir_options_c/module__sapt-1.html:7274,update,updated,7274,psi4manual/1.1.0/autodir_options_c/module__sapt-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodir_options_c/module__sapt-1.html,2,['update'],['updated']
Deployability,"ues. General¶. CC_NUM_THREADS¶. Number of threads. Type: integer; Default: 1. CORR_ANSATZ¶. The ansatz to use for MRCC computations. Type: string; Possible Values: SR, MK, BW, APBW; Default: MK. CORR_CCSD_T¶. The type of CCSD(T) computation to perform. Type: string; Possible Values: STANDARD, PITTNER; Default: STANDARD. CORR_CHARGE¶. The molecular charge of the target state. Type: integer; Default: 0. CORR_MULTP¶. The multiplicity, \(M_S(M_S+1)\), of the target state. Must be specified if different from the reference \(M_s\). Type: integer; Default: 1. CORR_WFN¶. The type of correlated wavefunction. Type: string; Possible Values: PT2, CCSD, MP2-CCSD, CCSD_T; Default: CCSD. COUPLING¶. The order of coupling terms to include in MRCCSDT computations. Type: string; Possible Values: NONE, LINEAR, QUADRATIC, CUBIC; Default: CUBIC. COUPLING_TERMS¶. Do include the terms that couple the reference determinants?. Type: boolean; Default: true. DAMPING_PERCENTAGE¶. The amount (percentage) of damping to apply to the amplitude updates. 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the amplitudes from the previous iteration being mixed into the current iteration) can help in cases where oscillatory convergence is observed. Type: double; Default: 0.0. DIAGONALIZE_HEFF¶. Do diagonalize the effective Hamiltonian?. Type: boolean; Default: false. DIAGONAL_CCSD_T¶. Do include the diagonal corrections in (T) computations?. Type: boolean; Default: true. DIIS_MAX_VECS¶. Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 7. DIIS_START¶. The number of DIIS vectors needed before extrapolation is performed. Type: integer; Default: 2. E_CONVERGENCE¶. Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. FAVG_CCSD_T¶. Do use the averaged Fock matrix over all references in (T) computa",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/autodir_options_c/module__psimrcc-1.html:1310,update,updates,1310,psi4manual/1.3.2/autodir_options_c/module__psimrcc-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/autodir_options_c/module__psimrcc-1.html,15,['update'],['updates']
Deployability,"ues.; If you encounter convergence issues inside adcc, the following parameters; are worth tweaking:. MAX_NUM_VECS: Specifies the maximal number of subspace vectors; in the Jacobi-Davidson scheme before a restart occurs. The defaults are usually; good, but do not be shy to increase this value if you encounter convergence problems.; NUM_GUESSES: By default adcc uses twice as many guess vectors as; states to be computed. Sometimes increasing this value by a few vectors can be helpful.; If you encounter a convergence to zero eigenvalues, than decreasing this parameter might; solve the problems. Built-in ADC(2) code¶; Code author: Masaaki Saitow; Section author: Masaaki Saitow. Warning; The built-in ADC(2) method may give incorrect results if; multiple roots are requested, due to an error in the Davidson solver,; and is no longer maintained. It is slated for removal in Psi4 1.7.; Use of the Psi interface to adcc instead is strongly recommended.; To use this code regardless, either do not have adcc installed, or; set qc_module builtin. The ADC code built into PSI4 is capable of ADC(2) computations; of singlet excited states only.; It makes use of the libtrans library for efficient and flexible; integral-transformation and also the libdpd library to; utilize molecular symmetry in the tensorial manipulations in framework; of the direct-product decomposition algorithm. By this feature, the Ritz; space and intermediate tensors are blocked according to the irreducible; representations of the point group, and the excited states that belong; to different symmetry are sought separately.; In the output of ADC, the ADC(2) results may look as follows:; -> 1 B1 state : 0.2565095 (a.u.), 6.9799824 (eV); Non-iterative: 0.2565636 (a.u.), 6.9814532 (eV); Occ Vir Coefficient; ---------------------------------------------; 3 0 -0.9017047264; 3 2 0.3038332241; 3 1 0.2907567119; 3 5 -0.0790167706; 3 4 -0.0425829926. Converged in 4 iteration.; Squared norm of the S component: 0.9315336; The ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/adc.html:12508,install,installed,12508,psi4manual/1.6.x/adc.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/adc.html,1,['install'],['installed']
Deployability,"ueue: # BFS within a fragment; for u in Queue: # find all white neighbors to vertex u; for i in White:; dist = p4const.psi_bohr2angstroms * math.sqrt(; (self.x(i) - self.x(u)) ** 2 +; (self.y(i) - self.y(u)) ** 2 +; (self.z(i) - self.z(u)) ** 2); if dist < vdW_diameter[self.symbol(u)] + \; vdW_diameter[self.symbol(i)]:; Queue.append(i) # if you find you, put in the queue; White.remove(i) # & remove it from the untouched list; Queue.remove(u) # remove focus from Queue; Black.append(u); Fragment[-1].append(int(u)) # add to group (0-indexed); Fragment[-1].sort() # preserve original atom ordering. if White: # can't move White -> Queue if empty; Queue.append(White[0]); White.remove(White[0]). return Fragment. [docs]def dynamic_variable_bind(cls):; """"""Function to dynamically add extra members to; the psi4.Molecule class. """"""; cls.__setattr__ = new_set_attr; cls.__getattr__ = new_get_attr; cls.BFS = BFS. dynamic_variable_bind(psi4.Molecule) # pass class type, not class instance. #; # Define geometry to be used by PSI4.; # The molecule created by this will be set in options.; #; # geometry(""; # O 1.0 0.0 0.0; # H 0.0 1.0 0.0; # H 0.0 0.0 0.0; #; [docs]def geometry(geom, name=""default""):; """"""Function to create a molecule object of name *name*; from the geometry in string *geom*. Permitted for user use but deprecated in; driver in favor of explicit molecule-passing. """"""; molecule = psi4.Molecule.create_molecule_from_string(geom); molecule.set_name(name). activate(molecule). return molecule. [docs]def activate(mol):; """"""Function to set molecule object *mol* as the current active molecule.; Permitted for user use but deprecated in driver in favor of explicit; molecule-passing. """"""; psi4.set_active_molecule(mol). Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    ; Psi4 [1.0.0 6a9a71b] » ; Module code ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/molutil.html:8172,update,updated,8172,psi4manual/1.0.0/_modules/molutil.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/molutil.html,1,['update'],['updated']
Deployability,"ugh triples with iterative quadruples (cheapest terms). ccsdtqp-1a; CC through quadruples with iterative quintuples (cheapest terms). ccsdtqph-1a; CC through quintuples with iterative sextuples (cheapest terms). ccsdt-1b; CC through doubles with iterative triples (cheaper terms). ccsdtq-1b; CC through triples with iterative quadruples (cheaper terms). ccsdtqp-1b; CC through quadruples with iterative quintuples (cheaper terms). ccsdtqph-1b; CC through quintuples with iterative sextuples (cheaper terms). cc2; approximate CC through doubles [details]. cc3; approximate CC through triples [details]. cc4; approximate CC through quadruples. cc5; approximate CC through quintuples. cc6; approximate CC through sextuples. ccsdt-3; CC through doubles with iterative triples (all but the most expensive terms). ccsdtq-3; CC through triples with iterative quadruples (all but the most expensive terms). ccsdtqp-3; CC through quadruples with iterative quintuples (all but the most expensive terms). ccsdtqph-3; CC through quintuples with iterative sextuples (all but the most expensive terms). Frozen-core approximation is also supported in the MRCC interface.; To optimize CH4 with CCSDT freezing the 1s on carbon, run:; molecule H2O {; O; H 1 r; H 1 r 2 104.5. r = 1.0; }. set {; basis cc-pVDZ; freeze_core true; }. optimize('ccsdt'). Interface Details¶. MRCC methods¶. MRCC_METHOD; Method; Description. 1; CC. 2; CC(n-1)[n]. 3; CC(n-1)(n); (CC(n-1)[n] energy is also calculated). 4; CC(n-1)(n)_L; (CC(n-1)[n] and CC(n-1)(n) energies are also calculated). 5; CC(n)-1a. 6; CC(n)-1b. 7; CCn. 8; CC(n)-3. table of contents. Interface to MRCC by M. Kállay; Installation; Running MRCC; Interface Details. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to MRCC by M. Kállay. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/mrcc.html:5414,update,updated,5414,psi4manual/1.8.x/mrcc.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/mrcc.html,1,['update'],['updated']
Deployability,"ugh triples with iterative quadruples (cheapest terms). ccsdtqp-1a; CC through quadruples with iterative quintuples (cheapest terms). ccsdtqph-1a; CC through quintuples with iterative sextuples (cheapest terms). ccsdt-1b; CC through doubles with iterative triples (cheaper terms). ccsdtq-1b; CC through triples with iterative quadruples (cheaper terms). ccsdtqp-1b; CC through quadruples with iterative quintuples (cheaper terms). ccsdtqph-1b; CC through quintuples with iterative sextuples (cheaper terms). cc2; approximate CC through doubles [details]. cc3; approximate CC through triples [details]. cc4; approximate CC through quadruples. cc5; approximate CC through quintuples. cc6; approximate CC through sextuples. ccsdt-3; CC through doubles with iterative triples (all but the most expensive terms). ccsdtq-3; CC through triples with iterative quadruples (all but the most expensive terms). ccsdtqp-3; CC through quadruples with iterative quintuples (all but the most expensive terms). ccsdtqph-3; CC through quintuples with iterative sextuples (all but the most expensive terms). Frozen-core approximation is also supported in the MRCC interface.; To optimize CH4 with CCSDT freezing the 1s on carbon, run:; molecule H2O {; O; H 1 r; H 1 r 2 104.5. r = 1.0; }. set {; basis cc-pVDZ; freeze_core true; }. optimize('ccsdt'). Interface Details¶. MRCC methods¶. MRCC_METHOD; Method; Description. 1; CC. 2; CC(n-1)[n]. 3; CC(n-1)(n); (CC(n-1)[n] energy is also calculated). 4; CC(n-1)(n)_L; (CC(n-1)[n] and CC(n-1)(n) energies are also calculated). 5; CC(n)-1a. 6; CC(n)-1b. 7; CCn. 8; CC(n)-3. table of contents. Interface to MRCC by M. Kállay; Installation; Running MRCC; Interface Details. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.9.1;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to MRCC by M. Kállay. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 08 February 2024 09:32PM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/mrcc.html:5414,update,updated,5414,psi4manual/1.9.x/mrcc.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/mrcc.html,1,['update'],['updated']
Deployability,"ugh triples with iterative quadruples (cheapest terms). mrccsdtqp-1a; CC through quadruples with iterative quintuples (cheapest terms). mrccsdtqph-1a; CC through quintuples with iterative sextuples (cheapest terms). mrccsdt-1b; CC through doubles with iterative triples (cheaper terms). mrccsdtq-1b; CC through triples with iterative quadruples (cheaper terms). mrccsdtqp-1b; CC through quadruples with iterative quintuples (cheaper terms). mrccsdtqph-1b; CC through quintuples with iterative sextuples (cheaper terms). mrcc2; approximate CC through doubles. mrcc3; approximate CC through triples. mrcc4; approximate CC through quadruples. mrcc5; approximate CC through quintuples. mrcc6; approximate CC through sextuples. mrccsdt-3; CC through doubles with iterative triples (all but the most expensive terms). mrccsdtq-3; CC through triples with iterative quadruples (all but the most expensive terms). mrccsdtqp-3; CC through quadruples with iterative quintuples (all but the most expensive terms). mrccsdtqph-3; CC through quintuples with iterative sextuples (all but the most expensive terms). Frozen-core approximation is also supported in the MRCC interface.; To optimize CH4 with CCSDT freezing the 1s on carbon, run:; molecule H2O {; O; H 1 r; H 1 r 2 104.5. r = 1.0; }. set {; basis cc-pVDZ; freeze_core true; }. optimize('mrccsdt'). Interface Details¶. MRCC methods¶. MRCC_METHOD; Method; Description. 1; CC. 2; CC(n-1)[n]. 3; CC(n-1)(n); (CC(n-1)[n] energy is also calculated). 4; CC(n-1)(n)_L; (CC(n-1)[n] and CC(n-1)(n) energies are also calculated). 5; CC(n)-1a. 6; CC(n)-1b. 7; CCn. 8; CC(n)-3. table of contents. Interface to MRCC by M. Kállay; Installation; Running MRCC; Interface Details. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.6;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to MRCC by M. Kállay. © Copyright 2022, The Psi4 Project.; Last updated on Thursday, 19 May 2022 08:57PM.; Created using Sphinx 4.5.0.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/mrcc.html:4676,update,updated,4676,psi4manual/1.6.x/mrcc.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/mrcc.html,1,['update'],['updated']
Deployability,"ugins}}}; Which existing template to model off of. """"""; name = sanitize_name(name); template_path = join_path(plugin_path, template). # Create, but do not overwrite, plugin directory; if os.path.exists(name):; tty.error(""""""Plugin directory ""{}"" already exists."""""".format(name)). # Do a first pass to determine the template temp_files; template_files = os.listdir(template_path); source_files = []; for temp_file in template_files:; target_file = temp_file. if temp_file.endswith('.template'):; target_file = temp_file[0:-9]. if temp_file.endswith('.cc.template'):; source_files.append(target_file). tty.hline(""""""Creating ""{}"" with ""{}"" template."""""".format(name, template)). os.mkdir(name); created_files = []; for source_file in template_files:. # Skip swp files; if source_file.endswith("".swp""):; continue. target_file = source_file. if source_file.endswith('.template'):; target_file = source_file[0:-9]. try:; print(join_path(template_path, source_file)); with open(join_path(template_path, source_file), 'r') as temp_file:; contents = temp_file.read(); except IOError as err:; tty.error(""""""Unable to open {} template."""""".format(source_file)); tty.error(err); sys.exit(1). contents = contents.replace('@plugin@', name); contents = contents.replace('@Plugin@', name.capitalize()); contents = contents.replace('@PLUGIN@', name.upper()); contents = contents.replace('@sources@', ' '.join(source_files)). try:; with open(join_path(name, target_file), 'w') as temp_file:; temp_file.write(contents); created_files.append(target_file); except IOError as err:; tty.error(""""""Unable to create {}"""""".format(target_file)); tty.error(err); sys.exit(1). tty.info(""Created plugin files (in {} as {}): "".format(name, template), "", "".join(created_files)). sys.exit(0). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .  · ; 1.6;  · . PSI4. Module code; psi4.driver.pluginutil. © Copyright 2022, The Psi4 Project.; Last updated on Thursday, 19 May 2022 08:57PM.; Created using Sphinx 4.5.0.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/pluginutil.html:5732,update,updated,5732,psi4manual/1.6.x/_modules/psi4/driver/pluginutil.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/pluginutil.html,1,['update'],['updated']
Deployability,"uilding Psi4; How to configure Python for building Psi4; What Python is Psi4 running; How to fix “undefined symbol: _Py_FalseStruct”; How to use gdb and lldb with Psi4; How to see the actual compiling commands (or errors) with cmake; How to highlight git merge conflicts in vi; How to handle “runtime library may be hidden” when building with Anaconda Python; How to set up the scratch directory; How do I retain specific Psi4 scratch files; How to use Psi4 within a PBS queue; How to update and rebuild Psi4; How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation; How to refer to Psi4; How to get a Psi4 logo file; How to use a local Add-On repository in the Psi4 build. Installing from Binary; How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; Quick Installation; Detailed Installation of Miniconda; Detailed Installation of PSI4; Useful Commands. Scratch Files¶; One very important part of user configuration at the end of the; installation process; is to tell PSI4 where to write its temporary; (“scratch”) files. Electronic structure packages like PSI4 can; create rather large temporary disk files. It is very important to; ensure that PSI4 is writing its temporary files to a disk drive; physically attached to the computer running the computation. If it; is not, it will significantly slow down the program and the network.; By default, PSI4 will write temporary files to /tmp, but this; directory is often not large enough for typical computations. Therefore,; you need to (a) make sure there is a sufficiently large directory on a; locally attached disk drive (100GB–1TB or more, depending",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/external-1.html:3237,install,install,3237,psi4manual/1.4.0/external-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/external-1.html,28,"['install', 'update']","['install', 'installer', 'update']"
Deployability,"uilds outside top-level-psi4-dir are permitted. How to save configuration settings for a future compilation¶; Create a file like do-configure with the cmake command and options; on one line.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10>>> cd {top-level-psi4-dir}; >>> cat do-configure; cmake -H. -B{objdir} \; -DCMAKE_INSTALL_PATH=""/Users/me/psi4"" \; -DCMAKE_PREFIX_PATH=""/Users/me/externals/install-libint"" \; -DMAX_AM_ERI=6 \; -DENABLE_gdma=ON \; -DBUILD_SHARED_LIBS=ON; >>> chmod u+x do-configure; >>> ./do-configure. What is the directory layout of the installed or staged Psi4¶; After compilation (cd objdir && make), a directory structure like the; below will exist at objdir/stage. This may be tested and used; just like a full installation.; After installation (cd objdir && make && make install), a directory; structure like the below will exist at /prefix. This is a full; installation.; /; bin/ (executables for psi4 + any external proj); bin/psi4 (psi4 executable, actually just a py script); include/ (installed headers for psi4 + any external proj); include/psi4/ (header files for #include-ing); include/psi4/psi4-dec.h (primary psi4 header); include/psi4/masses.h (a project-wide psi4 header); include/psi4/libmints/ (psi4 library headers); include/psi4/libfock/ (ditto); share/ (read-only arch-indep files for psi4 + any external proj); share/cmake/psi4/ (files for detecting installed targets); share/cmake/psi4/psi4Config.cmake (psi4 build/install info); share/cmake/psi4/psi4ConfigVersion.cmake (psi4 cmake version info); share/doc/psi4/html/ (sphinx html documentation); share/psi4/ (text files needed by psi4); share/psi4/basis (basis sets); share/psi4/plugins (plugin template files); share/psi4/fsapt (fsapt scripts); share/psi4/samples/ (sample input files); lib/ (shared libraries and py modules for psi4 + any external proj); # ordinary; lib/psi4/ (object files); lib/psi4/driver/ (py-side, uncompiled); lib/psi4/header.py (prints file header); lib/psi4/metadata.py (psi4 version info); l",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/build_planning-1.html:21034,install,installed,21034,psi4manual/1.3.2/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/build_planning-1.html,2,['install'],['installed']
Deployability,"uired]¶. Validated by:. set_driver. field findifrec: Dict[str, Any] = {}¶. field metameta: Dict[str, Any] = {}¶. field method: str [Required]¶. field molecule: Any = None¶. Validated by:. set_molecule. field task_list: Dict[str, BaseComputer] = {}¶. computer¶; alias of AtomicComputer. build_tasks(obj, **kwargs)[source]¶. compute(client=None)[source]¶; Run each job in task list. Parameters:; client (Optional[FractalClient]) – . get_psi_results(return_wfn=False)[source]¶; Called by driver to assemble results into FiniteDifference-flavored QCSchema,; then reshape and return them in the customary Psi4 driver interface: (e/g/h, wfn). Parameters:; return_wfn (bool) – Whether to additionally return the dummy Wavefunction; calculation result as the second element of a tuple. Contents are:. undisplaced molecule; compute basis if simple, else dummy basis def2-svp; e/g/h member data; QCVariables; module. Return type:; Union[float, Matrix, Tuple[Union[float, Matrix], Wavefunction]]. Returns:. ret – Gradient or Hessian according to self.driver.; wfn – Wavefunction described above when return_wfn specified. get_results(client=None)[source]¶; Return results as FiniteDifference-flavored QCSchema. Return type:; AtomicResult. Parameters:; client (Optional[FractalClient]) – . plan()[source]¶. validator set_driver  »  driver[source]¶. validator set_molecule  »  molecule[source]¶. table of contents. Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); Visualization of Normal Modes; Molden Interface Keywords; NORMAL_MODES_WRITE; WRITER_FILE_LABEL. psi4.driver.qcdb.vib Module; Functions. API. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Psithon Functions: Invoking a Calculation; Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(). © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/freq.html:11296,update,updated,11296,psi4manual/1.7.x/freq.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/freq.html,1,['update'],['updated']
Deployability,"uitable computer; >>> ldd --version; ldd (GNU libc) 2.5; # suitable computer; >>> ldd --version; ldd (GNU libc) 2.17. It is of greatest importance that the PSI4 executable be linked against conda libpython.so not against any system libpython.so. This is arranged by setting RPATH to seek libraries relative to executable (thanks, conda binary relocation routine!). The conda PSI4 executable is not vulnerable to interference from your LD_LIBRARY_PATH settings. Below shows a well-linked executable. no libraries “not found”; fundamental libraries like libc, ld-linux, pthreads found system libraries to link against; libpython linked against conda python not system python; libm is linked against conda or system; blas, c++, and gcc libraries are absent because statically linked. 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14>>> conda install conda-build # needed for next command; >>> conda inspect linkages psi4; python-2.7.9-2:; libpython2.7.so.1.0 (lib/libpython2.7.so.1.0); system-5.8-1:; libm.so.6 (lib/libm.so.6); system:; libc.so.6 (/lib64/libc.so.6); libdl.so.2 (/lib64/libdl.so.2); libpthread.so.0 (/lib64/libpthread.so.0); librt.so.1 (/lib64/librt.so.1); libutil.so.1 (/lib64/libutil.so.1); linux-vdso.so.1 (); not found:. table of contents. Conda Binary Distribution; How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; Quick Installation; Detailed Installation of Miniconda; Detailed Installation of PSI4; Useful Commands; Troubleshooting. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Installation and Runtime Configuration. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/conda-1.html:20263,install,install,20263,psi4manual/1.1.0/conda-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/conda-1.html,16,"['install', 'update']","['install', 'installer', 'update', 'updated']"
Deployability,"uite again. Step 4: Installation; Once testing is complete, installation into $prefix is accomplished by; running make install in $objdir. Executable modules are installed in; $prefix/bin, include files in $prefix/include, libraries in $prefix/lib, and; basis set data and various control structures in $prefix/share. Step 5: Building Documentation; This is not recommended because all of the documentation should be; available at http://sirius.chem.vt.edu/psi4manual/latest/index.html; (link “docs” off http://www.psicode.org), and it is automatically updated. However,; if your system has the appropriate utilities (notably the sphinx package; and LaTeX), you may build the package documentation from the top-level; $objdir by running make doc. The resulting files will appear in the; $prefix/doc area. Step 6: Cleaning; All object files and libraries can be removed to save disk space by running; make clean in $objdir. Step 7: User Configuration; After the PSI4 package has been successfully installed, the user will need; to add the installation directory into his/her path. If the package has; been installed in the default location /usr/local/psi, then in C shell,; the user should add something like the following to their .cshrc file:; setenv PSI /usr/local/psi; set path = ($path $PSI/bin). Next, the user needs to tell the PSI4 I/O manager how to handle scratch files.; Identify the path to a fast scratch disk for which the user has write access.; If the local /tmp volume is large enough, it might be used.; However, a dedicated scratch volume (using RAID0 striping for speed) is; recommended. Warning; Scratch should NOT be a NFS-mounted volume, as writes to a; remote disk over the network can be very slow and can tie up the network; and negatively impact other users. Specify scratch location by editing the .cshrc file to set the scratch; environment variable PSI_SCRATCH. If the selected location is; /scratch/user, add something like the following:; setenv PSI_SCRATCH /scratch/use",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/installfile.html:18604,install,installed,18604,psi4manual/4.0b3/installfile.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/installfile.html,6,['install'],"['installation', 'installed']"
Deployability,"ulant and orbital guess for the variationally orbital-optimized DFT methods. Currently only available for ALGORITHM = SIMULTANEOUS. Type: conv double; Default: 1e-3. MAXITER¶. Maximum number of macro- or micro-iterations for both energy and response equations. Type: integer; Default: 40. ODC_GUESS¶. Whether to perform a guess DC-06 or DC-12 computation for ODC-06 or ODC-12 methods, respectively. Currently only available for ALGORITHM = SIMULTANEOUS. Type: boolean; Default: false. OPDM¶. Compute a (relaxed) one-particle density matrix? Can be set manually. Set internally for property and gradient computations. Type: boolean; Default: false. QC_COUPLING¶. Controls whether to include the coupling terms in the DCT electronic Hessian (for ALOGRITHM = QC with QC_TYPE = SIMULTANEOUS only). Type: boolean; Default: false. QC_TYPE¶. Controls the type of the quadratically-convergent algorithm (effective for ALGORITHM = QC). If set to TWOSTEP the Newton-Raphson equations are only solved for the orbital updates, the cumulant is updated using the standard Jacobi algorithm. If set to SIMULTANEOUS both cumulant and orbitals are updated in a single Newton-Raphson step. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS; Default: SIMULTANEOUS. REFERENCE¶. Reference wavefunction type. Type: string; Possible Values: UHF, RHF, ROHF; Default: RHF. RESPONSE_ALGORITHM¶. Algorithm to use for the solution of DC-06 response equations in computation of analytic gradients and * properties. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS; Default: TWOSTEP. R_CONVERGENCE¶. Convergence criterion for the RMS of the residual vector in density cumulant updates, as well as the solution of the density cumulant and orbital response equations. In the orbital updates controls the RMS of the SCF error vector. Type: conv double; Default: 1e-10. THREE_PARTICLE¶. Whether to compute three-particle energy correction or not. Type: string; Possible Values: NONE, PERTURBATIVE; Default: NONE. Expert¶. CACHELE",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodir_options_c/module__dct-1.html:3056,update,updates,3056,psi4manual/1.4.0/autodir_options_c/module__dct-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodir_options_c/module__dct-1.html,18,['update'],"['updated', 'updates']"
Deployability,"ulation; Spectroscopic Constants for Diatomics. Spectroscopic Constants for Diatomics¶; Code author: Andrew C. Simmonett. psi4.driver.diatomic.anharmonicity(rvals, energies, plot_fit='', mol=None)[source]¶; Generates spectroscopic constants for a diatomic molecules.; Fits a diatomic potential energy curve using a weighted least squares approach; (c.f. https://doi.org/10.1063/1.4862157, particularly eqn. 7), locates the minimum; energy point, and then applies second order vibrational perturbation theory to obtain spectroscopic; constants. Any number of points greater than 4 may be provided, and they should bracket the minimum.; The data need not be evenly spaced, and can be provided in any order. The data are weighted such that; those closest to the minimum have highest impact.; A dictionary with the following keys, which correspond to spectroscopic constants, is returned:. Parameters. rvals (List) – The bond lengths (in Angstrom) for which energies are; provided, of length at least 5 and equal to the length of the energies array; energies (List) – The energies (Eh) computed at the bond lengths in the rvals list; plot_fit (str) – A string describing where to save a plot of the harmonic and anharmonic fits, the; inputted data points, re, r0 and the first few energy levels, if matplotlib; is available. Set to ‘screen’ to generate an interactive plot on the screen instead. If a filename is; provided, the image type is determined by the extension; see matplotlib for supported file types. Return type; Dict. Returns; (dict) Keys: “re”, “r0”, “we”, “wexe”, “nu”, “ZPVE(harmonic)”, “ZPVE(anharmonic)”, “Be”, “B0”, “ae”, “De”; corresponding to the spectroscopic constants in cm-1. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Psithon Functions: Invoking a Calculation; Spectroscopic Constants for Diatomics. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/diatomic-1.html:2067,update,updated,2067,psi4manual/1.4.0/diatomic-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/diatomic-1.html,2,['update'],['updated']
Deployability,"ulation; Spectroscopic Constants for Diatomics. Spectroscopic Constants for Diatomics¶; Code author: Andrew C. Simmonett. psi4.driver.diatomic.anharmonicity(rvals, energies, plot_fit='', mol=None)[source]¶; Generates spectroscopic constants for a diatomic molecules.; Fits a diatomic potential energy curve using a weighted least squares approach; (c.f. https://doi.org/10.1063/1.4862157, particularly eqn. 7), locates the minimum; energy point, and then applies second order vibrational perturbation theory to obtain spectroscopic; constants. Any number of points greater than 4 may be provided, and they should bracket the minimum.; The data need not be evenly spaced, and can be provided in any order. The data are weighted such that; those closest to the minimum have highest impact.; A dictionary with the following keys, which correspond to spectroscopic constants, is returned:. Parameters. rvals (List) – The bond lengths (in Angstrom) for which energies are; provided, of length at least 5 and equal to the length of the energies array; energies (List) – The energies (Eh) computed at the bond lengths in the rvals list; plot_fit (str) – A string describing where to save a plot of the harmonic and anharmonic fits, the; inputted data points, re, r0 and the first few energy levels, if matplotlib; is available. Set to ‘screen’ to generate an interactive plot on the screen instead. If a filename is; provided, the image type is determined by the extension; see matplotlib for supported file types. Return type; Dict. Returns; (dict) Keys: “re”, “r0”, “we”, “wexe”, “nu”, “ZPVE(harmonic)”, “ZPVE(anharmonic)”, “Be”, “B0”, “ae”, “De”; corresponding to the spectroscopic constants in cm-1. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Psithon Functions: Invoking a Calculation; Spectroscopic Constants for Diatomics. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/diatomic-1.html:2067,update,updated,2067,psi4manual/1.5.0/diatomic-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/diatomic-1.html,2,['update'],['updated']
Deployability,"ule method. has_symmetry_element() LibmintsMolecule method. has_zmatrix() LibmintsMolecule method. HBC6 module, [1]. HD_AVG (DETCI). HD_OTF (DETCI). HEFF4 (PSIMRCC). HEFF_PRINT (PSIMRCC). HESS_UPDATE (OPTKING). HESS_UPDATE_LIMIT (OPTKING). HESS_UPDATE_LIMIT_MAX (OPTKING). HESS_UPDATE_LIMIT_SCALE (OPTKING). HESS_UPDATE_USE_LAST (OPTKING). hessian() in module driver. HESSIAN_WRITE (FINDIF). HF. HFTOTALENERGY. highest_1() in module wrappers. HSG module, [1]. HTBH module, [1]. HTR40 module, [1]. I. ICORE (DETCI). IGNORE_TAU (DCFT). import_ignorecase() in module p4util.procutil. IncompleteAtomError. inertia_tensor() LibmintsMolecule method. Molecule method. inertia_tensor_partial() Molecule method. inertial_system() Molecule method. inertial_system_partial() Molecule method. init_with_checkpoint() LibmintsMolecule method. init_with_io() LibmintsMolecule method. init_with_xyz() qcdb.libmintsmolecule.LibmintsMolecule class method. qcdb.molecule.Molecule class method. inputparser module. installing. INTCOS_GENERATE_EXIT (OPTKING). interactive module. INTERFRAG_DIST_INV (OPTKING). INTERFRAG_HESS (OPTKING). INTERFRAG_MODE (OPTKING). INTERFRAG_STEP_LIMIT (OPTKING). INTERFRAGMENT_CONNECT (OPTKING). INTERNAL_ROTATIONS (MCSCF). INTRAFRAG_HESS (OPTKING). INTRAFRAG_STEP_LIMIT (OPTKING). INTRAFRAG_STEP_LIMIT_MAX (OPTKING). INTRAFRAG_STEP_LIMIT_MIN (OPTKING). INTS_TOLERANCE (CCDENSITY). (CCENERGY). (CCSORT). (DCFT). (DFMP2). (MRCC). (SAPT). (SCF). (TRANSQT). (TRANSQT2). invalidate() CartesianEntry method. CoordValue method. ZMatrixEntry method. ip_fitting() in module frac. IP_POLES (OCC). IRC; . geometry optimization. IRC_DIRECTION (OPTKING). IRC_STEP_SIZE (OPTKING). IRC_STOP (OPTKING). irrep_labels() LibmintsMolecule method. is_axis() LibmintsMolecule method. is_computed() CoordEntry method. is_equivalent_to() CoordEntry method. is_ghosted() CoordEntry method. is_linear_planar() LibmintsMolecule method. is_plane() LibmintsMolecule method. is_required() Keyword method. Section method",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/genindex.html:25700,install,installing,25700,psi4manual/4.0b5/genindex.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/genindex.html,1,['install'],['installing']
Deployability,"ule)[1]; basename = os.path.splitext(filename)[0]; div = '=' * len(basename). module_choices.append(basename); DSD[basename] = {}. M = ast.parse(''.join(open(module))); DS = ast.get_docstring(M); if not DS:; DS = """"; DS = str.replace(DS, '|dl|', '-->'); DS = str.replace(DS, '|dr|', '<--'); DS = str.replace(DS, ""``'"", ''); DS = str.replace(DS, ""'``"", ''). lst = DS.split(""\n- **""). #DSD[basename]['general'] = str.replace(lst[0], '|', ''); DSD[basename]['general'] = lst[0].split('\n'). try:; DSD[basename]['cp'] = [section for section in lst if section.startswith(""cp"")][0]; except IndexError:; DSD[basename]['cp'] = None. try:; DSD[basename]['rlxd'] = [section for section in lst if section.startswith(""rlxd"")][0]; except IndexError:; DSD[basename]['rlxd'] = None. try:; DSD[basename]['benchmark'] = [section for section in lst if section.startswith(""benchmark"")][0]; except IndexError:; DSD[basename]['benchmark'] = None. try:; #DSD[basename]['subset'] = [section for section in lst if section.startswith(""subset"")][0]; temp = [section for section in lst if section.startswith(""subset"")][0].splitlines(); temp = temp[2:]. result = {}; for item in temp:; item = item.lstrip("" -""); try:; key, val = item.split("" "", 1); result[key] = val; except ValueError:; result[item] = """". DSD[basename]['subset'] = result. except IndexError:; DSD[basename]['subset'] = {"""": 'No subsets available'}. return DSD. # print '\ngeneral\n\n', DSD[basename]['general']; # print '\ncp\n\n', DSD[basename]['cp']; # print '\nrlxd\n\n', DSD[basename]['rlxd']; # print '\nbenchmark\n\n', DSD[basename]['benchmark']; # print '\nsubset\n\n', DSD[basename]['subset']. #print ' %-12s %s' % ('[' + basename + ']', DSD[basename]['general'][0]). #print 'DSD2\n', DSD['S22']['subset']. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    ; PSI4 [beta5] » ; Module code ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/_modules/qcdb/dbproc.html:3619,update,updated,3619,psi4manual/4.0b5/_modules/qcdb/dbproc.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/_modules/qcdb/dbproc.html,1,['update'],['updated']
Deployability,"ule]); Prepare QCSchema Provenance with PSI4 credentials. sanitize_method(name); Replace characters in method name so that suitable for function name or Sphinx table anchor (both as-is) or HTML table link (replace underscore in returned string by dash). set_memory(inputval[, execute, quiet]); Reset the total memory allocation. set_module_options(module, options_dict); Sets Psi4 module options from a module specification and input dictionary. set_options(options_dict[, verbose]); Sets Psi4 options from an input dictionary. spectrum(*, poles, residues[, kind, ...]); One-photon absorption (OPA) or electronic circular dichroism (ECD) spectra with phenomenological line broadening. state_to_atomicinput(*, driver, method[, ...]); Form a QCSchema for job input from the current state of PSI4 settings. Classes¶. DIIS([max_vec, removal_policy]); An object to assist in the DIIS extrpolation procedure. Gaussian(domain, gamma); Gaussian function on domain, centered at x_0 with broadening gamma. InPsight(molecule); POV-Ray visualization. Lineshape(domain, gamma); Lineshape ABC. Lorentzian(domain, gamma); Lorentzian function on domain, centered at x_0 with broadening gamma. OptionState(option[, module]); Store the state (value and changed status) of a single option. OptionsState(*largs); Store multiple OptionState() objects. SolverEngine(); Abstract Base Class defining the API for a matrix-vector product object required by solvers. Class Inheritance Diagram¶. table of contents. PSI4 API: Linking C++ and Python; psi4.core Module; Functions; Classes; Class Inheritance Diagram. psi4.driver Package; Functions; Classes; Class Inheritance Diagram. psi4.driver.p4util Package; Functions; Classes; Class Inheritance Diagram. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/psi4api.html:29267,update,updated,29267,psi4manual/master/psi4api.html,https://psicode.org,https://psicode.org/psi4manual/master/psi4api.html,1,['update'],['updated']
Deployability,"ules    .    .    .    .  · ; 1.4;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to SIMINT by B. Pritchard. Interface to SIMINT by B. Pritchard¶; Code author: Benjamin P. Pritchard; Section author: Lori A. Burns. These are the vectorized implementation of the Obara-Saika (OS) method of; calculating electron repulsion integrals developed by B. Pritchard and; interfaced into libmints. Enabling simint and adding set; integral_package simint (do this in ~/.psi4rc for universal effect); runs libderiv from Libint for derivative integrals and simint for; non-derivative integrals. Note that present AM maximum is $$(gg|gg)$$. Warning; simint seems to be having some problems with Intel 2018 compilers. presently disabled in conda package. Installation¶; Binary. SIMINT is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell).; The conda package is compiled to least-common-denominator, namely SSE instruction set.; If using the PSI4 binary, simint has already been installed alongside.; If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; simint can be obtained through conda install simint -c psi4.; Then enable it as a feature with ENABLE_simint,; hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect simint and activate dependent code. To remove a conda installation, conda remove simint. Source. If using PSI4 built from source and you want simint built from; from source also,; enable it as a feature with ENABLE_simint,; and let the build system fetch and build it and activate dependent code. How to configure simint for building Psi4¶; Role and Dependencies. Role — In PSI4, simint is a library that provides alternate; integrals.; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) simint; Upstream Dependencies — simint \(\Leftarrow\) None. CMake Variables. ENABLE_simint — CMake variable toggling whether PSI4 builds with simint; CMAKE_PREFI",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/simint-1.html:1078,install,installed,1078,psi4manual/1.4.0/simint-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/simint-1.html,2,['install'],['installed']
Deployability,"ules    .    .    .    .  · ; 1.5;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to SIMINT by B. Pritchard. Interface to SIMINT by B. Pritchard¶; Code author: Benjamin P. Pritchard; Section author: Lori A. Burns. These are the vectorized implementation of the Obara-Saika (OS) method of; calculating electron repulsion integrals developed by B. Pritchard and; interfaced into libmints. Enabling simint and adding set; integral_package simint (do this in ~/.psi4rc for universal effect); runs libderiv from Libint for derivative integrals and simint for; non-derivative integrals. Note that present AM maximum is $$(gg|gg)$$. Warning; simint seems to be having some problems with Intel 2018 compilers. presently disabled in conda package. Installation¶; Binary. SIMINT is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell).; The conda package is compiled to least-common-denominator, namely SSE instruction set.; If using the PSI4 binary, simint has already been installed alongside.; If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; simint can be obtained through conda install simint -c psi4.; Then enable it as a feature with ENABLE_simint,; hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect simint and activate dependent code. To remove a conda installation, conda remove simint. Source. If using PSI4 built from source and you want simint built from; from source also,; enable it as a feature with ENABLE_simint,; and let the build system fetch and build it and activate dependent code. How to configure simint for building Psi4¶; Role and Dependencies. Role — In PSI4, simint is a library that provides alternate; integrals.; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) simint; Upstream Dependencies — simint \(\Leftarrow\) None. CMake Variables. ENABLE_simint — CMake variable toggling whether PSI4 builds with simint; CMAKE_PREFI",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/simint-1.html:1078,install,installed,1078,psi4manual/1.5.0/simint-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/simint-1.html,2,['install'],['installed']
Deployability,"ules    .    .    .    .  · ; 1.6;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to SIMINT by B. Pritchard. Interface to SIMINT by B. Pritchard¶; Code author: Benjamin P. Pritchard; Section author: Lori A. Burns. These are the vectorized implementation of the Obara-Saika (OS) method of; calculating electron repulsion integrals developed by B. Pritchard and; interfaced into libmints. Enabling simint and adding set; integral_package simint (do this in ~/.psi4rc for universal effect); runs libderiv from Libint for derivative integrals and simint for; non-derivative integrals. Note that present AM maximum is $$(gg|gg)$$. Warning; simint seems to be having some problems with Intel 2018 compilers. presently disabled in conda package. Installation¶; Binary. SIMINT is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell).; The conda package is compiled to least-common-denominator, namely SSE instruction set.; If using the PSI4 binary, simint has already been installed alongside.; If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; simint can be obtained through conda install simint -c psi4.; Then enable it as a feature with ENABLE_simint,; hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect simint and activate dependent code. To remove a conda installation, conda remove simint. Source. If using PSI4 built from source and you want simint built from; from source also,; enable it as a feature with ENABLE_simint,; and let the build system fetch and build it and activate dependent code. How to configure simint for building Psi4¶; Role and Dependencies. Role — In PSI4, simint is a library that provides alternate; integrals.; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) simint; Upstream Dependencies — simint \(\Leftarrow\) None. CMake Variables. ENABLE_simint — CMake variable toggling whether PSI4 builds with simint; CMAKE_PREFI",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/simint.html:1078,install,installed,1078,psi4manual/1.6.x/simint.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/simint.html,1,['install'],['installed']
Deployability,"ules    .    .    .    .  · ; 1.7;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to SIMINT by B. Pritchard. Interface to SIMINT by B. Pritchard¶; Code author: Benjamin P. Pritchard; Section author: Lori A. Burns. These are the vectorized implementation of the Obara-Saika (OS) method of; calculating electron repulsion integrals developed by B. Pritchard and; interfaced into libmints. Enabling simint and adding set; integral_package simint (do this in ~/.psi4rc for universal effect); runs libderiv from Libint for derivative integrals and simint for; non-derivative integrals. Note that present AM maximum is $$(gg|gg)$$. Warning; simint seems to be having some problems with Intel 2018 compilers. presently disabled in conda package. Installation¶; Binary. SIMINT is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell).; The conda package is compiled to least-common-denominator, namely SSE instruction set.; If using the PSI4 binary, simint has already been installed alongside.; If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; simint can be obtained through conda install simint -c psi4.; Then enable it as a feature with ENABLE_simint,; hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect simint and activate dependent code. To remove a conda installation, conda remove simint. Source. If using PSI4 built from source and you want simint built from; from source also,; enable it as a feature with ENABLE_simint,; and let the build system fetch and build it and activate dependent code. How to configure simint for building Psi4¶; Role and Dependencies. Role — In PSI4, simint is a library that provides alternate; integrals.; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) simint; Upstream Dependencies — simint \(\Leftarrow\) None. CMake Variables. ENABLE_simint — CMake variable toggling whether PSI4 builds with simint; CMAKE_PREFI",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/simint.html:1078,install,installed,1078,psi4manual/1.7.x/simint.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/simint.html,1,['install'],['installed']
Deployability,"ult. CUBIC_GRID_OVERAGE¶. CubicScalarGrid spatial extent in bohr [O_X, O_Y, O_Z]. Defaults to 4.0 bohr each. Type: array; Default: No Default. Orbital Visualization with VMD¶; Included in Psi4 is functionality to automatically render specified surfaces, including molecular orbitals,; densities, and basis functions, using VMD. The vmd_cube.py script takes the .cube files generated; in a calculation and generates images alinged with user-input specifications. The script is located; in psi4//share/scripts/vmd_cube.py. Script Prerequisites¶. VMD must be installed, and it can be downloaded for free at (http://www.ks.uiuc.edu/Research/vmd/). Additionally,; the script needs to know where to find the VMD executable, and this is defined as VMDPATH. VMDPATH must be defined as; an environment variable.; To generate images with multiple surfaces, ImageMagick must also be installed. ImageMagick is a free program which; can be installed using homebrew/pip or from http://www.imagemagick.org/script/binary-releases.php .; With ImageMagick installed, an environment variable called MONTAGE needs to be created which points to the montage executable.; This executable can be found in the /bin/ sub-directory wherever ImageMagick was installed. Running the Script¶. Run a Psi4 calculation, generating .cube files as detailed in the above documentation. Copy vmd_script.py into a directory where the image files are desired, and pass the directory; pointing to the .cube files as an argument to run:; python vmd_cube.py /path/to/cube/files/. Alternatively, the script can be run in the same directory as the cube files with no need to pass the; directory as an argument. For an additional image containing all surfaces in an array (very useful for hand-picking orbital spaces), set the montage; flag to True:; python vmd_cube.py /path/to/cube/files/ --montage=True. As an example, take the cube files generated from the water calculation from the above input file. Using the script and montage,; the alpha ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/cubeprop-1.html:5578,release,releases,5578,psi4manual/1.0.0/cubeprop-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/cubeprop-1.html,2,['release'],['releases']
Deployability,"ult: 1. CORR_ANSATZ¶. The ansatz to use for MRCC computations. Type: string; Possible Values: SR, MK, BW, APBW; Default: MK. CORR_CCSD_T¶. The type of CCSD(T) computation to perform. Type: string; Possible Values: STANDARD, PITTNER; Default: STANDARD. CORR_CHARGE¶. The molecular charge of the target state. Type: integer; Default: 0. CORR_MULTP¶. The multiplicity, \(M_S(M_S+1)\), of the target state. Must be specified if different from the reference \(M_s\). Type: integer; Default: 1. CORR_WFN¶. The type of correlated wavefunction. Type: string; Possible Values: PT2, CCSD, MP2-CCSD, CCSD_T; Default: CCSD. COUPLING¶. The order of coupling terms to include in MRCCSDT computations. Type: string; Possible Values: NONE, LINEAR, QUADRATIC, CUBIC; Default: CUBIC. COUPLING_TERMS¶. Do include the terms that couple the reference determinants?. Type: boolean; Default: true. DAMPING_PERCENTAGE¶. The amount (percentage) of damping to apply to the amplitude updates. 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the amplitudes from the previous iteration being mixed into the current iteration) can help in cases where oscillatory convergence is observed. Type: double; Default: 0.0. DIAGONALIZE_HEFF¶. Do diagonalize the effective Hamiltonian?. Type: boolean; Default: false. DIAGONAL_CCSD_T¶. Do include the diagonal corrections in (T) computations?. Type: boolean; Default: true. DIIS_MAX_VECS¶. Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 7. DIIS_START¶. The number of DIIS vectors needed before extrapolation is performed. Type: integer; Default: 2. E_CONVERGENCE¶. Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. FAVG_CCSD_T¶. Do use the averaged Fock matrix over all references in (T) computations?. Type: boolean; Default: false. FOLLOW_ROOT¶. Which root of the",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/autodir_options_c/module__psimrcc-1.html:1343,update,update,1343,psi4manual/1.3.2/autodir_options_c/module__psimrcc-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/autodir_options_c/module__psimrcc-1.html,30,['update'],['update']
Deployability,"ult: false. TDSCF_TDM_PRINT (SCF)¶SCF — Which transition dipole moments to print out: - E_TDM_LEN : electric transition dipole moments, length representation - E_TDM_VEL : electric transition dipole moments, velocity representation - M_TDM : magnetic transition dipole moments. Type: array; Default: No Default. TDSCF_TRIPLETS (SCF)¶SCF — Controls inclusion of triplet states, which is only valid for restricted references. Valid options: - none : No triplets computed (default) - also : lowest-energy triplets and singlets included, in 50-50 ratio. Note that singlets are privileged, i.e. if seeking to converge 5 states in total, 3 will be singlets and 2 will be triplets. - only : Only triplet states computed. Type: string; Possible Values: NONE, ALSO, ONLY; Default: NONE. TEST_B (OPTKING)¶OPTKING — Do test B matrix?. Type: boolean; Default: false. TEST_DERIVATIVE_B (OPTKING)¶OPTKING — Do test derivative B matrix?. Type: boolean; Default: false. THETA_POINTS (SCF)¶SCF — Number of colatitude grid points for spherical potential integration. Type: integer; Default: 360. THICKNESS (SCF)¶SCF — Thickness (bohr) of a hard-sphere external potential. Type: double; Default: 20.0. THREE_PARTICLE (DCT)¶DCT — Whether to compute three-particle energy correction or not. Type: string; Possible Values: NONE, PERTURBATIVE; Default: NONE. TIKHONOW_MAX (PSIMRCC)¶PSIMRCC — The cycle after which Tikhonow regularization is stopped. Set to zero to allow regularization in all iterations. Type: integer; Default: 5. TIKHONOW_OMEGA (DCT)¶DCT (Expert) — The shift applied to the denominator in the density cumulant update iterations. Type: double; Default: 0.0. TIKHONOW_OMEGA (PSIMRCC)¶PSIMRCC — The shift to apply to the denominators, {it c.f.} Taube and Bartlett, JCP, 130, 144112 (2009). Type: double; Default: 0.0. TIKHONOW_TRIPLES (PSIMRCC)¶PSIMRCC (Expert) — Do use Tikhonow regularization in (T) computations?. Type: boolean; Default: false. TILE_SZ (SCF)¶SCF (Expert) — The tile size for the distribut",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:225207,integrat,integration,225207,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html,9,['integrat'],['integration']
Deployability,"ultireference techniques. General¶. CC_NUM_THREADS¶. Number of threads. Type: integer; Default: 1. CORR_ANSATZ¶. The ansatz to use for MRCC computations. Type: string; Possible Values: SR, MK, BW, APBW; Default: MK. CORR_CCSD_T¶. The type of CCSD(T) computation to perform. Type: string; Possible Values: STANDARD, PITTNER; Default: STANDARD. CORR_CHARGE¶. The molecular charge of the target state. Type: integer; Default: 0. CORR_MULTP¶. The multiplicity, , of the target state. Must be specified if different from the reference . Type: integer; Default: 1. CORR_WFN¶. The type of correlated wavefunction. Type: string; Possible Values: PT2, CCSD, MP2-CCSD, CCSD_T; Default: CCSD. COUPLING¶. The order of coupling terms to include in MRCCSDT computations. Type: string; Possible Values: NONE, LINEAR, QUADRATIC, CUBIC; Default: CUBIC. COUPLING_TERMS¶. Do include the terms that couple the reference determinants?. Type: boolean; Default: true. DAMPING_PERCENTAGE¶. The amount (percentage) of damping to apply to the amplitude updates. 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the amplitudes from the previous iteration being mixed into the current iteration) can help in cases where oscillatory convergence is observed. Type: double; Default: 0.0. DIAGONALIZE_HEFF¶. Do diagonalize the effective Hamiltonian?. Type: boolean; Default: false. DIAGONAL_CCSD_T¶. Do include the diagonal corrections in (T) computations?. Type: boolean; Default: true. DIIS_MAX_VECS¶. Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 7. DIIS_START¶. The number of DIIS vectors needed before extrapolation is performed. Type: integer; Default: 2. E_CONVERGENCE¶. Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. FAVG_CCSD_T¶. Do use the averaged Fock matrix over all references in (T) computa",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodir_options_c/module__psimrcc-1.html:1341,update,updates,1341,psi4manual/1.0.0/autodir_options_c/module__psimrcc-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodir_options_c/module__psimrcc-1.html,2,['update'],['updates']
Deployability,"ultistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or str) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF and UHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) [manual]. Examples. >>> # [1] Frequency calculation for all modes through highest available derivatives; >>> frequency('ccsd'). >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> # printing lowest mode frequency to screen and Hessian to output; >>> E, wfn = frequencies('scf', dertype=1, irrep=4, return_wfn=True); >>> print wfn.frequencies().get(0, 0); >>> wfn.hessian().print_out(). >>> # [3] Frequency calculation at default conditions and Hessian reuse at STP; >>> E, wfn = freq('mp2', return_wfn=True); >>> set t 273.15; >>> set p 100000; >>> thermo(wfn, wfn.frequencies()). >>> # [4] Opt+Freq, skipping the gradient recalc at the start of the Hessian; >>> e, wfn = optimize('hf', return_wfn=True); >>> frequencies('hf', ref_gradient=wfn.gradient()). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.6;  · . PSI4. PSI4 API: Linking C++ and Python; frequencies. © Copyright 2022, The Psi4 Project.; Last updated on Thursday, 19 May 2022 08:57PM.; Created using Sphinx 4.5.0.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/api/psi4.driver.frequencies.html:3081,update,updated,3081,psi4manual/1.6.x/api/psi4.driver.frequencies.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/api/psi4.driver.frequencies.html,1,['update'],['updated']
Deployability,"um chemistry method to evaluate (e.g., B3LYP, MP2, …). Validated by:. set_method. field molecule: Any [Required]¶; The molecule to use in the computation. field owner_group: Optional[str] = None¶; group in the chown sense. field priority: str = 1¶; The priority of a Task; higher priority will be pulled first. {high:2, normal:1, low:0}. field protocols: Union[AtomicResultProtocols, Dict[str, Any], None] = {'stdout': True}¶; Output modifications. field result: Any [Optional]¶; AtomicResult return. field result_id: Optional[str] = None¶; The optional ID for the computation. field tag: str = '*'¶; The tags to pass along to compute managers. compute(client=None)[source]¶; Run quantum chemistry. Parameters:; client (qcportal.client.FractalClient | None). get_results(client=None)[source]¶; Return results as Atomic-flavored QCSchema. Parameters:; client (qcportal.FractalClient | None). Return type:; AtomicResult. plan()[source]¶; Form QCSchema input from member data. Return type:; AtomicInput. validator set_basis  »  psi4.driver.AtomicComputer.basis[source]¶. validator set_keywords  »  psi4.driver.AtomicComputer.keywords[source]¶. validator set_method  »  psi4.driver.AtomicComputer.method[source]¶. table of contents. AtomicComputer; AtomicComputer; AtomicComputer.basis; AtomicComputer.computed; AtomicComputer.driver; AtomicComputer.keywords; AtomicComputer.method; AtomicComputer.molecule; AtomicComputer.owner_group; AtomicComputer.priority; AtomicComputer.protocols; AtomicComputer.result; AtomicComputer.result_id; AtomicComputer.tag; AtomicComputer.compute(); AtomicComputer.get_results(); AtomicComputer.plan(); AtomicComputer.set_basis; AtomicComputer.set_keywords; AtomicComputer.set_method. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. PSI4 API: Linking C++ and Python; AtomicComputer. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/api/psi4.driver.AtomicComputer.html:7488,update,updated,7488,psi4manual/master/api/psi4.driver.AtomicComputer.html,https://psicode.org,https://psicode.org/psi4manual/master/api/psi4.driver.AtomicComputer.html,1,['update'],['updated']
Deployability,"um integrals from conda¶; Since February 2019, the PSI4 conda package on Linux has been the; large AM8. Likewise, this is the package you get upon; 1conda install libint -c psi4. There is no need for the extra am8 argument previously documented here.; On Mac, the Libint conda package itself and the Libint compiled into; the PSI4 conda package remain AM6.; Beware this issue: https://github.com/psi4/psi4/issues/1533. How to see what build configuration options are available¶; CMake doesn’t provide a summary for this (unless you want to try the CMake; GUI, which the developers have never looked at). However, the top half of; the main CMakeLists.txt is a passable summary:. ################ Options: Overview and Not Otherwise Mentioned ###############. # <<< CMake build overview >>>; #; # >>> ls; # external/ COPYING psi4/ tests/ ...; # >>> cmake -H. -Bobjdir -DCMAKE_INSTALL_PREFIX=/path/to/install-psi4 ...; # ...; # -- Generating done; # -- Build files have been written to: /current/dir/objdir; # >>> cd objdir && make -j`getconf _NPROCESSORS_ONLN`; # >>> make install. # <<< Required build dependencies that Psi4 can't build itself >>>; #; # - CMake (e.g., `conda install cmake`); # - C++ and C compilers (C++11 compliant); # - BLAS/LAPACK (also runtime; e.g., `conda install mkl-devel`); # - Python (also runtime; interpreter and headers; e.g., `conda install python`); # - NumPy (also runtime; avoidable at buildtime if gau2grid pre-built; e.g., `conda install numpy`); # - deepdiff (runtime only; e.g., `conda install deepdiff -c conda-forge`); # - networkx (runtime only; e.g., `conda install networkx`); # - pint (runtime only; e.g., `conda install pint -c conda-forge`). # These three ""### Options ###"" sections contain useful CMake variables for build configuration. # <<< Compilers and flags >>>; #; # - CMAKE_C_COMPILER ""C compiler""; # - CMAKE_C_FLAGS ""Additional C flags""; # - CMAKE_CXX_COMPILER ""C++ compiler""; # - CMAKE_CXX_FLAGS ""Additional C++ flags""; # - CMAKE_Fortran_COMPI",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/build_planning-1.html:10150,install,install,10150,psi4manual/1.3.2/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/build_planning-1.html,2,['install'],['install']
Deployability,"um of these four components yields; EFP TOTAL ENERGY. EFP TOTAL ENERGY¶; The total electronic interaction energy [Eh] for EFP/EFP computations. EFP TORQUE¶; The torque, not gradient for EFP/EFP computations. ENTHALPY¶; Total enthalpy H [Eh] at given temperature. ENTHALPY CORRECTION¶; Sum of electronic, translational, rotational, and vibrational corrections [Eh] to the enthalpy at given temperature. ESP AT CENTER n¶; Property of electrostatic potential [Eh / e] at location, usually atom center, n. FCI TOTAL ENERGY¶. FCI CORRELATION ENERGY¶; The total electronic energy [Eh] and correlation energy component [Eh]; for the full configuration interaction level of theory. GIBBS FREE ENERGY¶; Total Gibbs free energy [Eh], free enthalpy at given temperature. GIBBS FREE ENERGY CORRECTION¶; Sum of electronic, translational, rotational, and vibrational corrections [Eh] to the free enthalpy at given temperature. GRID ELECTRONS TOTAL¶. GRID ELECTRONS ALPHA¶. GRID ELECTRONS BETA¶; The number of electrons integrated by the xc quadrature grid. HF TOTAL ENERGY¶; The total electronic energy [Eh] for the Hartree–Fock method, without; any dispersion correction; the first three (or four, since; \(E_{xc} = 0\)) terms in Eq. (4). Quantity \(E_{\text{HF}}\); in Eq. (4). HF TOTAL GRADIENT¶; The total electronic gradient [E_h/a0] of the Hartree–Fock method, ({nat}, 3). HF DIPOLE GRADIENT¶; The derivative of the Hartree–Fock method dipole [E_h a0/u] = [(e a0/a0)^2/u] with respect to nuclear perturbations; as a degree-of-freedom by dipole component array, (3 * {nat}, 3). HF TOTAL HESSIAN¶; The total electronic second derivative [Eh/a0/a0] for the Hartree-Fock method, (3 * {nat}, 3 * {nat}). LCCD TOTAL ENERGY¶. LCCD CORRELATION ENERGY¶; The total electronic energy [Eh] and correlation energy component [Eh]; for the linearized coupled cluster doubles level of theory. LCCSD TOTAL ENERGY¶. LCCSD CORRELATION ENERGY¶; The total electronic energy [Eh] and correlation energy component [Eh]; for the lin",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/glossary_psivariables-1.html:23155,integrat,integrated,23155,psi4manual/1.4.0/glossary_psivariables-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/glossary_psivariables-1.html,5,['integrat'],['integrated']
Deployability,"um':; try:; database.HRXN_EQ; except AttributeError:; raise ValidationError(""""""Special subset 'equilibrium' not available for database %s."""""" % (db_name)); else:; HRXN = database.HRXN_EQ; else:; HRXN = p4util.getattr_ignorecase(database, db_subset); if HRXN is None:; HRXN = p4util.getattr_ignorecase(database, 'HRXN_' + db_subset); if HRXN is None:; raise ValidationError(""""""Special subset '%s' not available for database %s."""""" % (db_subset, db_name)); else:; temp = []; for rxn in db_subset:; if rxn in HRXN:; temp.append(rxn); else:; raise ValidationError(""""""Subset element '%s' not a member of database %s."""""" % (str(rxn), db_name)); HRXN = temp. temp = []; for rxn in HRXN:; temp.append(ACTV['%s-%s' % (dbse, rxn)]); HSYS = p4util.drop_duplicates(sum(temp, [])). # Sow all the necessary reagent computations; core.print_out(""\n\n""); p4util.banner((""Database %s Computation"" % (db_name))); core.print_out(""\n""). # write index of calcs to output file; if db_mode == 'continuous':; instructions = """"""\n The database single-job procedure has been selected through mode='continuous'.\n""""""; instructions += """""" Calculations for the reagents will proceed in the order below and will be followed\n""""""; instructions += """""" by summary results for the database.\n\n""""""; for rgt in HSYS:; instructions += """""" %-s\n"""""" % (rgt); instructions += """"""\n Alternatively, a farming-out of the database calculations may be accessed through\n""""""; instructions += """""" the database wrapper option mode='sow'/'reap'.\n\n""""""; core.print_out(instructions). # write sow/reap instructions and index of calcs to output file and reap input file; if db_mode == 'sow':; instructions = """"""\n The database sow/reap procedure has been selected through mode='sow'. In addition\n""""""; instructions += """""" to this output file (which contains no quantum chemical calculations), this job\n""""""; instructions += """""" has produced a number of input files (%s-*.in) for individual database members\n"""""" % (dbse); instructions += """""" and a si",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/wrapper_database.html:15583,continuous,continuous,15583,psi4manual/1.3.2/_modules/psi4/driver/wrapper_database.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/wrapper_database.html,6,['continuous'],['continuous']
Deployability,"um':; try:; database.HRXN_EQ; except AttributeError:; raise ValidationError(""""""Special subset 'equilibrium' not available for database %s."""""" % (db_name)); else:; HRXN = database.HRXN_EQ; else:; HRXN = p4util.getattr_ignorecase(database, db_subset); if HRXN is None:; HRXN = p4util.getattr_ignorecase(database, 'HRXN_' + db_subset); if HRXN is None:; raise ValidationError(""""""Special subset '%s' not available for database %s."""""" % (db_subset, db_name)); else:; temp = []; for rxn in db_subset:; if rxn in HRXN:; temp.append(rxn); else:; raise ValidationError(""""""Subset element '%s' not a member of database %s."""""" % (str(rxn), db_name)); HRXN = temp. temp = []; for rxn in HRXN:; temp.append(ACTV['%s-%s' % (dbse, rxn)]); HSYS = p4util.drop_duplicates(sum(temp, [])). # Sow all the necessary reagent computations; psi4.print_out(""\n\n""); p4util.banner((""Database %s Computation"" % (db_name))); psi4.print_out(""\n""). # write index of calcs to output file; if db_mode == 'continuous':; instructions = """"""\n The database single-job procedure has been selected through mode='continuous'.\n""""""; instructions += """""" Calculations for the reagents will proceed in the order below and will be followed\n""""""; instructions += """""" by summary results for the database.\n\n""""""; for rgt in HSYS:; instructions += """""" %-s\n"""""" % (rgt); instructions += """"""\n Alternatively, a farming-out of the database calculations may be accessed through\n""""""; instructions += """""" the database wrapper option mode='sow'/'reap'.\n\n""""""; psi4.print_out(instructions). # write sow/reap instructions and index of calcs to output file and reap input file; if db_mode == 'sow':; instructions = """"""\n The database sow/reap procedure has been selected through mode='sow'. In addition\n""""""; instructions += """""" to this output file (which contains no quantum chemical calculations), this job\n""""""; instructions += """""" has produced a number of input files (%s-*.in) for individual database members\n"""""" % (dbse); instructions += """""" and a si",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/wrapper_database.html:15695,continuous,continuous,15695,psi4manual/1.0.0/_modules/wrapper_database.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/wrapper_database.html,2,['continuous'],['continuous']
Deployability,"umPy https://numpy.org/; networkx https://github.com/networkx/networkx (transitive dependency of QCElemental; optional for QCElemental but required for PSI4); pint https://pint.readthedocs.io/en/latest/ (transitive dependency of QCElemental); pydantic https://pydantic-docs.helpmanual.io/# (transitive dependency of QCElemental). Dropped Dependencies:. Boost (September 2016; dropped by v1.1); deepdiff https://github.com/seperman/deepdiff (May 2019; dropped by v1.4). What are the add-on capabilities for Psi4 and what are their dependencies¶; Each of the items below is an independent additional capability that can; be built with PSI4. Sub-items below are the respective additional; dependencies of the add-on. Select which, if any, you want, and examine; the links for appropriate enabling arguments to cmake. Note that many; are available pre-built from conda. PSI4 Testing. CTest https://cmake.org/download/; Perl (for some coupled-cluster CTest tests) https://www.perl.org/; pytest (for installed testing) http://doc.pytest.org/en/latest/; pytest-xdist (for installed testing in parallel) https://docs.pytest.org/en/2.1.0/xdist.html. PSI4 Documentation (available pre-built at psicode.org/psi4manual/master/index.html). Sphinx (3.5+) http://sphinx-doc.org; Perl (for some auto-documentation scripts) https://www.perl.org/; nbsphinx (for converting Jupyter notebooks) http://nbsphinx.readthedocs.io/en/jupyter-theme/; sphinx-psi-theme https://github.com/psi4/sphinx-psi-theme; See [“message” lines] for advice on obtaining docs dependencies. Ambit — https://github.com/jturney/ambit; CheMPS2 — [what is CheMPS2?] [CheMPS2 min version]. HDF5 https://support.hdfgroup.org/HDF5/; zlib http://www.zlib.net/. dkh — [what is dkh?] [dkh min version]. Fortran Compiler. gdma — [what is gdma?] [gdma min version]. Fortran Compiler. PCMSolver — [what is PCMSolver?]. Fortran Compiler; zlib http://www.zlib.net/. simint — [what is simint?] [simint min version]. Additionally, there are runtime-loaded capa",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/build_planning-1.html:6436,install,installed,6436,psi4manual/1.4.0/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/build_planning-1.html,4,['install'],['installed']
Deployability,"umber of columns to print in calls to Matrix::print_mat. Type: integer; Default: 5. PARENT_SYMMETRY¶. For displacements, symmetry (Schoenflies symbol) of ‘parent’ (undisplaced) reference molecule. Internal use only for finite difference. Type: string; Default: No Default. RAS1¶. An array giving the number of orbitals per irrep for RAS1. Type: array; Default: No Default. RAS2¶. An array giving the number of orbitals per irrep for RAS2. Type: array; Default: No Default. RAS3¶. An array giving the number of orbitals per irrep for RAS3. Type: array; Default: No Default. RAS4¶. An array giving the number of orbitals per irrep for RAS4. Type: array; Default: No Default. RELATIVISTIC¶. Relativistic Hamiltonian type. Type: string; Possible Values: NO, X2C; Default: NO. WFN¶. Wavefunction type. Type: string; Default: SCF. table of contents. GLOBALS; General; ACTIVE; BASIS_RELATIVISTIC; BENCH; BRIANQC_ENABLE; CC_TYPE; CI_TYPE; CUBEPROP_BASIS_FUNCTIONS; CUBEPROP_FILEPATH; CUBEPROP_ISOCONTOUR_THRESHOLD; CUBEPROP_ORBITALS; CUBEPROP_TASKS; CUBIC_GRID_OVERAGE; CUBIC_GRID_SPACING; DF_BASIS_CC; DOCC; FREEZE_CORE; FROZEN_DOCC; FROZEN_UOCC; INTEGRAL_PACKAGE; LITERAL_CFOUR; MAX_RADIAL_MOMENT; MBIS_D_CONVERGENCE; MBIS_MAXITER; MBIS_PRUNING_SCHEME; MBIS_RADIAL_POINTS; MBIS_SPHERICAL_POINTS; MOLDEN_WITH_VIRTUAL; MP2_TYPE; MP_TYPE; NUM_FROZEN_DOCC; NUM_FROZEN_UOCC; PCM; PE; PRINT; PRINT_NOONS; PROPERTIES; PROPERTIES_ORIGIN; PUREAM; QC_MODULE; RESTRICTED_DOCC; RESTRICTED_UOCC; SCF_TYPE; SCREENING; SOCC; WRITER_FILE_LABEL. Expert; CUBIC_BASIS_TOLERANCE; CUBIC_BLOCK_MAX_POINTS; DEBUG; DERTYPE; DIE_IF_NOT_CONVERGED; DKH_ORDER; EXTERNAL_POTENTIAL_SYMMETRY; MAT_NUM_COLUMN_PRINT; PARENT_SYMMETRY; RAS1; RAS2; RAS3; RAS4; RELATIVISTIC; WFN. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Keywords by Module; GLOBALS. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/autodir_options_c/module__globals-1.html:10910,update,updated,10910,psi4manual/1.5.0/autodir_options_c/module__globals-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodir_options_c/module__globals-1.html,2,['update'],['updated']
Deployability,"ument previously documented here.; On Mac, the Libint conda package itself and the Libint compiled into; the PSI4 conda package remain AM6.; Beware this issue: https://github.com/psi4/psi4/issues/1533. How to see what build configuration options are available¶; CMake doesn’t provide a summary for this (unless you want to try the CMake; GUI, which the developers have never looked at). However, the top half of; the main CMakeLists.txt is a passable summary:. ################ Options: Overview and Not Otherwise Mentioned ###############. # <<< CMake build overview >>>; #; # >>> ls; # external/ COPYING psi4/ tests/ ...; # >>> cmake -H. -Bobjdir -DCMAKE_INSTALL_PREFIX=/path/to/install-psi4 ...; # ...; # -- Generating done; # -- Build files have been written to: /current/dir/objdir; # >>> cd objdir && make -j`getconf _NPROCESSORS_ONLN`; # >>> make install. # <<< Required build dependencies that Psi4 can't build itself >>>; #; # - CMake (e.g., `conda install cmake`); # - C++ and C compilers (C++11 compliant); # - BLAS/LAPACK (also runtime; e.g., `conda install mkl-devel`); # - Python (also runtime; interpreter and headers; e.g., `conda install python`); # - NumPy (also runtime; avoidable at buildtime if gau2grid pre-built; e.g., `conda install numpy`); # - deepdiff (runtime only; e.g., `conda install deepdiff -c conda-forge`); # - networkx (runtime only; e.g., `conda install networkx`); # - pint (runtime only; e.g., `conda install pint -c conda-forge`). # These three ""### Options ###"" sections contain useful CMake variables for build configuration. # <<< Compilers and flags >>>; #; # - CMAKE_C_COMPILER ""C compiler""; # - CMAKE_C_FLAGS ""Additional C flags""; # - CMAKE_CXX_COMPILER ""C++ compiler""; # - CMAKE_CXX_FLAGS ""Additional C++ flags""; # - CMAKE_Fortran_COMPILER ""Fortran compiler (required for some add-ons)""; # - CMAKE_Fortran_FLAGS ""Additional Fortran flags"". # <<< Detecting dependencies and add-ons >>>; #; # - PYTHON_EXECUTABLE ""Python interpreter to use (e.g., /path/to",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/build_planning-1.html:10254,install,install,10254,psi4manual/1.3.2/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/build_planning-1.html,2,['install'],['install']
Deployability,"umentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Appendices »; Keywords by Module ». MP2¶; Performs second order Moller-Plesset perturbation theory (MP2) computations. This code can compute RHF/ROHF/UHF energies, and RHF gradient/property computations. However, given the small errors introduced, we recommend using the new density fitted MP2 codes instead, which are much more efficient. General¶. CACHELEVEL¶. The amount of cacheing of data to perform. Type: integer; Default: 2. CACHETYPE¶. The criterion used to retain/release cached data. Type: string; Possible Values: LRU, LOW; Default: LRU. MP2_OS_SCALE¶. The scale factor used for opposite-spin pairs in SCS computations. Type: double; Default: 6.0/5.0. MP2_SS_SCALE¶. The scale factor used for same-spin pairs in SCS computations. Type: double; Default: 1.0/3.0. OPDM¶. Do compute the one particle density matrix, for properties?. Type: boolean; Default: false. OPDM_RELAX¶. Do add relaxation terms to the one particle density matrix, for properties?. Type: boolean; Default: false. REFERENCE¶. Reference wavefunction type. Type: string; Possible Values: RHF, UHF, ROHF; Default: RHF. SCS¶. Do perform a spin component scaled MP2 computation?. Type: boolean; Default: false. SCS_N¶. Do perform a spin component scaled (N) MP2 computation?. Type: boolean; Default: false. Expert¶. JOBTYPE¶. Type of job being performed. Type: string; Default: SP. WFN¶. Wavefunction type. Type: string; Possible Values: MP2; Default: MP2. Table Of Contents. MP2; General; CACHELEVEL; CACHETYPE; MP2_OS_SCALE; MP2_SS_SCALE; OPDM; OPDM_RELAX; REFERENCE; SCS; SCS_N. Expert; JOBTYPE; WFN. Previous topic; BASIS; Next topic; CACHELEVEL; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Appendices »; Keywords by Module ». © Copyright 2012, Psi4 Project.; Last updated on Sep 30, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/autodir_options_c/module__mp2-1.html:1968,update,updated,1968,psi4manual/4.0b2/autodir_options_c/module__mp2-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/autodir_options_c/module__mp2-1.html,2,['update'],['updated']
Deployability,"umerical integration and discretisation parameters¶; These parameters can be altered to balance the cost and accuracy; of the implict description of the solvation.; DDX_SOLUTE_RADIAL_POINTS and DDX_SOLUTE_SPHERICAL_POINTS influence; the accuracy of the numerical grid used to obtain the representation; of the electric potential / field of the solute density,; since a standard DFT integration grid is used to obtain these quantities.; In contrast to the integration of DFT quantities much lower accuracy; is required, such that for this step considerably smaller grids are employed.; If extremely high accuracy reference solutions are required, the DDX; DFT integration parameters might need to be increased, but this is rarely needed.; DDX_LMAX and DDX_N_LEBEDEV determine the accuracy of the computations; on the boundary of the spheres around each atom performed by DDX. DDX_LMAX; determines the largest angular momentum of the spherical harmonics basis used; to discretise quantities on the atomic spheres and DDX_N_LEBEDEV determines the; number of points of the Lebedev angular grid used for integration on the spheres.; DDX_N_LEBEDEV should be chosen higher than DDX_SOLUTE_SPHERICAL_POINTS; and the defaults are usually good. DDX_SOLUTE_RADIAL_POINTS¶. Number of radial points used to compute the integrals for DDX calculations. Type: integer; Default: 35. DDX_SOLUTE_SPHERICAL_POINTS¶. Number of spherical points used to compute the solute electric potential/field integrals for DDX calculations (A Lebedev Points number). Type: integer; Default: 110. DDX_LMAX¶. Maximal degree of modelling spherical harmonics. Type: integer; Default: 9. DDX_N_LEBEDEV¶. Number of Lebedev grid points to use. (A Lebedev Points number). Type: integer; Default: 302. Iterative solver parameters¶; These parameters determine how the forward and adjoint linear systems; of the solvation model are solved. Usually these parameters do not need; to be changed. Occasionally DDX_SOLVATION_CONVERGENCE might need to",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/ddx.html:6531,integrat,integration,6531,psi4manual/1.7.x/ddx.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/ddx.html,4,['integrat'],['integration']
Deployability,"umulant and orbital; updates and both updates are performed simultaneously. Setting the QC_TYPE; option to TWOSTEP will perform the Newton-Raphson update only for the orbitals,; while the equations for the cumulant will be solved using a standard Jacobi update.; If requested by the user (set QC_COUPLING to TRUE), the electronic Hessian can include; matrix elements that couple the orbitals and the density cumulant.; The computation of these coupling elements increases; the cost of the macroiteration, but usually leads to faster convergence and is; recommended for open-shell systems.; It is important to note that the quadratically-convergent algorithm is not yet fully; optimized and often converges slowly when the RMS of the cumulant or; the orbital gradient is below \(10^{-7}\). The choice of the iterative algorithm can significantly affect the cost of the; energy computation. While the two-step algorithm requires a small number of; disk-intensive \({\cal O}(N^5)\) integral transformations, the simultaneous; algorithm benefits from a smaller number of expensive \({\cal O}(N^6)\); cumulant updates. As a result, for small closed-shell systems the two-step; algorithm is usually preferred, while for larger systems and molecules with; open-shell character it is recommended to use the simultaneous algorithm.; Efficiency of the simultaneous algorithm can be greatly increased by avoiding; the transformation of the four-index virtual two-electron integrals; \((vv|vv)\) and computing the terms that involve these integrals in the AO; basis. In order to do that one needs to set the AO_BASIS option to; DISK (currently used by default). For more recommendations on the choice of the algorithm see; Recommendations. Analytic Gradients¶; Analytic gradients are available for the DC-06, ODC-06, ODC-12, and ODC-13 methods.; For DC-06, the evaluation of the analytic gradients requires the solution of the; coupled response equations. Two algorithms are available for their iterative; solutio",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/dcft-1.html:11348,update,updates,11348,psi4manual/1.2.1/dcft-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/dcft-1.html,15,['update'],['updates']
Deployability,"unc = run_fnocc; elif module in ['', 'OCC']:; func = run_occ; elif mtd_type == 'DF':; if module in ['', 'OCC']:; func = run_dfocc; elif mtd_type == 'CD':; if module in ['', 'OCC']:; func = run_dfocc; elif reference == 'UHF':; if mtd_type == 'CONV':; if module in ['', 'OCC']:; func = run_occ; elif mtd_type == 'DF':; if module in ['', 'OCC']:; func = run_dfocc; elif mtd_type == 'CD':; if module in ['', 'OCC']:; func = run_dfocc; elif reference == 'ROHF':; if mtd_type == 'CONV':; if module in ['DETCI']:; func = run_detci. if func is None:; raise ManagedMethodError(['select_mp3', name, 'MP_TYPE', mtd_type, reference, module]). return func(name, **kwargs). Naturally, in the run function, you must either use the type keyword for; type switching or translate it into whatever DO_CD-like keywords your; module uses. At run time with a closed-shell molecule,; energy('mp3'). will run OCC, while; set qc_module fnocc; energy('mp3'). will run FNOCC mp3.; A special case is DETCI that can run mp3, but oughtn’t to be used for such. So above, ROHF CONV mp3 has no default, but can still access the detci code with; set reference rohf; set qc_module detci; energy('mp3'). While the below gives an error; set reference rohf; energy('mp3'). Again, whenever a single method name needs to call multiple proc.py run; functions, it should be managed. In Overlapping capabilities of Psi4 “Y” means method available in; module, “D” means module is default for that method, “” mean method not; available. Table Of Contents. Adding Methods to Driver; proc.py; Managed Methods. Previous topic; LibOptions: globals, locals, has_changed and all that; Next topic; BasisSet. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Programming: Using the Core Libraries ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/proc_py-1.html:7391,update,updated,7391,psi4manual/1.0.0/proc_py-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/proc_py-1.html,2,['update'],['updated']
Deployability,"unction to obtain preferentially a molecule string; through getCartesian() or a query string otherwise. """"""; try:; temp = self.getCartesian(); except Exception as e:; raise; molstr = ""%d\n%s\n%s"" % (self.natom, self.iupac, temp); return molstr. [docs] def getMoleculeString(self):; """"""Function to obtain a molecule string through; getCartesian() or fail.; """"""; try:; return self.getCartesian(); except Exception as e:; return e.message. [docs]def getPubChemResults(name):; """"""Function to query the PubChem database for molecules matching the; input string. Builds a PubChem object if found. """"""; url = 'http://www.ncbi.nlm.nih.gov/sites/entrez?db=pccompound&term=%s&format=text' % (urllib2.quote(name)); print ""\tSearching PubChem database for %s"" % (name); try:; loc = urllib2.urlopen(url); except urllib2.URLError as e:; msg = ""\tPubchemError\n%s\n\treceived when trying to open\n\t%s\n"" % (str(e), url); msg += ""\tCheck your internet connection, and the above URL, and try again.\n""; raise Exception(msg); data = loc.read(). ans = []; l = data.find(""<pre>""); l = data.find(""\n"", l); for i in range(1, 21):; l = data.find(""%s. "" % (i), l); if l == -1:; break; l = data.find(""MF: "", l) + 4; mf = data[l:data.find(""\n"", l)]; l = data.find(""IUPAC: "", l) + 7; iupac = data[l:data.find(""\n"", l)]; l = data.find(""CID: "", l) + 5; #if l == 4:; # break; cid = int(data[l:data.find(""\n"", l)]); l = data.find(""\t"", l) + 1. pubobj = PubChemObj(cid, mf, iupac); ans.append(pubobj). print ""\tFound %d results"" % (len(ans)); return ans. if __name__ == ""__main__"":; try:; obj = getPubChemResults(""1-methoxy-4-[(E)-prop-1-enyl]benzene""); #obj = getPubChemResults(""sodium benzenesulfonate""); except Exception as e:; print e.message. for r in obj:; print r; print r.getMoleculeString(). Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules |; PSI4 [beta2] » ; Module code ». © Copyright 2012, Psi4 Project.; Last updated on Aug 25, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/_modules/pubchem.html:5024,update,updated,5024,psi4manual/4.0b2/_modules/pubchem.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/_modules/pubchem.html,1,['update'],['updated']
Deployability,"unctional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc44; Test case for some of the PSI4 out-of-core codes. The code is given only 2.0 MB of memory, which is insufficient to hold either the A1 or B2 blocks of an ovvv quantity in-core, but is sufficient to hold at least two copies of an oovv quantity in-core. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. dft1-alt; DFT Functional Test. dfccdl1; DF-CCDL cc-pVDZ energy for the H2O molecule. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. dcft3; DC-06 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the AO Basis, using integrals stored on disk. mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. dcft-grad3; Restricted DF-DCFT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. cepa0-grad1; CEPA0 cc-pVDZ gradient for the H2O molecule. mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. cc13d; Tests analytic CC2 gradients. scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. omp2-3; OMP2 cc-pVDZ energy for the NO radical. scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. cc36; CC2(RHF)/cc-pVDZ energy of H2O. mints3; Test individual integral objects for correctness. options1; check all variety of opt",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/autodoc_testsuite_corepsi4-1.html:4837,update,update,4837,psi4manual/1.2.1/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/autodoc_testsuite_corepsi4-1.html,8,['update'],['update']
Deployability,"unctional; Y; Y; —; 0.614413; —; —; —; —; —. dlDF+D09; Dispersionless Hybrid Meta-GGA XC Functional; Y; Y; —; 0.614413; —; —; —; —; —. wB88_X; B88 Short-Range GGA Exchange (HJS Model); Y; —; 0.300000; —; —; —; —; —; —. wB97; Parameterized LRC B97 GGA XC Functional; Y; —; 0.400000; —; —; —; —; —; —. wB97X; Parameterized Hybrid LRC B97 GGA XC Functional; Y; —; 0.400000; 0.157706; —; —; —; —; —. wB97X-D; Parameterized Hybrid LRC B97 GGA XC Functional with Dispersion; Y; —; 0.200000; 0.222036; —; —; —; Y;  . wBLYP; BLYP SR-XC Functional (HJS Model); Y; —; 0.300000; —; —; —; —; —; —. wPBE; PBE SR-XC Functional (HJS Model); Y; —; 0.400000; —; —; —; —; —; —. wPBE-D3; PBE SR-XC Functional (HJS Model); Y; —; 0.400000; —; —; —; —; Y;  . wPBE-D3BJ; PBE SR-XC Functional (HJS Model); Y; —; 0.400000; —; —; —; —; Y;  . wPBE-D3M; PBE SR-XC Functional (HJS Model); Y; —; 0.400000; —; —; —; —; Y;  . wPBE-D3MBJ; PBE SR-XC Functional (HJS Model); Y; —; 0.400000; —; —; —; —; Y;  . wPBE0; PBE0 SR-XC Functional (HJS Model); Y; —; 0.300000; 0.250000; —; —; —; —; —. wPBE2; Double-Hybrid PBE LRC Functional; Y; —; 0.300000; —; 0.500000; —; —; —; —. wPBE_C; Short-Range PBE Correlation Functional; Y; —; —; —; 0.500000; —; —; —; —. wPBE_X; PBE Short-Range GGA Exchange (HJS Model); Y; —; 0.300000; —; —; —; —; —; —. wPBEsol; PBEsol SR-XC Functional (HJS Model); Y; —; 0.400000; —; —; —; —; —; —. wPBEsol0; PBEsol0 SR-XC Functional (HJS Model); Y; —; 0.300000; 0.250000; —; —; —; —; —. wPBEsol_X; PBEsol Short-Range GGA Exchange (HJS Model); Y; —; 0.300000; —; —; —; —; —; —. wPW92_C; Short-Range PW92 Correlation Functional; Y; —; —; —; 0.300000; —; —; —; —. wSVWN; LSDA SR-XC Functional; —; —; 0.300000; —; —; —; —; —; —. wS_X; Slater Short-Range LSDA Exchange; —; —; 0.300000; —; —; —; —; —; —. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; DFT Functionals. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/autodoc_dft_all-1.html:9904,update,updated,9904,psi4manual/1.1.0/autodoc_dft_all-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_dft_all-1.html,2,['update'],['updated']
Deployability,"und here) of keywords participate. Note; Longtime Cfour users who may consider this keyword; translation a flaw rather than a feature can avoid it entirely by; confining keywords to the Cfour module along with; BASIS and PUREAM (opt, too?). Misc. Running¶; Naturally, in PSI4 multiple jobs can be run in succession from the input file.; Control optimizations with optking keywords HERE. Cfour GRD file is; written to PSI4 output file. Gradient transformed back into the frame; in which it was shipped off to Cfour is also written to the PSI4; output file and is available from input as get_gradient().; sandwich mode := molecule and cfour list within; Naturally, additional jobs can follow in the input file.; Depending on the nature of preceding or following jobs, it is prudent to; separate them with the following:; 1; 2; 3clean() # removes Psi4 scratch files; clean_variables() # empties the PSI variables list; cfour {} # empties. In this scheme, the contents of the cfour {...} block are tacked onto; the end of the ZMAT file that is otherwise written from psi style; format. It is by this route that, for example %excite* sections can at; present be specified.; The execution of xcfour can be modified by a few parameters. Setting; the option CFOUR_OMP_NUM_THREADS sets the environment variable; OMP_NUM_THREADS for only the duration of the Cfour computation.; That is, portions of an input file that run PSI4 modules are; unaffected. Additionally, there are a few arguments to the function; run_cfour() that control the Cfour scratch; directory. table of contents. Interface to CFOUR by J. Stanton & J. Gauss; Installation; Cfour for PSI4 Users; PSI4 for Cfour Users; Output; Functionality; Specification Details; Misc. Running. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 July 2018 04:21AM.; Created using Sphinx 1.7.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/cfour-1.html:34894,update,updated,34894,psi4manual/1.2.1/cfour-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html,2,['update'],['updated']
Deployability,"unit of BORDER_RMIN, default is atomic units (AU). Type: string; Possible Values: AU, AA; Default: AU. BORDER_TYPE¶. border type, either remove or redistribute moments/polarizabilities. Type: string; Possible Values: REMOVE, REDIST; Default: REMOVE. DAMPING_FACTOR_INDUCED¶. Thole damping factor for induced moments. Type: double; Default: 2.1304. DAMPING_FACTOR_MULTIPOLE¶. Thole damping factor for multipole fields. Type: double; Default: 2.1304. DAMP_INDUCED¶. Enable Thole damping for induced moments. Type: boolean; Default: false. DAMP_MULTIPOLE¶. Enable Thole damping for multipole fields. Type: boolean; Default: false. INDUCED_CONVERGENCE¶. Threshold for induced moments convergence. Type: conv double; Default: 1e-8. ISOTROPIC_POL¶. Make polarizabilities isotropic. Type: boolean; Default: false. MAXITER¶. Maximum number of iterations for induced moments. Type: integer; Default: 50. PE_ECP¶. use PE(ECP) repulsive potentials. Type: boolean; Default: false. POTFILE¶. Name of the potential file OR contents of potential file to be written anonymously on-the-fly. Type: string; Default: potfile.pot. SUMMATION_FIELDS¶. Summation scheme for field computations, can be direct or fmm. Type: string; Possible Values: DIRECT, FMM; Default: DIRECT. TREE_EXPANSION_ORDER¶. Expansion order of the multipoles for FMM. Type: integer; Default: 5. TREE_THETA¶. Opening angle theta. Type: double; Default: 0.5. table of contents. PE; General; BORDER; BORDER_N_REDIST; BORDER_REDIST_ORDER; BORDER_REDIST_POL; BORDER_RMIN; BORDER_RMIN_UNIT; BORDER_TYPE; DAMPING_FACTOR_INDUCED; DAMPING_FACTOR_MULTIPOLE; DAMP_INDUCED; DAMP_MULTIPOLE; INDUCED_CONVERGENCE; ISOTROPIC_POL; MAXITER; PE_ECP; POTFILE; SUMMATION_FIELDS; TREE_EXPANSION_ORDER; TREE_THETA. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Appendices; Keywords by Module; PE. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodir_options_c/module__pe-1.html:2860,update,updated,2860,psi4manual/1.4.0/autodir_options_c/module__pe-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodir_options_c/module__pe-1.html,2,['update'],['updated']
Deployability,"unit of BORDER_RMIN, default is atomic units (AU). Type: string; Possible Values: AU, AA; Default: AU. BORDER_TYPE¶. border type, either remove or redistribute moments/polarizabilities. Type: string; Possible Values: REMOVE, REDIST; Default: REMOVE. DAMPING_FACTOR_INDUCED¶. Thole damping factor for induced moments. Type: double; Default: 2.1304. DAMPING_FACTOR_MULTIPOLE¶. Thole damping factor for multipole fields. Type: double; Default: 2.1304. DAMP_INDUCED¶. Enable Thole damping for induced moments. Type: boolean; Default: false. DAMP_MULTIPOLE¶. Enable Thole damping for multipole fields. Type: boolean; Default: false. INDUCED_CONVERGENCE¶. Threshold for induced moments convergence. Type: conv double; Default: 1e-8. ISOTROPIC_POL¶. Make polarizabilities isotropic. Type: boolean; Default: false. MAXITER¶. Maximum number of iterations for induced moments. Type: integer; Default: 50. PE_ECP¶. use PE(ECP) repulsive potentials. Type: boolean; Default: false. POTFILE¶. Name of the potential file OR contents of potential file to be written anonymously on-the-fly. Type: string; Default: potfile.pot. SUMMATION_FIELDS¶. Summation scheme for field computations, can be direct or fmm. Type: string; Possible Values: DIRECT, FMM; Default: DIRECT. TREE_EXPANSION_ORDER¶. Expansion order of the multipoles for FMM. Type: integer; Default: 5. TREE_THETA¶. Opening angle theta. Type: double; Default: 0.5. table of contents. PE; General; BORDER; BORDER_N_REDIST; BORDER_REDIST_ORDER; BORDER_REDIST_POL; BORDER_RMIN; BORDER_RMIN_UNIT; BORDER_TYPE; DAMPING_FACTOR_INDUCED; DAMPING_FACTOR_MULTIPOLE; DAMP_INDUCED; DAMP_MULTIPOLE; INDUCED_CONVERGENCE; ISOTROPIC_POL; MAXITER; PE_ECP; POTFILE; SUMMATION_FIELDS; TREE_EXPANSION_ORDER; TREE_THETA. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Keywords by Module; PE. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/autodir_options_c/module__pe-1.html:2860,update,updated,2860,psi4manual/1.5.0/autodir_options_c/module__pe-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodir_options_c/module__pe-1.html,2,['update'],['updated']
Deployability,"unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cfour/sp-rhf-ccsd_t_-fc; single-point CCSD(T)/qz2p on water with ecc, aobasis, and frozen-core. cfour/scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is apecified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cfour/sp-rhf-cc3; single-point CC3/qz2p on water. cfour/kw-5; Basis set spherical/Cartesian with basis and cfour_spherical. cfour/sp-uhf-ccsd_t_; single-point CCSD(T)/qz2p. cfour/sp-rhf-ccsd-ao; single-point CCSD/qz2p on water with aobasis. cfour/kw-2; testing best practices options, part ii. cfour/sp-rohf-ccsd_t_; single-point CCSD(T)/qz2p on NH2. cfour/mints5; geometries from a variety of input formats. references from psi4, testing whether geometry strings read identically for psi4/cfour. cfour/sp-rohf-scf; single-point HF/qz2p on NH2. cfour/opt-rhf-ccsd_t_; optimization CCSD(T)/dzp on water. cfour/sp-uhf-cc3; single-point CC3/qz2p on NH2. cfour/psi-rhf-scsmp2; MP2 energy components. Checks that computed identically between cfour and psi4. cfour/psi-ghost-grad; MP2 optimization of dimers with one momomer ghosted. Gradients after three opt cycles are compared with those from psi4. cfour/kw-6; Basis set spherical/Cartesian with cfour_basis and puream. cfour/psi-uhf-scsmp2; UHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/sp-rohf-mp4-sc; single-point MP4/qz2p on NH2. cfour/sp-rhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on water with ecc module. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Test Suite and Sample Inputs. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_cfour-1.html:5144,update,updated,5144,psi4manual/1.1.0/autodoc_testsuite_cfour-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_cfour-1.html,2,['update'],['updated']
Deployability,"unt_rxn); RMSDerror = math.sqrt(RMSDerror / float(count_rxn)). tables += """"""%23s %19s %10.4f %10.4f\n"""""" % ('Minimal Dev', '', minDerror, minDerror * constants.cal2J); tables += """"""%23s %19s %10.4f %10.4f\n"""""" % ('Maximal Dev', '', maxDerror, maxDerror * constants.cal2J); tables += """"""%23s %19s %10.4f %10.4f\n"""""" % ('Mean Signed Dev', '', MSDerror, MSDerror * constants.cal2J); tables += """"""%23s %19s %10.4f %10.4f\n"""""" % ('Mean Absolute Dev', '', MADerror, MADerror * constants.cal2J); tables += """"""%23s %19s %10.4f %10.4f\n"""""" % ('RMS Dev', '', RMSDerror, RMSDerror * constants.cal2J); tables += """""" %s\n"""""" % (table_delimit). core.set_variable('%s DATABASE MEAN SIGNED DEVIATION' % (db_name), MSDerror); core.set_variable('%s DATABASE MEAN ABSOLUTE DEVIATION' % (db_name), MADerror); core.set_variable('%s DATABASE ROOT-MEAN-SQUARE DEVIATION' % (db_name), RMSDerror). core.print_out(tables); finalenergy = MADerror. else:; finalenergy = 0.0. optstash.restore(). DB_RGT.clear(); DB_RGT.update(VRGT); DB_RXN.clear(); DB_RXN.update(VRXN); return finalenergy. def _tblhead(tbl_maxrgt, tbl_delimit, ttype):; r""""""Function that prints the header for the changable-width results tables in db().; *tbl_maxrgt* is the number of reagent columns the table must plan for. *tbl_delimit*; is a string of dashes of the correct length to set off the table. *ttype* is 1 for; tables comparing the computed values to the reference or 2 for simple tabulation; and sum of the computed values. """"""; tbl_str = ''; tbl_str += """""" %s"""""" % (tbl_delimit); if ttype == 1:; tbl_str += """"""\n%23s %19s %21s"""""" % ('Reaction', 'Reaction Energy', 'Reaction Error'); elif ttype == 2:; tbl_str += """"""\n%23s %19s %17s"""""" % ('Reaction', 'Reaction Value', ''); for i in range(tbl_maxrgt):; tbl_str += """"""%20s"""""" % ('Reagent ' + str(i + 1)); if ttype == 1:; tbl_str += """"""\n%23s %8s %8s %10s %10s"""""" % ('', 'Ref', 'Calc', '[kcal/mol]', '[kJ/mol]'); elif ttype == 2:; tbl_str += """"""\n%65s"""""" % (''); for i in range(tbl_maxrgt):; if ttype",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/wrapper_database.html:28323,update,update,28323,psi4manual/1.3.2/_modules/psi4/driver/wrapper_database.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/wrapper_database.html,10,['update'],['update']
Deployability,"up to the user to know what to do here. The code does NOT help you out in any way!. Type: boolean; Default: false. MAT_NUM_COLUMN_PRINT¶. Number of columns to print in calls to Matrix::print_mat. Type: integer; Default: 5. PCM_SCF_TYPE¶. Use total or separate potentials and charges in the PCM-SCF step. Type: string; Possible Values: TOTAL, SEPARATE; Default: TOTAL. RAS1¶. An array giving the number of orbitals per irrep for RAS1. Type: array; Default: No Default. RAS2¶. An array giving the number of orbitals per irrep for RAS2. Type: array; Default: No Default. RAS3¶. An array giving the number of orbitals per irrep for RAS3. Type: array; Default: No Default. RAS4¶. An array giving the number of orbitals per irrep for RAS4. Type: array; Default: No Default. RELATIVISTIC¶. Relativistic Hamiltonian type. Type: string; Possible Values: NO, X2C; Default: NO. WFN¶. Wavefunction type. Type: string; Default: SCF. Table Of Contents. GLOBALS; General; ACTIVE; BENCH; CC_TYPE; CI_TYPE; CUBEPROP_BASIS_FUNCTIONS; CUBEPROP_FILEPATH; CUBEPROP_ORBITALS; CUBEPROP_TASKS; CUBIC_GRID_OVERAGE; CUBIC_GRID_SPACING; DF_BASIS_CC; DOCC; FREEZE_CORE; FROZEN_DOCC; FROZEN_UOCC; INTEGRAL_PACKAGE; LITERAL_CFOUR; MP2_TYPE; MP_TYPE; NUM_FROZEN_DOCC; NUM_FROZEN_UOCC; PCM; PRINT; PROPERTIES; PROPERTIES_ORIGIN; PUREAM; QC_MODULE; REL_BASIS; RESTRICTED_DOCC; RESTRICTED_UOCC; SOCC; UNITS; WRITER_FILE_LABEL. Expert; CUBIC_BASIS_TOLERANCE; CUBIC_BLOCK_MAX_POINTS; DEBUG; DERTYPE; DIE_IF_NOT_CONVERGED; DKH_ORDER; EXTERNAL_POTENTIAL_SYMMETRY; MAT_NUM_COLUMN_PRINT; PCM_SCF_TYPE; RAS1; RAS2; RAS3; RAS4; RELATIVISTIC; WFN. Previous topic; Keywords by Module; Next topic; ACTIVE. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Keywords by Module ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodir_options_c/module__globals-1.html:8880,update,updated,8880,psi4manual/1.0.0/autodir_options_c/module__globals-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodir_options_c/module__globals-1.html,2,['update'],['updated']
Deployability,"update_orbitals(self: psi4.core.IntegralTransform) → None¶; docstring. table of contents. IntegralTransform; IntegralTransform; IntegralTransform.DPD_ID(); IntegralTransform.alpha_corr_to_pitzer(); IntegralTransform.backtransform_density(); IntegralTransform.backtransform_tpdm_restricted(); IntegralTransform.backtransform_tpdm_unrestricted(); IntegralTransform.beta_corr_to_pitzer(); IntegralTransform.compute_fock_like_matrices(); IntegralTransform.get_dpd_id(); IntegralTransform.get_frozen_core_energy(); IntegralTransform.get_keep_dpd_so_ints(); IntegralTransform.get_keep_ht_ints(); IntegralTransform.get_keep_iwl_so_ints(); IntegralTransform.get_memory(); IntegralTransform.get_print(); IntegralTransform.get_psio(); IntegralTransform.get_tei_already_presorted(); IntegralTransform.initialize(); IntegralTransform.nirrep(); IntegralTransform.presort_so_tei(); IntegralTransform.print_dpd_lookup(); IntegralTransform.reset_so_int(); IntegralTransform.set_aa_int_name(); IntegralTransform.set_ab_int_name(); IntegralTransform.set_bb_int_name(); IntegralTransform.set_dpd_id(); IntegralTransform.set_dpd_int_file(); IntegralTransform.set_keep_dpd_so_ints(); IntegralTransform.set_keep_ht_ints(); IntegralTransform.set_keep_iwl_so_ints(); IntegralTransform.set_memory(); IntegralTransform.set_orbitals(); IntegralTransform.set_print(); IntegralTransform.set_psio(); IntegralTransform.set_so_tei_file(); IntegralTransform.set_tei_already_presorted(); IntegralTransform.set_tpdm_already_presorted(); IntegralTransform.set_write_dpd_so_tpdm(); IntegralTransform.transform_tei(); IntegralTransform.transform_tei_first_half(); IntegralTransform.transform_tei_second_half(); IntegralTransform.update_orbitals(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. PSI4 API: Linking C++ and Python; IntegralTransform. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/api/psi4.core.IntegralTransform.html:7201,update,updated,7201,psi4manual/master/api/psi4.core.IntegralTransform.html,https://psicode.org,https://psicode.org/psi4manual/master/api/psi4.core.IntegralTransform.html,1,['update'],['updated']
Deployability,"upstream/addon/; and rm -rf {objdir}/stage/share/cmake/AddOn. This should; re-clone the Add-On, rebuild and install it, rebuild any parts of; PSI4 that interface to it, and relink the main core.so.; If you’re modifying the Add-On’s file or directory structure, be; smart and rm all traces of it within {objdir}/stage/,; especially any *.pyc files.; Alternatively to the above, you can instead build and install the; Add-On library yourself, external to the PSI4 repository. This; is especially useful if you want to avoid full recompiles of the; Add-On at each change to the Add-On’s source. Build the Add-On; library dynamically (-DBUILD_SHARED_LIBS=ON) and mind any; “Psi4 wants” in the Add-On’s top-level CMakeLists.txt. Install the; Add-On and note the full path to AddOnConfig.cmake. Pass; the path containing that file to PSI4’s CMake as; -DAddon_DIR=/path/to/config/usually/ending/in/share/cmake/AddON; and build PSI4. The main core.so should be dynamically linked; to your dev AddOn dynamic lib and update automatically when you rebuild; the AddOn lib. Naturally, you may need to delete core.so and remake; as needed. table of contents. Compiling and Installing from Source; Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies; How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda; How to see what build configuration options are available; How to install elsewhere than /usr/local/psi4; How to compile for debugging; How to fix error “RuntimeError: value for ERI”; How to choose the compilation directory, {objdir}; How to save configuration settings for a future compilation; What is the directory layout of the installed or staged Psi4; How to run Psi4 as executable after compil",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/build_planning-1.html:54770,update,update,54770,psi4manual/1.3.2/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/build_planning-1.html,2,['update'],['update']
Deployability,"ur Users; Output; Functionality; Specification Details; Misc. Running. Interface to CheMPS2 by S. Wouters; Installation; Methods; DMRG Keywords; How to configure CheMPS2 for building Psi4; How to fix “plugin needed to handle lto object” when building CheMPS2. Interface to DFTD3 by S. Grimme; Installation; Theory; Running DFTD3. Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess; Installation; Input; Keywords; Reference; How to configure dkh for building Psi4. Interface to LIBEFP by I. Kaliman; Installation; EFP Fragments; Molecule Specification; Running EFP; Fragment Library; How to configure libefp for building Psi4. Interface to ERD by N. Flocke and V. Lotrich; Installation; How to configure erd for building Psi4. Interface to programs through FCHK files — fchk(); Interface to gau2grid by D. G. A. Smith; Installation; How to configure gau2gridfor building Psi4. Interface to gCP by S. Grimme; Installation; Running gCP. Interface to GDMA Distributed Multipole Analysis by A. J. Stone — gdma(); Installation; Input; Options; How to configure gdma for building Psi4. Interface to Libint by E. Valeev; Installation; How to configure Libint for building Psi4. Interface to Molden — molden(); Options. Interface to MRCC by M. Kállay; Installation; Running MRCC; Interface Details. Interface to PCMSolver by R. Di Remigio; Installation; Using the polarizable continuum model; Keywords for PCMSolver; How to configure PCMSolver for building Psi4. Interface to SIMINT by B. Pritchard; Installation; How to configure simint for building Psi4. Spin-Network-Scaled MP2 (SNS-MP2) by D. E. Shaw; Installation; Sample Input. Plugin v2rdm_casscf by A. E. DePrince; Installation. Interface to Libxc by M. A. L. Marques; Installation; How to configure Libxc for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 July 2018 04:21AM.; Created using Sphinx 1.7.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/interfacing-1.html:2491,update,updated,2491,psi4manual/1.2.1/interfacing-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/interfacing-1.html,2,['update'],['updated']
Deployability,"ur interpreter is python2.6, the config program is; python2.6-config. If you cannot find the config program the; developer libraries will not be detected and the PSI4 configure script; will fail. The library is called python-devel for Fedora and; python-dev for Ubuntu. A version of MPI is required to compile distributed-parallel PSI;; MPICH2 is recommended.; (Note: MPICH2-1.1.0 had trouble with some header files. MPICH2-1.2.1; seems to fix it.). GNU utilities: (see http://www.gnu.org). make. autoconf (version 2.52 or higher). Note; autoconf is only needed for special; architectures, to compile with MADNESS, or to compile the; development branch. aclocal. fileutils (esp. install). For documentation: (available pre-built off http://www.psicode.org). latex; sphinx (version 1.1 or higher); dvipng (for latex math in html). To make a distributed-parallel version with MADNESS, you may also need:. libtool (called by autoreconf). For Ubuntu users, you will need the following packages installed:; gfortran [for linking to BLAS/LAPACK], g++, autoconf, python-dev. II. Brief Summary of Configuration, Compilation, and Installation¶; This section outlines the main steps of configuring, compiling, and; installing PSI. More detail is given below in Section III. Autoconf. For unusual architectures (or for developers working in the development; branch), one needs to first run autoconf to generate; the file “configure” in the top-level psi4 directory. For most Linux; and Mac compilations, this should not be necessary because the configure; file provided with PSI4 should be sufficient. To replace the general; configure file with one specific to your architecture, in the top-level; psi4 directory, run autoconf:; >>> autoconf. Distributed-parallel compilation.; Not recommended at this time except for developers. Shared-memory; parallelization is already enabled by default in the standard; compilation.; Distributed-parallel versions of PSI4 require madness. If you select; mpicxx as the compi",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/installfile.html:2409,install,installed,2409,psi4manual/4.0b3/installfile.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/installfile.html,1,['install'],['installed']
Deployability,"uration — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » . Installation and Runtime Configuration¶. Obtaining PSI4¶; The latest version of the PSI4 program package may be obtained at; www.psicode.org. The; source code is available as a gzipped tar archive (named, for example,; psi4.X.tar.gz, and binaries may be available for certain architectures.; For detailed installation and testing instructions, please refer to; Compiling and Installing (same information as; the file psi4/INSTALL distributed with the package). Compiling and Installing¶. I. Compilation Prerequisites; II. Brief Summary of Configuration, Compilation, and Installation; III. Detailed Installation Instructions; IV. Recommendations for BLAS and LAPACK libraries; V. Miscellaneous architecture-specific notes; VI. Common Problems with PSI Compilation. Scratch Files and the ~/.psi4rc File¶; One very important part of user configuration at the end of the; installation process (details here); is to tell PSI4 where to write its temporary; (“scratch”) files. Electronic structure packages like PSI4 can; create rather large temporary disk files. It is very important to; ensure that PSI4 is writing its temporary files to a disk drive; phsyically attached to the computer running the computation. If it; is not, it will significantly slow down the program and the network.; By default, PSI4 will write temporary files to /tmp, but this; directory is often not large enough for typical computations. Therefore,; you need to (a) make sure there is a sufficiently large directory on a; locally attached disk drive (100GB–1TB or more, depending on the size of; the molecules to be studied) and (b) tell PSI4 the path to this; directory. Scratch file location can be specified through the; PSI_SCRATCH environment variable or, more flexibly, through; a resource file, ~/.psi4rc (example psi4/samples/example_psi4rc_file).; For convenience, the Python interpreter will execu",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/external-1.html:990,configurat,configuration,990,psi4manual/4.0b4/external-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/external-1.html,4,"['configurat', 'install']","['configuration', 'installation']"
Deployability,"uration — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » . Installation and Runtime Configuration¶. Obtaining PSI4¶; The latest version of the PSI4 program package may be obtained at; www.psicode.org. The; source code is available as a gzipped tar archive (named, for example,; psi4.X.tar.gz, and binaries may be available for certain architectures.; For detailed installation and testing instructions, please refer to; Compiling and Installing (same information as; the file psi4/INSTALL distributed with the package). Compiling and Installing¶. I. Compilation Prerequisites; II. Brief Summary of Configuration, Compilation, and Installation; III. Detailed Installation Instructions; IV. Recommendations for BLAS and LAPACK libraries; V. Miscellaneous architecture-specific notes; VI. Common Problems with PSI Compilation. Scratch Files and the ~/.psi4rc File¶; One very important part of user configuration at the end of the; installation process (details here); is to tell PSI4 where to write its temporary; (“scratch”) files. Electronic structure packages like PSI4 can; create rather large temporary disk files. It is very important to; ensure that PSI4 is writing its temporary files to a disk drive; phsyically attached to the computer running the computation. If it; is not, it will significantly slow down the program and the network.; By default, PSI4 will write temporary files to /tmp, but this; directory is often not large enough for typical computations. Therefore,; you need to (a) make sure there is a sufficiently large directory on a; locally attached disk drive (100GB–1TB or more, depending on the size of; the molecules to be studied) and (b) tell PSI4 the path to this; directory. Scratch file location can be specified through the; PSI_SCRATCH environment variable or, more flexibly, through; a resource file, ~/.psi4rc (example psi4/samples/example_psi4rc_file).; For convenience, the Python interpreter will execu",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/external-1.html:990,configurat,configuration,990,psi4manual/4.0b5/external-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/external-1.html,4,"['configurat', 'install']","['configuration', 'installation']"
Deployability,"ure-GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; Y;  . HCTH120-D3BJ; HCTH120 Pure-GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; Y;  . HF-D3; Hartree Fock as Roothan prescribed; —; —; —; 1.000000; —; —; —; Y;  . HF-D3BJ; Hartree Fock as Roothan prescribed; —; —; —; 1.000000; —; —; —; Y;  . M05-2X-D3; Heavily Parameterized Hybrid Meta-GGA XC Functional; Y; Y; —; 0.560000; —; —; —; Y;  . M05-D3; Heavily Parameterized Hybrid Meta-GGA XC Functional; Y; Y; —; 0.280000; —; —; —; Y;  . PBE-D; PBE GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; Y;  . PBE-D3; PBE GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; Y;  . PBE-D3BJ; PBE GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; Y;  . PBE-D3M; PBE GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; Y;  . PBE-D3MBJ; PBE GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; Y;  . PBE0-D; PBE0 Hybrid GGA Exchange-Correlation Functional; Y; —; —; 0.250000; —; —; —; Y;  . PBE0-D3; PBE0 Hybrid GGA Exchange-Correlation Functional; Y; —; —; 0.250000; —; —; —; Y;  . PBE0-D3BJ; PBE0 Hybrid GGA Exchange-Correlation Functional; Y; —; —; 0.250000; —; —; —; Y;  . PBE0-D3M; PBE0 Hybrid GGA Exchange-Correlation Functional; Y; —; —; 0.250000; —; —; —; Y;  . PBE0-D3MBJ; PBE0 Hybrid GGA Exchange-Correlation Functional; Y; —; —; 0.250000; —; —; —; Y;  . wB97X-D; Parameterized Hybrid LRC B97 GGA XC Functional with Dispersion; Y; —; 0.200000; 0.222036; —; —; —; Y;  . wPBE-D3; PBE SR-XC Functional (HJS Model); Y; —; 0.400000; —; —; —; —; Y;  . wPBE-D3BJ; PBE SR-XC Functional (HJS Model); Y; —; 0.400000; —; —; —; —; Y;  . wPBE-D3M; PBE SR-XC Functional (HJS Model); Y; —; 0.400000; —; —; —; —; Y;  . wPBE-D3MBJ; PBE SR-XC Functional (HJS Model); Y; —; 0.400000; —; —; —; —; Y;  . Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; DFT Functionals. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/autodoc_dft_disp-1.html:4507,update,updated,4507,psi4manual/1.1.0/autodoc_dft_disp-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_dft_disp-1.html,2,['update'],['updated']
Deployability,"urnvalue). optstash.restore(). [docs]def run_dft_gradient(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; a density-functional-theory gradient calculation. """"""; optstash = p4util.OptionsState(; ['SCF', 'DFT_FUNCTIONAL'],; ['SCF', 'REFERENCE'],; ['SCF', 'SCF_TYPE']). # Alter default algorithm; if not psi4.has_option_changed('SCF', 'SCF_TYPE'):; psi4.set_local_option('SCF', 'SCF_TYPE', 'DF'). psi4.set_local_option('SCF', 'DFT_FUNCTIONAL', name). user_ref = psi4.get_option('SCF', 'REFERENCE'); if (user_ref == 'RHF'):; psi4.set_local_option('SCF', 'REFERENCE', 'RKS'); elif (user_ref == 'UHF'):; psi4.set_local_option('SCF', 'REFERENCE', 'UKS'); elif (user_ref == 'ROHF'):; raise ValidationError('ROHF reference for DFT is not available.'); elif (user_ref == 'CUHF'):; raise ValidationError('CUHF reference for DFT is not available.'). run_scf_gradient(name, **kwargs). optstash.restore(). [docs]def run_detci(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; a configuration interaction calculation, namely FCI,; CIn, MPn, and ZAPTn. """"""; optstash = p4util.OptionsState(; ['TRANSQT2', 'WFN'],; ['DETCI', 'WFN'],; ['DETCI', 'MAX_NUM_VECS'],; ['DETCI', 'MPN_ORDER_SAVE'],; ['DETCI', 'MPN'],; ['DETCI', 'FCI'],; ['DETCI', 'EX_LEVEL']). user_ref = psi4.get_option('DETCI', 'REFERENCE'); if (user_ref != 'RHF') and (user_ref != 'ROHF'):; raise ValidationError('Reference %s for DETCI is not available.' % user_ref). if (name.lower() == 'zapt'):; psi4.set_local_option('TRANSQT2', 'WFN', 'ZAPTN'); psi4.set_local_option('DETCI', 'WFN', 'ZAPTN'); level = kwargs['level']; maxnvect = (level + 1) / 2 + (level + 1) % 2; psi4.set_local_option('DETCI', 'MAX_NUM_VECS', maxnvect); if ((level + 1) % 2):; psi4.set_local_option('DETCI', 'MPN_ORDER_SAVE', 2); else:; psi4.set_local_option('DETCI', 'MPN_ORDER_SAVE', 1); elif (name.lower() == 'detci-mp') or (name.lower() == 'mp'):; psi4.set_local_option('TRANSQT2', 'WFN', 'DETCI'); psi4.set_local_option('DETCI', ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/_modules/proc.html:40358,configurat,configuration,40358,psi4manual/4.0b5/_modules/proc.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/_modules/proc.html,1,['configurat'],['configuration']
Deployability,"use the; cp kwarg and/or the extended method syntax like; 'mp3/aug-cc-pv[dt]z' to energy(), opt(), etc., respectively.; For many of the PSI4 Python functions described above, it makes scientific; sense that they could be called in combination. For instance, one could; optimize all the reagents in a database or compute a; counterpoise-corrected interaction energy with an extrapolated method. The; table below outlines permitted intercalls between functions, showing that; db(opt(cbs(energy()))) is allowed, while db(cp(energy())) is not. This; table is not yet validated for calls with cp(). Permitted nesting of Psithon functions¶. Caller; Callee.  ; cp; db; opt; cbs; energy. Basis Set Superposition Corrections;  ; —; Y; Y; Y. Database — database(); —;  ; Y; Y; Y. Geometry Optimization — optimize() and gradient(); —; —;  ; Y; Y. Complete Basis Set; —; —; —;  ; Y. Single-Point Energy — energy(); —; —; —; —;  . The command db(opt(cbs(energy()))) is actually expressed as db(...,; db_func=opt, opt_func=cbs). The perhaps expected final argument of; cbs_func=energy is not necessary since energy() is always the function; called by default. Also, the outermost internal function call (db_func; above can be called as just func. Several examples of intercalls; between Python functions can be found in sample input pywrap-all.; All keyword arguments are passed along to each function traversed in the; Python driver, so there should be no concern for separating them, grouping; them, or designating them for a particular function when undertaking a; nested calculation. Where the same keyword is used by multiple functions,; prefixes are added, e.g., db_mode and opt_mode.; Function intercalls should not be used in sow/reap mode. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Psithon Functions: Invoking a Calculation. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 July 2018 04:21AM.; Created using Sphinx 1.7.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/intercalls-1.html:2211,update,updated,2211,psi4manual/1.2.1/intercalls-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/intercalls-1.html,2,['update'],['updated']
Deployability,"useful,; # but WITHOUT ANY WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; # GNU General Public License for more details.; #; # You should have received a copy of the GNU General Public License along; # with this program; if not, write to the Free Software Foundation, Inc.,; # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; #; # @END LICENSE; #. """"""Module with functions that call upon those in modules; :py:mod:`proc`, :py:mod:`driver`, and :py:mod:`wrappers`. Place in this file quickly defined procedures such as; - aliases for complex methods; - simple modifications to existing methods. """"""; from __future__ import print_function; from __future__ import absolute_import; import re; import os; import math; import warnings; import driver_cbs; #from wrappers import *; #from gaussian_n import * # CU; #from wrappers_cfour import * # CU; #from qmmm import * # CU. # Python procedures like these can be run directly from the input file or integrated; # with the energy(), etc. routines by means of lines like those at the end; # of this file. [docs]def fake_file11(wfn, filename='fake_file11.dat', **kwargs):; r""""""Function to print a file *filename* of the old file11 format; from molecule and gradient information in *wfn*. .. versionadded:: 0.6; *wfn* parameter passed explicitly. :returns: None. :type filename: string; :param filename: destination file name for file11 file. :type wfn: :ref:`Wavefunction<sec:psimod_Wavefunction>`; :param wfn: set of molecule, gradient from which to generate file11. :examples:. >>> # [1] file11 for CISD calculation; >>> G, wfn = gradient('cisd', return_wfn=True); >>> fake_file11(wfn, 'mycalc.11'). """"""; molecule = wfn.molecule(); molecule.update_geometry(); gradient = wfn.gradient(). with open(filename, 'w') as handle:; handle.write('%d\n' % (molecule.natom())). for at in range(molecule.natom()):; handle.write('%6s %16.8f %16.8f %16.8f\n' % (molecule.symbol(; at), molecule.x",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/aliases.html:1713,integrat,integrated,1713,psi4manual/1.0.0/_modules/aliases.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/aliases.html,1,['integrat'],['integrated']
Deployability,"user, it’s convenient to do the same by hand to your ~/.tcshrc: setenv PATH /path/to/miniconda/bin:${PATH}. Further directions assume that the conda command is in your path; you may have to log out and log back in for which conda to return correctly. >>> bash Miniconda-latest-Linux-x86_64.sh; # check; >>> which conda; /path/to/miniconda/bin/conda. Update conda. This updates the package manager itself. >>> conda update conda. Detailed Installation of PSI4¶. Subscribe to PSI4. Subscribe to our channel at http://anaconda.org/psi4 that contains the PSI4 package and several dependency packages. Make sure this shows up in your ~/.condarc file. >>> conda config --add channels http://conda.anaconda.org/psi4; # check; >>> cat ~/.condarc; channels:; - http://conda.anaconda.org/psi4; - defaults. Install PSI4. You can install into the main conda environment so that whenever commands conda or (Ana/Miniconda’s) python are available, then psi4 is available, too. >>> conda install psi4; # check; >>> which psi4; /path/to/miniconda/bin/psi4. Or, you can install into a conda environment that places PSI4 and its dependencies (including python) into a sandbox unaffected by any other software installed in Ana/Miniconda. This is recommended for developers to avoid interference between multiple versions (including github/conda versions) or to test python versions, etc.. If your main conda is not python=2.7, then PSI4 must be installed into a conda environment. In practical terms, installing into a conda environment means you can turn PSI4‘s availability on/off by switching conda environments without turning on/off the whole Ana/Miniconda installation. Below, PSI4 is installed into an environment called p4env. Then the environment is activated, removing the main Ana/Miniconda bin and adding envs/p4env/bin to PATH. The activate command only works in bash, so csh/tcsh will need corresponding adjustments.; >>> conda create -n p4env psi4; >>> source activate p4env; # check; >>> which psi4; /pat",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/conda-1.html:13700,install,install,13700,psi4manual/1.1.0/conda-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/conda-1.html,2,['install'],['install']
Deployability,"user, it’s convenient to do the same by hand to your ~/.tcshrc: setenv PATH /path/to/miniconda/bin:${PATH}. Further directions assume that the conda command is in your path; you may have to log out and log back in for which conda to return correctly. >>> bash Miniconda-latest-Linux-x86_64.sh; # check; >>> which conda; /path/to/miniconda/bin/conda. Update conda. This updates the package manager itself. >>> conda update conda. Detailed Installation of PSI4¶. Subscribe to PSI4. Subscribe to our channel at http://anaconda.org/psi4 that contains the PSI4 package and several dependency packages. Make sure this shows up in your ~/.condarc file. >>> conda config --add channels http://conda.anaconda.org/psi4; # check; >>> cat ~/.condarc; channels:; - http://conda.anaconda.org/psi4; - defaults. Install PSI4. You can install into the main conda environment so that whenever commands conda or (Ana/Miniconda’s) python are available, then psi4 is available, too. >>> conda install psi4; # check; >>> which psi4; /path/to/miniconda/bin/psi4. Or, you can install into a conda environment that places PSI4 and its dependencies (including python) into a sandbox unaffected by any other software installed in Ana/Miniconda. This is recommended for developers to avoid interference between multiple versions (including github/conda versions) or to test python versions, etc.. In practical terms, installing into a conda environment means you can turn PSI4’s availability on/off by switching conda environments without turning on/off the whole Ana/Miniconda installation. Below, PSI4 is installed into an environment called p4env. Then the environment is activated, removing the main Ana/Miniconda bin and adding envs/p4env/bin to PATH. The conda activate command (conda >=4.4; December 2017) works in all shells, but if you’re using old source activate that only works for bash; adjust as needed for csh/tcsh.; >>> conda create -n p4env psi4; >>> conda activate p4env; # check; >>> which psi4; /path/to/mini",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/conda-1.html:16123,install,install,16123,psi4manual/1.2.1/conda-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/conda-1.html,4,['install'],['install']
Deployability,"user, it’s convenient to do the same by hand to your ~/.tcshrc: setenv PATH /path/to/miniconda/bin:${PATH}. Further directions assume that the conda command is in your path; you may have to log out and log back in for which conda to return correctly. >>> bash Miniconda-latest-Linux-x86_64.sh; # check; >>> which conda; /path/to/miniconda/bin/conda. Update conda. This updates the package manager itself. >>> conda update conda. Detailed Installation of Psi4¶. Subscribe to Psi4. Subscribe to our channel at http://anaconda.org/psi4 that contains the Psi4 package and several dependency packages. Make sure this shows up in your ~/.condarc file. >>> conda config --add channels http://conda.anaconda.org/psi4; # check; >>> cat ~/.condarc; channels:; - http://conda.anaconda.org/psi4; - defaults. Install Psi4. You can install into the main conda environment so that whenever commands conda or (Ana/Miniconda’s) python are available, then psi4 is available, too. >>> conda install psi4; # check; >>> which psi4; /path/to/miniconda/bin/psi4. Or, you can install into a conda environment that places Psi4 and its dependencies (including python) into a sandbox unaffected by any other software installed in Ana/Miniconda. This is recommended for developers to avoid interference between multiple versions (including github/conda versions) or to test python versions, etc.. If your main conda is not python=2.7, then Psi4 must be installed into a conda environment. In practical terms, installing into a conda environment means you can turn Psi4‘s availability on/off by switching conda environments without turning on/off the whole Ana/Miniconda installation. Below, Psi4 is installed into an environment called p4env. Then the environment is activated, removing the main Ana/Miniconda bin and adding envs/p4env/bin to PATH. The activate command only works in bash, so csh/tcsh will need corresponding adjustments.; >>> conda create -n p4env psi4; >>> source activate p4env; # check; >>> which psi4; /pat",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/conda-1.html:8974,install,install,8974,psi4manual/1.0.0/conda-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/conda-1.html,2,['install'],['install']
Deployability,"uses neural networking to; improve the accuracy of MP2 (dfmp2) interaction energies for dimer molecules.; The plugin is distributed under the 2-clause BSD license. Installation¶; Binary. snsmp2 is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). If using the Psi4conda installer, snsmp2 has already been installed alongside. If using the PSI4 conda package, the snsmp2 conda package can; be obtained through conda install snsmp2 -c psi4 or conda install; psi4-rt -c psi4. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; snsmp2 can be obtained through conda install snsmp2 -c psi4.; Then, hint its location with PYTHONPATH. To remove a conda installation, conda remove snsmp2. Source. Download the plugin from the GitHub repository:; >>> git clone https://github.com/DEShawResearch/sns-mp2. Once dowloaded, the plugin can be installed as outlined in the documentation:; >>> cd {top-level-sns-mp2-directory}; >>> PSI4_PYTHON=$(head $(which psi4) -n 1 | sed -r 's/^.{2}//'); >>> $PSI4_PYTHON -m pip install . Sample Input¶; A sample input file, adapted from the documentation, is shown below:; 1; 2; 3; 4; 5; 6; 7; 8; 9# Sample SNS-MP2 calculation for two helium atoms. molecule dimer {; He 0 0 0; --; He 2 0 0; }. energy('sns-mp2'). Note that the two monomers are separated by double dashes, indicating that; they should be treated as separate molecules. (See; sec:analysis-of-intermolecular-interactions for more details on; setting up dimer molecules.) This input file can be run in the usual fashion:; >>> psi4 input.dat. table of contents. Spin-Network-Scaled MP2 (SNS-MP2) by D. E. Shaw; Installation; Sample Input. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/plugin_snsmp2-1.html:1528,install,install,1528,psi4manual/1.3.2/plugin_snsmp2-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/plugin_snsmp2-1.html,4,"['install', 'update']","['install', 'updated']"
Deployability,"ushed before the tag itself, so the version shows up “undefined”.; So, anytime after “Tag (pre)release” is over, navigate on psi4 GH to the tag commit (not the record commit) and retrigger the docs GHA. Download the artifact (zipped docs dir) at the end to a local computer.; In your hugo site clone, create a new directory under static/psi4manual. Copy the zipped docs there, unpack, rearrange so that static/psi4manual/<new-tag>/index.html is present. Check in. Publish GitHub release¶. On GitHub site “Draft a New Release” with newly minted tag; Fill in frontmatter style and links from previous GitHub release; Fill in RN from hopefully existing RN issue; Fill in RN by going through the top posts from all PRs from this milestone; “publish” release. This establishes release date for GitHub API; Close the RN issue.; Close the milestone (should be 100% complete). Publish GitHub postrelease¶. On GitHub site “Draft a New Release” for anticipated or newly minted tag; Fill in frontmatter style and links from previous GitHub release; Fill in RN as cherry-pick to or edit on branch; “publish” release. This establishes release date for GitHub API. Publish psicode release¶. Copy a recent release page like https://github.com/psi4/psicode-hugo-website/blob/master/content/posts/v1p2.md; Edit its filename, title, date, image, and links; Execute https://api.github.com/repos/psi4/psi4/releases/latest and note the id field value; Use the id value in the shortcode call at the bottom by ghRN. Finalize release¶. Make new PR with; * edits to main README.md badges, python versions, etc.; * edits to CMakeLists.txt find_package(PythonLibsNew 3.6 REQUIRED); Tweet about release. Reset psi4meta for nightly operation¶; On both Linux and Mac:. After (post)release (not prerelease), in conda_build_config.yaml, edit ltrtver to a new “release.dev” label; After postrelease, unpin any dependencies in cbcy that needed older either ver or bld (e.g., v2rdm_casscf_bld); Edit psi4ver back to '' in cbcy; Edit sou",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/manage_release.html:18311,release,release,18311,psi4manual/1.8.x/manage_release.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/manage_release.html,2,['release'],['release']
Deployability,"ushed before the tag itself, so the version shows up “undefined”.; So, anytime after “Tag (pre)release” is over, navigate on psi4 GH to the tag commit (not the record commit) and retrigger the docs GHA. Download the artifact (zipped docs dir) at the end to a local computer.; In your hugo site clone, create a new directory under static/psi4manual. Copy the zipped docs there, unpack, rearrange so that static/psi4manual/<new-tag>/index.html is present. Check in. Publish GitHub release¶. On GitHub site “Draft a New Release” with newly minted tag; Fill in frontmatter style and links from previous GitHub release; Fill in RN from hopefully existing RN issue; Fill in RN by going through the top posts from all PRs from this milestone; “publish” release. This establishes release date for GitHub API; Close the RN issue.; Close the milestone (should be 100% complete). Publish GitHub postrelease¶. On GitHub site “Draft a New Release” for anticipated or newly minted tag; Fill in frontmatter style and links from previous GitHub release; Fill in RN as cherry-pick to or edit on branch; “publish” release. This establishes release date for GitHub API. Publish psicode release¶. Copy a recent release page like https://github.com/psi4/psicode-hugo-website/blob/master/content/posts/v1p2.md; Edit its filename, title, date, image, and links; Execute https://api.github.com/repos/psi4/psi4/releases/latest and note the id field value; Use the id value in the shortcode call at the bottom. Finalize release¶. Make new PR with; * edits to main README.md badges, python versions, etc.; * edits to CMakeLists.txt find_package(PythonLibsNew 3.6 REQUIRED); Tweet about release. Reset psi4meta for nightly operation¶; On both Linux and Mac:. After (post)release (not prerelease), in conda_build_config.yaml, edit ltrtver to a new “release.dev” label; After postrelease, unpin any dependencies in cbcy that needed older either ver or bld (e.g., v2rdm_casscf_bld); Edit psi4ver back to '' in cbcy; Edit source/git_",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/manage_release-1.html:18121,release,release,18121,psi4manual/1.5.0/manage_release-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/manage_release-1.html,8,['release'],['release']
Deployability,"using driver from source¶; When developing python driver code, it can be annoying to keep makeing to test the code. PSI4 can be run “inplace” through the; following procedure. To be clear, this is running compiled C++ from the; build directory and python from the source directory. This is an expert; option for development, and not all functionality will be available.; 1; 2; 3>>> cd {objdir}; >>> ln -s {top-level-psi4-dir}/{objdir}/stage/{prefix}/lib/psi4/core.so ../psi4/core.so; >>> python ../psi4/run_psi4.py --inplace input.dat. How to set PSIDATADIR and why¶; PSIDATADIR is an environment variable containing the location of the; text resource parts of the PSI4 codebase (e.g., basis sets,; databases, EFP fragments). It is for developer use only. In PSI4 1.1; and beyond, the program always knows where its resources are, and the; only reason to set this variable is to point to another location.; Previously in PSI4 1.0 and previous, only installed executables knew; the location, so it always needed to be explicitly set when run from the; compilation directory.; At runtime; >>> psi4 -p {top-level-psi4-dir}/psi4/share/psi4. Or in the shell; # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSIDATADIR {top-level-psi4-dir}/psi4/share/psi4. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSIDATADIR={top-level-psi4-dir}/psi4/share/psi4. How to configure C++ and C compilers for building Psi4¶; Role and Dependencies. Role — In PSI4, a C++ compiler is vital for building the code.; Downstream Dependencies — PSI4 \(\Leftarrow\) C++ Compiler. CMake Variables. CMAKE_CXX_COMPILER — CMake variable to specify name or full path to C++ compiler.; CMAKE_C_COMPILER — CMake variable to specify name or full path to C compiler.; CMAKE_CXX_FLAGS — CMake variable to specify any additional custom compiler flags for C++ source.; CMAKE_C_FLAGS — CMake variable to specify any additional custom compiler flags for C source. Examples. Build with detected c",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/build_planning-1.html:24167,install,installed,24167,psi4manual/1.1.0/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/build_planning-1.html,2,['install'],['installed']
Deployability,"using this code, please contact Rob Parrish to make arrangements for; collaboration. Recommendations¶; The KS-DFT code is quite new, but relatively complete. During code development,; emphasis was placed on flexibility of functional technology, efficiency for; medium to large systems in difficult electronic environments (e.g., compact; spatial extents, diffuse basis sets, low band-gaps, LRC and/or hybrid GKS; functionals), and time to code completion. We are very interested in optimizing; and extending the code, so expect performance gains and extensions to; gradients/hessians and TDDFT in future releases.; Some rough guidelines for using the KS-DFT code are as follows,. Use DF for the ERI algorithm wherever possible.; PSI4 is a “tight” code, meaning we’ve set the default numerical cutoffs; for integrals, grids, and convergence criteria in such a way that you will often; get many more digits of precision than needed. You may be able to realize; additional speed gains by loosening some of these thresholds.; Read the literature to determine which functional technology to use. The world; contains far too many papers using B3LYP on noncovalent interactions without a -D. The “best-practice” input file for KS-DFT is:; memory 1 GB # As much as you've got, the DF algorithm can use. molecule {; H; H 1 0.7; }. set {; basis cc-pvdz; scf_type df; guess sad; }. energy('b3lyp'). Table Of Contents. Density Functional Theory; Theory; Minimal Input; Spin/Symmetry Treatment; Functional Selection; Grid Selection; ERI Algorithms; IP Fitting; Fractional Particle Curves; Recommendations. Previous topic; Hartree–Fock Theory; Next topic; Density-Fitted Second-Order Møller-Plesset Perturbation Theory; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Theoretical Methods: SCF to FCI ». © Copyright 2012, Psi4 Project.; Last updated on Sep 30, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/dft-1.html:23373,update,updated,23373,psi4manual/4.0b2/dft-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/dft-1.html,2,['update'],['updated']
Deployability,"ut. doi: 10.1021/acs.jctc.6b00456. Hesselmann:2014:094107; A. Hesselmann and T. Korona,; J. Chem. Phys. 141, 094107 (2014). Hylleraas:1930:209; E. Hylleraas; Z. Phys. 65, 209 (1930). Pulay:1986:357; P. Pulay and S. Saebø,; Theor. Chim. Acta 69, 357 (1986). Pinski:2015:034108; P. Pinski, C. Riplinger, E. Valeev, and F. Neese,; J. Chem. Phys. 143, 034108 (2015). Liakos:2015:1525; D. Liakos, M. Sparta, M. Kesharwani, J. Martin, and F. Neese,; J. Chem. Theory Comput. 11, 1525 (2015). Smith:2018:3504; 10.1021/acs.jctc.8b00286,; “PSI4NUMPY: An Interactive Quantum Chemistry Programming Environment for Reference Implementations and Rapid Development”,; D. G. A. Smith, L. A. Burns, D. A. Sirianni, D. R. Nascimento, A. Kumar, A. M. James, J. B. Schriber, T. Zhang, B. Zhang, A. S. Abbott, E. J. Berquist, M. H. Lechner, L. A. Cunha, A. G. Heide, J. M. Waldrop, T. Y. Takeshita, A. Alenaizan, D. Neuhauser, R. A. King, A. C. Simmonett, J. M. Turney, H. F. Schaefer III, F. A. Evangelista, A. E. DePrince, T. D. Crawford, K. Patkowski, and C. D. Sherrill; J. Chem. Theory Comput. 14, 3504-3511 (2018). Schriber:2021:234107; J. B. Schriber, D. A. Sirianni, D. G. A. Smith, L. A. Burns, D. Sitkoff, D. L. Cheney, C. D. Sherrill; J. Chem. Phys. 154, 234107 (2021). Caldeweyher:2019:154122; “A generally applicable atomic-charge dependent London dispersion correction”,; E. Caldeweyher, S. Ehlert, A. Hansen, H. Neugebauer, S. Spicher, C. Bannwarth, and S. Grimme,; J. Chem. Phys. 150, 154122 (2019).; https://doi.org/10.1063/1.5090222. Haser:1989:104; M. Haser and R. Ahlrichs,; J. Comp. Chem. 10(1), 104 (1989).; doi: 10.1002/jcc.540100111. Thompson:2017:144101; T. H. Thompson and C. Ochsenfeld; J. Chem. Phys. 147, 144101 (2017).; doi: 10.1063/1.4994190. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Bibliography. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/bibliography-1.html:13377,update,updated,13377,psi4manual/1.5.0/bibliography-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/bibliography-1.html,2,['update'],['updated']
Deployability,"utable after compilation; How to solve ModuleNotFoundError: No module named 'psi4'; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4; How to configure Python for building Psi4; What Python is Psi4 running; How to fix “undefined symbol: _Py_FalseStruct”; How to use gdb and lldb with Psi4; How to see the actual compiling commands (or errors) with cmake; How to highlight git merge conflicts in vi; How to handle “runtime library may be hidden” when building with Anaconda Python; How to set up the scratch directory; How do I retain specific Psi4 scratch files; How to use Psi4 within a PBS queue; How to update and rebuild Psi4; How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation; How to refer to Psi4; How to get a Psi4 logo file; How to use a local Add-On repository in the Psi4 build; How to use logging in Psi4; How to find the Psi4 module from the executable and vice versa. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Installation and Runtime Configuration; Compiling and Installing from Source. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/build_planning.html:64379,update,update,64379,psi4manual/1.8.x/build_planning.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/build_planning.html,3,"['install', 'update']","['installation', 'update', 'updated']"
Deployability,"utable after compilation; How to solve ModuleNotFoundError: No module named 'psi4'; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4; How to configure Python for building Psi4; What Python is Psi4 running; How to fix “undefined symbol: _Py_FalseStruct”; How to use gdb and lldb with Psi4; How to see the actual compiling commands (or errors) with cmake; How to highlight git merge conflicts in vi; How to handle “runtime library may be hidden” when building with Anaconda Python; How to set up the scratch directory; How do I retain specific Psi4 scratch files; How to use Psi4 within a PBS queue; How to update and rebuild Psi4; How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation; How to refer to Psi4; How to get a Psi4 logo file; How to use a local Add-On repository in the Psi4 build; How to use logging in Psi4; How to find the Psi4 module from the executable and vice versa. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.9.1;  · . PSI4. Installation and Runtime Configuration; Compiling and Installing from Source. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 08 February 2024 09:32PM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/build_planning.html:64644,update,update,64644,psi4manual/1.9.x/build_planning.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/build_planning.html,3,"['install', 'update']","['installation', 'update', 'updated']"
Deployability,"utable into the; main conda environment at $HOME/miniconda/bin/psi4.; # Linux or Mac, Py2 or Py3 for main environment (immaterial to Py for Psi4): select between four lines; # Windows: in Ubuntu shell, select either Linux line; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda2-latest-Linux-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda2-latest-MacOSX-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh"". >>> bash; >>> bash Miniconda-latest.sh -b -p $HOME/miniconda # agrees to conda's license terms; >>> echo ""export PATH=$HOME/miniconda/bin:\$PATH"" >> ~/.bashrc # Mac: use ~/.bash_profile; # log out, log back in so conda in path; >>> conda update --yes --all; >>> conda config --add channels http://conda.anaconda.org/psi4; >>> conda install --yes psi4; >>> psi4 ""$(dirname $(which psi4))""/../share/psi4/samples/sapt1/test.in # test installation. works b/c PSI_SCRATCH defaults to /tmp. That last command tested that psi4 is in your path, and it’s finding; all the libraries it needs. Now you need only specify a scratch directory; (see Scratch Files and Elementary Restart) by replacing the placeholder in the following:; >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!. Note; Above commands use bash for installation and set up your environment for bash at runtime. To use csh at runtime, follow the on-screen directions at the end of the installation or consult step 7 below. Detailed Installation of Miniconda¶. Sanity check. If you already have Miniconda or Anaconda, skip to step 5. The whole installation takes ~5 min; reading this page takes far longer.; Get bzip2. You’ll need this slightly exotic command so run whi",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/conda-1.html:12746,install,install,12746,psi4manual/1.2.1/conda-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/conda-1.html,6,['install'],['install']
Deployability,"utable into the; main conda environment at $HOME/miniconda/bin/psi4.; # Linux or Mac, Py2 or Py3 for main environment (immaterial to Py for Psi4): select between four lines; # Windows: in Ubuntu shell, select either Linux line; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda2-latest-Linux-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda2-latest-MacOSX-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh"". >>> bash; >>> bash Miniconda-latest.sh -b -p $HOME/miniconda # agrees to conda's license terms; >>> echo ""export PATH=$HOME/miniconda/bin:\$PATH"" >> ~/.bashrc # Mac: use ~/.bash_profile; # log out, log back in so conda in path; >>> conda update --yes --all; >>> conda config --add channels http://conda.anaconda.org/psi4; >>> conda install --yes psi4; >>> psi4 ""$(dirname $(which psi4))""/../share/psi4/samples/sapt1/test.in # test installation. works b/c PSI_SCRATCH defaults to /tmp. That last command tested that psi4 is in your path, and it’s finding; all the libraries it needs. Now you need only specify a scratch directory; (see Scratch Files) by replacing the placeholder in the following:; >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!. Note; Above commands use bash for installation and set up your environment for bash at runtime. To use csh at runtime, follow the on-screen directions at the end of the installation or consult step 7 below. Detailed Installation of Miniconda¶; https://docs.conda.io/en/latest/miniconda.html. Detailed Installation of PSI4¶. Subscribe to PSI4. Subscribe to our channel at https://anaconda.org/psi4 that contains the PSI4 package and several dependency packages. Make sure this ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/conda-1.html:13544,install,install,13544,psi4manual/1.4.0/conda-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html,9,['install'],['install']
Deployability,"utations. Type: string; Possible Values: SPIN_ADAPTED, RESTRICTED, UNRESTRICTED; Default: RESTRICTED. TRIPLES_DIIS (PSIMRCC)¶PSIMRCC — Do use DIIS extrapolation to accelerate convergence for iterative triples excitations?. Type: boolean; Default: false. TRIPLES_IABC_TYPE (DFOCC)¶DFOCC — The algorithm to handle (ia|bc) type integrals that used for (T) correction. Type: string; Possible Values: INCORE, AUTO, DIRECT, DISK; Default: DISK. TRIPLES_LOW_MEMORY (FNOCC)¶FNOCC — Do use low memory option for triples contribution? Note that this option is enabled automatically if the memory requirements of the conventional algorithm would exceed the available resources. The low memory algorithm is faster in general and has been turned on by default starting September 2020. Type: boolean; Default: true. TURN_ON_ACTV (MCSCF)¶MCSCF —. Type: integer; Default: 0. UHF_NOONS (SCF)¶SCF — The number of NOONs to print in a UHF calc. Type: string; Default: 3. UPDATE (DETCI)¶DETCI — The update or correction vector formula, either DAVIDSON (default) or OLSEN. Type: string; Possible Values: DAVIDSON, OLSEN; Default: DAVIDSON. USE_DF_INTS (FNOCC)¶FNOCC (Expert) — Use 3-index integrals to generate 4-index ERI’s? This keyword is used for testing purposes only. Changing its value will have no effect on the computation. Type: boolean; Default: false. USE_SPIN_SYM (PSIMRCC)¶PSIMRCC — Do use symmetry to map equivalent determinants onto each other, for efficiency?. Type: boolean; Default: true. USE_SPIN_SYMMETRY (PSIMRCC)¶PSIMRCC (Expert) — Whether to use spin symmetry to map equivalent configurations onto each other, for efficiency. Type: boolean; Default: true. VAL_EX_LEVEL (DETCI)¶DETCI — In a RAS CI, this is the additional excitation level for allowing electrons out of RAS I into RAS II. The maximum number of holes in RAS I is therefore EX_LEVEL + VAL_EX_LEVEL. Type: integer; Default: 0. VECS_CC3 (CCEOM)¶CCEOM — Vectors stored in CC3 computations. Type: integer; Default: 10. VECS_PER_ROOT (CCEOM",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:228095,update,update,228095,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html,8,['update'],['update']
Deployability,"ute only second-order induction The integrals are computed before any terms, so all integrals will be computed even if they are not needed for the requested term. Type: boolean; Default: false. SAPT0_E20IND¶. For SAPT0 only, compute only second-order induction The integrals are computed before any terms, so all integrals will be computed even if they are not needed for the requested term. Type: boolean; Default: false. SAPT_MEM_FACTOR¶. Proportion of memory available for the DF-MP2 three-index integral buffers used to evaluate dispersion. Type: double; Default: 0.9. Expert SAPT(DFT)¶. SAPT_DFT_FUNCTIONAL¶. Underlying funcitonal to use for SAPT(DFT). Type: string; Default: PBE0. SAPT_DFT_MP2_DISP_ALG¶. Which MP2 Exch-Disp module to use?. Type: string; Possible Values: FISAPT, SAPT; Default: SAPT. SAPT_FDDS_DISP_LEG_LAMBDA¶. Lambda shift in the space morphing for the FDDS Dispersion time integration. Type: double; Default: 0.3. SAPT_FDDS_DISP_NUM_POINTS¶. Number of points in the Legendre FDDS Dispersion time integration. Type: integer; Default: 10. SAPT_FDDS_V2_RHO_CUTOFF¶. Minimum rho cutoff for the in the LDA response for FDDS. Type: double; Default: 1.e-6. SAPT_QUIET¶. Interior option to clean up printing. Type: boolean; Default: false. table of contents. SAPT; SAPT(HF); AIO_CPHF; AIO_DF_INTS; BASIS; CCD_E_CONVERGENCE; CCD_MAXITER; CCD_T_CONVERGENCE; DENOMINATOR_ALGORITHM; DENOMINATOR_DELTA; DF_BASIS_ELST; DF_BASIS_SAPT; D_CONVERGENCE; EXCH_SCALE_ALPHA; E_CONVERGENCE; FREEZE_CORE; INTS_TOLERANCE; MAXITER; MAX_CCD_DIISVECS; MIN_CCD_DIISVECS; NAT_ORBS_T2; NAT_ORBS_T3; NAT_ORBS_V4; OCC_TOLERANCE; PRINT; SAPT_LEVEL; SAPT_MEM_CHECK; SAPT_MEM_SAFETY. SAPT(DFT); SAPT_DFT_DO_DHF; SAPT_DFT_GRAC_DETERMINATION; SAPT_DFT_GRAC_SHIFT_A; SAPT_DFT_GRAC_SHIFT_B. Expert SAPT(HF); COUPLED_INDUCTION; DO_CCD_DISP; DO_IND_EXCH_SINF; DO_MBPT_DISP; DO_THIRD_ORDER; SAPT0_E10; SAPT0_E20DISP; SAPT0_E20IND; SAPT_MEM_FACTOR. Expert SAPT(DFT); SAPT_DFT_FUNCTIONAL; SAPT_DFT_MP2_DISP_ALG; SAPT_FDD",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/autodir_options_c/module__sapt-1.html:7184,integrat,integration,7184,psi4manual/1.3.2/autodir_options_c/module__sapt-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/autodir_options_c/module__sapt-1.html,4,['integrat'],['integration']
Deployability,"ute, cannot exceed the number of fragments in the moleucle. ptype (string) – 'energy' || 'gradient' || 'hessian'; Type of the procedure passed in. return_total_data (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); If True returns the total data (energy/gradient/etc) of the system,; otherwise returns interaction data. levels (dict) – {1: 'ccsd(t)', 2: 'mp2', 'supersystem': 'scf'} || {1: 2, 2: 'ccsd(t)', 3: 'mp2'} || etc; Dictionary of different levels of theory for different levels of expansion; Note that method_string is not used in this case.; supersystem computes all higher order n-body effects up to nfragments. embedding_charges (dict) – {1: [-0.834, 0.417, 0.417], ..}; Dictionary of atom-centered point charges. keys: 1-based index of fragment, values: list of charges for each fragment. charge_method (string) – scf/6-31g || b3lyp/6-31g* || etc; Method to compute point charges for monomers. Overridden by embedding_charges if both are provided. charge_type (string) – MULLIKEN_CHARGES || LOWDIN_CHARGES; Default is MULLIKEN_CHARGES. The nbody function computes counterpoise-corrected (CP), non-CP (noCP), and Valiron-Mayer Function Counterpoise (VMFC) interaction energies for complexes composed of arbitrary numbers of monomers.; Examples :; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22# Counterpoise corrected CCSD(T) energy for the Helium dimer; molecule mol {; He; --; He 1 3; }. energy('CCSD(T)', bsse_type='cp'). # noCP, VMFC, and CP energy for a helium cluster, limited at 3 bodies; molecule mol {; He 0 0 0; --; He 0 0 4; --; He 0 4 0; --; He 4 0 0; }. # Returns the nocp energy as its first in the list; energy('CCSD(T)', bsse_type=['nocp', 'cp', 'vmfc'], max_nbody=3). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Psithon Functions: Invoking a Calculation. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/nbody-1.html:3505,update,updated,3505,psi4manual/1.3.2/nbody-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/nbody-1.html,2,['update'],['updated']
Deployability,"utes; ----------; message; Human readable string describing the exception. Example; -------; >>> psi4.compare_values(2, 3, 2, ""asdf""); asdf..................................................................................FAILED; psi4.driver.p4util.exceptions.TestComparisonError: asdf: computed value (3.0000) does not match (2.0000) to atol=0.01 by difference (1.0000).; !----------------------------------------------------------------------------------!; ! !; ! asdf: computed value (3.0000) does not match (2.0000) to atol=0.01 by !; ! difference (1.0000). !; ! !; !----------------------------------------------------------------------------------!. """"""; message: str. def __init__(self, msg: str):; PsiException.__init__(self, msg); self.message = '\nPsiException: %s\n\n' % msg. [docs]class UpgradeHelper(PsiException):; """"""Error called on previously valid syntax that now isn't and a; simple syntax transition is possible. It is much preferred to leave the old syntax valid for a release; cycle and have the old syntax raise a deprecation :class:`FutureWarning`.; For cases where the syntax just has to jump, an UpgradeHelper can be used; to trap the old syntax at first error and suggest the new. An UpgradeHelper can also be used after the :class:`FutureWarning`; described above has expired. Then the body of the code can be deleted while; the definition is preserved, and an UpgradeHelper called in place of the; body to guide users with lagging syntax. Parameters; ----------; old; Previously valid syntax.; new; Suggested replacement syntax.; version; First Major.minor version at which `old` syntax won't run. Generally; the next release at time of commit.; elaboration; Any additional message to convey. Should start with a space. """"""; def __init__(self, old: str, new: str, version: str, elaboration: str):; msg = ""Using `{}` instead of `{}` is obsolete as of {}.{}"".format(old, new, version, elaboration); PsiException.__init__(self, msg); core.print_out('\nPsiException: %s\n\n' % ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/p4util/exceptions.html:3903,release,release,3903,psi4manual/1.7.x/_modules/psi4/driver/p4util/exceptions.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/p4util/exceptions.html,1,['release'],['release']
Deployability,"uthor: Andrew C. Simmonett and Benjamin P. Pritchard; Section author: Lori A. Burns. These are the AcesIII electron repulsion integrals that have; been partially interfaced into libmints. Enabling erd and adding; set integral_package erd (do this in ~/.psi4rc for universal; effect) runs libderiv from Libint for derivative integrals and erd for; non-derivative integrals. Warning; The interface between erd and libderiv is not fully; debugged. So analytic gradients, particularly density-fitted ones,; are wrong, as are ESP calculations and some energies for long-range; corrected (“omega”) functionals. Insofar as faulty answers are; anticipated with INTEGRAL_PACKAGE erd, PSI4 will; throw an error if you try to execute that class of computation. But; there may be more, so use with caution. Installation¶; Binary. ERD is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; erd can be obtained through conda install erd.; Then enable it as a feature with ENABLE_erd,; hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect erd and activate dependent code.; To remove a conda installation, conda remove erd. Source. If using PSI4 built from source and you want erd built from; from source also,; enable it as a feature with ENABLE_erd,; and let the build system fetch and build it and activate dependent code. How to configure erd for building Psi4¶; Role and Dependencies. Role — In PSI4, ERD is a library that provides alternate; integrals.; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) erd; Upstream Dependencies — erd \(\Leftarrow\) Fortran. CMake Variables. ENABLE_erd — CMake variable toggling whether PSI4 builds with erd; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For erd, set to an installation directory containing include/ERD/ERD_MANGLE.h; erd_D",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/erd-1.html:1203,install,installed,1203,psi4manual/1.1.0/erd-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/erd-1.html,4,['install'],"['install', 'installed']"
Deployability,"uto works like template type; deduction, hence the right-hand side of the declaration needs to have an; initializer:. int x1; // fine, but uninitialized :(; auto x2; // WON'T COMPILE!!!; auto x3 = 1; // fine and initialized. Problems with unintended type casts and type mismatches that are hard; to impossible to catch:. std::vector<int> v;; // !!! The size of a vector is of type std::vector<int>::size_type and is compiler- AND architecture-DEPENDENT; unsigned sz = v.size(); // might not be correct on some compiler/machines; auto size = v.size(); // size is ALWAYS of the correct type. Reference: Items 2 and 5 in [Effective Modern C++]. Mark virtual functions in derived classes with override¶; The override keyword introduced in C++11 is used to mark a function in a; derived class and guarantee that it is overloading a function with the same; signature in the base class. This behavior is checked at compile time. Prefer GiB for memory printing¶; As memory sizes get larger, we should work in giga (requires decimal printing to not round to zero) rather than mega units.; As it’s what we’re computing anyways, we should work in 1024-based (mebi, gibi, etc. https://en.wikipedia.org/wiki/Gibibyte) rather than 1000-based units.; As it’s a unit, put it in brackets.; Note that users can supply MiB, GB, bytes, or whatever; this guideline is for output printing.; outfile->Printf("" DFHelper Memory: AOs need %.3f [GiB]; user supplied %.3f [GiB]. "",; (required * 8 / (1024 * 1024 * 1024.0)),. table of contents. C++ Style; Prefer nullptr to 0 or NULL; Prefer std::make_shared to direct use of new; Prefer auto to explicit type declarations; Mark virtual functions in derived classes with override; Prefer GiB for memory printing. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Adding New Code to PSI4; C++ Style. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/prog_style_c.html:3653,update,updated,3653,psi4manual/1.8.x/prog_style_c.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/prog_style_c.html,1,['update'],['updated']
Deployability,"uto works like template type; deduction, hence the right-hand side of the declaration needs to have an; initializer:. int x1; // fine, but uninitialized :(; auto x2; // WON'T COMPILE!!!; auto x3 = 1; // fine and initialized. Problems with unintended type casts and type mismatches that are hard; to impossible to catch:. std::vector<int> v;; // !!! The size of a vector is of type std::vector<int>::size_type and is compiler- AND architecture-DEPENDENT; unsigned sz = v.size(); // might not be correct on some compiler/machines; auto size = v.size(); // size is ALWAYS of the correct type. Reference: Items 2 and 5 in [Effective Modern C++]. Mark virtual functions in derived classes with override¶; The override keyword introduced in C++11 is used to mark a function in a; derived class and guarantee that it is overloading a function with the same; signature in the base class. This behavior is checked at compile time. Prefer GiB for memory printing¶; As memory sizes get larger, we should work in giga (requires decimal printing to not round to zero) rather than mega units.; As it’s what we’re computing anyways, we should work in 1024-based (mebi, gibi, etc. https://en.wikipedia.org/wiki/Gibibyte) rather than 1000-based units.; As it’s a unit, put it in brackets.; Note that users can supply MiB, GB, bytes, or whatever; this guideline is for output printing.; outfile->Printf("" DFHelper Memory: AOs need %.3f [GiB]; user supplied %.3f [GiB]. "",; (required * 8 / (1024 * 1024 * 1024.0)),. table of contents. C++ Style; Prefer nullptr to 0 or NULL; Prefer std::make_shared to direct use of new; Prefer auto to explicit type declarations; Mark virtual functions in derived classes with override; Prefer GiB for memory printing. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.9.1;  · . PSI4. Adding New Code to PSI4; C++ Style. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 08 February 2024 09:32PM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/prog_style_c.html:3653,update,updated,3653,psi4manual/1.9.x/prog_style_c.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/prog_style_c.html,1,['update'],['updated']
Deployability,"utput to file if verbose; verbose = psi4.get_option('SCF', 'PRINT'); if verbose >= 3:; psi4.print_out('\n ==> DFTD3 Output <==\n'); psi4.print_out(out); dfile = open(derivfile, 'r'); psi4.print_out(dfile.read().replace('D', 'E')); dfile.close(); psi4.print_out('\n'). # Clean up files and remove scratch directory; os.unlink(paramfile); os.unlink(geomfile); os.unlink(derivfile); if defmoved is True:; os.rename(defaultfile + '_hide', defaultfile). os.chdir('..'); try:; shutil.rmtree(dftd3_tmpdir); except OSError as e:; ValidationError('Unable to remove dftd3 temporary directory %s' % e, file=sys.stderr); os.chdir(current_directory). # return -D & d(-D)/dx; psi4.set_variable('DISPERSION CORRECTION ENERGY', dashd); if dertype == -1:; return dashd, dashdderiv; elif dertype == 0:; return dashd; elif dertype == 1:; return psi_dashdderiv. [docs]def dynamic_variable_bind(cls):; """"""Function to dynamically add extra members to; the psi4.Molecule class. """"""; cls.__setattr__ = new_set_attr; cls.__getattr__ = new_get_attr; cls.BFS = BFS; cls.run_dftd3 = run_dftd3. dynamic_variable_bind(psi4.Molecule) # pass class type, not class instance. #; # Define geometry to be used by PSI4.; # The molecule created by this will be set in options.; #; # geometry(""; # O 1.0 0.0 0.0; # H 0.0 1.0 0.0; # H 0.0 0.0 0.0; #; [docs]def geometry(geom, name=""default""):; """"""Function to create a molecule object of name *name*; from the geometry in string *geom*. """"""; molecule = psi4.Molecule.create_molecule_from_string(geom); molecule.set_name(name). activate(molecule). return molecule. [docs]def activate(mol):; """"""Function to set molecule object *mol* as the current active molecule.""""""; psi4.set_active_molecule(mol); #psi4.IO.set_default_namespace(mol.get_name()). Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    ; PSI4 [beta5] » ; Module code ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/_modules/molutil.html:14001,update,updated,14001,psi4manual/4.0b5/_modules/molutil.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/_modules/molutil.html,1,['update'],['updated']
Deployability,"utside top-level-psi4-dir are permitted. How to save configuration settings for a future compilation¶; Create a file like do-configure with the cmake command and options; on one line.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10>>> cd {top-level-psi4-dir}; >>> cat do-configure; cmake -H. -B{objdir} \; -DCMAKE_INSTALL_PATH=""/Users/me/psi4"" \; -DCMAKE_PREFIX_PATH=""/Users/me/externals/install-libint"" \; -DMAX_AM_ERI=6 \; -DENABLE_gdma=ON \; -DBUILD_SHARED_LIBS=ON; >>> chmod u+x do-configure; >>> ./do-configure. What is the directory layout of the installed or staged Psi4¶; After compilation (cd objdir && make), a directory structure like the; below will exist at objdir/stage/prefix. This may be tested and used; just like a full installation.; After installation (cd objdir && make && make install), a directory; structure like the below will exist at /prefix. This is a full; installation.; /; bin/ (executables for psi4 + any external proj); bin/psi4 (psi4 executable, actually just a py script); include/ (installed headers for psi4 + any external proj); include/psi4/ (header files for #include-ing); include/psi4/psi4-dec.h (primary psi4 header); include/psi4/masses.h (a project-wide psi4 header); include/psi4/libmints/ (psi4 library headers); include/psi4/libfock/ (ditto); share/ (read-only arch-indep files for psi4 + any external proj); share/cmake/psi4/ (files for detecting installed targets); share/cmake/psi4/psi4Config.cmake (psi4 build/install info); share/cmake/psi4/psi4ConfigVersion.cmake (psi4 cmake version info); share/doc/psi4/html/ (sphinx html documentation); share/psi4/ (text files needed by psi4); share/psi4/basis (basis sets); share/psi4/plugins (plugin template files); share/psi4/fsapt (fsapt scripts); share/psi4/samples/ (sample input files); lib/ (shared libraries and py modules for psi4 + any external proj); # ordinary; lib/psi4/ (object files); lib/psi4/driver/ (py-side, uncompiled); lib/psi4/header.py (prints file header); lib/psi4/metadata.py (psi4 version info); l",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/build_planning-1.html:20090,install,installed,20090,psi4manual/1.2.1/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html,2,['install'],['installed']
Deployability,"utside top-level-psi4-dir are permitted. How to save configuration settings for a future compilation¶; Create a file like do-configure with the cmake command and options; on one line.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10>>> cd {top-level-psi4-dir}; >>> cat do-configure; cmake -H. -B{objdir} \; -DCMAKE_INSTALL_PATH=""/Users/me/psi4"" \; -DCMAKE_PREFIX_PATH=""/Users/me/externals/install-libint"" \; -DMAX_AM_ERI=6 \; -DENABLE_gdma=ON \; -DBUILD_SHARED_LIBS=ON; >>> chmod u+x do-configure; >>> ./do-configure. What is the directory layout of the installed or staged Psi4¶; After compilation (cd objdir && make), a directory structure like the; below will exist at objdir/stage/prefix. This may be tested and used; just like a full installation.; After installation (cd objdir && make && make install), a directory; structure like the below will exist at /prefix. This is a full; installation.; /; bin/ (executables for psi4 + any external proj); bin/psi4 (psi4 executable, actually just a py script); include/ (installed headers for psi4 + any external proj); include/psi4/ (header files for #include-ing); include/psi4/psi4-dec.h (primary psi4 header); include/psi4/masses.h (a project-wide psi4 header); include/psi4/libmints/ (psi4 library headers); include/psi4/libfock/ (ditto); share/ (read-only arch-indep files for psi4 + any external proj); share/cmake/psi4/ (files for detecting installed targets); share/cmake/psi4/psi4Config.cmake (psi4 build/install info); share/cmake/psi4/psi4ConfigVersion.cmake (psi4 version info); share/doc/psi4/html/ (sphinx html documentation); share/psi4/ (text files needed by psi4); share/psi4/basis (basis sets); share/psi4/plugins (plugin template files); share/psi4/fsapt (fsapt scripts); share/psi4/samples/ (sample input files); lib/ (shared libraries and py modules for psi4 + any external proj); # ordinary; lib/psi4/ (object files); lib/psi4/driver/ (py-side, uncompiled); lib/psi4/header.py (prints file header); lib/psi4/__init__.py (module marker/loader for ps",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/build_planning-1.html:17203,install,installed,17203,psi4manual/1.1.0/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/build_planning-1.html,2,['install'],['installed']
Deployability,"v double; Default: 1e-14. ONEPDM¶. Do compute one-particle density matrix?. Type: boolean; Default: false. ONEPDM_GRID_CUTOFF¶. Cutoff (e/A^3) for printing one-particle density matrix values on a grid. Type: double; Default: 1.0e-30. ONEPDM_GRID_DUMP¶. Write one-particle density matrix on a grid to file opdm.dx. Type: boolean; Default: false. ONEPDM_GRID_STEPSIZE¶. Stepsize (Angstrom) for one-particle density matrix values on a grid. Type: double; Default: 0.1. OPDM_RELAX¶. Do relax the one-particle density matrix?. Type: boolean; Default: false. PROP_ALL¶. Compute non-relaxed properties for all excited states. Type: boolean; Default: true. PROP_ROOT¶. Root number (within its irrep) for computing properties. Type: integer; Default: 1. PROP_SYM¶. The symmetry of states. Type: integer; Default: 1. REFERENCE¶. Reference wavefunction type. Type: string; Default: RHF. ROOTS_PER_IRREP¶. The number of electronic states to computed, per irreducible representation. Type: array; Default: No Default. XI¶. Do compute Xi?. Type: boolean; Default: false. ZETA¶. Do use zeta?. Type: boolean; Default: false. Expert¶. AEL¶. Do compute the approximate excitation level? See Stanton and Bartlett, JCP, 98, 1993, 7034. Type: boolean; Default: false. WFN¶. Wavefunction type. Type: string; Default: SCF. XI_CONNECT¶. Do require and to be connected?. Type: boolean; Default: false. Table Of Contents. CCDENSITY; General; AO_BASIS; CACHELEVEL; GAUGE; INTS_TOLERANCE; ONEPDM; ONEPDM_GRID_CUTOFF; ONEPDM_GRID_DUMP; ONEPDM_GRID_STEPSIZE; OPDM_RELAX; PROP_ALL; PROP_ROOT; PROP_SYM; REFERENCE; ROOTS_PER_IRREP; XI; ZETA. Expert; AEL; WFN; XI_CONNECT. Previous topic; SEM_MAXITER; Next topic; AEL; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Appendices »; Keywords by Module ». © Copyright 2012, The Psi4 Project.; Last updated on Oct 16, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/autodir_options_c/module__ccdensity-1.html:2596,update,updated,2596,psi4manual/4.0b3/autodir_options_c/module__ccdensity-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodir_options_c/module__ccdensity-1.html,2,['update'],['updated']
Deployability,"v double; Default: 1e-14. ONEPDM¶. Do compute one-particle density matrix?. Type: boolean; Default: false. ONEPDM_GRID_CUTOFF¶. Cutoff (e/A^3) for printing one-particle density matrix values on a grid. Type: double; Default: 1.0e-30. ONEPDM_GRID_DUMP¶. Write one-particle density matrix on a grid to file opdm.dx. Type: boolean; Default: false. ONEPDM_GRID_STEPSIZE¶. Stepsize (Angstrom) for one-particle density matrix values on a grid. Type: double; Default: 0.1. OPDM_RELAX¶. Do relax the one-particle density matrix?. Type: boolean; Default: false. PROP_ALL¶. Compute non-relaxed properties for all excited states. Type: boolean; Default: true. PROP_ROOT¶. Root number (within its irrep) for computing properties. Type: integer; Default: 1. PROP_SYM¶. The symmetry of states. Type: integer; Default: 1. REFERENCE¶. Reference wavefunction type. Type: string; Default: RHF. ROOTS_PER_IRREP¶. The number of electronic states to computed, per irreducible representation. Type: array; Default: No Default. XI¶. Do compute Xi?. Type: boolean; Default: false. ZETA¶. Do use zeta?. Type: boolean; Default: false. Expert¶. AEL¶. Do compute the approximate excitation level? See Stanton and Bartlett, JCP, 98, 1993, 7034. Type: boolean; Default: false. WFN¶. Wavefunction type. Type: string; Default: SCF. XI_CONNECT¶. Do require and to be connected?. Type: boolean; Default: false. Table Of Contents. CCDENSITY; General; AO_BASIS; CACHELEVEL; GAUGE; INTS_TOLERANCE; ONEPDM; ONEPDM_GRID_CUTOFF; ONEPDM_GRID_DUMP; ONEPDM_GRID_STEPSIZE; OPDM_RELAX; PROP_ALL; PROP_ROOT; PROP_SYM; REFERENCE; ROOTS_PER_IRREP; XI; ZETA. Expert; AEL; WFN; XI_CONNECT. Previous topic; SEM_MAXITER; Next topic; AEL; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; Keywords by Module ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 25, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/autodir_options_c/module__ccdensity-1.html:2596,update,updated,2596,psi4manual/4.0b4/autodir_options_c/module__ccdensity-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodir_options_c/module__ccdensity-1.html,2,['update'],['updated']
Deployability,"v double; Default: 1e-14. ONEPDM¶. Do compute one-particle density matrix?. Type: boolean; Default: false. ONEPDM_GRID_CUTOFF¶. Cutoff (e/A^3) for printing one-particle density matrix values on a grid. Type: double; Default: 1.0e-30. ONEPDM_GRID_DUMP¶. Write one-particle density matrix on a grid to file opdm.dx. Type: boolean; Default: false. ONEPDM_GRID_STEPSIZE¶. Stepsize (Angstrom) for one-particle density matrix values on a grid. Type: double; Default: 0.1. OPDM_RELAX¶. Do relax the one-particle density matrix?. Type: boolean; Default: false. PROP_ALL¶. Compute non-relaxed properties for all excited states. Type: boolean; Default: true. PROP_ROOT¶. Root number (within its irrep) for computing properties. Type: integer; Default: 1. PROP_SYM¶. The symmetry of states. Type: integer; Default: 1. REFERENCE¶. Reference wavefunction type. Type: string; Default: RHF. ROOTS_PER_IRREP¶. The number of electronic states to computed, per irreducible representation. Type: array; Default: No Default. XI¶. Do compute Xi?. Type: boolean; Default: false. ZETA¶. Do use zeta?. Type: boolean; Default: false. Expert¶. AEL¶. Do compute the approximate excitation level? See Stanton and Bartlett, JCP, 98, 1993, 7034. Type: boolean; Default: false. WFN¶. Wavefunction type. Type: string; Default: SCF. XI_CONNECT¶. Do require and to be connected?. Type: boolean; Default: false. Table Of Contents. CCDENSITY; General; AO_BASIS; CACHELEVEL; GAUGE; INTS_TOLERANCE; ONEPDM; ONEPDM_GRID_CUTOFF; ONEPDM_GRID_DUMP; ONEPDM_GRID_STEPSIZE; OPDM_RELAX; PROP_ALL; PROP_ROOT; PROP_SYM; REFERENCE; ROOTS_PER_IRREP; XI; ZETA. Expert; AEL; WFN; XI_CONNECT. Previous topic; SEM_MAXITER; Next topic; AEL; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/autodir_options_c/module__ccdensity-1.html:2596,update,updated,2596,psi4manual/4.0b5/autodir_options_c/module__ccdensity-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/module__ccdensity-1.html,2,['update'],['updated']
Deployability,"v double; Default: 1e-3. LAMBDA_MAXITER¶. Maximum number of density cumulant update micro-iterations per macro-iteration (for ALOGRITHM = TWOSTEP). Same keyword controls the maximum number of density cumulant response micro-iterations per macro-iteration for the solution of the response equations (for RESPONSE_ALOGRITHM = TWOSTEP). Type: integer; Default: 50. MAXITER¶. Maximum number of macro-iterations for both energy and the solution of the response equations. Type: integer; Default: 40. RESPONSE_ALGORITHM¶. The algorithm to use for the solution of the response equations for the analytic gradients and properties. Two-step algorithm is generally more efficient than simultaneous and is used by default. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS; Default: TWOSTEP. R_CONVERGENCE¶. Convergence criterion for the RMS of the residual vector in the density cumulant updates as well as the solution of the density cumulant and orbital response equations. In the orbital updates controls the RMS of the SCF error vector. Type: conv double; Default: 1e-10. SCF_MAXITER¶. Maximum number of orbital update micro-iterations per macro-iteration (for ALOGRITHM = TWOSTEP). Same keyword controls the maximum number of orbital response micro-iterations per macro-iteration for the solution of the response equations (for RESPONSE_ALOGRITHM = TWOSTEP). Type: integer; Default: 50. TIKHONOW_OMEGA¶. The shift applied to the denominator in the density cumulant update iterations. Type: double; Default: 0.0. Expert¶. CACHELEVEL¶. Controls how to cache quantities within the DPD library. Type: integer; Default: 2. DCFT_GUESS¶. Whether to read the orbitals from a previous computation, or to compute an MP2 guess. Type: string; Possible Values: CC, BCC, MP2; Default: MP2. IGNORE_TAU¶. Controls whether to ignore terms containing non-idempotent contribution to OPDM or not (for debug puproses only). For practical applications only the default must be used. Type: boolean; Default: false. INTS_TOLERA",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/autodir_options_c/module__dcft-1.html:2712,update,updates,2712,psi4manual/4.0b3/autodir_options_c/module__dcft-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodir_options_c/module__dcft-1.html,2,['update'],['updates']
Deployability,"v202.tar.gz; classic. conda-forge::gcp-correction; bin/mctc-gcp; nyi; preferred; gcp_engine=""mctc-gcp""; https://github.com/grimme-lab/gcp; mctc. Installation¶; Binary. There are two implementations of DFTD3; see Empirical dispersion correction packages . The newer; “s-dftd3” one is preferred, while the older “classic” one will work for the immediate future.; PSI4 will automatically select whichever is available.; Starting with v1.9, only “s-dftd3” is supported, though the “classic” continues to work for many applications.; DFTD3 is available as a conda package for Linux and macOS and Windows.; If using the Psi4conda installer, DFTD3 has already been installed alongside.; If using the PSI4 conda package, the classic dftd3 conda package can; be obtained through conda install dftd3 -c psi4 or the newer implementation; through conda install dftd3-python -c conda-forge.; If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; the dftd3 executable can be obtained through conda install dftd3 -c psi4; or conda install dftd3-python -c conda-forge.; To remove a conda installation, conda remove dftd3 or conda remove dftd3-python. Source. If using PSI4 built from source and you want to build DFTD3 from; from source also,; follow the instructions provided with the source; (essentially, download the freely available tarball, unpack the source,; edit the Makefile to select a; Fortran compiler, and run make). From version 3.1.0 onwards, DFTD3 can; be used as-is; for earlier versions, patches are available:; psi4/psi4/share/psi4/scripts/patch_grimme_dftd3.3.0.2. To be used by PSI4, the classic program binary (dftd3) must be; found in your PATH or the s-dftd3 module in your PYTHONPATH; so QCEngine can detect it. Check if and where found through qcengine info. If; PSI4 is unable to execute the binary, an error will be reported.; To preferentially use a particular dftd3 compilation, simply adjust its; position in the ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/dftd3.html:2128,install,installed,2128,psi4manual/1.9.x/dftd3.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/dftd3.html,6,['install'],"['install', 'installed']"
Deployability,"vachari, G. W. Trucks, and J. A. Pople,; J. Chem. Phys. 94 7221-7230 (1991). [Pople:1987:5968]J. A. Pople, M. Head-Gordon, and K. J. Raghavachari,; Chem. Phys. 87, 5968 (1987). [Crawford:1997:instability]T. D. Crawford, J. F. Stanton, W. D. Allen, and H. F. Schaefer,; J. Chem. Phys., 107, 10626 (1997). [Sherrill:1998:od]C. D. Sherrill, A. I. Krylov, E. F. C. Byrd, and M. Head-Gordon,; J. Chem. Phys. 109, 4171 (1998). [Krylov:2000:vod]A. I. Krylov, C. D. Sherrill, and M. Head-Gordon,; J. Chem. Phys. 113, 6509 (2000). [Kurlancek:2009]W. Kurlancheek and M. Head-Gordon,; Mol. Phys. 107, 1223 (2009). [Pedersen:1999:od]T. B. Pedersen, H. Koch, and C. Hattig,; J. Chem. Phys. 110, 8318 (1999). [Pedersen:2001:od]T. B. Pedersen, B. Fernandez, and H. Koch,; J. Chem. Phys. 114, 6983 (2001). [Bozkaya:2011:omp2]U. Bozkaya, J. M. Turney, Y. Yamaguchi, H. F. Schaefer, and C. D. Sherrill; J. Chem. Phys. 135, 104103 (2011). [Bozkaya:2013:omp2grad]U. Bozkaya and C. D. Sherrill; J. Chem. Phys. 138, 184103 (2013). [Bozkaya:2011:omp3]U. Bozkaya,; J. Chem. Phys. 135, 224103 (2011). [Bozkaya:2013:omp3]E. Soydas and U. Bozkaya,; J. Chem. Theory Comput. 9, 1452 (2013). [Bozkaya:2012:odtl]U. Bozkaya and H. F. Schaefer,; J. Chem. Phys. 136, 204114 (2012). [Grimme:2004:1463]; Grimme, J. Comp. Chem. 25 1463-1473 (2004). [Grimme:2006:1787]; Grimme, J. Comp. Chem. 27, 1787-1799 (2006). [Grimme:2010:154104]S. Grimme, J. Antony, S. Ehrlich, and H. Krieg,; J. Chem. Phys. 132, 154104 (2010). [Grimme:2011:1456]S. Grimme, S. Ehrlich, and L. Goerigk,; J. Comput. Chem. 32, 1456 (2011). [Wu:2002:515]Q. Wu and W. Yang,; J. Chem. Phys. 116, 515 (2002). Previous topic; Appendices; Next topic; Test Suite and Sample Inputs; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/bibliography-1.html:6734,update,updated,6734,psi4manual/4.0b5/bibliography-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/bibliography-1.html,2,['update'],['updated']
Deployability,"vailable memory is insufficient, the use of the AO_BASIS DISK option; is recommended. This will significantly reduce the memory requirements. However, when; used together with the two-step algorithm, this option can significantly; increase the cost of the energy computation.; In cases when the oscillatory convergence is observed before the DIIS; extrapolation is initialized, it is recommended to increase the threshold for; the RMS of the density cumulant or orbital update residual, below which the; DIIS extrapolation starts. This can be done by setting the; DIIS_START_CONVERGENCE option to the value greater than; \(10^{-3}\) by one or two orders of magnitude (e.g. \(10^{-2}\) or; \(10^{-1}\)). This can be particularly useful for computations using the; ODC methods, because it can greatly reduce the number of iterations.; If oscillatory convergence is observed for atoms or molecules with high; symmetry, it is recommended to use the quadratically-convergent algorithm.; When using the quadratically-convergent algorithm for the closed-shell molecules, it; is recommended to set the QC_COUPLING option to FALSE for efficiency; reasons (set by default).; For the ODC computations, the user has a choice of performing the computation of the guess orbitals and cumulants; using the corresponding DC method (set ODC_GUESS to TRUE). This can often lead to; significant computational savings, since the orbital update step in the DC methods is cheap.; Convergence of the guess orbitals and cumulants can be controlled using the; GUESS_R_CONVERGENCE option. table of contents. DCT: Density Cumulant Theory; Theory; Methods; Iterative Algorithms; Analytic Gradients; Methods Summary; Minimal Input; Recommendations. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.6;  · . PSI4. Theoretical Methods: SCF to FCI; DCT: Density Cumulant Theory. © Copyright 2022, The Psi4 Project.; Last updated on Thursday, 19 May 2022 08:57PM.; Created using Sphinx 4.5.0.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/dct.html:15575,update,update,15575,psi4manual/1.6.x/dct.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/dct.html,2,['update'],"['update', 'updated']"
Deployability,"vailable. Installation¶; build psi4 with the plugin option ENABLE_PLUGINS=ON, and then run:; CheMPS2 is available as conda package chemps2 or pychemps2 for Linux and OSX. If using the Psi4 binary, CheMPS2 has already been installed alongside.; If using Psi4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation), CheMPS2; can be obtained through conda install chemps2. Then enable it as a feature and; rebuild Psi4 to detect CheMPS2 and activate dependent code.; If using Psi4 built from source and you want CheMPS2 built from; source also, enable; it as a feature and let the build system fetch and build it and activate; dependent code.; To remove the CheMPS2 that conda installs alongside Psi4,; conda remove chemps2 (or conda remove pychemps2; use conda; list to see which is installed). Methods¶. Density matrix renormalization group capabilities of Psi4 through CheMPS2¶. name; calls method; Energy; Gradient. dmrg-ci; DMRG configuration interaction (CI); RHF/ROHF; —. dmrg-scf; DMRG complete active space SCF (CASSCF); RHF/ROHF; —. dmrg-caspt2; DMRG CAS with 2nd-order perturbation theory (CASPT2); RHF/ROHF; —. DMRG Keywords¶. DMRG_CASPT2_CALC¶. Do calculate the DMRG-CASPT2 energy after the DMRGSCF calculations are done?. Type: boolean; Default: false. DMRG_CASPT2_IMAG¶. CASPT2 Imaginary shift. Type: double; Default: 0.0. DMRG_CASPT2_IPEA¶. CASPT2 IPEA shift. Type: double; Default: 0.0. DMRG_CASPT2_ORBS¶. Whether to calculate the DMRG-CASPT2 energy after the DMRGSCF calculations are done. Type: string; Possible Values: PSEUDOCANONICAL, ACTIVE; Default: PSEUDOCANONICAL. DMRG_DIIS¶. Whether or not to use DIIS for DMRG. Type: boolean; Default: false. DMRG_DIIS_WRITE¶. Whether or not to store the DIIS checkpoint on disk (convenient for restarting). Type: boolean; Default: true. DMRG_EXCITATION¶. Which root is targeted: 0 means ground state, 1 first excited state, etc. Type: integer; Default: 0. DMRG_IRREP¶. The DMRG wavefunct",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/chemps2-1.html:1864,configurat,configuration,1864,psi4manual/1.0.0/chemps2-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/chemps2-1.html,2,['configurat'],['configuration']
Deployability,"value; Use the id value in the shortcode call at the bottom by ghRN. Finalize release¶. Make new PR with; * edits to main README.md badges, python versions, etc.; * edits to CMakeLists.txt find_package(PythonLibsNew 3.6 REQUIRED); Tweet about release. Reset psi4meta for nightly operation¶; On both Linux and Mac:. After (post)release (not prerelease), in conda_build_config.yaml, edit ltrtver to a new “release.dev” label; After postrelease, unpin any dependencies in cbcy that needed older either ver or bld (e.g., v2rdm_casscf_bld); Edit psi4ver back to '' in cbcy; Edit source/git_tag back to master for psi4-multiout, psi4-docs; Edit build string back to 0 if psi4-multiout needed multiple passes; Edit kitandkapoodle.py back to *** stack; Check in all release, construct, recipe changes on Linux and Mac. Synchronize both to GitHub psi4meta; Copy meta.yaml and build.sh files to vMmp-prefixed files for the record.; Edit crontab back to 2am “norm”. Comment out “anom”. table of contents. Release Procedures; Annual; Pre-Release (e.g., v1.3rc1); Release (e.g., v1.3); Post-Release (e.g., v1.3.1); Update copyright year; Update samples; Collect new authors; Anticipate next release; Build Conda ecosystem stack; Assemble postrelease changes; Tweak Conda for postrelease; Do final pass before release tag; Tag (pre)release; Tag postrelease; Initialize release branch; Build Conda Psi4 stack at specific commit; Publish to main conda label; Build Psi4conda set (pre-Spring 2021); Build Psi4conda set; Generate download page for psicode.org; Collect documentation snapshot; Publish GitHub release; Publish GitHub postrelease; Publish psicode release; Finalize release; Reset psi4meta for nightly operation. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Managing: Git, Conda, CMake and all that; Release Procedures. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/manage_release.html:19884,release,release,19884,psi4manual/1.8.x/manage_release.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/manage_release.html,8,"['release', 'update']","['release', 'updated']"
Deployability,"variable to specify BLAS/LAPACK header location explicitly, bypassing math detection. Only needed for MKL.; OpenMP_LIBRARY_DIRS — CMake variable to specify OpenMP library (iomp5/gomp/omp) directories explicitly. Should be “;”-separated list of full directory paths. Usually the solution to error Could NOT find MathOpenMP. Examples. Build with any LAPACK in standard location. >>> cmake. Build with native Accelerate LAPACK on Mac (MKL not also present).; If NumPy not using native Accelerate LAPACK, then directing Psi4; to use it is Bad Idea!. >>> cmake. Build with native Accelerate LAPACK on Mac (MKL also present); If NumPy not using native Accelerate LAPACK, then directing Psi4; to use it is Bad Idea!. >>> cmake -DBLAS_TYPE=SYSTEM_NATIVE -DLAPACK_TYPE=SYSTEM_NATIVE. Build with Intel MKL. >>> source /path/to/intel/vers/linux/mkl/bin/mklvars.sh intel64 # adjust sh/csh and arch as needed; >>> cmake. >>> MATH_ROOT=/path/to/intel/vers/linux/mkl/ cmake. Build with Intel MKL from conda (install mkl-devel package from defaults channel). >>> cmake -DLAPACK_LIBRARIES=""${CONDA_PREFIX}/lib/libmkl_rt.so"" -DLAPACK_INCLUDE_DIRS=""${CONDA_PREFIX}/include"". OpenBLAS - see note below. >>> MATH_ROOT=/path/to/openblas/0.2.13_seq/x86_64/gcc_5.2.0/lib cmake. Build with explicit MKL LAPACK. >>> cmake -DLAPACK_LIBRARIES=""/path/to/lib/intel64/libmkl_lapack95_lp64.a;/path/to/lib/intel64/libmkl_rt.so"" -DLAPACK_INCLUDE_DIRS=""/path/to/mkl-h-include/"". Build with explicit non-MKL LAPACK. >>> cmake -DLAPACK_LIBRARIES=""/path/to/lib/liblapack.so;/path/to/lib/libblas.a"". Build with MKL and GCC (iomp5 needed instead of gomp for threading. use OpenMP_LIBRARY_DIRS to hint location.). >>> cmake -DLAPACK_LIBRARIES=/opt/intel/mkl/lib/intel64/libmkl_rt.so -DLAPACK_INCLUDE_DIRS=/opt/intel/mkl/include -DOpenMP_LIBRARY_DIRS=/opt/intel/compiler/lib/intel64/. Notes. Much of PSI4’s speed and efficiency depends on the corresponding; speed and efficiency of the linked BLAS and LAPACK libraries; (especially the former)",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/build_planning-1.html:39509,install,install,39509,psi4manual/1.3.2/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/build_planning-1.html,2,['install'],['install']
Deployability,"variable,; which permits potential energy scans. As an example, we can scan both the; angle and bond length in water. PSIthonPsiAPImolecule h2o{; O; H 1 R; H 1 R 2 A; }. Rvals = [0.9, 1.0, 1.1]; Avals = range(102, 106, 2). set basis cc-pvdz; set scf e_convergence=11; for R in Rvals:; h2o.R = R; for A in Avals:; h2o.A = A; energy('scf'). h2o = psi4.geometry(""""""; O; H 1 R; H 1 R 2 A; """"""). Rvals = [0.9, 1.0, 1.1]; Avals = range(102, 106, 2). psi4.set_options({""basis"": ""cc-pvdz"",; ""e_convergence"": 11}); for R in Rvals:; h2o.R = R; for A in Avals:; h2o.A = A; psi4.energy('scf'). The declarations of Rvals and Avals are both completely standard Python syntax.; Having named our molecule h2o we can then set the values of R and A within; the loops. Note that we do not need the dollar sign to access the Python; variable in this example; that is required only when using Python variables; with the set keyword.; Cartesian geometries, because of details of the geometry update process,; need to be specified within the loop(s) along with their basis set when; geometry scans are performed. See scf4 for analogous Z-matrix; and Cartiesian scans. Tables of Results¶; The Psithon function psi4.driver.p4util.Table has been removed,; as the Python ecosystem provides many more flexible alternatives. An; example tabulating a potential energy surface scan for water with Pandas; is shown below. PSIthonPsiAPImolecule h2o {; O; H 1 R; H 1 R 2 A; }. Rvals = [0.9, 1.0, 1.1]; Avals = range(100, 103, 2). rows = []; table = []. set basis cc-pvdz. for R in Rvals:; h2o.R = R; for A in Avals:; h2o.A = A; energy('mp2'); escf = variable('SCF TOTAL ENERGY'); edfmp2 = variable('MP2 TOTAL ENERGY'); escsmp2 = variable('SCS-MP2 TOTAL ENERGY'); rows.append((R, A)); table.append([escf, escsmp2, edfmp2]). import pandas as pd; df = pd.DataFrame(table, columns = [""E(SCF)"", ""E(SCS)"", ""E(DFMP2)""], index=rows); print(df). # E(SCF) E(SCS) E(DFMP2); # (0.9, 100) -76.020680 -76.217006 -76.221189; # (0.9, 102) -76.021305 ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/psithoninput.html:13836,update,update,13836,psi4manual/master/psithoninput.html,https://psicode.org,https://psicode.org/psi4manual/master/psithoninput.html,1,['update'],['update']
Deployability,"variables only).""). core.Wavefunction.get_variable = _core_wavefunction_get_variable; core.Wavefunction.get_array = _core_wavefunction_get_array; core.Wavefunction.set_array = _core_wavefunction_set_array; core.Wavefunction.arrays = _core_wavefunction_arrays. def _core_wavefunction_frequencies(self):; """"""Returns the results of a frequency analysis. Parameters; ----------; self; Wavefunction instance. Returns; -------; ~typing.Optional[~typing.Dict[str, ~numpy.ndarray]]; A dictionary of vibrational information. See :py:func:`psi4.driver.qcdb.vib.harmonic_analysis`. """"""; if not hasattr(self, 'frequency_analysis'):; return None. vibinfo = self.frequency_analysis; vibonly = qcdb.vib.filter_nonvib(vibinfo); return core.Vector.from_array(qcdb.vib.filter_omega_to_real(vibonly['omega'].data)). core.Wavefunction.frequencies = _core_wavefunction_frequencies. def _core_doublet(A, B, transA, transB):; """"""Multiply two matrices together. .. deprecated:: 1.4; Use :py:func:`psi4.core.doublet` instead. """"""; warnings.warn(; ""Using `psi4.core.Matrix.doublet` instead of `psi4.core.doublet` is deprecated, and as soon as 1.4 it will stop working\n"",; category=FutureWarning,; stacklevel=2); return core.doublet(A, B, transA, transB). def _core_triplet(A, B, C, transA, transB, transC):; """"""Multiply three matrices together. .. deprecated:: 1.4; Use :py:func:`psi4.core.triplet` instead. """"""; warnings.warn(; ""Using `psi4.core.Matrix.triplet` instead of `psi4.core.triplet` is deprecated, and as soon as 1.4 it will stop working\n"",; category=FutureWarning,; stacklevel=2); return core.triplet(A, B, C, transA, transB, transC). core.Matrix.doublet = staticmethod(_core_doublet); core.Matrix.triplet = staticmethod(_core_triplet). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .  · ; 1.10a1.dev61;  · . PSI4. Module code; psi4.driver.p4util.python_helpers. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/_modules/psi4/driver/p4util/python_helpers.html:50290,update,updated,50290,psi4manual/master/_modules/psi4/driver/p4util/python_helpers.html,https://psicode.org,https://psicode.org/psi4manual/master/_modules/psi4/driver/p4util/python_helpers.html,1,['update'],['updated']
Deployability,"variables. auto works like template type; deduction, hence the right-hand side of the declaration needs to have an; initializer:. int x1; // fine, but uninitialized :(; auto x2; // WON'T COMPILE!!!; auto x3 = 1; // fine and initialized. Problems with unintended type casts and type mismatches that are hard; to impossible to catch:. std::vector<int> v;; // !!! The size of a vector is of type std::vector<int>::size_type and is compiler- AND architecture-DEPENDENT; unsigned sz = v.size(); // might not be correct on some compiler/machines; auto size = v.size(); // size is ALWAYS of the correct type. Reference: Items 2 and 5 in [Effective Modern C++]. Mark virtual functions in derived classes with override¶; The override keyword introduced in C++11 is used to mark a function in a; derived class and guarantee that it is overloading a function with the same; signature in the base class. This behavior is checked at compile time. Prefer GiB for memory printing¶; As memory sizes get larger, we should work in giga (requires decimal printing to not round to zero) rather than mega units.; As it’s what we’re computing anyways, we should work in 1024-based (mebi, gibi, etc. https://en.wikipedia.org/wiki/Gibibyte) rather than 1000-based units.; As it’s a unit, put it in brackets.; Note that users can supply MiB, GB, bytes, or whatever; this guideline is for output printing.; outfile->Printf("" DFHelper Memory: AOs need %.3f [GiB]; user supplied %.3f [GiB]. "",; (required * 8 / (1024 * 1024 * 1024.0)),. table of contents. C++ Style; Prefer nullptr to 0 or NULL; Prefer std::make_shared to direct use of new; Prefer auto to explicit type declarations; Mark virtual functions in derived classes with override; Prefer GiB for memory printing. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.6;  · . PSI4. Adding New Code to PSI4; C++ Style. © Copyright 2022, The Psi4 Project.; Last updated on Thursday, 19 May 2022 08:57PM.; Created using Sphinx 4.5.0.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/prog_style_c.html:3644,update,updated,3644,psi4manual/1.6.x/prog_style_c.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/prog_style_c.html,1,['update'],['updated']
Deployability,"vdz Energy. omp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cepa0-grad1; CEPA0 cc-pVDZ gradient for the H2O molecule. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. gibbs; Test Gibbs free energies at 298 K of N2, H2O, and CH4. omp3-grad2; OMP3 cc-pVDZ gradient for the NO radical. dft-pbe0-2; Internal match to psi4, test to match to literature values in litref.in/litref.out. zaptn-nh2; ZAPT(n)/6-31G NH2 Energy Point, with n=2-25. cc5; RHF CCSD(T) aug-cc-pvtz frozen-core energy of C4NH4 Anion. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. props2; DF-SCF cc-pVDZ of benzene-hydronium ion, scanning the dissociation coordinate with Python’s built-in loop mechanism. The geometry is specified by a Z-matrix with dummy atoms, fixed parameters, updated parameters, and separate charge/multiplicity specifiers for each monomer. One-electron properties computed for dimer and one monomer. mints5; Tests to determine full point group symmetry. Currently, these only matter for the rotational symmetry number in thermodynamic computations. omp3-1; OMP3 cc-pVDZ energy for the H2O molecule. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. dcft1; DC-06 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. Previous topic; Test Suite and Sample Inputs; Next topic; Basis Sets by Element; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; Test Suite and Sample Inputs ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 07, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/autodoc_testsuite-1.html:23232,update,update,23232,psi4manual/4.0b4/autodoc_testsuite-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_testsuite-1.html,4,['update'],"['update', 'updated']"
Deployability,"ve equation explicitly,; the large D manifold is treated effectively as. \[[\mathbf{A_{SS}^{(2)}}+; \mathbf{A_{SD}^{(1)}}^{\dagger}(\omega-; \mathbf{A_{DD}^{(0)}})^{-1}\mathbf{A_{DS}^{(1)}}]\mathbf{X_{S}}=; \omega\mathbf{X_{S}}.\]; This form of the ADC(2) equation requires 7–10 iterations for; convergence on only one root. But thanks to Newton-Raphson; acceleration,. \[\omega^{n+1}=\omega^{n}-; \frac{\omega^n-\mathbf{X_{S}}(\omega^n)^{\dagger}; [\mathbf{A_{SS}^{(2)}}+; \mathbf{A_{SD}^{(1)}}^{\dagger}(\omega^n-\mathbf{A_{DD}^{(0)}})^{-1}; \mathbf{A_{DS}^{(1)}}]\mathbf{X_{S}}(\omega^n)}{1+\mathbf{X_{S}}; (\omega^n)^{\dagger}[\mathbf{A_{SD}^{(1)}}^{\dagger}; (\omega^n-\mathbf{A_{DD}^{(0)}})^{-2}\mathbf{A_{DS}^{(1)}}]\mathbf{X_{S}}; (\omega^n)}\]; the computational time reduces to shorter than half of the simple iterative; procedure. Construction of the denominator of the second term in the above; equation is less computationally expensive than construction of one \(\sigma\)-vector with respect to the effective response matrix. The non-iterative excitation energy stated above is calculated as a diagonal element of the Davidson mini-Hamiltonian matrix in the SEM as,. \[\omega^{Non-Iterative}=; \mathbf{X_{CIS}}^{\dagger}[\mathbf{A_{SS}^{(2)}}+; \mathbf{A_{SD}^{(1)}}^{\dagger}(\omega^{CIS}-\mathbf{A_{DD}^{(0)}})^{-1}; \mathbf{A_{DS}^{(1)}}]\mathbf{X_{CIS}}\]; where \(\omega^{CIS}\) and \(\mathbf{X_{CIS}}\) denote the CIS; excitation energy and wave function, respectively. The explicit form of the; σ-vector is provided in a note accompanying the source code,; in the file psi4/psi4/src/psi4/adc/sigma.pdf. table of contents. ADC: Ab Initio Polarization Propagator; Partial Renormalization Scheme; Using the ADC(2) code; Theory. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Theoretical Methods: SCF to FCI. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/adc-1.html:7757,update,updated,7757,psi4manual/1.3.2/adc-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/adc-1.html,2,['update'],['updated']
Deployability,"ve quantities and whether the criterion; is active and fulfilled (*), active and unfulfilled ( ), or inactive (o).; --------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------- ~; Convergence Criteria 1.00e-06 * 3.00e-04 * o 1.20e-03 * o ~; --------------------------------------------------------------------------------------------- ~; 1 -38.91591820 -3.89e+01 6.91e-02 5.72e-02 o 1.42e-01 1.19e-01 o ~; 2 -38.92529543 -9.38e-03 6.21e-03 3.91e-03 o 2.00e-02 1.18e-02 o ~; 3 -38.92540669 -1.11e-04 4.04e-03 2.46e-03 o 3.63e-02 2.12e-02 o ~; 4 -38.92548668 -8.00e-05 2.30e-04 * 1.92e-04 o 1.99e-03 1.17e-03 o ~; 5 -38.92548698 -2.98e-07 * 3.95e-05 * 3.35e-05 o 1.37e-04 * 1.05e-04 o ~. The full list of keywords for optking is provided in Appendix OPTKING.; Information on the Psithon function that drives geometry optimizations is provided; at optimize(). Important User Changes from cpp-optking¶. FIXED_COORD keywords have been generalized to RANGED_COORD e.g. RANGED_DISTANCE; Detailed optimization is now printed through the python logging system. If more information about; the optimization is needed. Please see <output_name>.log. table of contents. Geometry Optimization; Basic Keywords; OPT_TYPE; STEP_TYPE; GEOM_MAXITER; G_CONVERGENCE; FULL_HESS_EVERY. Optimizing Minima; Hessian; Transition States and Reaction Paths; Constrained Optimizations; Multi-Fragment Optimizations; Dealing with problematic optimizations; Convergence Criteria; Interface to GeomeTRIC; Output; Important User Changes from cpp-optking. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Theoretical Methods: SCF to FCI; Geometry Optimization. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/optking.html:25774,update,updated,25774,psi4manual/1.7.x/optking.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/optking.html,1,['update'],['updated']
Deployability,"ve/2005/04/24/interactive_html.html. valerr(data, color=None, title='', xtitle='', view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶. Module to largely replicate in python the psi4 libmints; CoordValue and CoordEntry classes, which were developed by; Justin M. Turney, with incremental improvements by other; psi4 developers. class CartesianEntry(entry_number, Z, charge, mass, symbol, label, x, y, z, basis=None, shells=None)[source]¶; Class to hold all information about an atom, including its; coordinate specification as three Cartesians. clone()[source]¶; Returns new, independent CartesianEntry object. compute()[source]¶; Computes the values of the coordinates (in whichever units; were inputted), returning them in a Vector. everything()[source]¶. invalidate()[source]¶; Flags the current coordinates as being outdated. print_in_input_format()[source]¶; Prints the updated geometry, in the format provided by the user. print_in_input_format_cfour()[source]¶; Prints the updated geometry, in the format provided by the user.; This, for Cfour, not different from regular version. set_coordinates(x, y, z)[source]¶; Given the current set of coordinates, updates the values of this; atom’s coordinates and any variables that may depend on it. type()[source]¶; The type of CoordEntry specialization. class CoordEntry(entry_number, Z, charge, mass, symbol, label='', basis=None, shells=None)[source]¶; Class to store all the attributes associated with an atom, not the; larger Molecule. Specialized into CartesianEntry and ZMatrixEntry. Z()[source]¶; The nuclear charge of the current atom (0 if ghosted). static a(a1, a2, a3)[source]¶; Computes the angle (in rad.) between three sets of coordinates. basisset(role='BASIS')[source]¶; Returns the basis name for the provided type.; * @param type Keyword from input file.; * @returns the value from input. basissets()[source]¶; Returns basisset to atom map. charge()[source]¶; The “atomic charge” of the current atom (for SAD pur",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:113822,update,updated,113822,psi4manual/1.0.0/autodoc_driver-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html,2,['update'],['updated']
Deployability,"vec.close_io_files(True). def prepare_sapt_molecule(sapt_dimer, sapt_basis):; """"""; Prepares a dimer molecule for a SAPT computations. Returns the dimer, monomerA, and monomerB.; """""". # Shifting to C1 so we need to copy the active molecule; sapt_dimer = sapt_dimer.clone(); if sapt_dimer.schoenflies_symbol() != 'c1':; core.print_out(' SAPT does not make use of molecular symmetry, further calculations in C1 point group.\n'); sapt_dimer.reset_point_group('c1'); sapt_dimer.fix_orientation(True); sapt_dimer.fix_com(True); sapt_dimer.update_geometry(); else:; sapt_dimer.update_geometry() # make sure since mol from wfn, kwarg, or P::e; sapt_dimer.fix_orientation(True); sapt_dimer.fix_com(True). nfrag = sapt_dimer.nfragments(). if nfrag == 3:; # Midbond case; if sapt_basis == 'monomer':; raise ValidationError(""SAPT basis cannot both be monomer centered and have midbond functions.""). midbond = sapt_dimer.extract_subsets(3); ztotal = 0; for n in range(midbond.natom()):; ztotal += midbond.Z(n). if ztotal > 0:; raise ValidationError(""SAPT third monomr must be a midbond function (all ghosts).""). ghosts = ([2, 3], [1, 3]); elif nfrag == 2:; # Classical dimer case; ghosts = (2, 1); else:; raise ValidationError('SAPT requires active molecule to have 2 fragments, not %s.' % (nfrag)). if sapt_basis == 'dimer':; monomerA = sapt_dimer.extract_subsets(1, ghosts[0]); monomerA.set_name('monomerA'); monomerB = sapt_dimer.extract_subsets(2, ghosts[1]); monomerB.set_name('monomerB'); elif sapt_basis == 'monomer':; monomerA = sapt_dimer.extract_subsets(1); monomerA.set_name('monomerA'); monomerB = sapt_dimer.extract_subsets(2); monomerB.set_name('monomerB'); else:; raise ValidationError(""SAPT basis %s not recognized"" % sapt_basis). return (sapt_dimer, monomerA, monomerB). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .  · ; 1.2.1;  · . PSI4. Module code. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 July 2018 04:21AM.; Created using Sphinx 1.7.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/_modules/psi4/driver/procrouting/proc_util.html:8467,update,updated,8467,psi4manual/1.2.1/_modules/psi4/driver/procrouting/proc_util.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/_modules/psi4/driver/procrouting/proc_util.html,1,['update'],['updated']
Deployability,"ved. [docs]def flat(data, color=None, title='', xlimit=4.0, xlines=[0.0, 0.3, 1.0], mae=None, mape=None, view=True,; saveas=None, relpath=False, graphicsformat=['pdf']):; """"""Generates a slat diagram between model chemistries with errors in; single-item list *data*, which is supplied as part of the dictionary; for each participating reaction, along with *dbse* and *rxn* keys in; argument *data*. Limits of plot are *xlimit* from the zero-line. If; *color* is None, slats are black, if 'sapt', colors are taken from; sapt_colors module. Summary statistic *mae* is plotted on the; overbound side and relative statistic *mape* on the underbound side.; Saves a file with name *title* and plots to screen if *view*. """"""; import matplotlib.pyplot as plt. Nweft = 1; positions = range(-1, -1 * Nweft - 1, -1). # initialize plot; fig, ax = plt.subplots(figsize=(12, 0.33)); plt.xlim([-xlimit, xlimit]); plt.ylim([-1 * Nweft - 1, 0]); plt.yticks([]); plt.xticks([]); # fig.patch.set_visible(False); # ax.patch.set_visible(False); ax.axis('off'). for xl in xlines:; plt.axvline(xl, color='grey', linewidth=4); if xl != 0.0:; plt.axvline(-1 * xl, color='grey', linewidth=4). # plot reaction errors and threads; for rxn in data:; xvals = rxn['data']; clr = segment_color(color, rxn['color'] if 'color' in rxn else None). ax.plot(xvals, positions, '|', color=clr, markersize=13.0, mew=4). # plot trimmings; if mae is not None:; plt.axvline(-1 * mae, color='black', linewidth=12); if mape is not None: # equivalent to MAE for a 10 kcal/mol interaction energy; ax.plot(0.025 * mape, positions, 'o', color='black', markersize=15.0). # save and show; pltuid = title # simple (not really unique) filename for LaTeX integration; pltfile = expand_saveas(saveas, pltuid, def_prefix='flat_', relpath=relpath); files_saved = {}; for ext in graphicsformat:; savefile = pltfile + '.' + ext.lower(); plt.savefig(savefile, transparent=True, format=ext, bbox_inches='tight',; frameon=False, pad_inches=0.0); files_saved[ext.lo",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/mpl.html:5192,patch,patch,5192,psi4manual/1.0.0/_modules/qcdb/mpl.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/mpl.html,1,['patch'],['patch']
Deployability,"vefunction; docstring. same_a_b_dens(self: psi4.core.Wavefunction) → bool; Returns true if the alpha and beta densities are the same. same_a_b_orbs(self: psi4.core.Wavefunction) → bool; Returns true if the alpha and beta orbitals are the same. set_array(self: psi4.core.Wavefunction, arg0: str, arg1: psi4.core.Matrix) → None; Returns the requested internal array. set_basisset(self: psi4.core.Wavefunction, arg0: str, arg1: psi4.core.BasisSet) → None; Sets the requested auxiliary basis. set_frequencies(self: psi4.core.Wavefunction, arg0: psi4.core.Vector) → None; Sets the frequencies of the Hessian. set_gradient(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None; Sets the Wavefunctions gradient. set_hessian(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None; Sets the Wavefunctions Hessian. set_name(self: psi4.core.Wavefunction, arg0: str) → None; Sets the level of theory this wavefunction corresponds to. set_oeprop(self: psi4.core.Wavefunction, arg0: psi4.core.OEProp) → None; Associate an OEProp object with this wavefunction. set_print(self: psi4.core.Wavefunction, arg0: int) → None; Sets the print level of the Wavefunction. set_reference_wavefunction(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None; docstring. set_variable(self: psi4.core.Wavefunction, arg0: str, arg1: float) → None; Sets the requested internal variable. shallow_copy(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None; Copies the pointers to the internal data. sobasisset(self: psi4.core.Wavefunction) → psi4.core.SOBasisSet; Returns the symmetry orbitals basis. soccpi(self: psi4.core.Wavefunction) → psi4.core.Dimension; Returns the number of singly occupied orbitals per irrep. variables(self: psi4.core.Wavefunction) → Dict[str, float]; Returns the map of all internal variables. Navigation. Index. modules    .    .  · ; 1.1;  · . PSI4. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/api/psi4.core.wavefunction.html:19624,update,updated,19624,psi4manual/1.1.0/api/psi4.core.wavefunction.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/api/psi4.core.wavefunction.html,1,['update'],['updated']
Deployability,"vel computation of water trimer energy (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. dft-ghost; DFT Functional Test for Range-Seperated Hybrids and Ghost atoms. dft-b2plyp; Double-hybrid density functional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc44; Test case for some of the PSI4 out-of-core codes. The code is given only 2.0 MB of memory, which is insufficient to hold either the A1 or B2 blocks of an ovvv quantity in-core, but is sufficient to hold at least two copies of an oovv quantity in-core. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. dft1-alt; DFT Functional Test. dfccdl1; DF-CCDL cc-pVDZ energy for the H2O molecule. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. dcft3; DC-06 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the AO Basis, using integrals stored on disk. mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. dcft-grad3; Restricted DF-DCFT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. cepa0-grad1; CEPA0 cc-pVDZ gradient for the H2O molecule. mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. cc13d; Tests analytic CC2 gradients. scf5; Test of all different algorithms and reference types for SCF, on singlet and tri",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/autodoc_testsuite_corepsi4-1.html:5199,install,install,5199,psi4manual/1.3.2/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/autodoc_testsuite_corepsi4-1.html,4,['install'],['install']
Deployability,vel of theory and root. CI ROOT n -> ROOT m DIPOLE X¶. CI ROOT n -> ROOT m DIPOLE Y¶. CI ROOT n -> ROOT m DIPOLE Z¶; The three components of the transition dipole [Debye] between roots n; and m for the requested configuration interaction level of theory. CI ROOT n -> ROOT m QUADRUPOLE XX¶. CI ROOT n -> ROOT m QUADRUPOLE XY¶. CI ROOT n -> ROOT m QUADRUPOLE XZ¶. CI ROOT n -> ROOT m QUADRUPOLE YY¶. CI ROOT n -> ROOT m QUADRUPOLE YZ¶. CI ROOT n -> ROOT m QUADRUPOLE ZZ¶; The three components of the transition quadrupole [Debye Ang] between; roots n and m for the requested configuration interaction level of; theory. CI ROOT n DIPOLE X¶. CI ROOT n DIPOLE Y¶. CI ROOT n DIPOLE Z¶; The three components of the dipole [Debye] for the requested; configuration interaction level of theory and root n. CI ROOT n QUADRUPOLE XX¶. CI ROOT n QUADRUPOLE XY¶. CI ROOT n QUADRUPOLE XZ¶. CI ROOT n QUADRUPOLE YY¶. CI ROOT n QUADRUPOLE YZ¶. CI ROOT n QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the requested; configuration interaction level of theory and root n. CI ROOT n TOTAL ENERGY¶. CI ROOT n CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested configuration interaction level of theory and root; n (numbering starts at 0). CI STATE-AVERAGED TOTAL ENERGY¶. CI STATE-AVERAGED CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for state-averaged CI/CASSCF levels of theory. CI TOTAL ENERGY¶. CI CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested configuration interaction level of theory and root. CISD DIPOLE X¶. CISD DIPOLE Y¶. CISD DIPOLE Z¶; The three components of the dipole [Debye] for the; configuration interaction singles and doubles level of theory and root. CISD QUADRUPOLE XX¶. CISD QUADRUPOLE XY¶. CISD QUADRUPOLE XZ¶. CISD QUADRUPOLE YY¶. CISD QUADRUPOLE YZ¶. CISD QUADRUPOLE ZZ¶; The six components of the quadrup,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/glossary_psivariables-1.html:7995,configurat,configuration,7995,psi4manual/1.1.0/glossary_psivariables-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/glossary_psivariables-1.html,6,['configurat'],['configuration']
Deployability,vel of theory and root. CI ROOT n -> ROOT m DIPOLE X¶. CI ROOT n -> ROOT m DIPOLE Y¶. CI ROOT n -> ROOT m DIPOLE Z¶; The three components of the transition dipole [Debye] between roots n; and m for the requested configuration interaction level of theory. CI ROOT n -> ROOT m QUADRUPOLE XX¶. CI ROOT n -> ROOT m QUADRUPOLE XY¶. CI ROOT n -> ROOT m QUADRUPOLE XZ¶. CI ROOT n -> ROOT m QUADRUPOLE YY¶. CI ROOT n -> ROOT m QUADRUPOLE YZ¶. CI ROOT n -> ROOT m QUADRUPOLE ZZ¶; The three components of the transition quadrupole [Debye Ang] between; roots n and m for the requested configuration interaction level of; theory. CI ROOT n DIPOLE X¶. CI ROOT n DIPOLE Y¶. CI ROOT n DIPOLE Z¶; The three components of the dipole [Debye] for the requested; configuration interaction level of theory and root n. CI ROOT n QUADRUPOLE XX¶. CI ROOT n QUADRUPOLE XY¶. CI ROOT n QUADRUPOLE XZ¶. CI ROOT n QUADRUPOLE YY¶. CI ROOT n QUADRUPOLE YZ¶. CI ROOT n QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the requested; configuration interaction level of theory and root n. CI ROOT n TOTAL ENERGY¶. CI ROOT n CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested configuration interaction level of theory and root; n (numbering starts at 1). CI STATE-AVERAGED TOTAL ENERGY¶. CI STATE-AVERAGED CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for state-averaged CI/CASSCF levels of theory. CI TOTAL ENERGY¶. CI CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested configuration interaction level of theory and root. CISD DIPOLE X¶. CISD DIPOLE Y¶. CISD DIPOLE Z¶; The three components of the dipole [Debye] for the; configuration interaction singles and doubles level of theory and root. CISD QUADRUPOLE XX¶. CISD QUADRUPOLE XY¶. CISD QUADRUPOLE XZ¶. CISD QUADRUPOLE YY¶. CISD QUADRUPOLE YZ¶. CISD QUADRUPOLE ZZ¶; The six components of the quadrup,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/glossary_psivariables-1.html:7487,configurat,configuration,7487,psi4manual/1.0.0/glossary_psivariables-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/glossary_psivariables-1.html,8,['configurat'],['configuration']
Deployability,vel of theory and root. CI ROOT n -> ROOT m DIPOLE X¶. CI ROOT n -> ROOT m DIPOLE Y¶. CI ROOT n -> ROOT m DIPOLE Z¶; The three components of the transition dipole [Debye] between roots n; and m for the requested configuration interaction level of theory. CI ROOT n -> ROOT m QUADRUPOLE XX¶. CI ROOT n -> ROOT m QUADRUPOLE XY¶. CI ROOT n -> ROOT m QUADRUPOLE XZ¶. CI ROOT n -> ROOT m QUADRUPOLE YY¶. CI ROOT n -> ROOT m QUADRUPOLE YZ¶. CI ROOT n -> ROOT m QUADRUPOLE ZZ¶; The three components of the transition quadrupole [Debye Ang] between; roots n and m for the requested configuration interaction level of; theory. CI ROOT n DIPOLE X¶. CI ROOT n DIPOLE Y¶. CI ROOT n DIPOLE Z¶; The three components of the dipole [Debye] for the requested; configuration interaction level of theory and root n. CI ROOT n QUADRUPOLE XX¶. CI ROOT n QUADRUPOLE XY¶. CI ROOT n QUADRUPOLE XZ¶. CI ROOT n QUADRUPOLE YY¶. CI ROOT n QUADRUPOLE YZ¶. CI ROOT n QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the requested; configuration interaction level of theory and root n. CI ROOT n TOTAL ENERGY¶. CI ROOT n CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested configuration interaction level of theory and root; n (numbering starts at 1). CI STATE-AVERAGED TOTAL ENERGY¶. CI STATE-AVERAGED CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for state-averaged CI/CASSCF levels of theory. CI TOTAL ENERGY¶. CI CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested configuration interaction level of theory and root. CISD TOTAL ENERGY¶. CISD CORRELATION ENERGY¶. CISDT TOTAL ENERGY¶. CISDT CORRELATION ENERGY¶. CISDTQ CORRELATION ENERGY¶. CISDTQ TOTAL ENERGY¶. CIn CORRELATION ENERGY¶. CIn TOTAL ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the labeled configuration interaction level of theory and root.; n is,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/glossary_psivariables-1.html:3094,configurat,configuration,3094,psi4manual/4.0b2/glossary_psivariables-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/glossary_psivariables-1.html,2,['configurat'],['configuration']
Deployability,"vel-psi4-dir}; Find-the-code Quiz; Binary Installer; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; How to update and rebuild Psi4. Configuring and Installing PSI4 via Binary¶. How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; How to get high angular momentum integrals from conda. Configuring, Building, and Installing PSI4 via Source¶. Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; How to see what build configuration options are available; How to choose the compilation directory, {objdir}; How to install elsewhere than /usr/local/psi4; How to use conda to get a Psi4 development environment; How to configure code to use high angular momentum basis sets; How to see the actual compiling commands (or errors) with cmake; How to save configuration settings for a future compilation; How to configure a Psi4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “runtime library may be hidden” when building with Anaconda Python; How to configure BLAS/LAPACK for building Psi4; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/build_faq-1.html:1030,install,install,1030,psi4manual/1.4.0/build_faq-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/build_faq-1.html,45,"['configurat', 'install']","['configuration', 'install']"
Deployability,"velopment. Sometimes, you’re the one; doing that development, and you need the CMake superbuild to pull source; from a local path rather than the approved codeset.; Find the CMakeLists.txt governing the target Add-On in; psi4/external and make changes analogous to the below:; 1; 2; 3; 4#GIT_REPOSITORY https://github.com/jturney/ambit; #GIT_TAG 1.0; DOWNLOAD_COMMAND """"; SOURCE_DIR ""/path/to/ambit-directclone"". If you’re changing the PSI4 repo codebase between compiles, there’s; nothing more to do as CMake will handle the code rebuild deps for you.; If you’re changing the local Add-On repo codebase between compiles,; CMake does not know when libaddon.[a|so|dylib] needs rebuilding. It; is recommended that the PSI4 build be initially configured with; -DBUILD_SHARED_LIBS=ON (easier to notice changes). And to trigger; Add-On library rebuild, rm -rf {objdir}/external/upstream/addon/; and rm -rf {objdir}/stage/share/cmake/AddOn. This should; re-clone the Add-On, rebuild and install it, rebuild any parts of; PSI4 that interface to it, and relink the main core.so.; If you’re modifying the Add-On’s file or directory structure, be; smart and rm all traces of it within {objdir}/stage/,; especially any *.pyc files.; Alternatively to the above, you can instead build and install the; Add-On library yourself, external to the PSI4 repository. This; is especially useful if you want to avoid full recompiles of the; Add-On at each change to the Add-On’s source. Build the Add-On; library dynamically (-DBUILD_SHARED_LIBS=ON) and mind any; “Psi4 wants” in the Add-On’s top-level CMakeLists.txt. Install the; Add-On and note the full path to AddOnConfig.cmake. Pass; the path containing that file to PSI4’s CMake as; -DAddon_DIR=/path/to/config/usually/ending/in/share/cmake/AddON; and build PSI4. The main core.so should be dynamically linked; to your dev AddOn dynamic lib and update automatically when you rebuild; the AddOn lib. Naturally, you may need to delete core.so and remake; as needed. ta",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/build_planning-1.html:53871,install,install,53871,psi4manual/1.3.2/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/build_planning-1.html,2,['install'],['install']
Deployability,"ver function; energy() and so can be accessed through; energy('myplugin') in an input file. Any other Python functions can; also be placed in this file.; __init__.py — Init script for the plugin (in the sense that; the whole plugin directory is a Python module). This file generally won’t; need editing unless additional Python files are added to the plugin; directory (add additional lines to the # Load Python modules section); or the plugin depends on .so codes in other plugin directories (add; additional plugin_load lines relative to the current plugin directory to; the # Load C++ plugin section). doc.rst — Documentation file. Place in this file any notes,; equations, warnings to users, todo lists, etc.. Plain text is fine,; though reStructuredText is the ultimate goal. Remove the .. comment; text and build Sphinx documentation for samples of linking keywords,; sections, and math. This file is absorbed into the PSI4; documentation, along with any docstrings to Python functions, and the C++; keywords block in the myplugin.cc file. See Updating the Users’ and Programmers’ Manual; for building documentation. Please note that pure virtual functions in a plugin may cause undefined symbols errors when; the plugin is loaded.; To create a purely Python plugin, create a new plugin directory, then; remove the Makefile and myplugin.cc files and; erase the shared object loading portion of __init__.py. Create as many .py; files as necessary (registering each one in __init__.py), use; input.dat as a model for loading the plugin, no recompile ever; necessary. table of contents. Creating New Plugins; Modular Approach to Development; Creating a New Plugin; Creating a New Plugin Using a Conda Pre-compiled Binary; Files in a Plugin Directory. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Adding New Code to PSI4. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/plugins-1.html:8858,update,updated,8858,psi4manual/1.3.2/plugins-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/plugins-1.html,2,['update'],['updated']
Deployability,"vergence. To avoid this revokation, turn on keyword FLEXIBLE_G_CONVERGENCE. Output¶; The progress of a geometry optimization can be monitored by grepping the output file for the; tilde character (~). This produces a table like the one below that shows; for each iteration the value for each of the five quantities and whether the criterion; is active and fulfilled (*), active and unfulfilled ( ), or inactive (o).; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10--------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------- ~; Convergence Criteria 1.00e-06 * 3.00e-04 * o 1.20e-03 * o ~; --------------------------------------------------------------------------------------------- ~; 1 -38.91591820 -3.89e+01 6.91e-02 5.72e-02 o 1.42e-01 1.19e-01 o ~; 2 -38.92529543 -9.38e-03 6.21e-03 3.91e-03 o 2.00e-02 1.18e-02 o ~; 3 -38.92540669 -1.11e-04 4.04e-03 2.46e-03 o 3.63e-02 2.12e-02 o ~; 4 -38.92548668 -8.00e-05 2.30e-04 * 1.92e-04 o 1.99e-03 1.17e-03 o ~; 5 -38.92548698 -2.98e-07 * 3.95e-05 * 3.35e-05 o 1.37e-04 * 1.05e-04 o ~. The full list of keywords for optking is provided in Appendix OPTKING.; Information on the Psithon function that drives geometry optimizations is provided; at optimize(). table of contents. Geometry Optimization; Basic Keywords; OPT_TYPE; STEP_TYPE; GEOM_MAXITER; G_CONVERGENCE; FULL_HESS_EVERY; INTCOS_GENERATE_EXIT. Optimizing Minima; Hessian; Transition States, Reaction Paths, and Constrained Optimizations; Dealing with problematic optimizations; Direct manipulation of the optmization coordinates; Convergence Criteria; Output. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Theoretical Methods: SCF to FCI. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/optking-1.html:16145,update,updated,16145,psi4manual/1.3.2/optking-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/optking-1.html,2,['update'],['updated']
Deployability,"verloaded function. get_tensor(self: psi4.core.DFHelper, arg0: str) -> psi4.core.Matrix; get_tensor(self: psi4.core.DFHelper, arg0: str, arg1: List[int], arg2: List[int], arg3: List[int]) -> psi4.core.Matrix. get_tensor_shape(self: psi4.core.DFHelper, arg0: str) → Tuple[int, int, int]¶. get_tensor_size(self: psi4.core.DFHelper, arg0: str) → int¶. hold_met(self: psi4.core.DFHelper, arg0: bool) → None¶. initialize(self: psi4.core.DFHelper) → None¶. print_header(self: psi4.core.DFHelper) → None¶. set_AO_core(self: psi4.core.DFHelper, arg0: bool) → None¶. set_MO_core(self: psi4.core.DFHelper, arg0: bool) → None¶. set_memory(self: psi4.core.DFHelper, arg0: int) → None¶. set_method(self: psi4.core.DFHelper, arg0: str) → None¶. set_nthreads(self: psi4.core.DFHelper, arg0: int) → None¶. set_schwarz_cutoff(self: psi4.core.DFHelper, arg0: float) → None¶. set_subalgo(self: psi4.core.DFHelper, arg0: str) → None¶. transform(self: psi4.core.DFHelper) → None¶. transpose(self: psi4.core.DFHelper, arg0: str, arg1: Tuple[int, int, int]) → None¶. table of contents. DFHelper; DFHelper; DFHelper.add_space(); DFHelper.add_transformation(); DFHelper.clear_all(); DFHelper.clear_spaces(); DFHelper.get_AO_core(); DFHelper.get_AO_size(); DFHelper.get_MO_core(); DFHelper.get_memory(); DFHelper.get_method(); DFHelper.get_schwarz_cutoff(); DFHelper.get_space_size(); DFHelper.get_tensor(); DFHelper.get_tensor_shape(); DFHelper.get_tensor_size(); DFHelper.hold_met(); DFHelper.initialize(); DFHelper.print_header(); DFHelper.set_AO_core(); DFHelper.set_MO_core(); DFHelper.set_memory(); DFHelper.set_method(); DFHelper.set_nthreads(); DFHelper.set_schwarz_cutoff(); DFHelper.set_subalgo(); DFHelper.transform(); DFHelper.transpose(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; DFHelper. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/api/psi4.core.DFHelper.html:3477,update,updated,3477,psi4manual/1.8.x/api/psi4.core.DFHelper.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.DFHelper.html,1,['update'],['updated']
Deployability,"verloaded function. get_tensor(self: psi4.core.DFHelper, arg0: str) -> psi4.core.Matrix; get_tensor(self: psi4.core.DFHelper, arg0: str, arg1: List[int], arg2: List[int], arg3: List[int]) -> psi4.core.Matrix. get_tensor_shape(self: psi4.core.DFHelper, arg0: str) → Tuple[int, int, int]¶. get_tensor_size(self: psi4.core.DFHelper, arg0: str) → int¶. hold_met(self: psi4.core.DFHelper, arg0: bool) → None¶. initialize(self: psi4.core.DFHelper) → None¶. print_header(self: psi4.core.DFHelper) → None¶. set_AO_core(self: psi4.core.DFHelper, arg0: bool) → None¶. set_MO_core(self: psi4.core.DFHelper, arg0: bool) → None¶. set_memory(self: psi4.core.DFHelper, arg0: int) → None¶. set_method(self: psi4.core.DFHelper, arg0: str) → None¶. set_nthreads(self: psi4.core.DFHelper, arg0: int) → None¶. set_schwarz_cutoff(self: psi4.core.DFHelper, arg0: float) → None¶. set_subalgo(self: psi4.core.DFHelper, arg0: str) → None¶. transform(self: psi4.core.DFHelper) → None¶. transpose(self: psi4.core.DFHelper, arg0: str, arg1: Tuple[int, int, int]) → None¶. table of contents. DFHelper; DFHelper; DFHelper.add_space(); DFHelper.add_transformation(); DFHelper.clear_all(); DFHelper.clear_spaces(); DFHelper.get_AO_core(); DFHelper.get_AO_size(); DFHelper.get_MO_core(); DFHelper.get_memory(); DFHelper.get_method(); DFHelper.get_schwarz_cutoff(); DFHelper.get_space_size(); DFHelper.get_tensor(); DFHelper.get_tensor_shape(); DFHelper.get_tensor_size(); DFHelper.hold_met(); DFHelper.initialize(); DFHelper.print_header(); DFHelper.set_AO_core(); DFHelper.set_MO_core(); DFHelper.set_memory(); DFHelper.set_method(); DFHelper.set_nthreads(); DFHelper.set_schwarz_cutoff(); DFHelper.set_subalgo(); DFHelper.transform(); DFHelper.transpose(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.9.1;  · . PSI4. PSI4 API: Linking C++ and Python; DFHelper. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 08 February 2024 09:32PM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/api/psi4.core.DFHelper.html:3477,update,updated,3477,psi4manual/1.9.x/api/psi4.core.DFHelper.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/api/psi4.core.DFHelper.html,1,['update'],['updated']
Deployability,"vided is the active one; molecule = kwargs.pop('molecule', core.get_active_molecule()). # If we are feezing cartesian, do not orient or COM; if core.get_local_option(""OPTKING"", ""FROZEN_CARTESIAN""):; molecule.fix_orientation(True); molecule.fix_com(True); molecule.update_geometry(). # Shifting the geometry so need to copy the active molecule; moleculeclone = molecule.clone(). initial_sym = moleculeclone.schoenflies_symbol(); while n <= core.get_option('OPTKING', 'GEOM_MAXITER'):; current_sym = moleculeclone.schoenflies_symbol(); if initial_sym != current_sym:; raise ValidationError(""""""Point group changed! (%s <-- %s) You should restart """"""; """"""using the last geometry in the output, after """"""; """"""carefully making sure all symmetry-dependent """"""; """"""input, such as DOCC, is correct."""""" %; (current_sym, initial_sym)); kwargs['opt_iter'] = n. # Use orbitals from previous iteration as a guess; # set within loop so that can be influenced by fns to optimize (e.g., cbs); if (n > 1) and (opt_mode == 'continuous') and (not core.get_option('SCF', 'GUESS_PERSIST')):; core.set_local_option('SCF', 'GUESS', 'READ'). # Before computing gradient, save previous molecule and wavefunction if this is an IRC optimization; if (n > 1) and (core.get_option('OPTKING', 'OPT_TYPE') == 'IRC'):; old_thisenergy = core.get_variable('CURRENT ENERGY'). # Compute the gradient; G, wfn = gradient(lowername, return_wfn=True, molecule=moleculeclone, **kwargs); thisenergy = core.get_variable('CURRENT ENERGY'). # above, used to be getting energy as last of energy list from gradient(); # thisenergy below should ultimately be testing on wfn.energy(). # S/R: Quit after getting new displacements or if forming gradient fails; if opt_mode == 'sow':; return (0.0, None); elif opt_mode == 'reap' and thisenergy == 0.0:; return (0.0, None). core.set_gradient(G). # S/R: Move opt data file from last pass into namespace for this pass; if opt_mode == 'reap' and n != 0:; core.IOManager.shared_object().set_specific_retention",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/driver.html:59049,continuous,continuous,59049,psi4manual/1.1.0/_modules/psi4/driver/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/driver.html,1,['continuous'],['continuous']
Deployability,"vided is the active one; molecule = kwargs.pop('molecule', psi4.get_active_molecule()). # If we are feezing cartesian, do not orient or COM; if psi4.get_local_option(""OPTKING"", ""FROZEN_CARTESIAN""):; molecule.fix_orientation(True); molecule.fix_com(True); molecule.update_geometry(). # Shifting the geometry so need to copy the active molecule; moleculeclone = molecule.clone(). initial_sym = moleculeclone.schoenflies_symbol(); while n <= psi4.get_option('OPTKING', 'GEOM_MAXITER'):; current_sym = moleculeclone.schoenflies_symbol(); if initial_sym != current_sym:; raise ValidationError(""""""Point group changed! (%s <-- %s) You should restart """"""; """"""using the last geometry in the output, after """"""; """"""carefully making sure all symmetry-dependent """"""; """"""input, such as DOCC, is correct."""""" %; (current_sym, initial_sym)); kwargs['opt_iter'] = n. # Use orbitals from previous iteration as a guess; # set within loop so that can be influenced by fns to optimize (e.g., cbs); if (n > 1) and (opt_mode == 'continuous') and (not psi4.get_option('SCF', 'GUESS_PERSIST')):; psi4.set_local_option('SCF', 'GUESS', 'READ'). # Before computing gradient, save previous molecule and wavefunction if this is an IRC optimization; if (n > 1) and (psi4.get_option('OPTKING', 'OPT_TYPE') == 'IRC'):; old_thisenergy = psi4.get_variable('CURRENT ENERGY'). # Compute the gradient; G, wfn = gradient(lowername, return_wfn=True, molecule=moleculeclone, **kwargs); thisenergy = psi4.get_variable('CURRENT ENERGY'). # above, used to be getting energy as last of energy list from gradient(); # thisenergy below should ultimately be testing on wfn.energy(). # S/R: Quit after getting new displacements or if forming gradient fails; if opt_mode == 'sow':; return (0.0, None); elif opt_mode == 'reap' and thisenergy == 0.0:; return (0.0, None). psi4.set_gradient(G). # S/R: Move opt data file from last pass into namespace for this pass; if opt_mode == 'reap' and n != 0:; psi4.IOManager.shared_object().set_specific_retention",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/driver.html:57207,continuous,continuous,57207,psi4manual/1.0.0/_modules/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/driver.html,1,['continuous'],['continuous']
Deployability,"vidson iterations. EVANGELISTI uses the sums and differences of orbital energies with the SCF reference energy to produce spin pure expansion vectors. LEININGER approximation which subtracts the one-electron contribution from the orbital energies, multiplies by 0.5, and adds the one-electron contribution back in, producing spin pure expansion vectors and developed by Matt Leininger and works as well as EVANGELISTI. Type: string; Possible Values: EVANGELISTI, HD_EXACT, HD_KAVE, ORB_ENER, LEININGER, Z_KAVE; Default: EVANGELISTI. HD_OTF (DETCI); DETCI (Expert) — Do compute the diagonal elements of the Hamiltonian matrix on-the-fly? Otherwise, a diagonal element vector is written to a separate file on disk. Type: boolean; Default: true. HEFF4 (PSIMRCC); PSIMRCC — Do include the fourth-order contributions to the effective Hamiltonian?. Type: boolean; Default: true. HEFF_PRINT (PSIMRCC); PSIMRCC — Do print the effective Hamiltonian?. Type: boolean; Default: false. HESS_UPDATE (OPTKING); OPTKING — Hessian update scheme. Type: string; Possible Values: NONE, BFGS, MS, POWELL, BOFILL; Default: BFGS. HESS_UPDATE_LIMIT (OPTKING); OPTKING — Do limit the magnitude of changes caused by the Hessian update?. Type: boolean; Default: true. HESS_UPDATE_LIMIT_MAX (OPTKING); OPTKING — If HESS_UPDATE_LIMIT is true, changes to the Hessian from the update are limited to the larger of HESS_UPDATE_LIMIT_SCALE * (the previous value) and HESS_UPDATE_LIMIT_MAX [au]. Type: double; Default: 1.00. HESS_UPDATE_LIMIT_SCALE (OPTKING); OPTKING — If HESS_UPDATE_LIMIT is true, changes to the Hessian from the update are limited to the larger of HESS_UPDATE_LIMIT_SCALE * (the previous value) and HESS_UPDATE_LIMIT_MAX [au]. Type: double; Default: 0.50. HESS_UPDATE_USE_LAST (OPTKING); OPTKING — Number of previous steps to use in Hessian update, 0 uses all. Type: integer; Default: 1. HESSIAN_WRITE (FINDIF); FINDIF — Do write a hessian output file? If so, the filename will end in .hess, and the prefix is deter",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/autodoc_glossary_options_c-1.html:55663,update,update,55663,psi4manual/4.0b4/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_glossary_options_c-1.html,4,['update'],['update']
Deployability,"vised TPSS Meta-GGA XC Functional; Y; Y; —; —; —; —; —; —; —. REVTPSSH; revTPSSh Hyb-GGA Exchange-Correlation Functional; Y; Y; —; 0.100000; —; —; —; —; —. REVTPSSH-D3BJ; revTPSSh-d3bj Hyb-GGA Exchange-Correlation Functional; Y; Y; —; 0.100000; —; —; —; Y. SCAN; SCAN Meta-GGA XC Functional; Y; Y; —; —; —; —; —; —; —. SCAN-D3BJ; SCAN Meta-GGA XC Functional; Y; Y; —; —; —; —; —; Y. SCAN0; SCAN0 Hybrid Meta-GGA XC Functional; Y; Y; —; 0.250000; —; —; —; —; —. T-HCTH; Tau HCTH Meta-GGA XC Functional; Y; Y; —; —; —; —; —; —; —. T-HCTH-D3BJ; Tau HCTH Meta-GGA XC Functional; Y; Y; —; —; —; —; —; Y. T-HCTHH; Hybrid Tau HCTH Meta-GGA XC Functional; Y; Y; —; 0.150000; —; —; —; —; —. TPSS; TPSS Meta-GGA XC Functional; Y; Y; —; —; —; —; —; —; —. TPSS-D3BJ; TPSS Meta-GGA XC Functional; Y; Y; —; —; —; —; —; Y. TPSS-NL; TPSS Meta-GGA XC Functional; Y; Y; —; —; —; —; —; —; —. TPSSH; TPSSh Hyb-GGA Exchange-Correlation Functional; Y; Y; —; 0.100000; —; —; —; —; —. TPSSH-D3BJ; TPSSh-d3bj Hyb-GGA Exchange-Correlation Functional; Y; Y; —; 0.100000; —; —; —; Y. TPSSH-NL; TPSSh-nl Hyb-GGA Exchange-Correlation Functional; Y; Y; —; 0.100000; —; —; —; —; —. TPSSLYP1W; TPSSLYP1W GGA Exchange-Correlation Functional; Y; Y; —; —; —; —; —; —; —. VSXC; VSXC Meta-GGA XC Functional; Y; Y; —; —; —; —; —; —; —. WB97M-D3BJ; wB97M-V with D3(BJ) instead of VV10 dispersion; Y; Y; 0.300000; 0.150000; —; —; —; Y. WB97M-V; wB97M-V Hyb-GGA Exchange-Correlation Functional; Y; Y; 0.300000; 0.150000; —; —; —; —; —. X1B95; X1B95 Hyb-GGA Exchange-Correlation Functional; Y; Y; —; 0.300000; —; —; —; —; —. XB1K; XB1K Hyb-GGA Exchange-Correlation Functional; Y; Y; —; 0.430000; —; —; —; —; —. ZLP; ZLP GGA Exchange-Correlation Functional; Y; Y; —; —; —; —; —; —; —. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.6;  · . PSI4. Appendices; DFT Functionals; <no title>. © Copyright 2022, The Psi4 Project.; Last updated on Thursday, 19 May 2022 08:57PM.; Created using Sphinx 4.5.0.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/autodoc_dft_meta.html:7501,update,updated,7501,psi4manual/1.6.x/autodoc_dft_meta.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/autodoc_dft_meta.html,1,['update'],['updated']
Deployability,"vtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(2df); 6-311ppg_2df_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(2df,p); 6-311ppg_2df_p_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(2df,2p); 6-311ppg_2df_2p_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(2df,2pd); 6-311ppg_2df_2pd_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(3df); 6-311ppg_3df_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(3df,p); 6-311ppg_3df_p_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(3df,2p); 6-311ppg_3df_2p_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(3df,2pd); 6-311ppg_3df_2pd_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(3df,3pd); 6-311ppg_3df_3pd_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. def2-SV(P); def2-sv_p_; def2-sv_p_-jkfit; def2-sv_p_-ri; —. def2-SVP; def2-svp; def2-svp-jkfit; def2-svp-ri; —. def2-SVPD; def2-svpd; def2-svp-jkfit; def2-svpd-ri; —. def2-TZVP; def2-tzvp; def2-tzvp-jkfit; def2-tzvp-ri; —. def2-TZVPD; def2-tzvpd; def2-tzvp-jkfit; def2-tzvpd-ri; —. def2-TZVPP; def2-tzvpp; def2-tzvpp-jkfit; def2-tzvpp-ri; —. def2-TZVPPD; def2-tzvppd; def2-tzvpp-jkfit; def2-tzvppd-ri; —. def2-QZVP; def2-qzvp; def2-qzvp-jkfit; def2-qzvp-ri; —. def2-QZVPD; def2-qzvpd; def2-qzvp-jkfit; —; —. def2-QZVPP; def2-qzvpp; def2-qzvpp-jkfit; def2-qzvpp-ri; —. def2-QZVPPD; def2-qzvppd; def2-qzvpp-jkfit; def2-qzvppd-ri; —. DZ; dz; —; —; —. DZP; dzp; —; —; —. DZVP; dzvp; —; —; —. psi3-DZP; psi3-dzp; —; —; —. psi3-TZ2P; psi3-tz2p; —; —; —. psi3-TZ2PF; psi3-tz2pf; —; —; —. sadlej-lpol-dl; sadlej-lpol-dl; —; —; —. sadlej-lpol-ds; sadlej-lpol-ds; —; —; —. sadlej-lpol-fl; sadlej-lpol-fl; —; —; —. sadlej-lpol-fs; sadlej-lpol-fs; —; —; —. Previous topic; <no title>; Next topic; <no title>. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/basissets_byfamily-1.html:17193,update,updated,17193,psi4manual/1.0.0/basissets_byfamily-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/basissets_byfamily-1.html,2,['update'],['updated']
Deployability,"w Code to PSI4; Programmers FAQ. Programmers FAQ¶. C++ Style in PSI4¶. Prefer nullptr to 0 or NULL; Prefer std::make_shared to direct use of new; Prefer auto to explicit type declarations; How to impose code style through your editor; How to impose code style through Git hooks; How to run code-style tools clang-format and yapf manually. Modules in PSI4¶. How to name keywords in psi4/src/read_options.cc; How to call BLAS & LAPACK in ; How to use low-level BLAS/LAPACK with psi4.core.Matrix; How to name orbital bases (e.g., AO & SO); How to name orbital dimensions; How to name orbital spaces (e.g., docc). Interfacing with PSI4¶. How to use an Add-On’s name in directory structure, build, and distribution; How to integrate an Add-On into build, testing, and docs. Versioning PSI4¶. How to bump a version; How to create and remove an annotated Git tag on a remote; What is the suggested GitHub workflow; What Psi4 version is running. Releasing PSI4¶. Annual; Pre-Release (e.g., v1.3rc1); Release (e.g., v1.3); Post-Release (e.g., v1.3.1). Workflow¶. How to use a local Add-On repository in the Psi4 build; What is the directory layout of the installed or staged Psi4; What is the suggested GitHub workflow; How to highlight git merge conflicts in vi; How to use gdb and lldb with Psi4; How to locate non-ascii characters in the codebase; How to Ignore the Bots. Miscellaneous¶. Test Suite; Adding PSIthon Test Cases; Adding PsiAPI Test Cases; How to set up PSIthon tests to run through pytest; How to find tests without output.ref; How to do GitHub issue management and code review. table of contents. Programmers FAQ; C++ Style in PSI4; Modules in PSI4; Interfacing with PSI4; Versioning PSI4; Releasing PSI4; Workflow; Miscellaneous. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.6;  · . PSI4. Adding New Code to PSI4; Programmers FAQ. © Copyright 2022, The Psi4 Project.; Last updated on Thursday, 19 May 2022 08:57PM.; Created using Sphinx 4.5.0.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/prog_faq.html:1243,install,installed,1243,psi4manual/1.6.x/prog_faq.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/prog_faq.html,2,"['install', 'update']","['installed', 'updated']"
Deployability,"w to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda. How to choose the compilation directory, {objdir}¶. there is no default; common choices are objdir or build under top-level-psi4-dir; cd {top-level-psi4-dir} && cmake -H. -Bobjdir; cd {top-level-psi4-dir} && cmake -H. -Bbuild. in-source builds (*.cc and *.o in same directory) are disallowed; builds outside top-level-psi4-dir are permitted. How to save configuration settings for a future compilation¶; Create a file like do-configure with the cmake command and options; on one line.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10>>> cd {top-level-psi4-dir}; >>> cat do-configure; cmake -H. -B{objdir} \; -DCMAKE_INSTALL_PATH=""/Users/me/psi4"" \; -DCMAKE_PREFIX_PATH=""/Users/me/externals/install-libint"" \; -DMAX_AM_ERI=6 \; -DENABLE_gdma=ON \; -DBUILD_SHARED_LIBS=ON; >>> chmod u+x do-configure; >>> ./do-configure. What is the directory layout of the installed or staged Psi4¶; After compilation (cd objdir && make), a directory structure like the; below will exist at objdir/stage. This may be tested and used; just like a full installation.; After installation (cd objdir && make && make install), a directory; structure like the below will exist at /prefix. This is a full; installation.; /; bin/ (executables for psi4 + any external proj); bin/psi4 (psi4 executable, actually just a py script); include/ (installed headers for psi4 + any external proj); include/psi4/ (header files for #include-ing); include/psi4/psi4-dec.h (primary psi4 header); include/psi4/masses.h (a project-wide psi4 header); include/psi4/libmints/ (psi4 library headers); include/psi4/libfock/ (ditto); share/ (read-only arch-indep files for psi4 + any external proj); share/cmake/psi4/ (files for detecting installed targets); share/cmake/psi4/psi4Config.cmake (psi4 build/install info); share/cmake/psi4/psi4ConfigVersion.cmake (psi4 cmake version info); share/doc/psi4/html/ (sphinx html documentation); share/psi4/ ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/build_planning-1.html:20576,install,installed,20576,psi4manual/1.3.2/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/build_planning-1.html,2,['install'],['installed']
Deployability,"w to configure ddx for building Psi4. Interface to DFTD3 by S. Grimme; Empirical Dispersion Implementations; Installation; Theory; Running DFTD3 or DFTD4; Three-Body Dispersion Corrections. Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess; Installation; Input; Keywords; Reference; How to configure dkh for building Psi4. Interface to LibECPInt by R. Shaw; Installation; How to configure LibECPInt for building Psi4. Interface to LIBEFP by I. Kaliman; Installation; EFP Fragments; Molecule Specification; Running EFP; Fragment Library; How to configure libefp for building Psi4. Interface to programs through FCHK files — fchk(); Psi4FockCI: A General Fock-Space CI For Spin-Flip And IP/EA; Installation; Sample Input. Interface to gau2grid by D. G. A. Smith; Installation; How to configure gau2gridfor building Psi4. Interface to gCP by S. Grimme; Installation; Running gCP. Interface to GDMA Distributed Multipole Analysis by A. J. Stone — gdma(); Installation; Input; Options; How to configure gdma for building Psi4. Interface to Libint by E. Valeev; Installation; How to configure Libint for building Psi4. Interface to Molden — molden(); Options. Interface to MRCC by M. Kállay; Installation; Running MRCC; Interface Details. Interface to PCMSolver by R. Di Remigio; Installation; Using the polarizable continuum model; Keywords for PCMSolver; How to configure PCMSolver for building Psi4. Interface to SIMINT by B. Pritchard; Installation; How to configure simint for building Psi4. Spin-Network-Scaled MP2 (SNS-MP2) by D. E. Shaw; Installation; Sample Input. Plugin v2rdm_casscf by A. E. DePrince; Installation. Interface to Libxc by M. A. L. Marques; Installation; How to configure Libxc for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/interfacing.html:3554,update,updated,3554,psi4manual/master/interfacing.html,https://psicode.org,https://psicode.org/psi4manual/master/interfacing.html,1,['update'],['updated']
Deployability,"w to use Psi4 within a PBS queue¶; You will usually need to set up a PBS job script that is setting all; necessary environment variables, making sure the scratch directories are; set up, and invoking the executable. An example PBS script; is provided in the manual, but make sure to also consult your own PBS; documentation for appropriate setup. How to update and rebuild Psi4¶; Obtain code updates as appropriate from Binary Installer,; Clone from GitHub Repository, or Fork from GitHub Repository. Move into; objdir and reissue make or cmake --build ., whereupon CMake may reconfigure but; will only rebuild objects and libraries depending on changed files. It is; scarcely ever necessary for the user to reinvoke cmake to update; objdir based on changes to the PSI4 repository.; Upon switching conda environments, though, one should; make a new objdir since there are many full paths baked into; objdir/CMakeCache.txt. How to run a minute’s worth of tests¶; When you want to do a very minimal test of the build and have; CTest installed, the following command can be useful.; >>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through:; >>> make pytest. How to run a subset of tests¶; CTest allows flexibly partitioned running of the test suite. In; the examples below, testname are regex of test names,; and testlabel are regex of labels (e.g., cc, mints,; libefp defined [here, for example] . Run tests in parallel with -j flag. For maximum parallelism (not Windows): ctest -j`getconf _NPROCESSORS_ONLN`; Run full test suite: ctest; Run about a third of the tests in 5 minutes, the so-called quicktests: ctest -L quick; Run the same subset of tests that continuous integration checks (not the full test suite): ctest -L quick; Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ctest -L smoke; Run tests matching by name: ctest -R testname; Run tests excluding those by name: ctest -E testname; Run te",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/build_planning.html:52313,install,installed,52313,psi4manual/1.6.x/build_planning.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/build_planning.html,5,['install'],['installed']
Deployability,"w to use Psi4 within a PBS queue¶; You will usually need to set up a PBS job script that is setting all; necessary environment variables, making sure the scratch directories are; set up, and invoking the executable. An example PBS script; is provided in the manual, but make sure to also consult your own PBS; documentation for appropriate setup. How to update and rebuild Psi4¶; Obtain code updates as appropriate from Binary Installer,; Clone from GitHub Repository, or Fork from GitHub Repository. Move into; objdir and reissue make or cmake --build ., whereupon CMake may reconfigure but; will only rebuild objects and libraries depending on changed files. It is; scarcely ever necessary for the user to reinvoke cmake to update; objdir based on changes to the PSI4 repository.; Upon switching conda environments, though, one should; make a new objdir since there are many full paths baked into; objdir/CMakeCache.txt. How to run a minute’s worth of tests¶; When you want to do a very minimal test of the build and have; CTest installed, the following command can be useful.; >>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through:; >>> make pytest. How to run a subset of tests¶; CTest allows flexibly partitioned running of the test suite. In; the examples below, testname are regex of test names,; and testlabel are regex of labels (e.g., cc, mints,; libefp defined [here, for example]. Run tests in parallel with -j flag. For maximum parallelism: ctest -j`getconf _NPROCESSORS_ONLN`; Run full test suite: ctest; Run about a third of the tests in 5 minutes, the so-called quicktests: ctest -L quick; Run the same subset of tests that TravisCI checks (not the full test suite): ctest -L quick; Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ctest -L smoke; Run tests matching by name: ctest -R testname; Run tests excluding those by name: ctest -E testname; Run tests matching by label: ctest ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/build_planning-1.html:52127,install,installed,52127,psi4manual/1.4.0/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/build_planning-1.html,4,['install'],['installed']
Deployability,"w.""); message(WARNING ""ERD will build, link, and run in Psi4 just fine. However, it has not been hooked into Psi4 in all roles, notably gradients, LRC DFT energies, and ESP. So upon activating through ``set integral_package erd``, known failures will be caught and halted, but perhaps other types not tested and identified will give *wrong* answers. Consider this your warning.""); endif(). ############################ Options: Build How? #############################; include(psi4OptionsTools); option_with_print(BUILD_SHARED_LIBS ""Build internally built Psi4 add-on libraries as shared, not static"" OFF); option_with_print(ENABLE_OPENMP ""Enables OpenMP parallelization"" ON); option_with_print(ENABLE_AUTO_BLAS ""Enables CMake to auto-detect BLAS"" ON). Note that external projects will have their own sets of build; configuration options. Only the most-common user knobs of those are; mentioned above. How to install elsewhere than /usr/local/psi4¶; The installation directory is the filesystem location for the executable; script, the Python module, basis set data, and other administrative files.; Unless using the conda package, which is relocatable, the installation; directory must be specified with CMake variable CMAKE_INSTALL_PREFIX; before compiling. Build with Specific Install Directory; cmake -DCMAKE_INSTALL_PREFIX=/nfs/common/software/psi4. Relevant CMake Options:; CMAKE_INSTALL_PREFIX=PATH # Location to which Psi4 and internally built; # add-ons are installed (default: /usr/local/psi4). Note; It’s not guaranteed, but if, in a pinch, you need to install a; built Psi4 to a location not configured by CMAKE_INSTALL_PREFIX,; recursively copy the folders under objdir/stage/prefix to; the desired location, chown them if needed, edit the shebang in; bin/psi4 if needed, and recursively delete all the “.pyc” files. It; may just run. How to compile for debugging¶; Flags to turn optimizations off and debugging on can be set across the; project and plugins with CMake variable CMAKE_BUI",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/build_planning.html:21536,install,install,21536,psi4manual/1.6.x/build_planning.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/build_planning.html,2,['install'],"['install', 'installation']"
Deployability,"wa:2010:550]. [11]Keyword not used for user-defined functionals where the dft_dict[""dispersion""][""params""]; is easily editable for this purpose. See Advanced Functional Use and Manipulation. A few practical examples:. DFT-D2 single point with default parameters (dftd3 not called); 1energy('bp86-d'). DFT-D3BJ optimization with default parameters; 1optimize('pbe-d3bj'). DFT-D2 optimization with custom s6 parameter; 1; 2set dft_dispersion_parameters [1.20]; optimize('b3lyp-d2'). DFT-D3ZERO single point (b3lyp) with custom s8 parameter (reset all four values); 1; 2set dft_dispersion_parameters [1.0, 2.0, 1.261, 14.0]; energy('b3lyp-d3'). DFT-D2 single point with dftd3 instead of PSI4’s libdisp; 1energy('pbe-d2', engine='dftd3'). If only dispersion corrections (rather than total energies) are of; interest, the dftd3 program can be run independently of the scf; through the python function run_dftd3(). (This function; is the same PSI4/dftd3 interface that is called during an scf job.); This route is much faster than running a DFT-D energy. Some set-up:; 1; 2; 3; 4; 5; 6molecule nene {; Ne; Ne 1 2.0; }. nene.update_geometry(). The same four dispersion corrections/gradients as the section above:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14>>> print nene.run_dftd3('bp86', 'd', dertype=0); -7.735e-05. >>> E, G = nene.run_dftd3('pbe', 'd3bj'); >>> print G; [[0.0, 0.0, -1.1809087569358e-05], [0.0, 0.0, 1.1809087569358e-05]]. >>> E, G = nene.run_dftd3('b3lyp', 'd2', {'s6': 1.20}); >>> print E; -8.84e-05. >>> E, G = nene.run_dftd3(dashlvl='d3', dashparam={'s8': 2.0, 'alpha6': 14.0, 'sr6': 1.261, 's6': 1.0}); >>> print E; -0.00024762. table of contents. Interface to DFTD3 by S. Grimme; Installation; Theory; Running DFTD3. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/dftd3-1.html:8974,update,updated,8974,psi4manual/1.3.2/dftd3-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/dftd3-1.html,2,['update'],['updated']
Deployability,"weak pairs in the same manner as strong pairs. Type: string; Default: NONE. MAXITER¶. Maximum number of iterations to converge perturbed amplitude equations. Type: integer; Default: 50. NUM_AMPS_PRINT¶. Number of important CC amplitudes per excitation level to print. CC analog to NUM_DETS_PRINT. Type: integer; Default: 5. OMEGA¶. Array that specifies the desired frequencies of the incident radiation field in CCLR calculations. If only one element is given, the units will be assumed to be atomic units. If more than one element is given, then the units must be specified as the final element of the array. Acceptable units are HZ, NM, EV, and AU. Type: array; Default: No Default. PROPERTY¶. The response property desired. Acceptable values are POLARIZABILITY (default) for dipole polarizabilities, ROTATION for specific rotations, ROA for Raman Optical Activity (ROA_TENSOR for each displacement), and ALL for all of the above. Type: string; Possible Values: POLARIZABILITY, ROTATION, ROA, ROA_TENSOR, ALL; Default: POLARIZABILITY. REFERENCE¶. Reference wavefunction type. Type: string; Default: RHF. RESTART¶. Do restart from on-disk amplitudes?. Type: boolean; Default: true. R_CONVERGENCE¶. Convergence criterion for wavefunction (change) in perturbed CC equations. Type: conv double; Default: 1e-7. SEKINO¶. Do Sekino-Bartlett size-extensive model-III?. Type: boolean; Default: false. Expert¶. WFN¶. Wavefunction type. Type: string; Default: SCF. table of contents. CCRESPONSE; General; ABCD; ANALYZE; CACHELEVEL; DIIS; GAUGE; LINEAR; LOCAL; LOCAL_CPHF_CUTOFF; LOCAL_CUTOFF; LOCAL_FILTER_SINGLES; LOCAL_METHOD; LOCAL_PAIRDEF; LOCAL_WEAKP; MAXITER; NUM_AMPS_PRINT; OMEGA; PROPERTY; REFERENCE; RESTART; R_CONVERGENCE; SEKINO. Expert; WFN. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Appendices; Keywords by Module. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 July 2018 04:21AM.; Created using Sphinx 1.7.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/autodir_options_c/module__ccresponse-1.html:4184,update,updated,4184,psi4manual/1.2.1/autodir_options_c/module__ccresponse-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/autodir_options_c/module__ccresponse-1.html,2,['update'],['updated']
Deployability,"wfn specified. PSI variables:. CURRENT ENERGY. Parameters:; name (string) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; energy(). molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || 'off' ; Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. func (function) – gradient || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. mode (string) – 'continuous' || 'sow' || 'reap'; For a finite difference of energies optimization, indicates whether; the calculations required to complete the; optimization are to be run in one file ('continuous') or are to be; farmed out in an embarrassingly parallel fashion; ('sow'/'reap'). For the latter, run an initial job with; 'sow' and follow instructions in its output file. For maximum; flexibility, return_wfn is always on in 'reap' mode. dertype (dertype) – 'gradient' || 'energy'; Indicates whether analytic (if available) or finite difference; optimization is to be performed. hessian_with (string) – 'scf' || 'mp2' || etc.; Indicates the computational method with which to perform a hessian; analysis to guide the geometry optimization. Warning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the geometry being converted to a Cartesian representation. Note; Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. name; calls method. efp; efp-only optimizations. scf; Hartree–Fo",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/opt-1.html:1905,continuous,continuous,1905,psi4manual/1.0.0/opt-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/opt-1.html,4,['continuous'],['continuous']
Deployability,"wfn. [docs]def run_dft_gradient(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; a density-functional-theory gradient calculation. """"""; optstash = p4util.OptionsState(; ['SCF', 'DFT_FUNCTIONAL'],; ['SCF', 'REFERENCE'],; ['SCF', 'SCF_TYPE']). # Alter default algorithm; if not psi4.has_option_changed('SCF', 'SCF_TYPE'):; psi4.set_local_option('SCF', 'SCF_TYPE', 'DF'). psi4.set_local_option('SCF', 'DFT_FUNCTIONAL', name.upper()). user_ref = psi4.get_option('SCF', 'REFERENCE'); if (user_ref == 'RHF'):; psi4.set_local_option('SCF', 'REFERENCE', 'RKS'); elif (user_ref == 'UHF'):; psi4.set_local_option('SCF', 'REFERENCE', 'UKS'); elif (user_ref == 'ROHF'):; raise ValidationError('ROHF reference for DFT is not available.'); elif (user_ref == 'CUHF'):; raise ValidationError('CUHF reference for DFT is not available.'). wfn = run_scf_gradient(name, **kwargs). optstash.restore(); return wfn. [docs]def run_detci(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; a configuration interaction calculation, namely FCI,; CIn, MPn, and ZAPTn. """"""; optstash = p4util.OptionsState(; ['DETCI', 'WFN'],; ['DETCI', 'MAX_NUM_VECS'],; ['DETCI', 'MPN_ORDER_SAVE'],; ['DETCI', 'MPN'],; ['DETCI', 'FCI'],; ['DETCI', 'EX_LEVEL']). if psi4.get_option('DETCI', 'REFERENCE') not in ['RHF', 'ROHF']:; raise ValidationError('Reference %s for DETCI is not available.' %; psi4.get_option('DETCI', 'REFERENCE')). if name == 'zapt':; psi4.set_local_option('DETCI', 'WFN', 'ZAPTN'); level = kwargs['level']; maxnvect = int((level + 1) / 2) + (level + 1) % 2; psi4.set_local_option('DETCI', 'MAX_NUM_VECS', maxnvect); if (level + 1) % 2:; psi4.set_local_option('DETCI', 'MPN_ORDER_SAVE', 2); else:; psi4.set_local_option('DETCI', 'MPN_ORDER_SAVE', 1); elif name in ['mp', 'mp2', 'mp3', 'mp4']:; psi4.set_local_option('DETCI', 'WFN', 'DETCI'); psi4.set_local_option('DETCI', 'MPN', 'TRUE'); if name == 'mp2':; level = 2; elif name == 'mp3':; level = 3; elif name == 'mp4':; level =",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/procedures/proc.html:73211,configurat,configuration,73211,psi4manual/1.0.0/_modules/procedures/proc.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/procedures/proc.html,1,['configurat'],['configuration']
Deployability,"wfn.basisset(), scf_wfn.basisset()); scf_wfn.guess_Ca(pCa); scf_wfn.guess_Cb(pCb). # Print basis set info; if core.get_option(""SCF"", ""PRINT_BASIS""):; scf_wfn.basisset().print_detail_out(). # Compute additive correction: dftd3, mp2d, dftd4, etc.; if hasattr(scf_wfn, ""_disp_functor""):; disp_energy = scf_wfn._disp_functor.compute_energy(scf_wfn.molecule(), scf_wfn); scf_wfn.set_variable(""-D Energy"", disp_energy). # PCM preparation; if core.get_option('SCF', 'PCM'):; if core.get_option('SCF', 'PE'):; raise ValidationError(""""""Error: 3-layer QM/MM/PCM not implemented.\n""""""); pcmsolver_parsed_fname = core.get_local_option('PCM', 'PCMSOLVER_PARSED_FNAME'); pcm_print_level = core.get_option('SCF', ""PRINT""); scf_wfn.set_PCM(core.PCM(pcmsolver_parsed_fname, pcm_print_level, scf_wfn.basisset())). # PE preparation; if core.get_option('SCF', 'PE'):; if not solvent._have_pe:; raise ModuleNotFoundError('Python module cppe not found. Solve by installing it: `conda install -c psi4 pycppe`'); # PE needs information about molecule and basis set; pol_embed_options = solvent.pol_embed.get_pe_options(); core.print_out(f"""""" Using potential file; {pol_embed_options[""potfile""]}; for Polarizable Embedding calculation.\n""""""); scf_wfn.pe_state = solvent.pol_embed.CppeInterface(; molecule=scf_molecule, options=pol_embed_options,; basisset=scf_wfn.basisset(); ). e_scf = scf_wfn.compute_energy(); for obj in [core, scf_wfn]:; # set_variable(""SCF TOTAL ENERGY"") # P::e SCF; for pv in [""SCF TOTAL ENERGY"", ""CURRENT ENERGY"", ""CURRENT REFERENCE ENERGY""]:; obj.set_variable(pv, e_scf). # We always would like to print a little property information; if kwargs.get('scf_do_properties', True):; oeprop = core.OEProp(scf_wfn); oeprop.set_title(""SCF""). # Figure our properties, if empty do dipole; props = [x.upper() for x in core.get_option(""SCF"", ""SCF_PROPERTIES"")]; if ""DIPOLE"" not in props:; props.append(""DIPOLE""). proc_util.oeprop_validator(props); for x in props:; oeprop.add(x). # Compute properties; oeprop.com",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/_modules/psi4/driver/procrouting/proc.html:48065,install,installing,48065,psi4manual/1.5.0/_modules/psi4/driver/procrouting/proc.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/_modules/psi4/driver/procrouting/proc.html,2,['install'],"['install', 'installing']"
Deployability,"wfn.basisset(), scf_wfn.basisset()); scf_wfn.guess_Ca(pCa); scf_wfn.guess_Cb(pCb). # Print basis set info; if core.get_option(""SCF"", ""PRINT_BASIS""):; scf_wfn.basisset().print_detail_out(). # Compute additive correction: dftd3, mp2d, dftd4, etc.; if hasattr(scf_wfn, ""_disp_functor""):; disp_energy = scf_wfn._disp_functor.compute_energy(scf_wfn.molecule(), scf_wfn); scf_wfn.set_variable(""-D Energy"", disp_energy). # PCM preparation; if core.get_option('SCF', 'PCM'):; if core.get_option('SCF', 'PE'):; raise ValidationError(""""""Error: 3-layer QM/MM/PCM not implemented.\n""""""); pcmsolver_parsed_fname = core.get_local_option('PCM', 'PCMSOLVER_PARSED_FNAME'); pcm_print_level = core.get_option('SCF', ""PRINT""); scf_wfn.set_PCM(core.PCM(pcmsolver_parsed_fname, pcm_print_level, scf_wfn.basisset())). # PE preparation; if core.get_option('SCF', 'PE'):; if not solvent._have_pe:; raise ModuleNotFoundError('Python module cppe not found. Solve by installing it: `conda install -c psi4 pycppe`'); # PE needs information about molecule and basis set; pol_embed_options = solvent.pol_embed.get_pe_options(); core.print_out(f"""""" Using potential file; {pol_embed_options[""potfile""]}; for Polarizable Embedding calculation.\n""""""); scf_wfn.pe_state = solvent.pol_embed.CppeInterface(; molecule=scf_molecule, options=pol_embed_options,; basisset=scf_wfn.basisset(); ). e_scf = scf_wfn.compute_energy(); for obj in [core, scf_wfn]:; # set_variable(""SCF TOTAL ENERGY"") # P::e SCF; for pv in [""SCF TOTAL ENERGY"", ""CURRENT ENERGY"", ""CURRENT REFERENCE ENERGY""]:; obj.set_variable(pv, e_scf). # We always would like to print a little property information; if kwargs.get('scf_do_properties', True):; oeprop = core.OEProp(scf_wfn); oeprop.set_title(""SCF""). # Figure our properties, if empty do dipole; props = [x.upper() for x in core.get_option(""SCF"", ""SCF_PROPERTIES"")]; if ""DIPOLE"" not in props:; props.append(""DIPOLE""). proc_util.oeprop_validator(props); for x in props:; oeprop.add(x). # Populate free-atom volumes; # ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/procrouting/proc.html:50114,install,installing,50114,psi4manual/1.6.x/_modules/psi4/driver/procrouting/proc.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/procrouting/proc.html,2,['install'],"['install', 'installing']"
Deployability,"what build configuration options are available¶; CMake doesn’t provide a summary for this (unless you want to try the CMake; GUI, which the developers have never looked at). However, the top half of; the main CMakeLists.txt is a passable summary:; # 3.1: CMAKE_CXX_STANDARD, BUILD_ALWAYS. set(CMAKE_BUILD_TYPE ""Release"" CACHE STRING ""Choose the type of build."") # foil Ninja Debug on Windows. project(psi4; LANGUAGES C CXX); set(psi4_URL ""http://www.psicode.org/""); set(psi4_EMAIL ""psi4aiqc+cmake@gmail.com""); set(psi4_LICENSE ""GNU Lesser General Public License, version 3 (LGPL-3.0)""); set(psi4_DESCRIPTION ""Open-Source Quantum Chemistry""). list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake). message(STATUS ""Building using CMake ${CMAKE_VERSION} Generator ${CMAKE_GENERATOR}""). ################ Options: Overview and Not Otherwise Mentioned ###############. # <<< CMake build overview >>>; #; # >>> ls; # external/ COPYING psi4/ tests/ ...; # >>> cmake -S. -Bobjdir -DCMAKE_INSTALL_PREFIX=/path/to/install-psi4 ...; # ...; # -- Generating done; # -- Build files have been written to: /current/dir/objdir; # >>> cmake --build objdir --target install -j`getconf _NPROCESSORS_ONLN`. # <<< Required build dependencies that Psi4 can't build itself >>>; #; # - CMake (e.g., `conda install cmake`); # - C++ and C compilers (C++17 compliant); # - BLAS/LAPACK (also runtime; e.g., `conda install mkl-devel`); # - Python (also runtime; interpreter and headers; e.g., `conda install python`); # - NumPy (also runtime; avoidable at buildtime if gau2grid pre-built; e.g., `conda install numpy`); # - networkx >=2.4 (runtime only; e.g., `conda install networkx`); # - pint >=0.10 (runtime only; e.g., `conda install pint -c conda-forge`); # - pydantic >=1.0 (runtime only; e.g., `conda install pydantic -c conda-forge`); # - msgpack-python (runtime only; e.g., `conda install msgpack-python`); # - Eigen (for Libint2; e.g., `conda install eigen`); # - Boost (header-only libs for Libint2; e.g., `co",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/build_planning.html:15461,install,install-,15461,psi4manual/1.9.x/build_planning.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/build_planning.html,1,['install'],['install-']
Deployability,"where its libraries can’t interfere with other programs (on; Linux/Windows, PSI4 installs a non-default gcc 5.2) rather than the main; Anaconda or Miniconda environment. Hence the creation of the environment; above, but the environment name (p4env above) can be; substituted.; Only reason for psi4-rt package is to get the QC runtime; add-ons; could say dftd3 gcp v2rdm_casscf instead of psi4-rt;; or leave them out if you don’t want them. How to update a Psi4 binary¶; Conda command to update an existing PSI4 conda installation to the; newest stable release (roughly annually). Warning; Until 1.1 is official, this pulls the July 2016 1.0 version. 1.0 and 1.1 really shouldn’t be mixed. >>> conda update psi4 -c psi4. # if psi4 channel in defaults (true for Psi4conda installers); >>> conda update psi4. Conda command to update an existing PSI4 conda installation to the; latest development head (roughly nightly).; >>> conda update psi4 -c psi4/label/dev. # if add-on updates required, try; >>> conda update psi4 -c psi4/label/dev -c psi4. How to use conda to compile Psi4 faster and easier¶; # Linux or Mac or Windows; # substitute x.x by 2.7|3.5|3.6 for alternate python versions; >>> conda create -n p4dev python=x.x psi4-dev -c psi4. Same for Linux/Mac/Windows. Substitute desired python version: 2.7, 3.5, 3.6. Fine; to choose your own env name. Activate environment, source activate; p4dev. Go to where you’ve cloned psi4. Execute psi4-path-advisor.; It gives you a basic cmake command covering python, sphinx, link-time qc; addons, and run-time qc addons. There’s a help menu -h that gives more; info. There’s other options that will also pre-configure compilers. For; example, at GaTech psi4-path-advisor --intel works. On Macs with; XCode, psi4-path-advisor --clang works. Just read the help. For DGAS,; there’s a --disable-addons, but I don’t encourage it. It gives you a fully; functional cmake command, but those are just setting up CMake cache; — like the plugins you can always add y",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/conda-1.html:6238,update,updates,6238,psi4manual/1.1.0/conda-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/conda-1.html,4,['update'],"['update', 'updates']"
Deployability,"where special, and no reference energies defined. cp 'off'; rlxd 'off'; subset ['h2o', 'nh3', 'ch4']. SSI¶. Database (Merz) of interaction energies for protein sidechain-sidechain interactions.; Geometries from Kenneth Merz Group, Univ. of Florida.; Reference interaction energies from <Reference>.; Part of the BioFragment Database (BFDb). cp 'off' || 'on'; rlxd 'off'. ACENES¶. Database of Ed and Rob’s favorite linear acene dimers.; Geometries from nowhere special, and reference energies undefined. cp 'off' || 'on'; rlxd 'off'; subset; 'small'; 'large'; 'FIRST3' benzene, napthalene, and anthracene dimers; 'FIRST5' benzene - pentacene dimers; 'FIRST10' benzene - decacene dimers. RGC10¶. Database (Sherrill) of interaction energies for dissociation curves of rare-gas biatomic complexes.; Geometries and reference interaction energies from Tang et al. JCP 118 4976 (2003). cp 'off' || 'on'; rlxd 'off'; subset; 'small'; 'large'; 'equilibrium'; 'HeHe' 18-point dissociation curve for helium dimer; 'HeNe' 18-point dissociation curve for helium-neon complex; 'HeAr' 18-point dissociation curve for helium-argon complex; 'HeKr' 18-point dissociation curve for helium-krypton complex; 'NeNe' 18-point dissociation curve for neon dimer; 'NeAr' 18-point dissociation curve for neon-argon complex; 'NeKr' 18-point dissociation curve for neon-krypton complex; 'ArAr' 18-point dissociation curve for argon dimer; 'ArKr' 18-point dissociation curve for argon-krypton complex; 'KrKr' 18-point dissociation curve for krypton dimer. table of contents. BBI; BAKERJCC96; S22; CORE; S22by5; A24; S66; HTR40; NCB31; NHTBH; NBC10; JSCH; BENCH12; HTBH; RSE42; S66by8; BAKERJCC93; HBC6; HSG; A24alt; BASIC; SSI; ACENES; RGC10. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Psithon Functions: Invoking a Calculation; Database — database(). © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/autodoc_available_databases-1.html:11841,update,updated,11841,psi4manual/1.3.2/autodoc_available_databases-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/autodoc_available_databases-1.html,2,['update'],['updated']
Deployability,"which Psi4 core class should be used in the construction.; copy (bool) – Copy the data if True, return a view otherwise; dense (bool) – Converts irreped Psi4 objects to diagonally blocked dense arrays if True. Returns a list of arrays otherwise. Returns; Returns either a list of np.array’s or the base array depending on options. Return type; numpy.ndarray. Notes; This is a generalized function to convert a Psi4 object to a NumPy array; Examples; >>> data = psi4.core.Matrix(3, 3); >>> data.to_array(); [[ 0. 0. 0.]; [ 0. 0. 0.]; [ 0. 0. 0.]]. to_serial()¶; Converts an object with a .nph accessor to a serialized dictionary. trace(self: psi4.core.Matrix) → float¶; Returns the trace of the matrix. transform(*args, **kwargs)¶; Overloaded function. transform(self: psi4.core.Matrix, transformer: psi4.core.Matrix) -> None. Transform this matrix with transformer. transform(self: psi4.core.Matrix, a: psi4.core.Matrix, transformer: psi4.core.Matrix) -> None. Transform A with transformer. transpose(self: psi4.core.Matrix) → psi4.core.Matrix¶; Creates a new matrix that is the transpose of this matrix. transpose_this(self: psi4.core.Matrix) → None¶; Transpose the matrix in-place. static triplet(A, B, C, transA, transB, transC)¶; Multiply three matrices together. Deprecated since version 1.4: Use psi4.core.triplet() instead. vector_dot(self: psi4.core.Matrix, rhs: psi4.core.Matrix) → float¶; Returns the vector dot product of this with rhs. zero(self: psi4.core.Matrix) → None¶; Zero all elements of the matrix. zero_diagonal(self: psi4.core.Matrix) → None¶; Zero the diagonal of the matrix. zero_lower(self: psi4.core.Matrix) → None¶; Zero the lower triangle. zero_upper(self: psi4.core.Matrix) → None¶; Zero the upper triangle. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. PSI4 API: Linking C++ and Python; Matrix. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/api/psi4.core.matrix.html:16793,update,updated,16793,psi4manual/1.4.0/api/psi4.core.matrix.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/api/psi4.core.matrix.html,1,['update'],['updated']
Deployability,"which Psi4 core class should be used in the construction.; copy (bool) – Copy the data if True, return a view otherwise; dense (bool) – Converts irreped Psi4 objects to diagonally blocked dense arrays if True. Returns a list of arrays otherwise. Returns; Returns either a list of np.array’s or the base array depending on options. Return type; numpy.ndarray. Notes; This is a generalized function to convert a Psi4 object to a NumPy array; Examples; >>> data = psi4.core.Matrix(3, 3); >>> data.to_array(); [[ 0. 0. 0.]; [ 0. 0. 0.]; [ 0. 0. 0.]]. to_serial()¶; Converts an object with a .nph accessor to a serialized dictionary. trace(self: psi4.core.Matrix) → float¶; Returns the trace of the matrix. transform(*args, **kwargs)¶; Overloaded function. transform(self: psi4.core.Matrix, transformer: psi4.core.Matrix) -> None. Transform this matrix with transformer. transform(self: psi4.core.Matrix, a: psi4.core.Matrix, transformer: psi4.core.Matrix) -> None. Transform A with transformer. transpose(self: psi4.core.Matrix) → psi4.core.Matrix¶; Creates a new matrix that is the transpose of this matrix. transpose_this(self: psi4.core.Matrix) → None¶; Transpose the matrix in-place. static triplet(A, B, C, transA, transB, transC)¶; Multiply three matrices together. Deprecated since version 1.4: Use psi4.core.triplet() instead. vector_dot(self: psi4.core.Matrix, rhs: psi4.core.Matrix) → float¶; Returns the vector dot product of this with rhs. zero(self: psi4.core.Matrix) → None¶; Zero all elements of the matrix. zero_diagonal(self: psi4.core.Matrix) → None¶; Zero the diagonal of the matrix. zero_lower(self: psi4.core.Matrix) → None¶; Zero the lower triangle. zero_upper(self: psi4.core.Matrix) → None¶; Zero the upper triangle. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. PSI4 API: Linking C++ and Python; Matrix. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/api/psi4.core.matrix.html:16809,update,updated,16809,psi4manual/1.5.0/api/psi4.core.matrix.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/api/psi4.core.matrix.html,1,['update'],['updated']
Deployability,"which all determinants are connected to each other by no more than two; excitations. In practice, this usually means that the active space can have; at most two particles, or at most two holes. Examples would include; CAS(2,2), CAS(2,8), CAS(4,3), etc., where CAS(n,m) refers to a; complete-active-space configuration interaction (CASCI) reference with n; electrons in m orbitals. If the user specifies active spaces that do not fit; these limitations, then the code will still run, but some relevant; determinants will be missing, and the answer obtained will be an approximation; to the true Mk-MRCC procedure.; The PSIMRCC code itself does not perform orbital optimization. Hence, the; references used might be considered CASCI references, but not CASSCF; references (CASSCF implies that the orbitals have been optimized specifically; to minimize the energy of the CASCI reference). However, if one wishes to; use two-configuration self-consistent-field (TCSCF) orbitals, those can; be obtained using the multi-configuration self-consistent-field (MCSCF); component of PSIMRCC (specifying REFERENCE to be twocon).; This is suitable for describing diradicals. Otherwise, one may use RHF or; ROHF orbitals as input to PSIMRCC. Due to a current limitation in the code,; one must obtain orbitals using PSIMRCC’s MCSCF module regardless of what; orbital type is chosen, twocon, rhf, or rohf. An example of the; MCSCF input is given below.; PSIMRCC is most commonly used for low-spin cases (singlets or open-shell; singlets). It is capable of performing computations on higher spin states; (e.g., triplets), but in general, not all the required matrix elements have; been coded for high-spin cases, meaning that results will correspond to an; approximate Mk-MRCC computation for high-spin cases. A Simple Example¶; The CORR_WFN allows you to select one of three methods; Mk-MRPT2 [PT2], Mk-MRCCSD [CCSD], or Mk-MRCCSD(T) [CCSD_T].; The CORR_MULTP option allows you to select the Slater; determinants with",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/psimrcc.html:3401,configurat,configuration,3401,psi4manual/1.7.x/psimrcc.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/psimrcc.html,8,['configurat'],['configuration']
Deployability,"which in turn load in the molecule and cube file data; (contained in the .cube file), set up the visualization, and render a; .png image of the scene. Generally the view orientation and some specific; details of the .pymol files require some small tweaks to permit; publication-quality renderings. F/I-SAPT Keywords¶; The input files described above cover roughly 90% of all F/I-SAPT analyses. For; more delicate or involved problems, there are a large number of user options; that permit the customization of the I-SAPT subsystem partition, the convergence; of the IBO localization procedure, numerical thresholds, etc. We have an entire; video tutorial devoted to these options F/I-SAPT Options.; Direct source-code documentation on these options is available :ref:`here; <apdx:fisapt_psivar>`_. Additional Notes¶. Caution; In constrast to Ed Hohenstein’s SAPT0 code, FISAPT uses the -JKFIT; auxiliary basis sets for all Fock-type terms (e.g., electrostatics, exchange,; induction, and core Fock matrix elements in exchange-dispersion), and the -RI; auxiliary basis sets only for the dispersion term. Ed’s code uses the -RI; basis sets for all SAPT terms, which can be problematic for heavy elements.; As such, Ed’s SAPT0 code will yield slightly different results than FISAPT. The; differences should be very minor for up to and including second-row elements,; after which point one needs to use the DF_BASIS_ELST option in Ed’s code to; provide an accurate result. table of contents. F/I-SAPT: Functional Group and/or Intramolecular SAPT; F-SAPT: A Representative Example; Order-1 Visualization with PyMol; Difference F-SAPT Analysis; I-SAPT: A Representative Example; Cube File Visualization with PyMol; F/I-SAPT Keywords; Additional Notes. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Theoretical Methods: SCF to FCI. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/fisapt-1.html:13905,update,updated,13905,psi4manual/1.3.2/fisapt-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fisapt-1.html,2,['update'],['updated']
Deployability,"which to compute dispersion (e.g., blyp, BLYP-D2, blyp-d3bj,; blyp-d3(bj), hf+d). Any or all parameters initialized from; dashcoeff[dashlevel][functional-without-dashlevel] or; dashcoeff_supplement[dashlevel][functional-with-dashlevel]; can be overwritten via param_tweaks.; level_hint (str) – Name of dispersion correction to be applied (e.g., d, D2,; d3(bj), das2010). Must be key in dashcoeff or “alias” or; “formal” to one.; param_tweaks (Union[Dict, List]) – Values for the same keys as dashcoeff[dashlevel][‘default’]; (and same order if list) used to override any or all values; initialized by name_hint. Extra parameters will error.; engine (str) – Override which code computes dispersion. See above for allowed; values. Formerly (pre Nov 2022) only relevant for -D2, which can be computed by; libdisp or dftd3. Now (post Nov 2022) also relevant for -D3 variants,; which can be computed by dftd3 executable or simple-dftd3 Python module.; gcp_engine (str) – Override which code computes the gcp correction. Now can use; classic gcp or mctc-gcp executables.; save_pairwise_disp (bool) – Whether to request atomic pairwise analysis. table of contents. Interface to DFTD3 by S. Grimme; Empirical Dispersion Implementations; Installation; Theory; Running DFTD3 or DFTD4; Three-Body Dispersion Corrections; run_dftd3(); run_dftd4(); EmpiricalDispersion; EmpiricalDispersion.dashlevel; EmpiricalDispersion.dashparams; EmpiricalDispersion.fctldash; EmpiricalDispersion.description; EmpiricalDispersion.dashlevel_citation; EmpiricalDispersion.dashparams_citation; EmpiricalDispersion.dashcoeff_supplement; EmpiricalDispersion.engine; EmpiricalDispersion.disp; EmpiricalDispersion.ordered_params. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to DFTD3 by S. Grimme. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/dftd3.html:20586,update,updated,20586,psi4manual/1.8.x/dftd3.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/dftd3.html,1,['update'],['updated']
Deployability,"who may consider this keyword; translation a flaw rather than a feature can avoid it entirely by; confining keywords to the Cfour module along with; BASIS and PUREAM (opt, too?). Misc. Running¶; Naturally, in PSI4 multiple jobs can be run in succession from the input file.; Control optimizations with optking keywords HERE. Cfour GRD file is; written to PSI4 output file. Gradient transformed back into the frame; in which it was shipped off to Cfour is also written to the PSI4; output file and is available from input as gradient().; sandwich mode := molecule and cfour list within; Naturally, additional jobs can follow in the input file.; Depending on the nature of preceding or following jobs, it is prudent to; separate them with the following:; clean() # removes Psi4 scratch files; clean_variables() # empties the PSI variables list; cfour {} # empties. In this scheme, the contents of the cfour {...} block are tacked onto; the end of the ZMAT file that is otherwise written from psi style; format. It is by this route that, for example %excite* sections can at; present be specified.; The execution of xcfour can be modified by a few parameters. Setting; the option CFOUR_OMP_NUM_THREADS sets the environment variable; OMP_NUM_THREADS for only the duration of the Cfour computation.; That is, portions of an input file that run PSI4 modules are; unaffected. Additionally, there are a few arguments to the function; run_cfour() that control the Cfour scratch; directory. table of contents. Interface to CFOUR by J. Stanton & J. Gauss; Installation; Cfour for PSI4 Users; PSI4 for Cfour Users; Output; run_cfour(). Functionality; Specification Details; Misc. Running. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to CFOUR by J. Stanton & J. Gauss. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/cfour.html:36029,update,updated,36029,psi4manual/master/cfour.html,https://psicode.org,https://psicode.org/psi4manual/master/cfour.html,1,['update'],['updated']
Deployability,"will be set in options.; #; # geometry(""; # O 1.0 0.0 0.0; # H 0.0 1.0 0.0; # H 0.0 0.0 0.0; #; [docs]def geometry(geom, name=""default""):; """"""Function to create a molecule object of name *name* from the; geometry in string *geom*. Permitted for user use but deprecated; in driver in favor of explicit molecule-passing. Comments within; the string are filtered. """"""; molrec = qcel.molparse.from_string(; geom, enable_qm=True, missing_enabled_return_qm='minimal', enable_efp=True, missing_enabled_return_efp='none'). molecule = core.Molecule.from_dict(molrec['qm']); if ""geom"" in molrec[""qm""]:; geom = np.array(molrec[""qm""][""geom""]).reshape((-1, 3)); if molrec[""qm""][""units""] == ""Angstrom"":; geom = geom / qcel.constants.bohr2angstroms; molecule._initial_cartesian = core.Matrix.from_array(geom); molecule.set_name(name). if 'efp' in molrec:; try:; import pylibefp; except ImportError as e: # py36 ModuleNotFoundError; raise ImportError(""""""Install pylibefp to use EFP functionality. `conda install pylibefp -c psi4` Or build with `-DENABLE_libefp=ON`"""""") from e; #print('Using pylibefp: {} (version {})'.format(pylibefp.__file__, pylibefp.__version__)); efpobj = pylibefp.from_dict(molrec['efp']); # pylibefp.core.efp rides along on molecule; molecule.EFP = efpobj. # Attempt to go ahead and construct the molecule; try:; molecule.update_geometry(); except Exception:; core.print_out(""Molecule: geometry: Molecule is not complete, please use 'update_geometry'\n""; "" once all variables are set.\n""). activate(molecule). return molecule. [docs]def activate(mol):; """"""Function to set molecule object *mol* as the current active molecule.; Permitted for user use but deprecated in driver in favor of explicit; molecule-passing. """"""; core.set_active_molecule(mol). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .  · ; 1.6;  · . PSI4. Module code; psi4.driver.molutil. © Copyright 2022, The Psi4 Project.; Last updated on Thursday, 19 May 2022 08:57PM.; Created using Sphinx 4.5.0.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/molutil.html:7514,install,install,7514,psi4manual/1.6.x/_modules/psi4/driver/molutil.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/molutil.html,2,"['install', 'update']","['install', 'updated']"
Deployability,"will be treated using standard DMA. Set to 0 to force all pairs to be treated with standard DMA. Type: double; Default: 4.0. How to configure gdma for building Psi4¶; Role and Dependencies. Role — In PSI4, GDMA is a library that provides additional; quantum chemical capabilities (multipole analysis).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) gdma; Upstream Dependencies — gdma \(\Leftarrow\) Fortran. CMake Variables. ENABLE_gdma — CMake variable toggling whether Psi4 builds with gdma; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For gdma, set to an installation directory containing include/GDMA/GDMA_MANGLE.h; gdma_DIR — CMake variable to specify where pre-built gdma can be found. Set to installation directory containing share/cmake/gdma/gdmaConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_gdma — CMake variable to force internal build of gdma instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_gdma — CMake variable to force detecting pre-built gdma and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_gdma=ON. Build without gdma. >>> cmake. Link against pre-built. >>> cmake -DENABLE_gdma=ON -DCMAKE_PREFIX_PATH=/path/to/gdma/root. >>> cmake -DENABLE_gdma=ON -Dgdma_DIR=/path/to/gdma/configdir. Build bundled despite pre-built being detectable. >>> cmake -DENABLE_gdma=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/gdma/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_gdma=ON. table of contents. Interface to GDMA Distributed Multipole Analysis by A. J. Stone — gdma(); Installation; Input; Options; GDMA_LIMIT; GDMA_ORIGIN; GDMA_MULTIPOLE_UNITS; GDMA_RADIUS; GDMA_SWITCH. How to configure gdma for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 July 2018 04:21AM.; Created using Sphinx 1.7.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/gdma-1.html:7051,update,updated,7051,psi4manual/1.2.1/gdma-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/gdma-1.html,2,['update'],['updated']
Deployability,"with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly. ocepa2; OCEPA cc-pVDZ energy with B3LYP initial guess for the NO radical. dcft5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. sapt-ecp; sapt0 of charged system in ECP basis set. mints10; H2 with tiny basis set, to test basis set parser’s handling of integers. dcft2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. castup1; Test of SAD/Cast-up (mainly not dying due to file weirdness). dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for the H2O molecule. pywrap-alias; Test parsed and exotic calls to energy() like zapt4, mp2.5, and cisd are working. fci-dipole; 6-31G H2O Test FCI Energy Point. sapt-dft1; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. cc2; 6-31G** H2O CCSD optimization by energies, with Z-Matrix input. dft1; DFT Functional Test. nbody-intermediates; HF/cc-pVDZ many body energies of an arbitrary noble gas trimer complex Size vs cost tradeoff is rough here. cc11; Frozen-core CCSD(ROHF)/cc-pVDZ on CN radical with disk-based AO algorithm. pywrap-cbs1; Various basis set",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/autodoc_testsuite_corepsi4-1.html:12127,update,update,12127,psi4manual/1.3.2/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/autodoc_testsuite_corepsi4-1.html,4,['update'],['update']
Deployability,"with git (e.g., commands git; clone and git pull) in return for easy access in future to new; features and bug fixes. — Goto Clone-from-GitHub; I don’t want to deal with this newfangled git, just give me a; tarball of the source code — Goto Tarball-from-GitHub. I want to run and develop in PSI4.; In keeping with the open-source philosophy, I don’t mind my code being; as public as Psi4 itself during the development process. —; Goto Fork-from-GitHub; I want to develop using PSI4 infrastructure and libraries, not; on them; I think a plugin might do.; I’ve got a PSI4 compilation. Use it, then consult plugins; I’d rather not compile PSI4 or I don’t have compilers —; Goto Binary-Package then consult; plugins through conda. I really like parentheses and/or DBOC, so I want Psi3. —; Goto Psi3-from-SourceForge. Binary Installer¶. Get Initially; Just go to http://www.psicode.org/downloads.html and follow the; instructions there. Build; Not applicable as binary is pre-built. Get Updates directions; >>> conda update psi4. Contribute Back; Not applicable as not under git control. Conda Binary Package¶. Get Initially; The pre-compiled conda packages at https://anaconda.org/psi4/psi4; can be installed into an existing Anaconda or Miniconda distribution; according to directions. Locally, install into; a conda environment as below.; >>> conda create -n p4env psi4 -c psi4; >>> conda activate p4env. Build; Not applicable as binary is pre-built. Get Updates directions; >>> conda update psi4 -c psi4. Contribute Back; Not applicable as not under git control. Clone from GitHub Repository¶. Get Initially; The PSI4 repository at https://github.com/psi4/psi4 works like; every other GitHub repo.; Locally, clone as below.; # use https or ssh; >>> git clone https://github.com/psi4/psi4.git; >>> cd psi4; # this is your {top-level-psi4-dir}. Build directions. Get Updates; # on branch master; >>> git pull origin master. Contribute Back; Contributions cannot be made directly to the main repository. F",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/build_obtaining-1.html:2178,update,update,2178,psi4manual/1.2.1/build_obtaining-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_obtaining-1.html,4,['update'],['update']
Deployability,"with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. isapt-charged; This test case shows an example of running the I-SAPT0/aug-cc-pVDZ computation for a positively charged system, illustrating the cation-pi interaction. The SIAO1 link partitioning algorithm is used. The system is taken from http://dx.doi.org/10.1016/j.comptc.2014.02.008. fnocc7; Test fnocc with linear dependencies. fnocc6; Test method/basis with disk_df. tdscf-2; td-uhf test on triplet states of methylene (tda), wfn passing. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. dfmp2-1; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. dct3; DC-06 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the AO Basis, using integrals stored on disk. pywrap-alias; Test parsed and exotic calls to energy() like zapt4, mp2.5, and cisd are working. cc6; Frozen-core CCSD(T)/cc-pVDZ on C4H4N anion with disk ao algorithm. omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. sapt-ecp; sapt0 of charged system in ECP basis set. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. oremp-grad2; integral conventional OO-REMP/cc-pVDZ engrad single points for the H2O molecule. single point energies were independently checked using the original wavels code. oremp-grad1; integral conventional OO-REMP/cc-pVDZ engrad single points for the H2O molecule. castup1; Test of SAD/Cast-up (mainly not dying due to file weirdness). phi-ao; Test computing values of basis functions (puream and non-puream) at points. omp2p5-grad1; OMP2.5 cc-pVDZ gradient for the H2O molecule. tu4-h2o-freq; Optimization followed by frequen",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:39781,update,update,39781,psi4manual/master/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html,2,['update'],['update']
Deployability,"within CMAKE_INSTALL_PREFIX to which resources are installed (default: share)""; # - CMAKE_INSTALL_INCLUDEDIR ""Location within CMAKE_INSTALL_PREFIX to which headers are installed (default: include)""; # - PYMOD_INSTALL_LIBDIR ""Location within CMAKE_INSTALL_LIBDIR to which python modules are installed (default: /); # Must start with: / . Used to imitate python install: /python3.6/site-packages ."". ############################ Options: Build What? ############################; option(ENABLE_ambit ""Enables the ambit tensor library"" OFF); option(ENABLE_CheMPS2 ""Enables CheMPS2 for DMRG (requires HDF5)"" OFF); option(ENABLE_dkh ""Enables DKH integrals (requires Fortran)"" OFF); option(ENABLE_libefp ""Enables LIBEFP and PylibEFP for fragments"" OFF); option(ENABLE_erd ""Enables use of ERD instead of Libint (requires Fortran)"" OFF); option(ENABLE_simint ""Enables use of SIMINT two-electron integral library"" OFF); option(ENABLE_gdma ""Enables Stone's GDMA multipole code (requires Fortran)"" OFF); option(ENABLE_PCMSolver ""Enables PCMSolver library (requires Fortran)"" OFF); option(ENABLE_snsmp2 ""Enables SNSMP2 plugin (can also be added at runtime)"" OFF); option(ENABLE_v2rdm_casscf ""Enables V2RDM_CASSCF plugin (requires Fortran; can also be added at runtime)"" OFF); option(ENABLE_gpu_dfcc ""Enables GPU_DFCC plugin for gpu-accelerated df-cc (requires CUDA; can also be added at runtime)"" OFF); # These options are relevant to pasture, expert only; option(ENABLE_ccsort ""Enables ccsort plugin installed from psi4pasture"" OFF); option(ENABLE_transqt2 ""Enables transqt2 plugin installed from psi4pasture"" OFF). # Append modules added to pasture as needed; if(ENABLE_ccsort OR ENABLE_transqt2); set(ENABLE_pasture ON); message(STATUS ""Enabling pasture plugins""); endif(). if(ENABLE_gdma OR ENABLE_dkh OR ENABLE_erd OR ENABLE_PCMSolver); enable_language(Fortran); set(Fortran_ENABLED ON) # communicate required languages with psi4-core; message(STATUS ""Enabling Fortran""); endif(). if(ENABLE_erd); message(FAT",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/build_planning-1.html:14986,install,installed,14986,psi4manual/1.3.2/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/build_planning-1.html,4,['install'],['installed']
Deployability,"word. The default setting fisapt_link_assignment c assigns the entire pair to the linker C together with; a +1 nuclear charge from the connecting atoms of A/B to preserve the electrical neutrality of each fragment.; However, as already noticed in [Parrish:2015:051103], such a partitioning might result in unphysical dipole; moments at the interfragment boundaries. Imagine, for example, that I-SAPT is used to examine the interaction; of two methyl groups connected by some linker fragment. When the linking bonds are assigned to C, the carbon atoms; of the methyl groups are missing electrons on one of their sp^3 hybrid orbitals and a dipole moment appears.; These dipole moments have been observed to lead, in some cases, to I-SAPT energy contributions that do not make; physical sense, for example, to a strongly repulsive electrostatic energy between two fragments connected by an; intramolecular hydrogen bond.; To overcome this issue, Luu and Patkowski proposed a reassignment of the linking electron pairs so that each fragment; (C and A/B) gets one electron [Luu:2023:356]. This electron is placed on a hybrid orbital of the connecting atom; pointing in the direction of the interfragment bond. Several schemes for determining this link hybrid were proposed; in [Luu:2023:356] and they all are implemented in PSI4. We recommend the so-called SIAO1 scheme,; fisapt_link_assignment siao1, as it has been observed to provide consistently meaningful I-SAPT terms and a; smooth basis set convergence. The SIAO1 name implies that the projection to construct the link hybrids happens in the; intrinsic atomic orbital space (as opposed to the SAO1 method where the standard atomic orbital space is used), with; one iteration of fragment orbital optimization and link orbital orthogonalization, a process that very quickly; achieves self-consistency. Altogether, the allowed values for FISAPT_LINK_ASSIGNMENT are c (default),; ab (the opposite of c where the entire linking pair is assigned to A/B),",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/fisapt.html:14199,A/B,A/B,14199,psi4manual/1.8.x/fisapt.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/fisapt.html,3,['A/B'],['A/B']
Deployability,"wrapper:; energy('gaussian-2'). Supported methods¶; The various methods supported by the FNOCC module in PSI4 are detailed; in Table FNOCC Methods. Note that these methods; are implemented for closed-shell references only. For open-shell references,; the calls energy('mp2.5'), energy('mp3'), and energy('mp4') will; default to the DETCI implementations of these methods. name; calls method. qcisd; quadratic configuration interaction singles doubles. qcisd(t); qcisd with perturbative triples. mp2.5; average of second- and third-order perturbation theories. mp3; third-order perturbation theory. mp4(sdq); fourth-order perturbation theory, minus triples contribution. mp4; full fourth-order perturbation theory. cepa(0); coupled electron pair approximation, variant 0. cepa(1); coupled electron pair approximation, variant 1. cepa(3); coupled electron pair approximation, variant 3. acpf; averaged coupled-pair functional. aqcc; averaged quadratic coupled-cluster. sdci; configuration interaction with single and double excitations. dci; configuration interaction with double excitations. fno-qcisd; qcisd with frozen natural orbitals. fno-qcisd(t); qcisd(t) with frozen natural orbitals. fno-ccsd; coupled cluster singles doubles with frozen natural orbitals. fno-ccsd(t); ccsd with perturbative triples and frozen natural orbitals. fno-mp3; mp3 with frozen natural orbitals. fno-mp4(sdq); mp4(sdq) with frozen natural orbitals. fno-mp4; mp4 with frozen natural orbitals. fno-cepa(0); cepa(0) with frozen natural orbitals. fno-cepa(1); cepa(1) with frozen natural orbitals. fno-cepa(3); cepa(3) with frozen natural orbitals. fno-acpf; acpf with frozen natural orbitals. fno-aqcc; aqcc with frozen natural orbitals. fno-sdci; sdci with frozen natural orbitals. fno-dci; dci with frozen natural orbitals. df-ccsd; ccsd with density fitting. df-ccsd(t); ccsd(t) with density fitting. fno-df-ccsd; ccsd with density fitting and frozen natural orbitals. fno-df-ccsd(t); ccsd(t) with density fitting and",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/fnocc-1.html:10433,configurat,configuration,10433,psi4manual/4.0b4/fnocc-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/fnocc-1.html,4,['configurat'],['configuration']
Deployability,"write coefficient matrices to external files for direct reading MOs in a subsequent job?. Type: boolean; Default: false. MP2_OS_SCALE¶. MP2 opposite-spin scaling value. Type: double; Default: 6.0/5.0. MP2_SS_SCALE¶. MP2 same-spin scaling value. Type: double; Default: 1.0/3.0. NAT_ORBS¶. Do compute natural orbitals?. Type: boolean; Default: false. OMP2_ORBS_PRINT¶. Do print OMP2 orbital energies?. Type: boolean; Default: false. OPT_METHOD¶. The optimization algorithm. Type: string; Possible Values: MSD, DIIS; Default: MSD. ORTH_TYPE¶. The algorithm for orthogonalization of MOs. Type: string; Possible Values: GS, MGS; Default: MGS. RMS_MOGRAD_CONVERGENCE¶. Convergence criterion for RMS orbital gradient. Type: conv double; Default: 1e-5. R_CONVERGENCE¶. Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-5. SCS_TYPE¶. Type of the SCS method. Type: string; Possible Values: SCS, SCSN, SCSVDW, SCSMI; Default: SCS. SOS_SCALE¶. Spin-opposite scaling (SOS) value for SCF orbitals. Type: double; Default: 1.3. SOS_SCALE2¶. Spin-opposite scaling (SOS) value for optimized-MP2 orbitals. Type: double; Default: 1.2. SOS_TYPE¶. Type of the SOS method. Type: string; Possible Values: SOS, SOSPI; Default: SOS. Table Of Contents. OMP2; General; CACHELEVEL; CC_MAXITER; CUTOFF; DIIS_MAX_VECS; DO_LEVEL_SHIFT; DO_SCS; DO_SOS; E_CONVERGENCE; HESS_TYPE; LEVEL_SHIFT; LINEQ_SOLVER; MAX_MOGRAD_CONVERGENCE; MO_MAXITER; MO_READ; MO_STEP_MAX; MO_WRITE; MP2_OS_SCALE; MP2_SS_SCALE; NAT_ORBS; OMP2_ORBS_PRINT; OPT_METHOD; ORTH_TYPE; RMS_MOGRAD_CONVERGENCE; R_CONVERGENCE; SCS_TYPE; SOS_SCALE; SOS_SCALE2; SOS_TYPE. Previous topic; MRCC_RESTART; Next topic; CACHELEVEL; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Appendices »; Keywords by Module ». © Copyright 2012, The Psi4 Project.; Last updated on Oct 16, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/autodir_options_c/module__omp2-1.html:4431,update,updated,4431,psi4manual/4.0b3/autodir_options_c/module__omp2-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodir_options_c/module__omp2-1.html,2,['update'],['updated']
Deployability,"write('// ***********************************************\n'); fh.write('#macro check_shadow()\n'); fh.write(' #if (!Shadows)\n'); fh.write(' no_shadow \n'); fh.write(' #end\n'); fh.write('#end\n'); fh.write('\n'); fh.write('#macro translucentFinish(T)\n'); fh.write(' #local shineFactor = T;\n'); fh.write(' #if (T <= 0.25)\n'); fh.write(' #declare shineFactor = (1.0-4*T);\n'); fh.write(' #end\n'); fh.write(' #if (T > 0.25)\n'); fh.write(' #declare shineFactor = 0;\n'); fh.write(' #end\n'); fh.write(' finish {\n'); fh.write(' ambient 0.45\n'); fh.write(' diffuse 0.84\n'); fh.write(' specular 0.22\n'); fh.write(' roughness .00001\n'); fh.write(' metallic shineFactor\n'); fh.write(' phong 0.9*shineFactor\n'); fh.write(' phong_size 120*shineFactor\n'); fh.write('}#end\n'); fh.write('\n'); fh.write('#macro a(X,Y,Z,RADIUS,R,G,B,T)\n'); fh.write(' sphere{<X,Y,Z>,RADIUS\n'); fh.write(' pigment{rgbt<R,G,B,T>}\n'); fh.write(' translucentFinish(T)\n'); fh.write(' check_shadow()}\n'); fh.write('#end\n'); fh.write('\n'); fh.write('#macro b(X1,Y1,Z1,RADIUS1,X2,Y2,Z2,RADIUS2,R,G,B,T)\n'); fh.write(' cone{<X1,Y1,Z1>,RADIUS1,<X2,Y2,Z2>,RADIUS2\n'); fh.write(' pigment{rgbt<R,G,B,T>}\n'); fh.write(' translucentFinish(T)\n'); fh.write(' check_shadow()}\n'); fh.write('#end \n'). for bond in self.bonds:; fh.write('b(%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s)\n' %; (str(bond[0]),str(bond[1]),str(bond[2]),str(bond[3]),; str(bond[4]),str(bond[5]),str(bond[6]),str(bond[7]),; str(bond[8]),str(bond[9]),str(bond[10]),str(bond[11]))); for atom in self.atoms:; fh.write('a(%s,%s,%s,%s,%s,%s,%s,%s)\n' %; (str(atom[1]),str(atom[2]),str(atom[3]),str(atom[4]),; str(atom[5]),str(atom[6]),str(atom[7]),str(atom[8]))). fh.close(). # yapf: enable. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .  · ; 1.10a1.dev61;  · . PSI4. Module code; psi4.driver.p4util.inpsight. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/_modules/psi4/driver/p4util/inpsight.html:20228,update,updated,20228,psi4manual/master/_modules/psi4/driver/p4util/inpsight.html,https://psicode.org,https://psicode.org/psi4manual/master/_modules/psi4/driver/p4util/inpsight.html,1,['update'],['updated']
Deployability,"x for the operation on Cartesians. operate(self: psi4.core.SymmetryOperation, arg0: psi4.core.SymmetryOperation) → psi4.core.SymmetryOperation¶; Performs the operation arg2 * arg1. rotate_n(self: psi4.core.SymmetryOperation, arg0: int) → None¶; Set equal to a clockwise rotation by 2pi/n. rotate_theta(self: psi4.core.SymmetryOperation, arg0: float) → None¶; Set equal to a clockwise rotation by theta. sigma_xy(self: psi4.core.SymmetryOperation) → None¶; Set equal to reflection in xy plane. sigma_xz(self: psi4.core.SymmetryOperation) → None¶; Set equal to reflection in xz plane. sigma_yz(self: psi4.core.SymmetryOperation) → None¶; Set equal to reflection in yz plane. trace(self: psi4.core.SymmetryOperation) → float¶; Returns trace of transformation matrix. transform(self: psi4.core.SymmetryOperation, arg0: psi4.core.SymmetryOperation) → psi4.core.SymmetryOperation¶; Performs the transform arg2 * arg1 * arg2~. transpose(self: psi4.core.SymmetryOperation) → None¶; Performs transposition of matrix operation. unit(self: psi4.core.SymmetryOperation) → None¶; Set equal to a unit matrix. zero(self: psi4.core.SymmetryOperation) → None¶; Zero out the symmetry operation. table of contents. SymmetryOperation; SymmetryOperation; SymmetryOperation.E(); SymmetryOperation.c2_x(); SymmetryOperation.c2_y(); SymmetryOperation.c2_z(); SymmetryOperation.i(); SymmetryOperation.matrix(); SymmetryOperation.operate(); SymmetryOperation.rotate_n(); SymmetryOperation.rotate_theta(); SymmetryOperation.sigma_xy(); SymmetryOperation.sigma_xz(); SymmetryOperation.sigma_yz(); SymmetryOperation.trace(); SymmetryOperation.transform(); SymmetryOperation.transpose(); SymmetryOperation.unit(); SymmetryOperation.zero(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. PSI4 API: Linking C++ and Python; SymmetryOperation. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/api/psi4.core.SymmetryOperation.html:3697,update,updated,3697,psi4manual/master/api/psi4.core.SymmetryOperation.html,https://psicode.org,https://psicode.org/psi4manual/master/api/psi4.core.SymmetryOperation.html,1,['update'],['updated']
Deployability,"x input. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. cc33; CC3(UHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). pywrap-freq-e-sowreap; Finite difference of energies frequency, run in sow/reap mode. cc51; EOM-CC3/cc-pVTZ on H2O. opt12; SCF cc-pVDZ geometry optimzation of ketene, starting from bent structure. molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc5; RHF CCSD(T) aug-cc-pvtz frozen-core energy of C4NH4 Anion. mints8; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. psimrcc-fd-freq2; Mk-MRCCSD frequencies. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. cepa0-grad2; CEPA cc-pVDZ gradient for the NO radical. tu6-cp-ne2; Example potential energy surface scan and CP-correction for Ne2. sapt7; SAPT0 open-shell computation of H2O-HO2 interaction energy First with cc-pVDZ and density fitted integrals with UHF Then with 6-31g and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with UHF. scf-bs; UHF and broken-symmetry UHF energy for molecular hydrogen. fci-tdm; He2+ FCI/cc-pVDZ Transition Dipole Moment. omp2p5-grad2; OMP2.5 cc-pVDZ gradient for the NO radical. fci-h2o-fzcv; 6-31G H2O Test FCI Energy Point. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Test Suite and Sample Inputs. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:35355,update,updated,35355,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,2,['update'],['updated']
Deployability,"x([xvals2,xvals4]); minR = np.min([xvals2,xvals4]). # Find ranges for the plot; dE = maxE - minE; minE -= 0.2*dE; maxE += 0.4*dE; dR = maxR - minR; minR -= 0.2*dR; maxR += 0.2*dR. # Generate the fitted PES; xpts = np.linspace(minR, maxR, 1000); xrel = xpts-re; xpows = xrel[:,np.newaxis] ** range(5); fit2 = np.einsum('xd,d', xpows[:,0:3], dvals[0:3]); fit4 = np.einsum('xd,d', xpows, dvals). # Make / display the plot; plt.plot(xpts, fit2, 'b', linewidth=2.5, label='Harmonic (quadratic) fit'); plt.plot(xpts, fit4, 'g', linewidth=2.5, label='Anharmonic (quartic) fit'); plt.plot([re, re], [minE, maxE], 'b--', linewidth=0.5); plt.plot([r0, r0], [minE, maxE], 'g--', linewidth=0.5); plt.scatter(rvals, energies, c='Black', linewidth=3, label='Input Data'); plt.legend(). plt.xlabel('Bond length (Angstroms)'); plt.ylabel('Energy (Eh)'); plt.xlim(minR, maxR); plt.ylim(minE, maxE); if plot_fit == 'screen':; plt.show(); else:; plt.savefig(plot_fit); core.print_out(""\n\tPES fit saved to %s.\n\n"" % plot_fit). except ImportError:; msg = ""\n\tPlot not generated; matplotlib is not installed on this machine.\n\n""; print(msg); core.print_out(msg); core.print_out(""\nre = %10.6f A check: %10.6f\n"" % (re, recheck)); core.print_out(""r0 = %10.6f A\n"" % r0); core.print_out(""we = %10.4f cm-1\n"" % we); core.print_out(""wexe = %10.4f cm-1\n"" % wexe); core.print_out(""nu = %10.4f cm-1\n"" % nu); core.print_out(""ZPVE(nu) = %10.4f cm-1\n"" % zpve_nu); core.print_out(""Be = %10.4f cm-1\n"" % B); core.print_out(""B0 = %10.4f cm-1\n"" % B0); core.print_out(""ae = %10.4f cm-1\n"" % ae); core.print_out(""De = %10.7f cm-1\n"" % de); results = {; ""re"" : re,; ""r0"" : r0,; ""we"" : we,; ""wexe"" : wexe,; ""nu"" : nu,; ""ZPVE(harmonic)"" : zpve_nu,; ""ZPVE(anharmonic)"" : zpve_nu,; ""Be"" : B,; ""B0"" : B0,; ""ae"" : ae,; ""De"" : de; }; return results. Navigation. Index. modules    .    .  · ; 1.1;  · . PSI4. Module code. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/diatomic.html:8656,install,installed,8656,psi4manual/1.1.0/_modules/psi4/driver/diatomic.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/diatomic.html,2,"['install', 'update']","['installed', 'updated']"
Deployability,"x5 + x7))/(-x4 + x7))/(-x3 + x7)) + ; (-((-((-((-y4 + y5)/(-x4 + x5)) + (-y5 + y6)/(-x5 + x6))/; (-x4 + x6)) + ; (-((-y5 + y6)/(-x5 + x6)) + (-y6 + y7)/(-x6 + x7))/; (-x5 + x7))/(-x4 + x7)) + ; (-((-((-y5 + y6)/(-x5 + x6)) + (-y6 + y7)/(-x6 + x7))/; (-x5 + x7)) + ; (-((-y6 + y7)/(-x6 + x7)) + (-y7 + y8)/(-x7 + x8))/; (-x6 + x8))/(-x5 + x8))/(-x4 + x8))/(-x3 + x8))/(-x2 + x8); ) + (-((-((-((-((-((-y3 + y4)/(-x3 + x4)) + ; (-y4 + y5)/(-x4 + x5))/(-x3 + x5)) + ; (-((-y4 + y5)/(-x4 + x5)) + (-y5 + y6)/(-x5 + x6))/; (-x4 + x6))/(-x3 + x6)) + ; (-((-((-y4 + y5)/(-x4 + x5)) + (-y5 + y6)/(-x5 + x6))/; (-x4 + x6)) + ; (-((-y5 + y6)/(-x5 + x6)) + (-y6 + y7)/(-x6 + x7))/; (-x5 + x7))/(-x4 + x7))/(-x3 + x7)) + ; (-((-((-((-y4 + y5)/(-x4 + x5)) + (-y5 + y6)/(-x5 + x6))/; (-x4 + x6)) + ; (-((-y5 + y6)/(-x5 + x6)) + (-y6 + y7)/(-x6 + x7))/; (-x5 + x7))/(-x4 + x7)) + ; (-((-((-y5 + y6)/(-x5 + x6)) + (-y6 + y7)/(-x6 + x7))/; (-x5 + x7)) + ; (-((-y6 + y7)/(-x6 + x7)) + (-y7 + y8)/(-x7 + x8))/; (-x6 + x8))/(-x5 + x8))/(-x4 + x8))/(-x3 + x8)) + ; (-((-((-((-((-y4 + y5)/(-x4 + x5)) + (-y5 + y6)/(-x5 + x6))/; (-x4 + x6)) + ; (-((-y5 + y6)/(-x5 + x6)) + (-y6 + y7)/(-x6 + x7))/; (-x5 + x7))/(-x4 + x7)) + ; (-((-((-y5 + y6)/(-x5 + x6)) + (-y6 + y7)/(-x6 + x7))/; (-x5 + x7)) + ; (-((-y6 + y7)/(-x6 + x7)) + (-y7 + y8)/(-x7 + x8))/; (-x6 + x8))/(-x5 + x8))/(-x4 + x8)) + ; (-((-((-((-y5 + y6)/(-x5 + x6)) + (-y6 + y7)/(-x6 + x7))/; (-x5 + x7)) + ; (-((-y6 + y7)/(-x6 + x7)) + (-y7 + y8)/(-x7 + x8))/; (-x6 + x8))/(-x5 + x8)) + ; (-((-((-y6 + y7)/(-x6 + x7)) + (-y7 + y8)/(-x7 + x8))/; (-x6 + x8)) + ; (-((-y7 + y8)/(-x7 + x8)) + (-y8 + y9)/(-x8 + x9))/; (-x7 + x9))/(-x6 + x9))/(-x5 + x9))/(-x4 + x9))/(-x3 + x9); )/(-x2 + x9)))/(-x1 + x9)))))); return result. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    ; PSI4 [beta3] » ; Module code ». © Copyright 2012, The Psi4 Project.; Last updated on Apr 05, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/_modules/diatomic_fits.html:2045925,update,updated,2045925,psi4manual/4.0b3/_modules/diatomic_fits.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/_modules/diatomic_fits.html,1,['update'],['updated']
Deployability,"x_len):; line = calc[i]. if geom_re.match(line):; c1, c2, c3, c4, c5, c6 = geom_re.match(line).groups(); r1, r2, r3, r4, r5, r6 = geom_re.match(line).groups(); test = compare_strings(r1, c1) and compare_integers(r2, c2) and compare_integers(r3, c3) and compare_values(r4, c4, high_accuracy) and compare_values(r5, c5, high_accuracy) and compare_values(r6, c6, high_accuracy). elif basis_header_re.match(line):; c1, c2, c3 = basis_header_re.match(line).groups(); r1, r2, r3 = basis_header_re.match(ref[i]).groups(); test = compare_strings(r1,c1) and compare_integers(r2,c2) and compare_values(r3,c3,3). elif s1_re.match(line):; c1, c2 = s1_re.match(line).groups(); r1, r2 = s1_re.match(ref[i]).groups(); test = compare_values(r1, c1, high_accuracy) and compare_values(r2, c2, high_accuracy). elif sym_re.match(line):; c = sym_re.match(line).group(1); r = sym_re.match(ref[i]).group(1); test = compare_strings(r, c, f'text line: {line}'). elif energy_re.match(line):; c = energy_re.match(line).group(1); r = energy_re.match(ref[i]).group(1); test = compare_values(r, c, high_accuracy, f'float value: {line}'). elif spin_re.match(line):; c = spin_re.match(line).group(1); r = spin_re.match(ref[i]).group(1); test = compare_strings(r, c, f'text line: {line}'). elif occ_re.match(line):; c = occ_re.match(line).group(1); r = occ_re.match(ref[i]).group(1); test = compare_values(r, c, high_accuracy, f'float value: {line}'). elif s2_re.match(line):; c1, c2 = s2_re.match(line).groups(); r1, r2 = s2_re.match(line).groups(); test = compare_integers(r1, c1, f'int value: {line}') and compare_values(r2, c2, high_accuracy, f'float value: {line}'). else:; test = compare_strings(line, ref[i]). tests.append(test). return compare_integers(True, all(tests), label). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .  · ; 1.6;  · . PSI4. Module code; psi4.driver.p4util.fchk. © Copyright 2022, The Psi4 Project.; Last updated on Thursday, 19 May 2022 08:57PM.; Created using Sphinx 4.5.0.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/p4util/fchk.html:9015,update,updated,9015,psi4manual/1.6.x/_modules/psi4/driver/p4util/fchk.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/p4util/fchk.html,1,['update'],['updated']
Deployability,"xc and activate dependent code. To remove a conda installation, conda remove libxc. Source. Note that PSI4 has forked and slightly modified upstream Libxc from; https://gitlab.com/libxc/libxc to regain functionality. If using PSI4 built from source and you want Libxc built from; from source also,; let the build system fetch and build it and activate dependent code. How to configure Libxc for building Psi4¶; Role and Dependencies. Role — In PSI4, Libxc is a library that provides essential; density functional definitions and compositions.; Downstream Dependencies — PSI4 \(\Leftarrow\) Libxc; Upstream Dependencies — Libxc \(\Leftarrow\) None. CMake Variables. CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For Libxc, set to an installation directory containing include/libxc/xc.h; Libxc_DIR — CMake variable to specify where pre-built Libxc can be found. Set to installation directory containing share/cmake/Libxc/LibxcConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_Libxc — CMake variable to force internal build of Libxc instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_Libxc — CMake variable to force detecting pre-built Libxc and not falling back on internal build. Examples. Build bundled. >>> cmake. Link against pre-built. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/libxc/root. >>> cmake -DLibxc_DIR=/path/to/libxc/configdir. Build bundled despite pre-built being detectable. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/unwanted/libxc/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_Libxc=ON. table of contents. Interface to Libxc by M. A. L. Marques; Installation; How to configure Libxc for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to Libxc by M. A. L. Marques. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/libxc.html:2880,update,updated,2880,psi4manual/master/libxc.html,https://psicode.org,https://psicode.org/psi4manual/master/libxc.html,1,['update'],['updated']
Deployability,"xchange-Correlation Functional; Y; —; 0.300000; 0.157706; —; —; —; Y. WB97X-D3ZEROATM; wB97X-d3zeroatm Hyb-GGA Exchange-Correlation Functional; Y; —; 0.300000; 0.157706; —; —; —; Y. WPBE-D3BJ2B; PBE SR-XC Functional (HJS Model); Y; —; 0.400000; —; —; —; —; Y. WPBE-D3BJATM; PBE SR-XC Functional (HJS Model); Y; —; 0.400000; —; —; —; —; Y. WPBE-D3MBJ2B; PBE SR-XC Functional (HJS Model); Y; —; 0.400000; —; —; —; —; Y. WPBE-D3MBJATM; PBE SR-XC Functional (HJS Model); Y; —; 0.400000; —; —; —; —; Y. WPBE-D3MZERO2B; PBE SR-XC Functional (HJS Model); Y; —; 0.400000; —; —; —; —; Y. WPBE-D3MZEROATM; PBE SR-XC Functional (HJS Model); Y; —; 0.400000; —; —; —; —; Y. WPBE-D3ZERO2B; PBE SR-XC Functional (HJS Model); Y; —; 0.400000; —; —; —; —; Y. WPBE-D3ZEROATM; PBE SR-XC Functional (HJS Model); Y; —; 0.400000; —; —; —; —; Y. X3LYP-D3BJ2B; X3LYP-d3bj2b Hyb-GGA Exchange-Correlation Functional; Y; —; —; 0.218000; —; —; —; Y. X3LYP-D3BJATM; X3LYP-d3bjatm Hyb-GGA Exchange-Correlation Functional; Y; —; —; 0.218000; —; —; —; Y. X3LYP-D3ZERO2B; X3LYP-d3zero2b Hyb-GGA Exchange-Correlation Functional; Y; —; —; 0.218000; —; —; —; Y. X3LYP-D3ZEROATM; X3LYP-d3zeroatm Hyb-GGA Exchange-Correlation Functional; Y; —; —; 0.218000; —; —; —; Y. XLYP-D3BJ2B; XLYP-d3bj2b GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; Y. XLYP-D3BJATM; XLYP-d3bjatm GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; Y. XLYP-D3ZERO2B; XLYP-d3zero2b GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; Y. XLYP-D3ZEROATM; XLYP-d3zeroatm GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; Y. table of contents. DFT Functionals; All Available; GGA; Meta; Long-Range Corrected; Hybrid; Double-Hybrid; SCS Double-Hybrid; Dispersion-Corrected. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; DFT Functionals. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/dft_byfunctional.html:141370,update,updated,141370,psi4manual/master/dft_byfunctional.html,https://psicode.org,https://psicode.org/psi4manual/master/dft_byfunctional.html,1,['update'],['updated']
Deployability,"xecutable after compilation; How to solve ModuleNotFoundError: No module named 'psi4'; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4; How to configure Python for building Psi4; What Python is Psi4 running; How to fix “undefined symbol: _Py_FalseStruct”; How to use gdb and lldb with Psi4; How to see the actual compiling commands (or errors) with cmake; How to highlight git merge conflicts in vi; How to handle “runtime library may be hidden” when building with Anaconda Python; How to set up the scratch directory; How do I retain specific Psi4 scratch files; How to use Psi4 within a PBS queue; How to update and rebuild Psi4; How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation; How to refer to Psi4; How to get a Psi4 logo file; How to use a local Add-On repository in the Psi4 build; How to use logging in Psi4; How to find the Psi4 module from the executable and vice versa. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Installation and Runtime Configuration; Compiling and Installing from Source. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/build_planning.html:63995,update,update,63995,psi4manual/1.7.x/build_planning.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/build_planning.html,3,"['install', 'update']","['installation', 'update', 'updated']"
Deployability,"xible and powerful.; We have tried as much as possible to keep the number of options to; a minimum and to allow all options to be used in the presence of all other; options. Below are some rough words of advice about using the SCF code for; practical calculations:. For GUESS, the SAD guess is usually your; friend, even for open-shell systems (at the very least, it gets the right; number of electrons, unlike some other programs). For instance, we have found; that a simple SAD guess is often as good as doing a full SCF in a 3-21G basis; and then performing a cast-up, at a fraction of the cost. However, SAD and; DOCC/SOCC arrays do not play very well together at the moment.; For wall time, DF may be a factor of ten or more faster than the exact; integral technologies available in PSI4.; Use DF unless you need absolute accuracy or do not; have a -JKFIT auxiliary set for your orbital basis/atom type. Then use; DIRECT.; Don’t mess with the DIIS convergence options unless convergence is a problem.; We have optimized the parameters for efficiency over a wide array of system; types.; Buy a developer a beer!. The “best-practice” input file for HF is:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16memory 1 GB # As much as you've got, the DF algorithm can use. molecule {; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis cc-pvdz; scf_type df; guess sad; ints_tolerance 1.0E-10 # Even this is epically tight, 1.0E-8 is OK; }. energy('scf'). table of contents. HF: Hartree–Fock Theory; Introduction; Theory; Minimal Input; Spin/Symmetry Treatment; Broken Symmetry; Orthogonalization; Initial Guess; Convergence Stabilization; ERI Algorithms; Second-order Convergence; Stability Analysis; External potentials and QM/MM; Convergence and Algorithm Defaults; Recommendations. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Theoretical Methods: SCF to FCI. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/scf-1.html:36954,update,updated,36954,psi4manual/1.1.0/scf-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/scf-1.html,2,['update'],['updated']
Deployability,ximation variant 0 level of theory. CEPA(0) TOTAL ENERGY¶. CEPA(0) CORRELATION ENERGY¶. CEPA(1) TOTAL ENERGY¶. CEPA(1) CORRELATION ENERGY¶. CEPA(2) TOTAL ENERGY¶. CEPA(2) CORRELATION ENERGY¶. CEPA(3) TOTAL ENERGY¶. CEPA(3) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested variant of coupled electron pair approximation level of theory. CFOUR ERROR CODE¶; The non-zero return value from a Cfour execution. CI DIPOLE X¶. CI DIPOLE Y¶. CI DIPOLE Z¶; The three components of the dipole [Debye] for the requested; configuration interaction level of theory and root. CI QUADRUPOLE XX¶. CI QUADRUPOLE XY¶. CI QUADRUPOLE XZ¶. CI QUADRUPOLE YY¶. CI QUADRUPOLE YZ¶. CI QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the requested; configuration interaction level of theory and root. CI ROOT n -> ROOT m DIPOLE X¶. CI ROOT n -> ROOT m DIPOLE Y¶. CI ROOT n -> ROOT m DIPOLE Z¶; The three components of the transition dipole [Debye] between roots n; and m for the requested configuration interaction level of theory. CI ROOT n -> ROOT m QUADRUPOLE XX¶. CI ROOT n -> ROOT m QUADRUPOLE XY¶. CI ROOT n -> ROOT m QUADRUPOLE XZ¶. CI ROOT n -> ROOT m QUADRUPOLE YY¶. CI ROOT n -> ROOT m QUADRUPOLE YZ¶. CI ROOT n -> ROOT m QUADRUPOLE ZZ¶; The three components of the transition quadrupole [Debye Ang] between; roots n and m for the requested configuration interaction level of; theory. CI ROOT n DIPOLE X¶. CI ROOT n DIPOLE Y¶. CI ROOT n DIPOLE Z¶; The three components of the dipole [Debye] for the requested; configuration interaction level of theory and root n. CI ROOT n QUADRUPOLE XX¶. CI ROOT n QUADRUPOLE XY¶. CI ROOT n QUADRUPOLE XZ¶. CI ROOT n QUADRUPOLE YY¶. CI ROOT n QUADRUPOLE YZ¶. CI ROOT n QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the requested; configuration interaction level of theory and root n. CI ROOT n TOTAL ENERGY¶. CI ROOT n CORRELATION ENERGY¶; The total electronic energy [H] and cor,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/glossary_psivariables-1.html:7186,configurat,configuration,7186,psi4manual/1.1.0/glossary_psivariables-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/glossary_psivariables-1.html,8,['configurat'],['configuration']
Deployability,"ximation variant 0 level of theory.; Deprecated in favor of CEPA(0) DIPOLE. CEPA(0) QUADRUPOLE¶; Redundant quadrupole array [e a0^2] for the coupled electron pair approximation variant 0 level of theory, (3, 3). CEPA(0) QUADRUPOLE XX¶. CEPA(0) QUADRUPOLE XY¶. CEPA(0) QUADRUPOLE XZ¶. CEPA(0) QUADRUPOLE YY¶. CEPA(0) QUADRUPOLE YZ¶. CEPA(0) QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the; coupled electron pair approximation variant 0 level of theory.; Deprecated in favor of CEPA(0) QUADRUPOLE. CEPA(0) TOTAL ENERGY¶. CEPA(0) CORRELATION ENERGY¶. CEPA(1) TOTAL ENERGY¶. CEPA(1) CORRELATION ENERGY¶. CEPA(2) TOTAL ENERGY¶. CEPA(2) CORRELATION ENERGY¶. CEPA(3) TOTAL ENERGY¶. CEPA(3) CORRELATION ENERGY¶; The total electronic energy [Eh] and correlation energy component [Eh]; for the requested variant of coupled electron pair approximation level of theory. CFOUR ERROR CODE¶; The non-zero return value from a Cfour execution. CI DIPOLE¶; Dipole array [e a0] for the requested configuration interaction level of theory, (3,). CI DIPOLE X¶. CI DIPOLE Y¶. CI DIPOLE Z¶; The three components of the dipole [Debye] for the requested; configuration interaction level of theory and root.; Deprecated in favor of CI DIPOLE. CI QUADRUPOLE¶; Redundant quadrupole array [e a0^2] for the requested configuration interaction level of theory, (3, 3). CI QUADRUPOLE XX¶. CI QUADRUPOLE XY¶. CI QUADRUPOLE XZ¶. CI QUADRUPOLE YY¶. CI QUADRUPOLE YZ¶. CI QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the requested; configuration interaction level of theory and root.; Deprecated in favor of CI QUADRUPOLE. CI ROOT n -> ROOT m DIPOLE¶; Transition dipole array [e a0] between roots n and m for the requested configuration interaction level of theory, (3,). CI ROOT n -> ROOT m DIPOLE X¶. CI ROOT n -> ROOT m DIPOLE Y¶. CI ROOT n -> ROOT m DIPOLE Z¶; The three components of the transition dipole [Debye] between roots n; and m for the requested configuration interaction le",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/glossary_psivariables-1.html:10309,configurat,configuration,10309,psi4manual/1.4.0/glossary_psivariables-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/glossary_psivariables-1.html,4,['configurat'],['configuration']
Deployability,"ximilian Scheurer; Module: Keywords, PSI Variables. PSI4 contains code to interface to the CPPE library developed; by M. Scheurer.; The CPPE library requires no additional licence, downloads, or; configuration. The library allows for calculations in solution with the; polarizable embedding model (PE), an explicit, fragment-based solvent model [Olsen:2010:3721].; For a general tutorial on how to prepare/perform PE calculations, read the; tutorial review. Installation¶; Binary. CPPE is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell).; If using the PSI4 binary, CPPE has already been installed alongside.; If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; CPPE can be obtained through conda install cppe -c psi4.; Then enable it as a feature with ENABLE_cppe,; hint its location with cppe_DIR,; and rebuild PSI4 to detect CPPE and activate dependent code. To remove a conda installation, conda remove cppe. Source. If using PSI4 built from source and you want CPPE built from; from source also,; enable it as a feature with ENABLE_cppe,; and let the build system fetch and build it and activate dependent code. Using the polarizable embedding model¶; The inclusion of a PE description of the solvent into your calculation; is achieved by setting PE true in your input file. Note; At present, PE can only be used for energy calculations with SCF; wavefunctions and CC wavefunctions in the PTE approximation [Cammi:2009:164104].; All ERI algorithms (PK, OUT_OF_CORE, DIRECT, DF, CD) are supported. Note; linear response calculations (static polarisabilities, TD-SCF) are supported for RHF/UHF if available. Warning; The CPPE library cannot exploit molecular point group symmetry. A typical input for a Hartree–Fock calculation with PE would look like the following:; molecule pna {; C 8.64800 1.07500 -1.71100; C 9.48200 0.43000 -0.80800; C 9.39600 0.75000 0.53800; C 8.48200 1.71200",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/cppe-1.html:1261,install,installation,1261,psi4manual/1.4.0/cppe-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cppe-1.html,9,['install'],['installation']
Deployability,"ximum number of points. set_name(self: psi4.core.SuperFunctional, arg0: str) → None¶; Sets the SuperFunctional name. set_vv10_b(self: psi4.core.SuperFunctional, arg0: float) → None¶; Sets the VV10 b parameter. set_vv10_c(self: psi4.core.SuperFunctional, arg0: float) → None¶; Sets the VV10 c parameter. set_x_alpha(self: psi4.core.SuperFunctional, arg0: float) → None¶; Sets the amount of exact global HF exchange. set_x_beta(self: psi4.core.SuperFunctional, arg0: float) → None¶; Sets how much more long-range exchange than short-range exchange. set_x_omega(self: psi4.core.SuperFunctional, arg0: float) → None¶; Sets the range-seperation exchange parameter. test_functional(self: psi4.core.SuperFunctional, arg0: psi4.core.Vector, arg1: psi4.core.Vector, arg2: psi4.core.Vector, arg3: psi4.core.Vector, arg4: psi4.core.Vector, arg5: psi4.core.Vector, arg6: psi4.core.Vector) → None¶; Quick testing capabilities. value(self: psi4.core.SuperFunctional, arg0: str) → psi4.core.Vector¶; Returns a given internal value. values(self: psi4.core.SuperFunctional) → Dict[str, psi4.core.Vector]¶; Return all internal values. vv10_b(self: psi4.core.SuperFunctional) → float¶; The VV10 b parameter. vv10_c(self: psi4.core.SuperFunctional) → float¶; The VV10 c parameter. x_alpha(self: psi4.core.SuperFunctional) → float¶; Amount of exact HF exchange. x_beta(self: psi4.core.SuperFunctional) → float¶; Amount of exact HF exchange. x_functional(self: psi4.core.SuperFunctional, arg0: str) → psi4.core.Functional¶; Returns the desired X Functional. x_functionals(self: psi4.core.SuperFunctional) → List[psi4.core.Functional]¶; Returns all X Functionals. x_omega(self: psi4.core.SuperFunctional) → float¶; Range-seperated exchange parameter. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. PSI4 API: Linking C++ and Python; SuperFunctional. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/api/psi4.core.superfunctional.html:10589,update,updated,10589,psi4manual/1.4.0/api/psi4.core.superfunctional.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/api/psi4.core.superfunctional.html,1,['update'],['updated']
Deployability,"ximum number of points. set_name(self: psi4.core.SuperFunctional, arg0: str) → None¶; Sets the SuperFunctional name. set_vv10_b(self: psi4.core.SuperFunctional, arg0: float) → None¶; Sets the VV10 b parameter. set_vv10_c(self: psi4.core.SuperFunctional, arg0: float) → None¶; Sets the VV10 c parameter. set_x_alpha(self: psi4.core.SuperFunctional, arg0: float) → None¶; Sets the amount of exact global HF exchange. set_x_beta(self: psi4.core.SuperFunctional, arg0: float) → None¶; Sets how much more long-range exchange than short-range exchange. set_x_omega(self: psi4.core.SuperFunctional, arg0: float) → None¶; Sets the range-seperation exchange parameter. test_functional(self: psi4.core.SuperFunctional, arg0: psi4.core.Vector, arg1: psi4.core.Vector, arg2: psi4.core.Vector, arg3: psi4.core.Vector, arg4: psi4.core.Vector, arg5: psi4.core.Vector, arg6: psi4.core.Vector) → None¶; Quick testing capabilities. value(self: psi4.core.SuperFunctional, arg0: str) → psi4.core.Vector¶; Returns a given internal value. values(self: psi4.core.SuperFunctional) → Dict[str, psi4.core.Vector]¶; Return all internal values. vv10_b(self: psi4.core.SuperFunctional) → float¶; The VV10 b parameter. vv10_c(self: psi4.core.SuperFunctional) → float¶; The VV10 c parameter. x_alpha(self: psi4.core.SuperFunctional) → float¶; Amount of exact HF exchange. x_beta(self: psi4.core.SuperFunctional) → float¶; Amount of exact HF exchange. x_functional(self: psi4.core.SuperFunctional, arg0: str) → psi4.core.Functional¶; Returns the desired X Functional. x_functionals(self: psi4.core.SuperFunctional) → List[psi4.core.Functional]¶; Returns all X Functionals. x_omega(self: psi4.core.SuperFunctional) → float¶; Range-seperated exchange parameter. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. PSI4 API: Linking C++ and Python; SuperFunctional. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/api/psi4.core.superfunctional.html:10594,update,updated,10594,psi4manual/1.5.0/api/psi4.core.superfunctional.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/api/psi4.core.superfunctional.html,1,['update'],['updated']
Deployability,"xtents are set; with the COSX_INTS_TOLERANCE, COSX_DENSITY_TOLERANCE, and; COSX_BASIS_TOLERANCE keywords, respectively. COSX_INTS_TOLERANCE; is the most consequential of the three thresholds in both cost and accuracy.; This keyword determines screening of negligible one-electron integrals.; COSX_DENSITY_TOLERANCE controls the threshold for significant; shell pairs in the density matrix. Lastly, COSX_BASIS_TOLERANCE is; a cutoff for the value of basis functions at grid points. This keyword is; used to determine the radial extent of the each basis shell, and it is the; COSX analogue to DFT_BASIS_TOLERANCE.; The INCFOCK keyword (defaults to false) increases performance; by constructing the Fock matrix from differences in the density matrix, which; are more amenable to screening. This option is disabled by default because of; potential SCF convergence issues, particularly when using diffuse basis functions.; The COSX_OVERLAP_FITTING keyword (defaults to true) reduces numerical; integration errors using the method described in [Izsak:2011:144105] and is; always recommended. Linear Exchange¶; Large SCF calculations can benefit from specialized screening procedures that further reduce the scaling of the ERI contribution to the Fock matrix.; LinK, the linear-scaling exchange method described in [Ochsenfeld:1998:1663], is available in Psi4 in conjunction with composite algorithms that build J (SCF_TYPE set to J_alg+LINK).; LinK achieves linear-scaling by exploiting shell pair sparsity in the density matrix and overlap sparsity between shell pairs. Specifically, LinK exploits the fact that the Exchange term; requires only a linear-scaling number of significant elements through reformulating the; shell quartet screening process to scale linearly with system size.; LinK is most competitive when used with non-diffuse orbital basis sets, since orbital and density overlaps decay slower with diffuse functions.; LinK is especially powerful when combined with density-matrix based ERI ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/scf.html:37626,integrat,integration,37626,psi4manual/1.8.x/scf.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/scf.html,3,['integrat'],['integration']
Deployability,"xtents are set; with the COSX_INTS_TOLERANCE, COSX_DENSITY_TOLERANCE, and; COSX_BASIS_TOLERANCE keywords, respectively. COSX_INTS_TOLERANCE; is the most consequential of the three thresholds in both cost and accuracy.; This keyword determines screening of negligible one-electron integrals.; COSX_DENSITY_TOLERANCE controls the threshold for significant; shell pairs in the density matrix. Lastly, COSX_BASIS_TOLERANCE is; a cutoff for the value of basis functions at grid points. This keyword is; used to determine the radial extent of the each basis shell, and it is the; COSX analogue to DFT_BASIS_TOLERANCE.; The INCFOCK keyword (defaults to false) increases performance; by constructing the Fock matrix from differences in the density matrix, which; are more amenable to screening. This option is disabled by default because of; potential SCF convergence issues, particularly when using diffuse basis functions.; The COSX_OVERLAP_FITTING keyword (defaults to true) reduces numerical; integration errors using the method described in [Izsak:2011:144105] and is; always recommended. Linear Exchange¶; Large SCF calculations can benefit from specialized screening procedures that further reduce the scaling of the ERI contribution to the Fock matrix.; LinK, the linear-scaling exchange method described in [Ochsenfeld:1998:1663], is available in Psi4 in conjunction with integral-direct density fitting for Coulomb construction (SCF_TYPE set to LINK).; LinK achieves linear-scaling by exploiting shell pair sparsity in the density matrix and overlap sparsity between shell pairs. Specifically, LinK exploits the fact that the Exchange term; requires only a linear-scaling number of significant elements through reformulating the; shell quartet screening process to scale linearly with system size.; LinK is most competitive when used with non-diffuse orbital basis sets, since orbital and density overlaps decay slower with diffuse functions.; LinK is especially powerful when combined with density-",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/scf.html:33075,integrat,integration,33075,psi4manual/1.7.x/scf.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/scf.html,1,['integrat'],['integration']
Deployability,"xtrapolation to accelerate convergence for iterative triples excitations?. Type: boolean; Default: false. TRIPLES_IABC_TYPE (DFOCC)¶DFOCC — The algorithm to handle (ia|bc) type integrals that used for (T) correction. Type: string; Possible Values: INCORE, AUTO, DIRECT, DISK; Default: DISK. TRIPLES_LOW_MEMORY (FNOCC)¶FNOCC — Do use low memory option for triples contribution? Note that this option is enabled automatically if the memory requirements of the conventional algorithm would exceed the available resources. The low memory algorithm is faster in general and has been turned on by default starting September 2020. Type: boolean; Default: true. TURN_ON_ACTV (MCSCF)¶MCSCF —. Type: integer; Default: 0. UHF_NOONS (SCF)¶SCF — The number of NOONs to print in a UHF calc. Type: string; Default: 3. UNFREEZE_DIHEDRALS (OPTKING)¶OPTKING — Unfreeze a subset of dihedrals - meant for use with freeze_all_dihedrals. Type: string; Default: No Default. UPDATE (DETCI)¶DETCI — The update or correction vector formula, either DAVIDSON (default) or OLSEN. Type: string; Possible Values: DAVIDSON, OLSEN; Default: DAVIDSON. USE_DF_INTS (FNOCC)¶FNOCC (Expert) — Use 3-index integrals to generate 4-index ERI’s? This keyword is used for testing purposes only. Changing its value will have no effect on the computation. Type: boolean; Default: false. USE_SPIN_SYM (PSIMRCC)¶PSIMRCC — Do use symmetry to map equivalent determinants onto each other, for efficiency?. Type: boolean; Default: true. USE_SPIN_SYMMETRY (PSIMRCC)¶PSIMRCC (Expert) — Whether to use spin symmetry to map equivalent configurations onto each other, for efficiency. Type: boolean; Default: true. VAL_EX_LEVEL (DETCI)¶DETCI — In a RAS CI, this is the additional excitation level for allowing electrons out of RAS I into RAS II. The maximum number of holes in RAS I is therefore EX_LEVEL + VAL_EX_LEVEL. Type: integer; Default: 0. VECS_CC3 (CCEOM)¶CCEOM — Vectors stored in CC3 computations. Type: integer; Default: 10. VECS_PER_ROOT (CCEOM",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:242261,update,update,242261,psi4manual/master/autodoc_glossary_options_c.html,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html,1,['update'],['update']
Deployability,"xvals4]). # Find ranges for the plot; dE = maxE - minE; minE -= 0.2*dE; maxE += 0.4*dE; dR = maxR - minR; minR -= 0.2*dR; maxR += 0.2*dR. # Generate the fitted PES; xpts = np.linspace(minR, maxR, 1000); xrel = xpts - re; xpows = xrel[:, None] ** range(5); fit2 = np.einsum('xd,d', xpows[:,0:3], dvals[0:3]); fit4 = np.einsum('xd,d', xpows, dvals). # Make / display the plot; plt.plot(xpts, fit2, 'b', linewidth=2.5, label='Harmonic (quadratic) fit'); plt.plot(xpts, fit4, 'g', linewidth=2.5, label='Anharmonic (quartic) fit'); plt.plot([re, re], [minE, maxE], 'b--', linewidth=0.5); plt.plot([r0, r0], [minE, maxE], 'g--', linewidth=0.5); plt.scatter(rvals, energies, c='Black', linewidth=3, label='Input Data'); plt.legend(). plt.xlabel('Bond length (Angstroms)'); plt.ylabel('Energy (Eh)'); plt.xlim(minR, maxR); plt.ylim(minE, maxE); if plot_fit == 'screen':; plt.show(); else:; plt.savefig(plot_fit); core.print_out(""\n\tPES fit saved to %s.\n\n"" % plot_fit). core.print_out(""\nre = %10.6f A check: %10.6f\n"" % (re, recheck)); core.print_out(""r0 = %10.6f A\n"" % r0); core.print_out(""E at re = %17.10f Eh\n"" % e); core.print_out(""we = %10.4f cm-1\n"" % we); core.print_out(""wexe = %10.4f cm-1\n"" % wexe); core.print_out(""nu = %10.4f cm-1\n"" % nu); core.print_out(""ZPVE(we) = %10.4f cm-1\n"" % zpve_we); core.print_out(""ZPVE(nu) = %10.4f cm-1\n"" % zpve_nu); core.print_out(""Be = %10.4f cm-1\n"" % B); core.print_out(""B0 = %10.4f cm-1\n"" % B0); core.print_out(""ae = %10.4f cm-1\n"" % ae); core.print_out(""De = %10.7f cm-1\n"" % de); results = {; ""re"" : re,; ""r0"" : r0,; ""we"" : we,; ""wexe"" : wexe,; ""nu"" : nu,; ""E(re)"" : e,; ""ZPVE(harmonic)"" : zpve_we,; ""ZPVE(anharmonic)"" : zpve_nu,; ""Be"" : B,; ""B0"" : B0,; ""ae"" : ae,; ""De"" : de; }; return results. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .  · ; 1.8.2;  · . PSI4. Module code; psi4.driver.diatomic. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:04AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/diatomic.html:10302,update,updated,10302,psi4manual/1.8.x/_modules/psi4/driver/diatomic.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/diatomic.html,1,['update'],['updated']
Deployability,"xvals4]). # Find ranges for the plot; dE = maxE - minE; minE -= 0.2*dE; maxE += 0.4*dE; dR = maxR - minR; minR -= 0.2*dR; maxR += 0.2*dR. # Generate the fitted PES; xpts = np.linspace(minR, maxR, 1000); xrel = xpts - re; xpows = xrel[:, None] ** range(5); fit2 = np.einsum('xd,d', xpows[:,0:3], dvals[0:3]); fit4 = np.einsum('xd,d', xpows, dvals). # Make / display the plot; plt.plot(xpts, fit2, 'b', linewidth=2.5, label='Harmonic (quadratic) fit'); plt.plot(xpts, fit4, 'g', linewidth=2.5, label='Anharmonic (quartic) fit'); plt.plot([re, re], [minE, maxE], 'b--', linewidth=0.5); plt.plot([r0, r0], [minE, maxE], 'g--', linewidth=0.5); plt.scatter(rvals, energies, c='Black', linewidth=3, label='Input Data'); plt.legend(). plt.xlabel('Bond length (Angstroms)'); plt.ylabel('Energy (Eh)'); plt.xlim(minR, maxR); plt.ylim(minE, maxE); if plot_fit == 'screen':; plt.show(); else:; plt.savefig(plot_fit); core.print_out(""\n\tPES fit saved to %s.\n\n"" % plot_fit). core.print_out(""\nre = %10.6f A check: %10.6f\n"" % (re, recheck)); core.print_out(""r0 = %10.6f A\n"" % r0); core.print_out(""E at re = %17.10f Eh\n"" % e); core.print_out(""we = %10.4f cm-1\n"" % we); core.print_out(""wexe = %10.4f cm-1\n"" % wexe); core.print_out(""nu = %10.4f cm-1\n"" % nu); core.print_out(""ZPVE(we) = %10.4f cm-1\n"" % zpve_we); core.print_out(""ZPVE(nu) = %10.4f cm-1\n"" % zpve_nu); core.print_out(""Be = %10.4f cm-1\n"" % B); core.print_out(""B0 = %10.4f cm-1\n"" % B0); core.print_out(""ae = %10.4f cm-1\n"" % ae); core.print_out(""De = %10.7f cm-1\n"" % de); results = {; ""re"" : re,; ""r0"" : r0,; ""we"" : we,; ""wexe"" : wexe,; ""nu"" : nu,; ""E(re)"" : e,; ""ZPVE(harmonic)"" : zpve_we,; ""ZPVE(anharmonic)"" : zpve_nu,; ""Be"" : B,; ""B0"" : B0,; ""ae"" : ae,; ""De"" : de; }; return results. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .  · ; 1.9.1;  · . PSI4. Module code; psi4.driver.diatomic. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 08 February 2024 09:32PM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/_modules/psi4/driver/diatomic.html:10281,update,updated,10281,psi4manual/1.9.x/_modules/psi4/driver/diatomic.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/_modules/psi4/driver/diatomic.html,1,['update'],['updated']
Deployability,"y AO to auxiliary AO space. Methods Documentation. R_A(self: psi4.core.FDDS_Dispersion) → psi4.core.Matrix¶; Obtains (R^t)^-1 for monomer A. R_B(self: psi4.core.FDDS_Dispersion) → psi4.core.Matrix¶; Obtains (R^t)^-1 for monomer B. aux_overlap(self: psi4.core.FDDS_Dispersion) → psi4.core.Matrix¶; Obtains the FDDS aux_overlap. form_aux_matrices(self: psi4.core.FDDS_Dispersion, arg0: str, arg1: float) → Dict[str, psi4.core.Matrix]¶; Forms the uncoupled amplitudes and other matrices for either monomer. form_unc_amplitude(self: psi4.core.FDDS_Dispersion, arg0: str, arg1: float) → psi4.core.Matrix¶; Forms the uncoupled amplitudes for either monomer. get_tensor_pqQ(self: psi4.core.FDDS_Dispersion, arg0: str, arg1: Tuple[int, int, int]) → psi4.core.Matrix¶; Debug only: fetches 3-index intermediate from disk and return as matrix. metric(self: psi4.core.FDDS_Dispersion) → psi4.core.Matrix¶; Obtains the FDDS metric. metric_inv(self: psi4.core.FDDS_Dispersion) → psi4.core.Matrix¶; Obtains the FDDS metric_inv. print_tensor_pqQ(self: psi4.core.FDDS_Dispersion, arg0: str, arg1: str, arg2: Tuple[int, int, int]) → None¶; Debug only: prints formatted 3-index intermediate to file. project_densities(self: psi4.core.FDDS_Dispersion, arg0: List[psi4.core.Matrix]) → List[psi4.core.Matrix]¶; Projects a density from the primary AO to auxiliary AO space. table of contents. FDDS_Dispersion; FDDS_Dispersion; FDDS_Dispersion.R_A(); FDDS_Dispersion.R_B(); FDDS_Dispersion.aux_overlap(); FDDS_Dispersion.form_aux_matrices(); FDDS_Dispersion.form_unc_amplitude(); FDDS_Dispersion.get_tensor_pqQ(); FDDS_Dispersion.metric(); FDDS_Dispersion.metric_inv(); FDDS_Dispersion.print_tensor_pqQ(); FDDS_Dispersion.project_densities(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; FDDS_Dispersion. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/api/psi4.core.FDDS_Dispersion.html:2856,update,updated,2856,psi4manual/1.8.x/api/psi4.core.FDDS_Dispersion.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.FDDS_Dispersion.html,1,['update'],['updated']
Deployability,"y AO to auxiliary AO space. Methods Documentation. R_A(self: psi4.core.FDDS_Dispersion) → psi4.core.Matrix¶; Obtains (R^t)^-1 for monomer A. R_B(self: psi4.core.FDDS_Dispersion) → psi4.core.Matrix¶; Obtains (R^t)^-1 for monomer B. aux_overlap(self: psi4.core.FDDS_Dispersion) → psi4.core.Matrix¶; Obtains the FDDS aux_overlap. form_aux_matrices(self: psi4.core.FDDS_Dispersion, arg0: str, arg1: float) → Dict[str, psi4.core.Matrix]¶; Forms the uncoupled amplitudes and other matrices for either monomer. form_unc_amplitude(self: psi4.core.FDDS_Dispersion, arg0: str, arg1: float) → psi4.core.Matrix¶; Forms the uncoupled amplitudes for either monomer. get_tensor_pqQ(self: psi4.core.FDDS_Dispersion, arg0: str, arg1: Tuple[int, int, int]) → psi4.core.Matrix¶; Debug only: fetches 3-index intermediate from disk and return as matrix. metric(self: psi4.core.FDDS_Dispersion) → psi4.core.Matrix¶; Obtains the FDDS metric. metric_inv(self: psi4.core.FDDS_Dispersion) → psi4.core.Matrix¶; Obtains the FDDS metric_inv. print_tensor_pqQ(self: psi4.core.FDDS_Dispersion, arg0: str, arg1: str, arg2: Tuple[int, int, int]) → None¶; Debug only: prints formatted 3-index intermediate to file. project_densities(self: psi4.core.FDDS_Dispersion, arg0: List[psi4.core.Matrix]) → List[psi4.core.Matrix]¶; Projects a density from the primary AO to auxiliary AO space. table of contents. FDDS_Dispersion; FDDS_Dispersion; FDDS_Dispersion.R_A(); FDDS_Dispersion.R_B(); FDDS_Dispersion.aux_overlap(); FDDS_Dispersion.form_aux_matrices(); FDDS_Dispersion.form_unc_amplitude(); FDDS_Dispersion.get_tensor_pqQ(); FDDS_Dispersion.metric(); FDDS_Dispersion.metric_inv(); FDDS_Dispersion.print_tensor_pqQ(); FDDS_Dispersion.project_densities(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.9.1;  · . PSI4. PSI4 API: Linking C++ and Python; FDDS_Dispersion. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 08 February 2024 09:32PM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/api/psi4.core.FDDS_Dispersion.html:2856,update,updated,2856,psi4manual/1.9.x/api/psi4.core.FDDS_Dispersion.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/api/psi4.core.FDDS_Dispersion.html,1,['update'],['updated']
Deployability,"y M. F. Herbst and M. Scheurer; Installation; Keywords for adcc; How to configure adcc for building Psi4. Interface to the BrianQC GPU module by the BrianQC team; Installing BrianQC; Building BrianQC’s user-built components; Building PSI4 with BrianQC; Using BrianQC from PSI4; Keywords; Environment Variables. Interface to CFOUR by J. Stanton & J. Gauss; Installation; Cfour for PSI4 Users; PSI4 for Cfour Users; Output; Functionality; Specification Details; Misc. Running. Interface to CheMPS2 by S. Wouters; Installation; Methods; DMRG Keywords; How to configure CheMPS2 for building Psi4; How to fix “plugin needed to handle lto object” when building CheMPS2. Interface to CPPE by M. Scheurer; Installation; Using the polarizable embedding model; Keywords for CPPE; How to configure CPPE for building Psi4. Interface to ddx by A. Mikhalev, A. Jha, M. Nottoli and M. F. Herbst; Installation; Using dd-based continum solvation models; Solvent model and solvent cavity definition; Numerical integration and discretisation parameters; Iterative solver parameters; Further keywords for ddx; How to configure ddx for building Psi4. Interface to DFTD3 by S. Grimme; Empirical Dispersion Implementations; Installation; Theory; Running DFTD3 or DFTD4; Three-Body Dispersion Corrections. Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess; Installation; Input; Keywords; Reference; How to configure dkh for building Psi4. Interface to LibECPInt by R. Shaw; Installation; How to configure LibECPInt for building Psi4. Interface to LIBEFP by I. Kaliman; Installation; EFP Fragments; Molecule Specification; Running EFP; Fragment Library; How to configure libefp for building Psi4. Interface to ERD by N. Flocke and V. Lotrich; Installation; How to configure erd for building Psi4. Interface to programs through FCHK files — fchk(); Psi4FockCI: A General Fock-Space CI For Spin-Flip And IP/EA; Installation; Sample Input. Interface to gau2grid by D. G. A. Smith; Installation; How to configure gau2gridfor ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/interfacing.html:1524,integrat,integration,1524,psi4manual/1.7.x/interfacing.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/interfacing.html,3,['integrat'],['integration']
Deployability,"y M. F. Herbst and M. Scheurer; Installation; Keywords for adcc; How to configure adcc for building Psi4. Interface to the BrianQC GPU module by the BrianQC team; Installing BrianQC; Building BrianQC’s user-built components; Building PSI4 with BrianQC; Using BrianQC from PSI4; Keywords; Environment Variables. Interface to CFOUR by J. Stanton & J. Gauss; Installation; Cfour for PSI4 Users; PSI4 for Cfour Users; Output; Functionality; Specification Details; Misc. Running. Interface to CheMPS2 by S. Wouters; Installation; Methods; DMRG Keywords; How to configure CheMPS2 for building Psi4; How to fix “plugin needed to handle lto object” when building CheMPS2. Interface to CPPE by M. Scheurer; Installation; Using the polarizable embedding model; Keywords for CPPE; How to configure CPPE for building Psi4. Interface to ddx by A. Mikhalev, A. Jha, M. Nottoli and M. F. Herbst; Installation; Using dd-based continum solvation models; Solvent model and solvent cavity definition; Numerical integration and discretisation parameters; Iterative solver parameters; Further keywords for ddx; How to configure ddx for building Psi4. Interface to DFTD3 by S. Grimme; Empirical Dispersion Implementations; Installation; Theory; Running DFTD3 or DFTD4; Three-Body Dispersion Corrections. Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess; Installation; Input; Keywords; Reference; How to configure dkh for building Psi4. Interface to LibECPInt by R. Shaw; Installation; How to configure LibECPInt for building Psi4. Interface to LIBEFP by I. Kaliman; Installation; EFP Fragments; Molecule Specification; Running EFP; Fragment Library; How to configure libefp for building Psi4. Interface to programs through FCHK files — fchk(); Psi4FockCI: A General Fock-Space CI For Spin-Flip And IP/EA; Installation; Sample Input. Interface to gau2grid by D. G. A. Smith; Installation; How to configure gau2gridfor building Psi4. Interface to gCP by S. Grimme; Installation; Running gCP. Interface to GDMA Distribut",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/interfacing.html:1533,integrat,integration,1533,psi4manual/master/interfacing.html,https://psicode.org,https://psicode.org/psi4manual/master/interfacing.html,1,['integrat'],['integration']
Deployability,"y a developer a coffee. - Presently uses all gradients. Could mix in analytic 2nd-derivs. - Collect resutls. - Manage scratch / subdir better. - Untangle CCSD(T) vs CCSD[T] and FJOBARC issue. - Allow CFOUR_BASIS. - Consider forcing some tighter convcrit, c4 and p4. - sow/reap. - mixed ang/bohr signals. - error by converting to ang in psi?. - Expand CURRENT DIPOLE XYZ beyond SCF. - Remember additional FJOBARC record TOTENER2 if EXCITE .ne. NONE. - S/R P4grad. - S/R C4grad. - C P4grad. - C C4grad. - switch C --> S/R with recovery using shelf. - pure C mode where only need P4 for wrapper. """"""; lowername = name.lower(); kwargs = p4util.kwargs_lower(kwargs). optstash = p4util.OptionsState(; ['BASIS']). # Option mode of operation- whether vpt2 run in one job or files farmed out; if not('vpt2_mode' in kwargs):; if ('mode' in kwargs):; kwargs['vpt2_mode'] = kwargs['mode']; del kwargs['mode']; else:; kwargs['vpt2_mode'] = 'continuous'. # Switches for route through code- S/R or continuous & Psi4 or Cfour gradients; isSowReap = True if kwargs['vpt2_mode'].lower() == 'sowreap' else False; isC4notP4 = bool(re.match('cfour', lowername)) or bool(re.match('c4-', lowername)); isC4fully = True if ('c4full' in kwargs and yes.match(str(kwargs['c4full'])) and isC4notP4 and isSowReap) else False. # Save submission directory and basis set; current_directory = os.getcwd(); user_basis = psi4.get_global_option('BASIS'). # Open data persistence shelf- vital for sowreap, checkpoint for continuouw; shelf = shelve.open(current_directory + '/' + os.path.splitext(psi4.outfile_name())[0] + '.shelf', writeback=True). # Cfour keywords to request vpt2 analysis through findif gradients; psi4.set_local_option('CFOUR', 'CFOUR_VIBRATION', 'FINDIF'); psi4.set_local_option('CFOUR', 'CFOUR_FREQ_ALGORITHM', 'PARALLEL'); psi4.set_local_option('CFOUR', 'CFOUR_ANH_ALGORITHM', 'PARALLEL'); psi4.set_local_option('CFOUR', 'CFOUR_ANHARMONIC', 'VPT2'); psi4.set_local_option('CFOUR', 'CFOUR_FD_PROJECT', 'OFF'). # When ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/procedures/wrappers_cfour.html:4884,continuous,continuous,4884,psi4manual/1.0.0/_modules/procedures/wrappers_cfour.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/procedures/wrappers_cfour.html,1,['continuous'],['continuous']
Deployability,"y and edit a new file akin to content/installs/v182.md. Add it to the git index. Note the edition string v182 in frontmatter for this and future filenames.; Don’t postdate the date string in frontmatter or it won’t render.; Ultimately, make sure the aliases:\n  - /installs/latest/ lines are added to this new file; and removed from the previous latest file, but this can wait until the installer page has been tested. Copy and edit a new file akin to data/installs/v182.yaml. Add it to the git index. Glance through the menu and notes content to make sure they’re up-to-date. This file determines; the structure of the install page.; Add or remove python versions and architectures if necessary.; Every couple years, update the default python version in datakey: python/selected and; in optsHandler at the end.; Always adjust the datakey: branch/stable block.; For releases, adjust the datakey: branch/previous and nightly blocks. Enter the scripts/ directory. If the previous release hasn’t had a snapshot saved, copy; install-generator.py into a version-labeled file, and add it to the git index.; Edit scripts/install-generator.py. Primarily, edit edition at the top.; Also, edit other arrays (stuff above ## Outputs) or messages (logic below ## Outputs); that should change. Run the install-generator.py in place. It will dump two new files, e.g.,; data/installs/cmd/{edition}.json and data/installs/dlbtn/{edition}.json. Add these to the; index (no need to inspect them).; The installer page is now ready for inspection. Run hugo server --watch=false and view in; browser at http://localhost:1313/ . Click around the options to make sure the buttons and; instructions all look right.; Iterate on the data/installs/{edition}.yaml and the install-generator.py until correct.; It’s fine to push to psicode.org to see it in place. But wait until it’s final (and all the; packages and installers are ready) to shift “latest” alias in frontmatter from whichever page is; currently active to the new p",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/manage_release.html:17909,release,release,17909,psi4manual/1.9.x/manage_release.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/manage_release.html,4,"['install', 'release']","['install-generator', 'release']"
Deployability,"y and lacking in has_changed keys; so presence is enough to satisfy has_changed. consider merging; once mature. """"""; try:; for module, modopts in partial.items():; for kw, kwprop in modopts.items():; #if full[module][kw]['has_changed']:; if full[module][kw]:; if full[module][kw]['value'] != kwprop['value']:; if 'clobber' in kwprop and kwprop['clobber']:; if 'superclobber' in kwprop and kwprop['superclobber']:; # kw in full is touched, conflicts with value in partial,; # but value in partial is paramount, overwrite full with; # value in partial; full[module][kw]['value'] = kwprop['value']; full[module][kw]['has_changed'] = True; #print '@P4C4 Overwriting %s with %s' % (kw, kwprop['value']); else:; raise ValidationError(""""""; Option %s value `%s` set by options block incompatible with; value `%s` in memory/molecule/command/psi4options block."""""" %; (kw, full[module][kw]['value'], kwprop['value'])); else:; # kw in full is touched, conflicts with value in partial,; # but value in partial is recommended, not required, no change; pass; else:; # kw in full is touched, but in agreement with value in partial, no change; pass; else:; # If kw in full is absent, overwrite it with value in partial; full[module][kw]['value'] = kwprop['value']; full[module][kw]['has_changed'] = True; #print '@P4C4 Overwriting %s with %s' % (kw, kwprop['value']). except KeyError as e: # not expected but want to trap; raise ValidationError(""""""Unexpected KeyError reconciling keywords: %s."""""" % (repr(e))). return full. [docs]def conv_float2negexp(val):; """"""Returns the least restrictive negative exponent of the power 10; that would achieve the floating point convergence criterium *val*. """"""; return -1 * int(math.floor(math.log(val, 10))). Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    ; Psi4 [1.0.0 6a9a71b] » ; Module code ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/options.html:8834,update,updated,8834,psi4manual/1.0.0/_modules/qcdb/options.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/options.html,1,['update'],['updated']
Deployability,"y and root n, (3, 3). CI ROOT n QUADRUPOLE XX¶. CI ROOT n QUADRUPOLE XY¶. CI ROOT n QUADRUPOLE XZ¶. CI ROOT n QUADRUPOLE YY¶. CI ROOT n QUADRUPOLE YZ¶. CI ROOT n QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the requested; configuration interaction level of theory and root n.; Deprecated in favor of CI ROOT n QUADRUPOLE. CI ROOT n TOTAL ENERGY¶. CI ROOT n CORRELATION ENERGY¶; The total electronic energy [Eh] and correlation energy component [Eh]; for the requested configuration interaction level of theory and root; n (numbering starts at 0). CI STATE-AVERAGED TOTAL ENERGY¶. CI STATE-AVERAGED CORRELATION ENERGY¶; The total electronic energy [Eh] and correlation energy component [Eh]; for state-averaged CI/CASSCF levels of theory. CI TOTAL ENERGY¶. CI CORRELATION ENERGY¶; The total electronic energy [Eh] and correlation energy component [Eh]; for the requested configuration interaction level of theory and root. CISD DIPOLE¶; Dipole array [e a0] for the configuration interaction singles and doubles level of theory, (3,). CISD DIPOLE X¶. CISD DIPOLE Y¶. CISD DIPOLE Z¶; The three components of the dipole [Debye] for the; configuration interaction singles and doubles level of theory and root.; Deprecated in favor of CISD DIPOLE. CISD QUADRUPOLE¶; Redundant quadrupole array [e a0^2] for the configuration interaction singles and doubles level of theory, (3, 3). CISD QUADRUPOLE XX¶. CISD QUADRUPOLE XY¶. CISD QUADRUPOLE XZ¶. CISD QUADRUPOLE YY¶. CISD QUADRUPOLE YZ¶. CISD QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the; configuration interaction singles and doubles level of theory and root.; Deprecated in favor of CISD QUADRUPOLE. CISD TOTAL ENERGY¶. CISD CORRELATION ENERGY¶. CISDT TOTAL ENERGY¶. CISDT CORRELATION ENERGY¶. CISDTQ CORRELATION ENERGY¶. CISDTQ TOTAL ENERGY¶. CIn CORRELATION ENERGY¶. CIn TOTAL ENERGY¶; The total electronic energy [Eh] and correlation energy component [Eh]; for the labeled configuration interaction lev",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/glossary_psivariables-1.html:13408,configurat,configuration,13408,psi4manual/1.4.0/glossary_psivariables-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/glossary_psivariables-1.html,4,['configurat'],['configuration']
Deployability,"y been installed (instructions at Quick Installation),; gau2grid can be obtained through conda install gau2grid -c psi4.; Then, hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect gau2grid and activate dependent code. Previous bullet had details. To build PSI4 from source and use; gau2grid from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove gau2grid. Source. If using PSI4 built from source and you want gau2grid built from; from source also, let the build system fetch and build it and activate; dependent code. How to configure gau2gridfor building Psi4¶; Role and Dependencies. Role — In PSI4, gau2grid is a library that provides essential; grid operations for DFT.; Downstream Dependencies — PSI4 \(\Leftarrow\) gau2grid; Upstream Dependencies — gau2grid \(\Leftarrow\) None. CMake Variables. CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For gau2grid, set to an installation directory containing include/gau2grid/gau2grid.h; gau2grid_DIR — CMake variable to specify where pre-built gau2grid can be found. Set to installation directory containing share/cmake/gau2grid/gau2gridConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_gau2grid — CMake variable to force internal build of gau2grid instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_gau2grid — CMake variable to force detecting pre-built gau2grid and not falling back on internal build. Examples. Build bundled. >>> cmake. Link against pre-built. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/gau2grid/root. >>> cmake -Dgau2grid_DIR=/path/to/gau2grid/configdir. Build bundled despite pre-built being detectable. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/unwanted/gau2grid/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_gau2grid=ON. table of contents. Interface to gau2grid by D. G. A. Smith; Installation; How to configure gau2gridfor building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/gau2grid-1.html:1703,install,installation,1703,psi4manual/1.2.1/gau2grid-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/gau2grid-1.html,4,['install'],['installation']
Deployability,"y between Ne and Ar atoms. fnocc7; Test fnocc with linear dependencies. scf-bz2; Benzene Dimer Out-of-Core HF/cc-pVDZ. linK-1; RHF Linear Exchange Algorithm test for water. density-screen-1; RHF Density Matrix based-Integral Screening Test for water. mbis-5; MBIS calculation on ZnO. cc13d; Tests analytic CC2 gradients. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. fd-freq-gradient-large; SCF DZ finite difference frequencies by gradients for C4NH4. scf-level-shift-uhf; SCF level shift on a UHF computation. frac; Carbon/UHF Fractionally-Occupied SCF Test Case. dft-custom-mgga; updated dldf reference to new BraggSlater radii Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). dft-grad-meta; meta-GGA gradients of water and ssh molecules reference gradients updated due to new BraggSlater radii. dfomp3-1; DF-OMP3 cc-pVDZ energy for the H2O molecule. omp2-3; OMP2 cc-pVDZ energy for the NO radical. isapt-siao1; This test case shows an example of running the I-SAPT0/jun-cc-pVDZ computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups) The SIAO1 link partitioning algorithm is used. isapt2; This is a shorter version if isapt1 - does not do cube plots. See isapt1 for full details. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. omp2p5-grad2; OMP2.5 cc-pVDZ gradient for the NO radical. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mcscf1; ROHF 6-31G** energy of the \(^{3}B_1\) state of CH2, with Z-matrix input. The occupations are specified explicitly. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. mp2p5-grad2; MP2.5 cc-pVDZ gradient for the NO radical. pywrap-basis; SAPT",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/autodoc_testsuite_corepsi4.html:46569,update,updated,46569,psi4manual/1.8.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodoc_testsuite_corepsi4.html,2,['update'],['updated']
Deployability,"y compiled Python and Numpy)"" OFF; ""-fsanitize=thread -fPIE -pie -fno-omit-frame-pointer""); option_with_flags(ENABLE_UBSAN ""Enables undefined behavior sanitizer (requires similarly compiled Python and Numpy)"" OFF; ""-fsanitize=undefined -fno-omit-frame-pointer""); option_with_flags(ENABLE_MSAN ""Enables memory sanitizer (requires similarly compiled Python and Numpy)"" OFF; ""-fsanitize=memory -fPIE -pie -fno-omit-frame-pointer""); option_with_default(MAX_AM_ERI ""Maximum angular momentum for integrals"" 5); option_with_default(CMAKE_BUILD_TYPE ""Build type (Release or Debug)"" Release); option_with_default(FC_SYMBOL ""The type of Fortran name mangling"" 2); option_with_default(BUILD_FPIC ""Compile static libraries with position independent code"" ON); option_with_default(CMAKE_INSTALL_LIBDIR ""Directory to which libraries installed"" lib); option_with_default(PYMOD_INSTALL_LIBDIR ""Location within CMAKE_INSTALL_LIBDIR to which python modules are installed"" /). Note that external projects will have their own sets of build; configuration options. Only the most-common user knobs of those are; mentioned above. How to install elsewhere than /usr/local/psi4¶; The installation directory is the filesystem location for the executable; script, the Python module, basis set data, and other administrative files.; Unless using the conda package, which is relocatable, the installation; directory must be specified with CMake variable CMAKE_INSTALL_PREFIX; before compiling. Build with Specific Install Directory; cmake -DCMAKE_INSTALL_PREFIX=/nfs/common/software/psi4. Relevant CMake Options:; CMAKE_INSTALL_PREFIX=PATH # Location to which Psi4 and internally built; # add-ons are installed (default: /usr/local/psi4). Note; It’s not guaranteed, but if, in a pinch, you need to install a; built Psi4 to a location not configured by CMAKE_INSTALL_PREFIX,; recursively copy the folders under objdir/stage/prefix to; the desired location, chown them if needed, edit the shebang in; bin/psi4 if needed, and recurs",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/build_planning-1.html:16983,configurat,configuration,16983,psi4manual/1.2.1/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html,2,['configurat'],['configuration']
Deployability,"y dependent on the reference geometry being last (as it is now); print("""""" %d displacements needed ..."""""" % (ndisp), end=''); energies = []. # S/R: Write instructions for sow/reap procedure to output file and reap input file; if opt_mode == 'sow':; instructionsO = """"""\n The optimization sow/reap procedure has been selected through mode='sow'. In addition\n""""""; instructionsO += """""" to this output file (which contains no quantum chemical calculations), this job\n""""""; instructionsO += """""" has produced a number of input files (OPT-%s-*.in) for individual components\n"""""" % (str(opt_iter)); instructionsO += """""" and a single input file (OPT-master.in) with an optimize(mode='reap') command.\n""""""; instructionsO += """""" These files may look very peculiar since they contain processed and pickled python\n""""""; instructionsO += """""" rather than normal input. Follow the instructions in OPT-master.in to continue.\n\n""""""; instructionsO += """""" Alternatively, a single-job execution of the gradient may be accessed through\n""""""; instructionsO += """""" the optimization wrapper option mode='continuous'.\n\n""""""; core.print_out(instructionsO). instructionsM = """"""\n# Follow the instructions below to carry out this optimization cycle.\n#\n""""""; instructionsM += """"""# (1) Run all of the OPT-%s-*.in input files on any variety of computer architecture.\n"""""" % (str(opt_iter)); instructionsM += """"""# The output file names must be as given below.\n#\n""""""; for rgt in range(ndisp):; pre = 'OPT-' + str(opt_iter) + '-' + str(rgt + 1); instructionsM += """"""# psi4 -i %-27s -o %-27s\n"""""" % (pre + '.in', pre + '.out'); instructionsM += """"""#\n# (2) Gather all the resulting output files in a directory. Place input file\n""""""; instructionsM += """"""# OPT-master.in into that directory and run it. The job will be minimal in\n""""""; instructionsM += """"""# length and give summary results for the gradient step in its output file.\n#\n""""""; if opt_iter == 1:; instructionsM += """"""# psi4 -i %-27s -o %-27s\n#\n"""""" % ('OPT-master.in',",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/driver.html:39789,continuous,continuous,39789,psi4manual/1.1.0/_modules/psi4/driver/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/driver.html,2,['continuous'],['continuous']
Deployability,"y dependent on the reference geometry being last (as it is now); print("""""" %d displacements needed ..."""""" % (ndisp), end=''); energies = []. # S/R: Write instructions for sow/reap procedure to output file and reap input file; if opt_mode == 'sow':; instructionsO = """"""\n The optimization sow/reap procedure has been selected through mode='sow'. In addition\n""""""; instructionsO += """""" to this output file (which contains no quantum chemical calculations), this job\n""""""; instructionsO += """""" has produced a number of input files (OPT-%s-*.in) for individual components\n"""""" % (str(opt_iter)); instructionsO += """""" and a single input file (OPT-master.in) with an optimize(mode='reap') command.\n""""""; instructionsO += """""" These files may look very peculiar since they contain processed and pickled python\n""""""; instructionsO += """""" rather than normal input. Follow the instructions in OPT-master.in to continue.\n\n""""""; instructionsO += """""" Alternatively, a single-job execution of the gradient may be accessed through\n""""""; instructionsO += """""" the optimization wrapper option mode='continuous'.\n\n""""""; psi4.print_out(instructionsO). instructionsM = """"""\n# Follow the instructions below to carry out this optimization cycle.\n#\n""""""; instructionsM += """"""# (1) Run all of the OPT-%s-*.in input files on any variety of computer architecture.\n"""""" % (str(opt_iter)); instructionsM += """"""# The output file names must be as given below.\n#\n""""""; for rgt in range(ndisp):; pre = 'OPT-' + str(opt_iter) + '-' + str(rgt + 1); instructionsM += """"""# psi4 -i %-27s -o %-27s\n"""""" % (pre + '.in', pre + '.out'); instructionsM += """"""#\n# (2) Gather all the resulting output files in a directory. Place input file\n""""""; instructionsM += """"""# OPT-master.in into that directory and run it. The job will be minimal in\n""""""; instructionsM += """"""# length and give summary results for the gradient step in its output file.\n#\n""""""; if opt_iter == 1:; instructionsM += """"""# psi4 -i %-27s -o %-27s\n#\n"""""" % ('OPT-master.in',",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/driver.html:38455,continuous,continuous,38455,psi4manual/1.0.0/_modules/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/driver.html,1,['continuous'],['continuous']
Deployability,"y for the H2O molecule. dfcasscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule. dfmp2-fc; Kr–Kr nocp energies with all-electron basis set to check frozen core. dft-grad-lr3; wB97X-D test for a large UKS molecule update ref gradient due to new BraggSlater radii. fcidump; test FCIDUMP functionality for rhf/uhf. dfomp2p5-2; DF-OMP2.5 cc-pVDZ energy for the H2O+ cation. sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. This example uses frozen core as well as MP2 natural orbital approximations. omp3-3; OMP3 cc-pCVDZ energy with B3LYP initial guess for the NO radical. olccd2; OLCCD cc-pVDZ energy with B3LYP initial guess for the NO radical. nbody-convergence; Convergence of many-body gradients of different BSSE schemes. sapt-dft-api; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. pubchem1; Benzene vertical singlet-triplet energy difference computation, using the PubChem database to obtain the initial geometry, which is optimized at the HF/STO-3G level, before computing single point energies at the RHF, UHF and ROHF levels of theory. cc13a; UHF-CCSD(T)/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ cation. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Test Suite and Sample Inputs. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/testsuite.html:48258,update,updated,48258,psi4manual/1.7.x/testsuite.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/testsuite.html,1,['update'],['updated']
Deployability,"y matrix? (Warning: large tensor). Type: boolean; Default: false. TRIPLES_ALGORITHM (PSIMRCC); PSIMRCC — The type of algorithm to use for (T) computations. Type: string; Possible Values: SPIN_ADAPTED, RESTRICTED, UNRESTRICTED; Default: RESTRICTED. TRIPLES_DIIS (PSIMRCC); PSIMRCC — Do use DIIS extrapolation to accelerate convergence for iterative triples excitations?. Type: boolean; Default: false. TURN_ON_ACTV (MCSCF); MCSCF —. Type: integer; Default: 0. UNITS (GLOBALS); GLOBALS — Units used in geometry specification. Type: string; Possible Values: BOHR, AU, A.U., ANGSTROMS, ANG, ANGSTROM; Default: ANGSTROMS. UPDATE (DETCI); DETCI — The update or correction vector formula, either DAVIDSON (default) or OLSEN. Type: string; Possible Values: DAVIDSON, OLSEN; Default: DAVIDSON. USE_SPIN_SYM (PSIMRCC); PSIMRCC — Do use symmetry to map equivalent determinants onto each other, for efficiency?. Type: boolean; Default: true. USE_SPIN_SYMMETRY (PSIMRCC); PSIMRCC (Expert) — Whether to use spin symmetry to map equivalent configurations onto each other, for efficiency. Type: boolean; Default: true. VAL_EX_LEVEL (DETCI); DETCI — In a RAS CI, this is the additional excitation level for allowing electrons out of RAS I into RAS II. The maximum number of holes in RAS I is therefore EX_LEVEL + VAL_EX_LEVEL. Type: integer; Default: 0. VECS_CC3 (CCEOM); CCEOM — Vectors stored in CC3 computations. Type: integer; Default: 10. VECS_PER_ROOT (CCEOM); CCEOM — Vectors stored per root. Type: integer; Default: 12. VECS_WRITE (DETCI); DETCI — Do store converged vector(s) at the end of the run? The vector(s) is(are) stored in a transparent format such that other programs can use it easily. The format is specified in psi4/src/lib/libqt/slaterdset.h . Type: boolean; Default: false. WABEI_LOWDISK (CCHBAR); CCHBAR — Do use the minimal-disk algorithm for Wabei? It’s VERY slow!. Type: boolean; Default: false. WFN (CCDENSITY); CCDENSITY (Expert) — Wavefunction type. Type: string; Default: SCF. WFN (CCENE",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/autodoc_glossary_options_c-1.html:124570,configurat,configurations,124570,psi4manual/4.0b3/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_glossary_options_c-1.html,2,['configurat'],['configurations']
Deployability,"y matrix? (Warning: large tensor). Type: boolean; Default: false. TRIPLES_ALGORITHM (PSIMRCC); PSIMRCC — The type of algorithm to use for (T) computations. Type: string; Possible Values: SPIN_ADAPTED, RESTRICTED, UNRESTRICTED; Default: RESTRICTED. TRIPLES_DIIS (PSIMRCC); PSIMRCC — Do use DIIS extrapolation to accelerate convergence for iterative triples excitations?. Type: boolean; Default: false. TURN_ON_ACTV (MCSCF); MCSCF —. Type: integer; Default: 0. UNITS (GLOBALS); GLOBALS — Units used in geometry specification. Type: string; Possible Values: BOHR, AU, A.U., ANGSTROMS, ANG, ANGSTROM; Default: ANGSTROMS. UPDATE (DETCI); DETCI — The update or correction vector formula, either DAVIDSON (default) or OLSEN. Type: string; Possible Values: DAVIDSON, OLSEN; Default: DAVIDSON. USE_SPIN_SYM (PSIMRCC); PSIMRCC — Do use symmetry to map equivalent determinants onto each other, for efficiency?. Type: boolean; Default: true. USE_SPIN_SYMMETRY (PSIMRCC); PSIMRCC (Expert) — Whether to use spin symmetry to map equivalent configurations onto each other, for efficiency. Type: boolean; Default: true. VAL_EX_LEVEL (DETCI); DETCI — In a RAS CI, this is the additional excitation level for allowing electrons out of RAS I into RAS II. The maximum number of holes in RAS I is therefore EX_LEVEL + VAL_EX_LEVEL. Type: integer; Default: 0. VECS_CC3 (CCEOM); CCEOM —. Type: integer; Default: 10. VECS_PER_ROOT (CCEOM); CCEOM —. Type: integer; Default: 12. VECS_WRITE (DETCI); DETCI — Do store converged vector(s) at the end of the run? The vector(s) is(are) stored in a transparent format such that other programs can use it easily. The format is specified in psi4/src/lib/libqt/slaterdset.h . Type: boolean; Default: false. WABEI_LOWDISK (CCHBAR); CCHBAR — Do use the minimal-disk algorithm for Wabei? It’s VERY slow!. Type: boolean; Default: false. WFN (CCDENSITY); CCDENSITY (Expert) — Wavefunction type. Type: string; Default: SCF. WFN (CCENERGY); CCENERGY (Expert) — Wavefunction type. Type: string; ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/autodoc_glossary_options_c-1.html:98704,configurat,configurations,98704,psi4manual/4.0b2/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/autodoc_glossary_options_c-1.html,2,['configurat'],['configurations']
Deployability,"y matter for the rotational symmetry number in thermodynamic computations. extern3; External potential calculation with one Ghost atom and one point charge at the same position. fsapt2; A very quick correctness test of F-SAPT (see fsapt1 for a real example). dct12; Spin-restricted DC-06 counterpart of dct1. tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. psimrcc-pt2; Mk-MRPT2 single point. \(^1A_1\) F2 state described using the Ms = 0 component of the singlet. Uses TCSCF singlet orbitals. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. tdscf-4; td-wb97x singlet excitation energies of methylene (tda). cc-module; check that CC is returning the same values btwn CC*, FNOCC, and DFOCC modules. dfccdl1; DF-CCDL cc-pVDZ energy for the H2O molecule. props2; DF-SCF cc-pVDZ of benzene-hydronium ion, scanning the dissociation coordinate with Python’s built-in loop mechanism. The geometry is specified by a Z-matrix with dummy atoms, fixed parameters, updated parameters, and separate charge/multiplicity specifiers for each monomer. One-electron properties computed for dimer and one monomer. rasci-ne; Ne atom RASCI/cc-pVQZ Example of split-virtual CISD[TQ] from Sherrill and Schaefer, J. Phys. Chem. XXX This uses a “primary” virtual space 3s3p (RAS 2), a “secondary” virtual space 3d4s4p4d4f (RAS 3), and a “tertiary” virtual space consisting of the remaining virtuals. First, an initial CISD computation is run to get the natural orbitals; this allows a meaningful partitioning of the virtual orbitals into groups of different importance. Next, the RASCI is run. The split-virtual CISD[TQ] takes all singles and doubles, and all triples and quadruples with no more than 2 electrons in the secondary virtual subspace (RAS 3). If any electrons are present in the tertiary virtual subspace (RAS 4), then that excitation is only allowed if it is a single or double. dlpnomp2-2; comparison of DF-MP2 and DLPNO-MP2 with a CBS extrapolation. fnocc4; Test F",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:46977,update,updated,46977,psi4manual/master/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html,2,['update'],['updated']
Deployability,"y number in thermodynamic computations. sapt6; checks that all SAPT physical components (elst, exch, indc, disp) and total IE are being computed correctly for SAPT2+3(CCD)dMP2/aug-cc-pvdz and all lesser methods thereof. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. matrix1; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating matrix multiplication, eigendecomposition, Cholesky decomposition and LU decomposition. These operations are performed on vectors and matrices provided from the Psi library. mp2-property; MP2 cc-pvDZ properties for Nitrogen oxide. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. dft-smoke; DFT Functional Smoke Test. omp2p5-2; OMP2 cc-pVDZ energy for the H2O molecule. dcft1; DC-06, DC-12, ODC-06 and ODC-12 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. opt7; Various constrained energy minimizations of HOOH with cc-pvdz RHF. For “fixed” coordinates, the final value is provided by the user. sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. This example uses frozen core as well as MP2 natural orbital approximations. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. scf-guess-read2; Test if the the guess read in the same basis converges. dft-pbe0-2; Internal match to psi4, test to match to literature values in litref.in/litref.out. gibbs; Test Gibbs free energies at 298 K of N2, H2O, and CH4. props2; DF-SCF cc-pVDZ of benzene-hydronium ion, scanning the dissociation coordinate with Python’s built-in loop mechanism. The geometry is specified by a Z-matrix with dummy atoms, fixed param",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/autodoc_testsuite_corepsi4-1.html:33337,update,update,33337,psi4manual/1.2.1/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/autodoc_testsuite_corepsi4-1.html,4,['update'],['update']
Deployability,"y repository is at Anaconda (formerly Binstar).; For commands to get a default installation, go to How to install a Psi4 binary with the Psi4conda installer, command-line; or the psicode downloads page; (pre-release downloads page).; Users proficient with conda may prefer to consult What do the conda packages psi4 & psi4-dev and the installer psi4conda contain.; For more flexibility and a detailed explanation, go to; Detailed Installation of Miniconda and Detailed Installation of . How to install a Psi4 binary with the Psi4conda installer, download site¶; Download one of the nine installers (Linux/Mac/Windows; Py27/35/36).; bash it. Follow the prompts and do make the adjustments to; PATH and PSI_SCRATCH that it suggests at the end. Test; with psi4 --test (green and yellow good; red bad). Done. Explicit commands at How to install a Psi4 binary with the Psi4conda installer, command-line. How to install a Psi4 binary with the Psi4conda installer, command-line¶; Sequence of commands to get you to a working PSI4 on Linux,; Mac, or Windows (Ubuntu shell for Windows accepts Linux installers).; Installs Miniconda+Psi4+AddOns into $HOME/psi4conda and; the PSI4 executable into the main conda environment at; $HOME/psi4conda/bin/psi4.; # Linux; # py27|py35|py36 for alternate python versions; >>> curl -O ""http://vergil.chemistry.gatech.edu/download/Psi4conda-latest-py35-Linux-x86_64.sh"" --keepalive-time 2; >>> bash; >>> bash Psi4conda-latest-py35-Linux-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> echo ""export PATH=$HOME/psi4conda/bin:\$PATH"" >> ~/.bashrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. # Mac; # py27|py35|py36 for alternate python versions; >>> curl -O ""http://vergil.chemistry.gatech.edu/download/Psi4conda-latest-py35-MacOSX-x86_64.sh"" --keepalive-time 2; >>> bash; >>> bash Psi4conda-latest-py35-MacOSX-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> echo ""export PATH=$HOME/psi4conda/bin:\$PATH"" >> ~/.bash_profil",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/conda-1.html:2222,install,install,2222,psi4manual/1.2.1/conda-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/conda-1.html,12,['install'],"['install', 'installer', 'installers']"
Deployability,"y requires setting environment variables CRAYPE_LINK_TYPE; and CRAY_ADD_RPATH before running cmake.; 1CRAYPE_LINK_TYPE=dynamic CRAY_ADD_RPATH=yes cmake ... How to configure Fortran compilers for building Psi4¶; Role and Dependencies. Role — In PSI4, a Fortran compiler in unneeded for core; features but may be required for add-ons.; Downstream Dependencies; PSI4 (\(\Leftarrow\) optional) Fortran Compiler; erd, dkh, gdma, PCMSolver \(\Leftarrow\) Fortran Compiler. CMake Variables. CMAKE_Fortran_COMPILER — CMake variable to specify name or full path to Fortran compiler.; CMAKE_Fortran_FLAGS — CMake variable to specify any additional custom compiler flags for Fortran source. Examples. Build with detected compiler from PATH. >>> cmake. Build with specific (Intel) compiler from PATH. >>> cmake -DCMAKE_Fortran_COMPILER=ifort. What Fortran compilers are approved¶; On Linux and Mac, the following work nicely. GNU: gfortran; Intel: ifort. Packages to install for specific OS or package managers:; Ubuntu gfortran; conda gfortran_linux-64 to get gfortran. How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew¶; Xcode does not provide a Fortran compiler. A way to get one is to download; the gcc conda package. This provides gcc, g++, and; gfortran compilers for Mac. The two former are 4.8.5 and so are too; old to compile PSI4, but the Fortran compiler will work. How to configure BLAS/LAPACK for building Psi4¶; Role and Dependencies. Role — In PSI4, BLAS and LAPACK control much of the speed; and efficiency of the code since computational chemistry is essentially; linear algebra on molecular systems.; Downstream Dependencies — PSI4 \(\Leftarrow\) LAPACK Libraries. CMake Variables. BLAS_TYPE — CMake variable to specify which BLAS libraries to look for among MKL|OPENBLAS|ESSL|ATLAS|ACML|SYSTEM_NATIVE.; LAPACK_TYPE — CMake variable to specify which LAPACK libraries to look for among MKL|OPENBLAS|ESSL|ATLAS|ACML|SYSTEM_NATIVE.; MKL_ROOT — Environment variable set b",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/build_planning-1.html:34540,install,install,34540,psi4manual/1.2.1/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html,2,['install'],['install']
Deployability,"y term in EFP computation?. Type: boolean; Default: true. EFP_DISP_DAMPING¶. Fragment-fragment dispersion damping type. TT is a damping formula by Tang and Toennies. OVERLAP is overlap-based dispersion damping. Type: string; Possible Values: TT, OVERLAP, OFF; Default: OVERLAP. EFP_ELST¶. Do include electrostatics energy term in EFP computation?. Type: boolean; Default: true. EFP_ELST_DAMPING¶. Fragment-fragment electrostatic damping type. SCREEN is a damping formula based on screen group in the EFP potential. OVERLAP is damping that computes charge penetration energy. Type: string; Possible Values: SCREEN, OVERLAP, OFF; Default: SCREEN. EFP_EXCH¶. Do include exchange repulsion energy term in EFP computation?. Type: boolean; Default: true. EFP_IND¶. Do include polarization energy term in EFP computation? (EFP_POL c. v1.1). Type: boolean; Default: true. EFP_IND_DAMPING¶. Fragment-fragment polarization damping type. TT is a damping formula like Tang and Toennies. (EFP_POL_DAMPING c. v1.1). Type: string; Possible Values: TT, OFF; Default: TT. EFP_QM_ELST¶. Do include electrostatics energy term in QM/EFP computation? (QMEFP_ELST c. v1.1). Type: boolean; Default: true. EFP_QM_IND¶. Do include polarization energy term in QM/EFP computation? (QMEFP_POL c. v1.1). Type: boolean; Default: true. PRINT¶. The amount of information printed to the output file. Type: integer; Default: 1. Expert¶. DERTYPE¶. Do EFP gradient?. Type: string; Possible Values: NONE, FIRST; Default: NONE. QMEFP¶. Do turn on QM/EFP terms?. Type: boolean; Default: false. table of contents. EFP; General; EFP_DISP; EFP_DISP_DAMPING; EFP_ELST; EFP_ELST_DAMPING; EFP_EXCH; EFP_IND; EFP_IND_DAMPING; EFP_QM_ELST; EFP_QM_IND; PRINT. Expert; DERTYPE; QMEFP. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; EFP. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/autodir_options_c/module__efp.html:2183,update,updated,2183,psi4manual/1.7.x/autodir_options_c/module__efp.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/module__efp.html,1,['update'],['updated']
Deployability,"y this will be set in options.; #; # geometry(""; # O 1.0 0.0 0.0; # H 0.0 1.0 0.0; # H 0.0 0.0 0.0; #; [docs]def geometry(geom, name=""default""):; """"""Function to create a molecule object of name *name* from the; geometry in string *geom*. Permitted for user use but deprecated; in driver in favor of explicit molecule-passing. Comments within; the string are filtered. """"""; molrec = qcel.molparse.from_string(; geom, enable_qm=True, missing_enabled_return_qm='minimal', enable_efp=True, missing_enabled_return_efp='none'). molecule = core.Molecule.from_dict(molrec['qm']); if ""geom"" in molrec[""qm""]:; geom = np.array(molrec[""qm""][""geom""]).reshape((-1, 3)); if molrec[""qm""][""units""] == ""Angstrom"":; geom = geom / qcel.constants.bohr2angstroms; molecule._initial_cartesian = core.Matrix.from_array(geom); molecule.set_name(name). if 'efp' in molrec:; try:; import pylibefp; except ImportError as e: # py36 ModuleNotFoundError; raise ImportError(""""""Install pylibefp to use EFP functionality. `conda install pylibefp -c psi4` Or build with `-DENABLE_libefp=ON`"""""") from e; #print('Using pylibefp: {} (version {})'.format(pylibefp.__file__, pylibefp.__version__)); efpobj = pylibefp.from_dict(molrec['efp']); # pylibefp.core.efp rides along on molecule; molecule.EFP = efpobj. # Attempt to go ahead and construct the molecule; try:; molecule.update_geometry(); except:; core.print_out(""Molecule: geometry: Molecule is not complete, please use 'update_geometry'\n""; "" once all variables are set.\n""). activate(molecule). return molecule. [docs]def activate(mol):; """"""Function to set molecule object *mol* as the current active molecule.; Permitted for user use but deprecated in driver in favor of explicit; molecule-passing. """"""; core.set_active_molecule(mol). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .  · ; 1.4;  · . PSI4. Module code; psi4.driver.molutil. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/molutil.html:7472,install,install,7472,psi4manual/1.4.0/_modules/psi4/driver/molutil.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/molutil.html,2,"['install', 'update']","['install', 'updated']"
Deployability,"y this will be set in options.; #; # geometry(""; # O 1.0 0.0 0.0; # H 0.0 1.0 0.0; # H 0.0 0.0 0.0; #; [docs]def geometry(geom, name=""default""):; """"""Function to create a molecule object of name *name* from the; geometry in string *geom*. Permitted for user use but deprecated; in driver in favor of explicit molecule-passing. Comments within; the string are filtered. """"""; molrec = qcel.molparse.from_string(; geom, enable_qm=True, missing_enabled_return_qm='minimal', enable_efp=True, missing_enabled_return_efp='none'). molecule = core.Molecule.from_dict(molrec['qm']); if ""geom"" in molrec[""qm""]:; geom = np.array(molrec[""qm""][""geom""]).reshape((-1, 3)); if molrec[""qm""][""units""] == ""Angstrom"":; geom = geom / qcel.constants.bohr2angstroms; molecule._initial_cartesian = core.Matrix.from_array(geom); molecule.set_name(name). if 'efp' in molrec:; try:; import pylibefp; except ImportError as e: # py36 ModuleNotFoundError; raise ImportError(""""""Install pylibefp to use EFP functionality. `conda install pylibefp -c psi4` Or build with `-DENABLE_libefp=ON`"""""") from e; #print('Using pylibefp: {} (version {})'.format(pylibefp.__file__, pylibefp.__version__)); efpobj = pylibefp.from_dict(molrec['efp']); # pylibefp.core.efp rides along on molecule; molecule.EFP = efpobj. # Attempt to go ahead and construct the molecule; try:; molecule.update_geometry(); except:; core.print_out(""Molecule: geometry: Molecule is not complete, please use 'update_geometry'\n""; "" once all variables are set.\n""). activate(molecule). return molecule. [docs]def activate(mol):; """"""Function to set molecule object *mol* as the current active molecule.; Permitted for user use but deprecated in driver in favor of explicit; molecule-passing. """"""; core.set_active_molecule(mol). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .  · ; 1.5;  · . PSI4. Module code; psi4.driver.molutil. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/_modules/psi4/driver/molutil.html:7513,install,install,7513,psi4manual/1.5.0/_modules/psi4/driver/molutil.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/_modules/psi4/driver/molutil.html,2,"['install', 'update']","['install', 'updated']"
Deployability,"y!). The recommended scheme is ROBUST. Type: string; Default: NONE. DFT_RADIAL_POINTS (SCF)¶SCF — Number of radial points. Type: integer; Default: 75. DFT_RADIAL_SCHEME (SCF)¶SCF — Radial Scheme. Type: string; Possible Values: TREUTLER, BECKE, MULTIEXP, EM, MURA; Default: TREUTLER. DFT_SPHERICAL_POINTS (SCF)¶SCF — Number of spherical points (A Lebedev Points number). Type: integer; Default: 302. DFT_SPHERICAL_SCHEME (SCF)¶SCF — Spherical Scheme. Type: string; Possible Values: LEBEDEV; Default: LEBEDEV. DFT_V2_RHO_CUTOFF (SCF)¶SCF — Minima rho cutoff for the second derivative. Type: double; Default: 1.e-6. DFT_VV10_B (SCF)¶SCF — Define VV10 parameter b. Type: double; Default: 0.0. DFT_VV10_C (SCF)¶SCF — Define VV10 parameter C. Type: double; Default: 0.0. DFT_VV10_POSTSCF (SCF)¶SCF — post-scf VV10 correction. Type: boolean; Default: false. DFT_VV10_RADIAL_POINTS (SCF)¶SCF — Number of radial points for VV10 NL integration. Type: integer; Default: 50. DFT_VV10_RHO_CUTOFF (SCF)¶SCF (Expert) — Rho cutoff for VV10 NL integration. Type: double; Default: 1.e-8. DFT_VV10_SPHERICAL_POINTS (SCF)¶SCF — Number of spherical points (A Lebedev Points number) for VV10 NL integration. Type: integer; Default: 146. DFT_WEIGHTS_TOLERANCE (SCF)¶SCF (Expert) — grid weight cutoff. Disable with -1.0. Type: conv double; Default: 1.0e-15. DIAG_METHOD (DETCI)¶DETCI — This specifies which method is to be used in diagonalizing the Hamiltonian. The valid options are: RSP, to form the entire H matrix and diagonalize using libciomr to obtain all eigenvalues (n.b. requires HUGE memory); OLSEN, to use Olsen’s preconditioned inverse subspace method (1990); MITRUSHENKOV, to use a 2x2 Olsen/Davidson method; and DAVIDSON (or SEM) to use Liu’s Simultaneous Expansion Method, which is identical to the Davidson method if only one root is to be found. There also exists a SEM debugging mode, SEMTEST. The SEM method is the most robust, but it also requires \(2NM+1\) CI vectors on disk, where \(N\) is the maximum",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:105149,integrat,integration,105149,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html,4,['integrat'],['integration']
Deployability,"y() and so can be accessed through; energy('myplugin') in an input file. Any other Python functions can; also be placed in this file.; __init__.py — Init script for the plugin (in the sense that; the whole plugin directory is a Python module). This file generally won’t; need editing unless additional Python files are added to the plugin; directory (add additional lines to the # Load Python modules section); or the plugin depends on .so codes in other plugin directories (add; additional plugin_load lines relative to the current plugin directory to; the # Load C++ plugin section). doc.rst — Documentation file. Place in this file any notes,; equations, warnings to users, todo lists, etc.. Plain text is fine,; though reStructuredText is the ultimate goal. Remove the .. comment; text and build Sphinx documentation for samples of linking keywords,; sections, and math. This file is absorbed into the PSI4; documentation, along with any docstrings to Python functions, and the C++; keywords block in the myplugin.cc file. See Updating the Users’ and Programmers’ Manual; for building documentation. Please note that pure virtual functions in a plugin may cause undefined symbols errors when; the plugin is loaded.; To create a purely Python plugin, create a new plugin directory, then; remove the Makefile and myplugin.cc files and; erase the shared object loading portion of __init__.py. Create as many .py; files as necessary (registering each one in __init__.py), use; input.dat as a model for loading the plugin, no recompile ever; necessary. table of contents. Creating New Plugins; Modular Approach to Development; Creating a New Plugin; Creating a New Plugin Using a Conda Pre-compiled Binary; Files in a Plugin Directory. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.6;  · . PSI4. Adding New Code to PSI4; Creating New Plugins. © Copyright 2022, The Psi4 Project.; Last updated on Thursday, 19 May 2022 08:57PM.; Created using Sphinx 4.5.0.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/plugins.html:8680,update,updated,8680,psi4manual/1.6.x/plugins.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/plugins.html,1,['update'],['updated']
Deployability,"y(self). current_total_energy(self). form_rotation_matrix(self, x, order). gradient(self). gradient_rms(self). rhf_energy(self, arg0). solve(self, arg0, arg1, arg2). update(self, arg0, arg1, arg2, arg3, arg4). zero_redundant(self, arg0). Methods Documentation. Ck(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix, arg1: psi4.core.Matrix) → psi4.core.Matrix¶. H_approx_diag(self: psi4.core.SOMCSCF) → psi4.core.Matrix¶. approx_solve(self: psi4.core.SOMCSCF) → psi4.core.Matrix¶. compute_AFock(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix) → psi4.core.Matrix¶. compute_Hk(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix) → psi4.core.Matrix¶. compute_Q(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix) → psi4.core.Matrix¶. compute_Qk(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix, arg1: psi4.core.Matrix, arg2: psi4.core.Matrix) → psi4.core.Matrix¶. current_AFock(self: psi4.core.SOMCSCF) → psi4.core.Matrix¶. current_IFock(self: psi4.core.SOMCSCF) → psi4.core.Matrix¶. current_ci_energy(self: psi4.core.SOMCSCF) → float¶. current_docc_energy(self: psi4.core.SOMCSCF) → float¶. current_total_energy(self: psi4.core.SOMCSCF) → float¶. form_rotation_matrix(self: psi4.core.SOMCSCF, x: psi4.core.Matrix, order: int = 2) → psi4.core.Matrix¶. gradient(self: psi4.core.SOMCSCF) → psi4.core.Matrix¶. gradient_rms(self: psi4.core.SOMCSCF) → float¶. rhf_energy(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix) → float¶. solve(self: psi4.core.SOMCSCF, arg0: int, arg1: float, arg2: bool) → psi4.core.Matrix¶. update(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix, arg1: psi4.core.Matrix, arg2: psi4.core.Matrix, arg3: psi4.core.Matrix, arg4: psi4.core.Matrix) → None¶. zero_redundant(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix) → None¶. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. PSI4 API: Linking C++ and Python; DFSOMCSCF. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/api/psi4.core.dfsomcscf.html:1979,update,update,1979,psi4manual/1.4.0/api/psi4.core.dfsomcscf.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/api/psi4.core.dfsomcscf.html,2,['update'],"['update', 'updated']"
Deployability,"y(self). current_total_energy(self). form_rotation_matrix(self, x[, order]). gradient(self). gradient_rms(self). rhf_energy(self, arg0). solve(self, arg0, arg1, arg2). update(self, arg0, arg1, arg2, arg3, arg4). zero_redundant(self, arg0). Methods Documentation. Ck(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix, arg1: psi4.core.Matrix) → psi4.core.Matrix¶. H_approx_diag(self: psi4.core.SOMCSCF) → psi4.core.Matrix¶. approx_solve(self: psi4.core.SOMCSCF) → psi4.core.Matrix¶. compute_AFock(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix) → psi4.core.Matrix¶. compute_Hk(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix) → psi4.core.Matrix¶. compute_Q(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix) → psi4.core.Matrix¶. compute_Qk(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix, arg1: psi4.core.Matrix, arg2: psi4.core.Matrix) → psi4.core.Matrix¶. current_AFock(self: psi4.core.SOMCSCF) → psi4.core.Matrix¶. current_IFock(self: psi4.core.SOMCSCF) → psi4.core.Matrix¶. current_ci_energy(self: psi4.core.SOMCSCF) → float¶. current_docc_energy(self: psi4.core.SOMCSCF) → float¶. current_total_energy(self: psi4.core.SOMCSCF) → float¶. form_rotation_matrix(self: psi4.core.SOMCSCF, x: psi4.core.Matrix, order: int = 2) → psi4.core.Matrix¶. gradient(self: psi4.core.SOMCSCF) → psi4.core.Matrix¶. gradient_rms(self: psi4.core.SOMCSCF) → float¶. rhf_energy(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix) → float¶. solve(self: psi4.core.SOMCSCF, arg0: int, arg1: float, arg2: bool) → psi4.core.Matrix¶. update(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix, arg1: psi4.core.Matrix, arg2: psi4.core.Matrix, arg3: psi4.core.Matrix, arg4: psi4.core.Matrix) → None¶. zero_redundant(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix) → None¶. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. PSI4 API: Linking C++ and Python; SOMCSCF. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/api/psi4.core.somcscf.html:1989,update,update,1989,psi4manual/1.5.0/api/psi4.core.somcscf.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/api/psi4.core.somcscf.html,2,['update'],"['update', 'updated']"
Deployability,"y, you need to create a make.inc file with; the appropriate options for your machine. For Linux/gfortran,; simply; cp make.inc.example make.inc. Next, edit BLASLIB in make.inc to point to your BLAS library; (full pathnames are recommended):; BLASLIB = /home/david/software/atlas3.9.25/lib/libf77blas.a /home/david/software/atlas3.9.25/lib/libatlas.a. Edit Makefile as necessary (probably not needed).; make. Copy the resulting file [lapack_($ARCH).a] where you want it; (a standard location like /usr/local/lib is easier for PSI to find).; It is probably helpful to rename the file liblapack.a. V. Miscellaneous Architecture-Specific Notes¶. Linux on x86 and x86_64; Intel compilers: We had trouble with icpc 12.0.x. Use 12.1 or; later. VI. Common Problems with PSI Compilation¶. No rule to make target foo.h, needed by bar.d. Stop.; This commonly happens after pulling updates from the repository. It happens; when a library header file is removed or renamed by the update, but there are; still old dependency files in the object directory, which think that they; still need to know about that header. There’s a simple remedy, just run; >>> make DODEPEND=no dclean. in the object directory. Make gets stuck in an infinite loop; This means that the makefiles have not been properly updated. Running; >>> autoconf. in the top-level Psi directory, followed by; >>> ./config.status --recheck; >>> ./config.status. in the object directory should fix it. This procedure will need to be run; whenever an update changes the directory structure. Incompatible g++/icpc; The Intel compilers require an installed set of C++ headers. Unfortunately,; the GNU compilers tend to be more cutting-edge than the Intel compilers,; meaning that Intel is always playing catch-up to new features in g++. This; means the two are often incompatible, leading to trouble if one wants to use; icpc to compile PSI4 (or anything else...). Your best bet in general is to not; upgrade Linux too fast, and always keep the very lates",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/installfile.html:26178,update,update,26178,psi4manual/4.0b3/installfile.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/installfile.html,3,['update'],['update']
Deployability,"y-aug [2]; aug; d-aug. cc-pVXZ-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56;  . cc-pV(X+d)Z-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56;  . cc-pCVXZ-RI;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCV(X+d)Z-RI;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-RI; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . cc-pwCV(X+d)Z-RI; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . Summary of Dunning dual-basis helper basis sets available in Psi4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-DUAL; TQ;  ;  ;  ;  ;  ; TQ; DTQ;  . cc-pV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCVXZ-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . Summary of Karlsruhe orbital basis sets available in Psi4¶. no diffuse; augmented. def2-SV(P);  . def2-SVP; def2-SVPD. def2-TZVP; def2-TZVPD. def2-TZVPP; def2-TZVPPD. def2-QZVP; def2-QZVPD. def2-QZVPP; def2-QZVPPD. Summary of other orbital basis sets available in Psi4¶. DZP. TZ2P. TZ2PF. Sadlej-LPol-ds. Sadlej-LPol-dl. Sadlej-LPol-fs. Sadlej-LPol-fl. Footnotes. [1]Corresponding basis set filenames have star replaced by “s”, plus replaced by “p”, and parenthesis and comma replaced by “_”. [2](1, 2, 3, 4, 5, 6) The heavy-aug-cc-stub and jul-cc-stub basis sets are identical. [3](1, 2, 3) The JKFIT basis sets are designed in the cc-stub(X+d)Z; framework that includes an additional set of; d-fuctions for second-row p-block elements. Identical basis sets; with the cc-stubXZ-JKFIT label are provided for convenience. [4]D has or d.; T has or f.; Q has or g, etc. Previous topic; WFN; Next topic; Basis Sets by Element. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/basissets_tables-1.html:6493,update,updated,6493,psi4manual/1.0.0/basissets_tables-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/basissets_tables-1.html,2,['update'],['updated']
Deployability,"y-like, optional; Whether to randomly shuffle atoms (`True`) or leave 1st atom 1st, etc. (`False`); or shuffle according to specified (nat, ) indices (e.g., [2, 1, 0]); do_shift : bool or array-like, optional; Whether to generate a random atom shift on interval [-3, 3) in each; dimension (`True`) or leave at current origin (`False`) or shift along; specified (3, ) vector (e.g., np.array([0., 1., -1.])).; do_rotate : bool or array-like, optional; Whether to generate a random 3D rotation according to algorithm of Arvo (`True`); or leave at current orientation (`False`) or rotate with specified (3, 3) matrix.; deflection : float, optional; If `do_rotate`, how random a rotation: 0.0 is no change, 0.1 is small; perturbation, 1.0 is completely random.; do_mirror : bool, optional; Whether to set mirror reflection instruction. Changes identity of; molecule so off by default. Returns; -------; tuple; AlignmentMill with fields (shift, rotation, atommap, mirror); as requested: identity, random, or specified. """"""; rand_elord = np.arange(nat); if do_resort is True:; np.random.shuffle(rand_elord); elif do_resort is False:; pass; else:; rand_elord = np.array(do_resort); assert rand_elord.shape == (nat,). if do_shift is True:; rand_shift = 6 * np.random.random_sample((3,)) - 3; elif do_shift is False:; rand_shift = np.zeros((3,)); else:; rand_shift = np.array(do_shift); assert rand_shift.shape == (3,). if do_rotate is True:; rand_rot3d = random_rotation_matrix(deflection=deflection); elif do_rotate is False:; rand_rot3d = np.identity(3); else:; rand_rot3d = np.array(do_rotate); assert rand_rot3d.shape == (3, 3). perturbation = AlignmentMill(shift=rand_shift, rotation=rand_rot3d, atommap=rand_elord, mirror=do_mirror); return perturbation. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .  · ; 1.6;  · . PSI4. Module code; qcelemental.molutil.align. © Copyright 2022, The Psi4 Project.; Last updated on Thursday, 19 May 2022 08:57PM.; Created using Sphinx 4.5.0.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/_modules/qcelemental/molutil/align.html:21088,update,updated,21088,psi4manual/1.6.x/_modules/qcelemental/molutil/align.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/_modules/qcelemental/molutil/align.html,1,['update'],['updated']
Deployability,"y. For open-shell references,; the calls energy('mp2.5'), energy('mp3'), and energy('mp4') will; default to implementations of these methods in other modules. name; calls method; type select. qcisd; quadratic configuration interaction singles doubles; CI_TYPE CONV. qcisd(t); qcisd with perturbative triples; CI_TYPE CONV. mp2.5; average of second- and third-order perturbation theories; MP_TYPE CONV. mp3; third-order perturbation theory; MP_TYPE CONV. mp4(sdq); fourth-order perturbation theory, minus triples contribution; MP_TYPE CONV. mp4; full fourth-order perturbation theory; MP_TYPE CONV. lccd; linear ccd; CC_TYPE CONV. cepa(0), lccsd; coupled electron pair approximation, variant 0; CC_TYPE CONV. cepa(1); coupled electron pair approximation, variant 1; CC_TYPE CONV. cepa(3); coupled electron pair approximation, variant 3; CC_TYPE CONV. acpf; averaged coupled-pair functional; CC_TYPE CONV. aqcc; averaged quadratic coupled-cluster; CC_TYPE CONV. cisd; configuration interaction with single and double excitations; CI_TYPE CONV. fno-qcisd; qcisd with frozen natural orbitals; CI_TYPE CONV. fno-qcisd(t); qcisd(t) with frozen natural orbitals; CI_TYPE CONV. fno-ccsd; coupled cluster singles doubles with frozen natural orbitals; CC_TYPE CONV, DF, CD. fno-ccsd(t); ccsd with perturbative triples and frozen natural orbitals; CC_TYPE CONV, DF, CD. fno-mp3; mp3 with frozen natural orbitals; MP_TYPE CONV. fno-mp4(sdq); mp4(sdq) with frozen natural orbitals; MP_TYPE CONV. fno-mp4; mp4 with frozen natural orbitals; MP_TYPE CONV. fno-lccd; linear ccd with frozen natural orbitals; CC_TYPE CONV. fno-cepa(0), fno-lccsd; cepa(0) with frozen natural orbitals; CC_TYPE CONV. fno-cepa(1); cepa(1) with frozen natural orbitals; CC_TYPE CONV. fno-cepa(3); cepa(3) with frozen natural orbitals; CC_TYPE CONV. fno-acpf; acpf with frozen natural orbitals; CC_TYPE CONV. fno-aqcc; aqcc with frozen natural orbitals; CC_TYPE CONV. fno-cisd; cisd with frozen natural orbitals; CI_TYPE CONV. Basic FNOCC ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/fnocc-1.html:13817,configurat,configuration,13817,psi4manual/1.1.0/fnocc-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/fnocc-1.html,11,['configurat'],['configuration']
Deployability,"y. There are two implementations of DFTD3; see Empirical dispersion correction packages . The newer; “s-dftd3” one is preferred, while the older “classic” one will work for the immediate future.; PSI4 will automatically select whichever is available.; Starting with v1.9, only “s-dftd3” is supported, though the “classic” continues to work for many applications.; DFTD3 is available as a conda package for Linux and macOS and Windows.; If using the Psi4conda installer, DFTD3 has already been installed alongside.; If using the PSI4 conda package, the classic dftd3 conda package can; be obtained through conda install dftd3 -c psi4 or the newer implementation; through conda install dftd3-python -c conda-forge.; If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; the dftd3 executable can be obtained through conda install dftd3 -c psi4; or conda install dftd3-python -c conda-forge.; To remove a conda installation, conda remove dftd3 or conda remove dftd3-python. Source. If using PSI4 built from source and you want to build DFTD3 from; from source also,; follow the instructions provided with the source; (essentially, download the freely available tarball, unpack the source,; edit the Makefile to select a; Fortran compiler, and run make). From version 3.1.0 onwards, DFTD3 can; be used as-is; for earlier versions, patches are available:; psi4/psi4/share/psi4/scripts/patch_grimme_dftd3.3.0.2. To be used by PSI4, the classic program binary (dftd3) must be; found in your PATH or the s-dftd3 module in your PYTHONPATH; so QCEngine can detect it. Check if and where found through qcengine info. If; PSI4 is unable to execute the binary, an error will be reported.; To preferentially use a particular dftd3 compilation, simply adjust its; position in the path environment variables. Theory¶; The local or semilocal character of conventional density functionals; necessarily leads to neglect of the long-range correlatio",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/dftd3.html:2316,install,installation,2316,psi4manual/1.9.x/dftd3.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/dftd3.html,2,['install'],['installation']
Deployability,"y[, jk]). iterations([e_conv, d_conv]). jk(self); Returns the internal JK object. occupation_a(self); Returns the Alpha occupation numbers. occupation_b(self); Returns the Beta occupation numbers. onel_Hx(self, arg0); One-electron Hessian-vector products. print_energies(). print_header(self); docstring. print_orbitals(self); docstring. print_preiterations(self); docstring. push_back_external_potential(self, V); Add an external potential to the private external_potentials list. reset_occupation(self); docstring. rotate_orbitals(self, arg0, arg1); docstring. save_density_and_energy(self); docstring. semicanonicalize(self); Semicanonicalizes the orbitals for ROHF. set_energies(self, arg0, arg1); docstring. set_jk(self, arg0); Sets the internal JK object !expert. set_sad_basissets(self, arg0); Sets the Superposition of Atomic Densities basisset. set_sad_fitting_basissets(self, arg0); Sets the Superposition of Atomic Densities density-fitted basisset. soscf_update(self, arg0, arg1, arg2, arg3); Computes a second-order SCF update. stability_analysis(self); Assess wfn stability and correct if requested. twoel_Hx(self, arg0, arg1, arg2); Two-electron Hessian-vector products. Attributes Documentation. MOM_excited_¶; Are we to do excited-state MOM?. MOM_performed_¶; MOM performed current iteration?. attempt_number_¶; Current macroiteration (1-indexed) for stability analysis. diis_enabled_¶; docstring. diis_start_¶; docstring. frac_performed_¶; Frac performed current iteration?. initialized_diis_manager_¶; docstring. iteration_¶; docstring. reset_occ_¶; Do reset the occupation after the guess to the inital occupation. sad_¶; Do assume a non-idempotent density matrix and no orbitals after the guess. Methods Documentation. V_potential(self: psi4.core.HF) → psi4.core.VBase¶; Returns the internal DFT V object. Va(self: psi4.core.HF) → psi4.core.Matrix¶; Returns the Alpha Kohn-Sham Potential Matrix. Vb(self: psi4.core.HF) → psi4.core.Matrix¶; Returns the Beta Kohn-Sham Potential Ma",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/api/psi4.core.hf.html:3796,update,update,3796,psi4manual/1.3.2/api/psi4.core.hf.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.hf.html,1,['update'],['update']
Deployability,"yapf can be integrated into widely used editors.; The Neoformat plugin can be configured; to format files when saving them to disk. How to impose code style through Git hooks¶; Git hooks are scripts that are run before or after certain Git events.; In this particular case, we want to make sure that all files that have been; added to the staging area with git add are formatted according to the style; before they committing them with git commit.; The hook to be modified is then the pre-commit hook.; PSI4 uses the pre-commit framework, with configuration file psi4/.pre-commit-config.yaml.; To take advantage of pre-commit hooks, you will need to install the pre-commit utility:. ::pip install pre-commit. or using Conda:. ::conda install pre_commit -c conda-forge. Finally, you need to install the actual hooks:. ::pre-commit install. Pre-commit hooks will be run on every git commit, but the --no-verify; option can be used to skip their execution.; Hooks are powerful, but integrating the formatter into your editor will prove; to be better. Hooks need to be installed anew for every fresh clone of the; repository you are working on. How to run code-style tools clang-format and yapf manually¶; The least recommended approach to formatting your code is to run manually the; formatters. The following commands will format only the files that have been; modified:. ::clang-format -style=file -i git diff –relative –name-only HEAD – *.cc *.h; yapf -i git diff –relative –name-only HEAD – *.py. How and when to not apply code styling to your contributions¶; TODO. table of contents. Code style conventions; How to impose code style through your editor; How to impose code style through Git hooks; How to run code-style tools clang-format and yapf manually; How and when to not apply code styling to your contributions. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Code style conventions. © Copyright 2007-2024, The Psi4 Project.; L",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/code_style.html:2103,integrat,integrating,2103,psi4manual/master/code_style.html,https://psicode.org,https://psicode.org/psi4manual/master/code_style.html,1,['integrat'],['integrating']
Deployability,"yapf can be integrated into widely used editors.; The Neoformat plugin can be configured; to format files when saving them to disk. How to impose code style through Git hooks¶; Git hooks are scripts that are run before or after certain Git events.; In this particular case, we want to make sure that all files that have been; added to the staging area with git add are formatted according to the style; before they committing them with git commit.; The hook to be modified is then the pre-commit hook.; PSI4 uses the pre-commit framework, with configuration file psi4/.pre-commit-config.yaml.; To take advantage of pre-commit hooks, you will need to install the pre-commit utility:. ::pip install pre-commit. or using Conda:. ::conda install pre_commit -c conda-forge. Finally, you need to install the actual hooks:. ::pre-commit install. Pre-commit hooks will be run on every git commit, but the --no-verify; option can be used to skip their execution.; Hooks are powerful, but integrating the formatter into your editor will prove; to be better. Hooks need to be installed anew for every fresh clone of the; repository you are working on. How to run code-style tools clang-format and yapf manually¶; The least recommended approach to formatting your code is to run manually the; formatters. The following commands will format only the files that have been; modified:. ::clang-format -style=file -i git diff –relative –name-only HEAD – *.cc *.h; yapf -i git diff –relative –name-only HEAD – *.py. How and when to not apply code styling to your contributions¶; TODO. table of contents. Code style conventions; How to impose code style through your editor; How to impose code style through Git hooks; How to run code-style tools clang-format and yapf manually; How and when to not apply code styling to your contributions. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Code style conventions. © Copyright 2021, The Psi4 Project.; Last updated on",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/code_style-1.html:2094,integrat,integrating,2094,psi4manual/1.4.0/code_style-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/code_style-1.html,2,['integrat'],['integrating']
Deployability,"yapf can be integrated into widely used editors.; The Neoformat plugin can be configured; to format files when saving them to disk. How to impose code style through Git hooks¶; Git hooks are scripts that are run before or after certain Git events.; In this particular case, we want to make sure that all files that have been; added to the staging area with git add are formatted according to the style; before they committing them with git commit.; The hook to be modified is then the pre-commit hook.; PSI4 uses the pre-commit framework, with configuration file psi4/.pre-commit-config.yaml.; To take advantage of pre-commit hooks, you will need to install the pre-commit utility:. ::pip install pre-commit. or using Conda:. ::conda install pre_commit -c conda-forge. Finally, you need to install the actual hooks:. ::pre-commit install. Pre-commit hooks will be run on every git commit, but the --no-verify; option can be used to skip their execution.; Hooks are powerful, but integrating the formatter into your editor will prove; to be better. Hooks need to be installed anew for every fresh clone of the; repository you are working on. How to run code-style tools clang-format and yapf manually¶; The least recommended approach to formatting your code is to run manually the; formatters. The following commands will format only the files that have been; modified:. ::clang-format -style=file -i git diff –relative –name-only HEAD – *.cc *.h; yapf -i git diff –relative –name-only HEAD – *.py. How and when to not apply code styling to your contributions¶; TODO. table of contents. Code style conventions; How to impose code style through your editor; How to impose code style through Git hooks; How to run code-style tools clang-format and yapf manually; How and when to not apply code styling to your contributions. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Code style conventions. © Copyright 2021, The Psi4 Project.; Last updated on",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/code_style-1.html:2094,integrat,integrating,2094,psi4manual/1.5.0/code_style-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/code_style-1.html,2,['integrat'],['integrating']
Deployability,"yapf can be integrated into widely used editors.; The Neoformat plugin can be configured; to format files when saving them to disk. How to impose code style through Git hooks¶; Git hooks are scripts that are run before or after certain Git events.; In this particular case, we want to make sure that all files that have been; added to the staging area with git add are formatted according to the style; before they committing them with git commit.; The hook to be modified is then the pre-commit hook.; PSI4 uses the pre-commit framework, with configuration file psi4/.pre-commit-config.yaml.; To take advantage of pre-commit hooks, you will need to install the pre-commit utility:. ::pip install pre-commit. or using Conda:. ::conda install pre_commit -c conda-forge. Finally, you need to install the actual hooks:. ::pre-commit install. Pre-commit hooks will be run on every git commit, but the --no-verify; option can be used to skip their execution.; Hooks are powerful, but integrating the formatter into your editor will prove; to be better. Hooks need to be installed anew for every fresh clone of the; repository you are working on. How to run code-style tools clang-format and yapf manually¶; The least recommended approach to formatting your code is to run manually the; formatters. The following commands will format only the files that have been; modified:. ::clang-format -style=file -i git diff –relative –name-only HEAD – *.cc *.h; yapf -i git diff –relative –name-only HEAD – *.py. How and when to not apply code styling to your contributions¶; TODO. table of contents. Code style conventions; How to impose code style through your editor; How to impose code style through Git hooks; How to run code-style tools clang-format and yapf manually; How and when to not apply code styling to your contributions. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.6;  · . PSI4. Code style conventions. © Copyright 2022, The Psi4 Project.; Last updated on",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/code_style.html:2094,integrat,integrating,2094,psi4manual/1.6.x/code_style.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/code_style.html,1,['integrat'],['integrating']
Deployability,"yapf can be integrated into widely used editors.; The Neoformat plugin can be configured; to format files when saving them to disk. How to impose code style through Git hooks¶; Git hooks are scripts that are run before or after certain Git events.; In this particular case, we want to make sure that all files that have been; added to the staging area with git add are formatted according to the style; before they committing them with git commit.; The hook to be modified is then the pre-commit hook.; PSI4 uses the pre-commit framework, with configuration file psi4/.pre-commit-config.yaml.; To take advantage of pre-commit hooks, you will need to install the pre-commit utility:. ::pip install pre-commit. or using Conda:. ::conda install pre_commit -c conda-forge. Finally, you need to install the actual hooks:. ::pre-commit install. Pre-commit hooks will be run on every git commit, but the --no-verify; option can be used to skip their execution.; Hooks are powerful, but integrating the formatter into your editor will prove; to be better. Hooks need to be installed anew for every fresh clone of the; repository you are working on. How to run code-style tools clang-format and yapf manually¶; The least recommended approach to formatting your code is to run manually the; formatters. The following commands will format only the files that have been; modified:. ::clang-format -style=file -i git diff –relative –name-only HEAD – *.cc *.h; yapf -i git diff –relative –name-only HEAD – *.py. How and when to not apply code styling to your contributions¶; TODO. table of contents. Code style conventions; How to impose code style through your editor; How to impose code style through Git hooks; How to run code-style tools clang-format and yapf manually; How and when to not apply code styling to your contributions. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Code style conventions. © Copyright 2007-2022, The Psi4 Project.; Last updat",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/code_style.html:2094,integrat,integrating,2094,psi4manual/1.7.x/code_style.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/code_style.html,1,['integrat'],['integrating']
Deployability,"yapf can be integrated into widely used editors.; The Neoformat plugin can be configured; to format files when saving them to disk. How to impose code style through Git hooks¶; Git hooks are scripts that are run before or after certain Git events.; In this particular case, we want to make sure that all files that have been; added to the staging area with git add are formatted according to the style; before they committing them with git commit.; The hook to be modified is then the pre-commit hook.; PSI4 uses the pre-commit framework, with configuration file psi4/.pre-commit-config.yaml.; To take advantage of pre-commit hooks, you will need to install the pre-commit utility:. ::pip install pre-commit. or using Conda:. ::conda install pre_commit -c conda-forge. Finally, you need to install the actual hooks:. ::pre-commit install. Pre-commit hooks will be run on every git commit, but the --no-verify; option can be used to skip their execution.; Hooks are powerful, but integrating the formatter into your editor will prove; to be better. Hooks need to be installed anew for every fresh clone of the; repository you are working on. How to run code-style tools clang-format and yapf manually¶; The least recommended approach to formatting your code is to run manually the; formatters. The following commands will format only the files that have been; modified:. ::clang-format -style=file -i git diff –relative –name-only HEAD – *.cc *.h; yapf -i git diff –relative –name-only HEAD – *.py. How and when to not apply code styling to your contributions¶; TODO. table of contents. Code style conventions; How to impose code style through your editor; How to impose code style through Git hooks; How to run code-style tools clang-format and yapf manually; How and when to not apply code styling to your contributions. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Code style conventions. © Copyright 2007-2023, The Psi4 Project.; Last upd",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/code_style.html:2096,integrat,integrating,2096,psi4manual/1.8.x/code_style.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/code_style.html,1,['integrat'],['integrating']
Deployability,"yapf can be integrated into widely used editors.; The Neoformat plugin can be configured; to format files when saving them to disk. How to impose code style through Git hooks¶; Git hooks are scripts that are run before or after certain Git events.; In this particular case, we want to make sure that all files that have been; added to the staging area with git add are formatted according to the style; before they committing them with git commit.; The hook to be modified is then the pre-commit hook.; PSI4 uses the pre-commit framework, with configuration file psi4/.pre-commit-config.yaml.; To take advantage of pre-commit hooks, you will need to install the pre-commit utility:. ::pip install pre-commit. or using Conda:. ::conda install pre_commit -c conda-forge. Finally, you need to install the actual hooks:. ::pre-commit install. Pre-commit hooks will be run on every git commit, but the --no-verify; option can be used to skip their execution.; Hooks are powerful, but integrating the formatter into your editor will prove; to be better. Hooks need to be installed anew for every fresh clone of the; repository you are working on. How to run code-style tools clang-format and yapf manually¶; The least recommended approach to formatting your code is to run manually the; formatters. The following commands will format only the files that have been; modified:. ::clang-format -style=file -i git diff –relative –name-only HEAD – *.cc *.h; yapf -i git diff –relative –name-only HEAD – *.py. How and when to not apply code styling to your contributions¶; TODO. table of contents. Code style conventions; How to impose code style through your editor; How to impose code style through Git hooks; How to run code-style tools clang-format and yapf manually; How and when to not apply code styling to your contributions. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.9.1;  · . PSI4. Code style conventions. © Copyright 2007-2024, The Psi4 Project.; Last upd",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/code_style.html:2096,integrat,integrating,2096,psi4manual/1.9.x/code_style.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/code_style.html,1,['integrat'],['integrating']
Deployability,"ymlinks the script head matter advises. Generate download page for psicode.org¶. Be in repo psicode-hugo-website; Copy and edit new file akin to https://github.com/psi4/psicode-hugo-website/blob/master/content/installs/v13rc2.md. Note the edition string v13rc2 in frontmatter for this and future filenames; Copy and edit new file akin to https://github.com/psi4/psicode-hugo-website/blob/master/data/installs/v13rc2.yaml for menu and notes content; Enter scripts/ dir and edit primarily https://github.com/psi4/psicode-hugo-website/blob/master/scripts/install-generator.py#L9 but also any other arrays or messages that should change.; Run the install-generator.py in place. It will dump new files into data/installs/ _subdirs_. Be sure to git add them.; Installer page is now ready.; Shift “latest” alias in frontmatter from whichever page is currently active to the new page. This makes sure “Downloads” on the navigation bar points to new page.; Conscientiously, one should test. installer downloads in Mac and Linux. And actually installing them and psi4 --test them.; that download button and curl downloading register on the download counters on vergil. Commit the new files, PR, and deploy psicode site; Petition on Slack for testers. Collect documentation snapshot¶. Documentation is built automatically by GHA from the latest psi4 master commit. It gets pushed to the psi4/psi4docs repository and thence served by netlify to a site independent of psicode.org. The netlify psicode.org site has a redirect so that psicode.org/psi4manual/master presents the psi4docs netlify content.; GHA controller is https://github.com/psi4/psi4/blob/master/.github/workflows/docs.yml; This setup works great for “latest” docs, but it won’t build a nice copy on the tag because the tag commit is pushed before the tag itself, so the version shows up “undefined”.; So, anytime after “Tag (pre)release” is over, navigate on psi4 GH to the tag commit (not the record commit) and retrigger the docs GHA. Download ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/manage_release-1.html:16286,install,installer,16286,psi4manual/1.5.0/manage_release-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/manage_release-1.html,2,['install'],['installer']
Deployability,"ymlinks the script head matter advises. Generate download page for psicode.org¶. Be in repo psicode-hugo-website; Copy and edit new file akin to https://github.com/psi4/psicode-hugo-website/blob/master/content/installs/v13rc2.md. Note the edition string v13rc2 in frontmatter for this and future filenames; Copy and edit new file akin to https://github.com/psi4/psicode-hugo-website/blob/master/data/installs/v13rc2.yaml for menu and notes content; Enter scripts/ dir and edit primarily https://github.com/psi4/psicode-hugo-website/blob/master/scripts/install-generator.py#L9 but also any other arrays or messages that should change.; Run the install-generator.py in place. It will dump new files into data/installs/ _subdirs_. Be sure to git add them.; Installer page is now ready.; Shift “latest” alias in frontmatter from whichever page is currently active to the new page. This makes sure “Downloads” on the navigation bar points to new page.; Conscientiously, one should test. installer downloads in Mac and Linux. And actually installing them and psi4 --test them.; that download button and curl downloading register on the download counters on vergil. Commit the new files, PR, and deploy psicode site; Petition on Slack for testers. Collect documentation snapshot¶. Documentation is built automatically by GHA from the latest psi4 master commit. It gets pushed to the psi4/psi4docs repository and thence served by netlify to a site independent of psicode.org. The netlify psicode.org site has a redirect so that psicode.org/psi4manual/master presents the psi4docs netlify content.; GHA controller is psi4/.github/workflows/docs.yml; This setup works great for “latest” docs, but it won’t build a nice copy on the tag because the tag commit is pushed before the tag itself, so the version shows up “undefined”.; So, anytime after “Tag (pre)release” is over, navigate on psi4 GH to the tag commit (not the record commit) and retrigger the docs GHA. Download the artifact (zipped docs dir) at th",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/manage_release.html:16361,install,installer,16361,psi4manual/1.6.x/manage_release.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/manage_release.html,3,['install'],['installer']
Deployability,"your function. Add near the top of your function code like the below (less the final two lines). The net result of this code is that if the user specifies no *_func arguments, then energy() gets called. If the user defines xx_func, then its value gets called. If the user defines func, then its value gets reassigned to xx_func, func itself is deleted, and xx_func() gets called. Whatever is getting called is stored in func within the function.; # Establish function to call; if not('xx_func' in kwargs):; if ('func' in kwargs):; kwargs['xx_func'] = kwargs['func']; del kwargs['func']; else:; kwargs['xx_func'] = energy; func = kwargs['xx_func']; if not func:; raise ValidationError('Function \'%s\' does not exist to be called by wrapper counterpoise_correct.' % (func.__name__)); if (func is db):; raise ValidationError('Wrapper xx is unhappy to be calling function \'%s\'.' % (func.__name__)). If specific interoperabilities are known, code them in. For example, if xx shouldn’t call db, add the last two lines above to the xx function. If db shouldn’t call xx, add the following two lines below to the db function.; if (func is xx):; raise ValidationError('Wrapper database is unhappy to be calling function \'%s\'.' % (func.__name__)). Create a multipart test case that runs some intercalls between your function and others (akin to pywrap_all). In trials, permute the order of calls a few times to expose any calls that don’t clean up after themselves and need further attention. When all is validated, add your findings to the great Permitted nesting of Psithon functions table in the documentation. Previous topic; Plugins: Adding New Functionality to PSI4; Next topic; Documentation; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Contributions: Intro to Programming in PSI4 ». © Copyright 2012, Psi4 Project.; Last updated on Sep 30, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/bestpractices_py-1.html:6796,update,updated,6796,psi4manual/4.0b2/bestpractices_py-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/bestpractices_py-1.html,2,['update'],['updated']
Deployability,"ype, wfn); else:; return ret_ptype. def _findif_schema_to_wfn(findif_model: AtomicResult) -> core.Wavefunction:; """"""Helper function to produce Wavefunction and Psi4 files from a FiniteDifference-flavored AtomicResult."""""". # new skeleton wavefunction w/mol, highest-SCF basis (just to choose one), & not energy; mol = core.Molecule.from_schema(findif_model.molecule.dict(), nonphysical=True); sbasis = ""def2-svp"" if (findif_model.model.basis == ""(auto)"") else findif_model.model.basis; basis = core.BasisSet.build(mol, ""ORBITAL"", sbasis, quiet=True); wfn = core.Wavefunction(mol, basis); if hasattr(findif_model.provenance, ""module""):; wfn.set_module(findif_model.provenance.module). # setting CURRENT E/G/H on wfn below catches Wfn.energy_, gradient_, hessian_; # setting CURRENT E/G/H on core below is authoritative P::e record; for qcv, val in findif_model.extras[""qcvars""].items():; for obj in [core, wfn]:; obj.set_variable(qcv, val). return wfn. def hessian_write(wfn: core.Wavefunction):; if core.get_option('FINDIF', 'HESSIAN_WRITE'):; filename = core.get_writer_file_prefix(wfn.molecule().name()) + "".hess""; with open(filename, 'wb') as handle:; qcdb.hessparse.to_string(np.asarray(wfn.hessian()), handle, dtype='psi4'). def gradient_write(wfn: core.Wavefunction):; if core.get_option('FINDIF', 'GRADIENT_WRITE'):; filename = core.get_writer_file_prefix(wfn.molecule().name()) + "".grad""; qcdb.gradparse.to_string(np.asarray(wfn.gradient()),; filename,; dtype='GRD',; mol=wfn.molecule(),; energy=wfn.energy()). def _rms(arr: Union[core.Matrix, np.ndarray]) -> float:; """"""Compute root-mean-square of array, be it Psi4 or NumPy array.""""""; if isinstance(arr, np.ndarray):; return np.sqrt(np.mean(np.square(arr))); else:; return arr.rms(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .  · ; 1.7;  · . PSI4. Module code; psi4.driver.driver_findif. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/driver_findif.html:54819,update,updated,54819,psi4manual/1.7.x/_modules/psi4/driver/driver_findif.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/driver_findif.html,1,['update'],['updated']
Deployability,"ype: boolean; Default: false. RUN_MP4¶. do only evaluate mp4 energy?. Type: boolean; Default: false. RUN_CCSD¶. do ccsd rather than qcisd?. Type: boolean; Default: false. RUN_CEPA¶. Is this a CEPA job? This parameter is used internally by the pythond driver. Changing its value won’t have any effect on the procedure. Type: boolean; Default: false. COMPUTE_TRIPLES¶. Do compute triples contribution?. Type: boolean; Default: true. COMPUTE_MP4_TRIPLES¶. Do compute MP4 triples contribution?. Type: boolean; Default: false. DFCC¶. Do use density fitting or cholesky decomposition in CC? This keyword is used internally by the driver. Changing its value will have no effect on the computation. Type: boolean; Default: false. CEPA_LEVEL¶. Which coupled-pair method is called? This parameter is used internally by the python driver. Changing its value won’t have any effect on the procedure. Type: string; Default: CEPA(0). table of contents. FNOCC: Frozen natural orbitals for CCSD(T), QCISD(T), CEPA, and MP4; Frozen natural orbitals (FNO); QCISD(T), CCSD(T), MP4, and CEPA; Quadratic configuration interaction and coupled cluster; Many-body perturbation theory; Coupled electron pair approximation; Density-fitted coupled cluster; Gn theory; Supported methods; Basic FNOCC Keywords; BASIS; FREEZE_CORE; R_CONVERGENCE; E_CONVERGENCE; MAXITER; DIIS_MAX_VECS; NAT_ORBS; OCC_TOLERANCE; TRIPLES_LOW_MEMORY; CC_TIMINGS; DF_BASIS_CC; CHOLESKY_TOLERANCE; CEPA_NO_SINGLES; DIPMOM. Advanced FNOCC Keywords; SCS_MP2; MP2_SCALE_OS; MP2_SCALE_SS; SCS_CCSD; CC_SCALE_OS; CC_SCALE_SS; RUN_MP2; RUN_MP3; RUN_MP4; RUN_CCSD; RUN_CEPA; COMPUTE_TRIPLES; COMPUTE_MP4_TRIPLES; DFCC; CEPA_LEVEL. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Theoretical Methods: SCF to FCI; FNOCC: Frozen natural orbitals for CCSD(T), QCISD(T), CEPA, and MP4. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/fnocc.html:19708,configurat,configuration,19708,psi4manual/1.7.x/fnocc.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/fnocc.html,2,"['configurat', 'update']","['configuration', 'updated']"
Deployability,"ype: boolean; Default: false. T3_WS_INCORE¶. Do build W intermediates required for cc3 in core memory?. Type: boolean; Default: false. Expert¶. AO_BASIS¶. The algorithm to use for the terms If AO_BASIS is NONE, the MO-basis integrals will be used; if AO_BASIS is DISK, the AO-basis integrals stored on disk will be used; if AO_BASIS is DIRECT, the AO-basis integrals will be computed on the fly as necessary. NB: The DIRECT option is not fully implemented and should only be used by experts. Default is NONE. Note: The developers recommend use of this keyword only as a last resort because it significantly slows the calculation. The current algorithms for handling the MO-basis four-virtual-index integrals have been significantly improved and are preferable to the AO-based approach. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. FORCE_RESTART¶. Do restart the coupled-cluster iterations even if MO phases are screwed up?. Type: boolean; Default: false. WFN¶. Wavefunction type. Type: string; Possible Values: CCSD, CCSD_T, EOM_CCSD, LEOM_CCSD, BCCD, BCCD_T, CC2, CC3, EOM_CC2, EOM_CC3, CCSD_MVD; Default: NONE. Table Of Contents. CCENERGY; General; ABCD; ANALYZE; BRUECKNER_ORBS_R_CONVERGENCE; CACHELEVEL; CACHETYPE; CC_NUM_THREADS; CC_OS_SCALE; CC_SS_SCALE; DIIS; LOCAL; LOCAL_CPHF_CUTOFF; LOCAL_CUTOFF; LOCAL_METHOD; LOCAL_PAIRDEF; LOCAL_WEAKP; MAXITER; MP2_AMPS_PRINT; MP2_OS_SCALE; MP2_SS_SCALE; NEW_TRIPLES; NUM_AMPS_PRINT; PAIR_ENERGIES_PRINT; PROPERTY; REFERENCE; RESTART; R_CONVERGENCE; SCSN_MP2; SCS_CCSD; SCS_MP2; SEMICANONICAL; SPINADAPT_ENERGIES; T2_COUPLED; T3_WS_INCORE. Expert; AO_BASIS; FORCE_RESTART; WFN. Previous topic; ZETA; Next topic; ABCD; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Appendices »; Keywords by Module ». © Copyright 2012, The Psi4 Project.; Last updated on Oct 16, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/autodir_options_c/module__ccenergy-1.html:7202,update,updated,7202,psi4manual/4.0b3/autodir_options_c/module__ccenergy-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodir_options_c/module__ccenergy-1.html,2,['update'],['updated']
Deployability,"ype: boolean; Default: true. WFN_SYM¶. The symmetry of the target wavefunction, specified either by Schönflies symbol, or irrep number (in Cotton ordering). Type: string; Possible Values: A, AG, AU, AP, APP, A1, A2, B, BG, BU, B1, B2, B3, B1G, B2G, B3G, B1U, B2U, B3U, 0, 1, 2, 3, 4, 5, 6, 7, 8; Default: 1. ZERO_INTERNAL_AMPS¶. Do zero the internal amplitudes, i.e., those that map reference determinants onto each other?. Type: boolean; Default: true. Expert¶. PERTURB_CBS¶. Do compute the perturbative corrections for basis set incompleteness?. Type: boolean; Default: false. PERTURB_CBS_COUPLING¶. Do include the terms that couple different reference determinants in perturbative CBS correction computations?. Type: boolean; Default: true. TIKHONOW_TRIPLES¶. Do use Tikhonow regularization in (T) computations?. Type: boolean; Default: false. USE_SPIN_SYMMETRY¶. Whether to use spin symmetry to map equivalent configurations onto each other, for efficiency. Type: boolean; Default: true. Table Of Contents. PSIMRCC; General; ACTIVE; CC_NUM_THREADS; CORR_ANSATZ; CORR_CCSD_T; CORR_CHARGE; CORR_MULTP; CORR_REFERENCE; CORR_WFN; COUPLING; COUPLING_TERMS; DAMPING_PERCENTAGE; DIAGONALIZE_HEFF; DIAGONAL_CCSD_T; DIIS_MAX_VECS; DIIS_START; E_CONVERGENCE; FAVG_CCSD_T; FOLLOW_ROOT; FROZEN_DOCC; FROZEN_UOCC; HEFF4; HEFF_PRINT; LOCK_SINGLET; MAXITER; MP2_CCSD_METHOD; MP2_GUESS; NO_SINGLES; OFFDIAGONAL_CCSD_T; PT_ENERGY; RESTRICTED_DOCC; R_CONVERGENCE; SMALL_CUTOFF; TIKHONOW_MAX; TIKHONOW_OMEGA; TRIPLES_ALGORITHM; TRIPLES_DIIS; USE_SPIN_SYM; WFN_SYM; ZERO_INTERNAL_AMPS. Expert; PERTURB_CBS; PERTURB_CBS_COUPLING; TIKHONOW_TRIPLES; USE_SPIN_SYMMETRY. Previous topic; TEST_DERIVATIVE_B; Next topic; ACTIVE; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Appendices »; Keywords by Module ». © Copyright 2012, Psi4 Project.; Last updated on Sep 30, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/autodir_options_c/module__psimrcc-1.html:6556,update,updated,6556,psi4manual/4.0b2/autodir_options_c/module__psimrcc-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/autodir_options_c/module__psimrcc-1.html,2,['update'],['updated']
Deployability,"ype: double; Default: 0.90. LOCAL_IBO_USE_STARS¶. IBO Stars procedure. Type: boolean; Default: false. LOCAL_MAXITER¶. Maximum iterations in localization. Type: integer; Default: 1000. MAXITER¶. Maximum number of iterations for CPHF. Type: integer; Default: 50. SSAPT0_SCALE¶. Do sSAPT0 exchange-scaling with F-SAPT. Type: boolean; Default: false. Expert¶. CUBIC_BASIS_TOLERANCE¶. CubicScalarGrid basis cutoff. Type: conv double; Default: 1.0e-12. CUBIC_BLOCK_MAX_POINTS¶. CubicScalarGrid maximum number of grid points per evaluation block. Type: integer; Default: 1000. FISAPT_MEM_SAFETY_FACTOR¶. Memory safety factor for heavy FISAPT operations. Type: double; Default: 0.9. LOCAL_IBO_CONDITION¶. Condition number to use in IBO metric inversions. Type: double; Default: 1.0e-7. LOCAL_USE_GHOSTS¶. Use ghost atoms in Pipek-Mezey or IBO metric. Type: boolean; Default: false. MINAO_BASIS¶. MinAO Basis for IBO. Type: string; Default: CC-PVTZ-MINAO. table of contents. FISAPT; General; CUBIC_GRID_OVERAGE; CUBIC_GRID_SPACING; D_CONVERGENCE; FISAPT_CHARGE_COMPLETENESS; FISAPT_CUBE_DENSMAT; FISAPT_CUBE_LINKIBOS; FISAPT_CUBE_LINKIHOS; FISAPT_DO_FSAPT; FISAPT_DO_FSAPT_DISP; FISAPT_DO_PLOT; FISAPT_EXCH_PARPERP; FISAPT_FSAPT_EXCH_SCALE; FISAPT_FSAPT_FILEPATH; FISAPT_FSAPT_IND_RESPONSE; FISAPT_FSAPT_IND_SCALE; FISAPT_FSSAPT_FILEPATH; FISAPT_LINK_ASSIGNMENT; FISAPT_LINK_ORTHO; FISAPT_LINK_SELECTION; FISAPT_MANUAL_LINKS; FISAPT_PLOT_FILEPATH; INTS_TOLERANCE; LOCAL_CONVERGENCE; LOCAL_IBO_POWER; LOCAL_IBO_STARS; LOCAL_IBO_STARS_COMPLETENESS; LOCAL_IBO_USE_STARS; LOCAL_MAXITER; MAXITER; SSAPT0_SCALE. Expert; CUBIC_BASIS_TOLERANCE; CUBIC_BLOCK_MAX_POINTS; FISAPT_MEM_SAFETY_FACTOR; LOCAL_IBO_CONDITION; LOCAL_USE_GHOSTS; MINAO_BASIS. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; FISAPT. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/autodir_options_c/module__fisapt.html:5248,update,updated,5248,psi4manual/1.8.x/autodir_options_c/module__fisapt.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/module__fisapt.html,1,['update'],['updated']
Deployability,"ype: double; Default: 0.90. LOCAL_IBO_USE_STARS¶. IBO Stars procedure. Type: boolean; Default: false. LOCAL_MAXITER¶. Maximum iterations in localization. Type: integer; Default: 1000. MAXITER¶. Maximum number of iterations for CPHF. Type: integer; Default: 50. SSAPT0_SCALE¶. Do sSAPT0 exchange-scaling with F-SAPT. Type: boolean; Default: false. Expert¶. CUBIC_BASIS_TOLERANCE¶. CubicScalarGrid basis cutoff. Type: conv double; Default: 1.0e-12. CUBIC_BLOCK_MAX_POINTS¶. CubicScalarGrid maximum number of grid points per evaluation block. Type: integer; Default: 1000. FISAPT_MEM_SAFETY_FACTOR¶. Memory safety factor for heavy FISAPT operations. Type: double; Default: 0.9. LOCAL_IBO_CONDITION¶. Condition number to use in IBO metric inversions. Type: double; Default: 1.0e-7. LOCAL_USE_GHOSTS¶. Use ghost atoms in Pipek-Mezey or IBO metric. Type: boolean; Default: false. MINAO_BASIS¶. MinAO Basis for IBO. Type: string; Default: CC-PVTZ-MINAO. table of contents. FISAPT; General; CUBIC_GRID_OVERAGE; CUBIC_GRID_SPACING; D_CONVERGENCE; FISAPT_CHARGE_COMPLETENESS; FISAPT_CUBE_DENSMAT; FISAPT_CUBE_LINKIBOS; FISAPT_CUBE_LINKIHOS; FISAPT_DO_FSAPT; FISAPT_DO_FSAPT_DISP; FISAPT_DO_PLOT; FISAPT_EXCH_PARPERP; FISAPT_FSAPT_EXCH_SCALE; FISAPT_FSAPT_FILEPATH; FISAPT_FSAPT_IND_RESPONSE; FISAPT_FSAPT_IND_SCALE; FISAPT_FSSAPT_FILEPATH; FISAPT_LINK_ASSIGNMENT; FISAPT_LINK_ORTHO; FISAPT_LINK_SELECTION; FISAPT_MANUAL_LINKS; FISAPT_PLOT_FILEPATH; INTS_TOLERANCE; LOCAL_CONVERGENCE; LOCAL_IBO_POWER; LOCAL_IBO_STARS; LOCAL_IBO_STARS_COMPLETENESS; LOCAL_IBO_USE_STARS; LOCAL_MAXITER; MAXITER; SSAPT0_SCALE. Expert; CUBIC_BASIS_TOLERANCE; CUBIC_BLOCK_MAX_POINTS; FISAPT_MEM_SAFETY_FACTOR; LOCAL_IBO_CONDITION; LOCAL_USE_GHOSTS; MINAO_BASIS. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.9.1;  · . PSI4. Appendices; Keywords by Module; FISAPT. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 08 February 2024 09:32PM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/autodir_options_c/module__fisapt.html:5248,update,updated,5248,psi4manual/1.9.x/autodir_options_c/module__fisapt.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/autodir_options_c/module__fisapt.html,1,['update'],['updated']
Deployability,"ype: integer; Default: -1. DMRG_LOCAL_INIT¶. Whether to start the active space localization process from a random unitary or the unit matrix. Type: boolean; Default: true. DMRG_MOLDEN_WRITE¶. DMRG-CI or converged DMRG-SCF orbitals in molden format. Type: boolean; Default: false. DMRG_MPS_WRITE¶. Whether or not to create intermediary MPS checkpoints. Type: boolean; Default: false. DMRG_MULTIPLICITY¶. The DMRG wavefunction multiplicity in the form (2S+1). Type: integer; Default: -1. DMRG_OPDM_AO_PRINT¶. Print out the density matrix in the AO basis. Type: boolean; Default: false. DMRG_PRINT_CORR¶. Whether or not to print the correlation functions after the DMRG calculation. Type: boolean; Default: false. DMRG_SCF_ACTIVE_SPACE¶. Which active space to use for DMRG calculations: –> input with SCF rotations (INPUT); –> natural orbitals (NO); –> localized and ordered orbitals (LOC). Type: string; Possible Values: INPUT, NO, LOC; Default: INPUT. DMRG_SCF_DIIS_THR¶. When the update norm is smaller than this value DIIS starts. Type: double; Default: 1e-2. DMRG_SCF_GRAD_THR¶. The density RMS convergence to stop an instruction during successive DMRG instructions. Type: double; Default: 1.e-6. DMRG_SCF_MAX_ITER¶. Maximum number of DMRG iterations. Type: integer; Default: 100. DMRG_SCF_STATE_AVG¶. Whether or not to use state-averaging for roots >=2 with DMRG-SCF. Type: boolean; Default: true. DMRG_SWEEP_DVDSON_RTOL¶. The residual tolerances for the Davidson diagonalization during DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_ENERGY_CONV¶. The energy convergence to stop an instruction during successive DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_MAX_SWEEPS¶. The maximum number of sweeps to stop an instruction during successive DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_NOISE_PREFAC¶. The noise prefactors for successive DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_STATES¶. The number of reduced renormalized",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/autodir_options_c/module__dmrg-1.html:2410,update,update,2410,psi4manual/1.3.2/autodir_options_c/module__dmrg-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/autodir_options_c/module__dmrg-1.html,16,['update'],['update']
Deployability,"ype: integer; Default: -1. DMRG_LOCAL_INIT¶. Whether to start the active space localization process from a random unitary or the unit matrix. Type: boolean; Default: true. DMRG_MOLDEN_WRITE¶. DMRG-CI or converged DMRG-SCF orbitals in molden format. Type: boolean; Default: false. DMRG_MPS_WRITE¶. Whether or not to create intermediary MPS checkpoints. Type: boolean; Default: false. DMRG_MULTIPLICITY¶. The DMRG wavefunction multiplicity in the form (2S+1). Type: integer; Default: -1. DMRG_OPDM_AO_PRINT¶. Print out the density matrix in the AO basis. Type: boolean; Default: false. DMRG_PRINT_CORR¶. Whether or not to print the correlation functions after the DMRG calculation. Type: boolean; Default: false. DMRG_SCF_ACTIVE_SPACE¶. Which active space to use for DMRG calculations: –> input with SCF rotations (INPUT); –> natural orbitals (NO); –> localized and ordered orbitals (LOC). Type: string; Possible Values: INPUT, NO, LOC; Default: INPUT. DMRG_SCF_DIIS_THR¶. When the update norm is smaller than this value DIIS starts. Type: double; Default: 1e-2. DMRG_SCF_GRAD_THR¶. The density RMS convergence to stop an instruction during successive DMRG instructions. Type: double; Default: 1.e-6. DMRG_SCF_MAX_ITER¶. Maximum number of DMRG iterations. Type: integer; Default: 100. DMRG_SCF_STATE_AVG¶. Whether or not to use state-averaging for roots >=2 with DMRG-SCF. Type: boolean; Default: true. DMRG_SWEEP_DVDSON_RTOL¶. The residual tolerances for the Davidson diagonalization during DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_ENERGY_CONV¶. The energy convergence to stop an instruction during successive DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_MAX_SWEEPS¶. The maximum number of sweeps to stop an instruction during successive DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_NOISE_PREFAC¶. The noiseprefactors for successive DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_STATES¶. The number of reduced renormalized ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/chemps2-1.html:4279,update,update,4279,psi4manual/1.0.0/chemps2-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/chemps2-1.html,4,['update'],['update']
Deployability,"ype: string; Default: No Default. LOCAL_WEAKP¶. Desired treatment of “weak pairs” in the local-CCSD method. The value of NONE (unique avaliable option) treats weak pairs in the same manner as strong pairs. Type: string; Default: NONE. MAXITER¶. Maximum number of iterations. Type: integer; Default: 50. NUM_AMPS_PRINT¶. Number of important CC amplitudes per excitation level to print. CC analog to NUM_DETS_PRINT. Type: integer; Default: 10. PROP_ALL¶. Compute unrelaxed properties for all excited states. Type: boolean; Default: true. PROP_ROOT¶. Root number (within its irrep) for computing properties. Type: integer; Default: 1. PROP_SYM¶. The symmetry of states. Type: integer; Default: 1. RESTART¶. Do restart the coupled-cluster iterations from old and amplitudes?. Type: boolean; Default: false. ROOTS_PER_IRREP¶. The number of electronic states to computed, per irreducible representation. Type: array; Default: No Default. R_CONVERGENCE¶. Convergence criterion for wavefunction (change) in CC lambda-amplitude equations. Type: conv double; Default: 1e-7. SEKINO¶. Do Sekino-Bartlett size-extensive model-III?. Type: boolean; Default: false. ZETA¶. Do use zeta?. Type: boolean; Default: false. Expert¶. JOBTYPE¶. Type of job being performed. Type: string; Default: No Default. WFN¶. Wavefunction type. Type: string; Default: SCF. Table Of Contents. CCLAMBDA; General; ABCD; AO_BASIS; CACHELEVEL; DIIS; LOCAL; LOCAL_CPHF_CUTOFF; LOCAL_CUTOFF; LOCAL_FILTER_SINGLES; LOCAL_METHOD; LOCAL_PAIRDEF; LOCAL_WEAKP; MAXITER; NUM_AMPS_PRINT; PROP_ALL; PROP_ROOT; PROP_SYM; RESTART; ROOTS_PER_IRREP; R_CONVERGENCE; SEKINO; ZETA. Expert; JOBTYPE; WFN. Previous topic; WFN; Next topic; ABCD; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Appendices »; Keywords by Module ». © Copyright 2012, The Psi4 Project.; Last updated on Oct 16, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/autodir_options_c/module__cclambda-1.html:3889,update,updated,3889,psi4manual/4.0b3/autodir_options_c/module__cclambda-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodir_options_c/module__cclambda-1.html,2,['update'],['updated']
