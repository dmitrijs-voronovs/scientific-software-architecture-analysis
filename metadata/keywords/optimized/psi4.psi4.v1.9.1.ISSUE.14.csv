quality_attribute,sentence,source,author,repo,version,id,keyword,matched_word,match_idx,wiki,url,total_similar,target_keywords,target_matched_words
Testability, tests/fsapt1/fsapt-ref/Total.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-146 (0); > - _A_ tests/fsapt1/fsapt-ref/ZA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-147 (0); > - _A_ tests/fsapt1/fsapt-ref/ZB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-148 (0); > - _A_ tests/fsapt1/fsapt-ref/fA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-149 (0); > - _A_ tests/fsapt1/fsapt-ref/fB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-150 (0); > - _A_ tests/fsapt1/fsapt-ref/fragA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-151 (0); > - _A_ tests/fsapt1/fsapt-ref/fragB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-152 (0); > - _A_ tests/fsapt1/fsapt-ref/fsapt.dat; > https://github.com/psi4/psi4/pull/470/files#diff-153 (0); > - _A_ tests/fsapt1/fsapt-ref/geom.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-154 (0); > - _A_ tests/fsapt1/fsapt-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-155 (0); > - _A_ tests/fsapt1/fsapt-ref/orient.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-156 (0); > - _A_ tests/fsapt1/fsapt-ref/run.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-157 (0); > - _A_ tests/fsapt1/fsapt-ref/vis.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-158 (0); > - _A_ tests/fsapt1/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-159 (0); > - _A_ tests/fsapt1/output.ref; > https://github.com/psi4/psi4/pull/470/files#diff-160 (0); > - _A_ tests/fsapt2/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-161 (0); > - _A_ tests/fsapt2/README; > https://github.com/psi4/psi4/pull/470/files#diff-162 (0); > - _A_ tests/fsapt2/fsapt-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-163 (0); > - _A_ tests/fsapt2/fsapt-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-164 (0); > - _A_ tests/fsapt2/fsapt-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-165 (0); > - _A_ tests/f,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/470#issuecomment-249267903:17620,test,tests,17620,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903,1,['test'],['tests']
Testability, tests/fsapt1/fsapt-ref/ZA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-147 (0); > - _A_ tests/fsapt1/fsapt-ref/ZB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-148 (0); > - _A_ tests/fsapt1/fsapt-ref/fA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-149 (0); > - _A_ tests/fsapt1/fsapt-ref/fB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-150 (0); > - _A_ tests/fsapt1/fsapt-ref/fragA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-151 (0); > - _A_ tests/fsapt1/fsapt-ref/fragB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-152 (0); > - _A_ tests/fsapt1/fsapt-ref/fsapt.dat; > https://github.com/psi4/psi4/pull/470/files#diff-153 (0); > - _A_ tests/fsapt1/fsapt-ref/geom.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-154 (0); > - _A_ tests/fsapt1/fsapt-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-155 (0); > - _A_ tests/fsapt1/fsapt-ref/orient.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-156 (0); > - _A_ tests/fsapt1/fsapt-ref/run.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-157 (0); > - _A_ tests/fsapt1/fsapt-ref/vis.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-158 (0); > - _A_ tests/fsapt1/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-159 (0); > - _A_ tests/fsapt1/output.ref; > https://github.com/psi4/psi4/pull/470/files#diff-160 (0); > - _A_ tests/fsapt2/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-161 (0); > - _A_ tests/fsapt2/README; > https://github.com/psi4/psi4/pull/470/files#diff-162 (0); > - _A_ tests/fsapt2/fsapt-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-163 (0); > - _A_ tests/fsapt2/fsapt-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-164 (0); > - _A_ tests/fsapt2/fsapt-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-165 (0); > - _A_ tests/fsapt2/fsapt-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-166 (0); > - _A_ tests/fs,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/470#issuecomment-249267903:17725,test,tests,17725,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903,1,['test'],['tests']
Testability," them, of course). Feel free to make the changes locally, rather than through the GH interface, if that makes the git operations easier.; * edit sapt-dft1 test to be something like the below. This adds an extra section without the deltaHF correction. The analogous value in test sapt-dft2 is `DHF = -1.42620815`. This passes on master for me, so having the dHF=False pass on your PR will help verify the separate routing logic you added. With this in place, there won't be a need to separate out tests into another PR.; ```; #! SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. DHF = -0.01189736 #TEST; Eref_nh = {""SAPT ELST ENERGY"": -0.10190449, #TEST; ""SAPT EXCH ENERGY"": 0.36545706, #TEST; ""SAPT IND ENERGY"": -0.00840483, #TEST; ""SAPT DISP ENERGY"": -0.24398704, #TEST; ""CURRENT ENERGY"": 0.01122234} #TEST. Eref_h_disp = {""SAPT ELST ENERGY"": -0.10197193, #TEST; ""SAPT EXCH ENERGY"": 0.36569812, #TEST; ""SAPT IND ENERGY"": -0.00840370, #TEST; ""SAPT DISP ENERGY"": -0.26658499, #TEST; ""CURRENT ENERGY"": -0.01126250} #TEST. Eref_h_fixed = {""SAPT ELST ENERGY"": -0.10197193, #TEST; ""SAPT EXCH ENERGY"": 0.36569812, #TEST; ""SAPT IND ENERGY"": -0.00840370, #TEST; ""SAPT DISP ENERGY"": -0.26605283, #TEST; ""CURRENT ENERGY"": -0.01073034} #TEST. molecule dimer {; Ne; --; Ar 1 6.5; units bohr; }. set {; basis aug-cc-pvdz; scf_type df; sapt_dft_grac_shift_a 0.203293; sapt_dft_grac_shift_b 0.138264; }. # No hybrid kernel & no exch-disp scaling & no deltaHF; set SAPT_DFT_DO_DHF False; set SAPT_DFT_DO_HYBRID False; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; energy('sapt(dft)', molecule=dimer); for k, v in Eref_nh.items(): #TEST; if k in [""SAPT IND ENERGY"", ""CURRENT ENERGY""]:; ref = (v - DHF) / 1000.0; else:; ref = v / 1000.0; compare_values(ref, psi4.variable(k), 6, ""!hyb, xd=none, !dHF: "" + k) #TEST. # No hybrid kernel & no exch-disp scaling; set SAPT_DFT_DO_DHF True; set SAPT_DFT_DO_HYBRID False; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; energy('sapt(dft)', molecule=dimer); for k, v in E",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216:1391,TEST,TEST,1391,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216,1,['TEST'],['TEST']
Testability, to enable t...) [ 9%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_mp2d SKIPPED (Not detecting module mp2d. Install package if necessary to enable tests.) [ 10%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_dftd3 PASSED [ 12%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_libefp SKIPPED (Not detecting module libefp. Install package if necessary to enable tests.) [ 14%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_pcmsolver[pcm_helper] SKIPPED (Not detecting module pcmsolver. Install package if neces...) [ 16%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_erd SKIPPED (Not detecting module erd. Install package if necessary to enable tests.) [ 18%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_simint SKIPPED (Not detecting module simint. Install package if necessary to enable tests.) [ 20%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_json PASSED [ 21%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_cfour SKIPPED (Not detecting module cfour. Install package if necessary to enable tests.) [ 23%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf SKIPPED (Not detecting module v2rdm_casscf. Install package if necessary t...) [ 25%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_gpu_dfcc SKIPPED (Not detecting module gpu_dfcc. Install package if necessary to enable...) [ 27%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_grimme_3c PASSED [ 29%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_dkh SKIPPED (Not detecting module dkh. Install package if necessary to enable tests.) [ 30%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_snsmp2 SKIPPED (Not detecting module snsmp2. Install package if necessary to en,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:2383,test,tests,2383,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,1,['test'],['tests']
Testability," to form the Coulomb matrix, LinK performs much better. Some benchmarks comparing the Direct DF-J + LinK algorithm combination to other JK options in Psi4, for water clusters of varying sizes at the cc-pVDZ basis set, are attached:. ![Timing Plots of Water Clusters at cc-pVDZ](https://user-images.githubusercontent.com/26306559/198107808-42f3b855-13f0-4e14-8a50-c0402c16b94f.png). Small, non-diffuse basis sets are the specialty of Direct DF-J + LinK, and it reflects here, with DFJLinK outperforming the other integral-direct JK options for most of the water clusters, and being the fastest JK option tested overall for large water clusters. For specific comparisons to Direct DF-J + COSX, the closest current analogue in Psi4, DFJCOSK performs better for larger basis sets or more complex systems, while DFJLinK performs better for smaller basis sets and less complex systems from my testing. It may be worth noting that the DFJLinK in the listed benchmarks used a different implementation of Direct DF-J compared to the one in this PR, but I don't expect the results would change much because of that. The full of CompositeJK is planned to be done in 3 PRs. This PR is the first one. The second PR in the CompositeJK process is the combining of the DFJLinK and DFJCOSK subclasses into the initial ""CompositeJK"" subclass and the implementation of the planned CompositeJK User API/user-facing end. The final CompositeJK PR will be the refactoring of the CompositeJK backend to truly support arbitrary mixing and matching of J/K build algorithms. ## User API & Changelog headlines; - [x] The DO_LINK option has been removed.; - [x] The SCF_TYPE option ""LINK"" has been added, enabling use of the integral-direct density-fitted J + Linear Exchange K algorithm combination for JK computations. ## Dev notes & details; - [x] The new JK subclass ""DFJLinK"" has been added to Psi4. DFJLinK combines the integral-direct density fitted formation of J with the linear-scaling formation of the exact K through ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2762:3134,benchmark,benchmarks,3134,https://psicode.org,https://github.com/psi4/psi4/pull/2762,1,['benchmark'],['benchmarks']
Testability," to the fact that Matrix::copy() will reallocate the matrix if the matrix being copied has a different size or number of irreps:. void Matrix::copy(const Matrix\* cp); {; // Make sure we are the same size as cp; bool same = true;; if (nirrep_ != cp->nirrep_ || symmetry_ != cp->symmetry_) {; same = false;; }; else {; if (colspi_ != cp->colspi_ || rowspi_ != cp->rowspi_); same = false;; }. ```; if (same == false) {; release();; nirrep_ = cp->nirrep_;; symmetry_ = cp->symmetry_;; rowspi_ = Dimension(nirrep_);; colspi_ = Dimension(nirrep_);; for (int i=0; i<nirrep_; ++i) {; rowspi_[i] = cp->rowspi_[i];; colspi_[i] = cp->colspi_[i];; }; alloc();; }; ```. …; }. From looking at your code the matrix Ca does not use symmetry,. ```; SharedMatrix Ca = SharedMatrix(new Matrix(""Alpha MO Coefficients"", nso_, nmo_));; ```. but the one you request from the environment does because the calculation uses symmetry:. SharedMatrix moA = Process::environment.wavefunction()->Ca();. This is only speculative, but it could be easily tested. Maybe we should reconsider restricting Matrix::copy so that we eliminate the option to make copies between objects that do not have the same dimension. After all, if we are going to reallocate the memory we might as well just create a copy of the matrix with clone(). Francesco. On Jul 16, 2015, at 5:24 PM, Ugur Bozkaya <notifications@github.com<mailto:notifications@github.com>> wrote:. I am also very surprised how the saving MOs procedure yields wrong gradients. I do not read back the MOs from wfn during gradients. That code in the save_mo_to_wfn() function, which is on the line 328 of manager.cchttp://manager.cc. If I call save_mo_to_wfn() before gradients, then gradient code gives the wrong answer. Anyone can confirm me. It is really quite odd. Jet wrote that he will take a look it. Not sure whether he has the time or not. @jturneyhttps://github.com/jturney. —; Reply to this email directly or view it on GitHubhttps://github.com/psi4/psi4public/issues/127#",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/127#issuecomment-122116756:1047,test,tested,1047,https://psicode.org,https://github.com/psi4/psi4/issues/127#issuecomment-122116756,1,['test'],['tested']
Testability," tu1-h2o-energy ...................***Failed 0.05 sec; Start 402: psi4numpy-rhf; 8/12 Test #402: psi4numpy-rhf .................... Passed 4.50 sec; Start 404: psi4numpy-rhf-hessian; 9/12 Test #404: psi4numpy-rhf-hessian ............ Passed 5.47 sec; Start 409: python-energy; 10/12 Test #409: python-energy .................... Passed 1.99 sec; Start 422: json-schema-1-gradient; 11/12 Test #422: json-schema-1-gradient ........... Passed 4.46 sec; Start 424: chemps2-scf-n2; 12/12 Test #424: chemps2-scf-n2 ...................***Failed 0.06 sec. 33% tests passed, 8 tests failed out of 12. Label Time Summary:; addon = 0.06 sec*proc (1 test); cart = 0.17 sec*proc (3 tests); casscf = 0.21 sec*proc (1 test); cc = 0.06 sec*proc (1 test); chemps2 = 0.06 sec*proc (1 test); df = 0.06 sec*proc (1 test); dfmp2 = 0.06 sec*proc (1 test); fcidump = 0.06 sec*proc (1 test); json = 4.46 sec*proc (1 test); properties = 0.06 sec*proc (1 test); psi = 17.03 sec*proc (12 tests); psi4numpy = 9.97 sec*proc (2 tests); python = 1.99 sec*proc (1 test); quicktests = 17.03 sec*proc (12 tests); sapt = 0.06 sec*proc (1 test); scf = 0.06 sec*proc (1 test); smoketests = 17.03 sec*proc (12 tests); tutorial = 0.05 sec*proc (1 test). Total Test time (real) = 17.19 sec. The following tests FAILED:; 	 7 - casscf-sp (Failed); 	 22 - cc1 (Failed); 	132 - dfmp2-1 (Failed); 	196 - fcidump (Failed); 	330 - sapt1 (Failed); 	357 - scf-property (Failed); 	372 - tu1-h2o-energy (Failed); 	424 - chemps2-scf-n2 (Failed); Errors while running CTest; ```; The casscf-sp error is; ```; 7/428 Test: casscf-sp; Command: ""/usr/bin/python3.12"" ""/builddir/build/BUILD/psi4-1.3.2/tests/runtest.py"" ""/builddir/build/BUILD/psi4-1.3.2/tests/casscf-sp/input.dat"" ""/builddir/build/BUILD/psi4-1.3.2/redhat-linux; -build/testresults.log"" ""false"" ""/builddir/build/BUILD/psi4-1.3.2"" ""false"" ""/builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/tests/casscf-sp/output.dat"" ""/builddir/build/BUILD/psi4-1.3.2/; redhat-linux-build/stage/bin/psi4"" ""/",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3020#issuecomment-1676514680:1699,test,tests,1699,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1676514680,1,['test'],['tests']
Testability, tu2-ch2-energy ................... Passed 1.22 sec; Start 357: tu4-h2o-freq; 343/411 Test #356: scf-response1 .................... Passed 2.48 sec; Start 358: tu5-sapt; 344/411 Test #355: tu3-h2o-opt ...................... Passed 3.54 sec; Start 359: tu6-cp-ne2; 345/411 Test #240: ocepa-freq1 ...................... Passed 405.13 sec; Start 360: x2c1; 346/411 Test #350: dft-custom ....................... Passed 14.93 sec; Start 361: x2c2; 347/411 Test #346: sapt-dft1 ........................ Passed 22.71 sec; Start 362: x2c3; 348/411 Test #361: x2c2 ............................. Passed 2.47 sec; Start 363: zaptn-nh2; 349/411 Test #357: tu4-h2o-freq ..................... Passed 13.25 sec; Start 364: options1; 350/411 Test #364: options1 ......................... Passed 0.59 sec; Start 365: cubeprop-esp; 351/411 Test #363: zaptn-nh2 ........................ Passed 2.66 sec; Start 366: dft-smoke; 352/411 Test #362: x2c3 ............................. Passed 2.82 sec; Start 367: scf-hess1; 353/411 Test #342: soscf-dft ........................ Passed 31.94 sec; Start 368: scf-freq1; 354/411 Test #365: cubeprop-esp ..................... Passed 9.28 sec; Start 369: dft-jk; 355/411 Test #367: scf-hess1 ........................ Passed 8.14 sec; Start 370: scf-coverage; 356/411 Test #358: tu5-sapt ......................... Passed 23.64 sec; Start 371: dft-custom-dhdf; 357/411 Test #360: x2c1 ............................. Passed 19.20 sec; Start 372: dft-custom-hybrid; 358/411 Test #368: scf-freq1 ........................ Passed 9.41 sec; Start 373: dft-custom-mgga; 359/411 Test #370: scf-coverage ..................... Passed 4.41 sec; Start 374: dft-custom-gga; 360/411 Test #366: dft-smoke ........................ Passed 12.74 sec; Start 375: pywrap-bfs; 361/411 Test #369: dft-jk ........................... Passed 11.46 sec; Start 376: pywrap-align; 362/411 Test #348: sapt-compare ..................... Passed 43.16 sec; Start 377: pywrap-align-chiral; 363/411 Test #372: dft-cu,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1087#issuecomment-408854538:32933,Test,Test,32933,https://psicode.org,https://github.com/psi4/psi4/pull/1087#issuecomment-408854538,1,['Test'],['Test']
Testability," up update_mo!. ## Capability Loss/Gain; As a result of this switch, we lose the ability to ""level shift"" in OCC. ""Level shift"" is a misnomer and actually refers to scaling the diagonal elements of the DIIS B-matrix. When I'm done, the orbital convergence will be so much better that we won't notice it's gone. In the short term, this does cause more test failures. ## Questions; * Because we're losing ""level shifting"", we're losing some keywords. I don't know how to deprecate these. If they're provided as module-level keywords, then I don't know the technical details of how you would raise a warning message. The bigger problem is when they're global keywords. DFOCC still uses ""level shifting"", so I can only raise a warning when I know what module the user is in. Thoughts on how to handle this?; * Should we be losing ""level shifting""? We can add _damping_ to `libdiis` if there's demand for it. I think there are better things to do with my time. ## Quick Test Status; * Switching out the DIIS version caused the `omp2p5-2` test's OMP2.5 energy to fall outside convergence criteria, again emphasizing how unstable orbital convergence in OCC is. We'll find out what the actual value is by the time I'm done.; * Losing ""level shifting"" was enough to break the `ocepa-grad2` test. This test asks for a higher-than-normal convergence from OCC, so that's no surprise. (I imagine Psi ups the energy convergence default when the user requests a gradient.) As a temp fix, I lowered the demanded energy convergence from 8 to 7. Even after that, we're outside the test tolerance, so I changed the value to boot. If anybody is dying to know the correct answer, I can run it on my Python code.; * `omp2-2` encountered oscillatory convergence, and I responded by lowering the convergence we seek. Again, coupling amplitude and orbital DIIS will break the oscillations and render this test hack unnecessary.; * We may have lost other full tests, but we'll get them back at the end. ## So Lori Knows What t",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1783:3059,Test,Test,3059,https://psicode.org,https://github.com/psi4/psi4/pull/1783,2,"['Test', 'test']","['Test', 'test']"
Testability," use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.; Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations. psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_json; Using `psi4.json_wrapper.run_json` instead of `psi4.schema_wrapper.run_qcschema` is deprecated, and in 1.5 it will stop working. -- Docs: https://docs.pytest.org/en/stable/warnings.html; ========================================================================= short test summary info =========================================================================; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:13: Not detecting module gdma. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:162: Not detecting module mrcc. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:186: Not detecting module chemps2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:233: Not detecting module mp2d. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:428: Not detecting module libefp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:486: Not detecting module pcmsolver. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:733: Not detecting module erd. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:741: Not detecting module simint. Install package if necessary to enable tests.; SKIPPED [1] psi4",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:12453,test,tests,12453,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,1,['test'],['tests']
Testability," use in JK construction. Such a class will provide a home for any new separate J and K algorithm that gets added to Psi4 in the future (such as the in-progress CFMM). Additionally, the CompositeJK class will be designed in such as a way to enable arbitrary combinations of any available separate J and K build algorithm through a single JK subclass. This arbitrary mixing and matching is planned to be accesible in a user-friendly way. DFJLinK is the first step to this process. DFJLinK, itself, is a new JK subclass that combines the integral-direct density fitted J build algorithm from DFJCOSK with the LinK algorithm previously available in DirectJK. LinK was previously available for use in Psi4 via DirectJK, but was always disrecommended due to its combination with a normal DirectJK implementation for J construction. In conjunction with Direct DF-J to form the Coulomb matrix, LinK performs much better. Some benchmarks comparing the Direct DF-J + LinK algorithm combination to other JK options in Psi4, for water clusters of varying sizes at the cc-pVDZ basis set, are attached:. ![Timing Plots of Water Clusters at cc-pVDZ](https://user-images.githubusercontent.com/26306559/198107808-42f3b855-13f0-4e14-8a50-c0402c16b94f.png). Small, non-diffuse basis sets are the specialty of Direct DF-J + LinK, and it reflects here, with DFJLinK outperforming the other integral-direct JK options for most of the water clusters, and being the fastest JK option tested overall for large water clusters. For specific comparisons to Direct DF-J + COSX, the closest current analogue in Psi4, DFJCOSK performs better for larger basis sets or more complex systems, while DFJLinK performs better for smaller basis sets and less complex systems from my testing. It may be worth noting that the DFJLinK in the listed benchmarks used a different implementation of Direct DF-J compared to the one in this PR, but I don't expect the results would change much because of that. The full of CompositeJK is planned to ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2762:2245,benchmark,benchmarks,2245,https://psicode.org,https://github.com/psi4/psi4/pull/2762,1,['benchmark'],['benchmarks']
Testability," value in test sapt-dft2 is `DHF = -1.42620815`. This passes on master for me, so having the dHF=False pass on your PR will help verify the separate routing logic you added. With this in place, there won't be a need to separate out tests into another PR.; > ; > ```; > #! SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms.; > ; > DHF = -0.01189736 #TEST; > Eref_nh = {""SAPT ELST ENERGY"": -0.10190449, #TEST; > ""SAPT EXCH ENERGY"": 0.36545706, #TEST; > ""SAPT IND ENERGY"": -0.00840483, #TEST; > ""SAPT DISP ENERGY"": -0.24398704, #TEST; > ""CURRENT ENERGY"": 0.01122234} #TEST; > ; > Eref_h_disp = {""SAPT ELST ENERGY"": -0.10197193, #TEST; > ""SAPT EXCH ENERGY"": 0.36569812, #TEST; > ""SAPT IND ENERGY"": -0.00840370, #TEST; > ""SAPT DISP ENERGY"": -0.26658499, #TEST; > ""CURRENT ENERGY"": -0.01126250} #TEST; > ; > Eref_h_fixed = {""SAPT ELST ENERGY"": -0.10197193, #TEST; > ""SAPT EXCH ENERGY"": 0.36569812, #TEST; > ""SAPT IND ENERGY"": -0.00840370, #TEST; > ""SAPT DISP ENERGY"": -0.26605283, #TEST; > ""CURRENT ENERGY"": -0.01073034} #TEST; > ; > molecule dimer {; > Ne; > --; > Ar 1 6.5; > units bohr; > }; > ; > set {; > basis aug-cc-pvdz; > scf_type df; > sapt_dft_grac_shift_a 0.203293; > sapt_dft_grac_shift_b 0.138264; > }; > ; > # No hybrid kernel & no exch-disp scaling & no deltaHF; > set SAPT_DFT_DO_DHF False; > set SAPT_DFT_DO_HYBRID False; > set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; > energy('sapt(dft)', molecule=dimer); > for k, v in Eref_nh.items(): #TEST; > if k in [""SAPT IND ENERGY"", ""CURRENT ENERGY""]:; > ref = (v - DHF) / 1000.0; > else:; > ref = v / 1000.0; > compare_values(ref, psi4.variable(k), 6, ""!hyb, xd=none, !dHF: "" + k) #TEST; > ; > # No hybrid kernel & no exch-disp scaling; > set SAPT_DFT_DO_DHF True; > set SAPT_DFT_DO_HYBRID False; > set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; > energy('sapt(dft)', molecule=dimer); > for k, v in Eref_nh.items(): #TEST; > compare_values(v / 1000.0, psi4.variable(k), 6, ""!hyb, xd=none, dHF: "" + k) #TEST; > ; > # Hybrid kernel & exch-",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2481#issuecomment-1284653967:1671,TEST,TEST,1671,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1284653967,1,['TEST'],['TEST']
Testability," vec, mol, grad, hess (hess untested). Upon request, also tests mirror-image alignment.; - Remove everything beyond constructing the Cartesian Hessian from findif, including VIBRATION class; - Remove the c-side thermo module ; - Adds extensive vib test on HOOH-TS, CO2, ethene, H2CO, methane that checks freqs _and_ normco of each mol vs. Cfour output for following conditions; - Cfour Hessian (tests harmonic analysis machinery); - Psi freq by grad; - Psi freq by energy; - Psi freq by analytic ~(only methane and ammonia pass)~ All pass now, thanks to @andysim ; - [x] fix the embarrassing bug (I'll do you a coding favor if you spot it, but I'm not admitting it otherwise); - [x] better handle non-stationary. probably need an option to force-rot-space-inclusion but by default, `frequency()` does a gradient to determine if rotational projection is safe, then another flag to query external field and company to see if even translational projection is appropriate. ; - [x] more testing of isotopic, partial, non-stationary, etc., particularly wrt normco not just freq; - Add `compare_dicts` and `compare_molrecs` comparison functions. Former uses `deepdiff` module and does recursive comparison (sensitive to types). Can exempt fields with `forgive` arg. Latter makes use of former and also allows geoms to change if warranted by fix_com/orientation (checks via aligner).; - convert qcdb test suite from GnuMake (yes, that old) to pytest. switch compare_* fns to raise `TestComparisonError`, not `sys.exit(1)`.; - have to temporarily set `0 2` in some test cases, b/c the reconciler wants physically reasonable values, but the input molecule isn't currently passing through the code that would set those defaults.; - updated v2rdm_casscf pinning to one Eugene already fixed up to work w/psi; * **User-Facing for Release Notes**. ## Questions; - [ ] Right now, results of harmonic analysis is a dict of namedtuples with numpy arrays (contents and interface below). This is pretty convenient to acc",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/834:11840,test,testing,11840,https://psicode.org,https://github.com/psi4/psi4/pull/834,1,['test'],['testing']
Testability," very much! I've passed -DBUILD_CUSTOM_BOOST=ON to the setup script, and compilation and linking were completed successfully! However, one of 299 tests was failed. Regards,; Alexander. > 99% tests passed, 1 tests failed out of 299; > ; > Label Time Summary:; > adc = 34.90 sec (2 tests); > autotest = 175.66 sec (26 tests); > casscf = 8.94 sec (8 tests); > cc = 402.14 sec (59 tests); > cdomp2 = 1.93 sec (2 tests); > cepa = 2.56 sec (5 tests); > ci = 0.76 sec (1 test); > cisd = 13.09 sec (7 tests); > cubeprop = 1.58 sec (1 test); > dcft = 237.84 sec (13 tests); > df = 162.69 sec (32 tests); > dfccd = 0.38 sec (1 test); > dfccd-grad = 1.05 sec (1 test); > dfccdl = 0.39 sec (1 test); > dfccsd = 0.46 sec (1 test); > dfccsd-grad = 1.40 sec (1 test); > dfccsdat = 0.82 sec (1 test); > dfccsdl = 0.48 sec (1 test); > dfccsdt = 0.63 sec (1 test); > dfmp2 = 50.96 sec (8 tests); > dfomp2 = 8.14 sec (6 tests); > dfomp2.5 = 6.34 sec (4 tests); > dfomp3 = 6.42 sec (4 tests); > dfscf = 77.65 sec (1 test); > dft = 549.70 sec (10 tests); > docs = 0.49 sec (3 tests); > fci = 18.26 sec (6 tests); > findif = 360.17 sec (5 tests); > fnocc = 12.59 sec (4 tests); > freq = 2.36 sec (1 test); > gradient = 19.53 sec (13 tests); > libefp = 4.24 sec (5 tests); > longtests = 2490.57 sec (5 tests); > mcscf = 0.79 sec (3 tests); > mints = 20.27 sec (8 tests); > misc = 125.96 sec (14 tests); > mp2 = 240.79 sec (10 tests); > ocepa = 31.90 sec (6 tests); > omp = 35.55 sec (18 tests); > opt = 911.35 sec (19 tests); > properties = 13.38 sec (3 tests); > psi = 5265.29 sec (299 tests); > psimrcc = 44.08 sec (8 tests); > pywrap = 98.47 sec (14 tests); > quicktests = 348.61 sec (87 tests); > rasci = 28.47 sec (3 tests); > sapt = 1698.31 sec (7 tests); > scf = 751.84 sec (29 tests); > shorttests = 2425.46 sec (206 tests); > sowreap = 1.22 sec (3 tests); > stability = 2.04 sec (2 tests); > tutorial = 23.38 sec (6 tests); > x2c = 0.96 sec (3 tests); > ; > Total Test time (real) = 5267.01 sec; > ; > The following",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/312#issuecomment-196383757:1005,test,test,1005,https://psicode.org,https://github.com/psi4/psi4/issues/312#issuecomment-196383757,1,['test'],['test']
Testability," was at http://www.psicode.org/psi4manual/master/basissets.html#sec-basisuserdefined. Step 2 is where things fall over. First of all, the correct syntax seems to be ; assign df_basis_scf/mp2 <aux basis>; There seems to be an error on the wiki page shown above. . This syntax works as it allows me to define a specific auxiliary basis for *all* atoms. If I wish to define a specific aux basis for a particular atom (as needs to be done when using mid-bonds) then the command should be; assign Rn df_basis_scf mb-set-ri; This fails in inputparser.py with the following error:. Traceback (most recent call last):; File ""/home/alston/Psi4/psi4conda/share/psi4/python/inputparser.py"", line 734, in process_input; temp = re.sub(basis_block, process_basis_block, temp); File ""/home/alston/Psi4/psi4conda/lib/python2.7/re.py"", line 155, in sub; return _compile(pattern, flags).sub(repl, string, count); File ""/home/alston/Psi4/psi4conda/share/psi4/python/inputparser.py"", line 357, in process_basis_block; raise TestComparisonError(message); p4util.exceptions.TestComparisonError: Conflicting basis set specification: assign lines present but shells have no [basname] label. It seems like the line ""assign Rn df_basis_scf mb-set-ri"" cannot be correctly parsed by inputparser.py. It seems to think this line is part of the basis set specification. . The complete Psi4 command file for this calculation is:; [Ar2_input.txt](https://github.com/psi4/psi4/files/787318/Ar2_input.txt). And the two basis set files are here:; [mb-set.txt](https://github.com/psi4/psi4/files/787319/mb-set.txt); [mb-set-ri.txt](https://github.com/psi4/psi4/files/787320/mb-set-ri.txt). I can get this to work by including the aux basis for ""Rn"" in one of the fitting basis files that Psi4 would normally read. But this is not ideal and it would be great to be able to specify the fitting basis in the input file using the ''assign'' command. How can this be fixed?. Additionally, the information on the wiki dealing with user-defined",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/626:1914,Test,TestComparisonError,1914,https://psicode.org,https://github.com/psi4/psi4/issues/626,1,['Test'],['TestComparisonError']
Testability," which probably goes far beyond the answer you need. However, this question seems common enough that I wanted to write a thorough response that we could then link to in the future when it inevitably comes up again. That being said a disclaimer of sorts is in order. The comments herein are meant to be helpful to a wide reaching audience and many may not be directly applicable to you. Additionally, the comments should not be thought of as targeting you (with the obvious exception being that this post will tell you how to actually print). Since the decision to prepare/adapt Psi4 for/to MPI parallelism, it has become essential to micromanage resources (presently circularly defined as any aspect of normal program execution that the program may want to control, including, but not limited to: printing, memory, disk, threads, MPI processes) in a more controlled manner than before. One of these resources is the output. Under the MPI paradigm, each process generates its own output and Psi4 is hence responsible for ensuring that the output is logged in a logical manner (i.e. you don't get the same output, once for each processes, in the same file, in an incomprehensible mess). . In a traditional object-oriented coding paradigm, each problem is handled by a dedicated object, and the problem of printing is no exception. Therefore, within Psi4 we have created the `psi::PsiOutStream` class, of which `psi::outfile` is an instance. Of particular importance `psi::outfile` is an instance that always redirects output to where the user asked. To use `psi::outfile` in your code, ensure `#include ""psi4-dec.h""` is at the top of your file and then proceed in one of two manners: :. ``` c++; #include ""psi4-dec.h""; //Option 1 (takes the same format strings as C's printf function); psi::outfile->Printf(<format_string>,<Message>);. //Option 2 (the C++ way); (*psi::outfile)<<""My Message in C++ form""<<std::endl;; ```. The choice of which of these two options to use is largely a matter of preference",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/77#issuecomment-83041867:1106,log,logged,1106,https://psicode.org,https://github.com/psi4/psi4/issues/77#issuecomment-83041867,2,['log'],"['logged', 'logical']"
Testability," with a random assortment of bytes. In the above example, the full host name should be `ip-172-31-XX-XXX.us-east-2.compute.internal`. We then examined how psi4 determines and processes the host name. It turns out, psi4 uses the `gethostname` function from the C API to get up to the first 40 bytes of the host name, and then it writes those bytes to `timer.dat`. The host name of this particular compute cluster is over 40 chars/bytes. This is unsafe because if a host name has more than 40 characters, the null byte (`\0`) won't be written to `timer.dat` to signify the end of the string, and psi4 will continue to write whatever is in memory past the 40 chars/bytes until it hits a null byte. This also explains the original error, b/c writing random bytes to a file can lead to non-utf-8-compliant files. It turns out that [linux defines a maximum host name length of 64](https://man7.org/linux/man-pages/man2/gethostname.2.html), so the easy fix here is to just increase the size of the host name buffer from 40 to 65 (== 64 + 1 for the null byte at the end). I have no idea why this length was previously limited to 40. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Fix bug resulting in `UnicodeDecodeError` and corrupted `timer.dat` files. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] increase the buffer size used to retrieve the host name and enforce that the host name ends in a null byte before writing to `timer.dat`. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3043:3780,Test,Tests,3780,https://psicode.org,https://github.com/psi4/psi4/pull/3043,3,"['Test', 'test']","['Tests', 'tests']"
Testability," would love to get `conda` support working on our end.; - [x] Tests and examples; - [x] Test install process; - [x] Documentation. ## Questions; - [x] How to best branch between the builtin module and adcc? The two implementations share some features, but use different approaches to solve ADC, which can in some cases lead to differing results (related to #1033 ); - [x] How to best direct options and configurables from Psi4 and adcc? The current solution I see is to add basically everything to the big `read_options.cc`, which is pretty inflexible and could lead to a lot of duplicated information being necessary. Is there some better way to do this?; - [x] What to do with the calculation results? Right now only the MP2 ground state energy is returned to the python world in ADC calculations of Ps4 if I understand this right. Our [ExcitedStates](https://adc-connect.org/reference.html#adcc.ExcitedStates) object, however, is capable of returning more results, most importantly oscillators strengths, or the complete excitation vector. I tried to understand what was done in the eom-cc case and as far as I can judge, the `CCEnergyWavefunction` seems at least related. In principle it should be possible to do something similar for ADC inside the Psi4 code base. Another option is also to just blindly reduce the object we produce in `adcc`, which of course could be considered leaking out interface details from adcc into Psi4.; - Are the tests copied to samples automatically?. ## Checklist; - [x] Tests added for any new features; - [x] ADC(1); - [x] ADC(2); - [x] ADC(2)-x; - [x] ADC(3); - [x] CVS-ADC(1); - [x] CVS-ADC(2); - [x] CVS-ADC(2)-x; - [x] CVS-ADC(3); - [x] Frozen core variant; - [x] Frozen virtual variant; - [x] singlet and triplet states; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge. Thanks in advance for your help :smile:",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1744:2770,test,tests,2770,https://psicode.org,https://github.com/psi4/psi4/pull/1744,4,"['Test', 'test']","['Tests', 'tests']"
Testability," wouldn't allow plain pytest of installed `psi4/` b/c would bring in incorrectly configured qcdb tests. workaround was to pytest `psi4/tests/`; - [x] add a couple corrections I had promised to #2536 but had forgotten to push; - [x] fixes #2548 by passing psi4's `-n` to qcng for dftd3/gcp/mp2d; - [x] corrects `dfmp2-freq2` ctest was registered as `dfmp2-freq1`; - [x] I realized externalpotentials weren't getting unset after a energy/grad/etc. command. This is probably a new bug after #2515 but didn't confirm. It's healed in DDD, but the solution didn't port, so I added the test and temporary workaround to extern1; - [x] Added feature to ctest_runner to allow directory structure to be copied into test scratch for psithon2. This is proven to work but needs a couple lines added to qcengine, so hidden for now.; - [x] Fixed resp addon tests that always failed in parallel. these write to fixed-name files that aren't configurable, so they need to be chdir'd, if not run serially.; - [x] Added a script tester.py that checks some config stuff and writes out missing `test_input.py`. See the goals there for details. Running it produces a list of flaws like the below. I'll post this to an issue for later attention. Someday this can be hooked up to GHA and replace the perl script.; ```; Complaints; ----------; - [ ] 1. cc5: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 2. cookbook/manual-sow-reap: missing cmake directory registration. `vi cookbook/CMakeLists.txt`; - [ ] 3. cookbook/manual-sow-reap: missing CMakeLists. `vi cookbook/manual-sow-reap/CMakeLists.txt`; - [ ] 4. dfmp2-freq1: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 5. dfmp2-freq2: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 6. dfomp2p5-1: missing ctest registration. `vi dfomp2p5-1/CMakeLists.txt` ...; - [ ] 73. v2rdm_casscf/v2rdm7: mismatched marks ctest (opt;v2rdm) and pytest (opt). `vi v2rdm_casscf/v2rdm7/CMakeLists.txt v2rdm_casscf/v2rdm7/test_input.py`; ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2549:1418,test,tester,1418,https://psicode.org,https://github.com/psi4/psi4/pull/2549,1,['test'],['tester']
Testability," you're getting is to build libxc master (`-DBUILD_SHARED_LIBS=ON`), install it, edit the `ConfigVersion.cmake` file to `4.4`, go to psi, force uninstall libxc conda package if libxc is in your active env, edit external/upstream/libxc/CM to 4.4, build psi passing `-DLibxc_DIR=/path/to/dir/of/ConfigVersion`, build psi, check you've got the right one with `ldd stage/lib/psi4/core`.; * Errors at present:; ```; 	158 - dft-grad-lr1 (Failed); 	159 - dft-grad-lr2 (Failed); 	160 - dft-grad-lr3 (Failed); 	175 - dft1 (Failed); 	177 - dft1-alt (Failed); 	179 - dft3 (Failed); 	180 - dft-omega (Failed); 	213 - frac-ip-fitting (Failed); 	338 - sapt-dft-lrc (Failed); 	364 - soscf-dft (Failed); 	397 - dft-custom-hybrid (Failed); 	399 - dft-custom-gga (Failed); 	443 - dftd3-energy (Failed); ```; ```; >>> pytest ../tests/pytests/test_dft_benchmarks.py -rws -v -n12; [gw8] [ 5%] FAILED ../tests/pytests/test_dft_benchmarks.py::test_dft_bench_ionization[B5050LYP- - ]; [gw7] [ 18%] FAILED ../tests/pytests/test_dft_benchmarks.py::test_dft_bench_ionization[MN12-SX- - ]; [gw5] [ 22%] FAILED ../tests/pytests/test_dft_benchmarks.py::test_dft_bench_ionization[SCAN0- - ]; [gw8] [ 33%] FAILED ../tests/pytests/test_dft_benchmarks.py::test_dft_bench_ionization[wB97- - ]; [gw6] [ 36%] FAILED ../tests/pytests/test_dft_benchmarks.py::test_dft_bench_ionization[wB97X-D- - ]; [gw6] [ 43%] FAILED ../tests/pytests/test_dft_benchmarks.py::test_dft_bench_ionization[wB97X-V- - ]; [gw2] [ 47%] FAILED ../tests/pytests/test_dft_benchmarks.py::test_dft_bench_ionization[SCAN- - ]; [gw8] [ 54%] FAILED ../tests/pytests/test_dft_benchmarks.py::test_dft_bench_ionization[wB97X- - ]; [gw0] [ 72%] FAILED ../tests/pytests/test_dft_benchmarks.py::test_dft_bench_interaction[MN12-SX- - ]; [gw8] [ 88%] FAILED ../tests/pytests/test_dft_benchmarks.py::test_dft_bench_interaction[wB97X-V- - ]; [gw9] [ 91%] FAILED ../tests/pytests/test_dft_benchmarks.py::test_dft_bench_interaction[wB97- - ]; [gw10] [ 96%] FAILED ../tests/pytests/te",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-601509105:1374,test,tests,1374,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-601509105,1,['test'],['tests']
Testability," {; basis aug-cc-pvdz; scf_type df; sapt_dft_grac_shift_a 0.203293; sapt_dft_grac_shift_b 0.138264; }. # No hybrid kernel & no exch-disp scaling & no deltaHF; set SAPT_DFT_DO_DHF False; set SAPT_DFT_DO_HYBRID False; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; energy('sapt(dft)', molecule=dimer); for k, v in Eref_nh.items(): #TEST; if k in [""SAPT IND ENERGY"", ""CURRENT ENERGY""]:; ref = (v - DHF) / 1000.0; else:; ref = v / 1000.0; compare_values(ref, psi4.variable(k), 6, ""!hyb, xd=none, !dHF: "" + k) #TEST. # No hybrid kernel & no exch-disp scaling; set SAPT_DFT_DO_DHF True; set SAPT_DFT_DO_HYBRID False; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; energy('sapt(dft)', molecule=dimer); for k, v in Eref_nh.items(): #TEST; compare_values(v / 1000.0, psi4.variable(k), 6, ""!hyb, xd=none, dHF: "" + k) #TEST. # Hybrid kernel & exch-disp scaling (DISP); set SAPT_DFT_DO_HYBRID True; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME disp; energy('sapt(dft)', molecule=dimer); for k, v in Eref_h_disp.items(): #TEST; compare_values(v / 1000.0, psi4.variable(k), 6, ""hyb, xd=disp, dHF: "" + k) #TEST. # Hybrid kernel & exch-disp scaling (FIXED); set SAPT_DFT_DO_HYBRID True; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME fixed ; set SAPT_DFT_EXCH_DISP_FIXED_SCALE 0.770; energy('sapt(dft)', molecule=dimer); for k, v in Eref_h_fixed.items(): #TEST; compare_values(v / 1000.0, psi4.variable(k), 6, ""hyb, xd=fixed, dHF: "" + k) #TEST. ```; * I think it should be clear from the output file what exch-disp scheme/scale is applied. So perhaps add a couple lines to the printout like below. This should also satisfy Jonathon's request that the output file show the change in scaling defaults. ```; ==> E20 Dispersion (MP2) <==. Disp20 (MP2) -0.37881730 [mEh]; Exch-Disp20,u 0.02037338 [mEh]; Scaling Scheme: Disp; Scaling Factor: 0.707. SAPT(DFT) Results; ---------------------------------------------------------------------------------------------------------; Electrostatics -0.10197192 [mEh] -0.06398835 [kcal/mol] -0.26772724 [kJ/mol]",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216:2691,TEST,TEST,2691,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216,1,['TEST'],['TEST']
Testability," | Program | Monomer A (H) | Monomer B (H) | Dimer AB (H)| $E_{int}$ (kcal/mol)| ; |---------|-------------|-------------|-----------|-----------|; | Psi4 | -453.84229689692728 | -453.84229689783353 | -907.68447385499462 | 0.075263339533 |; |Orca | -453.842841688023 | -453.842841698644 | -907.685688152560 | -0.002990642998 |. | Program | $E_{int}$ (kJ/mol)| Notes|; |---------|-------------| ----|; | Psi4 | 0.31490181 | |; |Orca | -0.01251285 | |; | Benchmark | -0.00315431 | Focal Point CCSD(T)/CBS with Psi4 |. I have noticed this warning in all of my Psi4 hexamine/PBEh-3c files:; `Warning: Molecule has a spherically-symmetric moment of charge but lacks icosahedral, octahedral, and tetrahedral symmetry.` . CDS figures this has something to do with the grid placement. Any ideas of how to alleviate this warning while keeping the same geometries and/or what the energy difference could be attributed to? I've tried different basis sets, different number of grid points, `symmetry c1`, `molecule.symmetrize(1e-3)`, no pruning scheme (rather than `robust`). The only time I have been able to get the warning to go away is when I use `bsse_type='cp'`, but I really shouldn't be running the calculation with cp correction because that is already included in the PBEh-3c calculation. Output files for the above example are attached, as well as a graph of Psi4 and Orca interaction energies for all dimers tested. . [Psi4-214-int.txt](https://github.com/psi4/psi4/files/9200713/Psi4-214-int.txt); [Orca-214-monA.txt](https://github.com/psi4/psi4/files/9200765/Orca-214-monA.txt); [Orca-214-monB.txt](https://github.com/psi4/psi4/files/9200766/Orca-214-monB.txt); [Orca-214-dimerAB.txt](https://github.com/psi4/psi4/files/9200767/Orca-214-dimerAB.txt). [hexamine-compare.pdf](https://github.com/psi4/psi4/files/9200777/hexamine-compare.pdf); Image of hexamine: ; ![hexamine](https://user-images.githubusercontent.com/87093097/181296669-eceb1742-e404-4c29-ada4-c090b1d63875.png). Thank you!; Caroline",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2647:1902,test,tested,1902,https://psicode.org,https://github.com/psi4/psi4/issues/2647,1,['test'],['tested']
Testability,""" --timeout 3600 --output-on-failure; Test project /home/raimis/psi4.git/linux_build; Start 245: nbody-convergence; Start 405: python-vibanalysis; Start 181: fsapt1; Start 11: cbs-delta-energy; Start 185: isapt1; Start 18: cbs-xtpl-func; Start 184: fsapt-allterms; Start 196: fd-freq-energy-large; Start 198: fd-freq-gradient-large; Start 287: opt13; Start 28: cc13b; Start 310: pywrap-all; Start 107: dcft-grad2; Start 22: cc1; Start 32: cc15; Start 45: cc28; 1/415 Test #184: fsapt-allterms ................... Passed 110.85 sec; Start 110: dcft1; 2/415 Test #287: opt13 ............................ Passed 189.62 sec; Start 79: cc8; 3/415 Test #45: cc28 ............................. Passed 206.85 sec; Start 152: dfomp3-grad2; 4/415 Test #32: cc15 ............................. Passed 210.28 sec; Start 233: mp2-module; 5/415 Test #22: cc1 .............................. Passed 218.85 sec; Start 35: cc18; 6/415 Test #28: cc13b ............................ Passed 229.19 sec; Start 312: pywrap-cbs1; 7/415 Test #110: dcft1 ............................ Passed 127.34 sec; Start 27: cc13a; 8/415 Test #107: dcft-grad2 ....................... Passed 252.96 sec; Start 116: dcft7; 9/415 Test #79: cc8 .............................. Passed 81.11 sec; Start 208: frac-traverse; 10/415 Test #185: isapt1 ........................... Passed 272.01 sec; Start 326: sapt2; 11/415 Test #35: cc18 ............................. Passed 60.66 sec; Start 328: sapt4; 12/415 Test #245: nbody-convergence ................ Passed 293.73 sec; Start 335: scf-bz2; 13/415 Test #152: dfomp3-grad2 ..................... Passed 117.47 sec; Start 251: ocepa-grad2; 14/415 Test #233: mp2-module ....................... Passed 120.91 sec; Start 68: cc49; 15/415 Test #326: sapt2 ............................ Passed 97.27 sec; Start 58: cc4; 16/415 Test #208: frac-traverse .................... Passed 108.53 sec; Start 390: cc-module; 17/415 Test #198: fd-freq-gradient-large ........... Passed 411.24 sec; Start 34: cc17; 18",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1384#issuecomment-443227424:1056,Test,Test,1056,https://psicode.org,https://github.com/psi4/psi4/pull/1384#issuecomment-443227424,1,['Test'],['Test']
Testability,""" --timeout 3600 --output-on-failure; Test project /home/raimis/psi4_3.git/build; Start 394: python-vibanalysis; Start 178: fsapt1; Start 182: isapt1; Start 18: cbs-xtpl-func; Start 181: fsapt-allterms; Start 193: fd-freq-energy-large; Start 195: fd-freq-gradient-large; Start 278: opt13; 1/411 Test #195: fd-freq-gradient-large ........... Passed 287.94 sec; Start 25: cc13a; 2/411 Test #182: isapt1 ........................... Passed 442.34 sec; Start 113: dcft7; 3/411 Test #193: fd-freq-energy-large ............. Passed 511.29 sec; Start 205: frac-traverse; 4/411 Test #181: fsapt-allterms ................... Passed 597.58 sec; Start 316: sapt2; 5/411 Test #205: frac-traverse .................... Passed 227.64 sec; Start 318: sapt4; 6/411 Test #278: opt13 ............................ Passed 764.00 sec; Start 325: scf-bz2; 7/411 Test #25: cc13a ............................ Passed 481.24 sec; Start 1: adc1; 8/411 Test #1: adc1 ............................. Passed 26.25 sec; Start 2: adc2; 9/411 Test #113: dcft7 ............................ Passed 392.65 sec; Start 3: casscf-fzc-sp; 10/411 Test #2: adc2 ............................. Passed 43.73 sec; Start 4: casscf-semi; 11/411 Test #4: casscf-semi ...................... Passed 11.68 sec; Start 5: casscf-sa-sp; 12/411 Test #3: casscf-fzc-sp .................... Passed 19.26 sec; Start 6: ao-casscf-sp; 13/411 Test #6: ao-casscf-sp ..................... Passed 8.25 sec; Start 7: casscf-sp; 14/411 Test #5: casscf-sa-sp ..................... Passed 23.99 sec; Start 8: castup1; 15/411 Test #8: castup1 .......................... Passed 2.23 sec; Start 9: castup2; 16/411 Test #325: scf-bz2 .......................... Passed 124.34 sec; Start 10: castup3; 17/411 Test #9: castup2 .......................... Passed 13.78 sec; Start 11: cbs-delta-energy; 18/411 Test #7: casscf-sp ........................ Passed 38.07 sec; Start 12: cbs-parser; 19/411 Test #10: castup3 .......................... Passed 15.65 sec; Start 13: cbs-xtpl-al",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1115#issuecomment-411094637:1051,Test,Test,1051,https://psicode.org,https://github.com/psi4/psi4/pull/1115#issuecomment-411094637,1,['Test'],['Test']
Testability,"""H\nH 1 2.0\nunits au""); psi4.set_options({""scf__E_CONVERGENCE"": 6}); plan = task_planner(; ""hessian"",; ""MP2/cc-pVDZ"",; mol,; **kw,; dertype=0,; findif_stencil_size=5,; findif_step_size=0.005 / math.sqrt(2 / 1.00782503223),; ); ; displacements = {; ""0: -2"": np.array([[0.0, 0.0, -1.0050], [0.0, 0.0, 1.0050]]),; ""0: 2"": np.array([[0.0, 0.0, -0.9950], [0.0, 0.0, 0.9950]]),; ""0: -1"": np.array([[0.0, 0.0, -1.0025], [0.0, 0.0, 1.0025]]),; ""0: 1"": np.array([[0.0, 0.0, -0.9975], [0.0, 0.0, 0.9975]]),; ""reference"": np.array([[0.0, 0.0, -1.0], [0.0, 0.0, 1.0]]),; # below here for r_proj False; ""1: -1"": np.array([[-0.0025, 0.0, -1.0], [0.0025, 0.0, 1.0]]),; ""1: -2"": np.array([[-0.005, 0.0, -1.0], [0.005, 0.0, 1.0]]),; ""2: -1"": np.array([[0.0, -0.0025, -1.0], [0.0, 0.0025, 1.0]]),; ""2: -2"": np.array([[0.0, -0.005, -1.0], [0.0, 0.005, 1.0]]),; }; ; assert isinstance(plan, FiniteDifferenceComputer); assert len(plan.task_list) == pts; ; for k2, plan2 in plan.task_list.items():; assert isinstance(plan2, AtomicComputer); assert plan2.basis == ""cc-pvdz""; assert plan2.method == ""mp2""; assert plan2.driver == ""energy""; assert np.allclose(plan2.molecule.geometry().np, displacements[k2]); assert plan2.keywords[""SCF__E_CONVERGENCE""] == 1.0e-6; > assert plan2.keywords[""SCF__D_CONVERGENCE""] == 1.0e-11; E assert 1.0000000000000001e-11 == 1e-11. /usr/ports/science/psi4/work/psi4-1.8.1/tests/pytests/test_task_planner.py:479: AssertionError; -------------------------------------------------------------------------------------- Captured log call --------------------------------------------------------------------------------------; INFO psi4.driver.task_planner:task_planner.py:287 PLANNING FD: dermode=(2, 0) keywords={'SCF__E_CONVERGENCE': 1e-06, 'function_kwargs': {}, 'SCF__D_CONVERGENCE': 1.0000000000000001e-11, 'E_CONVERGENCE': 1e-10} findif_kw={'findif_stencil_size': 5, 'findif_step_size': 0.0035493397840830904} kw={'ref_gradient': array([[0., 0., 0.],; [0., 0., 0.]])}; INFO psi4.driver.driver",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3014:5033,assert,assert,5033,https://psicode.org,https://github.com/psi4/psi4/issues/3014,2,['assert'],['assert']
Testability,"""H\nH 1 2.0\nunits au""); psi4.set_options({""scf__E_CONVERGENCE"": 6}); plan = task_planner(; ""hessian"",; ""MP2/cc-pVDZ"",; mol,; **kw,; dertype=0,; findif_stencil_size=5,; findif_step_size=0.005 / math.sqrt(2 / 1.00782503223),; ); ; displacements = {; ""0: -2"": np.array([[0.0, 0.0, -1.0050], [0.0, 0.0, 1.0050]]),; ""0: 2"": np.array([[0.0, 0.0, -0.9950], [0.0, 0.0, 0.9950]]),; ""0: -1"": np.array([[0.0, 0.0, -1.0025], [0.0, 0.0, 1.0025]]),; ""0: 1"": np.array([[0.0, 0.0, -0.9975], [0.0, 0.0, 0.9975]]),; ""reference"": np.array([[0.0, 0.0, -1.0], [0.0, 0.0, 1.0]]),; # below here for r_proj False; ""1: -1"": np.array([[-0.0025, 0.0, -1.0], [0.0025, 0.0, 1.0]]),; ""1: -2"": np.array([[-0.005, 0.0, -1.0], [0.005, 0.0, 1.0]]),; ""2: -1"": np.array([[0.0, -0.0025, -1.0], [0.0, 0.0025, 1.0]]),; ""2: -2"": np.array([[0.0, -0.005, -1.0], [0.0, 0.005, 1.0]]),; }; ; assert isinstance(plan, FiniteDifferenceComputer); assert len(plan.task_list) == pts; ; for k2, plan2 in plan.task_list.items():; assert isinstance(plan2, AtomicComputer); assert plan2.basis == ""cc-pvdz""; assert plan2.method == ""mp2""; assert plan2.driver == ""energy""; assert np.allclose(plan2.molecule.geometry().np, displacements[k2]); assert plan2.keywords[""SCF__E_CONVERGENCE""] == 1.0e-6; > assert plan2.keywords[""SCF__D_CONVERGENCE""] == 1.0e-11; E assert 1.0000000000000001e-11 == 1e-11. /usr/ports/science/psi4/work/psi4-1.8.1/tests/pytests/test_task_planner.py:479: AssertionError; -------------------------------------------------------------------------------------- Captured log call --------------------------------------------------------------------------------------; INFO psi4.driver.task_planner:task_planner.py:287 PLANNING FD: dermode=(2, 0) keywords={'SCF__E_CONVERGENCE': 1e-06, 'function_kwargs': {}, 'SCF__D_CONVERGENCE': 1.0000000000000001e-11, 'E_CONVERGENCE': 1e-10} findif_kw={'findif_stencil_size': 5, 'findif_step_size': 0.0035493397840830904} kw={}; INFO psi4.driver.driver_findif:driver_findif.py:263 ; ---------------------",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3014:1527,assert,assert,1527,https://psicode.org,https://github.com/psi4/psi4/issues/3014,2,['assert'],['assert']
Testability,"""api"" tests fail with the timeout error:; ```; ==================================================================================== test session starts =====================================================================================; platform freebsd13 -- Python 3.9.15, pytest-7.2.0, pluggy-1.0.0; Using --randomly-seed=3542811706; rootdir: /disk-samsung/freebsd-ports/science/psi4/work/psi4-1.7, configfile: pytest.ini; plugins: cov-2.9.0, randomly-3.12.0, timeout-2.1.0, rerunfailures-10.1, flaky-3.7.0, xdist-2.5.0, env-0.6.2, freezegun-0.4.2, mock-1.10.4, forked-1.4.0, hypothesis-6.56.2; collected 1337 items / 19 errors . =========================================================================================== ERRORS ===========================================================================================; ________________________________________________________________________ ERROR collecting tests/pytests/test_adcc.py _________________________________________________________________________; test_adcc.py:9: in <module>; from addons import using; addons.py:9: in <module>; from qcengine.testing import _programs as _programs_qcng; /usr/local/lib/python3.9/site-packages/qcengine/testing.py:173: in <module>; ""psi4"": is_program_new_enough(""psi4"", ""1.2""),; /usr/local/lib/python3.9/site-packages/qcengine/testing.py:62: in is_program_new_enough; candidate_version = qcng.get_program(program).get_version(); /usr/local/lib/python3.9/site-packages/qcengine/programs/psi4.py:90: in get_version; exc[""proc""].wait(timeout=30); /usr/local/lib/python3.9/subprocess.py:1189: in wait; return self._wait(timeout=timeout); /usr/local/lib/python3.9/subprocess.py:1909: in _wait; raise TimeoutExpired(self.args, timeout); E subprocess.TimeoutExpired: Command '['/usr/local/bin/psi4', '--version']' timed out after 30 seconds; ```. I think that most tests themselves pass, but there's something wrong with the python test harness.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2830#issuecomment-1343724097:6,test,tests,6,https://psicode.org,https://github.com/psi4/psi4/issues/2830#issuecomment-1343724097,9,"['mock', 'test']","['mock-', 'test', 'testing', 'tests']"
Testability,# Description; Fixes warning message described on slack by iwatobipen:; ```; /home/user/anaconda3/envs/chemo37/lib/python3.7/site-packages/psi4/driver/qcdb/libmintsbasisset.py:854: ResourceWarning: unclosed file <_io.TextIOWrapper name='/home/user/anaconda3/envs/chemo37/share/psi4/basis/aug-cc-pvdz.gbs' mode='r' encoding='UTF-8'>; names[index] = parser.load_file(fullfilename); ```; as suggested by @loriab . ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1687:586,Test,Tests,586,https://psicode.org,https://github.com/psi4/psi4/pull/1687,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"# Known bugs; - PCM-ROHF is broken. See #999; # Library updates; - PCMSolver is updated to its latest version (1.2.1) This new release of PCMSolver is a maintenance release and no new features were added to Psi4 through this upgrade. However, more tests were added for PCM used in conjunction with ERI algorithms other than PK. A test was also added for geometry optimizations with PCM run using finite differences. See the [library's changelog](https://github.com/PCMSolver/pcmsolver/blob/release/1.2/CHANGELOG.md) for more information on what changed in the library itself.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/959#issuecomment-386064898:248,test,tests,248,https://psicode.org,https://github.com/psi4/psi4/issues/959#issuecomment-386064898,2,['test'],"['test', 'tests']"
Testability,"# Overview. This is version 2.0.0 of the Psi4 build system. It is designed to speed-up build times as well as aid in transitioning to a more modular model driven by QCDB or incorporated into the Pulsar framework.; ## Disclaimer. This is _NOT_ quite ready to merge yet, but represents a substantial change that I wanted developers to start looking at and provide feedback on. In particular:; - [x] Get remote builds via Travis-CI working; - [x] @lothian 's coupled cluster code tests are failing (really could use help there); - [x] Fix sow/reap tests (not using installed data dir?); - [x] Failing test cases:; - [x] cbs-xtpl-freq; - [x] fnocc2; - [x] tu4-h2o-freq ; - [x] Hook back-up: ; - [x] chemps2; - [x] erd; - [x] dkh; - [x] gdma; - [x] ambit; - [x] pcmsolver; - [ ] Get binary working (need help from @loriab); - [x] Test (and then most likely fix) plugin system; - [x] Move GTFock to external; - [x] Libint is now external, closes #355 ; ## Speed. By means of comparison, on my box the old build system took 34 minutes and this build took 14 minutes. Both build times are for a debug build, ignore the time to build Boost, use the default angular momentum, and are run on 6 cores. Furthermore, this new build does a dramatically better job of tracking dependencies among files. For example libint/libderiv should only build once and editing a single file in mints no longer triggers a full recompilation (of course touching a file like Molecule.h basically will). This means subsequent builds should be dramatically faster, in my experience so far typically only the file that was changed needs recompiled.; ## Modularity. Under the old build the entire Psi4 build project had to track dependencies for all plugins and external interfaces. This was quickly becoming a nightmare as evidenced by the 3,000,000 emails we have been getting about chemps2 breaking. I have transitioned us to what is known in CMake land as a superbuild. In such a build all pieces of a package, including the depend",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442:477,test,tests,477,https://psicode.org,https://github.com/psi4/psi4/pull/442,4,"['Test', 'test']","['Test', 'test', 'tests']"
Testability,"## Authors; Andy Jiang, Zachary L. Glick (Sherrill Group, Georgia Institute of Technology). ## Description; Adds the MBIS Charge Partitioning Feature to Psi4, from the associated paper by Toon Verstraelen et al. (2016); (https://pubs.acs.org/doi/10.1021/acs.jctc.6b00456). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Calculation of MBIS Atomic Charges; - [x] Calculation of MBIS Atomic Multipoles. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1961:472,Test,Tests,472,https://psicode.org,https://github.com/psi4/psi4/pull/1961,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Big Picture of the Project; For those who haven't been following the saga, orbital convergence in occ has been unreliable for quite some time. In #1772, I changed the defaults for orbital convergence to be the same as for dfocc. Tests started failing because the orbitals couldn't be converged. My investigation has indicated the problem relates back to the details of the DIIS implementation: the orbital DIIS needs to be coupled to the DIIS for T2 amplitudes. My own Psi4Numpy implementations of orbital-optimized methods show no convergence problems when I do this, but show quite poor convergence when I uncouple them. ...Unfortunately, getting the DIIS coupled together requires open-heart surgery on OCC due to a number of long-standing issues with the module, which I would have needed to fix anyways for a current research project. Per Lori's request, I'm breaking up what would be a monolithic PR into several. ## Description of the PR; The objective of the current PR is to switch orbital convergence from using a custom DIIS implementation of Bozkaya's to using Andy's libdiis. Andy's is general enough to accomodate combined DIIS on a dpdbuf4 and Vector/Matrix quantities. Bozkaya's is not. ## Infrastructure Changes; * Less code duplication!; * I'm introducing a strategy to eliminate the custom tensor classes in OCC over time. When a function uses a custom tensor class, use a constructor to convert it to a libmints standard class. If necessary, write it back at the end of the function call. This allows us to take the task of rewriting all of OCC (and its coupled variables) into going function-by-function. When we can, we'll then just change the variable in the header and eliminate the relevant converters.; * To eliminate code duplication, I added some new objects to the wavefunction that ""contain"" alpha/beta specific quantities. So instead of needing to write the orbital rotation code once for closed-shell, once for open-shell alpha, and once for open-shell beta, you onl",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1783:232,Test,Tests,232,https://psicode.org,https://github.com/psi4/psi4/pull/1783,1,['Test'],['Tests']
Testability,"## Big Picture of the Project; See #1783. tl;dr: The goal is to improve orbital convergence in `occ`, but I need the module cleaned up to make it easier to think about the code I'm needing to mess with. I'm breaking a monolith PR into several. ## Description of the PR; The current PR has two objectives. First, condense the MP2 amplitude functions, MP2 energy functions, and MP2 1RDM functions into one function each. Although several methods needed these functions with minimal changes, there were two or three functions created for each of those three. Dealing with how he handled spin-scaling forced me to take a second objective: to clean OCC's handling of spin-scaling variables. OCC previously allowed the user to overwrite the definitions of opposite-spin scaling and spin-component-scaling schemes and used far too many variables. The current scheme still allows users to make their own definitions, but those are now sent to custom variables. In addition, many keywords have been eliminated. OCC's handling of spin-scaling now differs from DFOCC's, but I am not fool enough to take on that module. Obligatory ping of @susilehtola and @hokru, who expressed opinions about this on Slack, and @loriab, who expressed many opinions about this on Slack. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] We have shed another 800+ lines of code.; - [x] Major refactor of spin-scaling in OCC. All keywords for manual handling of spin scaling in OCC are removed. Please use `os_scale` and `ss_scale` for custom scaling. Select the spin scaling method that goes to the current energy by the method string you pass to the energy call.; ~~- [ ] Update documentation accordingly.~~ Deferred to Lori PR. ## Checklist; - [x] Quick tests, occ related tests, manual diff checks, and `test_mp2.py` all pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1789:1774,test,tests,1774,https://psicode.org,https://github.com/psi4/psi4/pull/1789,2,['test'],['tests']
Testability,"## Big Picture of the Project; See #1783. tl;dr: The goal is to improve orbital convergence in `occ`, but I need the module cleaned up to make it easier to think about the code I'm needing to mess with. I'm breaking a monolith PR into several. ## Description of the PR; The objective of the current PR is to clean up `occ/manager.cc`. All duplicated printing and variable setting code is now located in `postprocessing.cc`. ## Infrastructure Changes; * Less code duplication and less code!; * The important `occ` variables are now set in `variables_` C-side so they can be set Py-side.; * A new file has been created, `postprocessing.cc`, for all `occ`'s repetitive printng and Psi variable-setting needs. ## Questions; * @loriab, please check that there's nothing obvious missing. In particular, there is no `test_omp.py`, so I just made a .txt file for you. ## Checklist; - [x] [Quick tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1785:887,test,tests,887,https://psicode.org,https://github.com/psi4/psi4/pull/1785,2,['test'],['tests']
Testability,## Description / Todos. Miscellanea I found during an independent PR. - [x] Added `fsapt` tag to tests; - [x] Cleanup in `fsapt` - more use of auto and specialized`libmints` functions. ## Checklist; - [x] `fsapt` tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2332:97,test,tests,97,https://psicode.org,https://github.com/psi4/psi4/pull/2332,2,['test'],['tests']
Testability,## Description. ## Dev notes & details; - [x] https://github.com/MolSSI/QCEngine/pull/424 takes over the refs removed from here. (it might be easier to look at the final file https://github.com/loriab/psi4/blob/svwn_refs/tests/pytests/standard_suite_ref_local.py that only has a few FCI/CISD values left; the blocks have been rearranged to a conventional order.); - [x] bump to qcengine v0.28. ## Checklist; - ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3022:221,test,tests,221,https://psicode.org,https://github.com/psi4/psi4/pull/3022,4,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description. ## Todos; - [x] few more copyrights.; - [x] remove unused testing scripts. ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1537:74,test,testing,74,https://psicode.org,https://github.com/psi4/psi4/pull/1537,1,['test'],['testing']
Testability,"## Description. ## Todos; - [x] standard suite testing for HF E & G, MP2.5 E & G, MP3 E & G, LCCD G; - [x] adjustments to fnocc, dfocc, occ as needed. (AED has signed off on the fnocc printing changes -- printing has been wrong.); - [x] detci_opdm test is temporarily excused until qcel 0.16 comes out that can forgive phase changes. want to get this PR in for conda builds. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1971:47,test,testing,47,https://psicode.org,https://github.com/psi4/psi4/pull/1971,5,"['Test', 'test']","['Tests', 'test', 'testing', 'tests']"
Testability,## Description. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] `set_tweak(vec)` killed off (deprecated since v1.5); - [x] allows LibXC v5 or v6; - [x] fixes one test for python 3.11 and requires a new pb11 for it. ## Checklist; - [ ] ~Tests added for any new features~; - [x] full tests run with libxc6 and python 3.11. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2817:287,test,test,287,https://psicode.org,https://github.com/psi4/psi4/pull/2817,3,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,## Description. <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] adds `CCSD(AT)` to cbs driver; - [x] progress counter for `(AT)`part.; - [x] fix for #1957 ; - [x] fix for printing wrong variable in `dfocc`. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2013:276,Test,Tests,276,https://psicode.org,https://github.com/psi4/psi4/pull/2013,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description. A series of updates to the Psi4 driver. Very large PR's is not my favorite thing to do on git, but unfortunately driver changes are complex and strongly tied together. Putting this up now as a way to help track everything this fixes.; ## Todos; - [x] General cleanup and reorganization of the driver.; - [x] Reorganized procedures into a single folder.; - [x] Reworking CBS and N-Body wrappers for easier use.; - [x] Above changes broke some of pywrap, need to get these fixed.; - [x] More canonical python raise error printing.; - [x] Reorganizes OEProp to use `D_subset_helper` instead of `Da_subset` to avoid pulling density matrices from multiple sources. Closes #193; - [x] Reworks how OEProp is called for SCF, DFT, DF-MP2, CI, and MCSCF. The full OEProp suite works for these now through the properties driver.; - [x] New test case for the above OEProp (scf_properties, mp2_properties, ci_properties), closes #356.; - [x] Freeze COM/ORIENT for FREEZE COORDINATE option and closes #179 ; ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/365:845,test,test,845,https://psicode.org,https://github.com/psi4/psi4/pull/365,1,['test'],['test']
Testability,"## Description. Adds analytic RHF Hessians. Still much cleanup/fixing to be done, but I thought I'd open a PR to allow others to chime in.; ## Todos; - [x] Add tests.; - [x] Hook into driver (with help from @loriab).; - [x] Add batching to allow fock derivatives to be computed without using too much memory.; - [x] Fix bug in spherical harmonic second derivative integrals.; ## Questions; - [x] Should we just merge this in when UHF is working, or should we also push to get the XC Hessian terms, @dgasmith / @robparrish ? I don't know how involved the XC terms will be, but I'm happy to help get them cranked out.; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/437:160,test,tests,160,https://psicode.org,https://github.com/psi4/psi4/pull/437,1,['test'],['tests']
Testability,"## Description. Adds flag to tell deriv() that I've already backtranformed the opdm/tpdm. Also, I can't figure out how to keep deriv() from trying to evaluate reference contributions to the gradient, even though I have none, so I added additional logic to check if the pointers to the reference containers are null. ; ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/386:247,log,logic,247,https://psicode.org,https://github.com/psi4/psi4/pull/386,1,['log'],['logic']
Testability,"## Description. Adds flag to tell deriv() that I've already backtranformed the opdm/tpdm. Also, I can't figure out how to keep deriv() from trying to evaluate reference contributions to the gradient, even though I have none, so I added additional logic to check if the pointers to the reference containers are null.; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/406:247,log,logic,247,https://psicode.org,https://github.com/psi4/psi4/pull/406,1,['log'],['logic']
Testability,"## Description. After rebasing, hopefully this pull request is cleaner. Interfragment coordinates fixed with 3 new test cases.; ## Todos; - [x] Feature1; ## Questions; - [x] Question1; ## Status; - [X] Ready to go; All opt tests pass for me.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/441:115,test,test,115,https://psicode.org,https://github.com/psi4/psi4/pull/441,2,['test'],"['test', 'tests']"
Testability,"## Description. All manner of sowreap cleanup and upgrade; ## Todos. Notable points that this PR has either accomplished or will accomplish.; - [x] make Hessian by both E & G return same non-mass-weighted matrix, relabel output, fixing #225 ; - [x] preserve `.1` files for optimization for cbs calcs, so no more multiple first cycles, fixing #303 ; - [x] sowreap testing machinery fixed up: catches more errors, works for optimizations, pep8-ified. @amjames, you may want to take a look at 31162be; - [x] new capability to do frequencies in sow/reap by finite difference of gradients, fixing psi4/psi4private#80; - [x] in order to do previous, needed format_molecule to preserve orientation, which zmat doesn't do naturally, so added `forcexyz=True` kwarg to optionally write in Carts (including no_com/no_reorient). conveniently, this fixes http://forum.psicode.org/t/embarrassingly-parallel-frequency-calculation-misbehaving/111 also.; - [x] general cleanup of db, opt, freq by E sow/reap procedures after wavefunction_pass, especially return statements and forcing return_wfn True, fixing #291 ; ## Questions; - [x] @psi-rking should probably take a look at 380a93c; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/318:363,test,testing,363,https://psicode.org,https://github.com/psi4/psi4/pull/318,1,['test'],['testing']
Testability,## Description. Allows BCCD with ROHF starting orbitals.; ## Todos. Notable points that this PR has either accomplished or will accomplish.; - [x] Added BCCD and BCCD_T to the list of ROHF semicanonicalize cases in `src/bin/cc*`.; - [x] Added a BCCD ROHF test case; - [x] Added a BCCD_MAXITER keyword instead of using an arbitrary value; - [x] Removed redundant `proc.py:run_bccdt`; ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/295:255,test,test,255,https://psicode.org,https://github.com/psi4/psi4/pull/295,1,['test'],['test']
Testability,"## Description. Bumped Clang Travis test to clang-3.8 from clang-3.7; - [x] Makes me hum ""New Slang"" by The Shins.; - [x] Makes Travis use the latest Clang (3.8) instead of 3.7 for the release build.; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/439:36,test,test,36,https://psicode.org,https://github.com/psi4/psi4/pull/439,1,['test'],['test']
Testability,"## Description. Converts Psi4 from a binary that calls Python to a Python module that calls a shared object as discussed in #468. ; ## Features; - ""psi4"" is now a python module, the entire driver and suite of C++ functions is now behind this interface.; - The ""bin/psi4"" binary is now a python script that parses Psithon input to support the current Psi4 interface.; - For any conventional python script the following now works: `import psi4`.; - C++ no longer calls python, all python objects must be passed in from the driver.; - BasisSet objects are the primary objects effected here. The Wavefunction now stores BasisSets constructed by python and can be accessed by `wfn->get_basis(*basis*)`.; - The C++ side of psi4 is now compiled to the a shared library with python access named ""core.so"".; ## Remaining issues; - There are several outstanding issues, a list of which can be found [here](https://github.com/dgasmith/psi4/projects/1). All issues may not be cleaned up by the time this PR goes through, current full suite coverage of 99%.; - HF: Broken Symmetry guess is currently broken, apparently no test case for this.; - BasisSet is not final with regard to construct_combined and handling of user defined basis sets.; - SAD does not work due to basis set creation.; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/481:1109,test,test,1109,https://psicode.org,https://github.com/psi4/psi4/pull/481,1,['test'],['test']
Testability,## Description. Distilli should provide PR testing on mac for all future updates. This is a test PR for this functionality.; ## Status; - [ ] Do NOT merge me.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/445:43,test,testing,43,https://psicode.org,https://github.com/psi4/psi4/pull/445,2,['test'],"['test', 'testing']"
Testability,"## Description. Distribute test cases and misc.; ## Todos. Notable points that this PR has either accomplished or will accomplish.; - [x] For each test case in `samples`, add a `test.in` (intact w/ `#TEST` lines) alongside the plain `input.dat` (w/o`#TEST` lines). This way one can test (by hand) from an installed copy (e.g., conda pkg).; - [x] In `setup`, be more explicit about how to handle argument values that argparse might want to interpret as arguments themselves. Response to http://forum.psicode.org/t/odd-behavior-of-setup/233; - [x] Fix bug that kept undefined literal `${MCONDA}` in `psi4-config` for conda packages. This bug made it useless for querying `psi4-config --includes` for plugin configuration.; ## Status; - [x] Ready to go. Nothing controversial here.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/401:27,test,test,27,https://psicode.org,https://github.com/psi4/psi4/pull/401,6,"['TEST', 'test']","['TEST', 'test']"
Testability,"## Description. Documents F/I-SAPT capabilities, adds F/I-SAPT test cases and samples, and makes F/I-SAPT postprocessing scripts available in install/share. ; ## Todos. Notable points that this PR has either accomplished or will accomplish.; - [ ] Enables the average citizen to quickly begin using F/I-SAPT.; ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/467:63,test,test,63,https://psicode.org,https://github.com/psi4/psi4/pull/467,1,['test'],['test']
Testability,"## Description. Documents F/I-SAPT capabilities, adds F/I-SAPT test cases and samples, and makes F/I-SAPT postprocessing scripts available in install/share.; ## Todos. Notable points that this PR has either accomplished or will accomplish.; - [x] Enables the average citizen to quickly begin using F/I-SAPT.; ## Status; - [x] Ready to go. Looks ready to me, though there may well be further reST changes after viewing the docs build. @robparrish may want to look it over. We'll close the other PR.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/470:63,test,test,63,https://psicode.org,https://github.com/psi4/psi4/pull/470,1,['test'],['test']
Testability,"## Description. Earlier SAPT output passes got the output file printing looking nice and involving flexible alpha, but the generic total psivars weren't reconciled between c-side and py-side computation and there was duplicated code. This fixes it up.; ## Todos; - [x] c-side was setting e.g., `SAPT SAPT2+ ENERGY` always with alpha=0, while py-side was setting `SAPT2+ TOTAL ENERGY` always with alpha=1, in both cases regardless of what the user requested alpha. Now the variable takes the name of the latter, uses the requested alpha, and is always computed py-side.; - [x] `Disp20(SS)` (exch-disp20, too) becomes `SAME-SPIN Disp20`. OS dropped since equiv to total less SS.; - [x] c-side wasn't considering dMP2 in total printed for `Induction` section, so total wasn't equaling El + Ex + I + D. Add dMP2(2) and dMP2(3) into that term. Also, dMP2 wasn't being considered in the `SAPT TOTAL ENERGY` computing, so that was one more reason to consolidate it py-side.; - [x] modify sapt6 test case to test _everything_: alpha = 0 & 1, all sapt methods, all free sapt methods, and generic sapt psivars and current energy; - [x] reenable `energy('ssapt0')` just so one can get back the ssapt0 variant (which _isn't_ controlled by exch_scale_alpha keyword); - [x] make py-side sapt defs more flexible to accomodate non-1.0 alphas; ## Questions; - [ ] Possibly @jgonthier and @CDSherrill want to look over this. I've no specific questions, just FYI, stuff's changing.; - [ ] @bwb314 , you traced a sapt inconsistency in the webmo output, but I can't find your post now. Do you want to check that it's reconciled sometime? ; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/433:987,test,test,987,https://psicode.org,https://github.com/psi4/psi4/pull/433,2,['test'],['test']
Testability,## Description. Extends DDX interface to support SCF response and TDSCF. ## Checklist; - [X] Tests added for any new features; - [X] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [X] Ready for review; - [X] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2967:93,Test,Tests,93,https://psicode.org,https://github.com/psi4/psi4/pull/2967,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description. Fix for ROHF stability analysis.; ## Todos. Notable points that this PR has either accomplished or will accomplish.; - [x] Fixes the old ROHF stability analysis code, to account for the updated ROHF ordering used in libtrans.; - [x] Provides a test (taken from Psi3) to verify the correctness of the ROHF stability code.; ## Notes. This code will surely be replaced by a Davidson-like solver sometime soon, but it may be useful for debugging such an implementation.; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/280:260,test,test,260,https://psicode.org,https://github.com/psi4/psi4/pull/280,1,['test'],['test']
Testability,"## Description. Fixed dftd3 calls when `LD_LIBRARY_PATH` empty. Activate new -d3 damping.; ## Todos. Notable points that this PR has either accomplished or will accomplish.; - [x] The env passed into subprocess must be strictly a dict of strings. This was violated when PATH or LD_LIBRARY_PATH was empty, yielding a `TypeError: execve() arg 3 contains a non-string value` error. Fixed this.; - [x] Re-enable the `d3m` and `d3mbj` extensions. Adjust test case (unrelated DFT error still failing on psinet) and docs to match. Filled in `[Smith:2016:2197]` reference.; ## Questions; - [x] Do we want conda dftd3 automatically installed alongside binary? On one hand then ensures ppl can use dftd3. On the other, ppl may be surprised if their hand-cmopiled version of dftd3 isn't the one used anymore. **Ans** sounds like installation alongside is ok, so long as hand-compiled still preferentially chooseable; - [x] If adding dftd3 to the install list, want to add the one built purely from Grimme's code or the one with the `-d3m` and `-d3m(bj)` capabilities, as applied through a patch? **Ans** distribute `dftd3m`; ## Status; - [x] Ready to go.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/383:449,test,test,449,https://psicode.org,https://github.com/psi4/psi4/pull/383,1,['test'],['test']
Testability,"## Description. Fixed incorrect B matrix for 'interfragment coordinates'. These coordinates are not used by default, but the user can specify them to create very specific coordinates. They may be useful, e.g., in combination with 'freeze_intrafrag' for fixed-body optimizations. When symmetry is turned on, there is a difficulty with the symmetry detection in combination with the way in which the displacements are carried out for these coordinates. A loosening of the symmetry tolerance when computing the symmetrized geometry usually works and has been implemented. In the future, it may be best to carry out the displacements in these coordinates iteratively and numerically as they are for redundant intrafrag coordinates. However, this approach would be more hazardous with no upside in C1, and I don't have time to implement it right now anyway.; - [ ] Feature1; Reference atoms can now be specified by the user with a standard multi-dimensional python list. The test cases illustrate this. Probably, this utility will stimulate more use cases for further development of the code.; ## Questions; - [ ] Question1; ## Status; - [X] Ready to go; All tests, including the 3 new ones pass for me.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/432:970,test,test,970,https://psicode.org,https://github.com/psi4/psi4/pull/432,2,['test'],"['test', 'tests']"
Testability,## Description. Fixing issue #310 CH3F was not fully optimizing due to missing internal coordinates. This issue led to the discovery that the code joining separated fragments had significant problems (basically atom reindexing/ordering).; ## Todos; ## Questions. None; ## Status. Ready to go. All optimization tests passed.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/314:310,test,tests,310,https://psicode.org,https://github.com/psi4/psi4/pull/314,1,['test'],['tests']
Testability,"## Description. General wavefunction cleanup, should fix #259. The other TODO's in that issue have been moved to separate issues or were already flagged elsewhere.; ## Todos. Notable points that this PR has either accomplished or will accomplish.; - [x] Fixed py-side Molden writer; - [x] Added a py-side Molden test; - [x] Moved `return_wfn` warnings into the `energy` class. As these can only be called from here I think thats fine for now. Needs to find a better home in the future.; - [x] Modernized a few plugins; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/304:312,test,test,312,https://psicode.org,https://github.com/psi4/psi4/pull/304,1,['test'],['test']
Testability,"## Description. Improved fixed-coordinate optimizations. Test opt7 still works, as does a full dihedral scan of HOOH in C2 symmetry. Resolves issue #10 (there are no longer any nonsymmetric displacements). A new keyword `FIXED_COORD_FORCE_CONSTANT` allows tweaking for softer or firmer constraints, if necessary. The code does interpret fixed dihedrals <-180 or >180. However, the code does NOT currently deduce the most direct way through the dihedral discontinuity at 180. So it's a bad idea to give an input geometry with a dihedral of, say 178, and assign a target value of -178. Also, I've turned off dynamic trust radius sizing for optimizations with fixed coordinate targets by default.; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/328:57,Test,Test,57,https://psicode.org,https://github.com/psi4/psi4/pull/328,1,['Test'],['Test']
Testability,"## Description. Increases compatibility with external analysis tools, by providing Gaussian formatted checkpoint file (FCHK) output. Also adds built-in distributed multipole analysis via Stone's GDMA package.; ## Todos; - [x] Add FCHK writer to libmints.; - [x] Incorporate GDMA 2, for distributed multipole analysis.; - [x] Add GDMA options, to prevent user from having to provide a separate input file.; - [x] Put GDMA results in the variables map.; - [x] Add GDMA test case.; - [x] Document FCHK writer and GDMA.; ## Questions; - [x] Although GDMA is released under GPL2, I want to try to contact Anthony Stone to get explicit permission to release his code as a subdirectory of Psi4. I don't think there are any legal problems with including an FCHK writer; I simply followed the [format description](http://www.gaussian.com/g_tech/g_ur/f_formchk.htm) and checked it against some of the GDMA examples. Anybody disagree?; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/323:467,test,test,467,https://psicode.org,https://github.com/psi4/psi4/pull/323,1,['test'],['test']
Testability,"## Description. Modified linear bend algorithm in optking to bend, when possible, along cartesian axes. Added SF4 (opt14) test case for which this change was made.; ## Todos; - [x] Optimizer now works for odd cases where linear bend is in a symmetry plane but is not constrained to be linear by the molecular point group. Fixed problem discovered by WebMO use for SF4.; - [x] Added opt14 test case for SF4.; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/300:122,test,test,122,https://psicode.org,https://github.com/psi4/psi4/pull/300,2,['test'],['test']
Testability,"## Description. Refreshed all output.ref's in the tests folder. An interesting discovery is that some DFT methods (wB97X, and wB97) inhibit the Psi4 output printing. We need to fix this before this PR goes through, but I wanted to start in on checking some of the changes.; ## Todos; - [x] Several DFT functionals no longer print their output correctly. While the program still runs the input script (can be verified with python print), Psi4 printing has stopped. This needs to be fixed. ; - [x] Update dft1, dft1-alt, and dft2 test case output.ref's after the above change.; ## Spot check outputs. I don't think its possible to compare every single output, but I would like to borrow the following people to spot check a few outputs. We run quite a few tests, but they certainly are not comprehensive. This could potentially show holes in our testing strategy (like the above issue). . Probably the easiest way to do this is go to the ""Files changed"" tab at the top and use a browser search to find a file your interested in. This does require you to know the name of the file in question. Alternatively, you can download my branch and run a `git diff -w -b HEAD~4 filename`. The `-b -w` options are to help cleanup the diff a bit.; - [x] CC @lothian ; - [x] OCC/DFOCC @bozkaya ; - [x] Psithon/DFTD3/PyWrap/etc @loriab ; - [x] FNO-CC @edeprince3 ; - [x] Opt @psi-rking ; - [x] CI (myself); - [x] SCF/DFT @jturney @robparrish ; - [x] DCFT @andysim ; ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/315:50,test,tests,50,https://psicode.org,https://github.com/psi4/psi4/pull/315,4,['test'],"['test', 'testing', 'tests']"
Testability,## Description. Running `vmd_cube.py` would produce an error due to the use of deprecated `.iteritems` instead of `.items`. ## User API & Changelog headlines; - [x] Fix Python3 compatibility in vmd_cube.py. ## Dev notes & details; - Replace `iteritems` with `items`. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3097:287,Test,Tests,287,https://psicode.org,https://github.com/psi4/psi4/pull/3097,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description. So `name_`, `description_`, and `citation_` for functionals and superfunctionals default to empty std::string s, `""""`. Something about the mpi printing changeover did not like empty strings one bit, so the printing gave up whenever description & citation weren't set in functional.py . This occurs for the functionals B97-D (Grimme's) and HTCH and DLDF superfunctional. But that printing only gets called when print level >=2 (which it is for the dft1, dft1-alt, and dft2 test cases). Thus certain dft jobs have been giving not much output for a year and a half. A string with standard indentation fixes the problem. Kudos to @dgasmith for actually looking at a test case output and noticing.; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/319:488,test,test,488,https://psicode.org,https://github.com/psi4/psi4/pull/319,2,['test'],['test']
Testability,"## Description. The DOI Foundation [started recommending a new resolver](https://www.doi.org/doi_handbook/3_Resolution.html#3.8). While their URL change may be a bit ironic, it's now [encrypted](https://www.ssllabs.com/ssltest/analyze.html?d=doi.org) and the old `dx` subdomain is being redirected. So, there is no urgency here. However, for consistency, this PRs suggests to update all static DOI links accordingly, plus the code that generates new DOI links. ## Checklist; - [-] Tests added for any new features; - [-] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1761:481,Test,Tests,481,https://psicode.org,https://github.com/psi4/psi4/pull/1761,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description. The `GIT_TAG` argument to `ExternalProject_Add` was changed to `v1.1.4` to reflect a version bump in [PCMSolver](https://github.com/PCMSolver/pcmsolver/releases/tag/v1.1.4); I had introduced a bug with v1.1.3 The polarization charges were computed with a degraded accuracy. This was caught neither by the library own unit tests nor by Psi4 tests, as it becomes apparent only when trying to calculate higher-order response properties (available in DALTON, but I failed to run the PCM tests there...); I apologize for any inconvenience!; ## Todos; - [x] Update the version of PCMSolver shipped with Psi4.; ## Questions; - [x] @loriab should re-build the conda package; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/440:338,test,tests,338,https://psicode.org,https://github.com/psi4/psi4/pull/440,3,['test'],['tests']
Testability,"## Description. The main motivation for these changes is to make the pending #1061 available satisfying the constraints and comments offered by @dgasmith and @amjames.; This mainly amounts to localizing state to a suitable CC wavefunction object and we tried doing that within the scope of #1061, but quickly recognized that some form of rewrite of the CC infrastructure would be more helpful in general. See also #1247 . This PR makes the first step of moving the various `cc*` folders inside a top-level `cc` folder which contains the `ccwave.h` and top-level implementation files. This is thus mostly aesthetics, but avoids drowning the (hopefully!) good stuff to come in a large diff. ~Hold off merging until #1203, #1206, #1251, and #1252 are in. I'll keep rebasing this one accordingly.~. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Moved `cc{energy,hbar,lambda,density,eom,response}` under `cc` folder.; - [x] Moved `ccwave.h` header file to top-level `cc` folder. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1253:1046,Test,Tests,1046,https://psicode.org,https://github.com/psi4/psi4/pull/1253,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description. The main motivation for these changes is to make the pending #1061 available satisfying the constraints and comments offered by @dgasmith and @amjames.; This mainly amounts to localizing state to a suitable CC wavefunction object and we tried doing that within the scope of #1061, but quickly recognized that some form of rewrite of the CC infrastructure would be more helpful in general. We are preparing a more thoroughly motivated outline of the changes we propose, which will be posted as an issue. In the meantime, this PR makes the first step of moving the various `cc*` folders inside a top-level `cc` folder which contains the `ccwave.h` and top-level implementation files. This is thus mostly aesthetics, but avoids drowning the (hopefully!) good stuff to come in a large diff. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Moved `cc{energy,hbar,lambda,density,eom,response}` under `cc` folder.; - [x] Moved `ccwave.h` header file to top-level `cc` folder.; - [x] Cherry-picked some of the changes by @tomspur; * Changes suggested by valgrind and cppcheck; * Matrix CTOR from `dpdbuf4` @amjames could you check that setting `symmetry_` is done correctly?. Aesthetics; - [x] Run `clang-format` on `ccenergy`. Supersedes #1203, see #1144 ; - [x] Run `clang-format` on `ccdensity`. Supersedes #1202, see #1144 ; - [x] Run `clang-format` on `cclambda`. Supersedes #1206, see #1144 ; - [x] Run `clang-format` on `cctriples`. Supersedes #1209, see #1144 ; - [x] Remove `void` from function argument lists in the `cc*` folders. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1243:1618,Test,Tests,1618,https://psicode.org,https://github.com/psi4/psi4/pull/1243,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description. The overall goal was to revamp the SCF guess inside Psi to give a bit better convergence and reduce the number of times a user needs to intervene in guess selection. To this end we have improved the speed of SAD, and tweaked default guesses away from CORE. The other half of improving SCF convergence is improving the solver which is delegated to a later date.; ## Todos; - [x] Changed SAD to use DF (default) or a Direct JK object. Reduced computational time of SAD by 50-2000x (yes, really).; - [x] SAD guess is now default for RHF, all RHF test cases pass.; - [x] GWH is now the default for ROHF/UHF, cc11 fails and was switched back to CORE.; - [x] Added fractional occupations via electron smearing across a given row. Preliminary tests show that for something like the HF molecule this works really well, but less so for Benzene. However, for UHF test cases this seems to help things dramatically. Turned off by default.; - [x] Closes #156. Now takes ~3 seconds instead of several hours.; - [x] Add Weigend J fit as a fail over fitting basis sets. While this is only J fit, this appears sufficient for SAD and contains auxiliary basis for atoms through Xenon.; - [x] Add secondary failover to Direct if DF is too angular momentum heavy for compiled `libint`.; ## Questions; - [x] We are not sold on GWH as the default for ROHF and UHF, the general consensus is that it works better than CORE on the average. Feedback is most welcome.; - [x] There may have been stability issues with SAD in the past. Can anyone recall what these were and provide an example?; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/400:559,test,test,559,https://psicode.org,https://github.com/psi4/psi4/pull/400,3,['test'],"['test', 'tests']"
Testability,"## Description. The semilocal PW86 exchange functional (PRB 33:8800(R), 1986) is implemented. The dft1 test case includes four test cases for this functional on a water molecule. The energies are compared against the nwchem reference implementation. The PW86PBE exchange-correlation functional (keyword: pw86pbe), built as the combination of PW86 exchange and PBE correlation, is also made available.; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/453:103,test,test,103,https://psicode.org,https://github.com/psi4/psi4/pull/453,4,['test'],['test']
Testability,"## Description. There was a race condition in the parallel calculation of ESP over grid in memory. This was fixed in PR #1900.; This made the computation of ESP serial and quite slow (as mentioned in #1614 for example).; This PR brings back the OpenMP parallelization, the race condition is avoided by allowing each thread to hold its own copy of the `ElectrostaticInt` object. Thanks to @JonathonMisiewicz for the initial hint. ## User API & Changelog headlines; - [x] Significant acceleration of the calculation of ESP over grid in memory. ## Dev notes & details; - [x] Created a vector of thread-specific `<ElectrostaticInt>` and `<Matrix>` objects for computing the ESP at a given grid point; - [x] Added `#pragma omp parallel for schedule(dynamic)` to parallelize the outer loop over grid points. ## Questions; - [ ] While working on this part of the code I noticed that `cubeprop` uses a scheme different from the one used by `oeprop` to compute ESP on a grid. I am not sure this is documented. Should it be?; - [ ] Initially my goal was to parallelize the computation of `compute_esp_over_grid` function which reads the grid from `grid.dat` file. The way it is designed now, the grid is read iteratively, so one grid point read->one ESP point computed->one ESP point written to the output `grid_esp.dat` file. This is not parallelizible. However, if one would read grid points in batches - this can be parallelized. What do you think? . ## Checklist; - [x] Tests added for any new features => [mints14](https://github.com/psi4/psi4/tree/master/tests/python/mints14) test already in place; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2891:1464,Test,Tests,1464,https://psicode.org,https://github.com/psi4/psi4/pull/2891,5,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,"## Description. Thermo and isotope improvements; ## Todos. Notable points that this PR has either accomplished or will accomplish.; - [x] fixed bug whereby mass specification in `molecule {...}` through `C@14.0` led to no basis fns being placed on those atoms; - [x] updated thermo printing to include kJ, Cp, and hopefully be easier to orient oneself in; - [x] compared our thermo output for isotopes to other programs' in new test case freq-isotope; ## Questions; - [x] Would be good to get #345 resolved; - [x] @psi-rking may want to look over new thermo printing (example [here](https://github.com/loriab/psi4/blob/b3lyp35/tests/freq-isotope/output.ref)); ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/348:428,test,test,428,https://psicode.org,https://github.com/psi4/psi4/pull/348,2,['test'],"['test', 'tests']"
Testability,"## Description. This PR fixes thread synchronization in AIOHandler after KTB. The std::thread in C++11 must not be joinable when it is destroyed, or it calls terminate(). Before destroying every thread created in AIOHandler, it is thus joined. In addition, a thread must not be joined twice, thus the synchronization step now checks whether the thread is joinable before joining. Fixes #596 and should definitely fix errors in tests cubeprop, sapt2, sapt3 and sapt6 that appeared in KTB and for which @loriab had a workaround. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Fixed thread management in AIOHandler. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/609:427,test,tests,427,https://psicode.org,https://github.com/psi4/psi4/pull/609,1,['test'],['tests']
Testability,"## Description. This PR is a reboot of https://github.com/psi4/psi4/pull/2695. That PR hasn't been kept up-to-date with the many changes to JK since, so I decided to reimplement it from scratch. The motivation and ideas are the same, however, so I will copy-paste the description here:. This PR is the second in a series of planned PRs designed to remove density screening from the TwoBodyAOInt object and into the JK object, with PR https://github.com/psi4/psi4/pull/2547 being the first such PR. Having density screening available in TwoBodyAOInt runs the risk of applying density screening to algorithms where density screening doesn't make sense. Thus, it would be a good idea to move the logic of density screening to where it is more correctly applied, i.e., the JK object. The primary purposes of this PR are twofold:. First, this PR introduce the shell_significant() framework to the JK class. The shell_significant() framework starts with a shell_significant() virtual function that exists in the base JK class. The shell_significant() function can then be redefined specifically for different JK derived classes as needed. The existence of shell_significant() provides a unified framework for performing screening for any JK method, and it also provides the method by which density screening can be added directly to the relevant JK classes.; Second, this PR uses the shell_significant() framework to reimplement screening for certain JK methods. Most significantly, as implied in the first point, the biggest change in this regard was the removal of shell_significant_density() from TwoBodyAOInt into the domain and its reimplementation into the JK shell_significant() definitions. With this change, density screening is now the domain of individual JK classes rather than the TwoBodyAOInt class, which was one of the primary goals of this overall refactor PR set in the first place. Additionally, another method that was subject to slight changes from the shell_significant() framework was",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3098:693,log,logic,693,https://psicode.org,https://github.com/psi4/psi4/pull/3098,1,['log'],['logic']
Testability,"## Description. This PR is part two of a mini-project regarding the two DFJK algorithms present in Psi4. The first PR (https://github.com/psi4/psi4/pull/2848) applied to MemDFJK, and the second PR (this one) applies to DiskDFJK. The goal of this PR project is to add an expert keyword to allow user control over which subalgorithm is used by either MemDFJK or DiskDFJK. See, MemDFJK and DiskDFJK, despite their name, each have separate ""subalgorithms"" optimized to be run either in-core or out-of-core. While MemDFJK and DiskDFJK can be independently selected with `SCF_TYPE`, their subalgorithms cannot be; subalgorithm selection was previously controlled exclusively through memory allocated to Psi4. The mini-project this PR is part of, is meant to rectify that issue. In the previous PR of this project, the `SCF_SUBTYPE` keyword was introduced, an expert option allowing for forced execution of a given subalgorithm. The default option, `AUTO`, has the code select the subalgorithm automatically, as before. `INCORE` forces MemDFJK to use the in-core subalgorithm, and throws an exception if not enough memory is allocated to Psi4 to do so. `OUT_OF_CORE` forces MemDFJK to use the out-of-core subalgorithm, even if enough memory is allocated to Psi4 to use the in-core subalgorithm. This current PR takes the `SCF_SUBTYPE` keyword, previously applied to MemDFJK, and applies it to the DiskDFJK algorithm, with the same effects. ## User API & Changelog headlines; - N/A. ## Dev notes & details; - [X] Implements functionality of the SCF_SUBTYPE keyword to the DiskDFJK class (i.e., the DISK_DF SCF_TYPE). ## Questions; - N/A. ## Checklist; - [X] Tests added for any new features; - [X] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [X] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2924:1650,Test,Tests,1650,https://psicode.org,https://github.com/psi4/psi4/pull/2924,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description. This is No. 7 of the DDD series, #1351. ## Todos; - [x] test both old `run_json` and new `run_qcschema` modes and access patterns in the basic addons testing.; - [x] I don't remember in what order it came about, but `driver_util.py` had a function `negotiate_derivative_type` that was a simpler version (returned `analytic` and `1_0` for analytic and findif gradient, respectively) of the trio of functions in ddd (returns `(1, 1)` and `(1, 0)` for analytic and findif gradient, respectively) and was tested in `test_dertype.py` and was never run. This unused fn and its testing was removed and replaced by the ddd version.; - [x] the new `negotiate_derivative_type` function probes managed methods earlier than before, so it happens that the exact error names (not the text) expected by stdsuite change.; - [x] the new `negotiate_derivative_type` function is called early, so it now handles the methodname typo helper (""Did you mean?"") that FAE added. The independent `_method_exists()` fn removed.; - [x] the former function `_set_convergence_criterion` where you passed in 5 integers for the different E/D_CONVERGENCE values has been rewritten as `negotiate_convergence_criterion` where you pass in a tuple of the case (e.g., `(2, 1)` is Hessian by findif of gradients). In actual `driver.py`, the function calls have been switched out. The values set are the same, but the arguments like `(1, 0)` aren't necessarily appropriate in this non-ddd driver code routing.; - [x] the former function `_find_derivative_type` has been replaced by three functions headed up by `negotiate_derivative_type`. For both, the goal is to take a method name, the target derivative, and any user modifications and return the appropriate analytic or findif strategy or produce a helpful error. sounds simple, but managed methods and cbs specs complicate things. In ddd, this function is called early, not piecemeal throughout the driver, so more probing has been consolidated into the new function. In ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2536:72,test,test,72,https://psicode.org,https://github.com/psi4/psi4/pull/2536,4,['test'],"['test', 'tested', 'testing']"
Testability,## Description. This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix `psi::CharacterTable` assignment operator to copy `bits_`. . ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1179:251,Test,Tests,251,https://psicode.org,https://github.com/psi4/psi4/pull/1179,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description. This is part of Psi4 porting to Windows (#933). `psithon2` test fails on Windows:; ```; 2018-12-05T15:52:01.1057243Z 8/9 Test #307: psithon2 .........................***Failed 24.86 sec; 2018-12-05T15:52:01.1057730Z 	Built-in energy...................................................PASSED; 2018-12-05T15:52:01.1059103Z 	PSIPATH database..................................................PASSED; 2018-12-05T15:52:01.1059291Z 	Built-in database.................................................PASSED; 2018-12-05T15:52:01.1059763Z 	PSIPATH plugin....................................................PASSED; 2018-12-05T15:52:01.1059834Z ; 2018-12-05T15:52:01.1060236Z QcdbException BasisSetNotFound: BasisSet::construct: Unable to find a basis set for atom 1 for key BASIS among:; 2018-12-05T15:52:01.1060376Z Shell Entries: ['O']; 2018-12-05T15:52:01.1060874Z Basis Sets: [('MYSTO3G', 'MYSTO3G', None)]; 2018-12-05T15:52:01.1061043Z File Path: D:\a\1\b\build\tests\psithon2, D:\a\1\b\build\tests\psithon2\psiaux1:psiaux2, D:\a\1\b\build\stage\share\psi4\basis; 2018-12-05T15:52:01.1061446Z Input Blocks: ; 2018-12-05T15:52:01.1061509Z ; 2018-12-05T15:52:01.1061540Z ; 2018-12-05T15:52:01.1061649Z ; 2018-12-05T15:52:01.1061699Z Traceback (most recent call last):; 2018-12-05T15:52:01.1062102Z File ""D:/a/1/b/build/stage/bin/psi4"", line 272, in <module>; 2018-12-05T15:52:01.1062185Z exec(content); 2018-12-05T15:52:01.1062629Z File ""<string>"", line 68, in <module>; 2018-12-05T15:52:01.1062767Z File ""D:\a\1\b\build\stage\lib\psi4\driver\driver.py"", line 545, in energy; 2018-12-05T15:52:01.1063166Z wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); 2018-12-05T15:52:01.1063257Z File ""D:\a\1\b\build\stage\lib\psi4\driver\procrouting\proc.py"", line 2022, in run_scf; 2018-12-05T15:52:01.1063640Z scf_wfn = scf_helper(name, post_scf=False, **kwargs); 2018-12-05T15:52:01.1063739Z File ""D:\a\1\b\build\stage\lib\psi4\driver\procrouting\proc.py"", line 1281, in sc",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1410:75,test,test,75,https://psicode.org,https://github.com/psi4/psi4/pull/1410,2,"['Test', 'test']","['Test', 'test']"
Testability,"## Description. This is the second PR of the M-D series, this time replacing the OS code for arbitrary-order multipole integrals.; Some notable points:. - I added a new routine `ao_multipoles` to the Py API to conveniently call those integrals.; - There's also a new `multipole_grad` which computes first derivatives of arbitrary-order multipole integrals (new feature!).; - The dipole derivative code in `DipoleInt` (which uses l2 for dipole ints, used OS86 for derivs) is removed.; - To keep the API stable, the `dipole_grad` is hard-wired to `multipole_grad` with the appropriate arguments.; - ➡️ more features, less code 💡. ## ToDos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Implement arbitrary-order multipole integrals using M-D; - [x] first derivatives; - [x] finite-difference tests; - [x] more equation numbers; - [x] small benchmark against OS86 implementation. ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for **SQUASH-merge** (wait for @andysim and @loriab approval)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2496:841,test,tests,841,https://psicode.org,https://github.com/psi4/psi4/pull/2496,5,"['Test', 'benchmark', 'test']","['Tests', 'benchmark', 'tests']"
Testability,"## Description. Update links to Grimme's DFT-D3. Note that the link to the parameter source may not be correct - those with knowledge of the source, please chime in. Fixes #1084. ## Questions; - [ ] Is the link to the parameter source correct?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1085:265,Test,Tests,265,https://psicode.org,https://github.com/psi4/psi4/pull/1085,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description. With prompting and help from @SebWouters this PR updates ChemPS2 to v1.7 for DMRG-CASPT2 computations.; ## Todos; - [x] Psi4 now uses ChemPS2 tag 1.7; - [x] ChemPS2 no longer requires GSL, nuked that from CMake; - [x] Fiddled with the CMake a bit to clear up BLAS linking issues; - [x] Names have moved from `dmrgci` to `dmrg-ci` following discussion with @loriab @SebWouters ; - [x] Updated `src/dmrg` to latest version from ChemPS2; - [x] Added CASPT2 test case; - [x] Closes #263, #266, and #384 ; - [ ] Issue #150 is still open, for 1.0 we really need to clean this up. I think the two largest issues are the documentation and the keyword review. I think @loriab and @dgasmith will have to handle the rest.; - [ ] We have been experiencing some linking issues. While this works on my linux box and OS X laptop a few others testing this compilation would be beneficial. May close #264.; ## Questions; - [x] Keywords have moved around to align to the ""plugin"" version of ChemPS2 with a few minor alterations. Please check these out @loriab @kannon92 @SebWouters ; - [x] Do we want to add additional test cases?; ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/388:470,test,test,470,https://psicode.org,https://github.com/psi4/psi4/pull/388,3,['test'],"['test', 'testing']"
Testability,## Description. assemble_dipder_from_dipole function to compute dipole derivatives using finite differences.; Modified one test to not forgive IR intensities when dertype is 1.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1738:123,test,test,123,https://psicode.org,https://github.com/psi4/psi4/pull/1738,1,['test'],['test']
Testability,## Description. assemble_dipder_from_dipole function to compute dipole derivatives using finite differences.; Modified test to not forgive IR intensities when dertype is 1.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1740:119,test,test,119,https://psicode.org,https://github.com/psi4/psi4/pull/1740,1,['test'],['test']
Testability,## Description. follows from #2653 . NOT FOR REVIEW. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2662:237,Test,Tests,237,https://psicode.org,https://github.com/psi4/psi4/pull/2662,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description. mostly, polishes off CheMPS2; ## Todos. Notable points that this PR has either accomplished or will accomplish.; - [x] update dmrg keywords. add docs. fixes #414, #150; - [x] updates some tests for documentation; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/427:204,test,tests,204,https://psicode.org,https://github.com/psi4/psi4/pull/427,1,['test'],['tests']
Testability,"## Description. smooth user interactions with mp2 & cepa so that minimal inputs have a chance of working (esp. w/grad) and the same call to different modules returns the same answer.; ## Todos. Notable points that this PR has either accomplished or will accomplish.; - [x] `cepa(0)`/`ocepa(0)` in occ/dfocc called more specifically as `lccd`/`olccd`. psivars adjusted accordingly.; - [x] meanwhile, `cepa(0)` in fnocc called more specifically as `lccsd` (alias `cepa(0)`) or w/o singles as `lccd`. psivars and managed methods adjusted accordingly.; - [x] fixed defaulting of grad to findif of energies for managed methods. it had broken b/c just tested availability of analytic grad on `procedures['gradient']` and for managed methods that doesn't tell the full story. now probe the managed method in proc.py to see if gradient available.; - [x] alter default algorithms for scf for fnocc and dfocc. we've always said that the scf default for df post-HF methods was df, but only actually did algorithm switching for dfmp2 and sapt. now we really do it. in particular, so long as you don't set scf_type to the contrary, this will make a conv mp2 gradient run conv+conv and a df mp2 gradient run df+df.; ## Minor Todos; - [x] test cases build and run all the plugin templates; - [x] let ppl know how to access rohf mp3 & mp4 for toy problems; ## Questions; - [x] @edeprince3 should look over my changes to fnocc procedures in proc.py to make sure the scf algorithm flipping is sensible.; - [x] ditto, @bozkaya for occ/dfocc; ## Status; - [x] Ready to go, after @edeprince3 and @bozkaya sign off on it.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/306:646,test,tested,646,https://psicode.org,https://github.com/psi4/psi4/pull/306,2,['test'],"['test', 'tested']"
Testability,"## Description; #1532 identified problem with memory leaks. Using cppcheck, I've found a number of possible candidates. My idea is to slowly work through all of them and replace all alloc/dealloc pairs with an RAII solution. Feel free to chime in if you disagree with the and design decisions. I'll do one object at a time so allow easy reverting, so this will eventually need to be squashed. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Fix leaks identified in #1532 by avoiding explicit allocation and deallocation. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1534:591,Test,Tests,591,https://psicode.org,https://github.com/psi4/psi4/pull/1534,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; #1550 switched the CPHF solver for analytic Hessians from libfock to the wfn one. That switched the CPHF from 1e-6 to 1e-4 and the HOOH_TS-analytic test case in test_vibanalysis took exception. This PR sends the relevant `CPHF` module (aka libfock) options to the Hessian CPHF call. So returns the default to 6. Thanks to @andysim for difference-hunting. ## Questions; - [ ] user set-able via `set solver_convergence 5`. but `set cphf solver_convergence 5` has no effect b/c ""SCF"" module is the active options set at this time. I think that calls for a greater overhaul than this fix. ## Checklist; - [x] full tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1609:164,test,test,164,https://psicode.org,https://github.com/psi4/psi4/pull/1609,2,['test'],"['test', 'tests']"
Testability,"## Description; #2476 and #2594 indicate a major problem in Psi's SCF code: the simplistic formula `nalphapi = doccpi + soccpi` and `nbetapi = doccpi` is incapable of describing references where there are more beta than alpha orbitals of a given irrep. This occurs in MOM (where we instead use ugly hacks) and in UHF (where we crash). Furthermore, storing all of these irrep quantities is redundant. This PR remedies the situation by only storing `nalphapi` and `nbetapi`. `doccpi` and `soccpi` can be computed from these when needed. The Py-side API is unchanged `doccpi(), soccpi()`, while the C-side API changes from `doccpi_, soccpi_` to `doccpi(), soccpi()`. While we are doing some extra work to compute docc and socc every time they're needed, the computational cost is negligible in comparison to Fock diagonalizations, integral transforms, and tensor contractions. . To prevent scope creep, this PR aims solely to change the wavefunction. **This is a major undertaking and should not be done lightly.** A subsequent PR will fix the linked issues (if not fixed by this PR) and add them as test cases once the fix is confirmed. Obligatory @susilehtola ping. ## Todos; - [x] DOCC and SOCC are now computed rather than stored; - [x] MOM simplified; - [x] Lots of docc/socc replaced with alphapi/betapi where more appropriate; - [x] More auto; - [x] More dimension, fewer raw arrays . ## Checklist; - [x] Passes ctest and pytest (all, except addons). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2619:1097,test,test,1097,https://psicode.org,https://github.com/psi4/psi4/pull/2619,1,['test'],['test']
Testability,"## Description; #3004 seems to have been a false alarm (closes #3004), but since the code made a couple people suspicious, may as well add some notes. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3005:171,Test,Tests,171,https://psicode.org,https://github.com/psi4/psi4/pull/3005,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; **What?** This PR creates the `IrrepedVector` class template. The `Vector` and `IntVector` classes now inherit from this, adding on methods that only make sense for that particular template instance. **Why?** During a refactor of the MOM code, I had to use `Vector` and `IntVector` features heavily and found this synchronization of the classes necessary to keep my sanity. **Who cares?** Obligatory pings to @hokru (who may want to create `FloatVector` for faster `dfocc` operations) and @lothian (who may want to create `ComplexVector` for magnetic spectroscopies). No reviews required. **How do I review this?** The changes to `export_mints.cc`, `vector.h`, `vector.cc`, `intvector.cc`, and `test_vector.py` are the heart of this PR. The rest are either compatibility changes or general code cleanup. Be warned that `iota` and the `sort` functions are needed for my upcoming MOM changes and are currently unused, and I've changed some functions to not use pointers. ## Todos; - [x] Created `IrrepedVector<T>`; - [x] `Vector` and `IntVector` inherit from `IrrepedVector<T>`; - [x] `Vector` and `IntVector` now have identical code logic; - [x] `iota` and `sort` methods are added; - [x] `IntVector` now has more functionality; - [x] Added bounds checking to several `IrrepedVector<T>` methods.; - [x] Increased test coverage of `Vector`; - [x] Added test coverage of `IntVector`; - [x] Silenced compiler warning about missing override; - [x] Removed several pointers from parameter types; - [x] Removed several pointers from return types; - [x] Changed convention from ""irreped"" to ""irrepped"". ## Checklist; - [x] Full ctest passed (before some trivial edits); - [x] `test_vector.py` passed . ## Status; - [x] Ready for review; - [x] Ready for merge **SQUASH**; Jet approval **required** before merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2628:1148,log,logic,1148,https://psicode.org,https://github.com/psi4/psi4/pull/2628,3,"['log', 'test']","['logic', 'test']"
Testability,"## Description; **work in progress**; Enables basic linear algebra in single-precision (FP32).; For now rather a rough proof-of-principle implementation for perturbative triples correction in single-precision. Any help is welcome and perhaps even needed for clean C++ and/or smart implementations. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Most of BLAS in single-precision; - [x] SharedTensor analogues for FP32 in `dfocc` module; - [x] basic version of (T)-correction in FP32 for `dfocc` module working. (50% faster on my workstation over FP64, error below 1e-11 for benzene-methane complex at VTZ); - [ ] tidy up; - [ ] template for double-to-float conversion of SharedTensor (currently manual loops); - [ ] documentation; - [ ] ... ## Questions/Notes; - general comments and directions welcome! Also on general conventions. . ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1261:905,Test,Tests,905,https://psicode.org,https://github.com/psi4/psi4/pull/1261,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; - Update to adcc 0.15.0 and adapt interface (plural forms of keys have been deprecated).; - Add PE-ADC test as adcc now automatically detects PE ground states and includes appropriate corrections. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1914:119,test,test,119,https://psicode.org,https://github.com/psi4/psi4/pull/1914,4,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,"## Description; - [x] Package build on Windows was getting the error below. From https://numpy.org/doc/stable/user/basics.types.html, I think this'll fix it. (Also probing whether an Azure error in another PR is repeatable.). ```; Tests failed for psi4-1.8a1.dev6+758d3af-py38_0.tar.bz2 - moving package to C:\tools\miniconda3\conda-bld\broken; WARNING:conda_build.build:Tests failed for psi4-1.8a1.dev6+758d3af-py38_0.tar.bz2 - moving package to C:\tools\miniconda3\conda-bld\broken; E File ""%PREFIX%\lib\site-packages\psi4\driver\qcdb\bfs.py"", line 80, in BFS. E radii = _get_covalent_radii(elem). E File ""%PREFIX%\lib\site-packages\psi4\driver\qcdb\bfs.py"", line 155, in _get_covalent_radii. E covrad = np.fromiter((covalent_radii_lookup[caps[at]] for at in range(nat)), dtype=np.float, count=nat). E File ""%PREFIX%\lib\site-packages\numpy\__init__.py"", line 284, in __getattr__. E raise AttributeError(""module {!r} has no attribute "". E . E AttributeError: module 'numpy' has no attribute 'float'. E . E Printing out the relevant lines from the Psithon --> Python processed input file:. E [10, 33], . E [11, 34, 35], . E [17], . E [18]] . E qmol = qcdb.Molecule.from_string(iceIh, dtype='xyz'). E --> frag, arrs, bmols, bmol = qmol.BFS(seed_atoms=[[3,16], [21]], return_arrays=True, return_molecule=True, return_molecules=True). E compare_integers(frag == ref_fragmentation, 1, 'Q: BFS from qcdb.Molecule') . E compare_arrays(qmol.geometry(np_out=True)[[1, 14, 19]], arrs[0][3], 4, 'Q: geom back from BFS') . E compare_integers(15, bmol.nfragments(), 'Q: nfrag') . E compare_values(qmol.nuclear_repulsion_energy(), bmol.nuclear_repulsion_energy(), 4, 'Q: nre') . E compare_arrays(qmol.geometry(np_out=True)[[2, 13, 20]], bmols[4].geometry(np_out=True), 4, 'Q: frag geom back from BFS') ; ```; - [x] The docs-pr build has been failing on several PRs due to the docs.yaml env not solving. It solves locally for me on conda, but apparently not on the mamba setup we have in the GHA. I've switched tha",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2845:231,Test,Tests,231,https://psicode.org,https://github.com/psi4/psi4/pull/2845,2,['Test'],['Tests']
Testability,"## Description; 99% of the docstrings export_mints.cc are now composed, with appropriate py::arg's. There are a few docstrings remaining, which were left either because I couldn't figure them out or they lacked C++ documentation. Psi4 compiled and psi4 --test finished successfully after these changes.; ## Todos; - [ ] Fill in last remaining docstrings. ## Questions; - [ ] Psi4 does not compile when I supply the MatrixFactory function's py::args, and I could not figure out why. Can someone more knowledgeable take a look at this?. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/761:255,test,test,255,https://psicode.org,https://github.com/psi4/psi4/pull/761,1,['test'],['test']
Testability,## Description; <!-- Adds DirectDFJK Functionality for cases where disk use is too inefficient. -->. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] On-the-fly calculation of DF-ERI tensors for Fock builds; - [x] Works for RHF cases. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2040:313,Test,Tests,313,https://psicode.org,https://github.com/psi4/psi4/pull/2040,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. --> ; Fixes a couple of minor issues for a research project of mine. See todos. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Within the OCC module, updating the opdm to the wavefunction; - [x] Exposed a function to update the num_frozen_uocc global. ## Checklist. - [x] quick tests, occ module tests, standard suite tests. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2072:413,test,tests,413,https://psicode.org,https://github.com/psi4/psi4/pull/2072,3,['test'],['tests']
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. --> @andysim's suggestion worked! Overcomes the bad combination of Intel icpc, c++17 standard, and Libint2 (water energy off by 50 Eh). I've only run smoke tests so far but will fix that tomorrow. *EDIT* I removed some l2 headers among the export_* files that didn't seem to be necessary. And I reordered some l2 headers for consistency with the l2 convenience header. this'll need a little adaptation after #2388 merge, I expect. ## Checklist; - [ ] ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2392:231,test,tests,231,https://psicode.org,https://github.com/psi4/psi4/pull/2392,4,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. --> This switches from detecting the config.cmake file from a cppe library to detecting the python module. It's more realistic about what psi4 actually needs. By chance, this detection worked ok with internal builds or with c-f cppe or with psi4 cppe+pycppe. . `adcc-formaldehyde-pe-adc2` still failing with `catching classes that do not inherit from BaseException is not allowed` on `InvalidReference`. ## Checklist; - [ ] ~Tests added for any new features~; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2391:500,Test,Tests,500,https://psicode.org,https://github.com/psi4/psi4/pull/2391,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] #2775 I guess wasn't up-to-date with master so the combination of it and some intervening changes broke the build. ~Hopefully this fixes it, and the weird L2 error I'm getting locally is nothing.~ An explicit destructor was needed, too. Thanks to https://stackoverflow.com/a/34073221 for guidance.; - [x] Analogous to #2845 for the master docs build should fix that; - [x] A couple old copyrights. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2855:738,Test,Tests,738,https://psicode.org,https://github.com/psi4/psi4/pull/2855,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] CI must have bumped OSX images to 12, so added logic to grab a SDK. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2843:367,log,logic,367,https://psicode.org,https://github.com/psi4/psi4/pull/2843,1,['log'],['logic']
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Some setups were using a BLAS that doesn't support the extension AXPBY, so #2887 caused runtime can't-find-symbol errors. Most notably, this occurred for Mac users linking to Accelerate. This bypasses the trouble by rerouting to dscal+daxpy; - [x] clarifies who's getting scaled in the export docs.; - Note that the CI error was due to ongoing changes in QCArchive `next` branch. I've pinned the dep back a release so that psi4's interface to it can be fixed later. ## Questions; - [ ] Can someone confirm this works with the Accelerate setup? Below is a quick test.; ```; import psi4; import numpy as np. vecX = np.array([1., 1., 1.]); pvecX = psi4.core.Vector.from_array(vecX); print(pvecX.np) # 1. vecY = np.array([5., 5., 5.]); pvecY = psi4.core.Vector.from_array(vecY); print(pvecY.np) # 5. pvecX2 = pvecX.clone(); pvecX2.axpy(2.0, pvecY); print(pvecX2.np) # 11. pvecX2 = pvecX.clone(); pvecX2.axpby(2.0, 1.0, pvecY); print(pvecX2.np) # 11. pvecX2 = pvecX.clone(); pvecX2.axpby(2.0, 3.0, pvecY); print(pvecX2.np) # 13; ```. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2895:881,test,test,881,https://psicode.org,https://github.com/psi4/psi4/pull/2895,4,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] cmake to 3.19 in preparation for einsums; - [x] Einsums 0.5 to fix CI; - [x] bump mem to fix error in fsapt1 test. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3162:429,test,test,429,https://psicode.org,https://github.com/psi4/psi4/pull/3162,4,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] fix two cookbook tests. they were already set old and new ways, so getter change not needed. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2819:337,test,tests,337,https://psicode.org,https://github.com/psi4/psi4/pull/2819,1,['test'],['tests']
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] regenerate samples/. ## Checklist; - [ ] ~Tests added for any new features~; - [ ] ~[All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests)~. ## Status; - [x] Ready for review (autogen, so rubber stamp); - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2957:362,Test,Tests,362,https://psicode.org,https://github.com/psi4/psi4/pull/2957,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## Dev notes & details; This seems a silly PR since there's no net change to the physical constants, but it came up as a nice self-contained part of a DDD solution I'm working on. Plus, it closes #1795 .; - [x] instead of code importing physical constants from qcel everywhere, import it once, ensure that it's codata 2014 to match the c-side, and then everywhere in the driver that needs constants grabs this one instance. qcdb, too. for background, qcel has 2014 and 2018 with default 2014. so no net change.; - [x] removed some out-of-date import trials (csx and pasture) and co-opted the `dependency_check.py` for (1) the above physconst purpose and (2) to define some print formats that were cluttering `driver/__init__.py`, then renamed it `constants.py`. `extras.py` might have been better, but that gets confused with `psi4/extras.py`.; - [x] directed all the `pkg_resources` to qcel that has the same call https://github.com/MolSSI/QCElemental/blob/master/qcelemental/util/importing.py#L110-L116 . `pkg_resources` is deprecated, so this'll let us upgrade it consistently from one place someday. ## Checklist; - [ ] ~Tests added for any new features~; - [x] passes quicktests. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3027:1205,Test,Tests,1205,https://psicode.org,https://github.com/psi4/psi4/pull/3027,1,['Test'],['Tests']
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## Todos; - [x] Psi doesn't use ambit directly so never has required a version. Now that it's had its python interface updated (kill the boost!), most uses in the presence of Psi4 will need the new version, so let's not let lingering old versions pass.; - [x] The ecosystem GHA seems to have settled in nicely to testing addons, so let's remove that responsibility from the Azure CI lanes.; - leaving dftd3 and gcp since they're fast, easy, and important; - now addons tested with less compiler variety on Linux, but I don't think that's too big a problem. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2546:393,test,testing,393,https://psicode.org,https://github.com/psi4/psi4/pull/2546,2,['test'],"['tested', 'testing']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## Todos; - [x] Something about how CMake detects NumPy during FindPython is different between NumPy 1.22 and 1.23; only on Windows. No apparent changes in CMake FindPython. No apparent changes in conda NumPy recipe. All header files in the same places in a Windows c-f 1.22 and 1.23 NumPy distribution. Linux builds fine with a c-f NumPy 1.23. I don't know what's the real change, so we'll tell CMake where to look in the Azure recipe and pass the hint on to psi4/CM for the second `find_package(Python ...)`.; - [x] My other theory for solving the Azure problem was that my patched `anaconda-client` was behind the times. That wasn't the problem, but it's updated to v1.10.0 anyways.; - [x] Pinned qcelemental and qcengine in Windows recipe; * There's upcoming changes to those packages such that all of psi4 should be pinned and then advanced with the changes. This does that for the Windows recipe.; * fixes #2614 where Windows conda package had _no_ qcel pinning, so depending on channel order, sometimes took a really old qcel and pydantic. after this, channel order shouldn't matter. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2624:1191,Test,Tests,1191,https://psicode.org,https://github.com/psi4/psi4/pull/2624,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2255:264,Test,Tests,264,https://psicode.org,https://github.com/psi4/psi4/pull/2255,9,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2301:264,Test,Tests,264,https://psicode.org,https://github.com/psi4/psi4/pull/2301,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] #2210 revealed that an early test case had fallen prey to `phi_ao`'s Cartesian-only usefulness; - [x] mild enhancement to `diff_gbs` utility script so it can compare out-of-order basis sets; - [x] bump a few dep from-source-build versions. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2262:216,test,test,216,https://psicode.org,https://github.com/psi4/psi4/pull/2262,1,['test'],['test']
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Collect enough extra docstrings and tweak enough references to functions so that all the links in the docs resolve.; - [x] Ended up needing mild to moderate docs renovation through whole QCA stack; - [x] Now can turn on Sphinx warnings-to-errors and nitpicky so that docs remain healthy; - [x] Added new doc extension dependency, https://github.com/mansenfranzen/autodoc_pydantic, so that Pydantic models (as introduced in #2575) now get superior, rather than inferior, autodoc compared to classes.; - [x] Add in a few more `__all__`s to driver files. ## Checklist; - ~Tests added for any new features~; - [x] Full tests run. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2597:756,Test,Tests,756,https://psicode.org,https://github.com/psi4/psi4/pull/2597,2,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Libxc 5.1.2 required. actually 5.1.0 is fine with Psi4, but 5.1.1 _isn't_ for at least OP fctls like BOP; - thanks to @susilehtola for fixing up libxc so we could have a clean test suite again; - [x] lgtm, which only has old cmake available, can't use `Python::Module`, so providing workaround.; - [x] linux and mac conda packages are ready; - [x] win conda package should be published shortly. ## Checklist; - [ ] ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests) full test suite run with 5.1.2. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2113:363,test,test,363,https://psicode.org,https://github.com/psi4/psi4/pull/2113,5,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Nowadays, ctest (quick) followed by pytest (quick) runs a lot of duplicate tests (unless the latter uses ""quick and api""). Let's not do that. This switches Azure to ctest(smoke) followed by pytest (quick).; - before: ; - W: 1h30m; - L: 41-57m; - after:; - W: 1h5m; - L: 34-38m; - In working on dfocc, I found some stdsuite updates that hadn't been ported from qcng to psi4 and some general improvements.; - [x] better check expected vs intended modules. (can catch if the default compute module for a method+circs changes.); - [x] `test_*_default` in stdsuite changed meaning slightly. now PASSED means get final method answer correctly and XFAIL means known NYI. formerly, inputs that got the final method answer correctly but were not able to supply some submethod (like same-spin mp2 for ccsd) also got the XFAIL result.; - [x] have a mini ref file so can add reference data w/o waiting for a new qcengine release; - [x] regex and human-directed error messages to simplify and consolidate NYI methods testing. ## Checklist; - [x] Tests added for any new features; - [x] full stdsuite runs. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2632:262,test,tests,262,https://psicode.org,https://github.com/psi4/psi4/pull/2632,3,"['Test', 'test']","['Tests', 'testing', 'tests']"
Testability,## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Put back separate section for API/RN headlines in PR template; - [x] Looks like the dlpno fix in #2707 slightly broke a test. Zach has confirmed this is the reasonable fix. Only showed up in quad-zeta cbs step. ## Checklist; - [ ] ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2718:307,test,test,307,https://psicode.org,https://github.com/psi4/psi4/pull/2718,4,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] bumped libxc url to 5.1.4; - [x] fixed nbody bug where global qcvars != wfn qcvars for gradient nbody runs; - [x] fixed nbody bug identified by @AlexHeide and @psi-rking that [I introduced recently](https://github.com/psi4/psi4/pull/2180/files#diff-6c949ad06bfcc0f8d646a54c79a427c47e008cbdae82ca148b0f0af1e1319a63L223-R220) and led to CURRENT ENERGY being disp, not total for nbody runs involving dftd3; - [x] added module to provenance in qcschema return. ok place? it's sort of like ran function, also in prov.; - [x] fixed `psi4 --qcschema --messy` so that files remain, as ordered; - [x] test qcvars setting in nbody a bit more thoroughly and add a nbody+dftd3 test case. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2191:779,test,test,779,https://psicode.org,https://github.com/psi4/psi4/pull/2191,5,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] cast in DFTensor memory estimation so that one can perform a fno-df-cc on 6 heavy atoms with aqz in 31 GiB of memory, not 17179869183.261 GiB . (How did this bug live this long?) Improve printing to match DFHelper; - [x] start converting existing mem printing to GiB from mega. afaict, the fnocc values were already mebibytes, though labeled MB; - change in printing for identical calc below:. ```; < The DF Tensor (Qso) construction requires 31.261 GiB of memory. ; ---; > DFTensor Memory: Qso construction needs 31.261 GiB; user supplied 35.390 GiB. ; ```; ```; < Total memory available: 38146.97 mb; < CCSD memory requirements: 35113.77 mb; < 3-index integrals: 10081.38 mb; < CCSD intermediates: 25032.39 mb; < (T) algorithm: 9055.34 mb (low-memory); ---; > Total memory available: 37.253 [GiB]; > CCSD memory requirements: 34.291 [GiB]; > 3-index integrals: 9.845 [GiB]; > CCSD intermediates: 24.446 [GiB]; > (T) algorithm: 8.843 [GiB] (low-memory); ```. ## Checklist; - ~Tests added for any new features~; - ~[All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests)~. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2673:1164,Test,Tests,1164,https://psicode.org,https://github.com/psi4/psi4/pull/2673,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] switch gcp interface to QCEngine; - [x] add dftd4 interface calling QCEngine; - [x] update types return for disp. engine can handle ndarray, so leave arrays as np and shaped rather than flat lists; - [x] more tests -- psiapi, parameters extend func; - [x] add docs; - [x] note min qcng version, prob. v0.19; - [x] this passes cleanly locally but that's with custom engine and dftd4, so several PRs ahead of this one; - [x] allow doi as citations for dft; - [x] note that for `Mol.run_dftd4`, func overrides parameters in keeping with dftd4 API behavior, whereas in dftd3, parameters extend or override func. ## Questions; - [x] @jeffschriber should fisapt grab 2-body disp analysis or total disp analysis; - [x] a couple of the interface updates should be in v1.4 but d4 itself can be in v1.5. so this can get split after upstream settles down. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Aug 2021 Notes; - [x] rebased. the only thing that's left of the original PR checklist is dftd4 itself. gcp and dftd3 updates were pulled in in #2180.; - [x] note that it's not the dftd4 exe that this (that is, qcng) needs; rather, it's the dftd4 pymod that's needed.; - [x] one _can_ use the c-f `dftd4-python` conda package if you know how to set up your env to install both it and psi4 deps. But for linux only, I've prepared a `dftd4` conda package (not in final build form) off `-c psi4/label/dev`. ## Status; - [x] Ready for review; - [x] Ready for merge. EDIT: closes #1710",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2142:396,test,tests,396,https://psicode.org,https://github.com/psi4/psi4/pull/2142,4,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## User API & Changelog headlines. ## Dev notes & details; - [x] I was seeing 17m to solve the env last week, so let's switch to mamba solve.; - [x] Have to turn off analytic Hessian testing for windows since no ints.; - [x] Looks like it was testing twice -- one exe and one lib. Not really necessary.; - [x] Turn c-b back on. It was only off so I could get a green check on the release last week. ## Checklist; - ~Tests added for any new features~; - ~[All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests)~. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2961:263,test,testing,263,https://psicode.org,https://github.com/psi4/psi4/pull/2961,5,"['Test', 'test']","['Tests', 'testing', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## User API & Changelog headlines. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Fixes the wfn plugin; - [x] Adds a libecpint test to smoke so the c-f build can track it. ## Checklist; - [x] ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2988:400,test,test,400,https://psicode.org,https://github.com/psi4/psi4/pull/2988,4,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## User API & Changelog headlines. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] It turns out one can build a psi4 with Fortran extensions (detected, not compiled) w/o a Fortran compiler by letting the CXX compiler handle the linking. This is very useful on Windows where we want a `clang-cl` C/CXX compiler, but the only cohesive Fortran-including stack is the ming (gcc/g++/gfortran) one. So this adds an option `psi4_SKIP_ENABLE_Fortran` to _not_ enable Fortran when the code otherwise would. It doesn't check that the circumstances are suitable (that is, all detected, none to-be-compiled). Works great on Windows (that's how the conda pkg has dkh); haven't tried it on Linux.; - [x] Increasingly, where the <project>Config.cmake files get installed to is configurable, esp. as there's no one place cmake looks for linux/mac/win. So adding that option `psi4_INSTALL_CMAKEDIR`. You won't see a change unless you were customizing `CMAKE_INSTALL_DATADIR`.; - [x] also fix a couple install locations that were obvious for windows install.; - [x] stop testing the extra cli qcf tests for qcf master since those are run on mac, and it hangs. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2946:1325,test,testing,1325,https://psicode.org,https://github.com/psi4/psi4/pull/2946,5,"['Test', 'test']","['Tests', 'testing', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## User API & Changelog headlines. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Update binder environment and regenerate image.; - [x] Fix obscure bug where `psi4 --test quick_not_d2ints` couldn't be run serial and needed `-n2`.; - [x] Update some headmatter badges. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2966:440,test,test,440,https://psicode.org,https://github.com/psi4/psi4/pull/2966,1,['test'],['test']
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## User API & Changelog headlines. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] on c-f Linux and Mac, iomp5=omp, so need the threading ldd test altered to build psi4-dev pkg. also update some printing to f-strings; - [x] closes #3006 by adding a header. ## Checklist; - [ ] ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3007:414,test,test,414,https://psicode.org,https://github.com/psi4/psi4/pull/3007,4,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] fix bug where final findif and nbody quantities are computed and probe-able but not printed or logged.; - [x] update CI for c-f based; - [x] add docs warnings about out-of-dateness for build; - [x] work around windows console not liking strikethrough; - [x] psi4.addons() isn't the definitive word on ecosys availability -- testing.using is -- but it's simpler. This updates the Grimme addons to detect the favored distributions. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2959:582,log,logged,582,https://psicode.org,https://github.com/psi4/psi4/pull/2959,5,"['Test', 'log', 'test']","['Tests', 'logged', 'testing', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] one test failed in full tests. I can't check it easily, but I think this is the fix after #2885 ; - [ ] Feature2. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2908:491,test,test,491,https://psicode.org,https://github.com/psi4/psi4/pull/2908,5,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] RN 1; - [ ] RN 2. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2960:588,Test,Tests,588,https://psicode.org,https://github.com/psi4/psi4/pull/2960,24,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] RN 1; - [ ] RN 2. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] `samples/` changes are autogenerated -- don't read them; - [x] update docs env to use psi4-path-advisor; - [x] the old versions of `variable`/`set_variable` fns on core and wfn have been warning-and-forwarding since v1.4 . we had a debugging case where that forward was the problem, so it's time to actually disable them. they'll still give upgrade advice but won't run; - [x] allow running a a GRID_ESP or GRID_FIELD property through qcschema. need to pass in grid.dat contents through `atin.extras[""extra_infiles""] = {""grid.dat"": <contents>}` and be sure to `atin.protocols.native_files = ""all""`, then one can retrieve through `atres.native_files[""grid_esp.dat""]` or `""grid_field.dat""` closes #2307 . ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3095:1265,Test,Tests,1265,https://psicode.org,https://github.com/psi4/psi4/pull/3095,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Allow the use of upstream master for Libint2. The L2 build that v1.8 required also still works. ## Dev notes & details; - [x] Very recent L2 upstream master (after [10ca429217977bc2baac78fdaf3ac8d4f8aa05d9](https://github.com/evaleev/libint/commit/10ca429217977bc2baac78fdaf3ac8d4f8aa05d9) on 24 Nov) has everything Psi4 needs to run, namely Windows compatibility and runtime solid harmonic order (sho) switching. 🎉 ; - [x] However, for *this* L2 changeover, there's no particular reason to demand users switch from the L2 (loriab branch) you've been using since 8 May & v1.8. The runtime internals are all the same.; - [x] So the goal of this PR is to make Psi4 compatible with both L2 branches: May 2023 loriab and Nov 2023 upstream. The differences are:; - [x] there's a different components scheme, so max_am_eri=5 energy is represented as `eri_c4_5_d0` for May but `None` (if not patched) or `eri_hhhh_d0` (patched) for Nov. This PR makes sure psi4 can process both schemes for outfile printout and to redirect to findif if Hessian ints aren't available.; - [x] `find_package(Libint2 COMPONENTS eri_... cxx_ho ss.)` on May properly checks components but for Nov it's not picky. Only thing to do is be aware.; - [x] Note that upstream master has Jonathon's erfc nuclear fix, so a time is coming soon when your May 2023 L2 branches will have to be retired. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3047:1664,Test,Tests,1664,https://psicode.org,https://github.com/psi4/psi4/pull/3047,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] If you call `psi4.set_output_file()` (note that this is the usual fancy one, not the low-level `psi4.core.set_output_file()`), that file will have a psi4 header so suitable for cclib parsing. closes #2893; - [x] Sometimes you don't want psi4 managing the logging. Added a `inherit_loglevel` to exe and set_output_file so that psi4 doesn't tamper with loglevel. @bennybp request. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] we always had `set_output_file` and `print_header` separate, but I'm guessing that that was originally b/c former in C++ and latter in Py. Now that we have the former in python to set up logging, too, it's reasonable to combine them, I think. Note that in exe, we do need to set up threads & mem first so that header stats are as correct as possible.; - [x] I set it up so that the header prints whenever a new file is opened. seemed reasonable. had to rewire core.cc calls to take notice of ""stdout"". Any problem with that?; - [x] `-o stdout` now gets a logging file `stdout.log` bug? feature?; - [x] a plain `import psi4; psi4.energy()` is still going to print to screen w/o header. `import psi4; set_output_file(""asdf""); psi4.energy()` newly has a header. DDD calcs still have repetitive header, but it's no worse that before. ## Questions; - [x] @AlexHeide, does removing those two `root` lines in `psi4.__init__.py` mess up your optking logging?. ## Checklist; - [ ] ~Tests added for any new features~; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2932:508,log,logging,508,https://psicode.org,https://github.com/psi4/psi4/pull/2932,2,['log'],"['logging', 'loglevel']"
Testability,## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Libxc 5.2.3 (latest in the 5 series) has had full tests run; - [x] fix qcng to 0.25.0 for the sake of fsaptd-terms before #2791 fixes it again. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2815:303,test,tests,303,https://psicode.org,https://github.com/psi4/psi4/pull/2815,1,['test'],['tests']
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Of the three exchange calculations for non-decomposed FISAPT, skip the DCBS. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3133:381,Test,Tests,381,https://psicode.org,https://github.com/psi4/psi4/pull/3133,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] PCMSolver now works with Windows. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] This note in Py docs was why pcmsolver through psiapi wasn't working on Windows https://docs.python.org/3/library/tempfile.html#tempfile.NamedTemporaryFile . ## Checklist; - [ ] ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2972:706,Test,Tests,706,https://psicode.org,https://github.com/psi4/psi4/pull/2972,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] While not recommended to use a `/` character in your molecule labels, if you do, at least now it won't segfault if density fitting is involved. Thanks to @bennybp for the bug report. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Error can be triggered with below. Shows up in `DFHelper::put_tensor()`. ```; import psi4. mymol = psi4.Molecule.from_arrays(geom=[0, 0, 0, 2, 0, 0], elem=[""h"", ""h""], name=""h2/mol""). # segfaults if any DF (that is, following line commented). runs if DF suppressed (following line active); #psi4.set_options({""scf_type"": ""pk"", ""df_basis_guess"": ""false""}). ene = psi4.energy(""b3lyp/cc-pvtz"", molecule=mymol); print(ene); ```. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2984:1120,Test,Tests,1120,https://psicode.org,https://github.com/psi4/psi4/pull/2984,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] `basis_relativistic <name> {...}` now works; - [x] Python 3.11 basically tested. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Windows CI allowed to access new qcel bump 0.25.1 that has broader pint compatibility; - [x] closes #2754 and fixes dft-pruning test. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2764:326,test,tested,326,https://psicode.org,https://github.com/psi4/psi4/pull/2764,2,['test'],"['test', 'tested']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] fix for BrianQC in #3185 as suggested by @wszs. ## CI Fixes; - [x] mac eco: with cmake v3.30.0, FindPython got seemingly unrelated updates, and now it `Could NOT find Python (missing: Python_NumPy_INCLUDE_DIRS NumPy)` as tested with longstanding np v1. I suspect an interaction with pb11 (hasn't greenlit 3.30 yet). so codedeps is restraining cmake to <=3.29; - [x] win eco, Part 1: so after the GHA win image issue (`Unexpected compiler version, expected Clang`) got fixed, we started seeing `error: capturing a structured binding is not yet supported in OpenMP`. That seems to be https://github.com/llvm/llvm-project/pull/80216 where a syntax warning in clang v18 collides with a MSVC header that L2 includes. That warning was shifted in clang v19 to only fire within OMP loops rather than generically, but v19 isn't released and the fix hasn't ported back to v18, so the only sol'n is to use v17, which we're now requesting from conda. Note that the Azure Win is asking for v17 directly from Chocolatey, so that's why it was ok.; - [x] win eco, Part 2: so we have clang v17 from conda and can get past libmints, then we hit `error: use of undeclared identifier 'omp_set_max_active_levels'` in sapt.cc . This is the only use of this in the code, and the error probably has to do with limited omp support by windows. Fortunately, it seems that passing the path to the `intel-openmp`-provided `omp.h` which is in the weird dir `${PREFIX}\opt\compiler\include` rather than letting it find the clang-provided omp.h did the trick. Moreover, at long last the `intel-openmp` package provides the libiomp5md.lib (import library) and libiomp5md.dll (runtime library) _pair_ needed at buildtime rather than just the latter. So we no longer need to link aga",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3186:474,test,tested,474,https://psicode.org,https://github.com/psi4/psi4/pull/3186,1,['test'],['tested']
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] gets rid of old `conda-forge/label/libint_dev` that were littered around the CI files. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] In order to upload the big AM L2 v281, I had to delete some libint pkgs that were used in CI, so this fixes CI; - [x] Update the L2 src tarballs; - [x] Prep for some extra functions that L2 will someday provide; - [x] Do proper float testing on a file; - [x] build einsums (still optional) on linux azure. this needs min gcc10. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3107:814,test,testing,814,https://psicode.org,https://github.com/psi4/psi4/pull/3107,4,"['Test', 'test']","['Tests', 'testing', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is detined for the release notes. May be empty. -->; - [ ] RN 1; - [ ] RN 2. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2746:587,Test,Tests,587,https://psicode.org,https://github.com/psi4/psi4/pull/2746,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. #### Review guide; below are the key files for review; * proc.py; * sapt-compare/input.dat; * sapt.rst. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] update various build docs, especially for Libint2 and libecpint; - [x] a coalition including @konpat and @CDSherrill agree that it's better to update the default for elst terms for sapt0 in Ed's code for (1) physics and (2) match the other two sapt codes. this implements that decision. hopefully the docs additions are clear. glad of suggestions. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2582:659,Test,Tests,659,https://psicode.org,https://github.com/psi4/psi4/pull/2582,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. (To review, turn on ""hide whitespace"" at the little gear to see that task_base changes are just deleted alternate logic.). ## User API & Changelog headlines; - [x] Since v1.7, Psi4 has supported legacy v0.15.8 qcfractal (latest release until Sep 2023) and the incipient ""next"" branch. ""next"" was released in Sep 2023 as v0.50, so for v1.9 we support only ""next"" (currently v0.52) and drop legacy support. ## Dev notes & details; - [x] Cancel all the v0.51 + tweaks we were using to keep snowflakes running and pull the new qcfractal v0.52; - [x] Cease supporting legacy (pre-next) v0.15.8 qcfractal in anticipation of the v1.9 release. Now the Mac eco GHA will be testing ""next"", not ""legacy"", so we're not restricted to old python.; - [x] Addresses the CMake version problem pointed out in closes #3089 ; - [x] T~he urllib3 thing I think might help the Win nightly build uploads~. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3090:194,log,logic,194,https://psicode.org,https://github.com/psi4/psi4/pull/3090,5,"['Test', 'log', 'test']","['Tests', 'logic', 'testing', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. @lothian, the primary files to look at are procedures/proc.py, cc.rst, preview_capabilities_ccenergy.rst, and (for example) cc13b/input.dat. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Conventional ccsd(t) gradients will now proceed as finite-difference calculations, which are much more memory efficient. If you still want to access the analytic gradients, add `set qc_module ccenergy`. ## Dev notes & details; - [x] the main change is disabling default conv rhf/uhf ccsd(t) analytic gradients through ccenergy in proc.py . they're still accessible by setting `qc_module=ccenergy` explicitly; - [x] changes to tests so that we're still testing the gradients; - [x] changes to the capabilities auto-documentation that starts with stdsuite, gets stored in samples/stdsuite_psi4.txt, and gets processed into docs tables, a viz preview of which are stored in sphinxman/source/.; - [x] simpler docs-building environment!. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). closes #2913 . ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2943:820,test,tests,820,https://psicode.org,https://github.com/psi4/psi4/pull/2943,5,"['Test', 'test']","['Tests', 'testing', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. Collect SAPT changes in the progress of SAPT consolidation. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] avoid stumbling into memdf with disk algorithem. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3131:679,Test,Tests,679,https://psicode.org,https://github.com/psi4/psi4/pull/3131,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. FISAPT itself untested, so logic for disp term may need adjustment. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] RN 1; - [ ] RN 2. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3171:107,log,logic,107,https://psicode.org,https://github.com/psi4/psi4/pull/3171,4,"['Test', 'log', 'test']","['Tests', 'logic', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. Refactor `electric_field()` to return ElectricFieldInt rather than OneBodyAOInt. Fixes #2793 . ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] ElectricFieldInt returned now by `IntegralFactory.electric_field()`; - [x] Equivalent changes in `libmintshelper` made to stop immediate `static cast`. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] ElectricFieldInt returned now by `IntegralFactory.electric_field()`; - [x] Equivalent changes in `libmintshelper`. ## Checklist; - [X] Tests added for any new features; - [X] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [X] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2795:875,Test,Tests,875,https://psicode.org,https://github.com/psi4/psi4/pull/2795,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. The purpose of this PR is the following:; - Fix #2871 . The bug observed when optimizing a molecule containing `Cl` atom using `geometric` via Psi4. . ## User API & Changelog headlines. - [x] Fixing compatibility with geometric 1.0. ## Dev notes & details. - [x] The atom list in Psi4 is upper-cased while geometric expects a capitalized one. This is not a problem for atom symbols containing a single letter like `H`, `C` etc. but becomes a problem for `Cl`, `Br` etc. ## Questions; - [x] Are there any tests of the Psi4/geometric interface?. ## Checklist; - [x] Tests added for any new features -> not a new feature; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2872:584,test,tests,584,https://psicode.org,https://github.com/psi4/psi4/pull/2872,4,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. This is No. 3 of the DDD series, #1351. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] hopefully gets Win conda pkg building again with right pytest; - [x] a few easy formatting improvements, typos from DDD PR. ## Checklist; - [ ] ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests) full suite passes. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2518:372,Test,Tests,372,https://psicode.org,https://github.com/psi4/psi4/pull/2518,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. This is a snapshot in which all n-body tests pass using QCManyBody locally. There's lots of code to be erased and reworked yet. And qcmb isn't installed in CI, so tests aren't expected to pass. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Internal code has been replaced by an external Python module, QCManyBody; - [x] Several n-body efficiency improvements and a new option `supersystem_ie_only` that computes the IE rather than MBE, useful for trimers and larger.; - [x] bug fix for gradient or Hessian vmfc for max_nbody >=3. ## Dev notes & details; * Unrelated; - [x] updated basis_set_exchange to v0.10 and probably fixed the internal build; - [x] switched internal build of optking to a tag that can work with py312; - [x] qcvar `GEOMETRY ITERATIONS` wasn't actually getting set. `OPTIMIZATION ITERATIONS` is actually listed in the docs glossary, so switched to that and set it.; - [x] added `resp` to the codedeps now that it's on c-f, and thus to the ecosystem testing; - [x] fixed previously excused docs links to qcfractal; - [x] added back dftd4 to ecosystem for py312; * QCManyBody: build; - [x] Adds a new pure-python required dependency, `qcmanybody`, available from c-f or pypi; * QCManyBody: BSSE efficiency improvements/bug fixes; - [x] `bsse_type=cp` + `return_total_data=True` (not default for energy) will now no longer do every species in both supersystem (for cp) and natural (for uncp) basis sets. It will do everything in the supersystem basis (since cp requested) and only monomers in the monomer basis (for rtd=T).; - [x] `driver=g/h` + `return_total_data=False`, an unlikely combination, won't just fail with syntax error; - [x] `bsse_type=vmfc` + `driver=g/h + `max_nbody`>2 are now computed correctly. Previously (at least since v1.6), only the two highest-body te",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3160:119,test,tests,119,https://psicode.org,https://github.com/psi4/psi4/pull/3160,2,['test'],['tests']
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. closes #2867 . ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] functionals created by dict (like TPSS or custom) weren't hitting XC_build where the libxc citation was being set. Fixed by setting the citation from a static fn on LibXCFunctional. ## Checklist; - [ ] ~Tests added for any new features~; - [ ] ~[All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests)~. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2877:705,Test,Tests,705,https://psicode.org,https://github.com/psi4/psi4/pull/2877,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. closes #3040. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] RN 1; - [ ] RN 2. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] print_variables prints array variables. (first and last element); - [x] Used this to test scf guesses in pytest.; - [x] Store new qc variable ""SCF TOTAL ENERGIES"" that is a list of all the SCF iteration energies. ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3052:610,test,test,610,https://psicode.org,https://github.com/psi4/psi4/pull/3052,4,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,## Description; <!-- Provide a brief description of the PR's purpose here. -->; - fix [E101](https://github.com/PyCQA/pycodestyle/blob/2.8.0/docs/intro.rst#error-codes); - fix [E502](https://github.com/PyCQA/pycodestyle/blob/2.8.0/docs/intro.rst#error-codes); - fix [E703](https://github.com/PyCQA/pycodestyle/blob/2.8.0/docs/intro.rst#error-codes); - fix [E711](https://github.com/PyCQA/pycodestyle/blob/2.8.0/docs/intro.rst#error-codes); - fix [E712](https://github.com/PyCQA/pycodestyle/blob/2.8.0/docs/intro.rst#error-codes); - fix [E713](https://github.com/PyCQA/pycodestyle/blob/2.8.0/docs/intro.rst#error-codes); - fix [E722](https://github.com/PyCQA/pycodestyle/blob/2.8.0/docs/intro.rst#error-codes); - fix [W605](https://github.com/PyCQA/pycodestyle/blob/2.8.0/docs/intro.rst#error-codes). ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->. ## Questions. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2428:935,Test,Tests,935,https://psicode.org,https://github.com/psi4/psi4/pull/2428,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; @carolinesargent identified a bug where running FSAPT with an external potential w/o having frozen the orientation with no_com + no_reorient would run but give the wrong answer. :-(. External potentials has long been one of those cases where we required the user to freeze the orientation at molecule creation time so that the potential could be set in the same frame. This couldn't be fixed driver-side because as soon as the `core.Mol` builds w/o freeze directives, it loses the original Cartesian coordinates. (The clone, set_nocom, set_noreorient calls in the driver allow _regular_ sapt to forego user setting by preventing the dimer, monoA, monoB from having different frames.). Happily, in the intervening period, @maxscheurer ran into exactly this problem for polarizable embedding potentials and solved it by tacking a copy of the original Cartesians onto the molecule. So we're applying this to FSAPT also. . I've been getting some segfaults that I think are a quirk of my directory, hence the cc31 testing. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Fixes bug where FSAPT with an external potential and without no_com/no_reorient set would return wrong answer. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Let's use this route to accommodate aux info in the frame of the Cartesianmol. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2934:1089,test,testing,1089,https://psicode.org,https://github.com/psi4/psi4/pull/2934,4,"['Test', 'test']","['Tests', 'testing', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; A lot of error exits in `libdpd` are implemented with `exit(1)` or equivalent. This makes debugging harder, and results in less informative error messages when a test fails in the CI environment. This PR modernizes all `exit(1)` error exits in `libdpd` into `throw PSIEXCEPTION`. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Psi4 now prints more detailed error messages if an error happens in its DPD module. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] All `exit(1)` and `exit(PSI_RETURN_FAILURE)` calls in `libdpd` have been replaced with a `throw PSIEXCEPTION`. ## Checklist; - [x] No new features; - [x] CI tests are failing only due to libint being in flux. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3117:242,test,test,242,https://psicode.org,https://github.com/psi4/psi4/pull/3117,2,['test'],"['test', 'tests']"
Testability,## Description; <!-- Provide a brief description of the PR's purpose here. -->; A one-line change to enable an SCF calculation with an arbitrary one-electron matrix `X` added to the Fock matrix via `wfn.push_back_external_potential(X)`. Fixes #3227. ## Questions; - [x] Is this the right way to accomplish this goal (computing SCF with an extra 1-electron operator added to the Fock matrix)?; - [x] Does this mess up PCM/DDX/PE in any way? (It shouldn't). ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3228:476,Test,Tests,476,https://psicode.org,https://github.com/psi4/psi4/pull/3228,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; A preliminary implementation of new functionalities in intramolecular SAPT proposed by Du Luu and Konrad Patkowski in [https://doi.org/10.1021/acs.jpca.2c06465](https://doi.org/10.1021/acs.jpca.2c06465). The code is coauthored by @dluu12. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - The new available options for `FISAPT_LINK_ASSIGNMENT` are `SAO0, SAO1, SAO2, SIAO0, SIAO1, SIAO2`. The `SIAO1` variant is the recommended one that solves some serious issues of the default `FISAPT_LINK_ASSIGNMENT=C` variant and, after some more testing, will hopefully take over as the production ISAPT scheme.; - A couple minor options for the new variant (orthogonalization of link orbitals, making cube files) have been added and documented in the manual.; - After quite a bit of effort, FISAPT (that is, the F-SAPT partitioning of ISAPT) seems to be working fine.; - A suitable fragment in the manual and two tests (isapt-siao1 and fisapt-siao1) have been added. ## Questions; - The code does what it is supposed to, but certainly needs extensive general cleanup.; - Not tested with external potentials.; - Presently, there are two functions that produce different cube files: `FISAPT::raw_plot()` and `FISAPT::do_cubes()`. They have different capabilities but should probably be merged into one. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2899:801,test,testing,801,https://psicode.org,https://github.com/psi4/psi4/pull/2899,6,"['Test', 'test']","['Tests', 'tested', 'testing', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; A quick cleanup removing `new` and `delete` in favor of `std::vector` in SOBasis. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] RN 1; - [ ] RN 2. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3024:670,Test,Tests,670,https://psicode.org,https://github.com/psi4/psi4/pull/3024,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; A small addition needed for an F12 code to work Python-side. Adds the ability to call; ```; ao_f12g12(exp_coeff, Basis1, Basis2, Basis3, Basis4); ao_double_commutator(exp_coeff, Basis1, Basis2, Basis3, Basis4); ```; with an arbitrary combination of 4 bases (some combinations require `SCREENING == 'NONE'` - see #2973). The other kinds of F12 integrals, e.g. `ao_f12()`, already have this functionality and just the two above types were missing. ## Dev notes & details; This minor PR should be completely orthogonal to the recent PRs from @EricaCMitchell. All of these PRs will be needed for the upcoming F12 codes. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run] `ctest -L quick` passes with no errors. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2987:716,Test,Tests,716,https://psicode.org,https://github.com/psi4/psi4/pull/2987,2,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Added SAPT0-D4 and SAPT0-D4M methods and parameters along with a test. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] RN 1; - [ ] RN 2. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3172:145,test,test,145,https://psicode.org,https://github.com/psi4/psi4/pull/3172,4,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Added an example for an ISAPT calculation (with the new SIAO1 variant) for a charged molecule, probing a cation-pi interaction between a benzene ring and a protonated amine group, connected to each other by a (CH<sub>2</sub>)<sub>3</sub> aliphatic linker. The example was inspired by @loriab's question whether new (or old) ISAPT works for charged molecules. It shows that yeah, it does work, and no special issues were encountered. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2950:533,Test,Tests,533,https://psicode.org,https://github.com/psi4/psi4/pull/2950,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Addressing Issue #2226, changing the gemm() method in Matrix.cc. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is detined for the release notes. May be empty. -->; - [x] None. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Calculates row and column totals from rowspi_ and colspi_; - [x] Throws a Psi exception error if the dimensions don't match up. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2729:711,Test,Tests,711,https://psicode.org,https://github.com/psi4/psi4/pull/2729,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Adds SAPT0-D and FISAPT-D routines, continuation of #1786. This code only works with the latest QCEngine commit, so it will fail the tests until the next QCEngine release. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [X] Add SAPT0-D and FISAPT0-D, for any -D variant available to HF; - [X] Enable access to pairwise dispersion decomposition from dftd3; - [x] Adapt fsapt.py analysis to use -D dispersion info. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests); - [x] Test fsaptdiff.py. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2081:213,test,tests,213,https://psicode.org,https://github.com/psi4/psi4/pull/2081,5,"['Test', 'test']","['Test', 'Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Adds a missing doi in a source tree README file, also standardizes the use of doi syntax (it is doi:foo not DOI foo). ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2509:382,Test,Tests,382,https://psicode.org,https://github.com/psi4/psi4/pull/2509,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Adds optking keywords missed in #3204. For users, if these options are needed with an older version of Psi4, they can be passed through `psi4.optimize(..., 'optimizer_keywords'=)` to optking. Features require `optking >= 0.3.0`. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Adds shortcut for freezing all dihedrals in a molecule `freeze_all_dihedrals` and `unfreeze_dihedrals` . ## Checklist; - [x] Ran -L opt subset; - [x] keywords checked explicitly in optking's tests . ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3209:673,test,tests,673,https://psicode.org,https://github.com/psi4/psi4/pull/3209,1,['test'],['tests']
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Adds shorthand for SPW92 functional. Also removes a spurious citation from SVWN. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] RN 1; - [ ] RN 2. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Calculations can be launched with SPW92. ## Questions; - [x] Can someone add in the test reference energies? I don't have a running version of Psi4... ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2784:676,test,test,676,https://psicode.org,https://github.com/psi4/psi4/pull/2784,4,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; After seeing some GCC warnings related to sprintf usage I decided to modernize SAPTDIIS label generation with the use of `std::string` and a new utility function to retain the output format of `%2d`. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] No user-visible changes. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] New function: `to_str_width`: converts any type supported by `std::to_string` to an `std::string`, and prepends as many spaces as required to meet the specified minimum width.; - [x] `SAPTDIIS::get_vec_label` and `SAPTDIIS::get_err_label` are modernized to return an `std::string`, instead of a `char*` that the caller needs to deallocate.; - [x] Functions using these two functions have been adapted to the changes. ## Checklist; - [x] No new features; - [x] Tests run by the CI are passing. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2804:1178,Test,Tests,1178,https://psicode.org,https://github.com/psi4/psi4/pull/2804,1,['Test'],['Tests']
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; After the removal of `sem_test` in #2776, the only remaining internal user of `libqt/schmidt_add.cc` is `libqt/david.cc`. That too is destined for removal, if its only user in `dfocc` is removed by #2684. So it looks like `schmidt_add` could be removed in the future, when all of its callers are gone. To keep the promise of not randomly breaking API without fair warning, this PR deprecates the function, setting up its eventual removal. Note that this `schmidt_add` is not the same function as the `schmidt_add` in `cceom` or `detci`, even though the name is the same. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] `PSI_API` function `int schmidt_add(double** A, int rows, int cols, double* v)` is deprecated and 1.7 will be the last release with it present. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Deprecation message is added to `schmidt_add` in `libqt`. ## Questions; - [ ] This function was tagged as `PSI_API` in #1077 by @raimis, do we know why it was necessary back then?. ## Checklist; - [x] No new features; - [x] CI tests are passing. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2822:1435,test,tests,1435,https://psicode.org,https://github.com/psi4/psi4/pull/2822,1,['test'],['tests']
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Apparently `errno` is not defined on FreeBSD by default, so we have to explicitly include `<cerrno>` in files that use it. This PR adds that include.; Fixes and closes #2810. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] None? The offending code has not made it to any release yet. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] `#include <cerrno>` is added to the few PSIO files that use `errno`. ## Checklist; - [x] No new features; - [x] CI tests are passsing. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2811:844,test,tests,844,https://psicode.org,https://github.com/psi4/psi4/pull/2811,1,['test'],['tests']
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Around the time when the Boost dependency was being removed, some `PRAGMA_WARNING` manipulations were inserted, presumably to reduce warning noise during builds.; The Boost includes have since been removed and these are no longer necessary. `#include <memory>` thankfully does not require such guarding. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] No user visible changes. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Stop unnecessarily guarding `#include <memory>` with `PRAGMA_WARNING_IGNORE_DEPRECATED_DECLARATIONS` . ## Checklist; - [x] No new features; - [ ] CI tests are passing. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3088:971,test,tests,971,https://psicode.org,https://github.com/psi4/psi4/pull/3088,1,['test'],['tests']
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; As a result of implementing new ISAPT variants, a printout of dipole moments before/after link reassignment was added. This printout does not make any sense for the original `FISAPT_LINK_ASSIGNMENT == C` variant (there was no link reassignment so what do before and after even mean?). This PR removes this spurious printout for old link reassignment schemes `FISAPT_LINK_ASSIGNMENT == C` and `FISAPT_LINK_ASSIGNMENT == AB`. . ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2956:526,Test,Tests,526,https://psicode.org,https://github.com/psi4/psi4/pull/2956,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; As discussed in #2997 and #3117, no debugging information is produced in many places in Psi4. I believe this is because of improper calls to `exit()`, which is a remnant of the C history of Psi. #3117 replaces the calls to `exit()` with `throw`s in libdpd. This PR replaces the calls in the rest of Psi4. Sorry for the verbose changes; I ran clang-format on the files since my editor's indentation doesn't match that in Psi4. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Obsoleted calls to `exit()` have been replaced by exceptions, which should better guarantee the passing of error messages to the end user. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Spurious calls to `exit()` have been removed in favor of exceptions, which should better guarantee error messages getting through to the user. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3118:1252,Test,Tests,1252,https://psicode.org,https://github.com/psi4/psi4/pull/3118,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; As it says in the title, see #2942 and #2938. Closes #2942. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] `adcc` version `0.15.16` at least required due to bugfixes in `adcc`. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Check `adcc` min version at runtime. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). closes #2938 closes #2942. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2944:711,Test,Tests,711,https://psicode.org,https://github.com/psi4/psi4/pull/2944,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; <!-- Provide a brief description of the PR's purpose here. -->; Basic can-get-it-in-psi for Rob Shaw's https://github.com/robashaw/libecpint . ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2368:343,Test,Tests,343,https://psicode.org,https://github.com/psi4/psi4/pull/2368,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Both `normalize` and `schmidt_add` are now unused. `schmidt_add` is `PSI_API`, but it has been given a deprecation period of one release. The files will be submitted to the attic after this is merged. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Deprecated `PSI_API` function `schmidt_add(double** A, int rows, int cols, double* v)` has been removed. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Unused `normalize` function and file are removed; - [x] Deprecated `PSI_API` function `schmidt_add` and file are removed. ## Checklist; - [x] No new features; - [x] CI tests are passing. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2927:967,test,tests,967,https://psicode.org,https://github.com/psi4/psi4/pull/2927,1,['test'],['tests']
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Cleanup to libmints/petitelist to remove manual memory management in favor of `std::vector`. Some of the code was not really clear (use of both `len` and `length` in some of the SO objects). ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] RN 1; - [ ] RN 2. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3026:779,Test,Tests,779,https://psicode.org,https://github.com/psi4/psi4/pull/3026,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; <!-- Provide a brief description of the PR's purpose here. -->; Closes #2321: removes spurious unused basis. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2373:309,Test,Tests,309,https://psicode.org,https://github.com/psi4/psi4/pull/2373,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Closes #2799 : prints out the name of the file that failed to open. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] RN 1; - [ ] RN 2. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2801:656,Test,Tests,656,https://psicode.org,https://github.com/psi4/psi4/pull/2801,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Closes #3115. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] The default definition for a molecule has been removed. Prior to this release, if a `molecule` had not been defined, Psi4 would run on a hydrogen molecule with bond length 0.74 Å. This change only affects Psithon input. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3116:804,Test,Tests,804,https://psicode.org,https://github.com/psi4/psi4/pull/3116,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Definitions of various IO system call macros are currently replicated and/or scattered across files. These macros were added to paper over differences between Windows and Linux/Mac.; This PR coalesces all of them into `psio.h`. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is detined for the release notes. May be empty. -->; None. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] `SYSTEM_WRITE`, `SYSTEM_READ`, `SYSTEM_LSEEK`, `SYSTEM_OPEN`, `SYSTEM_CLOSE`, `SYSTEM_UNLINK`, `PSIO_OPEN_OLD_FLAGS`, `PSIO_OPEN_NEW_FLAGS `and `PERMISSION_MODE `are now only defined in `psio.h`, which is already included by pretty much all PSIO-related files anyways.; - [x] Same goes for the Windows specific `io.h` include, and the non-Windows `unistd.h`. ## Checklist; - [x] Tests run by the CI are passing. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2741:1099,Test,Tests,1099,https://psicode.org,https://github.com/psi4/psi4/pull/2741,1,['Test'],['Tests']
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Detci still has a few places where error termination is effected through printf+abort(). This PR replaces the calls to abort() in with `throw PSIEXCEPTION(msg)`. The rest of the codebase has more of this pattern, those are subject to future PRs to keep this one small. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] A few error terminations in the detci module now print a more detailed error information to the console, instead of just the error message in the output file. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Calls to `abort()` in detci are replaced with `throw PSIEXCEPTION(msg)`, where `msg` is the relevant error message taken from the context of the `abort()`. ## Checklist; - [x] No new features; - [x] Tests run by the CI are passing. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3168:1120,Test,Tests,1120,https://psicode.org,https://github.com/psi4/psi4/pull/3168,1,['Test'],['Tests']
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Fix for the bug described in [issue #1968](https://github.com/psi4/psi4/issues/1968) about incorrectly loading ECPs for ghosted atoms. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Calculations using ghosted atoms that contain ECPs in the basis set can now be executed properly. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] When loading basis functions we check if we should skip loading ECPs (`skip_ghost_ecps`) and if `true` then we check if an atom is a ghost (`mol->Z(atom) == 0.0`). If yes we do not load ECPs fot it.; - [x] Added optional boolean argument `skip_ghost_ecps` for `construct_basisset_from_pydict` function. The default is `true`, we set it `false` for atomic calculations (like SAD guess). ## Questions; - [x] Are the check runs failing due to the changes in this PR?. ## Checklist; - [x] Minimal working example; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3167:1276,test,tests,1276,https://psicode.org,https://github.com/psi4/psi4/pull/3167,2,['test'],['tests']
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Fixes a bug encountered when running optimizations in BAKERJCC96. All calculations in a finite difference; calculation were writing orbitals to disk and overwriting the old orbitals. Only reference calculation should; be saved. In cases were the symmetry was lowered in one of the last displacements, subsequent gradient calculations; were failing to read orbitals. ``` ; File ""/home/zander/github/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 1761, in scf_helper; raise ValidationError(""Cannot compute projection of different symmetries.""); ```. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] scf_helper assumes orbitals should always be written. Passes `write_orbitals` = `false` through kwargs for displacements. ## Questions; - [ ] The new test is an optimization, would a test in ddd-function-kwargs or similar be preferred?. ## Checklist; - [x] Tests added for any new features; - [x] full ctest (Psi4, Psi4 + [CheMPS2, DFTD3, dkh, gCP, gdma, simint, ecpint]). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2827:1199,test,test,1199,https://psicode.org,https://github.com/psi4/psi4/pull/2827,3,"['Test', 'test']","['Tests', 'test']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Fixes a bug in `sad.cc`: pseudo-orbitals should be obtained by multiplying the orbital with the square root of their occupation to reproduce the correct density matrix C occ C^T. Closes #3137. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] RN 1; - [ ] RN 2. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3138:781,Test,Tests,781,https://psicode.org,https://github.com/psi4/psi4/pull/3138,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Fixes the buffer overflow error described in #3214 . ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] RN 1; - [ ] RN 2. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3215:641,Test,Tests,641,https://psicode.org,https://github.com/psi4/psi4/pull/3215,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; GT will trial this before it's ready for merging, but it's good to get eyes on it and to not lose track of the changes. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Users of QCFractal `next` can now customize protocols, tags, priorities, and owner_groups. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Allow psi4 to turn all the knobs qcportal allows: https://github.com/MolSSI/QCFractal/blob/next/qcportal/qcportal/client.py#L903-L915. ## Questions; - [x] @bennybp look ok? Ben has looked this over and approved. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3013:936,Test,Tests,936,https://psicode.org,https://github.com/psi4/psi4/pull/3013,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; GWH is not a guess, but a way to approximate the Hamiltonian for interacting systems. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2406:350,Test,Tests,350,https://psicode.org,https://github.com/psi4/psi4/pull/2406,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; I have added an option to compute the necessary GRAC shifts for SAPT(DFT) automatically. I added a little extra logic to ""try harder"" at converging cations to hopefully fail less often if this option is specified. These changes will enable more users to call SAPT(DFT) more routinely in their workflows without having to consider acquiring GRAC shifts externally through their own logic or tabulated sources. . ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] RN 1; - [ ] RN 2. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [ ] Automatically computes SAPT(DFT) GRAC shifts for monomer A and/or B; - [ ] Logic for trying extra options with level shifts to attempt to converge more cations in approximating the ionization potential. ## Questions; - [ ] Perhaps I should add a more challenging pytest in which the first cation SCF convergence attempt fails but the iterative options approach succeeds. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3232:192,log,logic,192,https://psicode.org,https://github.com/psi4/psi4/pull/3232,6,"['Log', 'Test', 'log', 'test']","['Logic', 'Tests', 'logic', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; I think whoever brought up the new ""warnings"" in the sphinx log was on the right track. We do have the treat-warnings-as-errors flag on. It's the treat-broken-links-as-errors flag that we can't enable yet. Between that and the 9800 PR in the newest sphinx changelog released 17 Jan https://www.sphinx-doc.org/en/master/changes.html#release-4-4-0-released-jan-17-2022, I bet that's what's causing our docsbuild fail. Hopefully I haven't added any new syntax errors. - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2422:140,log,log,140,https://psicode.org,https://github.com/psi4/psi4/pull/2422,1,['log'],['log']
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; I was looking through the source code to understand what the `DFT_REMOVE_DISTANT_POINTS` keyword does, and realized I could not understand what the `remove_distant_points` function was doing. I also suspect that that code was partly wrong. This PR cleans up that function so that it now does what it should. However, it is also evident that the logic of this function is not optimal. Instead of checking if any nucleus is within the maximal spatial extent of the basis set, one should check if any nucleus is within the extent of that nucleus' basis functions. This is just a drive-by commit, as I don't think it's worthwhile to spend time on Psi4's quadrature code, since [IntegratorXX](https://github.com/wavefunction91/IntegratorXX/) and [GauXC](https://github.com/wavefunction91/GauXC) offer a reusable solution that could be used also in Psi4 with significant negative LOCs. . ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] RN 1; - [ ] RN 2. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3012:425,log,logic,425,https://psicode.org,https://github.com/psi4/psi4/pull/3012,4,"['Test', 'log', 'test']","['Tests', 'logic', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Implements OpenOrbitalOptimizer support in Psi4. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] (Optional) If OpenOrbitalOptimizer support is enabled at compile-time, an improved atomic Hartree-Fock solver is used in the SAD, SADMO, and HUCKEL guesses. In contrast to the legacy solver in Psi4, the OpenOrbitalOptimizer atomic self-consistent field is fully symmetry aware, which is especially important for e.g. transition metal atoms. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3136:960,Test,Tests,960,https://psicode.org,https://github.com/psi4/psi4/pull/3136,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Improvements discussed in a comment to #3043. The 64-character limit may not be valid on all architectures; this PR should avoid having to revisit the patch. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] RN 1; - [ ] RN 2. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3044:746,Test,Tests,746,https://psicode.org,https://github.com/psi4/psi4/pull/3044,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; In, SAPT(DFT), I removed setting ""DF_INTS_IO"" to ""SAVE"" because it blocked scf_type==""DF"" from accessing MemDF on its own. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] RN 1; - [ ] RN 2. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3173:711,Test,Tests,711,https://psicode.org,https://github.com/psi4/psi4/pull/3173,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; <!-- Provide a brief description of the PR's purpose here. -->; Includes all the STO-nG basis sets from the Basis Set Exchange. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2230:328,Test,Tests,328,https://psicode.org,https://github.com/psi4/psi4/pull/2230,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; It is done. The beast lays slain.; This PR replaces the last calls of the `sq_rsp` function in the `dfoccwave::Tensor2d::diagonalize` overloads with the new DSYEV wrappers, and removes the function and its file. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Deprecated `PSI_API` function `void sq_rsp(int nm, int n, double **array, double *evals, int matz, double **evecs, double toler)` has been removed. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Merge `dfoccwave::Tensor2d::diagonalize` overloads to minimize code dupliaction; - [x] Add machine-readable docstrings in the header file; - [x] `dfoccwave::Tensor2d::diagonalize` overloads now throw on non-square matrices or diagonalizer failure; - [x] Replace calls of `sq_rsp` with `DSYEV_ascending` and `DSYEV_descending`; - [x] Delete `sq_rsp` function and file. ## Checklist; - [x] No new features; - [x] CI tests are passing. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2928:1267,test,tests,1267,https://psicode.org,https://github.com/psi4/psi4/pull/2928,1,['test'],['tests']
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; It looks like `libmints/svd.cc` is unused. Psi4 appears to build just fine without it. It contains what looks like ancient LAPACK code that was auto-translated with f2c. This PR deletes the file. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] None. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Unused file `libmints/svd.cc` is deleted. ## Checklist; - [x] No new features; - [x] Tests run by the CI are passing. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3169:780,Test,Tests,780,https://psicode.org,https://github.com/psi4/psi4/pull/3169,1,['Test'],['Tests']
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Just comments a cryptic line in xhost.cmake. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] RN 1; - [ ] RN 2. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2983:633,Test,Tests,633,https://psicode.org,https://github.com/psi4/psi4/pull/2983,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Looks like I didn't push the updated reference output for the MODHUCKEL guess... ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] RN 1; - [ ] RN 2. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3011:669,Test,Tests,669,https://psicode.org,https://github.com/psi4/psi4/pull/3011,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; <!-- Provide a brief description of the PR's purpose here. -->; Looks like there is a small error in the VMFC Hessian. The `sign` variable is changed for VMFC but it is not used to multiply the Hessian. Compare this with the gradient above and the energy in line 661. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2389:468,Test,Tests,468,https://psicode.org,https://github.com/psi4/psi4/pull/2389,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; <!-- Provide a brief description of the PR's purpose here. -->; Looks like there was a mistake in the added note on damping in #2225 that wasn't caught by the CI; this PR rectifies the referenced keyword. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2237:405,Test,Tests,405,https://psicode.org,https://github.com/psi4/psi4/pull/2237,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; <!-- Provide a brief description of the PR's purpose here. -->; Minor cleanups to `find_occupation` as well as the introduction of sanity checks for #2476 to prevent sudden changes of the spin state during the calculation. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2488:423,Test,Tests,423,https://psicode.org,https://github.com/psi4/psi4/pull/2488,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Much like PR #2804, this PR is mostly about eliminating `sprintf`-related compiler warnings and modernizing C-style string handling to C++, this time in libmints' `BasisSet::print_detail_cfour`. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Modernized `BasisSet::print_detail_cfour()`, highlights:; - [x] No longer uses `sprintf` and a fixed-size char array; - [x] Variables are made `const` wherever reasonable; - [x] Use of `std::find` on doubles is replaced by new functions (`none_of_equal` and `fpeq`) that implement a fuzzy compare with a default tolerance of 1E-14. Probably no behaviour change in practice (unless someone has basis fns which differ in exponent by >0 but <1E-14), but it is usually not recommended to use == on FP types, which is what `std::find` does.; - [x] The `slater.chemie.uni-mainz.de` URL has succumbed to link rot. Replaced with one that points to the latest version that is being preserved by the Internet Archive, both in the C++ and Python implementations.; - [x] Ran clang-format on `basisset.cc` and `basisset.h`. ## Questions; - [x] The new functions `none_of_equal` and `fpeq` are just living in `basisset.cc` and `basisset.h` right now. Would some other file be a better place to put them?. ## Checklist; - [x] No new features; - [x] Tests run by the CI are passing; - [x] I do not have CFOUR, so I cannot really test if this breaks something. It should not, but the `std::find` change _is_ behaviour-altering, albeit only in a corner case. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2937:1549,Test,Tests,1549,https://psicode.org,https://github.com/psi4/psi4/pull/2937,2,"['Test', 'test']","['Tests', 'test']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; My main goal is to provide an option for users to run FSAPT directly through the psiapi and not to have to create extra files and post-process the psi4 outputs. This is largely done by adding an fsapt analysis function to `./psi4/driver/driver.py`. I extended `fsapt.py` by moving its history to `psi4/driver/procrouting/sapt/fsapt.py` to enable users to either run the analysis directly after a `psi4.energy('fisapt0')` calculation through psi variables or through an `AtomicResults` as is demonstrated in `tests/pytests/test_fisapt.py`. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] Addition of `./psi4/driver/driver.py:fsapt_analysis()` to call fsapt analysis through the psi4 module. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [ ] FSAPT is now available directly through psi4 instead of post-processing output files; - [ ] FISAPT results can be stored in `AtomicResults` permitting the storage of results in a QCArchive database. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3222:588,test,tests,588,https://psicode.org,https://github.com/psi4/psi4/pull/3222,4,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; NOTE: this commit was applied to v1.8.1 even though not merge to master until after that release. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] closes #3003 we usually have pytest around, but it shouldn't be absolutely required. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3008:523,Test,Tests,523,https://psicode.org,https://github.com/psi4/psi4/pull/3008,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; On the Fedora build system, `python` is not available which causes tests to fail.; This patch fixes this issue for good. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] RN 1; - [ ] RN 2. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3216:147,test,tests,147,https://psicode.org,https://github.com/psi4/psi4/pull/3216,4,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; PR #2684 has removed the last remaining call site of the `libqt` Davidson solver. This PR removes this unused function and file.; The file will be submitted to the attic after this is merged. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] None, `david` was not `PSI_API`. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Unused `libqt` function `david` and its file are removed.; - [x] Declared-but-never-defined function `print_block` is removed from `qt.h`. ## Checklist; - [x] No new features; - [x] CI tests are passing. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2925:903,test,tests,903,https://psicode.org,https://github.com/psi4/psi4/pull/2925,1,['test'],['tests']
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; PR #2686 has accidentally added some superfluous includes of `libpsi4util/PsiOutStream.h`, and I also missed removing a superfluous printf line. No real harm done, but they can be removed. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Remove some includes added by #2686 ; - [x] Remove a printf added by #2686 . ## Checklist; - [x] No new features; - [ ] CI tests are passing. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2813:799,test,tests,799,https://psicode.org,https://github.com/psi4/psi4/pull/2813,1,['test'],['tests']
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Printf format specifiers are required to match the type of the variable being printed. Using an incorrect format specifier may be UB. This PR resolves instances where the format specifier was incorrect. At least some of these have been triggering GCC warnings, so Psi4 now compiles with a couple fewer warnings. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Likely no user-visible changes. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] `cctransort/memcheck`: Replace 14 instances of `%1lu` being used for printing an `int`, with `%d`. Make argument `const`.; - [x] `detci/olsengraph.cc`: fix one instance of `%3d` being used for printing a `size_t` integer; - [x] `dlpno/mp2.cc`: fix 12 instances of %d being used for `size_t` integers; - [x] `fnocc/lowmemory_triples.cc`: fix `%i` being used to print a `long`; - [x] `libfock/DirectJK.cc`: fix %3d being used for `size_t` integer; - [x] `libfock/solver.cc`: fix %d being used for `size_t` integer; - [x] `libmints/cdsalclist.cc`: fix 5 instances of %d being used for `size_t` integers; - [x] `libmints/extern.cc`: fix 3 instances of %d being used for `size_t` integers. Make argument `const &`. ## Checklist; - [x] No new features; - [x] Tests run by the CI are passing. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2771:1590,Test,Tests,1590,https://psicode.org,https://github.com/psi4/psi4/pull/2771,1,['Test'],['Tests']
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Psi4 has wrappers for seven LAPACK functions which have been marked as deprecated by the LAPACK devs for a long time. These functions have also been marked as deprecated within Psi4. Luckily they are not marked as `PSI_API`, nor are they used by Psi4. This PR removes them. Note that the default git diff algorithm is getting confused by the repetitive text in `lapack_intfc.cc` and incorrectly indicates that some lines were added. The correct diff can be obtained with `--diff-algorithm=minimal` :; ```; $ git diff --stat --diff-algorithm=minimal master remove_deprecated_lapack; psi4/src/export_blas_lapack.cc | 7 -; psi4/src/psi4/libmints/psimath.cc | 50 --; psi4/src/psi4/libmints/psimath.h | 27 -; psi4/src/psi4/libqt/CMakeLists.txt | 19 -; psi4/src/psi4/libqt/lapack_intfc.cc | 1021 -----------------------------; psi4/src/psi4/libqt/lapack_intfc_mangle.h | 35 -; psi4/src/psi4/libqt/qt.h | 25 -; 7 files changed, 1184 deletions(-); ```. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Psi4 now requires the LAPACK library to provide `DGGSVD3` and `DGGSVP3`. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Fortran, C and C++ style wrappers for `DGEGS`, `DGEGV,` `DGELSX,` `DGEQPF,` `DGGSVD,` `DGGSVP` and `DTZRQF` are removed.; - [x] CMake checks for the availability of `DGGSVD3` and `DGGSVP3` are removed. ## Checklist; - [x] No new features; - [x] CI tests are passing. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2823:1759,test,tests,1759,https://psicode.org,https://github.com/psi4/psi4/pull/2823,1,['test'],['tests']
Testability,## Description; <!-- Provide a brief description of the PR's purpose here. -->; Psi4 isn't checking that basis sets are given in a sensible format at the moment. This pull fixes the issue somewhat. Closes #2253 . ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Corrupt basis sets are detected instead of used. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2254:420,Test,Tests,420,https://psicode.org,https://github.com/psi4/psi4/pull/2254,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Refactored code in the WaveFunction class as per #2875. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] No changes to user experience. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [ ] Removed `nmo_` cache variable in favor of `nmopi_.sum()` to keep things in sync; - [ ] Refactored code to reflect removal of variable. ## Questions; - [ ] Best ways to test this change?. ## Checklist; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge. #2875",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2980:748,test,test,748,https://psicode.org,https://github.com/psi4/psi4/pull/2980,3,['test'],"['test', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Remove c++ optking. Add new python optking driver. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is detined for the release notes. May be empty. -->; - [x] RN 1 The fixed_* optimization keywords have been changed to ranged_* options; - [x] RN 2 output will be changed. Check output.dat for simple convergence / step info. output.log for detailed info; - [x] RN 3 IRC convergence behavior different for minima and substep. ; - [x] Downstream plugin users who were still getting wfn from globals will find it has now departed. Please follow the advice it's been issuing for years to do wfn passing. [LAB added]. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] New optimizer. Most of driver is very similar; - [x] Hessian Updating and optimization logic is in optking as much as possible; - [x] Restarting optimizations now supported. Optking can write entire state to disc (json); - [x] Driver attempts to symmetrize geometries; - [x] New keywords added. Some removed / updated. ; - [x] old optking removed from CMakeLists.txt from `/psi4/src/psi4`; - [x] optking py_funcs removed from core.cc; - [x] All tests have been verified for equal or better convergence. (except opt-irc-2); - [x] globals legacy gradient, wfn, and molecule removed [LAB added]. ## Questions; - [ ] A document describing differences between the optimzers may be necessary; - [ ] Unclear if I have fully removed old optking and building with new optking is fully working. ## Checklist; - [x] test15 tests restart; - [x] Can remove old deprecated set_gradient; - [x] ctest -L opt run. ## Status; - [x] Ready for review; - [ ] Ready for merge. For documentation on the new optimizer please see",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2727:476,log,log,476,https://psicode.org,https://github.com/psi4/psi4/pull/2727,1,['log'],['log']
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Running ip_tunning clogs stdout by emitting non-silenced printouts, and red-herring warnings.; `ip_tune` does set charge/multiplicity via `set_molecular_charge` and `set_multiplicity`:; * https://github.com/psi4/psi4/blob/master/psi4/driver/frac.py#L609; * https://github.com/psi4/psi4/blob/master/psi4/driver/frac.py#L610C5-L610C37. so it should be safe to keep them out. An example:; ```log; ...; c: [1.0, 0]; fc: [0.0]; m: [2]; fm: [3]; Following warning is harmless if you've altered chgmult through `set_molecular_change` or `set_multiplicity`. Such alterations are an expert feature. Specifying in the original molecule string is preferred. Nonphysical masses may also trigger the warning. c: [1.0, 0]; fc: [0.0]; m: [2]; fm: [3]; Following warning is harmless if you've altered chgmult through `set_molecular_change` or `set_multiplicity`. Such alterations are an expert feature. Specifying in the original molecule string is preferred. Nonphysical masses may also trigger the warning. c: [1.0, 0]; fc: [0.0]; m: [2]; fm: [3]; Following warning is harmless if you've altered chgmult through `set_molecular_change` or `set_multiplicity`. Such alterations are an expert feature. Specifying in the original molecule string is preferred. Nonphysical masses may also trigger the warning. c: [1.0, 0]; fc: [0.0]; m: [2]; fm: [3]; Following warning is harmless if you've altered chgmult through `set_molecular_change` or `set_multiplicity`. Such alterations are an expert feature. Specifying in the original molecule string is preferred. Nonphysical masses may also trigger the warning.; ...; ```. ```; c: [1.0, 0]; fc: [0.0]; m: [2]; fm: [3]; ```; steems from https://github.com/psi4/psi4/blob/master/psi4/driver/qcdb/molecule.py#L1646. and can be silenced by setting `verbose=-1`,; the other is 4 lines below:. https://github.com/psi4/psi4/blob/master/psi4/driver/qcdb/molecule.py#L1650. This PR, adds `quiet` param to ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3229:469,log,log,469,https://psicode.org,https://github.com/psi4/psi4/pull/3229,1,['log'],['log']
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Simple performance improvement for the DLPNO-MP2 algorithm. For DLPNO-MP2 computations on many-core machines, I see speedups around 20%. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Clone (rather than create from scratch) a `TwoBodyAOInt` for each thread; - [x] More appropriate OMP scheduling. ## Checklist; - [x] DLPNO tests still pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2378:463,test,tests,463,https://psicode.org,https://github.com/psi4/psi4/pull/2378,1,['test'],['tests']
Testability,## Description; <!-- Provide a brief description of the PR's purpose here. -->; Simple print option change to ensure printing of the final result for the nonapproximated E(20)exch-disp energy. Fixes #2317. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2318:226,Test,Tests,226,https://psicode.org,https://github.com/psi4/psi4/pull/2318,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Sometime between https://github.com/psi4/psi4/commit/5b54376e4f358ec1318539d3ac0a2e42ea0483f8 and https://github.com/psi4/psi4/commit/7e4ecf968ec7920ab404cb357de827cf3785a254, the original(?) code for generating broken-symmetry guesses for UHF/UKS was disabled, and parts of it may have been removed since.; These days, the way to get a BS guess seems to be setting `guess_mix true`, which does not use the old BS code fragments in `scf_helper`.; So, as far as I can tell it is dead code. This PR removes it. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] None, option/feature has been defunct/superseded for 6+ years. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Defunct broken-symmetry code is removed from Python function `scf_helper`. ## Checklist; - [x] No new features; - [x] Tests run by the CI are passing. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2774:1183,Test,Tests,1183,https://psicode.org,https://github.com/psi4/psi4/pull/2774,1,['Test'],['Tests']
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; TBA. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] TBA. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3114:580,Test,Tests,580,https://psicode.org,https://github.com/psi4/psi4/pull/3114,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; TODO. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] RN 1. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [ ] Feature1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3101:535,Test,Tests,535,https://psicode.org,https://github.com/psi4/psi4/pull/3101,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; The `-H<path>` option for CMake is technically not part of the CMake public interface, it is not documented and was never meant for public use. Since CMake 3.13 there is a proper alternative, `-S<path>`, so Psi4 should use that and stop suggesting users to use `-H<path>`. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Psi4 no longer suggests users to use the undocumented `-H<path>` CMake option when building from source. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Replace `-H<path>` with `-S<path>` in CMake invokations. ## Questions; - [ ] I have no idea where to make a PR for fixing this in psi4-path-advisor. ## Checklist; - [x] No new features; - [x] CI tests are passing. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2797:1066,test,tests,1066,https://psicode.org,https://github.com/psi4/psi4/pull/2797,1,['test'],['tests']
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; The aim of this pull request is twofold:; - it introduces our hybrid perturbative methods REMP (https://doi.org/10.1063/1.5086168) and OO-REMP (https://doi.org/10.1021/acs.jctc.1c00280) into the OCC and the DFOCC module; - It fixes #2215 by porting the coupled DIIS scheme from the OCC module to the DFOCC module; - Furthermore, a number of potential integer overflows in the DFOCC module are fixed which may lead to wrong memory demand estimates for large molecules. REMP is essentially a hybrid between MP and CEPA(0) rewritten as perturbation theory (https://doi.org/10.1016/j.cplett.2006.07.081). - Note: This PR also contains code pulled from @bozkaya 's fork. ## Sub-PR List. [LAB] This PR's content, including https://github.com/loriab/psi4/tree/dfocc2 by @bozkaya and @yavuzalagoz, will be added through the following sub-PRs:; * #2653 +12k/-1k; * #2663 +4k/-4k; * #2669 +2k/-1k; * #2670 +22k/-0k; * #2739 +20k/-2k. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Documentation; - [x] Test cases. ## Checklist; - [x] Tests added for any new features; - [ ] ~~[All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests)~~; - [ ] ~~Some tests fail locally but these are not related to any code touched in this PR~~; - [x] ~~The initial pull request broke DF-OMP2.5 and DF-OMP3. Will be fixed in a follow-up commit.~~ Fixed. ## Status; - [X] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2354:1132,Test,Test,1132,https://psicode.org,https://github.com/psi4/psi4/pull/2354,5,"['Test', 'test']","['Test', 'Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; The current guess mix code runs in iteration 0, but SAD doesn't have orbitals there, while some other guesses don't call `form_C` in iteration 0. This PR fixes guess_mix for all guesses. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Tests for guess_mix added for all guesses. ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2411:374,Test,Tests,374,https://psicode.org,https://github.com/psi4/psi4/pull/2411,4,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; The version of ADCC that the Psi4 CMake system currently requires (and tries to build if not found) is incompatible with C++17, and thus always fails to build. See https://github.com/adc-connect/adcc/issues/131 for the error message. This error was also mentioned in issue #2572.; This has been resolved by the ADCC/libtensor devs since, so bumping the required/built ADCC version to the latest release should fix _this particular_ issue with the ADCC build process. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Psi4 now requires ADCC version 0.15.13 or newer.; - [x] Fixed issue where building Psi4 from source with the ADCC plugin enabled-but-not-found resulted in a build failure with the error message `ISO C++17 does not allow dynamic exception specifications`. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] CMake now looks for ADCC 0.15.13 or newer, if not found the 0.15.13 tarball is downloaded and built. ## Checklist; - [x] No new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2785:1393,test,tests,1393,https://psicode.org,https://github.com/psi4/psi4/pull/2785,2,['test'],['tests']
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; There are some char arrays in `ccdensity::RHO_Params` that are set in `get_rho_params` but are otherwise never used. This PR removes them. This rectifies a few warnings with GCC 12, caused by the `sprintf `calls used to set them. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] No user-visible changes. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] `R1B_lbl` and similar unused members of `RHO_Params` are removed, except `R1A_lbl` which becomes not unused if `EOM_DEBUG` is defined. ## Checklist; - [x] No new features; - [x] Tests run by the CI are passing. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2805:926,Test,Tests,926,https://psicode.org,https://github.com/psi4/psi4/pull/2805,1,['Test'],['Tests']
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; These functions are relics from Psi3 (or before?) and they have many issues, unfortunately one of them is their function signature. Stemming from the awful interface, users of `rsp(...)` and `sq_rsp(...)` never check if the diagonalization failed, because they _cannot_. To keep the promise of not randomly breaking API without fair warning, this PR deprecates said functions but keeps them usable. After #2776, `rsp(...)` has no internal callers left. As for `sq_rsp(...)`:. - many former callers of `sq_rsp(...)` have turned out to be unused functions and have been removed; - If #2686 is merged the vast majority of remaining callers are migrated to a new wrapper around DSYEV; - The remaining call sites of `sq_rsp(...)` will all be in `dfocc`, which is not touched for the time being to avoid causing merge conflicts for the many pending PRs for that module. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] `PSI_API` function `void rsp(int nm, int n, int nv, double *array, double *evals, int matz, double **evecs, double toler)` is deprecated and 1.7 will be the last release with it present.; - [x] `PSI_API` function `void sq_rsp(int nm, int n, double **array, double *evals, int matz, double **evecs, double toler)` is deprecated and 1.7 will be the last release with it present. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Added deprecation notices to `rsp(...)` and `sq_rsp(...)`. ## Checklist; - [x] No new features; - [x] Tests pass as per Lori. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2798:1836,Test,Tests,1836,https://psicode.org,https://github.com/psi4/psi4/pull/2798,1,['Test'],['Tests']
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; This PR allows for using basis sets from the Basis Set Exchange library (https://github.com/MolSSI-BSE/basis_set_exchange) directly in psi4. To use a basis set from the BSE, you prefix the name of the basis set with `bse:`. Optionally, you can specify the version with a suffix (like `:1`). ```; # use most recent def2-tzvp version; set basis bse:def2-tzvp. # specifically use version 0 of sto-3g; set basis bse:sto-3g:0; ```. Also can be used with `assign`. ```; basis {; assign DZ; assign C bse:sto-3g:0; }; ```. Using these of course requires that the BSE be installed. This should be accessible from both schema/json and psithon. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] Add capability to use basis sets from the Basis Set Exchange. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [ ] Adds optional dependency to basis_set_exchange; - [x] Adds handling for basis sets that start with `bse:`; - [ ] Modifies some regexes to allow for colons in basis set names. ## Questions; None. ## Checklist; - [x] Optional dependency added to build chain; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2905:1452,Test,Tests,1452,https://psicode.org,https://github.com/psi4/psi4/pull/2905,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; This PR builds upon the functions added in #2711 and #2700 to provide more informative error messages if a `SYSTEM_READ`, `SYSTEM_WRITE` or `SYSTEM_LSEEK` fails, including the OS-provided error message, which may have clues for the cause of the error (disk is full, no permission, etc). ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is detined for the release notes. May be empty. -->; - [x] Error messages related to some IO errors are now more specific and detailed. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] New function: `psio_compose_err_msg`. This helps composing PSIO error messages without too much code duplication. It can optionally take an errno value and tack on the error message provided by the OS.; - [x] `psio_volseek` has been reworked to handle any errors internally by calling `psio_error`, instead of returning -1 on error. Appropriate error message generation and some `const` qualifiers were added.; - [x] `PSIO::rw` has been adapted to the changes to `psio_volseek` and error message generation was added after each read/write/seek.; - [x] Functions in `toclen.cc` are now also using `psio_compose_err_msg` to generate messages. ## Checklist; - [x] Tests run by the CI are passing. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2756:1517,Test,Tests,1517,https://psicode.org,https://github.com/psi4/psi4/pull/2756,1,['Test'],['Tests']
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; This PR fixes #3147 . Basically the psithon way of defining molecules converted _initial_cartesian on parsing.; When adding an external potential this was used as; molecule.set_geometry(clone_molecule._initial_cartesian).; set_geometry applies the conversion again. The two python ways I found, which set initial_cartesian did not do the conversion leading to incorrect geometries, when using external_potential and molecules defined as unit=angstrom. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Fixes #3147: Parsing molecules with angstrom units and using external_potential from python was broken. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Fixes #3147: Parsing molecules from psithon and python left mol._initial_cartesian in a different unit. This aligns the units. Downstream this had the effect of breaking using molecules with angstrom units with an external_potential from python. ## Questions; - [x] Question1. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3148:1346,Test,Tests,1346,https://psicode.org,https://github.com/psi4/psi4/pull/3148,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; This PR implements another variant of the Hückel guess.; The only modification is that the `k` parameter in the GWH rule is replaced by the updated rule from [doi:10.1021/ja00480a005](https://doi.org/10.1021/ja00480a005). ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] RN 1; - [ ] RN 2. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3002:810,Test,Tests,810,https://psicode.org,https://github.com/psi4/psi4/pull/3002,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; This PR implements level shifts. Closes #2216. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Level shifts in restricted methods; - [x] Level shifts in unrestricted methods; - [x] Level shifts in constrained unrestricted methods; - [x] Level shifts in restricted open shell methods. ## Questions; - [ ] Should the level shift be turned on by default? Since Psi4 does not have EDIIS/ADIIS, it will often fail to reach the convergence radius of DIIS. Level shifts may slow down convergence somewhat, but if they're turned off at large residual gradient (e.g. 1e-2) then the slowdown should be negligible in most cases. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2225:777,Test,Tests,777,https://psicode.org,https://github.com/psi4/psi4/pull/2225,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; This PR removes the `Matrix::diagonalize` overloads deprecated in PR #2738 and closes #2693 as done/superseded. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Deprecated `PSI_API` member function `Matrix::diagonalize(Matrix* eigvectors, Vector* eigvalues, diagonalize_order nMatz = ascending)` is removed.; - [x] Deprecated `PSI_API` member function `Matrix::diagonalize(SharedMatrix& eigvectors, Vector& eigvalues, diagonalize_order nMatz = ascending)` is removed.; - [x] Deprecated `PSI_API` member function `Matrix::diagonalize(SharedMatrix& metric, SharedMatrix& eigvectors, std::shared_ptr<Vector>& eigvalues, diagonalize_order nMatz = ascending)` is removed. ## Checklist; - [x] Tests run by the CI are passing. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2837:891,Test,Tests,891,https://psicode.org,https://github.com/psi4/psi4/pull/2837,1,['Test'],['Tests']
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; This PR removes the `rsp` diagonalizer which was deprecated in #2798, and its supporting functions `tqli` and `tred2`, which are not used anywhere else.; These can be preserved in psi4attic after this PR is merged. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Deprecated `PSI_API` function `void rsp(int nm, int n, int nv, double *array, double *evals, int matz, double **evecs, double toler)` is removed. ## Checklist; - [x] Tests run by the CI are passing. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2838:634,Test,Tests,634,https://psicode.org,https://github.com/psi4/psi4/pull/2838,1,['Test'],['Tests']
Testability,## Description; <!-- Provide a brief description of the PR's purpose here. -->; This PR removes the hardcoded list of functionals that contain omega and allows setting omega for any Libxc functional that contains it. Solves an issue described in #2641. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Omega can be set for any functional. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2643:448,Test,Tests,448,https://psicode.org,https://github.com/psi4/psi4/pull/2643,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; This PR reworks and simplifies `libqt/probabil.cc`. Excessive conditionals are removed, sanity checks now throw instead of returning zero, and the `double` kludge is supplanted by `uint64_t`. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] `factorial` and `combinations` now return `uint64_t` instead of `double`, and take `const uint64_t` instead of `int`; - [x] `factorial` now throws if the result would overflow; - [x] `combinations` now throws if computing n-choose-k is impossible. ## Checklist; - [x] No new features; - [x] CI tests are passing. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2907:806,test,tests,806,https://psicode.org,https://github.com/psi4/psi4/pull/2907,1,['test'],['tests']
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; This PR solves an issue with the use of the native optimization flags, which are different in various compilers and often get misinterpreted. It looks like the best solution is to first check the brand of the compiler, and then try whether the brand-specific flag(s) work. Related issues https://gitlab.com/libxc/libxc/-/issues/361 and #2023. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2377:607,Test,Tests,607,https://psicode.org,https://github.com/psi4/psi4/pull/2377,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; This adds the missing citation to Libxc in the manual's introduction. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] RN 1; - [ ] RN 2. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2975:658,Test,Tests,658,https://psicode.org,https://github.com/psi4/psi4/pull/2975,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; This changes the name of the controller for all three SAPT modules and standardizes their convergences as residual only with default of 1e-8. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] RN 1; - [ ] RN 2. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3105:730,Test,Tests,730,https://psicode.org,https://github.com/psi4/psi4/pull/3105,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; This is an implementation of the fitted version of the SAP guess, described in [J. Chem. Phys. 152, 144105 (2020)](https://doi.org/10.1063/5.0004046). The repulsive potential on every atom is fit in terms of error function potentials, which means that the guess can be evaluated with few two-electron integrals; namely. $$ {\bf F}^\text{SAP} = {\bf H} + {\bf V}^\text{SAP} $$. $$ V_{\mu \nu}^\text{SAP} = \sum_{A} (A|\mu \nu) $$. where $A$ is a fully contracted $1s$ function on each atom. I have no idea how the integrals work in Psi4. I followed [a Psi4Numpy example](https://github.com/psi4/psi4numpy/blob/master/Moller-Plesset/DF-MP2_NAF.py) @loriab hinted me at. The appears to compile; the only problem being the final assembly, i.e. the sum over the 3-center integrals. If anyone can tell me what I should be doing, help would be appreciated... Closes #2054 . ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] RN 1; - [ ] RN 2. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [ ] Implement scheme and get something that matches ERKALE; - [ ] Use optimal storage. ## Questions; - [ ] Is the basis build call correct? Should I also add a new basis role somewhere?. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3036:1581,Test,Tests,1581,https://psicode.org,https://github.com/psi4/psi4/pull/3036,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; This is an implementation of the fitted version of the SAP guess, described in [J. Chem. Phys. 152, 144105 (2020)](https://doi.org/10.1063/5.0004046). The repulsive potential on every atom is fit in terms of error function potentials, which means that the guess can be evaluated with few two-electron integrals; namely. $$ {\bf F}^\text{SAP} = {\bf H} + {\bf V}^\text{SAP} $$. $$ V_{\mu \nu}^\text{SAP} = \sum_{A} (A|\mu \nu) $$. where $A$ is a fully contracted $1s$ function on each atom. The implementation is not optimal, since I use `ao_eri` to compute the integrals. An optimal implementation would accumulate the auxiliary functions' integrals on-the-fly; however, optimization can be safely left to a later stage... Closes #2054 . ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] RN 1; - [ ] RN 2. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Implement scheme and get something that matches ERKALE. ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3039:1356,Test,Tests,1356,https://psicode.org,https://github.com/psi4/psi4/pull/3039,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; This is for after #2861. ## User API & Changelog headlines. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Add option `psi4_SHGAUSS_ORDERING` to use `sss` (all CCA standard orderings internally). expert only! all tests will pass (this pulls over Andy Simmonett's fchk fix from #2537) except mints3, and this adds alternate refs for that, too. This by no means means that all exported formats are safe -- only the ones we test :-) ; - [x] Uses a new commit for dkh that has some build updates. also passes it blas that it uses and I apparently missed before. closes #2537. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests) These changes fixed all test on a different branch. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2949:486,test,tests,486,https://psicode.org,https://github.com/psi4/psi4/pull/2949,6,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; This is the variant of DirectJK I mentioned at the end of @davpoolechem's talk at PsiCon last Saturday. The idea is simple: instead of updating the reference every iteration, which is subject to creeping numerical noise, use a fixed reference density and JK matrix for all iterations. I also simplified some of the DirectJK code, and added missing documentation. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] RN 1; - [ ] RN 2. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Should full formation still happen every N iterations? I don't know if this truly is less susceptible to numerical noise accumulation... ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3111:1077,Test,Tests,1077,https://psicode.org,https://github.com/psi4/psi4/pull/3111,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; This pull request adds electrostatic embedding capabilities to the F-SAPT code. Previously, the point charges could only be assigned to the environment. Now point charges can be included with either the interacting fragments A and B or the external environment C. This PR adds support only for point charges. Future PRs can potentially add support for more complex external potentials but this is not intended here. The external potential interface is currently under revision in #2069. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Add electrostatic embedding to the F-SAPT code. ## Questions; - [ ] . ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2131:764,Test,Tests,764,https://psicode.org,https://github.com/psi4/psi4/pull/2131,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; This updates the Windows Azure for testing and conda build from 2016 to 2022 environment and 11 to 13 llvm. It's definitely needed soonish as 2016 is getting retired. I don't see any reason the llvm change should hurt the broad usability of the conda package, so I'm for trying it in the wild. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2415:115,test,testing,115,https://psicode.org,https://github.com/psi4/psi4/pull/2415,1,['test'],['testing']
Testability,## Description; <!-- Provide a brief description of the PR's purpose here. -->; This works with both test_fchk_writer and #2400 (needed for independent run of fchk()). Thank goodness the fchk tester had a dfocc (comparatively old-style storage) case. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2408:192,test,tester,192,https://psicode.org,https://github.com/psi4/psi4/pull/2408,4,"['Test', 'test']","['Tests', 'tester', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; To implement the SAP guess (#3036), I need to toy with the contraction coefficients. Currently, there is duplicated data in BasisSet, as the Libint2 shells are built alongside the basis set itself. The idea of this PR is to modularize the Libint2 shell data creation so that the data can be refreshed based on the data in the BasisSet. The PR also fixes an issue in that the `n_prim_per_shell_` member of BasisSet was never populated. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] RN 1; - [ ] RN 2. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3037:1023,Test,Tests,1023,https://psicode.org,https://github.com/psi4/psi4/pull/3037,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Updates CMakeLists to pull libxc 7.0.0. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] RN 1; - [ ] RN 2. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3231:628,Test,Tests,628,https://psicode.org,https://github.com/psi4/psi4/pull/3231,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; While testing PR https://github.com/psi4/psi4/pull/2756, I have discovered a regression introduced by an earlier PR (#2700) of mine.; Before `throw`ing, `psio_error()` tries to write some data to the scratch files. But if `psio_error()` is called due to a write error, and the scratch disk is completely full, then this write will also fail, leading to `psio_error()` getting called again, and an infinite recursion ensues. The source of the regression is that `psio_tocwrite()` ends up calling `wt_toclen()`, which has been enhanced in #2700 to use `psio_error()` if it fails.; This PR resolves the issue by not trying to write anything to scratch if `psio_error()` is called due to a write failure. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] None? This regression was new enough that no release suffered from it. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Do not call `psio_tocwrite()` in `psio_error()` if `errval == PSIO_ERROR_WRITE`. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2773:86,test,testing,86,https://psicode.org,https://github.com/psi4/psi4/pull/2773,1,['test'],['testing']
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; `DPD::buf4_sort(...)` has some problems, the main scope of the function is quite ~~polluted~~ cluttered and it is a behemoth of a function.; This PR attempts to improve that by moving the incore/out-of-core decision logic into a separate function and file. `DPD::buf4_sort_axpy(...)` had the same code duplicated. The new function uses `const` wherever possible, its integers are now `int64_t` (with the exception of irrep numbers - having >2 billion irreps seems unlikely) and the `incore` variable is now a `bool`. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] `DPD::buf4_sort(...)` and `DPD::buf4_sort_axpy(...)` are slightly easier to read and debug; - [x] Code duplication between `DPD::buf4_sort(...)` and `DPD::buf4_sort_axpy(...)` is reduced; - [x] Possible reduction in `int` overflow risk via `int64_t`. ## Checklist; - [x] CI tests are passing. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2717:296,log,logic,296,https://psicode.org,https://github.com/psi4/psi4/pull/2717,2,"['log', 'test']","['logic', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; `DPD::buf4_sort(...)` is not exactly easy on the eyes. This PR attempts to improve that by reducing the scope pollution of the main scope of the function. Const is now used wherever appropriate. The `int` variables are suspect when it comes to overflowing, but this PR intends to be purely a cleanup that does not change any behavior, so all types are preserved as-is, modulo the addition of `const` qualifiers. Squash merge may be a good idea for this PR. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Make `DPD::buf4_sort(...)` slightly easier to read/debug. ## Checklist; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests); - [ ] Compiles with -Wshadow -Werror=shadow. ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2716:756,test,tests,756,https://psicode.org,https://github.com/psi4/psi4/pull/2716,2,['test'],['tests']
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; `Matrix::swap_rows` and `Matrix::swap_columns` do no seem to have any internal users, but since `Matrix` as a whole is `PSI_API`, it would be rude to suddenly remove them. This PR adds deprecation notices. The motivation for removal is that these two functions are the only internal users of the DSWAP BLAS interface. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] `PSI_API` functions `Matrix::swap_rows` and `Matrix::swap_columns` are now deprecated due to a lack of users. Unless someone speaks up, 1.8 will be the last release to have them. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Deprecation notices added to `matrix.h`. ## Checklist; - [x] No new features; - [ ] CI tests are passing. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2909:1077,test,tests,1077,https://psicode.org,https://github.com/psi4/psi4/pull/2909,1,['test'],['tests']
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; `Molecule::clear()` is currently almost a no-op, because it is calling `std::vector::empty()`, which is a getter function that does not modify the object. This PR corrects that. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] The `clear()` member function of `PSI_API` class `Molecule` now correctly clears `Molecule::atoms_` and `Molecule::full_atoms_`. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Use `std::vector::clear()` instead of `std::vector::empty()` in `Molecule::clear()`. ## Questions; - [ ] What is the user/caller expectation for the state of `Molecule::atoms_` and `Molecule::full_atoms_` after `Molecule::clear()` returns? In `molecule.h` the comment suggests it should be ""zeroed out"": https://github.com/psi4/psi4/blob/61c0b47982ceafd92f567934a29601610fbb1520/psi4/src/psi4/libmints/molecule.h#L137-L138 But that is not what `std::vector::clear()` does, it destructs all elements, leaving the vector with a size of zero. Moreover, the elements of `Molecule::atoms_` and `Molecule::full_atoms_` are `std::shared_ptr`, so what does ""zeroing"" really mean here?. Is the comment misleading as I suspect it is, or do callers of `Molecule::clear()` really expect it to preserve the size of `Molecule::atoms_` and `Molecule::full_atoms_`?. ## Checklist; - [x] No new features; - [ ] Tests run by the CI are passing. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2864:1694,Test,Tests,1694,https://psicode.org,https://github.com/psi4/psi4/pull/2864,1,['Test'],['Tests']
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; `block_matrix` should not let its callers discard the arrays it allocates. This PR adds the `[[nodiscard]]` attribute.; Also, if an allocation fails, `block_matrix` now throws instead of calling `exit(1)` and tells the user how many bytes it has tried and failed to allocate. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] PSI_API function `double **block_matrix(size_t n, size_t m, bool mlock = false)` now has the `[[nodiscard]]` attribute, as discarding its return value is a guaranteed memory leak (unless n or m is zero, in which case no allocation happens). ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] `[[nodiscard]]` attribute added to declaration and definition; - [x] `exit(PSI_RETURN_FAILURE)` replaced with `throw PSIEXCEPTION`; - [x] VScode can now parse the docstring of the function. ## Checklist; - [x] No new features; - [x] All tests run by the CI are passing. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3104:1247,test,tests,1247,https://psicode.org,https://github.com/psi4/psi4/pull/3104,1,['test'],['tests']
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; `libqt/ras_set.cc` has a lot of commented-out code in it, some of it would not even compile anymore.; `qt.h` declares a pair of functions that are never defined, but would be used in the commented-out `ras_set` code.; This PR removes this dead code. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Commented out code is removed from `libqt/ras_set.cc`; - [x] Declarations of `int* get_frzcpi()` and `int* get_frzvpi()` are removed from `qt.h`. ## Checklist; - [x] No new features; - [x] Tests run by the CI are passing. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2814:926,Test,Tests,926,https://psicode.org,https://github.com/psi4/psi4/pull/2814,1,['Test'],['Tests']
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; addresses #3099. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] fix libxc min to v6.1. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] fix some `assert()`. tests still pass on linux. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3103:543,assert,assert,543,https://psicode.org,https://github.com/psi4/psi4/pull/3103,5,"['Test', 'assert', 'test']","['Tests', 'assert', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; closes #2939 . ## User API & Changelog headlines; - [x] fix bug where `optimize(..., engine=""geometric"", molecule=mol)` would not run; - [x] undo some hack fixes and make distributed driver runs through QCFractal ""next"" branch more reliable by making array qcvars shaped numpy arrays. Works with QCFractal >=v0.50beta10. Show examples of using `get_psi_results()` to prepare the results of distributed driver runs in ""normal"" psi4 way. ## Dev notes & details; - [x] In the early days (before ddd entered psi4), all array-like pieces of AtomicResults came back as flat lists, so we had to ""plump"" them into e.g., (nat, 3) for gradient. Then, by the time of v1.6 and QCFractal master v15.8, the AtomicResults preserved all that, so we stopped using the plumper. Now in qcfractal next, they're back to lists again _and_ qcvars have been mingled with other properties, so both separation and plumping are required.; - [x] promote `get_psi_results` as a drop-in replacement after running distributed. It sets up a dummy wfn and qcvariables, just like an internal run, so one doesn't have to deal with picking results off the AtomicResult QCSchema.; - [x] Added labels to tests (mostly findif) so that one can catch all ddd-using tests with `pytest -m ""findif and cbs and nbody""`; - [x] set up a mechanism where can parameterize both pytests and ctests with a snowflake with minimum clutter. ## Questions; - [x] This won't work with current qcf release. I'll ask @bennybp to mint a beta10, then this should work. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review (for review, the 4th commit has the material changes. 3rd are test changes. 1st & 2nd are labeling and syntax.); - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2929:1246,test,tests,1246,https://psicode.org,https://github.com/psi4/psi4/pull/2929,6,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; fixes a couple full tests. with these and the ones Jonathon fixed, full tests should be clean again. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] the nbody-vmfc-hessian has one element of value 0.85 above reference by 1.2e-8 caused by adiis. not a big deal, so convcrit loosened from 1e-8 to 2e-8.; - [x] the new molden writer tests are nicely structured, but they use r_convergence=12 a lot for SCF, which doesn't tighten the criteria for SCF. so the new adiis tipped one test over the failure limit. (see below the original (r_conv=12) and tight (e_conv=12) SCF cycles w/ diis and adiis.) I've regenerated the reference molden.refs with e_convergence 12 and plain diis, then relaxed the convergence for normal running. no trouble with adiis. sound ok, @sgoodlett?; - [ ] @hokru, on the new dft_blocking_schemes test, I'm getting `OCTREE GRID POINTS:: computed value (293260.0) does not match (293259) by difference (1.0).` Is it reasonable to test for 293259 +/- 2 or so?. ```. Total Energy Delta E RMS |[F,P]|. @RHF iter SAD: -672.15146809832379 -6.72151e+02 0.00000e+00; @RHF iter 1: -672.63084564264716 -4.79378e-01 9.00814e-03 DIIS; @RHF iter 2: -672.71442224758289 -8.35766e-02 5.30043e-03 DIIS; @RHF iter 3: -672.74379684057214 -2.93746e-02 5.52535e-04 DIIS; @RHF iter 4: -672.74452788784220 -7.31047e-04 1.91489e-04 DIIS; @RHF iter 5: -672.74459677446487 -6.88866e-05 5.52833e-05 DIIS; @RHF iter 6: -672.74460689141483 -1.01169e-05 1.01025e-05 DIIS; @RHF iter 7: -672.74460730536885 -4.13954e-07 1.76374e-06 DIIS; @RHF iter 8: -672.74460731378190 -8.41305e-09 7.61045e-07 DIIS; Energy and wave function converged. @RHF iter SAD: -672.15146809832379 -6.72151e+02 0.00000e+00; @RHF iter 1: -672.63084564264716 -4.79378e-01 9.00814e-03 DIIS; @RHF iter 2: -672.71442224758289 -8.35766e-02 5.30043e-03 DIIS; @RHF iter 3: -672.74379684057214 -2.93746e-02 5",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2446:100,test,tests,100,https://psicode.org,https://github.com/psi4/psi4/pull/2446,5,['test'],"['test', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; the Windows conda package isn't working for some computers. A report (http://forum.psicode.org/t/how-to-run-psi4-on-windows-10/2174/16) is that compiling with AVX _does_ work. The current situation should be building with AVX2 (https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L145) and @kcpearce reports that the conda pkg still fails on his computer with AVX2 instructions, but this is worth a shot. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2292:509,Test,Tests,509,https://psicode.org,https://github.com/psi4/psi4/pull/2292,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; time to fix the full test suite again. these will help, though more PRs may be needed. ## Status; - [x] Ready for review; - [x] Ready for merge SQUASH",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2312:101,test,test,101,https://psicode.org,https://github.com/psi4/psi4/pull/2312,1,['test'],['test']
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; ~Ignore this for now. This is so I can get a build snapshot.~ It might well fail tests b/c needs qcel and qcng snapshots. Full tests is clean locally. Changes for the most part are RTG except for two lines noted below. UPDATE: go ahead and review, please. I'll take out the 2 improper lines noted below before merge. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] report FD G & H more fully in core and wfn vars; - [x] add MP2 Hessian testing to stdsuite; - [x] I guess the a-ccsd(t) docs changes didn't make it into #2241 ?; - [x] some cfour interface expansions that are really only useful for internal debugging. use the regex harvesting from qcng, not here; - [x] this bit https://github.com/psi4/psi4/compare/master...loriab:sept21qcdb?expand=1#diff-3abbb4f37a59cc2e6cfbff3f4cb73b312dfd94044a19f38b00bf7ae140db13e7R540-R541 needs removing before actual merge is considered. proper way to handle would be if the select_ccsd_gradient was smart enough to say ""can't do"" to FC gradients, so it'd fall back to FD by ene. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2293:161,test,tests,161,https://psicode.org,https://github.com/psi4/psi4/pull/2293,6,"['Test', 'test']","['Tests', 'testing', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; ~Note: this isn't going to pass until after #2946~. ## Dev notes & details; - [x] We had the odd situation where the install directories (GNUInstallDirs) were pretty flexible. But it wasn't quite flexible enough for the usual Windows install layout (see https://github.com/psi4/psi4/blob/master/conda/win/meta.yaml#L32-L41). And if you got those all in the right place, the paths computation in `run_psi4.py` (-> `bin/psi4`) and `psi4/__init__.py` wasn't quite as flexible as GNUInstallDirs allowed. So I modernized the lot with pathlib and hopefully systemitized it a bit, too.; - [x] There's a weird case on linux c-f where we're in a git repo, but it's not the psi git repo. Thus versioning is much confused. The versioner can now escape from that case and version as if tarball. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests); - [x] works for lin, mac, win conda-builds. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2948:883,Test,Tests,883,https://psicode.org,https://github.com/psi4/psi4/pull/2948,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; ~for now must enable with `-D ENABLE_IntegratorXX=ON`. recc installing catch2 first to avoid downloading each time.~. ~CI will fail because I added a integratorxx header to a file for trial, but haven't enabled the addon in the buildsys everywhere.~. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] optionally build integratorXX with `-D ENABLE_IntegratorXX=ON`. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3041:588,Test,Tests,588,https://psicode.org,https://github.com/psi4/psi4/pull/3041,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; <!--Adds clean-up recommended by LGTM-->. ## Checklist; - [ ] Tests added for any new features (no new features); - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests) (tests that run before changes also run after changes). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2038:78,Test,Tests,78,https://psicode.org,https://github.com/psi4/psi4/pull/2038,4,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; @andysim added the `dcft` module to Psi in 2010, as its pilot implementation. As the method was developed, @ssh2 decided that it was best to drop the `f` and name it `dct`. The abbreviation `dcft` hasn't been used in papers since 2012, and DCT papers since last year have just called the method density cumulant theory, cutting out the `f` entirely. This PR brings Psi up-to-the-present and calls the method `dct` everywhere. Now that we know what the method _is called_, this PR fixes a bug reported on the forums, where the method's density fitting basis set wasn't picked up by the input parser. This was the motivation for this massive PR, and it took one whole line of code. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Replaces `dcft` and `DCFT` with `dct` and `DCT`, throughout all C- and Py- side code; - [x] Added UpgradeHelper errors for users who try `energy('dcft')` and some such; - [x] Added PsiException errors for users who try a dcft option block; - [x] Added PsiException errors for users who try a dcft option; - [x] Updates the tests; - [x] Updates the samples; - [x] Updates the documentation (abbreviations kept when they are part of a paper title); - [x] Removed debug options which the code didn't even use anymore; - [x] Adds the one line of code needed to fix the instigating bug. ## Checklist; - [x] Every `ctest` test calling DCT is run and passes (14 dedicated DCT tests plus four additional tests); - [x] I've confirmed that you encounter the various errors when expected; - [x] I've manually checked the documentation. The only thing not working is the link to the `dct` folder, which won't exist until _after_ the PR is accepted. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1719:1117,test,tests,1117,https://psicode.org,https://github.com/psi4/psi4/pull/1719,4,['test'],"['test', 'tests']"
Testability,"## Description; @bennybp pointed out [here](https://github.com/psi4/erd/pull/5) that we need to be paying attention to thread safety in called libraries, even if they don't have OpenMP, because Psi4 does. This is trying to follow the guidance in [the venerable document (search `ifcoremt`)](https://software.intel.com/en-us/articles/threading-fortran-applications-for-parallel-performance-on-multi-core-systems). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Adds rtl_init and rtl_finalize calls. According to the sample code below, also supposed to set reentrancy, but I don't know what to do about that.; - [x] Drops clang-3.9 travis test that's a little slow. I'm told that clang 3.9 is the same as Mac/Distelli is running anyways.; * **User-Facing for Release Notes**. ## Questions; - [x] I don't know much about this, but it appears harmless, at least for Intel compilers. Going to let Travis test other build systems. Any thoughts?. ## Status; - [x] Ready to go. ```; /*; * Multithreaded C-Fortran mixed language test program; */. #include <stdio.h>; #include <stdlib.h>; #include <unistd.h>; #include <pthread.h>; #include <errno.h>; #include ""threadpool.h"". #include ""forreent.h"". #define NUM_THREADS 12; #define NUM_JOBS 10. /* definitions for Fortran Runtime library init/finalize */; extern void for_rtl_init_ (int *, char **);; extern int for_rtl_finish_ ( );; extern int for_set_reentrancy (int *);. /* declare the external Fortran function 'fpa' */; extern void fpa(int io, char *filename); . void job_thread(void *arg1, void *arg2);. int main(int argc, char **argv); {; threadpool tp;; int i;; int *reent ;; int fstat;. char filenames[NUM_JOBS][100];; int io[NUM_JOBS];. int io_status;; /* Call the Fortran Runtime library for initialization */; for_rtl_init_ (&argc, argv);; *reent = FOR_K_REENTRANCY_THREADED;; fstat = for_set_reentrancy( reent );; printf (""fstat %i \n"", fstat);. /* Create a thread pool of 12 thre",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/604:705,test,test,705,https://psicode.org,https://github.com/psi4/psi4/pull/604,2,['test'],['test']
Testability,"## Description; @dgasmith and I had to do some preliminary work to get the Hessian code extended, and here's the result. Essentially, we've centralized the construction of the core Hamiltonian and its derivatives, which ensures that different codes will correctly obey any new one electron contributions (field perturbation, MM point charges, ECPs, *etc.*) and derivatives thereof. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] @psi-rking: your perturbed CC gradient request should be addressed by this fix.; - [x] Test cases for DFOCC and CCENERGY gradients, with dipole field.; * **User-Facing for Release Notes**; - [x] Improved support for ECPs and external fields, and their gradients, in correlated calculations. . ## Questions; - [x] How should we handle the new signature for mol's `nuclear_repulsion_energy()`? The current solution is to mandate that the field be specified C++-side, but py-side just provides a default zero field. Another option would be to overload with an arg-less function, and provide a deprecation warning for that version (to force the programmer to think about whether they really mean to compute the nuc. energy ignoring the field). ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/844:584,Test,Test,584,https://psicode.org,https://github.com/psi4/psi4/pull/844,1,['Test'],['Test']
Testability,"## Description; @hokru recently reported that when he attempted to use `dfomp2` through `dfocc` to compute dipoles, he was not able to reproduce ORCA's RI-OMP2 to within even 0.01 a.u. I determined by comparison to my own Psi4Numpy implementation of DF-OMP2 that this was an error in the `dfocc` module and eventually tracked it down to `dfocc` sending the wrong orbitals to `OEProp`. The primary purpose of this PR was to fix that and get density-fitted orbital optimized properties hooked up to the driver. ...Unfortunately, adding a test that the remaining dipoles are correct required me to fix some other standing `dfocc` issues that prevent users from setting tight convergence (#1143). That in turn required quite a few test changes. While working through that, I also solved #1509. The 0.7 mHartree difference I was seeing was due to another bug in `dfocc`. It computed the MP2.5/MP3 energy by adding to the _SCF reference_ and not the current determinant. Those are different things in orbital-optimized methods. When you add in the correct reference energy, the disagreement reported in #1509 goes away. In brief, this PR fixes #1143 and fixed #1509. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix a bug where `dfocc` properties were incorrect; - [x] Add a test that the `dfocc` properties are now correct; - [x] Hook up `dfocc` properties to the driver; - [x] Fix a bug where DFOMP2.5/DFOMP3 energies could be incorrect depending on convergence settings; - [x] Simplified/Sanitized handling of convergence criteria in `dfocc`; - [x] Modified `dfocc` tests due to above. ## Checklist; - [x] `ctest -L dfo` and `ctest -L cdo` pass; - [x] `test_dipole.py` passes. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1772:536,test,test,536,https://psicode.org,https://github.com/psi4/psi4/pull/1772,4,['test'],"['test', 'tests']"
Testability,## Description; A few additional tweaks for the Psi4 1.2 release. - Updates gCP alias function testing so that basis sets are applied for aliases.; - Hides DeepDiff import so that *most* of Psi4 is usable without this module.; - Updates the JSON spec to the V1 release.; - Ensures QCSchema input is correctly *copied* and not just updated. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1030:95,test,testing,95,https://psicode.org,https://github.com/psi4/psi4/pull/1030,1,['test'],['testing']
Testability,## Description; A few consequences of #2462 . ## Checklist; - [ ] ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2470:67,Test,Tests,67,https://psicode.org,https://github.com/psi4/psi4/pull/2470,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; A few dipole/quadrupole full tests evaded earlier passes. Also give Windows the right L2 after #2413 ; ## Checklist; - [ ] ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2494:45,test,tests,45,https://psicode.org,https://github.com/psi4/psi4/pull/2494,4,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; A few testing bugs and completing the pytest access route. Nothing controversial. Most of this PR is autogenerated. Due diligence on review can be achieved by examining:; * `empirical_dispersion.py`; * `addons.py`; * `extern1/input.dat`; * `tester.py`; * `test_addons.py`. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] fixed bug that wouldn't allow plain pytest of installed `psi4/` b/c would bring in incorrectly configured qcdb tests. workaround was to pytest `psi4/tests/`; - [x] add a couple corrections I had promised to #2536 but had forgotten to push; - [x] fixes #2548 by passing psi4's `-n` to qcng for dftd3/gcp/mp2d; - [x] corrects `dfmp2-freq2` ctest was registered as `dfmp2-freq1`; - [x] I realized externalpotentials weren't getting unset after a energy/grad/etc. command. This is probably a new bug after #2515 but didn't confirm. It's healed in DDD, but the solution didn't port, so I added the test and temporary workaround to extern1; - [x] Added feature to ctest_runner to allow directory structure to be copied into test scratch for psithon2. This is proven to work but needs a couple lines added to qcengine, so hidden for now.; - [x] Fixed resp addon tests that always failed in parallel. these write to fixed-name files that aren't configurable, so they need to be chdir'd, if not run serially.; - [x] Added a script tester.py that checks some config stuff and writes out missing `test_input.py`. See the goals there for details. Running it produces a list of flaws like the below. I'll post this to an issue for later attention. Someday this can be hooked up to GHA and replace the perl script.; ```; Complaints; ----------; - [ ] 1. cc5: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 2. cookbook/manual-sow-reap: missing cmake directory registration. `vi cookbook/CMakeLists.txt`; - [ ] 3. cookbook/manual-sow-reap: missing CMakeLists. `vi cookbook/manual-sow-reap/CMakeLists.txt",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2549:22,test,testing,22,https://psicode.org,https://github.com/psi4/psi4/pull/2549,4,['test'],"['tester', 'testing', 'tests']"
Testability,"## Description; A minor correction to the test file of rhf-hessian. Unfortunately, this wasn't picked ; before the merge of https://github.com/psi4/psi4/pull/757. ; ## Status; - [X] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/894:42,test,test,42,https://psicode.org,https://github.com/psi4/psi4/pull/894,1,['test'],['test']
Testability,## Description; A rebase of #2135 for CI studies. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2580:234,Test,Tests,234,https://psicode.org,https://github.com/psi4/psi4/pull/2580,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; A recent forum request needed to use serialized wavefunctions with `detci`. That's a very easy one, and one I can easily see myself needing as I start getting into some FCI benchmarking, so might as well fix it now. I decided to use `_default_psio_lib_` rather than making a new PSIO object because `_default_psio_lib_` is used elsewhere in `detci`. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] `detci` has now escaped #1851. ## Checklist; - [x] All `ci` ctests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1861:189,benchmark,benchmarking,189,https://psicode.org,https://github.com/psi4/psi4/pull/1861,1,['benchmark'],['benchmarking']
Testability,"## Description; A small, simple companion to https://github.com/psi4/psi4/pull/2833. This updates to the reference output files for the tests that use CompositeJK methods (linK-1, linK-2, linK-3, and scf5), especially notable since the current reference files use `DIRECTDFJ` for composite `SCF_TYPE` methods instead of the current `DFDIRJ`. ## User API & Changelog headlines; N/A. ## Dev notes & details; - [X] Regenerate the reference output files for the tests linK-1, linK-2, linK-3, and scf5. ## Questions; N/A. ## Checklist; - [X] Tests added for any new features; - [X] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [X] Ready for review; - [X] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2954:136,test,tests,136,https://psicode.org,https://github.com/psi4/psi4/pull/2954,5,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; A step toward #883 by improving qcvar capabilities on Wfn and localizing some modules. ## Todos; - [x] removes or py3-izes scripts; - [x] addresses the floats part of #1375 by; - expanding the variable operations on `Wavefunction`; - making their storage always uppercase and their access case-insensitive; - dev alert: any code that wrote to wfn array directly in non-UC (e.g., `wfn.variables_[""lower or mixed-case var""] = val`) needed to be changed to `wfn.set_variable`; - [x] adds runtime FutureWarning to renamed fns: `psi4.core.get_variable`, psi4.core.get_variables`, `Wavefunction.get_variable`; - [x] improves the wfn localization of qcvars for DFT, scf_helper, DFMP2, OEPROP. trying to set on `wfn` c-side, then just copy into `P::e.globals` in proc.py.; - [x] moves DETCI, DFMP2 entirely to qcvar passing on Wfn. OCC, DFOCC, FNOCC do so for mp2-like only.; - [x] adds some functional-including qcvars for DFT; - [x] BREAKS8; - remove `SCS-MP2 OPPOSITE-SPIN CORRELATION ENERGY` and `SCS-MP2 SAME-SPIN CORRELATION ENERGY` from dfmp2 `Wavefunction.variables_`; - remove MP2 psivars from double-hybrid DFT final return; - `SCS-MP2 * ENERGY` now are defined (6/5, 1/3) quantities. For the user-influenceable vars, it's `CUSTOM SCS-MP2 * ENERGY`; - `core.variable` now throws when you access a key not set. This is what `Wavefunction.variable` did before, but `core.variable` used to just create the key and set to 0. ## Questions; - [ ] FutureWarning provides the offending line. However, this is complicated by our promoting the get_variable namespace and the PsiAPI and Psithon calling routes. It's going to be hard to get this offending line printing universally right. It's hit and miss now. ## Checklist; - [x] full tests. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1381:1743,test,tests,1743,https://psicode.org,https://github.com/psi4/psi4/pull/1381,1,['test'],['tests']
Testability,## Description; A test case for dgasmith's orbital rotation code using an ROHF reference.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/585:18,test,test,18,https://psicode.org,https://github.com/psi4/psi4/pull/585,1,['test'],['test']
Testability,"## Description; A typo in the overlap integral second derivatives caused errors in the analytic hessians. The error seems to be confined to one of the three contributions to matrix elements where the angular momentum in the bra and ket differ, and only when the derivatives both refer to the same perturbation; which is why the code made it through the initial tests. I'm still trying to wrap my head around exactly why those tests work, so I'd like a day or two before this is ready to merge. My sincere apologies to all whom this bug inconvenienced. Fixes #791 and #901. ## Todos; Notable points that this PR has either accomplished or will accomplish. * **User-Facing for Release Notes**; - [ ] Fixed a bug in the analytic Hessian code. ## Questions; - [x] Which extra tests do you have in mind, @loriab?. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/903:361,test,tests,361,https://psicode.org,https://github.com/psi4/psi4/pull/903,3,['test'],['tests']
Testability,"## Description; According to [clang source](http://llvm.org/svn/llvm-project/cfe/trunk/lib/Frontend/InitPreprocessor.cpp) (about half way down the page), clang always reports version 4.2.1 when using ```__GNUC__```, ```__GNUC_MINOR__```, ```__GNUC_PATCHLEVEL__```. This PR updates the version tester to use ```__clang_major__```, ```__clang_minor__```, ```__clang_patchlevel__``` when clang is detected. This issue appeared when using Intel compilers on a Mac. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/579:293,test,tester,293,https://psicode.org,https://github.com/psi4/psi4/pull/579,1,['test'],['tester']
Testability,"## Description; Add HF- and PBEh-3c capabilities, now that the former have been verified from Orca and the latter through S. Grimme private communications. ## Todos; * **Developer Interest**; - [x] gcp smoke tests going to pytest PR; - [x] write a bit of docs; - [x] So this is where my compare_values improvements ran off to. Now have a toggle to fail or not and can check mismatch by val, not just by order of magnitude value.; - [x] Add `gcp` interface, but not as advanced as `dftd3` b/c not writing to a file, just takes one of the pre-def values. ; * **User-Facing for Release Notes**; - [x] Semi-semiempirical methods HF-3c and PBEh-3c of Grimme can now be accessed (with `dftd3` and `gcp` executables detectable in PATH). Access through `energy('hf3c')` and `energy('pbeh3c')`. Can run with or without preferred basis set specified (minix and def2-msvp, respectively). ## Questions; * @dgasmith, this'll need a little adaption for 1.2. ## Status; - [x] Ready to go. Not averse to a squash.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/630:208,test,tests,208,https://psicode.org,https://github.com/psi4/psi4/pull/630,1,['test'],['tests']
Testability,"## Description; Add PSI_API to all functions called by Forte (also see #955, there might be some duplication to address). ## Todos; This PR exposes C++ functions/classes that are required by Forte. . ## Checklist; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/958:254,test,tests,254,https://psicode.org,https://github.com/psi4/psi4/pull/958,2,['test'],['tests']
Testability,"## Description; Add PSI_API to libmints/multipolesymmetry.h, so that it can support a version of v2rdm_casscf plugin. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [ ] Feature1; * **User-Facing for Release Notes**; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1131:347,Test,Tests,347,https://psicode.org,https://github.com/psi4/psi4/pull/1131,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; Add ScreeningType::None as a user option and sets ScreeningType::Schwarz as the default. This should allow use of mixed basis set types to be used in integrals as well. ## User API & Changelog headlines; N/A. ## Dev notes & details; - [X] Breaks out of setup_sieve() in twobody.cc before exception can be thrown; - [X] Adds ""NONE"" to list of options in read_options.cc. ## Checklist; - [X] Tests added for any new features; - [X] All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [X] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2973:406,Test,Tests,406,https://psicode.org,https://github.com/psi4/psi4/pull/2973,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; Add a couple of missing stub files from my previous PR, fixes #1146",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1147:40,stub,stub,40,https://psicode.org,https://github.com/psi4/psi4/pull/1147,1,['stub'],['stub']
Testability,"## Description; Add cct3 plugin. Patch liboptions. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] add build connection, proc.py connection, and token smoke test; - [x] fix embarrassing bug where enum-like string options weren't validating when set in local scope. that is, `set guess nonsense` would protest, but `set scf guess nonsense` would pass. this isn't perfect as validation occurs against a union of allowed values among different local scopes, but it's an improving patch.; - [x] @edeustua is going to rename the repo to plain `cct3`, so this'll need a name adjustment pass.; - this is connected with https://github.com/piecuch-group/psi4_cct3/pull/2; - note that cct3 builds slowly as it has some hefty fortran files. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1934:207,test,test,207,https://psicode.org,https://github.com/psi4/psi4/pull/1934,4,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,"## Description; Add rotational strength as new property, which has become available in adcc 0.14.3. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [X] Rotational strength for all ADC methods from adcc; - [x] Velocity gauge for oscillator strength. ## Questions; - [x] Adcc now allows oscillator strengths to be computed in both velocity and length gauge. What is the canonical way to expose this in Psi4?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1892:473,Test,Tests,473,https://psicode.org,https://github.com/psi4/psi4/pull/1892,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; Add set_Lagrangian in Wavefunction. Also expose `C_DGEQP3` function. . ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests) `ctest -L quick` all passed. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2064:141,test,tests,141,https://psicode.org,https://github.com/psi4/psi4/pull/2064,2,['test'],['tests']
Testability,"## Description; Added PSI_API macro to libqt/reorder_qt.cc functions and corresponding libqt/qt.h. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - Exposes libqt/reorder_qt() and libqt/reorder_qt_uhf() to plugins. ## Checklist; - [X] All or relevant fraction of full tests run. ## Status; - [X] Ready for review; - [X] Ready for merge. ## Comment; This seems pretty trivial, but I haven't made a PR in a long, long time...",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1212:312,test,tests,312,https://psicode.org,https://github.com/psi4/psi4/pull/1212,1,['test'],['tests']
Testability,## Description; Added PSI_API to OEProp for use in external pluggins. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1603:245,Test,Tests,245,https://psicode.org,https://github.com/psi4/psi4/pull/1603,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; Added a couple of new features to cubeprop. The functionality seems to work, but the PR is rather unpolished. An illustration of me while writing this PR can be found here:. https://ih0.redbubble.net/image.511550362.9563/flat,1000x1000,075,f.u1.jpg. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Implements printing of ECP electrons, issue #1136 ; * **User-Facing for Release Notes**; - [x] Added keyword `""FRONTIER_ORBITALS""` to cubeprop tasks. This computes the alpha HOMO and LUMO (if nalpha == nbeta), or the highest-energy doubly occupied (DOMO), the singly occupied (SOMO) and the unoccupied (LUMO) orbitals of both spins.; - [x] Added keyword `""DUAL_DESCRIPTOR""` to cubeprop tasks. Computes (for closed shell systems) the dual descriptor function (ie. the difference of the Fukui functions) from the HOMO and LUMO. Some references: [10.1021/jp046577a](http://dx.doi.org/10.1021/jp046577a) and [10.1007/s10910-014-0437-7](http://dx.doi.org/10.1007/s10910-014-0437-7). ## Checklist; - [x] Add documentation of the new features to the manual.; - [X] Add tests; - [X] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1138:1143,test,tests,1143,https://psicode.org,https://github.com/psi4/psi4/pull/1138,3,['test'],['tests']
Testability,"## Description; Added a dictionary-based method for implementing density functionals. All non-dispersion versions of original functionals are working with some exceptions, the new definition of functionals has ""TEST-"" prefix for now. Not working functionals are: HF+D and HJS-B88 which do not run, HF3C for unknown reason, B97-D which should be -D2 not -D3 corrected in master. Some dispersion corrected methods already implemented - all BLYP functionals, for example. Script used for testing attached:; [test.dat.txt](https://github.com/psi4/psi4/files/1735039/test.dat.txt). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Fix for Issue #920 ; - [x] Easy implementation of new functionals; - [x] LibXC parameters (ALPHA, BETA, OMEGA) now exposed to python; - [x] Check functionals against Q-Chem; - [ ] oPBE-D, oTPSS-D, oPWLYP-D ,oBLYP-D, TPSSh-D3BJ - not included in PR #880 ; - [x] B97-D; - [x] wB97X-D3 - needs tweaks - was disabled.; - [x] DSD-***; - [x] [PBE]HF3C; * **User-Facing for Release Notes**; - [ ] Eventually: let user pass a dict to psi4 with custom functionals? . ## Questions; - [ ] What do you think about the current interface?. ## Status; - [x] Dashparams for functionals need to be migrated too.; - [x] Ready to go - from my PoV at least.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/922:211,TEST,TEST,211,https://psicode.org,https://github.com/psi4/psi4/pull/922,4,"['TEST', 'test']","['TEST', 'test', 'testing']"
Testability,"## Description; Added and tested the following functionals. For the last two, unfortunately no bench value is provided.; ```; Functional: libxc : rob qchem; Comparison SOGGA11: -76.3720792686 : nan 3.84e-05 ; Comparison SOGGA11-X: -76.3569745367 : nan 1.10e-05 ; Comparison M06-L: -76.3766432198 : nan 1.95e-06 ; Comparison MN12-L: -76.3109178757 : nan 3.84e-05 ; Comparison MN15-L: -76.3001901669 : nan 5.49e-06 ; Comparison MN15: -76.3017521834 : nan nan ; Comparison PBE0-DH: -76.1613318950 : nan nan ; ```. Added worker functions for SCAN family of functionals, however without XC_MGGA_C_SCAN (which is available in LibXC 3.0.1) they won't work - commented out. See http://forum.psicode.org/t/libxc-density-functionals/589/",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/904:26,test,tested,26,https://psicode.org,https://github.com/psi4/psi4/pull/904,1,['test'],['tested']
Testability,## Description; Added casts to long int to prevent integer overflow in SAPT amplitudes. ## Checklist; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1364:142,test,tests,142,https://psicode.org,https://github.com/psi4/psi4/pull/1364,2,['test'],['tests']
Testability,"## Description; Added the one line `ao_multipole_potential` function to `export_mints.cc`. This allows the user to access one-center integrals from the python interface. The most common use case for this is to calculate electrostatic potential and field from an auxiliary basis set expansion of the electron density. ## User API & Changelog headlines; - added `ao_multipole_potential` to `export_mints.cc`. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - Makes no changes to existing `export_mints.cc`; - Adds a function to grab One Body Integrals for a given basis set. ## Checklist; - [x] [All or relevant fraction of full tests run]. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2744:813,test,tests,813,https://psicode.org,https://github.com/psi4/psi4/pull/2744,1,['test'],['tests']
Testability,"## Description; Address issue #2087. Specifically:. On `numpy.rst`:; 1) Updated Numpy quickstart guide link; 2) Updated Psi4Numpy Repo link; 3) Updated psi4.{Matrix, Vector, Dimension} -> psi4.core.{Matrix, Vector, Dimension}; 4) Added link to Psi4's Symmetry quick guide. On `numpy_helper.py`:; 1) Updated docstring example to `psi4.core.Matrix`. . ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ]. ## Questions; - [ ] Section ""Array to Matrix"" and ""Matrix to Array"" print and run the docstring. For ""Matrix to Array"" the example can be run with no problem. But ""Matrix to Array"" can only be run by its own class. Should this example be updated as well? e.g. replace both examples of; https://github.com/psi4/psi4/blob/master/psi4/driver/p4util/numpy_helper.py#L99 with:. ```; >>> data = np.random.rand(20,1); >>> vector = psi4.core.Matrix.from_array(data); ```; My concern is that the example would not be calling the function directly. What would be the best way to proceed?. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2089:1057,Test,Tests,1057,https://psicode.org,https://github.com/psi4/psi4/pull/2089,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; Addresses #1362 . This PR will modify the ShellPair struct used throughout the ERI code. This object is an intermediate in integral calculations that describes the overlap between two basis set shells. Each shell pair is composed of gaussian primitives pairs. Many of these primitive pairs don't make a significant contribution to the integral calculations and can be screened via the overlap term. This PR will also modernize the ShellPair object by replacing C++ arrays with `std::vector` and remove explicit memory-related operations. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Functional `std::vector` based ShellPair; - [x] Primitive Screening in new ShellPair; - [x] Remove old ShellPair struct. ## Questions; - [ ] What should we use for the overlap threshold? It's currently set at ~~10e-10~~ 10e-12. This doesn't affect the SCF energy in the handful of molecules I've tested. I may have to investigate other codes. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All ~~or relevant fraction of full~~ tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1411:948,test,tested,948,https://psicode.org,https://github.com/psi4/psi4/pull/1411,4,"['Test', 'test']","['Tests', 'tested', 'tests']"
Testability,"## Description; Addresses #1431 . ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Changes ORBSYM (the symmetry of each orbital) from Psi4's internal convention of ordering irreps to the traditional FCIDUMP ordering; - [x] Adds ISYM (the symmetry of the overall wavefunction); - [x] Updates the `fcidump` test to match new ordering. ## Questions; - [x] Does this change in convention break anything in Psi4? (Or anything that uses Psi4?); - [x] Since I altered the tests to match the output, how to verify correctness of this change?. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1453:354,test,test,354,https://psicode.org,https://github.com/psi4/psi4/pull/1453,4,['test'],"['test', 'tests']"
Testability,"## Description; Addresses #1724 by telling QCEngine to parent the scratch of dftd3 and mp2d into `$PSI_SCRATCH`. Contrary to what I said in that issue, the dftd3 parameters are written to local working dir (that is, scratch), not to $HOME. There's one other qcng call. It's `qcdb.Molecule.run_dftd3`. I really don't want to be calling `core` there, and it only runs in tests, so leaving that for now. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1725:369,test,tests,369,https://psicode.org,https://github.com/psi4/psi4/pull/1725,1,['test'],['tests']
Testability,"## Description; Addresses #885 by refactoring N-Body driver to three newly independent functions, driven by the existing `nbody_gufunc()`:; - `build_nbody_compute_list()`: Builds list of all N-body computations to be performed; - `compute_nbody_components()`: Performs given N-body computation(s), could be exploited as pleasantly parallel; - `assemble_nbody_components()`: Stitches components back together into _bona fide_ N-body energies (currently standard behavior of N-body driver). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - Opportunity for ""pleasantly parallel"" N-body computations; * **User-Facing for Release Notes**; - UI to N-Body driver unchanged; - Standard N-body calls, e.g., `energy(..., bsse_type='cp')` retain current functionality via `nbody_gufunc()`. ## Questions; - [x] Docstring styleguide: For the new functions, should the docstrings be in NumPy format or should they look more like the docstring in `nbody_gufunc()` so that sphinxman can scrape them for the manual?. ## Checklist; - [x] Tests added for any new features (existing tests sufficient); - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/975:1082,Test,Tests,1082,https://psicode.org,https://github.com/psi4/psi4/pull/975,4,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; Addresses (TODO: PAO slices) from original DLPNO-MP2 PR (#2093), reducing the scaling and storage costs of `Qia` integrals in DLPNO-MP2 from quadratic to linear. Request review from @zachglick before merge. ## Dev notes & details. ## Questions. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2851:281,Test,Tests,281,https://psicode.org,https://github.com/psi4/psi4/pull/2851,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; Addresses a linker warning when building on OSX.; Original change in 703c8a07b238249134424fd938374eae01d8c5af.; related: https://stackoverflow.com/questions/9894961/strange-warnings-from-the-linker-ld. example of the warning:; ```; ld: warning: direct access in function '__GLOBAL__sub_I_blas_diis.cc' from file 'psi4/psimrcc/libpsimrcc.a(blas_diis.cc.o)' to global weak symbol '__ZNSt6vectorISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ESaIS7_EED1Ev' from file 'CMakeFiles/core.dir/create_new_plugin.cc.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.; ```. ## Checklist; - [x] quick tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2129:734,test,tests,734,https://psicode.org,https://github.com/psi4/psi4/pull/2129,1,['test'],['tests']
Testability,## Description; Addresses issue #2379. IBOLocalizer is a MO localizer that exists in the FISAPT branch. Moving it to libmints cleans up the code. ## Checklist; - [x] All fsapt tests run; - [x] FSAPT tests passing; - [x] FSAPT-D tests passing. ## Status; - [x] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2385:176,test,tests,176,https://psicode.org,https://github.com/psi4/psi4/pull/2385,3,['test'],['tests']
Testability,"## Description; Addresses issues highlighted in #1600:; - energies and radii are now sorted based on radius of the diatomic; - initial guess for `r_e` is now the point of minimum energy; - check for number of points around minimum: if fewer than three on either side, print out a warning. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Addresses #1600 . ## Questions; - [ ] Handling warnings? Do we need a special tag?. ## Checklist; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1601:525,test,tests,525,https://psicode.org,https://github.com/psi4/psi4/pull/1601,2,['test'],['tests']
Testability,"## Description; Adds ECP capabilities by interfacing the integrals written @robashaw. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] ECP SCF energies.; - [x] ECP gradients by finite differences in Python.; - [x] Test case(s) and documentation.; - [x] Make sure frozen core code doesn't add contributions from ECP bearing atoms.; - [x] Add / document more basis sets, and add ECP info to existing Def2 series (w/help from @loriab). * **User-Facing for Release Notes**; - Effective Core Potentials available for SCF energies and gradients, as well as post-SCF energies.; - Def2 family of basis sets available for all atoms supported by those basis sets. Followup projects include:; - Add fully analytic when derivative integrals are available.; - Add CPHF terms and consolidate the OE derivatives from scfgrad and mp2grad.; - Try to clean up Python/C++ parsing and processing of basis sets. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/681:280,Test,Test,280,https://psicode.org,https://github.com/psi4/psi4/pull/681,1,['Test'],['Test']
Testability,"## Description; Adds Goerigk's D3 versions of B97M-V, wB97M-V, wB97X-V; https://pubs.acs.org/doi/10.1021/acs.jctc.8b00842. Absolute and relative energies added from L. Georigk. S22 MADs in SI are also reproduced. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] fixes #1188 ; - [x] B97M-D3(BJ), wB97M-D3(BJ); - [x] wB97X-D3(BJ) (of wB97X-V origin); - [x] revTPSS-NL parameters from Kruse,Banas,Sponer (JCTC 'just accepted'); - [x] moves rest of the post-scf NL logic to python. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1320:510,log,logic,510,https://psicode.org,https://github.com/psi4/psi4/pull/1320,4,"['Test', 'log', 'test']","['Tests', 'logic', 'tests']"
Testability,"## Description; Adds Python interfaces and code to semicanonicalize MCSCF orbitals. ## Todos; * **Developer**; - [x] Tested to make sure resulting orbitals diagonalize docc, actv, and virt blocks of average Fock matrix. ## Questions; - [x] By default MCSCF orbitals are semicanonicalized, unless user requests natural orbitals. This seems the most sensible choice, OK with other devs?. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/722:117,Test,Tested,117,https://psicode.org,https://github.com/psi4/psi4/pull/722,1,['Test'],['Tested']
Testability,"## Description; Adds STO-6G, uses same jkfit/ri bases as STO-3G. . ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [X] Adds STO-6G to list of basis sets. ## Questions; - [ ] Is a test needed?. ## Status; - [X] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1853:225,test,test,225,https://psicode.org,https://github.com/psi4/psi4/pull/1853,1,['test'],['test']
Testability,## Description; Adds a basic memory check for the construction of the `Qso` DF Tensor.; This is e.g. needed for large (~1k bfs) (FNO)-DF-CC calculations where the tensor construction may become the main memory bottleneck. Closes #1372 . ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2382:291,test,tests,291,https://psicode.org,https://github.com/psi4/psi4/pull/2382,2,['test'],['tests']
Testability,## Description; Adds a constructor to `Wavefunction` taking a reference wavefunction as argument. The body of the CTOR performs:; ```; shallow_copy(reference_wavefunction);; set_reference_wavefunction(reference_wavefunction);; ```; which seemed to be otherwise copy-pasted in correlated wavefunction CTORs. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Add CTOR from `SharedWavefunction` in `Wavefunction` class ; - [x] Rework CTOR in `CIWavefunction` to use the new CTOR in the base class.; - [x] Mark one-parameter CTOR for `CIWavefunction` as `explicit`; - [x] Use delegating CTOR for one-parameter CTOR of `CIWavefunction`. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1277:700,Test,Tests,700,https://psicode.org,https://github.com/psi4/psi4/pull/1277,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; Adds a few classes to the PSI_API list so one of my plugins will run. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] plugins can access DFJK, PKJK, VBase, and BasisFunctions classes. ## Checklist; - [x] passes smoke, quicktests subsets of tests. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/981:323,test,tests,323,https://psicode.org,https://github.com/psi4/psi4/pull/981,1,['test'],['tests']
Testability,"## Description; Adds a few functionals (SCAN0, revSCAN0, SCAN, revSCAN, BMK, revM06-L).; ~Enables `dft_bench_i*` tests for SCAN, SCAN0, revPBE, SOGGA, SOGGA11, MN12-SX, MGGA_MS2h, MN12-L, BMK, N12, MGGA_MVS, PKZB, MN15-L, PBE50, MGGA_MVSh, SOGGA11-X, M06-L, N12-SX, PBEOP, MPW1LYP and GAM.~; Enables all reference values in `dft_bench_i*` tests, now sorted alphabetically. Functionals not present in Psi4 are automatically ~marked with `xfail`~ skipped - this currently includes B3TLAP, BP86VWN, LRC-BOP, PBEsol, t-HCTH, t-HCTHh, wM05-D and wM06-D3, in addition to wB97X-D3 which was already marked `xfail`. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] adds SCAN and SCAN0; - [ ] tests for revSCAN, revSCAN0, revM06-L are missing - if anyone has access to these in other codes, I'd appreciate reference values!. ## Checklist; - [x] Tests added for functionals, where available; - [x] `dft_bench_interaction` and `dft_bench_ionization` pass. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1597:113,test,tests,113,https://psicode.org,https://github.com/psi4/psi4/pull/1597,4,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; Adds a generalized Davidson solver to solvers.py. Issue #886. @dgasmith @amjames . ## Todos; * **Developer Interest**; - [x] General Davidson solver in python, takes an arbitrary number of roots, the convergence tolerance and maximum number of guess vectors. ## Questions; - [ ] Should the solver do all operations with psi4.core.Matrix functions? Currently, I’m using a QR decomposition in numpy to orthogonalize the added guess vectors with respect to the previous guess vectors. - [ ] I also need to change the code to handle a list of psi4.core.Matrix objects. Can I assume that this would be a list of guess vectors, with their second dimension being 1?. - [ ] Since this is a general solver, should I be worrying about irreps?. ## Checklist; - [ ] Currently takes in and returns numpy arrays, needs to take in and return a list of Psi4.core.Matrix objects; - [ ] May implement RHF stability analysis as a test case. ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1080:927,test,test,927,https://psicode.org,https://github.com/psi4/psi4/pull/1080,1,['test'],['test']
Testability,"## Description; Adds a helper functions to aid in options parsing from a Python input. For example currently one must do:. ```python; psi4.core.set_global_option(""SCF_TYPE"", ""DF""); psi4.core.set_global_option(""BASIS"", ""6-31G""); ...; ```. Through the new helper you can set options by:; ```python; psi4.set_options({""SCF_TYPE"": ""DF"",; ""BASIS"": ""6-31G""}); ```. The question comes into play of what about local options:. Scheme 1:; ```python; psi4.set_module_options(""SCF"", {""SCF_TYPE"": ""DF"", ...}); ```; or; ```python; psi4.set_module_options({""SCF"", {""SCF_TYPE"": ""DF"", ...},; ""DFMP2"", {""MP2_TYPE"": ""DF"", ...}}); ```. Scheme 2:; ```python; psi4.set_options([[""SCF_TYPE"", ""DF""], # 2 parameters - global; [""SCF"", ""SCF_TYPE"", ""DF""]]) # 3 parameters - local; ```. Scheme 3:; ```python; psi4.core.set_local_option(""SCF"", ""SCF_TYPE"", ""DF""); ```. Scheme 3 is the current setup where we leave local options alone as they are not all that common. . From writing quite a bit of Python-based Psi4 this is quite annoying and *something* needs to be done with globals at the very least. Hopefully we can figure out a logical local scheme as well. . As a note we are looking into ways to override global options. For example, the following could be a scheme that would accomplish this:. ```python; mol = psi4.geometry(""He""); opt = {""SCF_TYPE"": ""DF""}; psi4.energy('SCF', molecule=mol, options=opt); ```. Thoughts on any of the choices?. ## Questions; - [x] Decision on global options input; - [x] Decision on local options input. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/511:1102,log,logical,1102,https://psicode.org,https://github.com/psi4/psi4/pull/511,1,['log'],['logical']
Testability,"## Description; Adds ability for psi4.set_memory() to take unit-containing string as an argument, so that; `psi4.set_memory('30 GB')` behaves as would be expected. ## Todos; * **User API Changes**; - `int`, `float`, and `str` argument types supported; - `int` and `float` type arguments taken literally as number of bytes of memory to be set; - `str` type arguments must have units attached, e.g., `'20 mb'`, and are case-insensitive; - Added return of the amount of memory set; - renamed underlying fn to `psi4.core.set_memory_bytes(); - Arranged for inputparser to use the same psi4.set_memory() as psiapi, so now kib/mib/gib/tib avail. in input; - Correct the Psi4 and SCF headers which were computing MB and labeling MiB; - Add and test some bad examples of mem setting; - Add a minimum memory (250 MiB), adjust the default mem to 500 MiB. ## Questions; - [x] Currently, arguments of type `str` **MUST** have units. Should we allow users to input unitless numbers as `str`, to be taken literally? Or, if they wish to do that, should they just input as `int` or `float`? Consensus is, No, string args must have unit. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/641:736,test,test,736,https://psicode.org,https://github.com/psi4/psi4/pull/641,1,['test'],['test']
Testability,"## Description; Adds ability to call Axilrod-Teller-Muto (ATM) 3-body dispersion correction from Grimme's DFTD3. Fixes #1407 . ## Todos; - [x] Callable ATM correction from DFTD3 using `<func-name>-atmgr`; - [x] Moves all the dftd3 interface stuff out of psi and now calls qcengine MolSSI/QCEngine#46; - [x] Adds mp2d energies, also through qcengine. ## Questions; - [x] I've added QCEngine as if it were a required dependency. This is debatable, but there'll be lots of things we'll want to run this way, possibly efp/efp, geometric, pyoptking, etc. Let's debate. ## Notices; - For this month as things move quickly, I'm not copying (light py) packages over from conda-forge to psi4 channels. You'll have to `-c psi4/label/dev -c conda-forge` during `conda install` at times. (drat, there's a libxc on c-f and old qcel on psi4, which means that there's not a good channel ordering ...). ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1491:907,Test,Tests,907,https://psicode.org,https://github.com/psi4/psi4/pull/1491,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; Adds an initial implementation of the E(30)exch-ind SAPT correction without the single exchange (S^2) approximation, introduced in https://doi.org/10.1063/5.0035050. Original Psi4NumPy implementation by Jonathan Waldrop (@jwaldrop107), ported to C++ by Konrad Patkowski. . The resulting numbers for a bunch of tests match the SI of the above paper and the calculation takes a tiny fraction of the total SAPT2+3 time. E(30)exch-ind,resp is approximated by scaling unrelaxed E(30)exch-ind in the same way as before and is also printed. ## Usage; The nonapproximated E(30)exch-ind and E(30)exch-ind,resp numbers will be calculated by `energy('sapt2+3')` if `do_ind30_exch_sinf` is set to `True`. . ## Technical Questions and Unresolved Issues; - [x] There's certainly room for code cleanup.; - [x] I think `libsapt_solver` is the most logical home for this code and `energy('sapt2+3')` its most logical invocation - after all, this correction forms a part of SAPT2+3 only, not the lower SAPT levels. The E(30)ind correction needs to be calculated beforehand, both for subtracting its value from the total (ind+ex-ind) calculated here, and for generating the third-order induction amplitudes that are reused here. However, unlike most of the stuff in `libsapt_solver`, the code is AO-based and the two-electron integrals enter only via generalized J/K matrices. Therefore, I had to export some additional AO quantities in `libsapt_solver/sapt.h` and I don't know if I did this in an optimal way.; - [x] Note to self: frozen core still needs to be checked. ## Design (Big-Picture) Questions - input from @CDSherrill @dgasmith @loriab and others will be highly beneficial!; - [ ] The three new(ish) beyond-S^2 corrections, E(20)exch-ind, E(20)exch-disp, and E(30)exch-ind cannot be currently calculated by a single SAPT call: the first two require `energy('sapt(dft)')` and the last one `energy('sapt2+3')`. That's quite unfortunate and we need a better workflow, possibly by making the non-",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2314:326,test,tests,326,https://psicode.org,https://github.com/psi4/psi4/pull/2314,3,"['log', 'test']","['logical', 'tests']"
Testability,## Description; Adds analytic UHF hessians. ## Todos; Notable points that this PR has either accomplished or will accomplish. - [X] UHF response terms (conventional algorithm); - [X] UHF response terms (DF algorithm); - [X] UHF JK derivs; - [X] Add tests . ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/842:249,test,tests,249,https://psicode.org,https://github.com/psi4/psi4/pull/842,1,['test'],['tests']
Testability,"## Description; Adds analytic dipole derivatives for RHF, allowing IR intensities to be computed; @loriab, @dsirianni and crew are working on the finite difference version for cases like DF-MP2, where finite differences of gradients are used for frequencies. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Adds dipole derivative code, and a test to verify that they match the CCQC programming project values. ## Questions; - [ ] Does anybody object to wavefunction holding these?; - [ ] Does anybody object to the various `set_` methods of wavefunction taking SharedMatrix by value, not by reference?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1382:392,test,test,392,https://psicode.org,https://github.com/psi4/psi4/pull/1382,4,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,"## Description; Adds capabilities for magnetic dipole derivative integrals and exports them to Python side for use in calculating VCD. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Adds origin dependence to electric dipole derivatives in `compute_pair_deriv1()` function in `psi4/src/psi4/libmints/dipole.cc`; - [x] Implements `compute_pair_deriv1()` function in `psi4/src/psi4/libmints/angularmomentum.cc`; - [x] Adds `.def(""ao_ang_mom_deriv1"")` and `.def(""mo_ang_mom_deriv1"")` binding to `psi4/src/export_mints.cc`; - [x] Adds `ao_ang_mom_deriv1()` and `mo_ang_mom_deriv1()` definition/declaration to `psi4/src/psi4/libmints/mintshelper.cc(h)`; - [x] Adds `ao_ang_mom_deriv1_helper()` helper function to `psi4/src/psi4/libmints/mintshelper.cc(h)`. ## Questions; - [x] Ideas on how to test these once implemented? Considering using finite difference to check my implementation rather than comparing to another code. Thoughts?. ## Checklist; - [ ] Add test in `/tests/pytests/test_mints.py`; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1852:838,test,test,838,https://psicode.org,https://github.com/psi4/psi4/pull/1852,5,['test'],"['test', 'tests']"
Testability,"## Description; Adds capabilities for overlap half-derivative integrals and exports them to Python side for use in calculating VCD. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Adds `.def(""ao_overlap_half_deriv1"")` and `.def(""mo_overlap_half_deriv1"")` binding to `psi4/src/export_mints.cc`; - [x] Adds `ao_overlap_half_deriv1()` and `mo_overlap_half_deriv1()` definition/declaration to `psi4/src/psi4/libmints/mintshelper.cc(h)`; - [x] Adds `ao_overlap_half_deriv1_helper()` helper function to `psi4/src/psi4/libmints/mintshelper.cc(h)`. ## Questions; - None. ## Checklist; - [x] Add test in `/tests/pytests/test_mints.py`; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1895:637,test,test,637,https://psicode.org,https://github.com/psi4/psi4/pull/1895,4,['test'],"['test', 'tests']"
Testability,## Description; Adds contributing excitations to tdscf output for non-C1 symmetry. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2605:137,test,tests,137,https://psicode.org,https://github.com/psi4/psi4/pull/2605,2,['test'],['tests']
Testability,"## Description; Adds empirical dispersion capabilities to F-/ISAPT, while maintaining functional group partitioning capabilities. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Add hooks in driver/QCEngine; - [ ] Add tests. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1786:268,test,tests,268,https://psicode.org,https://github.com/psi4/psi4/pull/1786,4,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; Adds external potentials (PCM, PE) to the CP-SCF solver. Design and majority of the work done by @maxscheurer. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] static polarizabilties with PCM + PE (no UHF in response_solver); - [x] TD-SCF excitation energies with PCM + PE (RHF/UHF); - [x] python callback function to easily add external potentials at the python level; - [x] `print 2` shows which ext. pot. is added. ## Checklist; - [x] docs update; - [x] new test: RHF static dipole polarizabilities with PCM + PE; - [x] new test: RHF TD-SCF excitation energies with PCM + PE; - [x] new test: UHF TD-SCF excitation energies with PCM + PE (regression-only); - [x] `ctest -L pcm/cppe/quick` pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2006:535,test,test,535,https://psicode.org,https://github.com/psi4/psi4/pull/2006,3,['test'],['test']
Testability,## Description; Adds hierarchical timers to FISAPT for code profiling purposes. Timing info for various F-SAPT terms and HF embedding printed to `timer.dat`. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Enables term-wise profiling of F-ISAPT procedure. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1029:343,Test,Tests,343,https://psicode.org,https://github.com/psi4/psi4/pull/1029,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; Adds in-core handling of range-separated functionals to MemDFJK. ![dfh_wK](https://user-images.githubusercontent.com/28900775/68413784-ecd19a80-015c-11ea-9f34-95bbda23f787.png). The blue curve shows in-core DiskDFJK time. The orange curve shows the time taken by in-core MemDFJK wK which constitutes this pull request's addition to the code. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] in core omega integrals for MemDFJK in DFHelper; - [x] improves runtime of range separated DFT calculations; - [ ] out of core omega integrals for MemDFJK. ## Questions; - [ ] Should we have a way to default back to Disk_DF if user asks for Mem_DF but does not give enough memory? Currently there is a psiexcption. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1749:791,Test,Tests,791,https://psicode.org,https://github.com/psi4/psi4/pull/1749,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; Adds libint2 one electron integrals. A few integrals still use the hand-written code for now, but they will be addressed in subsequent PRs, as linked below.; ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Add libint2 one electron integrals.; - [x] Convert all double shell loops to use Onebody object's shell pair list instead.; - [x] Convert multipole potential ints to use L2 engines or McMurchie-Davidson recursions (#2414); - [x] Convert X2C ints to use L2 engines.; - [x] Convert AngularMomentum ints to use L2 engines. (#2414); - [x] Delete unused hand written code for recursions and integrals. (#2414); - [x] Document changes; - [x] Build Windows Libint2 Conda package. ## New Features for Release Notes; - Screening of one electron integrals to improve efficiency of PCM, EFP, and embedding methods; - Parallelized PCM integral computations, which are typically rate-limiting for implicit solvent SCF. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2388:1007,Test,Tests,1007,https://psicode.org,https://github.com/psi4/psi4/pull/2388,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; Adds minao Br. Update CheMPS2 upstream. Remove Fort checking. Whiteli……st Cfour parallelism variable. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Remove copied-in CMake CheckFortranCompilerFlag module now that min cmake is 3.3 which always provides it. Also echo-target, which was more of a devel utility.; - [x] Fixed the suggest-near-option-match for py3.; - [x] Whitelist CFOUR_NUM_CORES envvar for Cfour, closing psi4/psi4#661, fix `psi4 -s` not handling relpaths property with Cfour.; * **User-Facing for Release Notes**; - [x] Pull CheMPS2 from upstream v1.8.3-12, now that the lapack & hdf5 cmake target have been included upstream.; - [x] From Rob, add Br to cc-pvtz-minao.gbs; - [x] Adjusted the molecule name parsing in inputparser. Now allow practically any name through the `molecule ... {...}`, then test if valid Py object name, printing error msg if not. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/672:900,test,test,900,https://psicode.org,https://github.com/psi4/psi4/pull/672,1,['test'],['test']
Testability,"## Description; Adds missing CPHF terms, so that DF-MP2 gradients are correct when an external potential is present. Fixes #618. ## Todos. * **Developer Interest**; - [x] Fixed DF-MP2 gradient code.; - [x] Added test case for DF-MP2 QM/MM gradients (extern2, not currently in quicktests, but runs in 12 seconds).; * **User-Facing for Release Notes**; - [x] Fixed bug so that QM/MM gradients are correct for DF-MP2. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/622:212,test,test,212,https://psicode.org,https://github.com/psi4/psi4/pull/622,1,['test'],['test']
Testability,"## Description; Adds new density functional approximations and Grimme group composite methods. closes #2121 #1898 . ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] new DFA: `r2SCAN0`, `r2SCANh`, `r2SCAN50` (plus `-D4` versions); - [x] new DFA composite methods: `r2SCAN-3C`, `B97-3C` ; - [x] new basis sets for the composite methods: `def2-mTZVP`, `def2-mTZVPP`. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - `B97-3c` requires `s-dftd3` and `mctc-gcp`; - `r2SCAN-3c` requires `mctc-gcp` and `dftd4 3.5.0`; - `[dispersion]['params']` functional dictionary can be incomplete. Defaults will be added automatically.; - allow parameter tweaking of pre-defined LibXC functionals.; - keep compatibility with LibXC 5 for windows; - requires `qcengine` update https://github.com/MolSSI/QCEngine/pull/393#pullrequestreview-123770667 ; - and `dftd4-python` with https://github.com/dftd4/dftd4/pull/184; - needs Libxc v6.0; - adds wb97x-3c closes #2850. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2842:1277,Test,Tests,1277,https://psicode.org,https://github.com/psi4/psi4/pull/2842,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; Adds new optking options to `read_options.cc`. Adds soon to be added `OPT_COORDINATES CUSTOM` option. ## User API & Changelog headlines; - [x] Default TS search algorithm is now RS_I_RFO. ## Checklist; - [x] opt16 now by default tests with RS_I_RFO (old algorithm still tested by optking's test suite); - [x] `-L opt`. ## Status; - [x] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3204:245,test,tests,245,https://psicode.org,https://github.com/psi4/psi4/pull/3204,3,['test'],"['test', 'tested', 'tests']"
Testability,## Description; Adds reference files for the FCHK pytest.; Changing geometry of test molecules to avoid degenerate orbitals. ## Checklist; - [x] fchk pytest works on a different machine. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2047:80,test,test,80,https://psicode.org,https://github.com/psi4/psi4/pull/2047,1,['test'],['test']
Testability,"## Description; Adds regression tests which ensure consistency between different `qc_module`s for `cc_type`= `conv`. Should finish off #714?. ## Questions; - [x] What lists should this test be on? Currently listed as `psi;quicktests;cc` because I copied and minimally modified from `CMakeLists.txt` in the mp2-module test. ; - [x] Managed methods [table](http://psicode.org/psi4manual/master/notes_c.html#table-managedmethods) lists DETCI as a possible choice for conventional CCSD with RHF/ROHF reference, but I errors from the driver trying these combinations.; ```python; set qc_module DETCI; energy('ccsd'). RuntimeError:; FatalError: DETCI: The CC module is not currently enabled. ; ```; ## TODO; - [x] ~Add ROHF/RHF CCSD checks against DETCI if they apply (pending feedback about 2nd point above)~ Remove indications that DETCI can do CCSD from the table; - [x] Add checks between fnocc and dfocc; - [x] Add non-frozen-core tests. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/966:32,test,tests,32,https://psicode.org,https://github.com/psi4/psi4/pull/966,4,['test'],"['test', 'tests']"
Testability,## Description; Adds spin-flip SAPT to Psi4. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **User-Facing for Release Notes**; - [x] Adds Spin-Flip SAPT for computing all multiplet interactions between two high-spin monomers. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1027:284,Test,Tests,284,https://psicode.org,https://github.com/psi4/psi4/pull/1027,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; Adds the DLPNO-MP2 method to Psi4. Callable as `energy('dlpno-mp2')`. DLPNO-MP2 (or domain-based local pair natural orbital MP2) is the method described in the following paper:. [Pinski, Peter, et al. ""Sparse maps—A systematic infrastructure for reduced-scaling electronic structure methods. I. An efficient and simple linear scaling local MP2 method that uses an intermediate basis of pair natural orbitals."" The Journal of chemical physics 143.3 (2015): 034108](https://doi.org/10.1063/1.4926879); ; DLPNO-MP2 recovers about 99.9% of the DF-MP2 correlation energy, and scales much better in both time and memory. The following graph compares this implementation with Psi4's DF-MP2 code on linear alkanes (18 core i9-10980XE, 200 GB, cc-pVTZ basis):. ![alkanes](https://user-images.githubusercontent.com/16376046/105784584-b38e7180-5f3e-11eb-97ce-9e5d05896d82.png). ## Todos; - [x] Implement DLPNO-MP2; - [x] Add tests; - [x] Add docs. ## Questions; - [x] Are there any other ways that this calculation should be routed? In particular, should `DLPNO` be an option for the `MP2_TYPE` keyword? Should DLPNO be an option for `QC_MODULE`?; - [x] Related to the previous question, suppose a user wants to run a SCS DLPNO-MP2 calculation. How should that be parsed? Not a big deal if that isn't supported.; - [x] How best to handle DLPNO options? There are many thresholds associated with this method, but the error and cost of the method are primarily controlled by just two of them: `T_CUT_DO` and `T_CUT_PNO`. Should the other options be user-facing at all? For now, I've marked them expert. Opinions from anyone with experience running local correlation methods are welcome here. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2093:930,test,tests,930,https://psicode.org,https://github.com/psi4/psi4/pull/2093,4,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; Adds the ability to consume and produce MolSSI QC JSON Schema. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] A prototype MolSSI QC Schema has been implemented (http://molssi-qc-schema.readthedocs.io/en/latest/index.html). ## Questions; - [x] How much validation do we want?; - [x] A full test suite should like come from the schema itself?; - [x] How we will we handle extra psi vars? Is the current setup sufficient. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/979:373,test,test,373,https://psicode.org,https://github.com/psi4/psi4/pull/979,1,['test'],['test']
Testability,"## Description; Adds the nZaPa basis sets that converge faster for SCF and correlation energies than many others. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] nZaPa-NR basis sets for n=2,3,4,5,6,7; - [x] RI and JKFIT definitions for nZaPa and cc-pVnZ-F12; - [x] `[23]ZaPa-NR` bracket detection for CBS. ## Checklist; - [x] Tests added for any new features; - [x] relevant fraction of full tests run. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1346:376,Test,Tests,376,https://psicode.org,https://github.com/psi4/psi4/pull/1346,2,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; Adds the new QCSchema Wavefunction properties to the Psi4 schema runner. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Creates a schema BasisSet object; - [ ] ECP Basis quantities; - [x] Maps Psi4 arrays to schema `return_result` quantities; - [x] Reorders Psi4 arrays to CCA ordering for both spherical and cartesian basis functions.; - [ ] Provides support for post-SCF `return_result`s; - [x] Verify that spherical/cartesian orders are correct. Not entirely sure how we can correctly map post-SCF quantities. It becomes difficult to understand when new orbitals/densities are created. Thinking through a few options here, but if anyone has suggestions let me know!. Also is there a _good_ test for ensuring basis orders are correct? It becomes difficult to correctly test D orbital ordering as there is usually symmetry there. I *think* we can fully test P's with ammonia. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1728:760,test,test,760,https://psicode.org,https://github.com/psi4/psi4/pull/1728,3,['test'],['test']
Testability,## Description; Adds the option to solve the potential integrals for point charges interacting with the density and the related Vpcm operator numerically.; -> anthracene HF/6-31+G*: factor 3 faster and parallel. (Makes PCM no longer the bottleneck). delta E(total)=0.11 mEh. _This is work in progress and messy in some places. But general comments welcome. Specific benchmark requests are encouraged._. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] spherical and cartesian basis; - [ ] Feature2. ## Questions; - [ ] where should this live? ; - [ ] . ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2076:366,benchmark,benchmark,366,https://psicode.org,https://github.com/psi4/psi4/pull/2076,4,"['Test', 'benchmark', 'test']","['Tests', 'benchmark', 'tests']"
Testability,"## Description; Adds the tensors generated from the CC response code to the reference wave function, eventually to be included in the JSON output for a [QCEng](https://github.com/molssi/qcengine) run. Also patched CC-level dipoles and (static) quadrupoles in `proc.py` to be consistent with other naming conventions, allowing them to pass through `schema_wrapper.py`. This means that all (ground state, static) CC one-electron properties should follow the naming convention used on wfn. Old excited state (EOM) and dynamic property variables remain unchanged. . Updates to the schema wrapper to allow the other tensors though are coming in a separate PR. . ## Todos; - [x] Electric dipole polarizability tensor; - [x] Optical rotation (electric-dipole/magnetic-dipole) tensor; - [x] Electric dipole-quadrupole polarizability tensor (stored as three 3x3 components) (calculated through `roa.cc`); - [x] Patch CC dipole and (static) quadrupole QCVars; - [x] New pytest for all new QCVars; - [x] Update `cc46` to adhere to new ground state `psi4.core.variables()` names. ## Questions; - [x] `tests/pytests/test_qcschema.py` doesn't include any properties (yet). Are the existing returns of dipoles / quadrupoles in `schema_wrapper` tested anywhere? @loriab . ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests) `ctest -L cc` comes clean.; - [x] New pytest `test_ccresponse.py` comes clean. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2022:1089,test,tests,1089,https://psicode.org,https://github.com/psi4/psi4/pull/2022,4,['test'],"['tested', 'tests']"
Testability,## Description; Adds the tests that I could have added in #1695 . ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1701:25,test,tests,25,https://psicode.org,https://github.com/psi4/psi4/pull/1701,4,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; Adds threading to the MintsHelper object. Notably we no longer build SO integrals directly in the SO basis, but build AO and transform AO->MO. This appears to be about as efficient as the former when threading, we can revisit this if the potential integrals can be improved. Benchmark is a carbon chain in the cc-pvdz basis set, tuned to compute about a million basis functions per row. I am separating this out from #592 which will wait for further tests. ```; # Original - 1 thread; nbf ntrial ao_overlap ao_kinetic ao_potential so_overlap so_kinetic so_potential; 0 28 1275 0.002474 0.000240 0.000936 0.000253 0.000311 0.001072; 1 98 104 0.005268 0.002996 0.031417 0.002182 0.002873 0.031835; 2 168 35 0.007805 0.007087 0.149304 0.005561 0.007733 0.150582; 3 238 17 0.019714 0.014981 0.415791 0.010558 0.014752 0.418562; 4 308 10 0.029242 0.023728 0.890593 0.017159 0.023903 0.938164; 5 378 6 0.038581 0.034306 1.624236 0.023958 0.034886 1.637466; 6 448 4 0.058684 0.050234 2.687780 0.033669 0.048659 2.867169; 7 518 3 0.073995 0.067988 4.212363 0.043464 0.063137 4.170965. # New algorithm - 1 thread; nbf ntrial ao_overlap ao_kinetic ao_potential so_overlap so_kinetic so_potential; 0 28 1275 0.002221 0.000152 0.000583 0.002632 0.000274 0.000731; 1 98 104 0.004644 0.001872 0.016447 0.004653 0.002240 0.016920; 2 168 35 0.005474 0.004001 0.076230 0.006461 0.004780 0.078292; 3 238 17 0.007382 0.006899 0.210317 0.010013 0.008758 0.214130; 4 308 10 0.011478 0.011354 0.449083 0.015937 0.015050 0.452936; 5 378 6 0.017539 0.016836 0.817148 0.025508 0.022129 0.825095; 6 448 4 0.022457 0.023191 1.350382 0.028970 0.031135 1.363716; 7 518 3 0.029087 0.030661 2.079129 0.040195 0.042085 2.086033. # New algorithm - 6 threads; nbf ntrial ao_overlap ao_kinetic ao_potential so_overlap so_kinetic so_potential; 0 28 1275 0.001724 0.000046 0.001282 0.001815 0.000171 0.001468; 1 98 104 0.001922 0.000262 0.004997 0.002548 0.000852 0.005569; 2 168 35 0.002558 0.000697 0.019184 0.003850 0.0",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/635:291,Benchmark,Benchmark,291,https://psicode.org,https://github.com/psi4/psi4/pull/635,2,"['Benchmark', 'test']","['Benchmark', 'tests']"
Testability,"## Description; Adds threading to the MintsHelper object. Notably we no longer build SO integrals directly in the SO basis, but build AO and transform AO->MO. This appears to be about as efficient as the former when threading, we can revisit this if the potential integrals can be improved. Benchmark is a carbon chain in the cc-pvdz basis set, tuned to compute about a million basis functions per row. ```; # Original - 1 thread; nbf ntrial ao_overlap ao_kinetic ao_potential so_overlap so_kinetic so_potential; 0 28 1275 0.002474 0.000240 0.000936 0.000253 0.000311 0.001072; 1 98 104 0.005268 0.002996 0.031417 0.002182 0.002873 0.031835; 2 168 35 0.007805 0.007087 0.149304 0.005561 0.007733 0.150582; 3 238 17 0.019714 0.014981 0.415791 0.010558 0.014752 0.418562; 4 308 10 0.029242 0.023728 0.890593 0.017159 0.023903 0.938164; 5 378 6 0.038581 0.034306 1.624236 0.023958 0.034886 1.637466; 6 448 4 0.058684 0.050234 2.687780 0.033669 0.048659 2.867169; 7 518 3 0.073995 0.067988 4.212363 0.043464 0.063137 4.170965. # New algorithm - 1 thread; nbf ntrial ao_overlap ao_kinetic ao_potential so_overlap so_kinetic so_potential; 0 28 1275 0.002221 0.000152 0.000583 0.002632 0.000274 0.000731; 1 98 104 0.004644 0.001872 0.016447 0.004653 0.002240 0.016920; 2 168 35 0.005474 0.004001 0.076230 0.006461 0.004780 0.078292; 3 238 17 0.007382 0.006899 0.210317 0.010013 0.008758 0.214130; 4 308 10 0.011478 0.011354 0.449083 0.015937 0.015050 0.452936; 5 378 6 0.017539 0.016836 0.817148 0.025508 0.022129 0.825095; 6 448 4 0.022457 0.023191 1.350382 0.028970 0.031135 1.363716; 7 518 3 0.029087 0.030661 2.079129 0.040195 0.042085 2.086033. # New algorithm - 6 threads; nbf ntrial ao_overlap ao_kinetic ao_potential so_overlap so_kinetic so_potential; 0 28 1275 0.001724 0.000046 0.001282 0.001815 0.000171 0.001468; 1 98 104 0.001922 0.000262 0.004997 0.002548 0.000852 0.005569; 2 168 35 0.002558 0.000697 0.019184 0.003850 0.001897 0.020388; 3 238 17 0.003629 0.001342 0.049260 0.005645 0.003470 ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/592:291,Benchmark,Benchmark,291,https://psicode.org,https://github.com/psi4/psi4/pull/592,1,['Benchmark'],['Benchmark']
Testability,## Description; Adds timers for SAPT(DFT) procedure to track bottle-necks for improving performance. Information printed into `timer.dat`. A few other minor modifications are also done (see below). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Added step-wise timers for SAPT(DFT).; - [x] Appended missing dimer SCF step for FISAPT timer.; - [x] Exported timer functions to python-side.; - [x] Fixed a few typos in SAPT(DFT) procedure `sapt_proc.py`.; - [x] Expanded output width for `timer.dat` to avoid overflowing. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge. ## Attachment; [timer_dat.txt](https://github.com/psi4/psi4/files/2203735/timer_dat.txt); Seems that github doesn't like .dat files so I renamed it.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1083:641,test,tests,641,https://psicode.org,https://github.com/psi4/psi4/pull/1083,2,['test'],['tests']
Testability,"## Description; All pieces of `ccdensity` related to transition densities have been migrated to use `Matrix` and `Slice` tech, for a net cut of nearly 1100 lines of code!. Don't let the large delta LoC fool you. It's the same tricks over and over and over... ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] `L`, `nabla` and `dipole` integrals within `ccdensity` changed to `Matrix`; - [x] Left and right transition densities (alpha and beta) changed to `Matrix` ; - [x] `scf_qt` eliminated from MOInfo; - [x] _Massive_ elimination of manual BLAS and indexing and LoC . ## Checklist; - [x] Tests still pass. Three cheers for the mega test pass on `cc`. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2751:781,Test,Tests,781,https://psicode.org,https://github.com/psi4/psi4/pull/2751,2,"['Test', 'test']","['Tests', 'test']"
Testability,"## Description; All the docs links fixes that don't involve restructuring the driver imports. . ## Todos; - [x] fix qcvar collection and referencing. envvar referencing.; - [x] add mechanism for renaming, retiring qcvars; - [x] there's an extension for using typing in sphinx autodoc now, so move typing from docstrings to signature.; - [x] been partially isort-ed. these are the harmless changes.; - [x] edited a few misc. narrative docs; - [x] extensive additions to qcvar glossary so everything's defined. feel free to edit; - [x] instead of registering each pytest file, let cmake install all pytest tests by glob; - [x] added kwargs and some docstring cleanup to exports; - [x] removed broken option and added alias to run_psi4. ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2164:604,test,tests,604,https://psicode.org,https://github.com/psi4/psi4/pull/2164,4,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; Allow Alhrichs (`def2-`), Jensen (`pcseg-`) and custom Dunning (`cc-[...]z`) families of basis sets into CBS expansion. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] `p4util.kwargs_lower()` no longer mangles floats to True or False; * **User-Facing for Release Notes**; - [x] CBS extrapolation possible with `def2-` bases; - [ ] CBS extrapolation possible with `roos-ano-` bases; - [x] CBS extrapolation possible with `pcseg-` bases; - [x] CBS extrapolation possible with custom `*-cc-pvxz-*` bases; - [x] SCF extrapolations of Truhlar and Kanton and Martin added ; - [x] custom alpha possible for `scf_xtpl_[...]_2` and `corl_xtpl_helgaker_2`; - [x] custom `corl_alpha` as well as `delta_alpha` parsing for eg. `MP2/[TQ] +D: CCSD(T)/[DT]`; - [ ] ~~handle fallbacks for light atoms in `[aug]-cc-pv[dtq]z-PP` bases using non-PP bases~~; - [x] tests for `def2-` extrapolation. ## Checklist; - [x] Tests added for any new features; - [x] All relevant tests run. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/963:927,test,tests,927,https://psicode.org,https://github.com/psi4/psi4/pull/963,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; Allow non-symmetric matrix <-> dpdfile2. The hard part of this PR was figuring out how to initialize a dpd object successfully. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] `Matrix::write_to_dpdfile2` now works on non-totally symmetric matrices; - [x] Several long-deprecated Matrix methods have been removed. They now live in the `linalg` namespace. . ## Checklist; - [x] New test passes. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2722:588,test,test,588,https://psicode.org,https://github.com/psi4/psi4/pull/2722,1,['test'],['test']
Testability,## Description; Allow psi4 to be compiled with C++17. Default compilation still uses C++11. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Ready for C++17. ## Checklist; - [x] All cc tests run. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1345:234,test,tests,234,https://psicode.org,https://github.com/psi4/psi4/pull/1345,1,['test'],['tests']
Testability,"## Description; Allow users to provide custom functionals using the new `dict_func` syntax. The following calls are now equivalent:; ```; energy(""PBE""); energy(""SCF"", dft_functional=""PBE""); energy(""SCF"", dft_functional={ ""name"": ""PBE"",; ""x_functionals"": { ""GGA_X_PBE"": {} },; ""c_functionals"": { ""GGA_C_PBE"": {} }, ; } ); ```. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] `dict_builder.build_superfunctional_from_dictionary()` now builds superfunctionals from dictionaries, not strings ; * **User-Facing for Release Notes**; - [x] allow users to supply DFT functionals using the new syntax directly. ## Checklist; - [x] Tests added for any new features - modified `dft_smoke`; if that's not appropriate let me know; - [x] original part of `dft_smoke` runs fine. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/986:689,Test,Tests,689,https://psicode.org,https://github.com/psi4/psi4/pull/986,1,['Test'],['Tests']
Testability,"## Description; Allows TDSCF code to be called from any SCF (HF,DFT) computation. . ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [X] Implement functions in proc.py; - [X] Add options handling; - [x] Add tests. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1885:252,test,tests,252,https://psicode.org,https://github.com/psi4/psi4/pull/1885,1,['test'],['tests']
Testability,## Description; Allows optking to take gradients from the nbody wrapper. Fix VMFC gradient and Hessian and CP total data. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Connect optking with nbody gradient.; - [x] Add VMFC gradient and Hessian.; - [x] Correct CP-corrected total data.; - [x] Fix a few bugs.; - [x] Add electrostatic embedding.; - [x] Add multi-level many-body expansion. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1042:475,Test,Tests,475,https://psicode.org,https://github.com/psi4/psi4/pull/1042,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; Alternative solution to problem at #1640 . ## Checklist; - [x] v2rdm compiles against this on Mac and runs a test. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1642:125,test,test,125,https://psicode.org,https://github.com/psi4/psi4/pull/1642,1,['test'],['test']
Testability,"## Description; Another in the tidy-and-document-and-rationalize the driver series. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] adds more `__all__`s and a few more docstrings; - [x] necessitates some explicit imports (e.g., `import math`) that it was odder that they _weren't_ needed before; - [x] first real change in function addressing hits sapt-dft-api and sapt-dft-lrc where now have to add `driver.`. this may not be the last change. those were definitely expert usage, though.; - [x] removes the circular import blocker!; - [x] needs #2615 rebased out. ## Checklist; - ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review ~(if you can ignore the cfour commit)~; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2617:640,Test,Tests,640,https://psicode.org,https://github.com/psi4/psi4/pull/2617,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; Apparently UKS Meta-GGA's have been wrong since the LibXC patch. I have fixed this error and get quite a nice agreement across our test set. I have changed the `dft1` test to cover these cases and be a bit more specific in what we are testing. I have also started on UKS VV10; however, I am not quite confident it is correct. The VV10 energy is certainly correct, but the gradient might not be scaled correctly. This is the last chance I have to look at it for several weeks so it will need to wait. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/897:147,test,test,147,https://psicode.org,https://github.com/psi4/psi4/pull/897,3,['test'],"['test', 'testing']"
Testability,"## Description; Apparently missed two tests when moving CI to a zero-indexing. A bit confused why there were not picked up by the ""ci"" tag, but oh well. Fixed now. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/551:38,test,tests,38,https://psicode.org,https://github.com/psi4/psi4/pull/551,1,['test'],['tests']
Testability,"## Description; Approve if you like tests that pass. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Fixed a test that https://github.com/psi4/psi4/pull/3138 broke; - [x] Explains a magic number in said test . ## Checklist; - [x] All tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3212:36,test,tests,36,https://psicode.org,https://github.com/psi4/psi4/pull/3212,4,['test'],"['test', 'tests']"
Testability,"## Description; As a preliminary PR to giving DMRG a wavefunction, this PR changes many function signatures in DMRG to either not take a wavefunction, use a const reference to a wavefunction when the wavefunction doesn't change, and use a const reference to a Matrix when the Matrix doesn't change. This PR is 100% cleanup and should probably be saved until 1.5. ## Checklist; - [x] `chemps2` tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge **squash**",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2257:393,test,tests,393,https://psicode.org,https://github.com/psi4/psi4/pull/2257,1,['test'],['tests']
Testability,"## Description; As a side effect of #961, all wavefunctions had to have a density-fitted basis set when doing any energy computations, even if not density-fitted. Any scripts calling `psi4.core.Wavefunction.build` would have to manually set the DF basis to zero. `psi4.core.Wavefunction.build` now automatically sets the DF basis to zero - one less upgrade problem for users to worry about. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] `psi4.core.Wavefunction.build` have zero DF basis by default. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1014:622,test,tests,622,https://psicode.org,https://github.com/psi4/psi4/pull/1014,2,['test'],['tests']
Testability,"## Description; As discussed, full circle — plugins are back in `tests/`. Also, removed old plugins that hadn't been maintained compilable. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] There was some dpd code deleted that possibly shouldn't fade out of memory, in case we ever want a dpd plugin again.; - [x] `ctest -L plug` works same as before.; * **User-Facing for Release Notes**. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/640:65,test,tests,65,https://psicode.org,https://github.com/psi4/psi4/pull/640,1,['test'],['tests']
Testability,"## Description; As documented in #859, an IRC performed on a tightly converged transition state would converge to the initial transition state. The obvious workaround showed non-deterministic optking steps, as documented in #860. Both bugs originate from neglecting the possibility of near-zero gradients and have been fixed. Also as documented in #860, there is still some non-deterministic behavior after the minimum has been found. As optking is going to be moved Python-side soon and this behavior is irrelevant for most users, I'll hold off from investigating that until we see if the Python-version has the problem. I have added a test case for tightly converged transition states, thanks to the oddly prescient #881. For the sake of other developers, I added a page on how to add test cases. ## Todos; Notable points that this PR has either accomplished or will accomplish. * **User-Facing for Release Notes**; - [x] Fixes a bug disabling IRCs for tightly converged transition states. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/882:637,test,test,637,https://psicode.org,https://github.com/psi4/psi4/pull/882,2,['test'],['test']
Testability,"## Description; As is says in the title.; I've added a quicktest for PE-ADC(1) such that we catch issues like this directly from now on... adcc 0.15.9 introduced a breaking change in the environment parameter handling, I've adapted the existing test accordingly. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2393:245,test,test,245,https://psicode.org,https://github.com/psi4/psi4/pull/2393,4,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,"## Description; As it says on the tin. ~**ONLY REVIEW SECOND COMMIT** Rebase req'd after PR No. 3 merged and before this merge.~. This is PR No. 4 in the mega-dfocc-remp series. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] REMP and OREMP added to dfocc along with 8 tests and stdsuite testing; - [x] general notations and eqn numbers from SB ported. ## Questions; - [x] @behnle the citation to which the eqn number comments refer you probably put in the bibliography, but it might be handy to have notated in the code. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2670:328,test,tests,328,https://psicode.org,https://github.com/psi4/psi4/pull/2670,5,"['Test', 'test']","['Tests', 'testing', 'tests']"
Testability,"## Description; As of qcengine 0.24, the keyword `local_options` is deprecated in favor of `task_config`. This PR updates the keywords in any remaining qcng calls (looks like main call in `task_base.py` was caught in a previous PR). ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Deprecated qcng keywords updated. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2755:561,test,tests,561,https://psicode.org,https://github.com/psi4/psi4/pull/2755,2,['test'],['tests']
Testability,"## Description; As of this PR, `cc` tests 1-33, 35-45, 52 are ported. Several tests have been deferred until after #2486. **This test is not marked ready for merge because I'm not happy with one of the psivar definitions: opinions wanted.**. We have ""CCSD QUADRUPOLE POLARIZABILITY TENSOR COMPONENT 0 @ 589NM"", ""CCSD QUADRUPOLE POLARIZABILITY TENSOR COMPONENT 1 @ 589NM"", and ""CCSD QUADRUPOLE POLARIZABILITY TENSOR COMPONENT 2 @ 589NM"". I _imagine_ we can combine these into a single array of dimension 3 x 3 x 3, just like we do with the octopole. Thoughts, @loriab @lothian?. ## Checklist; - [x] `cc52` ported off autotests. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2508:36,test,tests,36,https://psicode.org,https://github.com/psi4/psi4/pull/2508,3,['test'],"['test', 'tests']"
Testability,"## Description; As of this PR, cctests 1-33, 35-39 are ported. The next batch of tests will involve EOM oscillator strengths. ## Checklist; - [x] Edited tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2460:81,test,tests,81,https://psicode.org,https://github.com/psi4/psi4/pull/2460,2,['test'],['tests']
Testability,"## Description; As of this PR, cctests 1-33, 35-45 are ported. `cc44` and `cc45` (which test EOM root energies) needed no modifications. The tests added here cover CC2 rotational proeprties. Next on the list is an EOM dipole test, possibly bundled with an oscillator strength test. @loriab @lothian . ## Checklist; - [x] Changed tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2461:88,test,test,88,https://psicode.org,https://github.com/psi4/psi4/pull/2461,5,['test'],"['test', 'tests']"
Testability,"## Description; As part of #1005, UHF instability analysis is migrated over to use the Python Davidson solver. This adds LDA UKS instability analysis. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] The keyword `SOLVER_ROOTS_PER_IRREP` has been added to allow more fine-tuned control over the roots converged during instability analysis.; - [x] Instability keywords have moved from the `CPHF` module to the `SCF` module. See the corresponding SCF subsection of the documentation for details. . ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] LoC reduced by nearly 2000; - [x] Several CPHF keywords have been removed or copied over to SCF.; - [x] UHF LDA stability analysis is now enabled.; - [x] SOLVER_ROOTS_PER_IRREP keyword has been added. It overrides SOLVER_N_ROOT.; - [x] If SOLVER_N_GUESS is not set, the number of guess vectors is taken from SOLVER_CONVERGENCE, per the TDSCF code.; - [x] To the handling of landing in the same instability: the check is made more precise by checking absolute value, and we remember to reset the step scaling after landing in a new instability.; - [x] The Davidson solver no longer eliminates zero and negative eigenvalues by default. ## Question; - [x] Do we need more test coverage? I haven't actually _checked_ LDA instability analysis. Imagining a test is tricky. ## Checklist; - [x] Tests should still be passing. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2766:1528,test,test,1528,https://psicode.org,https://github.com/psi4/psi4/pull/2766,3,"['Test', 'test']","['Tests', 'test']"
Testability,"## Description; As part of #1877, and the ongoing subproject to give `psimrcc` a wavefunction, the goal of this PR is to eliminate the various `allocate` and `release` calls in psimrcc so we can remove the MemoryManager global. They will be replaced with `std::vector`, smart pointers, or more direct creation of raw pointers where appropriate. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Modernizing of `psimrcc` memory management.; - [x] Speed is fine!. ## Questions; - [x] ~~Is there a better way to handle the `std::vector` replacements in `blas_diis.cc`? I'm not happy that I need to do a `reinterpret_cast`, but it's at least (marginally) better than C-style casts. Just focus on the third commit.~~ There is no better way.; ## Checklist; - [x] All psimrcc tests pass as of the last commit. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1901:817,test,tests,817,https://psicode.org,https://github.com/psi4/psi4/pull/1901,1,['test'],['tests']
Testability,"## Description; As the title says, plus some preparatory work for solvated response (but not yet implemented or tested). ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] The interface towards the pyddx library for continuum solvation is extended by support for the linearized Poisson-Boltzmann model (LPB). ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2918:112,test,tested,112,https://psicode.org,https://github.com/psi4/psi4/pull/2918,4,"['Test', 'test']","['Tests', 'tested', 'tests']"
Testability,"## Description; As the title says. PSIO errors now give suggestions on how to fix the observed PSIO issue. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [X] PSIO errors now provide advice on how to rerun the calculation to fix the PSIO issue. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [X] Adjusts PSIO error printout so that advice is now given on how to rerun calculations to fix the observed PSIO issue. ## Questions; - [X] N/A. ## Checklist; - [X] Tests added for any new features; - [X] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [X] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3139:768,Test,Tests,768,https://psicode.org,https://github.com/psi4/psi4/pull/3139,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; Assigning an int to an array variable accepts it as a one-item array, rather than throwing a fit. @robertodr, this should work for https://github.com/psi4/psi4/pull/1814#issuecomment-642655962. Feel free to just incorporate these lines into your TDDFT PR. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1927:292,Test,Tests,292,https://psicode.org,https://github.com/psi4/psi4/pull/1927,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; At least on Mac, these tests were failing with the latest pytest (5). Happily, the fix doesn't look to break pytest 4. ## Questions; - heads-up @dgasmith that qcel, qcng may also be susceptible. ## Checklist; - [ ] ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1674:39,test,tests,39,https://psicode.org,https://github.com/psi4/psi4/pull/1674,4,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; At long last, kill the Fork!. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Adjust LibxcFunctional for new tweakers interface. Have to pad tweakers array sometimes; - [x] ~Any fctl involving PW91 is failing. Keeps segfaulting when I uncomment that block~. ## Questions; - [ ] Need to find out from M. Oliveira if there's a released version with this interface. tagged 5.0.0; - [ ] https://gitlab.com/libxc/libxc/issues/61. ## Checklist; - [ ] ~Tests added for any new features~; - [x] Any fctl involving PW91 is failing. Keeps segfaulting when I uncomment that block; ```; 	372 - dft-custom-dhdf (Failed); 	373 - dft-custom-hybrid (Failed); 	376 - dft-bench-ionization (Failed); 	377 - dft-bench-interaction (Failed); ```; - [x] All tests pass. ## Status; - [x] Ready for review; - [ ] Ready for merge. closes #2057",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101:529,Test,Tests,529,https://psicode.org,https://github.com/psi4/psi4/pull/1101,2,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; At long, long, long last fixes #1777 and fixes #1793. We now DIIS on the combined vector of orbital rotation amplitudes and T2 amplitudes. This is the approach taken by the orbital-optimized DCT code, which has not had nearly the problems that the `occ` module has had with orbital convergence. `occ` should now have much more robust convergence and _not_ be one of the banes of the test suite. In addition, full tests now pass, minus things involving conda dependencies. `v2rdm_casscf` was (unsurprisingly) segfaulting, and I was getting an error with `mp2d` that seems to trace back to me having an outdated version of QCEngine. I had to make some changes to `opt-irc-2` to get the test suite working. See #1793 for my diagnosis of the problem. In brief, the IRC in Psi can overshoot the endpoint, causing some numerical instability in the steps post-overshoot. This is a problem to fix in PyOptking, so I just changed the test value. This concludes the OCC's Open-Heart Surgery series. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Coupled orbital and amplitude DIIS for improved convergence in `occ`; - [x] Validated every `occ` test with OMP2, OMP3, OMP2.5, OCEPA that uses no spin-scaling against Psi4Numpy implementations converged with obsessive tightness. ## Checklist; - [x] Full tests pass, except for conda dependencies. That means `ctest` and `pytest`. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1846:399,test,test,399,https://psicode.org,https://github.com/psi4/psi4/pull/1846,6,['test'],"['test', 'tests']"
Testability,"## Description; At present the program prints a warning if electrons are outside the active space, and then later on crashes. This PR changes behavior so that the program terminates at once. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1696:366,Test,Tests,366,https://psicode.org,https://github.com/psi4/psi4/pull/1696,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; At the risk of gaining a reputation for single-character PR's, I think I have a fix for #1596. The extra character in the error message looked suspicious, so I nuked it and the `adc` tests still pass. I'll show the output of the OP's calculation below. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix a probable typo in ADC, which introduced a bug. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1599:199,test,tests,199,https://psicode.org,https://github.com/psi4/psi4/pull/1599,3,['test'],['tests']
Testability,"## Description; Basic smart SCF solver. Contains a smart_solver class for easy extensibility of convergence aids. This is still WIP, just looking for feedback on my first PR!. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [ ] Adds smart_solver class that shares data with a wfn object during SCF iterations.; * **User-Facing for Release Notes**; - [ ] With SMART_SCF set to `true`, SOSCF is automatically engaged in case of trailing convergence and the initial oscillations of SAD, GWH, and CORE guesses are damped. . ## Questions; - [ ] Do we want 'macroiterations' i.e. restarting the SCF with different initial conditions to be included in this PR, or another?. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests); - [ ] Ensure SOSCF exists for current method before turning it on. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1135:750,Test,Tests,750,https://psicode.org,https://github.com/psi4/psi4/pull/1135,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; Begin reorganizing Programmers' Manual. Put in some stub pages. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1141:68,stub,stub,68,https://psicode.org,https://github.com/psi4/psi4/pull/1141,1,['stub'],['stub']
Testability,"## Description; Ben Pritchard has been extensively revamping QCFractal/QCArchive. It has reached the point that the QCFractal `master` branch (latest release v0.15.8) will get no more support, and the `next` branch (no releases or conda packages) is in beta testing. This PR switches Psi4 distributed driver from `master` to `next` interfaces. It shouldn't affect many, if any. Only affects ppl running Psi4 and have `client = FractalClient(...)` in their inputs. User-side, was:; ```; from qcfractal.interface import FractalClient; client = FractalClient(""localhost:7777"", verify=False); ...; plan = gradient('scf', dertype=0, return_plan=True); plan.compute(client); ret = plan.get_results(client); ```. User-side, now:; ```; from qcportal import PortalClient; client = PortalClient(""http://localhost:7777"", verify=False); ...; plan = gradient('scf', dertype=0, return_plan=True); plan.compute(client); ret = plan.get_results(client); ```. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Updates interface for QCFractal `next`. Core snippet written by Ben.; - [x] ADDED: Also, updated to `task_config` from `local_options`. This isn't urgently needed, but it'll silence a repeated warning, at the cost of requiring latest qcng and hence latest qcel. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests); - [x] I've tested it on GT cluster. Various calls were changed out for new ones. I'm not sure if error handling is any worse or better. ## Status; - [x] Ready for review; - [ ] Ready for merge, no particular hurry",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2645:258,test,testing,258,https://psicode.org,https://github.com/psi4/psi4/pull/2645,5,"['Test', 'test']","['Tests', 'tested', 'testing', 'tests']"
Testability,"## Description; BrianQC in #1893 only runs in c1 point group, so they'd like to have a sub test suite that can work in c1. This provides a label `noc1` for tests that _need_ symmetry (occasionally for convergence but mostly b/c keywords include DOCC or STATES_PER_IRREP). It was determined by forcing c1 by adding `mol->reset_point_group(""c1"");` here https://github.com/psi4/psi4/blob/master/psi4/src/export_mints.cc#L235 . That line *is not* in this PR, but the BrianQC ppl may want to consider it when their engine is enabled. With that line in place, `ctest -LE noc1 -j<N>` runs cleanly. It can also be combined, so `ctest -L quick -LE noc1` and `ctest -R scf -LE noc1` also valid. ## Checklist; - [ ] ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1958:91,test,test,91,https://psicode.org,https://github.com/psi4/psi4/pull/1958,5,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,## Description; Bug fix and improvements to the MintsHelper class constructor. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fixes a bug introduced in the DMRG code. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1802:272,test,tests,272,https://psicode.org,https://github.com/psi4/psi4/pull/1802,2,['test'],['tests']
Testability,## Description; Bug fix. Exports missing `MP3 TOTAL ENERGY` variable for `mp2.5` calculations. Expected by the `cbs` driver function. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1707:188,test,tests,188,https://psicode.org,https://github.com/psi4/psi4/pull/1707,2,['test'],['tests']
Testability,"## Description; Bump gau2grid to v1.0 and lose `mpmath`. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] gau2grid is `v1.0` now, so pointing to that. This drops the `mpmath` requirement.; - Note that bumping the `find_package(gau2grid 1.0)` is only for appearances sake since 0.1 tag worked just fine. ; - [x] Fix pcm test links closes #967; * **User-Facing for Release Notes**. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/968:385,test,test,385,https://psicode.org,https://github.com/psi4/psi4/pull/968,1,['test'],['test']
Testability,"## Description; Bump the QCA stack. qcng 0.6.3 is minted but doesn't exist on c-f yet, so this'll be a nice test of does it do internal build. Some tools (LGTM) won't `git clone`, so switching remaining upstreams to URL, which thanks to GH is as flexible as `GIT_TAG`. Also, fix some cfour interface issues, fix some deprecationwarnings, and add mp2d to smoke tests. ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1577:108,test,test,108,https://psicode.org,https://github.com/psi4/psi4/pull/1577,2,['test'],"['test', 'tests']"
Testability,"## Description; Calculates exchange terms in a single tensor rather than contracting and adding. Reduces the cost of contractions against SCF coefficients in range separated DFT. Changes the working equation for calculating the coulomb matrix in range separated DFT calculations. This lowers the number of tensors that Psi4 needs to store, reducing memory costs and extending the number of cases operable by DFHelper. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Extend formulations to DiskDFJK. ## Questions; - [ ] Question1. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1911:634,test,tests,634,https://psicode.org,https://github.com/psi4/psi4/pull/1911,2,['test'],['tests']
Testability,"## Description; Change of FINDIF to be metadata based per #1148, task one, and qcdb molecule compatibility per #1148, task two. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Change finite difference code to use metadata.; - [x] Fixes bugs #1296 and #1306.; - [x] Reap/Sow code removed. ## Questions; - [x] How should I document that a functions takes as an argument or returns the metadata dictionary? That needs to be specified somewhere.; - [x] Are we all agreed on the metadata style? The things I've left undone are going to depend heavily on any additional metadata changes. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests); - [x] Implement the changes to all four finite difference functions: empirical dispersion, hessian by gradients, hessian by energies, gradient by energies.; - [x] Polish the resulting code. In particular, there are a few variables taken from the initialization `data` that should probably be taken from `metadict` instead. For the compute functions, it should only need the barest skeleton of the current initialization call. Depending on other revisions, I may want to create a separate initialization function for the compute functions.; - [x] Modify the reap/sow cookbooks to work.; - [x] Make this compatible with QCDB molecules. To do this _correctly_, we need CdSalc tech reproduced in QCDB. Better to just coerce the QCDB molecule for now.; - [x] Remove the optimization side reap/sow code. ## Status; - [x] Ready for review; - [x] Ready for merge.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1289:686,test,tests,686,https://psicode.org,https://github.com/psi4/psi4/pull/1289,2,['test'],['tests']
Testability,"## Description; Changes a setting in the COSX JK algorithm to a more conservative default. Previously, the incremental fock option (`cosx_incfock`) was enabled by default. This gave a minor speedup, but it came at the risk of possible SCF convergence issues when using diffuse basis sets. This PR disables this option, so the COSX algorithm will be slightly slower, but more robust by default. ## Todos; - [x] Changed `cosx_incfock` default. ## Checklist; - [x] COSX tests still pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2689:467,test,tests,467,https://psicode.org,https://github.com/psi4/psi4/pull/2689,1,['test'],['tests']
Testability,"## Description; Cleans a function I came across when working on some SCF improvements. ## Checklist; - [x] All tests pass except `frac-traverse` (see 2284, unrelated to this PR). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2285:111,test,tests,111,https://psicode.org,https://github.com/psi4/psi4/pull/2285,1,['test'],['tests']
Testability,## Description; Cleans up some of the logic and printing in optking's set_params. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2170:38,log,logic,38,https://psicode.org,https://github.com/psi4/psi4/pull/2170,3,"['log', 'test']","['logic', 'tests']"
Testability,"## Description; Cleanup EOM CC3 code a bit. ## Todos; - [x] Catchup the code with psifiles, etc., so that EOM_DEBUG toggle can be used; - [x] Change restart behavior in EOM CC3 computations to avoid odd bug. ## Checklist; - [x] No additional tests should be needed.; - [x] Tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2085:242,test,tests,242,https://psicode.org,https://github.com/psi4/psi4/pull/2085,2,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; Cleanup of tests directory following #2555. Heals various typos preventing some tests from getting pytest registration as well as some discrepancies between ctest and pytest labels. Deletes many unused/broken tests. ## Todos; - [x] All unused optimizer tests deleted following discussion in #2555.; - [x] All unused sowreap tests deleted.; - [x] `cc5`, `scf11-freq-from-energies`,`dft-pbe0-2`, `dft-dsd`, `dft-dldf` are all unused duplicates of other tests. Deleted.; - [x] `min-input` Broken + unused. Deleted.; - [x] `fsapt-diff1` Unused + not a test. Deleted. ; - [x] `dfmp2-freq1`, `dfmp2-freq2`, `props4` were unused but are passing, quick, and useful. These are saved and added to `CMakeLists.txt`.; - [x] `tester.py` no longer erroneously complains about ecppint tests having mismatched labels. ## Checklist; - [x] All tests that were missing registrations are passing. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2655:27,test,tests,27,https://psicode.org,https://github.com/psi4/psi4/pull/2655,10,['test'],"['test', 'tester', 'tests']"
Testability,"## Description; Closes #1673. This PR fixes an indexing error causing the wrong orbitals to be scaled during fractional occupation, when there are multiple irreps. Now that the SCF module has its correctness errors fixed, I can get to some convergence improvements. ## Todos; - [x] Fixed a bug causing incorrect energies during fractional occupation for systems with point group symmetry. ## Checklist; - [x] Tests added for any newly working features; - [x] frac tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2280:409,Test,Tests,409,https://psicode.org,https://github.com/psi4/psi4/pull/2280,2,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; Closes #1692 and adds some of those examples as test cases. The heart of the PR is that MOM no longer sets the iteration number to 0, which would triggered logic resetting some wavefunction variables. ## Todos; - [x] Fixes a bug where MOM could clear all electrons. ## Questions; - [x] The new tests take about 20 seconds. Do you want me to reduce the basis set size, to speed this up?. ## Checklist; - [x] Tests added for newly working features; - [x] `scf` tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2270:64,test,test,64,https://psicode.org,https://github.com/psi4/psi4/pull/2270,5,"['Test', 'log', 'test']","['Tests', 'logic', 'test', 'tests']"
Testability,"## Description; Closes #1872. . CEPA Conventions Now:; `dct`: Does not know about CEPA(0), per #1873 ; `occ`: Every use of CEPA or CEPA(0) is now converted to LCCD. The section header and the final results section include [CEPA(0)] in parentheses. The same applies to the orbital optimized methods. The string ""OCEPA"" is still used internally as a wavefunction type when referring to LCCD, but that part of `occ` could use refactoring anyways, so I'm not going to spend the time to change it for something that relatively minor.; `dfocc`: Unchanged, because it always said `lccd` anyways. Bozkaya changed his preferred name for the method from CEPA to LCCD between `occ` and `dfocc`; `fnocc`: For consistency with the other CEPA methods, this still uses CEPA(0) to refer to both LCCD and LCCSD for the final results, but the start of the computation writes out Linearized CCD or Linearized CCSD.; Driver: This is unchanged. `cepa(0)` means LCCSD. Obligatory ping to notify @edeprince3. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Standardizes CEPA terminology in Psi output. ## Checklist; - [x] Quick tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1909:1155,test,tests,1155,https://psicode.org,https://github.com/psi4/psi4/pull/1909,1,['test'],['tests']
Testability,"## Description; Closes #1890. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] When DETCI computes TDMs, it does so for all excitations to higher roots, not just excitations from the ground state.; - [x] Added OPDM and TPDM tests. ## Questions; - [x] ~~Is it worth adding the i > j case, or is it i < j the standard convention for multistate problems? If so, rather than have these be explicitly constructed, it's probably best to just take the adjoint of the i < j case.~~ Added.; - [x] ~~We currently have zero test coverage of OPDMs from `detci`. We could check that Matrices are equal for a same-state OPDM and a TDM. This is a bit larger than usual for a Matrix comparison, but I think it'll be fine with H2/cc-pVDZ. I assume this would go in pytests?~~ Added. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1910:273,test,tests,273,https://psicode.org,https://github.com/psi4/psi4/pull/1910,2,['test'],"['test', 'tests']"
Testability,## Description; Closes #2031 . ## Todos; - [X] Add `compute_field_over_grid_in_memory` to `oeprop.cc` and `oeprop.h`; - [X] Expose `compute_field_over_grid_in_memory` in `export_oeprop.cc`.; - [X] Update `mints14` test. ## Questions; - N / A. ## Checklist; - [X] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [X] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2032:214,test,test,214,https://psicode.org,https://github.com/psi4/psi4/pull/2032,4,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,"## Description; Closes #2192 : a correctness error in threaded correlated DF gradients accidentally introduced during my refactoring. I recommend making a new release candidate sooner rather than later. Sorry, Lori. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Fix DF gradient paralellization error . ## Lessons Learned; - [ ] We could _really_ use a threaded pass of quicktests as part of the test suite; - [ ] The difficulty of compiling Psi4 can be a bottleneck in the dev process. In particular, the instructions to get Psi source-compiled on Linux don't work out of the box, and Mac clang compilers are still choking on programs that are five lines of code. ## Checklist; - [x] Threaded quicktests pass. @hokru found the only failure was the bug which this PR fixed, and the failing test cases pass now. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2193:456,test,test,456,https://psicode.org,https://github.com/psi4/psi4/pull/2193,2,['test'],['test']
Testability,"## Description; Closes #2310 - an error message is more helpful than a segfault, in my opinion. ## Checklist; - [x] Tests added for any newly trapped keywords; - [x] cc test still pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2450:116,Test,Tests,116,https://psicode.org,https://github.com/psi4/psi4/pull/2450,2,"['Test', 'test']","['Tests', 'test']"
Testability,"## Description; Closes #2432. This is PR 1 in an ongoing series to make `ccdensity` compatible with the standard `Matrix` and `Wavefunction` machinery used elsewhere in Psi. (That means I'll have a lot of PRs for you two to review. Let me know if there's another person from VA Tech you want to take the responsibility of reviewing my PRs.). ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Adds finite difference test on CCSD dipoles; - [x] Standardizes `onepdm` vs `opdm` in `ccdensity` keywords.; - [x] Corrects incorrect description of the `onepdm`/`opdm` keyword; - [x] Creates new `ccdensity` function to convert `** double` to `Matrix`; - [x] Adds `Ca` matrix to parameters, to begin phasing out the QT ordered `** double` representation of the orbitals . ## Checklist; - [x] Passes `cc` tests; - [x] Passes finite difference test on CCSD dipoles. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2434:472,test,test,472,https://psicode.org,https://github.com/psi4/psi4/pull/2434,3,['test'],"['test', 'tests']"
Testability,"## Description; Closes #941. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **User-Facing for Release Notes**; - [x] Fixes a bug where the incorrect number of displacements would be reported during a hessian obtained by fintie difference of energies. ## Checklist; - [ ] _Somehow_, I don't think running test cases for this one is necessary. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/987:342,test,test,342,https://psicode.org,https://github.com/psi4/psi4/pull/987,1,['test'],['test']
Testability,"## Description; Closes #943: the last of the `cc` tests is expressed in terms of psivars instead of the autotest mechanism. The last test moved required adding psivars about pair energies for RHF CC computations. I want a review from Zach for pair energies, from TDC for CC, and from Lori for psivars. ## Todos; - [x] Adds MP2 and CC pair energy psivars; - [x] Removes `autotest` capabilities . ## Questions; - [ ] If you close a ""mugworthy"" PR but already have a mug, what then?. ## Checklist; - [x] `cc43` still passes; - [x] quick tests still pass . ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2551:50,test,tests,50,https://psicode.org,https://github.com/psi4/psi4/pull/2551,3,['test'],"['test', 'tests']"
Testability,## Description; Closes issue #2559 . ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Removed redundant work in parallel TwoBodyAOInt construction. ## Questions. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2581:274,test,tests,274,https://psicode.org,https://github.com/psi4/psi4/pull/2581,2,['test'],['tests']
Testability,## Description; Completes PR #1119. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1123:56,Test,Tests,56,https://psicode.org,https://github.com/psi4/psi4/pull/1123,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; Compromise version with #2645. That replaced the longstanding v0.15 qcfractal/qcportal with v0.50b ""next"" branch. This one allows either. Adds a test, via ecosystem mac testing v0.15. CI testing of ""next"" didn't work out, but it's ok locally. Also switched to mamba solver for conda since qca is long to solve for. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Additionally support the `next` branch of QCArchive with the distributed driver, as well as the longstanding v0.15.8. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge. closes #2645",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2821:161,test,test,161,https://psicode.org,https://github.com/psi4/psi4/pull/2821,6,"['Test', 'test']","['Tests', 'test', 'testing', 'tests']"
Testability,"## Description; Consider this a hacked bare minimum. Needs work. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] They are _still_ playing about with fctls so xc_funcs.h is still changing and having to be copied over into our file. I've pinned the commit for the moment so you won't get stray ""can't find libxc fctl"" errors.; - [x] From https://gitlab.com/libxc/libxc/commit/21ee6588bb8039c3c83e5b39d01b2ee4234fe5e3 , I think they've changed over 'set_params' to 'ext_params'. Haven't figured out how to do so psi-side. Not all the set_params lived so the funcs that got dropped are now commented in LibxcFunctionals.cc; - [x] They seems to have dropped lda_set_params entirely. I saw at least one commit msg indicating it was duplicate functionality; - [x] All tests but 4 (+ scf-covereage for me) pass. Fails are of the type below. ```RuntimeError: ; Fatal Error: Matrix::power: C_DSYEV failed; Error occurred in file: /home/psilocaluser/gits/hrw-dgas/psi4/src/psi4/libmints/matrix.cc on line: 2584; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::Matrix::power(double, double); psi::DIISManager::extrapolate(int, ...); psi::scf::HF::iterations(); psi::scf::HF::compute_energy(); ```. ### April 2018 updates; - [x] psi's fork of Libxc resides in a branch on GH:loriab/libxc . I'd transfer that repo to psi4/libxc except then all the present cmake pulls (to the 3.0 master in that repo) would break.; - [x] added in M05, M052X, M06, M062X, M06HF, M08SO, M08HF, M11; - [x] M11 close (0.00035 E_h) but broken; - [x] MGGA_MVSh & MGGA_MVS broken; - [x] otherwise, test suite is clean; - [x] Need https://gitlab.com/libxc/libxc/merge_requests/65 to go through and hopefully 4.0.5 tag made, then pull over to GH and re-point this PR. ## Status; - [x] Ready to go. Absolutely not",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/802:828,test,tests,828,https://psicode.org,https://github.com/psi4/psi4/pull/802,2,['test'],"['test', 'tests']"
Testability,"## Description; Continues from #1120. pyoptking largely plumbed in. ## Todos. Failing tests from full suite. These will definitely include (a) functions to opt, (b) mixed basis sets, an odd thing in fnocc2 where I can't get the wfn to freeze core.; - [ ]	 17 - cbs-xtpl-opt (Failed); - [ ]	 18 - cbs-xtpl-func (Failed); - [ ]	 20 - cbs-xtpl-wrapper (Failed); - [ ]	114 - dcft5 (Failed); - [ ]	204 - fnocc2 (Failed); - [ ]	267 - opt-lindep-change (Failed); - [ ]	277 - opt8 (Failed); - [ ]	281 - opt13 (Failed); - [ ]	282 - opt14 (Failed); - [ ]	283 - opt-irc-1 (Failed); - [ ]	284 - opt-irc-2 (Failed); - [ ]	285 - opt-irc-3 (Failed); - [ ]	301 - pubchem1 (Failed); - [ ]	304 - pywrap-all (Failed); - [ ]	393 - python-pubchem (Failed); - [ ]	419 - gcp-pbeh3c (Failed); - [ ]	428 - pcmsolver-opt-fd (Failed). ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for preliminary review. hopefully the optking team can work off this.; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1335:86,test,tests,86,https://psicode.org,https://github.com/psi4/psi4/pull/1335,4,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; Continues from psi4/psi4#850 in getting sns-mp2 integrated into psi as an endorsed plugin. Also various infrastructure additions to accommodate downstream and python projects. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] First downstream project buildable during superbuild; - [x] First pure python project buildable during superbuild. That is, `setup.py`, not `addonConfig.cmake`, so opt-in/detect-from machinery a lot shakier. Have to use FindPythonModule adapted from internet, rather than sturdy `find_package()`. For where-module?, relying totally on :envvar:PYTHONPATH. Seems to be behaving sensibly, but report oddities.; - [x] Add some dev docs for how to do workflows with addons; - [x] Adapt some snsmp2 test to work with psi ctest and pytest; - [x] Fix up tests/pytest/test_numpy_views so that it runs with pytest and doesn't interfere when `memory_profiler` not installed; - [x] ~Until https://github.com/DEShawResearch/sns-mp2/pull/2 goes in, pulling from my fork~; - [x] Adds some (mildly tested) versioning capabilities to FindPythonModule; * **User-Facing for Release Notes**; - [x] Enable [sns-mp2](https://github.com/DEShawResearch/sns-mp2) to be built at build-time via `cmake -DENABLE_snsmp2=ON`. Can also detect it if you put an external snsmp2 in PYTHONPATH (but as it's an optional runtime dependency, latter's only really useful for testing); - [x] Fix nasty bug that made the number of points computed for cube file dependent on rounding error. Could show up as differences in cube files btwn compilers. Tightened down cubefile checking. ## Questions; - [x] @rmcgibbo, I'd still like to know about getting the version from the imported plugin. Also, it'd be nice to get pytest in the sns-mp2 repo working in its own right.; - [x] @shannonhouck, there'll probably be a few more docs to add, if you don't mind. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/865:800,test,test,800,https://psicode.org,https://github.com/psi4/psi4/pull/865,4,['test'],"['test', 'tested', 'testing', 'tests']"
Testability,"## Description; Continuing #1403. Since we want to check Becke fctl here, better call it B97-0 since surrendered B97 to Grimme. ## Checklist; - [ ] ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1436:149,Test,Tests,149,https://psicode.org,https://github.com/psi4/psi4/pull/1436,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; Corrects a minor bug in the coupled cluster ROA code. . ## Todos; - [X] Fixes ROA code in `ccresponse` so that `cc52` passes for code compiled with `debug`. ## Checklist; - [X] All `cc` tests run now. ## Status; - [X] Ready for review; - [X] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2077:202,test,tests,202,https://psicode.org,https://github.com/psi4/psi4/pull/2077,1,['test'],['tests']
Testability,## Description; Corrects additional JK logic edge cases found and increases the verbosity of the error messages. At the same time we should continuously discourage users to set a `SCF_TYPE` to anything besides `DF`. `MEM_DF` and `DISK_DF` are truly expert user options and I believe have been marked as such in a variety of places. Also added a throw if someone requests dlDF+D gradients as these have never been implemented. . Fixes #1021. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1023:39,log,logic,39,https://psicode.org,https://github.com/psi4/psi4/pull/1023,1,['log'],['logic']
Testability,"## Description; Corrects bad test values. Part of #2885. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] The bad test values were inserted as part of #2849, and the new values are qualitatively similar to the values previous to that commit. The source for my reference data, PySCF, gives many spurious low-energy roots, and I accidentally included one in the roots. _Mea culpa_. The reference values weren't actually used, which is why this didn't create a problem before. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2886:29,test,test,29,https://psicode.org,https://github.com/psi4/psi4/pull/2886,2,['test'],['test']
Testability,"## Description; Couldn't (I think) go in the header, but this PR prints the correct scratch directory at the beginning of energy() and gradient() calls. This is particularly useful if the user simultaneously specifies scratch directories in different ways. ## Checklist; - [X] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1731:277,Test,Tests,277,https://psicode.org,https://github.com/psi4/psi4/pull/1731,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; Coupled Cluster methods in general do not compute the OPDM unless necessary, however when they do need to compute the OPDM they do not communicate that back to the wfn object. This has led to some confusion on the part of users trying to access CC density matrices. (see #504 ). . ~~The ccdensity module will now set `ref_wfn.arrays[""CC_OPDM_A""/""CC_OPDM_B""] ` with the ground state opdm.~~. CCdensity does the MO/AO transformation and sets the ref_wfn Da/Db members internally, no python, and no longer using the `arrays` map. ; ## Features; - CC OPDM can be accessed via wfn object returned from a property calculation that constructs it.; - eom root psivars for dipole/quadrupole components are now properly assigned.; ## Todos; - [x] ~~Python-side code to convert arrays[""CC_OPDM_A/B""] to ref_wfn.Da()/Db()~~; - [x] fix assignment of root psivars for cc routines ; - [x] add tests to check OPDM assignment in wfn through OEProps; ## Questions; - [x] @dgasmith re the suggestion you made in #504 : would that not give us a ref_wfn with two copies of the same data? One held in `ref_wfn.arrays[""CC_OPDM_A""]` and the second in `ref_wfn.Da` ? I think we would want the entry in the arrays table to be freed? . ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/506:894,test,tests,894,https://psicode.org,https://github.com/psi4/psi4/pull/506,1,['test'],['tests']
Testability,## Description; Cramming a few more deprecations into v1.2. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] `Wavefunction.reference_energy()` --> `Wavefunction.energy()` in keeping with grad/hess and because reference is not apt. py-side was already plain `energy()`.; - [x] deprecate the c-side `Wavefunction.frequencies` member data and getter/setter. getter now reads off the py-side member data. setter will go away entirely. ## Questions; - [ ] can one suppress compile-time deprecation warnings for two lines? the export_mints legacy_freq lines are properly throwing errors and disrupting the clean build. ## Checklist; - [ ] ~Tests added for any new features~; - [x] ran the freq tests with earlier v of code. ## Status; - [x] Ready for review. ~This has got bits of #1454 and #1449 in it. I'll rebase once they're in.~; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1455:683,Test,Tests,683,https://psicode.org,https://github.com/psi4/psi4/pull/1455,2,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; Current qcel not compatible with the new pydantic v2. I minted a new qcel build with the constraint, but the solver sometimes optimizes for pydantic anyways. So let's try explicit constraint. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] RN 1; - [ ] RN 2. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2999:716,Test,Tests,716,https://psicode.org,https://github.com/psi4/psi4/pull/2999,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; Currently, DIIS files are dumped to working directory for ambit tensors. This PR moves these temporary files to the scratch directory, which seems a better place to store these files. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; I just prepend the full path before filename. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3219:698,Test,Tests,698,https://psicode.org,https://github.com/psi4/psi4/pull/3219,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; Currently, the phi_ao function returns the value of the basis functions at a point. However, this ONLY works for cartesian and not spherical basis sets. I updated the code to make this change. This is important to the development of seminumerical methods, like chain-of-spheres exchange. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Code is tested in my developmental chain-of-spheres exchange branch; - [x] Made an explicit test testing the validity of my bug fix. ## Questions; - [x] Will this impact existing functions that use the phi_ao call?. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2210:419,test,tested,419,https://psicode.org,https://github.com/psi4/psi4/pull/2210,3,['test'],"['test', 'tested', 'testing']"
Testability,"## Description; DCT files were not correctly being cleared upon completion. Among other things, the tau matrix was not properly cleared, which led to energy denominator computations for the MP2 guess incorporating the tau matrix when a DC-12 variant was selected. The MP2 guess was not correct. Requesting the attention of @andysim on this. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Clears DCT files correctly. ## Checklist; - [x] [All 'dcft' tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1310:499,test,tests,499,https://psicode.org,https://github.com/psi4/psi4/pull/1310,2,['test'],['tests']
Testability,"## Description; DCT's `cepa0` capabilities are removed. Per #1872, Psi has a problem with being consistent about what `cepa0` is. DCT has `cepa0` and is contributing to the problem. The best option is to just get rid of it. We only have it for testing purposes, but that's a Psi4Numpy task nowadays. The documentation even said don't use it for production. Besides, `cepa0`'s days as a useful point of comparison to `dct` are numbered. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Removed `cepa0` functionality from `dct` module. Use `occ`, `dfocc`, or `fnocc` instead.; - [x] Removed test checking for consistency between `fnocc` and `dct` CEPA because `dct` no longer has `CEPA`. ## Questions; - [ ] One procedural concern: At what point are we pulling the plug on getting new PRs into 1.4? I do not want keeping up with my PRs to take time that core devs should be spending moving 1.4 forward. ## Checklist; - [x] `ctest -L quick` passes; - [x] `ctest -L dct` passes; - [x] Documentation updated; - [x] Error message added. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1873:244,test,testing,244,https://psicode.org,https://github.com/psi4/psi4/pull/1873,2,['test'],"['test', 'testing']"
Testability,"## Description; DDD in #1351 is nominally ready, but looking through the diff, I don't think I can answer close questioning on all the pieces. So I'm going to try to pick off some topics for coherent discussion. This is No. 1 of the DDD series, #1351. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] New `psi4.set_output_file` function to both set up a logger and call `psi4.core.set_output_file`; - [x] Added some brief logging in the driver. This doesn't look much like DDD, but it's something to work with.; - [x] output file naming has been changed up. outputs may have double extension (e.g., myfile.log.out) to cope with the oddity of two extensions. Mostly, something.in creates something.out and something.log.; - [x] docs. Below is an example of output set at DEBUG with an extra `gradient()` call added to tu1; `>>> psi4 ../tests/tu1-h2o-energy/input.dat --loglevel=10 && cat ../tests/tu1-h2o-energy/input.log`; ```; 2022-03-28:21:06:46,635 INFO [psi4.driver.driver:603] Compute energy(): method=scf, basis=cc-pvdz, molecule=h2o, nre=9.168193296424349; 2022-03-28:21:06:46,644 DEBUG [psi4.driver.driver:604] {'elbl': array(['', '', ''], dtype='<U1'),; 'elea': array([16, 1, 1]),; 'elem': array(['O', 'H', 'H'], dtype='<U1'),; 'elez': array([8, 1, 1]),; 'fix_com': False,; 'fix_orientation': False,; 'fragment_charges': [0.0],; 'fragment_multiplicities': [1],; 'fragment_separators': [],; 'geom': array([ 0. , 0. , -0.06577557, 0. , -0.75906199,; 0.52195302, 0. , 0.75906199, 0.52195302]),; 'mass': array([15.99491462, 1.00782503, 1.00782503]),; 'molecular_charge': 0.0,; 'molecular_multiplicity': 1,; 'name': 'h2o',; 'provenance': {'creator': 'QCElemental', 'routine': 'qcelemental.molparse.from_string', 'version': 'v0.24.0'},; 'real': array([ True, True, True]),; 'units': 'Angstrom'}; 2022-03-28:21:06:47,79 INFO [psi4.driver.driver:606] Return energy(): -76.0266327350908; 2022-03-28:21:06:47,83 INFO [psi4.driver.driver:748] Co",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2512:412,log,logger,412,https://psicode.org,https://github.com/psi4/psi4/pull/2512,8,"['log', 'test']","['log', 'logger', 'logging', 'loglevel', 'tests']"
Testability,"## Description; DFT-NL (=non-local) adds the VV10 correlation energy to arbitrary DFT functionals using functional specific vv10_b parameter. Conceptually similar to DFT-D. DOI: 10.1021/ct200644w. Fixes https://github.com/psi4/psi4/issues/870. * **User-Facing for Release Notes**; - [x] SCF option `DFT_VV10_B` enables and adds VV10 correlation according to DFT-NL scheme (fixed `vv10_c`, user-supplied `vv10_b`). ; - [x] `DFT_VV10_C` also gives access to the C parameter.; - [x] `NL_DISPERSION_PARAMETERS` similar to `DFT_DISPERSION_PARAMETERS`; - [x] `energy('functional-nl')` sets pre-defined vv10_b parameters for over 15 functionals. Recommended usage for most users.; - [X] `DFT_VV10_POSTSCF` enables a post-scf VV10 calculation. Large gain in speed with minimal loss of VV10 correlation energy.; - [x] added documentation. . * **Developer notes**; - [x] rebase+adjustment to PR https://github.com/psi4/psi4/pull/922; - [x] figure out DSD variant and param citations; - [x] re-integrate tests. * ** Notes**; * forcing pure HF with VV10 will seg. fault. (no integration grid). Only `energy('hf')` with `set DFT_VV10_B` is caught, not `energy('scf')` to allow custom access to the scf.; * NL parameters were entered manually, someone please check over them for strange values or typos; * tests are kept short, but we also don't test every dispersion dash parameter out there.; * for double-hybrids with multiple versions, the frozen core and/or D3BJ parent variant was chosen for a sensible consistency. . ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/914:993,test,tests,993,https://psicode.org,https://github.com/psi4/psi4/pull/914,3,['test'],"['test', 'tests']"
Testability,## Description; DMRG density to wavefunction. Closes #2558. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] DMRG density on wavefunction; - [x] Experimental alpha and beta density fields are combined. ## Questions; - [ ] Suggestions on how to test this? The best idea I've got is comparing an FCI and a DMRG density. ## Checklist; - [x] chemps2 tests pass; - [x] eom tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2570:302,test,test,302,https://psicode.org,https://github.com/psi4/psi4/pull/2570,3,['test'],"['test', 'tests']"
Testability,## Description; DSD-BLYP and DSD-PBE-PBE86 subtests in dft-custom-dhdf are failing. This is the easiest way to get it tested externally.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/945:118,test,tested,118,https://psicode.org,https://github.com/psi4/psi4/pull/945,1,['test'],['tested']
Testability,## Description; Debug symbols where being mistakenly striped from the core python module. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Debug symbols are back; - [x] Ability to break on line numbers is back. ## Checklist; - [x] Works for @JonathonMisiewicz and myself. Doesn't affect any test cases. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2159:349,test,test,349,https://psicode.org,https://github.com/psi4/psi4/pull/2159,1,['test'],['test']
Testability,"## Description; Defines couple new XC functionals in the driver and adds few D3BJ parameters. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **User-Facing for Release Notes**; - [x] Double-Hybrids: B2GPPLYP, PWPB95, PTPSS, DSD-BLYP; - [x] hybrid-GGAs: PW6B95; - [x] mega-GGAs: TPSS, revTPSS; - [x] GGAs: mPWPW; - [x] tests; - [x] adding of some reference outputs; - [x] clean-up ; - [x] praying libxc 4.0 switch does not break the tweaking options. * **Developer notes/issues**; - [x] tests put into dft-custom-gga/mgga/hybrid/dhdf; supersedes a number of older tests (removed only from CMakeLists.txt):; -`dft-dsd + dft-pbe0-2 `moved into `dft-custom-dhdf`; -`dft-dldf` moved into `dft-custom-mgga`; - [x] new tests for mgga_ms0/1/2 based on libxc test data.; - incomplete dft-custom-hybrid test: missing wpbe, wpbe0, b5050lyp. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/877:355,test,tests,355,https://psicode.org,https://github.com/psi4/psi4/pull/877,6,['test'],"['test', 'tests']"
Testability,## Description; Disable cmake policy CMP0144 due to limited cmake support. ## User API & Changelog headlines; - [x] Remove cmake policy CMP0144 from the main CMakeLists.txt file. ## Questions; - [x] Is this policy critical? It appears not. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3089:294,test,tests,294,https://psicode.org,https://github.com/psi4/psi4/pull/3089,2,['test'],['tests']
Testability,"## Description; Ditch `QCAspect` in favor of its code descendant, `qcel.Datum`. Because vib involves strings and complex numbers, need qcel `v0.4.1` (not released at time of posting). ## Checklist; - [ ] ~Tests added for any new features~; - [x] full tests run. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1654:205,Test,Tests,205,https://psicode.org,https://github.com/psi4/psi4/pull/1654,2,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; Docs cleanup. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] allows building docs w/o psi-sphinx-theme (though you lose psivar indexing); - [x] makes sure all the tests (incl. psiapi/json) get copied to samples; - [x] fixes up misc. options-referencing errors. ## Checklist; - [x] built with alabaster sphinx theme. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1044:247,test,tests,247,https://psicode.org,https://github.com/psi4/psi4/pull/1044,1,['test'],['tests']
Testability,## Description; Documentation update for the new dft logic. ## Todos; - [x] Ensure currently existing docs are updated with the new dft logic; - [x] Include new examples on functional customization. Waiting on #799 to be merged to test new examples for the docs. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/805:53,log,logic,53,https://psicode.org,https://github.com/psi4/psi4/pull/805,3,"['log', 'test']","['logic', 'test']"
Testability,"## Description; Does exactly what it says in the title. We need the maximum value of `maxGradient` _across all threads_. ## Checklist; - [x] Tested that even in parallel, orbital gradients are now deterministic. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1435:141,Test,Tested,141,https://psicode.org,https://github.com/psi4/psi4/pull/1435,1,['Test'],['Tested']
Testability,"## Description; Does exactly what it says. I tested for correctness not only by comparison to basis sets that are on EMSL, but also by reproducing the G2 energy of SO2 reported by Brown and Barber (DOI: 10.1021/j100020a034) within 2E-5 hartrees. The G2 method requires this basis set. I get the same error margin when I try to reproduce their CO2 energies, so I attribute this to them not having converged their geometry tightly. Many thanks to @loriab for guidance with Psi's basis set parser. ## Status; - [x] Ready for review; - [X] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1531:45,test,tested,45,https://psicode.org,https://github.com/psi4/psi4/pull/1531,1,['test'],['tested']
Testability,"## Description; During review of the ADIIS PR, it was suggested that Psi raise an error if the BFGS doesn't meet the target convergence criteria. This PR changes that, so the error will be raised _if BFGS is very far from meeting the convergence criteria_. 1e-6 would be nice, but 1e-3 is good enough for our purposes. @loriab, these are the last of the Psi tests on my list to heal. ## Checklist; - [x] Failing tests Lori pointed out work; Can't cause tests that previously passed to fail. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2445:358,test,tests,358,https://psicode.org,https://github.com/psi4/psi4/pull/2445,3,['test'],['tests']
Testability,"## Description; During the L2 upgrade, I missed the function that handles diffuse external multipoles. In constructing a test case to avoid a repeat, I found some normalization problems (and a lack of gradients) which will be addressed in a followup PR. H/T to @g-andres and his group for pointing the problem out. ## Todos; - [ ] Fixes energies with external diffuse potentials. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2068:121,test,test,121,https://psicode.org,https://github.com/psi4/psi4/pull/2068,1,['test'],['test']
Testability,## Description; Efforts to LGTM-ize `libsapt_solver`. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1623:108,test,tests,108,https://psicode.org,https://github.com/psi4/psi4/pull/1623,2,['test'],['tests']
Testability,"## Description; Eliminate index management from `ccresponse`. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Eliminates QT-Pitzer interconversion from `ccresponse`; - [x] Eliminates memory leaks from `ccresponse`; - [x] Cleaned up integral writing to disk. ## Checklist; - [x] cc tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2753:473,test,tests,473,https://psicode.org,https://github.com/psi4/psi4/pull/2753,1,['test'],['tests']
Testability,## Description; Eliminates a compilation warning due to the way the copy constructor and = operator were disabled in the PKWorker class. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [ ] Use C++11 `delete` syntax . ## Checklist; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1129:334,test,tests,334,https://psicode.org,https://github.com/psi4/psi4/pull/1129,2,['test'],['tests']
Testability,"## Description; Enable mp2-d gradients (for dfmp2 only). ## Todos; - [x] interface and test mp2-d findif and analytic gradient code, calling QCEngine and a different version of the `mp2d` executable (was v0.1, now v1.1); - [x] `dashparam.py` moved in QCEngine https://github.com/MolSSI/QCEngine/pull/85 so changes needed to be made here, too; - [x] set disp qcvars on wfn, not core; - [x] separate processing of `_disp_functor` so it can work better with mp2.; - note that mp2d energies follow the ""dft"" pattern in `proc.py`, while gradients follow the ""mp2"" pattern. This is awkward but simplest until dft double-hybrid gradients pave the way.; - [ ] none of this is going to work until aforementioned PR is merged and qcng `v0.7.0` released. ## Checklist; - [x] Tests added for any new features; - [x] full tests is clean locally, except for `dft-pruning`. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1661:87,test,test,87,https://psicode.org,https://github.com/psi4/psi4/pull/1661,3,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,"## Description; Enable v2rdm_casscf build from psi4. Add tests. This gets Eugene's renovated 0.5 plugin that now has gradients working again with psi4. Suppresses the plugin ""module loaded"" text since that command isn't called directly anymore and the text was interfering with CMake by corrupting the cache. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/866:57,test,tests,57,https://psicode.org,https://github.com/psi4/psi4/pull/866,1,['test'],['tests']
Testability,"## Description; Enables dispersion corrected F-/ISAPT with optimal damping parameters, calling QCEngine for pairwise DFTD3 analysis. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Toggle empirical/exact dispersion in F-/ISAPT, call relevant damping functions; - [x] Parses pairwise atomic D3 interactions from QCEngine & DFTD3; - [ ] Functional group partitioning of D3 pairwise interactions. ## Questions; - [ ] Current test ""fails"" with 1.e-5 Eh difference between direct D3 IE and supramolecular D3 IE. Likely due to precision of pairwise atomic contact energies from DFTD3, which may be addressed in subsequent PRs to QCEngine. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1753:472,test,test,472,https://psicode.org,https://github.com/psi4/psi4/pull/1753,4,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,"## Description; Enables plugin gpu_dfcc as external plugin compiled with psi4. ## Todos; * **User-Facing for Release Notes**; - [x] enables GPU-accelerated DF-CCSD. ## Checklist; - [x] tests comparing energies from DF-CCSD and GPU DF-CCSD -- present in psithon and psiapi; - [x] check for NVIDIA compilers and skip compilation if they are missing -- no need since user's `ENABLE_gpu_dfcc=ON` means build-or-die-trying; - [x] For `ENABLE_gpu_dfcc=ON` and built, on a sys w/o GPUs, cmake tests will fail, pytest test will skip. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/997:185,test,tests,185,https://psicode.org,https://github.com/psi4/psi4/pull/997,3,['test'],"['test', 'tests']"
Testability,"## Description; Enables screening of small densities using LibXC's built-in functionality. Enables user to set custom values. ; This fixes, e.g., issues with calculating the H-atom with many functionals. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] introduces `xc_func_set_dens_threshold`; - [x] `DFT_DENSITY_TOLERANCE` as a (expert) user option; - [x] related PsiAPI options for Functional/LibXCFunctional/Superfunctional. ## Questions; - [ ] `lsda/meta_cutoff` routines seem unused. Remove?; - [x] default is **off** . ## Checklist; - [x] Tests added for any new features; - [x] documentation added; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge. ----. Python API notes (as one would use in `superfunctionals.py`); It is recommend to set the threshold via the SuperFunctional class; e.g. `sup[0].set_density_tolerance(1e-10) `. Alternatively one can set the threshold also via the LibXCFunctional class, and potentially; set individual thresholds for the components. Below sets the same threshold for all XC kernels.; ```; dens_cut=core.get_option(""SCF"",""DFT_DENSITY_TOLERANCE""); if sup[0].is_libxc_func():; sup[0].c_functionals()[0].set_density_cutoff(dens_cut); # print(""screening python:"",sup[0].c_functionals()[0].density_tolerance()); else:; for x_func in sup[0].x_functionals():; x_func.set_density_cutoff(dens_cut); for c_func in sup[0].c_functionals():; c_func.set_density_cutoff(dens_cut); ```; ---. Tests concerning the threshold:; `1e-12` passes all tests without issues; `1e-10` fails only at `pcmsolver-dft` else everything passes. Testing meta-GGA TPSS/aug-pcseg-1 on the A24 benchmark set /w ghost-atoms (simple organic molecules):; [cut10_tpss.apc1.out.txt](https://github.com/psi4/psi4/files/4475320/cut10_tpss.apc1.out.txt); [cut12_tpss.apc1.out.txt](https://github.com/psi4/psi",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1860:594,Test,Tests,594,https://psicode.org,https://github.com/psi4/psi4/pull/1860,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; Enhances user experience for DF-CCSD(T) gradients. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] timings for DF-(T) gradient (copied from fnocc module); - [x] corrects ijk count for gradient (full combination instead of unique pairs). ## Checklist; - [x] relevant tests run (dfccsd-t-grad1). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1241:332,test,tests,332,https://psicode.org,https://github.com/psi4/psi4/pull/1241,1,['test'],['tests']
Testability,## Description; Ensures JSON is written back to file when called from CLI. Not entirely sure of a good way to test this however to ensure that it is not broken again without a fairly involved script. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1369:110,test,test,110,https://psicode.org,https://github.com/psi4/psi4/pull/1369,1,['test'],['test']
Testability,"## Description; Even though Intel+defaults conda gcc7.3, azure gcc-s, and c-f conda gcc9 are perfectly fine with it, defaults conda gcc7.3 as primary compiler segfaults if the `py_psi_get_atomic_point_charges` fn is removed. I don't understand it, but I will appease it. All other changes are fixing stray non-ascii chars, since that's one of my routine steps when things don't make sense. Checking full tests locally. EDIT: full tests clean. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2175:404,test,tests,404,https://psicode.org,https://github.com/psi4/psi4/pull/2175,2,['test'],['tests']
Testability,"## Description; Exactly what it says in the title. New `libmints` functions mean a @jturney ping, and new functions messing with integrals mean an @andysim ping. Also, a positive LoC PR. Sad. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Metric derivatives and derivative of the 3-center integrals are now available to Python. ## Checklist; - [x] I've tested that P4N DF-OMP2 gradients using these new functions match `dfocc` gradients to 6 decimal places, but that isn't suitable for the test suite. I'm open to suggestions on tests. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2088:413,test,tested,413,https://psicode.org,https://github.com/psi4/psi4/pull/2088,3,['test'],"['test', 'tested', 'tests']"
Testability,## Description; Exactly what it says in the title. This is a preliminary PR before I make some other `OEProp` changes. ## Checklist; - [x] `properties` tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2507:152,test,tests,152,https://psicode.org,https://github.com/psi4/psi4/pull/2507,1,['test'],['tests']
Testability,"## Description; Exports Boys localization for plugins. ## Checklist; - [X] ""smoke"" tests pass. ## Status; - [X] Ready for review; - [X] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1026:83,test,tests,83,https://psicode.org,https://github.com/psi4/psi4/pull/1026,1,['test'],['tests']
Testability,"## Description; Exports electric dipole derivative integrals to Python side for use in calculating VCD. ## Todos; - [x] Adds `.def(""ao_elec_dip_deriv1"")` and `.def(""mo_elec_dip_deriv1"")` binding to `psi4/src/export_mints.cc`; - [x] Adds `ao_elec_dip_deriv1()` and `mo_elec_dip_deriv1()` definition/declaration to `psi4/src/psi4/libmints/mintshelper.cc(h)`; - [x] Adds `ao_elec_dip_deriv1_helper()` helper function to `psi4/src/psi4/libmints/mintshelper.cc(h)`. ## Checklist; - [x] Add `/tests/pytests/test_mints.py`; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1799:487,test,tests,487,https://psicode.org,https://github.com/psi4/psi4/pull/1799,3,['test'],['tests']
Testability,"## Description; Exports intermediate energies computed within N-Body driver to psivars named `N-BODY {cluster-identity} TOTAL ENERGY` for workflow incorporation and sanity-checking. Convention for `cluster-identity`: `(monomer_tuple)@(basis_tuple)` enumerates the particular monomers involved in the cluster computation in `monomer_tuple`, and enumerates the basis set used within the cluster computation in `basis_tuple`. In this way, ghost monomers are easily identified as any fragment with basis functions (included in `basis_tuple` not present in `monomer_tuple`. For example,; ```; ""N-BODY (1, 2)@(1, 2, 3) TOTAL ENERGY"" => -529.655058639489; ```; indicates that the total energy for the fragment (1, 2) in basis set (1, 2, 3) is -529.66 [Eh]. . ## Todos; - [x] Variable documentation (pending notation consensus, see questions below). Notable points that this PR has either accomplished or will accomplish.; * **User-Facing for Release Notes**; - [x] Psivar export of intermediate energies in N-Body for workflow integration. ## Questions; - [ ] Is the cluster identification syntax described above suitably intuitive? Should the `@` symbol be replaced with another, perhaps `:`, to remove potential confusion with ghost atoms notation in the molecule block?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/952:1287,Test,Tests,1287,https://psicode.org,https://github.com/psi4/psi4/pull/952,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; Expose the function C_DGELS (found in `qt.h`). ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2356:117,test,tests,117,https://psicode.org,https://github.com/psi4/psi4/pull/2356,2,['test'],['tests']
Testability,"## Description; Exposition of the function Fa_subset and Fb_subset to python. ## Todos; There really are not todos here. Beforehand it was quite cumbersome to get the F matrix in AO form. . ## Questions; - [ ] Was the API made private on purpose? If yes, reject this request. ## Checklist; - [ ] Tests added for any new features:; No tests were added.; - [ ] [All or relevant fraction of full tests run] ; ctest -L quick runs through. ## Status; - [X] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1127:296,Test,Tests,296,https://psicode.org,https://github.com/psi4/psi4/pull/1127,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; Extracts some miscellaneous, uncontroversial and minor, changes from #1443 . ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Use `pybind11_add_module` to declare the Python module at the CMake level. This follows suggestions from the pybind11 project. Note that I had to deactivate the link-time optimization (the `NO_EXTRAS` flag). I'd get `Aborted (core dumped)` otherwise with GCC (tested with versions 5, 6, and 7); - [x] More `auto`-izing and switch to the free functions in the `linalg` namespace. . ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1595:451,test,tested,451,https://psicode.org,https://github.com/psi4/psi4/pull/1595,1,['test'],['tested']
Testability,"## Description; Extracts the `Exception`-based error message and prints it out in an attention-seeking box. ## Checklist; - [x] few manual tests. ## Status; - [x] Ready for review; - [x] Ready for merge. ----; Example:; ```; Cleaning optimization helper files. PsiException: Could not converge geometry optimization in 1 iterations. Traceback (most recent call last):; File ""/Users/kruse/qc/psi4.bin/bin/psi4"", line 331, in <module>; exec(content); File ""<string>"", line 29, in <module>; File ""/Users/kruse/qc/psi4.bin/lib/psi4/driver/driver.py"", line 1201, in optimize; raise OptimizationConvergenceError(""""""geometry optimization"""""", n - 1, wfn). psi4.driver.p4util.exceptions.OptimizationConvergenceError: Could not converge geometry optimization in 1 iterations. Printing out the relevant lines from the Psithon --> Python processed input file:; """""",""LiF2m""); core.IO.set_default_namespace(""LiF2m""); core.set_global_option(""BASIS"", ""minix""); core.set_global_option(""SCF_TYPE"", ""pk""); core.set_global_option(""GEOM_MAXITER"", 1); --> optimize('hf'). !----------------------------------------------------------- !; ! !; ! Could not converge geometry optimization in 1 iterations. !; ! !; !----------------------------------------------------------- !. Psi4 stopped on: Thursday, 09 April 2020 10:17AM; Psi4 wall time for execution: 0:00:00.77. *** Psi4 encountered an error. Buy a developer more coffee!; *** Resources and help at github.com/psi4/psi4.; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1862:139,test,tests,139,https://psicode.org,https://github.com/psi4/psi4/pull/1862,1,['test'],['tests']
Testability,"## Description; FINDIF's geometry generator is brought Py-Side, per [#884](https://github.com/psi4/psi4/issues/884). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Geometry generators are now unified, so we don't need to edit all three generators when one is bugged.; - [x] Various PyBinding has been done. Among other things, the new Py-side compute_atom_map function from pyvib2 now works with psi4 molecules.; - [x] Fixes a bug in the `CharacterTable` copy constructor member initialization list, which used to require a string to be an integer.; - [x] Getting geometries for finite difference calculations is now Py-side.; - [x] Computing gradients from energies is now Py-side.; - [x] Computing hessians from gradients is now Py-side.; - [ ] Computing hessians from energies _will be_ Py-side.; - [ ] Add the banner.; - [ ] Finish renaming the finite difference functions.; - [ ] Review the findif test suite and add any tests as needed. In particular, make sure the functions are agnostic as to psi4 vs. qcdb molecules.; - [ ] Run the entire test suite, to make sure my PyBind'ing hasn't caused any deep problems.; * **User-Facing for Release Notes**; - [x] A warning now displays if you attempt to access-by-index or iterate over an irreped object, instead of using a NumPy accessor. ## Questions; - [ ] I had to change the internals of SymmetryOperation to make PyBind happy. I trust there are no objections?. ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1010:971,test,test,971,https://psicode.org,https://github.com/psi4/psi4/pull/1010,3,['test'],"['test', 'tests']"
Testability,"## Description; FIxes the `fcidump` function for C1 symmetry. The looping over irreps was done incorrectly and the tests did not catch it. ; As noted by @loriab, the UHF FCIDUMP files seem erratic when it comes to the number of nonzero two-electron integrals printed out. ~I am tracking down the problem in issue #980 This PR disables the generation of integral dumps from UHF references.~. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Fix `fcidump` function for C1 symmetry.; - [x] More robust testing facilities for FCIDUMP. Headers are compared and integrals are used to recompute the SCF one-, two-electron, total electronic and MP2 correlation energies. These are compared to the values computed by Psi4. This also fixes #980 Thanks @dgasmith!. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/957:115,test,tests,115,https://psicode.org,https://github.com/psi4/psi4/pull/957,5,"['Test', 'test']","['Tests', 'testing', 'tests']"
Testability,## Description; Fedora switched to the use of [FlexiBLAS](https://www.mpi-magdeburg.mpg.de/projects/flexiblas) in Fedora 33 as a unified interface to various BLAS/LAPACK implementations. This PR ports the patch by Björn Esser from Fedora to Psi4 per Fedora's guidelines of contributing any patches back upstream. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2246:497,Test,Tests,497,https://psicode.org,https://github.com/psi4/psi4/pull/2246,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; Finishes fixing up the full test suite. Full tests should now pass. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/717:44,test,test,44,https://psicode.org,https://github.com/psi4/psi4/pull/717,2,['test'],"['test', 'tests']"
Testability,## Description; First look at psi4-optking3.0 interface. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] replaces optking 2.0 call with optking 3.0 (python). ## Questions. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1120:259,Test,Tests,259,https://psicode.org,https://github.com/psi4/psi4/pull/1120,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; First we had to constrain einsums to the openblas variant on linux to get the env to solve b/c the most recent libblas wasn't available for MKL 2023. Then that got fixed on c-f and we could use the mkl variant. But that as a constraint, of course, won't work on Mac Silicon, which doesn't have MKL. It'd be cleanest if the solver handled it, so I'm giving the no-constraint a try. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] RN 1; - [ ] RN 2. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3163:905,Test,Tests,905,https://psicode.org,https://github.com/psi4/psi4/pull/3163,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; First, this PR cleans up some manual memory management in `libscf_solver`, including a memory leak of an `nao`-by-`nso` matrix created once per call to the SCF code. During the course of fixing that, I uncovered a correctness error in `libmints`: the `dgemv` function was using rows rather than cols for an argument. The original choice was correct in Fortran-style indexing but not C-style indexing and disagreed with every other `C_DGEMV` call in Psi. It didn't cause any issues because `Vector::dgemv` is almost never used in Psi. The one other time I found it used was for a Hermitian matrix, which of course won't have problems. ## Questions; - [x] Jet, please double-check my claim of a bug in `libmints`. ## Checklist; - [x] Quick tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2347:754,test,tests,754,https://psicode.org,https://github.com/psi4/psi4/pull/2347,1,['test'],['tests']
Testability,## Description; Fix #2330. There was a unit error when the molecule is specified in Bohr. Now the fisapt-ext-abc test case and the modified script in #2330 give the same answer. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2331:113,test,test,113,https://psicode.org,https://github.com/psi4/psi4/pull/2331,4,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,"## Description; Fix a minor logic error in DLPNO-MP2 code, where Mulliken charges are used for determining local density fitting domains, also cleans up variable names (removes underscores from variables that are not instance variables). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2707:28,log,logic,28,https://psicode.org,https://github.com/psi4/psi4/pull/2707,1,['log'],['logic']
Testability,"## Description; Fix for #1102. We were subtracting ECP's, as (Z + ECP) was > 0 (usually around 10), even when the atom was ghosted (Z == 0). ## Questions; - [x] Should this be applied against master or against #953?. ## Checklist; - [x] [All or relevant fraction of full tests run.](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests) Test `dfmp2-ecp` modified to check for correct behaviour.; - [x] Fix #843. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1109:271,test,tests,271,https://psicode.org,https://github.com/psi4/psi4/pull/1109,3,"['Test', 'test']","['Test', 'tests']"
Testability,## Description; Fix more instances where RI inverse overlap is formed without the proper value for the fitting condition. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1546:297,Test,Tests,297,https://psicode.org,https://github.com/psi4/psi4/pull/1546,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; Fix occurrences of `psi4.property` in the documentation and replace by `psi4.properties`. ## Checklist; - [-] Tests added for any new features; - [-] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1762:126,Test,Tests,126,https://psicode.org,https://github.com/psi4/psi4/pull/1762,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; Fix the mismatch issue on Github (#2258) and on the forum [http://forum.psicode.org/t/slight-mismatching-of-casscf-between-total-mcscf-energy-and-mcscf-root-0-energy/1693/4](http://forum.psicode.org/t/slight-mismatching-of-casscf-between-total-mcscf-energy-and-mcscf-root-0-energy/1693/4).; A more efficient way to obtain the CI coefficients after a redundant orbital rotation would be a direct transformation without solving the CI again, see [https://doi.org/10.1063/1.479573](https://doi.org/10.1063/1.479573). There might be two related issue:; - `H0block_` in DETCI keeps filling up during the MCSCF macro iteration. This will lead to repeated entries during the MCSCF iterations and sometimes lead to uncertain numerical behavior.; - The `""DFILE""` CI guess for the CI after orbital canonicalization is directly related to this issue. Using this guess leads to very slow convergence for the CI. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2259:936,Test,Tests,936,https://psicode.org,https://github.com/psi4/psi4/pull/2259,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; Fixed wB97X-D3 to use the correct libxc functional, added KMLYP, and added/modified tests for both. Fixes #2206. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2207:100,test,tests,100,https://psicode.org,https://github.com/psi4/psi4/pull/2207,4,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; Fixes #1052 at long, long last: when the user explicitly declares a symmetry, findif is now smart enough to put displacements in the proper subgroup. As part of the fix, control over molecule cloning for finite difference has passed to `_process_displacement`. It seemed easier (and more appropriate) than adding code to make a new clone in each for loop. The clone would be necessary so that each displacement can have its own symmetry. Since I was touching that part of the code anyways, I have reorganized so that the reference is guaranteed to be the first displacement. This has the advantage that if orbital reading is enabled, the following displacements will be able to read from the reference, as intended. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fixes #1052; - [x] Exposes more C functions to Python; - [x] Move the reference geometry first for ease of orbital reads. ## Checklist; - [x] Tests modified to account for bug fix; - [x] All findif tests passing. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1424:972,Test,Tests,972,https://psicode.org,https://github.com/psi4/psi4/pull/1424,2,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; Fixes #1288. The trouble was that Bozkaya's code used libtrans to transform integrals, and those were written to disk in their antisymmetrized, redundancy-free form, as libtrans does. The DCT code gets different integrals from libtrans but then sorts those to get the same blocks as Bozkaya wrote earlier in the redundant form. Because the DCT-sorted integral block had antisymmetry redundancies, it was larger than the libtrans block that did not have those redundancies. Fixed by changing the code to use a block without those redundancies. I imagine this is of interest to @amjames and @ssh2. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fixes 1288. ## Checklist; - [x] DCFT tests run. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1336:747,test,tests,747,https://psicode.org,https://github.com/psi4/psi4/pull/1336,1,['test'],['tests']
Testability,"## Description; Fixes #1290 by wrapping calls to deprecated (and removed in Netlib's LAPACK 3.8.0) with appropriate replacements. **UPDATE**; I have added a `PSI_DEPRECATED` macro in `pragma.h` to be used to deprecate functions, classes, variables. It will emit a warning at compile-time. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Added a `PSI_DEPRECATED` macro; - [x] Wrap call to `DGEGS` with `DGGES`. Deprecate `C_DGEGS`.; - [x] Wrap call to `DTZRQF` with `DTZRZF`. Deprecate `C_DTZRQF`.; - [x] Wrap call to `DGEGV` with `DGGEV`. Deprecate `C_DGEGV`; - [x] Wrap call to `DGELSX` with `DGELSY`. Deprecate `C_DGELSX`; - [x] Wrap call to `DGEQPF` with `DGEQP3`. Deprecate `C_DGEQPF`; - [x] Check whether `DGGSVD3` and `DGGSVP3` are available in `tgt::lapack`. Fence off their use accordingly based on the `LAPACK_HAS_DGGSVD3` and `LAPACK_HAS_DGGSVP3` preprocessor variables, respectively. ; - [x] Wrap call to `DGGSVD` with `DGGSVD3`, if the latter is available. Deprecate `C_DGGSVD`.; - [x] Wrap call to `DGGSVP` with `DGGSVP3`, if the latter is available. Deprecate `C_DGGSVP`. ## Checklist; None of these subroutines were used in Psi4, so I only ran smoketests locally.; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge **SQUASH**",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1314:1236,Test,Tests,1236,https://psicode.org,https://github.com/psi4/psi4/pull/1314,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; Fixes #1370 and cleans up some code relating to orbital occupations. `scf_iterator.py` is yapf-ified, the occupation printing code is now Py-side, and two variables specifying the same thing (`nirreps` and `nirrep_`) in the HF initialization have been condensed into a single variable. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] An error message is now raised when the electron count from DOCC and SOCC is inconsistent with the molecule's electron count. ## Checklist; - [x] `scf` and `findif` tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1637:565,test,tests,565,https://psicode.org,https://github.com/psi4/psi4/pull/1637,1,['test'],['tests']
Testability,## Description; Fixes #1528: the index offsets were wrong for ghost atoms. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1529:250,Test,Tests,250,https://psicode.org,https://github.com/psi4/psi4/pull/1529,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; Fixes #1698. Psi wasn't sending AOs normalized to unity, and NBO was correcting it by transforming the Fock matrix and the density matrix both _inversely_ to the overlap matrix. That's not how you want to do it! The Fock matrix transforms the same way, but the density matrix (and the AO index of C) transform inversely. Because NBO can't be trusted to do the transformation correctly, Psi does it itself. To make coding that easier, the NBO writing was moved to Python. The C-code still exists until 1.5, where it shall be ripped out of `libmints`. Deprecation warnings have been added. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fixes a bug causing incorrect Psi to produce incorrect NBO input files involving Cartesian basis sets with angular momentum of d or more (#1698).; - [x] Moved NBO Writing python-side.; - [x] Please use `wfn.write_nbo(name)` to write NBO files from now on. ## Checklist; - [x] Confirmed that the old and new NBO interfaces produce the same input.47 files for the current test case and a test case with linear dependencies.; - [x] Confirmed that the NAO populations and energies match with the 6-31+G(d) basis between QChem and Psi4. This confirms the accuracy of the overlap, AO density, and AO Fock matrices. The disagreements are either in the last decimal place or due to setting up coordinate systems.; - [x] Confirmed that the MOs in terms of AOs, as reported by NBO, match with the 6-31+G(d) basis between QChem and Psi4. This additionally checks the accuracy of the C matrix. Again, the order of the d matrices shifts due to different orientation systems in my test cases. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1790:1072,test,test,1072,https://psicode.org,https://github.com/psi4/psi4/pull/1790,3,['test'],['test']
Testability,"## Description; Fixes #1918 by removing the subspace preconditioner, per @robertodr's recommendation. This also adds some more comments to the code, crucially, the fact that this solves the problem `Hx=b` as opposed to `Hx+b=0`. Signs are important. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Disables the broken subspace preconditioner in the CGRSolver. ## Checklist; - [x] Tested that a helpful warning runs if the user specifies a subspace preconditioner for the CGRSolver. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1919:430,Test,Tested,430,https://psicode.org,https://github.com/psi4/psi4/pull/1919,1,['Test'],['Tested']
Testability,"## Description; Fixes #2136 by remembering to close a DPD file, because I'm a glutton for DF gradient bugs. I'm impressed that these gradients are correct. I would have thought that the standard `libmints/deriv.cc` technology couldn't have gotten DF gradients right, but you can't argue with finite difference tests. I'll have to look into this at a later date. ## Todos; - [x] DF-CC2 gradients working. ## Checklist; - [x] Tests added for newly working DF-CC2 gradients. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2137:310,test,tests,310,https://psicode.org,https://github.com/psi4/psi4/pull/2137,2,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; Fixes #2265.; This is a first attempt to make the feature work in `cpscf_linear_response`, but the code is a bit ugly and needs to be cleaned up...; ~~I'm also not 100% sure why/where correct pre-factors/signs need to be added 🤯 😄~~. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] UHF linear response properties; - [x] removed user-provided vectors from `cpscf_linear_response`. ## Questions; - [x] How should user vectors be handled?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2266:532,Test,Tests,532,https://psicode.org,https://github.com/psi4/psi4/pull/2266,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; Fixes #994 and #1038. FT97 does not want to converge, so I gave it a handicap. And with that, all the tests that run in a reasonable amount of time pass on a release build. ## Checklist; - [x] [All full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1378:118,test,tests,118,https://psicode.org,https://github.com/psi4/psi4/pull/1378,3,['test'],['tests']
Testability,## Description; Fixes a PCM test failure when running `psi4 --test`. The bug was pointed out by @loriab in #697 . Closes #697. ## Questions; - [x] Should I also modify `tests/pytest/test_addons.py` to mirror the contents of `pcmsolver/scf/input.dat` so that it doesn't rely on `P::e.globals`? Both methods to get `PCM POLARIZATION ENERGY` are now tested. See discussion in #697 . ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/701:28,test,test,28,https://psicode.org,https://github.com/psi4/psi4/pull/701,4,['test'],"['test', 'tested', 'tests']"
Testability,## Description; Fixes a bug in the DFJK gradient algorithm when using disk paging. On top of drawing similarities to Python and C++ one should be very aware of their differences as well. Bit me here. Fixes #1094 and Fixes #1095. As a note it is not possible to ensure that the provided test continues to check the paging algorithms as circumstance may change. Is there a good way to encode this thought into the test?. Something to back port quickly. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1096:286,test,test,286,https://psicode.org,https://github.com/psi4/psi4/pull/1096,2,['test'],['test']
Testability,"## Description; Fixes a bug in the semicanonicalization procedure cause by an uninitialized matrix. This also exposes a `set_Lagrangian` in the `Wavefunction` class, which is needed to make gradients work for plugins not based on `Wavefunction`. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1847:300,test,tests,300,https://psicode.org,https://github.com/psi4/psi4/pull/1847,2,['test'],['tests']
Testability,"## Description; Fixes a bug that occurs when one runs `psi4 --qcschema` and requests that the wavefunction is returned. . Before the orbitals / fock matrix / etc. are returned, all AO-indexed tensors are sorted according to CCA ordering: `Ca` and `Cb` are dimension [AO x MO], so their rows are sorted. `Fa`, `Fb`, `Da`, and `Db` are all dimension [AO x AO], so they are sorted by both row and column. `epsilon_a` and `epsilon_b` are not AO-indexed, so they shouldn't be sorted at all. As an example, the following HF calculation has fewer MOs than AOs because of linear dependencies, and Psi4 will throw an error when `epsilon_a` is treated as if it were of length AO:; ```; import psi4. ret = psi4.schema_wrapper.run_qcschema({; ""molecule"": {; ""geometry"": [; 0.0, 0.0, -0.1294769411935893,; 0.0, -1.494187339479985, 1.0274465079245698,; 0.0, 1.494187339479985, 1.0274465079245698; ], ; ""symbols"": [""O"", ""H"", ""H""],; }, ; ""driver"": ""energy"",; ""model"": {; ""method"": ""hf"",; ""basis"": ""d-aug-cc-pvqz"" # larger basis -> more lin deps; }, ; ""keywords"": {; ""scf_type"": ""df"",; ""s_tolerance"" : 1e-4, # loosen lin dep cutoff; }, ; ""protocols"": {; ""wavefunction"" : ""orbitals_and_eigenvalues"",; } ; ; }); print(ret.error); ```. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2112:1270,test,tests,1270,https://psicode.org,https://github.com/psi4/psi4/pull/2112,2,['test'],['tests']
Testability,## Description; Fixes a bug that prohibits computing stability analysis for wfns with an X2C Hamiltonian.; Previously the relativistic basis was not set which made mints unhappy. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1374:199,Test,Tests,199,https://psicode.org,https://github.com/psi4/psi4/pull/1374,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; Fixes a bug where a Becke grid is used instead of Treutler in case a Treutler grid was requested. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2044:298,Test,Tests,298,https://psicode.org,https://github.com/psi4/psi4/pull/2044,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; Fixes a bug where the following input file crashes:; ```; molecule {; O; H 1 1 ; H 1 1 2 104.5; }. set basis sto-3g. set scf {; damping_percentage 20; }. energy('scf'); ```. `damping_percentage` is defined as a _double_. Before this commit, Psi would naively set the relevant keyword to be the int the user gave it and then complain when it tried to read options later. It now knows to cast to double. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fixes type conversion bug in options system. ## Checklist; - [x] No tests run beyond Travis and that the input file up top. This PR doesn't need it. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1352:584,test,tests,584,https://psicode.org,https://github.com/psi4/psi4/pull/1352,1,['test'],['tests']
Testability,"## Description; Fixes a segfault discovered by @mfherbst while developing #2767.; It was caused by adding `#include ""psi4/libmints/potentialint.h""` in `mintshelper.cc`, because `potentialint.h` included L2's `engine.h`. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Fix ""future"" segfault by reorganizing PCM functors (moved to `.cc` files to avoid L2 `engine.h` include). See discussion in #2767 . ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2770:643,Test,Tests,643,https://psicode.org,https://github.com/psi4/psi4/pull/2770,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; Fixes an error involving a FNO-(T) delta correction for CBS as in `energy('fno-ccsd/cc-pVDZ+D:fno-ccsd(t)/cc-pVDZ'`. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1377:187,test,tests,187,https://psicode.org,https://github.com/psi4/psi4/pull/1377,2,['test'],['tests']
Testability,"## Description; Fixes and closes #1298. `full_hess_every` now takes hessians at the latest geometry rather than the reference geometry. Because this bug was not caught by the test suite, I've added a test to catch this bug, and it clocks in at just over 6 seconds on my Mac. ## Checklist; - [x] Tests added for newly working features. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1299:175,test,test,175,https://psicode.org,https://github.com/psi4/psi4/pull/1299,3,"['Test', 'test']","['Tests', 'test']"
Testability,## Description; Fixes bug reported [here](http://forum.psicode.org/t/fixed-dihedral-optimization-error/323). I was sloppy and apparently no one had tried a 0 degree fixed angle before. * **User-Facing for Release Notes**; - [ ] Fixes bug preventing fixed (target) values of exactly zero. ## Status; Passed HOOH at 0 degrees. Still need to run other psi standard tests. ; - [ ],MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/535:362,test,tests,362,https://psicode.org,https://github.com/psi4/psi4/pull/535,1,['test'],['tests']
Testability,"## Description; Fixes calculation of nuclear-nuclear interaction energy if a QM/MM point charge and a Ghost atom are at the same position as in the example below. Since a Ghost atom has no nuclear charge, it should not contribute. At any other position apart from the nuclear centers, it would not contribute. But since at this position, the distance between the Ghost and the atom is zero such that the current code wrongly produces a NaN energy. Setups like this are relevant for [alchemical calculations](https://dx.doi.org/10.1103/PhysRevResearch.2.023220) where fractional nuclear charges are required. ```; molecule mol {; @N 0. 0. 1.; N 0. 0. 0.; no_reorient; no_com; symmetry c1; -7 1; }. Chrgfield = QMMM(); Chrgfield.extern.addCharge(7.05, 0., 0., 1.); psi4.set_global_option_python('EXTERN', Chrgfield.extern). set basis 6-31G; set reference rhf; e, wfn = energy('pbe', return_wfn=True); ```. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish. ## Questions. ## Checklist; - [x] [All or relevant fraction of full tests run on local machine](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1993:1063,test,tests,1063,https://psicode.org,https://github.com/psi4/psi4/pull/1993,2,['test'],['tests']
Testability,## Description; Fixes crash when the automatic Cholesky procedure is triggered by a linearly dependent basis set. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fixes a bug where the program crashes when the automatic Cholesky cleanup is triggered; - [x] Adds a test for the automatic Cholesky cleanup; - [x] Doesn't print out the Cholesky decomposed matrix any more; saving tens to hundreds of megabytes in log file size; - [x] Unifies printout between the partial Cholesky and other orthogonalization methods. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1817:313,test,test,313,https://psicode.org,https://github.com/psi4/psi4/pull/1817,5,"['Test', 'log', 'test']","['Tests', 'log', 'test', 'tests']"
Testability,## Description; Fixes inconsistent basis set parsing as decribed in https://github.com/psi4/psi4/issues/1996. ## Todos. ## Questions. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2002:154,Test,Tests,154,https://psicode.org,https://github.com/psi4/psi4/pull/2002,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; Fixes issue #3085 . ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] `oeprop()` args are no longer case-sensitive (py-side). ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3086:285,Test,Tests,285,https://psicode.org,https://github.com/psi4/psi4/pull/3086,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; Fixes issues #2487 where the `print` keyword was not being properly set in part of `detci` module. S^2 value now prints out if `calc_s_squared` is turned on. ## Checklist; - [x] CI tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2589:197,test,tests,197,https://psicode.org,https://github.com/psi4/psi4/pull/2589,1,['test'],['tests']
Testability,"## Description; Fixes many compiler warnings by no longer passing redundant arguments to Matrix constructors. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Fixes 83 compiler warnings, 81 of which were coming from `dct`. ## Checklist; - [x] quick tests and dct tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3175:440,test,tests,440,https://psicode.org,https://github.com/psi4/psi4/pull/3175,2,['test'],['tests']
Testability,"## Description; Fixes some of the issues with ERD in Psi4. Moves a piece of the normalization from ERD to Psi4. This prevents multiplication by zero inside ERD, which results in incorrect integral values. Note that the multiplication by zero doesn't happen in Psi4, as the normalization routine doesn't get called for a ""zero"" basis set (ie, in density fitting). **Warning** I don't know how well-tested ERD in Psi4 is. I still get some failing tests, although there is certainly an improvement from before. Ideas for why this might be are welcome. ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/587:397,test,tested,397,https://psicode.org,https://github.com/psi4/psi4/pull/587,2,['test'],"['tested', 'tests']"
Testability,"## Description; Fixes the ""decimal point of death for Zn"" BS radius that leads to likely wrong DFT results (and bad SCF convergence).; Relevant for MBIS PR ( #1961) test systems, where the error became apparent. ZnO molecule with PBE0/def2-SVP and 434 spherical grid points:; | radial points | old N(electrons) | old E | new N(electrons) | new E |; |---------|--------------------|---------------------|--------------------|---------------------|; | 75 | 42.38542254742733 | -1867.6992099879865 | 37.999997369772665 | -1853.8406995133948 |; | 99 | 35.70883041483774 | -1843.0139920380993 | 37.99999898528541 | -1853.8406965374315 |; | 200 | 37.996233783694734 | -1853.8819221398608 | 37.99999900043764 | -1853.8406976562953 |. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] fixes Zn radius (2551 -> 2.551) !!. ## Checklist; - [x] manual Zn tests. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2000:165,test,test,165,https://psicode.org,https://github.com/psi4/psi4/pull/2000,2,['test'],"['test', 'tests']"
Testability,## Description; Fixes the DKH interface in Psi4. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **User-Facing for Release Notes**; - [X] Test case added comparing to a Molpro calculation. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/702:175,Test,Test,175,https://psicode.org,https://github.com/psi4/psi4/pull/702,1,['Test'],['Test']
Testability,## Description; Fixes the documentation build because I forgot to remove the deleted `adcc` cmake test dir from `doc/sphinxman/document_tests.pl`. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2539:98,test,test,98,https://psicode.org,https://github.com/psi4/psi4/pull/2539,4,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,## Description; Fixes the issue #1694 . ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Calculations work also when the zeroth symmetry block has no basis functions. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1695:267,Test,Tests,267,https://psicode.org,https://github.com/psi4/psi4/pull/1695,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; Fixes up the OpenMP problems. This still needs some tidying, but you can start to take a look. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Mostly this polishes the new OpenMP/Math interface/detection by expanding it to C/CXX/Fortran (thanks, v2rdm, for playing your persistent role of complicating things) and making sure vars are propagated among the externalprojects. Key cmake option is `OpenMP_LIBRARY_DIRS` which is a `;`-sep PATH-like var to search for omp libs if not naturally found. closes #1041 ; - [x] fix a few DISK_DF in driver and add some long-awaited (really, look at the milestone history for that ticket) freq docs in #350 ; - [x] fatal_error's ERD; - [x] bump various upstream/downstream; - [x] get ambit back (can't readily test it except by building plugin). ## Questions; - [x] Roberto and Radovan should look over the CMake. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1053:831,test,test,831,https://psicode.org,https://github.com/psi4/psi4/pull/1053,1,['test'],['test']
Testability,"## Description; Follow-up PR to #2359. This PR implements the direct-density fitted J algorithm (https://pubs.rsc.org/en/content/articlelanding/2002/cp/b204199p) to be used with LinK to allow for performance gains. A new code infrastructure is also introduced that allows for split J/K build algorithms, through the Composite JK class (not callable by user, but a reroute by the developer). Example of how to call my new code:; ```; scf_type direct_df_linK; ```. ### NOTES:; - Composite JK will be extended with other Split JK algorithms in the future (CFMM @andyj10224, and Chain-of-Spheres K @zachglick). ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Introduction of Composite JK class; - [x] Implementation of Direct-DF-J algorithm; - [x] Refactor of LinK algorithm into Composite JK framework. ## Questions; - [x]. ## Checklist; - [x] Tests added for any new features; - [x] Docs added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge. ## Table of Contents (Suggested Review Order); ### 1.) LinK Refactor; - [Removal of LinK from DirectJK](https://github.com/psi4/psi4/pull/2543#discussion_r848777136); - [LinK Class Header Information](https://github.com/psi4/psi4/pull/2543#discussion_r848776564); - [New Home of LinK Algorithm](https://github.com/psi4/psi4/pull/2543#discussion_r848777810). ### 2.) DirectDFJ Algorithm; - [DirectDFJ Header File](https://github.com/psi4/psi4/pull/2543#discussion_r848778214); - [Home of DirectDFJ Algorithm](https://github.com/psi4/psi4/pull/2543#discussion_r848778585). ### 3.) CompositeJK Structure; - [CompositeJK Header Information](https://github.com/psi4/psi4/pull/2543#discussion_r848779185); - [SplitJK Base Class Header Information](https://github.com/psi4/psi4/pull/2543#discussion_r848779584); - [Calling my code from jk",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2543:900,Test,Tests,900,https://psicode.org,https://github.com/psi4/psi4/pull/2543,2,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; For large systems it's often sensible to freeze HF orbitals, rather than dumping a very large FCIDUMP file, only to be slowly read in again and frozen in the downstream program. However, I noticed that the `fcidump` functionality isn't handling the frozen keywords in the expected way (the MO slice goes from `frzcpi` to `active_mopi`, when it should obviously go to `frzcpi+active_mopi`). I've also added a test in `tests/fcidump/input.dat` to check this. The added test would fail on the current master. Additionally, for some reason the patch in #2277 stopped working, and in the current master, the 1/0 e integrals are again 1 space wider than the 2e integrals. This patch also fixes it. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2545:424,test,test,424,https://psicode.org,https://github.com/psi4/psi4/pull/2545,3,['test'],"['test', 'tests']"
Testability,"## Description; For reasons described at https://github.com/PCMSolver/pcmsolver/issues/201, Psi4 has been fixed at PCMSolver v1.2.1 . This updates to v1.2.x with very small (e.g., 1e-8) tweaks to ref values. I do finally understand why v1.3.x was failing, but those are much larger changes to ref values (e.g., 1e-2; probably washes out in relative energies), so I'd like @robertodr to weigh in. UPDATE: The plan is to go with v1.2 for now and wait on v1.3. The conda package is RTG at 1.2 but isn't merged yet. A later rebuild of the 1.8 conda package could include pcmsolver support. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Update PCMSolver to v1.2.3 ~or v1.3.x~. ## Dev notes & details; - [x] add pcmsolver citation printing to psi4 output file; - [ ] build c-f package https://github.com/conda-forge/staged-recipes/pull/22286; - [x] update ecosys GHA to test pcmsolver; - [x] this runs fine locally, and I'm confident in it, so marking ready for review. it'll take a while for CI to catch up to that optimism. ## Checklist; - [ ] ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2903:991,test,test,991,https://psicode.org,https://github.com/psi4/psi4/pull/2903,4,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,"## Description; For some applications it may be helpful to know the converged populations and widths of all shells in MBIS, so here goes the patch. As for the initial values, the info is only printed when debug>=1. ## User API & Changelog headlines; N/A. ## Dev notes & details; - [x] Print converged MBIS shell populations and widths when debug>=1. ## Checklist; - [X] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3102:404,test,tests,404,https://psicode.org,https://github.com/psi4/psi4/pull/3102,2,['test'],['tests']
Testability,## Description; Fractional SAD now honors the atomic ground spin state. A guess with spin-restricted occupations is also available. The fractional code now supports all elements up to Og. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1452:363,Test,Tests,363,https://psicode.org,https://github.com/psi4/psi4/pull/1452,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; Fractional SAD now honors the atomic spin state. The code also now supports all elements up to Og. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Density corresponds to right spin state; - [x] Code supports the whole of the periodic table. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1450:358,Test,Tests,358,https://psicode.org,https://github.com/psi4/psi4/pull/1450,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; Furthers the generality of integral transformations and enables a special workflow, `DIRECT_iaQ`, to alleviate disk IO when transforming to `pqQ` forms. Timings comparing the `DIRECT_iaQ` and `DIRECT` methods are inbound. Edit: Here are some tests that (almost comically) display the efficacy of `DIRECT_iaQ` over `DIRECT` + `pqQ`. 1. Test1: ; [input.txt](https://github.com/psi4/psi4/files/1740970/input.txt); [timer.txt](https://github.com/psi4/psi4/files/1740977/timer.txt). 2. Test2: ; [input.txt](https://github.com/psi4/psi4/files/1740966/input.txt); [timer.txt](https://github.com/psi4/psi4/files/1740974/timer.txt). Notice the difference between the `DFH: MO to disk` timers. . Edit2: I added a reduction on `max_val` in `prepare_sparsity` to ensure thread safety. This was incorrect before. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - DF_Helper now has three methods for integral transformations:; `STORE`: Contracts metric with AO integrals, stores, then transforms.; `DIRECT`: Transforms integrals, contracts with metric.; `DIRECT_iaQ`: Optimized `DIRECT` workflow when using `pqQ` transformed integrals. - DF_Helper outputs any transformed integral form you want: `Qpq`, `pQq`, or `pqQ`. The following can be used for each of the respective methods listed above:; `STORE`: `Qpq`, `pQq`, or (ill-advised) `pqQ`; `DIRECT`: `Qpq`, `pQq`, or (ill-advised) `pqQ`; `DIRECT_iaQ`: `pqQ`. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/913:258,test,tests,258,https://psicode.org,https://github.com/psi4/psi4/pull/913,1,['test'],['tests']
Testability,"## Description; Get Psi4 running correctly with Intel (2021.4) again. I'm sorry to uglify the nice structured bindings (thanks for the name, @robertodr). Edit with any better suggestions. I've got full tests running locally. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2511:202,test,tests,202,https://psicode.org,https://github.com/psi4/psi4/pull/2511,4,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; Get ready for CODATA 2018. I'm stashing this branch for now where I won't forget it. Not targeting v1.4. ## Todos; - [x] sometimes had been importing directly from qcel.constants, which has been always 2014 but in future could be 2014 or 2018 depending on qcel version. So now everyone's using the 2018 object set up as `psi4.driver.constants`; - [x] prepare c-side constants in physconst.h dumped by qcel; - [ ] heal tests from constants change. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1795:434,test,tests,434,https://psicode.org,https://github.com/psi4/psi4/pull/1795,4,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; Get rid of some unused custom DIIS code that I found. ## Checklist; - [x] SAPT tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2334:95,test,tests,95,https://psicode.org,https://github.com/psi4/psi4/pull/2334,1,['test'],['tests']
Testability,"## Description; Gets back to full testsuite passing, fix cmake fix, better random directory labeling. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Changed all the subdirs uniqued by `random` for cfour, dftd3, gcp, basis blocks into `uuid`.; - [x] `MintsHelper::so_potential` was returning C1 matrices w/o applying perturbations, probably an oversight in psi4/psi4#635. Fixed test pcmsolver/dipole, which this had broken.; - [x] Too small memory for dftd3/version so fixed.; - [x] MRCC distributes a GENBAS with insufficient basissets that was getting picked up before psi4's GENBAS. So select psi4's GENBAS specifically.; - [x] The problem addressed by psi4/psi4#652 broke some of the underlying code, letting, for example, `/usr/lib64` into rpath, which is not the purpose of rpath. @susilehtola, please check that the current patch fixes your original psi4/psi4#648; - [x] The 180.npz wan't working for relative execution _e.g._, `(objdir >>>) stage/.../bin/psi4 ../tests/tu1.../input.dat` so fixed. Also moved orb rotation test case to cookbook dir.; * **User-Facing for Release Notes**. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/654:34,test,testsuite,34,https://psicode.org,https://github.com/psi4/psi4/pull/654,4,['test'],"['test', 'tests', 'testsuite']"
Testability,"## Description; HERE IT IS!!! This is a draft of the DLPNO-CCSD PR that will be coming in the next few months. The purpose of this is for the developers and research groups to be able to run and test DLPNO-CCSD before it is officially part of the code. . Credit to @JoseMadriaga for the derivations ; [LocalCCSD1to10.pdf](https://github.com/psi4/psi4/files/11114337/LocalCCSD1to10.pdf). Useful References:; [Original DLPNO-CCSD Paper](https://aip.scitation.org/doi/full/10.1063/1.47735); [Sparse Maps II Paper](https://aip.scitation.org/doi/10.1063/1.4939030). Example Input File; ```; memory 20 GB. molecule mol {; 0 1; O 0.705 0.744 0.16; H -0.071 0.264 0.45; H 1.356 0.064 -0.014; symmetry c1; }. set {; basis cc-pVDZ; scf_type df; freeze_core true; pno_convergence normal; }; energy('dlpno-ccsd'); ```. ### Results (Waterclusters in TZ); [Speedups, relative to DF-CCSD]; ![wc_tz_speedups](https://user-images.githubusercontent.com/60559795/228892229-c3269bf9-3386-4861-8660-92a6dcc3685e.jpeg). [Percent Correlation Energy Recovered, relative to DF-CCSD, all >= 99.9%]; ![wc_tz_percent_corr_recovered](https://user-images.githubusercontent.com/60559795/228892322-7c968c62-f874-496c-84e3-06b65c84803d.jpeg). ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Implement the DLPNO-CCSD algorithm. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [ ] Feel free to use this code, it is not fully tested yet, but preliminary tests show encouraging results, and is MUCH faster than conventional CCSD; - [ ] If you benchmark my code, please post results in the thread. ## Questions; - [ ] Question1. ## Checklist; - [ ] Add documentation; - [ ] Add references to terms and equations; - [ ] Tests a",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2915:195,test,test,195,https://psicode.org,https://github.com/psi4/psi4/pull/2915,1,['test'],['test']
Testability,## Description; Heals tests and marks the tests that _should have caught this_ as `fnocc` tests. ## Checklist; - [x] `ctest -L fnocc` passes _and is now enlarged_. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2444:22,test,tests,22,https://psicode.org,https://github.com/psi4/psi4/pull/2444,3,['test'],['tests']
Testability,"## Description; Here's another JK mini-PR. This one seems to be of interest in multiple future JK-related developments (such as https://github.com/psi4/psi4/pull/3158), so I figured it would be good to add it on its own. This PR changes the behavior of `CompositeJK::name()` so that, instead of returning the value ""CompositeJK"", it returns the names of the underlying `SplitJK` algorithms used. Additionally, using this feature, a new test has been added to `test_compositejk.py`, testing to make sure that proper composite algorithm pairs are called, given an input `SCF_TYPE=J_ALGO + K_ALGO`. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [X] Improves behavior of the `CompositeJK::name()` function. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [X] `CompositeJK::name()` now returns the combined names of the substituent `SplitJK` components rather than ""CompositeJK"".; - [X] Adds new test to ensure proper calling of CompositeJK algorithm pairs. ## Questions; - [X] N/A. ## Checklist; - [X] Tests added for any new features; - [X] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [X] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3182:436,test,test,436,https://psicode.org,https://github.com/psi4/psi4/pull/3182,6,"['Test', 'test']","['Tests', 'test', 'testing', 'tests']"
Testability,"## Description; Honestly, this started as just updating pybind11 to detect via config. It got out of hand, but to good results. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] `exception.message` --> `str(exception)` since former sometimes raises an error in the course of handling another.; - [x] fix python/json testing when PYMOD_INSTALL_LIBDIR is non-default.; - [x] export psi4::core target. use it in plugin. much simplify the psi4Config. tidy up the share installs.; - [x] flatten install dir structure. no more `external/`; - [x] shift importing of official plugins. rename psi4 --plugin* options. add cmake -C line. update CM templates.; - [x] switch over Py detection to PythonLibsNew. Beautify components printing. ; - [x] Move threads detection to target.; - [x] start testing the plugin templates again; - [x] standardize `Psi4Macros` --> `psi4OptionsTools`.; - [x] Correct CXX comp names in autocmake_static_lib (@robertodr, I copied this from you, so you may have it wrong, too). Check enabled langs properly rather than compilers defined so OptionsTools usable to other projects with diff enabled langs.; - [x] switch pybind11 to upstream source. better handle c++ std wrt pybind. `PSI4_CXX_STANDARD` --> `psi4_CXX_STANDARD`.; - [x] compile test of gcc version able to account for -gcc-name/-gxx-name (@bennybp, here's the code for what we talked about once in `custom_cxxstandard.cmake`); - [x] convert restrict test to write its own file.; - [x] kill off LAB and @jturney config files. replace with `cmake -C psi4PluginCache.cmake` suited config file.; - [x] `psi4pasture` --> `pasture`.; - [x] always whole-archive dpd and qt; - [x] `external` --> `external/upstream`, `internals` --> ``external/downstream`; - [x] remove old Find*cmake files. * **User-Facing for Release Notes**; - [x] We changed our python detection module to the one used by NumPy. Also changed so that not actually using libpython anywhere.; - ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/554:381,test,testing,381,https://psicode.org,https://github.com/psi4/psi4/pull/554,2,['test'],['testing']
Testability,## Description; How many PRs does it take to correctly and conveniently print JK memory? This is the fourth. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] SAD guess was printing a dfh memory announcement for every atom type of the SAD guess ever since we starting printing for both sufficient and insufficient AO in-core memory in #1097. This adds a `print_lvl` to DFHelper and sets it to 0 for SAD. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1104:523,test,tests,523,https://psicode.org,https://github.com/psi4/psi4/pull/1104,2,['test'],['tests']
Testability,"## Description; I added a new integral transformation for CASSCF. This PR does the integral transformation as a series of J builds rather than actually carrying out an N^5 integral transformation. For direct, DF, gtfock, this can provide some significant savings. . For example, a system with 3248 basis functions, the AO-DF-CASSCF performs the CASSCF procedure in 7054 second while the DF-CASSCF performs the CASSCF procedure in 14800 seconds. . This is a serial version of the AO-CASSCF procedure. It is possible to implement this in parallel by using a distributed Fock builder. I will make another PR once I can get GTFock to compile, but this code works without GTFock and MPI. . ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Corrected a call to build Q in IncoreSOMCSCF; - [x] Allowing GTFockJK to work better with libfock (can initialize GTFockJK and compute later on); - [x] Added two test cases for this feature: ao-casscf-sp and ao-dfcasscf-sp; - [x] I don't understand how the CI ordering works for frozen core. Might need a little guidance for this. ; ## Questions; - [x] @dgasmith, ; Could you take a look at how to add frozen core to the integral transformation?; I can show you how I have frozen core in my CASSCF, but I don't understand how the CI ordering changes with frozen core.; - [x] I tried to add test cases, but I am not sure if I followed the right way to add test cases. Please take a look to make sure I added those correctly. . ## Status; - [x] If you are fine with no frozen core, this is ready to go.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/520:962,test,test,962,https://psicode.org,https://github.com/psi4/psi4/pull/520,3,['test'],['test']
Testability,"## Description; I didn't know https://github.com/lothian/test-psi4-map existed, so possibly others don't either. Now that we have codemeta.json for this sort of info, let's consolidate there. Added latitude and longitude fields. Also updated Alex Sokolov and Peter Kraus locations. ## Status; - [x] Ready for review; - [x] Ready for merge **SQUASH**",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1305:57,test,test-,57,https://psicode.org,https://github.com/psi4/psi4/pull/1305,1,['test'],['test-']
Testability,"## Description; I don't want to fix py27 bug in #1098, so this evades testing it. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] CI: stop testing py27. insufficient conda pkgs to add py37. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1099:70,test,testing,70,https://psicode.org,https://github.com/psi4/psi4/pull/1099,2,['test'],['testing']
Testability,"## Description; I hate to add 7MB to the repo, but we really ought to have complete/new output.ref's, so here 'tis. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Fresh output.ref for tests; * **User-Facing for Release Notes**. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/705:252,test,tests,252,https://psicode.org,https://github.com/psi4/psi4/pull/705,1,['test'],['tests']
Testability,"## Description; I have discovered that running DLPNO-MP2 (#2093, #2378) on Cartesian basis sets like (6-31G, 6-31G*, 6-31+G, 6-31+G*, etc) leads to a segfault. Turns out, this was a bug in the `PointsFunction` class, where `set_deriv(0)` is not called ; if the basis set is NOT spherical. I fixed the bug and added a new test case to reflect this. Requesting reviews from @zachglick @loriab @JonathonMisiewicz . ## User API & Changelog headlines; None :). ## Dev notes & details; - [x] Fix DLPNO-MP2 Segfault with Cartesian Basis Sets; - [x] Add new DLPNO-MP2 test for Cartesian Basis Sets. ## Questions; None. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2840:321,test,test,321,https://psicode.org,https://github.com/psi4/psi4/pull/2840,5,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,"## Description; I realized that when running PBEh-3c, the calculation would take longer than expected. This was due to the use of a large basis during the density fitting procedure. I have just added the information required to make the code use the same auxiliary basis for the def2-mSVP basis as the ones used for def2-SVP. I did not test this modifications using the test cases. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Improve performance of PBEh-3c when used with the default def2-mSVP basis set. ## Questions; - [ ] None. . ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1558:336,test,test,336,https://psicode.org,https://github.com/psi4/psi4/pull/1558,5,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,"## Description; I recently discovered a bug where CBS finite-difference Hessians will crash on systems with zero dipole moment. This is due to `CompositeComputer` not loading a dipole with entries all exactly zero into qcvars. This fix checks that CBS results are not None rather than have any non-zero entries before loading into qcvars. I have verified that this fixes the crash and that e.g. non-existing Hessians are stiil not loaded into result qcvars. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Fixed a bug causing CBS extrapolated finite-difference Hessians to crash on systems with zero dipole moment. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] `CompositeComputer` loads variables with zero'd entries in qcvars.; - [x] `FiniteDifferenceComputer` checks for dipoles when doing finite-difference by gradients. ## Checklist; - [x] cbs tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2759:1167,test,tests,1167,https://psicode.org,https://github.com/psi4/psi4/pull/2759,1,['test'],['tests']
Testability,## Description; I think I owe everyone an update on the docs to answer the question: Which algorithm/implementation is used for which kind of one-electron integral? This PR adds a table to the integral documentation with all the necessary information. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Table added. ## Checklist; - [x] ~Tests added for any new features~; - [x] ~[All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests)~. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2527:393,Test,Tests,393,https://psicode.org,https://github.com/psi4/psi4/pull/2527,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; I thought I would try out increasing our code coverage a bit. As such, I have added several tests and removed a deprecated pieces of code. This accidentally includes my NumPy PR, so please pull that one in first. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Always Flush on `outfile->Printf` call. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/754:108,test,tests,108,https://psicode.org,https://github.com/psi4/psi4/pull/754,1,['test'],['tests']
Testability,"## Description; I tracked down a seg fault during a largish cc2 calculation to an integer overflow in the value of `size` in DPD::buf4_scmcopy(). I think it was triggered because I allocated a large amount of RAM so a huge chunk of data was to be copied in one go rather than in bits. In my case,; `size = rowtot*coltot = 47252*47252 = -2062215792`; Funnily enough, memcpy wasn't very happy being called with a negative size to copy!. It's a simple case of `int*int` being larger than an int!. Changing `size` to a `long int` and adding some casts matches other sections of the file (although perhaps replacing them all with `size_t` might be better?). ## Questions; This fix got my calculation past the point where it caused the seg fault (although it's still running: it might take a few days!). This bug probably only got triggered by large jobs with a lot of RAM so the in-core copy was performed: there could be similar overflows to track down (similar to that [recently found in the SAPT code](http://forum.psicode.org/t/sapt2-calculation-segmentation-fault-during-exch12-computation/415/6)). I guess a safer option would be test the values for overflow (I've not thought how it behaves 32 vs 64 bit!). ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/685:1131,test,test,1131,https://psicode.org,https://github.com/psi4/psi4/pull/685,1,['test'],['test']
Testability,"## Description; I was testing a trick I had heard of to clean up valgrind output (which alas, didn't work). I got carried away fixing the memory leaks it reported before deciding that continuing was not the best way to use my time. Don't expect this work to be continued in the immediate future. A ""Valgrind Day"" just like ""LGTM Day"" or ""Documentation Day"" would be very useful. ## Checklist; - [x] Because this was just fixing memory leaks, I'll leave testing to Azure. I can do more if anybody thinks there would be use in it?. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1755:22,test,testing,22,https://psicode.org,https://github.com/psi4/psi4/pull/1755,2,['test'],['testing']
Testability,"## Description; I would like access to the CCSD pair energies from the FNOCC code in Psi4. I made a small modification to the FNOCC code so the pair energies are calculated (using an existing for loop) and I've added the new variable ""CCSD PAIR ENERGIES"" to store the quantity. . This is my first PR with Psi4 so I apologize in advance if I've missed any coding guidelines. . ## Questions; - [ ] Should I add a test for this new variable?. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1950:411,test,test,411,https://psicode.org,https://github.com/psi4/psi4/pull/1950,4,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,"## Description; I've just watched this test take 84--120 iterations to converge over consecutive runs. Lately for py38 conda package it has needed 121, failing the whole thing. So I'm adding extra cushioning. The output.ref is 88, so nothing new. Also the MKL_CBWR=AVX seems on average to increase the iterations needed. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2173:39,test,test,39,https://psicode.org,https://github.com/psi4/psi4/pull/2173,1,['test'],['test']
Testability,"## Description; If you look closely, the driver structure and its autodoc are a little weird, as reviewed in #2166. Also, many driver functions are minimally documented or don't take advantage of typing to guide the developer. This PR considers only `driver/p4utils/` directory and fills in docstrings and typing while checking the built docs for maximum info and links. Even when I saw good things to change in code, for this most part, this PR leaves them be and focuses on docstrings. Piece 1 from the ""driver import"" series, #2166 . ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] add `__all__` to guide `from module import *`. This same effect can be had by `def _functionname` but the PEP https://peps.python.org/pep-0008/#public-and-internal-interfaces still recommends `__all__`.; - [x] a few things actually retired: ; - `PsiImportError`, `CSXError`, `Dftd3Error` -- not used since v1.4 at latest; - `fchkfile_to_string` hidden in fchk.py (just opening and reading a file); - `basname` hidden in python_helpers.py (one-liner); - `format_kwargs_for_input` (as soon as v1.4); - `extract_sowreap_from_output` (as soon as v1.4); - `format_currentstate_for_input` (as soon as v1.4); - `Table` (as soon as v1.4); - `print_stdout` (as soon as v1.4); - `print_stderr` (as soon as v1.4). ## Checklist; - Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2592:1363,Test,Tests,1363,https://psicode.org,https://github.com/psi4/psi4/pull/2592,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; Implements Density matrix-based integral screening algorithms for Direct SCF, as well as Incremental Fock Build, the process of building a Fock matrix using the difference in the density matrix between SCF iterations. Reference Paper:; https://onlinelibrary.wiley.com/doi/abs/10.1002/jcc.540100111. Updated Version of PR #2062. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Provide Massive Speedups to DirectJK Builds for HF and DFT; - [x] Accuracy of Calculations remain uncompromised. ## Questions; - [x] Is my current method of handling the density matrix for UHF and ROHF ideal?. ## Checklist; - [x] Passing cc-pVDZ and cc-pVTZ tests for HF and DFT (e_convergence 1.0e-6); - [x] Passing aug-cc-pVDZ, aug-cc-pVTZ tests for HF and DFT. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2155:709,test,tests,709,https://psicode.org,https://github.com/psi4/psi4/pull/2155,2,['test'],['tests']
Testability,"## Description; Implements a basic . ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [ *] Adds a smart solver class that can easily share data with a wfn object during SCF iterations. ; - [ *] Provides a platform for quickly adding new smart solving capabilities.; - [ *] With a metric for detecting oscillation, a dynamic damping function can be turned on to limit changes in Drms to a target value. * **User-Facing for Release Notes**; - [ *] With SMART_SCF set to `true`, SOSCF is automatically turned on when trailing convergence is detected, the initial oscillations in SAD, GWH, and CORE guess are damped at 70%. ## Questions; - [ *] What can be changed about the structure of the smart_solver class for ease of readability and use?; - [ *] This code leaves out 'macroiterations', i.e. restarting the SCF upon failure with updated initial conditions and options. Do we want this functionality in this PR, or another?; ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ *] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1134:1007,Test,Tests,1007,https://psicode.org,https://github.com/psi4/psi4/pull/1134,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; Implements density screening into the direct SCF Algorithm, no incremental Fock build currently, but incremental Fock build will be a future addition. Reference paper: https://onlinelibrary.wiley.com/doi/abs/10.1002/jcc.540100111. ## Notable Features; - [x] Improve the efficiency (less time) of the direct SCF Algorithm without compromising accuracy. ## Checklist; - [x] Passes Sanity Check for Water Molecule, will include a Google Sheets link as I include more tests; - [x] Passes Tests Using The Benzene, Naphthalene, etc... series; - [x] Code works with multithreading; - [x] Code works with reaction energies, interaction energies, conformation energies; - [x] Code works on open-shelled systems; - [x] Code tested on a diverse set of molecules. ## Status; - [x] Rough Draft Phase; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2062:480,test,tests,480,https://psicode.org,https://github.com/psi4/psi4/pull/2062,3,"['Test', 'test']","['Tests', 'tested', 'tests']"
Testability,"## Description; Implements the linear exchange matrix build (LinK) algorithm for Direct SCF.; Reference: C. Ochsenfeld, C.A. White, and M. Head-Gordon, J. Chem. Phys. 109, 1663 (1998); (https://aip.scitation.org/doi/10.1063/1.476741). NOTE: The J build already has density screening implemented (see #2155). ![wc_linK_errors_updated_06_04_21](https://user-images.githubusercontent.com/60559795/120875167-7c793e00-c578-11eb-83d2-b2b2e197d788.jpg); ![wc_linK_timings_hornet_06_04_21](https://user-images.githubusercontent.com/60559795/120875169-7d11d480-c578-11eb-8315-642e4ee0510c.jpg). ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Builds the K matrix of large molecular systems in O(N) time; - [x] Errors are minimal when compared to approximations like Density Fitting. ## Questions; - [ ] This code is currently in DirectJK, should I make a new JK module for fast methods like LinK, since a fast K algorithm would be really useful for density fitting?. ## Checklist; - [x] Tested accuracy and speed of method on a 3D system of growing water clusters. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2187:1037,Test,Tested,1037,https://psicode.org,https://github.com/psi4/psi4/pull/2187,1,['Test'],['Tested']
Testability,"## Description; Improvements to basis set handling, including; - elimination of duplicate code and introducing array size checks via use of std::string in gshell; - sanity checks for angular momentum parsing, eliminating segfaults; - support for explicit definition of angular momentum in the basis set input (fixes #628). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Eliminated duplicate code and introduced array size checks via std::string in gshell.; - [x] Introduced angular momentum checks in the basis set parser.; - [x] Added support for L=n format into the basis set parser. ## Questions; - [x] The basis set parser is doing regexp validation for the shell entry. Thanks to @PhillCli for supplying a working regexp. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1994:798,Test,Tests,798,https://psicode.org,https://github.com/psi4/psi4/pull/1994,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; In C++, the destructor for a templated class should not include the template parameter in the destructor's name. This is not a problem for C++17 and earlier standards, but with C++20 compilers it raises an error. This PR fixes one instance of this problem in psi4. ## User API & Changelog headlines; - [x] API should now be compatible with both C++17 and C++20. ## Dev notes & details; - [x] Change one line. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3061:479,test,tests,479,https://psicode.org,https://github.com/psi4/psi4/pull/3061,2,['test'],['tests']
Testability,"## Description; In accordance with https://github.com/MolSSI/QCElemental/pull/275, return certain files in qcschema to be pruned down by user protocols. Bump qcel to 0.24.0 (and qcng to 0.23.0 once it's minted). Note that this can't handle the wfn file b/c binary. And it can't handle `timer.dat` b/c there's no fixed place it lands (I can get it to save calling schema_wrapper directly but not for QCEngine calling psi4). ## Checklist; - [x] Tests added for any new features -- tested at qcengine test_canonical_fields; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2361:443,Test,Tests,443,https://psicode.org,https://github.com/psi4/psi4/pull/2361,4,"['Test', 'test']","['Tests', 'tested', 'tests']"
Testability,"## Description; In order to bring back SCF hooks, kill the C-side EFP octopus, and provide a foundation for a smart SCF driver, want control over SCF iterations to be at the driver level. Features will have to be filled out more fully from the commit msgs once this stabilizes, but current status is (1) rebased, (2) no EFP or PCM yet, (3) otherwise, all tests pass, (4) haven't done a final output vs. output.ref comparison. Please to assess mercilessly the general structure and stable parts of the C/Py handshake. There's very little that I'll defend energetically. There's a few questions and notes marked with `Q:` in the code. Hack away in the ""pre-review"" time. That is, this can't be merged b/c it breaks addons. But it'd be nice if this was tentatively pre-approved before continuing on into efp, pcm, and json stages. ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/847:355,test,tests,355,https://psicode.org,https://github.com/psi4/psi4/pull/847,1,['test'],['tests']
Testability,"## Description; In preparation for allowing `detci` to support symmetry broken displacements for frequencies, this PR streamlines the active space setting logic used by `detci`. Nothing should have changed except function signatures and code clarity. Obligatory ping to @fevangelista, since this touches on active space specifications. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Streamline `ras_set`; - [x] Adds `Dimension::copy` @jturney ; - [x] Fewer raw pointers, more `Dimension` . ## Checklist; - [x] `ctest -L ci` passes. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3208:155,log,logic,155,https://psicode.org,https://github.com/psi4/psi4/pull/3208,1,['log'],['logic']
Testability,"## Description; In preparation for some PRs adding EDIIS and ADIIS to Psi, this PR moves the `compute_orbital_gradient` functions, which call DIIS, to the Python layer. There are multiple things going on:; - For pybinding, it was convenient to convert the enums in `libdiis` to _strongly typed enums_. This means the enums have their own scope, which changes how other functions had to call them. Every change in occ, dfocc, dct, fisapt, and libdiis is _solely_ due to this. This occupies commit one.; - Many other functions had to be pybound. In particular, it was necessary to convert `diis_manager` into a property. Old code would call `HF.diis_manager()`, but now they call `HF.diis_manager_`. We're not bothering to deprecate the old way of calling it. I'm not aware if there's a way to still support the old syntax. It might work if we change the property name to `diis_manager`? I haven't tested this.; - It is not possible to pybind a variadic, so I had to pybind every `set_error_vector_size` and `set_vector_size` and `add_entry` type combination that Python might use. Sad, but necessary. And with that done, all four of the `compute_orbital_gradient` functions could finally be moved to the Python layer. `compute_orbital_gradient` is kept as a virtual function, C++ side, to signal that Psi expects such a function to exist. My tests indicate that if the function is defined C++ side, it still works, so this won't break any SCF subclasses defined in plugins. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] _Lots_ of pybind-ing involving DIIS; - [x] Alert! `HF.diis_manager()` has changed to `HF.diis_manager_`; - [x] `HF.compute_orbital_gradient` moved to the Python layer. C-side `compute_orbital_gradient` is still supported, but not used by the core Psi. ## Questions; - [ ] Who is responsible for updating the Great DFOCC Branch with the `libdiis` API change?; - [ ] How do we feel about the new functions I Pybind-ed over?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2298:896,test,tested,896,https://psicode.org,https://github.com/psi4/psi4/pull/2298,1,['test'],['tested']
Testability,"## Description; In preparation of the DLPNO-CCSD(T) code, I have changed the class heirarchy of the DLPNO module. Currently, there is only a `DLPNOMP2` class. However, I have split that class into a `DLPNO -> DLPNOMP2` inheritance heirarchy, to allow for ; `DLPNO -> DLPNOCCSD -> DLPNOCCSD_T` in the future, and potentially `DLPNO -> DLPNOMP2 -> DLPNOMP2_F12`. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Changes class heirarchy of DLPNO module; - [x] Changes the way the DOI grids are handled in DLPNO-MP2, adds separate user options for the DOI grid specifically. ## Questions; - [ ] . ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3192:804,Test,Tests,804,https://psicode.org,https://github.com/psi4/psi4/pull/3192,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; In response to #714 adds a test checking LCCD against DCFT/CEPA0. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/715:43,test,test,43,https://psicode.org,https://github.com/psi4/psi4/pull/715,1,['test'],['test']
Testability,"## Description; In some basis sets that contain ECPs, the ""valence"" f-shell is included in the effective core. This seems true for all post-lanthanide/actinide atoms. . In current master, those 60 ECP electrons are always frozen, but in a non-ECP basis with frozen core we'd freeze only 54 of those. The simple solution is to always freeze the 4f electrons (for 6th period) if the shell is full. ## Checklist; - [x] Tests added for any new features; - [x] `ctest -L ecp` passes. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1930:416,Test,Tests,416,https://psicode.org,https://github.com/psi4/psi4/pull/1930,1,['Test'],['Tests']
Testability,"## Description; In trying to make a good test case for #2068, I found some normalization problems that are fixed in this PR. Also, the analytic gradients were not implemented, has been addressed. The interface used here is terrible, but will eventually be merged with #1720 to give a better user experience; this test case will be helpful in making sure everything works correctly during that development. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Add a new feature to allow arbitrary order, arbitrary exponent multipoles to be defined.; - [x] Implement analytic gradients for the above.; - [x] New test case to make sure it all works and to demonstrate the current (terrible and to be replaced) syntax. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2069:41,test,test,41,https://psicode.org,https://github.com/psi4/psi4/pull/2069,6,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,"## Description; In very rare cases, the number of frozen core orbitals in computing the dMP2 correction in SAPT was inconsistent between the dimer and monomer calculations. I only encountered this when one monomer was a charged alkali metal. For example, when computing the dMP2 correction for Na-H20, `freeze_core true` results in one frozen orbital each for Na and H2O in the separate monomer computations, but six frozen orbitals in the dimer computation. Separately, these values make sense, but in this context they result in a meaningless dMP2 value. . ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [X] Set # frozen core for dimer as sum of monomer # frozen core. ## Checklist; - [X] Tests added for any new features; - [X] Add a warning in the manual. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2271:747,Test,Tests,747,https://psicode.org,https://github.com/psi4/psi4/pull/2271,1,['Test'],['Tests']
Testability,"## Description; Include external potentials in the FISAPT module. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Add interaction of external potential with nuclei to nuclear repulsion; - [x] Add interaction of external potential with basis functions to one-electron Hamiltonian for SCF calculations and calculation of HF interaction energy; - [x] Fixed minor typo in proc_util.py. ## Questions; - [ ] I added a method to the Wavefunction class to access the protected external_pot_ object. Was there some other way I could have accessed this object?; - [ ] Adding the external potential directly to the one-electron potential matrices for each fragment leads to this potential being double-counted in some terms used to calculate the HF interaction energy. So I stored the external potential as an additional matrix, matrices_[""VE""], that is then added to the one-electron potential for the monomer SCF calculations and the HF term. Is there a better way to handle this problem that doesn't require storing an additional matrix?; - [ ] I compared total SAPT0 energy for a 2-fragment F-SAPT calculation to the SAPT module. Is there a good way to check a 3-fragment I-SAPT energy with the SAPT module?. ## Checklist; - [x] For a 2-fragment system, total SAPT0 energies with and without an external potential in FISAPT module agree with SAPT module; - [x] For a 3-fragment system, total SAPT0 energies with and without an external potential give reasonable energies; - [x] Passed included smoke and sapt tests. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1608:1552,test,tests,1552,https://psicode.org,https://github.com/psi4/psi4/pull/1608,1,['test'],['tests']
Testability,"## Description; Includes Joe's psi4/psi4#772, since the original point of this was to do properly the hacks needed to get the normco into the Wfn. This includes py-side vibrational analysis, thermo, and small-system reordering. Also fixes Hessian symmetrization (py-side; haven't moved it back c-side). ~This isn't a final product. I only re-hooked-back-up one conventional freq test case. There's plenty of organizational, naming, storage (want both freq and normco in Wfn? and if so, only vibs, not RT? and how ID imag freq if we're float and don't want `-`?) choices yet. What this does have is a substantial py test case with 6 Hessian readouts from Cfour and 6 matching p4 findif-by-grad vibrational analyses to help debug some analytic Hessian errors at wwdc.~. ~And watch out – any change to `findif.h` recompiles most of psi.~. In the end, this added a py-side vib analysis, identified two Hessian bugs, upgraded the two Molecule classes, added Molecule serialization everywhere except initial string input parsing, added alignment and BFS tools, and lots more – see below. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - This PR includes Joe's psi4/psi4#772; - adds an optional history object to the optimize output. This object contains energies, gradients, and coordinates for the molecule at each step of the optimization. Hooked up to MDT.; - ~adds normalmode displacement export to the api and optional saving of normal modes to the wavefunction.~; - Adds handling of several one-electron properties to the API and saves them to the wavefunction.; - `qcdb.Molecule`; - Fix some bugs, including C3/D3 symmetry detection w/o verbose and printing for Q-Chem when dummy (or ghost?, don't remember which) present; - Simplify rotational_constants, add rotational_symmetry_number, add axis_representation (probably should double-check this with a spectroscopy book); - Optimize instantiation (really, update_geometry) of large syst",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/834:379,test,test,379,https://psicode.org,https://github.com/psi4/psi4/pull/834,2,['test'],['test']
Testability,"## Description; Initial draft. Next step is going to be ensure more backwards compatibility... This will involve more complicated manipulations of the current module, probably. Mark III of this refactor is going to use this code in Psi4. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] RN 1; - [ ] RN 2. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3220:746,Test,Tests,746,https://psicode.org,https://github.com/psi4/psi4/pull/3220,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; Issue from forums: https://forum.psicode.org/t/dispersion-gradients/2979. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Fix issue where the dispersion correction contribution to gradients is not correctly labelled when debug printing is enabled. . ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3082:512,test,tests,512,https://psicode.org,https://github.com/psi4/psi4/pull/3082,2,['test'],['tests']
Testability,"## Description; It implements a new version of `timer` in `libqt`, which enables calling of `timer_on` and `timer_off` in OpenMP parallel blocks. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Parallel based on original code**; - [x] Have a working version of parallel timer; * **Introducing new C++ features and optimize performance**; - [x] Replace the original timer data structure (doubly linked list) by std::list; - [x] Replace old timing C functions by C++11 std::chrono library; - [x] Optimization; * **Timer format and output**; - [x] Nested timer; - [x] Format output; * **Test and debug**; - [x] Debug; * **Clean up**; - [x] Clean up. ## Questions; - [x] Is there a way to get correct thread rank in `timer_on` and `timer_off` functions rather than introducing an extra arg. ## Status; - [x] Ready to go. ## Note; The signature of timer operations are:; (1) `void timer_on(const std::string& key)`; (2) `void timer_off(const std::string& key)`; (3) `void parallel_timer_on(const std::string& key, int thread_rank)`; (4) `void parallel_timer_off(const std::string& key, int thread_rank)`. In order to run timer correctly in parallel, (1) and (2) should only be called in seriel part of code and (3) and (4) should only be called in OpenMP parallel sections. Calling to (3) and (4) requires to pass an additional arg `thread_rank` unique to every thread. Generally, call; - `parallel_timer_on(""your_key_string"", omp_get_thread_num());`; - `parallel_timer_off(""your_key_string"", omp_get_thread_num());`; will work. ## An example code; ```; double SCF::compute_energy(); {; timer_on(""energy"");. #pragma omp parallel; for (int a = 0; a < 100; a++); {; parallel_timer_on(""inner"",omp_get_thread_num());; // some running code; parallel_timer_off(""inner"",omp_get_thread_num());; } . timer_off(""energy"");; return 0.0;; }; ```. ## An example output; ```; Host: DESKTOP-JOFFIR0. Timers On : Fri Jul 7 15:47:10 2017; Timers Off: Fri Jul 7 15:47:13 2017. Wall Time",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/743:623,Test,Test,623,https://psicode.org,https://github.com/psi4/psi4/pull/743,1,['Test'],['Test']
Testability,"## Description; It looks like errors like #2080 happen when `throw` called from within threaded code in C++. From non-threaded code, Pybind11 catches them and turns them into nicely behaved `RuntimeError`s but from threaded, it just segfaults. This PR averts a few, but there could be far more throughout codebase. closes #2080 . ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] cleans up namespace markings in libfock. also adds `namespace psi` into a formerly anonymous namespace; - [x] pre-clears SG0 and SG1 atoms before entering the threaded grid build proper. the non-SG0 and SG1 block had some throws, too, but I couldn't trigger them. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2082:721,Test,Tests,721,https://psicode.org,https://github.com/psi4/psi4/pull/2082,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; It seems that in the course of harmonizing dftd4 in QCEngine, I touched enough dftd3, gcp, and mp2d that #2142 (dftd4 and minor dftd3, gcp, mp2d) can't be put off after the QCEngine v0.19 release. So here's the non-dftd4 tweaks. ## Todos; - [x] switch gcp interface to QCEngine; - [x] update types return for disp. engine can handle ndarray, so leave arrays as np and shaped rather than flat lists; - [x] Note that this won't build until new QCEngine release. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2180:496,Test,Tests,496,https://psicode.org,https://github.com/psi4/psi4/pull/2180,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; It was agreed at PsiCon that the `Matrix` and `Vector` class be rewritten to use xtensor as storage backend. This is my work on this so far. It is not complete - indeed `Matrix` and `Vector` are still used everywhere - but I think it's better to put this up early because it will take time to transition to the new classes. **Easter update**. The Python bindings for the `Tensor` class mostly come for free through `xtensor-python`. They allow to:; * Access blocks _via_ the subscript operator.; * Assign a NumPy array to a block.; * Get a block and update it in NumPy.; ```; import numpy as np. from psi4.core import Dimension, Matrix_D. dim_row = Dimension([3, 2, 1, 4]); dim_col = Dimension([4, 2, 0, 2]); m3 = Matrix_D('m3', dim_row, dim_col); m3[0] = np.random.rand(*m3[3].shape); block = m3[3]; block[:] = np.arange(m3[3].size, dtype=float).reshape(*m3[3].shape); ```. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Use `_a` literal in pybind11 export sources rather that `py::arg` --> Split and merged with #1448 ; - [x] Basic templated `Tensor` class with Python bindings.; - [x] `doublet` for `Tensor<double, 2>` aka a `Matrix` of `double`-s working. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1443:1247,Test,Tests,1247,https://psicode.org,https://github.com/psi4/psi4/pull/1443,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; It would be nice to be able to pass in an external hamiltonian to be able to test-drive some code (e.g. for the calculation of external potentials) without always needing to recompile. This PR adds this possibilty. I am testing it by making a calculation without an external hamiltonian but with a potential (and saving the nuclear_repulsion addition, which is not mediated by the additional H term) and comparing it to a simulation without an external potential, but with the captured potential hamiltonian. FYI: This is on top of #3148 , because otherwise the tests don't pass.; Also fyi: I did not build the docs. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] Added possibility to pass in an external hamiltonian contribution via `energy(..., external_hamiltonian = np.array(...))`. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [ ] Added possibility to pass in an external hamiltonian contribution via `energy(..., external_hamiltonian = np.array(...))`.; - [ ] Tested via simulation with external_potential and an equivalent external_hamiltonian. ## Questions. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3149:93,test,test-drive,93,https://psicode.org,https://github.com/psi4/psi4/pull/3149,7,"['Test', 'test']","['Tested', 'Tests', 'test-drive', 'testing', 'tests']"
Testability,"## Description; Kill off the last fork!. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] upstream Libxc with !62-style tweak syntax ([summary of this vs #1101](https://gitlab.com/libxc/libxc/issues/61#note_129049055)); - [x] un-namespaced the `xc.h` header so that a cmake libxc build that works for psi4 can work for other libxc users.; - [x] pulling from my fork (trivial change), so that needs conda testing and merge before updating this and merging. ## Checklist; - [ ] ~Tests added for any new features~; - [x] full test suite run. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1502:453,test,testing,453,https://psicode.org,https://github.com/psi4/psi4/pull/1502,3,"['Test', 'test']","['Tests', 'test', 'testing']"
Testability,"## Description; Kudos to @andysim for pointing out in January the exact 13 lines of code to change for the vast preponderance of the gaussian to standard ordering switch. As far as timeline, there's no particular reason this needs to be in for v1.6. But if we _could_ avoid hosting forever one fewer set of L2 packages for a single release, that'd be kind of nice. But fixing the output formats (i.e., fchk, qcsk, molden, fcidump) is likely to take some careful work. If anyone would like to tackle a part of this, go for it. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] current test status (pretty impressive, imo); - after g2g commit; - ctest: `99% tests passed, 3 tests failed out of 487`; - pytest: `12 failed, 2971 passed, 270 skipped, 269 xfailed`; - after first solidharmonics.cc commit; - ctest: ~`90% tests passed, 50 tests failed out of 487`~; - pytest: ~`43 failed, 2911 passed, 208 skipped, 269 xfailed`~; - [ ] only Linux in CI b/c only it has an appropriate L2 conda package built. - categories to examine; - [x] tdscf; - [x] cubeprop; - [ ] fchk; - [ ] qcsk atomicresult.wavefunction; - [x] mbis; - [ ] molden; - [ ] fcidump; - [ ] nbo. - fails pytest; - [x] tdscf; - [x] dft_block_schemes; - [ ] mcmurchie_davidson_consistency_angmom (fails because ref data are deposited in Gaussian ordering); - [ ] test_rhf_fchk[df-rhf-dft)]; - [ ] test_rhf_fchk[conv-rhf-dct]; - [ ] test_rhf_fchk[df-rhf-omp2]; - [ ] test_uhf_fchk[df-uhf-mp2]; - [ ] test_rhf_fchk[conv-rhf-ccsd] ; - [ ] test_uhf_fchk[df-uhf-dft]; - [ ] test_uhf_fchk[conv-uhf-ccsd]; - [ ] test_rhf_fchk[df-rhf-mp2]; - [ ] test_uhf_fchk[df-uhf]; - [ ] test_rhf_fchk[df-rhf)]; - [ ] test_rhf_fchk[conv-rhf-cc2]. - fails ctest; - [x]	103 - cubeprop (Failed); - [x]	104 - cubeprop-frontier (Failed); - [x]	123 - density-screen-2 (Timeout); - [x]	161 - dft-grad-lr1 (Failed); - [x]	162 - dft-grad-lr2 (Failed); - [x]	163 - dft-grad-lr3 (Failed); - [x]	168 - dft-b2plyp (Fail",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2537:641,test,test,641,https://psicode.org,https://github.com/psi4/psi4/pull/2537,5,['test'],"['test', 'tests']"
Testability,"## Description; Last summer, I discovered that the energy _increased_ along the IRC for my complex formation coordinate. I eventually tracked this down to a bug where the molecule did not displace the initial geometry correctly, which this PR fixes. Since that time, those of us at UGA have found this fix essential to follow modes <200i. I discuss this in more detail [here](https://github.com/psi-rking/optking/issues/19). I updated a test to reflect the fact that the IRC can go a bit further when it displaces correctly. I didn't bother updating the reference files, as I expect it'll be invalidated soon anyways. The whole reason I'm submitting this PR now is to eliminate this bug from consideration when I send @psi-rking the _latest_ IRC bug I found. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix IRCs. ## Checklist; - [x] All IRC tests run. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1663:437,test,test,437,https://psicode.org,https://github.com/psi4/psi4/pull/1663,2,['test'],"['test', 'tests']"
Testability,"## Description; Legacy modules that were default in the past, but have been replaced will move to the [psi4pasture](http://github.com/psi4/psi4pasture) repo. The ccsort/transqt2 modules now live there. This PR introduces some machinery for installing them from psi4's build, and allowing them to be used in the driver at run-time if they are installed. ## Todo; - [x] cleanup history; - [x] find specific libs that have missing symbols + add `${PRE/POST_LIBRARY_OPTIONS}` to each not all.; - [x] Docs: Finalize build instructions for `PastureRequiredError`; - [x] Docs: Add transqt2/ccsort note to read_options.cc; - [x] Tests: add tests as lori mentioned . * **Developer Interest**; - I would say this functionality is experimental since pasture does not have any travis checks.; - I am not completely confident in the way I have ""injected"" pasture.addins.ccsort_transqt2 into proc.py, but it seems to work okay. See the code comments; - Does the pasture module even need to be installed w/in lib/psi4/driver?. * **User-Facing for Release Notes**; - ccsort/transqt2 are no longer part of psi4_core; - adds ENABLE_ccsort and ENABLE_transqt2 flags to optionally build/install them from pasture. * **Self imposed CI checks**; - [x] MacOS/clang/python2 build + use pasture ok; - [x] MacOS/clang/python3 build + use pasture ok; - [x] Linux/gcc/python2 build + use pasture ok; - [x] Linux/gcc/python3 build + use pasture ok. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/534:621,Test,Tests,621,https://psicode.org,https://github.com/psi4/psi4/pull/534,2,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; Libint2 and shell screening. ## Todos; - [x] initial cmake integration of fixed AM Libint2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1721:159,Test,Tests,159,https://psicode.org,https://github.com/psi4/psi4/pull/1721,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; Libxc is getting some hybrid LDA functionals (https://gitlab.com/libxc/libxc/merge_requests/163), which require some trivial yet benign changes to the DFT driver code. It appears that Psi4 doesn't do the evaluation itself, getting all data from pylibxc, where I hope to have made all of the necessary changes as well. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Psi4 can run LDA0 and CAM-LDA0 calculations with an up-to-date libxc. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1645:553,Test,Tests,553,https://psicode.org,https://github.com/psi4/psi4/pull/1645,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; Longawaited maintenance on physconst and duplicate naming. ## Todos; * **Developer Interest**; - [x] There was dir driver/procedures and dict procedures['energy']... Renamed the former to procrouting to avoid future trouble. Note that all plugins will need [this line](https://github.com/edeprince3/v2rdm_casscf/blob/master/pymodule.py#L28) fixed by `procedures` --> `procrouting`.; - [x] Move i/fsapt test cases higher in list, so they can backfill.; * **User-Facing for Release Notes**; - [x] Physical constants in PsiAPI are now `psi4.constants.amu2kg` instead of `psi4.p4const.psi_amu2kg`. In Psithon, still `psi_amu2kg`. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/632:418,test,test,418,https://psicode.org,https://github.com/psi4/psi4/pull/632,1,['test'],['test']
Testability,"## Description; Lori brought to my attention that my previous PR accidentally introduced a bug causing tests to fail. (It was an obvious indexing bug.) That is now fixed. In the interests of making test-running less onerous, I've also changed the test cases so that I can run all `dct` tests faster. We're checking things less tightly and using smaller basis sets. ## Todos; - [x] Fix bug introduced in #2152 ; - [x] Faster `dct` tests. ## Checklist; - [x] `dct` tests pass, and in under two minutes. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2165:103,test,tests,103,https://psicode.org,https://github.com/psi4/psi4/pull/2165,6,['test'],"['test', 'test-running', 'tests']"
Testability,"## Description; Lots o' stuff. **I recommend reviewing commit-by-commit.**. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Fix ""write() argument must be str, not bytes"" error that occurs in new NumPy; - [x] QCDB: migrate Hungarian alg from hungarian module to hacked scipy. now ""align"" tests should pass w/o incident or add'l software; - [x] Mol: migrate Molecule.to_string() back from QCDB. not used, but may as well be handy.; - [x] QCDB: squash some printing. migrate some changes back from QCDB.; - [x] AddOns: Don't let scipy missing (for snsmp2) pass silently.; - Discovered faulty logic where snsmp2 will rebuild more than necessary b/c detection involves ""import psi4"" which probably doesn't exist at the start of a psi4 build. not fixed.; - [x] AddOns: Bump pybind11 to 2.2.3; - [x] AddOns: renegotiate the psi vs. libefp options compromise. We generally try to follow addon's naming conventions unless they directly contradict our own. For SAPT we do have our own, but when libefp was implemented, we used our sapt for two (elst & exch) and let libefp win on (pol). I've since put a translation of input and printing system into pylibefp. that isn't active here, but thought may as well change keywords now.; ```; 'psi': {; 'elec': 'elst',; 'pol': 'ind',; 'xr': 'exch',; 'elec_damp': 'elst_damping',; 'pol_damp': 'ind_damping',; 'disp_damp': 'disp_damping',; 'pol_driver': 'ind_driver',; 'ai_elec': 'ai_elst',; 'ai_pol': 'ai_ind',; 'ai_xr': 'ai_exch',; ```; - [x] Add warnings accumulated so far -- ECP, DFT-SAPT, DFT; - [x] set up plugins via native conda gxx; - [x] AddOns: bump libefp to 1.5.0, chemps2 to 1.8.7; - [x] returns align tests to quicktest; - [x] adds `psi4 --test` to travis to test psiapi and addons coverage; - [x] switches MINIX to spherical as advocated [here](https://github.com/psi4/psi4/pull/961#issuecomment-385644036). ## Questions; - [ ] I took the warn DFT functionals from tests and notes, not o",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/993:354,test,tests,354,https://psicode.org,https://github.com/psi4/psi4/pull/993,2,"['log', 'test']","['logic', 'tests']"
Testability,"## Description; MKL 2020.1 often selects a different basis fn set than 2019.4 or 2020.0, so answers often differ by 1.14e-8. This relaxes tolerance to 2.e-8. Alternative is to add `mkl!=2020.1` to `conda create` line, but this would be disruptive to conda packaging. * **Note** A definitive test of above statement that returns to 1.e-8 but bans 2020.1 is running at https://dev.azure.com/psi4/psi4/_build/results?buildId=1969&view=logs&j=96451287-da82-57a8-2c11-8da7db9ab71a , but I'll get a head start and submit this PR. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1896:291,test,test,291,https://psicode.org,https://github.com/psi4/psi4/pull/1896,2,"['log', 'test']","['logs', 'test']"
Testability,## Description; MP2 energy for one-electron systems should be equal to HF energy. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] UHF energy via DFMP2 works; - [x] UKS energy and finite-difference gradient for DFT work; - [x] UHF gradient via DFOCC now throws an exception instead of segfault. ## Checklist; - [x] Tests added for any new features; - [x] `ctest -L mp2` runs fine. ## Status; - [x] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1857:364,Test,Tests,364,https://psicode.org,https://github.com/psi4/psi4/pull/1857,1,['Test'],['Tests']
Testability,"## Description; Make `back_transform` consistent across the various signatures and better behaved for more ""exotic"" cases. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is detined for the release notes. May be empty. -->; - [x] Improved `Matrix::back_transform`'s ability to handle edge cases. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] All `back_transform` signatures now trickle down to a single function; - [x] All `back_transform` signatures resize the target matrix if necessary (only one did this previously, DGEMM error otherwise); - [x] All `back_transform` signatures handle symmetry correctly (at least some would error previously). ## Checklist; - [x] `back_transform` passing tests. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2745:952,test,tests,952,https://psicode.org,https://github.com/psi4/psi4/pull/2745,1,['test'],['tests']
Testability,"## Description; Make `psi4.test()` safe to run. And beer safe to grep. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] The psi4 vs numpy threading test is more likely to work if run first, so moved it there. But since that's still no guarantee, made it an expected failure, so it doesn't count against pytest either way.; - [x] with `ENABLE_GENERIC`, blas/lapack detection looks for dynamic libm.; * **User-Facing for Release Notes**; - [x] Geometry optimizations that exceed maxiter no longer just print a warning and exit successfully (beer). Now they exit unsuccesfully (coffee) and raise a `psi4.ConvergenceError`. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/638:27,test,test,27,https://psicode.org,https://github.com/psi4/psi4/pull/638,2,['test'],['test']
Testability,"## Description; Make `transform` consistent across the various signatures and better behaved for more ""exotic"" cases. Sister PR to #2745. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is detined for the release notes. May be empty. -->; - [x] Improved `Matrix::transform`'s ability to handle edge cases. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] All `transform` signatures now trickle down to a single function; - [x] All `transform` signatures resize the target matrix if necessary (only one did this previously, DGEMM error otherwise); - [x] All `transform` signatures handle symmetry correctly (at least some would error previously). ## Checklist; - [x] `transform` passing tests. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2748:942,test,tests,942,https://psicode.org,https://github.com/psi4/psi4/pull/2748,1,['test'],['tests']
Testability,"## Description; Make psi safe for py38. The basic conda pkg does build, but I haven't done full stack yet. For practical reasons, no use turning on a CI lane for 38 until conda pkg available. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] req'd mods for python 3.8; - [x] avoid ""DeprecationWarning: In future, it will be an error for 'np.bool_' scalars to be interpreted as an index"" in `Molecule.from_dict`; - [x] more killing off travis. ## Checklist; - [ ] ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1776:512,Test,Tests,512,https://psicode.org,https://github.com/psi4/psi4/pull/1776,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; Make tests run reliably and a bit cleaner. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] @JonathonMisiewicz, @amjames so the continuation of the `cc3` saga is that it continued flaky, usually running clean but sometimes throwing PSIO errors at first findif freq, sometimes throwing PSIO errors at second findif freq. Finally figured out that the G0 calc was leaving scratch files before findif launched and findif was only cleaning _after_ each displacement. Previously this was nearly always safe b/c G0 had full symmetry and first findif displacement was totally symmetric (bet we were never testing partial freq on a susceptible mol). But now findif displacements appear in random order, and if the first one up has a lower irrep, it doesn't like those totally symmetric leftovers, so PSIO error. There's any number of places one could put the `clean` -- I chose least obtrusive.; - [x] `gcp` calcs weren't deleting their directories in scratch, so made them. ## Checklist; - [ ] ~Tests added for any new features~; - [x] full tests less bench run. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1326:21,test,tests,21,https://psicode.org,https://github.com/psi4/psi4/pull/1326,4,"['Test', 'test']","['Tests', 'testing', 'tests']"
Testability,"## Description; Make v2rdm_casscf work with psi in the v2.2.2 pybind11 era. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] ~half~ done adding `PSI_API` to psi where v2rdm wants it; - [x] corresponding v2rdm repo change is https://github.com/loriab/v2rdm_casscf/commit/7d4507d8979b61b3333fc6ceab450a61392836ff. ## Questions; - [x] @jturney, @edeprince3, I intended to finish this, but I'm confused by `C_DDOT`. `core.so` has the symbol that `v2rdm_casscf.so` wants, but the test file complains about DDOT anyway. Maybe there's some more complicated place that `PSI_API` needs to be inserted that I'm not seeing from simple pattern following. So consider this work a start and a puzzle.; ```; >>> ../hrw-qcdb/objdir/stage/usr/local/psi4/bin/psi4 tests/v2rdm3/input.dat ; H3 / cc-pvdz / D+D3 vs full CI, scf_type = PK; /home/psilocaluser/miniconda3/envs/idp35p4/bin/python: symbol lookup error: /home/psilocaluser/gits/hrw-qcdb/objdir/stage/usr/local/psi4/lib/v2rdm_casscf/v2rdm_casscf.so: undefined symbol: _ZN3psi6C_DDOTEmPdiS0_i; >>> nm v2rdm_casscf.so | grep DDOT; U _ZN3psi6C_DDOTEmPdiS0_i; >>> nm ../hrw-qcdb/objdir/stage/usr/local/psi4/lib/psi4/core.so | grep DDOT; 00000000006013c0 t _ZN3psi6C_DDOTEmPdiS0_i; 00000000017384d0 t _ZN3psi8PSI_DDOTEimSt10shared_ptrINS_6VectorEEiS2_i; ```; - [x] if https://github.com/edeprince3/v2rdm_casscf/pull/26 gets merged quickly, then I should re-point the cmake back to Eugene; - [ ] should we export _all_ lapack in https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libqt/lapack_intfc.cc ?. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/955:541,test,test,541,https://psicode.org,https://github.com/psi4/psi4/pull/955,2,['test'],"['test', 'tests']"
Testability,"## Description; Makes SAPT(DFT) quite a bit more flexible by allowing a potential user to build SCF wavefunctions (any will work, HF or DFT). An example can be found in `tests/sapt-dft-api`. I have also added LRC references with SAPT(DFT). @ajmisquitta please checkout `tests/sapt-dft-lrc` and verify these are working as expected. Closes #939 . ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Users can now call SAPT(DFT) directly with reference wave functions. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/942:170,test,tests,170,https://psicode.org,https://github.com/psi4/psi4/pull/942,2,['test'],['tests']
Testability,## Description; Makes changes suggested by lgtm; ATTENTION: Changes local variable names that overlapped with parameter names in ; libfock/hamiltonian.cc. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1635:175,Test,Tests,175,https://psicode.org,https://github.com/psi4/psi4/pull/1635,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; Makes print statement more clearly communicate to user which density matrix is being employed. c closes #1055 ; ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [ ] Feature1; * **User-Facing for Release Notes**; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1068:357,Test,Tests,357,https://psicode.org,https://github.com/psi4/psi4/pull/1068,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; Makes restarting an SCF and saving orbitals more accessible and updates documentation. Saving MOs for every SCF step to `my_mos.npy` and keeping it after psi4 finishes:; ```; energy('hf/minix',write_orbitals='my_mos'); # or; set orbitals_write my_mos; energy('hf/minix'); ```. Reading `my_mos.npy`:; ```; set guess read; energy('hf/minix',restart_file='my_mos'); ```. Using a serialized `wfn` works as well (`my_mos.npy` is just that); ```; e, scf_wfn = psi4.energy('scf', return_wfn=True); scf_wfn.to_file('saved_wfn'); set guess read; energy('scf', restart_file='saved_wfn'); ```. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] `write_orbitals' extended to also take a string to save user-named `180.npy` file; - [x] fixed and updated `restart_file` for `npy` files; - [x] added `ORBITALS_WRITE` option; - [x] if `write_orbitals=file` then MOs will be saved every iteration.; - [x] doc re-work (minimal entry on serializing a wfn and simplifying `restart_file`); - [x] adds `sphinx-autodoc-typehints` module to sphinx build hinting in cmake ; - [x] `serial-wfn` ctest to new pytest about restarts. ## Remarks; - `write_orbitals=boolean` is not documented but still an internal functionality. ; - `restart_file` doc is ambiguous on purpose. No idea which modules support restarting. If this is something a user; should be able to do, the respective module needs to add a documentation. ## Checklist; - [x] Tests; - [x] Docs; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2190:1483,Test,Tests,1483,https://psicode.org,https://github.com/psi4/psi4/pull/2190,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; Memory estimation for the amplitudes now recognize frozen_core settings. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] fixes #898 ; - [x] check code for same problem in CD algorithm variant. ## Checklist; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1244:313,test,tests,313,https://psicode.org,https://github.com/psi4/psi4/pull/1244,2,['test'],['tests']
Testability,## Description; Memory overhead estimate in fdisp is an underestimate. Improve this slightly in hopes of addressing a crashing large test case. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Better memory used estimate; - [x] Some printing of memory use to help users see if they are going over to multipass algorithm. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1810:133,test,test,133,https://psicode.org,https://github.com/psi4/psi4/pull/1810,1,['test'],['test']
Testability,"## Description; Minor CI patches. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Closes https://github.com/psi4/psi4/issues/559 and moves these features to a wishlist.; - [x] Closes https://github.com/psi4/psi4/issues/558, RSP eigenvectors were indeed wrong. Adds a RSP MCSCF test case for future testing. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/566:344,test,test,344,https://psicode.org,https://github.com/psi4/psi4/pull/566,2,['test'],"['test', 'testing']"
Testability,"## Description; Misc. ## Todos; * **Developer Interest**; - [x] CI: Removes align tests that require hungarian package from quicktests; - [x] Allow basis set blocks to be names ""custom"", ""special"", ""general"" w/o spewing a page of errors at you.; - [x] CMake: upgrade versioner to avoid hard-coded project version. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/974:82,test,tests,82,https://psicode.org,https://github.com/psi4/psi4/pull/974,1,['test'],['tests']
Testability,"## Description; Miscellaneous substantive changes short of moving vars from globals to wfn. ## Todos; - [x] for FINDIF, renamed some functions for easier comprehension (e.g., `compute_gradient_from_energy` --> `compute_gradient_from_energies`). speak up, @JonathonMisiewicz if I've misinterpreted anything (it won't count in GH's reckoning, but you're always welcome to review).; - [x] `core.get_gradient`/`core.set_gradient` aren't regularly set, even in v1.2, being used only in internal communication for OPTKING. I consider this effectively a silent deprecation in 1.2, so made that official (in case downstream using it), and renamed to `legacy_gradient` internally, until the demise of C-optking.; - [x] de-py2-adapted `psi4.driver.p4util`; - [x] fixed bug where in `driver_fn(..., kwargvar=None)`, `kwargvar` turned into `False`; - [x] deprecated many old fns in p4util -- see if you agree. Most for v1.4 but a few for v1.3.; - [x] added tolerance field to `compare_wavefunctions`; - [x] renamed and `_`-prefixed many functions in python_helpers.py so connection to demangled fn name easier to track and the `import *` doesn't contaminate namespace; - [x] for dfmp2, energy was starting the timer _after_ `scf_helper`, gradient was starting timer _before_ SCF, and properties wasn't timing at all. changed the latter two to match the first.; - [x] added `set_energy` to Wfn; - [x] `psi4 --fulltest -n NTHREAD` available to run full pytest test suite. Parallel only available if `pytest-xdist` installed (`conda install pytest-xdist`). ## Checklist; - [ ] ~Tests added for any new features~; - [x] quick tests is fine at this PR. full tests of this + other commits is fine. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1394:1446,test,test,1446,https://psicode.org,https://github.com/psi4/psi4/pull/1394,4,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,"## Description; Modifies how one electron properties are computed to allow the `properties` kwarg to behave consistently with other modules. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] CCDENSITY no longer calls into OEPROPs this is now done in the python layer. ; - [x] After calling CCDENSITY the `wfn.arrays['CC ROOT {n} D{a|b}']` can be used to access the OPDM for excited states in the SO basis as in the convention for matrix quantities set on the wfn. ; * **User-Facing for Release Notes**; - [x] Excited state OPDMs are now set in the wfn.arrays, so that they can be used to compute 1e properties for all roots requested in EOM-CC* calls.; - [x] Now additional valid one electron properties can be passed as part of the `properties=[]` list. These would previously cause a validation error. Valid one electron properties are now:; - dipole *; - quadrupole *; - mulliken_charges **; - lowdin_charges; - mayer_indices; - wiberg_lowdin_indices; - no_occupations **; - [x] The previous behavior was such that requesting the properties marked with * above would lead to all * -ed properties and additional (**) properties being computed automatically. The new logic implemented in the driver still has this behavior so existing workflows do no need to change, at least for now. . ## Questions; - [x] @loriab The block of code that I removed from CCDENSITY had comments that were used to trigger documentation of some psivars. Where should these go now? . ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests); - I ran all of the CC tests and there were no errors. The new logic changes where in the output file the 1 electron properties appear, but the perl script still finds them since they are labeled/formatted the same way. . ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/995:1233,log,logic,1233,https://psicode.org,https://github.com/psi4/psi4/pull/995,6,"['Test', 'log', 'test']","['Tests', 'logic', 'tests']"
Testability,"## Description; More `cc` tests ported over. There's one `autotest` test left. ## Todos; - [x] Documented several CC psivars; - [x] Updated dipole size managing functions to work with new ""DIPOLE -"" syntax; - [x] cc density variables renamed to new syntax; - [x] cc dipole/quadrupole variables renamed to new syntax . ## Checklist; - [x] ctests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2541:26,test,tests,26,https://psicode.org,https://github.com/psi4/psi4/pull/2541,2,['test'],"['test', 'tests']"
Testability,"## Description; More build changes. ## Todos; Notable points that this PR has either accomplished or will accomplish.; - [x] enable py3 testing; - [x] fix versioning at releases, allow conda build to get version before build; - [x] fix case where Fortran compilers required, but not detectable, have to be passed in; - [x] dashboard back. ## Questions; - [x] After these two PRs, just waiting on plugins from @jturney . ## Status; - [x] Ready to go **after oct_cmake**",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/488:136,test,testing,136,https://psicode.org,https://github.com/psi4/psi4/pull/488,1,['test'],['testing']
Testability,"## Description; Mostly posting to serve as ECP test bed. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Also: HEAVY28 & RG6, but ECP convergence problems, such that they don't match pub values; * **User-Facing for Release Notes**; - [x] New Grimme databases: ADIM6, ALK6, DARC, DC9, HEAVY28, IDISP, ISO34, RG6; - [x] More Grimme databases: AL2X, ISOL22, NBPRC, RSE42. ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/795:47,test,test,47,https://psicode.org,https://github.com/psi4/psi4/pull/795,1,['test'],['test']
Testability,"## Description; Mostly xtpl refinements, plus some misc. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Fixed the typo @fevangelista noticed on the GitHub workflow slide (it was definitely mine, not Andy's, in my zeal to use https). Added the link to this on the front page that CDS wanted. Added a do/don't git pull/push slide; - [x] Added ability to forward the extrapolation scheme from a method/basis spec; - [x] Tested and added docs and test for user-specified extrapolation functions. Added refs for xtpl fns.; - [x] Changed import of xtpl fns to `from driver_cbs import *` in inputparser after they had previously been named explicitly. This should be fine b/c the targeted ones are the only fns in file not beginning with underscore. This way anyone can add an extrapolation fn to driver w/o having to know to edit inputparser.; * **User-Facing for Release Notes**; - [x] Bump libefp source to upstream tag 1.4.2; - [x] Fix more int/float in basis set files that wouldn't get read correctly by parser. In particular, def2 RI fitting for Mg. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/686:485,Test,Tested,485,https://psicode.org,https://github.com/psi4/psi4/pull/686,2,"['Test', 'test']","['Tested', 'test']"
Testability,"## Description; Mostly, get psi4 up-to-date with pybind again, remove extraneous python linking, and sanitize chemps2 & pcmsolver test case names and ctest labels. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] add message-coloring module, useable by all, and used to warn about <4.9 GCC and highlight addon detection; - [x] make autodocing tools aware of the detci properties psivars that are now set py-side; - [x] re-work some list casting that (with pybind11 Nov 16 updates) broke our array options; - [x] dropped the versioned code object library in psi4/src/CM; - [x] documented python/pybind linking a bit; - [x] ctest `shorttests` gone and `minitests` in; * **User-Facing for Release Notes**; - [x] `dmrg` tests and label now accessed through `chemps2`; - [x] `pcmsolver` tests dropped ""pcm"" prefix; - [x] tests involving external code now accessible with label `addon` rather than `ext-exe-dep`; - [x] no longer linking to libpython. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/524:130,test,test,130,https://psicode.org,https://github.com/psi4/psi4/pull/524,4,['test'],"['test', 'tests']"
Testability,"## Description; Moved old Molden writer to Python, fixed normalization issue, and added test cases. ## Todos. ## Questions. ## Checklist; - [X] Tests added for any new features; - [X] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2229:88,test,test,88,https://psicode.org,https://github.com/psi4/psi4/pull/2229,4,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,"## Description; Much misc. ## Todos; - [x] Better error msg for MathOpenMP, mostly when GCC+MKL and can't find iomp5; - [x] Fix items in p4c4 interface; - [x] ccsd(t) grad in cfour v1 (came down to an unneeded `\s*`). test-suite-wise, approx works equally well with v1 or v2; - [x] DROPMO handling; - [x] backport a lot of the parsing changes from github.com/qcdb/qcdb to here; - [x] modernize Molecult.init_with_xyz(); - [ ] @JonathonMisiewicz, if you hit can't-align errors, let me know, and I'll switch it out to new mech; - [x] I forgot to obfuscate the global variable names used in pylibefp in #953, so do that here; - [x] fix [forum 1009](http://forum.psicode.org/t/nameerror-name-wfn-is-not-defined/1009/2?u=loriab); - [x] update a bunch of docs items that had accumulated; - [x] officially make python 2.7 unacceptable to the build system. ## Checklist; - [ ] ~[All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests)~. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1122:218,test,test-suite-wise,218,https://psicode.org,https://github.com/psi4/psi4/pull/1122,3,['test'],"['test-suite-wise', 'tests']"
Testability,"## Description; My debugging efforts indicate the problem with #1325 is that when attempting to clone a molecule with an atom with ZMAT and Cartesian coordinates, when that ZMatrixEntry atom is cloned, its `rto_`, `ato_`, `dto_` CoordEntries are Cartesian. This somehow leads to the parent ZMatrixEntry having `computed_` true, but not for `rto_` and friends. So, we somehow have a bug in molecule creation. To avoid creating new bugs, I want to understand exactly what is going on before trying to implement a fix. Unfortunately, this part of the code is not in great shape. I'll hopefully include a fix for the bug in here, but in the meantime, I'm submitting the code cleanup I'm doing as I try to follow this part of the code. We do not want `libmints` changes to escape a thorough vetting process. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Cleanup `CoordValue` and `CoordEntry`; - [x] Document `add_atom` and `add_unsettled_atom`; - [x] Actually fix #1325 . ## Checklist; - [ ] Is it worth adding a test for this bugfix? This should be a quick one to test, but it looks like we're seeing timeouts due to test overload again.; - [x] Tested this fixes #1325 ; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests) obsessively - everything in ctest except the dft benchmarks and python-vibanalysis. ## Status; - [x] Ready for review; - [ ] Ready for merge. (After the question of whether to add a test.)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1379:1060,test,test,1060,https://psicode.org,https://github.com/psi4/psi4/pull/1379,8,"['Test', 'benchmark', 'test']","['Tested', 'benchmarks', 'test', 'tests']"
Testability,"## Description; New MBIS functionality enables computation of atom-in-molecule (AIM) volumes (<r^3>). More often in force field development, a volume ratio between the AIM volume and the free atom is needed (basically describes the difference in atomic volume between a free atom and an atom in a molecule). This PR automates the computation of MBIS volume ratios by computing free-atom densities at the same level of theory as the molecule. The free-atom computations are on the ground state of a given atom, with the multiplicity taken from the SAD code. These free-atom densities are then run through the MBIS routine, and volumes are computed along with the desired volume ratios. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [X] Automate computation of unique free-atom densities; - [X] Compute volume ratio in MBIS routine. ## Questions; - [ ] Running the MBIS code now causes many UHF computations to run, do we need all of the printing here?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2127:1029,Test,Tests,1029,https://psicode.org,https://github.com/psi4/psi4/pull/2127,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; No new features were added. This is a bugfix for a minor problem described in issue #1485. The MoldenWriter::write method was appending output to an existing Molden file, if present. This is not the desired behavior since the appended part is not read by post-processing tools, nor is it part of the definition of the file format. This becomes especially confusing when doing a test calculation, where one is trying to get a psi4 input file to work as intended with some trial and error. All results from previous trials are kept in the Molden file and only the first one is read by a post-processing tool, not the last one. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Truncate an existing Molden file, instead of appending. ## Questions; None. ## Checklist; - No new tests added; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1506:394,test,test,394,https://psicode.org,https://github.com/psi4/psi4/pull/1506,4,['test'],"['test', 'tests']"
Testability,## Description; Non-urgent stuff I found this week. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Expand my collection of Windows problems and solutions after Tuesday's fun with #2624 ; - [x] Update supported Py versions in README; - [x] Fix a test that wasn't declaring its dependencies; - [x] Make non-optional the use of `git --atomic` for versions/tags/CI conda; - [x] Expand logic on whether to build conda-pkg or not to include the 1.N.x maintenance branches. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2629:305,test,test,305,https://psicode.org,https://github.com/psi4/psi4/pull/2629,2,"['log', 'test']","['logic', 'test']"
Testability,"## Description; Not expected to pass, as it needs a special qcel and qcng. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] RN 1; - [ ] RN 2. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3034:583,Test,Tests,583,https://psicode.org,https://github.com/psi4/psi4/pull/3034,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; Not for review. This in contents is much a duplicate of #2354, except that was (18 months ago master + SB commits + UB commits + SB commits, all with some master commits sprinkled in) and this is (current master + UB commits + 1 LAB commit with occ/dfocc testing + SB commits). This will have more testing added and be broken up into further PRs. Just notification of progress, @behnle. Thanks for the very nice contribution. ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2633:271,test,testing,271,https://psicode.org,https://github.com/psi4/psi4/pull/2633,2,['test'],['testing']
Testability,"## Description; Now that I have set up a conda environment, I was able to check whether #2218 fixed the issue of the capitalization of the xc functional keywords. It did not. This merge solves the issue:; ```. => Exchange Functionals <=. 1.0000 XC_LDA_X. => Correlation Functionals <=. 1.0000 XC_LDA_C_PW. => LibXC Density Thresholds <==. XC_LDA_C_PW: 1.00E-15 ; XC_LDA_X: 1.00E-15 ; ```. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2227:573,Test,Tests,573,https://psicode.org,https://github.com/psi4/psi4/pull/2227,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; OH molden tests were getting tripped up in conda packages on B1 vs. B2. Specifying `c2vz` and playing with convergence didn't help. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2264:26,test,tests,26,https://psicode.org,https://github.com/psi4/psi4/pull/2264,4,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; On Python 3.8.2, I was getting the following warnings; ```; /usr/lib/psi4/driver/qcdb/modelchems.py:95: SyntaxWarning: 'str' object is not callable; perhaps you missed a comma?; text += """""" %17s: %s\n"""""" (rol, cit.doi); /usr/lib/psi4/driver/qcdb/modelchems.py:148: SyntaxWarning: 'str' object is not callable; perhaps you missed a comma?; text += """""" %17s: %s\n"""""" (rol, cit.doi); /usr/lib/psi4/driver/qcdb/modelchems.py:170: SyntaxWarning: 'str' object is not callable; perhaps you missed a comma?; text += """""" %17s: %s\n"""""" (rol, cit.doi); /usr/lib/psi4/driver/qcdb/modelchems.py:192: SyntaxWarning: 'str' object is not callable; perhaps you missed a comma?; text += """""" %17s: %s\n"""""" (rol, cit.doi); /usr/lib/psi4/driver/procrouting/proc.py:1249: SyntaxWarning: ""is"" with a literal. Did you mean ""==""?; read_orbitals = core.get_option('SCF', 'GUESS') is ""READ""; ```; after running something like ; ```; #! Sample HF/cc-pVDZ H2O Computation; import psi4; psi4.set_memory('500 MB'). h2o = psi4.geometry(""""""; O; H 1 0.96; H 1 0.96 2 104.5; """"""). psi4.energy('scf/cc-pvdz'); ```. It looked like two simple fixes. The string formatting was missing a `%` and the comparison could be replaced by `==`. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Fewer warnings. ## Questions; - [ ] Does this need a test?. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1891:1365,test,test,1365,https://psicode.org,https://github.com/psi4/psi4/pull/1891,4,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,"## Description; Optimizes the integral transformation step of SAPT(DFT), in which the transformed MO needs to be written to the disk. The `STORE` scheme in `src/psi4/lib3index/dfhelper.cc` has problem in writing blocks of integrals efficiently, and this PR changes it to `direct_iaQ` to optimize the writing process. Also fixed a few memory related bugs and modified a few timer tags.; The deafult scaling scheme of SAPT(DFT) exchange-dispersion energy is now changed from `DISP` to `FIXED`. It scales the uncoupled Exch-Disp2 by 0.769848. Deeper details are discussed in the paper [Y. Xie, D. G. A. Smith, and C. D. Sherrill, J. Chem. Phys. **157**, 024801 (2022)].; The SAPT(DFT) procedure is also optimized for the case that `SAPT_DFT_FUNCTIONAL = HF`, i.e. running SAPT0 with the SAPT(DFT) driver, to avoid redundant SCF calculations. ## Todos. - [ ] Optimization of disk I/O in SAPT(DFT) integral transformation; - [ ] Fixed minor memory related bugs and modified timer tags; - [ ] Switched default exch-disp scaling scheme to FIXED (default factor 0.769848); - [ ] Optimization of SAPT(HF) procedure. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2481:1158,Test,Tests,1158,https://psicode.org,https://github.com/psi4/psi4/pull/2481,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; Originally, only the last rotation or polarizability values computed were actually dumped to the dictionary accessed by `core.get_variables`. This fix pushes each one into the dictionary with its corresponding wavelength (in NM). I've added a few lines to `tests/cc39/input.dat` and `tests/cc29/input.dat` to test the polarization and rotation variables, respectively. I've run the tests separately since the quick tests on Travis may not cover them, the results can be found [here](https://gist.github.com/bgpeyton/6a7842adb77a03a10bf696c8364a9c54) and [here](https://gist.github.com/bgpeyton/a6654acd0f7fcaa89b5023bebd40b025). . ## Todos; - [x] Make polarizabilities push each calculated value to the dictionary just like I did with rotation; - [x] Add to polarizability / rotation test cases to ensure new variables don't get overwritten by ""accident"". ## Questions; None. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/857:273,test,tests,273,https://psicode.org,https://github.com/psi4/psi4/pull/857,6,['test'],"['test', 'tests']"
Testability,"## Description; PR #2022 labeled _ground-state_ properties with the method name... even when the method name included ""EOM-"". So even though `ccsd` and `eom-ccsd` compute the same ground state dipole, they weren't given the same name. This PR fixes that. More fixes to come, but the next PR will be heftier. Obligatory @bgpeyton ping. ## Checklist; - [x] `eom` tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2533:361,test,tests,361,https://psicode.org,https://github.com/psi4/psi4/pull/2533,1,['test'],['tests']
Testability,"## Description; PR #844 made the dipole field a required argument almost everywhere but missed DMRG. The DMRG code now supplies this argument, so the code can be built again!. ## Questions; - [x] ~I couldn't find a dmrg test suite. I assume that DMRG doesn't need any wacky external field handling.~ Tested and passing!. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/873:220,test,test,220,https://psicode.org,https://github.com/psi4/psi4/pull/873,2,"['Test', 'test']","['Tested', 'test']"
Testability,"## Description; PR 1 / ? of global diagonalizer cleanup (#2642); This is a subset of #2642, and the rest of #2642 will be broken up into new PRs after this is merged. `sq_rsp.cc` contained an entire commented out diagonalizer function, and some comments related to that, from 2010. (?); Deleted. rsp.cc still used its own implementation of a diagonalizer, now it has been rewritten to use the LAPACK routine instead.; This has allowed the deletion of tred2.cc and tqli.cc. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Remove unused code from sq_rsp.cc; - [x] Rewrite rsp.cc. ## Questions; - [ ] The **only** user of rsp(...) is fine with ascending order results: https://github.com/psi4/psi4/blob/ad2063594a88fd9f60d5a122398bf2f6ae2102a9/psi4/src/psi4/detci/diag_h.cc#L245; Based on this, I have not reimplemented the old function's support for reordering the results (`matz > 1`), so this will be a change in behaviour and rsp(...) is marked as `PSI_API`. Is this objectionable? It now fails with an error message if someone tries to ask for the eigenvalues in descending order.; - [x] It is not documented if the packed lower-triangular matrix on the input is supposed to be row-major-packed or column-major-packed. Based on the call site above, I guessed it is row-major packed. Is this correct? LAPACK expects column-major-packed, so I am transforming the array to be just so.; - [ ] I _think_ I got everything right, but I am not entirely sure if the DETCI test suite is thorough enough to find out if I did not. Codecov suggests the call site is not covered (https://app.codecov.io/gh/psi4/psi4/blob/master/psi4/src/psi4/detci/diag_h.cc), but the last coverage measurement seems to have been a year ago. ## Checklist; - [x] No new features; - [x] All or relevant fraction of full tests run, see [test.log](https://github.com/psi4/psi4/files/9162565/test.log). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2637:1524,test,test,1524,https://psicode.org,https://github.com/psi4/psi4/pull/2637,6,"['log', 'test']","['log', 'test', 'tests']"
Testability,"## Description; PSIMRCC has a wavefunction now. This is **not** the last PR in the PSIMRCC series. Another brief PR will be needed for clang format and to finish moving the responsibility of keeping track of ""free memory"" to the wavefunction. You'll notice that at present, the `free_memory_` variable isn't modified. That used to be ""done"" by myriad allocate/release statements, which were removed in #1901. This is a very long PR as it is, so I'm moving that task to a separate PR. Obligatory pings: @loriab, @fevangelista, @andysim. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] PSIMRCC has a wavefunction!. ## Checklist; - [x] Quick tests and psimrcc tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1949:689,test,tests,689,https://psicode.org,https://github.com/psi4/psi4/pull/1949,2,['test'],['tests']
Testability,"## Description; Parallelism was added to the construction of the DFT Grid with OpenMP. . The grid construction's asymptotic complexity is a function of the number of atoms, so it can be significant for small-to-medium sized molecules, especially when a smaller basis set is used. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Parallelized DFT grid construction. ## Questions; - [x] Is this necessary? I ran some scaling tests, and grid construction accounted for up to one third of the total wall time on 6 cores for molecules with between ~75 and ~225 atoms; - [x] Are there best practices for OpenMP specific to Psi4? I used the static scheduler since it seems that each atom will result in the same amount of work, but I'm open to other opinions. The best scheduler could also be determined empirically on a set of test calculations, but I don't know if the differences between scheduler performance is significant enough to warrant this. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] Ran all tests, passed everything but cbs-xtpl-freq, x2c1, dftd3-version, and mrcc-rohf_ccsdt_q_. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1291:472,test,tests,472,https://psicode.org,https://github.com/psi4/psi4/pull/1291,4,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,"## Description; Partial fix to #2634. thanks, @TiborGY, for that report. The mrcc interface beyond single-points was another casualty of distributed driver. The Allen test needs a further fix that involves moving a dictionary. In the meantime, this heals all the ctests. Update: I've got all parts fixed locally, and one of these changes is no longer necessary. I'll leave this open until the other PR available, in case someone needs a quick fix. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2638:167,test,test,167,https://psicode.org,https://github.com/psi4/psi4/pull/2638,4,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,## Description; Patch to the plugin code to work with ```PYMOD_INSTALL_LIBDIR``` paths. Tested with and without ```PYMOD_INSTALL_LIBDIR``` set to ```/python2.7/site-packages```. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/490:88,Test,Tested,88,https://psicode.org,https://github.com/psi4/psi4/pull/490,1,['Test'],['Tested']
Testability,"## Description; Patch up VV10 UKS dispersion. This had been a nagging issue for awhile now, but it turns out the only real issue is that I forgot to add the VV10 energy to the total SCF energy. I had originally started blaming the Fock term as the VV10 energy was spot on and subsequently starting playing with those values. Quite the blooper on my part:. ```; (p4dev) daniel:~/Gits/psi4ds/tests/dft-bench-ionization (vv10_uks)$ python ../../psi4/run_psi4.py --inplace input.dat; 	VSXC: Psi4 vs. Q-Chem.............................................PASSED; 	VV10: Psi4 vs. Q-Chem.............................................PASSED; 	B97M-V: Psi4 vs. Q-Chem...........................................PASSED; 	LC-VV10: Psi4 vs. Q-Chem..........................................PASSED; 	wB97M-V: Psi4 vs. Q-Chem..........................................PASSED; 	wB97X-V: Psi4 vs. Q-Chem..........................................PASSED; ```. This also fixes a small bug in meta-GGA UKS gradients from the original implementation. Fixes #982 and fixes #962. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/983:390,test,tests,390,https://psicode.org,https://github.com/psi4/psi4/pull/983,1,['test'],['tests']
Testability,"## Description; Per discussion on the conference call, this PR gives some error messages for cases where using a serialized wavefunction would give a segfault. 1851 is still an issue, but one that shouldn't hold up 1.4 or eat my time to straighten out `dfocc`. I'm modernizing enough modules in Psi as it is... ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Replace some segfaults from #1851 with actual error messages. ## Checklist; - [x] Tested that all four error modules used to segfault and now give an error message. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1858:491,Test,Tested,491,https://psicode.org,https://github.com/psi4/psi4/pull/1858,1,['Test'],['Tested']
Testability,"## Description; Per issue #2374, this PR adds an interface to Yukawa ERIs from Libint2. ## Questions; - [x] How would I test my new code? (How are erf kernels tested?); - [x] Do I need to add functions in MintsHelper for the Yukawa kernel?. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2386:120,test,test,120,https://psicode.org,https://github.com/psi4/psi4/pull/2386,2,['test'],"['test', 'tested']"
Testability,"## Description; Phase 1 in trying to be more systematic about checking consistency within psi. Also, separate a set of references that can reside in qcng for common testing btwn p4/qcng/qcdb. This runs several classes of tests --; * can each mp2-capable module do something sensible with each scf_type?; * can each mp2-capable module return the same right answer for each capable scf_type/mp2_type?; * can each mp2_type returns something good w/o the user knowing about modules?; * all above for gradient, plus check against findif; * for all these, is the full qcvars, return values, `CURRENT ENERGY`, etc. contract fulfilled for both P::e and wfn? . ## Todos; - [x] check mp2 fundamentals from mp2 energy targets (e.g., `MP2 TOTAL ENERGY` from `energy('mp2')`; - [x] check mp2 fundamentals from mp2 gradient targets (e.g., `MP2 TOTAL ENERGY` from `gradient('mp2')`; - [ ] check scs mp2 from mp2 targets (e.g., `CUSTOM SCS-MP2 TOTAL ENERGY` from `energy('mp2')`; - [x] check mp2 fundamentals from post-mp2 targests (e.g., `MP2 TOTAL ENERGY`) from `energy('fnoccsd')`; - [x] routing; - [x] I think we got the logic of `check_disk_df` off a little in proc.py in that we were checking if correlated method type was `DISK_DF` (my fault) and along the way forbidding `PK` refs with `DF` correlated. I think I fixed this for dfocc but haven't done df with fnocc yet.; - [x] Also corrected logic that was letting through mixed ref+corl derivatives (e.g., pk+df) that had gotten lost. See #245 for much discussion. tl;dr we have none, so let's not continue to let psi proceed with calculations that give beer + wrong answers; - [x] CISD is a poor way to calculate MP2, and it's not like we don't have other modules for RHF & ROHF besides DETCI. And @CDSherrill has allowed that we're unlikely to get to the bottom of it, so closes #311 . And the mp2 detci code is unsteady for multiple-detci-single-psi4 calcs, so it's not smooth to test.; - [x] qcvars; - [x] Newly sets `<mtd> TOTAL GRADIENT` from findif in",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1850:165,test,testing,165,https://psicode.org,https://github.com/psi4/psi4/pull/1850,2,['test'],"['testing', 'tests']"
Testability,## Description; Preparing for future code by improving docstrings and removing unused member variables. ## Checklist; - [x] Quick tests still pass. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2610:130,test,tests,130,https://psicode.org,https://github.com/psi4/psi4/pull/2610,1,['test'],['tests']
Testability,"## Description; Previous nbody tests take long time. I have changed the methods, basis sets and/or molecules to make faster tests. ## Status; - [ ] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1365:31,test,tests,31,https://psicode.org,https://github.com/psi4/psi4/pull/1365,2,['test'],['tests']
Testability,"## Description; Previously, the `dertype` specified in a frequency or optimization-with-hessian computaiton wouldn't get passed on to the pre-hessian gradient. This is now fixed. For optimizations, we can do one better and pass in the last gradient, so we don't need to recompute it. While solving this, I uncovered that supplying a dertype that was ""too high"" for the derivative level would lead to the default case of energy-only computations. That is also fixed. **Although this is an enhancement, this is also a bug fix.** Without this PR, I have no way to get a frozen core MP2 optimization with a `full_hess_every` hessian. The user is responsible for supplying the `dertype`, and they currently have no way to get the `dertype` argument to the pre-hessian gradient. ## Checklist; - [x] Tested this solved my fc-MP2 use case; - [x] Tested this solved the case of a dertype=2 RHF hessian. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1551:793,Test,Tested,793,https://psicode.org,https://github.com/psi4/psi4/pull/1551,2,['Test'],['Tested']
Testability,"## Description; Previously, the `dfocc`, `dfmp2` and `scfgrad` modules all had nearly identical code to compute the **metric term** of density fitted gradients, the contraction against the metric integral derivatives. `dfmp2` even did this _twice_ for a total of 4 times near identical logic appears. (It was 5 before #1953.) This PR consolidates those into a single `MintsHelper` method. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Various classes and functions now take in a `MintsHelper` rather than basis sets directly; - [x] Metric integral derivative contractions are consolidated into `MintsHelper`. ## Checklist; - [x] Timing tests show that with these changes, there's a slowdown of <0.1s, and scaling is effectively constant compared to the scaling of the much more expensive SCF iterations and the `Amn_x` term. I can live with this.; - [x] Quick tests and gradient tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1974:286,log,logic,286,https://psicode.org,https://github.com/psi4/psi4/pull/1974,4,"['log', 'test']","['logic', 'tests']"
Testability,"## Description; Prints out the MBIS valence charges. These were already being computed, just not exposed to the user. Tests were added for the new output, and all tests pass. There is no impact on runtime because it is just exposing values already being computed. Addresses https://github.com/psi4/psi4/issues/3140. ## User API & Changelog headlines; - [x] MBIS valence charges are now exposed and printed in MBIS output; - [x] The wfn array_variable `MBIS VALENCE CHARGES` is now available to be retrieved. ## Dev notes & details; - [x] Saves the MBIS valence charges to it's own little matrix; - [x] And exposes those charges on the python side as the wfn variable `MBIS VALENCE CHARGES`; - [x] Updates the relevant tests. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3226:118,Test,Tests,118,https://psicode.org,https://github.com/psi4/psi4/pull/3226,6,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; Provide a brief description of the PR's purpose here. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1628:90,Test,Tests,90,https://psicode.org,https://github.com/psi4/psi4/pull/1628,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; Provide a brief description of the PR's purpose here. ## Checklist; - [ ] Tests added for any new features; - [x] tested gdma. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1524:90,Test,Tests,90,https://psicode.org,https://github.com/psi4/psi4/pull/1524,2,"['Test', 'test']","['Tests', 'tested']"
Testability,"## Description; Provide a brief description of the PR's purpose here. ## Todos; - [x] bump pb11 internal build to v2.5.0; - [x] bump ambit internal build to v0.4.1; - [x] update paper and acknowledge more folks in header; - [x] add extra arg to bindings of so_overlap/kinetic so p4n ref impl can run as-is; - [x] fix missing qcvars, wfn settings in fnocc and occ for conventional LCCD; - [x] add conventional LCCD tests to standard_suite courtesy of @JonathonMisiewicz reference implementation over at p4n, https://github.com/psi4/psi4numpy/tree/master/Coupled-Electron-Pair-Approximation; - [x] depends on https://github.com/MolSSI/QCEngine/pull/244 for data. Furthermore all standard_suite tests are presently suppressed until qcng v0.15 minted. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1913:414,test,tests,414,https://psicode.org,https://github.com/psi4/psi4/pull/1913,2,['test'],['tests']
Testability,"## Description; Provide a brief description of the PR's purpose here. ## Todos; - [x] deprecate DIPOLE X and QUADRUPOLE XX qcvars that were anomolously in Debye-Ang units; - [x] add DIPOLE and QUADRUPOLE array qcvars in atomic units; - [x] edit all the tests so that they check both for the interim; - [x] the `P::e.globals` and `Wfn.variables_` maps work in `core.Matrix`. Want to keep this storage for continuity and the preservation of symmetry, but 2D is not what one expects for dipole or charges (much less what one expects for octupole). So selected properties vars are returned as ndarray from the `variable()` query fns. This means you can't assume the return is a Matrix.; - [x] schema handling addressed accordingly and tested for run_json and run_qcschema setups. Note that return units now au; - [x] handling >quadrupole. **EDIT** change of plans from first post. in order not to have to go from unique multipole elements (10 for octupole) to complete array (27) c-side and flat since P::e.globals restricted to Matrix, now only the compressed array is stored in globals/variables_ and that gets turned into (and back) the complete multidimensional ndarray when queried py-side. quadrupole has been turned back c-side to `(6)`, rather than `(3,3)` for consistency with the other poles. ## Checklist; - [x] Tests added for any new features ; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1800:253,test,tests,253,https://psicode.org,https://github.com/psi4/psi4/pull/1800,5,"['Test', 'test']","['Tests', 'tested', 'tests']"
Testability,## Description; Provide a brief description of the PR's purpose here. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1307:245,Test,Tests,245,https://psicode.org,https://github.com/psi4/psi4/pull/1307,6,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; Provide a brief description of the PR's purpose here. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] fix ""<built-in method X of PyCapsule object at Y> returned NULL without setting an error"" (http://forum.psicode.org/t/frequency-calculations-result-in-built-in-method-x-of-pycapsule-object-at-y-returned-null-without-setting-an-error/1436) by following jcerezo's advice.; - [x] change `compare_vibinfo` to always be `atol`, not `digits`.; - [x] check DF Hessian calcs to PK refs at looser tols; - [x] test atom Hessian (analytic only; fix findif in ddd). ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1845:568,test,test,568,https://psicode.org,https://github.com/psi4/psi4/pull/1845,4,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,"## Description; Provide a brief description of the PR's purpose here. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] switch to qcel for covalent radii. require v0.1.2; - [x] to try out covalent radii, add a test for translating to MOL format. add to psi4.core.Mol.; - [x] fix the compare_vals in threading_test; - [x] clean up all but json_out files from ctest run; - [x] add levels to pytest. while `psi4 --test` still does smoke only, other access modes have smoke/quick/default/long and we can start expanding the pytest suite. ## Checklist; - [x] added MOL writer test; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1330:258,test,test,258,https://psicode.org,https://github.com/psi4/psi4/pull/1330,5,['test'],"['test', 'tests']"
Testability,"## Description; Provide a brief description of the PR's purpose here. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; * Misc; - [x] Add PR help, as found by DGAS http://makeapullrequest.com; - [x] Add statement of support for https://python3statement.org/; - [x] Rename some DFHelper timers for the sake of alignment in timer.dat; - [x] More work on test_threading python script that will check the mkl/omp linking of psi4.so and the dfmp2 plugin template (or any other .so). Also will run psithon and psiapi tests on psi4 and dfmp2 plugin to make sure multithreads at least 1.3x speedup over single-thread; - [x] Update docs on BLAS recommendations, conda compilers. cautions on OpenBLAS sufficient to close psi4/psi4#1009; * Real part; - BLAS/LAPACK, compiler, and OpenMP are handled independently but are actually intertwined. Greatest complication comes about psi compiled by Intel with MKL (req. iomp5), then plugin built off that psi by GCC with OpenMP=ON and end up with both gomp and iomp5 linked, which is a subtle disaster.; - What we have been doing: cmake/math finds mkl_rt and outright adds iomp5, pthreads, etc. external/common/lapack packages those all into a target to pass along to blas-using dependencies. Meanwhile cmake/autocmake_omp detects just OpenMP flags (e.g., `-fopenmp` and `-qopenmp`) for the various compilers add adds them directly to `CMAKE_CXX_FLAGS` (for propagation to to psi4 (and consequently plugins) but **not** to deps (which might have OpenMP=OFF)). Actual OpenMP _libraries_ are not handled (except the aforementioned iomp5 hard-code) so (1) gomp can intrude with GCC and (2) the nice `-fopenmp=iomp5` capabilities of Clang aren't used.; - Trouble with sending me on long car trips (i.e., LSU) is that I begin plotting how things _should_ be. This PR is my take on answering this. It's insane to spring it at this point in the release cycle, but the first time after Setca that I tried building an ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1031:570,test,tests,570,https://psicode.org,https://github.com/psi4/psi4/pull/1031,1,['test'],['tests']
Testability,## Description; Provide a brief description of the PR's purpose here. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [ ] Feature1; * **User-Facing for Release Notes**; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1086:299,Test,Tests,299,https://psicode.org,https://github.com/psi4/psi4/pull/1086,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; Provide a brief description of the PR's purpose here. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Inclusion of outer P-shell for cc-pVTZ-MINAO for alkali and alkali earth was split between FOR (Rob, CDS, Susi) and AGAINST (FAE, Molpro). CDS changed his vote, so deleted and added as appropriate so filled in through Kr thanks to Cici. No change in test cases. We should now match Molpro.; - [x] Added conda package instructions to obtaining psi4 docs section; - [x] Nixed `using namespace std;` in favor of explicit `std::`. Appears to have broken sapt7 test (now fixed).; - [x] Made `std::abs` and `std::fabs` explicit; * **User-Facing for Release Notes**. ## Status; - [x] Ready to go.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/756:435,test,test,435,https://psicode.org,https://github.com/psi4/psi4/pull/756,2,['test'],['test']
Testability,"## Description; Provide a brief description of the PR's purpose here. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] removes lingering RC1 refs, fixing psi4/psi4#564; - [x] ESP cubes had been broken by the basis set changes associated with inversion, so fixed that, as brought up on [forum]( http://forum.psicode.org/t/auxiliary-basis-set-not-found-in-cubeprop-esp-calculations/383); - [x] new cubeprop-esp test case. only 4 s with df-scf/qzvp electrostatic potential. any red flags?. ## Questions; - [ ] Note that I had to add a fn to wfn. I'm glad to go another way if ppl object and suggest. ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/568:475,test,test,475,https://psicode.org,https://github.com/psi4/psi4/pull/568,1,['test'],['test']
Testability,"## Description; Provide a brief description of the PR's purpose here. ## Todos; Notable points that this PR has either accomplished or will accomplish.; - [x] renamed gtfock and erd. enable erd allowed w/o being default; - [x] add astropy docs dependence. all psi4.core and psi4.driver autodoc-ed w/o helper scripts; - [x] do absolute, not relative, imports in psi4.driver; - [x] replace cdict with variables and arrays in core.Wfn; - [x] reimplement versioning, at least internally. publish `v1.0` tag on top of `1.0`; - [x] 	Switched sto-3g and 3-21G DF fitting basis sets to def2-SVP; - [x]	Reword castup basis logic; - [x] **python 3 compatible**, now with testing!; - [x] numpy interface updates; - [x] effectively re-enable threaded MKL (build issue); - [x] reenable mostly static linked build; - [x] externals installed to `external/` not `external/{pkgname}`. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/486:614,log,logic,614,https://psicode.org,https://github.com/psi4/psi4/pull/486,2,"['log', 'test']","['logic', 'testing']"
Testability,## Description; Provide documentation for a soon-to-follow PR from Lori that will fix the Ca basis for cc-pCV5Z. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Add notes on why we are updating the file; * **User-Facing for Release Notes**; - [x] Clarify a couple of points in the user manual regarding custom basis sets (came across this while I was testing the fixed basis). ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/781:418,test,testing,418,https://psicode.org,https://github.com/psi4/psi4/pull/781,1,['test'],['testing']
Testability,"## Description; Provides a remedy for [#909](https://github.com/psi4/psi4/issues/909). `Molecule::mass` and `Molecule::Z` show inconsistent behavior for ghosts. This PR requires a new argument `bool zero_ghost` on the C++ side and optionally in the Python layer which gives a choice for behavior. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Required C++ argument `bool zero_ghost` for `Molecule::mass`; - [x] Optional python argument `bool zero_ghost` for `Molecule::mass`; - [x] Required argument `bool zero_ghost` for `Molecule::Z`; - [x] Optional python argument `bool zero_ghost` for `Molecule::Z`; - [x] Optional C++ argument `bool zero_ghost` for `Molecule::center_of_mass`; - [x] Optional C++ argument `bool zero_ghost` for `Molecule::inertia_tensor`; - [x] Check all C++ calls for ""intended behavior""; * **User-Facing for Release Notes**; - [x] New optional python arguments for `Molecule.mass()` and `Molecule.Z()`. ## Questions; - Each file changed on the C++ side needs to be passed either `True` or `False`. I'm defaulting to previous behavior in all cases except `optrot.cc` where I know functionality should change. ; - ""Previous behavior"" is that `mass` returns non-zero for ghost atoms (equivalent to `zero_ghost = false`), and `Z` returns zero for ghost atoms (`zero_ghost = true`). This behavior may want to be changed in some places, so this is a good time for a logic pass-through. . ## Checklist; - [x] Add argument for `mass`; - [x] Add argument for `Z`; - [x] Tests; - [x] Docs. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/990:1453,log,logic,1453,https://psicode.org,https://github.com/psi4/psi4/pull/990,2,"['Test', 'log']","['Tests', 'logic']"
Testability,"## Description; Provides and exposes a `matrix` method to check if two matrices are the same, within a given tolerance. This may allow for some simplifying of the test infrastructure, but I don't know the test infrastructure nearly well enough to say. ## Checklist; - [x] `test_matrix.py` passes. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2395:163,test,test,163,https://psicode.org,https://github.com/psi4/psi4/pull/2395,2,['test'],['test']
Testability,"## Description; Provides users the ability to form a basisset composed of two combined basissets, the two can be combined simply or through use of the complementary auxiliary basis set (CABS) approach of Valeev et al. ## Dev notes & details; - [X ] Uncomments `pyconstruct_combined` in qcdb with minor changes to fit updated python; - [X ] Changes input to `build_ri_space` in OrbitalSpace to require a prebuilt combined `BasisSet` object; - [X ] Changes `build_cabs_space` in OrbitalSpace to use a full SVD; - [X ] Adds pytest `test_orbitalspace.py` to check orthonormality between orbital basis set and CABS; - [X ] Adds updated F12 basissets from the Basis Set Exchange; - [X ] Use of the CABS created works with my F12 plugin giving correct energies. ## Questions; - [ ] Shoud I generalize `_pybuild_basis` aka `BasisSet.build` to work with a list of keys, targets, roles, and other? Or create a new function to more easily access the building of a combined basisset?. ## Checklist; - [X ] `test_orbitalspace.py`; - [X ] Passes quick tests [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [X ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2982:1038,test,tests,1038,https://psicode.org,https://github.com/psi4/psi4/pull/2982,3,['test'],['tests']
Testability,"## Description; Psi4 ecosystem is growing (good) and spreading (good, b/c psi4 channel isn't a natural home for openfermion, for instance; bad, b/c it's harder to install/test/keep-track-of everything at once). The initial scope of this PR was to set up a GHA that tested as many addons as conda could lay its hands on. Other stuff happened along the way ... ### Highlights for review (link permanence questionable); - [.github/workflows/README.md](https://github.com/psi4/psi4/pull/2454/files#diff-636942e0afa55e1aea027fb857aa2c6046858fb317c0b9a4f12ff3ca17e64ffb); - [.github/workflows/ecosystem.yml](https://github.com/psi4/psi4/pull/2454/files#diff-9886b1fe077112c3a9952964ed992dc3cd38b48d0a506a6b7a00241e4669d2b1); - [doc/sphinxman/source/add_tests.rst](https://github.com/psi4/psi4/pull/2454/files#diff-c35e937cac108347811127c527ab39f06b064d399a1eced0714ecdc47d954058); - representative; - [tests/tu1-h2o-energy/test_input.py](https://github.com/psi4/psi4/pull/2454/files#diff-54403c03174a7c69742c46e5553bf1ba9f7d4b855c649eae56ffb0662a0ba50e); - [tests/adcc/formaldehyde-pe-adc1/test_input.py](https://github.com/psi4/psi4/pull/2454/files#diff-58c0e6c9056f03a206a5b10c17a465c7931c41d6a9c6c8d7e434adca515084d0); - if you want to read testing docstrings [psi4/driver/p4util/testing.py](https://github.com/psi4/psi4/pull/2454/files#diff-7104dfa29c684b4211ecc2cc6e77479d18570fdadc5a67951d3442e45f462d89); - if you want to read testing code [tests/pytests/addons.py](https://github.com/psi4/psi4/pull/2454/files#diff-93c9a8823b9fa2f85a114c39cd0d17d6c66e4cb93aa00189785ff8040d3169b3). ## Todos. - CI; - [x] read [.github/workflows/README.md](https://github.com/psi4/psi4/pull/2454/files#diff-636942e0afa55e1aea027fb857aa2c6046858fb317c0b9a4f12ff3ca17e64ffb); - [x] current readings are below (fail/pass/skip/uncollected/xfail/xpass/warnings) for `pytest -m ""addon and not long""`; - L: -/244/ 10/3229/4/4/303; - M: -/229/ 25/3229/6/2/304; - W: -/144/112/3229/2/4/303; - skipped on Linux are things like ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2454:171,test,test,171,https://psicode.org,https://github.com/psi4/psi4/pull/2454,3,['test'],"['test', 'tested', 'tests']"
Testability,"## Description; Psi4 is currently using the RMS norm to check for wave function convergence. However, it's well known that the RMS norm isn't as robust as the absolute error in some pathological cases: even though the RMS error is small, you may still have significant gradients for a few orbitals. This PR implements the maximum absolute norm for DIIS in SCF calculations, which can be toggled by setting ```DIIS_RMS_ERROR false```. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Implemented absolute error criterion for DIIS. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1460:630,Test,Tests,630,https://psicode.org,https://github.com/psi4/psi4/pull/1460,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; Pull more attributes from the wavefunction rather than the `MOInfo` object. The next PR will be less trivial. ## Checklist; - [x] cc tests still pass. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2715:149,test,tests,149,https://psicode.org,https://github.com/psi4/psi4/pull/2715,1,['test'],['tests']
Testability,"## Description; Pulls in the C, CXX, and Fortran compiler flags from Psi4, this includes additional compiler flags the user provided in their initial cmake call, and passes them to the new plugin's CMakeLists.txt file. Need people to test to ensure all the needed flags are being obtained. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **User-Facing for Release Notes**; - [ ] User provided Psi4 compiler flags are passed to new plugins. ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/543:234,test,test,234,https://psicode.org,https://github.com/psi4/psi4/pull/543,1,['test'],['test']
Testability,## Description; Put helPME into build and testing. I know OpenMP detection isn't there and prob have to pass `FFTW_ROOT`. ## Todos. ## Questions. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1357:42,test,testing,42,https://psicode.org,https://github.com/psi4/psi4/pull/1357,4,"['Test', 'test']","['Tests', 'testing', 'tests']"
Testability,"## Description; QCSchema has comment and provenance fields. With this PR (and molssi/qcelemental#7), the `qcdb.Molecule` and `psi4.core.Molecule` classes can passthrough these objects. ## Checklist; - [ ] ~Tests added for any new features~; - [x] full tests run. ## Status; In good shape, but I'll probably add more.; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1316:206,Test,Tests,206,https://psicode.org,https://github.com/psi4/psi4/pull/1316,2,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; Quick fix to symmetry in one-electron integral calls in MintsHelper. Closes #2985 . ## Dev notes & details; - [X] Changes the bool to `one_body_ao_computer` to check if the provided basis sets are the same in `mintshelper.cc`. ## Questions; - [X] N/A. ## Checklist; - [X] Adds a test for the one-electron overlap integrals in `test_mints.py`; - [X] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [X] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2986:295,test,test,295,https://psicode.org,https://github.com/psi4/psi4/pull/2986,3,['test'],"['test', 'tests']"
Testability,"## Description; REMP methods added to `occ` and attendant testing and routing. This is PR 1/? in the mega-dfocc-remp series. #### PR Background (not of general interest); There was https://github.com/loriab/psi4/tree/dfocc2 by @bozkaya and @yavuzalagoz that added to `dfocc` (1) non-oo uhf ccsd-level E & G, (2) oo ccd-level E & G, and (3) fno everything. Then, there was #2354 that added remp2 E & G to `occ` and `dfocc` and made extensive improvements to `dfocc` in the matter of combined DIIS (vital for convergence) and int overflows. All based on pre-DIIS overhaul #2369 . To untangle this, I started from master, cherry-picked the dfocc2 commits, cherry-picked the #2354 commits, modernized the DIIS calls, then added the neglected stdsuite testing and attendant qcvar fixups for existing occ/dfocc methods and new methods remp2 and categories (1) and (2) from dfocc2 branch. That mega-changeset lives at #2633 for now. This PR breaks off the `occ` portion for review. ## Todos; - [x] @behnle added REMP2 and OREMP2 hybrid perturbation theories (https://doi.org/10.1063/1.5086168) with conventional integrals added to `occ` module, as originally proposed in #2354; - [ ] note that this uses a specialty QCEngine for reference values. https://github.com/MolSSI/QCEngine/pull/375 It'll build by itself. I'll need to mint a QCEngine patch release before building conda packages with this PR in master.; - [x] docs-wise, I picked off a bit and included it in this PR. on the whole, let's defer docs edits until the dfocc PR; - [x] reworked the run_occ* driver functions a bit so that method defs are localized and there's less risk of missing an internal setting when adding new methods.; - [x] added stdsuite testing for new methods remp2 energy and oremp2 energy and gradient. added stdsuite testing for existing E & G for omp2, omp2.5, omp3, oremp2, olccd and filled in some gaps for ccsd, ccsd(t), a-ccsd(t). all conventional ints. fixed up some mis-set byproducts uncovered by stdsuite testing:",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2653:58,test,testing,58,https://psicode.org,https://github.com/psi4/psi4/pull/2653,2,['test'],['testing']
Testability,## Description; Raises exception to address #1045. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [ ] Feature1; * **User-Facing for Release Notes**; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1048:280,Test,Tests,280,https://psicode.org,https://github.com/psi4/psi4/pull/1048,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; Rebase through of qcel v0.4.0 (not yet released). ## Todos; - [x] moved `tests/pytest` to `tests/pytests` so latter can be a module w/o confusing ""import pytest""; - [x] migrated to use which, which_import, parse_version from qcl; - [x] removed alignment code that migrated to QCElemental. - [x] derived testing fns from qcel, rather than scattering and duplicating in psi4/qcdb; * there's two conflicting APIs going on:; * Psi4: `compare_something(expected, computed, significant_digits, label, verbose=1)`; * QCEl: `compare_something(expected, computed, label=None, atol=1.e-6, quiet=False)`; * and there's two sets of fn names:; * Psi4: `compare_integers`, `compare_strings`, `compare_arrays`, `compare_values`, `compare_matrices`; * QCEl: `compare` (for exact comparison scalars or np-castable arrays), `compare_values` (for floating point comparison scalaurs or np-castable arrays), `compare_recursive` (for iterables containing any of the previous); * Basically, now in psi4 or qcdb, you can use the qcel fns and the psi4 fns and the psi4 API or the qcel API. And their failure response is localized in a fn that can be switched out. ; * A few highly specialized comp fns (like `compare_molrecs` have been deprecated or psi4 API deprecated, but there should be enough UpgradeHelper guides to raise a problem and suggest solution.; * EDIT: whether using psi4 or qcel APIs, `label` is no longer required -- it'll default to the calling fn name (or `<module>` in a script). - [x] added link to binder image and fix tutorial cmd that didn't work in binder. ## Questions; - [ ] Someone should look at the old/new `compare_matrices` fns to check that the values comparison is still catching any detailed uses of the `^` operator. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1644:89,test,tests,89,https://psicode.org,https://github.com/psi4/psi4/pull/1644,6,"['Test', 'test']","['Tests', 'testing', 'tests']"
Testability,## Description; Recent changes to the cmake build systems introduced an issue when compiling psi4 plugins and Forte on a Mac. Compilation fails at the linking stage with the error; ```; ld: can't link with bundle (MH_BUNDLE) only dylibs (MH_DYLIB); ```. This PR reverts two changes. ## Questions; - [ ] Is there a better solution that still uses `pybind11_add_module(core MODULE NO_EXTRAS core.cc)`?. ## Checklist; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1640:455,test,tests,455,https://psicode.org,https://github.com/psi4/psi4/pull/1640,2,['test'],['tests']
Testability,## Description; Redirects the PSIO errors from `stderr` to exception message (stderr and normal output).; Essentially addressing #2019 and #1965. Example print:. ```; !----------------------------------------------------------------------------------!; ! !; ! Fatal Error: PSIO_ERROR: 5 (open call failed) !; ! Check the location of your scratch directory which can be !; ! specified via the $PSI_SCRATCH environment variable or in !; ! the $HOME/.psi4rc file. !; ! Please note that the scratch directory must exist and be !; ! writable by Psi4 !; ! Error occurred in file: /Users/kruse/qc/psi4/psi4/src/psi4/libpsio/error.cc on !; ! line: 133 !; ! The most recent 2 function calls were: !; ! !; !----------------------------------------------------------------------------------!; ```. ## Feature; - [x] PSIO errors to stderr and normal output. ## Checklist; - [x] limited manual testing by deleting files; - tests not applicable . ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2030:881,test,testing,881,https://psicode.org,https://github.com/psi4/psi4/pull/2030,2,['test'],"['testing', 'tests']"
Testability,"## Description; Regenerate samples from tests. No need to examine diff. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2757:40,test,tests,40,https://psicode.org,https://github.com/psi4/psi4/pull/2757,1,['test'],['tests']
Testability,"## Description; Rehabilitates Cfour interface. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Interface working again for primary modes (~60 tests). Not yet for `vpt2()`; - [x] Test cases kw-7, kw-8, rohf-mp4 still failing for known reasons; * **User-Facing for Release Notes**; - [x] Cfour interface working again. Recc to use in communication with a developer. Cfour 2.00beta. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/730:209,test,tests,209,https://psicode.org,https://github.com/psi4/psi4/pull/730,2,"['Test', 'test']","['Test', 'tests']"
Testability,"## Description; Remove mention of `ERISieve` from some modules that no longer use it. `libfock` still uses it, but that's a problem for another day. Also, `dfmp2` cleanup. No more `new`!. ## Checklist; - [x] `dfmp2` tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2657:216,test,tests,216,https://psicode.org,https://github.com/psi4/psi4/pull/2657,1,['test'],['tests']
Testability,## Description; Remove some unused files. Bump qcel -- the 0.19 isn't strictly needed but it'll avert some bad qcel+pydantic combinations in the wild. Bump v2rdm -- @hokru noticed an incompatibility after #2100 . . ## Questions; - [ ] May as well wait on this PR until determine if safe to update reference of fchk+dct test. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2128:319,test,test,319,https://psicode.org,https://github.com/psi4/psi4/pull/2128,4,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,"## Description; Remove spaces when reading options, fixes #2004. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2051:85,Test,Tests,85,https://psicode.org,https://github.com/psi4/psi4/pull/2051,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; Removes cc46 from ctest temporarily to keep full tests passing. There is no major bug here, rather a bunch of conflicting logic in the `run_cc_property` driver that will be patched before final release. . ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1002:65,test,tests,65,https://psicode.org,https://github.com/psi4/psi4/pull/1002,2,"['log', 'test']","['logic', 'tests']"
Testability,## Description; Removes initialization of DFHelper object in fexch and find by having a dfh object as member data. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Circumvents recalculation of molecular integrals in the fisapt package.; - [x] Provides a corresponding speed-up . ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1140:382,test,tests,382,https://psicode.org,https://github.com/psi4/psi4/pull/1140,2,['test'],['tests']
Testability,## Description; Removes over 4000 unused LoC that I don't think anybody knows how to maintain. DGAS said this was deprecated in favor of Python solvers anyways. ## Checklist; - [x] Quick tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2348:187,test,tests,187,https://psicode.org,https://github.com/psi4/psi4/pull/2348,1,['test'],['tests']
Testability,"## Description; Removes the obsolete mention of Psi3 in the build docs. If someone wants psi3, they can find it by Google... ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1815:300,Test,Tests,300,https://psicode.org,https://github.com/psi4/psi4/pull/1815,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; Repercussions from trying to fix #1986 . I think this fixes #1939, fixes #1978, fixes #2011. ## Todos; - [x] standardize pytests on `@using(""<addon>"")` rather than `@using_<addon>`. addon detection is more runtime than compiletime; - [x] start a smoke tests suite of running through `psi4 --qcschema` to live alongside psithon and psiapi; - [x] finally fix the need for pe/pcm to manually set fix_com/fix_reorient. I have a strategy locally.; - [ ] expand `Mol._initial_cartesian` to other ways to construct a Mol; - [x] snsmp2 1.0.4; - [x] pybind11 2.6.1; - [x] pcmsolver ~1.3.?~ 1.3 having some numerical issues with psi, so going back to a patched v1.2.1. ## Questions; - [ ] Opening the discussion to how to deal with methods that needs no_com/no_reorient/symmetry c1 _from_the_beginning_. Many of our present symmetry tolerant methods just need their parts consistent (e.g., dimer, monoA, monoB); whereas, cppe needs the exact input Cart to match the potfile. (Fun fact: a Mol can go from fix_com T -> F but not the reverse.) The sol'n in this PR is to carry the input Cartesians along as `Mol._initial_cartesians` (so long as not a variable or zmat Mol), which can then be used to reset through `set_geometry()` if the method demands it. This member is akin to the `Mol.EFP` object that gets carried along. Presently this is implemented for just the molecule constructors that psithon/psiapi `psi4.geometry()` and qcsk `Mol.from_schema()` use, but should probably be expanded if adopted. Thoughts on whether this is the best way to solve the problem?; - [ ] @robertodr PCMSolver: I'm only imposing c1, not fix_com/orient based on your slack reply. ok? I've removed all those lines from your ctest and pytest examples (except for alpha that needed it for matching). There's a new pcm mode test in test_addons_qcschema.py. It's writing the input file for pcm input, which is a little questionable in the schema-running world, but it's working for now. Any concerns?; - [ ] @maxsche",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2037:268,test,tests,268,https://psicode.org,https://github.com/psi4/psi4/pull/2037,1,['test'],['tests']
Testability,"## Description; Replace an old-style call to `moinfo_` in `cc` with something more modern: get your number of irreps and orbital space information from the wavefunction. Once this is in, I can batch MOInfo elimination from several more files. ## Checklist; - [x] `cc` tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2704:268,test,tests,268,https://psicode.org,https://github.com/psi4/psi4/pull/2704,1,['test'],['tests']
Testability,## Description; Replace an old-style call to `moinfo_` in `cc` with something more modern: using Matrix technology to bypass the loop over the number of irreps. ## Checklist; - [x] `cc` tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2703:186,test,tests,186,https://psicode.org,https://github.com/psi4/psi4/pull/2703,1,['test'],['tests']
Testability,"## Description; Replace char** irrep_labels() with std::vector<std::string> irrep_labels(); Convert with .c_str() when needed in print statements.; Remove calls to free(); Removed calls to delete in dcft_scf_UHF.cc. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [ ] Part of the change to std::string; * **User-Facing for Release Notes**; - [ ] None. ## Status; - [ ] Test jobs cc1, dfmp2-1, scf-occ all passed, and Irrep labels printed were the same as the reference.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/780:432,Test,Test,432,https://psicode.org,https://github.com/psi4/psi4/pull/780,1,['Test'],['Test']
Testability,"## Description; Replaces #824: Frozen Natural Orbitals were implemented for DF-CCSD and DF-CCSD(T) energies. ## Todos; - [x] FNOs are implemented for MP2.5, MP3, LCCD, CCD, CCSD, CCSD(T), and CCSD(AT).; - [x] Both DF and CD options are available (only for RHF ref for now). ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1390:294,Test,Tests,294,https://psicode.org,https://github.com/psi4/psi4/pull/1390,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; Requiring libefp was rather a holdover from the early days of code-in-repo add-ons. This PR makes it slightly easier on packagers and enables us to have only three required compile-in dependencies in the figure in the paper (libint, blas/lapack, pybind11). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] `#ifdef`-ing the EFP code probably could have been done to varying degrees of thoroughness. But since EFP is tied into `P::e` _and_ Molecule _and_ it's own interface, none of which I wanted to rexamine, this is the one that requires a minimum of recompilation if you change `ENABLE_libefp` ON/OFF. When OFF, the EFP object still exists, but only the constructor, destructor, and nfragments method (that returns 0 fragments). This way the driver needs no mods (which is a good thing, since we can't `#ifdef` python).; - If you build w/o libefp and try an efp-containing molecule, throws a runtime error with text `EFP fragments detected but are not available`.; - [x] slight fix of passing `pybind11_DIR` to plugin cache. helps with mixed install/staged psi4/pybind11. we'll see how this goes, as I'm not sure it's the best fix.; - [x] more thoroughly test cmake variable for PCMSolver path (`if ""@ENABLE_PCMSolver@"".upper() in [""1"", ""ON"", ""YES"", ""TRUE"", ""Y""]`); - Hope this helps a bit on packaging, @susilehtola ; * **User-Facing for Release Notes**; - [x] Psi4 can be build without libefp add-on. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/623:1239,test,test,1239,https://psicode.org,https://github.com/psi4/psi4/pull/623,1,['test'],['test']
Testability,"## Description; Resolves #1404. This makes `dsd-blyp-d3(bj)` pull data from `dsd-blyp-d3bj`, as opposed to `dsd-blyp` + `dashparam[""d3bj""][""dsd-blyp""]`. Currently affected functionals are:. ```; created b97-0-d2 from b97-d2; created b97-0-d from b97-d2; created b97-d from b97-d2; created b97-0-d3bj from b97-d3bj; created b97-0-d3(bj) from b97-d3bj; created b97-d3(bj) from b97-d3bj; created b97-0-d3mbj from b97-d3mbj; created b97-0-d3m(bj) from b97-d3mbj; created b97-d3m(bj) from b97-d3mbj; created dsd-blyp-d from dsd-blyp-d2; created dsd-blyp-d3(bj) from dsd-blyp-d3bj; created dsdpbep86-d2 from dsd-pbep86-d2; created dsdpbep86-d from dsd-pbep86-d2; created dsd-pbep86-d from dsd-pbep86-d2; created dsdpbep86-d3bj from dsd-pbep86-d3bj; created dsdpbep86-d3(bj) from dsd-pbep86-d3bj; created dsd-pbep86-d3(bj) from dsd-pbep86-d3bj; created dsdpbep86-nl from dsd-pbep86-nl; created dsdpbepbe-d2 from dsd-pbepbe-d2; created dsdpbepbe-d from dsd-pbepbe-d2; created dsd-pbepbe-d from dsd-pbepbe-d2; created dsdpbepbe-d3bj from dsd-pbepbe-d3bj; created dsdpbepbe-d3(bj) from dsd-pbepbe-d3bj; created dsd-pbepbe-d3(bj) from dsd-pbepbe-d3bj; created dsdpbepbe-nl from dsd-pbepbe-nl; created dsd-pbeb95-d from dsd-pbeb95-d2; created dsd-pbeb95-d3(bj) from dsd-pbeb95-d3bj; ```. The `B97-0` and `B97-D2` mess will have to wait until #1403 is merged. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [X] When a functional has a defined dispersion version, aliases are copied from that, as opposed to the `dashparam` data. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1405:1617,test,tests,1617,https://psicode.org,https://github.com/psi4/psi4/pull/1405,2,['test'],['tests']
Testability,"## Description; Resolves #1593 . ## Todos; - [x] also added `""options_lo""` description. ## Checklist; - [ ] ~Tests added for any new features~; - [x] Docs (sphinxmini) build fine. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1643:109,Test,Tests,109,https://psicode.org,https://github.com/psi4/psi4/pull/1643,1,['Test'],['Tests']
Testability,## Description; Resolves #1694 by throwing an exception when active molecule has only 1 fragment.; Resolves #1675 by throwing an exception when requested atom is out of bounds.; Resolves #1613 by changing the lookup path for AUX/DECON bases from `libraryPath` to `basisPath`. ## Checklist; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1714:330,test,tests,330,https://psicode.org,https://github.com/psi4/psi4/pull/1714,2,['test'],['tests']
Testability,## Description; Resolves #1876. ## Checklist; - [x] Tests added for any new features into `dft-custom`; - [x] `ctest -L dft` and `ctest -R castup` both pass fine. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1880:52,Test,Tests,52,https://psicode.org,https://github.com/psi4/psi4/pull/1880,1,['Test'],['Tests']
Testability,## Description; Restore a `const` lost during the Vector refactor. Quick merge appreciated - needed to fix Forte. ## Checklist; - [x] Tests added for any new features. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2705:134,Test,Tests,134,https://psicode.org,https://github.com/psi4/psi4/pull/2705,1,['Test'],['Tests']
Testability,## Description; Rewrite of the CC wavefunction as per #1247 . ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1273:237,Test,Tests,237,https://psicode.org,https://github.com/psi4/psi4/pull/1273,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; SCF convergence has only been reported with the message ""Energy converged."" which is missing out on the more important part, i.e. the convergence of the wave function. For pedagogical reasons, this PR changes the printout so that also the wave function is mentioned in the message. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1468:473,Test,Tests,473,https://psicode.org,https://github.com/psi4/psi4/pull/1468,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; SCF: Add SCFConvergence Error such that the error will have the wavefunction as a member. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1130:126,Test,Tests,126,https://psicode.org,https://github.com/psi4/psi4/pull/1130,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; See #2608 for background. Fixes #2608. Recent emphasis has been on Cfour through QCEngine or QCDB, so the Psi4/Cfour test suite likely hasn't been checked since pre v1.4. Nevertheless, for things like cbs, Psi4/Cfour is still the right choice. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] switching away from `molecule = geometry()` in `interface_cfour.py` below isn't strictly necessary, but it helps with some import stuff in a future PR; - [x] The main thing that the distributed driver broke is that non-set basis sets get set as `(auto)`, so the interface needed to learn that was the same as unset. Also, there isn't the continuous storage of qcvars in `P::e`, so those need to be reloaded from ""wfn"".; - [x] interface used to allow gradients with ghost atoms. dropping that here, but I did implement it in qcdb and qcengine.; - [x] it looks like I hacked up the tests until they passed. broadly, this is true, but removed things are singles and same- and opposite-spin energies. harvesting all these values is tested far more extensively and carefully now over at qcdb than here, so I am not discomfited.; - [x] all psi4/cfour tests pass. ## Checklist; - ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2615:133,test,test,133,https://psicode.org,https://github.com/psi4/psi4/pull/2615,7,"['Test', 'test']","['Tests', 'test', 'tested', 'tests']"
Testability,## Description; See below. ## User API & Changelog headlines; - [x] `Matrix::set_block` can be used on matrices that are not totally symmetric. ## Dev notes & details; - [x] `Matrix::set_block` can be used on matrices that are not totally symmetric.; - [x] `Matrix::set_block` now raises an explicit error when the symmetry of the target and block matrices disagree. ## Checklist; - [x] New test working. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2734:391,test,test,391,https://psicode.org,https://github.com/psi4/psi4/pull/2734,1,['test'],['test']
Testability,## Description; See below. Sister PR to #2734. Needed before I can cleanup `ccresponse`. ## User API & Changelog headlines; - [x] `Matrix::get_block` can be used on matrices that are not totally symmetric. ## Dev notes & details; - [x] `Matrix::get_block` can be used on matrices that are not totally symmetric. ## Checklist; - [x] New test working. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2752:336,test,test,336,https://psicode.org,https://github.com/psi4/psi4/pull/2752,1,['test'],['test']
Testability,"## Description; Sets up Ruff to replace yapf & isort. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Should not affect end-users,; - [x] Will affect open PRs once `main` is re-formatted and ruff is enforced on the CI level, . ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] aligns code formatting convention to [Ruff](https://docs.astral.sh/ruff/formatter/), replacing yapf & isort,. ## Questions; - [ ] Should pre-commit run in the CI? It could run to let know PR might not be following the style, but the failure might not be blocking. It's something like a warning for a maintainer/PR issuer. ## Checklist; - [x] No new tests are required for that,; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3234:941,test,tests,941,https://psicode.org,https://github.com/psi4/psi4/pull/3234,3,['test'],['tests']
Testability,## Description; Several bug fixes and enhancements promised for 1.3. Primary goal for these changes is to localize the estimation of DF memory in a single location to prevent some odd errors. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Remove class method attribute for `Wavefunction.to_file`.; - [x] Reworks SCF `save_orbitals` to use canonical Wavefunction serialization.; - [x] `JK.name()` returns the name of the JK object.; - [x] `JK.memory_estimate()` attempts to estimate the amount of in-core memory required.; - [x] Reworks DFT cache size logic to account for Schwarz screening.; - [x] Removes SCF initialize JK from C++ for better initialization control; - [x] Attempts to close #1218. ## Questions; - [ ] Can we get better estimates on PK memory usage @jgonthier.; - [ ] Does IWL use virtually zero memory? @andysim . ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1446:602,log,logic,602,https://psicode.org,https://github.com/psi4/psi4/pull/1446,4,"['Test', 'log', 'test']","['Tests', 'logic', 'tests']"
Testability,"## Description; Since #582, presumably, all the skeleton plugins that we check out and build from template have actually been using the same, `basic`, template. The adding to ctest bit wasn't working either. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Now we have the compacted code of #582 _and_ the testing functionality of pre- #582 .; * **User-Facing for Release Notes**. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/624:372,test,testing,372,https://psicode.org,https://github.com/psi4/psi4/pull/624,1,['test'],['testing']
Testability,"## Description; Since we [say we're returning the dimer wfn](https://github.com/psi4/psi4/blob/master/psi4/driver/driver.py#L505-L507), let's return the dimer wfn for fisapt. currently returning a `psi4.core.FISAPT` object that does not inherit from Wfn. Hence no way to drive OEPROP on a sapt calc. ## Checklist; - [x] I checked that the dipole/quadrupole from running oeprop on this returned wfn matches a forced quadrupole in the early scf_helper; - [x] ran all the sapt tests. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1201:474,test,tests,474,https://psicode.org,https://github.com/psi4/psi4/pull/1201,1,['test'],['tests']
Testability,## Description; Slowly replacing `ERISieve` entirely... ## Checklist; - [x] Quick tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2659:82,test,tests,82,https://psicode.org,https://github.com/psi4/psi4/pull/2659,1,['test'],['tests']
Testability,"## Description; Small bug fix that prevents adding local options to a module. This error shows only for `string` and `int` type options, but I potentially also in `array` and `python` data types. This PR addresses all four cases. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix option reading bug. ## Questions; - In the following part of the code one can potentially encounter the same problem. This can be fixed by adding `module` to the list of parameters passed to this function. Any reason why there is no `std::string module` in the parameter list? Adding it would also make this function consistent with other `set_local_x` functions.; https://github.com/psi4/psi4/blob/396b4c51d6902301baeed41386c49ccb9099a30b/psi4/src/core.cc#L705-L707. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1412:854,test,tests,854,https://psicode.org,https://github.com/psi4/psi4/pull/1412,2,['test'],['tests']
Testability,"## Description; Small fix to Libint build generator. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [X] Moves `_build_shared_libs` and `_cmake_build_type` outside of if-else statement so they are defined for both cases for `BUILD_Libint2_GENERATOR`. ## Checklist; - [X] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [X] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3078:493,test,tests,493,https://psicode.org,https://github.com/psi4/psi4/pull/3078,2,['test'],['tests']
Testability,"## Description; Small improvements to the TDDFT solver. This one should be merged after #1885. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [X] Document; - [x] Handle computation of triplets properly; - [x] Implement transition moments and spectroscopic observables:; - [x] Electric dipole moment, length representation; - [x] Electric dipole moment, velocity representation; - [x] Magnetic dipole moment; - [x] Oscillator strengths, length representation; - [x] Oscillator strengths, velocity representation; - [x] Rotatory strengths, length representation; - [x] Rotatory strengths, velocity representation; - [x] Robustness fix: `states_per_irrep` sometimes fails with an obscure out-of-bounds error.; - [x] Usability fix: verbosity should be slightly higher, to let the user know stuff is being done (currently, only printout is at convergence); - [x] Implement functions to plot electronic absorption (EAS) and eletronic circular dichroism (ECD) spectra; - [x] Remove warning on potential inaccuracy of results.; - [X] Check convergence only against the norm of the residual (`r_tol`). The `e_tol` parameter has been completely removed. ## Follow-up; - The solver stalls when very tight convergence (`r_tol = 1e-8`) is requested. I am not quite sure if this is a fundamental issue with the algorithm. That convergence threshold is insanely tight, I am not even sure if this should be considered a real problem... ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [X] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814:1487,Test,Tests,1487,https://psicode.org,https://github.com/psi4/psi4/pull/1814,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; Small timer mistype in VV10 NL correlation. I patched this up and added a (faster) test to the quicktests suite so that we also check VV10 in CI. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/889:99,test,test,99,https://psicode.org,https://github.com/psi4/psi4/pull/889,1,['test'],['test']
Testability,## Description; Small tweak to SAPT(DFT) to help eliminate small ~30cal/mol wiggles in the PES. Tracked this down to issues in allowing the derivatives of very small densities leading to quite spurious results. This was changed to the same tolerance as the V derivative builds. Does change the result by ~1cal/mol for a test case- this is lost in the noise of DFT. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/840:320,test,test,320,https://psicode.org,https://github.com/psi4/psi4/pull/840,1,['test'],['test']
Testability,"## Description; So `psi4.clean_options()` is a mainstay of psiapi mode because it allows you to do two calculations after another both starting from a clean slate of options. Likewise, it is important for testing b/c we do one behind the scenes (in pytest) between each test so that your MP2 doesn't get PCM solvation, etc. For plugins, this has been broken since the `clean_options()` command was invented, in that as soon as you tried to set an option unique to the plugin (as opposed to one that another module in read_options.cc defined) _after_ a options cleanse, it would complain about an invalid option. This PR reloads the plugin options after a cleanse. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1032:205,test,testing,205,https://psicode.org,https://github.com/psi4/psi4/pull/1032,2,['test'],"['test', 'testing']"
Testability,"## Description; So in the course of working on DDD/pydantic, a fix I needed triggered the dreaded ""circular import"" error, which anyone who's tried to alter the driver's fragile import structure has probably seen, too. Being sick of this, I located https://medium.com/brexeng/avoiding-circular-imports-in-python-7c35ec8145ed with advice to do `from .driver import energy`, not `from psi4.driver.driver import energy`. So that's the first pass on the driver imports. This fixes my circular import problem and makes it easier to find others. Since all the imports are churned anyways, I set up `isort` (that is, you can run isort on the repo, not that it's enforced on the repo). This is a utility (https://pycqa.github.io/isort/index.html) that sorts all the imports at the top of the file into stdlib, third_party, and first_party blocks and then alphabetizes the imports within. It also effectively tests the fragility of the import structure by jumbling them all into alphabetical order. Attempts in past years to run isort led to circular imports and a retreat. This time I was able to fix the single one that came about. Third pass is that I ran `autoflake` on the driver to remove unused stdlib imports. It also removed some `pass` on empty fns that weren't needed because the docstring suffices for the syntax. ## User notes; - [x] the import structure has changed. you might need to add standard library imports to your input files if you use them (e.g., `import math` before `math.pi`) that previously were preloaded by psi4. ## Dev notes & details; - [x] switched import style to relative imports, ran isort, ran autoflake; - [x] actual material changes:; * stop importing `molutil` into `sapt_proc`. this is the main one that allows killing off the embarrassing `temp_circular_import_blocker` fn. https://github.com/psi4/psi4/compare/master...loriab:psi4:import_slayer?expand=1#diff-f3e93ffa6125dd1f79abad7630bbf259bb1daeee89e983d2889b68af6038875aL35; * delay loading fisapt_proc until runti",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3033:900,test,tests,900,https://psicode.org,https://github.com/psi4/psi4/pull/3033,1,['test'],['tests']
Testability,"## Description; So once upon a time, Psi4 ran ConfigMath to get its lapack/blas, then [tested for mkl](https://github.com/psi4/psi4private/blob/71ea2ea8ee142ee42541c589c42977fff2d3c381/CMakeLists.txt#L173-L174) to set `HAVE_MKL`. Then in the code proper, `#include mkl.h` (that defines `__INTEL_MKL__`) and the [very important `mkl_set_num_threads()`](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libparallel/process.cc#L91-L93) were guarded by `HAVE_MKL` ifdefs. Then, on the fateful 23 Jun 2016 (https://github.com/psi4/psi4/commit/e07d645ea7acc85ae90d8c60a30f3426c977fc26) in the course of CMR, ConfigMath was blown away and all the `HAVE_MKL`s were replaced by `__INTEL_MKL__`. But that's circular because the mkl.h inclusions, which define `__INTEL_MKL__` were guarded by `__INTEL_MKL__` ifdefs. So Psi4 hasn't been threading MKL (though OMP threading has still been present). Story continues in bullet below. Identification and debugging of this issue by @dgasmith and Matt Schieber. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] ~~This PR identifies which of MKL, OPENBLAS, etc. has been detected by ConfigMath.~~ Identify MKL-or-not by searching for ""mkl"" in the full lapack library list, whether detected math or passed-in math. Colors ""MKL LAPACK"" to screen if ""on"". If MKL, attaches the `USING_LAPACK_MKL` compiler definition to the `tgt::lapack` target that every module of Psi4 is linked with. Thus we're getting MKL threading again.; - [x] Adds min version tags for dkh, gdma, erd; - [x] Adjusts where the required check comes in for hdf5 so we don't get an warning; - [x] Add docs with examples of math detection; - [x] Remove unused routes in math detection: explicit, external, mkl_flag; - [x] ConfigMath now FATAL_ERRORs if math libs _not_ found; - [x] Newly pays attention to headers for math. Only required for MKL.; - [x] Add a threading testing script for general maintenance, see comment below. In g",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/615:87,test,tested,87,https://psicode.org,https://github.com/psi4/psi4/pull/615,1,['test'],['tested']
Testability,"## Description; Solve #1462 by creating both big-endian and little-endian quadrature data files, then installing the proper one via cmake. Will probably fail cross-compile, but I don't know of such cases. ## Checklist; - [ ] no big endian machine to test on. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1464:250,test,test,250,https://psicode.org,https://github.com/psi4/psi4/pull/1464,1,['test'],['test']
Testability,"## Description; Some C++ style fixes for files in the `ccenergy` folder. . ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Remove `return;` where useless; - [x] Remove unused `ioff_` array; - [x] Localize loop variables, use `auto`; - [x] Switch to `std::` data structures. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1269:344,Test,Tests,344,https://psicode.org,https://github.com/psi4/psi4/pull/1269,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; Some PCM related updates/fixes that were enabled after the move of SCF to Python. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Tests ROHF with PCM. Close #999 ; ~- [ ] Do gradients with PCM semi-numerically [à la ECP](https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/proc.py#L2095-L2132), see https://github.com/psi4/psi4/issues/402#issuecomment-386149151~ **Probably for 1.4**. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1327:196,Test,Tests,196,https://psicode.org,https://github.com/psi4/psi4/pull/1327,4,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; Some Psi4-side fixes to getting @bennybp's simint AddOn added. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Includes all commits of #533 ; - [x] Temporarily based off private repo https://github.com/loriab/simint branch config6 until the integration settles down, and we can return to tarballs. Note that if you want to test this branch, you may need to supply your GH credentials during the build to clone simint.; - [x] Adds all the pre-built detection, target referencing, docs, standardized variable names, tests that we expect from an addon to simint; - [x] Continued general documentation on addons.; - [x] Modestly tested- static and dynamic on Linux, dynamic on Mac; * **User-Facing for Release Notes**; - [x] New integral library available with `-DENABLE_simint`. ## Questions for @bennybp ; - [ ] There's some questions in external/upstream/simint/CMakeLists.txt; - [ ] I've made the simint on my acct private and just added you and some core developers who may want to test it. If you don't mind it being public, as a temp repo, that'd be a little easier.; - [ ] There are spots where I supply at most separate home, docs, and source links for addons. I've got your website, http://www.bennyp.org/research/simint/, for all three at the moment, so let me know if there are more specifics.; - [ ] I filled in the installing and configuring sections of simint.rst according to the template. Other addons (http://psicode.org/psi4manual/master/interfacing.html) often have middle sections about interacting with the code. Fill in anything you like.; - [ ] Got the following unexpected failing test cases on Linux and partially confirmed on Mac, all segfaulted. Could you take a look? None are in quicktests.; ```; The following tests FAILED:; 	 16 - cbs-xtpl-wrapper (Failed); 	144 - dft-b2plyp (Failed); 	269 - pywrap-checkrun-rhf (Failed); 	270 - pywrap-checkrun-rohf (Failed); 	271 - pywrap-checkrun-uhf (F",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/625:406,test,test,406,https://psicode.org,https://github.com/psi4/psi4/pull/625,3,['test'],"['test', 'tested', 'tests']"
Testability,## Description; Some bugs were exterminated in `find()` and `fexch()`. ; Additional unit tests were added. ; Thanks to @bwb314 for creating extensive unit tests which check all fsapt terms. ## Status; - [ ] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/879:89,test,tests,89,https://psicode.org,https://github.com/psi4/psi4/pull/879,2,['test'],['tests']
Testability,## Description; Some changes to make Forte and Psi compatible with each other again. Heavily coordinated with Lori. Also gets rid of an unused function that was raising a compile-time warning. ## Checklist; - [x] Psi tests pass; - [x] Forte tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2595:217,test,tests,217,https://psicode.org,https://github.com/psi4/psi4/pull/2595,2,['test'],['tests']
Testability,## Description; Some code triplication may be eliminated. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [X] Yay for negative LOC. ## Checklist; - [X] No new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2464:264,test,tests,264,https://psicode.org,https://github.com/psi4/psi4/pull/2464,2,['test'],['tests']
Testability,"## Description; Some functions in the `Vector` and `Matrix` have been ""freed"". Separated from #1443, as requested. ## Todos; - [x] `doublet`, `triplet`, `create`, `horzcat`, `vertcat` and the blocked matrix ""new"" and ""delete"" are now free functions, rather than static methods in `Matrix`; - [x] `create` for `Vector` also a free function now.; - [x] Removal of various unused functions in `Vector`; - [x] Remove the `defines.h` header in DCFT folder. File numbers are in `psifiles.h`. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1447:506,Test,Tests,506,https://psicode.org,https://github.com/psi4/psi4/pull/1447,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; Some info about module-level provenance of a Wfn would be handy. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] add `Wavefunction.module_` member data and export; - [x] add setting to most modules (not psimrcc or fockci); - [x] incorporate into stdsuite testing. ## Questions; - [x] @dgasmith I've given mcscf its own name. prefer ""detci""?; - [x] @maxscheurer I edited a couple error messages to ADCC from ADC. ok?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1935:321,test,testing,321,https://psicode.org,https://github.com/psi4/psi4/pull/1935,4,"['Test', 'test']","['Tests', 'testing', 'tests']"
Testability,## Description; Some minor fixes cherry-picked from #1061 . ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1267:80,Test,Tests,80,https://psicode.org,https://github.com/psi4/psi4/pull/1267,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; Some miscellaneous code cleanup from my first attempt at fixing #2560. There will be a follow-up PR that renames many variables in this code before I can resume the attempt. Note that although I create Same-Spin and Opposite-Spin matrices, those are currently unused, but will be needed for the #2560 fix. Quick review appreciated, so I can continue the `fnocc` push. Obligatory @edeprince3 ping. ## Todos; - [x] Code cleanup; - [x] Introduced framework for modernizing pair energies in `fnocc`. ## Checklist; - [x] `fnocc` tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2561:540,test,tests,540,https://psicode.org,https://github.com/psi4/psi4/pull/2561,1,['test'],['tests']
Testability,"## Description; Start rearranging CBS for DDD. This is No. 4 of the DDD series, #1351. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] DON'T LOOK AT THE FIRST COMMIT -- it's just moving code around. the second commit is a nice diff to review; - [x] add typing and consolidate the docstring improvements between master and ddd for the cbs xtpl fns; - [x] switch the array xtpl computation from core.Matrix to np.ndarray. here, the data enters and leaves as Matrix, but in ddd, it'll be pure ndarray; - [x] modernize and improve printing in xtpl fns. ## BugFix; - [x] @PeterKraus, you're confident on this bug https://github.com/psi4/psi4/pull/1351/files#r441933046 ? I've fixed it here and altered the reference values in the alpha test without investigating the correction. Applies to Karton 2-point SCF extrapolation. ## Checklist; - [x] ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2526:790,test,test,790,https://psicode.org,https://github.com/psi4/psi4/pull/2526,4,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,"## Description; Stops overwriting DFT energy by D3 energy only. I am not sure how to test for this, as the gradients as well as geometries with and without the patch agree to 8 DP's. I only noticed it when using the `vibrational_analysis(wfn)`, as there the current total energy plays a role... ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Resolves #1356. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1470:85,test,test,85,https://psicode.org,https://github.com/psi4/psi4/pull/1470,4,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,"## Description; Substitute some int by size_t, and introduces (size_t) casts wherever multiplication of integers seemed problematic. ## Todos; * **Developer Interest**; - [x] Integer declarations in all .h files in libsapt_solver have been examined and the ones that could potentially generate overflows were converted to size_t. Probably some overkill there.; - [x] Searched the whole source in libsapt_solver for a regex representing 4 variables being multiplied, to find all the occ*vir*occ*vir that are bound to overflow. Added (size_t) cast for those that were missing it. ## Questions; - [ ] This originated in a problem reported by a user on the forum. I can't run Psi4 on good enough hardware to actually test the patch on a large system. Anyone want to give it a try ? Or do we let the user test it ?. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/619:713,test,test,713,https://psicode.org,https://github.com/psi4/psi4/pull/619,2,['test'],['test']
Testability,"## Description; Suceeds #1381 as a step toward #883 by improving qcvar capabilities on Wfn and localizing some modules. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] improves the wfn localization of qcvars for DFT, scf_helper, DFMP2, OEPROP. trying to set on wfn c-side, then just copy into P::e.globals in proc.py.; - [x] moves DETCI, DFMP2 entirely to qcvar passing on Wfn. OCC, DFOCC, FNOCC do so for mp2-like only.; - [x] adds some functional-including qcvars for DFT; - [x] BREAKS; - remove `SCS-MP2 OPPOSITE-SPIN CORRELATION ENERGY` and `SCS-MP2 SAME-SPIN CORRELATION ENERGY` from dfmp2 `Wavefunction.variables`; - remove MP2 psivars from double-hybrid DFT final return; - `SCS-MP2 * ENERGY` now are defined (6/5, 1/3) quantities. For the user-influenceable vars, it's `CUSTOM SCS-MP2 * ENERGY`. ## Notes; - reference E for detci https://github.com/psi4/psi4/pull/1381#discussion_r237680985. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1445:970,Test,Tests,970,https://psicode.org,https://github.com/psi4/psi4/pull/1445,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; Switches times in CC modules from `tstart`/`tstop` to `timer_on`/`timer_off`. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Use `timer_on`/`timer_off` in CC modules; - [x] Remove `void` from argument lists . ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1268:296,Test,Tests,296,https://psicode.org,https://github.com/psi4/psi4/pull/1268,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; Switches to use `_a` rather than more verbose `py::arg`. Separated from #1443, as requested. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Use `_a` literal.; - [x] Formatting pass at bindings. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1448:281,Test,Tests,281,https://psicode.org,https://github.com/psi4/psi4/pull/1448,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; TDSCF/ADC and EOM can't agree on how to name variables for excitation energies. Per discussion between Lori and I, this moves the TDSCF variable names to the new standard, as I see it. This PR is not complete and is submitted for feedback from the excited-state gurus, who are likely to have strong opinions: @loriab @robertodr @lothian @maxscheurer . To demonstrate the changes, consider the example file I added. Old code would write the second transition as ""TD-HF ROOT 0 -> ROOT 2 EXCITATION ENERGY - B2 SYMMETRY"". The new code replaces that with three new psivars:. - TD-HF ROOT 0 (B1) -> ROOT 0 (B2) EXCITATION ENERGY; - TD-HF ROOT 0 -> ROOT 2 EXCITATION ENERGY; - TD-HF ROOT 0 -> ROOT 2 EXCITATION ENERGY - A2 SYMMETRY. We have one access call that requires the symmetries of initial and target states and the indices of both _within their irreps_. We have one access call that requires no symmetry information and just requires the index of the states _among all irreps_. The last access call is like the second, but adds on the symmetry of the _transition_. **This is a breaking change** because old code instead used the symmetry of the final state. After coding this all up, I'm inclined to remove the last access call. The original reason for keeping it up was consistency with the current way TDSCF operates, but it's still inconsistent, per the last paragraph. I'll add docs once we're settled about the new naming conventions. Once this PR is in, the other modules will need to update to the new style. ## Questions; - [x] Opinions on the new variable names?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2462:1611,Test,Tests,1611,https://psicode.org,https://github.com/psi4/psi4/pull/2462,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; Test case cc46 was removed after it was noticed to be failing (#1002 ), it was determined that the failure was not indicating a bug, so it was temporarily removed so pre-release pakages wouldn't be reporting a failure. This PR reactivates the test with modifications so that it is passing again. . * **Developer Interest**; - cc46 checks GS and excited state Dipole/Quadrupole components against reference values generated by psi. ; - Was failing because calling `properties=['oscillator_strength']` prior to #995 was the only way to force ccdensity to make a call to OEProp for each excited state. Post #995 this does not compute one electron properties for excited states so the computed values were all zero.; - Correcting the driver call `properties=['dipole','quadrupole']` is not enough; - The test values were generated using `oscillator_strength` which triggers EOM/Lambda convergence thresholds to be reduced.; - The computed values are 'too good' and comparison with the older reference values fails in the 4th decimal place for some quadrupole components of excited states.; - *Final Solution*; - I dropped the convergence thresholds manually in the test-input to what the were set to by the driver at the time that the reference data was generated. . Side Note:; - Personally I don't think the savings achieved by this over ride of the convergence thresholds are significant enough to justify potentially confusing situations. ; - If a user sets those values manually and requested `oscilator_strength` and/or `rotational_strength` the user-set values are overridden.; - Commenting out the [relevant lines](https://github.com/psi4/psi4/blob/72c30b536201a25171fa6426c8f319e2abdbb1cb/psi4/driver/procrouting/proc.py#L2647-L2649) all cc tests still pass. Including this one (with my changes). ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for rev",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1070:16,Test,Test,16,https://psicode.org,https://github.com/psi4/psi4/pull/1070,3,"['Test', 'test']","['Test', 'test']"
Testability,"## Description; Thanks to @JonathonMisiewicz for catching this one!. This PR fixes a typo in `SplitJK::set_lr_symmetric`, wherein the `lr_symmetric_` variable is assigned to itself rather than the intended behavior of being assigned to the function input. This also opens up the question of why this wasn't caught in testing, which I plan on exploring further and addressing in a second PR. Currently, composite methods where `LinK` is used, throw exceptions for cases where `lr_symmetric_` is set to false; but composite methods using `COSX` does not. ## User API & Changelog headlines; N/A. ## Dev notes & details; - [X] `SplitJK::set_lr_symmetric` now behaves as intended. ## Questions; N/A. ## Checklist; - [X] Tests added for any new features; - [X] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [X] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3055:317,test,testing,317,https://psicode.org,https://github.com/psi4/psi4/pull/3055,4,"['Test', 'test']","['Tests', 'testing', 'tests']"
Testability,"## Description; The Cholesky is now based on the Gershgorin theorem, which I describe in a note in the PRA article. The routines' accuracy has been benchmarked in the arXiv paper. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1842:148,benchmark,benchmarked,148,https://psicode.org,https://github.com/psi4/psi4/pull/1842,4,"['Test', 'benchmark', 'test']","['Tests', 'benchmarked', 'tests']"
Testability,"## Description; The DFMP2 gradient was not symmetrized to the molecule's (Abelian) point group before, so optimizations could potentially break symmetry, as pointed out [on the forums](http://forum.psicode.org/t/losing-symmetry-on-first-step-of-geometry-optimization/1201). This PR enforces the Abelian symmetry, preventing problems with symmetry breaking in optimizations. ## Todos; - [x] Fixes a bug in DFMP2 gradients that led to slight noise in which, in some cases, could break the symmetry of the molecule. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1483:567,test,tests,567,https://psicode.org,https://github.com/psi4/psi4/pull/1483,2,['test'],['tests']
Testability,"## Description; The Hessian code can be cleaned up by using the SCF class's hessian-vector products. To avoid the need to cast pointers inside the orbital response code, this PR specializes the response class for each reference type, and removes some junk symmetry code. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Specialize response code by reference; - [x] Simplify dipole derivative handling; - [x] Remove symmetry code from response; - [x] Use the `Hx` functions from the SCF class to solve CPHF. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1550:576,Test,Tests,576,https://psicode.org,https://github.com/psi4/psi4/pull/1550,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; The Molden format allows one to store data in high precision, which is beneficial for post-processing. This PR increases the number of digits and the format of the relevant numbers to double precision. Fixes #1486. See also #1485 . I've tested with the following example:. ```; molecule {; 0 1; O 1.01646 0.05097 0.09714; H 1.98435 0.06069 0.05173; H 0.73761 0.24513 -0.81034; }. set basis cc-pVTZ. E, wfn = properties('ccsd', properties=['dipole'], return_wfn=True); Da_so = wfn.Da(); SCa = core.doublet(wfn.S(), wfn.Ca(), False, False); Da_mo = core.triplet(SCa, Da_so, SCa, True, False, False); molden(wfn, 'psi4.molden', density_a=Da_mo); ```. The Molden files before and after the change are attached: [psi4.molden.zip](https://github.com/psi4/psi4/files/2817866/psi4.molden.zip). Relevant part of the output of the Molden program when reading the molden file prior to the change. Note the wrong total charge:. ```; Mulliken Charges; ================; ; O -0.4661; H 0.2332; H 0.2332; ; Sum of Mulliken Charges: 0.0003; ```. Same output, but after increasing the precision: (Note the correct total charge.). ```; Mulliken Charges; ================; ; O -0.4663; H 0.2331; H 0.2331; ; Sum of Mulliken Charges: 0.0000; ```. (FYI: this is my last Molden-related PR.). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Write out orbital energies, orbital occupation numbers and molecular orbital coefficients in double precision in a Molden file. ## Questions; None. ## Checklist; - No tests added; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1510:253,test,tested,253,https://psicode.org,https://github.com/psi4/psi4/pull/1510,4,['test'],"['tested', 'tests']"
Testability,"## Description; The QCSchema wrapper was lacking the capability to save the t-amplitudes and the one-electron density matrix, so this was added. ## Todos; This will add the ability to save the t-amplitudes using the new ""tamps"" driver. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2328:256,Test,Tests,256,https://psicode.org,https://github.com/psi4/psi4/pull/2328,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; The SAD fractional density matrix didn't actually use fractional densities. This is fixed in the present PR. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] SAD density matrix is fractionally occupied. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1451:319,Test,Tests,319,https://psicode.org,https://github.com/psi4/psi4/pull/1451,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; The SAD guess is rescaling the guess density at present. This should not be done; the SAD guess is independent of the actual charge and/or spin state of the molecule. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] SAD guess is independent of charge and spin state of molecule. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1479:395,Test,Tests,395,https://psicode.org,https://github.com/psi4/psi4/pull/1479,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; The UHF version of #2171. The open-shell DCT code now adds two terms before contracting them against the two-electron integrals, rather than after. Unfortunately, this change was tightly coupled to surrounding code, making it unnecessarily complicated. This PR also removes that complexity. Again, I'd expect this code to be faster due to reduced random access in `process_so_integrals`, but I haven't run timings. ## Todos; - [x] More transparent code; - [x] 100 less lines code; - [x] Four fewer global variables . ## Checklist; - [x] DCT tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2185:557,test,tests,557,https://psicode.org,https://github.com/psi4/psi4/pull/2185,1,['test'],['tests']
Testability,"## Description; The `LaplaceDenominator` class is exported to the Python layer, but not `TLaplaceDenominator`. I have a Psi4Numpy version of a new (T) method I invented that won't work without this. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Export `TLaplaceDenominator` to Python. ## Questions; - [x] None. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2664:392,Test,Tests,392,https://psicode.org,https://github.com/psi4/psi4/pull/2664,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; The `large-atoms` test was previously sitting around unused, waiting for improved ECPs (see discussion in #2234). This PR renovates that test, checking SCF and DF-MP2 energies and gradients on period 5/6 atoms. . ~~TODO (future PR): after MP2 ECP gradients are validated+enabled, should be added to this test~~ 01/25 update: DF-MP2 gradients now enabled and tested. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Add `test_large_atoms` pytest; - [x] Enable DF-MP2 gradients . ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2836:34,test,test,34,https://psicode.org,https://github.com/psi4/psi4/pull/2836,4,['test'],"['test', 'tested']"
Testability,"## Description; The aim of the PR is to implement the parameter-free radial quadrature by Krack and Koster. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] ; - [ ] . ## Questions; - [ ] The cubature code is unintelligible, and needs to be restructured for clarity. See #2044 . ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2045:356,Test,Tests,356,https://psicode.org,https://github.com/psi4/psi4/pull/2045,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; The arXiv manuscript detailing the finite-element calculations for the SAP potenials has been published; this PR updates the documentation with the final reference. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1797:356,Test,Tests,356,https://psicode.org,https://github.com/psi4/psi4/pull/1797,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; The default `MAX_AM_ERI` isn't high enough to perform this test. Add it only when it is configured high enough. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1409:75,test,test,75,https://psicode.org,https://github.com/psi4/psi4/pull/1409,1,['test'],['test']
Testability,"## Description; The fcidump.py file writes out 2e integrals by calling fcidump_helper.cc, in the `%28.20E%4d%4d%4d%4d` (cpp) format, and in fcidump.py the additional 1- and 0- electron integrals are written in the `{:29.20E} {:4d} {:4d} {:4d} {:4d}` (Python) format. The whitespace in between the Python format string causes the 1/0e integrals fields to be 1 wider than the 2e integrals, causing problems in reading the file. E.g. in Fortran the 2e integrals can be read normally by `READ(*,'(1X,G28.20E2,4I4)') Z,I,J,K,L`, but will fail to read the 1/0e integrals properly. ## Todos; - [x] Update fcidump.py; - [x] Update fcidump test outputs . ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2277:631,test,test,631,https://psicode.org,https://github.com/psi4/psi4/pull/2277,4,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,"## Description; The final removal of the `ERISieve` class, and the culmination of the work in PRs https://github.com/psi4/psi4/pull/2935 and https://github.com/psi4/psi4/pull/2974. This fully, and completely, gets rid of `ERISieve` from Psi4, with `TwoBodyAOInt` now being the class of choice for ERI computations. Note: Now that v1.9 has released officially with ERISieve throwing an UpgradeHelper exception, I am opening this up for review. ## User API & Changelog headlines; - [X] The ERISieve class has been completely removed from Psi4. For previous ERISieve functionalities, the TwoBodyAOInt class should be used instead. ## Dev notes & details; - [X] Gets rid of all occurrences of the `ERISieve` class in Psi4, from build files to UpgradeHelper Python functions to C++ implementation details.; - [X] Slight update of integrals documentation with a better description of what is occurring. ## Questions; N/A. ## Checklist; - [X] Tests added for any new features; - [X] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [X] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3009:936,Test,Tests,936,https://psicode.org,https://github.com/psi4/psi4/pull/3009,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; The first eight DDD extracts PRs reduced the delta from; 99 changed files, and 5,314 additions and 2,946 deletions. c. dgasmith:recursive to; 59 changed files, and 3,408 additions and 1,885 deletions. c. loriab:recursive62; so here's No. 9 of the DDD series, #1351. ## Todos; - [x] This is the non-class parts of changes to finite difference. Mostly; * using pieces from Mol, rather than mol, to reduce dependence on psi objects; * use more numpy, less Matrix; * consolidate printing so can go to logging; * start to pass finite difference options (points, steps, projection) as kwargs rather than having findif consult global options; - [x] added in the dipder from dipole but it's not used; - closes #1683; - [x] along the way, psimrcc-fd-freq1 failed. as far as I can judge now, this is an existing bug. part of the old output is below. psi is evaulating the gradient, finding it over the cutoff, and so recommending not projecting rotations. then, because of https://github.com/psi4/psi4/blob/master/psi4/driver/driver.py#L1613, that setting of FD_PROJECT gets tossed, and findif runs projecting rotations, and the test passes. I'm calling this a bug and setting fd_project in the input to force the array dimensions to match and the test to pass. glad to hear other interpretations. ```. Based on options and gradient (rms=3.60E-02), recommend projecting translations and not projecting rotations.; hessian() will perform frequency computation by finite difference of analytic energies. ----------------------------------------------------------; FINDIF; R. A. King and Jonathon Misiewicz; ---------------------------------------------------------. Using finite-differences of gradients to determine vibrational frequencies and; normal modes. Resulting frequencies are only valid at stationary points.; Generating geometries for use with 5-point formula.; Displacement size will be 1.00e-02.; Number of atoms is 2.; Number of irreps is 8.; Number of SALCs is 1.; Translations proj",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2552:513,log,logging,513,https://psicode.org,https://github.com/psi4/psi4/pull/2552,1,['log'],['logging']
Testability,"## Description; The first iteration energy in SAD is at best non-variational (RHF, UHF), and at worst completely nonsensical (ROHF, CUHF). As neither a DIIS error can be formed in the lack of a proper density matrix, this PR sets the first iteration energy to zero, so that only sensical energies are printed out. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Guess energy correctly evaluated in ROHF and CUHF; - [x] Guess energy properly labeled. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1493:551,Test,Tests,551,https://psicode.org,https://github.com/psi4/psi4/pull/1493,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; The formatted checkpoint files currently produced by Psi4 misname the orbital coefficient and the density matrix fields. This PR (re)establishes the expected behavior, as well as fixes other bugs in the code. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix labels of MO energies and coefficients; - [x] Fix labels of density matrices; - [x] Fix printout of number of linearly independent functions; - [x] Don't print the MO coefficients into the log file; - [x] Only print out beta orbs and spin density if wave function is not spin-restricted.; - [ ] Identify if density is correlated; if it is, print out both SCF and correlated density. Otherwise only print out SCF density. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1475:516,log,log,516,https://psicode.org,https://github.com/psi4/psi4/pull/1475,4,"['Test', 'log', 'test']","['Tests', 'log', 'tests']"
Testability,"## Description; The general idea is to allow more flexible definition of CBS functions, and clean up the `cbs()` function a little. The goal is to allow further corrections to the energy into CBS, eg differences of basis sets (eg. `\Delta E_{diff} = E(aug-cc-pvtz) - E(cc-pvtz)`) or frozen core corrections (`\Delta E_{ae} = E(freeze_core True) - E(freeze_core False)` or DKH ... Added `frequency` to cbs-compatible calls. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Simple, dict-based interface to CBS.; - [x] Handling of an arbitrary number of correction functions.; - [x] Support for passing of arbitrary options (such as `freeze_core`). ; - [x] Fix `pywrap-cbs1` which fails on `cbs_number` checks.; - [x] Documentation.; - [x] Frequency calculations via cbs are now possible. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1235:855,Test,Tests,855,https://psicode.org,https://github.com/psi4/psi4/pull/1235,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; The goal of this PR is to expand test coverage of the DFJCOSK and DFJLinK JK subclasses within Psi4 by including their testing within the scf5 test. The scf5 test in Psi4 tests a variety of combinations of SCF_TYPE and SCF reference for singlet and triplet O2. As it were, the COSX and LinK SCF_TYPES were missing from the list of methods analyzed within this test. This PR simply adds COSX and LinK to the list of methods tested in scf5, expanding testing of these two methods beyond what was previously present. NOTE TO REVIEWERS: This PR is a general JK maintenance/cleanup/improvement PR and is independent of the developments occurring regarding CompositeJK and its direct implementation into Psi4. . ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] N/A. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Adds COSX and LINK to the list of SCF_TYPEs tested in the scf5 test option. ## Questions; - [ ] Is the methodology by which COSX and LinK tested acceptable? Unfortunately, the reference energies used in scf5 are either canonical (i.e., non-DF) or DF, neither of which fully describe the COSX and LINK methods. The approach I took is to compare each COSX and LINK energy to the corresponding canonical energy with an atol of 1E-4. Any feedback on this particular approach to testing COSX and LINK would be appreciated. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2768:49,test,test,49,https://psicode.org,https://github.com/psi4/psi4/pull/2768,15,"['Test', 'test']","['Tests', 'test', 'tested', 'testing', 'tests']"
Testability,"## Description; The goal of this PR is to save one-electron integrals in core and cache them. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] One-electron integrals are no longer stored on disk. The `Wavefunction` base class holds a pointer to a `MintsHelper` object.; - [x] T, V, and S integrals are cached.; - [x] Address issue #1758 (no effect of perturbation on X2C energy); - [x] Fixes issue #1794; - [x] May fix issue #1791. ## For developers; - [x] Added a `MintsHelper` object to `Wavefunction`. ## Checklist; - [x] Tests added for X2C finite field contributions; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests) except for eight test cases that are linked to #1793. ## Status; - [x] Working code; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1770:574,Test,Tests,574,https://psicode.org,https://github.com/psi4/psi4/pull/1770,4,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,"## Description; The idea is to try to extend Psi4 to the calculation of repulsive potentials. Unfortunately, some of Psi4's machinery is preventing such calculations to be run due to chemists' short-sightedness ;). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Change cutoffs so that close-lying atoms are accepted by the program (the cutoffs / disabling them should be an input parameter); - [ ] Fix problem with the code putting atoms on top of each other. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1843:562,Test,Tests,562,https://psicode.org,https://github.com/psi4/psi4/pull/1843,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; The instructions in the docstring did not result in a correct Molden file. Fixes #1485. No new features added. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix docstring. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1500:291,Test,Tests,291,https://psicode.org,https://github.com/psi4/psi4/pull/1500,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; The main script (`run_psi4.py` in the source tree or `psi4` when installed) was importing qcelemental before it had a chance to modify the Python search path. If you didn't already have a copy of qcelemental in your Python search path would cause an error. Encountered this on our cluster while trying to run the tests. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1925:329,test,tests,329,https://psicode.org,https://github.com/psi4/psi4/pull/1925,1,['test'],['tests']
Testability,"## Description; The main things to get over our docs troubles happened elsewhere:; * hosting the built `html/` through GH pages avoids the `/` anchors that netlify was dropping into our href links that were in turn confusing the psicode.org redirects (https://github.com/psi4/psicode-hugo-website/blob/master/netlify.toml#L14) and making links seem broken for psicode.org/psi4manual .; * the combination of progressing Sphinx development and stagnant cloud theme development (from which the sphinx_psi_theme is derived) eventually robbed us of the ""search"" bar and the homing logo. That got minimally revived through https://github.com/psi4/sphinx-psi-theme/commit/feda2119994519c6dc1eb0979686c9cdbf916acc , so use the v1.1 now. But there's a few modest improvements here, especially to allow anyone so inspired to switch the docs theme and figure out new customizations. Apart from a certain fondness for the colors and an insistence that tables like https://psicode.org/psi4manual/master/introduction.html#id59 not be mangled, I'd be pleased if anyone wanted to overhaul the docs theme. Some things to know:; * psi4 colors and specializations are https://github.com/psi4/sphinx-psi-theme/blob/master/sphinx_psi_theme/themes/sphinx_psi_theme/theme.conf#L37; * to use a different theme, pass `-DSPHINX_THEME=another_theme` to cmake (or edit it in the cache); * build with `cmake --build . --target sphinxman`; * built docs will be in `<objdir>/doc/sphinxman/html/`. that html dir can be tarred and sent anywhere to load in a browser. ## Dev notes & details; - [x] the two sphinx extensions that were in the sphinx_psi_theme are now stored here in the repo. this lets them be used by any theme, which is important for the QCVariables one that otherwise emits thousands of warnings.; - [x] more logic around `@SPHINX_THEME@` in the controlling docs/sphinxman/source/conf.py.in so that one can use options and configuration particular to different themes. feel free to add more. tried themes are psi, clo",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3053:576,log,logo,576,https://psicode.org,https://github.com/psi4/psi4/pull/3053,1,['log'],['logo']
Testability,## Description; The mandatory option setting the `DFT_WEIGHT_TOLRANCE` was missing. ## Checklist. - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1662:138,test,tests,138,https://psicode.org,https://github.com/psi4/psi4/pull/1662,2,['test'],['tests']
Testability,## Description; The mapping from psi4's string-based DFT functional representation to the BrianQC GPU module's macro-based one was flawed; this was corrected. This pull request only touches BrianQC addon-specific code paths. ## Checklist; - [x] The BrianQC-specific tests were run and they passed (ctest -L brianqc). ## Status; - [x] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2357:266,test,tests,266,https://psicode.org,https://github.com/psi4/psi4/pull/2357,1,['test'],['tests']
Testability,"## Description; The most important part of this PR is the changes to `occ/mograd.cc`. The previous formula for the RMS MO gradient was incorrect, causing it to be too large by a factor of `sqrt(occ*vir)`. Even for systems in the test suite, this can be as large as a factor of 10. **As a result, under this PR, orbital-optimized `occ` computations will take more iterations; it was not actually achieving the accuracy it claimed previously.** We may loosen the default convergence criteria as a result of this, but exploring that is deferred to the standard suite pass in #1980. Also included in this PR is commenting and removing some unused (not even compiled!) `dfocc` code found while investigating issues tangential to #1980. Obligatory @loriab ping for #1980. Obligatory @ssh2 ping for OMP convergence changes. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix the RMS orbital residual calculation in `occ`; - [x] Remove 1100+ lines of dead code from `dfocc`. ## Checklist; - [x] `ctest -R ""^omp|^olccd""` and `pytest -k test_olccd` pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1988:229,test,test,229,https://psicode.org,https://github.com/psi4/psi4/pull/1988,1,['test'],['test']
Testability,"## Description; The next batch of readability fixes to `dfhelper.cc`. The potentially contentious issue here is that I remove the `AO_files_` variable, which was just an identity mapping. Plenty more cleanup to go!. ## Checklist; - [x] Quick tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2654:242,test,tests,242,https://psicode.org,https://github.com/psi4/psi4/pull/2654,1,['test'],['tests']
Testability,"## Description; The next bite-sized DCT cleanup PR. To construct an intermediate `Fa_` and `Fb_`, previously, we'd divide the term in three parts, compute the three contributions separately, and then add them together. Making things more complicated, we add the pieces in different functions. In the RHF case, this PR combines two of those terms from the outset, so there are only two contributions to add. As a result, we now construct fewer `double*`, use fewer class variables, and have less cause to worry about whether the intermediates `Fa_` and `Fb_` are completely or incompletely constructed. While I haven't run timings, this code should also be faster due to reduced random-access of arrays. The UHF code is more complicated, so that's best saved for another PR. At that point, I hope to eliminate a few more class variables. ## Todos; - [x] More code cleanup. ## Checklist; - [x] DCT tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2171:896,test,tests,896,https://psicode.org,https://github.com/psi4/psi4/pull/2171,1,['test'],['tests']
Testability,"## Description; The number of electrons as integrated on the DFT quadrature is printed as ""Post-Iterations"" quantity. Current formatting:; ```; Energy and wave function converged. ==> Post-Iterations <==. electrons on quadrature grid:; NTotal = 2.0000000000 ; deviation = -7.638e-14. Orbital Energies [Eh]; ---------------------. --; electrons on quadrature grid:; Nalpha = 5.9997499893 ; deviation = -2.500e-04; Nbeta = 4.9997504300 ; deviation = -2.496e-04; NTotal = 10.9995004192 ; deviation = -4.996e-04. @Spin Contamination Metric: 2.559910084E-05; ```. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] NTotal/Nalpha/Nbeta electrons are printed as obtained from the grid as a health check; - [x] adds `psivars`: `GRID ELECTRONS TOTAL/ALPHA/BETA`. ## Questions; - [ ] Open to suggestions and opinions for naming and formatting. Especially regarding printing of decimals. ## Checklist; - [x] psivars doc string; - [ ] Tests?. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2001:970,Test,Tests,970,https://psicode.org,https://github.com/psi4/psi4/pull/2001,1,['Test'],['Tests']
Testability,"## Description; The old instability following procedure Trotterized a matrix exponential. Now we compute it (more or less) exactly. Obligatory @susilehtola ping. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Modified the orbital instability following procedure. This should be a minor change for most applications: contact developers if you notice a problem. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Change the algorithm we use to approximate a matrix exponential when instability following from a Trotter approximation to that of the build-in `expm` function.; - [x] Added documentation for the rationale for the orbital rotation step. ## Questions; - [ ] **Warning!** None of our tests cover instability following. I've run a check that the old and new codes mostly agree for the particular instability I'm trying to track. Is this an issue?. ## Status; - [x] Ready for review; - [ ] Ready for merge after discussion",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2758:1008,test,tests,1008,https://psicode.org,https://github.com/psi4/psi4/pull/2758,1,['test'],['tests']
Testability,"## Description; The paper describing the finite element calculations for the SAP potentials used in Psi4 is now in preprint, so it's a good time to switch to fully converged potentials. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1700:361,Test,Tests,361,https://psicode.org,https://github.com/psi4/psi4/pull/1700,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; The primary purpose of this PR is to correct some errors in density-fitted DCT. In brief, none of the nuclear gradient, orbital residual, or amplitude residual could be derived by differentiating the density-fitted DCT energy functional. All deviations were in different ways. This PR changes the energy functional to have a simpler density-fitted energy functional and correct all of its derivatives (orbital, amplitude, and nuclear geometry). _Unfortunately_, this is a gargantuan PR, and I owe all reviewers some beer. Simplifying some code requires adding new code that best belonged in other modules, there was a lot of new technology needed to get DCT in working order, DCT needed to be hooked up to properties in order to get tests properly working, and I did a lot of code reorganizing to make finding bugs a touch easier for me. ## Todos; - [x] DF-DCT energies, properties, density matrices, and gradients are all now correct; - [x] DCT supports one-electron properties for methods that support gradients; - [x] Adds a new libmints SaveType: ThreeIndexLowerTriangle.; - [x] Adds utility functions to `libdpd` and `libmints` with slightly different arguments/return types.; - [x] Eliminates many unneeded pointers from `dct`.; - [x] clang format DCT; - [x] DCT variables are now written to the wavefunction rather than globals; - [x] Eliminated the special procedure to get a DCT Molden file.; - [ ] There's still some cleanup to do, but it can be a new PR. This one is already very big. (I'm looking at you, incomplete use of the new SaveType, and explicit construction of the VVVV block of the TPDM.). ## Questions; - [ ] Any deprecation warnings necessary? This is an unusual case, to put it lightly. ## Checklist; - [x] Dipole and gradient finite difference tests created and _passing_.; - [x] `dct` tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2100:749,test,tests,749,https://psicode.org,https://github.com/psi4/psi4/pull/2100,3,['test'],['tests']
Testability,"## Description; The purpose of this PR is to expose the wavefunction as well as access to all amplitudes from CC to the python side. This has the advantage to sort out the relationship of Wavefunction, CCEnergyWavefunction and CCLambdaWavefunction in a more natural C++ way through inheritance. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] CCLambdaWavefunction inherits from CCEnergyWavefunction to facilitate better runtime access from the python side.; - [x] Setter and getter for all T & L amplitudes are included in the python interface to enable more sophisticated methods in the future, e.g. in the broker from #1057.; * **User-Facing for Release Notes**; - [x] Setter and getter for all T & L amplitudes are included in the python interface to enable more sophisticated methods in the future, e.g. in the broker from #1057. ## Questions; - [ ] Does the more technical details from above (inheritance change and exposing of the amplitudes to python) require more text for the release notes?; - [ ] The python documentation should be automatically built, is there more documentation for this part required?. ## Checklist; - [x] Tests added for any new features (not required as no new functionality added); - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1061:1203,Test,Tests,1203,https://psicode.org,https://github.com/psi4/psi4/pull/1061,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; The purpose of this PR is to implement the first bits and pieces to connect psi to [i-pi](https://github.com/i-pi/i-pi) to enable molecular dynamics simulations with psi. For instance, it would be possible to carry out path integral molecular dynamics simulations such as [in this reference](https://doi.org/10.1039/C4CP05192K) with psi. It would be great to get a first review of the basic idea in the code and I can add some documentation of the above infrastructure after that as well. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Infrastructure to connect to [i-pi](https://github.com/i-pi/i-pi) is included in `broker.py`; * **User-Facing for Release Notes**; - [ ] Infrastructure to connect to [i-pi](https://github.com/i-pi/i-pi) is included (but not yet documented yet). ## Questions; - [ ] Is the dynamic dependency to [i-pi](https://github.com/i-pi/i-pi) to setup the interface on runtime fine? Or would you prefer to have the Client side implementation to have fully here in psi as well? If the latter is the case, this has the disadvantage, that the client side might need adjustments with a new version of i-pi, which is why I left the client implementation in i-pi for now. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1057:1294,Test,Tests,1294,https://psicode.org,https://github.com/psi4/psi4/pull/1057,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; The purpose of this PR is to turn off FDDS dispersion when SAPT_DFT_FUNCTIONAL = HF in SAPT(DFT). . SAPT0 uses a HF description of monomers, whereas SAPT(DFT) replaces this description with KS-DFT. When SAPT(DFT)’s functional is set to HF, the results should be equivalent to those of SAPT0. Currently, SAPT(DFT) / SAPT_DFT_FUNCTIONAL HF computes coupled dispersion with FDDS. This step is costly and unnecessary. . ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] The dispersion energy for SAPT(DFT) with HF will now match SAPT0 and no longer calculate or print Disp2,r or Est. Exch-Disp2,r; - [x] No change necessary in input files. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Places SAPT(DFT)'s FDDS dispersion into an if statement so that FDDS disp is only computed when the functional is not HF; - [x] Carries information regarding the functional into the printing code so that the correct dispersion terms are printed out. ## Questions; - [ ] Question1. ## Checklist; - [x] sapt-dft1, sapt-dft2, and sapt-compare all pass; no need for the creation of additional tests. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3080:1404,test,tests,1404,https://psicode.org,https://github.com/psi4/psi4/pull/3080,1,['test'],['tests']
Testability,## Description; The reorganized SAD code was missing a check if the basis set is actually large enough to allow a full valence active space; this is now fixed. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1481:335,Test,Tests,335,https://psicode.org,https://github.com/psi4/psi4/pull/1481,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; The resurrection of #2543. This PR refactors my LinK code (#2359) and Zach's semi-numerical K (#2567) code into the CompositeJK framework (to allow mixing and matching of J and K types). The DirectDFJ implementation here is derived from Zach's semi-numerical K PR. This framework is robust and allows for the rapid development of new J/K methods and combinations in the future, and avoids code duplication. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Creates composite JK framework to allow for mixing and matching of different J/K types; - [x] Makes LinK usable with the DirectDFJ algorithm. ## Questions; - [x] To call my LinK code, `SCF_TYPE` is set to `LINK`, should it be `DFJ_LINK` instead?. ## Checklist; - [x] Tests added for any new features; - [x] Passing pytests for COSK (from Zach) and LinK; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2588:797,Test,Tests,797,https://psicode.org,https://github.com/psi4/psi4/pull/2588,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; The self tests (`python mpl.py`) now work with modern py3 & mpl. ## Checklist; - [ ] ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1690:25,test,tests,25,https://psicode.org,https://github.com/psi4/psi4/pull/1690,4,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; The size check in the scf response code was wrong. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1999:242,Test,Tests,242,https://psicode.org,https://github.com/psi4/psi4/pull/1999,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; The support for matrices with `symmetry() != 0` is flawed in several places in the matrix class. While *some* operations are only valid if the matrix is totally symmetric, most do not have this requirement. . These issues have long gone unnoticed because the majority of places where the object is used the quantity will be totally symmetric. I started noticing these flaws while working on TDDFT which will require most of the changes made here in order to work properly. ## FYI; - Comments/error messages/variables names have been updated to make meaning more precise.; - In general the non-zero block of the matrix found at `matrix_[h]` has shape `{rowspi_[h], colspi_[h^symmetry_]}` **not** `{rowspi_[h], colspi_[h]}`. The two are coincidentally the same when `symmetry_ == 0` (This was the cause of many segfaults/incorrectly raised errors).; - I have aggressively applied DRY to avoid issues. Example (`add`, `subtract`, and `axpy`) all lead to different calls to `C_DAXPY`, however `axpy` computed the size incorrectly and led to a segfault. ; - I have added unit tests for the matrix class to avoid reintroducing any of the bugs I root out. ## Todos; - [x] python bindings for non-totally symmetric constructor; - [x] consolidate `axpy` type operations, fix size issue; - [x] consolidate `gemm` type operations, fix A/B/C block logic. ## Questions; - [ ] If anyone has noticed problems, missing/bugged functionality that I have missed now is a good time to point them out. . ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1383:1087,test,tests,1087,https://psicode.org,https://github.com/psi4/psi4/pull/1383,5,"['Test', 'log', 'test']","['Tests', 'logic', 'tests']"
Testability,## Description; The user needs not set `dertype='energy'` explicitly anymore when calling `optimize`. The test case has been extended accordingly. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **User-Facing for Release Notes**; - [x] FInite difference gradient is always forced when using PCM . ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1001:106,test,test,106,https://psicode.org,https://github.com/psi4/psi4/pull/1001,4,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,"## Description; The value for ```DF_FITTING_CONDITION``` used by the code was changed in #1446, which resulted in a change of numerical values. This PR restores the previously used threshold. See discussion in #1350 and on Slack. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Restores numerical agreement with previous revisions of Psi4. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1472:441,Test,Tests,441,https://psicode.org,https://github.com/psi4/psi4/pull/1472,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; The value of dft_spherical_points should only be able to take certain Lebedev numbers. The test for appropriate values is broken and gives undefined behaviour for non-Lebedev numbers. This fix should give the expected behaviour for unsupported values, bailing out with a table of allowed values. ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/674:107,test,test,107,https://psicode.org,https://github.com/psi4/psi4/pull/674,1,['test'],['test']
Testability,"## Description; There are a few bugs and usability issues with calculations in the presence of a dipole field; this PR will address them. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Fix and test dipole derivative integrals.; - [x] Add dipole derivative terms to SCF gradients.; - [x] Add dipole derivative terms to MP2 gradients.; - [x] Ensure findif calculations in the presence of a field don't project rotations/translations.; - [x] Add tests for SCF and MP2 gradients.; - [x] Fix nuclear repulsion energies and gradients when a dipole field is present.; - [x] Document method for specifying dipole perturbation. * **User-Facing for Release Notes**; - [x] Improve handling of calculations in the presence of a field. ## Questions; - [x] I don't like the fact that we have to set `perturb_h`, `perturb_with` and `perturb_magnitude`. The biggest problem is that we can only specify x, y, or z perturbations as-is. I propose something like keeping `perturb_h` for easy toggling of the field, but then we should deprecate `dipole_{x,y,z}` in favor of `dipole`. Then an option like `perturb_dipole` or similar that would take a 3-vector to specify the magnitudes would be better. Please weigh in on this. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/668:261,test,test,261,https://psicode.org,https://github.com/psi4/psi4/pull/668,2,['test'],"['test', 'tests']"
Testability,"## Description; There was a bug (see conversation between myself and Andy Simmonett in Slack channel earlier today) where if you attempted to use orbital casting on a frequency computation with symmetry, the first symmetry-breaking displacement would succeed at the small basis computation but crash at the large basis computation, saying that it couldn't cast orbitals between symmetries. The code was previously set so that GUESS would be set to READ. This would cause Psi to attempt to read the last saved orbitals. As [the casting mechanism has nothing to do with reading](https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/proc.py#L1336-L1341), the last saved orbitals weren't the orbitals from the small basis computation, but the orbitals from the last geometry, which may well be of the wrong point group. As I can find no reason to have GUESS set to READ, the offending code has been removed. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix a bug causing `basis_guess` to crash if the user has geometries of different symmetries, e.g., a finite difference hessian for a system with symmetry. ## Checklist; - [x] [Quicktests and cast tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests); - [x] Confirmed this fixes the problem I saw. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1139:1210,test,tests,1210,https://psicode.org,https://github.com/psi4/psi4/pull/1139,2,['test'],['tests']
Testability,"## Description; There were a few more `set dft_functional fctl` in the full test suite. This should polish it off. ## Accomplished; - [x] Pin pybind11 to 2.0.0 so psi doesn't pick up any incompatible newer versions lying around; - [x] long tests all pass. ## Questions; - [ ] @dgasmith, should `gradient('scf', dft_functional='bp86')` work?. tests/dftd3/grad/input.dat; ```; ...; grad = gradient('bp86-d2gr'); compare_matrices(ref, grad, 7, ""Outsourced dft gradients called by name"") #TEST; clean(). grad = gradient('scf', dft_functional='bp86-d2gr'); compare_matrices(ref, grad, 7, ""Outsourced dft gradients called by options"") #TEST; ```; ```; 	Outsourced dft gradients called by name...........................PASSED; Traceback (most recent call last):; File ""stage/usr/local/psi4/bin/psi4"", line 260, in <module>; exec(content); File ""<string>"", line 43, in <module>; File ""/home/psilocaluser/gits/hrw-matt/objdir/stage/usr/local/psi4/lib/psi4/driver/driver.py"", line 606, in gradient; wfn = procedures['gradient'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/psilocaluser/gits/hrw-matt/objdir/stage/usr/local/psi4/lib/psi4/driver/procrouting/proc.py"", line 2055, in run_scf_gradient; grad = core.scfgrad(ref_wfn). RuntimeError: ; Fatal Error: V: RKS should have only one D Matrix; Error occurred in file: /home/psilocaluser/gits/hrw-matt/psi4/src/psi4/libfock/v.cc on line: 915; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::RV::compute_gradient(); psi::scfgrad::SCFGrad::compute_gradient(); psi::scfgrad::scfgrad(std::shared_ptr<psi::Wavefunction>, psi::Options&); py_psi_scfgrad(std::shared_ptr<psi::Wavefunction>); ```. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/811:76,test,test,76,https://psicode.org,https://github.com/psi4/psi4/pull/811,5,"['TEST', 'test']","['TEST', 'test', 'tests']"
Testability,"## Description; These are the breaking, user-facing changes for cbs in DDD. That is, these changes aren't needed at present for the cbs back-end, but this is coercing the input front-end into the right syntax. This is No. 6 of the DDD series, #1351. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] All `fn(cbs)` and passing to extrapolation functions are changed over to `fn(""cbs"")` and passing the _names_ of extrapolation functions. This is making cbs behave more like other wrappers: findif you don't call directly, you use kwarg dertype and nbody you don't call directly, you use bsse_type. Functions are trickier to keep imported and don't serialize well, so in ddd, they're registered and replaced by strings, akin to the procedures dictionary.; - [x] alias functions are replaced with dict specification instead of kwarg specification; - [x] UpdateHelpers are added so that if you feed an existing input, it prompts you to make the fn -> str changes.; - [x] Fix bug where allen_focal_point wasn't working b/c used kwargs, not dict, specification for cbs, so the higher deltas were getting lopped off. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2532:1187,Test,Tests,1187,https://psicode.org,https://github.com/psi4/psi4/pull/2532,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; Think of the default orbital optimization algorithm in OCC with the following pseudocode:; ```; orbital_gradient = compute_orbital_gradient(); try:; orbital_step = compute_NR_step_via_PCG_with_HF_MO_hessian(orbital_gradient); except ConvergenceError:; orbital_step = compute_step_with_crude_diagonal_MO_hessian(orbital_gradient); diis_step(); ```. I traced a test failure in an upcoming PR (ocepa-grad2) to a failure in the approximate NR step. Five failures, in fact.; 1. The HF MO Hessian couples alpha and beta IDPs. You need a single alpha, not a different alpha for each spin.; 2. For the same reason, you need a single beta.; 3. The Fock term assumed semicanonical orbitals. OCC does not use semicanonical orbitals.; 4. The Fock matrix was acting on the wrong vector.; 5. One of the tensor contractions involving TEI was incorrect. After fixing those five bugs, I observed three things:; 1. After accounting for whether you index by (v,o) or (o, v), the matrix-vector products of the new occ implementation match those of the SOUHF P4N tutorials,; 2. The X (kappa) converged to does satisfy Ax=b; 3. The orbital equations refuse to converge. My conclusion is that the implementation of the algorithm is now correct, but it's not a good way to generate orbital steps. The off-diagonal terms can end up being significant for the open-shell systems that would lead you to use an orbital-optimized method. This didn't cause obvious problems before because the previous errors rendered the PCG procedure non-convergent, so you would always fall back to the crude diagonal step _unless_ your orbital gradient was so low that you didn't need to iterate at all. So what we expect to see from this bug is difficulties converging occ tightly, which has been my experience. To remedy the situation, the default orbital step is now the crude semicanonical step. The next PR should be the final one in the series. I'll just need to rebase it onto this one, repair the two tests I mentioned on",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1829:375,test,test,375,https://psicode.org,https://github.com/psi4/psi4/pull/1829,1,['test'],['test']
Testability,"## Description; Third in the qcelemental series, following #1234 (no use reviewing this one until that one goes through and this one's rebased. This moves molecule parsing out of `driver/qcdb/molparse` and into `qcelemental.molparse`. Since the latter are files copied from the former last week, no real concern about different behavior. EDIT: now with an actual unique commit!. EDIT: Skipping #1234 as intermediate, so copying that checklist to here.; - [x] driver-side physconst --> no change; - [x] driver-side psifiles --> `psi4.driver.constants.PSIF_` --> `psi4.driver.psif.PSIF_`; - [x] psiapi --> can't `from psi4.driver.constants import c`, instead `psi4.driver.constants.c` or `c = psi4.driver.constants.c`; - [x] psithon --> no change; - [x] qcdb --> `psi_c` --> `qcel.constants.c`; - [x] put in a basic connection to cmake. it'll clone it for you and install next to psi (which means pythonpath picks it up). ## Checklist; - [ ] ~Tests added for any new features~; - [x] full test suite run. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1275:941,Test,Tests,941,https://psicode.org,https://github.com/psi4/psi4/pull/1275,2,"['Test', 'test']","['Tests', 'test']"
Testability,## Description; This PR (finally) fixes issue #1830 with USAPT0 by introducing a bunch of conditionals. I also uncovered and corrected a bug in the Exch-Disp term in USAPT0 while working on this. ## Questions; - [x] Does anybody have acces to another UHF-based SAPT0 code that we could test against ?. ## Checklist; - [x] Tests need to be run; - [x] There should probably be some kind of announcement about the USAPT0 Exch-Disp term. ## Status; - [x ] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1948:286,test,test,286,https://psicode.org,https://github.com/psi4/psi4/pull/1948,2,"['Test', 'test']","['Tests', 'test']"
Testability,"## Description; This PR adds a new psivar for the length gauge origin-dependence of the specific rotation, to aid in migration of the CC tests. `cc29` now tests this psivar. Once the psivar is accepted, I can resume porting tests over. This is PR 6 in an ongoing series to make `ccdensity` compatible with the standard `Matrix` and `Wavefunction` machinery used elsewhere in Psi. Obligatory @lothian and @loriab ping for new `cc` psivars. For TDC's benefit, you can go to the ""Files changed"" tab, ""Review changes"", and then mark to approve if things look good to you. ## Checklist; - [x] Newly added psivar is tested. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2451:137,test,tests,137,https://psicode.org,https://github.com/psi4/psi4/pull/2451,4,['test'],"['tested', 'tests']"
Testability,"## Description; This PR adds a new psivariable, the overlap between the left and right CC eigenvectors. This was previously tested by `psitest.pl`, but promoting it to a psivar allows the standard `compare_values` machinery to test it. This PR integrates the new psivar into tests of `cc18`. This PR also removes the file `overlap_LAMPS.cc`, which was unused and differs from `overlap.cc` just by a search-replace on the name of the file to which quantities were being written. This is PR 4 in an ongoing series to make `ccdensity` compatible with the standard `Matrix` and `Wavefunction` machinery used elsewhere in Psi. **Do not merge until** we have approval from @loriab and @lothian, as we are adding a new psivar to the `cc` mega-module. The next stage will be to ensure all variables are set _on the wavefunction_, for testing purposes. This will proceed module-by-module, to minimize the chances of anything getting overlooked. ## Questions; - [x] Are there any Crawford group projects that need `overlap_LAMPS.cc`?; - [x] Please double-check that my assignments of method to ground state name are correct. ## Checklist; - [x] Tests added for any newly testable features; - [x] `cc` tests pass. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2443:124,test,tested,124,https://psicode.org,https://github.com/psi4/psi4/pull/2443,7,"['Test', 'test']","['Tests', 'test', 'testable', 'tested', 'testing', 'tests']"
Testability,## Description; This PR adds functionality for frequency-dependent first hyperpolarizabilities using the CCSD quadratic response theory. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Implementation of left hand perturbed amplitudes.; - [ ] Implementation of quadratic response functions.; - [ ] Implementation of frequency-dependent first hyperpolarizabilities.; - [ ] Optimization and clean-up.; - [ ] Testing. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2043:464,Test,Testing,464,https://psicode.org,https://github.com/psi4/psi4/pull/2043,4,"['Test', 'test']","['Testing', 'Tests', 'tests']"
Testability,"## Description; This PR adds support for the remaining access patterns for EOM oscillator strengths and einstein coefficients. The pieces are now in place to adapt densities and multipoles as well. I'm hopeful that will be the next PR, which should be enough to get 3 of the 4 remaining cc tests ported over. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Infrastructure Change: `ccdensity` and `cceom` now require an incoming `CCEnergyWavefunction`; - [x] Infrastructure Change: `CCEnergyWavefunction` now has a field to store excited state symmetry labels; - [x] Infrastructure Change: Some SharedWavefunction arguments became refernces to CCEnergyWavefunction; - [x] Fully moved `cceom` internal vars to new standard. ## Checklist; - [x] `eom` ctests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2538:290,test,tests,290,https://psicode.org,https://github.com/psi4/psi4/pull/2538,1,['test'],['tests']
Testability,"## Description; This PR adds the [SNS-MP2 plugin](https://github.com/DEShawResearch/sns-mp2) to the list of endorsed Psi4 plugins such that the SNS-MP2 method can be called by energy() without the use of any import statements. ## Todos; - [x] Added SNS-MP2 (via endorsed_plugins.py); - [x] Added documentation for SNS-MP2; - [ ] Make sure a full Psi4 install includes SNS-MP2; - [ ] Add tests. ## Questions; - [x] Is there anything I should add to or change about the documentation? (Tagging @rmcgibbo because he wrote the code, as well as @dgasmith and @loriab because of their general Psi4 and documentation knowledge.); - [x] The plugin itself comes with several tests already. Should I incorporate those tests into the standard Psi4 test suite?; - [x] I've borrowed several lines of code for the installation and example [from the plugin's README](https://github.com/DEShawResearch/sns-mp2/blob/master/README.md). Is this ok, or should I change it?. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/850:387,test,tests,387,https://psicode.org,https://github.com/psi4/psi4/pull/850,4,['test'],"['test', 'tests']"
Testability,"## Description; This PR adds the [psi4fockci plugin](https://github.com/shannonhouck/psi4fockci) as an endorsed plugin, allowing people to perform generalized spin-flip and IP/EA calculations. ([Related to Issue #1838 here](https://github.com/psi4/psi4/issues/1838).). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Added psi4fockci to endorsed_plugins.py; - [x] Added documentation; - [x] Added tests. ## Questions; - [x] The addition of the psi4fockci tests seem to be breaking test_psi4_cas; it fails with a ""Fatal Error: CIWavefunction: Iterations did not converge!"" error. I presume this is because I'm somehow not cleaning variables correctly; I'm calling core.clean(), core.clean_options(), and core.clean_variables(). Is there one I'm missing?. ## Checklist; - [x] Tests added for psi4fockci; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1855:447,test,tests,447,https://psicode.org,https://github.com/psi4/psi4/pull/1855,5,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This PR aims to export the first and second derivatives of one and two electron integrals in both AO and MO basis to python so that they can be used in psi4numpy for educational purposes. While calculating first derivatives, one gets a vector of matrices as the output, one for each cartesian component of the atom number provided in the input. Similarly, for hessians, one gets a total of 9 matrices for a given pair of atoms. ; ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [X] add first derivatives ; - [X] add second derivatives; - [X] optimization and cleanup; - [X] add corresponding test cases in psi4numpy tests folder. ## Status; - [X] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/757:671,test,test,671,https://psicode.org,https://github.com/psi4/psi4/pull/757,2,['test'],"['test', 'tests']"
Testability,"## Description; This PR aims to expose useful functions from _detci_ and _libpsio_ to the python side:; - libpsio needs **read()**, **write()**, **read_entry()**, and **write_entry()** functions available in python to be actually useful to the user who intends to use Psi4 intermediate files, containers and buffers.; - There are publicly accessible _get_opdm()_ and _get_tpdm()_ functions in _detci_ but for the active-space only. This PR tries to bring the **opdm_add_inactive()** function to the public scope as well and expose it to the python side.; - Members of the **psio_address** structure are also exposed that can be adopted as arguments in _libsio_'s _read()/write()_ function calls. ## Todos. * Having a spatial symmetry-imposed bock-structured sparse TPDM as a result of get_tpdm() instead of the dense format only is desirable.; * Adding _opdm_add_inactive()_'s counterpart in order to complete the full structure of TPDM [such as **tpdm_add_inactive()**] will be extremely useful. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1821:1048,Test,Tests,1048,https://psicode.org,https://github.com/psi4/psi4/pull/1821,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This PR aims to implement computation of multipole potential integrals up to a desired; order. Such integrals are used for EFP and PE (#1401), where for EFP, the integrals; are already implemented, but are always computed through third order (octupoles). For PE, often parameters are only available up to quadrupoles, so I'd like to avoid computation; of higher order integrals all the time. ~~The code is copied from `efpmultipolepotential`, so probably one should decide on whether; to keep `efpmultipolepotential` or to use the new code to avoid code duplication.~~. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] enable octupole moments as well; - [x] change ordering of cartesian components to Cartesian; - [x] use `multipolepotential` for EFP (`ao_efp_multipole_potential` calls `ao_multipole_potential` and does the remapping of components in `mintshelper.cc`); - [x] remove `efpmultipolepotential.{hh,cc}`; - [x] tests of the actual integrals using finite differences. ## Questions; - [x] ~~Switch to `multipolepotentials` for EFP in another PR?~~. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1657:988,test,tests,988,https://psicode.org,https://github.com/psi4/psi4/pull/1657,4,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This PR aims to improve the performance of electric field integrals for multiple; coordinates. These are needed, e.g., in EFP and Polarizable Embedding (PE, #1401) calculations, where the; integrals need to be evaluated at all sites in the environment. For large environments, the electric field integrals can become the bottleneck of the calculation. The code I've already implemented is quite ugly and mainly serves as a proof of principle.; Exposure to the Python layer is also not well done at the moment, but it made testing; super easy. In my current [test script](https://gist.github.com/maxscheurer/4736a100ff5de12190ef27f7bc2eaade), I computed integrals at 2000 random points for Water/cc-pVQZ, for which I get a 25x speed-up compared to the existing implementation. Tasks the implementation enables:; - compute field integrals on multiple points; - contract the integrals with a density matrix (for expectation values of the electric field at all points); - contract the integrals with a dipole moment (for building the induction operator for PE/EFP). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] hackish, preliminary version (proof of principle); - [x] cleanup `mintshelper` etc.; - [x] proper naming of new functions. ## Checklist; - [x] Tests added for any new features (`pytests/test_elec_fields.py`); - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1671:538,test,testing,538,https://psicode.org,https://github.com/psi4/psi4/pull/1671,5,"['Test', 'test']","['Tests', 'test', 'testing', 'tests']"
Testability,"## Description; This PR attempts to enable calculations of TD-HF/DFT optical rotations (ORs) with GIAOs, also called as London orbitals. This ensures that the length gauge OR results are independent of the choice of origin used in the geometry. ; ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [X] adds the gradients of one and two electron integrals of GIAOs; - [] constructs the modified RHS corresponding to magnetic response vectors. ; - [] implements TD-HF optical rotation in psi4numpy as an example. ; ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1081:593,Test,Tests,593,https://psicode.org,https://github.com/psi4/psi4/pull/1081,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This PR builds on the start that @PeterKraus made to get the libecpint library from @robashaw up and running as Psi4's ECP engine. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - Improve the speed and stability of the ECP integrals. ## Questions; - [ ] @robashaw are the derivative integrals ready to go in Libecpint yet? If not, do you have any idea how much work it will be to implement them?. ## Checklist; - [x] Make libecpint play nicely with our CMake infrastructure; - [ ] Write wrappers for ECP integral code, making the new code path optional for now; - [ ] Tests added for any new features. ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1340:629,Test,Tests,629,https://psicode.org,https://github.com/psi4/psi4/pull/1340,1,['Test'],['Tests']
Testability,"## Description; This PR changes how `OEProp` saves variables and fixes a bug where ""CC ROOT 0"" variables were not being set. Previously, OEProp overloaded `title_` to refer to both the name used for the density matrix (for print purposes) and for the name used for properties (as a prefix for variable saving purposes). Only one such name can be used.; Now, OEProp uses the density matrix's name as the density matrix's name (for print purposes) and for the names used for properties (for variable saving purposes, and with the generality of format strings). Multiples names can be used. With this, I can now save the CC dipoles as both ""CC DIPOLE"" and ""CC2 DIPOLE"", so ""CC DIPOLE"" can be found. The Psi code that tried to access this was never entered previously because it checked for a 'dipole' variable rather than a 'DIPOLE' variable. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] More flexibility in OEProp names; - [x] Previously missing CC property variables are set. ## Checklist; - [x] Properties tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2534:1068,test,tests,1068,https://psicode.org,https://github.com/psi4/psi4/pull/2534,1,['test'],['tests']
Testability,"## Description; This PR changes the code to fix the majority of combinations of `SCF_TYPE`/`SCF_SUBTYPE`/`SCREENING` keywords which were previously broken. It was discovered that there were a lot of combinations of `SCF_TYPE`, `SCF_SUBTYPE`, and `SCREENING` keywords (e.g., `SCF_TYPE = {CompositeJK}` with `SCREENING = NONE`) that would break upon use, either with an exception or with a hard error such as a segfault. PR https://github.com/psi4/psi4/pull/2978 added testing to detect these broken combinations. This PR actually fixes the broken combinations detected through the added test. The most notable change as a result of fixing these issues is the handling of how certain variables within the `TwoBodyAOInt` class are initialized. To enable universal support of JK builds with `SCREENING = NONE`, an option has been added to manually call the `TwoBodyAOInt::create_sieve_pair_info()` function via the new wrapper function `TwoBodyAOInt::initialize_sieve()`. Multiple JK builds rely on values of variables initialized via `create_sieve_pair_info()` , and `initialize_sieve()` is now used to initialize the required variables if `SCREENING = NONE` is set. In this way, `SCREENING = NONE` can exist with the benefits it provides, while still working with all JK builds. Also, changes are made to ensure that no screening actually occurs in JK builds when `SCREENING` is set to `NONE`. In line with the above, some tests have been expanded. `test_comprehensive_jk_screening.py` has been changed to account for the `SCF_TYPE`/`SCF_SUBTYPE`/`SCREENING` combinations that were fixed. `test_erisieve.py` has been updated to more thoroughly test `SCREENING=NONE`. It is worth noting that, unfortunately, `TwoBodyAOInt::initialize_sieve()` must be defined per integral engine, and so the fixes of this PR only work with Libint2. The issues this PR tries to fix, still persist if Simint is used instead. ## User API & Changelog headlines; - [X] N/A. ## Dev notes & details; - [X] Adds a new function to",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3060:467,test,testing,467,https://psicode.org,https://github.com/psi4/psi4/pull/3060,2,['test'],"['test', 'testing']"
Testability,"## Description; This PR clarifies the libxc interface code and function descriptions as to the meaning of the alpha and beta parameters in psi4 vs libxc. See #1258 . Also, the definition of wPBE0 is fixed. See #1259 . ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Feature1. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1260:377,Test,Tests,377,https://psicode.org,https://github.com/psi4/psi4/pull/1260,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This PR closes #1916 and corrects a bug causing third-decimal errors in gradients computed by `dfmp2` with the frozen virtual approximation. See the commit marked ""Bugfix!"" to see exactly what the issue was. There was a sign error, and Rob was looping over frozen core orbitals when he meant to loop over frozen virtual orbitals. More importantly for me, this code inserts many, many comments into Rob's code, so I know what I'm doing when I modify it throughout the rest of this PR series. This includes uncovering a very devious computational trick, that as far as I know is unpublished, and also some errors in the original papers. Many thanks to Francesco and Shuhe for the DSRG-PT2 paper, which formed part of the Rosetta Stone for figuring out how this code works. Several explicit types are now `auto`. Reviewers, double-check that I didn't accidentally remove a pass-by-reference or `const` declaration when doing so. Lastly, `test_gradients.py` has been added to pytests to confirm the accuracy of `dfmp2` gradients. This PR series will culminate with the addition of DF-ODC-12 to `test_gradients.py`. Currently, DF-ODC-12 would fail due to #1579. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Corrects a critical bug causing errors in frozen virtual gradients computed with the `dfmp2` module; - [x] Adds many comments to `dfmp2`; - [x] Replaces a lot of explicit type with `auto`. ## Checklist; - [x] Tests added for newly working features; - [x] `dfmp2` tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1923:1480,Test,Tests,1480,https://psicode.org,https://github.com/psi4/psi4/pull/1923,2,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This PR closes #2120. The user-side problem is that when there are linear dependencies in the molecule, `fnocc` reports uncontrolled energies, iteration-by-iteration. The mechanism for this is as follows:. * `run_fnocc` requests an SCF computation. `nmopi_ < nsopi_` due to linear dependencies.; * `fnocc` is incompatible with point group symmetry, so calls `c1_deep_copy` to transform the solution to a c1 solution. For concreteness, we'll assume RHF, although all HF subclasses have the same problem.; * `RHF::c1_deep_copy` calls `Wavefunction::c1_deep_copy`. The resulting wavefunction has `nmo_` equal to `nmopi_.sum()` of the previous wavefunction, as desired.; * `RHF::c1_deep_copy` calls the RHF constructor on the new wavefunction, which calls to `HF::common_init`, which initializes `nmopi_ = nsopi_`, under assumption that the subsequent SCF will call `form_Shalf`, which is _actually_ responsible for first eliminating linear dependencies and then determining `nmopi_`.; * There is no subsequent SCF, so `nmopi_ = nsopi_` at the time `fnocc` begins.; * Garbage In, Garbage Out. `fnocc` is given a garbage wavefunction and gives garbage energies. The remedy here is to no longer have `common_init` put suspect information on the wavefunction. Obligatory ping to @edeprince3. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] `c1_deep_copy` no longer leads to a wrong `nmopi_` in case of linear dependency. This fixes problems with linear dependencies observed in the `fnocc` module. ## Questions; - [ ] What does this PR mean for #1545? Holger confirmed the bug there was symmetry related, and the system does have a linear dependency... It's probably worth re-investigating after this gets merged in. ## Checklist; - [x] Tests added for any newly working features; - [x] `ctest -j4` is 490/490. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2302:1805,Test,Tests,1805,https://psicode.org,https://github.com/psi4/psi4/pull/2302,1,['Test'],['Tests']
Testability,"## Description; This PR contains changes necessary to make Psi4 bare-bones compatible with the development branch of Libxc. Note, however, that the Libxc API will be breaking again in the development branch when double hybrids are introduced. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Add support for double hybrids. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1904:424,Test,Tests,424,https://psicode.org,https://github.com/psi4/psi4/pull/1904,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This PR covers some miscellanea needed to fully finish the `psimrcc` series, which will close #1877. Ready for review, but not yet merge. I need @fevangelista to answer the questions, and then to run clang format. And then I can assess where I'm at for the libtrans refactor preliminary to the gradient refactor. It'll end one of these days... ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Removes some dead code; - [x] `free_memory_` is now actually used; - [x] Clang formatting. ## Questions; - [x] special_matrices.cc::MatrixBase and derived subclasses currently do not update the free memory. While I can make it update memory, that would require giving each Matrix a wavefunction. Should I add memory costs for this?; - [x] I assumed that the memory cost of the index.cc classes was negligible, as these are three-index or smaller. Should I add memory costs for this?1. ## Checklist; - [x] psirmrcc tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1956:972,test,tests,972,https://psicode.org,https://github.com/psi4/psi4/pull/1956,1,['test'],['tests']
Testability,"## Description; This PR deprecates Psi's built-in ADC module, per discussion on the January developer conference call, issue #1033, and my own investigation. ## Checklist; - [x] Tested ADC still runs, but with well-deserved warnings. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2419:178,Test,Tested,178,https://psicode.org,https://github.com/psi4/psi4/pull/2419,1,['Test'],['Tested']
Testability,"## Description; This PR does cleanup in `dmrgscf` to mark variables const, remove non-RAII dynamic memory, and switch from pointers to references where possible. This PR is in preparation for updating the deprecated molden call. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] DMRG memory and `const` cleanup. ## Checklist; - [x] DMRG tests still pass. ## Status; - [x] Ready for review; - [x] Ready for merge **squash**",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2383:394,test,tests,394,https://psicode.org,https://github.com/psi4/psi4/pull/2383,1,['test'],['tests']
Testability,## Description; This PR does some miscellaneous cleanup of the OEI part of `libtrans` and will probably lead to another series of smaller PRs involving `libtrans`. The focus of this PR is to take away from `libtrans` responsibility for creating unused or barely used one-electron objects. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Remove unused OEI functions from `libtrans`; - [x] Remove creation of Fock matrices from being the responsibility of `libtrans`; - [x] Add a readme file explaining why `libtrans` is bothering with a frozen core operator. ## Checklist; - [x] `pytest test_standard_suite.py` and all C-tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1991:670,test,tests,670,https://psicode.org,https://github.com/psi4/psi4/pull/1991,1,['test'],['tests']
Testability,"## Description; This PR enables CCSD calculations with the PCM in the [PTED (Perturbation-To-Energy-and-Density) approximation](http://dx.doi.org/10.1063/1.3245400). The PCM potential is calculated from the CCSD _density_. Thus macroiterations are introduced to solve the CCSD amplitude **and** multiplier equations, obtain the CCSD density and update the PCM potential. @jH0ward the macroiterations are handled in the Python layer. . ~There are two test cases, both currently failing, and the code is quite ugly.~. ## Todos; * **User-Facing for Release Notes**; - [x] For SCF, the PCM potential is now added on top of the Fock matrix in `form_F()`. I added a `std::vector<SharedMatrix> external_potentials_` to the HF base class. External potentials are stored there and then added on top `Fa_` and `Fb_` in the implementation of `form_F()` for the RHF, UHF and ROHF subtypes. This was necessary to get ROHF to work with PCM.; - [x] `compute_E()` for the RHF, UHF, ROHF and CUHF subtypes of the abstract HF type now use the one- and two-electron matrices to compute the energy, instead of `Fa_` and `Fb_`. This avoids ambiguities when external potentials, such as PCM, have been/will have to be added to the Fock matrix. ; - [x] CCSD with the PCM in the PTED approximation.; - [x] Final report of energy clearly reports polarization and correlation components for the PTE and PTED schemes.; - [x] Added tests for RHF and UHF references.; - [x] Updated version of PCMSolver. ## Known problems; - The HeH+ test case (`pcmsolver-ccsd-pted-heh+`) doesn't work when setting a ROHF reference. I suspect the problem is in the [`update_Fock_matrix_rhf` function in `ccdensity/ccdensity.cc`](https://github.com/psi4/psi4/pull/810/files#diff-ed90974ac2a85f17445ff27956c7d6dfR791). ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/810:450,test,test,450,https://psicode.org,https://github.com/psi4/psi4/pull/810,3,['test'],"['test', 'tests']"
Testability,## Description; This PR enables easier single-shot calculations in Psi4 by short-circuiting the SCF solver if `maxiter == 0`. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2073:310,Test,Tests,310,https://psicode.org,https://github.com/psi4/psi4/pull/2073,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This PR entirely removes the Obara-Saika code for one-electron integrals. Note that, as explained in #2473, the *unique* `PseudoSpectralInt` functionality (erf integrals) is not used anywhere in Psi right now, so it can be safely removed. Once the problems with L2 (which currently put #2473 on hold) are sorted out, this functionality will become available. **Merge button click** reserved for @andysim. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Remove `osrecur.{cc,h}`; - [x] Remove `PseudoSpectralInt` (will be reconciled in #2473). ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2517:637,Test,Tests,637,https://psicode.org,https://github.com/psi4/psi4/pull/2517,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This PR exposes Einstein Coefficients and Rotary Strengths to `psivar`. As of this PR, cc tests 1-33, 35-45, 47, 49-53, 55-56 are ported. Four tests to go. I'm not ultimately happy with these tests (see the six issues I filed this evening), but it's as good as we have right now. ## Questions; - [x] **Please confirm the descriptions and units of the glossary additions.**. ## Checklist; - [x] Newly added tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2525:106,test,tests,106,https://psicode.org,https://github.com/psi4/psi4/pull/2525,4,['test'],['tests']
Testability,"## Description; This PR exposes `Vector.clone()` to the Python layer, a generally useful function and one I specifically need for PyDIIS. Sadly, positive LoC this time. The cast to `shared_ptr` is necessary for the clone to be available Py-side because when we pybound `Vector`, we specified `std::shared_ptr<Vector>` as its holder type. I imagine this is an example of ""[holder types must be applied consistently](https://pybind11.readthedocs.io/en/stable/advanced/smart_ptrs.html#std-shared-ptr.)."" Let's not talk about how long it took for me to implicate holder types in my test originally failing. ## Todos; - [x] `Vector.clone` available on the Python layer. ## Checklist; - [x] Tests added for any new features. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2375:578,test,test,578,https://psicode.org,https://github.com/psi4/psi4/pull/2375,2,"['Test', 'test']","['Tests', 'test']"
Testability,## Description; This PR exposes all of libmints and libciomr to plugins via the PSI_API macro. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Expose libmints; - [x] Expose libciomr; - [x] Expose JK and Denominator classes; - [x] Expose Options print functions. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1400:366,test,tests,366,https://psicode.org,https://github.com/psi4/psi4/pull/1400,2,['test'],['tests']
Testability,"## Description; This PR exposes the two functions `compute_orbitals` and `compute_density` from `CubeProperties` to the Python layer. This allows for more flexible dumping of cube files. Example Code:; ```Python; import psi4; import numpy as np. def test_cube_files(expected, computed):; expected = np.genfromtxt(expected, skip_header=9, skip_footer=1); computed = np.genfromtxt(computed, skip_header=9, skip_footer=1); np.testing.assert_allclose(expected, computed, atol=1e-14). mol = psi4.geometry(""""""; O 0 0 0; H 0 0 1.795239827225189; H 1.693194615993441 0 -0.599043184453037; symmetry c1; units au; """"""). psi4.core.be_quiet(); psi4.set_options({'basis': ""sto-3g"",; 'scf_type': 'pk',; 'cubeprop_tasks': ['density', 'orbitals']}); scf_e, wfn = psi4.energy('SCF', return_wfn=True); psi4.cubeprop(wfn). cubegen = psi4.core.CubeProperties(wfn). dt = wfn.Da(); dt.add(wfn.Db()); cubegen.compute_density(dt, ""hf_density""). # obtain alpha coefficients; orbs = wfn.Ca_subset(""AO"", ""OCC"").np; # select the two highest occupied orbitals; occs = orbs[:, -2:]; occs_pm = psi4.core.Matrix.from_array(occs); cubegen.compute_orbitals(occs_pm, [0, 1], [""homo-1"", ""homo""], ""orbital""). test_cube_files(""Dt.cube"", ""hf_density.cube""); test_cube_files(""Psi_a_5_5-A.cube"", ""orbital_2_homo.cube""); test_cube_files(""Psi_a_4_4-A.cube"", ""orbital_1_homo-1.cube""); ```. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] export functions . ## Questions; - [x] ~~Should some tests be added for this? Like in the example code above to be 100% safe?~~ I added a simple test like in the example script to be safe. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1917:423,test,testing,423,https://psicode.org,https://github.com/psi4/psi4/pull/1917,6,"['Test', 'test']","['Tests', 'test', 'testing', 'tests']"
Testability,"## Description; This PR finishes the reorganization of the SAD code. Renames ```SAD_FRAC_SR_OCC``` to ```SAD_SPIN_AVERAGE```, which is also valid without fractional occupations. Fixes the guess in the presence of ghost atoms. I also turn fractional occupations and spin-averaging on by default, because; * fractional occupations are well-known to give better results than integer ones; * differences between spin-averaged SAD and atomic ground state SAD appear to be small when fractional occupations are used; * the spin-averaged code not limited to Z <= Rn. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Turn fractional averaging in SAD on by default; - [x] Turn spin-averaging in SAD on by default; - [x] SAD works in the presence of ghost atoms; - [x] SAD works in the presence of ECPs; - [x] Make SAD the default guess . ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1458:929,Test,Tests,929,https://psicode.org,https://github.com/psi4/psi4/pull/1458,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This PR fixed a problem that prevents setting string options for modules when these are not defined to be global. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] When calling `Options::set_str` we now check if the option `key` exists in global. If yes, check if it matches any of the choices. ## Checklist; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1955:413,test,tests,413,https://psicode.org,https://github.com/psi4/psi4/pull/1955,2,['test'],['tests']
Testability,"## Description; This PR fixes Example 1 of #2231, some GEMM errors in the DCT module in the presence of linear dependencies. There's more debugging to do, but this is a perfectly good standalone bugfix. I also refactored the offending function. Less code duplication, less gratuitous pointers, and eliminated an offset. This PR is anodyne, so getting this in for 1.4 would be appreciated. ## Checklist; - [x] No tests to add? The old code completed successfully because there was a back-up algorithm when the one that was acting up errored out.; - [x] `ctest -R dct` passes. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2232:412,test,tests,412,https://psicode.org,https://github.com/psi4/psi4/pull/2232,1,['test'],['tests']
Testability,"## Description; This PR fixes a bug causing TD-DFT and stability analysis to give incorrect results (or diverge) when used with density-fitting and symmetry : more generally, the bug occurs any time JK objects used back-transformed C matrices that weren't totally symmetric. This is ultimately an issue of orbital indexing. When the left index of the generalized C matrix is back-transformed from SO to AO, the blocks need to be flattened together. The code previously combined the blocks from smallest h to lowest h. So columns of irrep `h ^ symmetry_` appear _in order of h ascending_, with the left C assumed totally symmetric. The matrices have different orbital indexing if your right C `symmetry_` is not totally symmetric! This produced inconsistencies when contracting quantities against each other that inherited this indexing. The fix is simple: change the order we back-transform irreps of the right matrix, so the order of orbitals is consistent and `symmetry_`-independent. Closes #2122. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Bugfix: Can now converge TD-SCF with DF and symmetry; - [x] Bugfix: Can now get correct stability analysis with DF and symmetry. ## Checklist; - [x] Tests added for newly working TD-SCF - they pass; - [x] Quick tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2124:1257,Test,Tests,1257,https://psicode.org,https://github.com/psi4/psi4/pull/2124,2,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This PR fixes a bug found by Lori, and gives `compare_matrices` the ability to compare names. Although Lori and I were in talks about some other improvements to comparison functions, those would touch `qcelemental` so can't be included here. This blocks some development on another branch, so I'd appreciate a fast review. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Fixes `compare_recursive` bug; - [x] Adds flag to `compare_matrices` so named can be checked. ## Checklist; - [x] New tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2397:564,test,tests,564,https://psicode.org,https://github.com/psi4/psi4/pull/2397,1,['test'],['tests']
Testability,"## Description; This PR fixes a bug in the UHF gradients for systems with no beta electrons (1-electron systems).; On line 463 of `psi4/src/psi4/scfgrad/jk_grad.cc` I couldn't avoid skipping this operation because this buffer is read somewhere else (and it practically does not matter for 1-electron systems).; ```C++; // > Stripe < //; psio_->write(unit_b_, ""(A|ij)"", (char*)Aijp[0], sizeof(double) * np * nb * nb, next_Aijb, &next_Aijb);; ```; ## Todos; - [x] Fixes logic in `scf_grad` code. ## Checklist; - [x] Added a test of the UHF gradient for H2+.; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2344:468,log,logic,468,https://psicode.org,https://github.com/psi4/psi4/pull/2344,4,"['log', 'test']","['logic', 'test', 'tests']"
Testability,"## Description; This PR fixes a bug introduced in #1749, where `MemDFJK` handling of range-separated functional was incorrect in the asymmetric case. This incorrect handling lead to incorrect TD-DFT excitation spectra for range-separated functionals when `MemDFJK` was used. This PR hence closes #2431. In the symmetric case, either swapping the contraction order had no effect, or it was corrected by a hermitivitize call later on, so no error was observed. I strongly recommend backporting this PR (or at least the two characters needed to fix the bug). The rest of the PR other than those two characters is tests and commenting. Credit to @hokru for tag-team debugging. . ## Checklist; - [x] Tests added for newly working features. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2435:610,test,tests,610,https://psicode.org,https://github.com/psi4/psi4/pull/2435,2,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This PR fixes a bug when the `method/basis` specification is used in conjunction with DiskDF (i.e. when the reference wfn is passed on to, e.g. TDSCF or FNOCC). Fixes #1604. New test cases added that would trigger the original problem. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] fix; - [x] add tests. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2141:194,test,test,194,https://psicode.org,https://github.com/psi4/psi4/pull/2141,5,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,"## Description; This PR fixes a docs fail caused by the previous PR in the series and also adapts a few more tests. Test `cc29` needs another adaptation, but as that will require a new psivar, I'm saving that for the next PR. This is PR 5 in an ongoing series to make `ccdensity` compatible with the standard `Matrix` and `Wavefunction` machinery used elsewhere in Psi. Obligatory @lothian ping for `cc` and obligatory @loriab ping for fixing the docs. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2447:109,test,tests,109,https://psicode.org,https://github.com/psi4/psi4/pull/2447,2,"['Test', 'test']","['Test', 'tests']"
Testability,## Description; This PR fixes a line in cookbook-rohf-orb-rot test that was previously causing a failure. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [ ] Fixes previously failing tests; * **User-Facing for Release Notes**; - Not sure if this is applicable?. ## Questions; - No questions at this time. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/841:62,test,test,62,https://psicode.org,https://github.com/psi4/psi4/pull/841,2,['test'],"['test', 'tests']"
Testability,"## Description; This PR fixes a memory leak which I inadvertently introduced myself when refactoring `libdiis`. What I was _trying_ to do was take heap memory and move it into the stack. You can't actually do that. So when I released my `std::vector` from the smart pointer and saved it to a class variable, the memory was _not_ cleared on object delete because it was still heap memory and not stack memory. _Mea culpa_. ## Checklist; - [x] Quick tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2350:448,test,tests,448,https://psicode.org,https://github.com/psi4/psi4/pull/2350,1,['test'],['tests']
Testability,## Description; This PR fixes some typos in `cc29` which reduced test coverage and also migrates `cc30` and `cc31` from autotest to ctest. `cc32` and `cc33` are good as written. This is PR 7 in an ongoing series to make ccdensity compatible with the standard `Matrix` and `Wavefunction` machinery used elsewhere in Psi. Obligatory @lothian and @loriab pings - reviews appreciated but not mandatory. ## Checklist; - [x] Changed tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2456:65,test,test,65,https://psicode.org,https://github.com/psi4/psi4/pull/2456,2,['test'],"['test', 'tests']"
Testability,## Description; This PR fixes the segmentation fault of `CCEnergyWavefunction::rotation()` when there are frozen virtual orbitals. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1887:151,Test,Tests,151,https://psicode.org,https://github.com/psi4/psi4/pull/1887,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This PR fixes three bugs in Psi's NBOWriter.; 1. The AO->MO matrix was previously put in the transpose way to how NBO expected it.; 2. MO coefficients for non-totally symmetric irrep were transformed from SOs to AOs incorrectly, leading to #1566. Closes #1566.; 3. The map from angular momentum functions in Psi to labels for NBO was wrong. For instance, p0 was previously px instead of pz. Due to point 3, **all previous NBO computations from Psi-generated NBO files are suspect.** I very nearly published wrong results due to that, so I advocate backporting this to 1.3. **NEW**; Linear dependencies and angular momentum up to _h_ is now handled properly. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix critical errors in NBOWriter. ## Tests of Correctness; I compared the overlap, density, and Fock matrices for nearly-cis diazene from file47's from Psi and QChem. After accounting for the fact that they order the AOs differently, they match almost perfectly. The density matrix was off in the last decimal place for a few entries. The NAO energies, NAO occupations, and perturbative analysis matched as well. I repeated for my instigating case, cis-sulfurous acid. QChem matches Psi with symmetry matches Psi without symmetry for NAO energies, NAO occupations, and perturbative analysis. Finally, to verify the molecular orbitals, I had both QChem and Psi report the MOs in the basis of NBOs. Apart from ordering the NBOs differently, the two match to within the last decimal place. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1602:809,Test,Tests,809,https://psicode.org,https://github.com/psi4/psi4/pull/1602,1,['Test'],['Tests']
Testability,"## Description; This PR follows the change of PR #2064. To avoid compilation errors for any downstream packages, `Lagrangian()` and `X()` in the `Wavefunction` class have been marked deprecated instead of removing them. Future code should use lowercase `lagrangian()` and `set_lagrangian()` to obtain and set the orbital Lagrangian matrix (both C++ and Python), respectively. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2066:430,test,tests,430,https://psicode.org,https://github.com/psi4/psi4/pull/2066,2,['test'],['tests']
Testability,"## Description; This PR gets rid of all `new` and `delete` calls within `libdiis`, replacing them with `std::unique_ptr` and `std::vector`. . Per [recommendations](https://herbsutter.com/2013/06/05/gotw-91-solution-smart-pointer-parameters/), I use a `std::unique_ptr` to signify the caller (of the `DIISEntry` constructor) loses ownership of the object. ## Checklist; - [x] Quick tests still pass. ## Status; - [x] Ready for review; - [x] Ready for merge **SQUASH**",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2325:381,test,tests,381,https://psicode.org,https://github.com/psi4/psi4/pull/2325,1,['test'],['tests']
Testability,"## Description; This PR gets rid of the `TaskListComputer` base class, condensing it into `OEProp`, the only class that inherited from it. We gained nothing from having that class around. ## Checklist; - [x] Properties tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2531:219,test,tests,219,https://psicode.org,https://github.com/psi4/psi4/pull/2531,1,['test'],['tests']
Testability,"## Description; This PR has tho objectives:. 1. Make MBIS volume ratios callable from both `oeprop(...,'MBIS_VOLUME_RATIOS')` and `set scf_properties ['MBIS_VOLUME_RATIOS']`. So, solve #2299. ; 2. A recent comment suggested that the `free_atom_volume()` function was still being called even though they only requested computation of MBIS charges. This PR also ensures that this doesn't happen anymore. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [X] Solve #2299 ; - [X] Remove calling of free atom functions when volume ratios aren't requested. ## Checklist; - [X] Tests added for any new features; - [X] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [X] Ready for review; - [X] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2370:624,Test,Tests,624,https://psicode.org,https://github.com/psi4/psi4/pull/2370,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This PR implements The Combined Schwarz Approximation Maximum (CSAM) estimate for prescreening two-electron integrals. CSAM was described in this paper by Thompson and Ochsenfeld: https://aip.scitation.org/doi/10.1063/1.4994190. In Psi4, TEIs are screened using the well-known Cauchy-Schwarz Inequality:; `(pq|rs)^2 <= (pq|pq)*(rs|rs)`; This type of screening is effective when the overlap between orbitals p and q (or r and s) is sufficiently small. However, it doesn't take into account the scenario in which the two orbital products pq and rs are individually significant, but very far apart. CSAM factors in this distance dependence. . The following benchmarks show modest improvements in efficiency with negligible loss in accuracy:; ![Screen Shot 2019-05-28 at 1 59 57 PM](https://user-images.githubusercontent.com/16376046/58500885-1c618d00-8151-11e9-82f8-ced6ce967483.png). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Adds CSAM screening to ERISieve ; - [x] Adds python binding for the ERISieve class; - [x] Adds a ERISieve PsiAPI test. ## Questions; - [ ] The `ERISieve` constructor now takes a boolean `do_csam` (which defaults to `false`). What's the best way to hook this up to the user interface?; - [x] The `ERISieve` class contains a partially-finished attempt at implementing a similar type of screening (QQR). Are their plans to finish this? Or implement other integral-related optimizations?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1499:670,benchmark,benchmarks,670,https://psicode.org,https://github.com/psi4/psi4/pull/1499,5,"['Test', 'benchmark', 'test']","['Tests', 'benchmarks', 'test', 'tests']"
Testability,"## Description; This PR implements ```SAD_SCF_TYPE``` options that aren't currently allowed as ```SAD_SCF_TYPE``` options, as well as adds tests to check that the computed SAD guess is exact for closed-shell atoms. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] SAD solution is fully converged for noble gases when ```SAD_SCF_TYPE = SCF_TYPE```. ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1477:139,test,tests,139,https://psicode.org,https://github.com/psi4/psi4/pull/1477,4,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This PR implements a Huckel guess, based on the routine I recently implemented in ERKALE and described in https://pubs.acs.org/doi/10.1021/acs.jctc.8b01089. The guess reproduces an idempotent density matrix, yielding a variational guess energy. It also appears to be an universal improvement over SAD: because the Huckel guess has energetics, it is able to e.g. adapt to different charge and spin states. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Guess works without symmetry; - [x] Guess works in all symmetries. ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1498:637,Test,Tests,637,https://psicode.org,https://github.com/psi4/psi4/pull/1498,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This PR implements a semi-numerical algorithm for computing the exchange (K) matrix as described in [this paper](https://doi.org/10.1016/j.chemphys.2008.10.036) and [this paper](https://doi.org/10.1063/1.3646921) as ""Chain of Spheres"" exchange or COSK. The implementation is added to a new `JK` class, `DFJCOSK`, which combines COSK with a simple direct density-fitted J algorithm. COSK is easily parallelized, completely in-core, and has good scaling--between O(N^1) and O(N^2)--making it ideal for HF/DFT calculations on large systems, particularly calculations for which the `DF` algorithm must store integrals on disk. The low scaling comes at the cost of a large pre-factor, so it shouldn't be used on small systems. In my benchmarking, `DFJCOSK` is almost always faster than `DIRECT` (even with density screening and incremental fock construction). The crossover between `DFJCOSK` and `DF` is dependent on the system, basis, CPU, memory, etc. but I've observed it as early as <3000 basis functions. I've attached a performance comparison of the `DFJCOSK`, `DIRECT`, and `DF` algorithms on a set of linear alkanes in which it's clear that `DFJCOSK` outperforms the other two algorithms for large systems. ![alkanes](https://user-images.githubusercontent.com/16376046/166322946-172d8fee-3ce3-4811-9633-db094219d17e.png). An encouraging fact about these results is that this implementation is far from optimal. The cost of the COSK algorithm is dominated by the evaluation of one-electron integrals on a quadrature grid. Therefore, there are a number of improvements to be made, in order of increasing difficulty:. - Do a better job at screening small integrals before they're computed (like [these](https://aip.scitation.org/doi/pdf/10.1063/1.5048491)); - Use better grids (such as [here](https://aip.scitation.org/doi/full/10.1063/1.5049435)); - Compute individual integrals faster. This could be done by reusing intermediates in the recursion for integrals involving the same she",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2567:744,benchmark,benchmarking,744,https://psicode.org,https://github.com/psi4/psi4/pull/2567,1,['benchmark'],['benchmarking']
Testability,"## Description; This PR implements analytical nuclear gradients for Polarizable Embedding (PE). I've been messing with some integral routines, so now `ao_multipole_potential` and `ao_multipole_potential_gradient`; exist. I think we can also reconcile this and make it consistent (pass all moments and coordinates) throughout... I'm creating this PR as a preliminary draft for now so we can better coordinate. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] PE-SCF gradients; - [ ] some sort of dispersion/repulsion for optimizations (D3, LJ, ...); - [ ] Release and bump `cppe`; - [ ] add tests once new `cppe` is out; - [ ] consistent top-level integral routines. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2039:648,test,tests,648,https://psicode.org,https://github.com/psi4/psi4/pull/2039,4,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This PR implements the Superposition of Atomic Potentials guess that I described last fall in arXiv:1810.11659 and doi:10.1021/acs.jctc.8b01089. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] The SAP guess can be used to start SCF calculations. ## Questions; - [ ] Screening? For yuge systems, one could truncate the calculation of the SAP potential to the practical infinity of the atomic calculation (20 bohr), since the potential is a hard zero outside of it. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1665:550,Test,Tests,550,https://psicode.org,https://github.com/psi4/psi4/pull/1665,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This PR implements the grid pruning scheme of Matthews (https://pubs.acs.org/doi/10.1021/acs.jctc.9b01205), applying a pivoted Cholesky decomposition to the S matrix to remove linear dependencies and drastically reduce the number of grid points. Per @PhillCli's comments on #3157, taking the pseudoinverse of the S matrix can be costly, and this PR fixes that problem! The final rank appears to be _mostly_ invariant to grid size, but only to the molecule/basis set (results in tables below). | System | Radial, Spherical Points | Initial Rank | Final Rank |; | ------------- | ------------- | ------------- | ------------- |; | Water/cc-pVDZ | (25, 50) | 2605 | 280 |; | Water/cc-pVDZ | (50, 86) | 8739 | 280 |; | Water/cc-pVTZ | (25, 50) | 2630 | 1184 |; | Water/cc-pVTZ | (50, 86) | 8774 | 1328 |; | Benzene/cc-pVDZ | (25, 50) | 9831 | 3124 |; | Benzene/cc-pVDZ | (50, 86) | 32588 | 3414 |. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Drastically reduction of the rank of the intermediates in a THC factorization. ## Questions; - [x] The pivoted Cholesky algorithm presented by Matthews requires the upper triangular form. I modified the algorithm in matrix.cc to the upper triangular form because `Matrix::pivoted_cholesky` is not called elsewhere. Is this okay?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3187:1500,Test,Tests,1500,https://psicode.org,https://github.com/psi4/psi4/pull/3187,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; This PR implements the last guess I described last fall: the SAD natural orbitals guess. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Can start calculations from SAD natural orbitals.; - [x] Add missing CUHF tests to scf-guess. ## Questions. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1672:277,test,tests,277,https://psicode.org,https://github.com/psi4/psi4/pull/1672,4,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This PR implements the partial Cholesky orthogonalization procedure I've recently described in https://arxiv.org/abs/1911.10372, which can be used to avoid pathological linear dependencies in the basis set. This is the simple version of the algorithm which just hides the pathological functions; the more sophisticated one is already available in ERKALE but it is limited to fixed geometries. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Partial Cholesky decomposition implemented; - [x] Calculation of basis function extents via `r^2` value implemented; - [x] Basis functions sorted so that steep ones get treated first by the decomposition. ## Questions; - [x] How to handle the sorting of basis functions in the presence of symmetry? AFAIK each SO basis functions is a superposition of identical functions on different atoms; this means that the corresponding symmetry-blocked `r^2` values could just be one of these.; - [x] Although matrix.cc already implements pivoted Cholesky, it's also available in LAPACK as `dpstrf()`. Maybe the implementation should be replaced with a call to LAPACK?; - [ ] Would it be possible to make Psi4 drop the irrelevant shells altogether from the basis set to make calculations more efficient? This would need to be done at every geometry... ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1760:1368,Test,Tests,1368,https://psicode.org,https://github.com/psi4/psi4/pull/1760,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This PR introduces a new `DFTensor` class to DCT. This is a lightweight wrapper over Matrix which I use to get some extra dimension information, as well as to store the DF contraction functions which were previously cluttering DCT's wavefunction object. Accordingly, many objects which were previously a `Matrix` have been specialized to a `DFTensor`. This also allows more careful input validation for the functions of `DFTensor`, but my primary motivation is for **code organization for the sake of a future PR**. Although there's a large LoC change, most of this is just moving code around and the bare minimum changes needed to make the code compile. **Reviewers, the thing to look at is the header files.**. Also of note: `Matrix bQpqA_mo_;` was never actually used and is thus removed. That should be decent memory savings. Do **not** merge until 1.5. It is far too late in the game for PRs of this scope. ## Checklist; - [x] DCT test passing. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2250:952,test,test,952,https://psicode.org,https://github.com/psi4/psi4/pull/2250,1,['test'],['test']
Testability,## Description; This PR introduces an atomic blocking scheme for quadrature grid points. All grid points in a `BlockOPoints` object belong to a singular parent atom.; Part 1 contains just the basic feature to get it our for people depending on it. Optimization for speed is yet to come. ### New options:; - `DFT_BLOCK_SCHEME = ATOMIC` (unique blocks of grid points for each atom); - `DFT_REMOVE_DISTANT_POINTS` (new flag for existing functionality). ### primary C++ feature:; - `grid->atomic_blocks()[N_ATOM][N_BLOCKS]` additionally to `grid->blocks()[N_BLOCKS]` # provides all grid points for an atom; - `block->parent_atom()` # atom the current block belongs to. ### fixes; - collocation size estimate in naive gridblocker was wrong.; - removes unused `index` vector. #### note; - Automated formatting of the files with `clang-format` made unrelated changes. ## Questions; - [ ] The ugly code [here](https://github.com/hokru/psi4/blob/atomic_grid1/psi4/src/psi4/libfock/cubature.cc#L4630-L4641) is because of an issue with the `BlockOPoints` [object](https://github.com/hokru/psi4/blob/atomic_grid1/psi4/src/psi4/libfock/cubature.h#L179). I'd like advice how to handle this better. ## Checklist; - [x] Tests added for any new features. ## Status; - [x] Ready for review; - [x] Ready for merge. ---. ## Usage. Normal loop structure; ```; for (size_t Q = 0; Q < grid_->blocks().size(); Q++) {; size_t parent_atom_ = grid_->blocks()[Q]->parent_atom();; .; .; .; }; ```. Looping over atoms and their blocks. ; ```; # openmp note: for best performance the atom and block loop could possibly; # be collapsed into a singular loop using `collapse(2)`; for (size_t i = 0; i < grids_.size(); i++) { # here size = number of atoms; for (size_t Q = 0; Q < grid_->atomic_blocks()[A].size(); Q++) {. // access a block; std::shared_ptr<BlockOPoints> block = grid_->atomic_blocks()[A][Q];; .; .; .; }; ```,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2336:1204,Test,Tests,1204,https://psicode.org,https://github.com/psi4/psi4/pull/2336,1,['Test'],['Tests']
Testability,"## Description; This PR introduces an option in the call to `Deriv::compute()` so that the user can specify the type of gradient computation. Currently, this class determines which procedure to follow using an internal logic that is not sufficiently flexible to accommodate plugins. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Add deric_calc_type option to `Deriv::compute()`; - [x] Define enum and python interface. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1756:219,log,logic,219,https://psicode.org,https://github.com/psi4/psi4/pull/1756,3,"['log', 'test']","['logic', 'tests']"
Testability,"## Description; This PR is a companion to https://github.com/psi4/psi4/pull/2933. The goal of https://github.com/psi4/psi4/pull/2933 is to completely eliminate the `ERISieve` class, for reasons explained there. However, it turns out that eliminating `ERISieve` requires fiddling with the v2rdm_casscf plugin, as well, since it also uses `ERISieve`. This PR is meant to be a deprecation of the `ERISieve` class that will show up in v1.8 in the meantime, in case `ERISieve` isn't fully removed by then. ## User API & Changelog headlines; - [X] Deprecates the `ERISieve` class. ## Dev notes & details; - [X] Fully deprecates the `ERISieve` class C++-side by tagging it with the deprecated attribute.; - [X] Deprecates the `ERISieve` class Python-side by creating helper functions for the Python-facing `ERISieve` functions that warn about deprecation. ## Questions; - [x] Is `PSI_DEPRECATED` the preferred mechanism by which to perform this deprecation?; - [X] Assuming the answer to the first question is ""yes"", are there any other functions in `ERISieve` that should be tagged? I chose specifically the user-facing functions.; - [x] I _loathe_ having to use a global variable for the Python-side helper functions. But, unbelievably, it is what I considered the best one I could think of. I would be very happy to hear out alternative suggestions.; - [ ] Using the `PSI_API` and `PSI_DEPRECATED` macros together to tag the `ERISieve` class cause the compiler to complain. On further exploration, replacing `PSI_DEPRECATED` with its textual definition seems to work fine. Is this an acceptable solution?. ## Checklist; - [X] Tests added for any new features; - [X] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [X] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2935:1622,Test,Tests,1622,https://psicode.org,https://github.com/psi4/psi4/pull/2935,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; This PR is a follow up of PR #1948 and resolves issue #1830.; It covers the corner case where zero spin block occurs in USAPT0 mp2_term due to freezing the core. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1969:198,Test,Tests,198,https://psicode.org,https://github.com/psi4/psi4/pull/1969,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This PR is a reimplementation of https://github.com/psi4/psi4/pull/2933; but instead of entirely deleting the `ERISieve` class, it makes `ERISieve` inaccessible for use through the following:. - Using `core.ERISieve.build` now throws an `UpgradeHelper` exception when called, as compared to the previous behavior of giving a warning.; - Calling the `ERISieve` constructor C++-side now throws an exception, with the same message as the UpgradeHelper would give. Aside from that, this PR does the same things as https://github.com/psi4/psi4/pull/2933. `ERISieve` is replaced with `TwoBodyAOInt` in all use cases, with adjustments as necessary. Additionally, the new version of v2rdm_casscf is used, which also uses `TwoBodyAOInt` instead of `ERISieve`. ## User API & Changelog headlines; - [X] Calling `core.ERISieve.build` Py-side, or constructing an `ERISieve` object C++-side, now throws an exception. The removed functionalities, specifically `shell_significant`, can be accessed via the construction of a TwoBodyAOInt object. ## Dev notes & details; - [X] The `ERISieve` class in libmints has been made inaccessible, now throwing exceptions when constructed (with an UpgradeHelper Py-side, and a PSIEXCEPTION C++-side).; - [X] Functionalities in `ERISieve` that were not in `TwoBodyAOInt` and were required in the code, were added to `TwoBodyAOInt`.; - [X] The PKJK files have been adjusted as necessary to support the use of `TwoBodyAOInt`. ## TODO; - [X] Remove ERISieve from all other external plugins (currently focusing on v2rdm_casscf). ## Questions; - N/A. ## Checklist; - [X] Tests added for any new features; - [X] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [X] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2974:1603,Test,Tests,1603,https://psicode.org,https://github.com/psi4/psi4/pull/2974,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; This PR is designed to add more tests for libXC in Psi4. ## Todos; - [x] output.ref files need to be generated; - [x] CMakeLists.txt needs to added; - [x] Test names need to be added to psi4/tests/CMakeLists.txt. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/880:48,test,tests,48,https://psicode.org,https://github.com/psi4/psi4/pull/880,3,"['Test', 'test']","['Test', 'tests']"
Testability,"## Description; This PR is designed to enable testing of a wide variety of combinations of `SCF_TYPE`, `SCF_SUBTYPE`, and `SCREENING` keywords available in Psi4. Of the currently-available JK tests, scf5 covers a wide variety of build methods, but only at a single screening type per method (density or csam, depending on the method). Meanwhile, `test_erisieve.py`, after the updates introduced in https://github.com/psi4/psi4/pull/2973, tests a wide variety of screening types, but with limited testing in conjunction with different JK builds (the only tests that don't use the Python interface of `TwoBodyAOInt` directly, use `SCF_TYPE=DIRECT` or `DF` as the JK method for screening comparisons). This leaves a lot of untested JK build+screening combos, which may be potentially broken and uncaught by the CI as a result. As a matter of fact, such cases actually do exist in the code currently (e.g., CompositeJK methods + no screening). This PR adds a new pytest module, `test_comprehensive_jk_screening.py`. It is effectively an expanded version of the scf5 test module, testing one of the scf5 systems (singlet oxygen) with the same basis set, but also including different screening methods and algorithmic subtypes available in Psi4. Screening is assumed to have an insignificant impact on energy within the tolerance used, so all screening types for a given method use the same reference energy. Some combinations of method and screening type throw an exception by design; this is accounted for in the test by testing that such combinations do indeed throw an exception as expected. Other combinations of method and algorithm are broken at the moment and error out; these are simply skipped for now. They are all logged in the same spot, and can and will be addressed in future PRs. ## User API & Changelog headlines; - [X] N/A. ## Dev notes & details; - [X] Adds a new pytest module to Psi4, `test_comprehensive_jk_screening.py` , to test different combinations of JK build algorithms and ERI ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2978:46,test,testing,46,https://psicode.org,https://github.com/psi4/psi4/pull/2978,5,['test'],"['testing', 'tests']"
Testability,## Description; This PR is meant to replace (now closed) PR #513. The overall goal is to build and install Psi4 in a manner that allows it to be included as a dependency in other packages. ## Todos; - [x] Get tests to pass. Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Supports externally built Pybind11; - [x] Required pulling in PR #557 (*i.e.* this PR includes that one); - [x] No more `LD_PRELOAD` required for MKL; - [x] Factored plugin copy/pasted code so that the next item need only be changed in one place; - [x] Plugins now respect `CMAKE_PREFIX_PATH` and do not clobber it; * **User-Facing for Release Notes**; - [x] `find_package(psi4 CONFIG REQUIRED)` works and respects externally built Pybind11. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/563:209,test,tests,209,https://psicode.org,https://github.com/psi4/psi4/pull/563,1,['test'],['tests']
Testability,"## Description; This PR is the _first part_ of migrating EOM variables to the new standard for variable names, introduced in #2462. Among other things, the new standard gets rid of a longstanding grievance of TDC's: you no longer need to mix up all the irreps. This PR is content to migrate energy variable names. Other EOM variables go through `oeprop`, which will be a follow-up PR. A comprehensive test of EOM naming conventions is deferred to Pt. 2. This PR also contains misc. minor EOM cleanup I did while trying to understand the big picture of the code. More cleanup is possible, but you need to give EOM a wavefunction first, which is far outside the scope of this PR. Obligatory pings to @loriab and @lothian. ## Todos; - [x] Improve cc docs; - [x] Rename EOMCC energy variables to new standard ; - [x] Creates new EOM tag for tests . ## Checklist; - [x] All cc tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2475:401,test,test,401,https://psicode.org,https://github.com/psi4/psi4/pull/2475,3,['test'],"['test', 'tests']"
Testability,"## Description; This PR is the first in a series of planned PRs designed to remove density screening from the TwoBodyAOInt object and into the JK object. Having density screening available in TwoBodyAOInt runs the risk of applying density screening to algorithms where density screening doesn't make sense. Thus, it would be a good idea to move the logic of density screening to where it is more correctly applied, i.e., the JK object. This PR solves two issues simultaneously:. 1. The primary purpose of this PR is to change the test_erisieve.py tests to work with the planned future density screening refactor. One issue that moving density screening from TwoBodyAOInt to JK currently brings up, is that it causes the tests on density screening within the pytest test_erisieve.py to fail. These failures occur because test_erisieve.py performs its screening tests directly using an ERI object generated by IntegralFactory. With density screening being removed from the TwoBodyAOInt object, this method of density screening testing can no longer be done. The current PR is designed to address this issue for when the density screening refactor happens. The aforementioned issue is addressed by implementing a new variable to the HF wavefunction, computed_shells_per_iter_, which keeps track of the number of shell quartets computed per SCF iteration. The computed_shells_per_iter_ variable is accessible to the user via Python, and thus can be used to conduct screening tests. In this way, density screening tests can be performed without the need for an ERI object. 2. As a bonus from the changes introduced by this PR, the DirectJK algorithm no longer has a need to print computed shell quartet counts to bench.dat. Bench.dat is used exclusively by the DirectJK object to dump the number of shell quartets computed per SCF iteration somewhere. That data is now accessible to the user in a cleaner fashion - it can be accessed through Python, in a manipulatable format. ## Notes; 1. Note that the ch",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2547:349,log,logic,349,https://psicode.org,https://github.com/psi4/psi4/pull/2547,5,"['log', 'test']","['logic', 'testing', 'tests']"
Testability,"## Description; This PR is the second in a series of planned PRs designed to remove density screening from the TwoBodyAOInt object and into the JK object, with PR #2547 being the first such PR. Having density screening available in TwoBodyAOInt runs the risk of applying density screening to algorithms where density screening doesn't make sense. Thus, it would be a good idea to move the logic of density screening to where it is more correctly applied, i.e., the JK object. The primary purposes of this PR are twofold:; 1. First, this PR introduce the shell_significant() framework to the JK class. The shell_significant() framework starts with a shell_significant() virtual function that exists in the base JK class. The shell_significant() function can then be redefined specifically for different JK derived classes as needed. The existence of shell_significant() provides a unified framework for performing screening for any JK method, and it also provides the method by which density screening can be added directly to the relevant JK classes.; 2. Second, this PR uses the shell_significant() framework to reimplement screening for certain JK methods. Most significantly, as implied in the first point, the biggest change in this regard was the removal of shell_significant_density() from TwoBodyAOInt into the domain and its reimplementation into the DirectJK shell_significant() definition. With this change, density screening is now the domain of individual JK classes rather than the TwoBodyAOInt class, which was one of the primary goals of this overall refactor PR set in the first place. Additionally, another method that was subject to slight changes from the shell_significant() framework was the Yoshimine PKJK algorithm, in which its test for shell significance was implemented using the shell_significant() framework. ## Notes; I wanted to outline what the next steps were for this chain of PRs, since this one accomplishes one of the main goals of the refactor in the first place:;",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2695:389,log,logic,389,https://psicode.org,https://github.com/psi4/psi4/pull/2695,1,['log'],['logic']
Testability,"## Description; This PR makes changes so that `Psi` can do DIIS on an `ambit.BlockedTensor`, as required by the `forte` plugin. This PR will not work until [this ambit PR](https://github.com/jturney/ambit/pull/53) is merged, but passes locally. The test suite tells us little about this one, sadly. @loriab, I leave it up to you whether this warrants an update to the version of ambit that Psi takes. @fevangelista @lcyyork. ## Status; - [x] Ready for review; - [ ] Leave merging to me",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2505:249,test,test,249,https://psicode.org,https://github.com/psi4/psi4/pull/2505,1,['test'],['test']
Testability,"## Description; This PR makes small changes to the `PsiException` class, specifically regarding the printout of the function call stack upon throwing. Now, the number of functions included in the printed call stack during exception printout is tied to a singular variable, instead of being scattered about in multiple places. The goal is to allow easier control of the function call stack size during printout for debugging purposes, if desired. . There are a couple small cleanups here and there as well. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [X] N/A. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [X] All separate instances of function call stack printout sizes have been replaced with a single variable definition.; - [X] The `Stack` variable now uses a `std::array` instead of a `std::vector`.; - [X] Uses of `&Stack[0]` have been replaced with `Stack.data()`. ## Questions; - [X] N/A. ## Checklist; - [X] Tests added for any new features; - [X] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [X] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3179:1231,Test,Tests,1231,https://psicode.org,https://github.com/psi4/psi4/pull/3179,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This PR makes two small improvements to the `JK` class and SCF code. These improvements simplify the addition of new JK algorithms to Psi4, particularly an upcoming semi-numerical exchange. The first change is transferring the responsibility of zeroing out the `J`, `K`, and `wK` matrices from the parent `JK` class to each derived `JK` class. This makes it easier to implement JK algorithms which build the fock matrix incrementally. (i.e. use the difference in density between SCF iterations to compute differences in J/K). With this change, much of the incremental fock code in the `DirectJK` class can be simplified. The second change is the addition of an `early_screening_` member variable to the `JK`. The idea is that some future JK algorithms will increase performance by using looser screening procedures/thresholds in early SCF iterations. Screening is then tightened as the SCF approaches convergence. This logic was added to the SCF driver. The `early_screening_` variable defaults to false for all existing JK classes, so there is currently. no change in behavior. ## Todos; - [x] Derived `JK` classes are responsible for zeroing their matrices; - [x] JK screening is SCF iteration dependent. ## Questions. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2529:935,log,logic,935,https://psicode.org,https://github.com/psi4/psi4/pull/2529,4,"['Test', 'log', 'test']","['Tests', 'logic', 'tests']"
Testability,## Description; This PR migrates 8 of the `cc` tests from using `autotest` to using standard `compare_values`. The 13 `cc` tests that still use `autotest` are all more delicate (usually because they involve properties) and are deferred to another PR. This PR handles the easy cases. This is PR 3 in an ongoing series to make `ccdensity` compatible with the standard `Matrix` and `Wavefunction` machinery used elsewhere in Psi. Review requested from Lori for all things testing. Obligatory @lothian ping. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2440:47,test,tests,47,https://psicode.org,https://github.com/psi4/psi4/pull/2440,5,['test'],"['testing', 'tests']"
Testability,"## Description; This PR modifies the SAD guess so that it first runs a plain Fock build and diagonalizes the obtained Fock matrix. This allows the SAD guess to also work for ROHF, as well as allowing one to manually set the orbital occupations in combination with the SAD guess. Test calculation on the quintet state of Cr(N2)6 in aug-pcseg-1:; ```; molecule {; 2 5; Cr 0.0000925386 0.0000682032 0.0019012828; N 0.0004102713 2.3625659492 0.0026269619; N 0.0005967051 3.4672101357 0.0029548744; N 2.3620320503 -0.0004101212 0.0009507667; N 3.4666734940 -0.0002636830 0.0034835308; N -0.0003928082 -2.3624420331 0.0002298447; N -0.0001812896 -3.4670841683 0.0023676850; N -2.3618731053 0.0004033492 0.0009468195; N -3.4665147528 0.0006033882 0.0034481887; N 0.0000117173 -0.0007732394 2.1429780137; N -0.0000350947 -0.0013203851 3.2475238798; N 0.0002480331 0.0009562329 -2.1392146821; N 0.0003478216 0.0015074164 -3.2437570404; }. set reference rohf; set basis aug-pcseg-1; set guess core; set scf_type direct; set df_scf_guess false; energy('scf'); ```. Results:. | Guess | num iter | final energy |; | -- | -- | -- |; | GWH | 38 | -1696.14766117804697 |; | CORE | 24 | -1696.14766109152993 |; | SAD, atomic occupations | 33 | -1696.14766127808366 |; | SAD, fractional occupations | 25 | -1696.14766099831081 |; | SAD, fractional spin-restricted occupations | 22 | -1696.14766111108497 |. Due to the high symmetry of the test case, CORE is surprisingly efficient. SAD still beats the current default, GWH, by a large margin. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] SAD guess working for ROHF; - [x] SAD guess working with manually set occupations. ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1456:279,Test,Test,279,https://psicode.org,https://github.com/psi4/psi4/pull/1456,5,"['Test', 'test']","['Test', 'Tests', 'test', 'tests']"
Testability,"## Description; This PR modifies the SAD guess so that it first runs a plain Fock build and diagonalizes the obtained Fock matrix. This allows the SAD guess to also work for ROHF, as well as allowing one to manually set the orbital occupations in combination with the SAD guess. Test calculation on the quintet state of Cr(N2)6 in aug-pcseg-1:; ```; molecule {; 2 5; Cr 0.0000925386 0.0000682032 0.0019012828; N 0.0004102713 2.3625659492 0.0026269619; N 0.0005967051 3.4672101357 0.0029548744; N 2.3620320503 -0.0004101212 0.0009507667; N 3.4666734940 -0.0002636830 0.0034835308; N -0.0003928082 -2.3624420331 0.0002298447; N -0.0001812896 -3.4670841683 0.0023676850; N -2.3618731053 0.0004033492 0.0009468195; N -3.4665147528 0.0006033882 0.0034481887; N 0.0000117173 -0.0007732394 2.1429780137; N -0.0000350947 -0.0013203851 3.2475238798; N 0.0002480331 0.0009562329 -2.1392146821; N 0.0003478216 0.0015074164 -3.2437570404; }. set reference rohf; set basis aug-pcseg-1; set guess core; set scf_type direct; set df_scf_guess false; energy('scf'); ```; * ```CORE``` 24 iterations, energy -1696.14766109152993; * ```SAD``` 29 iterations, energy -1696.14766127128701; * ```GWH``` 38 iterations, energy -1696.14766117804697. Due to the high symmetry of the test case, ```CORE``` is surprisingly efficient. ```SAD``` still beats the current default, ```GWH```, by a large margin. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] SAD guess working for ROHF; - [x] SAD guess working with manually set occupations; - [x] Default guess switched to SAD. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1429:279,Test,Test,279,https://psicode.org,https://github.com/psi4/psi4/pull/1429,5,"['Test', 'test']","['Test', 'Tests', 'test', 'tests']"
Testability,"## Description; This PR modifies the partial Cholesky approach by determining the initial pivot by an approach motivated by the Gershgorin circle theorem. By ordering the basis functions in terms of increasing values of `\sum_j |S_{ij}|`, the Cholesky procedure is initialized with functions that are as close as possible to eigenfunctions of S. Although the original scheme works well, this one is conceptually more attractive as it needs no external input. Moreover, this one should be more generally applicable, e.g. in the case of computing strongly repulsive potentials where some tight functions might have large overlap. The two approaches appear to reproduce similar results, so the change should not break anything. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Switch to using Gershgorin theorem in partial Cholesky code.; - [x] Remove hacks that were needed for the old implementation. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1824:1000,Test,Tests,1000,https://psicode.org,https://github.com/psi4/psi4/pull/1824,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This PR moves `fnocc`'s pair energies to the same standard used by `cc`: report MP2 and CC, separate by spin, and construct spin-adapted pair energies as well. The diff is mostly changes in the reference file, so the LoC count is inflated. ## Todos; - [x] Standardize `cc` pair energies. ## Checklist; - [x] `fnocc` tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2568:332,test,tests,332,https://psicode.org,https://github.com/psi4/psi4/pull/2568,1,['test'],['tests']
Testability,"## Description; This PR moves the Polarizable Embedding (PE) tests using CPPE py-side in `test_cppe.py`.; The tests can now be run independently of the configure step (`ENABLE_cppe`) due to runtime detection of CPPE.; As such, the CI pipeline will run the PE tests from now on 😄 . ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Move tests; - [x] Nuke old (cmake) tests. ## Questions; - [x] Question1. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2140:61,test,tests,61,https://psicode.org,https://github.com/psi4/psi4/pull/2140,8,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This PR moves the printing of the SCF pre-iteration header from `scf_iterate` (where we had to check the number of iterations to know if we needed to print) to the SCF initializer (where no checks are needed). This can and should wait until 1.5. This is part of a larger project to remove overloading of the `iterations_` variable in HF, needed to get MOM properly working. ## Questions; - [ ] Do we need to regenerate samples for this? The printing should be exactly the same except in pathological corner cases involving SOSCF instabilities at less than two iterations. ## Checklist; - [x] quick tests pass. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2247:614,test,tests,614,https://psicode.org,https://github.com/psi4/psi4/pull/2247,1,['test'],['tests']
Testability,"## Description; This PR perfects the `fcidump` interface by adding a field that stores the point group symmetry (`PNTGRP`, just to keep it in the FORTRAN spirit of ""Thou shall use no unnecessary vowels in variable names""). For example:; ```; ORBSYM=1,1,1,1,4,4,4,3,3,3,2,2,2,; ISYM=1,; PNTGRP=D2H,; ```; Why is this change necessary? In essence because with the current information it is impossible to restart a computation that uses symmetry. Without the point group information, one cannot determine the psi4 irrep labels of orbitals from the standard information contained in the FCIDUMP file (see issue #1431) because when the file is written the irreps are resorted in a way that depends on the point group. One potential issue: codes that consume FCIDUMP files produced by psi4 could encounter problems parsing the line that starts with `PNTGRP`. So I made this extra line optional via an argument passed to the `fcidump()` python function. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Add point group information to fcidump files (enabled via bool argument); - [x] Fix a bug in the function that reads fcidump files when no orbital energies are present. ## Checklist; - [x] Updated `fcidump` test. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1942:1252,test,test,1252,https://psicode.org,https://github.com/psi4/psi4/pull/1942,2,['test'],['test']
Testability,"## Description; This PR provides access to T1/T2 python side for other packages using psi4 as a library. Amplitudes will be available for symmetry C1 calculations only as the numpy shape on the T2 matrices can't be set correctly (This is similar to how mintshelper does not provide bindings for SO basis ERIs). All spin combinations of T1/T2 wil be loaded into memory, so you do not want to use this method when there is not enough memory to hold these quantities in core. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] UHF ; - [x] RHF; - [x] ROHF; - [x] Check that nirrep > 1 will raise meaningful errors. ## Checklist; - [x] UHF Test; - [x] RHF Test; - [x] ROHF Test. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1344:682,Test,Test,682,https://psicode.org,https://github.com/psi4/psi4/pull/1344,3,['Test'],['Test']
Testability,## Description; This PR refactors EFP routines such that they use the mints functions I implemented for PE a while ago.; Less code and a significant speed-up for the electric field integral evaluations. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Move `efp.py` to `solvent` folder; - [x] Refactor functions. ## Questions; - [x] Question1. ## Checklist; - [x] Tests added for any new features (already present); - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2111:422,Test,Tests,422,https://psicode.org,https://github.com/psi4/psi4/pull/2111,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This PR refactors `ThreeCenterOverlapInt` using Libint2. Even though one cannot compute these integrals directly, it's possible to obtain them through the delta function: `<phi(r_1) phi(r_1)| delta(r_1 - r_2) | phi(r_2) 1>`. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] 3-center overlap integrals with L2. ## Checklist; - [x] Tests added for any new features (SAPT-DFT still working, Python API via `MintsHelper` tested locally 👍); - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2489:404,Test,Tests,404,https://psicode.org,https://github.com/psi4/psi4/pull/2489,4,"['Test', 'test']","['Tests', 'tested', 'tests']"
Testability,"## Description; This PR refactors angular momentum integrals (`AngularMomentumInt`) using the McMurchie-Davidson scheme. It is the first PR of a series to replace most of the existing OS86 code with M-D (#2414). I've chosen the angular momentum integrals because they are really simple and only require the E matrix (Hermite-to-Cartesian conversion factors). ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] `AngularMomentumInt` w/ M-D scheme. ## Questions; - [x] Is it worth to pre-allocate the E-matrix? This would require some boilerplate code, which could be worth packing into a small class that all future M-D integrals will inherit from?. ## Checklist; - [x] Tests added for any new features (consistency check against Psi4 v1.5); - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2483:724,Test,Tests,724,https://psicode.org,https://github.com/psi4/psi4/pull/2483,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This PR refactors the existing `PseudospectralInts` (untested, unused, but maybe needed at some point, see #2414); with some refactoring: The ""old"" `PseudospectralInts` did compute `<p| 1/R |q>` *or* `<p| erf(omega*R)/R |q>` with `R = |r -r_c|` for some given point/origin `r_c`. . - The class `PseudospectralInts` is removed. To compute the ""normal"" Coulomb potential at a given origin, one can use either `MultipolePotentialInt` (with `max_k=0`) *OR* `ElectrostaticInt`.; - To compute the erf-attenuated Coulomb potential, I created a new class named `PotentialErfInt` to better reflect the actual ""property integral"" being computed. For testing purposes, I also added the erfc-attenuated Coulomb potential (`PotentialErfComplementInt`), maybe they're also useful at some point. Both use L2 under the hood.; - The point `r_c` is canonically set with `set_origin`.; - I've added the new integrals to `MintsHelper` and the Python API.; - Tests are added. (`erf(infinity*R)/R = 1/R`, `erfc(0*R)/R = 1/R`, and `1/R - erf(R)/R - erfc(R)/R = 0`). This is a preparation to get rid of most of the remaining OS86 code as discussed in #2414.; Ping @loriab @zachglick @andysim . ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2473:656,test,testing,656,https://psicode.org,https://github.com/psi4/psi4/pull/2473,5,"['Test', 'test']","['Tests', 'testing', 'tests']"
Testability,"## Description; This PR removes Psi's internal ADC module, so that all ADC calculations are run through `adcc` from now on.; Closes #1033. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is detined for the release notes. May be empty. -->; - [x] remove built-in ADC module (does not remove any ADC features), closing #1033. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] remove built-in ADC code; - [x] update `proc.py`; - [x] update docs. ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2737:749,Test,Tests,749,https://psicode.org,https://github.com/psi4/psi4/pull/2737,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; This PR removes duplicated code in Psi4 so that orthogonalization of the basis is handled in one place. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] No code duplication; - [x] Everything works as before. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1759:324,Test,Tests,324,https://psicode.org,https://github.com/psi4/psi4/pull/1759,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This PR removes several `new`, `delete`, `block_matrix`, and `free_block` calls in `cubeprop`. I was hoping to eliminate all such calls in order to use `cubeprop` as a test case to study memory management in Psi, but I can't finish the job without refactoring `BlockOPoints`, which is far outside the scope of the PR. ## Checklist; - [x] `cubeprop` tests still pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2345:184,test,test,184,https://psicode.org,https://github.com/psi4/psi4/pull/2345,2,['test'],"['test', 'tests']"
Testability,"## Description; This PR removes some convergence checks in the `dct` module that are redundant (when formulated correctly) and currently not implemented correctly. In the current `dct` code, my threaded computations with near linear dependencies were taking a variable number of iterations to converge, due to the condition `update_scf_density_RHF() < orbitals_threshold_` being false. That check is _intended_ to enforce convergence of the orbitals, which change iteration-to-iteration. `update_SCF_density_RHF` returns a measure of how much the reference density changed but does not treat it with an orthogonalizer, so in the near linearly-dependent case, numerical noise leads to the computation proceeding even after all other convergence metrics are flat. Given the choice between fixing the check or removing it, this PR removes it.; * In the case where orbitals are optimized to _satisfy a commutator equation_, all of our orbital convergence metrics are motivated by SCF. We already have the SCF check for small orbital residual elsewhere in the code. We don't check that the absolute change in the density is small in the SCF case, so we shouldn't check it here, either.; * In the case where orbitals are optimized to _minimize the energy_, there is no theoretical justification for this check. We have existing checks that the residual of the orbital gradient is small. ## Todos; - [x] Removes an unnecessary, buggy `dct` convergence metric. ## Checklist; - [x] `dct` tests still pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2381:1479,test,tests,1479,https://psicode.org,https://github.com/psi4/psi4/pull/2381,1,['test'],['tests']
Testability,"## Description; This PR removes some unused code from the `dct` module. Most importantly for me, this gets rid of a difficult-to-follow function and removes an IWL call. I count all three of those as victories for code cleanup. Expect another PR to replace some IWL in `dct` with `libdpd`, but that depends on the timing tests. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Removes unused code. ## Checklist; - [x] DCT tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2168:321,test,tests,321,https://psicode.org,https://github.com/psi4/psi4/pull/2168,2,['test'],['tests']
Testability,## Description; This PR removes the `dpd.gbl` file from `libdpd`. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1254:86,Test,Tests,86,https://psicode.org,https://github.com/psi4/psi4/pull/1254,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This PR removes the files `PSIF_CHKPT` and `PSIF_OLD_CHKPT`, as well as references to them elsewhere in the docs and the code. These were unused and caused some confusion in a [recent forum topic](http://forum.psicode.org/t/cannot-retain-scratch-file/2181/4). ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Remove `PSIF_CHKPT` and `PSIF_OLD_CHKPT`. ## Checklist; - [x] [`ctest` passes](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2186:542,test,tests,542,https://psicode.org,https://github.com/psi4/psi4/pull/2186,1,['test'],['tests']
Testability,"## Description; This PR removes ~300 lines worth of duplicate code in `dct`'s density-fitting, as well as some class variables that had no business being class variables. This is in preparation for an upcoming PR to fix a longstanding bug in the density-fitted code. ## Todos; - [x] Code cleaned. ## Checklist; - [x] DCT tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2078:321,test,tests,321,https://psicode.org,https://github.com/psi4/psi4/pull/2078,1,['test'],['tests']
Testability,## Description; This PR replaces `new`/`delete` in `lib3index/fittingmetric.cc` with `std::vector` per task in #2412 . ## Checklist; - [x] Quick tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2417:145,test,tests,145,https://psicode.org,https://github.com/psi4/psi4/pull/2417,1,['test'],['tests']
Testability,"## Description; This PR replaces several `int *` types in `ccdensity` with `Dimension` or `std::vector<int>` objects as appropriate. In addition to eliminating manual memory management and making the code more readable, easy access to `Dimension` objects will allow for a subsequent PR to construct `Matrix` objects directly, replacing the current `block_matrix` representation of objects. This is PR 2 in an ongoing series to make `ccdensity` compatible with the standard `Matrix` and `Wavefunction` machinery used elsewhere in Psi. Obligatory @lothian notification. ## Checklist; - [x] `cc` tests still pass. ## Status; - [x] Ready for review; - [ ] Ready for merge - to be explicit, Lori advised me **not** to merge until I had manually checked the `cc` tests, since those tests run by perl script",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2438:593,test,tests,593,https://psicode.org,https://github.com/psi4/psi4/pull/2438,3,['test'],['tests']
Testability,"## Description; This PR reverts the behaviour of standard `bsse_type='cp'` calculations to calculate all fragments (monomers) in the full (dimer) basis only. The PR also fixes printing interaction energies disguised as total energies in those tables. When a calculation is requested with `bsse_type='cp', return_total_data=True`, an `bsse_type=['cp', 'nocp']` is automatically performed and the total energies are calculated & returned. With `bsse_type=['cp','nocp']` (and `return_total_data` unspecified or `False`), the total energies are calculated, but the interaction energies are returned. The PR fixes #1691 . ## Checklist; - [x] Tests updated; - [x] `ctest -L nbody` passes. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2221:637,Test,Tests,637,https://psicode.org,https://github.com/psi4/psi4/pull/2221,1,['Test'],['Tests']
Testability,## Description; This PR solves #1666. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] In-core algorithm used in MemDFJK if there's enough memory; - [x] Printout matches what the algorithm is doing. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1667:299,Test,Tests,299,https://psicode.org,https://github.com/psi4/psi4/pull/1667,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This PR threads the calculation of one-electron potential integrals from external point charges. It replaces a call to `OneBodyAOInt.compute()`, which is not threaded and computes the full N-by-N matrix, with a new threaded `for` loop over pairs of shells so that only the lower triangle of the symmetric matrix is calculated. Here's a quick benchmark of times for a SAPT0/jun-cc-pVDZ calculation of a nucleic acid base pair (144 electrons, 425 basis functions, 1879 auxiliary basis functions) with 7393 external point charges on an Intel Xeon E5-2695v4 with 18 cores in each of 2 sockets:. Cores | Old code, no charges | Old code, with charges | New code, no charges | New code, with charges; ----- | ------- | ------- | ------- | -------; 1 | 1.00 | 1.00 | 1.00 | 1.00; 2 | 1.65 | 1.08 | 1.71 | 1.68; 4 | 2.43 | 1.14 | 2.64 | 2.61; 8 | 3.25 | 1.20 | 3.08 | 4.01; 16 | 5.29 | 1.24 | 2.61 | 2.90; 32 | 5.36 | 1.23 | 4.24 | 7.04. Each column shows the speedup relative to the calculation with 1 core (i.e. t_1 / t_c). With charges, the performance of the old code scales poorly with additional cores; the performance of the new code matches or exceeds the scaling of the calculation without charges. ## Questions; - [x] The resulting matrix `V_charge` is always symmetric in my tests. Are there any cases where this would not be true?; - [ ] I opted to replace `force_cartesian_ ? shell(i).ncartesian() : shell(i).nfunction()` from `OneBodyAOInt.compute()` with `shell(i).nfunction()`. Are there any cases where `force_cartesian_` needs to be checked for this potential?. ## Checklist; - [x] Passes smoke tests and `fsapt-ext` test added in #1608. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1946:358,benchmark,benchmark,358,https://psicode.org,https://github.com/psi4/psi4/pull/1946,4,"['benchmark', 'test']","['benchmark', 'test', 'tests']"
Testability,"## Description; This PR updates options for CPPE (new release is out, including linear-scaling FMM); and adds PE(ECP) repulsive potentials to avoid electron spill-out (https://doi.org/10.1021/acs.jctc.9b01162). ~**Still work in progress....**~. Thanks @loriab for helping with the basis set customization!. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] options for FMM; - [x] bump CPPE version; - [x] option to enable PE(ECP); - [x] add basis set file for ECPs; - [x] add tests for PE(ECP). ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2025:533,test,tests,533,https://psicode.org,https://github.com/psi4/psi4/pull/2025,4,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This PR updates the MBIS documentation to match the state of the code. Missing logic to reshape the mbis multipoles was also added, which previous tests don't check for, but is necessary when running psi4's mbis through qcengine. ## Todos; - [x] Fixed docs; - [x] Fixed / cleaned up the handling of multipole matrix shapes. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2035:95,log,logic,95,https://psicode.org,https://github.com/psi4/psi4/pull/2035,2,"['log', 'test']","['logic', 'tests']"
Testability,## Description; This PR updates the MDI integration to support version 1.2 of the MDI Library. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2160:115,Test,Tests,115,https://psicode.org,https://github.com/psi4/psi4/pull/2160,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This PR updates the `cppe` interface code (including option handling) to the newest version `v0.2.1` (major performance improvement 🚀). . ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Updated interface, options; - [x] Add options for Thole damping. ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1922:368,Test,Tests,368,https://psicode.org,https://github.com/psi4/psi4/pull/1922,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This PR updates the documentation to reflect two aspects of the JK code:. 1. It mentions the `SCF_TYPE` naming option added as per https://github.com/psi4/psi4/pull/3001. ; 2. It provides a warning regarding the current defaults for the COSX grids. From my testing, these grids are very crude in practical use, and cannot be expected to be accurate if high (e.g., chemical) accuracy is desired. The documentation is updated to reflect this. ## User API & Changelog headlines; - [X] N/A. ## Dev notes & details; - [X] Updates documentation regarding `SCF_TYPE` selection and COSX grid issues. ## Questions; - [X] N/A. ## TODO; - [X] Recommend tighter grid settings in contrast to the defaults. ## Checklist; - [X] Tests added for any new features; - [X] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3079:273,test,testing,273,https://psicode.org,https://github.com/psi4/psi4/pull/3079,4,"['Test', 'test']","['Tests', 'testing', 'tests']"
Testability,"## Description; This PR uses `axpy` and `memcpy` throughout `libdiis`, for the sake of fairer comparisons when I'm doing speed profiling. ## Checklist; - [x] quick tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge **SQUASH**",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2355:164,test,tests,164,https://psicode.org,https://github.com/psi4/psi4/pull/2355,1,['test'],['tests']
Testability,"## Description; This PR was motivated by a comment by @andyj10224 in PR https://github.com/psi4/psi4/pull/3150, pointing out that implementing method-specific setters/getters in `SplitJK` could more elegantly and sensibly be performed via downcasting. While the comment in that PR addressed knobs specific to `snLinK`, it is also applicable to other methods within the CompositeJK framework. This PR fixes that, replacing all instances of method-specific setters/getters in the base `SplitJK` class with downcasting to call the needed function at the derived-class level. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [X] Renames `COSK::set_COSX_grid` and `COSK::get_COSX_grid` functions to `COSK::set_grid` and `COSK::get_grid`, respectively.; - [X] Removes `SplitJK::set_COSX_grid` and `SplitJK::get_COSX_grid` functions. . ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [X] Removes `SplitJK::set_COSX_grid` and `SplitJK::get_COSX_grid` functions, localizing their presence to the `COSK` class.; - [X] Replaces utilizations of the above with usage of downcasting in the `CompositeJK::set_COSX_grid` and `CompositeJK::get_COSX_grid` functions. ## Questions; - [X] N/A. ## Checklist; - [X] Tests added for any new features; - [X] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [X] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3183:1502,Test,Tests,1502,https://psicode.org,https://github.com/psi4/psi4/pull/3183,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This PR will expose the `PCM` object in Psi4 out to Python, similarly to #861, but will bring it to fruition within the Python-side SCF iteration scheme. The `PCM` object wraps the PCMSolver library and offers one method: `compute_PCM_terms` to calculate the polarization energy **and** the Fock matrix contributions due to the continuum. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Clean-up the `PCM` object and corresponding sources:; * Forward-declare as much stuff as possible instaed on `include`-ing; * Remove raw pointers in favor of `std::vector`, `Vector` or `std::shared_ptr`; * Use a [scoped `enum`](http://en.cppreference.com/w/cpp/language/enum) instead of an [unscoped `enum`](http://en.cppreference.com/w/cpp/language/enum); - [x] Moved `HF::print_energies()` Py-side; - [x] Mirror changes introduced in #896 ; - [x] Add tests for density-fitted SCFs (thanks @CDSherrill for pointing this out); * **User-Facing for Release Notes**; - [x] Exposing the `PCM` object to Python.; - [x] Restoring PCM functionality with Py-side iterations.; - [ ] Document behavior for gradients (see question). ## Questions; - @andysim and/or @lothian, the file [psi4/libmints/integral.h](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/integral.h#L487) has a comment `/// Want to change the name of this after the PCM dust settles`. Do you remember what was the intention there?; - The electrostatic potential and apparent surface charge vectors are now dimensioned using a `Dimension` object that keeps track of how many cavity points per irrep there are. This is one step to get PCM fully functional with point group symmetry. It seems to me the integrals are always calculated using C1. How can I get them to be calculated with symmetry?; - As (probably not very clearly) noted in the manual, **analytical gradients including PCM are NOT available**. Should there be a stop in the code when such a re",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/878:923,test,tests,923,https://psicode.org,https://github.com/psi4/psi4/pull/878,1,['test'],['tests']
Testability,"## Description; This PR's purpose is to add the Polarizable Embedding (PE) model to Psi4. In the [PE](https://pubs.acs.org/doi/10.1021/ct1003803) model, the environment is modeled by a multi-center multipole expansion with dipole-dipole polarizabilities placed at the expansion sites (similar to EFP). A tutorial on PE in general can be found [here](https://onlinelibrary.wiley.com/doi/full/10.1002/qua.25717). I added the PE model through my [CPPE](https://github.com/maxscheurer/cppe) library on the Python level. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Ground-state (HF and DFT) SCF calculations with PE; ~~- [ ] Perturbative state-specific (ptSS) corrections for EOM-CC calculations~~ can be done in user code on the Python layer; - [x] rebase once #1657 is merged; - [x] include `cppe` on the Python layer; - [x] remove C++ code; - [x] cleanup CMake; - [x] pin a released CPPE version; - [x] bump pybind to v2.3.0; - [x] simple documentation. ## Questions; - [x] The tests need a _potential_ input file (`*.pot`), currently residing in the `tests/cppe/scf-hf` folder. The path specification I have to put in the input file is currently a bit weird because the tests are not run from inside the test directory. Is there any nice solution to this issue?. ## Checklist; - [x] Tests added for any new features (SCF); - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1401:1030,test,tests,1030,https://psicode.org,https://github.com/psi4/psi4/pull/1401,7,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,"## Description; This _will eventually_ conclude the standardizing of excited state variable names across all of Psi and the docs. Right now, this just standardizes TD-DFT psivars for final comments. This is a short-and-sweet spec of the new standard that I'm putting up for comments. (Largely from @loriab). ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Excited state psivar final cleanup. ## Checklist; - [x] TDDFT tests pass; - [x] ADC tests pass; - [x] EOM tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2569:477,test,tests,477,https://psicode.org,https://github.com/psi4/psi4/pull/2569,3,['test'],['tests']
Testability,## Description; This addresses at least one of the problems (see details below) associated with #2279. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Fix #2279. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2283:241,Test,Tests,241,https://psicode.org,https://github.com/psi4/psi4/pull/2283,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This adds further output to TDSCF and TDDFT calculations, including electric TDM vectors and the excitations and deexcitations that contribute to each excited state. Currently, excitations / deexcitations are only printed for C1 symmetry. A new option TDSCF_COEFF_CUTOFF (default = 0.1) has been added that sets the cutoff for printing excitation / deexcitation coefficients. ## Todos; - [ ] Add support for symmetry; - [ ] Add further output (e.g. other transition dipoles, etc. I've only added what I'm usually after from these calculations). ## Questions; - [ ] How to construct excitations / deexcitations when symmetry is used?; - [ ] Does documentation for new options get built automatically or do I need to add something somewhere?. ## Checklist; - [ ] Further comparisons could be added to the tdscf tests, e.g. TDM vectors; - [ ] All tdscf-? tests pass (although the output will be longer than the reference output; other tests still running - slow test machine - but should run as expected) . ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2156:825,test,tests,825,https://psicode.org,https://github.com/psi4/psi4/pull/2156,4,['test'],"['test', 'tests']"
Testability,"## Description; This adds new DF basis files for dzvp. dgauss-dzvp-autoaux was generated using the autoaux program (courtesy Susi Lehtola). This is a short-term solution for the current problem that there is no working DF basis for dzvp, as it is an all-electron basis for elements going beyond Kr. dgauss-dzvp-mix contains a mixture of the previous default, def2-qzvpp-jkfit for H-Br, and dgauss-dzvp-autoaux for heavier elements. The purpose of this DF basis is to avoid the performance decrease (without affecting accuracy) that comes with using dgauss-dzvp-autoaux for all elements. `basislistother.py` has also been updated to use dgauss-dzvp-mix for jkfit and dgauss-dzvp-autoaux for rifit. ## Status; - [x] Ready for review; - [x] Ready for merge. ## Benchmark of basis sets and DF basis sets for conformational energies; [combined-results.pdf](https://github.com/psi4/psi4/files/6167929/combined-results.pdf)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2134:758,Benchmark,Benchmark,758,https://psicode.org,https://github.com/psi4/psi4/pull/2134,1,['Benchmark'],['Benchmark']
Testability,"## Description; This autobuilds the docs and deploys them to a netlify site, https://psi4manual.netlify.app/index.html. It also starts correcting all the format and bad link warnings. Started with ~300 and down to 15, so ready to start reviewing. Once clean, we can turn on warnings->errors and avert future beaks. This hasn't started looking at docs content, only docs format errors. No linkchecker run yet either. GHA-wise, this is for every master commit. There'll be other GHA to run similarly on PRs so that ppl can preview docs changes or note when changes broke docs. But that'll need different permissions. This seems a good place to start. I don't think this needs minute review -- save your energies for real code. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Any rst files added that I shouldn't have?. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge SQUASH",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2144:942,Test,Tests,942,https://psicode.org,https://github.com/psi4/psi4/pull/2144,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; This branch is just a sandbox for me to query / update the Windows Azure config. ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2018:38,sandbox,sandbox,38,https://psicode.org,https://github.com/psi4/psi4/pull/2018,1,['sandbox'],['sandbox']
Testability,"## Description; This change allows F_DGEMV to be called (when using plugins, for example) without modifying the source code in fnocc/blas.cc and recompiling Psi4. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [ ] Feature1; * **User-Facing for Release Notes**; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1046:392,Test,Tests,392,https://psicode.org,https://github.com/psi4/psi4/pull/1046,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This cleans up a matrix before diagonalisation by removing extremely small values arising from numerical accuracy during matrix generation. Diagonalisation of matrices that have off-diagonal elements of ca <10-14 with DSYEV appears to lead to unexpected eigenvalues, which ultimately lead to different DFT grid generation on different processor types that show subtly different behaviour with numerical accuracy. Ultimately, this enables the dftd3-version test to pass on core i7-5930X processors (all Haswell?) where before it failed due to generation of an odd DFT grid compared with other processors. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - I don't think this should affect anything other than within OrientationMgr but the main developers will know better!; * **User-Facing for Release Notes**; - None. ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/678:472,test,test,472,https://psicode.org,https://github.com/psi4/psi4/pull/678,1,['test'],['test']
Testability,"## Description; This code is an implementation of the CFMM Method (C.A. White et. al 1994) for linear-scaling building of the J matrix, used in HF, DFT, and SAPT. Reference Paper: https://www.sciencedirect.com/science/article/pii/0009261494011281. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Implements a Low Scaling J matrix build that is competitive with traditional DirectJK J matrix build, giving a complementing linear scaling algorithm to Linear Exchange (LinK).; - [x] Implements a new and more efficient multipoles library in Psi4 (in libfmm as multipoles_helper). ## Questions; - [ ] Do we need to make a new JK class to handle new methods like CFMM and LinK? (Like LinearJK : public JK). ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge. ## Data; (Comparing the J build in CFMM (Waterclusters, 6-31G*) to a traditional DirectJK build of the J and K matrices); ![Comparative CFMM Watercluster Results 10-02-2021](https://user-images.githubusercontent.com/60559795/135762894-9a9eb837-731e-4f12-92d7-932b4918c602.png). (Looking at the CFMM errors over system size (using multipole order 10, only considering systems that converge within 8 iterations); ![CFMM Errors (New CFMM Code)](https://user-images.githubusercontent.com/60559795/135762954-e672f7cb-e818-439a-b2bf-3d84dc1aaa7e.png). (Looking how the CFMM total J time compares to the total wall time [No LinK is used]); (NOTE: The near field calculations take up a majority of the J build time, as multipoles are relatively free); ![CFMM Watercluster Results 10-02-2021](https://user-images.githubusercontent.com/60559795/135762959-71ec2078-79bc-48d8-b418-5689f1045e48.png)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2311:781,Test,Tests,781,https://psicode.org,https://github.com/psi4/psi4/pull/2311,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This code removes `oeprop`'s specialized dipole/quadrupole functions in favor of the general multipole function. The output for dipoles _does_ change. I can change the printout if there's demand for it, but I don't care either way. I just want to have less code to mess with for the next stage of excited state variable cleanup. ### Old Function; ```; Properties will be evaluated at 0.000000, 0.000000, 0.000000 [a0]. Properties computed using the SCF density matrix. Nuclear Dipole Moment: [e a0]; X: 0.0000 Y: 0.0000 Z: 0.9783. Electronic Dipole Moment: [e a0]; X: 0.0000 Y: 0.0000 Z: -0.1680. Dipole Moment: [e a0]; X: 0.0000 Y: 0.0000 Z: 0.8103 Total: 0.8103. Dipole Moment: [D]; X: 0.0000 Y: 0.0000 Z: 2.0595 Total: 2.0595; ```. ### New Function; See [here](https://github.com/psi4/psi4/pull/2485#issuecomment-1077774801). ## Checklist; - [x] Quick tests pass; - [x] Properties pass . ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2485:871,test,tests,871,https://psicode.org,https://github.com/psi4/psi4/pull/2485,1,['test'],['tests']
Testability,"## Description; This continues #3056, which was off by a directory level. This time I remembered the backup trigger branch, so it's tested. ## User API & Changelog headlines. ## Dev notes & details; - [x] Now build docs for `1.{Y}.x` branches, too, as well as `master`. Save them to a dir at psi4/psi4docs according to branch name, so easy to reposition. . ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3058:132,test,tested,132,https://psicode.org,https://github.com/psi4/psi4/pull/3058,1,['test'],['tested']
Testability,"## Description; This fixes #2452. I export the correct value TD-LEFT EIGENVECTOR BETA and do not overwrite TD-LEFT EIGENVECTOR ALPHA anymore. ## Checklist; I did not rerun the tests, as the fix is trivial. I did not find pre-existing unittests referencing TD-LEFT EIGENVECTOR ALPHA or TD-LEFT EIGENVECTOR BETA. ## Status; - [X] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2453:176,test,tests,176,https://psicode.org,https://github.com/psi4/psi4/pull/2453,1,['test'],['tests']
Testability,"## Description; This fixes Example 2 of #2231. DF-DCT no longer segfaults in the presence of linear dependencies. Even with this merged in, #2231 should stay open until I've had a chance to do some more thorough testing of the module. This is, once again, a stand-alone bugfix. ## Questions; - [x] Test case added! ~~It would be good for me to write a test case for everything I check as part of #2231. Should this live in ctests or pytests? I'm not clear on test best practices at this point in Psi development, since we want to mover over to pytests eventually. Even then, _right now_ is a bad time to write the test since #2232 will change the reference output.~~. ## Checklist; - [x] `ctest -R dct` passes. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2233:212,test,testing,212,https://psicode.org,https://github.com/psi4/psi4/pull/2233,5,"['Test', 'test']","['Test', 'test', 'testing']"
Testability,"## Description; This fixes a bug in ""options"" handling - previously, options requested in CBS() stage were not stashed properly, as OptionsStash requires an array of arrays with option names, instead of an array of option names. I've also added ""options_lo"" keyword, so that one can do, say, `""cc_type"": ""conv""` calculation in an otherwise `""cc_type"": ""df""` recipe, or as shown in the test, a frozen-core stage in an all-electron recipe. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fixed ""options"" handling; - [x] Implemented ""options_lo"" keyword. ## Checklist; - [x] Tests added for any new features; - [x] All or relevant fraction of full tests run: `ctest -L cbs` works fine. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1585:385,test,test,385,https://psicode.org,https://github.com/psi4/psi4/pull/1585,3,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,## Description; This fixes a bug in the load_plugin function that incorrectly converted `_` to `-` instead of the opposite. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix a bug. ## Checklist; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1428:287,test,tests,287,https://psicode.org,https://github.com/psi4/psi4/pull/1428,2,['test'],['tests']
Testability,"## Description; This follows (and includes #1213), so that one should be merged and this one rebased for a smaller PR to examine. Whereas that one switches out physconst py-side and c-side (big effect) and periodictable c-side (no effect), this one deletes all physconst and periodictable sources py-side and starts pulling from qcelemental. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] driver-side physconst --> no change; - [x] driver-side psifiles --> `psi4.driver.constants.PSIF_` --> `psi4.driver.psif.PSIF_`; - [x] psiapi --> can't `from psi4.driver.constants import c`, instead `psi4.driver.constants.c` or `c = psi4.driver.constants.c`; - [x] psithon --> no change; - [x] qcdb --> `psi_c` --> `qcel.constants.c`; - [x] put in a basic connection to cmake. it'll clone it for you and install next to psi (which means pythonpath picks it up). ## Checklist; - [ ] ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1234:922,Test,Tests,922,https://psicode.org,https://github.com/psi4/psi4/pull/1234,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This is No. 10 of the DDD series, #1351. ## Todos; - mostly a few little differences with ddd that will reduce the changed line overhead; - [x] add logging printing, minimize imports; - [x] `mol = core.Molecule.from_schema(molschemus, nonphysical=True)` allows freq-masses test to run in ddd. nonphysical flag allows user-set atomic masses outside the known isotope range. the schema runner shouldn't be the block to this.; - [x] in tests add some alternate ref values. sometimes these are conventional, which can be handy reusing a test in a non-df program; - [x] adding deprecation warnings is good, but we don't often actually delete the fn promptly at the version we say it will stop working at. this is harmless, in my opinion, as it gives people longer to adapt, and developers can clear away the old fns when they actually become inconvenient. to better reflect this state of affairs, the standard message ""Using blah is deprecated, and in version it will stop working"" has been changed to ""Using blah is deprecated, and as soon as version it will stop working"". this also removes the temptation to keep incrementing <version>, which gives a misleading impression about how long ago users were warned. have backtracked on run_json accordingly from 1.7 to 1.5. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2557:164,log,logging,164,https://psicode.org,https://github.com/psi4/psi4/pull/2557,7,"['Test', 'log', 'test']","['Tests', 'logging', 'test', 'tests']"
Testability,"## Description; This is No. 5 of the DDD series, #1351. ## Todos; - [x] Add `psi4 --module` for find pymod. qcng already tries to use it; - [x] Add another mode to `prepare_options_for_modules` that instead of figuring out what options are active in a module (mediated mode, used previously for sow/reap, I think) now records the settings for reset (state mode, used in DDD). Added a context manager to ""hold and restore"" the options state.; - [x] Add `run_qcschema(..., postclean)` option that handles the trouble when this is called *from Psi4* of deleting the parent session's output file.; - [x] Be tolerant of missing files when cleaning numpy files. I don't remember why/if this was necessary, but on the whole, a missing numpy file isn't worth erroring on.; - [x] Aboid extra '/' in paths from psio. I don't remember if this was fixing an error or just aesthetic.; - [x] docstrings; - [x] ADDED: another attempt to fix Win conda package. ## Checklist; - [x] ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2530:966,Test,Tests,966,https://psicode.org,https://github.com/psi4/psi4/pull/2530,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This is No. 8 of the DDD series, #1351. ## Todos; - [x] qcvars `FINDIF NUMBER` and `NBODY NUMBER` are handy to confirm those wrappers are planning correctly. This PR forward-ports more tests of those vars; - [x] two more detailed nbody tests are forward-ported. one is a copy of a ctest only run through qcschema. the other checks the total vs ie return that was wrong in nbody for a while and solved by #2221.; - [x] add ""nbody"" label/mark to ctests and pytests systematically. make all nbody tests runable through pytest. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2544:201,test,tests,201,https://psicode.org,https://github.com/psi4/psi4/pull/2544,6,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This is a continuation of @bennybp's #587 that I'd like to wrap up, but the gdma Travis isssue needs fixing. We can work out merge order later. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] everything #587 does; - [x] changes the ERD warning, updates the docs, adds test case; * **User-Facing for Release Notes**; - [x] ERD integrals now work for far more types of systems. Previously it was only direct, conventional HF. Now works for most all energies (except LRC DFT). Does not work for gradients, but those are disabled. ## Questions; - [x] Waiting for a clean Travis test (gdma culprit), then ready to go. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/605:351,test,test,351,https://psicode.org,https://github.com/psi4/psi4/pull/605,2,['test'],['test']
Testability,"## Description; This is a first pass at implementing serialization of the Wavefunction object as suggested by @dgasmith in #887 . This functionality allows a wavefunction to be read to or written from a file:. closes #887 . ```; # get a wavefunction from some calculation; e, wfn_old = energy('mp2', return_wfn=True). # write the wavefunction to file; Wavefunction.to_file(wfn_old, filename). # ...; # other calculations may occur; # ... # read the wavefunction from file; wfn_new = Wavefunction.from_file(filename); ```. The wavefunction can also be stored directly in memory as a python dictionary:; ```; # write the wavefunction to file; wfn_dict = Wavefunction.to_file(wfn_old). # ...; # other calculations may occur; # ... # read the wavefunction from file; wfn_new = Wavefunction.from_file(wfn_dict); ```. In this code snippet, `wfn_new` and `wfn_old` should be identical (by value, not reference). A test case was added that corresponds to this example. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Read/Write Wavefunction object to file; - [x] Serialize a few more variables (PCM related stuff, etc.); - [x] ~~Deal with Wavefunction inheritance~~ (future PR). ## Questions; - [x] Does anyone have thoughts on the file naming scheme? Currently, the user specifies the filename in the call and a `.npy` file is generated in the working directory. This allows the user to have an arbitrary number of saved wavefunctions that persist between jobs. Alternatively, using a reserved filename (similar the `scf guess` procedure) might be better because users wouldn't have to work with filenames at all, but they would be limited to a single wavefunction.; - [x] ~~How should classes that are derived from Wavefunction (like CIWavefunction) be dealt with?~~; - [ ] Is everything implemented in a reasonable location? ; - [ ] Any inconsistencies in format/style?. ## Checklist; - [x] Added Test `serial-wfn`; - [ ] [All or relevant fraction of full ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1304:907,test,test,907,https://psicode.org,https://github.com/psi4/psi4/pull/1304,1,['test'],['test']
Testability,"## Description; This is a first step towards DFT Hessians. The code seems to be correct based on initial tests, but this needs a lot more stress testing. The emphasis here is correctness over efficiency, and I just want to get all of the nasty CPKS infrastructure in place before worrying about making it fast and memory efficient. The symmetric stretch of water is off by 2.8cm-1 (less than 1%), but there are a number of possible causes: 1) noise in the finite difference reference, which is unlikely given my experiments with 5 point FDs and different step sizes 2) the lack of grid weight derivatives, also unlikely because the error doesn't decrease when I use a huge grid 3) the filtering of the functional derivatives in areas of small density. I think number 3) is most likely, but it's also possible that there's something wrong in the code still. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Adds analytic DFT hessians for LSDA functionals (RKS wavefunctions only). ## Questions; - [x] How should we handle the procrouting? We could explicitly list all LSDA type functionals, but that would not be good for custom functionals. I'm sure there's a better way that I'm just not familiar with. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run]; ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1664:105,test,tests,105,https://psicode.org,https://github.com/psi4/psi4/pull/1664,4,"['Test', 'test']","['Tests', 'testing', 'tests']"
Testability,"## Description; This is a more elegant solution to the test failures fixed in #2445. When doing ADIIS/EDIIS, you need to solve a constrained quadratic programming problem. Hu and Yang's ADIIS paper solved the equations by doing a change of variables and throwing the problem at BFGS. Instead, I threw the constrained problem at SLSQP, which is naturally able to incorporate these constraints. All tests pass with no modifications now, and not including the variable transformation simplifies the equations. _What About Other Packages?_; PySCF follows Hu and Yang, and it isn't consistently able to solve the equations. Our friends at HORTON have [a custom solver for such problems](https://github.com/theochem/horton/blob/master/horton/meanfield/scf_ediis.py#L137-L150), but as this problem isn't positive or negative semi-definite, their solver is on the expensive side. ## Checklist; - [x] Passes `ctest` locally. Test suite will cover `pytest. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2449:55,test,test,55,https://psicode.org,https://github.com/psi4/psi4/pull/2449,3,"['Test', 'test']","['Test', 'test', 'tests']"
Testability,"## Description; This is a part of *Psi4* porting to Windows (#933). Add options to *Azure* pipeline to build a optimized *Psi4* with custom *Python* version. ~~**Depends on #1527**~~. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Add an option to trigger optimized builds; - [x] Add an option to choose *Python* version; - [x] https://dev.azure.com/psi4/psi4 pipeline have to be configured to provide the following variables:; - `cmake.build_type` with default `Debug` (settable at queuing time); - `python.version` with default `3.6` (settable at queuing time). ## Questions; - [x] For the optimized builds, `MAX_AM_ERI` is set 8. -- 8 is enough.; - [x] Python 3.5 isn't supported. Some dependencies are broken. -- Python 3.5 is dropped. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1539:813,Test,Tests,813,https://psicode.org,https://github.com/psi4/psi4/pull/1539,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This is a part of *Psi4* porting to Windows (#933). Add options to *Azure* pipeline to run all the tests. This can be used after significant changes and before release. This can be used only by users, who have permissions to queue jobs manually on https://dev.azure.com/psi4/psi4 or have their own *Azure* pipelines (e.g. https://dev.azure.com/raimisg/psi4). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Add an option to trigger all ctests; - [x] Add an option to trigger all pytests; - [x] https://dev.azure.com/psi4/psi4 pipeline have to be configured to provide the following variables:; - `ctest.type` with default `quick` (settable at queuing time); - `pytest.type` with default `quick` (settable at queuing time). ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1527:115,test,tests,115,https://psicode.org,https://github.com/psi4/psi4/pull/1527,4,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This is a part of *Psi4* porting to Windows (#933). The last element of `array` is `array[n-1]`, so the access of `array[n]` is not correct:; https://github.com/psi4/psi4/blob/62bb956ccfb38cad1bef7e6227aac70ddb1172f7/psi4/src/psi4/libmoinfo/moinfo_base.cc#L281-L285; It is better to use pointer arithmetics: `array + n`. This is not a bug, just it gives a false positive in memory error detection. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix memory error in `MOInfoBase::convert_int_array_to_vector`. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1480:597,Test,Tests,597,https://psicode.org,https://github.com/psi4/psi4/pull/1480,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This is a part of *Psi4* porting to Windows (#933). The size `ref_wfn.frzcpi()` is not `nirreps_ref` in `psimrcc-fd-freq2` test:; https://github.com/psi4/psi4/blob/5c0e495bdd3042795d8e39fe250ec153c4d236e9/psi4/src/psi4/libmoinfo/moinfo.cc#L257; It makes `convert_int_array_to_vector` to access invalid memory. In the past, I replaced `nirreps` with `nirreps_ref` to solve another problem #1427 and this one became visible after fixing #1480. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Demonstrate a memory error in `psi::MOInfo::read_mo_spaces`; - [x] Fix the memory error in `psi::MOInfo::read_mo_spaces`. ## Questions; - [x] I'm lacking enough understanding of the code to fix, so just highlighting the problem. Who could help?. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1521:139,test,test,139,https://psicode.org,https://github.com/psi4/psi4/pull/1521,4,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,"## Description; This is a part of *Psi4* porting to Windows (#933). The size of `aQT_` is `nmo_`. In `cookbook-rohf-orb-rot` test, `aPitzerCount` exceeds it:; https://github.com/psi4/psi4/blob/96296f1e3740b348bd207aa2ed0e3568e723a5a1/psi4/src/psi4/libtrans/integraltransform_moinfo.cc#L209-L212. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Demonstrate memory error in `psi::IntegralTransform::process_spaces`; - [x] Fix memory error in `psi::IntegralTransform::process_spaces`. ## Questions; - [x] I don't know how to fix this, just highlighting the problem. Who could help? . ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1488:125,test,test,125,https://psicode.org,https://github.com/psi4/psi4/pull/1488,4,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,"## Description; This is a part of *Psi4* porting to Windows (#933). The size of `leftp` is smaller than `doccpi_[h]` in `soscf-ref` tests:; https://github.com/psi4/psi4/blob/be5824d8926dd3e2c12a56944ceec50d1935ca83/psi4/src/psi4/libscf_solver/rohf.cc#L589-L591. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Demonstrate invalid memory access in psi::ROHF::Hx; - [x] Fix invalid memory access in psi::ROHF::Hx. ## Questions; - [x] I don't know how to fix this, just highlighting the problem. Who could help?. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1489:132,test,tests,132,https://psicode.org,https://github.com/psi4/psi4/pull/1489,4,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This is a part of Psi4 porting to Windows (#933). `tensor_rr` is `double***`, so it needs double dereferencing to have a pointer to data: ; https://github.com/psi4/psi4/blob/c9be896dd4b4c550b6f7ac792cf11a1274a9a038/psi4/src/psi4/cc/ccresponse/roa.cc#L238; I guess, it should be like here:; https://github.com/psi4/psi4/blob/c9be896dd4b4c550b6f7ac792cf11a1274a9a038/psi4/src/psi4/cc/ccresponse/roa.cc#L289. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix memory error in `psi::ccresponse::roa`. ## Questions; - [x] I don't real know what that part of code is doing. The fix has to be verified by someone who does. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1476:705,Test,Tests,705,https://psicode.org,https://github.com/psi4/psi4/pull/1476,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This is a preliminary PR for moving DIIS Python-side, submitted for general review over PsiCon and to see if Windows hates this. This is going to expedite EDIIS/ADIIS, and is a prototype for moving more code to the Python layer. ## Todos; - [x] Moves DIIS to Python. ## Questions; - [x] Where should the boundary between Python and C++ be?; - [x] Can we clean up the C-side API at all?; - [x] What kind of compile-time hit do we take by the CMake changes?; - [x] Can we get more detailed estimates on time and memory costs? My benchmarks so far say there's no hit.; - [x] The new DPD functionality is somewhat hacky, but it is DPD. Are we okay with this...?. ## Checklist; - [x] Quick tests pass. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2369:543,benchmark,benchmarks,543,https://psicode.org,https://github.com/psi4/psi4/pull/2369,2,"['benchmark', 'test']","['benchmarks', 'tests']"
Testability,"## Description; This is a simple aesthetic cleanup to make the printout more systematic. If I define the xc functional inline as e.g.; ```; my_dft = {; ""name"": ""my lda"",; ""x_functionals"": {""lda_x"": {}},; ""c_functionals"": {""lda_c_pw"": {}}; }; energy('scf', dft_functional=my_dft); ```; the capitalization is inconsistent in the output; ```; => Exchange Functionals <=. 1.0000 XC_lda_x. => Correlation Functionals <=. 1.0000 XC_lda_c_pw; ```; ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2218:625,Test,Tests,625,https://psicode.org,https://github.com/psi4/psi4/pull/2218,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This is a start to addressing #2272 . ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] `MBIS_CHARGES` and `MBIS_VOLUME_RATIOS` are now separate oeprop tasks to the user but still reusing code.; - [ ] `oeprop(wfn, ""MBIS_VOLUME_RATIOS"")` should be fine (indep oeprop fn), but `set scf_properties mbis_volume_ratios; energy(""scf"")` will still fail as #2272 reported because those are `OEProp` class instantiations called from proc.py, and the free atom volumes aren't available. The oeprop.cc code could exit gracefully when free atom volumes aren't available, but having different properties lists for the two calling routes isn't good.; - [ ] so why not add the loc from oeprop() to `OEProp`s in proc.py so that atom volumes are available? nice thought, but the fn that produces them itself calls oeprop() and energy() and descends into endless recursion. I haven't sought the logic that makes this all work together.; - [ ] add tests. probably some of the existing ones will break for only calling one mbis property but checking volrat. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2273:950,log,logic,950,https://psicode.org,https://github.com/psi4/psi4/pull/2273,5,"['Test', 'log', 'test']","['Tests', 'logic', 'tests']"
Testability,"## Description; This is a starting PR for @amjames @robertodr @kcpearce and myself (in addition to anyone else) to hack on for TDDFT functionality in Psi4. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Restricuted C1 TDDFT Spectra; - [x] Unrestricted C1 TDDFT Spectra; - ~Restricted C1 Stability Analysis~; - ~Unrestricted C1 Stability Spectra~; - [x] Per-irrep abilities for the above. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge. ## Notes; - Iterative Diagonalization methods have been generalized to work with an `engine` which is an object that must provide a particular API (documented). The `engine` provides the relevant Matrix x trial vector functions and a series of methods that allow the engine to perform standard operations on the trial vectors without needing to know what data structure is used for a trial vector. ; - Two engines have been implemented that provide the products required for TDHF/TDDFT. A flag passed to the engines `__init__` method will determine if they are configured to perform Ax products (for TDA/CIS) or both (A+B)x and (A-B)x products for Full TDDFT/TDHF. ; - The Restricted reference engine `TDRSCFEngine` also expects a flag to determine if products are spin adapted for singlet or triplet excitations.; - It appears as best as I can tell that the `UV::compute_Vx` method is not implemented correctly for GGA functionals so UKS excitations are only correct for LDA functionals and pure HF; - It also appears that the `RV::compute_Vx` provides the singlet spin adapted product as RKS singlet excitations are correct for LDA/GGA Hybrids and LRC, but not for the triplet. Looking in the literature and at the implementation in pyscf I am pretty sure that for the triplet product a spin polarized XC kern",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1349:459,Test,Tests,459,https://psicode.org,https://github.com/psi4/psi4/pull/1349,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This is a trivial one. It just sets the `CMAKE_EXPORT_COMPILE_COMMANDS` option to `ON` when setting up the `psi4-core` external project.; Upon generation, CMake will dump the compile options for each file in `psi4-core` to a `compile_commands.json` file in `<build-dir>/psi4-core-prefix/src/psi4-core-build`. This file can be used by `clang-tidy` to perform various static checks and apply corresponding fixes. For the latter, PRs are incoming. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1312:481,Test,Tests,481,https://psicode.org,https://github.com/psi4/psi4/pull/1312,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This is an intermediary PR to https://github.com/psi4/psi4/pull/3060. Reviews on that PR have made me reconsider some design decisions as implemented in that PR. At the same time, I want to ensure that no end user runs into any hard failures due to broken `SCF_TYPE` + `SCF_SUBTYPE` + `SCREENING` combinations in v1.9. So this PR goes and simply throws exceptions for every hard failure case as logged in `test_comprehensive_jk_screening.py`. Tests are updated to match, and there's some small refactoring of how JK type + screening exceptions are handled in `jk.cc.` . ## User API & Changelog headlines; - [X] N/A. ## Dev notes & details; - [x] Broken combinations of `SCF_TYPE` + `SCF_SUBTYPE` + `SCREENING` now throw an exception, instead of running to failure. ## Questions; - [X] N/A. ## Checklist; - [X] Tests added for any new features; - [X] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3081:411,log,logged,411,https://psicode.org,https://github.com/psi4/psi4/pull/3081,5,"['Test', 'log', 'test']","['Tests', 'logged', 'tests']"
Testability,"## Description; This is consistent to [what HF orthog was doing](https://github.com/psi4/psi4/pull/1759/files?utf8=%E2%9C%93&diff=split&w=1#diff-542034e7ed85da9a795544399b295be6L743) pre #1759 . Fixes the cookbook/rohf and scf-guess-read2 tests, both of which involve ROHF. Look sensible, @susilehtola?. ## Checklist; - [ ] ~Tests added for any new features~; - [x] All or relevant fraction of full tests run -- full ctest now passes at 1759. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1765:239,test,tests,239,https://psicode.org,https://github.com/psi4/psi4/pull/1765,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This is my attempt to resolve #1271 . I would like to use this PR to hash out the FC functionality more thoroughly. The questions I have are:. - what is the ideal expected behaviour of `freeze_core True`; - do we want to implement ""previous shells"" freezing, using eg. `freeze_core {1,2,...}`; - how about ""ridiculous"" cases such as Li2+ or F2-, how much hand-holding do we want the code to do and at which point we give up?. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [X] Resolves #1271; - [ ] Clarify . ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1350:592,Test,Tests,592,https://psicode.org,https://github.com/psi4/psi4/pull/1350,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This is part of *Psi4* porting to *Windows* (https://github.com/psi4/psi4/issues/933). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] MSVC does not support non-standard `not`, `and`, `or`, `xor` operators, which are replaced with `!`, `&&`, `||`, `^`, respectively. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1065:372,Test,Tests,372,https://psicode.org,https://github.com/psi4/psi4/pull/1065,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Fix memory error in `psi::sapt::SAPTDFInts`; - [ ] Fix memory error in `psi::sapt::Iterator`; - [x] Update passing Windows tests. ## Checklist; - [x] ~~Tests added for any new features~~; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1238:287,test,tests,287,https://psicode.org,https://github.com/psi4/psi4/pull/1238,4,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Add MSVC-specific compiler definitions (`/D_USE_MATH_DEFINES` and `/EHsc`); - [x] Add MSVC-specific compiler options (`/bigobj`); - [x] Disable PyBind C++ standard on MSVC. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1182:359,Test,Tests,359,https://psicode.org,https://github.com/psi4/psi4/pull/1182,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Add missing `PSI_API` in fnocc. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1181:218,Test,Tests,218,https://psicode.org,https://github.com/psi4/psi4/pull/1181,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Add the OpenMP test to Azure; - [x] Add failing ctests to Azure; - [x] Update pytest. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1399:179,test,test,179,https://psicode.org,https://github.com/psi4/psi4/pull/1399,4,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,"## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Create `%PREFIX%\Scripts` -- `conda` stopped doing it automatically.; - [x] Don't package `bin\psi4.bat` -- `conda` learnt to recognize *Python* scripts and generate wrappers for them, i.e. `%PREFIX%\Scripts\psi4.exe`, but it is still needed for local testing.; - [x] Pin LLVM 7.0.1 -- 8.0.0 fails to build the optimized libint. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests) -- https://github.com/psi4/psi4/issues/933#issuecomment-494354023. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1648:416,test,testing,416,https://psicode.org,https://github.com/psi4/psi4/pull/1648,4,"['Test', 'test']","['Tests', 'testing', 'tests']"
Testability,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix `psi::PSIO::rename_file`; - [x] Update passing Windows tests. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1227:223,test,tests,223,https://psicode.org,https://github.com/psi4/psi4/pull/1227,4,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix `pytest_output.dat` deleting in `tear_down()`; - [x] Update passing Windows tests. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1276:244,test,tests,244,https://psicode.org,https://github.com/psi4/psi4/pull/1276,4,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix a filesystem error in `psi.driver.cbs`. Windows does not support `*` in filenames.; - [x] Fix `cbs-parser` test on Windows. ## Questions; - [x] How *Psi4* is suppose to sanitize filenames? Have I missed some function? --> That suppose to be removed in 1.4, so just a quick fix for now. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1442:275,test,test,275,https://psicode.org,https://github.com/psi4/psi4/pull/1442,4,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix list decrement in `psi::DFHelper::identify_order`; - [x] Update passing Windows tests. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1221:248,test,tests,248,https://psicode.org,https://github.com/psi4/psi4/pull/1221,4,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix memory leak; - [x] Fix invalid deallocation (`new` allocations have to be deallocated with `delete`); - [x] Update passing Windows tests. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1246:299,test,tests,299,https://psicode.org,https://github.com/psi4/psi4/pull/1246,4,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix undefine variable in `psi::CIvect::dcalc2`; - [x] Update passing Windows tests. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1219:241,test,tests,241,https://psicode.org,https://github.com/psi4/psi4/pull/1219,4,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix vector indexing error in `psi::IntegralTransform::process_spaces`; - [x] Update passing Windows tests. ## Questions; - [x] The offending line is commented out. Does a more sophisticated fix is need here? --> @andysim will find a better fix. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1220:264,test,tests,264,https://psicode.org,https://github.com/psi4/psi4/pull/1220,4,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix vector indexing error in `psi::PKMgrDisk::batch_sizing`; - [x] Update passing Windows tests. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1237:254,test,tests,254,https://psicode.org,https://github.com/psi4/psi4/pull/1237,4,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Make failing `psi4 --test` to return non-zero status. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1363:185,test,test,185,https://psicode.org,https://github.com/psi4/psi4/pull/1363,4,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Match `malloc` with `free`. `free_block` uses `delete[]`. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1250:244,Test,Tests,244,https://psicode.org,https://github.com/psi4/psi4/pull/1250,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Match `malloc` with `free`; - [x] Match `new` with `delete`; - [x] Match `new[]` with `delete[]`. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1248:284,Test,Tests,284,https://psicode.org,https://github.com/psi4/psi4/pull/1248,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Reduce the number of tests on Appveyor to reduce timeouts. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1249:185,test,tests,185,https://psicode.org,https://github.com/psi4/psi4/pull/1249,4,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Remove ""failing tests"" which do not fail anymore on Azure. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1522:180,test,tests,180,https://psicode.org,https://github.com/psi4/psi4/pull/1522,4,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Remove hard-code paths; - [x] Replace `os.system` with `subprocess.run`; - [x] Update passing Windows tests. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1239:266,test,tests,266,https://psicode.org,https://github.com/psi4/psi4/pull/1239,4,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Repeat `ci-property` test to catch random failures; - [x] Remove memory error in `psi::MultipolePropCalc::compute_mo_extents`.; - [x] Fix `ci-property` test on Windows. ## Questions; - [x] Removed some dead code, including the part with `C_DDOT`, which was segment-faulting. Could you check, it was really a dead code, not some incomplete implementation? --> Dead!. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1440:185,test,test,185,https://psicode.org,https://github.com/psi4/psi4/pull/1440,5,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Replace `os.unlink`; - [x] Update passing Windows tests. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1180:214,test,tests,214,https://psicode.org,https://github.com/psi4/psi4/pull/1180,4,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Switch MSVC to LLVM compiler; - [x] Fix linkage errors; - [x] Update passing Windows tests. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1264:249,test,tests,249,https://psicode.org,https://github.com/psi4/psi4/pull/1264,4,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] set Python interpreter explicitly. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1183:221,Test,Tests,221,https://psicode.org,https://github.com/psi4/psi4/pull/1183,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This is part of *Psi4* porting to Windows (#933). *Appveyor* is switching to Python 3.7 by default, but some package are not yet ready. So stay with Python 3.6 for a while. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Use Python 3.6 for Windows builds. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1278:344,Test,Tests,344,https://psicode.org,https://github.com/psi4/psi4/pull/1278,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This is part of *Psi4* porting to Windows (#933). *FindOpenMP* doesn't yet support *clang-cl*, so the config has to be done manually. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix OpenMP config for clang-cl on Windonws; - [x] Check if OpenMP config hadn't failed silently. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1348:365,Test,Tests,365,https://psicode.org,https://github.com/psi4/psi4/pull/1348,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This is part of *Psi4* porting to Windows (#933). Appveyor is falling, because the new version (2019.0) of MKL is not detected. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Lock MKL version. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1240:282,Test,Tests,282,https://psicode.org,https://github.com/psi4/psi4/pull/1240,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This is part of *Psi4* porting to Windows (#933). As discussed in https://github.com/psi4/psi4/issues/933#issuecomment-423183802, *clang-cl* supports *OpenMP* 4.0, so the adaptation to *OpenMP* 2.0 is not necessary. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Revert #1225. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1384:366,Test,Tests,366,https://psicode.org,https://github.com/psi4/psi4/pull/1384,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This is part of *Psi4* porting to Windows (#933). As discussed in https://github.com/psi4/psi4/issues/933#issuecomment-423183802, *clang-cl* supports *OpenMP* 4.0, so the adaptation to *OpenMP* 2.0 is not necessary. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Revert #1226. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1385:366,Test,Tests,366,https://psicode.org,https://github.com/psi4/psi4/pull/1385,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This is part of *Psi4* porting to Windows (#933). As discussed in https://github.com/psi4/psi4/issues/933#issuecomment-423183802, *clang-cl* supports *OpenMP* 4.0, so the adaptation to *OpenMP* 2.0 is not necessary. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Revert #1231. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1386:366,Test,Tests,366,https://psicode.org,https://github.com/psi4/psi4/pull/1386,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This is part of *Psi4* porting to Windows (#933). Enable *conda* package building for *Windows* with *Azure*. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Enable package building; - [x] Add conda recipe; - [x] Add an option to trigger package building; - [x] https://dev.azure.com/psi4/psi4 pipeline have to be configured to provide the following variables:; - `conda.build` with default `false` (settable at queuing time). ## Questions; - [x] Currently, the conda recipe is in `conda/win`. Maybe it should be somewhere in https://github.com/psi4/psi4meta/? --> Recipe will stay in `conda/win`, for now. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1560:695,Test,Tests,695,https://psicode.org,https://github.com/psi4/psi4/pull/1560,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This is part of *Psi4* porting to Windows (#933). Fix the crash reported by @tonigi (https://github.com/psi4/psi4/issues/933#issuecomment-446601070). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Clean up `psi::psio_volseek`; - [x] Fix integer overflow: `lseek` returns `off_t` (i.e. `long` or `long long`), which is written to `int`.; - [x] Change `_lseek` to `_lseeki64` on Windows, as it doesn't support large files implicitly. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1432:521,Test,Tests,521,https://psicode.org,https://github.com/psi4/psi4/pull/1432,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This is part of *Psi4* porting to Windows (#933). From MKL 2019.0, the packaging of Windows packages has changed. Import libraries (.lib) have been moved to separate `mkl-devel` package (https://github.com/ContinuumIO/anaconda-issues/issues/10154), which follows the changes in Intel channel (https://anaconda.org/intel). The same happened to `intel-openmp`, but `intel-openmp-devel` package has not been created. *Clang* needs an import library `libiomp5md.lib` to link with `libiomp5md.dll`. Interestingly, MKL installer from *Intel* (https://software.intel.com/en-us/mkl/choose-download/windows) has that library. This obsoletes #1408 . ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix the missing Intel OpenMP import file; - [x] Update to MKL 2019.1; - [x] Improve CMake message. ## Questions; - [x] This is hackish, but makes things to work. Ideally, we need `intel-openmp-devel`, so hopefully *Intel* decides to make it. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1571:1018,Test,Tests,1018,https://psicode.org,https://github.com/psi4/psi4/pull/1571,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; This is part of *Psi4* porting to Windows (#933). Implement `psi4` command on Windows. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Generate and install `psi4.bat`; - [x] Test `psi4` command. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1420:240,Test,Test,240,https://psicode.org,https://github.com/psi4/psi4/pull/1420,4,"['Test', 'test']","['Test', 'Tests', 'tests']"
Testability,"## Description; This is part of *Psi4* porting to Windows (#933). MSVC supports only OpenMP 2.0, but *Psi4* needs higher at some part. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Change `size_t` to `long` in OpenMP loops; - [x] Remove `update` from OpenMP atomic; - [x] Conditional compilation for `simd`. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1226:382,Test,Tests,382,https://psicode.org,https://github.com/psi4/psi4/pull/1226,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This is part of *Psi4* porting to Windows (#933). MSVC supports only OpenMP 2.0, but *Psi4* needs higher at some parts. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Change `size_t` to `long` in OpenMP loops. ## Checklist; - [x] ~~Tests added for any new features~~; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1228:299,Test,Tests,299,https://psicode.org,https://github.com/psi4/psi4/pull/1228,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This is part of *Psi4* porting to Windows (#933). MSVC supports only OpenMP 2.0, but *Psi4* needs higher at some parts. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Change `size_t` to `long` in OpenMP loops. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1225:299,Test,Tests,299,https://psicode.org,https://github.com/psi4/psi4/pull/1225,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This is part of *Psi4* porting to Windows (#933). MSVC supports only OpenMP 2.0, but *Psi4* needs higher at some parts. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Change `size_t` to `long` in OpenMP loops; - [x] Conditional compilation of `collapse` clause. ## Checklist; - [x] ~~Tests added for any new features~~; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1230:351,Test,Tests,351,https://psicode.org,https://github.com/psi4/psi4/pull/1230,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This is part of *Psi4* porting to Windows (#933). MSVC supports only OpenMP 2.0, but *Psi4* needs higher at some parts. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Change `size_t` to `long` in OpenMP loops; - [x] Conditional compilation of `simd` clause. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1231:347,Test,Tests,347,https://psicode.org,https://github.com/psi4/psi4/pull/1231,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This is part of *Psi4* porting to Windows (#933). MSVC supports only OpenMP 2.0, but *Psi4* needs higher at some parts. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Change `size_t` to `long` in OpenMP loops; - [x] Conditional compilation of `simd` clause; - [x] Conditional compilation of `collapse` clause. ## Checklist; - [x] ~~Tests added for any new features~~; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1229:399,Test,Tests,399,https://psicode.org,https://github.com/psi4/psi4/pull/1229,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This is part of *Psi4* porting to Windows (#933). MSVC supports only OpenMP 2.0, but *Psi4* needs higher at some parts. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Change `size_t` to `long` in OpenMP loops; - [x] Remove `update` from OpenMP atomic, as it is default behaviour. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1224:369,Test,Tests,369,https://psicode.org,https://github.com/psi4/psi4/pull/1224,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; This is part of *Psi4* porting to Windows (#933). Make *Psi4* to work without setting `PSI_SCRATCH`. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Set the default path to `TEMP` or `TMP` value. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1413:284,Test,Tests,284,https://psicode.org,https://github.com/psi4/psi4/pull/1413,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This is part of *Psi4* porting to Windows (#933). Some time ago (#1240), MKL version had to be pinned for Windows builds. Now it is fixed and the latest version could be used. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Unpin MKL version. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1408:331,Test,Tests,331,https://psicode.org,https://github.com/psi4/psi4/pull/1408,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; This is part of *Psi4* porting to Windows (#933). The problem was already reported in #1255. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix a memory error in `psi::MOInfo::read_mo_spaces`; - [x] Fix `psimrcc-fd-freq2` test on Windows. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1427:289,test,test,289,https://psicode.org,https://github.com/psi4/psi4/pull/1427,4,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,"## Description; This is part of *Psi4* porting to Windows (#933). The problem was reported in #1255. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix an invalid memory access in `psi::CIWavefunction::sem_iter`; - [x] Fix `fci-tdm` test on Winodows; - [x] Fix `fci-tdm-2` test on Winodows. ## Questions; - [x] This needs an actual fix, but I'm not enough familiar with the method. Who knows how to fix? --> Fixed. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1441:284,test,test,284,https://psicode.org,https://github.com/psi4/psi4/pull/1441,5,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,## Description; This is part of *Psi4* porting to Windows (#933). The problem was reported in #1255. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix invalid memory access in `psi::cceom::get_moinfo`; - [x] Fix `cc46` and `cc47` tests on Windows. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1422:282,test,tests,282,https://psicode.org,https://github.com/psi4/psi4/pull/1422,4,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This is part of *Psi4* porting to Windows (#933). There is an invalid memory access at line 209, because `Ca_->colspi()[h]` is smaller than `nalphapi_[h]`:; https://github.com/psi4/psi4/blob/ba98fb72ab73350a613ae96b56d1d4c6074c2ae9/psi4/src/psi4/libtrans/integraltransform_sort_so_tei.cc#L201-L217. I have added an asset to prove that. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Prove a bug in `psi::IntegralTransform::presort_so_tei`; - [x] Fix the bug in `psi::IntegralTransform::presort_so_tei`. ## Questions; - [x] Who knows how to fix this? -- https://github.com/raimis/psi4/pull/4. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1469:681,Test,Tests,681,https://psicode.org,https://github.com/psi4/psi4/pull/1469,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This is part of *Psi4* porting to Windows (#933). This is intended as a replacement for *Appveyor*, which has 60 min limit. *Azure* allow to run up to 360 min!. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] CI for Windows on *Azure*. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1368:322,Test,Tests,322,https://psicode.org,https://github.com/psi4/psi4/pull/1368,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This is part of *Psi4* porting to Windows (#933). `cctriples` and `libdpd` use `pthread` directly, but its port to Windows (`pthread-win32`) is a bit questionable quality. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Make libdpd to use OpenMP instead of `pthread`; - [x] Make cctriples to use OpenMP instead of `pthread`; - [x] Do not link to `pthread` explicitly; - [x] Do not install `pthread-win32` on Appveyor. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1199:506,Test,Tests,506,https://psicode.org,https://github.com/psi4/psi4/pull/1199,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This is part of *Psi4* porting to Windows (#933). ~~MSVC supports only OpenMP 2.0, but *Psi4* needs higher at some parts.~~. *clang-cl* supports OpenMP 4.5!. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Clean up OpenMP directives; - ~~Make threaded loop indices signed~~; - ~~Conditional compilation for `simd`~~; - [x] Add missing `for` clauses; - ~~Replace `max` reduction~~. ## Questions; - ~~In some cases `size_t` (`unsigned long int`) are replaced with `int`. Do I need to use `long` to prevent potential overflows in any case? --> Keep `size_t` or change to `long`~~; - [x] In some cases `omp_get_thread_num()` is called in a loop, which is inefficient. --> Insignificant; - [x] Some OpenMP blocks seems to be missing `for` clause. --> Add the clauses. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1200:851,Test,Tests,851,https://psicode.org,https://github.com/psi4/psi4/pull/1200,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; This is part of Psi4 porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Add Appveyor configuration to compile and tests on Windows. Appveyor has to be activated on the repository to work (https://www.appveyor.com/docs/).; - [x] #1181 has to merged before; - [x] #1182 has to merged before; - [x] #1183 has to merged before. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1185:204,test,tests,204,https://psicode.org,https://github.com/psi4/psi4/pull/1185,4,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; This is part of Psi4 porting to Windows (#933). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Add missing and remove unnecessary headers; - [x] Fix `PSI_API` usage; - [x] Replace `bzero` with `memset`; - [x] Disable system/user timer. ## Checklist; - [x] ~~Tests added for any new features~~; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1076:342,Test,Tests,342,https://psicode.org,https://github.com/psi4/psi4/pull/1076,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This is part of Psi4 porting to Windows (#933). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Add missing and remove unnecessary headers; - [x] `and` --> `&&`, `or` --> `||`; - [x] Add missing `return`. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1071:310,Test,Tests,310,https://psicode.org,https://github.com/psi4/psi4/pull/1071,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; This is part of Psi4 porting to Windows (#933). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Add missing headers; - [x] Non-constant length arrays replaced with `std::vector`; - [x] Remove a unimplemented method; - [x] `and` --> `&&`. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069:343,Test,Tests,343,https://psicode.org,https://github.com/psi4/psi4/pull/1069,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; This is part of Psi4 porting to Windows (#933). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Add missing headers; - [x] Replace non-constant length arrays with `std::vector`; - [x] Fix `std::string` inicialization; - [x] Match function signatures; - [x] `not` --> `!`; - [x] Define cross-platform `SYSTEM_GETPID`; - [x] Fix multiple definitions of `psi::binomial`. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1075:473,Test,Tests,473,https://psicode.org,https://github.com/psi4/psi4/pull/1075,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; This is part of Psi4 porting to Windows (#933). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Add pragmas for MSVC. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1089:223,Test,Tests,223,https://psicode.org,https://github.com/psi4/psi4/pull/1089,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; This is part of Psi4 porting to Windows (#933). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Change staging path; - [x] Remove direct calls to `make`; - [x] Remove `DESTDIR`; - [x] Change `cmake` to `${CMAKE_COMMAND}`; - [x] Fix `pthreads` linking; - [x] Fix installation path of `core.pyd`; - [x] Remove hardcoded `.so`; - [x] Processor-specific optimisation flags; - [x] Set minimum MSVC toolset version. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1115:515,Test,Tests,515,https://psicode.org,https://github.com/psi4/psi4/pull/1115,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; This is part of Psi4 porting to Windows (#933). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Define cross-platform `SYSTEM_GETPID` ; - [x] Fix incorrect `std::vector::reserve` usage. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1072:291,Test,Tests,291,https://psicode.org,https://github.com/psi4/psi4/pull/1072,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; This is part of Psi4 porting to Windows (#933). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Fix PSI_API; - [x] Add missing and remove unnecessary headers; - [x] Disable system/user timer; - [x] Move `<sys/timers.h>` porting to a separate header. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1078:355,Test,Tests,355,https://psicode.org,https://github.com/psi4/psi4/pull/1078,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; This is part of Psi4 porting to Windows (#933). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Fix `PSI_API`. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1092:216,Test,Tests,216,https://psicode.org,https://github.com/psi4/psi4/pull/1092,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; This is part of Psi4 porting to Windows (#933). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Fix hard-code paths; - [x] Guard against importing not available packages . ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1091:277,Test,Tests,277,https://psicode.org,https://github.com/psi4/psi4/pull/1091,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; This is part of Psi4 porting to Windows (#933). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Handle different system functions; - [x] Handle different path structure and separators. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1112:290,Test,Tests,290,https://psicode.org,https://github.com/psi4/psi4/pull/1112,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; This is part of Psi4 porting to Windows (#933). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Reimplement `psi4::Timer` with `std::chrono`; - [x] Remove unnecessary headers; - [x] Disable stack trace printing. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1087:317,Test,Tests,317,https://psicode.org,https://github.com/psi4/psi4/pull/1087,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This is part of Psi4 porting to Windows (#933). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Remove unnecessary headers; - [x] Define cross-platform macros and functions, i.e `SYSTEM_GETPID`, etc.; - [x] Replace a system call to move a file. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1073:350,Test,Tests,350,https://psicode.org,https://github.com/psi4/psi4/pull/1073,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; This is part of Psi4 porting to Windows (#933). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Remove unnecessary headers; - [x] Fix hard-coded path; - [x] Use `filesystem::path::is_directory`. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1090:300,Test,Tests,300,https://psicode.org,https://github.com/psi4/psi4/pull/1090,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; This is part of Psi4 porting to Windows (#933). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Remove unnecessary headers; - [x] Match function signatures; - [x] Add and remove `return`; - [x] Fix uninitialized local variables. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1067:334,Test,Tests,334,https://psicode.org,https://github.com/psi4/psi4/pull/1067,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; This is part of Psi4 porting to Windows (#933). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Replace `bzero` with `memset`; - [x] Match function signatures; - [x] Move a function to avoid a forward-declaration; - [x] Fix PSI_API usage; - [x] Add missing header; - [x] `and` --> `&&`; - [x] Disable system/user timer; - [x] Move `<sys/timers.h>` porting to a separate header (after #1078 merged); ; ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1077:506,Test,Tests,506,https://psicode.org,https://github.com/psi4/psi4/pull/1077,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; This is part of Psi4 porting to Windows (#933). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Update `gau2grid`; - [x] https://github.com/dgasmith/gau2grid/issues/15; - [x] https://github.com/dgasmith/gau2grid/issues/16; - [x] Update `libint`; - [x] ~~evaleev/libint#104~~; - [x] Update `libxc`. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1124:403,Test,Tests,403,https://psicode.org,https://github.com/psi4/psi4/pull/1124,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This is take one at adding the kinetic energy, potential energy, and virial ratio as psivars, for the purposes of `cc` testing. I'm not confident on how this handles PCM, EFP, PE, and point charges, so putting it up very early for feedback. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Kinetic energy, potential energy, and virial energy are added as Psi variables for fully QM HF and CC computations. The variable names are subject to change. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Standardize `E_h` in docs. ## Checklist; - [ ] Do we want tests for the new psivars now, or in the next PR?. ## Status; - [x] Ready for review; - [x] Ready for merge - need Lori re-review.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2769:135,test,testing,135,https://psicode.org,https://github.com/psi4/psi4/pull/2769,2,['test'],"['testing', 'tests']"
Testability,"## Description; This is the First PR in a series of three that will eventually get White and Head-Gordon's CFMM method into Psi4. CFMM is a method that builds J-like matrices in O(N) time, such as the J matrix in Hartree-Fock, intermediates in density-fitted HF, and J-like intermediates in SAPT. References:; https://www.sciencedirect.com/science/article/pii/0009261494011281; Helgaker Chapter 9.13-9.14. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Add libfmm; - [x] Adds multipole translation and rotation functionalities to Psi4. ## Questions; - [ ] Is this a good way to break up the CFMM PR? (1. libfmm, 2. fmm tree, 3. CFMM JK class). ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2665:724,Test,Tests,724,https://psicode.org,https://github.com/psi4/psi4/pull/2665,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This is the first of what will likely be quite a few cleanup PRs in `dct`, in preparation for some features I'd like for 1.5. This PR creates variants of existing constructors in `libmints`. We're no longer forced to use `SharedMatrix` in `set_block`, and we can now pass a single `Slice` object to `get_block` or `set_block` to use it for both rows and columns. This PR can be moved to 1.5 if needed. I can also opt for fewer but longer PRs if needed. ## Checklist; - [x] `dct` test suite passes. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2152:495,test,test,495,https://psicode.org,https://github.com/psi4/psi4/pull/2152,1,['test'],['test']
Testability,"## Description; This is the make-dfocc-work-reliably and bring-dfocc-testing-to-normal-level step of mega-dfocc-remp. All the former by @behnle. ~**REVIEW COMMIT 3 ONLY** I'll get the first two merged and out of the way shortly.~. This is PR No. 3 in the mega-dfocc-remp series. ## Todos; - [x] no new methods; - [x] coupled DIIS ported from OCC! fixes #2215. now dfocc can be converged tightly enough that 5-pt findif gradient matches analytic gradient; - [x] potential integer overflows fixed which may lead to wrong memory demand estimates for large molecules; - [x] stdsuite testing added for plain RHF DF/CD a-ccsd(t) energies and DF/CD energies and DF gradients for OO methods omp2, omp2.5, omp3, & olccd. attendantly, qcvar handling in the managers brought up to modern standards, with most saving on wfn, and freebie methods saved and checked; - [x] update run_dfocc in driver to dict/director syntax (works b/c `cc_lambda_` now set in dfocc.cc) and uniform P::e/wfn handling of qcvars; - [x] tightened convergence so that default conditions match values to 1e-6; - [x] tightened base rms_mograd_convergence from 4 to 6.5 for oo methods (matches occ, which had to be tightened from 6 to 6.5); - [x] tightened r_convergence to same on the basis of e_conv for non-oo methods; - [x] added an extra check that difference in orbitals at convergence not too big a step. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2669:69,test,testing-to-normal-level,69,https://psicode.org,https://github.com/psi4/psi4/pull/2669,5,"['Test', 'test']","['Tests', 'testing', 'testing-to-normal-level', 'tests']"
Testability,"## Description; This is the thinmints project that GaTech & CCQC cooked up around May. It's a smaller psi4 with libmints and libraries, no full QC capabilites. It may be useful for deriving plugins (though maybe that needs SCF?), as a basis for psi4numpy, or as a smaller codebase for new programmers. ## Todos; - [x] Unlike in May, this can build both psi4 and thinmints simultaneously. Main copied file is `core.cc` --> `thinmints.cc`.; - [x] I ended up needing to copy a truncated driver. There might be a better way around that.; - [x] Unlike in May, thinmints is now a separate module, in the `import thinmints` sense.; - [x] The test below runs (`python mints2.py`). ```; import thinmints as psi4; psi4.set_output_file(""output.dat"", True). refnuc = 204.01995737868003 #TEST; refscf = -228.95763005849557 #TEST. bz = psi4.geometry(""""""; X; X 1 RXX; X 2 RXX 1 90.0; C 3 RCC 2 90.0 1 0.0; C 3 RCC 2 90.0 1 60.0; C1@13.0 3 RCC 2 90.0 1 120.0; C 3 RCC 2 90.0 1 180.0; C1@13.0 3 RCC 2 90.0 1 240.0; C 3 RCC 2 90.0 1 300.0 # unnecessary comment; H1@2.014101779 3 RCH 2 90.0 1 0.0; H 3 RCH 2 90.0 1 60.0; H 3 RCH 2 90.0 1 120.0; H1@2.014101779 3 RCH 2 90.0 1 180.0; H 3 RCH 2 90.0 1 240.0; H 3 RCH 2 90.0 1 300.0. RCC = 1.3915; RCH = 2.4715; RXX = 1.00; """"""). # Here we specify some of the basis sets manually. They could be written to one or more external; # files and included by adding the directory to environment variable PSIPATH; #; # The format of these external files follows the same format as those below, where there's a [name]; # tag before the standard G94 basis set specification:. # [DZ]; # spherical; # ****; # H 0 ; # S 3 1.00; # 19.2406000 0.0328280 ; # 2.8992000 0.2312080 ; # 0.6534000 0.8172380 ; # S 1 1.00; # 0.1776000 1.0000000 ; # ****; # C 0; # definition of carbon atom DZ basis...; # ****; # Any more atoms needed...; # ****. # The keywords cartesian or spherical are optional and provide default behavior if the; # puream keyword is not set. In basis strings, like below, mul",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1178:635,test,test,635,https://psicode.org,https://github.com/psi4/psi4/pull/1178,3,"['TEST', 'test']","['TEST', 'test']"
Testability,"## Description; This is the third PR of the McMurchie-Davidson series, now tackling `MultipolePotentialInt` (used for PE/EFP). ~I'm not happy with the performance yet, so I'll do some profiling to see what could be improved.~. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] arbitrary-order multipole potential integrals; - [x] tests (generalized existing tests); - [x] more equation numbers; - [x] addresses #2499, as discussed in #2496 ; - [x] adapt for Intel compilers (remove structured bindings, etc.). ## Blurb for the Release Notes; - [x] Added the ability to compute integral representations of the derivative of the Coulomb operator (potential, field, field gradient, _etc._), with arbitrary derivative order; the previous Obara-Saika based code was limited to third order derivatives. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for **SQUASH**-merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2504:387,test,tests,387,https://psicode.org,https://github.com/psi4/psi4/pull/2504,5,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This patch adds an option to FREEZE_CORE called ""policy"", which enables frozen core settings to be looked up from a list specified in the global variable FREEZE_CORE_POLICY. This is more flexible than NUM_FROZEN_DOCC for situations like SAPT where multiple molecules are run in the same command and may require different individual numbers of frozen cores, with settings more customizable than TRUE/FALSE/1/0/-1/-2. This patch addresses some (but not all) issues raised in #2631 by allowing for more flexible policies to be set appropriate to multi-part calculations. . ## Todos; - [x] Add POLICY as option to FREEZE_CORE; - [x] Add global variable FREEZE_CORE_POLICY to hold custom frozen-core policy. ## Checklist; - [x] A functionality test for this flag has been added to `tests/dfmp2-ecp/input.dat`; - [x] `ctest -L quick` runs successfully, which includes the above listed test; - [ ] `ctest ` still in-flight but given the scope of this patch I don't expect any issues. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2667:755,test,test,755,https://psicode.org,https://github.com/psi4/psi4/pull/2667,3,['test'],"['test', 'tests']"
Testability,"## Description; This pull request fixes #1899 . Multithreaded computation of the ESP potential was invalid, because a buffer_ object was not thread-safe. This pull request disables multithreaded calculation of the ESP on grid for the moment and also adds a unit test to check.; ## Todos; No Todos, this is really just a trivial disable. ## Questions; No question. ## Checklist; - [X] Tests added for any new features. ; - [X] I ran the libmints tests (http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [X] Ready for review; - [X] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1900:262,test,test,262,https://psicode.org,https://github.com/psi4/psi4/pull/1900,4,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,"## Description; This pulls about a quarter out from #1351 to reduce the clutter and get the uncontroversial parts in sooner. ## Todos; - [x] qcvars on wfn for CI, chemps2, psimrcc; - [x] new `negotiate_derivative_type` to replace _derivative_dertype and method_exists. not hooked in in this PR; - [x] lots of f-strings. ## Checklist; - [x] Tests added for any new features; - [x] full tests clean. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1570:340,Test,Tests,340,https://psicode.org,https://github.com/psi4/psi4/pull/1570,2,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This should follow directly after #1393 (for the moment, includes it) because otherwise users will get all the deprecation warnings not only from their own input files but from the driver itself. Think of how many times `get_variable` is called, and you'll see the magnitude. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] updates syntax py-side and c-side and example-side so that if all the deprecated functions went away (obviously, this is how I tested it), Psi4 would still work nicely. ## Notes; - snsmp2 raises a warning b/c it's using the `get_variable`. but that's the purpose of deprecation warnings -- to allow downstream to exist with multiple versions of upstream.; - I'll still need to investigate whether the ""culprit line"" is right, given our psithon/psiapi and namespace promotion complications. ## Checklist; - [ ] ~Tests added for any new features~; - [x] full test suite, less a few addons. ## Status; - [x] Ready for review **look only at ""update driver for PsiPEP002"" commit. Previous are #1393 and following is just the tests**; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1402:517,test,tested,517,https://psicode.org,https://github.com/psi4/psi4/pull/1402,4,"['Test', 'test']","['Tests', 'test', 'tested', 'tests']"
Testability,"## Description; This should not be reviewed directly. It reflects the difference between branch `master` and branch `master-cf`, where the latter contains reviewed PRs on topics of the last Libint2 changeover and deps changes only built on conda-forge. The idea is to keep `master` buildable with your existing `defaults`-based envs as long as possible, while allowing users and CI to test the new stuff from one place. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] RN 1; - [ ] RN 2. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2902:385,test,test,385,https://psicode.org,https://github.com/psi4/psi4/pull/2902,4,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,"## Description; This will temporarily disable installation and testing of `adcc`.; Current `psi4` and `adcc` do not seem to like each other (dependency issues with MKL and HDF5). As discussed with @loriab, `adcc` will be re-enabled for tests upon reconciliation. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1848:63,test,testing,63,https://psicode.org,https://github.com/psi4/psi4/pull/1848,5,"['Test', 'test']","['Tests', 'testing', 'tests']"
Testability,"## Description; This will upgrade our ECP engine from the native implementation to the superior [standalone library](https://github.com/robashaw/libecpint), also written by Rob Shaw. That library also provides gradient and Hessian terms, which will greatly improve performance. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Hook up external build; - [x] Get energies working; - [x] Get gradients working; - [x] Get Hessians working; - [x] Remove old native implementation; - [x] Make all tests / references to ECPs conditional depending on libECP activation. LAB: conditional build marked by `USING_ecpint` compile definition. This turned out uglier than should strictly be needed because as soon as you ifdef the ao_ecp declarations in integrals.cc, all calcs, w/ or w/o ecp segfault. Possibly I'm missing something, but present ifdef pattern is working stably.; - [x] Linux and Mac conda packages are available off psi4/label/dev. Windows untested. These packages have stylistic problems, but they'll do for now. There are also Linux and Mac conda packages off conda-forge. At least the Linux works fine. Installation is mildly involved with the mixed base channels, so the psi4 packages exist for simplicity of availability.; - [x] NYI message on stability code added to close #2577 ; - [ ] build docs will be in a separate PR. ## Questions; - Can anyone think of how one might access code with ecp ifdefs _without_ building a psi4 BasisSet (besides zerobasis)? Particularly though some non-driver mintshelper API call? This is important because the nearly sole whoa-your-mol+basis-needs-ecp-but-libecpint-not-built warning happens at the BasisSet build in export_mints. If users get around that, they'll be surprised by missing electrons b/c ecp code is deactivated. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2135:549,test,tests,549,https://psicode.org,https://github.com/psi4/psi4/pull/2135,1,['test'],['tests']
Testability,"## Description; Through tests of the `COSX` code, we have discovered numerical instabilities in larger systems, leading to slow convergence for later iterations. We discovered that the version of incremental Fock currently in `COSX` performs `incfock` every iteration, and does not include stability features included in the Incremental Fock PR from #2155 (i.e. Shutting it off every few iterations (resets) as well as shutting it off completely past a certain convergence of the density matrix. This PR refactors the inc. Fock framework in the `DFJCOSK` class with the inc. Fock framework from #2155. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Replace old inc. fock. code from `DFJCOSK` PR with the one from #2155; - [x] Move incfock logic from DirectJK to JK; - [x] Cleans up incfock logic by removing extraneous variables like `initial_iteration_`. ## Questions; - [x] What is the best way to handle JK classes that should never use `incfock` (i.e. `MemDFJK`, `CDJK`, etc.) What I currently do is to just set incfock to false in those cases no matter what. Is there a better way?; - [x] Should DirectJK use `incfock` by default or not?. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge. Example of incfock use in with refactor (Hexane/jun-cc-pVDZ):; Iterations in which inc. Fock is performed has `INCFOCK` appended to the end.; ```; ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @RHF iter SAD: -234.79902648013046 -2.34799e+02 0.00000e+00; @RHF iter 1: -235.11334205670366 -3.14316e-01 3.59965e-03 DIIS/ADIIS; @RHF iter 2: -235.33614986245553 -2.22808e-01 1.58174e-03 DIIS/ADIIS/INCFOCK; @RHF iter 3: -235.38008939725930 -4.39395e-02 2.83807e-04 DIIS/ADIIS/INCFOCK; @RHF iter 4: -235.38291465805983 -2.82526e-03 4.64337e-05 ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2682:24,test,tests,24,https://psicode.org,https://github.com/psi4/psi4/pull/2682,3,"['log', 'test']","['logic', 'tests']"
Testability,"## Description; Ticks off an item on #2486 and #2477 by allowing ""TD-DFT"" to be a way to access TD-DFT psivars. As far as I'm aware, TD-DFT psivars are now as we want them. ## Checklist; - [x] `tdscf` tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2506:201,test,tests,201,https://psicode.org,https://github.com/psi4/psi4/pull/2506,1,['test'],['tests']
Testability,"## Description; To ward off tampering with editable python files in distributed psi4, add build option to compile each python file into its own `.so`. The python loader, in its beneficence, doesn't care whether files are .py or .so, so long as they're in the right spot in the filesys. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] add `ENABLE_CYTHONIZE` build option to invoke; - [x] presently compiling most python files but not those that are a bother or repeat library names (qcdb, util), those that have references to missing objects, or the `__init__.py` files (need a better lib naming system), or the top-level py files (psi4/__init__.py, extras, header).; - [x] this is a crude cmake hookup. could be consolidated into a fn, and need to `rm -rf stage/lib/psi4/driver` to trigger total rebuild upon changing any py file.; - [x] corrected various missing imports and non-existing objects that compilation notices. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1889:993,Test,Tests,993,https://psicode.org,https://github.com/psi4/psi4/pull/1889,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; Travis's third test, which uses GCC6, keeps timing out. The second uses GCC 5.4, so perhaps trying GCC 8 will speed up the problematic test. This PR attempts that experiment.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1517:31,test,test,31,https://psicode.org,https://github.com/psi4/psi4/pull/1517,2,['test'],['test']
Testability,## Description; Tries to make sure calculations work even in very ill-behaved cases. Also adds citation that was added to the docs into the code. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1844:321,Test,Tests,321,https://psicode.org,https://github.com/psi4/psi4/pull/1844,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; Tries to set the correct density label and solves some bugs with writing the incorrect densities. Relates issue: #1272 . ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] deducts density label (`|SCF|MP2|CC|CI|DCT`) for the FCHK file from the method.; - [x] allows PSI4 method names as density label with option `strict_label=False`; - [x] related issue [1886](https://github.com/psi4/psi4/issues/1886) is handled within the FCHK driver.; - [x] new pytests for FCHK files that check if the correct SCF density and SCF orbital coefficients is set.; - [x] No densities available from `occ` gradients. FCHK driver exists with a warning.; - [x] DCT, DFOCC densities available; - [x] exposes `Vector.copy()` to python; - [x] better ECP support. Fixes #2021.; - [x] adds a 'compare_fchkfiles` function. ## Checklist; - [x] docs changed to reflect that the high-level `fchk()` should be called (instead of `FCHKWriter()` directly); - [x] new test passes; - [x] manual inspect of various fchk files using this (ugly) script: https://gist.github.com/hokru/f1b00a87665ac345415b4ad3e0006f1d. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1884:999,test,test,999,https://psicode.org,https://github.com/psi4/psi4/pull/1884,1,['test'],['test']
Testability,"## Description; Try to get PCMSolver reintegrated. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; <!--; - [x] This is atop lapack and PR, so you'll want to look only at later commits; - [x] Switched to PCMSolverConfig imported target.; - [x] Based on https://github.com/loriab/pcmsolver.git branch config6; - [x] target `PCMSolver::PCMSolver` -> `PCMSolver::pcm`; - [x] no longer using pcm_placeholder, instead add to path in run_psi4.py; - [x] I'd rather have pcmsolver as a proper module containing __init__, pcmsolver, getkw, etc., but that would mess with other codes use of pcmsolver, I suspect; - [x] This runs with py27 and all tests pass; - [x] this PR is continues from #594 ; - [x] still need to resolve Fortran/-recursive/libifcoremt/OpenMP issue; -->; - [x] Fix some HDF5 detection problems; - [x] Adds some colored ""MKL"" and ""AM"" to CMake output for lapack and libint, respectively, for ready diagnosis.; - [x] Fixes rpath on Mac by setting it to `@loader_path/${_rel}""`; - [x] Some host_writer changes to modernize PCMSolver; * **User-Facing for Release Notes**; - [x] Re-enables PCMSolver via `-DENABLE_PCMSolver`. No longer hint with `PCMSOLVER_ROOT` but with `PCMSolver_DIR`. Pins to `v1.1.9`.; - [x] Bumps CMake requirement to 3.2; - [x] upstream PCMSolver needs py3 compatibility, PCMSolver/pcmsolver#39; - [x] anyone building with Intel and native gcc < 4.9 needs to have the gcc-name and gxx-name in `CMAKE_Fortran_FLAGS`, too, just like `CMAKE_CXX_FLAGS`. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/599:697,test,tests,697,https://psicode.org,https://github.com/psi4/psi4/pull/599,1,['test'],['tests']
Testability,## Description; Turn off plugin testing by default. Turn on for Travis. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] enable plugin testing to be turned off (needed for conda packages); - [x] explicitly turn on plugin testing for Travis CI to keep plugins in working order. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/569:32,test,testing,32,https://psicode.org,https://github.com/psi4/psi4/pull/569,3,['test'],['testing']
Testability,"## Description; UHF CCSD gradients were crashing but only in subsequent jobs like the below. Culprit was freeing the opdm https://github.com/psi4/psi4/blob/master/psi4/src/psi4/cc/ccdensity/ccdensity.cc#L416. opdm wasn't getting set for UHF, but it wasn't null either for `free_block` to pass by. Is this a sensible solution?. ```; molecule hf {; H; F 1 0.917; }. set reference rhf; gradient(""ccsd/cc-pvdz"", molecule=hf). clean(). set reference uhf; gradient(""ccsd/cc-pvdz"", molecule=hf); ```. snapshot of what was getting set for the various references:; ```; >>> grep O ccdensity/sortone* | grep -v OEI | grep O | grep opdm; ccdensity/sortone_RHF.cc:** matrix, O (moinfo.opdm), which we also symmetrize by computing Opq; ccdensity/sortone_RHF.cc: moinfo.opdm = O;; ccdensity/sortone_ROHF.cc:** matrix, O (moinfo.opdm), which we also symmetrize by computing Opq; ccdensity/sortone_ROHF.cc: moinfo.opdm_a = O_a;; ccdensity/sortone_ROHF.cc: moinfo.opdm_b = O_b;; ccdensity/sortone_ROHF.cc: moinfo.opdm = O;; ccdensity/sortone_UHF.cc:** spin-factored matrices, O_a (moinfo.opdm_a) and O_b; ccdensity/sortone_UHF.cc:** (moinfo.opdm_b), which we also symmetrize by computing Opq = 1/2; ccdensity/sortone_UHF.cc: moinfo.opdm_a = O_a;; ccdensity/sortone_UHF.cc: moinfo.opdm_b = O_b;; ```. ## Checklist; - [ ] ~Tests added for any new features~; - [x] all CC tests run. ## Status; - [x] Ready for review; - [x] Ready for merge. closes #1652",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1928:1304,Test,Tests,1304,https://psicode.org,https://github.com/psi4/psi4/pull/1928,2,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; Update MDI implementation to support MDI version 1.2. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2161:90,Test,Tests,90,https://psicode.org,https://github.com/psi4/psi4/pull/2161,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; Update MDI support to version 1.2. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2163:71,Test,Tests,71,https://psicode.org,https://github.com/psi4/psi4/pull/2163,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; Updated SAPT(DFT) to support hybrid xc kernel in Disp2 for hybrid functional. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Hybrid xc kernel supported for SAPT(DFT) dispersion term. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1865:270,Test,Tests,270,https://psicode.org,https://github.com/psi4/psi4/pull/1865,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; Updated version of #2187 . Implements a linear-scaling variant of building the K-matrix by taking advantage of the sparsity of ERIs combined with the Density matrix using advanced prescreening techniques. Reference: C. Ochsenfeld, C.A. White, and M. Head-Gordon, J. Chem. Phys. 109, 1663 (1998); (https://aip.scitation.org/doi/10.1063/1.476741). ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Faster build of K matrix based on pre-screening techniques; - [x] Verified timings and accuracy of calculations on 3D system (watercluster). ## Questions; - [x] My algorithm is slightly modified from the Oschenfeld version since we perform our DirectJK algorithm in atom-task pairs instead of shell pairs, in order to preserve the old DirectJK loop. Is that a bad idea?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests); - [x] Updated Docs and Bibliography for new feature. ## Status; - [x] Ready for review; - [x] Ready for merge. ## Table of Contents; - [LinK Pseudocode](https://github.com/psi4/psi4/pull/2359#issuecomment-998996631); - [LinK Timings Graphs](https://github.com/psi4/psi4/pull/2359#issuecomment-1003741024); - [LinK Code Organization](https://github.com/psi4/psi4/pull/2359#issuecomment-1043550653); - [Parallel Preprocessing Code](https://github.com/psi4/psi4/pull/2359#issuecomment-1063147739); - [Atom vs Shell Blocking](https://github.com/psi4/psi4/pull/2359#issuecomment-992619129)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2359:860,Test,Tests,860,https://psicode.org,https://github.com/psi4/psi4/pull/2359,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; Updates PCMSolver to its latest released version `v1.2.1`. Documentation and tests have been updated too. All ERI algorithms are now tested with PCM. Plus there is a geometry optimization test (with finite differences) against analytical results obtained with DALTON. ~This is _provisional_ meaning that I am pointing to a specific commit off of PCMSolver `master` rather than a specific tag. I am having a bit of trouble with tagging an official `v1.2.0`, but the code has been tested separately by @loriab already. Officially tagged `v1.2.0` of the library.~. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **User-Facing for Release Notes**; - [x] Psi4 uses the latest version of PCMSolver. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review.; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/988:93,test,tests,93,https://psicode.org,https://github.com/psi4/psi4/pull/988,7,"['Test', 'test']","['Tests', 'test', 'tested', 'tests']"
Testability,## Description; Updates the Psi4 interface to the MolSSI QCSchema using canonical QCElemental objects. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Begins deprecation of the old JSON command line.; - [x] Validates and runs Psi4 via QCSchema conventions and objects.; - [x] Allows both JSON and Msgpack CLI execution. ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1723:421,Test,Tests,421,https://psicode.org,https://github.com/psi4/psi4/pull/1723,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; Updates the SCF one-electron properties computation to allow users to specify which properties should be computed. This applies to all computations besides property computations. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Allows arbitrary one-electron properties to be computed upon SCF energy calls.; - [x] Moves QCSchema to a more flexible metadata approach, this section of code will certainly evolve over time.; - [x] Removes Psi4 v1.1 JSON specification for 1.3 as per the deprecation warning. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1421:590,Test,Tests,590,https://psicode.org,https://github.com/psi4/psi4/pull/1421,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; Use a centralized function to determine the scratch name associated with scratch files, to make sure they're being read and written consistently. Fixes `cookbook-rohf-orbrot`, which was writing the modified orbitals to a location other than what the SCF code expects, resulting in them being ignored. ## Checklist; - [x] Cleaned up `cookbook-rohf-orbrot` input file; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests); The following (unrelated) failures persist, but are fixed in #1494 .; ```; The following tests FAILED:; 223 - mints8 (Failed); 291 - opt-irc-1 (Failed); ```. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1495:423,test,tests,423,https://psicode.org,https://github.com/psi4/psi4/pull/1495,3,['test'],['tests']
Testability,## Description; Use reference fchk files generated with very tight convergence since the compare_fchkfiles are also pretty tight. #2079 uncovered some jitter in dfocc. ## Checklist; - [ ] ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2091:189,Test,Tests,189,https://psicode.org,https://github.com/psi4/psi4/pull/2091,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; Uses MBIS (and future charge partitioning schemes) atomic electron densities to calculate expected atomic volumes (or radial moments). Useful for computing quantities like Hirshfeld ratios. Note: <r^n> possible, with <r^3> being the default. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Accurately calculates Expected Atomic Volumes; - [ ] Calculates an arbitrary <r^n> (Expected Atomic Hyper-Volumes, if <r^3> passes, maybe that won't be necessary, as a quick code check would work). ## Questions; - [x] @jeffschriber Is there an external way to compare the output for my code to some kind of reference to ensure that the answers I'm getting are valid or at least reasonable?. ## Checklist; - [x] Preliminary tests passed, MBIS code undamaged (mbis-1, 2, 3, 4, and 5); - [x] More tests comparing the validity of Expected Volumes. ## Status; - [x] Further Information Needed; - [x] Ready for review; - [ ] Ready for merge. closes #2041",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2056:788,test,tests,788,https://psicode.org,https://github.com/psi4/psi4/pull/2056,2,['test'],['tests']
Testability,"## Description; Uses `clang-tidy` to find and fix instances where `auto` can be used to declare the type on the left-hand side of an assignment. Fixes applied with:; ```; cd <build-dir>/psi4-core-prefix/src/psi4-core-build; run-clang-tidy.py -header-filter='.*' -checks='-*,modernize-use-auto' -fix; ```; Based on #1312 . ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] `clang-tidy` find and fix with `modernize-use-auto`. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1323:493,Test,Tests,493,https://psicode.org,https://github.com/psi4/psi4/pull/1323,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; Uses `clang-tidy` to find and fix instances where `noexcept` can be used instead of `throw()`. Fixes applied with:; ```; cd <build-dir>/psi4-core-prefix/src/psi4-core-build; run-clang-tidy.py -header-filter='.*' -checks='-*,modernize-use-noexcept' -fix; ```; Based on #1312 . ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] `clang-tidy` find and fix with `modernize-use-noexcept`. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1324:467,Test,Tests,467,https://psicode.org,https://github.com/psi4/psi4/pull/1324,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; Uses `clang-tidy` to find and fix uses of `0`/`1` instead of `false`/`true`. Fixes applied with:; ```; cd <build-dir>/psi4-core-prefix/src/psi4-core-build; run-clang-tidy.py -header-filter='.*' -checks='-*,modernize-use-bool-literals' -fix; ```; Based on #1312 . ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] `clang-tidy` find and fix with `modernize-use-bool-literals`. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1322:459,Test,Tests,459,https://psicode.org,https://github.com/psi4/psi4/pull/1322,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; Uses `clang-tidy` to find and fix uses of `virtual` that can be replaced by the `override` keyword introduced in C++11 and later standards. Fixes applied with:; ```; cd <build-dir>/psi4-core-prefix/src/psi4-core-build; run-clang-tidy.py -header-filter='.*' -checks='-*,modernize-use-override' -fix; ```; Based on #1312 . ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] `clang-tidy` find and fix with `modernize-use-override`. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1319:512,Test,Tests,512,https://psicode.org,https://github.com/psi4/psi4/pull/1319,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; Uses `clang-tidy` to find and fix uses of deprecated C headers. Fixes applied with:; ```; cd <build-dir>/psi4-core-prefix/src/psi4-core-build; run-clang-tidy.py -header-filter='.*' -checks='-*,modernize-deprecated-headers' -fix; ```; Based on #1312 . ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] `clang-tidy` find and fix with `modernize-deprecated-headers`. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1318:448,Test,Tests,448,https://psicode.org,https://github.com/psi4/psi4/pull/1318,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; Uses `clang-tidy` to find and fix uses of null pointer not conforming to `nullptr` as mandated by C++11 and later standards. Fixes applied with:; ```; cd <build-dir>/psi4-core-prefix/src/psi4-core-build; run-clang-tidy.py -header-filter='.*' -checks='-*,modernize-use-nullptr' -fix; ```; Based on #1312 . ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] `clang-tidy` find and fix with `modernize-use-nullptr`. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1313:495,Test,Tests,495,https://psicode.org,https://github.com/psi4/psi4/pull/1313,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; Uses `clang-tidy` to find and fix uses of redundant `void` argument in functions. Fixes applied with:; ```; cd <build-dir>/psi4-core-prefix/src/psi4-core-build; run-clang-tidy.py -header-filter='.*' -checks='-*,modernize-redundant-void-arg' -fix; ```; Based on #1312 . ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] `clang-tidy` find and fix with `modernize-redundant-void-arg`. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1317:466,Test,Tests,466,https://psicode.org,https://github.com/psi4/psi4/pull/1317,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; Uses the [new RESTful interface](https://pubchem.ncbi.nlm.nih.gov/pug_rest/PUG_REST.html#_Toc458584218) to get PubChem hits.; ## Todos; Notable points that this PR has either accomplished or will accomplish.; - [x] Fixes PubChem tests with Python 3. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/507:245,test,tests,245,https://psicode.org,https://github.com/psi4/psi4/pull/507,1,['test'],['tests']
Testability,"## Description; WORK IN PROGRESS. PR created to run the test cases. Adds F12 integrals from libint2 needed for F12 methods. As part of cleanup the choice of libint1 or erd integral engine is removed. ## Status; - [ ] Ready for review, only if you feel like it.; - [ ] NOT ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2490:56,test,test,56,https://psicode.org,https://github.com/psi4/psi4/pull/2490,1,['test'],['test']
Testability,"## Description; Wavefunction wasn't returning correct energies for this method. Also, reconsolidating method name from `ccsd(at)` to `a-ccsd(t)`. This is the same as Lambda-ccsd(t). ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2241:202,Test,Tests,202,https://psicode.org,https://github.com/psi4/psi4/pull/2241,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; What it says on the tin: use standardized C bindings to BLAS and LAPACK. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] BLAS level 1, 2, and 3 moved to CBLAS; - [x] Conda install `mkl-include` on Travis; - [x] LAPACK moved to LAPACKE; - [x] Remove use of `check_fortran_function_exists` to check for newere LAPACK subroutines; - [x] Remove duplicated name-mangling headers. ## Questions; - Should the bindings be someplace more central, rather than in `libqt`? It could encourage _not rewriting them_ in other modules... ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1347:608,Test,Tests,608,https://psicode.org,https://github.com/psi4/psi4/pull/1347,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; What will CI do?. ## Dev notes & details. - [x] Roll out C++20 requirement. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3113:112,Test,Tests,112,https://psicode.org,https://github.com/psi4/psi4/pull/3113,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; When SAPT(DFT) is used with `SAPT_DFT_FUNCTIONAL == 'HF'` to run SAPT0, two pathways for dispersion and exchange-dispersion calculations are possible, through the SAPT0-SAPT2+3 code (requested by `set SAPT_DFT_MP2_DISP_ALG SAPT`) or through the FISAPT code (`set SAPT_DFT_MP2_DISP_ALG FISAPT`). However, in the latter case, the calculation forgot to freeze the core as requested. This PR should preserve frozen-core in this specific situation. This fixes https://github.com/psi4/psi4/issues/3141. It's quite likely that the FISAPT pathway can be faster (thanks to @carolinesargent for extensive testing), that's why we want to fix it. ## Questions; - [ ] I assumed no frozen core is ever needed for true SAPT(DFT). Is that valid? . ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3142:611,test,testing,611,https://psicode.org,https://github.com/psi4/psi4/pull/3142,4,"['Test', 'test']","['Tests', 'testing', 'tests']"
Testability,"## Description; When running a simple RHF calculation and computing cube files, I was experiencing seg faults or orbitals that look like:; ![image](https://user-images.githubusercontent.com/9198329/38570936-0b5815e4-3cbd-11e8-93ce-f7cf4a57b46e.png); after updating my Psi for the first time in a while. After a bit of digging, I think I've tracked the problem--no more seg faults and my orbitals look like:; ![image](https://user-images.githubusercontent.com/9198329/38570995-3f7b156a-3cbd-11e8-8dbd-b8a2423033be.png). Not sure why the cubeprop test (which was passing) didn't catch this. ## Todos; - [X] Fix copy call in points.cc. ## Questions; - [x] Should I add another cubeprop test?. ## Status; - [X] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/951:545,test,test,545,https://psicode.org,https://github.com/psi4/psi4/pull/951,2,['test'],['test']
Testability,"## Description; When the `cc` mega-module was first created, the `Matrix` class did not exist, and manual reordering arrays were used to keep track of orbital indexing between the symmetry-blocked and non-symmetry-blocked convention. Thanks to #2719, the last of these in `ccenergy` has been replaced with `Matrix` technology, so there is no need to keep this reordering around. This PR thus removes them. My next CC cleanup PR will Matrix-ify the remaining QT-using parts of `ccresponse`. ## Dev notes & details; - [x] Removes QT reordering arrays from `ccenergy` for lack of use. ## Checklist; - [x] `cc` tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2720:607,test,tests,607,https://psicode.org,https://github.com/psi4/psi4/pull/2720,1,['test'],['tests']
Testability,"## Description; When trying to build from source, I had problems with Pybind11 headers not being found. This is most likely due to #2369 introducing new dependencies on PB11 being introduced that the build system is unaware of. This PR fixes the problem on my Linux/ICPC setup, but I'm open to suggestions if there's a more up to date way of telling CMake about these new dependencies. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2387:440,test,tests,440,https://psicode.org,https://github.com/psi4/psi4/pull/2387,2,['test'],['tests']
Testability,"## Description; While cleaning out old branches, I noticed a small `occ` cleanup: the H integrals written to disk are no longer used. Accordingly, we can just remove the code responsible for it. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Removes code that isn't used. ## Checklist; - [x] Every `occ` test I've tried passes. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2107:364,test,test,364,https://psicode.org,https://github.com/psi4/psi4/pull/2107,1,['test'],['test']
Testability,"## Description; While working on a _different_ PR for the dcft code, I stumbled across a bug that I had accidentally introduced in #1310. DCFT previously allowed you to use the amplitudes from a previous computation as your guess for the next one by setting `dcft_guess dcft`. Key to this mechanism was the fact that the LibDPD files persisted after the computation... which is precisely what I changed in #1310 to fix #1309, where intermediate files would interfere with the amplitude guess. The primary purpose of this PR is to both keep the guess feature working and keep issue #1309 fixed. This is accomplished by checking if `dcft_guess` is `dcft` at the time of `compute_energy` and choosing whether or not to nuke previous files. So past intermediate files will interfere only when you want them to. There are also some related changes: adding a helpful error message to replace the PSIO error that appears when the past files don't exist, adding a test case to prevent a repeat of this little mess, removing some dead code, and per discussions with @jturney, moving some tensors from the libtrans libdpd to the dcft libdpd if they were more than integrals. The other `dcft` PR will be coming as soon as this one is merged in: another bugfix, and (finally!) the transition from `dcft` to `dct`. Obligatory @ssh2 notification. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Restore `dcft_guess dcft` functionality; - [x] Move tensors (DCT's amplitudes and ""generalized"" Fock matrix) from the `libtrans` dpd buffer to the `dcft` buffer; - [x] Add a test for `dcft_guess`; - [x] Eliminate one obnoxious PSIO_ERROR. ## Checklist; - [x] Tests added for any newly working features; - [x] All 14 `dcft` tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1717:956,test,test,956,https://psicode.org,https://github.com/psi4/psi4/pull/1717,4,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,"## Description; While working on a fix to #1777, I encountered bug #1808, which blocks my fix. This PR fixes #1808 and condenses some of the relevant code. The bug is discussed in detail at https://github.com/psi4/psi4/issues/1808. Briefly, OMP2.5 theory has two sets of amplitudes, T2(1) and T2(2). Compared to the very similar OMP3 theory, it halves certain terms. OCC implemented this by halving the T2(2) amplitudes instead of halving intermediates that use them. While the intermediates will be correct, this has the side-effect of changing the T2(2) amplitudes from their current values, so they do not converge. This PR changes the implementation so the necessary terms are halved, but not the T2(2) amplitudes. Now they converge properly and agree better with my Psi4Numpy implementation of OMP2.5. Disclaimer that @bozkaya has yet to comment. While I'm confident I've implemented the theory correctly, he is more familiar with OMP2.5 than I am. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fixes a bug causing small (~fifth decimal place) errors in OMP2.5 gradients with conventional integrals.; - [x] Condenses OMP2 and OMP2.5/OMP3's functions for the first order T2 amplitudes. . ## Checklist; - [x] Quick tests pass. `^omp2p5` passes. `^omp3` passes with the exceptions noted in #1793. . ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1809:1270,test,tests,1270,https://psicode.org,https://github.com/psi4/psi4/pull/1809,1,['test'],['tests']
Testability,"## Description; While working on some more DF technology, I discovered a bug when trying to load using `Matrix::SaveType::Full`. The code assumed the matrix was square. One of the things this PR does is have the code work when that assumption fails. But the bigger problem is that `Matrix::SaveType::Full` is Psi3 era tech that shouldn't exist anymore. That SaveType reads/writes a matrix _where all elements of the wrong symmetry are replaced with zeros_. The better solution is to use `Matrix::SaveType::SubBlocks`, where those zero's are neither written nor read. Accordingly, I'm deprecating the Full save in favor of SubBlocks save. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] `Matrix::SaveType::Full` is deprecated; - [x] Fixed a correctness bug with loading from `Matrix::SaveType::Full`. ## Checklist; - [x] quicktests, standard stuite, and dfmp2 all pass; - [ ] I didn't bother adding a new test that I actually fixed the bug, since I accessed the buggy code through a method that's going to be deprecated anyways. Any objections?. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2092:963,test,test,963,https://psicode.org,https://github.com/psi4/psi4/pull/2092,1,['test'],['test']
Testability,"## Description; Will close #2235 by implementing ADIIS and EDIIS. I'm submitting this in a draft state to get second opinions on what I have so far. _Unfortunately_, due to issues with the Francesco group cluster, I can't do deep Vtune profiling, so it may be some time before I can proceed to the next step. I'll keep devs updated. RHF and UHF EDIIS/ADIIS are working great, but not so much for ROHF. Disappointing, but not surprising. The EDIIS and ADIIS functionals don't account for the effective Fock matrix of ROHF theory. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] RHF/UHF implementation; - [x] Code cleanup; - [x] Documentation; - [x] Write tests. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2320:713,test,tests,713,https://psicode.org,https://github.com/psi4/psi4/pull/2320,4,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; With Intel compiler, current master throws:. ```; /psi/gits/hrw-pybind/psi4/src/psi4/libfock/DirectJK.cc(1015): internal error: null pointer; }; ^. compilation aborted for /psi/gits/hrw-pybind/psi4/src/psi4/libfock/DirectJK.cc (code 4); ```. ~The `size_t` is in the header, so I don't know why it should need it again, but it seems to want it. All the below fail, too. I'm glad to try any more rational variations.~; ```; # out-of-date # all throw with above; # out-of-date num_computed_shells_ = 0L;; # out-of-date num_computed_shells_ = 0;; # out-of-date num_computed_shells_ = std::size_t{ 0 };; ```. FYI @andyj10224 who has also hit this and @davpoolechem since it came about in #2547. ~EDIT: nevermind, this only lets it build but kills off the threading and doesn't count ints. Ignore PR for now.~. EDIT: ok, this works, though I don't see why Intel should have complained about the original. Throw seen on 2021.4 and 2021.6, btw. ## Checklist; - Tests added for any new features; - [x] ~ran smoke~ ran full tests. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2625:969,Test,Tests,969,https://psicode.org,https://github.com/psi4/psi4/pull/2625,2,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; XC quadrature weights can become very small and thus their contributions are negligible. This PR introduces a cutoff for small weights. The grid points with small weights are not included in the final grid. Such a cutoff is a standard procedure in many programs. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] expert option `DFT_WEIGHTS_TOLERANCE` keyword (current default `1e-14`).; - [x] small error overview added; - [x] together with pruning ca. 40% faster calculation for C60 compared to `v1.3` :-); - [x] simple test added. ## Questions; - [x] which default value? -> `1e-15` conservative or `1e-14` like in ORCA. ## Checklist; - [x] all `ctest -L dft` pass. ## Status; - [x] Ready for review; - [x] Ready for merge. ------; water dimer (RKS total energy): `PBE/aug-cc-pVTZ (99,520)` econv=1e-10 dconv=1e-8. | tolerance | error | #points |; | --- | --- | ---|; | off | 0.0 | 350460 | ; | 1e-30 | 1.36e-12 | 349417 |; | 1e-25 | 1.65e-12 | 348670 |; | 1e-20 | 1.65e-12 | 346918 |; | 1e-18 | 1.68e-12 | 345747 |; | 1e-16 | 1.63e-11 | 340646 |; | 1e-15 | 2.74e-11 | 339647|; | 1e-14 | 5.73e-09 | 335089 |; | 1e-13 | 3.65e-08 | 331285 |; | 1e-12 | 3.18e-07 | 326462 |. c2 sym. C60 isomer (RKS total energy): `PBE/aug-cc-pVDZ (75,302)` econv=1e-10 dconv=1e-8. | tolerance | error | #points |; | --- | --- | ---|; | off | 0.0 | 1359000 | ; | 1e-30 -| 3.17e-10| 1229846|; | 1e-25 | -5.34e-10| 1209622|; | 1e-20 | 5.94e-10 |1183674|; | 1e-18 | 5.41e-10 |1171102|; | 1e-16 | -6.25e-10 |1156776|; | 1e-15 | 2.48e-09| 1131228|; | 1e-14 | 3.54e-09| 1123018|; | 1e-13 | 1.25e-07 |1110668 |; | 1e-12 |1.07e-06 |1085824 |. -----. *further timings*; C60 fullerene (C2h) :PBE/aug-cc-pVDZ with grid (434,75); 16 Threads; comparison to `v1.3.1`; * pruning `ROBUST`=1.33 // `1361880/1953000` grid points // dE=2E-11; * pruning `TREUTLER=1.36`// `1064520/1953000` grid points // dE=-4E-05; * pruning `ROBUST` + `screening(1e-14)` = 1.39; `1070388/195",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1581:585,test,test,585,https://psicode.org,https://github.com/psi4/psi4/pull/1581,1,['test'],['test']
Testability,"## Description; Yet another PR to get densities properly accessible on the wavefunction. This one sets the alpha and beta densities for the DF and CD methods in `dfocc` that support gradients - we should be able to close #1952. Because this is `dfocc`, I also got in some code cleanup as well. Some of the CD methods claim to have working one-electron properties, but not gradients, but there's no elaboration. To be cautious, I haven't set densities for those methods. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Exposes `dfocc` densities for methods with gradients. ## Checklist; - [x] `ctest -L ^dfo -j4`, `ctest -L ^dfm -j4`, and `ctest -L ^dfc -j4` all pass. I'm using that as a proxy for running all dfocc tests. Sadly, those aren't known. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1964:766,test,tests,766,https://psicode.org,https://github.com/psi4/psi4/pull/1964,1,['test'],['tests']
Testability,"## Description; [My](https://github.com/psi4/psi4/pull/2824) [previous](https://github.com/psi4/psi4/pull/2832) [PRs](https://github.com/psi4/psi4/pull/2834) fixed the bugs making UKS TDDFT and stability analysis incorrect, so let's enable them. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Stability analysis is now supported for unrestricted GGAs.; - [x] TDDFT is now supported for unrestricted GGAs. . ## Dev notes & details; - [x] The prohibition against VV10 is not added to this PR, but its enforcement is. The old code would have given incorrect results. ## Checklist; - [x] Tests _mostly_ pass. `test_tdscf_excitations.py` has this PR covered. The one complication is that we're failing the TDA and RPA tests for CH2 with HCTH93. My investigations lead me to suspect the fault is bad reference data, probably involving pruned integration grids. @bgpeyton has confirmed pruning as the issue and volunteered to re-generate proper data. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2849:710,Test,Tests,710,https://psicode.org,https://github.com/psi4/psi4/pull/2849,2,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; `BlockOPoints` performs additional pruning but the result is never checked. We recently hit a case where this pruning resulted in a `BlockOPoints` object with zero points. This would cause a segfault here: https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/v.cc#L262 because `ncols` would be zero. Adds a check to `OctreeGridBlocker` where the list of `BlockOPoints` is populated, if the number of points is zero then don't add it to the list. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests) All DFT test cases pass on my machine. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1525:526,test,tests,526,https://psicode.org,https://github.com/psi4/psi4/pull/1525,3,['test'],"['test', 'tests']"
Testability,"## Description; `RelPotentialInt` and associated integral classes now expose all four W integral types instead of just the W0 integrals. This PR seems way too easy. @brianz98, please let me know if there are issues. Obligatory @fevangelista and @dnascimento13 pings. ## User API & Changelog headlines. - [x] `RelPotentialInt` and associated integral classes now expose all four W integral types instead of just the W0 integrals. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Changes `RelPotentialInt` to expose W0, Wx, Wy, and Wz integrals. ## Questions; - [x] Any objections to changing an existing integral type rather than creating a new one?; - [x] Any documentation edits needed?; - [x] Do any of the users need the derivative integrals?. ## Checklist; - [ ] Are any tests necessary?; - [x] `ctest -L x2c` passes, in addition to standard tests. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3174:966,test,tests,966,https://psicode.org,https://github.com/psi4/psi4/pull/3174,2,['test'],['tests']
Testability,"## Description; `adcc` version of #2462, according to standard #2486. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Consolidate excitation energy/property variable names; - [x] Update tests:; - [x] port to pytest; - [x] test all access patterns; - [x] port PE-ADC tests; - [x] Update docs. ## Questions; - [x] Do I need to add the same kind of ""commented out"" lines as in #2462, @JonathonMisiewicz?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2513:245,test,tests,245,https://psicode.org,https://github.com/psi4/psi4/pull/2513,6,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,## Description; `cbs-xtpl-energy` test won't pass in conda-build if non-ascii present. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1380:34,test,test,34,https://psicode.org,https://github.com/psi4/psi4/pull/1380,1,['test'],['test']
Testability,"## Description; `cc` now uses `Matrix` rather than `block_matrix` for the OPDM and Lagrangian. During the course of this transition, I discovered an indexing bug in the conversion of the UHF densities to Matrix. This dates [back to 2016](https://github.com/psi4/psi4/commit/d4bbb98291afe4b500476d0d46c87ded3821bed6). As-is seen from the test values that had to change, this can lead to dramatic errors in properties. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Fixed a bug where UHF-CCSD properties were incorrect when some orbitals were singly occupied. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] `cc` now stores its Lagrangian and OPDM as `Matrix` objects rather than block_matrices rather than write them to disk; - [x] `cc` now uses the wfn based interface, rather than the disk interface, to gradients ; - [x] Adds a finite difference correctness test to UHF-CCSD one-electron properties; - [x] Much heavier use of slice technology . ## Questions; - [x] Lori, does the test look okay to you?; - [x] Should I do another check on the dipole that changed the most in our test? That change is _massive_. ## Checklist; - [x] `cc` tests pass; - [x] Edited test with incorrect reference values . ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2818:337,test,test,337,https://psicode.org,https://github.com/psi4/psi4/pull/2818,6,['test'],"['test', 'tests']"
Testability,"## Description; `compare_fcidumps` tests to 1e-10, so let's converge to 1e-10. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2376:35,test,tests,35,https://psicode.org,https://github.com/psi4/psi4/pull/2376,1,['test'],['tests']
Testability,## Description; `overload_cast` from #1448 does not play nicely with Intel compilers and pybind11 https://github.com/pybind/pybind11/issues/1649. This reverts just enough of #1448 to build again. . ## Questions; - [ ] Should we `#ifdef __INTEL_COMPILER` around the block so that gnu/clang are still using `overload_cast`?. ## Checklist; - [ ] ~Tests added for any new features~; - [x] compiles and runs a few tests. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1454:344,Test,Tests,344,https://psicode.org,https://github.com/psi4/psi4/pull/1454,2,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; add function to reset options state from dictionary. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] all the non-optking misc. from #1335 ; - [x] if you call `run_json` from within the same `import psi4` instance (as opposed to `subprocess` of `psi4 --json`), your options are all cleared by the call. Even if you just call something else that does the psi4 json call (like pyoptking), this happens. This is a little function that lets you continue **for global options only**. ```; # collect options; all_options = p4util.prepare_options_for_modules(changedOnly=True, commandsInsteadDict=False). # destroys options; optking_json_dict = optking.run_json_dict(optking_schema). # restore options; p4util.reset_pe_options(all_options); ```. ## Checklist; - [ ] Tests added for any new features; - [x] it worked a month ago. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1417:824,Test,Tests,824,https://psicode.org,https://github.com/psi4/psi4/pull/1417,1,['Test'],['Tests']
Testability,"## Description; adds O24 dataset [jcp paper](https://doi.org/10.1063/5.0043793) with two variants:; * `O24by5mb.py` - geometries with ghosted H as a midbond functions located at COM; * `O24by5.py` - geometries without midbond functions. ## Questions; - [ ] Should I modify any install script to accommodate additional files?; - [ ] Should test files be added, e.g. for three subsets (ED, DD, MX) that are defined?; - [x] I've defined constant `KCALMOL2WAVENUMBERS = 349.7551` inside the database, as paper values are in cm^-1 and psi database driver expects kcal/mol, is there a cleaner way to handle this conversion?. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2154:339,test,test,339,https://psicode.org,https://github.com/psi4/psi4/pull/2154,4,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,## Description; as it says on the tin. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2058:59,Test,Tests,59,https://psicode.org,https://github.com/psi4/psi4/pull/2058,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; as it says on the tin. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] upload Windows package to anaconda.org; - [x] conda.build bool toggles PR conda testing while master is always on. ## Status; - [x] Ready for review; - [x] Ready for merge **SQUASH**,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2123:226,test,testing,226,https://psicode.org,https://github.com/psi4/psi4/pull/2123,1,['test'],['testing']
Testability,## Description; automate docs build. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2143:221,Test,Tests,221,https://psicode.org,https://github.com/psi4/psi4/pull/2143,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; avoid Win/Linux filesystem conventions by moving selected operations to python. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Moves fisapt driver py-side; - [x] Moves writing arrays and filesystem parts of fisapt py-side; - [x] There were some options with names `sSAPT`. There's machinery that thinks all option names are all-caps, so that wasn't good.; - [x] Moves filesys in libcubeprop/cubeprop.cc py-side; - [x] ~Currently can't run cmake multiple times w/o hitting `fsapt/` dir exists~ Now just overwrites existing dirs; - [x] Adds Molecule docstrings and fixes spelling mistakes. ## Questions; - [x] @jturney what’s this supposed to do when directory already exists? https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfilesystem/path.cc#L53 According to `mkdir` docs, it should throw `EEXIST` error? that’s the behavior i’ve imitated in python. but if that’s the case, how has ctest be working on re-run all this time.; - [ ] Rob was exporting `FISAPT.scalars()` as direct map. I changed to map& to match FISAPTSCF. Rob was never using this in code, but since it was exported to python, possibly scirpts are affected?. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1098:1272,test,tests,1272,https://psicode.org,https://github.com/psi4/psi4/pull/1098,2,['test'],['tests']
Testability,## Description; can't have internal `.X()`s or the string deprcation warning triggers and mints8 fails. ## Checklist; - [ ] ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2070:125,Test,Tests,125,https://psicode.org,https://github.com/psi4/psi4/pull/2070,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; closes #1943 ; reviewers, any reason for the `RHS.original_coef_` inconsistency formerly?. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1945:127,Test,Tests,127,https://psicode.org,https://github.com/psi4/psi4/pull/1945,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; collection of small changes (see below). You can calculate the contribution of any delta correction using the db function:; ```; dcbs=[{""wfn"": ""hf"", ""basis"": ""cc-pvdz""}, {""wfn"": ""mp2"", ""basis"": ""cc-pVDZ""}, {""wfn"": ""ccsd(t)"",""wfn_lo"":""ccsd"", ""basis"": ""minix""}]; db(cbs,'hbc6',cp='on',cbs_metadata=dcbs,subset='small',tabulate=['CBS DELTA1 TOTAL ENERGY']); ```. ## Features; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Delta correction `CBS {stage name} TOTAL ENERGY` variable from `cbs` function. E.g. `CBS DELTA1 TOTAL ENERGY`; - [x] removes a random `~`. Interferes with geometry optimizer print. ## Checklist; - [x] Tests added for any new features. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2034:687,Test,Tests,687,https://psicode.org,https://github.com/psi4/psi4/pull/2034,1,['Test'],['Tests']
Testability,## Description; comment line in cceom code. Test of new fork. ## Todos; Notable points that this PR has either accomplished or will accomplish.; - [ ] Feature1. ## Questions; - [ ] Question1. ## Status; - [ X] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/499:44,Test,Test,44,https://psicode.org,https://github.com/psi4/psi4/pull/499,1,['Test'],['Test']
Testability,"## Description; deconstruct the pybind11_add_module so that library is SHARED but Py linking is MODULE. give this a try for Forte, @lcyyork. * [x] Works for v2rdm locally (L); * [x] works for J. Turney locally (M); * [x] works for v2rdm conda package (L); * [x] works for Forte for York on Azure w/o tests (L); * [ ] works for Forte for York on Azure w/tests (L). Unless there's reasons to pursue the dual library approach, I vote for moving forward on this. ## Status; - [x] Ready for review; - [x] Ready for merge **SQUASH**",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2104:300,test,tests,300,https://psicode.org,https://github.com/psi4/psi4/pull/2104,2,['test'],['tests']
Testability,"## Description; finish off low-cepa testing and API standardization. ## Todos; - [x] df-lccd from dfocc (tested against @JonathonMisiewicz's p4n impl); - [x] cd-lccd from dfocc (tested against itself); - [x] added ability to do freq with nonphysical masses #1903 (needs qcel 0.15.1); - [x] bumped qcel to v0.15.1; - changes to test_qcel_molparse_to_string are formatting, and updating against expanded test file in qcel. no need for review.; - [x] bumped qcng to v0.15.0; - [x] activated stdsuite. only a couple min extra tests are run in quick. ## Questions; - [x] @bozkaya, you weren't printing spin components for CD-LCCD as you do for DF-LCCD, but the variables `ElccdAA`, etc. were present and contained plausible numbers for UHF. I went ahead and stored the variables so CD could be as capable as DF. Is this sound? (I'll repeat this Q in a separate comment b/c I'm not sure of GH notifications upon edit.). ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1937:36,test,testing,36,https://psicode.org,https://github.com/psi4/psi4/pull/1937,8,"['Test', 'test']","['Tests', 'test', 'tested', 'testing', 'tests']"
Testability,## Description; fix json-schema-ghost test. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1730:38,test,test,38,https://psicode.org,https://github.com/psi4/psi4/pull/1730,1,['test'],['test']
Testability,## Description; fix up simint and erd. ~**Contains debug printing which should be removed before final merge**~. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] stops if you try to build simint w/Intel2018; - [x] decouples simint and erd to reveal broken erd interface; - [x] passes extra flags the absence of which can lead to empty mangling header; - [ ] fix erd interface. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1037:463,Test,Tests,463,https://psicode.org,https://github.com/psi4/psi4/pull/1037,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; fixes #1284 by forcing flush in `core.print_out`. Similar to what is done in `PsiOutStream.cc` is already.; Perhaps @PeterKraus can test it, as he was the only one confirming the issue. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1300:148,test,test,148,https://psicode.org,https://github.com/psi4/psi4/pull/1300,3,['test'],"['test', 'tests']"
Testability,## Description; follow up on the #2154 since in the heat it got merged before I was done with it. ## Todos; - [x] adds test-case for O24; - [x] cleans up the `TAGL` . ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2252:119,test,test-case,119,https://psicode.org,https://github.com/psi4/psi4/pull/2252,4,"['Test', 'test']","['Tests', 'test-case', 'tests']"
Testability,## Description; gau2grid now provides spherical basis sets in `gaussian` _or_ `cca` ordering. let's make sure we get the right one!. ~**This won't work until a PR comes into g2g and versions/git tags get bumped here.**~. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] detect/build the gaussian g2g; - [x] bump min g2g version so the components are there. ## Checklist; - [x] ran quicktests against g2g dgasmith/gau2grid#11; - [x] full tests pass locally. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1035:503,test,tests,503,https://psicode.org,https://github.com/psi4/psi4/pull/1035,1,['test'],['tests']
Testability,"## Description; getting intermittant errors < 3.e-9, so relaxing fchk tolerances a bit. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2063:108,Test,Tests,108,https://psicode.org,https://github.com/psi4/psi4/pull/2063,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; heals up the remaining broken test cases except for cookbook-rohf-rot. ## Todos; - [x] ecp: now assert Z on molecule when ordinary basis applied, not just E… …; - [x] df: df_fitting_condition was defaulting to 1e-12 unless explicitly set; - [x]better format error and also print to terminal. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1494:46,test,test,46,https://psicode.org,https://github.com/psi4/psi4/pull/1494,5,"['Test', 'assert', 'test']","['Tests', 'assert', 'test', 'tests']"
Testability,"## Description; https://github.com/psi4/psi4/issues/1439#issuecomment-455799123 is a good idea prototyped here. Instead of always defaulting the cast-up basis to 3-21g, choose from within family. Here, only def2 is rolled out. Also, not integrated with basis blocks, so active for `set basis def2-tzvpp`, not `basis {assign I def2-tzvppd}` in original example. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] basis guess default Dunning, Petersson (zapa), and Jensen families to `pcseg-0`, which is 3-21g sized. none of these are ECP; - [x] basis guess default Karlsruhe to `def2-sv(p)`, so that ECP present for both orbital and fitting; - [x] remainder (incl. Pople and any custom) default to 3-21g. EDIT: Pople explicitly defaulting to 3-21g; - [x] EDIT: replaced DUAL in [this table](http://psicode.org/psi4manual/master/basissets_byfamily.html) with GUESS. - [x] I got `str not a callable fn` in error handling, so fixed up the error/trackback handling a bit. now prints to screen, too. EDIT: I think this got added elsewhere. ### contains #1494 (urgent fixes from this PR) so will need rebasing before final consideration. ## Testing; - [x] full ctest and pytest passes (except for dcft8, but that's a known issue). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1484:1181,Test,Testing,1181,https://psicode.org,https://github.com/psi4/psi4/pull/1484,1,['Test'],['Testing']
Testability,"## Description; improve CI testing. ## Todos; Notable points that this PR has either accomplished or will accomplish.; - [x] Use miniconda as a source for cmake, python, numpy, libint, libefp, gdma, libxc; - [x] Add a build case with python 3.5 (the clang 3.6, since it's the shortest); - [x] No more AM<=4 restrictions on quicktests. We should probably continue to keep tests runable w/default (AM=5) integrals, but Travis now using AM=7.; - [x] solicit Release Notes through PR template; - [x] fix up tagline; - [x] make docs build, and thus conda package, py3 compatible. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/510:27,test,testing,27,https://psicode.org,https://github.com/psi4/psi4/pull/510,2,['test'],"['testing', 'tests']"
Testability,"## Description; linalg::triplet currently does matrix multiplication in the same order (AB)C. Sometimes, A(BC) may be more efficient, per observation of @zachglick . ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] More efficient linalg::triplet call. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2053:330,Test,Tests,330,https://psicode.org,https://github.com/psi4/psi4/pull/2053,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; make v2rdm work again. ## Todos; - [x] bring back `Vector::subtract` in C API to match `Matrix::subtract`.; - [x] add v2rdm7 test case; - [x] bump what version of v2rdm gets cloned. ## Checklist; - [ ] ~Tests added for any new features~; - [x] all 7 v2rdm tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1505:141,test,test,141,https://psicode.org,https://github.com/psi4/psi4/pull/1505,3,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,"## Description; misc. ## Todos; - [x] addressed discrepancy in high ang mom conventions in basis sets. `L=7` and so forth is favored, but HIJ and HIK both accepted. internal basis set library transformed: 'L=7' <- 'K' . see https://github.com/MolSSI-BSE/basis_set_exchange/issues/121, see https://github.com/psi4/psi4/issues/628, closes https://github.com/psi4/psi4/issues/1992 @susilehtola @bennybp ; - [x] consolidated the weird-basis tests (skip AM) into pytest; - [x] @CDSherrill and @edeprince3 confirmed that one should use the low mem algorithm in fnocc for performance, so changed the default; - [x] lets one run pcmsolver through schema by replacing pcm_helper closes https://github.com/psi4/psi4/issues/1986 . works, but hit problem where you can't start pcmsolver the py module afresh, so it complains about units already set. @robertodr contacted; - [x] libiomp5 (Intel) and libomp (LLVM) are interchangeable. relaxed a test on conda packages for mac to accommodate. ## Questions; - [ ] anyone else having problems with mbis3 quadrupole?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2003:437,test,tests,437,https://psicode.org,https://github.com/psi4/psi4/pull/2003,5,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,## Description; misc. ## Todos; - [x] adds a specific def2-qzvpp back so we can check aliases are working; - [ ] ~supply `KMP_AFFINITY` if not set by user. untested~; - [x] fix the `omp.h` not found that's breaking all the Azure Clang builds.; - [x] update the Windows image since Azure is canceling VS2015 next month - https://devblogs.microsoft.com/devops/removing-older-images-in-azure-pipelines-hosted-pools/. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1822:434,Test,Tests,434,https://psicode.org,https://github.com/psi4/psi4/pull/1822,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; misc. ## Todos; - [x] one more change to get psi4-dev package working on mac; - [x] make mbis-3 a reliable test. credit to @zachglick for the diagnosis and fix. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2005:123,test,test,123,https://psicode.org,https://github.com/psi4/psi4/pull/2005,4,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,"## Description; misc. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] let plugins work with pybind11 v2.6.0; - [x] there was extra testing in the == of cbs() tasks when options was involved (e.g., delta(ae - fc)). but I don't understand it, and it was preventing deduplication. so fixed it; - [x] Susi noticed trouble with ENABLE_XHOST in that the two options directed at Intel and GCC are valid cross-options. this is a workaround. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2028:190,test,testing,190,https://psicode.org,https://github.com/psi4/psi4/pull/2028,1,['test'],['testing']
Testability,## Description; misc. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] one more nix py35; - [x] try to get around below in https://lgtm.com/projects/g/psi4/psi4/logs/languages/lang:cpp. ```; [2019-03-04 21:34:07] [build] Scanning dependencies of target libxc_external; [2019-03-04 21:34:07] [build] [ 2%] Creating directories for 'libxc_external'; [2019-03-04 21:34:07] [build] [ 4%] Performing download step (git clone) for 'libxc_external'; [2019-03-04 21:34:07] [build] Cloning into 'libxc_external'...; [2019-03-04 21:34:10] [build] fatal: could not read Username for 'https://gitlab.com': No such device or address; [2019-03-04 21:34:10] [build] fatal: The remote end hung up unexpectedly; [2019-03-04 21:34:10] [build] Cloning into 'libxc_external'...; [2019-03-04 21:34:11] [build] fatal: could not read Username for 'https://gitlab.com': No such device or address; [2019-03-04 21:34:12] [build] fatal: The remote end hung up unexpectedly; [2019-03-04 21:34:12] [build] Cloning into 'libxc_external'...; [2019-03-04 21:34:13] [build] fatal: could not read Username for 'https://gitlab.com': No such device or address; [2019-03-04 21:34:13] [build] fatal: The remote end hung up unexpectedly; [2019-03-04 21:34:13] [build] -- Had to git clone more than once:; [2019-03-04 21:34:13] [build] 3 times.; [2019-03-04 21:34:13] [build] CMake Error at /opt/src/_lgtm_build_dir/external/upstream/libxc/libxc_external-prefix/tmp/libxc_external-gitclone.cmake:66 (message):; [2019-03-04 21:34:13] [build] Failed to clone repository: 'https://gitlab.com/libxc/libxc.git'; ```. ## Checklist; - [ ] ~Tests added for any new features~; - [x] ran quicktests from libxc tarball. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1567:210,log,logs,210,https://psicode.org,https://github.com/psi4/psi4/pull/1567,2,"['Test', 'log']","['Tests', 'logs']"
Testability,"## Description; misc. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [ ] MKL _can_ link with libgomp on Linux+Gnu, but it can link with libiomp5 everywhere, incl. Mac (icpc, g++, clang++) and Linux (icpc, g++). Moreover in practice, Mac+Gnu+MKL+gomp leads to n-thread-dependent energies (note that none of our testing can catch this). So switching clang and gnu to intel interface and thread libraries when built with MKL. Note that the `-fno-openmp` is b/c gnu takes that slight provocation as signal to link in libgomp, and then you get _two_ threading libraries!; * **User-Facing for Release Notes**. ## Questions; - [x] Notice to @robertodr that math detection getting shaken up again. ## Status; - [x] Ready to go --- Nope, I just want to see what CI thinks of this",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/767:374,test,testing,374,https://psicode.org,https://github.com/psi4/psi4/pull/767,1,['test'],['testing']
Testability,## Description; move dft-bench and vibanalysis tests to pytest. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] move the 4 dft-bench tests to pytest with parameterization; - [x] move the vibanalysis test to pytest; - [x] add IR intensity benchmarks from Cfour so #1382 has something to test against; - [x] delete the ctest versions; - [x] add in `pytest.mark.long` to avoid running some bench routinely. ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1414:47,test,tests,47,https://psicode.org,https://github.com/psi4/psi4/pull/1414,8,"['Test', 'benchmark', 'test']","['Tests', 'benchmarks', 'test', 'tests']"
Testability,## Description; new multipole interface to replace `ExternalPotential`. ## Todos; - [x] `qcel.models.Singlepole` into c-side `BasisSet` plus coeff array. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1720:174,Test,Tests,174,https://psicode.org,https://github.com/psi4/psi4/pull/1720,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; now tests the ""next"" half of #2821 on GHA. Linux is testing ""next"" and Mac is testing master. ## Checklist; - [x] activated existing test. (if there are other changes, I'll delete the commented lines). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2835:20,test,tests,20,https://psicode.org,https://github.com/psi4/psi4/pull/2835,4,['test'],"['test', 'testing', 'tests']"
Testability,"## Description; now we can have >1 detci test in the whole pytest suite. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] cepa directed to fnocc was running conv when user requested (unavailable) df. now stops. thanks, @JonathonMisiewicz ; - [x] close detci files so independent psiapi calcs possible. ## Questions; - [x] @CDSherrill should `CI_FILE_START` be shifted so others aren't confused by seeming overlap with https://github.com/psi4/psi4/blob/master/psi4/include/psi4/psifiles.h#L77-L81 ? maybe 350. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1926:41,test,test,41,https://psicode.org,https://github.com/psi4/psi4/pull/1926,4,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,"## Description; once more, try for a clean conda build. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] I think the conftest changes will eliminate the markers warnings for _installed_ psi4 pytest testing; - [x] the py36 conda build failed one of the time tests for @andyj10224's triplet tests. I couldn't get it to trigger again in a py39 env, but multithreaded tests and time assertions are always iffy, so skipping those. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2094:256,test,testing,256,https://psicode.org,https://github.com/psi4/psi4/pull/2094,5,"['assert', 'test']","['assertions', 'testing', 'tests']"
Testability,"## Description; out, damned global!. ## Todos; - [x] removes `P::e.parent_symmetry` and uses a read_options keyword (global, `!expert`) in its place. this is a test before distributed driver roll-out. (globals don't play well with json.) (@JonathonMisiewicz, I was misremembering when I though optking still used this too.) ; - [x] unused but adds definition and export of Jonathon's `PointGroup.full_label()` that has directionality, e.g. `C2v(Z)`.; - [x] sync `Wavefunction.energy_`, `gradient_`, `hessian_` with qcvars `CURRENT_*` on wfn (not in `P::e.globals`). ## Checklist; - [ ] ~Tests added for any new features~; - [x] full pytest and ctest pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1575:160,test,test,160,https://psicode.org,https://github.com/psi4/psi4/pull/1575,2,"['Test', 'test']","['Tests', 'test']"
Testability,## Description; provide immediate warning of upstream or downstream integration failures. ## Todos; - [ ] Feature1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1555:136,Test,Tests,136,https://psicode.org,https://github.com/psi4/psi4/pull/1555,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; pyddx is in rapid development, so I think psi4 needs a PR to catch up to v0.4. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2921:115,Test,Tests,115,https://psicode.org,https://github.com/psi4/psi4/pull/2921,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; set_Ca treats Cb_so_ incorrectly in the same orbs case.; I did not trigger the bug actively, but it looks like a clear bug to me. The bug won't have triggered in any meaningful code, because every algorithm queries same orbs and therefore only uses Ca_so_ if(same_orbs). However it should be fixed regardless. Please review carefully. ## Checklist; - [ ] Tests added for any new features; ctest -L quick ran through without errors. ## Status; - [X] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1128:371,Test,Tests,371,https://psicode.org,https://github.com/psi4/psi4/pull/1128,1,['Test'],['Tests']
Testability,"## Description; shorten quicktests for Travis' sake. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] moved `sapt6` and `nbody-he-cluster` out of quicktests; - in tests, make sure you say `#TEST`, not `# TEST`; * **User-Facing for Release Notes**. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/583:229,test,tests,229,https://psicode.org,https://github.com/psi4/psi4/pull/583,3,"['TEST', 'test']","['TEST', 'tests']"
Testability,"## Description; still pretty ragged, so don't review. useable on linux. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] RN 1; - [ ] RN 2. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3016:580,Test,Tests,580,https://psicode.org,https://github.com/psi4/psi4/pull/3016,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; technical improvements to docs, part 2. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] **bug fix and energy change** these changes to RI basis for sto-3g, sto-6g, 3-21g https://github.com/psi4/psi4/pull/2146/files#diff-343949bff4fe0802df72641969d7aceb07a122625e5b70d95c6e2757e4ee3c92R435 now refer to a real basis set, so in practice, calcs will use the svp now rather than the qzvpp. tests sapt-ecp and nbody-levels have been tweaked to pass. this will lead to real numbers changes in psi4 runs, though hopefully they'll be a little quicker, too. apparently hunting docs ref errors can fix real bugs; - [x] docs now pass `sphinx-build -b linkcheck`, meaning that all the external hyperlinks in the docs are ok or redirect, none broken (except for a few that are excused in conf.py.in). 300 -> 0 broken links!; - [x] started on the `sphinx-build -b html -n` nitpicky mode. 1300 -> 1000; - [x] fixed all the `docstring of psi4.core.PyCapsule.dfh:: WARNING: py:class reference target not found: psi::DFHelper`; - these happen when exports use or return a class that hasn't yet been pb11 exported, https://pybind11.readthedocs.io/en/stable/advanced/misc.html?highlight=docstring#avoiding-c-types-in-docstrings; - `OneBodySOInt` and `psio_entry` added; - a couple docstrings edited to figure out how parser wants str enums in docstring; - all other export_ and core.cc changes are rearrangements only. ## Checklist; - [ ] ~Tests added for any new features~; - [x] full tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge **SQUASH**",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2146:461,test,tests,461,https://psicode.org,https://github.com/psi4/psi4/pull/2146,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; test module plugin on windows. ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2099:16,test,test,16,https://psicode.org,https://github.com/psi4/psi4/pull/2099,1,['test'],['test']
Testability,"## Description; testing, minao, build fixes. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Update Psi4 CMake version to 1.1 and tell plugins to seek it. Feel free to toggle if it gives problems in transition.; - [x] Fix build bug where working default compilers were required for pybind11, even if `CMAKE_CXX_COMPILER` (and `C`) passed in; - [x] Semi-brings Forte into endorsed plugin and tested status. Need to resolve Options & plugin loading or employ hack to make pytest Forte work, and that's a moving target, so disabled for now.; - [x] Reenable scf hessian testing, incl. one in quicktests; - [x] Get rid of threading test that was xfailing and unnerving everyone. Document pytest output.; * **User-Facing for Release Notes**; - [x] Add Sc–Kr (Br already there) cc-pvtz MINAO basis sets from CiCi. ## Questions; - [ ] Need to resolve MINAO definition for Groups I & II at some point. ## Status; - [x] Ready to go – Should merge this near #725, as both touch fundamental headers.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/726:16,test,testing,16,https://psicode.org,https://github.com/psi4/psi4/pull/726,4,['test'],"['test', 'tested', 'testing']"
Testability,## Description; try to fix travis. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1197:210,Test,Tests,210,https://psicode.org,https://github.com/psi4/psi4/pull/1197,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; very much misc. ## Todos; - [x] update CheMPS2 target to v1.8.9. update min to 1.8.7. I've no evidence that the old min doesn't work, but there have been some build commits since then.; - [x] fill in missing tests comment lines; - [x] since the same feature has broken v2rdm _twice_ in the past month, let's back up the target commit and avoid it.; - [x] update some plugin template syntax, add missing v2rdm7 syntax. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1515:224,test,tests,224,https://psicode.org,https://github.com/psi4/psi4/pull/1515,1,['test'],['tests']
Testability,"## Description; w/o this, tests run fine in place but fail upon install. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2263:26,test,tests,26,https://psicode.org,https://github.com/psi4/psi4/pull/2263,1,['test'],['tests']
Testability,"## Description; ~Mostly a code demo, so I'll cancel the CI. upstream master isn't quite ready yet, but this works locally on linux.~. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Add Einsums as optional build dependency via the usual `-D ENABLE_Einsums=ON` arg.; - [x] Added a dummy module that uses Einsums both as a model and so we have something to check in tests w/o imposing on fnocc. Conda packages are available for Linux & Mac (Intel & Silicon); - [x] Tried some docs tweaks again. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3050:489,test,tests,489,https://psicode.org,https://github.com/psi4/psi4/pull/3050,4,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; ~Nominally a~ clarification of some deceptive commands. ~Really to test whether qcf snowflake testing is as broken as I see on another branch.~. ## Dev notes & details; - [x] These commands have tripped up experienced psi4 developers (counting me). They actually can't do anything when used py-side on a built molecule (https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/molecule.cc#L856-L872). They are instead for preparing a molecule before it's finalized by `update_geometry()`. So let's be nice and have a findable warning. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3029:83,test,test,83,https://psicode.org,https://github.com/psi4/psi4/pull/3029,2,['test'],"['test', 'testing']"
Testability,"## Description; ~This replaces #919, which I don't want to overwrite just yet b/c it has history and some review comments. This is up-to-date wrt master (10 Apr) and has had a recent pyvib2 rebased through (9 Apr). All tests pass. This is **not** ready to look at b/c it still includes #834 . When that makes it into master, I'll rebase it through again and then~ this PR should only include fully-working py-side scf and mol parsing (`create_molecule_from_string` is gone in this code). This is my last sequence PR before splitting away qcdb. I suggest it form the start of `v1.3` . ~Since originally posted (+27k/–10k), this PR has had #834 subtracted from it (now +13k/–7k). It is built atop #965, so I wouldn't review until that gets pulled in and subtracted from this. What does need answering soonish is whether for 1.2/1.3 purposes, the remaining commits of this PR should be separated further.~. ~Now this has had #965 rebased through, it should be stable for a good while. It now has size (+9k/–6k). There doesn't seem much interest in promoting the below to 1.2, so no need for further subdivision.~. This has now had **v1.2 rebased through** so I sincerely hope it's been kneaded for the last time. ## Todos: Py-side SCF/PCM/EFP (1.3); * **Developer Interest**; - [x] SCF iterations moved py-side; - [x] includes control of MOM, DIIS, damping, soscf, frac, efp; - [x] SCF finalize, stability, post-iterations, printing moved py-side; - [x] Rework a good bit of Wfn::HF::common_init() to minimize the convergence helper controllers that are c-side; - [x] A couple export/def bugs fixed in Wfn::HF and more fns exported and moved to public in class; - [x] PCMSolver interface reworked for py-side; - [x] libefp EFP object moved from c-side `P::e.EFP` to a py-side attached EFP attribute on the `psi4.core.Molecule` object.; - [x] Psi4 forgot about the c-side EFP object in bin, lib, globals, exports (still in options); - [x] EFP/EFP calcs moved purely py-side; - [x] SCF/EFP calcs carry out ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/953:219,test,tests,219,https://psicode.org,https://github.com/psi4/psi4/pull/953,1,['test'],['tests']
Testability,"## Description; ~adds electric dipole polarizability, optical rotation, and electric dipole / magnetic dipole tensors to the `can_do_properties_` list so that they are correctly passed into `ret.extras` during a `run_qcshema` call. @loriab told you I'd ping you soon.~. both `omega` and `gauge` are picked up properly from Atomic Input keywords as well. . UPDATE: `_can_do_properties` was really acting as more of a ""default properties"" list, so the logic in `run_qcschema` had to be changed instead. . ## Todos; - [x] `_can_do_properties` -> `_default_properties`; - [x] remove can-do filter from `run_qcschema` (kept default properties); - [x] `run_qcschema` checks for `properties` list in `json['kwargs']` now instead of `json['model']`; - [x] new test . ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2126:450,log,logic,450,https://psicode.org,https://github.com/psi4/psi4/pull/2126,2,"['log', 'test']","['logic', 'test']"
Testability,"## Description; ~~Address some convergence issues brought up by @bwb314 in psi4/psi4#773 according to solutions advanced by @dgasmith~~ Tidies and patches some MKL and Cfour interface issues. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] tidies doc for `sad_frac_occ` ~~and turns it on by default~~; - [x] temporarily revert some MKL details that were preventing iomp5 from being found and possibly turning off threading (discovered by @andysim and @bennybp); - [x] allow Cfour interface to format ESTATE_SYM properly, convert DROPMO to array type; - [x] allow Cfour interface to properly write out exponents for very tight fns to GENBASE; * **User-Facing for Release Notes**. ## Questions; - ~~4 test cases failing, how to handle (see psi4/psi4#773)~~. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/777:766,test,test,766,https://psicode.org,https://github.com/psi4/psi4/pull/777,1,['test'],['test']
Testability,"## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Cleanup `occ` by migrating a custom Matrix class to use Matrix instead.; - [x] Note: We are not deleting some potentially large matrices. In those cases, there are no other demands on memory for the rest of the function, so we can let scope rules handle that resource management. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2781:574,test,tests,574,https://psicode.org,https://github.com/psi4/psi4/pull/2781,2,['test'],['tests']
Testability,"## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Fix a literal one-in-a-million random bug causing Psi4 to [crash](https://dev.azure.com/psi4/psi4/_build/results?buildId=6488&view=logs&j=f31c9f97-4411-58e7-49ac-fc73f645e6b6&t=140ee297-051b-5396-a86d-f0d06cd83763).; ; ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3180:371,log,logs,371,https://psicode.org,https://github.com/psi4/psi4/pull/3180,1,['log'],['logs']
Testability,"## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Fix segfaults @loriab found. ## Checklist; - [x] ROHF cc tests still pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2826:297,test,tests,297,https://psicode.org,https://github.com/psi4/psi4/pull/2826,1,['test'],['tests']
Testability,"## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Remove uses of `new` from `v.cc`. ## Checklist; - [x] Quick tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2772:300,test,tests,300,https://psicode.org,https://github.com/psi4/psi4/pull/2772,1,['test'],['tests']
Testability,"## Known Bugs for RC1. * [ ] Functionals wrong, [description](https://github.com/psi4/psi4/pull/961#issuecomment-385090273). Only seen for one computer, so just watch and report.; * [x] FCIDUMP for UHF refs failing, [description](https://github.com/psi4/psi4/issues/980). Shows up [in test case](https://github.com/psi4/psi4/blob/master/tests/fcidump/input.dat#L15-L23), currently suppressed.; * [x] New `MemJK` gives wrong answers when auxiliary basis is Cartesian, [for description, search ""cart"" here](https://github.com/psi4/psi4/pull/961); * [ ] ERD and SIMINT show all sorts of broken-like behavior upon interface. Only compilation I've gotten to work is a pure-GNU one, none with Intel. So some Intel vectorization operation is the suspect (though why is it still failing with debug ...).; * EDIT: simint problem is with Intel 2018 compilers; * 13 Jun EDIT: reasonable simint + Intel workaround is to compile simint with Intel 2017 compilers and feed that to a Psi4 compiled with Intel 2018. This is what's happening for the conda packages; * 13 Jun EDIT: ERD interface is broken and probably has been throughout v1.1. Possibly will be deprecated unless there's an uproar.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/960#issuecomment-385264655:285,test,test,285,https://psicode.org,https://github.com/psi4/psi4/issues/960#issuecomment-385264655,2,['test'],"['test', 'tests']"
Testability,"## OEProp bug fix. Some OEProp routines contracted Cartesian density matrices with spherical harmonic integrals, which is bad (and caused by me, I believe). Thanks to Coleman Howard in @lothian's group for pointing this out. For Cartesian basis sets, there was never a problem. For spherical harmonics, the multipoles were bad only if the origin was chosen such that it broke symmetry; spherical harmonic fields and ESPs were all wrong. I added a test for the multipoles, because they're available in Psi vars (reference values confirmed by Molpro). I also confirmed the ESP and Fields on a small grid against Molpro values, but they're not available in Psi vars, so are harder to test.; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/447:447,test,test,447,https://psicode.org,https://github.com/psi4/psi4/pull/447,2,['test'],['test']
Testability,"## Short Description; This PR reverts part of #2280 and restores the ability of `frac` to handle zero occupation number. At the cost of storing extra C matrices, this fixes a pre-#2280 bug in the handling of zero occupation number. Closes #2284. ## Long Description; The `frac` code is designed to allow SCF with fractional occupation numbers. Physically, this is an ensemble of Slater determinants, where the probabilities of a given orbital being occupied are uncorrelated. This is implemented by changing the C matrix from meaning ""thing that contains orbitals"" to ""thing that produces the density"", and incorporating the occupation numbers into the definition of the C matrix by multiplying by the occupation numbers. These are divided out after SCF to restore the original meaning of C. Now, in the case of zero occupation number, multiplying by zero cannot be inverted, so the pre-#2280 code just left the orbitals. This is nonsense behavior, and #2280 banned the case of zero occupation number: the orbital should never have been included in `frac` in the first place if your use case was to describe a single ensemble. What I didn't realize was that there were legitimate use cases for this: if you had multiple ensembles and wanted to track what happens as the occupation number of one goes to zero. This is used by `frac_traverse`, so I broke the test. This slipped through the cracks because the test wasn't labeled as a frac test. This PR allows frac to treat zero occupation number, and it corrects the previous pathological handling of the C matrix with zero occupation number by changing how we generate the restored C matrix: instead of inverting multiplication, we store the matrix where we never multiplied obitals by occupation numbers in the first place. This change keeps the symmetry fixes of #2280. ## Checklist; - [x] frac tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2290:1357,test,test,1357,https://psicode.org,https://github.com/psi4/psi4/pull/2290,4,['test'],"['test', 'tests']"
Testability,"## Small benchmark. The following timings were obtained for H2O from 3 ""takes"", where in each take, the; integral is repeatedly evaluated 15x. The result shown here is that of the fastest take, divided by the number of repeats (i.e., 15 here). The performance of M-D is actually quite nice -- of course one could tweak it a little bit here and there, but that's not needed right now IMHO. The code snippet from my benchmark script looks sth like:; ```Python; takes = 3; repeat = 15; for b in bas:; for m in [1, 4, 8, 16, 24, 36]:; basis = psi4.core.BasisSet.build(mol, 'orbital', b); mints = psi4.core.MintsHelper(basis); key = f""{b}/m = {m}""; keys.append(key); print(key); for _ in tqdm(range(takes)):; with timer.record(key):; for i in range(repeat):; M = mints.ao_multipoles(order=m, origin=[1.0, 2.0, 3.0]); for k in keys:; best = timer.best(k) / repeat; print(f""{k:<15} | {best * 1000:8.2f} ms""); ```. ### Results. | basis set | order | M-D | OS |; |-----------|-------|------------|------------|; | cc-pvdz | 1 | 0.11 ms | 0.20 ms |; | | 4 | 0.46 ms | 0.73 ms |; | | 8 | 1.87 ms | 2.19 ms |; | | 16 | 11.25 ms | 10.88 ms |; | | 24 | 47.11 ms | 43.30 ms |; | | 36 | 193.20 ms | 177.40 ms |; | cc-pvtz | 1 | 0.27 ms | 0.52 ms |; | | 4 | 1.34 ms | 2.19 ms |; | | 8 | 5.97 ms | 7.36 ms |; | | 16 | 46.39 ms | 47.05 ms |; | | 24 | 172.76 ms | 170.22 ms |; | | 36 | 742.18 ms | 725.64 ms |; | cc-pvqz | 1 | 0.81 ms | 1.53 ms |; | | 4 | 4.16 ms | 7.12 ms |; | | 8 | 20.47 ms | 26.56 ms |; | | 16 | 153.60 ms | 168.69 ms |; | | 24 | 543.86 ms | 579.47 ms |; | | 36 | 2327.06 ms | 2436.51 ms |; | cc-pv5z | 1 | 2.09 ms | 4.37 ms |; | | 4 | 12.59 ms | 22.29 ms |; | | 8 | 63.34 ms | 84.20 ms |; | | 16 | 457.24 ms | 522.29 ms |; | | 24 | 1634.66 ms | 1807.03 ms |; | | 36 | 6654.10 ms | 7198.05 ms |",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2496#issuecomment-1078476272:9,benchmark,benchmark,9,https://psicode.org,https://github.com/psi4/psi4/pull/2496#issuecomment-1078476272,2,['benchmark'],['benchmark']
Testability,"## Small benchmark; The performance issues are resolved. :tada: As in #2496, only for small basis set angular momentum, the old code is faster than M-D, but for larger basis set/angmom, M-D outperforms the OS code. Performed as in #2496. Here, the molecule is para-nitroaniline (typical example for EFP/PE :smile:). ### Results; | basis | order | M-D [ms] | OS [ms] | ratio M-D/OS |; |----------------------|-------|----------|---------|-------------|; | cc-pvdz (nbf = 170) | 0 | 5.75 | 5.45 | 1.05 |; | | 1 | 9.55 | 7.72 | 1.24 |; | | 2 | 17.69 | 12.06 | 1.47 |; | | 3 | 30.41 | 19.61 | 1.55 |; | cc-pvtz (nbf = 384) | 0 | 14.2 | 14.02 | 1.01 |; | | 1 | 27.75 | 25.62 | 1.08 |; | | 2 | 55.37 | 50.41 | 1.1 |; | | 3 | 99.74 | 89.52 | 1.1 |; | cc-pvqz (nbf = 730) | 0 | 43.66 | 45.69 | 0.96 |; | | 1 | 94.84 | 101.92 | 0.93 |; | | 2 | 197.61 | 222.04 | 0.89 |; | | 3 | 366.13 | 428.15 | 0.85 |; | cc-pv5z (nbf = 1240) | 0 | 132.84 | 160.85 | 0.83 |; | | 1 | 323.07 | 406.33 | 0.8 |; | | 2 | 694.14 | 942.28 | 0.74 |; | | 3 | 1291.59 | 2011.75 | 0.64 |",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2504#issuecomment-1081633908:9,benchmark,benchmark,9,https://psicode.org,https://github.com/psi4/psi4/pull/2504#issuecomment-1081633908,1,['benchmark'],['benchmark']
Testability,## This test case dumps a core file and crashes on a RHEL7 machine. ```; No. Vib. Freq. (cm^-1) Vib. Temp. (K); 1 1689.930 2431.429; 2 3820.654 5497.063; 3 3926.512 5649.369. Component Thermal Energy Cv S; kcal/mol cal/(mol K) cal/(mol K); Electronic 0.000 0.000 0.000; Translational 0.889 2.981 34.608; Rotational 0.889 2.981 10.521; Vibrational 13.492 0.038 0.005; Total 15.270 6.000 45.135. cm^(-1) au kcal/mol; Zero-point energy 4718.5485 0.02149929 13.4910. Energies in Hartree/particle: Correction Total; Energy (0 K) 0.02149929 -76.21997075; Internal energy 0.02433406 -76.21713598; Enthalpy 0.02527824 -76.21619180; Gibbs Free Energy 0.00383333 -76.23763671; ```. The computed vector. # #; Irrep: 1; 1: 1689.9300844; 2: 3820.6544533; 3: 3926.5124944. The reference vector. # #; Irrep: 1; 1: 1689.9409000; 2: 3820.4305000; 3: 3926.3098000,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/138:8,test,test,8,https://psicode.org,https://github.com/psi4/psi4/issues/138,1,['test'],['test']
Testability,"## This will be backported to branch 1.8.x for v1.8.3, but it has already been patched into c-f builds as of v1.8.2 `_1`. ## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] test py312 where possible (mac py312 works, but to keep testing legacy qcfractal (until psi4 v1.9), need to stick with py39); - [x] switch azure windows to miniforge, so it doesn't spend 18m switching default channels and doing the solve to get mamba. (note that this isn't a weakness of miniconda (which has packaged conda and mamba since this summer) but of the age of the miniconda on chocolatey vs the age of the miniforge.; - [x] tested the new qcfractal 0.51 and found that (1) there's a snowflake threading bug that Ben has since fixed (unreleased) and (2) there's a new space-saving step on qcfractal, so psi4 driver needs to regenerate qcvars info for distributed driver thru qcf runs (fixed here).; - [x] on py312 on windows, there's a change in `shutil.which` that affects us through qcel. currently patched, but awaiting a new release there.; - [x] py312 starts visible SyntaxWarning about non-escaped special characters (like '\n' newline or '\b' bell) and unfortunately, they abound in Windows paths. Further unfortunately, the error detection in the new version parsing for psi4 in qcengine (implemented to avoid those ""[-1] index is not accessible"" means ""pull psi4 tags or otherwise fix version"" errors) springs into defense and thinks a clean psi4 isn't present. So, let's convert possible filepaths to raw strings so no confusion with special chars. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3049:442,test,test,442,https://psicode.org,https://github.com/psi4/psi4/pull/3049,3,['test'],"['test', 'tested', 'testing']"
Testability,"## Todos; * **Developer Interest**; - [x] Moves SCF_TYPE to globals, psi4/psi4#1019; - [x] Change SAPT mem to long int, psi4/psi4#1018. ## Questions; - [ ] someone who knows SAPT & C++ should check over the `long int` business. ## Checklist; - [x] full tests on SCF_TYPE, sapt tests on long int. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1020:253,test,tests,253,https://psicode.org,https://github.com/psi4/psi4/pull/1020,2,['test'],['tests']
Testability,"## Todos; * **Developer Interest**; - [x] Some of the new DFT tests require dftd3 or gcp, which properly belong in the subdirs since we can't control `cmake` test running on a per-test basis as we can `pytest`. This fixes up 3 of them. ~`dft-smoke` still needs attention~; - [x] Cheated on dft-smoke and just don't run the dsd-d if dftd3 exe not around.; - [x] Added some stuff to the PR template; - [x] Fixed DSD-BLYP & DSD-PBEP86 in `dft-custom-dhdf` via Orca check; - [x] @robertodr I temporarily disabled the fcidump test so I can get a full ctest pass for conda; - [x] @PeterKraus added DSD-PBE[P86|B95|PBE] fctls to dictfuncs and tests. ## Questions; - [x] ~I can't get the ammonia dimer to match Orca for DSD-PBEP86 (no disp.) in `dft-custom-dhdf`. Any idea where the ref val came from @dgasmith or what's wrong with the orca cmd (below), @PeterKraus? If we fix that one up, then only fcidump is left.~. ```; ! B2PLYP GRID7 cc-pVTZ TightSCF cc-pVTZ/C; %method; FrozenCore 0; Exchange x_PBE; Correlation c_P86; ScalHFX = 0.72; ScalDFX = 0.28; ScalGGAC = 0.44; ScalLDAC = 0.44; ScalMP2C = 1.0; end; %mp2; RI on; DoSCS true; Ps 0.51; Pt 0.36; MaxCore 1000; end; *xyz 0 1; N -1.578718 -0.046611 0.000000; H -2.158621 0.136396 -0.809565; H -2.158621 0.136396 0.809565; H -0.849471 0.658193 0.000000; N 1.578718 0.046611 0.000000; H 2.158621 -0.136396 -0.809565; H 0.849471 -0.658193 0.000000; H 2.158621 -0.136396 0.809565; *; ```. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/946:62,test,tests,62,https://psicode.org,https://github.com/psi4/psi4/pull/946,5,['test'],"['test', 'tests']"
Testability,"## Todos; * **Developer Interest**; - [x] fixed `CMAKE_DISABLE_FIND_PACKAGE_Addon` so that proj builds internally and only that build used; - [x] by analogy to psi4/meta, splitting up `LICENSE` and `CITATION` should allow GH to detect us and put a license box on page; - [x] pybind11 bumped; - [x] `qc_module` as local option is ineffective, so forced `cisd-h2o-clpse` to test detci, not fnocc.; - [x] py3-ed the share/scripts; * **User-Facing for Release Notes**; - [x] tag CheMPS2 at `1.8.3`. ## Questions; - [x] @amjames, look over the ""CC ROOT"" commit, please. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/519:372,test,test,372,https://psicode.org,https://github.com/psi4/psi4/pull/519,1,['test'],['test']
Testability,"## Todos; - [x] `cphf_tasks` option needed for psi4numpy polarizability; - [x] while we computed, tested, and exported IR Intensities for analytical RHF Hessians, neglected to print them. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1592:98,test,tested,98,https://psicode.org,https://github.com/psi4/psi4/pull/1592,1,['test'],['tested']
Testability,"## Todos; - [x] bump RESP interface from 0.8 to 1.0 (this will fix CI); - [x] add psixas (https://github.com/Masterluke87/psixas) ""testing"". output is a spectrum file, so hard to test beyond ""runs"". ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2065:131,test,testing,131,https://psicode.org,https://github.com/psi4/psi4/pull/2065,2,['test'],"['test', 'testing']"
Testability,## Todos; - [x] bump qcel and qcng; - [x] new `using('<prog>')` API instead of `using_<prog>` from `qcng.testing`; - there's still a mix of selectors right now. will do a simplification pass after some other branches where I've edited pytests are merged in. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1767:105,test,testing,105,https://psicode.org,https://github.com/psi4/psi4/pull/1767,1,['test'],['testing']
Testability,"## Todos; - [x] bump qcel, qcng. ; - [x] fix Mol.dftd3 interface for pydantic 1.0; - [x] try removing deepdiff. ## Checklist; - [ ] ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1741:133,Test,Tests,133,https://psicode.org,https://github.com/psi4/psi4/pull/1741,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Todos; - [x] fluorine 6-311G polarization exp 2.396 --> 3.5; - [x] add a bit to main README; - [x] fill in missing output.ref-s. ## Checklist; - [x] [All or relevant fraction of full tests run]. ## Status; ### review first two commits. skip the third -- it's `output.ref`s. - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1066:186,test,tests,186,https://psicode.org,https://github.com/psi4/psi4/pull/1066,1,['test'],['tests']
Testability,"## Todos; - [x] internal builds on pybind11 with Intel atop non-system compilers would think compiler broken b/c can't find gcc guts. so we'll pass along the flags. way overkill considering that ""build"" is just a `cp`.; - [x] fix the Azure g2g header trouble; - [x] in the process, update to the new g2g 2.0 (unreleased) interface; - [x] all tests pass; - [x] CPPE testing -- fix ctest and add pytest (latter needed for`psi4-rt`); - [x] qz2p basis from CFOUR. - Q: imminence of g2g 2?. ## Status; - [x] Ready for review; - [x] Ready for merge (except for no packaged g2g)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1718:342,test,tests,342,https://psicode.org,https://github.com/psi4/psi4/pull/1718,2,['test'],"['testing', 'tests']"
Testability,"## Todos; - [x] modernizes `run_json` to the level of the ddd branch; - sets all options at once and allows module-level options (`scf__reference` --> `set scf reference`); - shifts `json['psi4:qcvars']` --> `json['extras']['qcvars']`; - `json['extras']['wfn_qcvars_only']` collects qcvars only from wfn, not from `P::e`; - uses molecule dtype=2, qcschema one-word, and new error format; - [x] adds more psivars; - `HF TOTAL HESSIAN`; - removes scs-mp2 ss/os psivars in dfmp2 that were getting autovivified. thereby also corrects printing of 0s; - in cc* modules, defines psivars on wfn that I'm confident will endure. ## Checklist; - [ ] ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1578:640,Test,Tests,640,https://psicode.org,https://github.com/psi4/psi4/pull/1578,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Todos; - [x] switch out badge from appveyor to azure; - [x] add logos. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1388:67,log,logos,67,https://psicode.org,https://github.com/psi4/psi4/pull/1388,1,['log'],['logos']
Testability,"## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Add a GHA to build the docs for every PR; * gives us advance warning if the docs break, rather than having to watch master; * advance warning is particularly necessary since the warnings-to-errors and nitpicky flags are on. these make sure links (functions, options, etc) aren't dead and that lists don't end up as mushed text.; * unlike #2364, this isn't ambitious by building a website preview and writing a comment to the PR. but it does provide a tarball of the docs as a GHA artifact, so you can download, unpack, and view it locally in a browser. this happens whether the build succeeds or fails.; * the new docs-pr.yml file looks so close to docs.yml, that you could argue for merging them. However, I think they could develop differently, with the master one also doing samples commits and auto-formatting, while the PR one does linting like add-a-comment-to-that-test or reformat warnings.; - [x] a filesystem.py file could be easily replaced by pathlib. ## Checklist; - ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests) Plugin tests generate and run. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2607:979,test,test,979,https://psicode.org,https://github.com/psi4/psi4/pull/2607,5,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,"## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] conventional only (not orbital optimized) MP2.5 and MP3 are now density-fit by default, fixes #1801 ; - [x] note that this bifurcates the role of `mp_type`, with the above cases imposed in proc.py, leaving the keyword unchanged for others -- omp2.5, omp3, mp4, adc2; - [x] in occ, LCCD and OLCCD energies were often failing (to match to 1.e-6) with default convcrit. though there's a `abs(DE) < e_conv` test for iterations, the actual progressing of DE through the iterations has a lot of energy increases, so often a small energy increase satisfies the test. I reduced the energy test by an order of magnitude to allow a little more settling of iterations. obligatory @JonathonMisiewicz ping, who may be rightly appalled. it does fix up energy and 5-point findif gradient by energy convergence across the std suite.; - [x] in dfocc, most DF analytic gradients from MP2 to CCSD were failing with default convcrit w/o tightening pcg_convergence by an order of magnitude. so, I tied pcg_convergence to e_convergence if not specified. again, Jonathon's input welcome.; - [x] I maybe should write a warning to output if these methods run w/o mp_type specified so the change isn't wholly unmarked (besides release notes and docs); - [x] bump qcel and qcng to v0.16. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1980:501,test,test,501,https://psicode.org,https://github.com/psi4/psi4/pull/1980,6,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Feature1; Added printout for memory availability in DFHelper; ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1097:231,test,tests,231,https://psicode.org,https://github.com/psi4/psi4/pull/1097,2,['test'],['tests']
Testability,"## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] I still had ints printing as floats and `int/int` printing as float, etc. Plus what used to take 3 lines now takes 1.; - [x] `[GiB]` throughout DFHelper.cc. Now; ```; ==> Integral Setup <==. DFHelper Memory: AOs need 0.001 [GiB]; got 0.419 [GiB] so using in-core AOs. ==> MemDFJK: Density-Fitted J/K Matrices <==; ```. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1103:488,test,tests,488,https://psicode.org,https://github.com/psi4/psi4/pull/1103,2,['test'],['tests']
Testability,"## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] The Dimension C++ updating of #574 / #571 needed to be done for the CheMPS2 interface code also. This does it.; - [x] test `cbs-xtpl-func` was unsuccessfully comparing analytic- and findif-computed values (as found by Daniel) after analytic ccsd(t) grads available. This forces findif comparison.; - [x] fixed MRCC interface probably broken since CMR-KtB-INV. Looks like we don't have to close and reopen outfile anymore, so simplified procedure func. tested with normal and `-o stdout` operation under py27 and py35.; * **User-Facing for Release Notes**. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/576:233,test,test,233,https://psicode.org,https://github.com/psi4/psi4/pull/576,2,['test'],"['test', 'tested']"
Testability,"## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] adds additional contributors to header for 1.2; - [x] thread tester script was broken when importing from `__init__.pyc`. warn off py2. ## Questions; - [ ] @schiebermc, @mhlechner, @PeterKraus, @hokru, @robashaw If there any any delicate professional or personal reasons why you don't want to appear on the header, or if you want spelling/initials adjusted, please comment to this PR. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1040:176,test,tester,176,https://psicode.org,https://github.com/psi4/psi4/pull/1040,1,['test'],['tester']
Testability,## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] fix direct_iaq memory estimate in AO_core module. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1100:219,test,tests,219,https://psicode.org,https://github.com/psi4/psi4/pull/1100,2,['test'],['tests']
Testability,"## User API & Changelog headlines; - [x] A segfault in `Matrix::transpose` for matrices that are not totally symmetric now performs the transpose.; - [x] A segfault in `Matrix::transpose_this` for matrices that are not totally symmetric now raises an error message. . ## Dev notes & details; - [x] All the above, plus...; - [x] Tests that the above works!; - [x] Removing variable declarations before initialization.; - [x] Reorganized logic in symmetric case for clarity. . ## Checklist; - [x] Tests added for any new features. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2740:328,Test,Tests,328,https://psicode.org,https://github.com/psi4/psi4/pull/2740,3,"['Test', 'log']","['Tests', 'logic']"
Testability,"## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Fixed a bug disabling non-orbital optimized DCT with spin restriction. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] l. 55 keeps the alpha and beta orbitals pointing to the same object.; - [x] l. 142 is the central bugfix. ## Checklist; - [x] Tests added for newly working features. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2860:610,Test,Tests,610,https://psicode.org,https://github.com/psi4/psi4/pull/2860,1,['Test'],['Tests']
Testability,"## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Fixed a bug where UKS was not properly parallelized. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Adds a lot of comments to `compute_V` in preparation for fixing `compute_Vx` for GGAs; - [x] Fixes _a_ bug in `compute_Vx` for GGAs. There's more to find, but that's beyond-the-scope ; - [x] Things to review: Are the comments comprehensible? Is anything obvious missing, needed to understand `compute_V` up to GGA in either polarization?; - [x] Things to review: I added [this parallelization line](https://github.com/JonathonMisiewicz/psi4/blob/75709af51d7fd68f926d2e28ac2d3ae9a4cea9c9/psi4/src/psi4/libfock/v.cc#L2490), which is the counterpart of [this line](https://github.com/JonathonMisiewicz/psi4/blob/75709af51d7fd68f926d2e28ac2d3ae9a4cea9c9/psi4/src/psi4/libfock/v.cc#L1978) in RKS. Anything obviously wrong with the parallelization?; - [x] Notice to @davpoolechem: per the above, any UKS speed benchmarks need to be redone with this PR. ; - [x] 1.7 preferred but not demanded. ## Checklist; - [x] quick tests passed. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2824:1270,benchmark,benchmarks,1270,https://psicode.org,https://github.com/psi4/psi4/pull/2824,2,"['benchmark', 'test']","['benchmarks', 'tests']"
Testability,"## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Fixes a crash when attempting DFMP2 on systems with too few electrons to support MP2. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Massively simplified the DFMP2 validation logic. ## Checklist; - [x] dfmp2 tests pass; - [x] Turned the bug report into a new test case. (Thanks for a clean one, Susi.). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2977:541,log,logic,541,https://psicode.org,https://github.com/psi4/psi4/pull/2977,3,"['log', 'test']","['logic', 'test', 'tests']"
Testability,"## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Provided a more informative error message when SAD crashes due to an atom having more core electrons than basis functions. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Fixed typos in comments; - [x] Fixed buggy print information. ## Questions; - [ ] Is it worth testing for the error message explicitly?. ## Checklist; - [x] Confirmed I get the expected error message upon running the example from #2853. ## Status; - [x] Ready for review; - [x] Ready for merge upon @susilehtola approval",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2859:630,test,testing,630,https://psicode.org,https://github.com/psi4/psi4/pull/2859,1,['test'],['testing']
Testability,"## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] The `LINEQ_SOLVER` option for `occ` has been removed. ## Dev notes & details; - [x] `occ` now uses LAPACK to solve Ax=b rather than the `pople` or `flin` algorithms. `LAPACK` just might be more reliable. This was an extremely obscure option, so I'm not worried about breaking anybody's input. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2778:486,Test,Tests,486,https://psicode.org,https://github.com/psi4/psi4/pull/2778,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] `wfn.Fa_subset` and `wfn.Fb_subset` now return the correct matrices in the MO basis. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] The matrix helper signature is a little uglier now, sadly. ## Checklist; - [x] Tests added for Fa and Fb in MO basis; - [x] Quick tests and new test pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2958:577,Test,Tests,577,https://psicode.org,https://github.com/psi4/psi4/pull/2958,3,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,"## XYZ Files. Just as an aside, here's two easier ways to deal with molecules when you have the coordinates. chg/mult from the xyz are possible https://github.com/MolSSI/QCElemental/blob/master/qcelemental/molparse/from_string.py#L117-L136. tu1.py; ```; import psi4. psi4.set_memory(""600 mb""). ### <<< Either ; #with open(""h2o.xyz"") as fp:; # fh2o = fp.read(); #; #psi4.geometry(fh2o). ### --- Or. h2o = psi4.core.Molecule.from_arrays(elem=[""O"", ""H"", ""H""], units=""Angstrom"", geom=[; 0.000000000000, 0.000000000000, -0.065775570538, ; 0.000000000000, -0.759061990794, 0.521953018295, ; 0.000000000000, 0.759061990794, 0.521953018295]) ; psi4.activate(h2o). ### >>> End. psi4.set_options({; ""basis"": ""cc-pVDZ"",; }); psi4.energy('scf'). psi4.compare_values(-76.0266327341067125, psi4.variable('SCF TOTAL ENERGY'), 6, 'SCF energy') #TEST; ```. h2o.xyz; ```; 3; sdlkfs; O 0.000000000000 0.000000000000 -0.065775570538 ; H 0.000000000000 -0.759061990794 0.521953018295 ; H 0.000000000000 0.759061990794 0.521953018295 . ```; ## Single Core. To actually address your problem, can you try the following edits? If you edit the installed copy, no recompile needed. Hopefully this solves it -- thanks for the report!; ```; diff --git a/psi4/driver/procrouting/empirical_dispersion.py b/psi4/driver/procrouting/empirical_dispersion.py; index d23f016..ea4f79d 100644; --- a/psi4/driver/procrouting/empirical_dispersion.py; +++ b/psi4/driver/procrouting/empirical_dispersion.py; @@ -213,7 +213,7 @@ class EmpiricalDispersion(object):; resi,; self.engine,; raise_error=True,; - local_options={""scratch_directory"": core.IOManager.shared_object().get_default_path()}); + local_options={""scratch_directory"": core.IOManager.shared_object().get_default_path(), ""ncores"": core.get_num_threads()}); ; dashd_part = float(jobrec.extras['qcvars']['DISPERSION CORRECTION ENERGY']); if wfn is not None:; @@ -231,7 +231,7 @@ class EmpiricalDispersion(object):; resi,; ""gcp"",; raise_error=True,; - local_options={""scratch_director",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2548#issuecomment-1100294938:829,TEST,TEST,829,https://psicode.org,https://github.com/psi4/psi4/issues/2548#issuecomment-1100294938,1,['TEST'],['TEST']
Testability,"### Beginner-Friendly (after py-side SCF). Renovate SCF damping capabilities; - [ ] right now we're only damping `D`. There are rumors that should also damp `F` or there's an iteration mismatch between `D` & `F`. Make sure damping is working right (presently only test case is scf-coverage and damping severely _hurts_ convergence; - [ ] right now we damp to the very end of iterations. Maybe damp only to 1e-4 (after which soscf might be better choice, now that DGAS has implemented) controlled by DAMPING_CONVERGENCE.; - [ ] here's a paper with potentially useful schemes https://arxiv.org/pdf/1302.6099.pdf; - [ ] consider (this may be separate project) more advanced driver logic. perhaps something along the lines of (DGAS) ""Damp first iteration, then DIIS, if density is stuck take stability step, if grad < 1.e-4 and target < 1.e-8 take SOSCF, else DIIS. if density oscillation (dRMS/oscilation) > 1.e2 add damping""",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/402#issuecomment-342892121:264,test,test,264,https://psicode.org,https://github.com/psi4/psi4/issues/402#issuecomment-342892121,2,"['log', 'test']","['logic', 'test']"
Testability,"### Needs Py36. ## Description; Starting PR. Change the Psi4 driver from being recursive to being based on compute classes that have planning, computing and querying functions. Then, integrate the new driver with the QCArchive project for parallelizing nbody, CBS and findif. ## Deconstruction Progress; 99 changed files, and 5,314 additions and 2,946 deletions. c. dgasmith:recursive; - #2512; - #2515; - #2518; - #2526 ; - #2530 ; - #2532; - #2536 ; - #2544. 59 changed files, and 3,408 additions and 1,885 deletions. c. loriab:recursive62; - #2552 ; - #2557; - [ ] #2516. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Create compute classes for nbody, CBS and findif; - [ ] Integrate QCArchive. ## Release Notes; - `msgpack-python` added as req'd dependency. this keeps numpy arrays serialized when communicating in schema; - python 3.8 requires pint 0.10; - add a logging file, presently `file.log` that currently is continuously appended; - any fns mirroring `sherrill_gold_standard` or `allen_focal_point` need to be reformatted and registered with `register_composite_function`; - extrapolation functions for composite need to be registered with `register_xtpl_function`; - CBS and xtpl functions need to be called as strings, not objects. So `energy('cbs', scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme='scf_xtpl_helgaker_3')` not `energy(cbs, scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3)`.; - no longer always evaluating gradient before Hessian to test safety of projecting rotations. Instead assuming unsafe. Can pass `ref_gradient` array to test on or `set findif fd_project T/F` explcitly to control.; - `psi4.QMMM()` object replaced by `embedding_charges` kwarg in Bohr. See extern examples for details.; - `json_ret = psi4.schema_wrapper.run_qcschema(json_input)` not `json_ret = psi4.json_wrapper.run_json(json_input)`. `json_ret` is now an object, so `.` access, not dictionary.; - CBS wrapper issues ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351:920,log,logging,920,https://psicode.org,https://github.com/psi4/psi4/pull/1351,1,['log'],['logging']
Testability,"#### filesystem. By my survey, libfilesystem occurs at:; - [ ] plugins. due for an overhaul. Skipping plugin use on Windows until overhaul seems reasonable to me.; - [x] fisapt. dependency removed in #1098 ; - [x] libcubeprop/cubeprop. dependency removed in #1098 ; - [x] libefp. libefp itself removed from c-side in #953 ; - [ ] libcubeprop/csg. libfilesystem dependency remains. The libcubeprop/csg filesys calls are harder to migrate because they're at the bottom of the call stack. But I also recall that you had cubeprop test cases working already on Windows. Is it worth finishing off libcubeprop/csg? Or is the situation as outlined stable?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-406507542:526,test,test,526,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-406507542,1,['test'],['test']
Testability,"##### Summary. With a couple changes, as below, I think this can be ready to go. ##### Testing Setup. * in `~/.psi4rc`: `psi4.set_global_option(""INTEGRAL_PACKAGE"", ""ERD"")`; * in `psi4/driver/driver.py`: the catch from the section below, only with `sys.exit(0)` to force smooth exit from test, rather than the ValidationError; * Under these conditions, only the below fail from full tests. Ignoring the can't-find-exe, the known-failures, and the sow/reap, the ailing test cases involved either LRC functionals or ESP.; ```; The following tests FAILED:; 	151 - dft1 (Failed); 	152 - dft1-alt (Failed); 	154 - dft3 (Failed); 	188 - mints9 (Failed); 	272 - pywrap-db2 (Failed); 	275 - pywrap-freq-g-sowreap (Failed); 	322 - cubeprop-esp (Failed); 	333 - dftd3-version (Failed); 	341 - mrcc-ccsdt (Failed); 	342 - mrcc-ccsd_t_ (Failed); 	343 - mrcc-ccsdt_q_ (Failed); 	344 - mrcc-optfreq (Failed); Errors while running CTest; ```. ##### Recc. TODO. * In main CM, change erd warning to ` message(WARNING ""ERD will build, link, and run in Psi4 just fine. However, it has not been hooked into Psi4 in all roles, notably gradients, LRC DFT energies, and ESP. So upon activating through ``set integral_package erd``, gradients will be caught and halted, but LRC DFT, ESP, and perhaps other types not tested and identified will give *wrong* answers. Consider this your warning."")`. * In `psi4/driver/driver.py`, apply patch below. ```; --- a/psi4/driver/driver.py; +++ b/psi4/driver/driver.py; @@ -82,6 +82,9 @@ def _find_derivative_type(ptype, method_name, user_dertype):; raise ValidationError(""_find_derivative_type: user_dertype should only be None or int!""); dertype = user_dertype; ; + if (core.get_global_option('INTEGRAL_PACKAGE') == 'ERD') and (dertype != 0):; + raise ValidationError(""INTEGRAL_PACKAGE ERD does not play nicely with gradients, so stopping.""); +; # Summary validation; if (dertype == 2) and (method_name in procedures['hessian']):; pass; ```. * Running this yield the following list (30",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/587#issuecomment-276884648:87,Test,Testing,87,https://psicode.org,https://github.com/psi4/psi4/pull/587#issuecomment-276884648,5,"['Test', 'test']","['Testing', 'test', 'tests']"
Testability,"##### Watch Out For. Matt's seeing consistent failures among certain functionals in `dft-bench-ionization`. Particularly the first and third (`PWB6K` & `wB97X-D`) while the second is fine. I don't see the problem with Intel `2018.0.2` compilers, and travis doesn't see it in a truncated test case (clang and gcc). So watch out for this, and even if you cut off full tests prematurely b/c the benches are so long, please go ahead and run at least the first few functionals of the test outright for a few weeks so we can get more info.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/961#issuecomment-385090273:287,test,test,287,https://psicode.org,https://github.com/psi4/psi4/pull/961#issuecomment-385090273,3,['test'],"['test', 'tests']"
Testability,#100: cisd-sp-2 ........................ Passed 4.98 sec; Start 226: molden2; 302/413 Test #397: python-mints13 ................... Passed 2.19 sec; Start 312: rasci-c2-active; 303/413 Test #238: mpn-bh ........................... Passed 3.26 sec; Start 205: frac; 304/413 Test #95: cisd-h2o+-1 ...................... Passed 4.61 sec; Start 398: python-memdfjk; 305/413 Test #96: cisd-h2o+-2 ...................... Passed 5.04 sec; Start 259: omp3-1; 306/413 Test #189: fci-h2o-fzcv ..................... Passed 4.96 sec; Start 333: scf1; 307/413 Test #94: cisd-h2o+-0 ...................... Passed 4.41 sec; Start 389: python-energy; 308/413 Test #188: fci-h2o-2 ........................ Passed 6.48 sec; Start 273: opt5; 309/413 Test #398: python-memdfjk ................... Passed 1.04 sec; Start 271: opt3; 310/413 Test #389: python-energy .................... Passed 1.00 sec; Start 231: mp2-grad2; 311/413 Test #248: omp2-1 ........................... Passed 2.94 sec; Start 119: dfcasscf-sa-sp; 312/413 Test #233: mp2p5-grad1 ...................... Passed 2.39 sec; Start 402: json-schema-1-ghost; 313/413 Test #255: omp2p5-1 ......................... Passed 2.99 sec; Start 341: scf-property; 314/413 Test #205: frac ............................. Passed 2.48 sec; Start 181: fsapt2; 315/413 Test #259: omp3-1 ........................... Passed 2.37 sec; Start 138: dfmp2-grad3; 316/413 Test #273: opt5 ............................. Passed 2.08 sec; Start 6: ao-casscf-sp; 317/413 Test #231: mp2-grad2 ........................ Passed 2.00 sec; Start 407: skeleton; 318/413 Test #226: molden2 .......................... Passed 4.08 sec; Start 405: json-schema-1-gradient; 319/413 Test #312: rasci-c2-active .................. Passed 4.10 sec; Start 409: skeletondfmp2; 320/413 Test #296: psimrcc-sp1 ...................... Passed 4.58 sec; Start 235: mp3-grad1; 321/413 Test #402: json-schema-1-ghost .............. Passed 2.29 sec; Start 173: dft2; 322/413 Test #271: opt3 .....................,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1264#issuecomment-425525678:29238,Test,Test,29238,https://psicode.org,https://github.com/psi4/psi4/pull/1264#issuecomment-425525678,1,['Test'],['Test']
Testability,#101: cubeprop ......................... Passed 12.03 sec; Start 107: dcft1; 104/411 Test #92: ci-multi ......................... Passed 22.66 sec; Start 108: dcft2; 105/411 Test #108: dcft2 ............................ Passed 3.64 sec; Start 109: dcft3; 106/411 Test #105: dcft-grad3 ....................... Passed 13.24 sec; Start 110: dcft4; 107/411 Test #109: dcft3 ............................ Passed 12.31 sec; Start 111: dcft5; 108/411 Test #107: dcft1 ............................ Passed 24.76 sec; Start 112: dcft6; 109/411 Test #91: cepa-module ...................... Passed 55.38 sec; Start 114: dcft8; 110/411 Test #106: dcft-grad4 ....................... Passed 34.43 sec; Start 115: dcft9; 111/411 Test #104: dcft-grad2 ....................... Passed 44.51 sec; Start 116: ao-dfcasscf-sp; 112/411 Test #116: ao-dfcasscf-sp ................... Passed 2.53 sec; Start 117: dfcasscf-sa-sp; 113/411 Test #100: ci-property ...................... Passed 54.60 sec; Start 118: dfcasscf-fzc-sp; 114/411 Test #117: dfcasscf-sa-sp ................... Passed 4.84 sec; Start 119: dfcasscf-sp; 115/411 Test #118: dfcasscf-fzc-sp .................. Passed 3.68 sec; Start 120: dfccd1; 116/411 Test #120: dfccd1 ........................... Passed 2.40 sec; Start 121: dfccdl1; 117/411 Test #119: dfcasscf-sp ...................... Passed 3.56 sec; Start 122: dfccd-grad1; 118/411 Test #121: dfccdl1 .......................... Passed 2.47 sec; Start 123: dfccsd1; 119/411 Test #123: dfccsd1 .......................... Passed 4.35 sec; Start 124: dfccsdl1; 120/411 Test #122: dfccd-grad1 ...................... Passed 6.44 sec; Start 125: dfccsd-grad1; 121/411 Test #124: dfccsdl1 ......................... Passed 4.13 sec; Start 126: dfccsd-t-grad1; 122/411 Test #45: cc3 .............................. Passed 320.00 sec; Start 127: dfccsdt1; 123/411 Test #127: dfccsdt1 ......................... Passed 6.97 sec; Start 128: dfccsdat1; 124/411 Test #125: dfccsd-grad1 ..................... Passed 18.56,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1092#issuecomment-409185967:10514,Test,Test,10514,https://psicode.org,https://github.com/psi4/psi4/pull/1092#issuecomment-409185967,1,['Test'],['Test']
Testability,#103: dcft-grad1 ....................... Passed 316.29 sec; Start 261: omp3-5; 251/411 Test #252: omp2-grad2 ....................... Passed 18.49 sec; Start 262: omp3-grad1; 252/411 Test #244: ocepa2 ........................... Passed 43.29 sec; Start 263: omp3-grad2; 253/411 Test #262: omp3-grad1 ....................... Passed 3.85 sec; Start 264: opt-lindep-change; 254/411 Test #230: mp2-module ....................... Passed 59.39 sec; Start 265: opt1; 255/411 Test #258: omp3-2 ........................... Passed 15.76 sec; Start 266: opt1-fd; 256/411 Test #265: opt1 ............................. Passed 3.61 sec; Start 267: opt2; 257/411 Test #249: omp2-4 ........................... Passed 36.26 sec; Start 268: opt2-fd; 258/411 Test #250: omp2-5 ........................... Passed 37.80 sec; Start 269: opt3; 259/411 Test #266: opt1-fd .......................... Passed 8.15 sec; Start 270: opt4; 260/411 Test #269: opt3 ............................. Passed 3.58 sec; Start 271: opt5; 261/411 Test #256: omp2p5-grad2 ..................... Passed 29.86 sec; Start 272: opt6; 262/411 Test #271: opt5 ............................. Passed 3.52 sec; Start 273: opt7; 263/411 Test #268: opt2-fd .......................... Passed 10.43 sec; Start 274: opt8; 264/411 Test #183: isapt2 ........................... Passed 135.94 sec; Start 275: opt9; 265/411 Test #270: opt4 ............................. Passed 9.47 sec; Start 276: opt11; 266/411 Test #267: opt2 ............................. Passed 18.54 sec; Start 277: opt12; 267/411 Test #264: opt-lindep-change ................ Passed 26.08 sec; Start 279: opt14; 268/411 Test #263: omp3-grad2 ....................... Passed 32.21 sec; Start 280: opt-irc-1; 269/411 Test #260: omp3-4 ........................... Passed 34.72 sec; Start 281: opt-irc-2; 270/411 Test #261: omp3-5 ........................... Passed 34.25 sec; Start 282: opt-irc-3; 271/411 Test #275: opt9 ............................. Passed 14.34 sec; Start 283: opt-freeze-coo,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1092#issuecomment-409185967:24231,Test,Test,24231,https://psicode.org,https://github.com/psi4/psi4/pull/1092#issuecomment-409185967,1,['Test'],['Test']
Testability,#105: dcft-grad3 ....................... Passed 18.47 sec; Start 106: dcft-grad4; 111/411 Test #100: ci-property ...................... Passed 62.15 sec; Start 107: dcft1; 112/411 Test #106: dcft-grad4 ....................... Passed 45.00 sec; Start 108: dcft2; 113/411 Test #108: dcft2 ............................ Passed 15.42 sec; Start 109: dcft3; 114/411 Test #91: cepa-module ...................... Passed 169.66 sec; Start 110: dcft4; 115/411 Test #109: dcft3 ............................ Passed 32.22 sec; Start 111: dcft5; 116/411 Test #97: cisd-opt-fd ...................... Passed 163.26 sec; Start 112: dcft6; 117/411 Test #107: dcft1 ............................ Passed 98.56 sec; Start 114: dcft8; 118/411 Test #104: dcft-grad2 ....................... Passed 155.98 sec; Start 115: dcft9; 119/411 Test #45: cc3 .............................. Passed 834.30 sec; Start 116: ao-dfcasscf-sp; 120/411 Test #116: ao-dfcasscf-sp ................... Passed 3.09 sec; Start 117: dfcasscf-sa-sp; 121/411 Test #117: dfcasscf-sa-sp ................... Passed 5.92 sec; Start 118: dfcasscf-fzc-sp; 122/411 Test #118: dfcasscf-fzc-sp .................. Passed 3.29 sec; Start 119: dfcasscf-sp; 123/411 Test #119: dfcasscf-sp ...................... Passed 8.24 sec; Start 120: dfccd1; 124/411 Test #120: dfccd1 ........................... Passed 5.43 sec; Start 121: dfccdl1; 125/411 Test #121: dfccdl1 .......................... Passed 5.84 sec; Start 122: dfccd-grad1; 126/411 Test #122: dfccd-grad1 ...................... Passed 23.87 sec; Start 123: dfccsd1; 127/411 Test #123: dfccsd1 .......................... Passed 12.87 sec; Start 124: dfccsdl1; 128/411 Test #124: dfccsdl1 ......................... Passed 18.85 sec; Start 125: dfccsd-grad1; 129/411 Test #115: dcft9 ............................ Passed 131.44 sec; Start 126: dfccsd-t-grad1; 130/411 Test #125: dfccsd-grad1 ..................... Passed 48.16 sec; Start 127: dfccsdt1; 131/411 Test #76: cc7 .............................. Pa,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1112#issuecomment-409912325:11024,Test,Test,11024,https://psicode.org,https://github.com/psi4/psi4/pull/1112#issuecomment-409912325,1,['Test'],['Test']
Testability,#105: dcft-grad3 ....................... Passed 24.77 sec; Start 106: dcft-grad4; 111/411 Test #100: ci-property ...................... Passed 68.01 sec; Start 107: dcft1; 112/411 Test #106: dcft-grad4 ....................... Passed 40.83 sec; Start 108: dcft2; 113/411 Test #91: cepa-module ...................... Passed 131.84 sec; Start 109: dcft3; 114/411 Test #108: dcft2 ............................ Passed 20.56 sec; Start 110: dcft4; 115/411 Test #109: dcft3 ............................ Passed 30.81 sec; Start 111: dcft5; 116/411 Test #97: cisd-opt-fd ...................... Passed 146.32 sec; Start 112: dcft6; 117/411 Test #107: dcft1 ............................ Passed 86.75 sec; Start 114: dcft8; 118/411 Test #104: dcft-grad2 ....................... Passed 139.44 sec; Start 115: dcft9; 119/411 Test #45: cc3 .............................. Passed 891.62 sec; Start 116: ao-dfcasscf-sp; 120/411 Test #116: ao-dfcasscf-sp ................... Passed 3.30 sec; Start 117: dfcasscf-sa-sp; 121/411 Test #117: dfcasscf-sa-sp ................... Passed 5.50 sec; Start 118: dfcasscf-fzc-sp; 122/411 Test #118: dfcasscf-fzc-sp .................. Passed 2.82 sec; Start 119: dfcasscf-sp; 123/411 Test #119: dfcasscf-sp ...................... Passed 7.34 sec; Start 120: dfccd1; 124/411 Test #120: dfccd1 ........................... Passed 8.06 sec; Start 121: dfccdl1; 125/411 Test #121: dfccdl1 .......................... Passed 3.04 sec; Start 122: dfccd-grad1; 126/411 Test #122: dfccd-grad1 ...................... Passed 19.49 sec; Start 123: dfccsd1; 127/411 Test #123: dfccsd1 .......................... Passed 12.67 sec; Start 124: dfccsdl1; 128/411 Test #115: dcft9 ............................ Passed 114.23 sec; Start 125: dfccsd-grad1; 129/411 Test #124: dfccsdl1 ......................... Passed 9.05 sec; Start 126: dfccsd-t-grad1; 130/411 Test #125: dfccsd-grad1 ..................... Passed 39.99 sec; Start 127: dfccsdt1; 131/411 Test #126: dfccsd-t-grad1 ................... Pa,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1067#issuecomment-409148828:11025,Test,Test,11025,https://psicode.org,https://github.com/psi4/psi4/pull/1067#issuecomment-409148828,1,['Test'],['Test']
Testability,#107: dcft-grad3 ....................... Passed 20.04 sec; Start 1: adc1; 176/413 Test #165: dft-freq ......................... Passed 26.06 sec; Start 208: ghosts; 177/413 Test #140: dfmp2-grad5 ...................... Passed 24.69 sec; Start 203: fnocc3; 178/413 Test #66: cc48 ............................. Passed 68.80 sec; Start 175: dft-omega; 179/413 Test #377: pywrap-bfs ....................... Passed 24.36 sec; Start 328: scf-ecp; 180/413 Test #16: cbs-xtpl-gradient ................ Passed 38.52 sec; Start 394: python-cc54; 181/413 Test #84: cdomp2-1 ......................... Passed 18.22 sec; Start 393: python-mints2; 182/413 Test #204: fnocc4 ........................... Passed 31.42 sec; Start 256: omp2p5-2; 183/413 Test #393: python-mints2 .................... Passed 3.14 sec; Start 397: python-mints13; 184/413 Test #274: opt6 ............................. Passed 28.70 sec; Start 24: cc12; 185/413 Test #397: python-mints13 ................... Passed 2.00 sec; Start 201: fnocc1; 186/413 Test #1: adc1 ............................. Passed 26.39 sec; Start 399: json-v11-energy; 187/413 Test #399: json-v11-energy .................. Passed 5.20 sec; Start 381: cc-module; 188/413 Test #130: dfccsdat1 ........................ Passed 40.48 sec; Start 392: python-mints9; 189/413 Test #392: python-mints9 .................... Passed 2.37 sec; Start 400: json-v11-gradient; 190/413 Test #400: json-v11-gradient ................ Passed 2.12 sec; Start 240: nbody-intermediates; 191/413 Test #208: ghosts ........................... Passed 33.10 sec; Start 145: dfomp2-grad1; 192/413 Test #175: dft-omega ........................ Passed 28.98 sec; Start 390: python-curve; 193/413 Test #203: fnocc3 ........................... Passed 33.21 sec; Start 398: python-memdfjk; 194/413 Test #398: python-memdfjk ................... Passed 1.05 sec; Start 73: cc54; 195/413 Test #328: scf-ecp .......................... Passed 32.66 sec; Start 174: dft3; 196/413 Test #390: python-curve ....,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1237#issuecomment-425038275:17499,Test,Test,17499,https://psicode.org,https://github.com/psi4/psi4/pull/1237#issuecomment-425038275,1,['Test'],['Test']
Testability,#108: dcft2 ............................ Passed 8.11 sec; Start 117: dfcasscf-sa-sp; 281/411 Test #234: mp3-grad2 ........................ Passed 4.58 sec; Start 3: casscf-fzc-sp; 282/411 Test #329: scf-guess-read2 .................. Passed 6.02 sec; Start 331: scf1; 283/411 Test #233: mp3-grad1 ........................ Passed 1.89 sec; Start 171: dft2; 284/411 Test #339: scf-property ..................... Passed 5.57 sec; Start 344: dfep2-1; 285/411 Test #117: dfcasscf-sa-sp ................... Passed 5.69 sec; Start 265: opt1; 286/411 Test #344: dfep2-1 .......................... Passed 4.11 sec; Start 223: molden1; 287/411 Test #331: scf1 ............................. Passed 5.42 sec; Start 190: fci-coverage; 288/411 Test #10: castup3 .......................... Passed 8.69 sec; Start 86: cepa0-grad2; 289/411 Test #171: dft2 ............................. Passed 5.48 sec; Start 134: dfmp2-grad1; 290/411 Test #9: castup2 .......................... Passed 10.20 sec; Start 85: cepa0-grad1; 291/411 Test #265: opt1 ............................. Passed 5.72 sec; Start 179: fsapt2; 292/411 Test #134: dfmp2-grad1 ...................... Passed 5.24 sec; Start 136: dfmp2-grad3; 293/411 Test #3: casscf-fzc-sp .................... Passed 11.70 sec; Start 187: fci-h2o-fzcv; 294/411 Test #85: cepa0-grad1 ...................... Passed 5.54 sec; Start 376: pywrap-align; 295/411 Test #223: molden1 .......................... Passed 6.44 sec; Start 385: psi4numpy-fci; 296/411 Test #190: fci-coverage ..................... Passed 6.40 sec; Start 370: scf-coverage; 297/411 Test #86: cepa0-grad2 ...................... Passed 7.61 sec; Start 310: rasci-c2-active; 298/411 Test #136: dfmp2-grad3 ...................... Passed 2.86 sec; Start 262: omp3-grad1; 299/411 Test #179: fsapt2 ........................... Passed 4.74 sec; Start 271: opt5; 300/411 Test #385: psi4numpy-fci .................... Passed 4.01 sec; Start 229: mp2-grad2; 301/411 Test #187: fci-h2o-fzcv ..................... Pa,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-405575064:27102,Test,Test,27102,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-405575064,1,['Test'],['Test']
Testability,#109: dcft-grad4 ....................... Passed 36.11 sec; Start 115: dcft6; 224/415 Test #111: dcft2 ............................ Passed 28.90 sec; Start 117: dcft8; 225/415 Test #43: cc26 ............................. Passed 867.28 sec; Start 118: dcft9; 226/415 Test #41: cc24 ............................. Passed 919.62 sec; Start 124: dfccdl1; 227/415 Test #124: dfccdl1 .......................... Passed 4.85 sec; Start 125: dfccd-grad1; 228/415 Test #125: dfccd-grad1 ...................... Passed 29.83 sec; Start 130: dfccsdt1; 229/415 Test #130: dfccsdt1 ......................... Passed 14.17 sec; Start 131: dfccsdat1; 230/415 Test #99: cisd-opt-fd ...................... Passed 118.26 sec; Start 133: dfmp2-2; 231/415 Test #133: dfmp2-2 .......................... Passed 4.49 sec; Start 134: dfmp2-3; 232/415 Test #44: cc27 ............................. Passed 850.53 sec; Start 135: dfmp2-4; 233/415 Test #134: dfmp2-3 .......................... Passed 17.06 sec; Start 138: dfmp2-grad2; 234/415 Test #135: dfmp2-4 .......................... Passed 16.06 sec; Start 139: dfmp2-grad3; 235/415 Test #131: dfccsdat1 ........................ Passed 43.70 sec; Start 140: dfmp2-grad4; 236/415 Test #139: dfmp2-grad3 ...................... Passed 14.29 sec; Start 141: dfmp2-grad5; 237/415 Test #138: dfmp2-grad2 ...................... Passed 22.26 sec; Start 143: dfomp2-2; 238/415 Test #140: dfmp2-grad4 ...................... Passed 19.10 sec; Start 144: dfomp2-3; 239/415 Test #40: cc23 ............................. Passed 1047.57 sec; Start 145: dfomp2-4; 240/415 Test #38: cc21 ............................. Passed 1126.88 sec; Start 146: dfomp2-grad1; 241/415 Test #144: dfomp2-3 ......................... Passed 11.39 sec; Start 147: dfomp2-grad2; 242/415 Test #141: dfmp2-grad5 ...................... Passed 29.74 sec; Start 148: dfomp2-grad3; 243/415 Test #93: cepa-module ...................... Passed 212.94 sec; Start 150: dfomp3-2; 244/415 Test #118: dcft9 ....................,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1384#issuecomment-443227424:21955,Test,Test,21955,https://psicode.org,https://github.com/psi4/psi4/pull/1384#issuecomment-443227424,1,['Test'],['Test']
Testability,#10: castup3 .......................... Passed 15.65 sec; Start 13: cbs-xtpl-alpha; 20/411 Test #316: sapt2 ............................ Passed 350.80 sec; Start 14: cbs-xtpl-energy; 21/411 Test #394: python-vibanalysis ............... Passed 958.22 sec; Start 15: cbs-xtpl-freq; 22/411 Test #14: cbs-xtpl-energy .................. Passed 14.64 sec; Start 16: cbs-xtpl-gradient; 23/411 Test #15: cbs-xtpl-freq .................... Passed 9.77 sec; Start 17: cbs-xtpl-opt; 24/411 Test #12: cbs-parser ....................... Passed 69.31 sec; Start 19: cbs-xtpl-wrapper; 25/411 Test #16: cbs-xtpl-gradient ................ Passed 32.38 sec; Start 20: cc1; 26/411 Test #19: cbs-xtpl-wrapper ................. Passed 84.37 sec; Start 21: cc10; 27/411 Test #17: cbs-xtpl-opt ..................... Passed 118.78 sec; Start 22: cc11; 28/411 Test #20: cc1 .............................. Passed 108.09 sec; Start 23: cc12; 29/411 Test #21: cc10 ............................. Passed 56.95 sec; Start 24: cc13; 30/411 Test #22: cc11 ............................. Passed 46.44 sec; Start 26: cc13b; 31/411 Test #23: cc12 ............................. Passed 31.76 sec; Start 27: cc13c; 32/411 Test #11: cbs-delta-energy ................. Passed 277.77 sec; Start 28: cc13d; 33/411 Test #26: cc13b ............................ Passed 102.18 sec; Start 29: cc14; 34/411 Test #13: cbs-xtpl-alpha ................... Passed 343.62 sec; Start 30: cc15; 35/411 Test #27: cc13c ............................ Passed 156.55 sec; Start 31: cc16; 36/411 Test #30: cc15 ............................. Passed 100.99 sec; Start 32: cc17; 37/411 Test #32: cc17 ............................. Passed 43.84 sec; Start 33: cc18; 38/411 Test #28: cc13d ............................ Passed 259.61 sec; Start 34: cc19; 39/411 Test #24: cc13 ............................. Passed 319.22 sec; Start 35: cc2; 40/411 Test #33: cc18 ............................. Passed 55.96 sec; Start 36: cc21; 41/411 Test #34: cc19 .......................,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1115#issuecomment-411094637:2975,Test,Test,2975,https://psicode.org,https://github.com/psi4/psi4/pull/1115#issuecomment-411094637,1,['Test'],['Test']
Testability,#111: dcft5 ............................ Passed 146.42 sec; Start 169: dft-vv10; 165/411 Test #163: dft-freq ......................... Passed 22.19 sec; Start 170: dft1-alt; 166/411 Test #165: dft-grad2 ........................ Passed 17.69 sec; Start 171: dft2; 167/411 Test #171: dft2 ............................. Passed 5.88 sec; Start 172: dft3; 168/411 Test #166: dft-psivar ....................... Passed 23.66 sec; Start 173: dft-omega; 169/411 Test #169: dft-vv10 ......................... Passed 15.94 sec; Start 174: docs-bases; 170/411 Test #174: docs-bases ....................... Passed 0.59 sec; Start 175: docs-dft; 171/411 Test #175: docs-dft ......................... Passed 0.68 sec; Start 176: extern1; 172/411 Test #112: dcft6 ............................ Passed 157.11 sec; Start 177: extern2; 173/411 Test #159: dft-grad-meta .................... Passed 53.77 sec; Start 179: fsapt2; 174/411 Test #176: extern1 .......................... Passed 12.65 sec; Start 180: fsapt-terms; 175/411 Test #179: fsapt2 ........................... Passed 5.27 sec; Start 183: isapt2; 176/411 Test #172: dft3 ............................. Passed 20.38 sec; Start 184: fci-dipole; 177/411 Test #177: extern2 .......................... Passed 16.19 sec; Start 185: fci-h2o; 178/411 Test #173: dft-omega ........................ Passed 24.42 sec; Start 186: fci-h2o-2; 179/411 Test #180: fsapt-terms ...................... Passed 8.89 sec; Start 187: fci-h2o-fzcv; 180/411 Test #185: fci-h2o .......................... Passed 6.44 sec; Start 188: fci-tdm; 181/411 Test #184: fci-dipole ....................... Passed 6.80 sec; Start 189: fci-tdm-2; 182/411 Test #188: fci-tdm .......................... Passed 1.51 sec; Start 190: fci-coverage; 183/411 Test #187: fci-h2o-fzcv ..................... Passed 4.69 sec; Start 191: fcidump; 184/411 Test #190: fci-coverage ..................... Passed 3.16 sec; Start 192: fd-freq-energy; 185/411 Test #186: fci-h2o-2 ........................ Passed 6,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1092#issuecomment-409185967:16247,Test,Test,16247,https://psicode.org,https://github.com/psi4/psi4/pull/1092#issuecomment-409185967,1,['Test'],['Test']
Testability,#112: dcft4 ............................ Passed 1796.11 sec; Start 61: cc43; 32/413 Test #59: cc41 ............................. Passed 103.24 sec; Start 71: cc52; 33/413 Test #396: python-vibanalysis ............... Passed 1038.97 sec; Start 98: cisd-opt-fd; 34/413 Test #184: isapt1 ........................... Passed 413.67 sec; Start 160: dfscf-bz2; 35/413 Test #361: tu6-cp-ne2 ....................... Passed 174.82 sec; Start 28: cc13c; 36/413 Test #61: cc43 ............................. Passed 78.23 sec; Start 92: cepa-module; 37/413 Test #322: sapt6 ............................ Passed 166.76 sec; Start 304: pywrap-cbs1; 38/413 Test #381: cc-module ........................ Passed 141.83 sec; Start 106: dcft-grad2; 39/413 Test #375: dft-custom-mgga .................. Passed 184.62 sec; Start 349: sapt-dft2; 40/413 Test #388: cookbook-rohf-orb-rot ............ Passed 186.42 sec; Start 263: omp3-5; 41/413 Test #283: opt-irc-2 ........................ Passed 159.99 sec; Start 117: dcft9; 42/413 Test #71: cc52 ............................. Passed 140.81 sec; Start 27: cc13b; 43/413 Test #197: fd-freq-gradient-large ........... Passed 299.84 sec; Start 261: omp3-3; 44/413 Test #98: cisd-opt-fd ...................... Passed 148.15 sec; Start 262: omp3-4; 45/413 Test #28: cc13c ............................ Passed 111.35 sec; Start 185: isapt2; 46/413 Test #92: cepa-module ...................... Passed 130.11 sec; Start 146: dfomp2-grad2; 47/413 Test #106: dcft-grad2 ....................... Passed 113.52 sec; Start 251: omp2-4; 48/413 Test #263: omp3-5 ........................... Passed 98.82 sec; Start 76: cc6; 49/413 Test #117: dcft9 ............................ Passed 94.18 sec; Start 44: cc28; 50/413 Test #160: dfscf-bz2 ........................ Passed 139.59 sec; Start 156: dft-grad-lr2; 51/413 Test #349: sapt-dft2 ........................ Passed 125.56 sec; Start 31: cc15; 52/413 Test #304: pywrap-cbs1 ...................... Passed 141.50 sec; Start 170: dft1; 53/413,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1246#issuecomment-425384085:4293,Test,Test,4293,https://psicode.org,https://github.com/psi4/psi4/pull/1246#issuecomment-425384085,1,['Test'],['Test']
Testability,#112: dcft6 ............................ Passed 211.14 sec; Start 320: sapt6; 29/411 Test #240: ocepa-freq1 ...................... Passed 484.94 sec; Start 155: dfscf-bz2; 30/411 Test #278: opt13 ............................ Passed 786.51 sec; Start 97: cisd-opt-fd; 31/411 Test #145: dfomp2-grad3 ..................... Passed 797.94 sec; Start 183: isapt2; 32/411 Test #320: sapt6 ............................ Passed 170.76 sec; Start 379: cc-module; 33/411 Test #155: dfscf-bz2 ........................ Passed 133.50 sec; Start 13: cbs-xtpl-alpha; 34/411 Test #359: tu6-cp-ne2 ....................... Passed 352.85 sec; Start 347: sapt-dft2; 35/411 Test #97: cisd-opt-fd ...................... Passed 180.99 sec; Start 281: opt-irc-2; 36/411 Test #114: dcft8 ............................ Passed 438.46 sec; Start 44: cc29; 37/411 Test #183: isapt2 ........................... Passed 126.68 sec; Start 47: cc31; 38/411 Test #347: sapt-dft2 ........................ Passed 120.25 sec; Start 31: cc16; 39/411 Test #29: cc14 ............................. Passed 394.66 sec; Start 386: cookbook-rohf-orb-rot; 40/411 Test #281: opt-irc-2 ........................ Passed 199.50 sec; Start 24: cc13; 41/411 Test #44: cc29 ............................. Passed 195.66 sec; Start 70: cc52; 42/411 Test #47: cc31 ............................. Passed 181.89 sec; Start 28: cc13d; 43/411 Test #379: cc-module ........................ Passed 306.49 sec; Start 161: dft-grad-lr2; 44/411 Test #13: cbs-xtpl-alpha ................... Passed 354.70 sec; Start 25: cc13a; 45/411 Test #31: cc16 ............................. Passed 243.41 sec; Start 113: dcft7; 46/411 Test #161: dft-grad-lr2 ..................... Passed 104.85 sec; Start 205: frac-traverse; 47/411 Test #70: cc52 ............................. Passed 164.44 sec; Start 316: sapt2; 48/411 Test #386: cookbook-rohf-orb-rot ............ Passed 284.29 sec; Start 318: sapt4; 49/411 Test #28: cc13d ............................ Passed 209.13 sec; Start 325:,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1077#issuecomment-409911901:3838,Test,Test,3838,https://psicode.org,https://github.com/psi4/psi4/pull/1077#issuecomment-409911901,1,['Test'],['Test']
Testability,#119: dfcasscf-sp ...................... Passed 4.33 sec; Start 300: pywrap-all; 2/411 Test #98: cisd-sp .......................... Passed 10.64 sec; Start 304: pywrap-checkrun-rhf; 3/411 Test #45: cc3 .............................. Passed 367.14 sec; Start 39: cc24; 4/411 Test #300: pywrap-all ....................... Passed 381.81 sec; Start 306: pywrap-checkrun-uhf; 5/411 Test #304: pywrap-checkrun-rhf .............. Passed 390.00 sec; Start 182: isapt1; 6/411 Test #227: mp2-def2 ......................... Passed 446.06 sec; Start 35: cc2; 7/411 Test #162: dft-grad-lr3 ..................... Passed 473.06 sec; Start 41: cc26; 8/411 Test #103: dcft-grad1 ....................... Passed 617.53 sec; Start 110: dcft4; 9/411 Test #39: cc24 ............................. Passed 338.53 sec; Start 40: cc25; 10/411 Test #182: isapt1 ........................... Passed 433.14 sec; Start 305: pywrap-checkrun-rohf; 11/411 Test #41: cc26 ............................. Passed 423.76 sec; Start 38: cc23; 12/411 Test #35: cc2 .............................. Passed 450.90 sec; Start 36: cc21; 13/411 Test #306: pywrap-checkrun-uhf .............. Passed 571.32 sec; Start 42: cc27; 14/411 Test #394: python-vibanalysis ............... Passed 966.42 sec; Start 76: cc7; 15/411 Test #40: cc25 ............................. Passed 480.63 sec; Start 18: cbs-xtpl-func; 16/411 Test #36: cc21 ............................. Passed 484.30 sec; Start 181: fsapt-allterms; 17/411 Test #38: cc23 ............................. Passed 495.58 sec; Start 193: fd-freq-energy-large; 18/411 Test #42: cc27 ............................. Passed 441.98 sec; Start 195: fd-freq-gradient-large; 19/411 Test #76: cc7 .............................. Passed 452.44 sec; Start 278: opt13; 20/411 Test #305: pywrap-checkrun-rohf ............. Passed 627.45 sec; Start 111: dcft5; 21/411 Test #110: dcft4 ............................ Passed 890.57 sec; Start 145: dfomp2-grad3; 22/411 Test #195: fd-freq-gradient-large ........... Pass,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1077#issuecomment-409911901:1323,Test,Test,1323,https://psicode.org,https://github.com/psi4/psi4/pull/1077#issuecomment-409911901,1,['Test'],['Test']
Testability,#123: dfccsdl1 ......................... Passed 3.14 sec; Start 13: cbs-xtpl-alpha; 202/401 Test #285: psimrcc-ccsd_t-3 ................. Passed 1.29 sec; Start 17: cbs-xtpl-opt; 203/401 Test #283: psimrcc-ccsd_t-1 ................. Passed 1.20 sec; Start 19: cbs-xtpl-wrapper; 204/401 Test #284: psimrcc-ccsd_t-2 ................. Passed 1.39 sec; Start 84: cepa0-grad1; 205/401 Test #289: psimrcc-pt2 ...................... Passed 1.11 sec; Start 85: cepa0-grad2; 206/401 Test #290: psimrcc-sp1 ...................... Passed 2.98 sec; Start 86: cepa1; 207/401 Test #84: cepa0-grad1 ...................... Passed 2.32 sec; Start 87: cepa2; 208/401 Test #85: cepa0-grad2 ...................... Passed 4.19 sec; Start 88: cepa3; 209/401 Test #9: castup2 .......................... Passed 8.52 sec; Start 89: cepa1; 210/401 Test #10: castup3 .......................... Passed 8.84 sec; Start 90: cepa-module; 211/401 Test #86: cepa1 ............................ Passed 9.10 sec; Start 93: cisd-h2o+-1; 212/401 Test #93: cisd-h2o+-1 ...................... Passed 2.99 sec; Start 94: cisd-h2o+-2; 213/401 Test #87: cepa2 ............................ Passed 10.57 sec; Start 95: cisd-h2o-clpse; 214/401 Test #95: cisd-h2o-clpse ................... Passed 1.79 sec; Start 96: cisd-opt-fd; 215/401 Test #94: cisd-h2o+-2 ...................... Passed 2.81 sec; Start 97: cisd-sp; 216/401 Test #88: cepa3 ............................ Passed 11.93 sec; Start 98: cisd-sp-2; 217/401 Test #98: cisd-sp-2 ........................ Passed 2.77 sec; Start 102: dcft-grad1; 218/401 Test #89: cepa1 ............................ Passed 13.19 sec; Start 104: dcft-grad3; 219/401 Test #97: cisd-sp .......................... Passed 5.81 sec; Start 105: dcft-grad4; 220/401 Test #1: adc1 ............................. Passed 23.47 sec; Start 107: dcft2; 221/401 Test #2: adc2 ............................. Passed 29.39 sec; Start 109: dcft4; 222/401 Test #107: dcft2 ............................ Passed 11.23 sec; Start 11,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-402413637:19836,Test,Test,19836,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-402413637,1,['Test'],['Test']
Testability,#127: dfccsd-grad1 ..................... Passed 37.30 sec; Start 279: opt12; 142/413 Test #2: adc2 ............................. Passed 37.54 sec; Start 111: dcft3; 143/413 Test #266: opt-lindep-change ................ Passed 28.24 sec; Start 350: sapt-compare; 144/413 Test #318: sapt2 ............................ Passed 331.13 sec; Start 198: fd-gradient; 145/413 Test #221: mints-benchmark .................. Passed 43.57 sec; Start 148: dfomp3-1; 146/413 Test #172: dft1-alt ......................... Passed 55.54 sec; Start 284: opt-irc-3; 147/413 Test #115: dcft7 ............................ Passed 345.49 sec; Start 309: pywrap-db1; 148/413 Test #54: cc37 ............................. Passed 35.93 sec; Start 269: opt2; 149/413 Test #279: opt12 ............................ Passed 26.85 sec; Start 361: tu6-cp-ne2; 150/413 Test #22: cc10 ............................. Passed 51.09 sec; Start 74: cc55; 151/413 Test #23: cc11 ............................. Passed 49.40 sec; Start 338: scf5; 152/413 Test #111: dcft3 ............................ Passed 41.52 sec; Start 325: sapt7; 153/413 Test #350: sapt-compare ..................... Passed 44.69 sec; Start 314: rasci-ne; 154/413 Test #304: pywrap-cbs1 ...................... Passed 169.96 sec; Start 93: ci-multi; 155/413 Test #269: opt2 ............................. Passed 27.77 sec; Start 66: cc48; 156/413 Test #284: opt-irc-3 ........................ Passed 32.58 sec; Start 395: python-3-index-transforms; 157/413 Test #198: fd-gradient ...................... Passed 37.81 sec; Start 339: scf6; 158/413 Test #301: pywrap-alias ..................... Passed 80.45 sec; Start 131: dfmp2-1; 159/413 Test #148: dfomp3-1 ......................... Passed 43.61 sec; Start 133: dfmp2-3; 160/413 Test #395: python-3-index-transforms ........ Passed 9.79 sec; Start 135: dfmp2-ecp; 161/413 Test #309: pywrap-db1 ....................... Passed 42.33 sec; Start 344: soscf-dft; 162/413 Test #12: cbs-parser ....................... Passed 86.78 s,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1237#issuecomment-425038275:14323,Test,Test,14323,https://psicode.org,https://github.com/psi4/psi4/pull/1237#issuecomment-425038275,1,['Test'],['Test']
Testability,#127: dfccsdt1 ......................... Passed 2.46 sec; Start 295: psithon1; 254/404 Test #241: ocepa-grad1 ...................... Passed 2.76 sec; Start 83: cdomp2-1; 255/404 Test #253: omp2p5-1 ......................... Passed 1.72 sec; Start 123: dfccsd1; 256/404 Test #255: omp2p5-grad1 ..................... Passed 2.83 sec; Start 10: castup3; 257/404 Test #226: mp2-1 ............................ Passed 3.95 sec; Start 199: fnocc1; 258/404 Test #83: cdomp2-1 ......................... Passed 2.31 sec; Start 243: ocepa1; 259/404 Test #369: dft-jk ........................... Passed 5.86 sec; Start 15: cbs-xtpl-freq; 260/404 Test #86: cepa0-grad2 ...................... Passed 3.02 sec; Start 218: mints8; 261/404 Test #123: dfccsd1 .......................... Passed 2.54 sec; Start 198: freq-isotope2; 262/404 Test #295: psithon1 ......................... Passed 4.02 sec; Start 385: psi4numpy-fci; 263/404 Test #243: ocepa1 ........................... Passed 2.07 sec; Start 139: dfomp2-1; 264/404 Test #285: props2 ........................... Passed 6.83 sec; Start 158: dft-ghost; 265/404 Test #199: fnocc1 ........................... Passed 3.03 sec; Start 388: python-curve; 266/404 Test #10: castup3 .......................... Passed 4.38 sec; Start 108: dcft2; 267/404 Test #198: freq-isotope2 .................... Passed 3.71 sec; Start 393: python-3-index-transforms; 268/404 Test #139: dfomp2-1 ......................... Passed 2.72 sec; Start 137: dfmp2-grad4; 269/404 Test #385: psi4numpy-fci .................... Passed 3.33 sec; Start 98: cisd-sp; 270/404 Test #388: python-curve ..................... Passed 2.61 sec; Start 329: scf-guess-read2; 271/404 Test #108: dcft2 ............................ Passed 1.50 sec; Start 269: opt3; 272/404 Test #15: cbs-xtpl-freq .................... Passed 5.56 sec; Start 265: opt1; 273/404 Test #218: mints8 ........................... Passed 5.50 sec; Start 6: ao-casscf-sp; 274/404 Test #137: dfmp2-grad4 ...................... Passed,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-404174338:24426,Test,Test,24426,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-404174338,1,['Test'],['Test']
Testability,#129: dfmp2-2 .......................... Passed 2.57 sec; Start 229: mp3-grad1; 274/401 Test #82: cdomp2-1 ......................... Passed 9.33 sec; Start 153: dfrasscf-sp; 275/401 Test #267: opt5 ............................. Passed 3.79 sec; Start 239: ocepa1; 276/401 Test #228: mp2p5-grad2 ...................... Passed 5.14 sec; Start 120: dfccdl1; 277/401 Test #224: mp2-grad1 ........................ Passed 3.56 sec; Start 230: mp3-grad2; 278/401 Test #217: mints9 ........................... Passed 2.05 sec; Start 199: frac; 279/401 Test #250: omp2p5-2 ......................... Passed 19.95 sec; Start 220: molden2; 280/401 Test #183: fci-h2o-fzcv ..................... Passed 3.11 sec; Start 377: psi4numpy-cphf; 281/401 Test #180: fci-dipole ....................... Passed 5.14 sec; Start 4: casscf-semi; 282/401 Test #176: fsapt-terms ...................... Passed 5.54 sec; Start 232: mpn-bh; 283/401 Test #225: mp2-grad2 ........................ Passed 6.04 sec; Start 242: omp2-1; 284/401 Test #126: dfccsdt1 ......................... Passed 10.41 sec; Start 279: opt-freeze-coords; 285/401 Test #336: soscf-large ...................... Passed 6.56 sec; Start 95: cisd-h2o-clpse; 286/401 Test #286: psimrcc-ccsd_t-4 ................. Passed 9.76 sec; Start 6: ao-casscf-sp; 287/401 Test #377: psi4numpy-cphf ................... Passed 2.58 sec; Start 350: tu3-h2o-opt; 288/401 Test #84: cepa0-grad1 ...................... Passed 7.54 sec; Start 261: opt1; 289/401 Test #327: scf1 ............................. Passed 5.91 sec; Start 385: python-curve; 290/401 Test #229: mp3-grad1 ........................ Passed 6.62 sec; Start 219: molden1; 291/401 Test #198: fnocc4 ........................... Passed 16.58 sec; Start 253: omp3-1; 292/401 Test #95: cisd-h2o-clpse ................... Passed 2.85 sec; Start 116: dfcasscf-sa-sp; 293/401 Test #199: frac ............................. Passed 5.99 sec; Start 335: scf-property; 294/401 Test #145: dfomp3-1 ......................... P,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1071#issuecomment-402453832:26910,Test,Test,26910,https://psicode.org,https://github.com/psi4/psi4/pull/1071#issuecomment-402453832,1,['Test'],['Test']
Testability,#12: cbs-parser ....................... Passed 13.54 sec; Start 33: cc18; 140/404 Test #319: sapt5 ............................ Passed 24.55 sec; Start 348: sapt-compare; 141/404 Test #297: pubchem1 ......................... Passed 22.81 sec; Start 62: cc45; 142/404 Test #126: dfccsd-t-grad1 ................... Passed 10.40 sec; Start 375: pywrap-bfs; 143/404 Test #155: dfscf-bz2 ........................ Passed 31.62 sec; Start 152: dfomp2p5-grad1; 144/404 Test #313: rasscf-sp ........................ Passed 11.43 sec; Start 54: cc38; 145/404 Test #62: cc45 ............................. Passed 7.58 sec; Start 282: opt-irc-3; 146/404 Test #33: cc18 ............................. Passed 14.20 sec; Start 172: dft3; 147/404 Test #152: dfomp2p5-grad1 ................... Passed 5.61 sec; Start 252: omp2-grad2; 148/404 Test #100: ci-property ...................... Passed 21.60 sec; Start 106: dcft-grad4; 149/404 Test #54: cc38 ............................. Passed 6.52 sec; Start 267: opt2; 150/404 Test #196: fd-gradient ...................... Passed 23.74 sec; Start 92: ci-multi; 151/404 Test #252: omp2-grad2 ....................... Passed 5.58 sec; Start 323: sapt7; 152/404 Test #92: ci-multi ......................... Passed 7.78 sec; Start 148: dfomp3-grad1; 153/404 Test #348: sapt-compare ..................... Passed 20.49 sec; Start 166: dft-psivar; 154/404 Test #282: opt-irc-3 ........................ Passed 14.20 sec; Start 159: dft-grad-meta; 155/404 Test #148: dfomp3-grad1 ..................... Passed 3.61 sec; Start 342: soscf-dft; 156/404 Test #106: dcft-grad4 ....................... Passed 14.52 sec; Start 49: cc33; 157/404 Test #375: pywrap-bfs ....................... Passed 25.33 sec; Start 72: cc54; 158/404 Test #172: dft3 ............................. Passed 18.93 sec; Start 150: dfomp2p5-1; 159/404 Test #267: opt2 ............................. Passed 15.94 sec; Start 296: psithon2; 160/404 Test #150: dfomp2p5-1 ....................... Passed 2.94 sec; Start 1,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-404174338:13885,Test,Test,13885,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-404174338,1,['Test'],['Test']
Testability,#131: dfmp2-1 .......................... Passed 38.95 sec; Start 377: pywrap-bfs; 180/413 Test #135: dfmp2-ecp ........................ Passed 39.52 sec; Start 1: adc1; 181/413 Test #208: ghosts ........................... Passed 37.52 sec; Start 165: dft-freq; 182/413 Test #344: soscf-dft ........................ Passed 37.25 sec; Start 209: gibbs; 183/413 Test #266: opt-lindep-change ................ Passed 29.25 sec; Start 203: fnocc3; 184/413 Test #279: opt12 ............................ Passed 22.14 sec; Start 174: dft3; 185/413 Test #274: opt6 ............................. Passed 22.76 sec; Start 161: dft-b2plyp; 186/413 Test #328: scf-ecp .......................... Passed 30.17 sec; Start 250: omp2-3; 187/413 Test #204: fnocc4 ........................... Passed 23.72 sec; Start 348: sapt-dft1; 188/413 Test #179: extern2 .......................... Passed 22.09 sec; Start 168: dft-psivar; 189/413 Test #269: opt2 ............................. Passed 22.92 sec; Start 140: dfmp2-grad5; 190/413 Test #260: omp3-2 ........................... Passed 15.21 sec; Start 305: pywrap-checkrun-convcrit; 191/413 Test #203: fnocc3 ........................... Passed 13.44 sec; Start 191: fci-tdm-2; 192/413 Test #175: dft-omega ........................ Passed 27.08 sec; Start 360: tu5-sapt; 193/413 Test #377: pywrap-bfs ....................... Passed 26.40 sec; Start 249: omp2-2; 194/413 Test #1: adc1 ............................. Passed 26.88 sec; Start 107: dcft-grad3; 195/413 Test #250: omp2-3 ........................... Passed 18.82 sec; Start 90: cepa3; 196/413 Test #165: dft-freq ......................... Passed 23.47 sec; Start 240: nbody-intermediates; 197/413 Test #209: gibbs ............................ Passed 23.05 sec; Start 145: dfomp2-grad1; 198/413 Test #305: pywrap-checkrun-convcrit ......... Passed 18.20 sec; Start 277: opt9; 199/413 Test #140: dfmp2-grad5 ...................... Passed 18.72 sec; Start 7: casscf-sp; 200/413 Test #174: dft3 .......................,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1246#issuecomment-425384085:17817,Test,Test,17817,https://psicode.org,https://github.com/psi4/psi4/pull/1246#issuecomment-425384085,1,['Test'],['Test']
Testability,#142: dfomp2-2 ......................... Passed 57.07 sec; Start 128: dfccsd-t-grad1; 108/413 Test #391: python-pubchem ................... Passed 64.54 sec; Start 56: cc39; 109/413 Test #206: frac-ip-fitting .................. Passed 73.00 sec; Start 299: pubchem1; 110/413 Test #280: opt13 ............................ Passed 825.07 sec; Start 101: ci-property; 111/413 Test #318: sapt2 ............................ Passed 352.35 sec; Start 202: fnocc2; 112/413 Test #247: ocepa3 ........................... Passed 52.53 sec; Start 239: nbody-he-cluster; 113/413 Test #34: cc18 ............................. Passed 50.39 sec; Start 50: cc33; 114/413 Test #115: dcft7 ............................ Passed 394.48 sec; Start 68: cc4a; 115/413 Test #169: dft-b3lyp ........................ Passed 70.61 sec; Start 275: opt7; 116/413 Test #12: cbs-parser ....................... Passed 74.89 sec; Start 72: cc53; 117/413 Test #69: cc50 ............................. Passed 65.05 sec; Start 33: cc17; 118/413 Test #301: pywrap-alias ..................... Passed 85.24 sec; Start 164: dft-grad-meta; 119/413 Test #128: dfccsd-t-grad1 ................... Passed 60.82 sec; Start 278: opt11; 120/413 Test #50: cc33 ............................. Passed 40.75 sec; Start 52: cc35; 121/413 Test #101: ci-property ...................... Passed 58.02 sec; Start 38: cc22; 122/413 Test #56: cc39 ............................. Passed 69.67 sec; Start 74: cc55; 123/413 Test #299: pubchem1 ......................... Passed 63.57 sec; Start 154: dfomp2p5-grad1; 124/413 Test #239: nbody-he-cluster ................. Passed 60.48 sec; Start 172: dft1-alt; 125/413 Test #202: fnocc2 ........................... Passed 76.70 sec; Start 150: dfomp3-grad1; 126/413 Test #68: cc4a ............................. Passed 61.95 sec; Start 55: cc38; 127/413 Test #33: cc17 ............................. Passed 49.20 sec; Start 63: cc45; 128/413 Test #275: opt7 ............................. Passed 61.83 sec; Start 196: fd-freq-g,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1239#issuecomment-425082026:11196,Test,Test,11196,https://psicode.org,https://github.com/psi4/psi4/pull/1239#issuecomment-425082026,1,['Test'],['Test']
Testability,#143: dfomp2-4 ......................... Passed 43.57 sec; Start 66: cc48; 124/412 Test #274: opt7 ............................. Passed 53.71 sec; Start 343: soscf-dft; 125/412 Test #324: sapt7 ............................ Passed 35.25 sec; Start 141: dfomp2-2; 126/412 Test #313: rasci-ne ......................... Passed 40.47 sec; Start 56: cc39; 127/412 Test #69: cc50 ............................. Passed 52.28 sec; Start 375: dft-custom-gga; 128/412 Test #134: dfmp2-ecp ........................ Passed 36.52 sec; Start 152: dfomp2p5-2; 129/412 Test #21: cc1 .............................. Passed 100.25 sec; Start 195: fd-freq-gradient; 130/412 Test #130: dfmp2-1 .......................... Passed 35.57 sec; Start 275: opt8; 131/412 Test #207: ghosts ........................... Passed 35.10 sec; Start 79: cc8a; 132/412 Test #343: soscf-dft ........................ Passed 32.03 sec; Start 63: cc45; 133/412 Test #338: scf6 ............................. Passed 43.81 sec; Start 12: cbs-parser; 134/412 Test #80: cc8b ............................. Passed 57.05 sec; Start 327: scf-ecp; 135/412 Test #375: dft-custom-gga ................... Passed 36.12 sec; Start 93: ci-multi; 136/412 Test #337: scf5 ............................. Passed 49.46 sec; Start 265: opt-lindep-change; 137/412 Test #250: omp2-4 ........................... Passed 85.02 sec; Start 376: pywrap-bfs; 138/412 Test #275: opt8 ............................. Passed 43.16 sec; Start 127: dfccsd-t-grad1; 139/412 Test #63: cc45 ............................. Passed 36.28 sec; Start 78: cc8; 140/412 Test #56: cc39 ............................. Passed 61.65 sec; Start 53: cc36; 141/412 Test #195: fd-freq-gradient ................. Passed 54.42 sec; Start 1: adc1; 142/412 Test #66: cc48 ............................. Passed 74.05 sec; Start 160: dft-b2plyp; 143/412 Test #141: dfomp2-2 ......................... Passed 64.59 sec; Start 174: dft-omega; 144/412 Test #265: opt-lindep-change ................ Passed 27.26 sec,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1199#issuecomment-417683504:12706,Test,Test,12706,https://psicode.org,https://github.com/psi4/psi4/pull/1199#issuecomment-417683504,1,['Test'],['Test']
Testability,#143: dfomp2-grad1 ..................... Passed 9.64 sec; Start 206: ghosts; 155/411 Test #273: opt7 ............................. Passed 50.60 sec; Start 336: scf5; 156/411 Test #146: dfomp3-1 ......................... Passed 18.00 sec; Start 129: dfmp2-1; 157/411 Test #52: cc36 ............................. Passed 14.24 sec; Start 360: x2c1; 158/411 Test #109: dcft3 ............................ Passed 13.16 sec; Start 252: omp2-grad2; 159/411 Test #299: pywrap-alias ..................... Passed 75.37 sec; Start 337: scf6; 160/411 Test #53: cc37 ............................. Passed 9.51 sec; Start 374: dft-custom-gga; 161/411 Test #16: cbs-xtpl-gradient ................ Passed 21.53 sec; Start 342: soscf-dft; 162/411 Test #307: pywrap-db1 ....................... Passed 42.38 sec; Start 196: fd-gradient; 163/411 Test #312: rasci-ne ......................... Passed 36.76 sec; Start 274: opt8; 164/411 Test #360: x2c1 ............................. Passed 20.23 sec; Start 392: python-cc54; 165/411 Test #133: dfmp2-ecp ........................ Passed 34.96 sec; Start 326: scf-ecp; 166/411 Test #252: omp2-grad2 ....................... Passed 22.08 sec; Start 254: omp2p5-2; 167/411 Test #323: sapt7 ............................ Passed 31.93 sec; Start 258: omp3-2; 168/411 Test #206: ghosts ........................... Passed 32.07 sec; Start 264: opt-lindep-change; 169/411 Test #200: fnocc2 ........................... Passed 34.47 sec; Start 1: adc1; 170/411 Test #337: scf6 ............................. Passed 29.80 sec; Start 272: opt6; 171/411 Test #336: scf5 ............................. Passed 34.04 sec; Start 375: pywrap-bfs; 172/411 Test #129: dfmp2-1 .......................... Passed 33.82 sec; Start 173: dft-omega; 173/411 Test #392: python-cc54 ...................... Passed 14.14 sec; Start 89: cepa3; 174/411 Test #254: omp2p5-2 ......................... Passed 13.16 sec; Start 159: dft-b2plyp; 175/411 Test #374: dft-custom-gga ................... Passed 32.62 sec; ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1124#issuecomment-411347383:15486,Test,Test,15486,https://psicode.org,https://github.com/psi4/psi4/pull/1124#issuecomment-411347383,1,['Test'],['Test']
Testability,#145: dfomp2-grad3 ..................... Passed 155.00 sec; Start 242: ocepa-grad2; 232/411 Test #206: ghosts ........................... Passed 33.52 sec; Start 243: ocepa1; 233/411 Test #241: ocepa-grad1 ...................... Passed 3.37 sec; Start 244: ocepa2; 234/411 Test #243: ocepa1 ........................... Passed 2.50 sec; Start 245: ocepa3; 235/411 Test #155: dfscf-bz2 ........................ Passed 142.25 sec; Start 246: omp2-1; 236/411 Test #246: omp2-1 ........................... Passed 2.41 sec; Start 247: omp2-2; 237/411 Test #238: nbody-intermediates .............. Passed 14.13 sec; Start 248: omp2-3; 238/411 Test #247: omp2-2 ........................... Passed 10.28 sec; Start 249: omp2-4; 239/411 Test #219: mints-benchmark .................. Passed 43.79 sec; Start 250: omp2-5; 240/411 Test #248: omp2-3 ........................... Passed 13.55 sec; Start 251: omp2-grad1; 241/411 Test #245: ocepa3 ........................... Passed 24.74 sec; Start 252: omp2-grad2; 242/411 Test #251: omp2-grad1 ....................... Passed 5.30 sec; Start 253: omp2p5-1; 243/411 Test #204: frac-ip-fitting .................. Passed 67.86 sec; Start 254: omp2p5-2; 244/411 Test #242: ocepa-grad2 ...................... Passed 32.93 sec; Start 255: omp2p5-grad1; 245/411 Test #253: omp2p5-1 ......................... Passed 3.18 sec; Start 256: omp2p5-grad2; 246/411 Test #237: nbody-he-cluster ................. Passed 38.32 sec; Start 257: omp3-1; 247/411 Test #255: omp2p5-grad1 ..................... Passed 3.52 sec; Start 258: omp3-2; 248/411 Test #257: omp3-1 ........................... Passed 2.51 sec; Start 259: omp3-3; 249/411 Test #254: omp2p5-2 ......................... Passed 12.32 sec; Start 260: omp3-4; 250/411 Test #103: dcft-grad1 ....................... Passed 316.29 sec; Start 261: omp3-5; 251/411 Test #252: omp2-grad2 ....................... Passed 18.49 sec; Start 262: omp3-grad1; 252/411 Test #244: ocepa2 ........................... Passed 43.29 sec; S,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1092#issuecomment-409185967:22482,Test,Test,22482,https://psicode.org,https://github.com/psi4/psi4/pull/1092#issuecomment-409185967,1,['Test'],['Test']
Testability,#147: dfomp3-2 ......................... Passed 39.98 sec; Start 56: cc4; 131/411 Test #144: dfomp2-grad2 ..................... Passed 48.38 sec; Start 290: psimrcc-ccsd_t-4; 132/411 Test #261: omp3-5 ........................... Passed 59.17 sec; Start 250: omp2-5; 133/411 Test #290: psimrcc-ccsd_t-4 ................. Passed 17.78 sec; Start 321: sapt-dft-api; 134/411 Test #92: ci-multi ......................... Passed 24.62 sec; Start 172: dft3; 135/411 Test #56: cc4 .............................. Passed 26.86 sec; Start 160: dft-grad-lr1; 136/411 Test #26: cc13b ............................ Passed 49.02 sec; Start 67: cc4a; 137/411 Test #249: omp2-4 ........................... Passed 45.04 sec; Start 165: dft-grad2; 138/411 Test #260: omp3-4 ........................... Passed 41.30 sec; Start 64: cc47; 139/411 Test #321: sapt-dft-api ..................... Passed 18.17 sec; Start 263: omp3-grad2; 140/411 Test #250: omp2-5 ........................... Passed 27.95 sec; Start 315: sapt1; 141/411 Test #172: dft3 ............................. Passed 20.49 sec; Start 20: cc1; 142/411 Test #160: dft-grad-lr1 ..................... Passed 17.39 sec; Start 337: scf6; 143/411 Test #165: dft-grad2 ........................ Passed 16.86 sec; Start 151: dfomp2p5-2; 144/411 Test #67: cc4a ............................. Passed 20.12 sec; Start 267: opt2; 145/411 Test #315: sapt1 ............................ Passed 18.24 sec; Start 277: opt12; 146/411 Test #64: cc47 ............................. Passed 27.34 sec; Start 245: ocepa3; 147/411 Test #267: opt2 ............................. Passed 20.06 sec; Start 153: dfomp2p5-grad2; 148/411 Test #337: scf6 ............................. Passed 34.12 sec; Start 82: cc9a; 149/411 Test #151: dfomp2p5-2 ....................... Passed 33.19 sec; Start 12: cbs-parser; 150/411 Test #277: opt12 ............................ Passed 20.31 sec; Start 169: dft-vv10; 151/411 Test #263: omp3-grad2 ....................... Passed 45.19 sec; Start 340: sosc,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1078#issuecomment-408900195:13188,Test,Test,13188,https://psicode.org,https://github.com/psi4/psi4/pull/1078#issuecomment-408900195,1,['Test'],['Test']
Testability,#147: dfomp3-2 ......................... Passed 64.94 sec; Start 23: cc12; 226/411 Test #266: opt1-fd .......................... Passed 34.40 sec; Start 140: dfomp2-2; 227/411 Test #360: x2c1 ............................. Passed 82.77 sec; Start 313: rasscf-sp; 228/411 Test #73: cc55 ............................. Passed 93.94 sec; Start 21: cc10; 229/411 Test #23: cc12 ............................. Passed 47.84 sec; Start 247: omp2-2; 230/411 Test #81: cc9 .............................. Passed 116.49 sec; Start 93: cisd-h2o+-0; 231/411 Test #82: cc9a ............................. Passed 113.55 sec; Start 79: cc8b; 232/411 Test #77: cc8 .............................. Passed 106.26 sec; Start 254: omp2p5-2; 233/411 Test #80: cc8c ............................. Passed 94.57 sec; Start 117: dfcasscf-sa-sp; 234/411 Test #93: cisd-h2o+-0 ...................... Passed 5.15 sec; Start 339: scf-property; 235/411 Test #313: rasscf-sp ........................ Passed 40.25 sec; Start 99: cisd-sp-2; 236/411 Test #247: omp2-2 ........................... Passed 30.55 sec; Start 9: castup2; 237/411 Test #117: dfcasscf-sa-sp ................... Passed 4.12 sec; Start 54: cc38; 238/411 Test #140: dfomp2-2 ......................... Passed 50.51 sec; Start 187: fci-h2o-fzcv; 239/411 Test #339: scf-property ..................... Passed 4.60 sec; Start 3: casscf-fzc-sp; 240/411 Test #99: cisd-sp-2 ........................ Passed 4.60 sec; Start 198: freq-isotope2; 241/411 Test #21: cc10 ............................. Passed 32.92 sec; Start 84: cdomp2-2; 242/411 Test #187: fci-h2o-fzcv ..................... Passed 3.84 sec; Start 392: python-cc54; 243/411 Test #254: omp2p5-2 ......................... Passed 12.79 sec; Start 78: cc8a; 244/411 Test #198: freq-isotope2 .................... Passed 10.53 sec; Start 125: dfccsd-grad1; 245/411 Test #9: castup2 .......................... Passed 12.44 sec; Start 329: scf-guess-read2; 246/411 Test #329: scf-guess-read2 .................. Passed 6.98,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1089#issuecomment-408103972:22068,Test,Test,22068,https://psicode.org,https://github.com/psi4/psi4/pull/1089#issuecomment-408103972,1,['Test'],['Test']
Testability,#148: dfomp3-1 ......................... Passed 7.43 sec; Start 108: dcft-grad4; 138/413 Test #196: fd-freq-gradient ................. Passed 33.45 sec; Start 152: dfomp2p5-1; 139/413 Test #85: cdomp2-2 ......................... Passed 11.51 sec; Start 350: sapt-compare; 140/413 Test #239: nbody-he-cluster ................. Passed 40.41 sec; Start 338: scf5; 141/413 Test #33: cc17 ............................. Passed 14.22 sec; Start 309: pywrap-db1; 142/413 Test #63: cc45 ............................. Passed 10.89 sec; Start 276: opt8; 143/413 Test #254: omp2-grad2 ....................... Passed 14.40 sec; Start 24: cc12; 144/413 Test #127: dfccsd-grad1 ..................... Passed 12.88 sec; Start 221: mints-benchmark; 145/413 Test #152: dfomp2p5-1 ....................... Passed 12.39 sec; Start 93: ci-multi; 146/413 Test #278: opt11 ............................ Passed 47.74 sec; Start 362: x2c1; 147/413 Test #24: cc12 ............................. Passed 7.89 sec; Start 2: adc2; 148/413 Test #299: pubchem1 ......................... Passed 64.73 sec; Start 198: fd-gradient; 149/413 Test #362: x2c1 ............................. Passed 4.60 sec; Start 133: dfmp2-3; 150/413 Test #101: ci-property ...................... Passed 54.08 sec; Start 111: dcft3; 151/413 Test #111: dcft3 ............................ Passed 3.43 sec; Start 54: cc37; 152/413 Test #172: dft1-alt ......................... Passed 50.47 sec; Start 339: scf6; 153/413 Test #54: cc37 ............................. Passed 4.07 sec; Start 314: rasci-ne; 154/413 Test #164: dft-grad-meta .................... Passed 53.14 sec; Start 73: cc54; 155/413 Test #108: dcft-grad4 ....................... Passed 32.86 sec; Start 49: cc32; 156/413 Test #338: scf5 ............................. Passed 27.19 sec; Start 325: sapt7; 157/413 Test #93: ci-multi ......................... Passed 17.51 sec; Start 135: dfmp2-ecp; 158/413 Test #276: opt8 ............................. Passed 24.70 sec; Start 131: dfmp2-1; 159/413 ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1264#issuecomment-425525678:13922,Test,Test,13922,https://psicode.org,https://github.com/psi4/psi4/pull/1264#issuecomment-425525678,1,['Test'],['Test']
Testability,#149: dfomp3-grad1 ..................... Passed 46.51 sec; Start 147: dfomp3-1; 198/412 Test #51: cc34 ............................. Passed 53.72 sec; Start 24: cc12; 199/412 Test #53: cc36 ............................. Passed 46.73 sec; Start 54: cc37; 200/412 Test #110: dcft3 ............................ Passed 42.76 sec; Start 297: psithon2; 201/412 Test #166: dft-grad2 ........................ Passed 57.63 sec; Start 200: fnocc1; 202/412 Test #129: dfccsdat1 ........................ Passed 38.92 sec; Start 91: cepa1; 203/412 Test #322: sapt-dft-api ..................... Passed 55.16 sec; Start 276: opt9; 204/412 Test #202: fnocc3 ........................... Passed 35.92 sec; Start 139: dfmp2-grad5; 205/412 Test #154: dft-grad-lr1 ..................... Passed 52.13 sec; Start 144: dfomp2-grad1; 206/412 Test #170: dft-vv10 ......................... Passed 47.09 sec; Start 341: soscf-large; 207/412 Test #249: omp2-3 ........................... Passed 37.28 sec; Start 325: sapt8; 208/412 Test #292: psimrcc-fd-freq1 ................. Passed 41.25 sec; Start 239: nbody-intermediates; 209/412 Test #316: sapt1 ............................ Passed 49.94 sec; Start 218: mints6; 210/412 Test #147: dfomp3-1 ......................... Passed 38.24 sec; Start 177: extern1; 211/412 Test #24: cc12 ............................. Passed 40.12 sec; Start 302: pywrap-basis; 212/412 Test #54: cc37 ............................. Passed 39.52 sec; Start 219: mints8; 213/412 Test #200: fnocc1 ........................... Passed 33.21 sec; Start 394: python-3-index-transforms; 214/412 Test #91: cepa1 ............................ Passed 33.96 sec; Start 151: dfomp2p5-1; 215/412 Test #291: psimrcc-ccsd_t-4 ................. Passed 49.99 sec; Start 106: dcft-grad3; 216/412 Test #297: psithon2 ......................... Passed 44.73 sec; Start 165: dft-grad1; 217/412 Test #276: opt9 ............................. Passed 42.06 sec; Start 14: cbs-xtpl-energy; 218/412 Test #139: dfmp2-grad5 ..........,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1227#issuecomment-421362141:19556,Test,Test,19556,https://psicode.org,https://github.com/psi4/psi4/pull/1227#issuecomment-421362141,1,['Test'],['Test']
Testability,#14: cbs-xtpl-energy .................. Passed 11.68 sec; Start 105: dcft-grad3; 205/411 Test #164: dft-grad1 ........................ Passed 15.73 sec; Start 252: omp2-grad2; 206/411 Test #72: cc54 ............................. Passed 29.77 sec; Start 152: dfomp2p5-grad1; 207/411 Test #51: cc35 ............................. Passed 49.20 sec; Start 285: props2; 208/411 Test #286: props3 ........................... Passed 13.73 sec; Start 21: cc10; 209/411 Test #350: dft-custom ....................... Passed 14.96 sec; Start 217: mints6; 210/411 Test #138: dfmp2-grad5 ...................... Passed 17.05 sec; Start 3: casscf-fzc-sp; 211/411 Test #22: cc11 ............................. Passed 34.28 sec; Start 150: dfomp2p5-1; 212/411 Test #248: omp2-3 ........................... Passed 23.71 sec; Start 23: cc12; 213/411 Test #357: tu4-h2o-freq ..................... Passed 14.43 sec; Start 89: cepa3; 214/411 Test #49: cc33 ............................. Passed 31.01 sec; Start 50: cc34; 215/411 Test #133: dfmp2-ecp ........................ Passed 12.37 sec; Start 62: cc45; 216/411 Test #258: omp3-2 ........................... Passed 23.21 sec; Start 37: cc22; 217/411 Test #285: props2 ........................... Passed 14.24 sec; Start 128: dfccsdat1; 218/411 Test #53: cc37 ............................. Passed 20.51 sec; Start 101: cubeprop; 219/411 Test #217: mints6 ........................... Passed 13.56 sec; Start 369: dft-jk; 220/411 Test #105: dcft-grad3 ....................... Passed 21.24 sec; Start 338: scf7; 221/411 Test #3: casscf-fzc-sp .................... Passed 18.69 sec; Start 372: dft-custom-hybrid; 222/411 Test #101: cubeprop ......................... Passed 13.44 sec; Start 291: psimrcc-fd-freq1; 223/411 Test #369: dft-jk ........................... Passed 14.57 sec; Start 52: cc36; 224/411 Test #372: dft-custom-hybrid ................ Passed 12.18 sec; Start 393: python-3-index-transforms; 225/411 Test #150: dfomp2p5-1 ....................... Passed 2,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1072#issuecomment-406602307:20180,Test,Test,20180,https://psicode.org,https://github.com/psi4/psi4/pull/1072#issuecomment-406602307,1,['Test'],['Test']
Testability,#150: dfomp2p5-2 ....................... Passed 66.64 sec; Start 162: dft-psivar; 86/401 Test #146: dfomp3-2 ......................... Passed 83.22 sec; Start 263: opt2; 87/401 Test #270: opt8 ............................. Passed 39.82 sec; Start 248: omp2-grad2; 88/401 Test #319: sapt7 ............................ Passed 25.97 sec; Start 278: opt-irc-3; 89/401 Test #168: dft3 ............................. Passed 24.29 sec; Start 185: fci-tdm-2; 90/401 Test #259: omp3-grad2 ....................... Passed 100.33 sec; Start 241: ocepa3; 91/401 Test #144: dfomp2-grad3 ..................... Passed 728.97 sec; Start 139: dfomp2-2; 92/401 Test #192: fd-gradient ...................... Passed 40.43 sec; Start 159: dft-freq; 93/401 Test #338: soscf-dft ........................ Passed 24.29 sec; Start 77: cc8a; 94/401 Test #45: cc3 .............................. Passed 739.07 sec; Start 169: dft-omega; 95/401 Test #158: dft-grad-meta .................... Passed 20.41 sec; Start 141: dfomp2-4; 96/401 Test #152: dfomp2p5-grad2 ................... Passed 98.47 sec; Start 103: dcft-grad2; 97/401 Test #162: dft-psivar ....................... Passed 20.43 sec; Start 244: omp2-3; 98/401 Test #263: opt2 ............................. Passed 20.54 sec; Start 130: dfmp2-3; 99/401 Test #185: fci-tdm-2 ........................ Passed 19.94 sec; Start 147: dfomp3-grad1; 100/401 Test #278: opt-irc-3 ........................ Passed 27.50 sec; Start 190: fd-freq-gradient; 101/401 Test #34: cc19 ............................. Passed 58.89 sec; Start 66: cc4a; 102/401 Test #159: dft-freq ......................... Passed 21.58 sec; Start 104: dcft-grad3; 103/401 Test #11: cbs-delta-energy ................. Passed 237.06 sec; Start 295: pywrap-alias; 104/401 Test #252: omp2p5-grad2 ..................... Passed 79.50 sec; Start 268: opt6; 105/401 Test #35: cc2 .............................. Passed 456.44 sec; Start 173: extern2; 106/401 Test #38: cc23 ............................. Passed 464.64 sec;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1071#issuecomment-402453832:9503,Test,Test,9503,https://psicode.org,https://github.com/psi4/psi4/pull/1071#issuecomment-402453832,1,['Test'],['Test']
Testability,#153: dfomp2p5-grad2 ................... Passed 31.39 sec; Start 166: dft-psivar; 162/411 Test #160: dft-grad-lr1 ..................... Passed 17.03 sec; Start 167: dft-b3lyp; 163/411 Test #164: dft-grad1 ........................ Passed 14.60 sec; Start 168: dft1; 164/411 Test #111: dcft5 ............................ Passed 146.42 sec; Start 169: dft-vv10; 165/411 Test #163: dft-freq ......................... Passed 22.19 sec; Start 170: dft1-alt; 166/411 Test #165: dft-grad2 ........................ Passed 17.69 sec; Start 171: dft2; 167/411 Test #171: dft2 ............................. Passed 5.88 sec; Start 172: dft3; 168/411 Test #166: dft-psivar ....................... Passed 23.66 sec; Start 173: dft-omega; 169/411 Test #169: dft-vv10 ......................... Passed 15.94 sec; Start 174: docs-bases; 170/411 Test #174: docs-bases ....................... Passed 0.59 sec; Start 175: docs-dft; 171/411 Test #175: docs-dft ......................... Passed 0.68 sec; Start 176: extern1; 172/411 Test #112: dcft6 ............................ Passed 157.11 sec; Start 177: extern2; 173/411 Test #159: dft-grad-meta .................... Passed 53.77 sec; Start 179: fsapt2; 174/411 Test #176: extern1 .......................... Passed 12.65 sec; Start 180: fsapt-terms; 175/411 Test #179: fsapt2 ........................... Passed 5.27 sec; Start 183: isapt2; 176/411 Test #172: dft3 ............................. Passed 20.38 sec; Start 184: fci-dipole; 177/411 Test #177: extern2 .......................... Passed 16.19 sec; Start 185: fci-h2o; 178/411 Test #173: dft-omega ........................ Passed 24.42 sec; Start 186: fci-h2o-2; 179/411 Test #180: fsapt-terms ...................... Passed 8.89 sec; Start 187: fci-h2o-fzcv; 180/411 Test #185: fci-h2o .......................... Passed 6.44 sec; Start 188: fci-tdm; 181/411 Test #184: fci-dipole ....................... Passed 6.80 sec; Start 189: fci-tdm-2; 182/411 Test #188: fci-tdm .......................... Passed 1.51 se,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1092#issuecomment-409185967:15967,Test,Test,15967,https://psicode.org,https://github.com/psi4/psi4/pull/1092#issuecomment-409185967,1,['Test'],['Test']
Testability,#155: dfscf-bz2 ........................ Passed 140.29 sec; Start 169: dft-vv10; 173/411 Test #161: dft-grad-lr2 ..................... Passed 107.26 sec; Start 170: dft1-alt; 174/411 Test #169: dft-vv10 ......................... Passed 21.05 sec; Start 171: dft2; 175/411 Test #171: dft2 ............................. Passed 5.71 sec; Start 172: dft3; 176/411 Test #167: dft-b3lyp ........................ Passed 68.08 sec; Start 173: dft-omega; 177/411 Test #172: dft3 ............................. Passed 25.39 sec; Start 174: docs-bases; 178/411 Test #174: docs-bases ....................... Passed 0.53 sec; Start 175: docs-dft; 179/411 Test #175: docs-dft ......................... Passed 0.59 sec; Start 176: extern1; 180/411 Test #170: dft1-alt ......................... Passed 53.20 sec; Start 177: extern2; 181/411 Test #176: extern1 .......................... Passed 21.93 sec; Start 179: fsapt2; 182/411 Test #173: dft-omega ........................ Passed 26.82 sec; Start 180: fsapt-terms; 183/411 Test #179: fsapt2 ........................... Passed 6.95 sec; Start 183: isapt2; 184/411 Test #180: fsapt-terms ...................... Passed 10.10 sec; Start 184: fci-dipole; 185/411 Test #184: fci-dipole ....................... Passed 7.67 sec; Start 185: fci-h2o; 186/411 Test #177: extern2 .......................... Passed 31.38 sec; Start 186: fci-h2o-2; 187/411 Test #185: fci-h2o .......................... Passed 6.97 sec; Start 187: fci-h2o-fzcv; 188/411 Test #186: fci-h2o-2 ........................ Passed 6.73 sec; Start 188: fci-tdm; 189/411 Test #187: fci-h2o-fzcv ..................... Passed 6.96 sec; Start 189: fci-tdm-2; 190/411 Test #168: dft1 ............................. Passed 110.06 sec; Start 190: fci-coverage; 191/411 Test #188: fci-tdm .......................... Passed 4.23 sec; Start 191: fcidump; 192/411 Test #191: fcidump .......................... Passed 9.92 sec; Start 192: fd-freq-energy; 193/411 Test #190: fci-coverage ..................... Passed ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1067#issuecomment-409148828:16869,Test,Test,16869,https://psicode.org,https://github.com/psi4/psi4/pull/1067#issuecomment-409148828,1,['Test'],['Test']
Testability,#155: dfscf-bz2 ........................ Passed 31.62 sec; Start 152: dfomp2p5-grad1; 144/404 Test #313: rasscf-sp ........................ Passed 11.43 sec; Start 54: cc38; 145/404 Test #62: cc45 ............................. Passed 7.58 sec; Start 282: opt-irc-3; 146/404 Test #33: cc18 ............................. Passed 14.20 sec; Start 172: dft3; 147/404 Test #152: dfomp2p5-grad1 ................... Passed 5.61 sec; Start 252: omp2-grad2; 148/404 Test #100: ci-property ...................... Passed 21.60 sec; Start 106: dcft-grad4; 149/404 Test #54: cc38 ............................. Passed 6.52 sec; Start 267: opt2; 150/404 Test #196: fd-gradient ...................... Passed 23.74 sec; Start 92: ci-multi; 151/404 Test #252: omp2-grad2 ....................... Passed 5.58 sec; Start 323: sapt7; 152/404 Test #92: ci-multi ......................... Passed 7.78 sec; Start 148: dfomp3-grad1; 153/404 Test #348: sapt-compare ..................... Passed 20.49 sec; Start 166: dft-psivar; 154/404 Test #282: opt-irc-3 ........................ Passed 14.20 sec; Start 159: dft-grad-meta; 155/404 Test #148: dfomp3-grad1 ..................... Passed 3.61 sec; Start 342: soscf-dft; 156/404 Test #106: dcft-grad4 ....................... Passed 14.52 sec; Start 49: cc33; 157/404 Test #375: pywrap-bfs ....................... Passed 25.33 sec; Start 72: cc54; 158/404 Test #172: dft3 ............................. Passed 18.93 sec; Start 150: dfomp2p5-1; 159/404 Test #267: opt2 ............................. Passed 15.94 sec; Start 296: psithon2; 160/404 Test #150: dfomp2p5-1 ....................... Passed 2.94 sec; Start 163: dft-freq; 161/404 Test #49: cc33 ............................. Passed 5.98 sec; Start 272: opt6; 162/404 Test #72: cc54 ............................. Passed 5.02 sec; Start 189: fci-tdm-2; 163/404 Test #323: sapt7 ............................ Passed 18.91 sec; Start 32: cc17; 164/404 Test #166: dft-psivar ....................... Passed 17.69 sec; Start 138: dfm,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-404174338:14256,Test,Test,14256,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-404174338,1,['Test'],['Test']
Testability,#155: dft-b2plyp ....................... Passed 9.72 sec; Start 134: dfmp2-grad2; 174/401 Test #266: opt4 ............................. Passed 10.94 sec; Start 127: dfccsdat1; 175/401 Test #215: mints-benchmark .................. Passed 10.11 sec; Start 281: props2; 176/401 Test #43: cc28 ............................. Passed 87.39 sec; Start 262: opt1-fd; 177/401 Test #10: castup3 .......................... Passed 16.89 sec; Start 337: soscf-ref; 178/401 Test #51: cc35 ............................. Passed 39.48 sec; Start 196: fnocc2; 179/401 Test #298: pywrap-cbs1 ...................... Passed 233.12 sec; Start 52: cc36; 180/401 Test #131: dfmp2-4 .......................... Passed 12.91 sec; Start 165: dft-vv10; 181/401 Test #281: props2 ........................... Passed 7.95 sec; Start 188: fd-freq-energy; 182/401 Test #49: cc33 ............................. Passed 34.26 sec; Start 62: cc45; 183/401 Test #193: freq-isotope1 .................... Passed 19.32 sec; Start 53: cc37; 184/401 Test #134: dfmp2-grad2 ...................... Passed 12.50 sec; Start 56: cc4; 185/401 Test #9: castup2 .......................... Passed 13.85 sec; Start 364: dft-jk; 186/401 Test #89: cepa1 ............................ Passed 26.08 sec; Start 203: gibbs; 187/401 Test #50: cc34 ............................. Passed 26.89 sec; Start 76: cc8; 188/401 Test #262: opt1-fd .......................... Passed 12.30 sec; Start 91: ci-multi; 189/401 Test #102: dcft-grad1 ....................... Passed 884.24 sec; Start 214: mints8; 190/401 Test #337: soscf-ref ........................ Passed 10.01 sec; Start 83: cdomp2-2; 191/401 Test #99: ci-property ...................... Passed 29.65 sec; Start 167: dft2; 192/401 Test #364: dft-jk ........................... Passed 6.91 sec; Start 389: python-cc54; 193/401 Test #188: fd-freq-energy ................... Passed 10.27 sec; Start 342: sapt-dft1; 194/401 Test #127: dfccsdat1 ........................ Passed 20.44 sec; Start 157: dft-ghost; 195/40,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1071#issuecomment-402453832:17608,Test,Test,17608,https://psicode.org,https://github.com/psi4/psi4/pull/1071#issuecomment-402453832,1,['Test'],['Test']
Testability,#159: dfscf-bz2 ........................ Passed 157.81 sec; Start 319: sapt4; 44/412 Test #61: cc43 ............................. Passed 63.98 sec; Start 326: scf-bz2; 45/412 Test #48: cc31 ............................. Passed 101.70 sec; Start 372: dft-custom-dhdf; 46/412 Test #321: sapt6 ............................ Passed 184.79 sec; Start 105: dcft-grad2; 47/412 Test #169: dft1 ............................. Passed 111.64 sec; Start 75: cc5a; 48/412 Test #155: dft-grad-lr2 ..................... Passed 115.65 sec; Start 280: opt14; 49/412 Test #184: isapt2 ........................... Passed 141.61 sec; Start 303: pywrap-cbs1; 50/412 Test #105: dcft-grad2 ....................... Passed 35.94 sec; Start 318: sapt3; 51/412 Test #75: cc5a ............................. Passed 65.55 sec; Start 281: opt-irc-1; 52/412 Test #303: pywrap-cbs1 ...................... Passed 57.75 sec; Start 47: cc30; 53/412 Test #372: dft-custom-dhdf .................. Passed 102.93 sec; Start 92: cepa-module; 54/412 Test #182: fsapt-allterms ................... Passed 579.58 sec; Start 320: sapt5; 55/412 Test #280: opt14 ............................ Passed 94.37 sec; Start 70: cc51; 56/412 Test #194: fd-freq-energy-large ............. Passed 545.92 sec; Start 76: cc6; 57/412 Test #318: sapt3 ............................ Passed 99.92 sec; Start 293: psimrcc-fd-freq2; 58/412 Test #47: cc30 ............................. Passed 48.45 sec; Start 205: frac-ip-fitting; 59/412 Test #326: scf-bz2 .......................... Passed 165.53 sec; Start 168: dft-b3lyp; 60/412 Test #92: cepa-module ...................... Passed 64.56 sec; Start 193: fd-freq-energy; 61/412 Test #281: opt-irc-1 ........................ Passed 86.58 sec; Start 231: mp2-module; 62/412 Test #320: sapt5 ............................ Passed 93.23 sec; Start 17: cbs-xtpl-opt; 63/412 Test #76: cc6 .............................. Passed 75.78 sec; Start 20: cbs-xtpl-wrapper; 64/412 Test #70: cc51 ............................. Passed 87.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1227#issuecomment-421362141:5381,Test,Test,5381,https://psicode.org,https://github.com/psi4/psi4/pull/1227#issuecomment-421362141,1,['Test'],['Test']
Testability,#161: dft-grac ......................... Passed 2.79 sec; Start 164: dft-freq; 160/412 Test #162: dft-ghost ........................ Passed 8.29 sec; Start 165: dft-grad1; 161/412 Test #160: dft-b2plyp ....................... Passed 26.16 sec; Start 166: dft-grad2; 162/412 Test #165: dft-grad1 ........................ Passed 14.48 sec; Start 167: dft-psivar; 163/412 Test #164: dft-freq ......................... Passed 22.60 sec; Start 168: dft-b3lyp; 164/412 Test #166: dft-grad2 ........................ Passed 17.93 sec; Start 169: dft1; 165/412 Test #157: dfomp2p5-grad2 ................... Passed 55.53 sec; Start 170: dft-vv10; 166/412 Test #77: cc7 .............................. Passed 356.65 sec; Start 171: dft1-alt; 167/412 Test #167: dft-psivar ....................... Passed 25.10 sec; Start 172: dft2; 168/412 Test #112: dcft5 ............................ Passed 241.80 sec; Start 173: dft3; 169/412 Test #163: dft-grad-meta .................... Passed 53.07 sec; Start 174: dft-omega; 170/412 Test #172: dft2 ............................. Passed 5.89 sec; Start 175: docs-bases; 171/412 Test #175: docs-bases ....................... Passed 0.93 sec; Start 176: docs-dft; 172/412 Test #170: dft-vv10 ......................... Passed 16.95 sec; Start 177: extern1; 173/412 Test #176: docs-dft ......................... Passed 0.74 sec; Start 178: extern2; 174/412 Test #115: dcft8 ............................ Passed 244.85 sec; Start 180: fsapt2; 175/412 Test #173: dft3 ............................. Passed 24.08 sec; Start 181: fsapt-terms; 176/412 Test #177: extern1 .......................... Passed 17.94 sec; Start 184: isapt2; 177/412 Test #155: dft-grad-lr2 ..................... Passed 103.74 sec; Start 185: fci-dipole; 178/412 Test #180: fsapt2 ........................... Passed 5.38 sec; Start 186: fci-h2o; 179/412 Test #178: extern2 .......................... Passed 21.09 sec; Start 187: fci-h2o-2; 180/412 Test #174: dft-omega ........................ Passed 26.95 se,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1219#issuecomment-419060031:15814,Test,Test,15814,https://psicode.org,https://github.com/psi4/psi4/pull/1219#issuecomment-419060031,1,['Test'],['Test']
Testability,#161: dft-grad2 ........................ Passed 9.14 sec; Start 166: dft1-alt; 257/401 Test #154: dfscf-bz2 ........................ Passed 28.72 sec; Start 167: dft2; 258/401 Test #159: dft-freq ......................... Passed 18.41 sec; Start 168: dft3; 259/401 Test #158: dft-grad-meta .................... Passed 20.68 sec; Start 169: dft-omega; 260/401 Test #167: dft2 ............................. Passed 6.22 sec; Start 170: docs-bases; 261/401 Test #170: docs-bases ....................... Passed 0.64 sec; Start 171: docs-dft; 262/401 Test #171: docs-dft ......................... Passed 0.70 sec; Start 173: extern2; 263/401 Test #162: dft-psivar ....................... Passed 20.12 sec; Start 179: isapt2; 264/401 Test #13: cbs-xtpl-alpha ................... Passed 152.72 sec; Start 181: fci-h2o; 265/401 Test #181: fci-h2o .......................... Passed 3.69 sec; Start 182: fci-h2o-2; 266/401 Test #111: dcft6 ............................ Passed 123.09 sec; Start 183: fci-h2o-fzcv; 267/401 Test #182: fci-h2o-2 ........................ Passed 4.36 sec; Start 184: fci-tdm; 268/401 Test #184: fci-tdm .......................... Passed 1.06 sec; Start 185: fci-tdm-2; 269/401 Test #183: fci-h2o-fzcv ..................... Passed 2.12 sec; Start 186: fci-coverage; 270/401 Test #113: dcft8 ............................ Passed 121.68 sec; Start 188: fd-freq-energy; 271/401 Test #169: dft-omega ........................ Passed 17.38 sec; Start 190: fd-freq-gradient; 272/401 Test #173: extern2 .......................... Passed 15.58 sec; Start 192: fd-gradient; 273/401 Test #168: dft3 ............................. Passed 21.77 sec; Start 193: freq-isotope1; 274/401 Test #186: fci-coverage ..................... Passed 4.23 sec; Start 199: frac; 275/401 Test #199: frac ............................. Passed 1.90 sec; Start 200: frac-ip-fitting; 276/401 Test #188: fd-freq-energy ................... Passed 7.14 sec; Start 202: ghosts; 277/401 Test #163: dft-b3lyp ..................,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-402413637:24959,Test,Test,24959,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-402413637,1,['Test'],['Test']
Testability,#162: dft-ghost ........................ Passed 8.71 sec; Start 266: opt1; 278/412 Test #185: fci-dipole ....................... Passed 6.72 sec; Start 386: psi4numpy-fci; 279/412 Test #311: rasci-c2-active .................. Passed 8.44 sec; Start 172: dft2; 280/412 Test #186: fci-h2o .......................... Passed 6.87 sec; Start 96: cisd-h2o+-2; 281/412 Test #199: freq-isotope2 .................... Passed 9.29 sec; Start 95: cisd-h2o+-1; 282/412 Test #371: scf-coverage ..................... Passed 10.34 sec; Start 100: cisd-sp-2; 283/412 Test #330: scf-guess-read2 .................. Passed 8.08 sec; Start 332: scf1; 284/412 Test #314: rasscf-sp ........................ Passed 27.06 sec; Start 84: cdomp2-1; 285/412 Test #118: dfcasscf-sa-sp ................... Passed 6.95 sec; Start 237: mpn-bh; 286/412 Test #142: dfomp2-3 ......................... Passed 8.01 sec; Start 135: dfmp2-grad1; 287/412 Test #254: omp2p5-1 ......................... Passed 7.58 sec; Start 188: fci-h2o-fzcv; 288/412 Test #225: molden2 .......................... Passed 7.31 sec; Start 340: scf-property; 289/412 Test #252: omp2-grad1 ....................... Passed 4.16 sec; Start 137: dfmp2-grad3; 290/412 Test #266: opt1 ............................. Passed 4.53 sec; Start 377: pywrap-align; 291/412 Test #187: fci-h2o-2 ........................ Passed 9.46 sec; Start 270: opt3; 292/412 Test #386: psi4numpy-fci .................... Passed 5.25 sec; Start 180: fsapt2; 293/412 Test #96: cisd-h2o+-2 ...................... Passed 5.40 sec; Start 94: cisd-h2o+-0; 294/412 Test #95: cisd-h2o+-1 ...................... Passed 5.19 sec; Start 258: omp3-1; 295/412 Test #100: cisd-sp-2 ........................ Passed 4.88 sec; Start 295: psimrcc-sp1; 296/412 Test #135: dfmp2-grad1 ...................... Passed 4.05 sec; Start 226: mom; 297/412 Test #172: dft2 ............................. Passed 5.97 sec; Start 284: opt-freeze-coords; 298/412 Test #332: scf1 ............................. Passed 4.83 se,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1199#issuecomment-417683504:26998,Test,Test,26998,https://psicode.org,https://github.com/psi4/psi4/pull/1199#issuecomment-417683504,1,['Test'],['Test']
Testability,#163: dft-freq ......................... Passed 17.07 sec; Start 177: extern2; 172/404 Test #20: cc1 .............................. Passed 10.62 sec; Start 109: dcft3; 173/404 Test #138: dfmp2-grad5 ...................... Passed 11.52 sec; Start 303: pywrap-checkrun-convcrit; 174/404 Test #189: fci-tdm-2 ........................ Passed 17.95 sec; Start 52: cc36; 175/404 Test #248: omp2-3 ........................... Passed 7.70 sec; Start 194: fd-freq-gradient; 176/404 Test #109: dcft3 ............................ Passed 3.82 sec; Start 277: opt12; 177/404 Test #207: gibbs ............................ Passed 11.91 sec; Start 275: opt9; 178/404 Test #52: cc36 ............................. Passed 5.09 sec; Start 254: omp2p5-2; 179/404 Test #303: pywrap-checkrun-convcrit ......... Passed 7.11 sec; Start 53: cc37; 180/404 Test #254: omp2p5-2 ......................... Passed 3.76 sec; Start 48: cc32; 181/404 Test #131: dfmp2-3 .......................... Passed 16.33 sec; Start 143: dfomp2-grad1; 182/404 Test #53: cc37 ............................. Passed 3.20 sec; Start 90: cepa1; 183/404 Test #177: extern2 .......................... Passed 14.87 sec; Start 88: cepa2; 184/404 Test #173: dft-omega ........................ Passed 16.91 sec; Start 22: cc11; 185/404 Test #194: fd-freq-gradient ................. Passed 14.99 sec; Start 238: nbody-intermediates; 186/404 Test #275: opt9 ............................. Passed 12.65 sec; Start 346: sapt-dft1; 187/404 Test #143: dfomp2-grad1 ..................... Passed 6.88 sec; Start 169: dft-vv10; 188/404 Test #48: cc32 ............................. Passed 8.04 sec; Start 50: cc34; 189/404 Test #88: cepa2 ............................ Passed 4.85 sec; Start 338: scf7; 190/404 Test #277: opt12 ............................ Passed 14.47 sec; Start 206: ghosts; 191/404 Test #90: cepa1 ............................ Passed 7.97 sec; Start 129: dfmp2-1; 192/404 Test #50: cc34 ............................. Passed 5.59 sec; Start 176: extern1,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-404174338:16828,Test,Test,16828,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-404174338,1,['Test'],['Test']
Testability,#163: dft-grad-meta .................... Passed 54.77 sec; Start 33: cc17; 127/412 Test #2: adc2 ............................. Passed 48.26 sec; Start 220: mints-benchmark; 128/412 Test #55: cc38 ............................. Passed 75.15 sec; Start 132: dfmp2-3; 129/412 Test #12: cbs-parser ....................... Passed 84.13 sec; Start 337: scf5; 130/412 Test #308: pywrap-db1 ....................... Passed 44.31 sec; Start 195: fd-freq-gradient; 131/412 Test #56: cc39 ............................. Passed 58.25 sec; Start 361: x2c1; 132/412 Test #143: dfomp2-4 ......................... Passed 71.69 sec; Start 93: ci-multi; 133/412 Test #72: cc53 ............................. Passed 61.07 sec; Start 107: dcft-grad4; 134/412 Test #80: cc8b ............................. Passed 59.22 sec; Start 393: python-cc54; 135/412 Test #349: sapt-compare ..................... Passed 51.30 sec; Start 23: cc11; 136/412 Test #246: ocepa3 ........................... Passed 63.75 sec; Start 313: rasci-ne; 137/412 Test #33: cc17 ............................. Passed 44.73 sec; Start 127: dfccsd-t-grad1; 138/412 Test #338: scf6 ............................. Passed 49.52 sec; Start 134: dfmp2-ecp; 139/412 Test #201: fnocc2 ........................... Passed 69.43 sec; Start 34: cc18; 140/412 Test #220: mints-benchmark .................. Passed 44.32 sec; Start 149: dfomp3-grad1; 141/412 Test #337: scf5 ............................. Passed 39.63 sec; Start 253: omp2-grad2; 142/412 Test #132: dfmp2-3 .......................... Passed 42.96 sec; Start 207: ghosts; 143/412 Test #93: ci-multi ......................... Passed 34.57 sec; Start 130: dfmp2-1; 144/412 Test #361: x2c1 ............................. Passed 35.10 sec; Start 324: sapt7; 145/412 Test #393: python-cc54 ...................... Passed 31.31 sec; Start 275: opt8; 146/412 Test #23: cc11 ............................. Passed 32.37 sec; Start 126: dfccsd-grad1; 147/412 Test #195: fd-freq-gradient ................. Passed 43.35 se,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1224#issuecomment-419158485:12954,Test,Test,12954,https://psicode.org,https://github.com/psi4/psi4/pull/1224#issuecomment-419158485,1,['Test'],['Test']
Testability,#165: dft-grad2 ........................ Passed 15.49 sec; Start 166: dft-psivar; 177/411 Test #166: dft-psivar ....................... Passed 19.01 sec; Start 167: dft-b3lyp; 178/411 Test #167: dft-b3lyp ........................ Passed 58.46 sec; Start 168: dft1; 179/411 Test #168: dft1 ............................. Passed 73.16 sec; Start 169: dft-vv10; 180/411 Test #169: dft-vv10 ......................... Passed 13.33 sec; Start 170: dft1-alt; 181/411 Test #170: dft1-alt ......................... Passed 37.70 sec; Start 171: dft2; 182/411 Test #171: dft2 ............................. Passed 4.57 sec; Start 172: dft3; 183/411 Test #172: dft3 ............................. Passed 16.86 sec; Start 173: dft-omega; 184/411 Test #173: dft-omega ........................ Passed 20.02 sec; Start 174: docs-bases; 185/411 Test #174: docs-bases ....................... Passed 0.62 sec; Start 175: docs-dft; 186/411 Test #175: docs-dft ......................... Passed 0.73 sec; Start 176: extern1; 187/411 Test #176: extern1 .......................... Passed 9.72 sec; Start 177: extern2; 188/411 Test #177: extern2 .......................... Passed 9.98 sec; Start 179: fsapt2; 189/411 Test #179: fsapt2 ........................... Passed 4.73 sec; Start 180: fsapt-terms; 190/411 Test #180: fsapt-terms ...................... Passed 7.70 sec; Start 183: isapt2; 191/411 Test #183: isapt2 ........................... Passed 116.32 sec; Start 184: fci-dipole; 192/411 Test #184: fci-dipole ....................... Passed 6.09 sec; Start 185: fci-h2o; 193/411 Test #185: fci-h2o .......................... Passed 5.68 sec; Start 186: fci-h2o-2; 194/411 Test #186: fci-h2o-2 ........................ Passed 5.51 sec; Start 187: fci-h2o-fzcv; 195/411 Test #187: fci-h2o-fzcv ..................... Passed 3.61 sec; Start 188: fci-tdm; 196/411 Test #188: fci-tdm .......................... Passed 0.91 sec; Start 189: fci-tdm-2; 197/411 Test #189: fci-tdm-2 ........................ Passed 18.51 sec; St,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1073#issuecomment-406985370:16950,Test,Test,16950,https://psicode.org,https://github.com/psi4/psi4/pull/1073#issuecomment-406985370,1,['Test'],['Test']
Testability,#165: dft-grad2 ........................ Passed 16.46 sec; Start 166: dft-psivar; 177/411 Test #166: dft-psivar ....................... Passed 21.64 sec; Start 167: dft-b3lyp; 178/411 Test #167: dft-b3lyp ........................ Passed 60.98 sec; Start 168: dft1; 179/411 Test #168: dft1 ............................. Passed 80.23 sec; Start 169: dft-vv10; 180/411 Test #169: dft-vv10 ......................... Passed 13.15 sec; Start 170: dft1-alt; 181/411 Test #170: dft1-alt ......................... Passed 41.39 sec; Start 171: dft2; 182/411 Test #171: dft2 ............................. Passed 4.80 sec; Start 172: dft3; 183/411 Test #172: dft3 ............................. Passed 17.51 sec; Start 173: dft-omega; 184/411 Test #173: dft-omega ........................ Passed 21.17 sec; Start 174: docs-bases; 185/411 Test #174: docs-bases ....................... Passed 0.56 sec; Start 175: docs-dft; 186/411 Test #175: docs-dft ......................... Passed 0.60 sec; Start 176: extern1; 187/411 Test #176: extern1 .......................... Passed 9.56 sec; Start 177: extern2; 188/411 Test #177: extern2 .......................... Passed 12.08 sec; Start 179: fsapt2; 189/411 Test #179: fsapt2 ........................... Passed 4.38 sec; Start 180: fsapt-terms; 190/411 Test #180: fsapt-terms ...................... Passed 8.43 sec; Start 183: isapt2; 191/411 Test #183: isapt2 ........................... Passed 128.00 sec; Start 184: fci-dipole; 192/411 Test #184: fci-dipole ....................... Passed 5.75 sec; Start 185: fci-h2o; 193/411 Test #185: fci-h2o .......................... Passed 5.68 sec; Start 186: fci-h2o-2; 194/411 Test #186: fci-h2o-2 ........................ Passed 5.36 sec; Start 187: fci-h2o-fzcv; 195/411 Test #187: fci-h2o-fzcv ..................... Passed 4.49 sec; Start 188: fci-tdm; 196/411 Test #188: fci-tdm .......................... Passed 0.85 sec; Start 189: fci-tdm-2; 197/411 Test #189: fci-tdm-2 ........................ Passed 18.76 sec; S,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1071#issuecomment-407449972:16977,Test,Test,16977,https://psicode.org,https://github.com/psi4/psi4/pull/1071#issuecomment-407449972,1,['Test'],['Test']
Testability,#165: dft-grad2 ........................ Passed 18.02 sec; Start 171: dft2; 167/411 Test #163: dft-freq ......................... Passed 27.17 sec; Start 172: dft3; 168/411 Test #171: dft2 ............................. Passed 4.91 sec; Start 173: dft-omega; 169/411 Test #166: dft-psivar ....................... Passed 23.88 sec; Start 174: docs-bases; 170/411 Test #174: docs-bases ....................... Passed 0.60 sec; Start 175: docs-dft; 171/411 Test #175: docs-dft ......................... Passed 0.81 sec; Start 176: extern1; 172/411 Test #169: dft-vv10 ......................... Passed 17.26 sec; Start 177: extern2; 173/411 Test #159: dft-grad-meta .................... Passed 53.57 sec; Start 179: fsapt2; 174/411 Test #179: fsapt2 ........................... Passed 5.01 sec; Start 180: fsapt-terms; 175/411 Test #172: dft3 ............................. Passed 20.79 sec; Start 183: isapt2; 176/411 Test #176: extern1 .......................... Passed 15.25 sec; Start 184: fci-dipole; 177/411 Test #180: fsapt-terms ...................... Passed 8.95 sec; Start 185: fci-h2o; 178/411 Test #173: dft-omega ........................ Passed 25.66 sec; Start 186: fci-h2o-2; 179/411 Test #177: extern2 .......................... Passed 22.17 sec; Start 187: fci-h2o-fzcv; 180/411 Test #184: fci-dipole ....................... Passed 7.88 sec; Start 188: fci-tdm; 181/411 Test #188: fci-tdm .......................... Passed 1.50 sec; Start 189: fci-tdm-2; 182/411 Test #187: fci-h2o-fzcv ..................... Passed 5.59 sec; Start 190: fci-coverage; 183/411 Test #185: fci-h2o .......................... Passed 6.73 sec; Start 191: fcidump; 184/411 Test #186: fci-h2o-2 ........................ Passed 7.05 sec; Start 192: fd-freq-energy; 185/411 Test #191: fcidump .......................... Passed 3.44 sec; Start 194: fd-freq-gradient; 186/411 Test #190: fci-coverage ..................... Passed 3.57 sec; Start 196: fd-gradient; 187/411 Test #170: dft1-alt ......................... P,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1090#issuecomment-408925986:16481,Test,Test,16481,https://psicode.org,https://github.com/psi4/psi4/pull/1090#issuecomment-408925986,1,['Test'],['Test']
Testability,#169: dft-omega ........................ Passed 21.02 sec; Start 79: cc8c; 109/401 Test #130: dfmp2-3 .......................... Passed 18.27 sec; Start 63: cc47; 110/401 Test #248: omp2-grad2 ....................... Passed 39.14 sec; Start 72: cc55; 111/401 Test #104: dcft-grad3 ....................... Passed 11.82 sec; Start 292: psithon2; 112/401 Test #244: omp2-3 ........................... Passed 25.17 sec; Start 238: ocepa-grad2; 113/401 Test #241: ocepa3 ........................... Passed 39.10 sec; Start 273: opt12; 114/401 Test #139: dfomp2-2 ......................... Passed 42.17 sec; Start 345: dft-custom; 115/401 Test #190: fd-freq-gradient ................. Passed 19.57 sec; Start 21: cc10; 116/401 Test #41: cc26 ............................. Passed 424.74 sec; Start 234: nbody-intermediates; 117/401 Test #147: dfomp3-grad1 ..................... Passed 26.96 sec; Start 78: cc8b; 118/401 Test #268: opt6 ............................. Passed 21.27 sec; Start 303: pywrap-db1; 119/401 Test #137: dfmp2-grad5 ...................... Passed 18.60 sec; Start 80: cc9; 120/401 Test #141: dfomp2-4 ......................... Passed 38.69 sec; Start 149: dfomp2p5-1; 121/401 Test #173: extern2 .......................... Passed 23.61 sec; Start 55: cc39; 122/401 Test #59: cc42 ............................. Passed 60.86 sec; Start 202: ghosts; 123/401 Test #39: cc24 ............................. Passed 464.47 sec; Start 43: cc28; 124/401 Test #77: cc8a ............................. Passed 50.80 sec; Start 151: dfomp2p5-grad1; 125/401 Test #273: opt12 ............................ Passed 19.08 sec; Start 22: cc11; 126/401 Test #292: psithon2 ......................... Passed 20.69 sec; Start 271: opt9; 127/401 Test #345: dft-custom ....................... Passed 18.67 sec; Start 334: scf7; 128/401 Test #66: cc4a ............................. Passed 43.61 sec; Start 313: sapt3; 129/401 Test #202: ghosts ........................... Passed 16.16 sec; Start 70: cc53; 130/401 Test,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1071#issuecomment-402453832:11634,Test,Test,11634,https://psicode.org,https://github.com/psi4/psi4/pull/1071#issuecomment-402453832,1,['Test'],['Test']
Testability,#169: dft-vv10 ......................... Passed 21.05 sec; Start 171: dft2; 175/411 Test #171: dft2 ............................. Passed 5.71 sec; Start 172: dft3; 176/411 Test #167: dft-b3lyp ........................ Passed 68.08 sec; Start 173: dft-omega; 177/411 Test #172: dft3 ............................. Passed 25.39 sec; Start 174: docs-bases; 178/411 Test #174: docs-bases ....................... Passed 0.53 sec; Start 175: docs-dft; 179/411 Test #175: docs-dft ......................... Passed 0.59 sec; Start 176: extern1; 180/411 Test #170: dft1-alt ......................... Passed 53.20 sec; Start 177: extern2; 181/411 Test #176: extern1 .......................... Passed 21.93 sec; Start 179: fsapt2; 182/411 Test #173: dft-omega ........................ Passed 26.82 sec; Start 180: fsapt-terms; 183/411 Test #179: fsapt2 ........................... Passed 6.95 sec; Start 183: isapt2; 184/411 Test #180: fsapt-terms ...................... Passed 10.10 sec; Start 184: fci-dipole; 185/411 Test #184: fci-dipole ....................... Passed 7.67 sec; Start 185: fci-h2o; 186/411 Test #177: extern2 .......................... Passed 31.38 sec; Start 186: fci-h2o-2; 187/411 Test #185: fci-h2o .......................... Passed 6.97 sec; Start 187: fci-h2o-fzcv; 188/411 Test #186: fci-h2o-2 ........................ Passed 6.73 sec; Start 188: fci-tdm; 189/411 Test #187: fci-h2o-fzcv ..................... Passed 6.96 sec; Start 189: fci-tdm-2; 190/411 Test #168: dft1 ............................. Passed 110.06 sec; Start 190: fci-coverage; 191/411 Test #188: fci-tdm .......................... Passed 4.23 sec; Start 191: fcidump; 192/411 Test #191: fcidump .......................... Passed 9.92 sec; Start 192: fd-freq-energy; 193/411 Test #190: fci-coverage ..................... Passed 13.34 sec; Start 194: fd-freq-gradient; 194/411 Test #189: fci-tdm-2 ........................ Passed 21.83 sec; Start 196: fd-gradient; 195/411 Test #192: fd-freq-energy .................,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1067#issuecomment-409148828:17054,Test,Test,17054,https://psicode.org,https://github.com/psi4/psi4/pull/1067#issuecomment-409148828,1,['Test'],['Test']
Testability,#16: cbs-xtpl-gradient ................ Passed 30.29 sec; Start 259: omp3-2; 182/412 Test #304: pywrap-checkrun-convcrit ......... Passed 25.61 sec; Start 249: omp2-3; 183/412 Test #173: dft3 ............................. Passed 27.08 sec; Start 178: extern2; 184/412 Test #314: rasscf-sp ........................ Passed 25.89 sec; Start 323: sapt-dft-lrc; 185/412 Test #203: fnocc4 ........................... Passed 22.44 sec; Start 38: cc22; 186/412 Test #278: opt12 ............................ Passed 22.72 sec; Start 21: cc1; 187/412 Test #273: opt6 ............................. Passed 22.63 sec; Start 208: gibbs; 188/412 Test #283: opt-irc-3 ........................ Passed 31.24 sec; Start 276: opt9; 189/412 Test #22: cc10 ............................. Passed 16.39 sec; Start 291: psimrcc-ccsd_t-4; 190/412 Test #110: dcft3 ............................ Passed 13.01 sec; Start 139: dfmp2-grad5; 191/412 Test #359: tu5-sapt ......................... Passed 21.09 sec; Start 297: psithon2; 192/412 Test #164: dft-freq ......................... Passed 23.16 sec; Start 316: sapt1; 193/412 Test #249: omp2-3 ........................... Passed 16.61 sec; Start 24: cc12; 194/412 Test #347: sapt-dft1 ........................ Passed 24.82 sec; Start 239: nbody-intermediates; 195/412 Test #259: omp3-2 ........................... Passed 18.69 sec; Start 322: sapt-dft-api; 196/412 Test #190: fci-tdm-2 ........................ Passed 21.75 sec; Start 255: omp2p5-2; 197/412 Test #178: extern2 .......................... Passed 20.85 sec; Start 177: extern1; 198/412 Test #323: sapt-dft-lrc ..................... Passed 20.48 sec; Start 166: dft-grad2; 199/412 Test #38: cc22 ............................. Passed 18.50 sec; Start 248: omp2-2; 200/412 Test #276: opt9 ............................. Passed 16.37 sec; Start 5: casscf-sa-sp; 201/412 Test #139: dfmp2-grad5 ...................... Passed 16.20 sec; Start 106: dcft-grad3; 202/412 Test #208: gibbs ............................ Passed 1,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1221#issuecomment-419096646:18044,Test,Test,18044,https://psicode.org,https://github.com/psi4/psi4/pull/1221#issuecomment-419096646,1,['Test'],['Test']
Testability,#16: cbs-xtpl-gradient ................ Passed 43.54 sec; Start 3: casscf-fzc-sp; 32/415 Test #50: cc32 ............................. Passed 47.12 sec; Start 210: gibbs; 33/415 Test #129: dfccsd-t-grad1 ................... Passed 103.60 sec; Start 149: dfomp3-1; 34/415 Test #309: pywrap-alias ..................... Passed 141.43 sec; Start 346: scf5; 35/415 Test #94: ci-multi ......................... Passed 59.86 sec; Start 317: pywrap-db1; 36/415 Test #112: dcft3 ............................ Passed 75.08 sec; Start 136: dfmp2-ecp; 37/415 Test #128: dfccsd-grad1 ..................... Passed 94.95 sec; Start 263: omp2p5-2; 38/415 Test #11: cbs-delta-energy ................. Passed 615.43 sec; Start 102: ci-property; 39/415 Test #3: casscf-fzc-sp .................... Passed 55.64 sec; Start 256: omp2-2; 40/415 Test #210: gibbs ............................ Passed 51.08 sec; Start 403: python-cc54; 41/415 Test #136: dfmp2-ecp ........................ Passed 32.87 sec; Start 323: rasscf-sp; 42/415 Test #149: dfomp3-1 ......................... Passed 52.09 sec; Start 14: cbs-xtpl-energy; 43/415 Test #346: scf5 ............................. Passed 46.11 sec; Start 5: casscf-sa-sp; 44/415 Test #317: pywrap-db1 ....................... Passed 41.80 sec; Start 85: cdomp2-1; 45/415 Test #263: omp2p5-2 ......................... Passed 30.33 sec; Start 179: extern1; 46/415 Test #102: ci-property ...................... Passed 28.56 sec; Start 386: pywrap-bfs; 47/415 Test #256: omp2-2 ........................... Passed 32.02 sec; Start 127: dfccsdl1; 48/415 Test #371: x2c1 ............................. Passed 130.82 sec; Start 4: casscf-semi; 49/415 Test #5: casscf-sa-sp ..................... Passed 14.54 sec; Start 205: fnocc4; 50/415 Test #14: cbs-xtpl-energy .................. Passed 17.93 sec; Start 377: dft-smoke; 51/415 Test #85: cdomp2-1 ......................... Passed 16.80 sec; Start 126: dfccsd1; 52/415 Test #116: dcft7 ............................ Passed 408.77 sec; Sta,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1384#issuecomment-443227424:4272,Test,Test,4272,https://psicode.org,https://github.com/psi4/psi4/pull/1384#issuecomment-443227424,1,['Test'],['Test']
Testability,#171: dft-vv10 ......................... Passed 16.12 sec; Start 288: props3; 231/413 Test #10: castup3 .......................... Passed 5.00 sec; Start 110: dcft2; 232/413 Test #268: opt1-fd .......................... Passed 7.16 sec; Start 14: cbs-xtpl-energy; 233/413 Test #5: casscf-sa-sp ..................... Passed 11.15 sec; Start 228: mp2-1; 234/413 Test #124: dfccd-grad1 ...................... Passed 4.92 sec; Start 287: props2; 235/413 Test #199: freq-isotope1 .................... Passed 12.45 sec; Start 84: cdomp2-1; 236/413 Test #368: dft-smoke ........................ Passed 13.16 sec; Start 219: mints6; 237/413 Test #110: dcft2 ............................ Passed 2.46 sec; Start 370: scf-freq1; 238/413 Test #340: scf7 ............................. Passed 10.04 sec; Start 367: cubeprop-esp; 239/413 Test #352: dft-custom ....................... Passed 13.50 sec; Start 126: dfccsdl1; 240/413 Test #378: pywrap-align ..................... Passed 7.73 sec; Start 139: dfmp2-grad4; 241/413 Test #326: sapt8 ............................ Passed 12.95 sec; Start 359: tu4-h2o-freq; 242/413 Test #102: cubeprop ......................... Passed 10.42 sec; Start 129: dfccsdt1; 243/413 Test #84: cdomp2-1 ......................... Passed 2.74 sec; Start 371: dft-jk; 244/413 Test #228: mp2-1 ............................ Passed 4.43 sec; Start 245: ocepa1; 245/413 Test #126: dfccsdl1 ......................... Passed 4.23 sec; Start 374: dft-custom-hybrid; 246/413 Test #342: soscf-large ...................... Passed 14.81 sec; Start 159: dfrasscf-sp; 247/413 Test #139: dfmp2-grad4 ...................... Passed 4.03 sec; Start 272: opt4; 248/413 Test #129: dfccsdt1 ......................... Passed 3.54 sec; Start 99: cisd-sp; 249/413 Test #245: ocepa1 ........................... Passed 2.46 sec; Start 270: opt2-fd; 250/413 Test #288: props3 ........................... Passed 13.72 sec; Start 337: scf4; 251/413 Test #14: cbs-xtpl-energy .................. Passed 10.06 sec; St,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1264#issuecomment-425525678:22581,Test,Test,22581,https://psicode.org,https://github.com/psi4/psi4/pull/1264#issuecomment-425525678,1,['Test'],['Test']
Testability,#171: dft2 ............................. Passed 4.57 sec; Start 172: dft3; 183/411 Test #172: dft3 ............................. Passed 16.86 sec; Start 173: dft-omega; 184/411 Test #173: dft-omega ........................ Passed 20.02 sec; Start 174: docs-bases; 185/411 Test #174: docs-bases ....................... Passed 0.62 sec; Start 175: docs-dft; 186/411 Test #175: docs-dft ......................... Passed 0.73 sec; Start 176: extern1; 187/411 Test #176: extern1 .......................... Passed 9.72 sec; Start 177: extern2; 188/411 Test #177: extern2 .......................... Passed 9.98 sec; Start 179: fsapt2; 189/411 Test #179: fsapt2 ........................... Passed 4.73 sec; Start 180: fsapt-terms; 190/411 Test #180: fsapt-terms ...................... Passed 7.70 sec; Start 183: isapt2; 191/411 Test #183: isapt2 ........................... Passed 116.32 sec; Start 184: fci-dipole; 192/411 Test #184: fci-dipole ....................... Passed 6.09 sec; Start 185: fci-h2o; 193/411 Test #185: fci-h2o .......................... Passed 5.68 sec; Start 186: fci-h2o-2; 194/411 Test #186: fci-h2o-2 ........................ Passed 5.51 sec; Start 187: fci-h2o-fzcv; 195/411 Test #187: fci-h2o-fzcv ..................... Passed 3.61 sec; Start 188: fci-tdm; 196/411 Test #188: fci-tdm .......................... Passed 0.91 sec; Start 189: fci-tdm-2; 197/411 Test #189: fci-tdm-2 ........................ Passed 18.51 sec; Start 190: fci-coverage; 198/411 Test #190: fci-coverage ..................... Passed 1.46 sec; Start 191: fcidump; 199/411 Test #191: fcidump .......................... Passed 2.13 sec; Start 192: fd-freq-energy; 200/411 Test #192: fd-freq-energy ................... Passed 5.12 sec; Start 194: fd-freq-gradient; 201/411 Test #194: fd-freq-gradient ................. Passed 11.23 sec; Start 196: fd-gradient; 202/411 Test #196: fd-gradient ...................... Passed 16.81 sec; Start 197: freq-isotope1; 203/411 Test #197: freq-isotope1 ..............,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1073#issuecomment-406985370:17503,Test,Test,17503,https://psicode.org,https://github.com/psi4/psi4/pull/1073#issuecomment-406985370,1,['Test'],['Test']
Testability,#172: dft2 ............................. Passed 31.16 sec; Start 340: scf-property; 304/412 Test #137: dfmp2-grad3 ...................... Passed 31.46 sec; Start 332: scf1; 305/412 Test #377: pywrap-align ..................... Passed 55.95 sec; Start 180: fsapt2; 306/412 Test #230: mp2-grad2 ........................ Passed 35.64 sec; Start 95: cisd-h2o+-1; 307/412 Test #120: dfcasscf-sp ...................... Passed 36.73 sec; Start 192: fcidump; 308/412 Test #237: mpn-bh ........................... Passed 33.71 sec; Start 226: mom; 309/412 Test #94: cisd-h2o+-0 ...................... Passed 34.41 sec; Start 122: dfccdl1; 310/412 Test #340: scf-property ..................... Passed 33.40 sec; Start 86: cepa0-grad1; 311/412 Test #332: scf1 ............................. Passed 32.49 sec; Start 272: opt5; 312/412 Test #180: fsapt2 ........................... Passed 29.52 sec; Start 356: tu3-h2o-opt; 313/412 Test #95: cisd-h2o+-1 ...................... Passed 28.64 sec; Start 285: props1; 314/412 Test #192: fcidump .......................... Passed 27.57 sec; Start 247: omp2-1; 315/412 Test #122: dfccdl1 .......................... Passed 26.46 sec; Start 135: dfmp2-grad1; 316/412 Test #226: mom .............................. Passed 28.33 sec; Start 295: psimrcc-sp1; 317/412 Test #86: cepa0-grad1 ...................... Passed 27.79 sec; Start 117: ao-dfcasscf-sp; 318/412 Test #272: opt5 ............................. Passed 28.69 sec; Start 204: frac; 319/412 Test #356: tu3-h2o-opt ...................... Passed 29.05 sec; Start 234: mp3-grad1; 320/412 Test #285: props1 ........................... Passed 28.92 sec; Start 229: mp2-grad1; 321/412 Test #247: omp2-1 ........................... Passed 24.68 sec; Start 121: dfccd1; 322/412 Test #135: dfmp2-grad1 ...................... Passed 21.20 sec; Start 235: mp3-grad2; 323/412 Test #117: ao-dfcasscf-sp ................... Passed 19.04 sec; Start 232: mp2p5-grad1; 324/412 Test #295: psimrcc-sp1 ...................... Passed 2,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1225#issuecomment-419883272:29268,Test,Test,29268,https://psicode.org,https://github.com/psi4/psi4/pull/1225#issuecomment-419883272,1,['Test'],['Test']
Testability,#173: dft-omega ........................ Passed 16.91 sec; Start 22: cc11; 185/404 Test #194: fd-freq-gradient ................. Passed 14.99 sec; Start 238: nbody-intermediates; 186/404 Test #275: opt9 ............................. Passed 12.65 sec; Start 346: sapt-dft1; 187/404 Test #143: dfomp2-grad1 ..................... Passed 6.88 sec; Start 169: dft-vv10; 188/404 Test #48: cc32 ............................. Passed 8.04 sec; Start 50: cc34; 189/404 Test #88: cepa2 ............................ Passed 4.85 sec; Start 338: scf7; 190/404 Test #277: opt12 ............................ Passed 14.47 sec; Start 206: ghosts; 191/404 Test #90: cepa1 ............................ Passed 7.97 sec; Start 129: dfmp2-1; 192/404 Test #50: cc34 ............................. Passed 5.59 sec; Start 176: extern1; 193/404 Test #22: cc11 ............................. Passed 9.21 sec; Start 350: dft-custom; 194/404 Test #338: scf7 ............................. Passed 8.84 sec; Start 366: dft-smoke; 195/404 Test #238: nbody-intermediates .............. Passed 12.00 sec; Start 37: cc22; 196/404 Test #346: sapt-dft1 ........................ Passed 12.65 sec; Start 317: sapt3; 197/404 Test #169: dft-vv10 ......................... Passed 12.98 sec; Start 16: cbs-xtpl-gradient; 198/404 Test #206: ghosts ........................... Passed 11.93 sec; Start 264: opt-lindep-change; 199/404 Test #129: dfmp2-1 .......................... Passed 11.92 sec; Start 247: omp2-2; 200/404 Test #37: cc22 ............................. Passed 3.01 sec; Start 258: omp3-2; 201/404 Test #176: extern1 .......................... Passed 8.68 sec; Start 105: dcft-grad3; 202/404 Test #247: omp2-2 ........................... Passed 4.77 sec; Start 335: scf4; 203/404 Test #350: dft-custom ....................... Passed 12.45 sec; Start 324: sapt8; 204/404 Test #366: dft-smoke ........................ Passed 11.03 sec; Start 160: dft-grad-lr1; 205/404 Test #258: omp3-2 ........................... Passed 6.68 sec; Star,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-404174338:18012,Test,Test,18012,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-404174338,1,['Test'],['Test']
Testability,#173: dft-omega ........................ Passed 23.97 sec; Start 379: cc-module; 107/411 Test #55: cc39 ............................. Passed 13.65 sec; Start 299: pywrap-alias; 108/411 Test #375: pywrap-bfs ....................... Passed 25.71 sec; Start 27: cc13c; 109/411 Test #149: dfomp3-grad2 ..................... Passed 26.64 sec; Start 326: scf-ecp; 110/411 Test #178: fsapt1 ........................... Passed 2140.46 sec; Start 104: dcft-grad2; 111/411 Test #34: cc19 ............................. Passed 36.87 sec; Start 91: cepa-module; 112/411 Test #65: cc48 ............................. Passed 34.57 sec; Start 358: tu5-sapt; 113/411 Test #326: scf-ecp .......................... Passed 27.04 sec; Start 54: cc38; 114/411 Test #358: tu5-sapt ......................... Passed 21.52 sec; Start 274: opt8; 115/411 Test #299: pywrap-alias ..................... Passed 48.68 sec; Start 166: dft-psivar; 116/411 Test #27: cc13c ............................ Passed 62.03 sec; Start 336: scf5; 117/411 Test #54: cc38 ............................. Passed 25.71 sec; Start 163: dft-freq; 118/411 Test #166: dft-psivar ....................... Passed 23.63 sec; Start 189: fci-tdm-2; 119/411 Test #274: opt8 ............................. Passed 27.54 sec; Start 346: sapt-dft1; 120/411 Test #163: dft-freq ......................... Passed 21.30 sec; Start 144: dfomp2-grad2; 121/411 Test #91: cepa-module ...................... Passed 60.97 sec; Start 30: cc15; 122/411 Test #104: dcft-grad2 ....................... Passed 70.28 sec; Start 261: omp3-5; 123/411 Test #189: fci-tdm-2 ........................ Passed 20.43 sec; Start 147: dfomp3-2; 124/411 Test #336: scf5 ............................. Passed 31.05 sec; Start 196: fd-gradient; 125/411 Test #346: sapt-dft1 ........................ Passed 22.66 sec; Start 322: sapt-dft-lrc; 126/411 Test #379: cc-module ........................ Passed 113.57 sec; Start 26: cc13b; 127/411 Test #322: sapt-dft-lrc ..................... Passed 19.70 se,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1078#issuecomment-408900195:10970,Test,Test,10970,https://psicode.org,https://github.com/psi4/psi4/pull/1078#issuecomment-408900195,1,['Test'],['Test']
Testability,#173: dft3 ............................. Passed 27.08 sec; Start 178: extern2; 184/412 Test #314: rasscf-sp ........................ Passed 25.89 sec; Start 323: sapt-dft-lrc; 185/412 Test #203: fnocc4 ........................... Passed 22.44 sec; Start 38: cc22; 186/412 Test #278: opt12 ............................ Passed 22.72 sec; Start 21: cc1; 187/412 Test #273: opt6 ............................. Passed 22.63 sec; Start 208: gibbs; 188/412 Test #283: opt-irc-3 ........................ Passed 31.24 sec; Start 276: opt9; 189/412 Test #22: cc10 ............................. Passed 16.39 sec; Start 291: psimrcc-ccsd_t-4; 190/412 Test #110: dcft3 ............................ Passed 13.01 sec; Start 139: dfmp2-grad5; 191/412 Test #359: tu5-sapt ......................... Passed 21.09 sec; Start 297: psithon2; 192/412 Test #164: dft-freq ......................... Passed 23.16 sec; Start 316: sapt1; 193/412 Test #249: omp2-3 ........................... Passed 16.61 sec; Start 24: cc12; 194/412 Test #347: sapt-dft1 ........................ Passed 24.82 sec; Start 239: nbody-intermediates; 195/412 Test #259: omp3-2 ........................... Passed 18.69 sec; Start 322: sapt-dft-api; 196/412 Test #190: fci-tdm-2 ........................ Passed 21.75 sec; Start 255: omp2p5-2; 197/412 Test #178: extern2 .......................... Passed 20.85 sec; Start 177: extern1; 198/412 Test #323: sapt-dft-lrc ..................... Passed 20.48 sec; Start 166: dft-grad2; 199/412 Test #38: cc22 ............................. Passed 18.50 sec; Start 248: omp2-2; 200/412 Test #276: opt9 ............................. Passed 16.37 sec; Start 5: casscf-sa-sp; 201/412 Test #139: dfmp2-grad5 ...................... Passed 16.20 sec; Start 106: dcft-grad3; 202/412 Test #208: gibbs ............................ Passed 19.25 sec; Start 154: dft-grad-lr1; 203/412 Test #297: psithon2 ......................... Passed 15.83 sec; Start 170: dft-vv10; 204/412 Test #291: psimrcc-ccsd_t-4 .................,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1221#issuecomment-419096646:18222,Test,Test,18222,https://psicode.org,https://github.com/psi4/psi4/pull/1221#issuecomment-419096646,1,['Test'],['Test']
Testability,"#177: docs-dft ......................... Passed 0.61 sec; Start 176: docs-bases; 395/413 Test #176: docs-bases ....................... Passed 0.54 sec; Start 162: dft-grac; 396/413 Test #310: pywrap-db3 ....................... Passed 0.68 sec; Start 210: matrix1; 397/413 Test #311: pywrap-molecule .................. Passed 1.08 sec; Start 88: cepa1; 398/413 Test #356: tu2-ch2-energy ................... Passed 3.20 sec; 399/413 Test #210: matrix1 .......................... Passed 0.66 sec; 400/413 Test #211: mcscf1 ........................... Passed 2.13 sec; 401/413 Test #212: mcscf2 ........................... Passed 3.62 sec; 402/413 Test #289: psimrcc-ccsd_t-1 ................. Passed 4.39 sec; 403/413 Test #213: mcscf3 ........................... Passed 2.91 sec; 404/413 Test #329: scf-guess-read1 .................. Passed 4.72 sec; 405/413 Test #162: dft-grac ......................... Passed 2.31 sec; 406/413 Test #330: scf-upcast-custom-basis .......... Passed 4.85 sec; 407/413 Test #8: castup1 .......................... Passed 4.98 sec; 408/413 Test #313: rasci-h2o ........................ Passed 5.23 sec; 409/413 Test #132: dfmp2-2 .......................... Passed 5.73 sec; 410/413 Test #88: cepa1 ............................ Passed 3.93 sec; 411/413 Test #18: cbs-xtpl-func .................... Passed 1465.89 sec; 412/413 Test #180: fsapt1 ........................... Passed 1916.37 sec; 413/413 Test #320: sapt4 ............................ Passed 1842.77 sec. 100% tests passed, 0 tests failed out of 413. Label Time Summary:; adc = 73.71 sec*proc (2 tests); autotest = 2032.85 sec*proc (26 tests); cart = 19618.09 sec*proc (123 tests); cas = 54.46 sec*proc (1 test); casscf = 99.80 sec*proc (11 tests); cbs = 2579.77 sec*proc (11 tests); cc = 15643.19 sec*proc (65 tests); cdomp2 = 48.29 sec*proc (2 tests); cepa = 188.77 sec*proc (7 tests); ci = 115.37 sec*proc (8 tests); cisd = 188.24 sec*proc (7 tests); cookbook = 186.42 sec*proc (1 test); cubeprop = 23.39 sec*",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1246#issuecomment-425384085:38092,Test,Test,38092,https://psicode.org,https://github.com/psi4/psi4/pull/1246#issuecomment-425384085,1,['Test'],['Test']
Testability,#177: extern2 .......................... Passed 18.26 sec; Start 238: nbody-intermediates; 188/411 Test #37: cc22 ............................. Passed 12.78 sec; Start 160: dft-grad-lr1; 189/411 Test #315: sapt1 ............................ Passed 17.58 sec; Start 313: rasscf-sp; 190/411 Test #392: python-cc54 ...................... Passed 11.33 sec; Start 77: cc8; 191/411 Test #290: psimrcc-ccsd_t-4 ................. Passed 18.21 sec; Start 321: sapt-dft-api; 192/411 Test #282: opt-irc-3 ........................ Passed 23.31 sec; Start 109: dcft3; 193/411 Test #165: dft-grad2 ........................ Passed 16.00 sec; Start 258: omp3-2; 194/411 Test #313: rasscf-sp ........................ Passed 11.33 sec; Start 50: cc34; 195/411 Test #238: nbody-intermediates .............. Passed 15.14 sec; Start 62: cc45; 196/411 Test #160: dft-grad-lr1 ..................... Passed 16.44 sec; Start 89: cepa3; 197/411 Test #321: sapt-dft-api ..................... Passed 15.73 sec; Start 275: opt9; 198/411 Test #109: dcft3 ............................ Passed 16.50 sec; Start 169: dft-vv10; 199/411 Test #50: cc34 ............................. Passed 14.31 sec; Start 218: mints8; 200/411 Test #258: omp3-2 ........................... Passed 18.14 sec; Start 52: cc36; 201/411 Test #62: cc45 ............................. Passed 17.06 sec; Start 350: dft-custom; 202/411 Test #89: cepa3 ............................ Passed 15.33 sec; Start 53: cc37; 203/411 Test #77: cc8 .............................. Passed 26.32 sec; Start 48: cc32; 204/411 Test #169: dft-vv10 ......................... Passed 15.55 sec; Start 296: psithon2; 205/411 Test #218: mints8 ........................... Passed 14.57 sec; Start 22: cc11; 206/411 Test #275: opt9 ............................. Passed 18.74 sec; Start 301: pywrap-basis; 207/411 Test #52: cc36 ............................. Passed 13.09 sec; Start 254: omp2p5-2; 208/411 Test #350: dft-custom ....................... Passed 14.64 sec; Start 324: sapt8; 20,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-405575064:18478,Test,Test,18478,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-405575064,1,['Test'],['Test']
Testability,#17: cbs-xtpl-opt ..................... Passed 84.79 sec; Start 294: psimrcc-fd-freq2; 83/413 Test #194: fd-freq-energy ................... Passed 71.76 sec; Start 321: sapt5; 84/413 Test #281: opt14 ............................ Passed 84.37 sec; Start 12: cbs-parser; 85/413 Test #246: ocepa2 ........................... Passed 62.00 sec; Start 64: cc46; 86/413 Test #207: frac-traverse .................... Passed 228.24 sec; Start 258: omp2p5-grad2; 87/413 Test #301: pywrap-alias ..................... Passed 54.99 sec; Start 74: cc55; 88/413 Test #319: sapt3 ............................ Passed 78.46 sec; Start 142: dfomp2-2; 89/413 Test #21: cc1 .............................. Passed 73.87 sec; Start 149: dfomp3-2; 90/413 Test #64: cc46 ............................. Passed 60.35 sec; Start 206: frac-ip-fitting; 91/413 Test #294: psimrcc-fd-freq2 ................. Passed 79.90 sec; Start 35: cc19; 92/413 Test #321: sapt5 ............................ Passed 73.63 sec; Start 79: cc8a; 93/413 Test #158: dfomp2p5-grad2 ................... Passed 84.82 sec; Start 153: dfomp2p5-2; 94/413 Test #12: cbs-parser ....................... Passed 84.27 sec; Start 78: cc8; 95/413 Test #258: omp2p5-grad2 ..................... Passed 70.71 sec; Start 83: cc9a; 96/413 Test #142: dfomp2-2 ......................... Passed 56.15 sec; Start 169: dft-b3lyp; 97/413 Test #74: cc55 ............................. Passed 72.94 sec; Start 72: cc53; 98/413 Test #79: cc8a ............................. Passed 57.92 sec; Start 80: cc8b; 99/413 Test #35: cc19 ............................. Passed 59.63 sec; Start 66: cc48; 100/413 Test #149: dfomp3-2 ......................... Passed 74.46 sec; Start 65: cc47; 101/413 Test #115: dcft7 ............................ Passed 334.33 sec; Start 247: ocepa3; 102/413 Test #206: frac-ip-fitting .................. Passed 71.76 sec; Start 56: cc39; 103/413 Test #318: sapt2 ............................ Passed 348.87 sec; Start 82: cc9; 104/413 Test #153: dfomp2p5-2 ..,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1246#issuecomment-425384085:8950,Test,Test,8950,https://psicode.org,https://github.com/psi4/psi4/pull/1246#issuecomment-425384085,1,['Test'],['Test']
Testability,#182: fsapt-terms ...................... Passed 8.40 sec; Start 227: mom; 323/413 Test #15: cbs-xtpl-freq .................... Passed 7.72 sec; Start 215: mints2; 324/413 Test #273: opt5 ............................. Passed 3.74 sec; Start 365: zaptn-nh2; 325/413 Test #226: molden2 .......................... Passed 5.25 sec; Start 341: scf-property; 326/413 Test #118: ao-dfcasscf-sp ................... Passed 2.75 sec; Start 357: tu3-h2o-opt; 327/413 Test #235: mp3-grad1 ........................ Passed 3.59 sec; Start 295: psimrcc-pt2; 328/413 Test #193: fcidump .......................... Passed 5.26 sec; Start 316: sad1; 329/413 Test #285: opt-freeze-coords ................ Passed 5.32 sec; Start 87: cepa0-grad2; 330/413 Test #236: mp3-grad2 ........................ Passed 4.19 sec; Start 286: props1; 331/413 Test #238: mpn-bh ........................... Passed 5.26 sec; Start 181: fsapt2; 332/413 Test #225: molden1 .......................... Passed 3.80 sec; Start 384: psi4numpy-rhf; 333/413 Test #295: psimrcc-pt2 ...................... Passed 1.34 sec; Start 382: psi4numpy-cphf; 334/413 Test #333: scf1 ............................. Passed 4.80 sec; Start 380: mints12; 335/413 Test #215: mints2 ........................... Passed 2.74 sec; Start 331: scf-guess-read2; 336/413 Test #365: zaptn-nh2 ........................ Passed 2.39 sec; Start 312: rasci-c2-active; 337/413 Test #384: psi4numpy-rhf .................... Passed 0.91 sec; Start 271: opt3; 338/413 Test #227: mom .............................. Passed 3.48 sec; Start 237: mp2-property; 339/413 Test #119: dfcasscf-sa-sp ................... Passed 4.31 sec; Start 230: mp2-grad1; 340/413 Test #357: tu3-h2o-opt ...................... Passed 2.85 sec; Start 259: omp3-1; 341/413 Test #380: mints12 .......................... Passed 1.32 sec; Start 346: dfep2-1; 342/413 Test #382: psi4numpy-cphf ................... Passed 1.69 sec; Start 353: dft-reference; 343/413 Test #316: sad1 ............................. Pas,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1239#issuecomment-425082026:31375,Test,Test,31375,https://psicode.org,https://github.com/psi4/psi4/pull/1239#issuecomment-425082026,1,['Test'],['Test']
Testability,#183: isapt2 ........................... Passed 126.68 sec; Start 47: cc31; 38/411 Test #347: sapt-dft2 ........................ Passed 120.25 sec; Start 31: cc16; 39/411 Test #29: cc14 ............................. Passed 394.66 sec; Start 386: cookbook-rohf-orb-rot; 40/411 Test #281: opt-irc-2 ........................ Passed 199.50 sec; Start 24: cc13; 41/411 Test #44: cc29 ............................. Passed 195.66 sec; Start 70: cc52; 42/411 Test #47: cc31 ............................. Passed 181.89 sec; Start 28: cc13d; 43/411 Test #379: cc-module ........................ Passed 306.49 sec; Start 161: dft-grad-lr2; 44/411 Test #13: cbs-xtpl-alpha ................... Passed 354.70 sec; Start 25: cc13a; 45/411 Test #31: cc16 ............................. Passed 243.41 sec; Start 113: dcft7; 46/411 Test #161: dft-grad-lr2 ..................... Passed 104.85 sec; Start 205: frac-traverse; 47/411 Test #70: cc52 ............................. Passed 164.44 sec; Start 316: sapt2; 48/411 Test #386: cookbook-rohf-orb-rot ............ Passed 284.29 sec; Start 318: sapt4; 49/411 Test #28: cc13d ............................ Passed 209.13 sec; Start 325: scf-bz2; 50/411 Test #24: cc13 ............................. Passed 257.74 sec; Start 168: dft1; 51/411 Test #205: frac-traverse .................... Passed 211.75 sec; Start 371: dft-custom-dhdf; 52/411 Test #325: scf-bz2 .......................... Passed 122.09 sec; Start 58: cc41; 53/411 Test #168: dft1 ............................. Passed 104.02 sec; Start 75: cc6; 54/411 Test #371: dft-custom-dhdf .................. Passed 89.70 sec; Start 279: opt14; 55/411 Test #75: cc6 .............................. Passed 81.73 sec; Start 69: cc51; 56/411 Test #58: cc41 ............................. Passed 85.94 sec; Start 60: cc43; 57/411 Test #113: dcft7 ............................ Passed 343.68 sec; Start 317: sapt3; 58/411 Test #25: cc13a ............................ Passed 404.79 sec; Start 91: cepa-module; 59/411 Test #316: s,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1077#issuecomment-409911901:4667,Test,Test,4667,https://psicode.org,https://github.com/psi4/psi4/pull/1077#issuecomment-409911901,1,['Test'],['Test']
Testability,#184: isapt2 ........................... Passed 116.22 sec; Start 26: cc13a; 42/412 Test #30: cc14 ............................. Passed 609.23 sec; Start 114: dcft7; 43/412 Test #59: cc41 ............................. Passed 217.43 sec; Start 206: frac-traverse; 44/412 Test #75: cc5a ............................. Passed 142.09 sec; Start 317: sapt2; 45/412 Test #61: cc43 ............................. Passed 214.21 sec; Start 319: sapt4; 46/412 Test #155: dft-grad-lr2 ..................... Passed 112.09 sec; Start 326: scf-bz2; 47/412 Test #360: tu6-cp-ne2 ....................... Passed 430.46 sec; Start 92: cepa-module; 48/412 Test #105: dcft-grad2 ....................... Passed 159.99 sec; Start 372: dft-custom-dhdf; 49/412 Test #169: dft1 ............................. Passed 111.48 sec; Start 31: cc15; 50/412 Test #32: cc16 ............................. Passed 283.37 sec; Start 262: omp3-5; 51/412 Test #279: opt13 ............................ Passed 767.47 sec; Start 260: omp3-3; 52/412 Test #13: cbs-xtpl-alpha ................... Passed 452.73 sec; Start 70: cc51; 53/412 Test #380: cc-module ........................ Passed 296.59 sec; Start 79: cc8a; 54/412 Test #387: cookbook-rohf-orb-rot ............ Passed 326.91 sec; Start 76: cc6; 55/412 Test #303: pywrap-cbs1 ...................... Passed 147.49 sec; Start 281: opt-irc-1; 56/412 Test #79: cc8a ............................. Passed 41.89 sec; Start 116: dcft9; 57/412 Test #31: cc15 ............................. Passed 76.78 sec; Start 280: opt14; 58/412 Test #372: dft-custom-dhdf .................. Passed 95.04 sec; Start 44: cc28; 59/412 Test #326: scf-bz2 .......................... Passed 122.51 sec; Start 320: sapt5; 60/412 Test #70: cc51 ............................. Passed 79.59 sec; Start 83: cc9a; 61/412 Test #92: cepa-module ...................... Passed 121.36 sec; Start 318: sapt3; 62/412 Test #262: omp3-5 ........................... Passed 106.83 sec; Start 231: mp2-module; 63/412 Test #260: omp3-3,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1221#issuecomment-419096646:5197,Test,Test,5197,https://psicode.org,https://github.com/psi4/psi4/pull/1221#issuecomment-419096646,1,['Test'],['Test']
Testability,#186: fci-h2o-2 ........................ Passed 5.81 sec; Start 198: freq-isotope2; 269/411 Test #158: dft-ghost ........................ Passed 7.55 sec; Start 99: cisd-sp-2; 270/411 Test #341: soscf-ref ........................ Passed 7.60 sec; Start 83: cdomp2-1; 271/411 Test #184: fci-dipole ....................... Passed 5.99 sec; Start 6: ao-casscf-sp; 272/411 Test #94: cisd-h2o+-1 ...................... Passed 4.91 sec; Start 108: dcft2; 273/411 Test #224: molden2 .......................... Passed 6.22 sec; Start 269: opt3; 274/411 Test #99: cisd-sp-2 ........................ Passed 5.95 sec; Start 329: scf-guess-read2; 275/411 Test #198: freq-isotope2 .................... Passed 8.20 sec; Start 234: mp3-grad2; 276/411 Test #6: ao-casscf-sp ..................... Passed 5.33 sec; Start 339: scf-property; 277/411 Test #83: cdomp2-1 ......................... Passed 7.43 sec; Start 9: castup2; 278/411 Test #269: opt3 ............................. Passed 5.42 sec; Start 10: castup3; 279/411 Test #199: fnocc1 ........................... Passed 13.51 sec; Start 233: mp3-grad1; 280/411 Test #108: dcft2 ............................ Passed 8.11 sec; Start 117: dfcasscf-sa-sp; 281/411 Test #234: mp3-grad2 ........................ Passed 4.58 sec; Start 3: casscf-fzc-sp; 282/411 Test #329: scf-guess-read2 .................. Passed 6.02 sec; Start 331: scf1; 283/411 Test #233: mp3-grad1 ........................ Passed 1.89 sec; Start 171: dft2; 284/411 Test #339: scf-property ..................... Passed 5.57 sec; Start 344: dfep2-1; 285/411 Test #117: dfcasscf-sa-sp ................... Passed 5.69 sec; Start 265: opt1; 286/411 Test #344: dfep2-1 .......................... Passed 4.11 sec; Start 223: molden1; 287/411 Test #331: scf1 ............................. Passed 5.42 sec; Start 190: fci-coverage; 288/411 Test #10: castup3 .......................... Passed 8.69 sec; Start 86: cepa0-grad2; 289/411 Test #171: dft2 ............................. Passed 5.48 sec; Start 1,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-405575064:25992,Test,Test,25992,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-405575064,1,['Test'],['Test']
Testability,#190: fci-tdm .......................... Passed 0.85 sec; Start 351: sapt-sf1; 375/413 Test #313: rasci-h2o ........................ Passed 1.13 sec; Start 222: mints-helper; 376/413 Test #132: dfmp2-2 .......................... Passed 1.70 sec; Start 356: tu2-ch2-energy; 377/413 Test #329: scf-guess-read1 .................. Passed 1.55 sec; Start 8: castup1; 378/413 Test #289: psimrcc-ccsd_t-1 ................. Passed 1.46 sec; Start 332: scf-bs; 379/413 Test #384: psi4numpy-rhf .................... Passed 0.97 sec; Start 216: mints3; 380/413 Test #380: mints12 .......................... Passed 1.30 sec; Start 336: scf3; 381/413 Test #104: decontract ....................... Passed 1.30 sec; Start 300: pubchem2; 382/413 Test #355: tu1-h2o-energy ................... Passed 1.26 sec; Start 212: mcscf2; 383/413 Test #290: psimrcc-ccsd_t-2 ................. Passed 1.63 sec; Start 213: mcscf3; 384/413 Test #356: tu2-ch2-energy ................... Passed 0.86 sec; Start 218: mints5; 385/413 Test #330: scf-upcast-custom-basis .......... Passed 1.54 sec; Start 241: numpy-array-interface; 386/413 Test #351: sapt-sf1 ......................... Passed 1.06 sec; Start 217: mints4; 387/413 Test #222: mints-helper ..................... Passed 1.14 sec; Start 366: options1; 388/413 Test #336: scf3 ............................. Passed 0.87 sec; Start 214: mints1; 389/413 Test #332: scf-bs ........................... Passed 1.06 sec; Start 211: mcscf1; 390/413 Test #216: mints3 ........................... Passed 1.11 sec; Start 177: docs-dft; 391/413 Test #223: mints9 ........................... Passed 2.13 sec; Start 162: dft-grac; 392/413 Test #347: dfep2-2 .......................... Passed 2.02 sec; Start 311: pywrap-molecule; 393/413 Test #8: castup1 .......................... Passed 1.50 sec; Start 310: pywrap-db3; 394/413 Test #213: mcscf3 ........................... Passed 0.90 sec; Start 176: docs-bases; 395/413 Test #217: mints4 ........................... Passed 0.61 sec; St,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1264#issuecomment-425525678:36168,Test,Test,36168,https://psicode.org,https://github.com/psi4/psi4/pull/1264#issuecomment-425525678,1,['Test'],['Test']
Testability,#192: fd-freq-energy ................... Passed 11.70 sec; Start 198: freq-isotope2; 197/411 Test #189: fci-tdm-2 ........................ Passed 24.01 sec; Start 199: fnocc1; 198/411 Test #198: freq-isotope2 .................... Passed 10.11 sec; Start 200: fnocc2; 199/411 Test #197: freq-isotope1 .................... Passed 17.28 sec; Start 201: fnocc3; 200/411 Test #194: fd-freq-gradient ................. Passed 26.25 sec; Start 202: fnocc4; 201/411 Test #199: fnocc1 ........................... Passed 21.50 sec; Start 203: frac; 202/411 Test #203: frac ............................. Passed 5.66 sec; Start 204: frac-ip-fitting; 203/411 Test #196: fd-gradient ...................... Passed 40.24 sec; Start 206: ghosts; 204/411 Test #201: fnocc3 ........................... Passed 24.13 sec; Start 207: gibbs; 205/411 Test #202: fnocc4 ........................... Passed 28.77 sec; Start 208: matrix1; 206/411 Test #208: matrix1 .......................... Passed 0.55 sec; Start 209: mcscf1; 207/411 Test #209: mcscf1 ........................... Passed 1.10 sec; Start 210: mcscf2; 208/411 Test #210: mcscf2 ........................... Passed 1.64 sec; Start 211: mcscf3; 209/411 Test #211: mcscf3 ........................... Passed 0.97 sec; Start 212: mints1; 210/411 Test #212: mints1 ........................... Passed 0.62 sec; Start 213: mints2; 211/411 Test #213: mints2 ........................... Passed 3.17 sec; Start 214: mints3; 212/411 Test #214: mints3 ........................... Passed 1.12 sec; Start 215: mints4; 213/411 Test #215: mints4 ........................... Passed 0.58 sec; Start 216: mints5; 214/411 Test #207: gibbs ............................ Passed 21.62 sec; Start 217: mints6; 215/411 Test #216: mints5 ........................... Passed 0.65 sec; Start 218: mints8; 216/411 Test #200: fnocc2 ........................... Passed 54.94 sec; Start 219: mints-benchmark; 217/411 Test #206: ghosts ........................... Passed 34.38 sec; Start 220: mints-,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1112#issuecomment-409912325:19114,Test,Test,19114,https://psicode.org,https://github.com/psi4/psi4/pull/1112#issuecomment-409912325,1,['Test'],['Test']
Testability,#192: fd-freq-energy ................... Passed 8.97 sec; Start 198: freq-isotope2; 189/411 Test #198: freq-isotope2 .................... Passed 5.22 sec; Start 199: fnocc1; 190/411 Test #189: fci-tdm-2 ........................ Passed 21.94 sec; Start 200: fnocc2; 191/411 Test #197: freq-isotope1 .................... Passed 9.99 sec; Start 201: fnocc3; 192/411 Test #167: dft-b3lyp ........................ Passed 69.37 sec; Start 202: fnocc4; 193/411 Test #194: fd-freq-gradient ................. Passed 19.34 sec; Start 203: frac; 194/411 Test #199: fnocc1 ........................... Passed 11.81 sec; Start 204: frac-ip-fitting; 195/411 Test #203: frac ............................. Passed 5.22 sec; Start 206: ghosts; 196/411 Test #201: fnocc3 ........................... Passed 12.94 sec; Start 207: gibbs; 197/411 Test #161: dft-grad-lr2 ..................... Passed 102.98 sec; Start 208: matrix1; 198/411 Test #208: matrix1 .......................... Passed 0.57 sec; Start 209: mcscf1; 199/411 Test #196: fd-gradient ...................... Passed 32.44 sec; Start 210: mcscf2; 200/411 Test #209: mcscf1 ........................... Passed 1.15 sec; Start 211: mcscf3; 201/411 Test #210: mcscf2 ........................... Passed 1.76 sec; Start 212: mints1; 202/411 Test #211: mcscf3 ........................... Passed 1.24 sec; Start 213: mints2; 203/411 Test #212: mints1 ........................... Passed 0.58 sec; Start 214: mints3; 204/411 Test #214: mints3 ........................... Passed 1.05 sec; Start 215: mints4; 205/411 Test #215: mints4 ........................... Passed 0.53 sec; Start 216: mints5; 206/411 Test #216: mints5 ........................... Passed 0.69 sec; Start 217: mints6; 207/411 Test #213: mints2 ........................... Passed 3.30 sec; Start 218: mints8; 208/411 Test #202: fnocc4 ........................... Passed 25.48 sec; Start 219: mints-benchmark; 209/411 Test #155: dfscf-bz2 ........................ Passed 141.11 sec; Start 220: mints-he,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1090#issuecomment-408925986:18536,Test,Test,18536,https://psicode.org,https://github.com/psi4/psi4/pull/1090#issuecomment-408925986,1,['Test'],['Test']
Testability,#192: fd-freq-energy ................... Passed 9.49 sec; Start 365: cubeprop-esp; 247/411 Test #123: dfccsd1 .......................... Passed 3.18 sec; Start 180: fsapt-terms; 248/411 Test #15: cbs-xtpl-freq .................... Passed 8.72 sec; Start 88: cepa2; 249/411 Test #132: dfmp2-4 .......................... Passed 6.41 sec; Start 367: scf-hess1; 250/411 Test #197: freq-isotope1 .................... Passed 11.97 sec; Start 185: fci-h2o; 251/411 Test #90: cepa1 ............................ Passed 9.54 sec; Start 21: cc10; 252/411 Test #357: tu4-h2o-freq ..................... Passed 11.18 sec; Start 270: opt4; 253/411 Test #88: cepa2 ............................ Passed 4.53 sec; Start 241: ocepa-grad1; 254/411 Test #365: cubeprop-esp ..................... Passed 8.61 sec; Start 291: psimrcc-fd-freq1; 255/411 Test #180: fsapt-terms ...................... Passed 8.34 sec; Start 335: scf4; 256/411 Test #367: scf-hess1 ........................ Passed 7.76 sec; Start 154: dfrasscf-sp; 257/411 Test #185: fci-h2o .......................... Passed 6.66 sec; Start 124: dfccsdl1; 258/411 Test #270: opt4 ............................. Passed 9.75 sec; Start 232: mp2p5-grad2; 259/411 Test #124: dfccsdl1 ......................... Passed 10.26 sec; Start 137: dfmp2-grad4; 260/411 Test #154: dfrasscf-sp ...................... Passed 10.80 sec; Start 158: dft-ghost; 261/411 Test #241: ocepa-grad1 ...................... Passed 14.52 sec; Start 341: soscf-ref; 262/411 Test #232: mp2p5-grad2 ...................... Passed 5.60 sec; Start 186: fci-h2o-2; 263/411 Test #335: scf4 ............................. Passed 12.61 sec; Start 135: dfmp2-grad2; 264/411 Test #291: psimrcc-fd-freq1 ................. Passed 17.42 sec; Start 184: fci-dipole; 265/411 Test #21: cc10 ............................. Passed 19.30 sec; Start 199: fnocc1; 266/411 Test #137: dfmp2-grad4 ...................... Passed 4.90 sec; Start 224: molden2; 267/411 Test #135: dfmp2-grad2 ...................... Passed 4,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-405575064:23949,Test,Test,23949,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-405575064,1,['Test'],['Test']
Testability,#195: fd-freq-gradient ................. Passed 43.35 sec; Start 153: dfomp2p5-grad1; 148/412 Test #149: dfomp3-grad1 ..................... Passed 20.73 sec; Start 197: fd-gradient; 149/412 Test #127: dfccsd-t-grad1 ................... Passed 29.16 sec; Start 343: soscf-dft; 150/412 Test #107: dcft-grad4 ....................... Passed 38.78 sec; Start 375: dft-custom-gga; 151/412 Test #313: rasci-ne ......................... Passed 40.81 sec; Start 49: cc32; 152/412 Test #134: dfmp2-ecp ........................ Passed 34.88 sec; Start 63: cc45; 153/412 Test #34: cc18 ............................. Passed 34.13 sec; Start 51: cc34; 154/412 Test #253: omp2-grad2 ....................... Passed 34.62 sec; Start 52: cc35; 155/412 Test #207: ghosts ........................... Passed 36.33 sec; Start 327: scf-ecp; 156/412 Test #324: sapt7 ............................ Passed 34.94 sec; Start 1: adc1; 157/412 Test #130: dfmp2-1 .......................... Passed 36.26 sec; Start 16: cbs-xtpl-gradient; 158/412 Test #275: opt8 ............................. Passed 42.88 sec; Start 53: cc36; 159/412 Test #49: cc32 ............................. Passed 30.50 sec; Start 283: opt-irc-3; 160/412 Test #343: soscf-dft ........................ Passed 38.13 sec; Start 50: cc33; 161/412 Test #375: dft-custom-gga ................... Passed 40.10 sec; Start 265: opt-lindep-change; 162/412 Test #126: dfccsd-grad1 ..................... Passed 45.67 sec; Start 174: dft-omega; 163/412 Test #153: dfomp2p5-grad1 ................... Passed 42.65 sec; Start 147: dfomp3-1; 164/412 Test #63: cc45 ............................. Passed 37.23 sec; Start 167: dft-psivar; 165/412 Test #197: fd-gradient ...................... Passed 44.42 sec; Start 376: pywrap-bfs; 166/412 Test #51: cc34 ............................. Passed 33.14 sec; Start 160: dft-b2plyp; 167/412 Test #1: adc1 ............................. Passed 27.32 sec; Start 173: dft3; 168/412 Test #327: scf-ecp .......................... Passed 35.86,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1224#issuecomment-419158485:14902,Test,Test,14902,https://psicode.org,https://github.com/psi4/psi4/pull/1224#issuecomment-419158485,1,['Test'],['Test']
Testability,#195: fd-freq-gradient-large ........... Passed 297.78 sec; Start 162: dft-grad-lr3; 2/411 Test #182: isapt1 ........................... Passed 469.93 sec; Start 227: mp2-def2; 3/411 Test #18: cbs-xtpl-func .................... Passed 485.98 sec; Start 25: cc13a; 4/411 Test #193: fd-freq-energy-large ............. Passed 551.44 sec; Start 113: dcft7; 5/411 Test #181: fsapt-allterms ................... Passed 652.63 sec; Start 205: frac-traverse; 6/411 Test #394: python-vibanalysis ............... Passed 680.49 sec; Start 316: sapt2; 7/411 Test #25: cc13a ............................ Passed 254.82 sec; Start 318: sapt4; 8/411 Test #162: dft-grad-lr3 ..................... Passed 489.85 sec; Start 325: scf-bz2; 9/411 Test #113: dcft7 ............................ Passed 278.82 sec; Start 373: dft-custom-mgga; 10/411 Test #278: opt13 ............................ Passed 847.95 sec; Start 320: sapt6; 11/411 Test #205: frac-traverse .................... Passed 221.61 sec; Start 155: dfscf-bz2; 12/411 Test #227: mp2-def2 ......................... Passed 440.79 sec; Start 183: isapt2; 13/411 Test #325: scf-bz2 .......................... Passed 127.53 sec; Start 347: sapt-dft2; 14/411 Test #320: sapt6 ............................ Passed 169.47 sec; Start 112: dcft6; 15/411 Test #155: dfscf-bz2 ........................ Passed 146.26 sec; Start 97: cisd-opt-fd; 16/411 Test #373: dft-custom-mgga .................. Passed 193.16 sec; Start 281: opt-irc-2; 17/411 Test #316: sapt2 ............................ Passed 360.69 sec; Start 300: pywrap-all; 18/411 Test #347: sapt-dft2 ........................ Passed 128.97 sec; Start 161: dft-grad-lr2; 19/411 Test #183: isapt2 ........................... Passed 138.45 sec; Start 168: dft1; 20/411 Test #161: dft-grad-lr2 ..................... Passed 106.27 sec; Start 304: pywrap-checkrun-rhf; 21/411 Test #168: dft1 ............................. Passed 104.16 sec; Start 371: dft-custom-dhdf; 22/411 Test #97: cisd-opt-fd .....................,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1089#issuecomment-408103972:1353,Test,Test,1353,https://psicode.org,https://github.com/psi4/psi4/pull/1089#issuecomment-408103972,1,['Test'],['Test']
Testability,#196: fd-gradient ...................... Passed 39.39 sec; Start 214: mints3; 204/411 Test #155: dfscf-bz2 ........................ Passed 143.01 sec; Start 215: mints4; 205/411 Test #214: mints3 ........................... Passed 0.99 sec; Start 216: mints5; 206/411 Test #213: mints2 ........................... Passed 2.55 sec; Start 217: mints6; 207/411 Test #215: mints4 ........................... Passed 0.54 sec; Start 218: mints8; 208/411 Test #216: mints5 ........................... Passed 0.62 sec; Start 219: mints-benchmark; 209/411 Test #202: fnocc4 ........................... Passed 28.48 sec; Start 220: mints-helper; 210/411 Test #220: mints-helper ..................... Passed 1.24 sec; Start 221: mints9; 211/411 Test #221: mints9 ........................... Passed 2.01 sec; Start 222: mints10; 212/411 Test #168: dft1 ............................. Passed 104.93 sec; Start 223: molden1; 213/411 Test #222: mints10 .......................... Passed 2.63 sec; Start 224: molden2; 214/411 Test #207: gibbs ............................ Passed 22.11 sec; Start 225: mom; 215/411 Test #217: mints6 ........................... Passed 13.02 sec; Start 226: mp2-1; 216/411 Test #225: mom .............................. Passed 5.50 sec; Start 227: mp2-def2; 217/411 Test #218: mints8 ........................... Passed 18.43 sec; Start 228: mp2-grad1; 218/411 Test #223: molden1 .......................... Passed 11.23 sec; Start 229: mp2-grad2; 219/411 Test #206: ghosts ........................... Passed 34.53 sec; Start 230: mp2-module; 220/411 Test #224: molden2 .......................... Passed 17.32 sec; Start 231: mp2p5-grad1; 221/411 Test #228: mp2-grad1 ........................ Passed 9.84 sec; Start 232: mp2p5-grad2; 222/411 Test #229: mp2-grad2 ........................ Passed 9.84 sec; Start 233: mp3-grad1; 223/411 Test #200: fnocc2 ........................... Passed 59.94 sec; Start 234: mp3-grad2; 224/411 Test #231: mp2p5-grad1 ...................... Passed 7.83 se,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1087#issuecomment-408854538:19877,Test,Test,19877,https://psicode.org,https://github.com/psi4/psi4/pull/1087#issuecomment-408854538,1,['Test'],['Test']
Testability,#201: fnocc1 ........................... Passed 18.46 sec; Start 260: omp3-2; 177/413 Test #269: opt2 ............................. Passed 24.31 sec; Start 378: pywrap-align; 178/413 Test #314: rasci-ne ......................... Passed 40.21 sec; Start 274: opt6; 179/413 Test #378: pywrap-align ..................... Passed 3.38 sec; Start 249: omp2-2; 180/413 Test #256: omp2p5-2 ......................... Passed 22.46 sec; Start 175: dft-omega; 181/413 Test #203: fnocc3 ........................... Passed 13.74 sec; Start 165: dft-freq; 182/413 Test #131: dfmp2-1 .......................... Passed 34.38 sec; Start 179: extern2; 183/413 Test #362: x2c1 ............................. Passed 30.47 sec; Start 1: adc1; 184/413 Test #376: dft-custom-gga ................... Passed 33.22 sec; Start 140: dfmp2-grad5; 185/413 Test #135: dfmp2-ecp ........................ Passed 36.53 sec; Start 250: omp2-3; 186/413 Test #260: omp3-2 ........................... Passed 16.56 sec; Start 377: pywrap-bfs; 187/413 Test #249: omp2-2 ........................... Passed 11.35 sec; Start 145: dfomp2-grad1; 188/413 Test #204: fnocc4 ........................... Passed 23.20 sec; Start 240: nbody-intermediates; 189/413 Test #344: soscf-dft ........................ Passed 32.54 sec; Start 209: gibbs; 190/413 Test #145: dfomp2-grad1 ..................... Passed 8.53 sec; Start 174: dft3; 191/413 Test #328: scf-ecp .......................... Passed 28.16 sec; Start 90: cepa3; 192/413 Test #208: ghosts ........................... Passed 34.56 sec; Start 107: dcft-grad3; 193/413 Test #274: opt6 ............................. Passed 24.58 sec; Start 348: sapt-dft1; 194/413 Test #250: omp2-3 ........................... Passed 16.69 sec; Start 161: dft-b2plyp; 195/413 Test #165: dft-freq ......................... Passed 21.02 sec; Start 84: cdomp2-1; 196/413 Test #140: dfmp2-grad5 ...................... Passed 18.76 sec; Start 243: ocepa-grad1; 197/413 Test #179: extern2 .......................... Pass,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1239#issuecomment-425082026:17550,Test,Test,17550,https://psicode.org,https://github.com/psi4/psi4/pull/1239#issuecomment-425082026,1,['Test'],['Test']
Testability,#202: fnocc4 ........................... Passed 28.48 sec; Start 220: mints-helper; 210/411 Test #220: mints-helper ..................... Passed 1.24 sec; Start 221: mints9; 211/411 Test #221: mints9 ........................... Passed 2.01 sec; Start 222: mints10; 212/411 Test #168: dft1 ............................. Passed 104.93 sec; Start 223: molden1; 213/411 Test #222: mints10 .......................... Passed 2.63 sec; Start 224: molden2; 214/411 Test #207: gibbs ............................ Passed 22.11 sec; Start 225: mom; 215/411 Test #217: mints6 ........................... Passed 13.02 sec; Start 226: mp2-1; 216/411 Test #225: mom .............................. Passed 5.50 sec; Start 227: mp2-def2; 217/411 Test #218: mints8 ........................... Passed 18.43 sec; Start 228: mp2-grad1; 218/411 Test #223: molden1 .......................... Passed 11.23 sec; Start 229: mp2-grad2; 219/411 Test #206: ghosts ........................... Passed 34.53 sec; Start 230: mp2-module; 220/411 Test #224: molden2 .......................... Passed 17.32 sec; Start 231: mp2p5-grad1; 221/411 Test #228: mp2-grad1 ........................ Passed 9.84 sec; Start 232: mp2p5-grad2; 222/411 Test #229: mp2-grad2 ........................ Passed 9.84 sec; Start 233: mp3-grad1; 223/411 Test #200: fnocc2 ........................... Passed 59.94 sec; Start 234: mp3-grad2; 224/411 Test #231: mp2p5-grad1 ...................... Passed 7.83 sec; Start 235: mp2-property; 225/411 Test #233: mp3-grad1 ........................ Passed 8.32 sec; Start 236: mpn-bh; 226/411 Test #235: mp2-property ..................... Passed 4.28 sec; Start 237: nbody-he-cluster; 227/411 Test #232: mp2p5-grad2 ...................... Passed 13.18 sec; Start 238: nbody-intermediates; 228/411 Test #234: mp3-grad2 ........................ Passed 12.06 sec; Start 239: numpy-array-interface; 229/411 Test #226: mp2-1 ............................ Passed 30.19 sec; Start 240: ocepa-freq1; 230/411 Test #239: numpy-arra,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1087#issuecomment-408854538:20430,Test,Test,20430,https://psicode.org,https://github.com/psi4/psi4/pull/1087#issuecomment-408854538,1,['Test'],['Test']
Testability,#202: fnocc4 ........................... Passed 34.47 sec; Start 1: adc1; 134/411 Test #264: opt-lindep-change ................ Passed 28.28 sec; Start 147: dfomp3-2; 135/411 Test #326: scf-ecp .......................... Passed 35.46 sec; Start 173: dft-omega; 136/411 Test #7: casscf-sp ........................ Passed 36.13 sec; Start 207: gibbs; 137/411 Test #249: omp2-4 ........................... Passed 110.38 sec; Start 375: pywrap-bfs; 138/411 Test #109: dcft3 ............................ Passed 25.22 sec; Start 12: cbs-parser; 139/411 Test #65: cc48 ............................. Passed 77.89 sec; Start 166: dft-psivar; 140/411 Test #156: dft-b2plyp ....................... Passed 25.02 sec; Start 126: dfccsd-t-grad1; 141/411 Test #1: adc1 ............................. Passed 25.46 sec; Start 73: cc55; 142/411 Test #207: gibbs ............................ Passed 24.19 sec; Start 67: cc4a; 143/411 Test #173: dft-omega ........................ Passed 24.73 sec; Start 245: ocepa3; 144/411 Test #256: omp2p5-grad2 ..................... Passed 76.39 sec; Start 64: cc47; 145/411 Test #196: fd-gradient ...................... Passed 35.40 sec; Start 346: sapt-dft1; 146/411 Test #375: pywrap-bfs ....................... Passed 24.62 sec; Start 151: dfomp2p5-2; 147/411 Test #153: dfomp2p5-grad2 ................... Passed 104.20 sec; Start 55: cc39; 148/411 Test #166: dft-psivar ....................... Passed 26.30 sec; Start 81: cc9; 149/411 Test #379: cc-module ........................ Passed 496.63 sec; Start 63: cc46; 150/411 Test #82: cc9a ............................. Passed 60.15 sec; Start 313: rasscf-sp; 151/411 Test #59: cc42 ............................. Passed 65.17 sec; Start 189: fci-tdm-2; 152/411 Test #346: sapt-dft1 ........................ Passed 24.50 sec; Start 71: cc53; 153/411 Test #126: dfccsd-t-grad1 ................... Passed 46.35 sec; Start 79: cc8b; 154/411 Test #147: dfomp3-2 ......................... Passed 68.44 sec; Start 163: dft-freq; 155/41,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1072#issuecomment-406602307:13629,Test,Test,13629,https://psicode.org,https://github.com/psi4/psi4/pull/1072#issuecomment-406602307,1,['Test'],['Test']
Testability,#203: fnocc4 ........................... Passed 42.55 sec; Start 22: cc10; 189/412 Test #273: opt6 ............................. Passed 37.13 sec; Start 200: fnocc1; 190/412 Test #314: rasscf-sp ........................ Passed 46.98 sec; Start 291: psimrcc-ccsd_t-4; 191/412 Test #178: extern2 .......................... Passed 37.34 sec; Start 249: omp2-3; 192/412 Test #129: dfccsdat1 ........................ Passed 40.97 sec; Start 38: cc22; 193/412 Test #323: sapt-dft-lrc ..................... Passed 23.16 sec; Start 292: psimrcc-fd-freq1; 194/412 Test #291: psimrcc-ccsd_t-4 ................. Passed 19.77 sec; Start 54: cc37; 195/412 Test #208: gibbs ............................ Passed 46.18 sec; Start 316: sapt1; 196/412 Test #144: dfomp2-grad1 ..................... Passed 34.46 sec; Start 151: dfomp2p5-1; 197/412 Test #248: omp2-2 ........................... Passed 45.93 sec; Start 24: cc12; 198/412 Test #259: omp3-2 ........................... Passed 44.46 sec; Start 177: extern1; 199/412 Test #7: casscf-sp ........................ Passed 59.09 sec; Start 239: nbody-intermediates; 200/412 Test #110: dcft3 ............................ Passed 51.48 sec; Start 170: dft-vv10; 201/412 Test #202: fnocc3 ........................... Passed 45.04 sec; Start 297: psithon2; 202/412 Test #200: fnocc1 ........................... Passed 38.26 sec; Start 322: sapt-dft-api; 203/412 Test #249: omp2-3 ........................... Passed 36.69 sec; Start 276: opt9; 204/412 Test #292: psimrcc-fd-freq1 ................. Passed 26.87 sec; Start 139: dfmp2-grad5; 205/412 Test #316: sapt1 ............................ Passed 18.67 sec; Start 302: pywrap-basis; 206/412 Test #38: cc22 ............................. Passed 46.75 sec; Start 154: dft-grad-lr1; 207/412 Test #54: cc37 ............................. Passed 30.27 sec; Start 166: dft-grad2; 208/412 Test #22: cc10 ............................. Passed 55.62 sec; Start 106: dcft-grad3; 209/412 Test #177: extern1 .......................,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1224#issuecomment-419158485:18700,Test,Test,18700,https://psicode.org,https://github.com/psi4/psi4/pull/1224#issuecomment-419158485,1,['Test'],['Test']
Testability,"#2063, #2091) ; - Set Lagrangian in Wavefunction (#2064, #2066, #2070) ; - Linux Azure fix (#2074) ; - Remove code in DF-DCT and DFOCC (#2067, #2078) ; - Python functions for DF derivative integrals (#2088) ; - Windows conda package (#2048) ; - Remove some tests for multithreading (#2094) ; - Update Numpy interface docs (#2089) ; - Python detection downstream (#2096) ; - Save OCC densities to Wavefunction (#2072) ; - Make library SHARED and Py linking MODULE in pybind11 (2104) ; - Remove some OCC code (#2107) ; - Refactor EFP routines (#2111) ; - Pybind11 to v2.6.2 (#2118) ; - Windows package to anaconda.org (#2123) ; - Update v2rdm, qcelemental to 0.19 (#2128) ; - Address linker warning for OSX (#2129) ; - Add DF bases for szvp (#2134) ; - Disable Libint2 screening (#2139) ; - CPPE tests to pytest (#2140) ; - GHA-related fixes (#2144, #2158, #2146, #2167, #2172, #2179) ; - Restore debug symbols (#2159) ; - DCT Cleanup (#2152, #2168, #2171, #2182, #2185) ; - Cleanup of some optking functions (#2170) ; - Improve QCEngine interface for empirical dispersion (#2180) ; - Remove CHKPT (#2186) ; - X2C gradient warning (#2200) ; - Update cmake files to enable Flexiblas support from Fedora (#2246) ; - Add O24 database (#2252, #2154); - Move Molden writer to Python (#2229); - Make restarting SCF and saving orbitals easier (#2190). ## Bug Fixes; - Allow user derivative type to pass properly to some multi-step gradient and hessian procedures (#1551); - Fix `fort.56` printing for MRCC interface (#1606); - Several issues (transformations, AM map) fixed in exported NBO files (#1602); - Fix IRC not displacing initial geometry correctly so hard to follow shallow modes (#1663); - Fix segfault when basis sets have absent AM blocks (#1695); - Add missing MP3 psivars to occ and dfocc (#1707); - Can now have a `df_basis_sad <name> {...}` input block (#1715); - Re-allow DCT guess after breaking 1.3 (#1717); - Fix DFTD3 and MP2D not localizing their files within the Psi4 scratch space (#172",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1562:9915,test,tests,9915,https://psicode.org,https://github.com/psi4/psi4/issues/1562,1,['test'],['tests']
Testability,#207: ghosts ........................... Passed 42.65 sec; Start 343: soscf-dft; 158/412 Test #127: dfccsd-t-grad1 ................... Passed 21.66 sec; Start 63: cc45; 159/412 Test #253: omp2-grad2 ....................... Passed 23.46 sec; Start 52: cc35; 160/412 Test #130: dfmp2-1 .......................... Passed 38.02 sec; Start 51: cc34; 161/412 Test #63: cc45 ............................. Passed 12.62 sec; Start 49: cc32; 162/412 Test #51: cc34 ............................. Passed 13.14 sec; Start 327: scf-ecp; 163/412 Test #375: dft-custom-gga ................... Passed 39.00 sec; Start 149: dfomp3-grad1; 164/412 Test #52: cc35 ............................. Passed 19.98 sec; Start 7: casscf-sp; 165/412 Test #49: cc32 ............................. Passed 11.13 sec; Start 16: cbs-xtpl-gradient; 166/412 Test #343: soscf-dft ........................ Passed 37.42 sec; Start 283: opt-irc-3; 167/412 Test #324: sapt7 ............................ Passed 41.10 sec; Start 314: rasscf-sp; 168/412 Test #149: dfomp3-grad1 ..................... Passed 14.19 sec; Start 50: cc33; 169/412 Test #7: casscf-sp ........................ Passed 17.08 sec; Start 1: adc1; 170/412 Test #327: scf-ecp .......................... Passed 29.95 sec; Start 22: cc10; 171/412 Test #16: cbs-xtpl-gradient ................ Passed 24.07 sec; Start 53: cc36; 172/412 Test #314: rasscf-sp ........................ Passed 15.74 sec; Start 110: dcft3; 173/412 Test #50: cc33 ............................. Passed 20.75 sec; Start 203: fnocc4; 174/412 Test #283: opt-irc-3 ........................ Passed 28.19 sec; Start 265: opt-lindep-change; 175/412 Test #53: cc36 ............................. Passed 22.91 sec; Start 208: gibbs; 176/412 Test #110: dcft3 ............................ Passed 25.84 sec; Start 174: dft-omega; 177/412 Test #22: cc10 ............................. Passed 28.03 sec; Start 248: omp2-2; 178/412 Test #1: adc1 ............................. Passed 39.20 sec; Start 129: dfccsdat1; 179/412,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1225#issuecomment-419883272:15622,Test,Test,15622,https://psicode.org,https://github.com/psi4/psi4/pull/1225#issuecomment-419883272,1,['Test'],['Test']
Testability,#207: gibbs ............................ Passed 21.15 sec; Start 16: cbs-xtpl-gradient; 162/411 Test #54: cc38 ............................. Passed 19.13 sec; Start 49: cc33; 163/411 Test #152: dfomp2p5-grad1 ................... Passed 14.78 sec; Start 172: dft3; 164/411 Test #51: cc35 ............................. Passed 18.61 sec; Start 277: opt12; 165/411 Test #189: fci-tdm-2 ........................ Passed 19.97 sec; Start 346: sapt-dft1; 166/411 Test #33: cc18 ............................. Passed 19.88 sec; Start 360: x2c1; 167/411 Test #163: dft-freq ......................... Passed 20.91 sec; Start 252: omp2-grad2; 168/411 Test #49: cc33 ............................. Passed 15.20 sec; Start 322: sapt-dft-lrc; 169/411 Test #16: cbs-xtpl-gradient ................ Passed 18.76 sec; Start 272: opt6; 170/411 Test #172: dft3 ............................. Passed 19.83 sec; Start 150: dfomp2p5-1; 171/411 Test #360: x2c1 ............................. Passed 12.27 sec; Start 358: tu5-sapt; 172/411 Test #277: opt12 ............................ Passed 20.43 sec; Start 32: cc17; 173/411 Test #252: omp2-grad2 ....................... Passed 12.52 sec; Start 267: opt2; 174/411 Test #346: sapt-dft1 ........................ Passed 21.76 sec; Start 248: omp2-3; 175/411 Test #150: dfomp2p5-1 ....................... Passed 10.49 sec; Start 303: pywrap-checkrun-convcrit; 176/411 Test #322: sapt-dft-lrc ..................... Passed 18.93 sec; Start 146: dfomp3-1; 177/411 Test #272: opt6 ............................. Passed 19.96 sec; Start 138: dfmp2-grad5; 178/411 Test #32: cc17 ............................. Passed 14.49 sec; Start 194: fd-freq-gradient; 179/411 Test #358: tu5-sapt ......................... Passed 18.58 sec; Start 177: extern2; 180/411 Test #146: dfomp3-1 ......................... Passed 11.24 sec; Start 315: sapt1; 181/411 Test #248: omp2-3 ........................... Passed 16.18 sec; Start 282: opt-irc-3; 182/411 Test #267: opt2 ............................. Pas,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-405575064:16051,Test,Test,16051,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-405575064,1,['Test'],['Test']
Testability,#207: gibbs ............................ Passed 37.52 sec; Start 220: mints-helper; 218/411 Test #220: mints-helper ..................... Passed 2.26 sec; Start 221: mints9; 219/411 Test #218: mints8 ........................... Passed 16.72 sec; Start 222: mints10; 220/411 Test #221: mints9 ........................... Passed 1.95 sec; Start 223: molden1; 221/411 Test #222: mints10 .......................... Passed 3.13 sec; Start 224: molden2; 222/411 Test #204: frac-ip-fitting .................. Passed 77.00 sec; Start 225: mom; 223/411 Test #200: fnocc2 ........................... Passed 122.61 sec; Start 226: mp2-1; 224/411 Test #225: mom .............................. Passed 6.32 sec; Start 227: mp2-def2; 225/411 Test #223: molden1 .......................... Passed 15.51 sec; Start 228: mp2-grad1; 226/411 Test #224: molden2 .......................... Passed 14.25 sec; Start 229: mp2-grad2; 227/411 Test #228: mp2-grad1 ........................ Passed 3.99 sec; Start 230: mp2-module; 228/411 Test #229: mp2-grad2 ........................ Passed 5.05 sec; Start 231: mp2p5-grad1; 229/411 Test #226: mp2-1 ............................ Passed 13.12 sec; Start 232: mp2p5-grad2; 230/411 Test #231: mp2p5-grad1 ...................... Passed 3.94 sec; Start 233: mp3-grad1; 231/411 Test #219: mints-benchmark .................. Passed 38.09 sec; Start 234: mp3-grad2; 232/411 Test #233: mp3-grad1 ........................ Passed 8.25 sec; Start 235: mp2-property; 233/411 Test #232: mp2p5-grad2 ...................... Passed 9.49 sec; Start 236: mpn-bh; 234/411 Test #235: mp2-property ..................... Passed 4.03 sec; Start 237: nbody-he-cluster; 235/411 Test #234: mp3-grad2 ........................ Passed 6.75 sec; Start 238: nbody-intermediates; 236/411 Test #236: mpn-bh ........................... Passed 5.96 sec; Start 239: numpy-array-interface; 237/411 Test #239: numpy-array-interface ............ Passed 0.77 sec; Start 240: ocepa-freq1; 238/411 Test #162: dft-grad-lr3 .,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1091#issuecomment-409148219:21034,Test,Test,21034,https://psicode.org,https://github.com/psi4/psi4/pull/1091#issuecomment-409148219,1,['Test'],['Test']
Testability,"#209: matrix1 .......................... Passed 22.15 sec; 398/412 Test #213: mints1 ........................... Passed 22.39 sec; 399/412 Test #175: docs-bases ....................... Passed 22.12 sec; 400/412 Test #216: mints4 ........................... Passed 22.12 sec; 401/412 Test #309: pywrap-db3 ....................... Passed 21.36 sec; 402/412 Test #365: options1 ......................... Passed 21.37 sec; 403/412 Test #403: json-schema-1-throws ............. Passed 21.81 sec; 404/412 Test #399: json-v11-gradient ................ Passed 23.59 sec; 405/412 Test #4: casscf-semi ...................... Passed 24.24 sec; 406/412 Test #119: dfcasscf-fzc-sp .................. Passed 22.12 sec; 407/412 Test #5: casscf-sa-sp ..................... Passed 31.16 sec; 408/412 Test #224: molden1 .......................... Passed 23.02 sec; 409/412 Test #88: cepa1 ............................ Passed 23.86 sec; 410/412 Test #314: rasscf-sp ........................ Passed 26.88 sec; 411/412 Test #7: casscf-sp ........................ Passed 29.29 sec; 412/412 Test #319: sapt4 ............................ Passed 1842.38 sec. 100% tests passed, 0 tests failed out of 412. Label Time Summary:; adc = 98.54 sec*proc (2 tests); autotest = 2376.01 sec*proc (26 tests); cart = 21821.85 sec*proc (123 tests); cas = 70.20 sec*proc (1 test); casscf = 306.92 sec*proc (11 tests); cbs = 2631.53 sec*proc (11 tests); cc = 15319.84 sec*proc (65 tests); cdomp2 = 143.48 sec*proc (2 tests); cepa = 226.30 sec*proc (7 tests); ci = 265.18 sec*proc (8 tests); cisd = 305.68 sec*proc (7 tests); cookbook = 499.71 sec*proc (1 test); cubeprop = 60.94 sec*proc (2 tests); dcft = 5483.73 sec*proc (13 tests); df = 3170.34 sec*proc (38 tests); dfccd = 23.41 sec*proc (1 test); dfccd-grad = 31.36 sec*proc (1 test); dfccdl = 23.35 sec*proc (1 test); dfccsd = 26.12 sec*proc (1 test); dfccsd-grad = 51.95 sec*proc (1 test); dfccsd-t-grad = 43.90 sec*proc (1 test); dfccsdat = 38.92 sec*proc (1 test); dfccsdl = 26.48 ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1227#issuecomment-421362141:38516,Test,Test,38516,https://psicode.org,https://github.com/psi4/psi4/pull/1227#issuecomment-421362141,1,['Test'],['Test']
Testability,#20: cc1 .............................. Passed 85.27 sec; Start 156: dft-b2plyp; 152/411 Test #140: dfomp2-2 ......................... Passed 43.89 sec; Start 51: cc35; 153/411 Test #392: python-cc54 ...................... Passed 32.60 sec; Start 142: dfomp2-4; 154/411 Test #375: pywrap-bfs ....................... Passed 25.26 sec; Start 274: opt8; 155/411 Test #16: cbs-xtpl-gradient ................ Passed 28.95 sec; Start 126: dfccsd-t-grad1; 156/411 Test #196: fd-gradient ...................... Passed 34.78 sec; Start 54: cc38; 157/411 Test #156: dft-b2plyp ....................... Passed 25.08 sec; Start 173: dft-omega; 158/411 Test #200: fnocc2 ........................... Passed 62.79 sec; Start 166: dft-psivar; 159/411 Test #51: cc35 ............................. Passed 36.39 sec; Start 32: cc17; 160/411 Test #166: dft-psivar ....................... Passed 25.32 sec; Start 12: cbs-parser; 161/411 Test #173: dft-omega ........................ Passed 26.99 sec; Start 163: dft-freq; 162/411 Test #142: dfomp2-4 ......................... Passed 39.72 sec; Start 358: tu5-sapt; 163/411 Test #126: dfccsd-t-grad1 ................... Passed 37.57 sec; Start 48: cc32; 164/411 Test #274: opt8 ............................. Passed 38.33 sec; Start 346: sapt-dft1; 165/411 Test #54: cc38 ............................. Passed 35.68 sec; Start 189: fci-tdm-2; 166/411 Test #32: cc17 ............................. Passed 32.96 sec; Start 172: dft3; 167/411 Test #163: dft-freq ......................... Passed 23.84 sec; Start 50: cc34; 168/411 Test #358: tu5-sapt ......................... Passed 21.03 sec; Start 313: rasscf-sp; 169/411 Test #48: cc32 ............................. Passed 18.61 sec; Start 322: sapt-dft-lrc; 170/411 Test #189: fci-tdm-2 ........................ Passed 20.74 sec; Start 252: omp2-grad2; 171/411 Test #346: sapt-dft1 ........................ Passed 22.43 sec; Start 267: opt2; 172/411 Test #50: cc34 ............................. Passed 13.15 sec; Start 272: ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1077#issuecomment-409911901:15110,Test,Test,15110,https://psicode.org,https://github.com/psi4/psi4/pull/1077#issuecomment-409911901,1,['Test'],['Test']
Testability,#210: mcscf2 ........................... Passed 1.76 sec; Start 212: mints1; 202/411 Test #211: mcscf3 ........................... Passed 1.24 sec; Start 213: mints2; 203/411 Test #212: mints1 ........................... Passed 0.58 sec; Start 214: mints3; 204/411 Test #214: mints3 ........................... Passed 1.05 sec; Start 215: mints4; 205/411 Test #215: mints4 ........................... Passed 0.53 sec; Start 216: mints5; 206/411 Test #216: mints5 ........................... Passed 0.69 sec; Start 217: mints6; 207/411 Test #213: mints2 ........................... Passed 3.30 sec; Start 218: mints8; 208/411 Test #202: fnocc4 ........................... Passed 25.48 sec; Start 219: mints-benchmark; 209/411 Test #155: dfscf-bz2 ........................ Passed 141.11 sec; Start 220: mints-helper; 210/411 Test #207: gibbs ............................ Passed 19.82 sec; Start 221: mints9; 211/411 Test #217: mints6 ........................... Passed 12.94 sec; Start 222: mints10; 212/411 Test #220: mints-helper ..................... Passed 1.41 sec; Start 223: molden1; 213/411 Test #221: mints9 ........................... Passed 2.04 sec; Start 224: molden2; 214/411 Test #222: mints10 .......................... Passed 1.66 sec; Start 225: mom; 215/411 Test #200: fnocc2 ........................... Passed 37.89 sec; Start 226: mp2-1; 216/411 Test #168: dft1 ............................. Passed 104.42 sec; Start 227: mp2-def2; 217/411 Test #218: mints8 ........................... Passed 16.12 sec; Start 228: mp2-grad1; 218/411 Test #206: ghosts ........................... Passed 32.49 sec; Start 229: mp2-grad2; 219/411 Test #225: mom .............................. Passed 5.76 sec; Start 230: mp2-module; 220/411 Test #223: molden1 .......................... Passed 7.31 sec; Start 231: mp2p5-grad1; 221/411 Test #228: mp2-grad1 ........................ Passed 4.00 sec; Start 232: mp2p5-grad2; 222/411 Test #224: molden2 .......................... Passed 7.09 sec; Start 2,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1090#issuecomment-408925986:19728,Test,Test,19728,https://psicode.org,https://github.com/psi4/psi4/pull/1090#issuecomment-408925986,1,['Test'],['Test']
Testability,#212: mints1 ........................... Passed 0.58 sec; Start 213: mints2; 203/411 Test #196: fd-gradient ...................... Passed 39.39 sec; Start 214: mints3; 204/411 Test #155: dfscf-bz2 ........................ Passed 143.01 sec; Start 215: mints4; 205/411 Test #214: mints3 ........................... Passed 0.99 sec; Start 216: mints5; 206/411 Test #213: mints2 ........................... Passed 2.55 sec; Start 217: mints6; 207/411 Test #215: mints4 ........................... Passed 0.54 sec; Start 218: mints8; 208/411 Test #216: mints5 ........................... Passed 0.62 sec; Start 219: mints-benchmark; 209/411 Test #202: fnocc4 ........................... Passed 28.48 sec; Start 220: mints-helper; 210/411 Test #220: mints-helper ..................... Passed 1.24 sec; Start 221: mints9; 211/411 Test #221: mints9 ........................... Passed 2.01 sec; Start 222: mints10; 212/411 Test #168: dft1 ............................. Passed 104.93 sec; Start 223: molden1; 213/411 Test #222: mints10 .......................... Passed 2.63 sec; Start 224: molden2; 214/411 Test #207: gibbs ............................ Passed 22.11 sec; Start 225: mom; 215/411 Test #217: mints6 ........................... Passed 13.02 sec; Start 226: mp2-1; 216/411 Test #225: mom .............................. Passed 5.50 sec; Start 227: mp2-def2; 217/411 Test #218: mints8 ........................... Passed 18.43 sec; Start 228: mp2-grad1; 218/411 Test #223: molden1 .......................... Passed 11.23 sec; Start 229: mp2-grad2; 219/411 Test #206: ghosts ........................... Passed 34.53 sec; Start 230: mp2-module; 220/411 Test #224: molden2 .......................... Passed 17.32 sec; Start 231: mp2p5-grad1; 221/411 Test #228: mp2-grad1 ........................ Passed 9.84 sec; Start 232: mp2p5-grad2; 222/411 Test #229: mp2-grad2 ........................ Passed 9.84 sec; Start 233: mp3-grad1; 223/411 Test #200: fnocc2 ........................... Passed 59.94 sec; ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1087#issuecomment-408854538:19786,Test,Test,19786,https://psicode.org,https://github.com/psi4/psi4/pull/1087#issuecomment-408854538,1,['Test'],['Test']
Testability,#212: mints1 ........................... Passed 0.58 sec; Start 214: mints3; 204/411 Test #214: mints3 ........................... Passed 1.05 sec; Start 215: mints4; 205/411 Test #215: mints4 ........................... Passed 0.53 sec; Start 216: mints5; 206/411 Test #216: mints5 ........................... Passed 0.69 sec; Start 217: mints6; 207/411 Test #213: mints2 ........................... Passed 3.30 sec; Start 218: mints8; 208/411 Test #202: fnocc4 ........................... Passed 25.48 sec; Start 219: mints-benchmark; 209/411 Test #155: dfscf-bz2 ........................ Passed 141.11 sec; Start 220: mints-helper; 210/411 Test #207: gibbs ............................ Passed 19.82 sec; Start 221: mints9; 211/411 Test #217: mints6 ........................... Passed 12.94 sec; Start 222: mints10; 212/411 Test #220: mints-helper ..................... Passed 1.41 sec; Start 223: molden1; 213/411 Test #221: mints9 ........................... Passed 2.04 sec; Start 224: molden2; 214/411 Test #222: mints10 .......................... Passed 1.66 sec; Start 225: mom; 215/411 Test #200: fnocc2 ........................... Passed 37.89 sec; Start 226: mp2-1; 216/411 Test #168: dft1 ............................. Passed 104.42 sec; Start 227: mp2-def2; 217/411 Test #218: mints8 ........................... Passed 16.12 sec; Start 228: mp2-grad1; 218/411 Test #206: ghosts ........................... Passed 32.49 sec; Start 229: mp2-grad2; 219/411 Test #225: mom .............................. Passed 5.76 sec; Start 230: mp2-module; 220/411 Test #223: molden1 .......................... Passed 7.31 sec; Start 231: mp2p5-grad1; 221/411 Test #228: mp2-grad1 ........................ Passed 4.00 sec; Start 232: mp2p5-grad2; 222/411 Test #224: molden2 .......................... Passed 7.09 sec; Start 233: mp3-grad1; 223/411 Test #229: mp2-grad2 ........................ Passed 3.96 sec; Start 234: mp3-grad2; 224/411 Test #233: mp3-grad1 ........................ Passed 4.67 sec; ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1090#issuecomment-408925986:19910,Test,Test,19910,https://psicode.org,https://github.com/psi4/psi4/pull/1090#issuecomment-408925986,1,['Test'],['Test']
Testability,#213: mints2 ........................... Passed 2.69 sec; Start 214: mints3; 212/411 Test #214: mints3 ........................... Passed 1.19 sec; Start 215: mints4; 213/411 Test #215: mints4 ........................... Passed 0.68 sec; Start 216: mints5; 214/411 Test #200: fnocc2 ........................... Passed 52.96 sec; Start 217: mints6; 215/411 Test #216: mints5 ........................... Passed 1.11 sec; Start 218: mints8; 216/411 Test #217: mints6 ........................... Passed 11.95 sec; Start 219: mints-benchmark; 217/411 Test #207: gibbs ............................ Passed 26.16 sec; Start 220: mints-helper; 218/411 Test #206: ghosts ........................... Passed 33.06 sec; Start 221: mints9; 219/411 Test #220: mints-helper ..................... Passed 1.84 sec; Start 222: mints10; 220/411 Test #218: mints8 ........................... Passed 16.42 sec; Start 223: molden1; 221/411 Test #221: mints9 ........................... Passed 2.04 sec; Start 224: molden2; 222/411 Test #222: mints10 .......................... Passed 2.32 sec; Start 225: mom; 223/411 Test #225: mom .............................. Passed 3.45 sec; Start 226: mp2-1; 224/411 Test #223: molden1 .......................... Passed 4.95 sec; Start 227: mp2-def2; 225/411 Test #224: molden2 .......................... Passed 4.83 sec; Start 228: mp2-grad1; 226/411 Test #228: mp2-grad1 ........................ Passed 1.97 sec; Start 229: mp2-grad2; 227/411 Test #229: mp2-grad2 ........................ Passed 6.77 sec; Start 230: mp2-module; 228/411 Test #226: mp2-1 ............................ Passed 13.08 sec; Start 231: mp2p5-grad1; 229/411 Test #204: frac-ip-fitting .................. Passed 69.51 sec; Start 232: mp2p5-grad2; 230/411 Test #231: mp2p5-grad1 ...................... Passed 5.92 sec; Start 233: mp3-grad1; 231/411 Test #232: mp2p5-grad2 ...................... Passed 7.49 sec; Start 234: mp3-grad2; 232/411 Test #233: mp3-grad1 ........................ Passed 4.93 sec; Sta,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1115#issuecomment-411094637:20504,Test,Test,20504,https://psicode.org,https://github.com/psi4/psi4/pull/1115#issuecomment-411094637,1,['Test'],['Test']
Testability,#213: mints2 ........................... Passed 3.45 sec; Start 218: mints8; 216/411 Test #207: gibbs ............................ Passed 20.68 sec; Start 219: mints-benchmark; 217/411 Test #217: mints6 ........................... Passed 12.24 sec; Start 220: mints-helper; 218/411 Test #220: mints-helper ..................... Passed 1.95 sec; Start 221: mints9; 219/411 Test #221: mints9 ........................... Passed 1.96 sec; Start 222: mints10; 220/411 Test #218: mints8 ........................... Passed 17.33 sec; Start 223: molden1; 221/411 Test #222: mints10 .......................... Passed 2.31 sec; Start 224: molden2; 222/411 Test #206: ghosts ........................... Passed 35.46 sec; Start 225: mom; 223/411 Test #224: molden2 .......................... Passed 4.76 sec; Start 226: mp2-1; 224/411 Test #223: molden1 .......................... Passed 5.33 sec; Start 227: mp2-def2; 225/411 Test #225: mom .............................. Passed 4.07 sec; Start 228: mp2-grad1; 226/411 Test #228: mp2-grad1 ........................ Passed 3.01 sec; Start 229: mp2-grad2; 227/411 Test #229: mp2-grad2 ........................ Passed 6.82 sec; Start 230: mp2-module; 228/411 Test #226: mp2-1 ............................ Passed 12.93 sec; Start 231: mp2p5-grad1; 229/411 Test #231: mp2p5-grad1 ...................... Passed 3.93 sec; Start 232: mp2p5-grad2; 230/411 Test #232: mp2p5-grad2 ...................... Passed 9.01 sec; Start 233: mp3-grad1; 231/411 Test #219: mints-benchmark .................. Passed 40.23 sec; Start 234: mp3-grad2; 232/411 Test #233: mp3-grad1 ........................ Passed 3.90 sec; Start 235: mp2-property; 233/411 Test #234: mp3-grad2 ........................ Passed 4.13 sec; Start 236: mpn-bh; 234/411 Test #235: mp2-property ..................... Passed 3.19 sec; Start 237: nbody-he-cluster; 235/411 Test #204: frac-ip-fitting .................. Passed 73.34 sec; Start 238: nbody-intermediates; 236/411 Test #236: mpn-bh ...................,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1067#issuecomment-409148828:20849,Test,Test,20849,https://psicode.org,https://github.com/psi4/psi4/pull/1067#issuecomment-409148828,1,['Test'],['Test']
Testability,#214: fsapt-ext-abc2 ...................***Failed 55.36 sec; Start 215: fsapt-ext-abc-au; 64/185 Test #215: fsapt-ext-abc-au .................***Failed 32.87 sec; Start 221: fci-dipole; 65/185 Test #221: fci-dipole ....................... Passed 8.84 sec; Start 228: fcidump; 66/185 Test #228: fcidump .......................... Passed 3.94 sec; Start 235: freq-isotope2; 67/185 Test #235: freq-isotope2 .................... Passed 6.24 sec; Start 237: fnocc2; 68/185 Test #237: fnocc2 ........................... Passed 17.66 sec; Start 239: fnocc4; 69/185 Test #239: fnocc4 ........................... Passed 136.23 sec; Start 240: fnocc5; 70/185 Test #240: fnocc5 ........................... Passed 53.87 sec; Start 241: fnocc6; 71/185 Test #241: fnocc6 ........................... Passed 7.06 sec; Start 248: gibbs; 72/185 Test #248: gibbs ............................ Passed 14.27 sec; Start 251: matrix1; 73/185 Test #251: matrix1 .......................... Passed 1.85 sec; Start 252: matrix2; 74/185 Test #252: matrix2 .......................... Passed 1.81 sec; Start 253: mbis-1; 75/185 Test #253: mbis-1 ........................... Passed 10.77 sec; Start 258: mbis-6; 76/185 Test #258: mbis-6 ........................... Passed 16.06 sec; Start 259: mcscf1; 77/185 Test #259: mcscf1 ........................... Passed 2.04 sec; Start 262: mints1; 78/185 Test #262: mints1 ........................... Passed 1.93 sec; Start 263: mints2; 79/185 Test #263: mints2 ........................... Passed 3.59 sec; Start 272: mints10; 80/185 Test #272: mints10 .......................... Passed 2.30 sec; Start 274: molden1; 81/185 Test #274: molden1 .......................... Passed 3.07 sec; Start 275: molden2; 82/185 Test #275: molden2 .......................... Passed 2.82 sec; Start 284: mp2p5-grad1; 83/185 Test #284: mp2p5-grad1 ...................... Passed 2.74 sec; Start 288: mp2-property; 84/185 Test #288: mp2-property ..................... Passed 4.86 sec; Start 289: mpn-bh; 85/18,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3223#issuecomment-2373056930:6858,Test,Test,6858,https://psicode.org,https://github.com/psi4/psi4/issues/3223#issuecomment-2373056930,1,['Test'],['Test']
Testability,"#2158 failed all azure - Win with a mdi failure at test time and Lin with Py detection failures at Psi configure time. So far this one is ok. It's beyond the configure, but this one is using cmake 3.19. 2158 was using cmake 3.20 which has changes to Py detection. I'm keeping an eye on both PRs, but it's hardly caused by the PR changes themselves.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2159#issuecomment-822611626:51,test,test,51,https://psicode.org,https://github.com/psi4/psi4/pull/2159#issuecomment-822611626,1,['test'],['test']
Testability,"#215: mints4 ........................... Passed 0.51 sec; 406/411 Test #208: matrix1 .......................... Passed 0.52 sec; 407/411 Test #216: mints5 ........................... Passed 0.56 sec; 408/411 Test #174: docs-bases ....................... Passed 0.51 sec; 409/411 Test #87: cepa1 ............................ Passed 1.77 sec; 410/411 Test #178: fsapt1 ........................... Passed 2075.85 sec; 411/411 Test #318: sapt4 ............................ Passed 1795.73 sec. 100% tests passed, 0 tests failed out of 411. Label Time Summary:; adc = 63.77 sec*proc (2 tests); autotest = 464.95 sec*proc (26 tests); cart = 10197.27 sec*proc (123 tests); cas = 45.85 sec*proc (1 test); casscf = 46.69 sec*proc (11 tests); cbs = 607.71 sec*proc (10 tests); cc = 2524.71 sec*proc (65 tests); cdomp2 = 12.61 sec*proc (2 tests); cepa = 34.90 sec*proc (7 tests); ci = 86.89 sec*proc (8 tests); cisd = 126.11 sec*proc (7 tests); cookbook = 21.11 sec*proc (1 test); cubeprop = 19.47 sec*proc (2 tests); dcft = 1171.02 sec*proc (13 tests); df = 616.05 sec*proc (38 tests); dfccd = 1.95 sec*proc (1 test); dfccd-grad = 2.71 sec*proc (1 test); dfccdl = 1.29 sec*proc (1 test); dfccsd = 2.55 sec*proc (1 test); dfccsd-grad = 11.89 sec*proc (1 test); dfccsd-t-grad = 8.25 sec*proc (1 test); dfccsdat = 2.98 sec*proc (1 test); dfccsdl = 2.18 sec*proc (1 test); dfccsdt = 2.02 sec*proc (1 test); dfep2 = 5.39 sec*proc (2 tests); dfmp2 = 110.02 sec*proc (11 tests); dfomp2 = 215.16 sec*proc (7 tests); dfomp2.5 = 38.76 sec*proc (4 tests); dfomp3 = 28.71 sec*proc (4 tests); dfscf = 142.35 sec*proc (1 test); dft = 1320.66 sec*proc (27 tests); docs = 1.09 sec*proc (2 tests); ecp = 34.24 sec*proc (2 tests); fci = 10.36 sec*proc (2 tests); fcidump = 2.17 sec*proc (1 test); findif = 781.94 sec*proc (5 tests); fnocc = 32.06 sec*proc (4 tests); freq = 752.88 sec*proc (6 tests); gradient = 320.64 sec*proc (16 tests); json = 11.21 sec*proc (8 tests); longtests = 3454.42 sec*proc (5 tests); mcscf = 2.64 sec*",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1075#issuecomment-409598225:38786,test,tests,38786,https://psicode.org,https://github.com/psi4/psi4/pull/1075#issuecomment-409598225,1,['test'],['tests']
Testability,#216: mints5 ........................... Passed 0.65 sec; Start 218: mints8; 216/411 Test #200: fnocc2 ........................... Passed 54.94 sec; Start 219: mints-benchmark; 217/411 Test #206: ghosts ........................... Passed 34.38 sec; Start 220: mints-helper; 218/411 Test #220: mints-helper ..................... Passed 1.34 sec; Start 221: mints9; 219/411 Test #221: mints9 ........................... Passed 2.00 sec; Start 222: mints10; 220/411 Test #222: mints10 .......................... Passed 1.63 sec; Start 223: molden1; 221/411 Test #217: mints6 ........................... Passed 16.04 sec; Start 224: molden2; 222/411 Test #218: mints8 ........................... Passed 18.09 sec; Start 225: mom; 223/411 Test #223: molden1 .......................... Passed 5.30 sec; Start 226: mp2-1; 224/411 Test #225: mom .............................. Passed 3.92 sec; Start 227: mp2-def2; 225/411 Test #224: molden2 .......................... Passed 6.41 sec; Start 228: mp2-grad1; 226/411 Test #228: mp2-grad1 ........................ Passed 4.16 sec; Start 229: mp2-grad2; 227/411 Test #226: mp2-1 ............................ Passed 12.01 sec; Start 230: mp2-module; 228/411 Test #229: mp2-grad2 ........................ Passed 7.55 sec; Start 231: mp2p5-grad1; 229/411 Test #145: dfomp2-grad3 ..................... Passed 427.26 sec; Start 232: mp2p5-grad2; 230/411 Test #231: mp2p5-grad1 ...................... Passed 4.31 sec; Start 233: mp3-grad1; 231/411 Test #183: isapt2 ........................... Passed 136.47 sec; Start 234: mp3-grad2; 232/411 Test #233: mp3-grad1 ........................ Passed 6.71 sec; Start 235: mp2-property; 233/411 Test #219: mints-benchmark .................. Passed 42.31 sec; Start 236: mpn-bh; 234/411 Test #232: mp2p5-grad2 ...................... Passed 9.73 sec; Start 237: nbody-he-cluster; 235/411 Test #204: frac-ip-fitting .................. Passed 73.18 sec; Start 238: nbody-intermediates; 236/411 Test #235: mp2-property .........,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1112#issuecomment-409912325:20848,Test,Test,20848,https://psicode.org,https://github.com/psi4/psi4/pull/1112#issuecomment-409912325,1,['Test'],['Test']
Testability,"#216: mints5 ........................... Passed 0.66 sec; 405/411 Test #208: matrix1 .......................... Passed 0.54 sec; 406/411 Test #212: mints1 ........................... Passed 0.53 sec; 407/411 Test #364: options1 ......................... Passed 0.54 sec; 408/411 Test #215: mints4 ........................... Passed 0.52 sec; 409/411 Test #174: docs-bases ....................... Passed 0.51 sec; 410/411 Test #402: json-schema-1-throws ............. Passed 0.54 sec; 411/411 Test #87: cepa1 ............................ Passed 1.69 sec. 100% tests passed, 0 tests failed out of 411. Label Time Summary:; adc = 73.45 sec*proc (2 tests); autotest = 4474.03 sec*proc (26 tests); cart = 23108.76 sec*proc (123 tests); cas = 53.35 sec*proc (1 test); casscf = 207.99 sec*proc (11 tests); cbs = 2868.91 sec*proc (10 tests); cc = 20475.44 sec*proc (65 tests); cdomp2 = 33.09 sec*proc (2 tests); cepa = 541.03 sec*proc (7 tests); ci = 102.84 sec*proc (8 tests); cisd = 183.38 sec*proc (7 tests); cookbook = 956.85 sec*proc (1 test); cubeprop = 21.53 sec*proc (2 tests); dcft = 4616.14 sec*proc (13 tests); df = 1880.42 sec*proc (38 tests); dfccd = 2.46 sec*proc (1 test); dfccd-grad = 4.34 sec*proc (1 test); dfccdl = 4.00 sec*proc (1 test); dfccsd = 1.88 sec*proc (1 test); dfccsd-grad = 29.42 sec*proc (1 test); dfccsd-t-grad = 22.19 sec*proc (1 test); dfccsdat = 11.93 sec*proc (1 test); dfccsdl = 2.75 sec*proc (1 test); dfccsdt = 2.37 sec*proc (1 test); dfep2 = 5.15 sec*proc (2 tests); dfmp2 = 154.34 sec*proc (11 tests); dfomp2 = 702.44 sec*proc (7 tests); dfomp2.5 = 372.78 sec*proc (4 tests); dfomp3 = 341.52 sec*proc (4 tests); dfscf = 146.26 sec*proc (1 test); dft = 1581.94 sec*proc (27 tests); docs = 1.18 sec*proc (2 tests); ecp = 64.57 sec*proc (2 tests); fci = 13.23 sec*proc (2 tests); fcidump = 3.66 sec*proc (1 test); findif = 995.58 sec*proc (5 tests); fnocc = 309.59 sec*proc (4 tests); freq = 783.53 sec*proc (6 tests); gradient = 2806.11 sec*proc (16 tests); json = 13.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1089#issuecomment-408103972:38850,test,tests,38850,https://psicode.org,https://github.com/psi4/psi4/pull/1089#issuecomment-408103972,1,['test'],['tests']
Testability,#216: mints5 ........................... Passed 0.69 sec; Start 217: mints6; 207/411 Test #213: mints2 ........................... Passed 3.30 sec; Start 218: mints8; 208/411 Test #202: fnocc4 ........................... Passed 25.48 sec; Start 219: mints-benchmark; 209/411 Test #155: dfscf-bz2 ........................ Passed 141.11 sec; Start 220: mints-helper; 210/411 Test #207: gibbs ............................ Passed 19.82 sec; Start 221: mints9; 211/411 Test #217: mints6 ........................... Passed 12.94 sec; Start 222: mints10; 212/411 Test #220: mints-helper ..................... Passed 1.41 sec; Start 223: molden1; 213/411 Test #221: mints9 ........................... Passed 2.04 sec; Start 224: molden2; 214/411 Test #222: mints10 .......................... Passed 1.66 sec; Start 225: mom; 215/411 Test #200: fnocc2 ........................... Passed 37.89 sec; Start 226: mp2-1; 216/411 Test #168: dft1 ............................. Passed 104.42 sec; Start 227: mp2-def2; 217/411 Test #218: mints8 ........................... Passed 16.12 sec; Start 228: mp2-grad1; 218/411 Test #206: ghosts ........................... Passed 32.49 sec; Start 229: mp2-grad2; 219/411 Test #225: mom .............................. Passed 5.76 sec; Start 230: mp2-module; 220/411 Test #223: molden1 .......................... Passed 7.31 sec; Start 231: mp2p5-grad1; 221/411 Test #228: mp2-grad1 ........................ Passed 4.00 sec; Start 232: mp2p5-grad2; 222/411 Test #224: molden2 .......................... Passed 7.09 sec; Start 233: mp3-grad1; 223/411 Test #229: mp2-grad2 ........................ Passed 3.96 sec; Start 234: mp3-grad2; 224/411 Test #233: mp3-grad1 ........................ Passed 4.67 sec; Start 235: mp2-property; 225/411 Test #231: mp2p5-grad1 ...................... Passed 6.26 sec; Start 236: mpn-bh; 226/411 Test #232: mp2p5-grad2 ...................... Passed 6.64 sec; Start 237: nbody-he-cluster; 227/411 Test #226: mp2-1 ............................ P,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1090#issuecomment-408925986:20181,Test,Test,20181,https://psicode.org,https://github.com/psi4/psi4/pull/1090#issuecomment-408925986,1,['Test'],['Test']
Testability,#216: mints5 ........................... Passed 1.11 sec; Start 218: mints8; 216/411 Test #217: mints6 ........................... Passed 11.95 sec; Start 219: mints-benchmark; 217/411 Test #207: gibbs ............................ Passed 26.16 sec; Start 220: mints-helper; 218/411 Test #206: ghosts ........................... Passed 33.06 sec; Start 221: mints9; 219/411 Test #220: mints-helper ..................... Passed 1.84 sec; Start 222: mints10; 220/411 Test #218: mints8 ........................... Passed 16.42 sec; Start 223: molden1; 221/411 Test #221: mints9 ........................... Passed 2.04 sec; Start 224: molden2; 222/411 Test #222: mints10 .......................... Passed 2.32 sec; Start 225: mom; 223/411 Test #225: mom .............................. Passed 3.45 sec; Start 226: mp2-1; 224/411 Test #223: molden1 .......................... Passed 4.95 sec; Start 227: mp2-def2; 225/411 Test #224: molden2 .......................... Passed 4.83 sec; Start 228: mp2-grad1; 226/411 Test #228: mp2-grad1 ........................ Passed 1.97 sec; Start 229: mp2-grad2; 227/411 Test #229: mp2-grad2 ........................ Passed 6.77 sec; Start 230: mp2-module; 228/411 Test #226: mp2-1 ............................ Passed 13.08 sec; Start 231: mp2p5-grad1; 229/411 Test #204: frac-ip-fitting .................. Passed 69.51 sec; Start 232: mp2p5-grad2; 230/411 Test #231: mp2p5-grad1 ...................... Passed 5.92 sec; Start 233: mp3-grad1; 231/411 Test #232: mp2p5-grad2 ...................... Passed 7.49 sec; Start 234: mp3-grad2; 232/411 Test #233: mp3-grad1 ........................ Passed 4.93 sec; Start 235: mp2-property; 233/411 Test #234: mp3-grad2 ........................ Passed 5.54 sec; Start 236: mpn-bh; 234/411 Test #235: mp2-property ..................... Passed 4.45 sec; Start 237: nbody-he-cluster; 235/411 Test #219: mints-benchmark .................. Passed 40.91 sec; Start 238: nbody-intermediates; 236/411 Test #236: mpn-bh ...................,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1115#issuecomment-411094637:20865,Test,Test,20865,https://psicode.org,https://github.com/psi4/psi4/pull/1115#issuecomment-411094637,1,['Test'],['Test']
Testability,#217: mints6 ........................... Passed 9.90 sec; Start 218: mints8; 223/411 Test #218: mints8 ........................... Passed 12.53 sec; Start 219: mints-benchmark; 224/411 Test #219: mints-benchmark .................. Passed 33.55 sec; Start 220: mints-helper; 225/411 Test #220: mints-helper ..................... Passed 1.48 sec; Start 221: mints9; 226/411 Test #221: mints9 ........................... Passed 1.78 sec; Start 222: mints10; 227/411 Test #222: mints10 .......................... Passed 1.24 sec; Start 223: molden1; 228/411 Test #223: molden1 .......................... Passed 1.79 sec; Start 224: molden2; 229/411 Test #224: molden2 .......................... Passed 1.44 sec; Start 225: mom; 230/411 Test #225: mom .............................. Passed 2.09 sec; Start 226: mp2-1; 231/411 Test #226: mp2-1 ............................ Passed 2.16 sec; Start 227: mp2-def2; 232/411 Test #227: mp2-def2 ......................... Passed 342.94 sec; Start 228: mp2-grad1; 233/411 Test #228: mp2-grad1 ........................ Passed 1.52 sec; Start 229: mp2-grad2; 234/411 Test #229: mp2-grad2 ........................ Passed 1.88 sec; Start 230: mp2-module; 235/411 Test #230: mp2-module ....................... Passed 35.05 sec; Start 231: mp2p5-grad1; 236/411 Test #231: mp2p5-grad1 ...................... Passed 1.53 sec; Start 232: mp2p5-grad2; 237/411 Test #232: mp2p5-grad2 ...................... Passed 1.75 sec; Start 233: mp3-grad1; 238/411 Test #233: mp3-grad1 ........................ Passed 1.47 sec; Start 234: mp3-grad2; 239/411 Test #234: mp3-grad2 ........................ Passed 1.76 sec; Start 235: mp2-property; 240/411 Test #235: mp2-property ..................... Passed 2.66 sec; Start 236: mpn-bh; 241/411 Test #236: mpn-bh ........................... Passed 3.13 sec; Start 237: nbody-he-cluster; 242/411 Test #237: nbody-he-cluster ................. Passed 25.31 sec; Start 238: nbody-intermediates; 243/411 Test #238: nbody-intermediates .......,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1073#issuecomment-406985370:21198,Test,Test,21198,https://psicode.org,https://github.com/psi4/psi4/pull/1073#issuecomment-406985370,1,['Test'],['Test']
Testability,#220: mints-helper ..................... Passed 1.24 sec; Start 221: mints9; 211/411 Test #221: mints9 ........................... Passed 2.01 sec; Start 222: mints10; 212/411 Test #168: dft1 ............................. Passed 104.93 sec; Start 223: molden1; 213/411 Test #222: mints10 .......................... Passed 2.63 sec; Start 224: molden2; 214/411 Test #207: gibbs ............................ Passed 22.11 sec; Start 225: mom; 215/411 Test #217: mints6 ........................... Passed 13.02 sec; Start 226: mp2-1; 216/411 Test #225: mom .............................. Passed 5.50 sec; Start 227: mp2-def2; 217/411 Test #218: mints8 ........................... Passed 18.43 sec; Start 228: mp2-grad1; 218/411 Test #223: molden1 .......................... Passed 11.23 sec; Start 229: mp2-grad2; 219/411 Test #206: ghosts ........................... Passed 34.53 sec; Start 230: mp2-module; 220/411 Test #224: molden2 .......................... Passed 17.32 sec; Start 231: mp2p5-grad1; 221/411 Test #228: mp2-grad1 ........................ Passed 9.84 sec; Start 232: mp2p5-grad2; 222/411 Test #229: mp2-grad2 ........................ Passed 9.84 sec; Start 233: mp3-grad1; 223/411 Test #200: fnocc2 ........................... Passed 59.94 sec; Start 234: mp3-grad2; 224/411 Test #231: mp2p5-grad1 ...................... Passed 7.83 sec; Start 235: mp2-property; 225/411 Test #233: mp3-grad1 ........................ Passed 8.32 sec; Start 236: mpn-bh; 226/411 Test #235: mp2-property ..................... Passed 4.28 sec; Start 237: nbody-he-cluster; 227/411 Test #232: mp2p5-grad2 ...................... Passed 13.18 sec; Start 238: nbody-intermediates; 228/411 Test #234: mp3-grad2 ........................ Passed 12.06 sec; Start 239: numpy-array-interface; 229/411 Test #226: mp2-1 ............................ Passed 30.19 sec; Start 240: ocepa-freq1; 230/411 Test #239: numpy-array-interface ............ Passed 0.80 sec; Start 241: ocepa-grad1; 231/411 Test #219: mints-bench,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1087#issuecomment-408854538:20526,Test,Test,20526,https://psicode.org,https://github.com/psi4/psi4/pull/1087#issuecomment-408854538,1,['Test'],['Test']
Testability,#22: cc11 ............................. Passed 49.69 sec; Start 51: cc35; 145/401 Test #372: pywrap-bfs ....................... Passed 24.73 sec; Start 264: opt2-fd; 146/401 Test #295: pywrap-alias ..................... Passed 82.94 sec; Start 20: cc1; 147/401 Test #88: cepa3 ............................ Passed 21.33 sec; Start 299: pywrap-checkrun-convcrit; 148/401 Test #78: cc8b ............................. Passed 69.32 sec; Start 148: dfomp3-grad2; 149/401 Test #55: cc39 ............................. Passed 63.25 sec; Start 87: cepa2; 150/401 Test #109: dcft4 ............................ Passed 844.58 sec; Start 49: cc33; 151/401 Test #142: dfomp2-grad1 ..................... Passed 27.95 sec; Start 65: cc49; 152/401 Test #37: cc22 ............................. Passed 36.53 sec; Start 297: pywrap-basis; 153/401 Test #80: cc9 .............................. Passed 69.66 sec; Start 363: scf-freq1; 154/401 Test #107: dcft2 ............................ Passed 15.25 sec; Start 106: dcft1; 155/401 Test #23: cc12 ............................. Passed 36.72 sec; Start 367: dft-custom-hybrid; 156/401 Test #264: opt2-fd .......................... Passed 12.62 sec; Start 331: scf4; 157/401 Test #254: omp3-2 ........................... Passed 31.04 sec; Start 288: psimrcc-fd-freq2; 158/401 Test #103: dcft-grad2 ....................... Passed 112.53 sec; Start 160: dft-grad1; 159/401 Test #87: cepa2 ............................ Passed 12.23 sec; Start 99: ci-property; 160/401 Test #363: scf-freq1 ........................ Passed 10.44 sec; Start 317: sapt-dft-api; 161/401 Test #332: scf5 ............................. Passed 44.17 sec; Start 266: opt4; 162/401 Test #367: dft-custom-hybrid ................ Passed 9.59 sec; Start 50: cc34; 163/401 Test #71: cc54 ............................. Passed 36.42 sec; Start 161: dft-grad2; 164/401 Test #297: pywrap-basis ..................... Passed 11.17 sec; Start 89: cepa1; 165/401 Test #299: pywrap-checkrun-convcrit ......... Passed 19.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1071#issuecomment-402453832:14911,Test,Test,14911,https://psicode.org,https://github.com/psi4/psi4/pull/1071#issuecomment-402453832,1,['Test'],['Test']
Testability,#230: mp2-module ....................... Passed 81.59 sec; Start 260: omp3-4; 250/411 Test #254: omp2p5-2 ......................... Passed 25.66 sec; Start 261: omp3-5; 251/411 Test #252: omp2-grad2 ....................... Passed 40.84 sec; Start 262: omp3-grad1; 252/411 Test #262: omp3-grad1 ....................... Passed 8.58 sec; Start 263: omp3-grad2; 253/411 Test #244: ocepa2 ........................... Passed 76.46 sec; Start 264: opt-lindep-change; 254/411 Test #258: omp3-2 ........................... Passed 30.69 sec; Start 265: opt1; 255/411 Test #249: omp2-4 ........................... Passed 74.10 sec; Start 266: opt1-fd; 256/411 Test #265: opt1 ............................. Passed 5.49 sec; Start 267: opt2; 257/411 Test #145: dfomp2-grad3 ..................... Passed 346.59 sec; Start 268: opt2-fd; 258/411 Test #266: opt1-fd .......................... Passed 10.04 sec; Start 269: opt3; 259/411 Test #250: omp2-5 ........................... Passed 75.48 sec; Start 270: opt4; 260/411 Test #269: opt3 ............................. Passed 7.02 sec; Start 271: opt5; 261/411 Test #268: opt2-fd .......................... Passed 12.17 sec; Start 272: opt6; 262/411 Test #264: opt-lindep-change ................ Passed 28.17 sec; Start 273: opt7; 263/411 Test #270: opt4 ............................. Passed 9.63 sec; Start 274: opt8; 264/411 Test #271: opt5 ............................. Passed 5.71 sec; Start 275: opt9; 265/411 Test #256: omp2p5-grad2 ..................... Passed 64.33 sec; Start 276: opt11; 266/411 Test #267: opt2 ............................. Passed 23.31 sec; Start 277: opt12; 267/411 Test #275: opt9 ............................. Passed 19.86 sec; Start 279: opt14; 268/411 Test #272: opt6 ............................. Passed 26.36 sec; Start 280: opt-irc-1; 269/411 Test #261: omp3-5 ........................... Passed 72.32 sec; Start 281: opt-irc-2; 270/411 Test #263: omp3-grad2 ....................... Passed 54.66 sec; Start 282: opt-irc-3; 271/41,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1090#issuecomment-408925986:24200,Test,Test,24200,https://psicode.org,https://github.com/psi4/psi4/pull/1090#issuecomment-408925986,1,['Test'],['Test']
Testability,#236: mpn-bh ........................... Passed 3.71 sec; Start 240: ocepa-freq1; 230/411 Test #239: numpy-array-interface ............ Passed 0.69 sec; Start 241: ocepa-grad1; 231/411 Test #145: dfomp2-grad3 ..................... Passed 155.00 sec; Start 242: ocepa-grad2; 232/411 Test #206: ghosts ........................... Passed 33.52 sec; Start 243: ocepa1; 233/411 Test #241: ocepa-grad1 ...................... Passed 3.37 sec; Start 244: ocepa2; 234/411 Test #243: ocepa1 ........................... Passed 2.50 sec; Start 245: ocepa3; 235/411 Test #155: dfscf-bz2 ........................ Passed 142.25 sec; Start 246: omp2-1; 236/411 Test #246: omp2-1 ........................... Passed 2.41 sec; Start 247: omp2-2; 237/411 Test #238: nbody-intermediates .............. Passed 14.13 sec; Start 248: omp2-3; 238/411 Test #247: omp2-2 ........................... Passed 10.28 sec; Start 249: omp2-4; 239/411 Test #219: mints-benchmark .................. Passed 43.79 sec; Start 250: omp2-5; 240/411 Test #248: omp2-3 ........................... Passed 13.55 sec; Start 251: omp2-grad1; 241/411 Test #245: ocepa3 ........................... Passed 24.74 sec; Start 252: omp2-grad2; 242/411 Test #251: omp2-grad1 ....................... Passed 5.30 sec; Start 253: omp2p5-1; 243/411 Test #204: frac-ip-fitting .................. Passed 67.86 sec; Start 254: omp2p5-2; 244/411 Test #242: ocepa-grad2 ...................... Passed 32.93 sec; Start 255: omp2p5-grad1; 245/411 Test #253: omp2p5-1 ......................... Passed 3.18 sec; Start 256: omp2p5-grad2; 246/411 Test #237: nbody-he-cluster ................. Passed 38.32 sec; Start 257: omp3-1; 247/411 Test #255: omp2p5-grad1 ..................... Passed 3.52 sec; Start 258: omp3-2; 248/411 Test #257: omp3-1 ........................... Passed 2.51 sec; Start 259: omp3-3; 249/411 Test #254: omp2p5-2 ......................... Passed 12.32 sec; Start 260: omp3-4; 250/411 Test #103: dcft-grad1 ....................... Passed 316.29 se,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1092#issuecomment-409185967:22292,Test,Test,22292,https://psicode.org,https://github.com/psi4/psi4/pull/1092#issuecomment-409185967,1,['Test'],['Test']
Testability,#237: nbody-he-cluster ................. Passed 35.76 sec; Start 374: dft-custom-gga; 94/411 Test #66: cc49 ............................. Passed 30.67 sec; Start 68: cc50; 95/411 Test #244: ocepa2 ........................... Passed 36.96 sec; Start 273: opt7; 96/411 Test #374: dft-custom-gga ................... Passed 28.59 sec; Start 59: cc42; 97/411 Test #276: opt11 ............................ Passed 43.58 sec; Start 156: dft-b2plyp; 98/411 Test #68: cc50 ............................. Passed 32.32 sec; Start 1: adc1; 99/411 Test #11: cbs-delta-energy ................. Passed 58.90 sec; Start 264: opt-lindep-change; 100/411 Test #59: cc42 ............................. Passed 20.74 sec; Start 173: dft-omega; 101/411 Test #359: tu6-cp-ne2 ....................... Passed 74.91 sec; Start 375: pywrap-bfs; 102/411 Test #273: opt7 ............................. Passed 36.48 sec; Start 149: dfomp3-grad2; 103/411 Test #1: adc1 ............................. Passed 24.56 sec; Start 55: cc39; 104/411 Test #156: dft-b2plyp ....................... Passed 25.95 sec; Start 34: cc19; 105/411 Test #264: opt-lindep-change ................ Passed 25.13 sec; Start 65: cc48; 106/411 Test #173: dft-omega ........................ Passed 23.97 sec; Start 379: cc-module; 107/411 Test #55: cc39 ............................. Passed 13.65 sec; Start 299: pywrap-alias; 108/411 Test #375: pywrap-bfs ....................... Passed 25.71 sec; Start 27: cc13c; 109/411 Test #149: dfomp3-grad2 ..................... Passed 26.64 sec; Start 326: scf-ecp; 110/411 Test #178: fsapt1 ........................... Passed 2140.46 sec; Start 104: dcft-grad2; 111/411 Test #34: cc19 ............................. Passed 36.87 sec; Start 91: cepa-module; 112/411 Test #65: cc48 ............................. Passed 34.57 sec; Start 358: tu5-sapt; 113/411 Test #326: scf-ecp .......................... Passed 27.04 sec; Start 54: cc38; 114/411 Test #358: tu5-sapt ......................... Passed 21.52 sec; Start 274: opt,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1078#issuecomment-408900195:9780,Test,Test,9780,https://psicode.org,https://github.com/psi4/psi4/pull/1078#issuecomment-408900195,1,['Test'],['Test']
Testability,#237: nbody-he-cluster ................. Passed 55.34 sec; Start 243: ocepa1; 241/411 Test #243: ocepa1 ........................... Passed 11.48 sec; Start 244: ocepa2; 242/411 Test #230: mp2-module ....................... Passed 96.52 sec; Start 245: ocepa3; 243/411 Test #162: dft-grad-lr3 ..................... Passed 434.63 sec; Start 246: omp2-1; 244/411 Test #110: dcft4 ............................ Passed 1010.33 sec; Start 247: omp2-2; 245/411 Test #246: omp2-1 ........................... Passed 11.08 sec; Start 248: omp2-3; 246/411 Test #247: omp2-2 ........................... Passed 30.77 sec; Start 249: omp2-4; 247/411 Test #248: omp2-3 ........................... Passed 40.15 sec; Start 250: omp2-5; 248/411 Test #242: ocepa-grad2 ...................... Passed 96.09 sec; Start 251: omp2-grad1; 249/411 Test #245: ocepa3 ........................... Passed 61.30 sec; Start 252: omp2-grad2; 250/411 Test #251: omp2-grad1 ....................... Passed 6.31 sec; Start 253: omp2p5-1; 251/411 Test #253: omp2p5-1 ......................... Passed 8.30 sec; Start 254: omp2p5-2; 252/411 Test #145: dfomp2-grad3 ..................... Passed 779.29 sec; Start 255: omp2p5-grad1; 253/411 Test #255: omp2p5-grad1 ..................... Passed 9.64 sec; Start 256: omp2p5-grad2; 254/411 Test #244: ocepa2 ........................... Passed 93.86 sec; Start 257: omp3-1; 255/411 Test #257: omp3-1 ........................... Passed 4.62 sec; Start 258: omp3-2; 256/411 Test #254: omp2p5-2 ......................... Passed 20.69 sec; Start 259: omp3-3; 257/411 Test #252: omp2-grad2 ....................... Passed 34.44 sec; Start 260: omp3-4; 258/411 Test #258: omp3-2 ........................... Passed 23.68 sec; Start 261: omp3-5; 259/411 Test #249: omp2-4 ........................... Passed 75.98 sec; Start 262: omp3-grad1; 260/411 Test #250: omp2-5 ........................... Passed 65.86 sec; Start 263: omp3-grad2; 261/411 Test #262: omp3-grad1 ....................... Passed 4.07 sec;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1067#issuecomment-409148828:23209,Test,Test,23209,https://psicode.org,https://github.com/psi4/psi4/pull/1067#issuecomment-409148828,1,['Test'],['Test']
Testability,#238: ocepa-grad2 ...................... Passed 93.22 sec; Start 193: freq-isotope1; 170/401 Test #160: dft-grad1 ........................ Passed 10.01 sec; Start 131: dfmp2-4; 171/401 Test #161: dft-grad2 ........................ Passed 9.38 sec; Start 9: castup2; 172/401 Test #317: sapt-dft-api ..................... Passed 10.34 sec; Start 355: x2c1; 173/401 Test #155: dft-b2plyp ....................... Passed 9.72 sec; Start 134: dfmp2-grad2; 174/401 Test #266: opt4 ............................. Passed 10.94 sec; Start 127: dfccsdat1; 175/401 Test #215: mints-benchmark .................. Passed 10.11 sec; Start 281: props2; 176/401 Test #43: cc28 ............................. Passed 87.39 sec; Start 262: opt1-fd; 177/401 Test #10: castup3 .......................... Passed 16.89 sec; Start 337: soscf-ref; 178/401 Test #51: cc35 ............................. Passed 39.48 sec; Start 196: fnocc2; 179/401 Test #298: pywrap-cbs1 ...................... Passed 233.12 sec; Start 52: cc36; 180/401 Test #131: dfmp2-4 .......................... Passed 12.91 sec; Start 165: dft-vv10; 181/401 Test #281: props2 ........................... Passed 7.95 sec; Start 188: fd-freq-energy; 182/401 Test #49: cc33 ............................. Passed 34.26 sec; Start 62: cc45; 183/401 Test #193: freq-isotope1 .................... Passed 19.32 sec; Start 53: cc37; 184/401 Test #134: dfmp2-grad2 ...................... Passed 12.50 sec; Start 56: cc4; 185/401 Test #9: castup2 .......................... Passed 13.85 sec; Start 364: dft-jk; 186/401 Test #89: cepa1 ............................ Passed 26.08 sec; Start 203: gibbs; 187/401 Test #50: cc34 ............................. Passed 26.89 sec; Start 76: cc8; 188/401 Test #262: opt1-fd .......................... Passed 12.30 sec; Start 91: ci-multi; 189/401 Test #102: dcft-grad1 ....................... Passed 884.24 sec; Start 214: mints8; 190/401 Test #337: soscf-ref ........................ Passed 10.01 sec; Start 83: cdomp2-2; 191/401 T,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1071#issuecomment-402453832:17242,Test,Test,17242,https://psicode.org,https://github.com/psi4/psi4/pull/1071#issuecomment-402453832,1,['Test'],['Test']
Testability,#23: cc11 ............................. Passed 53.53 sec; Start 129: dfccsdat1; 172/412 Test #63: cc45 ............................. Passed 44.70 sec; Start 347: sapt-dft1; 173/412 Test #16: cbs-xtpl-gradient ................ Passed 35.66 sec; Start 278: opt12; 174/412 Test #50: cc33 ............................. Passed 31.33 sec; Start 164: dft-freq; 175/412 Test #147: dfomp3-1 ......................... Passed 28.09 sec; Start 203: fnocc4; 176/412 Test #174: dft-omega ........................ Passed 29.62 sec; Start 273: opt6; 177/412 Test #167: dft-psivar ....................... Passed 25.38 sec; Start 359: tu5-sapt; 178/412 Test #376: pywrap-bfs ....................... Passed 25.12 sec; Start 190: fci-tdm-2; 179/412 Test #173: dft3 ............................. Passed 24.11 sec; Start 178: extern2; 180/412 Test #268: opt2 ............................. Passed 23.85 sec; Start 7: casscf-sp; 181/412 Test #304: pywrap-checkrun-convcrit ......... Passed 21.48 sec; Start 323: sapt-dft-lrc; 182/412 Test #129: dfccsdat1 ........................ Passed 18.08 sec; Start 54: cc37; 183/412 Test #160: dft-b2plyp ....................... Passed 25.40 sec; Start 259: omp3-2; 184/412 Test #314: rasscf-sp ........................ Passed 22.75 sec; Start 208: gibbs; 185/412 Test #278: opt12 ............................ Passed 24.35 sec; Start 38: cc22; 186/412 Test #164: dft-freq ......................... Passed 24.88 sec; Start 291: psimrcc-ccsd_t-4; 187/412 Test #347: sapt-dft1 ........................ Passed 25.41 sec; Start 22: cc10; 188/412 Test #359: tu5-sapt ......................... Passed 22.33 sec; Start 151: dfomp2p5-1; 189/412 Test #273: opt6 ............................. Passed 24.37 sec; Start 316: sapt1; 190/412 Test #203: fnocc4 ........................... Passed 25.60 sec; Start 249: omp2-3; 191/412 Test #178: extern2 .......................... Passed 24.14 sec; Start 24: cc12; 192/412 Test #190: fci-tdm-2 ........................ Passed 24.38 sec; Start 239: nbody-,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1220#issuecomment-419126068:17123,Test,Test,17123,https://psicode.org,https://github.com/psi4/psi4/pull/1220#issuecomment-419126068,1,['Test'],['Test']
Testability,#241: ocepa-grad1 ...................... Passed 2.76 sec; Start 83: cdomp2-1; 255/404 Test #253: omp2p5-1 ......................... Passed 1.72 sec; Start 123: dfccsd1; 256/404 Test #255: omp2p5-grad1 ..................... Passed 2.83 sec; Start 10: castup3; 257/404 Test #226: mp2-1 ............................ Passed 3.95 sec; Start 199: fnocc1; 258/404 Test #83: cdomp2-1 ......................... Passed 2.31 sec; Start 243: ocepa1; 259/404 Test #369: dft-jk ........................... Passed 5.86 sec; Start 15: cbs-xtpl-freq; 260/404 Test #86: cepa0-grad2 ...................... Passed 3.02 sec; Start 218: mints8; 261/404 Test #123: dfccsd1 .......................... Passed 2.54 sec; Start 198: freq-isotope2; 262/404 Test #295: psithon1 ......................... Passed 4.02 sec; Start 385: psi4numpy-fci; 263/404 Test #243: ocepa1 ........................... Passed 2.07 sec; Start 139: dfomp2-1; 264/404 Test #285: props2 ........................... Passed 6.83 sec; Start 158: dft-ghost; 265/404 Test #199: fnocc1 ........................... Passed 3.03 sec; Start 388: python-curve; 266/404 Test #10: castup3 .......................... Passed 4.38 sec; Start 108: dcft2; 267/404 Test #198: freq-isotope2 .................... Passed 3.71 sec; Start 393: python-3-index-transforms; 268/404 Test #139: dfomp2-1 ......................... Passed 2.72 sec; Start 137: dfmp2-grad4; 269/404 Test #385: psi4numpy-fci .................... Passed 3.33 sec; Start 98: cisd-sp; 270/404 Test #388: python-curve ..................... Passed 2.61 sec; Start 329: scf-guess-read2; 271/404 Test #108: dcft2 ............................ Passed 1.50 sec; Start 269: opt3; 272/404 Test #15: cbs-xtpl-freq .................... Passed 5.56 sec; Start 265: opt1; 273/404 Test #218: mints8 ........................... Passed 5.50 sec; Start 6: ao-casscf-sp; 274/404 Test #137: dfmp2-grad4 ...................... Passed 1.84 sec; Start 171: dft2; 275/404 Test #98: cisd-sp .......................... Passed 2.78 ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-404174338:24519,Test,Test,24519,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-404174338,1,['Test'],['Test']
Testability,#242: ocepa-grad2 ...................... Passed 93.93 sec; Start 260: omp3-4; 250/411 Test #257: omp3-1 ........................... Passed 2.99 sec; Start 261: omp3-5; 251/411 Test #249: omp2-4 ........................... Passed 54.28 sec; Start 262: omp3-grad1; 252/411 Test #244: ocepa2 ........................... Passed 81.68 sec; Start 263: omp3-grad2; 253/411 Test #230: mp2-module ....................... Passed 130.73 sec; Start 264: opt-lindep-change; 254/411 Test #250: omp2-5 ........................... Passed 45.15 sec; Start 265: opt1; 255/411 Test #262: omp3-grad1 ....................... Passed 17.99 sec; Start 266: opt1-fd; 256/411 Test #265: opt1 ............................. Passed 9.83 sec; Start 267: opt2; 257/411 Test #258: omp3-2 ........................... Passed 41.34 sec; Start 268: opt2-fd; 258/411 Test #264: opt-lindep-change ................ Passed 31.39 sec; Start 269: opt3; 259/411 Test #266: opt1-fd .......................... Passed 29.29 sec; Start 270: opt4; 260/411 Test #269: opt3 ............................. Passed 7.24 sec; Start 271: opt5; 261/411 Test #268: opt2-fd .......................... Passed 14.74 sec; Start 272: opt6; 262/411 Test #267: opt2 ............................. Passed 28.23 sec; Start 273: opt7; 263/411 Test #271: opt5 ............................. Passed 6.29 sec; Start 274: opt8; 264/411 Test #270: opt4 ............................. Passed 11.04 sec; Start 275: opt9; 265/411 Test #256: omp2p5-grad2 ..................... Passed 82.06 sec; Start 276: opt11; 266/411 Test #275: opt9 ............................. Passed 20.41 sec; Start 277: opt12; 267/411 Test #272: opt6 ............................. Passed 30.42 sec; Start 279: opt14; 268/411 Test #274: opt8 ............................. Passed 41.20 sec; Start 280: opt-irc-1; 269/411 Test #273: opt7 ............................. Passed 54.36 sec; Start 281: opt-irc-2; 270/411 Test #277: opt12 ............................ Passed 26.21 sec; Start 282: opt-irc-3; 271/4,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1087#issuecomment-408854538:24172,Test,Test,24172,https://psicode.org,https://github.com/psi4/psi4/pull/1087#issuecomment-408854538,1,['Test'],['Test']
Testability,#243: omp2-2 ........................... Passed 20.74 sec; Start 336: soscf-large; 269/401 Test #124: dfccsd-grad1 ..................... Passed 43.20 sec; Start 138: dfomp2-1; 270/401 Test #76: cc8 .............................. Passed 67.25 sec; Start 183: fci-h2o-fzcv; 271/401 Test #221: mom .............................. Passed 3.72 sec; Start 327: scf1; 272/401 Test #15: cbs-xtpl-freq .................... Passed 8.46 sec; Start 217: mints9; 273/401 Test #129: dfmp2-2 .......................... Passed 2.57 sec; Start 229: mp3-grad1; 274/401 Test #82: cdomp2-1 ......................... Passed 9.33 sec; Start 153: dfrasscf-sp; 275/401 Test #267: opt5 ............................. Passed 3.79 sec; Start 239: ocepa1; 276/401 Test #228: mp2p5-grad2 ...................... Passed 5.14 sec; Start 120: dfccdl1; 277/401 Test #224: mp2-grad1 ........................ Passed 3.56 sec; Start 230: mp3-grad2; 278/401 Test #217: mints9 ........................... Passed 2.05 sec; Start 199: frac; 279/401 Test #250: omp2p5-2 ......................... Passed 19.95 sec; Start 220: molden2; 280/401 Test #183: fci-h2o-fzcv ..................... Passed 3.11 sec; Start 377: psi4numpy-cphf; 281/401 Test #180: fci-dipole ....................... Passed 5.14 sec; Start 4: casscf-semi; 282/401 Test #176: fsapt-terms ...................... Passed 5.54 sec; Start 232: mpn-bh; 283/401 Test #225: mp2-grad2 ........................ Passed 6.04 sec; Start 242: omp2-1; 284/401 Test #126: dfccsdt1 ......................... Passed 10.41 sec; Start 279: opt-freeze-coords; 285/401 Test #336: soscf-large ...................... Passed 6.56 sec; Start 95: cisd-h2o-clpse; 286/401 Test #286: psimrcc-ccsd_t-4 ................. Passed 9.76 sec; Start 6: ao-casscf-sp; 287/401 Test #377: psi4numpy-cphf ................... Passed 2.58 sec; Start 350: tu3-h2o-opt; 288/401 Test #84: cepa0-grad1 ...................... Passed 7.54 sec; Start 261: opt1; 289/401 Test #327: scf1 ............................. Passed 5.9,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1071#issuecomment-402453832:26447,Test,Test,26447,https://psicode.org,https://github.com/psi4/psi4/pull/1071#issuecomment-402453832,1,['Test'],['Test']
Testability,#247: omp2-1 ........................... Passed 4.92 sec; Start 377: pywrap-align; 301/412 Test #237: mpn-bh ........................... Passed 5.38 sec; Start 232: mp2p5-grad1; 302/412 Test #142: dfomp2-3 ......................... Passed 8.00 sec; Start 180: fsapt2; 303/412 Test #120: dfcasscf-sp ...................... Passed 3.66 sec; Start 285: props1; 304/412 Test #252: omp2-grad1 ....................... Passed 6.43 sec; Start 311: rasci-c2-active; 305/412 Test #230: mp2-grad2 ........................ Passed 3.93 sec; Start 340: scf-property; 306/412 Test #284: opt-freeze-coords ................ Passed 6.63 sec; Start 332: scf1; 307/412 Test #172: dft2 ............................. Passed 6.11 sec; Start 204: frac; 308/412 Test #94: cisd-h2o+-0 ...................... Passed 5.56 sec; Start 122: dfccdl1; 309/412 Test #371: scf-coverage ..................... Passed 9.20 sec; Start 272: opt5; 310/412 Test #229: mp2-grad1 ........................ Passed 4.37 sec; Start 235: mp3-grad2; 311/412 Test #95: cisd-h2o+-1 ...................... Passed 5.16 sec; Start 226: mom; 312/412 Test #121: dfccd1 ........................... Passed 5.30 sec; Start 356: tu3-h2o-opt; 313/412 Test #232: mp2p5-grad1 ...................... Passed 5.44 sec; Start 378: pywrap-align-chiral; 314/412 Test #180: fsapt2 ........................... Passed 5.69 sec; Start 266: opt1; 315/412 Test #377: pywrap-align ..................... Passed 6.95 sec; Start 344: stability1; 316/412 Test #332: scf1 ............................. Passed 5.49 sec; Start 400: json-schema-1-energy; 317/412 Test #204: frac ............................. Passed 5.38 sec; Start 295: psimrcc-sp1; 318/412 Test #285: props1 ........................... Passed 6.21 sec; Start 192: fcidump; 319/412 Test #340: scf-property ..................... Passed 6.13 sec; Start 345: dfep2-1; 320/412 Test #122: dfccdl1 .......................... Passed 4.43 sec; Start 398: json-v11-energy; 321/412 Test #272: opt5 ............................. P,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1220#issuecomment-419126068:29150,Test,Test,29150,https://psicode.org,https://github.com/psi4/psi4/pull/1220#issuecomment-419126068,1,['Test'],['Test']
Testability,#250: omp2-5 ........................... Passed 78.34 sec; Start 260: omp3-4; 258/411 Test #258: omp3-2 ........................... Passed 26.24 sec; Start 261: omp3-5; 259/411 Test #249: omp2-4 ........................... Passed 94.89 sec; Start 262: omp3-grad1; 260/411 Test #145: dfomp2-grad3 ..................... Passed 811.31 sec; Start 263: omp3-grad2; 261/411 Test #262: omp3-grad1 ....................... Passed 7.04 sec; Start 264: opt-lindep-change; 262/411 Test #256: omp2p5-grad2 ..................... Passed 75.82 sec; Start 265: opt1; 263/411 Test #264: opt-lindep-change ................ Passed 28.65 sec; Start 266: opt1-fd; 264/411 Test #265: opt1 ............................. Passed 5.93 sec; Start 267: opt2; 265/411 Test #266: opt1-fd .......................... Passed 18.15 sec; Start 268: opt2-fd; 266/411 Test #267: opt2 ............................. Passed 26.81 sec; Start 269: opt3; 267/411 Test #268: opt2-fd .......................... Passed 11.29 sec; Start 270: opt4; 268/411 Test #269: opt3 ............................. Passed 4.46 sec; Start 271: opt5; 269/411 Test #271: opt5 ............................. Passed 4.61 sec; Start 272: opt6; 270/411 Test #270: opt4 ............................. Passed 9.94 sec; Start 273: opt7; 271/411 Test #259: omp3-3 ........................... Passed 118.62 sec; Start 274: opt8; 272/411 Test #263: omp3-grad2 ....................... Passed 93.89 sec; Start 275: opt9; 273/411 Test #260: omp3-4 ........................... Passed 116.13 sec; Start 276: opt11; 274/411 Test #261: omp3-5 ........................... Passed 113.89 sec; Start 277: opt12; 275/411 Test #272: opt6 ............................. Passed 30.11 sec; Start 279: opt14; 276/411 Test #275: opt9 ............................. Passed 19.75 sec; Start 280: opt-irc-1; 277/411 Test #274: opt8 ............................. Passed 37.35 sec; Start 281: opt-irc-2; 278/411 Test #277: opt12 ............................ Passed 24.58 sec; Start 282: opt-irc-3; 279,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1091#issuecomment-409148219:24776,Test,Test,24776,https://psicode.org,https://github.com/psi4/psi4/pull/1091#issuecomment-409148219,1,['Test'],['Test']
Testability,#251: omp2p5-grad1 ..................... Passed 3.22 sec; Start 255: omp3-3; 311/401 Test #240: ocepa2 ........................... Passed 33.21 sec; Start 256: omp3-4; 312/401 Test #248: omp2-grad2 ....................... Passed 19.63 sec; Start 257: omp3-5; 313/401 Test #233: nbody-he-cluster ................. Passed 37.93 sec; Start 258: omp3-grad1; 314/401 Test #254: omp3-2 ........................... Passed 11.27 sec; Start 259: omp3-grad2; 315/401 Test #258: omp3-grad1 ....................... Passed 3.61 sec; Start 260: opt-lindep-change; 316/401 Test #245: omp2-4 ........................... Passed 31.36 sec; Start 262: opt1-fd; 317/401 Test #164: dft1 ............................. Passed 93.19 sec; Start 263: opt2; 318/401 Test #246: omp2-5 ........................... Passed 34.59 sec; Start 264: opt2-fd; 319/401 Test #252: omp2p5-grad2 ..................... Passed 23.25 sec; Start 265: opt3; 320/401 Test #262: opt1-fd .......................... Passed 7.97 sec; Start 266: opt4; 321/401 Test #265: opt3 ............................. Passed 5.40 sec; Start 267: opt5; 322/401 Test #260: opt-lindep-change ................ Passed 12.63 sec; Start 268: opt6; 323/401 Test #267: opt5 ............................. Passed 2.46 sec; Start 269: opt7; 324/401 Test #264: opt2-fd .......................... Passed 10.98 sec; Start 270: opt8; 325/401 Test #266: opt4 ............................. Passed 9.17 sec; Start 271: opt9; 326/401 Test #263: opt2 ............................. Passed 19.83 sec; Start 272: opt11; 327/401 Test #259: omp3-grad2 ....................... Passed 28.34 sec; Start 273: opt12; 328/401 Test #255: omp3-3 ........................... Passed 39.85 sec; Start 275: opt14; 329/401 Test #256: omp3-4 ........................... Passed 34.77 sec; Start 276: opt-irc-1; 330/401 Test #268: opt6 ............................. Passed 15.72 sec; Start 277: opt-irc-2; 331/401 Test #257: omp3-5 ........................... Passed 36.60 sec; Start 278: opt-irc-3; 332/40,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-402413637:29988,Test,Test,29988,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-402413637,1,['Test'],['Test']
Testability,#252: omp2-grad2 ....................... Passed 34.44 sec; Start 260: omp3-4; 258/411 Test #258: omp3-2 ........................... Passed 23.68 sec; Start 261: omp3-5; 259/411 Test #249: omp2-4 ........................... Passed 75.98 sec; Start 262: omp3-grad1; 260/411 Test #250: omp2-5 ........................... Passed 65.86 sec; Start 263: omp3-grad2; 261/411 Test #262: omp3-grad1 ....................... Passed 4.07 sec; Start 264: opt-lindep-change; 262/411 Test #256: omp2p5-grad2 ..................... Passed 53.55 sec; Start 265: opt1; 263/411 Test #265: opt1 ............................. Passed 5.58 sec; Start 266: opt1-fd; 264/411 Test #264: opt-lindep-change ................ Passed 26.88 sec; Start 267: opt2; 265/411 Test #266: opt1-fd .......................... Passed 11.98 sec; Start 268: opt2-fd; 266/411 Test #268: opt2-fd .......................... Passed 14.60 sec; Start 269: opt3; 267/411 Test #267: opt2 ............................. Passed 24.64 sec; Start 270: opt4; 268/411 Test #259: omp3-3 ........................... Passed 81.47 sec; Start 271: opt5; 269/411 Test #269: opt3 ............................. Passed 5.14 sec; Start 272: opt6; 270/411 Test #271: opt5 ............................. Passed 2.80 sec; Start 273: opt7; 271/411 Test #260: omp3-4 ........................... Passed 82.75 sec; Start 274: opt8; 272/411 Test #270: opt4 ............................. Passed 8.49 sec; Start 275: opt9; 273/411 Test #263: omp3-grad2 ....................... Passed 63.99 sec; Start 276: opt11; 274/411 Test #261: omp3-5 ........................... Passed 81.80 sec; Start 277: opt12; 275/411 Test #272: opt6 ............................. Passed 27.35 sec; Start 279: opt14; 276/411 Test #275: opt9 ............................. Passed 20.61 sec; Start 280: opt-irc-1; 277/411 Test #277: opt12 ............................ Passed 22.89 sec; Start 281: opt-irc-2; 278/411 Test #274: opt8 ............................. Passed 39.25 sec; Start 282: opt-irc-3; 279/411,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1067#issuecomment-409148828:24779,Test,Test,24779,https://psicode.org,https://github.com/psi4/psi4/pull/1067#issuecomment-409148828,1,['Test'],['Test']
Testability,#256: omp2p5-2 ......................... Passed 5.42 sec; Start 161: dft-b2plyp; 180/413 Test #274: opt6 ............................. Passed 17.10 sec; Start 165: dft-freq; 181/413 Test #201: fnocc1 ........................... Passed 3.46 sec; Start 209: gibbs; 182/413 Test #208: ghosts ........................... Passed 32.56 sec; Start 260: omp3-2; 183/413 Test #266: opt-lindep-change ................ Passed 25.92 sec; Start 174: dft3; 184/413 Test #328: scf-ecp .......................... Passed 25.25 sec; Start 348: sapt-dft1; 185/413 Test #344: soscf-dft ........................ Passed 31.56 sec; Start 168: dft-psivar; 186/413 Test #179: extern2 .......................... Passed 13.36 sec; Start 250: omp2-3; 187/413 Test #269: opt2 ............................. Passed 17.29 sec; Start 203: fnocc3; 188/413 Test #260: omp3-2 ........................... Passed 5.66 sec; Start 191: fci-tdm-2; 189/413 Test #279: opt12 ............................ Passed 16.44 sec; Start 140: dfmp2-grad5; 190/413 Test #203: fnocc3 ........................... Passed 3.59 sec; Start 360: tu5-sapt; 191/413 Test #250: omp2-3 ........................... Passed 6.25 sec; Start 305: pywrap-checkrun-convcrit; 192/413 Test #175: dft-omega ........................ Passed 24.46 sec; Start 324: sapt-dft-lrc; 193/413 Test #209: gibbs ............................ Passed 13.52 sec; Start 249: omp2-2; 194/413 Test #249: omp2-2 ........................... Passed 5.39 sec; Start 240: nbody-intermediates; 195/413 Test #165: dft-freq ......................... Passed 20.43 sec; Start 107: dcft-grad3; 196/413 Test #1: adc1 ............................. Passed 23.48 sec; Start 277: opt9; 197/413 Test #377: pywrap-bfs ....................... Passed 26.50 sec; Start 292: psimrcc-ccsd_t-4; 198/413 Test #174: dft3 ............................. Passed 19.83 sec; Start 7: casscf-sp; 199/413 Test #140: dfmp2-grad5 ...................... Passed 14.49 sec; Start 178: extern1; 200/413 Test #161: dft-b2plyp ..........,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1264#issuecomment-425525678:17775,Test,Test,17775,https://psicode.org,https://github.com/psi4/psi4/pull/1264#issuecomment-425525678,1,['Test'],['Test']
Testability,#258: omp3-1 ........................... Passed 4.81 sec; Start 260: omp3-3; 250/412 Test #255: omp2p5-2 ......................... Passed 18.39 sec; Start 261: omp3-4; 251/412 Test #253: omp2-grad2 ....................... Passed 31.07 sec; Start 262: omp3-5; 252/412 Test #245: ocepa2 ........................... Passed 63.94 sec; Start 263: omp3-grad1; 253/412 Test #259: omp3-2 ........................... Passed 21.31 sec; Start 264: omp3-grad2; 254/412 Test #263: omp3-grad1 ....................... Passed 6.60 sec; Start 265: opt-lindep-change; 255/412 Test #251: omp2-5 ........................... Passed 63.46 sec; Start 266: opt1; 256/412 Test #266: opt1 ............................. Passed 5.06 sec; Start 267: opt1-fd; 257/412 Test #250: omp2-4 ........................... Passed 73.74 sec; Start 268: opt2; 258/412 Test #265: opt-lindep-change ................ Passed 29.03 sec; Start 269: opt2-fd; 259/412 Test #257: omp2p5-grad2 ..................... Passed 55.95 sec; Start 270: opt3; 260/412 Test #270: opt3 ............................. Passed 6.31 sec; Start 271: opt4; 261/412 Test #267: opt1-fd .......................... Passed 12.63 sec; Start 272: opt5; 262/412 Test #272: opt5 ............................. Passed 4.42 sec; Start 273: opt6; 263/412 Test #269: opt2-fd .......................... Passed 12.16 sec; Start 274: opt7; 264/412 Test #271: opt4 ............................. Passed 10.71 sec; Start 275: opt8; 265/412 Test #268: opt2 ............................. Passed 25.24 sec; Start 276: opt9; 266/412 Test #261: omp3-4 ........................... Passed 76.60 sec; Start 277: opt11; 267/412 Test #273: opt6 ............................. Passed 23.02 sec; Start 278: opt12; 268/412 Test #264: omp3-grad2 ....................... Passed 72.44 sec; Start 280: opt14; 269/412 Test #146: dfomp2-grad3 ..................... Passed 392.11 sec; Start 281: opt-irc-1; 270/412 Test #260: omp3-3 ........................... Passed 89.67 sec; Start 282: opt-irc-2; 271/412 T,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1219#issuecomment-419060031:24185,Test,Test,24185,https://psicode.org,https://github.com/psi4/psi4/pull/1219#issuecomment-419060031,1,['Test'],['Test']
Testability,#259: mcscf1 ........................... Passed 2.04 sec; Start 262: mints1; 78/185 Test #262: mints1 ........................... Passed 1.93 sec; Start 263: mints2; 79/185 Test #263: mints2 ........................... Passed 3.59 sec; Start 272: mints10; 80/185 Test #272: mints10 .......................... Passed 2.30 sec; Start 274: molden1; 81/185 Test #274: molden1 .......................... Passed 3.07 sec; Start 275: molden2; 82/185 Test #275: molden2 .......................... Passed 2.82 sec; Start 284: mp2p5-grad1; 83/185 Test #284: mp2p5-grad1 ...................... Passed 2.74 sec; Start 288: mp2-property; 84/185 Test #288: mp2-property ..................... Passed 4.86 sec; Start 289: mpn-bh; 85/185 Test #289: mpn-bh ........................... Passed 3.94 sec; Start 302: numpy-array-interface; 86/185 Test #302: numpy-array-interface ............ Passed 1.88 sec; Start 305: olccd-grad2; 87/185 Test #305: olccd-grad2 ...................... Passed 8.44 sec; Start 306: olccd1; 88/185 Test #306: olccd1 ........................... Passed 3.32 sec; Start 310: omp2-2; 89/185 Test #310: omp2-2 ........................... Passed 6.22 sec; Start 314: omp2-grad1; 90/185 Test #314: omp2-grad1 ....................... Passed 3.07 sec; Start 317: omp2p5-2; 91/185 Test #317: omp2p5-2 ......................... Passed 6.67 sec; Start 320: omp3-1; 92/185 Test #320: omp3-1 ........................... Passed 3.05 sec; Start 328: opt1; 93/185 Test #328: opt1 ............................. Passed 6.47 sec; Start 348: opt-freeze-coords; 94/185 Test #348: opt-freeze-coords ................ Passed 6.55 sec; Start 351: phi-ao; 95/185 Test #351: phi-ao ........................... Passed 21.33 sec; Start 355: props4; 96/185 Test #355: props4 ........................... Passed 3.14 sec; Start 356: psimrcc-ccsd_t-1; 97/185 Test #356: psimrcc-ccsd_t-1 ................. Passed 3.41 sec; Start 357: psimrcc-ccsd_t-2; 98/185 Test #357: psimrcc-ccsd_t-2 ................. Passed 2.43 sec; Star,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3223#issuecomment-2373056930:8140,Test,Test,8140,https://psicode.org,https://github.com/psi4/psi4/issues/3223#issuecomment-2373056930,1,['Test'],['Test']
Testability,#25: cc13a ............................ Passed 533.98 sec; Start 292: psimrcc-fd-freq2; 56/411 Test #149: dfomp3-grad2 ..................... Passed 123.25 sec; Start 69: cc51; 57/411 Test #26: cc13b ............................ Passed 128.87 sec; Start 75: cc6; 58/411 Test #30: cc15 ............................. Passed 109.80 sec; Start 386: cookbook-rohf-orb-rot; 59/411 Test #167: dft-b3lyp ........................ Passed 66.58 sec; Start 28: cc13d; 60/411 Test #299: pywrap-alias ..................... Passed 70.59 sec; Start 242: ocepa-grad2; 61/411 Test #47: cc31 ............................. Passed 162.25 sec; Start 20: cc1; 62/411 Test #24: cc13 ............................. Passed 309.67 sec; Start 31: cc16; 63/411 Test #280: opt-irc-1 ........................ Passed 96.64 sec; Start 17: cbs-xtpl-opt; 64/411 Test #204: frac-ip-fitting .................. Passed 68.08 sec; Start 100: ci-property; 65/411 Test #29: cc14 ............................. Passed 343.83 sec; Start 74: cc5a; 66/411 Test #278: opt13 ............................ Passed 797.72 sec; Start 19: cbs-xtpl-wrapper; 67/411 Test #359: tu6-cp-ne2 ....................... Passed 350.78 sec; Start 107: dcft1; 68/411 Test #292: psimrcc-fd-freq2 ................. Passed 76.46 sec; Start 159: dft-grad-meta; 69/411 Test #69: cc51 ............................. Passed 82.00 sec; Start 58: cc41; 70/411 Test #75: cc6 .............................. Passed 84.41 sec; Start 379: cc-module; 71/411 Test #242: ocepa-grad2 ...................... Passed 79.99 sec; Start 91: cepa-module; 72/411 Test #100: ci-property ...................... Passed 63.75 sec; Start 61: cc44; 73/411 Test #159: dft-grad-meta .................... Passed 50.20 sec; Start 297: pubchem1; 74/411 Test #20: cc1 .............................. Passed 93.10 sec; Start 389: python-pubchem; 75/411 Test #19: cbs-xtpl-wrapper ................. Passed 92.53 sec; Start 60: cc43; 76/411 Test #74: cc5a ............................. Passed 103.50 sec; Start 200,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1072#issuecomment-406602307:6474,Test,Test,6474,https://psicode.org,https://github.com/psi4/psi4/pull/1072#issuecomment-406602307,1,['Test'],['Test']
Testability,#260: omp3-4 ........................... Passed 18.29 sec; Start 100: ci-property; 89/411 Test #230: mp2-module ....................... Passed 43.19 sec; Start 299: pywrap-alias; 90/411 Test #242: ocepa-grad2 ...................... Passed 17.13 sec; Start 389: python-pubchem; 91/411 Test #19: cbs-xtpl-wrapper ................. Passed 43.72 sec; Start 159: dft-grad-meta; 92/411 Test #299: pywrap-alias ..................... Passed 17.75 sec; Start 313: rasscf-sp; 93/411 Test #17: cbs-xtpl-opt ..................... Passed 43.78 sec; Start 256: omp2p5-grad2; 94/411 Test #313: rasscf-sp ........................ Passed 6.08 sec; Start 46: cc30; 95/411 Test #280: opt-irc-1 ........................ Passed 59.45 sec; Start 297: pubchem1; 96/411 Test #256: omp2p5-grad2 ..................... Passed 10.51 sec; Start 57: cc40; 97/411 Test #100: ci-property ...................... Passed 45.85 sec; Start 59: cc42; 98/411 Test #46: cc30 ............................. Passed 20.77 sec; Start 261: omp3-5; 99/411 Test #57: cc40 ............................. Passed 11.83 sec; Start 2: adc2; 100/411 Test #389: python-pubchem ................... Passed 48.90 sec; Start 65: cc48; 101/411 Test #59: cc42 ............................. Passed 13.57 sec; Start 337: scf6; 102/411 Test #261: omp3-5 ........................... Passed 16.37 sec; Start 170: dft1-alt; 103/411 Test #159: dft-grad-meta .................... Passed 50.55 sec; Start 107: dcft1; 104/411 Test #107: dcft1 ............................ Passed 7.05 sec; Start 79: cc8b; 105/411 Test #65: cc48 ............................. Passed 13.29 sec; Start 263: omp3-grad2; 106/411 Test #337: scf6 ............................. Passed 19.28 sec; Start 336: scf5; 107/411 Test #79: cc8b ............................. Passed 9.03 sec; Start 307: pywrap-db1; 108/411 Test #297: pubchem1 ......................... Passed 48.50 sec; Start 34: cc19; 109/411 Test #263: omp3-grad2 ....................... Passed 15.79 sec; Start 348: sapt-compare; 110/41,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1075#issuecomment-409598225:9321,Test,Test,9321,https://psicode.org,https://github.com/psi4/psi4/pull/1075#issuecomment-409598225,1,['Test'],['Test']
Testability,#261: omp3-5 ........................... Passed 16.37 sec; Start 170: dft1-alt; 103/411 Test #159: dft-grad-meta .................... Passed 50.55 sec; Start 107: dcft1; 104/411 Test #107: dcft1 ............................ Passed 7.05 sec; Start 79: cc8b; 105/411 Test #65: cc48 ............................. Passed 13.29 sec; Start 263: omp3-grad2; 106/411 Test #337: scf6 ............................. Passed 19.28 sec; Start 336: scf5; 107/411 Test #79: cc8b ............................. Passed 9.03 sec; Start 307: pywrap-db1; 108/411 Test #297: pubchem1 ......................... Passed 48.50 sec; Start 34: cc19; 109/411 Test #263: omp3-grad2 ....................... Passed 15.79 sec; Start 348: sapt-compare; 110/411 Test #2: adc2 ............................. Passed 41.12 sec; Start 68: cc50; 111/411 Test #34: cc19 ............................. Passed 15.82 sec; Start 219: mints-benchmark; 112/411 Test #336: scf5 ............................. Passed 22.47 sec; Start 237: nbody-he-cluster; 113/411 Test #170: dft1-alt ......................... Passed 43.76 sec; Start 131: dfmp2-3; 114/411 Test #68: cc50 ............................. Passed 19.88 sec; Start 81: cc9; 115/411 Test #81: cc9 .............................. Passed 4.79 sec; Start 77: cc8; 116/411 Test #307: pywrap-db1 ....................... Passed 37.30 sec; Start 33: cc18; 117/411 Test #77: cc8 .............................. Passed 6.02 sec; Start 66: cc49; 118/411 Test #33: cc18 ............................. Passed 6.57 sec; Start 64: cc47; 119/411 Test #348: sapt-compare ..................... Passed 38.30 sec; Start 106: dcft-grad4; 120/411 Test #237: nbody-he-cluster ................. Passed 25.96 sec; Start 80: cc8c; 121/411 Test #80: cc8c ............................. Passed 6.42 sec; Start 55: cc39; 122/411 Test #219: mints-benchmark .................. Passed 41.17 sec; Start 56: cc4; 123/411 Test #64: cc47 ............................. Passed 13.48 sec; Start 71: cc53; 124/411 Test #66: cc49 .......,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1075#issuecomment-409598225:10600,Test,Test,10600,https://psicode.org,https://github.com/psi4/psi4/pull/1075#issuecomment-409598225,1,['Test'],['Test']
Testability,#262: mints1 ........................... Passed 1.93 sec; Start 263: mints2; 79/185 Test #263: mints2 ........................... Passed 3.59 sec; Start 272: mints10; 80/185 Test #272: mints10 .......................... Passed 2.30 sec; Start 274: molden1; 81/185 Test #274: molden1 .......................... Passed 3.07 sec; Start 275: molden2; 82/185 Test #275: molden2 .......................... Passed 2.82 sec; Start 284: mp2p5-grad1; 83/185 Test #284: mp2p5-grad1 ...................... Passed 2.74 sec; Start 288: mp2-property; 84/185 Test #288: mp2-property ..................... Passed 4.86 sec; Start 289: mpn-bh; 85/185 Test #289: mpn-bh ........................... Passed 3.94 sec; Start 302: numpy-array-interface; 86/185 Test #302: numpy-array-interface ............ Passed 1.88 sec; Start 305: olccd-grad2; 87/185 Test #305: olccd-grad2 ...................... Passed 8.44 sec; Start 306: olccd1; 88/185 Test #306: olccd1 ........................... Passed 3.32 sec; Start 310: omp2-2; 89/185 Test #310: omp2-2 ........................... Passed 6.22 sec; Start 314: omp2-grad1; 90/185 Test #314: omp2-grad1 ....................... Passed 3.07 sec; Start 317: omp2p5-2; 91/185 Test #317: omp2p5-2 ......................... Passed 6.67 sec; Start 320: omp3-1; 92/185 Test #320: omp3-1 ........................... Passed 3.05 sec; Start 328: opt1; 93/185 Test #328: opt1 ............................. Passed 6.47 sec; Start 348: opt-freeze-coords; 94/185 Test #348: opt-freeze-coords ................ Passed 6.55 sec; Start 351: phi-ao; 95/185 Test #351: phi-ao ........................... Passed 21.33 sec; Start 355: props4; 96/185 Test #355: props4 ........................... Passed 3.14 sec; Start 356: psimrcc-ccsd_t-1; 97/185 Test #356: psimrcc-ccsd_t-1 ................. Passed 3.41 sec; Start 357: psimrcc-ccsd_t-2; 98/185 Test #357: psimrcc-ccsd_t-2 ................. Passed 2.43 sec; Start 358: psimrcc-ccsd_t-3; 99/185 Test #358: psimrcc-ccsd_t-3 ................. Passed 2.31,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3223#issuecomment-2373056930:8229,Test,Test,8229,https://psicode.org,https://github.com/psi4/psi4/issues/3223#issuecomment-2373056930,1,['Test'],['Test']
Testability,#262: omp3-5 ........................... Passed 151.32 sec; Start 238: nbody-he-cluster; 97/412 Test #300: pywrap-alias ..................... Passed 103.75 sec; Start 2: adc2; 98/412 Test #279: opt13 ............................ Passed 828.85 sec; Start 66: cc48; 99/412 Test #277: opt11 ............................ Passed 71.88 sec; Start 60: cc42; 100/412 Test #69: cc50 ............................. Passed 98.63 sec; Start 349: sapt-compare; 101/412 Test #58: cc40 ............................. Passed 106.46 sec; Start 65: cc47; 102/412 Test #274: opt7 ............................. Passed 79.00 sec; Start 12: cbs-parser; 103/412 Test #67: cc49 ............................. Passed 95.08 sec; Start 308: pywrap-db1; 104/412 Test #31: cc15 ............................. Passed 155.88 sec; Start 83: cc9a; 105/412 Test #145: dfomp2-grad2 ..................... Passed 148.32 sec; Start 220: mints-benchmark; 106/412 Test #150: dfomp3-grad2 ..................... Passed 125.69 sec; Start 57: cc4; 107/412 Test #35: cc19 ............................. Passed 111.21 sec; Start 82: cc9; 108/412 Test #157: dfomp2p5-grad2 ................... Passed 72.22 sec; Start 141: dfomp2-2; 109/412 Test #2: adc2 ............................. Passed 56.59 sec; Start 108: dcft1; 110/412 Test #238: nbody-he-cluster ................. Passed 66.53 sec; Start 78: cc8; 111/412 Test #60: cc42 ............................. Passed 58.59 sec; Start 132: dfmp2-3; 112/412 Test #66: cc48 ............................. Passed 63.06 sec; Start 201: fnocc2; 113/412 Test #349: sapt-compare ..................... Passed 59.37 sec; Start 55: cc38; 114/412 Test #220: mints-benchmark .................. Passed 56.59 sec; Start 81: cc8c; 115/412 Test #308: pywrap-db1 ....................... Passed 62.96 sec; Start 152: dfomp2p5-2; 116/412 Test #65: cc47 ............................. Passed 89.72 sec; Start 68: cc4a; 117/412 Test #57: cc4 .............................. Passed 86.80 sec; Start 79: cc8a; 118/412 Test #132: d,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1227#issuecomment-421362141:10255,Test,Test,10255,https://psicode.org,https://github.com/psi4/psi4/pull/1227#issuecomment-421362141,1,['Test'],['Test']
Testability,#263: omp3-grad2 ....................... Passed 238.71 sec; Start 176: extern1; 158/411 Test #133: dfmp2-ecp ........................ Passed 15.59 sec; Start 261: omp3-5; 159/411 Test #34: cc19 ............................. Passed 179.49 sec; Start 67: cc4a; 160/411 Test #27: cc13c ............................ Passed 433.11 sec; Start 115: dcft9; 161/411 Test #176: extern1 .......................... Passed 40.24 sec; Start 372: dft-custom-hybrid; 162/411 Test #260: omp3-4 ........................... Passed 367.41 sec; Start 104: dcft-grad2; 163/411 Test #372: dft-custom-hybrid ................ Passed 16.33 sec; Start 369: dft-jk; 164/411 Test #369: dft-jk ........................... Passed 14.21 sec; Start 101: cubeprop; 165/411 Test #245: ocepa3 ........................... Passed 125.71 sec; Start 338: scf7; 166/411 Test #101: cubeprop ......................... Passed 12.33 sec; Start 250: omp2-5; 167/411 Test #338: scf7 ............................. Passed 28.83 sec; Start 59: cc42; 168/411 Test #65: cc48 ............................. Passed 220.80 sec; Start 393: python-3-index-transforms; 169/411 Test #393: python-3-index-transforms ........ Passed 9.60 sec; Start 5: casscf-sa-sp; 170/411 Test #67: cc4a ............................. Passed 159.27 sec; Start 249: omp2-4; 171/411 Test #26: cc13b ............................ Passed 367.76 sec; Start 268: opt2-fd; 172/411 Test #5: casscf-sa-sp ..................... Passed 33.51 sec; Start 291: psimrcc-fd-freq1; 173/411 Test #268: opt2-fd .......................... Passed 18.35 sec; Start 14: cbs-xtpl-energy; 174/411 Test #14: cbs-xtpl-energy .................. Passed 19.84 sec; Start 64: cc47; 175/411 Test #291: psimrcc-fd-freq1 ................. Passed 34.37 sec; Start 368: scf-freq1; 176/411 Test #368: scf-freq1 ........................ Passed 21.40 sec; Start 365: cubeprop-esp; 177/411 Test #365: cubeprop-esp ..................... Passed 9.20 sec; Start 33: cc18; 178/411 Test #261: omp3-5 ........................,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1089#issuecomment-408103972:15808,Test,Test,15808,https://psicode.org,https://github.com/psi4/psi4/pull/1089#issuecomment-408103972,1,['Test'],['Test']
Testability,#265: opt-lindep-change ................ Passed 47.51 sec; Start 50: cc33; 175/412 Test #174: dft-omega ........................ Passed 46.04 sec; Start 376: pywrap-bfs; 176/412 Test #49: cc32 ............................. Passed 26.57 sec; Start 53: cc36; 177/412 Test #110: dcft3 ............................ Passed 25.36 sec; Start 160: dft-b2plyp; 178/412 Test #50: cc33 ............................. Passed 30.41 sec; Start 314: rasscf-sp; 179/412 Test #203: fnocc4 ........................... Passed 37.17 sec; Start 273: opt6; 180/412 Test #53: cc36 ............................. Passed 27.88 sec; Start 268: opt2; 181/412 Test #167: dft-psivar ....................... Passed 45.63 sec; Start 173: dft3; 182/412 Test #376: pywrap-bfs ....................... Passed 45.59 sec; Start 178: extern2; 183/412 Test #160: dft-b2plyp ....................... Passed 47.37 sec; Start 304: pywrap-checkrun-convcrit; 184/412 Test #314: rasscf-sp ........................ Passed 41.73 sec; Start 38: cc22; 185/412 Test #273: opt6 ............................. Passed 54.96 sec; Start 164: dft-freq; 186/412 Test #268: opt2 ............................. Passed 56.52 sec; Start 208: gibbs; 187/412 Test #173: dft3 ............................. Passed 59.20 sec; Start 347: sapt-dft1; 188/412 Test #178: extern2 .......................... Passed 56.03 sec; Start 259: omp3-2; 189/412 Test #304: pywrap-checkrun-convcrit ......... Passed 58.77 sec; Start 278: opt12; 190/412 Test #38: cc22 ............................. Passed 56.44 sec; Start 248: omp2-2; 191/412 Test #208: gibbs ............................ Passed 68.71 sec; Start 190: fci-tdm-2; 192/412 Test #164: dft-freq ......................... Passed 75.93 sec; Start 129: dfccsdat1; 193/412 Test #179: fsapt1 ........................... Passed 2077.65 sec; Start 202: fnocc3; 194/412 Test #259: omp3-2 ........................... Passed 65.01 sec; Start 359: tu5-sapt; 195/412 Test #347: sapt-dft1 ........................ Passed 79.99 sec; Start 3,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1226#issuecomment-420597899:17185,Test,Test,17185,https://psicode.org,https://github.com/psi4/psi4/pull/1226#issuecomment-420597899,1,['Test'],['Test']
Testability,#267: opt2 ............................. Passed 28.23 sec; Start 273: opt7; 263/411 Test #271: opt5 ............................. Passed 6.29 sec; Start 274: opt8; 264/411 Test #270: opt4 ............................. Passed 11.04 sec; Start 275: opt9; 265/411 Test #256: omp2p5-grad2 ..................... Passed 82.06 sec; Start 276: opt11; 266/411 Test #275: opt9 ............................. Passed 20.41 sec; Start 277: opt12; 267/411 Test #272: opt6 ............................. Passed 30.42 sec; Start 279: opt14; 268/411 Test #274: opt8 ............................. Passed 41.20 sec; Start 280: opt-irc-1; 269/411 Test #273: opt7 ............................. Passed 54.36 sec; Start 281: opt-irc-2; 270/411 Test #277: opt12 ............................ Passed 26.21 sec; Start 282: opt-irc-3; 271/411 Test #263: omp3-grad2 ....................... Passed 107.84 sec; Start 283: opt-freeze-coords; 272/411 Test #261: omp3-5 ........................... Passed 115.84 sec; Start 284: props1; 273/411 Test #284: props1 ........................... Passed 4.88 sec; Start 285: props2; 274/411 Test #283: opt-freeze-coords ................ Passed 7.18 sec; Start 286: props3; 275/411 Test #259: omp3-3 ........................... Passed 125.61 sec; Start 287: psimrcc-ccsd_t-1; 276/411 Test #287: psimrcc-ccsd_t-1 ................. Passed 2.91 sec; Start 288: psimrcc-ccsd_t-2; 277/411 Test #260: omp3-4 ........................... Passed 129.75 sec; Start 289: psimrcc-ccsd_t-3; 278/411 Test #288: psimrcc-ccsd_t-2 ................. Passed 2.56 sec; Start 290: psimrcc-ccsd_t-4; 279/411 Test #289: psimrcc-ccsd_t-3 ................. Passed 2.58 sec; Start 291: psimrcc-fd-freq1; 280/411 Test #276: opt11 ............................ Passed 59.16 sec; Start 292: psimrcc-fd-freq2; 281/411 Test #285: props2 ........................... Passed 13.81 sec; Start 293: psimrcc-pt2; 282/411 Test #286: props3 ........................... Passed 15.41 sec; Start 294: psimrcc-sp1; 283/411 Test #293: psim,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1087#issuecomment-408854538:25362,Test,Test,25362,https://psicode.org,https://github.com/psi4/psi4/pull/1087#issuecomment-408854538,1,['Test'],['Test']
Testability,#270: opt4 ............................. Passed 9.94 sec; Start 273: opt7; 271/411 Test #259: omp3-3 ........................... Passed 118.62 sec; Start 274: opt8; 272/411 Test #263: omp3-grad2 ....................... Passed 93.89 sec; Start 275: opt9; 273/411 Test #260: omp3-4 ........................... Passed 116.13 sec; Start 276: opt11; 274/411 Test #261: omp3-5 ........................... Passed 113.89 sec; Start 277: opt12; 275/411 Test #272: opt6 ............................. Passed 30.11 sec; Start 279: opt14; 276/411 Test #275: opt9 ............................. Passed 19.75 sec; Start 280: opt-irc-1; 277/411 Test #274: opt8 ............................. Passed 37.35 sec; Start 281: opt-irc-2; 278/411 Test #277: opt12 ............................ Passed 24.58 sec; Start 282: opt-irc-3; 279/411 Test #273: opt7 ............................. Passed 53.08 sec; Start 283: opt-freeze-coords; 280/411 Test #283: opt-freeze-coords ................ Passed 5.29 sec; Start 284: props1; 281/411 Test #284: props1 ........................... Passed 3.40 sec; Start 285: props2; 282/411 Test #285: props2 ........................... Passed 14.69 sec; Start 286: props3; 283/411 Test #276: opt11 ............................ Passed 52.60 sec; Start 287: psimrcc-ccsd_t-1; 284/411 Test #282: opt-irc-3 ........................ Passed 27.67 sec; Start 288: psimrcc-ccsd_t-2; 285/411 Test #287: psimrcc-ccsd_t-1 ................. Passed 2.22 sec; Start 289: psimrcc-ccsd_t-3; 286/411 Test #288: psimrcc-ccsd_t-2 ................. Passed 2.25 sec; Start 290: psimrcc-ccsd_t-4; 287/411 Test #289: psimrcc-ccsd_t-3 ................. Passed 2.49 sec; Start 291: psimrcc-fd-freq1; 288/411 Test #227: mp2-def2 ......................... Passed 404.01 sec; Start 292: psimrcc-fd-freq2; 289/411 Test #286: props3 ........................... Passed 13.66 sec; Start 293: psimrcc-pt2; 290/411 Test #293: psimrcc-pt2 ...................... Passed 2.44 sec; Start 294: psimrcc-sp1; 291/411 Test #294: psimr,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1091#issuecomment-409148219:25965,Test,Test,25965,https://psicode.org,https://github.com/psi4/psi4/pull/1091#issuecomment-409148219,1,['Test'],['Test']
Testability,#271: opt5 ............................. Passed 5.38 sec; Start 272: opt6; 270/411 Test #270: opt4 ............................. Passed 10.22 sec; Start 273: opt7; 271/411 Test #259: omp3-3 ........................... Passed 131.33 sec; Start 274: opt8; 272/411 Test #272: opt6 ............................. Passed 31.19 sec; Start 275: opt9; 273/411 Test #260: omp3-4 ........................... Passed 146.57 sec; Start 276: opt11; 274/411 Test #263: omp3-grad2 ....................... Passed 115.54 sec; Start 277: opt12; 275/411 Test #274: opt8 ............................. Passed 40.84 sec; Start 279: opt14; 276/411 Test #261: omp3-5 ........................... Passed 137.13 sec; Start 280: opt-irc-1; 277/411 Test #275: opt9 ............................. Passed 20.24 sec; Start 281: opt-irc-2; 278/411 Test #273: opt7 ............................. Passed 57.59 sec; Start 282: opt-irc-3; 279/411 Test #277: opt12 ............................ Passed 23.47 sec; Start 283: opt-freeze-coords; 280/411 Test #283: opt-freeze-coords ................ Passed 8.58 sec; Start 284: props1; 281/411 Test #227: mp2-def2 ......................... Passed 413.49 sec; Start 285: props2; 282/411 Test #284: props1 ........................... Passed 6.04 sec; Start 286: props3; 283/411 Test #285: props2 ........................... Passed 13.46 sec; Start 287: psimrcc-ccsd_t-1; 284/411 Test #286: props3 ........................... Passed 13.64 sec; Start 288: psimrcc-ccsd_t-2; 285/411 Test #287: psimrcc-ccsd_t-1 ................. Passed 3.03 sec; Start 289: psimrcc-ccsd_t-3; 286/411 Test #288: psimrcc-ccsd_t-2 ................. Passed 3.60 sec; Start 290: psimrcc-ccsd_t-4; 287/411 Test #289: psimrcc-ccsd_t-3 ................. Passed 3.03 sec; Start 291: psimrcc-fd-freq1; 288/411 Test #276: opt11 ............................ Passed 61.79 sec; Start 292: psimrcc-fd-freq2; 289/411 Test #282: opt-irc-3 ........................ Passed 37.00 sec; Start 293: psimrcc-pt2; 290/411 Test #293: psimrcc-pt,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1112#issuecomment-409912325:25886,Test,Test,25886,https://psicode.org,https://github.com/psi4/psi4/pull/1112#issuecomment-409912325,1,['Test'],['Test']
Testability,#274: opt6 ............................. Passed 17.10 sec; Start 165: dft-freq; 181/413 Test #201: fnocc1 ........................... Passed 3.46 sec; Start 209: gibbs; 182/413 Test #208: ghosts ........................... Passed 32.56 sec; Start 260: omp3-2; 183/413 Test #266: opt-lindep-change ................ Passed 25.92 sec; Start 174: dft3; 184/413 Test #328: scf-ecp .......................... Passed 25.25 sec; Start 348: sapt-dft1; 185/413 Test #344: soscf-dft ........................ Passed 31.56 sec; Start 168: dft-psivar; 186/413 Test #179: extern2 .......................... Passed 13.36 sec; Start 250: omp2-3; 187/413 Test #269: opt2 ............................. Passed 17.29 sec; Start 203: fnocc3; 188/413 Test #260: omp3-2 ........................... Passed 5.66 sec; Start 191: fci-tdm-2; 189/413 Test #279: opt12 ............................ Passed 16.44 sec; Start 140: dfmp2-grad5; 190/413 Test #203: fnocc3 ........................... Passed 3.59 sec; Start 360: tu5-sapt; 191/413 Test #250: omp2-3 ........................... Passed 6.25 sec; Start 305: pywrap-checkrun-convcrit; 192/413 Test #175: dft-omega ........................ Passed 24.46 sec; Start 324: sapt-dft-lrc; 193/413 Test #209: gibbs ............................ Passed 13.52 sec; Start 249: omp2-2; 194/413 Test #249: omp2-2 ........................... Passed 5.39 sec; Start 240: nbody-intermediates; 195/413 Test #165: dft-freq ......................... Passed 20.43 sec; Start 107: dcft-grad3; 196/413 Test #1: adc1 ............................. Passed 23.48 sec; Start 277: opt9; 197/413 Test #377: pywrap-bfs ....................... Passed 26.50 sec; Start 292: psimrcc-ccsd_t-4; 198/413 Test #174: dft3 ............................. Passed 19.83 sec; Start 7: casscf-sp; 199/413 Test #140: dfmp2-grad5 ...................... Passed 14.49 sec; Start 178: extern1; 200/413 Test #161: dft-b2plyp ....................... Passed 25.45 sec; Start 90: cepa3; 201/413 Test #348: sapt-dft1 ...............,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1264#issuecomment-425525678:17867,Test,Test,17867,https://psicode.org,https://github.com/psi4/psi4/pull/1264#issuecomment-425525678,1,['Test'],['Test']
Testability,#274: opt8 ............................. Passed 19.47 sec; Start 275: opt9; 280/411 Test #275: opt9 ............................. Passed 9.79 sec; Start 276: opt11; 281/411 Test #276: opt11 ............................ Passed 29.14 sec; Start 277: opt12; 282/411 Test #277: opt12 ............................ Passed 16.66 sec; Start 279: opt14; 283/411 Test #279: opt14 ............................ Passed 69.04 sec; Start 280: opt-irc-1; 284/411 Test #280: opt-irc-1 ........................ Passed 53.50 sec; Start 281: opt-irc-2; 285/411 Test #281: opt-irc-2 ........................ Passed 84.18 sec; Start 282: opt-irc-3; 286/411 Test #282: opt-irc-3 ........................ Passed 15.17 sec; Start 283: opt-freeze-coords; 287/411 Test #283: opt-freeze-coords ................ Passed 3.15 sec; Start 284: props1; 288/411 Test #284: props1 ........................... Passed 2.52 sec; Start 285: props2; 289/411 Test #285: props2 ........................... Passed 11.98 sec; Start 286: props3; 290/411 Test #286: props3 ........................... Passed 13.90 sec; Start 287: psimrcc-ccsd_t-1; 291/411 Test #287: psimrcc-ccsd_t-1 ................. Passed 1.41 sec; Start 288: psimrcc-ccsd_t-2; 292/411 Test #288: psimrcc-ccsd_t-2 ................. Passed 1.46 sec; Start 289: psimrcc-ccsd_t-3; 293/411 Test #289: psimrcc-ccsd_t-3 ................. Passed 1.43 sec; Start 290: psimrcc-ccsd_t-4; 294/411 Test #290: psimrcc-ccsd_t-4 ................. Passed 18.05 sec; Start 291: psimrcc-fd-freq1; 295/411 Test #291: psimrcc-fd-freq1 ................. Passed 8.31 sec; Start 292: psimrcc-fd-freq2; 296/411 Test #292: psimrcc-fd-freq2 ................. Passed 55.01 sec; Start 293: psimrcc-pt2; 297/411 Test #293: psimrcc-pt2 ...................... Passed 1.08 sec; Start 294: psimrcc-sp1; 298/411 Test #294: psimrcc-sp1 ...................... Passed 3.94 sec; Start 295: psithon1; 299/411 Test #295: psithon1 ......................... Passed 2.94 sec; Start 296: psithon2; 300/411 Test #296: psit,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1071#issuecomment-407449972:26502,Test,Test,26502,https://psicode.org,https://github.com/psi4/psi4/pull/1071#issuecomment-407449972,1,['Test'],['Test']
Testability,#277: opt11 ............................ Passed 67.19 sec; Start 80: cc8b; 122/412 Test #64: cc46 ............................. Passed 69.45 sec; Start 201: fnocc2; 123/412 Test #171: dft1-alt ......................... Passed 54.20 sec; Start 308: pywrap-db1; 124/412 Test #68: cc4a ............................. Passed 63.13 sec; Start 349: sapt-compare; 125/412 Test #73: cc54 ............................. Passed 73.64 sec; Start 338: scf6; 126/412 Test #163: dft-grad-meta .................... Passed 54.77 sec; Start 33: cc17; 127/412 Test #2: adc2 ............................. Passed 48.26 sec; Start 220: mints-benchmark; 128/412 Test #55: cc38 ............................. Passed 75.15 sec; Start 132: dfmp2-3; 129/412 Test #12: cbs-parser ....................... Passed 84.13 sec; Start 337: scf5; 130/412 Test #308: pywrap-db1 ....................... Passed 44.31 sec; Start 195: fd-freq-gradient; 131/412 Test #56: cc39 ............................. Passed 58.25 sec; Start 361: x2c1; 132/412 Test #143: dfomp2-4 ......................... Passed 71.69 sec; Start 93: ci-multi; 133/412 Test #72: cc53 ............................. Passed 61.07 sec; Start 107: dcft-grad4; 134/412 Test #80: cc8b ............................. Passed 59.22 sec; Start 393: python-cc54; 135/412 Test #349: sapt-compare ..................... Passed 51.30 sec; Start 23: cc11; 136/412 Test #246: ocepa3 ........................... Passed 63.75 sec; Start 313: rasci-ne; 137/412 Test #33: cc17 ............................. Passed 44.73 sec; Start 127: dfccsd-t-grad1; 138/412 Test #338: scf6 ............................. Passed 49.52 sec; Start 134: dfmp2-ecp; 139/412 Test #201: fnocc2 ........................... Passed 69.43 sec; Start 34: cc18; 140/412 Test #220: mints-benchmark .................. Passed 44.32 sec; Start 149: dfomp3-grad1; 141/412 Test #337: scf5 ............................. Passed 39.63 sec; Start 253: omp2-grad2; 142/412 Test #132: dfmp2-3 .......................... Passed 42.96 s,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1224#issuecomment-419158485:12492,Test,Test,12492,https://psicode.org,https://github.com/psi4/psi4/pull/1224#issuecomment-419158485,1,['Test'],['Test']
Testability,#278: opt-irc-3 ........................ Passed 27.50 sec; Start 190: fd-freq-gradient; 101/401 Test #34: cc19 ............................. Passed 58.89 sec; Start 66: cc4a; 102/401 Test #159: dft-freq ......................... Passed 21.58 sec; Start 104: dcft-grad3; 103/401 Test #11: cbs-delta-energy ................. Passed 237.06 sec; Start 295: pywrap-alias; 104/401 Test #252: omp2p5-grad2 ..................... Passed 79.50 sec; Start 268: opt6; 105/401 Test #35: cc2 .............................. Passed 456.44 sec; Start 173: extern2; 106/401 Test #38: cc23 ............................. Passed 464.64 sec; Start 81: cc9a; 107/401 Test #226: mp2-module ....................... Passed 116.12 sec; Start 137: dfmp2-grad5; 108/401 Test #169: dft-omega ........................ Passed 21.02 sec; Start 79: cc8c; 109/401 Test #130: dfmp2-3 .......................... Passed 18.27 sec; Start 63: cc47; 110/401 Test #248: omp2-grad2 ....................... Passed 39.14 sec; Start 72: cc55; 111/401 Test #104: dcft-grad3 ....................... Passed 11.82 sec; Start 292: psithon2; 112/401 Test #244: omp2-3 ........................... Passed 25.17 sec; Start 238: ocepa-grad2; 113/401 Test #241: ocepa3 ........................... Passed 39.10 sec; Start 273: opt12; 114/401 Test #139: dfomp2-2 ......................... Passed 42.17 sec; Start 345: dft-custom; 115/401 Test #190: fd-freq-gradient ................. Passed 19.57 sec; Start 21: cc10; 116/401 Test #41: cc26 ............................. Passed 424.74 sec; Start 234: nbody-intermediates; 117/401 Test #147: dfomp3-grad1 ..................... Passed 26.96 sec; Start 78: cc8b; 118/401 Test #268: opt6 ............................. Passed 21.27 sec; Start 303: pywrap-db1; 119/401 Test #137: dfmp2-grad5 ...................... Passed 18.60 sec; Start 80: cc9; 120/401 Test #141: dfomp2-4 ......................... Passed 38.69 sec; Start 149: dfomp2p5-1; 121/401 Test #173: extern2 .......................... Passed 23.61 sec; S,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1071#issuecomment-402453832:10885,Test,Test,10885,https://psicode.org,https://github.com/psi4/psi4/pull/1071#issuecomment-402453832,1,['Test'],['Test']
Testability,#27: cc13c ............................ Passed 152.82 sec; Start 46: cc30; 36/411 Test #58: cc41 ............................. Passed 135.41 sec; Start 320: sapt6; 37/411 Test #281: opt-irc-2 ........................ Passed 180.85 sec; Start 115: dcft9; 38/411 Test #70: cc52 ............................. Passed 175.89 sec; Start 386: cookbook-rohf-orb-rot; 39/411 Test #104: dcft-grad2 ....................... Passed 130.18 sec; Start 60: cc43; 40/411 Test #305: pywrap-checkrun-rohf ............. Passed 660.05 sec; Start 149: dfomp3-grad2; 41/411 Test #144: dfomp2-grad2 ..................... Passed 71.62 sec; Start 17: cbs-xtpl-opt; 42/411 Test #46: cc30 ............................. Passed 77.21 sec; Start 158: dfscf-bz2; 43/411 Test #359: tu6-cp-ne2 ....................... Passed 249.27 sec; Start 379: cc-module; 44/411 Test #195: fd-freq-gradient-large ........... Passed 292.03 sec; Start 57: cc40; 45/411 Test #115: dcft9 ............................ Passed 93.57 sec; Start 107: dcft1; 46/411 Test #60: cc43 ............................. Passed 98.08 sec; Start 183: isapt2; 47/411 Test #149: dfomp3-grad2 ..................... Passed 73.71 sec; Start 43: cc28; 48/411 Test #97: cisd-opt-fd ...................... Passed 154.70 sec; Start 59: cc42; 49/411 Test #17: cbs-xtpl-opt ..................... Passed 90.29 sec; Start 347: sapt-dft2; 50/411 Test #373: dft-custom-mgga .................. Passed 178.76 sec; Start 26: cc13b; 51/411 Test #57: cc40 ............................. Passed 62.96 sec; Start 20: cc1; 52/411 Test #320: sapt6 ............................ Passed 163.15 sec; Start 30: cc15; 53/411 Test #107: dcft1 ............................ Passed 67.37 sec; Start 147: dfomp3-2; 54/411 Test #158: dfscf-bz2 ........................ Passed 135.99 sec; Start 74: cc5a; 55/411 Test #181: fsapt-allterms ................... Passed 571.01 sec; Start 69: cc51; 56/411 Test #386: cookbook-rohf-orb-rot ............ Passed 200.39 sec; Start 75: cc6; 57/411 Test #43: cc28 .....,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1124#issuecomment-411347383:4639,Test,Test,4639,https://psicode.org,https://github.com/psi4/psi4/pull/1124#issuecomment-411347383,1,['Test'],['Test']
Testability,#281: opt-irc-1 ........................ Passed 86.58 sec; Start 231: mp2-module; 62/412 Test #320: sapt5 ............................ Passed 93.23 sec; Start 17: cbs-xtpl-opt; 63/412 Test #76: cc6 .............................. Passed 75.78 sec; Start 20: cbs-xtpl-wrapper; 64/412 Test #70: cc51 ............................. Passed 87.01 sec; Start 260: omp3-3; 65/412 Test #205: frac-ip-fitting .................. Passed 76.46 sec; Start 390: python-pubchem; 66/412 Test #206: frac-traverse .................... Passed 244.37 sec; Start 62: cc44; 67/412 Test #293: psimrcc-fd-freq2 ................. Passed 85.30 sec; Start 261: omp3-4; 68/412 Test #193: fd-freq-energy ................... Passed 63.85 sec; Start 116: dcft9; 69/412 Test #168: dft-b3lyp ........................ Passed 82.97 sec; Start 298: pubchem1; 70/412 Test #26: cc13a ............................ Passed 316.11 sec; Start 44: cc28; 71/412 Test #231: mp2-module ....................... Passed 82.21 sec; Start 21: cc1; 72/412 Test #20: cbs-xtpl-wrapper ................. Passed 82.20 sec; Start 243: ocepa-grad2; 73/412 Test #390: python-pubchem ................... Passed 77.47 sec; Start 19: cbs-xtpl-nbody; 74/412 Test #17: cbs-xtpl-opt ..................... Passed 98.26 sec; Start 28: cc13c; 75/412 Test #114: dcft7 ............................ Passed 323.56 sec; Start 27: cc13b; 76/412 Test #260: omp3-3 ........................... Passed 91.31 sec; Start 245: ocepa2; 77/412 Test #62: cc44 ............................. Passed 89.37 sec; Start 264: omp3-grad2; 78/412 Test #261: omp3-4 ........................... Passed 96.80 sec; Start 101: ci-property; 79/412 Test #298: pubchem1 ......................... Passed 86.18 sec; Start 251: omp2-5; 80/412 Test #116: dcft9 ............................ Passed 108.41 sec; Start 250: omp2-4; 81/412 Test #44: cc28 ............................. Passed 98.15 sec; Start 262: omp3-5; 82/412 Test #317: sapt2 ............................ Passed 372.09 sec; Start 257: omp2p5-g,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1227#issuecomment-421362141:7040,Test,Test,7040,https://psicode.org,https://github.com/psi4/psi4/pull/1227#issuecomment-421362141,1,['Test'],['Test']
Testability,#282: opt-irc-3 ........................ Passed 33.40 sec; Start 296: psithon2; 179/411 Test #78: cc8a ............................. Passed 64.33 sec; Start 54: cc38; 180/411 Test #165: dft-grad2 ........................ Passed 16.70 sec; Start 142: dfomp2-4; 181/411 Test #140: dfomp2-2 ......................... Passed 56.04 sec; Start 51: cc35; 182/411 Test #177: extern2 .......................... Passed 30.48 sec; Start 218: mints8; 183/411 Test #48: cc32 ............................. Passed 25.58 sec; Start 324: sapt8; 184/411 Test #321: sapt-dft-api ..................... Passed 17.62 sec; Start 146: dfomp3-1; 185/411 Test #169: dft-vv10 ......................... Passed 21.80 sec; Start 275: opt9; 186/411 Test #247: omp2-2 ........................... Passed 32.66 sec; Start 301: pywrap-basis; 187/411 Test #238: nbody-intermediates .............. Passed 23.69 sec; Start 366: dft-smoke; 188/411 Test #296: psithon2 ......................... Passed 26.04 sec; Start 148: dfomp3-grad1; 189/411 Test #194: fd-freq-gradient ................. Passed 31.45 sec; Start 340: soscf-large; 190/411 Test #254: omp2p5-2 ......................... Passed 30.57 sec; Start 72: cc54; 191/411 Test #218: mints8 ........................... Passed 19.91 sec; Start 22: cc11; 192/411 Test #324: sapt8 ............................ Passed 20.43 sec; Start 5: casscf-sa-sp; 193/411 Test #301: pywrap-basis ..................... Passed 21.14 sec; Start 49: cc33; 194/411 Test #303: pywrap-checkrun-convcrit ......... Passed 44.50 sec; Start 164: dft-grad1; 195/411 Test #146: dfomp3-1 ......................... Passed 27.79 sec; Start 248: omp2-3; 196/411 Test #340: soscf-large ...................... Passed 15.12 sec; Start 138: dfmp2-grad5; 197/411 Test #275: opt9 ............................. Passed 29.14 sec; Start 350: dft-custom; 198/411 Test #80: cc8c ............................. Passed 57.00 sec; Start 286: props3; 199/411 Test #366: dft-smoke ........................ Passed 20.42 sec; Start 14:,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1072#issuecomment-406602307:17783,Test,Test,17783,https://psicode.org,https://github.com/psi4/psi4/pull/1072#issuecomment-406602307,1,['Test'],['Test']
Testability,#284: opt-freeze-coords ................ Passed 7.09 sec; Start 392: python-mints2; 317/412 Test #312: rasci-h2o ........................ Passed 3.63 sec; Start 230: mp2-grad2; 318/412 Test #398: json-v11-energy .................. Passed 4.16 sec; Start 406: skeleton; 319/412 Test #236: mp2-property ..................... Passed 3.97 sec; Start 352: dft-reference; 320/412 Test #247: omp2-1 ........................... Passed 7.17 sec; Start 204: frac; 321/412 Test #340: scf-property ..................... Passed 5.94 sec; Start 225: molden2; 322/412 Test #272: opt5 ............................. Passed 5.79 sec; Start 226: mom; 323/412 Test #285: props1 ........................... Passed 6.02 sec; Start 122: dfccdl1; 324/412 Test #237: mpn-bh ........................... Passed 7.07 sec; Start 364: zaptn-nh2; 325/412 Test #120: dfcasscf-sp ...................... Passed 6.93 sec; Start 345: dfep2-1; 326/412 Test #232: mp2p5-grad1 ...................... Passed 6.24 sec; Start 214: mints2; 327/412 Test #392: python-mints2 .................... Passed 3.04 sec; Start 4: casscf-semi; 328/412 Test #406: skeleton ......................... Passed 2.32 sec; Start 224: molden1; 329/412 Test #121: dfccd1 ........................... Passed 6.81 sec; Start 131: dfmp2-2; 330/412 Test #135: dfmp2-grad1 ...................... Passed 8.61 sec; Start 407: skeletonaointegrals; 331/412 Test #86: cepa0-grad1 ...................... Passed 7.98 sec; Start 385: psi4numpy-rhf-hessian; 332/412 Test #352: dft-reference .................... Passed 3.67 sec; Start 333: scf-occ; 333/412 Test #214: mints2 ........................... Passed 3.32 sec; Start 234: mp3-grad1; 334/412 Test #364: zaptn-nh2 ........................ Passed 3.95 sec; Start 229: mp2-grad1; 335/412 Test #345: dfep2-1 .......................... Passed 4.77 sec; Start 8: castup1; 336/412 Test #407: skeletonaointegrals .............. Passed 2.98 sec; Start 329: scf-upcast-custom-basis; 337/412 Test #230: mp2-grad2 ....................,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1221#issuecomment-419096646:30685,Test,Test,30685,https://psicode.org,https://github.com/psi4/psi4/pull/1221#issuecomment-419096646,1,['Test'],['Test']
Testability,"#288: psimrcc-ccsd_t-1 ................. Passed 2.35 sec; Start 410: skeletonscf; 395/412 Test #240: numpy-array-interface ............ Passed 0.80 sec; Start 403: json-schema-1-throws; 396/412 Test #213: mints1 ........................... Passed 0.80 sec; Start 88: cepa1; 397/412 Test #383: psi4numpy-rhf .................... Passed 0.92 sec; 398/412 Test #310: pywrap-molecule .................. Passed 1.22 sec; 399/412 Test #175: docs-bases ....................... Passed 0.83 sec; 400/412 Test #209: matrix1 .......................... Passed 0.68 sec; 401/412 Test #217: mints5 ........................... Passed 1.06 sec; 402/412 Test #309: pywrap-db3 ....................... Passed 0.77 sec; 403/412 Test #379: mints12 .......................... Passed 1.35 sec; 404/412 Test #216: mints4 ........................... Passed 0.71 sec; 405/412 Test #176: docs-dft ......................... Passed 0.65 sec; 406/412 Test #365: options1 ......................... Passed 0.65 sec; 407/412 Test #403: json-schema-1-throws ............. Passed 0.56 sec; 408/412 Test #410: skeletonscf ...................... Passed 0.72 sec; 409/412 Test #299: pubchem2 ......................... Passed 2.81 sec; 410/412 Test #88: cepa1 ............................ Passed 2.50 sec; 411/412 Test #18: cbs-xtpl-func .................... Passed 1813.92 sec; 412/412 Test #319: sapt4 ............................ Passed 1836.80 sec. 100% tests passed, 0 tests failed out of 412. Label Time Summary:; adc = 70.69 sec*proc (2 tests); autotest = 2556.99 sec*proc (26 tests); cart = 21773.03 sec*proc (123 tests); cas = 60.88 sec*proc (1 test); casscf = 144.78 sec*proc (11 tests); cbs = 3125.37 sec*proc (11 tests); cc = 16149.11 sec*proc (65 tests); cdomp2 = 61.43 sec*proc (2 tests); cepa = 182.76 sec*proc (7 tests); ci = 123.18 sec*proc (8 tests); cisd = 220.81 sec*proc (7 tests); cookbook = 326.91 sec*proc (1 test); cubeprop = 20.97 sec*proc (2 tests); dcft = 6096.43 sec*proc (13 tests); df = 2441.66 sec*proc (38 t",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1221#issuecomment-419096646:38079,Test,Test,38079,https://psicode.org,https://github.com/psi4/psi4/pull/1221#issuecomment-419096646,1,['Test'],['Test']
Testability,#299: pywrap-alias ..................... Passed 60.63 sec; Start 314: sad1; 303/411 Test #292: psimrcc-fd-freq2 ................. Passed 77.97 sec; Start 315: sapt1; 304/411 Test #314: sad1 ............................. Passed 3.59 sec; Start 317: sapt3; 305/411 Test #313: rasscf-sp ........................ Passed 21.47 sec; Start 319: sapt5; 306/411 Test #315: sapt1 ............................ Passed 18.39 sec; Start 320: sapt6; 307/411 Test #307: pywrap-db1 ....................... Passed 41.68 sec; Start 321: sapt-dft-api; 308/411 Test #312: rasci-ne ......................... Passed 36.47 sec; Start 322: sapt-dft-lrc; 309/411 Test #103: dcft-grad1 ....................... Passed 680.14 sec; Start 323: sapt7; 310/411 Test #302: pywrap-cbs1 ...................... Passed 79.68 sec; Start 324: sapt8; 311/411 Test #321: sapt-dft-api ..................... Passed 17.54 sec; Start 326: scf-ecp; 312/411 Test #324: sapt8 ............................ Passed 14.36 sec; Start 327: scf-guess-read1; 313/411 Test #322: sapt-dft-lrc ..................... Passed 19.67 sec; Start 328: scf-upcast-custom-basis; 314/411 Test #327: scf-guess-read1 .................. Passed 1.73 sec; Start 329: scf-guess-read2; 315/411 Test #328: scf-upcast-custom-basis .......... Passed 2.25 sec; Start 330: scf-bs; 316/411 Test #330: scf-bs ........................... Passed 1.13 sec; Start 331: scf1; 317/411 Test #329: scf-guess-read2 .................. Passed 5.42 sec; Start 332: scf-occ; 318/411 Test #331: scf1 ............................. Passed 4.19 sec; Start 333: scf2; 319/411 Test #332: scf-occ .......................... Passed 2.05 sec; Start 334: scf3; 320/411 Test #333: scf2 ............................. Passed 1.46 sec; Start 335: scf4; 321/411 Test #334: scf3 ............................. Passed 1.04 sec; Start 336: scf5; 322/411 Test #281: opt-irc-2 ........................ Passed 158.20 sec; Start 337: scf6; 323/411 Test #335: scf4 ............................. Passed 10.60 sec; Start 338,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1087#issuecomment-408854538:29198,Test,Test,29198,https://psicode.org,https://github.com/psi4/psi4/pull/1087#issuecomment-408854538,1,['Test'],['Test']
Testability,#300: pubchem2 ......................... Passed 1.65 sec; Start 259: omp3-1; 361/413 Test #241: numpy-array-interface ............ Passed 0.85 sec; Start 347: dfep2-2; 362/413 Test #354: stability2 ....................... Passed 2.54 sec; Start 334: scf-occ; 363/413 Test #356: tu2-ch2-energy ................... Passed 1.48 sec; Start 87: cepa0-grad2; 364/413 Test #335: scf2 ............................. Passed 3.66 sec; Start 86: cepa0-grad1; 365/413 Test #351: sapt-sf1 ......................... Passed 2.53 sec; Start 218: mints5; 366/413 Test #347: dfep2-2 .......................... Passed 2.64 sec; Start 366: options1; 367/413 Test #388: cookbook-rohf-orb-rot ............ Passed 255.11 sec; Start 217: mints4; 368/413 Test #218: mints5 ........................... Passed 1.11 sec; Start 345: stability1; 369/413 Test #366: options1 ......................... Passed 0.73 sec; Start 332: scf-bs; 370/413 Test #217: mints4 ........................... Passed 0.72 sec; Start 290: psimrcc-ccsd_t-2; 371/413 Test #334: scf-occ .......................... Passed 3.43 sec; Start 214: mints1; 372/413 Test #271: opt3 ............................. Passed 5.90 sec; Start 138: dfmp2-grad3; 373/413 Test #214: mints1 ........................... Passed 0.75 sec; Start 121: dfcasscf-sp; 374/413 Test #4: casscf-semi ...................... Passed 15.31 sec; Start 173: dft2; 375/413 Test #15: cbs-xtpl-freq .................... Passed 9.39 sec; Start 329: scf-guess-read1; 376/413 Test #332: scf-bs ........................... Passed 2.15 sec; Start 122: dfccd1; 377/413 Test #259: omp3-1 ........................... Passed 5.99 sec; Start 289: psimrcc-ccsd_t-1; 378/413 Test #312: rasci-c2-active .................. Passed 6.29 sec; Start 177: docs-dft; 379/413 Test #290: psimrcc-ccsd_t-2 ................. Passed 2.32 sec; Start 212: mcscf2; 380/413 Test #331: scf-guess-read2 .................. Passed 6.55 sec; Start 213: mcscf3; 381/413 Test #177: docs-dft ......................... Passed 0.79 sec,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1237#issuecomment-425038275:34945,Test,Test,34945,https://psicode.org,https://github.com/psi4/psi4/pull/1237#issuecomment-425038275,1,['Test'],['Test']
Testability,#300: pywrap-all ....................... Passed 653.37 sec; Start 40: cc25; 7/404 Test #110: dcft4 ............................ Passed 705.73 sec; Start 38: cc23; 8/404 Test #182: isapt1 ........................... Passed 261.69 sec; Start 36: cc21; 9/404 Test #103: dcft-grad1 ....................... Passed 777.60 sec; Start 305: pywrap-checkrun-rohf; 10/404 Test #240: ocepa-freq1 ...................... Passed 422.55 sec; Start 35: cc2; 11/404 Test #394: python-vibanalysis ............... Passed 889.27 sec; Start 76: cc7; 12/404 Test #40: cc25 ............................. Passed 312.62 sec; Start 42: cc27; 13/404 Test #39: cc24 ............................. Passed 352.95 sec; Start 41: cc26; 14/404 Test #38: cc23 ............................. Passed 309.61 sec; Start 18: cbs-xtpl-func; 15/404 Test #36: cc21 ............................. Passed 306.52 sec; Start 181: fsapt-allterms; 16/404 Test #305: pywrap-checkrun-rohf ............. Passed 366.19 sec; Start 193: fd-freq-energy-large; 17/404 Test #306: pywrap-checkrun-uhf .............. Passed 674.61 sec; Start 195: fd-freq-gradient-large; 18/404 Test #181: fsapt-allterms ................... Passed 133.31 sec; Start 278: opt13; 19/404 Test #35: cc2 .............................. Passed 373.72 sec; Start 114: dcft8; 20/404 Test #76: cc7 .............................. Passed 285.74 sec; Start 111: dcft5; 21/404 Test #42: cc27 ............................. Passed 268.89 sec; Start 112: dcft6; 22/404 Test #41: cc26 ............................. Passed 275.32 sec; Start 162: dft-grad-lr3; 23/404 Test #114: dcft8 ............................ Passed 131.78 sec; Start 359: tu6-cp-ne2; 24/404 Test #111: dcft5 ............................ Passed 174.58 sec; Start 281: opt-irc-2; 25/404 Test #112: dcft6 ............................ Passed 118.43 sec; Start 13: cbs-xtpl-alpha; 26/404 Test #359: tu6-cp-ne2 ....................... Passed 79.02 sec; Start 386: cookbook-rohf-orb-rot; 27/404 Test #162: dft-grad-lr3 ................,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-404174338:1755,Test,Test,1755,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-404174338,1,['Test'],['Test']
Testability,#302: pywrap-cbs1 ...................... Passed 557.46 sec; Start 169: dft-vv10; 122/411 Test #169: dft-vv10 ......................... Passed 30.86 sec; Start 60: cc43; 123/411 Test #24: cc13 ............................. Passed 1125.76 sec; Start 218: mints8; 124/411 Test #218: mints8 ........................... Passed 18.42 sec; Start 196: fd-gradient; 125/411 Test #386: cookbook-rohf-orb-rot ............ Passed 956.85 sec; Start 340: soscf-large; 126/411 Test #46: cc30 ............................. Passed 321.69 sec; Start 164: dft-grad1; 127/411 Test #340: soscf-large ...................... Passed 15.63 sec; Start 92: ci-multi; 128/411 Test #164: dft-grad1 ........................ Passed 15.97 sec; Start 200: fnocc2; 129/411 Test #196: fd-gradient ...................... Passed 85.81 sec; Start 57: cc40; 130/411 Test #92: ci-multi ......................... Passed 103.97 sec; Start 324: sapt8; 131/411 Test #324: sapt8 ............................ Passed 21.47 sec; Start 286: props3; 132/411 Test #286: props3 ........................... Passed 13.02 sec; Start 301: pywrap-basis; 133/411 Test #301: pywrap-basis ..................... Passed 24.35 sec; Start 177: extern2; 134/411 Test #58: cc41 ............................. Passed 451.86 sec; Start 242: ocepa-grad2; 135/411 Test #177: extern2 .......................... Passed 47.33 sec; Start 296: psithon2; 136/411 Test #200: fnocc2 ........................... Passed 212.99 sec; Start 27: cc13c; 137/411 Test #296: psithon2 ......................... Passed 37.92 sec; Start 275: opt9; 138/411 Test #275: opt9 ............................. Passed 33.84 sec; Start 194: fd-freq-gradient; 139/411 Test #57: cc40 ............................. Passed 252.59 sec; Start 350: dft-custom; 140/411 Test #114: dcft8 ............................ Passed 1380.21 sec; Start 366: dft-smoke; 141/411 Test #60: cc43 ............................. Passed 383.91 sec; Start 260: omp3-4; 142/411 Test #350: dft-custom ....................... Passed,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1089#issuecomment-408103972:12436,Test,Test,12436,https://psicode.org,https://github.com/psi4/psi4/pull/1089#issuecomment-408103972,1,['Test'],['Test']
Testability,#302: pywrap-checkrun-uhf .............. Passed 947.45 sec; Start 307: rasci-h2o; 256/401 Test #280: props1 ........................... Passed 4.24 sec; Start 221: mom; 257/401 Test #14: cbs-xtpl-energy .................. Passed 9.40 sec; Start 228: mp2p5-grad2; 258/401 Test #140: dfomp2-3 ......................... Passed 6.80 sec; Start 291: psithon1; 259/401 Test #94: cisd-h2o+-2 ...................... Passed 2.70 sec; Start 129: dfmp2-2; 260/401 Test #390: python-3-index-transforms ........ Passed 6.25 sec; Start 267: opt5; 261/401 Test #98: cisd-sp-2 ........................ Passed 2.77 sec; Start 5: casscf-sa-sp; 262/401 Test #309: rasscf-sp ........................ Passed 37.02 sec; Start 176: fsapt-terms; 263/401 Test #48: cc32 ............................. Passed 24.10 sec; Start 225: mp2-grad2; 264/401 Test #362: scf-hess1 ........................ Passed 8.87 sec; Start 224: mp2-grad1; 265/401 Test #307: rasci-h2o ........................ Passed 2.28 sec; Start 84: cepa0-grad1; 266/401 Test #7: casscf-sp ........................ Passed 23.83 sec; Start 194: freq-isotope2; 267/401 Test #251: omp2p5-grad1 ..................... Passed 7.23 sec; Start 180: fci-dipole; 268/401 Test #243: omp2-2 ........................... Passed 20.74 sec; Start 336: soscf-large; 269/401 Test #124: dfccsd-grad1 ..................... Passed 43.20 sec; Start 138: dfomp2-1; 270/401 Test #76: cc8 .............................. Passed 67.25 sec; Start 183: fci-h2o-fzcv; 271/401 Test #221: mom .............................. Passed 3.72 sec; Start 327: scf1; 272/401 Test #15: cbs-xtpl-freq .................... Passed 8.46 sec; Start 217: mints9; 273/401 Test #129: dfmp2-2 .......................... Passed 2.57 sec; Start 229: mp3-grad1; 274/401 Test #82: cdomp2-1 ......................... Passed 9.33 sec; Start 153: dfrasscf-sp; 275/401 Test #267: opt5 ............................. Passed 3.79 sec; Start 239: ocepa1; 276/401 Test #228: mp2p5-grad2 ...................... Passed 5.14 sec;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1071#issuecomment-402453832:25246,Test,Test,25246,https://psicode.org,https://github.com/psi4/psi4/pull/1071#issuecomment-402453832,1,['Test'],['Test']
Testability,#303: pywrap-checkrun-convcrit ......... Passed 54.35 sec; Start 263: omp3-grad2; 150/411 Test #285: props2 ........................... Passed 16.97 sec; Start 12: cbs-parser; 151/411 Test #138: dfmp2-grad5 ...................... Passed 35.59 sec; Start 16: cbs-xtpl-gradient; 152/411 Test #242: ocepa-grad2 ...................... Passed 276.22 sec; Start 26: cc13b; 153/411 Test #16: cbs-xtpl-gradient ................ Passed 81.48 sec; Start 34: cc19; 154/411 Test #28: cc13d ............................ Passed 892.45 sec; Start 65: cc48; 155/411 Test #256: omp2p5-grad2 ..................... Passed 236.27 sec; Start 245: ocepa3; 156/411 Test #12: cbs-parser ....................... Passed 214.30 sec; Start 133: dfmp2-ecp; 157/411 Test #263: omp3-grad2 ....................... Passed 238.71 sec; Start 176: extern1; 158/411 Test #133: dfmp2-ecp ........................ Passed 15.59 sec; Start 261: omp3-5; 159/411 Test #34: cc19 ............................. Passed 179.49 sec; Start 67: cc4a; 160/411 Test #27: cc13c ............................ Passed 433.11 sec; Start 115: dcft9; 161/411 Test #176: extern1 .......................... Passed 40.24 sec; Start 372: dft-custom-hybrid; 162/411 Test #260: omp3-4 ........................... Passed 367.41 sec; Start 104: dcft-grad2; 163/411 Test #372: dft-custom-hybrid ................ Passed 16.33 sec; Start 369: dft-jk; 164/411 Test #369: dft-jk ........................... Passed 14.21 sec; Start 101: cubeprop; 165/411 Test #245: ocepa3 ........................... Passed 125.71 sec; Start 338: scf7; 166/411 Test #101: cubeprop ......................... Passed 12.33 sec; Start 250: omp2-5; 167/411 Test #338: scf7 ............................. Passed 28.83 sec; Start 59: cc42; 168/411 Test #65: cc48 ............................. Passed 220.80 sec; Start 393: python-3-index-transforms; 169/411 Test #393: python-3-index-transforms ........ Passed 9.60 sec; Start 5: casscf-sa-sp; 170/411 Test #67: cc4a ............................. Pas,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1089#issuecomment-408103972:15067,Test,Test,15067,https://psicode.org,https://github.com/psi4/psi4/pull/1089#issuecomment-408103972,1,['Test'],['Test']
Testability,#304: pywrap-checkrun-convcrit ......... Passed 25.61 sec; Start 249: omp2-3; 183/412 Test #173: dft3 ............................. Passed 27.08 sec; Start 178: extern2; 184/412 Test #314: rasscf-sp ........................ Passed 25.89 sec; Start 323: sapt-dft-lrc; 185/412 Test #203: fnocc4 ........................... Passed 22.44 sec; Start 38: cc22; 186/412 Test #278: opt12 ............................ Passed 22.72 sec; Start 21: cc1; 187/412 Test #273: opt6 ............................. Passed 22.63 sec; Start 208: gibbs; 188/412 Test #283: opt-irc-3 ........................ Passed 31.24 sec; Start 276: opt9; 189/412 Test #22: cc10 ............................. Passed 16.39 sec; Start 291: psimrcc-ccsd_t-4; 190/412 Test #110: dcft3 ............................ Passed 13.01 sec; Start 139: dfmp2-grad5; 191/412 Test #359: tu5-sapt ......................... Passed 21.09 sec; Start 297: psithon2; 192/412 Test #164: dft-freq ......................... Passed 23.16 sec; Start 316: sapt1; 193/412 Test #249: omp2-3 ........................... Passed 16.61 sec; Start 24: cc12; 194/412 Test #347: sapt-dft1 ........................ Passed 24.82 sec; Start 239: nbody-intermediates; 195/412 Test #259: omp3-2 ........................... Passed 18.69 sec; Start 322: sapt-dft-api; 196/412 Test #190: fci-tdm-2 ........................ Passed 21.75 sec; Start 255: omp2p5-2; 197/412 Test #178: extern2 .......................... Passed 20.85 sec; Start 177: extern1; 198/412 Test #323: sapt-dft-lrc ..................... Passed 20.48 sec; Start 166: dft-grad2; 199/412 Test #38: cc22 ............................. Passed 18.50 sec; Start 248: omp2-2; 200/412 Test #276: opt9 ............................. Passed 16.37 sec; Start 5: casscf-sa-sp; 201/412 Test #139: dfmp2-grad5 ...................... Passed 16.20 sec; Start 106: dcft-grad3; 202/412 Test #208: gibbs ............................ Passed 19.25 sec; Start 154: dft-grad-lr1; 203/412 Test #297: psithon2 ......................... Pa,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1221#issuecomment-419096646:18134,Test,Test,18134,https://psicode.org,https://github.com/psi4/psi4/pull/1221#issuecomment-419096646,1,['Test'],['Test']
Testability,#306: pywrap-checkrun-uhf .............. Passed 553.42 sec; Start 159: dft-grad-meta; 41/411 Test #240: ocepa-freq1 ...................... Passed 481.84 sec; Start 70: cc52; 42/411 Test #178: fsapt1 ........................... Passed 2085.16 sec; Start 305: pywrap-checkrun-rohf; 43/411 Test #159: dft-grad-meta .................... Passed 50.23 sec; Start 297: pubchem1; 44/411 Test #39: cc24 ............................. Passed 399.92 sec; Start 35: cc2; 45/411 Test #297: pubchem1 ......................... Passed 51.77 sec; Start 75: cc6; 46/411 Test #70: cc52 ............................. Passed 130.41 sec; Start 389: python-pubchem; 47/411 Test #75: cc6 .............................. Passed 86.65 sec; Start 41: cc26; 48/411 Test #389: python-pubchem ................... Passed 53.08 sec; Start 61: cc44; 49/411 Test #111: dcft5 ............................ Passed 256.36 sec; Start 170: dft1-alt; 50/411 Test #61: cc44 ............................. Passed 68.38 sec; Start 100: ci-property; 51/411 Test #170: dft1-alt ......................... Passed 47.95 sec; Start 2: adc2; 52/411 Test #2: adc2 ............................. Passed 41.32 sec; Start 230: mp2-module; 53/411 Test #100: ci-property ...................... Passed 53.35 sec; Start 219: mints-benchmark; 54/411 Test #305: pywrap-checkrun-rohf ............. Passed 328.05 sec; Start 348: sapt-compare; 55/411 Test #219: mints-benchmark .................. Passed 40.12 sec; Start 38: cc23; 56/411 Test #348: sapt-compare ..................... Passed 43.18 sec; Start 131: dfmp2-3; 57/411 Test #230: mp2-module ....................... Passed 79.66 sec; Start 40: cc25; 58/411 Test #145: dfomp2-grad3 ..................... Passed 526.80 sec; Start 19: cbs-xtpl-wrapper; 59/411 Test #131: dfmp2-3 .......................... Passed 40.26 sec; Start 307: pywrap-db1; 60/411 Test #35: cc2 .............................. Passed 327.30 sec; Start 74: cc5a; 61/411 Test #307: pywrap-db1 ....................... Passed 39.70 sec; Start 1,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1089#issuecomment-408103972:4982,Test,Test,4982,https://psicode.org,https://github.com/psi4/psi4/pull/1089#issuecomment-408103972,1,['Test'],['Test']
Testability,#30: cc15 ............................. Passed 45.82 sec; Start 92: ci-multi; 130/411 Test #147: dfomp3-2 ......................... Passed 39.98 sec; Start 56: cc4; 131/411 Test #144: dfomp2-grad2 ..................... Passed 48.38 sec; Start 290: psimrcc-ccsd_t-4; 132/411 Test #261: omp3-5 ........................... Passed 59.17 sec; Start 250: omp2-5; 133/411 Test #290: psimrcc-ccsd_t-4 ................. Passed 17.78 sec; Start 321: sapt-dft-api; 134/411 Test #92: ci-multi ......................... Passed 24.62 sec; Start 172: dft3; 135/411 Test #56: cc4 .............................. Passed 26.86 sec; Start 160: dft-grad-lr1; 136/411 Test #26: cc13b ............................ Passed 49.02 sec; Start 67: cc4a; 137/411 Test #249: omp2-4 ........................... Passed 45.04 sec; Start 165: dft-grad2; 138/411 Test #260: omp3-4 ........................... Passed 41.30 sec; Start 64: cc47; 139/411 Test #321: sapt-dft-api ..................... Passed 18.17 sec; Start 263: omp3-grad2; 140/411 Test #250: omp2-5 ........................... Passed 27.95 sec; Start 315: sapt1; 141/411 Test #172: dft3 ............................. Passed 20.49 sec; Start 20: cc1; 142/411 Test #160: dft-grad-lr1 ..................... Passed 17.39 sec; Start 337: scf6; 143/411 Test #165: dft-grad2 ........................ Passed 16.86 sec; Start 151: dfomp2p5-2; 144/411 Test #67: cc4a ............................. Passed 20.12 sec; Start 267: opt2; 145/411 Test #315: sapt1 ............................ Passed 18.24 sec; Start 277: opt12; 146/411 Test #64: cc47 ............................. Passed 27.34 sec; Start 245: ocepa3; 147/411 Test #267: opt2 ............................. Passed 20.06 sec; Start 153: dfomp2p5-grad2; 148/411 Test #337: scf6 ............................. Passed 34.12 sec; Start 82: cc9a; 149/411 Test #151: dfomp2p5-2 ....................... Passed 33.19 sec; Start 12: cbs-parser; 150/411 Test #277: opt12 ............................ Passed 20.31 sec; Start 169: dft-v,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1078#issuecomment-408900195:13098,Test,Test,13098,https://psicode.org,https://github.com/psi4/psi4/pull/1078#issuecomment-408900195,1,['Test'],['Test']
Testability,#310: rasci-c2-active .................. Passed 4.62 sec; Start 311: rasci-h2o; 308/411 Test #311: rasci-h2o ........................ Passed 2.08 sec; Start 312: rasci-ne; 309/411 Test #281: opt-irc-2 ........................ Passed 140.99 sec; Start 313: rasscf-sp; 310/411 Test #307: pywrap-db1 ....................... Passed 38.43 sec; Start 314: sad1; 311/411 Test #314: sad1 ............................. Passed 3.39 sec; Start 315: sapt1; 312/411 Test #312: rasci-ne ......................... Passed 32.88 sec; Start 317: sapt3; 313/411 Test #313: rasscf-sp ........................ Passed 19.44 sec; Start 319: sapt5; 314/411 Test #315: sapt1 ............................ Passed 17.26 sec; Start 320: sapt6; 315/411 Test #302: pywrap-cbs1 ...................... Passed 110.32 sec; Start 321: sapt-dft-api; 316/411 Test #321: sapt-dft-api ..................... Passed 17.85 sec; Start 322: sapt-dft-lrc; 317/411 Test #322: sapt-dft-lrc ..................... Passed 19.61 sec; Start 323: sapt7; 318/411 Test #317: sapt3 ............................ Passed 69.30 sec; Start 324: sapt8; 319/411 Test #319: sapt5 ............................ Passed 69.98 sec; Start 326: scf-ecp; 320/411 Test #324: sapt8 ............................ Passed 16.72 sec; Start 327: scf-guess-read1; 321/411 Test #327: scf-guess-read1 .................. Passed 3.05 sec; Start 328: scf-upcast-custom-basis; 322/411 Test #328: scf-upcast-custom-basis .......... Passed 2.33 sec; Start 329: scf-guess-read2; 323/411 Test #323: sapt7 ............................ Passed 32.01 sec; Start 330: scf-bs; 324/411 Test #329: scf-guess-read2 .................. Passed 6.31 sec; Start 331: scf1; 325/411 Test #330: scf-bs ........................... Passed 1.24 sec; Start 332: scf-occ; 326/411 Test #332: scf-occ .......................... Passed 4.44 sec; Start 333: scf2; 327/411 Test #331: scf1 ............................. Passed 5.69 sec; Start 334: scf3; 328/411 Test #333: scf2 ............................. Passed 2.02 ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1115#issuecomment-411094637:29535,Test,Test,29535,https://psicode.org,https://github.com/psi4/psi4/pull/1115#issuecomment-411094637,1,['Test'],['Test']
Testability,#310: rasci-c2-active .................. Passed 4.86 sec; Start 311: rasci-h2o; 308/411 Test #311: rasci-h2o ........................ Passed 2.82 sec; Start 312: rasci-ne; 309/411 Test #307: pywrap-db1 ....................... Passed 43.65 sec; Start 313: rasscf-sp; 310/411 Test #312: rasci-ne ......................... Passed 32.55 sec; Start 314: sad1; 311/411 Test #314: sad1 ............................. Passed 3.45 sec; Start 315: sapt1; 312/411 Test #315: sapt1 ............................ Passed 18.51 sec; Start 317: sapt3; 313/411 Test #281: opt-irc-2 ........................ Passed 196.68 sec; Start 319: sapt5; 314/411 Test #313: rasscf-sp ........................ Passed 35.03 sec; Start 320: sapt6; 315/411 Test #302: pywrap-cbs1 ...................... Passed 147.95 sec; Start 321: sapt-dft-api; 316/411 Test #321: sapt-dft-api ..................... Passed 17.52 sec; Start 322: sapt-dft-lrc; 317/411 Test #317: sapt3 ............................ Passed 72.30 sec; Start 323: sapt7; 318/411 Test #319: sapt5 ............................ Passed 72.43 sec; Start 324: sapt8; 319/411 Test #322: sapt-dft-lrc ..................... Passed 20.12 sec; Start 326: scf-ecp; 320/411 Test #324: sapt8 ............................ Passed 15.58 sec; Start 327: scf-guess-read1; 321/411 Test #327: scf-guess-read1 .................. Passed 1.64 sec; Start 328: scf-upcast-custom-basis; 322/411 Test #328: scf-upcast-custom-basis .......... Passed 2.00 sec; Start 329: scf-guess-read2; 323/411 Test #329: scf-guess-read2 .................. Passed 7.83 sec; Start 330: scf-bs; 324/411 Test #330: scf-bs ........................... Passed 1.66 sec; Start 331: scf1; 325/411 Test #323: sapt7 ............................ Passed 34.07 sec; Start 332: scf-occ; 326/411 Test #331: scf1 ............................. Passed 6.42 sec; Start 333: scf2; 327/411 Test #332: scf-occ .......................... Passed 4.39 sec; Start 334: scf3; 328/411 Test #326: scf-ecp .......................... Passed 32.04,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1091#issuecomment-409148219:29519,Test,Test,29519,https://psicode.org,https://github.com/psi4/psi4/pull/1091#issuecomment-409148219,1,['Test'],['Test']
Testability,#311: rasci-h2o ........................ Passed 2.82 sec; Start 312: rasci-ne; 309/411 Test #307: pywrap-db1 ....................... Passed 43.65 sec; Start 313: rasscf-sp; 310/411 Test #312: rasci-ne ......................... Passed 32.55 sec; Start 314: sad1; 311/411 Test #314: sad1 ............................. Passed 3.45 sec; Start 315: sapt1; 312/411 Test #315: sapt1 ............................ Passed 18.51 sec; Start 317: sapt3; 313/411 Test #281: opt-irc-2 ........................ Passed 196.68 sec; Start 319: sapt5; 314/411 Test #313: rasscf-sp ........................ Passed 35.03 sec; Start 320: sapt6; 315/411 Test #302: pywrap-cbs1 ...................... Passed 147.95 sec; Start 321: sapt-dft-api; 316/411 Test #321: sapt-dft-api ..................... Passed 17.52 sec; Start 322: sapt-dft-lrc; 317/411 Test #317: sapt3 ............................ Passed 72.30 sec; Start 323: sapt7; 318/411 Test #319: sapt5 ............................ Passed 72.43 sec; Start 324: sapt8; 319/411 Test #322: sapt-dft-lrc ..................... Passed 20.12 sec; Start 326: scf-ecp; 320/411 Test #324: sapt8 ............................ Passed 15.58 sec; Start 327: scf-guess-read1; 321/411 Test #327: scf-guess-read1 .................. Passed 1.64 sec; Start 328: scf-upcast-custom-basis; 322/411 Test #328: scf-upcast-custom-basis .......... Passed 2.00 sec; Start 329: scf-guess-read2; 323/411 Test #329: scf-guess-read2 .................. Passed 7.83 sec; Start 330: scf-bs; 324/411 Test #330: scf-bs ........................... Passed 1.66 sec; Start 331: scf1; 325/411 Test #323: sapt7 ............................ Passed 34.07 sec; Start 332: scf-occ; 326/411 Test #331: scf1 ............................. Passed 6.42 sec; Start 333: scf2; 327/411 Test #332: scf-occ .......................... Passed 4.39 sec; Start 334: scf3; 328/411 Test #326: scf-ecp .......................... Passed 32.04 sec; Start 335: scf4; 329/411 Test #334: scf3 ............................. Passed 1.45 sec; ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1091#issuecomment-409148219:29609,Test,Test,29609,https://psicode.org,https://github.com/psi4/psi4/pull/1091#issuecomment-409148219,1,['Test'],['Test']
Testability,#311: rasci-h2o ........................ Passed 3.66 sec; Start 312: rasci-ne; 309/411 Test #281: opt-irc-2 ........................ Passed 200.49 sec; Start 313: rasscf-sp; 310/411 Test #307: pywrap-db1 ....................... Passed 44.94 sec; Start 314: sad1; 311/411 Test #314: sad1 ............................. Passed 3.59 sec; Start 315: sapt1; 312/411 Test #315: sapt1 ............................ Passed 20.29 sec; Start 317: sapt3; 313/411 Test #312: rasci-ne ......................... Passed 34.02 sec; Start 319: sapt5; 314/411 Test #313: rasscf-sp ........................ Passed 52.33 sec; Start 320: sapt6; 315/411 Test #302: pywrap-cbs1 ...................... Passed 212.20 sec; Start 321: sapt-dft-api; 316/411 Test #317: sapt3 ............................ Passed 73.42 sec; Start 322: sapt-dft-lrc; 317/411 Test #319: sapt5 ............................ Passed 77.57 sec; Start 323: sapt7; 318/411 Test #321: sapt-dft-api ..................... Passed 19.67 sec; Start 324: sapt8; 319/411 Test #322: sapt-dft-lrc ..................... Passed 20.38 sec; Start 326: scf-ecp; 320/411 Test #324: sapt8 ............................ Passed 18.16 sec; Start 327: scf-guess-read1; 321/411 Test #327: scf-guess-read1 .................. Passed 3.44 sec; Start 328: scf-upcast-custom-basis; 322/411 Test #328: scf-upcast-custom-basis .......... Passed 2.83 sec; Start 329: scf-guess-read2; 323/411 Test #323: sapt7 ............................ Passed 35.22 sec; Start 330: scf-bs; 324/411 Test #329: scf-guess-read2 .................. Passed 8.70 sec; Start 331: scf1; 325/411 Test #330: scf-bs ........................... Passed 4.28 sec; Start 332: scf-occ; 326/411 Test #332: scf-occ .......................... Passed 4.04 sec; Start 333: scf2; 327/411 Test #331: scf1 ............................. Passed 7.71 sec; Start 334: scf3; 328/411 Test #333: scf2 ............................. Passed 2.64 sec; Start 335: scf4; 329/411 Test #334: scf3 ............................. Passed 1.41 sec; S,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1067#issuecomment-409148828:29611,Test,Test,29611,https://psicode.org,https://github.com/psi4/psi4/pull/1067#issuecomment-409148828,1,['Test'],['Test']
Testability,#312: rasci-ne ......................... Passed 36.29 sec; Start 256: omp2p5-grad2; 115/411 Test #260: omp3-4 ........................... Passed 172.67 sec; Start 237: nbody-he-cluster; 116/411 Test #206: ghosts ........................... Passed 37.33 sec; Start 64: cc47; 117/411 Test #34: cc19 ............................. Passed 105.53 sec; Start 151: dfomp2p5-2; 118/411 Test #73: cc55 ............................. Passed 109.40 sec; Start 55: cc39; 119/411 Test #63: cc46 ............................. Passed 85.23 sec; Start 323: sapt7; 120/411 Test #237: nbody-he-cluster ................. Passed 65.52 sec; Start 67: cc4a; 121/411 Test #323: sapt7 ............................ Passed 32.27 sec; Start 129: dfmp2-1; 122/411 Test #64: cc47 ............................. Passed 86.29 sec; Start 276: opt11; 123/411 Test #261: omp3-5 ........................... Passed 157.82 sec; Start 106: dcft-grad4; 124/411 Test #256: omp2p5-grad2 ..................... Passed 106.36 sec; Start 78: cc8a; 125/411 Test #55: cc39 ............................. Passed 61.61 sec; Start 273: opt7; 126/411 Test #129: dfmp2-1 .......................... Passed 33.05 sec; Start 80: cc8c; 127/411 Test #151: dfomp2p5-2 ....................... Passed 82.30 sec; Start 360: x2c1; 128/411 Test #67: cc4a ............................. Passed 45.28 sec; Start 337: scf6; 129/411 Test #106: dcft-grad4 ....................... Passed 39.15 sec; Start 1: adc1; 130/411 Test #276: opt11 ............................ Passed 56.48 sec; Start 56: cc4; 131/411 Test #78: cc8a ............................. Passed 47.51 sec; Start 342: soscf-dft; 132/411 Test #337: scf6 ............................. Passed 35.45 sec; Start 374: dft-custom-gga; 133/411 Test #360: x2c1 ............................. Passed 37.74 sec; Start 71: cc53; 134/411 Test #80: cc8c ............................. Passed 43.04 sec; Start 263: omp3-grad2; 135/411 Test #273: opt7 ............................. Passed 48.34 sec; Start 49: cc33; 136/411 Tes,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1077#issuecomment-409911901:11709,Test,Test,11709,https://psicode.org,https://github.com/psi4/psi4/pull/1077#issuecomment-409911901,1,['Test'],['Test']
Testability,#313: rasci-ne ......................... Passed 42.92 sec; Start 130: dfmp2-1; 153/412 Test #197: fd-gradient ...................... Passed 31.43 sec; Start 127: dfccsd-t-grad1; 154/412 Test #275: opt8 ............................. Passed 32.57 sec; Start 253: omp2-grad2; 155/412 Test #34: cc18 ............................. Passed 20.64 sec; Start 375: dft-custom-gga; 156/412 Test #134: dfmp2-ecp ........................ Passed 42.25 sec; Start 324: sapt7; 157/412 Test #207: ghosts ........................... Passed 42.65 sec; Start 343: soscf-dft; 158/412 Test #127: dfccsd-t-grad1 ................... Passed 21.66 sec; Start 63: cc45; 159/412 Test #253: omp2-grad2 ....................... Passed 23.46 sec; Start 52: cc35; 160/412 Test #130: dfmp2-1 .......................... Passed 38.02 sec; Start 51: cc34; 161/412 Test #63: cc45 ............................. Passed 12.62 sec; Start 49: cc32; 162/412 Test #51: cc34 ............................. Passed 13.14 sec; Start 327: scf-ecp; 163/412 Test #375: dft-custom-gga ................... Passed 39.00 sec; Start 149: dfomp3-grad1; 164/412 Test #52: cc35 ............................. Passed 19.98 sec; Start 7: casscf-sp; 165/412 Test #49: cc32 ............................. Passed 11.13 sec; Start 16: cbs-xtpl-gradient; 166/412 Test #343: soscf-dft ........................ Passed 37.42 sec; Start 283: opt-irc-3; 167/412 Test #324: sapt7 ............................ Passed 41.10 sec; Start 314: rasscf-sp; 168/412 Test #149: dfomp3-grad1 ..................... Passed 14.19 sec; Start 50: cc33; 169/412 Test #7: casscf-sp ........................ Passed 17.08 sec; Start 1: adc1; 170/412 Test #327: scf-ecp .......................... Passed 29.95 sec; Start 22: cc10; 171/412 Test #16: cbs-xtpl-gradient ................ Passed 24.07 sec; Start 53: cc36; 172/412 Test #314: rasscf-sp ........................ Passed 15.74 sec; Start 110: dcft3; 173/412 Test #50: cc33 ............................. Passed 20.75 sec; Start 203: fnocc4; ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1225#issuecomment-419883272:15146,Test,Test,15146,https://psicode.org,https://github.com/psi4/psi4/pull/1225#issuecomment-419883272,1,['Test'],['Test']
Testability,#316: sapt2 ............................ Passed 305.80 sec; Start 319: sapt5; 59/411 Test #58: cc41 ............................. Passed 36.59 sec; Start 69: cc51; 60/411 Test #230: mp2-module ....................... Passed 54.15 sec; Start 60: cc43; 61/411 Test #91: cepa-module ...................... Passed 23.95 sec; Start 167: dft-b3lyp; 62/411 Test #279: opt14 ............................ Passed 73.59 sec; Start 74: cc5a; 63/411 Test #60: cc43 ............................. Passed 20.33 sec; Start 204: frac-ip-fitting; 64/411 Test #317: sapt3 ............................ Passed 71.21 sec; Start 104: dcft-grad2; 65/411 Test #104: dcft-grad2 ....................... Passed 11.72 sec; Start 115: dcft9; 66/411 Test #74: cc5a ............................. Passed 36.60 sec; Start 292: psimrcc-fd-freq2; 67/411 Test #69: cc51 ............................. Passed 55.79 sec; Start 19: cbs-xtpl-wrapper; 68/411 Test #319: sapt5 ............................ Passed 62.74 sec; Start 144: dfomp2-grad2; 69/411 Test #115: dcft9 ............................ Passed 17.82 sec; Start 46: cc30; 70/411 Test #144: dfomp2-grad2 ..................... Passed 12.75 sec; Start 61: cc44; 71/411 Test #167: dft-b3lyp ........................ Passed 61.83 sec; Start 149: dfomp3-grad2; 72/411 Test #204: frac-ip-fitting .................. Passed 58.04 sec; Start 11: cbs-delta-energy; 73/411 Test #149: dfomp3-grad2 ..................... Passed 14.73 sec; Start 43: cc28; 74/411 Test #46: cc30 ............................. Passed 23.10 sec; Start 259: omp3-3; 75/411 Test #19: cbs-xtpl-wrapper ................. Passed 46.33 sec; Start 17: cbs-xtpl-opt; 76/411 Test #292: psimrcc-fd-freq2 ................. Passed 55.91 sec; Start 100: ci-property; 77/411 Test #61: cc44 ............................. Passed 42.92 sec; Start 389: python-pubchem; 78/411 Test #43: cc28 ............................. Passed 33.97 sec; Start 159: dft-grad-meta; 79/411 Test #259: omp3-3 ........................... Passed 34.08 sec,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-405575064:6637,Test,Test,6637,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-405575064,1,['Test'],['Test']
Testability,#316: sapt6 ............................ Passed 72.26 sec; Start 11: cbs-delta-energy; 36/401 Test #25: cc13a ............................ Passed 519.27 sec; Start 27: cc13c; 37/401 Test #47: cc31 ............................. Passed 131.54 sec; Start 61: cc44; 38/401 Test #74: cc6 .............................. Passed 78.78 sec; Start 12: cbs-parser; 39/401 Test #200: frac-ip-fitting .................. Passed 56.76 sec; Start 255: omp3-3; 40/401 Test #343: sapt-dft2 ........................ Passed 53.47 sec; Start 60: cc43; 41/401 Test #166: dft1-alt ......................... Passed 54.05 sec; Start 163: dft-b3lyp; 42/401 Test #44: cc29 ............................. Passed 150.02 sec; Start 233: nbody-he-cluster; 43/401 Test #29: cc14 ............................. Passed 290.28 sec; Start 46: cc30; 44/401 Test #31: cc16 ............................. Passed 204.91 sec; Start 143: dfomp2-grad2; 45/401 Test #114: dcft9 ............................ Passed 101.63 sec; Start 57: cc40; 46/401 Test #366: dft-custom-dhdf .................. Passed 49.28 sec; Start 257: omp3-5; 47/401 Test #301: pywrap-checkrun-rohf ............. Passed 555.72 sec; Start 272: opt11; 48/401 Test #69: cc52 ............................. Passed 122.20 sec; Start 68: cc51; 49/401 Test #163: dft-b3lyp ........................ Passed 36.67 sec; Start 256: omp3-4; 50/401 Test #24: cc13 ............................. Passed 251.21 sec; Start 246: omp2-5; 51/401 Test #12: cbs-parser ....................... Passed 50.44 sec; Start 64: cc48; 52/401 Test #61: cc44 ............................. Passed 62.83 sec; Start 73: cc5a; 53/401 Test #233: nbody-he-cluster ................. Passed 47.19 sec; Start 240: ocepa2; 54/401 Test #58: cc41 ............................. Passed 109.69 sec; Start 333: scf6; 55/401 Test #272: opt11 ............................ Passed 51.45 sec; Start 245: omp2-4; 56/401 Test #28: cc13d ............................ Passed 217.30 sec; Start 369: dft-custom-gga; 57/401 Test #57: cc40,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1071#issuecomment-402453832:4944,Test,Test,4944,https://psicode.org,https://github.com/psi4/psi4/pull/1071#issuecomment-402453832,1,['Test'],['Test']
Testability,#31: cc15 ............................. Passed 68.36 sec; Start 207: frac-traverse; 60/413 Test #195: fd-freq-energy-large ............. Passed 510.05 sec; Start 318: sapt2; 61/413 Test #76: cc6 .............................. Passed 93.91 sec; Start 320: sapt4; 62/413 Test #185: isapt2 ........................... Passed 117.61 sec; Start 327: scf-bz2; 63/413 Test #156: dft-grad-lr2 ..................... Passed 107.86 sec; Start 252: omp2-5; 64/413 Test #232: mp2-module ....................... Passed 75.42 sec; Start 151: dfomp3-grad2; 65/413 Test #170: dft1 ............................. Passed 105.14 sec; Start 58: cc40; 66/413 Test #75: cc5a ............................. Passed 70.15 sec; Start 19: cbs-xtpl-nbody; 67/413 Test #62: cc44 ............................. Passed 56.22 sec; Start 47: cc30; 68/413 Test #70: cc51 ............................. Passed 79.80 sec; Start 244: ocepa-grad2; 69/413 Test #183: fsapt-allterms ................... Passed 566.00 sec; Start 373: dft-custom-dhdf; 70/413 Test #252: omp2-5 ........................... Passed 67.36 sec; Start 282: opt-irc-1; 71/413 Test #151: dfomp3-grad2 ..................... Passed 66.98 sec; Start 17: cbs-xtpl-opt; 72/413 Test #47: cc30 ............................. Passed 68.93 sec; Start 265: omp3-grad2; 73/413 Test #244: ocepa-grad2 ...................... Passed 64.99 sec; Start 281: opt14; 74/413 Test #58: cc40 ............................. Passed 77.29 sec; Start 20: cbs-xtpl-wrapper; 75/413 Test #19: cbs-xtpl-nbody ................... Passed 78.00 sec; Start 194: fd-freq-energy; 76/413 Test #327: scf-bz2 .......................... Passed 122.73 sec; Start 60: cc42; 77/413 Test #373: dft-custom-dhdf .................. Passed 91.90 sec; Start 246: ocepa2; 78/413 Test #282: opt-irc-1 ........................ Passed 84.38 sec; Start 319: sapt3; 79/413 Test #265: omp3-grad2 ....................... Passed 64.41 sec; Start 21: cc1; 80/413 Test #60: cc42 ............................. Passed 60.49 sec; Start 1,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1246#issuecomment-425384085:6833,Test,Test,6833,https://psicode.org,https://github.com/psi4/psi4/pull/1246#issuecomment-425384085,1,['Test'],['Test']
Testability,"#320: sapt4 ............................ Passed 1820.54 sec. 100% tests passed, 0 tests failed out of 413. Label Time Summary:; adc = 60.32 sec*proc (2 tests); autotest = 2172.08 sec*proc (26 tests); cart = 18455.22 sec*proc (123 tests); cas = 58.02 sec*proc (1 test); casscf = 81.96 sec*proc (11 tests); cbs = 2562.37 sec*proc (11 tests); cc = 14549.66 sec*proc (65 tests); cdomp2 = 54.85 sec*proc (2 tests); cepa = 139.13 sec*proc (7 tests); ci = 107.75 sec*proc (8 tests); cisd = 200.26 sec*proc (7 tests); cookbook = 185.01 sec*proc (1 test); cubeprop = 22.93 sec*proc (3 tests); dcft = 5260.08 sec*proc (13 tests); df = 2336.92 sec*proc (38 tests); dfccd = 2.17 sec*proc (1 test); dfccd-grad = 6.57 sec*proc (1 test); dfccdl = 3.04 sec*proc (1 test); dfccsd = 3.47 sec*proc (1 test); dfccsd-grad = 50.32 sec*proc (1 test); dfccsd-t-grad = 60.82 sec*proc (1 test); dfccsdat = 16.81 sec*proc (1 test); dfccsdl = 8.14 sec*proc (1 test); dfccsdt = 5.36 sec*proc (1 test); dfep2 = 6.37 sec*proc (2 tests); dfmp2 = 166.54 sec*proc (11 tests); dfomp2 = 1292.12 sec*proc (7 tests); dfomp2.5 = 211.67 sec*proc (4 tests); dfomp3 = 248.61 sec*proc (4 tests); dfscf = 154.39 sec*proc (1 test); dft = 1448.47 sec*proc (27 tests); docs = 1.22 sec*proc (2 tests); ecp = 64.69 sec*proc (2 tests); fci = 12.06 sec*proc (2 tests); fcidump = 5.26 sec*proc (1 test); findif = 1032.18 sec*proc (5 tests); fnocc = 132.10 sec*proc (4 tests); freq = 1399.22 sec*proc (6 tests); gradient = 2183.56 sec*proc (16 tests); json = 19.48 sec*proc (8 tests); longtests = 3608.99 sec*proc (5 tests); mcscf = 4.67 sec*proc (3 tests); minitests = 74.31 sec*proc (4 tests); mints = 91.36 sec*proc (14 tests); misc = 524.50 sec*proc (16 tests); mp2 = 578.76 sec*proc (13 tests); nbody = 76.59 sec*proc (2 tests); numpy = 0.81 sec*proc (1 test); ocepa = 872.52 sec*proc (6 tests); omp = 788.85 sec*proc (18 tests); opt = 1524.66 sec*proc (21 tests); plug = 13.98 sec*proc (7 tests); prop = 2.49 sec*proc (1 test); properties = 141.03 ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1239#issuecomment-425082026:39515,test,tests,39515,https://psicode.org,https://github.com/psi4/psi4/pull/1239#issuecomment-425082026,1,['test'],['tests']
Testability,#326: scf-ecp .......................... Passed 26.12 sec; Start 20: cc1; 148/411 Test #125: dfccsd-grad1 ..................... Passed 16.34 sec; Start 166: dft-psivar; 149/411 Test #142: dfomp2-4 ......................... Passed 15.37 sec; Start 173: dft-omega; 150/411 Test #84: cdomp2-2 ......................... Passed 11.26 sec; Start 12: cbs-parser; 151/411 Test #72: cc54 ............................. Passed 9.82 sec; Start 375: pywrap-bfs; 152/411 Test #156: dft-b2plyp ....................... Passed 23.12 sec; Start 202: fnocc4; 153/411 Test #20: cc1 .............................. Passed 16.97 sec; Start 148: dfomp3-grad1; 154/411 Test #264: opt-lindep-change ................ Passed 24.67 sec; Start 207: gibbs; 155/411 Test #166: dft-psivar ....................... Passed 23.02 sec; Start 54: cc38; 156/411 Test #173: dft-omega ........................ Passed 24.28 sec; Start 51: cc35; 157/411 Test #375: pywrap-bfs ....................... Passed 23.88 sec; Start 152: dfomp2p5-grad1; 158/411 Test #148: dfomp3-grad1 ..................... Passed 16.19 sec; Start 189: fci-tdm-2; 159/411 Test #12: cbs-parser ....................... Passed 28.71 sec; Start 33: cc18; 160/411 Test #202: fnocc4 ........................... Passed 22.98 sec; Start 163: dft-freq; 161/411 Test #207: gibbs ............................ Passed 21.15 sec; Start 16: cbs-xtpl-gradient; 162/411 Test #54: cc38 ............................. Passed 19.13 sec; Start 49: cc33; 163/411 Test #152: dfomp2p5-grad1 ................... Passed 14.78 sec; Start 172: dft3; 164/411 Test #51: cc35 ............................. Passed 18.61 sec; Start 277: opt12; 165/411 Test #189: fci-tdm-2 ........................ Passed 19.97 sec; Start 346: sapt-dft1; 166/411 Test #33: cc18 ............................. Passed 19.88 sec; Start 360: x2c1; 167/411 Test #163: dft-freq ......................... Passed 20.91 sec; Start 252: omp2-grad2; 168/411 Test #49: cc33 ............................. Passed 15.20 sec; Start 322: ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-405575064:14762,Test,Test,14762,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-405575064,1,['Test'],['Test']
Testability,#327: scf-bz2 .......................... Passed 127.64 sec; Start 109: dcft1; 84/413 Test #65: cc47 ............................. Passed 41.31 sec; Start 20: cbs-xtpl-wrapper; 85/413 Test #282: opt-irc-1 ........................ Passed 95.47 sec; Start 258: omp2p5-grad2; 86/413 Test #158: dfomp2p5-grad2 ................... Passed 61.57 sec; Start 144: dfomp2-4; 87/413 Test #35: cc19 ............................. Passed 58.05 sec; Start 319: sapt3; 88/413 Test #194: fd-freq-energy ................... Passed 85.55 sec; Start 82: cc9; 89/413 Test #64: cc46 ............................. Passed 87.60 sec; Start 153: dfomp2p5-2; 90/413 Test #207: frac-traverse .................... Passed 238.30 sec; Start 321: sapt5; 91/413 Test #258: omp2p5-grad2 ..................... Passed 77.83 sec; Start 294: psimrcc-fd-freq2; 92/413 Test #109: dcft1 ............................ Passed 84.01 sec; Start 67: cc49; 93/413 Test #144: dfomp2-4 ......................... Passed 69.24 sec; Start 79: cc8a; 94/413 Test #20: cbs-xtpl-wrapper ................. Passed 95.04 sec; Start 78: cc8; 95/413 Test #265: omp3-grad2 ....................... Passed 116.89 sec; Start 83: cc9a; 96/413 Test #153: dfomp2p5-2 ....................... Passed 53.80 sec; Start 81: cc8c; 97/413 Test #319: sapt3 ............................ Passed 78.68 sec; Start 206: frac-ip-fitting; 98/413 Test #82: cc9 .............................. Passed 72.01 sec; Start 391: python-pubchem; 99/413 Test #79: cc8a ............................. Passed 45.79 sec; Start 57: cc4; 100/413 Test #67: cc49 ............................. Passed 49.51 sec; Start 142: dfomp2-2; 101/413 Test #321: sapt5 ............................ Passed 77.16 sec; Start 247: ocepa3; 102/413 Test #294: psimrcc-fd-freq2 ................. Passed 73.49 sec; Start 169: dft-b3lyp; 103/413 Test #83: cc9a ............................. Passed 45.91 sec; Start 12: cbs-parser; 104/413 Test #78: cc8 .............................. Passed 64.94 sec; Start 34: cc18; 105/413 ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1239#issuecomment-425082026:9005,Test,Test,9005,https://psicode.org,https://github.com/psi4/psi4/pull/1239#issuecomment-425082026,1,['Test'],['Test']
Testability,#333: scf2 ............................. Passed 2.64 sec; Start 335: scf4; 329/411 Test #334: scf3 ............................. Passed 1.41 sec; Start 336: scf5; 330/411 Test #326: scf-ecp .......................... Passed 35.82 sec; Start 337: scf6; 331/411 Test #335: scf4 ............................. Passed 26.29 sec; Start 338: scf7; 332/411 Test #338: scf7 ............................. Passed 20.85 sec; Start 339: scf-property; 333/411 Test #339: scf-property ..................... Passed 6.97 sec; Start 340: soscf-large; 334/411 Test #336: scf5 ............................. Passed 60.32 sec; Start 341: soscf-ref; 335/411 Test #320: sapt6 ............................ Passed 167.24 sec; Start 342: soscf-dft; 336/411 Test #340: soscf-large ...................... Passed 14.26 sec; Start 343: stability1; 337/411 Test #343: stability1 ....................... Passed 5.25 sec; Start 344: dfep2-1; 338/411 Test #337: scf6 ............................. Passed 72.37 sec; Start 345: dfep2-2; 339/411 Test #344: dfep2-1 .......................... Passed 3.50 sec; Start 346: sapt-dft1; 340/411 Test #345: dfep2-2 .......................... Passed 2.09 sec; Start 347: sapt-dft2; 341/411 Test #341: soscf-ref ........................ Passed 18.07 sec; Start 348: sapt-compare; 342/411 Test #342: soscf-dft ........................ Passed 32.35 sec; Start 349: sapt-sf1; 343/411 Test #349: sapt-sf1 ......................... Passed 2.84 sec; Start 350: dft-custom; 344/411 Test #346: sapt-dft1 ........................ Passed 23.48 sec; Start 351: dft-reference; 345/411 Test #351: dft-reference .................... Passed 4.30 sec; Start 352: stability2; 346/411 Test #352: stability2 ....................... Passed 2.78 sec; Start 353: tu1-h2o-energy; 347/411 Test #353: tu1-h2o-energy ................... Passed 1.49 sec; Start 354: tu2-ch2-energy; 348/411 Test #354: tu2-ch2-energy ................... Passed 1.77 sec; Start 355: tu3-h2o-opt; 349/411 Test #350: dft-custom .................,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1067#issuecomment-409148828:31468,Test,Test,31468,https://psicode.org,https://github.com/psi4/psi4/pull/1067#issuecomment-409148828,1,['Test'],['Test']
Testability,"#335: scf3 ............................. Passed 16.05 sec; Start 240: numpy-array-interface; 397/412 Test #383: psi4numpy-rhf .................... Passed 16.60 sec; Start 175: docs-bases; 398/412 Test #217: mints5 ........................... Passed 15.35 sec; Start 216: mints4; 399/412 Test #212: mcscf3 ........................... Passed 15.82 sec; Start 309: pywrap-db3; 400/412 Test #213: mints1 ........................... Passed 14.72 sec; Start 176: docs-dft; 401/412 Test #210: mcscf1 ........................... Passed 15.82 sec; Start 209: matrix1; 402/412 Test #410: skeletonscf ...................... Passed 15.75 sec; Start 365: options1; 403/412 Test #175: docs-bases ....................... Passed 14.47 sec; Start 403: json-schema-1-throws; 404/412 Test #216: mints4 ........................... Passed 14.79 sec; Start 88: cepa1; 405/412 Test #240: numpy-array-interface ............ Passed 15.57 sec; 406/412 Test #309: pywrap-db3 ....................... Passed 14.49 sec; 407/412 Test #209: matrix1 .......................... Passed 15.24 sec; 408/412 Test #176: docs-dft ......................... Passed 16.24 sec; 409/412 Test #365: options1 ......................... Passed 13.68 sec; 410/412 Test #403: json-schema-1-throws ............. Passed 13.62 sec; 411/412 Test #88: cepa1 ............................ Passed 16.51 sec; 412/412 Test #319: sapt4 ............................ Passed 1885.78 sec. 100% tests passed, 0 tests failed out of 412. Label Time Summary:; adc = 85.75 sec*proc (2 tests); autotest = 1081.30 sec*proc (26 tests); cart = 14263.36 sec*proc (123 tests); cas = 59.52 sec*proc (1 test); casscf = 245.49 sec*proc (11 tests); cbs = 978.44 sec*proc (11 tests); cc = 5456.09 sec*proc (65 tests); cdomp2 = 39.91 sec*proc (2 tests); cepa = 180.93 sec*proc (7 tests); ci = 233.38 sec*proc (8 tests); cisd = 294.07 sec*proc (7 tests); cookbook = 58.33 sec*proc (1 test); cubeprop = 77.64 sec*proc (2 tests); dcft = 2278.61 sec*proc (13 tests); df = 1624.44 sec*pro",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1226#issuecomment-420597899:38182,Test,Test,38182,https://psicode.org,https://github.com/psi4/psi4/pull/1226#issuecomment-420597899,1,['Test'],['Test']
Testability,#335: scf4 ............................. Passed 14.54 sec; Start 151: dfomp2p5-2; 206/411 Test #149: dfomp3-grad2 ..................... Passed 250.21 sec; Start 185: fci-h2o; 207/411 Test #71: cc53 ............................. Passed 97.98 sec; Start 252: omp2-grad2; 208/411 Test #376: pywrap-align ..................... Passed 4.72 sec; Start 107: dcft1; 209/411 Test #15: cbs-xtpl-freq .................... Passed 7.87 sec; Start 248: omp2-3; 210/411 Test #185: fci-h2o .......................... Passed 5.91 sec; Start 89: cepa3; 211/411 Test #20: cc1 .............................. Passed 198.16 sec; Start 147: dfomp3-2; 212/411 Test #89: cepa3 ............................ Passed 11.07 sec; Start 192: fd-freq-energy; 213/411 Test #144: dfomp2-grad2 ..................... Passed 87.37 sec; Start 37: cc22; 214/411 Test #248: omp2-3 ........................... Passed 19.53 sec; Start 341: soscf-ref; 215/411 Test #252: omp2-grad2 ....................... Passed 24.12 sec; Start 360: x2c1; 216/411 Test #151: dfomp2p5-2 ....................... Passed 29.24 sec; Start 81: cc9; 217/411 Test #192: fd-freq-energy ................... Passed 9.41 sec; Start 73: cc55; 218/411 Test #30: cc15 ............................. Passed 38.58 sec; Start 179: fsapt2; 219/411 Test #179: fsapt2 ........................... Passed 5.20 sec; Start 82: cc9a; 220/411 Test #341: soscf-ref ........................ Passed 9.34 sec; Start 10: castup3; 221/411 Test #37: cc22 ............................. Passed 22.33 sec; Start 77: cc8; 222/411 Test #10: castup3 .......................... Passed 20.61 sec; Start 80: cc8c; 223/411 Test #107: dcft1 ............................ Passed 58.98 sec; Start 171: dft2; 224/411 Test #171: dft2 ............................. Passed 6.62 sec; Start 266: opt1-fd; 225/411 Test #147: dfomp3-2 ......................... Passed 64.94 sec; Start 23: cc12; 226/411 Test #266: opt1-fd .......................... Passed 34.40 sec; Start 140: dfomp2-2; 227/411 Test #360: x2c1 ....,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1089#issuecomment-408103972:20260,Test,Test,20260,https://psicode.org,https://github.com/psi4/psi4/pull/1089#issuecomment-408103972,1,['Test'],['Test']
Testability,#335: scf4 ............................. Passed 18.87 sec; Start 224: molden2; 250/411 Test #365: cubeprop-esp ..................... Passed 9.37 sec; Start 199: fnocc1; 251/411 Test #124: dfccsdl1 ......................... Passed 13.23 sec; Start 243: ocepa1; 252/411 Test #198: freq-isotope2 .................... Passed 13.17 sec; Start 223: molden1; 253/411 Test #123: dfccsd1 .......................... Passed 16.62 sec; Start 226: mp2-1; 254/411 Test #295: psithon1 ......................... Passed 15.24 sec; Start 341: soscf-ref; 255/411 Test #158: dft-ghost ........................ Passed 10.18 sec; Start 185: fci-h2o; 256/411 Test #139: dfomp2-1 ......................... Passed 18.46 sec; Start 184: fci-dipole; 257/411 Test #4: casscf-semi ...................... Passed 14.76 sec; Start 186: fci-h2o-2; 258/411 Test #192: fd-freq-energy ................... Passed 17.45 sec; Start 132: dfmp2-4; 259/411 Test #224: molden2 .......................... Passed 11.80 sec; Start 6: ao-casscf-sp; 260/411 Test #223: molden1 .......................... Passed 9.22 sec; Start 127: dfccsdt1; 261/411 Test #185: fci-h2o .......................... Passed 7.33 sec; Start 90: cepa1; 262/411 Test #243: ocepa1 ........................... Passed 12.67 sec; Start 9: castup2; 263/411 Test #184: fci-dipole ....................... Passed 8.24 sec; Start 265: opt1; 264/411 Test #266: opt1-fd .......................... Passed 21.17 sec; Start 10: castup3; 265/411 Test #186: fci-h2o-2 ........................ Passed 8.30 sec; Start 339: scf-property; 266/411 Test #241: ocepa-grad1 ...................... Passed 22.53 sec; Start 191: fcidump; 267/411 Test #265: opt1 ............................. Passed 8.60 sec; Start 141: dfomp2-3; 268/411 Test #6: ao-casscf-sp ..................... Passed 11.39 sec; Start 117: dfcasscf-sa-sp; 269/411 Test #339: scf-property ..................... Passed 7.74 sec; Start 88: cepa2; 270/411 Test #199: fnocc1 ........................... Passed 24.12 sec; Start 179: fs,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1072#issuecomment-406602307:24386,Test,Test,24386,https://psicode.org,https://github.com/psi4/psi4/pull/1072#issuecomment-406602307,1,['Test'],['Test']
Testability,#341: soscf-ref ........................ Passed 7.60 sec; Start 83: cdomp2-1; 271/411 Test #184: fci-dipole ....................... Passed 5.99 sec; Start 6: ao-casscf-sp; 272/411 Test #94: cisd-h2o+-1 ...................... Passed 4.91 sec; Start 108: dcft2; 273/411 Test #224: molden2 .......................... Passed 6.22 sec; Start 269: opt3; 274/411 Test #99: cisd-sp-2 ........................ Passed 5.95 sec; Start 329: scf-guess-read2; 275/411 Test #198: freq-isotope2 .................... Passed 8.20 sec; Start 234: mp3-grad2; 276/411 Test #6: ao-casscf-sp ..................... Passed 5.33 sec; Start 339: scf-property; 277/411 Test #83: cdomp2-1 ......................... Passed 7.43 sec; Start 9: castup2; 278/411 Test #269: opt3 ............................. Passed 5.42 sec; Start 10: castup3; 279/411 Test #199: fnocc1 ........................... Passed 13.51 sec; Start 233: mp3-grad1; 280/411 Test #108: dcft2 ............................ Passed 8.11 sec; Start 117: dfcasscf-sa-sp; 281/411 Test #234: mp3-grad2 ........................ Passed 4.58 sec; Start 3: casscf-fzc-sp; 282/411 Test #329: scf-guess-read2 .................. Passed 6.02 sec; Start 331: scf1; 283/411 Test #233: mp3-grad1 ........................ Passed 1.89 sec; Start 171: dft2; 284/411 Test #339: scf-property ..................... Passed 5.57 sec; Start 344: dfep2-1; 285/411 Test #117: dfcasscf-sa-sp ................... Passed 5.69 sec; Start 265: opt1; 286/411 Test #344: dfep2-1 .......................... Passed 4.11 sec; Start 223: molden1; 287/411 Test #331: scf1 ............................. Passed 5.42 sec; Start 190: fci-coverage; 288/411 Test #10: castup3 .......................... Passed 8.69 sec; Start 86: cepa0-grad2; 289/411 Test #171: dft2 ............................. Passed 5.48 sec; Start 134: dfmp2-grad1; 290/411 Test #9: castup2 .......................... Passed 10.20 sec; Start 85: cepa0-grad1; 291/411 Test #265: opt1 ............................. Passed 5.72 sec; Start 179,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-405575064:26184,Test,Test,26184,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-405575064,1,['Test'],['Test']
Testability,#349: sapt-compare ..................... Passed 51.30 sec; Start 23: cc11; 136/412 Test #246: ocepa3 ........................... Passed 63.75 sec; Start 313: rasci-ne; 137/412 Test #33: cc17 ............................. Passed 44.73 sec; Start 127: dfccsd-t-grad1; 138/412 Test #338: scf6 ............................. Passed 49.52 sec; Start 134: dfmp2-ecp; 139/412 Test #201: fnocc2 ........................... Passed 69.43 sec; Start 34: cc18; 140/412 Test #220: mints-benchmark .................. Passed 44.32 sec; Start 149: dfomp3-grad1; 141/412 Test #337: scf5 ............................. Passed 39.63 sec; Start 253: omp2-grad2; 142/412 Test #132: dfmp2-3 .......................... Passed 42.96 sec; Start 207: ghosts; 143/412 Test #93: ci-multi ......................... Passed 34.57 sec; Start 130: dfmp2-1; 144/412 Test #361: x2c1 ............................. Passed 35.10 sec; Start 324: sapt7; 145/412 Test #393: python-cc54 ...................... Passed 31.31 sec; Start 275: opt8; 146/412 Test #23: cc11 ............................. Passed 32.37 sec; Start 126: dfccsd-grad1; 147/412 Test #195: fd-freq-gradient ................. Passed 43.35 sec; Start 153: dfomp2p5-grad1; 148/412 Test #149: dfomp3-grad1 ..................... Passed 20.73 sec; Start 197: fd-gradient; 149/412 Test #127: dfccsd-t-grad1 ................... Passed 29.16 sec; Start 343: soscf-dft; 150/412 Test #107: dcft-grad4 ....................... Passed 38.78 sec; Start 375: dft-custom-gga; 151/412 Test #313: rasci-ne ......................... Passed 40.81 sec; Start 49: cc32; 152/412 Test #134: dfmp2-ecp ........................ Passed 34.88 sec; Start 63: cc45; 153/412 Test #34: cc18 ............................. Passed 34.13 sec; Start 51: cc34; 154/412 Test #253: omp2-grad2 ....................... Passed 34.62 sec; Start 52: cc35; 155/412 Test #207: ghosts ........................... Passed 36.33 sec; Start 327: scf-ecp; 156/412 Test #324: sapt7 ............................ Passed 34.94 sec; S,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1224#issuecomment-419158485:13787,Test,Test,13787,https://psicode.org,https://github.com/psi4/psi4/pull/1224#issuecomment-419158485,1,['Test'],['Test']
Testability,#34: cc18 ............................. Passed 31.77 sec; Start 278: opt11; 121/413 Test #394: python-cc54 ...................... Passed 22.07 sec; Start 101: ci-property; 122/413 Test #22: cc10 ............................. Passed 23.54 sec; Start 57: cc4; 123/413 Test #169: dft-b3lyp ........................ Passed 69.47 sec; Start 196: fd-freq-gradient; 124/413 Test #150: dfomp3-grad1 ..................... Passed 15.81 sec; Start 23: cc11; 125/413 Test #318: sapt2 ............................ Passed 352.30 sec; Start 154: dfomp2p5-grad1; 126/413 Test #67: cc49 ............................. Passed 41.04 sec; Start 172: dft1-alt; 127/413 Test #55: cc38 ............................. Passed 9.24 sec; Start 50: cc33; 128/413 Test #23: cc11 ............................. Passed 8.19 sec; Start 164: dft-grad-meta; 129/413 Test #69: cc50 ............................. Passed 40.76 sec; Start 52: cc35; 130/413 Test #57: cc4 .............................. Passed 11.85 sec; Start 38: cc22; 131/413 Test #154: dfomp2p5-grad1 ................... Passed 16.49 sec; Start 148: dfomp3-1; 132/413 Test #38: cc22 ............................. Passed 11.28 sec; Start 33: cc17; 133/413 Test #275: opt7 ............................. Passed 42.19 sec; Start 85: cdomp2-2; 134/413 Test #50: cc33 ............................. Passed 19.32 sec; Start 254: omp2-grad2; 135/413 Test #391: python-pubchem ................... Passed 64.38 sec; Start 63: cc45; 136/413 Test #52: cc35 ............................. Passed 19.03 sec; Start 127: dfccsd-grad1; 137/413 Test #148: dfomp3-1 ......................... Passed 7.43 sec; Start 108: dcft-grad4; 138/413 Test #196: fd-freq-gradient ................. Passed 33.45 sec; Start 152: dfomp2p5-1; 139/413 Test #85: cdomp2-2 ......................... Passed 11.51 sec; Start 350: sapt-compare; 140/413 Test #239: nbody-he-cluster ................. Passed 40.41 sec; Start 338: scf5; 141/413 Test #33: cc17 ............................. Passed 14.22 sec; Start 309: ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1264#issuecomment-425525678:12362,Test,Test,12362,https://psicode.org,https://github.com/psi4/psi4/pull/1264#issuecomment-425525678,1,['Test'],['Test']
Testability,#34: cc19 ............................. Passed 36.87 sec; Start 91: cepa-module; 112/411 Test #65: cc48 ............................. Passed 34.57 sec; Start 358: tu5-sapt; 113/411 Test #326: scf-ecp .......................... Passed 27.04 sec; Start 54: cc38; 114/411 Test #358: tu5-sapt ......................... Passed 21.52 sec; Start 274: opt8; 115/411 Test #299: pywrap-alias ..................... Passed 48.68 sec; Start 166: dft-psivar; 116/411 Test #27: cc13c ............................ Passed 62.03 sec; Start 336: scf5; 117/411 Test #54: cc38 ............................. Passed 25.71 sec; Start 163: dft-freq; 118/411 Test #166: dft-psivar ....................... Passed 23.63 sec; Start 189: fci-tdm-2; 119/411 Test #274: opt8 ............................. Passed 27.54 sec; Start 346: sapt-dft1; 120/411 Test #163: dft-freq ......................... Passed 21.30 sec; Start 144: dfomp2-grad2; 121/411 Test #91: cepa-module ...................... Passed 60.97 sec; Start 30: cc15; 122/411 Test #104: dcft-grad2 ....................... Passed 70.28 sec; Start 261: omp3-5; 123/411 Test #189: fci-tdm-2 ........................ Passed 20.43 sec; Start 147: dfomp3-2; 124/411 Test #336: scf5 ............................. Passed 31.05 sec; Start 196: fd-gradient; 125/411 Test #346: sapt-dft1 ........................ Passed 22.66 sec; Start 322: sapt-dft-lrc; 126/411 Test #379: cc-module ........................ Passed 113.57 sec; Start 26: cc13b; 127/411 Test #322: sapt-dft-lrc ..................... Passed 19.70 sec; Start 249: omp2-4; 128/411 Test #196: fd-gradient ...................... Passed 31.18 sec; Start 260: omp3-4; 129/411 Test #30: cc15 ............................. Passed 45.82 sec; Start 92: ci-multi; 130/411 Test #147: dfomp3-2 ......................... Passed 39.98 sec; Start 56: cc4; 131/411 Test #144: dfomp2-grad2 ..................... Passed 48.38 sec; Start 290: psimrcc-ccsd_t-4; 132/411 Test #261: omp3-5 ........................... Passed 59.17 sec; Star,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1078#issuecomment-408900195:11434,Test,Test,11434,https://psicode.org,https://github.com/psi4/psi4/pull/1078#issuecomment-408900195,1,['Test'],['Test']
Testability,#357: tu4-h2o-freq ..................... Passed 5.68 sec; Start 358: tu5-sapt; 359/411 Test #358: tu5-sapt ......................... Passed 18.96 sec; Start 359: tu6-cp-ne2; 360/411 Test #359: tu6-cp-ne2 ....................... Passed 21.60 sec; Start 360: x2c1; 361/411 Test #360: x2c1 ............................. Passed 5.53 sec; Start 361: x2c2; 362/411 Test #361: x2c2 ............................. Passed 1.63 sec; Start 362: x2c3; 363/411 Test #362: x2c3 ............................. Passed 1.69 sec; Start 363: zaptn-nh2; 364/411 Test #363: zaptn-nh2 ........................ Passed 2.10 sec; Start 364: options1; 365/411 Test #364: options1 ......................... Passed 0.66 sec; Start 365: cubeprop-esp; 366/411 Test #365: cubeprop-esp ..................... Passed 7.93 sec; Start 366: dft-smoke; 367/411 Test #366: dft-smoke ........................ Passed 12.12 sec; Start 367: scf-hess1; 368/411 Test #367: scf-hess1 ........................ Passed 5.76 sec; Start 368: scf-freq1; 369/411 Test #368: scf-freq1 ........................ Passed 6.73 sec; Start 369: dft-jk; 370/411 Test #369: dft-jk ........................... Passed 8.47 sec; Start 370: scf-coverage; 371/411 Test #370: scf-coverage ..................... Passed 2.89 sec; Start 371: dft-custom-dhdf; 372/411 Test #371: dft-custom-dhdf .................. Passed 75.42 sec; Start 372: dft-custom-hybrid; 373/411 Test #372: dft-custom-hybrid ................ Passed 8.58 sec; Start 373: dft-custom-mgga; 374/411 Test #373: dft-custom-mgga .................. Passed 157.12 sec; Start 374: dft-custom-gga; 375/411 Test #374: dft-custom-gga ................... Passed 23.71 sec; Start 375: pywrap-bfs; 376/411 Test #375: pywrap-bfs ....................... Passed 21.31 sec; Start 376: pywrap-align; 377/411 Test #376: pywrap-align ..................... Passed 4.41 sec; Start 377: pywrap-align-chiral; 378/411 Test #377: pywrap-align-chiral .............. Passed 3.25 sec; Start 378: mints12; 379/411 Test #378: mints12 .,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1073#issuecomment-406985370:33944,Test,Test,33944,https://psicode.org,https://github.com/psi4/psi4/pull/1073#issuecomment-406985370,1,['Test'],['Test']
Testability,#357: tu4-h2o-freq ..................... Passed 7.10 sec; Start 358: tu5-sapt; 359/411 Test #358: tu5-sapt ......................... Passed 18.53 sec; Start 359: tu6-cp-ne2; 360/411 Test #359: tu6-cp-ne2 ....................... Passed 26.31 sec; Start 360: x2c1; 361/411 Test #360: x2c1 ............................. Passed 5.86 sec; Start 361: x2c2; 362/411 Test #361: x2c2 ............................. Passed 1.73 sec; Start 362: x2c3; 363/411 Test #362: x2c3 ............................. Passed 1.67 sec; Start 363: zaptn-nh2; 364/411 Test #363: zaptn-nh2 ........................ Passed 2.99 sec; Start 364: options1; 365/411 Test #364: options1 ......................... Passed 0.67 sec; Start 365: cubeprop-esp; 366/411 Test #365: cubeprop-esp ..................... Passed 8.94 sec; Start 366: dft-smoke; 367/411 Test #366: dft-smoke ........................ Passed 11.42 sec; Start 367: scf-hess1; 368/411 Test #367: scf-hess1 ........................ Passed 6.01 sec; Start 368: scf-freq1; 369/411 Test #368: scf-freq1 ........................ Passed 7.94 sec; Start 369: dft-jk; 370/411 Test #369: dft-jk ........................... Passed 9.26 sec; Start 370: scf-coverage; 371/411 Test #370: scf-coverage ..................... Passed 2.64 sec; Start 371: dft-custom-dhdf; 372/411 Test #371: dft-custom-dhdf .................. Passed 70.66 sec; Start 372: dft-custom-hybrid; 373/411 Test #372: dft-custom-hybrid ................ Passed 9.61 sec; Start 373: dft-custom-mgga; 374/411 Test #373: dft-custom-mgga .................. Passed 152.10 sec; Start 374: dft-custom-gga; 375/411 Test #374: dft-custom-gga ................... Passed 25.40 sec; Start 375: pywrap-bfs; 376/411 Test #375: pywrap-bfs ....................... Passed 24.76 sec; Start 376: pywrap-align; 377/411 Test #376: pywrap-align ..................... Passed 6.81 sec; Start 377: pywrap-align-chiral; 378/411 Test #377: pywrap-align-chiral .............. Passed 3.20 sec; Start 378: mints12; 379/411 Test #378: mints12 .,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1071#issuecomment-407449972:33973,Test,Test,33973,https://psicode.org,https://github.com/psi4/psi4/pull/1071#issuecomment-407449972,1,['Test'],['Test']
Testability,#371: scf-coverage ..................... Passed 11.20 sec; Start 340: scf-property; 297/412 Test #137: dfmp2-grad3 ...................... Passed 4.45 sec; Start 94: cisd-h2o+-0; 298/412 Test #86: cepa0-grad1 ...................... Passed 2.91 sec; Start 234: mp3-grad1; 299/412 Test #311: rasci-c2-active .................. Passed 5.93 sec; Start 180: fsapt2; 300/412 Test #135: dfmp2-grad1 ...................... Passed 2.72 sec; Start 95: cisd-h2o+-1; 301/412 Test #96: cisd-h2o+-2 ...................... Passed 5.46 sec; Start 121: dfccd1; 302/412 Test #188: fci-h2o-fzcv ..................... Passed 5.45 sec; Start 232: mp2p5-grad1; 303/412 Test #285: props1 ........................... Passed 3.70 sec; Start 332: scf1; 304/412 Test #117: ao-dfcasscf-sp ................... Passed 2.87 sec; Start 235: mp3-grad2; 305/412 Test #172: dft2 ............................. Passed 5.28 sec; Start 204: frac; 306/412 Test #247: omp2-1 ........................... Passed 3.62 sec; Start 229: mp2-grad1; 307/412 Test #234: mp3-grad1 ........................ Passed 3.09 sec; Start 120: dfcasscf-sp; 308/412 Test #237: mpn-bh ........................... Passed 4.49 sec; Start 266: opt1; 309/412 Test #121: dfccd1 ........................... Passed 2.00 sec; Start 230: mp2-grad2; 310/412 Test #232: mp2p5-grad1 ...................... Passed 1.89 sec; Start 356: tu3-h2o-opt; 311/412 Test #377: pywrap-align ..................... Passed 6.42 sec; Start 226: mom; 312/412 Test #340: scf-property ..................... Passed 4.87 sec; Start 272: opt5; 313/412 Test #235: mp3-grad2 ........................ Passed 2.29 sec; Start 122: dfccdl1; 314/412 Test #94: cisd-h2o+-0 ...................... Passed 4.94 sec; Start 295: psimrcc-sp1; 315/412 Test #180: fsapt2 ........................... Passed 5.12 sec; Start 192: fcidump; 316/412 Test #229: mp2-grad1 ........................ Passed 3.11 sec; Start 400: json-schema-1-energy; 317/412 Test #95: cisd-h2o+-1 ...................... Passed 5.23 sec; Star,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1224#issuecomment-419158485:28795,Test,Test,28795,https://psicode.org,https://github.com/psi4/psi4/pull/1224#issuecomment-419158485,1,['Test'],['Test']
Testability,#373: pywrap-align .....................***Failed 0.80 sec; Start 375: mints12; 377/401 Test #374: pywrap-align-chiral ..............***Failed 0.75 sec; Start 377: psi4numpy-cphf; 378/401 Test #375: mints12 .......................... Passed 1.23 sec; Start 382: psi4numpy-fci; 379/401 Test #377: psi4numpy-cphf ................... Passed 1.87 sec; Start 383: cookbook-rohf-orb-rot; 380/401 Test #367: dft-custom-hybrid ................ Passed 9.93 sec; Start 386: python-pubchem; 381/401 Test #382: psi4numpy-fci .................... Passed 5.69 sec; Start 395: json-v11_gradient; 382/401 Test #395: json-v11_gradient ................ Passed 1.20 sec; Start 397: json-schema_0_ghost; 383/401 Test #397: json-schema_0_ghost .............. Passed 1.28 sec; Start 398: json-schema_0_orient; 384/401 Test #398: json-schema_0_orient ............. Passed 3.40 sec; Start 399: json-schema_0_throws; 385/401 Test #399: json-schema_0_throws ............. Passed 0.60 sec; Start 401: json-schema_0_properties; 386/401 Test #401: json-schema_0_properties .........***Failed 1.49 sec; 387/401 Test #343: sapt-dft2 ........................ Passed 44.50 sec; 388/401 Test #369: dft-custom-gga ................... Passed 31.04 sec; 389/401 Test #386: python-pubchem ................... Passed 26.22 sec; 390/401 Test #366: dft-custom-dhdf .................. Passed 42.54 sec; 391/401 Test #277: opt-irc-2 ........................ Passed 128.92 sec; 392/401 Test #236: ocepa-freq1 ...................... Passed 211.47 sec; 393/401 Test #368: dft-custom-mgga .................. Passed 56.55 sec; 394/401 Test #102: dcft-grad1 ....................... Passed 432.70 sec; 395/401 Test #383: cookbook-rohf-orb-rot ............ Passed 107.12 sec; 396/401 Test #354: tu6-cp-ne2 ....................... Passed 135.55 sec; 397/401 Test #301: pywrap-checkrun-rohf ............. Passed 191.40 sec; 398/401 Test #302: pywrap-checkrun-uhf .............. Passed 214.75 sec; 399/401 Test #300: pywrap-checkrun-rhf .............. Pa,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-402413637:36189,Test,Test,36189,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-402413637,1,['Test'],['Test']
Testability,#375: dft-custom-mgga .................. Passed 183.50 sec; Start 11: cbs-delta-energy; 34/413 Test #112: dcft4 ............................ Passed 1745.55 sec; Start 160: dfscf-bz2; 35/413 Test #31: cc15 ............................. Passed 89.05 sec; Start 58: cc40; 36/413 Test #44: cc28 ............................. Passed 88.29 sec; Start 283: opt-irc-2; 37/413 Test #322: sapt6 ............................ Passed 158.72 sec; Start 117: dcft9; 38/413 Test #146: dfomp2-grad2 ..................... Passed 99.16 sec; Start 60: cc42; 39/413 Test #106: dcft-grad2 ....................... Passed 122.59 sec; Start 151: dfomp3-grad2; 40/413 Test #58: cc40 ............................. Passed 84.64 sec; Start 47: cc30; 41/413 Test #160: dfscf-bz2 ........................ Passed 131.53 sec; Start 349: sapt-dft2; 42/413 Test #60: cc42 ............................. Passed 81.75 sec; Start 251: omp2-4; 43/413 Test #151: dfomp3-grad2 ..................... Passed 88.57 sec; Start 261: omp3-3; 44/413 Test #195: fd-freq-energy-large ............. Passed 515.62 sec; Start 262: omp3-4; 45/413 Test #117: dcft9 ............................ Passed 104.53 sec; Start 76: cc6; 46/413 Test #183: fsapt-allterms ................... Passed 542.80 sec; Start 263: omp3-5; 47/413 Test #47: cc30 ............................. Passed 83.62 sec; Start 27: cc13b; 48/413 Test #283: opt-irc-2 ........................ Passed 193.34 sec; Start 185: isapt2; 49/413 Test #306: pywrap-checkrun-rhf .............. Passed 792.80 sec; Start 156: dft-grad-lr2; 50/413 Test #11: cbs-delta-energy ................. Passed 262.37 sec; Start 65: cc47; 51/413 Test #349: sapt-dft2 ........................ Passed 118.82 sec; Start 62: cc44; 52/413 Test #302: pywrap-all ....................... Passed 857.48 sec; Start 149: dfomp3-2; 53/413 Test #251: omp2-4 ........................... Passed 120.68 sec; Start 92: cepa-module; 54/413 Test #76: cc6 .............................. Passed 115.05 sec; Start 35: cc19; 55/413 Test #,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1237#issuecomment-425038275:4416,Test,Test,4416,https://psicode.org,https://github.com/psi4/psi4/pull/1237#issuecomment-425038275,1,['Test'],['Test']
Testability,#375: pywrap-bfs ....................... Passed 24.75 sec; Start 189: fci-tdm-2; 188/411 Test #264: opt-lindep-change ................ Passed 27.59 sec; Start 248: omp2-3; 189/411 Test #173: dft-omega ........................ Passed 25.76 sec; Start 105: dcft-grad3; 190/411 Test #159: dft-b2plyp ....................... Passed 24.94 sec; Start 267: opt2; 191/411 Test #7: casscf-sp ........................ Passed 7.94 sec; Start 202: fnocc4; 192/411 Test #166: dft-psivar ....................... Passed 24.34 sec; Start 358: tu5-sapt; 193/411 Test #194: fd-freq-gradient ................. Passed 15.52 sec; Start 275: opt9; 194/411 Test #248: omp2-3 ........................... Passed 7.76 sec; Start 282: opt-irc-3; 195/411 Test #138: dfmp2-grad5 ...................... Passed 11.58 sec; Start 322: sapt-dft-lrc; 196/411 Test #346: sapt-dft1 ........................ Passed 23.02 sec; Start 247: omp2-2; 197/411 Test #277: opt12 ............................ Passed 17.65 sec; Start 169: dft-vv10; 198/411 Test #163: dft-freq ......................... Passed 22.29 sec; Start 88: cepa2; 199/411 Test #238: nbody-intermediates .............. Passed 12.79 sec; Start 315: sapt1; 200/411 Test #105: dcft-grad3 ....................... Passed 10.58 sec; Start 139: dfomp2-1; 201/411 Test #172: dft3 ............................. Passed 20.21 sec; Start 321: sapt-dft-api; 202/411 Test #189: fci-tdm-2 ........................ Passed 20.60 sec; Start 290: psimrcc-ccsd_t-4; 203/411 Test #275: opt9 ............................. Passed 16.07 sec; Start 207: gibbs; 204/411 Test #139: dfomp2-1 ......................... Passed 11.23 sec; Start 303: pywrap-checkrun-convcrit; 205/411 Test #88: cepa2 ............................ Passed 11.68 sec; Start 177: extern2; 206/411 Test #247: omp2-2 ........................... Passed 13.26 sec; Start 153: dft-grad-lr1; 207/411 Test #267: opt2 ............................. Passed 20.65 sec; Start 123: dfccsd1; 208/411 Test #202: fnocc4 .........................,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1124#issuecomment-411347383:18553,Test,Test,18553,https://psicode.org,https://github.com/psi4/psi4/pull/1124#issuecomment-411347383,1,['Test'],['Test']
Testability,#376: pywrap-bfs ....................... Passed 25.12 sec; Start 190: fci-tdm-2; 179/412 Test #173: dft3 ............................. Passed 24.11 sec; Start 178: extern2; 180/412 Test #268: opt2 ............................. Passed 23.85 sec; Start 7: casscf-sp; 181/412 Test #304: pywrap-checkrun-convcrit ......... Passed 21.48 sec; Start 323: sapt-dft-lrc; 182/412 Test #129: dfccsdat1 ........................ Passed 18.08 sec; Start 54: cc37; 183/412 Test #160: dft-b2plyp ....................... Passed 25.40 sec; Start 259: omp3-2; 184/412 Test #314: rasscf-sp ........................ Passed 22.75 sec; Start 208: gibbs; 185/412 Test #278: opt12 ............................ Passed 24.35 sec; Start 38: cc22; 186/412 Test #164: dft-freq ......................... Passed 24.88 sec; Start 291: psimrcc-ccsd_t-4; 187/412 Test #347: sapt-dft1 ........................ Passed 25.41 sec; Start 22: cc10; 188/412 Test #359: tu5-sapt ......................... Passed 22.33 sec; Start 151: dfomp2p5-1; 189/412 Test #273: opt6 ............................. Passed 24.37 sec; Start 316: sapt1; 190/412 Test #203: fnocc4 ........................... Passed 25.60 sec; Start 249: omp2-3; 191/412 Test #178: extern2 .......................... Passed 24.14 sec; Start 24: cc12; 192/412 Test #190: fci-tdm-2 ........................ Passed 24.38 sec; Start 239: nbody-intermediates; 193/412 Test #54: cc37 ............................. Passed 16.65 sec; Start 276: opt9; 194/412 Test #323: sapt-dft-lrc ..................... Passed 20.87 sec; Start 322: sapt-dft-api; 195/412 Test #259: omp3-2 ........................... Passed 22.64 sec; Start 139: dfmp2-grad5; 196/412 Test #7: casscf-sp ........................ Passed 24.02 sec; Start 255: omp2p5-2; 197/412 Test #208: gibbs ............................ Passed 24.52 sec; Start 166: dft-grad2; 198/412 Test #38: cc22 ............................. Passed 18.87 sec; Start 297: psithon2; 199/412 Test #151: dfomp2p5-1 ....................... Passed 18.20,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1220#issuecomment-419126068:17764,Test,Test,17764,https://psicode.org,https://github.com/psi4/psi4/pull/1220#issuecomment-419126068,1,['Test'],['Test']
Testability,#384: python-energy .................... Passed 0.78 sec; Start 9: castup2; 199/401 Test #359: options1 ......................... Passed 0.67 sec; Start 10: castup3; 200/401 Test #122: dfccsd1 .......................... Passed 3.17 sec; Start 12: cbs-parser; 201/401 Test #123: dfccsdl1 ......................... Passed 3.14 sec; Start 13: cbs-xtpl-alpha; 202/401 Test #285: psimrcc-ccsd_t-3 ................. Passed 1.29 sec; Start 17: cbs-xtpl-opt; 203/401 Test #283: psimrcc-ccsd_t-1 ................. Passed 1.20 sec; Start 19: cbs-xtpl-wrapper; 204/401 Test #284: psimrcc-ccsd_t-2 ................. Passed 1.39 sec; Start 84: cepa0-grad1; 205/401 Test #289: psimrcc-pt2 ...................... Passed 1.11 sec; Start 85: cepa0-grad2; 206/401 Test #290: psimrcc-sp1 ...................... Passed 2.98 sec; Start 86: cepa1; 207/401 Test #84: cepa0-grad1 ...................... Passed 2.32 sec; Start 87: cepa2; 208/401 Test #85: cepa0-grad2 ...................... Passed 4.19 sec; Start 88: cepa3; 209/401 Test #9: castup2 .......................... Passed 8.52 sec; Start 89: cepa1; 210/401 Test #10: castup3 .......................... Passed 8.84 sec; Start 90: cepa-module; 211/401 Test #86: cepa1 ............................ Passed 9.10 sec; Start 93: cisd-h2o+-1; 212/401 Test #93: cisd-h2o+-1 ...................... Passed 2.99 sec; Start 94: cisd-h2o+-2; 213/401 Test #87: cepa2 ............................ Passed 10.57 sec; Start 95: cisd-h2o-clpse; 214/401 Test #95: cisd-h2o-clpse ................... Passed 1.79 sec; Start 96: cisd-opt-fd; 215/401 Test #94: cisd-h2o+-2 ...................... Passed 2.81 sec; Start 97: cisd-sp; 216/401 Test #88: cepa3 ............................ Passed 11.93 sec; Start 98: cisd-sp-2; 217/401 Test #98: cisd-sp-2 ........................ Passed 2.77 sec; Start 102: dcft-grad1; 218/401 Test #89: cepa1 ............................ Passed 13.19 sec; Start 104: dcft-grad3; 219/401 Test #97: cisd-sp .......................... Passed 5.81 sec; Start 10,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-402413637:19564,Test,Test,19564,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-402413637,1,['Test'],['Test']
Testability,#389: python-pubchem ................... Passed 59.41 sec; Start 148: dfomp3-grad1; 117/411 Test #250: omp2-5 ........................... Passed 68.60 sec; Start 54: cc38; 118/411 Test #82: cc9a ............................. Passed 46.42 sec; Start 125: dfccsd-grad1; 119/411 Test #32: cc17 ............................. Passed 33.17 sec; Start 276: opt11; 120/411 Test #113: dcft7 ............................ Passed 384.47 sec; Start 162: dft-grad-meta; 121/411 Test #84: cdomp2-2 ......................... Passed 50.72 sec; Start 237: nbody-he-cluster; 122/411 Test #297: pubchem1 ......................... Passed 59.76 sec; Start 170: dft1-alt; 123/411 Test #100: ci-property ...................... Passed 58.63 sec; Start 72: cc54; 124/411 Test #148: dfomp3-grad1 ..................... Passed 39.18 sec; Start 22: cc11; 125/411 Test #12: cbs-parser ....................... Passed 66.53 sec; Start 51: cc35; 126/411 Test #126: dfccsd-t-grad1 ................... Passed 49.75 sec; Start 62: cc45; 127/411 Test #21: cc10 ............................. Passed 61.98 sec; Start 348: sapt-compare; 128/411 Test #54: cc38 ............................. Passed 49.31 sec; Start 245: ocepa3; 129/411 Test #80: cc8c ............................. Passed 66.72 sec; Start 49: cc33; 130/411 Test #125: dfccsd-grad1 ..................... Passed 58.61 sec; Start 299: pywrap-alias; 131/411 Test #72: cc54 ............................. Passed 35.14 sec; Start 37: cc22; 132/411 Test #62: cc45 ............................. Passed 27.12 sec; Start 23: cc12; 133/411 Test #276: opt11 ............................ Passed 62.61 sec; Start 150: dfomp2p5-1; 134/411 Test #162: dft-grad-meta .................... Passed 49.92 sec; Start 92: ci-multi; 135/411 Test #51: cc35 ............................. Passed 44.56 sec; Start 273: opt7; 136/411 Test #170: dft1-alt ......................... Passed 53.15 sec; Start 152: dfomp2p5-grad1; 137/411 Test #22: cc11 ............................. Passed 47.56 sec; Start 219: ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1124#issuecomment-411347383:11993,Test,Test,11993,https://psicode.org,https://github.com/psi4/psi4/pull/1124#issuecomment-411347383,1,['Test'],['Test']
Testability,#38: cc23 ............................. Passed 937.42 sec; Start 114: dcft8; 7/411 Test #36: cc21 ............................. Passed 943.79 sec; Start 227: mp2-def2; 8/411 Test #40: cc25 ............................. Passed 955.88 sec; Start 178: fsapt1; 9/411 Test #35: cc2 .............................. Passed 975.82 sec; Start 111: dcft5; 10/411 Test #39: cc24 ............................. Passed 1000.55 sec; Start 13: cbs-xtpl-alpha; 11/411 Test #155: dft-grad-lr3 ..................... Passed 395.18 sec; Start 305: pywrap-checkrun-rohf; 12/411 Test #394: python-vibanalysis ............... Passed 1285.91 sec; Start 24: cc13; 13/411 Test #227: mp2-def2 ......................... Passed 371.74 sec; Start 31: cc16; 14/411 Test #29: cc14 ............................. Passed 619.00 sec; Start 28: cc13d; 15/411 Test #145: dfomp2-grad3 ..................... Passed 1456.77 sec; Start 182: isapt1; 16/411 Test #304: pywrap-checkrun-rhf .............. Passed 1461.98 sec; Start 11: cbs-delta-energy; 17/411 Test #111: dcft5 ............................ Passed 505.16 sec; Start 44: cc29; 18/411 Test #306: pywrap-checkrun-uhf .............. Passed 1485.55 sec; Start 47: cc31; 19/411 Test #103: dcft-grad1 ....................... Passed 1518.99 sec; Start 112: dcft6; 20/411 Test #300: pywrap-all ....................... Passed 1524.14 sec; Start 18: cbs-xtpl-func; 21/411 Test #13: cbs-xtpl-alpha ................... Passed 526.82 sec; Start 181: fsapt-allterms; 22/411 Test #114: dcft8 ............................ Passed 687.39 sec; Start 193: fd-freq-energy-large; 23/411 Test #240: ocepa-freq1 ...................... Passed 852.90 sec; Start 195: fd-freq-gradient-large; 24/411 Test #45: cc3 .............................. Passed 1687.06 sec; Start 278: opt13; 25/411 Test #110: dcft4 ............................ Passed 1692.73 sec; Start 91: cepa-module; 26/411 Test #31: cc16 ............................. Passed 395.40 sec; Start 281: opt-irc-2; 27/411 Test #44: cc29 ..................,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1124#issuecomment-411347383:1929,Test,Test,1929,https://psicode.org,https://github.com/psi4/psi4/pull/1124#issuecomment-411347383,1,['Test'],['Test']
Testability,#391: python-mints2 .................... Passed 2.24 sec; Start 405: skeleton; 342/411 Test #223: molden1 .......................... Passed 1.40 sec; Start 345: dfep2-2; 343/411 Test #356: scf-response1 .................... Passed 2.00 sec; Start 213: mints2; 344/411 Test #271: opt5 ............................. Passed 1.57 sec; Start 203: frac; 345/411 Test #354: tu2-ch2-energy ................... Passed 0.77 sec; Start 330: scf-bs; 346/411 Test #405: skeleton ......................... Passed 0.91 sec; Start 199: fnocc1; 347/411 Test #284: props1 ........................... Passed 2.29 sec; Start 401: json-schema-1-orient; 348/411 Test #330: scf-bs ........................... Passed 0.90 sec; Start 190: fci-coverage; 349/411 Test #203: frac ............................. Passed 1.40 sec; Start 157: dft-grac; 350/411 Test #345: dfep2-2 .......................... Passed 1.84 sec; Start 361: x2c2; 351/411 Test #213: mints2 ........................... Passed 2.51 sec; Start 233: mp3-grad1; 352/411 Test #157: dft-grac ......................... Passed 1.57 sec; Start 349: sapt-sf1; 353/411 Test #401: json-schema-1-orient ............. Passed 2.05 sec; Start 407: skeletondfmp2; 354/411 Test #199: fnocc1 ........................... Passed 2.94 sec; Start 404: json-schema-1-properties; 355/411 Test #361: x2c2 ............................. Passed 1.99 sec; Start 406: skeletonaointegrals; 356/411 Test #190: fci-coverage ..................... Passed 3.02 sec; Start 328: scf-upcast-custom-basis; 357/411 Test #349: sapt-sf1 ......................... Passed 1.08 sec; Start 395: python-mints13; 358/411 Test #233: mp3-grad1 ........................ Passed 1.75 sec; Start 390: python-mints9; 359/411 Test #407: skeletondfmp2 .................... Passed 1.23 sec; Start 220: mints-helper; 360/411 Test #404: json-schema-1-properties ......... Passed 1.03 sec; Start 8: castup1; 361/411 Test #406: skeletonaointegrals .............. Passed 0.92 sec; Start 221: mints9; 362/411 Test #220: mint,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1075#issuecomment-409598225:32725,Test,Test,32725,https://psicode.org,https://github.com/psi4/psi4/pull/1075#issuecomment-409598225,1,['Test'],['Test']
Testability,#391: python-pubchem ................... Passed 60.41 sec; Start 63: cc45; 102/413 Test #319: sapt3 ............................ Passed 76.94 sec; Start 56: cc39; 103/413 Test #17: cbs-xtpl-opt ..................... Passed 105.69 sec; Start 206: frac-ip-fitting; 104/413 Test #321: sapt5 ............................ Passed 74.14 sec; Start 68: cc4a; 105/413 Test #69: cc50 ............................. Passed 50.27 sec; Start 101: ci-property; 106/413 Test #247: ocepa3 ........................... Passed 59.63 sec; Start 169: dft-b3lyp; 107/413 Test #50: cc33 ............................. Passed 44.16 sec; Start 275: opt7; 108/413 Test #63: cc45 ............................. Passed 27.72 sec; Start 150: dfomp3-grad1; 109/413 Test #33: cc17 ............................. Passed 42.65 sec; Start 49: cc32; 110/413 Test #194: fd-freq-energy ................... Passed 91.14 sec; Start 299: pubchem1; 111/413 Test #294: psimrcc-fd-freq2 ................. Passed 76.06 sec; Start 379: pywrap-align-chiral; 112/413 Test #56: cc39 ............................. Passed 54.19 sec; Start 278: opt11; 113/413 Test #49: cc32 ............................. Passed 28.02 sec; Start 164: dft-grad-meta; 114/413 Test #379: pywrap-align-chiral .............. Passed 8.08 sec; Start 304: pywrap-cbs1; 115/413 Test #68: cc4a ............................. Passed 50.42 sec; Start 202: fnocc2; 116/413 Test #150: dfomp3-grad1 ..................... Passed 36.83 sec; Start 85: cdomp2-2; 117/413 Test #101: ci-property ...................... Passed 55.52 sec; Start 154: dfomp2p5-grad1; 118/413 Test #275: opt7 ............................. Passed 53.16 sec; Start 378: pywrap-align; 119/413 Test #206: frac-ip-fitting .................. Passed 71.01 sec; Start 239: nbody-he-cluster; 120/413 Test #378: pywrap-align ..................... Passed 4.56 sec; Start 55: cc38; 121/413 Test #207: frac-traverse .................... Passed 222.75 sec; Start 128: dfccsd-t-grad1; 122/413 Test #85: cdomp2-2 ..................,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1237#issuecomment-425038275:10608,Test,Test,10608,https://psicode.org,https://github.com/psi4/psi4/pull/1237#issuecomment-425038275,1,['Test'],['Test']
Testability,#393: python-cc54 ...................... Passed 18.00 sec; Start 52: cc35; 161/412 Test #34: cc18 ............................. Passed 28.47 sec; Start 283: opt-irc-3; 162/412 Test #153: dfomp2p5-grad1 ................... Passed 18.64 sec; Start 63: cc45; 163/412 Test #343: soscf-dft ........................ Passed 41.34 sec; Start 16: cbs-xtpl-gradient; 164/412 Test #52: cc35 ............................. Passed 27.41 sec; Start 265: opt-lindep-change; 165/412 Test #63: cc45 ............................. Passed 25.41 sec; Start 51: cc34; 166/412 Test #327: scf-ecp .......................... Passed 37.77 sec; Start 22: cc10; 167/412 Test #1: adc1 ............................. Passed 39.52 sec; Start 174: dft-omega; 168/412 Test #16: cbs-xtpl-gradient ................ Passed 34.97 sec; Start 7: casscf-sp; 169/412 Test #283: opt-irc-3 ........................ Passed 38.80 sec; Start 149: dfomp3-grad1; 170/412 Test #51: cc34 ............................. Passed 27.13 sec; Start 49: cc32; 171/412 Test #22: cc10 ............................. Passed 27.87 sec; Start 110: dcft3; 172/412 Test #149: dfomp3-grad1 ..................... Passed 25.97 sec; Start 167: dft-psivar; 173/412 Test #7: casscf-sp ........................ Passed 31.13 sec; Start 203: fnocc4; 174/412 Test #265: opt-lindep-change ................ Passed 47.51 sec; Start 50: cc33; 175/412 Test #174: dft-omega ........................ Passed 46.04 sec; Start 376: pywrap-bfs; 176/412 Test #49: cc32 ............................. Passed 26.57 sec; Start 53: cc36; 177/412 Test #110: dcft3 ............................ Passed 25.36 sec; Start 160: dft-b2plyp; 178/412 Test #50: cc33 ............................. Passed 30.41 sec; Start 314: rasscf-sp; 179/412 Test #203: fnocc4 ........................... Passed 37.17 sec; Start 273: opt6; 180/412 Test #53: cc36 ............................. Passed 27.88 sec; Start 268: opt2; 181/412 Test #167: dft-psivar ....................... Passed 45.63 sec; Start 173: dft3; 182,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1226#issuecomment-420597899:15899,Test,Test,15899,https://psicode.org,https://github.com/psi4/psi4/pull/1226#issuecomment-420597899,1,['Test'],['Test']
Testability,#399: json-schema-1-energy ............. Passed 5.52 sec; Start 271: opt5; 325/411 Test #384: psi4numpy-rhf-hessian ............ Passed 3.49 sec; Start 233: mp3-grad1; 326/411 Test #213: mints2 ........................... Passed 2.95 sec; Start 262: omp3-grad1; 327/411 Test #85: cepa0-grad1 ...................... Passed 9.67 sec; Start 121: dfccdl1; 328/411 Test #328: scf-upcast-custom-basis .......... Passed 2.52 sec; Start 356: scf-response1; 329/411 Test #190: fci-coverage ..................... Passed 13.09 sec; Start 361: x2c2; 330/411 Test #327: scf-guess-read1 .................. Passed 2.57 sec; Start 246: omp2-1; 331/411 Test #397: json-v11-energy .................. Passed 3.24 sec; Start 255: omp2p5-grad1; 332/411 Test #225: mom .............................. Passed 3.92 sec; Start 332: scf-occ; 333/411 Test #391: python-mints2 .................... Passed 2.61 sec; Start 345: dfep2-2; 334/411 Test #362: x2c3 ............................. Passed 2.55 sec; Start 229: mp2-grad2; 335/411 Test #136: dfmp2-grad3 ...................... Passed 4.79 sec; Start 407: skeletondfmp2; 336/411 Test #253: omp2p5-1 ......................... Passed 9.34 sec; Start 288: psimrcc-ccsd_t-2; 337/411 Test #228: mp2-grad1 ........................ Passed 2.44 sec; Start 289: psimrcc-ccsd_t-3; 338/411 Test #233: mp3-grad1 ........................ Passed 2.31 sec; Start 363: zaptn-nh2; 339/411 Test #271: opt5 ............................. Passed 2.66 sec; Start 203: frac; 340/411 Test #356: scf-response1 .................... Passed 2.19 sec; Start 381: psi4numpy-dfmp2; 341/411 Test #121: dfccdl1 .......................... Passed 2.89 sec; Start 8: castup1; 342/411 Test #361: x2c2 ............................. Passed 2.66 sec; Start 287: psimrcc-ccsd_t-1; 343/411 Test #332: scf-occ .......................... Passed 2.54 sec; Start 221: mints9; 344/411 Test #407: skeletondfmp2 .................... Passed 2.23 sec; Start 380: psi4numpy-cphf; 345/411 Test #345: dfep2-2 ....................,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1072#issuecomment-406602307:31428,Test,Test,31428,https://psicode.org,https://github.com/psi4/psi4/pull/1072#issuecomment-406602307,1,['Test'],['Test']
Testability,#39: cc24 ............................. Passed 155.32 sec; Start 227: mp2-def2; 9/411 Test #103: dcft-grad1 ....................... Passed 361.43 sec; Start 36: cc21; 10/411 Test #38: cc23 ............................. Passed 142.28 sec; Start 305: pywrap-checkrun-rohf; 11/411 Test #35: cc2 .............................. Passed 153.53 sec; Start 41: cc26; 12/411 Test #162: dft-grad-lr3 ..................... Passed 443.69 sec; Start 182: isapt1; 13/411 Test #45: cc3 .............................. Passed 236.97 sec; Start 145: dfomp2-grad3; 14/411 Test #36: cc21 ............................. Passed 148.51 sec; Start 42: cc27; 15/411 Test #305: pywrap-checkrun-rohf ............. Passed 140.52 sec; Start 29: cc14; 16/411 Test #41: cc26 ............................. Passed 135.18 sec; Start 111: dcft5; 17/411 Test #42: cc27 ............................. Passed 101.05 sec; Start 18: cbs-xtpl-func; 18/411 Test #29: cc14 ............................. Passed 87.25 sec; Start 181: fsapt-allterms; 19/411 Test #145: dfomp2-grad3 ..................... Passed 173.53 sec; Start 193: fd-freq-energy-large; 20/411 Test #111: dcft5 ............................ Passed 108.27 sec; Start 195: fd-freq-gradient-large; 21/411 Test #394: python-vibanalysis ............... Passed 717.15 sec; Start 278: opt13; 22/411 Test #227: mp2-def2 ......................... Passed 425.85 sec; Start 240: ocepa-freq1; 23/411 Test #240: ocepa-freq1 ...................... Passed 62.06 sec; Start 359: tu6-cp-ne2; 24/411 Test #359: tu6-cp-ne2 ....................... Passed 29.96 sec; Start 76: cc7; 25/411 Test #182: isapt1 ........................... Passed 448.19 sec; Start 24: cc13; 26/411 Test #195: fd-freq-gradient-large ........... Passed 273.70 sec; Start 373: dft-custom-mgga; 27/411 Test #76: cc7 .............................. Passed 57.56 sec; Start 112: dcft6; 28/411 Test #24: cc13 ............................. Passed 44.47 sec; Start 302: pywrap-cbs1; 29/411 Test #302: pywrap-cbs1 .....................,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1075#issuecomment-409598225:1960,Test,Test,1960,https://psicode.org,https://github.com/psi4/psi4/pull/1075#issuecomment-409598225,1,['Test'],['Test']
Testability,"#400: json-schema-1-ghost .............. Passed 1.58 sec; Start 401: json-schema-1-orient; 394/411 Test #399: json-schema-1-energy ............. Passed 4.08 sec; Start 402: json-schema-1-throws; 395/411 Test #401: json-schema-1-orient ............. Passed 2.72 sec; Start 403: json-schema-1-gradient; 396/411 Test #402: json-schema-1-throws ............. Passed 0.59 sec; Start 404: json-schema-1-properties; 397/411 Test #403: json-schema-1-gradient ........... Passed 1.76 sec; Start 405: skeleton; 398/411 Test #404: json-schema-1-properties ......... Passed 1.78 sec; Start 406: skeletonaointegrals; 399/411 Test #392: python-cc54 ...................... Passed 25.14 sec; Start 407: skeletondfmp2; 400/411 Test #405: skeleton ......................... Passed 1.92 sec; Start 408: skeletonmointegrals; 401/411 Test #406: skeletonaointegrals .............. Passed 2.03 sec; Start 409: skeletonscf; 402/411 Test #409: skeletonscf ...................... Passed 0.62 sec; Start 410: skeletonsointegrals; 403/411 Test #407: skeletondfmp2 .................... Passed 1.80 sec; Start 411: skeletonwavefunction; 404/411 Test #408: skeletonmointegrals .............. Passed 1.54 sec; 405/411 Test #410: skeletonsointegrals .............. Passed 1.33 sec; 406/411 Test #411: skeletonwavefunction ............. Passed 1.22 sec; 407/411 Test #379: cc-module ........................ Passed 171.95 sec; 408/411 Test #306: pywrap-checkrun-uhf .............. Passed 713.66 sec; 409/411 Test #386: cookbook-rohf-orb-rot ............ Passed 161.04 sec; 410/411 Test #300: pywrap-all ....................... Passed 782.90 sec; 411/411 Test #304: pywrap-checkrun-rhf .............. Passed 743.15 sec. 100% tests passed, 0 tests failed out of 411. Label Time Summary:; adc = 69.47 sec*proc (2 tests); autotest = 2116.22 sec*proc (26 tests); cart = 16612.59 sec*proc (123 tests); cas = 62.15 sec*proc (1 test); casscf = 157.07 sec*proc (11 tests); cbs = 2510.55 sec*proc (10 tests); cc = 10612.98 sec*proc (65 tests); ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1112#issuecomment-409912325:37737,Test,Test,37737,https://psicode.org,https://github.com/psi4/psi4/pull/1112#issuecomment-409912325,1,['Test'],['Test']
Testability,#401: json-schema-1-energy ............. Passed 4.15 sec; Start 340: scf7; 245/413 Test #400: json-v11-gradient ................ Passed 1.40 sec; Start 288: props3; 246/413 Test #392: python-mints9 .................... Passed 2.15 sec; Start 272: opt4; 247/413 Test #397: python-mints13 ................... Passed 2.07 sec; Start 126: dfccsdl1; 248/413 Test #268: opt1-fd .......................... Passed 9.74 sec; Start 245: ocepa1; 249/413 Test #171: dft-vv10 ......................... Passed 18.16 sec; Start 287: props2; 250/413 Test #228: mp2-1 ............................ Passed 10.66 sec; Start 14: cbs-xtpl-energy; 251/413 Test #326: sapt8 ............................ Passed 15.55 sec; Start 143: dfomp2-3; 252/413 Test #159: dfrasscf-sp ...................... Passed 9.04 sec; Start 398: python-memdfjk; 253/413 Test #245: ocepa1 ........................... Passed 7.39 sec; Start 163: dft-ghost; 254/413 Test #126: dfccsdl1 ......................... Passed 8.14 sec; Start 89: cepa2; 255/413 Test #352: dft-custom ....................... Passed 15.35 sec; Start 370: scf-freq1; 256/413 Test #143: dfomp2-3 ......................... Passed 2.20 sec; Start 3: casscf-fzc-sp; 257/413 Test #342: soscf-large ...................... Passed 16.23 sec; Start 359: tu4-h2o-freq; 258/413 Test #398: python-memdfjk ................... Passed 1.92 sec; Start 389: python-energy; 259/413 Test #5: casscf-sa-sp ..................... Passed 13.87 sec; Start 403: json-schema-1-orient; 260/413 Test #219: mints6 ........................... Passed 13.74 sec; Start 270: opt2-fd; 261/413 Test #272: opt4 ............................. Passed 10.06 sec; Start 371: dft-jk; 262/413 Test #389: python-energy .................... Passed 1.11 sec; Start 200: freq-isotope2; 263/413 Test #403: json-schema-1-orient ............. Passed 1.93 sec; Start 374: dft-custom-hybrid; 264/413 Test #89: cepa2 ............................ Passed 4.39 sec; Start 337: scf4; 265/413 Test #340: scf7 .........................,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1239#issuecomment-425082026:23967,Test,Test,23967,https://psicode.org,https://github.com/psi4/psi4/pull/1239#issuecomment-425082026,1,['Test'],['Test']
Testability,#401: json-schema-1-ghost .............. Passed 1.76 sec; Start 402: json-schema-1-orient; 387/412 Test #402: json-schema-1-orient ............. Passed 2.50 sec; Start 403: json-schema-1-throws; 388/412 Test #400: json-schema-1-energy ............. Passed 5.58 sec; Start 404: json-schema-1-gradient; 389/412 Test #403: json-schema-1-throws ............. Passed 0.67 sec; Start 405: json-schema-1-properties; 390/412 Test #404: json-schema-1-gradient ........... Passed 2.22 sec; Start 406: skeleton; 391/412 Test #405: json-schema-1-properties ......... Passed 1.81 sec; Start 407: skeletonaointegrals; 392/412 Test #407: skeletonaointegrals .............. Passed 3.33 sec; Start 408: skeletondfmp2; 393/412 Test #406: skeleton ......................... Passed 3.87 sec; Start 409: skeletonmointegrals; 394/412 Test #393: python-cc54 ...................... Passed 28.49 sec; Start 410: skeletonscf; 395/412 Test #410: skeletonscf ...................... Passed 0.68 sec; Start 411: skeletonsointegrals; 396/412 Test #408: skeletondfmp2 .................... Passed 2.47 sec; Start 412: skeletonwavefunction; 397/412 Test #409: skeletonmointegrals .............. Passed 2.26 sec; 398/412 Test #411: skeletonsointegrals .............. Passed 1.98 sec; 399/412 Test #412: skeletonwavefunction ............. Passed 2.83 sec; 400/412 Test #348: sapt-dft2 ........................ Passed 127.79 sec; 401/412 Test #372: dft-custom-dhdf .................. Passed 94.42 sec; 402/412 Test #306: pywrap-checkrun-rohf ............. Passed 288.21 sec; 403/412 Test #390: python-pubchem ................... Passed 69.31 sec; 404/412 Test #360: tu6-cp-ne2 ....................... Passed 164.40 sec; 405/412 Test #380: cc-module ........................ Passed 133.41 sec; 406/412 Test #319: sapt4 ............................ Passed 2071.90 sec; 407/412 Test #387: cookbook-rohf-orb-rot ............ Passed 136.41 sec; 408/412 Test #307: pywrap-checkrun-uhf .............. Passed 359.25 sec; 409/412 Test #374: dft-c,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1219#issuecomment-419060031:37217,Test,Test,37217,https://psicode.org,https://github.com/psi4/psi4/pull/1219#issuecomment-419060031,1,['Test'],['Test']
Testability,"#402: json-schema-1-throws ............. Passed 0.56 sec; 407/411 Test #174: docs-bases ....................... Passed 0.53 sec; 408/411 Test #215: mints4 ........................... Passed 0.51 sec; 409/411 Test #208: matrix1 .......................... Passed 0.51 sec; 410/411 Test #87: cepa1 ............................ Passed 1.82 sec; 411/411 Test #318: sapt4 ............................ Passed 1890.44 sec. 100% tests passed, 0 tests failed out of 411. Label Time Summary:; adc = 66.55 sec*proc (2 tests); autotest = 2224.11 sec*proc (26 tests); cart = 16014.43 sec*proc (123 tests); cas = 59.03 sec*proc (1 test); casscf = 53.75 sec*proc (11 tests); cbs = 3517.28 sec*proc (10 tests); cc = 9427.35 sec*proc (65 tests); cdomp2 = 44.89 sec*proc (2 tests); cepa = 199.36 sec*proc (7 tests); ci = 100.45 sec*proc (8 tests); cisd = 209.41 sec*proc (7 tests); cookbook = 284.29 sec*proc (1 test); cubeprop = 19.63 sec*proc (2 tests); dcft = 3319.98 sec*proc (13 tests); df = 1994.11 sec*proc (38 tests); dfccd = 1.33 sec*proc (1 test); dfccd-grad = 3.71 sec*proc (1 test); dfccdl = 4.09 sec*proc (1 test); dfccsd = 3.47 sec*proc (1 test); dfccsd-grad = 39.72 sec*proc (1 test); dfccsd-t-grad = 37.57 sec*proc (1 test); dfccsdat = 4.01 sec*proc (1 test); dfccsdl = 2.51 sec*proc (1 test); dfccsdt = 2.35 sec*proc (1 test); dfep2 = 4.67 sec*proc (2 tests); dfmp2 = 118.85 sec*proc (11 tests); dfomp2 = 1035.30 sec*proc (7 tests); dfomp2.5 = 224.33 sec*proc (4 tests); dfomp3 = 258.95 sec*proc (4 tests); dfscf = 133.50 sec*proc (1 test); dft = 1440.06 sec*proc (27 tests); docs = 1.12 sec*proc (2 tests); ecp = 39.28 sec*proc (2 tests); fci = 10.77 sec*proc (2 tests); fcidump = 1.95 sec*proc (1 test); findif = 901.99 sec*proc (5 tests); fnocc = 93.14 sec*proc (4 tests); freq = 1004.97 sec*proc (6 tests); gradient = 1655.45 sec*proc (16 tests); json = 11.29 sec*proc (8 tests); longtests = 3627.91 sec*proc (5 tests); mcscf = 2.67 sec*proc (3 tests); minitests = 60.89 sec*proc (4 tests); mints =",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1077#issuecomment-409911901:38935,test,tests,38935,https://psicode.org,https://github.com/psi4/psi4/pull/1077#issuecomment-409911901,1,['test'],['tests']
Testability,"#405: skeleton ......................... Passed 1.10 sec; Start 406: skeletonaointegrals; 406/411 Test #406: skeletonaointegrals .............. Passed 1.17 sec; Start 407: skeletondfmp2; 407/411 Test #407: skeletondfmp2 .................... Passed 1.29 sec; Start 408: skeletonmointegrals; 408/411 Test #408: skeletonmointegrals .............. Passed 1.22 sec; Start 409: skeletonscf; 409/411 Test #409: skeletonscf ...................... Passed 0.72 sec; Start 410: skeletonsointegrals; 410/411 Test #410: skeletonsointegrals .............. Passed 1.01 sec; Start 411: skeletonwavefunction; 411/411 Test #411: skeletonwavefunction ............. Passed 1.03 sec. 100% tests passed, 0 tests failed out of 411. Label Time Summary:; adc = 55.73 sec*proc (2 tests); autotest = 374.25 sec*proc (26 tests); cart = 8218.29 sec*proc (123 tests); cas = 41.71 sec*proc (1 test); casscf = 36.15 sec*proc (11 tests); cbs = 546.91 sec*proc (10 tests); cc = 1151.91 sec*proc (65 tests); cdomp2 = 5.24 sec*proc (2 tests); cepa = 30.36 sec*proc (7 tests); ci = 79.29 sec*proc (8 tests); cisd = 117.44 sec*proc (7 tests); cookbook = 18.93 sec*proc (1 test); cubeprop = 16.42 sec*proc (2 tests); dcft = 560.31 sec*proc (13 tests); df = 370.25 sec*proc (38 tests); dfccd = 1.39 sec*proc (1 test); dfccd-grad = 2.01 sec*proc (1 test); dfccdl = 1.41 sec*proc (1 test); dfccsd = 1.55 sec*proc (1 test); dfccsd-grad = 3.50 sec*proc (1 test); dfccsd-t-grad = 3.85 sec*proc (1 test); dfccsdat = 2.57 sec*proc (1 test); dfccsdl = 1.64 sec*proc (1 test); dfccsdt = 1.99 sec*proc (1 test); dfep2 = 4.64 sec*proc (2 tests); dfmp2 = 93.43 sec*proc (11 tests); dfomp2 = 61.41 sec*proc (7 tests); dfomp2.5 = 19.21 sec*proc (4 tests); dfomp3 = 18.74 sec*proc (4 tests); dfscf = 120.49 sec*proc (1 test); dft = 1158.52 sec*proc (27 tests); docs = 1.35 sec*proc (2 tests); ecp = 31.03 sec*proc (2 tests); fci = 9.12 sec*proc (2 tests); fcidump = 2.13 sec*proc (1 test); findif = 682.89 sec*proc (5 tests); fnocc = 31.56 sec*proc (4 test",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1073#issuecomment-406985370:38529,test,tests,38529,https://psicode.org,https://github.com/psi4/psi4/pull/1073#issuecomment-406985370,1,['test'],['tests']
Testability,"#405: skeleton ......................... Passed 1.11 sec; Start 406: skeletonaointegrals; 406/411 Test #406: skeletonaointegrals .............. Passed 0.98 sec; Start 407: skeletondfmp2; 407/411 Test #407: skeletondfmp2 .................... Passed 1.33 sec; Start 408: skeletonmointegrals; 408/411 Test #408: skeletonmointegrals .............. Passed 1.07 sec; Start 409: skeletonscf; 409/411 Test #409: skeletonscf ...................... Passed 0.68 sec; Start 410: skeletonsointegrals; 410/411 Test #410: skeletonsointegrals .............. Passed 1.01 sec; Start 411: skeletonwavefunction; 411/411 Test #411: skeletonwavefunction ............. Passed 0.95 sec. 100% tests passed, 0 tests failed out of 411. Label Time Summary:; adc = 59.40 sec*proc (2 tests); autotest = 413.88 sec*proc (26 tests); cart = 8685.75 sec*proc (123 tests); cas = 42.49 sec*proc (1 test); casscf = 39.18 sec*proc (11 tests); cbs = 636.82 sec*proc (10 tests); cc = 1337.69 sec*proc (65 tests); cdomp2 = 6.18 sec*proc (2 tests); cepa = 34.84 sec*proc (7 tests); ci = 81.27 sec*proc (8 tests); cisd = 132.02 sec*proc (7 tests); cookbook = 33.29 sec*proc (1 test); cubeprop = 17.72 sec*proc (2 tests); dcft = 859.31 sec*proc (13 tests); df = 444.10 sec*proc (38 tests); dfccd = 1.41 sec*proc (1 test); dfccd-grad = 2.48 sec*proc (1 test); dfccdl = 1.38 sec*proc (1 test); dfccsd = 1.91 sec*proc (1 test); dfccsd-grad = 5.09 sec*proc (1 test); dfccsd-t-grad = 4.20 sec*proc (1 test); dfccsdat = 3.26 sec*proc (1 test); dfccsdl = 1.60 sec*proc (1 test); dfccsdt = 2.15 sec*proc (1 test); dfep2 = 4.83 sec*proc (2 tests); dfmp2 = 103.27 sec*proc (11 tests); dfomp2 = 91.94 sec*proc (7 tests); dfomp2.5 = 23.91 sec*proc (4 tests); dfomp3 = 23.93 sec*proc (4 tests); dfscf = 139.95 sec*proc (1 test); dft = 1225.97 sec*proc (27 tests); docs = 1.17 sec*proc (2 tests); ecp = 31.89 sec*proc (2 tests); fci = 9.85 sec*proc (2 tests); fcidump = 1.78 sec*proc (1 test); findif = 712.53 sec*proc (5 tests); fnocc = 28.21 sec*proc (4 tes",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1071#issuecomment-407449972:38558,test,tests,38558,https://psicode.org,https://github.com/psi4/psi4/pull/1071#issuecomment-407449972,1,['test'],['tests']
Testability,"#406: skeletonaointegrals .............. Passed 2.03 sec; Start 409: skeletonscf; 402/411 Test #409: skeletonscf ...................... Passed 0.62 sec; Start 410: skeletonsointegrals; 403/411 Test #407: skeletondfmp2 .................... Passed 1.80 sec; Start 411: skeletonwavefunction; 404/411 Test #408: skeletonmointegrals .............. Passed 1.54 sec; 405/411 Test #410: skeletonsointegrals .............. Passed 1.33 sec; 406/411 Test #411: skeletonwavefunction ............. Passed 1.22 sec; 407/411 Test #379: cc-module ........................ Passed 171.95 sec; 408/411 Test #306: pywrap-checkrun-uhf .............. Passed 713.66 sec; 409/411 Test #386: cookbook-rohf-orb-rot ............ Passed 161.04 sec; 410/411 Test #300: pywrap-all ....................... Passed 782.90 sec; 411/411 Test #304: pywrap-checkrun-rhf .............. Passed 743.15 sec. 100% tests passed, 0 tests failed out of 411. Label Time Summary:; adc = 69.47 sec*proc (2 tests); autotest = 2116.22 sec*proc (26 tests); cart = 16612.59 sec*proc (123 tests); cas = 62.15 sec*proc (1 test); casscf = 157.07 sec*proc (11 tests); cbs = 2510.55 sec*proc (10 tests); cc = 10612.98 sec*proc (65 tests); cdomp2 = 81.08 sec*proc (2 tests); cepa = 296.50 sec*proc (7 tests); ci = 125.30 sec*proc (8 tests); cisd = 203.11 sec*proc (7 tests); cookbook = 161.04 sec*proc (1 test); cubeprop = 22.05 sec*proc (2 tests); dcft = 3092.73 sec*proc (13 tests); df = 1676.00 sec*proc (38 tests); dfccd = 5.43 sec*proc (1 test); dfccd-grad = 23.87 sec*proc (1 test); dfccdl = 5.84 sec*proc (1 test); dfccsd = 12.87 sec*proc (1 test); dfccsd-grad = 48.16 sec*proc (1 test); dfccsd-t-grad = 58.36 sec*proc (1 test); dfccsdat = 27.90 sec*proc (1 test); dfccsdl = 18.85 sec*proc (1 test); dfccsdt = 20.66 sec*proc (1 test); dfep2 = 6.65 sec*proc (2 tests); dfmp2 = 160.87 sec*proc (11 tests); dfomp2 = 668.52 sec*proc (7 tests); dfomp2.5 = 158.90 sec*proc (4 tests); dfomp3 = 194.44 sec*proc (4 tests); dfscf = 140.97 sec*proc (1 test); dft ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1112#issuecomment-409912325:38542,test,tests,38542,https://psicode.org,https://github.com/psi4/psi4/pull/1112#issuecomment-409912325,1,['test'],['tests']
Testability,#41: cc26 ............................. Passed 424.74 sec; Start 234: nbody-intermediates; 117/401 Test #147: dfomp3-grad1 ..................... Passed 26.96 sec; Start 78: cc8b; 118/401 Test #268: opt6 ............................. Passed 21.27 sec; Start 303: pywrap-db1; 119/401 Test #137: dfmp2-grad5 ...................... Passed 18.60 sec; Start 80: cc9; 120/401 Test #141: dfomp2-4 ......................... Passed 38.69 sec; Start 149: dfomp2p5-1; 121/401 Test #173: extern2 .......................... Passed 23.61 sec; Start 55: cc39; 122/401 Test #59: cc42 ............................. Passed 60.86 sec; Start 202: ghosts; 123/401 Test #39: cc24 ............................. Passed 464.47 sec; Start 43: cc28; 124/401 Test #77: cc8a ............................. Passed 50.80 sec; Start 151: dfomp2p5-grad1; 125/401 Test #273: opt12 ............................ Passed 19.08 sec; Start 22: cc11; 126/401 Test #292: psithon2 ......................... Passed 20.69 sec; Start 271: opt9; 127/401 Test #345: dft-custom ....................... Passed 18.67 sec; Start 334: scf7; 128/401 Test #66: cc4a ............................. Passed 43.61 sec; Start 313: sapt3; 129/401 Test #202: ghosts ........................... Passed 16.16 sec; Start 70: cc53; 130/401 Test #234: nbody-intermediates .............. Passed 26.04 sec; Start 260: opt-lindep-change; 131/401 Test #149: dfomp2p5-1 ....................... Passed 30.82 sec; Start 37: cc22; 132/401 Test #271: opt9 ............................. Passed 23.90 sec; Start 23: cc12; 133/401 Test #313: sapt3 ............................ Passed 15.45 sec; Start 372: pywrap-bfs; 134/401 Test #303: pywrap-db1 ....................... Passed 36.68 sec; Start 332: scf5; 135/401 Test #334: scf7 ............................. Passed 23.18 sec; Start 30: cc15; 136/401 Test #260: opt-lindep-change ................ Passed 16.61 sec; Start 26: cc13b; 137/401 Test #79: cc8c ............................. Passed 56.70 sec; Start 88: cepa3; 138/401 Te,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1071#issuecomment-402453832:12357,Test,Test,12357,https://psicode.org,https://github.com/psi4/psi4/pull/1071#issuecomment-402453832,1,['Test'],['Test']
Testability,#43: cc28 ............................. Passed 20.89 sec; Start 44: cc29; 25/85 Test #44: cc29 ............................. Passed 53.61 sec; Start 45: cc3; 26/85 Test #45: cc3 .............................. Passed 63.38 sec; Start 46: cc30; 27/85 Test #46: cc30 ............................. Passed 12.74 sec; Start 47: cc31; 28/85 Test #47: cc31 ............................. Passed 24.41 sec; Start 48: cc32; 29/85 Test #48: cc32 ............................. Passed 3.12 sec; Start 49: cc33; 30/85 Test #49: cc33 ............................. Passed 6.56 sec; Start 50: cc34; 31/85 Test #50: cc34 ............................. Passed 2.88 sec; Start 51: cc35; 32/85 Test #51: cc35 ............................. Passed 6.99 sec; Start 52: cc36; 33/85 Test #52: cc36 ............................. Passed 2.79 sec; Start 53: cc37; 34/85 Test #53: cc37 ............................. Passed 3.16 sec; Start 54: cc38; 35/85 Test #54: cc38 ............................. Passed 4.87 sec; Start 55: cc39; 36/85 Test #55: cc39 ............................. Passed 7.32 sec; Start 56: cc4; 37/85 Test #56: cc4 .............................. Passed 7.40 sec; Start 57: cc40; 38/85 Test #57: cc40 ............................. Passed 12.95 sec; Start 58: cc41; 39/85 Test #58: cc41 ............................. Passed 18.03 sec; Start 59: cc42; 40/85 Test #59: cc42 ............................. Passed 9.51 sec; Start 60: cc43; 41/85 Test #60: cc43 ............................. Passed 14.57 sec; Start 61: cc44; 42/85 Test #61: cc44 ............................. Passed 30.74 sec; Start 62: cc45; 43/85 Test #62: cc45 ............................. Passed 3.51 sec; Start 63: cc47; 44/85 Test #63: cc47 ............................. Passed 7.30 sec; Start 64: cc48; 45/85 Test #64: cc48 ............................. Passed 10.98 sec; Start 65: cc49; 46/85 Test #65: cc49 ............................. Passed 13.22 sec; Start 66: cc4a; 47/85 Test #66: cc4a ............................. Passed 7.71 sec; St,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1067#issuecomment-402179082:3042,Test,Test,3042,https://psicode.org,https://github.com/psi4/psi4/pull/1067#issuecomment-402179082,1,['Test'],['Test']
Testability,#47: cc31 ............................. Passed 213.17 sec; Start 27: cc13c; 29/411 Test #112: dcft6 ............................ Passed 207.94 sec; Start 70: cc52; 30/411 Test #24: cc13 ............................. Passed 461.26 sec; Start 58: cc41; 31/411 Test #28: cc13d ............................ Passed 324.06 sec; Start 104: dcft-grad2; 32/411 Test #182: isapt1 ........................... Passed 402.87 sec; Start 373: dft-custom-mgga; 33/411 Test #11: cbs-delta-energy ................. Passed 389.80 sec; Start 144: dfomp2-grad2; 34/411 Test #91: cepa-module ...................... Passed 172.39 sec; Start 97: cisd-opt-fd; 35/411 Test #27: cc13c ............................ Passed 152.82 sec; Start 46: cc30; 36/411 Test #58: cc41 ............................. Passed 135.41 sec; Start 320: sapt6; 37/411 Test #281: opt-irc-2 ........................ Passed 180.85 sec; Start 115: dcft9; 38/411 Test #70: cc52 ............................. Passed 175.89 sec; Start 386: cookbook-rohf-orb-rot; 39/411 Test #104: dcft-grad2 ....................... Passed 130.18 sec; Start 60: cc43; 40/411 Test #305: pywrap-checkrun-rohf ............. Passed 660.05 sec; Start 149: dfomp3-grad2; 41/411 Test #144: dfomp2-grad2 ..................... Passed 71.62 sec; Start 17: cbs-xtpl-opt; 42/411 Test #46: cc30 ............................. Passed 77.21 sec; Start 158: dfscf-bz2; 43/411 Test #359: tu6-cp-ne2 ....................... Passed 249.27 sec; Start 379: cc-module; 44/411 Test #195: fd-freq-gradient-large ........... Passed 292.03 sec; Start 57: cc40; 45/411 Test #115: dcft9 ............................ Passed 93.57 sec; Start 107: dcft1; 46/411 Test #60: cc43 ............................. Passed 98.08 sec; Start 183: isapt2; 47/411 Test #149: dfomp3-grad2 ..................... Passed 73.71 sec; Start 43: cc28; 48/411 Test #97: cisd-opt-fd ...................... Passed 154.70 sec; Start 59: cc42; 49/411 Test #17: cbs-xtpl-opt ..................... Passed 90.29 sec; Start 347: sapt-df,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1124#issuecomment-411347383:3996,Test,Test,3996,https://psicode.org,https://github.com/psi4/psi4/pull/1124#issuecomment-411347383,1,['Test'],['Test']
Testability,#48: cc31 ............................. Passed 213.55 sec; Start 303: pywrap-cbs1; 41/412 Test #184: isapt2 ........................... Passed 116.22 sec; Start 26: cc13a; 42/412 Test #30: cc14 ............................. Passed 609.23 sec; Start 114: dcft7; 43/412 Test #59: cc41 ............................. Passed 217.43 sec; Start 206: frac-traverse; 44/412 Test #75: cc5a ............................. Passed 142.09 sec; Start 317: sapt2; 45/412 Test #61: cc43 ............................. Passed 214.21 sec; Start 319: sapt4; 46/412 Test #155: dft-grad-lr2 ..................... Passed 112.09 sec; Start 326: scf-bz2; 47/412 Test #360: tu6-cp-ne2 ....................... Passed 430.46 sec; Start 92: cepa-module; 48/412 Test #105: dcft-grad2 ....................... Passed 159.99 sec; Start 372: dft-custom-dhdf; 49/412 Test #169: dft1 ............................. Passed 111.48 sec; Start 31: cc15; 50/412 Test #32: cc16 ............................. Passed 283.37 sec; Start 262: omp3-5; 51/412 Test #279: opt13 ............................ Passed 767.47 sec; Start 260: omp3-3; 52/412 Test #13: cbs-xtpl-alpha ................... Passed 452.73 sec; Start 70: cc51; 53/412 Test #380: cc-module ........................ Passed 296.59 sec; Start 79: cc8a; 54/412 Test #387: cookbook-rohf-orb-rot ............ Passed 326.91 sec; Start 76: cc6; 55/412 Test #303: pywrap-cbs1 ...................... Passed 147.49 sec; Start 281: opt-irc-1; 56/412 Test #79: cc8a ............................. Passed 41.89 sec; Start 116: dcft9; 57/412 Test #31: cc15 ............................. Passed 76.78 sec; Start 280: opt14; 58/412 Test #372: dft-custom-dhdf .................. Passed 95.04 sec; Start 44: cc28; 59/412 Test #326: scf-bz2 .......................... Passed 122.51 sec; Start 320: sapt5; 60/412 Test #70: cc51 ............................. Passed 79.59 sec; Start 83: cc9a; 61/412 Test #92: cepa-module ...................... Passed 121.36 sec; Start 318: sapt3; 62/412 Test #262: omp3-5,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1221#issuecomment-419096646:5106,Test,Test,5106,https://psicode.org,https://github.com/psi4/psi4/pull/1221#issuecomment-419096646,1,['Test'],['Test']
Testability,#4: casscf-semi ...................... Passed 4.06 sec; Start 186: fci-h2o-2; 271/411 Test #139: dfomp2-1 ......................... Passed 4.23 sec; Start 184: fci-dipole; 272/411 Test #9: castup2 .......................... Passed 7.67 sec; Start 93: cisd-h2o+-0; 273/411 Test #117: dfcasscf-sa-sp ................... Passed 4.15 sec; Start 251: omp2-grad1; 274/411 Test #251: omp2-grad1 ....................... Passed 1.29 sec; Start 339: scf-property; 275/411 Test #86: cepa0-grad2 ...................... Passed 1.91 sec; Start 141: dfomp2-3; 276/411 Test #141: dfomp2-3 ......................... Passed 1.85 sec; Start 370: scf-coverage; 277/411 Test #93: cisd-h2o+-0 ...................... Passed 3.91 sec; Start 99: cisd-sp-2; 278/411 Test #185: fci-h2o .......................... Passed 6.04 sec; Start 171: dft2; 279/411 Test #339: scf-property ..................... Passed 4.12 sec; Start 331: scf1; 280/411 Test #186: fci-h2o-2 ........................ Passed 5.93 sec; Start 179: fsapt2; 281/411 Test #184: fci-dipole ....................... Passed 5.96 sec; Start 108: dcft2; 282/411 Test #370: scf-coverage ..................... Passed 2.67 sec; Start 94: cisd-h2o+-1; 283/411 Test #108: dcft2 ............................ Passed 1.25 sec; Start 246: omp2-1; 284/411 Test #99: cisd-sp-2 ........................ Passed 4.22 sec; Start 95: cisd-h2o+-2; 285/411 Test #246: omp2-1 ........................... Passed 1.31 sec; Start 243: ocepa1; 286/411 Test #331: scf1 ............................. Passed 3.74 sec; Start 376: pywrap-align; 287/411 Test #171: dft2 ............................. Passed 4.47 sec; Start 241: ocepa-grad1; 288/411 Test #94: cisd-h2o+-1 ...................... Passed 4.05 sec; Start 120: dfccd1; 289/411 Test #243: ocepa1 ........................... Passed 1.92 sec; Start 136: dfmp2-grad3; 290/411 Test #179: fsapt2 ........................... Passed 4.94 sec; Start 388: python-curve; 291/411 Test #120: dfccd1 ........................... Passed 1.95 sec; Star,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1075#issuecomment-409598225:26078,Test,Test,26078,https://psicode.org,https://github.com/psi4/psi4/pull/1075#issuecomment-409598225,1,['Test'],['Test']
Testability,#4: casscf-semi ...................... Passed 4.34 sec; Start 5: casscf-sa-sp; 12/411 Test #5: casscf-sa-sp ..................... Passed 18.34 sec; Start 6: ao-casscf-sp; 13/411 Test #2: adc2 ............................. Passed 44.45 sec; Start 7: casscf-sp; 14/411 Test #6: ao-casscf-sp ..................... Passed 5.43 sec; Start 8: castup1; 15/411 Test #8: castup1 .......................... Passed 1.92 sec; Start 9: castup2; 16/411 Test #325: scf-bz2 .......................... Passed 126.98 sec; Start 10: castup3; 17/411 Test #9: castup2 .......................... Passed 14.01 sec; Start 11: cbs-delta-energy; 18/411 Test #10: castup3 .......................... Passed 15.90 sec; Start 12: cbs-parser; 19/411 Test #7: casscf-sp ........................ Passed 33.11 sec; Start 13: cbs-xtpl-alpha; 20/411 Test #394: python-vibanalysis ............... Passed 918.91 sec; Start 14: cbs-xtpl-energy; 21/411 Test #14: cbs-xtpl-energy .................. Passed 12.98 sec; Start 15: cbs-xtpl-freq; 22/411 Test #15: cbs-xtpl-freq .................... Passed 13.65 sec; Start 16: cbs-xtpl-gradient; 23/411 Test #12: cbs-parser ....................... Passed 59.21 sec; Start 17: cbs-xtpl-opt; 24/411 Test #16: cbs-xtpl-gradient ................ Passed 35.82 sec; Start 19: cbs-xtpl-wrapper; 25/411 Test #316: sapt2 ............................ Passed 358.15 sec; Start 20: cc1; 26/411 Test #19: cbs-xtpl-wrapper ................. Passed 80.51 sec; Start 21: cc10; 27/411 Test #17: cbs-xtpl-opt ..................... Passed 109.54 sec; Start 22: cc11; 28/411 Test #20: cc1 .............................. Passed 109.00 sec; Start 23: cc12; 29/411 Test #21: cc10 ............................. Passed 45.45 sec; Start 24: cc13; 30/411 Test #23: cc12 ............................. Passed 31.10 sec; Start 26: cc13b; 31/411 Test #22: cc11 ............................. Passed 47.18 sec; Start 27: cc13c; 32/411 Test #11: cbs-delta-energy ................. Passed 255.04 sec; Start 28: cc13d; 33/411 Test #2,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1112#issuecomment-409912325:2251,Test,Test,2251,https://psicode.org,https://github.com/psi4/psi4/pull/1112#issuecomment-409912325,1,['Test'],['Test']
Testability,#53: cc36 ............................. Passed 27.88 sec; Start 268: opt2; 181/412 Test #167: dft-psivar ....................... Passed 45.63 sec; Start 173: dft3; 182/412 Test #376: pywrap-bfs ....................... Passed 45.59 sec; Start 178: extern2; 183/412 Test #160: dft-b2plyp ....................... Passed 47.37 sec; Start 304: pywrap-checkrun-convcrit; 184/412 Test #314: rasscf-sp ........................ Passed 41.73 sec; Start 38: cc22; 185/412 Test #273: opt6 ............................. Passed 54.96 sec; Start 164: dft-freq; 186/412 Test #268: opt2 ............................. Passed 56.52 sec; Start 208: gibbs; 187/412 Test #173: dft3 ............................. Passed 59.20 sec; Start 347: sapt-dft1; 188/412 Test #178: extern2 .......................... Passed 56.03 sec; Start 259: omp3-2; 189/412 Test #304: pywrap-checkrun-convcrit ......... Passed 58.77 sec; Start 278: opt12; 190/412 Test #38: cc22 ............................. Passed 56.44 sec; Start 248: omp2-2; 191/412 Test #208: gibbs ............................ Passed 68.71 sec; Start 190: fci-tdm-2; 192/412 Test #164: dft-freq ......................... Passed 75.93 sec; Start 129: dfccsdat1; 193/412 Test #179: fsapt1 ........................... Passed 2077.65 sec; Start 202: fnocc3; 194/412 Test #259: omp3-2 ........................... Passed 65.01 sec; Start 359: tu5-sapt; 195/412 Test #347: sapt-dft1 ........................ Passed 79.99 sec; Start 323: sapt-dft-lrc; 196/412 Test #248: omp2-2 ........................... Passed 57.09 sec; Start 147: dfomp3-1; 197/412 Test #278: opt12 ............................ Passed 70.83 sec; Start 249: omp2-3; 198/412 Test #202: fnocc3 ........................... Passed 42.62 sec; Start 144: dfomp2-grad1; 199/412 Test #129: dfccsdat1 ........................ Passed 46.01 sec; Start 54: cc37; 200/412 Test #147: dfomp3-1 ......................... Passed 37.56 sec; Start 24: cc12; 201/412 Test #190: fci-tdm-2 ........................ Passed 66.35 sec; ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1226#issuecomment-420597899:17733,Test,Test,17733,https://psicode.org,https://github.com/psi4/psi4/pull/1226#issuecomment-420597899,1,['Test'],['Test']
Testability,#53: cc37 ............................. Passed 3.16 sec; Start 54: cc38; 35/85 Test #54: cc38 ............................. Passed 4.87 sec; Start 55: cc39; 36/85 Test #55: cc39 ............................. Passed 7.32 sec; Start 56: cc4; 37/85 Test #56: cc4 .............................. Passed 7.40 sec; Start 57: cc40; 38/85 Test #57: cc40 ............................. Passed 12.95 sec; Start 58: cc41; 39/85 Test #58: cc41 ............................. Passed 18.03 sec; Start 59: cc42; 40/85 Test #59: cc42 ............................. Passed 9.51 sec; Start 60: cc43; 41/85 Test #60: cc43 ............................. Passed 14.57 sec; Start 61: cc44; 42/85 Test #61: cc44 ............................. Passed 30.74 sec; Start 62: cc45; 43/85 Test #62: cc45 ............................. Passed 3.51 sec; Start 63: cc47; 44/85 Test #63: cc47 ............................. Passed 7.30 sec; Start 64: cc48; 45/85 Test #64: cc48 ............................. Passed 10.98 sec; Start 65: cc49; 46/85 Test #65: cc49 ............................. Passed 13.22 sec; Start 66: cc4a; 47/85 Test #66: cc4a ............................. Passed 7.71 sec; Start 67: cc50; 48/85 Test #67: cc50 ............................. Passed 13.56 sec; Start 68: cc51; 49/85 Test #68: cc51 ............................. Passed 22.84 sec; Start 69: cc52; 50/85 Test #69: cc52 ............................. Passed 35.22 sec; Start 70: cc53; 51/85 Test #70: cc53 ............................. Passed 5.34 sec; Start 71: cc54; 52/85 Test #71: cc54 ............................. Passed 3.69 sec; Start 72: cc55; 53/85 Test #72: cc55 ............................. Passed 6.05 sec; Start 73: cc5a; 54/85 Test #73: cc5a ............................. Passed 20.77 sec; Start 74: cc6; 55/85 Test #74: cc6 .............................. Passed 29.20 sec; Start 75: cc7; 56/85 Test #75: cc7 .............................. Passed 30.38 sec; Start 76: cc8; 57/85 Test #76: cc8 .............................. Passed 5.07 sec; Sta,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1067#issuecomment-402179082:3886,Test,Test,3886,https://psicode.org,https://github.com/psi4/psi4/pull/1067#issuecomment-402179082,1,['Test'],['Test']
Testability,#54: cc37 ............................. Passed 35.93 sec; Start 269: opt2; 149/413 Test #279: opt12 ............................ Passed 26.85 sec; Start 361: tu6-cp-ne2; 150/413 Test #22: cc10 ............................. Passed 51.09 sec; Start 74: cc55; 151/413 Test #23: cc11 ............................. Passed 49.40 sec; Start 338: scf5; 152/413 Test #111: dcft3 ............................ Passed 41.52 sec; Start 325: sapt7; 153/413 Test #350: sapt-compare ..................... Passed 44.69 sec; Start 314: rasci-ne; 154/413 Test #304: pywrap-cbs1 ...................... Passed 169.96 sec; Start 93: ci-multi; 155/413 Test #269: opt2 ............................. Passed 27.77 sec; Start 66: cc48; 156/413 Test #284: opt-irc-3 ........................ Passed 32.58 sec; Start 395: python-3-index-transforms; 157/413 Test #198: fd-gradient ...................... Passed 37.81 sec; Start 339: scf6; 158/413 Test #301: pywrap-alias ..................... Passed 80.45 sec; Start 131: dfmp2-1; 159/413 Test #148: dfomp3-1 ......................... Passed 43.61 sec; Start 133: dfmp2-3; 160/413 Test #395: python-3-index-transforms ........ Passed 9.79 sec; Start 135: dfmp2-ecp; 161/413 Test #309: pywrap-db1 ....................... Passed 42.33 sec; Start 344: soscf-dft; 162/413 Test #12: cbs-parser ....................... Passed 86.78 sec; Start 376: dft-custom-gga; 163/413 Test #338: scf5 ............................. Passed 41.90 sec; Start 388: cookbook-rohf-orb-rot; 164/413 Test #325: sapt7 ............................ Passed 35.57 sec; Start 250: omp2-3; 165/413 Test #314: rasci-ne ......................... Passed 34.88 sec; Start 16: cbs-xtpl-gradient; 166/413 Test #131: dfmp2-1 .......................... Passed 33.94 sec; Start 165: dft-freq; 167/413 Test #93: ci-multi ......................... Passed 40.59 sec; Start 107: dcft-grad3; 168/413 Test #339: scf6 ............................. Passed 37.65 sec; Start 140: dfmp2-grad5; 169/413 Test #74: cc55 ....................,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1237#issuecomment-425038275:14978,Test,Test,14978,https://psicode.org,https://github.com/psi4/psi4/pull/1237#issuecomment-425038275,1,['Test'],['Test']
Testability,#55: cc39 ............................. Passed 13.65 sec; Start 299: pywrap-alias; 108/411 Test #375: pywrap-bfs ....................... Passed 25.71 sec; Start 27: cc13c; 109/411 Test #149: dfomp3-grad2 ..................... Passed 26.64 sec; Start 326: scf-ecp; 110/411 Test #178: fsapt1 ........................... Passed 2140.46 sec; Start 104: dcft-grad2; 111/411 Test #34: cc19 ............................. Passed 36.87 sec; Start 91: cepa-module; 112/411 Test #65: cc48 ............................. Passed 34.57 sec; Start 358: tu5-sapt; 113/411 Test #326: scf-ecp .......................... Passed 27.04 sec; Start 54: cc38; 114/411 Test #358: tu5-sapt ......................... Passed 21.52 sec; Start 274: opt8; 115/411 Test #299: pywrap-alias ..................... Passed 48.68 sec; Start 166: dft-psivar; 116/411 Test #27: cc13c ............................ Passed 62.03 sec; Start 336: scf5; 117/411 Test #54: cc38 ............................. Passed 25.71 sec; Start 163: dft-freq; 118/411 Test #166: dft-psivar ....................... Passed 23.63 sec; Start 189: fci-tdm-2; 119/411 Test #274: opt8 ............................. Passed 27.54 sec; Start 346: sapt-dft1; 120/411 Test #163: dft-freq ......................... Passed 21.30 sec; Start 144: dfomp2-grad2; 121/411 Test #91: cepa-module ...................... Passed 60.97 sec; Start 30: cc15; 122/411 Test #104: dcft-grad2 ....................... Passed 70.28 sec; Start 261: omp3-5; 123/411 Test #189: fci-tdm-2 ........................ Passed 20.43 sec; Start 147: dfomp3-2; 124/411 Test #336: scf5 ............................. Passed 31.05 sec; Start 196: fd-gradient; 125/411 Test #346: sapt-dft1 ........................ Passed 22.66 sec; Start 322: sapt-dft-lrc; 126/411 Test #379: cc-module ........................ Passed 113.57 sec; Start 26: cc13b; 127/411 Test #322: sapt-dft-lrc ..................... Passed 19.70 sec; Start 249: omp2-4; 128/411 Test #196: fd-gradient ...................... Passed 31.18 sec;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1078#issuecomment-408900195:11062,Test,Test,11062,https://psicode.org,https://github.com/psi4/psi4/pull/1078#issuecomment-408900195,1,['Test'],['Test']
Testability,#571 has gone a little awry in its git history. This should be a clean version. Relying on CI for compile testing. Maybe should still be squash merged.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/574:106,test,testing,106,https://psicode.org,https://github.com/psi4/psi4/pull/574,1,['test'],['testing']
Testability,#59: cc41 ............................. Passed 107.46 sec; Start 83: cc9a; 89/412 Test #105: dcft-grad2 ....................... Passed 101.83 sec; Start 19: cbs-xtpl-nbody; 90/412 Test #261: omp3-4 ........................... Passed 87.40 sec; Start 243: ocepa-grad2; 91/412 Test #171: dft1-alt ......................... Passed 53.53 sec; Start 132: dfmp2-3; 92/412 Test #264: omp3-grad2 ....................... Passed 71.89 sec; Start 262: omp3-5; 93/412 Test #220: mints-benchmark .................. Passed 42.98 sec; Start 277: opt11; 94/412 Test #145: dfomp2-grad2 ..................... Passed 91.70 sec; Start 81: cc8c; 95/412 Test #132: dfmp2-3 .......................... Passed 41.50 sec; Start 245: ocepa2; 96/412 Test #82: cc9 .............................. Passed 81.68 sec; Start 393: python-cc54; 97/412 Test #231: mp2-module ....................... Passed 115.34 sec; Start 349: sapt-compare; 98/412 Test #83: cc9a ............................. Passed 74.28 sec; Start 308: pywrap-db1; 99/412 Test #193: fd-freq-energy ................... Passed 97.88 sec; Start 361: x2c1; 100/412 Test #19: cbs-xtpl-nbody ................... Passed 102.30 sec; Start 60: cc42; 101/412 Test #260: omp3-3 ........................... Passed 112.58 sec; Start 68: cc4a; 102/412 Test #277: opt11 ............................ Passed 63.60 sec; Start 300: pywrap-alias; 103/412 Test #81: cc8c ............................. Passed 64.99 sec; Start 2: adc2; 104/412 Test #150: dfomp3-grad2 ..................... Passed 124.28 sec; Start 65: cc47; 105/412 Test #243: ocepa-grad2 ...................... Passed 114.31 sec; Start 21: cc1; 106/412 Test #61: cc43 ............................. Passed 136.20 sec; Start 35: cc19; 107/412 Test #308: pywrap-db1 ....................... Passed 43.46 sec; Start 107: dcft-grad4; 108/412 Test #349: sapt-compare ..................... Passed 47.52 sec; Start 238: nbody-he-cluster; 109/412 Test #393: python-cc54 ...................... Passed 54.46 sec; Start 67: cc49; 110/4,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1199#issuecomment-417683504:9519,Test,Test,9519,https://psicode.org,https://github.com/psi4/psi4/pull/1199#issuecomment-417683504,1,['Test'],['Test']
Testability,#5: casscf-sa-sp ..................... Passed 14.38 sec; Start 89: cepa2; 214/412 Test #87: cepa0-grad2 ...................... Passed 8.28 sec; Start 339: scf7; 215/412 Test #154: dft-grad-lr1 ..................... Passed 17.73 sec; Start 91: cepa1; 216/412 Test #106: dcft-grad3 ....................... Passed 18.05 sec; Start 358: tu4-h2o-freq; 217/412 Test #325: sapt8 ............................ Passed 16.07 sec; Start 7: casscf-sp; 218/412 Test #170: dft-vv10 ......................... Passed 18.36 sec; Start 286: props2; 219/412 Test #90: cepa3 ............................ Passed 15.49 sec; Start 367: dft-smoke; 220/412 Test #219: mints8 ........................... Passed 16.29 sec; Start 165: dft-grad1; 221/412 Test #302: pywrap-basis ..................... Passed 17.34 sec; Start 351: dft-custom; 222/412 Test #89: cepa2 ............................ Passed 11.16 sec; Start 287: props3; 223/412 Test #341: soscf-large ...................... Passed 15.61 sec; Start 198: freq-isotope1; 224/412 Test #14: cbs-xtpl-energy .................. Passed 12.53 sec; Start 369: scf-freq1; 225/412 Test #151: dfomp2p5-1 ....................... Passed 21.88 sec; Start 370: dft-jk; 226/412 Test #292: psimrcc-fd-freq1 ................. Passed 17.57 sec; Start 84: cdomp2-1; 227/412 Test #358: tu4-h2o-freq ..................... Passed 12.87 sec; Start 200: fnocc1; 228/412 Test #339: scf7 ............................. Passed 15.12 sec; Start 218: mints6; 229/412 Test #286: props2 ........................... Passed 13.70 sec; Start 202: fnocc3; 230/412 Test #91: cepa1 ............................ Passed 16.00 sec; Start 144: dfomp2-grad1; 231/412 Test #367: dft-smoke ........................ Passed 13.85 sec; Start 373: dft-custom-hybrid; 232/412 Test #198: freq-isotope1 .................... Passed 12.89 sec; Start 267: opt1-fd; 233/412 Test #165: dft-grad1 ........................ Passed 14.30 sec; Start 394: python-3-index-transforms; 234/412 Test #287: props3 ..........................,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1221#issuecomment-419096646:21037,Test,Test,21037,https://psicode.org,https://github.com/psi4/psi4/pull/1221#issuecomment-419096646,1,['Test'],['Test']
Testability,#61: cc43 ............................. Passed 136.20 sec; Start 35: cc19; 107/412 Test #308: pywrap-db1 ....................... Passed 43.46 sec; Start 107: dcft-grad4; 108/412 Test #349: sapt-compare ..................... Passed 47.52 sec; Start 238: nbody-he-cluster; 109/412 Test #393: python-cc54 ...................... Passed 54.46 sec; Start 67: cc49; 110/412 Test #262: omp3-5 ........................... Passed 128.11 sec; Start 274: opt7; 111/412 Test #2: adc2 ............................. Passed 42.65 sec; Start 143: dfomp2-4; 112/412 Test #303: pywrap-cbs1 ...................... Passed 211.04 sec; Start 69: cc50; 113/412 Test #107: dcft-grad4 ....................... Passed 45.68 sec; Start 250: omp2-4; 114/412 Test #361: x2c1 ............................. Passed 82.35 sec; Start 313: rasci-ne; 115/412 Test #245: ocepa2 ........................... Passed 113.03 sec; Start 324: sapt7; 116/412 Test #68: cc4a ............................. Passed 71.90 sec; Start 134: dfmp2-ecp; 117/412 Test #238: nbody-he-cluster ................. Passed 58.29 sec; Start 130: dfmp2-1; 118/412 Test #65: cc47 ............................. Passed 69.48 sec; Start 80: cc8b; 119/412 Test #35: cc19 ............................. Passed 71.41 sec; Start 108: dcft1; 120/412 Test #60: cc42 ............................. Passed 90.67 sec; Start 338: scf6; 121/412 Test #67: cc49 ............................. Passed 66.95 sec; Start 207: ghosts; 122/412 Test #300: pywrap-alias ..................... Passed 91.22 sec; Start 337: scf5; 123/412 Test #143: dfomp2-4 ......................... Passed 43.57 sec; Start 66: cc48; 124/412 Test #274: opt7 ............................. Passed 53.71 sec; Start 343: soscf-dft; 125/412 Test #324: sapt7 ............................ Passed 35.25 sec; Start 141: dfomp2-2; 126/412 Test #313: rasci-ne ......................... Passed 40.47 sec; Start 56: cc39; 127/412 Test #69: cc50 ............................. Passed 52.28 sec; Start 375: dft-custom-gga; 128/412 ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1199#issuecomment-417683504:11155,Test,Test,11155,https://psicode.org,https://github.com/psi4/psi4/pull/1199#issuecomment-417683504,1,['Test'],['Test']
Testability,#61: cc43 ............................. Passed 78.23 sec; Start 92: cepa-module; 37/413 Test #322: sapt6 ............................ Passed 166.76 sec; Start 304: pywrap-cbs1; 38/413 Test #381: cc-module ........................ Passed 141.83 sec; Start 106: dcft-grad2; 39/413 Test #375: dft-custom-mgga .................. Passed 184.62 sec; Start 349: sapt-dft2; 40/413 Test #388: cookbook-rohf-orb-rot ............ Passed 186.42 sec; Start 263: omp3-5; 41/413 Test #283: opt-irc-2 ........................ Passed 159.99 sec; Start 117: dcft9; 42/413 Test #71: cc52 ............................. Passed 140.81 sec; Start 27: cc13b; 43/413 Test #197: fd-freq-gradient-large ........... Passed 299.84 sec; Start 261: omp3-3; 44/413 Test #98: cisd-opt-fd ...................... Passed 148.15 sec; Start 262: omp3-4; 45/413 Test #28: cc13c ............................ Passed 111.35 sec; Start 185: isapt2; 46/413 Test #92: cepa-module ...................... Passed 130.11 sec; Start 146: dfomp2-grad2; 47/413 Test #106: dcft-grad2 ....................... Passed 113.52 sec; Start 251: omp2-4; 48/413 Test #263: omp3-5 ........................... Passed 98.82 sec; Start 76: cc6; 49/413 Test #117: dcft9 ............................ Passed 94.18 sec; Start 44: cc28; 50/413 Test #160: dfscf-bz2 ........................ Passed 139.59 sec; Start 156: dft-grad-lr2; 51/413 Test #349: sapt-dft2 ........................ Passed 125.56 sec; Start 31: cc15; 52/413 Test #304: pywrap-cbs1 ...................... Passed 141.50 sec; Start 170: dft1; 53/413 Test #27: cc13b ............................ Passed 97.13 sec; Start 232: mp2-module; 54/413 Test #261: omp3-3 ........................... Passed 93.95 sec; Start 70: cc51; 55/413 Test #262: omp3-4 ........................... Passed 90.31 sec; Start 75: cc5a; 56/413 Test #251: omp2-4 ........................... Passed 82.97 sec; Start 62: cc44; 57/413 Test #146: dfomp2-grad2 ..................... Passed 88.22 sec; Start 26: cc13a; 58/413 Test #44: cc,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1246#issuecomment-425384085:4748,Test,Test,4748,https://psicode.org,https://github.com/psi4/psi4/pull/1246#issuecomment-425384085,1,['Test'],['Test']
Testability,#63: cc45 ............................. Passed 44.70 sec; Start 347: sapt-dft1; 173/412 Test #16: cbs-xtpl-gradient ................ Passed 35.66 sec; Start 278: opt12; 174/412 Test #50: cc33 ............................. Passed 31.33 sec; Start 164: dft-freq; 175/412 Test #147: dfomp3-1 ......................... Passed 28.09 sec; Start 203: fnocc4; 176/412 Test #174: dft-omega ........................ Passed 29.62 sec; Start 273: opt6; 177/412 Test #167: dft-psivar ....................... Passed 25.38 sec; Start 359: tu5-sapt; 178/412 Test #376: pywrap-bfs ....................... Passed 25.12 sec; Start 190: fci-tdm-2; 179/412 Test #173: dft3 ............................. Passed 24.11 sec; Start 178: extern2; 180/412 Test #268: opt2 ............................. Passed 23.85 sec; Start 7: casscf-sp; 181/412 Test #304: pywrap-checkrun-convcrit ......... Passed 21.48 sec; Start 323: sapt-dft-lrc; 182/412 Test #129: dfccsdat1 ........................ Passed 18.08 sec; Start 54: cc37; 183/412 Test #160: dft-b2plyp ....................... Passed 25.40 sec; Start 259: omp3-2; 184/412 Test #314: rasscf-sp ........................ Passed 22.75 sec; Start 208: gibbs; 185/412 Test #278: opt12 ............................ Passed 24.35 sec; Start 38: cc22; 186/412 Test #164: dft-freq ......................... Passed 24.88 sec; Start 291: psimrcc-ccsd_t-4; 187/412 Test #347: sapt-dft1 ........................ Passed 25.41 sec; Start 22: cc10; 188/412 Test #359: tu5-sapt ......................... Passed 22.33 sec; Start 151: dfomp2p5-1; 189/412 Test #273: opt6 ............................. Passed 24.37 sec; Start 316: sapt1; 190/412 Test #203: fnocc4 ........................... Passed 25.60 sec; Start 249: omp2-3; 191/412 Test #178: extern2 .......................... Passed 24.14 sec; Start 24: cc12; 192/412 Test #190: fci-tdm-2 ........................ Passed 24.38 sec; Start 239: nbody-intermediates; 193/412 Test #54: cc37 ............................. Passed 16.65 sec; Start 2,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1220#issuecomment-419126068:17211,Test,Test,17211,https://psicode.org,https://github.com/psi4/psi4/pull/1220#issuecomment-419126068,1,['Test'],['Test']
Testability,#63: cc46 ............................. Passed 21.10 sec; Start 71: cc53; 162/411 Test #272: opt6 ............................. Passed 19.80 sec; Start 313: rasscf-sp; 163/411 Test #81: cc9 .............................. Passed 12.85 sec; Start 49: cc33; 164/411 Test #313: rasscf-sp ........................ Passed 6.83 sec; Start 286: props3; 165/411 Test #33: cc18 ............................. Passed 12.43 sec; Start 138: dfmp2-grad5; 166/411 Test #71: cc53 ............................. Passed 8.74 sec; Start 282: opt-irc-3; 167/411 Test #202: fnocc4 ........................... Passed 16.34 sec; Start 51: cc35; 168/411 Test #218: mints8 ........................... Passed 14.77 sec; Start 5: casscf-sa-sp; 169/411 Test #164: dft-grad1 ........................ Passed 14.38 sec; Start 350: dft-custom; 170/411 Test #49: cc33 ............................. Passed 7.11 sec; Start 256: omp2p5-grad2; 171/411 Test #51: cc35 ............................. Passed 7.28 sec; Start 152: dfomp2p5-grad1; 172/411 Test #138: dfmp2-grad5 ...................... Passed 11.47 sec; Start 217: mints6; 173/411 Test #5: casscf-sa-sp ..................... Passed 8.94 sec; Start 32: cc17; 174/411 Test #286: props3 ........................... Passed 13.22 sec; Start 72: cc54; 175/411 Test #282: opt-irc-3 ........................ Passed 17.48 sec; Start 366: dft-smoke; 176/411 Test #350: dft-custom ....................... Passed 13.17 sec; Start 16: cbs-xtpl-gradient; 177/411 Test #217: mints6 ........................... Passed 12.32 sec; Start 238: nbody-intermediates; 178/411 Test #152: dfomp2p5-grad1 ................... Passed 15.33 sec; Start 324: sapt8; 179/411 Test #256: omp2p5-grad2 ..................... Passed 20.64 sec; Start 107: dcft1; 180/411 Test #72: cc54 ............................. Passed 15.94 sec; Start 285: props2; 181/411 Test #32: cc17 ............................. Passed 18.71 sec; Start 242: ocepa-grad2; 182/411 Test #366: dft-smoke ........................ Passed 13.42 sec;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1078#issuecomment-408900195:16043,Test,Test,16043,https://psicode.org,https://github.com/psi4/psi4/pull/1078#issuecomment-408900195,1,['Test'],['Test']
Testability,#64: cc46 ............................. Passed 69.45 sec; Start 201: fnocc2; 123/412 Test #171: dft1-alt ......................... Passed 54.20 sec; Start 308: pywrap-db1; 124/412 Test #68: cc4a ............................. Passed 63.13 sec; Start 349: sapt-compare; 125/412 Test #73: cc54 ............................. Passed 73.64 sec; Start 338: scf6; 126/412 Test #163: dft-grad-meta .................... Passed 54.77 sec; Start 33: cc17; 127/412 Test #2: adc2 ............................. Passed 48.26 sec; Start 220: mints-benchmark; 128/412 Test #55: cc38 ............................. Passed 75.15 sec; Start 132: dfmp2-3; 129/412 Test #12: cbs-parser ....................... Passed 84.13 sec; Start 337: scf5; 130/412 Test #308: pywrap-db1 ....................... Passed 44.31 sec; Start 195: fd-freq-gradient; 131/412 Test #56: cc39 ............................. Passed 58.25 sec; Start 361: x2c1; 132/412 Test #143: dfomp2-4 ......................... Passed 71.69 sec; Start 93: ci-multi; 133/412 Test #72: cc53 ............................. Passed 61.07 sec; Start 107: dcft-grad4; 134/412 Test #80: cc8b ............................. Passed 59.22 sec; Start 393: python-cc54; 135/412 Test #349: sapt-compare ..................... Passed 51.30 sec; Start 23: cc11; 136/412 Test #246: ocepa3 ........................... Passed 63.75 sec; Start 313: rasci-ne; 137/412 Test #33: cc17 ............................. Passed 44.73 sec; Start 127: dfccsd-t-grad1; 138/412 Test #338: scf6 ............................. Passed 49.52 sec; Start 134: dfmp2-ecp; 139/412 Test #201: fnocc2 ........................... Passed 69.43 sec; Start 34: cc18; 140/412 Test #220: mints-benchmark .................. Passed 44.32 sec; Start 149: dfomp3-grad1; 141/412 Test #337: scf5 ............................. Passed 39.63 sec; Start 253: omp2-grad2; 142/412 Test #132: dfmp2-3 .......................... Passed 42.96 sec; Start 207: ghosts; 143/412 Test #93: ci-multi ......................... Passed 34.57,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1224#issuecomment-419158485:12584,Test,Test,12584,https://psicode.org,https://github.com/psi4/psi4/pull/1224#issuecomment-419158485,1,['Test'],['Test']
Testability,#65: cc49 ............................. Passed 13.22 sec; Start 66: cc4a; 47/85 Test #66: cc4a ............................. Passed 7.71 sec; Start 67: cc50; 48/85 Test #67: cc50 ............................. Passed 13.56 sec; Start 68: cc51; 49/85 Test #68: cc51 ............................. Passed 22.84 sec; Start 69: cc52; 50/85 Test #69: cc52 ............................. Passed 35.22 sec; Start 70: cc53; 51/85 Test #70: cc53 ............................. Passed 5.34 sec; Start 71: cc54; 52/85 Test #71: cc54 ............................. Passed 3.69 sec; Start 72: cc55; 53/85 Test #72: cc55 ............................. Passed 6.05 sec; Start 73: cc5a; 54/85 Test #73: cc5a ............................. Passed 20.77 sec; Start 74: cc6; 55/85 Test #74: cc6 .............................. Passed 29.20 sec; Start 75: cc7; 56/85 Test #75: cc7 .............................. Passed 30.38 sec; Start 76: cc8; 57/85 Test #76: cc8 .............................. Passed 5.07 sec; Start 77: cc8a; 58/85 Test #77: cc8a ............................. Passed 4.66 sec; Start 78: cc8b; 59/85 Test #78: cc8b ............................. Passed 4.93 sec; Start 79: cc8c; 60/85 Test #79: cc8c ............................. Passed 4.46 sec; Start 80: cc9; 61/85 Test #80: cc9 .............................. Passed 5.68 sec; Start 81: cc9a; 62/85 Test #81: cc9a ............................. Passed 5.88 sec; Start 101: decontract; 63/85 Test #101: decontract ....................... Passed 1.35 sec; Start 119: dfccd1; 64/85 Test #119: dfccd1 ........................... Passed 1.55 sec; Start 120: dfccdl1; 65/85 Test #120: dfccdl1 .......................... Passed 1.44 sec; Start 121: dfccd-grad1; 66/85 Test #121: dfccd-grad1 ...................... Passed 2.62 sec; Start 122: dfccsd1; 67/85 Test #122: dfccsd1 .......................... Passed 1.60 sec; Start 123: dfccsdl1; 68/85 Test #123: dfccsdl1 ......................... Passed 1.62 sec; Start 124: dfccsd-grad1; 69/85 Test #124: dfccsd-grad1 ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1067#issuecomment-402179082:4898,Test,Test,4898,https://psicode.org,https://github.com/psi4/psi4/pull/1067#issuecomment-402179082,1,['Test'],['Test']
Testability,#67: cc4a ............................. Passed 53.77 sec; Start 358: tu5-sapt; 157/411 Test #73: cc55 ............................. Passed 57.71 sec; Start 172: dft3; 158/411 Test #245: ocepa3 ........................... Passed 57.53 sec; Start 140: dfomp2-2; 159/411 Test #163: dft-freq ......................... Passed 23.58 sec; Start 322: sapt-dft-lrc; 160/411 Test #55: cc39 ............................. Passed 58.48 sec; Start 277: opt12; 161/411 Test #63: cc46 ............................. Passed 54.24 sec; Start 282: opt-irc-3; 162/411 Test #12: cbs-parser ....................... Passed 83.31 sec; Start 272: opt6; 163/411 Test #64: cc47 ............................. Passed 71.08 sec; Start 315: sapt1; 164/411 Test #358: tu5-sapt ......................... Passed 23.06 sec; Start 267: opt2; 165/411 Test #172: dft3 ............................. Passed 26.14 sec; Start 290: psimrcc-ccsd_t-4; 166/411 Test #151: dfomp2p5-2 ....................... Passed 71.41 sec; Start 176: extern1; 167/411 Test #322: sapt-dft-lrc ..................... Passed 20.32 sec; Start 177: extern2; 168/411 Test #81: cc9 .............................. Passed 69.76 sec; Start 247: omp2-2; 169/411 Test #313: rasscf-sp ........................ Passed 73.93 sec; Start 80: cc8c; 170/411 Test #71: cc53 ............................. Passed 60.75 sec; Start 48: cc32; 171/411 Test #315: sapt1 ............................ Passed 19.99 sec; Start 165: dft-grad2; 172/411 Test #277: opt12 ............................ Passed 26.40 sec; Start 169: dft-vv10; 173/411 Test #290: psimrcc-ccsd_t-4 ................. Passed 19.99 sec; Start 194: fd-freq-gradient; 174/411 Test #79: cc8b ............................. Passed 60.66 sec; Start 321: sapt-dft-api; 175/411 Test #267: opt2 ............................. Passed 25.68 sec; Start 303: pywrap-checkrun-convcrit; 176/411 Test #272: opt6 ............................. Passed 28.86 sec; Start 254: omp2p5-2; 177/411 Test #176: extern1 .......................... Passed,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1072#issuecomment-406602307:15725,Test,Test,15725,https://psicode.org,https://github.com/psi4/psi4/pull/1072#issuecomment-406602307,1,['Test'],['Test']
Testability,"#6: ao-casscf-sp ..................... Passed 5.19 sec; 410/413 Test #88: cepa1 ............................ Passed 7.42 sec; 411/413 Test #9: castup2 .......................... Passed 9.37 sec; 412/413 Test #18: cbs-xtpl-func .................... Passed 1715.47 sec; 413/413 Test #320: sapt4 ............................ Passed 1667.29 sec. 100% tests passed, 0 tests failed out of 413. Label Time Summary:; adc = 63.93 sec*proc (2 tests); autotest = 2243.46 sec*proc (26 tests); cart = 19628.65 sec*proc (123 tests); cas = 55.52 sec*proc (1 test); casscf = 136.00 sec*proc (11 tests); cbs = 2995.42 sec*proc (11 tests); cc = 16264.56 sec*proc (65 tests); cdomp2 = 44.95 sec*proc (2 tests); cepa = 273.82 sec*proc (7 tests); ci = 112.43 sec*proc (8 tests); cisd = 194.15 sec*proc (7 tests); cookbook = 255.11 sec*proc (1 test); cubeprop = 22.22 sec*proc (3 tests); dcft = 5487.46 sec*proc (13 tests); df = 2798.80 sec*proc (38 tests); dfccd = 3.58 sec*proc (1 test); dfccd-grad = 19.08 sec*proc (1 test); dfccdl = 3.82 sec*proc (1 test); dfccsd = 9.09 sec*proc (1 test); dfccsd-grad = 37.30 sec*proc (1 test); dfccsd-t-grad = 69.23 sec*proc (1 test); dfccsdat = 40.48 sec*proc (1 test); dfccsdl = 16.34 sec*proc (1 test); dfccsdt = 13.79 sec*proc (1 test); dfep2 = 6.01 sec*proc (2 tests); dfmp2 = 180.70 sec*proc (11 tests); dfomp2 = 1691.18 sec*proc (7 tests); dfomp2.5 = 230.29 sec*proc (4 tests); dfomp3 = 245.73 sec*proc (4 tests); dfscf = 131.53 sec*proc (1 test); dft = 1423.44 sec*proc (27 tests); docs = 1.42 sec*proc (2 tests); ecp = 65.92 sec*proc (2 tests); fci = 13.01 sec*proc (2 tests); fcidump = 6.38 sec*proc (1 test); findif = 982.46 sec*proc (5 tests); fnocc = 160.78 sec*proc (4 tests); freq = 1352.76 sec*proc (6 tests); gradient = 2515.20 sec*proc (16 tests); json = 21.65 sec*proc (8 tests); longtests = 3280.68 sec*proc (5 tests); mcscf = 4.01 sec*proc (3 tests); minitests = 69.17 sec*proc (4 tests); mints = 90.89 sec*proc (14 tests); misc = 524.24 sec*proc (16 tests); mp2 ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1237#issuecomment-425038275:39252,test,test,39252,https://psicode.org,https://github.com/psi4/psi4/pull/1237#issuecomment-425038275,1,['test'],['test']
Testability,#70: cc52 ............................. Passed 58.41 sec; Start 318: sapt4; 47/411 Test #347: sapt-dft2 ........................ Passed 116.92 sec; Start 325: scf-bz2; 48/411 Test #325: scf-bz2 .......................... Passed 118.46 sec; Start 386: cookbook-rohf-orb-rot; 49/411 Test #25: cc13a ............................ Passed 209.64 sec; Start 161: dft-grad-lr2; 50/411 Test #386: cookbook-rohf-orb-rot ............ Passed 21.11 sec; Start 47: cc31; 51/411 Test #113: dcft7 ............................ Passed 211.30 sec; Start 168: dft1; 52/411 Test #205: frac-traverse .................... Passed 210.26 sec; Start 371: dft-custom-dhdf; 53/411 Test #47: cc31 ............................. Passed 35.29 sec; Start 58: cc41; 54/411 Test #58: cc41 ............................. Passed 20.82 sec; Start 149: dfomp3-grad2; 55/411 Test #149: dfomp3-grad2 ..................... Passed 7.37 sec; Start 69: cc51; 56/411 Test #161: dft-grad-lr2 ..................... Passed 89.66 sec; Start 43: cc28; 57/411 Test #278: opt13 ............................ Passed 799.10 sec; Start 27: cc13c; 58/411 Test #371: dft-custom-dhdf .................. Passed 81.14 sec; Start 319: sapt5; 59/411 Test #27: cc13c ............................ Passed 10.62 sec; Start 279: opt14; 60/411 Test #168: dft1 ............................. Passed 88.97 sec; Start 75: cc6; 61/411 Test #43: cc28 ............................. Passed 24.64 sec; Start 60: cc43; 62/411 Test #60: cc43 ............................. Passed 15.10 sec; Start 91: cepa-module; 63/411 Test #69: cc51 ............................. Passed 56.92 sec; Start 292: psimrcc-fd-freq2; 64/411 Test #91: cepa-module ...................... Passed 19.19 sec; Start 115: dcft9; 65/411 Test #75: cc6 .............................. Passed 49.07 sec; Start 259: omp3-3; 66/411 Test #316: sapt2 ............................ Passed 354.02 sec; Start 74: cc5a; 67/411 Test #115: dcft9 ............................ Passed 13.18 sec; Start 317: sapt3; 68/411 Test #319:,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1075#issuecomment-409598225:5466,Test,Test,5466,https://psicode.org,https://github.com/psi4/psi4/pull/1075#issuecomment-409598225,1,['Test'],['Test']
Testability,#72: cc53 ............................. Passed 57.83 sec; Start 73: cc54; 110/412 Test #26: cc13a ............................ Passed 508.31 sec; Start 277: opt11; 111/412 Test #257: omp2p5-grad2 ..................... Passed 76.78 sec; Start 56: cc39; 112/412 Test #163: dft-grad-meta .................... Passed 52.87 sec; Start 220: mints-benchmark; 113/412 Test #74: cc55 ............................. Passed 57.23 sec; Start 274: opt7; 114/412 Test #148: dfomp3-2 ......................... Passed 70.64 sec; Start 68: cc4a; 115/412 Test #28: cc13c ............................ Passed 117.07 sec; Start 238: nbody-he-cluster; 116/412 Test #157: dfomp2p5-grad2 ................... Passed 97.92 sec; Start 152: dfomp2p5-2; 117/412 Test #171: dft1-alt ......................... Passed 53.74 sec; Start 85: cdomp2-2; 118/412 Test #220: mints-benchmark .................. Passed 39.18 sec; Start 308: pywrap-db1; 119/412 Test #73: cc54 ............................. Passed 55.12 sec; Start 64: cc46; 120/412 Test #141: dfomp2-2 ......................... Passed 73.61 sec; Start 349: sapt-compare; 121/412 Test #300: pywrap-alias ..................... Passed 83.90 sec; Start 132: dfmp2-3; 122/412 Test #277: opt11 ............................ Passed 64.53 sec; Start 143: dfomp2-4; 123/412 Test #56: cc39 ............................. Passed 61.37 sec; Start 49: cc32; 124/412 Test #274: opt7 ............................. Passed 57.39 sec; Start 313: rasci-ne; 125/412 Test #238: nbody-he-cluster ................. Passed 60.21 sec; Start 338: scf6; 126/412 Test #68: cc4a ............................. Passed 64.27 sec; Start 1: adc1; 127/412 Test #19: cbs-xtpl-nbody ................... Passed 111.26 sec; Start 33: cc17; 128/412 Test #308: pywrap-db1 ....................... Passed 44.70 sec; Start 246: ocepa3; 129/412 Test #85: cdomp2-2 ......................... Passed 52.50 sec; Start 107: dcft-grad4; 130/412 Test #49: cc32 ............................. Passed 31.36 sec; Start 337: scf5; 131/4,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1221#issuecomment-419096646:11390,Test,Test,11390,https://psicode.org,https://github.com/psi4/psi4/pull/1221#issuecomment-419096646,1,['Test'],['Test']
Testability,#72: cc54 ............................. Passed 9.82 sec; Start 375: pywrap-bfs; 152/411 Test #156: dft-b2plyp ....................... Passed 23.12 sec; Start 202: fnocc4; 153/411 Test #20: cc1 .............................. Passed 16.97 sec; Start 148: dfomp3-grad1; 154/411 Test #264: opt-lindep-change ................ Passed 24.67 sec; Start 207: gibbs; 155/411 Test #166: dft-psivar ....................... Passed 23.02 sec; Start 54: cc38; 156/411 Test #173: dft-omega ........................ Passed 24.28 sec; Start 51: cc35; 157/411 Test #375: pywrap-bfs ....................... Passed 23.88 sec; Start 152: dfomp2p5-grad1; 158/411 Test #148: dfomp3-grad1 ..................... Passed 16.19 sec; Start 189: fci-tdm-2; 159/411 Test #12: cbs-parser ....................... Passed 28.71 sec; Start 33: cc18; 160/411 Test #202: fnocc4 ........................... Passed 22.98 sec; Start 163: dft-freq; 161/411 Test #207: gibbs ............................ Passed 21.15 sec; Start 16: cbs-xtpl-gradient; 162/411 Test #54: cc38 ............................. Passed 19.13 sec; Start 49: cc33; 163/411 Test #152: dfomp2p5-grad1 ................... Passed 14.78 sec; Start 172: dft3; 164/411 Test #51: cc35 ............................. Passed 18.61 sec; Start 277: opt12; 165/411 Test #189: fci-tdm-2 ........................ Passed 19.97 sec; Start 346: sapt-dft1; 166/411 Test #33: cc18 ............................. Passed 19.88 sec; Start 360: x2c1; 167/411 Test #163: dft-freq ......................... Passed 20.91 sec; Start 252: omp2-grad2; 168/411 Test #49: cc33 ............................. Passed 15.20 sec; Start 322: sapt-dft-lrc; 169/411 Test #16: cbs-xtpl-gradient ................ Passed 18.76 sec; Start 272: opt6; 170/411 Test #172: dft3 ............................. Passed 19.83 sec; Start 150: dfomp2p5-1; 171/411 Test #360: x2c1 ............................. Passed 12.27 sec; Start 358: tu5-sapt; 172/411 Test #277: opt12 ............................ Passed 20.43 sec; Start 32,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-405575064:15137,Test,Test,15137,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-405575064,1,['Test'],['Test']
Testability,#73: cc55 ............................. Passed 93.94 sec; Start 21: cc10; 229/411 Test #23: cc12 ............................. Passed 47.84 sec; Start 247: omp2-2; 230/411 Test #81: cc9 .............................. Passed 116.49 sec; Start 93: cisd-h2o+-0; 231/411 Test #82: cc9a ............................. Passed 113.55 sec; Start 79: cc8b; 232/411 Test #77: cc8 .............................. Passed 106.26 sec; Start 254: omp2p5-2; 233/411 Test #80: cc8c ............................. Passed 94.57 sec; Start 117: dfcasscf-sa-sp; 234/411 Test #93: cisd-h2o+-0 ...................... Passed 5.15 sec; Start 339: scf-property; 235/411 Test #313: rasscf-sp ........................ Passed 40.25 sec; Start 99: cisd-sp-2; 236/411 Test #247: omp2-2 ........................... Passed 30.55 sec; Start 9: castup2; 237/411 Test #117: dfcasscf-sa-sp ................... Passed 4.12 sec; Start 54: cc38; 238/411 Test #140: dfomp2-2 ......................... Passed 50.51 sec; Start 187: fci-h2o-fzcv; 239/411 Test #339: scf-property ..................... Passed 4.60 sec; Start 3: casscf-fzc-sp; 240/411 Test #99: cisd-sp-2 ........................ Passed 4.60 sec; Start 198: freq-isotope2; 241/411 Test #21: cc10 ............................. Passed 32.92 sec; Start 84: cdomp2-2; 242/411 Test #187: fci-h2o-fzcv ..................... Passed 3.84 sec; Start 392: python-cc54; 243/411 Test #254: omp2p5-2 ......................... Passed 12.79 sec; Start 78: cc8a; 244/411 Test #198: freq-isotope2 .................... Passed 10.53 sec; Start 125: dfccsd-grad1; 245/411 Test #9: castup2 .......................... Passed 12.44 sec; Start 329: scf-guess-read2; 246/411 Test #329: scf-guess-read2 .................. Passed 6.98 sec; Start 94: cisd-h2o+-1; 247/411 Test #3: casscf-fzc-sp .................... Passed 18.71 sec; Start 142: dfomp2-4; 248/411 Test #79: cc8b ............................. Passed 28.79 sec; Start 126: dfccsd-t-grad1; 249/411 Test #94: cisd-h2o+-1 ...................... Pass,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1089#issuecomment-408103972:22342,Test,Test,22342,https://psicode.org,https://github.com/psi4/psi4/pull/1089#issuecomment-408103972,1,['Test'],['Test']
Testability,#75: cc6 .............................. Passed 134.21 sec; Start 91: cepa-module; 88/411 Test #88: cepa2 ............................ Passed 21.92 sec; Start 92: ci-multi; 89/411 Test #87: cepa1 ............................ Passed 29.74 sec; Start 93: cisd-h2o+-0; 90/411 Test #79: cc8b ............................. Passed 129.07 sec; Start 94: cisd-h2o+-1; 91/411 Test #84: cdomp2-2 ......................... Passed 70.20 sec; Start 95: cisd-h2o+-2; 92/411 Test #78: cc8a ............................. Passed 135.49 sec; Start 96: cisd-h2o-clpse; 93/411 Test #93: cisd-h2o+-0 ...................... Passed 5.90 sec; Start 97: cisd-opt-fd; 94/411 Test #94: cisd-h2o+-1 ...................... Passed 5.85 sec; Start 98: cisd-sp; 95/411 Test #95: cisd-h2o+-2 ...................... Passed 5.48 sec; Start 99: cisd-sp-2; 96/411 Test #89: cepa3 ............................ Passed 31.93 sec; Start 100: ci-property; 97/411 Test #96: cisd-h2o-clpse ................... Passed 4.28 sec; Start 101: cubeprop; 98/411 Test #70: cc52 ............................. Passed 202.48 sec; Start 102: decontract; 99/411 Test #102: decontract ....................... Passed 1.53 sec; Start 103: dcft-grad1; 100/411 Test #99: cisd-sp-2 ........................ Passed 6.10 sec; Start 104: dcft-grad2; 101/411 Test #81: cc9 .............................. Passed 138.32 sec; Start 105: dcft-grad3; 102/411 Test #98: cisd-sp .......................... Passed 11.88 sec; Start 106: dcft-grad4; 103/411 Test #101: cubeprop ......................... Passed 11.59 sec; Start 107: dcft1; 104/411 Test #90: cepa1 ............................ Passed 41.40 sec; Start 108: dcft2; 105/411 Test #105: dcft-grad3 ....................... Passed 23.11 sec; Start 109: dcft3; 106/411 Test #92: ci-multi ......................... Passed 47.36 sec; Start 110: dcft4; 107/411 Test #82: cc9a ............................. Passed 123.74 sec; Start 111: dcft5; 108/411 Test #108: dcft2 ............................ Passed 17.41 sec; Start 11,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1090#issuecomment-408925986:9069,Test,Test,9069,https://psicode.org,https://github.com/psi4/psi4/pull/1090#issuecomment-408925986,1,['Test'],['Test']
Testability,#75: cc6 .............................. Passed 78.50 sec; Start 93: cisd-h2o+-0; 90/411 Test #81: cc9 .............................. Passed 59.24 sec; Start 94: cisd-h2o+-1; 91/411 Test #89: cepa3 ............................ Passed 25.08 sec; Start 95: cisd-h2o+-2; 92/411 Test #93: cisd-h2o+-0 ...................... Passed 7.16 sec; Start 96: cisd-h2o-clpse; 93/411 Test #94: cisd-h2o+-1 ...................... Passed 6.09 sec; Start 97: cisd-opt-fd; 94/411 Test #96: cisd-h2o-clpse ................... Passed 5.20 sec; Start 98: cisd-sp; 95/411 Test #95: cisd-h2o+-2 ...................... Passed 6.73 sec; Start 99: cisd-sp-2; 96/411 Test #99: cisd-sp-2 ........................ Passed 6.04 sec; Start 100: ci-property; 97/411 Test #98: cisd-sp .......................... Passed 16.34 sec; Start 101: cubeprop; 98/411 Test #90: cepa1 ............................ Passed 40.09 sec; Start 102: decontract; 99/411 Test #102: decontract ....................... Passed 2.16 sec; Start 103: dcft-grad1; 100/411 Test #84: cdomp2-2 ......................... Passed 73.49 sec; Start 104: dcft-grad2; 101/411 Test #82: cc9a ............................. Passed 85.12 sec; Start 105: dcft-grad3; 102/411 Test #101: cubeprop ......................... Passed 11.74 sec; Start 106: dcft-grad4; 103/411 Test #278: opt13 ............................ Passed 771.06 sec; Start 107: dcft1; 104/411 Test #70: cc52 ............................. Passed 152.70 sec; Start 108: dcft2; 105/411 Test #92: ci-multi ......................... Passed 65.79 sec; Start 109: dcft3; 106/411 Test #105: dcft-grad3 ....................... Passed 25.56 sec; Start 110: dcft4; 107/411 Test #108: dcft2 ............................ Passed 4.23 sec; Start 111: dcft5; 108/411 Test #109: dcft3 ............................ Passed 9.99 sec; Start 112: dcft6; 109/411 Test #106: dcft-grad4 ....................... Passed 40.26 sec; Start 114: dcft8; 110/411 Test #100: ci-property ...................... Passed 66.32 sec; Start 115: dcft9,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1087#issuecomment-408854538:9226,Test,Test,9226,https://psicode.org,https://github.com/psi4/psi4/pull/1087#issuecomment-408854538,1,['Test'],['Test']
Testability,#7: casscf-sp ........................ Passed 13.43 sec; Start 13: cbs-xtpl-alpha; 20/411 Test #10: castup3 .......................... Passed 9.55 sec; Start 14: cbs-xtpl-energy; 21/411 Test #14: cbs-xtpl-energy .................. Passed 15.41 sec; Start 15: cbs-xtpl-freq; 22/411 Test #15: cbs-xtpl-freq .................... Passed 9.22 sec; Start 16: cbs-xtpl-gradient; 23/411 Test #12: cbs-parser ....................... Passed 34.00 sec; Start 17: cbs-xtpl-opt; 24/411 Test #16: cbs-xtpl-gradient ................ Passed 27.35 sec; Start 19: cbs-xtpl-wrapper; 25/411 Test #278: opt13 ............................ Passed 937.76 sec; Start 20: cc1; 26/411 Test #11: cbs-delta-energy ................. Passed 87.39 sec; Start 21: cc10; 27/411 Test #20: cc1 .............................. Passed 39.26 sec; Start 22: cc11; 28/411 Test #21: cc10 ............................. Passed 16.76 sec; Start 23: cc12; 29/411 Test #316: sapt2 ............................ Passed 390.55 sec; Start 24: cc13; 30/411 Test #17: cbs-xtpl-opt ..................... Passed 79.98 sec; Start 26: cc13b; 31/411 Test #19: cbs-xtpl-wrapper ................. Passed 69.43 sec; Start 27: cc13c; 32/411 Test #23: cc12 ............................. Passed 22.65 sec; Start 28: cc13d; 33/411 Test #22: cc11 ............................. Passed 25.63 sec; Start 29: cc14; 34/411 Test #13: cbs-xtpl-alpha ................... Passed 186.38 sec; Start 30: cc15; 35/411 Test #26: cc13b ............................ Passed 73.68 sec; Start 31: cc16; 36/411 Test #27: cc13c ............................ Passed 79.10 sec; Start 32: cc17; 37/411 Test #32: cc17 ............................. Passed 34.47 sec; Start 33: cc18; 38/411 Test #30: cc15 ............................. Passed 84.08 sec; Start 34: cc19; 39/411 Test #33: cc18 ............................. Passed 55.39 sec; Start 35: cc2; 40/411 Test #28: cc13d ............................ Passed 214.79 sec; Start 36: cc21; 41/411 Test #34: cc19 ............................. Pa,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1091#issuecomment-409148219:2970,Test,Test,2970,https://psicode.org,https://github.com/psi4/psi4/pull/1091#issuecomment-409148219,1,['Test'],['Test']
Testability,#7: casscf-sp ........................ Passed 33.11 sec; Start 13: cbs-xtpl-alpha; 20/411 Test #394: python-vibanalysis ............... Passed 918.91 sec; Start 14: cbs-xtpl-energy; 21/411 Test #14: cbs-xtpl-energy .................. Passed 12.98 sec; Start 15: cbs-xtpl-freq; 22/411 Test #15: cbs-xtpl-freq .................... Passed 13.65 sec; Start 16: cbs-xtpl-gradient; 23/411 Test #12: cbs-parser ....................... Passed 59.21 sec; Start 17: cbs-xtpl-opt; 24/411 Test #16: cbs-xtpl-gradient ................ Passed 35.82 sec; Start 19: cbs-xtpl-wrapper; 25/411 Test #316: sapt2 ............................ Passed 358.15 sec; Start 20: cc1; 26/411 Test #19: cbs-xtpl-wrapper ................. Passed 80.51 sec; Start 21: cc10; 27/411 Test #17: cbs-xtpl-opt ..................... Passed 109.54 sec; Start 22: cc11; 28/411 Test #20: cc1 .............................. Passed 109.00 sec; Start 23: cc12; 29/411 Test #21: cc10 ............................. Passed 45.45 sec; Start 24: cc13; 30/411 Test #23: cc12 ............................. Passed 31.10 sec; Start 26: cc13b; 31/411 Test #22: cc11 ............................. Passed 47.18 sec; Start 27: cc13c; 32/411 Test #11: cbs-delta-energy ................. Passed 255.04 sec; Start 28: cc13d; 33/411 Test #26: cc13b ............................ Passed 101.66 sec; Start 29: cc14; 34/411 Test #13: cbs-xtpl-alpha ................... Passed 311.67 sec; Start 30: cc15; 35/411 Test #27: cc13c ............................ Passed 122.44 sec; Start 31: cc16; 36/411 Test #30: cc15 ............................. Passed 120.35 sec; Start 32: cc17; 37/411 Test #32: cc17 ............................. Passed 55.67 sec; Start 33: cc18; 38/411 Test #24: cc13 ............................. Passed 310.59 sec; Start 34: cc19; 39/411 Test #18: cbs-xtpl-func .................... Passed 1426.34 sec; Start 35: cc2; 40/411 Test #28: cc13d ............................ Passed 274.84 sec; Start 36: cc21; 41/411 Test #33: cc18 .....................,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1112#issuecomment-409912325:2975,Test,Test,2975,https://psicode.org,https://github.com/psi4/psi4/pull/1112#issuecomment-409912325,1,['Test'],['Test']
Testability,#82: cc9a ............................. Passed 27.69 sec; Start 97: cisd-opt-fd; 94/411 Test #93: cisd-h2o+-0 ...................... Passed 6.79 sec; Start 98: cisd-sp; 95/411 Test #96: cisd-h2o-clpse ................... Passed 1.52 sec; Start 99: cisd-sp-2; 96/411 Test #94: cisd-h2o+-1 ...................... Passed 5.32 sec; Start 100: ci-property; 97/411 Test #95: cisd-h2o+-2 ...................... Passed 4.71 sec; Start 101: cubeprop; 98/411 Test #75: cc6 .............................. Passed 79.07 sec; Start 102: decontract; 99/411 Test #102: decontract ....................... Passed 1.29 sec; Start 103: dcft-grad1; 100/411 Test #99: cisd-sp-2 ........................ Passed 5.99 sec; Start 104: dcft-grad2; 101/411 Test #98: cisd-sp .......................... Passed 9.90 sec; Start 105: dcft-grad3; 102/411 Test #70: cc52 ............................. Passed 106.20 sec; Start 106: dcft-grad4; 103/411 Test #101: cubeprop ......................... Passed 12.03 sec; Start 107: dcft1; 104/411 Test #92: ci-multi ......................... Passed 22.66 sec; Start 108: dcft2; 105/411 Test #108: dcft2 ............................ Passed 3.64 sec; Start 109: dcft3; 106/411 Test #105: dcft-grad3 ....................... Passed 13.24 sec; Start 110: dcft4; 107/411 Test #109: dcft3 ............................ Passed 12.31 sec; Start 111: dcft5; 108/411 Test #107: dcft1 ............................ Passed 24.76 sec; Start 112: dcft6; 109/411 Test #91: cepa-module ...................... Passed 55.38 sec; Start 114: dcft8; 110/411 Test #106: dcft-grad4 ....................... Passed 34.43 sec; Start 115: dcft9; 111/411 Test #104: dcft-grad2 ....................... Passed 44.51 sec; Start 116: ao-dfcasscf-sp; 112/411 Test #116: ao-dfcasscf-sp ................... Passed 2.53 sec; Start 117: dfcasscf-sa-sp; 113/411 Test #100: ci-property ...................... Passed 54.60 sec; Start 118: dfcasscf-fzc-sp; 114/411 Test #117: dfcasscf-sa-sp ................... Passed 4.84 sec; Start ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1092#issuecomment-409185967:9590,Test,Test,9590,https://psicode.org,https://github.com/psi4/psi4/pull/1092#issuecomment-409185967,1,['Test'],['Test']
Testability,#84: cdomp2-2 ......................... Passed 18.17 sec; Start 93: cisd-h2o+-0; 90/411 Test #89: cepa3 ............................ Passed 9.74 sec; Start 94: cisd-h2o+-1; 91/411 Test #74: cc5a ............................. Passed 76.04 sec; Start 95: cisd-h2o+-2; 92/411 Test #90: cepa1 ............................ Passed 9.86 sec; Start 96: cisd-h2o-clpse; 93/411 Test #82: cc9a ............................. Passed 27.69 sec; Start 97: cisd-opt-fd; 94/411 Test #93: cisd-h2o+-0 ...................... Passed 6.79 sec; Start 98: cisd-sp; 95/411 Test #96: cisd-h2o-clpse ................... Passed 1.52 sec; Start 99: cisd-sp-2; 96/411 Test #94: cisd-h2o+-1 ...................... Passed 5.32 sec; Start 100: ci-property; 97/411 Test #95: cisd-h2o+-2 ...................... Passed 4.71 sec; Start 101: cubeprop; 98/411 Test #75: cc6 .............................. Passed 79.07 sec; Start 102: decontract; 99/411 Test #102: decontract ....................... Passed 1.29 sec; Start 103: dcft-grad1; 100/411 Test #99: cisd-sp-2 ........................ Passed 5.99 sec; Start 104: dcft-grad2; 101/411 Test #98: cisd-sp .......................... Passed 9.90 sec; Start 105: dcft-grad3; 102/411 Test #70: cc52 ............................. Passed 106.20 sec; Start 106: dcft-grad4; 103/411 Test #101: cubeprop ......................... Passed 12.03 sec; Start 107: dcft1; 104/411 Test #92: ci-multi ......................... Passed 22.66 sec; Start 108: dcft2; 105/411 Test #108: dcft2 ............................ Passed 3.64 sec; Start 109: dcft3; 106/411 Test #105: dcft-grad3 ....................... Passed 13.24 sec; Start 110: dcft4; 107/411 Test #109: dcft3 ............................ Passed 12.31 sec; Start 111: dcft5; 108/411 Test #107: dcft1 ............................ Passed 24.76 sec; Start 112: dcft6; 109/411 Test #91: cepa-module ...................... Passed 55.38 sec; Start 114: dcft8; 110/411 Test #106: dcft-grad4 ....................... Passed 34.43 sec; Start 115: dcft9; 1,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1092#issuecomment-409185967:9219,Test,Test,9219,https://psicode.org,https://github.com/psi4/psi4/pull/1092#issuecomment-409185967,1,['Test'],['Test']
Testability,#85: cdomp2-2 ......................... Passed 44.64 sec; Start 101: ci-property; 98/412 Test #96: cisd-h2o+-2 ...................... Passed 6.02 sec; Start 102: cubeprop; 99/412 Test #90: cepa3 ............................ Passed 15.90 sec; Start 103: decontract; 100/412 Test #103: decontract ....................... Passed 1.91 sec; Start 104: dcft-grad1; 101/412 Test #100: cisd-sp-2 ........................ Passed 6.36 sec; Start 105: dcft-grad2; 102/412 Test #91: cepa1 ............................ Passed 17.25 sec; Start 106: dcft-grad3; 103/412 Test #99: cisd-sp .......................... Passed 12.02 sec; Start 107: dcft-grad4; 104/412 Test #83: cc9a ............................. Passed 77.94 sec; Start 108: dcft1; 105/412 Test #102: cubeprop ......................... Passed 11.79 sec; Start 109: dcft2; 106/412 Test #71: cc52 ............................. Passed 177.16 sec; Start 110: dcft3; 107/412 Test #106: dcft-grad3 ....................... Passed 17.10 sec; Start 111: dcft4; 108/412 Test #109: dcft2 ............................ Passed 10.64 sec; Start 112: dcft5; 109/412 Test #93: ci-multi ......................... Passed 38.21 sec; Start 113: dcft6; 110/412 Test #110: dcft3 ............................ Passed 21.70 sec; Start 115: dcft8; 111/412 Test #107: dcft-grad4 ....................... Passed 38.78 sec; Start 116: dcft9; 112/412 Test #101: ci-property ...................... Passed 58.41 sec; Start 117: ao-dfcasscf-sp; 113/412 Test #117: ao-dfcasscf-sp ................... Passed 6.32 sec; Start 118: dfcasscf-sa-sp; 114/412 Test #118: dfcasscf-sa-sp ................... Passed 6.30 sec; Start 119: dfcasscf-fzc-sp; 115/412 Test #108: dcft1 ............................ Passed 58.96 sec; Start 120: dfcasscf-sp; 116/412 Test #120: dfcasscf-sp ...................... Passed 4.64 sec; Start 121: dfccd1; 117/412 Test #119: dfcasscf-fzc-sp .................. Passed 4.83 sec; Start 122: dfccdl1; 118/412 Test #46: cc3 .............................. Passed 643.72 s,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1219#issuecomment-419060031:9979,Test,Test,9979,https://psicode.org,https://github.com/psi4/psi4/pull/1219#issuecomment-419060031,1,['Test'],['Test']
Testability,#85: cepa0-grad1 ...................... Passed 1.99 sec; Start 234: mp3-grad2; 300/404 Test #232: mp2p5-grad2 ...................... Passed 1.66 sec; Start 179: fsapt2; 301/404 Test #376: pywrap-align ..................... Passed 3.31 sec; Start 251: omp2-grad1; 302/404 Test #331: scf1 ............................. Passed 3.71 sec; Start 246: omp2-1; 303/404 Test #397: json-v11-energy .................. Passed 1.92 sec; Start 134: dfmp2-grad1; 304/404 Test #360: x2c1 ............................. Passed 6.36 sec; Start 284: props1; 305/404 Test #234: mp3-grad2 ........................ Passed 1.82 sec; Start 344: dfep2-1; 306/404 Test #186: fci-h2o-2 ........................ Passed 4.01 sec; Start 117: dfcasscf-sa-sp; 307/404 Test #251: omp2-grad1 ....................... Passed 1.70 sec; Start 225: mom; 308/404 Test #246: omp2-1 ........................... Passed 1.37 sec; Start 352: stability2; 309/404 Test #134: dfmp2-grad1 ...................... Passed 1.57 sec; Start 355: tu3-h2o-opt; 310/404 Test #217: mints6 ........................... Passed 4.88 sec; Start 377: pywrap-align-chiral; 311/404 Test #179: fsapt2 ........................... Passed 3.03 sec; Start 136: dfmp2-grad3; 312/404 Test #352: stability2 ....................... Passed 1.76 sec; Start 343: stability1; 313/404 Test #344: dfep2-1 .......................... Passed 2.66 sec; Start 351: dft-reference; 314/404 Test #284: props1 ........................... Passed 3.20 sec; Start 236: mpn-bh; 315/404 Test #355: tu3-h2o-opt ...................... Passed 2.30 sec; Start 310: rasci-c2-active; 316/404 Test #117: dfcasscf-sa-sp ................... Passed 3.18 sec; Start 4: casscf-semi; 317/404 Test #136: dfmp2-grad3 ...................... Passed 1.81 sec; Start 233: mp3-grad1; 318/404 Test #225: mom .............................. Passed 3.03 sec; Start 257: omp3-1; 319/404 Test #377: pywrap-align-chiral .............. Passed 3.05 sec; Start 262: omp3-grad1; 320/404 Test #343: stability1 ....................,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-404174338:28734,Test,Test,28734,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-404174338,1,['Test'],['Test']
Testability,#86: cepa1 ............................ Passed 9.10 sec; Start 93: cisd-h2o+-1; 212/401 Test #93: cisd-h2o+-1 ...................... Passed 2.99 sec; Start 94: cisd-h2o+-2; 213/401 Test #87: cepa2 ............................ Passed 10.57 sec; Start 95: cisd-h2o-clpse; 214/401 Test #95: cisd-h2o-clpse ................... Passed 1.79 sec; Start 96: cisd-opt-fd; 215/401 Test #94: cisd-h2o+-2 ...................... Passed 2.81 sec; Start 97: cisd-sp; 216/401 Test #88: cepa3 ............................ Passed 11.93 sec; Start 98: cisd-sp-2; 217/401 Test #98: cisd-sp-2 ........................ Passed 2.77 sec; Start 102: dcft-grad1; 218/401 Test #89: cepa1 ............................ Passed 13.19 sec; Start 104: dcft-grad3; 219/401 Test #97: cisd-sp .......................... Passed 5.81 sec; Start 105: dcft-grad4; 220/401 Test #1: adc1 ............................. Passed 23.47 sec; Start 107: dcft2; 221/401 Test #2: adc2 ............................. Passed 29.39 sec; Start 109: dcft4; 222/401 Test #107: dcft2 ............................ Passed 11.23 sec; Start 110: dcft5; 223/401 Test #104: dcft-grad3 ....................... Passed 15.91 sec; Start 111: dcft6; 224/401 Test #12: cbs-parser ....................... Passed 41.34 sec; Start 113: dcft8; 225/401 Test #105: dcft-grad4 ....................... Passed 24.23 sec; Start 114: dcft9; 226/401 Test #19: cbs-xtpl-wrapper ................. Passed 52.98 sec; Start 129: dfmp2-2; 227/401 Test #129: dfmp2-2 .......................... Passed 2.49 sec; Start 130: dfmp2-3; 228/401 Test #130: dfmp2-3 .......................... Passed 16.36 sec; Start 131: dfmp2-4; 229/401 Test #90: cepa-module ...................... Passed 64.78 sec; Start 134: dfmp2-grad2; 230/401 Test #17: cbs-xtpl-opt ..................... Passed 72.86 sec; Start 135: dfmp2-grad3; 231/401 Test #135: dfmp2-grad3 ...................... Passed 5.13 sec; Start 136: dfmp2-grad4; 232/401 Test #96: cisd-opt-fd ...................... Passed 63.83 sec; Start 137: ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-402413637:20756,Test,Test,20756,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-402413637,1,['Test'],['Test']
Testability,"#87: cepa1 ............................ Passed 1.77 sec; 410/411 Test #178: fsapt1 ........................... Passed 2075.85 sec; 411/411 Test #318: sapt4 ............................ Passed 1795.73 sec. 100% tests passed, 0 tests failed out of 411. Label Time Summary:; adc = 63.77 sec*proc (2 tests); autotest = 464.95 sec*proc (26 tests); cart = 10197.27 sec*proc (123 tests); cas = 45.85 sec*proc (1 test); casscf = 46.69 sec*proc (11 tests); cbs = 607.71 sec*proc (10 tests); cc = 2524.71 sec*proc (65 tests); cdomp2 = 12.61 sec*proc (2 tests); cepa = 34.90 sec*proc (7 tests); ci = 86.89 sec*proc (8 tests); cisd = 126.11 sec*proc (7 tests); cookbook = 21.11 sec*proc (1 test); cubeprop = 19.47 sec*proc (2 tests); dcft = 1171.02 sec*proc (13 tests); df = 616.05 sec*proc (38 tests); dfccd = 1.95 sec*proc (1 test); dfccd-grad = 2.71 sec*proc (1 test); dfccdl = 1.29 sec*proc (1 test); dfccsd = 2.55 sec*proc (1 test); dfccsd-grad = 11.89 sec*proc (1 test); dfccsd-t-grad = 8.25 sec*proc (1 test); dfccsdat = 2.98 sec*proc (1 test); dfccsdl = 2.18 sec*proc (1 test); dfccsdt = 2.02 sec*proc (1 test); dfep2 = 5.39 sec*proc (2 tests); dfmp2 = 110.02 sec*proc (11 tests); dfomp2 = 215.16 sec*proc (7 tests); dfomp2.5 = 38.76 sec*proc (4 tests); dfomp3 = 28.71 sec*proc (4 tests); dfscf = 142.35 sec*proc (1 test); dft = 1320.66 sec*proc (27 tests); docs = 1.09 sec*proc (2 tests); ecp = 34.24 sec*proc (2 tests); fci = 10.36 sec*proc (2 tests); fcidump = 2.17 sec*proc (1 test); findif = 781.94 sec*proc (5 tests); fnocc = 32.06 sec*proc (4 tests); freq = 752.88 sec*proc (6 tests); gradient = 320.64 sec*proc (16 tests); json = 11.21 sec*proc (8 tests); longtests = 3454.42 sec*proc (5 tests); mcscf = 2.64 sec*proc (3 tests); minitests = 55.53 sec*proc (4 tests); mints = 79.80 sec*proc (14 tests); misc = 406.89 sec*proc (16 tests); mp2 = 509.73 sec*proc (13 tests); nbody = 37.02 sec*proc (2 tests); numpy = 0.67 sec*proc (1 test); ocepa = 127.43 sec*proc (6 tests); omp = 159.77 sec*proc (18",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1075#issuecomment-409598225:39070,test,test,39070,https://psicode.org,https://github.com/psi4/psi4/pull/1075#issuecomment-409598225,1,['test'],['test']
Testability,"#88: cepa1 ............................ Passed 7.42 sec; 411/413 Test #9: castup2 .......................... Passed 9.37 sec; 412/413 Test #18: cbs-xtpl-func .................... Passed 1715.47 sec; 413/413 Test #320: sapt4 ............................ Passed 1667.29 sec. 100% tests passed, 0 tests failed out of 413. Label Time Summary:; adc = 63.93 sec*proc (2 tests); autotest = 2243.46 sec*proc (26 tests); cart = 19628.65 sec*proc (123 tests); cas = 55.52 sec*proc (1 test); casscf = 136.00 sec*proc (11 tests); cbs = 2995.42 sec*proc (11 tests); cc = 16264.56 sec*proc (65 tests); cdomp2 = 44.95 sec*proc (2 tests); cepa = 273.82 sec*proc (7 tests); ci = 112.43 sec*proc (8 tests); cisd = 194.15 sec*proc (7 tests); cookbook = 255.11 sec*proc (1 test); cubeprop = 22.22 sec*proc (3 tests); dcft = 5487.46 sec*proc (13 tests); df = 2798.80 sec*proc (38 tests); dfccd = 3.58 sec*proc (1 test); dfccd-grad = 19.08 sec*proc (1 test); dfccdl = 3.82 sec*proc (1 test); dfccsd = 9.09 sec*proc (1 test); dfccsd-grad = 37.30 sec*proc (1 test); dfccsd-t-grad = 69.23 sec*proc (1 test); dfccsdat = 40.48 sec*proc (1 test); dfccsdl = 16.34 sec*proc (1 test); dfccsdt = 13.79 sec*proc (1 test); dfep2 = 6.01 sec*proc (2 tests); dfmp2 = 180.70 sec*proc (11 tests); dfomp2 = 1691.18 sec*proc (7 tests); dfomp2.5 = 230.29 sec*proc (4 tests); dfomp3 = 245.73 sec*proc (4 tests); dfscf = 131.53 sec*proc (1 test); dft = 1423.44 sec*proc (27 tests); docs = 1.42 sec*proc (2 tests); ecp = 65.92 sec*proc (2 tests); fci = 13.01 sec*proc (2 tests); fcidump = 6.38 sec*proc (1 test); findif = 982.46 sec*proc (5 tests); fnocc = 160.78 sec*proc (4 tests); freq = 1352.76 sec*proc (6 tests); gradient = 2515.20 sec*proc (16 tests); json = 21.65 sec*proc (8 tests); longtests = 3280.68 sec*proc (5 tests); mcscf = 4.01 sec*proc (3 tests); minitests = 69.17 sec*proc (4 tests); mints = 90.89 sec*proc (14 tests); misc = 524.24 sec*proc (16 tests); mp2 = 563.20 sec*proc (13 tests); nbody = 86.98 sec*proc (2 tests); numpy",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1237#issuecomment-425038275:39318,test,test,39318,https://psicode.org,https://github.com/psi4/psi4/pull/1237#issuecomment-425038275,1,['test'],['test']
Testability,#89: cepa3 ............................ Passed 12.41 sec; Start 367: scf-hess1; 237/411 Test #15: cbs-xtpl-freq .................... Passed 13.09 sec; Start 184: fci-dipole; 238/411 Test #368: scf-freq1 ........................ Passed 15.20 sec; Start 185: fci-h2o; 239/411 Test #392: python-cc54 ...................... Passed 12.99 sec; Start 6: ao-casscf-sp; 240/411 Test #48: cc32 ............................. Passed 10.33 sec; Start 186: fci-h2o-2; 241/411 Test #197: freq-isotope1 .................... Passed 14.33 sec; Start 198: freq-isotope2; 242/411 Test #6: ao-casscf-sp ..................... Passed 2.88 sec; Start 21: cc10; 243/411 Test #357: tu4-h2o-freq ..................... Passed 12.92 sec; Start 254: omp2p5-2; 244/411 Test #367: scf-hess1 ........................ Passed 6.11 sec; Start 335: scf4; 245/411 Test #198: freq-isotope2 .................... Passed 3.61 sec; Start 10: castup3; 246/411 Test #184: fci-dipole ....................... Passed 6.13 sec; Start 128: dfccsdat1; 247/411 Test #185: fci-h2o .......................... Passed 6.11 sec; Start 117: dfcasscf-sa-sp; 248/411 Test #186: fci-h2o-2 ........................ Passed 6.45 sec; Start 154: dfrasscf-sp; 249/411 Test #21: cc10 ............................. Passed 4.59 sec; Start 192: fd-freq-energy; 250/411 Test #254: omp2p5-2 ......................... Passed 5.70 sec; Start 109: dcft3; 251/411 Test #128: dfccsdat1 ........................ Passed 3.87 sec; Start 341: soscf-ref; 252/411 Test #154: dfrasscf-sp ...................... Passed 2.76 sec; Start 143: dfomp2-grad1; 253/411 Test #117: dfcasscf-sa-sp ................... Passed 4.38 sec; Start 9: castup2; 254/411 Test #10: castup3 .......................... Passed 5.12 sec; Start 86: cepa0-grad2; 255/411 Test #335: scf4 ............................. Passed 7.46 sec; Start 179: fsapt2; 256/411 Test #109: dcft3 ............................ Passed 4.45 sec; Start 122: dfccd-grad1; 257/411 Test #192: fd-freq-energy ................... Passed 6.6,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1078#issuecomment-408900195:22973,Test,Test,22973,https://psicode.org,https://github.com/psi4/psi4/pull/1078#issuecomment-408900195,1,['Test'],['Test']
Testability,#93: cisd-h2o+-0 ...................... Passed 5.90 sec; Start 97: cisd-opt-fd; 94/411 Test #94: cisd-h2o+-1 ...................... Passed 5.85 sec; Start 98: cisd-sp; 95/411 Test #95: cisd-h2o+-2 ...................... Passed 5.48 sec; Start 99: cisd-sp-2; 96/411 Test #89: cepa3 ............................ Passed 31.93 sec; Start 100: ci-property; 97/411 Test #96: cisd-h2o-clpse ................... Passed 4.28 sec; Start 101: cubeprop; 98/411 Test #70: cc52 ............................. Passed 202.48 sec; Start 102: decontract; 99/411 Test #102: decontract ....................... Passed 1.53 sec; Start 103: dcft-grad1; 100/411 Test #99: cisd-sp-2 ........................ Passed 6.10 sec; Start 104: dcft-grad2; 101/411 Test #81: cc9 .............................. Passed 138.32 sec; Start 105: dcft-grad3; 102/411 Test #98: cisd-sp .......................... Passed 11.88 sec; Start 106: dcft-grad4; 103/411 Test #101: cubeprop ......................... Passed 11.59 sec; Start 107: dcft1; 104/411 Test #90: cepa1 ............................ Passed 41.40 sec; Start 108: dcft2; 105/411 Test #105: dcft-grad3 ....................... Passed 23.11 sec; Start 109: dcft3; 106/411 Test #92: ci-multi ......................... Passed 47.36 sec; Start 110: dcft4; 107/411 Test #82: cc9a ............................. Passed 123.74 sec; Start 111: dcft5; 108/411 Test #108: dcft2 ............................ Passed 17.41 sec; Start 112: dcft6; 109/411 Test #106: dcft-grad4 ....................... Passed 41.40 sec; Start 114: dcft8; 110/411 Test #100: ci-property ...................... Passed 60.29 sec; Start 115: dcft9; 111/411 Test #109: dcft3 ............................ Passed 36.73 sec; Start 116: ao-dfcasscf-sp; 112/411 Test #116: ao-dfcasscf-sp ................... Passed 6.27 sec; Start 117: dfcasscf-sa-sp; 113/411 Test #117: dfcasscf-sa-sp ................... Passed 6.21 sec; Start 118: dfcasscf-fzc-sp; 114/411 Test #118: dfcasscf-fzc-sp .................. Passed 6.87 sec; Start,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1090#issuecomment-408925986:9629,Test,Test,9629,https://psicode.org,https://github.com/psi4/psi4/pull/1090#issuecomment-408925986,1,['Test'],['Test']
Testability,#94: cisd-h2o+-1 ...................... Passed 5.15 sec; Start 22: cc11; 250/411 Test #54: cc38 ............................. Passed 29.55 sec; Start 95: cisd-h2o+-2; 251/411 Test #392: python-cc54 ...................... Passed 28.18 sec; Start 295: psithon1; 252/411 Test #84: cdomp2-2 ......................... Passed 30.82 sec; Start 294: psimrcc-sp1; 253/411 Test #95: cisd-h2o+-2 ...................... Passed 5.19 sec; Start 310: rasci-c2-active; 254/411 Test #294: psimrcc-sp1 ...................... Passed 3.91 sec; Start 72: cc54; 255/411 Test #125: dfccsd-grad1 ..................... Passed 29.42 sec; Start 331: scf1; 256/411 Test #295: psithon1 ......................... Passed 9.42 sec; Start 62: cc45; 257/411 Test #310: rasci-c2-active .................. Passed 7.42 sec; Start 6: ao-casscf-sp; 258/411 Test #78: cc8a ............................. Passed 36.32 sec; Start 132: dfmp2-4; 259/411 Test #142: dfomp2-4 ......................... Passed 24.29 sec; Start 152: dfomp2p5-grad1; 260/411 Test #126: dfccsd-t-grad1 ................... Passed 22.19 sec; Start 377: pywrap-align-chiral; 261/411 Test #22: cc11 ............................. Passed 21.45 sec; Start 90: cepa1; 262/411 Test #331: scf1 ............................. Passed 4.75 sec; Start 236: mpn-bh; 263/411 Test #6: ao-casscf-sp ..................... Passed 4.17 sec; Start 283: opt-freeze-coords; 264/411 Test #377: pywrap-align-chiral .............. Passed 3.28 sec; Start 148: dfomp3-grad1; 265/411 Test #132: dfmp2-4 .......................... Passed 6.32 sec; Start 385: psi4numpy-fci; 266/411 Test #236: mpn-bh ........................... Passed 4.79 sec; Start 53: cc37; 267/411 Test #62: cc45 ............................. Passed 10.83 sec; Start 146: dfomp3-1; 268/411 Test #283: opt-freeze-coords ................ Passed 6.26 sec; Start 235: mp2-property; 269/411 Test #72: cc54 ............................. Passed 16.30 sec; Start 351: dft-reference; 270/411 Test #90: cepa1 ............................ P,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1089#issuecomment-408103972:24298,Test,Test,24298,https://psicode.org,https://github.com/psi4/psi4/pull/1089#issuecomment-408103972,1,['Test'],['Test']
Testability,#94: cisd-h2o+-1 ...................... Passed 5.85 sec; Start 98: cisd-sp; 95/411 Test #95: cisd-h2o+-2 ...................... Passed 5.48 sec; Start 99: cisd-sp-2; 96/411 Test #89: cepa3 ............................ Passed 31.93 sec; Start 100: ci-property; 97/411 Test #96: cisd-h2o-clpse ................... Passed 4.28 sec; Start 101: cubeprop; 98/411 Test #70: cc52 ............................. Passed 202.48 sec; Start 102: decontract; 99/411 Test #102: decontract ....................... Passed 1.53 sec; Start 103: dcft-grad1; 100/411 Test #99: cisd-sp-2 ........................ Passed 6.10 sec; Start 104: dcft-grad2; 101/411 Test #81: cc9 .............................. Passed 138.32 sec; Start 105: dcft-grad3; 102/411 Test #98: cisd-sp .......................... Passed 11.88 sec; Start 106: dcft-grad4; 103/411 Test #101: cubeprop ......................... Passed 11.59 sec; Start 107: dcft1; 104/411 Test #90: cepa1 ............................ Passed 41.40 sec; Start 108: dcft2; 105/411 Test #105: dcft-grad3 ....................... Passed 23.11 sec; Start 109: dcft3; 106/411 Test #92: ci-multi ......................... Passed 47.36 sec; Start 110: dcft4; 107/411 Test #82: cc9a ............................. Passed 123.74 sec; Start 111: dcft5; 108/411 Test #108: dcft2 ............................ Passed 17.41 sec; Start 112: dcft6; 109/411 Test #106: dcft-grad4 ....................... Passed 41.40 sec; Start 114: dcft8; 110/411 Test #100: ci-property ...................... Passed 60.29 sec; Start 115: dcft9; 111/411 Test #109: dcft3 ............................ Passed 36.73 sec; Start 116: ao-dfcasscf-sp; 112/411 Test #116: ao-dfcasscf-sp ................... Passed 6.27 sec; Start 117: dfcasscf-sa-sp; 113/411 Test #117: dfcasscf-sa-sp ................... Passed 6.21 sec; Start 118: dfcasscf-fzc-sp; 114/411 Test #118: dfcasscf-fzc-sp .................. Passed 6.87 sec; Start 119: dfcasscf-sp; 115/411 Test #119: dfcasscf-sp ...................... Passed 6.25 sec; St,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1090#issuecomment-408925986:9718,Test,Test,9718,https://psicode.org,https://github.com/psi4/psi4/pull/1090#issuecomment-408925986,1,['Test'],['Test']
Testability,#96: cisd-opt-fd ...................... Passed 87.68 sec; Start 74: cc6; 30/401 Test #368: dft-custom-mgga .................. Passed 62.73 sec; Start 200: frac-ip-fitting; 31/401 Test #19: cbs-xtpl-wrapper ................. Passed 62.39 sec; Start 166: dft1-alt; 32/401 Test #90: cepa-module ...................... Passed 125.09 sec; Start 343: sapt-dft2; 33/401 Test #236: ocepa-freq1 ...................... Passed 489.86 sec; Start 58: cc41; 34/401 Test #179: isapt2 ........................... Passed 46.85 sec; Start 366: dft-custom-dhdf; 35/401 Test #316: sapt6 ............................ Passed 72.26 sec; Start 11: cbs-delta-energy; 36/401 Test #25: cc13a ............................ Passed 519.27 sec; Start 27: cc13c; 37/401 Test #47: cc31 ............................. Passed 131.54 sec; Start 61: cc44; 38/401 Test #74: cc6 .............................. Passed 78.78 sec; Start 12: cbs-parser; 39/401 Test #200: frac-ip-fitting .................. Passed 56.76 sec; Start 255: omp3-3; 40/401 Test #343: sapt-dft2 ........................ Passed 53.47 sec; Start 60: cc43; 41/401 Test #166: dft1-alt ......................... Passed 54.05 sec; Start 163: dft-b3lyp; 42/401 Test #44: cc29 ............................. Passed 150.02 sec; Start 233: nbody-he-cluster; 43/401 Test #29: cc14 ............................. Passed 290.28 sec; Start 46: cc30; 44/401 Test #31: cc16 ............................. Passed 204.91 sec; Start 143: dfomp2-grad2; 45/401 Test #114: dcft9 ............................ Passed 101.63 sec; Start 57: cc40; 46/401 Test #366: dft-custom-dhdf .................. Passed 49.28 sec; Start 257: omp3-5; 47/401 Test #301: pywrap-checkrun-rohf ............. Passed 555.72 sec; Start 272: opt11; 48/401 Test #69: cc52 ............................. Passed 122.20 sec; Start 68: cc51; 49/401 Test #163: dft-b3lyp ........................ Passed 36.67 sec; Start 256: omp3-4; 50/401 Test #24: cc13 ............................. Passed 251.21 sec; Start 246: omp2-5; 51/,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1071#issuecomment-402453832:4393,Test,Test,4393,https://psicode.org,https://github.com/psi4/psi4/pull/1071#issuecomment-402453832,1,['Test'],['Test']
Testability,#98: cisd-opt-fd ...................... Passed 165.52 sec; Start 26: cc13a; 46/412 Test #105: dcft-grad2 ....................... Passed 142.01 sec; Start 114: dcft7; 47/412 Test #348: sapt-dft2 ........................ Passed 127.97 sec; Start 206: frac-traverse; 48/412 Test #75: cc5a ............................. Passed 116.05 sec; Start 317: sapt2; 49/412 Test #184: isapt2 ........................... Passed 121.27 sec; Start 319: sapt4; 50/412 Test #303: pywrap-cbs1 ...................... Passed 132.02 sec; Start 326: scf-bz2; 51/412 Test #155: dft-grad-lr2 ..................... Passed 112.86 sec; Start 262: omp3-5; 52/412 Test #92: cepa-module ...................... Passed 134.25 sec; Start 372: dft-custom-dhdf; 53/412 Test #27: cc13b ............................ Passed 61.84 sec; Start 281: opt-irc-1; 54/412 Test #260: omp3-3 ........................... Passed 75.45 sec; Start 17: cbs-xtpl-opt; 55/412 Test #262: omp3-5 ........................... Passed 37.38 sec; Start 116: dcft9; 56/412 Test #169: dft1 ............................. Passed 111.17 sec; Start 76: cc6; 57/412 Test #116: dcft9 ............................ Passed 29.49 sec; Start 28: cc13c; 58/412 Test #17: cbs-xtpl-opt ..................... Passed 65.63 sec; Start 280: opt14; 59/412 Test #28: cc13c ............................ Passed 20.50 sec; Start 31: cc15; 60/412 Test #281: opt-irc-1 ........................ Passed 90.19 sec; Start 231: mp2-module; 61/412 Test #372: dft-custom-dhdf .................. Passed 101.66 sec; Start 70: cc51; 62/412 Test #194: fd-freq-energy-large ............. Passed 554.36 sec; Start 19: cbs-xtpl-nbody; 63/412 Test #31: cc15 ............................. Passed 28.61 sec; Start 318: sapt3; 64/412 Test #76: cc6 .............................. Passed 69.60 sec; Start 108: dcft1; 65/412 Test #326: scf-bz2 .......................... Passed 138.38 sec; Start 293: psimrcc-fd-freq2; 66/412 Test #108: dcft1 ............................ Passed 21.44 sec; Start 193: fd-freq-ene,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1220#issuecomment-419126068:5566,Test,Test,5566,https://psicode.org,https://github.com/psi4/psi4/pull/1220#issuecomment-419126068,1,['Test'],['Test']
Testability,"#; 401: Irrep: 1; 401: 1: 1.6041282; 401: 2: 0.8050841; 401: 3: 0.8050841; 401: ; 401: ; 401: ; 401: Wiberg Bond Indices using Orthogonal Lowdin Orbitals:; 401: ; 401: Irrep: 1 Size: 3 x 3; 401: ; 401: 1 2 3; 401: ; 401: 1 0.00000000000000 0.92373852221608 0.92373852221608; 401: 2 0.92373852221608 0.00000000000000 0.00699264970980; 401: 3 0.92373852221608 0.00699264970980 0.00000000000000; 401: ; 401: ; 401: ; 401: Atomic Valences: ; 401: ; 401: # #; 401: Irrep: 1; 401: 1: 1.8474770; 401: 2: 0.9307312; 401: 3: 0.9307312; 401: ; 401: ; 401: *** tstop() called on computer06 at Mon Jul 9 14:44:29 2018; 401: Traceback (most recent call last):; 401: File ""/home/raimis/psi4.git/tests/json/schema_0_properties/input.py"", line 120, in <module>; 401: psi4.compare_values(expected_properties[k], json_data[""properties""][k], 6, k.upper()) #TEST; 401: File ""/home/raimis/psi4.git/linux_build/stage/home/raimis/psi4.git/linux_install/lib/psi4/driver/p4util/util.py"", line 227, in compare_values; 401: raise TestComparisonError(message); 401: psi4.driver.p4util.exceptions.TestComparisonError: 	SCF_ONE_ELECTRON_ENERGY: computed value (-122.2750930) does not match (-122.2750911) to 6 digits.; 401: Module time:; 401: 	user time = 0.48 seconds = 0.01 minutes; 401: 	system time = 0.02 seconds = 0.00 minutes; 401: 	total time = 0 seconds = 0.00 minutes; 401: Total time:; 401: 	user time = 0.48 seconds = 0.01 minutes; 401: 	system time = 0.02 seconds = 0.00 minutes; 401: 	total time = 0 seconds = 0.00 minutes; 401: 	JSON Success......................................................PASSED; 401: 	Result: DIPOLE....................................................PASSED; 401: 	Result: QUADRUPOLE................................................PASSED; 401: 	Result: MULLIKEN_CHARGES..........................................PASSED; 401: 	Result: LOWDIN_CHARGES............................................PASSED; 401: 	Result: WIBERG_LOWDIN_INDICES.....................................PASSED; 401: 	Result:",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-403466174:9246,Test,TestComparisonError,9246,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-403466174,1,['Test'],['TestComparisonError']
Testability,#diff-106 (26); > - _A_ tests/fsapt-diff1/fsaptD-ref/IndBA.png; > https://github.com/psi4/psi4/pull/470/files#diff-107 (0); > - _A_ tests/fsapt-diff1/fsaptD-ref/IndBA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-108 (17); > - _A_ tests/fsapt-diff1/fsaptD-ref/Total.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-109 (26); > - _A_ tests/fsapt-diff1/fsaptD-ref/Total.png; > https://github.com/psi4/psi4/pull/470/files#diff-110 (0); > - _A_ tests/fsapt-diff1/fsaptD-ref/Total.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-111 (17); > - _A_ tests/fsapt-diff1/fsaptD-ref/fsapt.dat; > https://github.com/psi4/psi4/pull/470/files#diff-112 (30); > - _A_ tests/fsapt-diff1/fsaptD-ref/geom.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-113 (16); > - _A_ tests/fsapt-diff1/fsaptD-ref/orient.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-114 (2); > - _A_ tests/fsapt-diff1/fsaptD-ref/run.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-115 (7); > - _A_ tests/fsapt-diff1/fsaptD-ref/vis.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-116 (12); > - _A_ tests/fsapt-diff1/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-117 (71); > - _A_ tests/fsapt-diff1/output.ref; > https://github.com/psi4/psi4/pull/470/files#diff-118 (1080); > - _A_ tests/fsapt1/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-119 (3); > - _A_ tests/fsapt1/README; > https://github.com/psi4/psi4/pull/470/files#diff-120 (50); > - _A_ tests/fsapt1/fsapt-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-121 (51); > - _A_ tests/fsapt1/fsapt-ref/Disp.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-122 (26); > - _A_ tests/fsapt1/fsapt-ref/Disp.png; > https://github.com/psi4/psi4/pull/470/files#diff-123 (0); > - _A_ tests/fsapt1/fsapt-ref/Disp.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-124 (17); > - _A_ tests/fsapt1/fsapt-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-125,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/470#issuecomment-249267903:13568,test,tests,13568,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903,1,['test'],['tests']
Testability,#diff-160 (0); > - _A_ tests/fsapt2/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-161 (0); > - _A_ tests/fsapt2/README; > https://github.com/psi4/psi4/pull/470/files#diff-162 (0); > - _A_ tests/fsapt2/fsapt-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-163 (0); > - _A_ tests/fsapt2/fsapt-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-164 (0); > - _A_ tests/fsapt2/fsapt-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-165 (0); > - _A_ tests/fsapt2/fsapt-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-166 (0); > - _A_ tests/fsapt2/fsapt-ref/IndBA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-167 (0); > - _A_ tests/fsapt2/fsapt-ref/QA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-168 (0); > - _A_ tests/fsapt2/fsapt-ref/QB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-169 (0); > - _A_ tests/fsapt2/fsapt-ref/ZA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-170 (0); > - _A_ tests/fsapt2/fsapt-ref/ZB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-171 (0); > - _A_ tests/fsapt2/fsapt-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-172 (0); > - _A_ tests/fsapt2/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-173 (0); > - _A_ tests/fsapt2/output.ref; > https://github.com/psi4/psi4/pull/470/files#diff-174 (0); > - _A_ tests/isapt1/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-175 (0); > - _A_ tests/isapt1/README; > https://github.com/psi4/psi4/pull/470/files#diff-176 (0); > - _A_ tests/isapt1/fsapt-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-177 (0); > - _A_ tests/isapt1/fsapt-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-178 (0); > - _A_ tests/isapt1/fsapt-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-179 (0); > - _A_ tests/isapt1/fsapt-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-180 (0); > - _A_ tests/isapt1,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/470#issuecomment-249267903:19104,test,tests,19104,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903,1,['test'],['tests']
Testability,#diff-174 (0); > - _A_ tests/isapt1/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-175 (0); > - _A_ tests/isapt1/README; > https://github.com/psi4/psi4/pull/470/files#diff-176 (0); > - _A_ tests/isapt1/fsapt-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-177 (0); > - _A_ tests/isapt1/fsapt-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-178 (0); > - _A_ tests/isapt1/fsapt-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-179 (0); > - _A_ tests/isapt1/fsapt-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-180 (0); > - _A_ tests/isapt1/fsapt-ref/IndBA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-181 (0); > - _A_ tests/isapt1/fsapt-ref/QA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-182 (0); > - _A_ tests/isapt1/fsapt-ref/QB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-183 (0); > - _A_ tests/isapt1/fsapt-ref/ZA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-184 (0); > - _A_ tests/isapt1/fsapt-ref/ZB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-185 (0); > - _A_ tests/isapt1/fsapt-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-186 (0); > - _A_ tests/isapt1/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-187 (0); > - _A_ tests/isapt1/output.ref; > https://github.com/psi4/psi4/pull/470/files#diff-188 (0); > - _A_ tests/isapt1/plot-ref/DA.png; > https://github.com/psi4/psi4/pull/470/files#diff-189 (0); > - _A_ tests/isapt1/plot-ref/DA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-190 (0); > - _A_ tests/isapt1/plot-ref/DB.png; > https://github.com/psi4/psi4/pull/470/files#diff-191 (0); > - _A_ tests/isapt1/plot-ref/DB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-192 (0); > - _A_ tests/isapt1/plot-ref/DC.png; > https://github.com/psi4/psi4/pull/470/files#diff-193 (0); > - _A_ tests/isapt1/plot-ref/DC.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-194 (0); > - _A_ tests/isa,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/470#issuecomment-249267903:20479,test,tests,20479,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903,1,['test'],['tests']
Testability,#diff-214 (0); > - _A_ tests/isapt2/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-215 (0); > - _A_ tests/isapt2/README; > https://github.com/psi4/psi4/pull/470/files#diff-216 (0); > - _A_ tests/isapt2/fsapt-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-217 (0); > - _A_ tests/isapt2/fsapt-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-218 (0); > - _A_ tests/isapt2/fsapt-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-219 (0); > - _A_ tests/isapt2/fsapt-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-220 (0); > - _A_ tests/isapt2/fsapt-ref/IndBA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-221 (0); > - _A_ tests/isapt2/fsapt-ref/QA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-222 (0); > - _A_ tests/isapt2/fsapt-ref/QB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-223 (0); > - _A_ tests/isapt2/fsapt-ref/ZA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-224 (0); > - _A_ tests/isapt2/fsapt-ref/ZB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-225 (0); > - _A_ tests/isapt2/fsapt-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-226 (0); > - _A_ tests/isapt2/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-227 (0); > - _A_ tests/isapt2/output.ref; > https://github.com/psi4/psi4/pull/470/files#diff-228 (0); > - _A_ tests/isapt2/plot-ref/DA.png; > https://github.com/psi4/psi4/pull/470/files#diff-229 (0); > - _A_ tests/isapt2/plot-ref/DA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-230 (0); > - _A_ tests/isapt2/plot-ref/DB.png; > https://github.com/psi4/psi4/pull/470/files#diff-231 (0); > - _A_ tests/isapt2/plot-ref/DB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-232 (0); > - _A_ tests/isapt2/plot-ref/DC.png; > https://github.com/psi4/psi4/pull/470/files#diff-233 (0); > - _A_ tests/isapt2/plot-ref/DC.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-234 (0); > - _A_ tests/isa,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/470#issuecomment-249267903:24450,test,tests,24450,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903,1,['test'],['tests']
Testability,"% tests passed, 0 tests failed out of 411. Label Time Summary:; adc = 53.30 sec*proc (2 tests); autotest = 715.90 sec*proc (26 tests); cart = 10496.39 sec*proc (123 tests); cas = 45.67 sec*proc (1 test); casscf = 97.70 sec*proc (11 tests); cbs = 775.99 sec*proc (10 tests); cc = 3501.05 sec*proc (65 tests); cdomp2 = 18.69 sec*proc (2 tests); cepa = 70.98 sec*proc (7 tests); ci = 91.90 sec*proc (8 tests); cisd = 133.06 sec*proc (7 tests); cookbook = 21.41 sec*proc (1 test); cubeprop = 18.63 sec*proc (2 tests); dcft = 1189.36 sec*proc (13 tests); df = 705.57 sec*proc (38 tests); dfccd = 3.15 sec*proc (1 test); dfccd-grad = 13.35 sec*proc (1 test); dfccdl = 4.11 sec*proc (1 test); dfccsd = 3.18 sec*proc (1 test); dfccsd-grad = 16.34 sec*proc (1 test); dfccsd-t-grad = 13.89 sec*proc (1 test); dfccsdat = 9.43 sec*proc (1 test); dfccsdl = 10.26 sec*proc (1 test); dfccsdt = 7.70 sec*proc (1 test); dfep2 = 6.04 sec*proc (2 tests); dfmp2 = 123.48 sec*proc (11 tests); dfomp2 = 209.11 sec*proc (7 tests); dfomp2.5 = 53.70 sec*proc (4 tests); dfomp3 = 51.68 sec*proc (4 tests); dfscf = 128.62 sec*proc (1 test); dft = 1299.12 sec*proc (27 tests); docs = 1.09 sec*proc (2 tests); ecp = 38.88 sec*proc (2 tests); fci = 10.23 sec*proc (2 tests); fcidump = 1.60 sec*proc (1 test); findif = 742.81 sec*proc (5 tests); fnocc = 75.77 sec*proc (4 tests); freq = 810.55 sec*proc (6 tests); gradient = 493.27 sec*proc (16 tests); json = 14.98 sec*proc (8 tests); longtests = 3198.41 sec*proc (5 tests); mcscf = 3.57 sec*proc (3 tests); minitests = 53.37 sec*proc (4 tests); mints = 79.27 sec*proc (14 tests); misc = 428.55 sec*proc (16 tests); mp2 = 507.97 sec*proc (13 tests); nbody = 52.29 sec*proc (2 tests); numpy = 0.68 sec*proc (1 test); ocepa = 293.22 sec*proc (6 tests); omp = 283.37 sec*proc (18 tests); opt = 1223.60 sec*proc (21 tests); plug = 6.89 sec*proc (7 tests); prop = 2.11 sec*proc (1 test); properties = 129.24 sec*proc (10 tests); psi = 19578.98 sec*proc (410 tests); psi4numpy = 12.87 s",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-405575064:39395,test,tests,39395,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-405575064,1,['test'],['tests']
Testability,%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf pk/df ae: dfocc-ene0] PASSED [ 27%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf pk/df ae: dfocc-ene0] PASSED [ 27%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf pk/df ae: dfocc-ene0] PASSED [ 27%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf cd/df fc: dfocc-ene0] PASSED [ 28%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf cd/df fc: dfocc-ene0] PASSED [ 28%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf cd/df fc: dfocc-ene0] PASSED [ 29%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf cd/df ae: dfocc-ene0] PASSED [ 29%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf cd/df ae: dfocc-ene0] PASSED [ 29%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf cd/df ae: dfocc-ene0] PASSED [ 30%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf cd fc: * dfocc-ene0] PASSED [ 30%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf cd fc: * dfocc-ene0] PASSED [ 31%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf cd fc: * dfocc-ene0] PASSED [ 31%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf cd ae: * dfocc-ene0] PASSED [ 31%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf cd ae: * dfocc-ene0] PASSED [ 32%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf cd ae: * dfocc-ene0] PASSED [ 32%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf pk/cd fc: * dfocc-ene0] PASSED [ 33%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf pk/cd fc: * dfocc-ene0] PASSED [ 33%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf pk/cd fc: * dfocc-ene0] PASSED [ 34%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf pk/cd ae: * dfocc-ene0] PASSED [ 34%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf pk/cd ae: * dfocc-ene0] PASSED [ 34%]; ../tests/pytests/test_mp2.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:6834,test,tests,6834,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841,1,['test'],['tests']
Testability,%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf pk/df rr dfocc-ene0] PASSED [ 5%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf drct/df rr dfocc-ene0] PASSED [ 5%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf df/df rr dfocc-ene0] PASSED [ 6%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf mem/df rr dfocc-ene0] PASSED [ 6%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf disk/df rr dfocc-ene0] PASSED [ 6%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf cd/df rr dfocc-ene0] PASSED [ 7%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf pk/conv rr occ -ene0] PASSED [ 7%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf drct/conv rr occ -ene0] PASSED [ 8%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf df/conv rr occ -ene0] PASSED [ 8%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf mem/conv rr occ -ene0] PASSED [ 9%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf disk/conv rr occ -ene0] PASSED [ 9%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf cd/conv rr occ -ene0] PASSED [ 9%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf pk/conv rr fnocc-ene0] PASSED [ 10%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf drct/conv rr fnocc-ene0] PASSED [ 10%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf df/conv rr fnocc-ene0] PASSED [ 11%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf mem/conv rr fnocc-ene0] PASSED [ 11%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf disk/conv rr fnocc-ene0] PASSED [ 11%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf cd/conv rr fnocc-ene0] PASSED [ 12%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf df fc: * dfmp2-ene0] PASSED [ 12%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf df fc: * dfmp2-ene0] PASSED [ 13%]; ../tests/pytests/,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:1610,test,tests,1610,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841,1,['test'],['tests']
Testability,"'; fxyz: absolute path to an xyz file; '''; elements, xyz = [], []; with open(fxyz) as f:; line = next(f); numb_atoms = int(line.split()[0]); line = next(f); charge, multiplicity = map(int, line.split()); for i in range(numb_atoms):; line = next(f); elmnt, x, y, z = line.split() ; elements.append(elmnt); xyz.append((float(x), float(y), float(z))). fxyz = os.path.basename(fxyz); base, ext = os.path.splitext(fxyz). name = base + '_wB97XD3_def2-TZVP'. geom_string = '\n'.join(['%s %f %f %f' % (e, x, y, z) for e, (x, y, z) in zip(elements, xyz)]); geom_string = str(charge) + ' ' + str(multiplicity) + '\n' + geom_string; print(""geom_string"", geom_string). outfile = name + '.psi4'; psi4.core.set_output_file(outfile, False); geom = psi4.geometry(geom_string); settings = {; 'scf_type': 'DF',; 'dft_basis_tolerance': 1e-10,; 'ints_tolerance': 1e-10,; 'dft_pruning_scheme':'robust',; 'S_ORTHOGONALIZATION': 'PARTIALCHOLESKY',; 'S_CHOLESKY_TOLERANCE': 1e-6,; 'wcombine': False,; }; psi4.set_options(settings); start_time = time.time(); grad = psi4.gradient(theory) ; psi4.core.print_variables(); energy = psi4.variable(""SCF TOTAL ENERGY""); psi4.core.clean(); jobtime = time.time() - start_time; results = {; ""time"": float(jobtime),; ""energy"": energy,; ""gradient"": grad.np.tolist(); }; print(f""{psi4.core.get_num_threads()=}""). with open(name + "".json"", ""w"") as fout:; json.dump(results, fout, indent=4). print(""Job %s completed in %.2f seconds with energy %.10f"" % (base, jobtime, energy)). def main(args):; assert args[1].endswith("".xyz""); psi4.set_num_threads(1); run_fxyz(args[1]). if __name__ == '__main__':; main(sys.argv); ```. ## Psithon vs. QCSchema. Another aside -- your input is written as a python script containing a single job and dropping the key results to json. This could also run through QCSchema with json input and json output, either API like https://github.com/psi4/psi4/blob/master/tests/pytests/test_addons.py#L792-L819 or command-line. Let me know if you'd want more details.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2548#issuecomment-1100294938:4761,assert,assert,4761,https://psicode.org,https://github.com/psi4/psi4/issues/2548#issuecomment-1100294938,2,"['assert', 'test']","['assert', 'tests']"
Testability,"'python' may not be available, use the same Python to run the tests",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3216:62,test,tests,62,https://psicode.org,https://github.com/psi4/psi4/pull/3216,1,['test'],['tests']
Testability,"( I have the feeling a similar issue was made a long while ago, but I cannot find it). test input:; ```; molecule UHF {; 0 3; O 0.000000 0.000000 0.000000; O 0.000000 0.000000 1.1; }. memory 1 GiB; #set basis pcseg-1; set basis sto-3g. set reference uhf; grad, wfn = gradient('ccsd', return_wfn=True,molecule=UHF); ```. This will segfault with current master and last piece of output is; ```. **************************; * *; * CCHBAR *; * *; **************************; ```. Perhaps the reason are unoccupied occ/virt fields:. ```; IRREP # MOs # FZDC # DOCC # SOCC # VIRT # FZVR; ----- ----- ------ ------ ------ ------ ------; Ag 3 0 3 0 0 0; B1g 0 0 0 0 0 0; B2g 1 0 0 1 0 0; B3g 1 0 0 1 0 0; Au 0 0 0 0 0 0; B1u 3 0 2 0 1 0; B2u 1 0 1 0 0 0; B3u 1 0 1 0 0 0; ```. Running without symmetry or a larger basis set works fine. edit: adjusted irrep table formatting",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1966:87,test,test,87,https://psicode.org,https://github.com/psi4/psi4/issues/1966,1,['test'],['test']
Testability,(0); > - _A_ tests/isapt1/plot-ref/VB.png; > https://github.com/psi4/psi4/pull/470/files#diff-203 (0); > - _A_ tests/isapt1/plot-ref/VB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-204 (0); > - _A_ tests/isapt1/plot-ref/VC.png; > https://github.com/psi4/psi4/pull/470/files#diff-205 (0); > - _A_ tests/isapt1/plot-ref/VC.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-206 (0); > - _A_ tests/isapt1/plot-ref/dDA.png; > https://github.com/psi4/psi4/pull/470/files#diff-207 (0); > - _A_ tests/isapt1/plot-ref/dDA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-208 (0); > - _A_ tests/isapt1/plot-ref/dDB.png; > https://github.com/psi4/psi4/pull/470/files#diff-209 (0); > - _A_ tests/isapt1/plot-ref/dDB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-210 (0); > - _A_ tests/isapt1/plot-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-211 (0); > - _A_ tests/isapt1/plot-ref/orient.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-212 (0); > - _A_ tests/isapt1/plot-ref/run.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-213 (0); > - _A_ tests/isapt1/plot-ref/vis.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-214 (0); > - _A_ tests/isapt2/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-215 (0); > - _A_ tests/isapt2/README; > https://github.com/psi4/psi4/pull/470/files#diff-216 (0); > - _A_ tests/isapt2/fsapt-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-217 (0); > - _A_ tests/isapt2/fsapt-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-218 (0); > - _A_ tests/isapt2/fsapt-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-219 (0); > - _A_ tests/isapt2/fsapt-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-220 (0); > - _A_ tests/isapt2/fsapt-ref/IndBA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-221 (0); > - _A_ tests/isapt2/fsapt-ref/QA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-222 (0); > ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/470#issuecomment-249267903:23258,test,tests,23258,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903,1,['test'],['tests']
Testability,"(1 test); dfep2 = 10.99 sec*proc (2 tests); dfmp2 = 198.00 sec*proc (6 tests); dfomp2 = 6.63 sec*proc (1 test); dfomp3 = 66.77 sec*proc (2 tests); dft = 110.67 sec*proc (5 tests); dftd3 = 50.87 sec*proc (1 test); dftd4 = 138.41 sec*proc (2 tests); direct-scf = 4.26 sec*proc (1 test); eom = 26.13 sec*proc (2 tests); extern = 145.89 sec*proc (6 tests); fcidump = 3.94 sec*proc (1 test); findif = 217.30 sec*proc (11 tests); fnocc = 214.81 sec*proc (4 tests); freq = 119.90 sec*proc (9 tests); fsapt = 680.95 sec*proc (7 tests); gradient = 7.40 sec*proc (2 tests); json = 6.72 sec*proc (2 tests); mcscf = 2.04 sec*proc (1 test); minitests = 10.99 sec*proc (2 tests); mints = 14.50 sec*proc (6 tests); misc = 48.60 sec*proc (8 tests); mp2 = 11.54 sec*proc (3 tests); nbody = 140.71 sec*proc (2 tests); noc1 = 1576.77 sec*proc (45 tests); numpy = 1.88 sec*proc (1 test); olccd = 11.77 sec*proc (2 tests); omp = 19.01 sec*proc (4 tests); opt = 18.56 sec*proc (3 tests); properties = 234.60 sec*proc (11 tests); psi = 7147.73 sec*proc (184 tests); psi4numpy = 11.43 sec*proc (4 tests); psimrcc = 19.16 sec*proc (5 tests); python = 164.19 sec*proc (10 tests); pywrap = 102.12 sec*proc (5 tests); quicktests = 7213.94 sec*proc (185 tests); sapt = 2255.37 sec*proc (14 tests); scf = 2018.25 sec*proc (36 tests); smoketests = 1345.56 sec*proc (16 tests); stability = 14.22 sec*proc (3 tests); tdscf = 352.79 sec*proc (2 tests); tutorial = 24.08 sec*proc (4 tests); uhf = 3.31 sec*proc (1 test); x2c = 24.82 sec*proc (4 tests). Total Test time (real) = 7214.27 sec. The following tests FAILED:; 192 - dft-vv10 (Failed); 197 - dft-dens-cut (Failed); 210 - fsapt-terms (Failed); 213 - fsapt-ext-abc (Failed); 214 - fsapt-ext-abc2 (Failed); 215 - fsapt-ext-abc-au (Failed); 452 - dft-smoke (Failed); 525 - fsaptd-terms (Failed); 527 - dftd4-r2scan (Failed); Errors while running CTest; Output from these tests are in: /gpfs/alpine2/scratch/jslj23/chm205/psi4/build/Testing/Temporary/LastTest.log; Use ""--rerun-fail",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3223#issuecomment-2373056930:19167,test,tests,19167,https://psicode.org,https://github.com/psi4/psi4/issues/3223#issuecomment-2373056930,1,['test'],['tests']
Testability,"(1) do other conda packages like NumPy work for you?; Yes, I just opened pycharm using conda as the interpreter, import numpy and converted a list to a np array. (2) can/did you do the Windows equivalent of log out then log back in?; I just restarted my computer, error still persists . (3) what exactly was your ""added the directory to my path"" command?; I went system properties --> environment manager --> Path ; then added the following code in ""C:\Users\erikc\psi4conda"". (4) what does psi4 --version say?; C:\Users\erikc>psi4 --version; Traceback (most recent call last):; File ""C:\Users\erikc\psi4conda\lib\site-packages\psi4\__init__.py"", line 55, in <module>; from . import core; ImportError: DLL load failed while importing core: The specified module could not be found. During handling of the above exception, another exception occurred:. Traceback (most recent call last):; File ""C:\Users\erikc\psi4conda\Scripts\psi4-script.py"", line 182, in <module>; import psi4 # isort:skip; File ""C:\Users\erikc\psi4conda\lib\site-packages\psi4\__init__.py"", line 60, in <module>; raise ImportError(""{0}"".format(err)); ImportError: DLL load failed while importing core: The specified module could not be found.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875053088:207,log,log,207,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875053088,2,['log'],['log']
Testability,"(1) we've moved to azure. (2) full test suite is greater breaking concern, so I'll add a single long lane to azure for full tests.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1555#issuecomment-573839025:35,test,test,35,https://psicode.org,https://github.com/psi4/psi4/pull/1555#issuecomment-573839025,2,['test'],"['test', 'tests']"
Testability,(2 tests); autotest = 2018.64 sec*proc (26 tests); cart = 19448.39 sec*proc (123 tests); cas = 58.63 sec*proc (1 test); casscf = 130.95 sec*proc (11 tests); cbs = 2775.51 sec*proc (10 tests); cc = 15156.58 sec*proc (65 tests); cdomp2 = 67.70 sec*proc (2 tests); cepa = 222.04 sec*proc (7 tests); ci = 109.70 sec*proc (8 tests); cisd = 189.39 sec*proc (7 tests); cookbook = 200.39 sec*proc (1 test); cubeprop = 18.11 sec*proc (2 tests); dcft = 5366.23 sec*proc (13 tests); df = 2660.25 sec*proc (38 tests); dfccd = 3.65 sec*proc (1 test); dfccd-grad = 7.89 sec*proc (1 test); dfccdl = 5.38 sec*proc (1 test); dfccsd = 2.50 sec*proc (1 test); dfccsd-grad = 58.61 sec*proc (1 test); dfccsd-t-grad = 49.75 sec*proc (1 test); dfccsdat = 13.69 sec*proc (1 test); dfccsdl = 5.69 sec*proc (1 test); dfccsdt = 12.58 sec*proc (1 test); dfep2 = 7.96 sec*proc (2 tests); dfmp2 = 181.37 sec*proc (11 tests); dfomp2 = 1655.18 sec*proc (7 tests); dfomp2.5 = 182.29 sec*proc (4 tests); dfomp3 = 257.66 sec*proc (4 tests); dfscf = 135.99 sec*proc (1 test); dft = 1395.19 sec*proc (27 tests); docs = 1.30 sec*proc (2 tests); ecp = 63.18 sec*proc (2 tests); fci = 14.46 sec*proc (2 tests); fcidump = 10.01 sec*proc (1 test); findif = 851.83 sec*proc (5 tests); fnocc = 101.30 sec*proc (4 tests); freq = 1354.12 sec*proc (6 tests); gradient = 2622.57 sec*proc (16 tests); json = 14.03 sec*proc (8 tests); longtests = 3313.72 sec*proc (5 tests); mcscf = 2.89 sec*proc (3 tests); minitests = 68.94 sec*proc (4 tests); mints = 81.69 sec*proc (14 tests); misc = 515.57 sec*proc (16 tests); mp2 = 533.59 sec*proc (13 tests); nbody = 70.79 sec*proc (2 tests); numpy = 0.72 sec*proc (1 test); ocepa = 1056.65 sec*proc (6 tests); omp = 601.76 sec*proc (18 tests); opt = 1434.29 sec*proc (21 tests); plug = 8.20 sec*proc (7 tests); prop = 2.51 sec*proc (1 test); properties = 142.13 sec*proc (10 tests); psi = 46764.51 sec*proc (410 tests); psi4numpy = 14.06 sec*proc (6 tests); psimrcc = 138.13 sec*proc (8 tests); python = 1382.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1124#issuecomment-411347383:39481,test,tests,39481,https://psicode.org,https://github.com/psi4/psi4/pull/1124#issuecomment-411347383,1,['test'],['tests']
Testability,(2 tests); autotest = 2032.85 sec*proc (26 tests); cart = 19618.09 sec*proc (123 tests); cas = 54.46 sec*proc (1 test); casscf = 99.80 sec*proc (11 tests); cbs = 2579.77 sec*proc (11 tests); cc = 15643.19 sec*proc (65 tests); cdomp2 = 48.29 sec*proc (2 tests); cepa = 188.77 sec*proc (7 tests); ci = 115.37 sec*proc (8 tests); cisd = 188.24 sec*proc (7 tests); cookbook = 186.42 sec*proc (1 test); cubeprop = 23.39 sec*proc (3 tests); dcft = 5685.84 sec*proc (13 tests); df = 2727.51 sec*proc (38 tests); dfccd = 6.37 sec*proc (1 test); dfccd-grad = 5.73 sec*proc (1 test); dfccdl = 3.74 sec*proc (1 test); dfccsd = 10.80 sec*proc (1 test); dfccsd-grad = 40.30 sec*proc (1 test); dfccsd-t-grad = 74.65 sec*proc (1 test); dfccsdat = 8.87 sec*proc (1 test); dfccsdl = 12.21 sec*proc (1 test); dfccsdt = 11.34 sec*proc (1 test); dfep2 = 6.87 sec*proc (2 tests); dfmp2 = 199.62 sec*proc (11 tests); dfomp2 = 1655.90 sec*proc (7 tests); dfomp2.5 = 243.42 sec*proc (4 tests); dfomp3 = 236.24 sec*proc (4 tests); dfscf = 139.59 sec*proc (1 test); dft = 1445.40 sec*proc (27 tests); docs = 1.15 sec*proc (2 tests); ecp = 69.69 sec*proc (2 tests); fci = 14.10 sec*proc (2 tests); fcidump = 6.47 sec*proc (1 test); findif = 963.69 sec*proc (5 tests); fnocc = 104.66 sec*proc (4 tests); freq = 1101.89 sec*proc (6 tests); gradient = 2501.04 sec*proc (16 tests); json = 21.09 sec*proc (8 tests); longtests = 3526.25 sec*proc (5 tests); mcscf = 8.66 sec*proc (3 tests); minitests = 71.36 sec*proc (4 tests); mints = 90.94 sec*proc (14 tests); misc = 520.90 sec*proc (16 tests); mp2 = 521.82 sec*proc (13 tests); nbody = 80.36 sec*proc (2 tests); numpy = 0.68 sec*proc (1 test); ocepa = 918.38 sec*proc (6 tests); omp = 700.31 sec*proc (18 tests); opt = 1458.50 sec*proc (21 tests); plug = 10.87 sec*proc (7 tests); prop = 3.50 sec*proc (1 test); properties = 142.20 sec*proc (10 tests); psi = 47628.72 sec*proc (412 tests); psi4numpy = 18.89 sec*proc (6 tests); psimrcc = 136.54 sec*proc (8 tests); python = 1196.7,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1246#issuecomment-425384085:39672,test,tests,39672,https://psicode.org,https://github.com/psi4/psi4/pull/1246#issuecomment-425384085,1,['test'],['tests']
Testability,(2 tests); autotest = 994.34 sec*proc (26 tests); cart = 14957.35 sec*proc (123 tests); cas = 53.75 sec*proc (1 test); casscf = 214.86 sec*proc (11 tests); cbs = 1085.57 sec*proc (11 tests); cc = 6887.79 sec*proc (65 tests); cdomp2 = 43.27 sec*proc (2 tests); cepa = 141.35 sec*proc (7 tests); ci = 206.59 sec*proc (8 tests); cisd = 285.49 sec*proc (7 tests); cookbook = 66.55 sec*proc (1 test); cubeprop = 44.67 sec*proc (2 tests); dcft = 2708.77 sec*proc (13 tests); df = 1635.28 sec*proc (38 tests); dfccd = 16.56 sec*proc (1 test); dfccd-grad = 13.91 sec*proc (1 test); dfccdl = 26.46 sec*proc (1 test); dfccsd = 15.59 sec*proc (1 test); dfccsd-grad = 22.13 sec*proc (1 test); dfccsd-t-grad = 21.66 sec*proc (1 test); dfccsdat = 12.93 sec*proc (1 test); dfccsdl = 15.16 sec*proc (1 test); dfccsdt = 15.93 sec*proc (1 test); dfep2 = 46.62 sec*proc (2 tests); dfmp2 = 296.86 sec*proc (11 tests); dfomp2 = 798.00 sec*proc (7 tests); dfomp2.5 = 88.35 sec*proc (4 tests); dfomp3 = 65.99 sec*proc (4 tests); dfscf = 149.44 sec*proc (1 test); dft = 1654.52 sec*proc (27 tests); docs = 27.08 sec*proc (2 tests); ecp = 72.20 sec*proc (2 tests); fci = 46.96 sec*proc (2 tests); fcidump = 27.57 sec*proc (1 test); findif = 886.69 sec*proc (5 tests); fnocc = 76.13 sec*proc (4 tests); freq = 827.22 sec*proc (6 tests); gradient = 1290.88 sec*proc (16 tests); json = 147.88 sec*proc (8 tests); longtests = 3606.32 sec*proc (5 tests); mcscf = 44.46 sec*proc (3 tests); minitests = 134.75 sec*proc (4 tests); mints = 278.54 sec*proc (14 tests); misc = 651.09 sec*proc (16 tests); mp2 = 718.58 sec*proc (13 tests); nbody = 61.73 sec*proc (2 tests); numpy = 13.74 sec*proc (1 test); ocepa = 515.48 sec*proc (6 tests); omp = 489.25 sec*proc (18 tests); opt = 1529.93 sec*proc (21 tests); plug = 119.45 sec*proc (7 tests); prop = 18.48 sec*proc (1 test); properties = 263.33 sec*proc (10 tests); psi = 31689.51 sec*proc (411 tests); psi4numpy = 103.83 sec*proc (6 tests); psimrcc = 238.05 sec*proc (8 tests); python ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1225#issuecomment-419883272:39691,test,tests,39691,https://psicode.org,https://github.com/psi4/psi4/pull/1225#issuecomment-419883272,1,['test'],['tests']
Testability,"(2) was never discussed on the conference call, so I'll take that option for this PR. The driver-side changes are straightforward, test changes should be as well.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2419#issuecomment-1031759768:131,test,test,131,https://psicode.org,https://github.com/psi4/psi4/pull/2419#issuecomment-1031759768,1,['test'],['test']
Testability,"(2); > - *M* psi4/src/psi4/scfgrad/scf_grad.cc; > <https://github.com/psi4/psi4/pull/799/files#diff-16> (93); > - *M* psi4/src/psi4/scfgrad/scf_grad.h; > <https://github.com/psi4/psi4/pull/799/files#diff-17> (1); > - *M* psi4/src/read_options.cc; > <https://github.com/psi4/psi4/pull/799/files#diff-18> (4); > - *M* tests/CMakeLists.txt; > <https://github.com/psi4/psi4/pull/799/files#diff-19> (2); > - *A* tests/dft-custom/CMakeLists.txt; > <https://github.com/psi4/psi4/pull/799/files#diff-20> (3); > - *A* tests/dft-custom/input.dat; > <https://github.com/psi4/psi4/pull/799/files#diff-21> (54); > - *A* tests/dft-custom/output.ref; > <https://github.com/psi4/psi4/pull/799/files#diff-22> (910); > - *A* tests/dft-reference/CMakeLists.txt; > <https://github.com/psi4/psi4/pull/799/files#diff-23> (3); > - *A* tests/dft-reference/input.dat; > <https://github.com/psi4/psi4/pull/799/files#diff-24> (19); > - *A* tests/dft-reference/output.ref; > <https://github.com/psi4/psi4/pull/799/files#diff-25> (366); > - *M* tests/gcp/CMakeLists.txt; > <https://github.com/psi4/psi4/pull/799/files#diff-26> (2); > - *A* tests/gcp/hf3c-gradients/CMakeLists.txt; > <https://github.com/psi4/psi4/pull/799/files#diff-27> (3); > - *A* tests/gcp/hf3c-gradients/input.dat; > <https://github.com/psi4/psi4/pull/799/files#diff-28> (19); > - *A* tests/gcp/hf3c-gradients/output.ref; > <https://github.com/psi4/psi4/pull/799/files#diff-29> (1438); > - *A* tests/gcp/hf3c-hessian/CMakeLists.txt; > <https://github.com/psi4/psi4/pull/799/files#diff-30> (3); > - *A* tests/gcp/hf3c-hessian/input.dat; > <https://github.com/psi4/psi4/pull/799/files#diff-31> (21); > - *A* tests/gcp/hf3c-hessian/output.ref; > <https://github.com/psi4/psi4/pull/799/files#diff-32> (2612); >; > Patch Links:; >; > - https://github.com/psi4/psi4/pull/799.patch; > - https://github.com/psi4/psi4/pull/799.diff; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <htt",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/799#issuecomment-330258817:4646,test,tests,4646,https://psicode.org,https://github.com/psi4/psi4/pull/799#issuecomment-330258817,1,['test'],['tests']
Testability,"(3), acpf, aqcc, ccd, bccd, bccd(t), cc2, cc3, and some representative DFTs (svwn, pbe, b3lyp, wb97x, b2plyp) to standard suite testing to nail down their capabilities. Added some advice to the stdsuite so that others can perhaps edit it.; * all but cepa(1), cepa(3), acpf, aqcc, svwn, and wb97x are verified against external programs (for qcdb's and qcengine's good, not because I distrusted longstanding Psi4 implementations), usually cfour, nwchem, gamess; * ROHF DETCI doesn't match gamess/cfour for CISD or FCI, but doubtless that's implementation choice that I haven't identified. Anyway, that's why those are separate entries (away from qcng) in `standard_suite_ref_local.py`; * In filling out the capabilities tables for Hessians, I tried to collect CD Hessians for HF and SVWN by FD of energies. They failed the per-element CD result ~= CONV result check. Not surprising since CD thresh is set at 1e-4. I didn't do anything about the failure (ref values deleted and tests are not active), so this is just to bring up that CD threshold is untuned for dertype or E_/D_/R_CONVERGENCE.; * refuted first two thirds of a prominent footnote: `DFT gradients only implemented for SCF type DF. LRC-DFT gradients not implemented yet. DH-DFT gradients not implemented.`; - [x] upgraded stdsuite runner to catch up with qcdb and qcengine last year by (1) implementing per-dertype and abs/rel comparison checks (nothing is actually loosened) and (2) dropping a dict summary of each test to a record file.; - [x] arranged for available `td-{dft}` calls to show up in the energy table, https://psicode.org/psi4manual/master/energy.html; - [x] fixed `energy(""psimrcc_scf"")` to use regular SCF as ref for PSIMRCC and added a test; - [x] rehabilitated `energy(""qchf"")` (which never had its initialism expanded in the whole of the codebase, btw) so it runs. added a test. it probably ought to be better integrated with regular SCF module. Regular SCF has a qchf option that is unused.; - [x] adjusted some qcvars",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2731:11040,test,tests,11040,https://psicode.org,https://github.com/psi4/psi4/pull/2731,1,['test'],['tests']
Testability,"(B) seconded. All of the tests are total energies / gradients, so I think it's fine to update the reference values, as long as the shifts aren't huge. . Related, the `dft-custom-mgga` could be retired in favour of the interaction/ionisation tests, or is it covering something that those don't?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1591#issuecomment-494030116:25,test,tests,25,https://psicode.org,https://github.com/psi4/psi4/pull/1591#issuecomment-494030116,2,['test'],['tests']
Testability,"(C) 2010 Free Software Foundation, Inc.; This is free software; see the source for copying conditions. There is NO; warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.; Written by Roland McGrath and Ulrich Drepper.; ```; ```; >>> which conda python psi4; ~/.local/opt/PSI4/v1.2/bin/conda; ~/.local/opt/PSI4/v1.2/bin/python; ~/.local/opt/PSI4/v1.2/bin/psi4; ```; ```; >>> cat /proc/cpuinfo | grep flags; flags		: fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good xtopology nonstop_tsc aperfmperf pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx f16c rdrand lahf_lm ida arat epb xsaveopt pln pts dts tpr_shadow vnmi flexpriority ept vpid fsgsbase smep erms.......; ```; ```; >>> cat /proc/version ; Linux version 2.6.32-431.el6.x86_64 (mockbuild@x86-023.build.eng.bos.redhat.com) (gcc version 4.4.7 20120313 (Red Hat 4.4.7-4) (GCC) ) #1 SMP Sun Nov 10 22:19:54 EST 2013; ```; ```; >>> lsb_release -a; LSB Version:	:base-4.0-amd64:base-4.0-noarch:core-4.0-amd64:core-4.0-noarch:graphics-4.0-amd64:graphics-4.0-noarch:printing-4.0-amd64:printing-4.0-noarch; Distributor ID:	RedHatEnterpriseServer; Description:	Red Hat Enterprise Linux Server release 6.5 (Santiago); Release:	6.5; Codename:	Santiago; ```; ```; >>> ldd -v lib/python3.6/site-packages/psi4/core.so ; 	linux-vdso.so.1 => (0x00007fffe3ffd000); 	libambit.so => /home/usrname/.local/opt/PSI4/v1.2/lib/python3.6/site-packages/psi4/../../../libambit.so (0x00002b78f3dff000); 	libpthread.so.0 => /lib64/libpthread.so.0 (0x00002b78f4118000); 	libm.so.6 => /lib64/libm.so.6 (0x00002b78f4335000); 	libdl.so.2 => /lib64/libdl.so.2 (0x00002b78f45b9000); 	libpcm.so.1 => /home/usrname/.local/opt/PSI4/v1.2/lib/python3.6/site-packages/psi4/../../../libpcm.so.1 (0x00002b78f47be000); 	libxc.so",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1088#issuecomment-405831690:2919,mock,mockbuild,2919,https://psicode.org,https://github.com/psi4/psi4/issues/1088#issuecomment-405831690,1,['mock'],['mockbuild']
Testability,"(a.u.), 36.9670246 (eV); ```. ### **QChem 5.1.1 energies output**; ```; Excitation energy: 9.604199 eV; Excitation energy: 11.471817 eV; Excitation energy: 12.351230 eV; Excitation energy: 14.275101 eV; Excitation energy: 15.537288 eV; Excitation energy: 19.185085 eV; Excitation energy: 28.691037 eV; Excitation energy: 29.170632 eV; Excitation energy: 30.989051 eV; Excitation energy: 32.166632 eV; Excitation energy: 32.314728 eV; Excitation energy: 32.606197 eV; Excitation energy: 32.633181 eV; Excitation energy: 34.246055 eV; Excitation energy: 34.740876 eV; Excitation energy: 34.873378 eV; Excitation energy: 35.736631 eV; Excitation energy: 36.181398 eV; Excitation energy: 36.845602 eV; Excitation energy: 36.967022 eV; ```. Running the ADC(2) test in both programs showed some slight deviation in energies, but nothing alarming.; ### **QChem 5.1.1 - adc(2) test energies**; ```; Excitation energy: 6.951866 eV; Excitation energy: 6.951866 eV; ```. ### **Psi4 1.3.2 -- adc(2) test energies**; ```; ->	1 A state : 0.2557608 (a.u.), 6.9596066 (eV); Non-iterative: 0.2559128 (a.u.), 6.9637417 (eV); ->	2 A state : 0.2557608 (a.u.), 6.9596066 (eV); Non-iterative: 0.2559128 (a.u.), 6.9637417 (eV); ```. Further, we set up calculations for the systems in [this work](https://aip.scitation.org/doi/10.1063/1.1504708). Please find the calculations for HF and N2 below; I am happy to provide data on the other systems if needed.; Basis set & geometry information for HF and N2 were found in [this work](https://aip.scitation.org/doi/abs/10.1063/1.1386415). ### **HF**; For ADC(1) results, we continue to see no remarkable error. In the ADC(2) results, the HF system's excitation energies calculated by QChem reproduce the results provided in the Trofimov, Stelter, Schirmer paper. However, the energies provided by Psi4 seem to have an inconsistent deviation from the values: for some states, the energies reported are near exact:; ```; Lit: 9.63 eV; Psi4: 9.6455240 eV; QChem: 9.631168 eV; ```; fo",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1033#issuecomment-510952344:2441,test,test,2441,https://psicode.org,https://github.com/psi4/psi4/issues/1033#issuecomment-510952344,1,['test'],['test']
Testability,"(and hence all globals access) resists giving the same key to a scalar and an array variable. This check is not in place for C-side Wfn, but shouldn't be a problem given our habit of labeling with E/G/H, etc.; - **ALERT** this generates oodles of `FutureWarning`s b/c to keep this PR focussed on the substantive changes, I haven't updated the fn names w/i the codebase. That will be a separate PR hard after this gains approval, and should probably be merged in sequence, lest users go batty. I've worked on other topics beyond this one, and I'm confident the deprecation warnings are allowing the unhindered use of old syntax.; - [x] Deprecation Warnings look like the below in PsiAPI and PSIthon modes, respectively. For the latter, I had to suppress printing of offending line b/c it was very wrong (usually part of the LGPL license).; ```; psiapi.py:8: FutureWarning: Using `psi4.core.get_variable` instead of `psi4.core.variable` (or ; `psi4.core.scalar_variable` for scalar variables only) is deprecated, and in 1.4 it will stop working. print(psi4.get_variable('current energy')); ```; ```; Using `psi4.core.get_variable` instead of `psi4.core.variable` (or `psi4.core.scalar_variable` for scalar variables only) is deprecated, and in 1.4 it will stop working. ```. ## Breaking Changes; - Not many, as there's heavy use of deprecation; - Any access that expected `Wfn.variables` to return only scalars will now be surprised to get all types. Easy to replace with `Wfn.get_scalar_variables`.; - Any code that wrote to Wfn array directly in non-UC (e.g., `wfn.variables_[""lower or mixed-case var""] = val`) needs to be changed to `""UPPER-CASE VAR""` or to `wfn.set_scalar_variables`; - Any code that tries to access a non-existent global will now throw, hence the fixes to the driver and test cases you see here. ## Checklist; - [x] Tests added for any new features; - [x] quick tests pass and I've run a full tests with this+other commits. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1393:2566,test,test,2566,https://psicode.org,https://github.com/psi4/psi4/pull/1393,4,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,"(developer or user-interest) that this PR has or will; > accomplish.; >; > - Changes ORBSYM (the symmetry of each orbital) from Psi4's internal; > convention of ordering irreps to the traditional FCIDUMP ordering; > - Adds ISYM (the symmetry of the overall wavefunction); > - Updates the fcidump test to match new ordering; >; > Questions; >; > - Does this change in convention break anything in Psi4? (Or anything; > that uses Psi4?); > - Since I altered the tests to match the output, how to verify; > correctness of this change?; >; > Checklist; >; > - All or relevant fraction of full tests run; > <http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests>; >; > Status; >; > - Ready for review; > - Ready for merge; >; > ------------------------------; > You can view, comment on, or merge this pull request online at:; >; > https://github.com/psi4/psi4/pull/1453; > Commit Summary; >; > - added helper function, correct ORBSYM output; > - added isym to fcidump, updated tests; >; > File Changes; >; > - *M* psi4/driver/p4util/fcidump.py; > <https://github.com/psi4/psi4/pull/1453/files#diff-0> (29); > - *M* tests/fcidump/Ne.6311G.INTDUMP.ref; > <https://github.com/psi4/psi4/pull/1453/files#diff-1> (3); > - *M* tests/fcidump/Ne.C1.6311G.INTDUMP.ref; > <https://github.com/psi4/psi4/pull/1453/files#diff-2> (1); > - *M* tests/fcidump/Ne.C1.cc-pVDZ.UHF.INTDUMP.ref; > <https://github.com/psi4/psi4/pull/1453/files#diff-3> (1); > - *M* tests/fcidump/Ne.cc-pVDZ.UHF.INTDUMP.ref; > <https://github.com/psi4/psi4/pull/1453/files#diff-4> (3); >; > Patch Links:; >; > - https://github.com/psi4/psi4/pull/1453.patch; > - https://github.com/psi4/psi4/pull/1453.diff; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/pull/1453>, or mute the thread; > <https://github.com/notifications/unsubscribe-auth/AC9Qdjvy0hVobCbhOq3qA4biT25rt88rks5u_UxTgaJpZM4ZnaXM>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1453#issuecomment-451294754:1492,test,tests,1492,https://psicode.org,https://github.com/psi4/psi4/pull/1453#issuecomment-451294754,4,['test'],['tests']
Testability,"(fisapt + external potentials). There might be something wrong when the molecule is specified in bohr. I'm not sure, so I thought I'd query @alenaizan and @CDSherrill about how suspicious the below makes you, and how likely you would have been to catch this in the testing process. First things, the `ExternalPotential.charges_` (holding charge and position) stores positions in the units of the molecule. For consistency for functions on the class, it translates the internal data to bohr before computing. This printing label https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/extern.cc#L70 is wrong (for positions; ok for charges). These comments suggest this might not have been clear in the earlier PR https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/extern.cc#L414-L416 and might have ramifications here https://github.com/psi4/psi4/blob/master/psi4/src/psi4/fisapt/fisapt.cc#L730-L735 . When I rewrite the fsapt-ext-abc test case so that the molecule and charges are again consistent in Bohr (below), the overall passes but the fragments don't. Also below is the fsapt.dat differences. Again, I can well believe that I'm doing something wrong or that the `fsapt.py` machinery has some built-in unit assumptions, but I'm glad of any input or we-checked-that information. The reason it's coming up now is that DDD ""fixes"" this peculiarity of `ExternalPotential` and _only_ stores the charge positions in Bohr. ```; memory 1 GB. # water prism: https://science.sciencemag.org/content/sci/suppl/2012/05/16/336.6083.897.DC1/Perez_SM.pdf; # Table S43. #mol = psi4.core.Molecule.from_arrays(; # elez=[1, 8, 1, 1, 8, 1, 1, 8, 1],; # fragment_separators=[3, 6],; # fix_com=True,; # fix_orientation=True,; # fix_symmetry='c1',; # geom=np.array([; # 0.0290, -1.1199, -1.5243,; # 0.9481, -1.3990, -1.3587,; # 1.4371, -0.5588, -1.3099,; # 1.0088, -1.5240, 0.5086,; # 1.0209, -1.1732, 1.4270,; # 1.5864, -0.3901, 1.3101,; # -1.0231, 1.6243, -0.8743,; # -0.5806, 2.0297, -0.1111,; ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2330:984,test,test,984,https://psicode.org,https://github.com/psi4/psi4/issues/2330,1,['test'],['test']
Testability,(from http://forum.psicode.org/t/scaled-opposite-spin-sos-not-changing-orbital-optimized-mp2-omp2/1596); It appears that the spin-scaled OMP2 methods like `sos-omp2` do not apply spin-scaling to the MP-L functional. Instead spin-scaling is done in a post-scf fashion on the `omp2` results.; This is not necessarily what one would expect from the method name. Pinging both @bozkaya and @JonathonMisiewicz ; Could you have a look please? What is suppose to happen?. Test input:; [test.txt](https://github.com/psi4/psi4/files/3825609/test.txt),MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1751:464,Test,Test,464,https://psicode.org,https://github.com/psi4/psi4/issues/1751,3,"['Test', 'test']","['Test', 'test']"
Testability,"(s). Additionally this PR changes the Bragg-Slater (BS) radii and completes the Treutler-Ahlrichs integration code with the recommended mapping values. Old radii were of unknown origin. _Because of the updated BS radii, this PR will impact the total energies of any DFT calculation and can change how many grid points are generated **even without pruning**._ . ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] updated BS radii and extended to 104 elements; - [x] implementation of missing Treutler-Eta mapping parameter; - [x] `DFT_NUCLEAR_SCHEME=SBECKE` ('smooth Becke' after: 10.1063/1.5049435. Better for weak interactions, but no time savings/no screening); - [x] extends `DFT_PRUNING_SCHEME` keyword with:; - [x] Treutler grid pruning ``TREUTLER``; - [x] a more robust grid pruning variant of it ``ROBUST``; - [x] new variables: ``XC GRID TOTAL POINTS``, ``XC GRID SPHERICAL POINTS``, ``XC GRID RADIAL POINTS``; - [x] `print > 2` adds (existing but unused) debug grid print out; - [x] tight DFT tests are updated with new values due to the new Bragg-Slater radii used; - [x] testing and error overview; - [x] option to properly disable all pruning (currently only indirect way); - [x] tests below indicate a reduction of the grid size by 30 and 45% using `ROBUST` and `TREUTLER` pruning, respectively. This leads to a 15-20% speed up for small molecules.; - [x] the following tests have been updated because of the new BS radii: `dft-b3lyp`; `dft-custom-mgga`, `dft-grad-lr1`, `dft-grad-lr3`, `dft-grad-meta`, `dft-grad1`, `dft-grad2`, `dft-omega`, `dft-psivar`, `dft-vv10`, `dft1`, `dftd3-grad`, `dftd3-version`, `frac-traverse`, `opt13`, `pcmsolver-dft`, `pcmsolver-dipole`; - [x] new test: `dft-pruning`. ## Questions; - Pruning enabled by default? -> not this PR, but after further testing yes. ## Checklist; - [x] Documentation; - [x] Pruning Tests added; - [x] All relevant `ctests` pass; (http://psicode.org/psi4manual/master/build_plannin",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1591:1440,test,tests,1440,https://psicode.org,https://github.com/psi4/psi4/pull/1591,3,['test'],"['testing', 'tests']"
Testability,"(sorry for the delay, libint2 was a bit challenging to get going.) test doesn't pass locally, for a few reasons. there are a lot of comments already, so I'll list the reasons here, as well as comment on the relevant lines of code. . 1) `""return_output""` key is deprecated in current QCSchema, this makes `AtomicInput` choke. remove line 12 from the test.; 2) when inside `schema_wrapper.py` (which is inside the driver), you don't need to add the prefix `psi4`. `psi4.core.RHF` should be just `core.RHF` on line 594.; 3) question for @loriab : `json_ret` is (once the above are fixed) of type `AtomicResult`, which is not JSON serializable. this is indeed being caught by line 72 of the test (good call). is there a simple `AtomicResult` -> `Dict` translation?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2328#issuecomment-1106721074:67,test,test,67,https://psicode.org,https://github.com/psi4/psi4/pull/2328#issuecomment-1106721074,3,['test'],['test']
Testability,(this is a copy over from #1562 so that I can replace test there.). ## Major Points of Interest. * A smart SCF solver that can intelligently make a variety of choices depending on local conditions (#1135). ## Obtaining. ## New Methods. ## New Methods (beta). ## New External Libraries. - [HelPME](https://github.com/andysim/helpme) - A particle-mesh Ewald library for long-range electrostatics.; - [pyoptking](https://github.com/psi-rking/optking) - A python-based implementation of the OptKing geometry optimization and IRC program. ## First Time Contributors. ## Additional Non-Core Contributors to v1.4. ## Performance Optimizations. ## Psi Developer Upgrade Guide. ## Developer Interests. ## Bug Fixes. ## Known Bugs,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1768:54,test,test,54,https://psicode.org,https://github.com/psi4/psi4/issues/1768,1,['test'],['test']
Testability,) / 0.037 (MB); > > Size of irrep 1 of <ia|bc> integrals: 0.001 (MW) / 0.009 (MB); > > Size of irrep 2 of <ia|bc> integrals: 0.002 (MW) / 0.012 (MB); > > Size of irrep 3 of <ia|bc> integrals: 0.003 (MW) / 0.028 (MB); > > Total: 0.011 (MW) / 0.086 (MB); > > ; > > Size of irrep 0 of tijab amplitudes: 0.001 (MW) / 0.011 (MB); > > Size of irrep 1 of tijab amplitudes: 0.000 (MW) / 0.001 (MB); > > Size of irrep 2 of tijab amplitudes: 0.000 (MW) / 0.004 (MB); > > Size of irrep 3 of tijab amplitudes: 0.001 (MW) / 0.006 (MB); > > Total: 0.003 (MW) / 0.022 (MB); > > Output from running coupled cluster tests:; > > ; > > Start 9: cc1; > > 1/79 Test #9: cc1 ..............................**_Failed 1.95 sec; > > Start 10: cc10; > > 2/79 Test #10: cc10 .............................**_Failed 1.59 sec; > > Start 11: cc11; > > 3/79 Test #11: cc11 .............................**_Failed 1.82 sec; > > Start 12: cc12; > > 4/79 Test #12: cc12 .............................**_Failed 1.56 sec; > > Start 13: cc13; > > 5/79 Test #13: cc13 .............................**_Failed 1.64 sec; > > Start 14: cc13a; > > 6/79 Test #14: cc13a ............................**_Failed 1.65 sec; > > Start 15: cc14; > > 7/79 Test #15: cc14 .............................**_Failed 1.58 sec; > > Start 16: cc15; > > 8/79 Test #16: cc15 .............................**_Failed 1.53 sec; > > Start 17: cc16; > > 9/79 Test #17: cc16 .............................**_Failed 1.65 sec; > > Start 18: cc17; > > 10/79 Test #18: cc17 .............................**_Failed 1.65 sec; > > Other tests are passing:; > > ; > > Start 1: adc1; > > 1/294 Test #1: adc1 ............................. Passed 18.67 sec; > > Start 2: adc2; > > 2/294 Test #2: adc2 ............................. Passed 36.82 sec; > > Start 3: casscf-fzc-sp; > > 3/294 Test #3: casscf-fzc-sp .................... Passed 2.24 sec; > > Start 4: casscf-sa-sp; > > 4/294 Test #4: casscf-sa-sp ..................... Passed 5.18 sec; > > Start 5: casscf-sp; > > 5/294 Test #5: c,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/230#issuecomment-178205078:4208,Test,Test,4208,https://psicode.org,https://github.com/psi4/psi4/issues/230#issuecomment-178205078,1,['Test'],['Test']
Testability,") with conventional integrals added to `occ` module, as originally proposed in #2354; - [ ] note that this uses a specialty QCEngine for reference values. https://github.com/MolSSI/QCEngine/pull/375 It'll build by itself. I'll need to mint a QCEngine patch release before building conda packages with this PR in master.; - [x] docs-wise, I picked off a bit and included it in this PR. on the whole, let's defer docs edits until the dfocc PR; - [x] reworked the run_occ* driver functions a bit so that method defs are localized and there's less risk of missing an internal setting when adding new methods.; - [x] added stdsuite testing for new methods remp2 energy and oremp2 energy and gradient. added stdsuite testing for existing E & G for omp2, omp2.5, omp3, oremp2, olccd and filled in some gaps for ccsd, ccsd(t), a-ccsd(t). all conventional ints. fixed up some mis-set byproducts uncovered by stdsuite testing: OO ROHF was printing and setting wrong plain MP2 energies, OMP3 & OMP2.5 wasn't setting right `Wfn.energy_`, stop setting ROHF MP3 and MP2.5 out of caution.; - [x] tightened the min rms_mograd_convergence from 6.0 to 6.5 so that stdsuite (3 mol/basis sets) could reliably compute energies, gradients, and findif gradients to 1e-6. ## Questions; - [x] sometimes the non-OO value (e.g., MP2, LCCD) is available as an early byproduct of the OO calc (e.g., OMP2, OLCCD). this wasn't the case with REMP, and some QCVariables that stored a purported non-OO REMP had to be removed. @behnle, please confirm that this sounds right.; - @behnle, sorry for the long delay and scrambling of your PR. please feel free to comment and PR to this to modify.; - @bozkaya, this adds pretty cleanly onto your `occ` code, but do look it over if you want. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2653:2856,Test,Tests,2856,https://psicode.org,https://github.com/psi4/psi4/pull/2653,3,"['Test', 'test']","['Tests', 'tests']"
Testability,")$ (the same as the first bullet point in the reformulation above), and $X_{\text{alt},\kappa g} = \text{sign}(w_{g}) \sqrt{|w_{g}|} \kappa(r_{g})$. Essentially, $S_{N}$ now uses two variants of the $X$ matrix in its formulation, one of which folds the grid weight sign into itself. ## User API & Changelog headlines; - [X] COSX can now be used with a wider variety of grids, as a bug preventing COSX to be used with specific grid configurations has been fixed.; ## Dev notes & details; - [X] The COSX implementation has been reformulated to enable calculations with grids containing negative grid weights. ## Questions; - [x] Is the current way of handling computation of the numerical overlap matrix acceptable? Currently, two X matrices are used to form the numerical overlap matrix. One goal of folding the grid weight sign into the formation of G was to prevent the use of multiple X matrices. However, I don't think that can be done here without removing the call to `linalg::doublet` in the `compute_numeric_overlap` function. One could probably do a slightly-modified, manually-implemented matrix multiply with the grid weight folded in, and construct $S_{N}$ with a single $X$ matrix that way. But that comes at the cost of not utilizing BLAS. What does everyone consider preferable?; - [ ] What, exactly, is the best way to test this? I would like to add a test to `test_dfjcosk.py` for a new grid weight option with negative weights. Unfortunately, it seems that other codes that have COSX just don't have grid options that lead to negative grid weights. For now, I've been comparing against Psi4 COSX calculations using similar grid sizes and ensuring the calculations have similar energies, but I certainly wouldn't consider that robust. ## Checklist; - [X] Tests added for any new features; - [X] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [X] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2931:3003,test,test,3003,https://psicode.org,https://github.com/psi4/psi4/pull/2931,5,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,")); File “/xstorage/tobias/bin/psi4/lib//python3.8/site-packages/psi4/driver/p4util/python_helpers.py”, line 85, in _pybuild_basis; bs, basisdict = qcdb.BasisSet.pyconstruct(mol.to_dict(),; File “/xstorage/tobias/bin/psi4/lib//python3.8/site-packages/psi4/driver/qcdb/libmintsbasisset.py”, line 696, in pyconstruct; bs, msg, ecp = BasisSet.construct(parser, mol,; File “/xstorage/tobias/bin/psi4/lib//python3.8/site-packages/psi4/driver/qcdb/libmintsbasisset.py”, line 918, in construct; raise BasisSetNotFound(f’BasisSet::construct: Unable to find a basis set for atom {at + 1} for key {key} among:\n{text2}’). psi4.driver.qcdb.exceptions.BasisSetNotFound: BasisSet::construct: Unable to find a basis set for atom 1 for key BASIS among:; Shell Entries: [‘O’]; Basis Sets: [(’(AUTO)’, ‘(AUTO)’, None)]; File Path: /scr/tobias/psi.1379622…cfour.14c28cc5, /scr/tobias/psi.1379622…cfour.14c28cc5, /xstorage/tobias/bin/psi4/share/psi4/basis; Input Blocks:. Printing out the relevant lines from the Psithon → Python processed input file:; core.IO.set_default_namespace(""""); core.set_global_option(“CFOUR_CALC_LEVEL”, “CCSD(T)”); core.set_global_option(“CFOUR_BASIS”, “AUG-PVQZ”); core.set_global_option(“CFOUR_SCF_CONV”, 12); core.set_global_option(“CFOUR_CC_CONV”, 12); → energy(‘cfour’). !----------------------------------------------------------------------------------!; ! !; ! BasisSet::construct: Unable to find a basis set for atom 1 for key BASIS among: !; ! Shell Entries: [‘O’] !; ! Basis Sets: [(’(AUTO)’, ‘(AUTO)’, None)] !; ! File Path: /scr/tobias/psi.1379622…cfour.14c28cc5, !; ! /scr/tobias/psi.1379622…cfour.14c28cc5, !; ! /xstorage/tobias/bin/psi4/share/psi4/basis !; ! Input Blocks: !; ! !; !----------------------------------------------------------------------------------!. Could you please help me what causes the problem? Note that `psi4 --test` also fails for CFOUR:. `lib/python3.8/site-packages/psi4/tests/test_addons.py::test_cfour FAILED`. Thank you in advance for your help.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2608:3280,test,test,3280,https://psicode.org,https://github.com/psi4/psi4/issues/2608,2,['test'],"['test', 'tests']"
Testability,"), #TEST; 'Eexch' : variable(""SAPT EXCH ENERGY""), #TEST; 'Eind' : variable(""SAPT IND ENERGY""), #TEST; 'Edisp' : variable(""SAPT DISP ENERGY""), #TEST; 'Etot' : variable(""SAPT0 TOTAL ENERGY""), #TEST; } #TEST. for key in keys: #TEST; compare_values(Eref[key], Epsi[key], 6, key) #TEST. import os; import sys; import subprocess. os.chdir('fsapt'); with open('fA.dat', 'w') as fA: fA.write(""w1 1 2 3""); with open('fB.dat', 'w') as fB: fB.write(""w3 4 5 6""); subprocess.run([sys.executable, os.path.join('..', 'fsapt.py')], check=True). fEnergies = {}; fkeys = ['fEelst', 'fEexch', 'fEindAB', 'fEindBA', 'fEdisp', 'fEedisp', 'fEtot'] #TEST. with open('fsapt.dat', 'r') as fsapt: #TEST; Energies = [float(x) for x in fsapt.readlines()[-2].split()[2:]] #TEST. for pair in zip(fkeys,Energies): #TEST; fEnergies[pair[0]] = pair[1] #TEST. fEref = { #TEST; 'fEelst' : -30.867, #TEST; 'fEexch' : 11.445, #TEST; 'fEindAB': -3.138, #TEST; 'fEindBA': -1.863, #TEST; 'fEdisp' : -1.754, #TEST; 'fEedisp': 0.000, #TEST; 'fEtot' : -26.177} #TEST. for key in fkeys: #TEST; compare_values(fEref[key], fEnergies[key], 2, key) #TEST; ```. ```; (py39b) psilocaluser@bash:psinet:/psi/gits/hrw-l2/objdir39b: (sept21qcdb_rb1) stage/bin/psi4 ../tests/fsapt-ext-abc-au/input.dat ; Enuc..................................................................................PASSED; Eelst.................................................................................PASSED; Eexch.................................................................................PASSED; Eind..................................................................................PASSED; Edisp.................................................................................PASSED; Etot..................................................................................PASSED; fEelst................................................................................FAILED; Traceback (most recent call last):; File ""/psi/gits/hrw-l2/objdir39b/stage/bin/psi4"", line 33",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2330:5491,TEST,TEST,5491,https://psicode.org,https://github.com/psi4/psi4/issues/2330,1,['TEST'],['TEST']
Testability,"); - Driver sow/reap for optimize, database which never worked for py3 removed (#1583); - Add 6-311G(2df, <any>) for 2nd row atoms (#1531); - Improve printing and guess for r_e for the `diatomic` procedure (#1601); - Response code cleaned to use Hessian-vector products (#1550); - Enable running pytest in parallel via `psi4 --test -n<N>` if package `pytest-xdist` installed (#1612); - Considerable code-cleanup at LGTM's prompting (#1618, #1633, #1631, #1616, #1617, #1624, #1620, #1622, #1627, #1639, #1630, #1629, #1636, #1632, #1626, #1619, #1625, #1623, #1634, #1650, #1651, #1621, #1655); - Considerable memory-leak cleanup at CPPCHECK's prompting (#1534) and a bit more at valgrind's prompting (#1755); - moved code to QCA; - molecule alignment code (#1644); - `QCAspect` refined into `qcel.Datum` (#1654); - use code from QCA; - testing functions dropped in favor of wrapping qcelemental testing functions. also, can choose between conventional Psi4 testing API and QCA API (#1644); - Windows testing and build (#1648); - Add CSAM screening to ERISieve as alternative to Schwarz. Turn on with `set screening csam` (#1499); - New Bragg-Slater (BS) radii change DFT total energies slightly (#1591); - Extend `SAD_SCF_TYPE` to all usual `SCF_TYPE` types by using exact or DF integrals under the hood (#1477).; - Implement quadrature weights cutoff at 1.e-15, which together with pruning makes DFT on C_60 40% faster (#1581); - Compute multipole potential integrals to arbitrary order, replacing code for EFP that was fixed at octupole (#1657); - Allow external potentials in FISAPT (#1608); - Speed up electric field integrals (25x) (#1671); - Implement SAD natural orbitals guess (#1672); - Analytic Hessians for LSDA functionals (#1664); - Add qc2p basis set from CFOUR (#1718); - Update to g2g v2 API (#1718); - Density cumulant functional theory (DCFT) thoroughly rebranded to density cumulant theory (DCT). Adjust your calls and keywords accordingly or psi will reproach you (#1719).; - Drop",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1562:5727,test,testing,5727,https://psicode.org,https://github.com/psi4/psi4/issues/1562,2,['test'],['testing']
Testability,); cart = 8218.29 sec*proc (123 tests); cas = 41.71 sec*proc (1 test); casscf = 36.15 sec*proc (11 tests); cbs = 546.91 sec*proc (10 tests); cc = 1151.91 sec*proc (65 tests); cdomp2 = 5.24 sec*proc (2 tests); cepa = 30.36 sec*proc (7 tests); ci = 79.29 sec*proc (8 tests); cisd = 117.44 sec*proc (7 tests); cookbook = 18.93 sec*proc (1 test); cubeprop = 16.42 sec*proc (2 tests); dcft = 560.31 sec*proc (13 tests); df = 370.25 sec*proc (38 tests); dfccd = 1.39 sec*proc (1 test); dfccd-grad = 2.01 sec*proc (1 test); dfccdl = 1.41 sec*proc (1 test); dfccsd = 1.55 sec*proc (1 test); dfccsd-grad = 3.50 sec*proc (1 test); dfccsd-t-grad = 3.85 sec*proc (1 test); dfccsdat = 2.57 sec*proc (1 test); dfccsdl = 1.64 sec*proc (1 test); dfccsdt = 1.99 sec*proc (1 test); dfep2 = 4.64 sec*proc (2 tests); dfmp2 = 93.43 sec*proc (11 tests); dfomp2 = 61.41 sec*proc (7 tests); dfomp2.5 = 19.21 sec*proc (4 tests); dfomp3 = 18.74 sec*proc (4 tests); dfscf = 120.49 sec*proc (1 test); dft = 1158.52 sec*proc (27 tests); docs = 1.35 sec*proc (2 tests); ecp = 31.03 sec*proc (2 tests); fci = 9.12 sec*proc (2 tests); fcidump = 2.13 sec*proc (1 test); findif = 682.89 sec*proc (5 tests); fnocc = 31.56 sec*proc (4 tests); freq = 541.69 sec*proc (6 tests); gradient = 135.87 sec*proc (16 tests); json = 10.69 sec*proc (8 tests); longtests = 3093.86 sec*proc (5 tests); mcscf = 3.13 sec*proc (3 tests); minitests = 50.90 sec*proc (4 tests); mints = 69.69 sec*proc (14 tests); misc = 340.45 sec*proc (16 tests); mp2 = 408.77 sec*proc (13 tests); nbody = 35.02 sec*proc (2 tests); numpy = 0.74 sec*proc (1 test); ocepa = 87.26 sec*proc (6 tests); omp = 109.60 sec*proc (18 tests); opt = 1008.97 sec*proc (21 tests); plug = 7.54 sec*proc (7 tests); prop = 2.12 sec*proc (1 test); properties = 102.82 sec*proc (10 tests); psi = 13769.08 sec*proc (410 tests); psi4numpy = 10.04 sec*proc (6 tests); psimrcc = 82.97 sec*proc (8 tests); python = 582.57 sec*proc (10 tests); pywrap = 447.44 sec*proc (12 tests); quicktests = 98,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1073#issuecomment-406985370:39328,test,tests,39328,https://psicode.org,https://github.com/psi4/psi4/pull/1073#issuecomment-406985370,1,['test'],['tests']
Testability,); cbs = 1351.37 sec*proc (10 tests); cc = 3972.16 sec*proc (64 tests); cdomp2 = 26.61 sec*proc (2 tests); cepa = 116.08 sec*proc (7 tests); ci = 68.29 sec*proc (8 tests); cisd = 82.46 sec*proc (7 tests); cookbook = 107.12 sec*proc (1 test); cubeprop = 17.29 sec*proc (2 tests); dcft = 1551.98 sec*proc (13 tests); df = 720.18 sec*proc (38 tests); dfccd = 2.40 sec*proc (1 test); dfccd-grad = 6.11 sec*proc (1 test); dfccdl = 2.42 sec*proc (1 test); dfccsd = 3.17 sec*proc (1 test); dfccsd-grad = 22.59 sec*proc (1 test); dfccsd-t-grad = 19.43 sec*proc (1 test); dfccsdat = 13.82 sec*proc (1 test); dfccsdl = 3.14 sec*proc (1 test); dfccsdt = 3.87 sec*proc (1 test); dfep2 = 5.30 sec*proc (2 tests); dfmp2 = 89.76 sec*proc (11 tests); dfomp2 = 275.42 sec*proc (7 tests); dfomp2.5 = 77.71 sec*proc (4 tests); dfomp3 = 93.16 sec*proc (4 tests); dfscf = 28.72 sec*proc (1 test); dft = 5528.80 sec*proc (26 tests); docs = 1.34 sec*proc (2 tests); ecp = 37.52 sec*proc (2 tests); fci = 6.48 sec*proc (2 tests); fcidump = 3.69 sec*proc (1 test); findif = 602.21 sec*proc (5 tests); fnocc = 58.18 sec*proc (4 tests); freq = 856.94 sec*proc (6 tests); gradient = 547.45 sec*proc (16 tests); json = 14.48 sec*proc (8 tests); longtests = 835.25 sec*proc (5 tests); mcscf = 3.12 sec*proc (3 tests); minitests = 31.52 sec*proc (3 tests); mints = 35.52 sec*proc (14 tests); misc = 272.90 sec*proc (16 tests); mp2 = 205.17 sec*proc (13 tests); nbody = 52.21 sec*proc (2 tests); numpy = 0.63 sec*proc (1 test); ocepa = 324.78 sec*proc (6 tests); omp = 326.64 sec*proc (18 tests); opt = 769.80 sec*proc (21 tests); prop = 1.60 sec*proc (1 test); properties = 84.77 sec*proc (10 tests); psi = 20501.24 sec*proc (400 tests); psi4numpy = 13.93 sec*proc (6 tests); psimrcc = 70.67 sec*proc (8 tests); python = 880.26 sec*proc (10 tests); pywrap = 1339.53 sec*proc (12 tests); quicktests = 2290.03 sec*proc (137 tests); rasci = 37.96 sec*proc (3 tests); sapt = 1420.73 sec*proc (20 tests); scf = 5859.53 sec*proc (51 tests,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-402413637:38585,test,tests,38585,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-402413637,1,['test'],['tests']
Testability,); cbs = 901.95 sec*proc (10 tests); cc = 3510.91 sec*proc (65 tests); cdomp2 = 32.39 sec*proc (2 tests); cepa = 88.72 sec*proc (7 tests); ci = 91.10 sec*proc (8 tests); cisd = 152.27 sec*proc (7 tests); cookbook = 60.55 sec*proc (1 test); cubeprop = 18.54 sec*proc (2 tests); dcft = 1565.92 sec*proc (13 tests); df = 802.06 sec*proc (38 tests); dfccd = 1.64 sec*proc (1 test); dfccd-grad = 3.54 sec*proc (1 test); dfccdl = 2.21 sec*proc (1 test); dfccsd = 1.71 sec*proc (1 test); dfccsd-grad = 22.78 sec*proc (1 test); dfccsd-t-grad = 21.28 sec*proc (1 test); dfccsdat = 3.87 sec*proc (1 test); dfccsdl = 1.60 sec*proc (1 test); dfccsdt = 2.22 sec*proc (1 test); dfep2 = 4.59 sec*proc (2 tests); dfmp2 = 116.41 sec*proc (11 tests); dfomp2 = 225.13 sec*proc (7 tests); dfomp2.5 = 98.09 sec*proc (4 tests); dfomp3 = 94.63 sec*proc (4 tests); dfscf = 143.19 sec*proc (1 test); dft = 1426.34 sec*proc (27 tests); docs = 1.13 sec*proc (2 tests); ecp = 37.80 sec*proc (2 tests); fci = 10.98 sec*proc (2 tests); fcidump = 1.70 sec*proc (1 test); findif = 854.97 sec*proc (5 tests); fnocc = 60.27 sec*proc (4 tests); freq = 823.32 sec*proc (6 tests); gradient = 429.01 sec*proc (16 tests); json = 12.24 sec*proc (8 tests); longtests = 3709.37 sec*proc (5 tests); mcscf = 2.67 sec*proc (3 tests); minitests = 56.99 sec*proc (4 tests); mints = 84.82 sec*proc (14 tests); misc = 443.60 sec*proc (16 tests); mp2 = 533.62 sec*proc (13 tests); nbody = 51.37 sec*proc (2 tests); numpy = 0.65 sec*proc (1 test); ocepa = 155.69 sec*proc (6 tests); omp = 369.10 sec*proc (18 tests); opt = 1287.53 sec*proc (21 tests); plug = 7.76 sec*proc (7 tests); prop = 2.03 sec*proc (1 test); properties = 125.04 sec*proc (10 tests); psi = 21541.56 sec*proc (410 tests); psi4numpy = 9.73 sec*proc (6 tests); psimrcc = 111.61 sec*proc (8 tests); python = 854.21 sec*proc (10 tests); pywrap = 1083.92 sec*proc (12 tests); quicktests = 1943.21 sec*proc (140 tests); rasci = 39.98 sec*proc (3 tests); sapt = 6393.47 sec*proc (21 tests,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1078#issuecomment-408900195:39552,test,tests,39552,https://psicode.org,https://github.com/psi4/psi4/pull/1078#issuecomment-408900195,1,['test'],['tests']
Testability,); cc = 2524.71 sec*proc (65 tests); cdomp2 = 12.61 sec*proc (2 tests); cepa = 34.90 sec*proc (7 tests); ci = 86.89 sec*proc (8 tests); cisd = 126.11 sec*proc (7 tests); cookbook = 21.11 sec*proc (1 test); cubeprop = 19.47 sec*proc (2 tests); dcft = 1171.02 sec*proc (13 tests); df = 616.05 sec*proc (38 tests); dfccd = 1.95 sec*proc (1 test); dfccd-grad = 2.71 sec*proc (1 test); dfccdl = 1.29 sec*proc (1 test); dfccsd = 2.55 sec*proc (1 test); dfccsd-grad = 11.89 sec*proc (1 test); dfccsd-t-grad = 8.25 sec*proc (1 test); dfccsdat = 2.98 sec*proc (1 test); dfccsdl = 2.18 sec*proc (1 test); dfccsdt = 2.02 sec*proc (1 test); dfep2 = 5.39 sec*proc (2 tests); dfmp2 = 110.02 sec*proc (11 tests); dfomp2 = 215.16 sec*proc (7 tests); dfomp2.5 = 38.76 sec*proc (4 tests); dfomp3 = 28.71 sec*proc (4 tests); dfscf = 142.35 sec*proc (1 test); dft = 1320.66 sec*proc (27 tests); docs = 1.09 sec*proc (2 tests); ecp = 34.24 sec*proc (2 tests); fci = 10.36 sec*proc (2 tests); fcidump = 2.17 sec*proc (1 test); findif = 781.94 sec*proc (5 tests); fnocc = 32.06 sec*proc (4 tests); freq = 752.88 sec*proc (6 tests); gradient = 320.64 sec*proc (16 tests); json = 11.21 sec*proc (8 tests); longtests = 3454.42 sec*proc (5 tests); mcscf = 2.64 sec*proc (3 tests); minitests = 55.53 sec*proc (4 tests); mints = 79.80 sec*proc (14 tests); misc = 406.89 sec*proc (16 tests); mp2 = 509.73 sec*proc (13 tests); nbody = 37.02 sec*proc (2 tests); numpy = 0.67 sec*proc (1 test); ocepa = 127.43 sec*proc (6 tests); omp = 159.77 sec*proc (18 tests); opt = 1222.19 sec*proc (21 tests); plug = 6.43 sec*proc (7 tests); prop = 2.00 sec*proc (1 test); properties = 113.43 sec*proc (10 tests); psi = 18261.00 sec*proc (410 tests); psi4numpy = 9.90 sec*proc (6 tests); psimrcc = 98.46 sec*proc (8 tests); python = 791.98 sec*proc (10 tests); pywrap = 929.97 sec*proc (12 tests); quicktests = 1252.38 sec*proc (140 tests); rasci = 37.54 sec*proc (3 tests); sapt = 6019.06 sec*proc (21 tests); scf = 1609.21 sec*proc (52 tests);,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1075#issuecomment-409598225:39549,test,test,39549,https://psicode.org,https://github.com/psi4/psi4/pull/1075#issuecomment-409598225,1,['test'],['test']
Testability,); cc = 3972.16 sec*proc (64 tests); cdomp2 = 26.61 sec*proc (2 tests); cepa = 116.08 sec*proc (7 tests); ci = 68.29 sec*proc (8 tests); cisd = 82.46 sec*proc (7 tests); cookbook = 107.12 sec*proc (1 test); cubeprop = 17.29 sec*proc (2 tests); dcft = 1551.98 sec*proc (13 tests); df = 720.18 sec*proc (38 tests); dfccd = 2.40 sec*proc (1 test); dfccd-grad = 6.11 sec*proc (1 test); dfccdl = 2.42 sec*proc (1 test); dfccsd = 3.17 sec*proc (1 test); dfccsd-grad = 22.59 sec*proc (1 test); dfccsd-t-grad = 19.43 sec*proc (1 test); dfccsdat = 13.82 sec*proc (1 test); dfccsdl = 3.14 sec*proc (1 test); dfccsdt = 3.87 sec*proc (1 test); dfep2 = 5.30 sec*proc (2 tests); dfmp2 = 89.76 sec*proc (11 tests); dfomp2 = 275.42 sec*proc (7 tests); dfomp2.5 = 77.71 sec*proc (4 tests); dfomp3 = 93.16 sec*proc (4 tests); dfscf = 28.72 sec*proc (1 test); dft = 5528.80 sec*proc (26 tests); docs = 1.34 sec*proc (2 tests); ecp = 37.52 sec*proc (2 tests); fci = 6.48 sec*proc (2 tests); fcidump = 3.69 sec*proc (1 test); findif = 602.21 sec*proc (5 tests); fnocc = 58.18 sec*proc (4 tests); freq = 856.94 sec*proc (6 tests); gradient = 547.45 sec*proc (16 tests); json = 14.48 sec*proc (8 tests); longtests = 835.25 sec*proc (5 tests); mcscf = 3.12 sec*proc (3 tests); minitests = 31.52 sec*proc (3 tests); mints = 35.52 sec*proc (14 tests); misc = 272.90 sec*proc (16 tests); mp2 = 205.17 sec*proc (13 tests); nbody = 52.21 sec*proc (2 tests); numpy = 0.63 sec*proc (1 test); ocepa = 324.78 sec*proc (6 tests); omp = 326.64 sec*proc (18 tests); opt = 769.80 sec*proc (21 tests); prop = 1.60 sec*proc (1 test); properties = 84.77 sec*proc (10 tests); psi = 20501.24 sec*proc (400 tests); psi4numpy = 13.93 sec*proc (6 tests); psimrcc = 70.67 sec*proc (8 tests); python = 880.26 sec*proc (10 tests); pywrap = 1339.53 sec*proc (12 tests); quicktests = 2290.03 sec*proc (137 tests); rasci = 37.96 sec*proc (3 tests); sapt = 1420.73 sec*proc (20 tests); scf = 5859.53 sec*proc (51 tests); shorttests = 39.46 sec*proc (4 t,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-402413637:38620,test,test,38620,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-402413637,1,['test'],['test']
Testability,); cepa = 116.08 sec*proc (7 tests); ci = 68.29 sec*proc (8 tests); cisd = 82.46 sec*proc (7 tests); cookbook = 107.12 sec*proc (1 test); cubeprop = 17.29 sec*proc (2 tests); dcft = 1551.98 sec*proc (13 tests); df = 720.18 sec*proc (38 tests); dfccd = 2.40 sec*proc (1 test); dfccd-grad = 6.11 sec*proc (1 test); dfccdl = 2.42 sec*proc (1 test); dfccsd = 3.17 sec*proc (1 test); dfccsd-grad = 22.59 sec*proc (1 test); dfccsd-t-grad = 19.43 sec*proc (1 test); dfccsdat = 13.82 sec*proc (1 test); dfccsdl = 3.14 sec*proc (1 test); dfccsdt = 3.87 sec*proc (1 test); dfep2 = 5.30 sec*proc (2 tests); dfmp2 = 89.76 sec*proc (11 tests); dfomp2 = 275.42 sec*proc (7 tests); dfomp2.5 = 77.71 sec*proc (4 tests); dfomp3 = 93.16 sec*proc (4 tests); dfscf = 28.72 sec*proc (1 test); dft = 5528.80 sec*proc (26 tests); docs = 1.34 sec*proc (2 tests); ecp = 37.52 sec*proc (2 tests); fci = 6.48 sec*proc (2 tests); fcidump = 3.69 sec*proc (1 test); findif = 602.21 sec*proc (5 tests); fnocc = 58.18 sec*proc (4 tests); freq = 856.94 sec*proc (6 tests); gradient = 547.45 sec*proc (16 tests); json = 14.48 sec*proc (8 tests); longtests = 835.25 sec*proc (5 tests); mcscf = 3.12 sec*proc (3 tests); minitests = 31.52 sec*proc (3 tests); mints = 35.52 sec*proc (14 tests); misc = 272.90 sec*proc (16 tests); mp2 = 205.17 sec*proc (13 tests); nbody = 52.21 sec*proc (2 tests); numpy = 0.63 sec*proc (1 test); ocepa = 324.78 sec*proc (6 tests); omp = 326.64 sec*proc (18 tests); opt = 769.80 sec*proc (21 tests); prop = 1.60 sec*proc (1 test); properties = 84.77 sec*proc (10 tests); psi = 20501.24 sec*proc (400 tests); psi4numpy = 13.93 sec*proc (6 tests); psimrcc = 70.67 sec*proc (8 tests); python = 880.26 sec*proc (10 tests); pywrap = 1339.53 sec*proc (12 tests); quicktests = 2290.03 sec*proc (137 tests); rasci = 37.96 sec*proc (3 tests); sapt = 1420.73 sec*proc (20 tests); scf = 5859.53 sec*proc (51 tests); shorttests = 39.46 sec*proc (4 tests); smoketests = 89.98 sec*proc (11 tests); stability = 5.90 sec*,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-402413637:38689,test,tests,38689,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-402413637,1,['test'],['tests']
Testability,); cepa = 34.90 sec*proc (7 tests); ci = 86.89 sec*proc (8 tests); cisd = 126.11 sec*proc (7 tests); cookbook = 21.11 sec*proc (1 test); cubeprop = 19.47 sec*proc (2 tests); dcft = 1171.02 sec*proc (13 tests); df = 616.05 sec*proc (38 tests); dfccd = 1.95 sec*proc (1 test); dfccd-grad = 2.71 sec*proc (1 test); dfccdl = 1.29 sec*proc (1 test); dfccsd = 2.55 sec*proc (1 test); dfccsd-grad = 11.89 sec*proc (1 test); dfccsd-t-grad = 8.25 sec*proc (1 test); dfccsdat = 2.98 sec*proc (1 test); dfccsdl = 2.18 sec*proc (1 test); dfccsdt = 2.02 sec*proc (1 test); dfep2 = 5.39 sec*proc (2 tests); dfmp2 = 110.02 sec*proc (11 tests); dfomp2 = 215.16 sec*proc (7 tests); dfomp2.5 = 38.76 sec*proc (4 tests); dfomp3 = 28.71 sec*proc (4 tests); dfscf = 142.35 sec*proc (1 test); dft = 1320.66 sec*proc (27 tests); docs = 1.09 sec*proc (2 tests); ecp = 34.24 sec*proc (2 tests); fci = 10.36 sec*proc (2 tests); fcidump = 2.17 sec*proc (1 test); findif = 781.94 sec*proc (5 tests); fnocc = 32.06 sec*proc (4 tests); freq = 752.88 sec*proc (6 tests); gradient = 320.64 sec*proc (16 tests); json = 11.21 sec*proc (8 tests); longtests = 3454.42 sec*proc (5 tests); mcscf = 2.64 sec*proc (3 tests); minitests = 55.53 sec*proc (4 tests); mints = 79.80 sec*proc (14 tests); misc = 406.89 sec*proc (16 tests); mp2 = 509.73 sec*proc (13 tests); nbody = 37.02 sec*proc (2 tests); numpy = 0.67 sec*proc (1 test); ocepa = 127.43 sec*proc (6 tests); omp = 159.77 sec*proc (18 tests); opt = 1222.19 sec*proc (21 tests); plug = 6.43 sec*proc (7 tests); prop = 2.00 sec*proc (1 test); properties = 113.43 sec*proc (10 tests); psi = 18261.00 sec*proc (410 tests); psi4numpy = 9.90 sec*proc (6 tests); psimrcc = 98.46 sec*proc (8 tests); python = 791.98 sec*proc (10 tests); pywrap = 929.97 sec*proc (12 tests); quicktests = 1252.38 sec*proc (140 tests); rasci = 37.54 sec*proc (3 tests); sapt = 6019.06 sec*proc (21 tests); scf = 1609.21 sec*proc (52 tests); shorttests = 53.46 sec*proc (4 tests); smoketests = 87.44 sec*proc ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1075#issuecomment-409598225:39618,test,tests,39618,https://psicode.org,https://github.com/psi4/psi4/pull/1075#issuecomment-409598225,1,['test'],['tests']
Testability,"); chemps2 = 0.06 sec*proc (1 test); df = 0.06 sec*proc (1 test); dfmp2 = 0.06 sec*proc (1 test); fcidump = 0.06 sec*proc (1 test); json = 4.46 sec*proc (1 test); properties = 0.06 sec*proc (1 test); psi = 17.03 sec*proc (12 tests); psi4numpy = 9.97 sec*proc (2 tests); python = 1.99 sec*proc (1 test); quicktests = 17.03 sec*proc (12 tests); sapt = 0.06 sec*proc (1 test); scf = 0.06 sec*proc (1 test); smoketests = 17.03 sec*proc (12 tests); tutorial = 0.05 sec*proc (1 test). Total Test time (real) = 17.19 sec. The following tests FAILED:; 	 7 - casscf-sp (Failed); 	 22 - cc1 (Failed); 	132 - dfmp2-1 (Failed); 	196 - fcidump (Failed); 	330 - sapt1 (Failed); 	357 - scf-property (Failed); 	372 - tu1-h2o-energy (Failed); 	424 - chemps2-scf-n2 (Failed); Errors while running CTest; ```; The casscf-sp error is; ```; 7/428 Test: casscf-sp; Command: ""/usr/bin/python3.12"" ""/builddir/build/BUILD/psi4-1.3.2/tests/runtest.py"" ""/builddir/build/BUILD/psi4-1.3.2/tests/casscf-sp/input.dat"" ""/builddir/build/BUILD/psi4-1.3.2/redhat-linux; -build/testresults.log"" ""false"" ""/builddir/build/BUILD/psi4-1.3.2"" ""false"" ""/builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/tests/casscf-sp/output.dat"" ""/builddir/build/BUILD/psi4-1.3.2/; redhat-linux-build/stage/bin/psi4"" ""/builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/stage/share/psi4"" ""/builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/stage/lib64/python3.12/site-pac; kages""; Directory: /builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/tests/casscf-sp; ""casscf-sp"" start time: Aug 14 00:32 UTC; Output:; ----------------------------------------------------------; Command ['/builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/stage/bin/psi4', '/builddir/build/BUILD/psi4-1.3.2/tests/casscf-sp/input.dat', '/builddir/build/BUILD/psi4-1.3.2/redhat-linux-bu; ild/tests/casscf-sp/output.dat', '-l', '/builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/stage/share/psi4'] execution failed: Exec format error; <end of output>; Test time = 0.21 sec; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3020#issuecomment-1676514680:2479,test,testresults,2479,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1676514680,7,"['Test', 'log', 'test']","['Test', 'log', 'testresults', 'tests']"
Testability,); cisd = 6.82 sec*proc (1 test); cubeprop = 28.89 sec*proc (2 tests); d2ints = 58.89 sec*proc (7 tests); dct = 22.51 sec*proc (3 tests); df = 324.56 sec*proc (15 tests); dfccd = 5.11 sec*proc (1 test); dfccsd = 7.31 sec*proc (1 test); dfccsd-grad = 14.46 sec*proc (1 test); dfccsd-t-grad = 13.06 sec*proc (1 test); dfccsdl = 7.10 sec*proc (1 test); dfep2 = 10.99 sec*proc (2 tests); dfmp2 = 198.00 sec*proc (6 tests); dfomp2 = 6.63 sec*proc (1 test); dfomp3 = 66.77 sec*proc (2 tests); dft = 110.67 sec*proc (5 tests); dftd3 = 50.87 sec*proc (1 test); dftd4 = 138.41 sec*proc (2 tests); direct-scf = 4.26 sec*proc (1 test); eom = 26.13 sec*proc (2 tests); extern = 145.89 sec*proc (6 tests); fcidump = 3.94 sec*proc (1 test); findif = 217.30 sec*proc (11 tests); fnocc = 214.81 sec*proc (4 tests); freq = 119.90 sec*proc (9 tests); fsapt = 680.95 sec*proc (7 tests); gradient = 7.40 sec*proc (2 tests); json = 6.72 sec*proc (2 tests); mcscf = 2.04 sec*proc (1 test); minitests = 10.99 sec*proc (2 tests); mints = 14.50 sec*proc (6 tests); misc = 48.60 sec*proc (8 tests); mp2 = 11.54 sec*proc (3 tests); nbody = 140.71 sec*proc (2 tests); noc1 = 1576.77 sec*proc (45 tests); numpy = 1.88 sec*proc (1 test); olccd = 11.77 sec*proc (2 tests); omp = 19.01 sec*proc (4 tests); opt = 18.56 sec*proc (3 tests); properties = 234.60 sec*proc (11 tests); psi = 7147.73 sec*proc (184 tests); psi4numpy = 11.43 sec*proc (4 tests); psimrcc = 19.16 sec*proc (5 tests); python = 164.19 sec*proc (10 tests); pywrap = 102.12 sec*proc (5 tests); quicktests = 7213.94 sec*proc (185 tests); sapt = 2255.37 sec*proc (14 tests); scf = 2018.25 sec*proc (36 tests); smoketests = 1345.56 sec*proc (16 tests); stability = 14.22 sec*proc (3 tests); tdscf = 352.79 sec*proc (2 tests); tutorial = 24.08 sec*proc (4 tests); uhf = 3.31 sec*proc (1 test); x2c = 24.82 sec*proc (4 tests). Total Test time (real) = 7214.27 sec. The following tests FAILED:; 192 - dft-vv10 (Failed); 197 - dft-dens-cut (Failed); 210 - fsapt-terms (Fa,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3223#issuecomment-2373056930:18826,test,tests,18826,https://psicode.org,https://github.com/psi4/psi4/issues/3223#issuecomment-2373056930,1,['test'],['tests']
Testability,* CMake; * license (convenient `sed` commands at psi4/psi4#690); * test case and/or plugin,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/692:67,test,test,67,https://psicode.org,https://github.com/psi4/psi4/issues/692,1,['test'],['test']
Testability,"* Fixed mp2-module failure. Changed the symmetry reset to only occur if the user provided a default symmetry. My changes overrode Bozkaya's DF code running computations in C1, and the computational symmetry change resulted in BH3 landing on different UHF solutions.; * Fixed pywrap-all failure. Per discussion in Slack, findif now saves and resets the core variables from the reference, after all displacements are finished.; * Addressed concerns of @andysim. I now set DOCC explicitly for my test case, to show compatibility with my symmetry-breaking findif solution.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1424#issuecomment-447413964:493,test,test,493,https://psicode.org,https://github.com/psi4/psi4/pull/1424#issuecomment-447413964,1,['test'],['test']
Testability,"* I started the renaming, so you'll need master qcel and possibly this qcng https://github.com/MolSSI/QCEngine/pull/172; * pretty much at same tests failing as before rebase. charge embedding for nbody needs refixing; * logging is in place -- always to `file.log` that grows.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-553075502:143,test,tests,143,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-553075502,3,"['log', 'test']","['log', 'logging', 'tests']"
Testability,"* I suspect that what Peter means by separate tests and docs is to issue two comments to the PR? I'm worried ppl will read the last and overlook the former. ; * Sounds like I need to make clearer that the only choice for the samples/ commit is now or later. There are no valid reasons to reject, but it you're going to be editing tests a lot, you might not want a dozen automated commits or to have your remote tampered with while local is in a vulnerable state.; * I'm with keeping the git commands as I suspect many ppl are nervous about `--rebase` and `--force` and need that reassurance. I do wish I could convey that you're done with local, no need for either path. Thanks for the comments! I'll do another round of commit-message tweaking. Eventually we can add linters by the same mechanism, so I think it pays to get clear communication and git sync habits established here.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2364#issuecomment-982038711:46,test,tests,46,https://psicode.org,https://github.com/psi4/psi4/pull/2364#issuecomment-982038711,2,['test'],['tests']
Testability,"* Psi4 `v1.2rc3.dev1` compile pure GCC 7.2.0 w/`libgomp` for threading.; * OpenBLAS `v0.2.20-453-gf5959f2` compile pure GCC 5.2 w/`libgomp` for threading (except for line 5, which is conda 0.2.20, 9ac9557`).; * No Intel compilers or `libiomp5` available or in `ldd -v`. NumPy is still the conda nomkl NumPy, but its links to openblas are unresolved, so tests are either not hitting that submodule or it's using the below-described libopenblas loaded by psi. | openblas compilation | psiapi speedup `-n4` | psithon speedup `-n4` | ion pass `-n1` | ion pass `-n4` |; | :--- | ---: | ---: | :---: | :---: |; | `USE_THREAD=0 USE_OPENMP=0` | 1.00 | 1.54 | yes | yes |; | `USE_THREAD=1 USE_OPENMP=0` | 0.90 | warn + 0.85 | no | no |; | `USE_THREAD=1 USE_OPENMP=0 USE_SIMPLE_THREADED_LEVEL3=1` | 1.20 | warn + 1.40 | no | no |; | `USE_THREAD=1 USE_OPENMP=1` | 1.04 | 2.27 | yes | no |; | CONDA `USE_THREAD=1 USE_OPENMP=0` | ? | warn + ?| no | no |; | EDIT: `USE_THREAD=1 USE_OPENMP=1 NUM_PARALLEL=4` | 1.00 | 1.77 | yes | no |. * ""warn"": oodles of ""OpenBLAS Warning : Detect OpenMP Loop and this application may hang. Please rebuild the library with USE_OPENMP=1 option."". * full OpenBLAS compile command for row 4; ```; make CC=gcc FC=gfortran DYNAMIC_ARCH=1 BINARY=64 NO_LAPACK=0 NO_AFFINITY=1 USE_THREAD=1 USE_OPENMP=1 NUM_THREADS=128 CFLAGS=""-march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -O2 -pipe"" FFLAGS=""-fopenmp -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -O2 -pipe""; ```. Unless someone sees a problem with my build configs, it's not looking too encouraging, except for wholly unthreaded. Troubling also that this contradicts @hokru's findings of good behavior for `USE_OPENMP=1` from source build.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1009#issuecomment-390869229:353,test,tests,353,https://psicode.org,https://github.com/psi4/psi4/issues/1009#issuecomment-390869229,1,['test'],['tests']
Testability,"* Yes, eventually will support `linux-64`, `osx-64`, `osx-arm64`, `win-64` arch. staged-recipes won't have osx-arm64, though.; * Still TBD if Windows psi4 packages will include Fortran addons like dkh, gdma, pcmsolver.; * All arch will be explicitly linked to MKL (that is, `libblas=*=*mkl`). dependencies that themselves need blas/lapack are getting linked generically so runtime selection is an option, but psi4 itself is getting fixed to MKL. I'm open to someday linking psi4 generically, but I think other distributions need to be tested and any performance and oversubscription issues addressed first.; * yes, as Matt says, you have to dig around on Azure, find ""artifacts"", download, and then can install locally (or upload to a separate anaconda.org acct).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2300#issuecomment-1483880346:535,test,tested,535,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-1483880346,1,['test'],['tested']
Testability,"* You can ignore what I said about py27, too. v1.2.1 will be good with 2.7, 3.5, 3.6 (and probably 3.7, though not tested). But boost is definitely not used c. v1.1. * I'm trying to remember the AM conventions. I think it's that quicktests will pass with AM5, while full tests requires AM6. Those ""rules"" may have broken down, so it's possible that some of those tests will heal with higher AM libint. * If you can `cat Testing/Temporary/LastTest*log` after `ctest`, that may be helpful for diagnosis.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1302#issuecomment-451522000:115,test,tested,115,https://psicode.org,https://github.com/psi4/psi4/issues/1302#issuecomment-451522000,5,"['Test', 'log', 'test']","['Testing', 'log', 'tested', 'tests']"
Testability,"* add to the branch list https://github.com/psi4/psi4/blob/master/.travis.yml#L179; * bump copyright; * tests/runtest.py; * README.md; * https://github.com/psi4/psi4/blob/fbb2ff444490bf6b43cb6e027637d8fd857adcee/doc/sphinxman/source/conf.py.in#L118; * tests/psitest.pl. * (not done) main README updates. * tl;dr for version bump. ```; # be on clean master up-to-date with upstream in both commits and tags; # * mind which version strings get ""v"" and which don't; # * if not fork, replace ""upstream"" with ""origin"". >>> vi psi4/metadata.py; >>> git diff; diff --git a/psi4/metadata.py b/psi4/metadata.py; ...; -__version__ = '1.3rc1'; -__version_long = '1.3rc1+5a7522a'; -__version_upcoming_annotated_v_tag = '1.3rc2'; +__version__ = '1.3rc2'; +__version_long = '1.3rc2+zzzzzzz'; +__version_upcoming_annotated_v_tag = '1.3rc3'. >>> git add psi4/metadata.py; >>> git commit -m ""v1.3rc2""; [master bc8d7f5] v1.3rc2. >>> git log --oneline | head -1; bc8d7f5 v1.3rc2; >>> git tag -a v1.3rc2 bc8d7f5 -m ""v1.3rc2"". >>> vi psi4/metadata.py ; >>> git diff; diff --git a/psi4/metadata.py b/psi4/metadata.py; ...; -__version_long = '1.3rc2+zzzzzzz'; +__version_long = '1.3rc2+bc8d7f5'. >>> git add psi4/metadata.py; >>> git commit -m ""Records tag for v1.3rc2""; [master 16dbd3e] Records tag for v1.3rc2. # goto GH:psi4/psi4 > Settings > Branches > master > Edit; # https://github.com/psi4/psi4/settings/branch_protection_rules/424295; # uncheck ""Include administrators"" and Save changes. >>> git push upstream master; >>> git push upstream v1.3rc2. # re-engage ""Include administrators"" protections. ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1496#issuecomment-463867007:104,test,tests,104,https://psicode.org,https://github.com/psi4/psi4/issues/1496#issuecomment-463867007,3,"['log', 'test']","['log', 'tests']"
Testability,"* https://github.com/psi4/psi4/blob/master/samples/dft-b2plyp/test.in#L48-L51; * raw energies for DSD-PBEP86. ```; dhdftusemefiles/S22-DSDPBEP86-nfc-CP-adz.dsdpbep86.usemeraw:S22-1 -112.90909305 -56.45238118 -56.45238118 ; dhdftusemefiles/S22-DSDPBEP86-nfc-adz.dsdpbep86.usemeraw:S22-1 -112.90909305 -56.45198932 -56.45198932 ; ```. * a variety from the dhdft paper. only dsdpbep86 actually a scs-dh. there's wiggle room on the run-time conditions, so see how useful these are at first pass. ```; #S22-1, all adz, nothing fc (that is, b2plyp, dsdpbep86, pbe02, wb97x-2 all non-frozen-core). ans = {}; ans['cp'] = {}; ans['uncp'] = {}. ans['uncp']['B2PLYP/aug-cc-pvdz'] = -2.8486; ans['uncp']['B2PLYP-D3/aug-cc-pvdz'] = -3.3262; ans['uncp']['B3LYP/aug-cc-pvdz'] = -2.3856; ans['uncp']['B3LYP-D3/aug-cc-pvdz'] = -3.3022; ans['uncp']['B97-D3/aug-cc-pvdz'] = -3.1218; ans['uncp']['LCVV10/aug-cc-pvdz'] = -3.2298; ans['uncp']['M052X/aug-cc-pvdz'] = -3.3324; ans['uncp']['M062X/aug-cc-pvdz'] = -3.4611; ans['uncp']['M08HX/aug-cc-pvdz'] = -3.7030; ans['uncp']['M08SO/aug-cc-pvdz'] = -3.4907; ans['uncp']['M11/aug-cc-pvdz'] = -3.2400; ans['uncp']['M11L/aug-cc-pvdz'] = -2.5651; ans['uncp']['PBE/aug-cc-pvdz'] = -3.0191; ans['uncp']['PBE0/aug-cc-pvdz'] = -2.9546; ans['uncp']['PBE02/aug-cc-pvdz'] = -3.2897; ans['uncp']['PBE0-D3/aug-cc-pvdz'] = -3.5428; ans['uncp']['PBE-D3/aug-cc-pvdz'] = -3.5915; ans['uncp']['VV10/aug-cc-pvdz'] = -3.6379; ans['uncp']['DLDF+D/aug-cc-pvdz'] = -3.1606; ans['uncp']['WB97X-2/aug-cc-pvdz'] = -3.6211; ans['uncp']['WB97X-D/aug-cc-pvdz'] = -3.2200; ans['uncp']['WB97X-V/aug-cc-pvdz'] = -3.2482; ans['uncp']['DSDPBEP86-D2OPT/aug-cc-pvdz'] = -3.6113; ans['uncp']['DSDPBEP86/aug-cc-pvdz'] = -3.2076; ans['uncp']['DSDPBEP86-D2 /aug-cc-pvdz'] = -3.5902; ans['uncp']['DSDPBEP86-D3BJ /aug-cc-pvdz'] = -3.4531; ; ans['cp' ]['B2PLYP/aug-cc-pvdz'] = -2.4331; ans['cp' ]['B2PLYP-D3/aug-cc-pvdz'] = -2.9106; ans['cp' ]['B3LYP/aug-cc-pvdz'] = -2.1021; ans['cp' ]['B3LYP-D3/aug-cc-pvdz'] = -3.0",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/39#issuecomment-272725478:62,test,test,62,https://psicode.org,https://github.com/psi4/psi4/issues/39#issuecomment-272725478,1,['test'],['test']
Testability,"* ooh, first backport of the post-beta era. I'll get on that.; * speaking of backports, someone at SciPy demo'd a bot that Jupy uses where you just petition it in the PR https://github.com/MeeseeksBox/MeeseeksDev#meeseeksdev-backport-to-branch; * not sure what you mean about circumstances may change. would what tests/cc44 does to set mem to 2MB work?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1096#issuecomment-405413785:313,test,tests,313,https://psicode.org,https://github.com/psi4/psi4/pull/1096#issuecomment-405413785,1,['test'],['tests']
Testability,"* these four mols https://github.com/MolSSI/QCEngine/blob/master/qcengine/programs/tests/standard_suite_ref.py#L12-L40; * rhf for hf & h2o. uhf/rohf for bh3p & nh2.; * cc-pvdz for hf & bh2p. aug-cc-pvdz & cfour-qz2p for h2o & nh2.; * conv, df, cd, though conv only is a fine start; * all-electron (ae) and frozen-core (fc); * lccd, olccd, lccsd all appreciated, though maybe your code doesn't cover the last; * energies and energy components of first priority, but should you have dipoles, gradients, etc., glad to collect them now. You don't have to do any of this -- I can take values from existing psi modules -- but an independent reference implementation is not to be sniffed at, and you can ensure psi will fail if it doesn't match you from here out. * either send me numbers (non-redundant; that is, corl, not corl and tot) or PR directly to qcengine (just that one standard_suite_ref.py file); * I'm only testing to 1.e-6 but refs generated with https://github.com/psi4/psi4/blob/master/tests/pytests/standard_suite_runner.py#L60-L63. I'll merge this PR",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1909#issuecomment-635391683:83,test,tests,83,https://psicode.org,https://github.com/psi4/psi4/pull/1909#issuecomment-635391683,3,['test'],"['testing', 'tests']"
Testability,"**Failed 0.05 sec; Start 402: psi4numpy-rhf; 8/12 Test #402: psi4numpy-rhf .................... Passed 4.50 sec; Start 404: psi4numpy-rhf-hessian; 9/12 Test #404: psi4numpy-rhf-hessian ............ Passed 5.47 sec; Start 409: python-energy; 10/12 Test #409: python-energy .................... Passed 1.99 sec; Start 422: json-schema-1-gradient; 11/12 Test #422: json-schema-1-gradient ........... Passed 4.46 sec; Start 424: chemps2-scf-n2; 12/12 Test #424: chemps2-scf-n2 ...................***Failed 0.06 sec. 33% tests passed, 8 tests failed out of 12. Label Time Summary:; addon = 0.06 sec*proc (1 test); cart = 0.17 sec*proc (3 tests); casscf = 0.21 sec*proc (1 test); cc = 0.06 sec*proc (1 test); chemps2 = 0.06 sec*proc (1 test); df = 0.06 sec*proc (1 test); dfmp2 = 0.06 sec*proc (1 test); fcidump = 0.06 sec*proc (1 test); json = 4.46 sec*proc (1 test); properties = 0.06 sec*proc (1 test); psi = 17.03 sec*proc (12 tests); psi4numpy = 9.97 sec*proc (2 tests); python = 1.99 sec*proc (1 test); quicktests = 17.03 sec*proc (12 tests); sapt = 0.06 sec*proc (1 test); scf = 0.06 sec*proc (1 test); smoketests = 17.03 sec*proc (12 tests); tutorial = 0.05 sec*proc (1 test). Total Test time (real) = 17.19 sec. The following tests FAILED:; 	 7 - casscf-sp (Failed); 	 22 - cc1 (Failed); 	132 - dfmp2-1 (Failed); 	196 - fcidump (Failed); 	330 - sapt1 (Failed); 	357 - scf-property (Failed); 	372 - tu1-h2o-energy (Failed); 	424 - chemps2-scf-n2 (Failed); Errors while running CTest; ```; The casscf-sp error is; ```; 7/428 Test: casscf-sp; Command: ""/usr/bin/python3.12"" ""/builddir/build/BUILD/psi4-1.3.2/tests/runtest.py"" ""/builddir/build/BUILD/psi4-1.3.2/tests/casscf-sp/input.dat"" ""/builddir/build/BUILD/psi4-1.3.2/redhat-linux; -build/testresults.log"" ""false"" ""/builddir/build/BUILD/psi4-1.3.2"" ""false"" ""/builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/tests/casscf-sp/output.dat"" ""/builddir/build/BUILD/psi4-1.3.2/; redhat-linux-build/stage/bin/psi4"" ""/builddir/build/BUILD/psi4-1.3.2/redh",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3020#issuecomment-1676514680:1733,test,test,1733,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1676514680,1,['test'],['test']
Testability,**Failed 18.45 sec; Start 197: dft-dens-cut; 55/185 Test #197: dft-dens-cut .....................***Failed 4.64 sec; Start 203: explicit-am-basis; 56/185 Test #203: explicit-am-basis ................ Passed 2.37 sec; Start 204: extern1; 57/185 Test #204: extern1 .......................... Passed 14.78 sec; Start 207: extern4; 58/185 Test #207: extern4 .......................... Passed 3.16 sec; Start 209: fsapt2; 59/185 Test #209: fsapt2 ........................... Passed 9.41 sec; Start 210: fsapt-terms; 60/185 Test #210: fsapt-terms ......................***Failed 15.99 sec; Start 212: fsapt-ext; 61/185 Test #212: fsapt-ext ........................ Passed 10.84 sec; Start 213: fsapt-ext-abc; 62/185 Test #213: fsapt-ext-abc ....................***Failed 28.87 sec; Start 214: fsapt-ext-abc2; 63/185 Test #214: fsapt-ext-abc2 ...................***Failed 55.36 sec; Start 215: fsapt-ext-abc-au; 64/185 Test #215: fsapt-ext-abc-au .................***Failed 32.87 sec; Start 221: fci-dipole; 65/185 Test #221: fci-dipole ....................... Passed 8.84 sec; Start 228: fcidump; 66/185 Test #228: fcidump .......................... Passed 3.94 sec; Start 235: freq-isotope2; 67/185 Test #235: freq-isotope2 .................... Passed 6.24 sec; Start 237: fnocc2; 68/185 Test #237: fnocc2 ........................... Passed 17.66 sec; Start 239: fnocc4; 69/185 Test #239: fnocc4 ........................... Passed 136.23 sec; Start 240: fnocc5; 70/185 Test #240: fnocc5 ........................... Passed 53.87 sec; Start 241: fnocc6; 71/185 Test #241: fnocc6 ........................... Passed 7.06 sec; Start 248: gibbs; 72/185 Test #248: gibbs ............................ Passed 14.27 sec; Start 251: matrix1; 73/185 Test #251: matrix1 .......................... Passed 1.85 sec; Start 252: matrix2; 74/185 Test #252: matrix2 .......................... Passed 1.81 sec; Start 253: mbis-1; 75/185 Test #253: mbis-1 ........................... Passed 10.77 sec; Start 258: mbis-6; 76/185,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3223#issuecomment-2373056930:6043,Test,Test,6043,https://psicode.org,https://github.com/psi4/psi4/issues/3223#issuecomment-2373056930,1,['Test'],['Test']
Testability,**Update**: Tests now pass in Azure Linux builds including a few quicktests for adcc. I'll proceed to add documentation when I get round to it (I'm a bit busy at the moment).,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1744#issuecomment-555941172:12,Test,Tests,12,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-555941172,1,['Test'],['Tests']
Testability,"**user summary**:; This is not a bug that is affecting any DFT calculations currently run with PSI4.; The bug is found in unused code. ---. The radial grid is entirely build with https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/cubature.cc#L2433. The function supposed to call `build_becke` `build_treutler` is never called, instead a dummy function is called that only populates the `RadialGrid` class, which is never used in `cubature.cc` anyway (looks like it is nowhere used). . On the plus side, the bug fixed with this PR is never encountered. The downside is that the TREUTLER scheme is not entirely correct because at least the eta mapping parameters (`TreutlerEta`) are missing. If `build_treutler` is correct or not, I cannot 100% say. In a quick & dirty fashion I enforced it. _Without_ eta (set to 1.0) all DFT `ctests` pass. That's good!; I added the missing eta parameters with updated BS radii a while ago, but didn't notice that the etas changed nothing. I thought the effect was just too small. But there is a very minor one. Including the etas has 11 of 37 tests fail. (Did not run the pytests). I will refactor `cubature.cc` ..somehow.. in the near future. ---. I will approve & merge tomorrow.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2044#issuecomment-745602400:1089,test,tests,1089,https://psicode.org,https://github.com/psi4/psi4/pull/2044#issuecomment-745602400,1,['test'],['tests']
Testability,"*OpenMP* issue!. It seems will be no better support of *OpenMP* in *MSVC* soon. So I was looking for an alternative solution as it is increasing code complexity and will add too much burden to keep *Psi4* compatible with *OpenMP* 2.0. One options is `clang-cl`, *MSVC* compatibility layer of *LLVM* (http://clang.llvm.org/docs/MSVCCompatibility.html), which supports *OpenMP* 4.0. After some hacking of *CMake* and *Psi4*, I managed to compile and pass the tests (https://ci.appveyor.com/project/raimis/psi4/build/1.0.601). So I will make new PRs to adapt `clang-cl` and close #1200, #1224, #1225, #1226, #1228, #1229, and #1230. Also, #1231 could be reverted.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-423183802:457,test,tests,457,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-423183802,1,['test'],['tests']
Testability,*Psi4* 1.3.2 packages for *Windows*!. Installation:; ```; conda install -c raimis -c psi4 -c conda-forge psi4=1.3.2; ```; The 1.3.2 version for *Windows* is actually: https://github.com/psi4/psi4/tree/v1.3.2 + #1648 = https://github.com/raimis/psi4/commit/82e852b7e61f9813a665e1f6f35203d01e5fb1b9. Build logs:; - *Python* 3.6: https://dev.azure.com/raimisg/psi4/_build/results?buildId=737; - *Python* 3.7: https://dev.azure.com/raimisg/psi4/_build/results?buildId=738,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-494354023:304,log,logs,304,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-494354023,1,['log'],['logs']
Testability,*Psi4* debugging is almost finished on *Windows*!. The remaining tasks:; - [x] Streamline testing. A specific *Azure* pipeline can be triggered to run all the tests before release and after significant changes. -- #1527 ; - [x] Production level builds. A specific *Azure* pipeline can be triggered to build optimized binaries with a big `MAX_AM_ERI`. -- #1539 ; - [x] Conda package. A specific *Azure* pipeline can be triggered to create a conda package and publish it on *Azure* artefacts. -- #1560,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-461430448:90,test,testing,90,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-461430448,2,['test'],"['testing', 'tests']"
Testability,*proc (1 test); cubeprop = 20.11 sec*proc (2 tests); dcft = 3750.01 sec*proc (13 tests); df = 2431.94 sec*proc (38 tests); dfccd = 8.06 sec*proc (1 test); dfccd-grad = 19.49 sec*proc (1 test); dfccdl = 3.04 sec*proc (1 test); dfccsd = 12.67 sec*proc (1 test); dfccsd-grad = 39.99 sec*proc (1 test); dfccsd-t-grad = 42.35 sec*proc (1 test); dfccsdat = 22.07 sec*proc (1 test); dfccsdl = 9.05 sec*proc (1 test); dfccsdt = 17.08 sec*proc (1 test); dfep2 = 5.59 sec*proc (2 tests); dfmp2 = 147.21 sec*proc (11 tests); dfomp2 = 1172.65 sec*proc (7 tests); dfomp2.5 = 283.65 sec*proc (4 tests); dfomp3 = 415.41 sec*proc (4 tests); dfscf = 140.29 sec*proc (1 test); dft = 1425.69 sec*proc (27 tests); docs = 1.11 sec*proc (2 tests); ecp = 48.02 sec*proc (2 tests); fci = 13.69 sec*proc (2 tests); fcidump = 9.92 sec*proc (1 test); findif = 1028.69 sec*proc (5 tests); fnocc = 127.56 sec*proc (4 tests); freq = 948.13 sec*proc (6 tests); gradient = 1779.53 sec*proc (16 tests); json = 17.46 sec*proc (8 tests); longtests = 3834.48 sec*proc (5 tests); mcscf = 3.79 sec*proc (3 tests); minitests = 61.64 sec*proc (4 tests); mints = 85.73 sec*proc (14 tests); misc = 534.44 sec*proc (16 tests); mp2 = 586.32 sec*proc (13 tests); nbody = 77.27 sec*proc (2 tests); numpy = 0.70 sec*proc (1 test); ocepa = 728.64 sec*proc (6 tests); omp = 699.16 sec*proc (18 tests); opt = 1654.95 sec*proc (21 tests); plug = 11.11 sec*proc (7 tests); prop = 3.65 sec*proc (1 test); properties = 169.41 sec*proc (10 tests); psi = 39909.99 sec*proc (410 tests); psi4numpy = 16.33 sec*proc (6 tests); psimrcc = 126.24 sec*proc (8 tests); python = 977.76 sec*proc (10 tests); pywrap = 3122.72 sec*proc (12 tests); quicktests = 4740.64 sec*proc (140 tests); rasci = 44.90 sec*proc (3 tests); sapt = 6442.30 sec*proc (21 tests); scf = 1930.04 sec*proc (52 tests); shorttests = 69.83 sec*proc (4 tests); smoketests = 272.56 sec*proc (11 tests); stability = 8.03 sec*proc (2 tests); tutorial = 291.85 sec*proc (6 tests); x2c = 71.28 sec*p,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1067#issuecomment-409148828:39862,test,tests,39862,https://psicode.org,https://github.com/psi4/psi4/pull/1067#issuecomment-409148828,1,['test'],['tests']
Testability,*proc (1 test); cubeprop = 22.22 sec*proc (3 tests); dcft = 5487.46 sec*proc (13 tests); df = 2798.80 sec*proc (38 tests); dfccd = 3.58 sec*proc (1 test); dfccd-grad = 19.08 sec*proc (1 test); dfccdl = 3.82 sec*proc (1 test); dfccsd = 9.09 sec*proc (1 test); dfccsd-grad = 37.30 sec*proc (1 test); dfccsd-t-grad = 69.23 sec*proc (1 test); dfccsdat = 40.48 sec*proc (1 test); dfccsdl = 16.34 sec*proc (1 test); dfccsdt = 13.79 sec*proc (1 test); dfep2 = 6.01 sec*proc (2 tests); dfmp2 = 180.70 sec*proc (11 tests); dfomp2 = 1691.18 sec*proc (7 tests); dfomp2.5 = 230.29 sec*proc (4 tests); dfomp3 = 245.73 sec*proc (4 tests); dfscf = 131.53 sec*proc (1 test); dft = 1423.44 sec*proc (27 tests); docs = 1.42 sec*proc (2 tests); ecp = 65.92 sec*proc (2 tests); fci = 13.01 sec*proc (2 tests); fcidump = 6.38 sec*proc (1 test); findif = 982.46 sec*proc (5 tests); fnocc = 160.78 sec*proc (4 tests); freq = 1352.76 sec*proc (6 tests); gradient = 2515.20 sec*proc (16 tests); json = 21.65 sec*proc (8 tests); longtests = 3280.68 sec*proc (5 tests); mcscf = 4.01 sec*proc (3 tests); minitests = 69.17 sec*proc (4 tests); mints = 90.89 sec*proc (14 tests); misc = 524.24 sec*proc (16 tests); mp2 = 563.20 sec*proc (13 tests); nbody = 86.98 sec*proc (2 tests); numpy = 0.85 sec*proc (1 test); ocepa = 972.17 sec*proc (6 tests); omp = 1024.50 sec*proc (18 tests); opt = 1458.70 sec*proc (21 tests); plug = 12.59 sec*proc (7 tests); prop = 2.69 sec*proc (1 test); properties = 153.77 sec*proc (10 tests); psi = 46786.50 sec*proc (412 tests); psi4numpy = 16.14 sec*proc (6 tests); psimrcc = 131.10 sec*proc (8 tests); python = 1427.05 sec*proc (10 tests); pywrap = 3207.07 sec*proc (12 tests); quicktests = 4242.64 sec*proc (140 tests); rasci = 43.49 sec*proc (3 tests); sapt = 5444.73 sec*proc (21 tests); scf = 1819.88 sec*proc (52 tests); shorttests = 61.18 sec*proc (4 tests); smoketests = 187.16 sec*proc (11 tests); stability = 6.01 sec*proc (2 tests); tutorial = 311.62 sec*proc (6 tests); x2c = 57.73 sec,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1237#issuecomment-425038275:40061,test,tests,40061,https://psicode.org,https://github.com/psi4/psi4/pull/1237#issuecomment-425038275,1,['test'],['tests']
Testability,*proc (1 test); dfccsd-grad = 22.59 sec*proc (1 test); dfccsd-t-grad = 19.43 sec*proc (1 test); dfccsdat = 13.82 sec*proc (1 test); dfccsdl = 3.14 sec*proc (1 test); dfccsdt = 3.87 sec*proc (1 test); dfep2 = 5.30 sec*proc (2 tests); dfmp2 = 89.76 sec*proc (11 tests); dfomp2 = 275.42 sec*proc (7 tests); dfomp2.5 = 77.71 sec*proc (4 tests); dfomp3 = 93.16 sec*proc (4 tests); dfscf = 28.72 sec*proc (1 test); dft = 5528.80 sec*proc (26 tests); docs = 1.34 sec*proc (2 tests); ecp = 37.52 sec*proc (2 tests); fci = 6.48 sec*proc (2 tests); fcidump = 3.69 sec*proc (1 test); findif = 602.21 sec*proc (5 tests); fnocc = 58.18 sec*proc (4 tests); freq = 856.94 sec*proc (6 tests); gradient = 547.45 sec*proc (16 tests); json = 14.48 sec*proc (8 tests); longtests = 835.25 sec*proc (5 tests); mcscf = 3.12 sec*proc (3 tests); minitests = 31.52 sec*proc (3 tests); mints = 35.52 sec*proc (14 tests); misc = 272.90 sec*proc (16 tests); mp2 = 205.17 sec*proc (13 tests); nbody = 52.21 sec*proc (2 tests); numpy = 0.63 sec*proc (1 test); ocepa = 324.78 sec*proc (6 tests); omp = 326.64 sec*proc (18 tests); opt = 769.80 sec*proc (21 tests); prop = 1.60 sec*proc (1 test); properties = 84.77 sec*proc (10 tests); psi = 20501.24 sec*proc (400 tests); psi4numpy = 13.93 sec*proc (6 tests); psimrcc = 70.67 sec*proc (8 tests); python = 880.26 sec*proc (10 tests); pywrap = 1339.53 sec*proc (12 tests); quicktests = 2290.03 sec*proc (137 tests); rasci = 37.96 sec*proc (3 tests); sapt = 1420.73 sec*proc (20 tests); scf = 5859.53 sec*proc (51 tests); shorttests = 39.46 sec*proc (4 tests); smoketests = 89.98 sec*proc (11 tests); stability = 5.90 sec*proc (2 tests); tutorial = 165.22 sec*proc (6 tests); x2c = 34.46 sec*proc (3 tests). Total Test time (real) = 3000.09 sec. The following tests FAILED:; 	360 - cubeprop-esp (Failed); 	371 - dft-bench-interaction (Timeout); 	373 - pywrap-align (Failed); 	374 - pywrap-align-chiral (Failed); 	401 - json-schema_0_properties (Failed); Errors while running CTest; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-402413637:39076,test,test,39076,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-402413637,22,"['Test', 'test']","['Test', 'test', 'tests']"
Testability,*proc (11 tests); cc = 15319.84 sec*proc (65 tests); cdomp2 = 143.48 sec*proc (2 tests); cepa = 226.30 sec*proc (7 tests); ci = 265.18 sec*proc (8 tests); cisd = 305.68 sec*proc (7 tests); cookbook = 499.71 sec*proc (1 test); cubeprop = 60.94 sec*proc (2 tests); dcft = 5483.73 sec*proc (13 tests); df = 3170.34 sec*proc (38 tests); dfccd = 23.41 sec*proc (1 test); dfccd-grad = 31.36 sec*proc (1 test); dfccdl = 23.35 sec*proc (1 test); dfccsd = 26.12 sec*proc (1 test); dfccsd-grad = 51.95 sec*proc (1 test); dfccsd-t-grad = 43.90 sec*proc (1 test); dfccsdat = 38.92 sec*proc (1 test); dfccsdl = 26.48 sec*proc (1 test); dfccsdt = 23.05 sec*proc (1 test); dfep2 = 48.44 sec*proc (2 tests); dfmp2 = 377.39 sec*proc (11 tests); dfomp2 = 1660.45 sec*proc (7 tests); dfomp2.5 = 249.73 sec*proc (4 tests); dfomp3 = 331.36 sec*proc (4 tests); dfscf = 157.81 sec*proc (1 test); dft = 1909.96 sec*proc (27 tests); docs = 45.29 sec*proc (2 tests); ecp = 88.68 sec*proc (2 tests); fci = 55.37 sec*proc (2 tests); fcidump = 23.91 sec*proc (1 test); findif = 1014.06 sec*proc (5 tests); fnocc = 213.01 sec*proc (4 tests); freq = 1356.97 sec*proc (6 tests); gradient = 2764.98 sec*proc (16 tests); json = 190.44 sec*proc (8 tests); longtests = 3661.11 sec*proc (5 tests); mcscf = 70.40 sec*proc (3 tests); minitests = 148.66 sec*proc (4 tests); mints = 394.57 sec*proc (14 tests); misc = 781.82 sec*proc (16 tests); mp2 = 790.20 sec*proc (13 tests); nbody = 109.77 sec*proc (2 tests); numpy = 22.55 sec*proc (1 test); ocepa = 1236.65 sec*proc (6 tests); omp = 1072.07 sec*proc (18 tests); opt = 1846.61 sec*proc (21 tests); plug = 163.15 sec*proc (7 tests); prop = 25.39 sec*proc (1 test); properties = 335.10 sec*proc (10 tests); psi = 53863.02 sec*proc (411 tests); psi4numpy = 147.20 sec*proc (6 tests); psimrcc = 297.65 sec*proc (8 tests); python = 1516.55 sec*proc (10 tests); pywrap = 5301.29 sec*proc (12 tests); quicktests = 7318.30 sec*proc (140 tests); rasci = 106.24 sec*proc (3 tests); sapt = 6390.1,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1227#issuecomment-421362141:39911,test,tests,39911,https://psicode.org,https://github.com/psi4/psi4/pull/1227#issuecomment-421362141,1,['test'],['tests']
Testability,*proc (123 tests); cas = 28.56 sec*proc (1 test); casscf = 215.89 sec*proc (11 tests); cbs = 5376.02 sec*proc (12 tests); cc = 17865.62 sec*proc (65 tests); cdomp2 = 102.86 sec*proc (2 tests); cepa = 362.38 sec*proc (7 tests); ci = 100.54 sec*proc (8 tests); cisd = 147.55 sec*proc (7 tests); cookbook = 443.85 sec*proc (1 test); cubeprop = 24.72 sec*proc (3 tests); dcft = 5201.52 sec*proc (13 tests); df = 3130.41 sec*proc (38 tests); dfccd = 7.27 sec*proc (1 test); dfccd-grad = 29.83 sec*proc (1 test); dfccdl = 4.85 sec*proc (1 test); dfccsd = 16.21 sec*proc (1 test); dfccsd-grad = 94.95 sec*proc (1 test); dfccsd-t-grad = 103.60 sec*proc (1 test); dfccsdat = 43.70 sec*proc (1 test); dfccsdl = 19.45 sec*proc (1 test); dfccsdt = 14.17 sec*proc (1 test); dfep2 = 6.02 sec*proc (2 tests); dfmp2 = 184.52 sec*proc (11 tests); dfomp2 = 1710.82 sec*proc (7 tests); dfomp2.5 = 342.31 sec*proc (4 tests); dfomp3 = 402.50 sec*proc (4 tests); dfscf = 31.82 sec*proc (1 test); dft = 751.03 sec*proc (27 tests); docs = 2.03 sec*proc (2 tests); ecp = 66.38 sec*proc (2 tests); fci = 12.84 sec*proc (2 tests); fcidump = 7.22 sec*proc (1 test); findif = 1626.84 sec*proc (5 tests); fnocc = 231.32 sec*proc (4 tests); freq = 1688.13 sec*proc (7 tests); gradient = 3618.28 sec*proc (21 tests); hessian = 405.24 sec*proc (1 test); json = 20.27 sec*proc (8 tests); longtests = 1495.12 sec*proc (5 tests); mcscf = 10.16 sec*proc (3 tests); minitests = 37.91 sec*proc (3 tests); mints = 45.42 sec*proc (14 tests); misc = 411.66 sec*proc (16 tests); mp2 = 346.75 sec*proc (13 tests); nbody = 982.55 sec*proc (8 tests); numpy = 1.09 sec*proc (1 test); ocepa = 1107.57 sec*proc (6 tests); omp = 1366.11 sec*proc (18 tests); opt = 1412.96 sec*proc (23 tests); prop = 4.22 sec*proc (1 test); properties = 124.70 sec*proc (10 tests); psi = 48757.61 sec*proc (414 tests); psi4numpy = 23.92 sec*proc (6 tests); psimrcc = 104.33 sec*proc (8 tests); python = 1302.79 sec*proc (10 tests); pywrap = 3935.72 sec*proc (12 tests),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1384#issuecomment-443227424:40002,test,tests,40002,https://psicode.org,https://github.com/psi4/psi4/pull/1384#issuecomment-443227424,1,['test'],['tests']
Testability,*proc (123 tests); cas = 63.75 sec*proc (1 test); casscf = 207.34 sec*proc (11 tests); cbs = 3024.91 sec*proc (10 tests); cc = 11653.26 sec*proc (65 tests); cdomp2 = 75.20 sec*proc (2 tests); cepa = 253.57 sec*proc (7 tests); ci = 131.85 sec*proc (8 tests); cisd = 199.49 sec*proc (7 tests); cookbook = 296.52 sec*proc (1 test); cubeprop = 22.81 sec*proc (2 tests); dcft = 3896.27 sec*proc (13 tests); df = 2444.55 sec*proc (38 tests); dfccd = 4.88 sec*proc (1 test); dfccd-grad = 31.02 sec*proc (1 test); dfccdl = 2.89 sec*proc (1 test); dfccsd = 16.62 sec*proc (1 test); dfccsd-grad = 68.53 sec*proc (1 test); dfccsd-t-grad = 46.35 sec*proc (1 test); dfccsdat = 27.13 sec*proc (1 test); dfccsdl = 13.23 sec*proc (1 test); dfccsdt = 13.28 sec*proc (1 test); dfep2 = 6.77 sec*proc (2 tests); dfmp2 = 167.49 sec*proc (11 tests); dfomp2 = 1313.68 sec*proc (7 tests); dfomp2.5 = 243.87 sec*proc (4 tests); dfomp3 = 247.87 sec*proc (4 tests); dfscf = 147.41 sec*proc (1 test); dft = 1451.45 sec*proc (27 tests); docs = 1.13 sec*proc (2 tests); ecp = 47.83 sec*proc (2 tests); fci = 14.94 sec*proc (2 tests); fcidump = 6.70 sec*proc (1 test); findif = 878.14 sec*proc (5 tests); fnocc = 149.15 sec*proc (4 tests); freq = 1337.06 sec*proc (6 tests); gradient = 2143.48 sec*proc (16 tests); json = 22.77 sec*proc (8 tests); longtests = 3614.71 sec*proc (5 tests); mcscf = 5.87 sec*proc (3 tests); minitests = 67.95 sec*proc (4 tests); mints = 91.63 sec*proc (14 tests); misc = 544.48 sec*proc (16 tests); mp2 = 614.96 sec*proc (13 tests); nbody = 90.07 sec*proc (2 tests); numpy = 0.71 sec*proc (1 test); ocepa = 923.76 sec*proc (6 tests); omp = 1108.63 sec*proc (18 tests); opt = 1576.09 sec*proc (21 tests); plug = 19.55 sec*proc (7 tests); prop = 2.19 sec*proc (1 test); properties = 170.36 sec*proc (10 tests); psi = 42351.48 sec*proc (410 tests); psi4numpy = 19.14 sec*proc (6 tests); psimrcc = 133.10 sec*proc (8 tests); python = 1437.38 sec*proc (10 tests); pywrap = 4040.68 sec*proc (12 tests); quick,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1072#issuecomment-406602307:39544,test,tests,39544,https://psicode.org,https://github.com/psi4/psi4/pull/1072#issuecomment-406602307,1,['test'],['tests']
Testability,*proc (123 tests); cas = 66.60 sec*proc (1 test); casscf = 150.37 sec*proc (11 tests); cbs = 3292.06 sec*proc (10 tests); cc = 12872.21 sec*proc (65 tests); cdomp2 = 104.56 sec*proc (2 tests); cepa = 417.43 sec*proc (7 tests); ci = 125.33 sec*proc (8 tests); cisd = 241.44 sec*proc (7 tests); cookbook = 40.50 sec*proc (1 test); cubeprop = 21.07 sec*proc (2 tests); dcft = 4916.85 sec*proc (13 tests); df = 2467.51 sec*proc (38 tests); dfccd = 5.49 sec*proc (1 test); dfccd-grad = 28.16 sec*proc (1 test); dfccdl = 9.25 sec*proc (1 test); dfccsd = 20.05 sec*proc (1 test); dfccsd-grad = 75.47 sec*proc (1 test); dfccsd-t-grad = 66.61 sec*proc (1 test); dfccsdat = 35.44 sec*proc (1 test); dfccsdl = 14.70 sec*proc (1 test); dfccsdt = 19.06 sec*proc (1 test); dfep2 = 5.20 sec*proc (2 tests); dfmp2 = 215.63 sec*proc (11 tests); dfomp2 = 1082.73 sec*proc (7 tests); dfomp2.5 = 276.75 sec*proc (4 tests); dfomp3 = 361.41 sec*proc (4 tests); dfscf = 127.56 sec*proc (1 test); dft = 1351.65 sec*proc (27 tests); docs = 1.31 sec*proc (2 tests); ecp = 75.39 sec*proc (2 tests); fci = 14.23 sec*proc (2 tests); fcidump = 9.36 sec*proc (1 test); findif = 889.43 sec*proc (5 tests); fnocc = 109.31 sec*proc (4 tests); freq = 1021.12 sec*proc (6 tests); gradient = 2039.61 sec*proc (16 tests); json = 16.47 sec*proc (8 tests); longtests = 3606.20 sec*proc (5 tests); mcscf = 4.04 sec*proc (3 tests); minitests = 61.96 sec*proc (4 tests); mints = 85.54 sec*proc (14 tests); misc = 525.16 sec*proc (16 tests); mp2 = 604.70 sec*proc (13 tests); nbody = 86.31 sec*proc (2 tests); numpy = 0.72 sec*proc (1 test); ocepa = 511.90 sec*proc (6 tests); omp = 536.00 sec*proc (18 tests); opt = 1311.26 sec*proc (21 tests); plug = 9.99 sec*proc (7 tests); prop = 2.17 sec*proc (1 test); properties = 162.21 sec*proc (10 tests); psi = 40135.13 sec*proc (410 tests); psi4numpy = 12.99 sec*proc (6 tests); psimrcc = 114.08 sec*proc (8 tests); python = 1044.32 sec*proc (10 tests); pywrap = 1612.27 sec*proc (12 tests); quickte,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1115#issuecomment-411094637:39561,test,tests,39561,https://psicode.org,https://github.com/psi4/psi4/pull/1115#issuecomment-411094637,1,['test'],['tests']
Testability,*proc (123 tests); cas = 68.01 sec*proc (1 test); casscf = 156.98 sec*proc (11 tests); cbs = 1831.60 sec*proc (10 tests); cc = 12496.28 sec*proc (65 tests); cdomp2 = 106.87 sec*proc (2 tests); cepa = 243.33 sec*proc (7 tests); ci = 133.10 sec*proc (8 tests); cisd = 184.25 sec*proc (7 tests); cookbook = 141.29 sec*proc (1 test); cubeprop = 20.11 sec*proc (2 tests); dcft = 3750.01 sec*proc (13 tests); df = 2431.94 sec*proc (38 tests); dfccd = 8.06 sec*proc (1 test); dfccd-grad = 19.49 sec*proc (1 test); dfccdl = 3.04 sec*proc (1 test); dfccsd = 12.67 sec*proc (1 test); dfccsd-grad = 39.99 sec*proc (1 test); dfccsd-t-grad = 42.35 sec*proc (1 test); dfccsdat = 22.07 sec*proc (1 test); dfccsdl = 9.05 sec*proc (1 test); dfccsdt = 17.08 sec*proc (1 test); dfep2 = 5.59 sec*proc (2 tests); dfmp2 = 147.21 sec*proc (11 tests); dfomp2 = 1172.65 sec*proc (7 tests); dfomp2.5 = 283.65 sec*proc (4 tests); dfomp3 = 415.41 sec*proc (4 tests); dfscf = 140.29 sec*proc (1 test); dft = 1425.69 sec*proc (27 tests); docs = 1.11 sec*proc (2 tests); ecp = 48.02 sec*proc (2 tests); fci = 13.69 sec*proc (2 tests); fcidump = 9.92 sec*proc (1 test); findif = 1028.69 sec*proc (5 tests); fnocc = 127.56 sec*proc (4 tests); freq = 948.13 sec*proc (6 tests); gradient = 1779.53 sec*proc (16 tests); json = 17.46 sec*proc (8 tests); longtests = 3834.48 sec*proc (5 tests); mcscf = 3.79 sec*proc (3 tests); minitests = 61.64 sec*proc (4 tests); mints = 85.73 sec*proc (14 tests); misc = 534.44 sec*proc (16 tests); mp2 = 586.32 sec*proc (13 tests); nbody = 77.27 sec*proc (2 tests); numpy = 0.70 sec*proc (1 test); ocepa = 728.64 sec*proc (6 tests); omp = 699.16 sec*proc (18 tests); opt = 1654.95 sec*proc (21 tests); plug = 11.11 sec*proc (7 tests); prop = 3.65 sec*proc (1 test); properties = 169.41 sec*proc (10 tests); psi = 39909.99 sec*proc (410 tests); psi4numpy = 16.33 sec*proc (6 tests); psimrcc = 126.24 sec*proc (8 tests); python = 977.76 sec*proc (10 tests); pywrap = 3122.72 sec*proc (12 tests); quickte,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1067#issuecomment-409148828:39553,test,tests,39553,https://psicode.org,https://github.com/psi4/psi4/pull/1067#issuecomment-409148828,1,['test'],['tests']
Testability,*proc (2 tests); dcft = 3750.01 sec*proc (13 tests); df = 2431.94 sec*proc (38 tests); dfccd = 8.06 sec*proc (1 test); dfccd-grad = 19.49 sec*proc (1 test); dfccdl = 3.04 sec*proc (1 test); dfccsd = 12.67 sec*proc (1 test); dfccsd-grad = 39.99 sec*proc (1 test); dfccsd-t-grad = 42.35 sec*proc (1 test); dfccsdat = 22.07 sec*proc (1 test); dfccsdl = 9.05 sec*proc (1 test); dfccsdt = 17.08 sec*proc (1 test); dfep2 = 5.59 sec*proc (2 tests); dfmp2 = 147.21 sec*proc (11 tests); dfomp2 = 1172.65 sec*proc (7 tests); dfomp2.5 = 283.65 sec*proc (4 tests); dfomp3 = 415.41 sec*proc (4 tests); dfscf = 140.29 sec*proc (1 test); dft = 1425.69 sec*proc (27 tests); docs = 1.11 sec*proc (2 tests); ecp = 48.02 sec*proc (2 tests); fci = 13.69 sec*proc (2 tests); fcidump = 9.92 sec*proc (1 test); findif = 1028.69 sec*proc (5 tests); fnocc = 127.56 sec*proc (4 tests); freq = 948.13 sec*proc (6 tests); gradient = 1779.53 sec*proc (16 tests); json = 17.46 sec*proc (8 tests); longtests = 3834.48 sec*proc (5 tests); mcscf = 3.79 sec*proc (3 tests); minitests = 61.64 sec*proc (4 tests); mints = 85.73 sec*proc (14 tests); misc = 534.44 sec*proc (16 tests); mp2 = 586.32 sec*proc (13 tests); nbody = 77.27 sec*proc (2 tests); numpy = 0.70 sec*proc (1 test); ocepa = 728.64 sec*proc (6 tests); omp = 699.16 sec*proc (18 tests); opt = 1654.95 sec*proc (21 tests); plug = 11.11 sec*proc (7 tests); prop = 3.65 sec*proc (1 test); properties = 169.41 sec*proc (10 tests); psi = 39909.99 sec*proc (410 tests); psi4numpy = 16.33 sec*proc (6 tests); psimrcc = 126.24 sec*proc (8 tests); python = 977.76 sec*proc (10 tests); pywrap = 3122.72 sec*proc (12 tests); quicktests = 4740.64 sec*proc (140 tests); rasci = 44.90 sec*proc (3 tests); sapt = 6442.30 sec*proc (21 tests); scf = 1930.04 sec*proc (52 tests); shorttests = 69.83 sec*proc (4 tests); smoketests = 272.56 sec*proc (11 tests); stability = 8.03 sec*proc (2 tests); tutorial = 291.85 sec*proc (6 tests); x2c = 71.28 sec*proc (3 tests). Total Test time (real),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1067#issuecomment-409148828:39902,test,tests,39902,https://psicode.org,https://github.com/psi4/psi4/pull/1067#issuecomment-409148828,1,['test'],['tests']
Testability,*proc (26 tests); cart = 13506.06 sec*proc (123 tests); cas = 57.32 sec*proc (1 test); casscf = 134.01 sec*proc (11 tests); cbs = 1989.43 sec*proc (11 tests); cc = 6412.95 sec*proc (65 tests); cdomp2 = 56.88 sec*proc (2 tests); cepa = 174.00 sec*proc (7 tests); ci = 111.69 sec*proc (8 tests); cisd = 167.25 sec*proc (7 tests); cookbook = 106.36 sec*proc (1 test); cubeprop = 20.00 sec*proc (2 tests); dcft = 2235.18 sec*proc (13 tests); df = 1736.05 sec*proc (38 tests); dfccd = 2.49 sec*proc (1 test); dfccd-grad = 25.96 sec*proc (1 test); dfccdl = 6.36 sec*proc (1 test); dfccsd = 10.68 sec*proc (1 test); dfccsd-grad = 67.76 sec*proc (1 test); dfccsd-t-grad = 53.28 sec*proc (1 test); dfccsdat = 26.53 sec*proc (1 test); dfccsdl = 8.79 sec*proc (1 test); dfccsdt = 9.67 sec*proc (1 test); dfep2 = 7.44 sec*proc (2 tests); dfmp2 = 168.71 sec*proc (11 tests); dfomp2 = 582.73 sec*proc (7 tests); dfomp2.5 = 251.39 sec*proc (4 tests); dfomp3 = 254.37 sec*proc (4 tests); dfscf = 147.69 sec*proc (1 test); dft = 1501.94 sec*proc (27 tests); docs = 1.41 sec*proc (2 tests); ecp = 74.38 sec*proc (2 tests); fci = 14.93 sec*proc (2 tests); fcidump = 5.35 sec*proc (1 test); findif = 1006.54 sec*proc (5 tests); fnocc = 137.57 sec*proc (4 tests); freq = 884.49 sec*proc (6 tests); gradient = 951.43 sec*proc (16 tests); json = 15.47 sec*proc (8 tests); longtests = 3678.48 sec*proc (5 tests); mcscf = 4.89 sec*proc (3 tests); minitests = 73.36 sec*proc (4 tests); mints = 89.16 sec*proc (14 tests); misc = 527.43 sec*proc (16 tests); mp2 = 614.69 sec*proc (13 tests); nbody = 77.21 sec*proc (2 tests); numpy = 0.83 sec*proc (1 test); ocepa = 531.23 sec*proc (6 tests); omp = 780.44 sec*proc (18 tests); opt = 1525.45 sec*proc (21 tests); plug = 11.19 sec*proc (7 tests); prop = 2.98 sec*proc (1 test); properties = 153.64 sec*proc (10 tests); psi = 29697.39 sec*proc (411 tests); psi4numpy = 14.90 sec*proc (6 tests); psimrcc = 129.77 sec*proc (8 tests); python = 967.75 sec*proc (10 tests); pywrap = 1925,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1199#issuecomment-417683504:39595,test,test,39595,https://psicode.org,https://github.com/psi4/psi4/pull/1199#issuecomment-417683504,1,['test'],['test']
Testability,*proc (26 tests); cart = 23370.60 sec*proc (123 tests); cas = 61.99 sec*proc (1 test); casscf = 167.92 sec*proc (11 tests); cbs = 3247.75 sec*proc (11 tests); cc = 18280.00 sec*proc (65 tests); cdomp2 = 69.54 sec*proc (2 tests); cepa = 132.16 sec*proc (7 tests); ci = 122.62 sec*proc (8 tests); cisd = 205.34 sec*proc (7 tests); cookbook = 632.65 sec*proc (1 test); cubeprop = 21.15 sec*proc (2 tests); dcft = 6649.74 sec*proc (13 tests); df = 2876.21 sec*proc (38 tests); dfccd = 2.00 sec*proc (1 test); dfccd-grad = 6.25 sec*proc (1 test); dfccdl = 6.15 sec*proc (1 test); dfccsd = 6.72 sec*proc (1 test); dfccsd-grad = 45.67 sec*proc (1 test); dfccsd-t-grad = 29.16 sec*proc (1 test); dfccsdat = 40.97 sec*proc (1 test); dfccsdl = 5.99 sec*proc (1 test); dfccsdt = 7.62 sec*proc (1 test); dfep2 = 6.92 sec*proc (2 tests); dfmp2 = 184.86 sec*proc (11 tests); dfomp2 = 1845.65 sec*proc (7 tests); dfomp2.5 = 218.40 sec*proc (4 tests); dfomp3 = 224.45 sec*proc (4 tests); dfscf = 150.09 sec*proc (1 test); dft = 1517.81 sec*proc (27 tests); docs = 1.47 sec*proc (2 tests); ecp = 70.74 sec*proc (2 tests); fci = 14.92 sec*proc (2 tests); fcidump = 7.02 sec*proc (1 test); findif = 1092.42 sec*proc (5 tests); fnocc = 195.27 sec*proc (4 tests); freq = 1420.43 sec*proc (6 tests); gradient = 3114.31 sec*proc (16 tests); json = 16.25 sec*proc (8 tests); longtests = 3847.30 sec*proc (5 tests); mcscf = 5.49 sec*proc (3 tests); minitests = 76.55 sec*proc (4 tests); mints = 90.63 sec*proc (14 tests); misc = 557.92 sec*proc (16 tests); mp2 = 589.40 sec*proc (13 tests); nbody = 98.73 sec*proc (2 tests); numpy = 1.01 sec*proc (1 test); ocepa = 1227.49 sec*proc (6 tests); omp = 920.12 sec*proc (18 tests); opt = 1786.59 sec*proc (21 tests); plug = 15.41 sec*proc (7 tests); prop = 2.27 sec*proc (1 test); properties = 149.95 sec*proc (10 tests); psi = 55691.99 sec*proc (411 tests); psi4numpy = 19.92 sec*proc (6 tests); psimrcc = 141.79 sec*proc (8 tests); python = 1486.99 sec*proc (10 tests); pywrap = ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1224#issuecomment-419158485:39619,test,test,39619,https://psicode.org,https://github.com/psi4/psi4/pull/1224#issuecomment-419158485,1,['test'],['test']
Testability,*proc (3 tests); dcft = 5487.46 sec*proc (13 tests); df = 2798.80 sec*proc (38 tests); dfccd = 3.58 sec*proc (1 test); dfccd-grad = 19.08 sec*proc (1 test); dfccdl = 3.82 sec*proc (1 test); dfccsd = 9.09 sec*proc (1 test); dfccsd-grad = 37.30 sec*proc (1 test); dfccsd-t-grad = 69.23 sec*proc (1 test); dfccsdat = 40.48 sec*proc (1 test); dfccsdl = 16.34 sec*proc (1 test); dfccsdt = 13.79 sec*proc (1 test); dfep2 = 6.01 sec*proc (2 tests); dfmp2 = 180.70 sec*proc (11 tests); dfomp2 = 1691.18 sec*proc (7 tests); dfomp2.5 = 230.29 sec*proc (4 tests); dfomp3 = 245.73 sec*proc (4 tests); dfscf = 131.53 sec*proc (1 test); dft = 1423.44 sec*proc (27 tests); docs = 1.42 sec*proc (2 tests); ecp = 65.92 sec*proc (2 tests); fci = 13.01 sec*proc (2 tests); fcidump = 6.38 sec*proc (1 test); findif = 982.46 sec*proc (5 tests); fnocc = 160.78 sec*proc (4 tests); freq = 1352.76 sec*proc (6 tests); gradient = 2515.20 sec*proc (16 tests); json = 21.65 sec*proc (8 tests); longtests = 3280.68 sec*proc (5 tests); mcscf = 4.01 sec*proc (3 tests); minitests = 69.17 sec*proc (4 tests); mints = 90.89 sec*proc (14 tests); misc = 524.24 sec*proc (16 tests); mp2 = 563.20 sec*proc (13 tests); nbody = 86.98 sec*proc (2 tests); numpy = 0.85 sec*proc (1 test); ocepa = 972.17 sec*proc (6 tests); omp = 1024.50 sec*proc (18 tests); opt = 1458.70 sec*proc (21 tests); plug = 12.59 sec*proc (7 tests); prop = 2.69 sec*proc (1 test); properties = 153.77 sec*proc (10 tests); psi = 46786.50 sec*proc (412 tests); psi4numpy = 16.14 sec*proc (6 tests); psimrcc = 131.10 sec*proc (8 tests); python = 1427.05 sec*proc (10 tests); pywrap = 3207.07 sec*proc (12 tests); quicktests = 4242.64 sec*proc (140 tests); rasci = 43.49 sec*proc (3 tests); sapt = 5444.73 sec*proc (21 tests); scf = 1819.88 sec*proc (52 tests); shorttests = 61.18 sec*proc (4 tests); smoketests = 187.16 sec*proc (11 tests); stability = 6.01 sec*proc (2 tests); tutorial = 311.62 sec*proc (6 tests); x2c = 57.73 sec*proc (3 tests). Total Test time (rea,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1237#issuecomment-425038275:40101,test,tests,40101,https://psicode.org,https://github.com/psi4/psi4/pull/1237#issuecomment-425038275,1,['test'],['tests']
Testability,*proc (7 tests); ci = 265.18 sec*proc (8 tests); cisd = 305.68 sec*proc (7 tests); cookbook = 499.71 sec*proc (1 test); cubeprop = 60.94 sec*proc (2 tests); dcft = 5483.73 sec*proc (13 tests); df = 3170.34 sec*proc (38 tests); dfccd = 23.41 sec*proc (1 test); dfccd-grad = 31.36 sec*proc (1 test); dfccdl = 23.35 sec*proc (1 test); dfccsd = 26.12 sec*proc (1 test); dfccsd-grad = 51.95 sec*proc (1 test); dfccsd-t-grad = 43.90 sec*proc (1 test); dfccsdat = 38.92 sec*proc (1 test); dfccsdl = 26.48 sec*proc (1 test); dfccsdt = 23.05 sec*proc (1 test); dfep2 = 48.44 sec*proc (2 tests); dfmp2 = 377.39 sec*proc (11 tests); dfomp2 = 1660.45 sec*proc (7 tests); dfomp2.5 = 249.73 sec*proc (4 tests); dfomp3 = 331.36 sec*proc (4 tests); dfscf = 157.81 sec*proc (1 test); dft = 1909.96 sec*proc (27 tests); docs = 45.29 sec*proc (2 tests); ecp = 88.68 sec*proc (2 tests); fci = 55.37 sec*proc (2 tests); fcidump = 23.91 sec*proc (1 test); findif = 1014.06 sec*proc (5 tests); fnocc = 213.01 sec*proc (4 tests); freq = 1356.97 sec*proc (6 tests); gradient = 2764.98 sec*proc (16 tests); json = 190.44 sec*proc (8 tests); longtests = 3661.11 sec*proc (5 tests); mcscf = 70.40 sec*proc (3 tests); minitests = 148.66 sec*proc (4 tests); mints = 394.57 sec*proc (14 tests); misc = 781.82 sec*proc (16 tests); mp2 = 790.20 sec*proc (13 tests); nbody = 109.77 sec*proc (2 tests); numpy = 22.55 sec*proc (1 test); ocepa = 1236.65 sec*proc (6 tests); omp = 1072.07 sec*proc (18 tests); opt = 1846.61 sec*proc (21 tests); plug = 163.15 sec*proc (7 tests); prop = 25.39 sec*proc (1 test); properties = 335.10 sec*proc (10 tests); psi = 53863.02 sec*proc (411 tests); psi4numpy = 147.20 sec*proc (6 tests); psimrcc = 297.65 sec*proc (8 tests); python = 1516.55 sec*proc (10 tests); pywrap = 5301.29 sec*proc (12 tests); quicktests = 7318.30 sec*proc (140 tests); rasci = 106.24 sec*proc (3 tests); sapt = 6390.12 sec*proc (21 tests); scf = 2824.03 sec*proc (52 tests); shorttests = 155.05 sec*proc (4 tests); smoketest,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1227#issuecomment-421362141:40018,test,tests,40018,https://psicode.org,https://github.com/psi4/psi4/pull/1227#issuecomment-421362141,1,['test'],['tests']
Testability,*proc (7 tests); cookbook = 131.37 sec*proc (1 test); cubeprop = 21.48 sec*proc (2 tests); dcft = 2724.95 sec*proc (13 tests); df = 1453.79 sec*proc (38 tests); dfccd = 3.79 sec*proc (1 test); dfccd-grad = 10.06 sec*proc (1 test); dfccdl = 3.42 sec*proc (1 test); dfccsd = 7.71 sec*proc (1 test); dfccsd-grad = 50.76 sec*proc (1 test); dfccsd-t-grad = 44.82 sec*proc (1 test); dfccsdat = 23.90 sec*proc (1 test); dfccsdl = 15.14 sec*proc (1 test); dfccsdt = 11.81 sec*proc (1 test); dfep2 = 6.63 sec*proc (2 tests); dfmp2 = 146.70 sec*proc (11 tests); dfomp2 = 531.94 sec*proc (7 tests); dfomp2.5 = 173.26 sec*proc (4 tests); dfomp3 = 204.49 sec*proc (4 tests); dfscf = 141.11 sec*proc (1 test); dft = 1424.83 sec*proc (27 tests); docs = 1.41 sec*proc (2 tests); ecp = 43.27 sec*proc (2 tests); fci = 12.64 sec*proc (2 tests); fcidump = 3.44 sec*proc (1 test); findif = 1008.61 sec*proc (5 tests); fnocc = 88.13 sec*proc (4 tests); freq = 1196.83 sec*proc (6 tests); gradient = 1151.03 sec*proc (16 tests); json = 16.99 sec*proc (8 tests); longtests = 4017.24 sec*proc (5 tests); mcscf = 4.15 sec*proc (3 tests); minitests = 65.27 sec*proc (4 tests); mints = 85.60 sec*proc (14 tests); misc = 578.68 sec*proc (16 tests); mp2 = 592.42 sec*proc (13 tests); nbody = 61.65 sec*proc (2 tests); numpy = 0.71 sec*proc (1 test); ocepa = 632.20 sec*proc (6 tests); omp = 672.35 sec*proc (18 tests); opt = 1607.94 sec*proc (21 tests); plug = 21.12 sec*proc (7 tests); prop = 2.66 sec*proc (1 test); properties = 163.26 sec*proc (10 tests); psi = 35824.34 sec*proc (410 tests); psi4numpy = 14.58 sec*proc (6 tests); psimrcc = 143.60 sec*proc (8 tests); python = 1240.91 sec*proc (10 tests); pywrap = 1798.58 sec*proc (12 tests); quicktests = 3221.12 sec*proc (140 tests); rasci = 43.94 sec*proc (3 tests); sapt = 6653.80 sec*proc (21 tests); scf = 1856.08 sec*proc (52 tests); shorttests = 67.26 sec*proc (4 tests); smoketests = 109.89 sec*proc (11 tests); stability = 4.09 sec*proc (2 tests); tutorial = 229.17,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1090#issuecomment-408925986:39832,test,tests,39832,https://psicode.org,https://github.com/psi4/psi4/pull/1090#issuecomment-408925986,1,['test'],['tests']
Testability,*proc (7 tests); cookbook = 161.04 sec*proc (1 test); cubeprop = 22.05 sec*proc (2 tests); dcft = 3092.73 sec*proc (13 tests); df = 1676.00 sec*proc (38 tests); dfccd = 5.43 sec*proc (1 test); dfccd-grad = 23.87 sec*proc (1 test); dfccdl = 5.84 sec*proc (1 test); dfccsd = 12.87 sec*proc (1 test); dfccsd-grad = 48.16 sec*proc (1 test); dfccsd-t-grad = 58.36 sec*proc (1 test); dfccsdat = 27.90 sec*proc (1 test); dfccsdl = 18.85 sec*proc (1 test); dfccsdt = 20.66 sec*proc (1 test); dfep2 = 6.65 sec*proc (2 tests); dfmp2 = 160.87 sec*proc (11 tests); dfomp2 = 668.52 sec*proc (7 tests); dfomp2.5 = 158.90 sec*proc (4 tests); dfomp3 = 194.44 sec*proc (4 tests); dfscf = 140.97 sec*proc (1 test); dft = 1440.34 sec*proc (27 tests); docs = 1.27 sec*proc (2 tests); ecp = 46.88 sec*proc (2 tests); fci = 17.32 sec*proc (2 tests); fcidump = 6.53 sec*proc (1 test); findif = 938.98 sec*proc (5 tests); fnocc = 129.35 sec*proc (4 tests); freq = 994.16 sec*proc (6 tests); gradient = 1502.06 sec*proc (16 tests); json = 18.08 sec*proc (8 tests); longtests = 3739.74 sec*proc (5 tests); mcscf = 3.71 sec*proc (3 tests); minitests = 58.58 sec*proc (4 tests); mints = 91.24 sec*proc (14 tests); misc = 538.48 sec*proc (16 tests); mp2 = 635.39 sec*proc (13 tests); nbody = 98.12 sec*proc (2 tests); numpy = 0.69 sec*proc (1 test); ocepa = 1014.19 sec*proc (6 tests); omp = 1142.51 sec*proc (18 tests); opt = 1635.88 sec*proc (21 tests); plug = 10.45 sec*proc (7 tests); prop = 4.52 sec*proc (1 test); properties = 168.47 sec*proc (10 tests); psi = 37923.20 sec*proc (410 tests); psi4numpy = 18.11 sec*proc (6 tests); psimrcc = 135.22 sec*proc (8 tests); python = 1017.96 sec*proc (10 tests); pywrap = 3230.71 sec*proc (12 tests); quicktests = 4445.75 sec*proc (140 tests); rasci = 47.28 sec*proc (3 tests); sapt = 6203.95 sec*proc (21 tests); scf = 1901.85 sec*proc (52 tests); shorttests = 69.64 sec*proc (4 tests); smoketests = 213.87 sec*proc (11 tests); stability = 7.12 sec*proc (2 tests); tutorial = 301.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1112#issuecomment-409912325:39843,test,tests,39843,https://psicode.org,https://github.com/psi4/psi4/pull/1112#issuecomment-409912325,1,['test'],['tests']
Testability,*proc (7 tests); cookbook = 186.42 sec*proc (1 test); cubeprop = 23.39 sec*proc (3 tests); dcft = 5685.84 sec*proc (13 tests); df = 2727.51 sec*proc (38 tests); dfccd = 6.37 sec*proc (1 test); dfccd-grad = 5.73 sec*proc (1 test); dfccdl = 3.74 sec*proc (1 test); dfccsd = 10.80 sec*proc (1 test); dfccsd-grad = 40.30 sec*proc (1 test); dfccsd-t-grad = 74.65 sec*proc (1 test); dfccsdat = 8.87 sec*proc (1 test); dfccsdl = 12.21 sec*proc (1 test); dfccsdt = 11.34 sec*proc (1 test); dfep2 = 6.87 sec*proc (2 tests); dfmp2 = 199.62 sec*proc (11 tests); dfomp2 = 1655.90 sec*proc (7 tests); dfomp2.5 = 243.42 sec*proc (4 tests); dfomp3 = 236.24 sec*proc (4 tests); dfscf = 139.59 sec*proc (1 test); dft = 1445.40 sec*proc (27 tests); docs = 1.15 sec*proc (2 tests); ecp = 69.69 sec*proc (2 tests); fci = 14.10 sec*proc (2 tests); fcidump = 6.47 sec*proc (1 test); findif = 963.69 sec*proc (5 tests); fnocc = 104.66 sec*proc (4 tests); freq = 1101.89 sec*proc (6 tests); gradient = 2501.04 sec*proc (16 tests); json = 21.09 sec*proc (8 tests); longtests = 3526.25 sec*proc (5 tests); mcscf = 8.66 sec*proc (3 tests); minitests = 71.36 sec*proc (4 tests); mints = 90.94 sec*proc (14 tests); misc = 520.90 sec*proc (16 tests); mp2 = 521.82 sec*proc (13 tests); nbody = 80.36 sec*proc (2 tests); numpy = 0.68 sec*proc (1 test); ocepa = 918.38 sec*proc (6 tests); omp = 700.31 sec*proc (18 tests); opt = 1458.50 sec*proc (21 tests); plug = 10.87 sec*proc (7 tests); prop = 3.50 sec*proc (1 test); properties = 142.20 sec*proc (10 tests); psi = 47628.72 sec*proc (412 tests); psi4numpy = 18.89 sec*proc (6 tests); psimrcc = 136.54 sec*proc (8 tests); python = 1196.74 sec*proc (10 tests); pywrap = 5432.85 sec*proc (12 tests); quicktests = 4658.68 sec*proc (140 tests); rasci = 51.00 sec*proc (3 tests); sapt = 5879.64 sec*proc (21 tests); scf = 1856.79 sec*proc (52 tests); shorttests = 68.86 sec*proc (4 tests); smoketests = 176.18 sec*proc (11 tests); stability = 6.74 sec*proc (2 tests); tutorial = 217.83,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1246#issuecomment-425384085:40017,test,tests,40017,https://psicode.org,https://github.com/psi4/psi4/pull/1246#issuecomment-425384085,1,['test'],['tests']
Testability,*proc (7 tests); cookbook = 200.39 sec*proc (1 test); cubeprop = 18.11 sec*proc (2 tests); dcft = 5366.23 sec*proc (13 tests); df = 2660.25 sec*proc (38 tests); dfccd = 3.65 sec*proc (1 test); dfccd-grad = 7.89 sec*proc (1 test); dfccdl = 5.38 sec*proc (1 test); dfccsd = 2.50 sec*proc (1 test); dfccsd-grad = 58.61 sec*proc (1 test); dfccsd-t-grad = 49.75 sec*proc (1 test); dfccsdat = 13.69 sec*proc (1 test); dfccsdl = 5.69 sec*proc (1 test); dfccsdt = 12.58 sec*proc (1 test); dfep2 = 7.96 sec*proc (2 tests); dfmp2 = 181.37 sec*proc (11 tests); dfomp2 = 1655.18 sec*proc (7 tests); dfomp2.5 = 182.29 sec*proc (4 tests); dfomp3 = 257.66 sec*proc (4 tests); dfscf = 135.99 sec*proc (1 test); dft = 1395.19 sec*proc (27 tests); docs = 1.30 sec*proc (2 tests); ecp = 63.18 sec*proc (2 tests); fci = 14.46 sec*proc (2 tests); fcidump = 10.01 sec*proc (1 test); findif = 851.83 sec*proc (5 tests); fnocc = 101.30 sec*proc (4 tests); freq = 1354.12 sec*proc (6 tests); gradient = 2622.57 sec*proc (16 tests); json = 14.03 sec*proc (8 tests); longtests = 3313.72 sec*proc (5 tests); mcscf = 2.89 sec*proc (3 tests); minitests = 68.94 sec*proc (4 tests); mints = 81.69 sec*proc (14 tests); misc = 515.57 sec*proc (16 tests); mp2 = 533.59 sec*proc (13 tests); nbody = 70.79 sec*proc (2 tests); numpy = 0.72 sec*proc (1 test); ocepa = 1056.65 sec*proc (6 tests); omp = 601.76 sec*proc (18 tests); opt = 1434.29 sec*proc (21 tests); plug = 8.20 sec*proc (7 tests); prop = 2.51 sec*proc (1 test); properties = 142.13 sec*proc (10 tests); psi = 46764.51 sec*proc (410 tests); psi4numpy = 14.06 sec*proc (6 tests); psimrcc = 138.13 sec*proc (8 tests); python = 1382.49 sec*proc (10 tests); pywrap = 5448.11 sec*proc (12 tests); quicktests = 4821.82 sec*proc (140 tests); rasci = 46.92 sec*proc (3 tests); sapt = 5597.46 sec*proc (21 tests); scf = 1795.93 sec*proc (52 tests); shorttests = 62.25 sec*proc (4 tests); smoketests = 225.48 sec*proc (11 tests); stability = 5.24 sec*proc (2 tests); tutorial = 292.26,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1124#issuecomment-411347383:39827,test,tests,39827,https://psicode.org,https://github.com/psi4/psi4/pull/1124#issuecomment-411347383,1,['test'],['tests']
Testability,*proc (8 tests); cisd = 294.07 sec*proc (7 tests); cookbook = 58.33 sec*proc (1 test); cubeprop = 77.64 sec*proc (2 tests); dcft = 2278.61 sec*proc (13 tests); df = 1624.44 sec*proc (38 tests); dfccd = 16.01 sec*proc (1 test); dfccd-grad = 27.12 sec*proc (1 test); dfccdl = 16.03 sec*proc (1 test); dfccsd = 16.85 sec*proc (1 test); dfccsd-grad = 16.86 sec*proc (1 test); dfccsd-t-grad = 21.71 sec*proc (1 test); dfccsdat = 46.01 sec*proc (1 test); dfccsdl = 16.94 sec*proc (1 test); dfccsdt = 17.32 sec*proc (1 test); dfep2 = 34.66 sec*proc (2 tests); dfmp2 = 299.94 sec*proc (11 tests); dfomp2 = 703.06 sec*proc (7 tests); dfomp2.5 = 80.33 sec*proc (4 tests); dfomp3 = 113.97 sec*proc (4 tests); dfscf = 159.76 sec*proc (1 test); dft = 1825.64 sec*proc (27 tests); docs = 30.71 sec*proc (2 tests); ecp = 76.81 sec*proc (2 tests); fci = 39.98 sec*proc (2 tests); fcidump = 17.80 sec*proc (1 test); findif = 893.74 sec*proc (5 tests); fnocc = 137.05 sec*proc (4 tests); freq = 902.68 sec*proc (6 tests); gradient = 1170.66 sec*proc (16 tests); json = 128.43 sec*proc (8 tests); longtests = 3551.47 sec*proc (5 tests); mcscf = 48.65 sec*proc (3 tests); minitests = 112.01 sec*proc (4 tests); mints = 307.38 sec*proc (14 tests); misc = 677.17 sec*proc (16 tests); mp2 = 726.25 sec*proc (13 tests); nbody = 54.91 sec*proc (2 tests); numpy = 15.57 sec*proc (1 test); ocepa = 473.52 sec*proc (6 tests); omp = 485.33 sec*proc (18 tests); opt = 1642.53 sec*proc (21 tests); plug = 116.88 sec*proc (7 tests); prop = 16.75 sec*proc (1 test); properties = 293.90 sec*proc (10 tests); psi = 30283.74 sec*proc (411 tests); psi4numpy = 102.29 sec*proc (6 tests); psimrcc = 220.63 sec*proc (8 tests); python = 950.22 sec*proc (10 tests); pywrap = 2269.26 sec*proc (12 tests); quicktests = 4155.39 sec*proc (140 tests); rasci = 88.83 sec*proc (3 tests); sapt = 6411.10 sec*proc (21 tests); scf = 2556.35 sec*proc (52 tests); shorttests = 122.29 sec*proc (4 tests); smoketests = 257.38 sec*proc (11 tests); stability ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1226#issuecomment-420597899:40000,test,tests,40000,https://psicode.org,https://github.com/psi4/psi4/pull/1226#issuecomment-420597899,1,['test'],['tests']
Testability,+-0 ...................... Passed 23.98 sec; Start 332: scf1; 268/412 Test #237: mpn-bh ........................... Passed 21.65 sec; Start 162: dft-ghost; 269/412 Test #340: scf-property ..................... Passed 21.32 sec; Start 137: dfmp2-grad3; 270/412 Test #181: fsapt-terms ...................... Passed 28.50 sec; Start 89: cepa2; 271/412 Test #158: dfrasscf-sp ...................... Passed 19.91 sec; Start 256: omp2p5-grad1; 272/412 Test #3: casscf-fzc-sp .................... Passed 20.64 sec; Start 138: dfmp2-grad4; 273/412 Test #332: scf1 ............................. Passed 22.53 sec; Start 125: dfccsdl1; 274/412 Test #172: dft2 ............................. Passed 23.07 sec; Start 84: cdomp2-1; 275/412 Test #137: dfmp2-grad3 ...................... Passed 19.93 sec; Start 87: cepa0-grad2; 276/412 Test #162: dft-ghost ........................ Passed 26.64 sec; Start 186: fci-h2o; 277/412 Test #89: cepa2 ............................ Passed 20.93 sec; Start 188: fci-h2o-fzcv; 278/412 Test #256: omp2p5-grad1 ..................... Passed 18.42 sec; Start 140: dfomp2-1; 279/412 Test #138: dfmp2-grad4 ...................... Passed 17.64 sec; Start 128: dfccsdt1; 280/412 Test #125: dfccsdl1 ......................... Passed 16.94 sec; Start 244: ocepa1; 281/412 Test #84: cdomp2-1 ......................... Passed 16.99 sec; Start 330: scf-guess-read2; 282/412 Test #87: cepa0-grad2 ...................... Passed 17.34 sec; Start 124: dfccsd1; 283/412 Test #188: fci-h2o-fzcv ..................... Passed 19.59 sec; Start 266: opt1; 284/412 Test #186: fci-h2o .......................... Passed 20.89 sec; Start 136: dfmp2-grad2; 285/412 Test #140: dfomp2-1 ......................... Passed 17.12 sec; Start 109: dcft2; 286/412 Test #128: dfccsdt1 ......................... Passed 17.32 sec; Start 180: fsapt2; 287/412 Test #244: ocepa1 ........................... Passed 17.21 sec; Start 185: fci-dipole; 288/412 Test #330: scf-guess-read2 .................. Passed 18.12 sec; ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1226#issuecomment-420597899:25904,Test,Test,25904,https://psicode.org,https://github.com/psi4/psi4/pull/1226#issuecomment-420597899,1,['Test'],['Test']
Testability,+-0 ...................... Passed 3.75 sec; Start 94: cisd-h2o+-1; 106/411 Test #94: cisd-h2o+-1 ...................... Passed 3.80 sec; Start 95: cisd-h2o+-2; 107/411 Test #95: cisd-h2o+-2 ...................... Passed 3.93 sec; Start 96: cisd-h2o-clpse; 108/411 Test #96: cisd-h2o-clpse ................... Passed 1.28 sec; Start 97: cisd-opt-fd; 109/411 Test #97: cisd-opt-fd ...................... Passed 93.35 sec; Start 98: cisd-sp; 110/411 Test #98: cisd-sp .......................... Passed 7.29 sec; Start 99: cisd-sp-2; 111/411 Test #99: cisd-sp-2 ........................ Passed 4.05 sec; Start 100: ci-property; 112/411 Test #100: ci-property ...................... Passed 41.71 sec; Start 101: cubeprop; 113/411 Test #101: cubeprop ......................... Passed 8.48 sec; Start 102: decontract; 114/411 Test #102: decontract ....................... Passed 1.32 sec; Start 103: dcft-grad1; 115/411 Test #103: dcft-grad1 ....................... Passed 73.33 sec; Start 104: dcft-grad2; 116/411 Test #104: dcft-grad2 ....................... Passed 10.18 sec; Start 105: dcft-grad3; 117/411 Test #105: dcft-grad3 ....................... Passed 7.23 sec; Start 106: dcft-grad4; 118/411 Test #106: dcft-grad4 ....................... Passed 25.47 sec; Start 107: dcft1; 119/411 Test #107: dcft1 ............................ Passed 5.06 sec; Start 108: dcft2; 120/411 Test #108: dcft2 ............................ Passed 1.64 sec; Start 109: dcft3; 121/411 Test #109: dcft3 ............................ Passed 2.46 sec; Start 110: dcft4; 122/411 Test #110: dcft4 ............................ Passed 43.32 sec; Start 111: dcft5; 123/411 Test #111: dcft5 ............................ Passed 43.09 sec; Start 112: dcft6; 124/411 Test #112: dcft6 ............................ Passed 113.61 sec; Start 114: dcft8; 125/411 Test #114: dcft8 ............................ Passed 19.93 sec; Start 115: dcft9; 126/411 Test #115: dcft9 ............................ Passed 10.65 sec; Start 116: ao-dfcassc,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1073#issuecomment-406985370:10309,Test,Test,10309,https://psicode.org,https://github.com/psi4/psi4/pull/1073#issuecomment-406985370,1,['Test'],['Test']
Testability,+-0 ...................... Passed 5.97 sec; Start 95: cisd-h2o+-2; 100/411 Test #94: cisd-h2o+-1 ...................... Passed 7.24 sec; Start 96: cisd-h2o-clpse; 101/411 Test #89: cepa3 ............................ Passed 28.98 sec; Start 97: cisd-opt-fd; 102/411 Test #96: cisd-h2o-clpse ................... Passed 3.83 sec; Start 98: cisd-sp; 103/411 Test #95: cisd-h2o+-2 ...................... Passed 6.76 sec; Start 99: cisd-sp-2; 104/411 Test #99: cisd-sp-2 ........................ Passed 5.32 sec; Start 100: ci-property; 105/411 Test #90: cepa1 ............................ Passed 33.84 sec; Start 101: cubeprop; 106/411 Test #98: cisd-sp .......................... Passed 10.73 sec; Start 102: decontract; 107/411 Test #102: decontract ....................... Passed 2.78 sec; Start 103: dcft-grad1; 108/411 Test #101: cubeprop ......................... Passed 11.94 sec; Start 104: dcft-grad2; 109/411 Test #92: ci-multi ......................... Passed 61.46 sec; Start 105: dcft-grad3; 110/411 Test #105: dcft-grad3 ....................... Passed 18.47 sec; Start 106: dcft-grad4; 111/411 Test #100: ci-property ...................... Passed 62.15 sec; Start 107: dcft1; 112/411 Test #106: dcft-grad4 ....................... Passed 45.00 sec; Start 108: dcft2; 113/411 Test #108: dcft2 ............................ Passed 15.42 sec; Start 109: dcft3; 114/411 Test #91: cepa-module ...................... Passed 169.66 sec; Start 110: dcft4; 115/411 Test #109: dcft3 ............................ Passed 32.22 sec; Start 111: dcft5; 116/411 Test #97: cisd-opt-fd ...................... Passed 163.26 sec; Start 112: dcft6; 117/411 Test #107: dcft1 ............................ Passed 98.56 sec; Start 114: dcft8; 118/411 Test #104: dcft-grad2 ....................... Passed 155.98 sec; Start 115: dcft9; 119/411 Test #45: cc3 .............................. Passed 834.30 sec; Start 116: ao-dfcasscf-sp; 120/411 Test #116: ao-dfcasscf-sp ................... Passed 3.09 sec; Start 117: dfc,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1112#issuecomment-409912325:10011,Test,Test,10011,https://psicode.org,https://github.com/psi4/psi4/pull/1112#issuecomment-409912325,1,['Test'],['Test']
Testability,+-1 ...................... Passed 4.61 sec; Start 398: python-memdfjk; 305/413 Test #96: cisd-h2o+-2 ...................... Passed 5.04 sec; Start 259: omp3-1; 306/413 Test #189: fci-h2o-fzcv ..................... Passed 4.96 sec; Start 333: scf1; 307/413 Test #94: cisd-h2o+-0 ...................... Passed 4.41 sec; Start 389: python-energy; 308/413 Test #188: fci-h2o-2 ........................ Passed 6.48 sec; Start 273: opt5; 309/413 Test #398: python-memdfjk ................... Passed 1.04 sec; Start 271: opt3; 310/413 Test #389: python-energy .................... Passed 1.00 sec; Start 231: mp2-grad2; 311/413 Test #248: omp2-1 ........................... Passed 2.94 sec; Start 119: dfcasscf-sa-sp; 312/413 Test #233: mp2p5-grad1 ...................... Passed 2.39 sec; Start 402: json-schema-1-ghost; 313/413 Test #255: omp2p5-1 ......................... Passed 2.99 sec; Start 341: scf-property; 314/413 Test #205: frac ............................. Passed 2.48 sec; Start 181: fsapt2; 315/413 Test #259: omp3-1 ........................... Passed 2.37 sec; Start 138: dfmp2-grad3; 316/413 Test #273: opt5 ............................. Passed 2.08 sec; Start 6: ao-casscf-sp; 317/413 Test #231: mp2-grad2 ........................ Passed 2.00 sec; Start 407: skeleton; 318/413 Test #226: molden2 .......................... Passed 4.08 sec; Start 405: json-schema-1-gradient; 319/413 Test #312: rasci-c2-active .................. Passed 4.10 sec; Start 409: skeletondfmp2; 320/413 Test #296: psimrcc-sp1 ...................... Passed 4.58 sec; Start 235: mp3-grad1; 321/413 Test #402: json-schema-1-ghost .............. Passed 2.29 sec; Start 173: dft2; 322/413 Test #271: opt3 ............................. Passed 3.04 sec; Start 410: skeletonmointegrals; 323/413 Test #138: dfmp2-grad3 ...................... Passed 1.66 sec; Start 386: psi4numpy-rhf-hessian; 324/413 Test #403: json-schema-1-orient ............. Passed 5.06 sec; Start 406: json-schema-1-properties; 325/413 Test #333: ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1264#issuecomment-425525678:29527,Test,Test,29527,https://psicode.org,https://github.com/psi4/psi4/pull/1264#issuecomment-425525678,1,['Test'],['Test']
Testability,", 0 tests failed out of 415. Label Time Summary:; adc = 62.10 sec*proc (2 tests); autotest = 3142.09 sec*proc (26 tests); cart = 16551.08 sec*proc (123 tests); cas = 28.56 sec*proc (1 test); casscf = 215.89 sec*proc (11 tests); cbs = 5376.02 sec*proc (12 tests); cc = 17865.62 sec*proc (65 tests); cdomp2 = 102.86 sec*proc (2 tests); cepa = 362.38 sec*proc (7 tests); ci = 100.54 sec*proc (8 tests); cisd = 147.55 sec*proc (7 tests); cookbook = 443.85 sec*proc (1 test); cubeprop = 24.72 sec*proc (3 tests); dcft = 5201.52 sec*proc (13 tests); df = 3130.41 sec*proc (38 tests); dfccd = 7.27 sec*proc (1 test); dfccd-grad = 29.83 sec*proc (1 test); dfccdl = 4.85 sec*proc (1 test); dfccsd = 16.21 sec*proc (1 test); dfccsd-grad = 94.95 sec*proc (1 test); dfccsd-t-grad = 103.60 sec*proc (1 test); dfccsdat = 43.70 sec*proc (1 test); dfccsdl = 19.45 sec*proc (1 test); dfccsdt = 14.17 sec*proc (1 test); dfep2 = 6.02 sec*proc (2 tests); dfmp2 = 184.52 sec*proc (11 tests); dfomp2 = 1710.82 sec*proc (7 tests); dfomp2.5 = 342.31 sec*proc (4 tests); dfomp3 = 402.50 sec*proc (4 tests); dfscf = 31.82 sec*proc (1 test); dft = 751.03 sec*proc (27 tests); docs = 2.03 sec*proc (2 tests); ecp = 66.38 sec*proc (2 tests); fci = 12.84 sec*proc (2 tests); fcidump = 7.22 sec*proc (1 test); findif = 1626.84 sec*proc (5 tests); fnocc = 231.32 sec*proc (4 tests); freq = 1688.13 sec*proc (7 tests); gradient = 3618.28 sec*proc (21 tests); hessian = 405.24 sec*proc (1 test); json = 20.27 sec*proc (8 tests); longtests = 1495.12 sec*proc (5 tests); mcscf = 10.16 sec*proc (3 tests); minitests = 37.91 sec*proc (3 tests); mints = 45.42 sec*proc (14 tests); misc = 411.66 sec*proc (16 tests); mp2 = 346.75 sec*proc (13 tests); nbody = 982.55 sec*proc (8 tests); numpy = 1.09 sec*proc (1 test); ocepa = 1107.57 sec*proc (6 tests); omp = 1366.11 sec*proc (18 tests); opt = 1412.96 sec*proc (23 tests); prop = 4.22 sec*proc (1 test); properties = 124.70 sec*proc (10 tests); psi = 48757.61 sec*proc (414 tests); psi4num",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1384#issuecomment-443227424:39861,test,tests,39861,https://psicode.org,https://github.com/psi4/psi4/pull/1384#issuecomment-443227424,1,['test'],['tests']
Testability,", as these are filtered out.; - [x] Added a `psi4.clean_options()` fn (alongside `psi4.clean()` and `psi4.clean_variables()`) to reset the `P::e.options` object to its initial state. This is necessary for independent tests in pytest and will probably be useful for psiapi sessions.; - [x] Add pytest smoke tests for psi4 itself and psi4+addons (addon tests skip if addon not enabled or detectable). From source, `cd tests/pytest && python -m pytest [-v -s]`. From staged or installed, `python -c ""import psi4; psi4.test()""` or `psi4 --test`. From objdir, `make pytest`. ## Questions; - [ ] I can work around the 3.3 cmake. It'll just be less tidy and won't ward off the HDF5 version detection issue. Speak up if there are objections.; - [ ] Everyone should make sure you're ok with the table below. No envvar control over parallelism anymore.; - [ ] Everyone read 12cd carefully, as I'm a bit nervous about this. Searched the code and Options object is cleared _nowhere_ except for a commented out in read_options. So I think it's safe to commandeer this function. And it works to completely reset options.; - [ ] The threading test is now in test_psi4_profiling.py. It works fine as the only pytest, but it's threading is still messed up when in the whole pytest suite. Anyone have a guess why? I haven't read anything about pytest controlling threads. ## Status; - [x] Ready to go. `OMP_NUM_THREADS` | `MKL_NUM_THREADS` | `-nN` | `psi4.set_num_threads()` | PsiAPI | Psithon; --- | --- | --- | --- | --- | ---; _ | _ | _ | _ | _111 | 1111; 1 | _ | _ | _ | _111 | 1111; 3 | _ | _ | _ | _111 | 1111; _ | 1 | _ | _ | _111 | 1111; _ | 3 | _ | _ | _111 | 1111; _ | _ | 1 | _ | N/A | 1111; _ | _ | 3 | _ | N/A | 3333; _ | _ | _ | 1 | _111 | 1111; _ | _ | _ | 3 | _333 | 1333; _ | _ | 4 | 2 | _222 | 4222. Where the four numbers are extracted from the output file: threads in psi4 header, threads in MintsHelper, threads in SCF header, threads used by JK. The first of these in inapplicable in PsiAPI mode.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/627:3486,test,test,3486,https://psicode.org,https://github.com/psi4/psi4/pull/627,1,['test'],['test']
Testability,", but error(s) will be encountered trying to use them.; - [ ] The inheritance structure of the `Functional` class was improved by moving LibXC specific code into the LibXCFunctional class; - [ ] The `Superfunctional` class was modified to have only a single list of functionals, as opposed to a separate list of X and C functionals. This removed the need for special-case behavior for XC functionals -- See [here](https://github.com/psi4/psi4/blob/1813c0c31e3049511f558a78db15bb2290257650/psi4/src/psi4/libfunctional/superfunctional.cc#L223) and [here](https://github.com/psi4/psi4/blob/1813c0c31e3049511f558a78db15bb2290257650/psi4/driver/procrouting/dft/superfunctionals.py#L90-L92); - [ ] Unused variables and definitions were cleaned up. ## Questions; - [ ] I have all but removed `libxc_xc_func_`... Is there any use for this that I can't think of?; - [ ] Currently, X and C functionals can be accessed with `x_functionals()` and `c_functionals()`. Neither of these return XC functionals as these were previously included in C functionals. These simply create a new filtered vector, which isn't efficient or clean. Perhaps these should be removed in favor of filtering from the Python side?; - [ ] GRAC functionals are still split into X and C functionals. The effect of my changes on this needs to be tested, and perhaps the GRAC functionals should be unified. ## Checklist; - [ ] Remove all `TODO`s corresponding to the above questions; - [ ] Double check that I haven't used `x_functionals()` anywhere that I might want XC functionals -- See question 2; - [ ] Double check that I haven't broken GRAC; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests); - I have run all DFT tests on my system, but perhaps you would want to confirm?; - [ ] Edit the tests that use `add_x_functionals` and `add_c_functionals`. ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3203:2458,test,tested,2458,https://psicode.org,https://github.com/psi4/psi4/pull/3203,6,"['Test', 'test']","['Tests', 'tested', 'tests']"
Testability,", if that makes the git operations easier.; * edit sapt-dft1 test to be something like the below. This adds an extra section without the deltaHF correction. The analogous value in test sapt-dft2 is `DHF = -1.42620815`. This passes on master for me, so having the dHF=False pass on your PR will help verify the separate routing logic you added. With this in place, there won't be a need to separate out tests into another PR.; ```; #! SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. DHF = -0.01189736 #TEST; Eref_nh = {""SAPT ELST ENERGY"": -0.10190449, #TEST; ""SAPT EXCH ENERGY"": 0.36545706, #TEST; ""SAPT IND ENERGY"": -0.00840483, #TEST; ""SAPT DISP ENERGY"": -0.24398704, #TEST; ""CURRENT ENERGY"": 0.01122234} #TEST. Eref_h_disp = {""SAPT ELST ENERGY"": -0.10197193, #TEST; ""SAPT EXCH ENERGY"": 0.36569812, #TEST; ""SAPT IND ENERGY"": -0.00840370, #TEST; ""SAPT DISP ENERGY"": -0.26658499, #TEST; ""CURRENT ENERGY"": -0.01126250} #TEST. Eref_h_fixed = {""SAPT ELST ENERGY"": -0.10197193, #TEST; ""SAPT EXCH ENERGY"": 0.36569812, #TEST; ""SAPT IND ENERGY"": -0.00840370, #TEST; ""SAPT DISP ENERGY"": -0.26605283, #TEST; ""CURRENT ENERGY"": -0.01073034} #TEST. molecule dimer {; Ne; --; Ar 1 6.5; units bohr; }. set {; basis aug-cc-pvdz; scf_type df; sapt_dft_grac_shift_a 0.203293; sapt_dft_grac_shift_b 0.138264; }. # No hybrid kernel & no exch-disp scaling & no deltaHF; set SAPT_DFT_DO_DHF False; set SAPT_DFT_DO_HYBRID False; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; energy('sapt(dft)', molecule=dimer); for k, v in Eref_nh.items(): #TEST; if k in [""SAPT IND ENERGY"", ""CURRENT ENERGY""]:; ref = (v - DHF) / 1000.0; else:; ref = v / 1000.0; compare_values(ref, psi4.variable(k), 6, ""!hyb, xd=none, !dHF: "" + k) #TEST. # No hybrid kernel & no exch-disp scaling; set SAPT_DFT_DO_DHF True; set SAPT_DFT_DO_HYBRID False; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; energy('sapt(dft)', molecule=dimer); for k, v in Eref_nh.items(): #TEST; compare_values(v / 1000.0, psi4.variable(k), 6, ""!hyb, xd=none, dHF: "" +",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216:1485,TEST,TEST,1485,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216,1,['TEST'],['TEST']
Testability,", json_data[""success""], ""Success""). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py:644: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . expected = True, computed = False, label = 'Success'. def compare_integers(expected, computed, label):; """"""Function to compare two integers. Prints :py:func:`util.success`; when value *computed* matches value *expected*.; Performs a system exit on failure. Used in input files in the test suite.; ; """"""; if (expected != computed):; message = (""\t%s: computed value (%d) does not match (%d)."" % (label, computed, expected)); > raise TestComparisonError(message); E psi4.driver.p4util.exceptions.TestComparisonError: 	Success: computed value (0) does not match (1). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/p4util/util.py:244: TestComparisonError; -------------------------------------------------------------- Captured stdout call --------------------------------------------------------------; 	Options test......................................................PASSED; ____________________________________________________________________ test_dkh ____________________________________________________________________. @using_dkh; def test_dkh():; """"""dkh/molpro-2order""""""; ; Ne = psi4.geometry(""""""; 0 1; Ne; """"""); ; psi4.set_options({; 'reference': 'rhf',; 'basis': 'cc-pvtz-dk',; 'relativistic': 'dkh',; 'dkh_order': 2,; 'print': 2,; 'scf_type': 'pk'}); ; > e = psi4.energy('scf'). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py:790: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:460: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); /home/joao/miniconda3/lib/python3.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/820:18074,Test,TestComparisonError,18074,https://psicode.org,https://github.com/psi4/psi4/issues/820,2,"['Test', 'test']","['TestComparisonError', 'test']"
Testability,", the following error message is given:; ```; Traceback (most recent call last):; File ""/oasis/tscc/scratch/ebullvul/projects/POPC/timings/debug/psi4test/psi4_ccsdt.py"", line 28, in <module>; e = psi4.energy(model, molecule=mol); File ""/home/ebullvul/anaconda3/envs/psi4/lib/python3.10/site-packages/psi4/driver/driver.py"", line 526, in energy wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/ebullvul/anaconda3/envs/psi4/lib/python3.10/site-packages/psi4/driver/procrouting/proc.py"", line 989, in select_ccsd_t_ return func(name, **kwargs); File ""/home/ebullvul/anaconda3/envs/psi4/lib/python3.10/site-packages/psi4/driver/procrouting/proc.py"", line 2898, in run_ccenergy core.cctransort(ref_wfn); RuntimeError: ; Fatal Error: Matrix::gemm error: Number of rows and columns do not match.; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1670993662927/work/psi4/src/psi4/libmints/matrix.cc on line: 1389The most recent 5 function calls were:. psi::Matrix::gemm(bool, bool, double, psi::Matrix const*, psi::Matrix const*, double); psi::Matrix::transform(psi::Matrix const&, psi::Matrix const&, psi::Matrix const&); ```. I am not technically knowledgeable enough to interpret the information about the 'A', 'B', and 'C' matrices in the log file, but it seems like the problem is that their dimensions do not match. Additionally, I can also report that the calculation works if ANY of the following changes are made to the input:; 1) The ghost atoms are removed.; 2) The non-augmented basis set is used. (cc-pvtz rather than aug-cc-pvtz); 3) If {'cc_type': 'df'} is passed to psi4.set_options() to do density-fitted coupled cluster. I installed the stable branch of psi4 through anaconda, I have version ""1.7+6ce35a5"". Let me know if there is any more information you need to help solve this issue. The full log file from the CCSD(T)/aug-cc-pvtz calculation:; [psi4_ccsdt.txt](https://github.com/psi4/psi4/files/11144015/psi4_ccsdt.txt)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2916:3167,log,log,3167,https://psicode.org,https://github.com/psi4/psi4/issues/2916,2,['log'],['log']
Testability,", this does cause more test failures. ## Questions; * Because we're losing ""level shifting"", we're losing some keywords. I don't know how to deprecate these. If they're provided as module-level keywords, then I don't know the technical details of how you would raise a warning message. The bigger problem is when they're global keywords. DFOCC still uses ""level shifting"", so I can only raise a warning when I know what module the user is in. Thoughts on how to handle this?; * Should we be losing ""level shifting""? We can add _damping_ to `libdiis` if there's demand for it. I think there are better things to do with my time. ## Quick Test Status; * Switching out the DIIS version caused the `omp2p5-2` test's OMP2.5 energy to fall outside convergence criteria, again emphasizing how unstable orbital convergence in OCC is. We'll find out what the actual value is by the time I'm done.; * Losing ""level shifting"" was enough to break the `ocepa-grad2` test. This test asks for a higher-than-normal convergence from OCC, so that's no surprise. (I imagine Psi ups the energy convergence default when the user requests a gradient.) As a temp fix, I lowered the demanded energy convergence from 8 to 7. Even after that, we're outside the test tolerance, so I changed the value to boot. If anybody is dying to know the correct answer, I can run it on my Python code.; * `omp2-2` encountered oscillatory convergence, and I responded by lowering the convergence we seek. Again, coupling amplitude and orbital DIIS will break the oscillations and render this test hack unnecessary.; * We may have lost other full tests, but we'll get them back at the end. ## So Lori Knows What to Put in Changelog; - [x] Overhauled orbital convergence in the OCC module. As a result, the `level_shift` and `do_level_shift` keywords have been removed. Contact the developers if you've found a case where the new convergence is worse than old!. ## Checklist; - [x] [Quick tests run](http://psicode.org/psi4manual/master/build_",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1783:3386,test,test,3386,https://psicode.org,https://github.com/psi4/psi4/pull/1783,1,['test'],['test']
Testability,", xd=none, !dHF: "" + k) #TEST; > ; > # No hybrid kernel & no exch-disp scaling; > set SAPT_DFT_DO_DHF True; > set SAPT_DFT_DO_HYBRID False; > set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; > energy('sapt(dft)', molecule=dimer); > for k, v in Eref_nh.items(): #TEST; > compare_values(v / 1000.0, psi4.variable(k), 6, ""!hyb, xd=none, dHF: "" + k) #TEST; > ; > # Hybrid kernel & exch-disp scaling (DISP); > set SAPT_DFT_DO_HYBRID True; > set SAPT_DFT_EXCH_DISP_SCALE_SCHEME disp; > energy('sapt(dft)', molecule=dimer); > for k, v in Eref_h_disp.items(): #TEST; > compare_values(v / 1000.0, psi4.variable(k), 6, ""hyb, xd=disp, dHF: "" + k) #TEST; > ; > # Hybrid kernel & exch-disp scaling (FIXED); > set SAPT_DFT_DO_HYBRID True; > set SAPT_DFT_EXCH_DISP_SCALE_SCHEME fixed ; > set SAPT_DFT_EXCH_DISP_FIXED_SCALE 0.770; > energy('sapt(dft)', molecule=dimer); > for k, v in Eref_h_fixed.items(): #TEST; > compare_values(v / 1000.0, psi4.variable(k), 6, ""hyb, xd=fixed, dHF: "" + k) #TEST; > ```; > ; > * I think it should be clear from the output file what exch-disp scheme/scale is applied. So perhaps add a couple lines to the printout like below. This should also satisfy Jonathon's request that the output file show the change in scaling defaults.; > ; > ```; > ==> E20 Dispersion (MP2) <==; > ; > ; > Disp20 (MP2) -0.37881730 [mEh]; > Exch-Disp20,u 0.02037338 [mEh]; > Scaling Scheme: Disp; > Scaling Factor: 0.707; > ; > SAPT(DFT) Results; > ---------------------------------------------------------------------------------------------------------; > Electrostatics -0.10197192 [mEh] -0.06398835 [kcal/mol] -0.26772724 [kJ/mol]; > Elst1,r -0.10197192 [mEh] -0.06398835 [kcal/mol] -0.26772724 [kJ/mol]; > ```. Added the !dHF cases in `sapt-dft1` and `sapt-dft2`. For `sapt-dft-api`, the dHF feature is intrinsically unsupported, because the dHF calculation is not fully contained in the sapt_dft() call; a part of it is in the run_sapt_dft() call. . Added the scaling scheme/factor output lines in the output f",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2481#issuecomment-1284653967:3274,TEST,TEST,3274,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1284653967,1,['TEST'],['TEST']
Testability,- Check for working C compiler: /usr/bin/clang; -- Check for working C compiler: /usr/bin/clang -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Check for working CXX compiler: /usr/bin/clang++; -- Check for working CXX compiler: /usr/bin/clang++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- The Fortran compiler identification is GNU; -- Check for working Fortran compiler: /usr/local/bin/gfortran; -- Check for working Fortran compiler: /usr/local/bin/gfortran -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /usr/local/bin/gfortran supports Fortran 90; -- Checking whether /usr/local/bin/gfortran supports Fortran 90 -- yes; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test Open,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/36:1495,Test,Test,1495,https://psicode.org,https://github.com/psi4/psi4/issues/36,1,['Test'],['Test']
Testability,"- If we don't want to install fsapt I can add an exclusion; - I'll add an exclusion for that too; - It's the Python interface. That's a super non normal install location for Linux, so I prefer that when you do the Conda-binary tweak the `CMAKE_INSTALL_LIBDIR` variable. Side note, we have to decide whether we are only distributing `psi4.so` or all libraries. In theory, it would be nice to move each libraries' Python interface into its library and treat each as an individual module. Alternatively, if we only want to distribute `psi4.so` then we may want to explore compiling all the source into a single library (i.e. don't have the intermediate libraries like mints,scf_solver, etc.). CMake tracks rebuilding on a file by file basis so this shouldn't add any time to recompilation (in fact it may shorten them as it may allow for better dependency tracking).; - Actually it should. When I do `find_package` Psi4, Psi4 needs those scripts to configure itself; - An oversight ; - What versioning is missing?; - Quite frankly I don't like having both samples and tests, it's a ton of code duplication. I hadn't been worrying about samples so they've been along for the ride (and got messed up with the folder shuffle somehow); - If you mean `setup.py`, feel free to write it, but in my opinion it is again code duplication, I had envisioned this as the final interface. On my laptop I install with:. ``` .sh; cmake -Bbuild -H.; make; make install ; ```. I feel like that's as nice as it gets.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-234531219:1065,test,tests,1065,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-234531219,1,['test'],['tests']
Testability,"- Psi freq by analytic ~(only methane and ammonia pass)~ All pass now, thanks to @andysim ; - [x] fix the embarrassing bug (I'll do you a coding favor if you spot it, but I'm not admitting it otherwise); - [x] better handle non-stationary. probably need an option to force-rot-space-inclusion but by default, `frequency()` does a gradient to determine if rotational projection is safe, then another flag to query external field and company to see if even translational projection is appropriate. ; - [x] more testing of isotopic, partial, non-stationary, etc., particularly wrt normco not just freq; - Add `compare_dicts` and `compare_molrecs` comparison functions. Former uses `deepdiff` module and does recursive comparison (sensitive to types). Can exempt fields with `forgive` arg. Latter makes use of former and also allows geoms to change if warranted by fix_com/orientation (checks via aligner).; - convert qcdb test suite from GnuMake (yes, that old) to pytest. switch compare_* fns to raise `TestComparisonError`, not `sys.exit(1)`.; - have to temporarily set `0 2` in some test cases, b/c the reconciler wants physically reasonable values, but the input molecule isn't currently passing through the code that would set those defaults.; - updated v2rdm_casscf pinning to one Eugene already fixed up to work w/psi; * **User-Facing for Release Notes**. ## Questions; - [ ] Right now, results of harmonic analysis is a dict of namedtuples with numpy arrays (contents and interface below). This is pretty convenient to access and work with. But it is numpy arrays attached to Wfn and thus mixing array classes on Wfn and unable to access c-side. Is this ok? Better ideas?; ```; Returns; -------; dict, text; Returns dictionary of VibrationAspect objects (fields: lbl unit data comment); Also returns text suitable for printing; ; +---------------+--------------------------------------------+-----------+------------------------------------------------------+; | key | description (lbl & comment)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/834:12332,Test,TestComparisonError,12332,https://psicode.org,https://github.com/psi4/psi4/pull/834,1,['Test'],['TestComparisonError']
Testability,"- The fd-freq-energy test fails for me if the exit() command is removed---the 5-point frequencies disagree by slightly more than 0.001 (the tolerance threshold).; - Thanks for the pointer on dftd3. I was indeed looking at the wrong documentation. The dftd3 tests needed only a small change to work (see above commit).; - One option for format_kwargs_for_input is to reopen the file in binary mode before calling it and then reopening the file in (normal) text mode afterwards. Messy but it should work under python 2 and python 3. Regarding checking against different platforms, have you considered using buildbot to automate the process? Given psi4 is so easy to checkout, compile and test, setting up buildbot would be pretty easy. Let me know if you'd like a hand/advice---I'm moving to using psi4 for as much as possible so I'm happy to spend time helping to make it work more smoothly.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/9#issuecomment-20552847:21,test,test,21,https://psicode.org,https://github.com/psi4/psi4/pull/9#issuecomment-20552847,3,['test'],"['test', 'tests']"
Testability,"- [ ] 74. x2c-perturb-h: mismatched directory (x2c-perturb-h) and ctest registration name (x2c-perturb_h). `vi x2c-perturb-h/CMakeLists.txt`; ```; - [x] Filled in the rest of the test_input's as generated from script. There's ~3 hidden, but otherwise, the full test suite can be run from pytest. On 20 cores, I get `0 failed, 3660 passed, 96 skipped, 272 xfailed, 4 xpassed, 312 warnings in 2011.32s (0:33:31)`. For interest, the culprits over 2 minutes are:; ```; =========================================================================================================== slowest 50 durations ============================================================================================================; 937.48s call tests/linK-2/test_input.py::test_linK_2; 875.59s call tests/snsmp2/cc-cc/test_input.py::test_snsmp2_cc_cc; 855.00s call tests/fd-freq-energy-large/test_input.py::test_fd_freq_energy_large; 569.12s call tests/density-screen-2/test_input.py::test_density_screen_2; 499.66s call tests/fsapt1/test_input.py::test_fsapt1; 242.29s call tests/snsmp2/cf-o/test_input.py::test_snsmp2_cf_o; 229.90s call tests/opt13/test_input.py::test_opt13; 221.20s call tests/sapt-exch-ind30-inf/test_input.py::test_sapt_exch_ind30_inf; 204.84s call tests/chemps2/caspt2-n2/test_input.py::test_chemps2_caspt2_n2; 197.04s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[wB97M-V- - ]; 193.31s call tests/cbs-xtpl-func/test_input.py::test_cbs_xtpl_func; 189.76s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[LC-VV10- - ]; 183.86s call tests/isapt1/test_input.py::test_isapt1; 181.63s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[wB97X-V- - ]; 174.31s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[B97M-V- - ]; 171.48s call tests/sapt4/test_input.py::test_sapt4; 169.47s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[VV10- - ]; 160.20s call tests/fd-freq-gradient-large/test_input.py::test_fd_freq_gradient_large; 157.12s call tests/",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2549:3403,test,tests,3403,https://psicode.org,https://github.com/psi4/psi4/pull/2549,1,['test'],['tests']
Testability,"- [ ] Implement logging for PsiAPI mode so that output files (currently w/o Psi4 header or any record of input commands or options) aren't so mysterious. At minimum, print to output the `psi4.header()` at file creation and e.g. `>>> aggh = psi4.energy(""scf"")` and `>>> psi4.set_options({""scf_type"": ""pk""})` to track what was done.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/402#issuecomment-284798071:16,log,logging,16,https://psicode.org,https://github.com/psi4/psi4/issues/402#issuecomment-284798071,1,['log'],['logging']
Testability,"- [ ] Strongly suspect ""def energy"" examples 4 & 5 in share/python/driver.py don't work or don't work as advertized. test. if fail, see if can get working by wfn-passing; - [ ] depending on previous findings, either document (example in previous would do) what used to be ""bypass_scf"" in action or purge it from docs and driver and create new ticket to make it work again.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/353:117,test,test,117,https://psicode.org,https://github.com/psi4/psi4/issues/353,1,['test'],['test']
Testability,- [ ] build it (https://github.com/piecuch-group/psi4_cct3); - [ ] add to buildsys; - [ ] add some tests; - [ ] add to docs; - [ ] add conda package,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1833:99,test,tests,99,https://psicode.org,https://github.com/psi4/psi4/issues/1833,1,['test'],['tests']
Testability,- [ ] code; - [ ] tests; - [ ] docs. @yxie326,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1834:18,test,tests,18,https://psicode.org,https://github.com/psi4/psi4/issues/1834,1,['test'],['tests']
Testability,- [x]	103 - cubeprop (Failed); - [x]	104 - cubeprop-frontier (Failed); - [x]	123 - density-screen-2 (Timeout); - [x]	161 - dft-grad-lr1 (Failed); - [x]	162 - dft-grad-lr2 (Failed); - [x]	163 - dft-grad-lr3 (Failed); - [x]	168 - dft-b2plyp (Failed); - [x]	170 - dft-ghost (Failed); - [x]	171 - dft-grad-meta (Failed); - [x]	173 - dft-freq-analytic (Failed); - [x]	174 - dft-grad1 (Failed); - [x]	175 - dft-grad2 (Failed); - [x]	177 - dft-b3lyp (Failed); - [x]	178 - dft1 (Failed); - [x]	179 - dft-vv10 (Failed); - [x]	180 - dft1-alt (Failed); - [x]	181 - dft2 (Failed); - [x]	182 - dft3 (Failed); - [x]	183 - dft-omega (Failed); - [x]	226 - frac-ip-fitting (Failed); - [x]	228 - frac-traverse (Failed); - [x]	234 - mbis-1 (Failed); - [x]	235 - mbis-2 (Failed); - [x]	236 - mbis-3 (Failed); - [x]	237 - mbis-4 (Failed); - [x]	238 - mbis-5 (Failed); - [x]	239 - mbis-6 (Failed); - [ ]	245 - mints3 (Failed) (fails because ref data are deposited in Gaussian ordering); - [x]	287 - olccd2 (Failed); - [x]	302 - omp3-3 (Failed); - [x]	307 - opt-lindep-change (Failed); - [x]	321 - opt13 (Failed); - [x]	348 - pywrap-checkrun-rhf (Failed); - [x]	350 - pywrap-checkrun-uhf (Failed); - [x]	366 - sapt-dft-api (Failed); - [x]	367 - sapt-dft-lrc (Failed); - [x]	390 - scf-level-shift-rks (Failed); - [x]	397 - soscf-dft (Failed); - [x]	401 - sapt-dft1 (Failed); - [x]	402 - sapt-dft2 (Failed); - [x]	405 - dft-custom (Failed); - [x]	425 - cubeprop-esp (Failed); - [ ]	434 - scf-coverage (Failed); - [x]	435 - dft-custom-dhdf (Failed); - [x]	437 - dft-custom-mgga (Failed); - [x]	438 - dft-custom-gga (Failed); - [x]	446 - tdscf-3 (Failed); - [x]	447 - tdscf-4 (Failed); - [x]	449 - tdscf-6 (Failed); - [x] 459 - linK-2 (Timeout); - [ ] 324 - opt-irc-2 (Failed). ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2537:3528,Test,Tests,3528,https://psicode.org,https://github.com/psi4/psi4/pull/2537,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"- [x] At the end of the detailed build directions in https://github.com/psi4/psi4/wiki/3_Building, add a step `7. Configure Runtime` directing user to set scratch and otherwise configure environment (e.g., add to path).; - [x] In docs/sphinxman/source/external.rst, break up ""scratch files and the ~/.psi4rc file"" into separate sections so that we're not suggesting psi4rc is the best way to set your scratch (pretty much, PSI_SCRATCH envvar is). Use `make sphinxmini` if you need to test the docs build.; - [x] In docs, show example csh/bash in the PSI_SCRATCH envvar section. Can probably steal some text/code from conda.rst.; - [x] In docs, show an example of a threaded pbs job file. Here's one to work from. See @loriab about any parts that are obscure. ```; #!/bin/tcsh; ## this file auto-generated by submit4 ...; #PBS -j oe ; #PBS -l walltime=80:00:00:00; #PBS -l pmem=2120mb; #PBS -N SSI-084TYR-095LEU-1-dimer; #PBS -V. setenv OMP_NUM_THREADS 4; setenv MKL_NUM_THREADS 4; cd $PBS_O_WORKDIR; setenv myscratch /scratch/loriab/psi4.$PBS_JOBID. cat $PBS_NODEFILE; foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Creating scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; ssh $i mkdir -p $myscratch; end; unsetenv PSI4DATADIR; unsetenv PSIDATADIR; if ! ( $?PYTHONPATH ) setenv PYTHONPATH """"; setenv PYTHONPATH /theoryfs2/ds/cdsgroup/psi4aux:$PYTHONPATH; setenv PSI_SCRATCH $myscratch; setenv PATH /theoryfs2/ds/cdsgroup/miniconda/bin:${PATH}; setenv PATH /theoryfs2/ds/cdsgroup/scripts/bin:${PATH}; setenv PATH /theoryfs2/ds/loriab/chem/psi4_trials/c4/c4v2/cfour_v2.00beta/bin:${PATH}; setenv PATH /theoryfs2/ds/cdsgroup/psi4-compile/mrcc:${PATH}; setenv PSIDATADIR /theoryfs2/ds/cdsgroup/psi4-install/psi3930/share/psi4; source /theoryfs2/common/software/intel2016/bin/compilervars.csh intel64; /theoryfs2/ds/cdsgroup/scripts/bin/runpsi.py -i SSI-084TYR-095LEU-1-dimer.in -o SSI-084TYR-095LEU-1-dimer.out. foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Removing scratch directory",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/109:484,test,test,484,https://psicode.org,https://github.com/psi4/psi4/issues/109,1,['test'],['test']
Testability,"- [x] No user-facing changes. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Removed a some unused macro definitions, inlined the single use of `#define size_det`; - [x] Removed `std::vector<size_t> ioff`, its getter function, and initialization from `MOInfoBase`. It looks like this 5 M element array was getting non-trivially initialized every time an `MOInfoBase` object (or one derived from it) was constructed. RAM usage of these objects should now be 40 MB lower, and their construction should be faster by an unknown amount.; - [x] Removed some class declarations, included the appropriate `.h` instead where required instead of them (Note: some of this was reverted after reviews, see discussion on this PR.); - [x] Touched-up what-includes-what, along the lines of removing what is not required, but adding what is; - [x] Removed declarations for `tuning()` and `read_mo_spaces2()`, as they are never defined; - [x] Removed some getters from `MOInfo`, either unused or already defined in the base class.; - [x] Removed unused fn `MOInfoBase::get_irr_labs()`; - [x] Renamed `MOInfoBase::get_irr_labs(int i)` to `get_irr_lab`, as it only gets one label. Rename propagated to all of its call sites.; - [x] Removed unused fn `MOInfoBase::get_scf_mos(int i)`; - [x] Moved the `intvec` and `boolvec` typedefs from global namespace, to `namespace psi`. Also modernized them to the `using` syntax.; - [x] Removed an unused `extern ModelSpace* model_space` declaration which was cluttering `namespace psi`; - [x] <strike>Replaced `exit(PSI_RETURN_FAILURE)` and `exit(1)` with `throw PSIEXCEPTION`</strike> Obviated by PR #3118. ## Checklist; - [x] No new features; - [x] Tests run by the CI were passing, but now they are failing for unclear reasons. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3112:2601,Test,Tests,2601,https://psicode.org,https://github.com/psi4/psi4/pull/3112,1,['Test'],['Tests']
Testability,"- [x] PSI_API doesn't work for gnu compiler and pointer returning fns whe not at start of decl. Affects `v2rdm_casscf/tests/v2rdm6/input.dat`; - [x] Adds to python module, `psi4.executable` returning the psithon script/binary/executable. Also cleaned up main psi4 namespace by deleting some intermediate strings.; - [x] To the `psi4Config.cmake` consumed by downstream, defines `psi4_SYS_PATH` which is the full path needed to be added to `sys.path` in order to `import psi4`. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1034:118,test,tests,118,https://psicode.org,https://github.com/psi4/psi4/pull/1034,1,['test'],['tests']
Testability,"- [x] apply decisions from http://forum.psicode.org/t/naming-considerations-for-cepa-0/156/5 to driver, managed methods; - [x] make sure to kill off `CEPA_TYPE`; - [x] adjust tables in occ.rst and fnocc.rst and capabilities table and proc_py.rst; - [x] adjust test cases. make analogous cepa-module to mp2-module for checking up on these things?; - [x] adjust methods dict in cbs wrapper; - [x] notify person I was corresponding with on forum about cepa about calling changes",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/293:260,test,test,260,https://psicode.org,https://github.com/psi4/psi4/issues/293,1,['test'],['test']
Testability,"- [x] bump cmake to 3.15 from 3.8 (to get decent FindPython with NumPy); - [x] switch out Python detection to fix #2060. note that all the CM vars now start `Python_`, not `PYTHON_`; - [x] use prebuilt g2g for Windows Azure; - [x] bump g2g to 2.0.7; - [ ] ~added some fn redefs for Windows in psi4-dec.h . right place?~; - [x] get windows conda package building through azure. Ok, Windows conda package was the original aim of this PR, but that's also in the Libxc5 PR that uses prebuilt g2g & libxc & libint2. This PR switched to using the new Python detection advocated by pb11: https://pybind11.readthedocs.io/en/stable/compiling.html#findpython-mode . This means we're not using the FindPythonLibsNew that psi4 has a copy of from pb11 and which in turn we install for the benefit of plugins. Of course that means we need to use cmake 3.15+ (released July 2019). That's quite a leap from the 3.8+ we had before, and lgtm doesn't have it, hence that failure. We can drop a lot of explicit properties on `core` since pb11 is providing them (see https://github.com/pybind/pybind11/blob/master/tools/pybind11NewTools.cmake and https://github.com/pybind/pybind11/blob/master/tools/pybind11Common.cmake), but I'm not sure if this is the right time to make the leap. I'm also a bit surprised that `add_library(... MODULE)` seems to be working with the plugin tests where before we used `SHARED` to appear like a linux lib. Glad of opinions here.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2048:1355,test,tests,1355,https://psicode.org,https://github.com/psi4/psi4/pull/2048,1,['test'],['tests']
Testability,"- [x] search docs and driver for 'df-', 'conv-' and 'cd-' in energy(), etc. names. kill them off, substituting if relevant. e.g., ""energy('df-fno-ccsd(t)')"" becomes ""set cc_type df\nenergy('fno-ccsd(t)')"". Leave alone any offenders in the reST tables in the driver.py docstrings, as that's someone else's task, and changing them would be confusing.; - [x] change 2015 to 2016, particularly in copyright. I did psicode.org; - [x] look in docs and test cases for ""set global"" or ""set globals"" and kill the global(s); - [x] in source code (primarily in doc/sphinxman/source), grep for psi4/psi4public and change to psi4/psi4",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/349:446,test,test,446,https://psicode.org,https://github.com/psi4/psi4/issues/349,1,['test'],['test']
Testability,- _A_ tests/fsapt-diff1/fsaptD-ref/vis.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-116 (12); > - _A_ tests/fsapt-diff1/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-117 (71); > - _A_ tests/fsapt-diff1/output.ref; > https://github.com/psi4/psi4/pull/470/files#diff-118 (1080); > - _A_ tests/fsapt1/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-119 (3); > - _A_ tests/fsapt1/README; > https://github.com/psi4/psi4/pull/470/files#diff-120 (50); > - _A_ tests/fsapt1/fsapt-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-121 (51); > - _A_ tests/fsapt1/fsapt-ref/Disp.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-122 (26); > - _A_ tests/fsapt1/fsapt-ref/Disp.png; > https://github.com/psi4/psi4/pull/470/files#diff-123 (0); > - _A_ tests/fsapt1/fsapt-ref/Disp.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-124 (17); > - _A_ tests/fsapt1/fsapt-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-125 (51); > - _A_ tests/fsapt1/fsapt-ref/Elst.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-126 (26); > - _A_ tests/fsapt1/fsapt-ref/Elst.png; > https://github.com/psi4/psi4/pull/470/files#diff-127 (0); > - _A_ tests/fsapt1/fsapt-ref/Elst.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-128 (17); > - _A_ tests/fsapt1/fsapt-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-129 (0); > - _A_ tests/fsapt1/fsapt-ref/Exch.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-130 (0); > - _A_ tests/fsapt1/fsapt-ref/Exch.png; > https://github.com/psi4/psi4/pull/470/files#diff-131 (0); > - _A_ tests/fsapt1/fsapt-ref/Exch.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-132 (0); > - _A_ tests/fsapt1/fsapt-ref/Geom.png; > https://github.com/psi4/psi4/pull/470/files#diff-133 (0); > - _A_ tests/fsapt1/fsapt-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-134 (0); > - _A_ tests/fsapt1/fsapt-ref/IndAB.pdb; > https://github.com/psi4/psi4/pull/47,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/470#issuecomment-249267903:14574,test,tests,14574,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903,1,['test'],['tests']
Testability,- _A_ tests/fsapt1/fsapt-ref/fB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-150 (0); > - _A_ tests/fsapt1/fsapt-ref/fragA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-151 (0); > - _A_ tests/fsapt1/fsapt-ref/fragB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-152 (0); > - _A_ tests/fsapt1/fsapt-ref/fsapt.dat; > https://github.com/psi4/psi4/pull/470/files#diff-153 (0); > - _A_ tests/fsapt1/fsapt-ref/geom.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-154 (0); > - _A_ tests/fsapt1/fsapt-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-155 (0); > - _A_ tests/fsapt1/fsapt-ref/orient.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-156 (0); > - _A_ tests/fsapt1/fsapt-ref/run.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-157 (0); > - _A_ tests/fsapt1/fsapt-ref/vis.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-158 (0); > - _A_ tests/fsapt1/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-159 (0); > - _A_ tests/fsapt1/output.ref; > https://github.com/psi4/psi4/pull/470/files#diff-160 (0); > - _A_ tests/fsapt2/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-161 (0); > - _A_ tests/fsapt2/README; > https://github.com/psi4/psi4/pull/470/files#diff-162 (0); > - _A_ tests/fsapt2/fsapt-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-163 (0); > - _A_ tests/fsapt2/fsapt-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-164 (0); > - _A_ tests/fsapt2/fsapt-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-165 (0); > - _A_ tests/fsapt2/fsapt-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-166 (0); > - _A_ tests/fsapt2/fsapt-ref/IndBA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-167 (0); > - _A_ tests/fsapt2/fsapt-ref/QA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-168 (0); > - _A_ tests/fsapt2/fsapt-ref/QB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-169 (0); > - _A_ t,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/470#issuecomment-249267903:18021,test,tests,18021,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903,1,['test'],['tests']
Testability,"- runs `ctest -L quick -j2` through python rather than bash; - finds the test output files that are in directories a layer deeper than expected, e.g. the pcmsolver that's failing on the wavefunction_pass PR; - writes `compare_values()` output to output.dat (why haven't we done this before?); - someone who understands how travis deals with run.log should examine this bit: `tciout = open('run.log', 'a')`",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/247:73,test,test,73,https://psicode.org,https://github.com/psi4/psi4/pull/247,3,"['log', 'test']","['log', 'test']"
Testability,-- Docs: https://docs.pytest.org/en/stable/warnings.html; ========================================================================= short test summary info =========================================================================; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:13: Not detecting module gdma. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:162: Not detecting module mrcc. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:186: Not detecting module chemps2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:233: Not detecting module mp2d. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:428: Not detecting module libefp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:486: Not detecting module pcmsolver. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:733: Not detecting module erd. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:741: Not detecting module simint. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:783: Not detecting module cfour. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:816: Not detecting module v2rdm_casscf. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:868: Not detecting module gpu_dfcc. Install package if necessary to enable tests.; SKIPPED ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:12932,test,tests,12932,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,1,['test'],['tests']
Testability,"-- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Could NOT find OpenMP (missing: OpenMP_C_FLAGS OpenMP_CXX_FLAGS) ; -- Math lib search order is MKL;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- Found BLAS: SYSTEM_NATIVE (/usr/lib/libblas.dylib); -- Found LAPACK: SYSTEM_NATIVE (/usr/lib/liblapack.dylib); -- Found libdl: /usr/lib/libdl.dylib ; -- Looking for include file pthread.h; -- Looking for include file pthread.h - found; -- Looking for pthread_create; -- Looking for pthread_create - found; -- Found Threads: TRUE ; -- Found PythonInterp: /Users/loriab/anaconda/bin/python (found version ""2.7.10"") ; -- Found Python: /Users/loriab/anaconda/lib/libpython2.7.dylib ; -- Could NOT find Boost; -- Boost 1.55.0 not found. The pre-packaged version will be built.; -- Libraries to be built: filesystem, python, regex, serialization, system, timer, chrono, thread; -- Toolset to be used: clang; -- Looking for MKL_Free_Buffers; -- Looking for MKL_Free_Buffers - not found; -- Use the commands in setup_command to reproduce this build; -- dftd3 executable for interfaced DFTD3 found. Test cases added.; -- Configuring done; -- Generating done; -- Build files have been written to: /Users/loriab/linux/psihub/master/psi4/objdir2; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/164#issuecomment-131152863:5294,Test,Test,5294,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863,1,['Test'],['Test']
Testability,"-- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP Fortran flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP: -fopenmp ; -- Math lib search order is MKL;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- No BLAS/LAPACK implementation found, but explicit libraries specified; -- No Sphinx, no docs. Pre-built documentation at http://sirius.chem.vt.edu/psi4manual/latest/index.html; -- Found libutil: /usr/lib64/libutil.so ; -- Found libm: /usr/lib64/libm.so ; -- Found librt: /usr/lib64/librt.so ; -- Found libdl: /usr/lib64/libdl.so ; -- Looking for include file pthread.h; -- Looking for include file pthread.h - found; -- Looking for pthread_create; -- Looking for pthread_create - found; -- Found Threads: TRUE ; -- Found PythonInterp: /cluster/apps/python/2.7.6/x86_64/bin/python (found version ""2.7.6"") ; -- Found Python: /cluster/apps/python/2.7.6/x86_64/lib64/libpython2.7.so ; -- Boost version: 1.55.0; -- Found the following Boost libraries:; -- filesystem; -- python; -- regex; -- serialization; -- system; -- timer; -- chrono; -- thread; -- CheMPS2 not found. The pre-packaged version will be built.; -- Looking for MKL_Free_Buffers; -- Looking for MKL_Free_Buffers - not found; -- Looking for include file mm_malloc.h; -- Looking for include file mm_malloc.h - found; -- DKH in LibMints ENABLED; -- GDMA is ENABLED; -- PCMSolver not found. The pre-packaged version will be built.; -- Use the commands in setup_command to reproduce this build; -- Configuring incomplete, errors occurred!; See also ""/scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeOutput.log"".; See also ""/scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeError.log"".; ```. How can I disable the copying of the test files ? Any help is appreciated. Best regards. Sam",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/581:13075,log,log,13075,https://psicode.org,https://github.com/psi4/psi4/issues/581,3,"['log', 'test']","['log', 'test']"
Testability,"------------------------------------------------------!. Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); <end of output>; Test time = 16.57 sec; ----------------------------------------------------------; Test Failed.; ""dft-custom"" end time: Jan 05 15:36 EST; ""dft-custom"" time elapsed: 00:00:16; ----------------------------------------------------------; ```. ```; Printing out the relevant lines from the Psithon --> Python processed input file:; core.IO.set_default_namespace(""ne""); core.set_global_option(""DFT_SPHERICAL_POINTS"", 770); core.set_global_option(""D_CONVERGENCE"", 1e-5); core.set_global_option(""BASIS"", ""cc-pvdz""); activate(ne); --> edft = energy(""ft97""); compare_values(-128.850056371480, edft, 4, ""Ne: FT97""). !-------------------------------------------------------!; ! !; ! Could not converge SCF iterations in 100 iterations. !; ! !; !-------------------------------------------------------!. Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); <end of output>; Test time = 29.81 sec; ----------------------------------------------------------; Test Failed.; ""dft-custom-gga"" end time: Jan 05 15:36 EST; ""dft-custom-gga"" time elapsed: 00:00:29; ----------------------------------------------------------; ```. ```; Printing out the relevant lines from the Psithon --> Python processed input file:; anl_grad = gradient('scf', dft_functional=func, dertype=1); compare_matrices(func_uks_reference, anl_grad, 6, ""Analytic vs Reference CAM-like UKS Gradients""); compare_matrices(anl_grad, fd_grad, 6, ""Analytic vs FD CAM UKS Gradients""); anl_grad = gradient('scf', dft_functional=""CAM-B3LYP"", dertype=1); fd_grad = gradient('scf', dft_functional=""CAM-B3LYP"", dertype=0); --> compare_matrices(cam_b3lyp_uks_reference, anl_grad, 6, ""Analytic vs Reference CAM Gradients""); compare_matrices(anl_grad, fd_grad, 4, ""Analytic vs FD CAM Gradients""). !----------------------------------------------------------------------------------!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-754900620:2119,Test,Test,2119,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-754900620,1,['Test'],['Test']
Testability,"-------------------------------------------------------------------------------------------------- Captured stdout call ------------------------------------------------------------------------------------------------------------; SCF energy............................................................................FAILED; ____________________________________________________________________________________________________________ test_tu1_h2o_energy ____________________________________________________________________________________________________________. @ctest_labeler(""tutorial;quick;smoke""); def test_tu1_h2o_energy():; > ctest_runner(__file__). stage/lib/psi4/tests/tu1-h2o-energy/test_input.py:5: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. inputdatloc = '/psi/gits/hrw-testgcc/objdir-defenv10/stage/lib/psi4/tests/tu1-h2o-energy/test_input.py', extra_infiles = None, outfiles = None. def ctest_runner(inputdatloc, extra_infiles: List =None, outfiles: List =None):; """"""Called from a mock PyTest function, this takes a full path ``inputdatloc`` to an ``""input.dat""`` file set up for; CTest and submits it to the ``psi4`` executable. Any auxiliary files with names listed in ``extra_infiles`` that reside; alongside ``inputdatloc`` are placed in the Psi4 execution directory.; ; """"""; from qcengine.util import execute; import psi4; ; # Pass runtime env through to `execute`; # * appending Psi4 import path (after all, it worked previous line) since partial/relative paths not robust; psiimport = Path(psi4.__file__).parent.parent; env = os.environ.copy(); env[""PYTHONPATH""] = env[""PYTHONPATH""] + os.pathsep + str(psiimport); ; ctestdir = Path(inputdatloc).resolve().parent; ; if (ctestdir / ""input.dat"").exists():; inputdat = ""input.dat""; elif (ctestdir / ""input.py"").exists():; inputdat = ""in",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888:5000,test,testgcc,5000,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888,2,['test'],"['testgcc', 'tests']"
Testability,"----------------------------------------------------------; Psi4: An Open-Source Ab Initio Electronic Structure Package; Psi4 1.2rc3.dev5. Git: Rev {master} f807e08. R. M. Parrish, L. A. Burns, D. G. A. Smith, A. C. Simmonett,; A. E. DePrince III, E. G. Hohenstein, U. Bozkaya, A. Yu. Sokolov,; R. Di Remigio, R. M. Richard, J. F. Gonthier, A. M. James,; H. R. McAlexander, A. Kumar, M. Saitow, X. Wang, B. P. Pritchard,; P. Verma, H. F. Schaefer III, K. Patkowski, R. A. King, E. F. Valeev,; F. A. Evangelista, J. M. Turney, T. D. Crawford, and C. D. Sherrill,; J. Chem. Theory Comput. 13(7) pp 3185--3197 (2017).; (doi: 10.1021/acs.jctc.7b00174). -----------------------------------------------------------------------. Psi4 started on: Wednesday, 13 June 2018 11:12AM. Process ID: 23105; Host: scychon-OptiPlex-7010; PSIDATADIR: /root/psi4/build/stage/share/psi4/share/psi4; Memory: 500.0 MiB; Threads: 1. ==> Input File <==. --------------------------------------------------------------------------; #! DFT (LDA/GGA) test of custom implementations in: gga_superfuncs.py. # copy&paste list:; # ""b86bpbe"" : build_b86bpbe_superfunctional,; # ""blyp"" : build_blyp_superfunctional,; # ""svwn"" : build_svwn_superfunctional,; # ""pw86pbe"" : build_pw86pbe_superfunctional,; # ""pbe"" : build_pbe_superfunctional,; # ""bp86"" : build_bp86_superfunctional,; # ""pw91"" : build_pw91_superfunctional,; # ""ft97"" : build_ft97_superfunctional,; # ""bop"" : build_bop_superfunctional,; # ""mpwpw"" : build_mpwpw_superfunctional,. ## Programs/References; # ORCA v.4.0.1: cc-pVDZ, RI-MP2, no FC, GRID7, nori; # Gaussian 09: cc-pVDZ 5D SP Int(Grid=99770); # Turbomole 7.2, nori, grid 7; # NWCHEM grid: xfine, TOLERANCES accCoul 1e-14; ## Notes; # BP86 can come with PW91 or VWN5 LDA correlation. Deviations are quite large either way.; # SOGGA11 only up to 4 decimals even for Ne with fine grid. ggaval ={; ""blyp"" : -128.894855380969, # ORCA; ""svwn"" : -128.357941704 , # G09; ""pbe"" : -128.79305010293, # TM LDA-PW91; #""pbe"" : -",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1038#issuecomment-396997775:1114,test,test,1114,https://psicode.org,https://github.com/psi4/psi4/issues/1038#issuecomment-396997775,1,['test'],['test']
Testability,"----------------------------------------------------; Psi4: An Open-Source Ab Initio Electronic Structure Package; Psi4 1.2a1.dev612 . Git: Rev {macintelclang} 94b2ae0 dirty. R. M. Parrish, L. A. Burns, D. G. A. Smith, A. C. Simmonett,; A. E. DePrince III, E. G. Hohenstein, U. Bozkaya, A. Yu. Sokolov,; R. Di Remigio, R. M. Richard, J. F. Gonthier, A. M. James,; H. R. McAlexander, A. Kumar, M. Saitow, X. Wang, B. P. Pritchard,; P. Verma, H. F. Schaefer III, K. Patkowski, R. A. King, E. F. Valeev,; F. A. Evangelista, J. M. Turney, T. D. Crawford, and C. D. Sherrill,; J. Chem. Theory Comput. 13(7) pp 3185--3197 (2017).; (doi: 10.1021/acs.jctc.7b00174). -----------------------------------------------------------------------. Psi4 started on: Wednesday, 25 October 2017 01:40PM. Process ID: 40933; PSIDATADIR: /Users/github/Git/tmppsi/objdir-ompclang3/stage/usr/local/psi4/share/psi4; Memory: 500.0 MiB; Threads: 1; ; ==> Input File <==. --------------------------------------------------------------------------; #! 6-31G** H2O+ Test CISD Energy Point. refnuc = 8.8046866186391 #TEST; refscf = -75.6213422266812 #TEST; refci = -75.7850671871149 #TEST; refcorr = refci - refscf #TEST. molecule h2o {; 0 1; O; H 1 1.00; H 1 1.00 2 103.1; }. set {; # reference rohf; basis 6-31G**; freeze_core true; # icore 0; }. thisenergy = energy('cisd'). #compare_values(refnuc, h2o.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST ; #compare_values(refscf, get_variable(""SCF total energy""), 7, ""SCF energy"") #TEST; #compare_values(refci, thisenergy, 7, ""CI energy"") #TEST; #compare_values(refcorr, get_variable(""CI CORRELATION ENERGY""), 7, ""CI correlation energy"") #TEST; --------------------------------------------------------------------------. *** tstart() called on mac-psinet.sherrill.chemistry.gatech.ed; *** at Wed Oct 25 13:40:59 2017. => Loading Basis Set <=. Name: 6-31G**; Role: ORBITAL; Keyword: BASIS; atoms 1 entry O line 149 file /Users/github/Git/tmppsi/objdir-ompclang3/stag",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/828#issuecomment-339412812:1281,Test,Test,1281,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339412812,1,['Test'],['Test']
Testability,"-----------------------------------------------; SCF energy............................................................................FAILED; ____________________________________________________________________________________________________________ test_tu1_h2o_energy ____________________________________________________________________________________________________________. @ctest_labeler(""tutorial;quick;smoke""); def test_tu1_h2o_energy():; > ctest_runner(__file__). stage/lib/psi4/tests/tu1-h2o-energy/test_input.py:5: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. inputdatloc = '/psi/gits/hrw-testgcc/objdir-defenv10/stage/lib/psi4/tests/tu1-h2o-energy/test_input.py', extra_infiles = None, outfiles = None. def ctest_runner(inputdatloc, extra_infiles: List =None, outfiles: List =None):; """"""Called from a mock PyTest function, this takes a full path ``inputdatloc`` to an ``""input.dat""`` file set up for; CTest and submits it to the ``psi4`` executable. Any auxiliary files with names listed in ``extra_infiles`` that reside; alongside ``inputdatloc`` are placed in the Psi4 execution directory.; ; """"""; from qcengine.util import execute; import psi4; ; # Pass runtime env through to `execute`; # * appending Psi4 import path (after all, it worked previous line) since partial/relative paths not robust; psiimport = Path(psi4.__file__).parent.parent; env = os.environ.copy(); env[""PYTHONPATH""] = env[""PYTHONPATH""] + os.pathsep + str(psiimport); ; ctestdir = Path(inputdatloc).resolve().parent; ; if (ctestdir / ""input.dat"").exists():; inputdat = ""input.dat""; elif (ctestdir / ""input.py"").exists():; inputdat = ""input.py""; ; infiles = [inputdat]; if extra_infiles:; infiles.extend(extra_infiles); infiles_with_contents = {Path(fl).name: (ctestdir / fl).read_text() for fl in infiles}; ; # Note: ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888:5213,mock,mock,5213,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888,1,['mock'],['mock']
Testability,"----. psi4 - has full-featured psi4 itself and necessarily all the link-time qc addons (e.g., chemps2). Of gcc-ness, it has minimal, run-time libraries, not compilers, though, for linux, full gcc and run-time gcc are the same. It doesn't have the run-time qc addons (e.g., dftd3). psi4-deps - does not have psi4 itself (though fine to install it alongside). Does have all the link-time and run-time addons. Does have cmake and sphinx (and python). Of gcc-ness, has full packages, that is, compilers, not runtime packages. installer - has full-featured psi4 itself, all link-time qc addons, all run-time qc addons, and minimal gcc runtime libraries. How to just get Psi4 with minimal conda interaction; ---------------------------------------------------. Download one of the six installers (Linux/Mac; Py27, 35, 36; presently at http://vergil.chemistry.gatech.edu/download/). `bash` it. Follow the prompts and _do_ make the adjustments to PATH and PSI_SCRATCH that it suggests at the end. Test with `psi4 --test`. Done. How to get a pre-build Psi4 into a conda environment of an existing Ana/Miniconda installation; ----------------------------------------------------------------------------------------------. `conda create -n p4env python=x.x psi4 psi4-deps -c psi4/label/devel -c psi4`. Same for Mac/Linux. Substitute desired python version: 2.7, 3.5, 3.6. Only reason for psi4-deps is to get the qc runtime addons; could say ""dftd3 gcp v2rdm_casscf"" instead of ""psi4-deps""; or leave them out if you don't want them. Activate environment and make the adjustmets to PATH and PSI_SCRATCH that it suggests at the end. Test with `psi4 --test`. How to use all those conda packages to compile Psi4 faster and easier; ---------------------------------------------------------------------. `conda create -n p4deps python=x.x psi4-deps -c psi4`. Same for Mac/Linux. Substitute desired python version: 2.7, 3.5, 3.6. Fine to choose your own env name. Activate environment, `source activate p4deps`. Go to wh",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/466#issuecomment-292102715:1147,Test,Test,1147,https://psicode.org,https://github.com/psi4/psi4/issues/466#issuecomment-292102715,2,"['Test', 'test']","['Test', 'test']"
Testability,"-->. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] If you call `psi4.set_output_file()` (note that this is the usual fancy one, not the low-level `psi4.core.set_output_file()`), that file will have a psi4 header so suitable for cclib parsing. closes #2893; - [x] Sometimes you don't want psi4 managing the logging. Added a `inherit_loglevel` to exe and set_output_file so that psi4 doesn't tamper with loglevel. @bennybp request. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] we always had `set_output_file` and `print_header` separate, but I'm guessing that that was originally b/c former in C++ and latter in Py. Now that we have the former in python to set up logging, too, it's reasonable to combine them, I think. Note that in exe, we do need to set up threads & mem first so that header stats are as correct as possible.; - [x] I set it up so that the header prints whenever a new file is opened. seemed reasonable. had to rewire core.cc calls to take notice of ""stdout"". Any problem with that?; - [x] `-o stdout` now gets a logging file `stdout.log` bug? feature?; - [x] a plain `import psi4; psi4.energy()` is still going to print to screen w/o header. `import psi4; set_output_file(""asdf""); psi4.energy()` newly has a header. DDD calcs still have repetitive header, but it's no worse that before. ## Questions; - [x] @AlexHeide, does removing those two `root` lines in `psi4.__init__.py` mess up your optking logging?. ## Checklist; - [ ] ~Tests added for any new features~; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2932:1427,log,logging,1427,https://psicode.org,https://github.com/psi4/psi4/pull/2932,6,"['Test', 'log', 'test']","['Tests', 'log', 'logging', 'tests']"
Testability,"--output-on-failure; Test project C:/Users/User/psi4.git/win_build; Start 155: dft-b2plyp; 1/24 Test #155: dft-b2plyp ....................... Passed 37.71 sec; Start 156: dft-grac; 2/24 Test #156: dft-grac ......................... Passed 7.52 sec; Start 157: dft-ghost; 3/24 Test #157: dft-ghost ........................ Passed 23.36 sec; Start 158: dft-grad-meta; 4/24 Test #158: dft-grad-meta .................... Passed 76.39 sec; Start 159: dft-freq; 5/24 Test #159: dft-freq ......................... Passed 83.74 sec; Start 160: dft-grad1; 6/24 Test #160: dft-grad1 ........................ Passed 43.94 sec; Start 161: dft-grad2; 7/24 Test #161: dft-grad2 ........................ Passed 33.06 sec; Start 162: dft-psivar; 8/24 Test #162: dft-psivar ....................... Passed 103.28 sec; Start 163: dft-b3lyp; 9/24 Test #163: dft-b3lyp ........................ Passed 164.98 sec; Start 164: dft1; 10/24 Test #164: dft1 ............................. Passed 414.86 sec; Start 165: dft-vv10; 11/24 Test #165: dft-vv10 ......................... Passed 80.01 sec; Start 166: dft1-alt; 12/24 Test #166: dft1-alt ......................... Passed 191.52 sec; Start 167: dft2; 13/24 Test #167: dft2 ............................. Passed 22.00 sec; Start 168: dft3; 14/24 Test #168: dft3 .............................***Failed 20.54 sec; 	Closed-shell wB97 Energy (PK).....................................PASSED; 	Closed-shell wB97 Energy (OUT_OF_CORE): computed value (11.255459) does not match (-75.318545) to 5 digits.; Traceback (most recent call last):; File ""C:/Users/User/psi4.git/win_install/bin/psi4"", line 264, in <module>; exec(content); File ""<string>"", line 42, in <module>; File ""C:\Users\User\psi4.git\win_install\lib\psi4\driver\p4util\util.py"", line 227, in compare_values; raise TestComparisonError(message). TestComparisonError: 	Closed-shell wB97 Energy (OUT_OF_CORE): computed value (11.255459) does not match (-75.318545) to 5 digits.; Exit Status: infile ( 1 ); autotest ( Non",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-404224014:1087,Test,Test,1087,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-404224014,1,['Test'],['Test']
Testability,--test error,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1902:2,test,test,2,https://psicode.org,https://github.com/psi4/psi4/issues/1902,1,['test'],['test']
Testability,--timeout 3600 --output-on-failure; Test project /home/raimis/psi4_3.git/build; Start 394: python-vibanalysis; Start 178: fsapt1; Start 182: isapt1; Start 18: cbs-xtpl-func; Start 181: fsapt-allterms; Start 193: fd-freq-energy-large; Start 195: fd-freq-gradient-large; Start 278: opt13; 1/411 Test #195: fd-freq-gradient-large ........... Passed 316.06 sec; Start 25: cc13a; 2/411 Test #182: isapt1 ........................... Passed 469.47 sec; Start 113: dcft7; 3/411 Test #193: fd-freq-energy-large ............. Passed 544.74 sec; Start 205: frac-traverse; 4/411 Test #181: fsapt-allterms ................... Passed 628.02 sec; Start 316: sapt2; 5/411 Test #25: cc13a ............................ Passed 336.73 sec; Start 318: sapt4; 6/411 Test #205: frac-traverse .................... Passed 224.53 sec; Start 325: scf-bz2; 7/411 Test #113: dcft7 ............................ Passed 351.15 sec; Start 1: adc1; 8/411 Test #278: opt13 ............................ Passed 840.66 sec; Start 2: adc2; 9/411 Test #1: adc1 ............................. Passed 25.01 sec; Start 3: casscf-fzc-sp; 10/411 Test #3: casscf-fzc-sp .................... Passed 11.82 sec; Start 4: casscf-semi; 11/411 Test #4: casscf-semi ...................... Passed 4.34 sec; Start 5: casscf-sa-sp; 12/411 Test #5: casscf-sa-sp ..................... Passed 18.34 sec; Start 6: ao-casscf-sp; 13/411 Test #2: adc2 ............................. Passed 44.45 sec; Start 7: casscf-sp; 14/411 Test #6: ao-casscf-sp ..................... Passed 5.43 sec; Start 8: castup1; 15/411 Test #8: castup1 .......................... Passed 1.92 sec; Start 9: castup2; 16/411 Test #325: scf-bz2 .......................... Passed 126.98 sec; Start 10: castup3; 17/411 Test #9: castup2 .......................... Passed 14.01 sec; Start 11: cbs-delta-energy; 18/411 Test #10: castup3 .......................... Passed 15.90 sec; Start 12: cbs-parser; 19/411 Test #7: casscf-sp ........................ Passed 33.11 sec; Start 13: cbs-xtpl-alph,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1112#issuecomment-409912325:1054,Test,Test,1054,https://psicode.org,https://github.com/psi4/psi4/pull/1112#issuecomment-409912325,1,['Test'],['Test']
Testability,-0 ...................... Passed 5.06 sec; Start 96: cisd-h2o-clpse; 101/411 Test #90: cepa1 ............................ Passed 19.21 sec; Start 97: cisd-opt-fd; 102/411 Test #96: cisd-h2o-clpse ................... Passed 1.95 sec; Start 98: cisd-sp; 103/411 Test #94: cisd-h2o+-1 ...................... Passed 4.64 sec; Start 99: cisd-sp-2; 104/411 Test #95: cisd-h2o+-2 ...................... Passed 4.42 sec; Start 100: ci-property; 105/411 Test #99: cisd-sp-2 ........................ Passed 8.45 sec; Start 101: cubeprop; 106/411 Test #98: cisd-sp .......................... Passed 13.42 sec; Start 102: decontract; 107/411 Test #102: decontract ....................... Passed 1.79 sec; Start 103: dcft-grad1; 108/411 Test #101: cubeprop ......................... Passed 10.89 sec; Start 104: dcft-grad2; 109/411 Test #92: ci-multi ......................... Passed 44.22 sec; Start 105: dcft-grad3; 110/411 Test #105: dcft-grad3 ....................... Passed 24.77 sec; Start 106: dcft-grad4; 111/411 Test #100: ci-property ...................... Passed 68.01 sec; Start 107: dcft1; 112/411 Test #106: dcft-grad4 ....................... Passed 40.83 sec; Start 108: dcft2; 113/411 Test #91: cepa-module ...................... Passed 131.84 sec; Start 109: dcft3; 114/411 Test #108: dcft2 ............................ Passed 20.56 sec; Start 110: dcft4; 115/411 Test #109: dcft3 ............................ Passed 30.81 sec; Start 111: dcft5; 116/411 Test #97: cisd-opt-fd ...................... Passed 146.32 sec; Start 112: dcft6; 117/411 Test #107: dcft1 ............................ Passed 86.75 sec; Start 114: dcft8; 118/411 Test #104: dcft-grad2 ....................... Passed 139.44 sec; Start 115: dcft9; 119/411 Test #45: cc3 .............................. Passed 891.62 sec; Start 116: ao-dfcasscf-sp; 120/411 Test #116: ao-dfcasscf-sp ................... Passed 3.30 sec; Start 117: dfcasscf-sa-sp; 121/411 Test #117: dfcasscf-sa-sp ................... Passed 5.50 sec; Start 118: d,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1067#issuecomment-409148828:10107,Test,Test,10107,https://psicode.org,https://github.com/psi4/psi4/pull/1067#issuecomment-409148828,1,['Test'],['Test']
Testability,-0 ...................... Passed 5.41 sec; Start 96: cisd-h2o-clpse; 101/411 Test #94: cisd-h2o+-1 ...................... Passed 5.65 sec; Start 97: cisd-opt-fd; 102/411 Test #96: cisd-h2o-clpse ................... Passed 5.83 sec; Start 98: cisd-sp; 103/411 Test #95: cisd-h2o+-2 ...................... Passed 8.02 sec; Start 99: cisd-sp-2; 104/411 Test #90: cepa1 ............................ Passed 27.52 sec; Start 100: ci-property; 105/411 Test #99: cisd-sp-2 ........................ Passed 5.41 sec; Start 101: cubeprop; 106/411 Test #98: cisd-sp .......................... Passed 12.15 sec; Start 102: decontract; 107/411 Test #102: decontract ....................... Passed 1.53 sec; Start 103: dcft-grad1; 108/411 Test #101: cubeprop ......................... Passed 11.45 sec; Start 104: dcft-grad2; 109/411 Test #92: ci-multi ......................... Passed 45.38 sec; Start 105: dcft-grad3; 110/411 Test #105: dcft-grad3 ....................... Passed 22.22 sec; Start 106: dcft-grad4; 111/411 Test #100: ci-property ...................... Passed 63.79 sec; Start 107: dcft1; 112/411 Test #106: dcft-grad4 ....................... Passed 46.58 sec; Start 108: dcft2; 113/411 Test #108: dcft2 ............................ Passed 14.73 sec; Start 109: dcft3; 114/411 Test #91: cepa-module ...................... Passed 165.34 sec; Start 110: dcft4; 115/411 Test #109: dcft3 ............................ Passed 41.56 sec; Start 111: dcft5; 116/411 Test #97: cisd-opt-fd ...................... Passed 175.12 sec; Start 112: dcft6; 117/411 Test #104: dcft-grad2 ....................... Passed 173.07 sec; Start 114: dcft8; 118/411 Test #107: dcft1 ............................ Passed 123.12 sec; Start 115: dcft9; 119/411 Test #45: cc3 .............................. Passed 949.74 sec; Start 116: ao-dfcasscf-sp; 120/411 Test #116: ao-dfcasscf-sp ................... Passed 2.22 sec; Start 117: dfcasscf-sa-sp; 121/411 Test #117: dfcasscf-sa-sp ................... Passed 9.83 sec; Start 118: ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1091#issuecomment-409148219:10098,Test,Test,10098,https://psicode.org,https://github.com/psi4/psi4/pull/1091#issuecomment-409148219,1,['Test'],['Test']
Testability,-0 ...................... Passed 6.84 sec; Start 233: mp2p5-grad1; 297/413 Test #234: mp2p5-grad2 ...................... Passed 8.87 sec; Start 248: omp2-1; 298/413 Test #189: fci-h2o-fzcv ..................... Passed 5.92 sec; Start 380: mints12; 299/413 Test #361: tu6-cp-ne2 ....................... Passed 272.83 sec; Start 382: psi4numpy-cphf; 300/413 Test #126: dfccsdl1 ......................... Passed 16.34 sec; Start 188: fci-h2o-2; 301/413 Test #380: mints12 .......................... Passed 1.45 sec; Start 235: mp3-grad1; 302/413 Test #382: psi4numpy-cphf ................... Passed 1.66 sec; Start 264: omp3-grad1; 303/413 Test #231: mp2-grad2 ........................ Passed 6.09 sec; Start 226: molden2; 304/413 Test #233: mp2p5-grad1 ...................... Passed 4.73 sec; Start 236: mp3-grad2; 305/413 Test #248: omp2-1 ........................... Passed 4.97 sec; Start 192: fci-coverage; 306/413 Test #253: omp2-grad1 ....................... Passed 7.85 sec; Start 215: mints2; 307/413 Test #235: mp3-grad1 ........................ Passed 4.11 sec; Start 187: fci-h2o; 308/413 Test #297: psithon1 ......................... Passed 10.89 sec; Start 238: mpn-bh; 309/413 Test #257: omp2p5-grad1 ..................... Passed 7.68 sec; Start 118: ao-dfcasscf-sp; 310/413 Test #264: omp3-grad1 ....................... Passed 5.57 sec; Start 372: scf-coverage; 311/413 Test #226: molden2 .......................... Passed 5.07 sec; Start 3: casscf-fzc-sp; 312/413 Test #188: fci-h2o-2 ........................ Passed 7.09 sec; Start 285: opt-freeze-coords; 313/413 Test #215: mints2 ........................... Passed 3.22 sec; Start 227: mom; 314/413 Test #236: mp3-grad2 ........................ Passed 4.51 sec; Start 193: fcidump; 315/413 Test #343: soscf-ref ........................ Passed 10.67 sec; Start 182: fsapt-terms; 316/413 Test #171: dft-vv10 ......................... Passed 21.02 sec; Start 104: decontract; 317/413 Test #238: mpn-bh ........................... Passed ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1237#issuecomment-425038275:28979,Test,Test,28979,https://psicode.org,https://github.com/psi4/psi4/pull/1237#issuecomment-425038275,1,['Test'],['Test']
Testability,"-0-27-psi4-jupyter\lib\site-packages\qiskit_nature\algorithms\ground_state_solvers\ground_state_eigensolver.py in solve(self, problem, aux_operators); 80 # note that ``aux_ops`` contains not only the transformed ``aux_operators`` passed by the; 81 # user but also additional ones from the transformation; ---> 82 second_q_ops = problem.second_q_ops(); 83 ; 84 main_operator = self._qubit_converter.convert(. ~\Anaconda3\envs\qiskit-0-27-psi4-jupyter\lib\site-packages\qiskit_nature\problems\second_quantization\electronic\electronic_structure_problem.py in second_q_ops(self); 62 operator, and (if available) x, y, z dipole operators.; 63 """"""; ---> 64 self._molecule_data = cast(QMolecule, self.driver.run()); 65 self._molecule_data_transformed = cast(QMolecule, self._transform(self._molecule_data)); 66 . ~\Anaconda3\envs\qiskit-0-27-psi4-jupyter\lib\site-packages\qiskit_nature\drivers\psi4d\psi4driver.py in run(self); 131 os.close(file_fd); 132 try:; --> 133 PSI4Driver._run_psi4(input_file, output_file); 134 if logger.isEnabledFor(logging.DEBUG):; 135 with open(output_file, 'r') as file:. ~\Anaconda3\envs\qiskit-0-27-psi4-jupyter\lib\site-packages\qiskit_nature\drivers\psi4d\psi4driver.py in _run_psi4(input_file, output_file); 186 logger.error(lines[i]); 187 errmsg += lines[i] + ""\n""; --> 188 raise QiskitNatureError('{} process return code {}\n{}'.format(; 189 PSI4, process.returncode, errmsg)). QiskitNatureError: 'psi4 process return code 1\nTraceback (most recent call last):\n File ""C:\\Users\\user\\Anaconda3\\envs\\qiskit-0-27-psi4-jupyter\\Scripts\\psi4-script.py"", line 336, in <module>\n exec(content)\n\n File ""<string>"", line 31\nSyntaxError: (unicode error) \'unicodeescape\' codec can\'t decode bytes in position 2-3: truncated \\UXXXXXXXX escape\n\nPrinting out the relevant lines from the Psithon --> Python processed input file:\n\n\n!----------------------------------------------------------------------------------!\n! !\n! (unicode error) \'unicodeescape\' codec can",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2228:2952,log,logger,2952,https://psicode.org,https://github.com/psi4/psi4/issues/2228,1,['log'],['logger']
Testability,"-0.14119732 [mEh] -0.08860265 [kcal/mol] -0.37071351 [kJ/mol]; Exch-Disp20 (SS) 0.00826777 [mEh] 0.00518811 [kcal/mol] 0.02170704 [kJ/mol]; Exch-Disp20 (OS) 0.00632908 [mEh] 0.00397156 [kcal/mol] 0.01661699 [kJ/mol]. Total HF 0.21962918 [mEh] 0.13781939 [kcal/mol] 0.57663633 [kJ/mol]; Total SAPT0 -0.04816861 [mEh] -0.03022626 [kcal/mol] -0.12646666 [kJ/mol]. Special recipe for scaled SAPT0 (see Manual):; Electrostatics sSAPT0 -0.08863776 [mEh] -0.05562103 [kcal/mol] -0.23271841 [kJ/mol]; Exchange sSAPT0 0.32126855 [mEh] 0.20159906 [kcal/mol] 0.84349046 [kJ/mol]; Induction sSAPT0 -0.01294449 [mEh] -0.00812279 [kcal/mol] -0.03398574 [kJ/mol]; Dispersion sSAPT0 -0.26778901 [mEh] -0.16804014 [kcal/mol] -0.70307995 [kJ/mol]; Total sSAPT0 -0.04810271 [mEh] -0.03018490 [kcal/mol] -0.12629364 [kJ/mol]; -------------------------------------------------------------------------------------------------; ```. output from one of your sapt(dft) tests; ```; SAPT(HF) Results; -------------------------------------------------------------------------------------------------; Electrostatics -0.09010773 [mEh] -0.05654345 [kcal/mol] -0.23657781 [kJ/mol]; Elst10,r -0.09010773 [mEh] -0.05654345 [kcal/mol] -0.23657781 [kJ/mol]. Exchange 0.31850488 [mEh] 0.19986483 [kcal/mol] 0.83623444 [kJ/mol]; Exch10 0.31850488 [mEh] 0.19986483 [kcal/mol] 0.83623444 [kJ/mol]; Exch10(S^2) 0.31844097 [mEh] 0.19982473 [kcal/mol] 0.83606665 [kJ/mol]. Induction 0.00312943 [mEh] 0.00196374 [kcal/mol] 0.00821630 [kJ/mol]; Ind20,r -0.09188769 [mEh] -0.05766040 [kcal/mol] -0.24125111 [kJ/mol]; Exch-Ind20,r 0.09501712 [mEh] 0.05962414 [kcal/mol] 0.24946741 [kJ/mol]; Induction (A<-B) -0.00060389 [mEh] -0.00037895 [kcal/mol] -0.00158551 [kJ/mol]; Induction (A->B) 0.00373331 [mEh] 0.00234269 [kcal/mol] 0.00980181 [kJ/mol]. Total SAPT 0.23152657 [mEh] 0.14528512 [kcal/mol] 0.60787293 [kJ/mol]; Total HF 0.21962918 [mEh] 0.13781939 [kcal/mol] 0.57663633 [kJ/mol]; Delta HF -0.01189740 [mEh] -0.00746573 [kcal/mol] -0.03123",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1865#issuecomment-707400670:2715,test,tests,2715,https://psicode.org,https://github.com/psi4/psi4/pull/1865#issuecomment-707400670,1,['test'],['tests']
Testability,"-1 ................. Passed 2.04 sec; 392/401 Test #285: psimrcc-ccsd_t-3 ................. Passed 2.10 sec; 393/401 Test #284: psimrcc-ccsd_t-2 ................. Passed 2.22 sec; 394/401 Test #290: psimrcc-sp1 ...................... Passed 3.41 sec; 395/401 Test #296: pywrap-all ....................... Passed 973.84 sec; 396/401 Test #86: cepa1 ............................ Passed 4.52 sec; 397/401 Test #391: python-vibanalysis ............... Passed 976.98 sec; 398/401 Test #360: cubeprop-esp .....................***Failed 6.53 sec; 399/401 Test #18: cbs-xtpl-func .................... Passed 1096.76 sec; 400/401 Test #370: dft-bench-ionization ............. Passed 2039.20 sec; 401/401 Test #371: dft-bench-interaction ............***Timeout 3000.03 sec. 99% tests passed, 5 tests failed out of 401. Label Time Summary:; adc = 61.70 sec*proc (2 tests); autotest = 1698.69 sec*proc (25 tests); cart = 9530.61 sec*proc (123 tests); cas = 29.65 sec*proc (1 test); casscf = 157.01 sec*proc (11 tests); cbs = 2162.96 sec*proc (10 tests); cc = 9085.75 sec*proc (64 tests); cdomp2 = 59.27 sec*proc (2 tests); cepa = 203.58 sec*proc (7 tests); ci = 83.42 sec*proc (8 tests); cisd = 109.67 sec*proc (7 tests); cookbook = 222.55 sec*proc (1 test); cubeprop = 14.38 sec*proc (2 tests); dcft = 3348.62 sec*proc (13 tests); df = 1824.24 sec*proc (38 tests); dfccd = 3.69 sec*proc (1 test); dfccd-grad = 13.83 sec*proc (1 test); dfccdl = 8.06 sec*proc (1 test); dfccsd = 4.58 sec*proc (1 test); dfccsd-grad = 43.20 sec*proc (1 test); dfccsd-t-grad = 38.87 sec*proc (1 test); dfccsdat = 20.44 sec*proc (1 test); dfccsdl = 4.62 sec*proc (1 test); dfccsdt = 10.41 sec*proc (1 test); dfep2 = 7.13 sec*proc (2 tests); dfmp2 = 121.95 sec*proc (11 tests); dfomp2 = 943.08 sec*proc (7 tests); dfomp2.5 = 233.40 sec*proc (4 tests); dfomp3 = 229.00 sec*proc (4 tests); dfscf = 28.93 sec*proc (1 test); dft = 5629.04 sec*proc (26 tests); docs = 1.78 sec*proc (2 tests); ecp = 57.50 sec*proc (2 tests); fci = 7.32 sec*",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1071#issuecomment-402453832:37598,test,tests,37598,https://psicode.org,https://github.com/psi4/psi4/pull/1071#issuecomment-402453832,1,['test'],['tests']
Testability,-1 ...................... Passed 5.01 sec; Start 95: cisd-h2o+-2; 288/411 Test #86: cepa0-grad2 ...................... Passed 6.59 sec; Start 376: pywrap-align; 289/411 Test #283: opt-freeze-coords ................ Passed 6.43 sec; Start 119: dfcasscf-sp; 290/411 Test #294: psimrcc-sp1 ...................... Passed 4.90 sec; Start 135: dfmp2-grad2; 291/411 Test #134: dfmp2-grad1 ...................... Passed 6.40 sec; Start 269: opt3; 292/411 Test #376: pywrap-align ..................... Passed 3.32 sec; Start 120: dfccd1; 293/411 Test #88: cepa2 ............................ Passed 12.53 sec; Start 118: dfcasscf-fzc-sp; 294/411 Test #187: fci-h2o-fzcv ..................... Passed 6.64 sec; Start 257: omp3-1; 295/411 Test #95: cisd-h2o+-2 ...................... Passed 6.02 sec; Start 355: tu3-h2o-opt; 296/411 Test #236: mpn-bh ........................... Passed 7.62 sec; Start 344: dfep2-1; 297/411 Test #90: cepa1 ............................ Passed 26.31 sec; Start 370: scf-coverage; 298/411 Test #329: scf-guess-read2 .................. Passed 10.85 sec; Start 190: fci-coverage; 299/411 Test #232: mp2p5-grad2 ...................... Passed 9.27 sec; Start 231: mp2p5-grad1; 300/411 Test #251: omp2-grad1 ....................... Passed 9.94 sec; Start 310: rasci-c2-active; 301/411 Test #118: dfcasscf-fzc-sp .................. Passed 4.09 sec; Start 388: python-curve; 302/411 Test #120: dfccd1 ........................... Passed 4.88 sec; Start 385: psi4numpy-fci; 303/411 Test #108: dcft2 ............................ Passed 12.78 sec; Start 235: mp2-property; 304/411 Test #119: dfcasscf-sp ...................... Passed 6.37 sec; Start 343: stability1; 305/411 Test #269: opt3 ............................. Passed 5.68 sec; Start 234: mp3-grad2; 306/411 Test #344: dfep2-1 .......................... Passed 3.98 sec; Start 116: ao-dfcasscf-sp; 307/411 Test #257: omp3-1 ........................... Passed 5.42 sec; Start 85: cepa0-grad1; 308/411 Test #137: dfmp2-grad4 ...........,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1072#issuecomment-406602307:27919,Test,Test,27919,https://psicode.org,https://github.com/psi4/psi4/pull/1072#issuecomment-406602307,1,['Test'],['Test']
Testability,-1 ......................... Passed 1.63 sec; Start 254: omp2p5-2; 259/411 Test #254: omp2p5-2 ......................... Passed 3.36 sec; Start 255: omp2p5-grad1; 260/411 Test #255: omp2p5-grad1 ..................... Passed 2.01 sec; Start 256: omp2p5-grad2; 261/411 Test #256: omp2p5-grad2 ..................... Passed 8.20 sec; Start 257: omp3-1; 262/411 Test #257: omp3-1 ........................... Passed 1.83 sec; Start 258: omp3-2; 263/411 Test #258: omp3-2 ........................... Passed 4.40 sec; Start 259: omp3-3; 264/411 Test #259: omp3-3 ........................... Passed 19.94 sec; Start 260: omp3-4; 265/411 Test #260: omp3-4 ........................... Passed 9.40 sec; Start 261: omp3-5; 266/411 Test #261: omp3-5 ........................... Passed 13.04 sec; Start 262: omp3-grad1; 267/411 Test #262: omp3-grad1 ....................... Passed 1.78 sec; Start 263: omp3-grad2; 268/411 Test #263: omp3-grad2 ....................... Passed 9.39 sec; Start 264: opt-lindep-change; 269/411 Test #264: opt-lindep-change ................ Passed 26.00 sec; Start 265: opt1; 270/411 Test #265: opt1 ............................. Passed 2.73 sec; Start 266: opt1-fd; 271/411 Test #266: opt1-fd .......................... Passed 4.23 sec; Start 267: opt2; 272/411 Test #267: opt2 ............................. Passed 13.60 sec; Start 268: opt2-fd; 273/411 Test #268: opt2-fd .......................... Passed 8.30 sec; Start 269: opt3; 274/411 Test #269: opt3 ............................. Passed 2.89 sec; Start 270: opt4; 275/411 Test #270: opt4 ............................. Passed 7.74 sec; Start 271: opt5; 276/411 Test #271: opt5 ............................. Passed 2.02 sec; Start 272: opt6; 277/411 Test #272: opt6 ............................. Passed 13.13 sec; Start 273: opt7; 278/411 Test #273: opt7 ............................. Passed 25.45 sec; Start 274: opt8; 279/411 Test #274: opt8 ............................. Passed 19.47 sec; Start 275: opt9; 280/411 Test #275: op,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1071#issuecomment-407449972:24599,Test,Test,24599,https://psicode.org,https://github.com/psi4/psi4/pull/1071#issuecomment-407449972,1,['Test'],['Test']
Testability,-1 ......................... Passed 1.75 sec; Start 254: omp2p5-2; 259/411 Test #254: omp2p5-2 ......................... Passed 3.05 sec; Start 255: omp2p5-grad1; 260/411 Test #255: omp2p5-grad1 ..................... Passed 2.31 sec; Start 256: omp2p5-grad2; 261/411 Test #256: omp2p5-grad2 ..................... Passed 7.90 sec; Start 257: omp3-1; 262/411 Test #257: omp3-1 ........................... Passed 1.59 sec; Start 258: omp3-2; 263/411 Test #258: omp3-2 ........................... Passed 4.98 sec; Start 259: omp3-3; 264/411 Test #259: omp3-3 ........................... Passed 20.87 sec; Start 260: omp3-4; 265/411 Test #260: omp3-4 ........................... Passed 8.98 sec; Start 261: omp3-5; 266/411 Test #261: omp3-5 ........................... Passed 12.70 sec; Start 262: omp3-grad1; 267/411 Test #262: omp3-grad1 ....................... Passed 1.76 sec; Start 263: omp3-grad2; 268/411 Test #263: omp3-grad2 ....................... Passed 9.03 sec; Start 264: opt-lindep-change; 269/411 Test #264: opt-lindep-change ................ Passed 23.34 sec; Start 265: opt1; 270/411 Test #265: opt1 ............................. Passed 2.78 sec; Start 266: opt1-fd; 271/411 Test #266: opt1-fd .......................... Passed 4.51 sec; Start 267: opt2; 272/411 Test #267: opt2 ............................. Passed 14.86 sec; Start 268: opt2-fd; 273/411 Test #268: opt2-fd .......................... Passed 7.54 sec; Start 269: opt3; 274/411 Test #269: opt3 ............................. Passed 3.01 sec; Start 270: opt4; 275/411 Test #270: opt4 ............................. Passed 7.30 sec; Start 271: opt5; 276/411 Test #271: opt5 ............................. Passed 1.91 sec; Start 272: opt6; 277/411 Test #272: opt6 ............................. Passed 13.14 sec; Start 273: opt7; 278/411 Test #273: opt7 ............................. Passed 26.78 sec; Start 274: opt8; 279/411 Test #274: opt8 ............................. Passed 19.15 sec; Start 275: opt9; 280/411 Test #275: op,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1073#issuecomment-406985370:24570,Test,Test,24570,https://psicode.org,https://github.com/psi4/psi4/pull/1073#issuecomment-406985370,1,['Test'],['Test']
Testability,-1 ......................... Passed 10.48 sec; Start 102: cubeprop; 253/412 Test #151: dfomp2p5-1 ....................... Passed 24.75 sec; Start 366: cubeprop-esp; 254/412 Test #227: mp2-1 ............................ Passed 10.58 sec; Start 4: casscf-semi; 255/412 Test #10: castup3 .......................... Passed 11.31 sec; Start 87: cepa0-grad2; 256/412 Test #54: cc37 ............................. Passed 17.38 sec; Start 125: dfccsdl1; 257/412 Test #38: cc22 ............................. Passed 24.75 sec; Start 368: scf-hess1; 258/412 Test #99: cisd-sp .......................... Passed 10.88 sec; Start 256: omp2p5-grad1; 259/412 Test #271: opt4 ............................. Passed 9.26 sec; Start 296: psithon1; 260/412 Test #9: castup2 .......................... Passed 11.25 sec; Start 181: fsapt-terms; 261/412 Test #136: dfmp2-grad2 ...................... Passed 7.61 sec; Start 244: ocepa1; 262/412 Test #133: dfmp2-4 .......................... Passed 8.97 sec; Start 263: omp3-grad1; 263/412 Test #51: cc34 ............................. Passed 19.29 sec; Start 162: dft-ghost; 264/412 Test #15: cbs-xtpl-freq .................... Passed 8.51 sec; Start 371: scf-coverage; 265/412 Test #4: casscf-semi ...................... Passed 7.58 sec; Start 199: freq-isotope2; 266/412 Test #87: cepa0-grad2 ...................... Passed 7.42 sec; Start 311: rasci-c2-active; 267/412 Test #256: omp2p5-grad1 ..................... Passed 7.89 sec; Start 120: dfcasscf-sp; 268/412 Test #366: cubeprop-esp ..................... Passed 9.71 sec; Start 185: fci-dipole; 269/412 Test #102: cubeprop ......................... Passed 10.29 sec; Start 186: fci-h2o; 270/412 Test #125: dfccsdl1 ......................... Passed 8.79 sec; Start 330: scf-guess-read2; 271/412 Test #368: scf-hess1 ........................ Passed 8.87 sec; Start 142: dfomp2-3; 272/412 Test #181: fsapt-terms ...................... Passed 8.46 sec; Start 254: omp2p5-1; 273/412 Test #263: omp3-grad1 ......................,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1199#issuecomment-417683504:24661,Test,Test,24661,https://psicode.org,https://github.com/psi4/psi4/pull/1199#issuecomment-417683504,1,['Test'],['Test']
Testability,-1 ......................... Passed 11.78 sec; Start 40: cc25; 2/411 Test #160: dft-grad-lr1 ..................... Passed 17.60 sec; Start 36: cc21; 3/411 Test #227: mp2-def2 ......................... Passed 416.34 sec; Start 240: ocepa-freq1; 4/411 Test #182: isapt1 ........................... Passed 437.25 sec; Start 35: cc2; 5/411 Test #162: dft-grad-lr3 ..................... Passed 438.96 sec; Start 76: cc7; 6/411 Test #38: cc23 ............................. Passed 670.24 sec; Start 18: cbs-xtpl-func; 7/411 Test #36: cc21 ............................. Passed 681.15 sec; Start 181: fsapt-allterms; 8/411 Test #40: cc25 ............................. Passed 702.11 sec; Start 193: fd-freq-energy-large; 9/411 Test #39: cc24 ............................. Passed 728.49 sec; Start 195: fd-freq-gradient-large; 10/411 Test #195: fd-freq-gradient-large ........... Passed 286.40 sec; Start 278: opt13; 11/411 Test #145: dfomp2-grad3 ..................... Passed 1015.18 sec; Start 11: cbs-delta-energy; 12/411 Test #76: cc7 .............................. Passed 587.31 sec; Start 373: dft-custom-mgga; 13/411 Test #306: pywrap-checkrun-uhf .............. Passed 1029.41 sec; Start 320: sapt6; 14/411 Test #45: cc3 .............................. Passed 1036.97 sec; Start 111: dcft5; 15/411 Test #240: ocepa-freq1 ...................... Passed 625.43 sec; Start 41: cc26; 16/411 Test #304: pywrap-checkrun-rhf .............. Passed 1061.37 sec; Start 155: dfscf-bz2; 17/411 Test #35: cc2 .............................. Passed 641.50 sec; Start 42: cc27; 18/411 Test #300: pywrap-all ....................... Passed 1079.44 sec; Start 183: isapt2; 19/411 Test #103: dcft-grad1 ....................... Passed 1109.73 sec; Start 112: dcft6; 20/411 Test #110: dcft4 ............................ Passed 1118.85 sec; Start 347: sapt-dft2; 21/411 Test #11: cbs-delta-energy ................. Passed 162.34 sec; Start 305: pywrap-checkrun-rohf; 22/411 Test #320: sapt6 ............................ Passed 1,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1072#issuecomment-406602307:1492,Test,Test,1492,https://psicode.org,https://github.com/psi4/psi4/pull/1072#issuecomment-406602307,1,['Test'],['Test']
Testability,-1 ......................... Passed 5.00 sec; Start 252: omp2p5-grad2; 309/401 Test #200: frac-ip-fitting .................. Passed 46.21 sec; Start 254: omp3-2; 310/401 Test #251: omp2p5-grad1 ..................... Passed 3.22 sec; Start 255: omp3-3; 311/401 Test #240: ocepa2 ........................... Passed 33.21 sec; Start 256: omp3-4; 312/401 Test #248: omp2-grad2 ....................... Passed 19.63 sec; Start 257: omp3-5; 313/401 Test #233: nbody-he-cluster ................. Passed 37.93 sec; Start 258: omp3-grad1; 314/401 Test #254: omp3-2 ........................... Passed 11.27 sec; Start 259: omp3-grad2; 315/401 Test #258: omp3-grad1 ....................... Passed 3.61 sec; Start 260: opt-lindep-change; 316/401 Test #245: omp2-4 ........................... Passed 31.36 sec; Start 262: opt1-fd; 317/401 Test #164: dft1 ............................. Passed 93.19 sec; Start 263: opt2; 318/401 Test #246: omp2-5 ........................... Passed 34.59 sec; Start 264: opt2-fd; 319/401 Test #252: omp2p5-grad2 ..................... Passed 23.25 sec; Start 265: opt3; 320/401 Test #262: opt1-fd .......................... Passed 7.97 sec; Start 266: opt4; 321/401 Test #265: opt3 ............................. Passed 5.40 sec; Start 267: opt5; 322/401 Test #260: opt-lindep-change ................ Passed 12.63 sec; Start 268: opt6; 323/401 Test #267: opt5 ............................. Passed 2.46 sec; Start 269: opt7; 324/401 Test #264: opt2-fd .......................... Passed 10.98 sec; Start 270: opt8; 325/401 Test #266: opt4 ............................. Passed 9.17 sec; Start 271: opt9; 326/401 Test #263: opt2 ............................. Passed 19.83 sec; Start 272: opt11; 327/401 Test #259: omp3-grad2 ....................... Passed 28.34 sec; Start 273: opt12; 328/401 Test #255: omp3-3 ........................... Passed 39.85 sec; Start 275: opt14; 329/401 Test #256: omp3-4 ........................... Passed 34.77 sec; Start 276: opt-irc-1; 330/401 Test #268: o,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-402413637:29811,Test,Test,29811,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-402413637,1,['Test'],['Test']
Testability,-1 ......................... Passed 5.45 sec; Start 125: dfccsd-t-grad1; 226/401 Test #358: zaptn-nh2 ........................ Passed 2.73 sec; Start 243: omp2-2; 227/401 Test #56: cc4 .............................. Passed 53.51 sec; Start 353: tu5-sapt; 228/401 Test #389: python-cc54 ...................... Passed 45.82 sec; Start 121: dfccd-grad1; 229/401 Test #365: scf-coverage ..................... Passed 8.70 sec; Start 182: fci-h2o-2; 230/401 Test #83: cdomp2-2 ......................... Passed 49.94 sec; Start 250: omp2p5-2; 231/401 Test #320: sapt8 ............................ Passed 17.13 sec; Start 100: cubeprop; 232/401 Test #222: mp2-1 ............................ Passed 12.18 sec; Start 186: fci-coverage; 233/401 Test #195: fnocc1 ........................... Passed 27.92 sec; Start 85: cepa0-grad2; 234/401 Test #106: dcft1 ............................ Passed 89.98 sec; Start 311: sapt1; 235/401 Test #182: fci-h2o-2 ........................ Passed 4.21 sec; Start 145: dfomp3-1; 236/401 Test #32: cc17 ............................. Passed 49.14 sec; Start 181: fci-h2o; 237/401 Test #355: x2c1 ............................. Passed 71.39 sec; Start 258: omp3-grad1; 238/401 Test #148: dfomp3-grad2 ..................... Passed 96.81 sec; Start 14: cbs-xtpl-energy; 239/401 Test #132: dfmp2-ecp ........................ Passed 10.88 sec; Start 346: dft-reference; 240/401 Test #352: tu4-h2o-freq ..................... Passed 15.72 sec; Start 398: json-schema_0_orient; 241/401 Test #20: cc1 .............................. Passed 103.51 sec; Start 362: scf-hess1; 242/401 Test #100: cubeprop ......................... Passed 7.85 sec; Start 140: dfomp2-3; 243/401 Test #353: tu5-sapt ......................... Passed 9.21 sec; Start 198: fnocc4; 244/401 Test #181: fci-h2o .......................... Passed 4.30 sec; Start 82: cdomp2-1; 245/401 Test #398: json-schema_0_orient ............. Passed 2.30 sec; Start 251: omp2p5-grad1; 246/401 Test #186: fci-coverage ...............,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1071#issuecomment-402453832:22412,Test,Test,22412,https://psicode.org,https://github.com/psi4/psi4/pull/1071#issuecomment-402453832,1,['Test'],['Test']
Testability,-1 ........................... Passed 11.08 sec; Start 248: omp2-3; 246/411 Test #247: omp2-2 ........................... Passed 30.77 sec; Start 249: omp2-4; 247/411 Test #248: omp2-3 ........................... Passed 40.15 sec; Start 250: omp2-5; 248/411 Test #242: ocepa-grad2 ...................... Passed 96.09 sec; Start 251: omp2-grad1; 249/411 Test #245: ocepa3 ........................... Passed 61.30 sec; Start 252: omp2-grad2; 250/411 Test #251: omp2-grad1 ....................... Passed 6.31 sec; Start 253: omp2p5-1; 251/411 Test #253: omp2p5-1 ......................... Passed 8.30 sec; Start 254: omp2p5-2; 252/411 Test #145: dfomp2-grad3 ..................... Passed 779.29 sec; Start 255: omp2p5-grad1; 253/411 Test #255: omp2p5-grad1 ..................... Passed 9.64 sec; Start 256: omp2p5-grad2; 254/411 Test #244: ocepa2 ........................... Passed 93.86 sec; Start 257: omp3-1; 255/411 Test #257: omp3-1 ........................... Passed 4.62 sec; Start 258: omp3-2; 256/411 Test #254: omp2p5-2 ......................... Passed 20.69 sec; Start 259: omp3-3; 257/411 Test #252: omp2-grad2 ....................... Passed 34.44 sec; Start 260: omp3-4; 258/411 Test #258: omp3-2 ........................... Passed 23.68 sec; Start 261: omp3-5; 259/411 Test #249: omp2-4 ........................... Passed 75.98 sec; Start 262: omp3-grad1; 260/411 Test #250: omp2-5 ........................... Passed 65.86 sec; Start 263: omp3-grad2; 261/411 Test #262: omp3-grad1 ....................... Passed 4.07 sec; Start 264: opt-lindep-change; 262/411 Test #256: omp2p5-grad2 ..................... Passed 53.55 sec; Start 265: opt1; 263/411 Test #265: opt1 ............................. Passed 5.58 sec; Start 266: opt1-fd; 264/411 Test #264: opt-lindep-change ................ Passed 26.88 sec; Start 267: opt2; 265/411 Test #266: opt1-fd .......................... Passed 11.98 sec; Start 268: opt2-fd; 266/411 Test #268: opt2-fd .......................... Passed 14.60 sec; Star,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1067#issuecomment-409148828:23676,Test,Test,23676,https://psicode.org,https://github.com/psi4/psi4/pull/1067#issuecomment-409148828,1,['Test'],['Test']
Testability,-1 ........................... Passed 4.28 sec; Start 248: omp2-3; 238/411 Test #204: frac-ip-fitting .................. Passed 69.19 sec; Start 249: omp2-4; 239/411 Test #247: omp2-2 ........................... Passed 16.82 sec; Start 250: omp2-5; 240/411 Test #237: nbody-he-cluster ................. Passed 43.38 sec; Start 251: omp2-grad1; 241/411 Test #248: omp2-3 ........................... Passed 20.97 sec; Start 252: omp2-grad2; 242/411 Test #251: omp2-grad1 ....................... Passed 4.42 sec; Start 253: omp2p5-1; 243/411 Test #253: omp2p5-1 ......................... Passed 3.50 sec; Start 254: omp2p5-2; 244/411 Test #183: isapt2 ........................... Passed 136.16 sec; Start 255: omp2p5-grad1; 245/411 Test #245: ocepa3 ........................... Passed 42.61 sec; Start 256: omp2p5-grad2; 246/411 Test #255: omp2p5-grad1 ..................... Passed 11.33 sec; Start 257: omp3-1; 247/411 Test #242: ocepa-grad2 ...................... Passed 64.29 sec; Start 258: omp3-2; 248/411 Test #257: omp3-1 ........................... Passed 7.53 sec; Start 259: omp3-3; 249/411 Test #230: mp2-module ....................... Passed 81.59 sec; Start 260: omp3-4; 250/411 Test #254: omp2p5-2 ......................... Passed 25.66 sec; Start 261: omp3-5; 251/411 Test #252: omp2-grad2 ....................... Passed 40.84 sec; Start 262: omp3-grad1; 252/411 Test #262: omp3-grad1 ....................... Passed 8.58 sec; Start 263: omp3-grad2; 253/411 Test #244: ocepa2 ........................... Passed 76.46 sec; Start 264: opt-lindep-change; 254/411 Test #258: omp3-2 ........................... Passed 30.69 sec; Start 265: opt1; 255/411 Test #249: omp2-4 ........................... Passed 74.10 sec; Start 266: opt1-fd; 256/411 Test #265: opt1 ............................. Passed 5.49 sec; Start 267: opt2; 257/411 Test #145: dfomp2-grad3 ..................... Passed 346.59 sec; Start 268: opt2-fd; 258/411 Test #266: opt1-fd .......................... Passed 10.04 sec; Sta,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1090#issuecomment-408925986:23097,Test,Test,23097,https://psicode.org,https://github.com/psi4/psi4/pull/1090#issuecomment-408925986,1,['Test'],['Test']
Testability,-1 ........................... Passed 6.44 sec; Start 247: omp2-2; 245/411 Test #230: mp2-module ....................... Passed 128.44 sec; Start 248: omp2-3; 246/411 Test #245: ocepa3 ........................... Passed 50.93 sec; Start 249: omp2-4; 247/411 Test #247: omp2-2 ........................... Passed 15.51 sec; Start 250: omp2-5; 248/411 Test #242: ocepa-grad2 ...................... Passed 86.23 sec; Start 251: omp2-grad1; 249/411 Test #248: omp2-3 ........................... Passed 16.19 sec; Start 252: omp2-grad2; 250/411 Test #251: omp2-grad1 ....................... Passed 3.71 sec; Start 253: omp2p5-1; 251/411 Test #244: ocepa2 ........................... Passed 69.91 sec; Start 254: omp2p5-2; 252/411 Test #253: omp2p5-1 ......................... Passed 3.33 sec; Start 255: omp2p5-grad1; 253/411 Test #255: omp2p5-grad1 ..................... Passed 10.27 sec; Start 256: omp2p5-grad2; 254/411 Test #254: omp2p5-2 ......................... Passed 21.90 sec; Start 257: omp3-1; 255/411 Test #257: omp3-1 ........................... Passed 4.39 sec; Start 258: omp3-2; 256/411 Test #252: omp2-grad2 ....................... Passed 31.33 sec; Start 259: omp3-3; 257/411 Test #249: omp2-4 ........................... Passed 54.33 sec; Start 260: omp3-4; 258/411 Test #250: omp2-5 ........................... Passed 62.81 sec; Start 261: omp3-5; 259/411 Test #258: omp3-2 ........................... Passed 25.47 sec; Start 262: omp3-grad1; 260/411 Test #262: omp3-grad1 ....................... Passed 4.63 sec; Start 263: omp3-grad2; 261/411 Test #256: omp2p5-grad2 ..................... Passed 52.91 sec; Start 264: opt-lindep-change; 262/411 Test #145: dfomp2-grad3 ..................... Passed 758.68 sec; Start 265: opt1; 263/411 Test #265: opt1 ............................. Passed 4.84 sec; Start 266: opt1-fd; 264/411 Test #266: opt1-fd .......................... Passed 9.24 sec; Start 267: opt2; 265/411 Test #264: opt-lindep-change ................ Passed 26.61 sec; Start,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1115#issuecomment-411094637:23602,Test,Test,23602,https://psicode.org,https://github.com/psi4/psi4/pull/1115#issuecomment-411094637,1,['Test'],['Test']
Testability,-1 ............................ Passed 25.34 sec; Start 138: dfmp2-grad4; 268/412 Test #237: mpn-bh ........................... Passed 25.59 sec; Start 87: cepa0-grad2; 269/412 Test #340: scf-property ..................... Passed 26.41 sec; Start 244: ocepa1; 270/412 Test #172: dft2 ............................. Passed 27.29 sec; Start 96: cisd-h2o+-2; 271/412 Test #332: scf1 ............................. Passed 26.55 sec; Start 128: dfccsdt1; 272/412 Test #186: fci-h2o .......................... Passed 28.97 sec; Start 84: cdomp2-1; 273/412 Test #137: dfmp2-grad3 ...................... Passed 26.87 sec; Start 124: dfccsd1; 274/412 Test #185: fci-dipole ....................... Passed 28.96 sec; Start 266: opt1; 275/412 Test #158: dfrasscf-sp ...................... Passed 28.63 sec; Start 95: cisd-h2o+-1; 276/412 Test #89: cepa2 ............................ Passed 28.47 sec; Start 140: dfomp2-1; 277/412 Test #330: scf-guess-read2 .................. Passed 27.20 sec; Start 125: dfccsdl1; 278/412 Test #180: fsapt2 ........................... Passed 26.51 sec; Start 285: props1; 279/412 Test #188: fci-h2o-fzcv ..................... Passed 26.88 sec; Start 100: cisd-sp-2; 280/412 Test #187: fci-h2o-2 ........................ Passed 28.49 sec; Start 136: dfmp2-grad2; 281/412 Test #256: omp2p5-grad1 ..................... Passed 22.58 sec; Start 371: scf-coverage; 282/412 Test #87: cepa0-grad2 ...................... Passed 23.50 sec; Start 192: fcidump; 283/412 Test #244: ocepa1 ........................... Passed 23.99 sec; Start 356: tu3-h2o-opt; 284/412 Test #138: dfmp2-grad4 ...................... Passed 25.14 sec; Start 254: omp2p5-1; 285/412 Test #128: dfccsdt1 ......................... Passed 23.05 sec; Start 191: fci-coverage; 286/412 Test #96: cisd-h2o+-2 ...................... Passed 25.23 sec; Start 272: opt5; 287/412 Test #285: props1 ........................... Passed 24.64 sec; Start 109: dcft2; 288/412 Test #124: dfccsd1 .......................... Passed 26.12,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1227#issuecomment-421362141:26124,Test,Test,26124,https://psicode.org,https://github.com/psi4/psi4/pull/1227#issuecomment-421362141,1,['Test'],['Test']
Testability,-1-ghost; 376/411 Test #96: cisd-h2o-clpse ................... Passed 1.56 sec; Start 398: json-v11-gradient; 377/411 Test #404: json-schema-1-properties ......... Passed 1.09 sec; Start 405: skeleton; 378/411 Test #349: sapt-sf1 ......................... Passed 1.04 sec; Start 406: skeletonaointegrals; 379/411 Test #353: tu1-h2o-energy ................... Passed 1.12 sec; Start 396: python-memdfjk; 380/411 Test #383: psi4numpy-rhf-gradient ........... Passed 1.25 sec; Start 411: skeletonwavefunction; 381/411 Test #293: psimrcc-pt2 ...................... Passed 1.38 sec; Start 408: skeletonmointegrals; 382/411 Test #108: dcft2 ............................ Passed 2.92 sec; Start 410: skeletonsointegrals; 383/411 Test #400: json-schema-1-ghost .............. Passed 1.34 sec; Start 352: stability2; 384/411 Test #405: skeleton ......................... Passed 1.30 sec; Start 354: tu2-ch2-energy; 385/411 Test #396: python-memdfjk ................... Passed 0.93 sec; Start 330: scf-bs; 386/411 Test #398: json-v11-gradient ................ Passed 1.38 sec; Start 382: psi4numpy-rhf; 387/411 Test #406: skeletonaointegrals .............. Passed 1.11 sec; Start 387: python-energy; 388/411 Test #411: skeletonwavefunction ............. Passed 0.91 sec; Start 209: mcscf1; 389/411 Test #408: skeletonmointegrals .............. Passed 0.89 sec; Start 188: fci-tdm; 390/411 Test #354: tu2-ch2-energy ................... Passed 0.76 sec; Start 308: pywrap-db3; 391/411 Test #352: stability2 ....................... Passed 0.85 sec; Start 211: mcscf3; 392/411 Test #410: skeletonsointegrals .............. Passed 0.91 sec; Start 334: scf3; 393/411 Test #382: psi4numpy-rhf .................... Passed 0.82 sec; Start 239: numpy-array-interface; 394/411 Test #330: scf-bs ........................... Passed 0.83 sec; Start 409: skeletonscf; 395/411 Test #387: python-energy .................... Passed 0.72 sec; Start 175: docs-dft; 396/411 Test #209: mcscf1 ........................... Passed 0.65 s,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1089#issuecomment-408103972:36171,Test,Test,36171,https://psicode.org,https://github.com/psi4/psi4/pull/1089#issuecomment-408103972,1,['Test'],['Test']
Testability,"-1-throws ............. Passed 0.59 sec; Start 404: json-schema-1-properties; 397/411 Test #403: json-schema-1-gradient ........... Passed 1.76 sec; Start 405: skeleton; 398/411 Test #404: json-schema-1-properties ......... Passed 1.78 sec; Start 406: skeletonaointegrals; 399/411 Test #392: python-cc54 ...................... Passed 25.14 sec; Start 407: skeletondfmp2; 400/411 Test #405: skeleton ......................... Passed 1.92 sec; Start 408: skeletonmointegrals; 401/411 Test #406: skeletonaointegrals .............. Passed 2.03 sec; Start 409: skeletonscf; 402/411 Test #409: skeletonscf ...................... Passed 0.62 sec; Start 410: skeletonsointegrals; 403/411 Test #407: skeletondfmp2 .................... Passed 1.80 sec; Start 411: skeletonwavefunction; 404/411 Test #408: skeletonmointegrals .............. Passed 1.54 sec; 405/411 Test #410: skeletonsointegrals .............. Passed 1.33 sec; 406/411 Test #411: skeletonwavefunction ............. Passed 1.22 sec; 407/411 Test #379: cc-module ........................ Passed 171.95 sec; 408/411 Test #306: pywrap-checkrun-uhf .............. Passed 713.66 sec; 409/411 Test #386: cookbook-rohf-orb-rot ............ Passed 161.04 sec; 410/411 Test #300: pywrap-all ....................... Passed 782.90 sec; 411/411 Test #304: pywrap-checkrun-rhf .............. Passed 743.15 sec. 100% tests passed, 0 tests failed out of 411. Label Time Summary:; adc = 69.47 sec*proc (2 tests); autotest = 2116.22 sec*proc (26 tests); cart = 16612.59 sec*proc (123 tests); cas = 62.15 sec*proc (1 test); casscf = 157.07 sec*proc (11 tests); cbs = 2510.55 sec*proc (10 tests); cc = 10612.98 sec*proc (65 tests); cdomp2 = 81.08 sec*proc (2 tests); cepa = 296.50 sec*proc (7 tests); ci = 125.30 sec*proc (8 tests); cisd = 203.11 sec*proc (7 tests); cookbook = 161.04 sec*proc (1 test); cubeprop = 22.05 sec*proc (2 tests); dcft = 3092.73 sec*proc (13 tests); df = 1676.00 sec*proc (38 tests); dfccd = 5.43 sec*proc (1 test); dfccd-grad = 23.87 s",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1112#issuecomment-409912325:38054,Test,Test,38054,https://psicode.org,https://github.com/psi4/psi4/pull/1112#issuecomment-409912325,1,['Test'],['Test']
Testability,"-1-throws ............. Passed 0.62 sec; Start 404: json-schema-1-properties; 397/411 Test #403: json-schema-1-gradient ........... Passed 1.92 sec; Start 405: skeleton; 398/411 Test #404: json-schema-1-properties ......... Passed 1.48 sec; Start 406: skeletonaointegrals; 399/411 Test #405: skeleton ......................... Passed 1.51 sec; Start 407: skeletondfmp2; 400/411 Test #406: skeletonaointegrals .............. Passed 1.67 sec; Start 408: skeletonmointegrals; 401/411 Test #407: skeletondfmp2 .................... Passed 1.70 sec; Start 409: skeletonscf; 402/411 Test #408: skeletonmointegrals .............. Passed 1.95 sec; Start 410: skeletonsointegrals; 403/411 Test #409: skeletonscf ...................... Passed 0.67 sec; Start 411: skeletonwavefunction; 404/411 Test #389: python-pubchem ................... Passed 54.34 sec; 405/411 Test #411: skeletonwavefunction ............. Passed 1.69 sec; 406/411 Test #410: skeletonsointegrals .............. Passed 1.93 sec; 407/411 Test #379: cc-module ........................ Passed 152.05 sec; 408/411 Test #386: cookbook-rohf-orb-rot ............ Passed 141.29 sec; 409/411 Test #306: pywrap-checkrun-uhf .............. Passed 657.98 sec; 410/411 Test #300: pywrap-all ....................... Passed 734.22 sec; 411/411 Test #304: pywrap-checkrun-rhf .............. Passed 705.00 sec. 100% tests passed, 0 tests failed out of 411. Label Time Summary:; adc = 72.03 sec*proc (2 tests); autotest = 2537.36 sec*proc (26 tests); cart = 17832.09 sec*proc (123 tests); cas = 68.01 sec*proc (1 test); casscf = 156.98 sec*proc (11 tests); cbs = 1831.60 sec*proc (10 tests); cc = 12496.28 sec*proc (65 tests); cdomp2 = 106.87 sec*proc (2 tests); cepa = 243.33 sec*proc (7 tests); ci = 133.10 sec*proc (8 tests); cisd = 184.25 sec*proc (7 tests); cookbook = 141.29 sec*proc (1 test); cubeprop = 20.11 sec*proc (2 tests); dcft = 3750.01 sec*proc (13 tests); df = 2431.94 sec*proc (38 tests); dfccd = 8.06 sec*proc (1 test); dfccd-grad = 19.49 ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1067#issuecomment-409148828:38038,Test,Test,38038,https://psicode.org,https://github.com/psi4/psi4/pull/1067#issuecomment-409148828,1,['Test'],['Test']
Testability,"-1-throws ............. Passed 0.67 sec; Start 405: json-schema-1-properties; 390/412 Test #404: json-schema-1-gradient ........... Passed 2.22 sec; Start 406: skeleton; 391/412 Test #405: json-schema-1-properties ......... Passed 1.81 sec; Start 407: skeletonaointegrals; 392/412 Test #407: skeletonaointegrals .............. Passed 3.33 sec; Start 408: skeletondfmp2; 393/412 Test #406: skeleton ......................... Passed 3.87 sec; Start 409: skeletonmointegrals; 394/412 Test #393: python-cc54 ...................... Passed 28.49 sec; Start 410: skeletonscf; 395/412 Test #410: skeletonscf ...................... Passed 0.68 sec; Start 411: skeletonsointegrals; 396/412 Test #408: skeletondfmp2 .................... Passed 2.47 sec; Start 412: skeletonwavefunction; 397/412 Test #409: skeletonmointegrals .............. Passed 2.26 sec; 398/412 Test #411: skeletonsointegrals .............. Passed 1.98 sec; 399/412 Test #412: skeletonwavefunction ............. Passed 2.83 sec; 400/412 Test #348: sapt-dft2 ........................ Passed 127.79 sec; 401/412 Test #372: dft-custom-dhdf .................. Passed 94.42 sec; 402/412 Test #306: pywrap-checkrun-rohf ............. Passed 288.21 sec; 403/412 Test #390: python-pubchem ................... Passed 69.31 sec; 404/412 Test #360: tu6-cp-ne2 ....................... Passed 164.40 sec; 405/412 Test #380: cc-module ........................ Passed 133.41 sec; 406/412 Test #319: sapt4 ............................ Passed 2071.90 sec; 407/412 Test #387: cookbook-rohf-orb-rot ............ Passed 136.41 sec; 408/412 Test #307: pywrap-checkrun-uhf .............. Passed 359.25 sec; 409/412 Test #374: dft-custom-mgga .................. Passed 183.98 sec; 410/412 Test #301: pywrap-all ....................... Passed 395.58 sec; 411/412 Test #305: pywrap-checkrun-rhf .............. Passed 385.47 sec; 412/412 Test #179: fsapt1 ........................... Passed 2170.07 sec. 100% tests passed, 0 tests failed out of 412. Label Time Summa",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1219#issuecomment-419060031:37534,Test,Test,37534,https://psicode.org,https://github.com/psi4/psi4/pull/1219#issuecomment-419060031,1,['Test'],['Test']
Testability,"-1-throws ............. Passed 0.92 sec; 401/415 Test #415: json-schema-1-properties ......... Passed 2.25 sec; 402/415 Test #382: dft-custom-dhdf .................. Passed 37.28 sec; 403/415 Test #400: python-pubchem ................... Passed 31.88 sec; 404/415 Test #290: opt-irc-2 ........................ Passed 211.86 sec; 405/415 Test #384: dft-custom-mgga .................. Passed 56.51 sec; 406/415 Test #249: ocepa-freq1 ...................... Passed 749.07 sec; 407/415 Test #106: dcft-grad1 ....................... Passed 1347.53 sec; 408/415 Test #397: cookbook-rohf-orb-rot ............ Passed 443.85 sec; 409/415 Test #148: dfomp2-grad3 ..................... Passed 1213.44 sec; 410/415 Test #370: tu6-cp-ne2 ....................... Passed 555.15 sec; 411/415 Test #315: pywrap-checkrun-rohf ............. Passed 668.23 sec; 412/415 Test #113: dcft4 ............................ Passed 1477.74 sec; 413/415 Test #316: pywrap-checkrun-uhf .............. Passed 728.94 sec; 414/415 Test #18: cbs-xtpl-func .................... Passed 3334.37 sec; 415/415 Test #314: pywrap-checkrun-rhf .............. Passed 750.17 sec. 100% tests passed, 0 tests failed out of 415. Label Time Summary:; adc = 62.10 sec*proc (2 tests); autotest = 3142.09 sec*proc (26 tests); cart = 16551.08 sec*proc (123 tests); cas = 28.56 sec*proc (1 test); casscf = 215.89 sec*proc (11 tests); cbs = 5376.02 sec*proc (12 tests); cc = 17865.62 sec*proc (65 tests); cdomp2 = 102.86 sec*proc (2 tests); cepa = 362.38 sec*proc (7 tests); ci = 100.54 sec*proc (8 tests); cisd = 147.55 sec*proc (7 tests); cookbook = 443.85 sec*proc (1 test); cubeprop = 24.72 sec*proc (3 tests); dcft = 5201.52 sec*proc (13 tests); df = 3130.41 sec*proc (38 tests); dfccd = 7.27 sec*proc (1 test); dfccd-grad = 29.83 sec*proc (1 test); dfccdl = 4.85 sec*proc (1 test); dfccsd = 16.21 sec*proc (1 test); dfccsd-grad = 94.95 sec*proc (1 test); dfccsd-t-grad = 103.60 sec*proc (1 test); dfccsdat = 43.70 sec*proc (1 test); dfccsdl = 19.45 se",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1384#issuecomment-443227424:38706,Test,Test,38706,https://psicode.org,https://github.com/psi4/psi4/pull/1384#issuecomment-443227424,1,['Test'],['Test']
Testability,"-1-throws; 399/415 Test #385: dft-custom-gga ................... Passed 28.52 sec; Start 415: json-schema-1-properties; 400/415 Test #413: json-schema-1-throws ............. Passed 0.92 sec; 401/415 Test #415: json-schema-1-properties ......... Passed 2.25 sec; 402/415 Test #382: dft-custom-dhdf .................. Passed 37.28 sec; 403/415 Test #400: python-pubchem ................... Passed 31.88 sec; 404/415 Test #290: opt-irc-2 ........................ Passed 211.86 sec; 405/415 Test #384: dft-custom-mgga .................. Passed 56.51 sec; 406/415 Test #249: ocepa-freq1 ...................... Passed 749.07 sec; 407/415 Test #106: dcft-grad1 ....................... Passed 1347.53 sec; 408/415 Test #397: cookbook-rohf-orb-rot ............ Passed 443.85 sec; 409/415 Test #148: dfomp2-grad3 ..................... Passed 1213.44 sec; 410/415 Test #370: tu6-cp-ne2 ....................... Passed 555.15 sec; 411/415 Test #315: pywrap-checkrun-rohf ............. Passed 668.23 sec; 412/415 Test #113: dcft4 ............................ Passed 1477.74 sec; 413/415 Test #316: pywrap-checkrun-uhf .............. Passed 728.94 sec; 414/415 Test #18: cbs-xtpl-func .................... Passed 3334.37 sec; 415/415 Test #314: pywrap-checkrun-rhf .............. Passed 750.17 sec. 100% tests passed, 0 tests failed out of 415. Label Time Summary:; adc = 62.10 sec*proc (2 tests); autotest = 3142.09 sec*proc (26 tests); cart = 16551.08 sec*proc (123 tests); cas = 28.56 sec*proc (1 test); casscf = 215.89 sec*proc (11 tests); cbs = 5376.02 sec*proc (12 tests); cc = 17865.62 sec*proc (65 tests); cdomp2 = 102.86 sec*proc (2 tests); cepa = 362.38 sec*proc (7 tests); ci = 100.54 sec*proc (8 tests); cisd = 147.55 sec*proc (7 tests); cookbook = 443.85 sec*proc (1 test); cubeprop = 24.72 sec*proc (3 tests); dcft = 5201.52 sec*proc (13 tests); df = 3130.41 sec*proc (38 tests); dfccd = 7.27 sec*proc (1 test); dfccd-grad = 29.83 sec*proc (1 test); dfccdl = 4.85 sec*proc (1 test); dfccsd = 16.21 sec",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1384#issuecomment-443227424:38559,Test,Test,38559,https://psicode.org,https://github.com/psi4/psi4/pull/1384#issuecomment-443227424,1,['Test'],['Test']
Testability,-188 (0); > - _A_ tests/isapt1/plot-ref/DA.png; > https://github.com/psi4/psi4/pull/470/files#diff-189 (0); > - _A_ tests/isapt1/plot-ref/DA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-190 (0); > - _A_ tests/isapt1/plot-ref/DB.png; > https://github.com/psi4/psi4/pull/470/files#diff-191 (0); > - _A_ tests/isapt1/plot-ref/DB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-192 (0); > - _A_ tests/isapt1/plot-ref/DC.png; > https://github.com/psi4/psi4/pull/470/files#diff-193 (0); > - _A_ tests/isapt1/plot-ref/DC.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-194 (0); > - _A_ tests/isapt1/plot-ref/DFA.png; > https://github.com/psi4/psi4/pull/470/files#diff-195 (0); > - _A_ tests/isapt1/plot-ref/DFA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-196 (0); > - _A_ tests/isapt1/plot-ref/DFB.png; > https://github.com/psi4/psi4/pull/470/files#diff-197 (0); > - _A_ tests/isapt1/plot-ref/DFB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-198 (0); > - _A_ tests/isapt1/plot-ref/Geom.png; > https://github.com/psi4/psi4/pull/470/files#diff-199 (0); > - _A_ tests/isapt1/plot-ref/Geom.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-200 (0); > - _A_ tests/isapt1/plot-ref/VA.png; > https://github.com/psi4/psi4/pull/470/files#diff-201 (0); > - _A_ tests/isapt1/plot-ref/VA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-202 (0); > - _A_ tests/isapt1/plot-ref/VB.png; > https://github.com/psi4/psi4/pull/470/files#diff-203 (0); > - _A_ tests/isapt1/plot-ref/VB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-204 (0); > - _A_ tests/isapt1/plot-ref/VC.png; > https://github.com/psi4/psi4/pull/470/files#diff-205 (0); > - _A_ tests/isapt1/plot-ref/VC.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-206 (0); > - _A_ tests/isapt1/plot-ref/dDA.png; > https://github.com/psi4/psi4/pull/470/files#diff-207 (0); > - _A_ tests/isapt1/plot-ref/dDA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-208 (0); ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/470#issuecomment-249267903:21858,test,tests,21858,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903,1,['test'],['tests']
Testability,-199 (0); > - _A_ tests/isapt1/plot-ref/Geom.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-200 (0); > - _A_ tests/isapt1/plot-ref/VA.png; > https://github.com/psi4/psi4/pull/470/files#diff-201 (0); > - _A_ tests/isapt1/plot-ref/VA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-202 (0); > - _A_ tests/isapt1/plot-ref/VB.png; > https://github.com/psi4/psi4/pull/470/files#diff-203 (0); > - _A_ tests/isapt1/plot-ref/VB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-204 (0); > - _A_ tests/isapt1/plot-ref/VC.png; > https://github.com/psi4/psi4/pull/470/files#diff-205 (0); > - _A_ tests/isapt1/plot-ref/VC.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-206 (0); > - _A_ tests/isapt1/plot-ref/dDA.png; > https://github.com/psi4/psi4/pull/470/files#diff-207 (0); > - _A_ tests/isapt1/plot-ref/dDA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-208 (0); > - _A_ tests/isapt1/plot-ref/dDB.png; > https://github.com/psi4/psi4/pull/470/files#diff-209 (0); > - _A_ tests/isapt1/plot-ref/dDB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-210 (0); > - _A_ tests/isapt1/plot-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-211 (0); > - _A_ tests/isapt1/plot-ref/orient.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-212 (0); > - _A_ tests/isapt1/plot-ref/run.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-213 (0); > - _A_ tests/isapt1/plot-ref/vis.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-214 (0); > - _A_ tests/isapt2/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-215 (0); > - _A_ tests/isapt2/README; > https://github.com/psi4/psi4/pull/470/files#diff-216 (0); > - _A_ tests/isapt2/fsapt-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-217 (0); > - _A_ tests/isapt2/fsapt-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-218 (0); > - _A_ tests/isapt2/fsapt-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-219 (0); ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/470#issuecomment-249267903:22953,test,tests,22953,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903,1,['test'],['tests']
Testability,-2 ...................... Passed 5.19 sec; Start 310: rasci-c2-active; 254/411 Test #294: psimrcc-sp1 ...................... Passed 3.91 sec; Start 72: cc54; 255/411 Test #125: dfccsd-grad1 ..................... Passed 29.42 sec; Start 331: scf1; 256/411 Test #295: psithon1 ......................... Passed 9.42 sec; Start 62: cc45; 257/411 Test #310: rasci-c2-active .................. Passed 7.42 sec; Start 6: ao-casscf-sp; 258/411 Test #78: cc8a ............................. Passed 36.32 sec; Start 132: dfmp2-4; 259/411 Test #142: dfomp2-4 ......................... Passed 24.29 sec; Start 152: dfomp2p5-grad1; 260/411 Test #126: dfccsd-t-grad1 ................... Passed 22.19 sec; Start 377: pywrap-align-chiral; 261/411 Test #22: cc11 ............................. Passed 21.45 sec; Start 90: cepa1; 262/411 Test #331: scf1 ............................. Passed 4.75 sec; Start 236: mpn-bh; 263/411 Test #6: ao-casscf-sp ..................... Passed 4.17 sec; Start 283: opt-freeze-coords; 264/411 Test #377: pywrap-align-chiral .............. Passed 3.28 sec; Start 148: dfomp3-grad1; 265/411 Test #132: dfmp2-4 .......................... Passed 6.32 sec; Start 385: psi4numpy-fci; 266/411 Test #236: mpn-bh ........................... Passed 4.79 sec; Start 53: cc37; 267/411 Test #62: cc45 ............................. Passed 10.83 sec; Start 146: dfomp3-1; 268/411 Test #283: opt-freeze-coords ................ Passed 6.26 sec; Start 235: mp2-property; 269/411 Test #72: cc54 ............................. Passed 16.30 sec; Start 351: dft-reference; 270/411 Test #90: cepa1 ............................ Passed 9.26 sec; Start 370: scf-coverage; 271/411 Test #385: psi4numpy-fci .................... Passed 5.24 sec; Start 344: dfep2-1; 272/411 Test #235: mp2-property ..................... Passed 3.07 sec; Start 269: opt3; 273/411 Test #351: dft-reference .................... Passed 3.10 sec; Start 48: cc32; 274/411 Test #152: dfomp2p5-grad1 ................... Passed 14.38 sec; Sta,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1089#issuecomment-408103972:24679,Test,Test,24679,https://psicode.org,https://github.com/psi4/psi4/pull/1089#issuecomment-408103972,1,['Test'],['Test']
Testability,-2 ........................ Passed 7.48 sec; Start 86: cepa0-grad1; 289/412 Test #386: psi4numpy-fci .................... Passed 8.74 sec; Start 172: dft2; 290/412 Test #6: ao-casscf-sp ..................... Passed 8.19 sec; Start 377: pywrap-align; 291/412 Test #187: fci-h2o-2 ........................ Passed 9.47 sec; Start 135: dfmp2-grad1; 292/412 Test #244: ocepa1 ........................... Passed 14.54 sec; Start 237: mpn-bh; 293/412 Test #142: dfomp2-3 ......................... Passed 9.68 sec; Start 285: props1; 294/412 Test #252: omp2-grad1 ....................... Passed 9.11 sec; Start 247: omp2-1; 295/412 Test #284: opt-freeze-coords ................ Passed 6.27 sec; Start 117: ao-dfcasscf-sp; 296/412 Test #371: scf-coverage ..................... Passed 11.20 sec; Start 340: scf-property; 297/412 Test #137: dfmp2-grad3 ...................... Passed 4.45 sec; Start 94: cisd-h2o+-0; 298/412 Test #86: cepa0-grad1 ...................... Passed 2.91 sec; Start 234: mp3-grad1; 299/412 Test #311: rasci-c2-active .................. Passed 5.93 sec; Start 180: fsapt2; 300/412 Test #135: dfmp2-grad1 ...................... Passed 2.72 sec; Start 95: cisd-h2o+-1; 301/412 Test #96: cisd-h2o+-2 ...................... Passed 5.46 sec; Start 121: dfccd1; 302/412 Test #188: fci-h2o-fzcv ..................... Passed 5.45 sec; Start 232: mp2p5-grad1; 303/412 Test #285: props1 ........................... Passed 3.70 sec; Start 332: scf1; 304/412 Test #117: ao-dfcasscf-sp ................... Passed 2.87 sec; Start 235: mp3-grad2; 305/412 Test #172: dft2 ............................. Passed 5.28 sec; Start 204: frac; 306/412 Test #247: omp2-1 ........................... Passed 3.62 sec; Start 229: mp2-grad1; 307/412 Test #234: mp3-grad1 ........................ Passed 3.09 sec; Start 120: dfcasscf-sp; 308/412 Test #237: mpn-bh ........................... Passed 4.49 sec; Start 266: opt1; 309/412 Test #121: dfccd1 ........................... Passed 2.00 sec; Start 230: mp2-grad,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1224#issuecomment-419158485:28065,Test,Test,28065,https://psicode.org,https://github.com/psi4/psi4/pull/1224#issuecomment-419158485,1,['Test'],['Test']
Testability,-2 ......................... Passed 16.07 sec; Start 144: dfomp2-grad1; 208/412 Test #322: sapt-dft-api ..................... Passed 18.67 sec; Start 302: pywrap-basis; 209/412 Test #139: dfmp2-grad5 ...................... Passed 18.21 sec; Start 292: psimrcc-fd-freq1; 210/412 Test #166: dft-grad2 ........................ Passed 17.38 sec; Start 325: sapt8; 211/412 Test #106: dcft-grad3 ....................... Passed 17.48 sec; Start 219: mints8; 212/412 Test #297: psithon2 ......................... Passed 19.59 sec; Start 5: casscf-sa-sp; 213/412 Test #170: dft-vv10 ......................... Passed 19.83 sec; Start 90: cepa3; 214/412 Test #154: dft-grad-lr1 ..................... Passed 18.31 sec; Start 341: soscf-large; 215/412 Test #177: extern1 .......................... Passed 20.99 sec; Start 91: cepa1; 216/412 Test #302: pywrap-basis ..................... Passed 19.87 sec; Start 339: scf7; 217/412 Test #325: sapt8 ............................ Passed 17.72 sec; Start 267: opt1-fd; 218/412 Test #202: fnocc3 ........................... Passed 27.34 sec; Start 165: dft-grad1; 219/412 Test #200: fnocc1 ........................... Passed 25.83 sec; Start 367: dft-smoke; 220/412 Test #248: omp2-2 ........................... Passed 27.95 sec; Start 286: props2; 221/412 Test #110: dcft3 ............................ Passed 28.17 sec; Start 351: dft-custom; 222/412 Test #292: psimrcc-fd-freq1 ................. Passed 25.26 sec; Start 14: cbs-xtpl-energy; 223/412 Test #219: mints8 ........................... Passed 17.04 sec; Start 287: props3; 224/412 Test #144: dfomp2-grad1 ..................... Passed 28.18 sec; Start 358: tu4-h2o-freq; 225/412 Test #341: soscf-large ...................... Passed 16.00 sec; Start 342: soscf-ref; 226/412 Test #91: cepa1 ............................ Passed 13.12 sec; Start 242: ocepa-grad1; 227/412 Test #90: cepa3 ............................ Passed 17.62 sec; Start 198: freq-isotope1; 228/412 Test #5: casscf-sa-sp ..................... P,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1220#issuecomment-419126068:20459,Test,Test,20459,https://psicode.org,https://github.com/psi4/psi4/pull/1220#issuecomment-419126068,1,['Test'],['Test']
Testability,-2 ......................... Passed 17.27 sec; Start 87: cepa0-grad2; 210/412 Test #177: extern1 .......................... Passed 16.72 sec; Start 341: soscf-large; 211/412 Test #166: dft-grad2 ........................ Passed 17.52 sec; Start 292: psimrcc-fd-freq1; 212/412 Test #248: omp2-2 ........................... Passed 17.21 sec; Start 14: cbs-xtpl-energy; 213/412 Test #5: casscf-sa-sp ..................... Passed 14.38 sec; Start 89: cepa2; 214/412 Test #87: cepa0-grad2 ...................... Passed 8.28 sec; Start 339: scf7; 215/412 Test #154: dft-grad-lr1 ..................... Passed 17.73 sec; Start 91: cepa1; 216/412 Test #106: dcft-grad3 ....................... Passed 18.05 sec; Start 358: tu4-h2o-freq; 217/412 Test #325: sapt8 ............................ Passed 16.07 sec; Start 7: casscf-sp; 218/412 Test #170: dft-vv10 ......................... Passed 18.36 sec; Start 286: props2; 219/412 Test #90: cepa3 ............................ Passed 15.49 sec; Start 367: dft-smoke; 220/412 Test #219: mints8 ........................... Passed 16.29 sec; Start 165: dft-grad1; 221/412 Test #302: pywrap-basis ..................... Passed 17.34 sec; Start 351: dft-custom; 222/412 Test #89: cepa2 ............................ Passed 11.16 sec; Start 287: props3; 223/412 Test #341: soscf-large ...................... Passed 15.61 sec; Start 198: freq-isotope1; 224/412 Test #14: cbs-xtpl-energy .................. Passed 12.53 sec; Start 369: scf-freq1; 225/412 Test #151: dfomp2p5-1 ....................... Passed 21.88 sec; Start 370: dft-jk; 226/412 Test #292: psimrcc-fd-freq1 ................. Passed 17.57 sec; Start 84: cdomp2-1; 227/412 Test #358: tu4-h2o-freq ..................... Passed 12.87 sec; Start 200: fnocc1; 228/412 Test #339: scf7 ............................. Passed 15.12 sec; Start 218: mints6; 229/412 Test #286: props2 ........................... Passed 13.70 sec; Start 202: fnocc3; 230/412 Test #91: cepa1 ............................ Passed 16.00 sec; St,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1221#issuecomment-419096646:20660,Test,Test,20660,https://psicode.org,https://github.com/psi4/psi4/pull/1221#issuecomment-419096646,1,['Test'],['Test']
Testability,-2 ......................... Passed 25.41 sec; Start 368: scf-freq1; 230/411 Test #270: opt4 ............................. Passed 8.38 sec; Start 89: cepa3; 231/411 Test #268: opt2-fd .......................... Passed 10.21 sec; Start 15: cbs-xtpl-freq; 232/411 Test #258: omp3-2 ........................... Passed 13.91 sec; Start 392: python-cc54; 233/411 Test #150: dfomp2p5-1 ....................... Passed 6.15 sec; Start 197: freq-isotope1; 234/411 Test #247: omp2-2 ........................... Passed 7.65 sec; Start 48: cc32; 235/411 Test #80: cc8c ............................. Passed 11.03 sec; Start 357: tu4-h2o-freq; 236/411 Test #89: cepa3 ............................ Passed 12.41 sec; Start 367: scf-hess1; 237/411 Test #15: cbs-xtpl-freq .................... Passed 13.09 sec; Start 184: fci-dipole; 238/411 Test #368: scf-freq1 ........................ Passed 15.20 sec; Start 185: fci-h2o; 239/411 Test #392: python-cc54 ...................... Passed 12.99 sec; Start 6: ao-casscf-sp; 240/411 Test #48: cc32 ............................. Passed 10.33 sec; Start 186: fci-h2o-2; 241/411 Test #197: freq-isotope1 .................... Passed 14.33 sec; Start 198: freq-isotope2; 242/411 Test #6: ao-casscf-sp ..................... Passed 2.88 sec; Start 21: cc10; 243/411 Test #357: tu4-h2o-freq ..................... Passed 12.92 sec; Start 254: omp2p5-2; 244/411 Test #367: scf-hess1 ........................ Passed 6.11 sec; Start 335: scf4; 245/411 Test #198: freq-isotope2 .................... Passed 3.61 sec; Start 10: castup3; 246/411 Test #184: fci-dipole ....................... Passed 6.13 sec; Start 128: dfccsdat1; 247/411 Test #185: fci-h2o .......................... Passed 6.11 sec; Start 117: dfcasscf-sa-sp; 248/411 Test #186: fci-h2o-2 ........................ Passed 6.45 sec; Start 154: dfrasscf-sp; 249/411 Test #21: cc10 ............................. Passed 4.59 sec; Start 192: fd-freq-energy; 250/411 Test #254: omp2p5-2 ......................... Passed 5.70 s,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1078#issuecomment-408900195:22333,Test,Test,22333,https://psicode.org,https://github.com/psi4/psi4/pull/1078#issuecomment-408900195,1,['Test'],['Test']
Testability,-2 ......................... Passed 30.82 sec; Start 294: psimrcc-sp1; 253/411 Test #95: cisd-h2o+-2 ...................... Passed 5.19 sec; Start 310: rasci-c2-active; 254/411 Test #294: psimrcc-sp1 ...................... Passed 3.91 sec; Start 72: cc54; 255/411 Test #125: dfccsd-grad1 ..................... Passed 29.42 sec; Start 331: scf1; 256/411 Test #295: psithon1 ......................... Passed 9.42 sec; Start 62: cc45; 257/411 Test #310: rasci-c2-active .................. Passed 7.42 sec; Start 6: ao-casscf-sp; 258/411 Test #78: cc8a ............................. Passed 36.32 sec; Start 132: dfmp2-4; 259/411 Test #142: dfomp2-4 ......................... Passed 24.29 sec; Start 152: dfomp2p5-grad1; 260/411 Test #126: dfccsd-t-grad1 ................... Passed 22.19 sec; Start 377: pywrap-align-chiral; 261/411 Test #22: cc11 ............................. Passed 21.45 sec; Start 90: cepa1; 262/411 Test #331: scf1 ............................. Passed 4.75 sec; Start 236: mpn-bh; 263/411 Test #6: ao-casscf-sp ..................... Passed 4.17 sec; Start 283: opt-freeze-coords; 264/411 Test #377: pywrap-align-chiral .............. Passed 3.28 sec; Start 148: dfomp3-grad1; 265/411 Test #132: dfmp2-4 .......................... Passed 6.32 sec; Start 385: psi4numpy-fci; 266/411 Test #236: mpn-bh ........................... Passed 4.79 sec; Start 53: cc37; 267/411 Test #62: cc45 ............................. Passed 10.83 sec; Start 146: dfomp3-1; 268/411 Test #283: opt-freeze-coords ................ Passed 6.26 sec; Start 235: mp2-property; 269/411 Test #72: cc54 ............................. Passed 16.30 sec; Start 351: dft-reference; 270/411 Test #90: cepa1 ............................ Passed 9.26 sec; Start 370: scf-coverage; 271/411 Test #385: psi4numpy-fci .................... Passed 5.24 sec; Start 344: dfep2-1; 272/411 Test #235: mp2-property ..................... Passed 3.07 sec; Start 269: opt3; 273/411 Test #351: dft-reference .................... Passed 3.1,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1089#issuecomment-408103972:24580,Test,Test,24580,https://psicode.org,https://github.com/psi4/psi4/pull/1089#issuecomment-408103972,1,['Test'],['Test']
Testability,-2 ......................... Passed 63.42 sec; Start 342: soscf-dft; 115/411 Test #46: cc30 ............................. Passed 125.06 sec; Start 249: omp2-4; 116/411 Test #244: ocepa2 ........................... Passed 125.60 sec; Start 32: cc17; 117/411 Test #57: cc40 ............................. Passed 136.25 sec; Start 337: scf6; 118/411 Test #92: ci-multi ......................... Passed 54.72 sec; Start 153: dfomp2p5-grad2; 119/411 Test #34: cc19 ............................. Passed 89.17 sec; Start 65: cc48; 120/411 Test #342: soscf-dft ........................ Passed 39.52 sec; Start 374: dft-custom-gga; 121/411 Test #250: omp2-5 ........................... Passed 133.26 sec; Start 274: opt8; 122/411 Test #27: cc13c ............................ Passed 210.88 sec; Start 16: cbs-xtpl-gradient; 123/411 Test #261: omp3-5 ........................... Passed 183.90 sec; Start 256: omp2p5-grad2; 124/411 Test #125: dfccsd-grad1 ..................... Passed 68.53 sec; Start 202: fnocc4; 125/411 Test #68: cc50 ............................. Passed 86.48 sec; Start 7: casscf-sp; 126/411 Test #33: cc18 ............................. Passed 66.37 sec; Start 326: scf-ecp; 127/411 Test #32: cc17 ............................. Passed 65.50 sec; Start 264: opt-lindep-change; 128/411 Test #374: dft-custom-gga ................... Passed 39.03 sec; Start 59: cc42; 129/411 Test #392: python-cc54 ...................... Passed 88.76 sec; Start 82: cc9a; 130/411 Test #16: cbs-xtpl-gradient ................ Passed 42.32 sec; Start 109: dcft3; 131/411 Test #274: opt8 ............................. Passed 46.93 sec; Start 156: dft-b2plyp; 132/411 Test #337: scf6 ............................. Passed 67.92 sec; Start 196: fd-gradient; 133/411 Test #202: fnocc4 ........................... Passed 34.47 sec; Start 1: adc1; 134/411 Test #264: opt-lindep-change ................ Passed 28.28 sec; Start 147: dfomp3-2; 135/411 Test #326: scf-ecp .......................... Passed 35.46 sec; Start 17,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1072#issuecomment-406602307:11880,Test,Test,11880,https://psicode.org,https://github.com/psi4/psi4/pull/1072#issuecomment-406602307,1,['Test'],['Test']
Testability,-2 ........................... Passed 18.50 sec; Start 167: dft-psivar; 187/412 Test #147: dfomp3-1 ......................... Passed 12.10 sec; Start 178: extern2; 188/412 Test #304: pywrap-checkrun-convcrit ......... Passed 22.03 sec; Start 376: pywrap-bfs; 189/412 Test #273: opt6 ............................. Passed 27.17 sec; Start 173: dft3; 190/412 Test #268: opt2 ............................. Passed 26.58 sec; Start 160: dft-b2plyp; 191/412 Test #38: cc22 ............................. Passed 23.04 sec; Start 278: opt12; 192/412 Test #178: extern2 .......................... Passed 26.28 sec; Start 347: sapt-dft1; 193/412 Test #167: dft-psivar ....................... Passed 35.83 sec; Start 164: dft-freq; 194/412 Test #173: dft3 ............................. Passed 29.49 sec; Start 200: fnocc1; 195/412 Test #376: pywrap-bfs ....................... Passed 36.43 sec; Start 144: dfomp2-grad1; 196/412 Test #278: opt12 ............................ Passed 21.45 sec; Start 249: omp2-3; 197/412 Test #160: dft-b2plyp ....................... Passed 32.77 sec; Start 190: fci-tdm-2; 198/412 Test #200: fnocc1 ........................... Passed 10.69 sec; Start 359: tu5-sapt; 199/412 Test #347: sapt-dft1 ........................ Passed 25.29 sec; Start 151: dfomp2p5-1; 200/412 Test #144: dfomp2-grad1 ..................... Passed 18.47 sec; Start 54: cc37; 201/412 Test #151: dfomp2p5-1 ....................... Passed 11.42 sec; Start 24: cc12; 202/412 Test #164: dft-freq ......................... Passed 28.43 sec; Start 323: sapt-dft-lrc; 203/412 Test #249: omp2-3 ........................... Passed 21.19 sec; Start 292: psimrcc-fd-freq1; 204/412 Test #190: fci-tdm-2 ........................ Passed 31.40 sec; Start 170: dft-vv10; 205/412 Test #359: tu5-sapt ......................... Passed 30.09 sec; Start 291: psimrcc-ccsd_t-4; 206/412 Test #54: cc37 ............................. Passed 24.98 sec; Start 239: nbody-intermediates; 207/412 Test #24: cc12 ..........................,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1225#issuecomment-419883272:18288,Test,Test,18288,https://psicode.org,https://github.com/psi4/psi4/pull/1225#issuecomment-419883272,1,['Test'],['Test']
Testability,-2 ........................... Passed 57.09 sec; Start 147: dfomp3-1; 197/412 Test #278: opt12 ............................ Passed 70.83 sec; Start 249: omp2-3; 198/412 Test #202: fnocc3 ........................... Passed 42.62 sec; Start 144: dfomp2-grad1; 199/412 Test #129: dfccsdat1 ........................ Passed 46.01 sec; Start 54: cc37; 200/412 Test #147: dfomp3-1 ......................... Passed 37.56 sec; Start 24: cc12; 201/412 Test #190: fci-tdm-2 ........................ Passed 66.35 sec; Start 292: psimrcc-fd-freq1; 202/412 Test #249: omp2-3 ........................... Passed 39.50 sec; Start 200: fnocc1; 203/412 Test #359: tu5-sapt ......................... Passed 58.60 sec; Start 291: psimrcc-ccsd_t-4; 204/412 Test #54: cc37 ............................. Passed 24.22 sec; Start 170: dft-vv10; 205/412 Test #144: dfomp2-grad1 ..................... Passed 24.56 sec; Start 316: sapt1; 206/412 Test #323: sapt-dft-lrc ..................... Passed 55.84 sec; Start 166: dft-grad2; 207/412 Test #24: cc12 ............................. Passed 19.32 sec; Start 322: sapt-dft-api; 208/412 Test #200: fnocc1 ........................... Passed 17.89 sec; Start 151: dfomp2p5-1; 209/412 Test #292: psimrcc-fd-freq1 ................. Passed 25.18 sec; Start 239: nbody-intermediates; 210/412 Test #151: dfomp2p5-1 ....................... Passed 16.38 sec; Start 276: opt9; 211/412 Test #170: dft-vv10 ......................... Passed 29.20 sec; Start 154: dft-grad-lr1; 212/412 Test #291: psimrcc-ccsd_t-4 ................. Passed 33.90 sec; Start 297: psithon2; 213/412 Test #316: sapt1 ............................ Passed 32.86 sec; Start 139: dfmp2-grad5; 214/412 Test #166: dft-grad2 ........................ Passed 32.53 sec; Start 177: extern1; 215/412 Test #322: sapt-dft-api ..................... Passed 32.05 sec; Start 106: dcft-grad3; 216/412 Test #239: nbody-intermediates .............. Passed 21.57 sec; Start 325: sapt8; 217/412 Test #276: opt9 ..........................,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1226#issuecomment-420597899:19230,Test,Test,19230,https://psicode.org,https://github.com/psi4/psi4/pull/1226#issuecomment-420597899,1,['Test'],['Test']
Testability,-200 (0); > - _A_ tests/isapt1/plot-ref/VA.png; > https://github.com/psi4/psi4/pull/470/files#diff-201 (0); > - _A_ tests/isapt1/plot-ref/VA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-202 (0); > - _A_ tests/isapt1/plot-ref/VB.png; > https://github.com/psi4/psi4/pull/470/files#diff-203 (0); > - _A_ tests/isapt1/plot-ref/VB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-204 (0); > - _A_ tests/isapt1/plot-ref/VC.png; > https://github.com/psi4/psi4/pull/470/files#diff-205 (0); > - _A_ tests/isapt1/plot-ref/VC.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-206 (0); > - _A_ tests/isapt1/plot-ref/dDA.png; > https://github.com/psi4/psi4/pull/470/files#diff-207 (0); > - _A_ tests/isapt1/plot-ref/dDA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-208 (0); > - _A_ tests/isapt1/plot-ref/dDB.png; > https://github.com/psi4/psi4/pull/470/files#diff-209 (0); > - _A_ tests/isapt1/plot-ref/dDB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-210 (0); > - _A_ tests/isapt1/plot-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-211 (0); > - _A_ tests/isapt1/plot-ref/orient.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-212 (0); > - _A_ tests/isapt1/plot-ref/run.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-213 (0); > - _A_ tests/isapt1/plot-ref/vis.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-214 (0); > - _A_ tests/isapt2/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-215 (0); > - _A_ tests/isapt2/README; > https://github.com/psi4/psi4/pull/470/files#diff-216 (0); > - _A_ tests/isapt2/fsapt-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-217 (0); > - _A_ tests/isapt2/fsapt-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-218 (0); > - _A_ tests/isapt2/fsapt-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-219 (0); > - _A_ tests/isapt2/fsapt-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-220 (0);,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/470#issuecomment-249267903:23054,test,tests,23054,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903,1,['test'],['tests']
Testability,"-2016a-mt-Python-2.7.11/psi4public-e4070d0024742579a445e084da9dde078310094d/tests/sapt4/input.dat"" ""/dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/obj/testresults.log"" ""false"" ""/dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/psi4public-e4070d0024742579a445e084da9dde078310094d"" ""false"" ""/dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/obj/tests/sapt4/output.dat"" ""/dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/obj/bin/psi4""; Directory: /dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/obj/tests/sapt4; ""sapt4"" start time: Feb 15 13:13 CET; Output:; ----------------------------------------------------------; Traceback (most recent call last):; File ""<string>"", line 65, in <module>; File ""/dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/psi4public-e4070d0024742579a445e084da9dde078310094d/lib/python/p4util/util.py"", line 98, in compare_values; raise TestComparisonError(message); p4xcpt.TestComparisonError: SAPT Elst: computed value (-0.0407606) does not match (-0.0407577) to 6 decimal places.; SAPT Elst: computed value (-0.0407606) does not match (-0.0407577) to 6 decimal places.; Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); <end of output>; Test time = 132.94 sec; ----------------------------------------------------------; Test Failed.; ""sapt4"" end time: Feb 15 13:15 CET; ""sapt4"" time elapsed: 00:02:12; ----------------------------------------------------------. ```. For `pywrap-opt-sowreap`:. ```; 255/305 Testing: pywrap-opt-sowreap; 255/305 Test: pywrap-opt-sowreap; Command: ""/apps/gent/CO7/haswell-ib/software/Python/2.7.11-intel-2016a/bin/python"" ""/dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/psi4public-e4070d0024742579a445e084da9dde078310094d/tests/runtest.py"" ""/dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/psi4public-e4070d0024742579a445e084da9dde078310094d/tests/pywrap-opt-sowreap/input.dat"" ""/dev/shm/ward/PSI/4.0b6-20160",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/253:2091,Test,TestComparisonError,2091,https://psicode.org,https://github.com/psi4/psi4/issues/253,1,['Test'],['TestComparisonError']
Testability,-207 (0); > - _A_ tests/isapt1/plot-ref/dDA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-208 (0); > - _A_ tests/isapt1/plot-ref/dDB.png; > https://github.com/psi4/psi4/pull/470/files#diff-209 (0); > - _A_ tests/isapt1/plot-ref/dDB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-210 (0); > - _A_ tests/isapt1/plot-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-211 (0); > - _A_ tests/isapt1/plot-ref/orient.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-212 (0); > - _A_ tests/isapt1/plot-ref/run.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-213 (0); > - _A_ tests/isapt1/plot-ref/vis.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-214 (0); > - _A_ tests/isapt2/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-215 (0); > - _A_ tests/isapt2/README; > https://github.com/psi4/psi4/pull/470/files#diff-216 (0); > - _A_ tests/isapt2/fsapt-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-217 (0); > - _A_ tests/isapt2/fsapt-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-218 (0); > - _A_ tests/isapt2/fsapt-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-219 (0); > - _A_ tests/isapt2/fsapt-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-220 (0); > - _A_ tests/isapt2/fsapt-ref/IndBA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-221 (0); > - _A_ tests/isapt2/fsapt-ref/QA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-222 (0); > - _A_ tests/isapt2/fsapt-ref/QB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-223 (0); > - _A_ tests/isapt2/fsapt-ref/ZA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-224 (0); > - _A_ tests/isapt2/fsapt-ref/ZB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-225 (0); > - _A_ tests/isapt2/fsapt-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-226 (0); > - _A_ tests/isapt2/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-227 (0); > ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/470#issuecomment-249267903:23747,test,tests,23747,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903,1,['test'],['tests']
Testability,-208 (0); > - _A_ tests/isapt1/plot-ref/dDB.png; > https://github.com/psi4/psi4/pull/470/files#diff-209 (0); > - _A_ tests/isapt1/plot-ref/dDB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-210 (0); > - _A_ tests/isapt1/plot-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-211 (0); > - _A_ tests/isapt1/plot-ref/orient.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-212 (0); > - _A_ tests/isapt1/plot-ref/run.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-213 (0); > - _A_ tests/isapt1/plot-ref/vis.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-214 (0); > - _A_ tests/isapt2/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-215 (0); > - _A_ tests/isapt2/README; > https://github.com/psi4/psi4/pull/470/files#diff-216 (0); > - _A_ tests/isapt2/fsapt-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-217 (0); > - _A_ tests/isapt2/fsapt-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-218 (0); > - _A_ tests/isapt2/fsapt-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-219 (0); > - _A_ tests/isapt2/fsapt-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-220 (0); > - _A_ tests/isapt2/fsapt-ref/IndBA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-221 (0); > - _A_ tests/isapt2/fsapt-ref/QA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-222 (0); > - _A_ tests/isapt2/fsapt-ref/QB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-223 (0); > - _A_ tests/isapt2/fsapt-ref/ZA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-224 (0); > - _A_ tests/isapt2/fsapt-ref/ZB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-225 (0); > - _A_ tests/isapt2/fsapt-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-226 (0); > - _A_ tests/isapt2/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-227 (0); > - _A_ tests/isapt2/output.ref; > https://github.com/psi4/psi4/pull/470/files#diff-228 (0); > - _A_ te,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/470#issuecomment-249267903:23848,test,tests,23848,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903,1,['test'],['tests']
Testability,-228 (0); > - _A_ tests/isapt2/plot-ref/DA.png; > https://github.com/psi4/psi4/pull/470/files#diff-229 (0); > - _A_ tests/isapt2/plot-ref/DA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-230 (0); > - _A_ tests/isapt2/plot-ref/DB.png; > https://github.com/psi4/psi4/pull/470/files#diff-231 (0); > - _A_ tests/isapt2/plot-ref/DB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-232 (0); > - _A_ tests/isapt2/plot-ref/DC.png; > https://github.com/psi4/psi4/pull/470/files#diff-233 (0); > - _A_ tests/isapt2/plot-ref/DC.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-234 (0); > - _A_ tests/isapt2/plot-ref/DFA.png; > https://github.com/psi4/psi4/pull/470/files#diff-235 (0); > - _A_ tests/isapt2/plot-ref/DFA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-236 (0); > - _A_ tests/isapt2/plot-ref/DFB.png; > https://github.com/psi4/psi4/pull/470/files#diff-237 (0); > - _A_ tests/isapt2/plot-ref/DFB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-238 (0); > - _A_ tests/isapt2/plot-ref/Geom.png; > https://github.com/psi4/psi4/pull/470/files#diff-239 (0); > - _A_ tests/isapt2/plot-ref/Geom.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-240 (0); > - _A_ tests/isapt2/plot-ref/VA.png; > https://github.com/psi4/psi4/pull/470/files#diff-241 (0); > - _A_ tests/isapt2/plot-ref/VA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-242 (0); > - _A_ tests/isapt2/plot-ref/VB.png; > https://github.com/psi4/psi4/pull/470/files#diff-243 (0); > - _A_ tests/isapt2/plot-ref/VB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-244 (0); > - _A_ tests/isapt2/plot-ref/VC.png; > https://github.com/psi4/psi4/pull/470/files#diff-245 (0); > - _A_ tests/isapt2/plot-ref/VC.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-246 (0); > - _A_ tests/isapt2/plot-ref/dDA.png; > https://github.com/psi4/psi4/pull/470/files#diff-247 (0); > - _A_ tests/isapt2/plot-ref/dDA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-248 (0); ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/470#issuecomment-249267903:25829,test,tests,25829,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903,1,['test'],['tests']
Testability,-2; 117/404 Test #64: cc47 ............................. Passed 14.94 sec; Start 55: cc39; 118/404 Test #167: dft-b3lyp ........................ Passed 36.49 sec; Start 312: rasci-ne; 119/404 Test #84: cdomp2-2 ......................... Passed 8.35 sec; Start 71: cc53; 120/404 Test #140: dfomp2-2 ......................... Passed 9.35 sec; Start 67: cc4a; 121/404 Test #336: scf5 ............................. Passed 26.26 sec; Start 26: cc13b; 122/404 Test #66: cc49 ............................. Passed 19.38 sec; Start 326: scf-ecp; 123/404 Test #274: opt8 ............................. Passed 19.76 sec; Start 374: dft-custom-gga; 124/404 Test #55: cc39 ............................. Passed 13.27 sec; Start 200: fnocc2; 125/404 Test #71: cc53 ............................. Passed 8.33 sec; Start 56: cc4; 126/404 Test #67: cc4a ............................. Passed 12.55 sec; Start 389: python-pubchem; 127/404 Test #307: pywrap-db1 ....................... Passed 29.84 sec; Start 155: dfscf-bz2; 128/404 Test #26: cc13b ............................ Passed 18.37 sec; Start 245: ocepa3; 129/404 Test #56: cc4 .............................. Passed 12.64 sec; Start 319: sapt5; 130/404 Test #200: fnocc2 ........................... Passed 17.05 sec; Start 297: pubchem1; 131/404 Test #326: scf-ecp .......................... Passed 24.49 sec; Start 12: cbs-parser; 132/404 Test #245: ocepa3 ........................... Passed 7.38 sec; Start 142: dfomp2-4; 133/404 Test #312: rasci-ne ......................... Passed 30.48 sec; Start 125: dfccsd-grad1; 134/404 Test #374: dft-custom-gga ................... Passed 26.70 sec; Start 51: cc35; 135/404 Test #142: dfomp2-4 ......................... Passed 6.92 sec; Start 196: fd-gradient; 136/404 Test #125: dfccsd-grad1 ..................... Passed 7.22 sec; Start 100: ci-property; 137/404 Test #389: python-pubchem ................... Passed 23.12 sec; Start 126: dfccsd-t-grad1; 138/404 Test #51: cc35 ............................. Passed 8.62 s,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-404174338:11851,Test,Test,11851,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-404174338,1,['Test'],['Test']
Testability,-2; 152/411 Test #346: sapt-dft1 ........................ Passed 24.50 sec; Start 71: cc53; 153/411 Test #126: dfccsd-t-grad1 ................... Passed 46.35 sec; Start 79: cc8b; 154/411 Test #147: dfomp3-2 ......................... Passed 68.44 sec; Start 163: dft-freq; 155/411 Test #189: fci-tdm-2 ........................ Passed 23.01 sec; Start 78: cc8a; 156/411 Test #67: cc4a ............................. Passed 53.77 sec; Start 358: tu5-sapt; 157/411 Test #73: cc55 ............................. Passed 57.71 sec; Start 172: dft3; 158/411 Test #245: ocepa3 ........................... Passed 57.53 sec; Start 140: dfomp2-2; 159/411 Test #163: dft-freq ......................... Passed 23.58 sec; Start 322: sapt-dft-lrc; 160/411 Test #55: cc39 ............................. Passed 58.48 sec; Start 277: opt12; 161/411 Test #63: cc46 ............................. Passed 54.24 sec; Start 282: opt-irc-3; 162/411 Test #12: cbs-parser ....................... Passed 83.31 sec; Start 272: opt6; 163/411 Test #64: cc47 ............................. Passed 71.08 sec; Start 315: sapt1; 164/411 Test #358: tu5-sapt ......................... Passed 23.06 sec; Start 267: opt2; 165/411 Test #172: dft3 ............................. Passed 26.14 sec; Start 290: psimrcc-ccsd_t-4; 166/411 Test #151: dfomp2p5-2 ....................... Passed 71.41 sec; Start 176: extern1; 167/411 Test #322: sapt-dft-lrc ..................... Passed 20.32 sec; Start 177: extern2; 168/411 Test #81: cc9 .............................. Passed 69.76 sec; Start 247: omp2-2; 169/411 Test #313: rasscf-sp ........................ Passed 73.93 sec; Start 80: cc8c; 170/411 Test #71: cc53 ............................. Passed 60.75 sec; Start 48: cc32; 171/411 Test #315: sapt1 ............................ Passed 19.99 sec; Start 165: dft-grad2; 172/411 Test #277: opt12 ............................ Passed 26.40 sec; Start 169: dft-vv10; 173/411 Test #290: psimrcc-ccsd_t-4 ................. Passed 19.99 sec; Start 194: fd,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1072#issuecomment-406602307:15354,Test,Test,15354,https://psicode.org,https://github.com/psi4/psi4/pull/1072#issuecomment-406602307,1,['Test'],['Test']
Testability,-2; 220/411 Test #50: cc34 ............................. Passed 18.78 sec; Start 98: cisd-sp; 221/411 Test #52: cc36 ............................. Passed 18.16 sec; Start 338: scf7; 222/411 Test #291: psimrcc-fd-freq1 ................. Passed 17.80 sec; Start 158: dft-ghost; 223/411 Test #37: cc22 ............................. Passed 23.36 sec; Start 258: omp3-2; 224/411 Test #248: omp2-3 ........................... Passed 22.74 sec; Start 268: opt2-fd; 225/411 Test #98: cisd-sp .......................... Passed 8.82 sec; Start 270: opt4; 226/411 Test #158: dft-ghost ........................ Passed 7.78 sec; Start 80: cc8c; 227/411 Test #338: scf7 ............................. Passed 12.79 sec; Start 150: dfomp2p5-1; 228/411 Test #78: cc8a ............................. Passed 34.47 sec; Start 247: omp2-2; 229/411 Test #140: dfomp2-2 ......................... Passed 25.41 sec; Start 368: scf-freq1; 230/411 Test #270: opt4 ............................. Passed 8.38 sec; Start 89: cepa3; 231/411 Test #268: opt2-fd .......................... Passed 10.21 sec; Start 15: cbs-xtpl-freq; 232/411 Test #258: omp3-2 ........................... Passed 13.91 sec; Start 392: python-cc54; 233/411 Test #150: dfomp2p5-1 ....................... Passed 6.15 sec; Start 197: freq-isotope1; 234/411 Test #247: omp2-2 ........................... Passed 7.65 sec; Start 48: cc32; 235/411 Test #80: cc8c ............................. Passed 11.03 sec; Start 357: tu4-h2o-freq; 236/411 Test #89: cepa3 ............................ Passed 12.41 sec; Start 367: scf-hess1; 237/411 Test #15: cbs-xtpl-freq .................... Passed 13.09 sec; Start 184: fci-dipole; 238/411 Test #368: scf-freq1 ........................ Passed 15.20 sec; Start 185: fci-h2o; 239/411 Test #392: python-cc54 ...................... Passed 12.99 sec; Start 6: ao-casscf-sp; 240/411 Test #48: cc32 ............................. Passed 10.33 sec; Start 186: fci-h2o-2; 241/411 Test #197: freq-isotope1 .................... Passed 1,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1078#issuecomment-408900195:21486,Test,Test,21486,https://psicode.org,https://github.com/psi4/psi4/pull/1078#issuecomment-408900195,1,['Test'],['Test']
Testability,-2; 82/412 Test #78: cc8 .............................. Passed 62.95 sec; Start 86: cepa0-grad1; 83/412 Test #86: cepa0-grad1 ...................... Passed 4.39 sec; Start 87: cepa0-grad2; 84/412 Test #76: cc6 .............................. Passed 84.83 sec; Start 88: cepa1; 85/412 Test #80: cc8b ............................. Passed 60.97 sec; Start 89: cepa2; 86/412 Test #87: cepa0-grad2 ...................... Passed 15.84 sec; Start 90: cepa3; 87/412 Test #75: cc5a ............................. Passed 108.07 sec; Start 91: cepa1; 88/412 Test #82: cc9 .............................. Passed 64.37 sec; Start 92: cepa-module; 89/412 Test #79: cc8a ............................. Passed 86.04 sec; Start 93: ci-multi; 90/412 Test #88: cepa1 ............................ Passed 14.93 sec; Start 94: cisd-h2o+-0; 91/412 Test #41: cc25 ............................. Passed 643.73 sec; Start 95: cisd-h2o+-1; 92/412 Test #89: cepa2 ............................ Passed 15.04 sec; Start 96: cisd-h2o+-2; 93/412 Test #94: cisd-h2o+-0 ...................... Passed 5.25 sec; Start 97: cisd-h2o-clpse; 94/412 Test #81: cc8c ............................. Passed 75.87 sec; Start 98: cisd-opt-fd; 95/412 Test #97: cisd-h2o-clpse ................... Passed 2.30 sec; Start 99: cisd-sp; 96/412 Test #95: cisd-h2o+-1 ...................... Passed 5.29 sec; Start 100: cisd-sp-2; 97/412 Test #85: cdomp2-2 ......................... Passed 44.64 sec; Start 101: ci-property; 98/412 Test #96: cisd-h2o+-2 ...................... Passed 6.02 sec; Start 102: cubeprop; 99/412 Test #90: cepa3 ............................ Passed 15.90 sec; Start 103: decontract; 100/412 Test #103: decontract ....................... Passed 1.91 sec; Start 104: dcft-grad1; 101/412 Test #100: cisd-sp-2 ........................ Passed 6.36 sec; Start 105: dcft-grad2; 102/412 Test #91: cepa1 ............................ Passed 17.25 sec; Start 106: dcft-grad3; 103/412 Test #99: cisd-sp .......................... Passed 12.02 sec; Sta,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1219#issuecomment-419060031:8599,Test,Test,8599,https://psicode.org,https://github.com/psi4/psi4/pull/1219#issuecomment-419060031,1,['Test'],['Test']
Testability,-2; 96/412 Test #67: cc49 ............................. Passed 68.52 sec; Start 152: dfomp2p5-2; 97/412 Test #251: omp2-5 ........................... Passed 118.71 sec; Start 101: ci-property; 98/412 Test #298: pubchem1 ......................... Passed 66.34 sec; Start 60: cc42; 99/412 Test #79: cc8a ............................. Passed 77.39 sec; Start 66: cc48; 100/412 Test #150: dfomp3-grad2 ..................... Passed 113.61 sec; Start 82: cc9; 101/412 Test #65: cc47 ............................. Passed 82.63 sec; Start 74: cc55; 102/412 Test #31: cc15 ............................. Passed 138.15 sec; Start 108: dcft1; 103/412 Test #141: dfomp2-2 ......................... Passed 73.14 sec; Start 85: cdomp2-2; 104/412 Test #279: opt13 ............................ Passed 845.14 sec; Start 57: cc4; 105/412 Test #148: dfomp3-2 ......................... Passed 65.50 sec; Start 238: nbody-he-cluster; 106/412 Test #152: dfomp2p5-2 ....................... Passed 56.77 sec; Start 78: cc8; 107/412 Test #28: cc13c ............................ Passed 134.32 sec; Start 274: opt7; 108/412 Test #157: dfomp2p5-grad2 ................... Passed 86.76 sec; Start 277: opt11; 109/412 Test #101: ci-property ...................... Passed 61.99 sec; Start 64: cc46; 110/412 Test #60: cc42 ............................. Passed 67.55 sec; Start 73: cc54; 111/412 Test #66: cc48 ............................. Passed 67.59 sec; Start 68: cc4a; 112/412 Test #82: cc9 .............................. Passed 58.84 sec; Start 171: dft1-alt; 113/412 Test #74: cc55 ............................. Passed 58.53 sec; Start 12: cbs-parser; 114/412 Test #85: cdomp2-2 ......................... Passed 63.06 sec; Start 55: cc38; 115/412 Test #21: cc1 .............................. Passed 135.62 sec; Start 163: dft-grad-meta; 116/412 Test #108: dcft1 ............................ Passed 81.10 sec; Start 143: dfomp2-4; 117/412 Test #57: cc4 .............................. Passed 79.37 sec; Start 2: adc2; 118/412 Tes,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1224#issuecomment-419158485:10225,Test,Test,10225,https://psicode.org,https://github.com/psi4/psi4/pull/1224#issuecomment-419158485,1,['Test'],['Test']
