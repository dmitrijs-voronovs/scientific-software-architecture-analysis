quality_attribute,sentence,source,author,repo,version,id,keyword,matched_word,match_idx,filename,wiki,url,total_similar,target_keywords,target_matched_words
Deployability,the configuration ; : 921 | 4.32266 6.29119 0.0200952 0.00182605 43789.5 0; : 922 | 4.32742 6.39561 0.0200257 0.00176292 43804.9 1; : 923 | 4.33774 6.46608 0.0200201 0.00176071 43813 2; : 924 | 4.36503 6.3111 0.0200702 0.00177545 43728.3 3; : 925 | 4.7314 7.24632 0.0202093 0.00176259 43368.2 4; : 926 | 4.61316 6.64099 0.020249 0.00181216 43391.3 5; : 927 Minimum Test error found - save the configuration ; : 927 | 4.41727 6.09792 0.0203192 0.00184107 43294.4 0; : 928 | 4.15393 6.23618 0.0200677 0.00177036 43722.3 1; : 929 | 4.2848 6.29195 0.0202769 0.00175908 43201.6 2; : 930 | 4.39879 6.60248 0.0204218 0.00176177 42872.3 3; : 931 | 4.17549 6.55946 0.0200581 0.00175886 43717.6 4; : 932 | 4.18849 6.67063 0.0200652 0.00175543 43692.5 5; : 933 Minimum Test error found - save the configuration ; : 933 | 4.07608 6.08713 0.0202588 0.00184594 43447.8 0; : 934 | 4.3998 6.10426 0.0204691 0.00178412 42815.1 1; : 935 | 4.23034 6.39854 0.0202977 0.00176426 43165.2 2; : 936 Minimum Test error found - save the configuration ; : 936 | 4.45077 5.93539 0.020128 0.0018336 43729.3 0; : 937 | 4.31583 6.35935 0.0203501 0.00176302 43040.6 1; : 938 Minimum Test error found - save the configuration ; : 938 | 4.1293 5.8271 0.0205749 0.0018749 42780.8 0; : 939 Minimum Test error found - save the configuration ; : 939 | 4.02273 5.7049 0.0206164 0.00186577 42665.2 0; : 940 | 3.91188 6.29174 0.0201055 0.00180854 43723.1 1; : 941 | 3.89757 5.80965 0.0203179 0.00179759 43195.8 2; : 942 | 3.94904 5.73464 0.0200877 0.00175468 43637.1 3; : 943 | 3.90362 5.73888 0.0200954 0.00175028 43608.4 4; : 944 | 3.87035 5.70718 0.0200345 0.0017513 43756.1 5; : 945 | 4.07017 5.95519 0.020321 0.00177709 43140.8 6; : 946 Minimum Test error found - save the configuration ; : 946 | 4.03451 5.59581 0.0201405 0.00182817 43686.3 0; : 947 | 3.85593 5.66203 0.0200425 0.00175434 43744.1 1; : 948 Minimum Test error found - save the configuration ; : 948 | 3.86683 5.35682 0.0204778 0.00185498 42958.2 0; : 949 Minimum Test err,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:108697,configurat,configuration,108697,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,the configuration ; : 983 | 3.37896 4.59559 0.0201715 0.00182642 43608.5 0; : 984 Minimum Test error found - save the configuration ; : 984 | 3.36213 4.34126 0.0202597 0.00185498 43467.1 0; : 985 | 3.39032 4.51659 0.0201503 0.00185184 43719.5 1; : 986 | 3.5234 4.95577 0.0201762 0.0017578 43434.8 2; : 987 | 3.50466 4.60061 0.0201538 0.00175522 43481.6 3; : 988 | 3.61316 4.68965 0.0201071 0.00176 43603.6 4; : 989 | 3.88349 5.24185 0.0200475 0.00175499 43733.8 5; : 990 | 4.0647 4.52576 0.020036 0.00175545 43762.3 6; : 991 | 3.77396 5.32769 0.0200783 0.00175786 43667.1 7; : 992 | 3.45322 4.61211 0.0200841 0.00175232 43640 8; : 993 | 3.32586 4.54016 0.0200585 0.00176018 43719.9 9; : 994 | 3.54317 4.65875 0.0201539 0.00181263 43617.4 10; : 995 | 3.38008 5.03795 0.0206532 0.00179392 42419.4 11; : 996 | 3.40103 4.41295 0.0204644 0.00176564 42783.5 12; : 997 | 3.23461 4.8031 0.0203306 0.00176616 43093.1 13; : 998 | 3.41797 4.46788 0.0203618 0.00175568 42996.7 14; : 999 Minimum Test error found - save the configuration ; : 999 | 3.31412 4.14973 0.0202938 0.00187677 43438 0; : 1000 | 3.20867 4.17264 0.0201802 0.00179416 43511.4 1; : 1001 | 3.31742 4.17699 0.020287 0.00175118 43159.8 2; : 1002 | 3.35839 4.8143 0.0207434 0.00177731 42180.6 3; : 1003 Minimum Test error found - save the configuration ; : 1003 | 3.42381 4.04915 0.0202591 0.00184351 43441.4 0; : 1004 Minimum Test error found - save the configuration ; : 1004 | 3.27488 4.0384 0.0205262 0.00189376 42935.9 0; : 1005 | 3.09776 4.19224 0.0200956 0.00176781 43649.6 1; : 1006 Minimum Test error found - save the configuration ; : 1006 | 3.1757 3.91876 0.0201134 0.00183093 43757.7 0; : 1007 | 3.17471 4.33126 0.0203423 0.00178093 43100.3 1; : 1008 | 3.23752 4.46797 0.0204556 0.0017847 42847.4 2; : 1009 | 3.5099 4.04664 0.0203963 0.00177013 42950.3 3; : 1010 | 3.39993 4.32216 0.0201011 0.00176915 43639.8 4; : 1011 | 3.28002 4.35065 0.020045 0.00175269 43734.2 5; : 1012 | 3.24301 4.1309 0.0202482 0.00178612 43332 6; : 1013 | 3.,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:113054,configurat,configuration,113054,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,"the current release process the user is referred to the M homepage @bib-C++MINUIT.; M was re–implemented in from 2002–2004, but the functionality is largely compatible with the one of the version. The usage is different in the sense that the re–write from to was done by its signification and not literally (with minor exceptions). Applications such as \(\mbox{MIGRAD}\) have a corresponding class MnMigrad, M “commands” became classes or methods of classes according to their purpose. Users familiar with the version of M , who have not yet used releases from the version, should however read this manual, in order to adapt to the changes as well as to discover the new features and easier ways of using old features.; 3.2 Install M using autoconf/make; For each release of M a tar.gz file is provided for downloading from the M homepage @bib-C++MINUIT. For non-UNIX platforms please refer to the M homepage.; The necessary steps to follow are:. download the tar.gz by clicking on it from the release page; unzip it:; $ unzip Minuit-x.x.x.tar.gz; untar it:; $ tar xvf Minuit-x.x.x.tar; step down to the created Minuit-x.x.x directory:; $ cd Minuit-x.x.x/; run the “configure” script:; $ ./configure; run “make” to compile the source code:; $ make; run “make check” to create the executable example:; $ make check; run the executable example:; $ tests/MnTutorial/Quad4FMain.C. The output should look like that:; Minuit did successfully converge. # of function calls: 74; minimum function value: 1.12392e-09; minimum edm: 1.12392e-09; minimum internal state vector: LAVector parameters:. -1.82079e-05; -1.20794e-05; 6.22382e-06; -3.0465e-05. minimum internal covariance matrix: LASymMatrix parameters:. 4 1 2 2.70022e-18; 1 5 3 1.87754e-17; 2 3 6 2.29467e-17; 2.70022e-18 1.87754e-17 2.29467e-17 1. # ext. || name || type || value || error +/-. 0 || x || free ||-1.821e-05 || 2; 1 || y || free ||-1.208e-05 || 2.236; 2 || z || free || 6.224e-06 || 2.449; 3 || w || free ||-3.047e-05 || 1. MnUserCovari",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/guides/minuit2/Minuit2.html:27800,release,release,27800,root/html534/guides/minuit2/Minuit2.html,https://root.cern,https://root.cern/root/html534/guides/minuit2/Minuit2.html,2,['release'],['release']
Deployability,"the data that needs visualization and then creating the TGTable using this interface.; A simple macro to use a TGTable with a TGSimpleTableInterface:; {; Int_t i = 0, j = 0;; UInt_t nrows = 6, ncolumns = 5;; Double_t** data = new Double_t*[nrows];; for (i = 0; i < nrows; i++) {; data[i] = new Double_t[ncolumns];; for (j = 0; j < ncolumns; j++) {; data[i][j] = 10 * i + j;; }; }; ; // Create a main frame to contain the table; TGMainFrame* mainframe = new TGMainFrame(0, 400, 200);; mainframe->SetCleanup(kDeepCleanup) ;; ; // Create an interface; TGSimpleTableInterface *iface = new TGSimpleTableInterface(data, 6, 5);; ; // Create the table; TGTable *table = new TGTable(mainframe, 999, iface);; ; // Add the table to the main frame; mainframe->AddFrame(table, new TGLayoutHints(kLHintsExpandX | kLHintsExpandY));; ; //Update data; data[5][1] = 3.01;; //update the table view; table->Update();; ; // Layout and map the main frame; mainframe->SetWindowName(""Tree Table Test"") ;; mainframe->MapSubwindows() ;; mainframe->Layout();; mainframe->Resize() ;; mainframe->MapWindow() ;; ; return mainframe;; }; kDeepCleanup@ kDeepCleanupDefinition TGFrame.h:42; kLHintsExpandY@ kLHintsExpandYDefinition TGLayout.h:31; kLHintsExpandX@ kLHintsExpandXDefinition TGLayout.h:30; dataOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void dataDefinition TGWin32VirtualXProxy.cxx:104; TGCompositeFrame::AddFramevirtual void AddFrame(TGFrame *f, TGLayoutHints *l=nullptr)Add frame to the composite frame using the specified layout hints.Definition TGFrame.cxx:1117; TGCompositeFrame::MapSubwindowsvoid MapSubwindows() overrideMap all sub windows that are part of the composite frame.Definition TGFrame.cxx:1164; TGCompositeFrame::Layoutvoid Layout() overrideLayout the elements of the composite frame.Definition TGFrame.cxx:1257; TGCompositeFrame::SetCleanupvoid SetCleanup(Int_t mode=kLocalCleanup) overrideTurn",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGTable.html:2301,update,update,2301,doc/master/classTGTable.html,https://root.cern,https://root.cern/doc/master/classTGTable.html,1,['update'],['update']
Deployability,"the heap object exists but we have lost our way to access it. In general, this is not a problem. If any object will outlive the compound statement in which it was created then a more permanent pointer will point to it, which frequently is part of another heap object. See Resetting the Interpreter Environment in the chapter “Cling the C++ Interpreter”.; 7 The C++ Interpreter Cling. ROOT has a C++ interpreter called cling built in. It is used for the prompt, both C++ and Python. It also serves as a source of information to store C++ objects, and provides the back-end for ROOT’s signal/slot and plug-in mechanisms.; This chapter focuses on the parts of cling that you will encounter while interacting with ROOT.; 7.1 The ROOT Prompt; Start up a ROOT session by typing root at the system prompt.; $ root; -------------------------------------------------------------------------; | Welcome to ROOT 6.10/01 http://root.cern.ch |; | (c) 1995-2017, The ROOT Team |; | Built for macosx64 |; | From heads/v6-10-00-patches@v6-10-00-25-g9f78c3a, Jul 03 2017, 11:39:44 |; | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |; -------------------------------------------------------------------------. root [0]; Now we create a TLine object:; root [1] TLine l;; root [2] l.Print(); TLine X1=0.000000 Y1=0.000000 X2=0.000000 Y2=0.000000; root [3] l.SetX1(10); root [4] l.SetY1(11); root [5] l.Print(); TLine X1=10.000000 Y1=11.000000 X2=0.000000 Y2=0.000000; root [6] .g l; .g l; ROOT_prompt_0 1 (address: NA) class TLine l, size = 72; root [7] l.GetX1();; root [8] l.GetX1(); (Double_t) 1.000000e+01; Note some of the features of the ROOT prompt: - Terminating with ‘;‘ is not required, see “C++ Extensions To Ease Scripting” below. - Emacs style command line editing. - Raw interpreter commands start with a dot; .g l for instance shows the interpreter information on the global called l. - To show the result of an expression just do not type the trailing ;.; For the further examples we will “a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:256370,patch,patches,256370,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['patch'],['patches']
Deployability,"the histogram will be drawn, the Draw() method can be invoked with an option. For instance to draw a 2D histogram as a lego plot it is enough to do: h->Draw(""lego"");; THistPainter offers many options to paint 1D, 2D and 3D histograms.; When the Draw() method of a histogram is called for the first time (TH1::Draw), it creates a THistPainter object and saves a pointer to this ""painter"" as a data member of the histogram. The THistPainter class specializes in the drawing of histograms. It is separated from the histogram so that one can have histograms without the graphics overhead, for example in a batch program. Each histogram having its own painter (rather than a central singleton painter painting all histograms), allows two histograms to be drawn in two threads without overwriting the painter's values.; When a displayed histogram is filled again, there is no need to call the Draw() method again; the image will be refreshed the next time the pad will be updated.; A pad is updated after one of these three actions:. a carriage control on the ROOT command line,; a click inside the pad,; a call to TPad::Update. By default a call to TH1::Draw() clears the pad of all objects before drawing the new image of the histogram. One can use the SAME option to leave the previous display intact and superimpose the new histogram. The same histogram can be drawn with different graphics options in different pads.; When a displayed histogram is deleted, its image is automatically removed from the pad.; To create a copy of the histogram when drawing it, one can use TH1::DrawClone(). This will clone the histogram and allow to change and delete the original one without affecting the clone. Histograms' plotting options; Most options can be concatenated with or without spaces or commas, for example: h->Draw(""E1 SAME"");; The options are not case sensitive: h->Draw(""e1 same"");; The default drawing option can be set with TH1::SetOption and retrieve using TH1::GetOption: root [0] h->Draw(); // Dra",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHistPainter.html:3763,update,updated,3763,doc/master/classTHistPainter.html,https://root.cern,https://root.cern/doc/master/classTHistPainter.html,1,['update'],['updated']
Deployability,"the infinite interval (-inf,+inf) using the function previously set with Integrator::SetFunction method. ; Definition at line 364 of file Integrator.h. ◆ Integral() [2/8]. double ROOT::Math::IntegratorOneDim::Integral ; (; const IGenFunction & ; f). inline . evaluate the Integral of a function f over the infinite interval (-inf,+inf) ; Parameters. fintegration function. The function type must implement the mathlib::IGenFunction interface . Definition at line 258 of file Integrator.h. ◆ Integral() [3/8]. double ROOT::Math::IntegratorOneDim::Integral ; (; const IGenFunction & ; f, . const std::vector< double > & ; pts . ). inline . evaluate the Integral of a function f with known singular points over the defined Integral (a,b) ; Parameters. fintegration function. The function type must implement the mathlib::IGenFunction interface ; ptsvector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( a) and last element the upper value. . Definition at line 316 of file Integrator.h. ◆ Integral() [4/8]. double ROOT::Math::IntegratorOneDim::Integral ; (; const IGenFunction & ; f, . double ; a, . double ; b . ). inline . evaluate the Integral of a function f over the defined interval (a,b) ; Parameters. fintegration function. The function type must implement the mathlib::IGenFunction interface ; alower value of the integration interval ; bupper value of the integration interval . Definition at line 241 of file Integrator.h. ◆ Integral() [5/8]. double ROOT::Math::IntegratorOneDim::Integral ; (; const std::vector< double > & ; pts). inline . evaluate the Integral over the defined interval (a,b) using the function previously set with Integrator::SetFunction method. ; The function has known singular points. Parameters. ptsvector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower ed",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:13209,integrat,integration,13209,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,1,['integrat'],['integration']
Deployability,"the integration interval; @param b upper value of the integration interval. double Integral(const ROOT::Math::IGenFunction& f, double a, double b). evaluate the Integral of a function f over the defined interval (a,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower value of the integration interval; @param b upper value of the integration interval. return Integral(a,b). double IntegralUp(const ROOT::Math::IGenFunction& f, double a). evaluate the Integral of a function f over the semi-infinite interval (a,+inf); @param f integration function. The function type must be a C++ callable object implementing operator()(double x); @param a lower value of the integration interval. double IntegralLow(const ROOT::Math::IGenFunction& f, double b). evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b); @param f integration function. The function type must be a C++ callable object implementing operator()(double x); @param b upper value of the integration interval. double IntegralCauchy(const ROOT::Math::IGenFunction& f, double a, double b, double c). evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b) with a singularity at c; @param f integration function. The function type must be a C++ callable object implementing operator()(double x); @param a lower value of the integration interval; @param b upper value of the integration interval; @param c position of singularity. double operator()(double x). define operator() for IntegralLow. double Result() const. return the Result of the last Integral calculation. { return fIntegrator == 0 ? 0 : fIntegrator->Result(); }. double Error() const. return the estimate of the absolute Error of the last Integral calculation. { return fIntegrator == 0 ? 0 : fIntegrator->Error(); }. int Status() const. return the Error Status of the last Integral calculation. { return fIntegrator == 0 ? -1 : fIntegrat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__IntegratorOneDim.html:8043,integrat,integration,8043,root/html526/ROOT__Math__IntegratorOneDim.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__IntegratorOneDim.html,1,['integrat'],['integration']
Deployability,the list (plus the builtins types). ; Definition at line 1865 of file TROOT.cxx. ◆ GetMacroDir(). const TString & TROOT::GetMacroDir ; (; ). static . Get the macro directory in the installation. Static utility function. ; Definition at line 3094 of file TROOT.cxx. ◆ GetMacroPath(). const char * TROOT::GetMacroPath ; (; ). static . Get macro search path. Static utility function. ; Definition at line 2762 of file TROOT.cxx. ◆ GetNclasses(). Int_t TROOT::GetNclasses ; (; ); const. Get number of classes. ; Definition at line 1876 of file TROOT.cxx. ◆ GetNtypes(). Int_t TROOT::GetNtypes ; (; ); const. Get number of types. ; Definition at line 1884 of file TROOT.cxx. ◆ GetPluginManager(). TPluginManager * TROOT::GetPluginManager ; (; ); const. inline . Definition at line 208 of file TROOT.h. ◆ GetRootFolder(). TFolder * TROOT::GetRootFolder ; (; ); const. inline . Definition at line 274 of file TROOT.h. ◆ GetRootSys(). const TString & TROOT::GetRootSys ; (; ). static . Get the rootsys directory in the installation. Static utility function. ; Definition at line 2979 of file TROOT.cxx. ◆ GetSelectedPad(). TVirtualPad * TROOT::GetSelectedPad ; (; ); const. inline . Definition at line 271 of file TROOT.h. ◆ GetSelectedPrimitive(). const TObject * TROOT::GetSelectedPrimitive ; (; ); const. inline . Definition at line 270 of file TROOT.h. ◆ GetSharedLibDir(). const TString & TROOT::GetSharedLibDir ; (; ). static . Get the shared libraries directory in the installation. Static utility function. ; Definition at line 3031 of file TROOT.cxx. ◆ GetSourceDir(). const TString & TROOT::GetSourceDir ; (; ). static . Get the source directory in the installation. Static utility function. ; Definition at line 3147 of file TROOT.cxx. ◆ GetStyle(). TStyle * TROOT::GetStyle ; (; const char * ; name); const. Return pointer to style with name. ; Definition at line 1579 of file TROOT.cxx. ◆ GetTTFFontDir(). const TString & TROOT::GetTTFFontDir ; (; ). static . Get the fonts directory in the insta,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTROOT.html:60353,install,installation,60353,doc/v632/classTROOT.html,https://root.cern,https://root.cern/doc/v632/classTROOT.html,1,['install'],['installation']
Deployability,the list (plus the builtins types). ; Definition at line 1865 of file TROOT.cxx. ◆ GetMacroDir(). const TString & TROOT::GetMacroDir ; (; ). static . Get the macro directory in the installation. Static utility function. ; Definition at line 3098 of file TROOT.cxx. ◆ GetMacroPath(). const char * TROOT::GetMacroPath ; (; ). static . Get macro search path. Static utility function. ; Definition at line 2762 of file TROOT.cxx. ◆ GetNclasses(). Int_t TROOT::GetNclasses ; (; ); const. Get number of classes. ; Definition at line 1876 of file TROOT.cxx. ◆ GetNtypes(). Int_t TROOT::GetNtypes ; (; ); const. Get number of types. ; Definition at line 1884 of file TROOT.cxx. ◆ GetPluginManager(). TPluginManager * TROOT::GetPluginManager ; (; ); const. inline . Definition at line 208 of file TROOT.h. ◆ GetRootFolder(). TFolder * TROOT::GetRootFolder ; (; ); const. inline . Definition at line 274 of file TROOT.h. ◆ GetRootSys(). const TString & TROOT::GetRootSys ; (; ). static . Get the rootsys directory in the installation. Static utility function. ; Definition at line 2983 of file TROOT.cxx. ◆ GetSelectedPad(). TVirtualPad * TROOT::GetSelectedPad ; (; ); const. inline . Definition at line 271 of file TROOT.h. ◆ GetSelectedPrimitive(). const TObject * TROOT::GetSelectedPrimitive ; (; ); const. inline . Definition at line 270 of file TROOT.h. ◆ GetSharedLibDir(). const TString & TROOT::GetSharedLibDir ; (; ). static . Get the shared libraries directory in the installation. Static utility function. ; Definition at line 3035 of file TROOT.cxx. ◆ GetSourceDir(). const TString & TROOT::GetSourceDir ; (; ). static . Get the source directory in the installation. Static utility function. ; Definition at line 3151 of file TROOT.cxx. ◆ GetStyle(). TStyle * TROOT::GetStyle ; (; const char * ; name); const. Return pointer to style with name. ; Definition at line 1579 of file TROOT.cxx. ◆ GetTTFFontDir(). const TString & TROOT::GetTTFFontDir ; (; ). static . Get the fonts directory in the insta,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTROOT.html:60322,install,installation,60322,doc/master/classTROOT.html,https://root.cern,https://root.cern/doc/master/classTROOT.html,1,['install'],['installation']
Deployability,"the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooBinSamplingPdf.h>. Inheritance diagram for RooBinSamplingPdf:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooBinSamplingPdf() [1/3]. RooBinSamplingPdf::RooBinSamplingPdf ; (; ). inline . Definition at line 31 of file RooBinSamplingPdf.h. ◆ RooBinSamplingPdf() [2/3]. RooBinSamplingPdf::RooBinSamplingPdf ; (; const char * ; name, . const char * ; title, . RooAbsRealLValue & ; observable, . RooAbsPdf & ; inputPdf, . double ; epsilon = 1.E-4 . ). Construct a new RooBinSamplingPdf. ; Parameters. [in]nameA name to identify this object. ; [in]titleTitle (for e.g. plotting) ; [in]observableObservable to integrate over (the one that is binned). ; [in]inputPdfA PDF whose bins should be sampled with higher precision. ; [in]epsilonRelative precision for the integrator, which is used to sample the bins. Note that ROOT's default is to use an adaptive integrator, which in its first iteration usually reaches relative precision of 1.E-4 or better. Therefore, asking for lower precision rarely has an effect. . Definition at line 113 of file RooBinSamplingPdf.cxx. ◆ RooBinSamplingPdf() [3/3]. RooBinSamplingPdf::RooBinSamplingPdf ; (; const RooBinSamplingPdf & ; other, . const char * ; name = nullptr . ). Copy a RooBinSamplingPdf. ; Parameters. [in]otherPDF to copy. ; [in]nameOptionally rename the copy. . Definition at line 131 of file RooBinSamplingPdf.cxx. Member Function Documentation. ◆ analyticalIntegral(). double RooBinSamplingPdf::analyticalIntegral ; (; Int_t ; code, . const char * ; rangeName = nullptr . ); const. inlineoverridevirtual . Forwards to the PDF's implementation. ; Reimplemented from RooAbsReal.; Definition at line 60 of file RooBinSamplingPdf.h. ◆ analyticalIntegralWN(). double RooBinSamplingPdf::analyticalIntegralWN ; (; Int_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBinSamplingPdf.html:78507,integrat,integrator,78507,doc/master/classRooBinSamplingPdf.html,https://root.cern,https://root.cern/doc/master/classRooBinSamplingPdf.html,1,['integrat'],['integrator']
Deployability,"the model-element fVizModel.; A warning is printed if the model-element fVizModel is not set. void SaveVizParams(ostream& out, const TString& tag, const TString& var); Save visualization parameters for this element with given tag. This function creates the instantiation code, calls virtual; WriteVizParams() and, at the end, writes out the code for; registration of the model into the VizDB. void WriteVizParams(ostream& out, const TString& var); Write-out visual parameters for this object.; This is a virtual function and all sub-classes are required to; first call the base-element version.; The name of the element pointer is 'x%03d', due to cint limitations.; Three spaces should be used for indentation, same as in; SavePrimitive() methods. void VizDB_Apply(const char* tag); Set visual parameters for this object for given tag. void VizDB_Reapply(); Reset visual parameters for this object from VizDB.; The model object must be already set. void VizDB_UpdateModel(Bool_t update = kTRUE); Copy visual parameters from this element to viz-db model.; If update is set, all clients of the model will be updated to; the new value.; A warning is printed if the model-element fVizModel is not set. void VizDB_Insert(const char* tag, Bool_t replace = kTRUE, Bool_t update = kTRUE); Create a replica of element and insert it into VizDB with given tag.; If replace is true an existing element with the same tag will be replaced.; If update is true, existing client of tag will be updated. TEveElement* GetMaster(); Returns the master element - that is:; - master of projectable, if this is a projected;; - master of compound, if fCompound is set;; - master of first compound parent, if kSCBTakeAnyParentAsMaster bit is set;; If non of the above is true, *this* is returned. void AddParent(TEveElement* re); Add re into the list parents.; Adding parent is subordinate to adding an element.; This is an internal function. void RemoveParent(TEveElement* re); Remove re from the list of parents.; Removing pa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveElement.html:16311,update,update,16311,root/html528/TEveElement.html,https://root.cern,https://root.cern/root/html528/TEveElement.html,6,['update'],['update']
Deployability,"the operators template <class Base> ; Definition at line 1839 of file RooLagrangianMorphFunc.cxx. ◆ setupObservable(). RooRealVar * RooLagrangianMorphFunc::setupObservable ; (; const char * ; obsname, . TClass * ; mode, . TObject * ; inputExample . ). private . setup observable, recycle existing observable if defined ; Definition at line 1620 of file RooLagrangianMorphFunc.cxx. ◆ Streamer(). void RooLagrangianMorphFunc::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsReal. ◆ StreamerNVirtual(). void RooLagrangianMorphFunc::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 257 of file RooLagrangianMorphFunc.h. ◆ updateCoefficients(). bool RooLagrangianMorphFunc::updateCoefficients ; (; ). Retrieve the new physics objects and update the weights in the morphing function. ; Definition at line 2236 of file RooLagrangianMorphFunc.cxx. ◆ updateSampleWeights(). void RooLagrangianMorphFunc::updateSampleWeights ; (; ). inlineprivate . update sample weight (-?-) ; Definition at line 1683 of file RooLagrangianMorphFunc.cxx. ◆ useCoefficients() [1/2]. bool RooLagrangianMorphFunc::useCoefficients ; (; const char * ; filename). Definition at line 2298 of file RooLagrangianMorphFunc.cxx. ◆ useCoefficients() [2/2]. bool RooLagrangianMorphFunc::useCoefficients ; (; const TMatrixD & ; inverse). setup the morphing function with a predefined inverse matrix call this function before any other after creating the object ; Definition at line 2263 of file RooLagrangianMorphFunc.cxx. ◆ writeCoefficients(). bool RooLagrangianMorphFunc::writeCoefficients ; (; const char * ; filename). write the inverse matrix to a file ; Definition at line 2315 of file RooLagrangianMorphFunc.cxx. ◆ writeMatrixToFile(). void RooLagrangianMorphFunc::writeMatrixToFile ; (; const TMatrixD & ; matrix, . const char * ; fname . ). write a matrix to a file ; Definition at line 1588 of file RooLagrangianMorphFunc.cx",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooLagrangianMorphFunc.html:94265,update,updateSampleWeights,94265,doc/master/classRooLagrangianMorphFunc.html,https://root.cern,https://root.cern/doc/master/classRooLagrangianMorphFunc.html,1,['update'],['updateSampleWeights']
Deployability,"the tree starts. This is a convenient place to create your histograms.; TSelector::Notify() - it is called at the first entry of a new tree in a chain.; TSelector::Process() - it is called to process an event. It is the user’s responsibility to read the corresponding entry in memory (may be just a partial read). Once the entry is in memory one can apply a selection and if the event is selected histograms can be filled. Processing stops when this function returns kFALSE. It combines the methods TSelector::ProcessCut() and TSelector::ProcessFill() in one, avoiding the necessity to maintain the state in the class to communicate between these two functions. It reduces the information that needs to be shared between them and promotes a more granular data access by reading branches as they are needed.; TSelector::Terminate() - it is called at the end of a loop on a TTree. This is a convenient place to draw and fit your histograms.; TSelector::Version() - this function provides backward compatibility for old versions and support for the future upgrades.; The TSelector, unlike the resulting class from MakeClass, separates the processing into a ProcessCut() and ProcessFill(), so we can limit reading of branches to the ones we need.; When a selector is used with a TChain in methods Process(), ProcessFill(), ProcessCut(), you must use the pointer to the current TTree to call the method GetEntry(entry). The parameter entry is always the local entry number in the current tree. Assuming that fChain is the pointer to the TChain being processed, use. fChain->GetTree()->GetEntry(entry);; To create a selector call:; root[] T->MakeSelector(""MySelector"");; Where T is the TTree and MySelector is the name of created class and the name of the .h and .C files. The resulting TSelector is the argument to TTree::Process. The argument can be the file name or a pointer to the selector object.; root[] T->Process(""MySelector.C"","""",1000,100);; This call will interpret the class defined in MySelect",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:645005,upgrade,upgrades,645005,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['upgrade'],['upgrades']
Deployability,"then, old can be reused in a new expression.; TFormula new(""x*old"") is equivalent to:; TFormula new(""x*sin(x*(x<0.5 || x>1))""). Up to 4 dimensions are supported (indicated by x, y, z, t); An expression may have 0 parameters or a list of parameters; indicated by the sequence [par_number]. A graph showing the logic to compile and analyze a formula; is shown in TFormula::Compile and TFormula::Analyze.; Once a formula has been compiled, it can be evaluated for a given; set of parameters. see graph in TFormula::EvalPar. This class is the base class for the function classes TF1,TF2 and TF3.; It is also used by the ntuple selection mechanism TNtupleFormula. In version 7 of TFormula, the usage of fOper has been changed; to improve the performance of TFormula::EvalPar.; Conceptually, fOper was changed from a simple array of Int_t; to an array of composite values.; For example a 'ylandau(5)' operation used to be encoded as 4105;; it is now encoded as (klandau >> kTFOperShit) + 5; Any class inheriting from TFormula and using directly fOper (which; is now a private data member), needs to be updated to take this; in consideration. The member functions recommended to set and; access fOper are: SetAction, GetAction, GetActionParam; For more performant access to the information, see the implementation; TFormula::EvalPar. CHANGING DEFAULT SETTINGS. When creating complex formula , it may be necessary to increase; some default parameters. see static function TFormula::SetMaxima. WHY TFormula CANNOT ACCEPT A CLASS MEMBER FUNCTION ?. This is a frequently asked question.; C++ is a strongly typed language. There is no way for TFormula (without; recompiling this class) to know about all possible user defined data types.; This also apply to the case of a static class function.; Because TMath is a special and frequent case, TFormula is aware; of all TMath functions. Function Members (Methods); public:. TFormula(); TFormula(const TFormula& formula); TFormula(const char* name, const char* formu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TFormula.html:2519,update,updated,2519,root/html534/TFormula.html,https://root.cern,https://root.cern/root/html534/TFormula.html,1,['update'],['updated']
Deployability,"then, old can be reused in a new expression.; TFormula new(""x*old"") is equivalent to:; TFormula new(""x*sin(x*(x<0.5 || x>1))""). Up to 4 dimensions are supported (indicated by x, y, z, t); An expression may have 0 parameters or a list of parameters; indicated by the sequence [par_number]. A graph showing the logic to compile and analyze a formula; is shown in TFormula::Compile and TFormula::Analyze.; Once a formula has been compiled, it can be evaluated for a given; set of parameters. see graph in TFormula::EvalPar. This class is the base class for the function classes TF1,TF2 and TF3.; It is also used by the ntuple selection mechanism TNtupleFormula. In version 7 of TFormula, the usage of fOper has been changed; to improve the performance of TFormula::EvalPar.; Conceptually, fOper was changed from a simple array of Int_t; to an array of composite values.; For example a 'ylandau(5)' operation used to be encoded as 4105;; it is now encoded as (klandau >> kTFOperShit) + 5; Any class inheriting from TFormula and using directly fOper (which; is now a private data member), needs to be updated to take this; in consideration. The member functions recommended to set and; access fOper are: SetAction, GetAction, GetActionParam; For more performant access to the information, see the implementation; TFormula::EvalPar. CHANGING DEFAULT SETTINGS. When creating complex formula , it may be necessary to increase; some default parameters. see static function TFormula::SetMaxima. WHY TFormula CANNOT ACCEPT A CLASS MEMBER FUNCTION ?. This is a frequently asked question.; C++ is a strongly typed language. There is no way for TFormula (without; recompiling this class) to know about all possible user defined data types.; This also apply to the case of a static class function.; Because TMath is a special and frequent case, TFormula is aware; of all TMath functions. Function Members (Methods); public:. virtual~TFormula(); voidTObject::AbstractMethod(const char* method) const; virtual voidAnal",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TFormula.html:2519,update,updated,2519,root/html602/TFormula.html,https://root.cern,https://root.cern/root/html602/TFormula.html,2,['update'],['updated']
Deployability,"there are not existing or number of parameters does not match existing one, create a new parameter setting list. void SetFromFitResult(const ROOT::Fit::FitResult& rhs). Set the parameter setting from a fit Result. ROOT::Math::Minimizer * CreateMinimizer(). create a new minimizer according to chosen configuration. void SetMinimizer(const char* type, const char* algo = 0). set minimizer type. const std::string & MinimizerType() const. return type of minimizer package. { return fMinimizerOpts.MinimizerType(); }. const std::string & MinimizerAlgoType() const. return type of minimizer algorithms. { return fMinimizerOpts.MinimizerAlgorithm(); }. bool NormalizeErrors() const. flag to check if resulting errors are be normalized according to chi2/ndf. { return fNormErrors; }. bool ParabErrors() const; do analysis for parabolic errors. { return fParabErrors; }. bool MinosErrors() const; do minos errros analysis on the parameters. { return fMinosErrors; }. bool UpdateAfterFit() const; Update configuration after a fit using the FitResult. { return fUpdateAfterFit; }. const std::vector<unsigned int> & MinosParams() const; return vector of parameter indeces for which the Minos Error will be computed. { return fMinosParams; }. void SetNormErrors(bool on = true). set the option to normalize the error on the result according to chi2/ndf. { fNormErrors= on; }. void SetParabErrors(bool on = true); set parabolic erros. { fParabErrors = on; }. void SetMinosErrors(bool on = true); set Minos erros. { fMinosErrors = on; }. void SetMinosErrors(const vector<unsigned int>& paramInd); set parameter indeces for running Minos; this can be used for running Minos on a subset of parameters - otherwise is run on all of them; if MinosErrors() is set. void SetUpdateAfterFit(bool on = true); Update configuration after a fit using the FitResult. { fUpdateAfterFit = on; }. void SetDefaultMinimizer(const char* type, const char* algo = 0). static function to control default minimizer type and algorithm. » A",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ROOT__Fit__FitConfig.html:4737,configurat,configuration,4737,root/html530/ROOT__Fit__FitConfig.html,https://root.cern,https://root.cern/root/html530/ROOT__Fit__FitConfig.html,1,['configurat'],['configuration']
Deployability,"these are just the extreme points of the contour (use the MnContours::contour(…) method in order to get the points of the contour and the ones of the \(\mbox{MINOS}\) errors). MnContours::operator() returns a std::vector\(<\)std::pair\(<\)double,double\(> >\) of (x,y) points. Using MnPlot::operator() will generate a text graphics plot in the terminal.; 3 M installation; 3.1 M releases; To follow the current release process the user is referred to the M homepage @bib-C++MINUIT.; M was re–implemented in from 2002–2004, but the functionality is largely compatible with the one of the version. The usage is different in the sense that the re–write from to was done by its signification and not literally (with minor exceptions). Applications such as \(\mbox{MIGRAD}\) have a corresponding class MnMigrad, M “commands” became classes or methods of classes according to their purpose. Users familiar with the version of M , who have not yet used releases from the version, should however read this manual, in order to adapt to the changes as well as to discover the new features and easier ways of using old features.; 3.2 Install M using autoconf/make; For each release of M a tar.gz file is provided for downloading from the M homepage @bib-C++MINUIT. For non-UNIX platforms please refer to the M homepage.; The necessary steps to follow are:. download the tar.gz by clicking on it from the release page; unzip it:; $ unzip Minuit-x.x.x.tar.gz; untar it:; $ tar xvf Minuit-x.x.x.tar; step down to the created Minuit-x.x.x directory:; $ cd Minuit-x.x.x/; run the “configure” script:; $ ./configure; run “make” to compile the source code:; $ make; run “make check” to create the executable example:; $ make check; run the executable example:; $ tests/MnTutorial/Quad4FMain.C. The output should look like that:; Minuit did successfully converge. # of function calls: 74; minimum function value: 1.12392e-09; minimum edm: 1.12392e-09; minimum internal state vector: LAVector parameters:. -1.82079e-05; -",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/guides/minuit2/Minuit2.html:27353,release,releases,27353,root/html534/guides/minuit2/Minuit2.html,https://root.cern,https://root.cern/root/html534/guides/minuit2/Minuit2.html,2,['release'],['releases']
Deployability,"this TGraphPolar with its current attributes.; . void PaintGraphQQ(TGraph* theGraph, Option_t* option). Paint this graphQQ. No options for the time being.; ; . void PaintGraphSimple(TGraph* theGraph, Option_t* option). Paint a simple graph, without errors bars.; ; . void PaintPolyLineHatches(TGraph* theGraph, Int_t n, const Double_t* x, const Double_t* y). Paint a polyline with hatches on one side showing an exclusion zone. x and y; are the the vectors holding the polyline and n the number of points in the; polyline and w the width of the hatches. w can be negative.; This method is not meant to be used directly. It is called automatically; according to the line style convention.; ; . void PaintStats(TGraph* theGraph, TF1* fit). Paint the statistics box with the fit info.; ; . void Smooth(TGraph* theGraph, Int_t npoints, Double_t* x, Double_t* y, Int_t drawtype). Smooth a curve given by N points.; ; The original code is from an underlaying routine for Draw based on the; CERN GD3 routine TVIPTE:; ; Author - Marlow etc. Modified by - P. Ward Date - 3.10.1973; ; This method draws a smooth tangentially continuous curve through; the sequence of data points P(I) I=1,N where P(I)=(X(I),Y(I)).; The curve is approximated by a polygonal arc of short vectors.; The data points can represent open curves, P(1) != P(N) or closed; curves P(2) == P(N). If a tangential discontinuity at P(I) is; required, then set P(I)=P(I+1). Loops are also allowed.; ; Reference Marlow and Powell, Harwell report No.R.7092.1972; MCCONALOGUE, Computer Journal VOL.13, NO4, NOV1970P p392 6; . npoints : Number of data points.; x : Abscissa; y : Ordinate; ; . TGraphPainter(). » Author: Olivier Couet » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/histpainter:$Id: TGraphPainter.h,v 1.00 » Last generated: 2011-12-02 14:27; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGraphPainter.html:24962,continuous,continuous,24962,root/html532/TGraphPainter.html,https://root.cern,https://root.cern/root/html532/TGraphPainter.html,1,['continuous'],['continuous']
Deployability,"this TGraphPolar with its current attributes.; . void PaintGraphQQ(TGraph* theGraph, Option_t* option). Paint this graphQQ. No options for the time being.; ; . void PaintGraphSimple(TGraph* theGraph, Option_t* option). Paint a simple graph, without errors bars.; ; . void PaintPolyLineHatches(TGraph* theGraph, Int_t n, const Double_t* x, const Double_t* y). Paint a polyline with hatches on one side showing an exclusion zone. x and y; are the the vectors holding the polyline and n the number of points in the; polyline and w the width of the hatches. w can be negative.; This method is not meant to be used directly. It is called automatically; according to the line style convention.; ; . void PaintStats(TGraph* theGraph, TF1* fit). Paint the statistics box with the fit info.; ; . void Smooth(TGraph* theGraph, Int_t npoints, Double_t* x, Double_t* y, Int_t drawtype). Smooth a curve given by N points.; ; The original code is from an underlaying routine for Draw based on the; CERN GD3 routine TVIPTE:; ; Author - Marlow etc. Modified by - P. Ward Date - 3.10.1973; ; This method draws a smooth tangentially continuous curve through; the sequence of data points P(I) I=1,N where P(I)=(X(I),Y(I)).; The curve is approximated by a polygonal arc of short vectors.; The data points can represent open curves, P(1) != P(N) or closed; curves P(2) == P(N). If a tangential discontinuity at P(I) is; required, then set P(I)=P(I+1). Loops are also allowed.; ; Reference Marlow and Powell, Harwell report No.R.7092.1972; MCCONALOGUE, Computer Journal VOL.13, NO4, NOV1970P p392 6; . npoints : Number of data points.; x : Abscissa; y : Ordinate; ; . TGraphPainter(). » Author: Olivier Couet » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/histpainter:$Id: TGraphPainter.h,v 1.00 » Last generated: 2015-03-14 16:40; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGraphPainter.html:24790,continuous,continuous,24790,root/html534/TGraphPainter.html,https://root.cern,https://root.cern/root/html534/TGraphPainter.html,1,['continuous'],['continuous']
Deployability,"this TGraphPolar with its current attributes.; . void PaintGraphQQ(TGraph* theGraph, Option_t* option). Paint this graphQQ. No options for the time being.; ; . void PaintGraphSimple(TGraph* theGraph, Option_t* option). Paint a simple graph, without errors bars.; ; . void PaintPolyLineHatches(TGraph* theGraph, Int_t n, const Double_t* x, const Double_t* y). Paint a polyline with hatches on one side showing an exclusion zone. x and y; are the the vectors holding the polyline and n the number of points in the; polyline and w the width of the hatches. w can be negative.; This method is not meant to be used directly. It is called automatically; according to the line style convention.; ; . void PaintStats(TGraph* theGraph, TF1* fit). Paint the statistics box with the fit info.; ; . void Smooth(TGraph* theGraph, Int_t npoints, Double_t* x, Double_t* y, Int_t drawtype). Smooth a curve given by N points.; ; The original code is from an underlaying routine for Draw based on the; CERN GD3 routine TVIPTE:; ; Author - Marlow etc. Modified by - P. Ward Date - 3.10.1973; ; This method draws a smooth tangentially continuous curve through; the sequence of data points P(I) I=1,N where P(I)=(X(I),Y(I)).; The curve is approximated by a polygonal arc of short vectors.; The data points can represent open curves, P(1) != P(N) or closed; curves P(2) == P(N). If a tangential discontinuity at P(I) is; required, then set P(I)=P(I+1). Loops are also allowed.; ; Reference Marlow and Powell, Harwell report No.R.7092.1972; MCCONALOGUE, Computer Journal VOL.13, NO4, NOV1970P p392 6; . npoints : Number of data points.; x : Abscissa; y : Ordinate; ; . TGraphPainter(). » Author: Olivier Couet » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/histpainter:$Id: TGraphPainter.h,v 1.00 » Last generated: 2015-06-02 16:05; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TGraphPainter.html:25249,continuous,continuous,25249,root/html604/TGraphPainter.html,https://root.cern,https://root.cern/root/html604/TGraphPainter.html,1,['continuous'],['continuous']
Deployability,"this TGraphPolar with its current attributes.; . void PaintGraphQQ(TGraph* theGraph, Option_t* option). Paint this graphQQ. No options for the time being.; ; . void PaintGraphSimple(TGraph* theGraph, Option_t* option). Paint a simple graph, without errors bars.; ; . void PaintPolyLineHatches(TGraph* theGraph, Int_t n, const Double_t* x, const Double_t* y). Paint a polyline with hatches on one side showing an exclusion zone. x and y; are the the vectors holding the polyline and n the number of points in the; polyline and w the width of the hatches. w can be negative.; This method is not meant to be used directly. It is called automatically; according to the line style convention.; ; . void PaintStats(TGraph* theGraph, TF1* fit). Paint the statistics box with the fit info.; ; . void Smooth(TGraph* theGraph, Int_t npoints, Double_t* x, Double_t* y, Int_t drawtype). Smooth a curve given by N points.; ; The original code is from an underlaying routine for Draw based on the; CERN GD3 routine TVIPTE:; ; Author - Marlow etc. Modified by - P. Ward Date - 3.10.1973; ; This method draws a smooth tangentially continuous curve through; the sequence of data points P(I) I=1,N where P(I)=(X(I),Y(I)).; The curve is approximated by a polygonal arc of short vectors.; The data points can represent open curves, P(1) != P(N) or closed; curves P(2) == P(N). If a tangential discontinuity at P(I) is; required, then set P(I)=P(I+1). Loops are also allowed.; ; Reference Marlow and Powell, Harwell report No.R.7092.1972; MCCONALOGUE, Computer Journal VOL.13, NO4, NOV1970P p392 6; . npoints : Number of data points.; x : Abscissa; y : Ordinate; ; . TGraphPainter(). » Author: Olivier Couet » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/histpainter:$Id: TGraphPainter.h,v 1.00 » Last generated: 2015-06-30 15:05; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGraphPainter.html:25249,continuous,continuous,25249,root/html602/TGraphPainter.html,https://root.cern,https://root.cern/root/html602/TGraphPainter.html,1,['continuous'],['continuous']
Deployability,"this is probably a more complex approach than most of us in physics are willing to tolerate. I suspect that you do not have much choice since the user community wants CINT-like functionality from ROOT (and one feature of the ROOT project that makes it great is a full consideration of what experiments and users need for data taking and analysis).; Thanks for the interesting discussion! I have learned quite a bit about ROOT plans and it all seems very promising. Cheers!. Submitted by Anonymous (not verified) on Thu, 07/23/2015 - 21:52 Permalink . Dependency on Python . In my experience, getting python scripts to work is a very unreliable affair. They almost always have dependencies on external packages and if you don't have EXACTLY the same version of python you only have about a 50% chance that anything you use will work. The language is simply not stable. C++ is bad enough. Scripting languages are much, much worse. The maintainers think the language is their playtoy and they take no responsibility to maintain backward compatibility from release to release. Python is just a Bad Idea(tm). Submitted by Anonymous (not verified) on Thu, 07/23/2015 - 21:52 Permalink . CINT need to be communitized, that's the whole problem . Indeed, for decade, Cint never made it to open-source because of ROOT dependencies and backward compatiblities. Now that I am seeing this arguement is no more, and we are going to dig up some old grave.. I don't see why Cint shouldn't be taking over by open source or boost. I don't see how we are going to leverage on Clang/Cling at all... all I am seeing is regression session will be made at a far higher degree. I ""plussoie"" Renee's point, mixing technologies is a very , veRY, VERY bad idea. Mostly because Python isn't an ISO standard like many others langage. We should stick to C++ ISO and that's all we need. Adding few more features in Cint isn't a big deal. Submitted by Anonymous (not verified) on Thu, 07/23/2015 - 21:52 Permalink . CINT and Open So",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/blog/do-we-need-yet-another-custom-c-interpreter.html:19219,release,release,19219,d/blog/do-we-need-yet-another-custom-c-interpreter.html,https://root.cern,https://root.cern/d/blog/do-we-need-yet-another-custom-c-interpreter.html,2,['release'],['release']
Deployability,"this procedure returns a unique identifier for the string. ; This procedure returns a pointer to a new char string corresponding to the ""string"" argument. The new string has a value identical to string (strcmp will return 0), but it's guaranteed that any other calls to this procedure with a string equal to ""string"" will return exactly the same result (i.e. can compare pointer values directly, without having to call strcmp on what they point to). ; Definition at line 1785 of file TGFont.cxx. ◆ IsA(). TClass * TGFontPool::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 260 of file TGFont.h. ◆ MakeFont(). TGFont * TGFontPool::MakeFont ; (; TGFont * ; font, . FontStruct_t ; fontStruct, . const char * ; fontName . ). protected . Helper for GetNativeFont() and GetFontFromAttributes(). ; Creates and initializes a new TGFont object.; font – If non-NULL, store the information in this existing TGFont object, rather than creating a new one; the existing contents of the font will be released. If NULL, a new TGFont object is created. fontStruct – information about font. fontName – The string passed to TVirtualX::LoadQueryFont() to construct the fontStruct. ; Definition at line 2590 of file TGFont.cxx. ◆ NameOfFont(). const char * TGFontPool::NameOfFont ; (; TGFont * ; font). Given a font, return a textual string identifying it. ; Definition at line 2262 of file TGFont.cxx. ◆ operator=(). TGFontPool & TGFontPool::operator= ; (; const TGFontPool & ; fp). privatedelete . ◆ ParseFontName(). Bool_t TGFontPool::ParseFontName ; (; const char * ; string, . FontAttributes_t * ; fa . ). Converts a string into a set of font attributes that can be used to construct a font. ; The string can be one of the following forms: XLFD (see X documentation) ""Family [size [style] [style ...]]""; The return value is kFALSE if the object was syntactically invalid. Otherwise, fills the font attribute buffer with the values ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGFontPool.html:21605,release,released,21605,doc/master/classTGFontPool.html,https://root.cern,https://root.cern/doc/master/classTGFontPool.html,1,['release'],['released']
Deployability,"thm provided by your telephone service. You also have to learn the framework interfaces, which in this analogy is the same as learning how to use a telephone.; If you are interested in doing physics, a good HEP framework will save you much work. Next is a list of the more commonly used components of ROOT: Command Line Interpreter, Histograms and Fitting, Writing a Graphical User Interface, 2D Graphics, Input/Output , Collection Classes, Script Processor.; There are also less commonly used components, as: 3D Graphics, Parallel Processing (PROOF), Run Time Type Identification (RTTI), Socket and Network Communication, Threads.; 1.4.1.1 Advantages of Frameworks; The benefits of frameworks can be summarized as follows:. Less code to write - the programmer should be able to use and reuse the majority of the existing code. Basic functionality, such as fitting and histogramming are implemented and ready to use and customize.; More reliable and robust code - the code inherited from a framework has already been tested and integrated with the rest of the framework.; More consistent and modular code - the code reuse provides consistency and common capabilities between programs, no matter who writes them. Frameworks make it easier to break programs into smaller pieces.; More focus on areas of expertise - users can concentrate on their particular problem domain. They do not have to be experts at writing user interfaces, graphics, or networking to use the frameworks that provide those services. 1.4.2 Why Object-Oriented?; Object-Oriented Programming offers considerable benefits compared to Procedure-Oriented Programming:. Encapsulation enforces data abstraction and increases opportunity for reuse.; Sub classing and inheritance make it possible to extend and modify objects.; Class hierarchies and containment containment hierarchies provide a flexible mechanism for modeling real-world objects and the relationships among them.; Complexity is reduced because there is little growth of ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:13199,integrat,integrated,13199,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['integrat'],['integrated']
Deployability,"thmetic expression, this function has the approximate value; of the integral I. The integral is mapped onto [0,1] using a transformation then integral computation is surrogated to DoIntegral. double IntegralUp(double a); Returns Integral of function on an upper semi-infinite interval.; This function computes, to an attempted specified accuracy, the value of the integral:. Usage:; In any arithmetic expression, this function has the approximate value; of the integral I.; - A: lower end-point of integration interval. The integral is mapped onto [0,1] using a transformation then integral computation is surrogated to DoIntegral. double IntegralLow(double b); Returns Integral of function on a lower semi-infinite interval.; This function computes, to an attempted specified accuracy, the value of the integral:. Usage:; In any arithmetic expression, this function has the approximate value; of the integral I.; - B: upper end-point of integration interval. The integral is mapped onto [0,1] using a transformation then integral computation is surrogated to DoIntegral. void SetFunction(const ROOT::Math::IGenFunction& ); Set integration function (flag control if function must be copied inside).; \@param f Function to be used in the calculations. double Integral(const vector<double>& pts); This method is not implemented. . double IntegralCauchy(double a, double b, double c); This method is not implemented. . void SetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); set the options. double DoIntegral(double a, double b, const ROOT::Math::IGenFunction* func). Integration surrugate method. Return integral of passed function in interval [a,b]; Derived class (like GaussLegendreIntegrator) can re-implement this method to modify to use; an improved algorithm. » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:22; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__GaussIntegrator.html:6784,integrat,integration,6784,root/html602/ROOT__Math__GaussIntegrator.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__GaussIntegrator.html,1,['integrat'],['integration']
Deployability,"thmetic expression, this function has the approximate value; of the integral I. The integral is mapped onto [0,1] using a transformation then integral computation is surrogated to DoIntegral. double IntegralUp(double a); Returns Integral of function on an upper semi-infinite interval.; This function computes, to an attempted specified accuracy, the value of the integral:. Usage:; In any arithmetic expression, this function has the approximate value; of the integral I.; - A: lower end-point of integration interval. The integral is mapped onto [0,1] using a transformation then integral computation is surrogated to DoIntegral. double IntegralLow(double b); Returns Integral of function on a lower semi-infinite interval.; This function computes, to an attempted specified accuracy, the value of the integral:. Usage:; In any arithmetic expression, this function has the approximate value; of the integral I.; - B: upper end-point of integration interval. The integral is mapped onto [0,1] using a transformation then integral computation is surrogated to DoIntegral. void SetFunction(const ROOT::Math::IGenFunction& ); Set integration function (flag control if function must be copied inside).; \@param f Function to be used in the calculations. double Integral(const vector<double>& pts); This method is not implemented. . double IntegralCauchy(double a, double b, double c); This method is not implemented. . void SetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); set the options. double DoIntegral(double a, double b, const ROOT::Math::IGenFunction* func). Integration surrugate method. Return integral of passed function in interval [a,b]; Derived class (like GaussLegendreIntegrator) can re-implement this method to modify to use; an improved algorithm. » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 16:59; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Math__GaussIntegrator.html:6399,integrat,integration,6399,root/html534/ROOT__Math__GaussIntegrator.html,https://root.cern,https://root.cern/root/html534/ROOT__Math__GaussIntegrator.html,1,['integrat'],['integration']
Deployability,"thmetic expression, this function has the approximate value; of the integral I. The integral is mapped onto [0,1] using a transformation then integral computation is surrogated to DoIntegral. double IntegralUp(double a); Returns Integral of function on an upper semi-infinite interval.; This function computes, to an attempted specified accuracy, the value of the integral:. Usage:; In any arithmetic expression, this function has the approximate value; of the integral I.; - A: lower end-point of integration interval. The integral is mapped onto [0,1] using a transformation then integral computation is surrogated to DoIntegral. double IntegralLow(double b); Returns Integral of function on a lower semi-infinite interval.; This function computes, to an attempted specified accuracy, the value of the integral:. Usage:; In any arithmetic expression, this function has the approximate value; of the integral I.; - B: upper end-point of integration interval. The integral is mapped onto [0,1] using a transformation then integral computation is surrogated to DoIntegral. void SetFunction(const ROOT::Math::IGenFunction& ); Set integration function (flag control if function must be copied inside).; \@param f Function to be used in the calculations. double Integral(const vector<double>& pts); This method is not implemented. . double IntegralCauchy(double a, double b, double c); This method is not implemented. . void SetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); set the options. double DoIntegral(double a, double b, const ROOT::Math::IGenFunction* func). Integration surrugate method. Return integral of passed function in interval [a,b]; Derived class (like GaussLegendreIntegrator) can re-implement this method to modify to use; an improved algorithm. » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/ROOT__Math__GaussIntegrator.html:6784,integrat,integration,6784,root/html604/ROOT__Math__GaussIntegrator.html,https://root.cern,https://root.cern/root/html604/ROOT__Math__GaussIntegrator.html,1,['integrat'],['integration']
Deployability,"thod void TGedFrame::ActivateBaseClassEditors(TClass *cl). It is called during each compound editor rebuild and the default implementation simply offers all base-classes to the publishing mechanism.; To prevent inclusion of a base-class into the compound editor, call:; void TGedEditor::ExcludeClassEditor(TClass* class, Bool_t recurse); Pointer to the compound GED-editor is available in TGedFrame‘s data-member:; TGedEditor *fGedEditor; Ordering of base-class editor frames follows the order of the classes in the class hierarchy. This order can be changed by modifying the value of TGedFrame’s data member Int_t fPriority. The default value is 50; smaller values move the frame towards to the top. This priority should be set in the editor constructor.; 25.10 Drag and Drop; Drag and Drop support is introduced for Linux (via Xdnd - the drag and drop protocol for X window system) and for Windows (via Clipboard). Users can selects something in ROOT with a mouse press, drags it (moves the mouse while keeping the mouse button pressed) and releases the mouse button someplace else. When the button is released the selected data is “dropped” at that location. This way, a histogram from an opened ROOT file in the browser can be dragged to any TCanvas. A script file from the browser can be dropped to a TGTextView or TGTextEdit widget in TGTextEditor.; On Linux, it is possible to drag objects between ROOT and an external application. For example to drag a macro file from the ROOT browser to the Kate editor. On Windows, drag and drop works only within a single ROOT application (for the time being), but works also from Windows Explorer to TCanvas ot to TGTextEdit.; 25.10.1 Drag and Drop Data Class; The Drag and Drop Cata class TDNDdata is used to describe and handle the transferred data during an drag and drop operation. It consists of:; Atom_t fDataType: atom describing the data type.; Atom_t fAction: atom describing the action (copy, move, link); currently, only copy is used.; void *f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:1226877,release,releases,1226877,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['release'],['releases']
Deployability,"thrm{d}x'; 3717/// \f]; 3718///; 3719/// The actual integration calculation is only performed when the return object is evaluated. The name; 3720/// of the integral object is automatically constructed from the name of the input function, the variables; 3721/// it integrates and the range integrates over. The default strategy to calculate the running integrals is; 3722///; 3723/// - If the integrand (this object) supports analytical integration, construct an integral object; 3724/// that calculate the running integrals value by calculating the analytical integral each; 3725/// time the running integral object is evaluated; 3726///; 3727/// - If the integrand (this object) requires numeric integration to construct the running integral; 3728/// create an object of class RooNumRunningInt which first samples the entire function and integrates; 3729/// the sampled function numerically. This method has superior performance as there is no need to; 3730/// perform a full (numeric) integration for each evaluation of the running integral object, but; 3731/// only when one of its parameters has changed.; 3732///; 3733/// The choice of strategy can be changed with the ScanAll() argument, which forces the use of the; 3734/// scanning technique implemented in RooNumRunningInt for all use cases, and with the ScanNone(); 3735/// argument which forces the 'integrate each evaluation' technique for all use cases. The sampling; 3736/// granularity for the scanning technique can be controlled with the ScanParameters technique; 3737/// which allows to specify the number of samples to be taken, and to which order the resulting; 3738/// running integral should be interpolated. The default values are 1000 samples and 2nd order; 3739/// interpolation.; 3740///; 3741/// The following named arguments are accepted; 3742/// | | Effect on integral creation; 3743/// |-|-------------------------------; 3744/// | `SupNormSet(const RooArgSet&)` | Observables over which should be normalized _in additio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsReal_8cxx_source.html:159585,integrat,integration,159585,doc/master/RooAbsReal_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html,1,['integrat'],['integration']
Deployability,"ti); Remove top-level element from list-tree with specified tree-item. TGListTreeItem* AddEvent(TEveEventManager* event); Add a new event and make it the current event.; It is added into the event-scene and as a top-level list-tree; item. void AddElement(TEveElement* element, TEveElement* parent = 0); Add an element. If parent is not specified it is added into; current event (which is created if does not exist). void AddGlobalElement(TEveElement* element, TEveElement* parent = 0); Add a global element, i.e. one that does not change on each; event, like geometry or projection manager.; If parent is not specified it is added to a global scene. void RemoveElement(TEveElement* element, TEveElement* parent); Remove element from parent. void PreDeleteElement(TEveElement* element); Called from TEveElement prior to its destruction so the; framework components (like object editor) can unreference it. void ElementSelect(TEveElement* element); Select an element.; Now it only calls EditElement() - should also update selection state. Bool_t ElementPaste(TEveElement* element); Paste has been called. Bool_t InsertVizDBEntry(const TString& tag, TEveElement* model, Bool_t replace, Bool_t update); Insert a new visualization-parameter database entry. Returns; true if the element is inserted successfully.; If entry with the same key already exists the behaviour depends on the; 'replace' flag:; true - The old model is deleted and new one is inserted (default).; Clients of the old model are transferred to the new one and; if 'update' flag is true (default), the new model's parameters; are assigned to all clients.; false - The old model is kept, false is returned. If insert is successful, the ownership of the model-element is; transferred to the manager. Bool_t InsertVizDBEntry(const TString& tag, TEveElement* model); Insert a new visualization-parameter database entry with the default; parameters for replace and update, as specified by members; fVizDBReplace(default=kTRUE) and fVizDBUpdat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveManager.html:7855,update,update,7855,root/html528/TEveManager.html,https://root.cern,https://root.cern/root/html528/TEveManager.html,6,['update'],['update']
Deployability,ti-line collection printing to given amount. ;  . Protected Attributes; RooTemplateProxy< RooAbsReal > _n;  Number of expected events. ;  ; RooTemplateProxy< RooAbsPdf > _pdf;  Input p.d.f. ;  ; const TNamed * _rangeName = nullptr;  Name of subset range. ;  ;  Protected Attributes inherited from RooAbsPdf; Int_t _errorCount = 0;  Number of errors remaining to print. ;  ; Int_t _negCount = 0;  Number of negative probabilities remaining to print. ;  ; RooAbsReal * _norm = nullptr;  ; RooObjCacheManager _normMgr;  ; TString _normRange;  Normalization range. ;  ; RooArgSet const * _normSet = nullptr;  Normalization integral (owned by _normMgr) ;  ; double _rawValue = 0;  ; bool _selectComp = false;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; std::unique_ptr< RooNumGenConfig > _specGeneratorConfig;  ! MC generator configuration specific for this object ;  ; Int_t _traceCount = 0;  Number of traces remaining to print. ;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; Int_t _plotBins = 100;  Number of plot bins. ;  ; double _plotMax = 0.0;  Maximum of plot range. ;  ; double _plotMin = 0.0;  Minimum of plot range. ;  ; bool _selectComp = true;  A buffer for reading values from trees. ;  ; std::unique_ptr< RooNumIntConfig > _specIntegratorConfig;  ; TreeReadBuffer * _treeReadBuffer = nullptr;  ; TString _unit;  Unit for objects value. ;  ; double _value = 0.0;  Cache for current value of object. ;  ;  Protected Attributes inherited from RooAbsArg; std::set< std::string > _boolAttrib;  ; std::set< std::string > _boolAttribTransient;  ; std::vector< RooAbsCache * > _cacheList;  ; RefCountList_t _clientList;  ; RefCountList_t _clientListShape;  ; RefCountList_t _clientListValue;  ; std::,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooExtendPdf.html:60702,integrat,integration,60702,doc/master/classRooExtendPdf.html,https://root.cern,https://root.cern/doc/master/classRooExtendPdf.html,1,['integrat'],['integration']
Deployability,"tiDim*fIntegratorpointer to multi-dimensional integrator base class. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; IntegratorMultiDim(ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kADAPTIVE, double absTol = 1.E-9, double relTol = 1E-6, unsigned int ncall = 100000); Generic constructor of multi dimensional Integrator. By default uses the Adaptive integration method. @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. IntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kADAPTIVE, double absTol = 1.E-9, double relTol = 1E-6, unsigned int ncall = 100000); Generic Constructor of multi dimensional Integrator passing a function. By default uses the adaptive integration method. @param f integration function (multi-dim interface); @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param ncall number of function calls (apply only to MC integratioon methods). SetFunction(const ROOT::Math::IMultiGenFunction& f). IntegratorMultiDim(const Function & f, unsigned int dim, IntegrationMultiDim::Type type = IntegrationMultiDim::kADAPTIVE, double absTol = 1.E-9, double relTol = 1E-6, unsigned int ncall = 100000); Template Constructor of multi dimensional Integrator passing a generic function. By default uses the adaptive integration method. @param f integration function (generic function implementin operator()(const double *); @param dim function dimension; @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param ncall number of function calls (apply only to MC integratioon methods). virtual ~IntegratorMultiDim(); destructor. IntegratorMultiDim & operator",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__IntegratorMultiDim.html:2926,integrat,integration,2926,root/html526/ROOT__Math__IntegratorMultiDim.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__IntegratorMultiDim.html,2,['integrat'],['integration']
Deployability,tiDim. More...;  ; class  IBaseFunctionOneDim;  Interface (abstract class) for generic functions objects of one-dimension Provides a method to evaluate the function given a value (simple double) by implementing operator() (const double ). More...;  ; class  IBaseParam;  Documentation for the abstract class IBaseParam. More...;  ; class  IGradientFunctionMultiDimTempl;  Interface (abstract class) for multi-dimensional functions providing a gradient calculation. More...;  ; class  IGradientFunctionOneDim;  Interface (abstract class) for one-dimensional functions providing a gradient calculation. More...;  ; class  IGradientMultiDimTempl;  ; class  IMinimizer1D;  Interface class for numerical methods for one-dimensional minimization. More...;  ; class  IntegrandTransform;  Auxiliary inner class for mapping infinite and semi-infinite integrals. More...;  ; class  IntegratorMultiDim;  User class for performing multidimensional integration. More...;  ; class  IntegratorMultiDimOptions;  Numerical multi dimensional integration options. More...;  ; class  IntegratorOneDim;  User Class for performing numerical integration of a function in one dimension. More...;  ; class  IntegratorOneDimOptions;  Numerical one dimensional integration options. More...;  ; class  Interpolator;  Class for performing function interpolation of points. More...;  ; class  Inverter;  Matrix Inverter class Class to specialize calls to Dinv. More...;  ; class  Inverter< 0 >;  Inverter<0>. More...;  ; class  Inverter< 1 >;  1x1 matrix inversion \(a_{11} \to 1/a_{11}\) More...;  ; class  Inverter< 2 >;  2x2 matrix inversion using Cramers rule. More...;  ; class  IOptions;  Generic interface for defining configuration options of a numerical algorithm. More...;  ; class  IParametricFunctionMultiDimTempl;  IParamFunction interface (abstract class) describing multi-dimensional parametric functions It is a derived class from ROOT::Math::IBaseFunctionMultiDim and ROOT::Math::IBaseParam. More...;  ; class  IP,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1Math.html:17307,integrat,integration,17307,doc/master/namespaceROOT_1_1Math.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html,2,['integrat'],['integration']
Deployability,"tic . ReturnsName of the file containing the class declaration ; Definition at line 79 of file TLine.h. ◆ DistancetoPrimitive(). Int_t TLine::DistancetoPrimitive ; (; Int_t ; px, . Int_t ; py . ). overridevirtual . Compute distance from point px,py to a line. ; Reimplemented from TObject.; Definition at line 89 of file TLine.cxx. ◆ DrawLine(). TLine * TLine::DrawLine ; (; Double_t ; x1, . Double_t ; y1, . Double_t ; x2, . Double_t ; y2 . ). virtual . Draw this line with new coordinates. ; Definition at line 103 of file TLine.cxx. ◆ DrawLineNDC(). TLine * TLine::DrawLineNDC ; (; Double_t ; x1, . Double_t ; y1, . Double_t ; x2, . Double_t ; y2 . ). virtual . Draw this line with new coordinates in NDC. ; Definition at line 115 of file TLine.cxx. ◆ ExecuteEvent(). void TLine::ExecuteEvent ; (; Int_t ; event, . Int_t ; px, . Int_t ; py . ). overridevirtual . Execute action corresponding to one event. ; This member function is called when a line is clicked with the locator; If Left button clicked on one of the line end points, this point follows the cursor until button is released.; if Middle button clicked, the line is moved parallel to itself until the button is released. ; Reimplemented from TObject.; Definition at line 132 of file TLine.cxx. ◆ GetBBox(). Rectangle_t TLine::GetBBox ; (; ). overridevirtual . Return the bounding Box of the Line. ; Implements TAttBBox2D.; Definition at line 544 of file TLine.cxx. ◆ GetBBoxCenter(). TPoint TLine::GetBBoxCenter ; (; ). overridevirtual . Return the center of the BoundingBox as TPoint in pixels. ; Implements TAttBBox2D.; Definition at line 569 of file TLine.cxx. ◆ GetX1(). Double_t TLine::GetX1 ; (; ); const. inline . Definition at line 50 of file TLine.h. ◆ GetX2(). Double_t TLine::GetX2 ; (; ); const. inline . Definition at line 51 of file TLine.h. ◆ GetY1(). Double_t TLine::GetY1 ; (; ); const. inline . Definition at line 52 of file TLine.h. ◆ GetY2(). Double_t TLine::GetY2 ; (; ); const. inline . Definition at line 53 of ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTLine.html:17894,release,released,17894,doc/master/classTLine.html,https://root.cern,https://root.cern/doc/master/classTLine.html,1,['release'],['released']
Deployability,"tic Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  . Protected Member Functions; Double_t ** Allocate (Int_t size) override;  Allocate internal data structures for size points. ;  ; void CalcYErrorsSum () const;  Recalculates the summed y error arrays. ;  ; void CopyAndRelease (Double_t **newarrays, Int_t ibegin, Int_t iend, Int_t obegin) override;  Copy and release. ;  ; Bool_t CopyPoints (Double_t **arrays, Int_t ibegin, Int_t iend, Int_t obegin) override;  Copy errors from fE*** to arrays[***] or to f*** Copy points. ;  ; Bool_t CtorAllocate ();  Should be called from ctors after fNpoints has been set Note: This function should be called only from the constructor since it does not delete previously existing arrays. ;  ; Bool_t DoMerge (const TGraph *tg) override;  Protected function to perform the merge operation of a graph with multiple asymmetric errors. ;  ; void FillZero (Int_t begin, Int_t end, Bool_t from_ctor=kTRUE) override;  Set zero values for point arrays in the range [begin, end]. ;  ; void SwapPoints (Int_t pos1, Int_t pos2) override;  Swap points. ;  ; void UpdateArrays (const std::vector< Int_t > &sorting_indices, Int_t numSortedPoints, Int_t low) override;  Update the fX, fY, fExL, fExH, fEyL and fEyH arrays with the sorted values. ;  ;  Protected Member Functions inherit",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphMultiErrors.html:40120,release,release,40120,doc/master/classTGraphMultiErrors.html,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html,1,['release'],['release']
Deployability,"tic TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Types; enum  EBits { kBitIsScopedEnum = (1ULL << ( 14 )); };  . Private Attributes; TClass * fClass = nullptr;  Interpreter information, owned by TEnum. ;  ; THashList fConstantList;  ; ClassInfo_t * fInfo = nullptr;  ; std::string fQualName;  Owning class. ;  ; EDataType fUnderlyingType = kInt_t;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TDictionary; Bool_t UpdateInterpreterStateMarker ();  the Cling ID of the transaction that last updated the object ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TEnum.h>. Inheritance diagram for TEnum:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ EBits. enum TEnum::EBits. private . EnumeratorkBitIsScopedEnum The enum is an enum class. . Definition at line 42 of file TEnum.h. ◆ ESearchAction. enum TEnum::ESearchAction. EnumeratorkNone ; kAutoload ; kInterpLookup ; kALoadAndInterpLookup . Definition at line 48 of file TEnum.h. Constructor & Destructor Documentation. ◆ TEnum() [1/3]. TEnum::TEnum ; (; ). inline . Definition at line 54 of file TEnum.h. ◆ TEnum() [2/3]. TEnum::TEnum ; (; const char * ; name, . DeclI",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTEnum.html:14274,update,updated,14274,doc/v632/classTEnum.html,https://root.cern,https://root.cern/doc/v632/classTEnum.html,2,['update'],['updated']
Deployability,"tic TDictionary::ESTLTypekList; static TDictionary::ESTLTypekMap; static TDictionary::ESTLTypekMultimap; static TDictionary::ESTLTypekMultiset; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TDictionary::ESTLTypekNone; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TDictionary::ESTLTypekSet; static TObject::(anonymous)TObject::kSingleKey; static TDictionary::ESTLTypekUnorderedMap; static TDictionary::ESTLTypekUnorderedMultimap; static TDictionary::ESTLTypekUnorderedMultiset; static TDictionary::ESTLTypekUnorderedSet; static TDictionary::ESTLTypekVector; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. TDictAttributeMap*fAttributeMappointer to a class attribute map; ULong64_tfUpdatingTransactionCount!the Cling ID of the transaction that last updated the object. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TDictionary(const TDictionary& dict); Copy constructor, cloning fAttributeMap. ~TDictionary(); Destruct a TDictionary, delete the attribute map. TDictionary & operator=(const TDictionary& other); Assignment op, cloning fAttributeMap. void CreateAttributeMap(); Create a TDictAttributeMap for a TClass to be able to add attribute pairs; key-value to the TClass. TDictionary* GetDictionary(const char* name); Retrieve the type (class, fundamental type, typedef etc); named ""name"". Returned object is either a TClass or TDataType.; Returns 0 if the type is unknown. TDictionary* GetDictionary(const type_info& typeinfo); Retrieve the type (class, fundamental type, typedef etc); with typeid typeinfo. Returned object is either a TClass or TDataType.; Returns 0 if the type is unknown. Bool_t UpdateInterpreterStateMarker(); Return",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TDictionary.html:7602,update,updated,7602,root/html604/TDictionary.html,https://root.cern,https://root.cern/root/html604/TDictionary.html,1,['update'],['updated']
Deployability,"tic TEveElement::ECompoundSelectionColorBitsTEveElement::kCSCBApplyMainTransparencyToAllChildren; static TEveElement::ECompoundSelectionColorBitsTEveElement::kCSCBApplyMainTransparencyToMatchingChildren; static TEveElement::ECompoundSelectionColorBitsTEveElement::kCSCBImplySelectAllChildren; static TEveElement::ECompoundSelectionColorBitsTEveElement::kCSCBTakeAnyParentAsMaster; static TEveElement::EDestructTEveElement::kNone; static TEveElement::EDestructTEveElement::kStandard. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TEveScene(const char* n = ""TEveScene"", const char* t = """"); Constructor. TEveScene(TGLScenePad* gl_scene, const char* n = ""TEveScene"", const char* t = """"); Constructor. ~TEveScene(); Destructor. void CollectSceneParents(TEveElement::List_t& scenes); Virtual from TEveElement; here we simply append this scene to; the list. void Repaint(Bool_t dropLogicals = kFALSE); Repaint the scene. void RetransHierarchically(); Entry point for hierarchical transformation update.; Calls the recursive variant on all children. void RetransHierarchicallyRecurse(TEveElement* el, const TEveTrans& tp); Set transformation matrix for physical shape of element el in; the GL-scene and recursively descend into children (if enabled). void SetName(const char* n); Set scene's name. void Paint(Option_t* option = """"); Paint the scene. Iterate over children and calls PadPaint(). void DestroyElementRenderers(TEveElement* element); Remove element from the scene.; It is not an error if the element is not found in the scene. void DestroyElementRenderers(TObject* rnrObj); Remove element represented by object rnrObj from the scene.; It is not an error if the element is not found in the scene. const TGPicture* GetListTreeIcon(Bool_t open = kFALSE); Return icon for scene. TEveScene(const TEveScene& ). TEveScene& operator=(const TEveScene& ). Bool_t SingleRnrState() const; { return kTRUE; }. void Changed(); { fChanged = kTRUE; }. Bool_t IsChange",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEveScene.html:21782,update,update,21782,root/html602/TEveScene.html,https://root.cern,https://root.cern/root/html602/TEveScene.html,2,['update'],['update']
Deployability,"tic const char * RooBreitWigner::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 51 of file RooBreitWigner.h. ◆ doEval(). void RooBreitWigner::doEval ; (; RooFit::EvalContext & ; ctx); const. overrideprotectedvirtual . Compute multiple values of BreitWigner distribution. ; Reimplemented from RooAbsReal.; Definition at line 64 of file RooBreitWigner.cxx. ◆ evaluate(). double RooBreitWigner::evaluate ; (; ); const. overrideprotectedvirtual . Evaluate this PDF / function / constant. Needs to be overridden by all derived classes. ; Implements RooAbsReal.; Definition at line 56 of file RooBreitWigner.cxx. ◆ getAnalyticalIntegral(). Int_t RooBreitWigner::getAnalyticalIntegral ; (; RooArgSet & ; allVars, . RooArgSet & ; analVars, . const char * ; rangeName = nullptr . ); const. overridevirtual . Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ; 'integSet' is the set of dependents for which integration is requested. The function should copy the subset of dependents it can analytically integrate to anaIntSet and return a unique identification code for this integration configuration. If no integration can be performed, zero should be returned. ; Reimplemented from RooAbsReal.; Definition at line 71 of file RooBreitWigner.cxx. ◆ IsA(). TClass * RooBreitWigner::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooAbsPdf.; Definition at line 51 of file RooBreitWigner.h. ◆ Streamer(). void RooBreitWigner::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsPdf. ◆ StreamerNVirtual(). void RooBreitWigner::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 51 of file RooBreitWigner.h. Member Data Documentation. ◆ mean. RooRealProxy RooBreitWigner::mean. protected . Definition at line 39 of file RooBreitWigner.h. ◆ w",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBreitWigner.html:76220,integrat,integration,76220,doc/master/classRooBreitWigner.html,https://root.cern,https://root.cern/doc/master/classRooBreitWigner.html,1,['integrat'],['integration']
Deployability,"tic const char * RooExponential::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 55 of file RooExponential.h. ◆ doEval(). void RooExponential::doEval ; (; RooFit::EvalContext & ; ctx); const. overrideprotectedvirtual . Compute multiple values of Exponential distribution. ; Reimplemented from RooAbsReal.; Definition at line 71 of file RooExponential.cxx. ◆ evaluate(). double RooExponential::evaluate ; (; ); const. overrideprotectedvirtual . Evaluate this PDF / function / constant. Needs to be overridden by all derived classes. ; Implements RooAbsReal.; Definition at line 60 of file RooExponential.cxx. ◆ getAnalyticalIntegral(). Int_t RooExponential::getAnalyticalIntegral ; (; RooArgSet & ; allVars, . RooArgSet & ; analVars, . const char * ; rangeName = nullptr . ); const. overridevirtual . Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ; 'integSet' is the set of dependents for which integration is requested. The function should copy the subset of dependents it can analytically integrate to anaIntSet and return a unique identification code for this integration configuration. If no integration can be performed, zero should be returned. ; Reimplemented from RooAbsReal.; Definition at line 77 of file RooExponential.cxx. ◆ IsA(). TClass * RooExponential::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooAbsPdf.; Definition at line 55 of file RooExponential.h. ◆ negateCoefficient(). bool RooExponential::negateCoefficient ; (; ); const. inline . Definition at line 39 of file RooExponential.h. ◆ Streamer(). void RooExponential::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsPdf. ◆ StreamerNVirtual(). void RooExponential::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 55 of file RooExponential.h.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooExponential.html:77348,integrat,integration,77348,doc/master/classRooExponential.html,https://root.cern,https://root.cern/doc/master/classRooExponential.html,1,['integrat'],['integration']
Deployability,"tic constexpr std::uint16_t kVersionMinor = 0;; 82 static constexpr std::uint16_t kVersionPatch = 0;; 83 ; 84private:; 85 /// Version of the RNTuple binary format that the writer supports (see specification).; 86 /// Changing the epoch indicates backward-incompatible changes; 87 std::uint16_t fVersionEpoch = kVersionEpoch;; 88 /// Changing the major version indicates forward incompatible changes; such changes should correspond to a new; 89 /// bit in the feature flag of the RNTuple header.; 90 /// For the pre-release epoch 0, indicates the release candidate number; 91 std::uint16_t fVersionMajor = kVersionMajor;; 92 /// Changing the minor version indicates new optional fields added to the RNTuple meta-data; 93 std::uint16_t fVersionMinor = kVersionMinor;; 94 /// Changing the patch version indicates new backported features from newer binary format versions; 95 std::uint16_t fVersionPatch = kVersionPatch;; 96 /// The file offset of the header excluding the TKey part; 97 std::uint64_t fSeekHeader = 0;; 98 /// The size of the compressed ntuple header; 99 std::uint64_t fNBytesHeader = 0;; 100 /// The size of the uncompressed ntuple header; 101 std::uint64_t fLenHeader = 0;; 102 /// The file offset of the footer excluding the TKey part; 103 std::uint64_t fSeekFooter = 0;; 104 /// The size of the compressed ntuple footer; 105 std::uint64_t fNBytesFooter = 0;; 106 /// The size of the uncompressed ntuple footer; 107 std::uint64_t fLenFooter = 0;; 108 /// The maximum size for a TKey payload. Payloads bigger than this size will be written as multiple blobs.; 109 std::uint64_t fMaxKeySize = 0;; 110 ; 111 TFile *fFile = nullptr; ///<! The file from which the ntuple was streamed, registered in the custom streamer; 112 ; 113public:; 114 RNTuple() = default;; 115 ~RNTuple() = default;; 116 ; 117 std::uint16_t GetVersionEpoch() const { return fVersionEpoch; }; 118 std::uint16_t GetVersionMajor() const { return fVersionMajor; }; 119 std::uint16_t GetVersionMinor() const { return fVer",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RNTuple_8hxx_source.html:3884,release,release,3884,doc/master/RNTuple_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RNTuple_8hxx_source.html,3,"['patch', 'release']","['patch', 'release']"
Deployability,"tic that returns maximum likelihood estimate of a specified parameter. More...;  ; class  MCMCCalculator;  Bayesian Calculator estimating an interval or a credible region using the Markov-Chain Monte Carlo method to integrate the likelihood function with the prior to obtain the posterior function. More...;  ; class  MCMCInterval;  MCMCInterval is a concrete implementation of the RooStats::ConfInterval interface. More...;  ; class  MCMCIntervalPlot;  This class provides simple and straightforward utilities to plot a MCMCInterval object. More...;  ; class  MetropolisHastings;  This class uses the Metropolis-Hastings algorithm to construct a Markov Chain of data points using Monte Carlo. More...;  ; class  MinNLLTestStat;  MinNLLTestStat is an implementation of the TestStatistic interface that calculates the minimum value of the negative log likelihood function and returns it as a test statistic. More...;  ; class  ModelConfig;  ModelConfig is a simple class that holds configuration information specifying how a model should be used in the context of various RooStats tools. More...;  ; class  NeymanConstruction;  NeymanConstruction is a concrete implementation of the NeymanConstruction interface that, as the name suggests, performs a NeymanConstruction. More...;  ; class  NuisanceParametersSampler;  Helper class for ToyMCSampler. More...;  ; class  NumberCountingPdfFactory;  A factory for building PDFs and data for a number counting combination. More...;  ; class  NumEventsTestStat;  NumEventsTestStat is a simple implementation of the TestStatistic interface used for simple number counting. More...;  ; class  PdfProposal;  PdfProposal is a concrete implementation of the ProposalFunction interface. More...;  ; class  PointSetInterval;  PointSetInterval is a concrete implementation of the ConfInterval interface. More...;  ; class  PosteriorCdfFunction;  ; class  PosteriorFunction;  ; class  PosteriorFunctionFromToyMC;  Posterior function obtaining sampling toy MC for the ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceRooStats.html:4970,configurat,configuration,4970,doc/master/namespaceRooStats.html,https://root.cern,https://root.cern/doc/master/namespaceRooStats.html,1,['configurat'],['configuration']
Deployability,"tic void PrintValueAux (char *ladd, Int_t atype, TStreamerElement *aElement, Int_t aleng, Int_t *count);  print value of element in object at pointer, type atype, leng aleng or *count The function may be called in two ways: -method1 len < 0 i is assumed to be the TStreamerElement number i in StreamerInfo -method2 len >= 0 i is the type address of variable is directly pointer. ;  . Private Attributes; UInt_t fCheckSum;  Checksum of original class. ;  ; TClass * fClass;  !pointer to class ;  ; Int_t fClassVersion;  Class version identifier. ;  ; TCompInfo * fComp;  ![fNslots with less than fElements->GetEntries()*1.5 used] Compiled info ;  ; TCompInfo ** fCompFull;  ![fElements->GetEntries()] ;  ; TCompInfo ** fCompOpt;  ![fNdata] ;  ; TObjArray * fElements;  Array of TStreamerElements. ;  ; Int_t fNdata;  !number of optimized elements ;  ; Int_t fNfulldata;  !number of elements ;  ; Int_t fNslots;  !total number of slots in fComp. ;  ; Int_t fNumber;  !Unique identifier ;  ; Int_t fNVirtualInfoLoc;  ! Number of virtual info location to update. ;  ; Version_t fOldVersion;  ! Version of the TStreamerInfo object read from the file ;  ; Int_t fOnFileClassVersion;  !Class version identifier as stored on file. ;  ; TStreamerInfoActions::TActionSequence * fReadMemberWise;  ! List of read action resulting from the compilation for use in member wise streaming. ;  ; TStreamerInfoActions::TActionSequence * fReadMemberWiseVecPtr;  ! List of read action resulting from the compilation for use in member wise streaming. ;  ; TStreamerInfoActions::TActionSequence * fReadObjectWise;  ! List of read action resulting from the compilation. ;  ; TStreamerInfoActions::TActionSequence * fReadText;  ! List of text read action resulting from the compilation, used for JSON. ;  ; Int_t fSize;  !size of the persistent class ;  ; ULong_t * fVirtualInfoLoc;  ![fNVirtualInfoLoc] Location of the pointer to the TStreamerInfo inside the object (when emulated) ;  ; TStreamerInfoActions::TActionSequence ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTStreamerInfo.html:28704,update,update,28704,doc/master/classTStreamerInfo.html,https://root.cern,https://root.cern/doc/master/classTStreamerInfo.html,1,['update'],['update']
Deployability,"tice shown when reading a sealed likelihood; Bool_tRooAbsOptTestStatistic::_sealedIs test statistic sealed -- i.e. no access to data; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Int_tRooAbsTestStatistic::_setNumPartition number of this instance in parallel calculation mode; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; Int_tRooAbsTestStatistic::_simCountTotal number of component p.d.f.s in RooSimultaneous (if any); RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; Bool_tRooAbsTestStatistic::_splitRangeSplit rangeName in RooSimultaneous index labels if true; map<string,string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; Bool_tRooAbsTestStatistic::_verboseVerbose messaging if true; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; RooRealVar*_yvarY variable if so designated; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooXYChi2Var(); coverity[UNINIT_CTOR]. RooXYChi2Var(const char* name, const char* title, RooAbsReal& func, RooDataSet& data, Bool_t integrate = kFALSE). RooXYChi2Var constructor with function and X-Y values dataset. An X-Y dataset is a weighted dataset with one or more observables X where the weight is interpreted; as the Y value and the weight error is interpreted as the Y value error. The weight must have an; non-zero error defined at each p",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooXYChi2Var.html:43320,integrat,integrator,43320,root/html602/RooXYChi2Var.html,https://root.cern,https://root.cern/root/html602/RooXYChi2Var.html,4,"['configurat', 'integrat']","['configuration', 'integrator']"
Deployability,"tidimensional integration.Definition IntegratorMultiDim.h:47; ROOT::Math::IntegratorMultiDim::Integraldouble Integral(const double *xmin, const double *xmax)evaluate the integral with the previously given function between xmin[] and xmax[]Definition IntegratorMultiDim.h:122; ROOT::Math::IntegratorMultiDim::Statusint Status() constreturn the Error Status of the last Integral calculationDefinition IntegratorMultiDim.h:162; ROOT::Math::IntegratorMultiDim::Errordouble Error() constreturn integration errorDefinition IntegratorMultiDim.h:159; ROOT::Math::IntegratorOneDimOptions::DefaultAbsTolerancestatic double DefaultAbsTolerance()Definition IntegratorOptions.cxx:265; ROOT::Math::IntegratorOneDimOptions::DefaultRelTolerancestatic double DefaultRelTolerance()Definition IntegratorOptions.cxx:266; ROOT::Math::IntegratorOneDimOptions::DefaultIntegratorTypestatic IntegrationOneDim::Type DefaultIntegratorType()Definition IntegratorOptions.cxx:240; ROOT::Math::IntegratorOneDimUser Class for performing numerical integration of a function in one dimension.Definition Integrator.h:98; ROOT::Math::IntegratorOneDim::GetNamestatic std::string GetName(IntegrationOneDim::Type)static function to get a string from the enumerationDefinition Integrator.cxx:66; ROOT::Math::IntegratorOneDim::Statusint Status() constreturn the Error Status of the last Integral calculationDefinition Integrator.h:421; ROOT::Math::IntegratorOneDim::IntegralUpdouble IntegralUp(const IGenFunction &f, double a)evaluate the Integral of a function f over the semi-infinite interval (a,+inf)Definition Integrator.h:278; ROOT::Math::IntegratorOneDim::Integraldouble Integral(Function &f, double a, double b)evaluate the Integral of a function f over the defined interval (a,b)Definition Integrator.h:499; ROOT::Math::IntegratorOneDim::Errordouble Error() constreturn the estimate of the absolute Error of the last Integral calculationDefinition Integrator.h:416; ROOT::Math::IntegratorOneDim::IntegralLowdouble IntegralLow(const ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TF1_8cxx_source.html:160947,integrat,integration,160947,doc/master/TF1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TF1_8cxx_source.html,1,['integrat'],['integration']
Deployability,"tifier <none>; [#3] DEBUG:Integration -- landau: Adding observable x as shape dependent; [#3] DEBUG:Integration -- landau: Adding parameter 0 as value dependent; [#3] DEBUG:Integration -- landau: Adding parameter 0.1 as value dependent; [#3] INFO:Integration -- landau: Observable x is suitable for analytical integration (if supported by p.d.f); [#3] INFO:Integration -- landau: Observables (x) are numerically integrated; [#1] INFO:NumericIntegration -- RooRealIntegral::init(landau_Int[x]) using numeric integrator RooAdaptiveGaussKronrodIntegrator1D to calculate Int(x); [#3] INFO:Integration -- RooRealIntegral::ctor(landau_Int[x]) Constructing integral of function landau over observables(x) with normalization () with range identifier <none>; [#3] DEBUG:Integration -- landau: Adding observable x as shape dependent; [#3] DEBUG:Integration -- landau: Adding parameter 0 as value dependent; [#3] DEBUG:Integration -- landau: Adding parameter 0.1 as value dependent; [#3] INFO:Integration -- landau: Observable x is suitable for analytical integration (if supported by p.d.f); [#3] INFO:Integration -- landau: Observables (x) are numerically integrated; [#1] INFO:NumericIntegration -- RooRealIntegral::init(landau_Int[x]) using numeric integrator RooAdaptiveGaussKronrodIntegrator1D to calculate Int(x); --- RooAbsArg ---; Value State: clean; Shape State: clean; Attributes: [SnapShot_ExtRefClone] ; Address: 0x871ca20; Clients: ; Servers: ; Proxies: ; --- RooAbsCategory ---; Value = 1 ""15Points); Possible states:; [1] int_dx landau(x) = 0.09896533620544187; [2] int_dx landau(x) = 0.09895710292189497; [3] int_dx landau(x) = 0.09895710292189497; 15Points 1; 21Points 2; 31Points 3; 41Points 4; 51Points 5; 61Points 6; WynnEpsilon 0; DateFebruary 2018 ; AuthorsClemens Lange, Wouter Verkerke (C++ version) ; Definition in file rf901_numintconfig.py. tutorialsroofitrf901_numintconfig.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf901__numintconfig_8py.html:8340,integrat,integration,8340,doc/master/rf901__numintconfig_8py.html,https://root.cern,https://root.cern/doc/master/rf901__numintconfig_8py.html,3,['integrat'],"['integrated', 'integration', 'integrator']"
Deployability,"tiline ; (; std::ostream & ; os, . Int_t ; contents, . bool ; verbose = false, . TString ; indent = """" . ); const. overridevirtual . Print the state of this object to the specified output stream. ; Reimplemented from RooAbsReal.; Definition at line 1137 of file RooRealIntegral.cxx. ◆ redirectServersHook(). bool RooRealIntegral::redirectServersHook ; (; const RooAbsCollection & ; newServerList, . bool ; mustReplaceAll, . bool ; nameChange, . bool ; isRecursive . ). overrideprotectedvirtual . Intercept server redirects and reconfigure internal object accordingly. ; Reimplemented from RooAbsReal.; Definition at line 978 of file RooRealIntegral.cxx. ◆ setAllowComponentSelection(). void RooRealIntegral::setAllowComponentSelection ; (; bool ; allow). Set component selection to be allowed/forbidden. ; Definition at line 1031 of file RooRealIntegral.cxx. ◆ setCacheAllNumeric(). void RooRealIntegral::setCacheAllNumeric ; (; Int_t ; ndim). static . Global switch to cache all integral values that integrate at least ndim dimensions numerically. ; Definition at line 1165 of file RooRealIntegral.cxx. ◆ setCacheNumeric(). void RooRealIntegral::setCacheNumeric ; (; bool ; flag). inline . Definition at line 55 of file RooRealIntegral.h. ◆ Streamer(). void RooRealIntegral::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsReal. ◆ StreamerNVirtual(). void RooRealIntegral::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 150 of file RooRealIntegral.h. ◆ sum(). double RooRealIntegral::sum ; (; ); const. protectedvirtual . Perform summation of list of category dependents to be integrated. ; Definition at line 939 of file RooRealIntegral.cxx. ◆ translate(). void RooRealIntegral::translate ; (; RooFit::Detail::CodeSquashContext & ; ctx); const. overridevirtual . This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooRealIntegral.html:73863,integrat,integrate,73863,doc/master/classRooRealIntegral.html,https://root.cern,https://root.cern/doc/master/classRooRealIntegral.html,1,['integrat'],['integrate']
Deployability,"ting -- RooAddition::defaultErrorLevel(nll_model_Int[mean]_Norm[mean,x]_genData) Summation contains a RooNLLVar, using its error level; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const optimization; [#0] WARNING:Minimization -- RooAbsMinimizerFcn::synchronize: WARNING: no initial error estimate available for a: using 0.5; [#0] WARNING:Minimization -- RooAbsMinimizerFcn::synchronize: WARNING: no initial error estimate available for mean: using 0.6; [#0] WARNING:Minimization -- RooAbsMinimizerFcn::synchronize: WARNING: no initial error estimate available for sigma: using 0.2; sigma=0.5, [#0] WARNING:Eval -- The FFT convolution 'model' will run with 50 bins. A decent accuracy for difficult convolutions is typically only reached with n >= 1000. Suggest to increase the number of bins of the observable 'mean'.; [#1] INFO:NumericIntegration -- RooRealIntegral::init(model_mean_Int[mean]) using numeric integrator RooIntegrator1D to calculate Int(mean); [#0] WARNING:Integration -- RooRombergIntegrator::integral: integral of model_mean over range (-6,6) did not converge after 20 steps; [1] h = 1 , s = 0; [2] h = 0.25 , s = 6; [3] h = 0.0625 , s = 3; [4] h = 0.015625 , s = 4.5; [5] h = 0.00390625 , s = 3.75; [6] h = 0.000976562 , s = 4.125; [7] h = 0.000244141 , s = 3.9375; [8] h = 6.10352e-05 , s = 4.03125; [9] h = 1.52588e-05 , s = 3.98438; [10] h = 3.8147e-06 , s = 4.00781; [11] h = 9.53674e-07 , s = 3.99609; [12] h = 2.38419e-07 , s = 4.00195; [13] h = 5.96046e-08 , s = 3.99902; [14] h = 1.49012e-08 , s = 4.00049; [15] h = 3.72529e-09 , s = 3.99976; [16] h = 9.31323e-10 , s = 4.00012; [17] h = 2.32831e-10 , s = 3.99994; [18] h = 5.82077e-11 , s = 4.00003; [19] h = 1.45519e-11 , s = 3.99998; [20] h = 3.63798e-12 , s = 4.00001; [#1] INFO:Caching -- RooAbsCachedPdf::getCache(model) creating new cache 0x56161c4fa860 with pdf gx_CONV_model_mean_CACHE_Obs[mean] for nset () with code 2; [#1] INFO:NumericIntegration -- RooRealIntegral::init(gx_Int[me",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf211__paramconv_8C.html:10586,integrat,integrator,10586,doc/master/rf211__paramconv_8C.html,https://root.cern,https://root.cern/doc/master/rf211__paramconv_8C.html,1,['integrat'],['integrator']
Deployability,"ting -- RooAddition::defaultErrorLevel(nll_model_Int[mean]_Norm[mean,x]_genData) Summation contains a RooNLLVar, using its error level; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const optimization; [#0] WARNING:Minimization -- RooAbsMinimizerFcn::synchronize: WARNING: no initial error estimate available for a: using 0.5; [#0] WARNING:Minimization -- RooAbsMinimizerFcn::synchronize: WARNING: no initial error estimate available for mean: using 0.6; [#0] WARNING:Minimization -- RooAbsMinimizerFcn::synchronize: WARNING: no initial error estimate available for sigma: using 0.2; sigma=0.5, [#0] WARNING:Eval -- The FFT convolution 'model' will run with 50 bins. A decent accuracy for difficult convolutions is typically only reached with n >= 1000. Suggest to increase the number of bins of the observable 'mean'.; [#1] INFO:NumericIntegration -- RooRealIntegral::init(model_mean_Int[mean]) using numeric integrator RooIntegrator1D to calculate Int(mean); [#0] WARNING:Integration -- RooRombergIntegrator::integral: integral of model_mean over range (-6,6) did not converge after 20 steps; [1] h = 1 , s = 0; [2] h = 0.25 , s = 6; [3] h = 0.0625 , s = 3; [4] h = 0.015625 , s = 4.5; [5] h = 0.00390625 , s = 3.75; [6] h = 0.000976562 , s = 4.125; [7] h = 0.000244141 , s = 3.9375; [8] h = 6.10352e-05 , s = 4.03125; [9] h = 1.52588e-05 , s = 3.98438; [10] h = 3.8147e-06 , s = 4.00781; [11] h = 9.53674e-07 , s = 3.99609; [12] h = 2.38419e-07 , s = 4.00195; [13] h = 5.96046e-08 , s = 3.99902; [14] h = 1.49012e-08 , s = 4.00049; [15] h = 3.72529e-09 , s = 3.99976; [16] h = 9.31323e-10 , s = 4.00012; [17] h = 2.32831e-10 , s = 3.99994; [18] h = 5.82077e-11 , s = 4.00003; [19] h = 1.45519e-11 , s = 3.99998; [20] h = 3.63798e-12 , s = 4.00001; [#1] INFO:Caching -- RooAbsCachedPdf::getCache(model) creating new cache 0x85075d0 with pdf gx_CONV_model_mean_CACHE_Obs[mean] for nset () with code 2; [#1] INFO:NumericIntegration -- RooRealIntegral::init(gx_Int[mean,x]",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf211__paramconv_8py.html:6816,integrat,integrator,6816,doc/master/rf211__paramconv_8py.html,https://root.cern,https://root.cern/doc/master/rf211__paramconv_8py.html,1,['integrat'],['integrator']
Deployability,"ting the meta class with the proper parameters, you get an actual class, which can then be used to create object instances. An example usage:; >>> from ROOT import std; >>> v = std.vector(int)(); >>> for i in range(0,10):; ... v.push_back(i); ...; >>> for i in v:; ... print(i, end=' '); 1 2 3 4 5 6 7 8 9; >>>; >>> list(v); [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]; >>>; The parameters to the template instantiation can either be an actual type or value (as is used here, “int”), or a string representation of the parameters (e.g. “‘double’”), or a mixture of both (e.g. “‘TCanvas, 0’” or “‘double’, 0” ). The “std::vector<int>” class is one of the classes builtin by default into the Cling extension dlls. You will get a non-functional class (instances of which can still be passed around to C++) if the corresponding dictionary doesn’t exist.; 19.1.5.3 Access to ROOT Globals; Most globals and global functions can be imported directly from the ROOT.py module, but some common ones (most notably gMinuit, although that variable now exists at startup from release 5.08 onward) do not exist yet at program startup, as they exist in modules that are loaded later (e.g. through the auto-loading mechanism). An example session should make this clear:; >>> from ROOT import *; >>> gROOT # directly available; <ROOT.TROOT object at 0x399c30>; >>> gMinuit # library not yet loaded: not available; Traceback (most recent call last):; File ""<stdin>"", line 1, in ?; NameError: name 'gMinuit' is not defined; >>> TMinuit # use of TMinuit class forces auto-loading; <class '__main__.TMinuit'>; >>> gMinuit # now gMinuit is available; <__main__.TMinuit object at 0x1458c70>; >>> not not gMinuit # but it is the null pointer, until set; False; >>> g = TMinuit(); >>> not not gMinuit; True; It is also possible to create globals interactively, either by executing a Cling macro, or by a call to gROOT.ProcessLine(). These globals are made available in the same way: either use them directly after creation in ‘from ROOT impo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:1053783,release,release,1053783,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['release'],['release']
Deployability,"ting toy MC data from any p.d.f; RooGenFitStudy Generate-and-Fit study module; RooGenFunction Export RooAbsReal as functor; RooGenProdProj General form of projected integral of product of PDFs, utility class for RooProdPdf; RooGenericPdf Generic PDF defined by string expression and list of variables; RooGlobalFunc ; RooGrid Utility class for RooMCIntegrator holding a multi-dimensional grid; RooHashTable Hash table; RooHist 1-dimensional histogram with error bars; RooHistConstraint Your description goes here...; RooHistError Utility class for calculating histogram errors; RooHistFunc Histogram based function; RooHistPdf Histogram based PDF; RooImproperIntegrator1D 1-dimensional improper integration engine; RooInt Container class for Int_t; RooIntegralMorph Linear shape interpolation operator p.d.f; RooIntegrator1D 1-dimensional numerical integration engine; RooIntegrator2D 2-dimensional numerical integration engine; RooIntegratorBinding Function binding representing output of numeric integrator; RooInvTransform Function binding returning inverse of other function binding; RooJeffreysPrior Sum of RooAbsReal objects; RooKeysPdf One-dimensional non-parametric kernel estimation p.d.f.; RooLandau Landau Distribution PDF; RooLegendre Legendre polynomial; RooLinTransBinning Linear transformation of binning specification; RooLinearVar Lvalue linear transformation function ; RooLinkedList Doubly linked list for storage of RooAbsArg objects; RooLinkedListElem Element of RooLinkedList container class; RooLinkedListIter Iterator for RooLinkedList container class; RooList TList with extra support for Option_t associations; RooListProxy Proxy class for a RooArgList; RooLognormal log-normal PDF; RooMCIntegrator VEGAS based multi-dimensional numerical integration engine; RooMCStudy A general purpose toy Monte Carlo study manager; RooMPSentinel Singleton class that terminate MP server processes when parent exists; RooMapCatEntry Utility class, holding a map expression from a index la",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ClassIndex.html:37988,integrat,integration,37988,root/html534/ClassIndex.html,https://root.cern,https://root.cern/root/html534/ClassIndex.html,3,['integrat'],"['integration', 'integrator']"
Deployability,"ting toy MC data from any p.d.f; RooGenFitStudy Generate-and-Fit study module; RooGenFunction Export RooAbsReal as functor; RooGenProdProj General form of projected integral of product of PDFs, utility class for RooProdPdf; RooGenericPdf Generic PDF defined by string expression and list of variables; RooGlobalFunc ; RooGrid Utility class for RooMCIntegrator holding a multi-dimensional grid; RooHashTable Hash table; RooHist 1-dimensional histogram with error bars; RooHistConstraint Your description goes here...; RooHistError Utility class for calculating histogram errors; RooHistFunc Histogram based function; RooHistPdf Histogram based PDF; RooImproperIntegrator1D 1-dimensional improper integration engine; RooInt Container class for Int_t; RooIntegralMorph Linear shape interpolation operator p.d.f; RooIntegrator1D 1-dimensional numerical integration engine; RooIntegrator2D 2-dimensional numerical integration engine; RooIntegratorBinding Function binding representing output of numeric integrator; RooInvTransform Function binding returning inverse of other function binding; RooJeffreysPrior Sum of RooAbsReal objects; RooKeysPdf One-dimensional non-parametric kernel estimation p.d.f.; RooLandau Landau Distribution PDF; RooLegendre Legendre polynomial; RooLinTransBinning Linear transformation of binning specification; RooLinearVar Lvalue linear transformation function; RooLinkedList Doubly linked list for storage of RooAbsArg objects; RooLinkedListElem Element of RooLinkedList container class; RooLinkedListIter Iterator for RooLinkedList container class; RooList TList with extra support for Option_t associations; RooListProxy Proxy class for a RooArgList; RooLognormal log-normal PDF; RooMCIntegrator VEGAS based multi-dimensional numerical integration engine; RooMCStudy A general purpose toy Monte Carlo study manager; RooMPSentinel Singleton class that terminate MP server processes when parent exists; RooMapCatEntry Utility class, holding a map expression from a index lab",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ClassIndex.html:34965,integrat,integration,34965,root/html602/ClassIndex.html,https://root.cern,https://root.cern/root/html602/ClassIndex.html,6,['integrat'],"['integration', 'integrator']"
Deployability,"tio value for each event in the dataset; data->addColumn(llratio_func);; ; // Extract the subset of data with large signal likelihood; std::unique_ptr<RooAbsData> dataSel{data->reduce(Cut(""llratio>0.7""))};; ; // Make plot frame; RooPlot *frame2 = x.frame(Title(""Same projection on X with LLratio(y,z)>0.7""), Bins(40));; ; // Plot select data on frame; dataSel->plotOn(frame2);; ; // M a k e M C p r o j e c t i o n o f p d f w i t h s a m e L L r a t i o c u t; // ---------------------------------------------------------------------------------------------; ; // Generate large number of events for MC integration of pdf projection; std::unique_ptr<RooDataSet> mcprojData{model.generate({x, y, z}, 10000)};; ; // Calculate LL ratio for each generated event and select MC events with llratio)0.7; mcprojData->addColumn(llratio_func);; std::unique_ptr<RooAbsData> mcprojDataSel{mcprojData->reduce(Cut(""llratio>0.7""))};; ; // Project model on x, integrating projected observables (y,z) with Monte Carlo technique; // on set of events with the same llratio cut as was applied to data; model.plotOn(frame2, ProjWData(*mcprojDataSel));; ; TCanvas *c = new TCanvas(""rf316_llratioplot"", ""rf316_llratioplot"", 800, 400);; c->Divide(2);; c->cd(1);; gPad->SetLeftMargin(0.15);; frame->GetYaxis()->SetTitleOffset(1.4);; frame->Draw();; c->cd(2);; gPad->SetLeftMargin(0.15);; frame2->GetYaxis()->SetTitleOffset(1.4);; frame2->Draw();; }; c#define c(i)Definition RSha256.hxx:101; RooAddPdf.h; RooDataSet.h; RooGaussian.h; RooPlot.h; RooPolynomial.h; RooProdPdf.h; RooRealVar.h; TAxis.h; TCanvas.h; dataOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void dataDefinition TGWin32VirtualXProxy.cxx:104; gPad#define gPadDefinition TVirtualPad.h:308; RooAbsPdfAbstract interface for all probability density functions.Definition RooAbsPdf.h:40; RooAbsPdf::createProjectionvirtual RooAbsPdf * createProjection(const R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf316__llratioplot_8C.html:3494,integrat,integrating,3494,doc/master/rf316__llratioplot_8C.html,https://root.cern,https://root.cern/doc/master/rf316__llratioplot_8C.html,1,['integrat'],['integrating']
Deployability,"tion * GetListOfMessageHandlers() constDefinition TROOT.h:250; TROOT::FwdDeclArgsToKeepCollection_tstd::vector< std::pair< std::string, int > > FwdDeclArgsToKeepCollection_tDefinition TROOT.h:187; TROOT::fVersionTimeInt_t fVersionTimeTime of ROOT version (ex 1152)Definition TROOT.h:117; TROOT::SetLineIsProcessingvoid SetLineIsProcessing()Definition TROOT.h:328; TROOT::SetMustCleanvoid SetMustClean(Bool_t flag=kTRUE)Definition TROOT.h:331; TROOT::EndOfProcessCleanupsvoid EndOfProcessCleanups()Execute the cleanups necessary at the end of the process, in particular those that must be executed b...Definition TROOT.cxx:1248; TROOT::fBatchBool_t fBatchTrue if session without graphics.Definition TROOT.h:126; TROOT::IsWebDisplayBatchBool_t IsWebDisplayBatch() constDefinition TROOT.h:288; TROOT::GetListOfFilesTSeqCollection * GetListOfFiles() constDefinition TROOT.h:237; TROOT::fEscapeBool_t fEscapeTrue if ESC has been pressed.Definition TROOT.h:135; TROOT::GetBinDirstatic const TString & GetBinDir()Get the binary directory in the installation. Static utility function.Definition TROOT.cxx:2989; TROOT::GetListOfSocketsTSeqCollection * GetListOfSockets() constDefinition TROOT.h:239; TROOT::fVersionIntInt_t fVersionIntROOT version in integer format (501)Definition TROOT.h:114; TROOT::GetIncludeDirstatic const TString & GetIncludeDir()Get the include directory in the installation. Static utility function.Definition TROOT.cxx:3042; TROOT::fFromPopUpBool_t fFromPopUpTrue if command executed from a popup menu.Definition TROOT.h:131; TROOT::Idlevoid Idle(UInt_t idleTimeInSec, const char *command=nullptr)Execute command when system has been idle for idleTimeInSec seconds.Definition TROOT.cxx:1892; TROOT::fSocketsTSeqCollection * fSocketsList of network sockets.Definition TROOT.h:148; TROOT::lsvoid ls(Option_t *option="""") const overrideTo list all objects of the application.Definition TROOT.cxx:2250; TROOT::IsEscapedBool_t IsEscaped() constDefinition TROOT.h:283; TROOT::GetMacroPathst",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TROOT_8h_source.html:29330,install,installation,29330,doc/v632/TROOT_8h_source.html,https://root.cern,https://root.cern/doc/v632/TROOT_8h_source.html,1,['install'],['installation']
Deployability,"tion * GetListOfMessageHandlers() constDefinition TROOT.h:250; TROOT::FwdDeclArgsToKeepCollection_tstd::vector< std::pair< std::string, int > > FwdDeclArgsToKeepCollection_tDefinition TROOT.h:187; TROOT::fVersionTimeInt_t fVersionTimeTime of ROOT version (ex 1152)Definition TROOT.h:117; TROOT::SetLineIsProcessingvoid SetLineIsProcessing()Definition TROOT.h:328; TROOT::SetMustCleanvoid SetMustClean(Bool_t flag=kTRUE)Definition TROOT.h:331; TROOT::EndOfProcessCleanupsvoid EndOfProcessCleanups()Execute the cleanups necessary at the end of the process, in particular those that must be executed b...Definition TROOT.cxx:1248; TROOT::fBatchBool_t fBatchTrue if session without graphics.Definition TROOT.h:126; TROOT::IsWebDisplayBatchBool_t IsWebDisplayBatch() constDefinition TROOT.h:288; TROOT::GetListOfFilesTSeqCollection * GetListOfFiles() constDefinition TROOT.h:237; TROOT::fEscapeBool_t fEscapeTrue if ESC has been pressed.Definition TROOT.h:135; TROOT::GetBinDirstatic const TString & GetBinDir()Get the binary directory in the installation. Static utility function.Definition TROOT.cxx:2993; TROOT::GetListOfSocketsTSeqCollection * GetListOfSockets() constDefinition TROOT.h:239; TROOT::fVersionIntInt_t fVersionIntROOT version in integer format (501)Definition TROOT.h:114; TROOT::GetIncludeDirstatic const TString & GetIncludeDir()Get the include directory in the installation. Static utility function.Definition TROOT.cxx:3046; TROOT::fFromPopUpBool_t fFromPopUpTrue if command executed from a popup menu.Definition TROOT.h:131; TROOT::Idlevoid Idle(UInt_t idleTimeInSec, const char *command=nullptr)Execute command when system has been idle for idleTimeInSec seconds.Definition TROOT.cxx:1892; TROOT::fSocketsTSeqCollection * fSocketsList of network sockets.Definition TROOT.h:148; TROOT::lsvoid ls(Option_t *option="""") const overrideTo list all objects of the application.Definition TROOT.cxx:2250; TROOT::IsEscapedBool_t IsEscaped() constDefinition TROOT.h:283; TROOT::GetMacroPathst",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TROOT_8h_source.html:29329,install,installation,29329,doc/master/TROOT_8h_source.html,https://root.cern,https://root.cern/doc/master/TROOT_8h_source.html,1,['install'],['installation']
Deployability,tion ; : 137 | 9966.99 8978.86 0.0201265 0.00183533 43737 0; : 138 Minimum Test error found - save the configuration ; : 138 | 9887.13 8895.8 0.0200521 0.00180887 43851.8 0; : 139 Minimum Test error found - save the configuration ; : 139 | 9804.58 8815.4 0.020043 0.00180744 43870.3 0; : 140 Minimum Test error found - save the configuration ; : 140 | 9722.87 8737.3 0.0202214 0.00190002 43664.9 0; : 141 Minimum Test error found - save the configuration ; : 141 | 9644.27 8657.79 0.020429 0.00182729 43006.8 0; : 142 Minimum Test error found - save the configuration ; : 142 | 9564.39 8579.88 0.0204803 0.00186473 42974.8 0; : 143 Minimum Test error found - save the configuration ; : 143 | 9485.56 8503.01 0.0205275 0.0018356 42799.2 0; : 144 Minimum Test error found - save the configuration ; : 144 | 9408.47 8425.29 0.0205008 0.00183704 42863.9 0; : 145 Minimum Test error found - save the configuration ; : 145 | 9331.33 8347.95 0.0201933 0.00180744 43511.7 0; : 146 Minimum Test error found - save the configuration ; : 146 | 9254.79 8271.21 0.0201415 0.00180723 43634.1 0; : 147 Minimum Test error found - save the configuration ; : 147 | 9177.56 8197 0.0201152 0.00181664 43719.3 0; : 148 Minimum Test error found - save the configuration ; : 148 | 9102.51 8122.82 0.0201505 0.00182259 43649.3 0; : 149 Minimum Test error found - save the configuration ; : 149 | 9029.04 8047.39 0.0200933 0.00180584 43745.9 0; : 150 Minimum Test error found - save the configuration ; : 150 | 8953.47 7974.78 0.0200512 0.00180093 43835 0; : 151 Minimum Test error found - save the configuration ; : 151 | 8880.6 7901.79 0.0200576 0.00180346 43825.6 0; : 152 Minimum Test error found - save the configuration ; : 152 | 8806.61 7831.08 0.0200492 0.00180366 43846.4 0; : 153 Minimum Test error found - save the configuration ; : 153 | 8736.73 7757.21 0.0200718 0.00180708 43800.2 0; : 154 Minimum Test error found - save the configuration ; : 154 | 8663.76 7685.97 0.0200413 0.00179705 43849.5 0; : 155 Minimum,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:27438,configurat,configuration,27438,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,tion ; : 139 | 9804.58 8815.4 0.020043 0.00180744 43870.3 0; : 140 Minimum Test error found - save the configuration ; : 140 | 9722.87 8737.3 0.0202214 0.00190002 43664.9 0; : 141 Minimum Test error found - save the configuration ; : 141 | 9644.27 8657.79 0.020429 0.00182729 43006.8 0; : 142 Minimum Test error found - save the configuration ; : 142 | 9564.39 8579.88 0.0204803 0.00186473 42974.8 0; : 143 Minimum Test error found - save the configuration ; : 143 | 9485.56 8503.01 0.0205275 0.0018356 42799.2 0; : 144 Minimum Test error found - save the configuration ; : 144 | 9408.47 8425.29 0.0205008 0.00183704 42863.9 0; : 145 Minimum Test error found - save the configuration ; : 145 | 9331.33 8347.95 0.0201933 0.00180744 43511.7 0; : 146 Minimum Test error found - save the configuration ; : 146 | 9254.79 8271.21 0.0201415 0.00180723 43634.1 0; : 147 Minimum Test error found - save the configuration ; : 147 | 9177.56 8197 0.0201152 0.00181664 43719.3 0; : 148 Minimum Test error found - save the configuration ; : 148 | 9102.51 8122.82 0.0201505 0.00182259 43649.3 0; : 149 Minimum Test error found - save the configuration ; : 149 | 9029.04 8047.39 0.0200933 0.00180584 43745.9 0; : 150 Minimum Test error found - save the configuration ; : 150 | 8953.47 7974.78 0.0200512 0.00180093 43835 0; : 151 Minimum Test error found - save the configuration ; : 151 | 8880.6 7901.79 0.0200576 0.00180346 43825.6 0; : 152 Minimum Test error found - save the configuration ; : 152 | 8806.61 7831.08 0.0200492 0.00180366 43846.4 0; : 153 Minimum Test error found - save the configuration ; : 153 | 8736.73 7757.21 0.0200718 0.00180708 43800.2 0; : 154 Minimum Test error found - save the configuration ; : 154 | 8663.76 7685.97 0.0200413 0.00179705 43849.5 0; : 155 Minimum Test error found - save the configuration ; : 155 | 8592.21 7616.06 0.0200532 0.00180372 43837 0; : 156 Minimum Test error found - save the configuration ; : 156 | 8521.8 7546.54 0.0202528 0.00182096 43403 0; : 157 Minimum T,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:27663,configurat,configuration,27663,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,tion ; : 159 | 8315.02 7340.56 0.020041 0.00180956 43880.3 0; : 160 Minimum Test error found - save the configuration ; : 160 | 8246.43 7272.24 0.0202099 0.0018629 43603.8 0; : 161 Minimum Test error found - save the configuration ; : 161 | 8177.63 7206.25 0.0206118 0.00188237 42713.4 0; : 162 Minimum Test error found - save the configuration ; : 162 | 8110.93 7140.22 0.0205527 0.00185442 42784.7 0; : 163 Minimum Test error found - save the configuration ; : 163 | 8044.58 7074.62 0.0205803 0.00184203 42693.3 0; : 164 Minimum Test error found - save the configuration ; : 164 | 7979.59 7008.2 0.0205615 0.00181915 42684 0; : 165 Minimum Test error found - save the configuration ; : 165 | 7913.46 6943.53 0.0204022 0.00180585 43019.2 0; : 166 Minimum Test error found - save the configuration ; : 166 | 7848.36 6879.88 0.0204674 0.00182719 42918 0; : 167 Minimum Test error found - save the configuration ; : 167 | 7784.6 6815.88 0.0200635 0.00180544 43816.2 0; : 168 Minimum Test error found - save the configuration ; : 168 | 7720.74 6752.64 0.0200614 0.00180502 43820.3 0; : 169 Minimum Test error found - save the configuration ; : 169 | 7657.59 6690.04 0.0201291 0.00181427 43680.6 0; : 170 Minimum Test error found - save the configuration ; : 170 | 7595.66 6626.52 0.0200669 0.00181066 43820.7 0; : 171 Minimum Test error found - save the configuration ; : 171 | 7532.11 6565.9 0.0201114 0.00182063 43737.9 0; : 172 Minimum Test error found - save the configuration ; : 172 | 7471.23 6504.71 0.0200897 0.00182205 43793.2 0; : 173 Minimum Test error found - save the configuration ; : 173 | 7410.53 6443.41 0.0204177 0.00187787 43150.4 0; : 174 Minimum Test error found - save the configuration ; : 174 | 7349.1 6383.77 0.0200981 0.00181163 43748.3 0; : 175 Minimum Test error found - save the configuration ; : 175 | 7289.39 6324 0.0200682 0.0018131 43823.4 0; : 176 Minimum Test error found - save the configuration ; : 176 | 7230 6264.47 0.0200687 0.00181285 43821.5 0; : 177 Minimum Te,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:29925,configurat,configuration,29925,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,tion ; : 179 | 7053.87 6090.24 0.0200835 0.0018163 43794.3 0; : 180 Minimum Test error found - save the configuration ; : 180 | 6997.03 6032.07 0.0204217 0.00180691 42976.5 0; : 181 Minimum Test error found - save the configuration ; : 181 | 6939.07 5975.45 0.0200798 0.00180145 43767.5 0; : 182 Minimum Test error found - save the configuration ; : 182 | 6882.6 5919.11 0.0200699 0.00180792 43806.8 0; : 183 Minimum Test error found - save the configuration ; : 183 | 6826.1 5863.62 0.0200838 0.00180862 43775.3 0; : 184 Minimum Test error found - save the configuration ; : 184 | 6771.06 5807.61 0.0200991 0.00181199 43746.7 0; : 185 Minimum Test error found - save the configuration ; : 185 | 6714.64 5753.86 0.0200873 0.00180851 43766.7 0; : 186 Minimum Test error found - save the configuration ; : 186 | 6660.45 5699.55 0.0200713 0.00180648 43800 0; : 187 Minimum Test error found - save the configuration ; : 187 | 6606 5645.81 0.0200891 0.00180584 43755.9 0; : 188 Minimum Test error found - save the configuration ; : 188 | 6552.47 5592.04 0.0200898 0.00181079 43766 0; : 189 Minimum Test error found - save the configuration ; : 189 | 6500.15 5537.2 0.0201183 0.00181031 43696.6 0; : 190 Minimum Test error found - save the configuration ; : 190 | 6444.37 5487.05 0.0200871 0.00180586 43760.7 0; : 191 Minimum Test error found - save the configuration ; : 191 | 6394.21 5433.57 0.0200994 0.00180152 43720.8 0; : 192 Minimum Test error found - save the configuration ; : 192 | 6340.82 5382.29 0.0201748 0.00181779 43580.1 0; : 193 Minimum Test error found - save the configuration ; : 193 | 6289.73 5330.56 0.0202017 0.00183095 43547.4 0; : 194 Minimum Test error found - save the configuration ; : 194 | 6238.01 5279.82 0.0201002 0.00180964 43738.5 0; : 195 Minimum Test error found - save the configuration ; : 195 | 6186.17 5231.06 0.0200801 0.00180696 43780.1 0; : 196 Minimum Test error found - save the configuration ; : 196 | 6137.18 5180.37 0.0200943 0.00180721 43746.7 0; : 197 Mini,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:32187,configurat,configuration,32187,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,tion ; : 184 | 6771.06 5807.61 0.0200991 0.00181199 43746.7 0; : 185 Minimum Test error found - save the configuration ; : 185 | 6714.64 5753.86 0.0200873 0.00180851 43766.7 0; : 186 Minimum Test error found - save the configuration ; : 186 | 6660.45 5699.55 0.0200713 0.00180648 43800 0; : 187 Minimum Test error found - save the configuration ; : 187 | 6606 5645.81 0.0200891 0.00180584 43755.9 0; : 188 Minimum Test error found - save the configuration ; : 188 | 6552.47 5592.04 0.0200898 0.00181079 43766 0; : 189 Minimum Test error found - save the configuration ; : 189 | 6500.15 5537.2 0.0201183 0.00181031 43696.6 0; : 190 Minimum Test error found - save the configuration ; : 190 | 6444.37 5487.05 0.0200871 0.00180586 43760.7 0; : 191 Minimum Test error found - save the configuration ; : 191 | 6394.21 5433.57 0.0200994 0.00180152 43720.8 0; : 192 Minimum Test error found - save the configuration ; : 192 | 6340.82 5382.29 0.0201748 0.00181779 43580.1 0; : 193 Minimum Test error found - save the configuration ; : 193 | 6289.73 5330.56 0.0202017 0.00183095 43547.4 0; : 194 Minimum Test error found - save the configuration ; : 194 | 6238.01 5279.82 0.0201002 0.00180964 43738.5 0; : 195 Minimum Test error found - save the configuration ; : 195 | 6186.17 5231.06 0.0200801 0.00180696 43780.1 0; : 196 Minimum Test error found - save the configuration ; : 196 | 6137.18 5180.37 0.0200943 0.00180721 43746.7 0; : 197 Minimum Test error found - save the configuration ; : 197 | 6087.3 5129.97 0.0200908 0.00180793 43756.8 0; : 198 Minimum Test error found - save the configuration ; : 198 | 6036.37 5081.81 0.0200859 0.00180009 43749.7 0; : 199 Minimum Test error found - save the configuration ; : 199 | 5987.5 5033.69 0.0200862 0.001808 43768 0; : 200 Minimum Test error found - save the configuration ; : 200 | 5938.96 4985.44 0.0201058 0.00181448 43736.6 0; : 201 Minimum Test error found - save the configuration ; : 201 | 5891.43 4936.26 0.0201175 0.00184013 43770 0; : 202 Minimum T,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:32754,configurat,configuration,32754,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,tion ; : 185 | 6714.64 5753.86 0.0200873 0.00180851 43766.7 0; : 186 Minimum Test error found - save the configuration ; : 186 | 6660.45 5699.55 0.0200713 0.00180648 43800 0; : 187 Minimum Test error found - save the configuration ; : 187 | 6606 5645.81 0.0200891 0.00180584 43755.9 0; : 188 Minimum Test error found - save the configuration ; : 188 | 6552.47 5592.04 0.0200898 0.00181079 43766 0; : 189 Minimum Test error found - save the configuration ; : 189 | 6500.15 5537.2 0.0201183 0.00181031 43696.6 0; : 190 Minimum Test error found - save the configuration ; : 190 | 6444.37 5487.05 0.0200871 0.00180586 43760.7 0; : 191 Minimum Test error found - save the configuration ; : 191 | 6394.21 5433.57 0.0200994 0.00180152 43720.8 0; : 192 Minimum Test error found - save the configuration ; : 192 | 6340.82 5382.29 0.0201748 0.00181779 43580.1 0; : 193 Minimum Test error found - save the configuration ; : 193 | 6289.73 5330.56 0.0202017 0.00183095 43547.4 0; : 194 Minimum Test error found - save the configuration ; : 194 | 6238.01 5279.82 0.0201002 0.00180964 43738.5 0; : 195 Minimum Test error found - save the configuration ; : 195 | 6186.17 5231.06 0.0200801 0.00180696 43780.1 0; : 196 Minimum Test error found - save the configuration ; : 196 | 6137.18 5180.37 0.0200943 0.00180721 43746.7 0; : 197 Minimum Test error found - save the configuration ; : 197 | 6087.3 5129.97 0.0200908 0.00180793 43756.8 0; : 198 Minimum Test error found - save the configuration ; : 198 | 6036.37 5081.81 0.0200859 0.00180009 43749.7 0; : 199 Minimum Test error found - save the configuration ; : 199 | 5987.5 5033.69 0.0200862 0.001808 43768 0; : 200 Minimum Test error found - save the configuration ; : 200 | 5938.96 4985.44 0.0201058 0.00181448 43736.6 0; : 201 Minimum Test error found - save the configuration ; : 201 | 5891.43 4936.26 0.0201175 0.00184013 43770 0; : 202 Minimum Test error found - save the configuration ; : 202 | 5842.14 4889.6 0.0203335 0.00187992 43352.1 0; : 203 Minimum Te,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:32868,configurat,configuration,32868,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,tion ; : 186 | 6660.45 5699.55 0.0200713 0.00180648 43800 0; : 187 Minimum Test error found - save the configuration ; : 187 | 6606 5645.81 0.0200891 0.00180584 43755.9 0; : 188 Minimum Test error found - save the configuration ; : 188 | 6552.47 5592.04 0.0200898 0.00181079 43766 0; : 189 Minimum Test error found - save the configuration ; : 189 | 6500.15 5537.2 0.0201183 0.00181031 43696.6 0; : 190 Minimum Test error found - save the configuration ; : 190 | 6444.37 5487.05 0.0200871 0.00180586 43760.7 0; : 191 Minimum Test error found - save the configuration ; : 191 | 6394.21 5433.57 0.0200994 0.00180152 43720.8 0; : 192 Minimum Test error found - save the configuration ; : 192 | 6340.82 5382.29 0.0201748 0.00181779 43580.1 0; : 193 Minimum Test error found - save the configuration ; : 193 | 6289.73 5330.56 0.0202017 0.00183095 43547.4 0; : 194 Minimum Test error found - save the configuration ; : 194 | 6238.01 5279.82 0.0201002 0.00180964 43738.5 0; : 195 Minimum Test error found - save the configuration ; : 195 | 6186.17 5231.06 0.0200801 0.00180696 43780.1 0; : 196 Minimum Test error found - save the configuration ; : 196 | 6137.18 5180.37 0.0200943 0.00180721 43746.7 0; : 197 Minimum Test error found - save the configuration ; : 197 | 6087.3 5129.97 0.0200908 0.00180793 43756.8 0; : 198 Minimum Test error found - save the configuration ; : 198 | 6036.37 5081.81 0.0200859 0.00180009 43749.7 0; : 199 Minimum Test error found - save the configuration ; : 199 | 5987.5 5033.69 0.0200862 0.001808 43768 0; : 200 Minimum Test error found - save the configuration ; : 200 | 5938.96 4985.44 0.0201058 0.00181448 43736.6 0; : 201 Minimum Test error found - save the configuration ; : 201 | 5891.43 4936.26 0.0201175 0.00184013 43770 0; : 202 Minimum Test error found - save the configuration ; : 202 | 5842.14 4889.6 0.0203335 0.00187992 43352.1 0; : 203 Minimum Test error found - save the configuration ; : 203 | 5794.67 4843.13 0.0203128 0.00181164 43240.6 0; : 204 Minimum Te,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:32982,configurat,configuration,32982,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,tion ; : 214 | 5296.23 4352.84 0.0204206 0.00182076 43011.2 0; : 215 Minimum Test error found - save the configuration ; : 215 | 5253.06 4310.52 0.0202066 0.00181743 43504 0; : 216 Minimum Test error found - save the configuration ; : 216 | 5210.68 4267.22 0.0201957 0.00182236 43541.2 0; : 217 Minimum Test error found - save the configuration ; : 217 | 5167.13 4226.2 0.0205987 0.00192627 42843.8 0; : 218 Minimum Test error found - save the configuration ; : 218 | 5125.25 4184.98 0.0205604 0.00182022 42689.1 0; : 219 Minimum Test error found - save the configuration ; : 219 | 5082.85 4144.99 0.0201692 0.00184819 43665.6 0; : 220 Minimum Test error found - save the configuration ; : 220 | 5041.97 4104.3 0.0201733 0.00183631 43627.6 0; : 221 Minimum Test error found - save the configuration ; : 221 | 5000.63 4064.07 0.0203116 0.00186316 43364 0; : 222 Minimum Test error found - save the configuration ; : 222 | 4960.27 4023.61 0.020233 0.0018342 43481.1 0; : 223 Minimum Test error found - save the configuration ; : 223 | 4919.35 3984.02 0.0201371 0.00181764 43669.4 0; : 224 Minimum Test error found - save the configuration ; : 224 | 4878.53 3945.89 0.0203286 0.0018483 43289.4 0; : 225 Minimum Test error found - save the configuration ; : 225 | 4840.32 3905.84 0.0201762 0.00181162 43562 0; : 226 Minimum Test error found - save the configuration ; : 226 | 4799.06 3868.52 0.0201024 0.00180874 43731 0; : 227 Minimum Test error found - save the configuration ; : 227 | 4760.29 3830.98 0.0201923 0.00181512 43532.4 0; : 228 Minimum Test error found - save the configuration ; : 228 | 4721.11 3793.89 0.0201034 0.00181119 43734.4 0; : 229 Minimum Test error found - save the configuration ; : 229 | 4683.32 3755.52 0.0201311 0.00181167 43669.5 0; : 230 Minimum Test error found - save the configuration ; : 230 | 4644.47 3718.53 0.0201323 0.00180638 43654.1 0; : 231 Minimum Test error found - save the configuration ; : 231 | 4606.79 3681.43 0.020129 0.00181323 43678.1 0; : 232 Minimum,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:36153,configurat,configuration,36153,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,tion ; : 215 | 5253.06 4310.52 0.0202066 0.00181743 43504 0; : 216 Minimum Test error found - save the configuration ; : 216 | 5210.68 4267.22 0.0201957 0.00182236 43541.2 0; : 217 Minimum Test error found - save the configuration ; : 217 | 5167.13 4226.2 0.0205987 0.00192627 42843.8 0; : 218 Minimum Test error found - save the configuration ; : 218 | 5125.25 4184.98 0.0205604 0.00182022 42689.1 0; : 219 Minimum Test error found - save the configuration ; : 219 | 5082.85 4144.99 0.0201692 0.00184819 43665.6 0; : 220 Minimum Test error found - save the configuration ; : 220 | 5041.97 4104.3 0.0201733 0.00183631 43627.6 0; : 221 Minimum Test error found - save the configuration ; : 221 | 5000.63 4064.07 0.0203116 0.00186316 43364 0; : 222 Minimum Test error found - save the configuration ; : 222 | 4960.27 4023.61 0.020233 0.0018342 43481.1 0; : 223 Minimum Test error found - save the configuration ; : 223 | 4919.35 3984.02 0.0201371 0.00181764 43669.4 0; : 224 Minimum Test error found - save the configuration ; : 224 | 4878.53 3945.89 0.0203286 0.0018483 43289.4 0; : 225 Minimum Test error found - save the configuration ; : 225 | 4840.32 3905.84 0.0201762 0.00181162 43562 0; : 226 Minimum Test error found - save the configuration ; : 226 | 4799.06 3868.52 0.0201024 0.00180874 43731 0; : 227 Minimum Test error found - save the configuration ; : 227 | 4760.29 3830.98 0.0201923 0.00181512 43532.4 0; : 228 Minimum Test error found - save the configuration ; : 228 | 4721.11 3793.89 0.0201034 0.00181119 43734.4 0; : 229 Minimum Test error found - save the configuration ; : 229 | 4683.32 3755.52 0.0201311 0.00181167 43669.5 0; : 230 Minimum Test error found - save the configuration ; : 230 | 4644.47 3718.53 0.0201323 0.00180638 43654.1 0; : 231 Minimum Test error found - save the configuration ; : 231 | 4606.79 3681.43 0.020129 0.00181323 43678.1 0; : 232 Minimum Test error found - save the configuration ; : 232 | 4567.71 3646.94 0.0201545 0.0018103 43610.4 0; : 233 Minimum ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:36267,configurat,configuration,36267,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,tion ; : 282 | 3015.05 2187.65 0.0203448 0.00180913 43160 0; : 283 Minimum Test error found - save the configuration ; : 283 | 2989.86 2164.96 0.0201855 0.00181334 43544.1 0; : 284 Minimum Test error found - save the configuration ; : 284 | 2964.88 2142 0.0201236 0.00181217 43688.6 0; : 285 Minimum Test error found - save the configuration ; : 285 | 2939.99 2119.13 0.0201416 0.00181963 43663.5 0; : 286 Minimum Test error found - save the configuration ; : 286 | 2915.05 2096.39 0.0202522 0.00187797 43539.3 0; : 287 Minimum Test error found - save the configuration ; : 287 | 2890.28 2074.46 0.0203309 0.00186659 43326.9 0; : 288 Minimum Test error found - save the configuration ; : 288 | 2866.16 2052.25 0.020288 0.00183539 43354.4 0; : 289 Minimum Test error found - save the configuration ; : 289 | 2841.54 2030.76 0.0202472 0.00188865 43576.5 0; : 290 Minimum Test error found - save the configuration ; : 290 | 2817.7 2009.26 0.020243 0.00187711 43559.1 0; : 291 Minimum Test error found - save the configuration ; : 291 | 2793.45 1988.22 0.0204562 0.0019356 43195.2 0; : 292 Minimum Test error found - save the configuration ; : 292 | 2769.81 1967.05 0.0206007 0.00187416 42720.1 0; : 293 Minimum Test error found - save the configuration ; : 293 | 2746.94 1945.3 0.0203018 0.00188698 43443.4 0; : 294 Minimum Test error found - save the configuration ; : 294 | 2722.93 1924.99 0.0202207 0.00184041 43524.9 0; : 295 Minimum Test error found - save the configuration ; : 295 | 2699.2 1905.24 0.0201591 0.00182196 43627.2 0; : 296 Minimum Test error found - save the configuration ; : 296 | 2677.38 1884 0.020139 0.00182793 43689.5 0; : 297 Minimum Test error found - save the configuration ; : 297 | 2654.18 1863.4 0.0201209 0.00180649 43681.3 0; : 298 Minimum Test error found - save the configuration ; : 298 | 2631.44 1843.45 0.0201273 0.00181385 43683.7 0; : 299 Minimum Test error found - save the configuration ; : 299 | 2608.67 1823.73 0.0201716 0.0018196 43591.9 0; : 300 Minimum Te,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:43863,configurat,configuration,43863,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,tion ; : 296 | 2677.38 1884 0.020139 0.00182793 43689.5 0; : 297 Minimum Test error found - save the configuration ; : 297 | 2654.18 1863.4 0.0201209 0.00180649 43681.3 0; : 298 Minimum Test error found - save the configuration ; : 298 | 2631.44 1843.45 0.0201273 0.00181385 43683.7 0; : 299 Minimum Test error found - save the configuration ; : 299 | 2608.67 1823.73 0.0201716 0.0018196 43591.9 0; : 300 Minimum Test error found - save the configuration ; : 300 | 2587.28 1803.4 0.0201132 0.00181242 43714.1 0; : 301 Minimum Test error found - save the configuration ; : 301 | 2563.77 1785.09 0.0201182 0.00181092 43698.4 0; : 302 Minimum Test error found - save the configuration ; : 302 | 2542.68 1765.44 0.020145 0.00181496 43644.3 0; : 303 Minimum Test error found - save the configuration ; : 303 | 2520.76 1746.74 0.0201278 0.00181436 43683.8 0; : 304 Minimum Test error found - save the configuration ; : 304 | 2499.57 1727.02 0.0204166 0.00191205 43232.5 0; : 305 Minimum Test error found - save the configuration ; : 305 | 2477.45 1708.65 0.0204906 0.00190401 43041.7 0; : 306 Minimum Test error found - save the configuration ; : 306 | 2456.23 1690.14 0.0205827 0.00188115 42777.3 0; : 307 Minimum Test error found - save the configuration ; : 307 | 2435.47 1671.48 0.0207046 0.00184968 42429.2 0; : 308 Minimum Test error found - save the configuration ; : 308 | 2413.82 1653.88 0.0201781 0.00181945 43576.1 0; : 309 Minimum Test error found - save the configuration ; : 309 | 2393.9 1635.56 0.0203837 0.00183898 43138.9 0; : 310 Minimum Test error found - save the configuration ; : 310 | 2372.92 1617.74 0.0207665 0.00191074 42427.4 0; : 311 Minimum Test error found - save the configuration ; : 311 | 2352.45 1599.83 0.0207471 0.00187139 42382.5 0; : 312 Minimum Test error found - save the configuration ; : 312 | 2332.13 1582.05 0.0206387 0.00189784 42687.5 0; : 313 Minimum Test error found - save the configuration ; : 313 | 2311.44 1565.38 0.0203909 0.00182385 43087.1 0; : 314 Mi,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:45448,configurat,configuration,45448,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,tion ; : 324 | 2100.24 1384.53 0.0201342 0.00182071 43683.6 0; : 325 Minimum Test error found - save the configuration ; : 325 | 2081.68 1368.94 0.02014 0.00181951 43666.9 0; : 326 Minimum Test error found - save the configuration ; : 326 | 2062.99 1354.16 0.0201231 0.00181474 43695.9 0; : 327 Minimum Test error found - save the configuration ; : 327 | 2044.89 1339.01 0.0203662 0.00185106 43207.9 0; : 328 Minimum Test error found - save the configuration ; : 328 | 2027.08 1324.14 0.0205379 0.00189883 42920.6 0; : 329 Minimum Test error found - save the configuration ; : 329 | 2010.14 1308.4 0.0208465 0.00188706 42195.2 0; : 330 Minimum Test error found - save the configuration ; : 330 | 1991.48 1294.33 0.0203889 0.00185386 43161.4 0; : 331 Minimum Test error found - save the configuration ; : 331 | 1974 1281.47 0.020168 0.00182028 43602.2 0; : 332 Minimum Test error found - save the configuration ; : 332 | 1957.4 1265.55 0.0201238 0.00181209 43687.9 0; : 333 Minimum Test error found - save the configuration ; : 333 | 1939.3 1251.56 0.020118 0.0018119 43701.4 0; : 334 Minimum Test error found - save the configuration ; : 334 | 1922.28 1237.18 0.0201046 0.00181273 43735.3 0; : 335 Minimum Test error found - save the configuration ; : 335 | 1905.38 1223.07 0.0201485 0.00181696 43640.6 0; : 336 Minimum Test error found - save the configuration ; : 336 | 1888.23 1209.6 0.0201214 0.00181991 43712.2 0; : 337 Minimum Test error found - save the configuration ; : 337 | 1871.94 1195.83 0.0205304 0.00184821 42821.5 0; : 338 Minimum Test error found - save the configuration ; : 338 | 1855.07 1182.37 0.0201268 0.00181989 43699.3 0; : 339 Minimum Test error found - save the configuration ; : 339 | 1838.61 1168.93 0.0201201 0.00181292 43698.7 0; : 340 Minimum Test error found - save the configuration ; : 340 | 1822.04 1156.1 0.020121 0.00181141 43693 0; : 341 Minimum Test error found - save the configuration ; : 341 | 1806.12 1142.64 0.0202229 0.00182722 43488.6 0; : 342 Minimum T,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:48627,configurat,configuration,48627,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,tion ; : 333 | 1939.3 1251.56 0.020118 0.0018119 43701.4 0; : 334 Minimum Test error found - save the configuration ; : 334 | 1922.28 1237.18 0.0201046 0.00181273 43735.3 0; : 335 Minimum Test error found - save the configuration ; : 335 | 1905.38 1223.07 0.0201485 0.00181696 43640.6 0; : 336 Minimum Test error found - save the configuration ; : 336 | 1888.23 1209.6 0.0201214 0.00181991 43712.2 0; : 337 Minimum Test error found - save the configuration ; : 337 | 1871.94 1195.83 0.0205304 0.00184821 42821.5 0; : 338 Minimum Test error found - save the configuration ; : 338 | 1855.07 1182.37 0.0201268 0.00181989 43699.3 0; : 339 Minimum Test error found - save the configuration ; : 339 | 1838.61 1168.93 0.0201201 0.00181292 43698.7 0; : 340 Minimum Test error found - save the configuration ; : 340 | 1822.04 1156.1 0.020121 0.00181141 43693 0; : 341 Minimum Test error found - save the configuration ; : 341 | 1806.12 1142.64 0.0202229 0.00182722 43488.6 0; : 342 Minimum Test error found - save the configuration ; : 342 | 1789.69 1130.02 0.0201502 0.00182055 43645.1 0; : 343 Minimum Test error found - save the configuration ; : 343 | 1774.23 1116.9 0.0201756 0.0018237 43592.2 0; : 344 Minimum Test error found - save the configuration ; : 344 | 1757.78 1104.57 0.0201146 0.00181274 43711.3 0; : 345 Minimum Test error found - save the configuration ; : 345 | 1742.23 1092.31 0.0201296 0.00180634 43660.4 0; : 346 Minimum Test error found - save the configuration ; : 346 | 1726.84 1079.76 0.0201287 0.00180534 43660.1 0; : 347 Minimum Test error found - save the configuration ; : 347 | 1711.03 1067.63 0.0201353 0.00181782 43674.2 0; : 348 Minimum Test error found - save the configuration ; : 348 | 1695.85 1055.38 0.0201691 0.00181876 43596 0; : 349 Minimum Test error found - save the configuration ; : 349 | 1680.85 1042.99 0.0201335 0.00181253 43665.7 0; : 350 Minimum Test error found - save the configuration ; : 350 | 1665.28 1031.67 0.0201289 0.00181121 43673.7 0; : 351 Minim,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:49645,configurat,configuration,49645,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,tion ; : 352 | 1635.63 1008.56 0.0201479 0.00180795 43620.7 0; : 353 Minimum Test error found - save the configuration ; : 353 | 1620.78 996.719 0.0201232 0.001813 43691.5 0; : 354 Minimum Test error found - save the configuration ; : 354 | 1605.94 985.366 0.0201287 0.00181207 43676.2 0; : 355 Minimum Test error found - save the configuration ; : 355 | 1591.13 974.131 0.0204416 0.00182759 42978.3 0; : 356 Minimum Test error found - save the configuration ; : 356 | 1576.72 963.473 0.0201234 0.00181346 43692.1 0; : 357 Minimum Test error found - save the configuration ; : 357 | 1562.75 952.48 0.0201406 0.00181733 43660.4 0; : 358 Minimum Test error found - save the configuration ; : 358 | 1548.22 941.458 0.0201341 0.00182516 43694.5 0; : 359 Minimum Test error found - save the configuration ; : 359 | 1534.11 930.552 0.0201332 0.0018225 43690.3 0; : 360 Minimum Test error found - save the configuration ; : 360 | 1520 920.009 0.020131 0.00182161 43693.5 0; : 361 Minimum Test error found - save the configuration ; : 361 | 1506.11 909.801 0.0201272 0.00182148 43702.2 0; : 362 Minimum Test error found - save the configuration ; : 362 | 1492.5 899.632 0.0201236 0.00181792 43702.3 0; : 363 Minimum Test error found - save the configuration ; : 363 | 1478.85 889.132 0.0202194 0.00182105 43482.1 0; : 364 Minimum Test error found - save the configuration ; : 364 | 1465.26 879.602 0.0201188 0.00181401 43704.5 0; : 365 Minimum Test error found - save the configuration ; : 365 | 1452.04 868.451 0.0201338 0.00181986 43682.7 0; : 366 Minimum Test error found - save the configuration ; : 366 | 1438.22 858.822 0.0202933 0.00187199 43428 0; : 367 Minimum Test error found - save the configuration ; : 367 | 1424.9 849.517 0.0203705 0.00181778 43120.3 0; : 368 Minimum Test error found - save the configuration ; : 368 | 1411.97 839.213 0.020133 0.00180845 43657.3 0; : 369 Minimum Test error found - save the configuration ; : 369 | 1398.96 829.601 0.0201373 0.00181244 43656.5 0; : 370 Minimu,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:51797,configurat,configuration,51797,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,tion ; : 353 | 1620.78 996.719 0.0201232 0.001813 43691.5 0; : 354 Minimum Test error found - save the configuration ; : 354 | 1605.94 985.366 0.0201287 0.00181207 43676.2 0; : 355 Minimum Test error found - save the configuration ; : 355 | 1591.13 974.131 0.0204416 0.00182759 42978.3 0; : 356 Minimum Test error found - save the configuration ; : 356 | 1576.72 963.473 0.0201234 0.00181346 43692.1 0; : 357 Minimum Test error found - save the configuration ; : 357 | 1562.75 952.48 0.0201406 0.00181733 43660.4 0; : 358 Minimum Test error found - save the configuration ; : 358 | 1548.22 941.458 0.0201341 0.00182516 43694.5 0; : 359 Minimum Test error found - save the configuration ; : 359 | 1534.11 930.552 0.0201332 0.0018225 43690.3 0; : 360 Minimum Test error found - save the configuration ; : 360 | 1520 920.009 0.020131 0.00182161 43693.5 0; : 361 Minimum Test error found - save the configuration ; : 361 | 1506.11 909.801 0.0201272 0.00182148 43702.2 0; : 362 Minimum Test error found - save the configuration ; : 362 | 1492.5 899.632 0.0201236 0.00181792 43702.3 0; : 363 Minimum Test error found - save the configuration ; : 363 | 1478.85 889.132 0.0202194 0.00182105 43482.1 0; : 364 Minimum Test error found - save the configuration ; : 364 | 1465.26 879.602 0.0201188 0.00181401 43704.5 0; : 365 Minimum Test error found - save the configuration ; : 365 | 1452.04 868.451 0.0201338 0.00181986 43682.7 0; : 366 Minimum Test error found - save the configuration ; : 366 | 1438.22 858.822 0.0202933 0.00187199 43428 0; : 367 Minimum Test error found - save the configuration ; : 367 | 1424.9 849.517 0.0203705 0.00181778 43120.3 0; : 368 Minimum Test error found - save the configuration ; : 368 | 1411.97 839.213 0.020133 0.00180845 43657.3 0; : 369 Minimum Test error found - save the configuration ; : 369 | 1398.96 829.601 0.0201373 0.00181244 43656.5 0; : 370 Minimum Test error found - save the configuration ; : 370 | 1385.58 820.462 0.020129 0.00181191 43675 0; : 371 Minimum T,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:51911,configurat,configuration,51911,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,tion ; : 366 | 1438.22 858.822 0.0202933 0.00187199 43428 0; : 367 Minimum Test error found - save the configuration ; : 367 | 1424.9 849.517 0.0203705 0.00181778 43120.3 0; : 368 Minimum Test error found - save the configuration ; : 368 | 1411.97 839.213 0.020133 0.00180845 43657.3 0; : 369 Minimum Test error found - save the configuration ; : 369 | 1398.96 829.601 0.0201373 0.00181244 43656.5 0; : 370 Minimum Test error found - save the configuration ; : 370 | 1385.58 820.462 0.020129 0.00181191 43675 0; : 371 Minimum Test error found - save the configuration ; : 371 | 1373.35 810.549 0.0201499 0.00183853 43688.7 0; : 372 Minimum Test error found - save the configuration ; : 372 | 1359.77 801.896 0.0201658 0.00181611 43597.4 0; : 373 Minimum Test error found - save the configuration ; : 373 | 1347.92 793.298 0.0201248 0.00181285 43687.4 0; : 374 Minimum Test error found - save the configuration ; : 374 | 1335.01 784.052 0.0201186 0.0018071 43688.4 0; : 375 Minimum Test error found - save the configuration ; : 375 | 1322.7 774.736 0.0201382 0.00181076 43650.3 0; : 376 Minimum Test error found - save the configuration ; : 376 | 1310.36 765.843 0.0201418 0.00181155 43643.7 0; : 377 Minimum Test error found - save the configuration ; : 377 | 1298.44 756.891 0.0201268 0.00181403 43685.4 0; : 378 Minimum Test error found - save the configuration ; : 378 | 1285.86 748.455 0.0201275 0.00181908 43695.6 0; : 379 Minimum Test error found - save the configuration ; : 379 | 1273.98 740.611 0.0201241 0.00181383 43691.2 0; : 380 Minimum Test error found - save the configuration ; : 380 | 1262.34 731.526 0.0201157 0.00181169 43706.2 0; : 381 Minimum Test error found - save the configuration ; : 381 | 1250.17 723.372 0.0201233 0.00181189 43688.6 0; : 382 Minimum Test error found - save the configuration ; : 382 | 1238.6 715.116 0.0201183 0.00181259 43702.2 0; : 383 Minimum Test error found - save the configuration ; : 383 | 1227 706.748 0.0201329 0.0018213 43688.2 0; : 384 Minimum,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:53384,configurat,configuration,53384,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,tion ; : 423 | 832.226 453.261 0.0201773 0.00182876 43600.2 0; : 424 Minimum Test error found - save the configuration ; : 424 | 824.213 447.823 0.020172 0.00183242 43621.4 0; : 425 Minimum Test error found - save the configuration ; : 425 | 816.038 443.488 0.0201762 0.00183703 43622.6 0; : 426 Minimum Test error found - save the configuration ; : 426 | 807.627 438.586 0.0202495 0.00183837 43452 0; : 427 Minimum Test error found - save the configuration ; : 427 | 799.623 433.9 0.0201527 0.00181997 43637.7 0; : 428 Minimum Test error found - save the configuration ; : 428 | 791.762 429.014 0.0201231 0.00181389 43693.9 0; : 429 Minimum Test error found - save the configuration ; : 429 | 783.663 424.486 0.0202036 0.00181812 43512.5 0; : 430 Minimum Test error found - save the configuration ; : 430 | 776.025 420.47 0.020126 0.00182055 43702.9 0; : 431 Minimum Test error found - save the configuration ; : 431 | 768.212 415.652 0.0201366 0.00182081 43678.1 0; : 432 Minimum Test error found - save the configuration ; : 432 | 761.012 411.218 0.02015 0.00183569 43681.6 0; : 433 Minimum Test error found - save the configuration ; : 433 | 753.136 407.298 0.0201476 0.00182106 43652.7 0; : 434 Minimum Test error found - save the configuration ; : 434 | 745.345 402.751 0.020133 0.00182099 43687.1 0; : 435 Minimum Test error found - save the configuration ; : 435 | 738.037 398.378 0.0201447 0.00181389 43642.5 0; : 436 Minimum Test error found - save the configuration ; : 436 | 730.692 394.216 0.0201655 0.00182279 43614.1 0; : 437 Minimum Test error found - save the configuration ; : 437 | 723.856 389.773 0.0201631 0.00181919 43611.2 0; : 438 Minimum Test error found - save the configuration ; : 438 | 716.113 386.163 0.0201299 0.00181919 43690.3 0; : 439 Minimum Test error found - save the configuration ; : 439 | 709.435 381.839 0.02057 0.00189456 42836.9 0; : 440 Minimum Test error found - save the configuration ; : 440 | 701.662 378.014 0.0205169 0.00184853 42853.2 0; : 441 Minimu,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:59838,configurat,configuration,59838,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,tion ; : 427 | 799.623 433.9 0.0201527 0.00181997 43637.7 0; : 428 Minimum Test error found - save the configuration ; : 428 | 791.762 429.014 0.0201231 0.00181389 43693.9 0; : 429 Minimum Test error found - save the configuration ; : 429 | 783.663 424.486 0.0202036 0.00181812 43512.5 0; : 430 Minimum Test error found - save the configuration ; : 430 | 776.025 420.47 0.020126 0.00182055 43702.9 0; : 431 Minimum Test error found - save the configuration ; : 431 | 768.212 415.652 0.0201366 0.00182081 43678.1 0; : 432 Minimum Test error found - save the configuration ; : 432 | 761.012 411.218 0.02015 0.00183569 43681.6 0; : 433 Minimum Test error found - save the configuration ; : 433 | 753.136 407.298 0.0201476 0.00182106 43652.7 0; : 434 Minimum Test error found - save the configuration ; : 434 | 745.345 402.751 0.020133 0.00182099 43687.1 0; : 435 Minimum Test error found - save the configuration ; : 435 | 738.037 398.378 0.0201447 0.00181389 43642.5 0; : 436 Minimum Test error found - save the configuration ; : 436 | 730.692 394.216 0.0201655 0.00182279 43614.1 0; : 437 Minimum Test error found - save the configuration ; : 437 | 723.856 389.773 0.0201631 0.00181919 43611.2 0; : 438 Minimum Test error found - save the configuration ; : 438 | 716.113 386.163 0.0201299 0.00181919 43690.3 0; : 439 Minimum Test error found - save the configuration ; : 439 | 709.435 381.839 0.02057 0.00189456 42836.9 0; : 440 Minimum Test error found - save the configuration ; : 440 | 701.662 378.014 0.0205169 0.00184853 42853.2 0; : 441 Minimum Test error found - save the configuration ; : 441 | 695.167 373.877 0.0206789 0.00187467 42543.7 0; : 442 Minimum Test error found - save the configuration ; : 442 | 687.861 370.419 0.0206937 0.00187678 42514.9 0; : 443 Minimum Test error found - save the configuration ; : 443 | 681.656 366.359 0.0201552 0.00181904 43629.7 0; : 444 Minimum Test error found - save the configuration ; : 444 | 674.01 362.924 0.0201329 0.0018218 43689.4 0; : 445 Minim,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:60291,configurat,configuration,60291,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,tion ; : 449 | 641 344.618 0.0201064 0.00181317 43732 0; : 450 Minimum Test error found - save the configuration ; : 450 | 634.906 340.694 0.0201841 0.00185283 43641.2 0; : 451 Minimum Test error found - save the configuration ; : 451 | 628.321 336.668 0.0202054 0.00184722 43577.2 0; : 452 Minimum Test error found - save the configuration ; : 452 | 621.73 333.236 0.0201956 0.00184565 43596.7 0; : 453 Minimum Test error found - save the configuration ; : 453 | 615.499 330.282 0.0202258 0.00184415 43521.7 0; : 454 Minimum Test error found - save the configuration ; : 454 | 608.831 326.391 0.0201257 0.00180567 43668.1 0; : 455 Minimum Test error found - save the configuration ; : 455 | 602.478 323.085 0.0201467 0.00181706 43645.1 0; : 456 Minimum Test error found - save the configuration ; : 456 | 596.625 319.828 0.0201415 0.00181382 43649.8 0; : 457 Minimum Test error found - save the configuration ; : 457 | 590.662 316.621 0.0201112 0.00181253 43718.9 0; : 458 Minimum Test error found - save the configuration ; : 458 | 584.171 313.672 0.0201179 0.00180966 43696.3 0; : 459 Minimum Test error found - save the configuration ; : 459 | 578.684 310.243 0.020117 0.00181196 43703.7 0; : 460 Minimum Test error found - save the configuration ; : 460 | 572.668 306.849 0.0201178 0.00181375 43706.2 0; : 461 Minimum Test error found - save the configuration ; : 461 | 566.644 303.945 0.0201078 0.00181369 43730 0; : 462 Minimum Test error found - save the configuration ; : 462 | 560.843 301.023 0.0201248 0.00180535 43669.5 0; : 463 Minimum Test error found - save the configuration ; : 463 | 555.13 298.085 0.0201287 0.00181104 43673.6 0; : 464 Minimum Test error found - save the configuration ; : 464 | 549.755 294.833 0.0201145 0.00181462 43716.1 0; : 465 Minimum Test error found - save the configuration ; : 465 | 543.742 292.285 0.0201004 0.00181141 43742.2 0; : 466 Minimum Test error found - save the configuration ; : 466 | 538.058 289.638 0.0201135 0.00181083 43709.6 0; : 467 Minim,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:62784,configurat,configuration,62784,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,tion ; : 461 | 566.644 303.945 0.0201078 0.00181369 43730 0; : 462 Minimum Test error found - save the configuration ; : 462 | 560.843 301.023 0.0201248 0.00180535 43669.5 0; : 463 Minimum Test error found - save the configuration ; : 463 | 555.13 298.085 0.0201287 0.00181104 43673.6 0; : 464 Minimum Test error found - save the configuration ; : 464 | 549.755 294.833 0.0201145 0.00181462 43716.1 0; : 465 Minimum Test error found - save the configuration ; : 465 | 543.742 292.285 0.0201004 0.00181141 43742.2 0; : 466 Minimum Test error found - save the configuration ; : 466 | 538.058 289.638 0.0201135 0.00181083 43709.6 0; : 467 Minimum Test error found - save the configuration ; : 467 | 532.551 286.201 0.0203237 0.00183254 43264 0; : 468 Minimum Test error found - save the configuration ; : 468 | 527.38 283.018 0.0206168 0.00187635 42688.4 0; : 469 Minimum Test error found - save the configuration ; : 469 | 521.821 280.136 0.020536 0.00184948 42811.7 0; : 470 Minimum Test error found - save the configuration ; : 470 | 516.179 277.682 0.0201344 0.00181863 43678.3 0; : 471 Minimum Test error found - save the configuration ; : 471 | 510.8 274.83 0.02012 0.00181888 43713.2 0; : 472 Minimum Test error found - save the configuration ; : 472 | 505.541 272.006 0.0201116 0.0018163 43727.1 0; : 473 Minimum Test error found - save the configuration ; : 473 | 500.494 269.395 0.0201254 0.00181777 43697.5 0; : 474 Minimum Test error found - save the configuration ; : 474 | 495.466 266.483 0.0201058 0.00181722 43743.1 0; : 475 Minimum Test error found - save the configuration ; : 475 | 490.186 263.742 0.0201189 0.00181234 43700.1 0; : 476 Minimum Test error found - save the configuration ; : 476 | 485.098 261.173 0.0201246 0.00180486 43668.7 0; : 477 Minimum Test error found - save the configuration ; : 477 | 480.019 258.868 0.0201244 0.00181187 43685.9 0; : 478 Minimum Test error found - save the configuration ; : 478 | 475.092 256.56 0.0201327 0.00181261 43667.9 0; : 479 Minimum ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:64144,configurat,configuration,64144,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,tion ; : 469 | 521.821 280.136 0.020536 0.00184948 42811.7 0; : 470 Minimum Test error found - save the configuration ; : 470 | 516.179 277.682 0.0201344 0.00181863 43678.3 0; : 471 Minimum Test error found - save the configuration ; : 471 | 510.8 274.83 0.02012 0.00181888 43713.2 0; : 472 Minimum Test error found - save the configuration ; : 472 | 505.541 272.006 0.0201116 0.0018163 43727.1 0; : 473 Minimum Test error found - save the configuration ; : 473 | 500.494 269.395 0.0201254 0.00181777 43697.5 0; : 474 Minimum Test error found - save the configuration ; : 474 | 495.466 266.483 0.0201058 0.00181722 43743.1 0; : 475 Minimum Test error found - save the configuration ; : 475 | 490.186 263.742 0.0201189 0.00181234 43700.1 0; : 476 Minimum Test error found - save the configuration ; : 476 | 485.098 261.173 0.0201246 0.00180486 43668.7 0; : 477 Minimum Test error found - save the configuration ; : 477 | 480.019 258.868 0.0201244 0.00181187 43685.9 0; : 478 Minimum Test error found - save the configuration ; : 478 | 475.092 256.56 0.0201327 0.00181261 43667.9 0; : 479 Minimum Test error found - save the configuration ; : 479 | 470.459 253.447 0.0201134 0.00181351 43716.2 0; : 480 Minimum Test error found - save the configuration ; : 480 | 465.037 251.028 0.0201358 0.00183269 43708.4 0; : 481 Minimum Test error found - save the configuration ; : 481 | 460.485 248.77 0.0203198 0.00182444 43254.2 0; : 482 Minimum Test error found - save the configuration ; : 482 | 455.372 247.229 0.0201175 0.00180448 43684.8 0; : 483 Minimum Test error found - save the configuration ; : 483 | 451.061 243.731 0.0201278 0.0018159 43687.5 0; : 484 Minimum Test error found - save the configuration ; : 484 | 445.909 241.583 0.0201078 0.00181153 43724.8 0; : 485 Minimum Test error found - save the configuration ; : 485 | 441.645 238.817 0.0201252 0.00182817 43723 0; : 486 Minimum Test error found - save the configuration ; : 486 | 436.721 236.872 0.0201168 0.00181086 43701.6 0; : 487 Minimu,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:65050,configurat,configuration,65050,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,tion ; : 470 | 516.179 277.682 0.0201344 0.00181863 43678.3 0; : 471 Minimum Test error found - save the configuration ; : 471 | 510.8 274.83 0.02012 0.00181888 43713.2 0; : 472 Minimum Test error found - save the configuration ; : 472 | 505.541 272.006 0.0201116 0.0018163 43727.1 0; : 473 Minimum Test error found - save the configuration ; : 473 | 500.494 269.395 0.0201254 0.00181777 43697.5 0; : 474 Minimum Test error found - save the configuration ; : 474 | 495.466 266.483 0.0201058 0.00181722 43743.1 0; : 475 Minimum Test error found - save the configuration ; : 475 | 490.186 263.742 0.0201189 0.00181234 43700.1 0; : 476 Minimum Test error found - save the configuration ; : 476 | 485.098 261.173 0.0201246 0.00180486 43668.7 0; : 477 Minimum Test error found - save the configuration ; : 477 | 480.019 258.868 0.0201244 0.00181187 43685.9 0; : 478 Minimum Test error found - save the configuration ; : 478 | 475.092 256.56 0.0201327 0.00181261 43667.9 0; : 479 Minimum Test error found - save the configuration ; : 479 | 470.459 253.447 0.0201134 0.00181351 43716.2 0; : 480 Minimum Test error found - save the configuration ; : 480 | 465.037 251.028 0.0201358 0.00183269 43708.4 0; : 481 Minimum Test error found - save the configuration ; : 481 | 460.485 248.77 0.0203198 0.00182444 43254.2 0; : 482 Minimum Test error found - save the configuration ; : 482 | 455.372 247.229 0.0201175 0.00180448 43684.8 0; : 483 Minimum Test error found - save the configuration ; : 483 | 451.061 243.731 0.0201278 0.0018159 43687.5 0; : 484 Minimum Test error found - save the configuration ; : 484 | 445.909 241.583 0.0201078 0.00181153 43724.8 0; : 485 Minimum Test error found - save the configuration ; : 485 | 441.645 238.817 0.0201252 0.00182817 43723 0; : 486 Minimum Test error found - save the configuration ; : 486 | 436.721 236.872 0.0201168 0.00181086 43701.6 0; : 487 Minimum Test error found - save the configuration ; : 487 | 432.036 234.838 0.0201083 0.00181291 43726.9 0; : 488 Minim,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:65163,configurat,configuration,65163,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,tion ; : 471 | 510.8 274.83 0.02012 0.00181888 43713.2 0; : 472 Minimum Test error found - save the configuration ; : 472 | 505.541 272.006 0.0201116 0.0018163 43727.1 0; : 473 Minimum Test error found - save the configuration ; : 473 | 500.494 269.395 0.0201254 0.00181777 43697.5 0; : 474 Minimum Test error found - save the configuration ; : 474 | 495.466 266.483 0.0201058 0.00181722 43743.1 0; : 475 Minimum Test error found - save the configuration ; : 475 | 490.186 263.742 0.0201189 0.00181234 43700.1 0; : 476 Minimum Test error found - save the configuration ; : 476 | 485.098 261.173 0.0201246 0.00180486 43668.7 0; : 477 Minimum Test error found - save the configuration ; : 477 | 480.019 258.868 0.0201244 0.00181187 43685.9 0; : 478 Minimum Test error found - save the configuration ; : 478 | 475.092 256.56 0.0201327 0.00181261 43667.9 0; : 479 Minimum Test error found - save the configuration ; : 479 | 470.459 253.447 0.0201134 0.00181351 43716.2 0; : 480 Minimum Test error found - save the configuration ; : 480 | 465.037 251.028 0.0201358 0.00183269 43708.4 0; : 481 Minimum Test error found - save the configuration ; : 481 | 460.485 248.77 0.0203198 0.00182444 43254.2 0; : 482 Minimum Test error found - save the configuration ; : 482 | 455.372 247.229 0.0201175 0.00180448 43684.8 0; : 483 Minimum Test error found - save the configuration ; : 483 | 451.061 243.731 0.0201278 0.0018159 43687.5 0; : 484 Minimum Test error found - save the configuration ; : 484 | 445.909 241.583 0.0201078 0.00181153 43724.8 0; : 485 Minimum Test error found - save the configuration ; : 485 | 441.645 238.817 0.0201252 0.00182817 43723 0; : 486 Minimum Test error found - save the configuration ; : 486 | 436.721 236.872 0.0201168 0.00181086 43701.6 0; : 487 Minimum Test error found - save the configuration ; : 487 | 432.036 234.838 0.0201083 0.00181291 43726.9 0; : 488 Minimum Test error found - save the configuration ; : 488 | 427.772 232.082 0.0201422 0.00181171 43643.2 0; : 489 Minim,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:65277,configurat,configuration,65277,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,tion ; : 493 | 405.856 221.079 0.0201212 0.00183714 43754 0; : 494 Minimum Test error found - save the configuration ; : 494 | 401.45 219.099 0.0201193 0.00182499 43729.5 0; : 495 Minimum Test error found - save the configuration ; : 495 | 397.399 217.296 0.020126 0.00182371 43710.3 0; : 496 Minimum Test error found - save the configuration ; : 496 | 393.093 215.198 0.0201176 0.0018173 43715.1 0; : 497 Minimum Test error found - save the configuration ; : 497 | 389.026 212.813 0.0201623 0.00182183 43619.4 0; : 498 Minimum Test error found - save the configuration ; : 498 | 384.957 210.725 0.0201097 0.00181178 43720.7 0; : 499 Minimum Test error found - save the configuration ; : 499 | 380.678 208.901 0.0201236 0.00180512 43671.8 0; : 500 Minimum Test error found - save the configuration ; : 500 | 376.893 206.954 0.0201138 0.00180496 43694.8 0; : 501 Minimum Test error found - save the configuration ; : 501 | 373.069 204.754 0.020131 0.0018136 43674.2 0; : 502 Minimum Test error found - save the configuration ; : 502 | 368.81 202.934 0.0201114 0.00181117 43715.3 0; : 503 Minimum Test error found - save the configuration ; : 503 | 365.178 200.54 0.0201169 0.00181058 43700.7 0; : 504 Minimum Test error found - save the configuration ; : 504 | 361.148 198.738 0.0201232 0.00180952 43683.3 0; : 505 Minimum Test error found - save the configuration ; : 505 | 357.509 197.423 0.0201176 0.00181006 43697.8 0; : 506 Minimum Test error found - save the configuration ; : 506 | 353.597 195.555 0.0201061 0.00181022 43725.7 0; : 507 Minimum Test error found - save the configuration ; : 507 | 349.908 193.134 0.0201154 0.00180497 43690.9 0; : 508 Minimum Test error found - save the configuration ; : 508 | 346.368 191.635 0.0201239 0.00180513 43671.2 0; : 509 Minimum Test error found - save the configuration ; : 509 | 342.684 189.987 0.020479 0.00183624 42912.1 0; : 510 Minimum Test error found - save the configuration ; : 510 | 338.936 187.68 0.0201257 0.00181109 43680.9 0; : 511 Minim,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:67774,configurat,configuration,67774,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,tion ; : 510 | 338.936 187.68 0.0201257 0.00181109 43680.9 0; : 511 Minimum Test error found - save the configuration ; : 511 | 335.178 185.581 0.0201106 0.0018111 43716.9 0; : 512 Minimum Test error found - save the configuration ; : 512 | 331.755 184.666 0.0201452 0.00182488 43667.3 0; : 513 Minimum Test error found - save the configuration ; : 513 | 328.659 182.798 0.0201844 0.00187405 43691.2 0; : 514 Minimum Test error found - save the configuration ; : 514 | 324.836 180.622 0.0201448 0.00183693 43697 0; : 515 Minimum Test error found - save the configuration ; : 515 | 321.45 179.12 0.020437 0.00183763 43012.3 0; : 516 Minimum Test error found - save the configuration ; : 516 | 317.804 177.214 0.0201516 0.00181548 43629.8 0; : 517 Minimum Test error found - save the configuration ; : 517 | 314.454 175.878 0.0201248 0.00181905 43702.1 0; : 518 Minimum Test error found - save the configuration ; : 518 | 311.376 174.038 0.0209489 0.00256909 43525.9 0; : 519 Minimum Test error found - save the configuration ; : 519 | 308.194 172.777 0.0312717 0.00294953 28246.5 0; : 520 Minimum Test error found - save the configuration ; : 520 | 304.608 170.454 0.0241719 0.00185008 35839.4 0; : 521 Minimum Test error found - save the configuration ; : 521 | 301.091 169.057 0.0201646 0.00182965 43632.5 0; : 522 Minimum Test error found - save the configuration ; : 522 | 297.757 167.472 0.0204481 0.00183794 42987.2 0; : 523 Minimum Test error found - save the configuration ; : 523 | 294.843 165.895 0.0201197 0.00181783 43711.4 0; : 524 Minimum Test error found - save the configuration ; : 524 | 291.692 164.911 0.0201636 0.00183144 43639.1 0; : 525 Minimum Test error found - save the configuration ; : 525 | 288.615 162.74 0.0201168 0.0018126 43705.7 0; : 526 Minimum Test error found - save the configuration ; : 526 | 285.409 161.045 0.0201121 0.00181244 43716.6 0; : 527 Minimum Test error found - save the configuration ; : 527 | 282.171 159.772 0.0201445 0.00181159 43637.4 0; : 528 Min,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:69702,configurat,configuration,69702,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,tion ; : 525 | 288.615 162.74 0.0201168 0.0018126 43705.7 0; : 526 Minimum Test error found - save the configuration ; : 526 | 285.409 161.045 0.0201121 0.00181244 43716.6 0; : 527 Minimum Test error found - save the configuration ; : 527 | 282.171 159.772 0.0201445 0.00181159 43637.4 0; : 528 Minimum Test error found - save the configuration ; : 528 | 279.108 159.481 0.0201013 0.00180683 43729.2 0; : 529 Minimum Test error found - save the configuration ; : 529 | 276.719 156.675 0.0201429 0.0018175 43655.3 0; : 530 Minimum Test error found - save the configuration ; : 530 | 273.651 155.435 0.0201142 0.00181452 43716.7 0; : 531 Minimum Test error found - save the configuration ; : 531 | 270.462 154.476 0.0201154 0.00181212 43707.9 0; : 532 Minimum Test error found - save the configuration ; : 532 | 267.569 152.332 0.02019 0.00182583 43563.1 0; : 533 Minimum Test error found - save the configuration ; : 533 | 264.8 151.073 0.0201226 0.00181364 43694.6 0; : 534 Minimum Test error found - save the configuration ; : 534 | 261.885 150.199 0.0201859 0.00182138 43562.3 0; : 535 Minimum Test error found - save the configuration ; : 535 | 259.213 147.905 0.0201317 0.00182788 43706.7 0; : 536 Minimum Test error found - save the configuration ; : 536 | 255.833 146.796 0.0201182 0.0018174 43713.8 0; : 537 Minimum Test error found - save the configuration ; : 537 | 253.362 145.429 0.0201791 0.00183234 43604.5 0; : 538 Minimum Test error found - save the configuration ; : 538 | 250.467 143.959 0.0202125 0.00183528 43532.1 0; : 539 Minimum Test error found - save the configuration ; : 539 | 247.858 142.417 0.0201308 0.0018179 43685.2 0; : 540 Minimum Test error found - save the configuration ; : 540 | 245.006 140.909 0.0201459 0.00181688 43646.7 0; : 541 Minimum Test error found - save the configuration ; : 541 | 242.398 140.629 0.020154 0.00184094 43684.7 0; : 542 Minimum Test error found - save the configuration ; : 542 | 239.53 138.758 0.0201353 0.00182676 43695.4 0; : 543 Minim,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:71405,configurat,configuration,71405,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,tion ; : 539 | 247.858 142.417 0.0201308 0.0018179 43685.2 0; : 540 Minimum Test error found - save the configuration ; : 540 | 245.006 140.909 0.0201459 0.00181688 43646.7 0; : 541 Minimum Test error found - save the configuration ; : 541 | 242.398 140.629 0.020154 0.00184094 43684.7 0; : 542 Minimum Test error found - save the configuration ; : 542 | 239.53 138.758 0.0201353 0.00182676 43695.4 0; : 543 Minimum Test error found - save the configuration ; : 543 | 237.23 137.09 0.0201583 0.00184429 43682.4 0; : 544 Minimum Test error found - save the configuration ; : 544 | 234.272 136.088 0.0201297 0.00183112 43719.2 0; : 545 Minimum Test error found - save the configuration ; : 545 | 231.858 134.661 0.021628 0.00191081 40573.6 0; : 546 Minimum Test error found - save the configuration ; : 546 | 229.488 134.189 0.0201396 0.00181917 43667.2 0; : 547 Minimum Test error found - save the configuration ; : 547 | 227.221 132.01 0.0201209 0.00181373 43698.8 0; : 548 Minimum Test error found - save the configuration ; : 548 | 224.347 131.158 0.0201557 0.00181812 43626.4 0; : 549 Minimum Test error found - save the configuration ; : 549 | 221.837 129.708 0.0203141 0.00181657 43249 0; : 550 Minimum Test error found - save the configuration ; : 550 | 219.851 128.33 0.0203838 0.00182729 43111.5 0; : 551 Minimum Test error found - save the configuration ; : 551 | 216.872 126.913 0.0201299 0.00182067 43693.7 0; : 552 Minimum Test error found - save the configuration ; : 552 | 214.625 126.196 0.0204788 0.00185067 42945.7 0; : 553 Minimum Test error found - save the configuration ; : 553 | 212.064 124.627 0.0201455 0.0018227 43661.6 0; : 554 Minimum Test error found - save the configuration ; : 554 | 209.68 123.549 0.0201264 0.00183279 43731.1 0; : 555 Minimum Test error found - save the configuration ; : 555 | 207.499 123.145 0.0201096 0.00181963 43739.9 0; : 556 Minimum Test error found - save the configuration ; : 556 | 205.232 121.223 0.0203039 0.0018145 43268 0; : 557 Minimum T,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:72993,configurat,configuration,72993,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,tion ; : 543 | 237.23 137.09 0.0201583 0.00184429 43682.4 0; : 544 Minimum Test error found - save the configuration ; : 544 | 234.272 136.088 0.0201297 0.00183112 43719.2 0; : 545 Minimum Test error found - save the configuration ; : 545 | 231.858 134.661 0.021628 0.00191081 40573.6 0; : 546 Minimum Test error found - save the configuration ; : 546 | 229.488 134.189 0.0201396 0.00181917 43667.2 0; : 547 Minimum Test error found - save the configuration ; : 547 | 227.221 132.01 0.0201209 0.00181373 43698.8 0; : 548 Minimum Test error found - save the configuration ; : 548 | 224.347 131.158 0.0201557 0.00181812 43626.4 0; : 549 Minimum Test error found - save the configuration ; : 549 | 221.837 129.708 0.0203141 0.00181657 43249 0; : 550 Minimum Test error found - save the configuration ; : 550 | 219.851 128.33 0.0203838 0.00182729 43111.5 0; : 551 Minimum Test error found - save the configuration ; : 551 | 216.872 126.913 0.0201299 0.00182067 43693.7 0; : 552 Minimum Test error found - save the configuration ; : 552 | 214.625 126.196 0.0204788 0.00185067 42945.7 0; : 553 Minimum Test error found - save the configuration ; : 553 | 212.064 124.627 0.0201455 0.0018227 43661.6 0; : 554 Minimum Test error found - save the configuration ; : 554 | 209.68 123.549 0.0201264 0.00183279 43731.1 0; : 555 Minimum Test error found - save the configuration ; : 555 | 207.499 123.145 0.0201096 0.00181963 43739.9 0; : 556 Minimum Test error found - save the configuration ; : 556 | 205.232 121.223 0.0203039 0.0018145 43268 0; : 557 Minimum Test error found - save the configuration ; : 557 | 202.969 119.762 0.0201211 0.00181089 43691.5 0; : 558 Minimum Test error found - save the configuration ; : 558 | 200.33 118.775 0.0201089 0.0018057 43708.3 0; : 559 Minimum Test error found - save the configuration ; : 559 | 197.988 117.386 0.0202964 0.00181486 43286.3 0; : 560 Minimum Test error found - save the configuration ; : 560 | 195.761 116.51 0.020118 0.00181561 43710.2 0; : 561 Minimum Te,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:73446,configurat,configuration,73446,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,tion ; : 551 | 216.872 126.913 0.0201299 0.00182067 43693.7 0; : 552 Minimum Test error found - save the configuration ; : 552 | 214.625 126.196 0.0204788 0.00185067 42945.7 0; : 553 Minimum Test error found - save the configuration ; : 553 | 212.064 124.627 0.0201455 0.0018227 43661.6 0; : 554 Minimum Test error found - save the configuration ; : 554 | 209.68 123.549 0.0201264 0.00183279 43731.1 0; : 555 Minimum Test error found - save the configuration ; : 555 | 207.499 123.145 0.0201096 0.00181963 43739.9 0; : 556 Minimum Test error found - save the configuration ; : 556 | 205.232 121.223 0.0203039 0.0018145 43268 0; : 557 Minimum Test error found - save the configuration ; : 557 | 202.969 119.762 0.0201211 0.00181089 43691.5 0; : 558 Minimum Test error found - save the configuration ; : 558 | 200.33 118.775 0.0201089 0.0018057 43708.3 0; : 559 Minimum Test error found - save the configuration ; : 559 | 197.988 117.386 0.0202964 0.00181486 43286.3 0; : 560 Minimum Test error found - save the configuration ; : 560 | 195.761 116.51 0.020118 0.00181561 43710.2 0; : 561 Minimum Test error found - save the configuration ; : 561 | 193.461 115.526 0.0203798 0.00182877 43124.4 0; : 562 Minimum Test error found - save the configuration ; : 562 | 191.212 113.975 0.0203924 0.00182053 43075.9 0; : 563 Minimum Test error found - save the configuration ; : 563 | 188.987 113.393 0.0203794 0.00207901 43715 0; : 564 Minimum Test error found - save the configuration ; : 564 | 186.85 112.339 0.0201831 0.00181479 43553.4 0; : 565 Minimum Test error found - save the configuration ; : 565 | 185.071 111.259 0.0203048 0.00182605 43292.9 0; : 566 Minimum Test error found - save the configuration ; : 566 | 182.616 110.112 0.0201778 0.00183613 43616.5 0; : 567 Minimum Test error found - save the configuration ; : 567 | 180.473 109.26 0.0202561 0.00182678 43409.1 0; : 568 Minimum Test error found - save the configuration ; : 568 | 178.451 108.059 0.0201373 0.00182611 43689.1 0; : 569 Minimum,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:74351,configurat,configuration,74351,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,tion ; : 557 | 202.969 119.762 0.0201211 0.00181089 43691.5 0; : 558 Minimum Test error found - save the configuration ; : 558 | 200.33 118.775 0.0201089 0.0018057 43708.3 0; : 559 Minimum Test error found - save the configuration ; : 559 | 197.988 117.386 0.0202964 0.00181486 43286.3 0; : 560 Minimum Test error found - save the configuration ; : 560 | 195.761 116.51 0.020118 0.00181561 43710.2 0; : 561 Minimum Test error found - save the configuration ; : 561 | 193.461 115.526 0.0203798 0.00182877 43124.4 0; : 562 Minimum Test error found - save the configuration ; : 562 | 191.212 113.975 0.0203924 0.00182053 43075.9 0; : 563 Minimum Test error found - save the configuration ; : 563 | 188.987 113.393 0.0203794 0.00207901 43715 0; : 564 Minimum Test error found - save the configuration ; : 564 | 186.85 112.339 0.0201831 0.00181479 43553.4 0; : 565 Minimum Test error found - save the configuration ; : 565 | 185.071 111.259 0.0203048 0.00182605 43292.9 0; : 566 Minimum Test error found - save the configuration ; : 566 | 182.616 110.112 0.0201778 0.00183613 43616.5 0; : 567 Minimum Test error found - save the configuration ; : 567 | 180.473 109.26 0.0202561 0.00182678 43409.1 0; : 568 Minimum Test error found - save the configuration ; : 568 | 178.451 108.059 0.0201373 0.00182611 43689.1 0; : 569 Minimum Test error found - save the configuration ; : 569 | 176.264 106.78 0.0201111 0.00181323 43721.1 0; : 570 Minimum Test error found - save the configuration ; : 570 | 174.355 105.885 0.0201445 0.00181905 43655.2 0; : 571 | 172.647 106.784 0.0200848 0.0017791 43702.2 1; : 572 Minimum Test error found - save the configuration ; : 572 | 170.589 104.683 0.020165 0.00182763 43626.8 0; : 573 Minimum Test error found - save the configuration ; : 573 | 168.468 102.528 0.0201413 0.00182619 43679.9 0; : 574 Minimum Test error found - save the configuration ; : 574 | 166.622 102.085 0.0201407 0.00181861 43663.2 0; : 575 Minimum Test error found - save the configuration ; : 575 | 164,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:75030,configurat,configuration,75030,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,tion ; : 558 | 200.33 118.775 0.0201089 0.0018057 43708.3 0; : 559 Minimum Test error found - save the configuration ; : 559 | 197.988 117.386 0.0202964 0.00181486 43286.3 0; : 560 Minimum Test error found - save the configuration ; : 560 | 195.761 116.51 0.020118 0.00181561 43710.2 0; : 561 Minimum Test error found - save the configuration ; : 561 | 193.461 115.526 0.0203798 0.00182877 43124.4 0; : 562 Minimum Test error found - save the configuration ; : 562 | 191.212 113.975 0.0203924 0.00182053 43075.9 0; : 563 Minimum Test error found - save the configuration ; : 563 | 188.987 113.393 0.0203794 0.00207901 43715 0; : 564 Minimum Test error found - save the configuration ; : 564 | 186.85 112.339 0.0201831 0.00181479 43553.4 0; : 565 Minimum Test error found - save the configuration ; : 565 | 185.071 111.259 0.0203048 0.00182605 43292.9 0; : 566 Minimum Test error found - save the configuration ; : 566 | 182.616 110.112 0.0201778 0.00183613 43616.5 0; : 567 Minimum Test error found - save the configuration ; : 567 | 180.473 109.26 0.0202561 0.00182678 43409.1 0; : 568 Minimum Test error found - save the configuration ; : 568 | 178.451 108.059 0.0201373 0.00182611 43689.1 0; : 569 Minimum Test error found - save the configuration ; : 569 | 176.264 106.78 0.0201111 0.00181323 43721.1 0; : 570 Minimum Test error found - save the configuration ; : 570 | 174.355 105.885 0.0201445 0.00181905 43655.2 0; : 571 | 172.647 106.784 0.0200848 0.0017791 43702.2 1; : 572 Minimum Test error found - save the configuration ; : 572 | 170.589 104.683 0.020165 0.00182763 43626.8 0; : 573 Minimum Test error found - save the configuration ; : 573 | 168.468 102.528 0.0201413 0.00182619 43679.9 0; : 574 Minimum Test error found - save the configuration ; : 574 | 166.622 102.085 0.0201407 0.00181861 43663.2 0; : 575 Minimum Test error found - save the configuration ; : 575 | 164.293 100.588 0.0203765 0.00182671 43127.2 0; : 576 Minimum Test error found - save the configuration ; : 576 | 162,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:75144,configurat,configuration,75144,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,tion ; : 580 | 154.635 96.1367 0.0201142 0.00181294 43712.9 0; : 581 Minimum Test error found - save the configuration ; : 581 | 153.026 95.3539 0.0201307 0.0018172 43683.7 0; : 582 Minimum Test error found - save the configuration ; : 582 | 151.197 94.0449 0.020143 0.00182303 43668.3 0; : 583 Minimum Test error found - save the configuration ; : 583 | 149.229 93.6244 0.0201231 0.00181874 43705.4 0; : 584 Minimum Test error found - save the configuration ; : 584 | 147.504 92.2301 0.0202996 0.00182281 43297.5 0; : 585 Minimum Test error found - save the configuration ; : 585 | 145.457 91.5459 0.020121 0.00181177 43693.8 0; : 586 Minimum Test error found - save the configuration ; : 586 | 143.954 90.9958 0.02013 0.00181326 43675.8 0; : 587 Minimum Test error found - save the configuration ; : 587 | 142.242 89.8853 0.0201892 0.0018256 43564.4 0; : 588 Minimum Test error found - save the configuration ; : 588 | 140.475 88.3998 0.0202535 0.0018437 43455.2 0; : 589 Minimum Test error found - save the configuration ; : 589 | 138.544 87.8285 0.0201999 0.00182139 43529 0; : 590 Minimum Test error found - save the configuration ; : 590 | 137.153 86.6949 0.0201619 0.00182129 43619.1 0; : 591 Minimum Test error found - save the configuration ; : 591 | 135.294 85.8941 0.0201222 0.00182247 43716.6 0; : 592 Minimum Test error found - save the configuration ; : 592 | 133.776 84.7442 0.0201242 0.00181719 43699.2 0; : 593 Minimum Test error found - save the configuration ; : 593 | 132.08 84.4617 0.0201178 0.00181703 43714.1 0; : 594 Minimum Test error found - save the configuration ; : 594 | 130.385 83.3494 0.0201184 0.00182079 43721.6 0; : 595 Minimum Test error found - save the configuration ; : 595 | 128.821 82.7241 0.0201197 0.00182054 43718 0; : 596 Minimum Test error found - save the configuration ; : 596 | 127.285 81.8772 0.0201421 0.00182102 43665.5 0; : 597 Minimum Test error found - save the configuration ; : 597 | 125.567 80.7585 0.0201182 0.00182506 43732.1 0; : 598 Minimu,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:77580,configurat,configuration,77580,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,tion ; : 583 | 149.229 93.6244 0.0201231 0.00181874 43705.4 0; : 584 Minimum Test error found - save the configuration ; : 584 | 147.504 92.2301 0.0202996 0.00182281 43297.5 0; : 585 Minimum Test error found - save the configuration ; : 585 | 145.457 91.5459 0.020121 0.00181177 43693.8 0; : 586 Minimum Test error found - save the configuration ; : 586 | 143.954 90.9958 0.02013 0.00181326 43675.8 0; : 587 Minimum Test error found - save the configuration ; : 587 | 142.242 89.8853 0.0201892 0.0018256 43564.4 0; : 588 Minimum Test error found - save the configuration ; : 588 | 140.475 88.3998 0.0202535 0.0018437 43455.2 0; : 589 Minimum Test error found - save the configuration ; : 589 | 138.544 87.8285 0.0201999 0.00182139 43529 0; : 590 Minimum Test error found - save the configuration ; : 590 | 137.153 86.6949 0.0201619 0.00182129 43619.1 0; : 591 Minimum Test error found - save the configuration ; : 591 | 135.294 85.8941 0.0201222 0.00182247 43716.6 0; : 592 Minimum Test error found - save the configuration ; : 592 | 133.776 84.7442 0.0201242 0.00181719 43699.2 0; : 593 Minimum Test error found - save the configuration ; : 593 | 132.08 84.4617 0.0201178 0.00181703 43714.1 0; : 594 Minimum Test error found - save the configuration ; : 594 | 130.385 83.3494 0.0201184 0.00182079 43721.6 0; : 595 Minimum Test error found - save the configuration ; : 595 | 128.821 82.7241 0.0201197 0.00182054 43718 0; : 596 Minimum Test error found - save the configuration ; : 596 | 127.285 81.8772 0.0201421 0.00182102 43665.5 0; : 597 Minimum Test error found - save the configuration ; : 597 | 125.567 80.7585 0.0201182 0.00182506 43732.1 0; : 598 Minimum Test error found - save the configuration ; : 598 | 124.213 80.6209 0.0201133 0.0018121 43713 0; : 599 Minimum Test error found - save the configuration ; : 599 | 122.94 79.487 0.0201252 0.00180702 43672.5 0; : 600 Minimum Test error found - save the configuration ; : 600 | 121.268 78.716 0.0201262 0.0018137 43686.1 0; : 601 Minimum Tes,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:77920,configurat,configuration,77920,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,tion ; : 584 | 147.504 92.2301 0.0202996 0.00182281 43297.5 0; : 585 Minimum Test error found - save the configuration ; : 585 | 145.457 91.5459 0.020121 0.00181177 43693.8 0; : 586 Minimum Test error found - save the configuration ; : 586 | 143.954 90.9958 0.02013 0.00181326 43675.8 0; : 587 Minimum Test error found - save the configuration ; : 587 | 142.242 89.8853 0.0201892 0.0018256 43564.4 0; : 588 Minimum Test error found - save the configuration ; : 588 | 140.475 88.3998 0.0202535 0.0018437 43455.2 0; : 589 Minimum Test error found - save the configuration ; : 589 | 138.544 87.8285 0.0201999 0.00182139 43529 0; : 590 Minimum Test error found - save the configuration ; : 590 | 137.153 86.6949 0.0201619 0.00182129 43619.1 0; : 591 Minimum Test error found - save the configuration ; : 591 | 135.294 85.8941 0.0201222 0.00182247 43716.6 0; : 592 Minimum Test error found - save the configuration ; : 592 | 133.776 84.7442 0.0201242 0.00181719 43699.2 0; : 593 Minimum Test error found - save the configuration ; : 593 | 132.08 84.4617 0.0201178 0.00181703 43714.1 0; : 594 Minimum Test error found - save the configuration ; : 594 | 130.385 83.3494 0.0201184 0.00182079 43721.6 0; : 595 Minimum Test error found - save the configuration ; : 595 | 128.821 82.7241 0.0201197 0.00182054 43718 0; : 596 Minimum Test error found - save the configuration ; : 596 | 127.285 81.8772 0.0201421 0.00182102 43665.5 0; : 597 Minimum Test error found - save the configuration ; : 597 | 125.567 80.7585 0.0201182 0.00182506 43732.1 0; : 598 Minimum Test error found - save the configuration ; : 598 | 124.213 80.6209 0.0201133 0.0018121 43713 0; : 599 Minimum Test error found - save the configuration ; : 599 | 122.94 79.487 0.0201252 0.00180702 43672.5 0; : 600 Minimum Test error found - save the configuration ; : 600 | 121.268 78.716 0.0201262 0.0018137 43686.1 0; : 601 Minimum Test error found - save the configuration ; : 601 | 119.733 78.5666 0.0201064 0.00181556 43737.8 0; : 602 Minimum Tes,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:78034,configurat,configuration,78034,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,tion ; : 586 | 143.954 90.9958 0.02013 0.00181326 43675.8 0; : 587 Minimum Test error found - save the configuration ; : 587 | 142.242 89.8853 0.0201892 0.0018256 43564.4 0; : 588 Minimum Test error found - save the configuration ; : 588 | 140.475 88.3998 0.0202535 0.0018437 43455.2 0; : 589 Minimum Test error found - save the configuration ; : 589 | 138.544 87.8285 0.0201999 0.00182139 43529 0; : 590 Minimum Test error found - save the configuration ; : 590 | 137.153 86.6949 0.0201619 0.00182129 43619.1 0; : 591 Minimum Test error found - save the configuration ; : 591 | 135.294 85.8941 0.0201222 0.00182247 43716.6 0; : 592 Minimum Test error found - save the configuration ; : 592 | 133.776 84.7442 0.0201242 0.00181719 43699.2 0; : 593 Minimum Test error found - save the configuration ; : 593 | 132.08 84.4617 0.0201178 0.00181703 43714.1 0; : 594 Minimum Test error found - save the configuration ; : 594 | 130.385 83.3494 0.0201184 0.00182079 43721.6 0; : 595 Minimum Test error found - save the configuration ; : 595 | 128.821 82.7241 0.0201197 0.00182054 43718 0; : 596 Minimum Test error found - save the configuration ; : 596 | 127.285 81.8772 0.0201421 0.00182102 43665.5 0; : 597 Minimum Test error found - save the configuration ; : 597 | 125.567 80.7585 0.0201182 0.00182506 43732.1 0; : 598 Minimum Test error found - save the configuration ; : 598 | 124.213 80.6209 0.0201133 0.0018121 43713 0; : 599 Minimum Test error found - save the configuration ; : 599 | 122.94 79.487 0.0201252 0.00180702 43672.5 0; : 600 Minimum Test error found - save the configuration ; : 600 | 121.268 78.716 0.0201262 0.0018137 43686.1 0; : 601 Minimum Test error found - save the configuration ; : 601 | 119.733 78.5666 0.0201064 0.00181556 43737.8 0; : 602 Minimum Test error found - save the configuration ; : 602 | 118.293 77.4143 0.0201212 0.00181376 43698 0; : 603 Minimum Test error found - save the configuration ; : 603 | 116.739 75.9525 0.0201101 0.00180951 43714.3 0; : 604 Minimum Test,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:78261,configurat,configuration,78261,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,tion ; : 600 | 121.268 78.716 0.0201262 0.0018137 43686.1 0; : 601 Minimum Test error found - save the configuration ; : 601 | 119.733 78.5666 0.0201064 0.00181556 43737.8 0; : 602 Minimum Test error found - save the configuration ; : 602 | 118.293 77.4143 0.0201212 0.00181376 43698 0; : 603 Minimum Test error found - save the configuration ; : 603 | 116.739 75.9525 0.0201101 0.00180951 43714.3 0; : 604 Minimum Test error found - save the configuration ; : 604 | 115.282 75.4842 0.0201093 0.00181811 43737 0; : 605 Minimum Test error found - save the configuration ; : 605 | 113.756 74.5415 0.0201179 0.00181105 43699.5 0; : 606 Minimum Test error found - save the configuration ; : 606 | 112.65 73.8117 0.0200987 0.00180944 43741.5 0; : 607 Minimum Test error found - save the configuration ; : 607 | 110.993 73.1273 0.0200934 0.00180455 43742.6 0; : 608 Minimum Test error found - save the configuration ; : 608 | 109.653 72.3206 0.0201066 0.00180567 43713.6 0; : 609 Minimum Test error found - save the configuration ; : 609 | 108.357 71.632 0.0200983 0.00180999 43743.9 0; : 610 Minimum Test error found - save the configuration ; : 610 | 106.875 70.7773 0.0201154 0.00182046 43728 0; : 611 | 105.742 70.7984 0.0200525 0.00175765 43728.1 1; : 612 Minimum Test error found - save the configuration ; : 612 | 104.268 69.338 0.0202166 0.00183521 43522.3 0; : 613 Minimum Test error found - save the configuration ; : 613 | 102.858 68.9009 0.0202348 0.00182917 43464.9 0; : 614 Minimum Test error found - save the configuration ; : 614 | 101.983 68.108 0.0201318 0.00182452 43698.5 0; : 615 Minimum Test error found - save the configuration ; : 615 | 100.329 67.3723 0.0201441 0.00182383 43667.6 0; : 616 Minimum Test error found - save the configuration ; : 616 | 99.0728 66.9343 0.0201375 0.00182665 43689.9 0; : 617 Minimum Test error found - save the configuration ; : 617 | 97.8374 65.9501 0.0201618 0.00184005 43664 0; : 618 Minimum Test error found - save the configuration ; : 618 | 96.373,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:79843,configurat,configuration,79843,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,tion ; : 613 | 102.858 68.9009 0.0202348 0.00182917 43464.9 0; : 614 Minimum Test error found - save the configuration ; : 614 | 101.983 68.108 0.0201318 0.00182452 43698.5 0; : 615 Minimum Test error found - save the configuration ; : 615 | 100.329 67.3723 0.0201441 0.00182383 43667.6 0; : 616 Minimum Test error found - save the configuration ; : 616 | 99.0728 66.9343 0.0201375 0.00182665 43689.9 0; : 617 Minimum Test error found - save the configuration ; : 617 | 97.8374 65.9501 0.0201618 0.00184005 43664 0; : 618 Minimum Test error found - save the configuration ; : 618 | 96.3739 65.107 0.0201565 0.0018204 43629.8 0; : 619 Minimum Test error found - save the configuration ; : 619 | 95.4431 64.9258 0.0202106 0.00183339 43532.2 0; : 620 Minimum Test error found - save the configuration ; : 620 | 94.1902 64.0162 0.020412 0.0018551 43110.6 0; : 621 Minimum Test error found - save the configuration ; : 621 | 92.9103 63.3038 0.0201905 0.00182603 43562.4 0; : 622 Minimum Test error found - save the configuration ; : 622 | 91.6075 63.2578 0.0201995 0.00184553 43587.4 0; : 623 Minimum Test error found - save the configuration ; : 623 | 90.7693 62.0703 0.0202228 0.00181118 43450.9 0; : 624 Minimum Test error found - save the configuration ; : 624 | 89.2125 61.1087 0.0202046 0.00181706 43507.7 0; : 625 | 88.1287 61.343 0.0200847 0.00175821 43652.7 1; : 626 Minimum Test error found - save the configuration ; : 626 | 87.0203 60.0927 0.0202246 0.00182742 43485 0; : 627 | 86.1022 60.6165 0.020286 0.00178227 43234.5 1; : 628 Minimum Test error found - save the configuration ; : 628 | 84.7933 59.0719 0.0201769 0.00183209 43609.1 0; : 629 Minimum Test error found - save the configuration ; : 629 | 83.7285 58.2513 0.0204361 0.0018731 43096.5 0; : 630 Minimum Test error found - save the configuration ; : 630 | 82.639 58.0942 0.0203377 0.00185077 43273.9 0; : 631 Minimum Test error found - save the configuration ; : 631 | 81.6101 57.1049 0.0203504 0.00184845 43238.6 0; : 632 | 80.682,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:81256,configurat,configuration,81256,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,tion ; : 614 | 101.983 68.108 0.0201318 0.00182452 43698.5 0; : 615 Minimum Test error found - save the configuration ; : 615 | 100.329 67.3723 0.0201441 0.00182383 43667.6 0; : 616 Minimum Test error found - save the configuration ; : 616 | 99.0728 66.9343 0.0201375 0.00182665 43689.9 0; : 617 Minimum Test error found - save the configuration ; : 617 | 97.8374 65.9501 0.0201618 0.00184005 43664 0; : 618 Minimum Test error found - save the configuration ; : 618 | 96.3739 65.107 0.0201565 0.0018204 43629.8 0; : 619 Minimum Test error found - save the configuration ; : 619 | 95.4431 64.9258 0.0202106 0.00183339 43532.2 0; : 620 Minimum Test error found - save the configuration ; : 620 | 94.1902 64.0162 0.020412 0.0018551 43110.6 0; : 621 Minimum Test error found - save the configuration ; : 621 | 92.9103 63.3038 0.0201905 0.00182603 43562.4 0; : 622 Minimum Test error found - save the configuration ; : 622 | 91.6075 63.2578 0.0201995 0.00184553 43587.4 0; : 623 Minimum Test error found - save the configuration ; : 623 | 90.7693 62.0703 0.0202228 0.00181118 43450.9 0; : 624 Minimum Test error found - save the configuration ; : 624 | 89.2125 61.1087 0.0202046 0.00181706 43507.7 0; : 625 | 88.1287 61.343 0.0200847 0.00175821 43652.7 1; : 626 Minimum Test error found - save the configuration ; : 626 | 87.0203 60.0927 0.0202246 0.00182742 43485 0; : 627 | 86.1022 60.6165 0.020286 0.00178227 43234.5 1; : 628 Minimum Test error found - save the configuration ; : 628 | 84.7933 59.0719 0.0201769 0.00183209 43609.1 0; : 629 Minimum Test error found - save the configuration ; : 629 | 83.7285 58.2513 0.0204361 0.0018731 43096.5 0; : 630 Minimum Test error found - save the configuration ; : 630 | 82.639 58.0942 0.0203377 0.00185077 43273.9 0; : 631 Minimum Test error found - save the configuration ; : 631 | 81.6101 57.1049 0.0203504 0.00184845 43238.6 0; : 632 | 80.6827 57.1221 0.0201225 0.00176999 43590.8 1; : 633 Minimum Test error found - save the configuration ; : 633 | 79.552,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:81370,configurat,configuration,81370,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,tion ; : 670 | 48.9056 38.9634 0.0204345 0.00193878 43253.1 0; : 671 Minimum Test error found - save the configuration ; : 671 | 47.9479 38.4436 0.0207053 0.00182816 42379.4 0; : 672 | 47.2853 39.0804 0.0202162 0.00175216 43327.4 1; : 673 Minimum Test error found - save the configuration ; : 673 | 47.0153 38.3207 0.0201285 0.00181671 43687.7 0; : 674 Minimum Test error found - save the configuration ; : 674 | 46.5986 38.0788 0.0201224 0.00182147 43713.7 0; : 675 Minimum Test error found - save the configuration ; : 675 | 45.6663 37.2199 0.020138 0.00182969 43696.1 0; : 676 Minimum Test error found - save the configuration ; : 676 | 44.8146 36.9047 0.0201419 0.00182761 43681.7 0; : 677 | 44.1854 37.155 0.0200983 0.0017637 43633.4 1; : 678 Minimum Test error found - save the configuration ; : 678 | 43.7163 36.54 0.0202108 0.00183597 43537.9 0; : 679 Minimum Test error found - save the configuration ; : 679 | 43.1003 36.3421 0.0201203 0.00181258 43697.4 0; : 680 Minimum Test error found - save the configuration ; : 680 | 42.8206 35.8087 0.0201316 0.00181818 43683.7 0; : 681 Minimum Test error found - save the configuration ; : 681 | 42.0593 35.186 0.0205402 0.00185408 42812.5 0; : 682 Minimum Test error found - save the configuration ; : 682 | 41.3592 34.9319 0.0201181 0.00182063 43721.9 0; : 683 | 40.8775 34.9951 0.020058 0.00175108 43699.3 1; : 684 Minimum Test error found - save the configuration ; : 684 | 40.654 34.3931 0.0201589 0.00183818 43666.4 0; : 685 Minimum Test error found - save the configuration ; : 685 | 40.0613 33.8904 0.0201577 0.00183348 43658.1 0; : 686 | 39.3281 34.3645 0.0200576 0.00176772 43739.9 1; : 687 | 38.8187 34.1117 0.0201676 0.00177122 43486.9 2; : 688 Minimum Test error found - save the configuration ; : 688 | 38.3466 33.422 0.0201552 0.00185044 43704.5 0; : 689 Minimum Test error found - save the configuration ; : 689 | 37.998 33.2339 0.0201139 0.00182328 43738.2 0; : 690 Minimum Test error found - save the configuration ; : 690 | 37.31,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:87372,configurat,configuration,87372,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,tion ; : 671 | 47.9479 38.4436 0.0207053 0.00182816 42379.4 0; : 672 | 47.2853 39.0804 0.0202162 0.00175216 43327.4 1; : 673 Minimum Test error found - save the configuration ; : 673 | 47.0153 38.3207 0.0201285 0.00181671 43687.7 0; : 674 Minimum Test error found - save the configuration ; : 674 | 46.5986 38.0788 0.0201224 0.00182147 43713.7 0; : 675 Minimum Test error found - save the configuration ; : 675 | 45.6663 37.2199 0.020138 0.00182969 43696.1 0; : 676 Minimum Test error found - save the configuration ; : 676 | 44.8146 36.9047 0.0201419 0.00182761 43681.7 0; : 677 | 44.1854 37.155 0.0200983 0.0017637 43633.4 1; : 678 Minimum Test error found - save the configuration ; : 678 | 43.7163 36.54 0.0202108 0.00183597 43537.9 0; : 679 Minimum Test error found - save the configuration ; : 679 | 43.1003 36.3421 0.0201203 0.00181258 43697.4 0; : 680 Minimum Test error found - save the configuration ; : 680 | 42.8206 35.8087 0.0201316 0.00181818 43683.7 0; : 681 Minimum Test error found - save the configuration ; : 681 | 42.0593 35.186 0.0205402 0.00185408 42812.5 0; : 682 Minimum Test error found - save the configuration ; : 682 | 41.3592 34.9319 0.0201181 0.00182063 43721.9 0; : 683 | 40.8775 34.9951 0.020058 0.00175108 43699.3 1; : 684 Minimum Test error found - save the configuration ; : 684 | 40.654 34.3931 0.0201589 0.00183818 43666.4 0; : 685 Minimum Test error found - save the configuration ; : 685 | 40.0613 33.8904 0.0201577 0.00183348 43658.1 0; : 686 | 39.3281 34.3645 0.0200576 0.00176772 43739.9 1; : 687 | 38.8187 34.1117 0.0201676 0.00177122 43486.9 2; : 688 Minimum Test error found - save the configuration ; : 688 | 38.3466 33.422 0.0201552 0.00185044 43704.5 0; : 689 Minimum Test error found - save the configuration ; : 689 | 37.998 33.2339 0.0201139 0.00182328 43738.2 0; : 690 Minimum Test error found - save the configuration ; : 690 | 37.3126 32.8977 0.0200976 0.0018112 43748.3 0; : 691 Minimum Test error found - save the configuration ; : 691 | 36.956,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:87486,configurat,configuration,87486,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,tion ; : 784 | 12.4995 16.0856 0.0201584 0.00184241 43677.8 0; : 785 Minimum Test error found - save the configuration ; : 785 | 12.0807 15.9892 0.0201102 0.00181891 43736.6 0; : 786 Minimum Test error found - save the configuration ; : 786 | 12.1859 15.8365 0.0202015 0.00183664 43561.5 0; : 787 Minimum Test error found - save the configuration ; : 787 | 12.2089 15.7994 0.0201254 0.00182497 43714.8 0; : 788 Minimum Test error found - save the configuration ; : 788 | 11.8962 15.4841 0.0201259 0.00183192 43730.1 0; : 789 | 11.7703 15.6571 0.0200815 0.00176624 43679.3 1; : 790 Minimum Test error found - save the configuration ; : 790 | 11.5659 15.3611 0.0201716 0.00184466 43651.5 0; : 791 Minimum Test error found - save the configuration ; : 791 | 11.5078 15.2368 0.0201178 0.00182919 43743 0; : 792 | 11.3858 15.3308 0.0200358 0.001762 43778.5 1; : 793 Minimum Test error found - save the configuration ; : 793 | 11.148 14.9168 0.0201055 0.00182242 43756.2 0; : 794 Minimum Test error found - save the configuration ; : 794 | 10.9366 14.9107 0.0201153 0.00182387 43736.3 0; : 795 | 11.1392 14.953 0.020041 0.00176266 43767.6 1; : 796 | 11.1019 15.4101 0.0200549 0.00175791 43723.2 2; : 797 | 11.12 15.292 0.0200628 0.00175972 43708.5 3; : 798 | 10.8935 14.9786 0.0200585 0.0017545 43706.3 4; : 799 Minimum Test error found - save the configuration ; : 799 | 10.7942 14.6749 0.0201633 0.00182171 43616.6 0; : 800 Minimum Test error found - save the configuration ; : 800 | 10.3317 14.1583 0.0201165 0.00182126 43727.2 0; : 801 | 10.3503 14.2866 0.0200523 0.00175781 43729 1; : 802 | 10.3453 15.2815 0.0200406 0.00175563 43751.8 2; : 803 | 10.2123 14.6873 0.0200478 0.00175638 43736.3 3; : 804 | 10.1133 14.2109 0.0201368 0.00176313 43540.5 4; : 805 Minimum Test error found - save the configuration ; : 805 | 10.3447 13.9911 0.0201319 0.00182751 43705.3 0; : 806 | 10.3558 15.0191 0.0200537 0.00175652 43722.7 1; : 807 Minimum Test error found - save the configuration ; : 807 | 9.87362 13.410,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:97980,configurat,configuration,97980,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,"tion ; Definition at line 51 of file RooBreitWigner.h. ◆ doEval(). void RooBreitWigner::doEval ; (; RooFit::EvalContext & ; ctx); const. overrideprotectedvirtual . Compute multiple values of BreitWigner distribution. ; Reimplemented from RooAbsReal.; Definition at line 64 of file RooBreitWigner.cxx. ◆ evaluate(). double RooBreitWigner::evaluate ; (; ); const. overrideprotectedvirtual . Evaluate this PDF / function / constant. Needs to be overridden by all derived classes. ; Implements RooAbsReal.; Definition at line 56 of file RooBreitWigner.cxx. ◆ getAnalyticalIntegral(). Int_t RooBreitWigner::getAnalyticalIntegral ; (; RooArgSet & ; allVars, . RooArgSet & ; analVars, . const char * ; rangeName = nullptr . ); const. overridevirtual . Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ; 'integSet' is the set of dependents for which integration is requested. The function should copy the subset of dependents it can analytically integrate to anaIntSet and return a unique identification code for this integration configuration. If no integration can be performed, zero should be returned. ; Reimplemented from RooAbsReal.; Definition at line 71 of file RooBreitWigner.cxx. ◆ IsA(). TClass * RooBreitWigner::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooAbsPdf.; Definition at line 51 of file RooBreitWigner.h. ◆ Streamer(). void RooBreitWigner::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsPdf. ◆ StreamerNVirtual(). void RooBreitWigner::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 51 of file RooBreitWigner.h. Member Data Documentation. ◆ mean. RooRealProxy RooBreitWigner::mean. protected . Definition at line 39 of file RooBreitWigner.h. ◆ width. RooRealProxy RooBreitWigner::width. protected . Definition at line 40 of file RooBreitWigner.h. ◆ x. RooRealProxy Ro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBreitWigner.html:76316,integrat,integrate,76316,doc/master/classRooBreitWigner.html,https://root.cern,https://root.cern/doc/master/classRooBreitWigner.html,3,"['configurat', 'integrat']","['configuration', 'integrate', 'integration']"
Deployability,"tion ; Definition at line 55 of file RooExponential.h. ◆ doEval(). void RooExponential::doEval ; (; RooFit::EvalContext & ; ctx); const. overrideprotectedvirtual . Compute multiple values of Exponential distribution. ; Reimplemented from RooAbsReal.; Definition at line 71 of file RooExponential.cxx. ◆ evaluate(). double RooExponential::evaluate ; (; ); const. overrideprotectedvirtual . Evaluate this PDF / function / constant. Needs to be overridden by all derived classes. ; Implements RooAbsReal.; Definition at line 60 of file RooExponential.cxx. ◆ getAnalyticalIntegral(). Int_t RooExponential::getAnalyticalIntegral ; (; RooArgSet & ; allVars, . RooArgSet & ; analVars, . const char * ; rangeName = nullptr . ); const. overridevirtual . Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ; 'integSet' is the set of dependents for which integration is requested. The function should copy the subset of dependents it can analytically integrate to anaIntSet and return a unique identification code for this integration configuration. If no integration can be performed, zero should be returned. ; Reimplemented from RooAbsReal.; Definition at line 77 of file RooExponential.cxx. ◆ IsA(). TClass * RooExponential::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooAbsPdf.; Definition at line 55 of file RooExponential.h. ◆ negateCoefficient(). bool RooExponential::negateCoefficient ; (; ); const. inline . Definition at line 39 of file RooExponential.h. ◆ Streamer(). void RooExponential::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsPdf. ◆ StreamerNVirtual(). void RooExponential::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 55 of file RooExponential.h. ◆ translate(). void RooExponential::translate ; (; RooFit::Detail::CodeSquashContext & ; ctx); const. overridevirtual . T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooExponential.html:77444,integrat,integrate,77444,doc/master/classRooExponential.html,https://root.cern,https://root.cern/doc/master/classRooExponential.html,3,"['configurat', 'integrat']","['configuration', 'integrate', 'integration']"
Deployability,tion ;  CNuisanceParametersSamplerHelper class for ToyMCSampler ;  CNumberCountingPdfFactoryA factory for building PDFs and data for a number counting combination ;  CNumEventsTestStatNumEventsTestStat is a simple implementation of the TestStatistic interface used for simple number counting ;  CPdfProposalPdfProposal is a concrete implementation of the ProposalFunction interface ;  CPointSetIntervalPointSetInterval is a concrete implementation of the ConfInterval interface ;  CProfileInspectorUtility class to plot conditional MLE of nuisance parameters vs ;  CProfileLikelihoodCalculatorProfileLikelihoodCalculator is a concrete implementation of CombinedCalculator (the interface class for a tools which can produce both RooStats HypoTestResults and ConfIntervals) ;  CProfileLikelihoodTestStatProfileLikelihoodTestStat is an implementation of the TestStatistic interface that calculates the profile likelihood ratio at a particular parameter point given a dataset ;  CProofConfigHolds configuration options for proof and proof-lite ;  CProposalFunctionProposalFunction is an interface for all proposal functions that would be used with a Markov Chain Monte Carlo algorithm ;  CProposalHelper;  CRatioOfProfiledLikelihoodsTestStatTestStatistic that returns the ratio of profiled likelihoods ;  CSamplingDistPlotThis class provides simple and straightforward utilities to plot SamplingDistribution objects ;  CSamplingDistributionThis class simply holds a sampling distribution of some test statistic ;  CSamplingSummary;  CSamplingSummaryLookup;  CSequentialProposalClass implementing a proposal function that samples the parameter space by moving only in one coordinate (chosen randomly) at each step ;  CSimpleIntervalSimpleInterval is a concrete implementation of the ConfInterval interface ;  CSimpleLikelihoodRatioTestStatTestStatistic class that returns -log(L[null] / L[alt]) where L is the likelihood ;  CSPlotThis class calculates sWeights used to create an sPlot ;  CTestStatisticTes,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v610/annotated.html:8655,configurat,configuration,8655,doc/v610/annotated.html,https://root.cern,https://root.cern/doc/v610/annotated.html,5,['configurat'],['configuration']
Deployability,"tion = """"); voidTObject::ResetBit(UInt_t f); static voidTBranch::ResetCount(); virtual voidTBranch::ResetReadEntry(); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTAttFill::SaveFillAttributes(ostream& out, const char* name, Int_t coldef = 1, Int_t stydef = 1001); virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); virtual voidTBranch::SetAddress(void* add); virtual voidTBranch::SetAutoDelete(Bool_t autodel = kTRUE); virtual voidTBranch::SetBasketSize(Int_t buffsize); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTBranch::SetBufferAddress(TBuffer* entryBuffer); virtual voidTBranch::SetCompressionLevel(Int_t level = 1); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTBranch::SetEntries(Long64_t entries); virtual voidTBranch::SetEntryOffsetLen(Int_t len, Bool_t updateSubBranches = kFALSE); virtual voidTBranch::SetFile(TFile* file = 0); virtual voidTBranch::SetFile(const char* filename); virtual voidTAttFill::SetFillAttributes()MENU ; virtual voidTAttFill::SetFillColor(Color_t fcolor); virtual voidTAttFill::SetFillStyle(Style_t fstyle); virtual voidTBranch::SetFirstEntry(Long64_t entry); virtual Bool_tTBranch::SetMakeClass(Bool_t decomposeObj = kTRUE); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); virtual voidTBranch::SetObject(void* objadd); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTBranch::SetOffset(Int_t offset = 0); virtual Int_tSetParent(const TObject* obj, Int_t branchID); virtual voidSetReadEntry(Long64_t entry); virtual voidTBranch::SetStatus(Bool_t status = 1); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTBranch::SetTree(TTree* tree); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTBranch::SetupAddresses(); virt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TBranchRef.html:8124,update,updateSubBranches,8124,root/html528/TBranchRef.html,https://root.cern,https://root.cern/root/html528/TBranchRef.html,1,['update'],['updateSubBranches']
Deployability,"tion = """"); voidTObject::ResetBit(UInt_t f); static voidTBranch::ResetCount(); virtual voidTBranch::ResetReadEntry(); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTAttFill::SaveFillAttributes(ostream& out, const char* name, Int_t coldef = 1, Int_t stydef = 1001); virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); virtual voidTBranch::SetAddress(void* add); virtual voidTBranch::SetAutoDelete(Bool_t autodel = kTRUE); virtual voidTBranch::SetBasketSize(Int_t buffsize); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTBranch::SetBufferAddress(TBuffer* entryBuffer); virtual voidTBranch::SetCompressionLevel(Int_t level = 1); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTBranch::SetEntries(Long64_t entries); virtual voidTBranch::SetEntryOffsetLen(Int_t len, Bool_t updateSubBranches = kFALSE); virtual voidTBranch::SetFile(TFile* file = 0); virtual voidTBranch::SetFile(const char* filename); virtual voidTAttFill::SetFillAttributes()MENU ; virtual voidTAttFill::SetFillColor(Color_t fcolor); virtual voidTAttFill::SetFillStyle(Style_t fstyle); virtual voidTBranch::SetFirstEntry(Long64_t entry); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); virtual voidTBranch::SetObject(void* objadd); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTBranch::SetOffset(Int_t offset = 0); virtual Int_tSetParent(const TObject* obj, const Int_t branchID); virtual voidSetReadEntry(Long64_t entry); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTBranch::SetTree(TTree* tree); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp, char* parent); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TBranchRef.html:8115,update,updateSubBranches,8115,root/html526/TBranchRef.html,https://root.cern,https://root.cern/root/html526/TBranchRef.html,1,['update'],['updateSubBranches']
Deployability,"tion = Tanh; Layer 2 DENSE Layer: ( Input = 64 , Width = 64 ) Output = ( 1 , 256 , 64 ) Activation Function = Tanh; Layer 3 DENSE Layer: ( Input = 64 , Width = 1 ) Output = ( 1 , 256 , 1 ) Activation Function = Identity; : Using 2560 events for training and 640 for testing; : Compute initial loss on the validation data ; : Training phase 1 of 1: Optimizer ADAM (beta1=0.9,beta2=0.999,eps=1e-07) Learning rate = 0.001 regularization 0 minimum error = 0.805395; : --------------------------------------------------------------; : Epoch | Train Err. Val. Err. t(s)/epoch t(s)/Loss nEvents/s Conv. Steps; : --------------------------------------------------------------; : Start epoch iteration ...; : 1 Minimum Test error found - save the configuration ; : 1 | 0.725372 0.686272 0.190597 0.0152439 14599.1 0; : 2 Minimum Test error found - save the configuration ; : 2 | 0.695636 0.683324 0.189128 0.015082 14708.8 0; : 3 | 0.691864 0.689576 0.189646 0.0148842 14648.6 1; : 4 Minimum Test error found - save the configuration ; : 4 | 0.689168 0.677551 0.190642 0.015026 14577.3 0; : 5 | 0.686885 0.678678 0.189865 0.0148775 14629.7 1; : 6 | 0.68905 0.681357 0.189104 0.014885 14694.1 2; : 7 | 0.687138 0.683485 0.19023 0.0152893 14633.6 3; : 8 | 0.686429 0.685529 0.189996 0.0147979 14612 4; : 9 | 0.685179 0.683467 0.190317 0.0152552 14623.4 5; : 10 Minimum Test error found - save the configuration ; : 10 | 0.684262 0.673795 0.18992 0.0153518 14664.7 0; : 11 Minimum Test error found - save the configuration ; : 11 | 0.682907 0.671521 0.194162 0.0155002 14328.7 0; : 12 | 0.693473 0.677553 0.188937 0.0147664 14698.2 1; : 13 | 0.695581 0.671789 0.190501 0.0149406 14581.9 2; : 14 | 0.68024 0.680521 0.188432 0.0146998 14735.3 3; : 15 | 0.68435 0.688062 0.189615 0.0147881 14643.1 4; : 16 | 0.686476 0.675588 0.190015 0.0152195 14645.7 5; : 17 | 0.677004 0.674528 0.190369 0.0146787 14571.1 6; : 18 Minimum Test error found - save the configuration ; : 18 | 0.670403 0.662 0.188594 0.0151297 14758.1",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__RNN__Classification_8py.html:18683,configurat,configuration,18683,doc/master/TMVA__RNN__Classification_8py.html,https://root.cern,https://root.cern/doc/master/TMVA__RNN__Classification_8py.html,1,['configurat'],['configuration']
Deployability,"tion TGLLightSet.h:28; TGLLightSet::SetLightvoid SetLight(ELight light, Bool_t on)Set a light on/off.Definition TGLLightSet.cxx:55; TGLOrthoCameraOrthographic projection camera.Definition TGLOrthoCamera.h:36; TGLOrthoCamera::SetEnableRotatevoid SetEnableRotate(Bool_t x)Definition TGLOrthoCamera.h:80; TGLRnrCtx::kFill@ kFillDefinition TGLRnrCtx.h:46; TGLRnrCtx::kWireFrame@ kWireFrameDefinition TGLRnrCtx.h:48; TGLRnrCtx::kOutline@ kOutlineDefinition TGLRnrCtx.h:47; TGLSAViewerThe top level standalone GL-viewer - created via plugin manager.Definition TGLSAViewer.h:38; TGLSAViewer::GetFrameTGCompositeFrame * GetFrame() constReturn the main-frame.Definition TGLSAViewer.cxx:325; TGLViewerBase::SetStylevoid SetStyle(Short_t st)Definition TGLViewerBase.h:111; TGLViewerBase GL viewer object - used by both standalone and embedded (in pad) GL.Definition TGLViewer.h:55; TGLViewer::SetPerspectiveCameravoid SetPerspectiveCamera(ECameraType camera, Double_t fov, Double_t dolly, Double_t center[3], Double_t hRotate, Double_t vRotate)Set a perspective camera to supplied configuration - note this does not need to be the current camera...Definition TGLViewer.cxx:1957; TGLViewer::ECameraTypeECameraTypeDefinition TGLViewer.h:61; TQObject::ConnectBool_t Connect(const char *signal, const char *receiver_class, void *receiver, const char *slot)Non-static method is used to connect from the signal of this object to the receiver slot.Definition TQObject.cxx:869; TRandomThis is the base class for the ROOT Random number generators.Definition TRandom.h:27; TTimerHandles synchronous and a-synchronous timer events.Definition TTimer.h:51; TMath::PiOver2constexpr Double_t PiOver2()Definition TMath.h:51; TMath::SqrtDouble_t Sqrt(Double_t x)Returns the square root of x.Definition TMath.h:662; TMath::TwoPiconstexpr Double_t TwoPi()Definition TMath.h:44; v@ vDefinition rootcling_impl.cxx:3699; AuthorRichard Maunder ; Definition in file glViewerExercise.C. tutorialsglglViewerExercise.C. ROOT master - Refe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/glViewerExercise_8C.html:5446,configurat,configuration,5446,doc/master/glViewerExercise_8C.html,https://root.cern,https://root.cern/doc/master/glViewerExercise_8C.html,1,['configurat'],['configuration']
Deployability,"tion [ default ]; ScanAllCdf() -- Always apply scanning technique; ScanNoCdf() -- Never apply scanning technique; ScanParameters(Int_t nbins, -- Parameters for scanning technique of making CDF: number; Int_t intOrder) of sampled bins and order of interpolation applied on numeric cdf. RooAbsReal* createScanCdf(const RooArgSet& iset, const RooArgSet& nset, Int_t numScanBins, Int_t intOrder). RooArgSet* getAllConstraints(const RooArgSet& observables, RooArgSet& constrainedParams, Bool_t stripDisconnected = kTRUE) const; This helper function finds and collects all constraints terms of all coponent p.d.f.s; and returns a RooArgSet with all those terms. void clearEvalError(); Clear the evaluation error flag. Bool_t evalError(); Return the evaluation error flag. void raiseEvalError(); Raise the evaluation error flag. RooNumGenConfig* defaultGeneratorConfig(); Returns the default numeric MC generator configuration for all RooAbsReals. RooNumGenConfig* specialGeneratorConfig() const; Returns the specialized integrator configuration for _this_ RooAbsReal.; If this object has no specialized configuration, a null pointer is returned. RooNumGenConfig* specialGeneratorConfig(Bool_t createOnTheFly); Returns the specialized integrator configuration for _this_ RooAbsReal.; If this object has no specialized configuration, a null pointer is returned,; unless createOnTheFly is kTRUE in which case a clone of the default integrator; configuration is created, installed as specialized configuration, and returned. const RooNumGenConfig* getGeneratorConfig() const; Return the numeric MC generator configuration used for this object. If; a specialized configuration was associated with this object, that configuration; is returned, otherwise the default configuration for all RooAbsReals is returned. void setGeneratorConfig(const RooNumGenConfig& config); Set the given configuration as default numeric MC generator; configuration for this object. void setGeneratorConfig(); Remove the specialized nu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAbsPdf.html:77710,integrat,integrator,77710,root/html528/RooAbsPdf.html,https://root.cern,https://root.cern/root/html528/RooAbsPdf.html,12,"['configurat', 'integrat']","['configuration', 'integrator']"
Deployability,"tion at line 1338 of file RooPlot.cxx. ◆ Streamer(). void RooPlot::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject.; Definition at line 1357 of file RooPlot.cxx. ◆ StreamerNVirtual(). void RooPlot::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 256 of file RooPlot.h. ◆ updateFitRangeNorm() [1/2]. void RooPlot::updateFitRangeNorm ; (; const RooPlotable * ; rp, . bool ; refreshNorm = false . ). protected . Update our plot normalization over our plot variable's fit range, which will be determined by the first suitable object added to our plot. ; Definition at line 562 of file RooPlot.cxx. ◆ updateFitRangeNorm() [2/2]. void RooPlot::updateFitRangeNorm ; (; const TH1 * ; hist). protected . Update our plot normalization over our plot variable's fit range, which will be determined by the first suitable object added to our plot. ; Definition at line 550 of file RooPlot.cxx. ◆ updateNormVars(). void RooPlot::updateNormVars ; (; const RooArgSet & ; vars). Install the given set of observables are reference normalization variables for this frame. ; These observables are e.g. later used to automatically project out observables when plotting functions on this frame. This function is only effective when called the first time on a frame ; Definition at line 351 of file RooPlot.cxx. ◆ updateYAxis(). void RooPlot::updateYAxis ; (; double ; ymin, . double ; ymax, . const char * ; label = """" . ). protected . Update our y-axis limits to accommodate an object whose spread in y is (ymin,ymax). ; Use the specified y-axis label if we don't have one assigned already. ; Definition at line 605 of file RooPlot.cxx. Member Data Documentation. ◆ _addDirStatus. bool RooPlot::_addDirStatus = true. staticprotected . static flag controlling AutoDirectoryAdd feature ; Definition at line 254 of file RooPlot.h. ◆ _defYmax. double RooPlot::_defYmax = 1.0. protected . Default maximum for Yaxis (",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooPlot.html:55095,update,updateNormVars,55095,doc/master/classRooPlot.html,https://root.cern,https://root.cern/doc/master/classRooPlot.html,1,['update'],['updateNormVars']
Deployability,"tion at line 167 of file TSQLFile.h. ◆ fLogFile. std::ofstream* TSQLFile::fLogFile. protected . ! log file with SQL statements ; Definition at line 165 of file TSQLFile.h. ◆ fModifyCounter. Int_t TSQLFile::fModifyCounter. protected . ! indicates how many changes was done with database tables ; Definition at line 157 of file TSQLFile.h. ◆ fOtherTypes. const char** TSQLFile::fOtherTypes. protected . ! pointer on list of other SQL types like TEXT or blob ; Definition at line 161 of file TSQLFile.h. ◆ fQuerisCounter. Int_t TSQLFile::fQuerisCounter. protected . ! how many query was applied ; Definition at line 158 of file TSQLFile.h. ◆ fSQL. TSQLServer* TSQLFile::fSQL. protected . ! interface to SQL database ; Definition at line 146 of file TSQLFile.h. ◆ fSQLClassInfos. TList* TSQLFile::fSQLClassInfos. protected . ! list of SQL class infos ; Definition at line 148 of file TSQLFile.h. ◆ fSQLIOversion. Int_t TSQLFile::fSQLIOversion. protected . ! version of SQL I/O which is stored in configurations ; Definition at line 151 of file TSQLFile.h. ◆ fStmtCounter. Int_t TSQLFile::fStmtCounter. protected . ! count numbers of active statements ; Definition at line 168 of file TSQLFile.h. ◆ fTablesType. TString TSQLFile::fTablesType. protected . ! type, used in CREATE TABLE statements ; Definition at line 154 of file TSQLFile.h. ◆ fUseIndexes. Int_t TSQLFile::fUseIndexes. protected . ! use indexes for tables: 0 - off, 1 - only for basic tables, 2 + normal class tables, 3 - all tables ; Definition at line 156 of file TSQLFile.h. ◆ fUserName. TString TSQLFile::fUserName. protected . ! user name, used to access objects from database ; Definition at line 163 of file TSQLFile.h. ◆ fUseSuffixes. Bool_t TSQLFile::fUseSuffixes. protected . ! use suffixes in column names like fValue:Int_t or fObject:pointer ; Definition at line 150 of file TSQLFile.h. ◆ fUseTransactions. Int_t TSQLFile::fUseTransactions. protected . ! use transaction statements for writing data into the tables ; Definition ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSQLFile.html:105464,configurat,configurations,105464,doc/master/classTSQLFile.html,https://root.cern,https://root.cern/doc/master/classTSQLFile.html,1,['configurat'],['configurations']
Deployability,"tion at line 182 of file Integrator.h. ◆ Options(). ROOT::Math::IntegratorOneDimOptions ROOT::Math::IntegratorOneDim::Options ; (; ); const. inline . retrieve the options ; Definition at line 456 of file Integrator.h. ◆ Result(). double ROOT::Math::IntegratorOneDim::Result ; (; ); const. inline . return the Result of the last Integral calculation ; Definition at line 411 of file Integrator.h. ◆ SetAbsTolerance(). void ROOT::Math::IntegratorOneDim::SetAbsTolerance ; (; double ; absTolerance). inline . set the desired absolute Error ; Definition at line 441 of file Integrator.h. ◆ SetFunction() [1/3]. void ROOT::Math::IntegratorOneDim::SetFunction ; (; const IGenFunction & ; f, . bool ; copy = false . ). inline . set one dimensional function for 1D integration ; Definition at line 202 of file Integrator.h. ◆ SetFunction() [2/3]. void ROOT::Math::IntegratorOneDim::SetFunction ; (; const IMultiGenFunction & ; f, . unsigned int ; icoord, . const double * ; x . ). Set integration function from a multi-dim function type. ; Can be used in case of having 1D function implementing the generic interface Parameters. fintegration function ; icoordindex of coordinate on which the integration is performed ; xarray of the passed variables values. In case of dim=1 a 0 can be passed . Definition at line 100 of file Integrator.cxx. ◆ SetFunction() [3/3]. template<class Function > . void ROOT::Math::IntegratorOneDim::SetFunction ; (; Function & ; f). inline . method to set the a generic integration function ; Parameters. fintegration function. The function type must implement the assignment operator, double operator() ( double x ) . Definition at line 492 of file Integrator.h. ◆ SetOptions(). void ROOT::Math::IntegratorOneDim::SetOptions ; (; const ROOT::Math::IntegratorOneDimOptions & ; opt). inline . set the options ; Definition at line 451 of file Integrator.h. ◆ SetRelTolerance(). void ROOT::Math::IntegratorOneDim::SetRelTolerance ; (; double ; relTolerance). inline . set the desired",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:20457,integrat,integration,20457,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,1,['integrat'],['integration']
Deployability,"tion at line 266 of file IntegratorOptions.cxx. ◆ DefaultWKSize(). unsigned int ROOT::Math::IntegratorOneDimOptions::DefaultWKSize ; (; ). static . Definition at line 267 of file IntegratorOptions.cxx. ◆ FindDefault(). IOptions * ROOT::Math::IntegratorOneDimOptions::FindDefault ; (; const char * ; name). static . find specific options - return 0 if not existing ; Definition at line 276 of file IntegratorOptions.cxx. ◆ Integrator(). std::string ROOT::Math::IntegratorOneDimOptions::Integrator ; (; ); const. overridevirtual . name of 1D integrator ; Implements ROOT::Math::BaseIntegratorOptions.; Definition at line 203 of file IntegratorOptions.cxx. ◆ IntegratorType(). IntegrationOneDim::Type ROOT::Math::IntegratorOneDimOptions::IntegratorType ; (; ); const. inline . type of the integrator (return the enumeration type) ; Definition at line 149 of file IntegratorOptions.h. ◆ NPoints(). unsigned int ROOT::Math::IntegratorOneDimOptions::NPoints ; (; ); const. inline . Number of points used by current integration rule. ; See alsoSetNPoints(). ; Definition at line 143 of file IntegratorOptions.h. ◆ operator=(). IntegratorOneDimOptions & ROOT::Math::IntegratorOneDimOptions::operator= ; (; const IntegratorOneDimOptions & ; rhs). inline . assignment operator ; Definition at line 130 of file IntegratorOptions.h. ◆ Print(). void ROOT::Math::IntegratorOneDimOptions::Print ; (; std::ostream & ; os = std::cout); const. print all the options ; Definition at line 207 of file IntegratorOptions.cxx. ◆ PrintDefault(). void ROOT::Math::IntegratorOneDimOptions::PrintDefault ; (; const char * ; name = nullptr, . std::ostream & ; os = std::cout . ). static . print only the specified default options ; print default options ; Definition at line 215 of file IntegratorOptions.cxx. ◆ SetDefaultAbsTolerance(). void ROOT::Math::IntegratorOneDimOptions::SetDefaultAbsTolerance ; (; double ; tol). static . Definition at line 246 of file IntegratorOptions.cxx. ◆ SetDefaultIntegrator(). void ROOT::Math::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDimOptions.html:6761,integrat,integration,6761,doc/master/classROOT_1_1Math_1_1IntegratorOneDimOptions.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDimOptions.html,1,['integrat'],['integration']
Deployability,"tion at line 384 of file TGLPShapeObjEditor.cxx. ◆ CreateColorSliders(). void TGLPShapeObjEditor::CreateColorSliders ; (; ). Create GUI for setting light color. ; Definition at line 421 of file TGLPShapeObjEditor.cxx. ◆ CreateGeoControls(). void TGLPShapeObjEditor::CreateGeoControls ; (; ). private . Create GUI for setting scale and position. ; Definition at line 199 of file TGLPShapeObjEditor.cxx. ◆ DeclFileName(). static const char * TGLPShapeObjEditor::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 107 of file TGLPShapeObjEditor.h. ◆ DoColorButton(). void TGLPShapeObjEditor::DoColorButton ; (; ). Process button action. ; Definition at line 336 of file TGLPShapeObjEditor.cxx. ◆ DoColorSlider(). void TGLPShapeObjEditor::DoColorSlider ; (; Int_t ; val). Process slider movement. ; Definition at line 302 of file TGLPShapeObjEditor.cxx. ◆ DoGeoButton(). void TGLPShapeObjEditor::DoGeoButton ; (; ). Process 'Apply' - update the viewer object from GUI. ; Definition at line 160 of file TGLPShapeObjEditor.cxx. ◆ DoRedraw(). void TGLPShapeObjEditor::DoRedraw ; (; ). overrideprivatevirtual . Redraw widget. Render sphere and pass to base-class. ; Reimplemented from TGFrame.; Definition at line 473 of file TGLPShapeObjEditor.cxx. ◆ DrawSphere(). void TGLPShapeObjEditor::DrawSphere ; (; ); const. Draw local sphere reflecting current color options. ; Definition at line 514 of file TGLPShapeObjEditor.cxx. ◆ GeoValueSet(). void TGLPShapeObjEditor::GeoValueSet ; (; Long_t ; unusedVal). Process setting of value in edit box - activate 'Apply' button. ; Definition at line 190 of file TGLPShapeObjEditor.cxx. ◆ GetObjectData(). void TGLPShapeObjEditor::GetObjectData ; (; Double_t * ; shift, . Double_t * ; scale . ). Extract the GUI object data, return center in 3 component 'center' scale in 3 component 'scale'. ; Definition at line 177 of file TGLPShapeObjEditor.cxx. ◆ GetRGBA(). const Float_t * TGLPShapeObjEditor::GetRGBA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLPShapeObjEditor.html:38087,update,update,38087,doc/master/classTGLPShapeObjEditor.html,https://root.cern,https://root.cern/doc/master/classTGLPShapeObjEditor.html,1,['update'],['update']
Deployability,"tion at line 50 of file TToggleGroup.h. ◆ InsertAt(). Int_t TToggleGroup::InsertAt ; (; TToggle * ; t, . Int_t ; pos, . Bool_t ; select = 1 . ). virtual . Add a new toggle at a specific position. ; Definition at line 77 of file TToggleGroup.cxx. ◆ IsA(). TClass * TToggleGroup::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TNamed.; Definition at line 57 of file TToggleGroup.h. ◆ Last(). virtual TToggle * TToggleGroup::Last ; (; ). inlinevirtual . Definition at line 48 of file TToggleGroup.h. ◆ operator=(). TToggleGroup & TToggleGroup::operator= ; (; const TToggleGroup & ; rhs). Assignment operator. ; Definition at line 42 of file TToggleGroup.cxx. ◆ Remove() [1/2]. virtual void TToggleGroup::Remove ; (; Int_t ; pos). inlinevirtual . Definition at line 44 of file TToggleGroup.h. ◆ Remove() [2/2]. virtual void TToggleGroup::Remove ; (; TToggle * ; t). inlinevirtual . Definition at line 43 of file TToggleGroup.h. ◆ Select() [1/2]. void TToggleGroup::Select ; (; Int_t ; idx). virtual . Select a toggle. ; Definition at line 91 of file TToggleGroup.cxx. ◆ Select() [2/2]. void TToggleGroup::Select ; (; TToggle * ; t). virtual . Selector a toggle. ; Definition at line 101 of file TToggleGroup.cxx. ◆ Streamer(). void TToggleGroup::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TNamed. ◆ StreamerNVirtual(). void TToggleGroup::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 57 of file TToggleGroup.h. Member Data Documentation. ◆ fToggles. TOrdCollection* TToggleGroup::fToggles. private . Definition at line 33 of file TToggleGroup.h. Libraries for TToggleGroup:. [legend]; The documentation for this class was generated from the following files:; core/gui/inc/TToggleGroup.h; core/gui/src/TToggleGroup.cxx. TToggleGroup. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:38 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTToggleGroup.html:15060,toggle,toggle,15060,doc/master/classTToggleGroup.html,https://root.cern,https://root.cern/doc/master/classTToggleGroup.html,2,['toggle'],['toggle']
Deployability,"tion at line 97 of file RNTuple.hxx. ◆ fVersionEpoch. std::uint16_t ROOT::RNTuple::fVersionEpoch = kVersionEpoch. private . Version of the RNTuple binary format that the writer supports (see specification). ; Changing the epoch indicates backward-incompatible changes ; Definition at line 87 of file RNTuple.hxx. ◆ fVersionMajor. std::uint16_t ROOT::RNTuple::fVersionMajor = kVersionMajor. private . Changing the major version indicates forward incompatible changes; such changes should correspond to a new bit in the feature flag of the RNTuple header. ; For the pre-release epoch 0, indicates the release candidate number ; Definition at line 91 of file RNTuple.hxx. ◆ fVersionMinor. std::uint16_t ROOT::RNTuple::fVersionMinor = kVersionMinor. private . Changing the minor version indicates new optional fields added to the RNTuple meta-data. ; Definition at line 93 of file RNTuple.hxx. ◆ fVersionPatch. std::uint16_t ROOT::RNTuple::fVersionPatch = kVersionPatch. private . Changing the patch version indicates new backported features from newer binary format versions. ; Definition at line 95 of file RNTuple.hxx. ◆ kVersionEpoch. constexpr std::uint16_t ROOT::RNTuple::kVersionEpoch = 0. staticconstexpr . Definition at line 79 of file RNTuple.hxx. ◆ kVersionMajor. constexpr std::uint16_t ROOT::RNTuple::kVersionMajor = 3. staticconstexpr . Definition at line 80 of file RNTuple.hxx. ◆ kVersionMinor. constexpr std::uint16_t ROOT::RNTuple::kVersionMinor = 0. staticconstexpr . Definition at line 81 of file RNTuple.hxx. ◆ kVersionPatch. constexpr std::uint16_t ROOT::RNTuple::kVersionPatch = 0. staticconstexpr . Definition at line 82 of file RNTuple.hxx. Libraries for ROOT::RNTuple:. [legend]; The documentation for this class was generated from the following files:; tree/ntuple/v7/inc/ROOT/RNTuple.hxx; tree/ntuple/v7/src/RNTuple.cxx; tree/ntuple/v7/src/RNTupleMerger.cxx. ROOTRNTuple. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:59 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RNTuple.html:11119,patch,patch,11119,doc/master/classROOT_1_1RNTuple.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RNTuple.html,1,['patch'],['patch']
Deployability,"tion binding?; Bool_tRooAbsIntegrator::_validIs integrator in valid state?; Double_t*_x! do not persist; Double_t_xmax! Upper integration bound; Double_t_xmin! Lower integration bound. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void registerIntegrator(RooNumIntFactory& fact); Register RooGaussKronrodIntegrator1D, its parameters and capabilities with RooNumIntConfig. RooGaussKronrodIntegrator1D(); coverity[UNINIT_CTOR]; Default constructor. RooGaussKronrodIntegrator1D(const RooAbsFunc& function, const RooNumIntConfig& config); Construct integral on 'function' using given configuration object. The integration; range is taken from the definition in the function binding. RooGaussKronrodIntegrator1D(const RooAbsFunc& function, Double_t xmin, Double_t xmax, const RooNumIntConfig& config); Construct integral on 'function' using given configuration object in the given range. RooAbsIntegrator* clone(const RooAbsFunc& function, const RooNumIntConfig& config) const; Clone integrator with given function and configuration. Needed for RooNumIntFactory. Bool_t initialize(); Perform one-time initialization of integrator. ~RooGaussKronrodIntegrator1D(); Destructor. Bool_t setLimits(Double_t* xmin, Double_t* xmax); Change our integration limits. Return kTRUE if the new limits are; ok, or otherwise kFALSE. Always returns kFALSE and does nothing; if this object was constructed to always use our integrand's limits. Bool_t checkLimits() const; Check that our integration range is finite and otherwise return kFALSE.; Update the limits from the integrand if requested. Double_t integral(const Double_t* yvec = 0); Calculate and return integral. RooGaussKronrodIntegrator1D(); Constructors, assignment etc. Bool_t setUseIntegrandLimits(Bool_t flag); {_useIntegrandLimits = flag ; return kTRUE ; }. Bool_t canIntegrate1D() const; { return kTRUE ; }. Bool_t canIntegrate2D() const; { return kFALSE ; }. Bool_t canIntegrateND() const; { return kFALSE ; }.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooGaussKronrodIntegrator1D.html:8498,integrat,integrator,8498,root/html530/RooGaussKronrodIntegrator1D.html,https://root.cern,https://root.cern/root/html530/RooGaussKronrodIntegrator1D.html,10,"['configurat', 'integrat']","['configuration', 'integrator']"
Deployability,"tion function. The function type must implement the mathlib::IGenFunction interface; 275 @param a lower value of the integration interval; 276 ; 277 */; 278 double IntegralUp(const IGenFunction & f, double a ) {; 279 SetFunction(f,false);; 280 return IntegralUp(a);; 281 }; 282 ; 283// /**; 284// evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b); 285// @param f integration function. The function type must be a C++ callable object implementing operator()(double x); 286// @param b upper value of the integration interval; 287// */; 288// template<class Function>; 289// double IntegralLow(Function & f, double b);; 290 ; 291 /**; 292 evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b); 293 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 294 @param b upper value of the integration interval; 295 */; 296 double IntegralLow(const IGenFunction & f, double b ) {; 297 SetFunction(f,false);; 298 return IntegralLow(b);; 299 }; 300 ; 301 /**; 302 evaluate the Integral of a function f with known singular points over the defined Integral (a,b); 303 @param f integration function. The function type must be a C++ callable object implementing operator()(double x); 304 @param pts vector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( \a a) and last element the upper value.; 305 ; 306 */; 307 template<class Function>; 308 double Integral(Function & f, const std::vector<double> & pts );; 309 ; 310 /**; 311 evaluate the Integral of a function f with known singular points over the defined Integral (a,b); 312 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 313 @param pts vector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first ele",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Integrator_8h_source.html:11651,integrat,integration,11651,doc/master/Integrator_8h_source.html,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html,2,['integrat'],['integration']
Deployability,"tion in the function binding. RooImproperIntegrator1D(const RooAbsFunc& function, const RooNumIntConfig& config); Constructor with function binding and configuration object. The integration range is taken; from the definition in the function binding. RooImproperIntegrator1D(const RooAbsFunc& function, Double_t xmin, Double_t xmax, const RooNumIntConfig& config); Constructor with function binding, definition of integration range and configuration object. RooAbsIntegrator* clone(const RooAbsFunc& function, const RooNumIntConfig& config) const; Return clone of integrator with given function and configuration. Needed by RooNumIntFactory. void initialize(const RooAbsFunc* function = 0); Initialize the integrator, construct and initialize subintegrators. ~RooImproperIntegrator1D(); Destructor. Bool_t setLimits(Double_t* xmin, Double_t* xmax); Change our integration limits. Return kTRUE if the new limits are; ok, or otherwise kFALSE. Always returns kFALSE and does nothing; if this object was constructed to always use our integrand's limits. Bool_t checkLimits() const; Check if the limits are valid. For this integrator all limit configurations; are valid, but if the limits change between two calculate() calls it; may be necessary to reconfigure (e.g. if an open ended range becomes; a closed range. Double_t integral(const Double_t* yvec = 0); Calculate the integral at the given parameter values of the function binding. Bool_t setUseIntegrandLimits(Bool_t flag); {_useIntegrandLimits = flag ; return kTRUE ; }. Bool_t canIntegrate1D() const; { return kTRUE ; }. Bool_t canIntegrate2D() const; { return kFALSE ; }. Bool_t canIntegrateND() const; { return kFALSE ; }. Bool_t canIntegrateOpenEnded() const; { return kTRUE ; }. LimitsCase limitsCase() const. » Last changed: Mon Dec 7 13:48:00 2009 » Last generated: 2009-12-07 13:48; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooImproperIntegrator1D.html:8822,integrat,integrator,8822,root/html526/RooImproperIntegrator1D.html,https://root.cern,https://root.cern/root/html526/RooImproperIntegrator1D.html,2,"['configurat', 'integrat']","['configurations', 'integrator']"
Deployability,"tion in the function binding. RooImproperIntegrator1D(const RooAbsFunc& function, const RooNumIntConfig& config); Constructor with function binding and configuration object. The integration range is taken; from the definition in the function binding. RooImproperIntegrator1D(const RooAbsFunc& function, Double_t xmin, Double_t xmax, const RooNumIntConfig& config); Constructor with function binding, definition of integration range and configuration object. RooAbsIntegrator* clone(const RooAbsFunc& function, const RooNumIntConfig& config) const; Return clone of integrator with given function and configuration. Needed by RooNumIntFactory. void initialize(const RooAbsFunc* function = 0); Initialize the integrator, construct and initialize subintegrators. ~RooImproperIntegrator1D(); Destructor. Bool_t setLimits(Double_t* xmin, Double_t* xmax); Change our integration limits. Return kTRUE if the new limits are; ok, or otherwise kFALSE. Always returns kFALSE and does nothing; if this object was constructed to always use our integrand's limits. Bool_t checkLimits() const; Check if the limits are valid. For this integrator all limit configurations; are valid, but if the limits change between two calculate() calls it; may be necessary to reconfigure (e.g. if an open ended range becomes; a closed range. Double_t integral(const Double_t* yvec = 0); Calculate the integral at the given parameter values of the function binding. Bool_t setUseIntegrandLimits(Bool_t flag); {_useIntegrandLimits = flag ; return kTRUE ; }. Bool_t canIntegrate1D() const; { return kTRUE ; }. Bool_t canIntegrate2D() const; { return kFALSE ; }. Bool_t canIntegrateND() const; { return kFALSE ; }. Bool_t canIntegrateOpenEnded() const; { return kTRUE ; }. LimitsCase limitsCase() const. » Last changed: Mon Jul 4 15:23:07 2011 » Last generated: 2011-07-04 15:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooImproperIntegrator1D.html:8877,integrat,integrator,8877,root/html530/RooImproperIntegrator1D.html,https://root.cern,https://root.cern/root/html530/RooImproperIntegrator1D.html,2,"['configurat', 'integrat']","['configurations', 'integrator']"
Deployability,"tion in the function binding. RooImproperIntegrator1D(const RooAbsFunc& function, const RooNumIntConfig& config); Constructor with function binding and configuration object. The integration range is taken; from the definition in the function binding. RooImproperIntegrator1D(const RooAbsFunc& function, Double_t xmin, Double_t xmax, const RooNumIntConfig& config); Constructor with function binding, definition of integration range and configuration object. RooAbsIntegrator* clone(const RooAbsFunc& function, const RooNumIntConfig& config) const; Return clone of integrator with given function and configuration. Needed by RooNumIntFactory. void initialize(const RooAbsFunc* function = 0); Initialize the integrator, construct and initialize subintegrators. ~RooImproperIntegrator1D(); Destructor. Bool_t setLimits(Double_t* xmin, Double_t* xmax); Change our integration limits. Return kTRUE if the new limits are; ok, or otherwise kFALSE. Always returns kFALSE and does nothing; if this object was constructed to always use our integrand's limits. Bool_t checkLimits() const; Check if the limits are valid. For this integrator all limit configurations; are valid, but if the limits change between two calculate() calls it; may be necessary to reconfigure (e.g. if an open ended range becomes; a closed range. Double_t integral(const Double_t* yvec = 0); Calculate the integral at the given parameter values of the function binding. Bool_t setUseIntegrandLimits(Bool_t flag); {_useIntegrandLimits = flag ; return kTRUE ; }. Bool_t canIntegrate1D() const; { return kTRUE ; }. Bool_t canIntegrate2D() const; { return kFALSE ; }. Bool_t canIntegrateND() const; { return kFALSE ; }. Bool_t canIntegrateOpenEnded() const; { return kTRUE ; }. LimitsCase limitsCase() const. » Last changed: Sat Oct 9 06:58:29 2010 » Last generated: 2010-10-09 06:58; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooImproperIntegrator1D.html:8808,integrat,integrator,8808,root/html528/RooImproperIntegrator1D.html,https://root.cern,https://root.cern/root/html528/RooImproperIntegrator1D.html,2,"['configurat', 'integrat']","['configurations', 'integrator']"
Deployability,"tion in the function binding. RooImproperIntegrator1D(const RooAbsFunc& function, const RooNumIntConfig& config); Constructor with function binding and configuration object. The integration range is taken; from the definition in the function binding. RooImproperIntegrator1D(const RooAbsFunc& function, Double_t xmin, Double_t xmax, const RooNumIntConfig& config); Constructor with function binding, definition of integration range and configuration object. RooAbsIntegrator* clone(const RooAbsFunc& function, const RooNumIntConfig& config) const; Return clone of integrator with given function and configuration. Needed by RooNumIntFactory. void initialize(const RooAbsFunc* function = 0); Initialize the integrator, construct and initialize subintegrators. ~RooImproperIntegrator1D(); Destructor. Bool_t setLimits(Double_t* xmin, Double_t* xmax); Change our integration limits. Return kTRUE if the new limits are; ok, or otherwise kFALSE. Always returns kFALSE and does nothing; if this object was constructed to always use our integrand's limits. Bool_t checkLimits() const; Check if the limits are valid. For this integrator all limit configurations; are valid, but if the limits change between two calculate() calls it; may be necessary to reconfigure (e.g. if an open ended range becomes; a closed range. Double_t integral(const Double_t* yvec = 0); Calculate the integral at the given parameter values of the function binding. Bool_t setUseIntegrandLimits(Bool_t flag); {_useIntegrandLimits = flag ; return kTRUE ; }. Bool_t canIntegrate1D() const; { return kTRUE ; }. Bool_t canIntegrate2D() const; { return kFALSE ; }. Bool_t canIntegrateND() const; { return kFALSE ; }. Bool_t canIntegrateOpenEnded() const; { return kTRUE ; }. LimitsCase limitsCase() const. » Last changed: Thu Nov 3 20:08:24 2011 » Last generated: 2011-11-03 20:08; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooImproperIntegrator1D.html:8877,integrat,integrator,8877,root/html532/RooImproperIntegrator1D.html,https://root.cern,https://root.cern/root/html532/RooImproperIntegrator1D.html,2,"['configurat', 'integrat']","['configurations', 'integrator']"
Deployability,"tion interface ; alower value of the integration interval ; bupper value of the integration interval . Definition at line 241 of file Integrator.h. ◆ Integral() [5/8]. double ROOT::Math::IntegratorOneDim::Integral ; (; const std::vector< double > & ; pts). inline . evaluate the Integral over the defined interval (a,b) using the function previously set with Integrator::SetFunction method. ; The function has known singular points. Parameters. ptsvector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( a) and last element the upper value. . Definition at line 396 of file Integrator.h. ◆ Integral() [6/8]. double ROOT::Math::IntegratorOneDim::Integral ; (; double ; a, . double ; b . ). inline . evaluate the Integral over the defined interval (a,b) using the function previously set with Integrator::SetFunction method ; Parameters. alower value of the integration interval ; bupper value of the integration interval . Definition at line 355 of file Integrator.h. ◆ Integral() [7/8]. template<class Function > . double ROOT::Math::IntegratorOneDim::Integral ; (; Function & ; f, . const std::vector< double > & ; pts . ). evaluate the Integral of a function f with known singular points over the defined Integral (a,b) ; Parameters. fintegration function. The function type must be a C++ callable object implementing operator()(double x) ; ptsvector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( a) and last element the upper value. . Definition at line 529 of file Integrator.h. ◆ Integral() [8/8]. template<class Function > . double ROOT::Math::IntegratorOneDim::Integral ; (; Function & ; f, . double ; a, . double ; b . ). evaluate the Integral of a function f over the defined interval (a,b) ; Parameters. fintegration function. The function typ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:14593,integrat,integration,14593,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,2,['integrat'],['integration']
Deployability,"tion mode; Bool_tRooResolutionModel::_ownBasisFlag indicating ownership of _basis ; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TRefArrayRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooRealProxyrlife; RooRealProxyrsf; RooRealProxysigma; RooRealProxyssf; RooRealProxyRooResolutionModel::xDependent/convolution variable.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooGExpModel.html:43176,integrat,integrator,43176,root/html532/RooGExpModel.html,https://root.cern,https://root.cern/root/html532/RooGExpModel.html,2,"['configurat', 'integrat']","['configuration', 'integrator']"
Deployability,"tion name; Integrator class. ROOT::Math::IntegratorMultiDim::kADAPTIVE; ROOT::Math::AdaptiveIntegratorMultiDim. ROOT::Math::IntegratorMultiDim::kVEGAS; ROOT::Math:::GSLMCIntegrator. ROOT::Math::IntegratorMultiDim::kMISER; ROOT::Math:::GSLMCIntegrator. ROOT::Math::IntegratorMultiDim::kPLAIN; ROOT::Math:::GSLMCIntegrator. The control parameters for the integration algorithms can be specified using the ROOT::Math::IntegratorMultiDimOptions class. Static methods are provided to change the default values. It is possible to print the list of default control parameters using the ROOT::Math::IntegratorMultiDimOptions::Print function. Example:; ROOT::Math::IntegratorMultiDimOptions opt;; opt.Print();; Integrator Type : ADAPTIVE; Absolute tolerance : 1e-09; Relative tolerance : 1e-09; Workspace size : 100000; (max) function calls : 100000; Depending on the algorithm, some of the control parameters might have no effect.; 13.8.3.3 ROOT::Math::AdaptiveIntegratorMultiDim; This class implements an adaptive quadrature integration method for multi dimensional functions. It is described in this paper Genz, A.A. Malik, An adaptive algorithm for numerical integration over an N-dimensional rectangular region, J. Comput. Appl. Math. 6 (1980) 295-302. It is part of the MathCore library. The user can control the relative and absolute tolerance and the maximum allowed number of function evaluation.; 13.8.3.4 ROOT::Math::GSLMCIntegrator; It is a class for performing numerical integration of a multidimensional function. It uses the numerical integration algorithms of GSL, which reimplements the algorithms used in the QUADPACK, a numerical integration package written in Fortran. Plain MC, MISER and VEGAS integration algorithms are supported for integration over finite (hypercubic) ranges. For a detail description of the GSL methods visit the GSL users guide. Specific configuration options (documented in the GSL user guide) for the ROOT::Math::GSLMCIntegration can be set directly in the class, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:712170,integrat,integration,712170,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['integrat'],['integration']
Deployability,"tion order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooRealProxypdfProxy to p.d.f being cached. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooCachedPdf(const char* name, const char* title, RooAbsPdf& _pdf); Constructor taking name, title and function to be cached. To control; granularity of the binning of the cache histogram set the desired properties; in the binning named ""cache"" in the observables of the function. The dimensions; of the cache are automatically matched to the number of observables used; in each use context. Multiple cache in different observable may exists; simultanously if the cached p.d.f is used with multiple observable; configurations simultaneously. RooCachedPdf(const char* name, const char* title, RooAbsPdf& _pdf, const RooArgSet& cacheObs); Constructor taking name, title and function to be cached and; fixed choice of variable to cache. To control granularity of the; binning of the cache histogram set the desired properties in the; binning named ""cache"" in the observables of the function.; If the fixed set of cache observables does not match the observables; defined in the use context of the p.d.f the cache is still filled; completely. Ee.g. when it is specified to cache x and p and only x; is a observable in the given use context the cache histogram will; store sampled values for all values of observable x and parameter p.; In such a mode of operation the cache will also not be recalculated; if the observable p changes. RooCachedPdf(const RooCachedPdf& other, const char* name = 0); Copy constructor. ~RooCachedPdf(); Destructor. void fillCacheObject(RooAbsCachedPdf::PdfCacheElem& cachePdf) const;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooCachedPdf.html:41563,configurat,configurations,41563,root/html526/RooCachedPdf.html,https://root.cern,https://root.cern/root/html526/RooCachedPdf.html,4,['configurat'],['configurations']
Deployability,"tion over range specified by X errors; rather than take value at bin center. RooAbsReal* createChi2(RooDataSet& data, const RooLinkedList& cmdList); Internal back-end function to create a chi^2 from a function and a dataset. RooFitResult* chi2FitDriver(RooAbsReal& fcn, RooLinkedList& cmdList); Internal driver function for chi2 fits. void setEvalErrorLoggingMode(RooAbsReal::ErrorLoggingMode m); Set evaluation error logging mode. Options are. PrintErrors - Print each error through RooMsgService() as it occurs; CollectErrors - Accumulate errors, but do not print them. A subsequent call; to printEvalErrors() will print a summary; CountErrors - Accumulate error count, but do not print them. Double_t getVal(const RooArgSet* set = 0) const; Return value and unit accessors. const Text_t * getUnit() const; Return string with unit description. void setUnit(const char* unit); Set unit description to given string. Bool_t forceAnalyticalInt(const RooAbsArg& ) const; Interface to force RooRealIntegral to offer given observable for internal integration; even if this is deemed unsafe. This default implementation returns always flase. void forceNumInt(Bool_t flag = kTRUE); If flag is true, all advertised analytical integrals will be ignored; and all integrals are calculated numerically. RooAbsReal* createIntegral(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()) const; Create integral over observables in iset in range named rangeName. return createIntegral(iset,0,0,rangeName). RooAbsReal* createIntegral(const RooArgSet& iset, const RooArgSet& nset, const char* rangeName = 0) const; Create integral over observables in iset in range named rangeName with integrand normalized over observables in",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAbsReal.html:78565,integrat,integration,78565,root/html528/RooAbsReal.html,https://root.cern,https://root.cern/root/html528/RooAbsReal.html,2,['integrat'],['integration']
Deployability,"tion request to our TTabCom::Hook(). ;  ; virtual void Terminate (int status) override;  Terminate the application. ;  ;  Public Member Functions inherited from TApplication;  TApplication (const char *appClassName, Int_t *argc, char **argv, void *options=nullptr, Int_t numOptions=0);  Create an application environment. ;  ; virtual ~TApplication ();  TApplication dtor. ;  ; virtual const char * ApplicationName () const;  ; Int_t Argc () const;  ; char ** Argv () const;  ; char * Argv (Int_t index) const;  Return specified argument. ;  ; void ClearInputFiles ();  Clear list containing macro files passed as program arguments. ;  ; EExitOnException ExitOnException (EExitOnException opt=kExit);  Set the exit on exception option. ;  ; virtual TApplicationImp * GetApplicationImp ();  ; TApplication * GetAppRemote () const;  ; const char * GetIdleCommand () const;  ; virtual void GetOptions (Int_t *argc, char **argv);  Get and handle command line options. ;  ; TString GetSetup ();  It gets the ROOT installation setup as TString. ;  ; TSignalHandler * GetSignalHandler () const;  ; virtual void HandleIdleTimer ();  Handle idle timeout. ;  ; virtual void Hide ();  ; virtual void Iconify ();  ; virtual void Init ();  ; void InitializeGraphics (Bool_t only_web=kFALSE);  Initialize the graphics environment. ;  ; TObjArray * InputFiles () const;  ; virtual Bool_t IsCmdThread ();  ; Bool_t IsRunning () const;  ; virtual void KeyPressed (Int_t key);  Emit signal when console keyboard key was pressed. ;  ; virtual void LineProcessed (const char *line);  Emit signal when a line has been processed. ;  ; virtual void Lower ();  ; void ls (Option_t *option="""") const override;  Show available sessions. ;  ; Bool_t NoLogoOpt () const;  ; Bool_t NoLogOpt () const;  ; virtual void Open ();  ; void OpenForumTopic (const TString &type);  It opens a Forum topic in a web browser with prefilled ROOT version. ;  ; void OpenGitHubIssue (const TString &type);  It opens a GitHub issue in a web brows",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRint.html:2602,install,installation,2602,doc/master/classTRint.html,https://root.cern,https://root.cern/doc/master/classTRint.html,1,['install'],['installation']
Deployability,"tion returns the corresponding bin number which has its content; incremented by w. void FillN(Int_t ntimes, const Double_t* x, const Double_t* w, Int_t stride = 1); Fill this histogram with an array x and weights w. ntimes: number of entries in arrays x and w (array size must be ntimes*stride); x: array of values to be histogrammed; w: array of weighs; stride: step size through arrays x and w. If the weight is not equal to 1, the storage of the sum of squares of; weights is automatically triggered and the sum of the squares of weights is incremented; by w^2 in the bin corresponding to x.; if w is NULL each entry is assumed a weight=1. void DoFillN(Int_t ntimes, const Double_t* x, const Double_t* w, Int_t stride = 1); internal method to fill histogram content from a vector; called directly by TH1::BufferEmpty. void FillRandom(const char* fname, Int_t ntimes = 5000); Fill histogram following distribution in function fname. The distribution contained in the function fname (TF1) is integrated; over the channel contents for the bin range of this histogram.; It is normalized to 1.; Getting one random number implies:; - Generating a random number between 0 and 1 (say r1); - Look in which bin in the normalized integral r1 corresponds to; - Fill histogram channel; ntimes random numbers are generated. One can also call TF1::GetRandom to get a random variate from a function. void FillRandom(TH1* h, Int_t ntimes = 5000); Fill histogram following distribution in histogram h. The distribution contained in the histogram h (TH1) is integrated; over the channel contents for the bin range of this histogram.; It is normalized to 1.; Getting one random number implies:; - Generating a random number between 0 and 1 (say r1); - Look in which bin in the normalized integral r1 corresponds to; - Fill histogram channel; ntimes random numbers are generated. SPECIAL CASE when the target histogram has the same binning as the source.; in this case we simply use a poisson distribution where; the me",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TH1.html:73846,integrat,integrated,73846,root/html602/TH1.html,https://root.cern,https://root.cern/root/html602/TH1.html,2,['integrat'],['integrated']
Deployability,"tion returns zero ; Reimplemented from RooAbsPdf.; Definition at line 2353 of file RooProdPdf.cxx. ◆ extendMode(). ExtendMode RooFixedProdPdf::extendMode ; (; ); const. inlineoverridevirtual . Returns ability of PDF to provide extended likelihood terms. ; Possible answers are in the enumerator RooAbsPdf::ExtendMode. This default implementation always returns CanNotBeExtended. ; Reimplemented from RooAbsPdf.; Definition at line 2352 of file RooProdPdf.cxx. ◆ forceAnalyticalInt(). bool RooFixedProdPdf::forceAnalyticalInt ; (; const RooAbsArg & ; dep); const. inlineoverridevirtual . Reimplemented from RooAbsReal.; Definition at line 2360 of file RooProdPdf.cxx. ◆ getAnalyticalIntegral(). Int_t RooFixedProdPdf::getAnalyticalIntegral ; (; RooArgSet & ; allVars, . RooArgSet & ; analVars, . const char * ; rangeName = nullptr . ); const. inlineoverridevirtual . Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ; 'integSet' is the set of dependents for which integration is requested. The function should copy the subset of dependents it can analytically integrate to anaIntSet and return a unique identification code for this integration configuration. If no integration can be performed, zero should be returned. ; Reimplemented from RooAbsReal.; Definition at line 2366 of file RooProdPdf.cxx. ◆ getAnalyticalIntegralWN(). Int_t RooFixedProdPdf::getAnalyticalIntegralWN ; (; RooArgSet & ; allDeps, . RooArgSet & ; analDeps, . const RooArgSet * ; normSet, . const char * ; rangeName = nullptr . ); const. inlineoverridevirtual . Variant of getAnalyticalIntegral that is also passed the normalization set that should be applied to the integrand of which the integral is requested. ; For certain operator p.d.f it is useful to overload this function rather than analyticalIntegralWN() as the additional normalization information may be useful in determining a more efficient decomposition of the requested integral. ; Reimplemented from RooAbsReal",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFixedProdPdf.html:77569,integrat,integration,77569,doc/master/classRooFixedProdPdf.html,https://root.cern,https://root.cern/doc/master/classRooFixedProdPdf.html,1,['integrat'],['integration']
Deployability,"tion specific to integrator with given name. void setEpsAbs(Double_t newEpsAbs); Set absolute convergence criteria (convergence if abs(Err)<newEpsAbs). RooPrintable::StyleOption defaultPrintStyle(Option_t* opt) const. void setEpsRel(Double_t newEpsRel); Set relative convergence criteria (convergence if abs(Err)/abs(Int)<newEpsRel). void printMultiline(ostream& os, Int_t content, Bool_t verbose, TString indent = """") const; Detailed printing interface. RooCategory& method1D(); Return selected integration techniques for 1,2,N dimensional integrals. { return _method1D ; }. RooCategory& method2D(); { return _method2D ; }. RooCategory& methodND(); { return _methodND ; }. const RooCategory& method1D() const; { return _method1D ; }. const RooCategory& method2D() const; { return _method2D ; }. const RooCategory& methodND() const; { return _methodND ; }. RooCategory& method1DOpen(); Return selected integration techniques for 1,2,N dimensional open-ended integrals. { return _method1DOpen ; }. RooCategory& method2DOpen(); { return _method2DOpen ; }. RooCategory& methodNDOpen(); { return _methodNDOpen ; }. const RooCategory& method1DOpen() const; { return _method1DOpen ; }. const RooCategory& method2DOpen() const; { return _method2DOpen ; }. const RooCategory& methodNDOpen() const; { return _methodNDOpen ; }. Double_t epsAbs() const; Set/get absolute and relative precision convergence criteria. { return _epsAbs ; }. Double_t epsRel() const; { return _epsRel ; }. Bool_t printEvalCounter() const; Set/get switch that activates printing of number of required; function evaluations for each numeric integration. { return _printEvalCounter ; }. void setPrintEvalCounter(Bool_t newVal); { _printEvalCounter = newVal ; }. void Print(Option_t* options = 0) const. » Last changed: Thu Sep 23 20:00:24 2010 » Last generated: 2010-09-23 20:00; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooNumIntConfig.html:10768,integrat,integration,10768,root/html528/RooNumIntConfig.html,https://root.cern,https://root.cern/root/html528/RooNumIntConfig.html,1,['integrat'],['integration']
Deployability,"tion specific to integrator with given name. void setEpsAbs(Double_t newEpsAbs); Set absolute convergence criteria (convergence if abs(Err)<newEpsAbs). RooPrintable::StyleOption defaultPrintStyle(Option_t* opt) const. void setEpsRel(Double_t newEpsRel); Set relative convergence criteria (convergence if abs(Err)/abs(Int)<newEpsRel). void printMultiline(ostream& os, Int_t content, Bool_t verbose, TString indent = """") const; Detailed printing interface. RooCategory& method1D(); Return selected integration techniques for 1,2,N dimensional integrals. { return _method1D ; }. RooCategory& method2D(); { return _method2D ; }. RooCategory& methodND(); { return _methodND ; }. const RooCategory& method1D() const; { return _method1D ; }. const RooCategory& method2D() const; { return _method2D ; }. const RooCategory& methodND() const; { return _methodND ; }. RooCategory& method1DOpen(); Return selected integration techniques for 1,2,N dimensional open-ended integrals. { return _method1DOpen ; }. RooCategory& method2DOpen(); { return _method2DOpen ; }. RooCategory& methodNDOpen(); { return _methodNDOpen ; }. const RooCategory& method1DOpen() const; { return _method1DOpen ; }. const RooCategory& method2DOpen() const; { return _method2DOpen ; }. const RooCategory& methodNDOpen() const; { return _methodNDOpen ; }. Double_t epsAbs() const; Set/get absolute and relative precision convergence criteria. { return _epsAbs ; }. Double_t epsRel() const; { return _epsRel ; }. Bool_t printEvalCounter() const; Set/get switch that activates printing of number of required; function evaluations for each numeric integration. { return _printEvalCounter ; }. void setPrintEvalCounter(Bool_t newVal); { _printEvalCounter = newVal ; }. void Print(Option_t* options = 0) const. » Last changed: Tue Jun 30 14:34:39 2015 » Last generated: 2015-06-30 14:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooNumIntConfig.html:11862,integrat,integration,11862,root/html602/RooNumIntConfig.html,https://root.cern,https://root.cern/root/html602/RooNumIntConfig.html,1,['integrat'],['integration']
Deployability,"tion specific to integrator with given name. void setEpsAbs(Double_t newEpsAbs); Set absolute convergence criteria (convergence if abs(Err)<newEpsAbs). RooPrintable::StyleOption defaultPrintStyle(Option_t* opt) const. void setEpsRel(Double_t newEpsRel); Set relative convergence criteria (convergence if abs(Err)/abs(Int)<newEpsRel). void printMultiline(ostream& os, Int_t content, Bool_t verbose, TString indent = """") const; Detailed printing interface. RooCategory& method1D(); Return selected integration techniques for 1,2,N dimensional integrals. { return _method1D ; }. RooCategory& method2D(); { return _method2D ; }. RooCategory& methodND(); { return _methodND ; }. const RooCategory& method1D() const; { return _method1D ; }. const RooCategory& method2D() const; { return _method2D ; }. const RooCategory& methodND() const; { return _methodND ; }. RooCategory& method1DOpen(); Return selected integration techniques for 1,2,N dimensional open-ended integrals. { return _method1DOpen ; }. RooCategory& method2DOpen(); { return _method2DOpen ; }. RooCategory& methodNDOpen(); { return _methodNDOpen ; }. const RooCategory& method1DOpen() const; { return _method1DOpen ; }. const RooCategory& method2DOpen() const; { return _method2DOpen ; }. const RooCategory& methodNDOpen() const; { return _methodNDOpen ; }. Double_t epsAbs() const; Set/get absolute and relative precision convergence criteria. { return _epsAbs ; }. Double_t epsRel() const; { return _epsRel ; }. Bool_t printEvalCounter() const; Set/get switch that activates printing of number of required; function evaluations for each numeric integration. { return _printEvalCounter ; }. void setPrintEvalCounter(Bool_t newVal); { _printEvalCounter = newVal ; }. void Print(Option_t* options = 0) const. » Last changed: Tue Mar 10 17:18:16 2015 » Last generated: 2015-03-10 17:18; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooNumIntConfig.html:10856,integrat,integration,10856,root/html534/RooNumIntConfig.html,https://root.cern,https://root.cern/root/html534/RooNumIntConfig.html,1,['integrat'],['integration']
Deployability,"tion switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; static Int_tRooPrintable::_nameLength; static RooRealVarSharedProperties_nullPropNull property; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; static Bool_t_printScientific; static Int_t_printSigDigits; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooRealVarSharedProperties*_sharedProp! Shared properties associated with this instance; static RooSharedPropertiesList_sharedPropListList of properties shared among clone sets ; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooRealVar.html:37863,integrat,integrator,37863,root/html526/RooRealVar.html,https://root.cern,https://root.cern/root/html526/RooRealVar.html,4,"['configurat', 'integrat']","['configuration', 'integrator']"
Deployability,"tion to observables in data; [#1] INFO:Fitting -- using CPU computation library compiled with -mavx2; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_model_modelData) Summation contains a RooNLLVar, using its error level; Minuit2Minimizer: Minimize with max-calls 1500 convergence for edm < 1 strategy 1; Minuit2Minimizer : Valid minimum - status = 0; FVAL = 2659.73712858695399; Edm = 0.000190395763129910388; Nfcn = 60; frac = 0.62118 +/- 0.165788 (limited); mean = 0.00442366 +/- 0.109372 (limited); sigma_g2 = 4.10789 +/- 0.405468 (limited); [#1] INFO:Minimization -- RooProfileLL::evaluate(RooEvaluatorWrapper_Profile[frac]) Creating instance of MINUIT; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_model_modelData) Summation contains a RooNLLVar, using its error level; [#1] INFO:Minimization -- RooProfileLL::evaluate(RooEvaluatorWrapper_Profile[frac]) determining minimum likelihood for current configurations w.r.t all observable; [#1] INFO:Minimization -- RooProfileLL::evaluate(RooEvaluatorWrapper_Profile[frac]) minimum found at (frac=0.62104); ..................................................................................; [#1] INFO:Minimization -- RooProfileLL::evaluate(RooEvaluatorWrapper_Profile[sigma_g2]) Creating instance of MINUIT; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_model_modelData) Summation contains a RooNLLVar, using its error level; [#1] INFO:Minimization -- RooProfileLL::evaluate(RooEvaluatorWrapper_Profile[sigma_g2]) determining minimum likelihood for current configurations w.r.t all observable; [#1] INFO:Minimization -- RooProfileLL::evaluate(RooEvaluatorWrapper_Profile[sigma_g2]) minimum found at (sigma_g2=4.11258); ....................................................................................; DateJuly 2008 ; AuthorWouter Verkerke ; Definition in file rf605_profilell.C. tutorialsroofitrf605_profilell.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf605__profilell_8C.html:7512,configurat,configurations,7512,doc/master/rf605__profilell_8C.html,https://root.cern,https://root.cern/doc/master/rf605__profilell_8C.html,1,['configurat'],['configurations']
Deployability,"tion using a toy image data set that is generated when running the example macro; ; ; # TMVA Classification Example Using a Convolutional Neural Network; ; ; ## Helper function to create input images data; ## we create a signal and background 2D histograms from 2d gaussians; ## with a location (means in X and Y) different for each event; ## The difference between signal and background is in the gaussian width.; ## The width for the background gaussian is slightly larger than the signal width by few % values; ; import os; import importlib.util; ; opt = [1, 1, 1, 1, 1]; useTMVACNN = opt[0] if len(opt) > 0 else False; useKerasCNN = opt[1] if len(opt) > 1 else False; useTMVADNN = opt[2] if len(opt) > 2 else False; useTMVABDT = opt[3] if len(opt) > 3 else False; usePyTorchCNN = opt[4] if len(opt) > 4 else False; ; tf_spec = importlib.util.find_spec(""tensorflow""); if tf_spec is None:; useKerasCNN = False; print(""TMVA_CNN_Classificaton"",""Skip using Keras since tensorflow is not installed""); else:; import tensorflow; ; # PyTorch has to be imported before ROOT to avoid crashes because of clashing; # std::regexp symbols that are exported by cppyy.; # See also: https://github.com/wlav/cppyy/issues/227; torch_spec = importlib.util.find_spec(""torch""); if torch_spec is None:; usePyTorchCNN = False; print(""TMVA_CNN_Classificaton"",""Skip using PyTorch since torch is not installed""); else:; import torch; ; ; import ROOT; ; ; TMVA = ROOT.TMVA; TFile = ROOT.TFile; ; TMVA.Tools.Instance(); ; def MakeImagesTree(n, nh, nw):; # image size (nh x nw); ntot = nh * nw; fileOutName = ""images_data_16x16.root""; nRndmEvts = 10000 # number of events we use to fill each image; delta_sigma = 0.1 # 5% difference in the sigma; pixelNoise = 5; ; sX1 = 3; sY1 = 3; sX2 = sX1 + delta_sigma; sY2 = sY1 - delta_sigma; h1 = ROOT.TH2D(""h1"", ""h1"", nh, 0, 10, nw, 0, 10); h2 = ROOT.TH2D(""h2"", ""h2"", nh, 0, 10, nw, 0, 10); f1 = ROOT.TF2(""f1"", ""xygaus""); f2 = ROOT.TF2(""f2"", ""xygaus""); sgn = ROOT.TTree(""sig_tree"", ""sig",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__CNN__Classification_8py.html:1363,install,installed,1363,doc/master/TMVA__CNN__Classification_8py.html,https://root.cern,https://root.cern/doc/master/TMVA__CNN__Classification_8py.html,1,['install'],['installed']
Deployability,"tion& f, ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kADAPTIVE, double absTol = 1.E-9, double relTol = 1E-6, unsigned int size = 1000, int rule = 3). Constructor of one dimensional Integrator passing a function interface. @param f integration function (1D interface). It is copied inside; @param type integration type (adaptive, non-adaptive, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE type). SetFunction(const ROOT::Math::IGenFunction& f, bool copy = false). IntegratorOneDim(const ROOT::Math::IGenFunction& f, ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kADAPTIVE, double absTol = 1.E-9, double relTol = 1E-6, unsigned int size = 1000, int rule = 3). Template Constructor of one dimensional Integrator passing a generic function object. @param f integration function (any C++ callable object implementing operator()(double x); @param type integration type (adaptive, non-adaptive, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE type). virtual ~IntegratorOneDim(); destructor (will delete contained pointer). IntegratorOneDim & operator=(const ROOT::Math::IntegratorOneDim& ); { return *this; }. double Integral(const ROOT::Math::IGenFunction& f, double a, double b); integration methods using a function. evaluate the Integral of a function f over the defined interval (a,b); @param f integration function. The function type must be a C++ callable object implementing operator()(double x); @param a lower value of the integration interval; @param b upper value of the integration interval. double Integral(const ROOT::Math::IGenFunction& f, double a, double b). evaluate the Integral of a function f over the defined interval (a,b); @param f integration function.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__IntegratorOneDim.html:6181,integrat,integration,6181,root/html526/ROOT__Math__IntegratorOneDim.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__IntegratorOneDim.html,2,['integrat'],['integration']
Deployability,"tion& func). protected:. boolDoInitMinimizer(); boolDoLeastSquareFit(const ROOT::Fit::BinData& data); boolDoLikelihoodFit(const ROOT::Fit::BinData& data, bool useWeight); boolDoLikelihoodFit(const ROOT::Fit::UnBinData& data, bool); boolDoLinearFit(const ROOT::Fit::BinData& data); boolDoMinimization(const ROOT::Math::IMultiGenFunction* chifunc = 0); boolDoMinimization(const ROOT::Fit::Fitter::BaseFunc& f, const ROOT::Math::IMultiGenFunction* chifunc = 0); voidDoUpdateFitConfig(); intGetNCallsFromFCN(). private:. ROOT::Fit::FitterFitter(const ROOT::Fit::Fitter&); ROOT::Fit::Fitter&operator=(const ROOT::Fit::Fitter& rhs). Data Members; private:. boolfBinFitflag to indicate if fit is binned ; ROOT::Fit::FitConfigfConfigfitter configuration (options and parameter settings); intfDataSizesize of data sets (need for Fumili or LM fitters); intfFitTypetype of fit (0 undefined, 1 least square, 2 likelihood); ROOT::Fit::Fitter::IModelFunction*fFunccopy of the fitted function containing on output the fit result (managed by FitResult); auto_ptr<ROOT::Math::Minimizer>fMinimizer! pointer to used minimizer; auto_ptr<ROOT::Math::IMultiGenFunction>fObjFunction! pointer to used objective function; auto_ptr<ROOT::Fit::FitResult>fResult! pointer to the object containing the result of the fit; boolfUseGradientflag to indicate if using gradient or not. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; bool FitFCN(ROOT::Fit::Fitter::MinuitFCN_t fcn, int npar = 0, const double* params = 0, unsigned int dataSize = 0, bool chi2fit = false). bool SetFCN(ROOT::Fit::Fitter::MinuitFCN_t fcn, int npar = 0, const double* params = 0, unsigned int dataSize = 0, bool chi2fit = false). Fitter(). Default constructor. ~Fitter(). Destructor. Fitter(const ROOT::Fit::Fitter& ). Copy constructor (disabled, class is not copyable). bool Fit( const Data & data, const Function & func). fit a data set using any generic model function; Pre-requisite on the function:. SetFunc",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ROOT__Fit__Fitter.html:4285,configurat,configuration,4285,root/html530/ROOT__Fit__Fitter.html,https://root.cern,https://root.cern/root/html530/ROOT__Fit__Fitter.html,1,['configurat'],['configuration']
Deployability,"tion* func). Data Members; protected:. doubleROOT::Math::GaussIntegrator::fEpsAbsAbsolute error.; doubleROOT::Math::GaussIntegrator::fEpsRelRelative error.; const ROOT::Math::IGenFunction*ROOT::Math::GaussIntegrator::fFunctionPointer to function used.; doubleROOT::Math::GaussIntegrator::fLastErrorError from the last stimation.; doubleROOT::Math::GaussIntegrator::fLastResultResult from the last stimation.; intfNumNumber of points used in the stimation of the integral.; boolROOT::Math::GaussIntegrator::fUsedOnceBool value to check if the function was at least called once.; double*fWWeights of the points used.; double*fXAbscisa of the points used.; static boolROOT::Math::GaussIntegrator::fgAbsValueAbsValue used for the calculation of the integral. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GaussLegendreIntegrator(int num = 10, double eps = 9.9999999999999998E-13); Basic contructor of GaussLegendreIntegrator.; \@param num Number of desired points to calculate the integration.; \@param eps Desired relative error. virtual ~GaussLegendreIntegrator(); Default Destructor . void SetNumberPoints(int num); Set the number of points used in the calculation of the; integral . void SetRelTolerance(double ); Set the desired relative Error. . void SetAbsTolerance(double ); This method is not implemented. . void GetWeightVectors(double* x, double* w) const; Returns the arrays x and w containing the abscissa and weight of; the Gauss-Legendre n-point quadrature formula. Gauss-Legendre: W(x)=1 -1<x<1; (j+1)P_{j+1} = (2j+1)xP_j-jP_{j-1}. int GetNumberPoints() const; { return fNum; }. int NEval() const. return number of function evaluations in calculating the integral; This is equivalent to the number of points. { return fNum; }. void SetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); set the options. double DoIntegral(double a, double b, const ROOT::Math::IGenFunction* func). Integration surrugate method. Return integral of passed f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__GaussLegendreIntegrator.html:3923,integrat,integration,3923,root/html602/ROOT__Math__GaussLegendreIntegrator.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__GaussLegendreIntegrator.html,2,['integrat'],['integration']
Deployability,"tion, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; RooCFunction4Ref< VO, VI1, VI2, VI3, VI4 > func;  ; RooRealProxy w;  ; RooRealProxy x;  ; RooRealProxy y;  ; RooRealProxy z;  ;  Protected Attributes inherited from RooAbsPdf; Int_t _errorCount = 0;  Number of errors remaining to print. ;  ; Int_t _negCount = 0;  Number of negative probabilities remaining to print. ;  ; RooAbsReal * _norm = nullptr;  ; RooObjCacheManager _normMgr;  ; TString _normRange;  Normalization range. ;  ; RooArgSet const * _normSet = nullptr;  Normalization integral (owned by _normMgr) ;  ; double _rawValue = 0;  ; bool _selectComp = false;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; std::unique_ptr< RooNumGenConfig > _specGeneratorConfig;  ! MC generator configuration specific for this object ;  ; Int_t _traceCount = 0;  Number of traces remaining to print. ;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; Int_t _plotBins = 100;  Number of plot bins. ;  ; double _plotMax = 0.0;  Maximum of plot range. ;  ; double _plotMin = 0.0;  Minimum of plot range. ;  ; bool _selectComp = true;  A buffer for reading values from trees. ;  ; std::unique_ptr< RooNumIntConfig > _specIntegratorConfig;  ; TreeReadBuffer * _treeReadBuffer = nullptr;  ; TString _unit;  Unit for objects value. ;  ; double _value = 0.0;  Cache for current value of object. ;  ;  Protected Attributes inherited from RooAbsArg; std::set< std::string > _boolAttrib;  ; std::set< std::string > _boolAttribTransient;  ; std::vector< RooAbsCache * > _cacheList;  ; RefCountList_t _clientList;  ; RefCountList_t _clientListShape;  ; RefCountList_t _clientListValue;  ; std::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCFunction4PdfBinding.html:68280,integrat,integration,68280,doc/master/classRooCFunction4PdfBinding.html,https://root.cern,https://root.cern/doc/master/classRooCFunction4PdfBinding.html,1,['integrat'],['integration']
Deployability,"tion. ;  ; static const char **& GetExtraInterpreterArgs ();  INTERNAL function! Used by rootcling to inject interpreter arguments through a C-interface layer. ;  ; static const TString & GetIconPath ();  Get the icon path in the installation. Static utility function. ;  ; static const TString & GetIncludeDir ();  Get the include directory in the installation. Static utility function. ;  ; static const TString & GetLibDir ();  Get the library directory in the installation. Static utility function. ;  ; static const TString & GetMacroDir ();  Get the macro directory in the installation. Static utility function. ;  ; static const char * GetMacroPath ();  Get macro search path. Static utility function. ;  ; static const TString & GetRootSys ();  Get the rootsys directory in the installation. Static utility function. ;  ; static const TString & GetSharedLibDir ();  Get the shared libraries directory in the installation. Static utility function. ;  ; static const TString & GetSourceDir ();  Get the source directory in the installation. Static utility function. ;  ; static const TString & GetTTFFontDir ();  Get the fonts directory in the installation. Static utility function. ;  ; static const TString & GetTutorialDir ();  Get the tutorials directory in the installation. Static utility function. ;  ; static const char * GetTutorialsDir ();  Get the tutorials directory in the installation. ;  ; static Int_t IncreaseDirLevel ();  Increase the indentation level for ls(). ;  ; static void IndentLevel ();  Functions used by ls() to indent an object hierarchy. ;  ; static void Initialize ();  Initialize ROOT explicitly. ;  ; static Bool_t Initialized ();  Return kTRUE if the TROOT object has been initialized. ;  ; static void RegisterModule (const char *modulename, const char **headers, const char **includePaths, const char *payLoadCode, const char *fwdDeclCode, void(*triggerFunc)(), const FwdDeclArgsToKeepCollection_t &fwdDeclsArgToSkip, const char **classesHeaders, bool hasCx",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTROOT.html:28896,install,installation,28896,doc/v632/classTROOT.html,https://root.cern,https://root.cern/doc/v632/classTROOT.html,2,['install'],['installation']
Deployability,"tion. By default uses the adaptive integration method. @param f integration function (generic function implementin operator()(const double *); @param dim function dimension; @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param ncall number of function calls (apply only to MC integratioon methods). virtual ~IntegratorMultiDim(); destructor. IntegratorMultiDim & operator=(const ROOT::Math::IntegratorMultiDim& ); { return *this; }. double Integral(const double* xmin, const double* xmax). evaluate the integral with the previously given function between xmin[] and xmax[]. double Integral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); evaluate the integral passing a new function. double Result() const; return result of last integration. { return fIntegrator == 0 ? 0 : fIntegrator->Result(); }. double Error() const; return integration error. { return fIntegrator == 0 ? 0 : fIntegrator->Error(); }. int Status() const; return the Error Status of the last Integral calculation. { return fIntegrator == 0 ? -1 : fIntegrator->Status(); }. void SetRelTolerance(double relTol); return number of function evaluations in calculating the integral; unsigned int NEval() const { return fNEval; }; set the relative tolerance. { if (fIntegrator) fIntegrator->SetRelTolerance(relTol); }. void SetAbsTolerance(double absTol); set absolute tolerance. { if (fIntegrator) fIntegrator->SetAbsTolerance(absTol); }. VirtualIntegratorMultiDim * GetIntegrator(); return a pointer to integrator object. { return fIntegrator; }. VirtualIntegratorMultiDim * CreateIntegrator(ROOT::Math::IntegrationMultiDim::Type type, double absTol, double relTol, unsigned int ncall). » Last changed: root/mathcore:$Id$ » Last generated: 2009-12-07 13:43; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__IntegratorMultiDim.html:5100,integrat,integrator,5100,root/html526/ROOT__Math__IntegratorMultiDim.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__IntegratorMultiDim.html,1,['integrat'],['integrator']
Deployability,"tion. Static utility function. ;  ; static const TString & GetLibDir ();  Get the library directory in the installation. Static utility function. ;  ; static const TString & GetMacroDir ();  Get the macro directory in the installation. Static utility function. ;  ; static const char * GetMacroPath ();  Get macro search path. Static utility function. ;  ; static const TString & GetRootSys ();  Get the rootsys directory in the installation. Static utility function. ;  ; static const TString & GetSharedLibDir ();  Get the shared libraries directory in the installation. Static utility function. ;  ; static const TString & GetSourceDir ();  Get the source directory in the installation. Static utility function. ;  ; static const TString & GetTTFFontDir ();  Get the fonts directory in the installation. Static utility function. ;  ; static const TString & GetTutorialDir ();  Get the tutorials directory in the installation. Static utility function. ;  ; static const char * GetTutorialsDir ();  Get the tutorials directory in the installation. ;  ; static Int_t IncreaseDirLevel ();  Increase the indentation level for ls(). ;  ; static void IndentLevel ();  Functions used by ls() to indent an object hierarchy. ;  ; static void Initialize ();  Initialize ROOT explicitly. ;  ; static Bool_t Initialized ();  Return kTRUE if the TROOT object has been initialized. ;  ; static void RegisterModule (const char *modulename, const char **headers, const char **includePaths, const char *payLoadCode, const char *fwdDeclCode, void(*triggerFunc)(), const FwdDeclArgsToKeepCollection_t &fwdDeclsArgToSkip, const char **classesHeaders, bool hasCxxModule=false);  Called by static dictionary initialization to register clang modules for headers. ;  ; static Int_t RootVersionCode ();  Return ROOT version code as defined in RVersion.h. ;  ; static void SetDirLevel (Int_t level=0);  Return Indentation level for ls(). ;  ; static void SetMacroPath (const char *newpath);  Set or extend the macro search pa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTROOT.html:29255,install,installation,29255,doc/v632/classTROOT.html,https://root.cern,https://root.cern/doc/v632/classTROOT.html,2,['install'],['installation']
Deployability,"tion.; 3146 ; 3147const TString& TROOT::GetSourceDir() {; 3148#ifdef ROOTSRCDIR; 3149 if (IgnorePrefix()) {; 3150#endif; 3151 static TString rootsrcdir;; 3152 if (rootsrcdir.IsNull()) {; 3153 rootsrcdir = ""src"";; 3154 gSystem->PrependPathName(GetRootSys(), rootsrcdir);; 3155 }; 3156 return rootsrcdir;; 3157#ifdef ROOTSRCDIR; 3158 } else {; 3159 const static TString rootsrcdir = ROOTSRCDIR;; 3160 return rootsrcdir;; 3161 }; 3162#endif; 3163}; 3164 ; 3165////////////////////////////////////////////////////////////////////////////////; 3166/// Get the icon path in the installation. Static utility function.; 3167 ; 3168const TString& TROOT::GetIconPath() {; 3169#ifdef ROOTICONPATH; 3170 if (IgnorePrefix()) {; 3171#endif; 3172 static TString rooticonpath;; 3173 if (rooticonpath.IsNull()) {; 3174 rooticonpath = ""icons"";; 3175 gSystem->PrependPathName(GetRootSys(), rooticonpath);; 3176 }; 3177 return rooticonpath;; 3178#ifdef ROOTICONPATH; 3179 } else {; 3180 const static TString rooticonpath = ROOTICONPATH;; 3181 return rooticonpath;; 3182 }; 3183#endif; 3184}; 3185 ; 3186////////////////////////////////////////////////////////////////////////////////; 3187/// Get the fonts directory in the installation. Static utility function.; 3188 ; 3189const TString& TROOT::GetTTFFontDir() {; 3190#ifdef TTFFONTDIR; 3191 if (IgnorePrefix()) {; 3192#endif; 3193 static TString ttffontdir;; 3194 if (ttffontdir.IsNull()) {; 3195 ttffontdir = ""fonts"";; 3196 gSystem->PrependPathName(GetRootSys(), ttffontdir);; 3197 }; 3198 return ttffontdir;; 3199#ifdef TTFFONTDIR; 3200 } else {; 3201 const static TString ttffontdir = TTFFONTDIR;; 3202 return ttffontdir;; 3203 }; 3204#endif; 3205}; 3206 ; 3207////////////////////////////////////////////////////////////////////////////////; 3208/// Get the tutorials directory in the installation. Static utility function.; 3209/// Backward compatibility function - do not use for new code; 3210 ; 3211const char *TROOT::GetTutorialsDir() {; 3212 return GetTutori",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TROOT_8cxx_source.html:119946,install,installation,119946,doc/v632/TROOT_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/TROOT_8cxx_source.html,1,['install'],['installation']
Deployability,"tion.; 3150 ; 3151const TString& TROOT::GetSourceDir() {; 3152#ifdef ROOTSRCDIR; 3153 if (IgnorePrefix()) {; 3154#endif; 3155 static TString rootsrcdir;; 3156 if (rootsrcdir.IsNull()) {; 3157 rootsrcdir = ""src"";; 3158 gSystem->PrependPathName(GetRootSys(), rootsrcdir);; 3159 }; 3160 return rootsrcdir;; 3161#ifdef ROOTSRCDIR; 3162 } else {; 3163 const static TString rootsrcdir = ROOTSRCDIR;; 3164 return rootsrcdir;; 3165 }; 3166#endif; 3167}; 3168 ; 3169////////////////////////////////////////////////////////////////////////////////; 3170/// Get the icon path in the installation. Static utility function.; 3171 ; 3172const TString& TROOT::GetIconPath() {; 3173#ifdef ROOTICONPATH; 3174 if (IgnorePrefix()) {; 3175#endif; 3176 static TString rooticonpath;; 3177 if (rooticonpath.IsNull()) {; 3178 rooticonpath = ""icons"";; 3179 gSystem->PrependPathName(GetRootSys(), rooticonpath);; 3180 }; 3181 return rooticonpath;; 3182#ifdef ROOTICONPATH; 3183 } else {; 3184 const static TString rooticonpath = ROOTICONPATH;; 3185 return rooticonpath;; 3186 }; 3187#endif; 3188}; 3189 ; 3190////////////////////////////////////////////////////////////////////////////////; 3191/// Get the fonts directory in the installation. Static utility function.; 3192 ; 3193const TString& TROOT::GetTTFFontDir() {; 3194#ifdef TTFFONTDIR; 3195 if (IgnorePrefix()) {; 3196#endif; 3197 static TString ttffontdir;; 3198 if (ttffontdir.IsNull()) {; 3199 ttffontdir = ""fonts"";; 3200 gSystem->PrependPathName(GetRootSys(), ttffontdir);; 3201 }; 3202 return ttffontdir;; 3203#ifdef TTFFONTDIR; 3204 } else {; 3205 const static TString ttffontdir = TTFFONTDIR;; 3206 return ttffontdir;; 3207 }; 3208#endif; 3209}; 3210 ; 3211////////////////////////////////////////////////////////////////////////////////; 3212/// Get the tutorials directory in the installation. Static utility function.; 3213/// Backward compatibility function - do not use for new code; 3214 ; 3215const char *TROOT::GetTutorialsDir() {; 3216 return GetTutori",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TROOT_8cxx_source.html:120193,install,installation,120193,doc/master/TROOT_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TROOT_8cxx_source.html,1,['install'],['installation']
Deployability,"tion; void cleanup(); Function called by atexit() handler installed by RooSentinel to; cleanup global objects at end of job. RooNumIntConfig& defaultConfig(); Return reference to instance of default numeric integrator configuration object. RooNumIntConfig(); Constructor. ~RooNumIntConfig(); Destructor. RooNumIntConfig(const RooNumIntConfig& other); Copy constructor. RooNumIntConfig& operator=(const RooNumIntConfig& other); Assignment operator from other RooNumIntConfig. Bool_t addConfigSection(const RooAbsIntegrator* proto, const RooArgSet& defaultConfig); Add a configuration section for a particular integrator. Integrator name and capabilities are; automatically determined from instance passed as 'proto'. The defaultConfig object is associated; as the default configuration for the integrator. RooArgSet& getConfigSection(const char* name); Return section with configuration parameters for integrator with given (class) name. const RooArgSet& getConfigSection(const char* name); Retrieve configuration information specific to integrator with given name. void setEpsAbs(Double_t newEpsAbs); Set absolute convergence criteria (convergence if abs(Err)<newEpsAbs). RooPrintable::StyleOption defaultPrintStyle(Option_t* opt) const. void setEpsRel(Double_t newEpsRel); Set relative convergence criteria (convergence if abs(Err)/abs(Int)<newEpsRel). void printMultiline(ostream& os, Int_t content, Bool_t verbose, TString indent = """") const; Detailed printing interface. RooCategory& method1D(); Return selected integration techniques for 1,2,N dimensional integrals. { return _method1D ; }. RooCategory& method2D(); { return _method2D ; }. RooCategory& methodND(); { return _methodND ; }. const RooCategory& method1D(); { return _method1D ; }. const RooCategory& method2D(); { return _method2D ; }. const RooCategory& methodND(); { return _methodND ; }. RooCategory& method1DOpen(); Return selected integration techniques for 1,2,N dimensional open-ended integrals. { return _method1DOpen ; }. R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooNumIntConfig.html:9148,configurat,configuration,9148,root/html526/RooNumIntConfig.html,https://root.cern,https://root.cern/root/html526/RooNumIntConfig.html,2,"['configurat', 'integrat']","['configuration', 'integrator']"
Deployability,"tion; void registerIntegrator(RooNumIntFactory& fact); Register RooSegmentedIntegrator1D, its parameters, dependencies and capabilities with RooNumIntFactory. RooSegmentedIntegrator1D(); Destructor. RooSegmentedIntegrator1D(const RooAbsFunc& function, const RooNumIntConfig& config); Constructor of integral on given function binding and with given configuration. The; integration limits are taken from the definition in the function binding. RooSegmentedIntegrator1D(const RooAbsFunc& function, Double_t xmin, Double_t xmax, const RooNumIntConfig& config); Constructor integral on given function binding, with given configuration and; explicit definition of integration range. RooAbsIntegrator* clone(const RooAbsFunc& function, const RooNumIntConfig& config) const; Virtual constructor with given function and configuration. Needed by RooNumIntFactory. Bool_t initialize(); One-time integrator initialization. ~RooSegmentedIntegrator1D(); Destructor. Bool_t setLimits(Double_t* xmin, Double_t* xmax); Change our integration limits. Return kTRUE if the new limits are; ok, or otherwise kFALSE. Always returns kFALSE and does nothing; if this object was constructed to always use our integrand's limits. Bool_t checkLimits() const; Check that our integration range is finite and otherwise return kFALSE.; Update the limits from the integrand if requested. Double_t integral(const Double_t* yvec = 0); Evaluate integral at given function binding parameter values. Bool_t setUseIntegrandLimits(Bool_t flag); { _useIntegrandLimits = flag ; return kTRUE ; }. Bool_t canIntegrate1D() const; { return kTRUE ; }. Bool_t canIntegrate2D() const; { return kFALSE ; }. Bool_t canIntegrateND() const; { return kFALSE ; }. Bool_t canIntegrateOpenEnded() const; { return kFALSE ; }. » Last changed: Mon Dec 7 13:48:59 2009 » Last generated: 2009-12-07 13:48; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooSegmentedIntegrator1D.html:8012,integrat,integration,8012,root/html526/RooSegmentedIntegrator1D.html,https://root.cern,https://root.cern/root/html526/RooSegmentedIntegrator1D.html,1,['integrat'],['integration']
Deployability,"tion=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from RooPrintable;  RooPrintable ();  ; virtual ~RooPrintable ();  ; virtual StyleOption defaultPrintStyle (Option_t *opt) const;  ; virtual void printExtras (std::ostream &os) const;  Interface to print extras of object. ;  ; virtual void printStream (std::ostream &os, Int_t contents, StyleOption style, TString indent="""") const;  Print description of object on ostream, printing contents set by contents integer, which is interpreted as an OR of 'enum ContentsOptions' values and in the style given by 'enum StyleOption'. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static RooNumGenConfig * defaultGeneratorConfig ();  Returns the default numeric MC generator configuration for all RooAbsReals. ;  ; static int verboseEval ();  Return global level of verbosity for p.d.f. evaluations. ;  ; static void verboseEval (Int_t stat);  Change global level of verbosity for p.d.f. evaluations. ;  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsPdf.html:63660,configurat,configuration,63660,doc/master/classRooAbsPdf.html,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html,1,['configurat'],['configuration']
Deployability,"tionFinder> {; 1115 DefinitionFinder(clang::GlobalModuleIndex::UserDefinedInterestingIDs& IDs,; 1116 clang::TranslationUnitDecl* TU) : DefinitionIDs(IDs) {; 1117 TraverseDecl(TU);; 1118 }; 1119 bool VisitNamedDecl(NamedDecl *ND) {; 1120 if (!ND->isFromASTFile()); 1121 return true;; 1122 if (!ND->getIdentifier()); 1123 return true;; 1124 ; 1125 if (ND->getAccess() == AS_protected || ND->getAccess() == AS_private); 1126 return true;; 1127 ; 1128 if (TagDecl *TD = llvm::dyn_cast<TagDecl>(ND)) {; 1129 if (TD->isCompleteDefinition()); 1130 Register(TD);; 1131 } else if (NamespaceDecl *NSD = llvm::dyn_cast<NamespaceDecl>(ND)) {; 1132 Register(NSD, /*AddSingleEntry=*/ false);; 1133 }; 1134 else if (TypedefNameDecl *TND = dyn_cast<TypedefNameDecl>(ND)); 1135 Register(TND);; 1136 // FIXME: Add the rest...; 1137 return true; // continue decending; 1138 }; 1139 private:; 1140 clang::GlobalModuleIndex::UserDefinedInterestingIDs &DefinitionIDs;; 1141 void Register(const NamedDecl* ND, bool AddSingleEntry = true) {; 1142 assert(ND->isFromASTFile());; 1143 // FIXME: All decls should have an owning module once rootcling; 1144 // updates its generated decls from within the LookupHelper & co.; 1145 if (!ND->hasOwningModule()) {; 1146#ifndef NDEBUG; 1147 SourceManager &SM = ND->getASTContext().getSourceManager();; 1148 SourceLocation Loc = ND->getLocation();; 1149 const FileEntry *FE = SM.getFileEntryForID(SM.getFileID(Loc));; 1150 (void)FE;; 1151 assert(FE->getName().contains(""input_line_""));; 1152#endif; 1153 return;; 1154 }; 1155 ; 1156 Module *OwningModule = ND->getOwningModule()->getTopLevelModule();; 1157 assert(OwningModule);; 1158 assert(!ND->getName().empty() && ""Empty name"");; 1159 if (AddSingleEntry && DefinitionIDs.count(ND->getName())); 1160 return;; 1161 // FIXME: The FileEntry in not stable to serialize.; 1162 // FIXME: We might end up with many times with the same module.; 1163 // FIXME: We might end up two modules containing a definition.; 1164 // FIXME: What do we do",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCling_8cxx_source.html:41393,update,updates,41393,doc/master/TCling_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCling_8cxx_source.html,1,['update'],['updates']
Deployability,"tion_ to the; integration observables; ScanNumCdf() -- Apply scanning technique if cdf integral involves numeric integration [ default ]; ScanAllCdf() -- Always apply scanning technique; ScanNoCdf() -- Never apply scanning technique; ScanParameters(Int_t nbins, -- Parameters for scanning technique of making CDF: number; Int_t intOrder) of sampled bins and order of interpolation applied on numeric cdf. RooAbsReal* createScanCdf(const RooArgSet& iset, const RooArgSet& nset, Int_t numScanBins, Int_t intOrder). RooArgSet* getAllConstraints(const RooArgSet& observables, RooArgSet& constrainedParams, Bool_t stripDisconnected = kTRUE) const; This helper function finds and collects all constraints terms of all coponent p.d.f.s; and returns a RooArgSet with all those terms. void clearEvalError(); Clear the evaluation error flag. Bool_t evalError(); Return the evaluation error flag. void raiseEvalError(); Raise the evaluation error flag. RooNumGenConfig* defaultGeneratorConfig(); Returns the default numeric MC generator configuration for all RooAbsReals. RooNumGenConfig* specialGeneratorConfig() const; Returns the specialized integrator configuration for _this_ RooAbsReal.; If this object has no specialized configuration, a null pointer is returned. RooNumGenConfig* specialGeneratorConfig(Bool_t createOnTheFly); Returns the specialized integrator configuration for _this_ RooAbsReal.; If this object has no specialized configuration, a null pointer is returned,; unless createOnTheFly is kTRUE in which case a clone of the default integrator; configuration is created, installed as specialized configuration, and returned. const RooNumGenConfig* getGeneratorConfig() const; Return the numeric MC generator configuration used for this object. If; a specialized configuration was associated with this object, that configuration; is returned, otherwise the default configuration for all RooAbsReals is returned. void setGeneratorConfig(const RooNumGenConfig& config); Set the given configurat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAbsPdf.html:77602,configurat,configuration,77602,root/html528/RooAbsPdf.html,https://root.cern,https://root.cern/root/html528/RooAbsPdf.html,6,['configurat'],['configuration']
Deployability,tion_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t rDefinition TGWin32VirtualXProxy.cxx:168; TUnuranBaseDist.h; UNUR_URNGstruct unur_urng UNUR_URNGDefinition TUnuran.h:73; UNUR_GENstruct unur_gen UNUR_GENDefinition TUnuran.h:64; UNUR_DISTRstruct unur_distr UNUR_DISTRDefinition TUnuran.h:70; TH1TH1 is the base class of all histogram classes in ROOT.Definition TH1.h:59; TRandomThis is the base class for the ROOT Random number generators.Definition TRandom.h:27; TUnuranContDistTUnuranContDist class describing one dimensional continuous distribution.Definition TUnuranContDist.h:48; TUnuranDiscrDistTUnuranDiscrDist class for one dimensional discrete distribution.Definition TUnuranDiscrDist.h:51; TUnuranEmpDistTUnuranEmpDist class for describing empirical distributions.Definition TUnuranEmpDist.h:49; TUnuranMultiContDistTUnuranMultiContDist class describing multi dimensional continuous distributions.Definition TUnuranMultiContDist.h:47; TUnuranTUnuran class.Definition TUnuran.h:79; TUnuran::GetGenIdstd::string GetGenId() constReturn an ID string about the unuran generator method.Definition TUnuran.cxx:369; TUnuran::IsDistContbool IsDistCont() constReturn true for a univariate continuous distribution.Definition TUnuran.cxx:390; TUnuran::SetMethodAndInitbool SetMethodAndInit()change the method and initialize Unuran with the previously given distributionDefinition TUnuran.cxx:332; TUnuran::SampleDiscrint SampleDiscr()Sample discrete distributions.Definition TUnuran.cxx:407; TUnuran::SetLogStreambool SetLogStream()set stream for log and error (not yet implemented)Definition TUnuran.h:276; TUnuran::MethodNameconst std::string & MethodName() constused Unuran methodDefinition TUnuran.h:281; TUnuran::TUnuranTUnuran(TUnuran &&)=delete; TUnuran::fDiststd::unique_ptr< TUnuranBaseDist > fDistDefinition TUnuran.h:308; TUnuran::SetDiscreteDis,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TUnuran_8h_source.html:12699,continuous,continuous,12699,doc/master/TUnuran_8h_source.html,https://root.cern,https://root.cern/doc/master/TUnuran_8h_source.html,1,['continuous'],['continuous']
Deployability,"tional toy-MC experiments to the current results.; Use the data test statistics of the added object if it is not already; set (otherwise, ignore the new one). void SetAltDistribution(RooStats::SamplingDistribution* alt). void SetNullDistribution(RooStats::SamplingDistribution* null). void SetTestStatisticData(const Double_t tsd). void SetAllTestStatisticsData(const RooArgList* tsd). void SetPValueIsRightTail(Bool_t pr). Bool_t HasTestStatisticData(void). Double_t NullPValueError() const; compute error on Null pvalue. Double_t CLbError() const; compute CLb error; Clb = 1 - NullPValue(); must use opposite condition that routine above. Double_t CLsplusbError() const. Double_t SignificanceError() const; Taylor expansion series approximation for standard deviation (error propagation). Double_t CLsError() const; Returns an estimate of the error on CLs through combination of the; errors on CLb and CLsplusb:. void UpdatePValue(const RooStats::SamplingDistribution* distr, Double_t& pvalue, Double_t& perror, Bool_t pIsRightTail); updates the pvalue if sufficient data is available. void Print(Option_t* = """") const; Print out some information about the results; Note: use Alt/Null labels for the hypotheses here as the Null; might be the s+b hypothesis. Double_t NullPValue() const; Return p-value for null hypothesis. { return fNullPValue; }. Double_t AlternatePValue() const; Return p-value for alternate hypothesis. { return fAlternatePValue; }. Double_t CLb() const; Convert NullPValue into a ""confidence level"". { return !fBackgroundIsAlt ? NullPValue() : AlternatePValue(); }. Double_t CLsplusb() const; Convert AlternatePValue into a ""confidence level"". { return !fBackgroundIsAlt ? AlternatePValue() : NullPValue(); }. Double_t CLs() const; CLs is simply CLs+b/CLb (not a method, but a quantity). Double_t Significance() const; familiar name for the Null p-value in terms of 1-sided Gaussian significance. {return RooStats::PValueToSignificance( NullPValue() ); }. SamplingDistribution* ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__HypoTestResult.html:9984,update,updates,9984,root/html534/RooStats__HypoTestResult.html,https://root.cern,https://root.cern/root/html534/RooStats__HypoTestResult.html,1,['update'],['updates']
Deployability,"tional toy-MC experiments to the current results.; Use the data test statistics of the added object if it is not already; set (otherwise, ignore the new one). void SetAltDistribution(RooStats::SamplingDistribution* alt). void SetNullDistribution(RooStats::SamplingDistribution* null). void SetTestStatisticData(const Double_t tsd). void SetAllTestStatisticsData(const RooArgList* tsd). void SetPValueIsRightTail(Bool_t pr). Bool_t HasTestStatisticData(void). Double_t NullPValueError() const; compute error on Null pvalue. Double_t CLbError() const; compute CLb error; Clb = 1 - NullPValue(); must use opposite condition that routine above. Double_t CLsplusbError() const. Double_t SignificanceError() const; Taylor expansion series approximation for standard deviation (error propagation). Double_t CLsError() const; Returns an estimate of the error on CLs through combination of the; errors on CLb and CLsplusb:. void UpdatePValue(const RooStats::SamplingDistribution* distr, Double_t& pvalue, Double_t& perror, Bool_t pIsRightTail); updates the pvalue if sufficient data is available. void Print(const Option_t* = """") const; Print out some information about the results; Note: use Alt/Null labels for the hypotheses here as the Null; might be the s+b hypothesis. Double_t NullPValue() const; Return p-value for null hypothesis. { return fNullPValue; }. Double_t AlternatePValue() const; Return p-value for alternate hypothesis. { return fAlternatePValue; }. Double_t CLb() const; Convert NullPValue into a ""confidence level"". { return !fBackgroundIsAlt ? NullPValue() : AlternatePValue(); }. Double_t CLsplusb() const; Convert AlternatePValue into a ""confidence level"". { return !fBackgroundIsAlt ? AlternatePValue() : NullPValue(); }. Double_t CLs() const; CLs is simply CLs+b/CLb (not a method, but a quantity). Double_t Significance() const; familiar name for the Null p-value in terms of 1-sided Gaussian significance. {return RooStats::PValueToSignificance( NullPValue() ); }. SamplingDistribu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__HypoTestResult.html:10451,update,updates,10451,root/html602/RooStats__HypoTestResult.html,https://root.cern,https://root.cern/root/html602/RooStats__HypoTestResult.html,2,['update'],['updates']
Deployability,"tionally error on y values and error on coordinates The dimension of the coordinate is free There are 4 different options: ;  CChi2FCNChi2FCN class for binnned fits using the least square methods ;  CDataOptionsDataOptions : simple structure holding the options on how the data are filled ;  CDataRangeClass describing the range in the coordinates it supports multiple range in a coordinate ;  CDummyDeleter;  CFcnAdapter;  CFitConfigClass describing the configuration of the fit, options and parameter settings using the ROOT::Fit::ParameterSettings class ;  CFitDataBase class for all the fit data types: Stores the coordinates and the DataOptions ;  CFitResultClass containg the result of the fit and all the related information (fitted parameter values, error, covariance matrix and minimizer result information) Contains a pointer also to the fitted (model) function, modified with the fit parameter values ;  CFitterFitter class, entry point for performing all type of fits ;  CLogLikelihoodFCNLogLikelihoodFCN class for likelihood fits ;  CParameterSettingsClass, describing value, limits and step size of the parameters Provides functionality also to set/retrieve values, step sizes, limits and fix the parameters ;  CPoissonLikelihoodFCNClass evaluating the log likelihood for binned Poisson likelihood fits it is template to distinguish gradient and non-gradient case ;  CSparseData;  CUnBinDataClass describing the unbinned data sets (just x coordinates values) of any dimensions ;  ►NInternal;  ►NExecutorUtils;  CResultCaster;  CResultCaster< TObject *, F >;  ►NTDF;  CCacheColumnHolder;  CTAction;  CTActionBase;  CTColumnValueHelper class that updates and returns TTree branches as well as TDataFrame temporary columns ;  CTMinReturnTypeThe contained type alias is double if T == TInferType, U if T == std::container<U>, T otherwise ;  CTMinReturnType< T, true >;  CTMinReturnType< TDFDetail::TInferType, false >;  CTSlotStack;  CTTDFValueTuple;  CTTDFValueTuple< TypeList< BranchTypes.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v612/annotated.html:24369,update,updates,24369,doc/v612/annotated.html,https://root.cern,https://root.cern/doc/v612/annotated.html,1,['update'],['updates']
Deployability,"tions inherited from RooCacheManager< RooAbsCacheElement >;  RooCacheManager (const RooCacheManager &other, RooAbsArg *owner=nullptr);  Copy constructor. ;  ;  RooCacheManager (Int_t maxSize=2);  Constructor for simple caches without RooAbsArg payload. ;  ;  RooCacheManager (RooAbsArg *owner, Int_t maxSize=2);  Constructor for simple caches with RooAbsArg derived payload. ;  ;  ~RooCacheManager () override;  Destructor. ;  ; Int_t cacheSize () const;  Return size of cache. ;  ; RooAbsCacheElement * getObj (const RooArgSet *nset, const RooArgSet *iset, Int_t *sterileIdx, const char *isetRangeName);  ; RooAbsCacheElement * getObj (const RooArgSet *nset, const RooArgSet *iset, Int_t *sterileIndex=nullptr, const TNamed *isetRangeName=nullptr);  Retrieve payload object indexed on nset,uset amd isetRangeName If sterileIdx is not null, it is set to the index of the sterile slot in cacse such a slot is recycled. ;  ; RooAbsCacheElement * getObj (const RooArgSet *nset, Int_t *sterileIndex=nullptr, const TNamed *isetRangeName=nullptr);  Getter function without integration set. ;  ; RooAbsCacheElement * getObjByIndex (Int_t index) const;  Retrieve payload object by slot index. ;  ; Int_t lastIndex () const;  Return index of slot used in last get or set operation. ;  ; void reset ();  Clear the cache. ;  ; RooArgSet selectFromSet1 (RooArgSet const &argSet, int index) const;  Create RooArgSet containing the objects that are both in the cached set 1 with a given index and an input argSet. ;  ; RooArgSet selectFromSet2 (RooArgSet const &argSet, int index) const;  Create RooArgSet containing the objects that are both in the cached set 2 with a given index and an input argSet. ;  ; Int_t setObj (const RooArgSet *nset, const RooArgSet *iset, RooAbsCacheElement *obj, const TNamed *isetRangeName=nullptr);  Insert payload object 'obj' in cache indexed on nset,iset and isetRangeName. ;  ; Int_t setObj (const RooArgSet *nset, RooAbsCacheElement *obj, const TNamed *isetRangeName=nullptr); ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooObjCacheManager.html:3479,integrat,integration,3479,doc/master/classRooObjCacheManager.html,https://root.cern,https://root.cern/doc/master/classRooObjCacheManager.html,1,['integrat'],['integration']
Deployability,"tions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TF1 * _func = nullptr;  ; RooListProxy _list;  ;  Protected Attributes inherited from RooAbsPdf; Int_t _errorCount = 0;  Number of errors remaining to print. ;  ; Int_t _negCount = 0;  Number of negative probabilities remaining to print. ;  ; RooAbsReal * _norm = nullptr;  ; RooObjCacheManager _normMgr;  ; TString _normRange;  Normalization range. ;  ; RooArgSet const * _normSet = nullptr;  Normalization integral (owned by _normMgr) ;  ; double _rawValue = 0;  ; bool _selectComp = false;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; std::unique_ptr< RooNumGenConfig > _specGeneratorConfig;  ! MC generator configuration specific for this object ;  ; Int_t _traceCount = 0;  Number of traces remaining to print. ;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; Int_t _plotBins = 100;  Number of plot bins. ;  ; double _plotMax = 0.0;  Maximum of plot range. ;  ; double _plotMin = 0.0;  Minimum of plot range. ;  ; bool _selectComp = true;  A buffer for reading values from trees. ;  ; std::unique_ptr< RooNumIntConfig > _specIntegratorConfig;  ; TreeReadBuffer * _treeReadBuffer = nullptr;  ; TString _unit;  Unit for objects value. ;  ; double _value = 0.0;  Cache for current value of object. ;  ;  Protected Attributes inherited from RooAbsArg; std::set< std::string > _boolAttrib;  ; std::set< std::string > _boolAttribTransient;  ; std::vector< RooAbsCache * > _cacheList;  ; RefCountList_t _clientList;  ; RefCountList_t _clientListShape;  ; RefCountList_t _clientListValue;  ; std::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooTFnPdfBinding.html:67925,integrat,integration,67925,doc/master/classRooTFnPdfBinding.html,https://root.cern,https://root.cern/doc/master/classRooTFnPdfBinding.html,1,['integrat'],['integration']
Deployability,"tions made. Intervals from the sampling method can be asymmetric, and may perform better in the presence of strong correlations, but may take (much) longer to calculate NoteTo include the uncertainty from the expected number of events, the Normalization() argument with ScaleType RooAbsReal::RelativeExpected has to be passed, e.g. pdf.plotOn(frame, VisualizeError(fitResult), Normalization(1.0, RooAbsReal::RelativeExpected));; RooAbsReal::RelativeExpected@ RelativeExpectedDefinition RooAbsReal.h:276. VisualizeError(const RooFitResult& fitres, const RooArgSet& param, double Z=1, bool linearMethod=true) Visualize the uncertainty on the subset of parameters 'param', as given in fitres, at 'Z' sigma . Reimplemented from RooAbsPdf.; Definition at line 133 of file RooAbsPdf.cxx. ◆ plotOn() [5/5]. RooPlot * RooSimultaneous::plotOn ; (; RooPlot * ; frame, . RooLinkedList & ; cmdList . ); const. overridevirtual . Back-end for plotOn() implementation on RooSimultaneous which needs special handling because a RooSimultaneous PDF cannot project out its index category via integration. ; plotOn() will abort if this is requested without providing a projection dataset. ; Reimplemented from RooAbsPdf.; Definition at line 597 of file RooSimultaneous.cxx. ◆ selectNormalization(). void RooSimultaneous::selectNormalization ; (; const RooArgSet * ; normSet = nullptr, . bool ; force = false . ). overrideprotectedvirtual . Interface function used by test statistics to freeze choice of observables for interpretation of fraction coefficients. ; Needed here because a RooSimultaneous works like a RooAddPdf when plotted ; Reimplemented from RooAbsReal.; Definition at line 938 of file RooSimultaneous.cxx. ◆ selectNormalizationRange(). void RooSimultaneous::selectNormalizationRange ; (; const char * ; normRange2 = nullptr, . bool ; force = false . ). overrideprotectedvirtual . Interface function used by test statistics to freeze choice of range for interpretation of fraction coefficients. ; Needed h",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooSimultaneous.html:98069,integrat,integration,98069,doc/master/classRooSimultaneous.html,https://root.cern,https://root.cern/doc/master/classRooSimultaneous.html,1,['integrat'],['integration']
Deployability,"tions of the parameter values, as drawn from a multi-variate Gaussian p.d.f. that is constructed; from the fit results covariance matrix. The error(x) is determined by calculating a central interval that capture N% of the variations; for each valye of x, where N% is controlled by Z (i.e. Z=1 gives N=68%). The number of sampling curves is chosen to be such; that at least 30 curves are expected to be outside the N% interval, and is minimally 100 (e.g. Z=1->Ncurve=100, Z=2->Ncurve=659, Z=3->Ncurve=11111); Intervals from the sampling method can be asymmetric, and may perform better in the presence of strong correlations, but may take (much); longer to calculate. RooPlot* plotOn(RooPlot* frame, RooLinkedList& argList); Internal back-end function of plotOn() with named arguments. RooPlot* plotOn(RooPlot *frame, PlotOpt o); Plotting engine function for internal use. Plot ourselves on given frame. If frame contains a histogram, all dimensions of the plotted; function that occur in the previously plotted dataset are projected via partial integration,; otherwise no projections are performed. Optionally, certain projections can be performed; by summing over the values present in a provided dataset ('projData'), to correctly; project out data dependents that are not properly described by the PDF (e.g. per-event errors). The functions value can be multiplied with an optional scale factor. The interpretation; of the scale factor is unique for generic real functions, for PDFs there are various interpretations; possible, which can be selection with 'stype' (see RooAbsPdf::plotOn() for details). The default projection behaviour can be overriden by supplying an optional set of dependents; to project. For most cases, plotSliceOn() and plotProjOn() provide a more intuitive interface; to modify the default projection behavour. RooPlot* plotSliceOn(RooPlot* frame, const RooArgSet& sliceSet, Option_t* drawOptions = ""L"", Double_t scaleFactor = 1.0, RooAbsReal::ScaleType stype = Relative, c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsReal.html:50230,integrat,integration,50230,root/html526/RooAbsReal.html,https://root.cern,https://root.cern/root/html526/RooAbsReal.html,1,['integrat'],['integration']
Deployability,tions! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; UInt_tTGMainFrame::fMWMFuncsMWM functions; UInt_tTGMainFrame::fMWMInputMWM input modes; UInt_tTGMainFrame::fMWMValueMWM decoration hints; Bool_tTGCompositeFrame::fMapSubwindowskTRUE - map subwindows; UInt_tTGFrame::fMaxHeightmaximal frame height; UInt_tTGFrame::fMaxWidthmaximal frame width; UInt_tTGFrame::fMinHeightminimal frame height; UInt_tTGFrame::fMinWidthminimal frame width; Int_tTGCompositeFrame::fMustCleanupcleanup mode (see EFrameCleanup); TStringTGWindow::fNamename of the window used in SavePrimitive(); Bool_tTGWindow::fNeedRedrawkTRUE if window needs to be redrawn; UInt_tTGFrame::fOptionsframe options; const TGWindow*TGWindow::fParentParent window; Int_tfPidcurrent process id; TStringTGMainFrame::fResourceNameWM resource name; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; TGTextView*fStatusoutput capture view; TTimer*fTimerfor local/remote update; UInt_tTGMainFrame::fWMHeightWM height; UInt_tTGMainFrame::fWMHeightIncWM height increments; EInitialStateTGMainFrame::fWMInitStateWM initial state; UInt_tTGMainFrame::fWMMaxHeightWM max height; UInt_tTGMainFrame::fWMMaxWidthWM max width; UInt_tTGMainFrame::fWMMinHeightWM min height; UInt_tTGMainFrame::fWMMinWidthWM min width; UInt_tTGMainFrame::fWMWidthWM width; UInt_tTGMainFrame::fWMWidthIncWM width increments; Int_tTGMainFrame::fWMXWM x position; Int_tTGMainFrame::fWMYWM y position; UInt_tTGFrame::fWidthframe width; TStringTGMainFrame::fWindowNamewindow name; Int_tTGFrame::fXframe x position; Int_tTGFrame::fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby;,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGCommandPlugin.html:20040,update,update,20040,root/html528/TGCommandPlugin.html,https://root.cern,https://root.cern/root/html528/TGCommandPlugin.html,6,['update'],['update']
Deployability,"tions() const; virtual stringIntegrator() const; ROOT::Math::BaseIntegratorOptions&operator=(const ROOT::Math::BaseIntegratorOptions& opt); doubleRelTolerance() const; voidSetAbsTolerance(double tol); voidSetExtraOptions(const ROOT::Math::IOptions& opt); voidSetRelTolerance(double tol); voidSetWKSize(unsigned int size); unsigned intWKSize() const. protected:. voidClearExtra(). Data Members; protected:. doublefAbsToleranceabsolute tolerance ; ROOT::Math::IOptions*fExtraOptionsextra options ; intfIntegTypeIntegrator type (value converted from enum); unsigned intfNCalls(max) funxtion calls; doublefRelTolerancerelative tolerance ; unsigned intfWKSizeworkspace size. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseIntegratorOptions & operator=(const ROOT::Math::BaseIntegratorOptions& opt); assignment operators. virtual ~BaseIntegratorOptions(); protected constructor to avoid user creating this class. { ClearExtra(); }. std::string Integrator() const; name of 1D integrator. double AbsTolerance() const; non-static methods for retrivieng options ; absolute tolerance. { return fAbsTolerance; }. double RelTolerance() const; absolute tolerance. { return fRelTolerance; }. unsigned int WKSize() const; size of the workspace. { return fWKSize; }. IOptions * ExtraOptions() const; return extra options. { return fExtraOptions; }. void SetAbsTolerance(double tol); non-static methods for setting options ; set the abs tolerance. { fAbsTolerance = tol; }. void SetRelTolerance(double tol); set the relative tolerance. { fRelTolerance = tol; }. void SetWKSize(unsigned int size); set workspace size. { fWKSize = size; }. void SetExtraOptions(const ROOT::Math::IOptions& opt); set extra options (in this case pointer is cloned). void ClearExtra(). » Author: L. Moneta Fri Aug 15 2008 » Copyright (c) 2008 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 16:58; This page has been automatically generated. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Math__BaseIntegratorOptions.html:1778,integrat,integrator,1778,root/html534/ROOT__Math__BaseIntegratorOptions.html,https://root.cern,https://root.cern/root/html534/ROOT__Math__BaseIntegratorOptions.html,1,['integrat'],['integrator']
Deployability,"tions() const; virtual stringIntegrator() const; ROOT::Math::BaseIntegratorOptions&operator=(const ROOT::Math::BaseIntegratorOptions& opt); doubleRelTolerance() const; voidSetAbsTolerance(double tol); voidSetExtraOptions(const ROOT::Math::IOptions& opt); voidSetRelTolerance(double tol); voidSetWKSize(unsigned int size); unsigned intWKSize() const. protected:. voidClearExtra(). Data Members; protected:. doublefAbsToleranceabsolute tolerance ; ROOT::Math::IOptions*fExtraOptionsextra options ; intfIntegTypeIntegrator type (value converted from enum); unsigned intfNCalls(max) funxtion calls; doublefRelTolerancerelative tolerance ; unsigned intfWKSizeworkspace size. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseIntegratorOptions & operator=(const ROOT::Math::BaseIntegratorOptions& opt); assignment operators. virtual ~BaseIntegratorOptions(); protected constructor to avoid user creating this class. { ClearExtra(); }. std::string Integrator() const; name of 1D integrator. double AbsTolerance() const; non-static methods for retrivieng options ; absolute tolerance. { return fAbsTolerance; }. double RelTolerance() const; absolute tolerance. { return fRelTolerance; }. unsigned int WKSize() const; size of the workspace. { return fWKSize; }. IOptions * ExtraOptions() const; return extra options. { return fExtraOptions; }. void SetAbsTolerance(double tol); non-static methods for setting options ; set the abs tolerance. { fAbsTolerance = tol; }. void SetRelTolerance(double tol); set the relative tolerance. { fRelTolerance = tol; }. void SetWKSize(unsigned int size); set workspace size. { fWKSize = size; }. void SetExtraOptions(const ROOT::Math::IOptions& opt); set extra options (in this case pointer is cloned). void ClearExtra(). » Author: L. Moneta Fri Aug 15 2008 » Copyright (c) 2008 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id: IntegratorOptions.h 36806 2010-11-20 11:09:14Z moneta $ » Last generated: 2010-1",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__BaseIntegratorOptions.html:1776,integrat,integrator,1776,root/html528/ROOT__Math__BaseIntegratorOptions.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__BaseIntegratorOptions.html,1,['integrat'],['integrator']
Deployability,"tions() const; virtual stringIntegrator() const; ROOT::Math::BaseIntegratorOptions&operator=(const ROOT::Math::BaseIntegratorOptions& opt); doubleRelTolerance() const; voidSetAbsTolerance(double tol); voidSetExtraOptions(const ROOT::Math::IOptions& opt); voidSetRelTolerance(double tol); voidSetWKSize(unsigned int size); unsigned intWKSize() const. protected:. voidClearExtra(). Data Members; protected:. doublefAbsToleranceabsolute tolerance ; ROOT::Math::IOptions*fExtraOptionsextra options ; intfIntegTypeIntegrator type (value converted from enum); unsigned intfNCalls(max) funxtion calls; doublefRelTolerancerelative tolerance ; unsigned intfWKSizeworkspace size. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseIntegratorOptions & operator=(const ROOT::Math::BaseIntegratorOptions& opt); assignment operators. virtual ~BaseIntegratorOptions(); protected constructor to avoid user creating this class. { ClearExtra(); }. std::string Integrator() const; name of 1D integrator. double AbsTolerance() const; non-static methods for retrivieng options ; absolute tolerance. { return fAbsTolerance; }. double RelTolerance() const; absolute tolerance. { return fRelTolerance; }. unsigned int WKSize() const; size of the workspace. { return fWKSize; }. IOptions * ExtraOptions() const; return extra options. { return fExtraOptions; }. void SetAbsTolerance(double tol); non-static methods for setting options ; set the abs tolerance. { fAbsTolerance = tol; }. void SetRelTolerance(double tol); set the relative tolerance. { fRelTolerance = tol; }. void SetWKSize(unsigned int size); set workspace size. { fWKSize = size; }. void SetExtraOptions(const ROOT::Math::IOptions& opt); set extra options (in this case pointer is cloned). void ClearExtra(). » Author: L. Moneta Fri Aug 15 2008 » Copyright (c) 2008 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id: IntegratorOptions.h 36806 2010-11-20 11:09:14Z moneta $ » Last generated: 2011-0",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ROOT__Math__BaseIntegratorOptions.html:1778,integrat,integrator,1778,root/html530/ROOT__Math__BaseIntegratorOptions.html,https://root.cern,https://root.cern/root/html530/ROOT__Math__BaseIntegratorOptions.html,1,['integrat'],['integrator']
Deployability,"tions() const; virtual stringIntegrator() const; ROOT::Math::BaseIntegratorOptions&operator=(const ROOT::Math::BaseIntegratorOptions& opt); doubleRelTolerance() const; voidSetAbsTolerance(double tol); voidSetExtraOptions(const ROOT::Math::IOptions& opt); voidSetRelTolerance(double tol); voidSetWKSize(unsigned int size); unsigned intWKSize() const. protected:. voidClearExtra(). Data Members; protected:. doublefAbsToleranceabsolute tolerance ; ROOT::Math::IOptions*fExtraOptionsextra options ; intfIntegTypeIntegrator type (value converted from enum); unsigned intfNCalls(max) funxtion calls; doublefRelTolerancerelative tolerance ; unsigned intfWKSizeworkspace size. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseIntegratorOptions & operator=(const ROOT::Math::BaseIntegratorOptions& opt); assignment operators. virtual ~BaseIntegratorOptions(); protected constructor to avoid user creating this class. { ClearExtra(); }. std::string Integrator() const; name of 1D integrator. double AbsTolerance() const; non-static methods for retrivieng options ; absolute tolerance. { return fAbsTolerance; }. double RelTolerance() const; absolute tolerance. { return fRelTolerance; }. unsigned int WKSize() const; size of the workspace. { return fWKSize; }. IOptions * ExtraOptions() const; return extra options. { return fExtraOptions; }. void SetAbsTolerance(double tol); non-static methods for setting options ; set the abs tolerance. { fAbsTolerance = tol; }. void SetRelTolerance(double tol); set the relative tolerance. { fRelTolerance = tol; }. void SetWKSize(unsigned int size); set workspace size. { fWKSize = size; }. void SetExtraOptions(const ROOT::Math::IOptions& opt); set extra options (in this case pointer is cloned). void ClearExtra(). » Author: L. Moneta Fri Aug 15 2008 » Copyright (c) 2008 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id: IntegratorOptions.h 36806 2010-11-20 11:09:14Z moneta $ » Last generated: 2011-1",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ROOT__Math__BaseIntegratorOptions.html:1778,integrat,integrator,1778,root/html532/ROOT__Math__BaseIntegratorOptions.html,https://root.cern,https://root.cern/root/html532/ROOT__Math__BaseIntegratorOptions.html,1,['integrat'],['integrator']
Deployability,"tions; Then, a minimization is used with starting values found by the grid search; The minimizer algorithm used (by default Minuit) can be changed by callinga; ROOT::Math::Minimizer::SetDefaultMinimizerType(""..""); Other option for the minimizer can be set using the static method of the MinimizerOptions class. Double_t GetMaximum(Double_t* x) const; return maximum value of the function; See TF2::GetMinimum. char * GetObjectInfo(Int_t px, Int_t py) const; Redefines TObject::GetObjectInfo.; Displays the function value; corresponding to cursor position px,py. Double_t GetRandom(); Return a random number following this function shape*-; *-* ====================================================; -. Double_t GetRandom(Double_t xmin, Double_t xmax); Return a random number following this function shape*-; *-* ====================================================; -. void GetRandom2(Double_t& xrandom, Double_t& yrandom); Return 2 random numbers following this function shape; *-* =====================================================; -; *-* The distribution contained in this TF2 function is integrated; *-* over the cell contents.; *-* It is normalized to 1.; *-* Getting the two random numbers implies:; *-* - Generating a random number between 0 and 1 (say r1); *-* - Look in which cell in the normalized integral r1 corresponds to; *-* - make a linear interpolation in the returned cell; -; -; *-* IMPORTANT NOTE; *-* The integral of the function is computed at fNpx * fNpy points.; *-* If the function has sharp peaks, you should increase the number of; *-* points (SetNpx, SetNpy) such that the peak is correctly tabulated; *-* at several points. void GetRange(Double_t& xmin, Double_t& ymin, Double_t& xmax, Double_t& ymax) const; Return range of a 2-D function*-*-; *-* ==============================. void GetRange(Double_t& xmin, Double_t& ymin, Double_t& zmin, Double_t& xmax, Double_t& ymax, Double_t& zmax) const; Return range of function*-*-*-*-; *-* ========================. Double_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TF2.html:28864,integrat,integrated,28864,root/html604/TF2.html,https://root.cern,https://root.cern/root/html604/TF2.html,1,['integrat'],['integrated']
Deployability,"tiple values of the Poisson distribution. ; Reimplemented from RooAbsReal.; Definition at line 78 of file RooPoisson.cxx. ◆ evaluate(). double RooPoisson::evaluate ; (; ); const. overrideprotectedvirtual . Implementation in terms of the TMath::Poisson() function. ; Implements RooAbsReal.; Definition at line 56 of file RooPoisson.cxx. ◆ generateEvent(). void RooPoisson::generateEvent ; (; Int_t ; code). overridevirtual . Implement internal generator using TRandom::Poisson. ; Reimplemented from RooAbsPdf.; Definition at line 133 of file RooPoisson.cxx. ◆ getAnalyticalIntegral(). Int_t RooPoisson::getAnalyticalIntegral ; (; RooArgSet & ; allVars, . RooArgSet & ; analVars, . const char * ; rangeName = nullptr . ); const. overridevirtual . Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ; 'integSet' is the set of dependents for which integration is requested. The function should copy the subset of dependents it can analytically integrate to anaIntSet and return a unique identification code for this integration configuration. If no integration can be performed, zero should be returned. ; Reimplemented from RooAbsReal.; Definition at line 87 of file RooPoisson.cxx. ◆ getGenerator(). Int_t RooPoisson::getGenerator ; (; const RooArgSet & ; directVars, . RooArgSet & ; generateVars, . bool ; staticInitOK = true . ); const. overridevirtual . Advertise internal generator in x. ; Reimplemented from RooAbsPdf.; Definition at line 124 of file RooPoisson.cxx. ◆ getMean(). RooAbsReal const & RooPoisson::getMean ; (; ); const. inline . Get the mean parameter. ; Definition at line 46 of file RooPoisson.h. ◆ getNoRounding(). bool RooPoisson::getNoRounding ; (; ); const. inline . Definition at line 37 of file RooPoisson.h. ◆ getX(). RooAbsReal const & RooPoisson::getX ; (; ); const. inline . Get the x variable. ; Definition at line 43 of file RooPoisson.h. ◆ IsA(). TClass * RooPoisson::IsA ; (; ); const. inlineoverridevirtual . ReturnsTCla",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooPoisson.html:77506,integrat,integrate,77506,doc/master/classRooPoisson.html,https://root.cern,https://root.cern/doc/master/classRooPoisson.html,3,"['configurat', 'integrat']","['configuration', 'integrate', 'integration']"
Deployability,"tiple; arguments). The initial value expression is taken to be; 'expression' which can be any one-line C++ expression in terms of; variables that occur in 'vars'. Skeleton code for handling of; analytical integrals is added if hasAnaInt is true. You can add; optional expressions for analytical integrals to be advertised by; your class in the syntax; ""<intObsName>:<CPPAnaIntExpression>;<intObsName,intObsName>:<CPPAnaIntExpression>""; where <intObsName> a name of the observable integrated over and; <CPPAnaIntExpression> is the C++ expression that calculates that; integral. Bool_t makeClass(const char* className, const char* name, const char* realArgNames = 0, const char* catArgNames = 0, const char* expression = ""1.0"", Bool_t hasAnaInt = kFALSE, Bool_t hasIntGen = kFALSE, const char* intExpression = 0); Write code for a 'baseName' implementation with class name 'className',; taking RooAbsReal arguments with names listed in argNames and; RooAbsCategory arguments with names listed in catArgNames as; constructor arguments (use a comma separated list for multiple; arguments). The initial value expression is taken to be; 'expression' which can be any one-line C++ expression in terms of; variables that occur in 'vars'. Skeleton code for handling of; analytical integrals is added if hasAnaInt is true. You can add; optional expressions for analytical integrals to be advertised by; your class in the syntax; ""<intObsName>:<CPPAnaIntExpression>;<intObsName,intObsName>:<CPPAnaIntExpression>""; where <intObsName> a name of the observable integrated over and; <CPPAnaIntExpression> is the C++ expression that calculates that; integral. Skeleton code for internal event generation is added; if hasIntGen is true. RooClassFactory(); Constructors, assignment etc. » Last changed: Mon Dec 7 13:47:10 2009 » Last generated: 2009-12-07 13:47; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooClassFactory.html:16688,integrat,integrated,16688,root/html526/RooClassFactory.html,https://root.cern,https://root.cern/root/html526/RooClassFactory.html,1,['integrat'],['integrated']
Deployability,"tiple; arguments). The initial value expression is taken to be; 'expression' which can be any one-line C++ expression in terms of; variables that occur in 'vars'. Skeleton code for handling of; analytical integrals is added if hasAnaInt is true. You can add; optional expressions for analytical integrals to be advertised by; your class in the syntax; ""<intObsName>:<CPPAnaIntExpression>;<intObsName,intObsName>:<CPPAnaIntExpression>""; where <intObsName> a name of the observable integrated over and; <CPPAnaIntExpression> is the C++ expression that calculates that; integral. Bool_t makeClass(const char* className, const char* name, const char* realArgNames = 0, const char* catArgNames = 0, const char* expression = ""1.0"", Bool_t hasAnaInt = kFALSE, Bool_t hasIntGen = kFALSE, const char* intExpression = 0); Write code for a 'baseName' implementation with class name 'className',; taking RooAbsReal arguments with names listed in argNames and; RooAbsCategory arguments with names listed in catArgNames as; constructor arguments (use a comma separated list for multiple; arguments). The initial value expression is taken to be; 'expression' which can be any one-line C++ expression in terms of; variables that occur in 'vars'. Skeleton code for handling of; analytical integrals is added if hasAnaInt is true. You can add; optional expressions for analytical integrals to be advertised by; your class in the syntax; ""<intObsName>:<CPPAnaIntExpression>;<intObsName,intObsName>:<CPPAnaIntExpression>""; where <intObsName> a name of the observable integrated over and; <CPPAnaIntExpression> is the C++ expression that calculates that; integral. Skeleton code for internal event generation is added; if hasIntGen is true. RooClassFactory(); Constructors, assignment etc. » Last changed: Mon Jul 4 15:22:29 2011 » Last generated: 2011-07-04 15:22; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooClassFactory.html:16743,integrat,integrated,16743,root/html530/RooClassFactory.html,https://root.cern,https://root.cern/root/html530/RooClassFactory.html,1,['integrat'],['integrated']
Deployability,"tiple; arguments). The initial value expression is taken to be; 'expression' which can be any one-line C++ expression in terms of; variables that occur in 'vars'. Skeleton code for handling of; analytical integrals is added if hasAnaInt is true. You can add; optional expressions for analytical integrals to be advertised by; your class in the syntax; ""<intObsName>:<CPPAnaIntExpression>;<intObsName,intObsName>:<CPPAnaIntExpression>""; where <intObsName> a name of the observable integrated over and; <CPPAnaIntExpression> is the C++ expression that calculates that; integral. Bool_t makeClass(const char* className, const char* name, const char* realArgNames = 0, const char* catArgNames = 0, const char* expression = ""1.0"", Bool_t hasAnaInt = kFALSE, Bool_t hasIntGen = kFALSE, const char* intExpression = 0); Write code for a 'baseName' implementation with class name 'className',; taking RooAbsReal arguments with names listed in argNames and; RooAbsCategory arguments with names listed in catArgNames as; constructor arguments (use a comma separated list for multiple; arguments). The initial value expression is taken to be; 'expression' which can be any one-line C++ expression in terms of; variables that occur in 'vars'. Skeleton code for handling of; analytical integrals is added if hasAnaInt is true. You can add; optional expressions for analytical integrals to be advertised by; your class in the syntax; ""<intObsName>:<CPPAnaIntExpression>;<intObsName,intObsName>:<CPPAnaIntExpression>""; where <intObsName> a name of the observable integrated over and; <CPPAnaIntExpression> is the C++ expression that calculates that; integral. Skeleton code for internal event generation is added; if hasIntGen is true. RooClassFactory(); Constructors, assignment etc. » Last changed: Sat Oct 9 22:38:38 2010 » Last generated: 2010-10-09 22:38; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooClassFactory.html:16674,integrat,integrated,16674,root/html528/RooClassFactory.html,https://root.cern,https://root.cern/root/html528/RooClassFactory.html,1,['integrat'],['integrated']
Deployability,"tiple; arguments). The initial value expression is taken to be; 'expression' which can be any one-line C++ expression in terms of; variables that occur in 'vars'. Skeleton code for handling of; analytical integrals is added if hasAnaInt is true. You can add; optional expressions for analytical integrals to be advertised by; your class in the syntax; ""<intObsName>:<CPPAnaIntExpression>;<intObsName,intObsName>:<CPPAnaIntExpression>""; where <intObsName> a name of the observable integrated over and; <CPPAnaIntExpression> is the C++ expression that calculates that; integral. Bool_t makeClass(const char* className, const char* name, const char* realArgNames = 0, const char* catArgNames = 0, const char* expression = ""1.0"", Bool_t hasAnaInt = kFALSE, Bool_t hasIntGen = kFALSE, const char* intExpression = 0); Write code for a 'baseName' implementation with class name 'className',; taking RooAbsReal arguments with names listed in argNames and; RooAbsCategory arguments with names listed in catArgNames as; constructor arguments (use a comma separated list for multiple; arguments). The initial value expression is taken to be; 'expression' which can be any one-line C++ expression in terms of; variables that occur in 'vars'. Skeleton code for handling of; analytical integrals is added if hasAnaInt is true. You can add; optional expressions for analytical integrals to be advertised by; your class in the syntax; ""<intObsName>:<CPPAnaIntExpression>;<intObsName,intObsName>:<CPPAnaIntExpression>""; where <intObsName> a name of the observable integrated over and; <CPPAnaIntExpression> is the C++ expression that calculates that; integral. Skeleton code for internal event generation is added; if hasIntGen is true. RooClassFactory(); Constructors, assignment etc. » Last changed: Thu Nov 3 20:07:47 2011 » Last generated: 2011-11-03 20:07; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooClassFactory.html:16743,integrat,integrated,16743,root/html532/RooClassFactory.html,https://root.cern,https://root.cern/root/html532/RooClassFactory.html,1,['integrat'],['integrated']
Deployability,"tiple; arguments). The initial value expression is taken to be; 'expression' which can be any one-line C++ expression in terms of; variables that occur in 'vars'. Skeleton code for handling of; analytical integrals is added if hasAnaInt is true. You can add; optional expressions for analytical integrals to be advertised by; your class in the syntax; ""<intObsName>:<CPPAnaIntExpression>;<intObsName,intObsName>:<CPPAnaIntExpression>""; where <intObsName> a name of the observable integrated over and; <CPPAnaIntExpression> is the C++ expression that calculates that; integral. Bool_t makeClass(const char* className, const char* name, const char* realArgNames = 0, const char* catArgNames = 0, const char* expression = ""1.0"", Bool_t hasAnaInt = kFALSE, Bool_t hasIntGen = kFALSE, const char* intExpression = 0); Write code for a 'baseName' implementation with class name 'className',; taking RooAbsReal arguments with names listed in argNames and; RooAbsCategory arguments with names listed in catArgNames as; constructor arguments (use a comma separated list for multiple; arguments). The initial value expression is taken to be; 'expression' which can be any one-line C++ expression in terms of; variables that occur in 'vars'. Skeleton code for handling of; analytical integrals is added if hasAnaInt is true. You can add; optional expressions for analytical integrals to be advertised by; your class in the syntax; ""<intObsName>:<CPPAnaIntExpression>;<intObsName,intObsName>:<CPPAnaIntExpression>""; where <intObsName> a name of the observable integrated over and; <CPPAnaIntExpression> is the C++ expression that calculates that; integral. Skeleton code for internal event generation is added; if hasIntGen is true. RooClassFactory(); Constructors, assignment etc. » Last changed: Tue Jun 2 15:30:00 2015 » Last generated: 2015-06-02 15:30; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/RooClassFactory.html:17770,integrat,integrated,17770,root/html604/RooClassFactory.html,https://root.cern,https://root.cern/root/html604/RooClassFactory.html,1,['integrat'],['integrated']
Deployability,"tire normalization logic of each PDF with; 60the help of a RooRealIntegral object, which coordinates the integration; 61of a given choice of normalization. By default, RooRealIntegral will; 62perform an entirely numeric integration of all dependents. However,; 63PDFs can advertise one or more (partial) analytical integrals of; 64their function, and these will be used by RooRealIntegral, if it; 65determines that this is safe (i.e., no hidden Jacobian terms,; 66multiplication with other PDFs that have one or more dependents in; 67common, etc).; 68 ; 69#### Implementing analytical integrals; 70To implement analytical integrals, two functions must be implemented. First,; 71 ; 72```; 73Int_t getAnalyticalIntegral(const RooArgSet& integSet, RooArgSet& anaIntSet); 74```; 75should return the analytical integrals that are supported. `integSet`; 76is the set of dependents for which integration is requested. The; 77function should copy the subset of dependents it can analytically; 78integrate to `anaIntSet`, and return a unique identification code for; 79this integration configuration. If no integration can be; 80performed, zero should be returned. Second,; 81 ; 82```; 83double analyticalIntegral(Int_t code); 84```; 85 ; 86implements the actual analytical integral(s) advertised by; 87`getAnalyticalIntegral()`. This function will only be called with; 88codes returned by `getAnalyticalIntegral()`, except code zero.; 89 ; 90The integration range for each dependent to be integrated can; 91be obtained from the dependent's proxy functions `min()` and; 92`max()`. Never call these proxy functions for any proxy not known to; 93be a dependent via the integration code. Doing so may be; 94ill-defined, e.g., in case the proxy holds a function, and will; 95trigger an assert. Integrated category dependents should always be; 96summed over all of their states.; 97 ; 98 ; 99 ; 100### Direct generation of observables; 101 ; 102Distributions for any PDF can be generated with the accept/reject meth",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:4029,integrat,integration,4029,doc/master/RooAbsPdf_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html,2,"['configurat', 'integrat']","['configuration', 'integration']"
Deployability,"titions); 252 , fMinimizerType (_eMinimizerType); 253 , m_convergenceCount (0); 254 , m_maxConvergenceCount (0); 255 , m_minError (1e10); 256 , m_useMultithreading (_useMultithreading); 257 , fMonitoring (NULL); 258 {; 259 }; 260 ; 261 Settings::~Settings () ; 262 {; 263 }; 264 ; 265 ; 266 ; 267 ; 268 ; 269 ; 270 ; 271 ; 272 ; 273 ; 274 ; 275 ; 276 ; 277 ; 278 /** \brief action to be done when the training cycle is started (e.g. update some monitoring output); 279 *; 280 */; 281 void ClassificationSettings::startTrainCycle () ; 282 {; 283 if (fMonitoring); 284 {; 285 create (""ROC"", 100, 0, 1, 100, 0, 1);; 286 create (""Significance"", 100, 0, 1, 100, 0, 3);; 287 create (""OutputSig"", 100, 0, 1);; 288 create (""OutputBkg"", 100, 0, 1);; 289 fMonitoring->ProcessEvents ();; 290 }; 291 }; 292 ; 293 /** \brief action to be done when the training cycle is ended (e.g. update some monitoring output); 294 *; 295 */; 296 void ClassificationSettings::endTrainCycle (double /*error*/) ; 297 {; 298 if (fMonitoring) fMonitoring->ProcessEvents ();; 299 }; 300 ; 301 /** \brief action to be done after the computation of a test sample (e.g. update some monitoring output); 302 *; 303 */; 304 void ClassificationSettings::testSample (double /*error*/, double output, double target, double weight); 305 {; 306 ; 307 m_output.push_back (output);; 308 m_targets.push_back (target);; 309 m_weights.push_back (weight);; 310 }; 311 ; 312 ; 313 /** \brief action to be done when the test cycle is started (e.g. update some monitoring output); 314 *; 315 */; 316 void ClassificationSettings::startTestCycle () ; 317 {; 318 m_output.clear ();; 319 m_targets.clear ();; 320 m_weights.clear ();; 321 }; 322 ; 323 /** \brief action to be done when the training cycle is ended (e.g. update some monitoring output); 324 *; 325 */; 326 void ClassificationSettings::endTestCycle () ; 327 {; 328 if (m_output.empty ()); 329 return;; 330 double minVal = *std::min_element (begin (m_output), end (m_output));; 331 double maxVa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/NeuralNet_8cxx_source.html:11367,update,update,11367,doc/master/NeuralNet_8cxx_source.html,https://root.cern,https://root.cern/doc/master/NeuralNet_8cxx_source.html,1,['update'],['update']
Deployability,"tive one-dimensional numerical integration algorithm ;  CRooBinnedGenContextRooBinnedGenContext is an efficient implementation of the generator context specific for binned pdfs ;  CRooBinningClass RooBinning is an implements RooAbsBinning in terms of an array of boundary values, posing no constraints on the choice of binning, thus allowing variable bin sizes ;  CRooBinningCategoryClass RooBinningCategory provides a real-to-category mapping defined by a series of thresholds ;  CRooBlindTools;  CRooBMixDecayClass RooBMixDecay is a RooAbsAnaConvPdf implementation that describes the decay of B mesons with the effects of B0/B0bar mixing ;  CRooBreitWignerClass RooBreitWigner is a RooAbsPdf implementation that models a non-relativistic Breit-Wigner shape ;  CRooBrentRootFinderImplement the abstract 1-dimensional root finding interface using the Brent-Decker method ;  CRooBukinPdfRooBukinPdf implements the NovosibirskA function ;  CRooCachedPdfRooCachedPdf is an implementation of RooAbsCachedPdf that can cache any external RooAbsPdf input function provided in the constructor ;  CRooCachedRealRooCachedReal is an implementation of RooAbsCachedReal that can cache any external RooAbsReal input function provided in the constructor ;  CRooCacheManagerTemplate class RooCacheManager manages the storage of any type of data indexed on the choice of normalization and optionally the set of integrated observables ;  CRooCategoryRooCategory represents a fundamental (non-derived) discrete value object ;  CRooCategoryProxyRooCategoryProxy is the proxy implementation for RooAbsCategory objects A RooCategoryProxy is the general mechanism to store references to RooAbsCategoriess inside a RooAbsArg ;  CRooCategorySharedPropertiesRooCategorySharedProperties is the container for all properties that are shared between instance of RooCategory objects that are clones of each other ;  CRooCatTypeRooCatType is an auxilary class for RooAbsCategory and defines a a single category state ;  CRooCBShapeP.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/annotated.html:83269,integrat,integrated,83269,doc/v608/annotated.html,https://root.cern,https://root.cern/doc/v608/annotated.html,5,['integrat'],['integrated']
Deployability,"tiveGaussKronrodIntegrator1D(); coverity[UNINIT_CTOR]; Default constructor. RooAdaptiveGaussKronrodIntegrator1D(const RooAbsFunc& function, const RooNumIntConfig& config); Constructor taking a function binding and a configuration object. RooAdaptiveGaussKronrodIntegrator1D(const RooAbsFunc& function, Double_t xmin, Double_t xmax, const RooNumIntConfig& config); Constructor taking a function binding, an integration range and a configuration object. RooAbsIntegrator* clone(const RooAbsFunc& function, const RooNumIntConfig& config) const; Virtual constructor. Bool_t initialize(); Initialize integrator allocate buffers and setup GSL workspace. ~RooAdaptiveGaussKronrodIntegrator1D(); Destructor. Bool_t setLimits(Double_t* xmin, Double_t* xmax); Change our integration limits. Return kTRUE if the new limits are; ok, or otherwise kFALSE. Always returns kFALSE and does nothing; if this object was constructed to always use our integrand's limits. Bool_t checkLimits() const; Check that our integration range is finite and otherwise return kFALSE.; Update the limits from the integrand if requested. Double_t integral(const Double_t* yvec = 0); Calculate and return integral at at given parameter values. RooAdaptiveGaussKronrodIntegrator1D(); Constructors, assignment etc. Bool_t setUseIntegrandLimits(Bool_t flag); If flag is true, intergration limits are taken from definition in input function binding. Bool_t canIntegrate1D() const; We can integrate 1-dimensional functions. Bool_t canIntegrate2D() const; We can not integrate 2-dimensional functions. Bool_t canIntegrateND() const; We can not integrate >2-dimensional functions. Bool_t canIntegrateOpenEnded() const; We can integrate over open-ended domains. Double_t* xvec(Double_t& xx); Return contents of xx in internal array pointer. » Last changed: Mon Jul 4 15:21:33 2011 » Last generated: 2011-07-04 15:21; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooAdaptiveGaussKronrodIntegrator1D.html:9424,integrat,integration,9424,root/html530/RooAdaptiveGaussKronrodIntegrator1D.html,https://root.cern,https://root.cern/root/html530/RooAdaptiveGaussKronrodIntegrator1D.html,1,['integrat'],['integration']
Deployability,"tiveGaussKronrodIntegrator1D(); coverity[UNINIT_CTOR]; Default constructor. RooAdaptiveGaussKronrodIntegrator1D(const RooAbsFunc& function, const RooNumIntConfig& config); Constructor taking a function binding and a configuration object. RooAdaptiveGaussKronrodIntegrator1D(const RooAbsFunc& function, Double_t xmin, Double_t xmax, const RooNumIntConfig& config); Constructor taking a function binding, an integration range and a configuration object. RooAbsIntegrator* clone(const RooAbsFunc& function, const RooNumIntConfig& config) const; Virtual constructor. Bool_t initialize(); Initialize integrator allocate buffers and setup GSL workspace. ~RooAdaptiveGaussKronrodIntegrator1D(); Destructor. Bool_t setLimits(Double_t* xmin, Double_t* xmax); Change our integration limits. Return kTRUE if the new limits are; ok, or otherwise kFALSE. Always returns kFALSE and does nothing; if this object was constructed to always use our integrand's limits. Bool_t checkLimits() const; Check that our integration range is finite and otherwise return kFALSE.; Update the limits from the integrand if requested. Double_t integral(const Double_t* yvec = 0); Calculate and return integral at at given parameter values. RooAdaptiveGaussKronrodIntegrator1D(); Constructors, assignment etc. Bool_t setUseIntegrandLimits(Bool_t flag); If flag is true, intergration limits are taken from definition in input function binding. Bool_t canIntegrate1D() const; We can integrate 1-dimensional functions. Bool_t canIntegrate2D() const; We can not integrate 2-dimensional functions. Bool_t canIntegrateND() const; We can not integrate >2-dimensional functions. Bool_t canIntegrateOpenEnded() const; We can integrate over open-ended domains. Double_t* xvec(Double_t& xx); Return contents of xx in internal array pointer. » Last changed: Thu Nov 3 20:06:53 2011 » Last generated: 2011-11-03 20:06; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAdaptiveGaussKronrodIntegrator1D.html:9424,integrat,integration,9424,root/html532/RooAdaptiveGaussKronrodIntegrator1D.html,https://root.cern,https://root.cern/root/html532/RooAdaptiveGaussKronrodIntegrator1D.html,1,['integrat'],['integration']
Deployability,"tiveGaussKronrodIntegrator1D(); coverity[UNINIT_CTOR]; Default constructor. RooAdaptiveGaussKronrodIntegrator1D(const RooAbsFunc& function, const RooNumIntConfig& config); Constructor taking a function binding and a configuration object. RooAdaptiveGaussKronrodIntegrator1D(const RooAbsFunc& function, Double_t xmin, Double_t xmax, const RooNumIntConfig& config); Constructor taking a function binding, an integration range and a configuration object. RooAbsIntegrator* clone(const RooAbsFunc& function, const RooNumIntConfig& config) const; Virtual constructor. Bool_t initialize(); Initialize integrator allocate buffers and setup GSL workspace. ~RooAdaptiveGaussKronrodIntegrator1D(); Destructor. Bool_t setLimits(Double_t* xmin, Double_t* xmax); Change our integration limits. Return kTRUE if the new limits are; ok, or otherwise kFALSE. Always returns kFALSE and does nothing; if this object was constructed to always use our integrand's limits. Bool_t checkLimits() const; Check that our integration range is finite and otherwise return kFALSE.; Update the limits from the integrand if requested. Double_t integral(const Double_t* yvec = 0); Calculate and return integral at at given parameter values. RooAdaptiveGaussKronrodIntegrator1D(); Constructors, assignment etc. Bool_t setUseIntegrandLimits(Bool_t flag); If flag is true, intergration limits are taken from definition in input function binding. Bool_t canIntegrate1D() const; We can integrate 1-dimensional functions. Bool_t canIntegrate2D() const; We can not integrate 2-dimensional functions. Bool_t canIntegrateND() const; We can not integrate >2-dimensional functions. Bool_t canIntegrateOpenEnded() const; We can integrate over open-ended domains. Double_t* xvec(Double_t& xx); Return contents of xx in internal array pointer. » Last changed: Tue Jun 2 15:27:37 2015 » Last generated: 2015-06-02 15:27; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/RooAdaptiveGaussKronrodIntegrator1D.html:10141,integrat,integration,10141,root/html604/RooAdaptiveGaussKronrodIntegrator1D.html,https://root.cern,https://root.cern/root/html604/RooAdaptiveGaussKronrodIntegrator1D.html,1,['integrat'],['integration']
Deployability,"tiveGaussKronrodIntegrator1D(); coverity[UNINIT_CTOR]; Default constructor. RooAdaptiveGaussKronrodIntegrator1D(const RooAbsFunc& function, const RooNumIntConfig& config); Constructor taking a function binding and a configuration object. RooAdaptiveGaussKronrodIntegrator1D(const RooAbsFunc& function, Double_t xmin, Double_t xmax, const RooNumIntConfig& config); Constructor taking a function binding, an integration range and a configuration object. RooAbsIntegrator* clone(const RooAbsFunc& function, const RooNumIntConfig& config) const; Virtual constructor. Bool_t initialize(); Initialize integrator allocate buffers and setup GSL workspace. ~RooAdaptiveGaussKronrodIntegrator1D(); Destructor. Bool_t setLimits(Double_t* xmin, Double_t* xmax); Change our integration limits. Return kTRUE if the new limits are; ok, or otherwise kFALSE. Always returns kFALSE and does nothing; if this object was constructed to always use our integrand's limits. Bool_t checkLimits() const; Check that our integration range is finite and otherwise return kFALSE.; Update the limits from the integrand if requested. Double_t integral(const Double_t* yvec = 0); Calculate and return integral at at given parameter values. RooAdaptiveGaussKronrodIntegrator1D(); Constructors, assignment etc. Bool_t setUseIntegrandLimits(Bool_t flag); If flag is true, intergration limits are taken from definition in input function binding. Bool_t canIntegrate1D() const; We can integrate 1-dimensional functions. Bool_t canIntegrate2D() const; We can not integrate 2-dimensional functions. Bool_t canIntegrateND() const; We can not integrate >2-dimensional functions. Bool_t canIntegrateOpenEnded() const; We can integrate over open-ended domains. Double_t* xvec(Double_t& xx); Return contents of xx in internal array pointer. » Last changed: Tue Jun 30 14:30:40 2015 » Last generated: 2015-06-30 14:30; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooAdaptiveGaussKronrodIntegrator1D.html:10141,integrat,integration,10141,root/html602/RooAdaptiveGaussKronrodIntegrator1D.html,https://root.cern,https://root.cern/root/html602/RooAdaptiveGaussKronrodIntegrator1D.html,1,['integrat'],['integration']
Deployability,"tiveGaussKronrodIntegrator1D(); coverity[UNINIT_CTOR]; Default constructor. RooAdaptiveGaussKronrodIntegrator1D(const RooAbsFunc& function, const RooNumIntConfig& config); Constructor taking a function binding and a configuration object. RooAdaptiveGaussKronrodIntegrator1D(const RooAbsFunc& function, Double_t xmin, Double_t xmax, const RooNumIntConfig& config); Constructor taking a function binding, an integration range and a configuration object. RooAbsIntegrator* clone(const RooAbsFunc& function, const RooNumIntConfig& config) const; Virtual constructor. Bool_t initialize(); Initialize integrator allocate buffers and setup GSL workspace. ~RooAdaptiveGaussKronrodIntegrator1D(); Destructor. Bool_t setLimits(Double_t* xmin, Double_t* xmax); Change our integration limits. Return kTRUE if the new limits are; ok, or otherwise kFALSE. Always returns kFALSE and does nothing; if this object was constructed to always use our integrand's limits. Bool_t checkLimits() const; Check that our integration range is finite and otherwise return kFALSE.; Update the limits from the integrand if requested. Double_t integral(const Double_t* yvec = 0); Calculate and return integral at at given parameter values. RooAdaptiveGaussKronrodIntegrator1D(); Constructors, assignment etc. Bool_t setUseIntegrandLimits(Bool_t flag); If flag is true, intergration limits are taken from definition in input function binding. Bool_t canIntegrate1D() const; We can integrate 1-dimensional functions. Bool_t canIntegrate2D() const; We can not integrate 2-dimensional functions. Bool_t canIntegrateND() const; We can not integrate >2-dimensional functions. Bool_t canIntegrateOpenEnded() const; We can integrate over open-ended domains. Double_t* xvec(Double_t& xx); Return contents of xx in internal array pointer. » Last changed: Tue Mar 10 17:14:18 2015 » Last generated: 2015-03-10 17:14; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAdaptiveGaussKronrodIntegrator1D.html:9443,integrat,integration,9443,root/html534/RooAdaptiveGaussKronrodIntegrator1D.html,https://root.cern,https://root.cern/root/html534/RooAdaptiveGaussKronrodIntegrator1D.html,1,['integrat'],['integration']
Deployability,"tle and add yourself your own title with a TPaveLabel: ; gStyle->SetOptTitle(0);; TPaveLabel *title = new TPaveLabel(.11,.95,.35,.99,""new title"",""brndc"");; title->Draw(); ; Changing the Displayed Title in Canvas. ; . Segmentation violation in TASImage::InitVisual () on Mac . The configure command should specify explicitly where ROOT should find all X11-related libs. ./configure --with-x11-libdir=/opt/local/lib/ ; --with-xpm-libdir=/opt/local/lib/ ; --with-xft-libdir=/opt/local/lib/ ; --with-xext-libdir=/opt/local/lib/; A simple Draw(0 or a Browser opening might cause a Segmentation violation in TASImage::InitVisual () on Mac. ; . How do I start PROOF? . Type at the ROOT prompt:. root [0] TProof::Open(""""); How do I start PROOF? ; . How to render graphics in a file, without displaying the image on the screen ? . Run in batch mode:. root -b -q myscript.C. or in your program add:. gROOT->SetBatch();; ; . Prerequisites for building ROOT from source. . To successfully build ROOT a number of prerequisite packages must be installed. Check the prerequisites page for the list of packages needed for your platform.; ; . How to use ROOT libraries in Xcode on Mac OS X? . The easiest way is to use cmake and let it create the Xcode project, this has the advantage that the dictionaries are created automatically. The CMakeLists.txt file will define the libraries and executables to be added to the Xcode project. An example from the ROOT Event example (found in root/test) can be downloaded here. Just un-tar the attached file and run. cd event/build; cmake -G Xcode ..; xcodebuild. This will create an Xcode project event.xcodeproj which can be opened and used by Xcode. ; . How to check if a file is already open? . if (gROOT->GetListOfFiles()->FindObject(filename) ) {; // do not open the file; } else {; // open the file; }; ; . Some or all windows don't get displayed when ROOT is running on a remote computer. . You probably used ssh to connect to the remote computer. You need to specify t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/faq-page.html:6778,install,installed,6778,d/faq-page.html,https://root.cern,https://root.cern/d/faq-page.html,1,['install'],['installed']
Deployability,"tle(const char* t); virtual voidTEveTrack::SetTrackParams(const TEveTrack& t); virtual voidTEveElement::SetTransMatrix(Double_t* carr); virtual voidTEveElement::SetTransMatrix(const TGeoMatrix& mat); virtual voidTObject::SetUniqueID(UInt_t uid); voidTEveElement::SetUserData(void* ud); voidTEveElement::SetVizModel(TEveElement* model); voidTEveElement::SetVizTag(const TString& tag); Bool_tTEveTrack::ShouldBreakTrack() const; virtual voidShowMembers(TMemberInspector& insp); virtual Bool_tTEveElement::SingleRnrState() const; virtual Int_tTPolyMarker3D::Size() const; virtual voidTAtt3D::Sizeof3D() const; voidTEveTrack::SortPathMarksByTime(); voidTEveElement::SpawnEditor()MENU ; voidTEveElement::StampColorSelection(); voidTEveElement::StampObjProps(); voidTEveElement::StampTransBBox(); voidTEveElement::StampVisibility(); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; virtual voidTEvePointSet::TakeAction(TEvePointSelector*); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; Bool_tTEveElement::TestCSCBits(UChar_t f) const; virtual voidTEveElement::UnHighlighted(); virtual voidTEveProjected::UnRefProjectable(TEveProjectable* assumed_parent, bool notifyParent = true); virtual voidTEveElement::UnSelected(); virtual voidUpdateProjection(); virtual voidTObject::UseCurrentStyle(); voidTEveElement::VizDB_Apply(const char* tag)MENU ; voidTEveElement::VizDB_Insert(const char* tag, Bool_t replace = kTRUE, Bool_t update = kTRUE)MENU ; voidTEveElement::VizDB_Reapply()MENU ; voidTEveElement::VizDB_UpdateModel(Bool_t update = kTRUE)MENU ; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTEveTrack::WriteVizParams(ostream& out, const TString& var).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TEveTrackProjected.html:23997,update,update,23997,root/html530/TEveTrackProjected.html,https://root.cern,https://root.cern/root/html530/TEveTrackProjected.html,4,['update'],['update']
Deployability,"tle, RooRealVar &t, RooAbsReal &tau, RooAbsReal &dgamma, RooAbsReal &f0, RooAbsReal &f1, RooAbsReal &f2, RooAbsReal &f3, RooAbsReal &dm, const RooResolutionModel &model, DecayType type);  Constructor for RooBDecay. ;  ;  RooBDecay (const RooBDecay &other, const char *name=nullptr);  Copy constructor. ;  ; TObject * clone (const char *newname) const override;  ; double coefAnalyticalIntegral (Int_t coef, Int_t code, const char *rangeName=nullptr) const override;  Default implementation of function implementing advertised integrals. ;  ; double coefficient (Int_t basisIndex) const override;  ; RooFit::OwningPtr< RooArgSet > coefVars (Int_t coefIdx) const override;  Return set of parameters with are used exclusively by the coefficient functions. ;  ; void generateEvent (Int_t code) override;  Interface for generation of an event using the algorithm corresponding to the specified code. ;  ; Int_t getCoefAnalyticalIntegral (Int_t coef, RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const override;  Default implementation of function advertising integration capabilities. ;  ; Int_t getGenerator (const RooArgSet &directVars, RooArgSet &generateVars, bool staticInitOK=true) const override;  Load generatedVars with the subset of directVars that we can generate events for, and return a code that specifies the generator algorithm we will use. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsAnaConvPdf;  RooAbsAnaConvPdf ();  Default constructor, required for persistence. ;  ;  RooAbsAnaConvPdf (const char *name, const char *title, const RooResolutionModel &model, RooRealVar &convVar);  Constructor. ;  ;  RooAbsAnaConvPdf (const RooAbsAnaConvPdf &other, const char *name=nullptr);  ;  ~RooAbsAnaConvPdf () override;  Destructor. ;  ; double analyticalIntegralWN (Int_t code, const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBDecay.html:3519,integrat,integration,3519,doc/master/classRooBDecay.html,https://root.cern,https://root.cern/doc/master/classRooBDecay.html,1,['integrat'],['integration']
Deployability,"tle; TGeoExtension*fUserExtension! Transient user-defined extension to materials; Double_tfZZ of material. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoMaterial(); Default constructor. TGeoMaterial(const char* name); constructor. TGeoMaterial(const char* name, Double_t a, Double_t z, Double_t rho, Double_t radlen = 0, Double_t intlen = 0); constructor. TGeoMaterial(const char* name, Double_t a, Double_t z, Double_t rho, TGeoMaterial::EGeoMaterialState state, Double_t temperature = STP_temperature, Double_t pressure = STP_pressure); Constructor with state, temperature and pressure. TGeoMaterial(const char* name, TGeoElement* elem, Double_t rho); constructor. TGeoMaterial(const TGeoMaterial& ); copy constructor. TGeoMaterial& operator=(const TGeoMaterial& ); assignment operator. ~TGeoMaterial(); Destructor. void SetUserExtension(TGeoExtension* ext); Connect user-defined extension to the material. The material ""grabs"" a copy, so; the original object can be released by the producer. Release the previously; connected extension if any. NOTE: This interface is intended for user extensions and is guaranteed not; to be used by TGeo. void SetFWExtension(TGeoExtension* ext); Connect framework defined extension to the material. The material ""grabs"" a copy,; so the original object can be released by the producer. Release the previously; connected extension if any. NOTE: This interface is intended for the use by TGeo and the users should; NOT connect extensions using this method. TGeoExtension * GrabUserExtension() const; Get a copy of the user extension pointer. The user must call Release() on; the copy pointer once this pointer is not needed anymore (equivalent to; delete() after calling new()). TGeoExtension * GrabFWExtension() const; Get a copy of the framework extension pointer. The user must call Release() on; the copy pointer once this pointer is not needed anymore (equivalent to; delete() after calling new()). char * GetPo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoMaterial.html:9916,release,released,9916,root/html534/TGeoMaterial.html,https://root.cern,https://root.cern/root/html534/TGeoMaterial.html,3,['release'],['released']
Deployability,"tle="""");  Measurement( const Measurement& other ); // Copy. ;  ; void AddAsimovDataset (RooStats::HistFactory::Asimov dataset);  add an Asimov Dataset ;  ; void AddConstantParam (const std::string &param);  Add a parameter to be set as constant (Similar to ParamSetting method below) ;  ; void AddFunctionObject (const RooStats::HistFactory::PreprocessFunction function);  add a preprocess function object ;  ; void AddPOI (const std::string &POI);  append parameter to vector of PoIs ;  ; void AddPreprocessFunction (std::string name, std::string expression, std::string dependencies);  Add a preprocessed function by giving the function a name, a functional expression, and a string with a bracketed list of dependencies (eg ""SigXsecOverSM[0,3]"") ;  ; void ClearConstantParams ();  empty vector of constant parameters ;  ; void ClearParamValues ();  clear map of parameter values ;  ; std::vector< RooStats::HistFactory::Asimov > & GetAsimovDatasets ();  get vector of defined Asimov Datasets ;  ; int GetBinHigh ();  ; int GetBinLow ();  ; std::vector< std::string > & GetConstantParams ();  get vector of all constant parameters ;  ; std::vector< RooStats::HistFactory::PreprocessFunction > & GetFunctionObjects ();  get vector of defined function objects ;  ; const std::vector< RooStats::HistFactory::PreprocessFunction > & GetFunctionObjects () const;  ; double GetLumi ();  retrieve integrated luminosity ;  ; double GetLumiRelErr ();  retrieve relative uncertainty on luminosity ;  ; std::string GetOutputFilePrefix ();  retrieve prefix for output files ;  ; std::map< std::string, double > & GetParamValues ();  get map: parameter name <--> parameter value ;  ; std::string GetPOI (unsigned int i=0);  get name of PoI at given index ;  ; std::vector< std::string > & GetPOIList ();  get vector of PoI names ;  ; std::vector< std::string > GetPreprocessFunctions () const;  Returns a list of defined preprocess function expressions. ;  ; void SetBinHigh (int BinHigh);  ; void SetBinLow (int",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1HistFactory_1_1Measurement.html:2159,integrat,integrated,2159,doc/master/classRooStats_1_1HistFactory_1_1Measurement.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1HistFactory_1_1Measurement.html,1,['integrat'],['integrated']
Deployability,tlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; RooAbsData*RooAbsTestStatistic::_dataPointer to original input dataset; RooAbsData*_dataClonePointer to internal clone if input data; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; static Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; RooAbsReal*RooAbsTestStatistic::_funcPointer to original input function; RooAbsReal*_funcClonePointer to internal clone of input function; RooArgSet*_funcCloneSetSet owning all components of internal clone of input function; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; static Int_tRooPrintable::_nameLength; RooArgSet*_normSetPointer to set with observables used for normalization ; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; Bool_t_ownDataDo we own the dataset; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; RooSetProxyRooAbsTestStatistic::_paramSetParameters of the test statistic (=parameters of the input func,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsOptTestStatistic.html:32547,integrat,integration,32547,root/html526/RooAbsOptTestStatistic.html,https://root.cern,https://root.cern/root/html526/RooAbsOptTestStatistic.html,1,['integrat'],['integration']
Deployability,tlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; RooAbsData*RooAbsTestStatistic::_dataPointer to original input dataset; RooAbsData*_dataClonePointer to internal clone if input data; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; static Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; RooAbsReal*RooAbsTestStatistic::_funcPointer to original input function; RooAbsReal*_funcClonePointer to internal clone of input function; RooArgSet*_funcCloneSetSet owning all components of internal clone of input function; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; static Int_tRooPrintable::_nameLength; RooArgSet*_normSetPointer to set with observables used for normalization; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; Bool_t_ownDataDo we own the dataset; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; RooArgSet_ownedDataObs! Dataset observables we've agreed to own; RooSetProxyRooAbsTestStatistic::_paramSe,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooAbsOptTestStatistic.html:33319,integrat,integration,33319,root/html530/RooAbsOptTestStatistic.html,https://root.cern,https://root.cern/root/html530/RooAbsOptTestStatistic.html,1,['integrat'],['integration']
Deployability,tlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; RooAbsData*RooAbsTestStatistic::_dataPointer to original input dataset; RooAbsData*_dataClonePointer to internal clone if input data; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; static Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; RooAbsReal*RooAbsTestStatistic::_funcPointer to original input function; RooAbsReal*_funcClonePointer to internal clone of input function; RooArgSet*_funcCloneSetSet owning all components of internal clone of input function; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; static Int_tRooPrintable::_nameLength; RooArgSet*_normSetPointer to set with observables used for normalization; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; Bool_t_ownDataDo we own the dataset; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; RooSetProxyRooAbsTestStatistic::_paramSetParameters of the test statistic (=parameters of the input funct,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAbsOptTestStatistic.html:33157,integrat,integration,33157,root/html528/RooAbsOptTestStatistic.html,https://root.cern,https://root.cern/root/html528/RooAbsOptTestStatistic.html,1,['integrat'],['integration']
Deployability,"tmap file name %s built from rootmap lib name %s"",; 2186 rootmapLibName.c_str(),; 2187 rootmapFileName.c_str());; 2188 }; 2189}; 2190 ; 2191////////////////////////////////////////////////////////////////////////////////; 2192/// Extract the proper autoload key for nested classes; 2193/// The routine does not erase the name, just updates it; 2194 ; 2195void GetMostExternalEnclosingClassName(const clang::DeclContext &theContext,; 2196 std::string &ctxtName,; 2197 const cling::Interpreter &interpreter,; 2198 bool treatParent = true); 2199{; 2200 const clang::DeclContext *outerCtxt = treatParent ? theContext.getParent() : &theContext;; 2201 // If the context has no outer context, we are finished; 2202 if (!outerCtxt) return;; 2203 // If the context is a class, we update the name; 2204 if (const clang::RecordDecl *thisRcdDecl = llvm::dyn_cast<clang::RecordDecl>(outerCtxt)) {; 2205 ROOT::TMetaUtils::GetNormalizedName(ctxtName, thisRcdDecl, interpreter);; 2206 }; 2207 // We recurse; 2208 GetMostExternalEnclosingClassName(*outerCtxt, ctxtName, interpreter);; 2209}; 2210 ; 2211////////////////////////////////////////////////////////////////////////////////; 2212 ; 2213void GetMostExternalEnclosingClassNameFromDecl(const clang::Decl &theDecl,; 2214 std::string &ctxtName,; 2215 const cling::Interpreter &interpreter); 2216{; 2217 const clang::DeclContext *theContext = theDecl.getDeclContext();; 2218 GetMostExternalEnclosingClassName(*theContext, ctxtName, interpreter, false);; 2219}; 2220 ; 2221////////////////////////////////////////////////////////////////////////////////; 2222template<class COLL>; 2223int ExtractAutoloadKeys(std::list<std::string> &names,; 2224 const COLL &decls,; 2225 const cling::Interpreter &interp); 2226{; 2227 if (!decls.empty()) {; 2228 std::string autoLoadKey;; 2229 for (auto & d : decls) {; 2230 autoLoadKey = """";; 2231 GetMostExternalEnclosingClassNameFromDecl(*d, autoLoadKey, interp);; 2232 // If there is an outer class, it is already considered; 22",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rootcling__impl_8cxx_source.html:87383,update,update,87383,doc/master/rootcling__impl_8cxx_source.html,https://root.cern,https://root.cern/doc/master/rootcling__impl_8cxx_source.html,1,['update'],['update']
Deployability,"to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooNumGenConfig.h>. Inheritance diagram for RooNumGenConfig:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooNumGenConfig() [1/2]. RooNumGenConfig::RooNumGenConfig ; (; ). Constructor. ; Definition at line 55 of file RooNumGenConfig.cxx. ◆ RooNumGenConfig() [2/2]. RooNumGenConfig::RooNumGenConfig ; (; const RooNumGenConfig & ; other). Copy constructor. ; Definition at line 102 of file RooNumGenConfig.cxx. ◆ ~RooNumGenConfig(). RooNumGenConfig::~RooNumGenConfig ; (; ). override . Destructor. ; Definition at line 92 of file RooNumGenConfig.cxx. Member Function Documentation. ◆ addConfigSection(). bool RooNumGenConfig::addConfigSection ; (; const RooAbsNumGenerator * ; proto, . const RooArgSet & ; inDefaultConfig . ). Add a configuration section for a particular integrator. ; Integrator name and capabilities are automatically determined from instance passed as 'proto'. The defaultConfig object is associated as the default configuration for the integrator. ; Definition at line 238 of file RooNumGenConfig.cxx. ◆ Class(). static TClass * RooNumGenConfig::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooNumGenConfig::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooNumGenConfig::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 75 of file RooNumGenConfig.h. ◆ DeclFileName(). static const char * RooNumGenConfig::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 75 of file RooNumGenConfig.h. ◆ defaultConfig(). RooNumGenConfig & RooNumGenConfig::defaultConfig ; (; ). static . Return reference to instance of default numer",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooNumGenConfig.html:15649,configurat,configuration,15649,doc/master/classRooNumGenConfig.html,https://root.cern,https://root.cern/doc/master/classRooNumGenConfig.html,2,"['configurat', 'integrat']","['configuration', 'integrator']"
Deployability,"to [0,1] using a transformation then integral computation is surrogated to DoIntegral. ; Implements ROOT::Math::VirtualIntegratorOneDim.; Definition at line 66 of file GaussIntegrator.cxx. ◆ IntegralUp(). double ROOT::Math::GaussIntegrator::IntegralUp ; (; double ; a). overridevirtual . Returns Integral of function on an upper semi-infinite interval. ; This function computes, to an attempted specified accuracy, the value of the integral: ; \[; I = \int^{\infty}_{A} f(x)dx; \]. Usage: In any arithmetic expression, this function has the approximate value of the integral I.; A: lower end-point of integration interval. The integral is mapped onto [0,1] using a transformation then integral computation is surrogated to DoIntegral. ; Implements ROOT::Math::VirtualIntegratorOneDim.; Definition at line 61 of file GaussIntegrator.cxx. ◆ Options(). ROOT::Math::IntegratorOneDimOptions ROOT::Math::GaussIntegrator::Options ; (; ); const. overridevirtual . get the option used for the integration ; Implements ROOT::Math::VirtualIntegratorOneDim.; Reimplemented in ROOT::Math::GaussLegendreIntegrator.; Definition at line 210 of file GaussIntegrator.cxx. ◆ Result(). double ROOT::Math::GaussIntegrator::Result ; (; ); const. overridevirtual . Returns the result of the last Integral calculation. ; Implements ROOT::Math::VirtualIntegrator.; Definition at line 166 of file GaussIntegrator.cxx. ◆ SetAbsTolerance(). void ROOT::Math::GaussIntegrator::SetAbsTolerance ; (; double ; eps). inlineoverridevirtual . This method is not implemented. ; Implements ROOT::Math::VirtualIntegrator.; Reimplemented in ROOT::Math::GaussLegendreIntegrator.; Definition at line 68 of file GaussIntegrator.h. ◆ SetFunction(). void ROOT::Math::GaussIntegrator::SetFunction ; (; const IGenFunction & ; function). overridevirtual . Set integration function (flag control if function must be copied inside). ; @param f Function to be used in the calculations. ; Implements ROOT::Math::VirtualIntegratorOneDim.; Definition at ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GaussIntegrator.html:10343,integrat,integration,10343,doc/master/classROOT_1_1Math_1_1GaussIntegrator.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GaussIntegrator.html,1,['integrat'],['integration']
Deployability,"to a file, for the header in the order; 1st root, 2nd user, and for the footer 1st user, 2nd root (the root; versions containing ""<html>"" and </html> tags, resp).; If you want to replace root's header you have to write a file containing; all HTML elements necessary starting with the <doctype> tag and ending with; (and including) the <body> tag. If you add your header it will be added; directly after Root's <body> tag. Any occurrence of the string %TITLE%; in the user's header file will be replaced by; a sensible, automatically generated title. If the header is generated for a; class, occurrences of %CLASS% will be replaced by the current class's name,; %SRCFILE% and %INCFILE% by the name of the source and header file, resp.; (as given by TClass::GetImplFileName(),; TClass::GetDeclFileName()).; If the header is not generated for a class, they will be replaced by """".; Root's footer starts with the tag <!--SIGNATURE-->. It includes the; author(s), last update, copyright, the links to the Root home page, to the; user home page, to the index file (ClassIndex.html), to the top of the page; and this page is automatically generated infomation. It ends with the; tags </body></html>. If you want to replace it,; THtml will search for some; tags in your footer: Occurrences of the strings %AUTHOR%, %UPDATE%, and; %COPYRIGHT% are replaced by their; corresponding values before writing the html file. The %AUTHOR% tag will be; replaced by the exact string that follows Root.Html.Author, no link; generation will occur.; II.7 Links to searches, home page, ViewVC; Additional parameters can be set by Root.Html.Homepage (address of the; user's home page), Root.Html.SearchEngine (search engine for the class; documentation), Root.Html.Search (search URL, where %u is replaced by the; referer and %s by the escaped search expression), and a ViewVC base URL; Root.Html.ViewCVS. For the latter, the file name is appended or, if; the URL contains %f, %f is replaced by the file name.; All values def",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/THtml.html:7515,update,update,7515,root/html528/THtml.html,https://root.cern,https://root.cern/root/html528/THtml.html,10,['update'],['update']
Deployability,"to all the registered proxies. ;  ; void setShapeDirty (const RooAbsArg *source);  Notify that a shape-like property (e.g. binning) has changed. ;  ; void setValueDirty (const RooAbsArg *source);  Force element to re-evaluate itself when a value is requested. ;  ; void unRegisterProxy (RooArgProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooListProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooSetProxy &proxy);  Remove proxy from proxy list. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; RooListProxy _highSet;  High-side variation. ;  ; std::vector< int > _interpCode;  ; RooListProxy _lowSet;  Low-side variation. ;  ; RooRealProxy _nominal;  The nominal value. ;  ; RooObjCacheManager _normIntMgr;  ! The integration cache manager ;  ; RooListProxy _normSet;  interpolation parameters ;  ; RooArgList _ownedList;  List of owned components. ;  ; RooListProxy _paramSet;  interpolation parameters ;  ; bool _positiveDefinite = false;  protect against negative and 0 bins. ;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; Int_t _plotBins = 100;  Number of plot bins. ;  ; double _plotMax = 0.0;  Maximum of plot range. ;  ; double _plotMin = 0.0;  Minimum of plot range. ;  ; bool _selectComp = true;  A buffer for reading values from trees. ;  ; std::unique_ptr< RooNumIntConfig > _specIntegratorConfig;  ; TreeReadBuffer * _treeReadBuffer = nullptr;  ; TString _unit;  Unit for objects value. ;  ; double _value = 0.0;  Cache for current value of object. ;  ;  Protect",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classPiecewiseInterpolation.html:56630,integrat,integration,56630,doc/master/classPiecewiseInterpolation.html,https://root.cern,https://root.cern/doc/master/classPiecewiseInterpolation.html,1,['integrat'],['integration']
Deployability,"to an existing p.d.f; RooExtendedTerm Meta-p.d.f flat in all observables introducing only extended ML term; RooFFTConvPdf Convolution operator p.d.f based on numeric Fourier transforms; RooFactoryWSTool RooFit class code and instance factory ; RooFit ; RooFitResult Container class for fit result; RooFitShortHand ; RooFoamGenerator Context for generating a dataset from a PDF using the TFoam class; RooFormula TFormula derived class interfacing with RooAbsArg objects; RooFormulaVar Real-valued function of other RooAbsArgs calculated by a TFormula expression; RooFracRemainder Utility function calculating remainder fraction, i.e. 1-sum_i(a_i); RooFunctor Export RooAbsReal as functor; RooFunctor1DBinding RooAbsReal binding to a ROOT::Math::IBaseFunctionOneDim; RooFunctor1DPdfBinding RooAbsPdf binding to a ROOT::Math::IBaseFunctionOneDim; RooFunctorBinding RooAbsReal binding to a ROOT::Math::IBaseFunctionMultiDim; RooFunctorPdfBinding RooAbsPdf binding to a ROOT::Math::IBaseFunctionMultiDim; RooGExpModel Gauss (x) Expontial resolution model; RooGaussKronrodIntegrator1D 1-dimensional Gauss-Kronrod numerical integration engine; RooGaussModel Gaussian Resolution Model; RooGaussian Gaussian PDF; RooGenCategory Generic category-to-category function based on user supplied mapping function; RooGenContext Universal context for generating toy MC data from any p.d.f; RooGenFitStudy Generate-and-Fit study module; RooGenFunction Export RooAbsReal as functor; RooGenProdProj General form of projected integral of product of PDFs, utility class for RooProdPdf; RooGenericPdf Generic PDF defined by string expression and list of variables; RooGrid Utility class for RooMCIntegrator holding a multi-dimensional grid; RooHashTable Hash table; RooHist 1-dimensional histogram with error bars; RooHistError Utility class for calculating histogram errors; RooHistFunc Histogram based function; RooHistPdf Histogram based PDF; RooImproperIntegrator1D 1-dimensional improper integration engine; RooInt Con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ClassIndex.html:34766,integrat,integration,34766,root/html526/ClassIndex.html,https://root.cern,https://root.cern/root/html526/ClassIndex.html,1,['integrat'],['integration']
Deployability,"to an existing p.d.f; RooExtendedTerm Meta-p.d.f flat in all observables introducing only extended ML term; RooFFTConvPdf Convolution operator p.d.f based on numeric Fourier transforms; RooFactoryWSTool RooFit class code and instance factory ; RooFit ; RooFitResult Container class for fit result; RooFitShortHand ; RooFoamGenerator Context for generating a dataset from a PDF using the TFoam class; RooFormula TFormula derived class interfacing with RooAbsArg objects; RooFormulaVar Real-valued function of other RooAbsArgs calculated by a TFormula expression; RooFracRemainder Utility function calculating remainder fraction, i.e. 1-sum_i(a_i); RooFunctor Export RooAbsReal as functor; RooFunctor1DBinding RooAbsReal binding to a ROOT::Math::IBaseFunctionOneDim; RooFunctor1DPdfBinding RooAbsPdf binding to a ROOT::Math::IBaseFunctionOneDim; RooFunctorBinding RooAbsReal binding to a ROOT::Math::IBaseFunctionMultiDim; RooFunctorPdfBinding RooAbsPdf binding to a ROOT::Math::IBaseFunctionMultiDim; RooGExpModel Gauss (x) Expontial resolution model; RooGaussKronrodIntegrator1D 1-dimensional Gauss-Kronrod numerical integration engine; RooGaussModel Gaussian Resolution Model; RooGaussian Gaussian PDF; RooGenCategory Generic category-to-category function based on user supplied mapping function; RooGenContext Universal context for generating toy MC data from any p.d.f; RooGenFunction Export RooAbsReal as functor; RooGenProdProj General form of projected integral of product of PDFs, utility class for RooProdPdf; RooGenericPdf Generic PDF defined by string expression and list of variables; RooGrid Utility class for RooMCIntegrator holding a multi-dimensional grid; RooHashTable Hash table; RooHist 1-dimensional histogram with error bars; RooHistError Utility class for calculating histogram errors; RooHistFunc Histogram based function; RooHistPdf Histogram based PDF; RooImproperIntegrator1D 1-dimensional improper integration engine; RooInt Container class for Int_t; RooIntegrator1D 1-dime",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html524/ClassIndex.html:34603,integrat,integration,34603,root/html524/ClassIndex.html,https://root.cern,https://root.cern/root/html524/ClassIndex.html,1,['integrat'],['integration']
Deployability,"to be issued ;; Int_t_nmaxMax number of divisions; Bool_tRooAbsIntegrator::_printEvalCounterIf true print number of function evaluation required for integration; Bool_t_useIntegrandLimitsIf true limits of function binding are ued; Bool_tRooAbsIntegrator::_validIs integrator in valid state?; Double_t*_xmaxUpper bound in each dimension; Double_t*_xminLower bound in each dimension. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void registerIntegrator(RooNumIntFactory& fact); Register RooAdaptiveIntegratorND, its parameters, dependencies and capabilities with RooNumIntFactory. RooAdaptiveIntegratorND(); Default ctor. RooAdaptiveIntegratorND(const RooAbsFunc& function, const RooNumIntConfig& config); Constructor of integral on given function binding and with given configuration. The; integration limits are taken from the definition in the function binding; _func = function. RooAbsIntegrator* clone(const RooAbsFunc& function, const RooNumIntConfig& config) const; Virtual constructor with given function and configuration. Needed by RooNumIntFactory. ~RooAdaptiveIntegratorND(); Destructor. Bool_t checkLimits() const; Check that our integration range is finite and otherwise return kFALSE.; Update the limits from the integrand if requested. Bool_t setLimits(Double_t* xmin, Double_t* xmax); Change our integration limits. Return kTRUE if the new limits are; ok, or otherwise kFALSE. Always returns kFALSE and does nothing; if this object was constructed to always use our integrand's limits. Double_t integral(const Double_t* yvec = 0); Evaluate integral at given function binding parameter values. RooAdaptiveIntegratorND(); Constructors, assignment etc. Bool_t canIntegrate1D() const; { return kFALSE ; }. Bool_t canIntegrate2D() const; { return kTRUE ; }. Bool_t canIntegrateND() const; { return kTRUE ; }. Bool_t canIntegrateOpenEnded() const; { return kFALSE ; }. Bool_t setUseIntegrandLimits(Bool_t flag); {_useIntegrandLimits = flag ; retu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAdaptiveIntegratorND.html:7590,configurat,configuration,7590,root/html526/RooAdaptiveIntegratorND.html,https://root.cern,https://root.cern/root/html526/RooAdaptiveIntegratorND.html,7,['configurat'],['configuration']
Deployability,"to be the current camera - though you will not see the effect if it is not. ;  ; void SetPictureFileName (const TString &f);  ; void SetPointScale (Float_t s);  ; void SetResetCamerasOnUpdate (Bool_t v);  ; void SetSmartRefresh (Bool_t smart_ref);  ; void SetSmoothLines (Bool_t s);  ; void SetSmoothPoints (Bool_t s);  ; void SetStereo (Bool_t stereo, Bool_t quad_buf=kTRUE);  Enable stereo rendering. ;  ; void SetStereoEyeOffsetFac (Float_t f);  ; void SetStereoFrustumAsymFac (Float_t f);  ; void SetStereoZeroParallax (Float_t f);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void SwitchColorSet ();  Switch between dark and light colorsets. ;  ; virtual void UnClicked (TObject *obj, UInt_t button, UInt_t state);  Emit UnClicked signal with button id and modifier state. ;  ; virtual void UnMouseOver (TObject *obj, UInt_t state);  Emit UnMouseOver signal. ;  ; void UpdateScene (Bool_t redraw=kTRUE);  Force update of pad-scenes. ;  ; void UseDarkColorSet ();  Use the dark color-set. ;  ; void UseDefaultColorSet (Bool_t x);  Set usage of the default color set. ;  ; void UseLightColorSet ();  Use the light color-set. ;  ; Int_t ViewportDiagonal () const;  ;  Public Member Functions inherited from TVirtualViewer3D; virtual ~TVirtualViewer3D ();  ; virtual void DrawViewer ();  ; TClass * IsA () const override;  ; virtual void ObjectPaint (TObject *, Option_t *="""");  ; virtual TObject * SelectObject (Int_t, Int_t);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave pur",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLEmbeddedViewer.html:12203,update,update,12203,doc/master/classTGLEmbeddedViewer.html,https://root.cern,https://root.cern/doc/master/classTGLEmbeddedViewer.html,3,['update'],['update']
Deployability,"to compute the best-fit parameter values and uncertainties, including correlations between the parameters. It is especially suited to handle difficult problems, including those which may require guidance in order to find the correct solution.; 1.2 What M is not intended to do; Although M will of course solve easy problems faster than complicated ones, it is not intended for the repeated solution of identically parametrized problems (such as track fitting in a detector) where a specialized program will in general be much more efficient.; 1.3 Further remarks; M was initially written in Fortran around 1975-1980 at CERN by Fred James @bib-MINUIT. Its main field of usage is statistical data analysis of experimental data recorded at CERN, but it is also used by people doing data analysis outside CERN or outside high energy physics (HEP). In 2002 Fred James started a project aiming to re-implement M in an object-oriented way using .; More information about recent developments, releases and installation can be obtained from the M homepage @bib-C++MINUIT.; The names of M applications are written in capital letters (e.g. \(\mbox{MIGRAD}\), \(\mbox{MINOS}\), \(\mbox{CONTOURS}\)), the corresponding names of the classes are written using sans-serif font type (MnMigrad, MnMinos, MnContours).; 2 Introduction: M basic concepts; [sec:intro]; 2.1 The organization of M; The M package acts on a multiparameter objective function which is called — for historical reasons — the \(\mbox{FCN}\) function (see [howto:fcn]). This function is usually a chisquared or a log–likelihood, but it could also be a mathematical function. The \(\mbox{FCN}\) function needs to be written in for which M defines the pure abstract base class FCNBase as interface. The user must define and implement the \(\mbox{FCN}\) function in a derived class from FCNBase. Sometimes this is done by an intermediate program such as HippoDraw@bib-HippoDraw, in which case M is being used under the control of such an intermediate p",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/guides/minuit2/Minuit2.html:6872,release,releases,6872,root/html534/guides/minuit2/Minuit2.html,https://root.cern,https://root.cern/root/html534/guides/minuit2/Minuit2.html,4,"['install', 'release']","['installation', 'releases']"
Deployability,to create the interfaces like ROOT::Math::Minimizer via the Plugin Manager ;  CFastInverterFast Matrix Inverter class Class to specialize calls to Dinv ;  CFastInverter< 3 >3x3 direct matrix inversion using Cramer Rule use only for FastInverter ;  CFastInverter< 4 >4x4 matrix inversion using Cramers rule ;  CFastInverter< 5 >5x5 Matrix inversion using Cramers rule ;  CFunctorDocumentation for class Functor class ;  CFunctor1DFunctor1D class for one-dimensional functions ;  CFunctorGradHandlerFunctor Handler class for gradient functions where both callable objects are provided for the function evaluation (type Func) and for the gradient (type GradFunc) ;  CFunctorHandlerFunctor Handler class is responsible for wrapping any other functor and pointer to free C functions ;  CFunctorImplFunctorImpl is a base class for the functor handler implementation class ;  CGaussIntegratorUser class for performing function integration ;  CGaussLegendreIntegratorUser class for performing function integration ;  CGenAlgoOptionsClass implementing generic options for a numerical algorithm Just store the options in a map of string-value pairs ;  CGeneralLinearFunctionDerivationAuxiliar class to bypass the (provisional) lack of vectorization in TFormula::EvalPar ;  CGeneralLinearFunctionDerivation< double >;  CGeneticMinimizerGeneticMinimizer ;  CGeneticMinimizerParameters;  CGenVector_exception;  CGlobalCoordinateSystemTagTag for identifying vectors based on a global coordinate system ;  CGoFTest;  CGradFunctorGradFunctor class for Multidimensional gradient functions ;  CGradFunctor1DGradFunctor1D class for one-dimensional gradient functions ;  CGSL1DMinimizerWrapperWrapper class for gsl_min_fminimizer structure ;  CGSLChebSeriesWrapper class for C struct gsl_cheb_series ;  CGSLDerivatorClass for computing numerical derivative of a function based on the GSL numerical algorithm This class is implemented using the numerical derivatives algorithms provided by GSL (see GSL Online Manual ) ; ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v612/annotated.html:36697,integrat,integration,36697,doc/v612/annotated.html,https://root.cern,https://root.cern/doc/v612/annotated.html,4,['integrat'],['integration']
Deployability,to create the interfaces like ROOT::Math::Minimizer via the Plugin Manager ;  CFastInverterFast Matrix Inverter class Class to specialize calls to Dinv ;  CFastInverter< 3 >3x3 direct matrix inversion using Cramer Rule use only for FastInverter ;  CFastInverter< 4 >4x4 matrix inversion using Cramers rule ;  CFastInverter< 5 >5x5 Matrix inversion using Cramers rule ;  CFunctorDocumentation for class Functor class ;  CFunctor1DFunctor1D class for one-dimensional functions ;  CFunctorGradHandlerFunctor Handler class for gradient functions where both callable objects are provided for the function evaluation (type Func) and for the gradient (type GradFunc) ;  CFunctorHandlerFunctor Handler class is responsible for wrapping any other functor and pointer to free C functions ;  CFunctorImplFunctorImpl is a base class for the functor handler implementation class ;  CGaussIntegratorUser class for performing function integration ;  CGaussLegendreIntegratorUser class for performing function integration ;  CGenAlgoOptionsClass implementing generic options for a numerical algorithm Just store the options in a map of string-value pairs ;  CGeneticMinimizerGeneticMinimizer ;  CGeneticMinimizerParameters;  CGenVector_exception;  CGlobalCoordinateSystemTagTag for identifying vectors based on a global coordinate system ;  CGoFTest;  CGradFunctorGradFunctor class for Multidimensional gradient functions ;  CGradFunctor1DGradFunctor1D class for one-dimensional gradient functions ;  CGSL1DMinimizerWrapperWrapper class for gsl_min_fminimizer structure ;  CGSLChebSeriesWrapper class for C struct gsl_cheb_series ;  CGSLDerivatorClass for computing numerical derivative of a function based on the GSL numerical algorithm This class is implemented using the numerical derivatives algorithms provided by GSL (see GSL Online Manual ) ;  CGSLFunctionAdapterClass for adapting any C++ functor class to C function pointers used by GSL ;  CGSLFunctionDerivWrapperClass to wrap a gsl_function_fdf (with deri,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/annotated.html:29896,integrat,integration,29896,doc/v608/annotated.html,https://root.cern,https://root.cern/doc/v608/annotated.html,3,['integrat'],['integration']
Deployability,"to delete lines. ; modes: t (Top), b (bottom), l (left), r (right), i (inside) in resize modes (t,b,l,r) only size arrows are sticky; in mode, the function gets the point on the element that is clicked to move (i) or resize (all others). The expected values are: . Implements TVirtualPad.; Definition at line 6350 of file TPad.cxx. ◆ StartEditing(). virtual void TPad::StartEditing ; (; ). inlinevirtual . Definition at line 417 of file TPad.h. ◆ Streamer(). void TPad::Streamer ; (; TBuffer & ; b). overridevirtual . Stream a class object. ; Reimplemented from TObject.; Reimplemented in TSlider.; Definition at line 6713 of file TPad.cxx. ◆ StreamerNVirtual(). void TPad::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 419 of file TPad.h. ◆ Update(). void TPad::Update ; (; ). overridevirtual . Update pad. ; Implements TVirtualPad.; Definition at line 2935 of file TPad.cxx. ◆ UpdateAsync(). void TPad::UpdateAsync ; (; ). overridevirtual . Asynchronous pad update. ; In case of web-based canvas triggers update of the canvas on the client side, but does not wait that real update is completed. Avoids blocking of caller thread. Have to be used if called from other web-based widget to avoid logical dead-locks. In case of normal canvas just canvas->Update() is performed. ; Implements TVirtualPad.; Definition at line 2947 of file TPad.cxx. ◆ UseCurrentStyle(). void TPad::UseCurrentStyle ; (; ). overridevirtual . Force a copy of current style for all objects in pad. ; Reimplemented from TObject.; Definition at line 6927 of file TPad.cxx. ◆ UtoAbsPixel(). Int_t TPad::UtoAbsPixel ; (; Double_t ; u); const. overridevirtual . Convert X NDC to absolute pixel. ; Implements TVirtualPad.; Definition at line 7459 of file TPad.cxx. ◆ UtoPixel(). Int_t TPad::UtoPixel ; (; Double_t ; u); const. overridevirtual . Convert X NDC to pixel. ; Implements TVirtualPad.; Definition at line 7433 of file TPad.cxx. ◆ VtoAbsPixel(). Int_t TPad::VtoAbsPixel ; (; Dou",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPad.html:127365,update,update,127365,doc/master/classTPad.html,https://root.cern,https://root.cern/doc/master/classTPad.html,1,['update'],['update']
Deployability,"to global function by name.; If params != 0 it will also resolve overloading other it returns the first; name match.; If params == 0 and load is true force reading of all currently defined; global functions from Cling.; The param string must be of the form: ""3189,\""aap\"",1.3"". TFunction * GetGlobalFunctionWithPrototype(const char* name, const char* proto = 0, Bool_t load = kFALSE); Return pointer to global function by name. If proto != 0; it will also resolve overloading. If load is true force reading; of all currently defined global functions from CINT (more expensive).; The proto string must be of the form: ""int, char*, float"". TObject * GetGeometry(const char* name) const; Return pointer to Geometry with name. TCollection * GetListOfEnums(Bool_t load = kFALSE). TCollection * GetListOfFunctionTemplates(). TCollection * GetListOfGlobals(Bool_t load = kFALSE); Return list containing the TGlobals currently defined.; Since globals are created and deleted during execution of the; program, we need to update the list of globals every time we; execute this method. However, when calling this function in; a (tight) loop where no interpreter symbols will be created; you can set load=kFALSE (default). TCollection * GetListOfGlobalFunctions(Bool_t load = kFALSE); Return list containing the TFunctions currently defined.; Since functions are created and deleted during execution of the; program, we need to update the list of functions every time we; execute this method. However, when calling this function in; a (tight) loop where no interpreter symbols will be created; you can set load=kFALSE (default). TCollection * GetListOfTypes(Bool_t load = kFALSE); Return a dynamic list giving access to all TDataTypes (typedefs); currently defined. The list is populated on demand. Calling; gROOT->GetListOfTypes()->FindObject(nameoftype);; will return the TDataType corresponding to 'nameoftype'. If the; TDataType is not already in the list itself and the type does exist,; a new TDataType will",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TROOT.html:28404,update,update,28404,root/html602/TROOT.html,https://root.cern,https://root.cern/root/html602/TROOT.html,2,['update'],['update']
Deployability,to have effect; 215 */; 216 void SetRandom(TRandom * r) {; 217 fRng = r;; 218 }; 219 ; 220 /**; 221 Return instance of the random engine used.; 222 */; 223 TRandom * GetRandom() {; 224 return fRng;; 225 }; 226 ; 227 /**; 228 Return an information string about the used Unuran generator method.; 229 @param extended : if true return some helper information about the existing options of the method.; 230 */; 231 std::string GetInfo(bool extended = false);; 232 ; 233 /**; 234 Return an ID string about the unuran generator method.; 235 */; 236 std::string GetGenId() const;; 237 ; 238 /**; 239 Return the dimension of unuran generator method.; 240 For 1D method returns 1 and for the multi-dimensional case; 241 must be equal to the distribution dimension.; 242 */; 243 int GetDimension() const;; 244 ; 245 /**; 246 Return the type of the distribution.; 247 See documentation of `unuran_distr_get_type` for the possible; 248 types of distributions.; 249 */; 250 int GetDistType() const;; 251 ; 252 /// Return true for a univariate continuous distribution.; 253 bool IsDistCont() const;; 254 /// Return true for a multivariate continuous distribution.; 255 bool IsDistMultiCont() const;; 256 /// Return true for a discrete distribution.; 257 bool IsDistDiscrete() const;; 258 /// Return true for an empirical distribution.; 259 bool IsDistEmpirical() const;; 260 ; 261 ; 262 ; 263 /**; 264 set the seed for the random number generator; 265 */; 266 void SetSeed(unsigned int seed);; 267 ; 268 /**; 269 set log level; 270 */; 271 bool SetLogLevel(unsigned int iflag = 1);; 272 ; 273 /**; 274 set stream for log and error (not yet implemented); 275 */; 276 bool SetLogStream() { return false;}; 277 ; 278 /**; 279 used Unuran method; 280 */; 281 const std::string & MethodName() const { return fMethod; }; 282 ; 283protected:; 284 ; 285 ; 286 bool SetRandomGenerator();; 287 ; 288 bool SetContDistribution(const TUnuranContDist & dist );; 289 ; 290 bool SetMultiDistribution(const TUnuranMultiContDist & di,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TUnuran_8h_source.html:9886,continuous,continuous,9886,doc/master/TUnuran_8h_source.html,https://root.cern,https://root.cern/doc/master/TUnuran_8h_source.html,1,['continuous'],['continuous']
Deployability,"to perform the computation ; [in]resultreturns the result of the computation . Reimplemented from TVirtualX. ◆ UnmapWindow(). void TGWin32VirtualXProxy::UnmapWindow ; (; Window_t ; id). overridevirtual . Unmaps the specified window ""id"". ; If the specified window is already unmapped, this function has no effect. Any child window will no longer be visible (but they are still mapped) until another map call is made on the parent. ; Reimplemented from TVirtualX. ◆ Update(). void TGWin32VirtualXProxy::Update ; (; Int_t ; mode = 0). overridevirtual . Flushes (mode = 0, default) or synchronizes (mode = 1) X output buffer. ; Flush flushes output buffer. Sync flushes buffer and waits till all requests have been processed by X server. ; Reimplemented from TVirtualX. ◆ UpdateWindow(). void TGWin32VirtualXProxy::UpdateWindow ; (; Int_t ; mode). overridevirtual . Updates or synchronises client and server once (not permanent). ; according to ""mode"".; Parameters. [in]modeupdate mode.; mode = 1 update; mode = 0 sync . Reimplemented from TVirtualX. ◆ Warp(). void TGWin32VirtualXProxy::Warp ; (; Int_t ; ix, . Int_t ; iy, . Window_t ; id = 0 . ). overridevirtual . Sets the pointer position. ; Parameters. [in]ixnew X coordinate of pointer ; [in]iynew Y coordinate of pointer ; [in]idwindow identifier. Coordinates are relative to the origin of the window id or to the origin of the current window if id == 0. ; Reimplemented from TVirtualX. ◆ WMDeleteNotify(). void TGWin32VirtualXProxy::WMDeleteNotify ; (; Window_t ; id). overridevirtual . Tells WM to send message when window is closed via WM. ; Reimplemented from TVirtualX. ◆ WriteGIF(). Int_t TGWin32VirtualXProxy::WriteGIF ; (; char * ; name). overridevirtual . Writes the current window into GIF file. ; Returns 1 in case of success, 0 otherwise. ; Reimplemented from TVirtualX. ◆ WritePixmap(). void TGWin32VirtualXProxy::WritePixmap ; (; Int_t ; wid, . UInt_t ; w, . UInt_t ; h, . char * ; pxname . ). overridevirtual . Writes the pixmap ""w",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGWin32VirtualXProxy.html:123800,update,update,123800,doc/master/classTGWin32VirtualXProxy.html,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html,1,['update'],['update']
Deployability,"to print itself. ; Reimplemented from TObject.; Definition at line 50 of file RooNumGenConfig.h. ◆ printMultiline(). void RooNumGenConfig::printMultiline ; (; std::ostream & ; os, . Int_t ; content, . bool ; verbose, . TString ; indent = """" . ); const. overridevirtual . Detailed printing interface. ; Reimplemented from RooPrintable.; Definition at line 322 of file RooNumGenConfig.cxx. ◆ Streamer(). void RooNumGenConfig::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void RooNumGenConfig::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 75 of file RooNumGenConfig.h. Member Data Documentation. ◆ _configSets. RooLinkedList RooNumGenConfig::_configSets. protected . List of configuration sets for individual integration methods. ; Definition at line 73 of file RooNumGenConfig.h. ◆ _method1D. RooCategory RooNumGenConfig::_method1D. protected . Selects integration method for 1D p.d.f.s. ; Definition at line 58 of file RooNumGenConfig.h. ◆ _method1DCat. RooCategory RooNumGenConfig::_method1DCat. protected . Selects integration method for 1D p.d.f.s with categories. ; Definition at line 59 of file RooNumGenConfig.h. ◆ _method1DCond. RooCategory RooNumGenConfig::_method1DCond. protected . Selects integration method for 1D conditional p.d.f.s. ; Definition at line 60 of file RooNumGenConfig.h. ◆ _method1DCondCat. RooCategory RooNumGenConfig::_method1DCondCat. protected . Selects integration method for 1D conditional p.d.f.s with categories. ; Definition at line 61 of file RooNumGenConfig.h. ◆ _method2D. RooCategory RooNumGenConfig::_method2D. protected . Selects integration method for 2D p.d.f.s. ; Definition at line 63 of file RooNumGenConfig.h. ◆ _method2DCat. RooCategory RooNumGenConfig::_method2DCat. protected . Selects integration method for 2D p.d.f.s with categories. ; Definition at line 64 of file RooNumGenConfig.h. ◆ _method2DCond. RooCat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooNumGenConfig.html:19936,integrat,integration,19936,doc/master/classRooNumGenConfig.html,https://root.cern,https://root.cern/doc/master/classRooNumGenConfig.html,1,['integrat'],['integration']
Deployability,"to the first m elements in A. ;  ; static Scalar_t Sum (const Matrix_t &A);  Compute the sum of all elements in A. ;  ; static bool AlmostEquals (const Matrix_t &A, const Matrix_t &B, double epsilon=0.1);  Check two matrices for equality, taking floating point arithmetic errors into account. ;  ; static void ConstAdd (Matrix_t &A, Scalar_t beta);  Add the constant beta to all the elements of matrix A and write the result into A. ;  ; static void ConstMult (Matrix_t &A, Scalar_t beta);  Multiply the constant beta to all the elements of matrix A and write the result into A. ;  ; static void ReciprocalElementWise (Matrix_t &A);  Reciprocal each element of the matrix A and write the result into A. ;  ; static void SquareElementWise (Matrix_t &A);  Square each element of the matrix A and write the result into A. ;  ; static void SqrtElementWise (Matrix_t &A);  Square root each element of the matrix A and write the result into A. ;  ; static void AdamUpdate (Matrix_t &A, const Matrix_t &M, const Matrix_t &V, Scalar_t alpha, Scalar_t eps);  Adam updates. ;  ; static void AdamUpdateFirstMom (Matrix_t &A, const Matrix_t &B, Scalar_t beta);  ; static void AdamUpdateSecondMom (Matrix_t &A, const Matrix_t &B, Scalar_t beta);  ; static void PrintTensor (const Tensor_t &A, const std::string name=""Cpu-tensor"", bool truncate=false);  . Static Private Attributes; static TRandom * fgRandomGen = nullptr;  . #include <TMVA/DNN/Architectures/Cpu.h>; Member Typedef Documentation. ◆ ActivationDescriptor_t. template<typename AReal = Float_t> . using TMVA::DNN::TCpu< AReal >::ActivationDescriptor_t = DummyDescriptor. Definition at line 75 of file Cpu.h. ◆ AlgorithmBackward_t. template<typename AReal = Float_t> . using TMVA::DNN::TCpu< AReal >::AlgorithmBackward_t = DummyConvolutionBwdDataAlgo. Definition at line 83 of file Cpu.h. ◆ AlgorithmDataType_t. template<typename AReal = Float_t> . using TMVA::DNN::TCpu< AReal >::AlgorithmDataType_t = DummyDataType. Definition at line 85 of file Cpu.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TCpu.html:23474,update,updates,23474,doc/master/classTMVA_1_1DNN_1_1TCpu.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TCpu.html,1,['update'],['updates']
Deployability,"to the first m elements in A. ;  ; static Scalar_t Sum (const Matrix_t &A);  Compute the sum of all elements in A. ;  ; static bool AlmostEquals (const Matrix_t &A, const Matrix_t &B, double epsilon=0.1);  Check two matrices for equality, taking floating point arithmetic errors into account. ;  ; static void ConstAdd (Matrix_t &A, Scalar_t beta);  Add the constant beta to all the elements of matrix A and write the result into A. ;  ; static void ConstMult (Matrix_t &A, Scalar_t beta);  Multiply the constant beta to all the elements of matrix A and write the result into A. ;  ; static void ReciprocalElementWise (Matrix_t &A);  Reciprocal each element of the matrix A and write the result into A. ;  ; static void SquareElementWise (Matrix_t &A);  Square each element of the matrix A and write the result into A. ;  ; static void SqrtElementWise (Matrix_t &A);  Square root each element of the matrix A and write the result into A. ;  ; static void AdamUpdate (Matrix_t &A, const Matrix_t &M, const Matrix_t &V, Scalar_t alpha, Scalar_t eps);  Adam updates. ;  ; static void AdamUpdateFirstMom (Matrix_t &A, const Matrix_t &B, Scalar_t beta);  ; static void AdamUpdateSecondMom (Matrix_t &A, const Matrix_t &B, Scalar_t beta);  ; static void PrintTensor (const Tensor_t &A, const std::string name=""Cuda-tensor"", bool=false);  ; static void SumRows (Matrix_t &B, const Matrix_t &A);  extra functions defined only for CPU architecture !!! ;  . Static Private Attributes; static TRandom * fgRandomGen = nullptr;  . #include <TMVA/DNN/Architectures/Cuda.h>; Member Typedef Documentation. ◆ ActivationDescriptor_t. template<typename AReal = Float_t> . using TMVA::DNN::TCuda< AReal >::ActivationDescriptor_t = CudaActivationDescriptor. Definition at line 78 of file Cuda.h. ◆ AFloat. template<typename AReal = Float_t> . using TMVA::DNN::TCuda< AReal >::AFloat = AReal. Definition at line 70 of file Cuda.h. ◆ AlgorithmBackward_t. template<typename AReal = Float_t> . using TMVA::DNN::TCuda< AReal >",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TCuda.html:23185,update,updates,23185,doc/master/classTMVA_1_1DNN_1_1TCuda.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TCuda.html,1,['update'],['updates']
Deployability,"to the given function of the first class that matches the specifications of the requested integration considering the number of dimensions, the nature of the limits (open ended vs closed) and the user preference stated in 'config' ; Definition at line 183 of file RooNumIntFactory.cxx. ◆ DeclFileName(). static const char * RooNumIntFactory::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 75 of file RooNumIntFactory.h. ◆ getIntegratorName(). std::string RooNumIntFactory::getIntegratorName ; (; RooAbsFunc & ; func, . const RooNumIntConfig & ; config, . int ; ndim = 0, . bool ; isBinned = false . ); const. Definition at line 129 of file RooNumIntFactory.cxx. ◆ getPluginInfo(). PluginInfo const * RooNumIntFactory::getPluginInfo ; (; std::string const & ; name); const. inlineprivate . Definition at line 62 of file RooNumIntFactory.h. ◆ init(). void RooNumIntFactory::init ; (; ). private . Register all known integrators by calling their static registration functions. ; Definition at line 54 of file RooNumIntFactory.cxx. ◆ instance(). RooNumIntFactory & RooNumIntFactory::instance ; (; ). static . Static method returning reference to singleton instance of factory. ; Definition at line 82 of file RooNumIntFactory.cxx. ◆ IsA(). TClass * RooNumIntFactory::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 75 of file RooNumIntFactory.h. ◆ registerPlugin(). bool RooNumIntFactory::registerPlugin ; (; std::string const & ; name, . Creator const & ; creator, . const RooArgSet & ; defConfig, . bool ; canIntegrate1D, . bool ; canIntegrate2D, . bool ; canIntegrateND, . bool ; canIntegrateOpenEnded, . const char * ; depName = """" . ). Method accepting registration of a prototype numeric integrator along with a RooArgSet of its default configuration options and an optional list of names of other numeric integrators on which this integrator depe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooNumIntFactory.html:14445,integrat,integrators,14445,doc/master/classRooNumIntFactory.html,https://root.cern,https://root.cern/doc/master/classRooNumIntFactory.html,1,['integrat'],['integrators']
Deployability,"to the option PFC (Palette Fill Color) ;  thstackpalettecolor.C Palette coloring for histograms' stack is activated thanks to the options PFC (Palette Fill Color), PLC (Palette Line Color) and AMC (Palette Marker Color) ;  tprofile2polyRealistic.C;  tprofile2polyRealisticModuleError.C;  transpad.C Example of a canvas showing two histograms with different scales ;  twoscales.C Example of macro illustrating how to superimpose two histograms with different scales in the ""same"" pad ;  xyplot.C Example showing how to produce a plot with an orthogonal axis system centered at (0,0) ;  ► histfactory;  example.C;  example.py;  makeExample.C;  makeQuickModel.py;  ModifyInterpolation.C;  ► html;  MakeTutorials.C;  ► http;  custom.CThis program creates and fills one and two dimensional histogram Macro used to demonstrate usage of custom HTML page in custom.htm One can use plain JavaScript to assign different actions with HTML buttons ;  histfitserver.CThis program demonstrates simultaneous update of histogram and fitted function ;  httpaccess.CThis program demonstrates access control to the THttpServer with digest methods ;  httpcontrol.CThis program demonstrates simple application control via THttpServer Two histogram are filled within endless loop ;  httpserver.CThis program creates : ;  httptextlog.CThis macro demonstrates custom access and custom drawing for TMsgList class Main motivation for this example - demonstrate how traffic between server and client can be minimized and how one could build custom UI in the browser ;  httptextlog.js;  ► image;  galaxy_image.C Importing an image and manipulating it ;  hist2image.C Create an image from a 2-D histogram and manipulate it ;  hsumanim.C This script is a slightly modified version of hsum.C ;  image2hist.C Create a 2-D histogram from an image ;  img2pad.C Display image in canvas and pad ;  imgconv.C Open rose512.jpg and save it in the following formats: .png, .gif, .xpm and tiff ;  pad2png.C Create a canvas and save as png ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v610/files.html:126542,update,update,126542,doc/v610/files.html,https://root.cern,https://root.cern/doc/v610/files.html,1,['update'],['update']
Deployability,"to the transformation. Bool_t GetInput(const TMVA::Event* event, vector<Float_t>& input, vector<Char_t>& mask, Bool_t backTransform = kFALSE) const; select the values from the event. void SetOutput(TMVA::Event* event, vector<Float_t>& output, vector<Char_t>& mask, const TMVA::Event* oldEvent = 0, Bool_t backTransform = kFALSE) const; select the values from the event. void CountVariableTypes(UInt_t& nvars, UInt_t& ntgts, UInt_t& nspcts) const; count variables, targets and spectators. void CalcNorm(const vector<const TMVA::Event*,allocator<const TMVA::Event*> >& ); TODO --> adapt to variable,target,spectator selection; method to calculate minimum, maximum, mean, and RMS for all; variables used in the MVA. std::vector<TString>* GetTransformationStrings(Int_t cls) const; TODO --> adapt to variable,target,spectator selection; default transformation output; --> only indicate that transformation occurred. void UpdateNorm(Int_t ivar, Double_t x); TODO --> adapt to variable,target,spectator selection; update min and max of a given variable (target) and a given transformation method. void AttachXMLTo(void* parent); create XML description the transformation (write out info of selected variables). void ReadFromXML(void* trfnode); Read the input variables from the XML node. void MakeFunction(ostream& fout, const TString& fncName, Int_t part, UInt_t trCounter, Int_t cls); getinput and setoutput equivalent. void Initialize(). Bool_t PrepareTransformation(const vector<TMVA::Event*,allocator<TMVA::Event*> >& ). const Event* Transform(const TMVA::Event *const , Int_t cls) const. const Event* InverseTransform(const TMVA::Event *const , Int_t cls) const. void SetEnabled(Bool_t e); accessors. { fEnabled = e; }. void SetNormalise(Bool_t n); { fNormalise = n; }. Bool_t IsEnabled() const; { return fEnabled; }. Bool_t IsCreated() const; { return fCreated; }. Bool_t IsNormalised() const; { return fNormalise; }. void ToggleInputSortOrder(Bool_t sortOrder); { fSortGet = sortOrder; }. void SetOu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMVA__VariableTransformBase.html:10141,update,update,10141,root/html534/TMVA__VariableTransformBase.html,https://root.cern,https://root.cern/root/html534/TMVA__VariableTransformBase.html,1,['update'],['update']
Deployability,"to the; integration observables; ScanNumCdf() -- Apply scanning technique if cdf integral involves numeric integration [ default ]; ScanAllCdf() -- Always apply scanning technique; ScanNoCdf() -- Never apply scanning technique; ScanParameters(Int_t nbins, -- Parameters for scanning technique of making CDF: number; Int_t intOrder) of sampled bins and order of interpolation applied on numeric cdf. RooAbsReal* createScanCdf(const RooArgSet& iset, const RooArgSet& nset, Int_t numScanBins, Int_t intOrder). RooArgSet* getAllConstraints(const RooArgSet& observables, const RooArgSet& constrainedParams, Bool_t stripDisconnected = kTRUE) const; This helper function finds and collects all constraints terms of all coponent p.d.f.s; and returns a RooArgSet with all those terms. void clearEvalError(); Clear the evaluation error flag. Bool_t evalError(); Return the evaluation error flag. void raiseEvalError(); Raise the evaluation error flag. RooNumGenConfig* defaultGeneratorConfig(); Returns the default numeric MC generator configuration for all RooAbsReals. RooNumGenConfig* specialGeneratorConfig() const; Returns the specialized integrator configuration for _this_ RooAbsReal.; If this object has no specialized configuration, a null pointer is returned. RooNumGenConfig* specialGeneratorConfig(Bool_t createOnTheFly); Returns the specialized integrator configuration for _this_ RooAbsReal.; If this object has no specialized configuration, a null pointer is returned,; unless createOnTheFly is kTRUE in which case a clone of the default integrator; configuration is created, installed as specialized configuration, and returned. const RooNumGenConfig* getGeneratorConfig() const; Return the numeric MC generator configuration used for this object. If; a specialized configuration was associated with this object, that configuration; is returned, otherwise the default configuration for all RooAbsReals is returned. void setGeneratorConfig(const RooNumGenConfig& config); Set the given configurat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsPdf.html:76382,configurat,configuration,76382,root/html526/RooAbsPdf.html,https://root.cern,https://root.cern/root/html526/RooAbsPdf.html,1,['configurat'],['configuration']
Deployability,"to this file; TFileCacheRead*TFile::fCacheRead!Pointer to the read cache (if any); TMap*TFile::fCacheReadMap!Pointer to the read cache (if any); TFileCacheWrite*TFile::fCacheWrite!Pointer to the write cache (if any); TArrayC*TFile::fClassIndex!Index of TStreamerInfo classes written to this file; Int_tTFile::fCompressCompression level and algorithm; TDirectory::TContext*TDirectory::fContext!Pointer to a list of TContext object pointing to this TDirectory; Int_tTFile::fDFile descriptor; TDatimeTDirectoryFile::fDatimeCDate and time when directory is created; TDatimeTDirectoryFile::fDatimeMDate and time of last modification; Long64_tTFile::fENDLast used byte in file; TFile*TDirectoryFile::fFilepointer to current file in memory; TList*TFile::fFreeFree segments linked list table; Bool_tTWebFile::fHTTP11true if server support HTTP/1.1; Bool_tTWebFile::fHasModRoottrue if server has mod_root installed; TList*TFile::fInfoCache!Cached list of the streamer infos in this file; Bool_tTFile::fInitDone!True if the file has been initialized; Bool_tTFile::fIsArchive!True if this is a pure archive file; Bool_tTFile::fIsPcmFile!True if the file is a ROOT pcm file.; Bool_tTFile::fIsRootFile!True is this is a ROOT file, raw file otherwise; TList*TDirectoryFile::fKeysPointer to keys list in memory; TList*TDirectory::fListList of objects in memory; Bool_tTDirectoryFile::fModifiedtrue if directory has been modified; TObject*TDirectory::fMotherpointer to mother of the directory; TStringTWebFile::fMsgGetHeadcache GetHead() msg; TStringTWebFile::fMsgReadBuffercache ReadBuffer() msg; TStringTWebFile::fMsgReadBuffer10cache ReadBuffer10() msg; Bool_tTFile::fMustFlush!True if the file buffers must be flushed; Int_tTFile::fNProcessIDsNumber of TProcessID written to this file; TStringTNamed::fNameobject identifier; Int_tTFile::fNbytesFreeNumber of bytes for free segments structure; Int_tTFile::fNbytesInfoNumber of bytes for StreamerInfo record; Int_tTDirectoryFile::fNbytesKeysNumber of bytes for the",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TS3WebFile.html:23340,install,installed,23340,root/html602/TS3WebFile.html,https://root.cern,https://root.cern/root/html602/TS3WebFile.html,2,['install'],['installed']
Deployability,"toDelete),; 4958/// the top level objet will be deleted and recreate; 4959/// each time an entry is read, whether or not the; 4960/// TTree owns the object.; 4961 ; 4962void TBranchElement::SetAddress(void* addr); 4963{; 4964 SetAddressImpl(addr, (addr == nullptr));; 4965}; 4966 ; 4967/// See TBranchElement::SetAddress.; 4968/// If implied is true, we do not over-ride existing address for; 4969/// sub-branches.; 4970void TBranchElement::SetAddressImpl(void* addr, bool implied); 4971{; 4972 //; 4973 // Don't bother if we are disabled.; 4974 //; 4975 ; 4976 if (TestBit(kDoNotProcess)) {; 4977 return;; 4978 }; 4979 ; 4980 //; 4981 // FIXME: When would this happen?; 4982 //; 4983 ; 4984 if (fType < -1) {; 4985 return;; 4986 }; 4987 ; 4988 //; 4989 // Special case when called from code generated by TTree::MakeClass.; 4990 //; 4991 ; 4992 if (Longptr_t(addr) == -1) {; 4993 // FIXME: Do we have to release an object here?; 4994 // ReleaseObject();; 4995 fAddress = (char*) -1;; 4996 fObject = (char*) -1;; 4997 ResetBit(kDeleteObject);; 4998 ResetBit(kAddressSet);; 4999 return;; 5000 }; 5001 ; 5002 //; 5003 // Reset last read entry number, we have a new user object now.; 5004 //; 5005 ; 5006 fReadEntry = -1;; 5007 ; 5008 //; 5009 // Make sure our branch class is instantiated.; 5010 //; 5011 TClass* clOfBranch = fBranchClass.GetClass();; 5012 if( fTargetClass.GetClassName()[0] ) {; 5013 clOfBranch = fTargetClass;; 5014 }; 5015 ; 5016 //; 5017 // Try to build the streamer info.; 5018 //; 5019 ; 5020 TStreamerInfo *info = GetInfoImp();; 5021 ; 5022 // FIXME: Warn about failure to get the streamer info here?; 5023 ; 5024 //; 5025 // We may have allocated an object last time we were called.; 5026 //; 5027 ; 5028 if (fObject && TestBit(kDeleteObject)){; 5029 ReleaseObject();; 5030 }; 5031 ; 5032 //; 5033 // Remember the pointer to the pointer to our object.; 5034 //; 5035 ; 5036 fAddress = (char*) addr;; 5037 if (fAddress != (char*)(&fObject)) {; 5038 fObject = nullptr;; 5039 }; 50",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TBranchElement_8cxx_source.html:184011,release,release,184011,doc/master/TBranchElement_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TBranchElement_8cxx_source.html,1,['release'],['release']
Deployability,"tocol; string_masterCatName; map<std::string,SplitRule>_pdfmap; map<std::string,std::string>_restr. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BuildConfig(const char* pdfName, RooSimWSTool::SplitRule& sr); Add prototype p.d.f pdfName to build configuration with associated split rules 'sr'. BuildConfig(const char* pdfName, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none()); Construct build configuration from single prototype 'pdfName' and list of arguments; that can be passed to RooSimWSTool::build() method. This routine parses SplitParam(); SplitParamConstrained() and Restrict() arguments. BuildConfig(const RooArgSet& legacyBuildConfig); Constructor to make BuildConfig from legacy RooSimPdfBuilder configuration; Empty for now. void internalAddPdf(const char* pdfName, const char* miStateList, RooSimWSTool::SplitRule& sr); Internal routine to add prototype pdf 'pdfName' with list of associated master states 'miStateNameList; and split rules 'sr' to configuration. void restrictBuild(const char* catName, const char* stateList); Restrict build by only considering state names in stateList for split in category catName. BuildConfig(const char* pdfName, RooSimWSTool::SplitRule& sr). BuildConfig(const char* pdfName, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none()). virtual ~BuildConfig(); {}. » Last changed: Mon Jul 4 15:24:00 2011 » Last generated: 2011-07-04 15:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooSimWSTool__BuildConfig.html:5926,configurat,configuration,5926,root/html530/RooSimWSTool__BuildConfig.html,https://root.cern,https://root.cern/root/html530/RooSimWSTool__BuildConfig.html,1,['configurat'],['configuration']
Deployability,"tocol; string_masterCatName; map<std::string,SplitRule>_pdfmap; map<std::string,std::string>_restr. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BuildConfig(const char* pdfName, RooSimWSTool::SplitRule& sr); Add prototype p.d.f pdfName to build configuration with associated split rules 'sr'. BuildConfig(const char* pdfName, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none()); Construct build configuration from single prototype 'pdfName' and list of arguments; that can be passed to RooSimWSTool::build() method. This routine parses SplitParam(); SplitParamConstrained() and Restrict() arguments. BuildConfig(const RooArgSet& legacyBuildConfig); Constructor to make BuildConfig from legacy RooSimPdfBuilder configuration; Empty for now. void internalAddPdf(const char* pdfName, const char* miStateList, RooSimWSTool::SplitRule& sr); Internal routine to add prototype pdf 'pdfName' with list of associated master states 'miStateNameList; and split rules 'sr' to configuration. void restrictBuild(const char* catName, const char* stateList); Restrict build by only considering state names in stateList for split in category catName. BuildConfig(const char* pdfName, RooSimWSTool::SplitRule& sr). BuildConfig(const char* pdfName, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none()). virtual ~BuildConfig(); {}. » Last changed: Sat Oct 9 22:38:49 2010 » Last generated: 2010-10-09 22:38; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooSimWSTool__BuildConfig.html:5926,configurat,configuration,5926,root/html528/RooSimWSTool__BuildConfig.html,https://root.cern,https://root.cern/root/html528/RooSimWSTool__BuildConfig.html,1,['configurat'],['configuration']
Deployability,"tocol; string_masterCatName; map<std::string,SplitRule>_pdfmap; map<std::string,std::string>_restr. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BuildConfig(const char* pdfName, RooSimWSTool::SplitRule& sr); Add prototype p.d.f pdfName to build configuration with associated split rules 'sr'. BuildConfig(const char* pdfName, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none()); Construct build configuration from single prototype 'pdfName' and list of arguments; that can be passed to RooSimWSTool::build() method. This routine parses SplitParam(); SplitParamConstrained() and Restrict() arguments. BuildConfig(const RooArgSet& legacyBuildConfig); Constructor to make BuildConfig from legacy RooSimPdfBuilder configuration; Empty for now. void internalAddPdf(const char* pdfName, const char* miStateList, RooSimWSTool::SplitRule& sr); Internal routine to add prototype pdf 'pdfName' with list of associated master states 'miStateNameList; and split rules 'sr' to configuration. void restrictBuild(const char* catName, const char* stateList); Restrict build by only considering state names in stateList for split in category catName. BuildConfig(const char* pdfName, RooSimWSTool::SplitRule& sr). BuildConfig(const char* pdfName, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none()). virtual ~BuildConfig(); {}. » Last changed: Thu Nov 3 20:09:16 2011 » Last generated: 2011-11-03 20:09; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooSimWSTool__BuildConfig.html:5926,configurat,configuration,5926,root/html532/RooSimWSTool__BuildConfig.html,https://root.cern,https://root.cern/root/html532/RooSimWSTool__BuildConfig.html,1,['configurat'],['configuration']
Deployability,"tocol; string_masterCatName; map<string,RooSimWSTool::SplitRule>_pdfmap; map<string,string>_restr. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BuildConfig(const char* pdfName, RooSimWSTool::SplitRule& sr); Add prototype p.d.f pdfName to build configuration with associated split rules 'sr'. BuildConfig(const char* pdfName, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none()); Construct build configuration from single prototype 'pdfName' and list of arguments; that can be passed to RooSimWSTool::build() method. This routine parses SplitParam(); SplitParamConstrained() and Restrict() arguments. BuildConfig(const RooArgSet& legacyBuildConfig); Constructor to make BuildConfig from legacy RooSimPdfBuilder configuration; Empty for now. void internalAddPdf(const char* pdfName, const char* miStateList, RooSimWSTool::SplitRule& sr); Internal routine to add prototype pdf 'pdfName' with list of associated master states 'miStateNameList; and split rules 'sr' to configuration. void restrictBuild(const char* catName, const char* stateList); Restrict build by only considering state names in stateList for split in category catName. BuildConfig(const char* pdfName, RooSimWSTool::SplitRule& sr). BuildConfig(const char* pdfName, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none()). virtual ~BuildConfig(); {}. » Last changed: Tue Jun 30 14:35:49 2015 » Last generated: 2015-06-30 14:35; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooSimWSTool__BuildConfig.html:5952,configurat,configuration,5952,root/html602/RooSimWSTool__BuildConfig.html,https://root.cern,https://root.cern/root/html602/RooSimWSTool__BuildConfig.html,1,['configurat'],['configuration']
Deployability,"tokens) {; 575 components.addOwned(std::unique_ptr<RooAbsReal>{createIntObj(iset,nset,cfg, token.c_str())});; 576 }; 577 ; 578 const std::string title = std::string(""Integral of "") + GetTitle();; 579 const std::string fullName = std::string(GetName()) + integralNameSuffix(iset,nset,rangeName).Data();; 580 ; 581 auto out = std::make_unique<RooAddition>(fullName.c_str(), title.c_str(), components);; 582 out->addOwnedComponents(std::move(components));; 583 return RooFit::makeOwningPtr<RooAbsReal>(std::move(out));; 584}; 585 ; 586 ; 587 ; 588////////////////////////////////////////////////////////////////////////////////; 589/// Internal utility function for createIntegral() that creates the actual integral object.; 590RooFit::OwningPtr<RooAbsReal> RooAbsReal::createIntObj(const RooArgSet& iset2, const RooArgSet* nset2,; 591 const RooNumIntConfig* cfg, const char* rangeName) const; 592{; 593 // Make internal use copies of iset and nset; 594 RooArgSet iset(iset2) ;; 595 const RooArgSet* nset = nset2 ;; 596 ; 597 ; 598 // Initialize local variables perparing for recursive loop; 599 bool error = false ;; 600 const RooAbsReal* integrand = this ;; 601 std::unique_ptr<RooAbsReal> integral;; 602 ; 603 // Handle trivial case of no integration here explicitly; 604 if (iset.empty()) {; 605 ; 606 const std::string title = std::string(""Integral of "") + GetTitle();; 607 const std::string name = std::string(GetName()) + integralNameSuffix(iset,nset,rangeName).Data();; 608 ; 609 auto out = std::make_unique<RooRealIntegral>(name.c_str(), title.c_str(), *this, iset, nset, cfg, rangeName);; 610 return RooFit::makeOwningPtr<RooAbsReal>(std::move(out));; 611 }; 612 ; 613 // Process integration over remaining integration variables; 614 while(!iset.empty()) {; 615 ; 616 ; 617 // Find largest set of observables that can be integrated in one go; 618 RooArgSet innerSet ;; 619 findInnerMostIntegration(iset,innerSet,rangeName) ;; 620 ; 621 // If largest set of observables that can be integrated is",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsReal_8cxx_source.html:22753,integrat,integration,22753,doc/master/RooAbsReal_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html,1,['integrat'],['integration']
Deployability,ton*fOKOK button; UInt_tTGFrame::fOptionsframe options; TGCheckButton**fParBndbound setting switch; TGNumberEntryField**fParErrerror values; TGCheckButton**fParFixfix setting switch; TGNumberEntryField**fParMaxmax range values; TGNumberEntryField**fParMinmin range values; TGTextEntry**fParNamparameter names; TGTripleHSlider**fParSldtriple sliders; TGNumberEntry**fParStpstep values; TGNumberEntry**fParValparameter values; const TGWindow*TGWindow::fParentParent window; Double_t*fPerroriginal patameters' errors; Double_t*fPmaxmax limits of patameters range; Double_t*fPminmin limits of patameters range; Double_t*fPstporiginal patameters' step; Double_t*fPvaloriginal patameters' values; Double_tfRangexmaxmax function range; Double_tfRangexminmin function range; TGTextButton*fResetReset button; TStringTGMainFrame::fResourceNameWM resource name; Int_t*fRetCodeaddress to store return code; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; TGCheckButton*fUpdateimmediate update switch; UInt_tTGMainFrame::fWMHeightWM height; UInt_tTGMainFrame::fWMHeightIncWM height increments; EInitialStateTGMainFrame::fWMInitStateWM initial state; UInt_tTGMainFrame::fWMMaxHeightWM max height; UInt_tTGMainFrame::fWMMaxWidthWM max width; UInt_tTGMainFrame::fWMMinHeightWM min height; UInt_tTGMainFrame::fWMMinWidthWM min width; UInt_tTGMainFrame::fWMWidthWM width; UInt_tTGMainFrame::fWMWidthIncWM width increments; Int_tTGMainFrame::fWMXWM x position; Int_tTGMainFrame::fWMYWM y position; UInt_tTGFrame::fWidthframe width; TStringTGMainFrame::fWindowNamewindow name; Int_tTGFrame::fXframe x position; Int_tTGFrame::fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame:,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TFitParametersDialog.html:22135,update,update,22135,root/html528/TFitParametersDialog.html,https://root.cern,https://root.cern/root/html528/TFitParametersDialog.html,3,['update'],['update']
Deployability,ton::fPrevStateOnbit to save previos state On/Off; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; Bool_tfSplitkTRUE if menu is in split mode; EButtonStateTGButton::fStatebutton state; Bool_tTGTextButton::fStateOnbit to save the state across disable/enable; Bool_tTGButton::fStayDowntrue if button has to stay down; UInt_tTGButton::fStylebutton style (modern or classic); UInt_tfTBWidthwidth of text button; UInt_tTGButton::fTHeightbutton height; TGTextLayout*TGTextButton::fTLayouttext layout; Int_tTGTextButton::fTModetext justify mode; UInt_tTGButton::fTWidthbutton width; TGToolTip*TGButton::fTiptool tip associated with button; void*TGButton::fUserDatapointer to user data structure; TGStringfWidestLabelLongest label that can be on the button; Int_tTGWidget::fWidgetFlagswidget status flags (OR of EWidgetStatus); Int_tTGWidget::fWidgetIdthe widget id (used for event processing); UInt_tTGFrame::fWidthframe width; Int_tTGTextButton::fWrapLengthwrap length; Int_tTGFrame::fXframe x position; Int_tTGFrame::fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static const TGFont*TGTextButton::fgDefaultFont; static Pixel_tTGFrame::fgDefaultFrameBackground; static const TGGC*TGButton::fgDefaultGC; static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGButton::fgHibckgndGC; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static Window_tTGButton::fgReleaseBtnthe last released button; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel.,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGSplitButton.html:25205,release,released,25205,root/html530/TGSplitButton.html,https://root.cern,https://root.cern/root/html530/TGSplitButton.html,3,['release'],['released']
Deployability,"tong.; Method of the same name as the file(minus the extension and path); will be called by the generated skeleton's Process method as follow:; [if (cutfilename())] htemp->Fill(macrofilename());. ""option"" can be used select some of the optional features during; the code generation. The possible options are:; nohist : indicates that the generated ProcessFill should not; fill the histogram. 'maxUnrolling' controls how deep in the class hierarchy does the; system 'unroll' class that are not split. 'unrolling' a class; will allow direct access to its data members a class (this; emulates the behavior of TTreeFormula). The main features of this skeleton are:. * on-demand loading of branches; * ability to use the 'branchname' as if it was a data member; * protection against array out-of-bound; * ability to use the branch data as object (when the user code is available). For example with Event.root, if; Double_t somepx = fTracks.fPx[2];; is executed by one of the method of the skeleton,; somepx will be updated with the current value of fPx of the 3rd track. Both macrofilename and the optional cutfilename are expected to be; the name of source files which contain at least a free standing; function with the signature:; x_t macrofilename(); // i.e function with the same name as the file; and; y_t cutfilename(); // i.e function with the same name as the file. x_t and y_t needs to be types that can convert respectively to a double; and a bool (because the skeleton uses:; if (cutfilename()) htemp->Fill(macrofilename());. This 2 functions are run in a context such that the branch names are; available as local variables of the correct (read-only) type. Note that if you use the same 'variable' twice, it is more efficient; to 'cache' the value. For example; Int_t n = fEventNumber; // Read fEventNumber; if (n<10 || n>10) { ... }; is more efficient than; if (fEventNumber<10 || fEventNumber>10). Access to TClonesArray. If a branch (or member) is a TClonesArray (let's say fTracks), you; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTreePlayer.html:44283,update,updated,44283,root/html528/TTreePlayer.html,https://root.cern,https://root.cern/root/html528/TTreePlayer.html,6,['update'],['updated']
Deployability,"tor (IntegrationMultiDim::Type type, double absTol, double relTol, unsigned int ncall);  . Private Member Functions;  IntegratorMultiDim (const IntegratorMultiDim &);  ; IntegratorMultiDim & operator= (const IntegratorMultiDim &);  . Private Attributes; std::unique_ptr< IMultiGenFunction > fFunc;  pointer to owned function ;  ; VirtualIntegratorMultiDim * fIntegrator;  pointer to multi-dimensional integrator base class ;  . #include <Math/IntegratorMultiDim.h>; Member Typedef Documentation. ◆ Type. typedef IntegrationMultiDim::Type ROOT::Math::IntegratorMultiDim::Type. Definition at line 51 of file IntegratorMultiDim.h. Constructor & Destructor Documentation. ◆ IntegratorMultiDim() [1/3]. ROOT::Math::IntegratorMultiDim::IntegratorMultiDim ; (; IntegrationMultiDim::Type ; type = IntegrationMultiDim::kDEFAULT, . double ; absTol = -1, . double ; relTol = -1, . unsigned int ; ncall = 0 . ). inlineexplicit . Generic constructor of multi dimensional Integrator. ; By default uses the Adaptive integration method; Parameters. typeintegration type (adaptive, MC methods, etc..) ; absToldesired absolute Error ; relToldesired relative Error ; ncallnumber of function calls (apply only to MC integration methods). In case no parameter values are passed the default ones used in IntegratorMultiDimOptions are used ; Definition at line 64 of file IntegratorMultiDim.h. ◆ IntegratorMultiDim() [2/3]. ROOT::Math::IntegratorMultiDim::IntegratorMultiDim ; (; const IMultiGenFunction & ; f, . IntegrationMultiDim::Type ; type = IntegrationMultiDim::kDEFAULT, . double ; absTol = -1, . double ; relTol = -1, . unsigned int ; ncall = 0 . ). inlineexplicit . Generic Constructor of multi dimensional Integrator passing a function. ; By default uses the adaptive integration method; Parameters. fintegration function (multi-dim interface) ; typeintegration type (adaptive, MC methods, etc..) ; absToldesired absolute Error ; relToldesired relative Error ; ncallnumber of function calls (apply only to MC inte",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html:4241,integrat,integration,4241,doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html,1,['integrat'],['integration']
Deployability,"tor of GSL MCIntegrator. VEGAS MC is set as default integration type. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param calls maximum number of function calls. GSLMCIntegrator(const char * type, double absTol, double relTol, unsigned int calls); constructor of GSL MCIntegrator. VEGAS MC is set as default integration type. @param type type of integration using a char * (required by plug-in manager); @param absTol desired absolute Error; @param relTol desired relative Error; @param calls maximum number of function calls. virtual ~GSLMCIntegrator(). destructor. GSLMCIntegrator(const ROOT::Math::GSLMCIntegrator& ); disable copy ctrs. GSLMCIntegrator & operator=(const ROOT::Math::GSLMCIntegrator& ). void SetFunction(const ROOT::Math::IMultiGenFunction& f); template methods for generic functors. method to set the a generic integration function. @param f integration function. The function type must implement the assigment operator, <em> double operator() ( double x ) </em>. void SetFunction(ROOT::Math::GSLMCIntegrator::GSLMonteFuncPointer f, unsigned int dim, void* p = 0). double Integral(const ROOT::Math::GSLMCIntegrator::GSLMonteFuncPointer& f, unsigned int dim, double* a, double* b, void* p = 0); methods using GSLMonteFuncPointer. evaluate the Integral of a function f over the defined hypercube (a,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower value of the integration interval; @param b upper value of the integration interval. double Integral(const double* a, const double* b). evaluate the integral using the previously defined function. double Result() const; to be added later; double Integral(const GSLMonteFuncPointer & f);; double Integral(GSLMonteFuncPointer f, void * p, double* a, double* b);. return the type of the integration used. MCIntegration::Type MCType() ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__GSLMCIntegrator.html:3981,integrat,integration,3981,root/html526/ROOT__Math__GSLMCIntegrator.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__GSLMCIntegrator.html,1,['integrat'],['integration']
Deployability,tor(). TEveParamListEditor::~TEveParamListEditor ; (; ). inlineoverride . Definition at line 140 of file TEveParamList.h. Member Function Documentation. ◆ Class(). static TClass * TEveParamListEditor::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TEveParamListEditor::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TEveParamListEditor::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 149 of file TEveParamList.h. ◆ DeclFileName(). static const char * TEveParamListEditor::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 149 of file TEveParamList.h. ◆ DoBoolUpdate(). void TEveParamListEditor::DoBoolUpdate ; (; ). Slot for bool parameter update. ; Definition at line 248 of file TEveParamList.cxx. ◆ DoFloatUpdate(). void TEveParamListEditor::DoFloatUpdate ; (; ). Slot for float parameter update. ; Definition at line 234 of file TEveParamList.cxx. ◆ DoIntUpdate(). void TEveParamListEditor::DoIntUpdate ; (; ). Slot for integer parameter update. ; Definition at line 220 of file TEveParamList.cxx. ◆ InitModel(). void TEveParamListEditor::InitModel ; (; TObject * ; obj). protectedvirtual . Initialize widgets when a new object is selected. ; Definition at line 117 of file TEveParamList.cxx. ◆ IsA(). TClass * TEveParamListEditor::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 149 of file TEveParamList.h. ◆ operator=(). TEveParamListEditor & TEveParamListEditor::operator= ; (; const TEveParamListEditor & ; ). private . ◆ SetModel(). void TEveParamListEditor::SetModel ; (; TObject * ; obj). overridevirtual . Set model object. ; Implements TGedFrame.; Definition at line 203 of file TEveParamList.cxx. ◆ Streamer(). void TEveParamListEditor::Streamer ; (; TBuffer & ; R__b). overridevirtu,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveParamListEditor.html:35341,update,update,35341,doc/master/classTEveParamListEditor.html,https://root.cern,https://root.cern/doc/master/classTEveParamListEditor.html,1,['update'],['update']
Deployability,"tor(RooNumIntFactory& fact); Register RooImproperIntegrator1D, its parameters and capabilities with RooNumIntFactory. RooImproperIntegrator1D(); Default constructor. RooImproperIntegrator1D(const RooAbsFunc& function); Constructor with function binding. The integration range is taken from the; definition in the function binding. RooImproperIntegrator1D(const RooAbsFunc& function, const RooNumIntConfig& config); Constructor with function binding and configuration object. The integration range is taken; from the definition in the function binding. RooImproperIntegrator1D(const RooAbsFunc& function, Double_t xmin, Double_t xmax, const RooNumIntConfig& config); Constructor with function binding, definition of integration range and configuration object. RooAbsIntegrator* clone(const RooAbsFunc& function, const RooNumIntConfig& config) const; Return clone of integrator with given function and configuration. Needed by RooNumIntFactory. void initialize(const RooAbsFunc* function = 0); Initialize the integrator, construct and initialize subintegrators. ~RooImproperIntegrator1D(); Destructor. Bool_t setLimits(Double_t* xmin, Double_t* xmax); Change our integration limits. Return kTRUE if the new limits are; ok, or otherwise kFALSE. Always returns kFALSE and does nothing; if this object was constructed to always use our integrand's limits. Bool_t checkLimits() const; Check if the limits are valid. For this integrator all limit configurations; are valid, but if the limits change between two calculate() calls it; may be necessary to reconfigure (e.g. if an open ended range becomes; a closed range. Double_t integral(const Double_t* yvec = 0); Calculate the integral at the given parameter values of the function binding. Bool_t setUseIntegrandLimits(Bool_t flag); {_useIntegrandLimits = flag ; return kTRUE ; }. Bool_t canIntegrate1D() const; { return kTRUE ; }. Bool_t canIntegrate2D() const; { return kFALSE ; }. Bool_t canIntegrateND() const; { return kFALSE ; }. Bool_t canIntegrateO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooImproperIntegrator1D.html:8410,integrat,integrator,8410,root/html526/RooImproperIntegrator1D.html,https://root.cern,https://root.cern/root/html526/RooImproperIntegrator1D.html,5,['integrat'],['integrator']
Deployability,"tor(RooNumIntFactory& fact); Register RooImproperIntegrator1D, its parameters and capabilities with RooNumIntFactory. RooImproperIntegrator1D(); Default constructor. RooImproperIntegrator1D(const RooAbsFunc& function); Constructor with function binding. The integration range is taken from the; definition in the function binding. RooImproperIntegrator1D(const RooAbsFunc& function, const RooNumIntConfig& config); Constructor with function binding and configuration object. The integration range is taken; from the definition in the function binding. RooImproperIntegrator1D(const RooAbsFunc& function, Double_t xmin, Double_t xmax, const RooNumIntConfig& config); Constructor with function binding, definition of integration range and configuration object. RooAbsIntegrator* clone(const RooAbsFunc& function, const RooNumIntConfig& config) const; Return clone of integrator with given function and configuration. Needed by RooNumIntFactory. void initialize(const RooAbsFunc* function = 0); Initialize the integrator, construct and initialize subintegrators. ~RooImproperIntegrator1D(); Destructor. Bool_t setLimits(Double_t* xmin, Double_t* xmax); Change our integration limits. Return kTRUE if the new limits are; ok, or otherwise kFALSE. Always returns kFALSE and does nothing; if this object was constructed to always use our integrand's limits. Bool_t checkLimits() const; Check if the limits are valid. For this integrator all limit configurations; are valid, but if the limits change between two calculate() calls it; may be necessary to reconfigure (e.g. if an open ended range becomes; a closed range. Double_t integral(const Double_t* yvec = 0); Calculate the integral at the given parameter values of the function binding. RooImproperIntegrator1D(). Bool_t setUseIntegrandLimits(Bool_t flag); {_useIntegrandLimits = flag ; return kTRUE ; }. Bool_t canIntegrate1D() const; { return kTRUE ; }. Bool_t canIntegrate2D() const; { return kFALSE ; }. Bool_t canIntegrateND() const; { return kFALS",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooImproperIntegrator1D.html:9343,integrat,integrator,9343,root/html602/RooImproperIntegrator1D.html,https://root.cern,https://root.cern/root/html602/RooImproperIntegrator1D.html,2,['integrat'],['integrator']
Deployability,"tor); Bool_tRooAbsReal::_boolValue! Transient cache for bool values from tree branches ; UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches ; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; TIterator*_coefIter! do not persist; RooListProxy_coefList; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; Bool_tRooAbsArg::_isConstant! Cached isConstant status ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; TArrayD_limits; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; Int_t_nBins; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooParametricStepFunction.html:41349,integrat,integration,41349,root/html534/RooParametricStepFunction.html,https://root.cern,https://root.cern/root/html534/RooParametricStepFunction.html,1,['integrat'],['integration']
Deployability,"tor. void Init(); Do the real inititialization. void InitLocalCache(); Init the local cache if required. void ParseInitOpts(const char* opts); Parse the input string and set the init bits accordingly; Format is; dir:<datasetdir> [mss:<mss-url>] [opt:<base-options>]; The <datasetdir> is mandatory.; See TDataSetManager::ParseInitOpts for the available; base options.; The base options are already initialized by the base constructor. const char * GetDataSetPath(const char* group, const char* user, const char* dsName, TString& md5path, Bool_t local = kFALSE); Returns path of the indicated dataset. The extension is '.root' for all files; except for 'dsName==ls' which have extension '.txt'.; If 'local' is kTRUE the local cache path is returned instead in the form; <cachedir>/<group>.<user>.<dsName>.<ext>.; NB: contains a static TString for result, so copy result before using twice. Int_t NotifyUpdate(const char* group, const char* user, const char* dspath, Long_t mtime, const char* checksum = 0); Save into the <datasetdir>/kDataSet_DataSetList file the name of the updated; or created or modified dataset. For still existing datasets, fill the; modification date in seconds anf the checksum.; Returns 0 on success, -1 on error. Int_t CreateLsFile(const char* group, const char* user, Long_t& mtime, TString& checksum); Create or recreate the dataset lists for 'uri'.; The list are saved in text form in 'uri'/ls.txt for fast browsing and in; 'uri'/ls.root in form of TMacro for optimized and portable transfer.; Return 0 on success, 1 if the file was empty, -1 on error. Bool_t BrowseDataSets(const char* group, const char* user, const char* dsName, UInt_t option, TObject* target); Adds the dataset in the folder of group, user to the list in target.; If dsName is defined, only the information about the specified dataset; is processed. The unsigned int 'option' is forwarded to GetDataSet and BrowseDataSet.; Available options (to be .or.ed):; kPrint print the dataset content; kQuotaUpdat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TDataSetManagerFile.html:13648,update,updated,13648,root/html534/TDataSetManagerFile.html,https://root.cern,https://root.cern/root/html534/TDataSetManagerFile.html,3,['update'],['updated']
Deployability,"tor. void Init(); Do the real inititialization. void InitLocalCache(); Init the local cache if required. void ParseInitOpts(const char* opts); Parse the input string and set the init bits accordingly; Format is; dir:<datasetdir> [mss:<mss-url>] [opt:<base-options>]; The <datasetdir> is mandatory.; See TDataSetManager::ParseInitOpts for the available; base options.; The base options are laready initialized by the base constructor. const char * GetDataSetPath(const char* group, const char* user, const char* dsName, TString& md5path, Bool_t local = kFALSE); Returns path of the indicated dataset. The extension is '.root' for all files; except for 'dsName==ls' which have extension '.txt'.; If 'local' is kTRUE the local cache path is returned instead in the form; <cachedir>/<group>.<user>.<dsName>.<ext>.; NB: contains a static TString for result, so copy result before using twice. Int_t NotifyUpdate(const char* group, const char* user, const char* dspath, Long_t mtime, const char* checksum = 0); Save into the <datasetdir>/kDataSet_DataSetList file the name of the updated; or created or modified dataset. For still existing datasets, fill the; modification date in seconds anf the checksum.; Returns 0 on success, -1 on error. Int_t CreateLsFile(const char* group, const char* user, Long_t& mtime, TString& checksum); Create or recreate the dataset lists for 'uri'.; The list are saved in text form in 'uri'/ls.txt for fast browsing and in; 'uri'/ls.root in form of TMacro for optimized and portable transfer.; Return 0 on success, 1 if the file was empty, -1 on error. Bool_t BrowseDataSets(const char* group, const char* user, const char* dsName, UInt_t option, TObject* target); Adds the dataset in the folder of group, user to the list in target.; If dsName is defined, only the information about the specified dataset; is processed. The unsigned int 'option' is forwarded to GetDataSet and BrowseDataSet.; Available options (to be .or.ed):; kPrint print the dataset content; kQuotaUpdat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TDataSetManagerFile.html:13026,update,updated,13026,root/html528/TDataSetManagerFile.html,https://root.cern,https://root.cern/root/html528/TDataSetManagerFile.html,3,['update'],['updated']
Deployability,"tor. ~TEllipse(); Ellipse default destructor. TEllipse(const TEllipse& ellipse); Copy constructor. void Copy(TObject& ellipse) const; Copy this ellipse to ellipse. Int_t DistancetoPrimitive(Int_t px, Int_t py); Compute distance from point px,py to an ellipse. Compute the closest distance of approach from point px,py to this; ellipse. The distance is computed in pixels units. In case of a filled ellipse the distance returned is 0 if the point; (px,py) is inside the ellipse, and is huge if the point is outside. void Draw(Option_t* option = """"); Draw this ellipse with its current attributes. void DrawEllipse(Double_t x1, Double_t y1, Double_t r1, Double_t r2, Double_t phimin, Double_t phimax, Double_t theta, Option_t* option = """"); Draw this ellipse with new coordinates. void ExecuteEvent(Int_t event, Int_t px, Int_t py); Execute action corresponding to one event. This member function is called when a line is clicked with the locator. If Left button clicked on one of the line end points, this point; follows the cursor until button is released. if Middle button clicked, the line is moved parallel to itself; until the button is released. NOTE that support for log scale is not implemented. void ls(Option_t* option = """") const; List this ellipse with its attributes. void Paint(Option_t* option = """"); Paint this ellipse with its current attributes. void PaintEllipse(Double_t x1, Double_t y1, Double_t r1, Double_t r2, Double_t phimin, Double_t phimax, Double_t theta, Option_t* option = """"); Draw this ellipse with new coordinates. void Print(Option_t* option = """") const; Dump this ellipse with its attributes. void SavePrimitive(ostream& out, Option_t* option = """"); Save primitive as a C++ statement(s) on output stream out. Bool_t GetNoEdges() const; Return kTRUE if kNoEdges bit is set, kFALSE otherwise. void SetNoEdges(Bool_t noEdges = kTRUE); if noEdges = kTRUE the lines connecting the center to the edges; will not be drawn.; default is to draw the edges. void Streamer(TBuffe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEllipse.html:10232,release,released,10232,root/html528/TEllipse.html,https://root.cern,https://root.cern/root/html528/TEllipse.html,6,['release'],['released']
Deployability,"tor.; Definition at line 72 of file BayesianCalculator.h. ◆ SetGlobalObservables(). virtual void RooStats::BayesianCalculator::SetGlobalObservables ; (; const RooArgSet & ; set). inlinevirtual . set the global observables which will be used when creating the NLL so the constraint pdf's will be normalized correctly on the global observables when computing the NLL ; Definition at line 96 of file BayesianCalculator.h. ◆ SetIntegrationType(). void RooStats::BayesianCalculator::SetIntegrationType ; (; const char * ; type). set the integration type (possible type are) : . 1D integration ( used when only one nuisance and when the posterior is scanned): adaptive , gauss, nonadaptive; multidim:; ADAPTIVE, adaptive numerical integration The parameter numIters (settable with SetNumIters) is the max number of function calls. It can be reduced to make the integration faster but it will be difficult to reach the required tolerance; VEGAS MC integration method based on importance sampling - numIters is number of function calls Extra Vegas parameter can be set using IntegratorMultiDimOptions class; MISER MC integration method based on stratified sampling See also http://en.wikipedia.org/wiki/Monte_Carlo_integration for VEGAS and MISER description; PLAIN simple MC integration method, where the max number of calls can be specified using SetNumIters(numIters). Extra integration types are:. TOYMC: evaluate posterior by generating toy MC for the nuisance parameters. It is a MC integration, where the function is sampled according to the nuisance. It is convenient to use when all the nuisance are uncorrelated and it is efficient to generate them The toy are generated by default for each poi values (this method has been proposed and provided by J.P Chou); 1-TOYMC : same method as before but in this case the toys are generated only one time and then used for each poi value. It can be convenient when the generation time is much larger than the evaluation time, otherwise it is recommended to ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1BayesianCalculator.html:30687,integrat,integration,30687,doc/master/classRooStats_1_1BayesianCalculator.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1BayesianCalculator.html,3,['integrat'],['integration']
Deployability,tor1D ***; Capabilities: [1-D] [OpenEnded] ; Configuration: ; 1) maxSeg = 100; 2) method = 21Points(idx = 2); ; ; *** RooGaussKronrodIntegrator1D ***; Capabilities: [1-D] [OpenEnded] ; Configuration: ; ; [#3] INFO:Integration -- RooRealIntegral::ctor(landau_Int[x]) Constructing integral of function landau over observables(x) with normalization () with range identifier <none>; [#3] DEBUG:Integration -- landau: Adding observable x as shape dependent; [#3] DEBUG:Integration -- landau: Adding parameter 0 as value dependent; [#3] DEBUG:Integration -- landau: Adding parameter 0.1 as value dependent; [#3] INFO:Integration -- landau: Observable x is suitable for analytical integration (if supported by p.d.f); [#3] INFO:Integration -- landau: Observables (x) are numerically integrated; [#1] INFO:NumericIntegration -- RooRealIntegral::init(landau_Int[x]) using numeric integrator RooIntegrator1D to calculate Int(x); [#3] INFO:Integration -- RooRealIntegral::ctor(landau_Int[x]) Constructing integral of function landau over observables(x) with normalization () with range identifier <none>; [#3] DEBUG:Integration -- landau: Adding observable x as shape dependent; [#3] DEBUG:Integration -- landau: Adding parameter 0 as value dependent; [#3] DEBUG:Integration -- landau: Adding parameter 0.1 as value dependent; [#3] INFO:Integration -- landau: Observable x is suitable for analytical integration (if supported by p.d.f); [#3] INFO:Integration -- landau: Observables (x) are numerically integrated; [#1] INFO:NumericIntegration -- RooRealIntegral::init(landau_Int[x]) using numeric integrator RooAdaptiveGaussKronrodIntegrator1D to calculate Int(x); [#3] INFO:Integration -- RooRealIntegral::ctor(landau_Int[x]) Constructing integral of function landau over observables(x) with normalization () with range identifier <none>; [#3] DEBUG:Integration -- landau: Adding observable x as shape dependent; [#3] DEBUG:Integration -- landau: Adding parameter 0 as value dependent; [#3] DEBUG:Integration --,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf901__numintconfig_8py.html:6992,integrat,integrated,6992,doc/master/rf901__numintconfig_8py.html,https://root.cern,https://root.cern/doc/master/rf901__numintconfig_8py.html,2,['integrat'],"['integrated', 'integrator']"
Deployability,"tor1D, its parameters, dependencies and capabilities with RooNumIntFactory. RooSegmentedIntegrator1D(); Constructor. coverity[UNINIT_CTOR]. RooSegmentedIntegrator1D(const RooAbsFunc& function, const RooNumIntConfig& config); Constructor of integral on given function binding and with given configuration. The; integration limits are taken from the definition in the function binding. RooSegmentedIntegrator1D(const RooAbsFunc& function, Double_t xmin, Double_t xmax, const RooNumIntConfig& config); Constructor integral on given function binding, with given configuration and; explicit definition of integration range. RooAbsIntegrator* clone(const RooAbsFunc& function, const RooNumIntConfig& config) const; Virtual constructor with given function and configuration. Needed by RooNumIntFactory. Bool_t initialize(); One-time integrator initialization. ~RooSegmentedIntegrator1D(); Destructor. Bool_t setLimits(Double_t* xmin, Double_t* xmax); Change our integration limits. Return kTRUE if the new limits are; ok, or otherwise kFALSE. Always returns kFALSE and does nothing; if this object was constructed to always use our integrand's limits. Bool_t checkLimits() const; Check that our integration range is finite and otherwise return kFALSE.; Update the limits from the integrand if requested. Double_t integral(const Double_t* yvec = 0); Evaluate integral at given function binding parameter values. RooSegmentedIntegrator1D(); Constructors, assignment etc. Bool_t setUseIntegrandLimits(Bool_t flag); { _useIntegrandLimits = flag ; return kTRUE ; }. Bool_t canIntegrate1D() const; { return kTRUE ; }. Bool_t canIntegrate2D() const; { return kFALSE ; }. Bool_t canIntegrateND() const; { return kFALSE ; }. Bool_t canIntegrateOpenEnded() const; { return kFALSE ; }. » Last changed: Tue Jun 30 14:35:35 2015 » Last generated: 2015-06-30 14:35; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooSegmentedIntegrator1D.html:8651,integrat,integration,8651,root/html602/RooSegmentedIntegrator1D.html,https://root.cern,https://root.cern/root/html602/RooSegmentedIntegrator1D.html,1,['integrat'],['integration']
Deployability,"tor= ; (; const TTreeFormulaManager & ; ). privatedelete . ◆ Remove(). void TTreeFormulaManager::Remove ; (; TTreeFormula * ; adding). virtual . Remove a formula from this manager. ; Definition at line 61 of file TTreeFormulaManager.cxx. ◆ Streamer(). void TTreeFormulaManager::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TTreeFormulaManager::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 73 of file TTreeFormulaManager.h. ◆ Sync(). bool TTreeFormulaManager::Sync ; (; ). virtual . Synchronize all the formulae. ; Definition at line 219 of file TTreeFormulaManager.cxx. ◆ UpdateFormulaLeaves(). void TTreeFormulaManager::UpdateFormulaLeaves ; (; ). virtual . This function could be called TTreePlayer::UpdateFormulaLeaves, itself called by TChain::LoadTree when a new Tree is loaded. ; Because Trees in a TChain may have a different list of leaves, one must update the leaves numbers in the TTreeFormula used by the TreePlayer. ; Definition at line 291 of file TTreeFormulaManager.cxx. ◆ UpdateUsedSize(). void TTreeFormulaManager::UpdateUsedSize ; (; Int_t & ; virt_dim, . Int_t ; vsize . ). protectedvirtual . Reload the array sizes. ; Definition at line 308 of file TTreeFormulaManager.cxx. Friends And Related Symbol Documentation. ◆ TTreeFormula. friend class TTreeFormula. friend . Definition at line 47 of file TTreeFormulaManager.h. Member Data Documentation. ◆ fCumulUsedSizes. Int_t TTreeFormulaManager::fCumulUsedSizes[kMAXFORMDIM+1]. private . Accumulated size of lower dimensions as seen for this entry. ; Definition at line 38 of file TTreeFormulaManager.h. ◆ fCumulUsedVarDims. TArrayI* TTreeFormulaManager::fCumulUsedVarDims. private . fCumulUsedSizes(1) for multi variable dimensions case ; Definition at line 39 of file TTreeFormulaManager.h. ◆ fFormulas. TObjArray TTreeFormulaManager::fFormulas. private . Definition at line 32 of file",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTreeFormulaManager.html:16702,update,update,16702,doc/master/classTTreeFormulaManager.html,https://root.cern,https://root.cern/doc/master/classTTreeFormulaManager.html,1,['update'],['update']
Deployability,"torConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_t_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_t_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_t_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~RooAbsPdf(); Destructor. Double_t getVal(const RooArgSet* set = 0) const; Return current value, normalizated by integrating over; the observables in 'nset'. If 'nset' is 0, the unnormalized value.; is returned. All elements of 'nset' must be lvalues. Unnormalized values are not cached; Doing so would be complicated as _norm->getVal() could; spoil the cache and interfere with returning the cached; return value. Since unnormalized calls are typically; done in integration calls, there is no performance hit. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; Analytical integral with normalization (see RooAbsReal::analyticalIntegralWN() for further information). This function applies the normalization specified by 'normSet' to the integral returned; by RooAbsReal::analyticalIntegral(). The passthrough scenario (code=0) is also changed; to return a normalized answer. Bool_t traceEvalPdf(Double_t value) const; Check that passed value is positive and not 'not-a-number'. If; not, print an error, until the error counter reaches its s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsPdf.html:42369,integrat,integrating,42369,root/html526/RooAbsPdf.html,https://root.cern,https://root.cern/root/html526/RooAbsPdf.html,3,['integrat'],['integrating']
Deployability,"torConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_t_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_t_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_t_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~RooAbsPdf(); Destructor. Double_t getValV(const RooArgSet* set = 0) const; Return current value, normalizated by integrating over; the observables in 'nset'. If 'nset' is 0, the unnormalized value.; is returned. All elements of 'nset' must be lvalues. Unnormalized values are not cached; Doing so would be complicated as _norm->getVal() could; spoil the cache and interfere with returning the cached; return value. Since unnormalized calls are typically; done in integration calls, there is no performance hit. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; Analytical integral with normalization (see RooAbsReal::analyticalIntegralWN() for further information). This function applies the normalization specified by 'normSet' to the integral returned; by RooAbsReal::analyticalIntegral(). The passthrough scenario (code=0) is also changed; to return a normalized answer. Bool_t traceEvalPdf(Double_t value) const; Check that passed value is positive and not 'not-a-number'. If; not, print an error, until the error counter reaches its s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAbsPdf.html:44573,integrat,integrating,44573,root/html532/RooAbsPdf.html,https://root.cern,https://root.cern/root/html532/RooAbsPdf.html,1,['integrat'],['integrating']
Deployability,"torMultiDim*fIntegratorpointer to multi-dimensional integrator base class. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; IntegratorMultiDim(ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); Generic constructor of multi dimensional Integrator. By default uses the Adaptive integration method. @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. In case no parameter values are passed the default ones used in IntegratorMultiDimOptions are used. IntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); Generic Constructor of multi dimensional Integrator passing a function. By default uses the adaptive integration method. @param f integration function (multi-dim interface); @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param ncall number of function calls (apply only to MC integratioon methods). SetFunction(const ROOT::Math::IMultiGenFunction& f). virtual ~IntegratorMultiDim(); remove template constructor since is ambigous; Template Constructor of multi dimensional Integrator passing a generic function. By default uses the adaptive integration method. @param f integration function (generic function implementin operator()(const double *); @param dim function dimension; @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param ncall number of function calls (apply only to MC integratioon methods). this is ambigous; template<class Function>; IntegratorMultiDim(Function & f, unsigned int dim, IntegrationMultiD",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__IntegratorMultiDim.html:3292,integrat,integration,3292,root/html528/ROOT__Math__IntegratorMultiDim.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__IntegratorMultiDim.html,6,['integrat'],['integration']
Deployability,"torMultiDimOptions::Print function. Example:; ROOT::Math::IntegratorMultiDimOptions opt;; opt.Print();; Integrator Type : ADAPTIVE; Absolute tolerance : 1e-09; Relative tolerance : 1e-09; Workspace size : 100000; (max) function calls : 100000; Depending on the algorithm, some of the control parameters might have no effect.; 13.8.3.3 ROOT::Math::AdaptiveIntegratorMultiDim; This class implements an adaptive quadrature integration method for multi dimensional functions. It is described in this paper Genz, A.A. Malik, An adaptive algorithm for numerical integration over an N-dimensional rectangular region, J. Comput. Appl. Math. 6 (1980) 295-302. It is part of the MathCore library. The user can control the relative and absolute tolerance and the maximum allowed number of function evaluation.; 13.8.3.4 ROOT::Math::GSLMCIntegrator; It is a class for performing numerical integration of a multidimensional function. It uses the numerical integration algorithms of GSL, which reimplements the algorithms used in the QUADPACK, a numerical integration package written in Fortran. Plain MC, MISER and VEGAS integration algorithms are supported for integration over finite (hypercubic) ranges. For a detail description of the GSL methods visit the GSL users guide. Specific configuration options (documented in the GSL user guide) for the ROOT::Math::GSLMCIntegration can be set directly in the class, or when using it via the ROOT::Math::IntegratorMultiDim interface, can be defined using the ROOT::Math::IntegratorMultiDimOptions.; 13.9 Function Derivation; There are in ROOT only two classes to perform numerical derivation. One of them is in the MathCore library while the other is in the MathMore wrapping an integration function from the GSL library. * RichardsonDerivator: Implements the Richardson method for numerical integration. It can calculate up to the third derivative of a function. * GSLDerivator of MathMore based on GSL.; 13.10 Numerical Minimization; The algorithms provided by ROO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:712693,integrat,integration,712693,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,['integrat'],['integration']
Deployability,torND ***; Capabilities: [2-D] [N-D] ; Configuration: ; 1) maxEval2D = 100000; 2) maxEval3D = 1e+06; 3) maxEvalND = 1e+07; 4) maxWarn = 5; ; *** RooAdaptiveGaussKronrodIntegrator1D ***; Capabilities: [1-D] [OpenEnded] ; Configuration: ; 1) maxSeg = 100; 2) method = 21Points(idx = 2); ; ; *** RooGaussKronrodIntegrator1D ***; Capabilities: [1-D] [OpenEnded] ; Configuration: ; ; [#3] INFO:Integration -- RooRealIntegral::ctor(landau_Int[x]) Constructing integral of function landau over observables(x) with normalization () with range identifier <none>; [#3] DEBUG:Integration -- landau: Adding observable x as shape dependent; [#3] DEBUG:Integration -- landau: Adding parameter 0 as value dependent; [#3] DEBUG:Integration -- landau: Adding parameter 0.1 as value dependent; [#3] INFO:Integration -- landau: Observable x is suitable for analytical integration (if supported by p.d.f); [#3] INFO:Integration -- landau: Observables (x) are numerically integrated; [#1] INFO:NumericIntegration -- RooRealIntegral::init(landau_Int[x]) using numeric integrator RooIntegrator1D to calculate Int(x); [1] int_dx landau(x) = 0.0989653362054419; [#3] INFO:Integration -- RooRealIntegral::ctor(landau_Int[x]) Constructing integral of function landau over observables(x) with normalization () with range identifier <none>; [#3] DEBUG:Integration -- landau: Adding observable x as shape dependent; [#3] DEBUG:Integration -- landau: Adding parameter 0 as value dependent; [#3] DEBUG:Integration -- landau: Adding parameter 0.1 as value dependent; [#3] INFO:Integration -- landau: Observable x is suitable for analytical integration (if supported by p.d.f); [#3] INFO:Integration -- landau: Observables (x) are numerically integrated; [#1] INFO:NumericIntegration -- RooRealIntegral::init(landau_Int[x]) using numeric integrator RooAdaptiveGaussKronrodIntegrator1D to calculate Int(x); [2] int_dx landau(x) = 0.098957102921895; [#3] INFO:Integration -- RooRealIntegral::ctor(landau_Int[x]) Constructing integral of ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf901__numintconfig_8C.html:10160,integrat,integrated,10160,doc/master/rf901__numintconfig_8C.html,https://root.cern,https://root.cern/doc/master/rf901__numintconfig_8C.html,2,['integrat'],"['integrated', 'integrator']"
Deployability,"torOneDim. ; Definition at line 101 of file VirtualIntegrator.h. Public Member Functions;  ~VirtualIntegratorOneDim () override;  destructor: no operation ;  ; virtual double Integral ()=0;  evaluate un-defined integral (between -inf, + inf) ;  ; virtual double Integral (const std::vector< double > &pts)=0;  evaluate integral with singular points ;  ; virtual double Integral (double a, double b)=0;  evaluate integral ;  ; virtual double IntegralCauchy (double a, double b, double c)=0;  evaluate Cauchy integral ;  ; virtual double IntegralLow (double b)=0;  evaluate integral over the (-inf, b) ;  ; virtual double IntegralUp (double a)=0;  evaluate integral over the (a, +inf) ;  ; virtual ROOT::Math::IntegratorOneDimOptions Options () const =0;  get the option used for the integration must be implemented by derived class ;  ; virtual void SetFunction (const IGenFunction &)=0;  set integration function ;  ; virtual void SetOptions (const ROOT::Math::IntegratorOneDimOptions &opt);  set the options (should be re-implemented by derived classes -if more options than tolerance exist ;  ; virtual ROOT::Math::IntegrationOneDim::Type Type () const;  return type of integrator ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegrator; virtual ~VirtualIntegrator ();  destructor: no operation ;  ; virtual double Error () const =0;  return the estimate of the absolute Error of the last Integral calculation ;  ; virtual int NEval () const;  return number of function evaluations in calculating the integral (if integrator do not implement this function returns -1) ;  ; virtual double Result () const =0;  return the Result of the last Integral calculation ;  ; virtual void SetAbsTolerance (double)=0;  set the desired absolute Error ;  ; virtual void SetRelTolerance (double)=0;  set the desired relative Error ;  ; virtual int Status () const =0;  return the Error Status of the last Integral calculation ;  . #include <Math/VirtualIntegrator.h>. Inheritance diagram for RO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1VirtualIntegratorOneDim.html:1467,integrat,integration,1467,doc/master/classROOT_1_1Math_1_1VirtualIntegratorOneDim.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1VirtualIntegratorOneDim.html,4,['integrat'],"['integration', 'integrator']"
Deployability,"torPdfBinding RooAbsPdf binding to a ROOT::Math::IBaseFunctionMultiDim; RooGExpModel Gauss (x) Expontial resolution model; RooGamma Gaussian PDF; RooGaussKronrodIntegrator1D 1-dimensional Gauss-Kronrod numerical integration engine; RooGaussModel Gaussian Resolution Model; RooGaussian Gaussian PDF; RooGenContext Universal context for generating toy MC data from any p.d.f; RooGenFitStudy Generate-and-Fit study module; RooGenFunction Export RooAbsReal as functor; RooGenProdProj General form of projected integral of product of PDFs, utility class for RooProdPdf; RooGenericPdf Generic PDF defined by string expression and list of variables; RooGlobalFunc ; RooGrid Utility class for RooMCIntegrator holding a multi-dimensional grid; RooHashTable Hash table; RooHist 1-dimensional histogram with error bars; RooHistConstraint Your description goes here...; RooHistError Utility class for calculating histogram errors; RooHistFunc Histogram based function; RooHistPdf Histogram based PDF; RooImproperIntegrator1D 1-dimensional improper integration engine; RooInt Container class for Int_t; RooIntegralMorph Linear shape interpolation operator p.d.f; RooIntegrator1D 1-dimensional numerical integration engine; RooIntegrator2D 2-dimensional numerical integration engine; RooIntegratorBinding Function binding representing output of numeric integrator; RooInvTransform Function binding returning inverse of other function binding; RooJeffreysPrior Sum of RooAbsReal objects; RooKeysPdf One-dimensional non-parametric kernel estimation p.d.f.; RooLandau Landau Distribution PDF; RooLegendre Legendre polynomial; RooLinTransBinning Linear transformation of binning specification; RooLinearVar Lvalue linear transformation function; RooLinkedList Doubly linked list for storage of RooAbsArg objects; RooLinkedListElem Element of RooLinkedList container class; RooLinkedListIter Iterator for RooLinkedList container class; RooList TList with extra support for Option_t associations; RooListProxy Proxy class",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ClassIndex.html:34811,integrat,integration,34811,root/html602/ClassIndex.html,https://root.cern,https://root.cern/root/html602/ClassIndex.html,2,['integrat'],['integration']
Deployability,"torTempl(FreeFunc f) :; 312 fImpl(new ParamFunctorHandler<ParamFunctorTempl<T>,FreeFunc>(f) ); 313 {; 314 }; 315 ; 316 // specialization used in TF1; 317 ParamFunctorTempl(const std::function<T(const T *f, const Double_t *param)> &func) :; 318 fImpl(new ParamFunctorHandler<ParamFunctorTempl<T>, const std::function<T(const T *f, const Double_t *param)>>(func)); 319 {; 320 }; 321 ; 322 /**; 323 Destructor (no operations); 324 */; 325 virtual ~ParamFunctorTempl () {; 326 if (fImpl) delete fImpl;; 327 }; 328 ; 329 /**; 330 Copy constructor; 331 */; 332 ParamFunctorTempl(const ParamFunctorTempl & rhs) :; 333 fImpl(nullptr); 334 {; 335// if (rhs.fImpl.get() != 0); 336// fImpl = std::unique_ptr<Impl>( (rhs.fImpl)->Clone() );; 337 if (rhs.fImpl) fImpl = rhs.fImpl->Clone();; 338 }; 339 ; 340 /**; 341 Assignment operator; 342 */; 343 ParamFunctorTempl & operator = (const ParamFunctorTempl & rhs) {; 344// ParamFunctor copy(rhs);; 345 // swap unique_ptr by hand; 346// Impl * p = fImpl.release();; 347// fImpl.reset(copy.fImpl.release());; 348// copy.fImpl.reset(p);; 349 ; 350 if(this != &rhs) {; 351 if (fImpl) delete fImpl;; 352 fImpl = nullptr;; 353 if (rhs.fImpl); 354 fImpl = rhs.fImpl->Clone();; 355 }; 356 return *this;; 357 }; 358 ; 359 void * GetImpl() { return (void *) fImpl; }; 360 ; 361 ; 362 T operator() ( T * x, double * p) {; 363 return (*fImpl)(x,p);; 364 }; 365 ; 366 T operator() (const T * x, const double * p) {; 367 return (*fImpl)(x,p);; 368 }; 369 ; 370 ; 371 bool Empty() const { return !fImpl; }; 372 ; 373 ; 374 void SetFunction(Impl * f) {; 375 fImpl = f;; 376 }; 377 ; 378private :; 379 ; 380 ; 381 //std::unique_ptr<Impl> fImpl;; 382 Impl * fImpl;; 383 ; 384 ; 385};; 386 ; 387 ; 388using ParamFunctor = ParamFunctorTempl<double>;; 389 ; 390 } // end namespace Math; 391 ; 392} // end namespace ROOT; 393 ; 394 ; 395#endif /* ROOT_Math_ParamFunctor */; f#define f(i)Definition RSha256.hxx:104; RtypesCore.h; pwinID h TVirtualViewer3D TVirtualGLPainter pDefinition TG",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/ParamFunctor_8h_source.html:9764,release,release,9764,doc/master/ParamFunctor_8h_source.html,https://root.cern,https://root.cern/doc/master/ParamFunctor_8h_source.html,1,['release'],['release']
Deployability,"torage provider that writes ntuple pages to into a DAOS container. More...;  ; class  RPageSinkFile;  Storage provider that write ntuple pages into a file. More...;  ; class  RPageSource;  Abstract interface to read data from an ntuple. More...;  ; class  RPageSourceDaos;  Storage provider that reads ntuple pages from a DAOS container. More...;  ; class  RPageSourceFile;  Storage provider that reads ntuple pages from a file. More...;  ; class  RPageSourceFriends;  Virtual storage that combines several other sources horizontally. More...;  ; class  RPageStorage;  Common functionality of an ntuple storage for both reading and writing. More...;  ; class  RProjectedFields;  The projected fields of a RNTupleModel More...;  ; class  RRDFCardinalityField;  An artificial field that transforms an RNTuple column that contains the offset of collections into collection sizes. More...;  ; struct  RSealedPageMergeData;  ; struct  RTestFutureColumn;  ; struct  RTFileControlBlock;  If a TFile container is written by a C stream (simple file), on dataset commit, the file header and the TFile record need to be updated. More...;  ; struct  RVirtualBinsToLocalBins;  Recursively converts zero-based virtual bins where the underflow bin has index 0 and the overflow bin has index N+1 where N is the axis' number of regular bins, to the standard kUnderflowBin/kOverflowBin for under/overflow bin indexing convention. More...;  ; struct  RVirtualBinsToLocalBins<-1, NDIMS, BINS, AXES >;  ; class  RVirtualCanvasPainter;  Abstract interface for painting a canvas. More...;  ; class  RWritePageMemoryManager;  Helper to maintain a memory budget for the write pages of a set of columns. More...;  ; class  TBulkBranchRead;  Helper class for reading many branch entries at once to optimize throughput. More...;  ; class  TTreeReaderValueFastBase;  . Typedefs; using ntuple_index_t = std::uint32_t;  ; using RIOSharedVector_t = std::vector< RIOSharedBase * >;  . Enumerations; enum class  EColumnCppType { ;   kC",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1Experimental_1_1Internal.html:9604,update,updated,9604,doc/master/namespaceROOT_1_1Experimental_1_1Internal.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Experimental_1_1Internal.html,1,['update'],['updated']
Deployability,"tors and destructors implementation.; and one header per class that is not nested inside another class.; The header file name is the fully qualified name of the class after all the special characters; ""<>,:"" are replaced by underscored. For example for pair<edm::Vertex,int> the file name is; pair_edm__Vertex_int_.h. In the generated classes, map, multimap when the first template parameter is a class; are replaced by a vector of pair. set and multiset when the tempalte parameter; is a class are replaced by a vector. This is required since we do not have the; code needed to order and/or compare the object of the classes. If option = ""new"" (default) a new directory dirname is created.; If dirname already exist, an error message is printed; and the function returns.; If option = ""recreate"", then;; if dirname does not exist, it is created (like in ""new""); if dirname already exist, all existing files in dirname; are deleted before creating the new files.; If option = ""update"", then new classes are added to the existing directory.; Existing classes with the same name are replaced by the; new definition. If the directory dirname doest not exist,; same effect as ""new"".; If option = ""genreflex"", then use genreflex rather than rootcint to generate; the dictionary.; If option = ""par"", create a PAR file with the minimal set of code needed to read the content; of the ROOT file. The name of the PAR file is basename(dirname), with extension; '.par' enforced; the PAR file will be created at dirname(dirname) .; If, in addition to one of the 3 above options, the option ""+"" is specified,; the function will generate:; - a script called MAKEP to build the shared lib; - a dirnameLinkDef.h file; - rootcint will be run to generate a dirnameProjectDict.cxx file; - dirnameProjectDict.cxx will be compiled with the current options in compiledata.h; - a shared lib dirname.so will be created.; If the option ""++"" is specified, the generated shared lib is dynamically; linked with the current executa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TFile.html:42890,update,update,42890,root/html532/TFile.html,https://root.cern,https://root.cern/root/html532/TFile.html,2,['update'],['update']
Deployability,"tors and destructors implementation.; and one header per class that is not nested inside another class.; The header file name is the fully qualified name of the class after all the special characters; ""<>,:"" are replaced by underscored. For example for pair<edm::Vertex,int> the file name is; pair_edm__Vertex_int_.h. In the generated classes, map, multimap when the first template parameter is a class; are replaced by a vector of pair. set and multiset when the tempalte parameter; is a class are replaced by a vector. This is required since we do not have the; code needed to order and/or compare the object of the classes. If option = ""new"" (default) a new directory dirname is created.; If dirname already exist, an error message is printed; and the function returns.; If option = ""recreate"", then;; if dirname does not exist, it is created (like in ""new""); if dirname already exist, all existing files in dirname; are deleted before creating the new files.; If option = ""update"", then new classes are added to the existing directory.; Existing classes with the same name are replaced by the; new definition. If the directory dirname doest not exist,; same effect as ""new"".; If option = ""genreflex"", then use genreflex rather than rootcint to generate; the dictionary.; If, in addition to one of the 3 above options, the option ""+"" is specified,; the function will generate:; - a script called MAKEP to build the shared lib; - a dirnameLinkDef.h file; - rootcint will be run to generate a dirnameProjectDict.cxx file; - dirnameProjectDict.cxx will be compiled with the current options in compiledata.h; - a shared lib dirname.so will be created.; If the option ""++"" is specified, the generated shared lib is dynamically; linked with the current executable module.; If the option ""+"" and ""nocompile"" are specified, the utility files are generated; as in the option ""+"" but they are not executed.; Example:; file.MakeProject(""demo"",""*"",""recreate++"");; - creates a new directory demo unless it alrea",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TFile.html:40789,update,update,40789,root/html528/TFile.html,https://root.cern,https://root.cern/root/html528/TFile.html,2,['update'],['update']
Deployability,"tors so we can work with radius 1 hyperspheres. Double_t ApplyKernelFunction(Double_t normalized_distance); from the normalized euclidean distance calculate the distance; for a certain kernel. Double_t KernelNormalization(Double_t pdf); Calculating the normalization factor only once (might need a reset at some point.; Can the method be restarted with different params?). Double_t GetNormalizedDistance(const TMVA::Event& base_event, const TMVA::BinarySearchTreeNode& sample_event, Double_t* dim_normalization); We use Euclidian metric here. Might not be best or most efficient. Double_t NormSinc(Double_t x); NormSinc. Double_t LanczosFilter(Int_t level, Double_t x); Lanczos Filter. Float_t GetError(Float_t countS, Float_t countB, Float_t sumW2S, Float_t sumW2B) const; statistical error estimate for RS estimator. void AddWeightsXMLTo(void* parent) const; write weights to xml file. void ReadWeightsFromXML(void* wghtnode). void ReadWeightsFromStream(istream& istr); read weight info from file. void WriteWeightsToStream(TFile& rf) const; write training sample (TTree) to file. void ReadWeightsFromStream(TFile& istr); read training sample from file. TMVA::MethodPDERS* ThisPDERS( void ); static pointer to this object. void UpdateThis( void ); update static this pointer. void MakeClassSpecific(ostream& , const TString& ) const; write specific classifier response. void GetHelpMessage() const; get help message text. typical length of text line:; ""|--------------------------------------------------------------|"". BinarySearchTree* GetBinaryTree( void ); accessors. { return fBinaryTree; }. const Ranking* CreateRanking(); ranking of input variables. { return 0; }. » Author: Andreas Hoecker, Yair Mahalalel, Joerg Stelzer, Helge Voss, Kai Voss » Copyright (c) 2005: *; » Last changed: root/tmva $Id$ » Last generated: 2015-03-14 16:43; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMVA__MethodPDERS.html:24852,update,update,24852,root/html534/TMVA__MethodPDERS.html,https://root.cern,https://root.cern/root/html534/TMVA__MethodPDERS.html,1,['update'],['update']
Deployability,"tors, Fit Panel, Style manager, a tool for automatic C++ code generation of any widget and the capability for widgets to save themselves. In addition Ilka took care of the ROOT Users Guide and contributed the chapter ‘Writing a Graphical User Interface’.; Gerardo Ganis; Gerri was a team member for more than ten years; among many other contributions he was in charge of PROOF for many years.; Jan Iwaszkiewicz; Jan was working in the context of a Ph.D. on scheduling and load-balancing of distributed processing in the Parallel ROOT Facility (PROOF).; Leandro Franco; Leo worked a Marie-Curie fellow in the ROOT team from 2005-2008. He worked on a number of widely different topics, from parallel sockets, I/O read-ahead, CINT dictionary, etc.; Maarten Ballintijn; Maarten's initial dab into ROOT was porting it to Linux in 1995. Later he worked on the PROOF system, bringing into production for the RHIC experiments in Brookhaven.; Marek Biskup; Marek worked as technical student on various aspects of PROOF, notably integrating the TChain::Draw() command into PROOF.; Masaharu Goto; Masa is the father of CINT. Without the indefatigable support by Masa we would never have succeeded with the tight integration of CINT in ROOT. Masa is now managing a large division in Agilent and cannot spend as much time on CINT as he would like.; Matevž Tadel; Matevž Tadel is the main developer of 3D graphics and event-visualization packages. He holds a Ph.D. in experimental high-energy physics, obtained in 2001 for his work on electron reconstruction in the ATLAS experiment. Before joining the ROOT team in 2005, he worked on Gled - an advanced ROOT-based system for distributed computing and dynamic visualisation.; Nenad Buncic; Nenad was one of the first people joining the initial ROOT team in 1996. He developed the first version of the HTML documentation system (THtml) and worked on the first version of the 3D graphics system. Nenad left in 1997.; Paul Russo; Paul joined the ROOT team at Fermilab ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/previous-developers.html:4559,integrat,integrating,4559,d/previous-developers.html,https://root.cern,https://root.cern/d/previous-developers.html,1,['integrat'],['integrating']
Deployability,"tory containing query results and status; TProofLockPath*fQueryLockQuery dir locker; TStringfSandboxPROOF sandbox root dir; TStringfSelectionInternal variable to pass drawing options; TServerSocket*fServSockServer socket to accept call backs; TStringfSockPathUNIX socket path for communication with workers; TStringfVarExpInternal variable to pass drawing options; static Int_tfgWrksMaxMax number of workers. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofLite(const char* masterurl, const char* conffile = kPROOF_ConfFile, const char* confdir = kPROOF_ConfDir, Int_t loglevel = 0, const char* alias = 0, TProofMgr* mgr = 0); Create a PROOF environment. Starting PROOF involves either connecting; to a master server, which in turn will start a set of slave servers, or; directly starting as master server (if master = """"). Masterurl is of; the form: [proof[s]://]host[:port]. Conffile is the name of the config; file describing the remote PROOF cluster (this argument alows you to; describe different cluster configurations).; The default is proof.conf. Confdir is the directory where the config; file and other PROOF related files are (like motd and noproof files).; Loglevel is the log level (default = 1). User specified custom config; files will be first looked for in $HOME/.conffile. Int_t Init(const char* masterurl, const char* conffile, const char* confdir, Int_t loglevel, const char* alias = 0); Start the PROOF environment. Starting PROOF involves either connecting; to a master server, which in turn will start a set of slave servers, or; directly starting as master server (if master = """"). For a description; of the arguments see the TProof ctor. Returns the number of started; master or slave servers, returns 0 in case of error, in which case; fValid remains false. ~TProofLite(); Destructor. Int_t GetNumberOfWorkers(const char* url = 0); Static method to determine the number of workers giving priority to users request.; Otherwise",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TProofLite.html:25810,configurat,configurations,25810,root/html530/TProofLite.html,https://root.cern,https://root.cern/root/html530/TProofLite.html,2,['configurat'],['configurations']
Deployability,"tory; RooRealIntegral Real-valued function representing an integral over a RooAbsReal object; RooRealMPFE Multi-process front-end for parallel calculation of a real valued function; RooRealProxy Proxy for a RooAbsReal object; RooRealSumPdf PDF constructed from a sum of (non-pdf) functions; RooRealVar Real-valued variable; RooRealVarSharedProperties Shared properties of a RooRealVar clone set; RooRecursiveFraction Recursive fraction formula f1*(1-f2)*(1-f3) etc...; RooRefArray Helper class for proxy lists; RooRefCountList RooLinkedList with reference counting; RooResolutionModel Abstract Resolution Model; RooScaledFunc Function binding applying scaling to another function binding; RooSecondMoment Representation of moment in a RooAbsReal in a given RooRealVar; RooSegmentedIntegrator1D 1-dimensional piece-wise numerical integration engine; RooSegmentedIntegrator2D 2-dimensional piece-wise numerical integration engine; RooSentinel ; RooSetPair Utility class holding a pair of RooArgSet pointers; RooSetProxy Proxy class for a RooArgSet; RooSharedProperties Abstract interface for shared property implementations; RooSharedPropertiesList Manager for shared properties among clones of certain RooAbsArg-derived types; RooSimGenContext Context for efficiently generating a dataset from a RooSimultaneous PDF; RooSimPdfBuilder RooSimultaneous PDF Builder (obsolete); RooSimSplitGenContext Context for efficiently generating a dataset from a RooSimultaneous PDF; RooSimWSTool Workspace oriented tool for customized cloning of p.d.f. into a simultaneous p.d.f; RooSimWSTool::BuildConfig Build configuration object for RooSimWSTool; RooSimWSTool::MultiBuildConfig Build configuration object for RooSimWSTool with multiple prototype p.d.f.; RooSimWSTool::ObjBuildConfig Validated RooSimWSTool build configuration; RooSimWSTool::ObjSplitRule Validated RooSimWSTool split rule; RooSimWSTool::SplitRule Split rule specification for prototype p.d.f; RooSimultaneous Simultaneous operator p.d.f, functio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ClassIndex.html:40446,integrat,integration,40446,root/html602/ClassIndex.html,https://root.cern,https://root.cern/root/html602/ClassIndex.html,4,['integrat'],['integration']
Deployability,"total.Sumw2() # this makes sure that the sum of squares of weights will be stored; 26 ; 27# Set canvas/frame attributes.; 28total.SetMarkerStyle( 21 ); 29total.SetMarkerSize( 0.7 ); 30main.SetFillColor( 16 ); 31s1.SetFillColor( 42 ); 32s2.SetFillColor( 46 ); 33 ; 34# Initialize random number generator.; 35gRandom.SetSeed(); 36gauss, landau = gRandom.Gaus, gRandom.Landau; 37 ; 38# for speed, bind and cache the Fill member functions; 39histos = [ 'total', 'main', 's1', 's2' ]; 40for name in histos:; 41 exec('%sFill = %s.Fill' % (name,name)); 42 ; 43# Fill histograms randomly; 44kUPDATE = 500; 45for i in range( 10000 ):; 46 # Generate random values.; 47 xmain = gauss( -1, 1.5 ); 48 xs1 = gauss( -0.5, 0.5 ); 49 xs2 = landau( 1, 0.15 ); 50 mainFill( xmain ); 51 ; 52 # Fill histograms.; 53 s1Fill( xs1, 0.3 ); 54 s2Fill( xs2, 0.2 ); 55 totalFill( xmain ); 56 totalFill( xs1, 0.3 ); 57 totalFill( xs2, 0.2 ); 58 ; 59 # Update display every kUPDATE events.; 60 if i and (i%kUPDATE) == 0 :; 61 if i == kUPDATE :; 62 total.Draw( 'e1p' ); 63 main.Draw( 'same' ); 64 s1.Draw( 'same' ); 65 s2.Draw( 'same' ); 66 c1.Update(); 67 slider = TSlider( 'slider', 'test', 4.2, 0, 4.6, total.GetMaximum(), 38 ); 68 slider.SetFillColor( 46 ); 69 ; 70 if slider:; 71 slider.SetRange( 0, float(i) / 10000. ); 72 ; 73 c1.Modified(); 74 c1.Update(); 75 ; 76# Destroy member functions cache.; 77for name in histos:; 78 exec('del %sFill' % name); 79del histos; 80 ; 81# Done, finalized and trigger an update.; 82slider.SetRange( 0, 1 ); 83total.Draw( 'sameaxis' ) # to redraw axis hidden by the fill area; 84c1.Modified(); 85c1.Update(); 86 ; 87gBenchmark.Show( 'hsum' ); TCanvasThe Canvas class.Definition TCanvas.h:23; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TSliderA specialized TPad including a TSliderBox object.Definition TSlider.h:17. tutorialspyroothsum.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:10 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/hsum_8py_source.html:2401,update,update,2401,doc/master/hsum_8py_source.html,https://root.cern,https://root.cern/doc/master/hsum_8py_source.html,1,['update'],['update']
Deployability,"tputDir: htmldoc; II.3 Linking other documentation; When trying to document a class, THtml searches for a source file in; the directories set via SetInputDir(). If it cannot find it, it assumes; that this class must have been documented before. Based on the library; this class is defined in, it checks the configuration variable; Root.Html.LibName, and creates a link using its value.; Alternatively, you can set these URLs via THtml::SetLibURL().; Example:; If a class MyClass is defined in class mylibs/libMyLib.so, and .rootrc; contains; Root.Html.MyLib: ../mylib/; THtml will create a link to ""../mylib/MyClass.html"".; The library name association can be set up using the rootmap facility.; For the library in the example above, which contains a dictionary; generated from the linkdef MyLinkdef.h, the command to generate the; rootmap file is; $ rlibmap -f -r rootmap -l mylib/libMyLib.so -d libCore.so -c MyLinkdef.h; Here, -r specifies that the entries for libMyLib should be updated,; -l specifies the library we're dealing with, -d its; dependencies, and -c its linkdef. The rootmap file must be within; one of the LD_LIBRARY_PATH (or PATH for Windows) directories; when ROOT is started, otherwise ROOT will not use it.; II.4 Recognizing class documentation; The class documentation has to appear in the header file containing the; class, right in front of its declaration. It is introduced by a string; defined by Root.Html.Description or SetClassDocTag(). See the section on; documentation syntax for further details.; Example:; Root.Html.Description: //____________________; The class documentation will show which include statement is to be used; and which library needs to be linked to access it.; The include file name is determined via. TClass::GetDeclFileName();; leading parts are removed if they match any of the ':' separated entries in; THtml::GetIncludePath().; II.5 Author, copyright, etc.; During the conversion,; THtml will look for; some strings (""tags"") in the source file,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/THtml.html:3622,update,updated,3622,root/html528/THtml.html,https://root.cern,https://root.cern/root/html528/THtml.html,10,['update'],['updated']
Deployability,"tr() );; 201 ; 202 Init();; 203}; 204 ; 205////////////////////////////////////////////////////////////////////////////////; 206/// constructor; 207 ; 208TMVA::Reader::Reader( const std::string& varNames, const TString& theOption, Bool_t verbose ); 209 : Configurable( theOption ),; 210 fDataSetManager( NULL ), // DSMTEST; 211 fDataSetInfo(),; 212 fVerbose( verbose ),; 213 fSilent ( kFALSE ),; 214 fColor ( kFALSE ),; 215 fCalculateError(kFALSE),; 216 fMvaEventError( 0 ),; 217 fMvaEventErrorUpper( 0 ),; 218 fLogger ( 0 ); 219{; 220 fDataSetManager = new DataSetManager( fDataInputHandler );; 221 fDataSetManager->AddDataSetInfo(fDataSetInfo);; 222 fLogger = new MsgLogger(this);; 223 SetConfigName( GetName() );; 224 DeclareOptions();; 225 ParseOptions();; 226 ; 227 // arguments: names of input variables given in form: ""name1:name2:name3""; 228 // verbose flag; 229 DecodeVarNames(varNames);; 230 Init();; 231}; 232 ; 233////////////////////////////////////////////////////////////////////////////////; 234/// constructor; 235 ; 236TMVA::Reader::Reader( const TString& varNames, const TString& theOption, Bool_t verbose ); 237 : Configurable( theOption ),; 238 fDataSetManager( NULL ), // DSMTEST; 239 fDataSetInfo(),; 240 fVerbose( verbose ),; 241 fSilent ( kFALSE ),; 242 fColor ( kFALSE ),; 243 fCalculateError(kFALSE),; 244 fMvaEventError( 0 ),; 245 fMvaEventErrorUpper( 0 ),; 246 fLogger ( 0 ); 247{; 248 fDataSetManager = new DataSetManager( fDataInputHandler );; 249 fDataSetManager->AddDataSetInfo(fDataSetInfo);; 250 fLogger = new MsgLogger(this);; 251 SetConfigName( GetName() );; 252 DeclareOptions();; 253 ParseOptions();; 254 ; 255 // arguments: names of input variables given in form: ""name1:name2:name3""; 256 // verbose flag; 257 DecodeVarNames(varNames);; 258 Init();; 259}; 260 ; 261////////////////////////////////////////////////////////////////////////////////; 262/// declaration of configuration options; 263 ; 264void TMVA::Reader::DeclareOptions(); 265{; 266 if (gTools().",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Reader_8cxx_source.html:8832,configurat,configuration,8832,doc/master/Reader_8cxx_source.html,https://root.cern,https://root.cern/doc/master/Reader_8cxx_source.html,1,['configurat'],['configuration']
Deployability,"tr());; std::cout << ""The type of b1Vec is "" << b1VecCl->GetName() << std::endl;; ; // ### `Histo1D` action; // The `Histo1D` action allows to fill an histogram. It returns a TH1D filled; // with values of the column that passed the filters. For the most common; // types, the type of the values stored in the column is automatically; // guessed.; auto hist = d.Filter(cutb1).Histo1D();; std::cout << ""Filled h "" << hist->GetEntries() << "" times, mean: "" << hist->GetMean() << std::endl;; ; // ### `Foreach` action; // The most generic action of all: an operation is applied to all entries.; // In this case we fill a histogram. In some sense this is a violation of a; // purely functional paradigm - C++ allows to do that.; TH1F h(""h"", ""h"", 12, -1, 11);; d.Filter([](int b2) { return b2 % 2 == 0; }, {""b2""}).Foreach([&h](double b1) { h.Fill(b1); });; ; std::cout << ""Filled h with "" << h.GetEntries() << "" entries"" << std::endl;; ; // ## Express your chain of operations with clarity!; // We are discussing an example here but it is not hard to imagine much more; // complex pipelines of actions acting on data. Those might require code; // which is well organised, for example allowing to conditionally add filters; // or again to clearly separate filters and actions without the need of; // writing the entire pipeline on one line. This can be easily achieved.; // We'll show this by re-working the `Count` example:; auto cutb1_result = d.Filter(cutb1);; auto cutb1b2_result = d.Filter(cutb1b2, {""b2"", ""b1""});; auto cutb1_cutb1b2_result = cutb1_result.Filter(cutb1b2, {""b2"", ""b1""});; // Now we want to count:; auto evts_cutb1_result = cutb1_result.Count();; auto evts_cutb1b2_result = cutb1b2_result.Count();; auto evts_cutb1_cutb1b2_result = cutb1_cutb1b2_result.Count();; ; std::cout << ""Events passing cutb1: "" << *evts_cutb1_result << std::endl; << ""Events passing cutb1b2: "" << *evts_cutb1b2_result << std::endl; << ""Events passing both: "" << *evts_cutb1_cutb1b2_result << std::endl;; ; // ## ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/df001__introduction_8C.html:4898,pipeline,pipelines,4898,doc/master/df001__introduction_8C.html,https://root.cern,https://root.cern/doc/master/df001__introduction_8C.html,1,['pipeline'],['pipelines']
Deployability,"tr, const std::string & method ) {; 123 // initialization with a distribution and and generator; 124 // the distribution object is copied in and managed by this class; 125 // use std::unique_ptr to manage previously existing distribution objects; 126 TUnuranEmpDist * distNew = distr.Clone();; 127 fDist.reset(distNew);; 128 ; 129 fMethod = method;; 130 if (distr.IsBinned()) fMethod = ""hist"";; 131 else if (distr.NDim() > 1) fMethod = ""vempk"";; 132 if (! SetEmpiricalDistribution(*distNew) ) return false;; 133 if (! SetMethodAndInit() ) return false;; 134 if (! SetRandomGenerator() ) return false;; 135 return true;; 136}; 137 ; 138 ; 139bool TUnuran::SetRandomGenerator(); 140{; 141 // set an external random generator; 142 if (fRng == nullptr) return false;; 143 if (fGen == nullptr) return false;; 144 ; 145 fUrng = unur_urng_new(&UnuranRng<TRandom>::Rndm, fRng );; 146 if (fUrng == nullptr) return false;; 147 unsigned int ret = 0;; 148 ret |= unur_urng_set_delete(fUrng, &UnuranRng<TRandom>::Delete);; 149 ret |= unur_urng_set_seed(fUrng, &UnuranRng<TRandom>::Seed);; 150 if (ret != 0) return false;; 151 ; 152 unur_chg_urng( fGen, fUrng);; 153 return true;; 154}; 155 ; 156bool TUnuran::SetContDistribution(const TUnuranContDist & dist ); 157{; 158 // internal method to set in unuran the function pointer for a continuous univariate distribution; 159 if (fUdistr != nullptr) unur_distr_free(fUdistr);; 160 fUdistr = unur_distr_cont_new();; 161 if (fUdistr == nullptr) return false;; 162 unsigned int ret = 0;; 163 ret = unur_distr_set_extobj(fUdistr, &dist);; 164 if ( ! dist.IsLogPdf() ) {; 165 ret |= unur_distr_cont_set_pdf(fUdistr, &ContDist::Pdf);; 166 ret |= unur_distr_cont_set_dpdf(fUdistr, &ContDist::Dpdf);; 167 if (dist.HasCdf() ) ret |= unur_distr_cont_set_cdf(fUdistr, &ContDist::Cdf);; 168 }; 169 else {; 170 // case user provides log of pdf; 171 ret |= unur_distr_cont_set_logpdf(fUdistr, &ContDist::Pdf);; 172 ret |= unur_distr_cont_set_dlogpdf(fUdistr, &ContDist::Dpdf);; 1",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TUnuran_8cxx_source.html:5288,continuous,continuous,5288,doc/master/TUnuran_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TUnuran_8cxx_source.html,1,['continuous'],['continuous']
Deployability,"tr[2] /= fBombR;; 2213 return;; 2214 default: return;; 2215 }; 2216}; 2217 ; 2218////////////////////////////////////////////////////////////////////////////////; 2219/// Compute weight [kg] of the current volume.; 2220 ; 2221Double_t TGeoPainter::Weight(Double_t precision, Option_t *option); 2222{; 2223 return fChecker->Weight(precision, option);; 2224}; kButton1Double@ kButton1DoubleDefinition Buttons.h:24; kButton1Up@ kButton1UpDefinition Buttons.h:19; kMouseLeave@ kMouseLeaveDefinition Buttons.h:23; kButton1Down@ kButton1DownDefinition Buttons.h:17; kMouseEnter@ kMouseEnterDefinition Buttons.h:23; kWatch@ kWatchDefinition GuiTypes.h:375; kHand@ kHandDefinition GuiTypes.h:374; kPointer@ kPointerDefinition GuiTypes.h:375; b#define b(i)Definition RSha256.hxx:100; g#define g(i)Definition RSha256.hxx:105; s1#define s1(x)Definition RSha256.hxx:91; h#define h(i)Definition RSha256.hxx:106; updatestatic void update(gsl_integration_workspace *workspace, double a1, double b1, double area1, double error1, double a2, double b2, double area2, double error2)Definition RooAdaptiveGaussKronrodIntegrator1D.cxx:633; sizesize_t size(const MatrixT &matrix)retrieve the size of a square matrix; Int_tint Int_tDefinition RtypesCore.h:45; Float_tfloat Float_tDefinition RtypesCore.h:57; kFALSEconstexpr Bool_t kFALSEDefinition RtypesCore.h:94; Double_tdouble Double_tDefinition RtypesCore.h:59; Long64_tlong long Long64_tDefinition RtypesCore.h:69; kTRUEconstexpr Bool_t kTRUEDefinition RtypesCore.h:93; Option_tconst char Option_tDefinition RtypesCore.h:66; ClassImp#define ClassImp(name)Definition Rtypes.h:382; kRed@ kRedDefinition Rtypes.h:66; kBlack@ kBlackDefinition Rtypes.h:65; kGreen@ kGreenDefinition Rtypes.h:66; kBlue@ kBlueDefinition Rtypes.h:66; TAttFill.h; TAttLine.h; TBuffer3DTypes.h; TBuffer3D.h; TCanvasImp.h; TCanvas.h; TClass.h; TColor.h; TF1.h; optionOption_t Option_t optionDefinition TGWin32VirtualXProxy.cxx:44; widOption_t Option_t TPoint TPoint const char GetTextMagnitude Ge",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoPainter_8cxx_source.html:72972,update,updatestatic,72972,doc/master/TGeoPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoPainter_8cxx_source.html,2,['update'],"['update', 'updatestatic']"
Deployability,"tracing() const override { return fIsRaytracing; }; 138 Bool_t IsPaintingShape() const override { return fIsPaintingShape; }; 139 TH2F *LegoPlot(Int_t ntheta = 60, Double_t themin = 0., Double_t themax = 180., Int_t nphi = 90,; 140 Double_t phimin = 0., Double_t phimax = 360., Double_t rmin = 0., Double_t rmax = 9999999,; 141 Option_t *option = """") override;; 142 void Lock(Bool_t flag = kTRUE) { fVisLock = flag; }; 143 void ModifiedPad(Bool_t update = kFALSE) const override;; 144 void OpProgress(const char *opname, Long64_t current, Long64_t size, TStopwatch *watch = nullptr,; 145 Bool_t last = kFALSE, Bool_t refresh = kFALSE, const char *msg = """") override;; 146 void Paint(Option_t *option = """") override;; 147 void PaintNode(TGeoNode *node, Option_t *option = """", TGeoMatrix *global = nullptr) override;; 148 Bool_t PaintShape(const TGeoShape &shape, Option_t *option) const;; 149 void PaintShape(TGeoShape *shape, Option_t *option = """") override;; 150 void PaintOverlap(void *ovlp, Option_t *option = """") override;; 151 void PaintVolume(TGeoVolume *vol, Option_t *option = """", TGeoMatrix *global = nullptr) override;; 152 void PrintOverlaps() const override;; 153 void PaintPhysicalNode(TGeoPhysicalNode *node, Option_t *option = """");; 154 void RandomPoints(const TGeoVolume *vol, Int_t npoints, Option_t *option = """") override;; 155 void RandomRays(Int_t nrays, Double_t startx, Double_t starty, Double_t startz, const char *target_vol = nullptr,; 156 Bool_t check_norm = kFALSE) override;; 157 void Raytrace(Option_t *option = """") override;; 158 TGeoNode *SamplePoints(Int_t npoints, Double_t &dist, Double_t epsil, const char *g3path) override;; 159 void SetBombFactors(Double_t bombx = 1.3, Double_t bomby = 1.3, Double_t bombz = 1.3, Double_t bombr = 1.3) override;; 160 void SetClippingShape(TGeoShape *shape) override { fClippingShape = shape; }; 161 void SetExplodedView(Int_t iopt = 0) override;; 162 void SetNsegments(Int_t nseg = 20) override;; 163 void SetNmeshPoints(Int_t np",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoPainter_8h_source.html:7261,update,update,7261,doc/master/TGeoPainter_8h_source.html,https://root.cern,https://root.cern/doc/master/TGeoPainter_8h_source.html,1,['update'],['update']
Deployability,"tract. ;  ;  Protected Member Functions inherited from TEveTrackList; void FindMomentumLimits (TEveElement *el, Bool_t recurse=kTRUE);  Loop over track elements of argument el and find highest pT and p. ;  ; Double_t RoundMomentumLimit (Double_t x);  Round the momentum limit up to a nice value. ;  ; void SanitizeMinMaxCuts ();  Set Min/Max cuts so that they are within detected limits. ;  ;  Protected Member Functions inherited from TEveElement; virtual void AnnihilateRecursively ();  Protected member function called from TEveElement::Annihilate(). ;  ; virtual void PreDeleteElement ();  Externally assigned and controlled user data. ;  ; virtual void RemoveElementsInternal ();  Remove all elements. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TEveProjected; void SetDepthCommon (Float_t d, TEveElement *el, Float_t *bbox);  Utility function to update the z-values of the bounding-box. ;  . Private Member Functions;  TEveTrackListProjected (const TEveTrackListProjected &);  ; TEveTrackListProjected & operator= (const TEveTrackListProjected &);  . Additional Inherited Members;  Public Types inherited from TEveElement; enum  EChangeBits { kCBColorSelection = (1ULL << ( 0 )); , kCBTransBBox = (1ULL << ( 1 )); , kCBObjProps = (1ULL << ( 2 )); , kCBVisibility = (1ULL << ( 3 )); };  ; typedef void(TEveElement::* ImplySelect_foo) ();  ; typedef List_t::const_iterator List_ci;  ; typedef List_t::iterator List_i;  ; typedef std::list< TEveElement * > List_t;  ; typedef void(TEveElement::* Select_foo) (Bool_t);  ; typedef Set_t::const_iterator Set_ci;  ; typedef Set_t::iterator Set_i;  ; typedef std::set< TEveElement * > Set_t;  ; typedef sLTI_t::iterator sLTI_i;  ; typedef sLTI_t::reverse_iterator sLTI_ri;  ; typedef std::set< TEveListTreeInfo > sLTI_t;  ;  Public Types ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveTrackListProjected.html:37741,update,update,37741,doc/master/classTEveTrackListProjected.html,https://root.cern,https://root.cern/doc/master/classTEveTrackListProjected.html,1,['update'],['update']
Deployability,"traint pdf's will be normalized correctly on the global observables when computing the NLL ; Definition at line 96 of file BayesianCalculator.h. ◆ SetIntegrationType(). void RooStats::BayesianCalculator::SetIntegrationType ; (; const char * ; type). set the integration type (possible type are) : . 1D integration ( used when only one nuisance and when the posterior is scanned): adaptive , gauss, nonadaptive; multidim:; ADAPTIVE, adaptive numerical integration The parameter numIters (settable with SetNumIters) is the max number of function calls. It can be reduced to make the integration faster but it will be difficult to reach the required tolerance; VEGAS MC integration method based on importance sampling - numIters is number of function calls Extra Vegas parameter can be set using IntegratorMultiDimOptions class; MISER MC integration method based on stratified sampling See also http://en.wikipedia.org/wiki/Monte_Carlo_integration for VEGAS and MISER description; PLAIN simple MC integration method, where the max number of calls can be specified using SetNumIters(numIters). Extra integration types are:. TOYMC: evaluate posterior by generating toy MC for the nuisance parameters. It is a MC integration, where the function is sampled according to the nuisance. It is convenient to use when all the nuisance are uncorrelated and it is efficient to generate them The toy are generated by default for each poi values (this method has been proposed and provided by J.P Chou); 1-TOYMC : same method as before but in this case the toys are generated only one time and then used for each poi value. It can be convenient when the generation time is much larger than the evaluation time, otherwise it is recommended to re-generate the toy for each poi scanned point of the posterior function; ROOFIT: use roofit default integration methods which will produce a nested integral (not recommended for more than 1 nuisance parameters) . Definition at line 1073 of file BayesianCalculator.cxx. ◆ Set",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1BayesianCalculator.html:31100,integrat,integration,31100,doc/master/classRooStats_1_1BayesianCalculator.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1BayesianCalculator.html,1,['integrat'],['integration']
Deployability,"trate on their particular problem domain. They do not have to be experts at writing user interfaces, graphics, or networking to use the frameworks that provide those services. 1.4.2 Why Object-Oriented?; Object-Oriented Programming offers considerable benefits compared to Procedure-Oriented Programming:. Encapsulation enforces data abstraction and increases opportunity for reuse.; Sub classing and inheritance make it possible to extend and modify objects.; Class hierarchies and containment containment hierarchies provide a flexible mechanism for modeling real-world objects and the relationships among them.; Complexity is reduced because there is little growth of the global state, the state is contained within each object, rather than scattered through the program in the form of global variables.; Objects may come and go, but the basic structure of the program remains relatively static, increases opportunity for reuse of design. 1.5 Installing ROOT. To install ROOT you have the choice to download the binaries or the source. The source is quicker to transfer since it is only ~22 MB, but you will need to compile and link it. The binaries compiled with no debug information range from ~35 MB to ~45 MB depending on the target platform.; The installation and building of ROOT is described in Appendix A: Install and Build ROOT. You can download the binaries, or the source. The GNU g++ compiler on most UNIX platforms can compile ROOT.; Before downloading a binary version make sure your machine contains the right run-time environment. In most cases it is not possible to run a version compiled with, e.g., gcc4.0 on a platform where only gcc 3.2 is installed. In such cases you’ll have to install ROOT from source.; ROOT is currently running on the following platforms: supported platforms. GNU/Linux x86-32 (IA32) and x86-64 (AMD64)(GCC,Intel/icc, Portland/PGCC,KAI/KCC); Intel Itanium (IA64) GNU/Linux (GCC, Intel/ecc, SGI/CC); FreeBSD and OpenBSD (GCC); GNU/Hurd (GCC); HP HP-UX 10.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:14466,install,install,14466,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['install'],['install']
Deployability,"tream (std::ostream &os, Int_t contents, StyleOption style, TString indent="""") const;  Print description of object on ostream, printing contents set by contents integer, which is interpreted as an OR of 'enum ContentsOptions' values and in the style given by 'enum StyleOption'. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from RooResolutionModel; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static RooFormulaVar * identity ();  Return identity formula pointer. ;  ;  Static Public Member Functions inherited from RooAbsPdf; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static RooNumGenConfig * defaultGeneratorConfig ();  Returns the default numeric MC generator configuration for all RooAbsReals. ;  ; static int verboseEval ();  Return global level of verbosity for p.d.f. evaluations. ;  ; static void verboseEval (Int_t stat);  Change global level of verbosity for p.d.f. evaluations. ;  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current ev",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooGaussModel.html:57914,configurat,configuration,57914,doc/master/classRooGaussModel.html,https://root.cern,https://root.cern/doc/master/classRooGaussModel.html,4,['configurat'],['configuration']
Deployability,"treamerInfo* info, TVirtualCollectionProxy& proxy); Create the bundle of the actions necessary for the streaming memberwise of the content described by 'info' into the collection described by 'proxy'. TStreamerInfoActions::TActionSequence * CreateWriteMemberWiseActions(TVirtualStreamerInfo* info, TVirtualCollectionProxy& proxy); Create the bundle of the actions necessary for the streaming memberwise of the content described by 'info' into the collection described by 'proxy'. void AddToOffset(Int_t delta); Add the (potentially negative) delta to all the configuration's offset. This is used by; TBranchElement in the case of split sub-object. TStreamerInfoActions::TActionSequence * CreateCopy(); Create a copy of this sequence. TStreamerInfoActions::TActionSequence * CreateSubSequence(const vector<Int_t>& element_ids, size_t offset); Create a sequence containing the subset of the action corresponding to the SteamerElement whose ids is contained in the vector.; 'offset' is the location of this 'class' within the object (address) that will be passed to ReadBuffer when using this sequence. void Print(Option_t* = """") const; Add the (potentially negative) delta to all the configuration's offset. This is used by; TTBranchElement in the case of split sub-object.; If opt contains 'func', also print the (mangled) name of the function that will be executed. TConfiguredAction & operator=(const TStreamerInfoActions::TActionSequence& ); WARNING: Technically this is a move assignment!. TActionSequence(); {}. TActionSequence(TVirtualStreamerInfo* info, UInt_t maxdata); { fActions.reserve(maxdata); }. ~TActionSequence(). void AddAction( action_t action, TConfiguration *conf ). » Author: Philippe Canal 05/2010 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/io:$Id$ » Last generated: 2015-06-30 15:31; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TStreamerInfoActions__TActionSequence.html:8051,configurat,configuration,8051,root/html602/TStreamerInfoActions__TActionSequence.html,https://root.cern,https://root.cern/root/html602/TStreamerInfoActions__TActionSequence.html,1,['configurat'],['configuration']
Deployability,"treamerInfo* info, TVirtualCollectionProxy& proxy); Create the bundle of the actions necessary for the streaming memberwise of the content described by 'info' into the collection described by 'proxy'. TStreamerInfoActions::TActionSequence * CreateWriteMemberWiseActions(TVirtualStreamerInfo* info, TVirtualCollectionProxy& proxy); Create the bundle of the actions necessary for the streaming memberwise of the content described by 'info' into the collection described by 'proxy'. void AddToOffset(Int_t delta); Add the (potentially negative) delta to all the configuration's offset. This is used by; TBranchElement in the case of split sub-object. TStreamerInfoActions::TActionSequence * CreateCopy(); Create a copy of this sequence. TStreamerInfoActions::TActionSequence * CreateSubSequence(const vector<Int_t>& element_ids, size_t offset); Create a sequence containing the subset of the action corresponding to the SteamerElement whose ids is contained in the vector.; 'offset' is the location of this 'class' within the object (address) that will be passed to ReadBuffer when using this sequence. void Print(Option_t* = """") const; Add the (potentially negative) delta to all the configuration's offset. This is used by; TTBranchElement in the case of split sub-object.; If opt contains 'func', also print the (mangled) name of the function that will be executed. TConfiguredAction & operator=(const TStreamerInfoActions::TActionSequence& ); WARNING: Technically this is a move assignment!. TActionSequence(); {}. TActionSequence(TVirtualStreamerInfo* info, UInt_t maxdata); { fActions.reserve(maxdata); }. ~TActionSequence(). void AddAction( action_t action, TConfiguration *conf ). » Author: Philippe Canal 05/2010 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/io:$Id$ » Last generated: 2015-09-08 17:49; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TStreamerInfoActions__TActionSequence.html:8009,configurat,configuration,8009,root/html604/TStreamerInfoActions__TActionSequence.html,https://root.cern,https://root.cern/root/html604/TStreamerInfoActions__TActionSequence.html,1,['configurat'],['configuration']
Deployability,"treamerNVirtual(TBuffer& b). protected:. voidexpand(). Data Members; protected:. RooSetPair*_asArr! do not persist; RooHashTable*_htable! do not persist; RooNameSet_name1!; RooNameSet_name2!; Int_t_nreg; Int_t_regSize; TNamed*_set2RangeName!. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooNormSetCache(Int_t regSize); Construct normalization set manager with given initial size. RooNormSetCache(const RooNormSetCache& other); Copy constructor. ~RooNormSetCache(); Destructor. void clear(); Clear contents. void initialize(const RooNormSetCache& other); Initialize cache from contents of given other cache. void add(const RooArgSet* set1, const RooArgSet* set2 = 0); Add given pair of RooArgSet pointers to our store. void expand(); Expand registry size by doubling capacity. Bool_t autoCache(const RooAbsArg* self, const RooArgSet* set1, const RooArgSet* set2 = 0, const TNamed* set2RangeName = 0, Bool_t autoRefill = kTRUE); If RooArgSets set1 and set2 or sets with similar contents have; been seen by this cache manager before return kFALSE If not,; return kTRUE. If sets have not been seen and doRefill is true,; update cache reference to current input sets. Int_t index(const RooArgSet* set1, const RooArgSet* set2 = 0, const TNamed* set2RangeName = 0). Bool_t contains(const RooArgSet* set1, const RooArgSet* set2 = 0, const TNamed* set2RangeName = 0). Bool_t containsSet1(const RooArgSet* set1). const RooArgSet* lastSet1() const; { return _nreg>0?_asArr[_nreg-1]._set1:0 ; }. const RooArgSet* lastSet2() const; { return _nreg>0?_asArr[_nreg-1]._set2:0 ; }. const RooNameSet& nameSet1() const; { return _name1 ; }. const RooNameSet& nameSet2() const; { return _name2 ; }. Int_t entries() const; { return _nreg ; }. » Last changed: Mon Dec 7 13:48:27 2009 » Last generated: 2009-12-07 13:48; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooNormSetCache.html:3204,update,update,3204,root/html526/RooNormSetCache.html,https://root.cern,https://root.cern/root/html526/RooNormSetCache.html,1,['update'],['update']
Deployability,"tributes (not copied in ctor); Bool_tRooAbsReal::_boolValue! Transient cache for bool values from tree branches; UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooObjCacheManager_cacheMgr! The cache manager; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue; RooArgSet*_curNormSet!; Bool_tRooAbsArg::_deleteWatch! Delete watch flag; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches; Bool_tRooAbsArg::_isConstant! Cached isConstant status; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooProjectedPdf.html:42598,integrat,integration,42598,root/html602/RooProjectedPdf.html,https://root.cern,https://root.cern/root/html602/RooProjectedPdf.html,2,['integrat'],['integration']
Deployability,"tributes |; List of all members ; ROOT::Internal::RDF::RColumnRegister Class ReferenceDataframe. ; A binder for user-defined columns, variations and aliases. ; The storage is copy-on-write and shared between all instances of the class that have the same values.; Several components of an RDF computation graph make use of a column register. It keeps track of which columns have been defined, varied or aliased at each point of the computation graph. In many cases, the contents of the different column register instances are the same or only differ by a single extra defined/varied/aliased column. For this reason, in order to avoid unnecessary data duplication, fDefines, fAliases, fVariations and fColumnNames are all shared_ptr<const T> that (whenever possible) are shared across RColumnRegister instances that are part of the same computation graph. If a new column, alias or variation is added between one node and the next, then the new node contains a new instance of a RColumnRegister that shares all data members with the previous instance except for the one data member that needed updating, which is replaced with a new updated instance.; The contents of the collections that keep track of other objects of the computation graph are not owned by the RColumnRegister object. They are registered centrally by the RLoopManager and only accessed via reference in the RColumnRegister. ; Definition at line 68 of file RColumnRegister.hxx. Public Member Functions;  RColumnRegister (ROOT::Detail::RDF::RLoopManager *lm);  ; void AddAlias (std::string_view alias, std::string_view colName);  Add a new alias to the ledger. ;  ; void AddDefine (std::shared_ptr< RDFDetail::RDefineBase > column);  Add a new defined column. ;  ; void AddVariation (std::shared_ptr< RVariationBase > variation);  Register a new systematic variation. ;  ; std::vector< std::string_view > BuildDefineNames () const;  Return the list of the names of defined columns (no aliases). ;  ; ROOT::RDF::RVariationsDescription Bu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Internal_1_1RDF_1_1RColumnRegister.html:1379,update,updated,1379,doc/master/classROOT_1_1Internal_1_1RDF_1_1RColumnRegister.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1RDF_1_1RColumnRegister.html,1,['update'],['updated']
Deployability,"tribution. More...;  ; class  VecExpr;  Expression wrapper class for Vector objects. More...;  ; class  VectorMatrixColOp;  Class for Vector-Matrix multiplication. More...;  ; class  VectorMatrixRowOp;  ; struct  VegasParameters;  Structures collecting parameters for VEGAS multidimensional integration For implementation of default parameters see file mathmore/src/GSLMCIntegrationWorkspace.h. More...;  ; class  VirtualIntegrator;  Abstract class for all numerical integration methods (1D and multi-dim) Interface defining the common methods for the numerical integrator classes of one and multi dimensions The derived class VirtualIntegratorOneDim defines the methods for one-dimensional integration. More...;  ; class  VirtualIntegratorMultiDim;  Interface (abstract) class for multi numerical integration It must be implemented by the concrete Integrator classes like ROOT::Math::GSLMCIntegrator. More...;  ; class  VirtualIntegratorOneDim;  Interface (abstract) class for 1D numerical integration It must be implemented by the concrete Integrator classes like ROOT::Math::GSLIntegrator. More...;  ; class  WrappedFunction;  Template class to wrap any C++ callable object which takes one argument i.e. More...;  ; class  WrappedMemFunction;  Template class to wrap any member function of a class taking a double and returning a double in a 1D function interface For example, if you have a class like: struct X { double Eval(double x); }; you can wrapped in the following way: WrappedMemFunction<X, double ( X::* ) (double) > f;. More...;  ; class  WrappedMemMultiFunction;  ; class  WrappedMultiFunction;  Template class to wrap any C++ callable object implementing operator() (const double * x) in a multi-dimensional function interface. More...;  ; class  WrappedMultiTF1Templ;  Class to Wrap a ROOT Function class (like TF1) in a IParamMultiFunction interface of multi-dimensions to be used in the ROOT::Math numerical algorithm. More...;  ; class  WrappedParamFunction;  WrappedParamFunction ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1Math.html:33199,integrat,integration,33199,doc/master/namespaceROOT_1_1Math.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html,2,['integrat'],['integration']
Deployability,"tring attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooGenProdProj(); Default constructor. RooGenProdProj(const char* name, const char* title, const RooArgSet& _prodSet, const RooArgSet& _intSet, const RooArgSet& _normSet, const char* isetRangeName, const char* normRangeName = 0, Bool_t doFactorize = kTRUE); Constructor for a normalization projection of the product of p.d.f.s _prodSet; integrated over _intSet in range isetRangeName while normalized over _normSet. RooGenProdProj(const RooGenProdProj& other, const char* name = 0); Copy constructor. ~RooGenProdProj(); Destructor. RooAbsReal* makeIntegral(const char* name, const RooArgSet& compSet, const RooArgSet& intSet, RooArgSet& saveSet, const char* isetRangeName, Bool_t doFactorize); Utility function to create integral over observables intSet in range isetRangeName over product of p.d.fs in compSet.; The integration is factorized into components as much as possible and done analytically as far as possible.; All component object needed to represent product integral are added as owned members to saveSet.; The return value is a RooAbsReal object representing the requested integral. Double_t evaluate() const; Calculate and return value of normalization projection. void operModeHook(); Intercept cache mode operation changes and propagate them to the components. TObject* clone(const char* newname) const; { return new RooGenProdProj(*this, newname); }. »",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooGenProdProj.html:38355,integrat,integrated,38355,root/html602/RooGenProdProj.html,https://root.cern,https://root.cern/root/html602/RooGenProdProj.html,2,['integrat'],['integrated']
Deployability,"tring::Formvoid Form(const char *fmt,...)Formats a string using a printf style format descriptor.Definition TString.cxx:2356; TString::ContainsBool_t Contains(const char *pat, ECaseCompare cmp=kExact) constDefinition TString.h:632; TString::IndexSsiz_t Index(const char *pat, Ssiz_t i=0, ECaseCompare cmp=kExact) constDefinition TString.h:651; TVirtualGeoPainterAbstract class for geometry painters.Definition TVirtualGeoPainter.h:32; TVirtualGeoPainter::SetTopVolumevirtual void SetTopVolume(TGeoVolume *vol)=0; TVirtualGeoPainter::kGeoVisOnly@ kGeoVisOnlyDefinition TVirtualGeoPainter.h:42; TVirtualGeoPainter::kGeoVisDefault@ kGeoVisDefaultDefinition TVirtualGeoPainter.h:40; TVirtualGeoPainter::kGeoVisLeaves@ kGeoVisLeavesDefinition TVirtualGeoPainter.h:41; TVirtualGeoPainter::ModifiedPadvirtual void ModifiedPad(Bool_t update=kFALSE) const =0; TVirtualGeoPainter::GetTopVolumevirtual TGeoVolume * GetTopVolume() const =0; TVirtualGeoPainter::DrawVolumevirtual void DrawVolume(TGeoVolume *vol, Option_t *option="""")=0; TVirtualGeoPainter::GrabFocusvirtual void GrabFocus(Int_t nfr=0, Double_t dlong=0, Double_t dlat=0, Double_t dpsi=0)=0; TVirtualGeoPainter::CheckOverlapsvirtual void CheckOverlaps(const TGeoVolume *vol, Double_t ovlp=0.1, Option_t *option="""") const =0; TVirtualGeoPainter::DistanceToPrimitiveVolvirtual Int_t DistanceToPrimitiveVol(TGeoVolume *vol, Int_t px, Int_t py)=0; TVirtualGeoPainter::Paintvoid Paint(Option_t *option="""") override=0This method must be overridden if a class wants to paint itself.; TVirtualGeoPainter::TestVoxelsvirtual Bool_t TestVoxels(TGeoVolume *vol)=0; TVirtualGeoPainter::GetDrawnVolumevirtual TGeoVolume * GetDrawnVolume() const =0; TVirtualGeoPainter::GetVolumeInfovirtual const char * GetVolumeInfo(const TGeoVolume *volume, Int_t px, Int_t py) const =0; TVirtualGeoPainter::ExecuteVolumeEventvirtual void ExecuteVolumeEvent(TGeoVolume *volume, Int_t event, Int_t px, Int_t py)=0; TVirtualGeoPainter::CheckGeometryvirtual void CheckGeometry(Int",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoVolume_8cxx_source.html:162701,update,update,162701,doc/master/TGeoVolume_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoVolume_8cxx_source.html,1,['update'],['update']
Deployability,"tring>RooAbsArg::_boolAttribTransient! Transient boolean attributes (not copied in ctor); Bool_tRooAbsReal::_boolValue! Transient cache for bool values from tree branches ; UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches ; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Double_t_epsPrecision; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; RooFunctor*_ftor! Functor binding of RooAbsReal; RooRealProxy_funcInput function; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; Bool_tRooAbsArg::_isConstant! Cached isConstant status ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooDerivative.html:33630,integrat,integration,33630,root/html534/RooDerivative.html,https://root.cern,https://root.cern/root/html534/RooDerivative.html,1,['integrat'],['integration']
Deployability,"tringRooAbsPdf::_normRangeNormalization range; static TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooRealProxymean; RooRealProxysigmaL; RooRealProxysigmaR; RooRealProxyx.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooBifurGauss.html:42180,configurat,configuration,42180,root/html534/RooBifurGauss.html,https://root.cern,https://root.cern/root/html534/RooBifurGauss.html,3,"['configurat', 'integrat']","['configuration', 'integrator']"
Deployability,"tringRooAbsPdf::_normRangeNormalization range; static TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<string,string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooRealProxyrho1; RooRealProxyrho2; RooRealProxysigp; RooRealProxyx; RooRealProxyxi.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooBukinPdf.html:43878,configurat,configuration,43878,root/html602/RooBukinPdf.html,https://root.cern,https://root.cern/root/html602/RooBukinPdf.html,6,"['configurat', 'integrat']","['configuration', 'integrator']"
Deployability,"tringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooRealProxyk; RooRealProxym0; RooRealProxyx.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooLognormal.html:39571,configurat,configuration,39571,root/html530/RooLognormal.html,https://root.cern,https://root.cern/root/html530/RooLognormal.html,3,"['configurat', 'integrat']","['configuration', 'integrator']"
Deployability,"tringTNamed::fNameobject identifier; Bool_tTVirtualStreamerInfo::fOptimized! true if the StreamerInfo has been optimized; TStringTNamed::fTitleobject title; static Bool_tTVirtualStreamerInfo::fgCanDeleteTrue if ReadBuffer can delete object; static TVirtualStreamerInfo*TVirtualStreamerInfo::fgInfoFactory; static Bool_tTVirtualStreamerInfo::fgOptimizeTrue if optimization on; static Bool_tTVirtualStreamerInfo::fgStreamMemberWiseTrue if the collections are to be stream ""member-wise"" (when possible). private:. UInt_tfCheckSumchecksum of original class; TClass*fClass!pointer to class; Int_tfClassVersionClass version identifier; TStreamerInfo::TCompInfo*fComp![fNslots with less than fElements->GetEntries()*1.5 used] Compiled info; TStreamerInfo::TCompInfo**fCompFull![fElements->GetEntries()]; TStreamerInfo::TCompInfo**fCompOpt![fNdata]; TObjArray*fElementsArray of TStreamerElements; atomic<ULong_t>fLiveCount! Number of outstanding pointer to this StreamerInfo.; Int_tfNVirtualInfoLoc! Number of virtual info location to update.; Int_tfNdata!number of optimized elements; Int_tfNfulldata!number of elements; Int_tfNslots!total numbrer of slots in fComp.; Int_tfNumber!Unique identifier; Version_tfOldVersion! Version of the TStreamerInfo object read from the file; Int_tfOnFileClassVersion!Class version identifier as stored on file.; TStreamerInfoActions::TActionSequence*fReadMemberWise! List of read action resulting from the compilation for use in member wise streaming.; TStreamerInfoActions::TActionSequence*fReadMemberWiseVecPtr! List of read action resulting from the compilation for use in member wise streaming.; TStreamerInfoActions::TActionSequence*fReadObjectWise! List of read action resulting from the compilation.; Int_tfSize!size of the persistent class; ULong_t*fVirtualInfoLoc![fNVirtualInfoLoc] Location of the pointer to the TStreamerInfo inside the object (when emulated); TStreamerInfoActions::TActionSequence*fWriteMemberWise! List of write action resulting from the comp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TStreamerInfo.html:20527,update,update,20527,root/html602/TStreamerInfo.html,https://root.cern,https://root.cern/root/html602/TStreamerInfo.html,2,['update'],['update']
Deployability,"tring_formExprFormula expression string; RooFormula*_formula! Formula engine ; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; static Int_tRooPrintable::_nameLength; RooArgSet*_nset! Normalization set to be passed along to contents; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TRefArrayRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooFormulaVar.html:33862,integrat,integrator,33862,root/html532/RooFormulaVar.html,https://root.cern,https://root.cern/root/html532/RooFormulaVar.html,2,"['configurat', 'integrat']","['configuration', 'integrator']"
Deployability,"trlcpy(temp,info,10000);; 6388 //remove heading and trailing blanks; 6389 while (*temp == ' ') temp++;; 6390 while (save[nch-1] == ' ') {nch--; save[nch] = 0;}; 6391 if (nch == 0) {delete [] save; return;}; 6392 if (save[nch-1] != ';') {save[nch] = ';'; save[nch+1] = 0;}; 6393 //remove blanks around , or ;; 6394 while ((blank = strstr(temp,""; ""))) strcpy(blank+1,blank+2);; 6395 while ((blank = strstr(temp,"" ;""))) strcpy(blank, blank+1);; 6396 while ((blank = strstr(temp,"", ""))) strcpy(blank+1,blank+2);; 6397 while ((blank = strstr(temp,"" ,""))) strcpy(blank, blank+1);; 6398 while ((blank = strstr(temp,"" ""))) strcpy(blank, blank+1);; 6399 //loop on tokens separated by ;; 6400 char *final = new char[1000];; 6401 char token[100];; 6402 while ((colon=strchr(temp,';'))) {; 6403 *colon = 0;; 6404 strlcpy(token,temp,100);; 6405 blank = strchr(token,' ');; 6406 if (blank) {; 6407 *blank = 0;; 6408 if (!gROOT->GetType(token)) {; 6409 Error(""SetStreamerInfo"",""Illegal type: %s in %s"",token,info);; 6410 return;; 6411 }; 6412 while (blank) {; 6413 strlcat(final,token,1000);; 6414 strlcat(final,"" "",1000);; 6415 comma = strchr(blank+1,','); if (comma) *comma=0;; 6416 strlcat(final,blank+1,1000);; 6417 strlcat(final,"";"",1000);; 6418 blank = comma;; 6419 }; 6420 ; 6421 } else {; 6422 if (TClass::GetClass(token,update)) {; 6423 //a class name; 6424 strlcat(final,token,1000); strlcat(final,"";"",1000);; 6425 } else {; 6426 //a data member name; 6427 dm = (TDataMember*)GetListOfDataMembers()->FindObject(token);; 6428 if (dm) {; 6429 strlcat(final,dm->GetFullTypeName(),1000);; 6430 strlcat(final,"" "",1000);; 6431 strlcat(final,token,1000); strlcat(final,"";"",1000);; 6432 } else {; 6433 Error(""SetStreamerInfo"",""Illegal name: %s in %s"",token,info);; 6434 return;; 6435 }; 6436 }; 6437 update = kFALSE;; 6438 }; 6439 temp = colon+1;; 6440 if (*temp == 0) break;; 6441 }; 6442 //// fStreamerInfo = final;; 6443 delete [] final;; 6444 delete [] save;; 6445 return;; 6446 }; 6447 ; 6448 //info is empty.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TClass_8cxx_source.html:246941,update,update,246941,doc/v632/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/TClass_8cxx_source.html,2,['update'],['update']
Deployability,"trlcpy(temp,info,10000);; 6455 //remove heading and trailing blanks; 6456 while (*temp == ' ') temp++;; 6457 while (save[nch-1] == ' ') {nch--; save[nch] = 0;}; 6458 if (nch == 0) {delete [] save; return;}; 6459 if (save[nch-1] != ';') {save[nch] = ';'; save[nch+1] = 0;}; 6460 //remove blanks around , or ;; 6461 while ((blank = strstr(temp,""; ""))) strcpy(blank+1,blank+2);; 6462 while ((blank = strstr(temp,"" ;""))) strcpy(blank, blank+1);; 6463 while ((blank = strstr(temp,"", ""))) strcpy(blank+1,blank+2);; 6464 while ((blank = strstr(temp,"" ,""))) strcpy(blank, blank+1);; 6465 while ((blank = strstr(temp,"" ""))) strcpy(blank, blank+1);; 6466 //loop on tokens separated by ;; 6467 char *final = new char[1000];; 6468 char token[100];; 6469 while ((colon=strchr(temp,';'))) {; 6470 *colon = 0;; 6471 strlcpy(token,temp,100);; 6472 blank = strchr(token,' ');; 6473 if (blank) {; 6474 *blank = 0;; 6475 if (!gROOT->GetType(token)) {; 6476 Error(""SetStreamerInfo"",""Illegal type: %s in %s"",token,info);; 6477 return;; 6478 }; 6479 while (blank) {; 6480 strlcat(final,token,1000);; 6481 strlcat(final,"" "",1000);; 6482 comma = strchr(blank+1,','); if (comma) *comma=0;; 6483 strlcat(final,blank+1,1000);; 6484 strlcat(final,"";"",1000);; 6485 blank = comma;; 6486 }; 6487 ; 6488 } else {; 6489 if (TClass::GetClass(token,update)) {; 6490 //a class name; 6491 strlcat(final,token,1000); strlcat(final,"";"",1000);; 6492 } else {; 6493 //a data member name; 6494 dm = (TDataMember*)GetListOfDataMembers()->FindObject(token);; 6495 if (dm) {; 6496 strlcat(final,dm->GetFullTypeName(),1000);; 6497 strlcat(final,"" "",1000);; 6498 strlcat(final,token,1000); strlcat(final,"";"",1000);; 6499 } else {; 6500 Error(""SetStreamerInfo"",""Illegal name: %s in %s"",token,info);; 6501 return;; 6502 }; 6503 }; 6504 update = kFALSE;; 6505 }; 6506 temp = colon+1;; 6507 if (*temp == 0) break;; 6508 }; 6509 //// fStreamerInfo = final;; 6510 delete [] final;; 6511 delete [] save;; 6512 return;; 6513 }; 6514 ; 6515 //info is empty.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClass_8cxx_source.html:249692,update,update,249692,doc/master/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TClass_8cxx_source.html,2,['update'],['update']
Deployability,"tron::GetStructure ; (; ); const. inline . Definition at line 83 of file TMultiLayerPerceptron.h. ◆ GetSumSquareError(). Double_t TMultiLayerPerceptron::GetSumSquareError ; (; ); const. protected . Error on the output for a given event. ; Definition at line 1098 of file TMultiLayerPerceptron.cxx. ◆ GetTau(). Double_t TMultiLayerPerceptron::GetTau ; (; ); const. inline . Definition at line 81 of file TMultiLayerPerceptron.h. ◆ GetType(). TNeuron::ENeuronType TMultiLayerPerceptron::GetType ; (; ); const. inline . Definition at line 84 of file TMultiLayerPerceptron.h. ◆ IsA(). TClass * TMultiLayerPerceptron::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 151 of file TMultiLayerPerceptron.h. ◆ LineSearch(). bool TMultiLayerPerceptron::LineSearch ; (; Double_t * ; direction, . Double_t * ; buffer . ). protected . Search along the line defined by direction. ; buffer is not used but is updated with the new dw so that it can be used by a later stochastic step. It returns true if the line search fails. ; Definition at line 2274 of file TMultiLayerPerceptron.cxx. ◆ LoadWeights(). Bool_t TMultiLayerPerceptron::LoadWeights ; (; Option_t * ; filename = """"). Loads the weights from a text file conforming to the format defined by DumpWeights. ; Definition at line 1657 of file TMultiLayerPerceptron.cxx. ◆ MLP_Batch(). void TMultiLayerPerceptron::MLP_Batch ; (; Double_t * ; buffer). protected . One step for the batch (stochastic) method. ; DEDw should have been updated before calling this. ; Definition at line 2203 of file TMultiLayerPerceptron.cxx. ◆ MLP_Line(). void TMultiLayerPerceptron::MLP_Line ; (; Double_t * ; origin, . Double_t * ; dir, . Double_t ; dist . ). private . Sets the weights to a point along a line Weights are set to [origin + (dist * dir)]. ; Definition at line 2231 of file TMultiLayerPerceptron.cxx. ◆ MLP_Stochastic(). void TMultiLayerPerceptron::MLP_Stochastic ; (; Double_t * ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMultiLayerPerceptron.html:42630,update,updated,42630,doc/master/classTMultiLayerPerceptron.html,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html,1,['update'],['updated']
Deployability,"tructor Documentation. ◆ ClassificationSettings(). TMVA::DNN::ClassificationSettings::ClassificationSettings ; (; TString ; name, . size_t ; _convergenceSteps = 15, . size_t ; _batchSize = 10, . size_t ; _testRepetitions = 7, . double ; _factorWeightDecay = 1e-5, . EnumRegularization ; _regularization = EnumRegularization::NONE, . size_t ; _scaleToNumEvents = 0, . MinimizerType ; _eMinimizerType = MinimizerType::fSteepest, . double ; _learningRate = 1e-5, . double ; _momentum = 0.3, . int ; _repetitions = 3, . bool ; _useMultithreading = true . ). inline . c'tor ; Definition at line 901 of file NeuralNet.h. ◆ ~ClassificationSettings(). virtual TMVA::DNN::ClassificationSettings::~ClassificationSettings ; (; ). inlinevirtual . d'tor ; Definition at line 924 of file NeuralNet.h. Member Function Documentation. ◆ endTestCycle(). void TMVA::DNN::ClassificationSettings::endTestCycle ; (; ). virtual . action to be done when the training cycle is ended (e.g. ; update some monitoring output) ; Reimplemented from TMVA::DNN::Settings.; Definition at line 326 of file NeuralNet.cxx. ◆ endTrainCycle(). void TMVA::DNN::ClassificationSettings::endTrainCycle ; (; double ; ). virtual . action to be done when the training cycle is ended (e.g. ; update some monitoring output) ; Reimplemented from TMVA::DNN::Settings.; Definition at line 296 of file NeuralNet.cxx. ◆ setResultComputation(). void TMVA::DNN::ClassificationSettings::setResultComputation ; (; std::string ; _fileNameNetConfig, . std::string ; _fileNameResult, . std::vector< Pattern > * ; _resultPatternContainer . ). preparation for monitoring output ; Definition at line 520 of file NeuralNet.cxx. ◆ setWeightSums(). void TMVA::DNN::ClassificationSettings::setWeightSums ; (; double ; sumOfSigWeights, . double ; sumOfBkgWeights . ). set the weight sums to be scaled to (preparations for monitoring output) ; Definition at line 512 of file NeuralNet.cxx. ◆ startTestCycle(). void TMVA::DNN::ClassificationSettings::startTestCycle ; (; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1ClassificationSettings.html:7458,update,update,7458,doc/master/classTMVA_1_1DNN_1_1ClassificationSettings.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1ClassificationSettings.html,1,['update'],['update']
Deployability,"tructor of SimWSTool on given workspace. ;  ;  ~RooSimWSTool ();  Destructor. ;  ; RooSimultaneous * build (const char *simPdfName, BuildConfig &bc, bool verbose=true);  Build a RooSimultaneous PDF with name simPdfName from cloning specializations of protytpe PDF protoPdfName. ;  ; RooSimultaneous * build (const char *simPdfName, const char *protoPdfName, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={});  Build a RooSimultaneous PDF with name simPdfName from cloning specializations of protytpe PDF protoPdfName. ;  . Protected Member Functions;  RooSimWSTool (const RooSimWSTool &);  ; RooSimultaneous * executeBuild (const char *simPdfName, ObjBuildConfig &obc, bool verbose=true);  Internal build driver from validation ObjBuildConfig. ;  ; std::string makeSplitName (const RooArgSet &splitCatSet);  Construct name of composite split. ;  ; std::unique_ptr< ObjBuildConfig > validateConfig (BuildConfig &bc);  Validate build configuration. ;  . Protected Attributes; RooWorkspace * _ws;  . #include <RooSimWSTool.h>; Constructor & Destructor Documentation. ◆ RooSimWSTool() [1/2]. RooSimWSTool::RooSimWSTool ; (; RooWorkspace & ; ws). Constructor of SimWSTool on given workspace. ; All input is taken from the workspace All output is stored in the workspace ; Definition at line 146 of file RooSimWSTool.cxx. ◆ ~RooSimWSTool(). RooSimWSTool::~RooSimWSTool ; (; ). Destructor. ; Definition at line 155 of file RooSimWSTool.cxx. ◆ RooSimWSTool() [2/2]. RooSimWSTool::RooSimWSTool ; (; const RooSimWSTool & ; ). protected . Member Function Documentation. ◆ build() [1/2]. RooSimultaneous * RooSimWSTool::build ; (; const char * ; simPdfName, . BuildConfig & ; bc, . bool ; verbose = true . ). Build a RooSimultaneous PDF with name simPdfName from cloning specializations of protytpe PDF protoPdfName. ; Use the provided BuildConfig or MultiBuildConfig object to configure the build ; Defini",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooSimWSTool.html:5766,configurat,configuration,5766,doc/master/classRooSimWSTool.html,https://root.cern,https://root.cern/doc/master/classRooSimWSTool.html,1,['configurat'],['configuration']
Deployability,"tructor. TAxis& operator=(const TAxis& ); Assignment operator. const char * ChooseTimeFormat(Double_t axislength = 0); Choose a reasonable time format from the coordinates in the active pad; and the number of divisions in this axis; If orientation = ""X"", the horizontal axis of the pad will be used for ref.; If orientation = ""Y"", the vertical axis of the pad will be used for ref. void Copy(TObject& axis) const; Copy axis structure to another axis. Int_t DistancetoPrimitive(Int_t px, Int_t py); Compute distance from point px,py to an axis. void ExecuteEvent(Int_t event, Int_t px, Int_t py); Execute action corresponding to one event. This member function is called when an axis is clicked with the locator. The axis range is set between the position where the mouse is pressed; and the position where it is released.; If the mouse position is outside the current axis range when it is released; the axis is unzoomed with the corresponding proportions.; Note that the mouse does not need to be in the pad or even canvas; when it is released. Int_t FindBin(Double_t x); Find bin number corresponding to abscissa x. NOTE: this method does not work with alphanumeric bins !!!. If x is underflow or overflow, attempt to extend the axis if TAxis::kCanExtend is true.; Otherwise, return 0 or fNbins+1. Int_t FindBin(const char* label); Find bin number with label.; If the List of labels does not exist create it and make the axis alphanumeric; If one wants just to add a single label- just call TAxis::SetBinLabel; If label is not in the list of labels do the following depending on the; bit TAxis::kCanExtend; of the axis.; - if the bit is set add the new label and if the number of labels exceeds; the number of bins, double the number of bins via TH1::LabelsInflate; - if the bit is not set and the histogram has labels in each bin; set the bit automatically and consider the histogram as alphanumeric; if histogram has only some bins with labels then the histogram is not; consider alphanumeric and ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TAxis.html:13579,release,released,13579,root/html604/TAxis.html,https://root.cern,https://root.cern/root/html604/TAxis.html,1,['release'],['released']
Deployability,"tructor. TAxis& operator=(const TAxis& ); Assignment operator. const char * ChooseTimeFormat(Double_t axislength = 0); Choose a reasonable time format from the coordinates in the active pad; and the number of divisions in this axis; If orientation = ""X"", the horizontal axis of the pad will be used for ref.; If orientation = ""Y"", the vertical axis of the pad will be used for ref. void Copy(TObject& axis) const; Copy axis structure to another axis. Int_t DistancetoPrimitive(Int_t px, Int_t py); Compute distance from point px,py to an axis. void ExecuteEvent(Int_t event, Int_t px, Int_t py); Execute action corresponding to one event. This member function is called when an axis is clicked with the locator. The axis range is set between the position where the mouse is pressed; and the position where it is released.; If the mouse position is outside the current axis range when it is released; the axis is unzoomed with the corresponding proportions.; Note that the mouse does not need to be in the pad or even canvas; when it is released. Int_t FindBin(Double_t x); Find bin number corresponding to abscissa x. NOTE: this method does not work with alphanumeric bins !!!. If x is underflow or overflow, attempt to extend the axis if TAxis::kCanExtend is true.; Otherwise, return 0 or fNbins+1. Int_t FindBin(const char* label); Find bin number with label.; If the List of labels does not exist create it; If label is not in the list of labels do the following depending on the; bit TAxis::kCanExtend; of the axis.; - if the bit is set add the new label and if the number of labels exceeds; the number of bins, double the number of bins via TH1::LabelsInflate; - if the bit is not set and the histogram has labels in each bin; set the bit automatically and consider the histogram as alphanumeric; if histogram has only some bins with labels then the histogram is not; consider alphanumeric and return -1. -1 is returned only when the Axis has no parent histogram. Int_t FindFixBin(const char* lab",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TAxis.html:13579,release,released,13579,root/html602/TAxis.html,https://root.cern,https://root.cern/root/html602/TAxis.html,1,['release'],['released']
Deployability,"true,; 6809 modifiedTClasses);; 6810 }; 6811 }; 6812 ; 6813 ; 6814 // When fully building the reflection info in TClass, a deserialization; 6815 // could be triggered, which may result in request for building the; 6816 // reflection info for the same TClass. This in turn will clear the caches; 6817 // for the TClass in-flight and cause null ptr derefs.; 6818 // FIXME: This is a quick fix, solving most of the issues. The actual; 6819 // question is: Shouldn't TClass provide a lock mechanism on update or lock; 6820 // itself until the update is done.; 6821 //; 6822 std::vector<TClass*> modifiedTClassesDiff(modifiedTClasses.size());; 6823 std::vector<TClass*>::iterator it;; 6824 it = set_difference(modifiedTClasses.begin(), modifiedTClasses.end(),; 6825 ((TCling*)gCling)->GetModTClasses().begin(),; 6826 ((TCling*)gCling)->GetModTClasses().end(),; 6827 modifiedTClassesDiff.begin());; 6828 modifiedTClassesDiff.resize(it - modifiedTClassesDiff.begin());; 6829 ; 6830 // Lock the TClass for updates; 6831 ((TCling*)gCling)->GetModTClasses().insert(modifiedTClassesDiff.begin(),; 6832 modifiedTClassesDiff.end());; 6833 for (std::vector<TClass*>::const_iterator I = modifiedTClassesDiff.begin(),; 6834 E = modifiedTClassesDiff.end(); I != E; ++I) {; 6835 // Make sure the TClass has not been deleted.; 6836 if (!gROOT->GetListOfClasses()->FindObject(*I)) {; 6837 continue;; 6838 }; 6839 // Could trigger deserialization of decls.; 6840 cling::Interpreter::PushTransactionRAII RAII(GetInterpreterImpl());; 6841 // Unlock the TClass for updates; 6842 ((TCling*)gCling)->GetModTClasses().erase(*I);; 6843 ; 6844 }; 6845}; 6846 ; 6847///\brief Invalidate stored TCling state for declarations included in transaction `T'.; 6848///; 6849void TCling::UpdateListsOnUnloaded(const cling::Transaction &T); 6850{; 6851 HandleNewTransaction(T);; 6852 ; 6853 auto Lists = std::make_tuple((TListOfDataMembers *)gROOT->GetListOfGlobals(),; 6854 (TListOfFunctions *)gROOT->GetListOfGlobalFunctions(),; 6855 (TL",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCling_8cxx_source.html:266814,update,updates,266814,doc/master/TCling_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCling_8cxx_source.html,1,['update'],['updates']
Deployability,"trum after background elimination. The highest peak is the first in the list. On success it returns number of found peaks.; Parameters:. source: pointer to the vector of source spectrum.; destVector: pointer to the vector of resulting deconvolved spectrum.; ssize: length of source spectrum.; sigma: sigma of searched peaks, for details we refer to manual.; threshold: threshold value in % for selected peaks, peaks with amplitude less than threshold*highest_peak/100 are ignored, see manual.; backgroundRemove: logical variable, set if the removal of background before deconvolution is desired.; deconIterations-number of iterations in deconvolution operation.; markov: logical variable, if it is true, first the source spectrum is replaced by new spectrum calculated using Markov chains method.; averWindow: averaging window of searched peaks, for details we refer to manual (applies only for Markov method). Peaks searching:; The goal of this function is to identify automatically the peaks in spectrum with the presence of the continuous background and statistical fluctuations - noise.; The common problems connected with correct peak identification are:. non-sensitivity to noise, i.e., only statistically relevant peaks should be identified.; non-sensitivity of the algorithm to continuous background.; ability to identify peaks close to the edges of the spectrum region. Usually peak finders fail to detect them.; resolution, decomposition of Double_tts and multiplets. The algorithm should be able to recognise close positioned peaks.; ability to identify peaks with different sigma. Fig. 27 An example of one-dimensional synthetic spectrum with found peaks denoted by markers.; References:. M.A. Mariscotti: A method for identification of peaks in the presence of background and its application to spectrum analysis. NIM 50 (1967), 309-320.; M. Morhac;, J. Kliman, V. Matouoek, M. Veselsky, I. Turzo.:Identification of peaks in multidimensional coincidence gamma-ray spectra. NIM, A443 (200",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSpectrum.html:57382,continuous,continuous,57382,doc/master/classTSpectrum.html,https://root.cern,https://root.cern/doc/master/classTSpectrum.html,1,['continuous'],['continuous']
Deployability,"tryNumberWithBestIndex. TTreeFormula * GetMajorFormula(); return a pointer to the TreeFormula corresponding to the majorname. TTreeFormula * GetMinorFormula(); return a pointer to the TreeFormula corresponding to the minorname. TTreeFormula * GetMajorFormulaParent(const TTree* T); return a pointer to the TreeFormula corresponding to the majorname in parent tree T. TTreeFormula * GetMinorFormulaParent(const TTree* T); return a pointer to the TreeFormula corresponding to the minorname in parent tree T. void Print(Option_t* option = """") const; print the table with : serial number, majorname, minorname; if option = ""10"" print only the first 10 entries; if option = ""100"" print only the first 100 entries; if option = ""1000"" print only the first 1000 entries. void Streamer(TBuffer& b); Stream an object of class TTreeIndex.; Note that this Streamer should be changed to an automatic Streamer; once TStreamerInfo supports an index of type Long64_t. void UpdateFormulaLeaves(const TTree* parent); Called by TChain::LoadTree when the parent chain changes it's tree. void SetTree(const TTree* T); this function is called by TChain::LoadTree and TTreePlayer::UpdateFormulaLeaves; when a new Tree is loaded.; Because Trees in a TChain may have a different list of leaves, one; must update the leaves numbers in the TTreeFormula used by the TreeIndex. TTreeIndex(). Long64_t * GetIndexValues() const; {return fIndexValues;}. Long64_t * GetIndex() const; {return fIndex;}. const char * GetMajorName() const; {return fMajorName.Data();}. const char * GetMinorName() const; {return fMinorName.Data();}. Long64_t GetN() const; {return fN;}. » Author: Rene Brun 05/07/2004 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/treeplayer:$Id: TTreeIndex.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2010-09-23 20:22; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTreeIndex.html:12581,update,update,12581,root/html528/TTreeIndex.html,https://root.cern,https://root.cern/root/html528/TTreeIndex.html,1,['update'],['update']
Deployability,"ts . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Development Release Checklist. Steps to be followed to produce a new ROOT release are:; Prerequisites. Get the 'green' light from all main developers; Check that all the Jenkins builds / CDash builds are green; Verify that no performance regressions exist in the benchmark system; Update versions in JIRA. 'Release' the version in the project configuration; Create the next development version. root.git. Update the release notes in README/ReleaseNotes/vXXX/index.md. Edit release notes patches section; From the list the versions in JIRA, select the version and then 'release notes'; git commit README/ReleaseNotes/vXXX/index.md. Modify version number and modify all necessary files. edit build/version_number (even patch number for releases); Run from the build directory $ make version. Tag main ROOT repository. $ git tag -a vX-YY-ZZ; Run $ cmake . to update etc/gitinfo.txt. Create the source tarball. Run from the build directory $ make distsrc not on a MacOS machine; $ scp ../root_vX.YY.ZZ.source.tar.gz sftnight@root:/home/www/root/download. Update the release notes in README/ReleaseNotes/vXXX/index.md again. edit README/ReleaseNotes/vXXX/index.md; possibly copying from README/ReleaseNotes/empty.md if this is not a patch release; git commit README/ReleaseNotes/vXXX/index.md. Update to the next development version. edit build/version_number (odd patch number); make version, check in. Push to github. $ git push origin vX-YY-00-patches; $ git push origin vX-YY-ZZ. Tag ROOTTEST repository. Artifacts. Produce binary tarfiles. start the procedure root-release-6.20 (or whichever branch) in Jenkins; tarfiles and other artifacts are copied to final destination. Install binaries to CVMFS. Install release binaries to CVMFS with the Jenkins procedure root-release-CVMFS. Documentation. Update the release pages. Generate the release notes with the Jenki",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/release-checklist.html:2710,update,update,2710,d/release-checklist.html,https://root.cern,https://root.cern/d/release-checklist.html,1,['update'],['update']
Deployability,"ts = 2, Option_t* options = ""NELU"", Double_t xmin = 0.65, Double_t xmax = 0.99, Double_t ymax = 0.95, const RooCmdArg* formatCmd = 0); Add a text box with the current parameter values and their errors to the frame.; Observables of this PDF appearing in the 'data' dataset will be omitted. Optional label will be inserted as first line of the text box. Use 'sigDigits'; to modify the default number of significant digits printed. The 'xmin,xmax,ymax'; values specify the inital relative position of the text box in the plot frame. Double_t expectedEvents(const RooArgSet*); Return expected number of events from this p.d.f for use in extended; likelihood calculations. This default implementation returns zero. void verboseEval(Int_t stat); Change global level of verbosity for p.d.f. evaluations. Int_t verboseEval(); Return global level of verbosity for p.d.f. evaluations. RooAbsPdf* createProjection(const RooArgSet& iset); Return a p.d.f that represent a projection of this p.d.f integrated over given observables. RooAbsReal* createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); Create a cumulative distribution function of this p.d.f in terms; of the observables listed in iset. If no nset argument is given; the c.d.f normalization is constructed over the integrated; observables, so that its maximum value is precisely 1. It is also; possible to choose a different normalization for; multi-dimensional p.d.f.s: eg. for a pdf f(x,y,z) one can; construct a partial cdf c(x,y) that only when integrated itself; over z results in a maximum value of 1. To construct such a cdf pass; z as argument to the optional nset argument. RooAbsReal* createCdf(const RooArgSet& iset, const RooCmdArg arg1, const RooCmdArg arg2 = RooCmdArg::none(), const RooCmdArg arg3 = RooCmdArg::none(), const RooCmdArg arg4 = RooCmdArg::none(), const RooCmdArg arg5 = RooCmdArg::none(), const RooCmdArg arg6 = RooCmdArg::none(), const RooCmdArg arg7 = RooCmdArg::none(), const RooCmdArg arg8 = RooCmdArg",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsPdf.html:73839,integrat,integrated,73839,root/html526/RooAbsPdf.html,https://root.cern,https://root.cern/root/html526/RooAbsPdf.html,1,['integrat'],['integrated']
Deployability,"ts How many events to generate; 56 /// \param arg1,arg2,arg3,arg4,arg5 Optional command arguments.; 57 RooFit::OwningPtr<RooDataSet> generate(const RooArgSet &whatVars, Int_t nEvents, const RooCmdArg& arg1,; 58 const RooCmdArg& arg2={}, const RooCmdArg& arg3={},; 59 const RooCmdArg& arg4={}, const RooCmdArg& arg5={}) {; 60 return generate(whatVars,RooFit::NumEvents(nEvents),arg1,arg2,arg3,arg4,arg5) ;; 61 }; 62 RooFit::OwningPtr<RooDataSet> generate(const RooArgSet &whatVars,; 63 const RooCmdArg& arg1={},const RooCmdArg& arg2={},; 64 const RooCmdArg& arg3={},const RooCmdArg& arg4={},; 65 const RooCmdArg& arg5={},const RooCmdArg& arg6={}) ;; 66 RooFit::OwningPtr<RooDataSet> generate(const RooArgSet &whatVars, double nEvents = 0, bool verbose=false, bool autoBinned=true,; 67 const char* binnedTag="""", bool expectedData=false, bool extended = false) const;; 68 RooFit::OwningPtr<RooDataSet> generate(const RooArgSet &whatVars, const RooDataSet &prototype, Int_t nEvents= 0,; 69 bool verbose=false, bool randProtoOrder=false, bool resampleProto=false) const;; 70 ; 71 ; 72 class GenSpec {; 73 public:; 74 virtual ~GenSpec() ;; 75 GenSpec() = default;; 76 ; 77 private:; 78 GenSpec(RooAbsGenContext* context, const RooArgSet& whatVars, RooDataSet* protoData, Int_t nGen, bool extended,; 79 bool randProto, bool resampleProto, TString dsetName, bool init=false) ;; 80 GenSpec(const GenSpec& other) ;; 81 ; 82 friend class RooAbsPdf ;; 83 std::unique_ptr<RooAbsGenContext> _genContext;; 84 RooArgSet _whatVars ;; 85 RooDataSet* _protoData = nullptr;; 86 Int_t _nGen = 0;; 87 bool _extended = false;; 88 bool _randProto = false;; 89 bool _resampleProto = false;; 90 TString _dsetName ;; 91 bool _init = false;; 92 ; 93 ClassDef(GenSpec,0) // Generation specification; 94 } ;; 95 ; 96 ///Prepare GenSpec configuration object for efficient generation of multiple datasets from identical specification.; 97 GenSpec* prepareMultiGen(const RooArgSet &whatVars,; 98 const RooCmdArg& arg1={},const RooCmd",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsPdf_8h_source.html:4015,configurat,configuration,4015,doc/master/RooAbsPdf_8h_source.html,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8h_source.html,1,['configurat'],['configuration']
Deployability,"ts RooAddPdf to freeze the; interpretation of the coefficients to be done in the given set of; observables. If frozen, fractions are automatically transformed; from the reference normalization set to the contextual normalization; set by ratios of integrals. void fixCoefRange(const char* rangeName); By default the interpretation of the fraction coefficients is; performed in the default range. This make the shape of a RooAddPdf; explicitly dependent on the range of the observables. To allow; a range independent definition of the fraction this function; instructs RooAddPdf to freeze its interpretation in the given; named range. If the current normalization range is different; from the reference range, the appropriate fraction coefficients; are automically calculation from the reference fractions using; ratios if integrals. void updateCoefficients(RooAddPdf::CacheElem& cache, const RooArgSet* nset) const; Update the coefficient values in the given cache element: calculate new remainder; fraction, normalize fractions obtained from extended ML terms to unity and; multiply these the various range and dimensional corrections needed in the; current use context. Double_t evaluate() const; Calculate and return the current value. void resetErrorCounters(Int_t resetValue = 10); Reset error counter to given value, limiting the number; of future error messages for this pdf to 'resetValue'. Bool_t checkObservables(const RooArgSet* nset) const; Check if PDF is valid for given normalization set.; Coeffient and PDF must be non-overlapping, but pdf-coefficient; pairs may overlap each other. Int_t getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& numVars, const RooArgSet* normSet, const char* rangeName = 0) const; Determine which part (if any) of given integral can be performed analytically.; If any analytical integration is possible, return integration scenario code. RooAddPdf queries each component PDF for its analytical integration capability of the requested; set ('allVars'). It",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAddPdf.html:44174,update,updateCoefficients,44174,root/html526/RooAddPdf.html,https://root.cern,https://root.cern/root/html526/RooAddPdf.html,7,['update'],['updateCoefficients']
Deployability,"ts fix a parameter or put limits on it before minimization, he has to instantiate a MnUserParameters object and then add parameters one by one, giving them a name, value, uncertainty. Once all parameters are added to MnUserParameters, he can fix a parameter or put limits on another one before handing them over to Minit for minimization.; 4.3.2 What the user can supply; Optionally the user can supply his own gradient calculator by implementing the FCNGradientBase interface or supply a full covariance matrix for input if one is available. The covariance matrix can be supplied in form of a std::vector\(<\)double\(>\) in packed storage format (upper triangular), or in a more user-friendly way by using the interface provided by the MnUserCovariance.; 4.4 Running a M minimization; Two use cases are addressed for minimization:. The user just wants the function to be minimized in one go.; The user wants to minimize the \(\mbox{FCN}\) in several minimization steps, re-using the result of the preceeding minimization in the next step and change parameters in between (fix/release/put limits on them, etc.). How M minimizations can be performed is shown in [example:main].; 4.4.1 Direct usage of minimizers; Minimizers such as the VariableMetricMinimizer are designed as state-less minimization engines, which means that they do not depend on the current function and its parameters. Any \(\mbox{FCN}\) function can be minimized with the same minimizer. The interface is restricted to minimization and no parameter interaction is possible.; 4.4.2 Using an application (MnMigrad); MnMigrad uses the VariableMetricMinimizer for minimization but allows as well for parameter interaction by the user. An instance of MnMigrad is specific to the current \(\mbox{FCN}\) and user parameters. Any parameter interaction of the user between two minimization steps will make use of the result of the preceeding minimization in an optimal way. The interface for parameters (see [api:parameters], [api:covarianc",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/guides/minuit2/Minuit2.html:39008,release,release,39008,root/html534/guides/minuit2/Minuit2.html,https://root.cern,https://root.cern/root/html534/guides/minuit2/Minuit2.html,1,['release'],['release']
Deployability,"ts number of segments used for CSG export. ; Definition at line 61 of file TEveGeoNode.cxx. ◆ SetMainColor(). void TEveGeoNode::SetMainColor ; (; Color_t ; color). overridevirtual . Set color, propagate to volume's line color. ; Reimplemented from TEveElement.; Definition at line 185 of file TEveGeoNode.cxx. ◆ SetMainTransparency(). void TEveGeoNode::SetMainTransparency ; (; Char_t ; t). overridevirtual . Set transparency, propagate to volume's transparency. ; Reimplemented from TEveElement.; Definition at line 210 of file TEveGeoNode.cxx. ◆ Streamer(). void TEveGeoNode::Streamer ; (; TBuffer & ; ). overridevirtual . Reimplemented from TEveElement.; Reimplemented in TEveGeoTopNode. ◆ StreamerNVirtual(). void TEveGeoNode::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 84 of file TEveGeoNode.h. ◆ UpdateNode(). void TEveGeoNode::UpdateNode ; (; TGeoNode * ; node). Updates all reve-browsers having the node in their contents. ; All 3D-pads updated if any change found.; Should (could?) be optimized with some assumptions about volume/node structure (search for parent, know the same node can not reoccur on lower level once found). ; Definition at line 224 of file TEveGeoNode.cxx. ◆ UpdateVolume(). void TEveGeoNode::UpdateVolume ; (; TGeoVolume * ; volume). Updates all reve-browsers having the volume in their contents. ; All 3D-pads updated if any change found.; Should (could?) be optimized with some assumptions about volume/node structure (search for parent, know the same node can not reoccur on lower level once found). ; Definition at line 246 of file TEveGeoNode.cxx. ◆ WriteExtract(). void TEveGeoNode::WriteExtract ; (; const char * ; name, . Bool_t ; leafs_only . ). Write the shape tree as TEveGeoShapeExtract to current directory. ; Definition at line 302 of file TEveGeoNode.cxx. Friends And Related Symbol Documentation. ◆ TEveGeoNodeEditor. friend class TEveGeoNodeEditor. friend . Definition at line 31 of file TEveGeoNode.h. M",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveGeoNode.html:37808,update,updated,37808,doc/master/classTEveGeoNode.html,https://root.cern,https://root.cern/doc/master/classTEveGeoNode.html,1,['update'],['updated']
Deployability,"ts value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; intRooLegendre::_m1; intRooLegendre::_m2; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist. Pointer to global instance of string that matches object named; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<string,string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. double_n; RooRealProxy_phi; int_sgn1; int_sgn2. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooSpHarmonic(). RooSpHarmonic(const char* name, const char* title, RooAbsReal& ctheta, RooAbsReal&",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooSpHarmonic.html:37628,integrat,integrator,37628,root/html602/RooSpHarmonic.html,https://root.cern,https://root.cern/root/html602/RooSpHarmonic.html,4,"['configurat', 'integrat']","['configuration', 'integrator']"
Deployability,"ts value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist. Pointer to global instance of string that matches object named; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; RooCategoryProxyRooAbsHiddenReal::_stateProxy to hiding state category; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooUnblindCPAsymVar(); Default constructor. RooUnblindCPAsymVar(const char* name, const char* title, const char* bl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooUnblindCPAsymVar.html:35781,integrat,integrator,35781,root/html534/RooUnblindCPAsymVar.html,https://root.cern,https://root.cern/root/html534/RooUnblindCPAsymVar.html,2,"['configurat', 'integrat']","['configuration', 'integrator']"
Deployability,"ts,\mathbf{e}_P\) \(\mathbf{e}_0,\ldots,\mathbf{e}_{P-1}\) for its columns ; \[; \mathsf{T} = \left[; \begin{array}{cccc}; \mathbf{e}_0 &; \mathbf{e}_1 &; \vdots &; \mathbf{e}_{P-1}; \end{array}\right]; = \left[; \begin{array}{cccc}; \mathbf{e}_{0_0} & \mathbf{e}_{1_0} & \cdots & \mathbf{e}_{{P-1}_0}\\; \mathbf{e}_{0_1} & \mathbf{e}_{1_1} & \cdots & \mathbf{e}_{{P-1}_1}\\; \vdots & \vdots & \ddots & \vdots \\; \mathbf{e}_{0_{P-1}} & \mathbf{e}_{1_{P-1}} & \cdots & \mathbf{e}_{{P-1}_{P-1}}\\; \end{array}\right]; \]. This is an orthogonal transformation, or rotation, of the pattern space and feature selection results in ignoring certain coordinates in the transformed space.; Christian Holm August 2000, CERN ; Definition at line 21 of file TPrincipal.h. Public Member Functions;  TPrincipal ();  Empty constructor. Do not use. ;  ;  TPrincipal (Long64_t nVariables, Option_t *opt=""ND"");  Constructor. ;  ;  ~TPrincipal () override;  Destructor. ;  ; virtual void AddRow (const Double_t *x);  Add a data point and update the covariance matrix. ;  ; void Browse (TBrowser *b) override;  Browse the TPrincipal object in the TBrowser. ;  ; void Clear (Option_t *option="""") override;  Clear the data in Object. ;  ; const TMatrixD * GetCovarianceMatrix () const;  Return the covariance matrix. ;  ; const TVectorD * GetEigenValues () const;  ; const TMatrixD * GetEigenVectors () const;  ; TList * GetHistograms () const;  ; const TVectorD * GetMeanValues () const;  ; const Double_t * GetRow (Long64_t row);  Return a row of the user supplied data. ;  ; const TVectorD * GetSigmas () const;  ; const TVectorD * GetUserData () const;  ; TClass * IsA () const override;  ; Bool_t IsFolder () const override;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; virtual void MakeCode (const char *filename=""pca"", Option_t *option="""");  Generates the file <filename>, with .C appended if it does argument doesn't end in .cxx or .C. ;  ; virtual vo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPrincipal.html:8220,update,update,8220,doc/master/classTPrincipal.html,https://root.cern,https://root.cern/doc/master/classTPrincipal.html,1,['update'],['update']
Deployability,"ts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void registerIntegrator(RooNumIntFactory& fact); Register RooBinIntegrator, is parameters and capabilities with RooNumIntFactory. RooBinIntegrator(); Default constructor. RooBinIntegrator(const RooAbsFunc& function); Construct integrator on given function binding binding. RooBinIntegrator(const RooAbsFunc& function, const RooNumIntConfig& config); Construct integrator on given function binding binding. RooAbsIntegrator* clone(const RooAbsFunc& function, const RooNumIntConfig& config) const; Clone integrator with new function binding and configuration. Needed by RooNumIntFactory. ~RooBinIntegrator(); Destructor. Bool_t setLimits(Double_t* xmin, Double_t* xmax); Change our integration limits. Return kTRUE if the new limits are; ok, or otherwise kFALSE. Always returns kFALSE and does nothing; if this object was constructed to always use our integrand's limits. Bool_t checkLimits() const; Check that our integration range is finite and otherwise return kFALSE.; Update the limits from the integrand if requested. Double_t integral(const Double_t* yvec = 0); Calculate numeric integral at given set of function binding parameters. RooBinIntegrator(); Constructors, assignment etc. Bool_t setUseIntegrandLimits(Bool_t flag); {_useIntegrandLimits = flag ; return kTRUE ; }. Bool_t canIntegrate1D() const; { return kTRUE ; }. Bool_t canIntegrate2D() const; { return kTRUE ; }. Bool_t canIntegrateND() const; { return kTRUE ; }. Bool_t canIntegrateOpenEnded() const; { return kFALSE ; }. Double_t* xvec(Double_t& xx); { _x[0] = xx ; return _x ; }. Double_t* xvec(Double_t& xx, Double_t& yy); { _x[0] = xx ; _x[1] = yy ; return _x ; }. Double_t* xvec(Double_t& xx, Double_t& yy, Double_t& zz); { _x[0] = xx ; _x[1] = yy ; _x[2] = zz ; return _x ; }. » Last changed: Fri Dec 2 14:26:42 2011 » Last generated: 2011-12-02 14:26; This page has been automatically generated. For comments or suggestions regarding the docu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooBinIntegrator.html:7867,integrat,integration,7867,root/html532/RooBinIntegrator.html,https://root.cern,https://root.cern/root/html532/RooBinIntegrator.html,1,['integrat'],['integration']
Deployability,"ts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void registerIntegrator(RooNumIntFactory& fact); Register RooBinIntegrator, is parameters and capabilities with RooNumIntFactory. RooBinIntegrator(); Default constructor. RooBinIntegrator(const RooAbsFunc& function); Construct integrator on given function binding binding. RooBinIntegrator(const RooAbsFunc& function, const RooNumIntConfig& config); Construct integrator on given function binding binding. RooAbsIntegrator* clone(const RooAbsFunc& function, const RooNumIntConfig& config) const; Clone integrator with new function binding and configuration. Needed by RooNumIntFactory. ~RooBinIntegrator(); Destructor. Bool_t setLimits(Double_t* xmin, Double_t* xmax); Change our integration limits. Return kTRUE if the new limits are; ok, or otherwise kFALSE. Always returns kFALSE and does nothing; if this object was constructed to always use our integrand's limits. Bool_t checkLimits() const; Check that our integration range is finite and otherwise return kFALSE.; Update the limits from the integrand if requested. Double_t integral(const Double_t* yvec = 0); Calculate numeric integral at given set of function binding parameters. RooBinIntegrator(); Constructors, assignment etc. Bool_t setUseIntegrandLimits(Bool_t flag); {_useIntegrandLimits = flag ; return kTRUE ; }. Bool_t canIntegrate1D() const; { return kTRUE ; }. Bool_t canIntegrate2D() const; { return kTRUE ; }. Bool_t canIntegrateND() const; { return kTRUE ; }. Bool_t canIntegrateOpenEnded() const; { return kFALSE ; }. Double_t* xvec(Double_t& xx); { _x[0] = xx ; return _x ; }. Double_t* xvec(Double_t& xx, Double_t& yy); { _x[0] = xx ; _x[1] = yy ; return _x ; }. Double_t* xvec(Double_t& xx, Double_t& yy, Double_t& zz); { _x[0] = xx ; _x[1] = yy ; _x[2] = zz ; return _x ; }. » Last changed: Tue Jun 2 15:28:02 2015 » Last generated: 2015-06-02 15:28; This page has been automatically generated. For comments or suggestions regarding the docu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/RooBinIntegrator.html:8348,integrat,integration,8348,root/html604/RooBinIntegrator.html,https://root.cern,https://root.cern/root/html604/RooBinIntegrator.html,1,['integrat'],['integration']
Deployability,"ts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void registerIntegrator(RooNumIntFactory& fact); Register RooBinIntegrator, is parameters and capabilities with RooNumIntFactory. RooBinIntegrator(); Default constructor. RooBinIntegrator(const RooAbsFunc& function); Construct integrator on given function binding binding. RooBinIntegrator(const RooAbsFunc& function, const RooNumIntConfig& config); Construct integrator on given function binding binding. RooAbsIntegrator* clone(const RooAbsFunc& function, const RooNumIntConfig& config) const; Clone integrator with new function binding and configuration. Needed by RooNumIntFactory. ~RooBinIntegrator(); Destructor. Bool_t setLimits(Double_t* xmin, Double_t* xmax); Change our integration limits. Return kTRUE if the new limits are; ok, or otherwise kFALSE. Always returns kFALSE and does nothing; if this object was constructed to always use our integrand's limits. Bool_t checkLimits() const; Check that our integration range is finite and otherwise return kFALSE.; Update the limits from the integrand if requested. Double_t integral(const Double_t* yvec = 0); Calculate numeric integral at given set of function binding parameters. RooBinIntegrator(); Constructors, assignment etc. Bool_t setUseIntegrandLimits(Bool_t flag); {_useIntegrandLimits = flag ; return kTRUE ; }. Bool_t canIntegrate1D() const; { return kTRUE ; }. Bool_t canIntegrate2D() const; { return kTRUE ; }. Bool_t canIntegrateND() const; { return kTRUE ; }. Bool_t canIntegrateOpenEnded() const; { return kFALSE ; }. Double_t* xvec(Double_t& xx); { _x[0] = xx ; return _x ; }. Double_t* xvec(Double_t& xx, Double_t& yy); { _x[0] = xx ; _x[1] = yy ; return _x ; }. Double_t* xvec(Double_t& xx, Double_t& yy, Double_t& zz); { _x[0] = xx ; _x[1] = yy ; _x[2] = zz ; return _x ; }. » Last changed: Tue Jun 30 14:31:06 2015 » Last generated: 2015-06-30 14:31; This page has been automatically generated. For comments or suggestions regarding the doc",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooBinIntegrator.html:8348,integrat,integration,8348,root/html602/RooBinIntegrator.html,https://root.cern,https://root.cern/root/html602/RooBinIntegrator.html,1,['integrat'],['integration']
Deployability,"ts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void registerIntegrator(RooNumIntFactory& fact); Register RooBinIntegrator, is parameters and capabilities with RooNumIntFactory. RooBinIntegrator(); Default constructor. RooBinIntegrator(const RooAbsFunc& function); Construct integrator on given function binding binding. RooBinIntegrator(const RooAbsFunc& function, const RooNumIntConfig& config); Construct integrator on given function binding binding. RooAbsIntegrator* clone(const RooAbsFunc& function, const RooNumIntConfig& config) const; Clone integrator with new function binding and configuration. Needed by RooNumIntFactory. ~RooBinIntegrator(); Destructor. Bool_t setLimits(Double_t* xmin, Double_t* xmax); Change our integration limits. Return kTRUE if the new limits are; ok, or otherwise kFALSE. Always returns kFALSE and does nothing; if this object was constructed to always use our integrand's limits. Bool_t checkLimits() const; Check that our integration range is finite and otherwise return kFALSE.; Update the limits from the integrand if requested. Double_t integral(const Double_t* yvec = 0); Calculate numeric integral at given set of function binding parameters. RooBinIntegrator(); Constructors, assignment etc. Bool_t setUseIntegrandLimits(Bool_t flag); {_useIntegrandLimits = flag ; return kTRUE ; }. Bool_t canIntegrate1D() const; { return kTRUE ; }. Bool_t canIntegrate2D() const; { return kTRUE ; }. Bool_t canIntegrateND() const; { return kTRUE ; }. Bool_t canIntegrateOpenEnded() const; { return kFALSE ; }. Double_t* xvec(Double_t& xx); { _x[0] = xx ; return _x ; }. Double_t* xvec(Double_t& xx, Double_t& yy); { _x[0] = xx ; _x[1] = yy ; return _x ; }. Double_t* xvec(Double_t& xx, Double_t& yy, Double_t& zz); { _x[0] = xx ; _x[1] = yy ; _x[2] = zz ; return _x ; }. » Last changed: Tue Mar 10 17:14:37 2015 » Last generated: 2015-03-10 17:14; This page has been automatically generated. For comments or suggestions regarding the doc",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooBinIntegrator.html:7886,integrat,integration,7886,root/html534/RooBinIntegrator.html,https://root.cern,https://root.cern/root/html534/RooBinIntegrator.html,1,['integrat'],['integration']
Deployability,"ts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::HypoTestCalculator. class RooStats::HypoTestCalculator. HypoTestCalculator is an interface class for a tools which produce RooStats HypoTestResults. ; The interface currently assumes that any hypothesis test calculator can be configured by specifying:. a model for the null,; a model for the alternate,; a data set, ; a set of parameters of which specify the null (including values and const/non-const status), and ; a set of parameters of which specify the alternate (including values and const/non-const status). The interface allows one to pass the model, data, and parameters via a workspace and then specify them with names.; The interface will be extended so that one does not need to use a workspace. After configuring the calculator, one only needs to ask GetHypoTest, which will return a HypoTestResult pointer. The concrete implementations of this interface should deal with the details of how the nuisance parameters are; dealt with (eg. integration vs. profiling) and which test-statistic is used (perhaps this should be added to the interface). The motivation for this interface is that we hope to be able to specify the problem in a common way for several concrete calculators. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~HypoTestCalculator(); static TClass*Class(); virtual RooStats::HypoTestResult*GetHypoTest() const; RooStats::HypoTestCalculatorHypoTestCalculator(); RooStats::HypoTestCalculatorHypoTestCalculator(const RooStats::HypoTestCalculator&); virtual TClass*IsA() const; RooStats::HypoTestCalculator&operator=(const RooStats::HypoTestCalculator&); virtual voidSetAlternateModel(const RooStats::ModelConfig& model); virtual voidSetCommonModel(const RooStats::ModelConfig& model); virtual voidSetData(RooAbsData& data); virtual voidSetNullModel(const RooStats::ModelConfig& model); virtual voidShowM",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__HypoTestCalculator.html:1204,integrat,integration,1204,root/html602/RooStats__HypoTestCalculator.html,https://root.cern,https://root.cern/root/html602/RooStats__HypoTestCalculator.html,2,['integrat'],['integration']
Deployability,"ts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::HypoTestCalculator. class RooStats::HypoTestCalculator. HypoTestCalculator is an interface class for a tools which produce RooStats HypoTestResults. ; The interface currently assumes that any hypothesis test calculator can be configured by specifying:. a model for the null,; a model for the alternate,; a data set, ; a set of parameters of which specify the null (including values and const/non-const status), and ; a set of parameters of which specify the alternate (including values and const/non-const status). The interface allows one to pass the model, data, and parameters via a workspace and then specify them with names.; The interface will be extended so that one does not need to use a workspace. After configuring the calculator, one only needs to ask GetHypoTest, which will return a HypoTestResult pointer. The concrete implementations of this interface should deal with the details of how the nuisance parameters are; dealt with (eg. integration vs. profiling) and which test-statistic is used (perhaps this should be added to the interface). The motivation for this interface is that we hope to be able to specify the problem in a common way for several concrete calculators. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~HypoTestCalculator(); static TClass*Class(); virtual RooStats::HypoTestResult*GetHypoTest() const; virtual TClass*IsA() const; RooStats::HypoTestCalculator&operator=(const RooStats::HypoTestCalculator&); virtual voidSetAlternateModel(const RooStats::ModelConfig& model); virtual voidSetCommonModel(const RooStats::ModelConfig& model); virtual voidSetData(RooAbsData& data); virtual voidSetNullModel(const RooStats::ModelConfig& model); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Class Charts. Inheritance; Inherite",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__HypoTestCalculator.html:1202,integrat,integration,1202,root/html528/RooStats__HypoTestCalculator.html,https://root.cern,https://root.cern/root/html528/RooStats__HypoTestCalculator.html,3,['integrat'],['integration']
Deployability,"ts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::HypoTestCalculator. class RooStats::HypoTestCalculator. HypoTestCalculator is an interface class for a tools which produce RooStats HypoTestResults. ; The interface currently assumes that any hypothesis test calculator can be configured by specifying:. a model for the null,; a model for the alternate,; a data set, ; a set of parameters of which specify the null (including values and const/non-const status), and ; a set of parameters of which specify the alternate (including values and const/non-const status). The interface allows one to pass the model, data, and parameters via a workspace and then specify them with names.; The interface will be extended so that one does not need to use a workspace. After configuring the calculator, one only needs to ask GetHypoTest, which will return a HypoTestResult pointer. The concrete implementations of this interface should deal with the details of how the nuisance parameters are; dealt with (eg. integration vs. profiling) and which test-statistic is used (perhaps this should be added to the interface). The motivation for this interface is that we hope to be able to specify the problem in a common way for several concrete calculators. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~HypoTestCalculator(); static TClass*Class(); virtual RooStats::HypoTestResult*GetHypoTest() const; virtual TClass*IsA() const; RooStats::HypoTestCalculator&operator=(const RooStats::HypoTestCalculator&); virtual voidSetAlternateModel(const RooStats::ModelConfig& model); virtual voidSetCommonModel(const RooStats::ModelConfig& model); virtual voidSetData(RooAbsData& data); virtual voidSetNullModel(const RooStats::ModelConfig& model); virtual voidShowMembers(TMemberInspector& insp, char* parent); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Class Charts. Inherit",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__HypoTestCalculator.html:1202,integrat,integration,1202,root/html526/RooStats__HypoTestCalculator.html,https://root.cern,https://root.cern/root/html526/RooStats__HypoTestCalculator.html,1,['integrat'],['integration']
Deployability,"ts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::HypoTestCalculator. class RooStats::HypoTestCalculator. HypoTestCalculator is an interface class for a tools which produce RooStats HypoTestResults. ; The interface currently assumes that any hypothesis test calculator can be configured by specifying:. a model for the null,; a model for the alternate,; a data set, ; a set of parameters of which specify the null (including values and const/non-const status), and ; a set of parameters of which specify the alternate (including values and const/non-const status). The interface allows one to pass the model, data, and parameters via a workspace and then specify them with names.; The interface will be extended so that one does not need to use a workspace. After configuring the calculator, one only needs to ask GetHypoTest, which will return a HypoTestResult pointer. The concrete implementations of this interface should deal with the details of how the nuisance parameters are; dealt with (eg. integration vs. profiling) and which test-statistic is used (perhaps this should be added to the interface). The motivation for this interface is that we hope to be able to specify the problem in a common way for several concrete calculators. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~HypoTestCalculator(); static TClass*Class(); virtual RooStats::HypoTestResult*GetHypoTest() const; virtual TClass*IsA() const; RooStats::HypoTestCalculator&operator=(const RooStats::HypoTestCalculator&); virtual voidSetAlternateModel(const RooStats::ModelConfig& model); virtual voidSetCommonModel(const RooStats::ModelConfig& model); virtual voidSetData(RooAbsData& data); virtual voidSetNullModel(const RooStats::ModelConfig& model); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Class Charts. In",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__HypoTestCalculator.html:1204,integrat,integration,1204,root/html534/RooStats__HypoTestCalculator.html,https://root.cern,https://root.cern/root/html534/RooStats__HypoTestCalculator.html,1,['integrat'],['integration']
Deployability,"ts::ToyMCStudy.; Definition at line 45 of file RooAbsStudy.h. ◆ finalize(). virtual bool RooAbsStudy::finalize ; (; void ; ). inlinevirtual . Reimplemented in RooGenFitStudy, and RooStats::ToyMCStudy.; Definition at line 46 of file RooAbsStudy.h. ◆ initialize(). virtual bool RooAbsStudy::initialize ; (; void ; ). inlinevirtual . Reimplemented in RooGenFitStudy, and RooStats::ToyMCStudy.; Definition at line 44 of file RooAbsStudy.h. ◆ IsA(). TClass * RooAbsStudy::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Reimplemented in RooGenFitStudy, and RooStats::ToyMCStudy.; Definition at line 72 of file RooAbsStudy.h. ◆ registerSummaryOutput(). void RooAbsStudy::registerSummaryOutput ; (; const RooArgSet & ; allVars, . const RooArgSet & ; varsWithError = RooArgSet(), . const RooArgSet & ; varsWithAsymError = RooArgSet() . ). protected . Definition at line 71 of file RooAbsStudy.cxx. ◆ releaseDetailData(). void RooAbsStudy::releaseDetailData ; (; ). inline . Definition at line 52 of file RooAbsStudy.h. ◆ storeDetailedOutput() [1/2]. void RooAbsStudy::storeDetailedOutput ; (; bool ; flag). inline . Definition at line 47 of file RooAbsStudy.h. ◆ storeDetailedOutput() [2/2]. void RooAbsStudy::storeDetailedOutput ; (; std::unique_ptr< TNamed > ; object). protected . Definition at line 99 of file RooAbsStudy.cxx. ◆ storeSummaryOutput(). void RooAbsStudy::storeSummaryOutput ; (; const RooArgSet & ; vars). protected . Definition at line 86 of file RooAbsStudy.cxx. ◆ Streamer(). void RooAbsStudy::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject.; Reimplemented in RooGenFitStudy, and RooStats::ToyMCStudy. ◆ StreamerNVirtual(). void RooAbsStudy::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 72 of file RooAbsStudy.h. ◆ summaryData(). RooDataSet * RooAbsStudy::summaryData ; (; ). inline . Definition at line 49",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsStudy.html:16149,release,releaseDetailData,16149,doc/master/classRooAbsStudy.html,https://root.cern,https://root.cern/doc/master/classRooAbsStudy.html,1,['release'],['releaseDetailData']
Deployability,"tsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TAttTextEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor of text attributes GUI. ~TAttTextEditor(); Destructor of text editor. void ConnectSignals2Slots(); Connect signals to slots. void SetModel(TObject* obj); Pick up the values of used text attributes. void DoTextColor(Pixel_t color); Slot connected to the marker color. void DoTextAlphaColor(ULong_t p); Slot connected to the color with alpha. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Process message. TGComboBox* BuildFontSizeComboBox(TGFrame* parent, Int_t id); Create text size combo box. TGComboBox* BuildTextAlignComboBox(TGFrame* parent, Int_t id); Create text align combo box. void DoAlphaField(); Slot to set the alpha value from the entry field. void DoAlpha(); Slot to set the alpha value. void DoLiveAlpha(Int_t a); Slot to set alpha value online. void GetCurAlpha(); Slot to update alpha value on click on Slider. TAttTextEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()). » Author: Ilka Antcheva 11/05/04 » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: root/ged:$Id$ » Last generated: 2015-06-02 15:38; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TAttTextEditor.html:22254,update,update,22254,root/html604/TAttTextEditor.html,https://root.cern,https://root.cern/root/html604/TAttTextEditor.html,1,['update'],['update']
Deployability,"tsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TAttTextEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor of text attributes GUI. ~TAttTextEditor(); Destructor of text editor. void ConnectSignals2Slots(); Connect signals to slots. void SetModel(TObject* obj); Pick up the values of used text attributes. void DoTextColor(Pixel_t color); Slot connected to the marker color. void DoTextAlphaColor(ULong_t p); Slot connected to the color with alpha. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Process message. TGComboBox* BuildFontSizeComboBox(TGFrame* parent, Int_t id); Create text size combo box. TGComboBox* BuildTextAlignComboBox(TGFrame* parent, Int_t id); Create text align combo box. void DoAlphaField(); Slot to set the alpha value from the entry field. void DoAlpha(); Slot to set the alpha value. void DoLiveAlpha(Int_t a); Slot to set alpha value online. void GetCurAlpha(); Slot to update alpha value on click on Slider. TAttTextEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()). » Author: Ilka Antcheva 11/05/04 » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: root/ged:$Id$ » Last generated: 2015-06-30 14:39; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TAttTextEditor.html:22254,update,update,22254,root/html602/TAttTextEditor.html,https://root.cern,https://root.cern/root/html602/TAttTextEditor.html,1,['update'],['update']
Deployability,"ttachToVStore (RooVectorDataStore &vstore) override;  ; void copyCache (const RooAbsArg *source, bool valueOnly=false, bool setValDirty=true) override;  Copy the cached value of another RooAbsArg to our cache. ;  ; RooFit::OwningPtr< RooAbsReal > createIntObj (const RooArgSet &iset, const RooArgSet *nset, const RooNumIntConfig *cfg, const char *rangeName) const;  Internal utility function for createIntegral() that creates the actual integral object. ;  ; void fillTreeBranch (TTree &t) override;  Fill the tree branch that associated with this object with its current value. ;  ; void findInnerMostIntegration (const RooArgSet &allObs, RooArgSet &innerObs, const char *rangeName) const;  Utility function for createIntObj() that aids in the construct of recursive integrals over functions with multiple observables with parameterized ranges. ;  ; TString integralNameSuffix (const RooArgSet &iset, const RooArgSet *nset=nullptr, const char *rangeName=nullptr, bool omitEmpty=false) const;  Construct string with unique suffix name to give to integral object that encodes integrated observables, normalization observables and the integration range name. ;  ; bool isValid () const override;  Check if current value is valid. ;  ; virtual bool isValidReal (double, bool printError=false) const;  Interface function to check if given value is a valid value for this object. Returns true unless overridden. ;  ; void makeProjectionSet (const RooAbsArg *plotVar, const RooArgSet *allVars, RooArgSet &projectedVars, bool silent) const;  Utility function for plotOn() that constructs the set of observables to project when plotting ourselves as function of 'plotVar'. ;  ; bool matchArgs (const RooArgSet &allDeps, RooArgSet &numDeps, const RooArgProxy &a) const;  Utility function for use in getAnalyticalIntegral(). ;  ; bool matchArgs (const RooArgSet &allDeps, RooArgSet &numDeps, const RooArgProxy &a, const RooArgProxy &b) const;  Utility function for use in getAnalyticalIntegral(). ;  ; bool matc",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBMixDecay.html:70929,integrat,integrated,70929,doc/master/classRooBMixDecay.html,https://root.cern,https://root.cern/doc/master/classRooBMixDecay.html,258,['integrat'],"['integrated', 'integration']"
Deployability,"ttachToVStore (RooVectorDataStore &vstore) override;  ; void copyCache (const RooAbsArg *source, bool valueOnly=false, bool setValDirty=true) override;  Copy the cached value of another RooAbsArg to our cache. ;  ; RooFit::OwningPtr< RooAbsReal > createIntObj (const RooArgSet &iset, const RooArgSet *nset, const RooNumIntConfig *cfg, const char *rangeName) const;  Internal utility function for createIntegral() that creates the actual integral object. ;  ; void fillTreeBranch (TTree &t) override;  Fill the tree branch that associated with this object with its current value. ;  ; void findInnerMostIntegration (const RooArgSet &allObs, RooArgSet &innerObs, const char *rangeName) const;  Utility function for createIntObj() that aids in the construct of recursive integrals over functions with multiple observables with parameterized ranges. ;  ; TString integralNameSuffix (const RooArgSet &iset, const RooArgSet *nset=nullptr, const char *rangeName=nullptr, bool omitEmpty=false) const;  Construct string with unique suffix name to give to integral object that encodes integrated observables, normalization observables and the integration range name. ;  ; bool isValid () const override;  Check if current value is valid. ;  ; void makeProjectionSet (const RooAbsArg *plotVar, const RooArgSet *allVars, RooArgSet &projectedVars, bool silent) const;  Utility function for plotOn() that constructs the set of observables to project when plotting ourselves as function of 'plotVar'. ;  ; bool matchArgs (const RooArgSet &allDeps, RooArgSet &numDeps, const RooArgProxy &a) const;  Utility function for use in getAnalyticalIntegral(). ;  ; bool matchArgs (const RooArgSet &allDeps, RooArgSet &numDeps, const RooArgProxy &a, const RooArgProxy &b) const;  Utility function for use in getAnalyticalIntegral(). ;  ; bool matchArgs (const RooArgSet &allDeps, RooArgSet &numDeps, const RooArgProxy &a, const RooArgProxy &b, const RooArgProxy &c) const;  Utility function for use in getAnalyticalIntegral().",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFormulaVar.html:51740,integrat,integrated,51740,doc/master/classRooFormulaVar.html,https://root.cern,https://root.cern/doc/master/classRooFormulaVar.html,4,['integrat'],"['integrated', 'integration']"
Deployability,"ttachToVStore (RooVectorDataStore &vstore) override;  ; void copyCache (const RooAbsArg *source, bool valueOnly=false, bool setValDirty=true) override;  Copy the cached value of another RooAbsArg to our cache. ;  ; RooFit::OwningPtr< RooAbsReal > createIntObj (const RooArgSet &iset, const RooArgSet *nset, const RooNumIntConfig *cfg, const char *rangeName) const;  Internal utility function for createIntegral() that creates the actual integral object. ;  ; void fillTreeBranch (TTree &t) override;  Fill the tree branch that associated with this object with its current value. ;  ; void findInnerMostIntegration (const RooArgSet &allObs, RooArgSet &innerObs, const char *rangeName) const;  Utility function for createIntObj() that aids in the construct of recursive integrals over functions with multiple observables with parameterized ranges. ;  ; TString integralNameSuffix (const RooArgSet &iset, const RooArgSet *nset=nullptr, const char *rangeName=nullptr, bool omitEmpty=false) const;  Construct string with unique suffix name to give to integral object that encodes integrated observables, normalization observables and the integration range name. ;  ; void makeProjectionSet (const RooAbsArg *plotVar, const RooArgSet *allVars, RooArgSet &projectedVars, bool silent) const;  Utility function for plotOn() that constructs the set of observables to project when plotting ourselves as function of 'plotVar'. ;  ; bool matchArgs (const RooArgSet &allDeps, RooArgSet &numDeps, const RooArgProxy &a) const;  Utility function for use in getAnalyticalIntegral(). ;  ; bool matchArgs (const RooArgSet &allDeps, RooArgSet &numDeps, const RooArgProxy &a, const RooArgProxy &b) const;  Utility function for use in getAnalyticalIntegral(). ;  ; bool matchArgs (const RooArgSet &allDeps, RooArgSet &numDeps, const RooArgProxy &a, const RooArgProxy &b, const RooArgProxy &c) const;  Utility function for use in getAnalyticalIntegral(). ;  ; bool matchArgs (const RooArgSet &allDeps, RooArgSet &numDeps, con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooRealIntegral.html:51910,integrat,integrated,51910,doc/master/classRooRealIntegral.html,https://root.cern,https://root.cern/doc/master/classRooRealIntegral.html,2,['integrat'],"['integrated', 'integration']"
Deployability,"tte GUI interface has also been added to enable setting digits threshold and value to color mapping. REveBoxSet screenshot with cone shape type. The set is using value to color map with overflow and underflow mark. The single REveBoxet object has a secondary selection enabled, where one can set a custom tooltip on mouse hover of an individual instance. Update version of RenderCore to fix tone mapping of transparent objects. PROOF Libraries; By default, PROOF is not configured and built any more. It will be deprecated in the future given that its functionality is now provided by the superior RDataFrame and its distributed version, DistRDF.; PyROOT; PyROOT was rebased on the latest version of the cppyy library. This means PyROOT benefits from many upstream improvements and fixes, for example related to the conversion of NumPy arrays to vectors, implicit conversion from nested Python tuples to nested initializer lists, and improved overload resolution.; Related to this cppyy upgrade, there are some changes in PyROOT behavior.; Different representation of std::string; Calling repr() on a cppyy.gbl.std.string object now comes with a “b” prefix, i.e. a bytes object is returned instead of a Python string. This is an intentional change for better unicode support.; See: https://github.com/root-project/root/issues/15153#issuecomment-2040504962; No more implicit conversion of static size char buffer to Python strings; A static size character buffer of type char[n] is not converted to a Python string anymore. The reason for this: since it was previously assumed the string was null-terminated, there was no way to get the bytes after a null, even if you wanted to.; import ROOT. ROOT.gInterpreter.Declare(""""""; struct Struct { char char_buffer[5] {}; }; // struct with char[n]; void fill_char_buffer(Struct & st) {; std::string foo{""foo""};; std::memcpy(st.char_buffer, foo.data(), foo.size());; }; """"""). struct = ROOT.Struct(); ROOT.fill_char_buffer(struct); char_buffer = struct.char_buf",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/release-notes.html:19731,upgrade,upgrade,19731,doc/v632/release-notes.html,https://root.cern,https://root.cern/doc/v632/release-notes.html,1,['upgrade'],['upgrade']
Deployability,tte is repeated up to 4 times. ; This is called by one of the ramp radio buttons. Protected method. ; Definition at line 814 of file TASPaletteEditor.cxx. ◆ SetStep(). void TASPaletteEditor::SetStep ; (; ). protected . Create a step palette. ; This is called by the step - check button. Protected method. ; Definition at line 763 of file TASPaletteEditor.cxx. ◆ Streamer(). void TASPaletteEditor::Streamer ; (; TBuffer & ; ). overridevirtual . Reimplemented from TPaletteEditor. ◆ StreamerNVirtual(). void TASPaletteEditor::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 108 of file TASPaletteEditor.h. ◆ UpdateRange(). void TASPaletteEditor::UpdateRange ; (; ). Updates the range of the palette. ; This is called after the blue limit lines were moved to define a new range. ; Definition at line 857 of file TASPaletteEditor.cxx. ◆ UpdateScreen(). void TASPaletteEditor::UpdateScreen ; (; Bool_t ; histoUpdate). protected . All widgets of the screen are updated with the current palette. ; Protected method. ; Definition at line 515 of file TASPaletteEditor.cxx. Member Data Documentation. ◆ fAutoUpdate. TGCheckButton* TASPaletteEditor::fAutoUpdate. protected . Definition at line 77 of file TASPaletteEditor.h. ◆ fComboBox. TGComboBox* TASPaletteEditor::fComboBox. protected . Definition at line 82 of file TASPaletteEditor.h. ◆ fHistCanvas. TRootEmbeddedCanvas* TASPaletteEditor::fHistCanvas. protected . canvas to draw the histogram ; Definition at line 67 of file TASPaletteEditor.h. ◆ fHisto. TH1D* TASPaletteEditor::fHisto. protected . histogram of image pixels ; Definition at line 65 of file TASPaletteEditor.h. ◆ fImagePad. TVirtualPad* TASPaletteEditor::fImagePad. protected . Definition at line 70 of file TASPaletteEditor.h. ◆ fLimitLine. LimitLine* TASPaletteEditor::fLimitLine[2]. protected . Definition at line 72 of file TASPaletteEditor.h. ◆ fMaxValue. Double_t TASPaletteEditor::fMaxValue. protected . max value of image ; Definition at,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTASPaletteEditor.html:42498,update,updated,42498,doc/master/classTASPaletteEditor.html,https://root.cern,https://root.cern/doc/master/classTASPaletteEditor.html,1,['update'],['updated']
Deployability,"tterntraining pattern ; testPatterntest pattern ; minimizeruse this minimizer for training (e.g. SGD) ; settingssettings used for this training run. Parameters. weightsthe container with the weights (synapses) ; trainPatternthe pattern for the training ; testPatternthe pattern for the testing ; minimizerthe minimizer (e.g. steepest gradient descent) to be used ; settingsthe settings for the training (e.g. multithreading or not, regularization etc.) . Definition at line 712 of file NeuralNet.icc. ◆ trainCycle(). template<typename Iterator , typename Minimizer > . double TMVA::DNN::Net::trainCycle ; (; Minimizer & ; minimizer, . std::vector< double > & ; weights, . Iterator ; itPatternBegin, . Iterator ; itPatternEnd, . Settings & ; settings, . DropContainer & ; dropContainer . ). inline . executes one training cycle ; execute a single training cycle; Parameters. minimizerthe minimizer to be used ; weightsthe weight vector to be used ; itPatternBeginthe pattern to be trained with ; itPatternEndthe pattern to be trained with ; settingsthe settings for the training ; dropContainerthe configuration for DNN drop-out. uses multithreading if turned on; Parameters. minimizerthe minimizer to be used (e.g. SGD) ; weightsthe weight container with all the synapse weights ; itPatternBeginbegin of the pattern container ; itPatternEndthe end of the pattern container ; settingsthe settings for this training (e.g. multithreading or not, regularization, etc.) ; dropContainerthe data for dropping-out nodes (regularization technique) . Definition at line 939 of file NeuralNet.icc. Member Data Documentation. ◆ fExitFromTraining. bool* TMVA::DNN::Net::fExitFromTraining = nullptr. protected . Definition at line 1277 of file NeuralNet.h. ◆ fInteractive. IPythonInteractive* TMVA::DNN::Net::fInteractive = nullptr. protected . Definition at line 1276 of file NeuralNet.h. ◆ fIPyCurrentIter. UInt_t * TMVA::DNN::Net::fIPyCurrentIter = nullptr. protected . Definition at line 1278 of file NeuralNet.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1Net.html:18178,configurat,configuration,18178,doc/master/classTMVA_1_1DNN_1_1Net.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1Net.html,1,['configurat'],['configuration']
Deployability,tton::fMouseOntrue when mouse on button; const TGWindow*TGWidget::fMsgWindowwindow which handles widget events; TStringTGWindow::fNamename of the window used in SavePrimitive(); Bool_tTGWindow::fNeedRedrawkTRUE if window needs to be redrawn; ULong_tTGDockButton::fNormBgnormal background color; GContext_tTGButton::fNormGCgraphics context used for drawing button; UInt_tTGFrame::fOptionsframe options; const TGWindow*TGWindow::fParentParent window; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; EButtonStateTGButton::fStatebutton state; Bool_tTGButton::fStayDowntrue if button has to stay down; UInt_tTGButton::fStylebutton style (modern or classic); UInt_tTGButton::fTHeightbutton height; UInt_tTGButton::fTWidthbutton width; TGToolTip*TGButton::fTiptool tip associated with button; void*TGButton::fUserDatapointer to user data structure; Int_tTGWidget::fWidgetFlagswidget status flags (OR of EWidgetStatus); Int_tTGWidget::fWidgetIdthe widget id (used for event processing); UInt_tTGFrame::fWidthframe width; Int_tTGFrame::fXframe x position; Int_tTGFrame::fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static const TGGC*TGButton::fgDefaultGC; static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGButton::fgHibckgndGC; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static Window_tTGButton::fgReleaseBtnthe last released button; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel.,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGDockHideButton.html:19895,release,released,19895,root/html530/TGDockHideButton.html,https://root.cern,https://root.cern/root/html530/TGDockHideButton.html,3,['release'],['released']
Deployability,"ttributes |; Private Member Functions |; List of all members ; ROOT::Math::GaussLegendreIntegrator Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Integration. ; User class for performing function integration. ; It will use the Gauss-Legendre Method for function integration in a given interval. This class is implemented from TF1::Integral(). ; Definition at line 37 of file GaussLegendreIntegrator.h. Public Member Functions;  GaussLegendreIntegrator (int num=10, double eps=1e-12);  Basic constructor of GaussLegendreIntegrator. ;  ;  ~GaussLegendreIntegrator () override;  Default Destructor. ;  ; int GetNumberPoints () const;  ; void GetWeightVectors (double *x, double *w) const;  Returns the arrays x and w containing the abscissa and weight of the Gauss-Legendre n-point quadrature formula. ;  ; int NEval () const override;  return number of function evaluations in calculating the integral This is equivalent to the number of points ;  ; ROOT::Math::IntegratorOneDimOptions Options () const override;  get the option used for the integration ;  ; void SetAbsTolerance (double) override;  This method is not implemented. ;  ; void SetNumberPoints (int num);  Set the number of points used in the calculation of the integral. ;  ; void SetOptions (const ROOT::Math::IntegratorOneDimOptions &opt) override;  set the options (should be re-implemented by derived classes -if more options than tolerance exist ;  ; void SetRelTolerance (double) override;  Set the desired relative Error. ;  ;  Public Member Functions inherited from ROOT::Math::GaussIntegrator;  GaussIntegrator (double absTol=-1, double relTol=-1);  Default Constructor. ;  ;  ~GaussIntegrator () override;  Destructor. ;  ; void AbsValue (bool flag);  Static function: set the fgAbsValue flag. ;  ; double Error () const override;  Return the estimate of the absolute Error of the last Integral calculation. ;  ; double Integral () override;  Returns Integral of function on an infinite inte",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GaussLegendreIntegrator.html:1280,integrat,integration,1280,doc/master/classROOT_1_1Math_1_1GaussLegendreIntegrator.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GaussLegendreIntegrator.html,1,['integrat'],['integration']
Deployability,"tual . Moves the window ""wid"" to the specified x and y coordinates. ; It does not change the window's size, raise the window, or change the mapping state of the window.; Parameters. [in]widwindow identifier ; [in]x,ycoordinates, which define the new position of the window relative to its parent. . Reimplemented from TVirtualX.; Definition at line 749 of file TGCocoa.mm. ◆ MoveWindow() [2/2]. void TGCocoa::MoveWindow ; (; Window_t ; id, . Int_t ; x, . Int_t ; y . ). overridevirtual . Moves the specified window to the specified x and y coordinates. ; It does not change the window's size, raise the window, or change the mapping state of the window.; Parameters. [in]idwindow identifier ; [in]x,ycoordinates, which define the new position of the window relative to its parent. . Reimplemented from TVirtualX.; Definition at line 1248 of file TGCocoa.mm. ◆ NeedRedraw(). Bool_t TGCocoa::NeedRedraw ; (; ULong_t ; tgwindow, . Bool_t ; force . ). overridevirtual . Notify the low level GUI layer ROOT requires ""tgwindow"" to be updated. ; Returns kTRUE if the notification was desirable and it was sent; At the moment only Qt4 layer needs that; One needs explicitly cast the first parameter to TGWindow to make it working in the implementation.; One needs to process the notification to confine all paint operations within ""expose"" / ""paint"" like low level event or equivalent ; Reimplemented from TVirtualX.; Definition at line 4182 of file TGCocoa.mm. ◆ NextEvent(). void TGCocoa::NextEvent ; (; Event_t & ; event). overridevirtual . The ""event"" is set to default event. ; This method however, should never be called. ; Reimplemented from TVirtualX.; Definition at line 3531 of file TGCocoa.mm. ◆ OpenDisplay(). Int_t TGCocoa::OpenDisplay ; (; const char * ; dpyName). overridevirtual . Opens connection to display server (if such a thing exist on the current platform). ; The encoding and interpretation of the display name.; On X11 this method returns on success the X display socket descriptor >0",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGCocoa.html:100488,update,updated,100488,doc/master/classTGCocoa.html,https://root.cern,https://root.cern/doc/master/classTGCocoa.html,1,['update'],['updated']
Deployability,"tual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidinitResultSet(Statement* stmt); voidTObject::MakeZombie(); voidProducePool(). private:. Bool_tIsValid(Int_t field). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. Int_tTSQLResult::fRowCountnumber of rows in result. private:. Connection*fConnconnection to Oracle ; Int_tfFieldCountnum of fields in resultset; vector<MetaData>*fFieldInfoinfo for each field in the row; stringfNameBufferbuffer for GetFieldName() argument; TList*fPoolarray of results, produced when number of rows are requested ; ResultSet*fResultquery result (rows); Int_tfResultType0 - nothing; 1 - Select; 2 - table metainfo, 3 - update counter; Statement*fStmtexecuted statement; UInt_tfUpdateCountfor dml query, mutual exclusive with above. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void initResultSet(Statement* stmt); Oracle query result. TOracleResult(Connection* conn, Statement* stmt). TOracleResult(Connection* conn, const char* tableName); This construction func is only used to get table metainfo. ~TOracleResult(); Cleanup Oracle query result. void Close(Option_t* opt = """"); Close query result. Bool_t IsValid(Int_t field); Check if result set is open and field index within range. Int_t GetFieldCount(); Get number of fields in result. const char * GetFieldName(Int_t field); Get name of specified field. TSQLRow * Next(); Get next query result row. The returned object must be; deleted by the user. Int_t GetRowCount() const. void Produc",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TOracleResult.html:5839,update,update,5839,root/html528/TOracleResult.html,https://root.cern,https://root.cern/root/html528/TOracleResult.html,1,['update'],['update']
Deployability,"tual ROOT::Math::IntegrationMultiDim::TypeROOT::Math::VirtualIntegratorMultiDim::Type() const. protected:. boolCheckFunction(); voidDoInitialize(). private:. ROOT::Math::GSLMCIntegratorGSLMCIntegrator(const ROOT::Math::GSLMCIntegrator&); ROOT::Math::GSLMCIntegrator&operator=(const ROOT::Math::GSLMCIntegrator&). Data Members; private:. doublefAbsTol; unsigned intfCalls; unsigned intfDim; doublefError; ROOT::Math::GSLMonteFunctionWrapper*fFunction; doublefRelTol; doublefResult; ROOT::Math::GSLRngWrapper*fRng; intfStatus; ROOT::Math::IntegrationMultiDim::TypefType; ROOT::Math::GSLMCIntegrationWorkspace*fWorkspace. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GSLMCIntegrator(MCIntegration::Type type = MCIntegration::kVEGAS, double absTol = 0, double relTol = 0, unsigned int calls = 0 ); constructors; /**; constructor of GSL MCIntegrator using all the default options; *; GSLMCIntegrator( );; constructor of GSL MCIntegrator. VEGAS MC is set as default integration type. @param type type of integration. The possible types are defined in the MCIntegration::Type enumeration; Default is VEGAS; @param absTol desired absolute Error; @param relTol desired relative Error; @param calls maximum number of function calls. NOTE: When the default values are used , the options are taken from teh static method of ROOT::Math::IntegratorMultiDimOptions. GSLMCIntegrator(const char* type, double absTol, double relTol, unsigned int calls); constructor of GSL MCIntegrator. VEGAS MC is set as default integration type. @param type type of integration using a char * (required by plug-in manager); @param absTol desired absolute Error; @param relTol desired relative Error; @param calls maximum number of function calls. virtual ~GSLMCIntegrator(). destructor. GSLMCIntegrator(const ROOT::Math::GSLMCIntegrator& ); disable copy ctrs. GSLMCIntegrator & operator=(const ROOT::Math::GSLMCIntegrator& ). void SetFunction(const ROOT::Math::IMultiGenFunction& f); tem",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__GSLMCIntegrator.html:3497,integrat,integration,3497,root/html528/ROOT__Math__GSLMCIntegrator.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__GSLMCIntegrator.html,4,['integrat'],['integration']
Deployability,"tual method for fill statistic. More...;  ; class  RHistStatContent;  Basic histogram statistics, keeping track of the bin content and the total number of calls to Fill(). More...;  ; class  RHistStatRuntime;  Interface implementing a pure virtual functions DoFill(), DoFillN(). More...;  ; class  RHistStatTotalSumOfSquaredWeights;  Keeps track of the histogram's total sum of squared weights. More...;  ; class  RHistStatTotalSumOfWeights;  Keeps track of the histogram's total sum of weights. More...;  ; class  RHistStatUncertainty;  Histogram statistics to keep track of the Poisson uncertainty per bin. More...;  ; class  RHistView;  A view on a histogram, selecting a range on a subset of dimensions. More...;  ; struct  RHistViewOutOfRange;  ; class  RIndirectDisplayItem;  Extract (reference) only basic attributes from drawable, but not drawable itself. More...;  ; class  RInvalidField;  Used in RFieldBase::Check() to record field creation failures. More...;  ; class  RLogChannel;  A log configuration for a channel, e.g. More...;  ; class  RLogDiagCount;  Keep track of emitted errors and warnings. More...;  ; class  RLogEntry;  A diagnostic that can be emitted by the RLogManager. More...;  ; class  RLogHandler;  Abstract RLogHandler base class. More...;  ; struct  RLogLocation;  A diagnostic location, part of an RLogEntry. More...;  ; class  RLogManager;  A RLogHandler that multiplexes diagnostics to different client RLogHandlers and keeps track of the sum of RLogDiagCounts for all channels. More...;  ; class  RLogScopedDiagCount;  Object to count the number of warnings and errors emitted by a section of code, after construction of this type. More...;  ; class  RLogScopedVerbosity;  Change the verbosity level (global or specific to the RLogChannel passed to the constructor) for the lifetime of this object. More...;  ; class  RMapField;  The generic field for a std::map<KeyType, ValueType> and std::unordered_map<KeyType, ValueType> More...;  ; class  RMenuItems;  List o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/namespaceROOT_1_1Experimental.html:15969,configurat,configuration,15969,doc/v632/namespaceROOT_1_1Experimental.html,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Experimental.html,1,['configurat'],['configuration']
Deployability,"tual void RooAbsReal::forceNumInt ; (; bool ; flag = true). inlinevirtual . Definition at line 169 of file RooAbsReal.h. ◆ functor(). RooFunctor * RooAbsReal::functor ; (; const RooArgList & ; obs, . const RooArgList & ; pars = RooArgList(), . const RooArgSet & ; nset = RooArgSet() . ); const. Return a RooFunctor object bound to this RooAbsReal with given definition of observables and parameters. ; Definition at line 3887 of file RooAbsReal.cxx. ◆ getAnalyticalIntegral(). Int_t RooAbsReal::getAnalyticalIntegral ; (; RooArgSet & ; allVars, . RooArgSet & ; analVars, . const char * ; rangeName = nullptr . ); const. virtual . Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ; 'integSet' is the set of dependents for which integration is requested. The function should copy the subset of dependents it can analytically integrate to anaIntSet and return a unique identification code for this integration configuration. If no integration can be performed, zero should be returned. ; Reimplemented in RooArgusBG, RooBernstein, RooBifurGauss, RooBreitWigner, RooCBShape, RooChebychev, RooChiSquarePdf, RooCrystalBall, RooDstD0BG, RooExponential, RooGamma, RooGaussian, RooGaussModel, RooGExpModel, RooJohnson, RooKeysPdf, RooLandau, RooLegacyExpPoly, RooLognormal, RooNDKeysPdf, RooNovosibirsk, RooParametricStepFunction, RooPoisson, RooPolynomial, RooPowerSum, RooUniform, RooConvCoefVar, RooEfficiency, RooHistFunc, RooHistPdf, RooMultiVarGaussian, RooPolyVar, RooTruthModel, RooLegendre, RooNonCentralChiSquare, RooSpHarmonic, RooAddition, RooBinSamplingPdf, RooWrapperPdf, and RooFixedProdPdf.; Definition at line 368 of file RooAbsReal.cxx. ◆ getAnalyticalIntegralWN(). Int_t RooAbsReal::getAnalyticalIntegralWN ; (; RooArgSet & ; allDeps, . RooArgSet & ; analDeps, . const RooArgSet * ; normSet, . const char * ; rangeName = nullptr . ); const. virtual . Variant of getAnalyticalIntegral that is also passed the normalization set that should be a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsReal.html:107842,integrat,integration,107842,doc/master/classRooAbsReal.html,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html,1,['integrat'],['integration']
Deployability,"tual void RooAbsReal::forceNumInt ; (; bool ; flag = true). inlinevirtual . Definition at line 169 of file RooAbsReal.h. ◆ functor(). RooFunctor * RooAbsReal::functor ; (; const RooArgList & ; obs, . const RooArgList & ; pars = RooArgList(), . const RooArgSet & ; nset = RooArgSet() . ); const. Return a RooFunctor object bound to this RooAbsReal with given definition of observables and parameters. ; Definition at line 3963 of file RooAbsReal.cxx. ◆ getAnalyticalIntegral(). Int_t RooAbsReal::getAnalyticalIntegral ; (; RooArgSet & ; allVars, . RooArgSet & ; analVars, . const char * ; rangeName = nullptr . ); const. virtual . Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ; 'integSet' is the set of dependents for which integration is requested. The function should copy the subset of dependents it can analytically integrate to anaIntSet and return a unique identification code for this integration configuration. If no integration can be performed, zero should be returned. ; Reimplemented in RooArgusBG, RooBernstein, RooBifurGauss, RooBreitWigner, RooCBShape, RooChebychev, RooChiSquarePdf, RooCrystalBall, RooDstD0BG, RooExponential, RooGamma, RooGaussian, RooGaussModel, RooGExpModel, RooJohnson, RooKeysPdf, RooLandau, RooLegacyExpPoly, RooLognormal, RooNDKeysPdf, RooNovosibirsk, RooParametricStepFunction, RooPoisson, RooPolynomial, RooPowerSum, RooUniform, RooConvCoefVar, RooEfficiency, RooHistFunc, RooHistPdf, RooMultiVarGaussian, RooPolyVar, RooTruthModel, RooLegendre, RooNonCentralChiSquare, RooSpHarmonic, RooAddition, RooBinSamplingPdf, RooWrapperPdf, and RooFixedProdPdf.; Definition at line 366 of file RooAbsReal.cxx. ◆ getAnalyticalIntegralWN(). Int_t RooAbsReal::getAnalyticalIntegralWN ; (; RooArgSet & ; allDeps, . RooArgSet & ; analDeps, . const RooArgSet * ; normSet, . const char * ; rangeName = nullptr . ); const. virtual . Variant of getAnalyticalIntegral that is also passed the normalization set that should be a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classRooAbsReal.html:109101,integrat,integration,109101,doc/v632/classRooAbsReal.html,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html,1,['integrat'],['integration']
Deployability,"ture integration in multi-dimensions using rectangular regions. More...;  ; class  ROOT::Math::BaseIntegratorOptions;  Base class for Numerical integration options common in 1D and multi-dimension This is an internal class and is not supposed to be instantiated by the user. More...;  ; class  ROOT::Math::GaussIntegrator;  User class for performing function integration. More...;  ; class  ROOT::Math::GaussLegendreIntegrator;  User class for performing function integration. More...;  ; class  ROOT::Math::GSLIntegrator;  Class for performing numerical integration of a function in one dimension. More...;  ; class  ROOT::Math::IntegratorMultiDim;  User class for performing multidimensional integration. More...;  ; class  ROOT::Math::IntegratorMultiDimOptions;  Numerical multi dimensional integration options. More...;  ; class  ROOT::Math::IntegratorOneDim;  User Class for performing numerical integration of a function in one dimension. More...;  ; class  ROOT::Math::IntegratorOneDimOptions;  Numerical one dimensional integration options. More...;  ; class  ROOT::Math::VirtualIntegrator;  Abstract class for all numerical integration methods (1D and multi-dim) Interface defining the common methods for the numerical integrator classes of one and multi dimensions The derived class VirtualIntegratorOneDim defines the methods for one-dimensional integration. More...;  ; class  ROOT::Math::VirtualIntegratorMultiDim;  Interface (abstract) class for multi numerical integration It must be implemented by the concrete Integrator classes like ROOT::Math::GSLMCIntegrator. More...;  ; class  ROOT::Math::VirtualIntegratorOneDim;  Interface (abstract) class for 1D numerical integration It must be implemented by the concrete Integrator classes like ROOT::Math::GSLIntegrator. More...;  . Enumerations; enum  ROOT::Math::Integration::GKRule { ;   ROOT::Math::Integration::kGAUSS15 = 1; , ROOT::Math::Integration::kGAUSS21 = 2; , ROOT::Math::Integration::kGAUSS31 = 3; , ROOT::Math::Integration:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__Integration.html:2151,integrat,integration,2151,doc/master/group__Integration.html,https://root.cern,https://root.cern/doc/master/group__Integration.html,1,['integrat'],['integration']
Deployability,"ture; };. protected:. set<std::string>RooAbsArg::_boolAttribBoolean attributes; set<std::string>RooAbsArg::_boolAttribTransient! Transient boolean attributes (not copied in ctor); UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches ; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; RooCategoryProxy_indexCatIndex category; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Int_tRooAbsPdf::_minDimNormValueCacheMinimum number of numerically integrated dimensions to activate normalization value caching; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist. Pointer to global in",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooSimultaneous.html:39659,integrat,integration,39659,root/html532/RooSimultaneous.html,https://root.cern,https://root.cern/root/html532/RooSimultaneous.html,2,['integrat'],"['integrated', 'integration']"
Deployability,"ture; };. protected:. static Int_tRooPrintable::_nameLength; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooClassFactory(); Default constructor. ~RooClassFactory(); Destructor. Bool_t makeAndCompilePdf(const char* name, const char* expression, const RooArgList& vars, const char* intExpression = 0). Bool_t makeAndCompileFunction(const char* name, const char* expression, const RooArgList& args, const char* intExpression = 0); Write, compile and load code for a RooAbsReal implementation with; class name 'name', taking all elements of 'vars' as constructor; arguments. The initial value expression is taken to be; 'expression' which can be any one-line C++ expression in terms of; variables that occur in 'vars'. You can add optional expressions; for analytical integrals to be advertised by your class in the; syntax; ""<intObsName>:<CPPAnaIntExpression>;<intObsName,intObsName>:<CPPAnaIntExpression>""; where <intObsName> a name of the observable integrated over and; <CPPAnaIntExpression> is the C++ expression that calculates that; integral. RooAbsReal* makeFunctionInstance(const char* name, const char* expression, const RooArgList& vars, const char* intExpression = 0); Write, compile and load code and instantiate object for a; RooAbsReal implementation with class name 'name', taking all; elements of 'vars' as constructor arguments. The initial value; expression is taken to be 'expression' which can be any one-line; C++ expression in terms of variables that occur in 'vars'. The returned object is an instance of the object you just defined; connected to the variables listed in 'vars'. The name of the; object is 'name', its class name Roo<name>Class. This function is an effective compiled replacement of RooFormulaVar. You can add optional expressions for analytical integrals to be; advertised by your class in the syntax; ""<intObsName>:<CPPAnaIntExpression>;<intO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooClassFactory.html:9391,integrat,integrated,9391,root/html526/RooClassFactory.html,https://root.cern,https://root.cern/root/html526/RooClassFactory.html,5,['integrat'],['integrated']
Deployability,"turn current value, normalized by integrating over the observables in nset. ;  ; virtual void initGenerator (Int_t code);  Interface for one-time initialization to setup the generator for the specified code. ;  ; virtual bool isDirectGenSafe (const RooAbsArg &arg) const;  Check if given observable can be safely generated using the pdfs internal generator mechanism (if that existsP). ;  ; bool mustBeExtended () const;  If true PDF must provide extended likelihood term. ;  ; const char * normRange () const;  ; virtual RooPlot * paramOn (RooPlot *frame, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={});  Add a box with parameter values (and errors) to the specified frame. ;  ; GenSpec * prepareMultiGen (const RooArgSet &whatVars, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={});  Prepare GenSpec configuration object for efficient generation of multiple datasets from identical specification. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Print multi line detailed information of this RooAbsPdf. ;  ; void printValue (std::ostream &os) const override;  Print value of p.d.f, also print normalization integral that was last used, if any. ;  ; virtual void resetErrorCounters (Int_t resetValue=10);  Reset error counter to given value, limiting the number of future error messages for this pdf to 'resetValue'. ;  ; void setGeneratorConfig ();  Remove the specialized numeric MC generator configuration associated with this object. ;  ; void setGeneratorConfig (const RooNumGenConfig &config);  Set the given configuration as default numeric MC generator configuration for this object. ;  ; void setNormRange (const char *rangeName);  ; void setNormRangeOverr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooSimultaneous.html:15965,configurat,configuration,15965,doc/master/classRooSimultaneous.html,https://root.cern,https://root.cern/doc/master/classRooSimultaneous.html,1,['configurat'],['configuration']
Deployability,"turn fMinimizerOpts.MinimizerAlgorithm(); }. bool NormalizeErrors() const. flag to check if resulting errors are be normalized according to chi2/ndf. { return fNormErrors; }. bool ParabErrors() const; do analysis for parabolic errors. { return fParabErrors; }. bool MinosErrors() const; do minos errros analysis on the parameters. { return fMinosErrors; }. bool UpdateAfterFit() const; Update configuration after a fit using the FitResult. { return fUpdateAfterFit; }. bool UseWeightCorrection() const; Apply Weight correction for error matrix computation. { return fWeightCorr; }. const std::vector<unsigned int> & MinosParams() const; return vector of parameter indeces for which the Minos Error will be computed. { return fMinosParams; }. void SetNormErrors(bool on = true). set the option to normalize the error on the result according to chi2/ndf. { fNormErrors= on; }. void SetParabErrors(bool on = true); set parabolic erros. { fParabErrors = on; }. void SetMinosErrors(bool on = true); set Minos erros computation to be performed after fitting. { fMinosErrors = on; }. void SetWeightCorrection(bool on = true); apply the weight correction for error matric computation. { fWeightCorr = on; }. void SetMinosErrors(const vector<unsigned int>& paramInd); set parameter indeces for running Minos; this can be used for running Minos on a subset of parameters - otherwise is run on all of them; if MinosErrors() is set. void SetUpdateAfterFit(bool on = true); Update configuration after a fit using the FitResult. { fUpdateAfterFit = on; }. void SetDefaultMinimizer(const char* type, const char* algo = 0). static function to control default minimizer type and algorithm. » Author: L. Moneta Thu Sep 21 16:21:29 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:21; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Fit__FitConfig.html:6356,configurat,configuration,6356,root/html602/ROOT__Fit__FitConfig.html,https://root.cern,https://root.cern/root/html602/ROOT__Fit__FitConfig.html,1,['configurat'],['configuration']
Deployability,"turn fMinimizerOpts.MinimizerAlgorithm(); }. bool NormalizeErrors() const. flag to check if resulting errors are be normalized according to chi2/ndf. { return fNormErrors; }. bool ParabErrors() const; do analysis for parabolic errors. { return fParabErrors; }. bool MinosErrors() const; do minos errros analysis on the parameters. { return fMinosErrors; }. bool UpdateAfterFit() const; Update configuration after a fit using the FitResult. { return fUpdateAfterFit; }. bool UseWeightCorrection() const; Apply Weight correction for error matrix computation. { return fWeightCorr; }. const std::vector<unsigned int> & MinosParams() const; return vector of parameter indeces for which the Minos Error will be computed. { return fMinosParams; }. void SetNormErrors(bool on = true). set the option to normalize the error on the result according to chi2/ndf. { fNormErrors= on; }. void SetParabErrors(bool on = true); set parabolic erros. { fParabErrors = on; }. void SetMinosErrors(bool on = true); set Minos erros computation to be performed after fitting. { fMinosErrors = on; }. void SetWeightCorrection(bool on = true); apply the weight correction for error matric computation. { fWeightCorr = on; }. void SetMinosErrors(const vector<unsigned int>& paramInd); set parameter indeces for running Minos; this can be used for running Minos on a subset of parameters - otherwise is run on all of them; if MinosErrors() is set. void SetUpdateAfterFit(bool on = true); Update configuration after a fit using the FitResult. { fUpdateAfterFit = on; }. void SetDefaultMinimizer(const char* type, const char* algo = 0). static function to control default minimizer type and algorithm. » Author: L. Moneta Thu Sep 21 16:21:29 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 16:58; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Fit__FitConfig.html:6159,configurat,configuration,6159,root/html534/ROOT__Fit__FitConfig.html,https://root.cern,https://root.cern/root/html534/ROOT__Fit__FitConfig.html,1,['configurat'],['configuration']
Deployability,"turn fMinimizerOpts.MinimizerAlgorithm(); }. bool NormalizeErrors() const. flag to check if resulting errors are be normalized according to chi2/ndf. { return fNormErrors; }. bool ParabErrors() const; do analysis for parabolic errors. { return fParabErrors; }. bool MinosErrors() const; do minos errros analysis on the parameters. { return fMinosErrors; }. bool UpdateAfterFit() const; Update configuration after a fit using the FitResult. { return fUpdateAfterFit; }. bool UseWeightCorrection() const; Apply Weight correction for error matrix computation. { return fWeightCorr; }. const std::vector<unsigned int> & MinosParams() const; return vector of parameter indeces for which the Minos Error will be computed. { return fMinosParams; }. void SetNormErrors(bool on = true). set the option to normalize the error on the result according to chi2/ndf. { fNormErrors= on; }. void SetParabErrors(bool on = true); set parabolic erros. { fParabErrors = on; }. void SetMinosErrors(bool on = true); set Minos erros computation to be performed after fitting. { fMinosErrors = on; }. void SetWeightCorrection(bool on = true); apply the weight correction for error matric computation. { fWeightCorr = on; }. void SetMinosErrors(const vector<unsigned int>& paramInd); set parameter indeces for running Minos; this can be used for running Minos on a subset of parameters - otherwise is run on all of them; if MinosErrors() is set. void SetUpdateAfterFit(bool on = true); Update configuration after a fit using the FitResult. { fUpdateAfterFit = on; }. void SetDefaultMinimizer(const char* type, const char* algo = 0). static function to control default minimizer type and algorithm. » Author: L. Moneta Thu Sep 21 16:21:29 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/ROOT__Fit__FitConfig.html:6356,configurat,configuration,6356,root/html604/ROOT__Fit__FitConfig.html,https://root.cern,https://root.cern/root/html604/ROOT__Fit__FitConfig.html,1,['configurat'],['configuration']
Deployability,"turn the current value:; the value of the PDF associated with the current index category state. Double_t expectedEvents(const RooArgSet* nset); Return the number of expected events: If the index is in nset,; then return the sum of the expected events of all components,; otherwise return the number of expected events of the PDF; associated with the current index category state. Int_t getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& numVars, const RooArgSet* normSet, const char* rangeName = 0) const; Forward determination of analytical integration capabilities to component p.d.f.s; A unique code is assigned to the combined integration capabilities of all associated; p.d.f.s. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; Return analytical integration defined by given code. RooPlot* plotOn(RooPlot* frame, RooLinkedList& cmdList) const; Back-end for plotOn() implementation on RooSimultaneous which; needs special handling because a RooSimultaneous PDF cannot; project out its index category via integration, plotOn() will; abort if this is requested without providing a projection dataset. RooPlot* plotOn(RooPlot* frame, Option_t* drawOptions, Double_t scaleFactor = 1.0, RooAbsReal::ScaleType stype = Relative, const RooAbsData* projData = 0, const RooArgSet* projSet = 0, Double_t precision = 1e-3, Bool_t shiftToZero = kFALSE, const RooArgSet* projDataSet = 0, Double_t rangeLo = 0, Double_t rangeHi = 0, RooCurve::WingMode wmode = RooCurve::Extended) const; OBSOLETE -- Retained for backward compatibility. void selectNormalization(const RooArgSet* depSet = 0, Bool_t force = kFALSE); Interface function used by test statistics to freeze choice of observables; for interpretation of fraction coefficients. Needed here because a RooSimultaneous; works like a RooAddPdf when plotted. void selectNormalizationRange(const char* rangeName = 0, Bool_t force = kFALSE); Interface function used by test statistics to freeze choice of ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooSimultaneous.html:43764,integrat,integration,43764,root/html526/RooSimultaneous.html,https://root.cern,https://root.cern/root/html526/RooSimultaneous.html,1,['integrat'],['integration']
Deployability,"turn;; 6709 }; 6710 ; 6711 clang::QualType type(tdDef->getTypeForDecl(), 0);; 6712 ROOT::TMetaUtils::GetNormalizedName(name, type, *fInterpreter, *fNormalizedCtxt);; 6713 } else if (ns) {; 6714 canon = ns->getCanonicalDecl();; 6715 name = ND->getQualifiedNameAsString();; 6716 } else {; 6717 name = ND->getQualifiedNameAsString();; 6718 }; 6719 ; 6720 // Supposedly we are being called while something is being; 6721 // loaded ... let's now tell the autoloader to do the work; 6722 // yet another time.; 6723 SuspendAutoLoadingRAII autoLoadOff(this);; 6724 // FIXME: There can be more than one TClass for a single decl.; 6725 // for example vector<double> and vector<Double32_t>; 6726 TClass* cl = (TClass*)gROOT->GetListOfClasses()->FindObject(name.c_str());; 6727 if (cl && GetModTClasses().find(cl) == GetModTClasses().end()) {; 6728 RefreshClassInfo(cl, canon, false);; 6729 }; 6730 // And here we should find the other 'aliases' (eg. vector<Double32_t>); 6731 // and update them too:; 6732 // foreach(aliascl in gROOT->GetListOfClasses()->FindAliasesOf(name.c_str())); 6733 // RefreshClassInfo(cl, tdDef, true);; 6734}; 6735 ; 6736////////////////////////////////////////////////////////////////////////////////; 6737/// No op: see TClingCallbacks; 6738 ; 6739void TCling::UpdateClassInfo(char* item, Long_t tagnum); 6740{; 6741}; 6742 ; 6743//______________________________________________________________________________; 6744//FIXME: Factor out that function in TClass, because TClass does it already twice; 6745void TCling::UpdateClassInfoWork(const char* item); 6746{; 6747 // This is a no-op as part of the API.; 6748 // TCling uses UpdateClassInfoWithDecl() instead.; 6749}; 6750 ; 6751////////////////////////////////////////////////////////////////////////////////; 6752/// Update all canvases at end the terminal input command.; 6753 ; 6754void TCling::UpdateAllCanvases(); 6755{; 6756 TIter next(gROOT->GetListOfCanvases());; 6757 TVirtualPad* canvas;; 6758 while ((canvas = (TVirtualP",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCling_8cxx_source.html:262632,update,update,262632,doc/master/TCling_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCling_8cxx_source.html,1,['update'],['update']
Deployability,"turnsName of this class . ◆ Class_Version(). static constexpr Version_t RooConvCoefVar::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 50 of file RooConvCoefVar.h. ◆ clone(). TObject * RooConvCoefVar::clone ; (; const char * ; newname); const. inlineoverridevirtual . Implements RooAbsArg.; Definition at line 36 of file RooConvCoefVar.h. ◆ DeclFileName(). static const char * RooConvCoefVar::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 50 of file RooConvCoefVar.h. ◆ evaluate(). double RooConvCoefVar::evaluate ; (; ); const. overridevirtual . Return value of chosen coefficient. ; Implements RooAbsReal.; Definition at line 76 of file RooConvCoefVar.cxx. ◆ getAnalyticalIntegral(). Int_t RooConvCoefVar::getAnalyticalIntegral ; (; RooArgSet & ; allVars, . RooArgSet & ; analVars, . const char * ; rangeName = nullptr . ); const. overridevirtual . Return analytical integration capabilities of chosen coefficient. ; Reimplemented from RooAbsReal.; Definition at line 86 of file RooConvCoefVar.cxx. ◆ getValV(). double RooConvCoefVar::getValV ; (; const RooArgSet * ; nset = nullptr); const. overridevirtual . Return value of chosen coefficient. ; Reimplemented from RooAbsReal.; Definition at line 66 of file RooConvCoefVar.cxx. ◆ IsA(). TClass * RooConvCoefVar::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooAbsReal.; Definition at line 50 of file RooConvCoefVar.h. ◆ Streamer(). void RooConvCoefVar::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsReal. ◆ StreamerNVirtual(). void RooConvCoefVar::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 50 of file RooConvCoefVar.h. Member Data Documentation. ◆ _coefIdx. Int_t RooConvCoefVar::_coefIdx. protected . Index code of the coefficient. ; Definition at line",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooConvCoefVar.html:62312,integrat,integration,62312,doc/master/classRooConvCoefVar.html,https://root.cern,https://root.cern/doc/master/classRooConvCoefVar.html,1,['integrat'],['integration']
Deployability,"tus of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; RooRealProxy_meas; static Int_tRooPrintable::_nameLength; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; RooRealProxy_true; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooPullVar.html:31775,integrat,integrator,31775,root/html526/RooPullVar.html,https://root.cern,https://root.cern/root/html526/RooPullVar.html,4,"['configurat', 'integrat']","['configuration', 'integrator']"
Deployability,"tus of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; static Int_tRooPrintable::_nameLength; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_t_valueConstant value of self; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooConstVar.html:31375,integrat,integrator,31375,root/html526/RooConstVar.html,https://root.cern,https://root.cern/root/html526/RooConstVar.html,4,"['configurat', 'integrat']","['configuration', 'integrator']"
Deployability,"tus of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Types; enum  ELockingKinds { kLockFree = 0; , kLockBusy = 1; };  ;  Protected Types inherited from TDirectory; using SharedGDirectory_t = std::shared_ptr< std::atomic< TDirectory * > >;  Pointer to a list of TContext object pointing to this TDirectory. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . Protected Member Functions; void AddIdEntry (Long64_t tableid, Int_t subid, Int_t type, const char *name, const char *sqlname, const char *info);  Add entry into IdsTable, where all tables names and columns names are listed. ;  ; TString CodeLongString (Long64_t objid, Int_t strid);  Produces id which will be placed in column instead of string itself. ;  ; void CreateBasicTables ();  Creates initial tables in database This is table with configurations and table with keys Function called once when first object is stored to the file. ;  ; Bool_t CreateClassTable (TSQLClassInfo *sqlinfo, TObjArray *colinfos);  Create normal class table if required. ;  ; Bool_t CreateRawTable (TSQLClassInfo *sqlinfo);  Create the raw table. ;  ; Long64_t DefineNextKeyId ();  Returns next possible key identifier. ;  ; TString DefineTableName (const char *clname, Int_t version, Bool_t rawtable);  Proposes table name for class. ;  ; void DeleteKeyFromDB (Long64_t keyid);  Remove key with specified id from keys table also removes all objects data, related to this table. ;  ; Long64_t DirCreateEntry (TDirectory *) final;  Create entry for directory in database. ;  ; Int_t DirReadKeys (TDirectory *) final;  Read directory list of keys from database. ;  ; void DirWriteHeader (TDirectory *) final;  Update dir header in the file. ;  ; void DirWriteKeys (TDirectory *) final;  Write directory keys list to database. ;  ; TSQLClassInfo * FindSQLClassInfo ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSQLFile.html:41082,configurat,configurations,41082,doc/master/classTSQLFile.html,https://root.cern,https://root.cern/doc/master/classTSQLFile.html,1,['configurat'],['configurations']
Deployability,"tusBits { kIsInitializing; kIsDone; kIsTree; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. Bool_tTVirtualPacketizer::fAWLastFillWhether to fill the last measurement; Int_tTVirtualPacketizer::fActWrksLastActive workers at fProcTimeLast; Long_tTVirtualPacketizer::fCircNCircularity; TNtupleD*TVirtualPacketizer::fCircProgKeeps circular info for ""instantenous""; TList*TVirtualPacketizer::fConfigParamsList of configuration parameters; TStringTVirtualPacketizer::fDataSetName of the dataset being processed (for dataset-driven runs); Float_tTVirtualPacketizer::fEffSessLastNumber of effective sessions at fProcTimeLast; Float_tTVirtualPacketizer::fEvtRateLastEvt rate at fProcTimeLast; TList*TVirtualPacketizer::fFailedPacketsa list of packets that failed while processing; Float_tTVirtualPacketizer::fInitTimetime before processing; TList*TVirtualPacketizer::fInputInput list; Float_tTVirtualPacketizer::fMBsReadLastMBs read at fProcTimeLast; Double_tTVirtualPacketizer::fMaxPacketTimemaximum packet time; Double_tTVirtualPacketizer::fMinPacketTimeminimum packet time; Float_tTVirtualPacketizer::fProcTimetime since start of processing; Float_tTVirtualPacketizer::fProcTimeLastTime of the last measurement; TTimer*TVirtualPacketizer::fProgressprogress updates timer; TNtuple*TVirtualPacketizer::fProgressPerf{Active workers, evt rate, MBs read} as a function of processing time; TProofProgressStatus*TVirtualPacketizer::fProgressStatuspointer to status in the player.; Float_tTVirtualPacketizer::fReportPeriodTime between reports if nothing changes (estimated proc time / 100); TMap*TVirtualPacketizer::fSlaveStatsslave status, keyed by correspondig TSlave; TTimeTVirtualPacketizer::fStartTimetime offset; Bool_tTVirtualPacketizer::fStopTermination of Process() requested?; Float_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TPacketizer.html:8233,configurat,configuration,8233,root/html534/TPacketizer.html,https://root.cern,https://root.cern/root/html534/TPacketizer.html,10,"['configurat', 'update']","['configuration', 'updates']"
Deployability,"two main methods of installing ROOT from source: location independent and fix location. The former is advised for a personal installation of ROOT, while the later for a system wide installation. Both require to set the CMAKE_INSTALL_PREFIX variable at configuration time. The later requires in addition to set the gnuinstall option at configuration. It also allows the tuning of destinations for the various components, by setting the variablesCMAKE_INSTALL_xxxDIR, wherexxx isBIN,LIB,INCLUDE, etc. The full list is described in the variables section.; To use the location independent installation requires to set environment variables PATH and LD_LIBRARY_PATH. This is done by sourcing the script (depending on the shell family) source bin/thisroot.sh. While to use the fix location installation you do not need to set any environment to run root.; Do the installation of ROOT from the build directory:; $ cmake --build . --target install. The --target option with install parameter in addition to the --build option tells cmake to build the 'install' target. This is equivalent to make install for Unix systems. ; It is possible to set a different install prefix at installation time by invoking the cmake_install.cmake script generated in the build directory:; $ cmake -DCMAKE_INSTALL_PREFIX=/tmp/root -P cmake_install.cmake. Build Options; Each build option is a boolean variable that can be turned ON or OFF. The current value is recorded in the CMake cache (CMakeCache.txt file on the build directory) and therefore it is not needed to be specified on the cmake command each time. Please note that some of the options might be turned OFF automatically for some platforms or if the required external library or component can not be satisfied. The user can view and edit the full list of options using the ccmake utility or cmake-gui for Windows. Note that some of the options are not yet implemented.; The user can set any CMake variable or option that controls the build process from the cmake ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/building-root.html:5758,install,install,5758,d/building-root.html,https://root.cern,https://root.cern/d/building-root.html,2,['install'],['install']
Deployability,"ty = true); HybridPlot constructor. ~HybridPlot(); destructor. void Draw(const char* options = """"); draw the S+B and B histogram in the current canvas. void DumpToFile(const char* RootFileName, const char* options); All the objects are written to rootfile. void DumpToImage(const char* filename). double GetHistoCenter(TH1* histo, double n_rms = 1, bool display_result = false); Get the center of the histo. double* GetHistoPvals(TH1* histo, double percentage). double GetMedian(TH1* histo). HybridPlot(const char* name, const char* title, const vector<double>& sb_values, const vector<double>& b_values, double testStat_data, int n_bins, bool verbosity = true); Constructor. double GetBmean(); Get B histo mean. {return fB_histo->GetMean();}. double GetBrms(); Get B histo RMS. {return fB_histo->GetRMS();}. TH1F * GetBhisto(); Get B histo. {return fB_histo;}. double GetBCenter(double n_sigmas = 1, bool display = false); Get B histo center. {return GetHistoCenter(fB_histo,n_sigmas,display);}. double* GetBIntExtremes(double frac); Get B histo integration extremes to obtain the requested area fraction. {return GetHistoPvals(fB_histo,frac);}. double GetSBmean(); Get SB histo mean. {return fSb_histo->GetMean();}. double GetSBCenter(double n_sigmas = 1, bool display = false); Get SB histo center. {return GetHistoCenter(fSb_histo,n_sigmas,display);}. double GetSBrms(); Get SB histo RMS. {return fSb_histo->GetRMS();}. double* GetSBIntExtremes(double frac); Get SB histo integration extremes to obtain the requested area fraction. {return GetHistoPvals(fSb_histo,frac);}. TH1F* GetSBhisto(); Get B histo. {return fSb_histo;}. TVirtualPad * GetCanvas(); Get the pad (or canvas) where it has been drawn. { return fPad; }. » Last changed: root/roostats:$Id: HybridPlot.h 30654 2009-10-09 15:07:52Z moneta $ » Last generated: 2009-12-07 13:49; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__HybridPlot.html:8124,integrat,integration,8124,root/html526/RooStats__HybridPlot.html,https://root.cern,https://root.cern/root/html526/RooStats__HybridPlot.html,2,['integrat'],['integration']
Deployability,"ty = true); HybridPlot constructor. ~HybridPlot(); destructor. void Draw(const char* options = """"); draw the S+B and B histogram in the current canvas. void DumpToFile(const char* RootFileName, const char* options); All the objects are written to rootfile. void DumpToImage(const char* filename). double GetHistoCenter(TH1* histo, double n_rms = 1, bool display_result = false); Get the center of the histo. double* GetHistoPvals(TH1* histo, double percentage). double GetMedian(TH1* histo). HybridPlot(const char* name, const char* title, const vector<double>& sb_values, const vector<double>& b_values, double testStat_data, int n_bins, bool verbosity = true); Constructor. double GetBmean(); Get B histo mean. {return fB_histo->GetMean();}. double GetBrms(); Get B histo RMS. {return fB_histo->GetRMS();}. TH1F * GetBhisto(); Get B histo. {return fB_histo;}. double GetBCenter(double n_sigmas = 1, bool display = false); Get B histo center. {return GetHistoCenter(fB_histo,n_sigmas,display);}. double* GetBIntExtremes(double frac); Get B histo integration extremes to obtain the requested area fraction. {return GetHistoPvals(fB_histo,frac);}. double GetSBmean(); Get SB histo mean. {return fSb_histo->GetMean();}. double GetSBCenter(double n_sigmas = 1, bool display = false); Get SB histo center. {return GetHistoCenter(fSb_histo,n_sigmas,display);}. double GetSBrms(); Get SB histo RMS. {return fSb_histo->GetRMS();}. double* GetSBIntExtremes(double frac); Get SB histo integration extremes to obtain the requested area fraction. {return GetHistoPvals(fSb_histo,frac);}. TH1F* GetSBhisto(); Get B histo. {return fSb_histo;}. TVirtualPad * GetCanvas(); Get the pad (or canvas) where it has been drawn. { return fPad; }. » Last changed: root/roostats:$Id: HybridPlot.h 30654 2009-10-09 15:07:52Z moneta $ » Last generated: 2010-09-27 22:32; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__HybridPlot.html:8100,integrat,integration,8100,root/html528/RooStats__HybridPlot.html,https://root.cern,https://root.cern/root/html528/RooStats__HybridPlot.html,2,['integrat'],['integration']
Deployability,"ty = true); HybridPlot constructor. ~HybridPlot(); destructor. void Draw(const char* options = """"); draw the S+B and B histogram in the current canvas. void DumpToFile(const char* RootFileName, const char* options); All the objects are written to rootfile. void DumpToImage(const char* filename). double GetHistoCenter(TH1* histo, double n_rms = 1, bool display_result = false); Get the center of the histo. double* GetHistoPvals(TH1* histo, double percentage). double GetMedian(TH1* histo). HybridPlot(const char* name, const char* title, const vector<double>& sb_values, const vector<double>& b_values, double testStat_data, int n_bins, bool verbosity = true); Constructor. double GetBmean(); Get B histo mean. {return fB_histo->GetMean();}. double GetBrms(); Get B histo RMS. {return fB_histo->GetRMS();}. TH1F * GetBhisto(); Get B histo. {return fB_histo;}. double GetBCenter(double n_sigmas = 1, bool display = false); Get B histo center. {return GetHistoCenter(fB_histo,n_sigmas,display);}. double* GetBIntExtremes(double frac); Get B histo integration extremes to obtain the requested area fraction. {return GetHistoPvals(fB_histo,frac);}. double GetSBmean(); Get SB histo mean. {return fSb_histo->GetMean();}. double GetSBCenter(double n_sigmas = 1, bool display = false); Get SB histo center. {return GetHistoCenter(fSb_histo,n_sigmas,display);}. double GetSBrms(); Get SB histo RMS. {return fSb_histo->GetRMS();}. double* GetSBIntExtremes(double frac); Get SB histo integration extremes to obtain the requested area fraction. {return GetHistoPvals(fSb_histo,frac);}. TH1F* GetSBhisto(); Get B histo. {return fSb_histo;}. TVirtualPad * GetCanvas(); Get the pad (or canvas) where it has been drawn. { return fPad; }. » Last changed: root/roostats:$Id: HybridPlot.h 39391 2011-05-26 09:51:59Z moneta $ » Last generated: 2011-07-04 15:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooStats__HybridPlot.html:8179,integrat,integration,8179,root/html530/RooStats__HybridPlot.html,https://root.cern,https://root.cern/root/html530/RooStats__HybridPlot.html,2,['integrat'],['integration']
Deployability,"ty = true); HybridPlot constructor. ~HybridPlot(); destructor. void Draw(const char* options = """"); draw the S+B and B histogram in the current canvas. void DumpToFile(const char* RootFileName, const char* options); All the objects are written to rootfile. void DumpToImage(const char* filename). double GetHistoCenter(TH1* histo, double n_rms = 1, bool display_result = false); Get the center of the histo. double* GetHistoPvals(TH1* histo, double percentage). double GetMedian(TH1* histo). HybridPlot(const char* name, const char* title, const vector<double>& sb_values, const vector<double>& b_values, double testStat_data, int n_bins, bool verbosity = true); Constructor. double GetBmean(); Get B histo mean. {return fB_histo->GetMean();}. double GetBrms(); Get B histo RMS. {return fB_histo->GetRMS();}. TH1F * GetBhisto(); Get B histo. {return fB_histo;}. double GetBCenter(double n_sigmas = 1, bool display = false); Get B histo center. {return GetHistoCenter(fB_histo,n_sigmas,display);}. double* GetBIntExtremes(double frac); Get B histo integration extremes to obtain the requested area fraction. {return GetHistoPvals(fB_histo,frac);}. double GetSBmean(); Get SB histo mean. {return fSb_histo->GetMean();}. double GetSBCenter(double n_sigmas = 1, bool display = false); Get SB histo center. {return GetHistoCenter(fSb_histo,n_sigmas,display);}. double GetSBrms(); Get SB histo RMS. {return fSb_histo->GetRMS();}. double* GetSBIntExtremes(double frac); Get SB histo integration extremes to obtain the requested area fraction. {return GetHistoPvals(fSb_histo,frac);}. TH1F* GetSBhisto(); Get B histo. {return fSb_histo;}. TVirtualPad * GetCanvas(); Get the pad (or canvas) where it has been drawn. { return fPad; }. » Last changed: root/roostats:$Id: HybridPlot.h 39391 2011-05-26 09:51:59Z moneta $ » Last generated: 2011-11-03 20:09; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooStats__HybridPlot.html:8179,integrat,integration,8179,root/html532/RooStats__HybridPlot.html,https://root.cern,https://root.cern/root/html532/RooStats__HybridPlot.html,2,['integrat'],['integration']
Deployability,"ty and transparency ; : of the discrimination expression. A shortcoming is that FDA will; : underperform for involved problems with complicated, phase space; : dependent nonlinear correlations.; : ; : Please consult the Users Guide for the format of the formula string; : and the allowed parameter ranges:; : documentation/tmva/UsersGuide/TMVAUsersGuide.pdf; : ; : ␛[1m--- Performance optimisation:␛[0m; : ; : The FDA performance depends on the complexity and fidelity of the; : user-defined discriminator function. As a general rule, it should; : be able to reproduce the discrimination power of any linear; : discriminant analysis. To reach into the nonlinear domain, it is; : useful to inspect the correlation profiles of the input variables,; : and add quadratic and higher polynomial terms between variables as; : necessary. Comparison with more involved nonlinear classifiers can; : be used as a guide.; : ; : ␛[1m--- Performance tuning via configuration options:␛[0m; : ; : Depending on the function used, the choice of ""FitMethod"" is; : crucial for getting valuable solutions with FDA. As a guideline it; : is recommended to start with ""FitMethod=MINUIT"". When more complex; : functions are used where MINUIT does not converge to reasonable; : results, the user should switch to non-gradient FitMethods such; : as GeneticAlgorithm (GA) or Monte Carlo (MC). It might prove to be; : useful to combine GA (or MC) with MINUIT by setting the option; : ""Converger=MINUIT"". GA (MC) will then set the starting parameters; : for MINUIT such that the basic quality of GA (MC) of finding global; : minima is combined with the efficacy of MINUIT of finding local; : minima.; : ; : <Suppress this message by specifying ""!H"" in the booking option>; : ␛[1m================================================================␛[0m; : ; FitterBase : <GeneticFitter> Optimisation, please be patient ... (inaccurate progress timing for GA); : Elapsed time: 0.901 sec ; FDA_GA : Results for parameter fit using ""GA"" fi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAClassification_8C.html:39771,configurat,configuration,39771,doc/master/TMVAClassification_8C.html,https://root.cern,https://root.cern/doc/master/TMVAClassification_8C.html,1,['configurat'],['configuration']
Deployability,"ty function. ;  ; static const TString & GetEtcDir ();  Get the sysconfig directory in the installation. Static utility function. ;  ; static const char **& GetExtraInterpreterArgs ();  INTERNAL function! Used by rootcling to inject interpreter arguments through a C-interface layer. ;  ; static const TString & GetIconPath ();  Get the icon path in the installation. Static utility function. ;  ; static const TString & GetIncludeDir ();  Get the include directory in the installation. Static utility function. ;  ; static const TString & GetLibDir ();  Get the library directory in the installation. Static utility function. ;  ; static const TString & GetMacroDir ();  Get the macro directory in the installation. Static utility function. ;  ; static const char * GetMacroPath ();  Get macro search path. Static utility function. ;  ; static const TString & GetRootSys ();  Get the rootsys directory in the installation. Static utility function. ;  ; static const TString & GetSharedLibDir ();  Get the shared libraries directory in the installation. Static utility function. ;  ; static const TString & GetSourceDir ();  Get the source directory in the installation. Static utility function. ;  ; static const TString & GetTTFFontDir ();  Get the fonts directory in the installation. Static utility function. ;  ; static const TString & GetTutorialDir ();  Get the tutorials directory in the installation. Static utility function. ;  ; static const char * GetTutorialsDir ();  Get the tutorials directory in the installation. ;  ; static Int_t IncreaseDirLevel ();  Increase the indentation level for ls(). ;  ; static void IndentLevel ();  Functions used by ls() to indent an object hierarchy. ;  ; static void Initialize ();  Initialize ROOT explicitly. ;  ; static Bool_t Initialized ();  Return kTRUE if the TROOT object has been initialized. ;  ; static void RegisterModule (const char *modulename, const char **headers, const char **includePaths, const char *payLoadCode, const char *fwdDecl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTROOT.html:28779,install,installation,28779,doc/v632/classTROOT.html,https://root.cern,https://root.cern/doc/v632/classTROOT.html,2,['install'],['installation']
Deployability,"ty string is returned; 238 const char * Name() const;; 239 ; 240 /*; 241 set print level; 242 level = 0 quiet (no messages print); 243 = 1 print only the result; 244 = 3 max debug. Print result at each iteration; 245 */; 246 void SetPrintLevel(int level) { fPrintLevel = level; }; 247 ; 248 /// return the print level; 249 int PrintLevel() const { return fPrintLevel; }; 250 ; 251 ; 252 //-- static methods to set configurations; 253 ; 254 /// set tolerance (absolute and relative); 255 /// relative tolerance is only use to verify the convergence; 256 /// do it is a minor parameter; 257 static void SetDefaultTolerance(double abstol, double reltol = 0 );; 258 ; 259 /// set maximum number of iterations; 260 static void SetDefaultMaxIterations(int maxiter);; 261 ; 262 /// print iteration state; 263 void PrintState(std::ostream & os = std::cout);; 264 ; 265 ; 266 protected:; 267 ; 268 // return type given a name; 269 std::pair<bool,int> GetType(const char * name);; 270 // clear list of functions; 271 void ClearFunctions();; 272 ; 273 ; 274 private:; 275 ; 276 int fIter; // current number of iterations; 277 int fStatus; // current status; 278 int fPrintLevel; // print level; 279 ; 280 // int fMaxIter; // max number of iterations; 281 // double fAbsTolerance; // absolute tolerance; 282 // double fRelTolerance; // relative tolerance; 283 int fType; // type of algorithm; 284 bool fUseDerivAlgo; // algorithm using derivative; 285 ; 286 GSLMultiRootBaseSolver * fSolver;; 287 std::vector<ROOT::Math::IMultiGenFunction *> fFunctions; //! transient Vector of the functions; 288 ; 289 ; 290 };; 291 ; 292 // use typedef for most sensible name; 293 typedef GSLMultiRootFinder MultiRootFinder;; 294 ; 295} // namespace Math; 296} // namespace ROOT; 297 ; 298 ; 299#endif /* ROOT_Math_GSLMultiRootFinder */; IFunction.h; f#define f(i)Definition RSha256.hxx:104; typeOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/GSLMultiRootFinder_8h_source.html:9495,configurat,configurations,9495,doc/master/GSLMultiRootFinder_8h_source.html,https://root.cern,https://root.cern/doc/master/GSLMultiRootFinder_8h_source.html,1,['configurat'],['configurations']
Deployability,"ty; : Using 2560 events for training and 640 for testing; : Compute initial loss on the validation data ; : Training phase 1 of 1: Optimizer ADAM (beta1=0.9,beta2=0.999,eps=1e-07) Learning rate = 0.001 regularization 0 minimum error = 0.70799; : --------------------------------------------------------------; : Epoch | Train Err. Val. Err. t(s)/epoch t(s)/Loss nEvents/s Conv. Steps; : --------------------------------------------------------------; : Start epoch iteration ...; : 1 Minimum Test error found - save the configuration ; : 1 | 0.70053 0.692869 0.629389 0.0419042 4255.43 0; : 2 | 0.694153 0.694394 0.642643 0.0421501 4163.24 1; : 3 | 0.689625 0.697522 0.642119 0.0416746 4163.58 2; : 4 | 0.681203 0.694822 0.637781 0.0412238 4190.71 3; : 5 Minimum Test error found - save the configuration ; : 5 | 0.673678 0.681248 0.623882 0.0409529 4288.69 0; : 6 Minimum Test error found - save the configuration ; : 6 | 0.660284 0.667264 0.616834 0.0410715 4342.07 0; : 7 Minimum Test error found - save the configuration ; : 7 | 0.640131 0.636981 0.607427 0.0404816 4409.59 0; : 8 | 0.616397 0.638352 0.60791 0.0403928 4405.16 1; : 9 Minimum Test error found - save the configuration ; : 9 | 0.599679 0.608826 0.606268 0.0407993 4421.11 0; : 10 Minimum Test error found - save the configuration ; : 10 | 0.585295 0.60026 0.604906 0.0402508 4427.48 0; : 11 Minimum Test error found - save the configuration ; : 11 | 0.568589 0.592822 0.598106 0.0406425 4484.6 0; : 12 Minimum Test error found - save the configuration ; : 12 | 0.559657 0.589421 0.600393 0.0404151 4464.46 0; : 13 Minimum Test error found - save the configuration ; : 13 | 0.552318 0.583187 0.601709 0.0405559 4455.11 0; : 14 Minimum Test error found - save the configuration ; : 14 | 0.540541 0.58147 0.593964 0.0401674 4514.29 0; : 15 Minimum Test error found - save the configuration ; : 15 | 0.532596 0.581192 0.589633 0.0399271 4547.88 0; : 16 Minimum Test error found - save the configuration ; : 16 | 0.529842 0.56732 0.5995",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__RNN__Classification_8C.html:16043,configurat,configuration,16043,doc/master/TMVA__RNN__Classification_8C.html,https://root.cern,https://root.cern/doc/master/TMVA__RNN__Classification_8C.html,1,['configurat'],['configuration']
Deployability,"tyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. RooNumGenFactory(); RooNumGenFactory(const RooNumGenFactory& other); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. static RooNumGenFactory*_instance; map<std::string,RooAbsNumGenerator*>_map. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooNumGenFactory(); Constructor. Register all known integrators by calling; their static registration functions. ~RooNumGenFactory(); Destructor. RooNumGenFactory(const RooNumGenFactory& other); Copy constructor. RooNumGenFactory& instance(); Static method returning reference to singleton instance of factory. void cleanup(); Cleanup routine called by atexit() handler installed by RooSentinel. Bool_t storeProtoSampler(RooAbsNumGenerator* proto, const RooArgSet& defConfig); Method accepting registration of a prototype numeric integrator along with a RooArgSet of its; default configuration options and an optional list of names of other numeric integrators; on which this integrator depends. Returns true if integrator was previously registered. const RooAbsNumGenerator* getProtoSampler(const char* name); Return prototype integrator with given (class) name. RooAbsNumGenerator* createSampler(RooAbsReal& func, const RooArgSet& genVars, const RooArgSet& condVars, const RooNumGenConfig& config, Bool_t verbose = kFALSE, RooAbsReal* maxFuncVal = 0); Construct a numeri",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooNumGenFactory.html:6152,integrat,integrators,6152,root/html526/RooNumGenFactory.html,https://root.cern,https://root.cern/root/html526/RooNumGenFactory.html,5,['integrat'],['integrators']
Deployability,"tyle(Style_t fstyle); virtual voidTGraph::SetHistogram(TH1* h); virtual voidTAttLine::SetLineAttributes()MENU ; virtual voidTAttLine::SetLineColor(Color_t lcolor); virtual voidTAttLine::SetLineStyle(Style_t lstyle); virtual voidTAttLine::SetLineWidth(Width_t lwidth); virtual voidTAttMarker::SetMarkerAttributes()MENU ; virtual voidTAttMarker::SetMarkerColor(Color_t tcolor = 1); virtual voidTAttMarker::SetMarkerSize(Size_t msize = 1); virtual voidTAttMarker::SetMarkerStyle(Style_t mstyle = 1); virtual voidTGraph::SetMaximum(Double_t maximum = -1111)MENU ; virtual voidTGraph::SetMinimum(Double_t minimum = -1111)MENU ; virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGraph::SetPoint(Int_t i, Double_t x, Double_t y); virtual voidTGraph::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); voidRooPlotable::setYAxisLabel(const char* label); voidRooPlotable::setYAxisLimits(Double_t ymin, Double_t ymax); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidTGraph::Sort(Bool_t (*)(const TGraph*, Int_t, Int_t) greater = &TGraph::CompareX, Bool_t ascending = kTRUE, Int_t low = 0, Int_t high = -1111); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; voidRooPlotable::updateYAxisLimits(Double_t y); virtual voidTGraph::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; voidTGraph::Zero(Int_t& k, Double_t AZ, Double_t BZ, Double_t E2, Double_t& X, Double_t& Y, Int_t maxiterations).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooCurve.html:13747,update,updateYAxisLimits,13747,root/html528/RooCurve.html,https://root.cern,https://root.cern/root/html528/RooCurve.html,2,['update'],['updateYAxisLimits']
Deployability,"type is a class derived from TObject. When the object goes out of scope on the C++ side, the Python object will change type into an object that largely behaves like None. The strict policy differs in that it will never relinquish ownership when passing an object as a parameter to a function. It is then up to the developer to prevent double deletes. Choosing one or the other policy is done by:; ROOT.SetMemoryPolicy( ROOT.kMemoryStrict ); for the strict policy, or for the heuristic policy:; ROOT.SetMemoryPolicy( ROOT.kMemoryHeuristics ); Care must be taken in the case of graphic objects: when drawn on the current pad, a reference to the graphics is kept that PyROOT isn’t currently aware of, and it is up to the developer to keep at lease one Python reference alive. See $ROOTSYS/tutorials/pyroot/zdemo.py (available in the latest release) for an example. Alternatively, one can tell python to give up ownership for individual instances:; o = ROOT.TObject(); ROOT.SetOwnership( o, False ) # True to own, False to release; 19.1.6.2 Memory Management by Hand; If needed, you can explicitly destroy a ROOT object that you own through its associated TClass:; myobject.IsA().Destructor(myobject); which will send out the deletion notification to the system (thus you do not need to care anymore at this point about Python reference counting, the object will go, even if it’s reference count it non-zero), and free the memory.; 19.1.7 Performance; The performance of PyROOT when programming with ROOT in Python is similar to that of Cling. Differences occur mainly because of differences in the respective languages: C++ is much harder to parse, but once parsed, it is much easier to optimize. Consequently, individual calls to ROOT are typically faster from PyROOT, whereas loops are typically slower.; When programming in Python, the modus operandi is to consider performance generally “good enough” on the outset, and when it turns out that, it is not good enough; the performance critical part is ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:1062331,release,release,1062331,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['release'],['release']
Deployability,"type must be a C++ callable object implementing operator()(double x); 324 @param a lower value of the integration interval; 325 @param b upper value of the integration interval; 326 @param c position of singularity; 327 ; 328 */; 329 template<class Function>; 330 double IntegralCauchy(Function & f, double a, double b, double c);; 331 ; 332 /**; 333 evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b) with a singularity at c; 334 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 335 @param a lower value of the integration interval; 336 @param b upper value of the integration interval; 337 @param c position of singularity; 338 ; 339 */; 340 double IntegralCauchy(const IGenFunction & f, double a, double b, double c) {; 341 SetFunction(f,false);; 342 return IntegralCauchy(a,b,c);; 343 }; 344 ; 345 ; 346 ; 347 // integration method using cached function; 348 ; 349 /**; 350 evaluate the Integral over the defined interval (a,b) using the function previously set with Integrator::SetFunction method; 351 @param a lower value of the integration interval; 352 @param b upper value of the integration interval; 353 */; 354 ; 355 double Integral(double a, double b) {; 356 return !fIntegrator ? 0 : fIntegrator->Integral(a,b);; 357 }; 358 ; 359 ; 360 /**; 361 evaluate the Integral over the infinite interval (-inf,+inf) using the function previously set with Integrator::SetFunction method.; 362 */; 363 ; 364 double Integral( ) {; 365 return !fIntegrator ? 0 : fIntegrator->Integral();; 366 }; 367 ; 368 /**; 369 evaluate the Integral of a function f over the semi-infinite interval (a,+inf) using the function previously set with Integrator::SetFunction method.; 370 @param a lower value of the integration interval; 371 */; 372 double IntegralUp(double a ) {; 373 return !fIntegrator ? 0 : fIntegrator->IntegralUp(a);; 374 }; 375 ; 376 /**; 377 evaluate the Integral of a function f over the over ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Integrator_8h_source.html:13804,integrat,integration,13804,doc/master/Integrator_8h_source.html,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html,5,['integrat'],['integration']
Deployability,"typename T > . T TMVA::DNN::uniformFromTo ; (; T ; from, . T ; to . ). Definition at line 34 of file NeuralNet.icc. ◆ update() [1/3]. template<typename LAYERDATA > . void TMVA::DNN::update ; (; const LAYERDATA & ; prevLayerData, . LAYERDATA & ; currLayerData, . double ; factorWeightDecay, . EnumRegularization ; regularization . ). update the node values ; Definition at line 600 of file NeuralNet.icc. ◆ update() [2/3]. template<typename ItSource , typename ItDelta , typename ItTargetGradient , typename ItGradient > . void TMVA::DNN::update ; (; ItSource ; itSource, . ItSource ; itSourceEnd, . ItDelta ; itTargetDeltaBegin, . ItDelta ; itTargetDeltaEnd, . ItTargetGradient ; itTargetGradientBegin, . ItGradient ; itGradient . ). update the gradients ; Definition at line 183 of file NeuralNet.icc. ◆ update() [3/3]. template<EnumRegularization Regularization, typename ItSource , typename ItDelta , typename ItTargetGradient , typename ItGradient , typename ItWeight > . void TMVA::DNN::update ; (; ItSource ; itSource, . ItSource ; itSourceEnd, . ItDelta ; itTargetDeltaBegin, . ItDelta ; itTargetDeltaEnd, . ItTargetGradient ; itTargetGradientBegin, . ItGradient ; itGradient, . ItWeight ; itWeight, . double ; weightDecay . ). update the gradients, using regularization ; Definition at line 237 of file NeuralNet.icc. ◆ weightDecay(). template<typename ItWeight > . double TMVA::DNN::weightDecay ; (; double ; error, . ItWeight ; itWeight, . ItWeight ; itWeightEnd, . double ; factorWeightDecay, . EnumRegularization ; eRegularization . ). compute the weight decay for regularization (L1 or L2) ; Definition at line 498 of file NeuralNet.icc. Variable Documentation. ◆ Gauss. std::shared_ptr< std::function< double(double)> > TMVA::DNN::Gauss = std::make_shared<std::function<double(double)>> ([](double value){ const double s = 6.0; return exp (-std::pow(value*s,2.0)); }). Definition at line 12 of file NeuralNet.cxx. ◆ GaussComplement. std::shared_ptr< std::function< double(double)> > TMVA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceTMVA_1_1DNN.html:35180,update,update,35180,doc/master/namespaceTMVA_1_1DNN.html,https://root.cern,https://root.cern/doc/master/namespaceTMVA_1_1DNN.html,2,['update'],['update']
Deployability,"t|dterr) on dt.; #; # Instead of integrating out dterr, a weighted average of curves; # at values dterr_i as given in the external dataset.; # (The kTRUE argument bins the data before projection to speed up the process); decay_gm.plotOn(frame2, ProjWData=(expDataDterr, True)); ; # Draw all frames on canvas; c = ROOT.TCanvas(""rf306_condpereventerrors"", ""rf306_condperventerrors"", 1200, 400); c.Divide(3); c.cd(1); ROOT.gPad.SetLeftMargin(0.20); hh_decay.GetZaxis().SetTitleOffset(2.5); hh_decay.Draw(""surf""); c.cd(2); ROOT.gPad.SetLeftMargin(0.15); frame.GetYaxis().SetTitleOffset(1.6); frame.Draw(); c.cd(3); ROOT.gPad.SetLeftMargin(0.15); frame2.GetYaxis().SetTitleOffset(1.6); frame2.Draw(); ; c.SaveAs(""rf306_condpereventerrors.png""); [#1] INFO:Fitting -- RooAbsPdf::fitTo(gm1_conv_exp(-abs(@0)/@1)_dt_tau_[decay_gm]_over_gm1_conv_exp(-abs(@0)/@1)_dt_tau_[decay_gm]_Int[dt]) fixing normalization set for coefficient determination to observables in data; [#1] INFO:Fitting -- using CPU computation library compiled with -mavx2; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_gm1_conv_exp(-abs(@0)/@1)_dt_tau_[decay_gm]_over_gm1_conv_exp(-abs(@0)/@1)_dt_tau_[decay_gm]_Int[dt]_decay_gmData) Summation contains a RooNLLVar, using its error level; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const optimization; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: deactivating const optimization; [#1] INFO:NumericIntegration -- RooRealIntegral::init(gm1_conv_exp(-abs(@0)/@1)_dt_tau_[decay_gm]_Int[dt,dterr]) using numeric integrator RooIntegrator1D to calculate Int(dterr); [#1] INFO:Plotting -- RooAbsReal::plotOn(decay_gm) plot on dt averages using data variables (dterr); DateFebruary 2018 ; AuthorsClemens Lange, Wouter Verkerke (C++ version) ; Definition in file rf306_condpereventerrors.py. tutorialsroofitrf306_condpereventerrors.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf306__condpereventerrors_8py.html:4274,integrat,integrator,4274,doc/master/rf306__condpereventerrors_8py.html,https://root.cern,https://root.cern/doc/master/rf306__condpereventerrors_8py.html,1,['integrat'],['integrator']
Deployability,"t ; y . ). Handle mouse clicks in list tree. ; Definition at line 4635 of file TSessionViewer.cxx. ◆ OnListTreeDoubleClicked(). void TSessionViewer::OnListTreeDoubleClicked ; (; TGListTreeItem * ; entry, . Int_t ; btn . ). Handle mouse double clicks in list tree (connect to server). ; Definition at line 4895 of file TSessionViewer.cxx. ◆ ProcessMessage(). Bool_t TSessionViewer::ProcessMessage ; (; Longptr_t ; msg, . Longptr_t ; parm1, . Longptr_t ;  . ). overridevirtual . Handle messages send to the TSessionViewer object. ; E.g. all menu entries messages. ; Reimplemented from TGCompositeFrame.; Definition at line 5627 of file TSessionViewer.cxx. ◆ QueryResultReady(). void TSessionViewer::QueryResultReady ; (; char * ; query). Handle signal ""query result ready"" coming from Proof session. ; Definition at line 5067 of file TSessionViewer.cxx. ◆ ReadConfiguration(). void TSessionViewer::ReadConfiguration ; (; const char * ; filename = nullptr). Read configuration file and populate list of sessions list of queries and list of packages. ; Read and set also global options as feedback histos. ; Definition at line 3667 of file TSessionViewer.cxx. ◆ ResetSession(). void TSessionViewer::ResetSession ; (; ). Reset Proof session. ; Definition at line 5159 of file TSessionViewer.cxx. ◆ SetBusy(). void TSessionViewer::SetBusy ; (; Bool_t ; busy = kTRUE). inline . Definition at line 619 of file TSessionViewer.h. ◆ SetChangePic(). void TSessionViewer::SetChangePic ; (; Bool_t ; change). inline . Definition at line 620 of file TSessionViewer.h. ◆ SetLogWindow(). void TSessionViewer::SetLogWindow ; (; TSessionLogView * ; log). inline . Definition at line 621 of file TSessionViewer.h. ◆ ShowEnabledPackages(). void TSessionViewer::ShowEnabledPackages ; (; ). Query list of enabled packages from proof and display it into a new text window. ; Definition at line 5372 of file TSessionViewer.cxx. ◆ ShowInfo(). void TSessionViewer::ShowInfo ; (; const char * ; txt). Display text in status bar.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSessionViewer.html:47960,configurat,configuration,47960,doc/master/classTSessionViewer.html,https://root.cern,https://root.cern/doc/master/classTSessionViewer.html,1,['configurat'],['configuration']
Deployability,"t ExistsDataSet (const char *uri) override;  Checks if the indicated dataset exits. ;  ; TFileCollection * GetDataSet (const char *group, const char *user, const char *dsName, UInt_t option=0, TMD5 **checksum=0);  Returns the dataset <dsName> of user <user> in group <group>. ;  ; TFileCollection * GetDataSet (const char *uri, const char *srv=0) override;  Utility function used in various methods for user dataset upload. ;  ; TMap * GetDataSets (const char *group, const char *user, const char *dsName=0, UInt_t option=0);  General purpose call to go through the existing datasets. ;  ; TMap * GetDataSets (const char *uri, UInt_t option=TDataSetManager::kExport) override;  Returns all datasets for the <group> and <user> specified by <uri>. ;  ; Long_t GetModTime (const char *uri);  Gets last dataset modification time. ;  ; const char * GetMSSUrl () const;  ; const char * GetStageOpts () const;  ; TClass * IsA () const override;  ; Int_t NotifyUpdate (const char *group, const char *user, const char *dspath, Long_t mtime, const char *checksum=0) override;  Save into the <datasetdir>/kDataSet_DataSetList file the name of the updated or created or modified dataset. ;  ; void ParseInitOpts (const char *opts) override;  Parse the input string and set the init bits accordingly Format is dir:<datasetdir> [mss:<mss-url>] [opt:<base-options>] The <datasetdir> is mandatory. ;  ; Int_t RegisterDataSet (const char *uri, TFileCollection *dataSet, const char *opt) override;  Register a dataset, perfoming quota checkings and verification, if required. ;  ; Bool_t RemoveDataSet (const char *uri) override;  Removes the indicated dataset. ;  ; Int_t ScanDataSet (const char *uri, UInt_t option=kReopen|kDebug) override;  Scans the dataset indicated by <uri> and returns the number of missing files. ;  ; Int_t ShowCache (const char *uri=0) override;  Show cached information matching uri. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDataSetManagerFile.html:1893,update,updated,1893,doc/master/classTDataSetManagerFile.html,https://root.cern,https://root.cern/doc/master/classTDataSetManagerFile.html,1,['update'],['updated']
Deployability,"t SetRnrState (Bool_t rnr);  Set render state of this element and of its children to the same value. ;  ; void SetSourceObject (TObject *o);  ; virtual void SetTransMatrix (const TGeoMatrix &mat);  Set transformation matrix from TGeo's matrix. ;  ; virtual void SetTransMatrix (Double_t *carr);  Set transformation matrix from column-major array. ;  ; void SetUserData (void *ud);  ; void SetVizModel (TEveElement *model);  Set visualization-parameter model element. ;  ; void SetVizTag (const TString &tag);  ; virtual Bool_t SingleRnrState () const;  ; void SpawnEditor ();  Show GUI editor for this object. ;  ; void StampColorSelection ();  ; void StampObjProps ();  ; void StampTransBBox ();  ; void StampVisibility ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Bool_t TestCSCBits (UChar_t f) const;  ; void VizDB_Apply (const char *tag);  Set visual parameters for this object for given tag. ;  ; void VizDB_Insert (const char *tag, Bool_t replace=kTRUE, Bool_t update=kTRUE);  Create a replica of element and insert it into VizDB with given tag. ;  ; void VizDB_Reapply ();  Reset visual parameters for this object from VizDB. ;  ; void VizDB_UpdateModel (Bool_t update=kTRUE);  Copy visual parameters from this element to viz-db model. ;  ; virtual void WriteVizParams (std::ostream &out, const TString &var);  Write-out visual parameters for this object. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveBoxSet.html:24106,update,update,24106,doc/master/classTEveBoxSet.html,https://root.cern,https://root.cern/doc/master/classTEveBoxSet.html,6,['update'],['update']
Deployability,"ual . B0 : _tag = +1. ; B0bar : _tag = -1 Parameters. [in]basisIndex. Implements RooAbsAnaConvPdf.; Definition at line 121 of file RooBCPEffDecay.cxx. ◆ DeclFileName(). static const char * RooBCPEffDecay::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 69 of file RooBCPEffDecay.h. ◆ generateEvent(). void RooBCPEffDecay::generateEvent ; (; Int_t ; code). overridevirtual . Generates mix-state dependent. ; Parameters. [in]code. Reimplemented from RooAbsPdf.; Definition at line 208 of file RooBCPEffDecay.cxx. ◆ getCoefAnalyticalIntegral(). Int_t RooBCPEffDecay::getCoefAnalyticalIntegral ; (; Int_t ; coef, . RooArgSet & ; allVars, . RooArgSet & ; analVars, . const char * ; rangeName = nullptr . ); const. overridevirtual . Default implementation of function advertising integration capabilities. ; The interface is similar to that of getAnalyticalIntegral except that an integer code is added that designates the coefficient number for which the integration capabilities are requested; This default implementation advertises that no internal integrals are supported. ; Reimplemented from RooAbsAnaConvPdf.; Definition at line 146 of file RooBCPEffDecay.cxx. ◆ getGenerator(). Int_t RooBCPEffDecay::getGenerator ; (; const RooArgSet & ; directVars, . RooArgSet & ; generateVars, . bool ; staticInitOK = true . ); const. overridevirtual . Load generatedVars with the subset of directVars that we can generate events for, and return a code that specifies the generator algorithm we will use. ; A code of zero indicates that we cannot generate any of the directVars (in this case, nothing should be added to generatedVars). Any non-zero codes will be passed to our generateEvent() implementation, but otherwise its value is arbitrary. The default implementation of this method returns zero. Subclasses will usually implement this method using the matchArgs() methods to advertise the algorithms they provide. ; Reimplemented from RooAb",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBCPEffDecay.html:81409,integrat,integration,81409,doc/master/classRooBCPEffDecay.html,https://root.cern,https://root.cern/doc/master/classRooBCPEffDecay.html,1,['integrat'],['integration']
Deployability,"ual . Evaluate this function at point x[0]. ; x[0] is the value along X if fCase =0, the value along Y if fCase=1 if params is non null, the array will be used instead of the internal TF2 parameters ; Reimplemented from TF1.; Definition at line 157 of file TF12.cxx. ◆ GetXY(). virtual Double_t TF12::GetXY ; (; ); const. inlinevirtual . Definition at line 47 of file TF12.h. ◆ IsA(). TClass * TF12::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TF1.; Definition at line 51 of file TF12.h. ◆ SavePrimitive(). void TF12::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; option = """" . ). overridevirtual . Save primitive as a C++ statement(s) on output stream out. ; Reimplemented from TF1.; Definition at line 176 of file TF12.cxx. ◆ SetXY(). void TF12::SetXY ; (; Double_t ; xy). virtual . Set the value of the constant for the TF2. ; constant in X when projecting along Y constant in Y when projecting along X The function title is set to include the value of the constant The current pad is updated ; Definition at line 190 of file TF12.cxx. ◆ Streamer(). void TF12::Streamer ; (; TBuffer & ; b). overridevirtual . Stream a class object. ; Reimplemented from TF1. ◆ StreamerNVirtual(). void TF12::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 51 of file TF12.h. Member Data Documentation. ◆ fCase. Int_t TF12::fCase. protected . Projection along X(0), or Y(1) ; Definition at line 29 of file TF12.h. ◆ fF2. TF2* TF12::fF2. protected . Pointer to the mother TF2. ; Definition at line 30 of file TF12.h. ◆ fXY. Double_t TF12::fXY. protected . Value along Y (if projection X) or X (if projection Y) ; Definition at line 28 of file TF12.h. Libraries for TF12:. [legend]; The documentation for this class was generated from the following files:; hist/hist/inc/TF12.h; hist/hist/src/TF12.cxx. TF12. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:48 (GVA Time) using Doxygen 1.9",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTF12.html:44452,update,updated,44452,doc/master/classTF12.html,https://root.cern,https://root.cern/doc/master/classTF12.html,1,['update'],['updated']
Deployability,"ual . Update the biases, given the current bias gradients. ; Implements TMVA::DNN::VOptimizer< Architecture_t, Layer_t, DeepNet_t >.; Definition at line 196 of file RMSProp.h. ◆ UpdateWeights(). template<typename Architecture_t , typename Layer_t , typename DeepNet_t > . auto TMVA::DNN::TRMSProp< Architecture_t, Layer_t, DeepNet_t >::UpdateWeights ; (; size_t ; layerIndex, . std::vector< Matrix_t > & ; weights, . const std::vector< Matrix_t > & ; weightGradients . ). protectedvirtual . Update the weights, given the current weight gradients. ; Implements TMVA::DNN::VOptimizer< Architecture_t, Layer_t, DeepNet_t >.; Definition at line 152 of file RMSProp.h. Member Data Documentation. ◆ fBiasUpdates. template<typename Architecture_t , typename Layer_t = VGeneralLayer<Architecture_t>, typename DeepNet_t = TDeepNet<Architecture_t, Layer_t>> . std::vector<std::vector<Matrix_t> > TMVA::DNN::TRMSProp< Architecture_t, Layer_t, DeepNet_t >::fBiasUpdates. protected . The accumulation of the past Biases for performing updates. ; Definition at line 60 of file RMSProp.h. ◆ fEpsilon. template<typename Architecture_t , typename Layer_t = VGeneralLayer<Architecture_t>, typename DeepNet_t = TDeepNet<Architecture_t, Layer_t>> . Scalar_t TMVA::DNN::TRMSProp< Architecture_t, Layer_t, DeepNet_t >::fEpsilon. protected . The Smoothing term used to avoid division by zero. ; Definition at line 53 of file RMSProp.h. ◆ fMomentum. template<typename Architecture_t , typename Layer_t = VGeneralLayer<Architecture_t>, typename DeepNet_t = TDeepNet<Architecture_t, Layer_t>> . Scalar_t TMVA::DNN::TRMSProp< Architecture_t, Layer_t, DeepNet_t >::fMomentum. protected . The momentum used for training. ; Definition at line 51 of file RMSProp.h. ◆ fPastSquaredBiasGradients. template<typename Architecture_t , typename Layer_t = VGeneralLayer<Architecture_t>, typename DeepNet_t = TDeepNet<Architecture_t, Layer_t>> . std::vector<std::vector<Matrix_t> > TMVA::DNN::TRMSProp< Architecture_t, Layer_t, DeepNet_t >",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TRMSProp.html:11111,update,updates,11111,doc/master/classTMVA_1_1DNN_1_1TRMSProp.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TRMSProp.html,1,['update'],['updates']
Deployability,"ual Bool_tTEveElement::SetRnrSelfChildren(Bool_t rnr_self, Bool_t rnr_children); virtual Bool_tTEveElement::SetRnrState(Bool_t rnr); voidTEveElement::SetSourceObject(TObject* o); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTEveElement::SetTransMatrix(Double_t* carr); virtual voidTEveElement::SetTransMatrix(const TGeoMatrix& mat); virtual voidTObject::SetUniqueID(UInt_t uid); voidTEveElement::SetUserData(void* ud); voidTEveElement::SetVizModel(TEveElement* model); voidTEveElement::SetVizTag(const TString& tag); virtual voidShowMembers(TMemberInspector&); virtual Bool_tTEveElement::SingleRnrState() const; virtual Int_tTNamed::Sizeof() const; voidTEveElement::SpawnEditor()MENU ; voidTEveElement::StampColorSelection(); voidTEveElement::StampObjProps(); voidTEveElement::StampTransBBox(); voidTEveElement::StampVisibility(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; Bool_tTEveElement::TestCSCBits(UChar_t f) const; virtual voidTEveElement::UnHighlighted(); virtual voidTEveProjected::UnRefProjectable(TEveProjectable* assumed_parent, bool notifyParent = true); virtual voidTEveElement::UnSelected(); virtual voidUpdateProjection(); virtual voidTObject::UseCurrentStyle(); voidTEveElement::VizDB_Apply(const char* tag)MENU ; voidTEveElement::VizDB_Insert(const char* tag, Bool_t replace = kTRUE, Bool_t update = kTRUE)MENU ; voidTEveElement::VizDB_Reapply()MENU ; voidTEveElement::VizDB_UpdateModel(Bool_t update = kTRUE)MENU ; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTEveTrackList::WriteVizParams(ostream& out, const TString& var).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TEveTrackListProjected.html:19304,update,update,19304,root/html534/TEveTrackListProjected.html,https://root.cern,https://root.cern/root/html534/TEveTrackListProjected.html,2,['update'],['update']
Deployability,"ual Int_t GetScanField () const;  ; TTreeFormula * GetSelect ();  ; virtual Long64_t GetSelectedRows ();  ; Float_t GetTargetMemoryRatio () const;  ; virtual Int_t GetTimerInterval () const;  ; virtual Long64_t GetTotBytes () const;  ; TBuffer * GetTransientBuffer (Int_t size);  Returns the transient buffer currently used by this TTree for reading/writing baskets. ;  ; virtual TTree * GetTree () const;  ; virtual TVirtualIndex * GetTreeIndex () const;  ; virtual Int_t GetTreeNumber () const;  ; virtual Int_t GetUpdate () const;  ; virtual TList * GetUserInfo ();  Return a pointer to the list containing user objects associated to this tree. ;  ; virtual Double_t * GetV1 ();  ; virtual Double_t * GetV2 ();  ; virtual Double_t * GetV3 ();  ; virtual Double_t * GetV4 ();  ; virtual Double_t * GetVal (Int_t i);  ; TTreeFormula * GetVar (Int_t i);  ; TTreeFormula * GetVar1 ();  ; TTreeFormula * GetVar2 ();  ; TTreeFormula * GetVar3 ();  ; TTreeFormula * GetVar4 ();  ; virtual Double_t * GetW ();  ; virtual Double_t GetWeight () const;  ; virtual Long64_t GetZipBytes () const;  ; virtual void IncrementTotalBuffers (Int_t nbytes);  ; virtual bool InPlaceClone (TDirectory *newdirectory, const char *options="""");  Copy the content to a new new file, update this TTree with the new location information and attach this TTree to the new directory. ;  ; TClass * IsA () const override;  ; bool IsFolder () const override;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; virtual Int_t LoadBaskets (Long64_t maxmemory=2000000000);  Read in memory all baskets from all branches up to the limit of maxmemory bytes. ;  ; virtual Long64_t LoadTree (Long64_t entry);  Set current entry. ;  ; virtual Long64_t LoadTreeFriend (Long64_t entry, TTree *T);  Load entry on behalf of our master tree, we may use an index. ;  ; virtual Int_t MakeClass (const char *classname=nullptr, Option_t *option="""");  Generate a skeleton analysis class for this ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTTree.html:32301,update,update,32301,doc/v632/classTTree.html,https://root.cern,https://root.cern/doc/v632/classTTree.html,5,['update'],['update']
Deployability,"ual Int_t GetScanField () const;  ; TTreeFormula * GetSelect ();  ; virtual Long64_t GetSelectedRows ();  ; Float_t GetTargetMemoryRatio () const;  ; virtual Int_t GetTimerInterval () const;  ; virtual Long64_t GetTotBytes () const;  ; TBuffer * GetTransientBuffer (Int_t size);  Returns the transient buffer currently used by this TTree for reading/writing baskets. ;  ; virtual TTree * GetTree () const;  ; virtual TVirtualIndex * GetTreeIndex () const;  ; virtual Int_t GetTreeNumber () const;  ; virtual Int_t GetUpdate () const;  ; virtual TList * GetUserInfo ();  Return a pointer to the list containing user objects associated to this tree. ;  ; virtual Double_t * GetV1 ();  ; virtual Double_t * GetV2 ();  ; virtual Double_t * GetV3 ();  ; virtual Double_t * GetV4 ();  ; virtual Double_t * GetVal (Int_t i);  ; TTreeFormula * GetVar (Int_t i);  ; TTreeFormula * GetVar1 ();  ; TTreeFormula * GetVar2 ();  ; TTreeFormula * GetVar3 ();  ; TTreeFormula * GetVar4 ();  ; virtual Double_t * GetW ();  ; virtual Double_t GetWeight () const;  ; virtual Long64_t GetZipBytes () const;  ; virtual void IncrementTotalBuffers (Int_t nbytes);  ; virtual bool InPlaceClone (TDirectory *newdirectory, const char *options="""");  Copy the content to a new new file, update this TTree with the new location information and attach this TTree to the new directory. ;  ; bool IsFolder () const override;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; virtual Int_t LoadBaskets (Long64_t maxmemory=2000000000);  Read in memory all baskets from all branches up to the limit of maxmemory bytes. ;  ; virtual Long64_t LoadTreeFriend (Long64_t entry, TTree *T);  Load entry on behalf of our master tree, we may use an index. ;  ; virtual Int_t MakeClass (const char *classname=nullptr, Option_t *option="""");  Generate a skeleton analysis class for this tree. ;  ; virtual Int_t MakeCode (const char *filename=nullptr);  Generate a skeleton function for this",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTreeSQL.html:14015,update,update,14015,doc/master/classTTreeSQL.html,https://root.cern,https://root.cern/doc/master/classTTreeSQL.html,1,['update'],['update']
Deployability,"ual Int_t defaultPrintContents (Option_t *opt) const;  Default choice of contents to be printed (name and value) ;  ; virtual StyleOption defaultPrintStyle (Option_t *opt) const;  ; virtual TClass * IsA () const;  ; virtual void printAddress (std::ostream &os) const;  Print class name of object. ;  ; virtual void printExtras (std::ostream &os) const;  Interface to print extras of object. ;  ; virtual void printStream (std::ostream &os, Int_t contents, StyleOption style, TString indent="""") const;  Print description of object on ostream, printing contents set by contents integer, which is interpreted as an OR of 'enum ContentsOptions' values and in the style given by 'enum StyleOption'. ;  ; virtual void printTree (std::ostream &os, TString indent="""") const;  Interface for tree structure printing of object. ;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Private Member Functions; void installFormulaOrThrow (const std::string &formulaa);  Check that the formula compiles, and also fulfills the assumptions. ;  ; std::string processFormula (std::string origFormula) const;  Process given formula by replacing all ordinal and name references by x[i], where i matches the position of the argument in _origList. ;  ; std::string reconstructFormula (std::string internalRepr) const;  From the internal representation, construct a formula by replacing all index place holders with the names of the variables that are being used to evaluate it. ;  ; RooArgList usedVariables () const;  Analyse internal formula to find out which variables are actually in use. ;  . Private Attributes; std::vector< bool > _isCategory;  ! Whether an element of the _origList is a category. ;  ; RooArgList _origList;  ! Original list of dependents ;  ; std::unique_ptr< TFormula > _tFormula;  ! The formula used to compute values ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFormula.html:13542,install,installFormulaOrThrow,13542,doc/master/classRooFormula.html,https://root.cern,https://root.cern/doc/master/classRooFormula.html,1,['install'],['installFormulaOrThrow']
Deployability,"ual voidSetAbsTolerance(double absTolerance); virtual voidSetFunction(const ROOT::Math::IGenFunction& f, bool copyFunc = false); voidSetFunction(ROOT::Math::GSLFuncPointer f, void* p = 0); voidSetIntegrationRule(ROOT::Math::Integration::GKRule); virtual voidSetRelTolerance(double relTolerance); virtual intStatus() const. protected:. boolCheckFunction(). private:. ROOT::Math::GSLIntegratorGSLIntegrator(const ROOT::Math::GSLIntegrator&); ROOT::Math::GSLIntegrator&operator=(const ROOT::Math::GSLIntegrator&). Data Members; private:. doublefAbsTol; doublefError; ROOT::Math::GSLFunctionWrapper*fFunction; size_tfMaxIntervals; doublefRelTol; doublefResult; ROOT::Math::Integration::GKRulefRule; size_tfSize; intfStatus; ROOT::Math::IntegrationOneDim::TypefType; ROOT::Math::GSLIntegrationWorkspace*fWorkspace. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GSLIntegrator(double absTol = 1.E-9, double relTol = 1E-6, size_t size = 1000); constructors; Default constructor of GSL Integrator for Adaptive Singular integration. @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const ROOT::Math::IntegrationOneDim::Type type, double absTol = 1.E-9, double relTol = 1E-6, size_t size = 1000); constructor of GSL Integrator. In the case of Adaptive integration the Gauss-Krond rule of 31 points is used. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const Integration::Type type, const Integration::GKRule rule, double absTol = 1.E-9, double relTol = 1E-6, size_t size = 1000). generic constructor for GSL Integrator. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param rule Gauss-Kronrod rule. It is used only for ADAPTIVE::Inte",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__GSLIntegrator.html:4480,integrat,integration,4480,root/html526/ROOT__Math__GSLIntegrator.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__GSLIntegrator.html,1,['integrat'],['integration']
Deployability,"ual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Data Members; protected:. vector<pRooArgSet>_asArr1! Array of 1st RooArgSet pointers; vector<pRooArgSet>_asArr2! Array of 2nd RooArgSet pointers; vector<pRooArgSet>_asArr3! Array of 3rd RooArgSet pointers; vector<pRooArgSet>_asArr4! Array of 4th RooArgSet pointers; vector<std::vector<Int_t> >_clArr! Array of array of code lists. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooAICRegistry(UInt_t size = 10). RooAICRegistry(const RooAICRegistry& other); Copy constructor. ~RooAICRegistry(); Destructor. Int_t store(const vector<Int_t>& codeList, RooArgSet* set1 = 0, RooArgSet* set2 = 0, RooArgSet* set3 = 0, RooArgSet* set4 = 0); Store given arrays of integer codes, and up to four RooArgSets in; the registry (each setX pointer may be null). The registry; clones all RooArgSets internally so the RooArgSets passed as; arguments do not need to live beyond the store() call. The return; value is a unique master code for the given configuration of; integers and RooArgSets. If an identical combination is; previously stored in the registry no objects are stored and the; unique code of the existing entry is returned. const std::vector<Int_t>& retrieve(Int_t masterCode) const; Retrieve the array of integer codes associated with the given master code. const std::vector<Int_t>& retrieve(Int_t masterCode, pRooArgSet& set1) const; Retrieve the array of integer codes associated with the given master code; and set the passed set1 pointer to the first RooArgSet associated with this master code. const std::vector<Int_t>& retrieve(Int_t masterCode) const. const std::vector<Int_t>& retrieve(Int_t masterCode, pRooArgSet& set1) const. » Last changed: Tue Mar 10 17:13:47 2015 » Last generated: 2015-03-10 17:13; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAICRegistry.html:2289,configurat,configuration,2289,root/html534/RooAICRegistry.html,https://root.cern,https://root.cern/root/html534/RooAICRegistry.html,1,['configurat'],['configuration']
Deployability,"ual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. private:. Bool_tfIsActiveis object attached to MemStat. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TMemStat(Option_t* option = ""read"", Int_t buffersize = 10000, Int_t maxcalls = 5000000); Supported options:; ""gnubuiltin"" - if declared, then MemStat will use gcc build-in function,; otherwise glibc backtrace will be used. Note: Currently MemStat uses a hard-coded output file name (for writing) = ""memstat.root"";. ~TMemStat(); destructor. void Close(); close the TMemStat manager. void Disable(); Disable memory statistics. void Enable(); Enable memory statistics. void Show(Double_t update = 0.1, Int_t nbigleaks = 20, const char* fname = ""*""); Show results. TMemStat(Option_t* option = ""read"", Int_t buffersize = 10000, Int_t maxcalls = 5000000). » Author: Anar Manafov (A.Manafov@gsi.de) 2008-03-02 » Copyright (C) 1995-2010, Rene Brun and Fons Rademakers. *; » Last changed: root/memstat:$Id$ » Last generated: 2015-03-14 16:45; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMemStat.html:9098,update,update,9098,root/html534/TMemStat.html,https://root.cern,https://root.cern/root/html534/TMemStat.html,1,['update'],['update']
Deployability,"ual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  . Static Public Member Functions; static const std::vector< std::string > & AddExtraInterpreterArgs (const std::vector< std::string > &args);  Provide command line arguments to the interpreter construction. ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static Int_t ConvertVersionCode2Int (Int_t code);  Convert version code to an integer, i.e. 331527 -> 51507. ;  ; static Int_t ConvertVersionInt2Code (Int_t v);  Convert version as an integer to version code as used in RVersion.h. ;  ; static const char * DeclFileName ();  ; static Int_t DecreaseDirLevel ();  Decrease the indentation level for ls(). ;  ; static const TString & GetBinDir ();  Get the binary directory in the installation. Static utility function. ;  ; static const TString & GetDataDir ();  Get the data directory in the installation. Static utility function. ;  ; static Int_t GetDirLevel ();  return directory level ;  ; static const TString & GetDocDir ();  Get the documentation directory in the installation. Static utility function. ;  ; static const TString & GetEtcDir ();  Get the sysconfig directory in the installation. Static utility function. ;  ; static const char **& GetExtraInterpreterArgs ();  INTERNAL function! Used by rootcling to inject interpreter arguments through a C-interface layer. ;  ; static const TString & GetIconPath ();  Get the icon path in the installation. Static utility function. ;  ; static const TString & GetIncludeDir ();  Get the include directory in the installation. Static utility function. ;  ; static const TString & GetLibDir ();  Get the library directory in the installation. Static utility function. ;  ; static const TStrin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTROOT.html:27421,install,installation,27421,doc/v632/classTROOT.html,https://root.cern,https://root.cern/doc/v632/classTROOT.html,2,['install'],['installation']
Deployability,"ualFuncNormSet () const;  ; void autoSelectDirtyMode ();  Set appropriate cache operation mode for integral depending on cache operation mode of server objects. ;  ; double evaluate () const override;  Perform the integration and return the result. ;  ; bool initNumIntegrator () const;  (Re)Initialize numerical integration engine if necessary. ;  ; virtual double integrate () const;  Perform hybrid numerical/analytical integration over all real-valued dependents. ;  ; bool isValidReal (double value, bool printError=false) const override;  Check if current value is valid. ;  ; virtual double jacobianProduct () const;  Return product of jacobian terms originating from analytical integration. ;  ; const RooArgSet & parameters () const;  ; bool redirectServersHook (const RooAbsCollection &newServerList, bool mustReplaceAll, bool nameChange, bool isRecursive) override;  Intercept server redirects and reconfigure internal object accordingly. ;  ; virtual double sum () const;  Perform summation of list of category dependents to be integrated. ;  ;  Protected Member Functions inherited from RooAbsReal; void attachToTree (TTree &t, Int_t bufSize=32000) override;  Attach object to a branch of given TTree. ;  ; void attachToVStore (RooVectorDataStore &vstore) override;  ; void copyCache (const RooAbsArg *source, bool valueOnly=false, bool setValDirty=true) override;  Copy the cached value of another RooAbsArg to our cache. ;  ; RooFit::OwningPtr< RooAbsReal > createIntObj (const RooArgSet &iset, const RooArgSet *nset, const RooNumIntConfig *cfg, const char *rangeName) const;  Internal utility function for createIntegral() that creates the actual integral object. ;  ; void fillTreeBranch (TTree &t) override;  Fill the tree branch that associated with this object with its current value. ;  ; void findInnerMostIntegration (const RooArgSet &allObs, RooArgSet &innerObs, const char *rangeName) const;  Utility function for createIntObj() that aids in the construct of recursive integr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooRealIntegral.html:50649,integrat,integrated,50649,doc/master/classRooRealIntegral.html,https://root.cern,https://root.cern/doc/master/classRooRealIntegral.html,1,['integrat'],['integrated']
Deployability,"uares of weights has been triggered,; via the function Sumw2, then the sum of the squares of weights is incremented; by w^2 in the bin corresponding to x. void FillN(Int_t ntimes, const Double_t* x, const Double_t* w, Int_t stride = 1); -*-*-*-*-*-*Fill this histogram with an array x and weights w*-*-*-*-*. ntimes: number of entries in arrays x and w (array size must be ntimes*stride); x: array of values to be histogrammed; w: array of weighs; stride: step size through arrays x and w. If the storage of the sum of squares of weights has been triggered,; via the function Sumw2, then the sum of the squares of weights is incremented; by w[i]^2 in the bin corresponding to x[i].; if w is NULL each entry is assumed a weight=1. -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*. void FillRandom(const char* fname, Int_t ntimes = 5000); -*-*-*-*-*Fill histogram following distribution in function fname*-*-*-*. The distribution contained in the function fname (TF1) is integrated; over the channel contents for the bin range of this histogram.; It is normalized to 1.; Getting one random number implies:; - Generating a random number between 0 and 1 (say r1); - Look in which bin in the normalized integral r1 corresponds to; - Fill histogram channel; ntimes random numbers are generated. One can also call TF1::GetRandom to get a random variate from a function. -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-**-*-*-*-*-*-*-*. void FillRandom(TH1* h, Int_t ntimes = 5000); -*-*-*-*-*Fill histogram following distribution in histogram h*-*-*-*. The distribution contained in the histogram h (TH1) is integrated; over the channel contents for the bin range of this histogram.; It is normalized to 1.; Getting one random number implies:; - Generating a random number between 0 and 1 (say r1); - Look in which bin in the normalized integral r1 corresponds to; - Fill histogram channel; ntimes random numbers are generated. SPECIAL CASE when the target histogram has the sa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TH1.html:67857,integrat,integrated,67857,root/html528/TH1.html,https://root.cern,https://root.cern/root/html528/TH1.html,3,['integrat'],['integrated']
Deployability,"uble IntegralUp(const ROOT::Math::IGenFunction& f, double a). evaluate the Integral of a function f over the semi-infinite interval (a,+inf); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower value of the integration interval. double IntegralLow(const ROOT::Math::IGenFunction& f, double b). evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param b upper value of the integration interval. double Integral(double a, double b). evaluate the Integral of a function f with known singular points over the defined Integral (a,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param pts vector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( \a a) and last element the upper value. double Integral(double a, double b); evaluate using cached function. evaluate the Integral over the defined interval (a,b) using the function previously set with GSLIntegrator::SetFunction method; @param a lower value of the integration interval; @param b upper value of the integration interval. double Integral(). evaluate the Integral over the infinite interval (-inf,+inf) using the function previously set with GSLIntegrator::SetFunction method. double IntegralUp(double a). evaluate the Integral of a function f over the semi-infinite interval (a,+inf) using the function previously set with GSLIntegrator::SetFunction method.; @param a lower value of the integration interval. double IntegralLow(double b). evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b) using the function previously set with GSLIntegrator::SetFunction method.; @param b upper value of the integration interval. double Inte",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__GSLIntegrator.html:9348,integrat,integration,9348,root/html528/ROOT__Math__GSLIntegrator.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__GSLIntegrator.html,6,['integrat'],['integration']
Deployability,"uble err, double min, double max); constructor for double limited Parameter. SetLimits(double low, double up). ParameterSettings(const string& name, double val); constructor for fixed Parameter. {}. void Set(const string& name, double value, double step); set value and name (unlimited parameter). SetName(const string& name). SetValue(double val). SetStepSize(double err). void Set(const string& name, double value, double step, double lower, double upper); set a limited parameter. void Set(const string& name, double value); set a fixed parameter. Fix(). ~ParameterSettings(). Destructor (no operations). {}. double Value() const; copy constructor and assignment operators (leave them to the compiler); return parameter value. { return fValue; }. double StepSize() const; return step size. { return fStepSize; }. double LowerLimit() const; return lower limit value. {return fLowerLimit;}. double UpperLimit() const; return upper limit value. {return fUpperLimit;}. bool IsFixed() const; check if is fixed. { return fFix; }. bool HasLowerLimit() const; check if parameter has lower limit. {return fHasLowerLimit; }. bool HasUpperLimit() const; check if parameter has upper limit. {return fHasUpperLimit; }. bool IsBound() const; check if is bound. { return fHasLowerLimit || fHasUpperLimit; }. bool IsDoubleBound() const; check if is double bound (upper AND lower limit). { return fHasLowerLimit && fHasUpperLimit; }. const std::string & Name() const; return name. { return fName; }. void Release(); release the parameter. {fFix = false;}. RemoveLimits(). void SetUpperLimit(double up); set a single upper limit. void SetLowerLimit(double low); set a single lower limit. » Author: L. Moneta Thu Sep 21 16:21:48 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:21; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Fit__ParameterSettings.html:3969,release,release,3969,root/html602/ROOT__Fit__ParameterSettings.html,https://root.cern,https://root.cern/root/html602/ROOT__Fit__ParameterSettings.html,1,['release'],['release']
Deployability,"uble err, double min, double max); constructor for double limited Parameter. SetLimits(double low, double up). ParameterSettings(const string& name, double val); constructor for fixed Parameter. {}. void Set(const string& name, double value, double step); set value and name (unlimited parameter). SetName(const string& name). SetValue(double val). SetStepSize(double err). void Set(const string& name, double value, double step, double lower, double upper); set a limited parameter. void Set(const string& name, double value); set a fixed parameter. Fix(). ~ParameterSettings(). Destructor (no operations). {}. double Value() const; copy constructor and assignment operators (leave them to the compiler); return parameter value. { return fValue; }. double StepSize() const; return step size. { return fStepSize; }. double LowerLimit() const; return lower limit value. {return fLowerLimit;}. double UpperLimit() const; return upper limit value. {return fUpperLimit;}. bool IsFixed() const; check if is fixed. { return fFix; }. bool HasLowerLimit() const; check if parameter has lower limit. {return fHasLowerLimit; }. bool HasUpperLimit() const; check if parameter has upper limit. {return fHasUpperLimit; }. bool IsBound() const; check if is bound. { return fHasLowerLimit || fHasUpperLimit; }. bool IsDoubleBound() const; check if is double bound (upper AND lower limit). { return fHasLowerLimit && fHasUpperLimit; }. const std::string & Name() const; return name. { return fName; }. void Release(); release the parameter. {fFix = false;}. RemoveLimits(). void SetUpperLimit(double up); set a single upper limit. void SetLowerLimit(double low); set a single lower limit. » Author: L. Moneta Thu Sep 21 16:21:48 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 16:58; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Fit__ParameterSettings.html:4113,release,release,4113,root/html534/ROOT__Fit__ParameterSettings.html,https://root.cern,https://root.cern/root/html534/ROOT__Fit__ParameterSettings.html,1,['release'],['release']
Deployability,"uble err, double min, double max); constructor for double limited Parameter. SetLimits(double low, double up). ParameterSettings(const string& name, double val); constructor for fixed Parameter. {}. void Set(const string& name, double value, double step); set value and name (unlimited parameter). SetName(const string& name). SetValue(double val). SetStepSize(double err). void Set(const string& name, double value, double step, double lower, double upper); set a limited parameter. void Set(const string& name, double value); set a fixed parameter. Fix(). ~ParameterSettings(). Destructor (no operations). {}. double Value() const; copy constructor and assignment operators (leave them to the compiler); return parameter value. { return fValue; }. double StepSize() const; return step size. { return fStepSize; }. double LowerLimit() const; return lower limit value. {return fLowerLimit;}. double UpperLimit() const; return upper limit value. {return fUpperLimit;}. bool IsFixed() const; check if is fixed. { return fFix; }. bool HasLowerLimit() const; check if parameter has lower limit. {return fHasLowerLimit; }. bool HasUpperLimit() const; check if parameter has upper limit. {return fHasUpperLimit; }. bool IsBound() const; check if is bound. { return fHasLowerLimit || fHasUpperLimit; }. bool IsDoubleBound() const; check if is double bound (upper AND lower limit). { return fHasLowerLimit && fHasUpperLimit; }. const std::string & Name() const; return name. { return fName; }. void Release(); release the parameter. {fFix = false;}. RemoveLimits(). void SetUpperLimit(double up); set a single upper limit. void SetLowerLimit(double low); set a single lower limit. » Author: L. Moneta Thu Sep 21 16:21:48 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/ROOT__Fit__ParameterSettings.html:3969,release,release,3969,root/html604/ROOT__Fit__ParameterSettings.html,https://root.cern,https://root.cern/root/html604/ROOT__Fit__ParameterSettings.html,1,['release'],['release']
Deployability,"uble val1, double val2);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsCachedPdf;  RooAbsCachedPdf ();  ;  RooAbsCachedPdf (const char *name, const char *title, int ipOrder=0);  Constructor. ;  ;  RooAbsCachedPdf (const RooAbsCachedPdf &other, const char *name=nullptr);  Copy constructor. ;  ; double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Implements internal (analytical) integration capabilities. ;  ; std::unique_ptr< RooAbsArg > compileForNormSet (RooArgSet const &normSet, RooFit::Detail::CompileContext &ctx) const override;  ; bool forceAnalyticalInt (const RooAbsArg &dep) const override;  Force RooRealIntegral to offer all our actual observable for internal integration. ;  ; Int_t getAnalyticalIntegralWN (RooArgSet &allVars, RooArgSet &analVars, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Advertises internal (analytical) integration capabilities. ;  ; RooDataHist * getCacheHist (const RooArgSet &nset) const;  ; RooDataHist * getCacheHist (const RooArgSet *nset=nullptr) const;  Return pointer to RooDataHist cache histogram for given choice of observables. ;  ; RooAbsPdf * getCachePdf (const RooArgSet &nset) const;  ; RooAbsPdf * getCachePdf (const RooArgSet *nset=nullptr) const;  Return pointer to RooHistPdf cache pdf for given choice of observables. ;  ; Int_t getInterpolationOrder () const;  ; double getValV (const RooArgSet *set=nullptr) const override;  Implementation of getVal() overriding default implementation of RooAbsPdf. ;  ; bool selfNormalized () const override;  Shows if a PDF is self-normalized, which means that no attempt is made to add a normalization term. ;  ; void setInterpolationOrder (int order);  Change the interpolation order that is used in RooHistPdf cache representation smoothing the RooDataHist sha",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFFTConvPdf.html:10111,integrat,integration,10111,doc/master/classRooFFTConvPdf.html,https://root.cern,https://root.cern/doc/master/classRooFFTConvPdf.html,1,['integrat'],['integration']
Deployability,"uble xhi) const;  Interface for returning an optional hint for initial sampling points when constructing a curve projected on observable obs. ;  ; virtual void preferredObservableScanOrder (const RooArgSet &obs, RooArgSet &orderedObs) const;  Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Structure printing. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream (dummy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFixedProdPdf.html:27524,integrat,integration,27524,doc/master/classRooFixedProdPdf.html,https://root.cern,https://root.cern/doc/master/classRooFixedProdPdf.html,30,"['configurat', 'integrat']","['configuration', 'integration']"
Deployability,"uble xhi) const;  Interface for returning an optional hint for initial sampling points when constructing a curve projected on observable obs. ;  ; virtual void preferredObservableScanOrder (const RooArgSet &obs, RooArgSet &orderedObs) const;  Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Structure printing. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream (dummy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBMixDecay.html:31834,integrat,integration,31834,doc/master/classRooBMixDecay.html,https://root.cern,https://root.cern/doc/master/classRooBMixDecay.html,176,"['configurat', 'integrat']","['configuration', 'integration']"
Deployability,"uble xhi) const;  Interface for returning an optional hint for initial sampling points when constructing a curve projected on observable obs. ;  ; virtual void preferredObservableScanOrder (const RooArgSet &obs, RooArgSet &orderedObs) const;  Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Structure printing. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream (dummy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constructor. ;  ;  RooAbsArg (const c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooConstVar.html:16720,integrat,integration,16720,doc/master/classRooConstVar.html,https://root.cern,https://root.cern/doc/master/classRooConstVar.html,2,"['configurat', 'integrat']","['configuration', 'integration']"
Deployability,"uble* a, double* b);. return the type of the integration used. MCIntegration::Type MCType() const;. return the Result of the last Integral calculation. double Error() const. return the estimate of the absolute Error of the last Integral calculation. int Status() const. return the Error Status of the last Integral calculation. int NEval() const. return number of function evaluations in calculating the integral; (This is an fixed by the user). { return fCalls; }. void SetRelTolerance(double relTolerance); setter for control Parameters (getters are not needed so far ). set the desired relative Error. void SetAbsTolerance(double absTolerance). set the desired absolute Error. void SetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt). set the integration options. void SetGenerator(ROOT::Math::GSLRngWrapper* r). set random number generator. void SetType(ROOT::Math::MCIntegration::Type type). set integration method. void SetTypeName(const char* typeName). set integration method using a name instead of an enumeration. void SetMode(ROOT::Math::MCIntegration::Mode mode). set integration mode for VEGAS method; The possible MODE are :; MCIntegration::kIMPORTANCE (default) : VEGAS will use importance sampling; MCIntegration::kSTRATIFIED : VEGAS will use stratified sampling if certain condition are satisfied; MCIntegration::kIMPORTANCE_ONLY : VEGAS will always use importance smapling. void SetParameters(const VegasParameters &p). set default parameters for VEGAS method. void SetParameters(const MiserParameters &p). set default parameters for MISER method. double Sigma(). set parameters for PLAIN method. void SetPParameters(const PlainParameters &p);. returns the error sigma from the last iteration of the Vegas algorithm. double ChiSqr(). returns chi-squared per degree of freedom for the estimate of the integral in the Vegas algorithm. MCIntegration::Type GetType() const. return the type; (need to be called GetType to avois a conflict with typedef). { return fType; }. const ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__GSLMCIntegrator.html:6905,integrat,integration,6905,root/html602/ROOT__Math__GSLMCIntegrator.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__GSLMCIntegrator.html,2,['integrat'],['integration']
Deployability,uble* b);. return the type of the integration used. MCIntegration::Type MCType() const;. return the Result of the last Integral calculation. double Error() const. return the estimate of the absolute Error of the last Integral calculation. int Status() const. return the Error Status of the last Integral calculation. int NEval() const. return number of function evaluations in calculating the integral; (This is an fixed by the user). { return fCalls; }. void SetRelTolerance(double relTolerance); setter for control Parameters (getters are not needed so far ). set the desired relative Error. void SetAbsTolerance(double absTolerance). set the desired absolute Error. void SetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt). set the integration options. void SetGenerator(ROOT::Math::GSLRngWrapper* r). 	 set random number generator. void SetType(ROOT::Math::IntegrationMultiDim::Type type). 	 set integration method. void SetTypeName(const char* typeName). 	 set integration method using a name instead of an enumeration. void SetMode(ROOT::Math::MCIntegration::Mode mode). 	 set integration mode for VEGAS method; The possible MODE are :; MCIntegration::kIMPORTANCE (default) : VEGAS will use importance sampling; MCIntegration::kSTRATIFIED : VEGAS will use stratified sampling if certain condition are satisfied; MCIntegration::kIMPORTANCE_ONLY : VEGAS will always use importance smapling. void SetParameters(const VegasParameters &p). 	 set default parameters for VEGAS method. void SetParameters(const MiserParameters &p). 	 set default parameters for MISER method. double Sigma(). 	 set parameters for PLAIN method. void SetPParameters(const PlainParameters &p);. 	 returns the error sigma from the last iteration of the Vegas algorithm. double ChiSqr(). 	 returns chi-squared per degree of freedom for the estimate of the integral in the Vegas algorithm. MCIntegration::Type GetType() const. return the type; (need to be called GetType to avois a conflict with typedef). { return fTy,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__GSLMCIntegrator.html:6487,integrat,integration,6487,root/html528/ROOT__Math__GSLMCIntegrator.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__GSLMCIntegrator.html,3,['integrat'],['integration']
Deployability,"uble_t ApplyKernelFunction(Double_t normalized_distance); from the normalized euclidean distance calculate the distance; for a certain kernel. Double_t KernelNormalization(Double_t pdf); Calculating the normalization factor only once (might need a reset at some point.; Can the method be restarted with different params?). Double_t GetNormalizedDistance(const TMVA::Event& base_event, const TMVA::BinarySearchTreeNode& sample_event, Double_t* dim_normalization); We use Euclidian metric here. Might not be best or most efficient. Double_t NormSinc(Double_t x); NormSinc. Double_t LanczosFilter(Int_t level, Double_t x); Lanczos Filter. Float_t GetError(Float_t countS, Float_t countB, Float_t sumW2S, Float_t sumW2B) const; statistical error estimate for RS estimator. void AddWeightsXMLTo(void* parent) const; write weights to xml file. void ReadWeightsFromXML(void* wghtnode). void ReadWeightsFromStream(istream& istr); read weight info from file. void WriteWeightsToStream(TFile& rf) const; write training sample (TTree) to file. void ReadWeightsFromStream(TFile& istr); read training sample from file. TMVA::MethodPDERS* ThisPDERS( void ); static pointer to this object. void UpdateThis( void ); update static this pointer. void MakeClassSpecific(ostream& , const TString& ) const; write specific classifier response. void GetHelpMessage() const; get help message text. typical length of text line:; ""|--------------------------------------------------------------|"". BinarySearchTree* GetBinaryTree( void ); accessors. { return fBinaryTree; }. const Ranking* CreateRanking(); ranking of input variables. { return 0; }. » Author: Andreas Hoecker, Yair Mahalalel, Joerg Stelzer, Helge Voss, Kai Voss » Copyright (c) 2005: *; » Last changed: root/tmva $Id: MethodPDERS.h 39395 2011-05-26 10:05:54Z moneta $ » Last generated: 2011-07-04 15:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA__MethodPDERS.html:24879,update,update,24879,root/html530/TMVA__MethodPDERS.html,https://root.cern,https://root.cern/root/html530/TMVA__MethodPDERS.html,1,['update'],['update']
Deployability,"uble_t phimin,; 1242 Double_t phimax, Double_t rmin, Double_t rmax, Option_t *option); 1243{; 1244 return fChecker->LegoPlot(ntheta, themin, themax, nphi, phimin, phimax, rmin, rmax, option);; 1245}; 1246////////////////////////////////////////////////////////////////////////////////; 1247/// Convert a local vector according view rotation matrix; 1248 ; 1249void TGeoPainter::LocalToMasterVect(const Double_t *local, Double_t *master) const; 1250{; 1251 for (Int_t i = 0; i < 3; i++); 1252 master[i] = -local[0] * fMat[i] - local[1] * fMat[i + 3] - local[2] * fMat[i + 6];; 1253}; 1254 ; 1255////////////////////////////////////////////////////////////////////////////////; 1256/// Check if a pad and view are present and send signal ""Modified"" to pad.; 1257 ; 1258void TGeoPainter::ModifiedPad(Bool_t update) const; 1259{; 1260 if (!gPad); 1261 return;; 1262 if (update) {; 1263 gPad->Update();; 1264 return;; 1265 }; 1266 TView *view = gPad->GetView();; 1267 if (!view); 1268 return;; 1269 view->SetViewChanged();; 1270 gPad->Modified();; 1271 if (gROOT->FromPopUp()); 1272 gPad->Update();; 1273}; 1274 ; 1275////////////////////////////////////////////////////////////////////////////////; 1276/// Paint current geometry according to option.; 1277 ; 1278void TGeoPainter::Paint(Option_t *option); 1279{; 1280 if (!fGeoManager || !fTopVolume); 1281 return;; 1282 Bool_t is_padviewer = kTRUE;; 1283 if (gPad); 1284 is_padviewer = (!strcmp(gPad->GetViewer3D()->ClassName(), ""TViewer3DPad"")) ? kTRUE : kFALSE;; 1285 ; 1286 fIsRaytracing = fTopVolume->IsRaytracing();; 1287 if (fTopVolume->IsVisContainers()); 1288 fVisOption = kGeoVisDefault;; 1289 else if (fTopVolume->IsVisLeaves()); 1290 fVisOption = kGeoVisLeaves;; 1291 else if (fTopVolume->IsVisOnly()); 1292 fVisOption = kGeoVisOnly;; 1293 else if (fTopVolume->IsVisBranch()); 1294 fVisOption = kGeoVisBranch;; 1295 ; 1296 if (!fIsRaytracing || !is_padviewer) {; 1297 if (fGeoManager->IsDrawingExtra()) {; 1298 // loop the list of physical vo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoPainter_8cxx_source.html:40151,update,update,40151,doc/master/TGeoPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoPainter_8cxx_source.html,2,['update'],['update']
Deployability,"uble_t xmax, Double_t ymin, Double_t ymax); Construct a two-dimensional RooPlot with ranges and properties taken; from variables var1 and var2 but with an overriding range definition; of [xmin,xmax] x [ymin,ymax]. RooPlot(const char* name, const char* title, const RooAbsRealLValue &var, Double_t xmin, Double_t xmax, Int_t nbins); Create an 1-dimensional with all properties taken from 'var', but; with an explicit range [xmin,xmax] and a default binning of 'nbins'. RooPlot(const RooAbsRealLValue &var, Double_t xmin, Double_t xmax, Int_t nbins); Create an 1-dimensional with all properties taken from 'var', but; with an explicit range [xmin,xmax] and a default binning of 'nbins'. RooPlot* emptyClone(const char* name); Return empty clone of current RooPlot. void initialize(); Perform initialization that is common to all constructors. TString histName() const; Construct automatic name of internal TH1. ~RooPlot(); Destructor. void updateNormVars(const RooArgSet& vars); Install the given set of observables are reference normalization; variables for this frame. These observables are e.g. later used; to automatically project out observables when plotting functions; on this frame. This function is only effective when called the; first time on a frame. Stat_t GetBinContent(Int_t ) const; A plot object is a frame without any bin contents of its own so this; method always returns zero. Stat_t GetBinContent(Int_t , Int_t ) const; A plot object is a frame without any bin contents of its own so this; method always returns zero. Stat_t GetBinContent(Int_t , Int_t , Int_t ) const; A plot object is a frame without any bin contents of its own so this; method always returns zero. void addObject(TObject* obj, Option_t* drawOptions = """", Bool_t invisible = kFALSE); Add a generic object to this plot. The specified options will be; used to Draw() this object later. The caller transfers ownership; of the object with this call, and the object will be deleted; when its containing plot object is",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooPlot.html:14285,update,updateNormVars,14285,root/html526/RooPlot.html,https://root.cern,https://root.cern/root/html526/RooPlot.html,1,['update'],['updateNormVars']
Deployability,"uble_t xmax, Double_t ymin, Double_t ymax); Construct a two-dimensional RooPlot with ranges and properties taken; from variables var1 and var2 but with an overriding range definition; of [xmin,xmax] x [ymin,ymax]. RooPlot(const char* name, const char* title, const RooAbsRealLValue& var, Double_t xmin, Double_t xmax, Int_t nBins); Create an 1-dimensional with all properties taken from 'var', but; with an explicit range [xmin,xmax] and a default binning of 'nbins'. RooPlot(const RooAbsRealLValue& var, Double_t xmin, Double_t xmax, Int_t nBins); Create an 1-dimensional with all properties taken from 'var', but; with an explicit range [xmin,xmax] and a default binning of 'nbins'. RooPlot* emptyClone(const char* name); Return empty clone of current RooPlot. void initialize(); Perform initialization that is common to all constructors. TString histName() const; Construct automatic name of internal TH1. ~RooPlot(); Destructor. void updateNormVars(const RooArgSet& vars); Install the given set of observables are reference normalization; variables for this frame. These observables are e.g. later used; to automatically project out observables when plotting functions; on this frame. This function is only effective when called the; first time on a frame. Stat_t GetBinContent(Int_t ) const; A plot object is a frame without any bin contents of its own so this; method always returns zero. Stat_t GetBinContent(Int_t , Int_t ) const; A plot object is a frame without any bin contents of its own so this; method always returns zero. Stat_t GetBinContent(Int_t , Int_t , Int_t ) const; A plot object is a frame without any bin contents of its own so this; method always returns zero. void addObject(TObject* obj, Option_t* drawOptions = """", Bool_t invisible = kFALSE); Add a generic object to this plot. The specified options will be; used to Draw() this object later. The caller transfers ownership; of the object with this call, and the object will be deleted; when its containing plot object is",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooPlot.html:14292,update,updateNormVars,14292,root/html528/RooPlot.html,https://root.cern,https://root.cern/root/html528/RooPlot.html,6,['update'],['updateNormVars']
Deployability,"uble normal_quantile (double z, double sigma);  Inverse ( \(D^{-1}(z)\)) of the cumulative distribution function of the lower tail of the normal (Gaussian) distribution (normal_cdf). ;  ; double uniform_quantile_c (double z, double a, double b);  Inverse ( \(D^{-1}(z)\)) of the cumulative distribution function of the upper tail of the uniform (flat) distribution (uniform_cdf_c). ;  ; double uniform_quantile (double z, double a, double b);  Inverse ( \(D^{-1}(z)\)) of the cumulative distribution function of the lower tail of the uniform (flat) distribution (uniform_cdf). ;  ; double landau_quantile (double z, double xi=1);  Inverse ( \(D^{-1}(z)\)) of the cumulative distribution function of the lower tail of the Landau distribution (landau_cdf). ;  ; double landau_quantile_c (double z, double xi=1);  Inverse ( \(D^{-1}(z)\)) of the cumulative distribution function of the upper tail of the landau distribution (landau_cdf_c). ;  ; Special Functions from MathCore; double erf (double x);  Error function encountered in integrating the normal distribution. ;  ; double erfc (double x);  Complementary error function. ;  ; double tgamma (double x);  The gamma function is defined to be the extension of the factorial to real numbers. ;  ; double lgamma (double x);  Calculates the logarithm of the gamma function. ;  ; double inc_gamma (double a, double x);  Calculates the normalized (regularized) lower incomplete gamma function (lower integral) ;  ; double inc_gamma_c (double a, double x);  Calculates the normalized (regularized) upper incomplete gamma function (upper integral) ;  ; double beta (double x, double y);  Calculates the beta function. ;  ; double inc_beta (double x, double a, double b);  Calculates the normalized (regularized) incomplete beta function. ;  ; double sinint (double x);  Calculates the sine integral. ;  ; double cosint (double x);  Calculates the real part of the cosine integral Re(Ci). ;  ; Quantile Functions from MathMore; The implementation used is tha",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1Math.html:110139,integrat,integrating,110139,doc/master/namespaceROOT_1_1Math.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html,2,['integrat'],['integrating']
Deployability,"ubmission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome How to create a ROOTbook?. ROOT 6.07 Onwards; The minimal version of Jupyter required in this case is 4.0.; Note that the sudo command might not be necessary on some platforms.; Provided that ROOT is installed on your machine, these are the steps to follow to use a ROOT-flavoured C++ notebook:; # Install dependencies; sudo pip install jupyter metakernel zmq;  ; # Launch ROOT notebook; root --notebook; This will open the notebook interface in your browser, where you will be able to select a ROOT C++ kernel. Note that this procedure assumes that executable python is the executable of Python2.; ROOT 6.05/02; An initial version of the ROOT Kernel is available already for version 6.05. It can be setup and ran with the following commands:; # Install IPython notebook 3.2; sudo pip install -Iv ipython[notebook]==3.2.0;  ; # Launch ROOT notebook; root --notebook. Sitemap. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instruct",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/how/how-create-rootbook.html:2060,install,installed,2060,d/how/how-create-rootbook.html,https://root.cern,https://root.cern/d/how/how-create-rootbook.html,2,['install'],"['install', 'installed']"
Deployability,"uctor & Destructor Documentation. ◆ ~VirtualIntegratorMultiDim(). ROOT::Math::VirtualIntegratorMultiDim::~VirtualIntegratorMultiDim ; (; ). inlineoverride . destructor: no operation ; Definition at line 165 of file VirtualIntegrator.h. Member Function Documentation. ◆ Integral(). virtual double ROOT::Math::VirtualIntegratorMultiDim::Integral ; (; const double * ; , . const double * ;  . ). pure virtual . evaluate multi-dim integral ; Implemented in ROOT::Math::GSLMCIntegrator, and ROOT::Math::AdaptiveIntegratorMultiDim. ◆ Options(). virtual ROOT::Math::IntegratorMultiDimOptions ROOT::Math::VirtualIntegratorMultiDim::Options ; (; ); const. pure virtual . get the option used for the integration implement by derived class otherwise return default ones ; Implemented in ROOT::Math::AdaptiveIntegratorMultiDim, and ROOT::Math::GSLMCIntegrator. ◆ SetFunction(). virtual void ROOT::Math::VirtualIntegratorMultiDim::SetFunction ; (; const IMultiGenFunction & ; ). pure virtual . setting a multi-dim function ; Implemented in ROOT::Math::AdaptiveIntegratorMultiDim, and ROOT::Math::GSLMCIntegrator. ◆ SetOptions(). virtual void ROOT::Math::VirtualIntegratorMultiDim::SetOptions ; (; const ROOT::Math::IntegratorMultiDimOptions & ; opt). inlinevirtual . set the options (if needed must be re-implemented by derived classes) ; Reimplemented in ROOT::Math::AdaptiveIntegratorMultiDim, and ROOT::Math::GSLMCIntegrator.; Definition at line 183 of file VirtualIntegrator.h. ◆ Type(). virtual ROOT::Math::IntegrationMultiDim::Type ROOT::Math::VirtualIntegratorMultiDim::Type ; (; ); const. inlinevirtual . return type of integrator ; Definition at line 178 of file VirtualIntegrator.h. Libraries for ROOT::Math::VirtualIntegratorMultiDim:. [legend]; The documentation for this class was generated from the following file:; math/mathcore/inc/Math/VirtualIntegrator.h. ROOTMathVirtualIntegratorMultiDim. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:24 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1VirtualIntegratorMultiDim.html:4025,integrat,integrator,4025,doc/master/classROOT_1_1Math_1_1VirtualIntegratorMultiDim.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1VirtualIntegratorMultiDim.html,1,['integrat'],['integrator']
Deployability,"uctor of one dimensional Integrator passing a function interface. @param f integration function (1D interface). It is copied inside; @param type integration type (adaptive, non-adaptive, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE type). SetFunction(const ROOT::Math::IGenFunction& f, bool copy = false). IntegratorOneDim(const ROOT::Math::IGenFunction& f, ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kADAPTIVE, double absTol = 1.E-9, double relTol = 1E-6, unsigned int size = 1000, int rule = 3). Template Constructor of one dimensional Integrator passing a generic function object. @param f integration function (any C++ callable object implementing operator()(double x); @param type integration type (adaptive, non-adaptive, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE type). virtual ~IntegratorOneDim(); destructor (will delete contained pointer). IntegratorOneDim & operator=(const ROOT::Math::IntegratorOneDim& ); { return *this; }. double Integral(const ROOT::Math::IGenFunction& f, double a, double b); integration methods using a function. evaluate the Integral of a function f over the defined interval (a,b); @param f integration function. The function type must be a C++ callable object implementing operator()(double x); @param a lower value of the integration interval; @param b upper value of the integration interval. double Integral(const ROOT::Math::IGenFunction& f, double a, double b). evaluate the Integral of a function f over the defined interval (a,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower value of the integration interval; @param b upper value of the integration interval. re",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__IntegratorOneDim.html:6471,integrat,integration,6471,root/html526/ROOT__Math__IntegratorOneDim.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__IntegratorOneDim.html,1,['integrat'],['integration']
Deployability,"ucture; Int_tTFile::fNbytesInfoNumber of bytes for StreamerInfo record; Int_tTDirectoryFile::fNbytesKeysNumber of bytes for the keys; Int_tTDirectoryFile::fNbytesNameNumber of bytes in TNamed at creation time; Bool_tTFile::fNoAnchorInName!True if we don't want to force the anchor to be appended to the file name; Long64_tTFile::fOffset!Seek offset cache; TList*TFile::fOpenPhases!Time info about open phases; TStringTFile::fOptionFile options; const char**fOtherTypes! pointer on list of other SQL types like TEXT or blob; TStringTDirectory::fPathBuffer!Buffer for GetPath() function; TObjArray*TFile::fProcessIDs!Array of pointers to TProcessIDs; Int_tfQuerisCounter! how many query was applied; Int_tTFile::fReadCallsNumber of read calls ( not counting the cache calls ); TStringTFile::fRealNameEffective real file name (not original url); TSQLServer*fSQL! interface to SQL database ; TList*fSQLClassInfos! list of SQL class infos; Int_tfSQLIOversion! version of SQL I/O which is stored in configurations; Long64_tTDirectoryFile::fSeekDirLocation of directory on file; Long64_tTFile::fSeekFreeLocation on disk of free segments structure; Long64_tTFile::fSeekInfoLocation on disk of StreamerInfo record; Long64_tTDirectoryFile::fSeekKeysLocation of Keys record on file; Long64_tTDirectoryFile::fSeekParentLocation of parent directory on file; Int_tfStmtCounter! count numbers of active statements; Double_tTFile::fSum2BufferSum of squares of buffer sizes of objects written so far; Double_tTFile::fSumBufferSum of buffer sizes of objects written so far; TStringfTablesType! type, used in CREATE TABLE statements; TStringTNamed::fTitleobject title; TUUIDTDirectory::fUUIDUnique identifier; Char_tTFile::fUnitsNumber of bytes for file pointers; TUrlTFile::fUrl!URL of file; Int_tfUseIndexes! use indexes for tables: 0 - off, 1 - only for basic tables, 2 + normal class tables, 3 - all tables; Bool_tfUseSuffixes! use suffixes in column names like fValue:Int_t or fObject:pointer; Int_tfUseTransactions",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TSQLFile.html:30766,configurat,configurations,30766,root/html530/TSQLFile.html,https://root.cern,https://root.cern/root/html530/TSQLFile.html,3,['configurat'],['configurations']
Deployability,udaMatrixTCudaMatrix Class ;  CTDataLoaderTDataLoader ;  CTDeviceTDevice ;  CTGradientDescent;  CTLayerGeneric layer class ;  CTNetGeneric neural network class ;  CTReferenceThe reference architecture class ;  CTSharedLayerLayer class width shared weight and bias layers ;  ►NkNN;  CEvent;  CModulekNN;  CNode;  CAbsoluteDeviationLossFunctionAbsolute Deviation Loss Function ;  CAbsoluteDeviationLossFunctionBDTAbsolute Deviation BDT Loss Function ;  CAbsValue;  CBDTEventWrapper;  CBinarySearchTreeA simple Binary search tree including a volume search method ;  CBinarySearchTreeNodeNode for the BinarySearch or Decision Trees ;  CBinaryTreeBase class for BinarySearch and Decision Trees ;  CCCPrunerA helper class to prune a decision tree using the Cost Complexity method (see Classification and Regression Trees by Leo Breiman et al) ;  ►CCCTreeWrapper;  CCCTreeNode;  CClassifierFactoryThis is the MVA factory ;  CClassInfoClass that contains all the information of a class ;  Ccompose_binary_t;  Ccompose_unary_t;  ►CConfigSingleton class for global configuration settings used by TMVA ;  CIONames;  CVariablePlotting;  CConfigurable;  CConvergenceTestCheck for convergence ;  CCostComplexityPruneToolA class to prune a decision tree using the Cost Complexity method ;  CCrossEntropyImplementation of the CrossEntropy as separation criterion ;  CCrossValidation;  CCrossValidationResult;  CDataInputHandlerClass that contains all the data information ;  CDataLoader;  CDataSetClass that contains all the data information ;  ►CDataSetFactoryClass that contains all the data information ;  CEventStats;  CDataSetInfoClass that contains all the data information ;  CDataSetManagerClass that contains all the data information ;  CDecisionTreeImplementation of a Decision Tree ;  CDecisionTreeNode;  CDeleteFunctor_t;  CDTNodeTrainingInfo;  CEnvelopeBase class for all machine learning algorithms ;  CEvent;  CExpectedErrorPruneToolA helper class to prune a decision tree using the expected error (C4.,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v610/annotated.html:69859,configurat,configuration,69859,doc/v610/annotated.html,https://root.cern,https://root.cern/doc/v610/annotated.html,1,['configurat'],['configuration']
Deployability,"ude the uncertainty from the expected number of events, the Normalization() argument with ScaleType RooAbsReal::RelativeExpected has to be passed, e.g. pdf.plotOn(frame, VisualizeError(fitResult), Normalization(1.0, RooAbsReal::RelativeExpected));; RooAbsReal::RelativeExpected@ RelativeExpectedDefinition RooAbsReal.h:276. VisualizeError(const RooFitResult& fitres, const RooArgSet& param, double Z=1, bool linearMethod=true) Visualize the uncertainty on the subset of parameters 'param', as given in fitres, at 'Z' sigma . Reimplemented from RooAbsReal.; Reimplemented in RooSimultaneous, and RooSimultaneous.; Definition at line 1937 of file RooAbsPdf.cxx. ◆ prepareMultiGen(). RooAbsPdf::prepareMultiGen ; (; const RooArgSet & ; whatVars, . const RooCmdArg & ; arg1 = {}, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {} . ). Prepare GenSpec configuration object for efficient generation of multiple datasets from identical specification. ; NoteThis method does not perform any generation. To generate according to generations specification call RooAbsPdf::generate(RooAbsPdf::GenSpec&) const. Details copied from RooAbsPdf::generate():; Generate the specified number of events or expectedEvents() if not specified. Parameters. [in]whatVarsChoose variables in which to generate events. Variables not listed here will remain constant and not be used for event generation. ; [in]arg1,arg2,arg3,arg4,arg5,arg6Optional RooCmdArg() to change behaviour of generate(). . ReturnsRooDataSet *, owned by caller.; Any variables of this PDF that are not in whatVars will use their current values and be treated as fixed parameters. Returns zero in case of an error. Type of CmdArg Effect on generate . Name(const char* name) Name of the output dataset . Verbose(bool flag) Print informational messages during event generation . NumEvents(int nevt) Generate specified number of events . Extended",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsPdf.html:146461,configurat,configuration,146461,doc/master/classRooAbsPdf.html,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html,1,['configurat'],['configuration']
Deployability,"uded for testing and performance evaluation)]; : InputLayout: ""0|0|0"" [The Layout of the input]; : BatchLayout: ""0|0|0"" [The Layout of the batch]; : RandomSeed: ""0"" [Random seed used for weight initialization and batch shuffling]; : ValidationSize: ""20%"" [Part of the training data to use for validation. Specify as 0.2 or 20% to use a fifth of the data set as validation set. Specify as 100 to use exactly 100 events. (Default: 20%)]; DL_CPU : [dataset] : Create Transformation ""N"" with events from all classes.; : ; : Transformation, Variable selection : ; : Input : variable 'var1' <---> Output : variable 'var1'; : Input : variable 'var2' <---> Output : variable 'var2'; : Input : variable 'var3' <---> Output : variable 'var3'; : Input : variable 'var4' <---> Output : variable 'var4'; ␛[31m<ERROR> : CUDA backend not enabled. Please make sure you have CUDA installed and it was successfully detected by CMAKE by using -Dtmva-gpu=On ␛[0m; : Will now use instead the CPU architecture !; : Will now use the CPU architecture with BLAS and IMT support !; Factory : ␛[1mTrain all methods␛[0m; Factory : [dataset] : Create Transformation ""I"" with events from all classes.; : ; : Transformation, Variable selection : ; : Input : variable 'var1' <---> Output : variable 'var1'; : Input : variable 'var2' <---> Output : variable 'var2'; : Input : variable 'var3' <---> Output : variable 'var3'; : Input : variable 'var4' <---> Output : variable 'var4'; Factory : [dataset] : Create Transformation ""D"" with events from all classes.; : ; : Transformation, Variable selection : ; : Input : variable 'var1' <---> Output : variable 'var1'; : Input : variable 'var2' <---> Output : variable 'var2'; : Input : variable 'var3' <---> Output : variable 'var3'; : Input : variable 'var4' <---> Output : variable 'var4'; Factory : [dataset] : Create Transformation ""P"" with events from all classes.; : ; : Transformation, Variable selection : ; : Input : variable 'var1' <---> Output : variable 'var1'; : Input : vari",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAMulticlass_8C.html:6684,install,installed,6684,doc/master/TMVAMulticlass_8C.html,https://root.cern,https://root.cern/doc/master/TMVAMulticlass_8C.html,1,['install'],['installed']
Deployability,"ue, also update all the existing branches. ; Definition at line 2821 of file TBranch.cxx. ◆ SetFile() [1/2]. void TBranch::SetFile ; (; const char * ; fname). virtual . Set file where this branch writes/reads its buffers. ; By default the branch buffers reside in the file where the Tree was created. If the file name where the tree was created is an absolute path name or an URL (e.g. root://host/...) and if the fname is not an absolute path name or an URL then the path of the tree file is prepended to fname to make the branch file relative to the tree file. In this case one can move the tree + all branch files to a different location in the file system and still access the branch files. The ROOT file will be connected only when necessary. If called by TBranch::Fill (via TBasket::WriteFile), the file will be created with the option ""recreate"". If called by TBranch::GetEntry (via TBranch::GetBasket), the file will be opened in read mode. To open a file in ""update"" mode or with a certain compression level, use TBranch::SetFile(TFile *file). ; Definition at line 2908 of file TBranch.cxx. ◆ SetFile() [2/2]. void TBranch::SetFile ; (; TFile * ; file = nullptr). virtual . Set file where this branch writes/reads its buffers. ; By default the branch buffers reside in the file where the Tree was created. If the file name where the tree was created is an absolute path name or an URL (e.g. or root://host/...) and if the fname is not an absolute path name or an URL then the path of the tree file is prepended to fname to make the branch file relative to the tree file. In this case one can move the tree + all branch files to a different location in the file system and still access the branch files. The ROOT file will be connected only when necessary. If called by TBranch::Fill (via TBasket::WriteFile), the file will be created with the option ""recreate"". If called by TBranch::GetEntry (via TBranch::GetBasket), the file will be opened in read mode. To open a file in ""update"" mode or",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBranch.html:64523,update,update,64523,doc/master/classTBranch.html,https://root.cern,https://root.cern/doc/master/classTBranch.html,1,['update'],['update']
Deployability,"ue; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; intRooLegendre::_m1; intRooLegendre::_m2; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist. Pointer to global instance of string that matches object named; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. double_n; RooRealProxy_phi; int_sgn1; int_sgn2. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooSpHarmonic(). RooSpHarmonic(const char* name, const char* title, RooAbsReal& ctheta, RooAb",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooSpHarmonic.html:36113,integrat,integrator,36113,root/html534/RooSpHarmonic.html,https://root.cern,https://root.cern/root/html534/RooSpHarmonic.html,2,"['configurat', 'integrat']","['configuration', 'integrator']"
Deployability,"ue; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist. Pointer to global instance of string that matches object named; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<string,string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooCFunction1Ref<double,double>funcFunction pointer reference; RooRealProxyxArgument reference. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void RooCFunction1Ref<VO,VI> Streamer(TBuffer& ); Custom streamer for function pointer reference object. When",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooCFunction1Binding_double_double_.html:36987,integrat,integrator,36987,root/html602/RooCFunction1Binding_double_double_.html,https://root.cern,https://root.cern/root/html602/RooCFunction1Binding_double_double_.html,4,"['configurat', 'integrat']","['configuration', 'integrator']"
Deployability,"ues from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; static Int_tRooPrintable::_nameLength; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; RooCategoryProxy_stateProxy to hiding state category; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooAbsHiddenReal.html:32554,integrat,integrator,32554,root/html530/RooAbsHiddenReal.html,https://root.cern,https://root.cern/root/html530/RooAbsHiddenReal.html,2,"['configurat', 'integrat']","['configuration', 'integrator']"
Deployability,"ues from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; static Int_tRooPrintable::_nameLength; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; RooSetProxy_paramSetSet of parameters to which constraints apply; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; RooListProxy_set1Set of constraint terms; TIterator*_setIter1! do not persist; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooConstraintSum.html:31908,integrat,integrator,31908,root/html526/RooConstraintSum.html,https://root.cern,https://root.cern/root/html526/RooConstraintSum.html,4,"['configurat', 'integrat']","['configuration', 'integrator']"
Deployability,"ues in the given cache element: calculate new remainder; fraction, normalize fractions obtained from extended ML terms to unity and; multiply these the various range and dimensional corrections needed in the; current use context. Double_t evaluate() const; Calculate and return the current value. void resetErrorCounters(Int_t resetValue = 10); Reset error counter to given value, limiting the number; of future error messages for this pdf to 'resetValue'. Bool_t checkObservables(const RooArgSet* nset) const; Check if PDF is valid for given normalization set.; Coeffient and PDF must be non-overlapping, but pdf-coefficient; pairs may overlap each other. Int_t getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& numVars, const RooArgSet* normSet, const char* rangeName = 0) const; Determine which part (if any) of given integral can be performed analytically.; If any analytical integration is possible, return integration scenario code. RooAddPdf queries each component PDF for its analytical integration capability of the requested; set ('allVars'). It finds the largest common set of variables that can be integrated; by all components. If such a set exists, it reconfirms that each component is capable of; analytically integrating the common set, and combines the components individual integration; codes into a single integration code valid for RooAddPdf. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; Return analytical integral defined by given scenario code. Double_t expectedEvents(const RooArgSet* nset) const; Return the number of expected events, which is either the sum of all coefficients; or the sum of the components extended terms, multiplied with the fraction that; is in the current range w.r.t the reference range. void selectNormalization(const RooArgSet* depSet = 0, Bool_t force = kFALSE); Interface function used by test statistics to freeze choice of observables; for interpretation of fraction coefficients. void",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAddPdf.html:46035,integrat,integration,46035,root/html528/RooAddPdf.html,https://root.cern,https://root.cern/root/html528/RooAddPdf.html,6,['integrat'],['integration']
Deployability,"ues in the given cache element: calculate new remainder; fraction, normalize fractions obtained from extended ML terms to unity and; multiply these the various range and dimensional corrections needed in the; current use context. Double_t evaluate() const; Calculate and return the current value. void resetErrorCounters(Int_t resetValue = 10); Reset error counter to given value, limiting the number; of future error messages for this pdf to 'resetValue'. Bool_t checkObservables(const RooArgSet* nset) const; Check if PDF is valid for given normalization set.; Coeffient and PDF must be non-overlapping, but pdf-coefficient; pairs may overlap each other. Int_t getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& numVars, const RooArgSet* normSet, const char* rangeName = 0) const; Determine which part (if any) of given integral can be performed analytically.; If any analytical integration is possible, return integration scenario code. RooAddPdf queries each component PDF for its analytical integration capability of the requested; set ('allVars'). It finds the largest common set of variables that can be integrated; by all components. If such a set exists, it reconfirms that each component is capable of; analytically integrating the common set, and combines the components individual integration; codes into a single integration code valid for RooAddPdf. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; Return analytical integral defined by given scenario code. Double_t expectedEvents(const RooArgSet* nset); Return the number of expected events, which is either the sum of all coefficients; or the sum of the components extended terms, multiplied with the fraction that; is in the current range w.r.t the reference range. void selectNormalization(const RooArgSet* depSet = 0, Bool_t force = kFALSE); Interface function used by test statistics to freeze choice of observables; for interpretation of fraction coefficients. void selec",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAddPdf.html:45278,integrat,integration,45278,root/html526/RooAddPdf.html,https://root.cern,https://root.cern/root/html526/RooAddPdf.html,1,['integrat'],['integration']
Deployability,"uest:; 13224 * 0 = regular HTTP/1.0 or HTTP/1.1 request; 13225 * 1 = upgrade to websocket; 13226 * 2 = upgrade to HTTP/2; 13227 * -1 = upgrade to unknown protocol; 13228 */; 13229static int; 13230should_switch_to_protocol(const struct mg_connection *conn); 13231{; 13232 const char *upgrade, *connection;; 13233 ; 13234 /* A websocket protocoll has the following HTTP headers:; 13235 *; 13236 * Connection: Upgrade; 13237 * Upgrade: Websocket; 13238 */; 13239 ; 13240 connection = mg_get_header(conn, ""Connection"");; 13241 if (connection == NULL) {; 13242 return PROTOCOL_TYPE_HTTP1;; 13243 }; 13244 if (!mg_strcasestr(connection, ""upgrade"")) {; 13245 return PROTOCOL_TYPE_HTTP1;; 13246 }; 13247 ; 13248 upgrade = mg_get_header(conn, ""Upgrade"");; 13249 if (upgrade == NULL) {; 13250 /* ""Connection: Upgrade"" without ""Upgrade"" Header --> Error */; 13251 return -1;; 13252 }; 13253 ; 13254 /* Upgrade to ... */; 13255 if (0 != mg_strcasestr(upgrade, ""websocket"")) {; 13256 /* The headers ""Host"", ""Sec-WebSocket-Key"", ""Sec-WebSocket-Protocol"" and; 13257 * ""Sec-WebSocket-Version"" are also required.; 13258 * Don't check them here, since even an unsupported websocket protocol; 13259 * request still IS a websocket request (in contrast to a standard HTTP; 13260 * request). It will fail later in handle_websocket_request.; 13261 */; 13262 return PROTOCOL_TYPE_WEBSOCKET; /* Websocket */; 13263 }; 13264 if (0 != mg_strcasestr(upgrade, ""h2"")) {; 13265 return PROTOCOL_TYPE_HTTP2; /* Websocket */; 13266 }; 13267 ; 13268 /* Upgrade to another protocol */; 13269 return -1;; 13270}; 13271 ; 13272 ; 13273static int; 13274parse_match_net(const struct vec *vec, const union usa *sa, int no_strict); 13275{; 13276 int n;; 13277 unsigned int a, b, c, d, slash;; 13278 ; 13279 if (sscanf(vec->ptr, ""%u.%u.%u.%u/%u%n"", &a, &b, &c, &d, &slash, &n); 13280 != 5) { // NOLINT(cert-err34-c) 'sscanf' used to convert a string to an; 13281 // integer value, but function will not report conversion; 13282 // errors; cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:387127,upgrade,upgrade,387127,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,1,['upgrade'],['upgrade']
Deployability,"uest:; 13225 * 0 = regular HTTP/1.0 or HTTP/1.1 request; 13226 * 1 = upgrade to websocket; 13227 * 2 = upgrade to HTTP/2; 13228 * -1 = upgrade to unknown protocol; 13229 */; 13230static int; 13231should_switch_to_protocol(const struct mg_connection *conn); 13232{; 13233 const char *upgrade, *connection;; 13234 ; 13235 /* A websocket protocoll has the following HTTP headers:; 13236 *; 13237 * Connection: Upgrade; 13238 * Upgrade: Websocket; 13239 */; 13240 ; 13241 connection = mg_get_header(conn, ""Connection"");; 13242 if (connection == NULL) {; 13243 return PROTOCOL_TYPE_HTTP1;; 13244 }; 13245 if (!mg_strcasestr(connection, ""upgrade"")) {; 13246 return PROTOCOL_TYPE_HTTP1;; 13247 }; 13248 ; 13249 upgrade = mg_get_header(conn, ""Upgrade"");; 13250 if (upgrade == NULL) {; 13251 /* ""Connection: Upgrade"" without ""Upgrade"" Header --> Error */; 13252 return -1;; 13253 }; 13254 ; 13255 /* Upgrade to ... */; 13256 if (0 != mg_strcasestr(upgrade, ""websocket"")) {; 13257 /* The headers ""Host"", ""Sec-WebSocket-Key"", ""Sec-WebSocket-Protocol"" and; 13258 * ""Sec-WebSocket-Version"" are also required.; 13259 * Don't check them here, since even an unsupported websocket protocol; 13260 * request still IS a websocket request (in contrast to a standard HTTP; 13261 * request). It will fail later in handle_websocket_request.; 13262 */; 13263 return PROTOCOL_TYPE_WEBSOCKET; /* Websocket */; 13264 }; 13265 if (0 != mg_strcasestr(upgrade, ""h2"")) {; 13266 return PROTOCOL_TYPE_HTTP2; /* Websocket */; 13267 }; 13268 ; 13269 /* Upgrade to another protocol */; 13270 return -1;; 13271}; 13272 ; 13273 ; 13274static int; 13275parse_match_net(const struct vec *vec, const union usa *sa, int no_strict); 13276{; 13277 int n;; 13278 unsigned int a, b, c, d, slash;; 13279 ; 13280 if (sscanf(vec->ptr, ""%u.%u.%u.%u/%u%n"", &a, &b, &c, &d, &slash, &n); 13281 != 5) { // NOLINT(cert-err34-c) 'sscanf' used to convert a string to an; 13282 // integer value, but function will not report conversion; 13283 // errors; cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:387160,upgrade,upgrade,387160,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,1,['upgrade'],['upgrade']
Deployability,"ufSize = 32000); Attach the category index and label to as branches to the given; TTree. The index field will be attached as integer with name; <name>_idx, the label field will be attached as char[] with label; <name>_lbl. void fillTreeBranch(TTree& t); Fill tree branches associated with current object with current value. void setTreeBranchStatus(TTree& t, Bool_t active); (De)activate associate tree branch. void syncCache(const RooArgSet* set = 0); Explicitly synchronize RooAbsCategory internal cache. void copyCache(const RooAbsArg* source, Bool_t valueOnly = kFALSE, Bool_t setValueDirty = kTRUE); Copy the cached value from given source and raise dirty flag.; It is the callers responsability to ensure that the sources; cache is clean(valid) before this function is called, e.g. by; calling syncCache() on the source. const RooCatType* getOrdinal(UInt_t n, const char* rangeName = 0) const; Return state definition of ordinal nth defined state,; needed by the generator mechanism. RooAbsArg * createFundamental(const char* newname = 0) const; Create a RooCategory fundamental object with our properties. Bool_t isSignType(Bool_t mustHaveZero = kFALSE) const; Determine if category has 2 or 3 states with index values -1,0,1. Bool_t operator!=(Int_t index); { return !operator==(index);}. Bool_t operator!=(const char* label); { return !operator==(label);}. Bool_t operator!=(const RooAbsArg& other); { return !operator==(other);}. Int_t numTypes(const char* = 0) const; Return number of types defined (in range named rangeName if rangeName!=0). Bool_t isIntegrationSafeLValue(const RooArgSet* ) const; Is this l-value object safe for use as integration observable. Bool_t traceEvalHook(RooCatType ) const; coverity[PASS_BY_VALUE]. RooCatType evaluate() const. » Last changed: Fri Dec 2 14:26:33 2011 » Last generated: 2011-12-02 14:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAbsCategory.html:25399,integrat,integration,25399,root/html532/RooAbsCategory.html,https://root.cern,https://root.cern/root/html532/RooAbsCategory.html,1,['integrat'],['integration']
Deployability,"ufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. TClassMenuItem(const TClassMenuItem&); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(); TClassMenuItem&operator=(const TClassMenuItem&). Data Members; public:. enum EClassMenuItemType { kPopupUserFunction; kPopupSeparator; kPopupStandardList; };; enum { kIsExternal; kIsSelf; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. private:. TStringfArgsarguments type list *** NOT CHECKED ***; TObject*fCalledObjectobject to be called; TStringfFunctionNamename of the function or method to be called; TClass*fParentparent class; Bool_tfSelfflag to indicate that object to be called is the selected one; Int_tfSelfObjectPosrang in argument list corresponding to the object being clicked on; TList*fSubMenulist of submenu items; TStringfTitletitle if not standard; Bool_tfToggleflag toggle method; TClassMenuItem::EClassMenuItemTypefTypetype flag (EClassMenuItemType). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TClassMenuItem(); Default TClassMenuItem ctor. TClassMenuItems are constructed in TClass; with a standard content but may be customized later; fType = 0 : external method/function; fType = 1 : separator; fType = 2 : standard methods list. TClassMenuItem(Int_t type, TClass* parent, const char* title = """", const char* functionname = """", TObject* obj = 0, const char* args = """", Int_t selfobjposition = -1, Bool_t self = kFALSE); TClassMenuItem ctor. TClassMenuItems are constructed in TClass; with a standard content but may be customized later; type = 0 : external method/function; type = 1 : separator; type = 2 : standard methods list; self i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TClassMenuItem.html:6957,toggle,toggle,6957,root/html526/TClassMenuItem.html,https://root.cern,https://root.cern/root/html526/TClassMenuItem.html,5,['toggle'],['toggle']
Deployability,"ugh arrays x, y and w. If the weight is not equal to 1, the storage of the sum of squares of; weights is automatically triggered and the sum of the squares of weights is incremented; by w[i]^2 in the bin corresponding to x[i],y[i].; If w is NULL each entry is assumed a weight=1. NB: function only valid for a TH2x object. void FillRandom(const char* fname, Int_t ntimes = 5000); Fill histogram following distribution in function fname. The distribution contained in the function fname (TF2) is integrated; over the channel contents.; It is normalized to 1.; Getting one random number implies:; - Generating a random number between 0 and 1 (say r1); - Look in which bin in the normalized integral r1 corresponds to; - Fill histogram channel; ntimes random numbers are generated. One can also call TF2::GetRandom2 to get a random variate from a function. void FillRandom(TH1* h, Int_t ntimes = 5000); Fill histogram following distribution in histogram h. The distribution contained in the histogram h (TH2) is integrated; over the channel contents.; It is normalized to 1.; Getting one random number implies:; - Generating a random number between 0 and 1 (say r1); - Look in which bin in the normalized integral r1 corresponds to; - Fill histogram channel; ntimes random numbers are generated. Int_t FindFirstBinAbove(Double_t threshold = 0, Int_t axis = 1) const; Find first bin with content > threshold for axis (1=x, 2=y, 3=z); if no bins with content > threshold is found the function returns -1. Int_t FindLastBinAbove(Double_t threshold = 0, Int_t axis = 1) const; Find last bin with content > threshold for axis (1=x, 2=y, 3=z); if no bins with content > threshold is found the function returns -1. void DoFitSlices(bool onX, TF1* f1, Int_t firstbin, Int_t lastbin, Int_t cut, Option_t* option, TObjArray* arr). void FitSlicesX(TF1* f1 = 0, Int_t firstybin = 0, Int_t lastybin = -1, Int_t cut = 0, Option_t* option = ""QNR"", TObjArray* arr = 0); Project slices along X in case of a 2-D histogram",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TH2.html:33772,integrat,integrated,33772,root/html602/TH2.html,https://root.cern,https://root.cern/root/html602/TH2.html,2,['integrat'],['integrated']
Deployability,"ui, Int_t Width, Int_t Height, TQueryDescription *query=nullptr, Bool_t editmode=kFALSE);  Create a new Query dialog, used by the Session Viewer, to Edit a Query if the editmode flag is set, or to create a new one if not set. ;  ;  ~TNewQueryDlg () override;  Delete query dialog. ;  ; void Build (TSessionViewer *gui);  Build the ""new query"" dialog. ;  ; void CloseWindow () override;  Called when window is closed via the window manager. ;  ; TClass * IsA () const override;  ; void OnBrowseChain ();  Call new chain dialog. ;  ; void OnBrowseEventList ();  Browse event list. ;  ; void OnBrowseSelector ();  Open file browser to choose selector macro. ;  ; void OnBtnCloseClicked ();  Close dialog. ;  ; void OnBtnSaveClicked ();  Save current settings in main session viewer. ;  ; void OnBtnSubmitClicked ();  Save and submit query description. ;  ; void OnElementSelected (TObject *obj);  Handle OnElementSelected signal coming from new chain dialog. ;  ; void OnNewQueryMore ();  Show/hide options frame and update button text accordingly. ;  ; void Popup ();  Display dialog and set focus to query name text entry. ;  ; Bool_t ProcessMessage (Longptr_t msg, Longptr_t parm1, Longptr_t parm2) override;  Process messages for new query dialog. ;  ; void SettingsChanged ();  Settings have changed, update GUI accordingly. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UpdateFields (TQueryDescription *desc);  Update entry fields with query description values. ;  ;  Public Member Functions inherited from TGTransientFrame;  TGTransientFrame (const TGWindow *p=nullptr, const TGWindow *main=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=kVerticalFrame);  Create a transient window. ;  ; virtual void CenterOnParent (Bool_t croot=kTRUE, EPlacement pos=kCenter);  Position transient frame centered relative to the parent frame. ;  ; const TGWindow * GetMain () const;  ; void SavePrimitive ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTNewQueryDlg.html:1399,update,update,1399,doc/master/classTNewQueryDlg.html,https://root.cern,https://root.cern/doc/master/classTNewQueryDlg.html,1,['update'],['update']
Deployability,"uide ; .  . Loading...; Searching...; No Matches. Integrator.h. Go to the documentation of this file. 1// @(#)root/mathmore:$Id$; 2// Authors: L. Moneta, M. Slawinska 10/2007; 3 ; 4 /**********************************************************************; 5 * *; 6 * Copyright (c) 2007 ROOT Foundation, CERN/PH-SFT *; 7 * *; 8 * *; 9 **********************************************************************/; 10 ; 11// Header file for class Integrator; 12//; 13//; 14#ifndef ROOT_Math_Integrator; 15#define ROOT_Math_Integrator; 16 ; 17#include ""Math/AllIntegrationTypes.h""; 18 ; 19#include ""Math/IntegratorOptions.h""; 20 ; 21#include ""Math/IFunction.h""; 22 ; 23#include ""Math/VirtualIntegrator.h""; 24 ; 25#include <memory>; 26#include <vector>; 27#include <string>; 28 ; 29 ; 30/**; 31@defgroup NumAlgo Numerical Algorithms; 32 ; 33Numerical Algorithm classes from the \ref MathCore and \ref MathMore libraries.; 34 ; 35@ingroup MathCore; 36@ingroup MathMore; 37 ; 38*/; 39 ; 40 ; 41/**; 42 ; 43@defgroup Integration Numerical Integration; 44 ; 45Classes for numerical integration of functions.; 46These classes provide algorithms for integration of one-dimensional functions, with several adaptive and non-adaptive methods; 47and for integration of multi-dimensional function using an adaptive method or MonteCarlo Integration (GSLMCIntegrator).; 48The basic classes ROOT::Math::IntegratorOneDim provides a common interface for the one-dimensional methods while the class; 49ROOT::Math::IntegratorMultiDim provides the interface for the multi-dimensional ones.; 50The methods can be configured (e.g setting the default method with its default parameters) using the ROOT::Math::IntegratorOneDimOptions and; 51ROOT::Math::IntegratorMultiDimOptions classes.; 52 ; 53@ingroup NumAlgo; 54 ; 55*/; 56 ; 57 ; 58 ; 59namespace ROOT {; 60namespace Math {; 61 ; 62 ; 63 ; 64 ; 65//____________________________________________________________________________________________; 66/**; 67 ; 68User Class for performi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Integrator_8h_source.html:1155,integrat,integration,1155,doc/master/Integrator_8h_source.html,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html,1,['integrat'],['integration']
Deployability,"uide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; RooBinSamplingPdf Class Reference. ; The RooBinSamplingPdf is supposed to be used as an adapter between a continuous PDF and a binned distribution. ; When RooFit is used to fit binned data, and the PDF is continuous, it takes the probability density at the bin centre as a proxy for the probability averaged (integrated) over the entire bin. This is correct only if the second derivative of the function vanishes, though. This is shown in the plots below.; For PDFs that have larger curvatures, the RooBinSamplingPdf can be used. It integrates the PDF in each bin using an adaptive integrator. This usually requires 21 times more function evaluations, but significantly reduces biases due to better sampling of the PDF. The integrator can be accessed from the outside using integrator(). This can be used to change the integration rules, so less/more function evaluations are performed. The target precision of the integrator can be set in the constructor. How to use it; There are two ways to use this class:; Manually wrap a PDF: RooBinSamplingPdf binSampler(""<name>"", ""title"", <binned observable of PDF>, <original PDF> [, <precision for integrator>]);; binSampler.fitTo(data);; dataOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void dataDefinition TGWin32VirtualXProxy.cxx:104; RooBinSamplingPdfThe RooBinSamplingPdf is supposed to be used as an adapter between a continuous PDF and a binned dist...Definition RooBinSamplingPdf.h:28; RooBinSamplingPdf::integratorstd::unique_ptr< ROOT::Math::IntegratorOneDim > & integrator() constDirect access to the unique_ptr holding the integrator that's used to sample the bins.Definition RooBinSamplingP",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBinSamplingPdf.html:1045,integrat,integrator,1045,doc/master/classRooBinSamplingPdf.html,https://root.cern,https://root.cern/doc/master/classRooBinSamplingPdf.html,2,['integrat'],['integrator']
Deployability,"uild tool can also be invoked directly of course, but thecmake --build command is more portable.; On unix systems (with make or ninja) you can speedup the build with cmake --build . -- -jN where N is the number of available cores.; Setup the environment to run; $ source /path/to/install-or-build/dir/bin/thisroot.sh. Start ROOT interactive application; $ root. Installation methods; There are two main methods of installing ROOT from source: location independent and fix location. The former is advised for a personal installation of ROOT, while the later for a system wide installation. Both require to set the CMAKE_INSTALL_PREFIX variable at configuration time. The later requires in addition to set the gnuinstall option at configuration. It also allows the tuning of destinations for the various components, by setting the variablesCMAKE_INSTALL_xxxDIR, wherexxx isBIN,LIB,INCLUDE, etc. The full list is described in the variables section.; To use the location independent installation requires to set environment variables PATH and LD_LIBRARY_PATH. This is done by sourcing the script (depending on the shell family) source bin/thisroot.sh. While to use the fix location installation you do not need to set any environment to run root.; Do the installation of ROOT from the build directory:; $ cmake --build . --target install. The --target option with install parameter in addition to the --build option tells cmake to build the 'install' target. This is equivalent to make install for Unix systems. ; It is possible to set a different install prefix at installation time by invoking the cmake_install.cmake script generated in the build directory:; $ cmake -DCMAKE_INSTALL_PREFIX=/tmp/root -P cmake_install.cmake. Build Options; Each build option is a boolean variable that can be turned ON or OFF. The current value is recorded in the CMake cache (CMakeCache.txt file on the build directory) and therefore it is not needed to be specified on the cmake command each time. Please note that so",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/building-root.html:5377,install,installation,5377,d/building-root.html,https://root.cern,https://root.cern/d/building-root.html,1,['install'],['installation']
Deployability,"ul ) {; 1378 if (TMath::Abs(fDA[i]/fPL[i]) > amb ) {; 1379 fPL[i] = 4.*fPL[i]; // increase parallelepiped; 1380 t1=4.; // flag - that fPL was increased; 1381 }; 1382 }; 1383 // cut step; 1384 fDA[i] = fDA[i]*alambd;; 1385 // expected function value change in next iteration; 1386 fGT = fGT + fDA[i]*fGr[i];; 1387 }; 1388 }; 1389 ; 1390 //.. CHECK IF MINIMUM ATTAINED AND SET EXIT MODE; 1391 // if expected fGT smaller than precision; 1392 // and other stuff; 1393 if (-fGT <= sp && t1 < 1. && alambd < 1.)fENDFLG = -1; // function is not decreasing; 1394 ; 1395 if (fENDFLG >= 0) {; 1396 if (fAKAPPA < TMath::Abs(fEPS)) { // fit is converging; 1397 if (fixFLG == 0); 1398 fENDFLG=1; // successful fit; 1399 else {// we have fixed parameters; 1400 if (fENDFLG == 0) {; 1401 //... CHECK IF fiXING ON BOUND IS CORRECT; 1402 fENDFLG = 1;; 1403 fixFLG = 0;; 1404 ifix1=-1;; 1405 // release fixed parameters; 1406 for( i = 0; i < fNpar; i++) fPL[i] = fPL0[i];; 1407 fINDFLG[1] = 0;; 1408 // and repeat iteration; 1409 goto L19;; 1410 } else {; 1411 if( ifix1 >= 0) {; 1412 fi = fi + 1;; 1413 fENDFLG = 0;; 1414 }; 1415 }; 1416 }; 1417 } else { // fit does not converge; 1418 if( fixFLG != 0) {; 1419 if( fi > fixFLG ) {; 1420 //... CHECK IF fiXING ON BOUND IS CORRECT; 1421 fENDFLG = 1;; 1422 fixFLG = 0;; 1423 ifix1=-1;; 1424 for( i = 0; i < fNpar; i++) fPL[i] = fPL0[i];; 1425 fINDFLG[1] = 0;; 1426 goto L19;; 1427 } else {; 1428 fi = fi + 1;; 1429 fENDFLG = 0;; 1430 }; 1431 } else {; 1432 fi = fi + 1;; 1433 fENDFLG = 0;; 1434 }; 1435 }; 1436 }; 1437 ; 1438// L85:; 1439 // iteration number limit is exceeded; 1440 if(fENDFLG == 0 && nn3 >= fNmaxIter) fENDFLG=-3;; 1441 ; 1442 // fit errors are infinite;; 1443 if(fENDFLG > 0 && fINDFLG[1] > 0) fENDFLG=-2;; 1444 ; 1445 //MONITO (fS,fNpar,nn3,IT,fEPS,fGT,fAKAPPA,alambd);; 1446 if (fENDFLG == 0) { // make step; 1447 for ( i = 0; i < n; i++) fA[i] = fA[i] + fDA[i];; 1448 if (imax >= 0) fA[imax] = aiMAX;; 1449 olds=fS;; 1450 nn2=nn2+1;; 1451 nn3=nn3+1;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFumili_8cxx_source.html:39928,release,release,39928,doc/master/TFumili_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TFumili_8cxx_source.html,1,['release'],['release']
Deployability,"ularity. double operator()(double x). define operator() for IntegralLow. double Result() const. return the Result of the last Integral calculation. { return fIntegrator == 0 ? 0 : fIntegrator->Result(); }. double Error() const. return the estimate of the absolute Error of the last Integral calculation. { return fIntegrator == 0 ? 0 : fIntegrator->Error(); }. int Status() const. return the Error Status of the last Integral calculation. { return fIntegrator == 0 ? -1 : fIntegrator->Status(); }. int NEval() const. return number of function evaluations in calculating the integral; (if integrator do not implement this function returns -1). { return fIntegrator == 0 ? -1 : fIntegrator->NEval(); }. void SetRelTolerance(double relTolerance); setter for control Parameters (getters are not needed so far ). set the desired relative Error. { if (fIntegrator) fIntegrator->SetRelTolerance(relTolerance); }. void SetAbsTolerance(double absTolerance). set the desired absolute Error. { if (fIntegrator) fIntegrator->SetAbsTolerance(absTolerance); }. VirtualIntegratorOneDim * GetIntegrator(). return a pointer to integrator object. { return fIntegrator; }. void SetOptions(const ROOT::Math::IntegratorOneDimOptions& opt). set the options. { if (fIntegrator) fIntegrator->SetOptions(opt); }. std::string Name() const; return name of integrator. { return (fIntegrator) ? Options().Integrator() : std::string(""""); }. IntegrationOneDim::Type GetType(const char* name); static function to get the enumeration from a string. std::string GetName(ROOT::Math::IntegrationOneDim::Type ); static function to get a string from the enumeration. VirtualIntegratorOneDim * CreateIntegrator(ROOT::Math::IntegrationOneDim::Type type, double absTol, double relTol, unsigned int size, int rule). » Last changed: root/mathmore:$Id$ » Last generated: 2015-06-30 14:22; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html:11166,integrat,integrator,11166,root/html602/ROOT__Math__IntegratorOneDim.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html,2,['integrat'],['integrator']
Deployability,"ularity. double operator()(double x). define operator() for IntegralLow. double Result() const. return the Result of the last Integral calculation. { return fIntegrator == 0 ? 0 : fIntegrator->Result(); }. double Error() const. return the estimate of the absolute Error of the last Integral calculation. { return fIntegrator == 0 ? 0 : fIntegrator->Error(); }. int Status() const. return the Error Status of the last Integral calculation. { return fIntegrator == 0 ? -1 : fIntegrator->Status(); }. int NEval() const. return number of function evaluations in calculating the integral; (if integrator do not implement this function returns -1). { return fIntegrator == 0 ? -1 : fIntegrator->NEval(); }. void SetRelTolerance(double relTolerance); setter for control Parameters (getters are not needed so far ). set the desired relative Error. { if (fIntegrator) fIntegrator->SetRelTolerance(relTolerance); }. void SetAbsTolerance(double absTolerance). set the desired absolute Error. { if (fIntegrator) fIntegrator->SetAbsTolerance(absTolerance); }. VirtualIntegratorOneDim * GetIntegrator(). return a pointer to integrator object. { return fIntegrator; }. void SetOptions(const ROOT::Math::IntegratorOneDimOptions& opt). set the options. { if (fIntegrator) fIntegrator->SetOptions(opt); }. std::string Name() const; return name of integrator. { return (fIntegrator) ? Options().Integrator() : std::string(""""); }. IntegrationOneDim::Type GetType(const char* name); static function to get the enumeration from a string. std::string GetName(ROOT::Math::IntegrationOneDim::Type ); static function to get a string from the enumeration. VirtualIntegratorOneDim * CreateIntegrator(ROOT::Math::IntegrationOneDim::Type type, double absTol, double relTol, unsigned int size, int rule). » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 16:59; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Math__IntegratorOneDim.html:11187,integrat,integrator,11187,root/html534/ROOT__Math__IntegratorOneDim.html,https://root.cern,https://root.cern/root/html534/ROOT__Math__IntegratorOneDim.html,2,['integrat'],['integrator']
Deployability,"ularity. double operator()(double x). define operator() for IntegralLow. double Result() const. return the Result of the last Integral calculation. { return fIntegrator == 0 ? 0 : fIntegrator->Result(); }. double Error() const. return the estimate of the absolute Error of the last Integral calculation. { return fIntegrator == 0 ? 0 : fIntegrator->Error(); }. int Status() const. return the Error Status of the last Integral calculation. { return fIntegrator == 0 ? -1 : fIntegrator->Status(); }. int NEval() const. return number of function evaluations in calculating the integral; (if integrator do not implement this function returns -1). { return fIntegrator == 0 ? -1 : fIntegrator->NEval(); }. void SetRelTolerance(double relTolerance); setter for control Parameters (getters are not needed so far ). set the desired relative Error. { if (fIntegrator) fIntegrator->SetRelTolerance(relTolerance); }. void SetAbsTolerance(double absTolerance). set the desired absolute Error. { if (fIntegrator) fIntegrator->SetAbsTolerance(absTolerance); }. VirtualIntegratorOneDim * GetIntegrator(). return a pointer to integrator object. { return fIntegrator; }. void SetOptions(const ROOT::Math::IntegratorOneDimOptions& opt). set the options. { if (fIntegrator) fIntegrator->SetOptions(opt); }. std::string Name() const; return name of integrator. { return (fIntegrator) ? Options().Integrator() : std::string(""""); }. IntegrationOneDim::Type GetType(const char* name); static function to get the enumeration from a string. std::string GetName(ROOT::Math::IntegrationOneDim::Type ); static function to get a string from the enumeration. VirtualIntegratorOneDim * CreateIntegrator(ROOT::Math::IntegrationOneDim::Type type, double absTol, double relTol, unsigned int size, int rule). » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/ROOT__Math__IntegratorOneDim.html:11158,integrat,integrator,11158,root/html604/ROOT__Math__IntegratorOneDim.html,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegratorOneDim.html,2,['integrat'],['integrator']
Deployability,"ulates the value of the ""number"" bin in a discrete interval. ;  ; virtual Double_t GetMax () const;  ; virtual Double_t GetMean () const;  ; virtual Double_t GetMin () const;  ; virtual Int_t GetNbins () const;  ; virtual Double_t GetRndm (TRandom3 &) const;  get uniformly distributed number within interval ;  ; virtual Double_t GetStepSize (Int_t iBin=0) const;  returns the step size between the numbers of a ""discrete Interval"" ;  ; virtual Double_t GetWidth () const;  ; virtual TClass * IsA () const;  ; virtual void Print (std::ostream &os) const;  ; void SetMax (Double_t m);  ; void SetMin (Double_t m);  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Attributes; Double_t fMax;  the constraints of the Interval ;  ; Double_t fMin;  ; Int_t fNbins;  when >0 : number of bins (discrete interval); when ==0 continuous interval ;  . Private Member Functions; MsgLogger & Log () const;  . #include <TMVA/Interval.h>. Inheritance diagram for TMVA::Interval:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ Interval() [1/2]. TMVA::Interval::Interval ; (; Double_t ; min, . Double_t ; max, . Int_t ; nbins = 0 . ). defines minimum and maximum of an interval . when nbins > 0, interval describes a discrete distribution (equally distributed in the interval); when nbins == 0, interval describes a continous interval . Definition at line 83 of file Interval.cxx. ◆ Interval() [2/2]. TMVA::Interval::Interval ; (; const Interval & ; other). Definition at line 99 of file Interval.cxx. ◆ ~Interval(). TMVA::Interval::~Interval ; (; ). virtual . destructor ; Definition at line 109 of file Interval.cxx. Member Function Documentation. ◆ Class(). static TCl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1Interval.html:2614,continuous,continuous,2614,doc/master/classTMVA_1_1Interval.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Interval.html,1,['continuous'],['continuous']
Deployability,"uld be re-implemented by derived classes -if more options than tolerance existDefinition VirtualIntegrator.h:140; ROOT::Math::VirtualIntegratorOneDim::Integralvirtual double Integral(double a, double b)=0evaluate integral; ROOT::Math::VirtualIntegratorOneDim::IntegralUpvirtual double IntegralUp(double a)=0evaluate integral over the (a, +inf); ROOT::Math::VirtualIntegrator::SetRelTolerancevirtual void SetRelTolerance(double)=0set the desired relative Error; ROOT::Math::VirtualIntegrator::SetAbsTolerancevirtual void SetAbsTolerance(double)=0set the desired absolute Error; ROOT::Math::VirtualIntegrator::Errorvirtual double Error() const =0return the estimate of the absolute Error of the last Integral calculation; ROOT::Math::VirtualIntegrator::NEvalvirtual int NEval() constreturn number of function evaluations in calculating the integral (if integrator do not implement thi...Definition VirtualIntegrator.h:84; ROOT::Math::VirtualIntegrator::Resultvirtual double Result() const =0return the Result of the last Integral calculation; ROOT::Math::VirtualIntegrator::Statusvirtual int Status() const =0return the Error Status of the last Integral calculation; ROOT::Math::WrappedFunctionTemplate class to wrap any C++ callable object which takes one argument i.e.Definition WrappedFunction.h:45; ROOT::Math::IntegrationOneDim::TypeTypeenumeration specifying the integration types.Definition AllIntegrationTypes.h:32; ROOT::Math::IntegrationOneDim::kDEFAULT@ kDEFAULTdefault type specified in the static optionsDefinition AllIntegrationTypes.h:33; xDouble_t x[n]Definition legend1.C:17; MathNamespace for new Math classes and functions.; ROOT::Math::IntegratorIntegratorOneDim IntegratorDefinition Integrator.h:480; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4. mathmathcoreincMathIntegrator.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:40 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Integrator_8h_source.html:32258,integrat,integration,32258,doc/master/Integrator_8h_source.html,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html,1,['integrat'],['integration']
Deployability,"ule of 31 points is used. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const Integration::Type type, const Integration::GKRule rule, double absTol = 1.E-9, double relTol = 1E-6, size_t size = 1000). generic constructor for GSL Integrator. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param rule Gauss-Kronrod rule. It is used only for ADAPTIVE::Integration types. The possible rules are defined in the Integration::GKRule enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const char* type, int rule, double absTol, double relTol, size_t size); constructor of GSL Integrator. In the case of Adaptive integration the Gauss-Krond rule of 31 points is used; This is used by the plug-in manager (need a char * instead of enumerations). @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param rule Gauss-Kronrod rule (from 1 to 6); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. virtual ~GSLIntegrator(); ~GSLIntegrator();. GSLIntegrator(const ROOT::Math::GSLIntegrator& ); disable copy ctrs. GSLIntegrator & operator=(const ROOT::Math::GSLIntegrator& ). void SetFunction(const ROOT::Math::IGenFunction& f); template methods for generic functors. method to set the a generic integration function. @param f integration function. The function type must implement the assigment operator, <em> double operator() ( double x ) </em>. void SetFunction(ROOT::Math::GSLFuncPointer f, void* p = 0). Set function from a GSL pointer function type. double Integral(const ROOT::Math::IGenFunction& f, double a, double b); methods using IGenFunct",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__GSLIntegrator.html:6097,integrat,integration,6097,root/html528/ROOT__Math__GSLIntegrator.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__GSLIntegrator.html,6,['integrat'],['integration']
Deployability,"ule sigma ;  ; Double_t fAverageSupport;  average support (over all rules) ;  ; const Event * fEvent;  current event. ;  ; Bool_t fEventCacheOK;  true if rule/linear respons are updated ;  ; std::vector< Double_t > fEventLinearVal;  linear respons ;  ; std::vector< Char_t > fEventRuleVal;  the rule respons of current event <--— stores boolean ;  ; Double_t fImportanceCut;  minimum importance accepted ;  ; Double_t fImportanceRef;  reference importance (max) ;  ; ELearningModel fLearningModel;  can be full (rules+linear), rules, linear ;  ; std::vector< Double_t > fLinCoefficients;  linear coefficients, one per variable ;  ; std::vector< Double_t > fLinDM;  delta- ;  ; std::vector< Double_t > fLinDP;  delta+ in eq 24, ref 2 ;  ; std::vector< Double_t > fLinImportance;  linear term importance ;  ; std::vector< Double_t > fLinNorm;  norm of ditto, see after eq 26 in ref 2 ;  ; std::vector< TH1F * > fLinPDFB;  pdfs for each variable, background ;  ; std::vector< TH1F * > fLinPDFS;  pdfs for each variable, signal ;  ; Double_t fLinQuantile;  quantile cut to remove outliers ;  ; std::vector< Char_t > fLinTermOK;  flags linear terms with sufficient strong importance <– stores boolean ;  ; MsgLogger * fLogger;  ! message logger ;  ; UInt_t fNRulesGenerated;  number of rules generated, before cleanup ;  ; Double_t fOffset;  offset in discriminator function ;  ; const RuleFit * fRuleFit;  pointer to rule fit object ;  ; Double_t fRuleFSig;  N(sig)/N(sig)+N(bkg) ;  ; std::vector< std::vector< UInt_t > > fRuleMap;  map of rule responses ;  ; const std::vector< const TMVA::Event * > * fRuleMapEvents;  pointer to vector of events used ;  ; UInt_t fRuleMapInd0;  start index ;  ; UInt_t fRuleMapInd1;  last index ;  ; Bool_t fRuleMapOK;  true if MakeRuleMap() has been called ;  ; Double_t fRuleMinDist;  minimum rule distance ;  ; Double_t fRuleNCave;  N(cuts) average. ;  ; Double_t fRuleNCsig;  idem sigma ;  ; std::vector< Double_t > fRulePBB;  p(tag as B|B) ;  ; std::vector< Double",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1RuleEnsemble.html:8586,update,updated,8586,doc/master/classTMVA_1_1RuleEnsemble.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1RuleEnsemble.html,1,['update'],['updated']
Deployability,"ule; ROOT::Math::GSLIntegrator ig(ROOT::Math::Integration::kADAPTIVE, ROOT::Math::Integration::kGAUSS51);; ig.SetRelTolerance(1.E-6); // set relative tolerance; ig.SetAbsTolerance(1.E-6); // set absoulte tolerance; The algorithm is controlled by the given absolute and relative tolerance. The iterations are continued until the following condition is satisfied \[; absErr <= max ( epsAbs, epsRel * Integral); \] Where absErr is an estimate of the absolute error (it can be retrieved with GSLIntegrator::Error()) and Integral is the estimate of the function integral (it can be obtained with GSLIntegrator::Result()); The possible integration algorithm types to use with the GSLIntegrator are the following. More information is provided in the GSL users documentation. * ROOT::Math::Integration::kNONADAPTIVE : based on gsl_integration_qng. It is a non-adaptive procedure which uses fixed Gauss-Kronrod-Patterson abscissae to sample the integrand at a maximum of 87 points. It is provided for fast integration of smooth functions. * ROOT::Math::Integration::kADAPTIVE: based on gsl_integration_qag. It is an adaptiva Gauss-Kronrod integration algorithm, the integration region is divided into subintervals, and on each iteration the subinterval with the largest estimated error is bisected. It is possible to specify the integration rule as an extra enumeration parameter. The possible rules are * Integration::kGAUSS15 : 15 points Gauss-Konrod rule (value = 1) * Integration::kGAUSS21 : 21 points Gauss-Konrod rule (value = 2) * Integration::kGAUSS31 : 31 points Gauss-Konrod rule (value = 3) * Integration::kGAUSS41 : 41 points Gauss-Konrod rule (value = 4) * Integration::kGAUSS51 : 51 points Gauss-Konrod rule (value = 5) * Integration::kGAUSS61 : 61 points Gauss-Konrod rule (value = 6) The higher-order rules give better accuracy for smooth functions, while lower-order rules save time when the function contains local difficulties, such as discontinuities. If no integration rule is passed, the ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:707578,integrat,integration,707578,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['integrat'],['integration']
Deployability,"ullptr)) return;; 2511 }; 2512 ; 2513 if (!fCanvasImp) return;; 2514 ; 2515 if (!gVirtualX->IsCmdThread()) {; 2516 // Why do we have this (which uses the interpreter to funnel the Update(); 2517 // through the main thread) when the gThreadXAR mechanism does seemingly; 2518 // the same?; 2519 gInterpreter->Execute(this, IsA(), ""Update"", """");; 2520 return;; 2521 }; 2522 ; 2523 R__LOCKGUARD(gROOTMutex);; 2524 ; 2525 fUpdating = kTRUE;; 2526 ; 2527 if (!fCanvasImp->PerformUpdate(kFALSE)) {; 2528 ; 2529 if (!IsBatch()) FeedbackMode(kFALSE); // Goto double buffer mode; 2530 ; 2531 if (!UseGL() || fGLDevice == -1) PaintModified(); // Repaint all modified pad's; 2532 ; 2533 Flush(); // Copy all pad pixmaps to the screen; 2534 ; 2535 SetCursor(kCross);; 2536 }; 2537 ; 2538 fUpdating = kFALSE;; 2539}; 2540 ; 2541////////////////////////////////////////////////////////////////////////////////; 2542/// Asynchronous pad update.; 2543/// In case of web-based canvas triggers update of the canvas on the client side,; 2544/// but does not wait that real update is completed. Avoids blocking of caller thread.; 2545/// Have to be used if called from other web-based widget to avoid logical dead-locks.; 2546/// In case of normal canvas just canvas->Update() is performed.; 2547 ; 2548void TCanvas::UpdateAsync(); 2549{; 2550 fUpdated = kTRUE;; 2551 ; 2552 if (IsWeb()); 2553 fCanvasImp->PerformUpdate(kTRUE);; 2554 else; 2555 Update();; 2556}; 2557 ; 2558////////////////////////////////////////////////////////////////////////////////; 2559/// Used by friend class TCanvasImp.; 2560 ; 2561void TCanvas::DisconnectWidget(); 2562{; 2563 fCanvasID = 0;; 2564 fContextMenu = nullptr;; 2565}; 2566 ; 2567////////////////////////////////////////////////////////////////////////////////; 2568/// Check whether this canvas is to be drawn in grayscale mode.; 2569 ; 2570Bool_t TCanvas::IsGrayscale(); 2571{; 2572 return TestBit(kIsGrayscale);; 2573}; 2574 ; 2575/////////////////////////////////////////////////",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCanvas_8cxx_source.html:82398,update,update,82398,doc/master/TCanvas_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCanvas_8cxx_source.html,2,['update'],['update']
Deployability,ult . ◆ ~RChangeAttrRequest(). ROOT::Experimental::RChangeAttrRequest::~RChangeAttrRequest ; (; ). overridedefault . Member Function Documentation. ◆ NeedCanvasUpdate(). bool ROOT::Experimental::RChangeAttrRequest::NeedCanvasUpdate ; (; ); const. inlineoverridevirtual . Reimplemented from ROOT::Experimental::RDrawableRequest.; Definition at line 36 of file RCanvas.hxx. ◆ operator=(). RChangeAttrRequest & ROOT::Experimental::RChangeAttrRequest::operator= ; (; const RChangeAttrRequest & ; ). privatedelete . ◆ Process(). std::unique_ptr< ROOT::Experimental::RDrawableReply > ROOT::Experimental::RChangeAttrRequest::Process ; (; ). overridevirtual . Apply attributes changes to the drawable Return mask with actions which were really applied. ; Reimplemented from ROOT::Experimental::RDrawableRequest.; Definition at line 327 of file RCanvas.cxx. Member Data Documentation. ◆ fNeedUpdate. bool ROOT::Experimental::RChangeAttrRequest::fNeedUpdate {false}. private . ! is canvas update required ; Definition at line 29 of file RCanvas.hxx. ◆ ids. std::vector<std::string> ROOT::Experimental::RChangeAttrRequest::ids. private . array of ids ; Definition at line 25 of file RCanvas.hxx. ◆ names. std::vector<std::string> ROOT::Experimental::RChangeAttrRequest::names. private . array of attribute names ; Definition at line 26 of file RCanvas.hxx. ◆ update. bool ROOT::Experimental::RChangeAttrRequest::update {true}. private . update canvas at the end ; Definition at line 28 of file RCanvas.hxx. ◆ values. std::vector<std::unique_ptr<RAttrMap::Value_t> > ROOT::Experimental::RChangeAttrRequest::values. private . array of values ; Definition at line 27 of file RCanvas.hxx. Libraries for ROOT::Experimental::RChangeAttrRequest:. [legend]; The documentation for this class was generated from the following files:; graf2d/gpadv7/inc/ROOT/RCanvas.hxx; graf2d/gpadv7/src/RCanvas.cxx. ROOTExperimentalRChangeAttrRequest. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:03 (GVA Time) using D,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RChangeAttrRequest.html:2960,update,update,2960,doc/master/classROOT_1_1Experimental_1_1RChangeAttrRequest.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RChangeAttrRequest.html,1,['update'],['update']
Deployability,"ult in interactive ROOT session. To use web-based canvas in batch mode for image generation, one should explicitly specify --web option when starting ROOT: [shell] root -b --web tutorials/hsimple.root -e 'hpxpy->Draw(""colz""); c1->SaveAs(""image.png"");'; If for any reasons TWebCanvas does not provide required functionality, one always can disable it. Either by specifying root --web=off when starting ROOT or by setting Canvas.Name: TRootCanvas in rootrc file. ; Definition at line 35 of file TWebCanvas.h. Classes; struct  PadStatus;  ; struct  WebConn;  . Public Types; using ObjectSelectSignal_t = std::function< void(TPad *, TObject *)>;  Function type for signals, invoked when object is selected. ;  ; using PadClickedSignal_t = std::function< void(TPad *, int, int)>;  Function type for pad-click signals. ;  ; using PadSignal_t = std::function< void(TPad *)>;  Function type for pad-related signals - like activate pad signal. ;  ; using UpdatedSignal_t = std::function< void()>;  Function type for signals, invoked when canvas drawing or update is completed. ;  . Public Member Functions;  TWebCanvas (TCanvas *c, const char *name, Int_t x, Int_t y, UInt_t width, UInt_t height, Bool_t readonly=kTRUE);  Constructor. ;  ;  ~TWebCanvas () override;  Destructor. ;  ; void ActivateInEditor (TPad *pad, TObject *obj);  Activate object in editor in web browser. ;  ; void Close () override;  Close web canvas - not implemented. ;  ; void ForceUpdate () override;  Increment canvas version and force sending data to client - do not wait for reply. ;  ; Bool_t GetCanCreateObjects () const;  ; Bool_t GetLongerPolling () const;  ; Int_t GetPaletteDelivery () const;  ; Int_t GetPrimitivesMerge () const;  ; Int_t GetStyleDelivery () const;  ; const std::shared_ptr< ROOT::RWebWindow > & GetWebWindow () const;  ; UInt_t GetWindowGeometry (Int_t &x, Int_t &y, UInt_t &w, UInt_t &h) override;  Returns window geometry including borders and menus. ;  ; Bool_t HasEditor () const override;  Returns kTR",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTWebCanvas.html:2118,update,update,2118,doc/master/classTWebCanvas.html,https://root.cern,https://root.cern/doc/master/classTWebCanvas.html,1,['update'],['update']
Deployability,"ult(const ROOT::Fit::FitResult& rhs). Set the parameter settings from a fit Result. ROOT::Math::Minimizer * CreateMinimizer(). create a new minimizer according to chosen configuration. void SetMinimizerOptions(const ROOT::Math::MinimizerOptions& minopt). set all the minimizer options using class MinimizerOptions. void SetMinimizer(const char* type, const char* algo = 0). set minimizer type. const std::string & MinimizerType() const. return type of minimizer package. { return fMinimizerOpts.MinimizerType(); }. const std::string & MinimizerAlgoType() const. return type of minimizer algorithms. { return fMinimizerOpts.MinimizerAlgorithm(); }. bool NormalizeErrors() const. flag to check if resulting errors are be normalized according to chi2/ndf. { return fNormErrors; }. bool ParabErrors() const; do analysis for parabolic errors. { return fParabErrors; }. bool MinosErrors() const; do minos errros analysis on the parameters. { return fMinosErrors; }. bool UpdateAfterFit() const; Update configuration after a fit using the FitResult. { return fUpdateAfterFit; }. bool UseWeightCorrection() const; Apply Weight correction for error matrix computation. { return fWeightCorr; }. const std::vector<unsigned int> & MinosParams() const; return vector of parameter indeces for which the Minos Error will be computed. { return fMinosParams; }. void SetNormErrors(bool on = true). set the option to normalize the error on the result according to chi2/ndf. { fNormErrors= on; }. void SetParabErrors(bool on = true); set parabolic erros. { fParabErrors = on; }. void SetMinosErrors(bool on = true); set Minos erros computation to be performed after fitting. { fMinosErrors = on; }. void SetWeightCorrection(bool on = true); apply the weight correction for error matric computation. { fWeightCorr = on; }. void SetMinosErrors(const vector<unsigned int>& paramInd); set parameter indeces for running Minos; this can be used for running Minos on a subset of parameters - otherwise is run on all of them; if",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Fit__FitConfig.html:5281,configurat,configuration,5281,root/html602/ROOT__Fit__FitConfig.html,https://root.cern,https://root.cern/root/html602/ROOT__Fit__FitConfig.html,2,['configurat'],['configuration']
Deployability,"ult; 533 if (!ObjFunction()) {; 534 MATH_ERROR_MSG(""Fitter::CalculateHessErrors"",""Objective function has not been set"");; 535 return false;; 536 }; 537 ; 538 // need a special treatment in case of weighted likelihood fit; 539 // (not yet implemented); 540 if (fFitType == 2 && fConfig.UseWeightCorrection() ) {; 541 MATH_ERROR_MSG(""Fitter::CalculateHessErrors"",""Re-computation of Hesse errors not implemented for weighted likelihood fits"");; 542 MATH_INFO_MSG(""Fitter::CalculateHessErrors"",""Do the Fit using configure option FitConfig::SetParabErrors()"");; 543 return false;; 544 }; 545 ; 546 // a fit Result pointer must exist when a minimizer exists; 547 if (fMinimizer && !fResult ) {; 548 MATH_ERROR_MSG(""Fitter::CalculateHessErrors"", ""FitResult has not been created"");; 549 return false;; 550 }; 551 ; 552 // update minimizer (recreate if not done or if name has changed; 553 if (!DoUpdateMinimizerOptions()) {; 554 MATH_ERROR_MSG(""Fitter::CalculateHessErrors"",""Error re-initializing the minimizer"");; 555 return false;; 556 }; 557 ; 558 if (!fMinimizer ) {; 559 // this should not happen; 560 MATH_ERROR_MSG(""Fitter::CalculateHessErrors"", ""Need to do a fit before calculating the errors"");; 561 assert(false);; 562 return false;; 563 }; 564 ; 565 //run Hesse; 566 bool ret = fMinimizer->Hesse();; 567 if (!ret) MATH_WARN_MSG(""Fitter::CalculateHessErrors"",""Error when calculating Hessian"");; 568 ; 569 // update minimizer results with what comes out from Hesse; 570 // in case is empty - create from a FitConfig; 571 if (fResult->IsEmpty() ); 572 fResult = std::make_unique<ROOT::Fit::FitResult>(fConfig );; 573 ; 574 // update obj function in case it was an external one; 575 if (fExtObjFunction) fObjFunction.reset(fExtObjFunction->Clone());; 576 fResult->fObjFunc = fObjFunction;; 577 ; 578 // re-give a minimizer instance in case it has been changed; 579 ret |= fResult->Update(fMinimizer, fConfig, ret);; 580 ; 581 // when possible get ncalls from FCN and set in fit result; 582 if (fFitType",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Fitter_8cxx_source.html:21307,update,update,21307,doc/master/Fitter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/Fitter_8cxx_source.html,3,['update'],['update']
Deployability,"ultTreeName ; (; const char * ; treeName). inline . Definition at line 95 of file TFileCollection.h. ◆ SetList(). void TFileCollection::SetList ; (; THashList * ; list). inline . Definition at line 71 of file TFileCollection.h. ◆ Sort(). void TFileCollection::Sort ; (; Bool_t ; useindex = kFALSE). Sort the collection. ; Definition at line 688 of file TFileCollection.cxx. ◆ Streamer(). void TFileCollection::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TFileCollection::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 108 of file TFileCollection.h. ◆ Update(). Int_t TFileCollection::Update ; (; Long64_t ; avgsize = -1). Update accumulated information about the elements of the collection (e.g. ; fTotalSize). If 'avgsize' > 0, use an average file size of 'avgsize' bytes when the size info is not available. Also updates the meta data information by summarizing the meta data of the contained objects. Return -1 in case of any failure, 0 if the total size is exact, 1 if incomplete, 2 if complete but (at least partially) estimated. ; Definition at line 312 of file TFileCollection.cxx. Member Data Documentation. ◆ fDefaultTree. TString TFileCollection::fDefaultTree. private . Definition at line 45 of file TFileCollection.h. ◆ fList. THashList* TFileCollection::fList. private . Definition at line 42 of file TFileCollection.h. ◆ fMetaDataList. TList* TFileCollection::fMetaDataList. private . Definition at line 43 of file TFileCollection.h. ◆ fNCorruptFiles. Long64_t TFileCollection::fNCorruptFiles. private . Definition at line 50 of file TFileCollection.h. ◆ fNFiles. Long64_t TFileCollection::fNFiles. private . Definition at line 47 of file TFileCollection.h. ◆ fNStagedFiles. Long64_t TFileCollection::fNStagedFiles. private . Definition at line 49 of file TFileCollection.h. ◆ fTotalSize. Long64_t TFileCollection::fTotalSize. private . Defin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFileCollection.html:25524,update,updates,25524,doc/master/classTFileCollection.html,https://root.cern,https://root.cern/doc/master/classTFileCollection.html,1,['update'],['updates']
Deployability,"ulti-threading; ROOT::EnableImplicitMT();; ; // In fast mode, take samples from */cms_opendata_2012_nanoaod_skimmed/*, which has; // the preselections from the selection_* functions already applied.; std::string path = ""root://eospublic.cern.ch//eos/root-eos/cms_opendata_2012_nanoaod/"";; if (run_fast) path = ""root://eospublic.cern.ch//eos/root-eos/cms_opendata_2012_nanoaod_skimmed/"";; ; // Create dataframes for signal, background and data samples; ; // Signal: Higgs -> 4 leptons; ROOT::RDataFrame df_sig_4l(""Events"", path + ""SMHiggsToZZTo4L.root"");; ; // Background: ZZ -> 4 leptons; // Note that additional background processes from the original paper with minor contribution were left out for this; // tutorial.; ROOT::RDataFrame df_bkg_4mu(""Events"", path + ""ZZTo4mu.root"");; ROOT::RDataFrame df_bkg_4el(""Events"", path + ""ZZTo4e.root"");; ROOT::RDataFrame df_bkg_2el2mu(""Events"", path + ""ZZTo2e2mu.root"");; ; // CMS data taken in 2012 (11.6 fb^-1 integrated luminosity); ROOT::RDataFrame df_data_doublemu(; ""Events"", {path + ""Run2012B_DoubleMuParked.root"", path + ""Run2012C_DoubleMuParked.root""});; ROOT::RDataFrame df_data_doubleel(; ""Events"", {path + ""Run2012B_DoubleElectron.root"", path + ""Run2012C_DoubleElectron.root""});; ; // Reconstruct Higgs to 4 muons; auto df_sig_4mu_reco = reco_higgs_to_4mu(df_sig_4l);; const auto luminosity = 11580.0; // Integrated luminosity of the data samples; const auto xsec_SMHiggsToZZTo4L = 0.0065; // H->4l: Standard Model cross-section; const auto nevt_SMHiggsToZZTo4L = 299973.0; // H->4l: Number of simulated events; const auto nbins = 36; // Number of bins for the invariant mass spectrum; auto df_h_sig_4mu = df_sig_4mu_reco; .Define(""weight"", [&] { return luminosity * xsec_SMHiggsToZZTo4L / nevt_SMHiggsToZZTo4L; }); .Histo1D({""h_sig_4mu"", """", nbins, 70, 180}, ""H_mass"", ""weight"");; ; const auto scale_ZZTo4l = 1.386; // ZZ->4mu: Scale factor for ZZ to four leptons; const auto xsec_ZZTo4mu = 0.077; // ZZ->4mu: Standard Model cross-section; const a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/df103__NanoAODHiggsAnalysis_8C.html:16563,integrat,integrated,16563,doc/master/df103__NanoAODHiggsAnalysis_8C.html,https://root.cern,https://root.cern/doc/master/df103__NanoAODHiggsAnalysis_8C.html,1,['integrat'],['integrated']
Deployability,"ultiDim::Status ; (; ); const. inlineoverridevirtual . return status of integration . status = 0 successful integration; status = 1 MAXPTS is too small for the specified accuracy EPS. The result contain the values obtainable for the specified value of MAXPTS.; status = 2 size is too small for the specified number MAXPTS of function evaluations.; status = 3 wrong dimension , N<2 or N > 15. Returned result and error are zero . Implements ROOT::Math::VirtualIntegrator.; Definition at line 149 of file AdaptiveIntegratorMultiDim.h. Member Data Documentation. ◆ fAbsTol. double ROOT::Math::AdaptiveIntegratorMultiDim::fAbsTol. private . absolute tolerance ; Definition at line 186 of file AdaptiveIntegratorMultiDim.h. ◆ fDim. unsigned int ROOT::Math::AdaptiveIntegratorMultiDim::fDim. private . dimensionality of integrand ; Definition at line 182 of file AdaptiveIntegratorMultiDim.h. ◆ fError. double ROOT::Math::AdaptiveIntegratorMultiDim::fError. private . integration error ; Definition at line 190 of file AdaptiveIntegratorMultiDim.h. ◆ fFun. const IMultiGenFunction* ROOT::Math::AdaptiveIntegratorMultiDim::fFun. private . Definition at line 195 of file AdaptiveIntegratorMultiDim.h. ◆ fMaxPts. unsigned int ROOT::Math::AdaptiveIntegratorMultiDim::fMaxPts. private . maximum number of function evaluation requested ; Definition at line 184 of file AdaptiveIntegratorMultiDim.h. ◆ fMinPts. unsigned int ROOT::Math::AdaptiveIntegratorMultiDim::fMinPts. private . minimum number of function evaluation requested ; Definition at line 183 of file AdaptiveIntegratorMultiDim.h. ◆ fNEval. int ROOT::Math::AdaptiveIntegratorMultiDim::fNEval. private . number of function evaluation ; Definition at line 192 of file AdaptiveIntegratorMultiDim.h. ◆ fRelError. double ROOT::Math::AdaptiveIntegratorMultiDim::fRelError. private . Relative error. ; Definition at line 191 of file AdaptiveIntegratorMultiDim.h. ◆ fRelTol. double ROOT::Math::AdaptiveIntegratorMultiDim::fRelTol. private . relative tolerance",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html:12823,integrat,integration,12823,doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html,1,['integrat'],['integration']
Deployability,"ultiErrorsTGraphMultiErrors()TGraphMultiErrors default constructor.Definition TGraphMultiErrors.cxx:66; TGraphMultiErrors::SetEYvirtual void SetEY(Int_t e, Int_t np, const Double_t *eyL, const Double_t *eyH)Set error e ey values.Definition TGraphMultiErrors.cxx:1973; TGraphMultiErrors::SetSumErrorsModevirtual void SetSumErrorsMode(Int_t m)Set the sum errors mode and recalculate summed errors.Definition TGraphMultiErrors.cxx:2007; TGraphMultiErrors::BayesDividevirtual void BayesDivide(const TH1 *pass, const TH1 *total, Option_t *opt="""")This function is only kept for backward compatibility.Definition TGraphMultiErrors.cxx:990; TGraphMultiErrors::Printvoid Print(Option_t *chopt="""") const overridePrint graph and errors values.Definition TGraphMultiErrors.cxx:1708; TGraphMultiErrors::operator=TGraphMultiErrors & operator=(const TGraphMultiErrors &tgme)TGraphMultiErrors assignment operator.Definition TGraphMultiErrors.cxx:599; TGraphMultiErrors::CopyAndReleasevoid CopyAndRelease(Double_t **newarrays, Int_t ibegin, Int_t iend, Int_t obegin) overrideCopy and release.Definition TGraphMultiErrors.cxx:748; TGraphMultiErrors::SavePrimitivevoid SavePrimitive(std::ostream &out, Option_t *option="""") overrideSave primitive as a C++ statement(s) on output stream out.Definition TGraphMultiErrors.cxx:1729; TGraphMultiErrors::fSumErrorsModeInt_t fSumErrorsModeHow y errors are summed: kOnlyFirst = Only First; kSquareSum = Squared Sum; kSum = Absolute Addition.Definition TGraphMultiErrors.h:33; TGraphMultiErrors::GetLineWidthvirtual Width_t GetLineWidth() constReturn the line width.Definition TAttLine.h:35; TGraphMultiErrors::GetEXhighDouble_t * GetEXhigh() const overrideDefinition TGraphMultiErrors.h:142; TGraphMultiErrors::ESummationModesESummationModesDefinition TGraphMultiErrors.h:57; TGraphMultiErrors::kAbsSum@ kAbsSumCalculate the absolute sum of all errors.Definition TGraphMultiErrors.h:60; TGraphMultiErrors::kSquareSum@ kSquareSumCalculate the square sum of all errors.Definition T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphMultiErrors_8h_source.html:18737,release,release,18737,doc/master/TGraphMultiErrors_8h_source.html,https://root.cern,https://root.cern/doc/master/TGraphMultiErrors_8h_source.html,1,['release'],['release']
Deployability,"ultiErrorsTGraphMultiErrors()TGraphMultiErrors default constructor.Definition TGraphMultiErrors.cxx:66; TGraphMultiErrors::SetEYvirtual void SetEY(Int_t e, Int_t np, const Double_t *eyL, const Double_t *eyH)Set error e ey values.Definition TGraphMultiErrors.cxx:1973; TGraphMultiErrors::SetSumErrorsModevirtual void SetSumErrorsMode(Int_t m)Set the sum errors mode and recalculate summed errors.Definition TGraphMultiErrors.cxx:2007; TGraphMultiErrors::BayesDividevirtual void BayesDivide(const TH1 *pass, const TH1 *total, Option_t *opt="""")This function is only kept for backward compatibility.Definition TGraphMultiErrors.cxx:990; TGraphMultiErrors::Printvoid Print(Option_t *chopt="""") const overridePrint graph and errors values.Definition TGraphMultiErrors.cxx:1708; TGraphMultiErrors::operator=TGraphMultiErrors & operator=(const TGraphMultiErrors &tgme)TGraphMultiErrors assignment operator.Definition TGraphMultiErrors.cxx:599; TGraphMultiErrors::CopyAndReleasevoid CopyAndRelease(Double_t **newarrays, Int_t ibegin, Int_t iend, Int_t obegin) overrideCopy and release.Definition TGraphMultiErrors.cxx:748; TGraphMultiErrors::SavePrimitivevoid SavePrimitive(std::ostream &out, Option_t *option="""") overrideSave primitive as a C++ statement(s) on output stream out.Definition TGraphMultiErrors.cxx:1729; TGraphMultiErrors::fSumErrorsModeInt_t fSumErrorsModeHow y errors are summed: kOnlyFirst = Only First; kSquareSum = Squared Sum; kSum = Absolute Addition.Definition TGraphMultiErrors.h:33; TGraphMultiErrors::GetLineWidthvirtual Width_t GetLineWidth() constReturn the line width.Definition TAttLine.h:35; TGraphMultiErrors::GetEXhighDouble_t * GetEXhigh() const overrideDefinition TGraphMultiErrors.h:142; TGraphMultiErrors::kAbsSum@ kAbsSumCalculate the absolute sum of all errors.Definition TGraphMultiErrors.h:60; TGraphMultiErrors::kSquareSum@ kSquareSumCalculate the square sum of all errors.Definition TGraphMultiErrors.h:59; TGraphMultiErrors::kOnlyFirst@ kOnlyFirstOnly take errors fro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphMultiErrors_8cxx_source.html:80254,release,release,80254,doc/master/TGraphMultiErrors_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphMultiErrors_8cxx_source.html,1,['release'],['release']
Deployability,"ultiGraph;; 106 std::vector<TGraph*> fGraphs;; 107 Int_t fNumGraphs;; 108 Int_t fIndex;; 109 };; 110 ; 111 class MethodBase : virtual public IMethod, public Configurable {; 112 ; 113 friend class CrossValidation;; 114 friend class Factory;; 115 friend class RootFinder;; 116 friend class MethodBoost;; 117 friend class MethodCrossValidation;; 118 friend class Experimental::Classification;; 119 ; 120 public:; 121 ; 122 enum EWeightFileType { kROOT=0, kTEXT };; 123 ; 124 // default constructor; 125 MethodBase( const TString& jobName,; 126 Types::EMVA methodType,; 127 const TString& methodTitle,; 128 DataSetInfo& dsi,; 129 const TString& theOption = """" );; 130 ; 131 // constructor used for Testing + Application of the MVA, only (no training),; 132 // using given weight file; 133 MethodBase( Types::EMVA methodType,; 134 DataSetInfo& dsi,; 135 const TString& weightFile );; 136 ; 137 // default destructor; 138 virtual ~MethodBase();; 139 ; 140 // declaration, processing and checking of configuration options; 141 void SetupMethod();; 142 void ProcessSetup();; 143 virtual void CheckSetup(); // may be overwritten by derived classes; 144 ; 145 // ---------- main training and testing methods ------------------------------; 146 ; 147 // prepare tree branch with the method's discriminating variable; 148 void AddOutput( Types::ETreeType type, Types::EAnalysisType analysisType );; 149 ; 150 // performs classifier training; 151 // calls methods Train() implemented by derived classes; 152 void TrainMethod();; 153 ; 154 // optimize tuning parameters; 155 virtual std::map<TString,Double_t> OptimizeTuningParameters(TString fomType=""ROCIntegral"", TString fitType=""FitGA"");; 156 virtual void SetTuneParameters(std::map<TString,Double_t> tuneParameters);; 157 ; 158 virtual void Train() = 0;; 159 ; 160 // store and retrieve time used for training; 161 void SetTrainTime( Double_t trainTime ) { fTrainTime = trainTime; }; 162 Double_t GetTrainTime() const { return fTrainTime; }; 163 ; 164 // stor",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodBase_8h_source.html:4614,configurat,configuration,4614,doc/master/MethodBase_8h_source.html,https://root.cern,https://root.cern/doc/master/MethodBase_8h_source.html,1,['configurat'],['configuration']
Deployability,"um Strategy { Speed; Balance; Robustness; };; enum PrintLevel { None; Reduced; Normal; ExtraForProblem; Maximum; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. private:. RooArgList*_constParamList; TStopwatch_cumulTimer; Bool_t_doEvalErrorWall; TMatrixDSym*_extV; RooArgList*_floatParamList; RooAbsReal*_func; Bool_t_handleLocalErrors; RooArgList*_initConstParamList; RooArgList*_initFloatParamList; ofstream*_logfile; Double_t_maxFCN; Int_t_nPar; Int_t_numBadNLL; Bool_t_optConst; Int_t_printEvalErrors; Int_t_printLevel; Bool_t_profile; Int_t_status; static TVirtualFitter*_theFitter; TStopwatch_timer; Bool_t_verbose; Int_t_warnLevel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void cleanup(); Cleanup method called by atexit handler installed by RooSentinel; to delete all global heap objects when the program is terminated. RooMinuit(RooAbsReal& function); Construct MINUIT interface to given function. Function can be anything,; but is typically a -log(likelihood) implemented by RooNLLVar or a chi^2; (implemented by RooChi2Var). Other frequent use cases are a RooAddition; of a RooNLLVar plus a penalty or constraint term. This class propagates; all RooFit information (floating parameters, their values and errors); to MINUIT before each MINUIT call and propagates all MINUIT information; back to the RooFit object at the end of each call (updated parameter; values, their (asymmetric errors) etc. The default MINUIT error level; for HESSE and MINOS error analysis is taken from the defaultErrorLevel(); value of the input function. ~RooMinuit(); Destructor. void setStrategy(Int_t strat); Change MINUIT strategy to istrat. Accepted codes; are 0,1,2 and represent MINUIT strategies for dealing; most efficiently with fast FCNs (0), e",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooMinuit.html:7974,install,installed,7974,root/html526/RooMinuit.html,https://root.cern,https://root.cern/root/html526/RooMinuit.html,2,['install'],['installed']
Deployability,"um of two functions Here: a background exponential and a crystalball function Parameters can be set: ;  fitpanel_playback.CThis file will test all the transient frames (aka Dialog windows) displayed in the fitpanel, as the rest of the functionality is tried automatically with the UnitTest.C unit ;  fitslicesy.C Illustrates how to use the TH1::FitSlicesY function It uses the TH2F histogram generated in macro hsimple.C It invokes FitSlicesY and draw the fitted ""mean"" and ""sigma"" in 2 sepate pads ;  FittingDemo.C Example for fitting signal/background ;  graph2dfit.C Fitting a TGraph2D ;  Ifit.C Example of a program to fit non-equidistant data points ;  langaus.C Convoluted Landau and Gaussian Fitting Function (using ROOT's Landau and Gauss functions) ;  line3Dfit.C Fitting of a TGraph2D with a 3D straight line ;  minuit2FitBench.C Demonstrate performance and usage of Minuit2 and Fumili2 for monodimensional fits ;  minuit2FitBench2D.C ;  minuit2GausFit.C Perform fits with different configurations using Minuit2 ;  multidimfit.C Multi-Dimensional Parametrisation and Fitting ;  multifit.C Fitting multiple functions to different ranges of a 1-D histogram Example showing how to fit in a sub-range of an histogram An histogram is created and filled with the bin contents and errors defined in the table below ;  myfit.C Get in memory an histogram from a root file and fit a user defined function ;  NumericalMinimization.C Example on how to use the new Minimizer class in ROOT Show usage with all the possible minimizers ;  qa2.C Test generation of random numbers distributed according to a function defined by the user ;  TestBinomial.C Perform a fit to a set of data with binomial errors like those derived from the division of two histograms ;  TwoHistoFit2D.C Example to fit two histograms at the same time ;  vectorizedFit.C use it for fitting an histogram ;  ► fitsio;  FITS_tutorial1.C ;  FITS_tutorial2.C ;  FITS_tutorial3.C ;  FITS_tutorial4.C ;  FITS_tutorial5.C ;  FITS_tutorial6.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v616/files.html:109436,configurat,configurations,109436,doc/v616/files.html,https://root.cern,https://root.cern/doc/v616/files.html,1,['configurat'],['configurations']
Deployability,"um of two functions Here: a background exponential and a crystalball function Parameters can be set: ;  fitpanel_playback.CThis file will test all the transient frames (aka Dialog windows) displayed in the fitpanel, as the rest of the functionality is tried automatically with the UnitTest.C unit ;  fitslicesy.C Illustrates how to use the TH1::FitSlicesY function It uses the TH2F histogram generated in macro hsimple.C It invokes FitSlicesY and draw the fitted ""mean"" and ""sigma"" in 2 sepate pads ;  FittingDemo.C Example for fitting signal/background ;  graph2dfit.C Fitting a TGraph2D ;  Ifit.C Example of a program to fit non-equidistant data points ;  langaus.C Convoluted Landau and Gaussian Fitting Function (using ROOT's Landau and Gauss functions) ;  line3Dfit.C Fitting of a TGraph2D with a 3D straight line ;  minuit2FitBench.C Demonstrate performance and usage of Minuit2 and Fumili2 for monodimensional fits ;  minuit2FitBench2D.C ;  minuit2GausFit.C Perform fits with different configurations using Minuit2 ;  multidimfit.C Multi-Dimensional Parametrisation and Fitting ;  multifit.C Fitting multiple functions to different ranges of a 1-D histogram Example showing how to fit in a sub-range of an histogram An histogram is created and filled with the bin contents and errors defined in the table below ;  myfit.C Get in memory an histogram from a root file and fit a user defined function ;  NumericalMinimization.C Example on how to use the new Minimizer class in ROOT Show usage with all the possible minimizers ;  qa2.C Test generation of random numbers distributed according to a function defined by the user ;  TestBinomial.C Perform a fit to a set of data with binomial errors like those derived from the division of two histograms ;  TwoHistoFit2D.C Example to fit two histograms at the same time ;  vectorizedFit.C use it for fitting an histogram ;  ► fitsio;  FITS_tutorial1.COpen a FITS file and retrieve the first plane of the image array as a TImage object ;  FITS_tutoria",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v612/files.html:105134,configurat,configurations,105134,doc/v612/files.html,https://root.cern,https://root.cern/doc/v612/files.html,2,['configurat'],['configurations']
Deployability,"um of two functions Here: a background exponential and a crystalball function Parameters can be set: ;  fitpanel_playback.CThis file will test all the transient frames (aka Dialog windows) displayed in the fitpanel, as the rest of the functionality is tried automatically with the UnitTest.C unit ;  fitslicesy.C Illustrates how to use the TH1::FitSlicesY function It uses the TH2F histogram generated in macro hsimple.C It invokes FitSlicesY and draw the fitted ""mean"" and ""sigma"" in 2 sepate pads ;  FittingDemo.C Example for fitting signal/background ;  graph2dfit.C Fitting a TGraph2D ;  Ifit.C Example of a program to fit non-equidistant data points ;  langaus.C Convoluted Landau and Gaussian Fitting Function (using ROOT's Landau and Gauss functions) ;  line3Dfit.C Fitting of a TGraph2D with a 3D straight line ;  minuit2FitBench.C Demonstrate performance and usage of Minuit2 and Fumili2 for monodimensional fits ;  minuit2FitBench2D.C ;  minuit2GausFit.C Perform fits with different configurations using Minuit2 ;  multidimfit.C Multi-Dimensional Parametrisation and Fitting ;  multifit.C Fitting multiple functions to different ranges of a 1-D histogram Example showing how to fit in a sub-range of an histogram An histogram is created and filled with the bin contents and errors defined in the table below ;  myfit.C Get in memory an histogram from a root file and fit a user defined function ;  NumericalMinimization.C Example on how to use the new Minimizer class in ROOT Show usage with all the possible minimizers ;  qa2.C Test generation of random numbers distributed according to a function defined by the user ;  TestBinomial.C Perform a fit to a set of data with binomial errors like those derived from the division of two histograms ;  TwoHistoFit2D.C Example to fit two histograms at the same time ;  ► fitsio;  FITS_tutorial1.COpen a FITS file and retrieve the first plane of the image array as a TImage object ;  FITS_tutorial2.COpen a FITS file whose primary array represents",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/files.html:106772,configurat,configurations,106772,doc/v608/files.html,https://root.cern,https://root.cern/doc/v608/files.html,2,['configurat'],['configurations']
Deployability,"um on a range, first set this range via the SetRange function; Method:; First, a grid search is performed to find the initial estimate of the; minimum location. The range of the function is divided into fNpx and fNpy; sub-ranges. If the function is ""good"" (or ""bad""), these values can be changed; by SetNpx and SetNpy functions; Then, Minuit minimization is used with starting values found by the grid search. char * GetObjectInfo(Int_t px, Int_t py) const; Redefines TObject::GetObjectInfo.; Displays the function value; corresponding to cursor position px,py. Double_t GetRandom(); Return a random number following this function shape*-; *-* ====================================================; -. Double_t GetRandom(Double_t xmin, Double_t xmax); Return a random number following this function shape*-; *-* ====================================================; -. void GetRandom2(Double_t& xrandom, Double_t& yrandom); Return 2 random numbers following this function shape; *-* =====================================================; -; *-* The distribution contained in this TF2 function is integrated; *-* over the cell contents.; *-* It is normalized to 1.; *-* Getting the two random numbers implies:; *-* - Generating a random number between 0 and 1 (say r1); *-* - Look in which cell in the normalized integral r1 corresponds to; *-* - make a linear interpolation in the returned cell; -; -; *-* IMPORTANT NOTE; *-* The integral of the function is computed at fNpx * fNpy points.; *-* If the function has sharp peaks, you should increase the number of; *-* points (SetNpx, SetNpy) such that the peak is correctly tabulated; *-* at several points. void GetRange(Double_t& xmin, Double_t& ymin, Double_t& xmax, Double_t& ymax) const; Return range of a 2-D function*-*-; *-* ==============================. void GetRange(Double_t& xmin, Double_t& ymin, Double_t& zmin, Double_t& xmax, Double_t& ymax, Double_t& zmax) const; Return range of function*-*-*-*-; *-* ========================. Double_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TF2.html:30192,integrat,integrated,30192,root/html528/TF2.html,https://root.cern,https://root.cern/root/html528/TF2.html,4,['integrat'],['integrated']
Deployability,"um value of the function; on its range. Return the function value at the minimum; To find the minimum on a subrange, use the SetRange() function first.; Method:; First, a grid search is performed to find the initial estimate of the; minimum location. The range of the function is divided; into fNpx,fNpy and fNpz sub-ranges. If the function is ""good"" (or ""bad""),; these values can be changed by SetNpx(), SetNpy() and SetNpz() functions.; Then, Minuit minimization is used with starting values found by the grid search. Note that this method will always do first a grid search in contrast to GetMinimum. Double_t GetMaximumXYZ(Double_t& x, Double_t& y, Double_t& z); Compute the X, Y and Z values corresponding to the maximum value of the function; on its range. Return the function value at the maximum; See TF3::GetMinimumXYZ. void GetRandom3(Double_t& xrandom, Double_t& yrandom, Double_t& zrandom); Return 3 random numbers following this function shape. The distribution contained in this TF3 function is integrated; over the cell contents.; It is normalized to 1.; Getting the three random numbers implies:; - Generating a random number between 0 and 1 (say r1); - Look in which cell in the normalized integral r1 corresponds to; - make a linear interpolation in the returned cell. IMPORTANT NOTE; The integral of the function is computed at fNpx * fNpy * fNpz points.; If the function has sharp peaks, you should increase the number of; points (SetNpx, SetNpy, SetNpz) such that the peak is correctly tabulated; at several points. void GetRange(Double_t& xmin, Double_t& ymin, Double_t& zmin, Double_t& xmax, Double_t& ymax, Double_t& zmax) const; Return range of function. Double_t GetSave(const Double_t* x); Get value corresponding to X in array of fSave values. Double_t Integral(Double_t ax, Double_t bx, Double_t ay, Double_t by, Double_t az, Double_t bz, Double_t epsrel = 9.9999999999999995E-7); Return Integral of a 3d function in range [ax,bx],[ay,by],[az,bz]; with a desired relative ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TF3.html:35421,integrat,integrated,35421,root/html602/TF3.html,https://root.cern,https://root.cern/root/html602/TF3.html,1,['integrat'],['integrated']
Deployability,"umGenConfig* RooAbsPdf::specialGeneratorConfig(bool createOnTheFly); 2637{; 2638 if (!_specGeneratorConfig && createOnTheFly) {; 2639 _specGeneratorConfig = std::make_unique<RooNumGenConfig>(*defaultGeneratorConfig()) ;; 2640 }; 2641 return _specGeneratorConfig.get();; 2642}; 2643 ; 2644 ; 2645 ; 2646////////////////////////////////////////////////////////////////////////////////; 2647/// Return the numeric MC generator configuration used for this object. If; 2648/// a specialized configuration was associated with this object, that configuration; 2649/// is returned, otherwise the default configuration for all RooAbsReals is returned; 2650 ; 2651const RooNumGenConfig* RooAbsPdf::getGeneratorConfig() const; 2652{; 2653 const RooNumGenConfig* config = specialGeneratorConfig() ;; 2654 if (config) return config ;; 2655 return defaultGeneratorConfig() ;; 2656}; 2657 ; 2658 ; 2659 ; 2660////////////////////////////////////////////////////////////////////////////////; 2661/// Set the given configuration as default numeric MC generator; 2662/// configuration for this object; 2663 ; 2664void RooAbsPdf::setGeneratorConfig(const RooNumGenConfig& config); 2665{; 2666 _specGeneratorConfig = std::make_unique<RooNumGenConfig>(config);; 2667}; 2668 ; 2669 ; 2670 ; 2671////////////////////////////////////////////////////////////////////////////////; 2672/// Remove the specialized numeric MC generator configuration associated; 2673/// with this object; 2674 ; 2675void RooAbsPdf::setGeneratorConfig(); 2676{; 2677 _specGeneratorConfig.reset();; 2678}; 2679 ; 2680RooAbsPdf::GenSpec::~GenSpec() = default;; 2681 ; 2682 ; 2683////////////////////////////////////////////////////////////////////////////////; 2684 ; 2685RooAbsPdf::GenSpec::GenSpec(RooAbsGenContext* context, const RooArgSet& whatVars, RooDataSet* protoData, Int_t nGen,; 2686 bool extended, bool randProto, bool resampleProto, TString dsetName, bool init) :; 2687 _genContext(context), _whatVars(whatVars), _protoData(protoData), ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:126529,configurat,configuration,126529,doc/master/RooAbsPdf_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html,6,['configurat'],['configuration']
Deployability,"umGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; RooSetProxydepsdependents of this p.d.f; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooSetProxyintobsobservables that p.d.f is integrated over; RooRealProxyintpdfp.d.f that is integrated. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooProjectedPdf(); Default constructor. RooProjectedPdf(const char* name, const char* title, RooAbsReal& _intpdf, const RooArgSet& intObs); Construct projection of input pdf '_intpdf' over observables 'intObs'. RooProjectedPdf(const RooProjectedPdf& other, const char* name = 0); Copy constructor. Double_t getValV(const RooArgSet* set = 0) const; Special version of getVal() overrides RooAbsReal::getValF() to save value of current normalization set. Double_t evaluate() const; Evaluate projected p.d.f. const RooAbsReal* getProjection(const RooArgSet* iset, const RooArgSet* nset, const char* rangeName, int& code) const; Retrieve object representing projection integral of input p.d.f; over observables iset, while normalizing over observables; nset. The code argument returned by reference is the unique code; defining this particular projection configuration.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooProjectedPdf.html:43874,integrat,integrated,43874,root/html534/RooProjectedPdf.html,https://root.cern,https://root.cern/root/html534/RooProjectedPdf.html,1,['integrat'],['integrated']
Deployability,"umIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; RooSetProxy_varSetNot used anymore?; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooConvCoefVar(const char* name, const char* title, const RooAbsAnaConvPdf& input, Int_t coefIdx, const RooArgSet* varList = 0); Constuctor given a RooAbsAnaConvPdf a coefficient index and a set with the; convoluted observable(s). RooConvCoefVar(const RooConvCoefVar& other, const char* name = 0); Copy constructor. Double_t getValV(const RooArgSet* nset = 0) const; Return value of chosen coefficient. Double_t evaluate() const; Return value of chosen coefficient. Int_t getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars, const char* rangeName = 0) const; Return analytical integration capabilities of chosen coefficient. Double_t analyticalIntegral(Int_t code, const char* rangeName = 0) const; Return analytical integral of chosen coefficient. inline RooConvCoefVar(); Constructors, assignment etc. TObject* clone(const char* newname) const; { return new RooConvCoefVar(*this,newname); }. virtual ~RooConvCoefVar(); Destructor. » Last changed: Tue Mar 10 17:16:05 2015 » Last generated: 2015-03-10 17:16; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooConvCoefVar.html:36479,integrat,integration,36479,root/html534/RooConvCoefVar.html,https://root.cern,https://root.cern/root/html534/RooConvCoefVar.html,1,['integrat'],['integration']
Deployability,"umIntFactory(const RooNumIntFactory& other); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. static RooNumIntFactory*_instance; map<std::string,std::pair<RooAbsIntegrator*,std::string> >_map. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooNumIntFactory(); Constructor. Register all known integrators by calling; their static registration functions. ~RooNumIntFactory(); Destructor. RooNumIntFactory(const RooNumIntFactory& other); Copy constructor. RooNumIntFactory& instance(); Static method returning reference to singleton instance of factory. void cleanup(); Cleanup routine called by atexit() handler installed by RooSentinel. Bool_t storeProtoIntegrator(RooAbsIntegrator* proto, const RooArgSet& defConfig, const char* depName = """"); Method accepting registration of a prototype numeric integrator along with a RooArgSet of its; default configuration options and an optional list of names of other numeric integrators; on which this integrator depends. Returns true if integrator was previously registered. const RooAbsIntegrator* getProtoIntegrator(const char* name); Return prototype integrator with given (class) name. const char* getDepIntegratorName(const char* name); Get list of class names of integrators needed by integrator named 'name'. RooAbsIntegrator* createIntegrator(RooAbsFunc& func, const RooNumIntConfig& config, Int_t ndim = 0); Construct a numeric integrator instance that operates on function 'func' and is configured; with 'config'. If ndimPreset is greater than zero that number is taken as the dimensionality; of the integration, otherwise it is queried from",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooNumIntFactory.html:6482,install,installed,6482,root/html526/RooNumIntFactory.html,https://root.cern,https://root.cern/root/html526/RooNumIntFactory.html,4,['install'],['installed']
Deployability,"umIntFactory(const RooNumIntFactory& other); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. static RooNumIntFactory*_instance; map<std::string,std::pair<RooAbsIntegrator*,std::string> >_map. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooNumIntFactory(); Constructor. Register all known integrators by calling; their static registration functions. ~RooNumIntFactory(); Destructor. RooNumIntFactory(const RooNumIntFactory& other); Copy constructor. RooNumIntFactory& instance(); Static method returning reference to singleton instance of factory. void cleanup(); Cleanup routine called by atexit() handler installed by RooSentinel. Bool_t storeProtoIntegrator(RooAbsIntegrator* proto, const RooArgSet& defConfig, const char* depName = """"); Method accepting registration of a prototype numeric integrator along with a RooArgSet of its; default configuration options and an optional list of names of other numeric integrators; on which this integrator depends. Returns true if integrator was previously registered. const RooAbsIntegrator* getProtoIntegrator(const char* name); Return prototype integrator with given (class) name. const char* getDepIntegratorName(const char* name); Get list of class names of integrators needed by integrator named 'name'. RooAbsIntegrator* createIntegrator(RooAbsFunc& func, const RooNumIntConfig& config, Int_t ndim = 0, Bool_t isBinned = kFALSE); Construct a numeric integrator instance that operates on function 'func' and is configured; with 'config'. If ndimPreset is greater than zero that number is taken as the dimensionality; of the integration, ot",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooNumIntFactory.html:6582,install,installed,6582,root/html534/RooNumIntFactory.html,https://root.cern,https://root.cern/root/html534/RooNumIntFactory.html,1,['install'],['installed']
Deployability,"umIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; static Int_tRooPrintable::_nameLength; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TRefArrayRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; RooListProxy_set1Set of input fractions; TIterator*_setIter1! Iterator over set of input fractions; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooFracRemainder.html:32924,integrat,integrator,32924,root/html532/RooFracRemainder.html,https://root.cern,https://root.cern/root/html532/RooFracRemainder.html,2,"['configurat', 'integrat']","['configuration', 'integrator']"
Deployability,"ument for floats and doubles, either ""%f"" or ""%e"" or ""%10f"" and so on; static Int_tTBufferFile::fgMapSizeDefault map size for all TBuffer objects; static TStringTXMLSetup::fgNameSpaceBase. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TBufferXML(); Default constructor. TBufferXML(TBuffer::EMode mode); Creates buffer object to serailize/deserialize data to/from xml.; Mode should be either TBuffer::kRead or TBuffer::kWrite. TBufferXML(TBuffer::EMode mode, TXMLFile* file); Creates buffer object to serailize/deserialize data to/from xml.; This constructor should be used, if data from buffer supposed to be stored in file.; Mode should be either TBuffer::kRead or TBuffer::kWrite. ~TBufferXML(); destroy xml buffer. TXMLFile* XmlFile(); returns pointer to TXMLFile object; access to file is necessary to produce unique identifier for object references. TString ConvertToXML(TObject* obj, Bool_t GenericLayout = kFALSE, Bool_t UseNamespaces = kFALSE); converts object, inherited from TObject class, to XML string; fmt contains configuration of XML layout. See TXMLSetup class for detatils. TString ConvertToXML(void* obj, TClass* cl, Bool_t GenericLayout = kFALSE, Bool_t UseNamespaces = kFALSE); converts any type of object to XML string; fmt contains configuration of XML layout. See TXMLSetup class for detatils. TObject* ConvertFromXML(const char* str, Bool_t GenericLayout = kFALSE, Bool_t UseNamespaces = kFALSE); Read object from XML, produced by ConvertToXML() method.; If object does not inherit from TObject class, return 0.; GenericLayout and UseNamespaces should be the same as in ConvertToXML(). void* ConvertFromXMLAny(const char* str, TClass** cl = 0, Bool_t GenericLayout = kFALSE, Bool_t UseNamespaces = kFALSE); Read object of any class from XML, produced by ConvertToXML() method.; If cl!=0, return actual class of object.; GenericLayout and UseNamespaces should be the same as in ConvertToXML(). XMLNodePointer_t XmlWriteAny(const voi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TBufferXML.html:24500,configurat,configuration,24500,root/html526/TBufferXML.html,https://root.cern,https://root.cern/root/html526/TBufferXML.html,4,['configurat'],['configuration']
Deployability,"umeric integrator RooIntegrator1D to calculate Int(cpsi); [#1] INFO:Caching -- RooAbsCachedPdf::getCache(Mf) creating new cache 0x7f337a0 with pdf Tpsi_CONV_Rpsi_CACHE_Obs[cpsi]_NORM_cpsi for nset (cpsi) with code 0 from preexisting content.; [#1] INFO:Fitting -- RooAbsPdf::fitTo(Mf_over_Mf_Int[cpsi]) fixing normalization set for coefficient determination to observables in data; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_Mf_over_Mf_Int[cpsi]_MfData) Summation contains a RooNLLVar, using its error level; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const optimization; [#1] INFO:Caching -- RooAbsCachedPdf::getCache(Mf) creating new cache 0x7e9d680 with pdf Tpsi_CONV_Rpsi_CACHE_Obs[cpsi] for nset () with code 1 from preexisting content.; [#1] INFO:NumericIntegration -- RooRealIntegral::init(Mf_Int[cpsi]) using numeric integrator RooIntegrator1D to calculate Int(cpsi); [#1] INFO:NumericIntegration -- RooRealIntegral::init(Tpsi_Int[psi]) using numeric integrator RooIntegrator1D to calculate Int(psi); [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: deactivating const optimization; [#1] INFO:NumericIntegration -- RooRealIntegral::init(Tpsi_Int[psi]) using numeric integrator RooIntegrator1D to calculate Int(psi); [#1] INFO:Caching -- RooAbsCachedPdf::getCache(Mf) creating new cache 0x7e9d680 with pdf Tpsi_CONV_Rpsi_CACHE_Obs[cpsi]_NORM_cpsi for nset (cpsi) with code 0; [#1] INFO:NumericIntegration -- RooRealIntegral::init(Tpsi_CONV_Rpsi_CACHE_Obs[cpsi]_NORM_cpsi_Int[cpsi]) using numeric integrator RooIntegrator1D to calculate Int(cpsi); [#1] INFO:NumericIntegration -- RooRealIntegral::init(T_Int[cpsi]) using numeric integrator RooIntegrator1D to calculate Int(cpsi); DateFebruary 2018 ; AuthorsClemens Lange, Wouter Verkerke (C version) ; Definition in file rf210_angularconv.py. tutorialsroofitrf210_angularconv.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf210__angularconv_8py.html:7533,integrat,integrator,7533,doc/master/rf210__angularconv_8py.html,https://root.cern,https://root.cern/doc/master/rf210__angularconv_8py.html,5,['integrat'],['integrator']
Deployability,"ummed value of nsig+nbkg; // sampling from a uniform distribution between 0 and 1000; //; // In general one can randomize a single parameter, or a; // sum of N parameters, using either a uniform or a Gaussian; // distribution. Multiple randomization can be executed; // by a single randomizer module; ; RooRandomizeParamMCSModule randModule;; randModule.sampleSumUniform(RooArgSet(nsig, nbkg), 50, 500);; mcs->addModule(randModule);; ; // Add profile likelihood calculation of significance. Redo each; // fit while keeping parameter nsig fixed to zero. For each toy,; // the difference in -log(L) of both fits is stored, as well; // a simple significance interpretation of the delta(-logL); // using Dnll = 0.5 sigma^2; ; RooDLLSignificanceMCSModule sigModule(nsig, 0);; mcs->addModule(sigModule);; ; // R u n m a n a g e r , m a k e p l o t s; // ---------------------------------------------; ; // Run 1000 experiments. This configuration will generate a fair number; // of (harmless) MINUIT warnings due to the instability of the Chebychev polynomial fit; // at low statistics.; mcs->generateAndFit(500);; ; // Make some plots; TH1 *dll_vs_ngen = mcs->fitParDataSet().createHistogram(""ngen,dll_nullhypo_nsig"", AutoBinning(40), AutoBinning(40));; TH1 *z_vs_ngen = mcs->fitParDataSet().createHistogram(""ngen,significance_nullhypo_nsig"", AutoBinning(40), AutoBinning(40));; TH1 *errnsig_vs_ngen = mcs->fitParDataSet().createHistogram(""ngen,nsigerr"", AutoBinning(40), AutoBinning(40));; TH1 *errnsig_vs_nsig = mcs->fitParDataSet().createHistogram(""nsig,nsigerr"", AutoBinning(40), AutoBinning(40));; ; // Draw plots on canvas; TCanvas *c = new TCanvas(""rf803_mcstudy_addons2"", ""rf802_mcstudy_addons2"", 800, 800);; c->Divide(2, 2);; c->cd(1);; gPad->SetLeftMargin(0.15);; dll_vs_ngen->GetYaxis()->SetTitleOffset(1.6);; dll_vs_ngen->Draw(""box"");; c->cd(2);; gPad->SetLeftMargin(0.15);; z_vs_ngen->GetYaxis()->SetTitleOffset(1.6);; z_vs_ngen->Draw(""box"");; c->cd(3);; gPad->SetLeftMargin(0.15);; errnsig_vs",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf803__mcstudy__addons2_8C.html:3109,configurat,configuration,3109,doc/master/rf803__mcstudy__addons2_8C.html,https://root.cern,https://root.cern/doc/master/rf803__mcstudy__addons2_8C.html,1,['configurat'],['configuration']
Deployability,"unRegisterProxy (RooSetProxy &proxy);  Remove proxy from proxy list. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; RooListProxy _coefList;  ; Int_t _lowestOrder = 1;  ; std::vector< double > _wksp;  ; RooRealProxy _x;  ;  Protected Attributes inherited from RooAbsPdf; Int_t _errorCount = 0;  Number of errors remaining to print. ;  ; Int_t _negCount = 0;  Number of negative probabilities remaining to print. ;  ; RooAbsReal * _norm = nullptr;  ; RooObjCacheManager _normMgr;  ; TString _normRange;  Normalization range. ;  ; RooArgSet const * _normSet = nullptr;  Normalization integral (owned by _normMgr) ;  ; double _rawValue = 0;  ; bool _selectComp = false;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; std::unique_ptr< RooNumGenConfig > _specGeneratorConfig;  ! MC generator configuration specific for this object ;  ; Int_t _traceCount = 0;  Number of traces remaining to print. ;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; Int_t _plotBins = 100;  Number of plot bins. ;  ; double _plotMax = 0.0;  Maximum of plot range. ;  ; double _plotMin = 0.0;  Minimum of plot range. ;  ; bool _selectComp = true;  A buffer for reading values from trees. ;  ; std::unique_ptr< RooNumIntConfig > _specIntegratorConfig;  ; TreeReadBuffer * _treeReadBuffer = nullptr;  ; TString _unit;  Unit for objects value. ;  ; double _value = 0.0;  Cache for current value of object. ;  ;  Protected Attributes inherited from RooAbsArg; std::set< std::string > _boolAttrib;  ; std::set< std::string > _boolAttribTransient;  ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooPolynomial.html:68623,configurat,configuration,68623,doc/master/classRooPolynomial.html,https://root.cern,https://root.cern/doc/master/classRooPolynomial.html,1,['configurat'],['configuration']
Deployability,"unc(void (*)()) const {}; 263 virtual void SetAllocunlockfunc(void (*)()) const {}; 264 virtual int SetClassAutoLoading(int) const {return 0;}; 265 int SetClassAutoloading(int a) const { return SetClassAutoLoading(a); } // Deprecated; 266 virtual int SetClassAutoparsing(int) {return 0;};; 267 virtual void SetErrmsgcallback(void * /* p */) const {}; 268 /// \brief Report diagnostics to the ROOT error handler (see TError.h).; 269 virtual void ReportDiagnosticsToErrorHandler(bool /*enable*/ = true) {}; 270 virtual void SetTempLevel(int /* val */) const {}; 271 virtual int UnloadFile(const char * /* path */) const {return 0;}; 272 ; 273 /// The created temporary must be deleted by the caller.; 274 /// Deprecated! Please use MakeInterpreterValue().; 275 TInterpreterValue *CreateTemporary() const {; 276 return MakeInterpreterValue().release();; 277 }; 278 virtual std::unique_ptr<TInterpreterValue> MakeInterpreterValue() const { return nullptr; }; 279 virtual void CodeComplete(const std::string&, size_t&,; 280 std::vector<std::string>&) {}; 281 virtual int Evaluate(const char*, TInterpreterValue&) {return 0;}; 282 ; 283 // core/meta helper functions.; 284 virtual EReturnType MethodCallReturnType(TFunction *func) const = 0;; 285 virtual ULong64_t GetInterpreterStateMarker() const = 0;; 286 virtual bool DiagnoseIfInterpreterException(const std::exception &e) const = 0;; 287 ; 288 typedef TDictionary::DeclId_t DeclId_t;; 289 virtual DeclId_t GetDeclId(CallFunc_t *info) const = 0;; 290 virtual DeclId_t GetDeclId(ClassInfo_t *info) const = 0;; 291 virtual DeclId_t GetDeclId(DataMemberInfo_t *info) const = 0;; 292 virtual DeclId_t GetDeclId(FuncTempInfo_t *info) const = 0;; 293 virtual DeclId_t GetDeclId(MethodInfo_t *info) const = 0;; 294 virtual DeclId_t GetDeclId(TypedefInfo_t *info) const = 0;; 295 ; 296 virtual void SetDeclAttr(DeclId_t, const char* /* attribute */) = 0 ;; 297 ; 298 virtual DeclId_t GetDataMember(ClassInfo_t *cl, const char *name) const = 0;; 299 virtual De",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TInterpreter_8h_source.html:12878,release,release,12878,doc/master/TInterpreter_8h_source.html,https://root.cern,https://root.cern/doc/master/TInterpreter_8h_source.html,1,['release'],['release']
Deployability,"unc, &TF1_EvalWrapper::EvalNMom);; 3723 giod.SetFunction(xnfunc);; 3724 ; 3725 Double_t res = giod.Integral(a, b) / norm;; 3726 ; 3727 return res;; 3728}; 3729 ; 3730 ; 3731////////////////////////////////////////////////////////////////////////////////; 3732/// Return nth central moment of function between a and b; 3733/// (i.e the n-th moment around the mean value); 3734///; 3735/// See TF1::Integral() for parameter definitions; 3736///; 3737/// \author Gene Van Buren <gene@bnl.gov>; 3738 ; 3739Double_t TF1::CentralMoment(Double_t n, Double_t a, Double_t b, const Double_t *params, Double_t epsilon); 3740{; 3741 TF1_EvalWrapper func(this, params, kTRUE, n);; 3742 ; 3743 ROOT::Math::GaussIntegrator giod;; 3744 ; 3745 giod.SetFunction(func);; 3746 giod.SetRelTolerance(epsilon);; 3747 ; 3748 Double_t norm = giod.Integral(a, b);; 3749 if (norm == 0) {; 3750 Error(""Moment"", ""Integral zero over range"");; 3751 return 0;; 3752 }; 3753 ; 3754 // calculate now integral of xf(x); 3755 // wrapped the member function EvalFirstMom in interface required by integrator using the functor class; 3756 ROOT::Math::Functor1D xfunc(&func, &TF1_EvalWrapper::EvalFirstMom);; 3757 giod.SetFunction(xfunc);; 3758 ; 3759 // estimate of mean value; 3760 Double_t xbar = giod.Integral(a, b) / norm;; 3761 ; 3762 // use different mean value in function wrapper; 3763 func.fX0 = xbar;; 3764 ROOT::Math::Functor1D xnfunc(&func, &TF1_EvalWrapper::EvalNMom);; 3765 giod.SetFunction(xnfunc);; 3766 ; 3767 Double_t res = giod.Integral(a, b) / norm;; 3768 return res;; 3769}; 3770 ; 3771 ; 3772//______________________________________________________________________________; 3773// some useful static utility functions to compute sampling points for IntegralFast; 3774////////////////////////////////////////////////////////////////////////////////; 3775/// Type safe interface (static method); 3776/// The number of sampling points are taken from the TGraph; 3777 ; 3778#ifdef INTHEFUTURE; 3779void TF1::CalcGaussLegen",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TF1_8cxx_source.html:142785,integrat,integrator,142785,doc/master/TF1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TF1_8cxx_source.html,1,['integrat'],['integrator']
Deployability,"uncGFunc(const TF1 *function, double y)Definition TF1.cxx:155; GInverseFuncNdimDefinition TF1.cxx:174; GInverseFuncNdim::GInverseFuncNdimGInverseFuncNdim(TF1 *function)Definition TF1.cxx:177; GInverseFuncNdim::fFunctionTF1 * fFunctionDefinition TF1.cxx:175; GInverseFuncNdim::operator()double operator()(const double *x) constDefinition TF1.cxx:179; GInverseFuncDefinition TF1.cxx:163; GInverseFunc::operator()double operator()(double x) constDefinition TF1.cxx:168; GInverseFunc::fFunctionconst TF1 * fFunctionDefinition TF1.cxx:164; GInverseFunc::GInverseFuncGInverseFunc(const TF1 *function)Definition TF1.cxx:166; ROOT::Fit::FitResultclass containing the result of the fit and all the related information (fitted parameter values,...Definition FitResult.h:47; ROOT::Math::AdaptiveIntegratorMultiDimClass for adaptive quadrature integration in multi-dimensions using rectangular regions.Definition AdaptiveIntegratorMultiDim.h:84; ROOT::Math::AdaptiveIntegratorMultiDim::Statusint Status() const overridereturn status of integrationDefinition AdaptiveIntegratorMultiDim.h:149; ROOT::Math::AdaptiveIntegratorMultiDim::Integraldouble Integral(const double *xmin, const double *xmax) overrideevaluate the integral with the previously given function between xmin[] and xmax[]Definition AdaptiveIntegratorMultiDim.h:119; ROOT::Math::AdaptiveIntegratorMultiDim::NEvalint NEval() const overridereturn number of function evaluations in calculating the integralDefinition AdaptiveIntegratorMultiDim.h:152; ROOT::Math::AdaptiveIntegratorMultiDim::RelErrordouble RelError() constreturn relative errorDefinition AdaptiveIntegratorMultiDim.h:137; ROOT::Math::BrentMinimizer1DUser class for performing function minimization.Definition BrentMinimizer1D.h:62; ROOT::Math::BrentMinimizer1D::SetFunctionvoid SetFunction(const ROOT::Math::IGenFunction &f, double xlow, double xup)Sets function to be minimized.Definition BrentMinimizer1D.cxx:48; ROOT::Math::BrentMinimizer1D::Minimizebool Minimize(int maxIter, double",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TF1_8cxx_source.html:154247,integrat,integrationDefinition,154247,doc/master/TF1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TF1_8cxx_source.html,1,['integrat'],['integrationDefinition']
Deployability,"unction binding and a given configuration ;  CRooNumIntConfigRooNumIntConfig holds the configuration parameters of the various numeric integrators used by RooRealIntegral ;  CRooNumIntFactoryRooNumIntFactory is a factory to instantiate numeric integrators from a given function binding and a given configuration ;  ►CRooNumRunningIntClass RooNumRunningInt is an implementation of RooAbsCachedReal that represents a running integral ; \[ RI(f(x)) = \int_{xlow}^{x} f(x') dx' \]. that is calculated internally with a numeric technique: The input function is first sampled into a histogram, which is then numerically integrated ;  CRICacheElem;  CRooObjCacheManagerClass RooObjCacheManager is an implementation of class RooCacheManager<RooAbsCacheElement> and specializes in the storage of cache elements that contain RooAbsArg objects ;  CRooParamBinningClass RooParamBinning is an implementation of RooAbsBinning that constructs a binning with a range definition that depends on external RooAbsReal objects ;  CRooParametricStepFunctionThe Parametric Step Function PDF is a binned distribution whose parameters are the heights of each bin ;  CRooParamHistFunc;  ►CRooPlotA RooPlot is a plot frame and a container for graphics objects within that frame ;  CDrawOpt;  CRooPlotableClass RooPotable is a base class for objects that can be inserted into RooPlots and take advantage of its internal normalization and axis range adjustment features ;  CRooPoissonPoisson pdf ;  CRooPolynomialRooPolynomial implements a polynomial p.d.f of the form ; \[ f(x) = \sum_{i} a_{i} * x^i \]. By default coefficient a_0 is chosen to be 1, as polynomial probability density functions have one degree of freedom less than polynomial functions due to the normalization condition ;  CRooPolyVarClass RooPolyVar is a RooAbsReal implementing a polynomial in terms of a list of RooAbsReal coefficients ; \[f(x) = \sum_{i} a_{i}x \]. Class RooPolyvar implements analytical integrals of all polynomials it can define ;  CRooPr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v610/annotated.html:107831,integrat,integrated,107831,doc/v610/annotated.html,https://root.cern,https://root.cern/doc/v610/annotated.html,3,['integrat'],['integrated']
Deployability,"unction f over the defined interval (a,b) with a singularity at c ; Definition at line 404 of file Integrator.h. ◆ IntegralCauchy() [3/3]. template<class Function > . double ROOT::Math::IntegratorOneDim::IntegralCauchy ; (; Function & ; f, . double ; a, . double ; b, . double ; c . ). evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b) with a singularity at c ; Parameters. fintegration function. The function type must be a C++ callable object implementing operator()(double x) ; alower value of the integration interval ; bupper value of the integration interval ; cposition of singularity . Definition at line 536 of file Integrator.h. ◆ IntegralLow() [1/2]. double ROOT::Math::IntegratorOneDim::IntegralLow ; (; const IGenFunction & ; f, . double ; b . ). inline . evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b) ; Parameters. fintegration function. The function type must implement the mathlib::IGenFunction interface ; bupper value of the integration interval . Definition at line 296 of file Integrator.h. ◆ IntegralLow() [2/2]. double ROOT::Math::IntegratorOneDim::IntegralLow ; (; double ; b). inline . evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b) using the function previously set with Integrator::SetFunction method. ; Parameters. bupper value of the integration interval . Definition at line 380 of file Integrator.h. ◆ IntegralUp() [1/2]. double ROOT::Math::IntegratorOneDim::IntegralUp ; (; const IGenFunction & ; f, . double ; a . ). inline . evaluate the Integral of a function f over the semi-infinite interval (a,+inf) ; Parameters. fintegration function. The function type must implement the mathlib::IGenFunction interface ; alower value of the integration interval . Definition at line 278 of file Integrator.h. ◆ IntegralUp() [2/2]. double ROOT::Math::IntegratorOneDim::IntegralUp ; (; double ; a). inline . evaluate the Integral of a function f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:17597,integrat,integration,17597,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,1,['integrat'],['integration']
Deployability,"unction f over the defined interval (a,b); 237 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 238 @param a lower value of the integration interval; 239 @param b upper value of the integration interval; 240 */; 241 double Integral(const IGenFunction & f, double a, double b) {; 242 SetFunction(f,false);; 243 return Integral(a,b);; 244 }; 245 ; 246 ; 247// /**; 248// evaluate the Integral of a function f over the infinite interval (-inf,+inf); 249// @param f integration function. The function type must be a C++ callable object implementing operator()(double x); 250// */; 251// template<class Function>; 252// double Integral(const Function & f);; 253 ; 254 /**; 255 evaluate the Integral of a function f over the infinite interval (-inf,+inf); 256 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 257 */; 258 double Integral(const IGenFunction & f) {; 259 SetFunction(f,false);; 260 return Integral();; 261 }; 262 ; 263 ; 264// /**; 265// evaluate the Integral of a function f over the semi-infinite interval (a,+inf); 266// @param f integration function. The function type must be a C++ callable object implementing operator()(double x); 267// @param a lower value of the integration interval; 268// */; 269// template<class Function>; 270// double IntegralUp(Function & f, double a);; 271 ; 272 /**; 273 evaluate the Integral of a function f over the semi-infinite interval (a,+inf); 274 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 275 @param a lower value of the integration interval; 276 ; 277 */; 278 double IntegralUp(const IGenFunction & f, double a ) {; 279 SetFunction(f,false);; 280 return IntegralUp(a);; 281 }; 282 ; 283// /**; 284// evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b); 285// @param f integration function. The function type must be a C++ callable object implementing o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Integrator_8h_source.html:10379,integrat,integration,10379,doc/master/Integrator_8h_source.html,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html,1,['integrat'],['integration']
Deployability,"unction for createIntegral() that creates the actual integral object.; 590RooFit::OwningPtr<RooAbsReal> RooAbsReal::createIntObj(const RooArgSet& iset2, const RooArgSet* nset2,; 591 const RooNumIntConfig* cfg, const char* rangeName) const; 592{; 593 // Make internal use copies of iset and nset; 594 RooArgSet iset(iset2) ;; 595 const RooArgSet* nset = nset2 ;; 596 ; 597 ; 598 // Initialize local variables perparing for recursive loop; 599 bool error = false ;; 600 const RooAbsReal* integrand = this ;; 601 std::unique_ptr<RooAbsReal> integral;; 602 ; 603 // Handle trivial case of no integration here explicitly; 604 if (iset.empty()) {; 605 ; 606 const std::string title = std::string(""Integral of "") + GetTitle();; 607 const std::string name = std::string(GetName()) + integralNameSuffix(iset,nset,rangeName).Data();; 608 ; 609 auto out = std::make_unique<RooRealIntegral>(name.c_str(), title.c_str(), *this, iset, nset, cfg, rangeName);; 610 return RooFit::makeOwningPtr<RooAbsReal>(std::move(out));; 611 }; 612 ; 613 // Process integration over remaining integration variables; 614 while(!iset.empty()) {; 615 ; 616 ; 617 // Find largest set of observables that can be integrated in one go; 618 RooArgSet innerSet ;; 619 findInnerMostIntegration(iset,innerSet,rangeName) ;; 620 ; 621 // If largest set of observables that can be integrated is empty set, problem was ill defined; 622 // Postpone error messaging and handling to end of function, exit loop here; 623 if (innerSet.empty()) {; 624 error = true ;; 625 break ;; 626 }; 627 ; 628 // Prepare name and title of integral to be created; 629 const std::string title = std::string(""Integral of "") + integrand->GetTitle();; 630 const std::string name = std::string(integrand->GetName()) + integrand->integralNameSuffix(innerSet,nset,rangeName).Data();; 631 ; 632 std::unique_ptr<RooAbsReal> innerIntegral = std::move(integral);; 633 ; 634 // Construct innermost integral; 635 integral = std::make_unique<RooRealIntegral>(name.c_str(),title.c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsReal_8cxx_source.html:23201,integrat,integration,23201,doc/master/RooAbsReal_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html,2,['integrat'],['integration']
Deployability,"unction for external usage. ;  ; std::map< std::string, std::string > createWeightStrings (const ParamMap &inputs, const std::vector< RooArgList * > &vertices, RooArgList &couplings, const FlagMap &flagValues, const RooArgList &flags, const std::vector< std::vector< std::string > > &nonInterfering);  create only the weight formulas. static function for external usage. ;  ; std::map< std::string, std::string > createWeightStrings (const ParamMap &inputs, const std::vector< std::vector< std::string > > &vertices);  create only the weight formulas. static function for external usage. ;  ; double evaluate () const override;  call getVal on the internal function ;  ; double expectedEvents () const;  return the number of expected events for the current parameter set ;  ; double expectedEvents (const RooArgSet &nset) const;  return expected number of events for extended likelihood calculation, this is the sum of all coefficients ;  ; double expectedEvents (const RooArgSet *nset) const;  return expected number of events for extended likelihood calculation, this is the sum of all coefficients ;  ; double expectedUncertainty () const;  return the expected uncertainty for the current parameter set ;  ; RooAbsPdf::ExtendMode extendMode () const;  return extended mored capabilities ;  ; bool forceAnalyticalInt (const RooAbsArg &arg) const override;  Force analytical integration for the given observable. ;  ; Int_t getAnalyticalIntegralWN (RooArgSet &allVars, RooArgSet &numVars, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Retrieve the mat. ;  ; RooRealVar * getBinWidth () const;  retrieve the histogram observable ;  ; double getCondition () const;  Retrieve the condition of the coefficient matrix. ;  ; ParamSet getCouplings () const;  retrieve a set of couplings (-?-) ;  ; const RooArgList * getCouplingSet () const;  get the set of couplings ;  ; RooRealVar * getFlag (const char *name) const;  retrieve the RooRealVar object incorporating the flag wit",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooLagrangianMorphFunc.html:6872,integrat,integration,6872,doc/master/classRooLagrangianMorphFunc.html,https://root.cern,https://root.cern/doc/master/classRooLagrangianMorphFunc.html,1,['integrat'],['integration']
Deployability,"unction is generated; according to given sigma and deconvolution is carried out. Function parameters:; source-pointer to the matrix of source spectrum; dest-pointer to the matrix of resulting deconvolved spectrum; ssizex-x length of source spectrum; ssizey-y length of source spectrum; sigma-sigma of searched peaks, for details we refer to manual; threshold-threshold value in % for selected peaks, peaks with; amplitude less than threshold*highest_peak/100; are ignored, see manual; backgroundRemove-logical variable, set if the removal of; background before deconvolution is desired; deconIterations-number of iterations in deconvolution operation; markov-logical variable, if it is true, first the source spectrum; is replaced by new spectrum calculated using Markov; chains method.; averWindow-averanging window of searched peaks, for details; we refer to manual (applies only for Markov method). . Peaks searching;  ; Goal:; to identify automatically the peaks in spectrum with the presence of the; continuous background, one-fold coincidences (ridges) and statistical; fluctuations - noise. ;  ; The common problems connected with correct peak; identification in two-dimensional coincidence spectra are. non-sensitivity to noise, i.e., only statistically; relevant peaks should be identified; non-sensitivity of the algorithm to continuous; background; non-sensitivity to one-fold coincidences (coincidences; peak � background in both dimensions) and their crossings; ability to identify peaks close to the edges of the; spectrum region. Usually peak finders fail to detect them; resolution, decomposition of doublets and multiplets.; The algorithm should be able to recognize close positioned peaks. ; ability to identify peaks with different sigma.  ; Function:; Int_t TSpectrum2::SearchHighRes (double **source,double **dest, int ssizex, int ssizey, double sigma, double threshold,; bool backgroundRemove,int deconIterations,; bool markov,; int averWindow); ��;  ; This; function searches f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TSpectrum2.html:36562,continuous,continuous,36562,root/html602/TSpectrum2.html,https://root.cern,https://root.cern/root/html602/TSpectrum2.html,2,['continuous'],['continuous']
Deployability,"unction is generated; according to given sigma and deconvolution is carried out. Function parameters:; source-pointer to the matrix of source spectrum; dest-pointer to the matrix of resulting deconvolved spectrum; ssizex-x length of source spectrum; ssizey-y length of source spectrum; sigma-sigma of searched peaks, for details we refer to manual; threshold-threshold value in % for selected peaks, peaks with; amplitude less than threshold*highest_peak/100; are ignored, see manual; backgroundRemove-logical variable, set if the removal of; background before deconvolution is desired; deconIterations-number of iterations in deconvolution operation; markov-logical variable, if it is true, first the source spectrum; is replaced by new spectrum calculated using Markov; chains method.; averWindow-averanging window of searched peaks, for details; we refer to manual (applies only for Markov method). . Peaks searching;  ; Goal:; to identify automatically the peaks in spectrum with the presence of the; continuous background, one-fold coincidences (ridges) and statistical; fluctuations - noise. ;  ; The common problems connected with correct peak; identification in two-dimensional coincidence spectra are. non-sensitivity to noise, i.e., only statistically; relevant peaks should be identified; non-sensitivity of the algorithm to continuous; background; non-sensitivity to one-fold coincidences (coincidences; peak � background in both dimensions) and their crossings; ability to identify peaks close to the edges of the; spectrum region. Usually peak finders fail to detect them; resolution, decomposition of doublets and multiplets.; The algorithm should be able to recognize close positioned peaks. ; ability to identify peaks with different sigma.  ; Function:; Int_t TSpectrum2::SearchHighRes (float **source,float **dest, int ssizex, int ssizey, float sigma, double threshold,; bool backgroundRemove,int deconIterations,; bool markov,; int averWindow); ��;  ; This; function searches for ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSpectrum2.html:35725,continuous,continuous,35725,root/html528/TSpectrum2.html,https://root.cern,https://root.cern/root/html528/TSpectrum2.html,4,['continuous'],['continuous']
Deployability,"unction objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constructor. ;  ;  RooAbsArg (const char *name, const char *title);  Create an object with the specified name and descriptive title. ;  ;  RooAbsArg (const RooAbsArg &other, const char *name=nullptr);  Copy constructor transfers all boolean and string properties of the original object. ;  ;  ~RooAbsArg () override;  Destructor. ;  ; bool addOwnedComponents (const RooAbsCollection &comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooAbsCollection &&comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooArgList",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooErrorVar.html:26260,integrat,integrator,26260,doc/master/classRooErrorVar.html,https://root.cern,https://root.cern/doc/master/classRooErrorVar.html,10,"['configurat', 'integrat']","['configuration', 'integrator']"
Deployability,"unctions |; Private Attributes |; List of all members ; TEditQueryFrame Class Reference. . Definition at line 335 of file TSessionViewer.h. Public Member Functions;  TEditQueryFrame (TGWindow *p, Int_t w, Int_t h);  Create a new Query dialog, used by the Session Viewer, to Edit a Query if the editmode flag is set, or to create a new one if not set. ;  ;  ~TEditQueryFrame () override;  Delete query dialog. ;  ; void Build (TSessionViewer *gui);  Build the ""new query"" dialog. ;  ; TClass * IsA () const override;  ; void OnBrowseChain ();  Call new chain dialog. ;  ; void OnBrowseEventList ();  Browse event list. ;  ; void OnBrowseSelector ();  Open file browser to choose selector macro. ;  ; void OnBtnSave ();  Save current settings in main session viewer. ;  ; void OnElementSelected (TObject *obj);  Handle OnElementSelected signal coming from new chain dialog. ;  ; void OnNewQueryMore ();  Show/hide options frame and update button text accordingly. ;  ; void SettingsChanged ();  Settings have changed, update GUI accordingly. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UpdateFields (TQueryDescription *desc);  Update entry fields with query description values. ;  ;  Public Member Functions inherited from TGCompositeFrame;  TGCompositeFrame (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=0, Pixel_t back=GetDefaultFrameBackground());  Create a composite frame. ;  ;  TGCompositeFrame (TGClient *c, Window_t id, const TGWindow *parent=nullptr);  Create a frame using an externally created window. ;  ;  ~TGCompositeFrame () override;  Delete a composite frame. ;  ; virtual void AddFrame (TGFrame *f, TGLayoutHints *l=nullptr);  Add frame to the composite frame using the specified layout hints. ;  ; void ChangeOptions (UInt_t options) override;  Change composite frame options. Options is an OR of the EFrameTypes. ;  ; virtual void ChangeSubframesBackgro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEditQueryFrame.html:1210,update,update,1210,doc/master/classTEditQueryFrame.html,https://root.cern,https://root.cern/doc/master/classTEditQueryFrame.html,1,['update'],['update']
Deployability,und - save the configuration ; : 35 | 23322.1 22028.2 0.0200826 0.00177554 43698.9 0; : 36 Minimum Test error found - save the configuration ; : 36 | 23123.9 21840 0.0197735 0.00177073 44437.6 0; : 37 Minimum Test error found - save the configuration ; : 37 | 22932.1 21651.2 0.0197273 0.00177446 44561.1 0; : 38 Minimum Test error found - save the configuration ; : 38 | 22740.7 21464.4 0.0197166 0.00177193 44581.5 0; : 39 Minimum Test error found - save the configuration ; : 39 | 22549.1 21282.9 0.0197213 0.00177445 44576 0; : 40 Minimum Test error found - save the configuration ; : 40 | 22363.6 21100 0.0197729 0.00177445 44448.2 0; : 41 Minimum Test error found - save the configuration ; : 41 | 22176.6 20921.1 0.0197131 0.00176514 44573.2 0; : 42 Minimum Test error found - save the configuration ; : 42 | 21994.9 20740.9 0.0197264 0.00176834 44548.1 0; : 43 Minimum Test error found - save the configuration ; : 43 | 21811.7 20564.6 0.0197476 0.00176764 44494 0; : 44 Minimum Test error found - save the configuration ; : 44 | 21631.5 20390.5 0.0198172 0.00177793 44347.7 0; : 45 Minimum Test error found - save the configuration ; : 45 | 21453.9 20217 0.0197313 0.00176795 44535.1 0; : 46 Minimum Test error found - save the configuration ; : 46 | 21277.2 20045.6 0.0197489 0.00176953 44495.5 0; : 47 Minimum Test error found - save the configuration ; : 47 | 21102.5 19876.1 0.0197499 0.00176859 44490.7 0; : 48 Minimum Test error found - save the configuration ; : 48 | 20931.2 19705.9 0.0197403 0.00176149 44496.7 0; : 49 Minimum Test error found - save the configuration ; : 49 | 20758.9 19539.2 0.0199993 0.00178715 43926.8 0; : 50 Minimum Test error found - save the configuration ; : 50 | 20589.8 19373.7 0.0199739 0.00177216 43951.9 0; : 51 Minimum Test error found - save the configuration ; : 51 | 20419.5 19213.6 0.0197688 0.0017747 44459 0; : 52 Minimum Test error found - save the configuration ; : 52 | 20255.7 19051.4 0.0197679 0.00177721 44467.5 0; : 53 Minimum Test error,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:16006,configurat,configuration,16006,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,und - save the configuration ; : 63 | 18512.9 17340.5 0.019822 0.0017786 44337.4 0; : 64 Minimum Test error found - save the configuration ; : 64 | 18353.5 17179.2 0.0198469 0.00178029 44280.6 0; : 65 Minimum Test error found - save the configuration ; : 65 | 18201.3 17035.2 0.0198777 0.00178599 44219.2 0; : 66 Minimum Test error found - save the configuration ; : 66 | 18048.3 16883.1 0.019869 0.0017844 44236.5 0; : 67 Minimum Test error found - save the configuration ; : 67 | 17898.4 16736.1 0.0198962 0.00180855 44229.1 0; : 68 Minimum Test error found - save the configuration ; : 68 | 17745 16589.7 0.0198886 0.00178724 44195.6 0; : 69 Minimum Test error found - save the configuration ; : 69 | 17598.1 16441.7 0.0198822 0.00177929 44191.7 0; : 70 Minimum Test error found - save the configuration ; : 70 | 17446.3 16297.7 0.0199037 0.00178336 44149.4 0; : 71 Minimum Test error found - save the configuration ; : 71 | 17299.3 16156.1 0.0199217 0.00177946 44096 0; : 72 Minimum Test error found - save the configuration ; : 72 | 17155.5 16013.3 0.0198893 0.00178782 44195.4 0; : 73 Minimum Test error found - save the configuration ; : 73 | 17008.7 15875.5 0.0199043 0.00178745 44157.9 0; : 74 Minimum Test error found - save the configuration ; : 74 | 16868.3 15734.7 0.0199692 0.00179417 44016.4 0; : 75 Minimum Test error found - save the configuration ; : 75 | 16724.2 15597.7 0.0199149 0.00178949 44136.9 0; : 76 Minimum Test error found - save the configuration ; : 76 | 16584 15460 0.0199224 0.00178826 44115.8 0; : 77 Minimum Test error found - save the configuration ; : 77 | 16444.4 15323.6 0.0199118 0.00178921 44143.8 0; : 78 Minimum Test error found - save the configuration ; : 78 | 16305.9 15188.8 0.0201885 0.00179593 43495.8 0; : 79 Minimum Test error found - save the configuration ; : 79 | 16166.6 15057.4 0.0199259 0.00179169 44115.6 0; : 80 Minimum Test error found - save the configuration ; : 80 | 16031 14926.5 0.0199332 0.00179406 44103.6 0; : 81 Minimum Test error ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:19121,configurat,configuration,19121,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,"und, so missing class descriptions can be handled. For HTML, its creates the description block, the list of functions and data members, and the inheritance tree or, if Graphviz's dot is found, the class charts. ; Definition at line 1338 of file TClassDocOutput.cxx. ◆ WriteClassDocHeader(). void TClassDocOutput::WriteClassDocHeader ; (; std::ostream & ; classFile). protectedvirtual . Write out the introduction of a class description (shortcuts and links) ; Definition at line 1429 of file TClassDocOutput.cxx. ◆ WriteMethod(). void TClassDocOutput::WriteMethod ; (; std::ostream & ; out, . TString & ; ret, . TString & ; name, . TString & ; params, . const char * ; filename, . TString & ; anchor, . TString & ; comment, . TString & ; codeOneLiner, . TDocMethodWrapper * ; guessedMethod . ). protectedvirtual . Write method name with return type ret and parameters param to out. ; Build a link using file and anchor. Cooment it with comment, and show the code codeOneLiner (set if the func consists of only one line of code, immediately surrounded by ""{"",""}""). Also updates fMethodNames's count of method names. ; Definition at line 1589 of file TClassDocOutput.cxx. Friends And Related Symbol Documentation. ◆ TDocParser. friend class TDocParser. friend . Definition at line 65 of file TClassDocOutput.h. Member Data Documentation. ◆ fCurrentClass. TClass* TClassDocOutput::fCurrentClass. protected . Definition at line 28 of file TClassDocOutput.h. ◆ fCurrentClassesTypedefs. TList* TClassDocOutput::fCurrentClassesTypedefs. protected . Definition at line 29 of file TClassDocOutput.h. ◆ fHierarchyLines. Int_t TClassDocOutput::fHierarchyLines. protected . Definition at line 27 of file TClassDocOutput.h. ◆ fParser. TDocParser* TClassDocOutput::fParser. protected . Definition at line 30 of file TClassDocOutput.h. html/inc/TClassDocOutput.h; html/src/TClassDocOutput.cxx. TClassDocOutput. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:23 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTClassDocOutput.html:27295,update,updates,27295,doc/master/classTClassDocOutput.html,https://root.cern,https://root.cern/doc/master/classTClassDocOutput.html,1,['update'],['updates']
Deployability,"undingBox() to access; Bool_tTGLSceneBase::fBoundingBoxValidbounding box valid?; TGLClip*TGLSceneBase::fClipScene clipping-plane.; Bool_tTGLSceneBase::fDoClipCheckPerform global clip-plane-check in UpdateSceneInfo(); Bool_tTGLSceneBase::fDoFrustumCheckPerform global frustum-check in UpdateSceneInfo(); TGLContextIdentity*fGLCtxIdentity; Bool_tfInSmartRefresh!; Short_tTGLSceneBase::fLODScene-lod.; Float_tfLastLineWidthScale; Float_tfLastPointSizeScale; TGLLockable::ELockTGLLockable::fLockLock state.; TGLScene::LogicalShapeMap_tfLogicalShapes!; UInt_tTGLSceneBase::fMinorStampCounter increased on minimal update.; TStringTGLSceneBase::fNameObject identifier.; Float_tTGLSceneBase::fOLLineWScene outline line-width.; TGLScene::PhysicalShapeMap_tfPhysicalShapes!; UInt_tTGLSceneBase::fSceneIDUnique scene id.; Bool_tTGLSceneBase::fSelectableObjects in the scene are selectable.; TGLScene::LogicalShapeMap_tfSmartRefreshCache!; Short_tTGLSceneBase::fStyleScene-style.; UInt_tTGLSceneBase::fTimeStampCounter increased on every update.; TStringTGLSceneBase::fTitleObject title.; TGLSceneBase::ViewerList_tTGLSceneBase::fViewers; Float_tTGLSceneBase::fWFLineWScene wire-frame line-width. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGLScene(); {}. ~TGLScene(); Destroy scene objects. void ReleaseGLCtxIdentity(); Release all GL resources for current context identity.; Requires iteration over all logical shapes. Bool_t ComparePhysicalVolumes(const TGLPhysicalShape* shape1, const TGLPhysicalShape* shape2); Compare 'shape1' and 'shape2' bounding box volumes - return kTRUE if; 'shape1' bigger than 'shape2'. Bool_t ComparePhysicalDiagonals(const TGLPhysicalShape* shape1, const TGLPhysicalShape* shape2); Compare 'shape1' and 'shape2' bounding box volumes - return kTRUE if; 'shape1' bigger than 'shape2'. void RebuildSceneInfo(TGLRnrCtx& rnrCtx); Major change in scene, need to rebuild all-element draw-vector and; sort it. Sort the TGLPhysical draw list",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGLScene.html:7665,update,update,7665,root/html602/TGLScene.html,https://root.cern,https://root.cern/root/html602/TGLScene.html,2,['update'],['update']
Deployability,"unique_ptr<RooFitResult> fit3{powerlaw.fitTo(*powerlawData, Save(), PrintLevel(-1), SumW2Error(false))};; fit3->Print();; ; // This time, the bias is not the same factor in each bin! This means our; // trick by sampling the integral in the same way doesn't cancel out the; // bias completely. The average bias is canceled, but there are per-bin; // biases that remain. Still, this method has some value: it is cheaper than; // rigurously correcting the bias by integrating the pdf in each bin. So if; // you know your per-bin bias variations are small or performance is an; // issue, this approach can be sufficient.; enableBinIntegrator(powerlaw, x.numBins());; std::unique_ptr<RooFitResult> fit4{powerlaw.fitTo(*powerlawData, Save(), PrintLevel(-1), SumW2Error(false))};; fit4->Print();; disableBinIntegrator(powerlaw);; ; // To get rid of the binning effects in the general case, one can use the; // IntegrateBins() command argument. Now, the pdf is not evaluated at the; // bin centers, but numerically integrated over each bin and divided by the; // bin width. The parameter for IntegrateBins() is the required precision; // for the numeric integrals. This is computationally expensive, but the; // bias is now not a problem anymore.; std::unique_ptr<RooFitResult> fit5{; powerlaw.fitTo(*powerlawData, IntegrateBins(1e-3), Save(), PrintLevel(-1), SumW2Error(false))};; fit5->Print();; ; // Improving numerical stability; // -----------------------------; ; // There is one more problem with binned fits that is related to the binning; // effects because often, a binned fit is affected by both problems.; //; // The issue is numerical stability for fits with a greatly different number; // of events in each bin. For each bin, you have a term \f[n\log(p)\f] in; // the NLL, where \f[n\f] is the number of observations in the bin, and; // \f[p\f] the predicted probability to have an event in that bin. The; // difference in the logarithms for each bin is small, but the difference in; // \f[n\f] ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf614__binned__fit__problems_8C.html:5456,integrat,integrated,5456,doc/master/rf614__binned__fit__problems_8C.html,https://root.cern,https://root.cern/doc/master/rf614__binned__fit__problems_8C.html,1,['integrat'],['integrated']
Deployability,"unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. map<TString,ClassRelInfo>_c2fmapList of contained classes; Bool_t_compiledOK! Flag indicating that classes compiled OK; map<TString,ClassFiles>_fmapList of contained files; RooWorkspace*_wspaceowning workspace. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Bool_t autoImportClass(TClass* tc, Bool_t doReplace = kFALSE); Import code of class 'tc' into the repository. If code is already in repository it is only imported; again if doReplace is false. The names and location of the source files is determined from the information; in TClass. If no location is found in the TClass information, the files are searched in the workspace; search path, defined by addClassDeclImportDir() and addClassImplImportDir() for declaration and implementation; files respectively. If files cannot be found, abort with error status, otherwise update the internal; class-to-file map and import the contents of the files, if they are not imported yet. void Streamer(TBuffer& b); Custom streamer for the workspace. Stream contents of workspace; and code repository. When reading, read code repository first; and compile missing classes before proceeding with streaming; of workspace contents to avoid errors. std::string listOfClassNames() const; Return STL string with last of class names contained in the code repository. Bool_t compileClasses(); For all classes in the workspace for which no class definition is; found in the ROOT class table extract source code stored in code; repository into temporary directory set by; setClassFileExportDir(), compile classes and link them with; current ROOT session. If a compilation error occurs print; instructions for user how to fix errors and recover workspace and; abort import procedure. CodeRepo(RooWorkspace* wspace = 0); {}. virtual ~CodeRepo(); {}. Bool_t compiledOK() const; { return _compiledOK ; }. » Last change",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooWorkspace__CodeRepo.html:7126,update,update,7126,root/html528/RooWorkspace__CodeRepo.html,https://root.cern,https://root.cern/root/html528/RooWorkspace__CodeRepo.html,3,['update'],['update']
Deployability,"unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. map<TString,ClassRelInfo>_c2fmapList of contained classes; Bool_t_compiledOK! Flag indicating that classes compiled OK; map<TString,ClassFiles>_fmapList of contained files; RooWorkspace*_wspaceowning workspace. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Bool_t autoImportClass(TClass* tc, Bool_t doReplace = kFALSE); Import code of class 'tc' into the repository. If code is already in repository it is only imported; again if doReplace is false. The names and location of the source files is determined from the information; in TClass. If no location is found in the TClass information, the files are searched in the workspace; search path, defined by addClassDeclImportDir() and addClassImplImportDir() for declaration and implementation; files respectively. If files cannot be found, abort with error status, otherwise update the internal; class-to-file map and import the contents of the files, if they are not imported yet. void Streamer(TBuffer& b); Custom streamer for the workspace. Stream contents of workspace; and code repository. When reading, read code repository first; and compile missing classes before proceeding with streaming; of workspace contents to avoid errors. std::string listOfClassNames() const; Return STL string with last of class names contained in the code repository. Bool_t compileClasses(); For all classes in the workspace for which no class definition is; found in the ROOT class table extract source code stored in code; repository into temporary directory set by; setClassFileExportDir(), compile classes and link them with; current ROOT session. If a compilation error occurs print; instructions for user how to fix errors and recover workspace and; abort import procedure. CodeRepo(RooWorkspace* wspace=0); {}. virtual ~CodeRepo(); {}. Bool_t compiledOK() const; { return _compiledOK ; }. » Last changed:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooWorkspace__CodeRepo.html:7140,update,update,7140,root/html526/RooWorkspace__CodeRepo.html,https://root.cern,https://root.cern/root/html526/RooWorkspace__CodeRepo.html,1,['update'],['update']
Deployability,"unreference it. void ElementSelect(TEveElement* element); Select an element.; Now it only calls EditElement() - should also update selection state. Bool_t ElementPaste(TEveElement* element); Paste has been called. Bool_t InsertVizDBEntry(const TString& tag, TEveElement* model, Bool_t replace, Bool_t update); Insert a new visualization-parameter database entry. Returns; true if the element is inserted successfully.; If entry with the same key already exists the behaviour depends on the; 'replace' flag:; true - The old model is deleted and new one is inserted (default).; Clients of the old model are transferred to the new one and; if 'update' flag is true (default), the new model's parameters; are assigned to all clients.; false - The old model is kept, false is returned. If insert is successful, the ownership of the model-element is; transferred to the manager. Bool_t InsertVizDBEntry(const TString& tag, TEveElement* model); Insert a new visualization-parameter database entry with the default; parameters for replace and update, as specified by members; fVizDBReplace(default=kTRUE) and fVizDBUpdate(default=kTRUE).; See docs of the above function. TEveElement* FindVizDBEntry(const TString& tag); Find a visualization-parameter database entry corresponding to tag.; If the entry is not found 0 is returned. void LoadVizDB(const TString& filename, Bool_t replace, Bool_t update); Load visualization-parameter database from file filename. The; replace, update arguments replace the values of fVizDBReplace; and fVizDBUpdate members for the duration of the macro; execution. void LoadVizDB(const TString& filename); Load visualization-parameter database from file filename.; State of data-members fVizDBReplace and fVizDBUpdate determine; how the registered entries are handled. void SaveVizDB(const TString& filename); Save visualization-parameter database to file filename. TGeoManager* GetGeometry(const TString& filename); Get geometry with given filename.; This is cached internally s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveManager.html:8766,update,update,8766,root/html528/TEveManager.html,https://root.cern,https://root.cern/root/html528/TEveManager.html,6,['update'],['update']
Deployability,"unsigned int size); virtual intStatus() const; virtual ROOT::Math::IntegrationMultiDim::TypeROOT::Math::VirtualIntegratorMultiDim::Type() const; ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(); ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(const ROOT::Math::VirtualIntegrator&); ROOT::Math::VirtualIntegratorMultiDimROOT::Math::VirtualIntegratorMultiDim::VirtualIntegratorMultiDim(); ROOT::Math::VirtualIntegratorMultiDimROOT::Math::VirtualIntegratorMultiDim::VirtualIntegratorMultiDim(const ROOT::Math::VirtualIntegratorMultiDim&). protected:. doubleDoIntegral(const double* xmin, const double* xmax, bool absVal = false). Data Members; private:. doublefAbsTolabsolute tolerance; unsigned intfDimdimentionality of integrand; doublefErrorintegration error; const ROOT::Math::IMultiGenFunction*fFunpointer to integrand function; unsigned intfMaxPtsmaximum number of function evaluation requested; unsigned intfMinPtsminimum number of function evaluation requested; intfNEvalnumber of function evaluation; doublefRelErrorRelative error; doublefRelTolrelative tolerance; doublefResultlast integration result; unsigned intfSizemax size of working array (explode with dimension); intfStatusstatus of algorithm (error if not zero). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; AdaptiveIntegratorMultiDim(double absTol = 1.0000000000000001E-9, double relTol = 1.0000000000000001E-9, unsigned int maxpts = 100000, unsigned int size = 0). construct given optionally tolerance (absolute and relative), maximum number of function evaluation (maxpts) and; size of the working array.; The size of working array represents the number of sub-division used for calculating the integral.; Higher the dimension, larger sizes are required for getting the same accuracy.; The size must be larger than >= (2N + 3) * (1 + MAXPTS/(2**N + 2N(N + 1) + 1))/2). For smaller value passed, the; minimum allowed will be ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__AdaptiveIntegratorMultiDim.html:5219,integrat,integration,5219,root/html602/ROOT__Math__AdaptiveIntegratorMultiDim.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__AdaptiveIntegratorMultiDim.html,2,['integrat'],['integration']
Deployability,unter(). void RooNumIntConfig::setPrintEvalCounter ; (; bool ; newVal). inline . Definition at line 58 of file RooNumIntConfig.h. ◆ Streamer(). void RooNumIntConfig::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void RooNumIntConfig::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 87 of file RooNumIntConfig.h. Member Data Documentation. ◆ _configSets. RooLinkedList RooNumIntConfig::_configSets. protected . List of configuration sets for individual integration methods. ; Definition at line 85 of file RooNumIntConfig.h. ◆ _epsAbs. double RooNumIntConfig::_epsAbs. protected . Absolute precision. ; Definition at line 75 of file RooNumIntConfig.h. ◆ _epsRel. double RooNumIntConfig::_epsRel. protected . Relative precision. ; Definition at line 76 of file RooNumIntConfig.h. ◆ _method1D. RooCategory RooNumIntConfig::_method1D. protected . Selects integration method for 1D integrals. ; Definition at line 79 of file RooNumIntConfig.h. ◆ _method1DOpen. RooCategory RooNumIntConfig::_method1DOpen. protected . Selects integration method for open ended 1D integrals. ; Definition at line 82 of file RooNumIntConfig.h. ◆ _method2D. RooCategory RooNumIntConfig::_method2D. protected . Selects integration method for 2D integrals. ; Definition at line 80 of file RooNumIntConfig.h. ◆ _method2DOpen. RooCategory RooNumIntConfig::_method2DOpen. protected . Selects integration method for open ended 2D integrals. ; Definition at line 83 of file RooNumIntConfig.h. ◆ _methodND. RooCategory RooNumIntConfig::_methodND. protected . Selects integration method for ND integrals. ; Definition at line 81 of file RooNumIntConfig.h. ◆ _methodNDOpen. RooCategory RooNumIntConfig::_methodNDOpen. protected . Selects integration method for open ended ND integrals. ; Definition at line 84 of file RooNumIntConfig.h. ◆ _printEvalCounter. bool RooNumIntConfig::_printEvalCounter. pr,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooNumIntConfig.html:22095,integrat,integration,22095,doc/master/classRooNumIntConfig.html,https://root.cern,https://root.cern/doc/master/classRooNumIntConfig.html,1,['integrat'],['integration']
Deployability,"updates the proxy chain when we will really use PROOF; 695 ResetBit(kProofUptodate);; 696 ; 697 // We need to invalidate the loading of the current tree because its list; 698 // of real friends is now obsolete. It is repairable only from LoadTree.; 699 InvalidateCurrentTree();; 700 ; 701 TTree* tree = fe->GetTree();; 702 if (!tree) {; 703 Warning(""AddFriend"", ""Unknown TChain %s"", chain);; 704 }; 705 return fe;; 706}; 707 ; 708////////////////////////////////////////////////////////////////////////////////; 709/// Add the whole chain or tree as a friend of this chain.; 710 ; 711TFriendElement* TChain::AddFriend(const char* chain, TFile* dummy); 712{; 713 if (!fFriends) fFriends = new TList();; 714 TFriendElement *fe = new TFriendElement(this,chain,dummy);; 715 ; 716 R__ASSERT(fe); // There used to be a ""if (fe)"" test ... Keep this assert until we are sure that fe is never null; 717 ; 718 fFriends->Add(fe);; 719 ; 720 if (fProofChain); 721 // This updates the proxy chain when we will really use PROOF; 722 ResetBit(kProofUptodate);; 723 ; 724 // We need to invalidate the loading of the current tree because its list; 725 // of real friend is now obsolete. It is repairable only from LoadTree; 726 InvalidateCurrentTree();; 727 ; 728 TTree *t = fe->GetTree();; 729 if (!t) {; 730 Warning(""AddFriend"",""Unknown TChain %s"",chain);; 731 }; 732 return fe;; 733}; 734 ; 735////////////////////////////////////////////////////////////////////////////////; 736/// Add the whole chain or tree as a friend of this chain.; 737 ; 738TFriendElement* TChain::AddFriend(TTree* chain, const char* alias, bool /* warn = false */); 739{; 740 if (!chain) return nullptr;; 741 if (!fFriends) fFriends = new TList();; 742 TFriendElement *fe = new TFriendElement(this,chain,alias);; 743 R__ASSERT(fe);; 744 ; 745 fFriends->Add(fe);; 746 ; 747 if (fProofChain); 748 // This updates the proxy chain when we will really use PROOF; 749 ResetBit(kProofUptodate);; 750 ; 751 // We need to invalidate the loading of ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TChain_8cxx_source.html:27962,update,updates,27962,doc/master/TChain_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TChain_8cxx_source.html,1,['update'],['updates']
Deployability,"urRegistrar. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » NET; » BONJOUR; » TBonjourRegistrar. class TBonjourRegistrar: public TObject, public TQObject. TBonjourRegistrar. This class consists of one main member function, RegisterService(),; that registers the service. As long as the object is alive, the; service stays registered. The rest of the class wraps the various; bits of Bonjour service registration. The static callback function; is marked with the DNSSD_API macro to make sure that the callback; has the correct calling convention on Windows. Bonjour works out-of-the-box on MacOS X. On Linux you have to; install the Avahi package and run the avahi-daemon. To compile; these classes and run Avahi on Linux you need to install the:; avahi; avahi-compat-libdns_sd-devel; nss-mdns; packages. After installation make sure the avahi-daemon is started. Function Members (Methods); public:. TBonjourRegistrar(); virtual~TBonjourRegistrar(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); voidBonjourSocketReadyRead(); virtual voidTObject::Browse(TBrowser* b); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TBonjourRegistrar.html:986,install,installation,986,root/html530/TBonjourRegistrar.html,https://root.cern,https://root.cern/root/html530/TBonjourRegistrar.html,2,['install'],['installation']
Deployability,"ur_urng UNUR_URNG;; 74 ; 75 ; 76class TRandom;; 77class TH1;; 78 ; 79class TUnuran {; 80 ; 81public:; 82 ; 83 /**; 84 Constructor with a generator instance and given level of log output; 85 */; 86 TUnuran (TRandom * r = nullptr, unsigned int log = 0);; 87 ; 88 ; 89 /**; 90 Destructor; 91 */; 92 ~TUnuran ();; 93 ; 94 // usually copying is non trivial, so we delete this; 95 TUnuran(const TUnuran &) = delete;; 96 TUnuran & operator = (const TUnuran & rhs) = delete;; 97 TUnuran(TUnuran &&) = delete;; 98 TUnuran & operator = (TUnuran && rhs) = delete;; 99 ; 100 /**; 101 Initialize with Unuran string API interface.; 102 See https://statmath.wu.ac.at/unuran/doc/unuran.html#StringAPI; 103 ; 104 @param distr : UNU.RAN distribution string; 105 @param method : UNU.RAN method string; 106 ; 107 Here is an example using the string API:; 108 ```; 109 Tunuran unr;; 110 unr.Init(""normal(3.,0.75); domain = (0,inf)"", ""method = tdr; c = 0"");; 111 ```; 112 */; 113 bool Init(const std::string & distr, const std::string & method);; 114 ; 115 ; 116 /**; 117 Initialize method for continuous one-dimensional distribution.; 118 User must provide a distribution object (which is copied inside) and a string for a method.; 119 For the list of available method for 1D cont. distribution see the; 120 <A href=""http://statmath.wu-wien.ac.at/unuran/doc/unuran.html#Methods_005ffor_005fCONT"">UnuRan doc</A>.; 121 A re-initialization is needed whenever distribution parameters have been changed.; 122 Note that the method string can contain in addition to the method name all the specific method; 123 parameters specified using the UNURAN method string API.; 124 For example a valid string can be `""method=arou; max_segments=1000; max_sqhratio = 0.9""`; 125 */; 126 bool Init(const TUnuranContDist & distr, const std::string & method = ""auto"");; 127 ; 128 /**; 129 Initialize method for continuous multi-dimensional distribution.; 130 User must provide a distribution object (which is copied inside) and a string for a ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TUnuran_8h_source.html:3795,continuous,continuous,3795,doc/master/TUnuran_8h_source.html,https://root.cern,https://root.cern/doc/master/TUnuran_8h_source.html,1,['continuous'],['continuous']
Deployability,"uran.h:73; UNUR_GENstruct unur_gen UNUR_GENDefinition TUnuran.h:64; UNUR_DISTRstruct unur_distr UNUR_DISTRDefinition TUnuran.h:70; TH1TH1 is the base class of all histogram classes in ROOT.Definition TH1.h:59; TRandomThis is the base class for the ROOT Random number generators.Definition TRandom.h:27; TUnuranContDistTUnuranContDist class describing one dimensional continuous distribution.Definition TUnuranContDist.h:48; TUnuranDiscrDistTUnuranDiscrDist class for one dimensional discrete distribution.Definition TUnuranDiscrDist.h:51; TUnuranEmpDistTUnuranEmpDist class for describing empirical distributions.Definition TUnuranEmpDist.h:49; TUnuranMultiContDistTUnuranMultiContDist class describing multi dimensional continuous distributions.Definition TUnuranMultiContDist.h:47; TUnuranTUnuran class.Definition TUnuran.h:79; TUnuran::GetGenIdstd::string GetGenId() constReturn an ID string about the unuran generator method.Definition TUnuran.cxx:369; TUnuran::IsDistContbool IsDistCont() constReturn true for a univariate continuous distribution.Definition TUnuran.cxx:390; TUnuran::SetMethodAndInitbool SetMethodAndInit()change the method and initialize Unuran with the previously given distributionDefinition TUnuran.cxx:332; TUnuran::SampleDiscrint SampleDiscr()Sample discrete distributions.Definition TUnuran.cxx:407; TUnuran::SetLogStreambool SetLogStream()set stream for log and error (not yet implemented)Definition TUnuran.h:276; TUnuran::MethodNameconst std::string & MethodName() constused Unuran methodDefinition TUnuran.h:281; TUnuran::TUnuranTUnuran(TUnuran &&)=delete; TUnuran::fDiststd::unique_ptr< TUnuranBaseDist > fDistDefinition TUnuran.h:308; TUnuran::SetDiscreteDistributionbool SetDiscreteDistribution(const TUnuranDiscrDist &dist)Definition TUnuran.cxx:287; TUnuran::GetDistTypeint GetDistType() constReturn the type of the distribution.Definition TUnuran.cxx:383; TUnuran::InitBinomialbool InitBinomial(unsigned int ntot, double prob, const std::string &method=""dstd"")I",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TUnuran_8h_source.html:13006,continuous,continuous,13006,doc/master/TUnuran_8h_source.html,https://root.cern,https://root.cern/doc/master/TUnuran_8h_source.html,1,['continuous'],['continuous']
Deployability,uration ; : 121 | 11379.1 10368.9 0.0200276 0.00179623 43880.4 0; : 122 Minimum Test error found - save the configuration ; : 122 | 11283.5 10279 0.0203977 0.00185462 43142.8 0; : 123 Minimum Test error found - save the configuration ; : 123 | 11193.7 10184.6 0.0202751 0.00180182 43305.7 0; : 124 Minimum Test error found - save the configuration ; : 124 | 11099.9 10093.3 0.0200203 0.00180095 43909.4 0; : 125 Minimum Test error found - save the configuration ; : 125 | 11007.6 10003.9 0.020012 0.00179997 43927 0; : 126 Minimum Test error found - save the configuration ; : 126 | 10916.6 9915.56 0.020034 0.00179861 43870.8 0; : 127 Minimum Test error found - save the configuration ; : 127 | 10828 9825.55 0.020018 0.00180003 43912.6 0; : 128 Minimum Test error found - save the configuration ; : 128 | 10738.5 9736.79 0.020043 0.00181097 43878.8 0; : 129 Minimum Test error found - save the configuration ; : 129 | 10648.9 9650.52 0.0200265 0.0017972 43885.3 0; : 130 Minimum Test error found - save the configuration ; : 130 | 10561.5 9564.19 0.0200344 0.00180234 43878.7 0; : 131 Minimum Test error found - save the configuration ; : 131 | 10475.3 9477.45 0.0200356 0.00180107 43872.9 0; : 132 Minimum Test error found - save the configuration ; : 132 | 10388.3 9392.54 0.0200847 0.0018148 43788 0; : 133 Minimum Test error found - save the configuration ; : 133 | 10303 9307.9 0.0200258 0.00180758 43912.1 0; : 134 Minimum Test error found - save the configuration ; : 134 | 10217.2 9225.8 0.0200352 0.00180785 43890.1 0; : 135 Minimum Test error found - save the configuration ; : 135 | 10133.2 9143.83 0.0200313 0.00180712 43897.8 0; : 136 Minimum Test error found - save the configuration ; : 136 | 10051.9 9059.29 0.0200892 0.0018637 43894.4 0; : 137 Minimum Test error found - save the configuration ; : 137 | 9966.99 8978.86 0.0201265 0.00183533 43737 0; : 138 Minimum Test error found - save the configuration ; : 138 | 9887.13 8895.8 0.0200521 0.00180887 43851.8 0; : 139 Minimum Test ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:25630,configurat,configuration,25630,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,uration ; : 122 | 11283.5 10279 0.0203977 0.00185462 43142.8 0; : 123 Minimum Test error found - save the configuration ; : 123 | 11193.7 10184.6 0.0202751 0.00180182 43305.7 0; : 124 Minimum Test error found - save the configuration ; : 124 | 11099.9 10093.3 0.0200203 0.00180095 43909.4 0; : 125 Minimum Test error found - save the configuration ; : 125 | 11007.6 10003.9 0.020012 0.00179997 43927 0; : 126 Minimum Test error found - save the configuration ; : 126 | 10916.6 9915.56 0.020034 0.00179861 43870.8 0; : 127 Minimum Test error found - save the configuration ; : 127 | 10828 9825.55 0.020018 0.00180003 43912.6 0; : 128 Minimum Test error found - save the configuration ; : 128 | 10738.5 9736.79 0.020043 0.00181097 43878.8 0; : 129 Minimum Test error found - save the configuration ; : 129 | 10648.9 9650.52 0.0200265 0.0017972 43885.3 0; : 130 Minimum Test error found - save the configuration ; : 130 | 10561.5 9564.19 0.0200344 0.00180234 43878.7 0; : 131 Minimum Test error found - save the configuration ; : 131 | 10475.3 9477.45 0.0200356 0.00180107 43872.9 0; : 132 Minimum Test error found - save the configuration ; : 132 | 10388.3 9392.54 0.0200847 0.0018148 43788 0; : 133 Minimum Test error found - save the configuration ; : 133 | 10303 9307.9 0.0200258 0.00180758 43912.1 0; : 134 Minimum Test error found - save the configuration ; : 134 | 10217.2 9225.8 0.0200352 0.00180785 43890.1 0; : 135 Minimum Test error found - save the configuration ; : 135 | 10133.2 9143.83 0.0200313 0.00180712 43897.8 0; : 136 Minimum Test error found - save the configuration ; : 136 | 10051.9 9059.29 0.0200892 0.0018637 43894.4 0; : 137 Minimum Test error found - save the configuration ; : 137 | 9966.99 8978.86 0.0201265 0.00183533 43737 0; : 138 Minimum Test error found - save the configuration ; : 138 | 9887.13 8895.8 0.0200521 0.00180887 43851.8 0; : 139 Minimum Test error found - save the configuration ; : 139 | 9804.58 8815.4 0.020043 0.00180744 43870.3 0; : 140 Minimum Test er,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:25744,configurat,configuration,25744,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,uration ; : 130 | 10561.5 9564.19 0.0200344 0.00180234 43878.7 0; : 131 Minimum Test error found - save the configuration ; : 131 | 10475.3 9477.45 0.0200356 0.00180107 43872.9 0; : 132 Minimum Test error found - save the configuration ; : 132 | 10388.3 9392.54 0.0200847 0.0018148 43788 0; : 133 Minimum Test error found - save the configuration ; : 133 | 10303 9307.9 0.0200258 0.00180758 43912.1 0; : 134 Minimum Test error found - save the configuration ; : 134 | 10217.2 9225.8 0.0200352 0.00180785 43890.1 0; : 135 Minimum Test error found - save the configuration ; : 135 | 10133.2 9143.83 0.0200313 0.00180712 43897.8 0; : 136 Minimum Test error found - save the configuration ; : 136 | 10051.9 9059.29 0.0200892 0.0018637 43894.4 0; : 137 Minimum Test error found - save the configuration ; : 137 | 9966.99 8978.86 0.0201265 0.00183533 43737 0; : 138 Minimum Test error found - save the configuration ; : 138 | 9887.13 8895.8 0.0200521 0.00180887 43851.8 0; : 139 Minimum Test error found - save the configuration ; : 139 | 9804.58 8815.4 0.020043 0.00180744 43870.3 0; : 140 Minimum Test error found - save the configuration ; : 140 | 9722.87 8737.3 0.0202214 0.00190002 43664.9 0; : 141 Minimum Test error found - save the configuration ; : 141 | 9644.27 8657.79 0.020429 0.00182729 43006.8 0; : 142 Minimum Test error found - save the configuration ; : 142 | 9564.39 8579.88 0.0204803 0.00186473 42974.8 0; : 143 Minimum Test error found - save the configuration ; : 143 | 9485.56 8503.01 0.0205275 0.0018356 42799.2 0; : 144 Minimum Test error found - save the configuration ; : 144 | 9408.47 8425.29 0.0205008 0.00183704 42863.9 0; : 145 Minimum Test error found - save the configuration ; : 145 | 9331.33 8347.95 0.0201933 0.00180744 43511.7 0; : 146 Minimum Test error found - save the configuration ; : 146 | 9254.79 8271.21 0.0201415 0.00180723 43634.1 0; : 147 Minimum Test error found - save the configuration ; : 147 | 9177.56 8197 0.0201152 0.00181664 43719.3 0; : 148 Minimum T,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:26645,configurat,configuration,26645,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,uration ; : 171 | 7532.11 6565.9 0.0201114 0.00182063 43737.9 0; : 172 Minimum Test error found - save the configuration ; : 172 | 7471.23 6504.71 0.0200897 0.00182205 43793.2 0; : 173 Minimum Test error found - save the configuration ; : 173 | 7410.53 6443.41 0.0204177 0.00187787 43150.4 0; : 174 Minimum Test error found - save the configuration ; : 174 | 7349.1 6383.77 0.0200981 0.00181163 43748.3 0; : 175 Minimum Test error found - save the configuration ; : 175 | 7289.39 6324 0.0200682 0.0018131 43823.4 0; : 176 Minimum Test error found - save the configuration ; : 176 | 7230 6264.47 0.0200687 0.00181285 43821.5 0; : 177 Minimum Test error found - save the configuration ; : 177 | 7171.82 6204.18 0.0200767 0.00181262 43801.8 0; : 178 Minimum Test error found - save the configuration ; : 178 | 7111.03 6147.7 0.0200764 0.00181324 43803.9 0; : 179 Minimum Test error found - save the configuration ; : 179 | 7053.87 6090.24 0.0200835 0.0018163 43794.3 0; : 180 Minimum Test error found - save the configuration ; : 180 | 6997.03 6032.07 0.0204217 0.00180691 42976.5 0; : 181 Minimum Test error found - save the configuration ; : 181 | 6939.07 5975.45 0.0200798 0.00180145 43767.5 0; : 182 Minimum Test error found - save the configuration ; : 182 | 6882.6 5919.11 0.0200699 0.00180792 43806.8 0; : 183 Minimum Test error found - save the configuration ; : 183 | 6826.1 5863.62 0.0200838 0.00180862 43775.3 0; : 184 Minimum Test error found - save the configuration ; : 184 | 6771.06 5807.61 0.0200991 0.00181199 43746.7 0; : 185 Minimum Test error found - save the configuration ; : 185 | 6714.64 5753.86 0.0200873 0.00180851 43766.7 0; : 186 Minimum Test error found - save the configuration ; : 186 | 6660.45 5699.55 0.0200713 0.00180648 43800 0; : 187 Minimum Test error found - save the configuration ; : 187 | 6606 5645.81 0.0200891 0.00180584 43755.9 0; : 188 Minimum Test error found - save the configuration ; : 188 | 6552.47 5592.04 0.0200898 0.00181079 43766 0; : 189 Minimum Te,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:31282,configurat,configuration,31282,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,uration ; : 174 | 7349.1 6383.77 0.0200981 0.00181163 43748.3 0; : 175 Minimum Test error found - save the configuration ; : 175 | 7289.39 6324 0.0200682 0.0018131 43823.4 0; : 176 Minimum Test error found - save the configuration ; : 176 | 7230 6264.47 0.0200687 0.00181285 43821.5 0; : 177 Minimum Test error found - save the configuration ; : 177 | 7171.82 6204.18 0.0200767 0.00181262 43801.8 0; : 178 Minimum Test error found - save the configuration ; : 178 | 7111.03 6147.7 0.0200764 0.00181324 43803.9 0; : 179 Minimum Test error found - save the configuration ; : 179 | 7053.87 6090.24 0.0200835 0.0018163 43794.3 0; : 180 Minimum Test error found - save the configuration ; : 180 | 6997.03 6032.07 0.0204217 0.00180691 42976.5 0; : 181 Minimum Test error found - save the configuration ; : 181 | 6939.07 5975.45 0.0200798 0.00180145 43767.5 0; : 182 Minimum Test error found - save the configuration ; : 182 | 6882.6 5919.11 0.0200699 0.00180792 43806.8 0; : 183 Minimum Test error found - save the configuration ; : 183 | 6826.1 5863.62 0.0200838 0.00180862 43775.3 0; : 184 Minimum Test error found - save the configuration ; : 184 | 6771.06 5807.61 0.0200991 0.00181199 43746.7 0; : 185 Minimum Test error found - save the configuration ; : 185 | 6714.64 5753.86 0.0200873 0.00180851 43766.7 0; : 186 Minimum Test error found - save the configuration ; : 186 | 6660.45 5699.55 0.0200713 0.00180648 43800 0; : 187 Minimum Test error found - save the configuration ; : 187 | 6606 5645.81 0.0200891 0.00180584 43755.9 0; : 188 Minimum Test error found - save the configuration ; : 188 | 6552.47 5592.04 0.0200898 0.00181079 43766 0; : 189 Minimum Test error found - save the configuration ; : 189 | 6500.15 5537.2 0.0201183 0.00181031 43696.6 0; : 190 Minimum Test error found - save the configuration ; : 190 | 6444.37 5487.05 0.0200871 0.00180586 43760.7 0; : 191 Minimum Test error found - save the configuration ; : 191 | 6394.21 5433.57 0.0200994 0.00180152 43720.8 0; : 192 Minimum Te,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:31623,configurat,configuration,31623,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,uration ; : 175 | 7289.39 6324 0.0200682 0.0018131 43823.4 0; : 176 Minimum Test error found - save the configuration ; : 176 | 7230 6264.47 0.0200687 0.00181285 43821.5 0; : 177 Minimum Test error found - save the configuration ; : 177 | 7171.82 6204.18 0.0200767 0.00181262 43801.8 0; : 178 Minimum Test error found - save the configuration ; : 178 | 7111.03 6147.7 0.0200764 0.00181324 43803.9 0; : 179 Minimum Test error found - save the configuration ; : 179 | 7053.87 6090.24 0.0200835 0.0018163 43794.3 0; : 180 Minimum Test error found - save the configuration ; : 180 | 6997.03 6032.07 0.0204217 0.00180691 42976.5 0; : 181 Minimum Test error found - save the configuration ; : 181 | 6939.07 5975.45 0.0200798 0.00180145 43767.5 0; : 182 Minimum Test error found - save the configuration ; : 182 | 6882.6 5919.11 0.0200699 0.00180792 43806.8 0; : 183 Minimum Test error found - save the configuration ; : 183 | 6826.1 5863.62 0.0200838 0.00180862 43775.3 0; : 184 Minimum Test error found - save the configuration ; : 184 | 6771.06 5807.61 0.0200991 0.00181199 43746.7 0; : 185 Minimum Test error found - save the configuration ; : 185 | 6714.64 5753.86 0.0200873 0.00180851 43766.7 0; : 186 Minimum Test error found - save the configuration ; : 186 | 6660.45 5699.55 0.0200713 0.00180648 43800 0; : 187 Minimum Test error found - save the configuration ; : 187 | 6606 5645.81 0.0200891 0.00180584 43755.9 0; : 188 Minimum Test error found - save the configuration ; : 188 | 6552.47 5592.04 0.0200898 0.00181079 43766 0; : 189 Minimum Test error found - save the configuration ; : 189 | 6500.15 5537.2 0.0201183 0.00181031 43696.6 0; : 190 Minimum Test error found - save the configuration ; : 190 | 6444.37 5487.05 0.0200871 0.00180586 43760.7 0; : 191 Minimum Test error found - save the configuration ; : 191 | 6394.21 5433.57 0.0200994 0.00180152 43720.8 0; : 192 Minimum Test error found - save the configuration ; : 192 | 6340.82 5382.29 0.0201748 0.00181779 43580.1 0; : 193 Minimum T,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:31736,configurat,configuration,31736,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,uration ; : 256 | 3747.34 2863.22 0.020356 0.00183152 43186 0; : 257 Minimum Test error found - save the configuration ; : 257 | 3717.23 2832.96 0.0205175 0.00183548 42822 0; : 258 Minimum Test error found - save the configuration ; : 258 | 3685.71 2804.1 0.0207306 0.00191201 42511.2 0; : 259 Minimum Test error found - save the configuration ; : 259 | 3655.28 2775.93 0.0206157 0.0018465 42623 0; : 260 Minimum Test error found - save the configuration ; : 260 | 3624.6 2748.54 0.0206258 0.00186298 42637.5 0; : 261 Minimum Test error found - save the configuration ; : 261 | 3595.24 2720.67 0.0206036 0.00182681 42605.8 0; : 262 Minimum Test error found - save the configuration ; : 262 | 3565.68 2692.59 0.0203715 0.00187472 43250.7 0; : 263 Minimum Test error found - save the configuration ; : 263 | 3536.15 2665.16 0.0204197 0.00183921 43055.9 0; : 264 Minimum Test error found - save the configuration ; : 264 | 3507.67 2636.8 0.0206158 0.00185399 42639.7 0; : 265 Minimum Test error found - save the configuration ; : 265 | 3477.42 2610.03 0.0202093 0.0018315 43530.8 0; : 266 Minimum Test error found - save the configuration ; : 266 | 3448.44 2583.82 0.0201348 0.00181129 43659.7 0; : 267 Minimum Test error found - save the configuration ; : 267 | 3419.61 2557.61 0.0201203 0.00181281 43697.9 0; : 268 Minimum Test error found - save the configuration ; : 268 | 3391.52 2531.71 0.0201083 0.00181098 43722.2 0; : 269 Minimum Test error found - save the configuration ; : 269 | 3363.52 2505.37 0.0201147 0.00180493 43692.5 0; : 270 Minimum Test error found - save the configuration ; : 270 | 3335.06 2479.9 0.0201599 0.00183615 43659.2 0; : 271 Minimum Test error found - save the configuration ; : 271 | 3308.12 2454.26 0.0202082 0.00181348 43490.8 0; : 272 Minimum Test error found - save the configuration ; : 272 | 3280.89 2427.73 0.020272 0.0018293 43377.6 0; : 273 Minimum Test error found - save the configuration ; : 273 | 3252.38 2403.22 0.0201521 0.00183383 43672.2 0; : 274 Minim,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:40911,configurat,configuration,40911,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,uration ; : 325 | 2081.68 1368.94 0.02014 0.00181951 43666.9 0; : 326 Minimum Test error found - save the configuration ; : 326 | 2062.99 1354.16 0.0201231 0.00181474 43695.9 0; : 327 Minimum Test error found - save the configuration ; : 327 | 2044.89 1339.01 0.0203662 0.00185106 43207.9 0; : 328 Minimum Test error found - save the configuration ; : 328 | 2027.08 1324.14 0.0205379 0.00189883 42920.6 0; : 329 Minimum Test error found - save the configuration ; : 329 | 2010.14 1308.4 0.0208465 0.00188706 42195.2 0; : 330 Minimum Test error found - save the configuration ; : 330 | 1991.48 1294.33 0.0203889 0.00185386 43161.4 0; : 331 Minimum Test error found - save the configuration ; : 331 | 1974 1281.47 0.020168 0.00182028 43602.2 0; : 332 Minimum Test error found - save the configuration ; : 332 | 1957.4 1265.55 0.0201238 0.00181209 43687.9 0; : 333 Minimum Test error found - save the configuration ; : 333 | 1939.3 1251.56 0.020118 0.0018119 43701.4 0; : 334 Minimum Test error found - save the configuration ; : 334 | 1922.28 1237.18 0.0201046 0.00181273 43735.3 0; : 335 Minimum Test error found - save the configuration ; : 335 | 1905.38 1223.07 0.0201485 0.00181696 43640.6 0; : 336 Minimum Test error found - save the configuration ; : 336 | 1888.23 1209.6 0.0201214 0.00181991 43712.2 0; : 337 Minimum Test error found - save the configuration ; : 337 | 1871.94 1195.83 0.0205304 0.00184821 42821.5 0; : 338 Minimum Test error found - save the configuration ; : 338 | 1855.07 1182.37 0.0201268 0.00181989 43699.3 0; : 339 Minimum Test error found - save the configuration ; : 339 | 1838.61 1168.93 0.0201201 0.00181292 43698.7 0; : 340 Minimum Test error found - save the configuration ; : 340 | 1822.04 1156.1 0.020121 0.00181141 43693 0; : 341 Minimum Test error found - save the configuration ; : 341 | 1806.12 1142.64 0.0202229 0.00182722 43488.6 0; : 342 Minimum Test error found - save the configuration ; : 342 | 1789.69 1130.02 0.0201502 0.00182055 43645.1 0; : 343 Minimu,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:48738,configurat,configuration,48738,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,uration ; : 381 | 1250.17 723.372 0.0201233 0.00181189 43688.6 0; : 382 Minimum Test error found - save the configuration ; : 382 | 1238.6 715.116 0.0201183 0.00181259 43702.2 0; : 383 Minimum Test error found - save the configuration ; : 383 | 1227 706.748 0.0201329 0.0018213 43688.2 0; : 384 Minimum Test error found - save the configuration ; : 384 | 1215.11 699.222 0.0201342 0.00181943 43680.7 0; : 385 Minimum Test error found - save the configuration ; : 385 | 1203.63 691.403 0.02014 0.00182334 43676.1 0; : 386 Minimum Test error found - save the configuration ; : 386 | 1192.53 683.241 0.0201197 0.00181992 43716.3 0; : 387 Minimum Test error found - save the configuration ; : 387 | 1181.2 675.7 0.0201175 0.00182002 43721.9 0; : 388 Minimum Test error found - save the configuration ; : 388 | 1170.08 667.761 0.0201168 0.00182403 43733.1 0; : 389 Minimum Test error found - save the configuration ; : 389 | 1158.61 661.271 0.0204728 0.0018727 43010.6 0; : 390 Minimum Test error found - save the configuration ; : 390 | 1148.13 652.893 0.0205991 0.00194136 42877.5 0; : 391 Minimum Test error found - save the configuration ; : 391 | 1136.83 645.4 0.0202307 0.00186692 43564 0; : 392 Minimum Test error found - save the configuration ; : 392 | 1125.56 638.711 0.0206275 0.00184646 42596.2 0; : 393 Minimum Test error found - save the configuration ; : 393 | 1115.4 631.055 0.0202254 0.00180782 43436.7 0; : 394 Minimum Test error found - save the configuration ; : 394 | 1104.59 624.317 0.02027 0.00182884 43381.3 0; : 395 Minimum Test error found - save the configuration ; : 395 | 1094.1 617.12 0.0203693 0.00181577 43118.4 0; : 396 Minimum Test error found - save the configuration ; : 396 | 1083.6 610.558 0.0201067 0.00181126 43726.6 0; : 397 Minimum Test error found - save the configuration ; : 397 | 1073.44 603.068 0.020123 0.00181306 43692 0; : 398 Minimum Test error found - save the configuration ; : 398 | 1062.93 596.682 0.020266 0.00184767 43435 0; : 399 Minimum Test erro,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:55082,configurat,configuration,55082,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,uration ; : 382 | 1238.6 715.116 0.0201183 0.00181259 43702.2 0; : 383 Minimum Test error found - save the configuration ; : 383 | 1227 706.748 0.0201329 0.0018213 43688.2 0; : 384 Minimum Test error found - save the configuration ; : 384 | 1215.11 699.222 0.0201342 0.00181943 43680.7 0; : 385 Minimum Test error found - save the configuration ; : 385 | 1203.63 691.403 0.02014 0.00182334 43676.1 0; : 386 Minimum Test error found - save the configuration ; : 386 | 1192.53 683.241 0.0201197 0.00181992 43716.3 0; : 387 Minimum Test error found - save the configuration ; : 387 | 1181.2 675.7 0.0201175 0.00182002 43721.9 0; : 388 Minimum Test error found - save the configuration ; : 388 | 1170.08 667.761 0.0201168 0.00182403 43733.1 0; : 389 Minimum Test error found - save the configuration ; : 389 | 1158.61 661.271 0.0204728 0.0018727 43010.6 0; : 390 Minimum Test error found - save the configuration ; : 390 | 1148.13 652.893 0.0205991 0.00194136 42877.5 0; : 391 Minimum Test error found - save the configuration ; : 391 | 1136.83 645.4 0.0202307 0.00186692 43564 0; : 392 Minimum Test error found - save the configuration ; : 392 | 1125.56 638.711 0.0206275 0.00184646 42596.2 0; : 393 Minimum Test error found - save the configuration ; : 393 | 1115.4 631.055 0.0202254 0.00180782 43436.7 0; : 394 Minimum Test error found - save the configuration ; : 394 | 1104.59 624.317 0.02027 0.00182884 43381.3 0; : 395 Minimum Test error found - save the configuration ; : 395 | 1094.1 617.12 0.0203693 0.00181577 43118.4 0; : 396 Minimum Test error found - save the configuration ; : 396 | 1083.6 610.558 0.0201067 0.00181126 43726.6 0; : 397 Minimum Test error found - save the configuration ; : 397 | 1073.44 603.068 0.020123 0.00181306 43692 0; : 398 Minimum Test error found - save the configuration ; : 398 | 1062.93 596.682 0.020266 0.00184767 43435 0; : 399 Minimum Test error found - save the configuration ; : 399 | 1052.39 590.107 0.0201237 0.00182381 43716.1 0; : 400 Minimum Test erro,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:55196,configurat,configuration,55196,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,uration ; : 385 | 1203.63 691.403 0.02014 0.00182334 43676.1 0; : 386 Minimum Test error found - save the configuration ; : 386 | 1192.53 683.241 0.0201197 0.00181992 43716.3 0; : 387 Minimum Test error found - save the configuration ; : 387 | 1181.2 675.7 0.0201175 0.00182002 43721.9 0; : 388 Minimum Test error found - save the configuration ; : 388 | 1170.08 667.761 0.0201168 0.00182403 43733.1 0; : 389 Minimum Test error found - save the configuration ; : 389 | 1158.61 661.271 0.0204728 0.0018727 43010.6 0; : 390 Minimum Test error found - save the configuration ; : 390 | 1148.13 652.893 0.0205991 0.00194136 42877.5 0; : 391 Minimum Test error found - save the configuration ; : 391 | 1136.83 645.4 0.0202307 0.00186692 43564 0; : 392 Minimum Test error found - save the configuration ; : 392 | 1125.56 638.711 0.0206275 0.00184646 42596.2 0; : 393 Minimum Test error found - save the configuration ; : 393 | 1115.4 631.055 0.0202254 0.00180782 43436.7 0; : 394 Minimum Test error found - save the configuration ; : 394 | 1104.59 624.317 0.02027 0.00182884 43381.3 0; : 395 Minimum Test error found - save the configuration ; : 395 | 1094.1 617.12 0.0203693 0.00181577 43118.4 0; : 396 Minimum Test error found - save the configuration ; : 396 | 1083.6 610.558 0.0201067 0.00181126 43726.6 0; : 397 Minimum Test error found - save the configuration ; : 397 | 1073.44 603.068 0.020123 0.00181306 43692 0; : 398 Minimum Test error found - save the configuration ; : 398 | 1062.93 596.682 0.020266 0.00184767 43435 0; : 399 Minimum Test error found - save the configuration ; : 399 | 1052.39 590.107 0.0201237 0.00182381 43716.1 0; : 400 Minimum Test error found - save the configuration ; : 400 | 1042.76 583.068 0.0201639 0.00182862 43631.8 0; : 401 Minimum Test error found - save the configuration ; : 401 | 1032.4 576.548 0.0201234 0.00181928 43705.9 0; : 402 Minimum Test error found - save the configuration ; : 402 | 1022.23 570.272 0.0201306 0.00182147 43694 0; : 403 Minimum Test er,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:55533,configurat,configuration,55533,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,uration ; : 386 | 1192.53 683.241 0.0201197 0.00181992 43716.3 0; : 387 Minimum Test error found - save the configuration ; : 387 | 1181.2 675.7 0.0201175 0.00182002 43721.9 0; : 388 Minimum Test error found - save the configuration ; : 388 | 1170.08 667.761 0.0201168 0.00182403 43733.1 0; : 389 Minimum Test error found - save the configuration ; : 389 | 1158.61 661.271 0.0204728 0.0018727 43010.6 0; : 390 Minimum Test error found - save the configuration ; : 390 | 1148.13 652.893 0.0205991 0.00194136 42877.5 0; : 391 Minimum Test error found - save the configuration ; : 391 | 1136.83 645.4 0.0202307 0.00186692 43564 0; : 392 Minimum Test error found - save the configuration ; : 392 | 1125.56 638.711 0.0206275 0.00184646 42596.2 0; : 393 Minimum Test error found - save the configuration ; : 393 | 1115.4 631.055 0.0202254 0.00180782 43436.7 0; : 394 Minimum Test error found - save the configuration ; : 394 | 1104.59 624.317 0.02027 0.00182884 43381.3 0; : 395 Minimum Test error found - save the configuration ; : 395 | 1094.1 617.12 0.0203693 0.00181577 43118.4 0; : 396 Minimum Test error found - save the configuration ; : 396 | 1083.6 610.558 0.0201067 0.00181126 43726.6 0; : 397 Minimum Test error found - save the configuration ; : 397 | 1073.44 603.068 0.020123 0.00181306 43692 0; : 398 Minimum Test error found - save the configuration ; : 398 | 1062.93 596.682 0.020266 0.00184767 43435 0; : 399 Minimum Test error found - save the configuration ; : 399 | 1052.39 590.107 0.0201237 0.00182381 43716.1 0; : 400 Minimum Test error found - save the configuration ; : 400 | 1042.76 583.068 0.0201639 0.00182862 43631.8 0; : 401 Minimum Test error found - save the configuration ; : 401 | 1032.4 576.548 0.0201234 0.00181928 43705.9 0; : 402 Minimum Test error found - save the configuration ; : 402 | 1022.23 570.272 0.0201306 0.00182147 43694 0; : 403 Minimum Test error found - save the configuration ; : 403 | 1012.74 563.823 0.0201066 0.00181196 43728.6 0; : 404 Minimum Test ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:55645,configurat,configuration,55645,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,uration ; : 388 | 1170.08 667.761 0.0201168 0.00182403 43733.1 0; : 389 Minimum Test error found - save the configuration ; : 389 | 1158.61 661.271 0.0204728 0.0018727 43010.6 0; : 390 Minimum Test error found - save the configuration ; : 390 | 1148.13 652.893 0.0205991 0.00194136 42877.5 0; : 391 Minimum Test error found - save the configuration ; : 391 | 1136.83 645.4 0.0202307 0.00186692 43564 0; : 392 Minimum Test error found - save the configuration ; : 392 | 1125.56 638.711 0.0206275 0.00184646 42596.2 0; : 393 Minimum Test error found - save the configuration ; : 393 | 1115.4 631.055 0.0202254 0.00180782 43436.7 0; : 394 Minimum Test error found - save the configuration ; : 394 | 1104.59 624.317 0.02027 0.00182884 43381.3 0; : 395 Minimum Test error found - save the configuration ; : 395 | 1094.1 617.12 0.0203693 0.00181577 43118.4 0; : 396 Minimum Test error found - save the configuration ; : 396 | 1083.6 610.558 0.0201067 0.00181126 43726.6 0; : 397 Minimum Test error found - save the configuration ; : 397 | 1073.44 603.068 0.020123 0.00181306 43692 0; : 398 Minimum Test error found - save the configuration ; : 398 | 1062.93 596.682 0.020266 0.00184767 43435 0; : 399 Minimum Test error found - save the configuration ; : 399 | 1052.39 590.107 0.0201237 0.00182381 43716.1 0; : 400 Minimum Test error found - save the configuration ; : 400 | 1042.76 583.068 0.0201639 0.00182862 43631.8 0; : 401 Minimum Test error found - save the configuration ; : 401 | 1032.4 576.548 0.0201234 0.00181928 43705.9 0; : 402 Minimum Test error found - save the configuration ; : 402 | 1022.23 570.272 0.0201306 0.00182147 43694 0; : 403 Minimum Test error found - save the configuration ; : 403 | 1012.74 563.823 0.0201066 0.00181196 43728.6 0; : 404 Minimum Test error found - save the configuration ; : 404 | 1002.66 558.031 0.0201068 0.0018122 43728.9 0; : 405 Minimum Test error found - save the configuration ; : 405 | 993.455 551.67 0.020178 0.00184829 43644.9 0; : 406 Minimum Test ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:55870,configurat,configuration,55870,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,uration ; : 418 | 874.299 477.981 0.0201544 0.00181008 43610.1 0; : 419 Minimum Test error found - save the configuration ; : 419 | 866.108 472.505 0.0201451 0.00182964 43678.9 0; : 420 Minimum Test error found - save the configuration ; : 420 | 856.878 467.755 0.0201787 0.00183446 43610.4 0; : 421 Minimum Test error found - save the configuration ; : 421 | 849.297 462.722 0.0201682 0.00182292 43607.8 0; : 422 Minimum Test error found - save the configuration ; : 422 | 840.335 457.953 0.0201484 0.0018138 43633.4 0; : 423 Minimum Test error found - save the configuration ; : 423 | 832.226 453.261 0.0201773 0.00182876 43600.2 0; : 424 Minimum Test error found - save the configuration ; : 424 | 824.213 447.823 0.020172 0.00183242 43621.4 0; : 425 Minimum Test error found - save the configuration ; : 425 | 816.038 443.488 0.0201762 0.00183703 43622.6 0; : 426 Minimum Test error found - save the configuration ; : 426 | 807.627 438.586 0.0202495 0.00183837 43452 0; : 427 Minimum Test error found - save the configuration ; : 427 | 799.623 433.9 0.0201527 0.00181997 43637.7 0; : 428 Minimum Test error found - save the configuration ; : 428 | 791.762 429.014 0.0201231 0.00181389 43693.9 0; : 429 Minimum Test error found - save the configuration ; : 429 | 783.663 424.486 0.0202036 0.00181812 43512.5 0; : 430 Minimum Test error found - save the configuration ; : 430 | 776.025 420.47 0.020126 0.00182055 43702.9 0; : 431 Minimum Test error found - save the configuration ; : 431 | 768.212 415.652 0.0201366 0.00182081 43678.1 0; : 432 Minimum Test error found - save the configuration ; : 432 | 761.012 411.218 0.02015 0.00183569 43681.6 0; : 433 Minimum Test error found - save the configuration ; : 433 | 753.136 407.298 0.0201476 0.00182106 43652.7 0; : 434 Minimum Test error found - save the configuration ; : 434 | 745.345 402.751 0.020133 0.00182099 43687.1 0; : 435 Minimum Test error found - save the configuration ; : 435 | 738.037 398.378 0.0201447 0.00181389 43642.5 0; : 436 M,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:59272,configurat,configuration,59272,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,uration ; : 440 | 701.662 378.014 0.0205169 0.00184853 42853.2 0; : 441 Minimum Test error found - save the configuration ; : 441 | 695.167 373.877 0.0206789 0.00187467 42543.7 0; : 442 Minimum Test error found - save the configuration ; : 442 | 687.861 370.419 0.0206937 0.00187678 42514.9 0; : 443 Minimum Test error found - save the configuration ; : 443 | 681.656 366.359 0.0201552 0.00181904 43629.7 0; : 444 Minimum Test error found - save the configuration ; : 444 | 674.01 362.924 0.0201329 0.0018218 43689.4 0; : 445 Minimum Test error found - save the configuration ; : 445 | 667.37 358.699 0.0201197 0.00181899 43714.1 0; : 446 Minimum Test error found - save the configuration ; : 446 | 660.646 354.833 0.0201137 0.00181978 43730.3 0; : 447 Minimum Test error found - save the configuration ; : 447 | 654.211 352.003 0.0201333 0.00184653 43747.4 0; : 448 Minimum Test error found - save the configuration ; : 448 | 647.374 347.327 0.0201121 0.0018176 43729 0; : 449 Minimum Test error found - save the configuration ; : 449 | 641 344.618 0.0201064 0.00181317 43732 0; : 450 Minimum Test error found - save the configuration ; : 450 | 634.906 340.694 0.0201841 0.00185283 43641.2 0; : 451 Minimum Test error found - save the configuration ; : 451 | 628.321 336.668 0.0202054 0.00184722 43577.2 0; : 452 Minimum Test error found - save the configuration ; : 452 | 621.73 333.236 0.0201956 0.00184565 43596.7 0; : 453 Minimum Test error found - save the configuration ; : 453 | 615.499 330.282 0.0202258 0.00184415 43521.7 0; : 454 Minimum Test error found - save the configuration ; : 454 | 608.831 326.391 0.0201257 0.00180567 43668.1 0; : 455 Minimum Test error found - save the configuration ; : 455 | 602.478 323.085 0.0201467 0.00181706 43645.1 0; : 456 Minimum Test error found - save the configuration ; : 456 | 596.625 319.828 0.0201415 0.00181382 43649.8 0; : 457 Minimum Test error found - save the configuration ; : 457 | 590.662 316.621 0.0201112 0.00181253 43718.9 0; : 458 Mini,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:61765,configurat,configuration,61765,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,uration ; : 446 | 660.646 354.833 0.0201137 0.00181978 43730.3 0; : 447 Minimum Test error found - save the configuration ; : 447 | 654.211 352.003 0.0201333 0.00184653 43747.4 0; : 448 Minimum Test error found - save the configuration ; : 448 | 647.374 347.327 0.0201121 0.0018176 43729 0; : 449 Minimum Test error found - save the configuration ; : 449 | 641 344.618 0.0201064 0.00181317 43732 0; : 450 Minimum Test error found - save the configuration ; : 450 | 634.906 340.694 0.0201841 0.00185283 43641.2 0; : 451 Minimum Test error found - save the configuration ; : 451 | 628.321 336.668 0.0202054 0.00184722 43577.2 0; : 452 Minimum Test error found - save the configuration ; : 452 | 621.73 333.236 0.0201956 0.00184565 43596.7 0; : 453 Minimum Test error found - save the configuration ; : 453 | 615.499 330.282 0.0202258 0.00184415 43521.7 0; : 454 Minimum Test error found - save the configuration ; : 454 | 608.831 326.391 0.0201257 0.00180567 43668.1 0; : 455 Minimum Test error found - save the configuration ; : 455 | 602.478 323.085 0.0201467 0.00181706 43645.1 0; : 456 Minimum Test error found - save the configuration ; : 456 | 596.625 319.828 0.0201415 0.00181382 43649.8 0; : 457 Minimum Test error found - save the configuration ; : 457 | 590.662 316.621 0.0201112 0.00181253 43718.9 0; : 458 Minimum Test error found - save the configuration ; : 458 | 584.171 313.672 0.0201179 0.00180966 43696.3 0; : 459 Minimum Test error found - save the configuration ; : 459 | 578.684 310.243 0.020117 0.00181196 43703.7 0; : 460 Minimum Test error found - save the configuration ; : 460 | 572.668 306.849 0.0201178 0.00181375 43706.2 0; : 461 Minimum Test error found - save the configuration ; : 461 | 566.644 303.945 0.0201078 0.00181369 43730 0; : 462 Minimum Test error found - save the configuration ; : 462 | 560.843 301.023 0.0201248 0.00180535 43669.5 0; : 463 Minimum Test error found - save the configuration ; : 463 | 555.13 298.085 0.0201287 0.00181104 43673.6 0; : 464 Minim,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:62442,configurat,configuration,62442,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,uration ; : 447 | 654.211 352.003 0.0201333 0.00184653 43747.4 0; : 448 Minimum Test error found - save the configuration ; : 448 | 647.374 347.327 0.0201121 0.0018176 43729 0; : 449 Minimum Test error found - save the configuration ; : 449 | 641 344.618 0.0201064 0.00181317 43732 0; : 450 Minimum Test error found - save the configuration ; : 450 | 634.906 340.694 0.0201841 0.00185283 43641.2 0; : 451 Minimum Test error found - save the configuration ; : 451 | 628.321 336.668 0.0202054 0.00184722 43577.2 0; : 452 Minimum Test error found - save the configuration ; : 452 | 621.73 333.236 0.0201956 0.00184565 43596.7 0; : 453 Minimum Test error found - save the configuration ; : 453 | 615.499 330.282 0.0202258 0.00184415 43521.7 0; : 454 Minimum Test error found - save the configuration ; : 454 | 608.831 326.391 0.0201257 0.00180567 43668.1 0; : 455 Minimum Test error found - save the configuration ; : 455 | 602.478 323.085 0.0201467 0.00181706 43645.1 0; : 456 Minimum Test error found - save the configuration ; : 456 | 596.625 319.828 0.0201415 0.00181382 43649.8 0; : 457 Minimum Test error found - save the configuration ; : 457 | 590.662 316.621 0.0201112 0.00181253 43718.9 0; : 458 Minimum Test error found - save the configuration ; : 458 | 584.171 313.672 0.0201179 0.00180966 43696.3 0; : 459 Minimum Test error found - save the configuration ; : 459 | 578.684 310.243 0.020117 0.00181196 43703.7 0; : 460 Minimum Test error found - save the configuration ; : 460 | 572.668 306.849 0.0201178 0.00181375 43706.2 0; : 461 Minimum Test error found - save the configuration ; : 461 | 566.644 303.945 0.0201078 0.00181369 43730 0; : 462 Minimum Test error found - save the configuration ; : 462 | 560.843 301.023 0.0201248 0.00180535 43669.5 0; : 463 Minimum Test error found - save the configuration ; : 463 | 555.13 298.085 0.0201287 0.00181104 43673.6 0; : 464 Minimum Test error found - save the configuration ; : 464 | 549.755 294.833 0.0201145 0.00181462 43716.1 0; : 465 Minim,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:62556,configurat,configuration,62556,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,uration ; : 448 | 647.374 347.327 0.0201121 0.0018176 43729 0; : 449 Minimum Test error found - save the configuration ; : 449 | 641 344.618 0.0201064 0.00181317 43732 0; : 450 Minimum Test error found - save the configuration ; : 450 | 634.906 340.694 0.0201841 0.00185283 43641.2 0; : 451 Minimum Test error found - save the configuration ; : 451 | 628.321 336.668 0.0202054 0.00184722 43577.2 0; : 452 Minimum Test error found - save the configuration ; : 452 | 621.73 333.236 0.0201956 0.00184565 43596.7 0; : 453 Minimum Test error found - save the configuration ; : 453 | 615.499 330.282 0.0202258 0.00184415 43521.7 0; : 454 Minimum Test error found - save the configuration ; : 454 | 608.831 326.391 0.0201257 0.00180567 43668.1 0; : 455 Minimum Test error found - save the configuration ; : 455 | 602.478 323.085 0.0201467 0.00181706 43645.1 0; : 456 Minimum Test error found - save the configuration ; : 456 | 596.625 319.828 0.0201415 0.00181382 43649.8 0; : 457 Minimum Test error found - save the configuration ; : 457 | 590.662 316.621 0.0201112 0.00181253 43718.9 0; : 458 Minimum Test error found - save the configuration ; : 458 | 584.171 313.672 0.0201179 0.00180966 43696.3 0; : 459 Minimum Test error found - save the configuration ; : 459 | 578.684 310.243 0.020117 0.00181196 43703.7 0; : 460 Minimum Test error found - save the configuration ; : 460 | 572.668 306.849 0.0201178 0.00181375 43706.2 0; : 461 Minimum Test error found - save the configuration ; : 461 | 566.644 303.945 0.0201078 0.00181369 43730 0; : 462 Minimum Test error found - save the configuration ; : 462 | 560.843 301.023 0.0201248 0.00180535 43669.5 0; : 463 Minimum Test error found - save the configuration ; : 463 | 555.13 298.085 0.0201287 0.00181104 43673.6 0; : 464 Minimum Test error found - save the configuration ; : 464 | 549.755 294.833 0.0201145 0.00181462 43716.1 0; : 465 Minimum Test error found - save the configuration ; : 465 | 543.742 292.285 0.0201004 0.00181141 43742.2 0; : 466 Minim,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:62670,configurat,configuration,62670,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,uration ; : 463 | 555.13 298.085 0.0201287 0.00181104 43673.6 0; : 464 Minimum Test error found - save the configuration ; : 464 | 549.755 294.833 0.0201145 0.00181462 43716.1 0; : 465 Minimum Test error found - save the configuration ; : 465 | 543.742 292.285 0.0201004 0.00181141 43742.2 0; : 466 Minimum Test error found - save the configuration ; : 466 | 538.058 289.638 0.0201135 0.00181083 43709.6 0; : 467 Minimum Test error found - save the configuration ; : 467 | 532.551 286.201 0.0203237 0.00183254 43264 0; : 468 Minimum Test error found - save the configuration ; : 468 | 527.38 283.018 0.0206168 0.00187635 42688.4 0; : 469 Minimum Test error found - save the configuration ; : 469 | 521.821 280.136 0.020536 0.00184948 42811.7 0; : 470 Minimum Test error found - save the configuration ; : 470 | 516.179 277.682 0.0201344 0.00181863 43678.3 0; : 471 Minimum Test error found - save the configuration ; : 471 | 510.8 274.83 0.02012 0.00181888 43713.2 0; : 472 Minimum Test error found - save the configuration ; : 472 | 505.541 272.006 0.0201116 0.0018163 43727.1 0; : 473 Minimum Test error found - save the configuration ; : 473 | 500.494 269.395 0.0201254 0.00181777 43697.5 0; : 474 Minimum Test error found - save the configuration ; : 474 | 495.466 266.483 0.0201058 0.00181722 43743.1 0; : 475 Minimum Test error found - save the configuration ; : 475 | 490.186 263.742 0.0201189 0.00181234 43700.1 0; : 476 Minimum Test error found - save the configuration ; : 476 | 485.098 261.173 0.0201246 0.00180486 43668.7 0; : 477 Minimum Test error found - save the configuration ; : 477 | 480.019 258.868 0.0201244 0.00181187 43685.9 0; : 478 Minimum Test error found - save the configuration ; : 478 | 475.092 256.56 0.0201327 0.00181261 43667.9 0; : 479 Minimum Test error found - save the configuration ; : 479 | 470.459 253.447 0.0201134 0.00181351 43716.2 0; : 480 Minimum Test error found - save the configuration ; : 480 | 465.037 251.028 0.0201358 0.00183269 43708.4 0; : 481 Min,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:64367,configurat,configuration,64367,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,uration ; : 464 | 549.755 294.833 0.0201145 0.00181462 43716.1 0; : 465 Minimum Test error found - save the configuration ; : 465 | 543.742 292.285 0.0201004 0.00181141 43742.2 0; : 466 Minimum Test error found - save the configuration ; : 466 | 538.058 289.638 0.0201135 0.00181083 43709.6 0; : 467 Minimum Test error found - save the configuration ; : 467 | 532.551 286.201 0.0203237 0.00183254 43264 0; : 468 Minimum Test error found - save the configuration ; : 468 | 527.38 283.018 0.0206168 0.00187635 42688.4 0; : 469 Minimum Test error found - save the configuration ; : 469 | 521.821 280.136 0.020536 0.00184948 42811.7 0; : 470 Minimum Test error found - save the configuration ; : 470 | 516.179 277.682 0.0201344 0.00181863 43678.3 0; : 471 Minimum Test error found - save the configuration ; : 471 | 510.8 274.83 0.02012 0.00181888 43713.2 0; : 472 Minimum Test error found - save the configuration ; : 472 | 505.541 272.006 0.0201116 0.0018163 43727.1 0; : 473 Minimum Test error found - save the configuration ; : 473 | 500.494 269.395 0.0201254 0.00181777 43697.5 0; : 474 Minimum Test error found - save the configuration ; : 474 | 495.466 266.483 0.0201058 0.00181722 43743.1 0; : 475 Minimum Test error found - save the configuration ; : 475 | 490.186 263.742 0.0201189 0.00181234 43700.1 0; : 476 Minimum Test error found - save the configuration ; : 476 | 485.098 261.173 0.0201246 0.00180486 43668.7 0; : 477 Minimum Test error found - save the configuration ; : 477 | 480.019 258.868 0.0201244 0.00181187 43685.9 0; : 478 Minimum Test error found - save the configuration ; : 478 | 475.092 256.56 0.0201327 0.00181261 43667.9 0; : 479 Minimum Test error found - save the configuration ; : 479 | 470.459 253.447 0.0201134 0.00181351 43716.2 0; : 480 Minimum Test error found - save the configuration ; : 480 | 465.037 251.028 0.0201358 0.00183269 43708.4 0; : 481 Minimum Test error found - save the configuration ; : 481 | 460.485 248.77 0.0203198 0.00182444 43254.2 0; : 482 Min,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:64480,configurat,configuration,64480,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,uration ; : 465 | 543.742 292.285 0.0201004 0.00181141 43742.2 0; : 466 Minimum Test error found - save the configuration ; : 466 | 538.058 289.638 0.0201135 0.00181083 43709.6 0; : 467 Minimum Test error found - save the configuration ; : 467 | 532.551 286.201 0.0203237 0.00183254 43264 0; : 468 Minimum Test error found - save the configuration ; : 468 | 527.38 283.018 0.0206168 0.00187635 42688.4 0; : 469 Minimum Test error found - save the configuration ; : 469 | 521.821 280.136 0.020536 0.00184948 42811.7 0; : 470 Minimum Test error found - save the configuration ; : 470 | 516.179 277.682 0.0201344 0.00181863 43678.3 0; : 471 Minimum Test error found - save the configuration ; : 471 | 510.8 274.83 0.02012 0.00181888 43713.2 0; : 472 Minimum Test error found - save the configuration ; : 472 | 505.541 272.006 0.0201116 0.0018163 43727.1 0; : 473 Minimum Test error found - save the configuration ; : 473 | 500.494 269.395 0.0201254 0.00181777 43697.5 0; : 474 Minimum Test error found - save the configuration ; : 474 | 495.466 266.483 0.0201058 0.00181722 43743.1 0; : 475 Minimum Test error found - save the configuration ; : 475 | 490.186 263.742 0.0201189 0.00181234 43700.1 0; : 476 Minimum Test error found - save the configuration ; : 476 | 485.098 261.173 0.0201246 0.00180486 43668.7 0; : 477 Minimum Test error found - save the configuration ; : 477 | 480.019 258.868 0.0201244 0.00181187 43685.9 0; : 478 Minimum Test error found - save the configuration ; : 478 | 475.092 256.56 0.0201327 0.00181261 43667.9 0; : 479 Minimum Test error found - save the configuration ; : 479 | 470.459 253.447 0.0201134 0.00181351 43716.2 0; : 480 Minimum Test error found - save the configuration ; : 480 | 465.037 251.028 0.0201358 0.00183269 43708.4 0; : 481 Minimum Test error found - save the configuration ; : 481 | 460.485 248.77 0.0203198 0.00182444 43254.2 0; : 482 Minimum Test error found - save the configuration ; : 482 | 455.372 247.229 0.0201175 0.00180448 43684.8 0; : 483 Min,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:64594,configurat,configuration,64594,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,uration ; : 466 | 538.058 289.638 0.0201135 0.00181083 43709.6 0; : 467 Minimum Test error found - save the configuration ; : 467 | 532.551 286.201 0.0203237 0.00183254 43264 0; : 468 Minimum Test error found - save the configuration ; : 468 | 527.38 283.018 0.0206168 0.00187635 42688.4 0; : 469 Minimum Test error found - save the configuration ; : 469 | 521.821 280.136 0.020536 0.00184948 42811.7 0; : 470 Minimum Test error found - save the configuration ; : 470 | 516.179 277.682 0.0201344 0.00181863 43678.3 0; : 471 Minimum Test error found - save the configuration ; : 471 | 510.8 274.83 0.02012 0.00181888 43713.2 0; : 472 Minimum Test error found - save the configuration ; : 472 | 505.541 272.006 0.0201116 0.0018163 43727.1 0; : 473 Minimum Test error found - save the configuration ; : 473 | 500.494 269.395 0.0201254 0.00181777 43697.5 0; : 474 Minimum Test error found - save the configuration ; : 474 | 495.466 266.483 0.0201058 0.00181722 43743.1 0; : 475 Minimum Test error found - save the configuration ; : 475 | 490.186 263.742 0.0201189 0.00181234 43700.1 0; : 476 Minimum Test error found - save the configuration ; : 476 | 485.098 261.173 0.0201246 0.00180486 43668.7 0; : 477 Minimum Test error found - save the configuration ; : 477 | 480.019 258.868 0.0201244 0.00181187 43685.9 0; : 478 Minimum Test error found - save the configuration ; : 478 | 475.092 256.56 0.0201327 0.00181261 43667.9 0; : 479 Minimum Test error found - save the configuration ; : 479 | 470.459 253.447 0.0201134 0.00181351 43716.2 0; : 480 Minimum Test error found - save the configuration ; : 480 | 465.037 251.028 0.0201358 0.00183269 43708.4 0; : 481 Minimum Test error found - save the configuration ; : 481 | 460.485 248.77 0.0203198 0.00182444 43254.2 0; : 482 Minimum Test error found - save the configuration ; : 482 | 455.372 247.229 0.0201175 0.00180448 43684.8 0; : 483 Minimum Test error found - save the configuration ; : 483 | 451.061 243.731 0.0201278 0.0018159 43687.5 0; : 484 Mini,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:64708,configurat,configuration,64708,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,uration ; : 467 | 532.551 286.201 0.0203237 0.00183254 43264 0; : 468 Minimum Test error found - save the configuration ; : 468 | 527.38 283.018 0.0206168 0.00187635 42688.4 0; : 469 Minimum Test error found - save the configuration ; : 469 | 521.821 280.136 0.020536 0.00184948 42811.7 0; : 470 Minimum Test error found - save the configuration ; : 470 | 516.179 277.682 0.0201344 0.00181863 43678.3 0; : 471 Minimum Test error found - save the configuration ; : 471 | 510.8 274.83 0.02012 0.00181888 43713.2 0; : 472 Minimum Test error found - save the configuration ; : 472 | 505.541 272.006 0.0201116 0.0018163 43727.1 0; : 473 Minimum Test error found - save the configuration ; : 473 | 500.494 269.395 0.0201254 0.00181777 43697.5 0; : 474 Minimum Test error found - save the configuration ; : 474 | 495.466 266.483 0.0201058 0.00181722 43743.1 0; : 475 Minimum Test error found - save the configuration ; : 475 | 490.186 263.742 0.0201189 0.00181234 43700.1 0; : 476 Minimum Test error found - save the configuration ; : 476 | 485.098 261.173 0.0201246 0.00180486 43668.7 0; : 477 Minimum Test error found - save the configuration ; : 477 | 480.019 258.868 0.0201244 0.00181187 43685.9 0; : 478 Minimum Test error found - save the configuration ; : 478 | 475.092 256.56 0.0201327 0.00181261 43667.9 0; : 479 Minimum Test error found - save the configuration ; : 479 | 470.459 253.447 0.0201134 0.00181351 43716.2 0; : 480 Minimum Test error found - save the configuration ; : 480 | 465.037 251.028 0.0201358 0.00183269 43708.4 0; : 481 Minimum Test error found - save the configuration ; : 481 | 460.485 248.77 0.0203198 0.00182444 43254.2 0; : 482 Minimum Test error found - save the configuration ; : 482 | 455.372 247.229 0.0201175 0.00180448 43684.8 0; : 483 Minimum Test error found - save the configuration ; : 483 | 451.061 243.731 0.0201278 0.0018159 43687.5 0; : 484 Minimum Test error found - save the configuration ; : 484 | 445.909 241.583 0.0201078 0.00181153 43724.8 0; : 485 Mini,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:64822,configurat,configuration,64822,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,uration ; : 485 | 441.645 238.817 0.0201252 0.00182817 43723 0; : 486 Minimum Test error found - save the configuration ; : 486 | 436.721 236.872 0.0201168 0.00181086 43701.6 0; : 487 Minimum Test error found - save the configuration ; : 487 | 432.036 234.838 0.0201083 0.00181291 43726.9 0; : 488 Minimum Test error found - save the configuration ; : 488 | 427.772 232.082 0.0201422 0.00181171 43643.2 0; : 489 Minimum Test error found - save the configuration ; : 489 | 423.017 229.997 0.0203149 0.00183693 43294.7 0; : 490 Minimum Test error found - save the configuration ; : 490 | 419.119 227.561 0.0201444 0.00181942 43656.3 0; : 491 Minimum Test error found - save the configuration ; : 491 | 414.431 225.611 0.0201416 0.00181918 43662.3 0; : 492 Minimum Test error found - save the configuration ; : 492 | 409.916 223.444 0.0201215 0.00181755 43706.4 0; : 493 Minimum Test error found - save the configuration ; : 493 | 405.856 221.079 0.0201212 0.00183714 43754 0; : 494 Minimum Test error found - save the configuration ; : 494 | 401.45 219.099 0.0201193 0.00182499 43729.5 0; : 495 Minimum Test error found - save the configuration ; : 495 | 397.399 217.296 0.020126 0.00182371 43710.3 0; : 496 Minimum Test error found - save the configuration ; : 496 | 393.093 215.198 0.0201176 0.0018173 43715.1 0; : 497 Minimum Test error found - save the configuration ; : 497 | 389.026 212.813 0.0201623 0.00182183 43619.4 0; : 498 Minimum Test error found - save the configuration ; : 498 | 384.957 210.725 0.0201097 0.00181178 43720.7 0; : 499 Minimum Test error found - save the configuration ; : 499 | 380.678 208.901 0.0201236 0.00180512 43671.8 0; : 500 Minimum Test error found - save the configuration ; : 500 | 376.893 206.954 0.0201138 0.00180496 43694.8 0; : 501 Minimum Test error found - save the configuration ; : 501 | 373.069 204.754 0.020131 0.0018136 43674.2 0; : 502 Minimum Test error found - save the configuration ; : 502 | 368.81 202.934 0.0201114 0.00181117 43715.3 0; : 503 ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:66867,configurat,configuration,66867,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,uration ; : 556 | 205.232 121.223 0.0203039 0.0018145 43268 0; : 557 Minimum Test error found - save the configuration ; : 557 | 202.969 119.762 0.0201211 0.00181089 43691.5 0; : 558 Minimum Test error found - save the configuration ; : 558 | 200.33 118.775 0.0201089 0.0018057 43708.3 0; : 559 Minimum Test error found - save the configuration ; : 559 | 197.988 117.386 0.0202964 0.00181486 43286.3 0; : 560 Minimum Test error found - save the configuration ; : 560 | 195.761 116.51 0.020118 0.00181561 43710.2 0; : 561 Minimum Test error found - save the configuration ; : 561 | 193.461 115.526 0.0203798 0.00182877 43124.4 0; : 562 Minimum Test error found - save the configuration ; : 562 | 191.212 113.975 0.0203924 0.00182053 43075.9 0; : 563 Minimum Test error found - save the configuration ; : 563 | 188.987 113.393 0.0203794 0.00207901 43715 0; : 564 Minimum Test error found - save the configuration ; : 564 | 186.85 112.339 0.0201831 0.00181479 43553.4 0; : 565 Minimum Test error found - save the configuration ; : 565 | 185.071 111.259 0.0203048 0.00182605 43292.9 0; : 566 Minimum Test error found - save the configuration ; : 566 | 182.616 110.112 0.0201778 0.00183613 43616.5 0; : 567 Minimum Test error found - save the configuration ; : 567 | 180.473 109.26 0.0202561 0.00182678 43409.1 0; : 568 Minimum Test error found - save the configuration ; : 568 | 178.451 108.059 0.0201373 0.00182611 43689.1 0; : 569 Minimum Test error found - save the configuration ; : 569 | 176.264 106.78 0.0201111 0.00181323 43721.1 0; : 570 Minimum Test error found - save the configuration ; : 570 | 174.355 105.885 0.0201445 0.00181905 43655.2 0; : 571 | 172.647 106.784 0.0200848 0.0017791 43702.2 1; : 572 Minimum Test error found - save the configuration ; : 572 | 170.589 104.683 0.020165 0.00182763 43626.8 0; : 573 Minimum Test error found - save the configuration ; : 573 | 168.468 102.528 0.0201413 0.00182619 43679.9 0; : 574 Minimum Test error found - save the configuration ; : 574 | 166,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:74916,configurat,configuration,74916,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,uration ; : 592 | 133.776 84.7442 0.0201242 0.00181719 43699.2 0; : 593 Minimum Test error found - save the configuration ; : 593 | 132.08 84.4617 0.0201178 0.00181703 43714.1 0; : 594 Minimum Test error found - save the configuration ; : 594 | 130.385 83.3494 0.0201184 0.00182079 43721.6 0; : 595 Minimum Test error found - save the configuration ; : 595 | 128.821 82.7241 0.0201197 0.00182054 43718 0; : 596 Minimum Test error found - save the configuration ; : 596 | 127.285 81.8772 0.0201421 0.00182102 43665.5 0; : 597 Minimum Test error found - save the configuration ; : 597 | 125.567 80.7585 0.0201182 0.00182506 43732.1 0; : 598 Minimum Test error found - save the configuration ; : 598 | 124.213 80.6209 0.0201133 0.0018121 43713 0; : 599 Minimum Test error found - save the configuration ; : 599 | 122.94 79.487 0.0201252 0.00180702 43672.5 0; : 600 Minimum Test error found - save the configuration ; : 600 | 121.268 78.716 0.0201262 0.0018137 43686.1 0; : 601 Minimum Test error found - save the configuration ; : 601 | 119.733 78.5666 0.0201064 0.00181556 43737.8 0; : 602 Minimum Test error found - save the configuration ; : 602 | 118.293 77.4143 0.0201212 0.00181376 43698 0; : 603 Minimum Test error found - save the configuration ; : 603 | 116.739 75.9525 0.0201101 0.00180951 43714.3 0; : 604 Minimum Test error found - save the configuration ; : 604 | 115.282 75.4842 0.0201093 0.00181811 43737 0; : 605 Minimum Test error found - save the configuration ; : 605 | 113.756 74.5415 0.0201179 0.00181105 43699.5 0; : 606 Minimum Test error found - save the configuration ; : 606 | 112.65 73.8117 0.0200987 0.00180944 43741.5 0; : 607 Minimum Test error found - save the configuration ; : 607 | 110.993 73.1273 0.0200934 0.00180455 43742.6 0; : 608 Minimum Test error found - save the configuration ; : 608 | 109.653 72.3206 0.0201066 0.00180567 43713.6 0; : 609 Minimum Test error found - save the configuration ; : 609 | 108.357 71.632 0.0200983 0.00180999 43743.9 0; : 610 Minimum,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:78936,configurat,configuration,78936,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,uration ; : 593 | 132.08 84.4617 0.0201178 0.00181703 43714.1 0; : 594 Minimum Test error found - save the configuration ; : 594 | 130.385 83.3494 0.0201184 0.00182079 43721.6 0; : 595 Minimum Test error found - save the configuration ; : 595 | 128.821 82.7241 0.0201197 0.00182054 43718 0; : 596 Minimum Test error found - save the configuration ; : 596 | 127.285 81.8772 0.0201421 0.00182102 43665.5 0; : 597 Minimum Test error found - save the configuration ; : 597 | 125.567 80.7585 0.0201182 0.00182506 43732.1 0; : 598 Minimum Test error found - save the configuration ; : 598 | 124.213 80.6209 0.0201133 0.0018121 43713 0; : 599 Minimum Test error found - save the configuration ; : 599 | 122.94 79.487 0.0201252 0.00180702 43672.5 0; : 600 Minimum Test error found - save the configuration ; : 600 | 121.268 78.716 0.0201262 0.0018137 43686.1 0; : 601 Minimum Test error found - save the configuration ; : 601 | 119.733 78.5666 0.0201064 0.00181556 43737.8 0; : 602 Minimum Test error found - save the configuration ; : 602 | 118.293 77.4143 0.0201212 0.00181376 43698 0; : 603 Minimum Test error found - save the configuration ; : 603 | 116.739 75.9525 0.0201101 0.00180951 43714.3 0; : 604 Minimum Test error found - save the configuration ; : 604 | 115.282 75.4842 0.0201093 0.00181811 43737 0; : 605 Minimum Test error found - save the configuration ; : 605 | 113.756 74.5415 0.0201179 0.00181105 43699.5 0; : 606 Minimum Test error found - save the configuration ; : 606 | 112.65 73.8117 0.0200987 0.00180944 43741.5 0; : 607 Minimum Test error found - save the configuration ; : 607 | 110.993 73.1273 0.0200934 0.00180455 43742.6 0; : 608 Minimum Test error found - save the configuration ; : 608 | 109.653 72.3206 0.0201066 0.00180567 43713.6 0; : 609 Minimum Test error found - save the configuration ; : 609 | 108.357 71.632 0.0200983 0.00180999 43743.9 0; : 610 Minimum Test error found - save the configuration ; : 610 | 106.875 70.7773 0.0201154 0.00182046 43728 0; : 611 | 105.742,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:79050,configurat,configuration,79050,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,uration ; : 618 | 96.3739 65.107 0.0201565 0.0018204 43629.8 0; : 619 Minimum Test error found - save the configuration ; : 619 | 95.4431 64.9258 0.0202106 0.00183339 43532.2 0; : 620 Minimum Test error found - save the configuration ; : 620 | 94.1902 64.0162 0.020412 0.0018551 43110.6 0; : 621 Minimum Test error found - save the configuration ; : 621 | 92.9103 63.3038 0.0201905 0.00182603 43562.4 0; : 622 Minimum Test error found - save the configuration ; : 622 | 91.6075 63.2578 0.0201995 0.00184553 43587.4 0; : 623 Minimum Test error found - save the configuration ; : 623 | 90.7693 62.0703 0.0202228 0.00181118 43450.9 0; : 624 Minimum Test error found - save the configuration ; : 624 | 89.2125 61.1087 0.0202046 0.00181706 43507.7 0; : 625 | 88.1287 61.343 0.0200847 0.00175821 43652.7 1; : 626 Minimum Test error found - save the configuration ; : 626 | 87.0203 60.0927 0.0202246 0.00182742 43485 0; : 627 | 86.1022 60.6165 0.020286 0.00178227 43234.5 1; : 628 Minimum Test error found - save the configuration ; : 628 | 84.7933 59.0719 0.0201769 0.00183209 43609.1 0; : 629 Minimum Test error found - save the configuration ; : 629 | 83.7285 58.2513 0.0204361 0.0018731 43096.5 0; : 630 Minimum Test error found - save the configuration ; : 630 | 82.639 58.0942 0.0203377 0.00185077 43273.9 0; : 631 Minimum Test error found - save the configuration ; : 631 | 81.6101 57.1049 0.0203504 0.00184845 43238.6 0; : 632 | 80.6827 57.1221 0.0201225 0.00176999 43590.8 1; : 633 Minimum Test error found - save the configuration ; : 633 | 79.5527 56.2669 0.0201884 0.00185082 43626.2 0; : 634 Minimum Test error found - save the configuration ; : 634 | 78.6493 55.4759 0.0202109 0.00182609 43514.1 0; : 635 Minimum Test error found - save the configuration ; : 635 | 77.3887 55.223 0.020166 0.00184577 43667.6 0; : 636 Minimum Test error found - save the configuration ; : 636 | 76.4488 55.0573 0.020202 0.00188181 43667.6 0; : 637 Minimum Test error found - save the configuration ; : 637 | 75.,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:81820,configurat,configuration,81820,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,uration ; : 675 | 45.6663 37.2199 0.020138 0.00182969 43696.1 0; : 676 Minimum Test error found - save the configuration ; : 676 | 44.8146 36.9047 0.0201419 0.00182761 43681.7 0; : 677 | 44.1854 37.155 0.0200983 0.0017637 43633.4 1; : 678 Minimum Test error found - save the configuration ; : 678 | 43.7163 36.54 0.0202108 0.00183597 43537.9 0; : 679 Minimum Test error found - save the configuration ; : 679 | 43.1003 36.3421 0.0201203 0.00181258 43697.4 0; : 680 Minimum Test error found - save the configuration ; : 680 | 42.8206 35.8087 0.0201316 0.00181818 43683.7 0; : 681 Minimum Test error found - save the configuration ; : 681 | 42.0593 35.186 0.0205402 0.00185408 42812.5 0; : 682 Minimum Test error found - save the configuration ; : 682 | 41.3592 34.9319 0.0201181 0.00182063 43721.9 0; : 683 | 40.8775 34.9951 0.020058 0.00175108 43699.3 1; : 684 Minimum Test error found - save the configuration ; : 684 | 40.654 34.3931 0.0201589 0.00183818 43666.4 0; : 685 Minimum Test error found - save the configuration ; : 685 | 40.0613 33.8904 0.0201577 0.00183348 43658.1 0; : 686 | 39.3281 34.3645 0.0200576 0.00176772 43739.9 1; : 687 | 38.8187 34.1117 0.0201676 0.00177122 43486.9 2; : 688 Minimum Test error found - save the configuration ; : 688 | 38.3466 33.422 0.0201552 0.00185044 43704.5 0; : 689 Minimum Test error found - save the configuration ; : 689 | 37.998 33.2339 0.0201139 0.00182328 43738.2 0; : 690 Minimum Test error found - save the configuration ; : 690 | 37.3126 32.8977 0.0200976 0.0018112 43748.3 0; : 691 Minimum Test error found - save the configuration ; : 691 | 36.956 32.4497 0.0202163 0.00185879 43578.8 0; : 692 | 36.3494 32.5119 0.0203375 0.00178876 43129.6 1; : 693 Minimum Test error found - save the configuration ; : 693 | 35.9446 31.7942 0.0202985 0.00181447 43280.7 0; : 694 | 35.3125 31.8389 0.0201438 0.00175333 43500.7 1; : 695 Minimum Test error found - save the configuration ; : 695 | 34.8867 31.3734 0.0201347 0.00182018 43681.2 0; : 696 Minimum ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:87881,configurat,configuration,87881,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,uration ; : 682 | 41.3592 34.9319 0.0201181 0.00182063 43721.9 0; : 683 | 40.8775 34.9951 0.020058 0.00175108 43699.3 1; : 684 Minimum Test error found - save the configuration ; : 684 | 40.654 34.3931 0.0201589 0.00183818 43666.4 0; : 685 Minimum Test error found - save the configuration ; : 685 | 40.0613 33.8904 0.0201577 0.00183348 43658.1 0; : 686 | 39.3281 34.3645 0.0200576 0.00176772 43739.9 1; : 687 | 38.8187 34.1117 0.0201676 0.00177122 43486.9 2; : 688 Minimum Test error found - save the configuration ; : 688 | 38.3466 33.422 0.0201552 0.00185044 43704.5 0; : 689 Minimum Test error found - save the configuration ; : 689 | 37.998 33.2339 0.0201139 0.00182328 43738.2 0; : 690 Minimum Test error found - save the configuration ; : 690 | 37.3126 32.8977 0.0200976 0.0018112 43748.3 0; : 691 Minimum Test error found - save the configuration ; : 691 | 36.956 32.4497 0.0202163 0.00185879 43578.8 0; : 692 | 36.3494 32.5119 0.0203375 0.00178876 43129.6 1; : 693 Minimum Test error found - save the configuration ; : 693 | 35.9446 31.7942 0.0202985 0.00181447 43280.7 0; : 694 | 35.3125 31.8389 0.0201438 0.00175333 43500.7 1; : 695 Minimum Test error found - save the configuration ; : 695 | 34.8867 31.3734 0.0201347 0.00182018 43681.2 0; : 696 Minimum Test error found - save the configuration ; : 696 | 34.4357 31.1348 0.0201081 0.00181563 43733.9 0; : 697 Minimum Test error found - save the configuration ; : 697 | 34.0416 30.9812 0.0205543 0.00184744 42765.1 0; : 698 Minimum Test error found - save the configuration ; : 698 | 33.7716 30.3897 0.0201321 0.00181458 43673.9 0; : 699 | 33.1269 30.7769 0.0201928 0.00175872 43397.8 1; : 700 Minimum Test error found - save the configuration ; : 700 | 32.8076 30.1388 0.0201025 0.00181993 43757.5 0; : 701 | 32.6014 30.2991 0.0200398 0.0017563 43755.4 1; : 702 | 32.0925 30.8793 0.0200419 0.00175584 43749.1 2; : 703 Minimum Test error found - save the configuration ; : 703 | 31.9128 29.3224 0.0202722 0.00182152 43358.7 0; : 704 Minim,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:88615,configurat,configuration,88615,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,uration ; : 98 | 13782 12723.6 0.020062 0.00182418 43864.8 0; : 99 Minimum Test error found - save the configuration ; : 99 | 13666.4 12611.1 0.0200618 0.00180714 43824.4 0; : 100 Minimum Test error found - save the configuration ; : 100 | 13550.9 12502.3 0.0200464 0.00180511 43856.6 0; : 101 Minimum Test error found - save the configuration ; : 101 | 13439.7 12392 0.0201571 0.00185957 43721.7 0; : 102 Minimum Test error found - save the configuration ; : 102 | 13328.8 12281.3 0.0202143 0.00181888 43489.1 0; : 103 Minimum Test error found - save the configuration ; : 103 | 13217 12173.3 0.0200026 0.0018059 43964.1 0; : 104 Minimum Test error found - save the configuration ; : 104 | 13107.7 12065.4 0.0200115 0.00180466 43939.6 0; : 105 Minimum Test error found - save the configuration ; : 105 | 12997.9 11959.7 0.0201517 0.00183944 43686.6 0; : 106 Minimum Test error found - save the configuration ; : 106 | 12890.1 11854.8 0.0204012 0.00181637 43045.8 0; : 107 Minimum Test error found - save the configuration ; : 107 | 12783.3 11750.6 0.0200273 0.00179591 43880.4 0; : 108 Minimum Test error found - save the configuration ; : 108 | 12679.4 11643.6 0.0200105 0.00179336 43914.7 0; : 109 Minimum Test error found - save the configuration ; : 109 | 12570.9 11543.2 0.0200071 0.00179343 43923.1 0; : 110 Minimum Test error found - save the configuration ; : 110 | 12468 11440.7 0.0200047 0.00179413 43930.5 0; : 111 Minimum Test error found - save the configuration ; : 111 | 12365.7 11337.8 0.0200081 0.00179319 43920.1 0; : 112 Minimum Test error found - save the configuration ; : 112 | 12261.9 11237.7 0.02002 0.00179362 43892.3 0; : 113 Minimum Test error found - save the configuration ; : 113 | 12160 11139.2 0.0201211 0.00180176 43669.7 0; : 114 Minimum Test error found - save the configuration ; : 114 | 12060.2 11039.6 0.020348 0.00184935 43246.4 0; : 115 Minimum Test error found - save the configuration ; : 115 | 11961.2 10939.8 0.0202696 0.00181495 43349.5 0; : 116 Minimum T,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:23030,configurat,configuration,23030,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,"uration in verbose, which also shows inactive streams; cout << endl;; RooMsgService::instance().Print();; cout << endl;; ; // Remove stream; RooMsgService::instance().getStream(1).removeTopic(Integration);; ; // E x a m p l e s o f p d f v a l u e t r a c i n g s t r e a m; // -----------------------------------------------------------------------; ; // Show DEBUG level message on function tracing, trace RooGaussian only; RooMsgService::instance().addStream(DEBUG, Topic(Tracing), ClassName(""RooGaussian""));; ; // Perform a fit to generate some tracing messages; model.fitTo(*data, Verbose(true));; ; // Reset message service to default stream configuration; RooMsgService::instance().reset();; ; // Show DEBUG level message on function tracing on all objects, redirect output to file; RooMsgService::instance().addStream(DEBUG, Topic(Tracing), OutputFile(""rf506_debug.log""));; ; // Perform a fit to generate some tracing messages; model.fitTo(*data, Verbose(true));; ; // Reset message service to default stream configuration; RooMsgService::instance().reset();; ; // E x a m p l e o f a n o t h e r d e b u g g i n g s t r e a m; // ---------------------------------------------------------------------; ; // Show DEBUG level messages on client/server link state management; RooMsgService::instance().addStream(DEBUG, Topic(LinkStateMgmt));; RooMsgService::instance().Print(""v"");; ; // Clone composite pdf g to trigger some link state management activity; RooAbsArg *gprime = gauss.cloneTree();; gprime->Print();; ; // Reset message service to default stream configuration; RooMsgService::instance().reset();; }; DEBUG#define DEBUGDefinition Polynomial.cxx:40; f#define f(i)Definition RSha256.hxx:104; RooAddPdf.h; RooDataSet.h; RooGaussian.h; RooMsgService.h; RooPlot.h; RooPolynomial.h; RooRealVar.h; TAxis.h; TCanvas.h; dataOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void dataDefini",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf506__msgservice_8C.html:2965,configurat,configuration,2965,doc/master/rf506__msgservice_8C.html,https://root.cern,https://root.cern/doc/master/rf506__msgservice_8C.html,1,['configurat'],['configuration']
Deployability,"urceObject(TObject* o); virtual voidTEvePointSet::SetTitle(const char* t); virtual voidTEveElement::SetTransMatrix(Double_t* carr); virtual voidTEveElement::SetTransMatrix(const TGeoMatrix& mat); virtual voidTObject::SetUniqueID(UInt_t uid); voidTEveElement::SetUserData(void* ud); voidTEveElement::SetVizModel(TEveElement* model); voidTEveElement::SetVizTag(const TString& tag); virtual voidShowMembers(TMemberInspector& insp) const; virtual Bool_tTEveElement::SingleRnrState() const; virtual Int_tTPolyMarker3D::Size() const; virtual voidTAtt3D::Sizeof3D() const; voidTEveElement::SpawnEditor()MENU ; voidTEveElement::StampColorSelection(); voidTEveElement::StampObjProps(); voidTEveElement::StampTransBBox(); voidTEveElement::StampVisibility(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; virtual voidTEvePointSet::TakeAction(TEvePointSelector*); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; Bool_tTEveElement::TestCSCBits(UChar_t f) const; TEveLine(Int_t n_points = 0, TEvePointSelectorConsumer::ETreeVarType_e tv_type = kTVT_XYZ); TEveLine(const char* name, Int_t n_points = 0, TEvePointSelectorConsumer::ETreeVarType_e tv_type = kTVT_XYZ); virtual voidTEveElement::UnHighlighted(); virtual voidTEveElement::UnSelected(); virtual voidTObject::UseCurrentStyle(); voidTEveElement::VizDB_Apply(const char* tag)MENU ; voidTEveElement::VizDB_Insert(const char* tag, Bool_t replace = kTRUE, Bool_t update = kTRUE)MENU ; voidTEveElement::VizDB_Reapply()MENU ; voidTEveElement::VizDB_UpdateModel(Bool_t update = kTRUE)MENU ; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidWriteVizParams(ostream& out, const TString& var).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEveLine.html:22116,update,update,22116,root/html602/TEveLine.html,https://root.cern,https://root.cern/root/html602/TEveLine.html,4,['update'],['update']
Deployability,"urceObject(TObject* o); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTEveElement::SetTransMatrix(Double_t* carr); virtual voidTEveElement::SetTransMatrix(const TGeoMatrix& mat); virtual voidTObject::SetUniqueID(UInt_t uid); voidTEveElement::SetUserData(void* ud); voidSetVertical(Bool_t x = kTRUE); voidTEveElement::SetVizModel(TEveElement* model); voidTEveElement::SetVizTag(const TString& tag); virtual voidShowMembers(TMemberInspector& insp); virtual Bool_tTEveElement::SingleRnrState() const; virtual Int_tTNamed::Sizeof() const; voidTEveElement::SpawnEditor()MENU ; voidTEveElement::StampColorSelection(); voidTEveElement::StampObjProps(); voidTEveElement::StampTransBBox(); voidTEveElement::StampVisibility(); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); voidTEveWindow::SwapWindow(TEveWindow* w); static voidTEveWindow::SwapWindows(TEveWindow* w1, TEveWindow* w2); voidTEveWindow::SwapWindowWithCurrent()MENU ; virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; Bool_tTEveElement::TestCSCBits(UChar_t f) const; voidTEveWindow::TitleBarClicked(); voidTEveWindow::UndockWindow()MENU ; voidTEveWindow::UndockWindowDestroySlot()MENU ; virtual voidTEveElement::UnHighlighted(); virtual voidTEveElement::UnSelected(); virtual voidTObject::UseCurrentStyle(); voidTEveElement::VizDB_Apply(const char* tag)MENU ; voidTEveElement::VizDB_Insert(const char* tag, Bool_t replace = kTRUE, Bool_t update = kTRUE)MENU ; voidTEveElement::VizDB_Reapply()MENU ; voidTEveElement::VizDB_UpdateModel(Bool_t update = kTRUE)MENU ; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTEveElement::WriteVizParams(ostream& out, const TString& var).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveWindowPack.html:17287,update,update,17287,root/html528/TEveWindowPack.html,https://root.cern,https://root.cern/root/html528/TEveWindowPack.html,6,['update'],['update']
Deployability,"urn createTreeReadBuffer<UInt_t >(cleanName, t); }}},; 3060 {""Long64_t"", {""LONG_TREE_BRANCH"", [&](){ return createTreeReadBuffer<Long64_t >(cleanName, t); }}},; 3061 {""ULong64_t"", {""UNSIGNED_LONG_TREE_BRANCH"", [&](){ return createTreeReadBuffer<ULong64_t>(cleanName, t); }}},; 3062 {""Short_t"", {""SHORT_TREE_BRANCH"", [&](){ return createTreeReadBuffer<Short_t >(cleanName, t); }}},; 3063 {""UShort_t"", {""UNSIGNED_SHORT_TREE_BRANCH"", [&](){ return createTreeReadBuffer<UShort_t >(cleanName, t); }}},; 3064 };; 3065 ; 3066 auto typeDetails = typeMap.find(typeName.Data());; 3067 if (typeDetails != typeMap.end()) {; 3068 coutI(DataHandling) << ""RooAbsReal::attachToTree("" << GetName() << "") TTree "" << typeDetails->first << "" branch "" << GetName(); 3069 << "" will be converted to double precision."" << std::endl ;; 3070 setAttribute(typeDetails->second.first.c_str(), true);; 3071 _treeReadBuffer = typeDetails->second.second().release();; 3072 } else {; 3073 if (_treeReadBuffer) {; 3074 delete _treeReadBuffer;; 3075 }; 3076 _treeReadBuffer = nullptr;; 3077 ; 3078 if (!typeName.CompareTo(""Double_t"")) {; 3079 t.SetBranchAddress(cleanName, &_value);; 3080 }; 3081 else {; 3082 coutE(InputArguments) << ""RooAbsReal::attachToTree("" << GetName() << "") data type "" << typeName << "" is not supported."" << std::endl ;; 3083 }; 3084 }; 3085 } else {; 3086 ; 3087 TString format(cleanName);; 3088 format.Append(""/D"");; 3089 branch = t.Branch(cleanName, &_value, (const Text_t*)format, bufSize);; 3090 }; 3091 ; 3092}; 3093 ; 3094 ; 3095 ; 3096////////////////////////////////////////////////////////////////////////////////; 3097/// Fill the tree branch that associated with this object with its current value; 3098 ; 3099void RooAbsReal::fillTreeBranch(TTree& t); 3100{; 3101 // First determine if branch is taken; 3102 TBranch* branch = t.GetBranch(cleanBranchName()) ;; 3103 if (!branch) {; 3104 coutE(Eval) << ""RooAbsReal::fillTreeBranch("" << GetName() << "") ERROR: not attached to tree: "" << cleanBranchNam",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsReal_8cxx_source.html:134039,release,release,134039,doc/master/RooAbsReal_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html,1,['release'],['release']
Deployability,"urn fCont[GetAbsLast()];; 514}; 515 ; 516////////////////////////////////////////////////////////////////////////////////; 517/// Return the number of objects in array (i.e. number of non-empty slots).; 518/// Attention: use this method ONLY if you want to know the number of; 519/// non-empty slots. This function loops over the complete array and; 520/// is therefore very slow when applied in a loop. Most of the time you; 521/// better use GetEntriesFast() (only in case when there are no empty slots).; 522 ; 523Int_t TObjArray::GetEntries() const; 524{; 525 Int_t cnt = 0;; 526 ; 527 R__COLLECTION_READ_LOCKGUARD(ROOT::gCoreMutex);; 528 ; 529 for (Int_t i = 0; i < fSize; i++); 530 if (fCont[i]) cnt++;; 531 ; 532 return cnt;; 533}; 534 ; 535////////////////////////////////////////////////////////////////////////////////; 536/// Return absolute index to last object in array. Returns -1 in case; 537/// array is empty.; 538 ; 539Int_t TObjArray::GetAbsLast() const; 540{; 541 // For efficiency we need sometimes to update fLast so we have; 542 // to cast const away. Ugly, but making GetAbsLast() not const breaks; 543 // many other const functions.; 544 ; 545 R__COLLECTION_READ_LOCKGUARD(ROOT::gCoreMutex);; 546 ; 547 if (fLast == -2) {; 548 for (Int_t i = fSize-1; i >= 0; i--); 549 if (fCont[i]) {; 550 R__COLLECTION_WRITE_LOCKGUARD(ROOT::gCoreMutex);; 551 ((TObjArray*)this)->fLast = i;; 552 return fLast;; 553 }; 554 R__COLLECTION_WRITE_LOCKGUARD(ROOT::gCoreMutex);; 555 ((TObjArray*)this)->fLast = -1;; 556 }; 557 return fLast;; 558}; 559 ; 560////////////////////////////////////////////////////////////////////////////////; 561/// Return the number of objects in array (i.e. number of non-empty slots).; 562/// This is a thread-unsafe version of GetEntriesFast. Use it only if sure; 563/// it will not be invoked concurrently.; 564 ; 565Int_t TObjArray::GetEntriesUnsafe() const; 566{; 567 if (R__unlikely(fLast == -2)); 568 return GetEntriesFast();; 569 else; 570 return fLast + 1;;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TObjArray_8cxx_source.html:17688,update,update,17688,doc/master/TObjArray_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TObjArray_8cxx_source.html,1,['update'],['update']
Deployability,"urn the number of expected events of the PDF associated with the current index category state. ;  ; ExtendMode extendMode () const override;  Examine the pdf components and check if one of them can be extended or must be extended. ;  ; virtual RooDataHist * fillDataHist (RooDataHist *hist, const RooArgSet *nset, double scaleFactor, bool correctForBinVolume=false, bool showProgress=false) const;  ; bool forceAnalyticalInt (const RooAbsArg &) const override;  ; RooAbsGenContext * genContext (const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool verbose=false) const override;  Return specialized generator context for simultaneous p.d.f.s. ;  ; RooFit::OwningPtr< RooDataSet > generateSimGlobal (const RooArgSet &whatVars, Int_t nEvents) override;  Special generator interface for generation of 'global observables' – for RooStats tools. ;  ; Int_t getAnalyticalIntegralWN (RooArgSet &allVars, RooArgSet &numVars, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Forward determination of analytical integration capabilities to component p.d.f.s A unique code is assigned to the combined integration capabilities of all associated p.d.f.s. ;  ; RooAbsPdf * getPdf (RooStringView catName) const;  Return the p.d.f associated with the given index category name. ;  ; const RooAbsCategoryLValue & indexCat () const;  ; TClass * IsA () const override;  ; RooPlot * plotOn (RooPlot *frame, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}, const RooCmdArg &arg9={}, const RooCmdArg &arg10={}) const override;  ; RooPlot * plotOn (RooPlot *frame, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}, const RooCmdArg &arg9={",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooSimultaneous.html:5385,integrat,integration,5385,doc/master/classRooSimultaneous.html,https://root.cern,https://root.cern/doc/master/classRooSimultaneous.html,1,['integrat'],['integration']
Deployability,"urned by the method is true:; ==> there is one real root a and 2 complex conjugates roots (b+i*c,b-i*c); Author: Francois-Xavier Gentit. void Quantiles(Int_t n, Int_t nprob, Double_t* x, Double_t* quantiles, Double_t* prob, Bool_t isSorted = kTRUE, Int_t* index = 0, Int_t type = 7); Computes sample quantiles, corresponding to the given probabilities; Parameters:; x -the data sample; n - its size; quantiles - computed quantiles are returned in there; prob - probabilities where to compute quantiles; nprob - size of prob array; isSorted - is the input array x sorted?; NOTE, that when the input is not sorted, an array of integers of size n needs; to be allocated. It can be passed by the user in parameter index,; or, if not passed, it will be allocated inside the function. type - method to compute (from 1 to 9). Following types are provided:; Discontinuous:; type=1 - inverse of the empirical distribution function; type=2 - like type 1, but with averaging at discontinuities; type=3 - SAS definition: nearest even order statistic; Piecwise linear continuous:; In this case, sample quantiles can be obtained by linear interpolation; between the k-th order statistic and p(k).; type=4 - linear interpolation of empirical cdf, p(k)=k/n;; type=5 - a very popular definition, p(k) = (k-0.5)/n;; type=6 - used by Minitab and SPSS, p(k) = k/(n+1);; type=7 - used by S-Plus and R, p(k) = (k-1)/(n-1);; type=8 - resulting sample quantiles are approximately median unbiased; regardless of the distribution of x. p(k) = (k-1/3)/(n+1/3);; type=9 - resulting sample quantiles are approximately unbiased, when; the sample comes from Normal distribution. p(k)=(k-3/8)/(n+1/4);. default type = 7. References:; 1) Hyndman, R.J and Fan, Y, (1996) ""Sample quantiles in statistical packages""; American Statistician, 50, 361-365; 2) R Project documentation for the function quantile of package {stats}. void BubbleHigh(Int_t Narr, Double_t* arr1, Int_t* arr2); Bubble sort variant to obtain the order of an array'",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMath.html:22803,continuous,continuous,22803,root/html528/TMath.html,https://root.cern,https://root.cern/root/html528/TMath.html,6,['continuous'],['continuous']
Deployability,"urrences ""$!%^&()'<>?= "" from a string and replace all ::,$,*,/,+,- with M,S,T,D,P,M respectively ; Definition at line 798 of file Tools.cxx. ◆ RMS() [1/2]. template<typename Iterator , typename WeightIterator > . Double_t TMVA::Tools::RMS ; (; Iterator ; first, . Iterator ; last, . WeightIterator ; w . ). Return the Standard Deviation of an array defined by the iterators. ; Note that this function returns the sigma(standard deviation) and not the root mean square of the array. ; Definition at line 1702 of file Tools.cxx. ◆ RMS() [2/2]. template<typename T > . Double_t TMVA::Tools::RMS ; (; Long64_t ; n, . const T * ; a, . const Double_t * ; w = 0 . ). Return the Standard Deviation of an array a with length n. ; Note that this function returns the sigma(standard deviation) and not the root mean square of the array. ; Definition at line 1743 of file Tools.cxx. ◆ ROOTVersionMessage(). void TMVA::Tools::ROOTVersionMessage ; (; MsgLogger & ; logger). prints the ROOT release number and date ; Definition at line 1325 of file Tools.cxx. ◆ Scale() [1/2]. void TMVA::Tools::Scale ; (; std::vector< Double_t > & ; v, . Double_t ; f . ). scales double vector ; Definition at line 519 of file Tools.cxx. ◆ Scale() [2/2]. void TMVA::Tools::Scale ; (; std::vector< Float_t > & ; v, . Float_t ; f . ). scales float vector ; Definition at line 527 of file Tools.cxx. ◆ SetXMLEngineBufferSize(). void TMVA::Tools::SetXMLEngineBufferSize ; (; int ; buffer). inline . Definition at line 264 of file Tools.h. ◆ SplitString(). std::vector< TString > TMVA::Tools::SplitString ; (; const TString & ; theOpt, . const char ; separator . ); const. splits the option string at 'separator' and fills the list 'splitV' with the primitive strings ; Definition at line 1199 of file Tools.cxx. ◆ StringFromDouble(). TString TMVA::Tools::StringFromDouble ; (; Double_t ; d). string tools ; Definition at line 1233 of file Tools.cxx. ◆ StringFromInt(). TString TMVA::Tools::StringFromInt ; (; Long_t ; i). string tools ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1Tools.html:24165,release,release,24165,doc/master/classTMVA_1_1Tools.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Tools.html,1,['release'],['release']
Deployability,"urrent value; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooSuperCategory(const char* name, const char* title, const RooArgSet& inputCatList); Construct a lvalue product of the given set of input RooAbsCategoryLValues in 'inInputCatList'; The state names of this product category are {S1;S2,S3,...Sn} where Si are the state names; of the input categories. A RooSuperCategory is an lvalue. RooSuperCategory(const RooSuperCategory& other, const char* name = 0); Copy constructor. ~RooSuperCategory(); Destructor. TIterator* MakeIterator() const; Make an iterator over all state permutations of; the input categories of this supercategory. void updateIndexList(); Update the list of possible states of this super category. TString currentLabel() const; Return the name of the current state,; constructed from the state names of the input categories. RooCatType evaluate() const; Calculate and return the current value. Bool_t setIndex(Int_t index, Bool_t printError = kTRUE); Set the value of the super category by specifying the state index code; by setting the states of the corresponding input category lvalues. Bool_t setLabel(const char* label, Bool_t printError = kTRUE); Set the value of the super category by specifying the state name; by setting the state names of the corresponding input category lvalues. Bool_t setType(const RooCatType* type, Bool_t prinError = kTRUE); Set the value of the super category by specifying the state object; by setting the state names of the corresponding input category lvalues. void printMultiline(ostream& os, Int_t content, Bool_t verbose = kFALSE, TString indent = """") const; Print the state of this object to the specified output str",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooSuperCategory.html:23075,update,updateIndexList,23075,root/html526/RooSuperCategory.html,https://root.cern,https://root.cern/root/html526/RooSuperCategory.html,7,['update'],['updateIndexList']
Deployability,"ursively remove this object from the list of Cleanups.Definition TROOT.cxx:2498; TROOT::fExecutingMacroBool_t fExecutingMacroTrue while executing a TMacro.Definition TROOT.h:136; TROOT::fBuiltDateInt_t fBuiltDateDate of ROOT built.Definition TROOT.h:118; TROOT::fIsWebDisplayBatchBool_t fIsWebDisplayBatchTrue if web widgets are not displayed.Definition TROOT.h:129; TROOT::GetSharedLibDirstatic const TString & GetSharedLibDir()Get the shared libraries directory in the installation. Static utility function.Definition TROOT.cxx:3031; TROOT::fMappedFilesTSeqCollection * fMappedFilesList of memory mapped files.Definition TROOT.h:147; TROOT::GetNtypesInt_t GetNtypes() constGet number of types.Definition TROOT.cxx:1884; TROOT::LoadMacroInt_t LoadMacro(const char *filename, Int_t *error=nullptr, Bool_t check=kFALSE)Load a macro in the interpreter's memory.Definition TROOT.cxx:2268; TROOT::GetFileTFile * GetFile() const overrideDefinition TROOT.h:260; TROOT::GetLibDirstatic const TString & GetLibDir()Get the library directory in the installation. Static utility function.Definition TROOT.cxx:3010; TROOT::fBrowsersTSeqCollection * fBrowsersList of browsers.Definition TROOT.h:155; TROOT::fDefCanvasNameTString fDefCanvasNameName of default canvas.Definition TROOT.h:171; TROOT::fGlobalFunctionsTListOfFunctions * fGlobalFunctionsList of global functions.Definition TROOT.h:144; TROOT::fBrowsablesTList * fBrowsablesList of browsables.Definition TROOT.h:168; TROOT::FindObjectAnyTObject * FindObjectAny(const char *name) const overrideReturn a pointer to the first object with name starting at //root.Definition TROOT.cxx:1426; TROOT::DecreaseDirLevelstatic Int_t DecreaseDirLevel()Decrease the indentation level for ls().Definition TROOT.cxx:2746; TROOT::Resetvoid Reset(Option_t *option="""")Delete all global interpreter objects created since the last call to Reset.Definition TROOT.cxx:2651; TROOT::fEditorModeInt_t fEditorModeCurrent Editor mode.Definition TROOT.h:137; TROOT::FindObjectClassN",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TROOT_8cxx_source.html:162385,install,installation,162385,doc/v632/TROOT_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/TROOT_8cxx_source.html,1,['install'],['installation']
Deployability,"ursively remove this object from the list of Cleanups.Definition TROOT.cxx:2498; TROOT::fExecutingMacroBool_t fExecutingMacroTrue while executing a TMacro.Definition TROOT.h:136; TROOT::fBuiltDateInt_t fBuiltDateDate of ROOT built.Definition TROOT.h:118; TROOT::fIsWebDisplayBatchBool_t fIsWebDisplayBatchTrue if web widgets are not displayed.Definition TROOT.h:129; TROOT::GetSharedLibDirstatic const TString & GetSharedLibDir()Get the shared libraries directory in the installation. Static utility function.Definition TROOT.cxx:3035; TROOT::fMappedFilesTSeqCollection * fMappedFilesList of memory mapped files.Definition TROOT.h:147; TROOT::GetNtypesInt_t GetNtypes() constGet number of types.Definition TROOT.cxx:1884; TROOT::LoadMacroInt_t LoadMacro(const char *filename, Int_t *error=nullptr, Bool_t check=kFALSE)Load a macro in the interpreter's memory.Definition TROOT.cxx:2268; TROOT::GetFileTFile * GetFile() const overrideDefinition TROOT.h:260; TROOT::GetLibDirstatic const TString & GetLibDir()Get the library directory in the installation. Static utility function.Definition TROOT.cxx:3014; TROOT::fBrowsersTSeqCollection * fBrowsersList of browsers.Definition TROOT.h:155; TROOT::fDefCanvasNameTString fDefCanvasNameName of default canvas.Definition TROOT.h:171; TROOT::fGlobalFunctionsTListOfFunctions * fGlobalFunctionsList of global functions.Definition TROOT.h:144; TROOT::fBrowsablesTList * fBrowsablesList of browsables.Definition TROOT.h:168; TROOT::FindObjectAnyTObject * FindObjectAny(const char *name) const overrideReturn a pointer to the first object with name starting at //root.Definition TROOT.cxx:1426; TROOT::DecreaseDirLevelstatic Int_t DecreaseDirLevel()Decrease the indentation level for ls().Definition TROOT.cxx:2746; TROOT::Resetvoid Reset(Option_t *option="""")Delete all global interpreter objects created since the last call to Reset.Definition TROOT.cxx:2651; TROOT::fEditorModeInt_t fEditorModeCurrent Editor mode.Definition TROOT.h:137; TROOT::FindObjectClassN",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TROOT_8cxx_source.html:162561,install,installation,162561,doc/master/TROOT_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TROOT_8cxx_source.html,1,['install'],['installation']
Deployability,"urve, that means; # that the blinded region where data is missing is included in the normalisation calculation. The PDF therefore; # comes out too low, and doesn't match up with the slices in the side bands, which are normalised to ""their"" data.; ; print(""Now plotting with unique normalisation for each slice.\n""); canvas.cd(1); plotFrame = x.frame(Title=""Wrong: Each slice normalised over its plotting range""); ; # Plot only the blinded data, and then plot the PDF over the full range as well as both sidebands; blindedData.plotOn(plotFrame); expo.plotOn(plotFrame, LineColor=""r"", Range=""full""); expo.plotOn(plotFrame, LineColor=""b"", Range=""left""); expo.plotOn(plotFrame, LineColor=""g"", Range=""right""); ; plotFrame.Draw(); ; # Right:; # ----------------------------------------------------------------------------------------------------------; # Make the same plot, but normalise each piece with respect to the regions ""left"" AND ""right"". This requires setting; # a ""NormRange"", which tells RooFit over which range the PDF has to be integrated to normalise.; # This means that the normalisation of the blue and green curves is slightly different from the left plot,; # because they get a common scale factor.; ; print(""\n\nNow plotting with correct norm ranges:\n""); canvas.cd(2); plotFrameWithNormRange = x.frame(Title=""Right: All slices have common normalisation""); ; # Plot only the blinded data, and then plot the PDF over the full range as well as both sidebands; blindedData.plotOn(plotFrameWithNormRange); expo.plotOn(plotFrameWithNormRange, LineColor=""b"", Range=""left"", NormRange=""left,right""); expo.plotOn(plotFrameWithNormRange, LineColor=""g"", Range=""right"", NormRange=""left,right""); expo.plotOn(plotFrameWithNormRange, LineColor=""r"", Range=""full"", NormRange=""left,right"", LineStyle=10); ; plotFrameWithNormRange.Draw(); ; canvas.Draw(); ; canvas.SaveAs(""rf212_plottingInRanges_blinding.png""); [#1] INFO:Eval -- RooRealVar::setRange(x) new range named 'full' created with bounds [1,30]; [",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf212__plottingInRanges__blinding_8py.html:3384,integrat,integrated,3384,doc/master/rf212__plottingInRanges__blinding_8py.html,https://root.cern,https://root.cern/doc/master/rf212__plottingInRanges__blinding_8py.html,1,['integrat'],['integrated']
Deployability,"us () const override;  MINOS status code of last Minos run status & 1 > 0 : invalid lower error status & 2 > 0 : invalid upper error status & 4 > 0 : invalid because maximum number of function calls exceeded status & 8 > 0 : a new minimum has been found status & 16 > 0 : error is truncated because parameter is at lower/upper limit. ;  ; double MinValue () const override;  return minimum function value ;  ; unsigned int NCalls () const override;  number of function calls to reach the minimum ;  ; unsigned int NDim () const override;  this is <= Function().NDim() which is the total number of variables (free+ constrained ones) ;  ; unsigned int NFree () const override;  number of free variables (real dimension of the problem) this is <= Function().NDim() which is the total ;  ; void PrintResults () override;  return reference to the objective function virtual const ROOT::Math::IGenFunction & Function() const; ;  ; bool ProvidesError () const override;  minimizer provides error and error matrix ;  ; bool ReleaseVariable (unsigned int ivar) override;  release an existing variable ;  ; bool Scan (unsigned int i, unsigned int &nstep, double *x, double *y, double xmin=0, double xmax=0) override;  scan a parameter i around the minimum. ;  ; bool SetFixedVariable (unsigned int, const std::string &, double) override;  set fixed variable (override if minimizer supports them ) ;  ; void SetFunction (const ROOT::Math::IMultiGenFunction &func) override;  set the function to minimize ;  ; void SetHessianFunction (std::function< bool(std::span< const double >, double *)> hfunc) override;  set the function implementing Hessian computation ;  ; bool SetLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double, double) override;  set upper/lower limited variable (override if minimizer supports them ) ;  ; bool SetLowerLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double lower) override;  set lower limit variable ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Minuit2_1_1Minuit2Minimizer.html:5284,release,release,5284,doc/master/classROOT_1_1Minuit2_1_1Minuit2Minimizer.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Minuit2_1_1Minuit2Minimizer.html,1,['release'],['release']
Deployability,"us)TGMainFrame::kDontCallClose. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TASPaletteEditor(TAttImage* attImage, UInt_t w, UInt_t h); Palette editor constructor.; The palette editor aloows the editing of the color palette of the image. ~TASPaletteEditor(); Palette editor destructor. Deletes all frames and their layout hints. void CloseWindow(); Close editor. Bool_t ProcessMessage(Long_t msg, Long_t param1, Long_t param2); Process all editor mouse events. void InsertNewPalette(TImagePalette* newPalette); The newPalette is inserted in the list of palettes (fPaletteList) and; fPalette is set to the newPalette. Protected method,. void Save(); Saves the current palette either into a ROOT file or in an ASCII file.; It is called by the Save - button. Protected method. void Open(); Opens either a ROOT file or an ASCII file and reads a palette.; It is called by the Open - button. Protected method. void UpdateScreen(Bool_t histoUpdate); All widgeds of the screen are updated with the current palette.; Protected method. void LogPalette(); The anchor points are rescaled by a log operation.; It is called by the log - button. Protected method. void ExpPalette(); The anchor points are rescaled by a exp operation.; It is called by the exp - button. Protected method. void LinPalette(); The anchor points are rescaled to be linar.; It is called by the lin - button. Protected method. void InvertPalette(); The palette is inverted.; It is called by the invert - button. Protected method. void NewPalette(Long_t id); A new palette is created, depending on the id.; It is called by the combo box. Protected method. void SetStep(); Create a step palette. This is called by the step - check button.; Protected method. void SetRamp(Long_t ramp); The palette is repeated up to 4 times.; This is called by one of the ramp radio buttons. Protected method. void UpdateRange(); Updates the range of the palette.; This is called after the blue limit lines were mo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TASPaletteEditor.html:24230,update,updated,24230,root/html602/TASPaletteEditor.html,https://root.cern,https://root.cern/root/html602/TASPaletteEditor.html,2,['update'],['updated']
Deployability,us)TObject::kZombie. protected:. Int_tfCacheSizefor generating proposals from PDFs; RooDataSet*fCluesdata set of clues; Double_tfCluesFracwhat fraction of the PDF integral comes from clues; const Option_t*fCluesOptionsoption string for clues RooNDKeysPdf; RooAbsPdf*fCluesPdfproposal dens. func. with clues for certain points; TMatrixDSym*fCovMatrixcovariance matrix for multi var gaussian pdf; Bool_tfOwnsCluesPdfwhether we created (and own) the clues pdf; Bool_tfOwnsPdfwhether we created (and own) the main pdf; Bool_tfOwnsPdfPropwhether we own the PdfProposal; equivalent to:; Bool_tfOwnsVarswhether we own fVars; RooAbsPdf*fPdfthe main proposal density function; RooStats::PdfProposal*fPdfPropthe PdfProposal we are (probably) going to return; Double_tfSigmaRangeDivisorrange divisor to get sigma for each variable; Double_tfUniFracwhat fraction of the PDF integral is uniform; RooAbsPdf*fUniformPdfuniform proposal dens. func.; Bool_tfUseUpdateswhether to set updates for proposal params in PdfProposal; RooArgList*fVarsthe RooRealVars to generate proposals for. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ProposalHelper(). ProposalFunction* GetProposalFunction(). void CreatePdf(); kbelasco: check here for memory leaks:; does RooMultiVarGaussian make copies of xVec and muVec?; or should we delete them?. void CreateCovMatrix(RooArgList& xVec). void CreateCluesPdf(). void CreateUniformPdf(). ProposalHelper(). void SetPdf(RooAbsPdf& pdf); Set the PDF to be the proposal density function. { fPdf = &pdf; }. void SetClues(RooDataSet& clues); Set the bank of clues to add to the current proposal density function. { fClues = &clues; }. void SetCacheSize(Int_t size). void SetUpdateProposalParameters(Bool_t updateParams); { fUseUpdates = updateParams; }. void SetVariables(RooArgList& vars); { fVars = &vars; }. void SetVariables(const RooArgList& vars); { fVars = new RooArgList(vars); fOwnsVars = kTRUE; }. void SetUniformFraction(Double_t uniF,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__ProposalHelper.html:7364,update,updates,7364,root/html602/RooStats__ProposalHelper.html,https://root.cern,https://root.cern/root/html602/RooStats__ProposalHelper.html,2,['update'],['updates']
Deployability,usBitsTObject::kCannotPick; static TGLLockable::ELockTGLLockable::kDrawLock; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TGLLockable::ELockTGLLockable::kModifyLock; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TGLLockable::ELockTGLLockable::kSelectLock; static TObject::(anonymous)TObject::kSingleKey; static TGLLockable::ELockTGLLockable::kUnlocked; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Int_tfAcceptedPhysicals; Bool_tTGLSceneBase::fAutoDestruct; TGLBoundingBoxTGLSceneBase::fBoundingBoxbounding box for scene (axis aligned) - lazy update - use BoundingBox() to access; Bool_tTGLSceneBase::fBoundingBoxValidbounding box valid?; UInt_tfCSLevel; vector<TGLScenePad::CSPart_t>fCSTokens; TGLClip*TGLSceneBase::fClipScene clipping-plane.; TGLFaceSet*fComposite! Paritally created composite; Bool_tTGLSceneBase::fDoClipCheckPerform global clip-plane-check in UpdateSceneInfo(); Bool_tTGLSceneBase::fDoFrustumCheckPerform global frustum-check in UpdateSceneInfo(); TGLContextIdentity*TGLScene::fGLCtxIdentity; Bool_tTGLScene::fInSmartRefresh!; Bool_tfInternalPIDs! using internal physical IDs; Short_tTGLSceneBase::fLODScene-lod.; Float_tTGLScene::fLastLineWidthScale; UInt_tfLastPID! last physical ID that was processed in AddObject(); Float_tTGLScene::fLastPointSizeScale; TGLLockable::ELockTGLLockable::fLockLock state.; TGLScene::LogicalShapeMap_tTGLScene::fLogicalShapes!; UInt_tTGLSceneBase::fMinorStampCounter increased on minimal update.; TStringTGLSceneBase::fNameObject identifier.; UInt_tfNextInternalPID! next internal physical ID (from 1 - 0 reserved); ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGLScenePad.html:12214,update,update,12214,root/html602/TGLScenePad.html,https://root.cern,https://root.cern/root/html602/TGLScenePad.html,2,['update'],['update']
Deployability,"usage of a log or linear scale for computing the cumulative integral table. IMPORTANT NOTE; The integral of the function is computed at fNpx points. If the function has sharp peaks, you should increase the number of points (SetNpx) such that the peak is correctly tabulated at several points. ; Reimplemented in TF2.; Definition at line 2245 of file TF1.cxx. ◆ GetRandom() [2/2]. Double_t TF1::GetRandom ; (; TRandom * ; rng = nullptr, . Option_t * ; option = nullptr . ). virtual . Return a random number following this function shape. ; Parameters. rngRandom number generator. By default (or when passing a nullptr) the global gRandom is used ; optionOption string which controls the binning used to compute the integral. Default mode is automatic depending of xmax, xmin and Npx (function points). Possible values are:; ""LOG"" to force usage of log scale for tabulating the integral; ""LIN"" to force usage of linear scale when tabulating the integral. The distribution contained in the function fname (TF1) is integrated over the channel contents. It is normalized to 1. For each bin the integral is approximated by a parabola. The parabola coefficients are stored as non persistent data members Getting one random number implies:; Generating a random number between 0 and 1 (say r1); Look in which bin in the normalized integral r1 corresponds to; Evaluate the parabolic curve in the selected bin to find the corresponding X value. The user can provide as optional parameter a Random number generator. By default gRandom is used; If the ratio fXmax/fXmin > fNpx the integral is tabulated in log scale in x A log scale for the intergral is also always used if a user specifies the ""LOG"" option Instead if a user requestes a ""LIN"" option the integral binning is never done in log scale whatever the fXmax/fXmin ratio is; Note that the parabolic approximation is very good as soon as the number of bins is greater than 50. ; Reimplemented in TF2.; Definition at line 2192 of file TF1.cxx. ◆ GetRange()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTF1.html:85733,integrat,integrated,85733,doc/master/classTF1.html,https://root.cern,https://root.cern/doc/master/classTF1.html,1,['integrat'],['integrated']
Deployability,"use in extended likelihood calculations.; This default implementation returns zero ; Reimplemented from RooAbsPdf.; Definition at line 60 of file RooNormalizedPdf.h. ◆ extendMode(). ExtendMode RooNormalizedPdf::extendMode ; (; ); const. inlineoverridevirtual . Returns ability of PDF to provide extended likelihood terms. ; Possible answers are in the enumerator RooAbsPdf::ExtendMode. This default implementation always returns CanNotBeExtended. ; Reimplemented from RooAbsPdf.; Definition at line 59 of file RooNormalizedPdf.h. ◆ forceAnalyticalInt(). bool RooNormalizedPdf::forceAnalyticalInt ; (; const RooAbsArg & ; ); const. inlineoverridevirtual . Reimplemented from RooAbsReal.; Definition at line 46 of file RooNormalizedPdf.h. ◆ getAnalyticalIntegralWN(). Int_t RooNormalizedPdf::getAnalyticalIntegralWN ; (; RooArgSet & ; allVars, . RooArgSet & ; analVars, . const RooArgSet * ; , . const char * ; rangeName = nullptr . ); const. inlineoverridevirtual . Forward determination of analytical integration capabilities to input p.d.f. ; Reimplemented from RooAbsReal.; Definition at line 48 of file RooNormalizedPdf.h. ◆ getValV(). double RooNormalizedPdf::getValV ; (; const RooArgSet * ; nset); const. inlineoverrideprotectedvirtual . Return current value, normalized by integrating over the observables in nset. ; If nset is 0, the unnormalized value is returned. All elements of nset must be lvalues.; Unnormalized values are not cached. Doing so would be complicated as _norm->getVal() could spoil the cache and interfere with returning the cached return value. Since unnormalized calls are typically done in integration calls, there is no performance hit. ; Reimplemented from RooAbsPdf.; Definition at line 79 of file RooNormalizedPdf.h. ◆ selfNormalized(). bool RooNormalizedPdf::selfNormalized ; (; ); const. inlineoverridevirtual . Shows if a PDF is self-normalized, which means that no attempt is made to add a normalization term. ; Always returns false, unless a PDF overrides this ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooNormalizedPdf.html:76597,integrat,integration,76597,doc/master/classRooNormalizedPdf.html,https://root.cern,https://root.cern/doc/master/classRooNormalizedPdf.html,1,['integrat'],['integration']
Deployability,"useAxisBinning is set and if the selected distribution fits into a root histogram (1,2,3 dimensions) then return a histogram with the proper binning on each axis. Otherwise, return a 1D histogram with equidistant binning. If the histogram title is zero, a title is assigned automatically.; The axisSteering is defines as follows: ""axis[mode];axis[mode];..."" where: . axis = name of an axis or * . mode = any combination of the letters CUO0123456789 . C collapse axis into one bin (add up results). If any of the numbers 0-9 are given in addition, only these bins are added up. Here bins are counted from zero, whereas in root, bins are counted from 1. Obviously, this only works for up to 10 bins. . U discarde underflow bin . O discarde overflow bin . examples: imagine the binning has two axis, named x and y. . ""*[UO]"" exclude underflow and overflow bins for all axis. So here a TH2 is returned but all undeflow and overflow bins are empty . ""x[UOC123]"" integrate over the variable x but only using the bins 1,2,3 and not the underflow and overflow in x. Here a TH1 is returned, the axis is labelled ""y"" and the underflow and overflow (in y) are filled. However only the x-bins 1,2,3 are used to determine the content. . ""x[C];y[UO]"" integrate over the variable x, including underflow and overflow but exclude underflow and overflow in y. Here a TH1 is returned, the axis is labelled ""y"". The underflow and overflow in y are empty. . Definition at line 654 of file TUnfoldDensity.cxx. ◆ GetOutputBinName(). TString TUnfoldDensity::GetOutputBinName ; (; Int_t ; iBinX); const. overrideprotectedvirtual . Get bin name of an outpt bin. ; Parameters. [in]iBinXbin number. Return value: name of the bin. The name is constructed from the entries in the binning scheme and includes information about the bin borders etc. ; Reimplemented from TUnfold.; Definition at line 311 of file TUnfoldDensity.cxx. ◆ GetOutputBinning(). const TUnfoldBinning * TUnfoldDensity::GetOutputBinning ; (; const char * ; dist",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUnfoldDensity.html:59156,integrat,integrate,59156,doc/master/classTUnfoldDensity.html,https://root.cern,https://root.cern/doc/master/classTUnfoldDensity.html,1,['integrat'],['integrate']
Deployability,"useX and fMouseY when user move a mouse over viewer and hides ToolTip. ;  ; void LevelDistValueSetSlot (Long_t dist);  Emmited when user changes distance between levels. ;  ; void MouseOverSlot (TGLPhysicalShape *shape);  MouseOver slot. ;  ; void RedoButtonSlot ();  Activated when user click Redo button. Repeat last Undo action. ;  ; void ResetButtonSlot ();  Resets camera. ;  ; void ScaleByChangedSlot ();  Activated when user press radio button. ;  ; void SetLinksVisibility (Bool_t val);  Sets links visibility to ""visible"". ;  ; void SetNodePtr (TStructNode *val);  Sets top node pointer and updates view. ;  ; void SetPointerButtonSlot ();  Sets pointer given in fPointerTestEntry to the main pointer. ;  ; void ShowLinksToggled (Bool_t on);  Changes links visibility and refresh view. ;  ; void UndoButtonSlot ();  UndoButton Slot. Activated when user press Undo button. Restore last top node pointer. ;  ; void Update (Bool_t resetCamera=false);  Updates view. Clear all the nodes, call draw function and update scene. Doesn't reset camera. ;  ; void UpdateButtonSlot ();  Update button slot. Updates scene. ;  ;  Public Member Functions inherited from TGMainFrame;  TGMainFrame (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=kVerticalFrame);  Create a top level main frame. ;  ;  ~TGMainFrame () override;  TGMainFrame destructor. ;  ; virtual Bool_t BindKey (const TGWindow *w, Int_t keycode, Int_t modifier) const;  Bind key to a window. ;  ; void DontCallClose ();  Typically call this method in the slot connected to the CloseWindow() signal to prevent the calling of the default or any derived CloseWindow() methods to prevent premature or double deletion of this window. ;  ; TList * GetBindList () const;  ; void GetClassHints (const char *&className, const char *&resourceName) const;  ; const char * GetIconName () const override;  Returns mime type name of object. ;  ; const char * GetIconPixmap () const;  ; void GetMWMHints (UInt_t &value, UInt_t &funcs, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTStructViewerGUI.html:2623,update,update,2623,doc/master/classTStructViewerGUI.html,https://root.cern,https://root.cern/doc/master/classTStructViewerGUI.html,1,['update'],['update']
Deployability,"used for suppression of signals; TGButtonGroup*fTypeButtons; UInt_tTGFrame::fWidthframe width; Int_tTGFrame::fXframe x position; Int_tTGFrame::fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGLClipSetSubEditor(const TGWindow* p); Constructor. void SetModel(TGLClipSet* m); Set model object. void Changed(); Emit Changed signal. void ClipValueChanged(); One of number entries was changed. void ClipTypeChanged(Int_t ); Clip type radio button changed - update viewer. void UpdateViewerClip(); Change clipping volume. void ResetViewerClip(); Reset transformation of the current clip. TGLClipSetSubEditor(const TGLClipSetSubEditor& ). TGLClipSetSubEditor& operator=(const TGLClipSetSubEditor& ). virtual ~TGLClipSetSubEditor(); {}. » Author: Matevz Tadel, Jun 2007 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id: TGLClipSetEditor.h 32338 2010-02-12 17:11:34Z matevz $ » Last generated: 2010-09-23 20:06; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLClipSetSubEditor.html:19303,update,update,19303,root/html528/TGLClipSetSubEditor.html,https://root.cern,https://root.cern/root/html528/TGLClipSetSubEditor.html,1,['update'],['update']
Deployability,"used for suppression of signals; TGButtonGroup*fTypeButtons; UInt_tTGFrame::fWidthframe width; Int_tTGFrame::fXframe x position; Int_tTGFrame::fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGLClipSetSubEditor(const TGWindow* p); Constructor. void SetModel(TGLClipSet* m); Set model object. void Changed(); Emit Changed signal. void ClipValueChanged(); One of number entries was changed. void ClipTypeChanged(Int_t ); Clip type radio button changed - update viewer. void UpdateViewerClip(); Change clipping volume. void ResetViewerClip(); Reset transformation of the current clip. TGLClipSetSubEditor(const TGLClipSetSubEditor& ). TGLClipSetSubEditor& operator=(const TGLClipSetSubEditor& ). virtual ~TGLClipSetSubEditor(); {}. » Author: Matevz Tadel, Jun 2007 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id: TGLClipSetEditor.h 32338 2010-02-12 17:11:34Z matevz $ » Last generated: 2011-07-04 15:29; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGLClipSetSubEditor.html:19403,update,update,19403,root/html530/TGLClipSetSubEditor.html,https://root.cern,https://root.cern/root/html530/TGLClipSetSubEditor.html,1,['update'],['update']
Deployability,"used for suppression of signals; TGButtonGroup*fTypeButtons; UInt_tTGFrame::fWidthframe width; Int_tTGFrame::fXframe x position; Int_tTGFrame::fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGLClipSetSubEditor(const TGWindow* p); Constructor. void SetModel(TGLClipSet* m); Set model object. void Changed(); Emit Changed signal. void ClipValueChanged(); One of number entries was changed. void ClipTypeChanged(Int_t ); Clip type radio button changed - update viewer. void UpdateViewerClip(); Change clipping volume. void ResetViewerClip(); Reset transformation of the current clip. TGLClipSetSubEditor(const TGLClipSetSubEditor& ). TGLClipSetSubEditor& operator=(const TGLClipSetSubEditor& ). virtual ~TGLClipSetSubEditor(); {}. » Author: Matevz Tadel, Jun 2007 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id: TGLClipSetEditor.h 32338 2010-02-12 17:11:34Z matevz $ » Last generated: 2011-11-03 20:14; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGLClipSetSubEditor.html:19403,update,update,19403,root/html532/TGLClipSetSubEditor.html,https://root.cern,https://root.cern/root/html532/TGLClipSetSubEditor.html,1,['update'],['update']
Deployability,"user can control the relative and absolute tolerance and the maximum allowed number of function evaluation.; 13.8.3.4 ROOT::Math::GSLMCIntegrator; It is a class for performing numerical integration of a multidimensional function. It uses the numerical integration algorithms of GSL, which reimplements the algorithms used in the QUADPACK, a numerical integration package written in Fortran. Plain MC, MISER and VEGAS integration algorithms are supported for integration over finite (hypercubic) ranges. For a detail description of the GSL methods visit the GSL users guide. Specific configuration options (documented in the GSL user guide) for the ROOT::Math::GSLMCIntegration can be set directly in the class, or when using it via the ROOT::Math::IntegratorMultiDim interface, can be defined using the ROOT::Math::IntegratorMultiDimOptions.; 13.9 Function Derivation; There are in ROOT only two classes to perform numerical derivation. One of them is in the MathCore library while the other is in the MathMore wrapping an integration function from the GSL library. * RichardsonDerivator: Implements the Richardson method for numerical integration. It can calculate up to the third derivative of a function. * GSLDerivator of MathMore based on GSL.; 13.10 Numerical Minimization; The algorithms provided by ROOT for numerical integration are implemented following the hierarchy shown in the next image. The left branch of classes are used for one dimensional minimization, while the right one is used for multidimensional minimization. In the case of multidimensional minimization we have also the classes TMinuitMinimizer implemented using TMinuit, TFumiliMinimizer implemented using TFumili for least square or likelihood minimizations. We encourage the use of the GSL algorithms for one dimensional minimization and Minuit2 (or the old versionMinuit) for multi dimensional minimization. Numerical Minimization classes. 13.10.1 One-Dimensional Minimization; These algorithms are for finding the mini",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:713464,integrat,integration,713464,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['integrat'],['integration']
Deployability,"ush origin vX-YY-ZZ. Tag ROOTTEST repository. Artifacts. Produce binary tarfiles. start the procedure root-release-6.20 (or whichever branch) in Jenkins; tarfiles and other artifacts are copied to final destination. Install binaries to CVMFS. Install release binaries to CVMFS with the Jenkins procedure root-release-CVMFS. Documentation. Update the release pages. Generate the release notes with the Jenkins procedure called root-releasenotes; Update the releases xml with the Jenkins procedure called root-release-makeReleasesXml; Once authenticated, import the releases xml in the site clicking import here (Be reminded: this works for authenticated users only!).; Eventually edit the 'highlights' section, which is currently commented, in the generated release page.; If this applies, mark the release as Pro or Old and remove the attribute to the one previously holding it. There are radio buttons exposed by Drupal when editing a release's page.; If not a patch release edit reference-guide page to add the new reference guide for the release. Announcements. send mail to the following mailing lists: root-planning@cern.ch, root-dev@cern.ch, roottalk@cern.ch, root-godparents@cern.ch, root-ambassadors@cern.ch; write announcement in RootTalk forum news. Quick Links; Jenkins Service; Jenkins How To; CDash; Coverity; Github; GitWeb; LXR; Jira; Conventions Violations; ROOT Logos; Upgrade of ROOTbinder. Sitemap. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git Primer; Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxyge",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/release-checklist.html:4274,patch,patch,4274,d/release-checklist.html,https://root.cern,https://root.cern/d/release-checklist.html,3,"['patch', 'release']","['patch', 'release']"
Deployability,"using Monte Carlo. ; In the main algorithm, new points in the parameter space are proposed and then visited based on their relative likelihoods. This class can use any implementation of the ProposalFunction, including non-symmetric proposal functions, to propose parameter points and still maintain detailed balance when constructing the chain.; The ""Likelihood"" function that is sampled when deciding what steps to take in the chain has been given a very generic implementation. The user can create any RooAbsReal based on the parameters and pass it to a MetropolisHastings object with the method SetFunction(RooAbsReal&). Be sure to tell MetropolisHastings whether your RooAbsReal is on a (+/-) regular or log scale, so that it knows what logic to use when sampling your RooAbsReal. For example, a common use is to sample from a -log(Likelihood) distribution (NLL), for which the appropriate configuration calls are SetType(MetropolisHastings::kLog); SetSign(MetropolisHastings::kNegative); If you're using a traditional likelihood function: SetType(MetropolisHastings::kRegular); SetSign(MetropolisHastings::kPositive); You must set these type and sign flags or MetropolisHastings will not construct a MarkovChain.; Also note that in ConstructChain(), the values of the variables are randomized uniformly over their intervals before construction of the MarkovChain begins. ; Definition at line 24 of file MetropolisHastings.h. Public Types; enum  FunctionSign { kNegative; , kPositive; , kSignUnset; };  ; enum  FunctionType { kRegular; , kLog; , kTypeUnset; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCle",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1MetropolisHastings.html:1363,configurat,configuration,1363,doc/master/classRooStats_1_1MetropolisHastings.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1MetropolisHastings.html,1,['configurat'],['configuration']
Deployability,"usly defined function f over; the defined interval (a,b) with a singularity at c; @param a lower interval value; @param b lower interval value; @param c singular value of f. double IntegralCauchy(const ROOT::Math::IGenFunction& f, double a, double b, double c). evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b); with a singularity at c; @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower interval value; @param b lower interval value; @param c singular value of f. double IntegralUp(const ROOT::Math::IGenFunction& f, double a). evaluate the Integral of a function f over the semi-infinite interval (a,+inf); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower value of the integration interval. double IntegralLow(const ROOT::Math::IGenFunction& f, double b). evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param b upper value of the integration interval. double Integral(double a, double b). evaluate the Integral of a function f with known singular points over the defined Integral (a,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param pts vector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( \a a) and last element the upper value. double Integral(double a, double b); evaluate using cached function. evaluate the Integral over the defined interval (a,b) using the function previously set with GSLIntegrator::SetFunction method; @param a lower value of the integration interval; @param b upper value of the integration interval. double Integral(). evaluate the Integral over the infinit",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Math__GSLIntegrator.html:8804,integrat,integration,8804,root/html534/ROOT__Math__GSLIntegrator.html,https://root.cern,https://root.cern/root/html534/ROOT__Math__GSLIntegrator.html,3,['integrat'],['integration']
Deployability,"ussian(const char *name, const char *title,					 const RooArgList& xvec, const TVectorD& mu, const TMatrixDSym& cov). RooMultiVarGaussian(const char *name, const char *title,					 const RooArgList& xvec, const TMatrixDSym& cov). RooMultiVarGaussian(const RooMultiVarGaussian& other, const char* name = 0). void syncMuVec() const. Double_t evaluate() const; Represent observables as vector. Int_t getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars, const char* rangeName = 0) const; Analytical integral known over all observables. Double_t analyticalIntegral(Int_t code, const char* rangeName = 0) const; Handle full integral here. Int_t getGenerator(const RooArgSet& directVars, RooArgSet& generateVars, Bool_t staticInitOK = kTRUE) const; Special case: generate all observables. void initGenerator(Int_t code); Clear the GenData cache as its content is not invariant under changes in; the mu vector. void generateEvent(Int_t code); Retrieve generator config from cache. void decodeCode(Int_t code, vector<int>& map1, vector<int>& map2) const; Decode analytical integration/generation code into index map of integrated/generated (map2); and non-integrated/generated observables (map1). void blockDecompose(const TMatrixD& input, const vector<int>& map1, const vector<int>& map2, TMatrixDSym& S11, TMatrixD& S12, TMatrixD& S21, TMatrixDSym& S22); Block decomposition of covI according to given maps of observables. RooMultiVarGaussian(); {}. void setAnaIntZ(Double_t z); { _z = z ; }. TObject* clone(const char* newname) const; { return new RooMultiVarGaussian(*this,newname); }. virtual ~RooMultiVarGaussian(); { }. const TMatrixDSym& covarianceMatrix() const; { return _cov ; }. AnaIntData& anaIntData(Int_t code) const. GenData& genData(Int_t code) const. » Last changed: Mon Dec 7 13:48:21 2009 » Last generated: 2009-12-07 13:48; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooMultiVarGaussian.html:41614,integrat,integration,41614,root/html526/RooMultiVarGaussian.html,https://root.cern,https://root.cern/root/html526/RooMultiVarGaussian.html,3,['integrat'],"['integrated', 'integration']"
Deployability,"ust be specified with the above syntax.Lines in the input file starting with “#” are ignored. A TBranch object is created for each variable in the expression. The total number of rows read from the file is returned.; 12.19 Trees in Analysis; The methods TTree::Draw, TTree::MakeClass and TTree::MakeSelector are available for data analysis using trees. The TTree::Draw method is a powerful yet simple way to look and draw the trees contents. It enables you to plot a variable (a leaf) with just one line of code. However, the Draw method falls short once you want to look at each entry and design more sophisticated acceptance criteria for your analysis. For these cases, you can use TTree::MakeClass. It creates a class that loops over the trees entries one by one. You can then expand it to do the logic of your analysis.; The TTree::MakeSelector is the recommended method for ROOT data analysis. It is especially important for large data set in a parallel processing configuration where the analysis is distributed over several processors and you can specify which entries to send to each processor. With MakeClass the user has control over the event loop, with MakeSelectorthe tree is in control of the event loop.; 12.20 Simple Analysis Using TTree::Draw; We will use the tree in cernstaff.root that was made by the macro in $ROOTSYS/tutorials/tree/staff.C.; First, open the file and lists its contents.; root[] TFile f (""cernstaff.root""); root[] f.ls(); TFile** cernstaff.root; TFile* cernstaff.root; KEY: TTree T;1 staff data from ascii file; We can see the TTree“T” in the file. We will use it to experiment with the TTree::Draw method, so let’s create a pointer to it:; root[] TTree *MyTree = T; Cling allows us to get simply the object by using it. Here we define a pointer to a TTree object and assign it the value of “T”, the TTree in the file. Cling looks for an object named “T” in the current ROOT file and returns it (this assumes that “T” has not previously been used to declare a va",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:584616,configurat,configuration,584616,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['configurat'],['configuration']
Deployability,"ut = 128 , Width = 128 ) Output = ( 1 , 100 , 128 ) Activation Function = Tanh Dropout prob. = 0.5; Layer 3 DENSE Layer: ( Input = 128 , Width = 1 ) Output = ( 1 , 100 , 1 ) Activation Function = Identity Dropout prob. = 0.5; : Using 1600 events for training and 400 for testing; : Compute initial loss on the validation data ; : Training phase 1 of 1: Optimizer ADAM (beta1=0.9,beta2=0.999,eps=1e-07) Learning rate = 0.01 regularization 0 minimum error = 0.699892; : --------------------------------------------------------------; : Epoch | Train Err. Val. Err. t(s)/epoch t(s)/Loss nEvents/s Conv. Steps; : --------------------------------------------------------------; : Start epoch iteration ...; : 1 Minimum Test error found - save the configuration ; : 1 | 0.548477 0.466013 0.191275 0.014698 9061.23 0; : 2 Minimum Test error found - save the configuration ; : 2 | 0.431501 0.379356 0.191981 0.0145985 9020.06 0; : 3 | 0.40241 0.379482 0.19151 0.014162 9021.8 1; : 4 Minimum Test error found - save the configuration ; : 4 | 0.408996 0.379041 0.192713 0.0146534 8985.76 0; : 5 | 0.41143 0.414316 0.191728 0.014237 9014.55 1; : 6 | 0.385066 0.478603 0.19226 0.0142608 8988.82 2; : 7 | 0.404168 0.388159 0.192259 0.0142353 8987.58 3; : 8 Minimum Test error found - save the configuration ; : 8 | 0.394387 0.377539 0.19273 0.0147168 8988.1 0; : 9 Minimum Test error found - save the configuration ; : 9 | 0.386834 0.375541 0.192946 0.014741 8978.44 0; : 10 | 0.381359 0.385778 0.195351 0.0142527 8835 1; : 11 | 0.391916 0.415129 0.193961 0.0143386 8907.56 2; : 12 | 0.390755 0.379468 0.194376 0.0145555 8897.75 3; : 13 | 0.409355 0.396515 0.195082 0.0144231 8856.49 4; : 14 | 0.400917 0.375809 0.194321 0.0142902 8887.36 5; : 15 | 0.384495 0.401588 0.194138 0.0144019 8901.96 6; : 16 | 0.400658 0.401489 0.198047 0.014311 8708.13 7; : 17 Minimum Test error found - save the configuration ; : 17 | 0.386851 0.371455 0.194859 0.0148291 8887.42 0; : 18 | 0.389253 0.376491 0.196282 0.0143574 8794.87",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAClassification_8C.html:47688,configurat,configuration,47688,doc/master/TMVAClassification_8C.html,https://root.cern,https://root.cern/doc/master/TMVAClassification_8C.html,1,['configurat'],['configuration']
Deployability,"ut = 7 , Width = 64 ) Output = ( 1 , 128 , 64 ) Activation Function = Tanh; Layer 1 DENSE Layer: ( Input = 64 , Width = 64 ) Output = ( 1 , 128 , 64 ) Activation Function = Tanh; Layer 2 DENSE Layer: ( Input = 64 , Width = 64 ) Output = ( 1 , 128 , 64 ) Activation Function = Tanh; Layer 3 DENSE Layer: ( Input = 64 , Width = 64 ) Output = ( 1 , 128 , 64 ) Activation Function = Tanh; Layer 4 DENSE Layer: ( Input = 64 , Width = 1 ) Output = ( 1 , 128 , 1 ) Activation Function = Identity; : Using 11200 events for training and 2800 for testing; : Compute initial loss on the validation data ; : Training phase 1 of 1: Optimizer ADAM (beta1=0.9,beta2=0.999,eps=1e-07) Learning rate = 0.001 regularization 0 minimum error = 0.868652; : --------------------------------------------------------------; : Epoch | Train Err. Val. Err. t(s)/epoch t(s)/Loss nEvents/s Conv. Steps; : --------------------------------------------------------------; : Start epoch iteration ...; : 1 Minimum Test error found - save the configuration ; : 1 | 0.659892 0.620582 0.589558 0.0469541 20523.3 0; : 2 Minimum Test error found - save the configuration ; : 2 | 0.604286 0.594787 0.586926 0.0471912 20632.4 0; : 3 | 0.58117 0.603906 0.587335 0.047007 20609.7 1; : 4 Minimum Test error found - save the configuration ; : 4 | 0.57382 0.588714 0.592175 0.0469679 20425.3 0; : 5 | 0.569519 0.59535 0.590168 0.0468081 20494.7 1; : 6 | 0.567869 0.590023 0.589038 0.0469022 20541 2; : 7 Minimum Test error found - save the configuration ; : 7 | 0.561012 0.586993 0.590467 0.0471223 20495.3 0; : 8 | 0.559195 0.590522 0.590271 0.0471869 20505.1 1; : 9 | 0.558998 0.588766 0.598449 0.0469787 20193.3 2; : 10 | 0.555383 0.590075 0.591595 0.0470733 20451 3; : 11 Minimum Test error found - save the configuration ; : 11 | 0.555591 0.582449 0.595129 0.047292 20327.2 0; : 12 Minimum Test error found - save the configuration ; : 12 | 0.550993 0.581236 0.592181 0.0472746 20436.5 0; : 13 | 0.548186 0.58351 0.592876 0.0471057 20404.2 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__Higgs__Classification_8py.html:24284,configurat,configuration,24284,doc/master/TMVA__Higgs__Classification_8py.html,https://root.cern,https://root.cern/doc/master/TMVA__Higgs__Classification_8py.html,1,['configurat'],['configuration']
Deployability,"ut limits. In other cases (which should be more common, since otherwise you wouldn’t need limits), the very meaning of parameter errors becomes problematic. Mathematically, since the limit is an absolute constraint on the parameter, a parameter at its limit has no error, at least in one direction. The error matrix, which can assign only symmetric errors, then becomes essentially meaningless. On the other hand, the \(\mbox{MINOS}\) analysis is still meaningful, at least in principle, as long as \(\mbox{MIGRAD}\) (which is called internally by \(\mbox{MINOS}\)) does not get blocked at a limit. Unfortunately, the user has no control over this aspect of the \(\mbox{MINOS}\) calculation, although it is possible to get enough printout from the \(\mbox{MINOS}\) result to be able to determine whether the results are reliable or not.; 6.4 Fixing and releasing parameters; When M needs to be guided to the “right” minimum, often the best way to do this is with the methods e.g. MnMigrad::fix(…) and MnMigrad::release(…). That is, suppose you have a problem with ten free parameters, and when you minimize with respect to all at once, M goes to an unphysical solution characterized by an unphysical or unwanted value of parameter number four. One way to avoid this is to fix parameter four at a “good” value (not necessarily the best, since you presumably don’t know that yet), and minimize with respect to the others. Then release parameter four and minimize again. If the problem admits a “good” physical solution, you will normally find it this way. If it doesn’t work, you may see what is wrong by the following sequence (where \(\mbox{xxx}\) is the expected physical value for parameter four):; MnMigrad migrad(...);; migrad.setValue(4, xxx);; migrad.fix(4);; FunctionMinimum min = migrad();; migrad.release(4);; MnScan scan(...);; std::vector<std::pair<double, double> > points = scan(4);; where \(\mbox{SCAN}\) gives you a picture of \(\mbox{FCN}\) as a function of parameter four alone, the o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/guides/minuit2/Minuit2.html:71741,release,release,71741,root/html534/guides/minuit2/Minuit2.html,https://root.cern,https://root.cern/root/html534/guides/minuit2/Minuit2.html,2,['release'],['release']
Deployability,"ut of all interpreter frames.; 9612 // Here we are entering one, so ++.; 9613 ++fInitialMutex.fRecurseCount;; 9614}; 9615 ; 9616////////////////////////////////////////////////////////////////////////////////; 9617 ; 9618void TCling::ForgetMutexState(); 9619{; 9620 if (!fInitialMutex); 9621 return;; 9622 if (fInitialMutex.fRecurseCount == 0) {; 9623 Error(""ForgetMutexState"", ""mutex state's recurse count already 0!"");; 9624 }; 9625 else if (--fInitialMutex.fRecurseCount == 0) {; 9626 // We have returned from all interpreter frames. Reset the initial lock state.; 9627 fInitialMutex.fState.reset();; 9628 }; 9629}; 9630 ; 9631////////////////////////////////////////////////////////////////////////////////; 9632/// Re-apply the lock count delta that TCling__ResetInterpreterMutex() caused.; 9633 ; 9634void TCling::ApplyToInterpreterMutex(void *delta); 9635{; 9636 if (gInterpreterMutex) {; 9637 if (delta) {; 9638 auto typedDelta = static_cast<MutexStateAndRecurseCountDelta *>(delta);; 9639 std::unique_ptr<MutexStateAndRecurseCountDelta> uniqueP{typedDelta};; 9640 gCoreMutex->Apply(std::move(typedDelta->fDelta));; 9641 // Now that we have the lock, update the global; 9642 R__ASSERT(fInitialMutex.fRecurseCount == 0 && ""Inconsistent state of fInitialMutex! Another thread within Interpreter critical section."");; 9643 std::swap(fInitialMutex, typedDelta->fInitialState);; 9644 } else {; 9645 // This case happens when EnableThreadSafety is first called from; 9646 // the interpreter function we just handled.; 9647 // Since thread safety was not enabled at the time we rewound, there was; 9648 // no lock taken and even-though we should be locking the rest of this; 9649 // interpreter handling/modifying code (since there might be threads in; 9650 // flight), we can't because there would not be any lock guard to release the; 9651 // locks; 9652 if (fInitialMutex || fInitialMutex.fRecurseCount !=0); 9653 Error(""ApplyToInterpreterMutex"",; 9654 ""After returning from user code that turned ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCling_8cxx_source.html:372541,update,update,372541,doc/master/TCling_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCling_8cxx_source.html,1,['update'],['update']
Deployability,"ut visual parameters for this object.; This is a virtual function and all sub-classes are required to; first call the base-element version.; The name of the element pointer is 'x%03d', due to cint limitations.; Three spaces should be used for indentation, same as in; SavePrimitive() methods. void VizDB_Apply(const char* tag); Set visual parameters for this object for given tag. void VizDB_Reapply(); Reset visual parameters for this object from VizDB.; The model object must be already set. void VizDB_UpdateModel(Bool_t update = kTRUE); Copy visual parameters from this element to viz-db model.; If update is set, all clients of the model will be updated to; the new value.; A warning is printed if the model-element fVizModel is not set. void VizDB_Insert(const char* tag, Bool_t replace = kTRUE, Bool_t update = kTRUE); Create a replica of element and insert it into VizDB with given tag.; If replace is true an existing element with the same tag will be replaced.; If update is true, existing client of tag will be updated. TEveElement* GetMaster(); Returns the master element - that is:; - master of projectable, if this is a projected;; - master of compound, if fCompound is set;; - master of first compound parent, if kSCBTakeAnyParentAsMaster bit is set;; If non of the above is true, *this* is returned. void AddParent(TEveElement* re); Add re into the list parents.; Adding parent is subordinate to adding an element.; This is an internal function. void RemoveParent(TEveElement* re); Remove re from the list of parents.; Removing parent is subordinate to removing an element.; This is an internal function. void CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); Check external references to this and eventually auto-destruct; the render-element. void CollectSceneParents(TEveElement::List_t& scenes); Collect all parents of class TEveScene. This is needed to; automatically detect which scenes need to be updated. Overriden in TEveScene to include itse",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveElement.html:16762,update,update,16762,root/html528/TEveElement.html,https://root.cern,https://root.cern/root/html528/TEveElement.html,12,['update'],"['update', 'updated']"
Deployability,"ute tolerance : 1e-09; Relative tolerance : 1e-09; Workspace size : 100000; (max) function calls : 100000; Depending on the algorithm, some of the control parameters might have no effect.; 13.8.3.3 ROOT::Math::AdaptiveIntegratorMultiDim; This class implements an adaptive quadrature integration method for multi dimensional functions. It is described in this paper Genz, A.A. Malik, An adaptive algorithm for numerical integration over an N-dimensional rectangular region, J. Comput. Appl. Math. 6 (1980) 295-302. It is part of the MathCore library. The user can control the relative and absolute tolerance and the maximum allowed number of function evaluation.; 13.8.3.4 ROOT::Math::GSLMCIntegrator; It is a class for performing numerical integration of a multidimensional function. It uses the numerical integration algorithms of GSL, which reimplements the algorithms used in the QUADPACK, a numerical integration package written in Fortran. Plain MC, MISER and VEGAS integration algorithms are supported for integration over finite (hypercubic) ranges. For a detail description of the GSL methods visit the GSL users guide. Specific configuration options (documented in the GSL user guide) for the ROOT::Math::GSLMCIntegration can be set directly in the class, or when using it via the ROOT::Math::IntegratorMultiDim interface, can be defined using the ROOT::Math::IntegratorMultiDimOptions.; 13.9 Function Derivation; There are in ROOT only two classes to perform numerical derivation. One of them is in the MathCore library while the other is in the MathMore wrapping an integration function from the GSL library. * RichardsonDerivator: Implements the Richardson method for numerical integration. It can calculate up to the third derivative of a function. * GSLDerivator of MathMore based on GSL.; 13.10 Numerical Minimization; The algorithms provided by ROOT for numerical integration are implemented following the hierarchy shown in the next image. The left branch of classes are used for one",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:712858,integrat,integration,712858,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,['integrat'],['integration']
Deployability,"uted in pixels units.; In case of a filled ellipse the distance returned is 0 if the point (px,py) is inside the ellipse, and is huge if the point is outside. ; Reimplemented from TObject.; Definition at line 133 of file TEllipse.cxx. ◆ Draw(). void TEllipse::Draw ; (; Option_t * ; option = """"). overridevirtual . Draw this ellipse with its current attributes. ; Reimplemented from TObject.; Definition at line 169 of file TEllipse.cxx. ◆ DrawEllipse(). TEllipse * TEllipse::DrawEllipse ; (; Double_t ; x1, . Double_t ; y1, . Double_t ; r1, . Double_t ; r2, . Double_t ; phimin, . Double_t ; phimax, . Double_t ; theta, . Option_t * ; option = """" . ). virtual . Draw this ellipse with new coordinates. ; Definition at line 177 of file TEllipse.cxx. ◆ ExecuteEvent(). void TEllipse::ExecuteEvent ; (; Int_t ; event, . Int_t ; px, . Int_t ; py . ). overridevirtual . Execute action corresponding to one event. ; This member function is called when a line is clicked with the locator; If Left button clicked on one of the line end points, this point follows the cursor until button is released.; if Middle button clicked, the line is moved parallel to itself until the button is released.; NOTE that support for log scale is not implemented ; Reimplemented from TObject.; Definition at line 201 of file TEllipse.cxx. ◆ GetBBox(). Rectangle_t TEllipse::GetBBox ; (; ). overridevirtual . Return the bounding Box of the Ellipse, currently not taking into account the rotating angle. ; Implements TAttBBox2D.; Definition at line 698 of file TEllipse.cxx. ◆ GetBBoxCenter(). TPoint TEllipse::GetBBoxCenter ; (; ). overridevirtual . Return the center of the Ellipse as TPoint in pixels. ; Implements TAttBBox2D.; Definition at line 713 of file TEllipse.cxx. ◆ GetNoEdges(). Bool_t TEllipse::GetNoEdges ; (; ); const. Return kTRUE if kNoEdges bit is set, kFALSE otherwise. ; Definition at line 646 of file TEllipse.cxx. ◆ GetPhimax(). Double_t TEllipse::GetPhimax ; (; ); const. inline . Definition at line 54",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEllipse.html:21288,release,released,21288,doc/master/classTEllipse.html,https://root.cern,https://root.cern/doc/master/classTEllipse.html,1,['release'],['released']
Deployability,"utes (not copied in ctor); Bool_tRooAbsReal::_boolValue! Transient cache for bool values from tree branches ; UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches ; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooObjCacheManager_cacheMgrThe cache manager; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; TIterator*_compCIter! do not persist; RooListProxy_compCSet; TIterator*_compRIter! do not persist; RooListProxy_compRSet; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; Bool_tRooAbsArg::_isConstant! Cached isConstant status ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooProduct.html:33650,integrat,integration,33650,root/html534/RooProduct.html,https://root.cern,https://root.cern/root/html534/RooProduct.html,1,['integrat'],['integration']
Deployability,"utine; 3661 RecalculateRange();; 3662 }; 3663 if (opaque && dimension ==2) {; 3664 if (zoombox) {; 3665 Double_t x1 = TMath::Min(zoombox->GetX1(), zoombox->GetX2());; 3666 Double_t x2 = TMath::Max(zoombox->GetX1(), zoombox->GetX2());; 3667 Double_t y1 = TMath::Min(zoombox->GetY1(), zoombox->GetY2());; 3668 Double_t y2 = TMath::Max(zoombox->GetY1(), zoombox->GetY2());; 3669 x1 = TMath::Max(x1,xaxis->GetXmin());; 3670 x2 = TMath::Min(x2,xaxis->GetXmax());; 3671 y1 = TMath::Max(y1,yaxis->GetXmin());; 3672 y2 = TMath::Min(y2,yaxis->GetXmax());; 3673 if (x1<x2 && y1<y2) {; 3674 xaxis->SetRangeUser(x1, x2);; 3675 yaxis->SetRangeUser(y1, y2);; 3676 }; 3677 zoombox.reset();; 3678 }; 3679 }; 3680 gPad->Modified(kTRUE);; 3681 if (opaque) gVirtualX->SetLineColor(-1);; 3682 ; 3683 break;; 3684 ; 3685 case kButton1Locate:; 3686 ; 3687 ExecuteEvent(kButton1Down, px, py);; 3688 ; 3689 while (true) {; 3690 px = py = 0;; 3691 event = gVirtualX->RequestLocator(1, 1, px, py);; 3692 ; 3693 ExecuteEvent(kButton1Motion, px, py);; 3694 ; 3695 if (event != -1) { // button is released; 3696 ExecuteEvent(kButton1Up, px, py);; 3697 return;; 3698 }; 3699 }; 3700 }; 3701}; 3702 ; 3703////////////////////////////////////////////////////////////////////////////////; 3704/// Get a contour (as a list of TGraphs) using the Delaunay triangulation.; 3705 ; 3706TList *THistPainter::GetContourList(Double_t contour) const; 3707{; 3708 // Check if fH contains a TGraphDelaunay2D; 3709 TList *hl = fH->GetListOfFunctions();; 3710 TGraphDelaunay2D *dt = (TGraphDelaunay2D*)hl->FindObject(""TGraphDelaunay2D"");; 3711 // try with the old painter; 3712 TGraphDelaunay *dtOld = nullptr;; 3713 if (!dt) dtOld = (TGraphDelaunay*)hl->FindObject(""TGraphDelaunay"");; 3714 ; 3715 if (!dt && !dtOld) return nullptr;; 3716 ; 3717 gCurrentHist = fH;; 3718 ; 3719 if (!fGraph2DPainter); 3720 ((THistPainter*)this)->fGraph2DPainter = dt ? std::make_unique<TGraph2DPainter>(dt) : std::make_unique<TGraph2DPainter>(dtOld);; 3721 ; 3722 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:143810,release,released,143810,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['release'],['released']
Deployability,"ution. ;  ; bool Init (const TUnuranDiscrDist &distr, const std::string &method=""auto"");  Initialize method for continuous one-dimensional discrete distribution. ;  ; bool Init (const TUnuranEmpDist &distr, const std::string &method=""empk"");  Initialize method for continuous empirical distribution. ;  ; bool Init (const TUnuranMultiContDist &distr, const std::string &method=""vnrou"");  Initialize method for continuous multi-dimensional distribution. ;  ; bool InitBinomial (unsigned int ntot, double prob, const std::string &method=""dstd"");  Initialize method for the Binomial distribution. ;  ; bool InitPoisson (double mu, const std::string &method=""dstd"");  Initialize method for the Poisson distribution. ;  ; bool IsDistCont () const;  Return true for a univariate continuous distribution. ;  ; bool IsDistDiscrete () const;  Return true for a discrete distribution. ;  ; bool IsDistEmpirical () const;  Return true for an empirical distribution. ;  ; bool IsDistMultiCont () const;  Return true for a multivariate continuous distribution. ;  ; const std::string & MethodName () const;  used Unuran method ;  ; TUnuran & operator= (const TUnuran &rhs)=delete;  ; TUnuran & operator= (TUnuran &&rhs)=delete;  ; bool ReInitDiscrDist (unsigned int npar, double *params);  Reinitialize UNURAN by changing the distribution parameters but maintaining same distribution and method. ;  ; double Sample ();  Sample 1D distribution. ;  ; int SampleDiscr ();  Sample discrete distributions. ;  ; bool SampleMulti (double *x);  Sample multidimensional distributions. ;  ; bool SetLogLevel (unsigned int iflag=1);  set log level ;  ; bool SetLogStream ();  set stream for log and error (not yet implemented) ;  ; void SetRandom (TRandom *r);  Set the random engine. ;  ; void SetSeed (unsigned int seed);  set the seed for the random number generator ;  . Protected Member Functions; bool SetContDistribution (const TUnuranContDist &dist);  ; bool SetDiscreteDistribution (const TUnuranDiscrDist &dist);  ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUnuran.html:3745,continuous,continuous,3745,doc/master/classTUnuran.html,https://root.cern,https://root.cern/doc/master/classTUnuran.html,1,['continuous'],['continuous']
Deployability,"uto;  ; RooArgSet * _ownedComponents = nullptr;  ; bool _prohibitServerRedirect = false;  Set of owned component. ;  ; RooRefArray _proxyList;  ; ProxyListCache _proxyListCache;  ; RefCountList_t _serverList;  ; bool _shapeDirty = true;  ; std::map< std::string, std::string > _stringAttrib;  ; bool _valueDirty = true;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Static Protected Attributes; static Int_t _cacheAllNDim;  ! Cache all integrals with given numeric dimension ;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . Private Member Functions; void addNumIntDep (RooAbsArg const &arg);  Sort numeric integration variables in summation and integration lists. ;  . Additional Inherited Members;  Public Types inherited from RooAbsReal; enum  ErrorLoggingMode { PrintErrors; , CollectErrors; , CountErrors; , Ignore; };  ; enum  ScaleType { Raw; , Relative; , NumEvent; , RelativeExpected; };  ; using value_type = double;  ;  Public Types inherited from RooAbsArg; enum  CacheMode { Always =0; , NotAdvised =1; , Never =2; };  ; enum  ConstOpCode { Activate =0; , DeActivate =1; , ConfigChange =2; , ValueChange =3; };  ; enum  OperMode { Auto =0; , AClean =1; , ADirty =2; };  ; using RefCountList_t = RooSTLRefCountList< RooAbsArg >;  ; using RefCountListLegacyIterator_t = TIteratorToSTLInterface< RefCountList_t::Container_t >;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << (",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooRealIntegral.html:61094,integrat,integration,61094,doc/master/classRooRealIntegral.html,https://root.cern,https://root.cern/doc/master/classRooRealIntegral.html,2,['integrat'],['integration']
Deployability,"utoExec(). void TCanvas::ToggleAutoExec ; (; ). virtual . Toggle pad auto execution of list of TExecs. ; Definition at line 2409 of file TCanvas.cxx. ◆ ToggleEditor(). void TCanvas::ToggleEditor ; (; ). virtual . Toggle editor. ; Definition at line 2440 of file TCanvas.cxx. ◆ ToggleEventStatus(). void TCanvas::ToggleEventStatus ; (; ). virtual . Toggle event statusbar. ; Definition at line 2418 of file TCanvas.cxx. ◆ ToggleToolBar(). void TCanvas::ToggleToolBar ; (; ). virtual . Toggle toolbar. ; Definition at line 2429 of file TCanvas.cxx. ◆ ToggleToolTips(). void TCanvas::ToggleToolTips ; (; ). virtual . Toggle tooltip display. ; Definition at line 2451 of file TCanvas.cxx. ◆ Update(). void TCanvas::Update ; (; ). overridevirtual . Update canvas pad buffers. ; Implements TVirtualPad.; Definition at line 2476 of file TCanvas.cxx. ◆ UpdateAsync(). void TCanvas::UpdateAsync ; (; ). overridevirtual . Asynchronous pad update. ; In case of web-based canvas triggers update of the canvas on the client side, but does not wait that real update is completed. Avoids blocking of caller thread. Have to be used if called from other web-based widget to avoid logical dead-locks. In case of normal canvas just canvas->Update() is performed. ; Implements TVirtualPad.; Definition at line 2532 of file TCanvas.cxx. ◆ UseCurrentStyle(). void TCanvas::UseCurrentStyle ; (; ). overridevirtual . Force a copy of current style for all objects in canvas. ; Reimplemented from TObject.; Definition at line 1183 of file TCanvas.cxx. ◆ UseGL(). Bool_t TCanvas::UseGL ; (; ); const. inline . Definition at line 228 of file TCanvas.h. Friends And Related Symbol Documentation. ◆ TCanvasImp. friend class TCanvasImp. friend . Definition at line 25 of file TCanvas.h. ◆ TInterpreter. friend class TInterpreter. friend . Definition at line 28 of file TCanvas.h. ◆ TThread. friend class TThread. friend . Definition at line 27 of file TCanvas.h. ◆ TWebCanvas. friend class TWebCanvas. friend . Definition at line 26",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTCanvas.html:93260,update,update,93260,doc/v632/classTCanvas.html,https://root.cern,https://root.cern/doc/v632/classTCanvas.html,2,['update'],['update']
Deployability,"utoExec(). void TCanvas::ToggleAutoExec ; (; ). virtual . Toggle pad auto execution of list of TExecs. ; Definition at line 2422 of file TCanvas.cxx. ◆ ToggleEditor(). void TCanvas::ToggleEditor ; (; ). virtual . Toggle editor. ; Definition at line 2453 of file TCanvas.cxx. ◆ ToggleEventStatus(). void TCanvas::ToggleEventStatus ; (; ). virtual . Toggle event statusbar. ; Definition at line 2431 of file TCanvas.cxx. ◆ ToggleToolBar(). void TCanvas::ToggleToolBar ; (; ). virtual . Toggle toolbar. ; Definition at line 2442 of file TCanvas.cxx. ◆ ToggleToolTips(). void TCanvas::ToggleToolTips ; (; ). virtual . Toggle tooltip display. ; Definition at line 2464 of file TCanvas.cxx. ◆ Update(). void TCanvas::Update ; (; ). overridevirtual . Update canvas pad buffers. ; Implements TVirtualPad.; Definition at line 2489 of file TCanvas.cxx. ◆ UpdateAsync(). void TCanvas::UpdateAsync ; (; ). overridevirtual . Asynchronous pad update. ; In case of web-based canvas triggers update of the canvas on the client side, but does not wait that real update is completed. Avoids blocking of caller thread. Have to be used if called from other web-based widget to avoid logical dead-locks. In case of normal canvas just canvas->Update() is performed. ; Implements TVirtualPad.; Definition at line 2545 of file TCanvas.cxx. ◆ UseCurrentStyle(). void TCanvas::UseCurrentStyle ; (; ). overridevirtual . Force a copy of current style for all objects in canvas. ; Reimplemented from TObject.; Definition at line 1185 of file TCanvas.cxx. ◆ UseGL(). Bool_t TCanvas::UseGL ; (; ); const. inline . Definition at line 228 of file TCanvas.h. Friends And Related Symbol Documentation. ◆ TCanvasImp. friend class TCanvasImp. friend . Definition at line 25 of file TCanvas.h. ◆ TInterpreter. friend class TInterpreter. friend . Definition at line 28 of file TCanvas.h. ◆ TThread. friend class TThread. friend . Definition at line 27 of file TCanvas.h. ◆ TWebCanvas. friend class TWebCanvas. friend . Definition at line 26",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCanvas.html:93705,update,update,93705,doc/master/classTCanvas.html,https://root.cern,https://root.cern/doc/master/classTCanvas.html,2,['update'],['update']
Deployability,"utor p1; // will use 2 threads; ROOT::TThreadExecutor p2(/*nThreads=*/8); // will still use 2 threads; Note that the preferred way to steer ROOT’s concurrency level is still through ROOT::EnableImplicitMT or by passing the appropriate parameter to executors’ constructors, as in TThreadExecutor::TThreadExecutor.; See the discussion at ROOT-11014 for more context.; Dynamic Path: ROOT_LIBRARY_PATH; A new way to set ROOT’s “Dynamic Path” was added: the environment variable ROOT_LIBRARY_PATH. On Unix it should contain a colon separated list of paths, on Windows a semicolon separated list. It is intended to be cross platform and to be specific to ROOT (and thus not interfere with the system’s shared linker). The final “Dynamic Path” is now composed of these sources in order:. ROOT_LIBRARY_PATH environment variable; System specific shared linker environment variables like LD_LIBRARY_PATH, LIBPATH, or PATH.; Setting from rootrc; ROOT’s builtin library directory. Interpreter. cling’s LLVM is upgraded to version 9.0; New interface to enable/disable optional cling features. Currently, it can be used to enable/disable support for redefinitions. See this issue for more information. Multithreading. Fix an uninitialized variable in global read-write lock which could have caused deadlocks or crashes in some rare cases.; Default global read-write lock transitioned to new implementation based on TBB thread local storage when TBB is available on supported platforms (all except Windows). This gives an O(10%) performance improvement for some typical RDataFrame scenarios with 256 threads due to reduced lock contention. I/O Libraries. Exclusive use of the global lock is reduced or migrated to finer grained read and write locks in a few hotspots that occur during file opening/closing or task initialization in RDataFrame. This can lead to O(100x) improvements for some typical RDataFrame scenarios with 256 threads due to massively reduced lock contention. TTree Libraries. TTree now supports t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v624/release-notes.html:4827,upgrade,upgraded,4827,doc/v624/release-notes.html,https://root.cern,https://root.cern/doc/v624/release-notes.html,1,['upgrade'],['upgraded']
Deployability,"utos = -300000000); virtual voidTTree::SetBasketSize(const char* bname, Int_t buffsize = 16000); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual Int_tSetBranchAddress(const char* bname, void* add, TClass* realClass, EDataType datatype, Bool_t isptr); virtual Int_tSetBranchAddress(const char* bname, void* add, TBranch** ptr, TClass* realClass, EDataType datatype, Bool_t isptr); virtual voidSetBranchStatus(const char* bname, Bool_t status = 1, UInt_t* found = 0); static voidTTree::SetBranchStyle(Int_t style = 1); virtual voidTTree::SetCacheEntryRange(Long64_t first, Long64_t last); virtual voidTTree::SetCacheLearnEntries(Int_t n = 10); virtual voidSetCacheSize(Long64_t cacheSize); virtual voidTTree::SetChainOffset(Long64_t offset = 0); virtual voidTTree::SetCircular(Long64_t maxEntries); virtual voidTTree::SetDebug(Int_t level = 1, Long64_t min = 0, Long64_t max = 9999999)MENU ; virtual voidTTree::SetDefaultEntryOffsetLen(Int_t newdefault, Bool_t updateExisting = kFALSE); virtual voidSetDirectory(TDirectory* dir); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual Long64_tTTree::SetEntries(Long64_t n = -1); virtual voidSetEntryList(TEntryList* elist, Option_t* opt = """"); virtual voidSetEntryListFile(const char* filename = """", Option_t* opt = """"); virtual voidTTree::SetEstimate(Long64_t nentries = 1000000); virtual voidSetEventList(TEventList* evlist); virtual voidTTree::SetFileNumber(Int_t number = 0); virtual voidTAttFill::SetFillAttributes()MENU ; virtual voidTAttFill::SetFillColor(Color_t fcolor); virtual voidTAttFill::SetFillColorAlpha(Color_t fcolor, Float_t falpha); virtual voidTAttFill::SetFillStyle(Style_t fstyle); virtual voidTAttLine::SetLineAttributes()MENU ; virtual voidTAttLine::SetLineColor(Color_t lcolor); virtual voidTAttLine::SetLineColorAlpha(Color_t lcolor, Float_t lalpha); virtual voidTAttLine::SetLineStyle(Style_t lstyle); virtual voidTAttLine::SetLin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TChain.html:16646,update,updateExisting,16646,root/html534/TChain.html,https://root.cern,https://root.cern/root/html534/TChain.html,1,['update'],['updateExisting']
Deployability,"utput = ( 1 , 100 , 10 ) Activation Function = Tanh; Layer 3 DENSE Layer: ( Input = 10 , Width = 4 ) Output = ( 1 , 100 , 4 ) Activation Function = Identity; : Using 3200 events for training and 800 for testing; : Compute initial loss on the validation data ; : Training phase 1 of 1: Optimizer ADAM (beta1=0.9,beta2=0.999,eps=1e-07) Learning rate = 0.001 regularization 0 minimum error = 0.691476; : --------------------------------------------------------------; : Epoch | Train Err. Val. Err. t(s)/epoch t(s)/Loss nEvents/s Conv. Steps; : --------------------------------------------------------------; : Start epoch iteration ...; : 1 Minimum Test error found - save the configuration ; : 1 | 0.605916 0.542204 0.0761789 0.00657979 45977.6 0; : 2 Minimum Test error found - save the configuration ; : 2 | 0.512732 0.499825 0.0771995 0.00657724 45311.5 0; : 3 Minimum Test error found - save the configuration ; : 3 | 0.477495 0.458718 0.0776312 0.00665553 45085.9 0; : 4 Minimum Test error found - save the configuration ; : 4 | 0.438338 0.418147 0.0780597 0.00669006 44837 0; : 5 Minimum Test error found - save the configuration ; : 5 | 0.407569 0.391703 0.0786075 0.00678976 44557.2 0; : 6 Minimum Test error found - save the configuration ; : 6 | 0.387736 0.373696 0.0792581 0.00678916 44156.9 0; : 7 Minimum Test error found - save the configuration ; : 7 | 0.373399 0.360485 0.0791536 0.00677002 44208.9 0; : 8 Minimum Test error found - save the configuration ; : 8 | 0.362792 0.352336 0.0796639 0.00682572 43933 0; : 9 Minimum Test error found - save the configuration ; : 9 | 0.353594 0.340526 0.0805399 0.00700876 43519 0; : 10 Minimum Test error found - save the configuration ; : 10 | 0.345712 0.336826 0.080966 0.0069933 43259.2 0; : 11 Minimum Test error found - save the configuration ; : 11 | 0.338399 0.329567 0.0802544 0.00691181 43630.9 0; : 12 Minimum Test error found - save the configuration ; : 12 | 0.333122 0.322325 0.0804981 0.00689735 43477.8 0; : 13 Minimum Test error ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAMulticlass_8C.html:15173,configurat,configuration,15173,doc/master/TMVAMulticlass_8C.html,https://root.cern,https://root.cern/doc/master/TMVAMulticlass_8C.html,1,['configurat'],['configuration']
Deployability,"utputFilePrefix ();  retrieve prefix for output files ;  ; std::map< std::string, double > & GetParamValues ();  get map: parameter name <--> parameter value ;  ; std::string GetPOI (unsigned int i=0);  get name of PoI at given index ;  ; std::vector< std::string > & GetPOIList ();  get vector of PoI names ;  ; std::vector< std::string > GetPreprocessFunctions () const;  Returns a list of defined preprocess function expressions. ;  ; void SetBinHigh (int BinHigh);  ; void SetBinLow (int BinLow);  ; void SetExportOnly (bool ExportOnly) R__DEPRECATED(6;  Do not produce any plots or tables, just save the model. ;  ; void SetFunctionObjects (std::vector< RooStats::HistFactory::PreprocessFunction > objects);  ; void SetLumi (double Lumi);  set integrated luminosity used to normalise histograms (if NormalizeByTheory is true for this sample) ;  ; void SetLumiRelErr (double RelErr);  set relative uncertainty on luminosity ;  ; void SetOutputFilePrefix (const std::string &prefix);  set output prefix ;  ; void SetParamValue (const std::string &param, double value);  Set a parameter to a specific value (And optionally fix it) ;  ; void SetPOI (const std::string &POI);  insert PoI at beginning of vector of PoIs ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1HistFactory_1_1Measurement.html:3026,integrat,integrated,3026,doc/master/classRooStats_1_1HistFactory_1_1Measurement.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1HistFactory_1_1Measurement.html,1,['integrat'],['integrated']
Deployability,"utput ; itOutputBegin, . ItOutput ; itOutputEnd, . ItTruth ; itTruthBegin, . ItTruth ; , . ItDelta ; itDelta, . ItDelta ; itDeltaEnd, . InvFnc ; invFnc, . double ; patternWeight . ). sum of squares error function ; Definition at line 382 of file NeuralNet.icc. ◆ uniformDouble() [1/2]. template<typename Container , typename T > . void TMVA::DNN::uniformDouble ; (; Container & ; container, . T ; maxValue . ). Definition at line 42 of file NeuralNet.icc. ◆ uniformDouble() [2/2]. double TMVA::DNN::uniformDouble ; (; double ; minValue, . double ; maxValue . ). Definition at line 43 of file NeuralNet.cxx. ◆ uniformFromTo(). template<typename T > . T TMVA::DNN::uniformFromTo ; (; T ; from, . T ; to . ). Definition at line 34 of file NeuralNet.icc. ◆ update() [1/3]. template<typename LAYERDATA > . void TMVA::DNN::update ; (; const LAYERDATA & ; prevLayerData, . LAYERDATA & ; currLayerData, . double ; factorWeightDecay, . EnumRegularization ; regularization . ). update the node values ; Definition at line 600 of file NeuralNet.icc. ◆ update() [2/3]. template<typename ItSource , typename ItDelta , typename ItTargetGradient , typename ItGradient > . void TMVA::DNN::update ; (; ItSource ; itSource, . ItSource ; itSourceEnd, . ItDelta ; itTargetDeltaBegin, . ItDelta ; itTargetDeltaEnd, . ItTargetGradient ; itTargetGradientBegin, . ItGradient ; itGradient . ). update the gradients ; Definition at line 183 of file NeuralNet.icc. ◆ update() [3/3]. template<EnumRegularization Regularization, typename ItSource , typename ItDelta , typename ItTargetGradient , typename ItGradient , typename ItWeight > . void TMVA::DNN::update ; (; ItSource ; itSource, . ItSource ; itSourceEnd, . ItDelta ; itTargetDeltaBegin, . ItDelta ; itTargetDeltaEnd, . ItTargetGradient ; itTargetGradientBegin, . ItGradient ; itGradient, . ItWeight ; itWeight, . double ; weightDecay . ). update the gradients, using regularization ; Definition at line 237 of file NeuralNet.icc. ◆ weightDecay(). template<typename ItWei",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceTMVA_1_1DNN.html:34521,update,update,34521,doc/master/namespaceTMVA_1_1DNN.html,https://root.cern,https://root.cern/doc/master/namespaceTMVA_1_1DNN.html,2,['update'],['update']
Deployability,"utton group to the frame f. TGComboBox * AddDateFormatEntry(TGCompositeFrame* f, Int_t id); Add a date format combo box to the frame f. TGCheckButton * AddCheckButton(TGCompositeFrame* f, const char* s, Int_t id, Int_t e1 = 0, Int_t e2 = 2); Add a check button to the frame f. TGTextEntry * AddTextEntry(TGCompositeFrame* f, const char* s, Int_t id); Add a text entry to the frame f. A caption can be added. TGComboBox * AddPaperSizeEntry(TGCompositeFrame* f, Int_t id); Add a prefered paper size combo box to the frame f. void DoMenu(Int_t menuID); Slot called when an item of the menu is selected. void DoImportMacro(Bool_t create); Slot called to import a style from a C++ macro file. If create=kTRUE,; a new style is created. Otherwise, the current style is reseted. void DoListSelect(); Slot called when the user select an item in the available styles' list.; Update the preview, the editor, the status bar. The current selected; style is changed. void DoRealTime(Bool_t b); Slot called when the user click on the run time update check button.; If b=kTRUE, the user asks for a real time preview. void DoPreview(Bool_t b); Slot called when the user click on the preview check button. If b=kTRUE,; the user asks for a preview, otherwise he wants to close it. void DoPreviewClosed(); Slot called to close the preview, via the preview check button, or; when the preview window is closed via the window manager. void DoMakeDefault(); Slot called to make the current selected style (in the ComboBox); become gStyle. void DoApplyOnSelect(Int_t i); Slot called to choose on which object(s) the 'Apply' button will; have an effect. void DoApplyOn(); Slot called when the user clicks on the 'Apply' button. Apply the; current selected style to the specified object(s). void DoMoreLess(); Slot called when the user try to show or hide the editor part of the; style manager. void DoEditionUpdatePreview(); Slot called when the user clicks on the 'Update preview' button. void DoChangeTab(Int_t i); Slot call",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TStyleManager.html:59921,update,update,59921,root/html528/TStyleManager.html,https://root.cern,https://root.cern/root/html528/TStyleManager.html,4,['update'],['update']
Deployability,"utton group to the frame f. TGComboBox * AddDateFormatEntry(TGCompositeFrame* f, Int_t id); Add a date format combo box to the frame f. TGCheckButton * AddCheckButton(TGCompositeFrame* f, const char* s, Int_t id, Int_t e1 = 0, Int_t e2 = 2); Add a check button to the frame f. TGTextEntry * AddTextEntry(TGCompositeFrame* f, const char* s, Int_t id); Add a text entry to the frame f. A caption can be added. TGComboBox * AddPaperSizeEntry(TGCompositeFrame* f, Int_t id); Add a prefered paper size combo box to the frame f. void DoMenu(Int_t menuID); Slot called when an item of the menu is selected. void DoImportMacro(Bool_t create); Slot called to import a style from a C++ macro file. If create=kTRUE,; a new style is created. Otherwise, the current style is reseted. void DoListSelect(); Slot called when the user select an item in the available styles' list.; Update the preview, the editor, the status bar. The current selected; style is changed. void DoRealTime(Bool_t b); Slot called when the user click on the run time update check button.; If b=kTRUE, the user asks for a real time preview. void DoPreview(Bool_t b); Slot called when the user click on the preview check button. If b=kTRUE,; the user asks for a preview, otherwise they want to close it. void DoPreviewClosed(); Slot called to close the preview, via the preview check button, or; when the preview window is closed via the window manager. void DoMakeDefault(); Slot called to make the current selected style (in the ComboBox); become gStyle. void DoApplyOnSelect(Int_t i); Slot called to choose on which object(s) the 'Apply' button will; have an effect. void DoApplyOn(); Slot called when the user clicks on the 'Apply' button. Apply the; current selected style to the specified object(s). void DoMoreLess(); Slot called when the user try to show or hide the editor part of the; style manager. void DoEditionUpdatePreview(); Slot called when the user clicks on the 'Update preview' button. void DoChangeTab(Int_t i); Slot cal",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TStyleManager.html:61061,update,update,61061,root/html602/TStyleManager.html,https://root.cern,https://root.cern/root/html602/TStyleManager.html,2,['update'],['update']
Deployability,"v/www/htdocs” is root directory for web server. Than one should be able to open address:; http://apache_host_name/root.app/; 1.5.2 Configure fastcgi with lighttpd; An example of configuration file for lighttpd server is:; server.modules += ( ""mod_fastcgi"" ); fastcgi.server = (; ""/root.app"" =>; (( ""host"" => ""192.168.1.11"",; ""port"" => 9000,; ""check-local"" => ""disable"",; ""docroot"" => ""/""; )); ); Be aware, that with lighttpd one should specify IP address of the host, where ROOT application is running. Address of the ROOT application will be following:; http://lighttpd_host_name/root.app/; 1.6 Integration with existing applications; In many practical cases no change of existing code is required. Opened files (and all objects inside), existing canvas and histograms are automatically scanned by the server and will be available to the users. If necessary, any object can be registered directly to the server with a THttpServer::Register() call.; Central point of integration - when and how THttpServer get access to data from a running application. By default it is done during the gSystem->ProcessEvents() call - THttpServer uses a synchronous timer which is activated every 100 ms. Such approach works perfectly when running macros in an interactive ROOT session.; If an application runs in compiled code and does not contain gSystem->ProcessEvents() calls, two method are available.; 1.6.1 Asynchronous timer; The first method is to configure an asynchronous timer for the server, like for example:; serv->SetTimer(100, kFALSE);; Then, the timer will be activated even without any gSystem->ProcessEvents() method call. The main advantage of such method is that the application code can be used without any modifications. But there is no control when access to the application data is performed. It could happen just in-between of TH1::Fill() calls and an histogram object may be incomplete. Therefore such method is not recommended.; 1.6.2 Regular calls of THttpServer::ProcessRequests() metho",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/guides/HttpServer/HttpServer.html:7885,integrat,integration,7885,root/html534/guides/HttpServer/HttpServer.html,https://root.cern,https://root.cern/root/html534/guides/HttpServer/HttpServer.html,1,['integrat'],['integration']
Deployability,"vNode ; (; void ; ); const. inline . previous sister node ; Definition at line 111 of file TUnfoldBinning.h. ◆ GetRootNode() [1/2]. TUnfoldBinning * TUnfoldBinning::GetRootNode ; (; void ; ). protected . return root node ; Definition at line 546 of file TUnfoldBinning.cxx. ◆ GetRootNode() [2/2]. TUnfoldBinning const * TUnfoldBinning::GetRootNode ; (; void ; ); const. return root node of the binnig scheme ; Definition at line 555 of file TUnfoldBinning.cxx. ◆ GetStartBin(). Int_t TUnfoldBinning::GetStartBin ; (; void ; ); const. inline . first bin of this node ; Definition at line 147 of file TUnfoldBinning.h. ◆ GetTH1xNumberOfBins(). Int_t TUnfoldBinning::GetTH1xNumberOfBins ; (; Bool_t ; originalAxisBinning = kTRUE, . const char * ; axisSteering = nullptr . ); const. return the number of histogram bins required when storing this binning in a one-dimensional histogram ; Parameters. [in]originalAxisBinningif true, try to have the histogram axis reflect precisely the relevant axis of the binnnig scheme ; [in]axisSteeringsteering to integrate over axis and/or skip underflow and overflow bins. returns the number of bins of the TH1, where the underflow/overflow are not used, unless the distribution has only one axis and originalAxisBinning=true) ; axisSteering is a string as follows: ""axis[options];axis[options];..."" where: axis = name or * is an identifier of an axis (* matches all) and: options is any combination of the letters C,U,O (other letters are ignored). ; The letter C means that the corresponding axis is collapsed into one bin, i.e. one dimension is removed from the counting. The letters U,O remove for the matching axis the underflow.overflow bins from the counting ; Definition at line 667 of file TUnfoldBinning.cxx. ◆ GetTHxxBinning(). Int_t TUnfoldBinning::GetTHxxBinning ; (; Int_t ; maxDim, . Int_t * ; axisBins, . Int_t * ; axisList, . const char * ; axisSteering . ); const. protected . calculate properties of a THxx histogram to store this binning ; Parame",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUnfoldBinning.html:50669,integrat,integrate,50669,doc/master/classTUnfoldBinning.html,https://root.cern,https://root.cern/doc/master/classTUnfoldBinning.html,1,['integrat'],['integrate']
Deployability,"va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Private Attributes; SeparationBase * fSepType;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Attributes inherited from TMVA::PDEFoamDiscriminant; UInt_t fClass;  ;  Protected Attributes inherited from TMVA::PDEFoam; Double_t * fAlpha;  [fDim] Internal parameters of the hyperrectangle ;  ; PDEFoamCell ** fCells;  [fNCells] Array of ALL cells ;  ; Int_t fDim;  Dimension of the integration/simulation space. ;  ; PDEFoamDensityBase * fDistr;  ! distribution of training events ;  ; EDTSeparation fDTSeparation;  BACKWARDS COMPATIBILITY: split cells according to decision tree logic. ;  ; Int_t fEvPerBin;  Maximum number of effective (wt=1) events per bin. ;  ; Bool_t fFillFoamWithOrigWeights;  BACKWARDS COMPATIBILITY: fill the foam with boost or orig. weights. ;  ; EFoamType fFoamType;  BACKWARDS COMPATIBILITY: type of foam. ;  ; TObjArray * fHistEdg;  Histograms of wt, one for each cell edge. ;  ; Int_t * fInhiDiv;  ! [fDim] Flags for inhibiting cell division ;  ; Int_t fLastCe;  Index of the last cell. ;  ; MsgLogger * fLogger;  ! message logger ;  ; Int_t * fMaskDiv;  ! [fDim] Dynamic Mask for cell division ;  ; UInt_t fMaxDepth;  maximum depth of cell tree ;  ; TString fName;  Name",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1PDEFoamDecisionTree.html:17904,integrat,integration,17904,doc/master/classTMVA_1_1PDEFoamDecisionTree.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1PDEFoamDecisionTree.html,1,['integrat'],['integration']
Deployability,"vable. Make sure that this binning is the same as the one of the dataset that should be fit. Use RooRealVar::setBinning() to adapt it. Instruct test statistics to carry out this wrapping automatically: pdf.fitTo(data, IntegrateBins(<precision>));; RooAbsPdf::fitToRooFit::OwningPtr< RooFitResult > fitTo(RooAbsData &data, CmdArgs_t const &... cmdArgs)Fit PDF to given dataset.Definition RooAbsPdf.h:157; RooBinSamplingPdf::pdfconst RooAbsPdf & pdf() constDefinition RooBinSamplingPdf.h:110; This method is especially useful when used with a simultaneous PDF, since each component will automatically be wrapped, depending on the value of precision:; precision < 0.: None of the PDFs are touched, bin sampling is off.; precision = 0.: Continuous PDFs that are fit to a RooDataHist are wrapped into a RooBinSamplingPdf. The target precision forwarded to the integrator is 1.E-4 (the default argument of the constructor).; precision > 0.: All continuous PDFs are automatically wrapped into a RooBinSamplingPdf, regardless of what data they are fit to (see next paragraph). The same ‘'precision’` is used for all integrators. Simulating a binned fit using RooDataSet; Some frameworks use unbinned data (RooDataSet) to simulate binned datasets. By adding one entry for each bin centre with the appropriate weight, one can achieve the same result as fitting with RooDataHist. In this case, however, RooFit cannot auto-detect that a binned fit is running, and that an integration over the bin is desired (note that there are no bins to integrate over in this kind of dataset).; In this case, IntegrateBins(>0.) needs to be used, and the desired binning needs to be assigned to the observable of the dataset: RooRealVar x(""x"", ""x"", 0., 5.);; x.setBins(10);; ; // <create dataset and model>; ; model.fitTo(data, IntegrateBins(>0.));; RooRealVarVariable that can be changed from the outside.Definition RooRealVar.h:37; xDouble_t x[n]Definition legend1.C:17; See alsoRooAbsPdf::fitTo() . IntegrateBins(); NoteThis",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBinSamplingPdf.html:3303,continuous,continuous,3303,doc/master/classRooBinSamplingPdf.html,https://root.cern,https://root.cern/doc/master/classRooBinSamplingPdf.html,1,['continuous'],['continuous']
Deployability,"vables listed in iset. ; If no nset argument is given the c.d.f normalization is constructed over the integrated observables, so that its maximum value is precisely 1. It is also possible to choose a different normalization for multi-dimensional p.d.f.s: eg. for a pdf f(x,y,z) one can construct a partial cdf c(x,y) that only when integrated itself over z results in a maximum value of 1. To construct such a cdf pass z as argument to the optional nset argument ; Definition at line 2468 of file RooAbsPdf.cxx. ◆ createCdf() [2/2]. RooAbsPdf::createCdf ; (; const RooArgSet & ; iset, . const RooCmdArg & ; arg1, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ). Create an object that represents the integral of the function over one or more observables listed in iset. ; The actual integration calculation is only performed when the return object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over; The following named arguments are accepted . Type of CmdArg Effect on CDF . SupNormSet(const RooArgSet&) Observables over which should be normalized in addition to the integration observables . ScanNumCdf() Apply scanning technique if cdf integral involves numeric integration [ default ] . ScanAllCdf() Always apply scanning technique . ScanNoCdf() Never apply scanning technique . ScanParameters(Int_t nbins, Int_t intOrder) Parameters for scanning technique of making CDF: number of sampled bins and order of interpolation applied on numeric cdf . PyROOT; The RooAbsPdf::createCdf() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Definition at line 2490 of file RooAbsPdf.cxx. ◆ createExpectedEventsFunc(). std::u",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsPdf.html:85169,integrat,integration,85169,doc/master/classRooAbsPdf.html,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html,1,['integrat'],['integration']
Deployability,"val (eg. 0.95 for a 95% Confidence Interval). { SetTestSize(1.-cl); }. Double_t Size() const; Get the size of the test (eg. rate of Type I error). { return fSize; }. Double_t ConfidenceLevel() const; Get the Confidence level for the test. { return 1.-fSize; }. void SetLeftSideTailFraction(Double_t leftSideFraction); set the fraction of probability content on the left tail; Central limits use 0.5 (default case); for upper limits it is 0 and 1 for lower limit; For shortest intervals a negative value (i.e. -1) must be given. {fLeftSideFraction = leftSideFraction;}. void SetShortestInterval(); set the Bayesian calculator to compute the shorest interval (default is central interval); to switch off SetLeftSideTailFraction to the rght value. { fLeftSideFraction = -1; }. void SetBrfPrecision(double precision); set the precision of the Root Finder. { fBrfPrecision = precision; }. void SetScanOfPosterior(int nbin = 100); use directly the approximate posterior function obtained by binning it in nbins; by default the cdf is used by integrating the posterior; if a value of nbin <= 0 the cdf function will be used. { fNScanBins = nbin; }. void SetNumIters(Int_t numIters); set the number of iterations when running a MC integration algorithm; If not set use default algorithmic values; In case of ToyMC sampling of the nuisance the value is 100; In case of using the GSL MCintegrations types the default value is; defined in ROOT::Math::IntegratorMultiDimOptions::DefaultNCalls(). { fNumIterations = numIters; }. void ForceNuisancePdf(RooAbsPdf& pdf); force the nuisance pdf when using the toy mc sampling. { fNuisancePdf = &pdf; }. » Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id: BayesianCalculator.h 39975 2011-06-26 22:49:46Z moneta $ » Last generated: 2011-11-03 20:09; This page has been automatically generated. For comments or suggestions regarding the documentation or ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooStats__BayesianCalculator.html:17086,integrat,integrating,17086,root/html532/RooStats__BayesianCalculator.html,https://root.cern,https://root.cern/root/html532/RooStats__BayesianCalculator.html,1,['integrat'],['integrating']
Deployability,"val (eg. 0.95 for a 95% Confidence Interval). { SetTestSize(1.-cl); }. Double_t Size() const; Get the size of the test (eg. rate of Type I error). { return fSize; }. Double_t ConfidenceLevel() const; Get the Confidence level for the test. { return 1.-fSize; }. void SetLeftSideTailFraction(Double_t leftSideFraction); set the fraction of probability content on the left tail; Central limits use 0.5 (default case); for upper limits it is 0 and 1 for lower limit; For shortest intervals a negative value (i.e. -1) must be given. {fLeftSideFraction = leftSideFraction;}. void SetShortestInterval(); set the Bayesian calculator to compute the shorest interval (default is central interval); to switch off SetLeftSideTailFraction to the rght value. { fLeftSideFraction = -1; }. void SetBrfPrecision(double precision); set the precision of the Root Finder. { fBrfPrecision = precision; }. void SetScanOfPosterior(int nbin = 100); use directly the approximate posterior function obtained by binning it in nbins; by default the cdf is used by integrating the posterior; if a value of nbin <= 0 the cdf function will be used. { fNScanBins = nbin; }. void SetNumIters(Int_t numIters); set the number of iterations when running a MC integration algorithm; If not set use default algorithmic values; In case of ToyMC sampling of the nuisance the value is 100; In case of using the GSL MCintegrations types the default value is; defined in ROOT::Math::IntegratorMultiDimOptions::DefaultNCalls(). { fNumIterations = numIters; }. void ForceNuisancePdf(RooAbsPdf& pdf); force the nuisance pdf when using the toy mc sampling. { fNuisancePdf = &pdf; }. » Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id: BayesianCalculator.h 39977 2011-06-26 22:57:52Z moneta $ » Last generated: 2011-07-04 15:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooStats__BayesianCalculator.html:17086,integrat,integrating,17086,root/html530/RooStats__BayesianCalculator.html,https://root.cern,https://root.cern/root/html530/RooStats__BayesianCalculator.html,1,['integrat'],['integrating']
Deployability,"value (i.e. ; -1) must be given ; Definition at line 114 of file BayesianCalculator.h. ◆ SetModel(). void RooStats::BayesianCalculator::SetModel ; (; const ModelConfig & ; model). overridevirtual . set the model via the ModelConfig ; set the model to use The model pdf, prior pdf, parameter of interest and nuisances will be taken according to the model ; Implements RooStats::IntervalCalculator.; Definition at line 738 of file BayesianCalculator.cxx. ◆ SetNuisanceParameters(). virtual void RooStats::BayesianCalculator::SetNuisanceParameters ; (; const RooArgSet & ; set). inlinevirtual . specify the nuisance parameters (eg. the rest of the parameters) ; Definition at line 85 of file BayesianCalculator.h. ◆ SetNumIters(). virtual void RooStats::BayesianCalculator::SetNumIters ; (; Int_t ; numIters). inlinevirtual . set the number of iterations when running a MC integration algorithm If not set use default algorithmic values In case of ToyMC sampling of the nuisance the value is 100 In case of using the GSL MCintegrations types the default value is defined in ROOT::Math::IntegratorMultiDimOptions::DefaultNCalls() ; Definition at line 133 of file BayesianCalculator.h. ◆ SetParameters(). virtual void RooStats::BayesianCalculator::SetParameters ; (; const RooArgSet & ; set). inlinevirtual . specify the parameters of interest in the interval ; Definition at line 82 of file BayesianCalculator.h. ◆ SetPriorPdf(). virtual void RooStats::BayesianCalculator::SetPriorPdf ; (; RooAbsPdf & ; pdf). inlinevirtual . Set only the Prior Pdf. ; Definition at line 88 of file BayesianCalculator.h. ◆ SetScanOfPosterior(). void RooStats::BayesianCalculator::SetScanOfPosterior ; (; int ; nbin = 100). inline . use directly the approximate posterior function obtained by binning it in nbins by default the cdf is used by integrating the posterior if a value of nbin <= 0 the cdf function will be used ; Definition at line 126 of file BayesianCalculator.h. ◆ SetShortestInterval(). void RooStats::Baye",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1BayesianCalculator.html:33278,integrat,integration,33278,doc/master/classRooStats_1_1BayesianCalculator.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1BayesianCalculator.html,1,['integrat'],['integration']
Deployability,"value for this object.; This default implementation considers all values valid. RooAbsReal* createProfile(const RooArgSet& paramsOfInterest); Create a RooProfileLL object that eliminates all nuisance parameters in the; present function. The nuisance parameters are defined as all parameters; of the function except the stated paramsOfInterest. RooAbsReal* createIntegral(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()) const; Create an object that represents the integral of the function over one or more observables listed in iset; The actual integration calculation is only performed when the return object is evaluated. The name; of the integral object is automatically constructed from the name of the input function, the variables; it integrates and the range integrates over. The following named arguments are accepted. NormSet(const RooArgSet&) -- Specify normalization set, mostly useful when working with PDFS; NumIntConfig(const RooNumIntConfig&) -- Use given configuration for any numeric integration, if necessary; Range(const char* name) -- Integrate only over given range. Multiple ranges may be specified; by passing multiple Range() arguments. RooAbsReal* createIntegral(const RooArgSet& iset, const RooArgSet* nset = 0, const RooNumIntConfig* cfg = 0, const char* rangeName = 0) const; Create an object that represents the integral of the function over one or more observables listed in iset; The actual integration calculation is only performed when the return object is evaluated. The name; of the integral object is automatically constructed from the name of the input function, the variables; it integrates and the range integrates over. If nset is specified the integrand is reque",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAbsReal.html:35871,integrat,integrates,35871,root/html528/RooAbsReal.html,https://root.cern,https://root.cern/root/html528/RooAbsReal.html,12,['integrat'],['integrates']
Deployability,"value of p.d.f, also print normalization integral that was last used, if any. ;  ; virtual void resetErrorCounters (Int_t resetValue=10);  Reset error counter to given value, limiting the number of future error messages for this pdf to 'resetValue'. ;  ; virtual bool selfNormalized () const;  Shows if a PDF is self-normalized, which means that no attempt is made to add a normalization term. ;  ; void setGeneratorConfig ();  Remove the specialized numeric MC generator configuration associated with this object. ;  ; void setGeneratorConfig (const RooNumGenConfig &config);  Set the given configuration as default numeric MC generator configuration for this object. ;  ; void setNormRange (const char *rangeName);  ; void setNormRangeOverride (const char *rangeName);  ; void setTraceCounter (Int_t value, bool allNodes=false);  Reset trace counter to given value, limiting the number of future trace messages for this pdf to 'value'. ;  ; RooNumGenConfig * specialGeneratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumGenConfig * specialGeneratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *unit="""");  Constructor with plot range and unit label. ;  ;  RooAbsReal (const RooAbsReal &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooAbsReal () override;  Destructor. ;  ; virtual double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const;  Implements the actual analytical integral(s) advertised",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRoo2DKeysPdf.html:13846,integrat,integrator,13846,doc/master/classRoo2DKeysPdf.html,https://root.cern,https://root.cern/doc/master/classRoo2DKeysPdf.html,6,"['configurat', 'integrat']","['configuration', 'integrator']"
Deployability,"value of p.d.f, also print normalization integral that was last used, if any. ;  ; virtual void resetErrorCounters (Int_t resetValue=10);  Reset error counter to given value, limiting the number of future error messages for this pdf to 'resetValue'. ;  ; virtual bool selfNormalized () const;  Shows if a PDF is self-normalized, which means that no attempt is made to add a normalization term. ;  ; void setGeneratorConfig ();  Remove the specialized numeric MC generator configuration associated with this object. ;  ; void setGeneratorConfig (const RooNumGenConfig &config);  Set the given configuration as default numeric MC generator configuration for this object. ;  ; void setNormRange (const char *rangeName);  ; void setNormRangeOverride (const char *rangeName);  ; void setTraceCounter (Int_t value, bool allNodes=false);  Reset trace counter to given value, limiting the number of future trace messages for this pdf to 'value'. ;  ; RooNumGenConfig * specialGeneratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumGenConfig * specialGeneratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *unit="""");  Constructor with plot range and unit label. ;  ;  RooAbsReal (const RooAbsReal &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooAbsReal () override;  Destructor. ;  ; TF1 * asTF (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a ROOT TF1,2,3 object bound to this RooAbsReal with given definition of observables and paramete",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBreitWigner.html:12827,integrat,integrator,12827,doc/master/classRooBreitWigner.html,https://root.cern,https://root.cern/doc/master/classRooBreitWigner.html,54,"['configurat', 'integrat']","['configuration', 'integrator']"
Deployability,"value of p.d.f, also print normalization integral that was last used, if any. ;  ; virtual void resetErrorCounters (Int_t resetValue=10);  Reset error counter to given value, limiting the number of future error messages for this pdf to 'resetValue'. ;  ; virtual bool selfNormalized () const;  Shows if a PDF is self-normalized, which means that no attempt is made to add a normalization term. ;  ; void setGeneratorConfig ();  Remove the specialized numeric MC generator configuration associated with this object. ;  ; void setGeneratorConfig (const RooNumGenConfig &config);  Set the given configuration as default numeric MC generator configuration for this object. ;  ; void setNormRange (const char *rangeName);  ; void setNormRangeOverride (const char *rangeName);  ; void setTraceCounter (Int_t value, bool allNodes=false);  Reset trace counter to given value, limiting the number of future trace messages for this pdf to 'value'. ;  ; RooNumGenConfig * specialGeneratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumGenConfig * specialGeneratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *unit="""");  Constructor with plot range and unit label. ;  ;  RooAbsReal (const RooAbsReal &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooAbsReal () override;  Destructor. ;  ; virtual double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; TF1 * asTF (const RooArgList &obs, const RooA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBMixDecay.html:17483,integrat,integrator,17483,doc/master/classRooBMixDecay.html,https://root.cern,https://root.cern/doc/master/classRooBMixDecay.html,40,"['configurat', 'integrat']","['configuration', 'integrator']"
Deployability,"value of the integral of a function f over the defined interval (a,b) with a singularity at c; 402 ; 403 */; 404 double IntegralCauchy(double a, double b, double c) {; 405 return !fIntegrator ? 0 : fIntegrator->IntegralCauchy(a,b,c);; 406 }; 407 ; 408 /**; 409 return the Result of the last Integral calculation; 410 */; 411 double Result() const { return !fIntegrator ? 0 : fIntegrator->Result(); }; 412 ; 413 /**; 414 return the estimate of the absolute Error of the last Integral calculation; 415 */; 416 double Error() const { return !fIntegrator ? 0 : fIntegrator->Error(); }; 417 ; 418 /**; 419 return the Error Status of the last Integral calculation; 420 */; 421 int Status() const { return !fIntegrator ? -1 : fIntegrator->Status(); }; 422 ; 423 /**; 424 return number of function evaluations in calculating the integral; 425 (if integrator do not implement this function returns -1); 426 */; 427 int NEval() const { return !fIntegrator ? -1 : fIntegrator->NEval(); }; 428 ; 429 ; 430 // setter for control Parameters (getters are not needed so far ); 431 ; 432 /**; 433 set the desired relative Error; 434 */; 435 void SetRelTolerance(double relTolerance) { if (fIntegrator) fIntegrator->SetRelTolerance(relTolerance); }; 436 ; 437 ; 438 /**; 439 set the desired absolute Error; 440 */; 441 void SetAbsTolerance(double absTolerance) { if (fIntegrator) fIntegrator->SetAbsTolerance(absTolerance); }; 442 ; 443 /**; 444 return a pointer to integrator object; 445 */; 446 VirtualIntegratorOneDim * GetIntegrator() { return fIntegrator; }; 447 ; 448 /**; 449 set the options; 450 */; 451 void SetOptions(const ROOT::Math::IntegratorOneDimOptions & opt) { if (fIntegrator) fIntegrator->SetOptions(opt); }; 452 ; 453 /**; 454 retrieve the options; 455 */; 456 ROOT::Math::IntegratorOneDimOptions Options() const { return (fIntegrator) ? fIntegrator->Options() : IntegratorOneDimOptions(); }; 457 ; 458 /// return name of integrator; 459 std::string Name() const { return (fIntegrator) ? Options().",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Integrator_8h_source.html:17653,integrat,integrator,17653,doc/master/Integrator_8h_source.html,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html,2,['integrat'],['integrator']
Deployability,"value of the integration interval . Implements ROOT::Math::VirtualIntegratorOneDim.; Definition at line 290 of file GSLIntegrator.cxx. ◆ IntegralUp() [3/3]. double ROOT::Math::GSLIntegrator::IntegralUp ; (; GSLFuncPointer ; f, . void * ; p, . double ; a . ). evaluate the Integral of a function f over the semi-infinite interval (a,+inf) passing a free function pointer ; Definition at line 368 of file GSLIntegrator.cxx. ◆ NEval(). int ROOT::Math::GSLIntegrator::NEval ; (; ); const. inlineoverridevirtual . return number of function evaluations in calculating the integral ; Reimplemented from ROOT::Math::VirtualIntegrator.; Definition at line 333 of file GSLIntegrator.h. ◆ operator=(). GSLIntegrator & ROOT::Math::GSLIntegrator::operator= ; (; const GSLIntegrator & ; rhs). private . Definition at line 164 of file GSLIntegrator.cxx. ◆ Options(). ROOT::Math::IntegratorOneDimOptions ROOT::Math::GSLIntegrator::Options ; (; ); const. overridevirtual . get the option used for the integration ; Implements ROOT::Math::VirtualIntegratorOneDim.; Definition at line 442 of file GSLIntegrator.cxx. ◆ Result(). double ROOT::Math::GSLIntegrator::Result ; (; ); const. overridevirtual . return the Result of the last Integral calculation ; Implements ROOT::Math::VirtualIntegrator.; Definition at line 388 of file GSLIntegrator.cxx. ◆ SetAbsTolerance(). void ROOT::Math::GSLIntegrator::SetAbsTolerance ; (; double ; absTolerance). overridevirtual . set the desired absolute Error ; Implements ROOT::Math::VirtualIntegrator.; Definition at line 399 of file GSLIntegrator.cxx. ◆ SetFunction() [1/2]. void ROOT::Math::GSLIntegrator::SetFunction ; (; const IGenFunction & ; f). overridevirtual . method to set the a generic integration function ; Parameters. fintegration function. The function type must implement the assignment operator, double operator() ( double x ) . Implements ROOT::Math::VirtualIntegratorOneDim.; Definition at line 182 of file GSLIntegrator.cxx. ◆ SetFunction() [2/2]. void ROOT::Ma",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html:18770,integrat,integration,18770,doc/master/classROOT_1_1Math_1_1GSLIntegrator.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html,1,['integrat'],['integration']
Deployability,"value; Double_tRooAbsReal::_valueCache for current value of object; Int_t_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_t_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~RooAbsPdf(); Destructor. Double_t getVal(const RooArgSet* set = 0) const; Return current value, normalizated by integrating over; the observables in 'nset'. If 'nset' is 0, the unnormalized value.; is returned. All elements of 'nset' must be lvalues. Unnormalized values are not cached; Doing so would be complicated as _norm->getVal() could; spoil the cache and interfere with returning the cached; return value. Since unnormalized calls are typically; done in integration calls, there is no performance hit. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; Analytical integral with normalization (see RooAbsReal::analyticalIntegralWN() for further information). This function applies the normalization specified by 'normSet' to the integral returned; by RooAbsReal::analyticalIntegral(). The passthrough scenario (code=0) is also changed; to return a normalized answer. Bool_t traceEvalPdf(Double_t value) const; Check that passed value is positive and not 'not-a-number'. If; not, print an error, until the error counter reaches its set; maximum. Double_t getNorm(const RooArgSet* nset); Return the integral of this PDF over all observables listed in 'nset'. const RooAbsReal* getNormObj(const RooArgSet* set, const RooArgSet* iset, const TNamed* rangeName = 0) const; Return pointer to RooAbsReal object that implements calculation of integral over observables iset in range; rangeName, optionally taking",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsPdf.html:42719,integrat,integration,42719,root/html526/RooAbsPdf.html,https://root.cern,https://root.cern/root/html526/RooAbsPdf.html,1,['integrat'],['integration']
Deployability,"value; Double_tRooAbsReal::_valueCache for current value of object; Int_t_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_t_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~RooAbsPdf(); Destructor. Double_t getVal(const RooArgSet* set = 0) const; Return current value, normalizated by integrating over; the observables in 'nset'. If 'nset' is 0, the unnormalized value.; is returned. All elements of 'nset' must be lvalues. Unnormalized values are not cached; Doing so would be complicated as _norm->getVal() could; spoil the cache and interfere with returning the cached; return value. Since unnormalized calls are typically; done in integration calls, there is no performance hit. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; Analytical integral with normalization (see RooAbsReal::analyticalIntegralWN() for further information). This function applies the normalization specified by 'normSet' to the integral returned; by RooAbsReal::analyticalIntegral(). The passthrough scenario (code=0) is also changed; to return a normalized answer. Bool_t traceEvalPdf(Double_t value) const; Check that passed value is positive and not 'not-a-number'. If; not, print an error, until the error counter reaches its set; maximum. Double_t getNorm(const RooArgSet* set = 0) const; Return the integral of this PDF over all observables listed in 'nset'. const RooAbsReal* getNormObj(const RooArgSet* set, const RooArgSet* iset, const TNamed* rangeName = 0) const; Return pointer to RooAbsReal object that implements calculation of integral over observables iset in range; rangeName, optional",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAbsPdf.html:43332,integrat,integration,43332,root/html528/RooAbsPdf.html,https://root.cern,https://root.cern/root/html528/RooAbsPdf.html,2,['integrat'],['integration']
Deployability,"value; of the integral I. The integral is mapped onto [0,1] using a transformation then integral computation is surrogated to DoIntegral. double IntegralUp(double a); Returns Integral of function on an upper semi-infinite interval.; This function computes, to an attempted specified accuracy, the value of the integral:. Usage:; In any arithmetic expression, this function has the approximate value; of the integral I.; - A: lower end-point of integration interval. The integral is mapped onto [0,1] using a transformation then integral computation is surrogated to DoIntegral. double IntegralLow(double b); Returns Integral of function on a lower semi-infinite interval.; This function computes, to an attempted specified accuracy, the value of the integral:. Usage:; In any arithmetic expression, this function has the approximate value; of the integral I.; - B: upper end-point of integration interval. The integral is mapped onto [0,1] using a transformation then integral computation is surrogated to DoIntegral. void SetFunction(const ROOT::Math::IGenFunction& ); Set integration function (flag control if function must be copied inside).; \@param f Function to be used in the calculations. double Integral(const vector<double>& pts); This method is not implemented. . double IntegralCauchy(double a, double b, double c); This method is not implemented. . void SetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); set the options. double DoIntegral(double a, double b, const ROOT::Math::IGenFunction* func). Integration surrugate method. Return integral of passed function in interval [a,b]; Derived class (like GaussLegendreIntegrator) can re-implement this method to modify to use; an improved algorithm. » Last changed: root/mathcore:$Id: GaussIntegrator.h 36764 2010-11-19 10:02:00Z moneta $ » Last generated: 2010-11-19 17:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__GaussIntegrator.html:6103,integrat,integration,6103,root/html528/ROOT__Math__GaussIntegrator.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__GaussIntegrator.html,1,['integrat'],['integration']
Deployability,"value; of the integral I. The integral is mapped onto [0,1] using a transformation then integral computation is surrogated to DoIntegral. double IntegralUp(double a); Returns Integral of function on an upper semi-infinite interval.; This function computes, to an attempted specified accuracy, the value of the integral:. Usage:; In any arithmetic expression, this function has the approximate value; of the integral I.; - A: lower end-point of integration interval. The integral is mapped onto [0,1] using a transformation then integral computation is surrogated to DoIntegral. double IntegralLow(double b); Returns Integral of function on a lower semi-infinite interval.; This function computes, to an attempted specified accuracy, the value of the integral:. Usage:; In any arithmetic expression, this function has the approximate value; of the integral I.; - B: upper end-point of integration interval. The integral is mapped onto [0,1] using a transformation then integral computation is surrogated to DoIntegral. void SetFunction(const ROOT::Math::IGenFunction& ); Set integration function (flag control if function must be copied inside).; \@param f Function to be used in the calculations. double Integral(const vector<double>& pts); This method is not implemented. . double IntegralCauchy(double a, double b, double c); This method is not implemented. . void SetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); set the options. double DoIntegral(double a, double b, const ROOT::Math::IGenFunction* func). Integration surrugate method. Return integral of passed function in interval [a,b]; Derived class (like GaussLegendreIntegrator) can re-implement this method to modify to use; an improved algorithm. » Last changed: root/mathcore:$Id: GaussIntegrator.h 36764 2010-11-19 10:02:00Z moneta $ » Last generated: 2011-07-04 15:19; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ROOT__Math__GaussIntegrator.html:6105,integrat,integration,6105,root/html530/ROOT__Math__GaussIntegrator.html,https://root.cern,https://root.cern/root/html530/ROOT__Math__GaussIntegrator.html,1,['integrat'],['integration']
Deployability,"value; of the integral I. The integral is mapped onto [0,1] using a transformation then integral computation is surrogated to DoIntegral. double IntegralUp(double a); Returns Integral of function on an upper semi-infinite interval.; This function computes, to an attempted specified accuracy, the value of the integral:. Usage:; In any arithmetic expression, this function has the approximate value; of the integral I.; - A: lower end-point of integration interval. The integral is mapped onto [0,1] using a transformation then integral computation is surrogated to DoIntegral. double IntegralLow(double b); Returns Integral of function on a lower semi-infinite interval.; This function computes, to an attempted specified accuracy, the value of the integral:. Usage:; In any arithmetic expression, this function has the approximate value; of the integral I.; - B: upper end-point of integration interval. The integral is mapped onto [0,1] using a transformation then integral computation is surrogated to DoIntegral. void SetFunction(const ROOT::Math::IGenFunction& ); Set integration function (flag control if function must be copied inside).; \@param f Function to be used in the calculations. double Integral(const vector<double>& pts); This method is not implemented. . double IntegralCauchy(double a, double b, double c); This method is not implemented. . void SetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); set the options. double DoIntegral(double a, double b, const ROOT::Math::IGenFunction* func). Integration surrugate method. Return integral of passed function in interval [a,b]; Derived class (like GaussLegendreIntegrator) can re-implement this method to modify to use; an improved algorithm. » Last changed: root/mathcore:$Id: GaussIntegrator.h 36764 2010-11-19 10:02:00Z moneta $ » Last generated: 2011-11-03 20:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ROOT__Math__GaussIntegrator.html:6105,integrat,integration,6105,root/html532/ROOT__Math__GaussIntegrator.html,https://root.cern,https://root.cern/root/html532/ROOT__Math__GaussIntegrator.html,1,['integrat'],['integration']
Deployability,"valued object ;  CRooRealVarSharedPropertiesClass RooRealVarSharedProperties is an implementation of RooSharedProperties that stores the properties of a RooRealVar that are shared among clones ;  CRooRecursiveFractionClass RooRecursiveFraction is a RooAbsReal implementation that calculates the plain fraction of sum of RooAddPdf components from a set of recursive fractions: for a given set of input fractions a_i it returns a_0 * Prod_i (1 - a_i) ;  CRooRefArray;  CRooRefCountListA RooRefCountList is a RooLinkedList that keeps a reference counter with each added node ;  CRooResolutionModel;  CRooScaledFuncLightweight RooAbsFunction implementation that applies a constant scale factor to another RooAbsFunc ;  CRooSecondMomentRooSecondMoment represents the first, second, or third order derivative of any RooAbsReal as calculated (numerically) by the MathCore Richardson derivator class ;  CRooSegmentedIntegrator1DRooSegmentedIntegrator1D implements an adaptive one-dimensional numerical integration algorithm ;  CRooSegmentedIntegrator2DRooSegmentedIntegrator2D implements an adaptive one-dimensional numerical integration algorithm ;  CRooSentinelRooSentinel is a special purposes singleton class that terminates all other RooFit singleton services when the process exists ;  CRooSetPairRooSetPair is a utility class that stores a pair of RooArgSets ;  CRooSetProxyRooSetProxy is the concrete proxy for RooArgSet objects ;  CRooSharedPropertiesClass RooSharedProperties is the base class for shared properties that can be stored in RooSharedPropertiesList ;  CRooSharedPropertiesListClass RooSharedPropertiesList maintains the properties of RooRealVars and RooCategories that are clones of each other ;  CRooSimGenContextRooSimGenContext is an efficient implementation of the generator context specific for RooSimultaneous PDFs when generating more than one of the component pdfs ;  CRooSimPdfBuilder;  CRooSimSplitGenContextRooSimSplitGenContext is an efficient implementation of the generat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/annotated.html:103923,integrat,integration,103923,doc/v608/annotated.html,https://root.cern,https://root.cern/doc/v608/annotated.html,5,['integrat'],['integration']
Deployability,"valued object that can be used by RooRealIntegral to integrate over ;  CRooLinkedListRooLinkedList is an collection class for internal use, storing a collection of RooAbsArg pointers in a doubly linked list ;  CRooLinkedListElemRooLinkedListElem is an link element for the RooLinkedList class ;  CRooLinkedListIterRooLinkedListIter is the TIterator implementation for RooLinkedList ;  CRooLinTransBinningRooLinTransBinning is a special binning implementation for RooLinearVar that transforms the binning of the RooLinearVar input variable in the same way that RooLinearVar does ;  CRooListA RooList is a TList with extra support for working with options that are associated with each node ;  CRooListProxyRooListProxy is the concrete proxy for RooArgList objects ;  CRooLognormalRooFit Lognormal PDF ;  CRooMapCatEntry;  ►CRooMappedCategory;  CEntry;  CRooMath;  CRooMathCoreReg;  CRooMathMoreReg;  CRooMCIntegratorRooMCIntegrator implements an adaptive multi-dimensional Monte Carlo numerical integration, following the VEGAS algorithm originally described in G ;  CRooMCStudyRooMCStudy is a help class to facilitate Monte Carlo studies such as 'goodness-of-fit' studies, that involve fitting a PDF to multiple toy Monte Carlo sets generated from the same PDF or another PDF ;  CRooMinimizerRooMinimizer is a wrapper class around ROOT::Fit:Fitter that provides a seamless interface between the minimizer functionality and the native RooFit interface ;  CRooMinimizerFcn;  CRooMinuitRooMinuit is a wrapper class around TFitter/TMinuit that provides a seamless interface between the MINUIT functionality and the native RooFit interface ;  CRooMomentRooMoment represents the first, second, or third order derivative of any RooAbsReal as calculated (numerically) by the MathCore Richardson derivator class ;  ►CRooMomentMorph;  CCacheElem;  ►CRooMomentMorphFunc;  CCacheElem;  ►CRooMomentMorphFuncND;  CCacheElem;  CDigits;  CGrid2;  ►CRooMomentMorphND;  CCacheElem;  CGrid;  CRooMPSentinelRooMPSentinel",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v616/annotated.html:118872,integrat,integration,118872,doc/v616/annotated.html,https://root.cern,https://root.cern/doc/v616/annotated.html,1,['integrat'],['integration']
Deployability,"values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; static Int_tRooPrintable::_nameLength; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooCFunction2Ref<double,unsigned int,double>funcFunction pointer reference; RooRealProxyxArgument reference; RooRealProxyyArgument reference.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooCFunction2Binding_double_unsigned_int_double_.html:32352,integrat,integrator,32352,root/html526/RooCFunction2Binding_double_unsigned_int_double_.html,https://root.cern,https://root.cern/root/html526/RooCFunction2Binding_double_unsigned_int_double_.html,4,"['configurat', 'integrat']","['configuration', 'integrator']"
Deployability,"values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions. SetFunction(const ROOT::Math::IGenFunction& f, bool copy = false). IntegratorOneDim(const ROOT::Math::IGenFunction& f, ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, int rule = 0). Template Constructor of one dimensional Integrator passing a generic function object. @param f integration function (any C++ callable object implementing operator()(double x); @param type integration type (adaptive, non-adaptive, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE type). virtual ~IntegratorOneDim(); destructor (will delete contained pointer). IntegratorOneDim & operator=(const ROOT::Math::IntegratorOneDim& ); { return *this; }. double Integral(const ROOT::Math::IGenFunction& f, double a, double b); integration methods using a function. evaluate the Integral of a function f over the defined interval (a,b); @param f integration function. The function type must be a C++ callable object implementing operator()(double x); @param a lower value of the integration interval; @param b upper value of the integration interval. double Integral(const ROOT::Math::IGenFunction& f, double a, double b). evaluate the Integral of a function f over the defined interval (a,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower value of the integration interval; @param b upper value of the integration interval. return Integral(const ROOT::Math::IGenFunction& f, const vector<double>& pts). double Integral(const IGenFunction & f). evaluate the Integral of a function f over the infinite interval (-inf,+inf); @param f integration function. The function type must be a C++ callable object implementing operator()(double x). tem",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__IntegratorOneDim.html:7104,integrat,integration,7104,root/html528/ROOT__Math__IntegratorOneDim.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__IntegratorOneDim.html,5,['integrat'],['integration']
Deployability,"variable i. Variable and function must be set before using Scan; Return false if an error or if minimizer does not support this functionality. bool Contour(unsigned int ivar, unsigned int jvar, unsigned int& npoints, double* xi, double* xj). find the contour points (xi, xj) of the function for parameter ivar and jvar around the minimum; The contour will be find for value of the function = Min + ErrorUp();. void PrintResults(); return reference to the objective function; virtual const ROOT::Math::IGenFunction & Function() const = 0;; print the result according to set level (implemented for TMinuit for mantaining Minuit-style printing). {}. std::string VariableName(unsigned int ivar) const; get name of variables (override if minimizer support storing of variable names); return an empty string if variable is not found. int VariableIndex(const string& name) const; get index of variable given a variable given a name; return -1 if variable is not found. int PrintLevel() const; minimizer configuration parameters ; set print level. { return fOptions.PrintLevel(); }. unsigned int MaxFunctionCalls() const; max number of function calls. { return fOptions.MaxFunctionCalls(); }. unsigned int MaxIterations() const; max iterations. { return fOptions.MaxIterations(); }. double Tolerance() const; absolute tolerance. { return fOptions.Tolerance(); }. double Precision() const; precision of minimizer in the evaluation of the objective function; ( a value <=0 corresponds to the let the minimizer choose its default one). { return fOptions.Precision(); }. int Strategy() const; strategy. { return fOptions.Strategy(); }. int Status() const; status code of minimizer. { return fStatus; }. double ErrorDef() const; return the statistical scale used for calculate the error; is typically 1 for Chi2 and 0.5 for likelihood minimization. { return fOptions.ErrorDef(); }. bool IsValidError() const; return true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit). { return",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Math__Minimizer.html:11898,configurat,configuration,11898,root/html534/ROOT__Math__Minimizer.html,https://root.cern,https://root.cern/root/html534/ROOT__Math__Minimizer.html,3,['configurat'],['configuration']
Deployability,"variables (t); [#1] INFO:NumericIntegration -- RooRealIntegral::init(coshGBasis_Int[t]) using numeric integrator RooIntegrator1D to calculate Int(t); [#1] INFO:NumericIntegration -- RooRealIntegral::init(sinhGBasis_Int[t]) using numeric integrator RooIntegrator1D to calculate Int(t); [#1] INFO:NumericIntegration -- RooRealIntegral::init(coshGBasis_Int[t]) using numeric integrator RooIntegrator1D to calculate Int(t); [#1] INFO:NumericIntegration -- RooRealIntegral::init(sinhGBasis_Int[t]) using numeric integrator RooIntegrator1D to calculate Int(t); [#1] INFO:Plotting -- RooAbsPdf::plotOn(pdf) directly selected PDF components: (ampl1); [#1] INFO:Plotting -- RooAbsPdf::plotOn(pdf) indirectly selected PDF components: (poly1,coshGBasis); [#1] INFO:Plotting -- RooAbsReal::plotOn(pdf) plot on cosa integrates over variables (t); [#1] INFO:NumericIntegration -- RooRealIntegral::init(coshGBasis_Int[t]) using numeric integrator RooIntegrator1D to calculate Int(t); [#1] INFO:NumericIntegration -- RooRealIntegral::init(sinhGBasis_Int[t]) using numeric integrator RooIntegrator1D to calculate Int(t); [#1] INFO:NumericIntegration -- RooRealIntegral::init(coshGBasis_Int[t]) using numeric integrator RooIntegrator1D to calculate Int(t); [#1] INFO:Plotting -- RooAbsPdf::plotOn(pdf) directly selected PDF components: (ampl2); [#1] INFO:Plotting -- RooAbsPdf::plotOn(pdf) indirectly selected PDF components: (poly2,sinhGBasis); [#1] INFO:Plotting -- RooAbsReal::plotOn(pdf) plot on cosa integrates over variables (t); [#1] INFO:NumericIntegration -- RooRealIntegral::init(coshGBasis_Int[t]) using numeric integrator RooIntegrator1D to calculate Int(t); [#1] INFO:NumericIntegration -- RooRealIntegral::init(sinhGBasis_Int[t]) using numeric integrator RooIntegrator1D to calculate Int(t); [#1] INFO:NumericIntegration -- RooRealIntegral::init(sinhGBasis_Int[t]) using numeric integrator RooIntegrator1D to calculate Int(t); DateJuly 2008 ; AuthorWouter Verkerke ; Definition in file rf704_amplitudefit.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf704__amplitudefit_8C.html:10608,integrat,integrator,10608,doc/master/rf704__amplitudefit_8C.html,https://root.cern,https://root.cern/doc/master/rf704__amplitudefit_8C.html,6,['integrat'],"['integrates', 'integrator']"
Deployability,"vars); const. inlineoverridevirtual . Advertise capability to determine maximum value of function for given set of observables. ; If no direct generator method is provided, this information will assist the accept/reject generator to operate more efficiently as it can skip the initial trial sampling phase to empirically find the function maximum ; Reimplemented from RooAbsReal.; Definition at line 95 of file RooBinSamplingPdf.h. ◆ initGenerator(). void RooBinSamplingPdf::initGenerator ; (; Int_t ; code). inlineoverridevirtual . Forwards to the PDF's implementation. ; Reimplemented from RooAbsPdf.; Definition at line 87 of file RooBinSamplingPdf.h. ◆ integrate(). double RooBinSamplingPdf::integrate ; (; const RooArgSet * ; normSet, . double ; low, . double ; high . ); const. private . Integrate the wrapped PDF using our current integrator, with given norm set and limits. ; Definition at line 302 of file RooBinSamplingPdf.cxx. ◆ integrator(). std::unique_ptr< ROOT::Math::IntegratorOneDim > & RooBinSamplingPdf::integrator ; (; ); const. Direct access to the unique_ptr holding the integrator that's used to sample the bins. ; This can be used to change options such as sampling accuracy or to entirely exchange the integrator.; Example: Use the 61-point Gauss-Kronrod integration rule; ROOT::Math::IntegratorOneDimOptions intOptions = pdf.integrator()->Options();; intOptions.SetNPoints(6); // 61-point integration rule; intOptions.SetRelTolerance(1.E-9); // Smaller tolerance -> more subdivisions; pdf.integrator()->SetOptions(intOptions);; ROOT::Math::BaseIntegratorOptions::SetRelTolerancevoid SetRelTolerance(double tol)set the relative toleranceDefinition IntegratorOptions.h:80; ROOT::Math::IntegratorOneDimOptionsNumerical one dimensional integration options.Definition IntegratorOptions.h:113; ROOT::Math::IntegratorOneDimOptions::SetNPointsvoid SetNPoints(unsigned int n)Set number of points for active integration rule.Definition IntegratorOptions.h:140; See alsoROOT::Math::Inte",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBinSamplingPdf.html:86615,integrat,integrator,86615,doc/master/classRooBinSamplingPdf.html,https://root.cern,https://root.cern/doc/master/classRooBinSamplingPdf.html,1,['integrat'],['integrator']
Deployability,"vas (if exist); TClassMenuItem*fSelectedMenuItemselected class menu item; TFunction*fSelectedMethodselected method; TObject*fSelectedObjectselected object; TVirtualPad*fSelectedPadselected pad (if exist); TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TContextMenu(const char* name, const char* title = ""Context sensitive popup menu""); Create a context menu. ~TContextMenu(); Destroy a context menu. void Action(TObject* object, TMethod* method); Action to be performed when this menu item is selected.; If the selected method requires arguments we popup an; automatically generated dialog, otherwise the method is; directly executed. void Action(TClassMenuItem* classmenuitem); Action to be performed when this menu item is selected.; If the selected method requires arguments we popup an; automatically generated dialog, otherwise the method is; directly executed. void Action(TObject* object, TToggle* toggle); Action to be performed when this toggle menu item is selected. const char * CreateArgumentTitle(TMethodArg* argument); Create string describing argument (for use in dialog box). const char * CreateDialogTitle(TObject* object, TFunction* method); Create title for dialog box retrieving argument values. const char * CreatePopupTitle(TObject* object); Create title for popup menu. void Execute(TObject* object, TFunction* method, const char* params); Execute method with specified arguments for specified object. void Execute(TObject* object, TFunction* method, TObjArray* params); Execute method with specified arguments for specified object. void Popup(Int_t x, Int_t y, TObject* obj, TVirtualPad* c = 0, TVirtualPad* p = 0); Popup context menu at given location in canvas c and pad p for selected; object. void Popup(Int_t x, Int_t y, TObject* obj, TBrowser* b); Popup context menu at given location in browser b for selected object. TContextMenu(const TContextMenu& ). TContextMenu& operator=(const TConte",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TContextMenu.html:8522,toggle,toggle,8522,root/html528/TContextMenu.html,https://root.cern,https://root.cern/root/html528/TContextMenu.html,12,['toggle'],['toggle']
Deployability,"vas(""cw"",""cw"",0,0,400,400);; 227 cw->GetCanvas()->SetGrayscale();; 228 w->SetCanvas(cw);; 229 w->Draw();; 230}; 231End_Macro; 232 ; 233\anchor C05; 234## Color palettes; 235It is often very useful to represent a variable with a color map. The concept; 236of ""color palette"" allows to do that. One color palette is active at any time.; 237This ""current palette"" is set using:; 238 ; 239~~~ {.cpp}; 240gStyle->SetPalette(...);; 241~~~; 242 ; 243This function has two parameters: the number of colors in the palette and an; 244array of containing the indices of colors in the palette. The following small; 245example demonstrates how to define and use the color palette:; 246 ; 247Begin_Macro(source); 248{; 249 auto c1 = new TCanvas(""c1"",""c1"",0,0,600,400);; 250 TF2 *f1 = new TF2(""f1"",""0.1+(1-(x-2)*(x-2))*(1-(y-2)*(y-2))"",1,3,1,3);; 251 Int_t palette[5];; 252 palette[0] = 15;; 253 palette[1] = 20;; 254 palette[2] = 23;; 255 palette[3] = 30;; 256 palette[4] = 32;; 257 gStyle->SetPalette(5,palette);; 258 f1->Draw(""colz"");; 259 return c1;; 260}; 261End_Macro; 262 ; 263To define more a complex palette with a continuous gradient of color, one; 264should use the static function `TColor::CreateGradientColorTable()`.; 265The following example demonstrates how to proceed:; 266 ; 267Begin_Macro(source); 268{; 269 auto c2 = new TCanvas(""c2"",""c2"",0,0,600,400);; 270 auto f2 = new TF2(""f2"",""0.1+(1-(x-2)*(x-2))*(1-(y-2)*(y-2))"",1,3,1,3);; 271 const Int_t Number = 3;; 272 Double_t Red[Number] = { 1.00, 0.00, 0.00};; 273 Double_t Green[Number] = { 0.00, 1.00, 0.00};; 274 Double_t Blue[Number] = { 1.00, 0.00, 1.00};; 275 Double_t Length[Number] = { 0.00, 0.50, 1.00 };; 276 Int_t nb=50;; 277 TColor::CreateGradientColorTable(Number,Length,Red,Green,Blue,nb);; 278 f2->SetContour(nb);; 279 f2->SetLineWidth(1);; 280 f2->SetLineColor(kBlack);; 281 f2->Draw(""surf1z"");; 282 return c2;; 283}; 284End_Macro; 285 ; 286The function `TColor::CreateGradientColorTable()` automatically; 287calls `gStyle->SetPalett",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TColor_8cxx_source.html:9426,continuous,continuous,9426,doc/master/TColor_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TColor_8cxx_source.html,1,['continuous'],['continuous']
Deployability,"vas(""rf302_utilfuncs"", ""rf302_utilfuncs"", 800, 800); c.Divide(2, 2); c.cd(1); ROOT.gPad.SetLeftMargin(0.20); hh_model_1.GetZaxis().SetTitleOffset(2.5); hh_model_1.Draw(""surf""); c.cd(2); ROOT.gPad.SetLeftMargin(0.20); hh_model_2.GetZaxis().SetTitleOffset(2.5); hh_model_2.Draw(""surf""); c.cd(3); ROOT.gPad.SetLeftMargin(0.20); hh_model_3.GetZaxis().SetTitleOffset(2.5); hh_model_3.Draw(""surf""); c.cd(4); ROOT.gPad.SetLeftMargin(0.20); hh_model_4.GetZaxis().SetTitleOffset(2.5); hh_model_4.Draw(""surf""); ; c.SaveAs(""rf302_utilfuncs.png""); [#0] WARNING:InputArguments -- The parameter 'sigma' with range [-inf, inf] of the RooGaussian 'model_1' exceeds the safe range of (0, inf). Advise to limit its range.; [#0] WARNING:InputArguments -- The parameter 'sigma' with range [-inf, inf] of the RooGaussian 'model_2' exceeds the safe range of (0, inf). Advise to limit its range.; [#0] WARNING:InputArguments -- The parameter 'sigma' with range [-inf, inf] of the RooGaussian 'model_3' exceeds the safe range of (0, inf). Advise to limit its range.; [#0] WARNING:InputArguments -- The parameter 'sigma' with range [-inf, inf] of the RooGaussian 'model_4' exceeds the safe range of (0, inf). Advise to limit its range.; [#1] INFO:NumericIntegration -- RooRealIntegral::init(model_1_Int[x,y]) using numeric integrator RooIntegrator1D to calculate Int(y); [#1] INFO:NumericIntegration -- RooRealIntegral::init(model_2_Int[x,y]) using numeric integrator RooIntegrator1D to calculate Int(y); [#1] INFO:NumericIntegration -- RooRealIntegral::init(model_3_Int[x,y]) using numeric integrator RooIntegrator1D to calculate Int(y); [#1] INFO:NumericIntegration -- RooRealIntegral::init(model_4_Int[x,y]) using numeric integrator RooIntegrator1D to calculate Int(y); DateFebruary 2018 ; AuthorsClemens Lange, Wouter Verkerke (C++ version) ; Definition in file rf302_utilfuncs.py. tutorialsroofitrf302_utilfuncs.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf302__utilfuncs_8py.html:4053,integrat,integrator,4053,doc/master/rf302__utilfuncs_8py.html,https://root.cern,https://root.cern/doc/master/rf302__utilfuncs_8py.html,4,['integrat'],['integrator']
Deployability,"vas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TGeoNode**fArray![fMaxLevel+1] Array of nodes; Int_tfLevelBranch depth; TGeoHMatrixfMatrixGlobal matrix (owned); Int_tfMaxLevelArray length; TGeoNode*fRealArray[1]Beginning address of the array of nodes. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoBranchArray(Int_t level); Constructor. Alocates the array with a size given by level. TGeoBranchArray * MakeInstance(size_t maxlevel); Make an instance of the class which allocates the node array. To be; released using ReleaseInstance. If addr is non-zero, the user promised that; addr contains at least that many bytes: size_t needed = SizeOf(maxlevel);. TGeoBranchArray * MakeInstanceAt(size_t maxlevel, void* addr); Make an instance of the class which allocates the node array. To be; released using ReleaseInstance. If addr is non-zero, the user promised that; addr contains at least that many bytes: size_t needed = SizeOf(maxlevel);. TGeoBranchArray * MakeCopy(const TGeoBranchArray& other); Make a copy of a branch array at the location (if indicated). TGeoBranchArray * MakeCopyAt(const TGeoBranchArray& other, void* addr); Make a copy of a branch array at the location (if indicated). void CopyTo(TGeoBranchArray* dest); Raw memcpy of the branch array content to an existing destination. void ReleaseInstance(TGeoBranchArray* obj); Releases the space allocated for the object. void UpdateArray(size_t nobj); Updates the internal addresses for n contiguous objects which have the same; fMaxLevel; Updates the internal addresses for n contiguous objects which have the same fMaxLevel. TGeoBranchArray(const TGeoBranchArray& ); Copy constructor. Not callable anymore. Use TGeoBranchArray::MakeCopy instead. TGeoBranchArray& operator=(const TGeoBranchArray& ); Assignment. Not valid anymore. Use",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoBranchArray.html:7835,release,released,7835,root/html534/TGeoBranchArray.html,https://root.cern,https://root.cern/root/html534/TGeoBranchArray.html,1,['release'],['released']
Deployability,"vate:. TStopwatch_cumulTimer; TMatrixDSym*_extV; RooMinimizerFcn*_fcn; RooAbsReal*_func; string_minimizerType; Bool_t_optConst; Int_t_printLevel; Bool_t_profile; Bool_t_profileStart; Int_t_status; vector<std::pair<std::string,int> >_statusHistory; static ROOT::Fit::Fitter*_theFitter; TStopwatch_timer; Bool_t_verbose. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void cleanup(); Cleanup method called by atexit handler installed by RooSentinel; to delete all global heap objects when the program is terminated. RooMinimizer(RooAbsReal& function); Construct MINUIT interface to given function. Function can be anything,; but is typically a -log(likelihood) implemented by RooNLLVar or a chi^2; (implemented by RooChi2Var). Other frequent use cases are a RooAddition; of a RooNLLVar plus a penalty or constraint term. This class propagates; all RooFit information (floating parameters, their values and errors); to MINUIT before each MINUIT call and propagates all MINUIT information; back to the RooFit object at the end of each call (updated parameter; values, their (asymmetric errors) etc. The default MINUIT error level; for HESSE and MINOS error analysis is taken from the defaultErrorLevel(); value of the input function. ~RooMinimizer(); Destructor. void setStrategy(Int_t strat); Change MINUIT strategy to istrat. Accepted codes; are 0,1,2 and represent MINUIT strategies for dealing; most efficiently with fast FCNs (0), expensive FCNs (2); and 'intermediate' FCNs (1). void setMaxIterations(Int_t n); Change maximum number of MINUIT iterations; (RooMinimizer default 500 * #parameters). void setMaxFunctionCalls(Int_t n); Change maximum number of likelihood function calss from MINUIT; (RooMinimizer default 500 * #parameters). void setErrorLevel(Double_t level); Set the level for MINUIT error analysis to the given; value. This function overrides the default value; that is taken in the RooMinimizer constructor from; the defaultErrorLevel() ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooMinimizer.html:8727,update,updated,8727,root/html534/RooMinimizer.html,https://root.cern,https://root.cern/root/html534/RooMinimizer.html,1,['update'],['updated']
Deployability,"ve Error; @param size maximum number of sub-intervals; @param rule Gauss-Kronrod integration rule (only for GSL kADAPTIVE type). Possible type values are : kGAUSS (simple Gauss method), kADAPTIVE (from GSL), kADAPTIVESINGULAR (from GSL), kNONADAPTIVE (from GSL); Possible rule values are kGAUS15 (rule = 1), kGAUS21( rule = 2), kGAUS31(rule =3), kGAUS41 (rule=4), kGAUS51 (rule =5), kGAUS61(rule =6); lower rules are indicated for singular functions while higher for smooth functions to get better accuracies. NOTE: When the default values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions. IntegratorOneDim(const ROOT::Math::IGenFunction& f, ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, int rule = 0). Constructor of one dimensional Integrator passing a function interface. @param f integration function (1D interface). It is copied inside; @param type integration type (adaptive, non-adaptive, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE type). NOTE: When the default values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions. SetFunction(const ROOT::Math::IGenFunction& f, bool copy = false). IntegratorOneDim(const ROOT::Math::IGenFunction& f, ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, int rule = 0). Template Constructor of one dimensional Integrator passing a generic function object. @param f integration function (any C++ callable object implementing operator()(double x); @param type integration type (adaptive, non-adaptive, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; @pa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__IntegratorOneDim.html:5796,integrat,integration,5796,root/html528/ROOT__Math__IntegratorOneDim.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__IntegratorOneDim.html,6,['integrat'],['integration']
Deployability,"ve as input to the transformation. Bool_t GetInput(const TMVA::Event* event, vector<Float_t>& input, vector<Char_t>& mask, Bool_t backTransform = kFALSE) const; select the values from the event. void SetOutput(TMVA::Event* event, vector<Float_t>& output, vector<Char_t>& mask, const TMVA::Event* oldEvent = 0, Bool_t backTransform = kFALSE) const; select the values from the event. void CountVariableTypes(UInt_t& nvars, UInt_t& ntgts, UInt_t& nspcts) const; count variables, targets and spectators. void CalcNorm(const vector<TMVA::Event*,allocator<TMVA::Event*> >& ); TODO --> adapt to variable,target,spectator selection; method to calculate minimum, maximum, mean, and RMS for all; variables used in the MVA. std::vector<TString>* GetTransformationStrings(Int_t cls) const; TODO --> adapt to variable,target,spectator selection; default transformation output; --> only indicate that transformation occurred. void UpdateNorm(Int_t ivar, Double_t x); TODO --> adapt to variable,target,spectator selection; update min and max of a given variable (target) and a given transformation method. void AttachXMLTo(void* parent); create XML description the transformation (write out info of selected variables). void ReadFromXML(void* trfnode); Read the input variables from the XML node. void MakeFunction(ostream& fout, const TString& fncName, Int_t part, UInt_t trCounter, Int_t cls); getinput and setoutput equivalent. void Initialize(). Bool_t PrepareTransformation(const vector<TMVA::Event*,allocator<TMVA::Event*> >& ). const Event* Transform(const TMVA::Event *const , Int_t cls) const. const Event* InverseTransform(const TMVA::Event *const , Int_t cls) const. void SetEnabled(Bool_t e); accessors. { fEnabled = e; }. void SetNormalise(Bool_t n); { fNormalise = n; }. Bool_t IsEnabled() const; { return fEnabled; }. Bool_t IsCreated() const; { return fCreated; }. Bool_t IsNormalised() const; { return fNormalise; }. void ToggleInputSortOrder(Bool_t sortOrder); { fSortGet = sortOrder; }. void SetOu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA__VariableTransformBase.html:10098,update,update,10098,root/html530/TMVA__VariableTransformBase.html,https://root.cern,https://root.cern/root/html530/TMVA__VariableTransformBase.html,2,['update'],['update']
Deployability,ve components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; static Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; Double_t_genFlavFrac!; Double_t_genFlavFracMix!; Double_t_genFlavFracUnmix!; Double_t_genMixFrac! do not persist; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; Bool_tRooAbsAnaConvPdf::_isCopy; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Int_tRooAbsPdf::_minDimNormValueCacheMinimum number of numerically integrated dimensions to activate normalization value caching; RooRealProxy_mistag; RooCategoryProxy_mixState; RooResolutionModel*RooAbsAnaConvPdf::_model! Original resolution model; static Int_tRooPrintable::_nameLength; Int_tRooAbsPdf::_negCountNumber of negative probablities remaining to print; RooAbsReal*RooAbsPdf::_norm! Normalization integral (owned by _normMgr); RooObjCacheManagerRooAbsPdf::_normMgrThe cache manager; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbs,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooBMixDecay.html:39218,integrat,integrated,39218,root/html526/RooBMixDecay.html,https://root.cern,https://root.cern/root/html526/RooBMixDecay.html,1,['integrat'],['integrated']
Deployability,ve components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; static Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; Double_t_genFlavFrac!; Double_t_genFlavFracMix!; Double_t_genFlavFracUnmix!; Double_t_genMixFrac! do not persist; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; Bool_tRooAbsAnaConvPdf::_isCopy; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Int_tRooAbsPdf::_minDimNormValueCacheMinimum number of numerically integrated dimensions to activate normalization value caching; RooRealProxy_mistag; RooCategoryProxy_mixState; RooResolutionModel*RooAbsAnaConvPdf::_model! Original resolution model; static Int_tRooPrintable::_nameLength; Int_tRooAbsPdf::_negCountNumber of negative probablities remaining to print; RooAbsReal*RooAbsPdf::_norm! Normalization integral (owned by _normMgr); RooObjCacheManagerRooAbsPdf::_normMgrThe cache manager; TStringRooAbsPdf::_normRangeNormalization range; static TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies;,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooBMixDecay.html:39792,integrat,integrated,39792,root/html528/RooBMixDecay.html,https://root.cern,https://root.cern/root/html528/RooBMixDecay.html,2,['integrat'],['integrated']
Deployability,ve components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; static Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; Double_t_genFlavFrac!; Double_t_genFlavFracMix!; Double_t_genFlavFracUnmix!; Double_t_genMixFrac! do not persist; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; Bool_tRooAbsAnaConvPdf::_isCopy; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Int_tRooAbsPdf::_minDimNormValueCacheMinimum number of numerically integrated dimensions to activate normalization value caching; RooRealProxy_mistag; RooCategoryProxy_mixState; RooResolutionModel*RooAbsAnaConvPdf::_model! Original resolution model; static Int_tRooPrintable::_nameLength; Int_tRooAbsPdf::_negCountNumber of negative probablities remaining to print; RooAbsReal*RooAbsPdf::_norm! Normalization integral (owned by _normMgr); RooObjCacheManagerRooAbsPdf::_normMgrThe cache manager; TStringRooAbsPdf::_normRangeNormalization range; static TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TRefArrayRooAbsArg::_proxyListlist of prox,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooBMixDecay.html:40472,integrat,integrated,40472,root/html532/RooBMixDecay.html,https://root.cern,https://root.cern/root/html532/RooBMixDecay.html,1,['integrat'],['integrated']
Deployability,"ve proxy from proxy list. ;  ; void unRegisterProxy (RooListProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooSetProxy &proxy);  Remove proxy from proxy list. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; value_type _defCat {NoCatIdx};  Default (unmapped) output type. ;  ; RooCategoryProxy _inputCat;  Input category. ;  ; std::map< std::string, RooMappedCategory::Entry > _mapArray;  List of mapping rules. ;  ; std::unique_ptr< RooMappedCategoryCache > _mapcache;  ! transient member: cache the mapping ;  ;  Protected Attributes inherited from RooAbsCategory; value_type _currentIndex {std::numeric_limits<int>::min()};  Current category state. ;  ; std::vector< std::string > _insertionOrder;  Keeps track in which order state numbers have been inserted. Make sure this is updated in recomputeShape(). ;  ; std::map< value_type, std::unique_ptr< RooCatType, std::function< void(RooCatType *)> > > _legacyStates;  ! Map holding pointers to RooCatType instances. Only for legacy interface. Don't use if possible. ;  ; std::map< std::string, value_type > _stateNames;  Map state names to index numbers. Make sure state names are updated in recomputeShape(). ;  ;  Protected Attributes inherited from RooAbsArg; std::set< std::string > _boolAttrib;  ; std::set< std::string > _boolAttribTransient;  ; std::vector< RooAbsCache * > _cacheList;  ; RefCountList_t _clientList;  ; RefCountList_t _clientListShape;  ; RefCountList_t _clientListValue;  ; std::size_t _dataToken = std::numeric_limits<std::size_t>::max();  In which workspace do I live, if any. ;  ; bool _deleteWatch = false;  ; RooExpensiveObjectCache * _eocache {nullptr};  Prohibit server redirects – Debugging tool. ;  ; bool _fast = false;  ; bool _isConstant = false;  De-duplicated name pointer. This will be equal f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooMappedCategory.html:40581,update,updated,40581,doc/master/classRooMappedCategory.html,https://root.cern,https://root.cern/doc/master/classRooMappedCategory.html,1,['update'],['updated']
Deployability,"ve proxy from proxy list. ;  ; void unRegisterProxy (RooSetProxy &proxy);  Remove proxy from proxy list. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; const ROOT::Math::IBaseFunctionOneDim * func;  ; RooRealProxy var;  ;  Protected Attributes inherited from RooAbsPdf; Int_t _errorCount = 0;  Number of errors remaining to print. ;  ; Int_t _negCount = 0;  Number of negative probabilities remaining to print. ;  ; RooAbsReal * _norm = nullptr;  ; RooObjCacheManager _normMgr;  ; TString _normRange;  Normalization range. ;  ; RooArgSet const * _normSet = nullptr;  Normalization integral (owned by _normMgr) ;  ; double _rawValue = 0;  ; bool _selectComp = false;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; std::unique_ptr< RooNumGenConfig > _specGeneratorConfig;  ! MC generator configuration specific for this object ;  ; Int_t _traceCount = 0;  Number of traces remaining to print. ;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; Int_t _plotBins = 100;  Number of plot bins. ;  ; double _plotMax = 0.0;  Maximum of plot range. ;  ; double _plotMin = 0.0;  Minimum of plot range. ;  ; bool _selectComp = true;  A buffer for reading values from trees. ;  ; std::unique_ptr< RooNumIntConfig > _specIntegratorConfig;  ; TreeReadBuffer * _treeReadBuffer = nullptr;  ; TString _unit;  Unit for objects value. ;  ; double _value = 0.0;  Cache for current value of object. ;  ;  Protected Attributes inherited from RooAbsArg; std::set< std::string > _boolAttrib;  ; std::set< std::string > _boolAttribTransient;  ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFunctor1DPdfBinding.html:67802,configurat,configuration,67802,doc/master/classRooFunctor1DPdfBinding.html,https://root.cern,https://root.cern/doc/master/classRooFunctor1DPdfBinding.html,1,['configurat'],['configuration']
Deployability,ve the configuration ; : 15 | 27781.4 26354.5 0.0197825 0.0017915 44466.6 0; : 16 Minimum Test error found - save the configuration ; : 16 | 27524.2 26104.3 0.0196926 0.00175551 44600.3 0; : 17 Minimum Test error found - save the configuration ; : 17 | 27271.4 25860.7 0.0197778 0.00177907 44447.7 0; : 18 Minimum Test error found - save the configuration ; : 18 | 27023.6 25622.6 0.0197311 0.00176281 44522.9 0; : 19 Minimum Test error found - save the configuration ; : 19 | 26780.6 25388.8 0.0197339 0.00176163 44513.1 0; : 20 Minimum Test error found - save the configuration ; : 20 | 26542.7 25157.4 0.0198818 0.0018763 44431 0; : 21 Minimum Test error found - save the configuration ; : 21 | 26311 24925.1 0.0199584 0.00175652 43951.6 0; : 22 Minimum Test error found - save the configuration ; : 22 | 26076.9 24700.5 0.0197873 0.00176359 44385.9 0; : 23 Minimum Test error found - save the configuration ; : 23 | 25845.4 24483.8 0.0196702 0.00176161 44671.3 0; : 24 Minimum Test error found - save the configuration ; : 24 | 25624.1 24264.1 0.0196853 0.00176075 44631.5 0; : 25 Minimum Test error found - save the configuration ; : 25 | 25402.4 24046.8 0.0199052 0.00182376 44244.2 0; : 26 Minimum Test error found - save the configuration ; : 26 | 25181.1 23835.2 0.0199605 0.00176778 43973.7 0; : 27 Minimum Test error found - save the configuration ; : 27 | 24965.1 23625.2 0.0197673 0.00175956 44425.4 0; : 28 Minimum Test error found - save the configuration ; : 28 | 24751.3 23417.4 0.0197715 0.00178318 44473.3 0; : 29 Minimum Test error found - save the configuration ; : 29 | 24538.1 23214.7 0.019691 0.0017711 44643.2 0; : 30 Minimum Test error found - save the configuration ; : 30 | 24332.4 23009.4 0.0197207 0.00177726 44584.5 0; : 31 Minimum Test error found - save the configuration ; : 31 | 24122.8 22810.9 0.0196876 0.00176879 44645.9 0; : 32 Minimum Test error found - save the configuration ; : 32 | 23919.8 22612.5 0.01973 0.00178692 44585.4 0; : 33 Minimum Test error found,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:13779,configurat,configuration,13779,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,ve the configuration ; : 34 | 23516.3 22222.5 0.0206631 0.00186547 42558.4 0; : 35 Minimum Test error found - save the configuration ; : 35 | 23322.1 22028.2 0.0200826 0.00177554 43698.9 0; : 36 Minimum Test error found - save the configuration ; : 36 | 23123.9 21840 0.0197735 0.00177073 44437.6 0; : 37 Minimum Test error found - save the configuration ; : 37 | 22932.1 21651.2 0.0197273 0.00177446 44561.1 0; : 38 Minimum Test error found - save the configuration ; : 38 | 22740.7 21464.4 0.0197166 0.00177193 44581.5 0; : 39 Minimum Test error found - save the configuration ; : 39 | 22549.1 21282.9 0.0197213 0.00177445 44576 0; : 40 Minimum Test error found - save the configuration ; : 40 | 22363.6 21100 0.0197729 0.00177445 44448.2 0; : 41 Minimum Test error found - save the configuration ; : 41 | 22176.6 20921.1 0.0197131 0.00176514 44573.2 0; : 42 Minimum Test error found - save the configuration ; : 42 | 21994.9 20740.9 0.0197264 0.00176834 44548.1 0; : 43 Minimum Test error found - save the configuration ; : 43 | 21811.7 20564.6 0.0197476 0.00176764 44494 0; : 44 Minimum Test error found - save the configuration ; : 44 | 21631.5 20390.5 0.0198172 0.00177793 44347.7 0; : 45 Minimum Test error found - save the configuration ; : 45 | 21453.9 20217 0.0197313 0.00176795 44535.1 0; : 46 Minimum Test error found - save the configuration ; : 46 | 21277.2 20045.6 0.0197489 0.00176953 44495.5 0; : 47 Minimum Test error found - save the configuration ; : 47 | 21102.5 19876.1 0.0197499 0.00176859 44490.7 0; : 48 Minimum Test error found - save the configuration ; : 48 | 20931.2 19705.9 0.0197403 0.00176149 44496.7 0; : 49 Minimum Test error found - save the configuration ; : 49 | 20758.9 19539.2 0.0199993 0.00178715 43926.8 0; : 50 Minimum Test error found - save the configuration ; : 50 | 20589.8 19373.7 0.0199739 0.00177216 43951.9 0; : 51 Minimum Test error found - save the configuration ; : 51 | 20419.5 19213.6 0.0197688 0.0017747 44459 0; : 52 Minimum Test error found - ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:15896,configurat,configuration,15896,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,ve the configuration ; : 40 | 22363.6 21100 0.0197729 0.00177445 44448.2 0; : 41 Minimum Test error found - save the configuration ; : 41 | 22176.6 20921.1 0.0197131 0.00176514 44573.2 0; : 42 Minimum Test error found - save the configuration ; : 42 | 21994.9 20740.9 0.0197264 0.00176834 44548.1 0; : 43 Minimum Test error found - save the configuration ; : 43 | 21811.7 20564.6 0.0197476 0.00176764 44494 0; : 44 Minimum Test error found - save the configuration ; : 44 | 21631.5 20390.5 0.0198172 0.00177793 44347.7 0; : 45 Minimum Test error found - save the configuration ; : 45 | 21453.9 20217 0.0197313 0.00176795 44535.1 0; : 46 Minimum Test error found - save the configuration ; : 46 | 21277.2 20045.6 0.0197489 0.00176953 44495.5 0; : 47 Minimum Test error found - save the configuration ; : 47 | 21102.5 19876.1 0.0197499 0.00176859 44490.7 0; : 48 Minimum Test error found - save the configuration ; : 48 | 20931.2 19705.9 0.0197403 0.00176149 44496.7 0; : 49 Minimum Test error found - save the configuration ; : 49 | 20758.9 19539.2 0.0199993 0.00178715 43926.8 0; : 50 Minimum Test error found - save the configuration ; : 50 | 20589.8 19373.7 0.0199739 0.00177216 43951.9 0; : 51 Minimum Test error found - save the configuration ; : 51 | 20419.5 19213.6 0.0197688 0.0017747 44459 0; : 52 Minimum Test error found - save the configuration ; : 52 | 20255.7 19051.4 0.0197679 0.00177721 44467.5 0; : 53 Minimum Test error found - save the configuration ; : 53 | 20090.6 18891.7 0.0197461 0.00177488 44515.6 0; : 54 Minimum Test error found - save the configuration ; : 54 | 19926.4 18735.4 0.0197628 0.00177559 44476 0; : 55 Minimum Test error found - save the configuration ; : 55 | 19766 18579 0.0197479 0.00177128 44502.3 0; : 56 Minimum Test error found - save the configuration ; : 56 | 19606.6 18423 0.0198259 0.00178958 44354.9 0; : 57 Minimum Test error found - save the configuration ; : 57 | 19448.2 18266.7 0.0197832 0.00177932 44434.9 0; : 58 Minimum Test error found - save,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:16564,configurat,configuration,16564,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,ve the configuration ; : 60 | 18976.4 17813.4 0.0198417 0.00178241 44298.6 0; : 61 Minimum Test error found - save the configuration ; : 61 | 18829.3 17664.6 0.0197742 0.00177192 44438.7 0; : 62 Minimum Test error found - save the configuration ; : 62 | 18675.1 17508.4 0.0197937 0.00177252 44392.2 0; : 63 Minimum Test error found - save the configuration ; : 63 | 18512.9 17340.5 0.019822 0.0017786 44337.4 0; : 64 Minimum Test error found - save the configuration ; : 64 | 18353.5 17179.2 0.0198469 0.00178029 44280.6 0; : 65 Minimum Test error found - save the configuration ; : 65 | 18201.3 17035.2 0.0198777 0.00178599 44219.2 0; : 66 Minimum Test error found - save the configuration ; : 66 | 18048.3 16883.1 0.019869 0.0017844 44236.5 0; : 67 Minimum Test error found - save the configuration ; : 67 | 17898.4 16736.1 0.0198962 0.00180855 44229.1 0; : 68 Minimum Test error found - save the configuration ; : 68 | 17745 16589.7 0.0198886 0.00178724 44195.6 0; : 69 Minimum Test error found - save the configuration ; : 69 | 17598.1 16441.7 0.0198822 0.00177929 44191.7 0; : 70 Minimum Test error found - save the configuration ; : 70 | 17446.3 16297.7 0.0199037 0.00178336 44149.4 0; : 71 Minimum Test error found - save the configuration ; : 71 | 17299.3 16156.1 0.0199217 0.00177946 44096 0; : 72 Minimum Test error found - save the configuration ; : 72 | 17155.5 16013.3 0.0198893 0.00178782 44195.4 0; : 73 Minimum Test error found - save the configuration ; : 73 | 17008.7 15875.5 0.0199043 0.00178745 44157.9 0; : 74 Minimum Test error found - save the configuration ; : 74 | 16868.3 15734.7 0.0199692 0.00179417 44016.4 0; : 75 Minimum Test error found - save the configuration ; : 75 | 16724.2 15597.7 0.0199149 0.00178949 44136.9 0; : 76 Minimum Test error found - save the configuration ; : 76 | 16584 15460 0.0199224 0.00178826 44115.8 0; : 77 Minimum Test error found - save the configuration ; : 77 | 16444.4 15323.6 0.0199118 0.00178921 44143.8 0; : 78 Minimum Test error found -,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:18787,configurat,configuration,18787,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,ve the configuration ; : 61 | 18829.3 17664.6 0.0197742 0.00177192 44438.7 0; : 62 Minimum Test error found - save the configuration ; : 62 | 18675.1 17508.4 0.0197937 0.00177252 44392.2 0; : 63 Minimum Test error found - save the configuration ; : 63 | 18512.9 17340.5 0.019822 0.0017786 44337.4 0; : 64 Minimum Test error found - save the configuration ; : 64 | 18353.5 17179.2 0.0198469 0.00178029 44280.6 0; : 65 Minimum Test error found - save the configuration ; : 65 | 18201.3 17035.2 0.0198777 0.00178599 44219.2 0; : 66 Minimum Test error found - save the configuration ; : 66 | 18048.3 16883.1 0.019869 0.0017844 44236.5 0; : 67 Minimum Test error found - save the configuration ; : 67 | 17898.4 16736.1 0.0198962 0.00180855 44229.1 0; : 68 Minimum Test error found - save the configuration ; : 68 | 17745 16589.7 0.0198886 0.00178724 44195.6 0; : 69 Minimum Test error found - save the configuration ; : 69 | 17598.1 16441.7 0.0198822 0.00177929 44191.7 0; : 70 Minimum Test error found - save the configuration ; : 70 | 17446.3 16297.7 0.0199037 0.00178336 44149.4 0; : 71 Minimum Test error found - save the configuration ; : 71 | 17299.3 16156.1 0.0199217 0.00177946 44096 0; : 72 Minimum Test error found - save the configuration ; : 72 | 17155.5 16013.3 0.0198893 0.00178782 44195.4 0; : 73 Minimum Test error found - save the configuration ; : 73 | 17008.7 15875.5 0.0199043 0.00178745 44157.9 0; : 74 Minimum Test error found - save the configuration ; : 74 | 16868.3 15734.7 0.0199692 0.00179417 44016.4 0; : 75 Minimum Test error found - save the configuration ; : 75 | 16724.2 15597.7 0.0199149 0.00178949 44136.9 0; : 76 Minimum Test error found - save the configuration ; : 76 | 16584 15460 0.0199224 0.00178826 44115.8 0; : 77 Minimum Test error found - save the configuration ; : 77 | 16444.4 15323.6 0.0199118 0.00178921 44143.8 0; : 78 Minimum Test error found - save the configuration ; : 78 | 16305.9 15188.8 0.0201885 0.00179593 43495.8 0; : 79 Minimum Test error found -,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:18899,configurat,configuration,18899,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,ve the configuration ; : 62 | 18675.1 17508.4 0.0197937 0.00177252 44392.2 0; : 63 Minimum Test error found - save the configuration ; : 63 | 18512.9 17340.5 0.019822 0.0017786 44337.4 0; : 64 Minimum Test error found - save the configuration ; : 64 | 18353.5 17179.2 0.0198469 0.00178029 44280.6 0; : 65 Minimum Test error found - save the configuration ; : 65 | 18201.3 17035.2 0.0198777 0.00178599 44219.2 0; : 66 Minimum Test error found - save the configuration ; : 66 | 18048.3 16883.1 0.019869 0.0017844 44236.5 0; : 67 Minimum Test error found - save the configuration ; : 67 | 17898.4 16736.1 0.0198962 0.00180855 44229.1 0; : 68 Minimum Test error found - save the configuration ; : 68 | 17745 16589.7 0.0198886 0.00178724 44195.6 0; : 69 Minimum Test error found - save the configuration ; : 69 | 17598.1 16441.7 0.0198822 0.00177929 44191.7 0; : 70 Minimum Test error found - save the configuration ; : 70 | 17446.3 16297.7 0.0199037 0.00178336 44149.4 0; : 71 Minimum Test error found - save the configuration ; : 71 | 17299.3 16156.1 0.0199217 0.00177946 44096 0; : 72 Minimum Test error found - save the configuration ; : 72 | 17155.5 16013.3 0.0198893 0.00178782 44195.4 0; : 73 Minimum Test error found - save the configuration ; : 73 | 17008.7 15875.5 0.0199043 0.00178745 44157.9 0; : 74 Minimum Test error found - save the configuration ; : 74 | 16868.3 15734.7 0.0199692 0.00179417 44016.4 0; : 75 Minimum Test error found - save the configuration ; : 75 | 16724.2 15597.7 0.0199149 0.00178949 44136.9 0; : 76 Minimum Test error found - save the configuration ; : 76 | 16584 15460 0.0199224 0.00178826 44115.8 0; : 77 Minimum Test error found - save the configuration ; : 77 | 16444.4 15323.6 0.0199118 0.00178921 44143.8 0; : 78 Minimum Test error found - save the configuration ; : 78 | 16305.9 15188.8 0.0201885 0.00179593 43495.8 0; : 79 Minimum Test error found - save the configuration ; : 79 | 16166.6 15057.4 0.0199259 0.00179169 44115.6 0; : 80 Minimum Test error found -,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:19011,configurat,configuration,19011,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,ve the configuration ; : 64 | 18353.5 17179.2 0.0198469 0.00178029 44280.6 0; : 65 Minimum Test error found - save the configuration ; : 65 | 18201.3 17035.2 0.0198777 0.00178599 44219.2 0; : 66 Minimum Test error found - save the configuration ; : 66 | 18048.3 16883.1 0.019869 0.0017844 44236.5 0; : 67 Minimum Test error found - save the configuration ; : 67 | 17898.4 16736.1 0.0198962 0.00180855 44229.1 0; : 68 Minimum Test error found - save the configuration ; : 68 | 17745 16589.7 0.0198886 0.00178724 44195.6 0; : 69 Minimum Test error found - save the configuration ; : 69 | 17598.1 16441.7 0.0198822 0.00177929 44191.7 0; : 70 Minimum Test error found - save the configuration ; : 70 | 17446.3 16297.7 0.0199037 0.00178336 44149.4 0; : 71 Minimum Test error found - save the configuration ; : 71 | 17299.3 16156.1 0.0199217 0.00177946 44096 0; : 72 Minimum Test error found - save the configuration ; : 72 | 17155.5 16013.3 0.0198893 0.00178782 44195.4 0; : 73 Minimum Test error found - save the configuration ; : 73 | 17008.7 15875.5 0.0199043 0.00178745 44157.9 0; : 74 Minimum Test error found - save the configuration ; : 74 | 16868.3 15734.7 0.0199692 0.00179417 44016.4 0; : 75 Minimum Test error found - save the configuration ; : 75 | 16724.2 15597.7 0.0199149 0.00178949 44136.9 0; : 76 Minimum Test error found - save the configuration ; : 76 | 16584 15460 0.0199224 0.00178826 44115.8 0; : 77 Minimum Test error found - save the configuration ; : 77 | 16444.4 15323.6 0.0199118 0.00178921 44143.8 0; : 78 Minimum Test error found - save the configuration ; : 78 | 16305.9 15188.8 0.0201885 0.00179593 43495.8 0; : 79 Minimum Test error found - save the configuration ; : 79 | 16166.6 15057.4 0.0199259 0.00179169 44115.6 0; : 80 Minimum Test error found - save the configuration ; : 80 | 16031 14926.5 0.0199332 0.00179406 44103.6 0; : 81 Minimum Test error found - save the configuration ; : 81 | 15897.7 14793.4 0.0199416 0.00179024 44073.9 0; : 82 Minimum Test error found -,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:19233,configurat,configuration,19233,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,ve the configuration ; : 65 | 18201.3 17035.2 0.0198777 0.00178599 44219.2 0; : 66 Minimum Test error found - save the configuration ; : 66 | 18048.3 16883.1 0.019869 0.0017844 44236.5 0; : 67 Minimum Test error found - save the configuration ; : 67 | 17898.4 16736.1 0.0198962 0.00180855 44229.1 0; : 68 Minimum Test error found - save the configuration ; : 68 | 17745 16589.7 0.0198886 0.00178724 44195.6 0; : 69 Minimum Test error found - save the configuration ; : 69 | 17598.1 16441.7 0.0198822 0.00177929 44191.7 0; : 70 Minimum Test error found - save the configuration ; : 70 | 17446.3 16297.7 0.0199037 0.00178336 44149.4 0; : 71 Minimum Test error found - save the configuration ; : 71 | 17299.3 16156.1 0.0199217 0.00177946 44096 0; : 72 Minimum Test error found - save the configuration ; : 72 | 17155.5 16013.3 0.0198893 0.00178782 44195.4 0; : 73 Minimum Test error found - save the configuration ; : 73 | 17008.7 15875.5 0.0199043 0.00178745 44157.9 0; : 74 Minimum Test error found - save the configuration ; : 74 | 16868.3 15734.7 0.0199692 0.00179417 44016.4 0; : 75 Minimum Test error found - save the configuration ; : 75 | 16724.2 15597.7 0.0199149 0.00178949 44136.9 0; : 76 Minimum Test error found - save the configuration ; : 76 | 16584 15460 0.0199224 0.00178826 44115.8 0; : 77 Minimum Test error found - save the configuration ; : 77 | 16444.4 15323.6 0.0199118 0.00178921 44143.8 0; : 78 Minimum Test error found - save the configuration ; : 78 | 16305.9 15188.8 0.0201885 0.00179593 43495.8 0; : 79 Minimum Test error found - save the configuration ; : 79 | 16166.6 15057.4 0.0199259 0.00179169 44115.6 0; : 80 Minimum Test error found - save the configuration ; : 80 | 16031 14926.5 0.0199332 0.00179406 44103.6 0; : 81 Minimum Test error found - save the configuration ; : 81 | 15897.7 14793.4 0.0199416 0.00179024 44073.9 0; : 82 Minimum Test error found - save the configuration ; : 82 | 15763.4 14662.5 0.0199481 0.00178931 44055.8 0; : 83 Minimum Test error found -,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:19345,configurat,configuration,19345,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,ve the configuration ; : 66 | 18048.3 16883.1 0.019869 0.0017844 44236.5 0; : 67 Minimum Test error found - save the configuration ; : 67 | 17898.4 16736.1 0.0198962 0.00180855 44229.1 0; : 68 Minimum Test error found - save the configuration ; : 68 | 17745 16589.7 0.0198886 0.00178724 44195.6 0; : 69 Minimum Test error found - save the configuration ; : 69 | 17598.1 16441.7 0.0198822 0.00177929 44191.7 0; : 70 Minimum Test error found - save the configuration ; : 70 | 17446.3 16297.7 0.0199037 0.00178336 44149.4 0; : 71 Minimum Test error found - save the configuration ; : 71 | 17299.3 16156.1 0.0199217 0.00177946 44096 0; : 72 Minimum Test error found - save the configuration ; : 72 | 17155.5 16013.3 0.0198893 0.00178782 44195.4 0; : 73 Minimum Test error found - save the configuration ; : 73 | 17008.7 15875.5 0.0199043 0.00178745 44157.9 0; : 74 Minimum Test error found - save the configuration ; : 74 | 16868.3 15734.7 0.0199692 0.00179417 44016.4 0; : 75 Minimum Test error found - save the configuration ; : 75 | 16724.2 15597.7 0.0199149 0.00178949 44136.9 0; : 76 Minimum Test error found - save the configuration ; : 76 | 16584 15460 0.0199224 0.00178826 44115.8 0; : 77 Minimum Test error found - save the configuration ; : 77 | 16444.4 15323.6 0.0199118 0.00178921 44143.8 0; : 78 Minimum Test error found - save the configuration ; : 78 | 16305.9 15188.8 0.0201885 0.00179593 43495.8 0; : 79 Minimum Test error found - save the configuration ; : 79 | 16166.6 15057.4 0.0199259 0.00179169 44115.6 0; : 80 Minimum Test error found - save the configuration ; : 80 | 16031 14926.5 0.0199332 0.00179406 44103.6 0; : 81 Minimum Test error found - save the configuration ; : 81 | 15897.7 14793.4 0.0199416 0.00179024 44073.9 0; : 82 Minimum Test error found - save the configuration ; : 82 | 15763.4 14662.5 0.0199481 0.00178931 44055.8 0; : 83 Minimum Test error found - save the configuration ; : 83 | 15630.7 14533.2 0.019931 0.00179081 44101 0; : 84 Minimum Test error found - sa,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:19457,configurat,configuration,19457,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,ve the configuration ; : 69 | 17598.1 16441.7 0.0198822 0.00177929 44191.7 0; : 70 Minimum Test error found - save the configuration ; : 70 | 17446.3 16297.7 0.0199037 0.00178336 44149.4 0; : 71 Minimum Test error found - save the configuration ; : 71 | 17299.3 16156.1 0.0199217 0.00177946 44096 0; : 72 Minimum Test error found - save the configuration ; : 72 | 17155.5 16013.3 0.0198893 0.00178782 44195.4 0; : 73 Minimum Test error found - save the configuration ; : 73 | 17008.7 15875.5 0.0199043 0.00178745 44157.9 0; : 74 Minimum Test error found - save the configuration ; : 74 | 16868.3 15734.7 0.0199692 0.00179417 44016.4 0; : 75 Minimum Test error found - save the configuration ; : 75 | 16724.2 15597.7 0.0199149 0.00178949 44136.9 0; : 76 Minimum Test error found - save the configuration ; : 76 | 16584 15460 0.0199224 0.00178826 44115.8 0; : 77 Minimum Test error found - save the configuration ; : 77 | 16444.4 15323.6 0.0199118 0.00178921 44143.8 0; : 78 Minimum Test error found - save the configuration ; : 78 | 16305.9 15188.8 0.0201885 0.00179593 43495.8 0; : 79 Minimum Test error found - save the configuration ; : 79 | 16166.6 15057.4 0.0199259 0.00179169 44115.6 0; : 80 Minimum Test error found - save the configuration ; : 80 | 16031 14926.5 0.0199332 0.00179406 44103.6 0; : 81 Minimum Test error found - save the configuration ; : 81 | 15897.7 14793.4 0.0199416 0.00179024 44073.9 0; : 82 Minimum Test error found - save the configuration ; : 82 | 15763.4 14662.5 0.0199481 0.00178931 44055.8 0; : 83 Minimum Test error found - save the configuration ; : 83 | 15630.7 14533.2 0.019931 0.00179081 44101 0; : 84 Minimum Test error found - save the configuration ; : 84 | 15500.1 14404.7 0.0199524 0.00179281 44053.8 0; : 85 Minimum Test error found - save the configuration ; : 85 | 15368.8 14279.5 0.0199675 0.00179204 44015.4 0; : 86 Minimum Test error found - save the configuration ; : 86 | 15239.7 14153.7 0.0199843 0.00181623 44033.3 0; : 87 Minimum Test error found ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:19789,configurat,configuration,19789,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,ve the configuration ; : 70 | 17446.3 16297.7 0.0199037 0.00178336 44149.4 0; : 71 Minimum Test error found - save the configuration ; : 71 | 17299.3 16156.1 0.0199217 0.00177946 44096 0; : 72 Minimum Test error found - save the configuration ; : 72 | 17155.5 16013.3 0.0198893 0.00178782 44195.4 0; : 73 Minimum Test error found - save the configuration ; : 73 | 17008.7 15875.5 0.0199043 0.00178745 44157.9 0; : 74 Minimum Test error found - save the configuration ; : 74 | 16868.3 15734.7 0.0199692 0.00179417 44016.4 0; : 75 Minimum Test error found - save the configuration ; : 75 | 16724.2 15597.7 0.0199149 0.00178949 44136.9 0; : 76 Minimum Test error found - save the configuration ; : 76 | 16584 15460 0.0199224 0.00178826 44115.8 0; : 77 Minimum Test error found - save the configuration ; : 77 | 16444.4 15323.6 0.0199118 0.00178921 44143.8 0; : 78 Minimum Test error found - save the configuration ; : 78 | 16305.9 15188.8 0.0201885 0.00179593 43495.8 0; : 79 Minimum Test error found - save the configuration ; : 79 | 16166.6 15057.4 0.0199259 0.00179169 44115.6 0; : 80 Minimum Test error found - save the configuration ; : 80 | 16031 14926.5 0.0199332 0.00179406 44103.6 0; : 81 Minimum Test error found - save the configuration ; : 81 | 15897.7 14793.4 0.0199416 0.00179024 44073.9 0; : 82 Minimum Test error found - save the configuration ; : 82 | 15763.4 14662.5 0.0199481 0.00178931 44055.8 0; : 83 Minimum Test error found - save the configuration ; : 83 | 15630.7 14533.2 0.019931 0.00179081 44101 0; : 84 Minimum Test error found - save the configuration ; : 84 | 15500.1 14404.7 0.0199524 0.00179281 44053.8 0; : 85 Minimum Test error found - save the configuration ; : 85 | 15368.8 14279.5 0.0199675 0.00179204 44015.4 0; : 86 Minimum Test error found - save the configuration ; : 86 | 15239.7 14153.7 0.0199843 0.00181623 44033.3 0; : 87 Minimum Test error found - save the configuration ; : 87 | 15114.3 14026.9 0.0199836 0.00180455 44006.8 0; : 88 Minimum Test error found ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:19901,configurat,configuration,19901,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,ve the configuration ; : 72 | 17155.5 16013.3 0.0198893 0.00178782 44195.4 0; : 73 Minimum Test error found - save the configuration ; : 73 | 17008.7 15875.5 0.0199043 0.00178745 44157.9 0; : 74 Minimum Test error found - save the configuration ; : 74 | 16868.3 15734.7 0.0199692 0.00179417 44016.4 0; : 75 Minimum Test error found - save the configuration ; : 75 | 16724.2 15597.7 0.0199149 0.00178949 44136.9 0; : 76 Minimum Test error found - save the configuration ; : 76 | 16584 15460 0.0199224 0.00178826 44115.8 0; : 77 Minimum Test error found - save the configuration ; : 77 | 16444.4 15323.6 0.0199118 0.00178921 44143.8 0; : 78 Minimum Test error found - save the configuration ; : 78 | 16305.9 15188.8 0.0201885 0.00179593 43495.8 0; : 79 Minimum Test error found - save the configuration ; : 79 | 16166.6 15057.4 0.0199259 0.00179169 44115.6 0; : 80 Minimum Test error found - save the configuration ; : 80 | 16031 14926.5 0.0199332 0.00179406 44103.6 0; : 81 Minimum Test error found - save the configuration ; : 81 | 15897.7 14793.4 0.0199416 0.00179024 44073.9 0; : 82 Minimum Test error found - save the configuration ; : 82 | 15763.4 14662.5 0.0199481 0.00178931 44055.8 0; : 83 Minimum Test error found - save the configuration ; : 83 | 15630.7 14533.2 0.019931 0.00179081 44101 0; : 84 Minimum Test error found - save the configuration ; : 84 | 15500.1 14404.7 0.0199524 0.00179281 44053.8 0; : 85 Minimum Test error found - save the configuration ; : 85 | 15368.8 14279.5 0.0199675 0.00179204 44015.4 0; : 86 Minimum Test error found - save the configuration ; : 86 | 15239.7 14153.7 0.0199843 0.00181623 44033.3 0; : 87 Minimum Test error found - save the configuration ; : 87 | 15114.3 14026.9 0.0199836 0.00180455 44006.8 0; : 88 Minimum Test error found - save the configuration ; : 88 | 14984.6 13906.4 0.01996 0.00179383 44038 0; : 89 Minimum Test error found - save the configuration ; : 89 | 14861.1 13782.6 0.0200963 0.00185792 43863.5 0; : 90 Minimum Test error found - ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:20123,configurat,configuration,20123,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,ve the configuration ; : 73 | 17008.7 15875.5 0.0199043 0.00178745 44157.9 0; : 74 Minimum Test error found - save the configuration ; : 74 | 16868.3 15734.7 0.0199692 0.00179417 44016.4 0; : 75 Minimum Test error found - save the configuration ; : 75 | 16724.2 15597.7 0.0199149 0.00178949 44136.9 0; : 76 Minimum Test error found - save the configuration ; : 76 | 16584 15460 0.0199224 0.00178826 44115.8 0; : 77 Minimum Test error found - save the configuration ; : 77 | 16444.4 15323.6 0.0199118 0.00178921 44143.8 0; : 78 Minimum Test error found - save the configuration ; : 78 | 16305.9 15188.8 0.0201885 0.00179593 43495.8 0; : 79 Minimum Test error found - save the configuration ; : 79 | 16166.6 15057.4 0.0199259 0.00179169 44115.6 0; : 80 Minimum Test error found - save the configuration ; : 80 | 16031 14926.5 0.0199332 0.00179406 44103.6 0; : 81 Minimum Test error found - save the configuration ; : 81 | 15897.7 14793.4 0.0199416 0.00179024 44073.9 0; : 82 Minimum Test error found - save the configuration ; : 82 | 15763.4 14662.5 0.0199481 0.00178931 44055.8 0; : 83 Minimum Test error found - save the configuration ; : 83 | 15630.7 14533.2 0.019931 0.00179081 44101 0; : 84 Minimum Test error found - save the configuration ; : 84 | 15500.1 14404.7 0.0199524 0.00179281 44053.8 0; : 85 Minimum Test error found - save the configuration ; : 85 | 15368.8 14279.5 0.0199675 0.00179204 44015.4 0; : 86 Minimum Test error found - save the configuration ; : 86 | 15239.7 14153.7 0.0199843 0.00181623 44033.3 0; : 87 Minimum Test error found - save the configuration ; : 87 | 15114.3 14026.9 0.0199836 0.00180455 44006.8 0; : 88 Minimum Test error found - save the configuration ; : 88 | 14984.6 13906.4 0.01996 0.00179383 44038 0; : 89 Minimum Test error found - save the configuration ; : 89 | 14861.1 13782.6 0.0200963 0.00185792 43863.5 0; : 90 Minimum Test error found - save the configuration ; : 90 | 14737.4 13659.4 0.0204557 0.00186757 43038.2 0; : 91 Minimum Test error found - ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:20235,configurat,configuration,20235,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,ve the configuration ; : 74 | 16868.3 15734.7 0.0199692 0.00179417 44016.4 0; : 75 Minimum Test error found - save the configuration ; : 75 | 16724.2 15597.7 0.0199149 0.00178949 44136.9 0; : 76 Minimum Test error found - save the configuration ; : 76 | 16584 15460 0.0199224 0.00178826 44115.8 0; : 77 Minimum Test error found - save the configuration ; : 77 | 16444.4 15323.6 0.0199118 0.00178921 44143.8 0; : 78 Minimum Test error found - save the configuration ; : 78 | 16305.9 15188.8 0.0201885 0.00179593 43495.8 0; : 79 Minimum Test error found - save the configuration ; : 79 | 16166.6 15057.4 0.0199259 0.00179169 44115.6 0; : 80 Minimum Test error found - save the configuration ; : 80 | 16031 14926.5 0.0199332 0.00179406 44103.6 0; : 81 Minimum Test error found - save the configuration ; : 81 | 15897.7 14793.4 0.0199416 0.00179024 44073.9 0; : 82 Minimum Test error found - save the configuration ; : 82 | 15763.4 14662.5 0.0199481 0.00178931 44055.8 0; : 83 Minimum Test error found - save the configuration ; : 83 | 15630.7 14533.2 0.019931 0.00179081 44101 0; : 84 Minimum Test error found - save the configuration ; : 84 | 15500.1 14404.7 0.0199524 0.00179281 44053.8 0; : 85 Minimum Test error found - save the configuration ; : 85 | 15368.8 14279.5 0.0199675 0.00179204 44015.4 0; : 86 Minimum Test error found - save the configuration ; : 86 | 15239.7 14153.7 0.0199843 0.00181623 44033.3 0; : 87 Minimum Test error found - save the configuration ; : 87 | 15114.3 14026.9 0.0199836 0.00180455 44006.8 0; : 88 Minimum Test error found - save the configuration ; : 88 | 14984.6 13906.4 0.01996 0.00179383 44038 0; : 89 Minimum Test error found - save the configuration ; : 89 | 14861.1 13782.6 0.0200963 0.00185792 43863.5 0; : 90 Minimum Test error found - save the configuration ; : 90 | 14737.4 13659.4 0.0204557 0.00186757 43038.2 0; : 91 Minimum Test error found - save the configuration ; : 91 | 14612.9 13539.6 0.0208154 0.00188863 42268.3 0; : 92 Minimum Test error found - ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:20347,configurat,configuration,20347,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,ve the configuration ; : 8 | 29852.4 28319.6 0.0206438 0.00186969 42611.9 0; : 9 Minimum Test error found - save the configuration ; : 9 | 29498.2 28000.3 0.0204359 0.0018446 43030.8 0; : 10 Minimum Test error found - save the configuration ; : 10 | 29182.7 27696.8 0.0202998 0.00181461 43277.8 0; : 11 Minimum Test error found - save the configuration ; : 11 | 28878.3 27413.2 0.0196838 0.00176755 44652.2 0; : 12 Minimum Test error found - save the configuration ; : 12 | 28593.7 27134.7 0.0196593 0.00176089 44696.8 0; : 13 Minimum Test error found - save the configuration ; : 13 | 28310.5 26871.8 0.0196662 0.00176724 44695.4 0; : 14 Minimum Test error found - save the configuration ; : 14 | 28043.7 26610.8 0.019761 0.00176915 44464.7 0; : 15 Minimum Test error found - save the configuration ; : 15 | 27781.4 26354.5 0.0197825 0.0017915 44466.6 0; : 16 Minimum Test error found - save the configuration ; : 16 | 27524.2 26104.3 0.0196926 0.00175551 44600.3 0; : 17 Minimum Test error found - save the configuration ; : 17 | 27271.4 25860.7 0.0197778 0.00177907 44447.7 0; : 18 Minimum Test error found - save the configuration ; : 18 | 27023.6 25622.6 0.0197311 0.00176281 44522.9 0; : 19 Minimum Test error found - save the configuration ; : 19 | 26780.6 25388.8 0.0197339 0.00176163 44513.1 0; : 20 Minimum Test error found - save the configuration ; : 20 | 26542.7 25157.4 0.0198818 0.0018763 44431 0; : 21 Minimum Test error found - save the configuration ; : 21 | 26311 24925.1 0.0199584 0.00175652 43951.6 0; : 22 Minimum Test error found - save the configuration ; : 22 | 26076.9 24700.5 0.0197873 0.00176359 44385.9 0; : 23 Minimum Test error found - save the configuration ; : 23 | 25845.4 24483.8 0.0196702 0.00176161 44671.3 0; : 24 Minimum Test error found - save the configuration ; : 24 | 25624.1 24264.1 0.0196853 0.00176075 44631.5 0; : 25 Minimum Test error found - save the configuration ; : 25 | 25402.4 24046.8 0.0199052 0.00182376 44244.2 0; : 26 Minimum Test error found ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:13000,configurat,configuration,13000,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,ve the configuration ; : 85 | 15368.8 14279.5 0.0199675 0.00179204 44015.4 0; : 86 Minimum Test error found - save the configuration ; : 86 | 15239.7 14153.7 0.0199843 0.00181623 44033.3 0; : 87 Minimum Test error found - save the configuration ; : 87 | 15114.3 14026.9 0.0199836 0.00180455 44006.8 0; : 88 Minimum Test error found - save the configuration ; : 88 | 14984.6 13906.4 0.01996 0.00179383 44038 0; : 89 Minimum Test error found - save the configuration ; : 89 | 14861.1 13782.6 0.0200963 0.00185792 43863.5 0; : 90 Minimum Test error found - save the configuration ; : 90 | 14737.4 13659.4 0.0204557 0.00186757 43038.2 0; : 91 Minimum Test error found - save the configuration ; : 91 | 14612.9 13539.6 0.0208154 0.00188863 42268.3 0; : 92 Minimum Test error found - save the configuration ; : 92 | 14490.4 13421.6 0.0202522 0.00182164 43406.2 0; : 93 Minimum Test error found - save the configuration ; : 93 | 14371 13301.8 0.0200599 0.00180046 43813.1 0; : 94 Minimum Test error found - save the configuration ; : 94 | 14248.9 13186.1 0.0201736 0.00184165 43639.6 0; : 95 Minimum Test error found - save the configuration ; : 95 | 14131.5 13069.6 0.020175 0.00181418 43571 0; : 96 Minimum Test error found - save the configuration ; : 96 | 14014.5 12952.5 0.0201885 0.00182372 43561.6 0; : 97 Minimum Test error found - save the configuration ; : 97 | 13896.7 12838.4 0.0200385 0.00180689 43879.7 0; : 98 Minimum Test error found - save the configuration ; : 98 | 13782 12723.6 0.020062 0.00182418 43864.8 0; : 99 Minimum Test error found - save the configuration ; : 99 | 13666.4 12611.1 0.0200618 0.00180714 43824.4 0; : 100 Minimum Test error found - save the configuration ; : 100 | 13550.9 12502.3 0.0200464 0.00180511 43856.6 0; : 101 Minimum Test error found - save the configuration ; : 101 | 13439.7 12392 0.0201571 0.00185957 43721.7 0; : 102 Minimum Test error found - save the configuration ; : 102 | 13328.8 12281.3 0.0202143 0.00181888 43489.1 0; : 103 Minimum Test error fo,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:21570,configurat,configuration,21570,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,ve the configuration ; : 86 | 15239.7 14153.7 0.0199843 0.00181623 44033.3 0; : 87 Minimum Test error found - save the configuration ; : 87 | 15114.3 14026.9 0.0199836 0.00180455 44006.8 0; : 88 Minimum Test error found - save the configuration ; : 88 | 14984.6 13906.4 0.01996 0.00179383 44038 0; : 89 Minimum Test error found - save the configuration ; : 89 | 14861.1 13782.6 0.0200963 0.00185792 43863.5 0; : 90 Minimum Test error found - save the configuration ; : 90 | 14737.4 13659.4 0.0204557 0.00186757 43038.2 0; : 91 Minimum Test error found - save the configuration ; : 91 | 14612.9 13539.6 0.0208154 0.00188863 42268.3 0; : 92 Minimum Test error found - save the configuration ; : 92 | 14490.4 13421.6 0.0202522 0.00182164 43406.2 0; : 93 Minimum Test error found - save the configuration ; : 93 | 14371 13301.8 0.0200599 0.00180046 43813.1 0; : 94 Minimum Test error found - save the configuration ; : 94 | 14248.9 13186.1 0.0201736 0.00184165 43639.6 0; : 95 Minimum Test error found - save the configuration ; : 95 | 14131.5 13069.6 0.020175 0.00181418 43571 0; : 96 Minimum Test error found - save the configuration ; : 96 | 14014.5 12952.5 0.0201885 0.00182372 43561.6 0; : 97 Minimum Test error found - save the configuration ; : 97 | 13896.7 12838.4 0.0200385 0.00180689 43879.7 0; : 98 Minimum Test error found - save the configuration ; : 98 | 13782 12723.6 0.020062 0.00182418 43864.8 0; : 99 Minimum Test error found - save the configuration ; : 99 | 13666.4 12611.1 0.0200618 0.00180714 43824.4 0; : 100 Minimum Test error found - save the configuration ; : 100 | 13550.9 12502.3 0.0200464 0.00180511 43856.6 0; : 101 Minimum Test error found - save the configuration ; : 101 | 13439.7 12392 0.0201571 0.00185957 43721.7 0; : 102 Minimum Test error found - save the configuration ; : 102 | 13328.8 12281.3 0.0202143 0.00181888 43489.1 0; : 103 Minimum Test error found - save the configuration ; : 103 | 13217 12173.3 0.0200026 0.0018059 43964.1 0; : 104 Minimum Test error fou,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:21682,configurat,configuration,21682,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,"veElement::SetRnrChildren(Bool_t rnr); virtual Bool_tTEveElement::SetRnrSelf(Bool_t rnr); virtual Bool_tTEveElement::SetRnrSelfChildren(Bool_t rnr_self, Bool_t rnr_children); virtual Bool_tTEveElement::SetRnrState(Bool_t rnr); voidTEveElement::SetSourceObject(TObject* o); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTEveElement::SetTransMatrix(Double_t* carr); virtual voidTEveElement::SetTransMatrix(const TGeoMatrix& mat); voidSetTubeR(Float_t x); virtual voidTObject::SetUniqueID(UInt_t uid); voidTEveElement::SetUserData(void* ud); voidTEveElement::SetVizModel(TEveElement* model); voidTEveElement::SetVizTag(const TString& tag); virtual voidShowMembers(TMemberInspector& insp); virtual Bool_tTEveElement::SingleRnrState() const; virtual Int_tTNamed::Sizeof() const; virtual voidTAtt3D::Sizeof3D() const; voidTEveElement::SpawnEditor()MENU ; voidTEveElement::StampColorSelection(); voidTEveElement::StampObjProps(); voidTEveElement::StampTransBBox(); voidTEveElement::StampVisibility(); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; Bool_tTEveElement::TestCSCBits(UChar_t f) const; virtual voidTEveElement::UnHighlighted(); virtual voidTEveElement::UnSelected(); virtual voidTObject::UseCurrentStyle(); voidTEveElement::VizDB_Apply(const char* tag)MENU ; voidTEveElement::VizDB_Insert(const char* tag, Bool_t replace = kTRUE, Bool_t update = kTRUE)MENU ; voidTEveElement::VizDB_Reapply()MENU ; voidTEveElement::VizDB_UpdateModel(Bool_t update = kTRUE)MENU ; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTEveElement::WriteVizParams(ostream& out, const TString& var).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveArrow.html:14991,update,update,14991,root/html528/TEveArrow.html,https://root.cern,https://root.cern/root/html528/TEveArrow.html,6,['update'],['update']
Deployability,"veElement::SetRnrState(Bool_t rnr); voidTEveCaloData::SetSliceColor(Int_t slice, Color_t col); voidTEveCaloData::SetSliceThreshold(Int_t slice, Float_t threshold); voidTEveCaloData::SetSliceTransparency(Int_t slice, Char_t t); voidTEveElement::SetSourceObject(TObject* o); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTEveElement::SetTransMatrix(Double_t* carr); virtual voidTEveElement::SetTransMatrix(const TGeoMatrix& mat); virtual voidTObject::SetUniqueID(UInt_t uid); voidTEveElement::SetUserData(void* ud); voidTEveElement::SetVizModel(TEveElement* model); voidTEveElement::SetVizTag(const TString& tag); voidTEveCaloData::SetWrapTwoPi(Bool_t w); virtual voidShowMembers(TMemberInspector&); virtual Bool_tTEveElement::SingleRnrState() const; virtual Int_tTNamed::Sizeof() const; voidTEveElement::SpawnEditor()MENU ; voidTEveElement::StampColorSelection(); voidTEveElement::StampObjProps(); voidTEveElement::StampTransBBox(); voidTEveElement::StampVisibility(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; Bool_tTEveElement::TestCSCBits(UChar_t f) const; virtual voidTEveCaloData::UnHighlighted(); virtual voidTEveCaloData::UnSelected(); virtual voidTObject::UseCurrentStyle(); voidTEveElement::VizDB_Apply(const char* tag)MENU ; voidTEveElement::VizDB_Insert(const char* tag, Bool_t replace = kTRUE, Bool_t update = kTRUE)MENU ; voidTEveElement::VizDB_Reapply()MENU ; voidTEveElement::VizDB_UpdateModel(Bool_t update = kTRUE)MENU ; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTEveElement::WriteVizParams(ostream& out, const TString& var).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TEveCaloDataHist.html:16620,update,update,16620,root/html534/TEveCaloDataHist.html,https://root.cern,https://root.cern/root/html534/TEveCaloDataHist.html,4,['update'],['update']
Deployability,"veElement::SetSourceObject(TObject* o); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTEveElement::SetTransMatrix(Double_t* carr); virtual voidTEveElement::SetTransMatrix(const TGeoMatrix& mat); virtual voidTObject::SetUniqueID(UInt_t uid); voidTEveElement::SetUserData(void* ud); voidTEveElement::SetVizModel(TEveElement* model); voidTEveElement::SetVizTag(const TString& tag); virtual voidShowMembers(TMemberInspector&); virtual Bool_tTEveElement::SingleRnrState() const; virtual Int_tTNamed::Sizeof() const; voidTEveElement::SpawnEditor()MENU ; voidTEveElement::StampColorSelection(); voidTEveElement::StampObjProps(); voidTEveElement::StampTransBBox(); voidTEveElement::StampVisibility(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); voidTEveWindow::SwapWindow(TEveWindow* w); static voidTEveWindow::SwapWindows(TEveWindow* w1, TEveWindow* w2); voidTEveWindow::SwapWindowWithCurrent()MENU ; virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; Bool_tTEveElement::TestCSCBits(UChar_t f) const; voidTEveWindow::TitleBarClicked(); voidTEveWindow::UndockWindow()MENU ; voidTEveWindow::UndockWindowDestroySlot()MENU ; virtual voidTEveElement::UnHighlighted(); virtual voidTEveElement::UnSelected(); virtual voidTObject::UseCurrentStyle(); voidTEveElement::VizDB_Apply(const char* tag)MENU ; voidTEveElement::VizDB_Insert(const char* tag, Bool_t replace = kTRUE, Bool_t update = kTRUE)MENU ; voidTEveElement::VizDB_Reapply()MENU ; voidTEveElement::VizDB_UpdateModel(Bool_t update = kTRUE)MENU ; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTEveElement::WriteVizParams(ostream& out, const TString& var).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TEveWindowFrame.html:17493,update,update,17493,root/html534/TEveWindowFrame.html,https://root.cern,https://root.cern/root/html534/TEveWindowFrame.html,4,['update'],['update']
Deployability,"veIntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, double absTol = 1.0000000000000001E-9, double relTol = 1.0000000000000001E-9, unsigned int maxcall = 100000, unsigned int size = 0). Construct with a reference to the integrand function and given optionally; tolerance (absolute and relative), maximum number of function evaluation (maxpts) and; size of the working array. virtual ~AdaptiveIntegratorMultiDim(). destructor (no operations). {}. double Integral(const double* xmin, const double* xmax). evaluate the integral with the previously given function between xmin[] and xmax[]. return DoIntegral(const double* xmin, const double* xmax, bool absVal = false). double Integral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); evaluate the integral passing a new function. void SetFunction(const ROOT::Math::IMultiGenFunction& f); set the integration function (must implement multi-dim function interface: IBaseFunctionMultiDim). double Result() const; return result of integration. { return fResult; }. double Error() const; return integration error. { return fError; }. double RelError() const; return relative error. { return fRelError; }. int Status() const; return status of integration. { return fStatus; }. int NEval() const; return number of function evaluations in calculating the integral. { return fNEval; }. void SetRelTolerance(double relTol); set relative tolerance. void SetAbsTolerance(double absTol); set absolute tolerance. void SetSize(unsigned int size); set workspace size. { fSize = size; }. void SetMinPts(unsigned int n); set min points. { fMinPts = n; }. void SetMaxPts(unsigned int n); set max points. { fMaxPts = n; }. void SetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); set the options. » Author: M. Slawinska 08/2007 » Copyright (c) 2007 , LCG ROOT MathLib Team *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:21; This page has been automatically generated. For comments or suggestions rega",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__AdaptiveIntegratorMultiDim.html:7096,integrat,integration,7096,root/html602/ROOT__Math__AdaptiveIntegratorMultiDim.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__AdaptiveIntegratorMultiDim.html,1,['integrat'],['integration']
Deployability,"veIntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, double absTol = 1.0000000000000001E-9, double relTol = 1.0000000000000001E-9, unsigned int maxcall = 100000, unsigned int size = 0). Construct with a reference to the integrand function and given optionally; tolerance (absolute and relative), maximum number of function evaluation (maxpts) and; size of the working array. virtual ~AdaptiveIntegratorMultiDim(). destructor (no operations). {}. double Integral(const double* xmin, const double* xmax). evaluate the integral with the previously given function between xmin[] and xmax[]. return DoIntegral(const double* xmin, const double* xmax, bool absVal = false). double Integral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); evaluate the integral passing a new function. void SetFunction(const ROOT::Math::IMultiGenFunction& f); set the integration function (must implement multi-dim function interface: IBaseFunctionMultiDim). double Result() const; return result of integration. { return fResult; }. double Error() const; return integration error. { return fError; }. double RelError() const; return relative error. { return fRelError; }. int Status() const; return status of integration. { return fStatus; }. int NEval() const; return number of function evaluations in calculating the integral. { return fNEval; }. void SetRelTolerance(double relTol); set relative tolerance. void SetAbsTolerance(double absTol); set absolute tolerance. void SetSize(unsigned int size); set workspace size. { fSize = size; }. void SetMinPts(unsigned int n); set min points. { fMinPts = n; }. void SetMaxPts(unsigned int n); set max points. { fMaxPts = n; }. void SetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); set the options. » Author: M. Slawinska 08/2007 » Copyright (c) 2007 , LCG ROOT MathLib Team *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions rega",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html:7096,integrat,integration,7096,root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html,https://root.cern,https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html,1,['integrat'],['integration']
Deployability,"vePointSelectorConsumer::ETreeVarType_e cs); voidTEveElement::SetSourceObject(TObject* o); virtual voidTEvePointSet::SetTitle(const char* t); virtual voidTEveElement::SetTransMatrix(Double_t* carr); virtual voidTEveElement::SetTransMatrix(const TGeoMatrix& mat); virtual voidTObject::SetUniqueID(UInt_t uid); voidTEveElement::SetUserData(void* ud); voidTEveElement::SetVizModel(TEveElement* model); voidTEveElement::SetVizTag(const TString& tag); virtual voidShowMembers(TMemberInspector&); virtual Bool_tTEveElement::SingleRnrState() const; virtual Int_tTPolyMarker3D::Size() const; virtual voidTAtt3D::Sizeof3D() const; voidTEveElement::SpawnEditor()MENU ; voidTEveElement::StampColorSelection(); voidTEveElement::StampObjProps(); voidTEveElement::StampTransBBox(); voidTEveElement::StampVisibility(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; virtual voidTEvePointSet::TakeAction(TEvePointSelector*); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; Bool_tTEveElement::TestCSCBits(UChar_t f) const; virtual voidTEveElement::UnHighlighted(); virtual voidTEveProjected::UnRefProjectable(TEveProjectable* assumed_parent, bool notifyParent = true); virtual voidTEveElement::UnSelected(); virtual voidUpdateProjection(); virtual voidTObject::UseCurrentStyle(); voidTEveElement::VizDB_Apply(const char* tag)MENU ; voidTEveElement::VizDB_Insert(const char* tag, Bool_t replace = kTRUE, Bool_t update = kTRUE)MENU ; voidTEveElement::VizDB_Reapply()MENU ; voidTEveElement::VizDB_UpdateModel(Bool_t update = kTRUE)MENU ; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTEveLine::WriteVizParams(ostream& out, const TString& var).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TEveLineProjected.html:22645,update,update,22645,root/html534/TEveLineProjected.html,https://root.cern,https://root.cern/root/html534/TEveLineProjected.html,2,['update'],['update']
Deployability,"veProjectionManager (TEveProjection::EPType_e type=TEveProjection::kPT_Unknown);  Constructor. ;  ;  ~TEveProjectionManager () override;  Destructor. ;  ; void AddDependent (TEveElement *el);  Add el as dependent element. ;  ; void ComputeBBox () override;  Virtual from TAttBBox; fill bounding-box information. ;  ; TEveVector & GetCenter ();  ; Float_t GetCurrentDepth () const;  ; Bool_t GetImportEmpty () const;  ; TEveProjection * GetProjection ();  ; Bool_t HandleElementPaste (TEveElement *el) override;  React to element being pasted or dnd-ed. ;  ; virtual TEveElement * ImportElements (TEveElement *el, TEveElement *ext_list=nullptr);  Recursively import elements and apply projection to the newly imported objects. ;  ; virtual TEveElement * ImportElementsRecurse (TEveElement *el, TEveElement *parent);  If el is TEveProjectable add projected instance else add plain TEveElementList to parent. ;  ; TClass * IsA () const override;  ; virtual void ProjectChildren ();  Project all children recursively, update bounding-box and notify TEveManger about the scenes that have been changed. ;  ; virtual void ProjectChildrenRecurse (TEveElement *el);  Project el (via TEveProjected::UpdateProjection()) and recurse through el's children. ;  ; void RemoveDependent (TEveElement *el);  Remove el as dependent element. ;  ; void SetCenter (Float_t x, Float_t y, Float_t z);  Set projection center and rebuild projected scene. ;  ; void SetCurrentDepth (Float_t d);  ; void SetImportEmpty (Bool_t ie);  ; void SetProjection (TEveProjection::EPType_e type);  Set projection type and distortion. ;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual Int_t SubImportChildren (TEveElement *el, TEveElement *proj_parent);  Recursively import children elements of el and apply projection to the newly imported objects. ;  ; virtual TEveElement * SubImportElements (TEveElement *el, TEveElement *proj_parent);  Recursively import elements and ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveProjectionManager.html:1743,update,update,1743,doc/master/classTEveProjectionManager.html,https://root.cern,https://root.cern/doc/master/classTEveProjectionManager.html,1,['update'],['update']
Deployability,"vector< ShapeDescr > fShapes! shapes with created descriptionsDefinition RGeomData.hxx:253; ROOT::RGeomDescription::GetSearchstd::string GetSearch() constDefinition RGeomData.hxx:383; ROOT::RGeomDescription::fJsonCompint fJsonComp! default JSON compressionDefinition RGeomData.hxx:261; ROOT::RGeomDescription::ChangeNodeVisibilitybool ChangeNodeVisibility(const std::vector< std::string > &path, bool on)Change visibility for specified element Returns true if changes was performed.Definition RGeomData.cxx:1850; ROOT::RGeomDescription::SetMutexvoid SetMutex(TVirtualMutex *mutex)Set mutex, it must be recursive one.Definition RGeomData.hxx:312; ROOT::RGeomDescription::RGeomDescriptionRGeomDescription()=default; ROOT::RGeomDescription::fSearchstd::string fSearch! search string in hierarchyDefinition RGeomData.hxx:255; ROOT::RGeomDescription::fSearchJsonstd::string fSearchJson! drawing json for searchDefinition RGeomData.hxx:256; ROOT::RGeomDescription::SavePrimitivevoid SavePrimitive(std::ostream &fs, const std::string &name)Save geometry configuration as C++ macro.Definition RGeomData.cxx:2143; ROOT::RGeomDescription::fHighlightedStackstd::vector< int > fHighlightedStack! highlighted element by stackDefinition RGeomData.hxx:249; ROOT::RGeomDescription::ClearAllPhysVisibilitybool ClearAllPhysVisibility()Reset all custom visibility settings.Definition RGeomData.cxx:2089; ROOT::RGeomDescription::MakeDrawingJsonstd::string MakeDrawingJson(RGeomDrawing &drawing, bool has_shapes=false)Produce JSON for the drawing If TGeoShape appears in the drawing, one has to keep typeinfo But in thi...Definition RGeomData.cxx:1826; ROOT::RGeomDescription::fActualLevelint fActualLevel! level can be reduced when selecting nodesDefinition RGeomData.hxx:259; ROOT::RGeomDescription::GetVolumeTGeoVolume * GetVolume(int nodeid)Get volume for specified nodeid If specific volume was configured, it will be returned for nodeid==0.Definition RGeomData.cxx:583; ROOT::RGeomDescription::SetActiveItembool Set",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/RGeomData_8hxx_source.html:27755,configurat,configuration,27755,doc/v632/RGeomData_8hxx_source.html,https://root.cern,https://root.cern/doc/v632/RGeomData_8hxx_source.html,1,['configurat'],['configuration']
Deployability,"vector< ShapeDescr > fShapes! shapes with created descriptionsDefinition RGeomData.hxx:253; ROOT::RGeomDescription::GetSearchstd::string GetSearch() constDefinition RGeomData.hxx:385; ROOT::RGeomDescription::fJsonCompint fJsonComp! default JSON compressionDefinition RGeomData.hxx:261; ROOT::RGeomDescription::ChangeNodeVisibilitybool ChangeNodeVisibility(const std::vector< std::string > &path, bool on)Change visibility for specified element Returns true if changes was performed.Definition RGeomData.cxx:1850; ROOT::RGeomDescription::SetMutexvoid SetMutex(TVirtualMutex *mutex)Set mutex, it must be recursive one.Definition RGeomData.hxx:312; ROOT::RGeomDescription::RGeomDescriptionRGeomDescription()=default; ROOT::RGeomDescription::fSearchstd::string fSearch! search string in hierarchyDefinition RGeomData.hxx:255; ROOT::RGeomDescription::fSearchJsonstd::string fSearchJson! drawing json for searchDefinition RGeomData.hxx:256; ROOT::RGeomDescription::SavePrimitivevoid SavePrimitive(std::ostream &fs, const std::string &name)Save geometry configuration as C++ macro.Definition RGeomData.cxx:2143; ROOT::RGeomDescription::fHighlightedStackstd::vector< int > fHighlightedStack! highlighted element by stackDefinition RGeomData.hxx:249; ROOT::RGeomDescription::ClearAllPhysVisibilitybool ClearAllPhysVisibility()Reset all custom visibility settings.Definition RGeomData.cxx:2089; ROOT::RGeomDescription::MakeDrawingJsonstd::string MakeDrawingJson(RGeomDrawing &drawing, bool has_shapes=false)Produce JSON for the drawing If TGeoShape appears in the drawing, one has to keep typeinfo But in thi...Definition RGeomData.cxx:1826; ROOT::RGeomDescription::fActualLevelint fActualLevel! level can be reduced when selecting nodesDefinition RGeomData.hxx:259; ROOT::RGeomDescription::GetVolumeTGeoVolume * GetVolume(int nodeid)Get volume for specified nodeid If specific volume was configured, it will be returned for nodeid==0.Definition RGeomData.cxx:583; ROOT::RGeomDescription::SetActiveItembool Set",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RGeomData_8hxx_source.html:28006,configurat,configuration,28006,doc/master/RGeomData_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RGeomData_8hxx_source.html,1,['configurat'],['configuration']
Deployability,"vector<THit>, vector<THit*>, TClonesArray(TObjHit) not split TClonesArray(TObjHit) split.; The next graphs show the two columns on the right which represent the split and non-split TClonesArray, are significantly lower than the vectors. The most significant difference is in reading a file without compression.; The file size with compression, write times with and without compression and the read times with and without compression all favor the TClonesArray.; 12.23 Impact of Compression on I/O; This benchmark illustrates the pros and cons of the compression option. We recommend using compression when the time spent in I/O is small compared to the total processing time. In this case, if the I/O operation is increased by a factor of 5 it is still a small percentage of the total time and it may very well save a factor of 10 on disk space. On the other hand if the time spend on I/O is large, compression may slow down the program’s performance. The standard test program $ROOTSYS/test/Event was used in various configurations with 400 events. The data file contains a TTree. The program was invoked with:; Event 400 comp split. comp = 0 means: no compression at all.; comp = 1 means: compress everything if split = 0.; comp = 1 means: compress only the tree branches with integers if split = 1.; comp = 2 means: compress everything if split=1.; split = 0 : the full event is serialized into one single buffer.; split = 1 : the event is split into branches. One branch for each data member of the Event class. The list of tracks (a TClonesArray) has the data members of the Track class also split into individual buffers. These tests were run on Pentium III CPU with 650 MHz. Event Parameters; File Size; Total Time to Write (MB/sec); Effective Time to Write (MB/sec); Total Time to Read All (MB/sec); Total Time to Read Sample (MB/sec). Comp = 0; Split = 1; 19.75 MB; 6.84 s.(2.8 MB/s); 3.56 s.(5.4 MB/s); 0.79s.(24.2 MB/s); 0.79 s.(24.2 MB/s). Comp = 1; Split = 1; 17.73 MB; 6.44 s.(3.0 MB/s)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:648250,configurat,configurations,648250,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['configurat'],['configurations']
Deployability,"ved between successive switches, and string based cross calls can nest as long as shared resources are properly handled.; // Example: accessing the Python interpreter from ROOT; // either load PyROOT explicitly or rely on auto-loading; root[] gSystem->Load( ""libPyROOT"" );; root[] TPython::Exec(""print1+1"");; 2. // create a TBrowser on the Python side, and transfer it back and forth; root[] TBrowser* b = (void*)TPython::Eval(""ROOT.TBrowser()"");; (class TObject*)0x8d1daa0; root[] TPython::Bind(b,""b"");. // builtin variables can cross-over (after the call i==2); root[] int i = TPython::Eval( ""1+1"" );; root[] i; (int)2; 19.1.4 Installation; There are several ways of obtaining PyROOT, and which is best depends on your specific situation. If you work at CERN, you can use the installation available on afs. Otherwise, you will want to build from source, as PyROOT is not build by default in the binaries distributed from the ROOT project site. If you download the ROOT binaries, take care to download and install the Python distribution from http://www.python.org/ against which they were built.; 19.1.4.1 Environment Settings; ROOT installations with the build of PyROOT enabled are available from the CERN afs cell /afs/cern.ch/sw/root/<version>/<platform>. To use them, simply modify your shell environment accordingly. For Unix:; export PATH=$ROOTSYS/bin:$PYTHONDIR/bin:$PATH; export LD_LIBRARY_PATH=$ROOTSYS/lib:$PYTHONDIR/lib:$LD_LIBRARY_PATH; export PYTHONPATH=$ROOTSYS/lib:$PYTHONPATH; For Windows:; set PATH=%ROOTSYS%/bin;%PYTHONDIR%/bin;%PATH%; set PYTHONPATH=%ROOTSYS%/bin;%PYTHONPATH%; where $ROOTSYS should be set to /afs/cern.ch/sw/root/<version>/<platform>, and PYTHONDIR to /afs/cern.ch/sw/lcg/external/Python/2.3.4/<platform> with <version> and <platform> as appropriate. Note that the latest version of Python is 2.4.1.; 19.1.4.2 Building from Source; The standard installation instructions for building ROOT from source apply, with the addition that the build of PyROOT needs to ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:1046810,install,install,1046810,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['install'],['install']
Deployability,"vely. ; [in]maxptsMaximum number of function evaluations to be allowed. maxpts >= 2^n +2*n*(n+1) +1 if maxpts<minpts, maxpts is set to 10*minpts ; [in]epsrelSpecified relative accuracy. ; [in]epsabsSpecified absolute accuracy. The integration algorithm will attempt to reach either the relative or the absolute accuracy. In case the maximum function called is reached the algorithm will stop earlier without having reached the desired accuracy; [out]relerrContains, on exit, an estimation of the relative accuracy of the result. ; [out]nfnevlnumber of function evaluations performed. ; [out]ifail0 Normal exit. At least minpts and at most maxpts calls to the function were performed.; 1 maxpts is too small for the specified accuracy eps. The result and relerr contain the values obtainable for the specified value of maxpts.; 3 n<2 or n>15 . Method:; The default method used is the Genz-Mallik adaptive multidimensional algorithm using the class ROOT::Math::AdaptiveIntegratorMultiDim (see the reference documentation of the class); Other methods can be used by setting ROOT::Math::IntegratorMultiDimOptions::SetDefaultIntegrator() to different integrators. Other possible integrators are MC integrators based on the ROOT::Math::GSLMCIntegrator class Possible methods are : Vegas, Miser or Plain IN case of MC integration the accuracy is determined by the number of function calls, one should be careful not to use a too large value of maxpts ; Definition at line 2851 of file TF1.cxx. ◆ IntegralMultiple() [3/3]. virtual Double_t TF1::IntegralMultiple ; (; Int_t ; n, . const Double_t * ; a, . const Double_t * ; b, . Int_t ; , . Int_t ; maxpts, . Double_t ; epsrel, . Double_t & ; relerr, . Int_t & ; nfnevl, . Int_t & ; ifail . ). inlinevirtual . Definition at line 616 of file TF1.h. ◆ IntegralOneDim(). Double_t TF1::IntegralOneDim ; (; Double_t ; a, . Double_t ; b, . Double_t ; epsrel, . Double_t ; epsabs, . Double_t & ; error . ). virtual . Return Integral of function between a and b using",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTF1.html:100626,integrat,integrators,100626,doc/master/classTF1.html,https://root.cern,https://root.cern/doc/master/classTF1.html,1,['integrat'],['integrators']
Deployability,"ven if IMT is on, some branches might need to be processed first and in a sequential fashion: in the parallelization of GetEntry, those are the branches that store the size of another branch for every entry (e.g. the size of an array branch). If such branches were processed in parallel with the rest, there could be two threads invoking TBranch::GetEntry on one of them at the same time, since a branch that depends on a size (or count) branch will also invoke GetEntry on the latter. This method can be invoked several times during the event loop if the TTree is being written, for example when adding new branches. In these cases, the checkLeafCount parameter is false. Parameters. [in]checkLeafCountTrue if we need to check whether some branches are count leaves. . Definition at line 5781 of file TTree.cxx. ◆ InPlaceClone(). bool TTree::InPlaceClone ; (; TDirectory * ; newdirectory, . const char * ; options = """" . ). virtual . Copy the content to a new new file, update this TTree with the new location information and attach this TTree to the new directory. ; options: Indicates a basket sorting method, see TTreeCloner::TTreeCloner for details; If new and old directory are in the same file, the data is untouched, this ""just"" does a call to SetDirectory. Equivalent to an ""in place"" cloning of the TTree. ; Reimplemented in TChain.; Definition at line 7012 of file TTree.cxx. ◆ IsA(). TClass * TTree::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TNamed.; Reimplemented in TTreeSQL.; Definition at line 659 of file TTree.h. ◆ IsFolder(). bool TTree::IsFolder ; (; ); const. inlineoverridevirtual . Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ; Reimplemented from TObject.; Definition at line 547 of file TTree.h. ◆ KeepCircular(). void TTree::KeepCircular ; (; ). protectedvirtual . Keep a maximum of fMaxEntries in memory. ; Definition at line 6415 of file TTree.cxx. ◆ Loa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTTree.html:169443,update,update,169443,doc/v632/classTTree.html,https://root.cern,https://root.cern/doc/v632/classTTree.html,1,['update'],['update']
Deployability,"ven if IMT is on, some branches might need to be processed first and in a sequential fashion: in the parallelization of GetEntry, those are the branches that store the size of another branch for every entry (e.g. the size of an array branch). If such branches were processed in parallel with the rest, there could be two threads invoking TBranch::GetEntry on one of them at the same time, since a branch that depends on a size (or count) branch will also invoke GetEntry on the latter. This method can be invoked several times during the event loop if the TTree is being written, for example when adding new branches. In these cases, the checkLeafCount parameter is false. Parameters. [in]checkLeafCountTrue if we need to check whether some branches are count leaves. . Definition at line 5781 of file TTree.cxx. ◆ InPlaceClone(). bool TTree::InPlaceClone ; (; TDirectory * ; newdirectory, . const char * ; options = """" . ). virtual . Copy the content to a new new file, update this TTree with the new location information and attach this TTree to the new directory. ; options: Indicates a basket sorting method, see TTreeCloner::TTreeCloner for details; If new and old directory are in the same file, the data is untouched, this ""just"" does a call to SetDirectory. Equivalent to an ""in place"" cloning of the TTree. ; Reimplemented in TChain.; Definition at line 7012 of file TTree.cxx. ◆ IsA(). TClass * TTree::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TNamed.; Reimplemented in TTreeSQL.; Definition at line 705 of file TTree.h. ◆ IsFolder(). bool TTree::IsFolder ; (; ); const. inlineoverridevirtual . Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ; Reimplemented from TObject.; Definition at line 587 of file TTree.h. ◆ KeepCircular(). void TTree::KeepCircular ; (; ). protectedvirtual . Keep a maximum of fMaxEntries in memory. ; Definition at line 6415 of file TTree.cxx. ◆ Loa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTree.html:171631,update,update,171631,doc/master/classTTree.html,https://root.cern,https://root.cern/doc/master/classTTree.html,1,['update'],['update']
Deployability,"vent*); virtual voidEmitCanvasPainted(); virtual voidQWidget::enabledChange(bool); virtual voidenterEvent(QEvent*); virtual boolQWidget::event(QEvent*); virtual voidexitSizeEvent(); virtual voidfocusInEvent(QFocusEvent*); boolQWidget::focusNextChild(); virtual boolQWidget::focusNextPrevChild(bool next); virtual voidfocusOutEvent(QFocusEvent*); boolQWidget::focusPreviousChild(); virtual voidQWidget::fontChange(const QFont&); QWidget*GetRootID() const; virtual voidQWidget::hideEvent(QHideEvent*); voidInit(); virtual voidQWidget::inputMethodEvent(QInputMethodEvent*); virtual voidkeyPressEvent(QKeyEvent*); virtual voidkeyReleaseEvent(QKeyEvent*); virtual voidQWidget::languageChange(); virtual voidleaveEvent(QEvent*); virtual intQWidget::metric(QPaintDevice::PaintDeviceMetric) const; virtual voidmouseDoubleClickEvent(QMouseEvent*); virtual voidmouseMoveEvent(QMouseEvent*); virtual voidmousePressEvent(QMouseEvent*); virtual voidmouseReleaseEvent(QMouseEvent*); virtual voidQWidget::moveEvent(QMoveEvent*); virtual voidpaintEvent(QPaintEvent*); boolpaintFlag(bool mode = true); boolPaintingActive() const; virtual voidQWidget::paletteChange(const QPalette&); intQObject::receivers(const char* signal) const; voidRefreshCB(); voidResetCanvas(); voidQWidget::resetInputContext(); virtual voidresizeEvent(QResizeEvent*); voidRootEventProcessed(TObject* selected, unsigned int event, TCanvas* c); voidSaved(bool ok); QObject*QObject::sender() const; intQObject::senderSignalIndex() const; voidSetIgnoreLeaveEnter(int ignoreLE = 1); voidSetRootID(QWidget* wrapper); virtual voidSetSizeHint(const QSize& size); virtual voidshowEvent(QShowEvent*); virtual voidstretchWidget(QResizeEvent* e); virtual voidQWidget::styleChange(QStyle&); virtual voidQWidget::tabletEvent(QTabletEvent*); virtual voidQObject::timerEvent(QTimerEvent*); voidQWidget::updateMicroFocus(); virtual voidQWidget::wheelEvent(QWheelEvent*); virtual voidQWidget::windowActivationChange(bool); virtual boolQWidget::x11Event(XEvent*).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TQtWidget.html:21255,update,updateMicroFocus,21255,root/html602/TQtWidget.html,https://root.cern,https://root.cern/root/html602/TQtWidget.html,2,['update'],['updateMicroFocus']
Deployability,"vention (as compared to the RooDataHist convention, which is used internally and one must map between the two).; All indices include '0':; \( \gamma_{i,j} \) = paramSet[ size(i)*j + i ]; ie assuming the dimensions are 5*5:; \( \gamma_{2,1} \) = paramSet[ 5*1 + 2 ] = paramSet[7] ; Definition at line 24 of file ParamHistFunc.h. Classes; class  CacheElem;  ; struct  NumBins;  . Public Member Functions;  ParamHistFunc ();  ;  ParamHistFunc (const char *name, const char *title, const RooArgList &vars, const RooArgList &paramSet);  Create a function which returns binewise-values This class contains N RooAbsReals's, one for each bin from the given RooRealVar. ;  ;  ParamHistFunc (const char *name, const char *title, const RooArgList &vars, const RooArgList &paramSet, const TH1 *hist);  Create a function which returns bin-wise values. ;  ;  ParamHistFunc (const ParamHistFunc &other, const char *name=nullptr);  ; double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Implement analytical integrations by doing appropriate weighting from component integrals functions to integrators of components. ;  ; std::list< double > * binBoundaries (RooAbsRealLValue &, double, double) const override;  Return sampling hint for making curves of (projections) of this function as the recursive division strategy of RooCurve cannot deal efficiently with the vertical lines that occur in a non-interpolated histogram. ;  ; double binVolume () const;  ; TObject * clone (const char *newname) const override;  ; bool forceAnalyticalInt (const RooAbsArg &) const override;  ; const RooArgSet * get (const RooArgSet &coord) const;  ; const RooArgSet * get (Int_t masterIdx) const;  ; Int_t getAnalyticalIntegralWN (RooArgSet &allVars, RooArgSet &analVars, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Advertise that all integrals can be handled internally. ;  ; RooAbsReal & getParameter () const;  ; RooAbsReal & getParame",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classParamHistFunc.html:1930,integrat,integrations,1930,doc/master/classParamHistFunc.html,https://root.cern,https://root.cern/doc/master/classParamHistFunc.html,2,['integrat'],"['integrations', 'integrators']"
Deployability,"ver range (-6,6) did not converge after 20 steps; [1] h = 1 , s = 0; [2] h = 0.25 , s = 6; [3] h = 0.0625 , s = 3; [4] h = 0.015625 , s = 4.5; [5] h = 0.00390625 , s = 3.75; [6] h = 0.000976562 , s = 4.125; [7] h = 0.000244141 , s = 3.9375; [8] h = 6.10352e-05 , s = 4.03125; [9] h = 1.52588e-05 , s = 3.98438; [10] h = 3.8147e-06 , s = 4.00781; [11] h = 9.53674e-07 , s = 3.99609; [12] h = 2.38419e-07 , s = 4.00195; [13] h = 5.96046e-08 , s = 3.99902; [14] h = 1.49012e-08 , s = 4.00049; [15] h = 3.72529e-09 , s = 3.99976; [16] h = 9.31323e-10 , s = 4.00012; [17] h = 2.32831e-10 , s = 3.99994; [18] h = 5.82077e-11 , s = 4.00003; [19] h = 1.45519e-11 , s = 3.99998; [20] h = 3.63798e-12 , s = 4.00001; [#1] INFO:Caching -- RooAbsCachedPdf::getCache(model) creating new cache 0x56161c4fa860 with pdf gx_CONV_model_mean_CACHE_Obs[mean] for nset () with code 2; [#1] INFO:NumericIntegration -- RooRealIntegral::init(gx_Int[mean,x]) using numeric integrator RooIntegrator1D to calculate Int(mean); [#1] INFO:NumericIntegration -- RooRealIntegral::init(model_mean_Int[mean]) using numeric integrator RooIntegrator1D to calculate Int(mean); [#0] WARNING:Integration -- RooRombergIntegrator::integral: integral of model_mean over range (-6,6) did not converge after 20 steps; [1] h = 1 , s = 0; [2] h = 0.25 , s = 6; [3] h = 0.0625 , s = 3; [4] h = 0.015625 , s = 4.5; [5] h = 0.00390625 , s = 3.75; [6] h = 0.000976562 , s = 4.125; [7] h = 0.000244141 , s = 3.9375; [8] h = 6.10352e-05 , s = 4.03125; [9] h = 1.52588e-05 , s = 3.98438; [10] h = 3.8147e-06 , s = 4.00781; [11] h = 9.53674e-07 , s = 3.99609; [12] h = 2.38419e-07 , s = 4.00195; [13] h = 5.96046e-08 , s = 3.99902; [14] h = 1.49012e-08 , s = 4.00049; [15] h = 3.72529e-09 , s = 3.99976; [16] h = 9.31323e-10 , s = 4.00012; [17] h = 2.32831e-10 , s = 3.99994; [18] h = 5.82077e-11 , s = 4.00003; [19] h = 1.45519e-11 , s = 3.99998; [20] h = 3.63798e-12 , s = 4.00001; ; prevFCN = 2171.275755 a=2.017, ; prevFCN = 2171.275755 a=1.983, ; prev",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf211__paramconv_8C.html:11668,integrat,integrator,11668,doc/master/rf211__paramconv_8C.html,https://root.cern,https://root.cern/doc/master/rf211__paramconv_8C.html,2,['integrat'],['integrator']
Deployability,"vergence of its training; : (at least 10k training cycles are required to achieve approximately; : competitive results).; : ; : ␛[1mOvertraining: ␛[0monly the TMlpANN performs an explicit separation of the; : full training sample into independent training and validation samples.; : We have found that in most high-energy physics applications the ; : available degrees of freedom (training events) are sufficient to ; : constrain the weights of the relatively simple architectures required; : to achieve good performance. Hence no overtraining should occur, and ; : the use of validation samples would only reduce the available training; : information. However, if the performance on the training sample is ; : found to be significantly better than the one found with the inde-; : pendent test sample, caution is needed. The results for these samples ; : are printed to standard output at the end of each training job.; : ; : ␛[1m--- Performance tuning via configuration options:␛[0m; : ; : The hidden layer architecture for all ANNs is defined by the option; : ""HiddenLayers=N+1,N,..."", where here the first hidden layer has N+1; : neurons and the second N neurons (and so on), and where N is the number ; : of input variables. Excessive numbers of hidden layers should be avoided,; : in favour of more neurons in the first hidden layer.; : ; : The number of cycles should be above 500. As said, if the number of; : adjustable weights is small compared to the training sample size,; : using a large number of training samples should not lead to overtraining.; : ; : <Suppress this message by specifying ""!H"" in the booking option>; : ␛[1m================================================================␛[0m; : ; TFHandler_MLPBNN : Variable Mean RMS [ Min Max ]; : -----------------------------------------------------------; : myvar1: 0.089214 0.20183 [ -1.0000 1.0000 ]; : myvar2: -0.090751 0.29609 [ -1.0000 1.0000 ]; : var3: 0.059878 0.21436 [ -1.0000 1.0000 ]; : var4: 0.11587 0.24261 [ -1.0000 1",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAClassification_8C.html:43708,configurat,configuration,43708,doc/master/TMVAClassification_8C.html,https://root.cern,https://root.cern/doc/master/TMVAClassification_8C.html,1,['configurat'],['configuration']
Deployability,"verride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooRealProxymean; RooRealProxysigmaL; RooRealProxysigmaR; RooRealProxyx.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooBifurGauss.html:39333,configurat,configuration,39333,root/html530/RooBifurGauss.html,https://root.cern,https://root.cern/root/html530/RooBifurGauss.html,3,"['configurat', 'integrat']","['configuration', 'integrator']"
Deployability,"verride;  Return unique name, used in SavePrimitive methods. ;  ; Int_t GetPortNumber () const;  ; const char * GetUserName () const;  ; Bool_t HandleExpose (Event_t *event) override;  Handle expose event in server frame. ;  ; TClass * IsA () const override;  ; Bool_t IsSync () const;  ; void OnBtnAddClicked ();  Add newly created session configuration in the list of sessions. ;  ; void OnBtnConnectClicked ();  Connect to selected server. ;  ; void OnBtnDeleteClicked ();  Delete selected session configuration (remove it from the list). ;  ; void OnBtnNewServerClicked ();  Reset server configuration fields. ;  ; void OnConfigFileClicked ();  Browse configuration files. ;  ; Bool_t ProcessMessage (Longptr_t msg, Longptr_t parm1, Longptr_t parm2) override;  Process messages for session server frame. ;  ; void SetAddEnabled (Bool_t on=kTRUE);  ; void SetAddress (const char *str);  ; void SetConfigText (const char *str);  ; void SetConnectEnabled (Bool_t on=kTRUE);  ; void SetLogLevel (Int_t log);  ; void SetName (const char *str) override;  ; void SetPortNumber (Int_t port);  ; void SetSync (Bool_t sync);  ; void SettingsChanged ();  Settings have changed, update GUI accordingly. ;  ; void SetUserName (const char *str);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Update (TSessionDescription *desc);  Update fields with values from session description desc. ;  ;  Public Member Functions inherited from TGCompositeFrame;  TGCompositeFrame (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=0, Pixel_t back=GetDefaultFrameBackground());  Create a composite frame. ;  ;  TGCompositeFrame (TGClient *c, Window_t id, const TGWindow *parent=nullptr);  Create a frame using an externally created window. ;  ;  ~TGCompositeFrame () override;  Delete a composite frame. ;  ; virtual void AddFrame (TGFrame *f, TGLayoutHints *l=nullptr);  Add frame to the composite frame ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSessionServerFrame.html:1882,update,update,1882,doc/master/classTSessionServerFrame.html,https://root.cern,https://root.cern/doc/master/classTSessionServerFrame.html,1,['update'],['update']
Deployability,"verrideprotectedvirtual . (De)Activate associated tree branch ; Implements RooAbsArg.; Definition at line 3116 of file RooAbsReal.cxx. ◆ setUnit(). void RooAbsReal::setUnit ; (; const char * ; unit). inline . Definition at line 147 of file RooAbsReal.h. ◆ sigma() [1/2]. RooAbsMoment * RooAbsReal::sigma ; (; RooRealVar & ; obs). inline . Definition at line 361 of file RooAbsReal.h. ◆ sigma() [2/2]. RooAbsMoment * RooAbsReal::sigma ; (; RooRealVar & ; obs, . const RooArgSet & ; nset . ). inline . Definition at line 362 of file RooAbsReal.h. ◆ specialIntegratorConfig() [1/2]. RooNumIntConfig * RooAbsReal::specialIntegratorConfig ; (; ); const. Returns the specialized integrator configuration for this RooAbsReal. ; If this object has no specialized configuration, a null pointer is returned. ; Definition at line 3282 of file RooAbsReal.cxx. ◆ specialIntegratorConfig() [2/2]. RooNumIntConfig * RooAbsReal::specialIntegratorConfig ; (; bool ; createOnTheFly). Returns the specialized integrator configuration for this RooAbsReal. ; If this object has no specialized configuration, a null pointer is returned, unless createOnTheFly is true in which case a clone of the default integrator configuration is created, installed as specialized configuration, and returned ; Definition at line 3294 of file RooAbsReal.cxx. ◆ Streamer(). void RooAbsReal::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject.; Reimplemented in RooStats::HistFactory::RooBarlowBeestonLL, RooArgusBG, RooBCPEffDecay, RooBCPGenDecay, RooBDecay, RooBernstein, RooBifurGauss, RooBMixDecay, RooBreitWigner, RooBukinPdf, RooCBShape, RooCFunction1Binding< VO, VI >, RooCFunction1PdfBinding< VO, VI >, RooCFunction2Binding< VO, VI1, VI2 >, RooCFunction2PdfBinding< VO, VI1, VI2 >, RooCFunction3Binding< VO, VI1, VI2, VI3 >, RooCFunction3PdfBinding< VO, VI1, VI2, VI3 >, RooCFunction4Binding< VO, VI1, VI2, VI3, VI4 >, RooCFunction4PdfBinding< VO, VI1, VI2, VI3, VI4 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsReal.html:147909,integrat,integrator,147909,doc/master/classRooAbsReal.html,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html,2,"['configurat', 'integrat']","['configuration', 'integrator']"
Deployability,"verrideprotectedvirtual . (De)Activate associated tree branch ; Implements RooAbsArg.; Definition at line 3198 of file RooAbsReal.cxx. ◆ setUnit(). void RooAbsReal::setUnit ; (; const char * ; unit). inline . Definition at line 147 of file RooAbsReal.h. ◆ sigma() [1/2]. RooAbsMoment * RooAbsReal::sigma ; (; RooRealVar & ; obs). inline . Definition at line 368 of file RooAbsReal.h. ◆ sigma() [2/2]. RooAbsMoment * RooAbsReal::sigma ; (; RooRealVar & ; obs, . const RooArgSet & ; nset . ). inline . Definition at line 369 of file RooAbsReal.h. ◆ specialIntegratorConfig() [1/2]. RooNumIntConfig * RooAbsReal::specialIntegratorConfig ; (; ); const. Returns the specialized integrator configuration for this RooAbsReal. ; If this object has no specialized configuration, a null pointer is returned. ; Definition at line 3364 of file RooAbsReal.cxx. ◆ specialIntegratorConfig() [2/2]. RooNumIntConfig * RooAbsReal::specialIntegratorConfig ; (; bool ; createOnTheFly). Returns the specialized integrator configuration for this RooAbsReal. ; If this object has no specialized configuration, a null pointer is returned, unless createOnTheFly is true in which case a clone of the default integrator configuration is created, installed as specialized configuration, and returned ; Definition at line 3376 of file RooAbsReal.cxx. ◆ Streamer(). void RooAbsReal::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject.; Reimplemented in RooStats::HistFactory::RooBarlowBeestonLL, RooArgusBG, RooBCPEffDecay, RooBCPGenDecay, RooBDecay, RooBernstein, RooBifurGauss, RooBMixDecay, RooBreitWigner, RooBukinPdf, RooCBShape, RooCFunction1Binding< VO, VI >, RooCFunction1PdfBinding< VO, VI >, RooCFunction2Binding< VO, VI1, VI2 >, RooCFunction2PdfBinding< VO, VI1, VI2 >, RooCFunction3Binding< VO, VI1, VI2, VI3 >, RooCFunction3PdfBinding< VO, VI1, VI2, VI3 >, RooCFunction4Binding< VO, VI1, VI2, VI3, VI4 >, RooCFunction4PdfBinding< VO, VI1, VI2, VI3, VI4 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classRooAbsReal.html:149746,integrat,integrator,149746,doc/v632/classRooAbsReal.html,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html,2,"['configurat', 'integrat']","['configuration', 'integrator']"
Deployability,"verse of the _cdf_c functions, the upper tail integral of the probability density function \(D^{-1}(z) \) where. \[ D(x) = \int_{x}^{+\infty} p(x') dx' \]. These functions are defined in the header file Math/ProbFunc.h or in the global one including all statistical functions Math/DistFunc.h; NOTE: In the old releases (< 5.14) the _quantile functions were called _quant_inv and the _quantile_c functions were called _prob_inv. These names are currently kept for backward compatibility, but their usage is deprecated.; The functions with the extension _quantile calculate the inverse of the _cdf function, the lower tail integral of the probability density function \(D^{-1}(z)\) where. \[ D(x) = \int_{-\infty}^{x} p(x') dx' \]. while those with the _quantile_c extension calculate the inverse of the _cdf_c functions, the upper tail integral of the probability density function \(D^{-1}(z) \) where. \[ D(x) = \int_{x}^{+\infty} p(x') dx' \]. The implementation used is that of GSL.; NOTE: In the old releases (< 5.14) the _quantile functions were called _quant_inv and the _quantile_c functions were called _prob_inv. These names are currently kept for backward compatibility, but their usage is deprecated. . Functions; double ROOT::MathMore::chisquared_quantile (double z, double r);  Re-implementation in MathMore of the Inverse ( \(D^{-1}(z)\)) of the cumulative distribution function of the lower tail of the \(\chi^2\) distribution with \(r\) degrees of freedom (ROOT::Math::chisquared_cdf). ;  ; double ROOT::MathMore::gamma_quantile (double z, double alpha, double theta);  Re-implementation in MathMore of the Inverse ( \(D^{-1}(z)\)) of the cumulative distribution function of the lower tail of the gamma distribution (ROOT::Math::gamma_cdf). ;  ; double ROOT::Math::vavilov_accurate_quantile (double z, double kappa, double beta2);  The inverse of the Vavilov cumulative probability density function. ;  ; double ROOT::Math::vavilov_accurate_quantile_c (double z, double kappa, double be",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__QuantFunc.html:1636,release,releases,1636,doc/master/group__QuantFunc.html,https://root.cern,https://root.cern/doc/master/group__QuantFunc.html,1,['release'],['releases']
Deployability,"vertices if own=true, the class will own the operators template <class Base> ; Definition at line 1839 of file RooLagrangianMorphFunc.cxx. ◆ setupObservable(). RooRealVar * RooLagrangianMorphFunc::setupObservable ; (; const char * ; obsname, . TClass * ; mode, . TObject * ; inputExample . ). private . setup observable, recycle existing observable if defined ; Definition at line 1620 of file RooLagrangianMorphFunc.cxx. ◆ Streamer(). void RooLagrangianMorphFunc::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsReal. ◆ StreamerNVirtual(). void RooLagrangianMorphFunc::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 257 of file RooLagrangianMorphFunc.h. ◆ updateCoefficients(). bool RooLagrangianMorphFunc::updateCoefficients ; (; ). Retrieve the new physics objects and update the weights in the morphing function. ; Definition at line 2236 of file RooLagrangianMorphFunc.cxx. ◆ updateSampleWeights(). void RooLagrangianMorphFunc::updateSampleWeights ; (; ). inlineprivate . update sample weight (-?-) ; Definition at line 1683 of file RooLagrangianMorphFunc.cxx. ◆ useCoefficients() [1/2]. bool RooLagrangianMorphFunc::useCoefficients ; (; const char * ; filename). Definition at line 2298 of file RooLagrangianMorphFunc.cxx. ◆ useCoefficients() [2/2]. bool RooLagrangianMorphFunc::useCoefficients ; (; const TMatrixD & ; inverse). setup the morphing function with a predefined inverse matrix call this function before any other after creating the object ; Definition at line 2263 of file RooLagrangianMorphFunc.cxx. ◆ writeCoefficients(). bool RooLagrangianMorphFunc::writeCoefficients ; (; const char * ; filename). write the inverse matrix to a file ; Definition at line 2315 of file RooLagrangianMorphFunc.cxx. ◆ writeMatrixToFile(). void RooLagrangianMorphFunc::writeMatrixToFile ; (; const TMatrixD & ; matrix, . const char * ; fname . ). write a matrix to a file ; Definition at li",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooLagrangianMorphFunc.html:94213,update,updateSampleWeights,94213,doc/master/classRooLagrangianMorphFunc.html,https://root.cern,https://root.cern/doc/master/classRooLagrangianMorphFunc.html,1,['update'],['updateSampleWeights']
Deployability,"verwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from RooPrintable; enum  ContentsOption { ;   kName =1; , kClassName =2; , kValue =4; , kArgs =8; , ;   kExtras =16; , kAddress =32; , kTitle =64; , kCollectionHeader =128. };  ; enum  StyleOption { ;   kInline =1; , kSingleLine =2; , kStandard =3; , kVerbose =4; , ;   kTreeStructure =5. };  ;  Static Public Member Functions inherited from RooProjectedPdf; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from RooAbsPdf; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static RooNumGenConfig * defaultGeneratorConfig ();  Returns the default numeric MC generator configuration for all RooAbsReals. ;  ; static int verboseEval ();  Return global level of verbosity for p.d.f. evaluations. ;  ; static void verboseEval (Int_t stat);  Change global level of verbosity for p.d.f. evaluations. ;  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::Eval",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classxRooProjectedPdf.html:66446,configurat,configuration,66446,doc/master/classxRooProjectedPdf.html,https://root.cern,https://root.cern/doc/master/classxRooProjectedPdf.html,1,['configurat'],['configuration']
Deployability,"ves the correlation between the i-th parameter and that linear combination of all other parameters which is most strongly correlated with i. ;  ; virtual bool Hesse ();  perform a full calculation of the Hessian matrix for error calculation ;  ; bool IsValidError () const;  return true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit) ;  ; unsigned int MaxFunctionCalls () const;  max number of function calls ;  ; unsigned int MaxIterations () const;  max iterations ;  ; virtual const double * MinGradient () const;  return pointer to gradient values at the minimum ;  ; virtual int MinosStatus () const;  status code of Minos (to be re-implemented by the minimizers supporting Minos) ;  ; virtual unsigned int NIterations () const;  number of iterations to reach the minimum ;  ; Minimizer & operator= (Minimizer &&)=delete;  ; Minimizer & operator= (Minimizer const &)=delete;  ; virtual MinimizerOptions Options () const;  retrieve the minimizer options (implement derived class if needed) ;  ; double Precision () const;  precision of minimizer in the evaluation of the objective function ( a value <=0 corresponds to the let the minimizer choose its default one) ;  ; int PrintLevel () const;  minimizer configuration parameters ;  ; virtual void PrintResults ();  return reference to the objective function virtual const ROOT::Math::IGenFunction & Function() const = 0; ;  ; virtual bool ProvidesError () const;  minimizer provides error and error matrix ;  ; virtual bool Scan (unsigned int ivar, unsigned int &nstep, double *x, double *y, double xmin=0, double xmax=0);  scan function minimum for variable i. ;  ; virtual bool SetCovariance (std::span< const double > cov, unsigned int nrow);  set initial covariance matrix ;  ; virtual bool SetCovarianceDiag (std::span< const double > d2, unsigned int n);  set initial second derivatives ;  ; void SetDefaultOptions ();  reset the default options (defined in MinimizerOptions) ;  ; void SetErrorDef (dou",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html:9462,configurat,configuration,9462,doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html,1,['configurat'],['configuration']
Deployability,"view). void SetWindow(Double_t u0, Double_t v0, Double_t du, Double_t dv); Set viewing window. void SetView(Double_t longitude, Double_t latitude, Double_t psi, Int_t& irep); Set view parameters. void ResizePad(); Recompute window for perspective view. void ResetView(Double_t longitude, Double_t latitude, Double_t psi, Int_t& irep); Set view direction (in spherical coordinates). Input PHI - longitude; THETA - latitude (angle between +Z and view direction); PSI - rotation in screen plane. Output: IREP - reply (-1 if error in min-max). Errors: error in min-max scope. void WCtoNDC(const Float_t* pw, Float_t* pn); Transfer point from world to normalized coordinates. Input: PW(3) - point in world coordinate system; PN(3) - point in normalized coordinate system. void WCtoNDC(const Double_t* pw, Double_t* pn); Transfer point from world to normalized coordinates. Input: PW(3) - point in world coordinate system; PN(3) - point in normalized coordinate system. void AdjustPad(TVirtualPad* pad = 0); Force the current pad to be updated. void RotateView(Double_t phi, Double_t theta, TVirtualPad* pad = 0); API to rotate view and adjust the pad provided it the current one. void SideView(TVirtualPad* pad = 0); Set to side view. void FrontView(TVirtualPad* pad = 0); Set to front view. void TopView(TVirtualPad* pad = 0); Set to top view. void ToggleRulers(TVirtualPad* pad = 0); Turn on /off 3D axis. void ToggleZoom(TVirtualPad* pad = 0); Turn on /off the interactive option to; Zoom / Move / Change attributes of 3D axis correspond this view. void AdjustScales(TVirtualPad* pad = 0); Adjust all sides of view in respect of the biggest one. void Centered3DImages(TVirtualPad* pad = 0); Move view into the center of the scene. void UnzoomView(TVirtualPad* pad = 0, Double_t unZoomFactor = 1.25); unZOOM this view. void ZoomView(TVirtualPad* pad = 0, Double_t zoomFactor = 1.25); ZOOM this view. void MoveFocus(Double_t* center, Double_t dx, Double_t dy, Double_t dz, Int_t nsteps = 10, Double_t dlon",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TView3D.html:20872,update,updated,20872,root/html530/TView3D.html,https://root.cern,https://root.cern/root/html530/TView3D.html,5,['update'],['updated']
Deployability,"view). void SetWindow(Double_t u0, Double_t v0, Double_t du, Double_t dv); Set viewing window. void SetView(Double_t longitude, Double_t latitude, Double_t psi, Int_t& irep); set view parameters. void ResizePad(); Recompute window for perspective view. void ResetView(Double_t longitude, Double_t latitude, Double_t psi, Int_t& irep); Set view direction (in spherical coordinates). Input PHI - longitude; THETA - latitude (angle between +Z and view direction); PSI - rotation in screen plane. Output: IREP - reply (-1 if error in min-max). Errors: error in min-max scope. void WCtoNDC(const Float_t* pw, Float_t* pn); Transfer point from world to normalized coordinates. Input: PW(3) - point in world coordinate system; PN(3) - point in normalized coordinate system. void WCtoNDC(const Double_t* pw, Double_t* pn); Transfer point from world to normalized coordinates. Input: PW(3) - point in world coordinate system; PN(3) - point in normalized coordinate system. void AdjustPad(TVirtualPad* pad = 0); Force the current pad to be updated. void RotateView(Double_t phi, Double_t theta, TVirtualPad* pad = 0); API to rotate view and adjust the pad provided it the current one. void SideView(TVirtualPad* pad = 0); Set to side view. void FrontView(TVirtualPad* pad = 0); Set to front view. void TopView(TVirtualPad* pad = 0); Set to top view. void ToggleRulers(TVirtualPad* pad = 0); Turn on /off 3D axis. void ToggleZoom(TVirtualPad* pad = 0); Turn on /off the interactive option to; Zoom / Move / Change attributes of 3D axis correspond this view. void AdjustScales(TVirtualPad* pad = 0); Adjust all sides of view in respect of the biggest one. void Centered3DImages(TVirtualPad* pad = 0); Move view into the center of the scene. void UnzoomView(TVirtualPad* pad = 0, Double_t unZoomFactor = 1.25); unZOOM this view. void ZoomView(TVirtualPad* pad = 0, Double_t zoomFactor = 1.25); ZOOM this view. void MoveFocus(Double_t* center, Double_t dx, Double_t dy, Double_t dz, Int_t nsteps = 10, Double_t dlon",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TView3D.html:20801,update,updated,20801,root/html528/TView3D.html,https://root.cern,https://root.cern/root/html528/TView3D.html,1,['update'],['updated']
Deployability,"virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. TOrdCollection*fToggleslist of TToggle objects. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TToggleGroup(); Constructor. TToggleGroup(const TToggleGroup& ); Copy constructor. TToggleGroup & operator=(const TToggleGroup& ); Assignment operator. ~TToggleGroup(); Deletes togglegroup but does not disposes toggled objects!. Int_t Add(TToggle* t, Bool_t select = 1); Add a new toggle. Int_t InsertAt(TToggle* t, Int_t pos, Bool_t select = 1); Add a new toggle at a specific position. void Select(Int_t idx); Select a toggle. void Select(TToggle* t); Selector a toggle. void DeleteAll(); Disposes of all objects and clears array. Int_t GetTogglesCount(); {return fToggles->GetSize();}. TToggle * At(Int_t idx); {return (TToggle*)fToggles->At(idx);}. void Remove(TToggle* t); {fToggles->Remove(t);}. void Remove(Int_t pos); {fToggles->RemoveAt(pos);}. TToggle * First(); {return (TToggle*)fToggles->First();}. TToggle * Last(); {return (TToggle*)fToggles->Last();}. Int_t IndexOf(TToggle* t); {return fToggles->IndexOf(t);}. » Author: Piotr Golonka 31/07/97 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/meta:$Id: TToggleGroup.h 26606 2008-12-02 20:36:09Z pcanal $ » Last generated: 2011-11-03 20:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TToggleGroup.html:6395,toggle,toggle,6395,root/html532/TToggleGroup.html,https://root.cern,https://root.cern/root/html532/TToggleGroup.html,1,['toggle'],['toggle']
Deployability,"virtual TClass*IsA() const; Bool_tIsDrawOrSelectLock() const; Bool_tIsLocked() const; virtual const char*LockIdStr() const; static const char*LockName(TGLLockable::ELock lock); static Bool_tLockValid(TGLLockable::ELock lock); Bool_tReleaseLock(TGLLockable::ELock lock) const; virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); Bool_tTakeLock(TGLLockable::ELock lock) const. private:. TGLLockable(const TGLLockable&); TGLLockable&operator=(const TGLLockable&). Data Members; public:. enum ELock { kUnlocked; kDrawLock; kSelectLock; kModifyLock; };. protected:. TGLLockable::ELockfLockLock state. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGLLockable(); Constructor. Bool_t TakeLock(TGLLockable::ELock lock) const; Lock the object in mode 'lock'. Return TRUE if successful, FALSE; if the object is already locked. Bool_t ReleaseLock(TGLLockable::ELock lock) const; Release current lock, make sure it the same as the 'lock' argument.; Returns TRUE on success, FALSE on failure. const char* LockName(TGLLockable::ELock lock); Return name-string for given lock-type. Bool_t LockValid(TGLLockable::ELock lock); Test if lock is a valid type to take/release.; kUnlocked is never valid in these cases. TGLLockable(const TGLLockable& ). TGLLockable& operator=(const TGLLockable& ). virtual ~TGLLockable(); {}. const char* LockIdStr() const; { return ""<unknown>""; }. Bool_t IsLocked() const; { return (fLock != kUnlocked); }. ELock CurrentLock() const; { return fLock; }. Bool_t IsDrawOrSelectLock() const; { return fLock == kDrawLock || fLock == kSelectLock; }. » Author: Matevz Tadel, Feb 2007 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id$ » Last generated: 2015-03-13 19:25; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGLLockable.html:1755,release,release,1755,root/html534/TGLLockable.html,https://root.cern,https://root.cern/root/html534/TGLLockable.html,1,['release'],['release']
Deployability,"virtual voidTEveElement::SetTransMatrix(Double_t* carr); virtual voidTEveElement::SetTransMatrix(const TGeoMatrix& mat); virtual voidTObject::SetUniqueID(UInt_t uid); voidTEveElement::SetUserData(void* ud); voidTEveElement::SetVizModel(TEveElement* model); voidTEveElement::SetVizTag(const TString& tag); virtual voidShowMembers(TMemberInspector& insp) const; virtual Bool_tTEveElement::SingleRnrState() const; virtual Int_tTNamed::Sizeof() const; voidTEveElement::SpawnEditor()MENU ; voidTEveElement::StampColorSelection(); voidTEveElement::StampObjProps(); voidTEveElement::StampTransBBox(); voidTEveElement::StampVisibility(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); voidTEveWindow::SwapWindow(TEveWindow* w); static voidTEveWindow::SwapWindows(TEveWindow* w1, TEveWindow* w2); voidTEveWindow::SwapWindowWithCurrent()MENU ; virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; Bool_tTEveElement::TestCSCBits(UChar_t f) const; TEveWindowFrame(TGFrame* frame, const char* n = ""TEveWindowFrame"", const char* t = """"); voidTEveWindow::TitleBarClicked(); voidTEveWindow::UndockWindow()MENU ; voidTEveWindow::UndockWindowDestroySlot()MENU ; virtual voidTEveElement::UnHighlighted(); virtual voidTEveElement::UnSelected(); virtual voidTObject::UseCurrentStyle(); voidTEveElement::VizDB_Apply(const char* tag)MENU ; voidTEveElement::VizDB_Insert(const char* tag, Bool_t replace = kTRUE, Bool_t update = kTRUE)MENU ; voidTEveElement::VizDB_Reapply()MENU ; voidTEveElement::VizDB_UpdateModel(Bool_t update = kTRUE)MENU ; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTEveElement::WriteVizParams(ostream& out, const TString& var).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEveWindowFrame.html:17476,update,update,17476,root/html602/TEveWindowFrame.html,https://root.cern,https://root.cern/root/html602/TEveWindowFrame.html,4,['update'],['update']
Deployability,"virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };; enum RooPrintable::ContentsOption { kName; kClassName; kValue; kArgs; kExtras; kAddress; kTitle; kCollectionHeader; };; enum RooPrintable::StyleOption { kInline; kSingleLine; kStandard; kVerbose; kTreeStructure; };. protected:. RooLinkedList_configSetsList of configuration sets for individual integration methods; static RooNumIntConfig*_default; Double_t_epsAbsAbsolute precision; Double_t_epsRelRelative precision; RooCategory_method1DSelects integration method for 1D integrals; RooCategory_method1DOpenSelects integration method for open ended 1D integrals; RooCategory_method2DSelects integration method for 2D integrals; RooCategory_method2DOpenSelects integration method for open ended 2D integrals; RooCategory_methodNDSelects integration method for ND integrals; RooCategory_methodNDOpenSelects integration method for open ended ND integrals; static Int_tRooPrintable::_nameLength; Bool_t_printEvalCounterFlag to control printing of function evaluation counter. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void cleanup(); Function called by atexit() handler installed by RooSentinel to; cleanup global objects at end of job. RooNumIntConfig& defaultConfig(); Return reference to instance of default numeric integrator configuration object. RooNumIntConfig(); Constructor. ~RooNumIntConfig(); Destructor. RooNumIntConfig(const RooNumIntConfig& other); Copy constructor. RooNumIntConfig& operator=(const RooNumIntConfig& other); Assignment operator from other RooNumIntConfig. Bool_t addConfigSection(const RooAbsIntegrator* proto, const RooArg",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooNumIntConfig.html:7352,configurat,configuration,7352,root/html526/RooNumIntConfig.html,https://root.cern,https://root.cern/root/html526/RooNumIntConfig.html,40,"['configurat', 'integrat']","['configuration', 'integration']"
Deployability,"virtual void fixAddCoefRange (const char *rangeName=nullptr, bool force=true);  Fix the interpretation of the coefficient of any RooAddPdf component in the expression tree headed by this object to the given set of observables. ;  ; virtual bool forceAnalyticalInt (const RooAbsArg &) const;  ; virtual void forceNumInt (bool flag=true);  ; RooFunctor * functor (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a RooFunctor object bound to this RooAbsReal with given definition of observables and parameters. ;  ; virtual Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const;  Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ;  ; bool getForceNumInt () const;  ; RooNumIntConfig * getIntegratorConfig ();  Return the numeric integration configuration used for this object. ;  ; const RooNumIntConfig * getIntegratorConfig () const;  Return the numeric integration configuration used for this object. ;  ; virtual Int_t getMaxVal (const RooArgSet &vars) const;  Advertise capability to determine maximum value of function for given set of observables. ;  ; const char * getPlotLabel () const;  Get the label associated with the variable. ;  ; double getPropagatedError (const RooFitResult &fr, const RooArgSet &nset={}) const;  Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual double getValV (const RooArgSet *normalisationSet=nullptr) const;  Return value of object. ;  ; virtual void gradient (double *) const;  ; virtual bool h",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classPiecewiseInterpolation.html:14493,integrat,integration,14493,doc/master/classPiecewiseInterpolation.html,https://root.cern,https://root.cern/doc/master/classPiecewiseInterpolation.html,2,"['configurat', 'integrat']","['configuration', 'integration']"
Deployability,"void RooSimGenContext::printMultiline ; (; std::ostream & ; os, . Int_t ; content, . bool ; verbose = false, . TString ; indent = """" . ); const. overridevirtual . Detailed printing interface. ; Reimplemented from RooAbsGenContext.; Definition at line 291 of file RooSimGenContext.cxx. ◆ setProtoDataOrder(). void RooSimGenContext::setProtoDataOrder ; (; Int_t * ; lut). overridevirtual . Set the traversal order of the prototype data to that in the given lookup table. ; This information is passed to all component generator contexts ; Reimplemented from RooAbsGenContext.; Definition at line 278 of file RooSimGenContext.cxx. ◆ Streamer(). void RooSimGenContext::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsGenContext. ◆ StreamerNVirtual(). void RooSimGenContext::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 63 of file RooSimGenContext.h. ◆ updateFractions(). void RooSimGenContext::updateFractions ; (; ). protected . No action needed if we have a proto index. ; Definition at line 249 of file RooSimGenContext.cxx. Member Data Documentation. ◆ _allVarsPdf. RooArgSet RooSimGenContext::_allVarsPdf {}. protected . All pdf variables. ; Definition at line 61 of file RooSimGenContext.h. ◆ _fracThresh. std::vector<double> RooSimGenContext::_fracThresh. protected . [_numPdf] Fraction threshold array ; Definition at line 58 of file RooSimGenContext.h. ◆ _gcIndex. std::vector<int> RooSimGenContext::_gcIndex. protected . Index value corresponding to component. ; Definition at line 54 of file RooSimGenContext.h. ◆ _gcList. std::vector<std::unique_ptr<RooAbsGenContext> > RooSimGenContext::_gcList. protected . List of component generator contexts. ; Definition at line 53 of file RooSimGenContext.h. ◆ _haveIdxProto. bool RooSimGenContext::_haveIdxProto {false}. protected . Flag set if generation of index is requested. ; Definition at line 55 of file RooSimGenContext.h. ◆ _idxCat.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooSimGenContext.html:21946,update,updateFractions,21946,doc/master/classRooSimGenContext.html,https://root.cern,https://root.cern/doc/master/classRooSimGenContext.html,1,['update'],['updateFractions']
Deployability,"void TGeoVolume::SaveAs(const char *filename, Option_t *option) const; 1448{; 1449 if (!filename); 1450 return;; 1451 std::ofstream out;; 1452 out.open(filename, std::ios::out);; 1453 if (out.bad()) {; 1454 Error(""SavePrimitive"", ""Bad file name: %s"", filename);; 1455 return;; 1456 }; 1457 if (fGeoManager->GetTopVolume() != this); 1458 fGeoManager->SetTopVolume((TGeoVolume *)this);; 1459 ; 1460 TString fname(filename);; 1461 Int_t ind = fname.Index(""."");; 1462 if (ind > 0); 1463 fname.Remove(ind);; 1464 out << ""void "" << fname << ""() {"" << std::endl;; 1465 out << "" gSystem->Load(\""libGeom\"");"" << std::endl;; 1466 const UInt_t prec = TGeoManager::GetExportPrecision();; 1467 out << std::setprecision(prec);; 1468 ((TGeoVolume *)this)->SavePrimitive(out, option);; 1469 out << ""}"" << std::endl;; 1470}; 1471 ; 1472////////////////////////////////////////////////////////////////////////////////; 1473/// Connect user-defined extension to the volume. The volume ""grabs"" a copy, so; 1474/// the original object can be released by the producer. Release the previously; 1475/// connected extension if any.; 1476///; 1477/// NOTE: This interface is intended for user extensions and is guaranteed not; 1478/// to be used by TGeo; 1479 ; 1480void TGeoVolume::SetUserExtension(TGeoExtension *ext); 1481{; 1482 TGeoExtension* tmp = fUserExtension;; 1483 fUserExtension = nullptr;; 1484 if (ext); 1485 fUserExtension = ext->Grab();; 1486 if (tmp); 1487 tmp->Release();; 1488}; 1489 ; 1490////////////////////////////////////////////////////////////////////////////////; 1491/// Connect framework defined extension to the volume. The volume ""grabs"" a copy,; 1492/// so the original object can be released by the producer. Release the previously; 1493/// connected extension if any.; 1494///; 1495/// NOTE: This interface is intended for the use by TGeo and the users should; 1496/// NOT connect extensions using this method; 1497 ; 1498void TGeoVolume::SetFWExtension(TGeoExtension *ext); 1499{; 1500 TGeoE",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoVolume_8cxx_source.html:56683,release,released,56683,doc/master/TGeoVolume_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoVolume_8cxx_source.html,1,['release'],['released']
Deployability,"void TMVA::DNN::ClassificationSettings::endTrainCycle ; (; double ; ). virtual . action to be done when the training cycle is ended (e.g. ; update some monitoring output) ; Reimplemented from TMVA::DNN::Settings.; Definition at line 296 of file NeuralNet.cxx. ◆ setResultComputation(). void TMVA::DNN::ClassificationSettings::setResultComputation ; (; std::string ; _fileNameNetConfig, . std::string ; _fileNameResult, . std::vector< Pattern > * ; _resultPatternContainer . ). preparation for monitoring output ; Definition at line 520 of file NeuralNet.cxx. ◆ setWeightSums(). void TMVA::DNN::ClassificationSettings::setWeightSums ; (; double ; sumOfSigWeights, . double ; sumOfBkgWeights . ). set the weight sums to be scaled to (preparations for monitoring output) ; Definition at line 512 of file NeuralNet.cxx. ◆ startTestCycle(). void TMVA::DNN::ClassificationSettings::startTestCycle ; (; ). virtual . action to be done when the test cycle is started (e.g. ; update some monitoring output) ; Reimplemented from TMVA::DNN::Settings.; Definition at line 316 of file NeuralNet.cxx. ◆ startTrainCycle(). void TMVA::DNN::ClassificationSettings::startTrainCycle ; (; ). virtual . action to be done when the training cycle is started (e.g. ; update some monitoring output) ; Reimplemented from TMVA::DNN::Settings.; Definition at line 281 of file NeuralNet.cxx. ◆ testIteration(). void TMVA::DNN::ClassificationSettings::testIteration ; (; ). inlinevirtual . callback for monitoring and loggging ; Reimplemented from TMVA::DNN::Settings.; Definition at line 930 of file NeuralNet.h. ◆ testSample(). void TMVA::DNN::ClassificationSettings::testSample ; (; double ; error, . double ; output, . double ; target, . double ; weight . ). virtual . action to be done after the computation of a test sample (e.g. ; update some monitoring output) ; Reimplemented from TMVA::DNN::Settings.; Definition at line 304 of file NeuralNet.cxx. Member Data Documentation. ◆ m_ams. std::vector<double> TMVA::DNN::Classif",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1ClassificationSettings.html:8563,update,update,8563,doc/master/classTMVA_1_1DNN_1_1ClassificationSettings.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1ClassificationSettings.html,1,['update'],['update']
Deployability,"voidROOT::Math::BaseIntegratorOptions::SetWKSize(unsigned int size); unsigned intROOT::Math::BaseIntegratorOptions::WKSize() const. protected:. voidROOT::Math::BaseIntegratorOptions::ClearExtra(). Data Members; protected:. doubleROOT::Math::BaseIntegratorOptions::fAbsToleranceabsolute tolerance ; ROOT::Math::IOptions*ROOT::Math::BaseIntegratorOptions::fExtraOptionsextra options ; intROOT::Math::BaseIntegratorOptions::fIntegTypeIntegrator type (value converted from enum); unsigned intROOT::Math::BaseIntegratorOptions::fNCalls(max) funxtion calls; doubleROOT::Math::BaseIntegratorOptions::fRelTolerancerelative tolerance ; unsigned intROOT::Math::BaseIntegratorOptions::fWKSizeworkspace size. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseIntegratorOptions & operator=(const ROOT::Math::IntegratorMultiDimOptions& rhs); assignment operators. std::string Integrator() const; name of 1D integrator. IntegrationOneDim::Type IntegratorType() const; type of the integrator (return the enumeration type). { return (IntegrationOneDim::Type) fIntegType; }. void SetIntegrator(const char* name); set 1D integrator name. void Print(ostream& os = std::cout) const; print all the options. void SetDefaultIntegrator(const char* name); static methods for setting and retrieving the default options. void SetDefaultAbsTolerance(double tol). void SetDefaultRelTolerance(double tol). void SetDefaultWKSize(unsigned int size). std::string DefaultIntegrator(). IntegrationOneDim::Type DefaultIntegratorType(). double DefaultAbsTolerance(). double DefaultRelTolerance(). unsigned int DefaultWKSize(). ROOT::Math::IOptions & Default(const char* name); retrieve specific options - if not existing create a IOptions. ROOT::Math::IOptions * FindDefault(const char* name); find specific options - return 0 if not existing. void PrintDefault(const char* name = 0, ostream& os = std::cout); print only the specified default options. IntegratorMultiDimOptions(IOptions * extr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__IntegratorMultiDimOptions.html:3295,integrat,integrator,3295,root/html528/ROOT__Math__IntegratorMultiDimOptions.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__IntegratorMultiDimOptions.html,4,['integrat'],['integrator']
Deployability,"voidResetCSCBits(UChar_t f); voidSaveVizParams(ostream& out, const TString& tag, const TString& var); virtual voidSelectElement(Bool_t state); voidSetCompound(TEveCompound* c); voidSetCSCBits(UChar_t f); voidSetDestroyOnZeroRefCnt(Bool_t d); voidSetEditMainColor(Bool_t x); voidSetEditMainTransparency(Bool_t x); virtual voidSetElementName(const char* name); virtual voidSetElementNameTitle(const char* name, const char* title); virtual voidSetElementTitle(const char* title); voidSetMainAlpha(Float_t alpha); virtual voidSetMainColor(Color_t color); voidSetMainColorPixel(Pixel_t pixel); voidSetMainColorPtr(Color_t* color); voidSetMainColorRGB(UChar_t r, UChar_t g, UChar_t b); voidSetMainColorRGB(Float_t r, Float_t g, Float_t b); virtual voidSetMainTransparency(Char_t t); voidSetPickable(Bool_t p); voidSetPickableRecursively(Bool_t p); virtual Bool_tSetRnrChildren(Bool_t rnr); virtual Bool_tSetRnrSelf(Bool_t rnr); virtual Bool_tSetRnrSelfChildren(Bool_t rnr_self, Bool_t rnr_children); virtual Bool_tSetRnrState(Bool_t rnr); voidSetSourceObject(TObject* o); virtual voidSetTransMatrix(Double_t* carr); virtual voidSetTransMatrix(const TGeoMatrix& mat); voidSetUserData(void* ud); voidSetVizModel(TEveElement* model); voidSetVizTag(const TString& tag); virtual voidShowMembers(TMemberInspector& insp) const; virtual Bool_tSingleRnrState() const; voidSpawnEditor()MENU ; voidStampColorSelection(); voidStampObjProps(); voidStampTransBBox(); voidStampVisibility(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); Bool_tTestCSCBits(UChar_t f) const; TEveElement(); TEveElement(Color_t& main_color); TEveElement(const TEveElement& e); virtual voidUnHighlighted(); virtual voidUnSelected(); voidVizDB_Apply(const char* tag)MENU ; voidVizDB_Insert(const char* tag, Bool_t replace = kTRUE, Bool_t update = kTRUE)MENU ; voidVizDB_Reapply()MENU ; voidVizDB_UpdateModel(Bool_t update = kTRUE)MENU ; virtual voidWriteVizParams(ostream& out, const TString& var).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEveElement.html:8451,update,update,8451,root/html602/TEveElement.html,https://root.cern,https://root.cern/root/html602/TEveElement.html,4,['update'],['update']
Deployability,"voidSetPlot(TObject* obj, const TString& opt); virtual Bool_tTEveElement::SetRnrChildren(Bool_t rnr); virtual Bool_tTEveElement::SetRnrSelf(Bool_t rnr); virtual Bool_tTEveElement::SetRnrSelfChildren(Bool_t rnr_self, Bool_t rnr_children); virtual Bool_tTEveElement::SetRnrState(Bool_t rnr); voidTEveElement::SetSourceObject(TObject* o); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTEveElement::SetTransMatrix(Double_t* carr); virtual voidTEveElement::SetTransMatrix(const TGeoMatrix& mat); virtual voidTObject::SetUniqueID(UInt_t uid); voidTEveElement::SetUserData(void* ud); voidTEveElement::SetVizModel(TEveElement* model); voidTEveElement::SetVizTag(const TString& tag); virtual voidShowMembers(TMemberInspector& insp); virtual Bool_tTEveElement::SingleRnrState() const; virtual Int_tTNamed::Sizeof() const; voidTEveElement::SpawnEditor()MENU ; voidTEveElement::StampColorSelection(); voidTEveElement::StampObjProps(); voidTEveElement::StampTransBBox(); voidTEveElement::StampVisibility(); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; Bool_tTEveElement::TestCSCBits(UChar_t f) const; virtual voidTEveElement::UnHighlighted(); virtual voidTEveElement::UnSelected(); virtual voidTObject::UseCurrentStyle(); voidTEveElement::VizDB_Apply(const char* tag)MENU ; voidTEveElement::VizDB_Insert(const char* tag, Bool_t replace = kTRUE, Bool_t update = kTRUE)MENU ; voidTEveElement::VizDB_Reapply()MENU ; voidTEveElement::VizDB_UpdateModel(Bool_t update = kTRUE)MENU ; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTEveElement::WriteVizParams(ostream& out, const TString& var).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEvePlot3D.html:15635,update,update,15635,root/html528/TEvePlot3D.html,https://root.cern,https://root.cern/root/html528/TEvePlot3D.html,6,['update'],['update']
Deployability,"voidSetType(ROOT::Math::IntegrationMultiDim::Type type); doubleSigma(); virtual intStatus() const. protected:. boolCheckFunction(); voidDoInitialize(). private:. ROOT::Math::GSLMCIntegratorGSLMCIntegrator(const ROOT::Math::GSLMCIntegrator&); ROOT::Math::GSLMCIntegrator&operator=(const ROOT::Math::GSLMCIntegrator&). Data Members; private:. doublefAbsTol; unsigned intfCalls; unsigned intfDim; doublefError; ROOT::Math::GSLMonteFunctionWrapper*fFunction; ROOT::Math::MCIntegration::ModefMode; doublefRelTol; doublefResult; ROOT::Math::GSLRngWrapper*fRng; intfStatus; ROOT::Math::IntegrationMultiDim::TypefType; ROOT::Math::GSLMCIntegrationWorkspace*fWorkspace. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GSLMCIntegrator(MCIntegration::Type type = MCIntegration::kVEGAS, double absTol = 1.E-6, double relTol = 1E-4, unsigned int calls = 500000); constructors; constructor of GSL MCIntegrator. VEGAS MC is set as default integration type. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param calls maximum number of function calls. GSLMCIntegrator(const char * type, double absTol, double relTol, unsigned int calls); constructor of GSL MCIntegrator. VEGAS MC is set as default integration type. @param type type of integration using a char * (required by plug-in manager); @param absTol desired absolute Error; @param relTol desired relative Error; @param calls maximum number of function calls. virtual ~GSLMCIntegrator(). destructor. GSLMCIntegrator(const ROOT::Math::GSLMCIntegrator& ); disable copy ctrs. GSLMCIntegrator & operator=(const ROOT::Math::GSLMCIntegrator& ). void SetFunction(const ROOT::Math::IMultiGenFunction& f); template methods for generic functors. method to set the a generic integration function. @param f integration function. The function type must implement the assigment operator, <em> double ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__GSLMCIntegrator.html:3076,integrat,integration,3076,root/html526/ROOT__Math__GSLMCIntegrator.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__GSLMCIntegrator.html,1,['integrat'],['integration']
Deployability,"voidTEveElement::SetSourceObject(TObject* o); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTEveElement::SetTransMatrix(Double_t* carr); virtual voidTEveElement::SetTransMatrix(const TGeoMatrix& mat); virtual voidTObject::SetUniqueID(UInt_t uid); voidTEveElement::SetUserData(void* ud); voidTEveElement::SetVizModel(TEveElement* model); voidTEveElement::SetVizTag(const TString& tag); virtual voidShowMembers(TMemberInspector& insp) const; virtual Bool_tTEveElement::SingleRnrState() const; virtual Int_tTNamed::Sizeof() const; virtual voidTAtt3D::Sizeof3D() const; voidTEveElement::SpawnEditor()MENU ; voidTEveElement::StampColorSelection(); voidTEveElement::StampObjProps(); voidTEveElement::StampTransBBox(); voidTEveElement::StampVisibility(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; Bool_tTEveElement::TestCSCBits(UChar_t f) const; TEvePolygonSetProjected(const char* n = ""TEvePolygonSetProjected"", const char* t = """"); virtual voidTEveElement::UnHighlighted(); virtual voidTEveProjected::UnRefProjectable(TEveProjectable* assumed_parent, bool notifyParent = true); virtual voidTEveElement::UnSelected(); virtual voidUpdateProjection(); virtual voidTObject::UseCurrentStyle(); voidTEveElement::VizDB_Apply(const char* tag)MENU ; voidTEveElement::VizDB_Insert(const char* tag, Bool_t replace = kTRUE, Bool_t update = kTRUE)MENU ; voidTEveElement::VizDB_Reapply()MENU ; voidTEveElement::VizDB_UpdateModel(Bool_t update = kTRUE)MENU ; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTEveShape::WriteVizParams(ostream& out, const TString& var).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEvePolygonSetProjected.html:17636,update,update,17636,root/html602/TEvePolygonSetProjected.html,https://root.cern,https://root.cern/root/html602/TEvePolygonSetProjected.html,4,['update'],['update']
Deployability,"voidTEveElement::SetTransMatrix(Double_t* carr); virtual voidTEveElement::SetTransMatrix(const TGeoMatrix& mat); voidSetTransparency(Char_t tr)MENU ; voidSetTriangle(Int_t i, Int_t v0, Int_t v1, Int_t v2); voidSetTriangleColor(Int_t i, UChar_t r, UChar_t g, UChar_t b, UChar_t a = 255); virtual voidTObject::SetUniqueID(UInt_t uid); voidTEveElement::SetUserData(void* ud); voidSetVertex(Int_t i, Float_t x, Float_t y, Float_t z); voidTEveElement::SetVizModel(TEveElement* model); voidTEveElement::SetVizTag(const TString& tag); virtual voidShowMembers(TMemberInspector&); virtual Bool_tTEveElement::SingleRnrState() const; virtual Int_tTNamed::Sizeof() const; virtual voidTAtt3D::Sizeof3D() const; voidTEveElement::SpawnEditor()MENU ; voidTEveElement::StampColorSelection(); voidTEveElement::StampObjProps(); voidTEveElement::StampTransBBox(); voidTEveElement::StampVisibility(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; Bool_tTEveElement::TestCSCBits(UChar_t f) const; Int_t*Triangle(Int_t i); UChar_t*TriangleColor(Int_t i); Float_t*TriangleNormal(Int_t i); virtual voidTEveElement::UnHighlighted(); virtual voidTEveElement::UnSelected(); virtual voidTObject::UseCurrentStyle(); Float_t*Vertex(Int_t i); voidTEveElement::VizDB_Apply(const char* tag)MENU ; voidTEveElement::VizDB_Insert(const char* tag, Bool_t replace = kTRUE, Bool_t update = kTRUE)MENU ; voidTEveElement::VizDB_Reapply()MENU ; voidTEveElement::VizDB_UpdateModel(Bool_t update = kTRUE)MENU ; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTEveElement::WriteVizParams(ostream& out, const TString& var).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TEveTriangleSet.html:16768,update,update,16768,root/html534/TEveTriangleSet.html,https://root.cern,https://root.cern/root/html534/TEveTriangleSet.html,2,['update'],['update']
Deployability,"voidTEvePointSelectorConsumer::SetSourceCS(TEvePointSelectorConsumer::ETreeVarType_e cs); voidTEveElement::SetSourceObject(TObject* o); virtual voidTEvePointSet::SetTitle(const char* t); virtual voidTEveElement::SetTransMatrix(Double_t* carr); virtual voidTEveElement::SetTransMatrix(const TGeoMatrix& mat); virtual voidTObject::SetUniqueID(UInt_t uid); voidTEveElement::SetUserData(void* ud); voidTEveElement::SetVizModel(TEveElement* model); voidTEveElement::SetVizTag(const TString& tag); virtual voidShowMembers(TMemberInspector& insp); virtual Bool_tTEveElement::SingleRnrState() const; virtual Int_tTPolyMarker3D::Size() const; virtual voidTAtt3D::Sizeof3D() const; voidTEveElement::SpawnEditor()MENU ; voidTEveElement::StampColorSelection(); voidTEveElement::StampObjProps(); voidTEveElement::StampTransBBox(); voidTEveElement::StampVisibility(); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; virtual voidTEvePointSet::TakeAction(TEvePointSelector*); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; Bool_tTEveElement::TestCSCBits(UChar_t f) const; virtual voidTEveElement::UnHighlighted(); virtual voidTEveProjected::UnRefProjectable(TEveProjectable* assumed_parent); virtual voidTEveElement::UnSelected(); virtual voidUpdateProjection(); virtual voidTObject::UseCurrentStyle(); voidTEveElement::VizDB_Apply(const char* tag)MENU ; voidTEveElement::VizDB_Insert(const char* tag, Bool_t replace = kTRUE, Bool_t update = kTRUE)MENU ; voidTEveElement::VizDB_Reapply()MENU ; voidTEveElement::VizDB_UpdateModel(Bool_t update = kTRUE)MENU ; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTEveLine::WriteVizParams(ostream& out, const TString& var).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveLineProjected.html:22104,update,update,22104,root/html528/TEveLineProjected.html,https://root.cern,https://root.cern/root/html528/TEveLineProjected.html,2,['update'],['update']
Deployability,"voidUpdateProjection(). protected:. voidSetDepthCommon(Float_t d, TEveElement* el, Float_t* bbox); virtual voidSetDepthLocal(Float_t d). private:. TEveProjected&operator=(const TEveProjected&). Data Members; protected:. Float_tfDepthz coordinate; TEveProjectionManager*fManagermanager; TEveProjectable*fProjectablelink to original object. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~TEveProjected(); Destructor.; If fProjectable is non-null, *this is removed from its list of; projected replicas. TEveElement* GetProjectedAsElement(); Returns this projected dynamic-casted to TEveElement.; This is needed as class TEveProjected is used as secondary; inheritance. void SetProjection(TEveProjectionManager* mng, TEveProjectable* model); Sets projection manager and reference in the projectable object. Method called; immediately after default constructor.; See also TEveProjectionManager::ImportElements(). void UnRefProjectable(TEveProjectable* assumed_parent, bool notifyParent = true); Remove reference to projectable. void SetDepth(Float_t d); Set depth coordinate for the element.; Bounding-box should also be updated.; If projection type is 3D, this only sets fDepth member. void SetDepthCommon(Float_t d, TEveElement* el, Float_t* bbox); Utility function to update the z-values of the bounding-box.; As this is an abstract interface, the element and bbox pointers; must be passed from outside. void SetDepthLocal(Float_t d); Base-class implementation -- just sets fDepth. TEveProjectable& operator=(const TEveProjected& ). TEveProjectionManager* GetManager() const; { return fManager; }. TEveProjectable* GetProjectable() const; { return fProjectable; }. Float_t GetDepth() const; { return fDepth; }. void UpdateProjection(). » Last changed: root/eve:$Id$ » Last generated: 2015-03-13 19:22; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TEveProjected.html:2376,update,updated,2376,root/html534/TEveProjected.html,https://root.cern,https://root.cern/root/html534/TEveProjected.html,2,['update'],"['update', 'updated']"
Deployability,"void ClearAll () const;  clear all cached pdf objects ;  ; void ComputeIntervalFromApproxPosterior (double c1, double c2) const;  compute the interval using the approximate posterior function ;  ; void ComputeIntervalFromCdf (double c1, double c2) const;  internal function compute the interval using Cdf integration ;  ; void ComputeIntervalUsingRooFit (double c1, double c2) const;  internal function compute the interval using RooFit ;  ; void ComputeShortestInterval () const;  compute the shortest interval from the histogram representing the posterior ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Private Attributes; TF1 * fApproxPosterior;  TF1 representing the scanned posterior function. ;  ; double fBrfPrecision;  root finder precision ;  ; RooArgSet fConditionalObs;  conditional observables ;  ; RooAbsData * fData;  data set ;  ; RooArgSet fGlobalObs;  global observables ;  ; RooAbsReal * fIntegratedLikelihood;  integrated likelihood function, i.e - unnormalized posterior function ;  ; TString fIntegrationType;  ; double fLeftSideFraction;  fraction of probability content on left side of interval ;  ; RooAbsReal * fLikelihood;  internal pointer to likelihood function ;  ; std::unique_ptr< RooAbsReal > fLogLike;  internal pointer to log likelihood function ;  ; double fLower;  computer lower interval bound ;  ; double fNLLMin;  minimum value of Nll ;  ; int fNScanBins;  number of bins to scan, if = -1 no scan is done (default) ;  ; RooArgSet fNuisanceParameters;  nuisance parameters ;  ; RooAbsPdf * fNuisancePdf;  nuisance pdf (needed when using nuisance sampling technique) ;  ; int fNumIterations;  number of iterations (when using ToyMC) ;  ; RooAbsPdf * fPdf;  model pdf (could contain the nuisance pdf as constraint term) ;  ; RooArgSet fPOI;  POI. ;  ; ROOT::Math::IGenFunction * fPosteriorFuncti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1BayesianCalculator.html:18402,integrat,integrated,18402,doc/master/classRooStats_1_1BayesianCalculator.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1BayesianCalculator.html,1,['integrat'],['integrated']
Deployability,"void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; RooRealProxy mean;  ; RooRealProxy sigma;  ; RooRealProxy width;  ; RooRealProxy x;  ;  Protected Attributes inherited from RooAbsPdf; Int_t _errorCount = 0;  Number of errors remaining to print. ;  ; Int_t _negCount = 0;  Number of negative probabilities remaining to print. ;  ; RooAbsReal * _norm = nullptr;  ; RooObjCacheManager _normMgr;  ; TString _normRange;  Normalization range. ;  ; RooArgSet const * _normSet = nullptr;  Normalization integral (owned by _normMgr) ;  ; double _rawValue = 0;  ; bool _selectComp = false;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; std::unique_ptr< RooNumGenConfig > _specGeneratorConfig;  ! MC generator configuration specific for this object ;  ; Int_t _traceCount = 0;  Number of traces remaining to print. ;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; Int_t _plotBins = 100;  Number of plot bins. ;  ; double _plotMax = 0.0;  Maximum of plot range. ;  ; double _plotMin = 0.0;  Minimum of plot range. ;  ; bool _selectComp = true;  A buffer for reading values from trees. ;  ; std::unique_ptr< RooNumIntConfig > _specIntegratorConfig;  ; TreeReadBuffer * _treeReadBuffer = nullptr;  ; TString _unit;  Unit for objects value. ;  ; double _value = 0.0;  Cache for current value of object. ;  ;  Protected Attributes inherited from RooAbsArg; std::set< std::string > _boolAttrib;  ; std::set< std::string > _boolAttribTransient;  ; std::vector< RooAbsCache * > _cacheList;  ; RefCountList_t _clientList;  ; RefCountList_t _clientListShape;  ; RefCountList_t _clientListValue;  ; std::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooVoigtian.html:69062,integrat,integration,69062,doc/master/classRooVoigtian.html,https://root.cern,https://root.cern/doc/master/classRooVoigtian.html,1,['integrat'],['integration']
Deployability,"void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from RooPrintable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static std::ostream & defaultPrintStream (std::ostream *os=nullptr);  Return a reference to the current default stream to use in Print(). ;  ; static void nameFieldLength (Int_t newLen);  Set length of field reserved from printing name of RooAbsArgs in multi-line collection printing to given amount. ;  . Protected Attributes; RooLinkedList _configSets;  List of configuration sets for individual integration methods. ;  ; RooCategory _method1D;  Selects integration method for 1D p.d.f.s. ;  ; RooCategory _method1DCat;  Selects integration method for 1D p.d.f.s with categories. ;  ; RooCategory _method1DCond;  Selects integration method for 1D conditional p.d.f.s. ;  ; RooCategory _method1DCondCat;  Selects integration method for 1D conditional p.d.f.s with categories. ;  ; RooCategory _method2D;  Selects integration method for 2D p.d.f.s. ;  ; RooCategory _method2DCat;  Selects integration method for 2D p.d.f.s with categories. ;  ; RooCategory _method2DCond;  Selects integration method for 2D conditional p.d.f.s. ;  ; RooCategory _method2DCondCat;  Selects integration method for 2D conditional p.d.f.s with categories. ;  ; RooCategory _methodND;  Selects integration method for ND p.d.f.s. ;  ; RooCategory _methodNDCat;  Selects integration method for ND p.d.f.s with categories. ;  ; RooCategory _methodNDCond;  Selects integration method for ND conditional p.d.f.s. ;  ; RooCategory _methodNDCondCat;  Selects integration method for ND conditional p.d.f.s with categories. ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooNumGenConfig.html:12566,integrat,integration,12566,doc/master/classRooNumGenConfig.html,https://root.cern,https://root.cern/doc/master/classRooNumGenConfig.html,1,['integrat'],['integration']
Deployability,"void SetPoint (Int_t i, Double_t x, Double_t y);  Set x and y values for point number i. ;  ; virtual void SetPointX (Int_t i, Double_t x);  Set x value for point i. ;  ; virtual void SetPointY (Int_t i, Double_t y);  Set y value for point i. ;  ; virtual void SetStats (Bool_t stats=kTRUE);  Set statistics option on/off. ;  ; void SetTitle (const char *title="""") override;  Change (i.e. ;  ; virtual void Sort (Bool_t(*greater)(const TGraph *, Int_t, Int_t)=&TGraph::CompareX, Bool_t ascending=kTRUE, Int_t low=0, Int_t high=-1111);  Sorts the points of this TGraph using in-place quicksort (see e.g. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TGraph. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UseCurrentStyle () override;  Set current style settings in this graph This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; void Zero (Int_t &k, Double_t AZ, Double_t BZ, Double_t E2, Double_t &X, Double_t &Y, Int_t maxiterations);  Find zero of a continuous function. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCurve.html:18089,continuous,continuous,18089,doc/master/classRooCurve.html,https://root.cern,https://root.cern/doc/master/classRooCurve.html,4,['continuous'],['continuous']
Deployability,"void setFitConfig (const char *pdfName, const char *obsName, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={});  ; void setGenConfig (const char *pdfName, const char *obsName, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={});  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsStudy;  RooAbsStudy ()=default;  ;  RooAbsStudy (const char *name, const char *title);  Constructor. ;  ;  RooAbsStudy (const RooAbsStudy &other);  Copy constructor. ;  ;  ~RooAbsStudy () override;  Destructor. ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; RooLinkedList * detailedData ();  ; virtual void dump ();  ; void releaseDetailData ();  ; void storeDetailedOutput (bool flag);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; RooDataSet * summaryData ();  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Boo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooGenFitStudy.html:2141,release,releaseDetailData,2141,doc/master/classRooGenFitStudy.html,https://root.cern,https://root.cern/doc/master/classRooGenFitStudy.html,1,['release'],['releaseDetailData']
Deployability,"void setValueDirty (const RooAbsArg *source);  Force element to re-evaluate itself when a value is requested. ;  ; void unRegisterProxy (RooArgProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooListProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooSetProxy &proxy);  Remove proxy from proxy list. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; double _eps = 1e-7;  Precision. ;  ; std::unique_ptr< RooFunctor > _ftor;  ! Functor binding of RooAbsReal ;  ; RooRealProxy _func;  Input function. ;  ; RooSetProxy _nset;  Normalization set (optional) ;  ; Int_t _order = 1;  Derivation order. ;  ; std::unique_ptr< ROOT::Math::RichardsonDerivator > _rd;  ! Derivator ;  ; RooRealProxy _x;  Observable. ;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; Int_t _plotBins = 100;  Number of plot bins. ;  ; double _plotMax = 0.0;  Maximum of plot range. ;  ; double _plotMin = 0.0;  Minimum of plot range. ;  ; bool _selectComp = true;  A buffer for reading values from trees. ;  ; std::unique_ptr< RooNumIntConfig > _specIntegratorConfig;  ; TreeReadBuffer * _treeReadBuffer = nullptr;  ; TString _unit;  Unit for objects value. ;  ; double _value = 0.0;  Cache for current value of object. ;  ;  Protected Attributes inherited from RooAbsArg; std::set< std::string > _boolAttrib;  ; std::set< std::string > _boolAttribTransient;  ; std::vector< RooAbsCache * > _cacheList;  ; RefCountList_t _clientList;  ; RefCountList_t _clientListShape;  ; RefCountList_t _clientListValue;  ; std::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooDerivative.html:55201,integrat,integration,55201,doc/master/classRooDerivative.html,https://root.cern,https://root.cern/doc/master/classRooDerivative.html,1,['integrat'],['integration']
Deployability,"void unRegisterProxy (RooSetProxy &proxy);  Remove proxy from proxy list. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; RooRealProxy _eff;  Efficiency function. ;  ; RooRealProxy _pdf;  Probability Density function. ;  ;  Protected Attributes inherited from RooAbsPdf; Int_t _errorCount = 0;  Number of errors remaining to print. ;  ; Int_t _negCount = 0;  Number of negative probabilities remaining to print. ;  ; RooAbsReal * _norm = nullptr;  ; RooObjCacheManager _normMgr;  ; TString _normRange;  Normalization range. ;  ; RooArgSet const * _normSet = nullptr;  Normalization integral (owned by _normMgr) ;  ; double _rawValue = 0;  ; bool _selectComp = false;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; std::unique_ptr< RooNumGenConfig > _specGeneratorConfig;  ! MC generator configuration specific for this object ;  ; Int_t _traceCount = 0;  Number of traces remaining to print. ;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; Int_t _plotBins = 100;  Number of plot bins. ;  ; double _plotMax = 0.0;  Maximum of plot range. ;  ; double _plotMin = 0.0;  Minimum of plot range. ;  ; bool _selectComp = true;  A buffer for reading values from trees. ;  ; std::unique_ptr< RooNumIntConfig > _specIntegratorConfig;  ; TreeReadBuffer * _treeReadBuffer = nullptr;  ; TString _unit;  Unit for objects value. ;  ; double _value = 0.0;  Cache for current value of object. ;  ;  Protected Attributes inherited from RooAbsArg; std::set< std::string > _boolAttrib;  ; std::set< std::string > _boolAttribTransient;  ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooEffProd.html:68222,configurat,configuration,68222,doc/master/classRooEffProd.html,https://root.cern,https://root.cern/doc/master/classRooEffProd.html,1,['configurat'],['configuration']
Deployability,"w (100000), the statistics box will show all combinations; of underflow/overflows and not just one single number.; The parameter mode can be any combination of the letters; kKsSiourRmMen. k : kurtosis printed; K : kurtosis and kurtosis error printed; s : skewness printed; S : skewness and skewness error printed; i : integral of bins printed; o : number of overflows printed; u : number of underflows printed; r : rms printed; R : rms and rms error printed; m : mean value printed; M : mean value mean error values printed; e : number of entries printed; n : name of histogram is printed. For example, to print only name of histogram and number of entries do:. gStyle->SetOptStat(""ne"");. To print only the name of the histogram do:. gStyle->SetOptStat(""n"");. The default value is:. gStyle->SetOptStat(""nemr"");. When a histogram is painted, a TPaveStats object is created and added; to the list of functions of the histogram. If a TPaveStats object; already exists in the histogram list of functions, the existing object is just; updated with the current histogram parameters.; Once a histogram is painted, the statistics box can be accessed using; h->FindObject(""stats""). In the command line it is enough to do:. Root > h->Draw(); Root > TPaveStats *st = (TPaveStats*)h->FindObject(""stats""). because after h->Draw() the histogram is automatically painted. But; in a script file the painting should be forced using gPad->Update(); in order to make sure the statistics box is created:. h->Draw();; gPad->Update();; TPaveStats *st = (TPaveStats*)h->FindObject(""stats"");. Without gPad->Update() the line h->FindObject(""stats""); returns a null pointer.; When a histogram is drawn with the option ""SAME"", the statistics box; is not drawn. To force the statistics box drawing with the option; ""SAME"", the option ""SAMES"" must be used.; If the new statistics box hides the previous statistics box, one can change; its position with these lines (""h"" being the pointer to the histogram):. Root > TPaveStats *st ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/THistPainter.html:16856,update,updated,16856,root/html528/THistPainter.html,https://root.cern,https://root.cern/root/html528/THistPainter.html,6,['update'],['updated']
Deployability,"w PDF of the form. . \[ f(x) = \mathcal{N} \cdot \sum_{i} a_{i} * x^{b_i} \]. Definition at line 20 of file RooPowerSum.h. Public Member Functions;  RooPowerSum ();  ;  RooPowerSum (const char *name, const char *title, RooAbsReal &x, const RooArgList &coefList, const RooArgList &expList);  Create a power law in the variable x. ;  ;  RooPowerSum (const RooPowerSum &other, const char *name=nullptr);  Copy constructor. ;  ; double analyticalIntegral (int code, const char *rangeName=nullptr) const override;  Do the analytical integral according to the code that was returned by getAnalyticalIntegral(). ;  ; RooAbsReal const & base () const;  Get the base of the exponentiated terms (aka. x variable). ;  ; TObject * clone (const char *newname) const override;  ; RooArgList const & coefList () const;  Get the list of coefficients. ;  ; RooArgList const & expList () const;  Get the list of exponents. ;  ; int getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const override;  Advertise to RooFit that this function can be analytically integrated. ;  ; std::string getFormulaExpression (bool expand) const;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsPdf;  RooAbsPdf ();  Default constructor. ;  ;  RooAbsPdf (const char *name, const char *title, double minVal, double maxVal);  Constructor with name, title, and plot range. ;  ;  RooAbsPdf (const char *name, const char *title=nullptr);  Constructor with name and title only. ;  ;  ~RooAbsPdf () override;  Destructor. ;  ; double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Analytical integral with normalization (see RooAbsReal::analyticalIntegralWN() for further information). ;  ; virtual RooAbsGenContext * autoGenContext (const RooArgSet &vars, con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooPowerSum.html:1442,integrat,integrated,1442,doc/master/classRooPowerSum.html,https://root.cern,https://root.cern/doc/master/classRooPowerSum.html,1,['integrat'],['integrated']
Deployability,w Slider range. void DoSliderPressed(); Slot connected to the x-axis Range slider for initialising the; values of the slider movement. void DoSliderReleased(); Slot connected to the x-axis Range slider for finalizing the; values of the slider movement. void DoAxisRange(); Slot connected to the number entry fields containing the Max/Min; value of the x-axis. void DoBinReleased(); Slot connected to the rebin slider in case of a not ntuple histogram; Updates some other widgets which are related to the rebin slider. void DoBinMoved(Int_t number); Slot connected to the rebin slider in case of a not ntuple histogram; (does the Rebinning of the histogram). void DoBinPressed(); Slot connected to the rebin slider in case of a not ntuple histogram. void DoBinReleased1(); Slot connected to the BinNumber Slider in case of a ntuple histogram; (does the Rebinning of the histogram). void DoBinMoved1(); Slot connected to the rebin slider in case of an ntuple histogram.; It updates the BinNumberEntryField during the BinSlider movement. void DoBinLabel(); Slot connected to the Bin number entry of the Rebinning tab. void DoBinLabel1(); Slot connected to the Bin number entry of the Rebinning tab. void DoOffsetPressed(); Slot connected to the OffSetSlider that saves the OldBinOffset; (nessesary for delay draw mode). void DoOffsetReleased(); Slot connected to the OffSetSlider.; It changes the origin of the histogram inbetween a binwidth and; rebin the histogram with the new Offset given by the Slider. void DoOffsetMoved(Int_t num); Slot connected to the OffSetSlider.; It changes the origin of the histogram inbetween a binwidth and; rebin the histogram with the new offset given by the Slider. void DoBinOffset(); Slot connected to the OffSetNumberEntry which is related to the; OffSetSlider changes the origin of the histogram inbetween a binwidth. void DoApply(); Slot connected to the Apply button of the Binning tab. void DoCancel(); Slot connected to the Cancel button of the Binning tab. TS,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TH1Editor.html:30516,update,updates,30516,root/html528/TH1Editor.html,https://root.cern,https://root.cern/root/html528/TH1Editor.html,6,['update'],['updates']
Deployability,"w such action, one could either grant generic access for all or one could allow to execute only special method:; root [8] serv->Restrict(""/Folder/histo1"", ""allow=all"");; root [9] serv->Restrict(""/Folder/histo1"", ""allow_method=GetTitle"");; One could provide several options for the same item, separating them with ‘&’ sign:; root [10] serv->Restrict(""/Folder/histo1"", ""allow_method=GetTitle&hide=guest"");; Complete list of supported options could be found in TRootSniffer:Restrict() method documentation.; 1.5 Using FastCGI interface; FastCGI is a protocol for interfacing interactive programs with a web server like Apache, lighttpd, Microsoft ISS and many others.; When starting THttpServer, one could specify:; serv = new THttpServer(""fastcgi:9000"");; In fact, the FastCGI interface can run in parallel to http server. One can just call:; serv = new THttpServer(""http:8080"");; serv->CreateEngine(""fastcgi:9000"");; One could specify a debug parameter to be able to adjust the FastCGI configuration on the web server:; serv->CreateEngine(""fastcgi:9000?debug=1"");; All user access will be ruled by the main web server - for the moment one cannot restrict access with fastcgi engine.; 1.5.1 Configure fastcgi with Apcahe2; First of all, one should compile and install mod_fastcgi module. Then mod_fastcgi should be specified in httpd.conf to load it when Apache server is started. Finally in host configuration file one should have following lines:; <IfModule mod_fastcgi.c>; FastCgiExternalServer ""/srv/www/htdocs/root.app"" -host rootapp_host_name:9000; </IfModule>; Here is supposed that directory “/srv/www/htdocs” is root directory for web server. Than one should be able to open address:; http://apache_host_name/root.app/; 1.5.2 Configure fastcgi with lighttpd; An example of configuration file for lighttpd server is:; server.modules += ( ""mod_fastcgi"" ); fastcgi.server = (; ""/root.app"" =>; (( ""host"" => ""192.168.1.11"",; ""port"" => 9000,; ""check-local"" => ""disable"",; ""docroot"" => ""/""; )); ); Be ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/guides/HttpServer/HttpServer.html:6301,configurat,configuration,6301,root/html534/guides/HttpServer/HttpServer.html,https://root.cern,https://root.cern/root/html534/guides/HttpServer/HttpServer.html,1,['configurat'],['configuration']
Deployability,"w the object communication mechanism can be used for handling the TCanvas’s mouse/key events in an interpreted class. With this demo you can fill histograms by hand:. Click the left button or move mouse with button pressed to fill histograms.; Use the right button of the mouse to reset the histograms. 26.6.4 Complex GUI Using Signals and Slots (guitest.C); Based on $ROOTSYS/test/guitest.cxx this example demonstrates:. All features of the original compiled guitest.cxx program.; Sophisticated use of signals and slots to build a complete user interface that can be executed either in the interpreter or as a compiled program. 27 Automatic HTML Documentation. THtml is ROOT’s documentation engine. It can be used to document your classes in a reference guide, and to convert your text or source files to HTML.; 27.1 Reference Guide; The Reference Guide for the ROOT classes at http://root.cern.ch/root/html/ has been generated by ROOT’s THtml class. Just as for ROOT’s classes, it can generate (and update) a reference guide for your classes, too. You document your classes using source code comments. All comments will be automatically put into a <pre></pre> environment to keep the indentation and line length. You can write “raw” HTML by enclosing comments in the keywords Begin_Html and End_Html.; To generate documentation for the class TObject you could run the following commands:; root[] THtml h; root[] h.SetInputDir(""$(ROOTSYS)"");; root[] h.MakeClass(""TObject"");; root[] h.CreateJavascript();; root[] h.CreateStylesheet();; The comments following the first comment of the form //____________________, before any method, is assumed to be the class description. As with any other documentation part, it has to be a continuous block of comments.; Any documented class will have an class index entry in the ClassIndex.html, showing their name with a link to their documentation page and a miniature description. This description for e.g. the class MyClass has to be given in MyClass's header ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:1240216,update,update,1240216,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['update'],['update']
Deployability,"w(""var:t1.v1:t2.v2"");; When a TChain::Draw is executed, an automatic call to TTree::AddFriendconnects the trees in the chain. When a chain is deleted, its friend elements are also deleted. The number of entries in the friend must be equal or greater to the number of entries of the original chain. If the friend has fewer entries a warning is given and the resulting histogram will have missing entries. For additional information see TTree::AddFriends(). A full example of a tree and friends is in Example #3 ($ROOTSYS/tutorials/tree/tree3.C) in the Trees section above.; 13 Math Libraries in ROOT; The aim of Math libraries in ROOT is to provide and to support a coherent set of mathematical and statistical functions. The latest developments have been concentrated in providing first versions of the MathCore and MathMore libraries, included in ROOT v5.08. Other recent developments include the new version of MINUIT, which has been re-designed and re-implemented in the C++ language. It is integrated in ROOT. In addition, an optimized package for describing small matrices and vector with fixed sizes and their operation has been developed (SMatrix). The structure is shown in the following picture. Math libraries and packages. 13.1 MathCore Library; MathCore provides a collection of functions and C++ classes for numerical computing. This library includes only the basic mathematical functions and algorithms and not all the functionality required by the physics community. A more advanced mathematical functionality is provided by the MathMore library. The current set of included classes, which are provided in the ROOT::Math namespace are:. Basic special functions like the gamma, beta and error function.; Mathematical functions used in statistics, such as the probability density functions and the cumulative distributions functions (lower and upper integral of the pdf’s).; Generic function classes and interfaces for evaluating one-dimensional (ROOT::Math::IBaseFunctiononeDim) and mul",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:655636,integrat,integrated,655636,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['integrat'],['integrated']
Deployability,"w, x, 10000); ; # Again, if you do a vanilla fit, you'll get a bias; fit3 = powerlaw.fitTo(powerlaw_data, Save=True, PrintLevel=-1, SumW2Error=False); fit3.Print(); ; # This time, the bias is not the same factor in each bin! This means our; # trick by sampling the integral in the same way doesn't cancel out the; # bias completely. The average bias is canceled, but there are per-bin; # biases that remain. Still, this method has some value: it is cheaper than; # rigurously correcting the bias by integrating the pdf in each bin. So if; # you know your per-bin bias variations are small or performance is an; # issue, this approach can be sufficient.; enableBinIntegrator(powerlaw, x.numBins()); fit4 = powerlaw.fitTo(powerlaw_data, Save=True, PrintLevel=-1, SumW2Error=False); fit4.Print(); disableBinIntegrator(powerlaw); ; # To get rid of the binning effects in the general case, one can use the; # IntegrateBins() command argument. Now, the pdf is not evaluated at the; # bin centers, but numerically integrated over each bin and divided by the; # bin width. The parameter for IntegrateBins() is the required precision; # for the numeric integrals. This is computationally expensive, but the; # bias is now not a problem anymore.; fit5 = powerlaw.fitTo(powerlaw_data, IntegrateBins=1e-3, Save=True, PrintLevel=-1, SumW2Error=False); fit5.Print(); ; # Improving numerical stability; # -----------------------------; ; # There is one more problem with binned fits that is related to the binning; # effects because often, a binned fit is affected by both problems.; #; # The issue is numerical stability for fits with a greatly different number; # of events in each bin. For each bin, you have a term \f[n\log(p)\f] in; # the NLL, where \f[n\f] is the number of observations in the bin, and; # \f[p\f] the predicted probability to have an event in that bin. The; # difference in the logarithms for each bin is small, but the difference in; # \f[n\f] can be orders of magnitudes! Therefore, when sum",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf614__binned__fit__problems_8py.html:5143,integrat,integrated,5143,doc/master/rf614__binned__fit__problems_8py.html,https://root.cern,https://root.cern/doc/master/rf614__binned__fit__problems_8py.html,1,['integrat'],['integrated']
Deployability,"w.r.t to; normalization and integration sets. Int_t RooCacheManager<T> setObj(const RooArgSet* nset, const RooArgSet* iset, RooAbsCacheElement* obj, const TNamed* isetRangeName = 0); Insert payload object 'obj' in cache indexed on nset,iset and isetRangeName. T* RooCacheManager<T> getObj(const RooArgSet* nset, const RooArgSet* iset, Int_t* sterileIdx = 0, const TNamed* isetRangeName = 0); Retrieve payload object indexed on nset,uset amd isetRangeName; If sterileIdx is not null, it is set to the index of the sterile; slot in cacse such a slot is recycled. T* RooCacheManager<T> getObjByIndex(Int_t index) const; Retrieve payload object by slot index. const RooNameSet* RooCacheManager<T> nameSet1ByIndex(Int_t index) const; Retrieve RooNameSet associated with slot at given index. const RooNameSet* RooCacheManager<T> nameSet2ByIndex(Int_t index) const; Retrieve RooNameSet associated with slot at given index. T* getObj(const RooArgSet* nset, Int_t* sterileIndex = 0, const TNamed* isetRangeName = 0); Getter function without integration set. Int_t setObj(const RooArgSet* nset, RooAbsCacheElement* obj, const TNamed* isetRangeName = 0); Setter function without integration set. Int_t lastIndex() const; Return index of slot used in last get or set operation. Int_t cacheSize() const; Return size of cache. Bool_t redirectServersHook(const RooAbsCollection& , Bool_t , Bool_t , Bool_t ); Interface function to intercept server redirects. void operModeHook(); Interface function to intercept cache operation mode changes. void printCompactTreeHook(ostream& , const char* ); Interface function to cache add contents to output in tree printing mode. void insertObjectHook(RooAbsCacheElement& ); Interface function to perform post-insert operations on cached object. » Last changed: Mon Jul 4 15:22:21 2011 » Last generated: 2011-07-04 15:22; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooCacheManager_RooAbsCacheElement_.html:4517,integrat,integration,4517,root/html530/RooCacheManager_RooAbsCacheElement_.html,https://root.cern,https://root.cern/root/html530/RooCacheManager_RooAbsCacheElement_.html,1,['integrat'],['integration']
Deployability,"w.r.t to; normalization and integration sets. Int_t RooCacheManager<T> setObj(const RooArgSet* nset, const RooArgSet* iset, RooAbsCacheElement* obj, const TNamed* isetRangeName = 0); Insert payload object 'obj' in cache indexed on nset,iset and isetRangeName. T* RooCacheManager<T> getObj(const RooArgSet* nset, const RooArgSet* iset, Int_t* sterileIdx = 0, const TNamed* isetRangeName = 0); Retrieve payload object indexed on nset,uset amd isetRangeName; If sterileIdx is not null, it is set to the index of the sterile; slot in cacse such a slot is recycled. T* RooCacheManager<T> getObjByIndex(Int_t index) const; Retrieve payload object by slot index. const RooNameSet* RooCacheManager<T> nameSet1ByIndex(Int_t index) const; Retrieve RooNameSet associated with slot at given index. const RooNameSet* RooCacheManager<T> nameSet2ByIndex(Int_t index) const; Retrieve RooNameSet associated with slot at given index. T* getObj(const RooArgSet* nset, Int_t* sterileIndex = 0, const TNamed* isetRangeName = 0); Getter function without integration set. Int_t setObj(const RooArgSet* nset, RooAbsCacheElement* obj, const TNamed* isetRangeName = 0); Setter function without integration set. Int_t lastIndex() const; Return index of slot used in last get or set operation. Int_t cacheSize() const; Return size of cache. Bool_t redirectServersHook(const RooAbsCollection& , Bool_t , Bool_t , Bool_t ); Interface function to intercept server redirects. void operModeHook(); Interface function to intercept cache operation mode changes. void printCompactTreeHook(ostream& , const char* ); Interface function to cache add contents to output in tree printing mode. void insertObjectHook(RooAbsCacheElement& ); Interface function to perform post-insert operations on cached object. » Last changed: Thu Nov 3 20:07:39 2011 » Last generated: 2011-11-03 20:07; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooCacheManager_RooAbsCacheElement_.html:4517,integrat,integration,4517,root/html532/RooCacheManager_RooAbsCacheElement_.html,https://root.cern,https://root.cern/root/html532/RooCacheManager_RooAbsCacheElement_.html,1,['integrat'],['integration']
Deployability,"wID) override;  Makes context ctx current OpenGL context. ;  ; void MapRaised (Window_t wid) override;  Maps the window ""id"" and all of its subwindows that have had map requests on the screen and put this window on the top of of the stack of all windows. ;  ; void MapSubwindows (Window_t wid) override;  Maps all subwindows for the specified window ""id"" in top-to-bottom stacking order. ;  ; void MapWindow (Window_t wid) override;  Maps the window ""id"" and all of its subwindows that have had map requests. ;  ; void MoveResizeWindow (Window_t wid, Int_t x, Int_t y, UInt_t w, UInt_t h) override;  Changes the size and location of the specified window ""id"" without raising it. ;  ; void MoveWindow (Int_t wid, Int_t x, Int_t y) override;  Moves the window ""wid"" to the specified x and y coordinates. ;  ; void MoveWindow (Window_t wid, Int_t x, Int_t y) override;  Moves the specified window to the specified x and y coordinates. ;  ; Bool_t NeedRedraw (ULong_t tgwindow, Bool_t force) override;  Notify the low level GUI layer ROOT requires ""tgwindow"" to be updated. ;  ; void NextEvent (Event_t &event) override;  The ""event"" is set to default event. ;  ; Int_t OpenDisplay (const char *displayName) override;  Opens connection to display server (if such a thing exist on the current platform). ;  ; Int_t OpenPixmap (UInt_t w, UInt_t h) override;  Creates a pixmap of the width ""w"" and height ""h"" you specified. ;  ; Bool_t ParseColor (Colormap_t cmap, const char *cname, ColorStruct_t &color) override;  Looks up the string name of a color ""cname"" with respect to the screen associated with the specified colormap. ;  ; Bool_t PointInRegion (Int_t x, Int_t y, Region_t reg) override;  Returns kTRUE if the point [x, y] is contained in the region reg. ;  ; Region_t PolygonRegion (Point_t *points, Int_t np, Bool_t winding) override;  Returns a region for the polygon defined by the points array. ;  ; void PutImage (Drawable_t wid, GContext_t gc, Drawable_t img, Int_t dx, Int_t dy, Int_t x, In",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGCocoa.html:18584,update,updated,18584,doc/master/classTGCocoa.html,https://root.cern,https://root.cern/doc/master/classTGCocoa.html,2,['update'],['updated']
Deployability,"w[i]^2 in the bin corresponding to x[i].; if w is NULL each entry is assumed a weight=1. -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*. void FillRandom(const char* fname, Int_t ntimes = 5000); -*-*-*-*-*Fill histogram following distribution in function fname*-*-*-*. The distribution contained in the function fname (TF1) is integrated; over the channel contents for the bin range of this histogram.; It is normalized to 1.; Getting one random number implies:; - Generating a random number between 0 and 1 (say r1); - Look in which bin in the normalized integral r1 corresponds to; - Fill histogram channel; ntimes random numbers are generated. One can also call TF1::GetRandom to get a random variate from a function. -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-**-*-*-*-*-*-*-*. void FillRandom(TH1* h, Int_t ntimes = 5000); -*-*-*-*-*Fill histogram following distribution in histogram h*-*-*-*. The distribution contained in the histogram h (TH1) is integrated; over the channel contents for the bin range of this histogram.; It is normalized to 1.; Getting one random number implies:; - Generating a random number between 0 and 1 (say r1); - Look in which bin in the normalized integral r1 corresponds to; - Fill histogram channel; ntimes random numbers are generated. SPECIAL CASE when the target histogram has the same binning as the source.; in this case we simply use a poisson distribution where; the mean value per bin = bincontent/integral. -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-**-*-*-*-*-*-*-*. Int_t FindBin(Double_t x, Double_t y = 0, Double_t z = 0); Return Global bin number corresponding to x,y,z. 2-D and 3-D histograms are represented with a one dimensional; structure. This function tries to rebin the axis if the given point; belongs to an under-/overflow bin.; This has the advantage that all existing functions, such as; GetBinContent, GetBinError, GetBinFunction work for all dimensions.; See also TH1::GetBin, TAxis::Fi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TH1.html:68496,integrat,integrated,68496,root/html528/TH1.html,https://root.cern,https://root.cern/root/html528/TH1.html,3,['integrat'],['integrated']
Deployability,"w_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const char ColorStruct_t color const char Pixmap_t Pixmap_t PictureAttributes_t attr const char char ret_data h unsigned char height h Atom_t Int_t ULong_t ULong_t unsigned char prop_list Atom_t Atom_t Atom_t Time_t typeDefinition TGWin32VirtualXProxy.cxx:249; TGraph.h; TH1D.h; THStack.h; TInterpreter.h; gInterpreter#define gInterpreterDefinition TInterpreter.h:573; TLatex.h; TLegend.h; TProfile.h; gROOT#define gROOTDefinition TROOT.h:406; TStyle.h; Vector4D.h; ROOT::Math::LorentzVectorClass describing a generic LorentzVector in the 4D space-time, using the specified coordinate system ...Definition LorentzVector.h:59; ROOT::RDF::RInterface::DefinePerSampleRInterface< Proxied, DS_t > DefinePerSample(std::string_view name, F expression)Define a new column that is updated when the input sample changes.Definition RInterface.hxx:735; ROOT::RDF::RSampleInfoThis type represents a sample identifier, to be used in conjunction with RDataFrame features such as ...Definition RSampleInfo.hxx:35; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; ROOT::VecOps::RVec< float >; TAttText::SetTextFontvirtual void SetTextFont(Font_t tfont=62)Set the text font.Definition TAttText.h:46; TAttText::SetTextSizevirtual void SetTextSize(Float_t tsize=1)Set the text size.Definition TAttText.h:47; TCanvasThe Canvas class.Definition TCanvas.h:23; TGraphA TGraph is an object made of two arrays X and Y with npoints each.Definition TGraph.h:41; TH1TH1 is the base class of all histogram classes in ROOT.Definition TH1.h:59; TH1::Addvirtual Bool_t Add(TF1 *h1, Double_t c1=1, Option_t *option="""")Performs the operation: this = this +",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/df106__HiggsToFourLeptons_8C.html:14917,update,updated,14917,doc/master/df106__HiggsToFourLeptons_8C.html,https://root.cern,https://root.cern/doc/master/df106__HiggsToFourLeptons_8C.html,1,['update'],['updated']
Deployability,"w_t id); method to restore (dynamic cast) the QWidget object pointer (if any) from ROOT windows ""id"". void PrintEvent(Event_t& ); Dump trhe ROOT Event_t structure to debug the code. int CoinFlag(); return the Coin/QGL viewer flag safely. void SetCoinFlag(int flag); Set the Coin/QGL viewer flag safely. void SetCoinLoaded(); { fgCoinLoaded = 1; }. Int_t IsCoinLoaded(); { return fgCoinLoaded;}. QString RootFileFormat(const char* selector); { return RootFileFormat(QString(selector)); }. QString RootFileFormat(const QString& selector); Define whether the input string contains any pattern; that matches the ROOT image formats; those Qt library can not provide. QString QtFileFormat(const char* selector); { return QtFileFormat(QString(selector)); }. QString QtFileFormat(const QString& selector); returns Qt file format. if no suitable format found and the selector is empty; the default PNG format is returned. a special treatment of the ""gif"" format.; If ""gif"" is not provided with the local Qt installation; replace ""gif"" format with ""png"" one. TQtApplication * CreateQtApplicationImp(); The method to instantiate the QApplication if needed. void PostQtEvent(QObject* receiver, QEvent* event); Qt announced that QThread::postEvent to become obsolete and; we have to switch to the QAppication instead. TGQt(); Default Constructor *-*-*-; *-* ===================. TGQt(const char* name, const char* title); Normal Constructor*-*-*-. ~TGQt(); Default Destructor*-*-*-*-; *-* ==================. Bool_t Init(void* display = 0); Qt GUI initialization-. Int_t CreatROOTThread(); dummy*-*-*-*-; -. Int_t RegisterWid(QPaintDevice* wid); register QWidget for the embedded TCanvas. Int_t UnRegisterWid(QPaintDevice* wid); unregister QWidget to the TCanvas; return = Root registration Id or zero if the wd was not registered. Bool_t IsRegistered(QPaintDevice* wid); Check whether the object has been registered. Int_t InitWindow(ULong_t window); -; *-* if window == 0 InitWindow creates its own instance of T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGQt.html:28714,install,installation,28714,root/html602/TGQt.html,https://root.cern,https://root.cern/root/html602/TGQt.html,2,['install'],['installation']
Deployability,"wable);  Set newest version to specified drawable. ;  ; void Remove ();  Remove canvas from global canvas lists, will be destroyed when shared_ptr will be removed. ;  ; void ResolveSharedPtrs ();  To resolve problem with storing of shared pointers Call this method when reading canvas from the file Can be called many times - after reinitialization of shared pointers no changes will be performed. ;  ; void Run (double tm=0.);  Run canvas functionality for given time (in seconds) ;  ; bool SaveAs (const std::string &filename);  Save canvas in image file. ;  ; void SetHeight (int height);  Set canvas height. ;  ; void SetSize (int width, int height);  Set canvas pixel size - width and height. ;  ; RCanvas & SetTitle (const std::string &title);  Set the canvas's title. ;  ; void SetWidth (int width);  Set canvas width. ;  ; void Show (const std::string &where="""");  Display the canvas. ;  ; void Update (bool async=false, CanvasCallback_t callback=nullptr);  update drawing ;  ;  Public Member Functions inherited from ROOT::Experimental::RPadBase;  ~RPadBase () override;  ; template<class T , class... ARGS> ; std::shared_ptr< T > Add (ARGS... args);  Add drawable of specified class T. ;  ; std::shared_ptr< RFrame > AddFrame ();  Add a frame object for the pad. ;  ; std::shared_ptr< RPad > AddPad (const RPadPos &, const RPadExtent &);  Add subpad. ;  ; std::vector< std::vector< std::shared_ptr< RPad > > > Divide (int nHoriz, int nVert, const RPadExtent &padding={});  Divide this pad into a grid of subpads with padding in between. ;  ; template<class T , class... ARGS> ; std::shared_ptr< T > Draw (ARGS... args);  Create drawable of specified class T. ;  ; template<class T , class... ARGS> ; auto Draw (const std::shared_ptr< T > &what, ARGS... args);  Add object to be painted. ;  ; std::shared_ptr< RDrawable > Draw (std::shared_ptr< RDrawable > &&drawable);  Add existing drawable instance to canvas. ;  ; const RPadBase * FindPadForPrimitiveWithDisplayId (const std::string &dis",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RCanvas.html:3295,update,update,3295,doc/master/classROOT_1_1Experimental_1_1RCanvas.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RCanvas.html,1,['update'],['update']
Deployability,"ward a change in the cached normalization argset to all the registered proxies. ;  ; void setShapeDirty (const RooAbsArg *source);  Notify that a shape-like property (e.g. binning) has changed. ;  ; void setValueDirty (const RooAbsArg *source);  Force element to re-evaluate itself when a value is requested. ;  ; void unRegisterProxy (RooArgProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooListProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooSetProxy &proxy);  Remove proxy from proxy list. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Private Member Functions; double integrate (const RooArgSet *normSet, double low, double high) const;  Integrate the wrapped PDF using our current integrator, with given norm set and limits. ;  ; double operator() (double x) const;  Binding used by the integrator to evaluate the PDF. ;  . Private Attributes; std::vector< double > _binBoundaries;  ! Workspace to store data for bin sampling ;  ; std::unique_ptr< ROOT::Math::IntegratorOneDim > _integrator {nullptr};  ! Integrator used to sample bins. ;  ; RooTemplateProxy< RooAbsRealLValue > _observable;  ; RooTemplateProxy< RooAbsPdf > _pdf;  ; double _relEpsilon {1.E-4};  Default integrator precision. ;  . Friends; template<typename Func > ; class ROOT::Math::WrappedFunction;  . Additional Inherited Members;  Public Types inherited from RooAbsPdf; enum  ExtendMode { CanNotBeExtended; , CanBeExtended; , MustBeExtended; };  ;  Public Types inherited from RooAbsReal; enum  ErrorLoggingMode { PrintErrors; , CollectErrors; , CountErrors; , Ignore; };  ; enum  ScaleType { Raw; , Relative; , NumEvent; , RelativeExpected; };  ; using value_type = double;  ;  Public Types inherited from RooAbsArg; enum  CacheMode { Always =0; , NotAdvised =1; , Never =2; };  ; enum  ConstOpCode",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBinSamplingPdf.html:71196,integrat,integrator,71196,doc/master/classRooBinSamplingPdf.html,https://root.cern,https://root.cern/doc/master/classRooBinSamplingPdf.html,1,['integrat'],['integrator']
Deployability,ways validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; RooRealProxyRooLegendre::_ctheta; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; static Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; intRooLegendre::_l1; intRooLegendre::_l2; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; intRooLegendre::_m1; intRooLegendre::_m2; static Int_tRooPrintable::_nameLength; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tre,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooSpHarmonic.html:32119,integrat,integration,32119,root/html528/RooSpHarmonic.html,https://root.cern,https://root.cern/root/html528/RooSpHarmonic.html,2,['integrat'],['integration']
Deployability,ways validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; RooRealProxyRooLegendre::_ctheta; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; static Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; intRooLegendre::_l1; intRooLegendre::_l2; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; intRooLegendre::_m1; intRooLegendre::_m2; static Int_tRooPrintable::_nameLength; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TRefArrayRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooSpHarmonic.html:32619,integrat,integration,32619,root/html532/RooSpHarmonic.html,https://root.cern,https://root.cern/root/html532/RooSpHarmonic.html,1,['integrat'],['integration']
Deployability,"we cannot generate any of the directVars (in this case, nothing should be added to generatedVars). Any non-zero codes will be passed to our generateEvent() implementation, but otherwise its value is arbitrary. The default implementation of this method returns zero. Subclasses will usually implement this method using the matchArgs() methods to advertise the algorithms they provide. ; Reimplemented in RooBCPEffDecay, RooBCPGenDecay, RooBDecay, RooBMixDecay, RooDecay, RooGamma, RooGaussian, RooGaussModel, RooGExpModel, RooJohnson, RooLandau, RooLognormal, RooNonCPEigenDecay, RooPoisson, RooUniform, RooAddModel, RooBinSamplingPdf, RooMultiVarGaussian, RooProdPdf, and RooTruthModel.; Definition at line 1522 of file RooAbsPdf.cxx. ◆ getGeneratorConfig(). const RooNumGenConfig * RooAbsPdf::getGeneratorConfig ; (; ); const. Return the numeric MC generator configuration used for this object. ; If a specialized configuration was associated with this object, that configuration is returned, otherwise the default configuration for all RooAbsReals is returned ; Definition at line 2651 of file RooAbsPdf.cxx. ◆ getLogProbabilities(). void RooAbsPdf::getLogProbabilities ; (; std::span< const double > ; pdfValues, . double * ; output . ); const. Definition at line 671 of file RooAbsPdf.cxx. ◆ getLogVal(). double RooAbsPdf::getLogVal ; (; const RooArgSet * ; set = nullptr); const. virtual . Return the log of the current value with given normalization An error message is printed if the argument of the log is negative. ; Reimplemented in RooLegacyExpPoly, and RooHistConstraint.; Definition at line 620 of file RooAbsPdf.cxx. ◆ getNorm() [1/2]. double RooAbsPdf::getNorm ; (; const RooArgSet & ; nset); const. inline . Get normalisation term needed to normalise the raw values returned by getVal(). ; Note that getVal(normalisationVariables) will automatically apply the normalisation term returned here. Parameters. nsetSet of variables to normalise over. . Definition at line 195 of file RooAbs",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsPdf.html:127657,configurat,configuration,127657,doc/master/classRooAbsPdf.html,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html,3,['configurat'],['configuration']
Deployability,"whenever distribution parameters have been changed.; 122 Note that the method string can contain in addition to the method name all the specific method; 123 parameters specified using the UNURAN method string API.; 124 For example a valid string can be `""method=arou; max_segments=1000; max_sqhratio = 0.9""`; 125 */; 126 bool Init(const TUnuranContDist & distr, const std::string & method = ""auto"");; 127 ; 128 /**; 129 Initialize method for continuous multi-dimensional distribution.; 130 User must provide a distribution object (which is copied inside) and a string for a method.; 131 For the list of available method for multivariate cont. distribution see the; 132 <A href=""http://statmath.wu-wien.ac.at/unuran/doc/unuran.html#Methods_005ffor_005fCVEC"">UnuRan doc</A>; 133 A re-initialization is needed whenever distribution parameters have been changed.; 134 ; 135 The default method used for multi-dimensional distributions is ""vnrou""; 136 Note that some of the multi-dimensional continuous distribution methods like ""hitro"" are based on Markov-CHain sampler and; 137 they are much faster for sampling but require more time to converge. Furthermore, since they are Markov-Chain methods their; 138 generated sample values are correlated and cannot be used as i.i.d., one can instead use the obtained sample distribution.; 139 (see also the ROOT issue: #10222 ).; 140 ; 141 */; 142 bool Init(const TUnuranMultiContDist & distr, const std::string & method = ""vnrou"");; 143 ; 144 ; 145 /**; 146 Initialize method for continuous one-dimensional discrete distribution.; 147 User must provide a distribution object (which is copied inside) and a string for a method.; 148 For the list of available method for 1D discrete distribution see the; 149 <A href=""http://statmath.wu-wien.ac.at/unuran/doc/unuran.html#Methods_005ffor_005fDISCR"">UnuRan doc</A>; 150 A re-initialization is needed whenever distribution parameters have been changed.; 151 ; 152 */; 153 bool Init(const TUnuranDiscrDist & distr, co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TUnuran_8h_source.html:5135,continuous,continuous,5135,doc/master/TUnuran_8h_source.html,https://root.cern,https://root.cern/doc/master/TUnuran_8h_source.html,1,['continuous'],['continuous']
Deployability,"which have one additional level of sub-branches). The only other way the depth increases is when the top-level branch has a split class data member, in that case the constructor will create a sub-branch for it. In other words, the interior nodes of the branch tree are all either: base class nodes; split class nodes which are direct sub-branches of top-level nodes (created by TClass::Bronch usually); or TClonesArray or STL container master nodes.; Note: The exception to the above is for the top-level branches, Tree::Bronch creates nodes for everything in that case, except for a TObject base class of a class which has the can ignore tobject streamer flag set. ; Definition at line 6212 of file TBranchElement.cxx. ◆ UpdateFile(). void TBranchElement::UpdateFile ; (; ). overridevirtual . Refresh the value of fDirectory (i.e. ; where this branch writes/reads its buffers) with the current value of fTree->GetCurrentFile unless this branch has been redirected to a different file. Also update the sub-branches. ; Reimplemented from TBranch.; Definition at line 6424 of file TBranchElement.cxx. ◆ ValidateAddress(). void TBranchElement::ValidateAddress ; (; ); const. inlineprotected . Definition at line 264 of file TBranchElement.h. Friends And Related Symbol Documentation. ◆ TLeafElement. friend class TLeafElement. friend . Definition at line 43 of file TBranchElement.h. ◆ TTreeCloner. friend class TTreeCloner. friend . Definition at line 42 of file TBranchElement.h. Member Data Documentation. ◆ fBranchClass. TClassRef TBranchElement::fBranchClass. protected . ! Reference to class definition in fClassName ; Definition at line 94 of file TBranchElement.h. ◆ fBranchCount. TBranchElement* TBranchElement::fBranchCount. protected . pointer to primary branchcount branch ; Definition at line 83 of file TBranchElement.h. ◆ fBranchCount2. TBranchElement* TBranchElement::fBranchCount2. protected . pointer to secondary branchcount branch ; Definition at line 84 of file TBranchElement.h. ◆ ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBranchElement.html:78134,update,update,78134,doc/master/classTBranchElement.html,https://root.cern,https://root.cern/doc/master/classTBranchElement.html,1,['update'],['update']
Deployability,winding char text const char depth char const char Int_t count const char ColorStruct_t color const char Pixmap_t Pixmap_t PictureAttributes_t attr const char char ret_data h unsigned char height h Atom_t Int_t ULong_t ULong_t unsigned char prop_list Atom_t Atom_t Atom_t Time_t typeDefinition TGWin32VirtualXProxy.cxx:249; namechar name[80]Definition TGX11.cxx:110; TVirtualRWMutex.h; R__WRITE_LOCKGUARD#define R__WRITE_LOCKGUARD(mutex)Definition TVirtualRWMutex.h:157; R__READ_LOCKGUARD#define R__READ_LOCKGUARD(mutex)Definition TVirtualRWMutex.h:154; ROOT::Math::GenAlgoOptions::PrintAllDefaultstatic void PrintAllDefault(std::ostream &os=std::cout)print all the default optionsDefinition GenAlgoOptions.cxx:67; ROOT::Math::GenAlgoOptions::Defaultstatic IOptions & Default(const char *algoname)Definition GenAlgoOptions.cxx:55; ROOT::Math::GenAlgoOptions::FindDefaultstatic IOptions * FindDefault(const char *algoname)Definition GenAlgoOptions.cxx:48; ROOT::Math::IOptionsGeneric interface for defining configuration options of a numerical algorithm.Definition IOptions.h:28; ROOT::Math::IOptions::Clonevirtual IOptions * Clone() const =0; ROOT::Math::IOptions::Printvirtual void Print(std::ostream &=std::cout) constprint optionsDefinition IOptions.cxx:56; ROOT::Math::MinimizerOptionsMinimizer options.Definition MinimizerOptions.h:40; ROOT::Math::MinimizerOptions::operator=MinimizerOptions & operator=(const MinimizerOptions &opt)assignment operatorsDefinition MinimizerOptions.cxx:151; ROOT::Math::MinimizerOptions::DefaultPrintLevelstatic int DefaultPrintLevel()Definition MinimizerOptions.cxx:97; ROOT::Math::MinimizerOptions::DefaultPrecisionstatic double DefaultPrecision()Definition MinimizerOptions.cxx:93; ROOT::Math::MinimizerOptions::Defaultstatic ROOT::Math::IOptions & Default(const char *name)Retrieve extra options for a given minimizer name.Definition MinimizerOptions.cxx:234; ROOT::Math::MinimizerOptions::SetDefaultMaxFunctionCallsstatic void SetDefaultMaxFunctionCalls(int m,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MinimizerOptions_8cxx_source.html:11383,configurat,configuration,11383,doc/master/MinimizerOptions_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MinimizerOptions_8cxx_source.html,1,['configurat'],['configuration']
Deployability,window needs to be redrawn; GContext_tTGButton::fNormGCgraphics context used for drawing button; UInt_tTGFrame::fOptionsframe options; const TGWindow*TGWindow::fParentParent window; Bool_tTGTextButton::fPrevStateOnbit to save previos state On/Off; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; EButtonStateTGButton::fStatebutton state; Bool_tTGTextButton::fStateOnbit to save the state across disable/enable; Bool_tTGButton::fStayDowntrue if button has to stay down; UInt_tTGButton::fTHeightbutton height; TGTextLayout*TGTextButton::fTLayouttext layout; Int_tTGTextButton::fTModetext justify mode; UInt_tTGButton::fTWidthbutton width; TGToolTip*TGButton::fTiptool tip associated with button; void*TGButton::fUserDatapointer to user data structure; Int_tTGWidget::fWidgetFlagswidget status flags (OR of EWidgetStatus); Int_tTGWidget::fWidgetIdthe widget id (used for event processing); UInt_tTGFrame::fWidthframe width; Int_tTGTextButton::fWrapLengthwrap length; Int_tTGFrame::fXframe x position; Int_tTGFrame::fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static const TGFont*TGTextButton::fgDefaultFont; static Pixel_tTGFrame::fgDefaultFrameBackground; static const TGGC*TGButton::fgDefaultGC; static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGButton::fgHibckgndGC; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static Window_tTGButton::fgReleaseBtnthe last released button; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel.,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveGedNameTextButton.html:21181,release,released,21181,root/html528/TEveGedNameTextButton.html,https://root.cern,https://root.cern/root/html528/TEveGedNameTextButton.html,1,['release'],['released']
Deployability,"with __attribute__((unused)).; 302 * On the other hand, if the function is marked with this attribute,; 303 * but is used, the compiler raises a completely idiotic; 304 * ""used-but-marked-unused"" warning - and; 305 * #pragma GCC diagnostic ignored ""-Wused-but-marked-unused""; 306 * raises error: unknown option after ""#pragma GCC diagnostic"".; 307 * Disable this warning completely, until the GCC guys sober up; 308 * again.; 309 */; 310 ; 311#pragma GCC diagnostic ignored ""-Wunused-function""; 312 ; 313#define FUNCTION_MAY_BE_UNUSED /* __attribute__((unused)) */; 314 ; 315#else; 316#define FUNCTION_MAY_BE_UNUSED; 317#endif; 318 ; 319 ; 320/* Some ANSI #includes are not available on Windows CE and Zephyr */; 321#if !defined(_WIN32_WCE) && !defined(__ZEPHYR__); 322#include <errno.h>; 323#include <fcntl.h>; 324#include <signal.h>; 325#include <stdlib.h>; 326#include <sys/stat.h>; 327#include <sys/types.h>; 328#endif /* !_WIN32_WCE */; 329 ; 330 ; 331#if defined(__clang__); 332/* When using -Weverything, clang does not accept it's own headers; 333 * in a release build configuration. Disable what is too much in; 334 * -Weverything. */; 335#pragma clang diagnostic ignored ""-Wdisabled-macro-expansion""; 336#endif; 337 ; 338#if defined(__GNUC__) || defined(__MINGW32__); 339/* Who on earth came to the conclusion, using __DATE__ should rise; 340 * an ""expansion of date or time macro is not reproducible""; 341 * warning. That's exactly what was intended by using this macro.; 342 * Just disable this nonsense warning. */; 343 ; 344/* And disabling them does not work either:; 345 * #pragma clang diagnostic ignored ""-Wno-error=date-time""; 346 * #pragma clang diagnostic ignored ""-Wdate-time""; 347 * So we just have to disable ALL warnings for some lines; 348 * of code.; 349 * This seems to be a known GCC bug, not resolved since 2012:; 350 * https://gcc.gnu.org/bugzilla/show_bug.cgi?id=53431; 351 */; 352#endif; 353 ; 354 ; 355#if defined(__MACH__) /* Apple OSX section */; 356 ; 357#if defi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:12075,release,release,12075,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,4,"['configurat', 'release']","['configuration', 'release']"
Deployability,"with an array x and weights w. ; Parameters. [in]ntimesnumber of entries in arrays x and w (array size must be ntimes*stride) ; [in]xarray of values to be histogrammed ; [in]warray of weighs ; [in]stridestep size through arrays x and w. If the weight is not equal to 1, the storage of the sum of squares of weights is automatically triggered and the sum of the squares of weights is incremented by \( w^2 \) in the bin corresponding to x. if w is NULL each entry is assumed a weight=1 ; Reimplemented from TH1.; Reimplemented in TH2Poly.; Definition at line 84 of file TH2.h. ◆ FillRandom() [1/2]. void TH2::FillRandom ; (; const char * ; fname, . Int_t ; ntimes = 5000, . TRandom * ; rng = nullptr . ). overridevirtual . Fill histogram following distribution in function fname. ; Parameters. fname: Function name used for filling the histogram ; ntimes: number of times the histogram is filled ; rng: (optional) Random number generator used to sample. The distribution contained in the function fname (TF2) is integrated over the channel contents. It is normalized to 1. Getting one random number implies:; Generating a random number between 0 and 1 (say r1); Look in which bin in the normalized integral r1 corresponds to; Fill histogram channel ntimes random numbers are generated. One can also call TF2::GetRandom2 to get a random variate from a function. ; Reimplemented from TH1.; Definition at line 714 of file TH2.cxx. ◆ FillRandom() [2/2]. void TH2::FillRandom ; (; TH1 * ; h, . Int_t ; ntimes = 5000, . TRandom * ; rng = nullptr . ). overridevirtual . Fill histogram following distribution in histogram h. ; Parameters. h: Histogram pointer used for sampling random number ; ntimes: number of times the histogram is filled ; rng: (optional) Random number generator used for sampling. The distribution contained in the histogram h (TH2) is integrated over the channel contents. It is normalized to 1. Getting one random number implies:; Generating a random number between 0 and 1 (say r1); L",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH2.html:72990,integrat,integrated,72990,doc/master/classTH2.html,https://root.cern,https://root.cern/doc/master/classTH2.html,1,['integrat'],['integrated']
Deployability,"with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooCFunction4Ref<double,double,double,double,bool>funcFunction pointer reference; RooRealProxywArgument reference; RooRealProxyxArgument reference; RooRealProxyyArgument reference; RooRealProxyzArgument reference.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooCFunction4PdfBinding_double_double_double_double_bool_.html:42679,integrat,integrator,42679,root/html534/RooCFunction4PdfBinding_double_double_double_double_bool_.html,https://root.cern,https://root.cern/root/html534/RooCFunction4PdfBinding_double_double_double_double_bool_.html,2,"['configurat', 'integrat']","['configuration', 'integrator']"
Deployability,"with name. TCollection * GetListOfGlobals(Bool_t load = kFALSE); Return list containing the TGlobals currently defined.; Since globals are created and deleted during execution of the; program, we need to update the list of globals every time we; execute this method. However, when calling this function in; a (tight) loop where no interpreter symbols will be created; you can set load=kFALSE (default). TCollection * GetListOfGlobalFunctions(Bool_t load = kFALSE); Return list containing the TFunctions currently defined.; Since functions are created and deleted during execution of the; program, we need to update the list of functions every time we; execute this method. However, when calling this function in; a (tight) loop where no interpreter symbols will be created; you can set load=kFALSE (default). TCollection * GetListOfTypes(Bool_t load = kFALSE); Return list containing all TDataTypes (typedefs) currently defined.; Since types can be added and removed during execution of the; program, we need to update the list of types every time we; execute this method. However, when calling this function in; a (tight) loop where no new types will be created; you can set load=kFALSE (default). void Idle(UInt_t idleTimeInSec, const char* command = 0); Execute command when system has been idle for idleTimeInSec seconds. Int_t IgnoreInclude(const char* fname, const char* expandedfname); Return 1 if the given include file correspond to a class that has; been loaded through a compiled dictionnary. void InitSystem(); Initialize operating system interface. void InitThreads(); Load and initialize thread library. TClass * LoadClass(const char* name, Bool_t silent = kFALSE) const; Helper function used by TClass::GetClass().; This function attempts to load the dictionary for 'classname'; either from the TClassTable or from the list of generator.; If silent is 'true', do not warn about missing dictionary for the class.; (typically used for class that are used only for transient members). Int",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TROOT.html:25564,update,update,25564,root/html528/TROOT.html,https://root.cern,https://root.cern/root/html528/TROOT.html,1,['update'],['update']
Deployability,"with name. TCollection * GetListOfGlobals(Bool_t load = kFALSE); Return list containing the TGlobals currently defined.; Since globals are created and deleted during execution of the; program, we need to update the list of globals every time we; execute this method. However, when calling this function in; a (tight) loop where no interpreter symbols will be created; you can set load=kFALSE (default). TCollection * GetListOfGlobalFunctions(Bool_t load = kFALSE); Return list containing the TFunctions currently defined.; Since functions are created and deleted during execution of the; program, we need to update the list of functions every time we; execute this method. However, when calling this function in; a (tight) loop where no interpreter symbols will be created; you can set load=kFALSE (default). TCollection * GetListOfTypes(Bool_t load = kFALSE); Return list containing all TDataTypes (typedefs) currently defined.; Since types can be added and removed during execution of the; program, we need to update the list of types every time we; execute this method. However, when calling this function in; a (tight) loop where no new types will be created; you can set load=kFALSE (default). void Idle(UInt_t idleTimeInSec, const char* command = 0); Execute command when system has been idle for idleTimeInSec seconds. Int_t IgnoreInclude(const char* fname, const char* expandedfname); Return 1 if the name of the given include file corresponds to a class that; is known to ROOT, e.g. ""TLorentzVector.h"" versus TLorentzVector. void InitSystem(); Initialize operating system interface. void InitThreads(); Load and initialize thread library. TClass * LoadClass(const char* name, Bool_t silent = kFALSE) const; Helper function used by TClass::GetClass().; This function attempts to load the dictionary for 'classname'; either from the TClassTable or from the list of generator.; If silent is 'true', do not warn about missing dictionary for the class.; (typically used for class that are used on",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TROOT.html:26100,update,update,26100,root/html530/TROOT.html,https://root.cern,https://root.cern/root/html530/TROOT.html,3,['update'],['update']
Deployability,"with optimised PDFs speed up between 4x and 16x.; The fast BatchMode now also works in combination with multi processing (NumCPU) and with binned data (RooDataHist).; See Demo notebook in SWAN, EPJ Web Conf. 245 (2020) 06007, arxiv:2012.02746.; RooBatchCompute Library; The library that contains the optimised computation functions is called RooBatchCompute. The PDFs contained in this library are highly optimized, and there is currently work in progress for further optimization using CUDA and multi-threaded computations. If you use PDFs that are not part of the official RooFit, you are very well invited to add them to RooFit by submitting a ticket or a pull request.; Benefiting from batch computations by overriding evaluateSpan(); For PDFs that are not part of RooFit, it is possible to benefit from batch computations without vector extensions. To do so, consult the RooBatchCompute readme.; Migrating PDFs that override the deprecated evaluateBatch(); In case you have created a custom PDF which overrides evaluateBatch(), please follow these steps to update your code to the newest version:. Change the signature of the function both in the source and header file:. - RooSpan<double> RooGaussian::evaluateBatch(std::size_t begin, std::size_t batchSize) const; + RooSpan<double> evaluateSpan(RooBatchCompute::RunContext& evalData, const RooArgSet* normSet) const. Include RunContext.h and BracketAdapter.h.; Use getValues() instead of getValBatch() to retrieve a RooSpan for the data of every value. - auto xData = x.getValBatch(begin, batchSize);; + auto xData = x->getValues(evalData,normSet);. Retrieve the number of events by getting the maximum size of the input spans. size_t nEvents=0;; for (auto& i:{xData,meanData,sigmaData}); nEvents = std::max(nEvents,i.size());. Create the output batch by calling RunContext::makeBatch(). - auto output = _batchData.makeWritableBatchUnInit(begin, batchSize);; + auto output = evalData.makeBatch(this, nEvents);. DO NOT use RooSpan::isBatch() and",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v624/release-notes.html:19267,update,update,19267,doc/v624/release-notes.html,https://root.cern,https://root.cern/doc/v624/release-notes.html,1,['update'],['update']
Deployability,"with reading old files - as you correctly pointed out this is one of the most crucial ingredients of this project.; Cheers, Axel. Submitted by Anonymous (not verified) on Thu, 07/23/2015 - 21:50 Permalink . Thank you for clarifying a . Thank you for clarifying a transition plan, it is quite a reasonable approach. I just want to add a personal request to your wish list. Would it be possible to improve IO speed for reading? Very often analysis code is constrained by CPU/disk access limits when reading ntuples. The speed varies from ~100kHz for a tree with few float branches to ~200 Hz for complex data structure. A factor of few improvement for complex data can be a difference between requiring just one machine or a small farm. Submitted by Anonymous (not verified) on Thu, 07/23/2015 - 21:51 Permalink . Re: I/O Performance . Hi ROOT User,; We have dramatically improved the I/O performance over the last two years. If you use the latest production release also for writing data you might be able to see a performance improvement of an order of magnitude compared to e.g. 5.26, both in real and CPU time! See e.g. this blog entry.; We have been comparing the performance of ROOT I/O with competitors like Google ProtoBuf; we know exactly where we spend extra time and why, e.g. for schema evolution, proper C++ type support, introspection, pointers.; On the other hand, are you sure you make use of all the performance features ROOT offers? Did you enable the tree cache (on by default for PROOF and one tree per file, off - for now, still - otherwise)? Do you only read the branches you need? I am working on a new TTree read access class that should simplify all of that considerably (and is type safe - no more void*&!); maybe I should take your comment as an invitation to speed up :-); Cheers, Axel. Submitted by Anonymous (not verified) on Thu, 07/23/2015 - 21:51 Permalink . Re: Interpreters . Hi ROOT user,; Thanks for your comments - they are excellent!; Your scenario would probably",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/blog/do-we-need-yet-another-custom-c-interpreter.html:15319,release,release,15319,d/blog/do-we-need-yet-another-custom-c-interpreter.html,https://root.cern,https://root.cern/d/blog/do-we-need-yet-another-custom-c-interpreter.html,1,['release'],['release']
Deployability,"wmat contains the number of atoms; of a given kind into the molecule of the compound.; In this case, wmat in output is changed to relative; weights. void Medium(Int_t& kmed, const char* name, Int_t nmat, Int_t isvol, Int_t ifield, Double_t fieldm, Double_t tmaxfd, Double_t stemax, Double_t deemax, Double_t epsil, Double_t stmin, Float_t* ubuf, Int_t nbuf); The same as previous but in double precision; Define a medium.; kmed tracking medium number assigned; name tracking medium name; nmat material number; isvol sensitive volume flag; ifield magnetic field:; - ifield = 0 if no magnetic field;; - ifield = -1 if user decision in guswim;; - ifield = 1 if tracking performed with g3rkuta;; - ifield = 2 if tracking; fieldm max. field value (kilogauss); tmaxfd max. angle due to field (deg/step); stemax max. step allowed; deemax max. fraction of energy lost in a step; epsil tracking precision (cm); stmin min. step due to continuous processes (cm); ubuf pointer to an array of user words; nbuf number of user words; performed with g3helix; ifield = 3 if tracking performed with g3helx3. void Matrix(Int_t& krot, Double_t thetaX, Double_t phiX, Double_t thetaY, Double_t phiY, Double_t thetaZ, Double_t phiZ); The same as previous but in double precision; Define a rotation matrix; krot rotation matrix number assigned; thetaX polar angle for axis X; phiX azimuthal angle for axis X; thetaY polar angle for axis Y; phiY azimuthal angle for axis Y; thetaZ polar angle for axis Z; phiZ azimuthal angle for axis Z. Int_t Gsvolu(const char* name, const char* shape, Int_t nmed, Double_t* upar, Int_t np). functions from GGEOM. Create a new volume; name Volume name; shape Volume type; nmed Tracking medium number; np Number of shape parameters; upar Vector containing shape parameters; The same as previous but in double precision. void Gsdvn2(const char* name, const char* mother, Int_t ndiv, Int_t iaxis, Double_t c0i, Int_t numed); Create a new volume by dividing an existing one.; It divides a previ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TVirtualMCGeometry.html:10884,continuous,continuous,10884,root/html528/TVirtualMCGeometry.html,https://root.cern,https://root.cern/root/html528/TVirtualMCGeometry.html,6,['continuous'],['continuous']
Deployability,"wmode=Extended, Int_t nEvalError=-1, Int_t doEEVal=false, double eeVal=0.0);  Create a 1-dim curve of the value of the specified real-valued expression as a function of x. ;  ;  RooCurve (const char *name, const char *title, const RooCurve &c1, const RooCurve &c2, double scale1=1., double scale2=1.);  Constructor of a curve as sum of two other curves. ;  ;  RooCurve (const RooAbsReal &func, RooAbsRealLValue &x, double xlo, double xhi, Int_t xbins, double scaleFactor=1, const RooArgSet *normVars=nullptr, double prec=1e-3, double resolution=1e-3, bool shiftToZero=false, WingMode wmode=Extended, Int_t nEvalError=-1, Int_t doEEVal=false, double eeVal=0.0, bool showProgress=false);  Create a 1-dim curve of the value of the specified real-valued expression as a function of x. ;  ;  ~RooCurve () override;  ; void addPoint (double x, double y);  Add a point with the specified coordinates. Update our y-axis limits. ;  ; double average (double lo, double hi) const;  Return average curve value in [xFirst,xLast] by integrating curve between points and dividing by xLast-xFirst. ;  ; double chiSquare (const RooHist &hist, int nFitParam) const;  Calculate the chi^2/NDOF of this curve with respect to the histogram 'hist' accounting nFitParam floating parameters in case the curve was the result of a fit. ;  ; Int_t findPoint (double value, double tolerance=1e-10) const;  Find the nearest point to xvalue. ;  ; double getFitRangeBinW () const override;  Get the bin width associated with this plotable object. ;  ; double getFitRangeNEvt () const override;  Return the number of events associated with the plotable object, it is always 1 for curves. ;  ; double getFitRangeNEvt (double xlo, double xhi) const override;  Return the number of events associated with the plotable object, in the given range. ;  ; double interpolate (double x, double tolerance=1e-10) const;  Return linearly interpolated value of curve at xvalue. ;  ; TClass * IsA () const override;  ; bool isIdentical (const RooC",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCurve.html:3947,integrat,integrating,3947,doc/master/classRooCurve.html,https://root.cern,https://root.cern/doc/master/classRooCurve.html,1,['integrat'],['integrating']
Deployability,"wned by _normMgr); RooObjCacheManagerRooAbsPdf::_normMgrThe cache manager; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; Bool_t_ownBasisFlag indicating ownership of _basis ; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooRealProxyxDependent/convolution variable.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooResolutionModel.html:40576,configurat,configuration,40576,root/html526/RooResolutionModel.html,https://root.cern,https://root.cern/root/html526/RooResolutionModel.html,3,"['configurat', 'integrat']","['configuration', 'integrator']"
Deployability,"wningPtr< RooAbsReal > RooAbsReal::createScanRI ; (; const RooArgSet & ; iset, . const RooArgSet & ; nset, . Int_t ; numScanBins, . Int_t ; intOrder . ). Utility function for createRunningIntegral that construct an object implementing the numeric scanning technique for calculating the running integral. ; Definition at line 3810 of file RooAbsReal.cxx. ◆ DeclFileName(). static const char * RooAbsReal::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 548 of file RooAbsReal.h. ◆ defaultErrorLevel(). virtual double RooAbsReal::defaultErrorLevel ; (; ); const. inlinevirtual . Reimplemented in RooAddition, RooFit::TestStatistics::RooRealL, RooFormulaVar, RooFit::Experimental::RooFuncWrapper, RooChi2Var, RooNLLVar, RooXYChi2Var, and ProgressMonitor.; Definition at line 248 of file RooAbsReal.h. ◆ defaultIntegratorConfig(). RooNumIntConfig * RooAbsReal::defaultIntegratorConfig ; (; ). static . Returns the default numeric integration configuration for all RooAbsReals. ; Definition at line 3272 of file RooAbsReal.cxx. ◆ derivative() [1/2]. RooDerivative * RooAbsReal::derivative ; (; RooRealVar & ; obs, . const RooArgSet & ; normSet, . Int_t ; order, . double ; eps = 0.001 . ). Return function representing first, second or third order derivative of this function. ; Definition at line 3999 of file RooAbsReal.cxx. ◆ derivative() [2/2]. RooDerivative * RooAbsReal::derivative ; (; RooRealVar & ; obs, . Int_t ; order = 1, . double ; eps = 0.001 . ). Return function representing first, second or third order derivative of this function. ; Definition at line 3987 of file RooAbsReal.cxx. ◆ doEval(). void RooAbsReal::doEval ; (; RooFit::EvalContext & ; ctx); const. virtual . Base function for computing multiple values of a RooAbsReal. ; Parameters. ctxAn evaluation context object . Reimplemented in RooStats::HistFactory::FlexibleInterpVar, ParamHistFunc, PiecewiseInterpolation, RooArgusBG, RooBernstein, RooBifurGauss, RooBM",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsReal.html:96987,integrat,integration,96987,doc/master/classRooAbsReal.html,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html,2,"['configurat', 'integrat']","['configuration', 'integration']"
Deployability,"wningPtr< RooAbsReal > RooAbsReal::createScanRI ; (; const RooArgSet & ; iset, . const RooArgSet & ; nset, . Int_t ; numScanBins, . Int_t ; intOrder . ). Utility function for createRunningIntegral that construct an object implementing the numeric scanning technique for calculating the running integral. ; Definition at line 3886 of file RooAbsReal.cxx. ◆ DeclFileName(). static const char * RooAbsReal::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 558 of file RooAbsReal.h. ◆ defaultErrorLevel(). virtual double RooAbsReal::defaultErrorLevel ; (; ); const. inlinevirtual . Reimplemented in RooAddition, RooChi2Var, RooFit::TestStatistics::RooRealL, RooFormulaVar, RooFit::Experimental::RooFuncWrapper, RooNLLVar, RooXYChi2Var, and ProgressMonitor.; Definition at line 248 of file RooAbsReal.h. ◆ defaultIntegratorConfig(). RooNumIntConfig * RooAbsReal::defaultIntegratorConfig ; (; ). static . Returns the default numeric integration configuration for all RooAbsReals. ; Definition at line 3354 of file RooAbsReal.cxx. ◆ derivative() [1/2]. RooDerivative * RooAbsReal::derivative ; (; RooRealVar & ; obs, . const RooArgSet & ; normSet, . Int_t ; order, . double ; eps = 0.001 . ). Return function representing first, second or third order derivative of this function. ; Definition at line 4075 of file RooAbsReal.cxx. ◆ derivative() [2/2]. RooDerivative * RooAbsReal::derivative ; (; RooRealVar & ; obs, . Int_t ; order = 1, . double ; eps = 0.001 . ). Return function representing first, second or third order derivative of this function. ; Definition at line 4063 of file RooAbsReal.cxx. ◆ doEval(). void RooAbsReal::doEval ; (; RooFit::EvalContext & ; ctx); const. virtual . Base function for computing multiple values of a RooAbsReal. ; Parameters. ctxAn evaluation context object . Reimplemented in RooStats::HistFactory::FlexibleInterpVar, ParamHistFunc, PiecewiseInterpolation, RooArgusBG, RooBernstein, RooBifurGauss, RooBM",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classRooAbsReal.html:98255,integrat,integration,98255,doc/v632/classRooAbsReal.html,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html,2,"['configurat', 'integrat']","['configuration', 'integration']"
Deployability,"ws in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TAttTextEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor of text attributes GUI. ~TAttTextEditor(); Destructor of text editor. void ConnectSignals2Slots(); Connect signals to slots. void SetModel(TObject* obj); Pick up the values of used text attributes. void DoTextColor(Pixel_t color); Slot connected to the marker color. void DoTextAlphaColor(ULong_t p); Slot connected to the color with alpha. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Process message. TGComboBox* BuildFontSizeComboBox(TGFrame* parent, Int_t id); Create text size combo box. TGComboBox* BuildTextAlignComboBox(TGFrame* parent, Int_t id); Create text align combo box. void DoAlphaField(); Slot to set the alpha value from the entry field. void DoAlpha(); Slot to set the alpha value. void DoLiveAlpha(Int_t a); Slot to set alpha value online. void GetCurAlpha(); Slot to update alpha value on click on Slider. » Author: Ilka Antcheva 11/05/04 » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: root/ged:$Id$ » Last generated: 2015-03-12 16:37; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TAttTextEditor.html:21395,update,update,21395,root/html534/TAttTextEditor.html,https://root.cern,https://root.cern/root/html534/TAttTextEditor.html,1,['update'],['update']
Deployability,"wser is reloaded; load of widgets code only when really required (shorter startup time for RBrowser). JavaScript ROOT; Major JSROOT update to version 6. update all used libraries d3.js, three.js, MathJax.js, openui5; change to Promise based interface for all async methods, remove call-back arguments; change scripts names, core scripts name now JSRoot.core.js; unify function/methods naming conventions, many changes in method names; provide central code loader via JSROOT.require, supporting 4 different loading engines; many nice features and many bug fixes; see JSROOT v6 release notes. Class Reference Guide; One can now select a class’s documentation for a specific version. If a class does not exist in a given version, that version is grayed out, see for instance the documentation for ROOT::Experimental::RNTupleReader.; Build, Configuration and Testing Infrastructure. a new cmake variable, CMAKE_INSTALL_PYTHONDIR, has been added: it allows customization of the installation directory of ROOT’s python modules; the developer build option asserts is introduced to enable/disable asserts via the NDEBUG C/CXX flag. Asserts are always enabled for CMAKE_BUILD_TYPE=Debug and dev=ON. The previous behavior of the builds set via the CMAKE_BUILD_TYPE variable has not changed.; CMAKE_CXX_STANDARD, i.e. the C++ standard ROOT is built with, now defaults to the compiler default (or C++11 if the compiler default is older than that) rather than always defaulting to C++11. In turn this means that v6.24 is the first ROOT release for which ROOT’s pre-compiled binaries are not compiled with C++11 but with the default standard in use by the default system compiler. On Ubuntu 20.04, for example, the v6.24 pre-compiled binaries are now compiled with C++14 rather than C++11 as it happened for previous ROOT versions. Also see ROOT-10692. The following builtins have been updated:. VecCore 0.7.0; LZ4 1.9.3; openui5; Xrootd 4.12.8; Zstd 1.4.8. PyROOT. Deprecate TTree.AsMatrix in this release and mark",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v624/release-notes.html:29443,install,installation,29443,doc/v624/release-notes.html,https://root.cern,https://root.cern/doc/v624/release-notes.html,1,['install'],['installation']
Deployability,"x = px - gPad->XtoAbsPixel(gPad->XtoPad(fX[i]));; 2052 Int_t dpy = py - gPad->YtoAbsPixel(gPad->YtoPad(fY[i]));; 2053 if (dpx * dpx + dpy * dpy < 100) {; 2054 ipoint = i;; 2055 break;; 2056 }; 2057 }; 2058 return RemovePoint(ipoint);; 2059}; 2060 ; 2061////////////////////////////////////////////////////////////////////////////////; 2062/// Delete point number ipoint; 2063/// Returns index of removed point (or -1 if nothing was changed); 2064 ; 2065Int_t TGraph::RemovePoint(Int_t ipoint); 2066{; 2067 if ((ipoint < 0) || (ipoint >= fNpoints)); 2068 return -1;; 2069 ; 2070 Double_t **ps = ShrinkAndCopy(fNpoints - 1, ipoint);; 2071 CopyAndRelease(ps, ipoint + 1, fNpoints--, ipoint);; 2072 if (gPad) gPad->Modified();; 2073 return ipoint;; 2074}; 2075 ; 2076////////////////////////////////////////////////////////////////////////////////; 2077/// Save the graph as .csv, .tsv or .txt. In case of any other extension, fall; 2078/// back to TObject::SaveAs; 2079///; 2080/// The result can be immediately imported into Excel, gnuplot, Python or whatever,; 2081/// without the needing to install pyroot, etc.; 2082///; 2083/// \param filename the name of the file where to store the graph; 2084/// \param option some tuning options; 2085///; 2086/// The file extension defines the delimiter used:; 2087/// - `.csv` : comma; 2088/// - `.tsv` : tab; 2089/// - `.txt` : space; 2090///; 2091/// If option = ""title"" a title line is generated with the axis titles.; 2092 ; 2093void TGraph::SaveAs(const char *filename, Option_t *option) const; 2094{; 2095 char del = '\0';; 2096 TString ext = """";; 2097 TString fname = filename;; 2098 TString opt = option;; 2099 ; 2100 if (filename) {; 2101 if (fname.EndsWith("".csv"")) {del = ','; ext = ""csv"";}; 2102 else if (fname.EndsWith("".tsv"")) {del = '\t'; ext = ""tsv"";}; 2103 else if (fname.EndsWith("".txt"")) {del = ' '; ext = ""txt"";}; 2104 }; 2105 if (del) {; 2106 std::ofstream out;; 2107 out.open(filename, std::ios::out);; 2108 if (!out.good ()) {; 2109 Erro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraph_8cxx_source.html:74402,install,install,74402,doc/master/TGraph_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraph_8cxx_source.html,1,['install'],['install']
Deployability,"x of the polyline is found to be closer than 10; pixels. Thus the return value may depend on the ordering of points; in the polyline. Then looks for distances to the lines of the polyline. There is no; arbitrary cutoff; any distance may be found. Finally checks whether (px, py) is inside a closed and filled polyline.; (Must be EXACTLY closed. ""Filled"" means fill color and fill style are; both non-zero.) If so, returns zero. Returns 9999 if the polyline has no points. void Draw(Option_t* option = """"); Draw this polyline with its current attributes. void DrawPolyLine(Int_t n, Double_t* x, Double_t* y, Option_t* option = """"); Draw this polyline with new coordinates. void ExecuteEvent(Int_t event, Int_t px, Int_t py); Execute action corresponding to one event. This member function is called when a polyline is clicked with the locator. If Left button clicked on one of the line end points, this point; follows the cursor until button is released. if Middle button clicked, the line is moved parallel to itself; until the button is released. void ls(Option_t* option = """") const; List this polyline with its attributes.; The option string is ignored. Int_t Merge(TCollection* list); Merge polylines in the collection in this polyline. void Paint(Option_t* option = """"); Paint this polyline with its current attributes. void PaintPolyLine(Int_t n, Double_t* x, Double_t* y, Option_t* option = """"); Draw this polyline with new coordinates. If option = 'f' or 'F' the fill area is drawn.; The default is to draw the lines only. void PaintPolyLineNDC(Int_t n, Double_t* x, Double_t* y, Option_t* option = """"); Draw this polyline with new coordinates in NDC. void Print(Option_t* option = """") const; Dump this polyline with its attributes.; The option string is ignored. void SavePrimitive(ostream& out, Option_t* option = """"); Save primitive as a C++ statement(s) on output stream out. void SetNDC(Bool_t isNDC = kTRUE); Set NDC mode on if isNDC = kTRUE, off otherwise. Int_t SetNextPoint(Double_t ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TPolyLine.html:10010,release,released,10010,root/html528/TPolyLine.html,https://root.cern,https://root.cern/root/html528/TPolyLine.html,6,['release'],['released']
Deployability,"x) coef_k * Int(dy) [ basis_k (x) ResModel ].; _; where x is the set of coefficient dependents to be integrated; and y the set of basis function dependents to be integrated. For normalized integrals this becomes. sum_k Int(dx) coef_k * Int(dy) [ basis_k (x) ResModel ].; PDF = --------------------------------------------------------; sum_k Int(dv) coef_k * Int(dw) [ basis_k (x) ResModel ]. where x is the set of coefficient dependents to be integrated,; y the set of basis function dependents to be integrated,; v is the set of coefficient dependents over which is normalized and; w is the set of basis function dependents over which is normalized. Set x must be contained in v and set y must be contained in w. Int_t getCoefAnalyticalIntegral(Int_t coef, RooArgSet& allVars, RooArgSet& analVars, const char* rangeName = 0) const; Default implementation of function advertising integration capabilities. The interface is; similar to that of getAnalyticalIntegral except that an integer code is added that; designates the coefficient number for which the integration capabilities are requested. This default implementation advertises that no internal integrals are supported. Double_t coefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName = 0) const; Default implementation of function implementing advertised integrals. Only; the pass-through scenario (no integration) is implemented. Bool_t forceAnalyticalInt(const RooAbsArg& dep) const; This function forces RooRealIntegral to offer all integration dependents; to RooAbsAnaConvPdf::getAnalyticalIntegralWN() for consideration for; internal integration, if RooRealIntegral considers this to be unsafe (e.g. due; to hidden Jacobian terms). RooAbsAnaConvPdf will not attempt to actually integrate all these dependents; but feed them to the resolution models integration interface, which will; make the final determination on how to integrate these dependents. Double_t getCoefNorm(Int_t coefIdx, const RooArgSet* nset = 0, const char",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAbsAnaConvPdf.html:46435,integrat,integration,46435,root/html528/RooAbsAnaConvPdf.html,https://root.cern,https://root.cern/root/html528/RooAbsAnaConvPdf.html,3,['integrat'],['integration']
Deployability,"x) coef_k * Int(dy) [ basis_k (x) ResModel ].; _; where x is the set of coefficient dependents to be integrated; and y the set of basis function dependents to be integrated. For normalized integrals this becomes. sum_k Int(dx) coef_k * Int(dy) [ basis_k (x) ResModel ].; PDF = --------------------------------------------------------; sum_k Int(dv) coef_k * Int(dw) [ basis_k (x) ResModel ]. where x is the set of coefficient dependents to be integrated,; y the set of basis function dependents to be integrated,; v is the set of coefficient dependents over which is normalized and; w is the set of basis function dependents over which is normalized. Set x must be contained in v and set y must be contained in w. Int_t getCoefAnalyticalIntegral(Int_t coef, RooArgSet& allVars, RooArgSet& analVars, const char* rangeName = 0) const; Default implementation of function advertising integration capabilities. The interface is; similar to that of getAnalyticalIntegral except that an integer code is added that; designates the coefficient number for which the integration capabilities are requested. This default implementation advertises that no internal integrals are supported. Double_t coefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName = 0) const; Default implementation of function implementing advertised integrals. Only; the pass-through scenario (no integration) is implemented. Bool_t forceAnalyticalInt(const RooAbsArg& dep) const; This function forces RooRealIntegral to offer all integration dependents; to RooAbsAnaConvPdf::getAnalyticalIntegralWN() for consideration for; internal integration, if RooRealIntegral considers this to be unsafe (e.g. due; to hidden Jacobian terms). RooAbsAnaConvPdf will not attempt to actually integrate all these dependents; but feed them to the resolution models integration interface, which will; make the final determination on how to integrate these dependents. Double_t getCoefNorm(Int_t coefIdx, const RooArgSet* nset, const TNamed* ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsAnaConvPdf.html:49823,integrat,integration,49823,root/html534/RooAbsAnaConvPdf.html,https://root.cern,https://root.cern/root/html534/RooAbsAnaConvPdf.html,3,['integrat'],['integration']
Deployability,"x) coef_k * Int(dy) [ basis_k (x) ResModel ].; _; where x is the set of coefficient dependents to be integrated; and y the set of basis function dependents to be integrated. For normalized integrals this becomes. sum_k Int(dx) coef_k * Int(dy) [ basis_k (x) ResModel ].; PDF = --------------------------------------------------------; sum_k Int(dv) coef_k * Int(dw) [ basis_k (x) ResModel ]. where x is the set of coefficient dependents to be integrated,; y the set of basis function dependents to be integrated,; v is the set of coefficient dependents over which is normalized and; w is the set of basis function dependents over which is normalized. Set x must be contained in v and set y must be contained in w. Int_t getCoefAnalyticalIntegral(Int_t coef, RooArgSet& allVars, RooArgSet& analVars, const char* rangeName = 0) const; Default implementation of function advertising integration capabilities. The interface is; similar to that of getAnalyticalIntegral except that an integer code is added that; designates the coefficient number for which the integration capabilities are requested. This default implementation advertises that no internal integrals are supported. Double_t coefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName = 0) const; Default implementation of function implementing advertised integrals. Only; the pass-through scenario (no integration) is implemented. Bool_t forceAnalyticalInt(const RooAbsArg& dep) const; This function forces RooRealIntegral to offer all integration dependents; to RooAbsAnaConvPdf::getAnalyticalIntegralWN() for consideration for; internal integration, if RooRealIntegral considers this to be unsafe (e.g. due; to hidden Jacobian terms). RooAbsAnaConvPdf will not attempt to actually integrate all these dependents; but feed them to the resolution models integration interface, which will; make the final determination on how to integrate these dependents. Double_t getCoefNorm(Int_t coefIdx, const RooArgSet* nset, const char* ra",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsAnaConvPdf.html:45959,integrat,integration,45959,root/html526/RooAbsAnaConvPdf.html,https://root.cern,https://root.cern/root/html526/RooAbsAnaConvPdf.html,1,['integrat'],['integration']
Deployability,"x) override;  Set the minimum and maximum entry number to be processed this information helps to optimize the number of baskets to read when prefetching the branch buffers. ;  ; void SetUnzipBufferSize (Long64_t bufferSize);  Sets the size for the unzipping cache... by default it should be two times the size of the prefetching cache. ;  ; void SetUnzipGroupSize (Int_t groupSize);  ; void StopLearningPhase () override;  It's the same as TTreeCache::StopLearningPhase but we guarantee that we start the unzipping just after getting the buffers. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Int_t UnzipBuffer (char **dest, char *src);  Unzips a ROOT specific buffer... by reading the header at the beginning. ;  ; Int_t UnzipCache (Int_t index);  This inflates a basket in the cache. ;  ; void UpdateBranches (TTree *tree) override;  update pointer to current Tree and recompute pointers to the branches in the cache ;  ;  Public Member Functions inherited from TTreeCache;  TTreeCache ();  Default Constructor. ;  ;  TTreeCache (TTree *tree, Int_t buffersize=0);  Constructor. ;  ;  ~TTreeCache () override;  Destructor. (in general called by the TFile destructor) ;  ; virtual void Disable ();  ; virtual Int_t DropBranch (const char *branch, bool subbranches=false);  Remove a branch to the list of branches to be stored in the cache this is to be used by user (thats why we pass the name of the branch). ;  ; virtual Int_t DropBranch (TBranch *b, bool subbranches=false);  Remove a branch to the list of branches to be stored in the cache this function is called by TBranch::GetBasket. ;  ; virtual void Enable ();  ; const TObjArray * GetCachedBranches () const;  ; EPrefillType GetConfiguredPrefillType () const;  Return the desired prefill type from the environment or resource variable. ;  ; Double_t GetEfficiency () const;  Give the total efficiency of the primary cache... defined as th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTTreeCacheUnzip.html:4219,update,update,4219,doc/v632/classTTreeCacheUnzip.html,https://root.cern,https://root.cern/doc/v632/classTTreeCacheUnzip.html,2,['update'],['update']
Deployability,"x. ◆ OnMouseOver(). void TEveViewerList::OnMouseOver ; (; TObject * ; obj, . UInt_t ; state . ). Slot for global TGLViewer::MouseOver() signal. ; The attempt is made to determine the TEveElement being represented by the physical shape and global highlight is updated accordingly.; If TEveElement::IsPickable() returns false, the element is not highlighted.; Highlight is always in single-selection mode. ; Definition at line 539 of file TEveViewer.cxx. ◆ OnReClicked(). void TEveViewerList::OnReClicked ; (; TObject * ; obj, . UInt_t ; button, . UInt_t ; state . ). Slot for global TGLViewer::ReClicked(). ; The obj is dyn-casted to the TEveElement and global selection is updated accordingly.; If TEveElement::IsPickable() returns false, the element is not selected. ; Definition at line 622 of file TEveViewer.cxx. ◆ OnReMouseOver(). void TEveViewerList::OnReMouseOver ; (; TObject * ; obj, . UInt_t ; state . ). Slot for global TGLViewer::ReMouseOver(). ; The obj is dyn-casted to the TEveElement and global selection is updated accordingly.; If TEveElement::IsPickable() returns false, the element is not selected. ; Definition at line 561 of file TEveViewer.cxx. ◆ OnUnClicked(). void TEveViewerList::OnUnClicked ; (; TObject * ; obj, . UInt_t ; button, . UInt_t ; state . ). Slot for global TGLViewer::UnClicked(). ; The obj is dyn-casted to the TEveElement and global selection is updated accordingly.; If TEveElement::IsPickable() returns false, the element is not selected. ; Definition at line 639 of file TEveViewer.cxx. ◆ OnUnMouseOver(). void TEveViewerList::OnUnMouseOver ; (; TObject * ; obj, . UInt_t ; state . ). Slot for global TGLViewer::UnMouseOver(). ; The obj is dyn-casted to the TEveElement and global selection is updated accordingly.; If TEveElement::IsPickable() returns false, the element is not selected. ; Definition at line 583 of file TEveViewer.cxx. ◆ operator=(). TEveViewerList & TEveViewerList::operator= ; (; const TEveViewerList & ; ). private . ◆ RemoveElementL",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveViewerList.html:38722,update,updated,38722,doc/master/classTEveViewerList.html,https://root.cern,https://root.cern/doc/master/classTEveViewerList.html,1,['update'],['updated']
Deployability,"x.Draw(); ; c.SaveAs(""rf903_numintcache.png""); ; # Make workspace available on command line after macro finishes; ROOT.gDirectory.Add(w); Drawth1 Draw(); [#1] INFO:NumericIntegration -- RooRealIntegral::init(model_Int[x,y,z]) using numeric integrator RooAdaptiveIntegratorND to calculate Int(x,y,z); [#1] INFO:Fitting -- RooAbsPdf::fitTo(model_over_model_Int[x,y,z]) fixing normalization set for coefficient determination to observables in data; [#1] INFO:Fitting -- using CPU computation library compiled with -mavx2; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_model_over_model_Int[x,y,z]_modelData) Summation contains a RooNLLVar, using its error level; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const optimization; [#0] WARNING:Minimization -- RooAbsMinimizerFcn::synchronize: WARNING: no initial error estimate available for a: using 1; ; prevFCN = 1659.930708 a=0.02833, [#1] INFO:NumericIntegration -- RooRealIntegral::init(model_Int[x,y,z]) using numeric integrator RooAdaptiveIntegratorND to calculate Int(x,y,z); ; prevFCN = 1675.611563 a=-0.02833, ; prevFCN = 1673.217894 a=0.002833, ; prevFCN = 1660.205177 a=-0.002833, ; prevFCN = 1659.94939 a=0.0002833, ; prevFCN = 1659.944972 a=-0.0002833, ; prevFCN = 1659.919376 a=-0.001237, ; prevFCN = 1659.902781 a=-0.001089, ; prevFCN = 1659.903175 a=-0.001384, ; prevFCN = 1659.90318 a=-0.001237, ; prevFCN = 1659.902781 a=-0.001089, ; prevFCN = 1659.903175 a=-0.001384, ; prevFCN = 1659.90318 a=-0.001207, ; prevFCN = 1659.902797 a=-0.001266, ; prevFCN = 1659.902798 [#1] INFO:Minimization -- Command timer: Real time 0:00:02, CP time 2.710; [#1] INFO:Minimization -- Session timer: Real time 0:00:02, CP time 2.710; a=-0.001237, ; prevFCN = 1659.902781 a=-0.001207, ; prevFCN = 1659.902797 a=-0.001266, ; prevFCN = 1659.902798 a=-0.001231, ; prevFCN = 1659.902782 a=-0.001243, ; prevFCN = 1659.902782 [#1] INFO:Minimization -- Command timer: Real time 0:00:00, CP time 0.960; [#1] INFO:Minimizatio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf903__numintcache_8py.html:4428,integrat,integrator,4428,doc/master/rf903__numintcache_8py.html,https://root.cern,https://root.cern/doc/master/rf903__numintcache_8py.html,1,['integrat'],['integrator']
Deployability,"x:1035; TROOT::fGeometriesTSeqCollection * fGeometriesList of geometries.Definition TROOT.h:154; TROOT::fCutClassNameTString fCutClassNameName of default CutG class in graphics editor.Definition TROOT.h:170; TROOT::fInterpreterTInterpreter * fInterpreterCommand interpreter.Definition TROOT.h:125; TROOT::FwdDeclArgsToKeepCollection_tstd::vector< std::pair< std::string, int > > FwdDeclArgsToKeepCollection_tDefinition TROOT.h:187; TROOT::fVersionTimeInt_t fVersionTimeTime of ROOT version (ex 1152)Definition TROOT.h:117; TROOT::EndOfProcessCleanupsvoid EndOfProcessCleanups()Execute the cleanups necessary at the end of the process, in particular those that must be executed b...Definition TROOT.cxx:1248; TROOT::fBatchBool_t fBatchTrue if session without graphics.Definition TROOT.h:126; TROOT::GetListOfFilesTSeqCollection * GetListOfFiles() constDefinition TROOT.h:237; TROOT::fEscapeBool_t fEscapeTrue if ESC has been pressed.Definition TROOT.h:135; TROOT::GetBinDirstatic const TString & GetBinDir()Get the binary directory in the installation. Static utility function.Definition TROOT.cxx:2989; TROOT::fVersionIntInt_t fVersionIntROOT version in integer format (501)Definition TROOT.h:114; TROOT::GetIncludeDirstatic const TString & GetIncludeDir()Get the include directory in the installation. Static utility function.Definition TROOT.cxx:3042; TROOT::fFromPopUpBool_t fFromPopUpTrue if command executed from a popup menu.Definition TROOT.h:131; TROOT::Idlevoid Idle(UInt_t idleTimeInSec, const char *command=nullptr)Execute command when system has been idle for idleTimeInSec seconds.Definition TROOT.cxx:1892; TROOT::fSocketsTSeqCollection * fSocketsList of network sockets.Definition TROOT.h:148; TROOT::lsvoid ls(Option_t *option="""") const overrideTo list all objects of the application.Definition TROOT.cxx:2250; TROOT::GetMacroPathstatic const char * GetMacroPath()Get macro search path. Static utility function.Definition TROOT.cxx:2762; TROOT::fFunctionsTCollection * fFunctionsList ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TROOT_8cxx_source.html:146431,install,installation,146431,doc/v632/TROOT_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/TROOT_8cxx_source.html,1,['install'],['installation']
Deployability,"x:1035; TROOT::fGeometriesTSeqCollection * fGeometriesList of geometries.Definition TROOT.h:154; TROOT::fCutClassNameTString fCutClassNameName of default CutG class in graphics editor.Definition TROOT.h:170; TROOT::fInterpreterTInterpreter * fInterpreterCommand interpreter.Definition TROOT.h:125; TROOT::FwdDeclArgsToKeepCollection_tstd::vector< std::pair< std::string, int > > FwdDeclArgsToKeepCollection_tDefinition TROOT.h:187; TROOT::fVersionTimeInt_t fVersionTimeTime of ROOT version (ex 1152)Definition TROOT.h:117; TROOT::EndOfProcessCleanupsvoid EndOfProcessCleanups()Execute the cleanups necessary at the end of the process, in particular those that must be executed b...Definition TROOT.cxx:1248; TROOT::fBatchBool_t fBatchTrue if session without graphics.Definition TROOT.h:126; TROOT::GetListOfFilesTSeqCollection * GetListOfFiles() constDefinition TROOT.h:237; TROOT::fEscapeBool_t fEscapeTrue if ESC has been pressed.Definition TROOT.h:135; TROOT::GetBinDirstatic const TString & GetBinDir()Get the binary directory in the installation. Static utility function.Definition TROOT.cxx:2993; TROOT::fVersionIntInt_t fVersionIntROOT version in integer format (501)Definition TROOT.h:114; TROOT::GetIncludeDirstatic const TString & GetIncludeDir()Get the include directory in the installation. Static utility function.Definition TROOT.cxx:3046; TROOT::fFromPopUpBool_t fFromPopUpTrue if command executed from a popup menu.Definition TROOT.h:131; TROOT::Idlevoid Idle(UInt_t idleTimeInSec, const char *command=nullptr)Execute command when system has been idle for idleTimeInSec seconds.Definition TROOT.cxx:1892; TROOT::fSocketsTSeqCollection * fSocketsList of network sockets.Definition TROOT.h:148; TROOT::lsvoid ls(Option_t *option="""") const overrideTo list all objects of the application.Definition TROOT.cxx:2250; TROOT::GetMacroPathstatic const char * GetMacroPath()Get macro search path. Static utility function.Definition TROOT.cxx:2762; TROOT::fFunctionsTCollection * fFunctionsList ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TROOT_8cxx_source.html:146607,install,installation,146607,doc/master/TROOT_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TROOT_8cxx_source.html,1,['install'],['installation']
Deployability,"x:368; RooArgSetRooArgSet is a container object that can hold multiple RooAbsArg objects.Definition RooArgSet.h:24; int; should return the analytical integrals that are supported. integSet is the set of dependents for which integration is requested. The function should copy the subset of dependents it can analytically integrate to anaIntSet, and return a unique identification code for this integration configuration. If no integration can be performed, zero should be returned. Second,; double analyticalIntegral(Int_t code); RooAbsReal::analyticalIntegralvirtual double analyticalIntegral(Int_t code, const char *rangeName=nullptr) constImplements the actual analytical integral(s) advertised by getAnalyticalIntegral.Definition RooAbsReal.cxx:394; implements the actual analytical integral(s) advertised by getAnalyticalIntegral(). This function will only be called with codes returned by getAnalyticalIntegral(), except code zero.; The integration range for each dependent to be integrated can be obtained from the dependent's proxy functions min() and max(). Never call these proxy functions for any proxy not known to be a dependent via the integration code. Doing so may be ill-defined, e.g., in case the proxy holds a function, and will trigger an assert. Integrated category dependents should always be summed over all of their states. Direct generation of observables; Distributions for any PDF can be generated with the accept/reject method, but for certain PDFs, more efficient methods may be implemented. To implement direct generation of one or more observables, two functions need to be implemented, similar to those for analytical integrals:; Int_t getGenerator(const RooArgSet& generateVars, RooArgSet& directVars); RooAbsPdf::getGeneratorvirtual Int_t getGenerator(const RooArgSet &directVars, RooArgSet &generateVars, bool staticInitOK=true) constLoad generatedVars with the subset of directVars that we can generate events for, and return a code t...Definition RooAbsPdf.cxx:1522",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsPdf.html:4122,integrat,integration,4122,doc/master/classRooAbsPdf.html,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html,2,['integrat'],"['integrated', 'integration']"
Deployability,x::PrivateClass ; Reflex::PrivateEnum ; Reflex::PrivateStruct ; Reflex::PrivateUnion ; Reflex::ProtectedClass ; Reflex::ProtectedEnum ; Reflex::ProtectedStruct ; Reflex::ProtectedUnion ; Reflex::RuntimeError ; Reflex::Scope ; Reflex::Selection::AUTOSELECT ; Reflex::Selection::NODEFAULT ; Reflex::Selection::NO_SELF_AUTOSELECT ; Reflex::Selection::TRANSIENT ; Reflex::Tools ; Reflex::Type ; Reflex::TypeTemplate ; Reflex::TypedefBuilderImpl ; Reflex::UnionBuilderImpl ; Reflex::UnknownType ; Reflex::UnnamedClass ; Reflex::UnnamedEnum ; Reflex::UnnamedNamespace ; Reflex::UnnamedStruct ; Reflex::UnnamedUnion ; Reflex::VariableBuilder ; Reflex::VariableBuilderImpl ; Rgl ; Roo1DMomentMorphFunction Your description goes here...; Roo1DTable 1-dimensional table; Roo2DKeysPdf Two-dimensional kernel estimation p.d.f.; Roo2DMomentMorphFunction ; RooAICRegistry Registry for analytical integration codes; RooAbsAnaConvPdf Abstract Composite Convoluted PDF; RooAbsArg Abstract variable; RooAbsBinning Abstract base class for binning specification; RooAbsCache Base class for cache managers ; RooAbsCacheElement Base class for cache elements; RooAbsCachedPdf Abstract base class for cached p.d.f.s; RooAbsCachedReal Abstract base class for cached p.d.f.s; RooAbsCategory Abstract discrete variable; RooAbsCategoryLValue Abstract modifiable index variable ; RooAbsCollection Collection of RooAbsArg objects; RooAbsData Abstract data collection; RooAbsDataStore Abstract Data Storage class; RooAbsFunc Abstract real-valued function interface; RooAbsGenContext Abstract context for generating a dataset from a PDF; RooAbsHiddenReal Abstract hidden real-valued variable; RooAbsIntegrator Abstract interface for real-valued function integrators; RooAbsLValue Abstract variable; RooAbsMCStudyModule Monte Carlo study manager add-on module; RooAbsMoment Abstract representation of moment in a RooAbsReal in a given RooRealVar; RooAbsNumGenerator Abstract base class for numeric event generator algorithms; RooAbsO,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ClassIndex.html:25018,integrat,integration,25018,root/html534/ClassIndex.html,https://root.cern,https://root.cern/root/html534/ClassIndex.html,1,['integrat'],['integration']
Deployability,x::PrivateClass ; Reflex::PrivateEnum ; Reflex::PrivateStruct ; Reflex::PrivateUnion ; Reflex::ProtectedClass ; Reflex::ProtectedEnum ; Reflex::ProtectedStruct ; Reflex::ProtectedUnion ; Reflex::RuntimeError ; Reflex::Scope ; Reflex::Selection::AUTOSELECT ; Reflex::Selection::NODEFAULT ; Reflex::Selection::NO_SELF_AUTOSELECT ; Reflex::Selection::TRANSIENT ; Reflex::Tools ; Reflex::Type ; Reflex::TypeTemplate ; Reflex::TypedefBuilderImpl ; Reflex::UnionBuilderImpl ; Reflex::UnknownType ; Reflex::UnnamedClass ; Reflex::UnnamedEnum ; Reflex::UnnamedNamespace ; Reflex::UnnamedStruct ; Reflex::UnnamedUnion ; Reflex::VariableBuilder ; Reflex::VariableBuilderImpl ; Rgl ; Roo1DMomentMorphFunction Your description goes here...; Roo1DTable 1-dimensional table; Roo2DKeysPdf Two-dimensional kernel estimation p.d.f.; Roo2DMomentMorphFunction ; RooAICRegistry Registry for analytical integration codes; RooAbsAnaConvPdf Abstract Composite Convoluted PDF; RooAbsArg Abstract variable; RooAbsBinning Abstract base class for binning specification; RooAbsCache Base class for cache managers ; RooAbsCacheElement Base class for cache elements; RooAbsCachedPdf Abstract base class for cached p.d.f.s; RooAbsCachedReal Abstract base class for cached p.d.f.s; RooAbsCategory Abstract discrete variable; RooAbsCategoryLValue Abstract modifiable index variable ; RooAbsCollection Collection of RooAbsArg objects; RooAbsData Abstract data collection; RooAbsDataStore Abstract Data Storage class; RooAbsFunc Abstract real-valued function interface; RooAbsGenContext Abstract context for generating a dataset from a PDF; RooAbsHiddenReal Abstract hidden real-valued variable; RooAbsIntegrator Abstract interface for real-valued function integrators; RooAbsLValue Abstract variable; RooAbsMCStudyModule Monte Carlo study manager add-on module; RooAbsNumGenerator Abstract base class for numeric event generator algorithms; RooAbsOptTestStatistic Abstract base class for optimized test statistics; RooAbsPdf Abstract ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ClassIndex.html:24686,integrat,integration,24686,root/html532/ClassIndex.html,https://root.cern,https://root.cern/root/html532/ClassIndex.html,1,['integrat'],['integration']
Deployability,"x;  Convolution observable. ;  ; RooRealProxy _xprime;  Input function representing value of convolution observable. ;  ;  Protected Attributes inherited from RooAbsCachedPdf; std::map< Int_t, AnaIntConfig > _anaIntMap;  ! Map for analytical integration codes ;  ; RooAICRegistry _anaReg;  ! Registry for analytical integration codes ;  ; RooObjCacheManager _cacheMgr;  ; Int_t _ipOrder;  The cache manager. ;  ;  Protected Attributes inherited from RooAbsPdf; Int_t _errorCount = 0;  Number of errors remaining to print. ;  ; Int_t _negCount = 0;  Number of negative probabilities remaining to print. ;  ; RooAbsReal * _norm = nullptr;  ; RooObjCacheManager _normMgr;  ; TString _normRange;  Normalization range. ;  ; RooArgSet const * _normSet = nullptr;  Normalization integral (owned by _normMgr) ;  ; double _rawValue = 0;  ; bool _selectComp = false;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; std::unique_ptr< RooNumGenConfig > _specGeneratorConfig;  ! MC generator configuration specific for this object ;  ; Int_t _traceCount = 0;  Number of traces remaining to print. ;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; Int_t _plotBins = 100;  Number of plot bins. ;  ; double _plotMax = 0.0;  Maximum of plot range. ;  ; double _plotMin = 0.0;  Minimum of plot range. ;  ; bool _selectComp = true;  A buffer for reading values from trees. ;  ; std::unique_ptr< RooNumIntConfig > _specIntegratorConfig;  ; TreeReadBuffer * _treeReadBuffer = nullptr;  ; TString _unit;  Unit for objects value. ;  ; double _value = 0.0;  Cache for current value of object. ;  ;  Protected Attributes inherited from RooAbsArg; std::set< std::string > _boolAttrib;  ; std::set< std::string > _boolAttribTransient;  ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFFTConvPdf.html:80209,configurat,configuration,80209,doc/master/classRooFFTConvPdf.html,https://root.cern,https://root.cern/doc/master/classRooFFTConvPdf.html,1,['configurat'],['configuration']
Deployability,"xes in log scale. void SetGlobalScale(Bool_t gl); Constraint all axes to the same scale. void SetAxisHistogramLineWidth(Int_t lw = 2); Set the same histogram axis line width for all axis. void SetCandleChart(Bool_t can); Set a candle chart display. void SetCurrentFirst(Long64_t ); Set the first entry to be dispayed. void SetCurrentN(Long64_t ); Set the number of entry to be displayed. TParallelCoordSelect* SetCurrentSelection(const char* title); Set the selection beeing edited. void SetCurrentSelection(TParallelCoordSelect* sel); Set the selection beeing edited. void SetDotsSpacing(Int_t s = 0); Set dots spacing. Modify the line style 11.; If the canvas support transparency dot spacing is ignored. void SetEntryList(TParallelCoord* para, TEntryList* enlist); Set the entry lists of ""para"". void SetGlobalMax(Double_t max); Force all variables to adopt the same max. void SetGlobalMin(Double_t min); Force all variables to adopt the same min. void SetLiveRangesUpdate(Bool_t ); If true, the pad is updated while the motion of a dragged range. void SetVertDisplay(Bool_t vert = kTRUE); Set the vertical or horizontal display. void UnzoomAll(); Unzoom all variables. TParallelCoord(). Bool_t GetCandleChart(); {return TestBit(kCandleChart);}. Long64_t GetCurrentFirst(); {return fCurrentFirst;}. Long64_t GetCurrentN(); {return fCurrentN;}. Bool_t GetCurveDisplay() const; {return TestBit(kCurveDisplay);}. Int_t GetDotsSpacing() const; {return fDotsSpacing;}. Bool_t GetGlobalScale(); {return TestBit(kGlobalScale);}. Bool_t GetGlobalLogScale(); {return TestBit(kGlobalLogScale);}. Color_t GetLineColor(); {return fLineColor;}. Width_t GetLineWidth(); {return fLineWidth;}. UInt_t GetNvar(); {return fNvar;}. Long64_t GetNentries(); {return fNentries;}. TList * GetSelectList(); {return fSelectList;}. TList * GetVarList(); {return fVarList;}. Bool_t GetVertDisplay() const; {return TestBit(kVertDisplay);}. Int_t GetWeightCut() const; {return fWeightCut;}. void SetCurveDisplay(Bool_t curve =",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TParallelCoord.html:17094,update,updated,17094,root/html534/TParallelCoord.html,https://root.cern,https://root.cern/root/html534/TParallelCoord.html,3,['update'],['updated']
Deployability,"xies. ;  ; void setShapeDirty (const RooAbsArg *source);  Notify that a shape-like property (e.g. binning) has changed. ;  ; void setValueDirty (const RooAbsArg *source);  Force element to re-evaluate itself when a value is requested. ;  ; void unRegisterProxy (RooArgProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooListProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooSetProxy &proxy);  Remove proxy from proxy list. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; RooArgSet _paramSet;  Set of parameters to which constraints apply. ;  ; RooListProxy _set1;  Set of constraint terms. ;  ; const bool _takeGlobalObservablesFromData = false;  If the global observable values are taken from data. ;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; Int_t _plotBins = 100;  Number of plot bins. ;  ; double _plotMax = 0.0;  Maximum of plot range. ;  ; double _plotMin = 0.0;  Minimum of plot range. ;  ; bool _selectComp = true;  A buffer for reading values from trees. ;  ; std::unique_ptr< RooNumIntConfig > _specIntegratorConfig;  ; TreeReadBuffer * _treeReadBuffer = nullptr;  ; TString _unit;  Unit for objects value. ;  ; double _value = 0.0;  Cache for current value of object. ;  ;  Protected Attributes inherited from RooAbsArg; std::set< std::string > _boolAttrib;  ; std::set< std::string > _boolAttribTransient;  ; std::vector< RooAbsCache * > _cacheList;  ; RefCountList_t _clientList;  ; RefCountList_t _clientListShape;  ; RefCountList_t _clientListValue;  ; std::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooConstraintSum.html:55549,integrat,integration,55549,doc/master/classRooConstraintSum.html,https://root.cern,https://root.cern/doc/master/classRooConstraintSum.html,1,['integrat'],['integration']
Deployability,"ximum number of sub-intervals ; ruleGauss-Kronrod integration rule (only for GSL ADAPTIVE type). NOTE: When no values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions ; Definition at line 142 of file Integrator.h. ◆ IntegratorOneDim() [3/4]. template<class Function > . ROOT::Math::IntegratorOneDim::IntegratorOneDim ; (; Function & ; f, . IntegrationOneDim::Type ; type = IntegrationOneDim::kDEFAULT, . double ; absTol = -1, . double ; relTol = -1, . unsigned int ; size = 0, . int ; rule = 0 . ). inlineexplicit . Template Constructor of one dimensional Integrator passing a generic function object. ; Parameters. fintegration function (any C++ callable object implementing operator()(double x) ; typeintegration type (adaptive, non-adaptive, etc..) ; absToldesired absolute tolerance. The algorithm will stop when either the absolute OR the relative tolerance are satisfied. ; relToldesired relative tolerance ; sizemaximum number of sub-intervals ; ruleGauss-Kronrod integration rule (only for GSL ADAPTIVE type). NOTE: When no values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions ; Definition at line 165 of file Integrator.h. ◆ ~IntegratorOneDim(). virtual ROOT::Math::IntegratorOneDim::~IntegratorOneDim ; (; ). inlinevirtual . destructor (will delete contained pointers) ; Definition at line 173 of file Integrator.h. ◆ IntegratorOneDim() [4/4]. ROOT::Math::IntegratorOneDim::IntegratorOneDim ; (; const IntegratorOneDim & ; ). inlineprivate . Definition at line 181 of file Integrator.h. Member Function Documentation. ◆ CreateIntegrator(). VirtualIntegratorOneDim * ROOT::Math::IntegratorOneDim::CreateIntegrator ; (; IntegrationOneDim::Type ; type, . double ; absTol, . double ; relTol, . unsigned int ; size, . int ; rule . ). protected . Definition at line 114 of file Integrator.cxx. ◆ Error(). double ROOT::Math::IntegratorOneDim::Error ; (; ); const. inline . return the esti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:10401,integrat,integration,10401,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,1,['integrat'],['integration']
Deployability,"xis when constructing the interval ; Definition at line 178 of file MCMCCalculator.h. ◆ fNumBurnInSteps. Int_t RooStats::MCMCCalculator::fNumBurnInSteps = 0. protected . number of iterations to discard as burn-in, starting from the first ; Definition at line 177 of file MCMCCalculator.h. ◆ fNumIters. Int_t RooStats::MCMCCalculator::fNumIters = 0. protected . number of iterations to run metropolis algorithm ; Definition at line 176 of file MCMCCalculator.h. ◆ fPdf. RooAbsPdf* RooStats::MCMCCalculator::fPdf. protected . pointer to common PDF (owned by the workspace) ; Definition at line 173 of file MCMCCalculator.h. ◆ fPOI. RooArgSet RooStats::MCMCCalculator::fPOI. protected . parameters of interest for interval ; Definition at line 167 of file MCMCCalculator.h. ◆ fPriorPdf. RooAbsPdf* RooStats::MCMCCalculator::fPriorPdf. protected . pointer to prior PDF (owned by the workspace) ; Definition at line 174 of file MCMCCalculator.h. ◆ fPropFunc. ProposalFunction* RooStats::MCMCCalculator::fPropFunc. mutableprotected . Proposal function for MCMC integration. ; Definition at line 172 of file MCMCCalculator.h. ◆ fSize. double RooStats::MCMCCalculator::fSize = -1. protected . size of the test (eg. specified rate of Type I error) ; Definition at line 166 of file MCMCCalculator.h. ◆ fUseKeys. bool RooStats::MCMCCalculator::fUseKeys = false. protected . whether to use kernel estimation to determine interval ; Definition at line 181 of file MCMCCalculator.h. ◆ fUseSparseHist. bool RooStats::MCMCCalculator::fUseSparseHist = false. protected . whether to use sparse histogram (if using hist at all) ; Definition at line 182 of file MCMCCalculator.h. Libraries for RooStats::MCMCCalculator:. [legend]; The documentation for this class was generated from the following files:; roofit/roostats/inc/RooStats/MCMCCalculator.h; roofit/roostats/src/MCMCCalculator.cxx. RooStatsMCMCCalculator. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:55 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1MCMCCalculator.html:31093,integrat,integration,31093,doc/master/classRooStats_1_1MCMCCalculator.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1MCMCCalculator.html,1,['integrat'],['integration']
Deployability,"xist = ROOT.gSystem.AccessPathName(inputFileName); ; # if file does not exists create it; if fileDoesNotExist:; MakeTimeData(nTotEvts, ntime, ninput); ; ; inputFile = TFile.Open(inputFileName); if inputFile is None:; raise ROOT.Error(""Error opening input file %s - exit"", inputFileName.Data()); ; ; print(""--- RNNClassification : Using input file: {}"".format(inputFile.GetName())); ; # Create a ROOT output file where TMVA will store ntuples, histograms, etc.; outfileName = ""data_RNN_"" + archString + "".root""; outputFile = None; ; ; if writeOutputFile:; outputFile = TFile.Open(outfileName, ""RECREATE""); ; ; ## Declare Factory; ; # Create the Factory class. Later you can choose the methods; # whose performance you'd like to investigate.; ; # The factory is the major TMVA object you have to interact with. Here is the list of parameters you need to; # pass; ; # - The first argument is the base of the name of all the output; # weightfiles in the directory weight/ that will be created with the; # method parameters; ; # - The second argument is the output file for the training results; #; # - The third argument is a string option defining some general configuration for the TMVA session.; # For example all TMVA output can be suppressed by removing the ""!"" (not) in front of the ""Silent"" argument in; # the option string; ; ; # // Creating the factory object; factory = TMVA.Factory(; ""TMVAClassification"",; outputFile,; V=False,; Silent=False,; Color=True,; DrawProgressBar=True,; Transformations=None,; Correlations=False,; AnalysisType=""Classification"",; ModelPersistence=True,; ); dataloader = TMVA.DataLoader(""dataset""); ; signalTree = inputFile.Get(""sgn""); background = inputFile.Get(""bkg""); ; nvar = ninput * ntime; ; ## add variables - use new AddVariablesArray function; for i in range(ntime):; dataloader.AddVariablesArray(""vars_time"" + str(i), ninput); ; ; dataloader.AddSignalTree(signalTree, 1.0); dataloader.AddBackgroundTree(background, 1.0); ; # check given input; datainfo = dat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__RNN__Classification_8py.html:54709,configurat,configuration,54709,doc/master/TMVA__RNN__Classification_8py.html,https://root.cern,https://root.cern/doc/master/TMVA__RNN__Classification_8py.html,1,['configurat'],['configuration']
Deployability,"xisting entry in NameFilters. ;  ; const EDialogTypes & GetType () const;  ; std::string GetWorkingPath () const;  Returns current working path. ;  ; void Hide ();  Hide ROOT Browser. ;  ; bool IsCompleted () const;  ; void SetCallback (RFileDialogCallback_t callback);  Assign callback. ;  ; void SetCanChangePath (bool on=true);  Configure if working path in dialog can be changed via gui elements. ;  ; void SetNameFilters (const std::vector< std::string > &arr);  Set array of name filters like ""Text files (*.txt)"", ""Any files (*)"", ""Image files (*png *.jpg)"" Should be specified before starting dialog. ;  ; void SetSelectedFilter (const std::string &name);  Configure selected filter Has to be one of the string from NameFilters entry. ;  ; void SetWorkingPath (const std::string &);  Change current working path of file dialog If dialog already shown, change will be immediately applied. ;  ; void Show (const RWebDisplayArgs &args="""");  Show or update RFileDialog in web window If web window already started - just refresh it like ""reload"" button does Reset result of file selection (if any) ;  . Static Public Member Functions; static std::shared_ptr< RFileDialog > Embed (const std::shared_ptr< RWebWindow > &window, unsigned connid, const std::string &args);  Create dialog instance to use as embedded dialog inside other widget Embedded dialog started on the client side where FileDialogController.SaveAs() method called Such method immediately send message with ""FILEDIALOG:"" prefix On the server side widget should detect such message and call RFileDialog::Embed() providing received string as second argument. ;  ; static bool IsMessageToStartDialog (const std::string &msg);  Check if this could be the message send by client to start new file dialog If returns true, one can call RFileDialog::Embedded() to really create file dialog instance inside existing widget. ;  ; static std::string NewFile (const std::string &title="""", const std::string &fname="""");  Start NewFile dialog. ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RFileDialog.html:2169,update,update,2169,doc/v632/classROOT_1_1RFileDialog.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RFileDialog.html,2,['update'],['update']
Deployability,"xpensive geometries. In future there will be a limitation on the maximum number of nodes to be visualized. opt=2; only the clicked volume is visualized. This is automatically set by TGeoVolume::DrawOnly() method; opt=3 - only a given path is visualized. This is automatically set by; TGeoVolume::DrawPath(const char *path) method; The current view can be exploded in cartesian, cylindrical or spherical coordinates : TGeoManager::SetExplodedView(Int_t opt). Options may be :; 0 - default (no bombing); 1 - cartesian coordinates. The bomb factor on each axis can be set with TGeoManager::SetBombX(Double_t bomb) and corresponding Y and Z.; 2 - bomb in cylindrical coordinates. Only the bomb factors on Z and R are considered . 3 - bomb in radial spherical coordinate : TGeoManager::SetBombR(). Volumes themselves support different visualization settings :; TGeoVolume::SetVisibility() : set volume visibility.; TGeoVolume::VisibleDaughters() : set daughters visibility. All these actions automatically updates the current view if any. Checking the geometry; Several checking methods are accessible from the volume context menu. They generally apply only to the visible parts of the drawn geometry in order to ease geometry checking, and their implementation is in the TGeoChecker class from the painting package.; Checking a given point.; Can be called from TGeoManager::CheckPoint(Double_t x, Double_t y, Double_t z). This method is drawing the daughters of the volume containing the point one level down, printing the path to the deepest physical node holding this point. It also computes the closest distance to any boundary. The point will be drawn in red, as well as a sphere having this closest distance as radius. In case a non-zero distance is given by the user as fifth argument of CheckPoint, this distance will be used as radius of the safety sphere. Shooting random points.; Can be called from TGeoVolume::RandomPoints() (context menu function) and it will draw this volume with current vis",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoManager.html:17803,update,updates,17803,doc/master/classTGeoManager.html,https://root.cern,https://root.cern/doc/master/classTGeoManager.html,1,['update'],['updates']
Deployability,"xt files will first be run through; THtml::Convert().; You can see an example here;; the part between ""Index of HIST classes"" and ""Jump to"" is created by parsing; the module's doc directory.; VI. Auxiliary files: style sheet, JavaScript, help page; The documentation pages share a common set of javascript and CSS files. They; are generated automatically when running MakeAll();; they can be generated on; demand by calling CreateAuxiliaryFiles().; VII. Class Charts; THtml can generate a number of graphical representations for a class, which; are displayed as a tabbed set of imaged ontop of the class description.; It can show the inheritance, inherited and hidden members, directly and; indirectly included files, and library dependencies.; These graphs are generated using the Graphviz; package. You can install it from http://www.graphviz.org.; You can either put it into your $PATH, or tell THtml where to find it by calling; SetDotDir().; VIII. Configuration variables; Here is a list of all configuration variables that are known to THtml.; You can set them in your .rootrc file, see; TEnv. Root.Html.OutputDir (default: htmldoc); Root.Html.SourceDir (default: .:src/:include/); Root.Html.Author (default: // Author:) - start tag for authors; Root.Html.LastUpdate (default: // @(#)) - start tag for last update; Root.Html.Copyright (default: * Copyright) - start tag for copyright notice; Root.Html.Description (default: //____________________ ) - start tag for class descr; Root.Html.HomePage (default: ) - URL to the user defined home page; Root.Html.Header (default: ) - location of user defined header; Root.Html.Footer (default: ) - location of user defined footer; Root.Html.Root (default: ) - URL of Root's class documentation; Root.Html.SearchEngine (default: ) - link to the search engine; Root.Html.Search (defualt: ) - link to search by replacing ""%s"" with user input; Root.Html.ViewCVS (default: ) - URL of ViewCVS base; Root.Html.XWho (default: http://consult.cern.ch/xwho/peopl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/THtml.html:15815,configurat,configuration,15815,root/html528/THtml.html,https://root.cern,https://root.cern/root/html528/THtml.html,10,['configurat'],['configuration']
Deployability,"xt->fDirectoryWait = false;; 287 }; 288 fContext = next;; 289 }; 290 ; 291 // Now loop through the set of thread local 'gDirectory' that; 292 // have a one point or another pointed to this directory.; 293 for (auto &ptr : fGDirectories) {; 294 // If the thread local gDirectory still point to this directory; 295 // we need to reset it using the following sematic:; 296 // we fall back to the mother/owner of this directory or gROOTLocal; 297 // if there is no parent or nullptr if the current object is gROOTLocal.; 298 if (ptr->load() == this) {; 299 TDirectory *next = GetMotherDir();; 300 if (!next || next == this) {; 301 if (this == ROOT::Internal::gROOTLocal) { /// in that case next == this.; 302 next = nullptr;; 303 } else {; 304 next = ROOT::Internal::gROOTLocal;; 305 }; 306 } else {; 307 // We can not use 'cd' as this would access the current thread; 308 // rather than the thread corresponding to that gDirectory.; 309 next->RegisterGDirectory(ptr);; 310 }; 311 // Actually do the update of the thread local gDirectory; 312 // using its object specific lock.; 313 auto This = this;; 314 ptr->compare_exchange_strong(This, next);; 315 }; 316 }; 317 }; 318 for(auto &&context : extraWait) {; 319 // Wait until the TContext is done spinning; 320 // over the lock.; 321 while(context->fActiveDestructor);; 322 // And now let the TContext destructor finish.; 323 context->fDirectoryWait = false;; 324 }; 325 ; 326 // Wait until all register attempts are done.; 327 while(fContextPeg) {}; 328 ; 329}; 330 ; 331////////////////////////////////////////////////////////////////////////////////; 332/// Fast execution of 'new TBufferFile(TBuffer::kWrite,10000), without having; 333/// a compile time circular dependency ... alternatively we could (should?); 334/// introduce yet another abstract interface.; 335 ; 336static TBuffer* R__CreateBuffer(); 337{; 338 typedef void (*tcling_callfunc_Wrapper_t)(void*, int, void**, void*);; 339 static tcling_callfunc_Wrapper_t creator = nullptr;; 340 if",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TDirectory_8cxx_source.html:10501,update,update,10501,doc/master/TDirectory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TDirectory_8cxx_source.html,1,['update'],['update']
Deployability,"xt::_protoOrderLUT with traversal order of prototype data; RooArgSetRooAbsGenContext::_protoVarsPrototype observables; const RooDataSet*RooAbsGenContext::_prototypePointer to prototype dataset; RooArgSet*RooAbsGenContext::_theEventPointer to observable event being generated; TIterator*_uniIterIterator over uniform observables; RooArgSet_uniObsObservable to be generated with flat distribution; Bool_tRooAbsGenContext::_verboseVerbose messaging?; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooProdGenContext(const RooProdPdf& model, const RooArgSet& vars, const RooDataSet* prototype = 0, const RooArgSet* auxProto = 0, Bool_t _verbose = kFALSE). ~RooProdGenContext(); Destructor. Delete all owned subgenerator contexts. void attach(const RooArgSet& params); Attach generator to given event buffer. void initGenerator(const RooArgSet& theEvent); One-time initialization of generator context, forward to component generators. void generateEvent(RooArgSet& theEvent, Int_t remaining); Generate a single event of the product by generating the components; of the products sequentially. The subcontext have been order such; that all conditional dependencies are correctly taken into account; when processed in sequential order. void setProtoDataOrder(Int_t* lut); Set the traversal order of the prototype dataset by the; given lookup table. void printMultiline(ostream& os, Int_t content, Bool_t verbose = kFALSE, TString indent = """") const; Detailed printing interface. RooProdGenContext(const RooProdPdf& model, const RooArgSet& vars, const RooDataSet* prototype = 0, const RooArgSet* auxProto = 0, Bool_t _verbose = kFALSE). void updateCCDTable(). » Last changed: Mon Dec 7 13:48:42 2009 » Last generated: 2009-12-07 13:48; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooProdGenContext.html:10097,update,updateCCDTable,10097,root/html526/RooProdGenContext.html,https://root.cern,https://root.cern/root/html526/RooProdGenContext.html,1,['update'],['updateCCDTable']
Deployability,"xt::_protoOrderLUT with traversal order of prototype data; RooArgSetRooAbsGenContext::_protoVarsPrototype observables; const RooDataSet*RooAbsGenContext::_prototypePointer to prototype dataset; RooArgSet*RooAbsGenContext::_theEventPointer to observable event being generated; TIterator*_uniIterIterator over uniform observables; RooArgSet_uniObsObservable to be generated with flat distribution; Bool_tRooAbsGenContext::_verboseVerbose messaging?; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooProdGenContext(const RooProdPdf& model, const RooArgSet& vars, const RooDataSet* prototype = 0, const RooArgSet* auxProto = 0, Bool_t _verbose = kFALSE). ~RooProdGenContext(); Destructor. Delete all owned subgenerator contexts. void attach(const RooArgSet& params); Attach generator to given event buffer. void initGenerator(const RooArgSet& theEvent); One-time initialization of generator context, forward to component generators. void generateEvent(RooArgSet& theEvent, Int_t remaining); Generate a single event of the product by generating the components; of the products sequentially. The subcontext have been order such; that all conditional dependencies are correctly taken into account; when processed in sequential order. void setProtoDataOrder(Int_t* lut); Set the traversal order of the prototype dataset by the; given lookup table. void printMultiline(ostream& os, Int_t content, Bool_t verbose = kFALSE, TString indent = """") const; Detailed printing interface. RooProdGenContext(const RooProdPdf& model, const RooArgSet& vars, const RooDataSet* prototype = 0, const RooArgSet* auxProto = 0, Bool_t _verbose = kFALSE). void updateCCDTable(). » Last changed: Mon Jul 4 15:23:42 2011 » Last generated: 2011-07-04 15:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooProdGenContext.html:10326,update,updateCCDTable,10326,root/html530/RooProdGenContext.html,https://root.cern,https://root.cern/root/html530/RooProdGenContext.html,1,['update'],['updateCCDTable']
Deployability,"xt::_protoOrderLUT with traversal order of prototype data; RooArgSetRooAbsGenContext::_protoVarsPrototype observables; const RooDataSet*RooAbsGenContext::_prototypePointer to prototype dataset; RooArgSet*RooAbsGenContext::_theEventPointer to observable event being generated; TIterator*_uniIterIterator over uniform observables; RooArgSet_uniObsObservable to be generated with flat distribution; Bool_tRooAbsGenContext::_verboseVerbose messaging?; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooProdGenContext(const RooProdPdf& model, const RooArgSet& vars, const RooDataSet* prototype = 0, const RooArgSet* auxProto = 0, Bool_t _verbose = kFALSE). ~RooProdGenContext(); Destructor. Delete all owned subgenerator contexts. void attach(const RooArgSet& params); Attach generator to given event buffer. void initGenerator(const RooArgSet& theEvent); One-time initialization of generator context, forward to component generators. void generateEvent(RooArgSet& theEvent, Int_t remaining); Generate a single event of the product by generating the components; of the products sequentially. The subcontext have been order such; that all conditional dependencies are correctly taken into account; when processed in sequential order. void setProtoDataOrder(Int_t* lut); Set the traversal order of the prototype dataset by the; given lookup table. void printMultiline(ostream& os, Int_t content, Bool_t verbose = kFALSE, TString indent = """") const; Detailed printing interface. RooProdGenContext(const RooProdPdf& model, const RooArgSet& vars, const RooDataSet* prototype = 0, const RooArgSet* auxProto = 0, Bool_t _verbose = kFALSE). void updateCCDTable(). » Last changed: Sat Oct 9 20:48:32 2010 » Last generated: 2010-10-09 20:48; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooProdGenContext.html:10146,update,updateCCDTable,10146,root/html528/RooProdGenContext.html,https://root.cern,https://root.cern/root/html528/RooProdGenContext.html,1,['update'],['updateCCDTable']
Deployability,"xt::_protoOrderLUT with traversal order of prototype data; RooArgSetRooAbsGenContext::_protoVarsPrototype observables; const RooDataSet*RooAbsGenContext::_prototypePointer to prototype dataset; RooArgSet*RooAbsGenContext::_theEventPointer to observable event being generated; TIterator*_uniIterIterator over uniform observables; RooArgSet_uniObsObservable to be generated with flat distribution; Bool_tRooAbsGenContext::_verboseVerbose messaging?; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooProdGenContext(const RooProdPdf& model, const RooArgSet& vars, const RooDataSet* prototype = 0, const RooArgSet* auxProto = 0, Bool_t _verbose = kFALSE). ~RooProdGenContext(); Destructor. Delete all owned subgenerator contexts. void attach(const RooArgSet& params); Attach generator to given event buffer. void initGenerator(const RooArgSet& theEvent); One-time initialization of generator context, forward to component generators. void generateEvent(RooArgSet& theEvent, Int_t remaining); Generate a single event of the product by generating the components; of the products sequentially. The subcontext have been order such; that all conditional dependencies are correctly taken into account; when processed in sequential order. void setProtoDataOrder(Int_t* lut); Set the traversal order of the prototype dataset by the; given lookup table. void printMultiline(ostream& os, Int_t content, Bool_t verbose = kFALSE, TString indent = """") const; Detailed printing interface. RooProdGenContext(const RooProdPdf& model, const RooArgSet& vars, const RooDataSet* prototype = 0, const RooArgSet* auxProto = 0, Bool_t _verbose = kFALSE). void updateCCDTable(). » Last changed: Thu Nov 3 20:08:59 2011 » Last generated: 2011-11-03 20:08; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooProdGenContext.html:10329,update,updateCCDTable,10329,root/html532/RooProdGenContext.html,https://root.cern,https://root.cern/root/html532/RooProdGenContext.html,1,['update'],['updateCCDTable']
Deployability,"xt::_protoOrderLUT with traversal order of prototype data; RooArgSetRooAbsGenContext::_protoVarsPrototype observables; const RooDataSet*RooAbsGenContext::_prototypePointer to prototype dataset; RooArgSet*RooAbsGenContext::_theEventPointer to observable event being generated; TIterator*_uniIterIterator over uniform observables; RooArgSet_uniObsObservable to be generated with flat distribution; Bool_tRooAbsGenContext::_verboseVerbose messaging?; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooProdGenContext(const RooProdPdf& model, const RooArgSet& vars, const RooDataSet* prototype = 0, const RooArgSet* auxProto = 0, Bool_t _verbose = kFALSE). ~RooProdGenContext(); Destructor. Delete all owned subgenerator contexts. void attach(const RooArgSet& params); Attach generator to given event buffer. void initGenerator(const RooArgSet& theEvent); One-time initialization of generator context, forward to component generators. void generateEvent(RooArgSet& theEvent, Int_t remaining); Generate a single event of the product by generating the components; of the products sequentially. The subcontext have been order such; that all conditional dependencies are correctly taken into account; when processed in sequential order. void setProtoDataOrder(Int_t* lut); Set the traversal order of the prototype dataset by the; given lookup table. void printMultiline(ostream& os, Int_t content, Bool_t verbose = kFALSE, TString indent = """") const; Detailed printing interface. RooProdGenContext(const RooProdPdf& model, const RooArgSet& vars, const RooDataSet* prototype = 0, const RooArgSet* auxProto = 0, Bool_t _verbose = kFALSE). void updateCCDTable(). » Last changed: Tue Jun 2 15:33:02 2015 » Last generated: 2015-06-02 15:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/RooProdGenContext.html:11460,update,updateCCDTable,11460,root/html604/RooProdGenContext.html,https://root.cern,https://root.cern/root/html604/RooProdGenContext.html,1,['update'],['updateCCDTable']
Deployability,"xtEntry*fTxtSelectorselector name text entry; TSessionViewer*fViewerpointer on main viewer. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TNewQueryDlg(TSessionViewer* gui, Int_t Width, Int_t Height, TQueryDescription* query = 0, Bool_t editmode = kFALSE); Create a new Query dialog, used by the Session Viewer, to Edit a Query if; the editmode flag is set, or to create a new one if not set. ~TNewQueryDlg(); Delete query dialog. void Build(TSessionViewer* gui); Build the ""new query"" dialog. void CloseWindow(); Called when window is closed via the window manager. void OnNewQueryMore(); Show/hide options frame and update button text accordingly. void OnBrowseChain(); Call new chain dialog. void OnElementSelected(TObject* obj); Handle OnElementSelected signal coming from new chain dialog. void OnBrowseSelector(); Open file browser to choose selector macro. void OnBrowseEventList(); Browse event list. void OnBtnSaveClicked(); Save current settings in main session viewer. void OnBtnSubmitClicked(); Save and submit query description. void OnBtnCloseClicked(); Close dialog. void Popup(); Display dialog and set focus to query name text entry. void SettingsChanged(); Settings have changed, update GUI accordingly. void UpdateFields(TQueryDescription* desc); Update entry fields with query description values. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Process messages for new query dialog.; Essentially used to navigate between text entry fields. TNewQueryDlg(TSessionViewer* gui, Int_t Width, Int_t Height, TQueryDescription* query = 0, Bool_t editmode = kFALSE). » Author: Marek Biskup, Jakub Madejczyk, Bertrand Bellenot 10/08/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/sessionviewer:$Id$ » Last generated: 2015-06-02 16:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TNewQueryDlg.html:25430,update,update,25430,root/html604/TNewQueryDlg.html,https://root.cern,https://root.cern/root/html604/TNewQueryDlg.html,1,['update'],['update']
Deployability,"xtEntry*fTxtSelectorselector name text entry; TSessionViewer*fViewerpointer on main viewer. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TNewQueryDlg(TSessionViewer* gui, Int_t Width, Int_t Height, TQueryDescription* query = 0, Bool_t editmode = kFALSE); Create a new Query dialog, used by the Session Viewer, to Edit a Query if; the editmode flag is set, or to create a new one if not set. ~TNewQueryDlg(); Delete query dialog. void Build(TSessionViewer* gui); Build the ""new query"" dialog. void CloseWindow(); Called when window is closed via the window manager. void OnNewQueryMore(); Show/hide options frame and update button text accordingly. void OnBrowseChain(); Call new chain dialog. void OnElementSelected(TObject* obj); Handle OnElementSelected signal coming from new chain dialog. void OnBrowseSelector(); Open file browser to choose selector macro. void OnBrowseEventList(); Browse event list. void OnBtnSaveClicked(); Save current settings in main session viewer. void OnBtnSubmitClicked(); Save and submit query description. void OnBtnCloseClicked(); Close dialog. void Popup(); Display dialog and set focus to query name text entry. void SettingsChanged(); Settings have changed, update GUI accordingly. void UpdateFields(TQueryDescription* desc); Update entry fields with query description values. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Process messages for new query dialog.; Essentially used to navigate between text entry fields. TNewQueryDlg(TSessionViewer* gui, Int_t Width, Int_t Height, TQueryDescription* query = 0, Bool_t editmode = kFALSE). » Author: Marek Biskup, Jakub Madejczyk, Bertrand Bellenot 10/08/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/sessionviewer:$Id$ » Last generated: 2015-06-30 15:22; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TNewQueryDlg.html:25430,update,update,25430,root/html602/TNewQueryDlg.html,https://root.cern,https://root.cern/root/html602/TNewQueryDlg.html,1,['update'],['update']
Deployability,"xt_t *value);  Associate string 'value' to this object under key 'key'. ;  ; void setTransientAttribute (const Text_t *name, bool value=true);  Set (default) or clear a named boolean attribute of this object. ;  ; void setWorkspace (RooWorkspace &ws);  ; const std::map< std::string, std::string > & stringAttributes () const;  ; const std::set< std::string > & transientAttributes () const;  ; virtual void translate (RooFit::Detail::CodeSquashContext &ctx) const;  This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ;  ; RooWorkspace * workspace () const;  ; virtual void writeToStream (std::ostream &os, bool compact) const =0;  ; Client-Server Interface; These functions allow RooFit to figure out who is serving values to whom. . const RefCountList_t & clients () const;  List of all clients of this object. ;  ; const RefCountList_t & valueClients () const;  List of all value clients of this object. Value clients receive value updates. ;  ; const RefCountList_t & shapeClients () const;  List of all shape clients of this object. ;  ; const RefCountList_t & servers () const;  List of all servers of this object. ;  ; RooAbsArg * findServer (const char *name) const;  Return server of this with name name. Returns nullptr if not found. ;  ; RooAbsArg * findServer (const RooAbsArg &arg) const;  Return server of this that has the same name as arg. Returns nullptr if not found. ;  ; RooAbsArg * findServer (Int_t index) const;  Return i-th server from server list. ;  ; bool isValueServer (const RooAbsArg &arg) const;  Check if this is serving values to arg. ;  ; bool isValueServer (const char *name) const;  Check if this is serving values to an object with name name. ;  ; bool isShapeServer (const RooAbsArg &arg) const;  Check if this is serving shape to arg. ;  ; bool isShapeServer (const char *name) const;  Check if this is serving shape to an object with name name. ;  ; void leafNodeServerList (RooAbsColl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsArg.html:16632,update,updates,16632,doc/master/classRooAbsArg.html,https://root.cern,https://root.cern/doc/master/classRooAbsArg.html,1,['update'],['updates']
Deployability,"xtraForProblem; Maximum; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. private:. RooArgList*_constParamList; TStopwatch_cumulTimer; Bool_t_doEvalErrorWall; Int_t_evalCounter; TMatrixDSym*_extV; RooArgList*_floatParamList; RooAbsReal*_func; Bool_t_handleLocalErrors; RooArgList*_initConstParamList; RooArgList*_initFloatParamList; ofstream*_logfile; Int_t_maxEvalMult; Double_t_maxFCN; Int_t_nPar; Int_t_numBadNLL; Int_t_optConst; Int_t_printEvalErrors; Int_t_printLevel; Bool_t_profile; Int_t_status; vector<std::pair<std::string,int> >_statusHistory; static TVirtualFitter*_theFitter; TStopwatch_timer; Bool_t_verbose; Int_t_warnLevel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void cleanup(); Cleanup method called by atexit handler installed by RooSentinel; to delete all global heap objects when the program is terminated. RooMinuit(RooAbsReal& function); Construct MINUIT interface to given function. Function can be anything,; but is typically a -log(likelihood) implemented by RooNLLVar or a chi^2; (implemented by RooChi2Var). Other frequent use cases are a RooAddition; of a RooNLLVar plus a penalty or constraint term. This class propagates; all RooFit information (floating parameters, their values and errors); to MINUIT before each MINUIT call and propagates all MINUIT information; back to the RooFit object at the end of each call (updated parameter; values, their (asymmetric errors) etc. The default MINUIT error level; for HESSE and MINOS error analysis is taken from the defaultErrorLevel(); value of the input function. ~RooMinuit(); Destructor. void setStrategy(Int_t strat); Change MINUIT strategy to istrat. Accepted codes; are 0,1,2 and represent MINUIT strategies for dealing; most efficiently with fast FCNs (0), e",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooMinuit.html:8247,install,installed,8247,root/html532/RooMinuit.html,https://root.cern,https://root.cern/root/html532/RooMinuit.html,1,['install'],['installed']
Deployability,"xx. Member Data Documentation. ◆ _anaList. RooSetProxy RooRealIntegral::_anaList. protected . Set of observables over which is integrated/summed analytically. ; Definition at line 119 of file RooRealIntegral.h. ◆ _cacheAllNDim. Int_t RooRealIntegral::_cacheAllNDim. staticprotected . ! Cache all integrals with given numeric dimension ; Definition at line 145 of file RooRealIntegral.h. ◆ _cacheNum. bool RooRealIntegral::_cacheNum = false. protected . Cache integral if numeric. ; Definition at line 144 of file RooRealIntegral.h. ◆ _facList. RooSetProxy RooRealIntegral::_facList. protected . Set of observables on which function does not depends, which are integrated nevertheless. ; Definition at line 121 of file RooRealIntegral.h. ◆ _funcNormSet. std::unique_ptr<RooArgSet> RooRealIntegral::_funcNormSet. protected . Optional normalization set passed to function. ; Definition at line 124 of file RooRealIntegral.h. ◆ _function. RooRealProxy RooRealIntegral::_function. protected . Function being integrated. ; Definition at line 123 of file RooRealIntegral.h. ◆ _iconfig. RooNumIntConfig* RooRealIntegral::_iconfig = nullptr. protected . Definition at line 129 of file RooRealIntegral.h. ◆ _intList. RooSetProxy RooRealIntegral::_intList. protected . Set of continuous observables over which is integrated numerically. ; Definition at line 118 of file RooRealIntegral.h. ◆ _intOperMode. IntOperMode RooRealIntegral::_intOperMode = Hybrid. protected . integration operation mode ; Definition at line 134 of file RooRealIntegral.h. ◆ _jacList. RooSetProxy RooRealIntegral::_jacList. protected . Set of lvalue observables over which is analytically integration that have a non-unit Jacobian. ; Definition at line 120 of file RooRealIntegral.h. ◆ _mode. Int_t RooRealIntegral::_mode = 0. protected . Definition at line 133 of file RooRealIntegral.h. ◆ _numIntegrand. std::unique_ptr<RooAbsFunc> RooRealIntegral::_numIntegrand. mutableprotected . ! ; Definition at line 138 of file RooRealIntegral.h",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooRealIntegral.html:76403,integrat,integrated,76403,doc/master/classRooRealIntegral.html,https://root.cern,https://root.cern/doc/master/classRooRealIntegral.html,1,['integrat'],['integrated']
Deployability,"xx. ◆ DoCameraCenterExt(). void TGLViewerEditor::DoCameraCenterExt ; (; ). Set external camera center. ; Definition at line 354 of file TGLViewerEditor.cxx. ◆ DoCameraHome(). void TGLViewerEditor::DoCameraHome ; (; ). CameraHome was clicked. ; Definition at line 302 of file TGLViewerEditor.cxx. ◆ DoCameraOverlay(). void TGLViewerEditor::DoCameraOverlay ; (; ). Update viewer with GUI state. ; Definition at line 334 of file TGLViewerEditor.cxx. ◆ DoCaptureCenter(). void TGLViewerEditor::DoCaptureCenter ; (; ). Capture camera-center via picking. ; Definition at line 369 of file TGLViewerEditor.cxx. ◆ DoClearColor(). void TGLViewerEditor::DoClearColor ; (; Pixel_t ; color). Clear-color was changed. ; Definition at line 267 of file TGLViewerEditor.cxx. ◆ DoDrawCameraCenter(). void TGLViewerEditor::DoDrawCameraCenter ; (; ). Draw camera center. ; Definition at line 378 of file TGLViewerEditor.cxx. ◆ DoIgnoreSizesOnUpdate(). void TGLViewerEditor::DoIgnoreSizesOnUpdate ; (; ). ResetCamerasOnUpdate was toggled. ; Definition at line 276 of file TGLViewerEditor.cxx. ◆ DoResetCamerasOnUpdate(). void TGLViewerEditor::DoResetCamerasOnUpdate ; (; ). ResetCamerasOnUpdate was toggled. ; Definition at line 286 of file TGLViewerEditor.cxx. ◆ DoRotatorStart(). void TGLViewerEditor::DoRotatorStart ; (; ). Start auto-rotator. ; Definition at line 810 of file TGLViewerEditor.cxx. ◆ DoRotatorStop(). void TGLViewerEditor::DoRotatorStop ; (; ). Stop auto-rotator. ; Definition at line 822 of file TGLViewerEditor.cxx. ◆ DoUpdateScene(). void TGLViewerEditor::DoUpdateScene ; (; ). UpdateScene was clicked. ; Definition at line 294 of file TGLViewerEditor.cxx. ◆ IsA(). TClass * TGLViewerEditor::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TGCompositeFrame.; Definition at line 164 of file TGLViewerEditor.h. ◆ MakeLabeledNEntry(). TGNumberEntry * TGLViewerEditor::MakeLabeledNEntry ; (; TGCompositeFrame * ; p, . const char * ; name, . Int_t ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLViewerEditor.html:40747,toggle,toggled,40747,doc/master/classTGLViewerEditor.html,https://root.cern,https://root.cern/doc/master/classTGLViewerEditor.html,1,['toggle'],['toggled']
Deployability,"xx. ◆ RooNumRunningInt() [2/2]. RooNumRunningInt::RooNumRunningInt ; (; const RooNumRunningInt & ; other, . const char * ; name = nullptr . ). Copy constructor. ; Definition at line 66 of file RooNumRunningInt.cxx. ◆ ~RooNumRunningInt(). RooNumRunningInt::~RooNumRunningInt ; (; ). override . Destructor. ; Definition at line 79 of file RooNumRunningInt.cxx. Member Function Documentation. ◆ actualObservables(). RooFit::OwningPtr< RooArgSet > RooNumRunningInt::actualObservables ; (; const RooArgSet & ; nset); const. overrideprotectedvirtual . Return observable in nset to be cached by RooAbsCachedPdf this is always the x observable that is integrated. ; Implements RooAbsCachedReal.; Definition at line 260 of file RooNumRunningInt.cxx. ◆ actualParameters(). RooFit::OwningPtr< RooArgSet > RooNumRunningInt::actualParameters ; (; const RooArgSet & ; nset); const. overrideprotectedvirtual . Return the parameters of the cache created by RooAbsCachedPdf. ; These are always the input functions parameter, but never the integrated variable x. ; Implements RooAbsCachedReal.; Definition at line 274 of file RooNumRunningInt.cxx. ◆ binningName(). const char * RooNumRunningInt::binningName ; (; ); const. inlineoverrideprotectedvirtual . Reimplemented from RooAbsCachedReal.; Definition at line 47 of file RooNumRunningInt.h. ◆ Class(). static TClass * RooNumRunningInt::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooNumRunningInt::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooNumRunningInt::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 63 of file RooNumRunningInt.h. ◆ clone(). TObject * RooNumRunningInt::clone ; (; const char * ; newname); const. inlineoverridevirtual . Implements RooAbsArg.; Definition at line 26 of file RooNumRunningInt.h. ◆ createCache(). RooAbsCachedReal::FuncCacheElem * RooNumRunningInt::createCache ; (; con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooNumRunningInt.html:64732,integrat,integrated,64732,doc/master/classRooNumRunningInt.html,https://root.cern,https://root.cern/doc/master/classRooNumRunningInt.html,1,['integrat'],['integrated']
Deployability,xx. ◆ setVerbose(). void RooMinimizer::setVerbose ; (; bool ; flag = true). inline . Definition at line 153 of file RooMinimizer.h. ◆ simplex(). int RooMinimizer::simplex ; (; ). Execute SIMPLEX. ; Changes in parameter values and calculated errors are automatically propagated back the RooRealVars representing the floating parameters in the MINUIT operation. ; Definition at line 453 of file RooMinimizer.cxx. ◆ Streamer(). void RooMinimizer::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void RooMinimizer::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 247 of file RooMinimizer.h. ◆ update(). bool RooMinimizer::update ; (; bool ; isValid). private . Definition at line 1100 of file RooMinimizer.cxx. ◆ updateErrors(). void RooMinimizer::updateErrors ; (; ). private . Definition at line 1129 of file RooMinimizer.cxx. ◆ updateFitConfig(). void RooMinimizer::updateFitConfig ; (; ). private . Definition at line 1013 of file RooMinimizer.cxx. ◆ updateMinimizerOptions(). bool RooMinimizer::updateMinimizerOptions ; (; bool ; canDifferentMinim = true). private . Definition at line 984 of file RooMinimizer.cxx. ◆ zeroEvalCount(). void RooMinimizer::zeroEvalCount ; (; ). Definition at line 817 of file RooMinimizer.cxx. Friends And Related Symbol Documentation. ◆ RooAbsMinimizerFcn. friend class RooAbsMinimizerFcn. friend . Definition at line 197 of file RooMinimizer.h. ◆ RooFit::TestStatistics::LikelihoodGradientJob. friend class RooFit::TestStatistics::LikelihoodGradientJob. friend . Definition at line 199 of file RooMinimizer.h. ◆ RooMinimizerFcn. friend class RooMinimizerFcn. friend . Definition at line 198 of file RooMinimizer.h. Member Data Documentation. ◆ _cfg. RooMinimizer::Config RooMinimizer::_cfg. private . Definition at line 245 of file RooMinimizer.h. ◆ _config. ROOT::Fit::FitConfig RooMinimizer::_config. private . fitter configuration,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooMinimizer.html:30417,update,updateFitConfig,30417,doc/master/classRooMinimizer.html,https://root.cern,https://root.cern/doc/master/classRooMinimizer.html,1,['update'],['updateFitConfig']
Deployability,"xy &proxy);  Register an RooSetProxy in the proxy list. ;  ; void setProxyNormSet (const RooArgSet *nset);  Forward a change in the cached normalization argset to all the registered proxies. ;  ; void setShapeDirty (const RooAbsArg *source);  Notify that a shape-like property (e.g. binning) has changed. ;  ; void setValueDirty (const RooAbsArg *source);  Force element to re-evaluate itself when a value is requested. ;  ; void unRegisterProxy (RooArgProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooListProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooSetProxy &proxy);  Remove proxy from proxy list. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; std::map< Int_t, AnaIntConfig > _anaIntMap;  ! Map for analytical integration codes ;  ; RooAICRegistry _anaReg;  ! Registry for analytical integration codes ;  ; RooObjCacheManager _cacheMgr;  ; Int_t _ipOrder;  The cache manager. ;  ;  Protected Attributes inherited from RooAbsPdf; Int_t _errorCount = 0;  Number of errors remaining to print. ;  ; Int_t _negCount = 0;  Number of negative probabilities remaining to print. ;  ; RooAbsReal * _norm = nullptr;  ; RooObjCacheManager _normMgr;  ; TString _normRange;  Normalization range. ;  ; RooArgSet const * _normSet = nullptr;  Normalization integral (owned by _normMgr) ;  ; double _rawValue = 0;  ; bool _selectComp = false;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; std::unique_ptr< RooNumGenConfig > _specGeneratorConfig;  ! MC generator configuration specific for this object ;  ; Int_t _traceCount = 0;  Number of traces remaining to print. ;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsCachedPdf.html:72060,integrat,integration,72060,doc/master/classRooAbsCachedPdf.html,https://root.cern,https://root.cern/doc/master/classRooAbsCachedPdf.html,2,['integrat'],['integration']
Deployability,"xy &proxy);  Register an RooSetProxy in the proxy list. ;  ; void setProxyNormSet (const RooArgSet *nset);  Forward a change in the cached normalization argset to all the registered proxies. ;  ; void setShapeDirty (const RooAbsArg *source);  Notify that a shape-like property (e.g. binning) has changed. ;  ; void setValueDirty (const RooAbsArg *source);  Force element to re-evaluate itself when a value is requested. ;  ; void unRegisterProxy (RooArgProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooListProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooSetProxy &proxy);  Remove proxy from proxy list. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; std::vector< double > _high;  ; std::vector< double > _low;  ; double _nominal = 0;  ; RooListProxy _paramList;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; Int_t _plotBins = 100;  Number of plot bins. ;  ; double _plotMax = 0.0;  Maximum of plot range. ;  ; double _plotMin = 0.0;  Minimum of plot range. ;  ; bool _selectComp = true;  A buffer for reading values from trees. ;  ; std::unique_ptr< RooNumIntConfig > _specIntegratorConfig;  ; TreeReadBuffer * _treeReadBuffer = nullptr;  ; TString _unit;  Unit for objects value. ;  ; double _value = 0.0;  Cache for current value of object. ;  ;  Protected Attributes inherited from RooAbsArg; std::set< std::string > _boolAttrib;  ; std::set< std::string > _boolAttribTransient;  ; std::vector< RooAbsCache * > _cacheList;  ; RefCountList_t _clientList;  ; RefCountLis",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1HistFactory_1_1LinInterpVar.html:54983,integrat,integration,54983,doc/master/classRooStats_1_1HistFactory_1_1LinInterpVar.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1HistFactory_1_1LinInterpVar.html,1,['integrat'],['integration']
Deployability,"xy (RooArgProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooListProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooSetProxy &proxy);  Remove proxy from proxy list. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TH2 * _callHist;  ! Histogram recording number of calls per convolution integral calculation ;  ; RooAbsReal * _cloneModel;  Pointer to cloned model. ;  ; RooAbsReal * _clonePdf;  Pointer to cloned PDF. ;  ; RooAbsReal * _cloneVar;  Pointer to cloned convolution variable. ;  ; RooNumIntConfig _convIntConfig;  Configuration of numeric convolution integral ;. ;  ; bool _doProf;  Switch to activate profiling option. ;  ; bool _init;  ; RooConvIntegrandBinding * _integrand;  ! Binding of Convolution Integrand function ;  ; std::unique_ptr< RooAbsIntegrator > _integrator;  ! Numeric integrator of convolution integrand ;  ; RooRealProxy _origModel;  Original resolution model. ;  ; RooRealProxy _origPdf;  Original input PDF. ;  ; RooRealProxy _origVar;  Original convolution variable. ;  ; RooArgSet _ownedClonedModelSet;  Owning set of cloned model components. ;  ; RooArgSet _ownedClonedPdfSet;  Owning set of cloned PDF components. ;  ; bool _useWindow;  Switch to activate window convolution. ;  ; Int_t _verboseThresh;  Call count threshold for verbose printing. ;  ; RooListProxy _windowParam;  Holder for optional convolution integration window scaling parameter. ;  ; double _windowScale;  Scale factor for window parameter. ;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsP",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooNumConvolution.html:58588,integrat,integrator,58588,doc/master/classRooNumConvolution.html,https://root.cern,https://root.cern/doc/master/classRooNumConvolution.html,1,['integrat'],['integrator']
Deployability,"xy list. ;  ; void registerProxy (RooSetProxy &proxy);  Register an RooSetProxy in the proxy list. ;  ; void setProxyNormSet (const RooArgSet *nset);  Forward a change in the cached normalization argset to all the registered proxies. ;  ; void setShapeDirty (const RooAbsArg *source);  Notify that a shape-like property (e.g. binning) has changed. ;  ; void setValueDirty (const RooAbsArg *source);  Force element to re-evaluate itself when a value is requested. ;  ; void unRegisterProxy (RooArgProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooListProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooSetProxy &proxy);  Remove proxy from proxy list. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; RooCategoryProxy _state;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; Int_t _plotBins = 100;  Number of plot bins. ;  ; double _plotMax = 0.0;  Maximum of plot range. ;  ; double _plotMin = 0.0;  Minimum of plot range. ;  ; bool _selectComp = true;  A buffer for reading values from trees. ;  ; std::unique_ptr< RooNumIntConfig > _specIntegratorConfig;  ; TreeReadBuffer * _treeReadBuffer = nullptr;  ; TString _unit;  Unit for objects value. ;  ; double _value = 0.0;  Cache for current value of object. ;  ;  Protected Attributes inherited from RooAbsArg; std::set< std::string > _boolAttrib;  ; std::set< std::string > _boolAttribTransient;  ; std::vector< RooAbsCache * > _cacheList;  ; RefCountList_t _clientList;  ; RefCountList_t _clientListShape;  ; RefCountList_t _cl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsHiddenReal.html:55817,integrat,integration,55817,doc/master/classRooAbsHiddenReal.html,https://root.cern,https://root.cern/doc/master/classRooAbsHiddenReal.html,1,['integrat'],['integration']
Deployability,"xy list. ;  ; void unRegisterProxy (RooSetProxy &proxy);  Remove proxy from proxy list. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; RooRealProxy mean;  ; RooRealProxy sigma;  ; RooRealProxy width;  ; RooRealProxy x;  ;  Protected Attributes inherited from RooAbsPdf; Int_t _errorCount = 0;  Number of errors remaining to print. ;  ; Int_t _negCount = 0;  Number of negative probabilities remaining to print. ;  ; RooAbsReal * _norm = nullptr;  ; RooObjCacheManager _normMgr;  ; TString _normRange;  Normalization range. ;  ; RooArgSet const * _normSet = nullptr;  Normalization integral (owned by _normMgr) ;  ; double _rawValue = 0;  ; bool _selectComp = false;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; std::unique_ptr< RooNumGenConfig > _specGeneratorConfig;  ! MC generator configuration specific for this object ;  ; Int_t _traceCount = 0;  Number of traces remaining to print. ;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; Int_t _plotBins = 100;  Number of plot bins. ;  ; double _plotMax = 0.0;  Maximum of plot range. ;  ; double _plotMin = 0.0;  Minimum of plot range. ;  ; bool _selectComp = true;  A buffer for reading values from trees. ;  ; std::unique_ptr< RooNumIntConfig > _specIntegratorConfig;  ; TreeReadBuffer * _treeReadBuffer = nullptr;  ; TString _unit;  Unit for objects value. ;  ; double _value = 0.0;  Cache for current value of object. ;  ;  Protected Attributes inherited from RooAbsArg; std::set< std::string > _boolAttrib;  ; std::set< std::string > _boolAttribTransient;  ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooVoigtian.html:68859,configurat,configuration,68859,doc/master/classRooVoigtian.html,https://root.cern,https://root.cern/doc/master/classRooVoigtian.html,1,['configurat'],['configuration']
Deployability,"xy);  Register an RooSetProxy in the proxy list. ;  ; void setProxyNormSet (const RooArgSet *nset);  Forward a change in the cached normalization argset to all the registered proxies. ;  ; void setShapeDirty (const RooAbsArg *source);  Notify that a shape-like property (e.g. binning) has changed. ;  ; void setValueDirty (const RooAbsArg *source);  Force element to re-evaluate itself when a value is requested. ;  ; void unRegisterProxy (RooArgProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooListProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooSetProxy &proxy);  Remove proxy from proxy list. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; RooCFunction4Ref< VO, VI1, VI2, VI3, VI4 > func;  ; RooRealProxy w;  ; RooRealProxy x;  ; RooRealProxy y;  ; RooRealProxy z;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; Int_t _plotBins = 100;  Number of plot bins. ;  ; double _plotMax = 0.0;  Maximum of plot range. ;  ; double _plotMin = 0.0;  Minimum of plot range. ;  ; bool _selectComp = true;  A buffer for reading values from trees. ;  ; std::unique_ptr< RooNumIntConfig > _specIntegratorConfig;  ; TreeReadBuffer * _treeReadBuffer = nullptr;  ; TString _unit;  Unit for objects value. ;  ; double _value = 0.0;  Cache for current value of object. ;  ;  Protected Attributes inherited from RooAbsArg; std::set< std::string > _boolAttrib;  ; std::set< std::string > _boolAttribTransient;  ; std::vector< RooAbsCache * > _cacheList;  ; RefCountList_t _clientList;  ; RefC",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCFunction4Binding.html:55480,integrat,integration,55480,doc/master/classRooCFunction4Binding.html,https://root.cern,https://root.cern/doc/master/classRooCFunction4Binding.html,1,['integrat'],['integration']
Deployability,"xy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooSetProxy &proxy);  Remove proxy from proxy list. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; RooSetProxy _cacheObs;  Variables to be cached. ;  ; bool _cacheSource;  Keep an attached clone of the source in the cache for fast operation. ;  ; bool _useCdfBoundaries;  Are c.d.f boundary conditions used by the RooHistFuncs? ;  ; RooRealProxy func;  Proxy to function being cached. ;  ;  Protected Attributes inherited from RooAbsCachedReal; std::map< Int_t, std::pair< const RooArgSet *, const RooArgSet * > > _anaIntMap;  ! Map for analytical integration codes ;  ; RooObjCacheManager _cacheMgr;  ! The cache manager ;  ; Int_t _ipOrder;  Interpolation order for cache histograms. ;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; Int_t _plotBins = 100;  Number of plot bins. ;  ; double _plotMax = 0.0;  Maximum of plot range. ;  ; double _plotMin = 0.0;  Minimum of plot range. ;  ; bool _selectComp = true;  A buffer for reading values from trees. ;  ; std::unique_ptr< RooNumIntConfig > _specIntegratorConfig;  ; TreeReadBuffer * _treeReadBuffer = nullptr;  ; TString _unit;  Unit for objects value. ;  ; double _value = 0.0;  Cache for current value of object. ;  ;  Protected Attributes inherited from RooAbsArg; std::set< std::string > _boolAttrib;  ; std::set< std::string > _boolAttribTransient;  ; std::vector< RooAbsCache * > _cacheList;  ; RefCountList_t _clientList;  ; RefCountList_t _clientListShape;  ; RefCountList_t _clientListValue;  ; std::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCachedReal.html:58048,integrat,integration,58048,doc/master/classRooCachedReal.html,https://root.cern,https://root.cern/doc/master/classRooCachedReal.html,1,['integrat'],['integration']
Deployability,"xyxIntergrated observable. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooNumRunningInt(const char* name, const char* title, RooAbsReal& _func, RooRealVar& _x, const char* binningName = ""cache""); Construct running integral of function '_func' over x_print from; the lower bound on _x to the present value of _x using a numeric; sampling technique. The sampling frequency is controlled by the; binning named 'bname' and a default second order interpolation; is applied to smooth the histogram-based c.d.f. RooNumRunningInt(const RooNumRunningInt& other, const char* name = 0); Copy constructor. ~RooNumRunningInt(); Destructor. const char* inputBaseName() const; Return unique name for RooAbsCachedPdf cache components; constructed from input function name. void fillCacheObject(RooAbsCachedReal::FuncCacheElem& cacheFunc) const; Fill the cache object by calling its calculate() method. RooArgSet* actualObservables(const RooArgSet& nset) const; Return observable in nset to be cached by RooAbsCachedPdf; this is always the x observable that is integrated. RooArgSet* actualParameters(const RooArgSet& nset) const; Return the parameters of the cache created by RooAbsCachedPdf.; These are always the input functions parameter, but never the; integrated variable x. RooAbsCachedReal::FuncCacheElem* createCache(const RooArgSet* nset) const; Create custom cache element for running integral calculations. Double_t evaluate() const; Dummy function that is never called. TObject* clone(const char* newname) const; { return new RooNumRunningInt(*this,newname); }. const char* binningName() const; { return _binningName.c_str() ; }. const char* payloadUniqueSuffix() const; { return func.arg().aggregateCacheUniqueSuffix() ; }. » Last changed: Thu Sep 23 20:00:25 2010 » Last generated: 2010-09-23 20:00; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooNumRunningInt.html:35332,integrat,integrated,35332,root/html528/RooNumRunningInt.html,https://root.cern,https://root.cern/root/html528/RooNumRunningInt.html,2,['integrat'],['integrated']
Deployability,"xyxIntergrated observable. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooNumRunningInt(const char* name, const char* title, RooAbsReal& _func, RooRealVar& _x, const char* binningName = ""cache""); Construct running integral of function '_func' over x_print from; the lower bound on _x to the present value of _x using a numeric; sampling technique. The sampling frequency is controlled by the; binning named 'bname' and a default second order interpolation; is applied to smooth the histogram-based c.d.f. RooNumRunningInt(const RooNumRunningInt& other, const char* name = 0); Copy constructor. ~RooNumRunningInt(); Destructor. const char* inputBaseName() const; Return unique name for RooAbsCachedPdf cache components; constructed from input function name. void fillCacheObject(RooAbsCachedReal::FuncCacheElem& cacheFunc) const; Fill the cache object by calling its calculate() method. RooArgSet* actualObservables(const RooArgSet& nset) const; Return observable in nset to be cached by RooAbsCachedPdf; this is always the x observable that is integrated. RooArgSet* actualParameters(const RooArgSet& nset) const; Return the parameters of the cache created by RooAbsCachedPdf.; These are always the input functions parameter, but never the; integrated variable x. RooAbsCachedReal::FuncCacheElem* createCache(const RooArgSet* nset) const; Create custom cache element for running integral calculations. Double_t evaluate() const; Dummy function that is never called. TObject* clone(const char* newname) const; { return new RooNumRunningInt(*this,newname); }. const char* binningName() const; { return _binningName.c_str() ; }. const char* payloadUniqueSuffix() const; { return func.arg().aggregateCacheUniqueSuffix() ; }. » Last changed: Tue Jun 30 14:34:41 2015 » Last generated: 2015-06-30 14:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooNumRunningInt.html:39963,integrat,integrated,39963,root/html602/RooNumRunningInt.html,https://root.cern,https://root.cern/root/html602/RooNumRunningInt.html,2,['integrat'],['integrated']
Deployability,"xyxIntergrated observable. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooNumRunningInt(const char* name, const char* title, RooAbsReal& _func, RooRealVar& _x, const char* binningName = ""cache""); Construct running integral of function '_func' over x_print from; the lower bound on _x to the present value of _x using a numeric; sampling technique. The sampling frequency is controlled by the; binning named 'bname' and a default second order interpolation; is applied to smooth the histogram-based c.d.f. RooNumRunningInt(const RooNumRunningInt& other, const char* name = 0); Copy constructor. ~RooNumRunningInt(); Destructor. const char* inputBaseName() const; Return unique name for RooAbsCachedPdf cache components; constructed from input function name. void fillCacheObject(RooAbsCachedReal::FuncCacheElem& cacheFunc) const; Fill the cache object by calling its calculate() method. RooArgSet* actualObservables(const RooArgSet& nset) const; Return observable in nset to be cached by RooAbsCachedPdf; this is always the x observable that is integrated. RooArgSet* actualParameters(const RooArgSet& nset) const; Return the parameters of the cache created by RooAbsCachedPdf.; These are always the input functions parameter, but never the; integrated variable x. RooAbsCachedReal::FuncCacheElem* createCache(const RooArgSet* nset) const; Create custom cache element for running integral calculations. Double_t evaluate() const; Dummy function that is never called. TObject* clone(const char* newname) const; { return new RooNumRunningInt(*this,newname); }. const char* binningName() const; { return _binningName.c_str() ; }. const char* payloadUniqueSuffix() const; { return func.arg().aggregateCacheUniqueSuffix() ; }. » Last changed: Tue Mar 10 17:18:18 2015 » Last generated: 2015-03-10 17:18; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooNumRunningInt.html:38459,integrat,integrated,38459,root/html534/RooNumRunningInt.html,https://root.cern,https://root.cern/root/html534/RooNumRunningInt.html,2,['integrat'],['integrated']
Deployability,"y &proxy);  Register an RooSetProxy in the proxy list. ;  ; void setProxyNormSet (const RooArgSet *nset);  Forward a change in the cached normalization argset to all the registered proxies. ;  ; void setShapeDirty (const RooAbsArg *source);  Notify that a shape-like property (e.g. binning) has changed. ;  ; void setValueDirty (const RooAbsArg *source);  Force element to re-evaluate itself when a value is requested. ;  ; void unRegisterProxy (RooArgProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooListProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooSetProxy &proxy);  Remove proxy from proxy list. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; RooListProxy _set1;  Set of input fractions. ;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; Int_t _plotBins = 100;  Number of plot bins. ;  ; double _plotMax = 0.0;  Maximum of plot range. ;  ; double _plotMin = 0.0;  Minimum of plot range. ;  ; bool _selectComp = true;  A buffer for reading values from trees. ;  ; std::unique_ptr< RooNumIntConfig > _specIntegratorConfig;  ; TreeReadBuffer * _treeReadBuffer = nullptr;  ; TString _unit;  Unit for objects value. ;  ; double _value = 0.0;  Cache for current value of object. ;  ;  Protected Attributes inherited from RooAbsArg; std::set< std::string > _boolAttrib;  ; std::set< std::string > _boolAttribTransient;  ; std::vector< RooAbsCache * > _cacheList;  ; RefCountList_t _clientList;  ; RefCountList_t _clientListShape;  ; RefCountList_t _clientListValue;  ; std::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFracRemainder.html:54895,integrat,integration,54895,doc/master/classRooFracRemainder.html,https://root.cern,https://root.cern/doc/master/classRooFracRemainder.html,1,['integrat'],['integration']
Deployability,"y &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooListProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooSetProxy &proxy);  Remove proxy from proxy list. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; RooRealProxy _if;  Int(F(x))dx ;. ;  ; RooRealProxy _ixf;  Int((X-offset)*F(X))dx ;. ;  ; RooRealProxy _xf;  (X-offset)*F ;  ; double _xfOffset;  offset ;  ;  Protected Attributes inherited from RooAbsMoment; RooRealProxy _func;  Input function. ;  ; RooRealProxy _mean;  Mean (if calculated for central moment) ;  ; RooSetProxy _nset;  Normalization set (optional) ;  ; Int_t _order = 1;  Moment order. ;  ; Int_t _takeRoot = false;  Return n-order root of moment. ;  ; RooRealProxy _x;  Observable. ;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; Int_t _plotBins = 100;  Number of plot bins. ;  ; double _plotMax = 0.0;  Maximum of plot range. ;  ; double _plotMin = 0.0;  Minimum of plot range. ;  ; bool _selectComp = true;  A buffer for reading values from trees. ;  ; std::unique_ptr< RooNumIntConfig > _specIntegratorConfig;  ; TreeReadBuffer * _treeReadBuffer = nullptr;  ; TString _unit;  Unit for objects value. ;  ; double _value = 0.0;  Cache for current value of object. ;  ;  Protected Attributes inherited from RooAbsArg; std::set< std::string > _boolAttrib;  ; std::set< std::string > _boolAttribTransient;  ; std::vector< RooAbsCache * > _cacheList;  ; RefCountList_t _clientList;  ; RefCountList_t _clientListShape;  ; RefCountList_t _clientListValue;  ; std::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooSecondMoment.html:55936,integrat,integration,55936,doc/master/classRooSecondMoment.html,https://root.cern,https://root.cern/doc/master/classRooSecondMoment.html,1,['integrat'],['integration']
Deployability,"y &proxy);  Remove proxy from proxy list. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Static Protected Member Functions; static Int_t GetNumBins (const RooArgSet &vars);  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  . Protected Attributes; RooDataHist _dataSet;  ; RooListProxy _dataVars;  The RooRealVars. ;  ; RooObjCacheManager _normIntMgr;  ! The integration cache manager ;  ; Int_t _numBins = 0;  ; NumBins _numBinsPerDim;  ; RooListProxy _paramSet;  interpolation parameters ;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; Int_t _plotBins = 100;  Number of plot bins. ;  ; double _plotMax = 0.0;  Maximum of plot range. ;  ; double _plotMin = 0.0;  Minimum of plot range. ;  ; bool _selectComp = true;  A buffer for reading values from trees. ;  ; std::unique_ptr< RooNumIntConfig > _specIntegratorConfig;  ; TreeReadBuffer * _treeReadBuffer = nullptr;  ; TString _unit;  Unit for objects value. ;  ; double _value = 0.0;  Cache for current value of object. ;  ;  Protected Attributes inherited from RooAbsArg; std::set< std::string > _boolAttrib;  ; std::set< std::string > _boolAttribTransient;  ; std::vector< RooAbsCache * > _cacheList;  ; RefCountList_t _clie",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classParamHistFunc.html:57820,integrat,integration,57820,doc/master/classParamHistFunc.html,https://root.cern,https://root.cern/doc/master/classParamHistFunc.html,2,['integrat'],['integration']
Deployability,"y Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooParamHistFunc() [1/3]. RooParamHistFunc::RooParamHistFunc ; (; ). inline . Definition at line 26 of file RooParamHistFunc.h. ◆ RooParamHistFunc() [2/3]. RooParamHistFunc::RooParamHistFunc ; (; const char * ; name, . const char * ; title, . RooDataHist & ; dh, . const RooAbsArg & ; x, . const RooParamHistFunc * ; paramSource = nullptr, . bool ; paramRelative = true . ). Definition at line 32 of file RooParamHistFunc.cxx. ◆ RooParamHistFunc() [3/3]. RooParamHistFunc::RooParamHistFunc ; (; const RooParamHistFunc & ; other, . const char * ; name = nullptr . ). Definition at line 62 of file RooParamHistFunc.cxx. Member Function Documentation. ◆ analyticalIntegralWN(). double RooParamHistFunc::analyticalIntegralWN ; (; Int_t ; code, . const RooArgSet * ; normSet, . const char * ; rangeName = nullptr . ); const. overridevirtual . Implement analytical integrations by doing appropriate weighting from component integrals functions to integrators of components. ; Reimplemented from RooAbsReal.; Definition at line 212 of file RooParamHistFunc.cxx. ◆ binBoundaries(). std::list< double > * RooParamHistFunc::binBoundaries ; (; RooAbsRealLValue & ; obs, . double ; xlo, . double ; xhi . ); const. overridevirtual . Return sampling hint for making curves of (projections) of this function as the recursive division strategy of RooCurve cannot deal efficiently with the vertical lines that occur in a non-interpolated histogram. ; Reimplemented from RooAbsReal.; Definition at line 167 of file RooParamHistFunc.cxx. ◆ Class(). static TClass * RooParamHistFunc::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooParamHistFunc::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooParamHistFunc::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 63 of f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooParamHistFunc.html:61632,integrat,integrations,61632,doc/master/classRooParamHistFunc.html,https://root.cern,https://root.cern/doc/master/classRooParamHistFunc.html,2,['integrat'],"['integrations', 'integrators']"
Deployability,"y PDF parameter error by ordinal index (needed by MINUIT). void ClearPdfParamAsymErr(Int_t index); Modify PDF parameter error by ordinal index (needed by MINUIT). void SetPdfParamErr(Int_t index, Double_t loVal, Double_t hiVal); Modify PDF parameter error by ordinal index (needed by MINUIT). void BackProp(const ROOT::Fit::FitResult& results); Transfer MINUIT fit results back into RooFit objects. Bool_t SetLogFile(const char* inLogfile); Change the file name for logging of a RooMinimizer of all MINUIT steppings; through the parameter space. If inLogfile is null, the current log file; is closed and logging is stopped. void ApplyCovarianceMatrix(TMatrixDSym& V); Apply results of given external covariance matrix. i.e. propagate its errors; to all RRV parameter representations and give this matrix instead of the; HESSE matrix at the next save() call. Bool_t SetPdfParamVal(const Int_t& index, const Double_t& value) const; RooRealVar* par = (RooRealVar*)_floatParamList->at(index);. void updateFloatVec(). double DoEval(const double* x) const. unsigned int NDim() const; { return _nDim; }. RooArgList* GetFloatParamList(); { return _floatParamList; }. RooArgList* GetConstParamList(); { return _constParamList; }. RooArgList* GetInitFloatParamList(); { return _initFloatParamList; }. RooArgList* GetInitConstParamList(); { return _initConstParamList; }. void SetEvalErrorWall(Bool_t flag); { _doEvalErrorWall = flag ; }. void SetPrintEvalErrors(Int_t numEvalErrors); { _printEvalErrors = numEvalErrors ; }. std::ofstream* GetLogFile(); { return _logfile; }. void SetVerbose(Bool_t flag = kTRUE); { _verbose = flag ; }. Double_t& GetMaxFCN(); { return _maxFCN; }. Int_t GetNumInvalidNLL(); { return _numBadNLL; }. Int_t evalCounter() const; { return _evalCounter ; }. void zeroEvalCount(); { _evalCounter = 0 ; }. » Last changed: Tue Jun 30 14:34:00 2015 » Last generated: 2015-06-30 14:34; This page has been automatically generated. For comments or suggestions regarding the documentation or R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooMinimizerFcn.html:4114,update,updateFloatVec,4114,root/html602/RooMinimizerFcn.html,https://root.cern,https://root.cern/root/html602/RooMinimizerFcn.html,1,['update'],['updateFloatVec']
Deployability,"y PDF parameter error by ordinal index (needed by MINUIT). void ClearPdfParamAsymErr(Int_t index); Modify PDF parameter error by ordinal index (needed by MINUIT). void SetPdfParamErr(Int_t index, Double_t loVal, Double_t hiVal); Modify PDF parameter error by ordinal index (needed by MINUIT). void BackProp(const ROOT::Fit::FitResult& results); Transfer MINUIT fit results back into RooFit objects. Bool_t SetLogFile(const char* inLogfile); Change the file name for logging of a RooMinimizer of all MINUIT steppings; through the parameter space. If inLogfile is null, the current log file; is closed and logging is stopped. void ApplyCovarianceMatrix(TMatrixDSym& V); Apply results of given external covariance matrix. i.e. propagate its errors; to all RRV parameter representations and give this matrix instead of the; HESSE matrix at the next save() call. Bool_t SetPdfParamVal(const Int_t& index, const Double_t& value) const; RooRealVar* par = (RooRealVar*)_floatParamList->at(index);. void updateFloatVec(). double DoEval(const double* x) const. unsigned int NDim() const; { return _nDim; }. RooArgList* GetFloatParamList(); { return _floatParamList; }. RooArgList* GetConstParamList(); { return _constParamList; }. RooArgList* GetInitFloatParamList(); { return _initFloatParamList; }. RooArgList* GetInitConstParamList(); { return _initConstParamList; }. void SetEvalErrorWall(Bool_t flag); { _doEvalErrorWall = flag ; }. void SetPrintEvalErrors(Int_t numEvalErrors); { _printEvalErrors = numEvalErrors ; }. std::ofstream* GetLogFile(); { return _logfile; }. void SetVerbose(Bool_t flag = kTRUE); { _verbose = flag ; }. Double_t& GetMaxFCN(); { return _maxFCN; }. Int_t GetNumInvalidNLL(); { return _numBadNLL; }. Int_t evalCounter() const; { return _evalCounter ; }. void zeroEvalCount(); { _evalCounter = 0 ; }. » Last changed: Tue Sep 8 17:42:18 2015 » Last generated: 2015-09-08 17:42; This page has been automatically generated. For comments or suggestions regarding the documentation or RO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/RooMinimizerFcn.html:4114,update,updateFloatVec,4114,root/html604/RooMinimizerFcn.html,https://root.cern,https://root.cern/root/html604/RooMinimizerFcn.html,1,['update'],['updateFloatVec']
Deployability,"y and TUnfoldBinning ;  testUnfold5c.C Test program for the classes TUnfoldDensity and TUnfoldBinning ;  testUnfold5d.C Test program for the classes TUnfoldDensity and TUnfoldBinning ;  testUnfold6.C Test program for the class TUnfoldBinning ;  testUnfold7a.C Test program for the classes TUnfoldDensity and TUnfoldBinning ;  testUnfold7b.C Test program for the classes TUnfoldDensity and TUnfoldBinning ;  testUnfold7c.C Test program for the classes TUnfoldDensity and TUnfoldBinning ;  ► unuran;  unuranDemo.CExample macro to show unuran capabilities The results are compared with what is obtained using TRandom or TF1::GetRandom The macro is divided in 3 parts: ;  unuranFoamTest.CThis program must be compiled and executed with Aclic as follows ;  ► v7;  box.cxxThis ROOT 7 example demonstrates how to create a ROOT 7 canvas (RCanvas) and draw ROOT 7 boxes in it (RBox) ;  concurrentfill.cxx;  draw.cxx;  draw_mt.cxxThis macro demonstrate usage of ROOT7 graphics from many threads Three different canvases in three different threads are started and regularly updated ;  draw_rh1.cxxThis macro generates a small V7 TH1D, fills it and draw it in a V7 canvas ;  draw_subpads.cxx;  draw_v6.cxx;  fitpanel.cxx;  histops.cxx;  line.cxxThis ROOT 7 example demonstrates how to create a ROOT 7 canvas (RCanvas) and draw ROOT 7 lines in it (RLine) ;  lineStyle.cxx;  lineWidth.cxx;  markerStyle.cxx;  pad.cxx;  perf.cxx;  perfcomp.cxx;  simple.cxx;  text.cxx;  ► vecops;  vo001_AdoptOrOwnMemory.C In this tutorial we learn how the RVec class can be used to adopt existing memory or allocate some ;  vo001_AdoptOrOwnMemory.py In this tutorial we learn how the RVec class can be used to adopt existing memory or allocate some ;  vo002_VectorCalculations.C In this tutorial we learn how the RVec class can be used to express easily mathematical operations involving arrays and scalars ;  vo003_LogicalOperations.C In this tutorial we learn how the RVec class can be used to express logical operations ;  vo004",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v616/files.html:171637,update,updated,171637,doc/v616/files.html,https://root.cern,https://root.cern/doc/v616/files.html,1,['update'],['updated']
Deployability,"y copy is deleted and the object is again read from the file. If opt==""dirs"", only subdirectories will be read If opt==""dirs*"" complete directory tree will be read ; Reimplemented from TDirectory.; Definition at line 1326 of file TDirectoryFile.cxx. ◆ ReadKeys(). Int_t TDirectoryFile::ReadKeys ; (; Bool_t ; forceRead = kTRUE). overridevirtual . Read the linked list of keys. ; Every directory has a linked list (fKeys). This linked list has been written on the file via WriteKeys as a single data record.; It is interesting to call this function in the following situation. Assume another process1 is connecting this directory in Update mode; Process1 is adding/updating objects in this directory; You want to see the latest status from process1. Example Process1: obj1.Write();; obj2.Write();; gDirectory->SaveSelf();; gDirectory#define gDirectoryDefinition TDirectory.h:384. Example Process2: gDirectory->ReadKeys();; obj1->Draw();; This is an efficient way (without opening/closing files) to view the latest updates of a file being modified by another process as it is typically the case in a data acquisition system. ; Reimplemented from TDirectory.; Definition at line 1379 of file TDirectoryFile.cxx. ◆ ReadTObject(). Int_t TDirectoryFile::ReadTObject ; (; TObject * ; obj, . const char * ; keyname . ). overridevirtual . Read object with keyname from the current directory. ; Read contents of object with specified name from the current directory. First the key with keyname is searched in the current directory, next the key buffer is deserialized into the object. The object must have been created before via the default constructor. See TObject::Write(). ; Reimplemented from TDirectory.; Definition at line 1465 of file TDirectoryFile.cxx. ◆ ResetAfterMerge(). void TDirectoryFile::ResetAfterMerge ; (; TFileMergeInfo * ; info). virtual . Reset the TDirectory after its content has been merged into another Directory. ; This returns the TDirectoryFile object back to its state before any",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDirectoryFile.html:44220,update,updates,44220,doc/master/classTDirectoryFile.html,https://root.cern,https://root.cern/doc/master/classTDirectoryFile.html,1,['update'],['updates']
Deployability,"y dir locker; TPMERegexp*fReInvalidRegular expression matching invalid dataset URIs; TStringfSandboxPROOF sandbox root dir; TStringfSelectionInternal variable to pass drawing options; TServerSocket*fServSockServer socket to accept call backs; TStringfSockPathUNIX socket path for communication with workers; TStringfVarExpInternal variable to pass drawing options; static Int_tfgWrksMaxMax number of workers. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofLite(const char* masterurl, const char* conffile = kPROOF_ConfFile, const char* confdir = kPROOF_ConfDir, Int_t loglevel = 0, const char* alias = 0, TProofMgr* mgr = 0); Create a PROOF environment. Starting PROOF involves either connecting; to a master server, which in turn will start a set of slave servers, or; directly starting as master server (if master = """"). Masterurl is of; the form: [proof[s]://]host[:port]. Conffile is the name of the config; file describing the remote PROOF cluster (this argument alows you to; describe different cluster configurations).; The default is proof.conf. Confdir is the directory where the config; file and other PROOF related files are (like motd and noproof files).; Loglevel is the log level (default = 1). User specified custom config; files will be first looked for in $HOME/.conffile. Int_t Init(const char* masterurl, const char* conffile, const char* confdir, Int_t loglevel, const char* alias = 0); Start the PROOF environment. Starting PROOF involves either connecting; to a master server, which in turn will start a set of slave servers, or; directly starting as master server (if master = """"). For a description; of the arguments see the TProof ctor. Returns the number of started; master or slave servers, returns 0 in case of error, in which case; fValid remains false. ~TProofLite(); Destructor. Int_t GetNumberOfWorkers(const char* url = 0); Static method to determine the number of workers giving priority to users request.; Otherwise",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProofLite.html:28371,configurat,configurations,28371,root/html534/TProofLite.html,https://root.cern,https://root.cern/root/html534/TProofLite.html,3,['configurat'],['configurations']
Deployability,"y from proxy list. ;  ; void unRegisterProxy (RooSetProxy &proxy);  Remove proxy from proxy list. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; RooRealProxy c;  ; RooRealProxy m;  ; RooRealProxy m0;  ; RooRealProxy p;  ;  Protected Attributes inherited from RooAbsPdf; Int_t _errorCount = 0;  Number of errors remaining to print. ;  ; Int_t _negCount = 0;  Number of negative probabilities remaining to print. ;  ; RooAbsReal * _norm = nullptr;  ; RooObjCacheManager _normMgr;  ; TString _normRange;  Normalization range. ;  ; RooArgSet const * _normSet = nullptr;  Normalization integral (owned by _normMgr) ;  ; double _rawValue = 0;  ; bool _selectComp = false;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; std::unique_ptr< RooNumGenConfig > _specGeneratorConfig;  ! MC generator configuration specific for this object ;  ; Int_t _traceCount = 0;  Number of traces remaining to print. ;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; Int_t _plotBins = 100;  Number of plot bins. ;  ; double _plotMax = 0.0;  Maximum of plot range. ;  ; double _plotMin = 0.0;  Minimum of plot range. ;  ; bool _selectComp = true;  A buffer for reading values from trees. ;  ; std::unique_ptr< RooNumIntConfig > _specIntegratorConfig;  ; TreeReadBuffer * _treeReadBuffer = nullptr;  ; TString _unit;  Unit for objects value. ;  ; double _value = 0.0;  Cache for current value of object. ;  ;  Protected Attributes inherited from RooAbsArg; std::set< std::string > _boolAttrib;  ; std::set< std::string > _boolAttribTransient;  ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooArgusBG.html:68289,configurat,configuration,68289,doc/master/classRooArgusBG.html,https://root.cern,https://root.cern/doc/master/classRooArgusBG.html,1,['configurat'],['configuration']
Deployability,"y list. ;  ; void setProxyNormSet (const RooArgSet *nset);  Forward a change in the cached normalization argset to all the registered proxies. ;  ; void setShapeDirty (const RooAbsArg *source);  Notify that a shape-like property (e.g. binning) has changed. ;  ; void setValueDirty (const RooAbsArg *source);  Force element to re-evaluate itself when a value is requested. ;  ; void unRegisterProxy (RooArgProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooListProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooSetProxy &proxy);  Remove proxy from proxy list. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; bool _cdfBoundaries = false;  Use boundary conditions for CDFs. ;  ; RooAICRegistry _codeReg;  ! Auxiliary class keeping tracking of analytical integration code ;  ; RooDataHist * _dataHist = nullptr;  Unowned pointer to underlying histogram. ;  ; RooArgSet _histObsList;  List of observables defining dimensions of histogram. ;  ; Int_t _intOrder = 0;  Interpolation order. ;  ; std::unique_ptr< RooDataHist > _ownedDataHist;  ! Owned pointer to underlying histogram ;  ; RooSetProxy _pdfObsList;  List of observables mapped onto histogram observables. ;  ; double _totVolume = 0.0;  ! Total volume of space (product of ranges of observables) ;  ; bool _unitNorm = false;  Assume contents is unit normalized (for use as pdf cache) ;  ;  Protected Attributes inherited from RooAbsPdf; Int_t _errorCount = 0;  Number of errors remaining to print. ;  ; Int_t _negCount = 0;  Number of negative probabilities remaining to print. ;  ; RooAbsReal * _norm = nullptr;  ; RooObjCacheManager _normMgr;  ; TString _normRange;  Normalization range. ;  ; RooArgSet const * _normSet = nullptr;  Normalization integral (owned by _normMgr) ;  ; double _rawValue = 0;  ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooHistPdf.html:68897,integrat,integration,68897,doc/master/classRooHistPdf.html,https://root.cern,https://root.cern/doc/master/classRooHistPdf.html,1,['integrat'],['integration']
Deployability,"y list. ;  ; void setProxyNormSet (const RooArgSet *nset);  Forward a change in the cached normalization argset to all the registered proxies. ;  ; void setShapeDirty (const RooAbsArg *source);  Notify that a shape-like property (e.g. binning) has changed. ;  ; void setValueDirty (const RooAbsArg *source);  Force element to re-evaluate itself when a value is requested. ;  ; void unRegisterProxy (RooArgProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooListProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooSetProxy &proxy);  Remove proxy from proxy list. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; bool _cdfBoundaries = false;  Use boundary conditions for CDFs. ;  ; RooAICRegistry _codeReg;  ! Auxiliary class keeping tracking of analytical integration code ;  ; RooDataHist * _dataHist = nullptr;  Unowned pointer to underlying histogram. ;  ; RooSetProxy _depList;  List of observables mapped onto histogram observables. ;  ; RooArgSet _histObsList;  List of observables defining dimensions of histogram. ;  ; Int_t _intOrder = 0;  Interpolation order. ;  ; std::unique_ptr< RooDataHist > _ownedDataHist;  ! Owned pointer to underlying histogram ;  ; double _totVolume = 0.0;  ! Total volume of space (product of ranges of observables) ;  ; bool _unitNorm = false;  ! Assume contents is unit normalized (for use as pdf cache) ;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; Int_t _plotBins = 100;  Number of plot bins. ;  ; double _plotMax = 0.0;  Maximum of plot ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooHistFunc.html:56679,integrat,integration,56679,doc/master/classRooHistFunc.html,https://root.cern,https://root.cern/doc/master/classRooHistFunc.html,1,['integrat'],['integration']
Deployability,"y list. ;  ; void unRegisterProxy (RooSetProxy &proxy);  Remove proxy from proxy list. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; RooListProxy _coefList;  ; TArrayD _limits;  ; Int_t _nBins = 0;  ; RooRealProxy _x;  ;  Protected Attributes inherited from RooAbsPdf; Int_t _errorCount = 0;  Number of errors remaining to print. ;  ; Int_t _negCount = 0;  Number of negative probabilities remaining to print. ;  ; RooAbsReal * _norm = nullptr;  ; RooObjCacheManager _normMgr;  ; TString _normRange;  Normalization range. ;  ; RooArgSet const * _normSet = nullptr;  Normalization integral (owned by _normMgr) ;  ; double _rawValue = 0;  ; bool _selectComp = false;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; std::unique_ptr< RooNumGenConfig > _specGeneratorConfig;  ! MC generator configuration specific for this object ;  ; Int_t _traceCount = 0;  Number of traces remaining to print. ;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; Int_t _plotBins = 100;  Number of plot bins. ;  ; double _plotMax = 0.0;  Maximum of plot range. ;  ; double _plotMin = 0.0;  Minimum of plot range. ;  ; bool _selectComp = true;  A buffer for reading values from trees. ;  ; std::unique_ptr< RooNumIntConfig > _specIntegratorConfig;  ; TreeReadBuffer * _treeReadBuffer = nullptr;  ; TString _unit;  Unit for objects value. ;  ; double _value = 0.0;  Cache for current value of object. ;  ;  Protected Attributes inherited from RooAbsArg; std::set< std::string > _boolAttrib;  ; std::set< std::string > _boolAttribTransient;  ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooParametricStepFunction.html:71965,configurat,configuration,71965,doc/master/classRooParametricStepFunction.html,https://root.cern,https://root.cern/doc/master/classRooParametricStepFunction.html,1,['configurat'],['configuration']
Deployability,"y of ROOT’s python modules; the developer build option asserts is introduced to enable/disable asserts via the NDEBUG C/CXX flag. Asserts are always enabled for CMAKE_BUILD_TYPE=Debug and dev=ON. The previous behavior of the builds set via the CMAKE_BUILD_TYPE variable has not changed.; CMAKE_CXX_STANDARD, i.e. the C++ standard ROOT is built with, now defaults to the compiler default (or C++11 if the compiler default is older than that) rather than always defaulting to C++11. In turn this means that v6.24 is the first ROOT release for which ROOT’s pre-compiled binaries are not compiled with C++11 but with the default standard in use by the default system compiler. On Ubuntu 20.04, for example, the v6.24 pre-compiled binaries are now compiled with C++14 rather than C++11 as it happened for previous ROOT versions. Also see ROOT-10692. The following builtins have been updated:. VecCore 0.7.0; LZ4 1.9.3; openui5; Xrootd 4.12.8; Zstd 1.4.8. PyROOT. Deprecate TTree.AsMatrix in this release and mark for removal in v6.26. Please use instead RDataFrame.AsNumpy. Bugs and Issues fixed in this release. [ROOT-9790] - [DF] Lazy jitting of Cache and Snapshot; [ROOT-3579] - RooTreeDataStore not Cloning the tree properly (and const correctness); [ROOT-3635] - integration for PDF value in binned fit; [ROOT-3874] - problem with binned likelihood fit in RooFit; [ROOT-5334] - RooFit RooAbsPdf::getLogVal() returns log((double)0) (==inf !). [ROOT-5380] - 2D fit not converging when using RooProdPDF and RooFFTConvPdf; [ROOT-5464] - GetEntries reports warning when friend chain with index; [ROOT-6505] - ROOT fails to read a file with particular branch names interactively; [ROOT-6892] - Memory leak in TSocket::SendProcessIDs; [ROOT-7182] - gSystem->cd has negative effect on TFile with relative path; [ROOT-7199] - Clang error dumping Expr originated by a typo at the prompt; [ROOT-7506] - Problem with axis in TMVAMultiClassGui when showing “Classifier Output Distributions”; [ROOT-7507] - Setting",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v624/release-notes.html:30455,release,release,30455,doc/v624/release-notes.html,https://root.cern,https://root.cern/doc/v624/release-notes.html,1,['release'],['release']
Deployability,"y of the result.; nfnevl : number of function evaluations performed.; ifail :; 0 Normal exit. . At least minpts and at most maxpts calls to the function were performed.; 1 maxpts is too small for the specified accuracy eps.; The result and relerr contain the values obtainable for the; specified value of maxpts.; 3 n<2 or n>15. Method:. An integration rule of degree seven is used together with a certain; strategy of subdivision.; For a more detailed description of the method see References. Notes:. 1.Multi-dimensional integration is time-consuming. For each rectangular; subregion, the routine requires function evaluations.; Careful programming of the integrand might result in substantial saving; of time.; 2.Numerical integration usually works best for smooth functions.; Some analysis or suitable transformations of the integral prior to; numerical work may contribute to numerical efficiency. References:. 1.A.C. Genz and A.A. Malik, Remarks on algorithm 006:; An adaptive algorithm for numerical integration over; an N-dimensional rectangular region, J. Comput. Appl. Math. 6 (1980) 295-302.; 2.A. van Doren and L. de Ridder, An adaptive algorithm for numerical; integration over an n-dimensional cube, J.Comput. Appl. Math. 2 (1976) 207-217. Bool_t IsInside(const Double_t* x) const; Return kTRUE if the point is inside the function range. void Paint(Option_t* option = """"); Paint this function with its current attributes. void Print(Option_t* option = """") const; Dump this function with its attributes. void ReleaseParameter(Int_t ipar); Release parameter number ipar If used in a fit, the parameter; can vary freely. The parameter limits are reset to 0,0. void Save(Double_t xmin, Double_t xmax, Double_t ymin, Double_t ymax, Double_t zmin, Double_t zmax); Save values of function in array fSave. void SavePrimitive(ostream& out, Option_t* option = """"); Save primitive as a C++ statement(s) on output stream out. void SetCurrent(TF1* f1); Static function setting the current function.;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TF1.html:58925,integrat,integration,58925,root/html528/TF1.html,https://root.cern,https://root.cern/root/html528/TF1.html,4,['integrat'],['integration']
Deployability,"y only to MC integratioon methods). this is ambigous; template<class Function>; IntegratorMultiDim(Function & f, unsigned int dim, IntegrationMultiDim::Type type = IntegrationMultiDim::kADAPTIVE, double absTol = 1.E-9, double relTol = 1E-6, unsigned int ncall = 100000) {; fIntegrator = CreateIntegrator(type, absTol, relTol, ncall);; SetFunction(f, dim);; }; destructor. IntegratorMultiDim(const ROOT::Math::IntegratorMultiDim& ); disable copy constructur and assignment operator. {}. IntegratorMultiDim & operator=(const ROOT::Math::IntegratorMultiDim& ); { return *this; }. double Integral(const double* xmin, const double* xmax). evaluate the integral with the previously given function between xmin[] and xmax[]. double Integral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); evaluate the integral passing a new function. double Result() const; return result of last integration. { return fIntegrator == 0 ? 0 : fIntegrator->Result(); }. double Error() const; return integration error. { return fIntegrator == 0 ? 0 : fIntegrator->Error(); }. int Status() const; return the Error Status of the last Integral calculation. { return fIntegrator == 0 ? -1 : fIntegrator->Status(); }. void SetRelTolerance(double relTol); return number of function evaluations in calculating the integral; unsigned int NEval() const { return fNEval; }; set the relative tolerance. { if (fIntegrator) fIntegrator->SetRelTolerance(relTol); }. void SetAbsTolerance(double absTol); set absolute tolerance. { if (fIntegrator) fIntegrator->SetAbsTolerance(absTol); }. void SetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); set the options. { if (fIntegrator) fIntegrator->SetOptions(opt); }. VirtualIntegratorMultiDim * GetIntegrator(); return a pointer to integrator object. { return fIntegrator; }. std::string Name() const; return name of integrator. { return (fIntegrator) ? Options().Integrator() : std::string(""""); }. IntegrationMultiDim::Type GetType(const char* name); ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__IntegratorMultiDim.html:5145,integrat,integration,5145,root/html528/ROOT__Math__IntegratorMultiDim.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__IntegratorMultiDim.html,6,['integrat'],['integration']
Deployability,"y owned proxies upon creation. After registration, this arg will forward pointer changes from serverRedirects and updates in cached normalization sets to the proxies immediately after they occur. The proxied argument is also added as value and/or shape server ; Definition at line 1329 of file RooAbsArg.cxx. ◆ registerProxy() [2/3]. void RooAbsArg::registerProxy ; (; RooListProxy & ; proxy). protected . Register an RooListProxy in the proxy list. ; This function is called by owned proxies upon creation. After registration, this arg will forward pointer changes from serverRedirects and updates in cached normalization sets to the proxies immediately after they occur. ; Definition at line 1408 of file RooAbsArg.cxx. ◆ registerProxy() [3/3]. void RooAbsArg::registerProxy ; (; RooSetProxy & ; proxy). protected . Register an RooSetProxy in the proxy list. ; This function is called by owned proxies upon creation. After registration, this arg will forward pointer changes from serverRedirects and updates in cached normalization sets to the proxies immediately after they occur. ; Definition at line 1373 of file RooAbsArg.cxx. ◆ removeServer(). void RooAbsArg::removeServer ; (; RooAbsArg & ; server, . bool ; force = false . ). Unregister another RooAbsArg as a server to us, ie, declare that we no longer depend on its value and shape. ; Definition at line 378 of file RooAbsArg.cxx. ◆ removeStringAttribute(). void RooAbsArg::removeStringAttribute ; (; const Text_t * ; key). Delete a string attribute with a given key. ; Definition at line 266 of file RooAbsArg.cxx. ◆ replaceServer(). void RooAbsArg::replaceServer ; (; RooAbsArg & ; oldServer, . RooAbsArg & ; newServer, . bool ; propValue, . bool ; propShape . ). Replace 'oldServer' with 'newServer', specifying whether the new server has value or shape server properties. ; WarningThis function should not be used! This method is quite unsafe for many reasons. For once, the new server will be put at the end of the server list, no matt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsArg.html:93505,update,updates,93505,doc/master/classRooAbsArg.html,https://root.cern,https://root.cern/doc/master/classRooAbsArg.html,1,['update'],['updates']
Deployability,"y pool; static char*_poolCur! Next free slot in memory pool; static char*_poolEnd! End of memory pool; TNamed*RooAbsCollection::_structureTag! Structure tag; TNamed*RooAbsCollection::_typedStructureTag! Typed structure tag. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void cleanup(); Clear memoery pool on exit to avoid reported memory leaks. void* operator new(size_t bytes); Overloaded new operator guarantees that all RooArgSets allocated with new; have a unique address, a property that is exploited in several places; in roofit to quickly index contents on normalization set pointers.; The memory pool only allocates space for the class itself. The elements; stored in the set are stored outside the pool. void* operator new(size_t bytes, void* ptr); Overloaded new operator with placement does not guarante that all; RooArgSets allocated with new have a unique address, but uses the global; operator. void operator delete(void* ptr); Memory is owned by pool, we need to do nothing to release it. RooArgSet(); Default constructor. RooArgSet(const RooArgList& list); Constructor from a RooArgList. If the list contains multiple; objects with the same name, only the first is store in the set.; Warning messages will be printed for dropped items. RooArgSet(const RooArgList& list, const RooAbsArg* var1); Constructor from a RooArgList. If the list contains multiple; objects with the same name, only the first is store in the set.; Warning messages will be printed for dropped items. RooArgSet(const char* name); Empty set constructor. RooArgSet(const RooArgSet& set1, const RooArgSet& set2, const char* name = """"); Construct a set from two existing sets. RooArgSet(const RooAbsArg& var1, const char* name = """"); Constructor for set containing 1 initial object. RooArgSet(const RooAbsArg& var1, const RooAbsArg& var2, const char* name = """"); Constructor for set containing 2 initial objects. RooArgSet(const RooAbsArg& var1, const RooAbsArg& var2, con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooArgSet.html:16250,release,release,16250,root/html602/RooArgSet.html,https://root.cern,https://root.cern/root/html602/RooArgSet.html,2,['release'],['release']
Deployability,"y stored.; 2739 // and if the AddDirectoryStatus() is false it will not be added to; 2740 // any directory (fDirectory = nullptr); 2741 if (fgAddDirectory && gDirectory) {; 2742 gDirectory->Append(&obj);; 2743 ((TH1&)obj).fFunctions->UseRWLock();; 2744 ((TH1&)obj).fDirectory = gDirectory;; 2745 } else; 2746 ((TH1&)obj).fDirectory = nullptr;; 2747 ; 2748}; 2749 ; 2750////////////////////////////////////////////////////////////////////////////////; 2751/// Make a complete copy of the underlying object. If 'newname' is set,; 2752/// the copy's name will be set to that name.; 2753 ; 2754TObject* TH1::Clone(const char* newname) const; 2755{; 2756 TH1* obj = (TH1*)IsA()->GetNew()(nullptr);; 2757 Copy(*obj);; 2758 ; 2759 // Now handle the parts that Copy doesn't do; 2760 if(fFunctions) {; 2761 // The Copy above might have published 'obj' to the ListOfCleanups.; 2762 // Clone can call RecursiveRemove, for example via TCheckHashRecursiveRemoveConsistency; 2763 // when dictionary information is initialized, so we need to; 2764 // keep obj->fFunction valid during its execution and; 2765 // protect the update with the write lock.; 2766 ; 2767 // Reset stats parent - else cloning the stats will clone this histogram, too.; 2768 auto oldstats = dynamic_cast<TVirtualPaveStats*>(fFunctions->FindObject(""stats""));; 2769 TObject *oldparent = nullptr;; 2770 if (oldstats) {; 2771 oldparent = oldstats->GetParent();; 2772 oldstats->SetParent(nullptr);; 2773 }; 2774 ; 2775 auto newlist = (TList*)fFunctions->Clone();; 2776 ; 2777 if (oldstats); 2778 oldstats->SetParent(oldparent);; 2779 auto newstats = dynamic_cast<TVirtualPaveStats*>(obj->fFunctions->FindObject(""stats""));; 2780 if (newstats); 2781 newstats->SetParent(obj);; 2782 ; 2783 auto oldlist = obj->fFunctions;; 2784 {; 2785 R__WRITE_LOCKGUARD(ROOT::gCoreMutex);; 2786 obj->fFunctions = newlist;; 2787 }; 2788 delete oldlist;; 2789 }; 2790 if(newname && strlen(newname) ) {; 2791 obj->SetName(newname);; 2792 }; 2793 return obj;; 2794}; 2",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH1_8cxx_source.html:110256,update,update,110256,doc/master/TH1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH1_8cxx_source.html,1,['update'],['update']
Deployability,"y this object. ;  ; virtual void SetVsbPosition (Long_t newPos);  Set position of vertical scrollbar. ;  ; virtual void ShowBottom ();  Show bottom of the page. ;  ; virtual void ShowTop ();  Show top of the page. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual Long_t ToObjXCoord (Long_t xCoord, Long_t line);  Convert x screen coordinate to column in specified line. ;  ; virtual Long_t ToObjYCoord (Long_t yCoord);  Convert y screen coordinate to line number. ;  ; virtual Long_t ToScrXCoord (Long_t xCoord, Long_t line);  Convert column number in specified line to screen coordinate. ;  ; virtual Long_t ToScrYCoord (Long_t yCoord);  Convert line number to screen coordinate. ;  ; virtual void Update ();  update the whole window of text view ;  ;  Public Member Functions inherited from TGView;  TGView (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, Int_t id=-1, UInt_t xMargin=0, UInt_t yMargin=0, UInt_t options=kSunkenFrame|kDoubleBorder, UInt_t sboptions=0, Pixel_t back=GetWhitePixel());  Create an editor view, containing an TGEditorFrame and (optionally) a horizontal and vertical scrollbar. ;  ;  ~TGView () override;  Delete view. ;  ; void ChangeBackground (Pixel_t) override;  Change background color of the canvas frame. ;  ; void Clear (Option_t *="""") override;  Clear view. ;  ; void DrawBorder () override;  Draw the border of the text edit widget. ;  ; TGViewFrame * GetCanvas () const;  ; TGDimension GetDefaultSize () const override;  std::cout << fWidth << ""x"" << fHeight << std::endl; ;  ; TGLongPosition GetScrollPosition () const;  ; TGLongPosition GetScrollValue () const;  ; const TGGC & GetViewWhiteGC ();  ; TGDimension GetVirtualSize () const;  ; Bool_t HandleButton (Event_t *event) override;  handle button ;  ; Bool_t HandleExpose (Event_t *event) override;  Handle expose events. ;  ; TClass * IsA () const override;  ; void Layout () override;  layout ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGTextEdit.html:11384,update,update,11384,doc/master/classTGTextEdit.html,https://root.cern,https://root.cern/doc/master/classTGTextEdit.html,2,['update'],['update']
Deployability,"y to instantiate numeric integrators from a given function binding and a given configuration ;  CRooNumIntConfigRooNumIntConfig holds the configuration parameters of the various numeric integrators used by RooRealIntegral ;  CRooNumIntFactoryRooNumIntFactory is a factory to instantiate numeric integrators from a given function binding and a given configuration ;  ►CRooNumRunningIntClass RooNumRunningInt is an implementation of RooAbsCachedReal that represents a running integral ; \[ RI(f(x)) = \int_{xlow}^{x} f(x') dx' \]. that is calculated internally with a numeric technique: The input function is first sampled into a histogram, which is then numerically integrated ;  CRICacheElem;  CRooObjCacheManagerClass RooObjCacheManager is an implementation of class RooCacheManager<RooAbsCacheElement> and specializes in the storage of cache elements that contain RooAbsArg objects ;  CRooParamBinningClass RooParamBinning is an implementation of RooAbsBinning that constructs a binning with a range definition that depends on external RooAbsReal objects ;  CRooParametricStepFunction;  CRooParamHistFunc;  ►CRooPlotA RooPlot is a plot frame and a container for graphics objects within that frame ;  CDrawOpt;  CRooPlotableClass RooPotable is a base class for objects that can be inserted into RooPlots and take advantage of its internal normalization and axis range adjustment features ;  CRooPoissonPoisson pdf ;  CRooPolynomialRooPolynomial implements a polynomial p.d.f of the form ; \[ f(x) = \sum_{i} a_{i} * x^i \]. By default coefficient a_0 is chosen to be 1, as polynomial probability density functions have one degree of freedome less than polynomial functions due to the normalization condition ;  CRooPolyVarClass RooPolyVar is a RooAbsReal implementing a polynomial in terms of a list of RooAbsReal coefficients ; \[f(x) = \sum_{i} a_{i}x \]. Class RooPolyvar implements analytical integrals of all polynomials it can define ;  CRooPrintableRooPlotable is a 'mix-in' base class that d",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/annotated.html:98793,integrat,integrated,98793,doc/v608/annotated.html,https://root.cern,https://root.cern/doc/v608/annotated.html,1,['integrat'],['integrated']
Deployability,"y with FCN only fits, when fFitFunc=0); vector<double>fParamsparameter values. Size is total number of parameters; intfStatusminimizer status code; doublefValminimum function value; boolfValidflag for indicating valid fit. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; FitResult(). Default constructor for an empty (non valid) fit result. FitResult(ROOT::Math::Minimizer& min, const ROOT::Fit::FitConfig& fconfig, const ROOT::Fit::FitResult::IModelFunction* f, bool isValid, unsigned int sizeOfData = 0, bool binFit = true, const ROOT::Math::IMultiGenFunction* chi2func = 0, unsigned int ncalls = 0). Construct from a Minimizer instance after fitting; Run also Minos if requested from the configuration. FitResult(const ROOT::Fit::FitResult& ). Copy constructor. ~FitResult(). Destructor. bool Update(const ROOT::Math::Minimizer& min, bool isValid, unsigned int ncalls = 0). Update the fit result with a new minimization status; To be run only if same fit is performed with same configuration; Note that in this case MINOS is not re-run. If one wants to run also MINOS; a new result must be created. const std::string & MinimizerType() const; minimization quantities ; minimizer type. { return fMinimType; }. bool IsValid() const; True if fit successful, otherwise false. { return fValid; }. bool IsEmpty() const; True if a fit result does not exist (even invalid) with parameter values. { return (fParams.size() == 0); }. double MinFcnValue() const; Return value of the objective function (chi2 or likelihood) used in the fit. { return fVal; }. unsigned int NCalls() const; Number of function calls to find minimum. { return fNCalls; }. double Edm() const; Expected distance from minimum. { return fEdm; }. unsigned int NTotalParameters() const; get total number of parameters. { return fParams.size(); }. unsigned int NPar() const; total number of parameters (abbreviation). { return NTotalParameters(); }. unsigned int NFreeParameters() const; get total",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Fit__FitResult.html:5335,configurat,configuration,5335,root/html528/ROOT__Fit__FitResult.html,https://root.cern,https://root.cern/root/html528/ROOT__Fit__FitResult.html,1,['configurat'],['configuration']
Deployability,"y(y); model = ROOT.RooProdPdf(""model"", ""gaussx(x|y)*gaussy(y)"", {gaussy}, Conditional=({gaussx}, {x})); ; # Sample, fit and plot product pdf; # ---------------------------------------------------------------; ; # Generate 1000 events in x and y from model; data = model.generate({x, y}, 10000); ; # Plot x distribution of data and projection of model x = Int(dy); # model(x,y); xframe = x.frame(); data.plotOn(xframe); model.plotOn(xframe); ; # Plot x distribution of data and projection of model y = Int(dx); # model(x,y); yframe = y.frame(); data.plotOn(yframe); model.plotOn(yframe); ; # Make two-dimensional plot in x vs y; hh_model = model.createHistogram(""hh_model"", x, ROOT.RooFit.Binning(50), ROOT.RooFit.YVar(y, ROOT.RooFit.Binning(50))); hh_model.SetLineColor(ROOT.kBlue); ; # Make canvas and draw ROOT.RooPlots; c = ROOT.TCanvas(""rf305_condcorrprod"", ""rf05_condcorrprod"", 1200, 400); c.Divide(3); c.cd(1); ROOT.gPad.SetLeftMargin(0.15); xframe.GetYaxis().SetTitleOffset(1.6); xframe.Draw(); c.cd(2); ROOT.gPad.SetLeftMargin(0.15); yframe.GetYaxis().SetTitleOffset(1.6); yframe.Draw(); c.cd(3); ROOT.gPad.SetLeftMargin(0.20); hh_model.GetZaxis().SetTitleOffset(2.5); hh_model.Draw(""surf""); ; c.SaveAs(""rf305_condcorrprod.png""); [#0] WARNING:InputArguments -- The parameter 'sigma' with range [-inf, inf] of the RooGaussian 'gaussx' exceeds the safe range of (0, inf). Advise to limit its range.; [#1] INFO:Plotting -- RooAbsReal::plotOn(model) plot on x integrates over variables (y); [#1] INFO:NumericIntegration -- RooRealIntegral::init([gaussy_NORM[y]_X_gaussx_NORM[x]]_Int[y]) using numeric integrator RooIntegrator1D to calculate Int(y); [#1] INFO:Plotting -- RooAbsReal::plotOn(model) plot on y integrates over variables (x); DateFebruary 2018 ; AuthorsClemens Lange, Wouter Verkerke (C++ version) ; Definition in file rf305_condcorrprod.py. tutorialsroofitrf305_condcorrprod.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf305__condcorrprod_8py.html:2741,integrat,integrates,2741,doc/master/rf305__condcorrprod_8py.html,https://root.cern,https://root.cern/doc/master/rf305__condcorrprod_8py.html,3,['integrat'],"['integrates', 'integrator']"
Deployability,"y);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooSetProxy &proxy);  Remove proxy from proxy list. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; RooSetProxy _anaList;  Set of observables over which is integrated/summed analytically. ;  ; bool _cacheNum = false;  Cache integral if numeric. ;  ; RooSetProxy _facList;  Set of observables on which function does not depends, which are integrated nevertheless. ;  ; std::unique_ptr< RooArgSet > _funcNormSet;  Optional normalization set passed to function. ;  ; RooRealProxy _function;  Function being integrated. ;  ; RooNumIntConfig * _iconfig = nullptr;  ; RooSetProxy _intList;  Set of continuous observables over which is integrated numerically. ;  ; IntOperMode _intOperMode = Hybrid;  integration operation mode ;  ; RooSetProxy _jacList;  Set of lvalue observables over which is analytically integration that have a non-unit Jacobian. ;  ; Int_t _mode = 0;  ; std::unique_ptr< RooAbsFunc > _numIntegrand;  ! ;  ; std::unique_ptr< RooAbsIntegrator > _numIntEngine;  ! ;  ; std::unique_ptr< RooArgSet > _params;  ! cache for set of parameters ;  ; TNamed * _rangeName = nullptr;  ; bool _respectCompSelect = true;  ; bool _restartNumIntEngine = false;  ! ;  ; RooArgSet _saveInt;  ! ;  ; RooArgSet _saveSum;  ! ;  ; RooListProxy _sumCat;  ! ;  ; RooSetProxy _sumList;  Set of discrete observable over which is summed numerically. ;  ; bool _valid = false;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; Int_t _plotBins = 100;  Number of plot bins. ;  ; doub",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooRealIntegral.html:57688,integrat,integration,57688,doc/master/classRooRealIntegral.html,https://root.cern,https://root.cern/doc/master/classRooRealIntegral.html,2,['integrat'],['integration']
Deployability,y::ShapeFactor ; RooStats::HistFactory::ShapeSys ; RooStats::HistFactory::StatError ; RooStats::HistFactory::StatErrorConfig ; RooStats::HybridCalculator ; RooStats::HybridCalculatorOriginal Hypothesis test calculator using a Bayesian-frequentist hybrid method; RooStats::HybridPlot Provides the plots for an HybridResult; RooStats::HybridResult Class containing the results of the HybridCalculator; RooStats::HypoTestCalculator Interface for tools doing hypothesis tests; RooStats::HypoTestCalculatorGeneric ; RooStats::HypoTestInverter HypoTestInverter class; RooStats::HypoTestInverterOriginal HypoTestInverterOriginal class; RooStats::HypoTestInverterPlot HypoTestInverterPlot class; RooStats::HypoTestInverterResult HypoTestInverterResult class ; RooStats::HypoTestPlot ; RooStats::HypoTestResult Base class to represent results of a hypothesis test; RooStats::IntervalCalculator Interface for tools setting limits (producing confidence intervals); RooStats::LikelihoodInterval Concrete implementation of a ConfInterval based on a likelihood ratio; RooStats::LikelihoodIntervalPlot Class containing the results of the IntervalCalculator; RooStats::MCMCCalculator Markov Chain Monte Carlo calculator for Bayesian credible intervals; RooStats::MCMCInterval Concrete implementation of a ConfInterval based on MCMC calculation; RooStats::MCMCIntervalPlot Class containing the results of the MCMCCalculator; RooStats::MarkovChain ; RooStats::MaxLikelihoodEstimateTestStat ; RooStats::MetropolisHastings Markov Chain Monte Carlo calculator for Bayesian credible intervals; RooStats::MinNLLTestStat implements the minimum NLL as a test statistic to be used with several tools; RooStats::ModelConfig A class that holds configuration information for a model using a workspace as a store; RooStats::NeymanConstruction Interface for tools setting limits (producing confidence intervals); RooStats::NumEventsTestStat ; RooStats::NumberCountingPdfFactory A factory specific to common number counting problems.,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ClassIndex.html:48665,configurat,configuration,48665,root/html534/ClassIndex.html,https://root.cern,https://root.cern/root/html534/ClassIndex.html,1,['configurat'],['configuration']
Deployability,"y;  Base class for the proxy around object in TClonesArray. More...;  ; struct  TClassGetClassHelper;  ; struct  TClassGetClassHelper< std::pair< F, S > >;  ; class  TDefaultInitBehavior;  ; struct  TDirectoryAtomicAdapter;  Internal class used in the implementation of gDirectory The objects of type TDirectoryAtomicAdapter should only be used inside the thread that created them. More...;  ; class  TExecutor;  This class implements the interface to execute the same task multiple times, sequentially or in parallel depending on the execution policy passed as a first parameter on construction, and possibly with different arguments every time. More...;  ; struct  TF1Builder;  Internal class used by TF1 for defining template specialization for different TF1 constructors More...;  ; struct  TF1Builder< const char * >;  TF1 building from a string used to build a TFormula based on a lambda function. More...;  ; struct  TF1Builder< Func * >;  ; class  TFriendProxy;  ; class  TFriendProxyDescriptor;  ; class  TGILRAII;  Class to acquire and release the Python GIL where it applies, i.e. More...;  ; struct  THashConsistencyHolder;  ; class  THnBaseBinIter;  Iterator over THnBase bins (internal implementation). More...;  ; class  THnBaseBrowsable;  TBrowser helper for THnBase. More...;  ; class  TImpProxy;  Template of the proxy around objects. More...;  ; class  TInitBehavior;  ; struct  TMultiArrayType;  Helper class for proxy around multi dimension array. More...;  ; class  TNamedBranchProxy;  ; class  TObjProxy;  ; class  TOperatorNewHelper;  ; class  TParBranchProcessingRAII;  ; class  TQObjectInitBehavior;  ; class  TROOTAllocator;  ; struct  TSchemaHelper;  ; class  TSchemaRuleProcessor;  ; struct  TSchemaType;  ; class  TSpinLockGuard;  A spin mutex-as-code-guard class. More...;  ; class  TStdBitsetHelper;  ; class  TStlArrayProxy;  Template of the Concrete Implementation of the branch proxy around an stl container of array of T. More...;  ; class  TStlImpProxy;  Template",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/namespaceROOT_1_1Internal.html:4833,release,release,4833,doc/v632/namespaceROOT_1_1Internal.html,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Internal.html,1,['release'],['release']
Deployability,"yEntries or hadd interfaces. The new cache is enabled by default, to update the size of the cache or disable it from TTreeCloner use: TTreeCloner::SetCacheSize. To do the same from TTree::CopyEntries add to the option string “cachesize=SIZE”. To update the size of the cache or disable it from hadd, use the command line option -cachesize SIZE. SIZE shouyld be given in number bytes and can be expressed in ‘human readable form’ (number followed by size unit like MB, MiB, GB or GiB, etc. or SIZE can be set zero to disable the cache. Histogram Libraries. Protect access to TROOT::GetListOfGlobalFunctions in TFormula. Math. Update MixMax random number generator for 32 bit architectures. TColor. Import TColor from master to make sure the high quality palettes are defined only ones. This was requested here. PyROOT. Fix case where c++ exception in a constructor were not propagated to python ROOT-7864; Fix case where PyROOT was unable to call copy constructor ROOT-7783; Fix handling of vector<enums> ROOT-7916; Fix the wrong return value when calling a c++ function returning short, or when retuning a char with a negative value ROOT-7872; Added a new configuration option (ROOT.PyConfig.DisableRootLogon) to disable processing of the rootlogon[.py|C] macro in addition to the -n option in the command arguments. Bug Fixes and Tasks. [ROOT-7426] - Cannot print elements of vector on Mac; [ROOT-7739] - TVectorD times double returns a TH1 on ROOT command line; [ROOT-7825] - wrong value passed to function expecting “const T*&""; [ROOT-7830] - Cling automatic RooFit objects always reloaded from file; [ROOT-7862] - CMake Error: CMake can not determine linker language for target: g2root; [ROOT-7864] - Segfault in __cf_15 and FastCall (c++ exception in a constructor is not propagated to python); [ROOT-7865] - root commandline tools are not executable after installation; [ROOT-7872] - PyROOT: wrong return value when calling a c++ function returning short; [ROOT-7879] - Autoloader (parser?) tri",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v606/release-notes.html:26893,configurat,configuration,26893,doc/v606/release-notes.html,https://root.cern,https://root.cern/doc/v606/release-notes.html,1,['configurat'],['configuration']
Deployability,"yGSL method key; Bool_tRooAbsIntegrator::_printEvalCounterIf true print number of function evaluation required for integration; Bool_t_useIntegrandLimits; Bool_tRooAbsIntegrator::_validIs integrator in valid state?; void*_workspaceGSL workspace ; Double_t*_x! Current coordinate; Double_t_xmax! Upper integration bound; Double_t_xmin! Lower integration bound. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void registerIntegrator(RooNumIntFactory& fact); Register this class with RooNumIntConfig as a possible choice of numeric; integrator for one-dimensional integrals over finite and infinite domains. RooAdaptiveGaussKronrodIntegrator1D(); coverity[UNINIT_CTOR]; Default constructor. RooAdaptiveGaussKronrodIntegrator1D(const RooAbsFunc& function, const RooNumIntConfig& config); Constructor taking a function binding and a configuration object. RooAdaptiveGaussKronrodIntegrator1D(const RooAbsFunc& function, Double_t xmin, Double_t xmax, const RooNumIntConfig& config); Constructor taking a function binding, an integration range and a configuration object. RooAbsIntegrator* clone(const RooAbsFunc& function, const RooNumIntConfig& config) const; Virtual constructor. Bool_t initialize(); Initialize integrator allocate buffers and setup GSL workspace. ~RooAdaptiveGaussKronrodIntegrator1D(); Destructor. Bool_t setLimits(Double_t* xmin, Double_t* xmax); Change our integration limits. Return kTRUE if the new limits are; ok, or otherwise kFALSE. Always returns kFALSE and does nothing; if this object was constructed to always use our integrand's limits. Bool_t checkLimits() const; Check that our integration range is finite and otherwise return kFALSE.; Update the limits from the integrand if requested. Double_t integral(const Double_t* yvec = 0); Calculate and return integral at at given parameter values. RooAdaptiveGaussKronrodIntegrator1D(); Constructors, assignment etc. Bool_t setUseIntegrandLimits(Bool_t flag); If flag is true, intergr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooAdaptiveGaussKronrodIntegrator1D.html:8836,integrat,integration,8836,root/html530/RooAdaptiveGaussKronrodIntegrator1D.html,https://root.cern,https://root.cern/root/html530/RooAdaptiveGaussKronrodIntegrator1D.html,6,"['configurat', 'integrat']","['configuration', 'integration']"
Deployability,"yI*fVarDims[6]List of variable sizes dimensions.; Int_tfVirtUsedSizes[6]Virtual size of lower dimensions as seen for this formula. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TTreeFormulaManager(); -*Tree FormulaManger default constructor; *-* ======================================. void Remove(TTreeFormula* ); Remove a formula from this manager. void Add(TTreeFormula* ); Add a new formula to the list of formulas managed; The manager of the formula will be changed and the old one will be deleted; if it is empty. void AddVarDims(Int_t virt_dim); Add a variable dimension. void CancelDimension(Int_t virt_dim); Cancel a dimension. This is usually called when an out-of-bounds index; is used. void EnableMultiVarDims(); Set the manager as handling a formula with multiple variable dimensions. Int_t GetNdata(Bool_t forceLoadDim = kFALSE); -*-*Return number of available instances in the formulas; *-* ====================================================. Bool_t Sync(); Synchronize all the formulae. void UpdateFormulaLeaves(); this function could be called TTreePlayer::UpdateFormulaLeaves, itself; called by TChain::LoadTree when a new Tree is loaded.; Because Trees in a TChain may have a different list of leaves, one; must update the leaves numbers in the TTreeFormula used by the TreePlayer. void UpdateUsedSize(Int_t& virt_dim, Int_t vsize); Reload the array sizes. TTreeFormulaManager(const TTreeFormulaManager& ); Not implemented yet. TTreeFormulaManager& operator=(const TTreeFormulaManager& ). Int_t GetMultiplicity() const; {return fMultiplicity;}. Bool_t Notify(); { UpdateFormulaLeaves(); return kTRUE; }. » Author: Philippe Canal 20/03/02 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers and al. *; » Last changed: root/treeplayer:$Id$ » Last generated: 2015-03-15 16:40; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TTreeFormulaManager.html:7546,update,update,7546,root/html534/TTreeFormulaManager.html,https://root.cern,https://root.cern/root/html534/TTreeFormulaManager.html,1,['update'],['update']
Deployability,"yListlist of proxies; stringRooAbsTestStatistic::_rangeNameName of range in which to calculate test statistic; RooArgSet_rrvArgsSet of real-valued observables; TIterator*_rrvIter! Iterator over set of real-valued observables; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; Int_tRooAbsTestStatistic::_simCountTotal number of component p.d.f.s in RooSimultaneous (if any); RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; Bool_tRooAbsTestStatistic::_splitRangeSplit rangeName in RooSimultaneous index labels if true; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; Bool_tRooAbsTestStatistic::_verboseVerbose messaging if true; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; RooRealVar*_yvarY variable if so designated; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooXYChi2Var(). RooXYChi2Var(const char *name, const char* title, RooAbsReal& func, RooDataSet& xydata, Bool_t integrate). RooXYChi2Var constructor with function and X-Y values dataset. An X-Y dataset is a weighted dataset with one or more observables X where the weight is interpreted; as the Y value and the weight error is interpreted as the Y value error. The weight must have an; non-zero error defined at each point for the chi^2 calcul",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooXYChi2Var.html:35406,integrat,integrator,35406,root/html526/RooXYChi2Var.html,https://root.cern,https://root.cern/root/html526/RooXYChi2Var.html,2,"['configurat', 'integrat']","['configuration', 'integrator']"
Deployability,"yListlist of proxies; stringRooAbsTestStatistic::_rangeNameName of range in which to calculate test statistic; RooArgSet_rrvArgsSet of real-valued observables; TIterator*_rrvIter! Iterator over set of real-valued observables; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; Int_tRooAbsTestStatistic::_simCountTotal number of component p.d.f.s in RooSimultaneous (if any); RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; Bool_tRooAbsTestStatistic::_splitRangeSplit rangeName in RooSimultaneous index labels if true; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; Bool_tRooAbsTestStatistic::_verboseVerbose messaging if true; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; RooRealVar*_yvarY variable if so designated; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooXYChi2Var(); coverity[UNINIT_CTOR]. RooXYChi2Var(const char* name, const char* title, RooAbsReal& func, RooDataSet& data, Bool_t integrate = kFALSE). RooXYChi2Var constructor with function and X-Y values dataset. An X-Y dataset is a weighted dataset with one or more observables X where the weight is interpreted; as the Y value and the weight error is interpreted as the Y value error. The weight must have an; non-zero error defined at e",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooXYChi2Var.html:35672,integrat,integrator,35672,root/html528/RooXYChi2Var.html,https://root.cern,https://root.cern/root/html528/RooXYChi2Var.html,2,"['configurat', 'integrat']","['configuration', 'integrator']"
Deployability,"y_pdfListList of PDF components; RooLinkedList_pdfNSetListList of PDF component normalization sets; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TRefArrayRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; TNamed*_refRangeNameReference range name for interpretation of conditional products; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; Bool_t_selfNormIs self-normalized; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Bool_t_useDefaultGenUse default or distributed event generator; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooProdPdf.html:44650,configurat,configuration,44650,root/html532/RooProdPdf.html,https://root.cern,https://root.cern/root/html532/RooProdPdf.html,3,"['configurat', 'integrat']","['configuration', 'integrator']"
Deployability,"yer class ;  CVOptimizerGeneric Optimizer class ;  ►NExperimental;  CClassification;  CClassificationResult;  ►NkNN;  CEvent;  CModulekNN;  CNodeThis file contains binary tree and global function template that searches tree for k-nearest neigbors ;  CAbsoluteDeviationLossFunctionAbsolute Deviation Loss Function ;  CAbsoluteDeviationLossFunctionBDTAbsolute Deviation BDT Loss Function ;  CAbsValue;  CBDTEventWrapper;  CBinarySearchTreeA simple Binary search tree including a volume search method ;  CBinarySearchTreeNodeNode for the BinarySearch or Decision Trees ;  CBinaryTreeBase class for BinarySearch and Decision Trees ;  CCCPrunerA helper class to prune a decision tree using the Cost Complexity method (see Classification and Regression Trees by Leo Breiman et al) ;  ►CCCTreeWrapper;  CCCTreeNode;  CClassifierFactoryThis is the MVA factory ;  CClassInfoClass that contains all the information of a class ;  Ccompose_binary_t;  Ccompose_unary_t;  ►CConfigSingleton class for global configuration settings used by TMVA ;  CIONames;  CVariablePlotting;  CConfigurable;  CConvergenceTestCheck for convergence ;  CCostComplexityPruneToolA class to prune a decision tree using the Cost Complexity method ;  CCrossEntropyImplementation of the CrossEntropy as separation criterion ;  CCrossValidationClass to perform cross validation, splitting the dataloader into folds ;  CCrossValidationFoldResult;  CCrossValidationResultClass to save the results of cross validation, the metric for the classification ins ROC and you can ROC curves ROC integrals, ROC average and ROC standard deviation ;  CCvSplit;  CCvSplitKFolds;  CCvSplitKFoldsExpr;  CDataInputHandlerClass that contains all the data information ;  CDataLoader;  CDataSetClass that contains all the data information ;  ►CDataSetFactoryClass that contains all the data information ;  CEventStats;  CDataSetInfoClass that contains all the data information ;  CDataSetManagerClass that contains all the data information ;  CDecisionTreeImpl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v616/annotated.html:83381,configurat,configuration,83381,doc/v616/annotated.html,https://root.cern,https://root.cern/doc/v616/annotated.html,1,['configurat'],['configuration']
Deployability,"yerPerceptron.h. ◆ IsA(). TClass * TMultiLayerPerceptron::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 151 of file TMultiLayerPerceptron.h. ◆ LineSearch(). bool TMultiLayerPerceptron::LineSearch ; (; Double_t * ; direction, . Double_t * ; buffer . ). protected . Search along the line defined by direction. ; buffer is not used but is updated with the new dw so that it can be used by a later stochastic step. It returns true if the line search fails. ; Definition at line 2274 of file TMultiLayerPerceptron.cxx. ◆ LoadWeights(). Bool_t TMultiLayerPerceptron::LoadWeights ; (; Option_t * ; filename = """"). Loads the weights from a text file conforming to the format defined by DumpWeights. ; Definition at line 1657 of file TMultiLayerPerceptron.cxx. ◆ MLP_Batch(). void TMultiLayerPerceptron::MLP_Batch ; (; Double_t * ; buffer). protected . One step for the batch (stochastic) method. ; DEDw should have been updated before calling this. ; Definition at line 2203 of file TMultiLayerPerceptron.cxx. ◆ MLP_Line(). void TMultiLayerPerceptron::MLP_Line ; (; Double_t * ; origin, . Double_t * ; dir, . Double_t ; dist . ). private . Sets the weights to a point along a line Weights are set to [origin + (dist * dir)]. ; Definition at line 2231 of file TMultiLayerPerceptron.cxx. ◆ MLP_Stochastic(). void TMultiLayerPerceptron::MLP_Stochastic ; (; Double_t * ; buffer). protected . One step for the stochastic method buffer should contain the previous dw vector and will be updated. ; Definition at line 2158 of file TMultiLayerPerceptron.cxx. ◆ operator=(). TMultiLayerPerceptron & TMultiLayerPerceptron::operator= ; (; const TMultiLayerPerceptron & ; ). private . ◆ Randomize(). void TMultiLayerPerceptron::Randomize ; (; ); const. Randomize the weights. ; Definition at line 1239 of file TMultiLayerPerceptron.cxx. ◆ Result(). Double_t TMultiLayerPerceptron::Result ; (; Int_t ; event, . Int_t ; index = 0 . ); co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMultiLayerPerceptron.html:43206,update,updated,43206,doc/master/classTMultiLayerPerceptron.html,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html,1,['update'],['updated']
Deployability,"yle(Style_t fstyle); virtual voidTGraph::SetHistogram(TH1F* h); virtual voidTAttLine::SetLineAttributes()MENU ; virtual voidTAttLine::SetLineColor(Color_t lcolor); virtual voidTAttLine::SetLineStyle(Style_t lstyle); virtual voidTAttLine::SetLineWidth(Width_t lwidth); virtual voidTAttMarker::SetMarkerAttributes()MENU ; virtual voidTAttMarker::SetMarkerColor(Color_t tcolor = 1); virtual voidTAttMarker::SetMarkerSize(Size_t msize = 1); virtual voidTAttMarker::SetMarkerStyle(Style_t mstyle = 1); virtual voidTGraph::SetMaximum(Double_t maximum = -1111)MENU ; virtual voidTGraph::SetMinimum(Double_t minimum = -1111)MENU ; virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGraph::SetPoint(Int_t i, Double_t x, Double_t y); virtual voidTGraph::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); voidRooPlotable::setYAxisLabel(const char* label); voidRooPlotable::setYAxisLimits(Double_t ymin, Double_t ymax); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidTGraph::Sort(Bool_t (*)(const TGraph*, Int_t, Int_t) greater = &TGraph::CompareX, Bool_t ascending = kTRUE, Int_t low = 0, Int_t high = -1111); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; voidRooPlotable::updateYAxisLimits(Double_t y); virtual voidTGraph::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; voidTGraph::Zero(Int_t& k, Double_t AZ, Double_t BZ, Double_t E2, Double_t& X, Double_t& Y, Int_t maxiterations).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooCurve.html:13909,update,updateYAxisLimits,13909,root/html530/RooCurve.html,https://root.cern,https://root.cern/root/html530/RooCurve.html,4,['update'],['updateYAxisLimits']
Deployability,"ymanConstruction is a concrete implementation of the NeymanConstruction interface that, as the name suggests, performs a NeymanConstruction ;  CNuisanceParametersSamplerHelper class for ToyMCSampler ;  CNumberCountingPdfFactory;  CNumEventsTestStatNumEventsTestStat is a simple implementation of the TestStatistic interface used for simple number counting ;  CPdfProposalPdfProposal is a concrete implementation of the ProposalFunction interface ;  CPointSetIntervalPointSetInterval is a concrete implementation of the ConfInterval interface ;  CProfileInspector;  CProfileLikelihoodCalculatorProfileLikelihoodCalculator is a concrete implementation of CombinedCalculator (the interface class for a tools which can produce both RooStats HypoTestResults and ConfIntervals) ;  CProfileLikelihoodTestStatProfileLikelihoodTestStat is an implementation of the TestStatistic interface that calculates the profile likelihood ratio at a particular parameter point given a dataset ;  CProofConfigHolds configuration options for proof and proof-lite ;  CProposalFunctionProposalFunction is an interface for all proposal functions that would be used with a Markov Chain Monte Carlo algorithm ;  CProposalHelper;  CRatioOfProfiledLikelihoodsTestStatTestStatistic that returns the ratio of profiled likelihoods ;  CSamplingDistPlotThis class provides simple and straightforward utilities to plot SamplingDistribution objects ;  CSamplingDistributionThis class simply holds a sampling distribution of some test statistic ;  CSamplingSummary;  CSamplingSummaryLookup;  CSequentialProposalClass implementing a proposal function that samples the parameter space by moving only in one coordinate (choosen randomly) at each step ;  CSimpleInterval;  CSimpleLikelihoodRatioTestStatTestStatistic class that returns -log(L[null] / L[alt]) where L is the likelihood ;  CSPlotThis class calculates sWeights used to create an sPlot ;  CTestStatisticTestStatistic is an interface class to provide a facility for construction t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/annotated.html:8303,configurat,configuration,8303,doc/v608/annotated.html,https://root.cern,https://root.cern/doc/v608/annotated.html,2,['configurat'],['configuration']
Deployability,"ymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static RooPrintable::StyleOptionRooPrintable::kSingleLine; static RooPrintable::StyleOptionRooPrintable::kStandard; static RooPrintable::ContentsOptionRooPrintable::kTitle; static RooPrintable::StyleOptionRooPrintable::kTreeStructure; static RooPrintable::ContentsOptionRooPrintable::kValue; static RooPrintable::StyleOptionRooPrintable::kVerbose; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. RooLinkedList_configSetsList of configuration sets for individual integration methods; static RooNumIntConfig*_default; Double_t_epsAbsAbsolute precision; Double_t_epsRelRelative precision; RooCategory_method1DSelects integration method for 1D integrals; RooCategory_method1DOpenSelects integration method for open ended 1D integrals; RooCategory_method2DSelects integration method for 2D integrals; RooCategory_method2DOpenSelects integration method for open ended 2D integrals; RooCategory_methodNDSelects integration method for ND integrals; RooCategory_methodNDOpenSelects integration method for open ended ND integrals; static Int_tRooPrintable::_nameLength; Bool_t_printEvalCounterFlag to control printing of function evaluation counter. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void cleanup(); Function called by atexit() handler installed by RooSentinel to; cleanup global objects at end of job. RooNumIntConfig& defaultConfig(); Return reference to instance of default numeric integrator configuration object. RooNumIntConfig(); Constructor. ~RooNumIntConfig(); Destructor. RooNumIntConfig(const RooNumIntConfig& other); Copy constructor. RooNumIntConfig& operator=(const RooNumIntConfig& other); Assignment operator from other RooNumIntConfig. Bool_t addConfigSection(const RooAbsIntegrator* proto, const RooArg",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooNumIntConfig.html:8432,configurat,configuration,8432,root/html602/RooNumIntConfig.html,https://root.cern,https://root.cern/root/html602/RooNumIntConfig.html,16,"['configurat', 'integrat']","['configuration', 'integration']"
Deployability,"ynopsis on the first line of a log message and putting more detailed information on subsequent lines. You can omit the -m option entirely and an editor (as specified with VISUAL or EDITOR) will be started.; This command is extremely versatile. You may want to have a couple of aliases defined in your .gitconfig file (see attached gitconfig for ideas). Working in your local repository. Obtain differences with; git status. Move files from one part of your directory tree to another:; git mv <old-path> <new-path>. Delete unwanted tracked files:; git rm <path>. Add un-tracked files:; git add <un-tracked-file>. Stage a modified file for commit:; git add <file>. Commit currently-staged files:; git commit -m <log-message>. Commit only specific files (regardless of what is staged):; git commit -m <log-message>. Commit all modified files:; git commit -a -m <log-message>. Un-stage a previously staged (but not yet committed) file:; git reset HEAD <file>. Examine a representation of your change tree with log files and patch descriptions:; gitk. Get differences with respect to the committed (or staged) version of a file:; git diff <file>. Get differences between local file and committed version:; git diff --cached <file>. Basic interaction with local branches. Create (but do not switch to) a new local branch based on the current branch:; git branch <new-branch>. Create and switch to a local branch based on the current branch:; git checkout -b <new-branch>. Change to an existing local branch:; git checkout <branch>. Examine the list of commits in the current branch not reflected in another branch:; git cherry -v <branch>. Merge another branch into the current one:; git merge <branch>. Delete a local branch (eg after merging):; git branch -d <branch>. OR (if changes have not been completely merged but you're sure you want to delete anyway):; git branch -D <branch>. Basic interaction with a remote branch; Assuming you created your local repository with git clone, there is already one ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/git-tips-and-tricks.html:8108,patch,patch,8108,d/git-tips-and-tricks.html,https://root.cern,https://root.cern/d/git-tips-and-tricks.html,1,['patch'],['patch']
Deployability,"ype values are : kGAUSS (simple Gauss method), kADAPTIVE (from GSL), kADAPTIVESINGULAR (from GSL), kNONADAPTIVE (from GSL); Possible rule values are kGAUS15 (rule = 1), kGAUS21( rule = 2), kGAUS31(rule =3), kGAUS41 (rule=4), kGAUS51 (rule =5), kGAUS61(rule =6); lower rules are indicated for singular functions while higher for smooth functions to get better accuracies. NOTE: When the default values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions. IntegratorOneDim(const ROOT::Math::IGenFunction& f, ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, int rule = 0). Constructor of one dimensional Integrator passing a function interface. @param f integration function (1D interface). It is copied inside; @param type integration type (adaptive, non-adaptive, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE type). NOTE: When the default values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions. SetFunction(const ROOT::Math::IGenFunction& f, bool copy = false). IntegratorOneDim(const ROOT::Math::IGenFunction& f, ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, int rule = 0). Template Constructor of one dimensional Integrator passing a generic function object. @param f integration function (any C++ callable object implementing operator()(double x); @param type integration type (adaptive, non-adaptive, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE type). virtual ~IntegratorOneDim(); destructor (will delete contained pointe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__IntegratorOneDim.html:5993,integrat,integration,5993,root/html528/ROOT__Math__IntegratorOneDim.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__IntegratorOneDim.html,6,['integrat'],['integration']
Deployability,"ypeROOT::Math::VirtualIntegratorMultiDim::Type() const. protected:. boolCheckFunction(); voidDoInitialize(). private:. ROOT::Math::GSLMCIntegratorGSLMCIntegrator(const ROOT::Math::GSLMCIntegrator&); ROOT::Math::GSLMCIntegrator&operator=(const ROOT::Math::GSLMCIntegrator&). Data Members; private:. doublefAbsTol; unsigned intfCalls; unsigned intfDim; doublefError; ROOT::Math::GSLMonteFunctionWrapper*fFunction; doublefRelTol; doublefResult; ROOT::Math::GSLRngWrapper*fRng; intfStatus; ROOT::Math::IntegrationMultiDim::TypefType; ROOT::Math::GSLMCIntegrationWorkspace*fWorkspace. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GSLMCIntegrator(MCIntegration::Type type = MCIntegration::kVEGAS, double absTol = 0, double relTol = 0, unsigned int calls = 0 ); constructors; /**; constructor of GSL MCIntegrator using all the default options; *; GSLMCIntegrator( );; constructor of GSL MCIntegrator. VEGAS MC is set as default integration type. @param type type of integration. The possible types are defined in the MCIntegration::Type enumeration; Default is VEGAS; @param absTol desired absolute Error; @param relTol desired relative Error; @param calls maximum number of function calls. NOTE: When the default values are used , the options are taken from teh static method of ROOT::Math::IntegratorMultiDimOptions. GSLMCIntegrator(const char* type, double absTol, double relTol, unsigned int calls); constructor of GSL MCIntegrator. VEGAS MC is set as default integration type. @param type type of integration using a char * (required by plug-in manager); @param absTol desired absolute Error; @param relTol desired relative Error; @param calls maximum number of function calls. virtual ~GSLMCIntegrator(). destructor. GSLMCIntegrator(const ROOT::Math::GSLMCIntegrator& ); disable copy ctrs. GSLMCIntegrator & operator=(const ROOT::Math::GSLMCIntegrator& ). void SetFunction(const ROOT::Math::IMultiGenFunction& f); template methods for generic functors. met",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__GSLMCIntegrator.html:3535,integrat,integration,3535,root/html528/ROOT__Math__GSLMCIntegrator.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__GSLMCIntegrator.html,4,['integrat'],['integration']
Deployability,"ypename Layer_t = VGeneralLayer<Architecture_t>, typename DeepNet_t = TDeepNet<Architecture_t, Layer_t>> . std::vector<std::vector<Matrix_t> > TMVA::DNN::TRMSProp< Architecture_t, Layer_t, DeepNet_t >::fPastSquaredWeightGradients. protected . The sum of the square of the past weight gradients associated with the deep net. ; Definition at line 55 of file RMSProp.h. ◆ fRho. template<typename Architecture_t , typename Layer_t = VGeneralLayer<Architecture_t>, typename DeepNet_t = TDeepNet<Architecture_t, Layer_t>> . Scalar_t TMVA::DNN::TRMSProp< Architecture_t, Layer_t, DeepNet_t >::fRho. protected . The Rho constant used by the optimizer. ; Definition at line 52 of file RMSProp.h. ◆ fWeightUpdates. template<typename Architecture_t , typename Layer_t = VGeneralLayer<Architecture_t>, typename DeepNet_t = TDeepNet<Architecture_t, Layer_t>> . std::vector<std::vector<Matrix_t> > TMVA::DNN::TRMSProp< Architecture_t, Layer_t, DeepNet_t >::fWeightUpdates. protected . The accumulation of the past Weights for performing updates. ; Definition at line 59 of file RMSProp.h. ◆ fWorkBiasTensor1. template<typename Architecture_t , typename Layer_t = VGeneralLayer<Architecture_t>, typename DeepNet_t = TDeepNet<Architecture_t, Layer_t>> . std::vector<std::vector<Matrix_t> > TMVA::DNN::TRMSProp< Architecture_t, Layer_t, DeepNet_t >::fWorkBiasTensor1. protected . working tensor used to keep a temporary copy of bias or bias gradients ; Definition at line 64 of file RMSProp.h. ◆ fWorkBiasTensor2. template<typename Architecture_t , typename Layer_t = VGeneralLayer<Architecture_t>, typename DeepNet_t = TDeepNet<Architecture_t, Layer_t>> . std::vector<std::vector<Matrix_t> > TMVA::DNN::TRMSProp< Architecture_t, Layer_t, DeepNet_t >::fWorkBiasTensor2. protected . working tensor used to keep a temporary copy of bias or bias gradients ; Definition at line 68 of file RMSProp.h. ◆ fWorkWeightTensor1. template<typename Architecture_t , typename Layer_t = VGeneralLayer<Architecture_t>, typename DeepNe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TRMSProp.html:13342,update,updates,13342,doc/master/classTMVA_1_1DNN_1_1TRMSProp.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TRMSProp.html,1,['update'],['updates']
Deployability,"ys mytracks,pions and muons may be written separately.; 11.5 Schema Evolution; Schema evolution is a problem faced by long-lived data. When a schema changes, existing persistent data can become inaccessible unless the system provides a mechanism to access data created with previous versions of the schema. In the lifetime of collaboration, the class definitions (i.e. the schema) are likely to change frequently. Not only can the class itself change, but any of its parent classes or data member classes can change also. This makes the support for schema evolution necessary.; ROOT fully supports schema evolution. The next figure below illustrates some of the scenarios. The ROOT schema evolution. The top half represents different versions of the shared library with the class definitions. These are the in-memory class versions. The bottom half represents data files that contain different versions of the classes. An old version of a shared library and a file with new class definitions - this can be the case when someone has not updated the library and is reading a new file.; Reading a file with a shared library that is missing a class definition (i.e. missing class D).; Reading a file without any class definitions. This can be the case where the class definition is lost, or unavailable.; The current version of a shared library and an old file with old class versions (backward compatibility). This is often the case when reading old data.; Reading a file with a shared library built with MakeProject. This is the case when someone has already read the data without a shared library and has used ROOT MakeProject feature to reconstruct the class definitions and shared library (MakeProject is explained in detail later on). In case of a mismatch between the in-memory version and the persistent version of a class, ROOT maps the persistent one to the one in memory. This allows you to change the class definition at will, for example:. Change the order of data members in the class.; Add",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:490318,update,updated,490318,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['update'],['updated']
Deployability,"ysicalShape* shape1, const TGLPhysicalShape* shape2); static Bool_tComparePhysicalVolumes(const TGLPhysicalShape* shape1, const TGLPhysicalShape* shape2); TGLScene&operator=(const TGLScene&). Data Members; public:. enum TGLLockable::ELock { kUnlocked; kDrawLock; kSelectLock; kModifyLock; };. protected:. Bool_tTGLSceneBase::fAutoDestruct; TGLBoundingBoxTGLSceneBase::fBoundingBoxbounding box for scene (axis aligned) - lazy update - use BoundingBox() to access; Bool_tTGLSceneBase::fBoundingBoxValidbounding box valid?; TGLClip*TGLSceneBase::fClipScene clipping-plane.; Bool_tTGLSceneBase::fDoClipCheckPerform global clip-plane-check in UpdateSceneInfo(); Bool_tTGLSceneBase::fDoFrustumCheckPerform global frustum-check in UpdateSceneInfo(); TGLContextIdentity*fGLCtxIdentity; Bool_tfInSmartRefresh!; Short_tTGLSceneBase::fLODScene-lod.; Float_tfLastLineWidthScale; Float_tfLastPointSizeScale; TGLLockable::ELockTGLLockable::fLockLock state.; map<TObject*,TGLLogicalShape*>fLogicalShapes!; UInt_tTGLSceneBase::fMinorStampCounter increased on minimal update.; TStringTGLSceneBase::fNameObject identifier.; Float_tTGLSceneBase::fOLLineWScene outline line-width.; map<unsigned int,TGLPhysicalShape*>fPhysicalShapes!; UInt_tTGLSceneBase::fSceneIDUnique scene id.; Bool_tTGLSceneBase::fSelectableObjects in the scene are selectable.; map<TObject*,TGLLogicalShape*>fSmartRefreshCache!; Short_tTGLSceneBase::fStyleScene-style.; UInt_tTGLSceneBase::fTimeStampCounter increased on every update.; TStringTGLSceneBase::fTitleObject title.; list<TGLViewerBase*>TGLSceneBase::fViewers; Float_tTGLSceneBase::fWFLineWScene wire-frame line-width. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGLScene(); {}. ~TGLScene(); Destroy scene objects. void ReleaseGLCtxIdentity(); Release all GL resources for current context identity.; Requires iteration over all logical shapes. Bool_t ComparePhysicalVolumes(const TGLPhysicalShape* shape1, const TGLPhysicalShape* shape2); C",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLScene.html:6890,update,update,6890,root/html528/TGLScene.html,https://root.cern,https://root.cern/root/html528/TGLScene.html,4,['update'],['update']
Deployability,"ystems. void contextMenuEvent(QContextMenuEvent* ); The custom response to the Qt QContextMenuEvent; Map QContextMenuEvent to the ROOT kButton3Down = 3 event. void focusInEvent(QFocusEvent* ); The custom response to the Qt QFocusEvent ""in""; this imposes an extra protection to avoid TObject interaction with; mouse event accidently. void focusOutEvent(QFocusEvent* ); The custom response to the Qt QFocusEvent ""out""; this imposes an extra protection to avoid TObject interaction with; mouse event accidently. void mousePressEvent(QMouseEvent* ); Map the Qt mouse press button event to the ROOT TCanvas events; Mouse events occur when a mouse button is pressed or released inside; a widget or when the mouse cursor is moved. void mouseMoveEvent(QMouseEvent* ); Map the Qt mouse move pointer event to the ROOT TCanvas events; kMouseMotion = 51,; kButton1Motion = 21, kButton2Motion = 22, kButton3Motion = 23, kKeyPress = 24. void mouseReleaseEvent(QMouseEvent* ); Map the Qt mouse button release event to the ROOT TCanvas events; kButton1Up = 11, kButton2Up = 12, kButton3Up = 13. void mouseDoubleClickEvent(QMouseEvent* ); Map the Qt mouse double click button event to the ROOT TCanvas events; kButton1Double = 61, kButton2Double = 62, kButton3Double = 63. void keyPressEvent(QKeyEvent* ); Map the Qt key press event to the ROOT TCanvas events; kKeyDown = 4. void keyReleaseEvent(QKeyEvent* ); Map the Qt key release event to the ROOT TCanvas events; kKeyUp = 14. void enterEvent(QEvent* ); Map the Qt mouse enters widget event to the ROOT TCanvas events; kMouseEnter = 52. void leaveEvent(QEvent* ); Map the Qt mouse leaves widget event to the ROOT TCanvas events; kMouseLeave = 53. void resizeEvent(QResizeEvent* ); The widget will be erased and receive a paint event immediately after; processing the resize event.; No drawing need be (or should be) done inside this handler. void SetSaveFormat(const char* format); Set the default save format for the widget. bool Save(const char* fileName) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TQtWidget.html:9763,release,release,9763,root/html528/TQtWidget.html,https://root.cern,https://root.cern/root/html528/TQtWidget.html,5,['release'],['release']
Deployability,"z file). If you have root access to your machine and want to make a system installation of FFTW. 2) Untar fftw-XXX.tar.gz in /tmp, cd into the untarred directory; and type './configure' followed by 'make install'.; This will install fftw in /usr/local/bin,lib etc... 3) Start from a source installation of ROOT. If you now have a binary distribution,; first download a source tar ball from root.cern.ch for your ROOT version and untar it.; Run 'configure', following the instruction from 'configure --help' but be sure run 'configure'; with additional flags '--enable-fftw3' and '--enable-roofit', then run 'make'. If you do not have root access and want to make a private installation of FFTW. 2) Make a private install area for FFTW, e.g. /home/myself/fftw. 3) Untar fftw-XXX.tar.gz in /tmp, cd into the untarred directory; and type './configure --prefix=/home/myself/fftw' followed by 'make install'.; Substitute /home/myself/fftw with a directory of your choice. This; procedure will install FFTW in the location designated by you. 4) Start from a source installation of ROOT. If you now have a binary distribution,; first download a source tar ball from root.cern.ch for your ROOT version and untar it.; Run 'configure', following the instruction from 'configure --help' but be sure run 'configure'; with additional flags; '--enable-fftw3',; '--with-fftw3-incdir=/home/myself/fftw/include',; '--width-fftw3-libdir=/home/myself/fftw/lib' and; '--enable-roofit'; Then run 'make'. Function Members (Methods); public:. RooFFTConvPdf(); RooFFTConvPdf(const RooFFTConvPdf& other, const char* name = 0); RooFFTConvPdf(const char* name, const char* title, RooRealVar& convVar, RooAbsPdf& pdf1, RooAbsPdf& pdf2, Int_t ipOrder = 2); RooFFTConvPdf(const char* name, const char* title, RooAbsReal& pdfConvVar, RooRealVar& convVar, RooAbsPdf& pdf1, RooAbsPdf& pdf2, Int_t ipOrder = 2); virtual~RooFFTConvPdf(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooFFTConvPdf.html:4304,install,install,4304,root/html526/RooFFTConvPdf.html,https://root.cern,https://root.cern/root/html526/RooFFTConvPdf.html,5,['install'],['install']
Deployability,"z file). If you have root access to your machine and want to make a system installation of FFTW. 2) Untar fftw-XXX.tar.gz in /tmp, cd into the untarred directory; and type './configure' followed by 'make install'.; This will install fftw in /usr/local/bin,lib etc... 3) Start from a source installation of ROOT. If you now have a binary distribution,; first download a source tar ball from root.cern.ch for your ROOT version and untar it.; Run 'configure', following the instruction from 'configure --help' but be sure run 'configure'; with additional flags '--enable-fftw3' and '--enable-roofit', then run 'make'. If you do not have root access and want to make a private installation of FFTW. 2) Make a private install area for FFTW, e.g. /home/myself/fftw. 3) Untar fftw-XXX.tar.gz in /tmp, cd into the untarred directory; and type './configure --prefix=/home/myself/fftw' followed by 'make install'.; Substitute /home/myself/fftw with a directory of your choice. This; procedure will install FFTW in the location designated by you. 4) Start from a source installation of ROOT. If you now have a binary distribution,; first download a source tar ball from root.cern.ch for your ROOT version and untar it.; Run 'configure', following the instruction from 'configure --help' but be sure run 'configure'; with additional flags; '--enable-fftw3',; '--with-fftw3-incdir=/home/myself/fftw/include',; '--width-fftw3-libdir=/home/myself/fftw/lib' and; '--enable-roofit'; Then run 'make'. Function Members (Methods); public:. virtual~RooFFTConvPdf(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*Ro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooFFTConvPdf.html:4304,install,install,4304,root/html602/RooFFTConvPdf.html,https://root.cern,https://root.cern/root/html602/RooFFTConvPdf.html,2,['install'],['install']
Deployability,"zable C++ type or a container for a collection of sub fields. The RFieldBase and its type-safe descendants provide the object to column mapper. They map C++ objects to primitive columns. The mapping is trivial for simple types such as 'double'. Complex types resolve to multiple primitive columns. The field knows based on its type and the field name the type(s) and name(s) of the columns.; Note: the class hierarchy starting at RFieldBase is not meant to be extended by user-provided child classes. This is and can only be partially enforced through C++. ; Definition at line 67 of file RFieldBase.hxx. Classes; class  RBulk;  Similar to RValue but manages an array of consecutive values. More...;  ; struct  RBulkSpec;  ; struct  RCheckResult;  Used in the return value of the Check() method. More...;  ; class  RColumnRepresentations;  Some fields have multiple possible column representations, e.g. More...;  ; struct  RCreateObjectDeleter;  ; struct  RCreateObjectDeleter< void >;  ; class  RDeleter;  A functor to release the memory acquired by CreateValue (memory and constructor). More...;  ; class  RSchemaIteratorTemplate;  Iterates over the sub tree of fields in depth-first search order. More...;  ; struct  RSharedPtrDeleter;  ; class  RTypedDeleter;  A deleter for templated RFieldBase descendents where the value type is known. More...;  ; class  RValue;  Points to an object with RNTuple I/O support and keeps a pointer to the corresponding field. More...;  . Public Types; using ColumnRepresentation_t = std::vector< EColumnType >;  ; enum class  EState { kUnconnected; , kConnectedToSink; , kConnectedToSource; };  During its lifetime, a field undergoes the following possible state transitions: More...;  ; using RConstSchemaIterator = RSchemaIteratorTemplate< true >;  ; using RSchemaIterator = RSchemaIteratorTemplate< false >;  . Public Member Functions;  RFieldBase (const RFieldBase &)=delete;  ;  RFieldBase (RFieldBase &&)=default;  ;  RFieldBase (std::string_view name, st",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RFieldBase.html:1678,release,release,1678,doc/master/classROOT_1_1Experimental_1_1RFieldBase.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RFieldBase.html,1,['release'],['release']
Deployability,"ze ; (; Int_t ; iBin = 0); const. virtual . returns the step size between the numbers of a ""discrete Interval"" ; Reimplemented in TMVA::LogInterval.; Definition at line 135 of file Interval.cxx. ◆ GetWidth(). Double_t TMVA::Interval::GetWidth ; (; ); const. virtual . Reimplemented in TMVA::LogInterval.; Definition at line 155 of file Interval.cxx. ◆ IsA(). virtual TClass * TMVA::Interval::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented in TMVA::LogInterval.; Definition at line 93 of file Interval.h. ◆ Log(). TMVA::MsgLogger & TMVA::Interval::Log ; (; ); const. private . Definition at line 171 of file Interval.cxx. ◆ Print(). void TMVA::Interval::Print ; (; std::ostream & ; os); const. virtual . Definition at line 164 of file Interval.cxx. ◆ SetMax(). void TMVA::Interval::SetMax ; (; Double_t ; m). inline . Definition at line 80 of file Interval.h. ◆ SetMin(). void TMVA::Interval::SetMin ; (; Double_t ; m). inline . Definition at line 81 of file Interval.h. ◆ Streamer(). virtual void TMVA::Interval::Streamer ; (; TBuffer & ; ). virtual . Reimplemented in TMVA::LogInterval. ◆ StreamerNVirtual(). void TMVA::Interval::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 93 of file Interval.h. Member Data Documentation. ◆ fMax. Double_t TMVA::Interval::fMax. protected . the constraints of the Interval ; Definition at line 87 of file Interval.h. ◆ fMin. Double_t TMVA::Interval::fMin. protected . Definition at line 87 of file Interval.h. ◆ fNbins. Int_t TMVA::Interval::fNbins. protected . when >0 : number of bins (discrete interval); when ==0 continuous interval ; Definition at line 88 of file Interval.h. Libraries for TMVA::Interval:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/Interval.h; tmva/tmva/src/Interval.cxx. TMVAInterval. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:33 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1Interval.html:6931,continuous,continuous,6931,doc/master/classTMVA_1_1Interval.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Interval.html,1,['continuous'],['continuous']
Deployability,"ze estimator / train network with backpropagation algorithm. void TrainOneEpoch(); train network over a single epoch/cyle of events. void Shuffle(Int_t* index, Int_t n); Input:; index: the array to shuffle; n: the size of the array; Output:; index: the shuffled indexes; This method is used for sequential training. void DecaySynapseWeights(Bool_t lateEpoch); decay synapse weights; in last 10 epochs, lower learning rate even more to find a good minimum. void TrainOneEventFast(Int_t ievt, Float_t*& branchVar, Int_t& type); fast per-event training. void TrainOneEvent(Int_t ievt); train network over a single event; this uses the new event model. Double_t GetDesiredOutput(const TMVA::Event* ev); get the desired output of this event. void UpdateNetwork(Double_t desired, Double_t eventWeight = 1.0); update the network based on how closely; the output matched the desired output. void UpdateNetwork(const vector<Float_t>& desired, Double_t eventWeight = 1.0); update the network based on how closely; the output matched the desired output. void CalculateNeuronDeltas(); have each neuron calculate its delta by backpropagation. void GeneticMinimize(); create genetics class similar to GeneticCut; give it vector of parameter ranges (parameters = weights); link fitness function of this class to ComputeEstimator; instantiate GA (see MethodCuts); run it; then this should exist for GA, Minuit and random sampling. Double_t EstimatorFunction(vector<Double_t>& parameters); interface to the estimate. Double_t ComputeEstimator(vector<Double_t>& parameters); this function is called by GeneticANN for GA optimization. void UpdateSynapses(); update synapse error fields and adjust the weights (if in sequential mode). void AdjustSynapseWeights(); just adjust the synapse weights (should be called in batch mode). void UpdatePriors(). void UpdateRegulators(). void GetApproxInvHessian(TMatrixD& InvHessian, bool regulate = true). Double_t GetMvaValue(Double_t* err = 0, Double_t* errUpper = 0). void MakeC",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMVA__MethodMLP.html:25900,update,update,25900,root/html534/TMVA__MethodMLP.html,https://root.cern,https://root.cern/root/html534/TMVA__MethodMLP.html,1,['update'],['update']
Deployability,"ze+sizeof(Int_t)];; 513 }; 514 char *buffer = fBuffer+nsize;; 515 Int_t nbytesleft = -fLeft; // set header of remaining record; 516 tobuf(buffer, nbytesleft);; 517 bestfree->SetFirst(fSeekKey+nsize);; 518 }; 519 ; 520 fSeekPdir = externFile ? externFile->GetSeekDir() : fMotherDir->GetSeekDir();; 521}; 522 ; 523////////////////////////////////////////////////////////////////////////////////; 524/// TKey default destructor.; 525 ; 526TKey::~TKey(); 527{; 528 if (fMotherDir && fMotherDir->GetListOfKeys()); 529 fMotherDir->GetListOfKeys()->Remove(this);; 530 TKey::DeleteBuffer();; 531}; 532 ; 533////////////////////////////////////////////////////////////////////////////////; 534/// Delete an object from the file.; 535///; 536/// Note: the key is not deleted. You still have to call ""delete key"".; 537/// This is different from the behaviour of TObject::Delete()!; 538 ; 539void TKey::Delete(Option_t *option); 540{; 541 if (TestBit(kIsDirectoryFile)) {; 542 // TDirectoryFile assumes that its location on file never change (for example updates are partial); 543 // and never checks if the space might have been released and thus over-write any data that might; 544 // have been written there.; 545 if (option && option[0] == 'v'); 546 printf(""Rejected attempt to delete TDirectoryFile key: %s at address %lld, nbytes = %d\n"",; 547 GetName(), fSeekKey, fNbytes);; 548 return;; 549 }; 550 if (option && option[0] == 'v') printf(""Deleting key: %s at address %lld, nbytes = %d\n"",GetName(),fSeekKey,fNbytes);; 551 Long64_t first = fSeekKey;; 552 Long64_t last = fSeekKey + fNbytes -1;; 553 if (GetFile()) GetFile()->MakeFree(first, last); // release space used by this key; 554 fMotherDir->GetListOfKeys()->Remove(this);; 555}; 556 ; 557////////////////////////////////////////////////////////////////////////////////; 558/// Delete key buffer(s).; 559 ; 560void TKey::DeleteBuffer(); 561{; 562 if (fBufferRef) {; 563 delete fBufferRef;; 564 fBufferRef = 0;; 565 } else {; 566 // We only need to de",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TKey_8cxx_source.html:19293,update,updates,19293,doc/master/TKey_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TKey_8cxx_source.html,2,"['release', 'update']","['released', 'updates']"
Deployability,"zed configuration, a null pointer is returned.; 3281 ; 3282RooNumIntConfig* RooAbsReal::specialIntegratorConfig() const; 3283{; 3284 return _specIntegratorConfig.get();; 3285}; 3286 ; 3287 ; 3288////////////////////////////////////////////////////////////////////////////////; 3289/// Returns the specialized integrator configuration for _this_ RooAbsReal.; 3290/// If this object has no specialized configuration, a null pointer is returned,; 3291/// unless createOnTheFly is true in which case a clone of the default integrator; 3292/// configuration is created, installed as specialized configuration, and returned; 3293 ; 3294RooNumIntConfig* RooAbsReal::specialIntegratorConfig(bool createOnTheFly); 3295{; 3296 if (!_specIntegratorConfig && createOnTheFly) {; 3297 _specIntegratorConfig = std::make_unique<RooNumIntConfig>(*defaultIntegratorConfig()) ;; 3298 }; 3299 return _specIntegratorConfig.get();; 3300}; 3301 ; 3302 ; 3303 ; 3304////////////////////////////////////////////////////////////////////////////////; 3305/// Return the numeric integration configuration used for this object. If; 3306/// a specialized configuration was associated with this object, that configuration; 3307/// is returned, otherwise the default configuration for all RooAbsReals is returned; 3308 ; 3309const RooNumIntConfig* RooAbsReal::getIntegratorConfig() const; 3310{; 3311 const RooNumIntConfig* config = specialIntegratorConfig() ;; 3312 if (config) return config ;; 3313 return defaultIntegratorConfig() ;; 3314}; 3315 ; 3316 ; 3317////////////////////////////////////////////////////////////////////////////////; 3318/// Return the numeric integration configuration used for this object. If; 3319/// a specialized configuration was associated with this object, that configuration; 3320/// is returned, otherwise the default configuration for all RooAbsReals is returned; 3321 ; 3322RooNumIntConfig* RooAbsReal::getIntegratorConfig(); 3323{; 3324 RooNumIntConfig* config = specialIntegratorConfig() ;; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsReal_8cxx_source.html:142639,integrat,integration,142639,doc/master/RooAbsReal_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html,2,"['configurat', 'integrat']","['configuration', 'integration']"
Deployability,"zer.; Definition at line 121 of file BasicMinimizer.h. ◆ NFree(). unsigned int ROOT::Math::BasicMinimizer::NFree ; (; ); const. overridevirtual . number of free variables (real dimension of the problem) ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 330 of file BasicMinimizer.cxx. ◆ NPar(). virtual unsigned int ROOT::Math::BasicMinimizer::NPar ; (; ); const. inlinevirtual . total number of parameter defined ; Definition at line 127 of file BasicMinimizer.h. ◆ ObjFunction(). const ROOT::Math::IMultiGenFunction * ROOT::Math::BasicMinimizer::ObjFunction ; (; ); const. inline . return pointer to used objective function ; Definition at line 130 of file BasicMinimizer.h. ◆ PrintResult(). void ROOT::Math::BasicMinimizer::PrintResult ; (; ); const. print result of minimization ; Definition at line 313 of file BasicMinimizer.cxx. ◆ ReleaseVariable(). bool ROOT::Math::BasicMinimizer::ReleaseVariable ; (; unsigned int ; ivar). overridevirtual . release an existing variable ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 189 of file BasicMinimizer.cxx. ◆ SetFinalValues(). void ROOT::Math::BasicMinimizer::SetFinalValues ; (; const double * ; x, . const MinimTransformFunction * ; func = nullptr . ). protected . Definition at line 300 of file BasicMinimizer.cxx. ◆ SetFixedVariable(). bool ROOT::Math::BasicMinimizer::SetFixedVariable ; (; unsigned int ; ivar, . const std::string & ; name, . double ; val . ). overridevirtual . set fixed variable (override if minimizer supports them ) ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 116 of file BasicMinimizer.cxx. ◆ SetFunction(). void ROOT::Math::BasicMinimizer::SetFunction ; (; const ROOT::Math::IMultiGenFunction & ; func). overridevirtual . set the function to minimize ; Implements ROOT::Math::Minimizer.; Reimplemented in ROOT::Math::GSLMinimizer, and ROOT::Math::GSLNLSMinimizer.; Definition at line 240 of file BasicMinimizer.cxx. ◆ SetLimitedVariable(). bool ROOT::Math::BasicMinimize",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html:15526,release,release,15526,doc/master/classROOT_1_1Math_1_1BasicMinimizer.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html,1,['release'],['release']
Deployability,"zero errors (empty bins);; 3971/// - the full range of the histogram is used;; 3972/// - the default Minimizer with its default configuration is used (see below Minimizer Configuration) except for linear function;; 3973/// - for linear functions (`polN`, `chenbyshev` or formula expressions combined using operator `++`) a linear minimization is used.; 3974/// - only the status of the fit is returned;; 3975/// - the fit is performed in Multithread whenever is enabled in ROOT;; 3976/// - only the last fitted function is saved in the histogram;; 3977/// - the histogram is drawn after fitting overalyed with the resulting fitting function; 3978///; 3979/// \anchor HFitMinimizer; 3980/// ### Minimizer Configuration; 3981///; 3982/// The Fit is perfomed using the default Minimizer, defined in the `ROOT::Math::MinimizerOptions` class.; 3983/// It is possible to change the default minimizer and its configuration parameters by calling these static functions before fitting (before calling `TH1::Fit`):; 3984/// - `ROOT::Math::MinimizerOptions::SetDefaultMinimizer(minimizerName, minimizerAgorithm)` for changing the minmizer and/or the corresponding algorithm.; 3985/// For example `ROOT::Math::MinimizerOptions::SetDefaultMinimizer(""GSLMultiMin"",""BFGS"");` will set the usage of the BFGS algorithm of the GSL multi-dimensional minimization; 3986/// The current defaults are (""Minuit"",""Migrad"").; 3987/// See the documentation of the `ROOT::Math::MinimizerOptions` for the available minimizers in ROOT and their corresponding algorithms.; 3988/// - `ROOT::Math::MinimizerOptions::SetDefaultTolerance` for setting a different tolerance value for the minimization.; 3989/// - `ROOT::Math::MinimizerOptions::SetDefaultMaxFunctionCalls` for setting the maximum number of function calls.; 3990/// - `ROOT::Math::MinimizerOptions::SetDefaultPrintLevel` for changing the minimizer print level from level=0 (minimal printing) to level=3 maximum printing; 3991///; 3992/// Other options are possible dependi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH1_8cxx_source.html:160654,configurat,configuration,160654,doc/master/TH1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH1_8cxx_source.html,1,['configurat'],['configuration']
Deployability,"{; 2420 return _verboseEval ;; 2421}; 2422 ; 2423 ; 2424 ; 2425////////////////////////////////////////////////////////////////////////////////; 2426/// Destructor of normalization cache element. If this element; 2427/// provides the 'current' normalization stored in RooAbsPdf::_norm; 2428/// zero _norm pointer here before object pointed to is deleted here; 2429 ; 2430RooAbsPdf::CacheElem::~CacheElem(); 2431{; 2432 // Zero _norm pointer in RooAbsPdf if it is points to our cache payload; 2433 if (_owner) {; 2434 RooAbsPdf* pdfOwner = static_cast<RooAbsPdf*>(_owner) ;; 2435 if (pdfOwner->_norm == _norm.get()) {; 2436 pdfOwner->_norm = nullptr ;; 2437 }; 2438 }; 2439}; 2440 ; 2441 ; 2442 ; 2443////////////////////////////////////////////////////////////////////////////////; 2444/// Return a p.d.f that represent a projection of this p.d.f integrated over given observables; 2445 ; 2446RooAbsPdf* RooAbsPdf::createProjection(const RooArgSet& iset); 2447{; 2448 // Construct name for new object; 2449 std::string name = std::string{GetName()} + ""_Proj["" + RooHelpers::getColonSeparatedNameString(iset, ',') + ""]"";; 2450 ; 2451 // Return projected p.d.f.; 2452 return new RooProjectedPdf(name.c_str(),name.c_str(),*this,iset) ;; 2453}; 2454 ; 2455 ; 2456 ; 2457////////////////////////////////////////////////////////////////////////////////; 2458/// Create a cumulative distribution function of this p.d.f in terms; 2459/// of the observables listed in iset. If no nset argument is given; 2460/// the c.d.f normalization is constructed over the integrated; 2461/// observables, so that its maximum value is precisely 1. It is also; 2462/// possible to choose a different normalization for; 2463/// multi-dimensional p.d.f.s: eg. for a pdf f(x,y,z) one can; 2464/// construct a partial cdf c(x,y) that only when integrated itself; 2465/// over z results in a maximum value of 1. To construct such a cdf pass; 2466/// z as argument to the optional nset argument; 2467 ; 2468RooFit::OwningPtr<RooA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:117253,integrat,integrated,117253,doc/master/RooAbsPdf_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html,1,['integrat'],['integrated']
Deployability,"{; 934 // We are in a directory, which may possibly be a file.; 935 if (fDirectory->GetList()) {; 936 // Remove us from the directory listing.; 937 fDirectory->Remove(this);; 938 }; 939 //delete the file cache if it points to this Tree; 940 TFile *file = fDirectory->GetFile();; 941 MoveReadCache(file,nullptr);; 942 }; 943 ; 944 // Remove the TTree from any list (linked to to the list of Cleanups) to avoid the unnecessary call to; 945 // this RecursiveRemove while we delete our content.; 946 ROOT::CallRecursiveRemoveIfNeeded(*this);; 947 ResetBit(kMustCleanup); // Don't redo it.; 948 ; 949 // We don't own the leaves in fLeaves, the branches do.; 950 fLeaves.Clear();; 951 // I'm ready to destroy any objects allocated by; 952 // SetAddress() by my branches. If I have clones,; 953 // tell them to zero their pointers to this shared; 954 // memory.; 955 if (fClones && fClones->GetEntries()) {; 956 // I have clones.; 957 // I am about to delete the objects created by; 958 // SetAddress() which we are sharing, so tell; 959 // the clones to release their pointers to them.; 960 for (TObjLink* lnk = fClones->FirstLink(); lnk; lnk = lnk->Next()) {; 961 TTree* clone = (TTree*) lnk->GetObject();; 962 // clone->ResetBranchAddresses();; 963 ; 964 // Reset only the branch we have set the address of.; 965 CopyAddresses(clone,true);; 966 }; 967 }; 968 // Get rid of our branches, note that this will also release; 969 // any memory allocated by TBranchElement::SetAddress().; 970 fBranches.Delete();; 971 ; 972 // The TBranch destructor is using fDirectory to detect whether it; 973 // owns the TFile that contains its data (See TBranch::~TBranch); 974 fDirectory = nullptr;; 975 ; 976 // FIXME: We must consider what to do with the reset of these if we are a clone.; 977 delete fPlayer;; 978 fPlayer = nullptr;; 979 if (fExternalFriends) {; 980 using namespace ROOT::Detail;; 981 for(auto fetree : TRangeStaticCast<TFriendElement>(*fExternalFriends)); 982 fetree->Reset();; 983 fExternalFriends->C",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8cxx_source.html:34729,release,release,34729,doc/master/TTree_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTree_8cxx_source.html,1,['release'],['release']
Deployability,"{});  Prepare GenSpec configuration object for efficient generation of multiple datasets from identical specification. ;  ; void printValue (std::ostream &os) const override;  Print value of p.d.f, also print normalization integral that was last used, if any. ;  ; void setGeneratorConfig ();  Remove the specialized numeric MC generator configuration associated with this object. ;  ; void setGeneratorConfig (const RooNumGenConfig &config);  Set the given configuration as default numeric MC generator configuration for this object. ;  ; void setNormRange (const char *rangeName);  ; void setNormRangeOverride (const char *rangeName);  ; void setTraceCounter (Int_t value, bool allNodes=false);  Reset trace counter to given value, limiting the number of future trace messages for this pdf to 'value'. ;  ; RooNumGenConfig * specialGeneratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumGenConfig * specialGeneratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *unit="""");  Constructor with plot range and unit label. ;  ;  RooAbsReal (const RooAbsReal &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooAbsReal () override;  Destructor. ;  ; virtual double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; TF1 * asTF (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a ROOT TF1,2,3 object bound to this RooAbsReal with give",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAddModel.html:16298,integrat,integrator,16298,doc/master/classRooAddModel.html,https://root.cern,https://root.cern/doc/master/classRooAddModel.html,2,"['configurat', 'integrat']","['configuration', 'integrator']"
Deployability,"}. MnUserParameterState operator()(const FCNBase&, const std::vector<double>&, const std::vector<double>&, unsigned int maxcalls=0). low-level API. FCN + parameters + errors. MnUserParameterState operator()(const ROOT::Minuit2::FCNBase& , const vector<double>& , unsigned int nrow, const vector<double>& , unsigned int maxcalls = 0) const; FCN + parameters + covariance. MnUserParameterState operator()(const FCNBase&, const std::vector<double>&, const MnUserCovariance&, unsigned int maxcalls=0); FCN + parameters + MnUserCovariance. MnUserParameterState operator()(const FCNBase&, const MnUserParameters&, unsigned int maxcalls=0). high-level API. FCN + MnUserParameters. MnUserParameterState operator()(const FCNBase&, const MnUserParameters&, const MnUserCovariance&, unsigned int maxcalls=0); FCN + MnUserParameters + MnUserCovariance. MnUserParameterState operator()(const FCNBase&, const MnUserParameterState&, unsigned int maxcalls=0); FCN + MnUserParameterState. void operator()(const ROOT::Minuit2::FCNBase& , ROOT::Minuit2::FunctionMinimum& , unsigned int maxcalls = 0) const. API to use MnHesse after minimization when function mimimum is avalilable, otherwise information on the last state will be; lost. (It would be needed to re-call the gradient and spend extra useless function calls); The Function Minimum is updated (modified) by adding the Hesse results as last state of minimization. MinimumState operator()(const MnFcn&, const MinimumState&, const MnUserTransformation&, unsigned int maxcalls=0); internal interface. unsigned int Ncycles() const; forward interface of MnStrategy. {return fStrategy.HessianNCycles();}. double Tolerstp() const; {return fStrategy.HessianStepTolerance();}. double TolerG2() const; {return fStrategy.HessianG2Tolerance();}. » Last changed: root/minuit2:$Id$ » Last generated: 2015-06-30 14:27; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Minuit2__MnHesse.html:3849,update,updated,3849,root/html602/ROOT__Minuit2__MnHesse.html,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__MnHesse.html,1,['update'],['updated']
Deployability,"}. MnUserParameterState operator()(const FCNBase&, const std::vector<double>&, const std::vector<double>&, unsigned int maxcalls=0). low-level API. FCN + parameters + errors. MnUserParameterState operator()(const ROOT::Minuit2::FCNBase& , const vector<double>& , unsigned int nrow, const vector<double>& , unsigned int maxcalls = 0) const; FCN + parameters + covariance. MnUserParameterState operator()(const FCNBase&, const std::vector<double>&, const MnUserCovariance&, unsigned int maxcalls=0); FCN + parameters + MnUserCovariance. MnUserParameterState operator()(const FCNBase&, const MnUserParameters&, unsigned int maxcalls=0). high-level API. FCN + MnUserParameters. MnUserParameterState operator()(const FCNBase&, const MnUserParameters&, const MnUserCovariance&, unsigned int maxcalls=0); FCN + MnUserParameters + MnUserCovariance. MnUserParameterState operator()(const FCNBase&, const MnUserParameterState&, unsigned int maxcalls=0); FCN + MnUserParameterState. void operator()(const ROOT::Minuit2::FCNBase& , ROOT::Minuit2::FunctionMinimum& , unsigned int maxcalls = 0) const. API to use MnHesse after minimization when function mimimum is avalilable, otherwise information on the last state will be; lost. (It would be needed to re-call the gradient and spend extra useless function calls); The Function Minimum is updated (modified) by adding the Hesse results as last state of minimization. MinimumState operator()(const MnFcn&, const MinimumState&, const MnUserTransformation&, unsigned int maxcalls=0); internal interface. unsigned int Ncycles() const; forward interface of MnStrategy. {return fStrategy.HessianNCycles();}. double Tolerstp() const; {return fStrategy.HessianStepTolerance();}. double TolerG2() const; {return fStrategy.HessianG2Tolerance();}. » Last changed: root/minuit2:$Id$ » Last generated: 2015-09-08 17:01; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Minuit2__MnHesse.html:3849,update,updated,3849,root/html534/ROOT__Minuit2__MnHesse.html,https://root.cern,https://root.cern/root/html534/ROOT__Minuit2__MnHesse.html,1,['update'],['updated']
Deployability,"}. MnUserParameterState operator()(const FCNBase&, const std::vector<double>&, const std::vector<double>&, unsigned int maxcalls=0). low-level API. FCN + parameters + errors. MnUserParameterState operator()(const ROOT::Minuit2::FCNBase& , const vector<double>& , unsigned int nrow, const vector<double>& , unsigned int maxcalls = 0) const; FCN + parameters + covariance. MnUserParameterState operator()(const FCNBase&, const std::vector<double>&, const MnUserCovariance&, unsigned int maxcalls=0); FCN + parameters + MnUserCovariance. MnUserParameterState operator()(const FCNBase&, const MnUserParameters&, unsigned int maxcalls=0). high-level API. FCN + MnUserParameters. MnUserParameterState operator()(const FCNBase&, const MnUserParameters&, const MnUserCovariance&, unsigned int maxcalls=0); FCN + MnUserParameters + MnUserCovariance. MnUserParameterState operator()(const FCNBase&, const MnUserParameterState&, unsigned int maxcalls=0); FCN + MnUserParameterState. void operator()(const ROOT::Minuit2::FCNBase& , ROOT::Minuit2::FunctionMinimum& , unsigned int maxcalls = 0) const. API to use MnHesse after minimization when function mimimum is avalilable, otherwise information on the last state will be; lost. (It would be needed to re-call the gradient and spend extra useless function calls); The Function Minimum is updated (modified) by adding the Hesse results as last state of minimization. MinimumState operator()(const MnFcn&, const MinimumState&, const MnUserTransformation&, unsigned int maxcalls=0); internal interface. unsigned int Ncycles() const; forward interface of MnStrategy. {return fStrategy.HessianNCycles();}. double Tolerstp() const; {return fStrategy.HessianStepTolerance();}. double TolerG2() const; {return fStrategy.HessianG2Tolerance();}. » Last changed: root/minuit2:$Id$ » Last generated: 2015-09-08 17:39; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/ROOT__Minuit2__MnHesse.html:3849,update,updated,3849,root/html604/ROOT__Minuit2__MnHesse.html,https://root.cern,https://root.cern/root/html604/ROOT__Minuit2__MnHesse.html,1,['update'],['updated']
Deployability,"}; 497 recreate = kFALSE;; 498 create = kTRUE;; 499 fOption = ""CREATE"";; 500 }; 501 if (create && !devnull && !gSystem->AccessPathName(fname.Data(), kFileExists)) {; 502 Error(""TFile"", ""file %s already exists"", fname.Data());; 503 zombify();; 504 return;; 505 }; 506 if (update) {; 507 if (gSystem->AccessPathName(fname.Data(), kFileExists)) {; 508 update = kFALSE;; 509 create = kTRUE;; 510 }; 511 if (update && gSystem->AccessPathName(fname.Data(), kWritePermission)) {; 512 Error(""TFile"", ""no write permission, could not open file %s"", fname.Data());; 513 zombify();; 514 return;; 515 }; 516 }; 517 if (read) {; 518 if (gSystem->AccessPathName(fname.Data(), kFileExists)) {; 519 Error(""TFile"", ""file %s does not exist"", fname.Data());; 520 zombify();; 521 return;; 522 }; 523 if (gSystem->AccessPathName(fname.Data(), kReadPermission)) {; 524 Error(""TFile"", ""no read permission, could not open file %s"", fname.Data());; 525 zombify();; 526 return;; 527 }; 528 }; 529 ; 530 // Connect to file system stream; 531 if (create || update) {; 532#ifndef WIN32; 533 fD = TFile::SysOpen(fname.Data(), O_RDWR | O_CREAT, 0644);; 534#else; 535 fD = TFile::SysOpen(fname.Data(), O_RDWR | O_CREAT | O_BINARY, S_IREAD | S_IWRITE);; 536#endif; 537 if (fD == -1) {; 538 SysError(""TFile"", ""file %s can not be opened"", fname.Data());; 539 zombify();; 540 return;; 541 }; 542 fWritable = kTRUE;; 543 } else {; 544#ifndef WIN32; 545 fD = TFile::SysOpen(fname.Data(), O_RDONLY, 0644);; 546#else; 547 fD = TFile::SysOpen(fname.Data(), O_RDONLY | O_BINARY, S_IREAD | S_IWRITE);; 548#endif; 549 if (fD == -1) {; 550 SysError(""TFile"", ""file %s can not be opened for reading"", fname.Data());; 551 zombify();; 552 return;; 553 }; 554 fWritable = kFALSE;; 555 }; 556 ; 557 // calling virtual methods from constructor not a good idea, but it is how code was developed; 558 TFile::Init(create); // NOLINT: silence clang-tidy warnings; 559}; 560 ; 561//////////////////////////////////////////////////////////////////////////////",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFile_8cxx_source.html:20211,update,update,20211,doc/master/TFile_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TFile_8cxx_source.html,1,['update'],['update']
Deployability,"};; ; // P r o j e c t p d f a n d d a t a o n x; // -------------------------------------------------; ; // Make plain projection of data and pdf on x observable; RooPlot *frame = x.frame(Title(""Projection of 3D data and pdf on X""), Bins(40));; data->plotOn(frame);; model.plotOn(frame);; ; // P r o j e c t p d f a n d d a t a o n x i n s i g n a l r a n g e; // ----------------------------------------------------------------------------------; ; // Define signal region in y and z observables; y.setRange(""sigRegion"", -1, 1);; z.setRange(""sigRegion"", -1, 1);; ; // Make plot frame; RooPlot *frame2 = x.frame(Title(""Same projection on X in signal range of (Y,Z)""), Bins(40));; ; // Plot subset of data in which all observables are inside ""sigRegion""; // For observables that do not have an explicit ""sigRegion"" range defined (e.g. observable); // an implicit definition is used that is identical to the full range (i.e. [-5,5] for x); data->plotOn(frame2, CutRange(""sigRegion""));; ; // Project model on x, integrating projected observables (y,z) only in ""sigRegion""; model.plotOn(frame2, ProjectionRange(""sigRegion""));; ; TCanvas *c = new TCanvas(""rf311_rangeplot"", ""rf310_rangeplot"", 800, 400);; c->Divide(2);; c->cd(1);; gPad->SetLeftMargin(0.15);; frame->GetYaxis()->SetTitleOffset(1.4);; frame->Draw();; c->cd(2);; gPad->SetLeftMargin(0.15);; frame2->GetYaxis()->SetTitleOffset(1.4);; frame2->Draw();; }; c#define c(i)Definition RSha256.hxx:101; RooAddPdf.h; RooConstVar.h; RooDataSet.h; RooGaussian.h; RooPlot.h; RooPolynomial.h; RooProdPdf.h; RooRealVar.h; TAxis.h; TCanvas.h; dataOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void dataDefinition TGWin32VirtualXProxy.cxx:104; gPad#define gPadDefinition TVirtualPad.h:308; RooAddPdfEfficient implementation of a sum of PDFs of the form.Definition RooAddPdf.h:33; RooArgListRooArgList is a container object that can hold multiple RooAb",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf311__rangeplot_8C.html:2539,integrat,integrating,2539,doc/master/rf311__rangeplot_8C.html,https://root.cern,https://root.cern/doc/master/rf311__rangeplot_8C.html,1,['integrat'],['integrating']
Deployability,"};; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. RooAbsData*fData; RooAbsReal*fIntegratedLikelihood; RooStats::SimpleInterval*fIntervalcached pointer to resulting interval; RooAbsReal*fLikelihood; RooAbsReal*fLogLike; RooArgSetfNuisanceParameters; RooArgSetfPOI; RooAbsPdf*fPdf; RooAbsPdf*fPosteriorPdf; RooAbsPdf*fPriorPOI; RooAbsPdf*fProductPdf; doublefSizesize used for getting the interval. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BayesianCalculator(); default constructor. Need to call the Setter methods afterwards. BayesianCalculator( /* const char* name, const char* title, */ RooAbsData& data, RooAbsPdf& pdf,						 const RooArgSet& POI,						 RooAbsPdf& priorPOI,						 const RooArgSet* nuisanceParameters ); TNamed( TString(name), TString(title) ),; constructor from data set, model pdf, set with the parameter of interest; (must contain only one parameter for the moment) and prior pdf; Optionally an additional set of parameters can be specified (nuisance parameters); which will be integrated (marginalized) when creating the posterior pdf.; A default size of 0.05 is used (for 95% CL interval). BayesianCalculator(RooAbsData& data, RooStats::ModelConfig& model); Same constructor but from data and a ModelConfig describing the model pdf and the prior, the parameter; of interest and the nuisance parameters. ~BayesianCalculator(); destructor cleaning all managed objects. void ClearAll() const; clear cached pdf objects (posterior pdf, Likelihood, NLL, etc.). void SetModel(const RooStats::ModelConfig& model); set the model configuration. RooArgSet* GetMode(RooArgSet* parameters) const; return the mode (not yet implemented) but can be easly obtained from; GetPosteriorPdf()->asTF(poi)->GetMaximumX();. RooAbsPdf* GetPosteriorPdf() const; get the posterior pdf as a RooAb",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__BayesianCalculator.html:8086,integrat,integrated,8086,root/html526/RooStats__BayesianCalculator.html,https://root.cern,https://root.cern/root/html526/RooStats__BayesianCalculator.html,1,['integrat'],['integrated']
Deployability,"~~; 6674/// ""option"" can be used select some of the optional features during; 6675/// the code generation. The possible options are:; 6676///; 6677/// - nohist : indicates that the generated ProcessFill should not fill the histogram.; 6678///; 6679/// 'maxUnrolling' controls how deep in the class hierarchy does the; 6680/// system 'unroll' classes that are not split. Unrolling a class; 6681/// allows direct access to its data members (this emulates the behavior; 6682/// of TTreeFormula).; 6683///; 6684/// The main features of this skeleton are:; 6685///; 6686/// * on-demand loading of branches; 6687/// * ability to use the 'branchname' as if it was a data member; 6688/// * protection against array out-of-bounds errors; 6689/// * ability to use the branch data as an object (when the user code is available); 6690///; 6691/// For example with Event.root, if; 6692/// ~~~ {.cpp}; 6693/// Double_t somePx = fTracks.fPx[2];; 6694/// ~~~; 6695/// is executed by one of the method of the skeleton,; 6696/// somePx will updated with the current value of fPx of the 3rd track.; 6697///; 6698/// Both macrofilename and the optional cutfilename are expected to be; 6699/// the name of source files which contain at least a free standing; 6700/// function with the signature:; 6701/// ~~~ {.cpp}; 6702/// x_t macrofilename(); // i.e function with the same name as the file; 6703/// ~~~; 6704/// and; 6705/// ~~~ {.cpp}; 6706/// y_t cutfilename(); // i.e function with the same name as the file; 6707/// ~~~; 6708/// x_t and y_t needs to be types that can convert respectively to a double; 6709/// and a bool (because the skeleton uses:; 6710///; 6711/// if (cutfilename()) htemp->Fill(macrofilename());; 6712///; 6713/// These two functions are run in a context such that the branch names are; 6714/// available as local variables of the correct (read-only) type.; 6715///; 6716/// Note that if you use the same 'variable' twice, it is more efficient; 6717/// to 'cache' the value. For example:; 6718/",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8cxx_source.html:261596,update,updated,261596,doc/master/TTree_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTree_8cxx_source.html,1,['update'],['updated']
Deployability," ; , . Int_t ; , . Int_t ; , . Double_t ;  . ). inlineoverrideprotectedvirtual . NOT IMPLEMENTED for TH2Poly. ; Reimplemented from TH1.; Definition at line 152 of file TH2Poly.h. ◆ SetFloat(). void TH2Poly::SetFloat ; (; Bool_t ; flag = true). When set to kTRUE, allows the histogram to expand if a bin outside the limits is added. ; Definition at line 1424 of file TH2Poly.cxx. ◆ SetNewBinAdded(). void TH2Poly::SetNewBinAdded ; (; Bool_t ; flag). inline . Definition at line 124 of file TH2Poly.h. ◆ Streamer(). void TH2Poly::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TH2. ; Reimplemented from TH2.; Reimplemented in TProfile2Poly. ◆ StreamerNVirtual(). void TH2Poly::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 184 of file TH2Poly.h. ◆ UpdateBinContent(). void TH2Poly::UpdateBinContent ; (; Int_t ; bin, . Double_t ; content . ). inlineoverrideprotectedvirtual . Raw update of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ; Reimplemented from TH1.; Definition at line 180 of file TH2Poly.h. Member Data Documentation. ◆ fBinContentChanged. Bool_t TH2Poly::fBinContentChanged. protected . !For the 3D Painter ; Definition at line 169 of file TH2Poly.h. ◆ fBins. TList* TH2Poly::fBins. protected . List of bins. The list owns the contained objects. ; Definition at line 170 of file TH2Poly.h. ◆ fCells. TList* TH2Poly::fCells. protected . [fNCells] The array of TLists that store the bins that intersect with each cell. List do not own the contained objects ; Definition at line 163 of file TH2Poly.h. ◆ fCellX. Int_t TH2Poly::fCellX. protected . Number of partition cells in the x-direction of the histogram. ; Definition at line 160 of file TH2Poly.h. ◆ fCellY. Int_t TH2Poly::fCellY. protected . Number of partition cells in the y-direction of the histogram. ; Definition at line 161 of file TH2Poly.h. ◆ fCompletelyInside. Bool_t* TH2Poly::fCompletelyInside. protected",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH2Poly.html:87494,update,update,87494,doc/master/classTH2Poly.html,https://root.cern,https://root.cern/doc/master/classTH2Poly.html,1,['update'],['update']
Deployability," ; class  Vavilov;  Base class describing a Vavilov distribution. More...;  ; class  VavilovAccurate;  Class describing a Vavilov distribution. More...;  ; class  VavilovAccurateCdf;  Class describing the Vavilov cdf. More...;  ; class  VavilovAccuratePdf;  Class describing the Vavilov pdf. More...;  ; class  VavilovAccurateQuantile;  Class describing the Vavilov quantile function. More...;  ; class  VavilovFast;  Class describing a Vavilov distribution. More...;  ; class  VecExpr;  Expression wrapper class for Vector objects. More...;  ; class  VectorMatrixColOp;  Class for Vector-Matrix multiplication. More...;  ; class  VectorMatrixRowOp;  ; struct  VegasParameters;  Structures collecting parameters for VEGAS multidimensional integration For implementation of default parameters see file mathmore/src/GSLMCIntegrationWorkspace.h. More...;  ; class  VirtualIntegrator;  Abstract class for all numerical integration methods (1D and multi-dim) Interface defining the common methods for the numerical integrator classes of one and multi dimensions The derived class VirtualIntegratorOneDim defines the methods for one-dimensional integration. More...;  ; class  VirtualIntegratorMultiDim;  Interface (abstract) class for multi numerical integration It must be implemented by the concrete Integrator classes like ROOT::Math::GSLMCIntegrator. More...;  ; class  VirtualIntegratorOneDim;  Interface (abstract) class for 1D numerical integration It must be implemented by the concrete Integrator classes like ROOT::Math::GSLIntegrator. More...;  ; class  WrappedFunction;  Template class to wrap any C++ callable object which takes one argument i.e. More...;  ; class  WrappedMemFunction;  Template class to wrap any member function of a class taking a double and returning a double in a 1D function interface For example, if you have a class like: struct X { double Eval(double x); }; you can wrapped in the following way: WrappedMemFunction<X, double ( X::* ) (double) > f;. More...;  ; class  ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1Math.html:32675,integrat,integration,32675,doc/master/namespaceROOT_1_1Math.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html,6,['integrat'],"['integration', 'integrator']"
Deployability," ; e). Value: do { \; if (R__unlikely(!(e))) \; ::Fatal("""", kAssertMsg, _QUOTE_(e), __LINE__, __FILE__); \; } while (false); _QUOTE_#define _QUOTE_(name)Definition RConfig.hxx:446; R__unlikely#define R__unlikely(expr)Definition RConfig.hxx:586; e#define e(i)Definition RSha256.hxx:103; kAssertMsgconst char * kAssertMsgDefinition TError.cxx:35. Checks condition e and reports a fatal error if it's false. ; Warning; this check is NOT stripped in release mode, so it should not be used for hot paths. For those cases, prefer a regular assert();; depending on gErrorIgnoreLevel, this might not terminate the program, . See alsoFatal. ; Definition at line 125 of file TError.h. ◆ R__CHECK. #define R__CHECK; (;  ; e). Value: do { \; if (R__unlikely(!(e))) \; ::Warning("""", kCheckMsg, _QUOTE_(e), __LINE__, __FILE__); \; } while (false); kCheckMsgconst char * kCheckMsgDefinition TError.cxx:36. Checks condition e and reports a warning message if it's false. ; Warningthis check is NOT stripped in release mode, so it should not be used for hot paths. ; Definition at line 134 of file TError.h. Typedef Documentation. ◆ ErrorHandlerFunc_t. typedef void(* ErrorHandlerFunc_t) (int level, Bool_t abort, const char *location, const char *msg). Definition at line 71 of file TError.h. Function Documentation. ◆ AbstractMethod(). void AbstractMethod ; (; const char * ; method). This function can be used in abstract base classes in case one does not want to make the class a ""real"" (in C++ sense) ABC. ; If this function is called it will warn the user that the function should have been overridden. ; Definition at line 159 of file TError.cxx. ◆ Break(). void Break ; (; const char * ; location, . const char * ; msgfmt, .  ; ... . ). Use this function in case an error occurred. ; Definition at line 207 of file TError.cxx. ◆ DefaultErrorHandler(). void DefaultErrorHandler ; (; Int_t ; level, . Bool_t ; abort_bool, . const char * ; location, . const char * ; msg . ). The default error handler function. ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TError_8h.html:4834,release,release,4834,doc/master/TError_8h.html,https://root.cern,https://root.cern/doc/master/TError_8h.html,1,['release'],['release']
Deployability," ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from RooPrintable; enum  ContentsOption { ;   kName =1; , kClassName =2; , kValue =4; , kArgs =8; , ;   kExtras =16; , kAddress =32; , kTitle =64; , kCollectionHeader =128. };  ; enum  StyleOption { ;   kInline =1; , kSingleLine =2; , kStandard =3; , kVerbose =4; , ;   kTreeStructure =5. };  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooRealMPFE.html:59320,integrat,integration,59320,doc/master/classRooRealMPFE.html,https://root.cern,https://root.cern/doc/master/classRooRealMPFE.html,2,"['configurat', 'integrat']","['configuration', 'integration']"
Deployability," ; other, . const char * ; name = nullptr . ). Copy constructor. ; Definition at line 95 of file RooBCPEffDecay.cxx. Member Function Documentation. ◆ Class(). static TClass * RooBCPEffDecay::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooBCPEffDecay::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooBCPEffDecay::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 69 of file RooBCPEffDecay.h. ◆ clone(). TObject * RooBCPEffDecay::clone ; (; const char * ; newname); const. inlineoverridevirtual . Implements RooAbsArg.; Definition at line 39 of file RooBCPEffDecay.h. ◆ coefAnalyticalIntegral(). double RooBCPEffDecay::coefAnalyticalIntegral ; (; Int_t ; coef, . Int_t ; code, . const char * ; rangeName = nullptr . ); const. overridevirtual . Default implementation of function implementing advertised integrals. ; Only the pass-through scenario (no integration) is implemented. ; Reimplemented from RooAbsAnaConvPdf.; Definition at line 156 of file RooBCPEffDecay.cxx. ◆ coefficient(). double RooBCPEffDecay::coefficient ; (; Int_t ; basisIndex); const. overridevirtual . B0 : _tag = +1. ; B0bar : _tag = -1 Parameters. [in]basisIndex. Implements RooAbsAnaConvPdf.; Definition at line 121 of file RooBCPEffDecay.cxx. ◆ DeclFileName(). static const char * RooBCPEffDecay::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 69 of file RooBCPEffDecay.h. ◆ generateEvent(). void RooBCPEffDecay::generateEvent ; (; Int_t ; code). overridevirtual . Generates mix-state dependent. ; Parameters. [in]code. Reimplemented from RooAbsPdf.; Definition at line 208 of file RooBCPEffDecay.cxx. ◆ getCoefAnalyticalIntegral(). Int_t RooBCPEffDecay::getCoefAnalyticalIntegral ; (; Int_t ; coef, . RooArgSet & ; allVars, . RooArgSet & ; analVars, . const char * ; rangeName = nullptr . ); const. ove",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBCPEffDecay.html:80176,integrat,integration,80176,doc/master/classRooBCPEffDecay.html,https://root.cern,https://root.cern/doc/master/classRooBCPEffDecay.html,1,['integrat'],['integration']
Deployability," ; other, . const char * ; name = nullptr . ). Copy constructor. ; Definition at line 95 of file RooBCPGenDecay.cxx. Member Function Documentation. ◆ Class(). static TClass * RooBCPGenDecay::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooBCPGenDecay::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooBCPGenDecay::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 69 of file RooBCPGenDecay.h. ◆ clone(). TObject * RooBCPGenDecay::clone ; (; const char * ; newname); const. inlineoverridevirtual . Implements RooAbsArg.; Definition at line 40 of file RooBCPGenDecay.h. ◆ coefAnalyticalIntegral(). double RooBCPGenDecay::coefAnalyticalIntegral ; (; Int_t ; coef, . Int_t ; code, . const char * ; rangeName = nullptr . ); const. overridevirtual . Default implementation of function implementing advertised integrals. ; Only the pass-through scenario (no integration) is implemented. ; Reimplemented from RooAbsAnaConvPdf.; Definition at line 152 of file RooBCPGenDecay.cxx. ◆ coefficient(). double RooBCPGenDecay::coefficient ; (; Int_t ; basisIndex); const. overridevirtual . B0 : _tag = +1 B0bar : _tag = -1. ; Implements RooAbsAnaConvPdf.; Definition at line 118 of file RooBCPGenDecay.cxx. ◆ DeclFileName(). static const char * RooBCPGenDecay::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 69 of file RooBCPGenDecay.h. ◆ generateEvent(). void RooBCPGenDecay::generateEvent ; (; Int_t ; code). overridevirtual . Generate mix-state dependent. ; Reimplemented from RooAbsPdf.; Definition at line 206 of file RooBCPGenDecay.cxx. ◆ getCoefAnalyticalIntegral(). Int_t RooBCPGenDecay::getCoefAnalyticalIntegral ; (; Int_t ; coef, . RooArgSet & ; allVars, . RooArgSet & ; analVars, . const char * ; rangeName = nullptr . ); const. overridevirtual . Default implementation of function a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBCPGenDecay.html:79901,integrat,integration,79901,doc/master/classRooBCPGenDecay.html,https://root.cern,https://root.cern/doc/master/classRooBCPGenDecay.html,1,['integrat'],['integration']
Deployability," ; theGraph, . Int_t ; px, . Int_t ; py . ). overridevirtual . Compute distance from point px,py to a graph. ; Compute the closest distance of approach from point px,py to this line. The distance is computed in pixels units. ; Implements TVirtualGraphPainter.; Definition at line 717 of file TGraphPainter.cxx. ◆ DrawPanelHelper(). void TGraphPainter::DrawPanelHelper ; (; TGraph * ; theGraph). overridevirtual . Display a panel with all histogram drawing options. ; Implements TVirtualGraphPainter.; Definition at line 796 of file TGraphPainter.cxx. ◆ ExecuteEventHelper(). void TGraphPainter::ExecuteEventHelper ; (; TGraph * ; theGraph, . Int_t ; event, . Int_t ; px, . Int_t ; py . ). overridevirtual . Execute action corresponding to one event. ; This member function is called when a graph is clicked with the locator.; If the left mouse button is clicked on one of the line end points, this point follows the cursor until button is released.; If the middle mouse button clicked, the line is moved parallel to itself until the button is released. ; Implements TVirtualGraphPainter.; Definition at line 821 of file TGraphPainter.cxx. ◆ GetHighlightPoint(). Int_t TGraphPainter::GetHighlightPoint ; (; TGraph * ; theGraph); const. virtual . Return the highlighted point for theGraph. ; Definition at line 1110 of file TGraphPainter.cxx. ◆ GetObjectInfoHelper(). char * TGraphPainter::GetObjectInfoHelper ; (; TGraph * ; theGraph, . Int_t ; px, . Int_t ; py . ); const. overridevirtual . Implements TVirtualGraphPainter.; Definition at line 1101 of file TGraphPainter.cxx. ◆ HighlightPoint(). void TGraphPainter::HighlightPoint ; (; TGraph * ; theGraph, . Int_t ; hpoint, . Int_t ; distance . ). virtual . Check on highlight point. ; Definition at line 1136 of file TGraphPainter.cxx. ◆ IsA(). TClass * TGraphPainter::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 71 of file TGraphPainter.h. ◆ PaintGraph(). vo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphPainter.html:43530,release,released,43530,doc/master/classTGraphPainter.html,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html,1,['release'],['released']
Deployability," ; virtual Int_t GetFontAscent (const char *mess) const;  Default version is noop, but in principle what ROOT understands as ascent is text related. ;  ; virtual Int_t GetFontDescent () const;  Returns the descent of the current font (in pixels. ;  ; virtual Int_t GetFontDescent (const char *mess) const;  Default version is noop, but in principle what ROOT understands as descent requires a certain text. ;  ; virtual FontStruct_t GetGCFont (GContext_t gc);  Return the font associated with the graphics context gc. ;  ; virtual Double_t GetOpenGLScalingFactor ();  On a HiDPI resolution it can be > 1., this means glViewport should use scaled width and height. ;  ; TClass * IsA () const override;  ; virtual Bool_t MakeOpenGLContextCurrent (Handle_t ctx, Window_t windowID);  Makes context ctx current OpenGL context. ;  ; virtual void MapGCFont (GContext_t, FontStruct_t);  Map the XftFont with the Graphics Context using it. ;  ; virtual Bool_t NeedRedraw (ULongptr_t tgwindow, Bool_t force);  Notify the low level GUI layer ROOT requires ""tgwindow"" to be updated. ;  ; virtual Pixmap_t ReadGIF (Int_t x0, Int_t y0, const char *file, Window_t id=0);  If id is NULL - loads the specified gif file at position [x0,y0] in the current window. ;  ; virtual UInt_t ScreenWidthMM () const;  Returns the width of the screen in millimeters. ;  ; virtual void SelectPixmap (Int_t qpixid);  Selects the pixmap ""qpixid"". ;  ; void SetFillColor (Color_t cindex) override;  Sets color index ""cindex"" for fill areas. ;  ; void SetFillStyle (Style_t style) override;  Sets fill area style. ;  ; void SetLineColor (Color_t cindex) override;  Sets color index ""cindex"" for drawing lines. ;  ; void SetLineStyle (Style_t linestyle) override;  Sets the line style. ;  ; void SetLineWidth (Width_t width) override;  Sets the line width. ;  ; void SetMarkerColor (Color_t cindex) override;  Sets color index ""cindex"" for markers. ;  ; void SetMarkerSize (Float_t markersize) override;  Sets marker size index. ;  ; v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGWin32VirtualXProxy.html:31679,update,updated,31679,doc/master/classTGWin32VirtualXProxy.html,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html,1,['update'],['updated']
Deployability," ; virtual void RemoveEntries (Int_t from_ID, Int_t to_ID);  ; virtual void RemoveEntry (Int_t id=-1);  Remove entry. If id == -1, the currently selected entry is removed. ;  ; virtual void ReturnPressed ();  Add new entry to combo box when return key pressed inside text entry ReturnPressed signal is emitted. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a combo box widget as a C++ statement(s) on output stream out. ;  ; virtual void Select (Int_t id, Bool_t emit=kTRUE);  Make the selected item visible in the combo box window and emit signals according to the second parameter. ;  ; virtual void Selected (const char *txt);  ; virtual void Selected (Int_t id);  ; virtual void Selected (Int_t widgetId, Int_t id);  Emit signal, done only when selected entry changed. ;  ; virtual void SetEnabled (Bool_t on=kTRUE);  Set state of combo box. If kTRUE=enabled, kFALSE=disabled. ;  ; virtual void SetTopEntry (TGLBEntry *e, TGLayoutHints *lh);  Set a new combo box value (normally update of text string in fSelEntry is done via fSelEntry::Update()). ;  ; virtual void SortByName (Bool_t ascend=kTRUE);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGCompositeFrame;  TGCompositeFrame (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=0, Pixel_t back=GetDefaultFrameBackground());  Create a composite frame. ;  ;  TGCompositeFrame (TGClient *c, Window_t id, const TGWindow *parent=nullptr);  Create a frame using an externally created window. ;  ;  ~TGCompositeFrame () override;  Delete a composite frame. ;  ; virtual void AddFrame (TGFrame *f, TGLayoutHints *l=nullptr);  Add frame to the composite frame using the specified layout hints. ;  ; void ChangeOptions (UInt_t options) override;  Change composite frame options. Options is an OR of the EFrameTypes. ;  ; virtual void ChangeSubframesBackground (P",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGComboBox.html:4288,update,update,4288,doc/master/classTGComboBox.html,https://root.cern,https://root.cern/doc/master/classTGComboBox.html,1,['update'],['update']
Deployability," ; virtual void RemoveEntries (Int_t from_ID, Int_t to_ID);  ; virtual void RemoveEntry (Int_t id=-1);  Remove entry. If id == -1, the currently selected entry is removed. ;  ; virtual void ReturnPressed ();  Add new entry to combo box when return key pressed inside text entry ReturnPressed signal is emitted. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a combo box widget as a C++ statement(s) on output stream out. ;  ; virtual void Select (Int_t id, Bool_t emit=kTRUE);  Make the selected item visible in the combo box window and emit signals according to the second parameter. ;  ; virtual void Selected (const char *txt);  ; virtual void Selected (Int_t id);  ; virtual void Selected (Int_t widgetId, Int_t id);  Emit signal, done only when selected entry changed. ;  ; virtual void SetEnabled (Bool_t on=kTRUE);  Set state of combo box. If kTRUE=enabled, kFALSE=disabled. ;  ; virtual void SetTopEntry (TGLBEntry *e, TGLayoutHints *lh);  Set a new combo box value (normally update of text string in fSelEntry is done via fSelEntry::Update()). ;  ; virtual void SortByName (Bool_t ascend=kTRUE);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGCompositeFrame;  TGCompositeFrame (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=0, Pixel_t back=GetDefaultFrameBackground());  Create a composite frame. ;  ;  TGCompositeFrame (TGClient *c, Window_t id, const TGWindow *parent=nullptr);  Create a frame using an externally created window. ;  ;  ~TGCompositeFrame () override;  Delete a composite frame. ;  ; virtual void AddFrame (TGFrame *f, TGLayoutHints *l=nullptr);  Add frame to the composite frame using the specified layout hints. ;  ; void ChangeOptions (UInt_t options) override;  Change composite frame options. Options is an OR of the EFrameTypes. ;  ; virtual void ChangeSubframesBackground (Pixel_t back);  Change background color for this frame and all subframes. ;  ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGFontTypeComboBox.html:4311,update,update,4311,doc/master/classTGFontTypeComboBox.html,https://root.cern,https://root.cern/doc/master/classTGFontTypeComboBox.html,1,['update'],['update']
Deployability," ; void SetClearColor (Color_t col);  Set background method. ;  ; void SetClipAutoUpdate (Bool_t x);  ; void SetCurrentCamera (ECameraType camera);  Set current active camera - 'cameraType' one of: kCameraPerspX, kCameraPerspY, kCameraPerspZ, kCameraOrthoXOY, kCameraOrthoXOZ, kCameraOrthoZOY, kCameraOrthoXnOY, kCameraOrthoXnOZ, kCameraOrthoZnOY. ;  ; void SetDrawCameraCenter (Bool_t x);  Draw camera look at and rotation point. ;  ; virtual void SetEventHandler (TGEventHandler *handler);  Set the event-handler. ;  ; void SetFader (Float_t x);  ; virtual void SetGedEditor (TGedEditor *ed);  ; void SetGuideState (Int_t axesType, Bool_t axesDepthTest, Bool_t referenceOn, const Double_t *referencePos);  Set the state of guides (axes & reference markers) from arguments. ;  ; void SetIgnoreSizesOnUpdate (Bool_t v);  ; void SetLineScale (Float_t s);  ; void SetMaxSceneDrawTimeHQ (Float_t t);  ; void SetMaxSceneDrawTimeLQ (Float_t t);  ; void SetOrthoCamera (ECameraType camera, Double_t zoom, Double_t dolly, Double_t center[3], Double_t hRotate, Double_t vRotate);  Set an orthographic camera to supplied configuration - note this does not need to be the current camera - though you will not see the effect if it is not. ;  ; void SetPerspectiveCamera (ECameraType camera, Double_t fov, Double_t dolly, Double_t center[3], Double_t hRotate, Double_t vRotate);  Set a perspective camera to supplied configuration - note this does not need to be the current camera - though you will not see the effect if it is not. ;  ; void SetPictureFileName (const TString &f);  ; void SetPointScale (Float_t s);  ; void SetResetCamerasOnUpdate (Bool_t v);  ; void SetSmartRefresh (Bool_t smart_ref);  ; void SetSmoothLines (Bool_t s);  ; void SetSmoothPoints (Bool_t s);  ; void SetStereo (Bool_t stereo, Bool_t quad_buf=kTRUE);  Enable stereo rendering. ;  ; void SetStereoEyeOffsetFac (Float_t f);  ; void SetStereoFrustumAsymFac (Float_t f);  ; void SetStereoZeroParallax (Float_t f);  ; void Streamer (TB",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLEmbeddedViewer.html:10854,configurat,configuration,10854,doc/master/classTGLEmbeddedViewer.html,https://root.cern,https://root.cern/doc/master/classTGLEmbeddedViewer.html,3,['configurat'],['configuration']
Deployability," ; void registerProxy (RooSetProxy &proxy);  Register an RooSetProxy in the proxy list. ;  ; void setProxyNormSet (const RooArgSet *nset);  Forward a change in the cached normalization argset to all the registered proxies. ;  ; void setShapeDirty (const RooAbsArg *source);  Notify that a shape-like property (e.g. binning) has changed. ;  ; void setValueDirty (const RooAbsArg *source);  Force element to re-evaluate itself when a value is requested. ;  ; void unRegisterProxy (RooArgProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooListProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooSetProxy &proxy);  Remove proxy from proxy list. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Private Member Functions; double integrate (const RooArgSet *normSet, double low, double high) const;  Integrate the wrapped PDF using our current integrator, with given norm set and limits. ;  ; double operator() (double x) const;  Binding used by the integrator to evaluate the PDF. ;  . Private Attributes; std::vector< double > _binBoundaries;  ! Workspace to store data for bin sampling ;  ; std::unique_ptr< ROOT::Math::IntegratorOneDim > _integrator {nullptr};  ! Integrator used to sample bins. ;  ; RooTemplateProxy< RooAbsRealLValue > _observable;  ; RooTemplateProxy< RooAbsPdf > _pdf;  ; double _relEpsilon {1.E-4};  Default integrator precision. ;  . Friends; template<typename Func > ; class ROOT::Math::WrappedFunction;  . Additional Inherited Members;  Public Types inherited from RooAbsPdf; enum  ExtendMode { CanNotBeExtended; , CanBeExtended; , MustBeExtended; };  ;  Public Types inherited from RooAbsReal; enum  ErrorLoggingMode { PrintErrors; , CollectErrors; , CountErrors; , Ignore; };  ; enum  ScaleType { Raw; , Relative; , NumEvent; , RelativeExpected; };  ; using val",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBinSamplingPdf.html:70976,integrat,integrate,70976,doc/master/classRooBinSamplingPdf.html,https://root.cern,https://root.cern/doc/master/classRooBinSamplingPdf.html,2,['integrat'],"['integrate', 'integrator']"
Deployability," ; void unRegisterProxy (RooSetProxy &proxy);  Remove proxy from proxy list. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; RooRealProxy A;  ; RooRealProxy B;  ; RooRealProxy C;  ; RooRealProxy dm;  ; RooRealProxy dm0;  ;  Protected Attributes inherited from RooAbsPdf; Int_t _errorCount = 0;  Number of errors remaining to print. ;  ; Int_t _negCount = 0;  Number of negative probabilities remaining to print. ;  ; RooAbsReal * _norm = nullptr;  ; RooObjCacheManager _normMgr;  ; TString _normRange;  Normalization range. ;  ; RooArgSet const * _normSet = nullptr;  Normalization integral (owned by _normMgr) ;  ; double _rawValue = 0;  ; bool _selectComp = false;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; std::unique_ptr< RooNumGenConfig > _specGeneratorConfig;  ! MC generator configuration specific for this object ;  ; Int_t _traceCount = 0;  Number of traces remaining to print. ;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; Int_t _plotBins = 100;  Number of plot bins. ;  ; double _plotMax = 0.0;  Maximum of plot range. ;  ; double _plotMin = 0.0;  Minimum of plot range. ;  ; bool _selectComp = true;  A buffer for reading values from trees. ;  ; std::unique_ptr< RooNumIntConfig > _specIntegratorConfig;  ; TreeReadBuffer * _treeReadBuffer = nullptr;  ; TString _unit;  Unit for objects value. ;  ; double _value = 0.0;  Cache for current value of object. ;  ;  Protected Attributes inherited from RooAbsArg; std::set< std::string > _boolAttrib;  ; std::set< std::string > _boolAttribTransient;  ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooDstD0BG.html:68027,configurat,configuration,68027,doc/master/classRooDstD0BG.html,https://root.cern,https://root.cern/doc/master/classRooDstD0BG.html,1,['configurat'],['configuration']
Deployability," ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; bool _useStandardParametrization = false;  ; RooRealProxy k;  the shape parameter, exp(sigma) ;  ; RooRealProxy m0;  the median, exp(mu) ;  ; RooRealProxy x;  the variable ;  ;  Protected Attributes inherited from RooAbsPdf; Int_t _errorCount = 0;  Number of errors remaining to print. ;  ; Int_t _negCount = 0;  Number of negative probabilities remaining to print. ;  ; RooAbsReal * _norm = nullptr;  ; RooObjCacheManager _normMgr;  ; TString _normRange;  Normalization range. ;  ; RooArgSet const * _normSet = nullptr;  Normalization integral (owned by _normMgr) ;  ; double _rawValue = 0;  ; bool _selectComp = false;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; std::unique_ptr< RooNumGenConfig > _specGeneratorConfig;  ! MC generator configuration specific for this object ;  ; Int_t _traceCount = 0;  Number of traces remaining to print. ;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; Int_t _plotBins = 100;  Number of plot bins. ;  ; double _plotMax = 0.0;  Maximum of plot range. ;  ; double _plotMin = 0.0;  Minimum of plot range. ;  ; bool _selectComp = true;  A buffer for reading values from trees. ;  ; std::unique_ptr< RooNumIntConfig > _specIntegratorConfig;  ; TreeReadBuffer * _treeReadBuffer = nullptr;  ; TString _unit;  Unit for objects value. ;  ; double _value = 0.0;  Cache for current value of object. ;  ;  Protected Attributes inherited from RooAbsArg; std::set< std::string > _boolAttrib;  ; std::set< std::string > _boolAttribTransient;  ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooLognormal.html:68705,configurat,configuration,68705,doc/master/classRooLognormal.html,https://root.cern,https://root.cern/doc/master/classRooLognormal.html,1,['configurat'],['configuration']
Deployability," ;  TKeySQL (TDirectory *mother, const void *obj, const TClass *cl, const char *name, const char *title=nullptr);  Creates TKeySQL and convert obj data to TSQLStructure via TBufferSQL2. ;  ;  TKeySQL (TDirectory *mother, Long64_t keyid, Long64_t objid, const char *name, const char *title, const char *keydatetime, Int_t cycle, const char *classname);  Create TKeySQL object, which corresponds to single entry in keys table. ;  ;  ~TKeySQL () override=default;  ; void Delete (Option_t *option="""") final;  Removes key from current directory Note: TKeySQL object is not deleted. ;  ; void DeleteBuffer () final;  Delete key buffer(s). ;  ; void FillBuffer (char *&) final;  Encode key header into output buffer. ;  ; char * GetBuffer () const final;  ; Long64_t GetDBDirId () const;  return sql id of parent directory ;  ; Long64_t GetDBKeyId () const;  ; Long64_t GetDBObjId () const;  ; Long64_t GetSeekKey () const final;  ; Long64_t GetSeekPdir () const final;  ; TClass * IsA () const override;  ; Bool_t IsKeyModified (const char *keyname, const char *keytitle, const char *keydatime, Int_t cycle, const char *classname);  Compares keydata with provided and return kTRUE if key was modified Used in TFile::StreamKeysForDirectory() method to verify data for that keys should be updated. ;  ; void Keep () final;  Set the ""KEEP"" status. ;  ; Int_t Read (TObject *obj) final;  To read an object from the file. ;  ; void ReadBuffer (char *&) final;  Decode input buffer. ;  ; Bool_t ReadFile () final;  Read the key structure from the file. ;  ; TObject * ReadObj () final;  Read object derived from TObject class If it is not TObject or in case of error, return 0. ;  ; void * ReadObjectAny (const TClass *expectedClass) final;  Read object of any type from SQL database. ;  ; TObject * ReadObjWithBuffer (char *bufferRead) final;  Read object derived from TObject class If it is not TObject or in case of error, return 0. ;  ; void SetBuffer () final;  ; void Streamer (TBuffer &) override;  Strea",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTKeySQL.html:2036,update,updated,2036,doc/master/classTKeySQL.html,https://root.cern,https://root.cern/doc/master/classTKeySQL.html,1,['update'],['updated']
Deployability," ;  ~GaussIntegrator () override;  Destructor. ;  ; void AbsValue (bool flag);  Static function: set the fgAbsValue flag. ;  ; double Error () const override;  Return the estimate of the absolute Error of the last Integral calculation. ;  ; double Integral () override;  Returns Integral of function on an infinite interval. ;  ; double Integral (const std::vector< double > &pts) override;  This method is not implemented. ;  ; double Integral (double a, double b) override;  Returns Integral of function between a and b. ;  ; double IntegralCauchy (double a, double b, double c) override;  This method is not implemented. ;  ; double IntegralLow (double b) override;  Returns Integral of function on a lower semi-infinite interval. ;  ; double IntegralUp (double a) override;  Returns Integral of function on an upper semi-infinite interval. ;  ; double Result () const override;  Returns the result of the last Integral calculation. ;  ; void SetFunction (const IGenFunction &) override;  Set integration function (flag control if function must be copied inside). ;  ; int Status () const override;  return the status of the last integration - 0 in case of success ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegratorOneDim;  ~VirtualIntegratorOneDim () override;  destructor: no operation ;  ; virtual ROOT::Math::IntegrationOneDim::Type Type () const;  return type of integrator ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegrator; virtual ~VirtualIntegrator ();  destructor: no operation ;  . Protected Attributes; int fNum;  Number of points used in the estimation of the integral. ;  ; double * fW;  Weights of the points used. ;  ; double * fX;  Abscisa of the points used. ;  ;  Protected Attributes inherited from ROOT::Math::GaussIntegrator; double fEpsAbs;  Absolute error. ;  ; double fEpsRel;  Relative error. ;  ; const IGenFunction * fFunction;  Pointer to function used. ;  ; double fLastError;  Error from the last estimation. ;  ; doubl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GaussLegendreIntegrator.html:2881,integrat,integration,2881,doc/master/classROOT_1_1Math_1_1GaussLegendreIntegrator.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GaussLegendreIntegrator.html,1,['integrat'],['integration']
Deployability," Base class for TEveUtil visualization elements, providing hierarchy management, rendering control and list-tree item management. More...;  ; class  TEveElementEditor;  Editor for TEveElement class. More...;  ; class  TEveElementList;  A list of TEveElements. More...;  ; class  TEveElementListProjected;  A projected element list – required for proper propagation of render state to projected views. More...;  ; class  TEveEventManager;  Base class for event management and navigation. More...;  ; class  TEveException;  Exception class thrown by TEve classes and macros. More...;  ; class  TEveFrameBox;  Description of a 2D or 3D frame that can be used to visually group a set of objects. More...;  ; class  TEveFrameBoxGL;  A class encapsulating GL rendering of TEveFrameBox via a static member function. More...;  ; class  TEveGDoubleValuator;  Composite GUI element for selection of range (label, two number-entries and double-slider). More...;  ; class  TEveGedEditor;  Specialization of TGedEditor for proper update propagation to TEveManager. More...;  ; class  TEveGedNameFrame;  Specialization of TGedNameFrame used in EVE. More...;  ; class  TEveGedNameTextButton;  Specialization of TGTextButton for EVE name frame. More...;  ; class  TEveGeoManagerHolder;  Exception safe wrapper for setting gGeoManager. More...;  ; class  TEveGeoNode;  Wrapper for TGeoNode that allows it to be shown in GUI and controlled as a TEveElement. More...;  ; class  TEveGeoNodeEditor;  Editor for TEveGeoNode class. More...;  ; class  TEveGeoPolyShape;  Description of TEveGeoPolyShape. More...;  ; class  TEveGeoShape;  Wrapper for TGeoShape with absolute positioning and color attributes allowing display of extracted TGeoShape's (without an active TGeoManager) and simplified geometries (needed for non-linear projections). More...;  ; class  TEveGeoShapeExtract;  Globally positioned TGeoShape with rendering attributes and an optional list of daughter shape-extracts. More...;  ; class  TEveGeoShapePro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__TEve.html:6749,update,update,6749,doc/master/group__TEve.html,https://root.cern,https://root.cern/doc/master/group__TEve.html,1,['update'],['update']
Deployability," CPyint3_t;  CPyint4_t;  CPyint5_t;  CPyint6_t;  CPyint7_t;  CPyint8_t;  CPyint9_t;  CPyints_t;  CPyjets_t;  CPymssm_t;  CPypars_t;  CPyssmt_t;  CPysubs_t;  CQuartzImage;  CQuartzPixmap;  CQuartzView;  CQuartzWindow;  CRectangle_t;  CRedirectHandle_t;  Credirguard;  Crng_state_st;  CRoo1DMomentMorphFunction1-dimensional morph function between a list of input functions (varlist) as a function of one input parameter (m) ;  CRoo1DTable;  CRoo2DKeysPdfTwo-dimensional kernel estimation PDF ;  ►CRoo2DMomentMorphFunction2-dimensional morph function between a list of function-numbers as a function of two input parameters (m1 and m2) ;  CSorterL2H;  ►CRooAbsAnaConvPdf;  CCacheElemIterator over _convNormSet ;  CRooAbsArgRooAbsArg is the common abstract base class for objects that represent a value (of arbitrary type) and ""shape"" that in general depends on (is a client of) other RooAbsArg subclasses ;  CRooAbsBinning;  CRooAbsCache;  ►CRooAbsCachedPdf;  CAnaIntConfigRegistry for analytical integration codes ;  CPdfCacheElem;  ►CRooAbsCachedReal;  CFuncCacheElem;  CRooAbsCacheElement;  CRooAbsCategory;  CRooAbsCategoryLValue;  CRooAbsCollection;  ►CRooAbsData;  CPlotOpt;  CRooAbsDataStore;  CRooAbsFunc;  CRooAbsGenContext;  CRooAbsHiddenReal;  CRooAbsIntegrator;  CRooAbsLValue;  CRooAbsMCStudyModule;  CRooAbsMoment;  CRooAbsNumGenerator;  CRooAbsOptTestStatistic;  ►CRooAbsPdfRooAbsPdf is the abstract interface for all probability density functions The class provides hybrid analytical/numerical normalization for its implementations, error tracing and a MC generator interface ;  CCacheElemNormalization set with for above integral ;  CGenSpec;  CRooAbsProxy;  ►CRooAbsRealRooAbsReal is the common abstract base class for objects that represent a real value and implements functionality common to all real-valued objects such as the ability to plot them, to construct integrals of them, the ability to advertise (partial) analytical integrals etc ;  CEvalError;  CPlotOpt;  CRooAbsRealLVa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html606/annotated.html:79858,integrat,integration,79858,root/html606/annotated.html,https://root.cern,https://root.cern/root/html606/annotated.html,1,['integrat'],['integration']
Deployability," CVOptimizerGeneric Optimizer class ;  ►NExperimental;  CClassification;  CClassificationResult;  ►NkNN;  CEvent;  CModulekNN;  CNodeThis file contains binary tree and global function template that searches tree for k-nearest neigbors ;  NTMVAGlob;  CAbsoluteDeviationLossFunctionAbsolute Deviation Loss Function ;  CAbsoluteDeviationLossFunctionBDTAbsolute Deviation BDT Loss Function ;  CAbsValue;  CBDTEventWrapper;  CBinarySearchTreeA simple Binary search tree including a volume search method ;  CBinarySearchTreeNodeNode for the BinarySearch or Decision Trees ;  CBinaryTreeBase class for BinarySearch and Decision Trees ;  CCCPrunerA helper class to prune a decision tree using the Cost Complexity method (see Classification and Regression Trees by Leo Breiman et al) ;  ►CCCTreeWrapper;  CCCTreeNode;  CClassifierFactoryThis is the MVA factory ;  CClassInfoClass that contains all the information of a class ;  Ccompose_binary_t;  Ccompose_unary_t;  ►CConfigSingleton class for global configuration settings used by TMVA ;  CIONames;  CVariablePlotting;  CConfigurable;  CConvergenceTestCheck for convergence ;  CCostComplexityPruneToolA class to prune a decision tree using the Cost Complexity method ;  CCrossEntropyImplementation of the CrossEntropy as separation criterion ;  CCrossValidationClass to perform cross validation, splitting the dataloader into folds ;  CCrossValidationFoldResult;  CCrossValidationResultClass to save the results of cross validation, the metric for the classification ins ROC and you can ROC curves ROC integrals, ROC average and ROC standard deviation ;  CCvSplit;  CCvSplitKFolds;  CCvSplitKFoldsExpr;  CDataInputHandlerClass that contains all the data information ;  CDataLoader;  CDataSetClass that contains all the data information ;  ►CDataSetFactoryClass that contains all the data information ;  CEventStats;  CDataSetInfoClass that contains all the data information ;  CDataSetManagerClass that contains all the data information ;  CDecisionTreeImpl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v616/namespaces.html:87277,configurat,configuration,87277,doc/v616/namespaces.html,https://root.cern,https://root.cern/doc/v616/namespaces.html,1,['configurat'],['configuration']
Deployability," Class_Version(). static constexpr Version_t RooMultiVarGaussian::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 112 of file RooMultiVarGaussian.h. ◆ clone(). TObject * RooMultiVarGaussian::clone ; (; const char * ; newname); const. inlineoverridevirtual . Implements RooAbsArg.; Definition at line 42 of file RooMultiVarGaussian.h. ◆ covarianceMatrix(). const TMatrixDSym & RooMultiVarGaussian::covarianceMatrix ; (; ); const. inline . Definition at line 51 of file RooMultiVarGaussian.h. ◆ DeclFileName(). static const char * RooMultiVarGaussian::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 112 of file RooMultiVarGaussian.h. ◆ decodeCode(). void RooMultiVarGaussian::decodeCode ; (; Int_t ; code, . std::vector< int > & ; map1, . std::vector< int > & ; map2 . ); const. protected . Decode analytical integration/generation code into index map of integrated/generated (map2) and non-integrated/generated observables (map1) ; Definition at line 600 of file RooMultiVarGaussian.cxx. ◆ evaluate(). double RooMultiVarGaussian::evaluate ; (; ); const. overrideprotectedvirtual . Do not persist. ; Represent observables as vector. ; Implements RooAbsReal.; Definition at line 175 of file RooMultiVarGaussian.cxx. ◆ genData(). RooMultiVarGaussian::GenData & RooMultiVarGaussian::genData ; (; Int_t ; code); const. protected . WVE – CHECK THAT GENDATA IS VALID GIVEN CURRENT VALUES OF _MU. ; Definition at line 501 of file RooMultiVarGaussian.cxx. ◆ generateEvent(). void RooMultiVarGaussian::generateEvent ; (; Int_t ; code). overridevirtual . Retrieve generator config from cache. ; Reimplemented from RooAbsPdf.; Definition at line 434 of file RooMultiVarGaussian.cxx. ◆ getAnalyticalIntegral(). Int_t RooMultiVarGaussian::getAnalyticalIntegral ; (; RooArgSet & ; allVars, . RooArgSet & ; analVars, . const char * ; rangeName = nullptr . ); const. overridevirtual . Interface function",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooMultiVarGaussian.html:78206,integrat,integration,78206,doc/master/classRooMultiVarGaussian.html,https://root.cern,https://root.cern/doc/master/classRooMultiVarGaussian.html,3,['integrat'],"['integrated', 'integration']"
Deployability," DoDialogCancel ();  Process dialog Cancel button pressed. ;  ; void DoDialogOK ();  Process dialog OK button pressed. ;  ; Bool_t GetDropStatus () const;  ; Int_t GetEndDragX () const override;  Return the current X coordinate of the dragged frame. ;  ; Int_t GetEndDragY () const override;  Returns the current Y coordinate of the dragged frame. ;  ; UInt_t GetGridStep ();  Return the grid step. ;  ; TGFrame * GetSelected () const;  Return the current grabbed/selected frame. ;  ; Int_t GetStrartDragX () const override;  Return the X coordinate where drag started. ;  ; Int_t GetStrartDragY () const override;  Return the Y coordinate where drag started. ;  ; TGFrame * GetTarget () const;  ; void HandleAction (Int_t act);  Main handler of actions. ;  ; Bool_t HandleKey (Event_t *) override;  Handle key event. ;  ; Bool_t HandleTimerEvent (Event_t *ev, TTimer *t) override;  Handle timer events or events coming from the recorder. ;  ; void HandleUpdateSelected (TGFrame *);  When selected frame was changed by guibuilder editor -> update its appearance. ;  ; Bool_t IsStopped () const;  ; void SelectFrame (TGFrame *frame, Bool_t add=kFALSE);  Grab/Select frame. ;  ; void SetBuilder (TRootGuiBuilder *b);  ; void SetEditable (Bool_t on=kTRUE) override;  Grab server. ;  ; void SetGridStep (UInt_t step);  Set the grid step. ;  ; void Snap2Grid ();  Draw grid on editable frame and restore background on previously edited one. ;  ; void TimerEvent (Event_t *ev);  ;  Public Member Functions inherited from TVirtualDragManager;  TVirtualDragManager ();  Constructor. ;  ; virtual ~TVirtualDragManager ();  ; EDragType GetEDragType () const;  ; TGFrame * GetFrameUnder () const;  ; TGFrame * GetPasteFrame () const;  ; TGFrame * GetSource () const;  ; TGFrame * GetTarget () const;  ; virtual TClass * IsA () const;  ; Bool_t IsDragging () const;  ; Bool_t IsDropping () const;  ; Bool_t IsMoveWaiting () const;  ; Bool_t IsPasting () const;  ; virtual void SetPasteFrame (TGFrame *f);  ; virt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGuiBldDragManager.html:3323,update,update,3323,doc/master/classTGuiBldDragManager.html,https://root.cern,https://root.cern/doc/master/classTGuiBldDragManager.html,1,['update'],['update']
Deployability," Editor for TEveLine class. More...;  ; class  TEveLineGL;  GL-renderer for TEveLine class. More...;  ; class  TEveLineProjected;  Projected copy of a TEveLine. More...;  ; class  TEveElement::TEveListTreeInfo;  Structure holding information about TGListTree and TGListTreeItem that represents given TEveElement. More...;  ; class  TEveListTreeItem;  Special list-tree-item for Eve. More...;  ; class  TEveMacro;  Sub-class of TMacro, overriding Exec to unload the previous version and cleanup after the execution. More...;  ; class  TEveMagField;  Abstract base-class for interfacing to magnetic field needed by the TEveTrackPropagator. More...;  ; class  TEveMagFieldConst;  Implements constant magnetic field, given by a vector fB. More...;  ; class  TEveMagFieldDuo;  Implements constant magnetic filed that switches on given axial radius fR2 from vector fBIn to fBOut. More...;  ; class  TEveManager;  Central application manager for Eve. More...;  ; class  TEvePad;  This was intended as a TPad wrapper to allow smart updates of groups of pads. More...;  ; class  TEvePadHolder;  Exception safe wrapper for setting gPad. More...;  ; class  TEveParamList;  Collection of named parameters. More...;  ; class  TEveParamListEditor;  GUI editor for TEveParamList. More...;  ; class  TEvePathMarkT< TT >;  Special-point on track: More...;  ; class  TEvePlot3D;  Description of TEvePlot3D. More...;  ; class  TEvePlot3DGL;  OpenGL renderer class for TEvePlot3D. More...;  ; class  TEvePointSelector;  TEvePointSelector is a sub-class of TSelectorDraw for direct extraction of point-like data from a Tree. More...;  ; class  TEvePointSelectorConsumer;  TEvePointSelectorConsumer is a virtual base for classes that can be filled from TTree data via the TEvePointSelector class. More...;  ; class  TEvePointSet;  TEvePointSet is a render-element holding a collection of 3D points with optional per-point TRef and an arbitrary number of integer ids (to be used for signal, volume-id, track-id, etc). More..",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__TEve.html:10394,update,updates,10394,doc/master/group__TEve.html,https://root.cern,https://root.cern/doc/master/group__TEve.html,1,['update'],['updates']
Deployability," HandleTooltip(). void TEveViewerList::HandleTooltip ; (; ). protected . Show / hide tooltip for various MouseOver events. ; Must be called from slots where sender is TGLEventHandler. ; Definition at line 508 of file TEveViewer.cxx. ◆ IsA(). TClass * TEveViewerList::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TEveElementList.; Definition at line 132 of file TEveViewer.h. ◆ OnClicked(). void TEveViewerList::OnClicked ; (; TObject * ; obj, . UInt_t ; button, . UInt_t ; state . ). Slot for global TGLViewer::Clicked(). ; The obj is dyn-casted to the TEveElement and global selection is updated accordingly.; If TEveElement::IsPickable() returns false, the element is not selected. ; Definition at line 605 of file TEveViewer.cxx. ◆ OnMouseOver(). void TEveViewerList::OnMouseOver ; (; TObject * ; obj, . UInt_t ; state . ). Slot for global TGLViewer::MouseOver() signal. ; The attempt is made to determine the TEveElement being represented by the physical shape and global highlight is updated accordingly.; If TEveElement::IsPickable() returns false, the element is not highlighted.; Highlight is always in single-selection mode. ; Definition at line 539 of file TEveViewer.cxx. ◆ OnReClicked(). void TEveViewerList::OnReClicked ; (; TObject * ; obj, . UInt_t ; button, . UInt_t ; state . ). Slot for global TGLViewer::ReClicked(). ; The obj is dyn-casted to the TEveElement and global selection is updated accordingly.; If TEveElement::IsPickable() returns false, the element is not selected. ; Definition at line 622 of file TEveViewer.cxx. ◆ OnReMouseOver(). void TEveViewerList::OnReMouseOver ; (; TObject * ; obj, . UInt_t ; state . ). Slot for global TGLViewer::ReMouseOver(). ; The obj is dyn-casted to the TEveElement and global selection is updated accordingly.; If TEveElement::IsPickable() returns false, the element is not selected. ; Definition at line 561 of file TEveViewer.cxx. ◆ OnUnClicked(). void TEveViewerList::OnUnC",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveViewerList.html:37957,update,updated,37957,doc/master/classTEveViewerList.html,https://root.cern,https://root.cern/doc/master/classTEveViewerList.html,1,['update'],['updated']
Deployability," Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  ;  Static Public Member Functions inherited from TArrayC; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TArray; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TArray * ReadArray (TBuffer &b, const TClass *clReq);  Read TArray object from buffer. ;  ; static void WriteArray (TBuffer &b, const TArray *a);  Write TArray object to buffer. ;  . Protected Member Functions; Double_t RetrieveBinContent (Int_t bin) const override;  Raw retrieval of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ;  ; void UpdateBinContent (Int_t bin, Double_t content) override;  Raw update of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ;  ;  Protected Member Functions inherited from TH1;  TH1 ();  Histogram default constructor. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins);  Constructor for variable bin size histograms using an input array of type double. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, const Float_t *xbins);  Constructor for variable bin size histograms using an input array of type float. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup);  Constructor for fix bin size histograms. ;  ; virtual Int_t AutoP2FindLimits (Double_t min, Double_t max);  Buffer-based estimate of the histogram range using the power of 2 algorithm. ;  ; Int_t AxisChoice (Option_t *axis) const;  Choose an axis according to ""axis"". ;  ; virtual Int_t BufferFill (Double_t x, Double_t w);  accumulate arguments in buffer. ;  ; virtual void DoFillN (Int_t n",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1C.html:42564,update,update,42564,doc/master/classTH1C.html,https://root.cern,https://root.cern/doc/master/classTH1C.html,1,['update'],['update']
Deployability," Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  ;  Static Public Member Functions inherited from TArrayC; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TArray; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TArray * ReadArray (TBuffer &b, const TClass *clReq);  Read TArray object from buffer. ;  ; static void WriteArray (TBuffer &b, const TArray *a);  Write TArray object to buffer. ;  . Protected Member Functions; Double_t RetrieveBinContent (Int_t bin) const override;  Raw retrieval of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ;  ; void UpdateBinContent (Int_t bin, Double_t content) override;  Raw update of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ;  ;  Protected Member Functions inherited from TH2;  TH2 ();  2-D histogram default constructor. ;  ;  TH2 (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins, Int_t nbinsy, const Double_t *ybins);  Constructor for Double_t variable bin size 2-D histograms. ;  ;  TH2 (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins, Int_t nbinsy, Double_t ylow, Double_t yup);  Constructor for variable bin size (along X axis) 2-D histograms using an input array of type double. ;  ;  TH2 (const char *name, const char *title, Int_t nbinsx, const Float_t *xbins, Int_t nbinsy, const Float_t *ybins);  Constructor for variable bin size (along X and Y axis) 2-D histograms using input arrays of type float. ;  ;  TH2 (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup, Int_t nbinsy, const Double_t *ybins);  Constructor for Double_t variable bin size (al",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH2C.html:48558,update,update,48558,doc/master/classTH2C.html,https://root.cern,https://root.cern/doc/master/classTH2C.html,1,['update'],['update']
Deployability," Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  ;  Static Public Member Functions inherited from TArrayD; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TArray; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TArray * ReadArray (TBuffer &b, const TClass *clReq);  Read TArray object from buffer. ;  ; static void WriteArray (TBuffer &b, const TArray *a);  Write TArray object to buffer. ;  . Protected Member Functions; Double_t RetrieveBinContent (Int_t bin) const override;  Raw retrieval of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ;  ; void UpdateBinContent (Int_t bin, Double_t content) override;  Raw update of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ;  ;  Protected Member Functions inherited from TH1;  TH1 ();  Histogram default constructor. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins);  Constructor for variable bin size histograms using an input array of type double. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, const Float_t *xbins);  Constructor for variable bin size histograms using an input array of type float. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup);  Constructor for fix bin size histograms. ;  ; virtual Int_t AutoP2FindLimits (Double_t min, Double_t max);  Buffer-based estimate of the histogram range using the power of 2 algorithm. ;  ; Int_t AxisChoice (Option_t *axis) const;  Choose an axis according to ""axis"". ;  ; virtual Int_t BufferFill (Double_t x, Double_t w);  accumulate arguments in buffer. ;  ; virtual void DoFillN (Int_t n",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1D.html:42804,update,update,42804,doc/master/classTH1D.html,https://root.cern,https://root.cern/doc/master/classTH1D.html,1,['update'],['update']
Deployability," Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  ;  Static Public Member Functions inherited from TArrayD; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TArray; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TArray * ReadArray (TBuffer &b, const TClass *clReq);  Read TArray object from buffer. ;  ; static void WriteArray (TBuffer &b, const TArray *a);  Write TArray object to buffer. ;  . Protected Member Functions; Double_t RetrieveBinContent (Int_t bin) const override;  Raw retrieval of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ;  ; void UpdateBinContent (Int_t bin, Double_t content) override;  Raw update of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ;  ;  Protected Member Functions inherited from TH2;  TH2 ();  2-D histogram default constructor. ;  ;  TH2 (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins, Int_t nbinsy, const Double_t *ybins);  Constructor for Double_t variable bin size 2-D histograms. ;  ;  TH2 (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins, Int_t nbinsy, Double_t ylow, Double_t yup);  Constructor for variable bin size (along X axis) 2-D histograms using an input array of type double. ;  ;  TH2 (const char *name, const char *title, Int_t nbinsx, const Float_t *xbins, Int_t nbinsy, const Float_t *ybins);  Constructor for variable bin size (along X and Y axis) 2-D histograms using input arrays of type float. ;  ;  TH2 (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup, Int_t nbinsy, const Double_t *ybins);  Constructor for Double_t variable bin size (al",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH2D.html:48834,update,update,48834,doc/master/classTH2D.html,https://root.cern,https://root.cern/doc/master/classTH2D.html,1,['update'],['update']
Deployability," Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  ;  Static Public Member Functions inherited from TArrayF; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TArray; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TArray * ReadArray (TBuffer &b, const TClass *clReq);  Read TArray object from buffer. ;  ; static void WriteArray (TBuffer &b, const TArray *a);  Write TArray object to buffer. ;  . Protected Member Functions; Double_t RetrieveBinContent (Int_t bin) const override;  Raw retrieval of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ;  ; void UpdateBinContent (Int_t bin, Double_t content) override;  Raw update of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ;  ;  Protected Member Functions inherited from TH1;  TH1 ();  Histogram default constructor. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins);  Constructor for variable bin size histograms using an input array of type double. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, const Float_t *xbins);  Constructor for variable bin size histograms using an input array of type float. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup);  Constructor for fix bin size histograms. ;  ; virtual Int_t AutoP2FindLimits (Double_t min, Double_t max);  Buffer-based estimate of the histogram range using the power of 2 algorithm. ;  ; Int_t AxisChoice (Option_t *axis) const;  Choose an axis according to ""axis"". ;  ; virtual Int_t BufferFill (Double_t x, Double_t w);  accumulate arguments in buffer. ;  ; virtual void DoFillN (Int_t n",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1F.html:42666,update,update,42666,doc/master/classTH1F.html,https://root.cern,https://root.cern/doc/master/classTH1F.html,1,['update'],['update']
Deployability," Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  ;  Static Public Member Functions inherited from TArrayF; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TArray; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TArray * ReadArray (TBuffer &b, const TClass *clReq);  Read TArray object from buffer. ;  ; static void WriteArray (TBuffer &b, const TArray *a);  Write TArray object to buffer. ;  . Protected Member Functions; Double_t RetrieveBinContent (Int_t bin) const override;  Raw retrieval of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ;  ; void UpdateBinContent (Int_t bin, Double_t content) override;  Raw update of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ;  ;  Protected Member Functions inherited from TH2;  TH2 ();  2-D histogram default constructor. ;  ;  TH2 (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins, Int_t nbinsy, const Double_t *ybins);  Constructor for Double_t variable bin size 2-D histograms. ;  ;  TH2 (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins, Int_t nbinsy, Double_t ylow, Double_t yup);  Constructor for variable bin size (along X axis) 2-D histograms using an input array of type double. ;  ;  TH2 (const char *name, const char *title, Int_t nbinsx, const Float_t *xbins, Int_t nbinsy, const Float_t *ybins);  Constructor for variable bin size (along X and Y axis) 2-D histograms using input arrays of type float. ;  ;  TH2 (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup, Int_t nbinsy, const Double_t *ybins);  Constructor for Double_t variable bin size (al",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH2F.html:48648,update,update,48648,doc/master/classTH2F.html,https://root.cern,https://root.cern/doc/master/classTH2F.html,1,['update'],['update']
Deployability," Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  ;  Static Public Member Functions inherited from TArrayI; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TArray; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TArray * ReadArray (TBuffer &b, const TClass *clReq);  Read TArray object from buffer. ;  ; static void WriteArray (TBuffer &b, const TArray *a);  Write TArray object to buffer. ;  . Protected Member Functions; Double_t RetrieveBinContent (Int_t bin) const override;  Raw retrieval of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ;  ; void UpdateBinContent (Int_t bin, Double_t content) override;  Raw update of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ;  ;  Protected Member Functions inherited from TH1;  TH1 ();  Histogram default constructor. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins);  Constructor for variable bin size histograms using an input array of type double. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, const Float_t *xbins);  Constructor for variable bin size histograms using an input array of type float. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup);  Constructor for fix bin size histograms. ;  ; virtual Int_t AutoP2FindLimits (Double_t min, Double_t max);  Buffer-based estimate of the histogram range using the power of 2 algorithm. ;  ; Int_t AxisChoice (Option_t *axis) const;  Choose an axis according to ""axis"". ;  ; virtual Int_t BufferFill (Double_t x, Double_t w);  accumulate arguments in buffer. ;  ; virtual void DoFillN (Int_t n",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1I.html:42512,update,update,42512,doc/master/classTH1I.html,https://root.cern,https://root.cern/doc/master/classTH1I.html,1,['update'],['update']
Deployability," Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  ;  Static Public Member Functions inherited from TArrayI; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TArray; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TArray * ReadArray (TBuffer &b, const TClass *clReq);  Read TArray object from buffer. ;  ; static void WriteArray (TBuffer &b, const TArray *a);  Write TArray object to buffer. ;  . Protected Member Functions; Double_t RetrieveBinContent (Int_t bin) const override;  Raw retrieval of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ;  ; void UpdateBinContent (Int_t bin, Double_t content) override;  Raw update of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ;  ;  Protected Member Functions inherited from TH2;  TH2 ();  2-D histogram default constructor. ;  ;  TH2 (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins, Int_t nbinsy, const Double_t *ybins);  Constructor for Double_t variable bin size 2-D histograms. ;  ;  TH2 (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins, Int_t nbinsy, Double_t ylow, Double_t yup);  Constructor for variable bin size (along X axis) 2-D histograms using an input array of type double. ;  ;  TH2 (const char *name, const char *title, Int_t nbinsx, const Float_t *xbins, Int_t nbinsy, const Float_t *ybins);  Constructor for variable bin size (along X and Y axis) 2-D histograms using input arrays of type float. ;  ;  TH2 (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup, Int_t nbinsy, const Double_t *ybins);  Constructor for Double_t variable bin size (al",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH2I.html:48565,update,update,48565,doc/master/classTH2I.html,https://root.cern,https://root.cern/doc/master/classTH2I.html,1,['update'],['update']
Deployability," Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  ;  Static Public Member Functions inherited from TArrayS; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TArray; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TArray * ReadArray (TBuffer &b, const TClass *clReq);  Read TArray object from buffer. ;  ; static void WriteArray (TBuffer &b, const TArray *a);  Write TArray object to buffer. ;  . Protected Member Functions; Double_t RetrieveBinContent (Int_t bin) const override;  Raw retrieval of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ;  ; void UpdateBinContent (Int_t bin, Double_t content) override;  Raw update of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ;  ;  Protected Member Functions inherited from TH1;  TH1 ();  Histogram default constructor. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins);  Constructor for variable bin size histograms using an input array of type double. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, const Float_t *xbins);  Constructor for variable bin size histograms using an input array of type float. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup);  Constructor for fix bin size histograms. ;  ; virtual Int_t AutoP2FindLimits (Double_t min, Double_t max);  Buffer-based estimate of the histogram range using the power of 2 algorithm. ;  ; Int_t AxisChoice (Option_t *axis) const;  Choose an axis according to ""axis"". ;  ; virtual Int_t BufferFill (Double_t x, Double_t w);  accumulate arguments in buffer. ;  ; virtual void DoFillN (Int_t n",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1S.html:42529,update,update,42529,doc/master/classTH1S.html,https://root.cern,https://root.cern/doc/master/classTH1S.html,1,['update'],['update']
Deployability," Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  ;  Static Public Member Functions inherited from TArrayS; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TArray; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TArray * ReadArray (TBuffer &b, const TClass *clReq);  Read TArray object from buffer. ;  ; static void WriteArray (TBuffer &b, const TArray *a);  Write TArray object to buffer. ;  . Protected Member Functions; Double_t RetrieveBinContent (Int_t bin) const override;  Raw retrieval of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ;  ; void UpdateBinContent (Int_t bin, Double_t content) override;  Raw update of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ;  ;  Protected Member Functions inherited from TH2;  TH2 ();  2-D histogram default constructor. ;  ;  TH2 (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins, Int_t nbinsy, const Double_t *ybins);  Constructor for Double_t variable bin size 2-D histograms. ;  ;  TH2 (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins, Int_t nbinsy, Double_t ylow, Double_t yup);  Constructor for variable bin size (along X axis) 2-D histograms using an input array of type double. ;  ;  TH2 (const char *name, const char *title, Int_t nbinsx, const Float_t *xbins, Int_t nbinsy, const Float_t *ybins);  Constructor for variable bin size (along X and Y axis) 2-D histograms using input arrays of type float. ;  ;  TH2 (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup, Int_t nbinsy, const Double_t *ybins);  Constructor for Double_t variable bin size (al",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH2S.html:48625,update,update,48625,doc/master/classTH2S.html,https://root.cern,https://root.cern/doc/master/classTH2S.html,1,['update'],['update']
Deployability," MakeZombie ();  . Static Protected Member Functions; static const decltype(_stateNames) ::value_type & invalidCategory ();  A category state to signify an invalid category. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  . Protected Attributes; value_type _currentIndex {std::numeric_limits<int>::min()};  Current category state. ;  ; std::vector< std::string > _insertionOrder;  Keeps track in which order state numbers have been inserted. Make sure this is updated in recomputeShape(). ;  ; std::map< value_type, std::unique_ptr< RooCatType, std::function< void(RooCatType *)> > > _legacyStates;  ! Map holding pointers to RooCatType instances. Only for legacy interface. Don't use if possible. ;  ; std::map< std::string, value_type > _stateNames;  Map state names to index numbers. Make sure state names are updated in recomputeShape(). ;  ;  Protected Attributes inherited from RooAbsArg; std::set< std::string > _boolAttrib;  ; std::set< std::string > _boolAttribTransient;  ; std::vector< RooAbsCache * > _cacheList;  ; RefCountList_t _clientList;  ; RefCountList_t _clientListShape;  ; RefCountList_t _clientListValue;  ; std::size_t _dataToken = std::numeric_limits<std::size_t>::max();  In which workspace do I live, if any. ;  ; bool _deleteWatch = false;  ; RooExpensiveObjectCache * _eocache {nullptr};  Prohibit server redirects – Debugging tool. ;  ; bool _fast = false;  ; bool _isConstant = false;  De-duplicated name pointer. This will be equal for all objects with the same name. ;  ; bool _localNoInhibitDirty = false;  Cached isConstant status. ;  ; RooWorkspace * _myws = nullptr;  Prevent 'AlwaysDirty' mode for this node. ;  ; const TNamed * _namePtr = nullptr;  Pointer to global cache manager for any expensive components created by this object. ;  ; OperMode _operMode = Auto;  ; RooArg",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsCategory.html:41600,update,updated,41600,doc/master/classRooAbsCategory.html,https://root.cern,https://root.cern/doc/master/classRooAbsCategory.html,1,['update'],['updated']
Deployability, PdfProposal;  PdfProposal is a concrete implementation of the ProposalFunction interface. More...;  ; class  PointSetInterval;  PointSetInterval is a concrete implementation of the ConfInterval interface. More...;  ; class  PosteriorCdfFunction;  ; class  PosteriorFunction;  ; class  PosteriorFunctionFromToyMC;  Posterior function obtaining sampling toy MC for the nuisance according to their pdf. More...;  ; class  ProfileInspector;  Utility class to plot conditional MLE of nuisance parameters vs. More...;  ; class  ProfileLikelihoodCalculator;  The ProfileLikelihoodCalculator is a concrete implementation of CombinedCalculator (the interface class for tools which can produce both a RooStats HypoTestResult and ConfInterval). More...;  ; class  ProfileLikelihoodTestStat;  ProfileLikelihoodTestStat is an implementation of the TestStatistic interface that calculates the profile likelihood ratio at a particular parameter point given a dataset. More...;  ; class  ProofConfig;  Holds configuration options for proof and proof-lite. More...;  ; class  ProposalFunction;  ProposalFunction is an interface for all proposal functions that would be used with a Markov Chain Monte Carlo algorithm. More...;  ; class  ProposalHelper;  ; class  RatioOfProfiledLikelihoodsTestStat;  TestStatistic that returns the ratio of profiled likelihoods. More...;  ; struct  RooStatsConfig;  ; class  SamplingDistPlot;  This class provides simple and straightforward utilities to plot SamplingDistribution objects. More...;  ; class  SamplingDistribution;  This class simply holds a sampling distribution of some test statistic. More...;  ; class  SamplingSummary;  ; class  SamplingSummaryLookup;  ; class  SequentialProposal;  Class implementing a proposal function that samples the parameter space by moving only in one coordinate (chosen randomly) at each step. More...;  ; class  SimpleInterval;  SimpleInterval is a concrete implementation of the ConfInterval interface. More...;  ; class  SimpleLikelihoo,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceRooStats.html:6614,configurat,configuration,6614,doc/master/namespaceRooStats.html,https://root.cern,https://root.cern/doc/master/namespaceRooStats.html,1,['configurat'],['configuration']
Deployability," Register an RooSetProxy in the proxy list. ;  ; void setProxyNormSet (const RooArgSet *nset);  Forward a change in the cached normalization argset to all the registered proxies. ;  ; void setShapeDirty (const RooAbsArg *source);  Notify that a shape-like property (e.g. binning) has changed. ;  ; void setValueDirty (const RooAbsArg *source);  Force element to re-evaluate itself when a value is requested. ;  ; void unRegisterProxy (RooArgProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooListProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooSetProxy &proxy);  Remove proxy from proxy list. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; RooBlindTools _blindEngine;  ; RooRealProxy _value;  ;  Protected Attributes inherited from RooAbsHiddenReal; RooCategoryProxy _state;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; Int_t _plotBins = 100;  Number of plot bins. ;  ; double _plotMax = 0.0;  Maximum of plot range. ;  ; double _plotMin = 0.0;  Minimum of plot range. ;  ; bool _selectComp = true;  A buffer for reading values from trees. ;  ; std::unique_ptr< RooNumIntConfig > _specIntegratorConfig;  ; TreeReadBuffer * _treeReadBuffer = nullptr;  ; TString _unit;  Unit for objects value. ;  ; double _value = 0.0;  Cache for current value of object. ;  ;  Protected Attributes inherited from RooAbsArg; std::set< std::string > _boolAttrib;  ; std::set< std::string > _boolAttribTransient;  ; std::vector< RooAbsCache * > _cacheList;  ; RefCountList_t _clientList;  ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooUnblindOffset.html:56989,integrat,integration,56989,doc/master/classRooUnblindOffset.html,https://root.cern,https://root.cern/doc/master/classRooUnblindOffset.html,3,['integrat'],['integration']
Deployability," Return a reference to the current default stream to use in Print(). ;  ; static void nameFieldLength (Int_t newLen);  Set length of field reserved from printing name of RooAbsArgs in multi-line collection printing to given amount. ;  . Protected Attributes; RooLinkedList _configSets;  List of configuration sets for individual integration methods. ;  ; RooCategory _method1D;  Selects integration method for 1D p.d.f.s. ;  ; RooCategory _method1DCat;  Selects integration method for 1D p.d.f.s with categories. ;  ; RooCategory _method1DCond;  Selects integration method for 1D conditional p.d.f.s. ;  ; RooCategory _method1DCondCat;  Selects integration method for 1D conditional p.d.f.s with categories. ;  ; RooCategory _method2D;  Selects integration method for 2D p.d.f.s. ;  ; RooCategory _method2DCat;  Selects integration method for 2D p.d.f.s with categories. ;  ; RooCategory _method2DCond;  Selects integration method for 2D conditional p.d.f.s. ;  ; RooCategory _method2DCondCat;  Selects integration method for 2D conditional p.d.f.s with categories. ;  ; RooCategory _methodND;  Selects integration method for ND p.d.f.s. ;  ; RooCategory _methodNDCat;  Selects integration method for ND p.d.f.s with categories. ;  ; RooCategory _methodNDCond;  Selects integration method for ND conditional p.d.f.s. ;  ; RooCategory _methodNDCondCat;  Selects integration method for ND conditional p.d.f.s with categories. ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooNumGenConfig.html:13015,integrat,integration,13015,doc/master/classRooNumGenConfig.html,https://root.cern,https://root.cern/doc/master/classRooNumGenConfig.html,1,['integrat'],['integration']
Deployability," Rewind (const State &earlierState);  Rewind to an earlier mutex state, returning the delta. ;  ; TVirtualRWMutex::Hint_t * WriteLock ();  Acquire the lock in write mode. ;  ; void WriteUnLock (TVirtualRWMutex::Hint_t *);  Release the lock in write mode. ;  . Private Member Functions; void AssertReadCountLocIsFromCurrentThread (const size_t *presumedLocalReadersCount);  Assert that presumedLocalReadersCount really matches the local read count. ;  . Private Attributes; std::condition_variable_any fCond;  ! RWlock internal condition variable ;  ; MutexT fMutex;  ! RWlock internal mutex ;  ; std::atomic< int > fReaderReservation;  ! A reader wants access ;  ; std::atomic< int > fReaders;  ! Number of readers ;  ; RecurseCountsT fRecurseCounts;  ! Trackers for re-entry in the lock by the same thread. ;  ; std::atomic< bool > fWriter;  ! Is there a writer? ;  ; std::atomic< int > fWriterReservation;  ! A writer wants access ;  . #include </home/sftnight/build/workspace/root-makedoc-v632/rootspi/rdoc/src/v6-32-00-patches/core/thread/src/TReentrantRWLock.hxx>; Member Typedef Documentation. ◆ State. template<typename MutexT = ROOT::TSpinMutex, typename RecurseCountsT = Internal::RecurseCounts> . using ROOT::TReentrantRWLock< MutexT, RecurseCountsT >::State = TVirtualRWMutex::State. Definition at line 299 of file TReentrantRWLock.hxx. ◆ StateDelta. template<typename MutexT = ROOT::TSpinMutex, typename RecurseCountsT = Internal::RecurseCounts> . using ROOT::TReentrantRWLock< MutexT, RecurseCountsT >::StateDelta = TVirtualRWMutex::StateDelta. Definition at line 300 of file TReentrantRWLock.hxx. Constructor & Destructor Documentation. ◆ TReentrantRWLock(). template<typename MutexT = ROOT::TSpinMutex, typename RecurseCountsT = Internal::RecurseCounts> . ROOT::TReentrantRWLock< MutexT, RecurseCountsT >::TReentrantRWLock ; (; ). inline . Regular constructor. ; Definition at line 304 of file TReentrantRWLock.hxx. Member Function Documentation. ◆ Apply(). template<typename MutexT , t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1TReentrantRWLock.html:2164,patch,patches,2164,doc/v632/classROOT_1_1TReentrantRWLock.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TReentrantRWLock.html,1,['patch'],['patches']
Deployability," Rndm() [3/3]. virtual Double_t TRandom::Rndm ; (; Int_t ; ). inlinevirtual . Reimplemented from TRandom.; Definition at line 51 of file TRandom.h. ◆ RndmArray() [1/2]. void TRandom3::RndmArray ; (; Int_t ; n, . Double_t * ; array . ). overridevirtual . Return an array of n random numbers uniformly distributed in ]0,1]. ; Reimplemented from TRandom.; Definition at line 151 of file TRandom3.cxx. ◆ RndmArray() [2/2]. void TRandom3::RndmArray ; (; Int_t ; n, . Float_t * ; array . ). overridevirtual . Return an array of n random numbers uniformly distributed in ]0,1]. ; Reimplemented from TRandom.; Definition at line 143 of file TRandom3.cxx. ◆ SetSeed(). void TRandom3::SetSeed ; (; ULong_t ; seed = 0). overridevirtual . Set the random generator sequence if seed is 0 (default value) a TUUID is generated and used to fill the first 8 integers of the seed array. ; In this case the seed is guaranteed to be unique in space and time. Use upgraded seeding procedure to fix a known problem when seeding with values with many zero in the bit pattern (like 2**28). see http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/MT2002/emt19937ar.html ; Reimplemented from TRandom.; Definition at line 206 of file TRandom3.cxx. ◆ Streamer(). void TRandom3::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TRandom3. ; Reimplemented from TRandom.; Definition at line 237 of file TRandom3.cxx. ◆ StreamerNVirtual(). void TRandom3::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 47 of file TRandom3.h. Member Data Documentation. ◆ fCount624. Int_t TRandom3::fCount624. private . Definition at line 31 of file TRandom3.h. ◆ fMt. UInt_t TRandom3::fMt[624]. private . Definition at line 30 of file TRandom3.h. Libraries for TRandom3:. [legend]; The documentation for this class was generated from the following files:; math/mathcore/inc/TRandom3.h; math/mathcore/src/TRandom3.cxx. TRandom3. ROOT master - Reference Guide Generated on Tue Nov 5 20",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRandom3.html:19313,upgrade,upgraded,19313,doc/master/classTRandom3.html,https://root.cern,https://root.cern/doc/master/classTRandom3.html,1,['upgrade'],['upgraded']
Deployability," Set address of this branch. ;  ; virtual void SetAutoDelete (bool autodel=true);  Set the automatic delete bit. ;  ; virtual void SetBasketSize (Int_t buffsize);  Set the basket size The function makes sure that the basket size is greater than fEntryOffsetlen. ;  ; virtual void SetBufferAddress (TBuffer *entryBuffer);  Set address of this branch directly from a TBuffer to avoid streaming. ;  ; void SetCompressionAlgorithm (Int_t algorithm=ROOT::RCompressionSetting::EAlgorithm::kUseGlobal);  Set compression algorithm. ;  ; void SetCompressionLevel (Int_t level=ROOT::RCompressionSetting::ELevel::kUseMin);  Set compression level. ;  ; void SetCompressionSettings (Int_t settings=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault);  Set compression settings. ;  ; virtual void SetEntries (Long64_t entries);  Set the number of entries in this branch. ;  ; virtual void SetEntryOffsetLen (Int_t len, bool updateSubBranches=false);  Update the default value for the branch's fEntryOffsetLen if and only if it was already non zero (and the new value is not zero) If updateExisting is true, also update all the existing branches. ;  ; virtual void SetFile (const char *filename);  Set file where this branch writes/reads its buffers. ;  ; virtual void SetFile (TFile *file=nullptr);  Set file where this branch writes/reads its buffers. ;  ; virtual void SetFirstEntry (Long64_t entry);  set the first entry number (case of TBranchSTL) ;  ; void SetIOFeatures (TIOFeatures &features);  ; virtual bool SetMakeClass (bool decomposeObj=true);  Set the branch in a mode where the object are decomposed (Also known as MakeClass mode). ;  ; virtual void SetObject (void *objadd);  Set object this branch is pointing to. ;  ; virtual void SetOffset (Int_t offset=0);  ; virtual void SetStatus (bool status=true);  Set branch status to Process or DoNotProcess. ;  ; virtual void SetTree (TTree *tree);  ; virtual void SetupAddresses ();  If the branch address is not set, we set all addresses startin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBranch.html:8411,update,updateSubBranches,8411,doc/master/classTBranch.html,https://root.cern,https://root.cern/doc/master/classTBranch.html,6,['update'],"['update', 'updateExisting', 'updateSubBranches']"
Deployability," SetText (TGText *text);  Adopt a new text buffer. The text will be deleted by this object. ;  ; virtual void SetVsbPosition (Long_t newPos);  Set position of vertical scrollbar. ;  ; virtual void ShowBottom ();  Show bottom of the page. ;  ; virtual void ShowTop ();  Show top of the page. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual Long_t ToObjXCoord (Long_t xCoord, Long_t line);  Convert x screen coordinate to column in specified line. ;  ; virtual Long_t ToObjYCoord (Long_t yCoord);  Convert y screen coordinate to line number. ;  ; virtual Long_t ToScrXCoord (Long_t xCoord, Long_t line);  Convert column number in specified line to screen coordinate. ;  ; virtual Long_t ToScrYCoord (Long_t yCoord);  Convert line number to screen coordinate. ;  ; virtual void Update ();  update the whole window of text view ;  ;  Public Member Functions inherited from TGView;  TGView (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, Int_t id=-1, UInt_t xMargin=0, UInt_t yMargin=0, UInt_t options=kSunkenFrame|kDoubleBorder, UInt_t sboptions=0, Pixel_t back=GetWhitePixel());  Create an editor view, containing an TGEditorFrame and (optionally) a horizontal and vertical scrollbar. ;  ;  ~TGView () override;  Delete view. ;  ; void ChangeBackground (Pixel_t) override;  Change background color of the canvas frame. ;  ; void Clear (Option_t *="""") override;  Clear view. ;  ; void DrawBorder () override;  Draw the border of the text edit widget. ;  ; TGViewFrame * GetCanvas () const;  ; TGDimension GetDefaultSize () const override;  std::cout << fWidth << ""x"" << fHeight << std::endl; ;  ; TGLongPosition GetScrollPosition () const;  ; TGLongPosition GetScrollValue () const;  ; const TGGC & GetViewWhiteGC ();  ; TGDimension GetVirtualSize () const;  ; Bool_t HandleButton (Event_t *event) override;  handle button ;  ; Bool_t HandleExpose (Event_t *event) override;  Handle expose events. ;  ; TClass * IsA () const override;  ; void Layout () override;  layout ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGTextViewostream.html:5803,update,update,5803,doc/master/classTGTextViewostream.html,https://root.cern,https://root.cern/doc/master/classTGTextViewostream.html,1,['update'],['update']
Deployability," ShowQuota(). void TDataSetManager::ShowQuota ; (; const char * ; opt). virtual . Display quota information. ; Definition at line 585 of file TDataSetManager.cxx. ◆ Streamer(). void TDataSetManager::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject.; Reimplemented in TDataSetManagerFile. ◆ StreamerNVirtual(). void TDataSetManager::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 158 of file TDataSetManager.h. ◆ ToBytes(). Long64_t TDataSetManager::ToBytes ; (; const char * ; size = 0). staticprotected . Static utility function to gt the number of bytes from a string representation in the form ""`<digit>``<sfx>`"" with <sfx> = {"""", ""k"", ""M"", ""G"", ""T"", ""P""} (case insensitive). ; Returns -1 if the format is wrong. ; Definition at line 387 of file TDataSetManager.cxx. ◆ UpdateUsedSpace(). void TDataSetManager::UpdateUsedSpace ; (; ). protectedvirtual . updates the used space maps ; Reimplemented in TDataSetManagerFile.; Definition at line 752 of file TDataSetManager.cxx. Member Data Documentation. ◆ fAvgFileSize. Long64_t TDataSetManager::fAvgFileSize. protected . Definition at line 56 of file TDataSetManager.h. ◆ fBase. TUri TDataSetManager::fBase. protected . Definition at line 50 of file TDataSetManager.h. ◆ fCommonGroup. TString TDataSetManager::fCommonGroup. protected . Definition at line 48 of file TDataSetManager.h. ◆ fCommonUser. TString TDataSetManager::fCommonUser. protected . Definition at line 47 of file TDataSetManager.h. ◆ fgCommonDataSetTag. TString TDataSetManager::fgCommonDataSetTag = ""COMMON"". staticprotected . Definition at line 65 of file TDataSetManager.h. ◆ fgDataSetSrvMaps. TList * TDataSetManager::fgDataSetSrvMaps = 0. staticprotected . Definition at line 67 of file TDataSetManager.h. ◆ fGroup. TString TDataSetManager::fGroup. protected . Definition at line 45 of file TDataSetManager.h. ◆ fGroupConfigFile. TString TDataSetManager::fGroupConfi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDataSetManager.html:38911,update,updates,38911,doc/master/classTDataSetManager.html,https://root.cern,https://root.cern/doc/master/classTDataSetManager.html,1,['update'],['updates']
Deployability," Streamer(). void RooPlot::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject.; Definition at line 1357 of file RooPlot.cxx. ◆ StreamerNVirtual(). void RooPlot::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 256 of file RooPlot.h. ◆ updateFitRangeNorm() [1/2]. void RooPlot::updateFitRangeNorm ; (; const RooPlotable * ; rp, . bool ; refreshNorm = false . ). protected . Update our plot normalization over our plot variable's fit range, which will be determined by the first suitable object added to our plot. ; Definition at line 562 of file RooPlot.cxx. ◆ updateFitRangeNorm() [2/2]. void RooPlot::updateFitRangeNorm ; (; const TH1 * ; hist). protected . Update our plot normalization over our plot variable's fit range, which will be determined by the first suitable object added to our plot. ; Definition at line 550 of file RooPlot.cxx. ◆ updateNormVars(). void RooPlot::updateNormVars ; (; const RooArgSet & ; vars). Install the given set of observables are reference normalization variables for this frame. ; These observables are e.g. later used to automatically project out observables when plotting functions on this frame. This function is only effective when called the first time on a frame ; Definition at line 351 of file RooPlot.cxx. ◆ updateYAxis(). void RooPlot::updateYAxis ; (; double ; ymin, . double ; ymax, . const char * ; label = """" . ). protected . Update our y-axis limits to accommodate an object whose spread in y is (ymin,ymax). ; Use the specified y-axis label if we don't have one assigned already. ; Definition at line 605 of file RooPlot.cxx. Member Data Documentation. ◆ _addDirStatus. bool RooPlot::_addDirStatus = true. staticprotected . static flag controlling AutoDirectoryAdd feature ; Definition at line 254 of file RooPlot.h. ◆ _defYmax. double RooPlot::_defYmax = 1.0. protected . Default maximum for Yaxis (as calculated from contents) ; Definition",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooPlot.html:55127,update,updateNormVars,55127,doc/master/classRooPlot.html,https://root.cern,https://root.cern/doc/master/classRooPlot.html,1,['update'],['updateNormVars']
Deployability," TGLViewerEditor (const TGWindow *p=nullptr, Int_t width=140, Int_t height=30, UInt_t options=kChildFrame, Pixel_t back=GetDefaultFrameBackground());  ;  ~TGLViewerEditor () override;  ; void DetachFromPad ();  ; void DoAnnotation ();  Create annotation via picking. ;  ; void DoASavImageGUIBaseName (const char *t);  Update base-name. ;  ; void DoASavImageGUIOutMode (Int_t m);  Update output mode. ;  ; void DoASavImageStart ();  Start auto-rotator image auto-save. ;  ; void DoASavImageStop ();  Stop auto-rotator image auto-save. ;  ; void DoCameraCenterExt ();  Set external camera center. ;  ; void DoCameraHome ();  CameraHome was clicked. ;  ; void DoCameraOverlay ();  Update viewer with GUI state. ;  ; void DoCaptureCenter ();  Capture camera-center via picking. ;  ; void DoClearColor (Pixel_t color);  Clear-color was changed. ;  ; void DoDrawCameraCenter ();  Draw camera center. ;  ; void DoIgnoreSizesOnUpdate ();  ResetCamerasOnUpdate was toggled. ;  ; void DoResetCamerasOnUpdate ();  ResetCamerasOnUpdate was toggled. ;  ; void DoRotatorStart ();  Start auto-rotator. ;  ; void DoRotatorStop ();  Stop auto-rotator. ;  ; void DoUpdateScene ();  UpdateScene was clicked. ;  ; TClass * IsA () const override;  ; void SetGuides ();  Configuration of guides GUI called from SetModel(). ;  ; void SetModel (TObject *obj) override;  Sets model or disables/hides viewer. ;  ; void SetRotatorMode ();  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UpdateCameraCenter ();  Update current camera with GUI state. ;  ; void UpdateMaxDrawTimes ();  Slot for fMaxSceneDrawTimeHQ and fMaxSceneDrawTimeLQ. ;  ; void UpdatePointLineStuff ();  Slot for point-sizes and line-widths. ;  ; void UpdateRotator ();  Update rotator related variables. ;  ; void UpdateStereo ();  Update stereo related variables. ;  ; void UpdateViewerAxes (Int_t id);  Update viewer with GUI state. ;  ; void UpdateView",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLViewerEditor.html:1484,toggle,toggled,1484,doc/master/classTGLViewerEditor.html,https://root.cern,https://root.cern/doc/master/classTGLViewerEditor.html,1,['toggle'],['toggled']
Deployability," Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from RooPrintable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static std::ostream & defaultPrintStream (std::ostream *os=nullptr);  Return a reference to the current default stream to use in Print(). ;  ; static void nameFieldLength (Int_t newLen);  Set length of field reserved from printing name of RooAbsArgs in multi-line collection printing to given amount. ;  . Protected Types; enum  IntOperMode { Hybrid; , Analytic; , PassThrough; };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . Protected Member Functions; RooArgSet const * actualFuncNormSet () const;  ; void autoSelectDirtyMode ();  Set appropriate cache operation mode for integral depending on cache operation mode of server objects. ;  ; double evaluate () const override;  Perform the integration and return the result. ;  ; bool initNumIntegrator () const;  (Re)Initialize numerical integration engine if necessary. ;  ; virtual double integrate () const;  Perform hybrid numerical/analytical integration over all real-valued dependents. ;  ; bool isValidReal (double value, bool printError=false) const override;  Check if current value is valid. ;  ; virtual double jacobianProduct () const;  Return product of jacobian terms originating from analytical integration. ;  ; const RooArgSet & parameters () const;  ; bool redirectServersHook (const RooAbsCollection &newServerList, bool mustReplaceAll, bool nameChange, bool isRecursive) override;  Intercept server redirects and reconfigure internal object accordingly. ;  ; virtual double sum () const;  Perform summation of list of category dependents to be integrated. ;  ;  Protected Member Functions inherited from RooAbsReal; void attachToTree (TTree &t, Int_t bufSize=32000) override;  Attach object to a branch of gi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooRealIntegral.html:49823,integrat,integration,49823,doc/master/classRooRealIntegral.html,https://root.cern,https://root.cern/doc/master/classRooRealIntegral.html,1,['integrat'],['integration']
Deployability, _method1DCond. RooCategory RooNumGenConfig::_method1DCond. protected . Selects integration method for 1D conditional p.d.f.s. ; Definition at line 60 of file RooNumGenConfig.h. ◆ _method1DCondCat. RooCategory RooNumGenConfig::_method1DCondCat. protected . Selects integration method for 1D conditional p.d.f.s with categories. ; Definition at line 61 of file RooNumGenConfig.h. ◆ _method2D. RooCategory RooNumGenConfig::_method2D. protected . Selects integration method for 2D p.d.f.s. ; Definition at line 63 of file RooNumGenConfig.h. ◆ _method2DCat. RooCategory RooNumGenConfig::_method2DCat. protected . Selects integration method for 2D p.d.f.s with categories. ; Definition at line 64 of file RooNumGenConfig.h. ◆ _method2DCond. RooCategory RooNumGenConfig::_method2DCond. protected . Selects integration method for 2D conditional p.d.f.s. ; Definition at line 65 of file RooNumGenConfig.h. ◆ _method2DCondCat. RooCategory RooNumGenConfig::_method2DCondCat. protected . Selects integration method for 2D conditional p.d.f.s with categories. ; Definition at line 66 of file RooNumGenConfig.h. ◆ _methodND. RooCategory RooNumGenConfig::_methodND. protected . Selects integration method for ND p.d.f.s. ; Definition at line 68 of file RooNumGenConfig.h. ◆ _methodNDCat. RooCategory RooNumGenConfig::_methodNDCat. protected . Selects integration method for ND p.d.f.s with categories. ; Definition at line 69 of file RooNumGenConfig.h. ◆ _methodNDCond. RooCategory RooNumGenConfig::_methodNDCond. protected . Selects integration method for ND conditional p.d.f.s. ; Definition at line 70 of file RooNumGenConfig.h. ◆ _methodNDCondCat. RooCategory RooNumGenConfig::_methodNDCondCat. protected . Selects integration method for ND conditional p.d.f.s with categories. ; Definition at line 71 of file RooNumGenConfig.h. Libraries for RooNumGenConfig:. [legend]; The documentation for this class was generated from the following files:; roofit/roofitcore/inc/RooNumGenConfig.h; roofit/roofitcore/src/Roo,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooNumGenConfig.html:21189,integrat,integration,21189,doc/master/classRooNumGenConfig.html,https://root.cern,https://root.cern/doc/master/classRooNumGenConfig.html,1,['integrat'],['integration']
Deployability," createProjection (const RooArgSet &iset) override;  Special version of RooAbsReal::createProjection that deals with projections of projections. ;  ; double expectedEvents (const RooArgSet *nset) const override;  Return expected number of events to be used in calculation of extended likelihood. ;  ; ExtendMode extendMode () const override;  Returns ability of PDF to provide extended likelihood terms. ;  ; bool forceAnalyticalInt (const RooAbsArg &dep) const override;  Force RooRealIntegral to relegate integration of all observables to internal logic. ;  ; Int_t getAnalyticalIntegralWN (RooArgSet &allVars, RooArgSet &analVars, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Mark all requested variables as internally integrated. ;  ; void initGenerator (Int_t) override;  Interface for one-time initialization to setup the generator for the specified code. ;  ; TClass * IsA () const override;  ; void printMetaArgs (std::ostream &os) const override;  Customized printing of arguments of a RooRealIntegral to more intuitively reflect the contents of the integration operation. ;  ; bool selfNormalized () const override;  Shows if a PDF is self-normalized, which means that no attempt is made to add a normalization term. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsPdf;  RooAbsPdf ();  Default constructor. ;  ;  RooAbsPdf (const char *name, const char *title, double minVal, double maxVal);  Constructor with name, title, and plot range. ;  ;  RooAbsPdf (const char *name, const char *title=nullptr);  Constructor with name and title only. ;  ;  ~RooAbsPdf () override;  Destructor. ;  ; virtual RooAbsGenContext * autoGenContext (const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool verbose=false, bool autoBinned=true, const char *binnedTag="""") const;  ; virtual Roo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooProjectedPdf.html:2991,integrat,integration,2991,doc/master/classRooProjectedPdf.html,https://root.cern,https://root.cern/doc/master/classRooProjectedPdf.html,1,['integrat'],['integration']
Deployability," kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TClassMenuItem ();  Default TClassMenuItem ctor. ;  ;  TClassMenuItem (Int_t type, TClass *parent, const char *title="""", const char *functionname="""", TObject *obj=nullptr, const char *args="""", Int_t selfobjposition=-1, Bool_t self=kFALSE);  TClassMenuItem ctor. ;  ; virtual ~TClassMenuItem ();  TClassMenuItem dtor. ;  ; virtual const char * GetArgs () const;  ; virtual TObject * GetCalledObject () const;  ; virtual const char * GetFunctionName () const;  ; virtual Int_t GetSelfObjectPos () const;  ; const char * GetTitle () const override;  Returns title of object. ;  ; virtual Int_t GetType () const;  ; TClass * IsA () const override;  ; virtual Bool_t IsCallSelf () const;  ; virtual Bool_t IsSeparator () const;  ; virtual Bool_t IsStandardList () const;  ; virtual Bool_t IsToggle () const;  ; virtual void SetCall (TObject *obj, const char *method, const char *args="""", Int_t selfobjposition=0);  ; virtual void SetSelf (Bool_t self);  ; virtual void SetTitle (const char *title);  ; virtual void SetToggle (Bool_t toggle=kTRUE);  ; virtual void SetType (Int_t type);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTClassMenuItem.html:2787,toggle,toggle,2787,doc/master/classTClassMenuItem.html,https://root.cern,https://root.cern/doc/master/classTClassMenuItem.html,1,['toggle'],['toggle']
Deployability," printExtras (std::ostream &os) const;  Interface to print extras of object. ;  ; virtual void printStream (std::ostream &os, Int_t contents, StyleOption style, TString indent="""") const;  Print description of object on ostream, printing contents set by contents integer, which is interpreted as an OR of 'enum ContentsOptions' values and in the style given by 'enum StyleOption'. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Protected Member Functions; double evaluate () const override;  Evaluate projected p.d.f. ;  ;  Protected Member Functions inherited from RooProjectedPdf; const RooAbsReal * getProjection (const RooArgSet *iset, const RooArgSet *nset, const char *rangeName, int &code) const;  Retrieve object representing projection integral of input p.d.f over observables iset, while normalizing over observables nset. ;  ; bool redirectServersHook (const RooAbsCollection &newServerList, bool, bool, bool) override;  Intercept a server redirection all and update list of dependents if necessary Specifically update the set proxy 'deps' which introduces the dependency on server value dirty flags of ourselves. ;  ;  Protected Member Functions inherited from RooAbsPdf;  RooAbsPdf (const RooAbsPdf &other, const char *name=nullptr);  Copy constructor. ;  ; virtual std::unique_ptr< RooAbsReal > createNLLImpl (RooAbsData &data, const RooLinkedList &cmdList);  Protected implementation of the NLL creation routine. ;  ; virtual std::unique_ptr< RooFitResult > fitToImpl (RooAbsData &data, const RooLinkedList &cmdList);  Protected implementation of the likelihood fitting routine. ;  ; bool isActiveNormSet (RooArgSet const *normSet) const;  Checks if normSet is the currently active normalization set of this PDF, meaning is exactly the same object as the one the _normSet member points to (or both are nullptr). ;  ; double normalizeWithNaNPacking (double rawVal, double normVal) const;  ; RooPlot * plotOn (RooPlot *frame, PlotOpt o) const override;  Plot onesel",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classxRooProjectedPdf.html:56236,update,update,56236,doc/master/classxRooProjectedPdf.html,https://root.cern,https://root.cern/doc/master/classxRooProjectedPdf.html,2,['update'],['update']
Deployability," registerProxy (RooSetProxy &proxy);  Register an RooSetProxy in the proxy list. ;  ; void setProxyNormSet (const RooArgSet *nset);  Forward a change in the cached normalization argset to all the registered proxies. ;  ; void setShapeDirty (const RooAbsArg *source);  Notify that a shape-like property (e.g. binning) has changed. ;  ; void setValueDirty (const RooAbsArg *source);  Force element to re-evaluate itself when a value is requested. ;  ; void unRegisterProxy (RooArgProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooListProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooSetProxy &proxy);  Remove proxy from proxy list. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; RooTemplateProxy< RooRealVar > _meas;  ; RooRealProxy _true;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; Int_t _plotBins = 100;  Number of plot bins. ;  ; double _plotMax = 0.0;  Maximum of plot range. ;  ; double _plotMin = 0.0;  Minimum of plot range. ;  ; bool _selectComp = true;  A buffer for reading values from trees. ;  ; std::unique_ptr< RooNumIntConfig > _specIntegratorConfig;  ; TreeReadBuffer * _treeReadBuffer = nullptr;  ; TString _unit;  Unit for objects value. ;  ; double _value = 0.0;  Cache for current value of object. ;  ;  Protected Attributes inherited from RooAbsArg; std::set< std::string > _boolAttrib;  ; std::set< std::string > _boolAttribTransient;  ; std::vector< RooAbsCache * > _cacheList;  ; RefCountList_t _clientList;  ; RefCountList_t _clientListShape;  ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooPullVar.html:54969,integrat,integration,54969,doc/master/classRooPullVar.html,https://root.cern,https://root.cern/doc/master/classRooPullVar.html,1,['integrat'],['integration']
Deployability," unRegisterProxy (RooSetProxy &proxy);  Remove proxy from proxy list. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Int_t _errorCount = 0;  Number of errors remaining to print. ;  ; Int_t _negCount = 0;  Number of negative probabilities remaining to print. ;  ; RooAbsReal * _norm = nullptr;  ; RooObjCacheManager _normMgr;  ; TString _normRange;  Normalization range. ;  ; RooArgSet const * _normSet = nullptr;  Normalization integral (owned by _normMgr) ;  ; double _rawValue = 0;  ; bool _selectComp = false;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; std::unique_ptr< RooNumGenConfig > _specGeneratorConfig;  ! MC generator configuration specific for this object ;  ; Int_t _traceCount = 0;  Number of traces remaining to print. ;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; Int_t _plotBins = 100;  Number of plot bins. ;  ; double _plotMax = 0.0;  Maximum of plot range. ;  ; double _plotMin = 0.0;  Minimum of plot range. ;  ; bool _selectComp = true;  A buffer for reading values from trees. ;  ; std::unique_ptr< RooNumIntConfig > _specIntegratorConfig;  ; TreeReadBuffer * _treeReadBuffer = nullptr;  ; TString _unit;  Unit for objects value. ;  ; double _value = 0.0;  Cache for current value of object. ;  ;  Protected Attributes inherited from RooAbsArg; std::set< std::string > _boolAttrib;  ; std::set< std::string > _boolAttribTransient;  ; std::vector< RooAbsCache * > _cacheList;  ; RefCountList_t _clientList;  ; RefCountList_t _clientListShape;  ; RefCountList_t _clientListValue;  ; std::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsPdf.html:75776,integrat,integration,75776,doc/master/classRooAbsPdf.html,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html,1,['integrat'],['integration']
Deployability," unRegisterProxy (RooSetProxy &proxy);  Remove proxy from proxy list. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; RooListProxy _coefList;  ; RooListProxy _expList;  ; std::vector< double > _wksp;  ; RooRealProxy _x;  ;  Protected Attributes inherited from RooAbsPdf; Int_t _errorCount = 0;  Number of errors remaining to print. ;  ; Int_t _negCount = 0;  Number of negative probabilities remaining to print. ;  ; RooAbsReal * _norm = nullptr;  ; RooObjCacheManager _normMgr;  ; TString _normRange;  Normalization range. ;  ; RooArgSet const * _normSet = nullptr;  Normalization integral (owned by _normMgr) ;  ; double _rawValue = 0;  ; bool _selectComp = false;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; std::unique_ptr< RooNumGenConfig > _specGeneratorConfig;  ! MC generator configuration specific for this object ;  ; Int_t _traceCount = 0;  Number of traces remaining to print. ;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; Int_t _plotBins = 100;  Number of plot bins. ;  ; double _plotMax = 0.0;  Maximum of plot range. ;  ; double _plotMin = 0.0;  Minimum of plot range. ;  ; bool _selectComp = true;  A buffer for reading values from trees. ;  ; std::unique_ptr< RooNumIntConfig > _specIntegratorConfig;  ; TreeReadBuffer * _treeReadBuffer = nullptr;  ; TString _unit;  Unit for objects value. ;  ; double _value = 0.0;  Cache for current value of object. ;  ;  Protected Attributes inherited from RooAbsArg; std::set< std::string > _boolAttrib;  ; std::set< std::string > _boolAttribTransient;  ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooPowerSum.html:68107,configurat,configuration,68107,doc/master/classRooPowerSum.html,https://root.cern,https://root.cern/doc/master/classRooPowerSum.html,1,['configurat'],['configuration']
Deployability,"» MathCore | Math » MathMore » Numerical Algorithms » Numerical Integration. ; User Class for performing numerical integration of a function in one dimension. ; It uses the plug-in manager to load advanced numerical integration algorithms from GSL, which reimplements the algorithms used in the QUADPACK, a numerical integration package written in Fortran.; Various types of adaptive and non-adaptive integration are supported. These include integration over infinite and semi-infinite ranges and singular integrals.; The integration type is selected using the Integration::type enumeration in the class constructor. The default type is adaptive integration with singularity (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule. In the case of ADAPTIVE type, the integration rule can also be specified via the Integration::GKRule. The default rule is 31 points.; In the case of integration over infinite and semi-infinite ranges, the type used is always ADAPTIVESINGULAR applying a transformation from the original interval into (0,1).; The ADAPTIVESINGULAR type is the most sophisticated type. When performances are important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or ADAPTIVE with a lower Gauss-Kronrod rule.; For detailed description on GSL integration algorithms see the GSL Manual. ; Definition at line 98 of file Integrator.h. Public Types; typedef IntegrationOneDim::Type Type;  . Public Member Functions;  IntegratorOneDim (const IGenFunction &f, IntegrationOneDim::Type type=IntegrationOneDim::kDEFAULT, double absTol=-1, double relTol=-1, unsigned int size=0, int rule=0);  Constructor of one dimensional Integrator passing a function interface. ;  ; template<class Function > ;  IntegratorOneDim (Function &f, IntegrationOneDim::Type type=IntegrationOneDim::kDEFAULT, double absTol=-1, double relTol=-1, unsigned int size=0, int rule=0);  Template Constructor of one dimensional Integrator passin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:1316,integrat,integration,1316,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,1,['integrat'],['integration']
Deployability,"◆ DeclFileName(). static const char * RooCBShape::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 62 of file RooCBShape.h. ◆ doEval(). void RooCBShape::doEval ; (; RooFit::EvalContext & ; ctx); const. overrideprotectedvirtual . Compute multiple values of Crystal ball Shape distribution. ; Reimplemented from RooAbsReal.; Definition at line 74 of file RooCBShape.cxx. ◆ evaluate(). double RooCBShape::evaluate ; (; ); const. overrideprotectedvirtual . Evaluate this PDF / function / constant. Needs to be overridden by all derived classes. ; Implements RooAbsReal.; Definition at line 62 of file RooCBShape.cxx. ◆ getAnalyticalIntegral(). Int_t RooCBShape::getAnalyticalIntegral ; (; RooArgSet & ; allVars, . RooArgSet & ; analVars, . const char * ; rangeName = nullptr . ); const. overridevirtual . Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ; 'integSet' is the set of dependents for which integration is requested. The function should copy the subset of dependents it can analytically integrate to anaIntSet and return a unique identification code for this integration configuration. If no integration can be performed, zero should be returned. ; Reimplemented from RooAbsReal.; Definition at line 82 of file RooCBShape.cxx. ◆ getMaxVal(). Int_t RooCBShape::getMaxVal ; (; const RooArgSet & ; vars); const. overridevirtual . Advertise that we know the maximum of self for given (m0,alpha,n,sigma) ; Reimplemented from RooAbsReal.; Definition at line 108 of file RooCBShape.cxx. ◆ IsA(). TClass * RooCBShape::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooAbsPdf.; Definition at line 62 of file RooCBShape.h. ◆ maxVal(). double RooCBShape::maxVal ; (; Int_t ; code); const. overridevirtual . Return maximum value for set of observables identified by code assigned in getMaxVal. ; Reimplemented from RooAbsReal.; Defini",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCBShape.html:76858,integrat,integration,76858,doc/master/classRooCBShape.html,https://root.cern,https://root.cern/doc/master/classRooCBShape.html,1,['integrat'],['integration']
Deployability,"◆ SwapValues(). void TGraph::SwapValues ; (; Double_t * ; arr, . Int_t ; pos1, . Int_t ; pos2 . ). staticprotected . Swap values. ; Definition at line 2611 of file TGraph.cxx. ◆ UpdateArrays(). void TGraph::UpdateArrays ; (; const std::vector< Int_t > & ; sorting_indices, . Int_t ; numSortedPoints, . Int_t ; low . ). protectedvirtual . Update the fX and fY arrays with the sorted values. ; Reimplemented in TGraphAsymmErrors, TGraphBentErrors, TGraphErrors, and TGraphMultiErrors.; Definition at line 2592 of file TGraph.cxx. ◆ UseCurrentStyle(). void TGraph::UseCurrentStyle ; (; ). overridevirtual . Set current style settings in this graph This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ; Reimplemented from TObject.; Definition at line 2623 of file TGraph.cxx. ◆ Zero(). void TGraph::Zero ; (; Int_t & ; k, . Double_t ; AZ, . Double_t ; BZ, . Double_t ; E2, . Double_t & ; X, . Double_t & ; Y, . Int_t ; maxiterations . ). Find zero of a continuous function. ; This function finds a real zero of the continuous real function Y(X) in a given interval (A,B). See accompanying notes for details of the argument list and calling sequence ; Definition at line 2717 of file TGraph.cxx. Member Data Documentation. ◆ fFunctions. TList* TGraph::fFunctions. protected . Pointer to list of functions (fits and user) ; Definition at line 49 of file TGraph.h. ◆ fHistogram. TH1F* TGraph::fHistogram. protected . Pointer to histogram used for drawing axis. ; Definition at line 50 of file TGraph.h. ◆ fMaximum. Double_t TGraph::fMaximum. protected . Maximum value for plotting along y. ; Definition at line 52 of file TGraph.h. ◆ fMaxSize. Int_t TGraph::fMaxSize. protected . !Current dimension of arrays fX and fY ; Definition at line 45 of file TGraph.h. ◆ fMinimum. Double_t TGraph::fMinimum. protected . Minimum value for plotting along y. ; Definition at line 51 of file TGraph.h. ◆ fNpoints. Int_t TGraph::fNpoints. protected . Number of points <= ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraph.html:76330,continuous,continuous,76330,doc/master/classTGraph.html,https://root.cern,https://root.cern/doc/master/classTGraph.html,1,['continuous'],['continuous']
Deployability,"◆ ~TEveCaloData(). TEveCaloData::~TEveCaloData ; (; ). inlineoverride . Definition at line 175 of file TEveCaloData.h. Member Function Documentation. ◆ CellSelectionChanged(). void TEveCaloData::CellSelectionChanged ; (; ). virtual . Tell users (TEveCaloViz instances using this data) that cell selection has changed and they should update selection cache if necessary. ; This is done by calling TEveCaloViz::CellSelectionChanged(). ; Definition at line 398 of file TEveCaloData.cxx. ◆ Class(). static TClass * TEveCaloData::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TEveCaloData::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TEveCaloData::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 233 of file TEveCaloData.h. ◆ DataChanged(). void TEveCaloData::DataChanged ; (; ). virtual . Tell users (TEveCaloViz instances using this data) that data has changed and they should update the limits/scales etc. ; This is done by calling TEveCaloViz::DataChanged(). ; Reimplemented in TEveCaloDataVec, and TEveCaloDataHist.; Definition at line 382 of file TEveCaloData.cxx. ◆ DeclFileName(). static const char * TEveCaloData::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 233 of file TEveCaloData.h. ◆ Empty(). Bool_t TEveCaloData::Empty ; (; ); const. inline . Definition at line 216 of file TEveCaloData.h. ◆ EtaToTheta(). Float_t TEveCaloData::EtaToTheta ; (; Float_t ; eta). static . Definition at line 411 of file TEveCaloData.cxx. ◆ FillImpliedSelectedSet(). void TEveCaloData::FillImpliedSelectedSet ; (; Set_t & ; impSelSet). overridevirtual . Populate set impSelSet with derived / dependant elements. ; Reimplemented from TEveElement.; Definition at line 178 of file TEveCaloData.cxx. ◆ GetCellData(). virtual void TEveCaloData::GetCellData ; (; const CellId_t & ; id, . Cell",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveCaloData.html:35622,update,update,35622,doc/master/classTEveCaloData.html,https://root.cern,https://root.cern/doc/master/classTEveCaloData.html,1,['update'],['update']
Deployability,"��������� ; �������������������������������������������; kBackDecreasingWindow��������������������� ; ������� filterType-type; of the clipping algorithm,����������������������������� ; ����������������� -possible values=kBack SuccessiveFiltering; ���������������������������������������������; kBackOneStepFiltering����������������������������� ;  ; References:; [1]�; C. G Ryan et al.: SNIP, a statistics-sensitive background treatment for the; quantitative analysis of PIXE spectra in geoscience applications. NIM, B34; (1988), 396-402.; [2]; �M. Morh�č, J. Kliman, V.; Matou�ek, M. Veselsk�, I. Turzo.:; Background elimination methods for multidimensional gamma-ray spectra. NIM,; A401 (1997) 113-132. . Example 1� script Back_gamma64.c; :. Fig.; 1 Original two-dimensional gamma-gamma-ray spectrum. Fig.; 2 Background estimated from data from Fig. 1 using decreasing clipping window with; widths 4, 4 and algorithm based on successive comparisons. The estimate; includes not only continuously changing background but also one-dimensional; ridges. Fig.; 3 Resulting peaks after subtraction of the estimated background (Fig. 2) from original; two-dimensional gamma-gamma-ray spectrum (Fig. 1).;  ;  ; Script:; // Example to illustrate the background estimator (class; TSpectrum).; // To execute this example, do; // root > .x Back_gamma64.C;  ; #include <TSpectrum> ;  ; void Back_gamma64() {; �� Int_t i, j;; �� Double_t nbinsx = 64;; �� Double_t nbinsy = 64;�� ; �� Double_t xmin� = 0;; �� Double_t xmax� = (Double_t)nbinsx;; �� Double_t ymin� = 0;; �� Double_t ymax� = (Double_t)nbinsy;�� ; �� Double_t ** source = new Double_t*[nbinsx];�� ; �� for (i=0;i<nbinsx;i++); ����� source[i]=new Double_t[nbinsy];���� ; �� TH2F *back = new TH2F(""back"",""Background estimation"",nbinsx,xmin,xmax,nbinsy,ymin,ymax);; �� TFile *f = new; TFile(""spectra2\\TSpectrum2.root"");; �� back=(TH2F*) f->Get(""back1;1"");; �� TCanvas *Background = new; TCanvas(""Background"",""Estimation of background with increasing; wind",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TSpectrum2.html:17330,continuous,continuously,17330,root/html602/TSpectrum2.html,https://root.cern,https://root.cern/root/html602/TSpectrum2.html,2,['continuous'],['continuously']
Deployability,"��������� ; �������������������������������������������; kBackDecreasingWindow��������������������� ; ������� filterType-type; of the clipping algorithm,����������������������������� ; ����������������� -possible values=kBack SuccessiveFiltering; ���������������������������������������������; kBackOneStepFiltering����������������������������� ;  ; References:; [1]�; C. G Ryan et al.: SNIP, a statistics-sensitive background treatment for the; quantitative analysis of PIXE spectra in geoscience applications. NIM, B34; (1988), 396-402.; [2]; �M. Morh�č, J. Kliman, V.; Matou�ek, M. Veselsk�, I. Turzo.:; Background elimination methods for multidimensional gamma-ray spectra. NIM,; A401 (1997) 113-132. . Example 1� script Back_gamma64.c; :. Fig.; 1 Original two-dimensional gamma-gamma-ray spectrum. Fig.; 2 Background estimated from data from Fig. 1 using decreasing clipping window with; widths 4, 4 and algorithm based on successive comparisons. The estimate; includes not only continuously changing background but also one-dimensional; ridges. Fig.; 3 Resulting peaks after subtraction of the estimated background (Fig. 2) from original; two-dimensional gamma-gamma-ray spectrum (Fig. 1).;  ;  ; Script:; // Example to illustrate the background estimator (class; TSpectrum).; // To execute this example, do; // root > .x Back_gamma64.C;  ; #include <TSpectrum> ;  ; void Back_gamma64() {; �� Int_t i, j;; �� Double_t nbinsx = 64;; �� Double_t nbinsy = 64;�� ; �� Double_t xmin� = 0;; �� Double_t xmax� = (Double_t)nbinsx;; �� Double_t ymin� = 0;; �� Double_t ymax� = (Double_t)nbinsy;�� ; �� Float_t ** source = new float *[nbinsx];�� ; �� for (i=0;i<nbinsx;i++); ����� source[i]=new float[nbinsy];���� ; �� TH2F *back = new TH2F(""back"",""Background estimation"",nbinsx,xmin,xmax,nbinsy,ymin,ymax);; �� TFile *f = new; TFile(""spectra2\\TSpectrum2.root"");; �� back=(TH2F*) f->Get(""back1;1"");; �� TCanvas *Background = new; TCanvas(""Background"",""Estimation of background with increasing; window"",10",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSpectrum2.html:16562,continuous,continuously,16562,root/html528/TSpectrum2.html,https://root.cern,https://root.cern/root/html528/TSpectrum2.html,4,['continuous'],['continuously']
Energy Efficiency," ""leaks"",; i.e. the memory of your process grows and eventually your program crashes.; Even if you *always* delete the allocated memory, the recovered space may not be; efficiently reused. The process knows that there are portions of free memory,; but when you allocate it again, a fresh piece of memory is grabbed.; Your program is free from semantic errors, but the total memory of your process; still grows. Moreover your program's memory is full of ""holes"" which reduce the; efficiency of memory access, this is called ""memory fragmentation"".; Moreover new / delete are expensive operations in terms of CPU time. Without entering into technical details, the TClonesArray allow to ""reuse"" the; same portion of memory for new/delete avoiding memory fragmentation and memory; growth and improving by orders of magnitude the performance. Every time the; memory of the TClonesArray has to be reused, the Clear() method is employed.; To provide its benefits, each TClonesArray must be allocated *once* per process; and disposed of (deleted) *only when not needed any more*.; So a job should see *only one* deletion for each TClonesArray, which should be; ""Cleared()"" in between several times. Keep deleting a TClonesArray is a double; waste. Not only you do not avoid memory fragmentation, but you worsen it because; the TClonesArray itself is a rather heavy structure, and there is quite some; code in the destructor, so you have more memory fragmentation and slower code. NOTE 2. When investigating misuse of TClonesArray, please make sure of the following:. * Use Clear() or Clear(""C"") instead of Delete(). This will improve program; execution time.; * TClonesArray object classes containing pointers allocate memory.; To avoid causing memory leaks, special Clear(""C"") must be used for; clearing TClonesArray. When option ""C"" is specified, ROOT automatically; executes the Clear() method (by default it is empty contained in TObject).; This method must be overridden in the relevant TClonesArray obje",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TClonesArray.html:2580,allocate,allocated,2580,root/html528/TClonesArray.html,https://root.cern,https://root.cern/root/html528/TClonesArray.html,2,['allocate'],['allocated']
Energy Efficiency," ""single"" in s: stop_norm = ""mcWeight / abs(mcWeight)""; else: stop_norm = ""mcWeight""; df[s] = df[s].Define(""weight"", ""scaleFactor_ELE * scaleFactor_MUON * scaleFactor_LepTRIGGER * scaleFactor_PILEUP * scaleFactor_BTAG * {} * {} / {} * {}"".format(stop_norm, xsecs[s], sumws[s], lumi)); ; # Reconstruct the top mass from the lepton, the missing transverse energy and the b-jet; ; # Just-in-time compile the function to compute the top mass from the constituents; ROOT.gInterpreter.Declare(""""""; float ComputeTopMass(float lep_pt, float lep_eta, float lep_phi, float lep_e, float jet_pt, float jet_eta, float jet_phi, float jet_e, float met_et, float met_phi); {; const ROOT::Math::PtEtaPhiEVector lep(lep_pt / 1000.0, lep_eta, lep_phi, lep_e / 1000.0);; const ROOT::Math::PtEtaPhiEVector met(met_et / 1000.0, 0, met_phi, met_et / 1000.0);; const ROOT::Math::PtEtaPhiEVector bjet(jet_pt / 1000.0, jet_eta, jet_phi, jet_e / 1000.0);; // Please note that we treat here the missing transverse energy as the neutrino, even though the z component is missing!; return (lep + met + bjet).M();; }; """"""); ; histos = {}; for s in samples:; df[s] = df[s].Define(""top_mass"", ""ComputeTopMass(lep_pt[idx_lep], lep_eta[idx_lep], lep_phi[idx_lep], lep_E[idx_lep], jet_pt[idx_tagged], jet_eta[idx_tagged], jet_phi[idx_tagged], jet_E[idx_tagged], met_et, met_phi)""); histos[s] = df[s].Histo1D(ROOT.RDF.TH1DModel(""top_mass"", """", 10, 100, 400), ""top_mass"", ""weight""); ; # Run the event loop and merge histograms of the respective processes; ; # RunGraphs allows to run the event loops of the separate RDataFrame graphs; # concurrently. This results in an improved usage of the available resources; # if each separate RDataFrame can not utilize all available resources, e.g.,; # because not enough data is available.; ROOT.RDF.RunGraphs([histos[s] for s in samples]); ; def merge_histos(label):; h = None; for i, d in enumerate(files[label]):; t = histos[d[1]].GetValue(); if i == 0: h = t.Clone(); else: h.Add(t); h.SetNameTi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/df107__SingleTopAnalysis_8py.html:7736,energy,energy,7736,doc/master/df107__SingleTopAnalysis_8py.html,https://root.cern,https://root.cern/doc/master/df107__SingleTopAnalysis_8py.html,1,['energy'],['energy']
Energy Efficiency," #include <unistd.h>. Include dependency graph for TGX11.cxx:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Classes; struct  RVisual;  ; struct  RXColor;  ; struct  RXGCValues;  ; struct  RXImage;  ; struct  RXPoint;  ; struct  RXVisualInfo;  . Namespaces; namespace  ROOT;  tbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tbb::task_arena without forward declaring tbb::interface7 ;  . Functions; static Int_t DummyX11ErrorHandler (Display *, XErrorEvent *);  Dummy error handler for X11. Used by FindUsableVisual(). ;  ; static void GetPixel (int y, int width, Byte_t *scline);  Get pixels in line y and put in array scline. ;  ; int GIFdecode (Byte_t *gifArr, Byte_t *pixArr, int *Width, int *Height, int *Ncols, Byte_t *R, Byte_t *G, Byte_t *B);  ; long GIFencode (int Width, int Height, Int_t Ncol, Byte_t R[], Byte_t G[], Byte_t B[], Byte_t ScLine[], void(*get_scline)(int, int, Byte_t *), void(*pb)(Byte_t));  ; int GIFinfo (Byte_t *gifArr, int *Width, int *Height, int *Ncols);  ; int GIFquantize (UInt_t width, UInt_t height, Int_t *ncol, Byte_t *red, Byte_t *green, Byte_t *blue, Byte_t *outputBuf, Byte_t *outputCmap);  ; static void PutByte (Byte_t b);  Put byte b in output stream. ;  ; int XRotDrawAlignedImageString (Display *, XFontStruct *, float, Drawable, GC, int, int, char *, int);  A front end to XRotPaintAlignedString: -does alignment, paints background. ;  ; int XRotDrawAlignedString (Display *, XFontStruct *, float, Drawable, GC, int, int, char *, int);  A front end to XRotPaintAlignedString: -does alignment, no background. ;  ; int XRotDrawImageString (Display *, XFontStruct *, float, Drawable, GC, int, int, char *);  A front end to XRotPaintAlignedString: -no alignment, paints background. ;  ; int XRotDrawString (Display *, XFontStruct *, float, Drawable, GC, int, int, char *);  A front end to XRotPaintAlignedString: -no alignment, no background. ;  ; void XRotSetBounding",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGX11_8cxx.html:1892,green,green,1892,doc/master/TGX11_8cxx.html,https://root.cern,https://root.cern/doc/master/TGX11_8cxx.html,2,['green'],['green']
Energy Efficiency," &r, RLoopManager &df,; 84 std::shared_ptr<ROOT::Internal::RDF::RActionBase> actionPtr);; 85 ; 86// Fwd decl for GetMergeableValue; 87template <typename T>; 88class RMergeableValue;; 89 ; 90template <typename T>; 91std::unique_ptr<RMergeableValue<T>> GetMergeableValue(RResultPtr<T> &rptr);; 92} // namespace RDF; 93} // namespace Detail; 94namespace RDF {; 95namespace RDFInternal = ROOT::Internal::RDF;; 96namespace RDFDetail = ROOT::Detail::RDF;; 97namespace TTraits = ROOT::TypeTraits;; 98 ; 99/// Smart pointer for the return type of actions; 100/**; 101\class ROOT::RDF::RResultPtr; 102\ingroup dataframe; 103\brief A wrapper around the result of RDataFrame actions able to trigger calculations lazily.; 104\tparam T Type of the action result; 105 ; 106A smart pointer which allows to access the result of a RDataFrame action. The; 107methods of the encapsulated object can be accessed via the arrow operator.; 108Upon invocation of the arrow operator or dereferencing (`operator*`), the; 109loop on the events and calculations of all scheduled actions are executed; 110if needed.; 111It is possible to iterate on the result proxy if the proxied object is a collection.; 112~~~{.cpp}; 113for (auto& myItem : myResultProxy) { ... };; 114~~~; 115If iteration is not supported by the type of the proxied object, a compilation error is thrown.; 116 ; 117*/; 118template <typename T>; 119class RResultPtr {; 120 // private using declarations; 121 using SPT_t = std::shared_ptr<T>;; 122 ; 123 // friend declarations; 124 template <typename T1>; 125 friend class RResultPtr;; 126 ; 127 template <typename T1>; 128 friend RResultPtr<T1> RDFDetail::MakeResultPtr(const std::shared_ptr<T1> &, ::ROOT::Detail::RDF::RLoopManager &,; 129 std::shared_ptr<RDFInternal::RActionBase>);; 130 ; 131 template <typename T1>; 132 friend ROOT::RDF::Experimental::RResultMap<T1> ROOT::RDF::Experimental::VariationsFor(RResultPtr<T1> resPtr);; 133 ; 134 template <class T1, class T2>; 135 friend bool operator==(const RR",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RResultPtr_8hxx_source.html:4120,schedul,scheduled,4120,doc/master/RResultPtr_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RResultPtr_8hxx_source.html,1,['schedul'],['scheduled']
Energy Efficiency," & ; os = std::cout . ). static . print only the specified default options ; print default options ; Definition at line 215 of file IntegratorOptions.cxx. ◆ SetDefaultAbsTolerance(). void ROOT::Math::IntegratorOneDimOptions::SetDefaultAbsTolerance ; (; double ; tol). static . Definition at line 246 of file IntegratorOptions.cxx. ◆ SetDefaultIntegrator(). void ROOT::Math::IntegratorOneDimOptions::SetDefaultIntegrator ; (; const char * ; name). static . Definition at line 222 of file IntegratorOptions.cxx. ◆ SetDefaultNPoints(). void ROOT::Math::IntegratorOneDimOptions::SetDefaultNPoints ; (; unsigned int ; n). static . Definition at line 259 of file IntegratorOptions.cxx. ◆ SetDefaultRelTolerance(). void ROOT::Math::IntegratorOneDimOptions::SetDefaultRelTolerance ; (; double ; tol). static . Definition at line 250 of file IntegratorOptions.cxx. ◆ SetDefaultWKSize(). void ROOT::Math::IntegratorOneDimOptions::SetDefaultWKSize ; (; unsigned int ; size). static . Definition at line 255 of file IntegratorOptions.cxx. ◆ SetIntegrator(). void ROOT::Math::IntegratorOneDimOptions::SetIntegrator ; (; const char * ; name). set 1D integrator name ; Definition at line 197 of file IntegratorOptions.cxx. ◆ SetNPoints(). void ROOT::Math::IntegratorOneDimOptions::SetNPoints ; (; unsigned int ; n). inline . Set number of points for active integration rule. . For the GSL adaptive integrator, n = 1,2,3,4,5,6 correspond to the 15,21,31,41,51,61-point integration rules.; For the GaussLegendre integrator, use values > 6, which correspond to the actual number of points being evaluated. . Definition at line 140 of file IntegratorOptions.h. Libraries for ROOT::Math::IntegratorOneDimOptions:. [legend]; The documentation for this class was generated from the following files:; math/mathcore/inc/Math/IntegratorOptions.h; math/mathcore/src/IntegratorOptions.cxx. ROOTMathIntegratorOneDimOptions. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:22 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDimOptions.html:8753,adapt,adaptive,8753,doc/master/classROOT_1_1Math_1_1IntegratorOneDimOptions.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDimOptions.html,1,['adapt'],['adaptive']
Energy Efficiency," ( 13 )). };  ;  Public Attributes inherited from TArrayL64; Long64_t * fArray;  ;  Public Attributes inherited from TArray; Int_t fN;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from TH3; static TH1D * DoProject1D (const TH3 &h, const char *name, const char *title, const TAxis *projX, bool computeErrors, bool originalRange, bool useUF, bool useOF);  static methdod performing the projection to 1D histogram ;  ; static TH2D * DoProject2D (const TH3 &h, const char *name, const char *title, const TAxis *projX, const TAxis *projY, bool computeErrors, bool originalRange, bool useUF, bool useOF);  static methdod performing the projection to 2D histogram ;  ;  Static Protected Member Functions inherited from TH1; static Int_t AutoP2GetBins (Int_t n);  Auxiliary function to get the next power of 2 integer value larger then n. ;  ; static Double_t AutoP2GetPower2 (Double_t x, Bool_t next=kTRUE);  Auxiliary function to get the power of 2 next (larger) or previous (smaller) a given x. ;  ; static bool CheckAxisLimits (const TAxis *a1, const TAxis *a2);  Check that the axis limits of the histograms are the same. ;  ; static bool CheckBinLabels (const TAxis *a1, const TAxis *a2);  Check that axis have same labels. ;  ; static bool CheckBinLimits (const TAxis *a1, const TAxis *a2);  Check bin limits. ;  ; static int CheckConsistency (const TH1 *h1, const TH1 *h2);  Check histogram compatibility. ;  ; static bool CheckConsistentSubAxes (const TAxis *a1, Int_t firstBin1, Int_t lastBin1, const TAxis *a2, Int_t firstBin2=0, Int_t lastBin2=0);  Check that two sub axis are the same. ;  ; static bool CheckEqualAxes (const TAxis *a1, const TAxis *a2);  Check that the axis are the same. ;  ; static Bool_t RecomputeAxisLimits (TAxis &destAxis, const TAxis &anAxis);  Finds new limits for the axis for the Merge function. ;  ; static Bool_t SameLimitsAndNBins (const TAxis &axis1, const TAxis &axis2);  S",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH3L.html:57502,power,power,57502,doc/master/classTH3L.html,https://root.cern,https://root.cern/doc/master/classTH3L.html,1,['power'],['power']
Energy Efficiency," ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TXMLDocument.h>. Inheritance diagram for TXMLDocument:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TXMLDocument() [1/2]. TXMLDocument::TXMLDocument ; (; const TXMLDocument & ; ). privatedelete . ◆ TXMLDocument() [2/2]. TXMLDocument::TXMLDocument ; (; _xmlDoc * ; doc). TXMLDocument constructor. ; Definition at line 30 of file TXMLDocument.cxx. ◆ ~TXMLDocument(). TXMLDocument::~TXMLDocument ; (; ). override . TXMLDocument destructor. ; Free the global variables that may have been allocated by the parser. ; Definition at line 44 of file TXMLDocument.cxx. Member Function Documentation. ◆ Class(). static TClass * TXMLDocument::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TXMLDocument::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TXMLDocument::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 40 of file TXMLDocument.h. ◆ DeclFileName(). static const char * TXMLDocument::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 40 of file TXMLDocument.h. ◆ Encoding(). const char * TXMLDocument::Encoding ; (; ); const. Returns external initial encoding, if any or 0 in case there is no document set. ; Definition at line 72 of file TXMLDocument.cxx. ◆ GetRootNode(). TXMLNode * TXMLDocument::GetRootNode ; (; ); const. Returns the root element node. ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTXMLDocument.html:11235,allocate,allocated,11235,doc/master/classTXMLDocument.html,https://root.cern,https://root.cern/doc/master/classTXMLDocument.html,1,['allocate'],['allocated']
Energy Efficiency," (!HasInterpreterInfo() && !fCollectionProxy) {; 5559 // There is no dictionary at all and we do not have; 5560 // the services of a collection proxy available, so; 5561 // use the streamer info to approximate calling the; 5562 // array destructor.; 5563 ; 5564 Bool_t inRepo = kTRUE;; 5565 Bool_t currentVersion = kFALSE;; 5566 ; 5567 // Was this array object allocated through TClass?; 5568 Version_t objVer = -1;; 5569 {; 5570 R__LOCKGUARD2(fOVRMutex);; 5571 RepoCont_t::iterator iter = fObjectVersionRepository.find(p);; 5572 if (iter == fObjectVersionRepository.end()) {; 5573 // No, it wasn't, we cannot know what to do.; 5574 //Error(""DeleteArray"", ""Attempt to delete unregistered array object, element type '%s', at address %p!"", GetName(), p);; 5575 inRepo = kFALSE;; 5576 } else {; 5577 for (; (iter != fObjectVersionRepository.end()) && (iter->first == p); ++iter) {; 5578 objVer = iter->second;; 5579 if (objVer == fClassVersion) {; 5580 currentVersion = kTRUE;; 5581 break;; 5582 }; 5583 }; 5584 }; 5585 }; 5586 ; 5587 if (!inRepo || currentVersion) {; 5588 // The object was allocated using code for the same class version; 5589 // as is loaded now. We may proceed without worry.; 5590 TVirtualStreamerInfo* si = GetStreamerInfo();; 5591 if (si) {; 5592 si->DeleteArray(ary, dtorOnly);; 5593 } else {; 5594 Error(""DeleteArray"", ""No streamer info available for class '%s' version %d at address %p, cannot destruct object!"", GetName(), fClassVersion, ary);; 5595 Error(""DeleteArray"", ""length of fStreamerInfo is %d"", fStreamerInfo->GetSize());; 5596 Int_t i = fStreamerInfo->LowerBound();; 5597 for (Int_t v = 0; v < fStreamerInfo->GetSize(); ++v, ++i) {; 5598 Error(""DeleteArray"", ""fStreamerInfo->At(%d): %p"", v, fStreamerInfo->At(i));; 5599 if (fStreamerInfo->At(i)) {; 5600 Error(""DeleteArray"", ""Doing Dump() ..."");; 5601 ((TVirtualStreamerInfo*)fStreamerInfo->At(i))->Dump();; 5602 }; 5603 }; 5604 }; 5605 } else {; 5606 // The loaded class version is not the same as the version of th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TClass_8cxx_source.html:213778,allocate,allocated,213778,doc/v632/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/TClass_8cxx_source.html,1,['allocate'],['allocated']
Energy Efficiency," (!HasInterpreterInfo() && !fCollectionProxy) {; 5626 // There is no dictionary at all and we do not have; 5627 // the services of a collection proxy available, so; 5628 // use the streamer info to approximate calling the; 5629 // array destructor.; 5630 ; 5631 Bool_t inRepo = kTRUE;; 5632 Bool_t currentVersion = kFALSE;; 5633 ; 5634 // Was this array object allocated through TClass?; 5635 Version_t objVer = -1;; 5636 {; 5637 R__LOCKGUARD2(fOVRMutex);; 5638 RepoCont_t::iterator iter = fObjectVersionRepository.find(p);; 5639 if (iter == fObjectVersionRepository.end()) {; 5640 // No, it wasn't, we cannot know what to do.; 5641 //Error(""DeleteArray"", ""Attempt to delete unregistered array object, element type '%s', at address %p!"", GetName(), p);; 5642 inRepo = kFALSE;; 5643 } else {; 5644 for (; (iter != fObjectVersionRepository.end()) && (iter->first == p); ++iter) {; 5645 objVer = iter->second;; 5646 if (objVer == fClassVersion) {; 5647 currentVersion = kTRUE;; 5648 break;; 5649 }; 5650 }; 5651 }; 5652 }; 5653 ; 5654 if (!inRepo || currentVersion) {; 5655 // The object was allocated using code for the same class version; 5656 // as is loaded now. We may proceed without worry.; 5657 TVirtualStreamerInfo* si = GetStreamerInfo();; 5658 if (si) {; 5659 si->DeleteArray(ary, dtorOnly);; 5660 } else {; 5661 Error(""DeleteArray"", ""No streamer info available for class '%s' version %d at address %p, cannot destruct object!"", GetName(), fClassVersion, ary);; 5662 Error(""DeleteArray"", ""length of fStreamerInfo is %d"", fStreamerInfo->GetSize());; 5663 Int_t i = fStreamerInfo->LowerBound();; 5664 for (Int_t v = 0; v < fStreamerInfo->GetSize(); ++v, ++i) {; 5665 Error(""DeleteArray"", ""fStreamerInfo->At(%d): %p"", v, fStreamerInfo->At(i));; 5666 if (fStreamerInfo->At(i)) {; 5667 Error(""DeleteArray"", ""Doing Dump() ..."");; 5668 ((TVirtualStreamerInfo*)fStreamerInfo->At(i))->Dump();; 5669 }; 5670 }; 5671 }; 5672 } else {; 5673 // The loaded class version is not the same as the version of th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClass_8cxx_source.html:216529,allocate,allocated,216529,doc/master/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TClass_8cxx_source.html,1,['allocate'],['allocated']
Energy Efficiency," () noexcept;  ; reference front ();  ; const_reference front () const;  ; size_type max_size () const noexcept;  ; const_reverse_iterator rbegin () const noexcept;  ; reverse_iterator rbegin () noexcept;  ; const_reverse_iterator rend () const noexcept;  ; reverse_iterator rend () noexcept;  ; size_t size () const;  ; size_type size_in_bytes () const;  ;  Public Member Functions inherited from ROOT::Internal::VecOps::SmallVectorBase; size_t capacity () const noexcept;  ; bool empty () const;  ; void set_size (size_t N);  Set the array size to N, which the current array must have enough capacity for. ;  ; size_t size () const;  . Protected Member Functions;  SmallVectorTemplateBase (size_t Size);  ; void grow (size_t MinSize=0);  Grow the allocated memory (without initializing new elements), doubling the size of the allocated memory. ;  ;  Protected Member Functions inherited from ROOT::Internal::VecOps::SmallVectorTemplateCommon< T >;  SmallVectorTemplateCommon (size_t Size);  ; void grow_pod (size_t MinSize, size_t TSize);  ; bool isSmall () const;  Return true if this is a smallvector which has not had dynamic memory allocated for it. ;  ; void resetToSmall ();  Put this vector in a state of being small. ;  ;  Protected Member Functions inherited from ROOT::Internal::VecOps::SmallVectorBase;  SmallVectorBase ()=delete;  ;  SmallVectorBase (void *FirstEl, size_t TotalCapacity);  ; void grow_pod (void *FirstEl, size_t MinSize, size_t TSize);  This is an implementation of the grow() method which only works on POD-like data types and is out of line to reduce code duplication. ;  ; bool Owns () const;  If false, the RVec is in ""memory adoption"" mode, i.e. it is acting as a view on a memory buffer it does not own. ;  . Static Protected Member Functions; static void destroy_range (T *S, T *E);  ; template<typename It1 , typename It2 > ; static void uninitialized_copy (It1 I, It1 E, It2 Dest);  Copy the range [I, E) onto the uninitialized memory starting with ""Dest"", con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Internal_1_1VecOps_1_1SmallVectorTemplateBase.html:3157,allocate,allocated,3157,doc/master/classROOT_1_1Internal_1_1VecOps_1_1SmallVectorTemplateBase.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1VecOps_1_1SmallVectorTemplateBase.html,1,['allocate'],['allocated']
Energy Efficiency," () override;  Destructor. ;  ; virtual Int_t ClearCache (const char *uri);  Clear cached information matching uri. ;  ; virtual Bool_t ExistsDataSet (const char *uri);  Checks if the indicated dataset exits. ;  ; virtual Long64_t GetAvgFileSize () const;  ; virtual TFileCollection * GetDataSet (const char *uri, const char *server=0);  Utility function used in various methods for user dataset upload. ;  ; virtual TMap * GetDataSets (const char *uri, UInt_t=TDataSetManager::kExport);  Returns all datasets for the <group> and <user> specified by <uri>. ;  ; virtual Long64_t GetGroupQuota (const char *group);  returns the quota a group is allowed to have ;  ; virtual TMap * GetGroupQuotaMap ();  ; virtual Long64_t GetGroupUsed (const char *group);  Returns the used space of that group. ;  ; virtual TMap * GetSubDataSets (const char *uri, const char *excludeservers);  Partition dataset 'ds' accordingly to the servers. ;  ; TClass * IsA () const override;  ; virtual void MonitorUsedSpace (TVirtualMonitoringWriter *monitoring);  Log info to the monitoring server. ;  ; virtual Int_t NotifyUpdate (const char *group=0, const char *user=0, const char *dspath=0, Long_t mtime=0, const char *checksum=0);  Save into the <datasetdir>/dataset.list file the name of the last updated or created or modified dataset Returns 0 on success, -1 on error. ;  ; virtual void ParseInitOpts (const char *opts);  Parse the opts string and set the init bits accordingly Available options: Cq: set kCheckQuota Ar: set kAllowRegister Av: set kAllowVerify Ti: set kTrustInfo Sb: set kIsSandbox Ca: set kUseCache or kDoNotUseCache The opts string may also contain additional unrelated info: in such a case the field delimited by the prefix ""opt:"" is analyzed, e.g. ;  ; Bool_t ParseUri (const char *uri, TString *dsGroup=0, TString *dsUser=0, TString *dsName=0, TString *dsTree=0, Bool_t onlyCurrent=kFALSE, Bool_t wildcards=kFALSE);  Parses a (relative) URI that describes a DataSet on the cluster. ;  ; virtual ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDataSetManager.html:3129,monitor,monitoring,3129,doc/master/classTDataSetManager.html,https://root.cern,https://root.cern/doc/master/classTDataSetManager.html,2,['monitor'],['monitoring']
Energy Efficiency," (1ULL << ( 11 )); , ;   kSetBranchStatus = (1ULL << ( 12 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Attributes inherited from TTree; static Int_t fgBranchStyle = 1;  Old/New branch style. ;  ; static Long64_t fgMaxTreeSize = 100000000000LL;  Maximum size of a file containing a Tree. ;  . #include <TNtuple.h>. Inheritance diagram for TNtuple:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TNtuple() [1/3]. TNtuple::TNtuple ; (; const TNtuple & ; ). privatedelete . ◆ TNtuple() [2/3]. TNtuple::TNtuple ; (; ). Default constructor for Ntuple. ; Definition at line 46 of file TNtuple.cxx. ◆ TNtuple() [3/3]. TNtuple::TNtuple ; (; const char * ; name, . const char * ; title, . const char * ; varlist, . Int_t ; bufsize = 32000 . ). Create an Ntuple. ; The parameter varlist describes the list of the ntuple variables separated by a colon:; Example: x:y:z:energy; For each variable in the list a separate branch is created.; NOTE:; Use TTree to create branches with variables of different data types.; Use TTree when the number of branches is large (> 100). . Definition at line 66 of file TNtuple.cxx. ◆ ~TNtuple(). TNtuple::~TNtuple ; (; ). override . Default destructor for an Ntuple. ; Definition at line 103 of file TNtuple.cxx. Member Function Documentation. ◆ Browse(). void TNtuple::Browse ; (; TBrowser * ; b). overridevirtual . Browse content of the ntuple. ; Reimplemented from TObject.; Definition at line 158 of file TNtuple.cxx. ◆ Class(). static TClass * TNtuple::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TNtuple::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TNtuple::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 61 of file TNtuple.h. ◆ CloneTree(). TTree * ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTNtuple.html:50187,energy,energy,50187,doc/master/classTNtuple.html,https://root.cern,https://root.cern/doc/master/classTNtuple.html,1,['energy'],['energy']
Energy Efficiency," (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TAttImage.h>. Inheritance diagram for TImagePalette:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TImagePalette() [1/4]. TImagePalette::TImagePalette ; (; ). Default constructor, sets all pointers to 0. ; Definition at line 273 of file TAttImage.cxx. ◆ TImagePalette() [2/4]. TImagePalette::TImagePalette ; (; const TImagePalette & ; palette). Copy constructor. ; Definition at line 294 of file TAttImage.cxx. ◆ TImagePalette() [3/4]. TImagePalette::TImagePalette ; (; UInt_t ; numPoints). Constructor for a palette with numPoints anchor points. ; It allocates the memory but does not set any colors. ; Definition at line 281 of file TAttImage.cxx. ◆ TImagePalette() [4/4]. TImagePalette::TImagePalette ; (; Int_t ; ncolors, . Int_t * ; colors . ). Creates palette in the same way as TStyle::SetPalette. ; Definition at line 314 of file TAttImage.cxx. ◆ ~TImagePalette(). TImagePalette::~TImagePalette ; (; ). override . Destructor. ; Definition at line 431 of file TAttImage.cxx. Member Function Documentation. ◆ Class(). static TClass * TImagePalette::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TImagePalette::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TImagePalette::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 56 of file TAttImage.h. ◆ Create(). TImagePalette * TImagePalette::Create ; (; Option_t * ; opts). static . Factory method to creates an image palette of a specific typ. ; Create a new palette; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTImagePalette.html:13415,allocate,allocates,13415,doc/master/classTImagePalette.html,https://root.cern,https://root.cern/doc/master/classTImagePalette.html,1,['allocate'],['allocates']
Energy Efficiency," (; ); const. inline . Definition at line 85 of file MethodRuleFit.h. ◆ VerifyRange() [1/3]. template<typename T > . Int_t TMVA::MethodRuleFit::VerifyRange ; (; const T & ; var, . const T & ; vmin, . const T & ; vmax . ). inlineprivate . Definition at line 218 of file MethodRuleFit.h. ◆ VerifyRange() [2/3]. template<typename T > . Bool_t TMVA::MethodRuleFit::VerifyRange ; (; TMVA::MsgLogger & ; mlog, . const char * ; varstr, . T & ; var, . const T & ; vmin, . const T & ; vmax . ). inlineprivate . Definition at line 228 of file MethodRuleFit.h. ◆ VerifyRange() [3/3]. template<typename T > . Bool_t TMVA::MethodRuleFit::VerifyRange ; (; TMVA::MsgLogger & ; mlog, . const char * ; varstr, . T & ; var, . const T & ; vmin, . const T & ; vmax, . const T & ; vdef . ). inlineprivate . Definition at line 250 of file MethodRuleFit.h. ◆ WriteMonitoringHistosToFile(). void TMVA::MethodRuleFit::WriteMonitoringHistosToFile ; (; void ; ); const. virtual . write special monitoring histograms to file (here ntuple) ; Reimplemented from TMVA::MethodBase.; Definition at line 628 of file MethodRuleFit.cxx. Member Data Documentation. ◆ fEventSample. std::vector<TMVA::Event *> TMVA::MethodRuleFit::fEventSample. private . the complete training sample ; Definition at line 156 of file MethodRuleFit.h. ◆ fForest. std::vector<DecisionTree *> TMVA::MethodRuleFit::fForest. private . the forest ; Definition at line 180 of file MethodRuleFit.h. ◆ fForestTypeS. TString TMVA::MethodRuleFit::fForestTypeS. private . forest generation: how the trees are generated ; Definition at line 191 of file MethodRuleFit.h. ◆ fGDErrScale. Double_t TMVA::MethodRuleFit::fGDErrScale. private . GD path: stop. ; Definition at line 203 of file MethodRuleFit.h. ◆ fGDNPathSteps. Int_t TMVA::MethodRuleFit::fGDNPathSteps. private . GD path: number of steps. ; Definition at line 202 of file MethodRuleFit.h. ◆ fGDPathEveFrac. Double_t TMVA::MethodRuleFit::fGDPathEveFrac. private . GD path: fraction of subsamples used for the fit",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodRuleFit.html:44518,monitor,monitoring,44518,doc/master/classTMVA_1_1MethodRuleFit.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodRuleFit.html,1,['monitor'],['monitoring']
Energy Efficiency," (as explained above); d.add(RooArgSet(x, y, c));; }; d.Print(""v"");; cout << endl;; ; // The get() function returns a pointer to the internal copy of the RooArgSet(x,y,c); // supplied in the constructor; const RooArgSet *row = d.get();; row->Print(""v"");; cout << endl;; ; // Get with an argument loads a specific data point in row and returns; // a pointer to row argset. get() always returns the same pointer, unless; // an invalid row number is specified. In that case a null ptr is returned; d.get(900)->Print(""v"");; cout << endl;; ; // R e d u c i n g , A p p e n d i n g a n d M e r g i n g; // -------------------------------------------------------------; ; // The reduce() function returns a new dataset which is a subset of the original; cout << endl << "">> d1 has only columns x,c"" << endl;; std::unique_ptr<RooAbsData> d1{d.reduce({x, c})};; d1->Print(""v"");; ; cout << endl << "">> d2 has only column y"" << endl;; std::unique_ptr<RooAbsData> d2{d.reduce({y})};; d2->Print(""v"");; ; cout << endl << "">> d3 has only the points with y>5.17"" << endl;; std::unique_ptr<RooAbsData> d3{d.reduce(""y>5.17"")};; d3->Print(""v"");; ; cout << endl << "">> d4 has only columns x,c for data points with y>5.17"" << endl;; std::unique_ptr<RooAbsData> d4{d.reduce({x, c}, ""y>5.17"")};; d4->Print(""v"");; ; // The merge() function adds two data set column-wise; cout << endl << "">> merge d2(y) with d1(x,c) to form d1(x,c,y)"" << endl;; static_cast<RooDataSet&>(*d1).merge(&static_cast<RooDataSet&>(*d2));; d1->Print(""v"");; ; // The append() function adds two datasets row-wise; cout << endl << "">> append data points of d3 to d1"" << endl;; static_cast<RooDataSet&>(*d1).append(static_cast<RooDataSet&>(*d3));; d1->Print(""v"");; ; // O p e r a t i o n s o n b i n n e d d a t a s e t s; // ---------------------------------------------------------; ; // A binned dataset can be constructed empty, from an unbinned dataset, or; // from a ROOT native histogram (TH1,2,3); ; cout << "">> construct dh (binned) from d(unbi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf402__datahandling_8C.html:2696,reduce,reduce,2696,doc/master/rf402__datahandling_8C.html,https://root.cern,https://root.cern/doc/master/rf402__datahandling_8C.html,1,['reduce'],['reduce']
Energy Efficiency," (promotes smoothness over detail preservation); kest3 = ROOT.RooKeysPdf(""kest1"", ""kest1"", x, data1, ROOT.RooKeysPdf.MirrorBoth, 2); ; # Plot kernel estimation pdfs with and without mirroring over data; frame = x.frame(Title=""Adaptive kernel estimation pdf with and w/o mirroring"", Bins=20); data1.plotOn(frame); kest1.plotOn(frame); kest2.plotOn(frame, LineStyle=""--"", LineColor=""r""); ; # Plot kernel estimation pdfs with regular and increased bandwidth; frame2 = x.frame(Title=""Adaptive kernel estimation pdf with regular, bandwidth""); kest1.plotOn(frame2); kest3.plotOn(frame2, LineColor=""m""); ; # Create low status 2D dataset; # -------------------------------------------------------; ; # Construct a 2D toy pdf for sampleing; y = ROOT.RooRealVar(""y"", ""y"", 0, 20); py = ROOT.RooPolynomial(; ""py"",; ""py"",; y,; [0.01, 0.01, -0.0004],; ); pxy = ROOT.RooProdPdf(""pxy"", ""pxy"", [p, py]); data2 = pxy.generate({x, y}, 1000); ; # Create 2D kernel estimation pdf; # ---------------------------------------------------------------; ; # Create 2D adaptive kernel estimation pdf with mirroring; kest4 = ROOT.RooNDKeysPdf(""kest4"", ""kest4"", [x, y], data2, ""am""); ; # Create 2D adaptive kernel estimation pdf with mirroring and double; # bandwidth; kest5 = ROOT.RooNDKeysPdf(""kest5"", ""kest5"", [x, y], data2, ""am"", 2); ; # Create a histogram of the data; hh_data = data2.createHistogram(""hh_data"", x, Binning=10, YVar=dict(var=y, Binning=10)); ; # Create histogram of the 2d kernel estimation pdfs; hh_pdf = kest4.createHistogram(""hh_pdf"", x, Binning=25, YVar=dict(var=y, Binning=25)); hh_pdf2 = kest5.createHistogram(""hh_pdf2"", x, Binning=25, YVar=dict(var=y, Binning=25)); hh_pdf.SetLineColor(ROOT.kBlue); hh_pdf2.SetLineColor(ROOT.kMagenta); ; c = ROOT.TCanvas(""rf707_kernelestimation"", ""rf707_kernelestimation"", 800, 800); c.Divide(2, 2); c.cd(1); ROOT.gPad.SetLeftMargin(0.15); frame.GetYaxis().SetTitleOffset(1.4); frame.Draw(); c.cd(2); ROOT.gPad.SetLeftMargin(0.15); frame2.GetYaxis().SetTitleOffset(1.8",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf707__kernelestimation_8py.html:2318,adapt,adaptive,2318,doc/master/rf707__kernelestimation_8py.html,https://root.cern,https://root.cern/doc/master/rf707__kernelestimation_8py.html,1,['adapt'],['adaptive']
Energy Efficiency," (x-xt)/(xmax-xmin) will be worst, and vice-versa.; The format [0,0,8] is also interesting when the range of x is infinite; or unknown. --NOTE 2; It is important to understand the difference with the meaning of nbits; -in case of [-1,1,nbits], nbits is the total number of bits used to make; the conversion from a double to an integer; -in case of [0,0,nbits], nbits is the number of bits used for the mantissa. see example of use of the Double32_t data type in tutorial double32.C. /*; ; */. Int_t ReadArray(Bool_t *&b); Read array of bools from the I/O buffer. Returns the number of; bools read. If argument is a 0 pointer then space will be; allocated for the array. Int_t ReadArray(Char_t *&c); Read array of characters from the I/O buffer. Returns the number of; characters read. If argument is a 0 pointer then space will be; allocated for the array. Int_t ReadArray(Short_t *&h); Read array of shorts from the I/O buffer. Returns the number of shorts; read. If argument is a 0 pointer then space will be allocated for the; array. Int_t ReadArray(Int_t *&ii); Read array of ints from the I/O buffer. Returns the number of ints; read. If argument is a 0 pointer then space will be allocated for the; array. Int_t ReadArray(Long_t *&ll); Read array of longs from the I/O buffer. Returns the number of longs; read. If argument is a 0 pointer then space will be allocated for the; array. Int_t ReadArray(Long64_t *&ll); Read array of long longs from the I/O buffer. Returns the number of; long longs read. If argument is a 0 pointer then space will be; allocated for the array. Int_t ReadArray(Float_t *&f); Read array of floats from the I/O buffer. Returns the number of floats; read. If argument is a 0 pointer then space will be allocated for the; array. Int_t ReadArray(Double_t *&d); Read array of doubles from the I/O buffer. Returns the number of doubles; read. If argument is a 0 pointer then space will be allocated for the; array. Int_t ReadArrayFloat16(Float_t*& f, TStreamerElement* ele",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TBufferFile.html:25843,allocate,allocated,25843,root/html526/TBufferFile.html,https://root.cern,https://root.cern/root/html526/TBufferFile.html,1,['allocate'],['allocated']
Energy Efficiency," (x-xt)/(xmax-xmin) will be worst, and vice-versa.; The format [0,0,8] is also interesting when the range of x is infinite; or unknown. --NOTE 2; It is important to understand the difference with the meaning of nbits; -in case of [-1,1,nbits], nbits is the total number of bits used to make; the conversion from a double to an integer; -in case of [0,0,nbits], nbits is the number of bits used for the mantissa. see example of use of the Double32_t data type in tutorial double32.C. /*; ; */. Int_t ReadArray(Bool_t*& b); Read array of bools from the I/O buffer. Returns the number of; bools read. If argument is a 0 pointer then space will be; allocated for the array. Int_t ReadArray(Char_t*& c); Read array of characters from the I/O buffer. Returns the number of; characters read. If argument is a 0 pointer then space will be; allocated for the array. Int_t ReadArray(Short_t*& h); Read array of shorts from the I/O buffer. Returns the number of shorts; read. If argument is a 0 pointer then space will be allocated for the; array. Int_t ReadArray(Int_t*& i); Read array of ints from the I/O buffer. Returns the number of ints; read. If argument is a 0 pointer then space will be allocated for the; array. Int_t ReadArray(Long_t*& l); Read array of longs from the I/O buffer. Returns the number of longs; read. If argument is a 0 pointer then space will be allocated for the; array. Int_t ReadArray(Long64_t*& l); Read array of long longs from the I/O buffer. Returns the number of; long longs read. If argument is a 0 pointer then space will be; allocated for the array. Int_t ReadArray(Float_t*& f); Read array of floats from the I/O buffer. Returns the number of floats; read. If argument is a 0 pointer then space will be allocated for the; array. Int_t ReadArray(Double_t*& d); Read array of doubles from the I/O buffer. Returns the number of doubles; read. If argument is a 0 pointer then space will be allocated for the; array. Int_t ReadArrayFloat16(Float_t*& f, TStreamerElement* ele = ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TBufferFile.html:27140,allocate,allocated,27140,root/html528/TBufferFile.html,https://root.cern,https://root.cern/root/html528/TBufferFile.html,6,['allocate'],['allocated']
Energy Efficiency," ). inline . Constructor from pt, eta, phi, e values. ; Definition at line 71 of file PtEtaPhiE4D.h. ◆ PtEtaPhiE4D() [3/4]. template<class ScalarType > . template<class CoordSystem > . constexpr ROOT::Math::PtEtaPhiE4D< ScalarType >::PtEtaPhiE4D ; (; const CoordSystem & ; c). inlineexplicitconstexpr . Generic constructor from any 4D coordinate system implementing Pt(), Eta(), Phi() and E() ; Definition at line 79 of file PtEtaPhiE4D.h. ◆ PtEtaPhiE4D() [4/4]. template<class ScalarType > . ROOT::Math::PtEtaPhiE4D< ScalarType >::PtEtaPhiE4D ; (; const PtEtaPhiE4D< ScalarType > & ; v). inline . copy constructor ; Definition at line 88 of file PtEtaPhiE4D.h. Member Function Documentation. ◆ E(). template<class ScalarType > . Scalar ROOT::Math::PtEtaPhiE4D< ScalarType >::E ; (; ); const. inline . Definition at line 135 of file PtEtaPhiE4D.h. ◆ Et(). template<class ScalarType > . Scalar ROOT::Math::PtEtaPhiE4D< ScalarType >::Et ; (; ); const. inline . transverse energy ; transverse energy ; Definition at line 233 of file PtEtaPhiE4D.h. ◆ Et2(). template<class ScalarType > . Scalar ROOT::Math::PtEtaPhiE4D< ScalarType >::Et2 ; (; ); const. inline . transverse energy squared ; Definition at line 241 of file PtEtaPhiE4D.h. ◆ Eta(). template<class ScalarType > . Scalar ROOT::Math::PtEtaPhiE4D< ScalarType >::Eta ; (; ); const. inline . Definition at line 133 of file PtEtaPhiE4D.h. ◆ GetCoordinates() [1/2]. template<class ScalarType > . void ROOT::Math::PtEtaPhiE4D< ScalarType >::GetCoordinates ; (; Scalar & ; pt, . Scalar & ; eta, . Scalar & ; phi, . Scalar & ; e . ); const. inline . get internal data into 4 Scalar numbers ; Definition at line 125 of file PtEtaPhiE4D.h. ◆ GetCoordinates() [2/2]. template<class ScalarType > . void ROOT::Math::PtEtaPhiE4D< ScalarType >::GetCoordinates ; (; Scalar ; dest[]); const. inline . get internal data into an array of 4 Scalar numbers ; Definition at line 112 of file PtEtaPhiE4D.h. ◆ M(). template<class ScalarType > . Scalar ROOT::Math::PtEt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1PtEtaPhiE4D.html:5382,energy,energy,5382,doc/master/classROOT_1_1Math_1_1PtEtaPhiE4D.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1PtEtaPhiE4D.html,2,['energy'],['energy']
Energy Efficiency," ). overridevirtual . Execute action corresponding to one event. ; This member function is called when a graph is clicked with the locator; If Left button clicked on one of the line end points, this point follows the cursor until button is released.; if Middle button clicked, the line is moved parallel to itself until the button is released. ; Reimplemented from TObject.; Definition at line 1056 of file TGraph.cxx. ◆ Expand() [1/2]. void TGraph::Expand ; (; Int_t ; newsize). virtual . If array sizes <= newsize, expand storage to 2*newsize. ; Definition at line 1065 of file TGraph.cxx. ◆ Expand() [2/2]. void TGraph::Expand ; (; Int_t ; newsize, . Int_t ; step . ). virtual . If graph capacity is less than newsize points then make array sizes equal to least multiple of step to contain newsize points. ; Definition at line 1075 of file TGraph.cxx. ◆ ExpandAndCopy(). Double_t ** TGraph::ExpandAndCopy ; (; Int_t ; size, . Int_t ; iend . ). protected . if size > fMaxSize allocate new arrays of 2*size points and copy iend first points. ; Return pointer to new arrays. ; Definition at line 1089 of file TGraph.cxx. ◆ FillZero(). void TGraph::FillZero ; (; Int_t ; begin, . Int_t ; end, . Bool_t ; from_ctor = kTRUE . ). protectedvirtual . Set zero values for point arrays in the range [begin, end) Should be redefined in descendant classes. ; Reimplemented in TGraphAsymmErrors, TGraphBentErrors, TGraphErrors, and TGraphMultiErrors.; Definition at line 1102 of file TGraph.cxx. ◆ FindObject() [1/2]. TObject * TGraph::FindObject ; (; const char * ; name); const. overridevirtual . Search object named name in the list of functions. ; Reimplemented from TObject.; Definition at line 1111 of file TGraph.cxx. ◆ FindObject() [2/2]. TObject * TGraph::FindObject ; (; const TObject * ; obj); const. overridevirtual . Search object obj in the list of functions. ; Reimplemented from TObject.; Definition at line 1119 of file TGraph.cxx. ◆ Fit() [1/2]. TFitResultPtr TGraph::Fit ; (; const char * ; f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraph.html:45164,allocate,allocate,45164,doc/master/classTGraph.html,https://root.cern,https://root.cern/doc/master/classTGraph.html,1,['allocate'],['allocate']
Energy Efficiency," ); 309 */; 310 Scalar R() const { return fCoordinates.R(); }; 311 Scalar P() const { return fCoordinates.R(); }; 312 /**; 313 return the square of the spatial (3D) magnitude ( X**2 + Y**2 + Z**2 ); 314 */; 315 Scalar P2() const { return P() * P(); }; 316 /**; 317 return the square of the transverse spatial component ( X**2 + Y**2 ); 318 */; 319 Scalar Perp2( ) const { return fCoordinates.Perp2();}; 320 ; 321 /**; 322 return the transverse spatial component sqrt ( X**2 + Y**2 ); 323 */; 324 Scalar Pt() const { return fCoordinates.Pt(); }; 325 Scalar Rho() const { return fCoordinates.Pt(); }; 326 ; 327 /**; 328 return the transverse mass squared; 329 \f[ m_t^2 = E^2 - p{_z}^2 \f]; 330 */; 331 Scalar Mt2() const { return fCoordinates.Mt2(); }; 332 ; 333 /**; 334 return the transverse mass; 335 \f[ \sqrt{ m_t^2 = E^2 - p{_z}^2} X sign(E^ - p{_z}^2) \f]; 336 */; 337 Scalar Mt() const { return fCoordinates.Mt(); }; 338 ; 339 /**; 340 return the transverse energy squared; 341 \f[ e_t = \frac{E^2 p_{\perp}^2 }{ |p|^2 } \f]; 342 */; 343 Scalar Et2() const { return fCoordinates.Et2(); }; 344 ; 345 /**; 346 return the transverse energy; 347 \f[ e_t = \sqrt{ \frac{E^2 p_{\perp}^2 }{ |p|^2 } } X sign(E) \f]; 348 */; 349 Scalar Et() const { return fCoordinates.Et(); }; 350 ; 351 /**; 352 azimuthal Angle; 353 */; 354 Scalar Phi() const { return fCoordinates.Phi();}; 355 ; 356 /**; 357 polar Angle; 358 */; 359 Scalar Theta() const { return fCoordinates.Theta(); }; 360 ; 361 /**; 362 pseudorapidity; 363 \f[ \eta = - \ln { \tan { \frac { \theta} {2} } } \f]; 364 */; 365 Scalar Eta() const { return fCoordinates.Eta(); }; 366 ; 367 /**; 368 get the spatial components of the Vector in a; 369 DisplacementVector based on Cartesian Coordinates; 370 */; 371 ::ROOT::Math::DisplacementVector3D<Cartesian3D<Scalar> > Vect() const {; 372 return ::ROOT::Math::DisplacementVector3D<Cartesian3D<Scalar> >( X(), Y(), Z() );; 373 }; 374 ; 375 // ------ Operations combining two Lorentz vectors ------; 3",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/GenVector_2LorentzVector_8h_source.html:11243,energy,energy,11243,doc/master/GenVector_2LorentzVector_8h_source.html,https://root.cern,https://root.cern/doc/master/GenVector_2LorentzVector_8h_source.html,1,['energy'],['energy']
Energy Efficiency," *sender, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  . Protected Attributes; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  . Static Protected Attributes; static Bool_t fgAllSignalsBlocked = kFALSE;  flag used for suppression of signals ;  . Private Member Functions;  TQObject (const TQObject &)=delete;  ; TQObject & operator= (const TQObject &)=delete;  . #include <TQObject.h>. Inheritance diagram for TQObject:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TQObject() [1/2]. TQObject::TQObject ; (; const TQObject & ; ). privatedelete . ◆ TQObject() [2/2]. TQObject::TQObject ; (; ). TQObject Constructor. ; Comment:; In order to minimize memory allocation fListOfSignals and fListOfConnections are allocated only if it is neccesary; When fListOfSignals/fListOfConnections are empty they will be deleted . Definition at line 393 of file TQObject.cxx. ◆ ~TQObject(). TQObject::~TQObject ; (; ). virtual . TQObject Destructor. . delete all connections and signal list . Definition at line 404 of file TQObject.cxx. Member Function Documentation. ◆ AreAllSignalsBlocked(). Bool_t TQObject::AreAllSignalsBlocked ; (; ). static . Returns true if all signals are blocked. ; Definition at line 1049 of file TQObject.cxx. ◆ AreSignalsBlocked(). Bool_t TQObject::AreSignalsBlocked ; (; ); const. inline . Definition at line 91 of file TQObject.h. ◆ BlockAllSignals(). Bool_t TQObject::BlockAllSignals ; (; Bool_t ; b). static . Block or unblock all signals. Returns the previous block status. ; Definition at line 1057 of file TQObject.cxx. ◆ BlockSignals(). Bool_t TQObject::BlockSignals ; (; Bool_t ; b). inline . Definition at line 92 of file TQObject.h. ◆ ChangedBy(). virtual void TQObject::ChangedBy ; (; con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTQObject.html:7042,allocate,allocated,7042,doc/master/classTQObject.html,https://root.cern,https://root.cern/doc/master/classTQObject.html,1,['allocate'],['allocated']
Energy Efficiency," *signal, void *receiver=nullptr, const char *slot=nullptr);  Disconnects ""class signal"". ;  ; static Bool_t Disconnect (TQObject *sender, const char *signal=nullptr, void *receiver=nullptr, const char *slot=nullptr);  Disconnects signal in object sender from slot_method in object receiver. ;  . Protected Member Functions; Bool_t HandleTimer (TTimer *timer) override;  Send progress and feedback to client. ;  ; void SetupFeedback () override;  Setup reporting of feedback objects and progress messages. ;  ;  Protected Member Functions inherited from TProofPlayerRemote; TProof * GetProof () const;  ; Int_t InitPacketizer (TDSet *dset, Long64_t nentries, Long64_t first, const char *defpackunit, const char *defpackdata);  Init the packetizer Return 0 on success (fPacketizer is correctly initialized), -1 on failure. ;  ; TList * MergeFeedback ();  Merge feedback lists. ;  ; Bool_t MergeOutputFiles ();  Merge output in files. ;  ; void NotifyMemory (TObject *obj);  Printout the memory record after merging object 'obj' This record is used by the memory monitor. ;  ; virtual Bool_t SendSelector (const char *selector_file);  Send the selector file(s) to master or worker nodes. ;  ; void SetLastMergingMsg (TObject *obj);  Set the message to be notified in case of exception. ;  ; void SetSelectorDataMembersFromOutputList ();  Set the selector's data members: find the mapping of data members to otuput list entries in the output list and apply it. ;  ; void StopFeedback () override;  Stop reporting of feedback objects. ;  ;  Protected Member Functions inherited from TProofPlayer; Int_t AssertSelector (const char *selector_file);  Make sure that a valid selector object Return -1 in case of problems, 0 otherwise. ;  ; Bool_t CheckMemUsage (Long64_t &mfreq, Bool_t &w80r, Bool_t &w80v, TString &wmsg);  Check the memory usage, if requested. ;  ; virtual Int_t DrawCanvas (TObject *obj);  Draw the object if it is a canvas. ;  ; void * GetSender () override;  ; void MapOutputListToDataMem",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofPlayerSuperMaster.html:20566,monitor,monitor,20566,doc/master/classTProofPlayerSuperMaster.html,https://root.cern,https://root.cern/doc/master/classTProofPlayerSuperMaster.html,1,['monitor'],['monitor']
Energy Efficiency," *start=nullptr, UInt_t *bcnt=nullptr, const TClass *cl=nullptr)=0; TBuffer::SetByteCountvirtual void SetByteCount(UInt_t cntpos, Bool_t packInVersion=kFALSE)=0; TBuffer::EModeEModeDefinition TBuffer.h:73; TBuffer::kWrite@ kWriteDefinition TBuffer.h:73; TBuffer::CheckByteCountvirtual Int_t CheckByteCount(UInt_t startpos, UInt_t bcnt, const TClass *clss)=0; TBuffer::IsReadingBool_t IsReading() constDefinition TBuffer.h:86; TBuffer::ResetMapvirtual void ResetMap()=0; TBuffer::SetBufferOffsetvoid SetBufferOffset(Int_t offset=0)Definition TBuffer.h:93; TBuffer::SetReadModevoid SetReadMode()Set buffer in read mode.Definition TBuffer.cxx:302; TBuffer::WriteVersionvirtual UInt_t WriteVersion(const TClass *cl, Bool_t useBcnt=kFALSE)=0; TBuffer::MapObjectvirtual void MapObject(const TObject *obj, UInt_t offset=1)=0; TClassTClass instances represent classes, structs and namespaces in the ROOT type system.Definition TClass.h:81; TClass::Newvoid * New(ENewType defConstructor=kClassNew, Bool_t quiet=kFALSE) constReturn a pointer to a newly allocated object of this class.Definition TClass.cxx:5045; TClass::GetDirectoryAutoAddROOT::DirAutoAdd_t GetDirectoryAutoAdd() constReturn the wrapper around the directory auto add function.Definition TClass.cxx:7554; TClass::IsTObjectBool_t IsTObject() constReturn kTRUE is the class inherits from TObject.Definition TClass.cxx:6005; TClass::InheritsFromBool_t InheritsFrom(const char *cl) const overrideReturn kTRUE if this class inherits from a class with name ""classname"".Definition TClass.cxx:4941; TClass::GetBaseClassOffsetInt_t GetBaseClassOffset(const TClass *toBase, void *address=nullptr, bool isDerivedObject=true)Definition TClass.cxx:2858; TClass::GetClassstatic TClass * GetClass(const char *name, Bool_t load=kTRUE, Bool_t silent=kFALSE)Static method returning pointer to TClass of the specified class name.Definition TClass.cxx:3035; TCollection::Classstatic TClass * Class(); TCollection::UseRWLockvirtual bool UseRWLock(Bool_t enable=true",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TDirectory_8cxx_source.html:56636,allocate,allocated,56636,doc/master/TDirectory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TDirectory_8cxx_source.html,1,['allocate'],['allocated']
Energy Efficiency," *totyz));; ; // P l o t d a t a w i t h a L L r a t i o c u t; // -------------------------------------------------------; ; // Calculate the llratio value for each event in the dataset; data->addColumn(llratio_func);; ; // Extract the subset of data with large signal likelihood; std::unique_ptr<RooAbsData> dataSel{data->reduce(Cut(""llratio>0.7""))};; ; // Make plot frame; RooPlot *frame2 = x.frame(Title(""Same projection on X with LLratio(y,z)>0.7""), Bins(40));; ; // Plot select data on frame; dataSel->plotOn(frame2);; ; // M a k e M C p r o j e c t i o n o f p d f w i t h s a m e L L r a t i o c u t; // ---------------------------------------------------------------------------------------------; ; // Generate large number of events for MC integration of pdf projection; std::unique_ptr<RooDataSet> mcprojData{model.generate({x, y, z}, 10000)};; ; // Calculate LL ratio for each generated event and select MC events with llratio)0.7; mcprojData->addColumn(llratio_func);; std::unique_ptr<RooAbsData> mcprojDataSel{mcprojData->reduce(Cut(""llratio>0.7""))};; ; // Project model on x, integrating projected observables (y,z) with Monte Carlo technique; // on set of events with the same llratio cut as was applied to data; model.plotOn(frame2, ProjWData(*mcprojDataSel));; ; TCanvas *c = new TCanvas(""rf316_llratioplot"", ""rf316_llratioplot"", 800, 400);; c->Divide(2);; c->cd(1);; gPad->SetLeftMargin(0.15);; frame->GetYaxis()->SetTitleOffset(1.4);; frame->Draw();; c->cd(2);; gPad->SetLeftMargin(0.15);; frame2->GetYaxis()->SetTitleOffset(1.4);; frame2->Draw();; }; c#define c(i)Definition RSha256.hxx:101; RooAddPdf.h; RooDataSet.h; RooGaussian.h; RooPlot.h; RooPolynomial.h; RooProdPdf.h; RooRealVar.h; TAxis.h; TCanvas.h; dataOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void dataDefinition TGWin32VirtualXProxy.cxx:104; gPad#define gPadDefinition TVirtualPad.h:308; RooAbsPdfAbstract",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf316__llratioplot_8C.html:3439,reduce,reduce,3439,doc/master/rf316__llratioplot_8C.html,https://root.cern,https://root.cern/doc/master/rf316__llratioplot_8C.html,1,['reduce'],['reduce']
Energy Efficiency," *track = (TTrack*)a.ConstructedAt(i);; track->Set(x,y,z,....);. }. a.Clear(); // or a.Clear(""C"");; }. Note: the only supported way to add objects to a TClonesArray is; via the new with placement method or the ConstructedAt method.; The other Add() methods ofTObjArray and its base classes are not; allowed. Considering that a new/delete costs about 70 mus on a 300 MHz HP,; O(10^9) new/deletes will save about 19 hours. NOTE 1. C/C++ offers the possibility of allocating and deleting memory.; Forgetting to delete allocated memory is a programming error called a; ""memory leak"", i.e. the memory of your process grows and eventually; your program crashes. Even if you *always* delete the allocated; memory, the recovered space may not be efficiently reused. The; process knows that there are portions of free memory, but when you; allocate it again, a fresh piece of memory is grabbed. Your program; is free from semantic errors, but the total memory of your process; still grows, because your program's memory is full of ""holes"" which; reduce the efficiency of memory access; this is called ""memory; fragmentation"". Moreover new / delete are expensive operations in; terms of CPU time. Without entering into technical details, TClonesArray allows you to; ""reuse"" the same portion of memory for new/delete avoiding memory; fragmentation and memory growth and improving the performance by; orders of magnitude. Every time the memory of the TClonesArray has; to be reused, the Clear() method is used. To provide its benefits,; each TClonesArray must be allocated *once* per process and disposed; of (deleted) *only when not needed any more*. So a job should see *only one* deletion for each TClonesArray,; which should be Clear()ed during the job several times. Deleting a; TClonesArray is a double waste. Not only you do not avoid memory; fragmentation, but you worsen it because the TClonesArray itself; is a rather heavy structure, and there is quite some code in the; destructor, so you have more me",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TClonesArray.html:2630,reduce,reduce,2630,root/html532/TClonesArray.html,https://root.cern,https://root.cern/root/html532/TClonesArray.html,4,['reduce'],['reduce']
Energy Efficiency," , kIsZoomed = (1ULL << ( 16 )); , ;   kNoTitle = (1ULL << ( 17 )); , kIsAverage = (1ULL << ( 18 )); , kIsNotW = (1ULL << ( 19 )); , kAutoBinPTwo = (1ULL << ( 20 )); , ;   kIsHighlight = (1ULL << ( 21 )). };  TH1 status bits. More...;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from TH1; static Int_t AutoP2GetBins (Int_t n);  Auxiliary function to get the next power of 2 integer value larger then n. ;  ; static Double_t AutoP2GetPower2 (Double_t x, Bool_t next=kTRUE);  Auxiliary function to get the power of 2 next (larger) or previous (smaller) a given x. ;  ; static bool CheckAxisLimits (const TAxis *a1, const TAxis *a2);  Check that the axis limits of the histograms are the same. ;  ; static bool CheckBinLabels (const TAxis *a1, const TAxis *a2);  Check that axis have same labels. ;  ; static bool CheckBinLimits (const TAxis *a1, const TAxis *a2);  Check bin limits. ;  ; static int CheckConsistency (const TH1 *h1, const TH1 *h2);  Check histogram compatibility. ;  ; static bool CheckConsistentSubAxes (const TAxis *a1, Int_t firstBin1, Int_t lastBin1, const TAxis *a2, Int_t firstBin2=0, Int_t lastBin2=0);  Check that two sub axis are the same. ;  ; static bool CheckEqualAxes (const TAxis *a1, const TAxis *a2);  Check that the axis are the same. ;  ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH2.html:55256,power,power,55256,doc/master/classTH2.html,https://root.cern,https://root.cern/doc/master/classTH2.html,1,['power'],['power']
Energy Efficiency," , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TMonitor (Bool_t mainloop=kTRUE);  Create a monitor object. ;  ;  TMonitor (const TMonitor &m);  Copy constructor. ;  ; virtual ~TMonitor ();  Cleanup the monitor object. Does not delete sockets being monitored. ;  ; virtual void Activate (TSocket *sock);  Activate a de-activated socket. ;  ; virtual void ActivateAll ();  Activate all de-activated sockets. ;  ; virtual void Add (TSocket *sock, Int_t interest=kRead);  Add socket to the monitor's active list. ;  ; virtual void DeActivate (TSocket *sock);  De-activate a socket. ;  ; virtual void DeActivateAll ();  De-activate all activated sockets. ;  ; Int_t GetActive (Long_t timeout=-1) const;  Return number of sockets in the active list. ;  ; Int_t GetDeActive () const;  Return number of sockets in the de-active list. ;  ; TList * GetListOfActives () const;  Returns a list with all active sockets. ;  ; TList * GetListOfDeActives () const;  Returns a list with all de-active sockets. ;  ; void Interrupt ();  ; TClass * IsA () const override;  ; Bool_t IsActive (TSocket *s) const;  Check if socket 's' is in the active list. ;  ; virtual void Ready (TSocket *sock);  Emit signal when some socket is ready. ;  ; virtual void Remove (TSocket *sock);  Remove a socket from the monitor. ;  ; virtual void RemoveAll ();  Remove all sockets from the monitor. ;  ; void ResetInterrupt ();  ; TSocket * Select ();  Return pointer to socket for which an ev",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMonitor.html:1534,monitor,monitor,1534,doc/master/classTMonitor.html,https://root.cern,https://root.cern/doc/master/classTMonitor.html,1,['monitor'],['monitor']
Energy Efficiency," . CallFunc_t * ; callfunc, . Longptr_t ; offset = 0 . ). Create a method invocation environment for a specific class, method described by the callfunc. ; Definition at line 49 of file TMethodCall.cxx. ◆ TMethodCall() [3/6]. TMethodCall::TMethodCall ; (; TClass * ; cl, . const char * ; method, . const char * ; params . ). Create a method invocation environment for a specific class, method and parameters. ; The parameter string has the form: ""\""aap\"", 3, 4.35"". To execute the method call TMethodCall::Execute(object,...). This two step method is much more efficient than calling for every invocation TInterpreter::Execute(...). ; Definition at line 62 of file TMethodCall.cxx. ◆ TMethodCall() [4/6]. TMethodCall::TMethodCall ; (; const char * ; function, . const char * ; params . ). Create a global function invocation environment. ; The parameter string has the form: ""\""aap\"", 3, 4,35"". To execute the function call TMethodCall::Execute(...). This two step method is much more efficient than calling for every invocation TInterpreter::Execute(...). ; Definition at line 75 of file TMethodCall.cxx. ◆ TMethodCall() [5/6]. TMethodCall::TMethodCall ; (; const TFunction * ; func). Create a global function invocation environment base on a TFunction object. ; To execute the function call TMethodCall::Execute(...). This two step method is much more efficient than calling for every invocation TInterpreter::Execute(...). ; Definition at line 87 of file TMethodCall.cxx. ◆ TMethodCall() [6/6]. TMethodCall::TMethodCall ; (; const TMethodCall & ; org). Copy ctor. ; Definition at line 95 of file TMethodCall.cxx. ◆ ~TMethodCall(). TMethodCall::~TMethodCall ; (; ). TMethodCall dtor. ; Definition at line 130 of file TMethodCall.cxx. Member Function Documentation. ◆ CallDtorOnly(). void TMethodCall::CallDtorOnly ; (; Bool_t ; set = kTRUE). inline . Definition at line 87 of file TMethodCall.h. ◆ Class(). static TClass * TMethodCall::Class ; (; ). static . ReturnsTClass describing this class . ◆ ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMethodCall.html:17094,efficient,efficient,17094,doc/master/classTMethodCall.html,https://root.cern,https://root.cern/doc/master/classTMethodCall.html,1,['efficient'],['efficient']
Energy Efficiency," . Int_t ; fieldcount . ). Single row of query result. ; Definition at line 22 of file TODBCRow.cxx. ◆ ~TODBCRow(). TODBCRow::~TODBCRow ; (; ). virtual . Destroy row object. ; Definition at line 44 of file TODBCRow.cxx. Member Function Documentation. ◆ Class(). static TClass * TODBCRow::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TODBCRow::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TODBCRow::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 50 of file TODBCRow.h. ◆ Close(). void TODBCRow::Close ; (; Option_t * ; opt = """"). finalvirtual . Close row. ; Implements TSQLRow.; Definition at line 52 of file TODBCRow.cxx. ◆ CopyFieldValue(). void TODBCRow::CopyFieldValue ; (; Int_t ; field). protected . Extracts field value from statement. ; First allocates 128 bytes for buffer. If there is not enouth space, bigger buffer is allocated and request is repeated ; Definition at line 73 of file TODBCRow.cxx. ◆ DeclFileName(). static const char * TODBCRow::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 50 of file TODBCRow.h. ◆ GetField(). const char * TODBCRow::GetField ; (; Int_t ; field). finalvirtual . Get specified field from row (0 <= field < GetFieldCount()). ; Implements TSQLRow.; Definition at line 125 of file TODBCRow.cxx. ◆ GetFieldLength(). ULong_t TODBCRow::GetFieldLength ; (; Int_t ; field). finalvirtual . Get length in bytes of specified field. ; Implements TSQLRow.; Definition at line 114 of file TODBCRow.cxx. ◆ IsA(). TClass * TODBCRow::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 50 of file TODBCRow.h. ◆ operator=(). TODBCRow & TODBCRow::operator= ; (; const TODBCRow & ; ). privatedelete . ◆ Streamer(). void TODBCRow::Streamer ; (; TBuffer & ; R__b). overri",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTODBCRow.html:12428,allocate,allocated,12428,doc/master/classTODBCRow.html,https://root.cern,https://root.cern/doc/master/classTODBCRow.html,1,['allocate'],['allocated']
Energy Efficiency," . MinimizerType ; _eMinimizerType = MinimizerType::fSteepest, . double ; _learningRate = 1e-5, . double ; _momentum = 0.3, . int ; _repetitions = 3, . bool ; _multithreading = true . ). c'tor ; Definition at line 232 of file NeuralNet.cxx. ◆ ~Settings(). TMVA::DNN::Settings::~Settings ; (; ). virtual . d'tor ; Definition at line 261 of file NeuralNet.cxx. Member Function Documentation. ◆ addPoint() [1/2]. void TMVA::DNN::Settings::addPoint ; (; std::string ; histoName, . double ; x . ). inline . for monitoring ; Definition at line 821 of file NeuralNet.h. ◆ addPoint() [2/2]. void TMVA::DNN::Settings::addPoint ; (; std::string ; histoName, . double ; x, . double ; y . ). inline . for monitoring ; Definition at line 822 of file NeuralNet.h. ◆ batchSize(). size_t TMVA::DNN::Settings::batchSize ; (; ); const. inline . mini-batch size ; Definition at line 767 of file NeuralNet.h. ◆ clear(). void TMVA::DNN::Settings::clear ; (; std::string ; histoName). inline . for monitoring ; Definition at line 824 of file NeuralNet.h. ◆ computeResult(). virtual void TMVA::DNN::Settings::computeResult ; (; const Net & ; , . std::vector< double > & ;  . ). inlinevirtual . callback for monitoring and logging ; Definition at line 809 of file NeuralNet.h. ◆ convergenceCount(). size_t TMVA::DNN::Settings::convergenceCount ; (; ); const. inline . returns the current convergence count ; Definition at line 827 of file NeuralNet.h. ◆ convergenceSteps(). size_t TMVA::DNN::Settings::convergenceSteps ; (; ); const. inline . how many steps until training is deemed to have converged ; Definition at line 766 of file NeuralNet.h. ◆ create() [1/2]. void TMVA::DNN::Settings::create ; (; std::string ; histoName, . int ; bins, . double ; min, . double ; max . ). inline . for monitoring ; Definition at line 819 of file NeuralNet.h. ◆ create() [2/2]. void TMVA::DNN::Settings::create ; (; std::string ; histoName, . int ; bins, . double ; min, . double ; max, . int ; bins2, . double ; min2, . double ; max2 . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1Settings.html:6115,monitor,monitoring,6115,doc/master/classTMVA_1_1DNN_1_1Settings.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1Settings.html,1,['monitor'],['monitoring']
Energy Efficiency," . ReturnsVersion of this class ; Definition at line 61 of file TSystemFile.h. ◆ Copy() [1/2]. void TSystemFile::Copy ; (; const char * ; to). virtual . copy this file ; Reimplemented in TSystemDirectory.; Definition at line 102 of file TSystemFile.cxx. ◆ Copy() [2/2]. void TSystemFile::Copy ; (; TObject & ; named); const. inlineoverridevirtual . Copy this to obj. ; Reimplemented from TNamed.; Definition at line 59 of file TSystemFile.h. ◆ DeclFileName(). static const char * TSystemFile::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 61 of file TSystemFile.h. ◆ Delete() [1/2]. void TSystemFile::Delete ; (; ). virtual . delete this file ; Reimplemented in TSystemDirectory.; Definition at line 154 of file TSystemFile.cxx. ◆ Delete() [2/2]. void TSystemFile::Delete ; (; Option_t * ; option). inlineoverridevirtual . Delete this object. ; Typically called as a command via the interpreter. Normally use ""delete"" operator when object has been allocated on the heap. ; Reimplemented from TObject.; Definition at line 58 of file TSystemFile.h. ◆ DrawClass(). void TSystemFile::DrawClass ; (; ); const. inlineoverridevirtual . Draw class inheritance tree of the class to which this object belongs. ; If a class B inherits from a class A, description of B is drawn on the right side of description of A. Member functions overridden by B are shown in class A with a blue line crossing-out the corresponding member function. The following picture is the class inheritance tree of class TPaveLabel:. Reimplemented from TObject.; Definition at line 53 of file TSystemFile.h. ◆ DrawClone(). TObject * TSystemFile::DrawClone ; (; Option_t * ; option); const. inlineoverridevirtual . Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ; If pad was not selected - gPad will be used. ; Reimplemented from TObject.; Definition at line 54 of file TSystemFile.h. ◆ Dump(). void TSystemFile::Dump ; (; ); co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSystemFile.html:13995,allocate,allocated,13995,doc/master/classTSystemFile.html,https://root.cern,https://root.cern/doc/master/classTSystemFile.html,1,['allocate'],['allocated']
Energy Efficiency," . [private] (does some specific error handling that makes the function unsuitable for general use.) returns a new'd TClass given the name of a class. ; user must delete. returns 0 in case of error. ; Definition at line 2206 of file TTabCom.cxx. ◆ MakeClassFromVarName(). TClass * TTabCom::MakeClassFromVarName ; (; const char ; varName[], . EContext_t & ; context, . int ; iter = 0 . ). private . [private] (does some specific error handling that makes the function unsuitable for general use.) returns a new'd TClass given the name of a variable. ; user must delete. returns 0 in case of error. if user has operator.() or operator->() backwards, will modify: context, *fpLoc and fBuf. context sensitive behavior. ; Definition at line 2255 of file TTabCom.cxx. ◆ NewListOfFilesInPath(). TSeqCollection * TTabCom::NewListOfFilesInPath ; (; const char ; path1[]). static . [static utility function]///////////////////////////// ; creates a list containing the full path name for each file in the (colon separated) string ""path1""; memory is allocated with ""new"", so whoever calls this function takes responsibility for deleting it. ; Definition at line 1049 of file TTabCom.cxx. ◆ NoMsg(). void TTabCom::NoMsg ; (; Int_t ; errorLevel). static . [static utility function]///////////////////////////// ; calling ""NoMsg( errorLevel )"", sets ""gErrorIgnoreLevel"" to ""errorLevel+1"" so that all errors with ""level < errorLevel"" will be ignored.; calling the function with a negative argument (e.g., ""NoMsg( -1 )"") resets gErrorIgnoreLevel to its previous value. ; Definition at line 1108 of file TTabCom.cxx. ◆ operator=(). TTabCom & TTabCom::operator= ; (; const TTabCom & ; ). privatedelete . ◆ ParseReverse(). int TTabCom::ParseReverse ; (; const char * ; var_str, . int ; start . ). private . Returns the place in the string where to put the \0, starting the search from ""start"". ; Definition at line 2565 of file TTabCom.cxx. ◆ PathIsSpecifiedInFileName(). Bool_t TTabCom::PathIsSpecifiedInFileName ; (; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTabCom.html:16328,allocate,allocated,16328,doc/master/classTTabCom.html,https://root.cern,https://root.cern/doc/master/classTTabCom.html,1,['allocate'],['allocated']
Energy Efficiency," . std::string_view ; ntupleName, . std::string_view ; storage, . const RNTupleWriteOptions & ; options = RNTupleWriteOptions() . ). static . Definition at line 79 of file RNTupleWriter.cxx. ◆ Recreate() [2/2]. std::unique_ptr< ROOT::Experimental::RNTupleWriter > ROOT::Experimental::RNTupleWriter::Recreate ; (; std::unique_ptr< RNTupleModel > ; model, . std::string_view ; ntupleName, . std::string_view ; storage, . const RNTupleWriteOptions & ; options = RNTupleWriteOptions() . ). static . Throws an exception if the model is null. ; Definition at line 71 of file RNTupleWriter.cxx. Friends And Related Symbol Documentation. ◆ Internal::CreateRNTupleWriter. std::unique_ptr< RNTupleWriter > Internal::CreateRNTupleWriter ; (; std::unique_ptr< RNTupleModel > ; , . std::unique_ptr< Internal::RPageSink > ;  . ). friend . Member Data Documentation. ◆ fFillContext. RNTupleFillContext ROOT::Experimental::RNTupleWriter::fFillContext. private . Definition at line 69 of file RNTupleWriter.hxx. ◆ fLastCommittedClusterGroup. NTupleSize_t ROOT::Experimental::RNTupleWriter::fLastCommittedClusterGroup = 0. private . Definition at line 72 of file RNTupleWriter.hxx. ◆ fMetrics. Detail::RNTupleMetrics ROOT::Experimental::RNTupleWriter::fMetrics. private . Definition at line 70 of file RNTupleWriter.hxx. ◆ fZipTasks. std::unique_ptr<Internal::RPageStorage::RTaskScheduler> ROOT::Experimental::RNTupleWriter::fZipTasks. private . The page sink's parallel page compression scheduler if IMT is on. ; Needs to be destructed after the page sink (in the fill context) is destructed and so declared before. ; Definition at line 68 of file RNTupleWriter.hxx. Libraries for ROOT::Experimental::RNTupleWriter:. [legend]; The documentation for this class was generated from the following files:; tree/ntuple/v7/inc/ROOT/RNTupleWriter.hxx; tree/ntuple/v7/src/RNTupleWriter.cxx. ROOTExperimentalRNTupleWriter. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:11 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleWriter.html:12893,schedul,scheduler,12893,doc/master/classROOT_1_1Experimental_1_1RNTupleWriter.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleWriter.html,1,['schedul'],['scheduler']
Energy Efficiency," / 100); TMap*TVirtualPacketizer::fSlaveStatsslave status, keyed by correspondig TSlave; TTimeTVirtualPacketizer::fStartTimetime offset; Bool_tTVirtualPacketizer::fStopTermination of Process() requested?; Float_tTVirtualPacketizer::fTimeUpdttime between updates; Long64_tTVirtualPacketizer::fTotalEntriestotal number of entries to be distributed;; TVirtualPacketizer::EUseEstOptTVirtualPacketizer::fUseEstOptControl usage of estimated values for the progress info; Bool_tTVirtualPacketizer::fValidConstructed properly?. private:. TList*fActivenodes with unfinished files; Float_tfBaseLocalPreferenceindicates how much more likely the nodes will be; Bool_tfCachePacketSynccontrol synchronization of cache and packet sizes; TList*fFileNodesnodes with files; TSortedList*fFilesToProcessGlobal list of files (TFileStat) to be processed; Bool_tfForceLocalif 1 - eliminate the remote processing; Float_tfFractionOfRemoteFilesfraction of TDSetElements that are on non-workers; Double_tfMaxEntriesRatiomax file entries to avg allowed ratio for cache-to-packet sync; Int_tfMaxPerfIdxmaximum of our slaves' performance index; Long_tfMaxSlaveCntmaximum number of workers per filenode (Long_t to avoid; Long64_tfNEventsOnRemLocnumber of events in currently; Int_tfPacketAsAFractionused to calculate the packet size; TList*fPartitionslist of partitions on nodes; Int_tfStrategy0 means the classic and 1 (default) - the adaptive strategy; TList*fUnAllocatednodes with unallocated files. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TPacketizerAdaptive(TDSet* dset, TList* slaves, Long64_t first, Long64_t num, TList* input, TProofProgressStatus* st); Constructor. ~TPacketizerAdaptive(); Destructor. void InitStats(); (re)initialise the statistics; called at the begining or after a worker dies. void RemoveUnAllocNode(TPacketizerAdaptive::TFileNode* ); Remove unallocated node. void RemoveActive(TPacketizerAdaptive::TFileStat* file); Remove file from the list of acti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TPacketizerAdaptive.html:11389,adapt,adaptive,11389,root/html528/TPacketizerAdaptive.html,https://root.cern,https://root.cern/root/html528/TPacketizerAdaptive.html,1,['adapt'],['adaptive']
Energy Efficiency," / signal+background probability; llratio_func = ROOT.RooFormulaVar(""llratio"", ""log10(@0)-log10(@1)"", [sigyz, totyz]); ; # Plot data with a LL ratio cut; # -------------------------------------------------------; ; # Calculate the llratio value for each event in the dataset; data.addColumn(llratio_func); ; # Extract the subset of data with large signal likelihood; dataSel = data.reduce(Cut=""llratio>0.7""); ; # Make plot frame; frame2 = x.frame(Title=""Same projection on X with LLratio(y,z)>0.7"", Bins=40); ; # Plot select data on frame; dataSel.plotOn(frame2); ; # Make MC projection of pdf with same LL ratio cut; # ---------------------------------------------------------------------------------------------; ; # Generate large number of events for MC integration of pdf projection; mcprojData = model.generate({x, y, z}, 10000); ; # Calculate LL ratio for each generated event and select MC events with; # llratio)0.7; mcprojData.addColumn(llratio_func); mcprojDataSel = mcprojData.reduce(Cut=""llratio>0.7""); ; # Project model on x, projected observables (y,z) with Monte Carlo technique; # on set of events with the same llratio cut as was applied to data; model.plotOn(frame2, ProjWData=mcprojDataSel); ; c = ROOT.TCanvas(""rf316_llratioplot"", ""rf316_llratioplot"", 800, 400); c.Divide(2); c.cd(1); ROOT.gPad.SetLeftMargin(0.15); frame.GetYaxis().SetTitleOffset(1.4); frame.Draw(); c.cd(2); ROOT.gPad.SetLeftMargin(0.15); frame2.GetYaxis().SetTitleOffset(1.4); frame2.Draw(); c.SaveAs(""rf316_llratioplot.png""); [#1] INFO:Plotting -- RooAbsReal::plotOn(model) plot on x integrates over variables (y,z); [#1] INFO:Plotting -- RooAbsReal::plotOn(model) plot on x averages using data variables (y,z); [#1] INFO:Plotting -- RooAbsReal::plotOn(model) only the following components of the projection data will be used: (y,z); [#1] INFO:Fitting -- using CPU computation library compiled with -mavx2; DateFebruary 2018 ; AuthorsClemens Lange, Wouter Verkerke (C++ version) ; Definition in file rf316_ll",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf316__llratioplot_8py.html:2936,reduce,reduce,2936,doc/master/rf316__llratioplot_8py.html,https://root.cern,https://root.cern/doc/master/rf316__llratioplot_8py.html,1,['reduce'],['reduce']
Energy Efficiency," // Plum; 3415 case 94:; 3416 {; 3417 Double_t red[9] = { 0./255., 38./255., 60./255., 76./255., 84./255., 89./255., 101./255., 128./255., 204./255.};; 3418 Double_t green[9] = { 0./255., 10./255., 15./255., 23./255., 35./255., 57./255., 83./255., 123./255., 199./255.};; 3419 Double_t blue[9] = { 0./255., 11./255., 22./255., 40./255., 63./255., 86./255., 97./255., 94./255., 85./255.};; 3420 Idx = TColor::CreateGradientColorTable(9, stops, red, green, blue, 255, alpha);; 3421 }; 3422 break;; 3423 ; 3424 // Red Blue; 3425 case 95:; 3426 {; 3427 Double_t red[9] = { 94./255., 112./255., 141./255., 165./255., 167./255., 140./255., 91./255., 49./255., 27./255.};; 3428 Double_t green[9] = { 27./255., 46./255., 88./255., 135./255., 166./255., 161./255., 135./255., 97./255., 58./255.};; 3429 Double_t blue[9] = { 42./255., 52./255., 81./255., 106./255., 139./255., 158./255., 155./255., 137./255., 116./255.};; 3430 Idx = TColor::CreateGradientColorTable(9, stops, red, green, blue, 255, alpha);; 3431 }; 3432 break;; 3433 ; 3434 // Rose; 3435 case 96:; 3436 {; 3437 Double_t red[9] = { 30./255., 49./255., 79./255., 117./255., 135./255., 151./255., 146./255., 138./255., 147./255.};; 3438 Double_t green[9] = { 63./255., 60./255., 72./255., 90./255., 94./255., 94./255., 68./255., 46./255., 16./255.};; 3439 Double_t blue[9] = { 18./255., 28./255., 41./255., 56./255., 62./255., 63./255., 50./255., 36./255., 21./255.};; 3440 Idx = TColor::CreateGradientColorTable(9, stops, red, green, blue, 255, alpha);; 3441 }; 3442 break;; 3443 ; 3444 // Rust; 3445 case 97:; 3446 {; 3447 Double_t red[9] = { 0./255., 30./255., 63./255., 101./255., 143./255., 152./255., 169./255., 187./255., 230./255.};; 3448 Double_t green[9] = { 0./255., 14./255., 28./255., 42./255., 58./255., 61./255., 67./255., 74./255., 91./255.};; 3449 Double_t blue[9] = { 39./255., 26./255., 21./255., 18./255., 15./255., 14./255., 14./255., 13./255., 13./255.};; 3450 Idx = TColor::CreateGradientColorTable(9, stops, red, green, bl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TColor_8cxx_source.html:134978,green,green,134978,doc/master/TColor_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TColor_8cxx_source.html,1,['green'],['green']
Energy Efficiency," 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. THnSparseArrayChunk*AddChunk(); voidTHnBase::AddInternal(const THnBase* h, Double_t c, Bool_t rebinned); Bool_tTHnBase::CheckConsistency(const THnBase* h, const char* tag) const; THnBase*THnBase::CloneEmpty(const char* name, const char* title, const TObjArray* axes, Bool_t keepTargetAxis) const; TH1*THnBase::CreateHist(const char* name, const char* title, const TObjArray* axes, Bool_t keepTargetAxis) const; static THnBase*THnBase::CreateHnAny(const char* name, const char* title, const TH1* h1, Bool_t sparse, Int_t chunkSize = 1024*16); static THnBase*THnBase::CreateHnAny(const char* name, const char* title, const THnBase* hn, Bool_t sparse, Int_t chunkSize = 1024*16); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidFillBin(Long64_t bin, Double_t w); voidTHnBase::FillBinBase(Double_t w); voidFillExMap(); virtual TArray*GenerateArray() const; Long64_tGetBinIndexForCurrentBin(Bool_t allocate); THnSparseArrayChunk*GetChunk(Int_t idx) const; THnSparseCompactBinCoord*GetCompactCoord() const; voidTHnBase::Init(const char* name, const char* title, const TObjArray* axes, Bool_t keepTargetAxis, Int_t chunkSize = 1024*16); virtual voidInitStorage(Int_t* nbins, Int_t chunkSize); voidTObject::MakeZombie(); Bool_tTHnBase::PrintBin(Long64_t idx, Int_t* coord, Option_t* options) const; TObject*THnBase::ProjectionAny(Int_t ndim, const Int_t* dim, Bool_t wantNDim, Option_t* option = """") const; THnBase*THnBase::RebinBase(Int_t group) const; THnBase*THnBase::RebinBase(const Int_t* group) const; virtual voidReserve(Long64_t nbins); voidTHnBase::ResetBase(Option_t* option = """"); voidTHnBase::UpdateXStat(const Double_t* x, Double_t w = 1.). private:. THnSparse&operator=(const THnSparse&). Data Members; public:. enum THnBase::[unnamed] { kNoInt; kValidInt; kInvalidInt; };; enum TObje",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/THnSparse.html:14147,allocate,allocate,14147,root/html534/THnSparse.html,https://root.cern,https://root.cern/root/html534/THnSparse.html,1,['allocate'],['allocate']
Energy Efficiency," 0, not null string """"; Int_t wid = embed->GetCanvasWindowId();; TCanvas *myc = new TCanvas(""myname"",10,10,wid);; embed->AdoptCanvas(myc);; // the TCanvas is adopted by the embedded canvas and will be; // destroyed by it; 25.9 The ROOT Graphics Editor (GED); Everything drawn in a ROOT canvas is an object. There are classes for all objects, and they fall into hierarchies. In addition, the ROOT has fully cross-platform GUI classes and provides all standard components for an application environment with common ‘look and feel’. The object-oriented, event-driven programming model supports the modern signals/slots communication mechanism. It handles user interface actions and allows total independence of interacting objects and classes. This mechanism uses the ROOT dictionary information and the Cling the C++ Interpreter to connect signals to slots methods.; Therefore, all necessary elements for an object-oriented editor design are in place. The editor complexity can be reduced by splitting it into discrete units of so-called object editors. Any object editor provides an object specific GUI. The main purpose of the ROOT graphics editor is the organization of the object editors’ appearance and the task sequence between them.; 25.9.1 Object Editors; Every object editor follows a simple naming convention: to have as a name the object class name concatenated with ‘Editor’ (e.g. for TGraph objects the object editor is TGraphEditor). Thanks to the signals/slots communication mechanism and to the method DistancetoPrimitive() that computes a ‘‘distance’’ to an object from the mouse position, it was possible to implement a signal method of the canvas that says which is the selected object and to which pad it belongs. Having this information the graphics editor loads the corresponding object editor and the user interface is ready for use. This way after a click on ‘axis’—the axis editor is active; a click on a ‘pad’ activates the pad editor, etc.; The algorithm in use is simple and",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:1221182,reduce,reduced,1221182,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['reduce'],['reduced']
Energy Efficiency," 1 if OK, otherwise 0.; 32******************************************************************************/; 33 ; 34 int ret = 1;; 35 ; 36 points = NULL;; 37 colors = NULL;; 38 segs = NULL;; 39 polys = NULL;; 40 ; 41 /*; 42 * Allocate memory for points; 43 */; 44 ; 45 if (gSize3D.numPoints) {; 46 points = (point *) calloc(gSize3D.numPoints, sizeof (point));; 47 if (!points) {; 48 puts (""Unable to allocate memory for points !"");; 49 ret = 0;; 50 }; 51 }; 52 else return (0); /* if there are no points, return back */; 53 ; 54 ; 55 ; 56 /*; 57 * Allocate memory for colors; 58 */; 59 ; 60 colors = (Color *) calloc(28+4, sizeof (Color));; 61 if(!colors) {; 62 puts (""Unable to allocate memory for colors !"");; 63 ret = 0;; 64 }; 65 else {; 66 colors[ 0].red = 92; colors[ 0].green = 92; colors[0].blue = 92;; 67 colors[ 1].red = 122; colors[ 1].green = 122; colors[1].blue = 122;; 68 colors[ 2].red = 184; colors[ 2].green = 184; colors[2].blue = 184;; 69 colors[ 3].red = 215; colors[ 3].green = 215; colors[3].blue = 215;; 70 colors[ 4].red = 138; colors[ 4].green = 15; colors[4].blue = 15;; 71 colors[ 5].red = 184; colors[ 5].green = 20; colors[5].blue = 20;; 72 colors[ 6].red = 235; colors[ 6].green = 71; colors[6].blue = 71;; 73 colors[ 7].red = 240; colors[ 7].green = 117; colors[7].blue = 117;; 74 colors[ 8].red = 15; colors[ 8].green = 138; colors[8].blue = 15;; 75 colors[ 9].red = 20; colors[ 9].green = 184; colors[9].blue = 20;; 76 colors[10].red = 71; colors[10].green = 235; colors[10].blue = 71;; 77 colors[11].red = 117; colors[11].green = 240; colors[11].blue = 117;; 78 colors[12].red = 15; colors[12].green = 15; colors[12].blue = 138;; 79 colors[13].red = 20; colors[13].green = 20; colors[13].blue = 184;; 80 colors[14].red = 71; colors[14].green = 71; colors[14].blue = 235;; 81 colors[15].red = 117; colors[15].green = 117; colors[15].blue = 240;; 82 colors[16].red = 138; colors[16].green = 138; colors[16].blue = 15;; 83 colors[17].red = 184; colors[17].green = 184; col",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/X3DBuffer_8c_source.html:1907,green,green,1907,doc/master/X3DBuffer_8c_source.html,https://root.cern,https://root.cern/doc/master/X3DBuffer_8c_source.html,1,['green'],['green']
Energy Efficiency," 1.0e7 * K(); }. Double_t KUncertainty(); { return 0.0000024e-23; }. Double_t Sigma(); Stefan-Boltzmann constant. { return 5.6704e-8; }. Double_t SigmaUncertainty(); { return 0.000040e-8; }. Double_t Na(); Avogadro constant (Avogadro's Number). { return 6.02214199e+23; }. Double_t NaUncertainty(); { return 0.00000047e+23; }. Double_t R(); universal gas constant (Na * K); http://scienceworld.wolfram.com/physics/UniversalGasConstant.html. { return K() * Na(); }. Double_t RUncertainty(); { return R()*((KUncertainty()/K()) + (NaUncertainty()/Na())); }. Double_t MWair(); Molecular weight of dry air; 1976 US Standard Atmosphere,; also see http://atmos.nmsu.edu/jsdap/encyclopediawork.html. { return 28.9644; }. Double_t Rgair(); Dry Air Gas Constant (R / MWair); http://atmos.nmsu.edu/education_and_outreach/encyclopedia/gas_constant.htm. { return (1000.0 * R()) / MWair(); }. Double_t EulerGamma(); Euler-Mascheroni Constant. { return 0.577215664901532860606512090082402431042; }. Double_t Qe(); Elementary charge. { return 1.602176462e-19; }. Double_t QeUncertainty(); { return 0.000000063e-19; }. Bool_t AreEqualAbs(Double_t af, Double_t bf, Double_t epsilon); Comparing floating points. return Abs(af-bf); return kTRUE if absolute difference between af and bf is less than epsilon. Bool_t AreEqualRel(Double_t af, Double_t bf, Double_t relPrec); return kTRUE if relative difference between af and bf is less than relPrec. return Abs(af-bf). template <typename T> T MinElement(Long64_t n, const T *a). Array Algorithms. Min, Max of an array. template <typename T> T MaxElement(Long64_t n, const T *a). template <typename T> Long64_t LocMin(Long64_t n, const T *a); Locate Min, Max element number in an array. template <typename Iterator> Iterator LocMin(Iterator first, Iterator last). template <typename T> Long64_t LocMax(Long64_t n, const T *a). template <typename Iterator> Iterator LocMax(Iterator first, Iterator last). template <typename T> Long64_t BinarySearch(Long64_t n, const T *arra",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMath.html:47184,charge,charge,47184,root/html528/TMath.html,https://root.cern,https://root.cern/root/html528/TMath.html,1,['charge'],['charge']
Energy Efficiency," 1.0e7 * K(); }. Double_t KUncertainty(); { return 0.0000024e-23; }. Double_t Sigma(); Stefan-Boltzmann constant. { return 5.6704e-8; }. Double_t SigmaUncertainty(); { return 0.000040e-8; }. Double_t Na(); Avogadro constant (Avogadro's Number). { return 6.02214199e+23; }. Double_t NaUncertainty(); { return 0.00000047e+23; }. Double_t R(); universal gas constant (Na * K); http://scienceworld.wolfram.com/physics/UniversalGasConstant.html. { return K() * Na(); }. Double_t RUncertainty(); { return R()*((KUncertainty()/K()) + (NaUncertainty()/Na())); }. Double_t MWair(); Molecular weight of dry air; 1976 US Standard Atmosphere,; also see http://atmos.nmsu.edu/jsdap/encyclopediawork.html. { return 28.9644; }. Double_t Rgair(); Dry Air Gas Constant (R / MWair); http://atmos.nmsu.edu/education_and_outreach/encyclopedia/gas_constant.htm. { return (1000.0 * R()) / MWair(); }. Double_t EulerGamma(); Euler-Mascheroni Constant. { return 0.577215664901532860606512090082402431042; }. Double_t Qe(); Elementary charge. { return 1.602176462e-19; }. Double_t QeUncertainty(); { return 0.000000063e-19; }. Int_t Nint(T x). T Min(). T Max(). Bool_t AreEqualAbs(Double_t af, Double_t bf, Double_t epsilon); Comparing floating points. return Abs(af-bf); return kTRUE if absolute difference between af and bf is less than epsilon. Bool_t AreEqualRel(Double_t af, Double_t bf, Double_t relPrec); return kTRUE if relative difference between af and bf is less than relPrec. return Abs(af-bf). template <typename T> T MinElement(Long64_t n, const T *a). Array Algorithms. Min, Max of an array. template <typename T> T MaxElement(Long64_t n, const T *a). template <typename T> Long64_t LocMin(Long64_t n, const T *a); Locate Min, Max element number in an array. template <typename Iterator> Iterator LocMin(Iterator first, Iterator last). template <typename T> Long64_t LocMax(Long64_t n, const T *a). template <typename Iterator> Iterator LocMax(Iterator first, Iterator last). template <typename T> Long64_t Bin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMath.html:48536,charge,charge,48536,root/html534/TMath.html,https://root.cern,https://root.cern/root/html534/TMath.html,1,['charge'],['charge']
Energy Efficiency," 1.0e7 * K(); }. Double_t KUncertainty(); { return 0.0000024e-23; }. Double_t Sigma(); Stefan-Boltzmann constant. { return 5.6704e-8; }. Double_t SigmaUncertainty(); { return 0.000040e-8; }. Double_t Na(); Avogadro constant (Avogadro's Number). { return 6.02214199e+23; }. Double_t NaUncertainty(); { return 0.00000047e+23; }. Double_t R(); universal gas constant (Na * K); http://scienceworld.wolfram.com/physics/UniversalGasConstant.html. { return K() * Na(); }. Double_t RUncertainty(); { return R()*((KUncertainty()/K()) + (NaUncertainty()/Na())); }. Double_t MWair(); Molecular weight of dry air; 1976 US Standard Atmosphere,; also see http://atmos.nmsu.edu/jsdap/encyclopediawork.html. { return 28.9644; }. Double_t Rgair(); Dry Air Gas Constant (R / MWair); http://atmos.nmsu.edu/education_and_outreach/encyclopedia/gas_constant.htm. { return (1000.0 * R()) / MWair(); }. Double_t EulerGamma(); Euler-Mascheroni Constant. { return 0.577215664901532860606512090082402431042; }. Double_t Qe(); Elementary charge. { return 1.602176462e-19; }. Double_t QeUncertainty(); { return 0.000000063e-19; }. T Min(). T Max(). Bool_t AreEqualAbs(Double_t af, Double_t bf, Double_t epsilon); Comparing floating points. return Abs(af-bf); return kTRUE if absolute difference between af and bf is less than epsilon. Bool_t AreEqualRel(Double_t af, Double_t bf, Double_t relPrec); return kTRUE if relative difference between af and bf is less than relPrec. return Abs(af-bf). template <typename T> T MinElement(Long64_t n, const T *a). Array Algorithms. Min, Max of an array. template <typename T> T MaxElement(Long64_t n, const T *a). template <typename T> Long64_t LocMin(Long64_t n, const T *a); Locate Min, Max element number in an array. template <typename Iterator> Iterator LocMin(Iterator first, Iterator last). template <typename T> Long64_t LocMax(Long64_t n, const T *a). template <typename Iterator> Iterator LocMax(Iterator first, Iterator last). template <typename T> Long64_t BinarySearch(Long64_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMath.html:47403,charge,charge,47403,root/html530/TMath.html,https://root.cern,https://root.cern/root/html530/TMath.html,2,['charge'],['charge']
Energy Efficiency, 1/**; 2\defgroup RoofitPythonizations RooFit Pythonizations; 3\ingroup Roofitmain; 4- [RooAbsCollection](\ref _rooabscollection); 5 - [printLatex](\ref _rooabscollection_printlatex); 6- [RooAbsData](\ref _rooabsdata); 7 - [createHistogram](\ref _rooabsdata_createhistogram); 8 - [plotOn](\ref _rooabsdata_ploton); 9 - [reduce](\ref _rooabsdata_reduce); 10 - [statOn](\ref _rooabsdata_staton); 11- [RooAbsPdf](\ref _rooabspdf); 12 - [createCdf](\ref _rooabspdf_createcdf); 13 - [createNLL](\ref _rooabspdf_createnll); 14 - [fitTo](\ref _rooabspdf_fitto); 15 - [generate](\ref _rooabspdf_generate); 16 - [generateBinned](\ref _rooabspdf_generatebinned); 17 - [paramOn](\ref _rooabspdf_paramon); 18 - [plotOn](\ref _rooabspdf_ploton); 19 - [prepareMultiGen](\ref _rooabspdf_preparemultigen); 20- [RooAbsReal](\ref _rooabsreal); 21 - [chi2FitTo](\ref _rooabsreal_chi2fitto); 22 - [createChi2](\ref _rooabsreal_createchi2); 23 - [createHistogram](\ref _rooabsreal_createhistogram); 24 - [createIntegral](\ref _rooabsreal_createintegral); 25 - [createRunningIntegral](\ref _rooabsreal_createrunningintegral); 26 - [plotOn](\ref _rooabsreal_ploton); 27- [RooAbsRealLValue](\ref _rooabsreallvalue); 28 - [createHistogram](\ref _rooabsreallvalue_createhistogram); 29 - [frame](\ref _rooabsreallvalue_frame); 30- [RooArgSet](\ref _rooargset); 31 - [__init__](\ref _rooargset___init__); 32- [RooBCPGenDecay](\ref _roobcpgendecay); 33 - [__init__](\ref _roobcpgendecay___init__); 34- [RooBCPEffDecay](\ref _roobcpeffdecay); 35 - [__init__](\ref _roobcpeffdecay___init__); 36- [RooBDecay](\ref _roobdecay); 37 - [__init__](\ref _roobdecay___init__); 38- [RooBMixDecay](\ref _roobmixdecay); 39 - [__init__](\ref _roobmixdecay___init__); 40- [RooCategory](\ref _r,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/__roofit_8pyzdoc_source.html:572,reduce,reduce,572,doc/master/__roofit_8pyzdoc_source.html,https://root.cern,https://root.cern/doc/master/__roofit_8pyzdoc_source.html,1,['reduce'],['reduce']
Energy Efficiency," 100 of file MethodPDERS.cxx. ◆ MethodPDERS() [2/2]. TMVA::MethodPDERS::MethodPDERS ; (; DataSetInfo & ; theData, . const TString & ; theWeightFile . ). construct MethodPDERS through from file ; Definition at line 134 of file MethodPDERS.cxx. ◆ ~MethodPDERS(). TMVA::MethodPDERS::~MethodPDERS ; (; void ; ). virtual . destructor ; Definition at line 208 of file MethodPDERS.cxx. Member Function Documentation. ◆ AddWeightsXMLTo(). void TMVA::MethodPDERS::AddWeightsXMLTo ; (; void * ; parent); const. virtual . write weights to xml file ; Implements TMVA::MethodBase.; Definition at line 1099 of file MethodPDERS.cxx. ◆ ApplyKernelFunction(). Double_t TMVA::MethodPDERS::ApplyKernelFunction ; (; Double_t ; normalized_distance). protected . from the normalized euclidean distance calculate the distance for a certain kernel ; Definition at line 922 of file MethodPDERS.cxx. ◆ CalcAverages(). void TMVA::MethodPDERS::CalcAverages ; (; ). private . compute also average RMS values required for adaptive Gaussian ; Definition at line 433 of file MethodPDERS.cxx. ◆ CKernelEstimate(). Double_t TMVA::MethodPDERS::CKernelEstimate ; (; const Event & ; event, . std::vector< const BinarySearchTreeNode * > & ; events, . Volume & ; v . ). protected . normalization factors so we can work with radius 1 hyperspheres ; Definition at line 834 of file MethodPDERS.cxx. ◆ Class(). static TClass * TMVA::MethodPDERS::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMVA::MethodPDERS::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMVA::MethodPDERS::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 221 of file MethodPDERS.h. ◆ CreateBinarySearchTree(). void TMVA::MethodPDERS::CreateBinarySearchTree ; (; Types::ETreeType ; type). private . create binary search trees for signal and background ; Definition at line 455 of file MethodPDERS.cxx. ◆ CreateRanking(). ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodPDERS.html:35201,adapt,adaptive,35201,doc/master/classTMVA_1_1MethodPDERS.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodPDERS.html,1,['adapt'],['adaptive']
Energy Efficiency, 122; colors[1].blue = 122;; 68 colors[ 2].red = 184; colors[ 2].green = 184; colors[2].blue = 184;; 69 colors[ 3].red = 215; colors[ 3].green = 215; colors[3].blue = 215;; 70 colors[ 4].red = 138; colors[ 4].green = 15; colors[4].blue = 15;; 71 colors[ 5].red = 184; colors[ 5].green = 20; colors[5].blue = 20;; 72 colors[ 6].red = 235; colors[ 6].green = 71; colors[6].blue = 71;; 73 colors[ 7].red = 240; colors[ 7].green = 117; colors[7].blue = 117;; 74 colors[ 8].red = 15; colors[ 8].green = 138; colors[8].blue = 15;; 75 colors[ 9].red = 20; colors[ 9].green = 184; colors[9].blue = 20;; 76 colors[10].red = 71; colors[10].green = 235; colors[10].blue = 71;; 77 colors[11].red = 117; colors[11].green = 240; colors[11].blue = 117;; 78 colors[12].red = 15; colors[12].green = 15; colors[12].blue = 138;; 79 colors[13].red = 20; colors[13].green = 20; colors[13].blue = 184;; 80 colors[14].red = 71; colors[14].green = 71; colors[14].blue = 235;; 81 colors[15].red = 117; colors[15].green = 117; colors[15].blue = 240;; 82 colors[16].red = 138; colors[16].green = 138; colors[16].blue = 15;; 83 colors[17].red = 184; colors[17].green = 184; colors[17].blue = 20;; 84 colors[18].red = 235; colors[18].green = 235; colors[18].blue = 71;; 85 colors[19].red = 240; colors[19].green = 240; colors[19].blue = 117;; 86 colors[20].red = 138; colors[20].green = 15; colors[20].blue = 138;; 87 colors[21].red = 184; colors[21].green = 20; colors[21].blue = 184;; 88 colors[22].red = 235; colors[22].green = 71; colors[22].blue = 235;; 89 colors[23].red = 240; colors[23].green = 117; colors[23].blue = 240;; 90 colors[24].red = 15; colors[24].green = 138; colors[24].blue = 138;; 91 colors[25].red = 20; colors[25].green = 184; colors[25].blue = 184;; 92 colors[26].red = 71; colors[26].green = 235; colors[26].blue = 235;; 93 colors[27].red = 117; colors[27].green = 240; colors[27].blue = 240;; 94 }; 95 ; 96 ; 97 /*; 98 * Allocate memory for segments; 99 */; 100 ; 101 if (gSize3D.numSegs) {; 102 segs ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/X3DBuffer_8c_source.html:2758,green,green,2758,doc/master/X3DBuffer_8c_source.html,https://root.cern,https://root.cern/doc/master/X3DBuffer_8c_source.html,1,['green'],['green']
Energy Efficiency," 12834 * conn read/written by more than one thread, no matter if; 12835 * it is a websocket or regular connection. */; 12836 (void)mg_lock_connection(conn);; 12837 ; 12838#if defined(USE_ZLIB) && defined(MG_EXPERIMENTAL_INTERFACES); 12839 size_t deflated_size = 0;; 12840 Bytef *deflated = 0;; 12841 // Deflate websocket messages over 100kb; 12842 int use_deflate = dataLen > 100 * 1024 && conn->accept_gzip;; 12843 ; 12844 if (use_deflate) {; 12845 if (!conn->websocket_deflate_initialized) {; 12846 if (websocket_deflate_initialize(conn, 1) != Z_OK); 12847 return 0;; 12848 }; 12849 ; 12850 // Deflating the message; 12851 header[0] = 0xC0u | (unsigned char)((unsigned)opcode & 0xf);; 12852 conn->websocket_deflate_state.avail_in = (uInt)dataLen;; 12853 conn->websocket_deflate_state.next_in = (unsigned char *)data;; 12854 deflated_size = (Bytef *)compressBound((uLong)dataLen);; 12855 deflated = mg_calloc(deflated_size, sizeof(Bytef));; 12856 if (deflated == NULL) {; 12857 mg_cry_internal(; 12858 conn,; 12859 ""Out of memory: Cannot allocate deflate buffer of %lu bytes"",; 12860 (unsigned long)deflated_size);; 12861 mg_unlock_connection(conn);; 12862 return -1;; 12863 }; 12864 conn->websocket_deflate_state.avail_out = (uInt)deflated_size;; 12865 conn->websocket_deflate_state.next_out = deflated;; 12866 deflate(&conn->websocket_deflate_state, conn->websocket_deflate_flush);; 12867 dataLen = deflated_size - conn->websocket_deflate_state.avail_out; 12868 - 4; // Strip trailing 0x00 0x00 0xff 0xff bytes; 12869 } else; 12870#endif; 12871 header[0] = 0x80u | (unsigned char)((unsigned)opcode & 0xf);; 12872 ; 12873#if defined(GCC_DIAGNOSTIC); 12874#pragma GCC diagnostic pop; 12875#endif; 12876 ; 12877 /* Frame format: http://tools.ietf.org/html/rfc6455#section-5.2 */; 12878 if (dataLen < 126) {; 12879 /* inline 7-bit length field */; 12880 header[1] = (unsigned char)dataLen;; 12881 headerLen = 2;; 12882 } else if (dataLen <= 0xFFFF) {; 12883 /* 16-bit length field */; 12884 uint16_t le",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:374221,allocate,allocate,374221,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,1,['allocate'],['allocate']
Energy Efficiency," 12835 * conn read/written by more than one thread, no matter if; 12836 * it is a websocket or regular connection. */; 12837 (void)mg_lock_connection(conn);; 12838 ; 12839#if defined(USE_ZLIB) && defined(MG_EXPERIMENTAL_INTERFACES); 12840 size_t deflated_size = 0;; 12841 Bytef *deflated = 0;; 12842 // Deflate websocket messages over 100kb; 12843 int use_deflate = dataLen > 100 * 1024 && conn->accept_gzip;; 12844 ; 12845 if (use_deflate) {; 12846 if (!conn->websocket_deflate_initialized) {; 12847 if (websocket_deflate_initialize(conn, 1) != Z_OK); 12848 return 0;; 12849 }; 12850 ; 12851 // Deflating the message; 12852 header[0] = 0xC0u | (unsigned char)((unsigned)opcode & 0xf);; 12853 conn->websocket_deflate_state.avail_in = (uInt)dataLen;; 12854 conn->websocket_deflate_state.next_in = (unsigned char *)data;; 12855 deflated_size = (Bytef *)compressBound((uLong)dataLen);; 12856 deflated = mg_calloc(deflated_size, sizeof(Bytef));; 12857 if (deflated == NULL) {; 12858 mg_cry_internal(; 12859 conn,; 12860 ""Out of memory: Cannot allocate deflate buffer of %lu bytes"",; 12861 (unsigned long)deflated_size);; 12862 mg_unlock_connection(conn);; 12863 return -1;; 12864 }; 12865 conn->websocket_deflate_state.avail_out = (uInt)deflated_size;; 12866 conn->websocket_deflate_state.next_out = deflated;; 12867 deflate(&conn->websocket_deflate_state, conn->websocket_deflate_flush);; 12868 dataLen = deflated_size - conn->websocket_deflate_state.avail_out; 12869 - 4; // Strip trailing 0x00 0x00 0xff 0xff bytes; 12870 } else; 12871#endif; 12872 header[0] = 0x80u | (unsigned char)((unsigned)opcode & 0xf);; 12873 ; 12874#if defined(GCC_DIAGNOSTIC); 12875#pragma GCC diagnostic pop; 12876#endif; 12877 ; 12878 /* Frame format: http://tools.ietf.org/html/rfc6455#section-5.2 */; 12879 if (dataLen < 126) {; 12880 /* inline 7-bit length field */; 12881 header[1] = (unsigned char)dataLen;; 12882 headerLen = 2;; 12883 } else if (dataLen <= 0xFFFF) {; 12884 /* 16-bit length field */; 12885 uint16_t le",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:374254,allocate,allocate,374254,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,1,['allocate'],['allocate']
Energy Efficiency," 1307 Int_t py = gPad->GetEventY();; 1308 ; 1309 //localize point to be deleted; 1310 Int_t ipoint = -2;; 1311 Int_t i;; 1312 // start with a small window (in case the mouse is very close to one point); 1313 for (i=0;i<fNpoints;i++) {; 1314 Int_t dpx = px - gPad->XtoAbsPixel(gPad->XtoPad(fX[i]));; 1315 Int_t dpy = py - gPad->YtoAbsPixel(gPad->YtoPad(fY[i]));; 1316 if (dpx*dpx+dpy*dpy < 25) {ipoint = i; break;}; 1317 }; 1318 if (ipoint == -2) return;; 1319 ; 1320 fEXlow[ipoint] = exl;; 1321 fEYlow[ipoint] = eyl;; 1322 fEXhigh[ipoint] = exh;; 1323 fEYhigh[ipoint] = eyh;; 1324 gPad->Modified();; 1325}; 1326 ; 1327 ; 1328////////////////////////////////////////////////////////////////////////////////; 1329/// Set ex and ey values for point number i.; 1330 ; 1331void TGraphAsymmErrors::SetPointError(Int_t i, Double_t exl, Double_t exh, Double_t eyl, Double_t eyh); 1332{; 1333 if (i < 0) return;; 1334 if (i >= fNpoints) {; 1335 // re-allocate the object; 1336 TGraphAsymmErrors::SetPoint(i,0,0);; 1337 }; 1338 fEXlow[i] = exl;; 1339 fEYlow[i] = eyl;; 1340 fEXhigh[i] = exh;; 1341 fEYhigh[i] = eyh;; 1342}; 1343 ; 1344 ; 1345////////////////////////////////////////////////////////////////////////////////; 1346/// Set EXlow for point `i`.; 1347 ; 1348void TGraphAsymmErrors::SetPointEXlow(Int_t i, Double_t exl); 1349{; 1350 if (i < 0) return;; 1351 if (i >= fNpoints) {; 1352 // re-allocate the object; 1353 TGraphAsymmErrors::SetPoint(i,0,0);; 1354 }; 1355 fEXlow[i] = exl;; 1356}; 1357 ; 1358 ; 1359////////////////////////////////////////////////////////////////////////////////; 1360/// Set EXhigh for point `i`.; 1361 ; 1362void TGraphAsymmErrors::SetPointEXhigh(Int_t i, Double_t exh); 1363{; 1364 if (i < 0) return;; 1365 if (i >= fNpoints) {; 1366 // re-allocate the object; 1367 TGraphAsymmErrors::SetPoint(i,0,0);; 1368 }; 1369 fEXhigh[i] = exh;; 1370}; 1371 ; 1372 ; 1373////////////////////////////////////////////////////////////////////////////////; 1374/// Set EYlow for point ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphAsymmErrors_8cxx_source.html:46237,allocate,allocate,46237,doc/master/TGraphAsymmErrors_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphAsymmErrors_8cxx_source.html,1,['allocate'],['allocate']
Energy Efficiency," 135./255., 125./255., 96./255., 68./255., 51./255., 61./255.};; 3279 Double_t blue[9] = { 7./255., 9./255., 12./255., 19./255., 45./255., 89./255., 118./255., 146./255., 118./255.};; 3280 Idx = TColor::CreateGradientColorTable(9, stops, red, green, blue, 255, alpha);; 3281 }; 3282 break;; 3283 ; 3284 // Fuchsia; 3285 case 81:; 3286 {; 3287 Double_t red[9] = { 19./255., 44./255., 74./255., 105./255., 137./255., 166./255., 194./255., 206./255., 220./255.};; 3288 Double_t green[9] = { 19./255., 28./255., 40./255., 55./255., 82./255., 110./255., 159./255., 181./255., 220./255.};; 3289 Double_t blue[9] = { 19./255., 42./255., 68./255., 96./255., 129./255., 157./255., 188./255., 203./255., 220./255.};; 3290 Idx = TColor::CreateGradientColorTable(9, stops, red, green, blue, 255, alpha);; 3291 }; 3292 break;; 3293 ; 3294 // Grey Yellow; 3295 case 82:; 3296 {; 3297 Double_t red[9] = { 33./255., 44./255., 70./255., 99./255., 140./255., 165./255., 199./255., 211./255., 216./255.};; 3298 Double_t green[9] = { 38./255., 50./255., 76./255., 105./255., 140./255., 165./255., 191./255., 189./255., 167./255.};; 3299 Double_t blue[9] = { 55./255., 67./255., 97./255., 124./255., 140./255., 166./255., 163./255., 129./255., 52./255.};; 3300 Idx = TColor::CreateGradientColorTable(9, stops, red, green, blue, 255, alpha);; 3301 }; 3302 break;; 3303 ; 3304 // Green Brown Terrain; 3305 case 83:; 3306 {; 3307 Double_t red[9] = { 0./255., 33./255., 73./255., 124./255., 136./255., 152./255., 159./255., 171./255., 223./255.};; 3308 Double_t green[9] = { 0./255., 43./255., 92./255., 124./255., 134./255., 126./255., 121./255., 144./255., 223./255.};; 3309 Double_t blue[9] = { 0./255., 43./255., 68./255., 76./255., 73./255., 64./255., 72./255., 114./255., 223./255.};; 3310 Idx = TColor::CreateGradientColorTable(9, stops, red, green, blue, 255, alpha);; 3311 }; 3312 break;; 3313 ; 3314 // Green Pink; 3315 case 84:; 3316 {; 3317 Double_t red[9] = { 5./255., 18./255., 45./255., 124./255., 193./255., 2",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TColor_8cxx_source.html:127832,green,green,127832,doc/master/TColor_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TColor_8cxx_source.html,1,['green'],['green']
Energy Efficiency," 17 )); , kIsAverage = (1ULL << ( 18 )); , kIsNotW = (1ULL << ( 19 )); , kAutoBinPTwo = (1ULL << ( 20 )); , ;   kIsHighlight = (1ULL << ( 21 )). };  TH1 status bits. More...;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Attributes inherited from TArrayD; Double_t * fArray;  ;  Public Attributes inherited from TArray; Int_t fN;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from TH1; static Int_t AutoP2GetBins (Int_t n);  Auxiliary function to get the next power of 2 integer value larger then n. ;  ; static Double_t AutoP2GetPower2 (Double_t x, Bool_t next=kTRUE);  Auxiliary function to get the power of 2 next (larger) or previous (smaller) a given x. ;  ; static bool CheckAxisLimits (const TAxis *a1, const TAxis *a2);  Check that the axis limits of the histograms are the same. ;  ; static bool CheckBinLabels (const TAxis *a1, const TAxis *a2);  Check that axis have same labels. ;  ; static bool CheckBinLimits (const TAxis *a1, const TAxis *a2);  Check bin limits. ;  ; static int CheckConsistency (const TH1 *h1, const TH1 *h2);  Check histogram compatibility. ;  ; static bool CheckConsistentSubAxes (const TAxis *a1, Int_t firstBin1, Int_t lastBin1, const TAxis *a2, Int_t firstBin2=0, Int_t lastBin2=0);  Check that two sub axis are the same. ;  ; static bool CheckEqualAxes (const TAxis *a1",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1D.html:48033,power,power,48033,doc/master/classTH1D.html,https://root.cern,https://root.cern/doc/master/classTH1D.html,4,['power'],['power']
Energy Efficiency," 17 )); , kIsAverage = (1ULL << ( 18 )); , kIsNotW = (1ULL << ( 19 )); , kAutoBinPTwo = (1ULL << ( 20 )); , ;   kIsHighlight = (1ULL << ( 21 )). };  TH1 status bits. More...;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Attributes inherited from TArrayF; Float_t * fArray;  ;  Public Attributes inherited from TArray; Int_t fN;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from TH1; static Int_t AutoP2GetBins (Int_t n);  Auxiliary function to get the next power of 2 integer value larger then n. ;  ; static Double_t AutoP2GetPower2 (Double_t x, Bool_t next=kTRUE);  Auxiliary function to get the power of 2 next (larger) or previous (smaller) a given x. ;  ; static bool CheckAxisLimits (const TAxis *a1, const TAxis *a2);  Check that the axis limits of the histograms are the same. ;  ; static bool CheckBinLabels (const TAxis *a1, const TAxis *a2);  Check that axis have same labels. ;  ; static bool CheckBinLimits (const TAxis *a1, const TAxis *a2);  Check bin limits. ;  ; static int CheckConsistency (const TH1 *h1, const TH1 *h2);  Check histogram compatibility. ;  ; static bool CheckConsistentSubAxes (const TAxis *a1, Int_t firstBin1, Int_t lastBin1, const TAxis *a2, Int_t firstBin2=0, Int_t lastBin2=0);  Check that two sub axis are the same. ;  ; static bool CheckEqualAxes (const TAxis *a1",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1F.html:47894,power,power,47894,doc/master/classTH1F.html,https://root.cern,https://root.cern/doc/master/classTH1F.html,3,['power'],['power']
Energy Efficiency," 17 )); , kIsAverage = (1ULL << ( 18 )); , kIsNotW = (1ULL << ( 19 )); , kAutoBinPTwo = (1ULL << ( 20 )); , ;   kIsHighlight = (1ULL << ( 21 )). };  TH1 status bits. More...;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Attributes inherited from TArrayS; Short_t * fArray;  ;  Public Attributes inherited from TArray; Int_t fN;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from TH1; static Int_t AutoP2GetBins (Int_t n);  Auxiliary function to get the next power of 2 integer value larger then n. ;  ; static Double_t AutoP2GetPower2 (Double_t x, Bool_t next=kTRUE);  Auxiliary function to get the power of 2 next (larger) or previous (smaller) a given x. ;  ; static bool CheckAxisLimits (const TAxis *a1, const TAxis *a2);  Check that the axis limits of the histograms are the same. ;  ; static bool CheckBinLabels (const TAxis *a1, const TAxis *a2);  Check that axis have same labels. ;  ; static bool CheckBinLimits (const TAxis *a1, const TAxis *a2);  Check bin limits. ;  ; static int CheckConsistency (const TH1 *h1, const TH1 *h2);  Check histogram compatibility. ;  ; static bool CheckConsistentSubAxes (const TAxis *a1, Int_t firstBin1, Int_t lastBin1, const TAxis *a2, Int_t firstBin2=0, Int_t lastBin2=0);  Check that two sub axis are the same. ;  ; static bool CheckEqualAxes (const TAxis *a1",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1S.html:47757,power,power,47757,doc/master/classTH1S.html,https://root.cern,https://root.cern/doc/master/classTH1S.html,2,['power'],['power']
Energy Efficiency," 173 DoInit();; 174 }; 175 ; 176 /// clone the function; 177 IMultiGenFunction * Clone() const override {; 178 return new WrappedParamFunctionGen(fFunc, fDim, fParams.size(), fParams.empty() ? nullptr : &fParams.front(), fParIndices.empty() ? nullptr : &fParIndices.front());; 179 }; 180 ; 181private:; 182 // copy ctor; 183 WrappedParamFunctionGen(const WrappedParamFunctionGen &) = delete; // not implemented; 184 WrappedParamFunctionGen & operator=(const WrappedParamFunctionGen &) = delete; // not implemented; 185 ; 186public:; 187 ; 188 const double * Parameters() const override {; 189 return fParams.empty() ? nullptr : &fParams.front();; 190 }; 191 ; 192 void SetParameters(const double * p) override {; 193 unsigned int npar = NPar();; 194 std::copy(p, p+ npar, fParams.begin() );; 195 SetParValues(npar, p);; 196 }; 197 ; 198 unsigned int NPar() const override { return fParams.size(); }; 199 ; 200 unsigned int NDim() const override { return fDim; }; 201 ; 202// // re-implement this since is more efficient; 203// double operator() (const double * x, const double * p) {; 204// unsigned int n = fX.size();; 205// unsigned int npar = fParams.size();; 206// unsigned j = 0;; 207// return (*fFunc)( fX);; 208// }; 209 ; 210private:; 211 ; 212 /// evaluate the function (re-implement for being more efficient); 213 double DoEval(const double * x) const override {; 214 ; 215// std::cout << this << fDim << "" x : "";; 216// std::ostream_iterator<double> oix(std::cout,"" , "");; 217// std::copy(x, x+fDim, oix);; 218// std::cout << std::endl;; 219// std::cout << ""npar "" << npar << std::endl;; 220// std::cout << fVarIndices.size() << std::endl;; 221// assert ( fVarIndices.size() == fDim); // otherwise something is wrong; 222 ; 223 for (unsigned int i = 0; i < fDim; ++i) {; 224 unsigned int j = fVarIndices[i];; 225 assert ( j < NPar() + fDim);; 226 fX[ j ] = x[i];; 227 }; 228// std::cout << ""X : ("";; 229// std::ostream_iterator<double> oi(std::cout,"" , "");; 230// std::copy(fX.begin(), fX.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/WrappedParamFunction_8h_source.html:7144,efficient,efficient,7144,doc/master/WrappedParamFunction_8h_source.html,https://root.cern,https://root.cern/doc/master/WrappedParamFunction_8h_source.html,1,['efficient'],['efficient']
Energy Efficiency," 179 unsigned int ndim = NDim();; 180 for (unsigned int icoord = 0; icoord < ndim; ++icoord) {; 181 grad[icoord] = Derivative(x, icoord);; 182 }; 183 }; 184 ; 185 /// In some cases, the gradient algorithm will use information from the previous step, these can be passed; 186 /// in with this overload. The `previous_*` arrays can also be used to return second derivative and step size; 187 /// so that these can be passed forward again as well at the call site, if necessary.; 188 virtual void GradientWithPrevResult(const T *x, T *grad, T *previous_grad, T *previous_g2, T *previous_gstep) const; 189 {; 190 unsigned int ndim = NDim();; 191 for (unsigned int icoord = 0; icoord < ndim; ++icoord) {; 192 grad[icoord] = Derivative(x, icoord, previous_grad, previous_g2, previous_gstep);; 193 }; 194 }; 195 ; 196 using BaseFunc::NDim;; 197 ; 198 /// Optimized method to evaluate at the same time the function value and derivative at a point x.; 199 /// Often both value and derivatives are needed and it is often more efficient to compute them at the same time.; 200 /// Derived class should implement this method if performances play an important role and if it is faster to; 201 /// evaluate value and derivative at the same time; 202 virtual void FdF(const T *x, T &f, T *df) const; 203 {; 204 f = BaseFunc::operator()(x);; 205 Gradient(x, df);; 206 }; 207 ; 208 /// Return the partial derivative with respect to the passed coordinate.; 209 T Derivative(const T *x, unsigned int icoord = 0) const { return DoDerivative(x, icoord); }; 210 ; 211 /// In some cases, the derivative algorithm will use information from the previous step, these can be passed; 212 /// in with this overload. The `previous_*` arrays can also be used to return second derivative and step size; 213 /// so that these can be passed forward again as well at the call site, if necessary.; 214 T Derivative(const T *x, unsigned int icoord, T *previous_grad, T *previous_g2,; 215 T *previous_gstep) const; 216 {; 217 return DoDeri",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/IFunction_8h_source.html:8322,efficient,efficient,8322,doc/master/IFunction_8h_source.html,https://root.cern,https://root.cern/doc/master/IFunction_8h_source.html,1,['efficient'],['efficient']
Energy Efficiency," 19 )); , kAutoBinPTwo = (1ULL << ( 20 )); , ;   kIsHighlight = (1ULL << ( 21 )). };  TH1 status bits. More...;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Static Protected Member Functions inherited from TH1; static Int_t AutoP2GetBins (Int_t n);  Auxiliary function to get the next power of 2 integer value larger then n. ;  ; static Double_t AutoP2GetPower2 (Double_t x, Bool_t next=kTRUE);  Auxiliary function to get the power of 2 next (larger) or previous (smaller) a given x. ;  ; static bool CheckAxisLimits (const TAxis *a1, const TAxis *a2);  Check that the axis limits of the histograms are the same. ;  ; static bool CheckBinLabels (const TAxis *a1, const TAxis *a2);  Check that axis have same labels. ;  ; static bool CheckBinLimits (const TAxis *a1, const TAxis *a2);  Check bin limits. ;  ; static int CheckConsistency (const TH1 *h1, const TH1 *h2);  Check histogram compatibility. ;  ; static bool CheckConsistentSubAxes (const TAxis *a1, Int_t firstBin1, Int_t lastBin1, const TAxis *a2, Int_t firstBin2=0, Int_t lastBin2=0);  Check that two sub axis are the same. ;  ; static bool CheckEqualAxes (const TAxis *a1, const TAxis *a2);  Check that the axis are the same. ;  ; static Bool_t RecomputeAxisLimits (TAxis &destAxis, const TAxis &anAxis);  Finds new limits for the axis for the Merge function. ;  ; static Bool_t SameLimitsAndNBins (const TAxis &axis1, const TAxis &axis2);  S",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH2Poly.html:64017,power,power,64017,doc/master/classTH2Poly.html,https://root.cern,https://root.cern/doc/master/classTH2Poly.html,1,['power'],['power']
Energy Efficiency," 2006; 3 ; 4/**********************************************************************; 5 * *; 6 * Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; 7 * *; 8 * *; 9 **********************************************************************/; 10 ; 11// Header file for class UnBinData; 12 ; 13#ifndef ROOT_Fit_UnBinData; 14#define ROOT_Fit_UnBinData; 15 ; 16#include ""Fit/FitData.h""; 17#include ""Math/Error.h""; 18 ; 19#include <vector>; 20 ; 21namespace ROOT {; 22 ; 23 namespace Fit {; 24 ; 25 ; 26//___________________________________________________________________________________; 27/**; 28 Class describing the un-binned data sets (just x coordinates values) of any dimensions; 29 ; 30 There is the option to construct UnBindata copying the data inside; 31 (in the base FitData class) or using a pointer to external data, depending on which; 32 constructor of the UnBinData class is used.; 33 It is recommended to copy the input data inside, since this will be more efficient and; 34 less error prone, since the input provided data will have to be kept alive for all the time the; 35 Fit classes will be used.; 36 In case of really large data sets for limiting memory consumption then the other option can be used; 37 with special care.; 38 Specialized constructor exists for using external data up to 3 dimensions.; 39 ; 40 When the data are copying in the number of points can be set later (or re-set) using Initialize and; 41 the data are inserted one by one using the Add method.; 42 It is mandatory to set the size before using the Add method.; 43 ; 44 @ingroup FitData; 45*/; 46class UnBinData : public FitData {; 47 ; 48public :; 49 ; 50 /**; 51 constructor from dimension of point and max number of points (to pre-allocate vector); 52 */; 53 ; 54 explicit UnBinData( unsigned int maxpoints = 0, unsigned int dim = 1,; 55 bool isWeighted = false ) :; 56 FitData( maxpoints, isWeighted ? dim + 1 : dim ),; 57 fWeighted(isWeighted); 58 {; 59 assert( dim >= 1 );; 60 assert( !fWeighted || dim >=",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/UnBinData_8h_source.html:1224,efficient,efficient,1224,doc/master/UnBinData_8h_source.html,https://root.cern,https://root.cern/doc/master/UnBinData_8h_source.html,1,['efficient'],['efficient']
Energy Efficiency," 26./255., 51./255., 43./255., 33./255., 28./255., 35./255., 74./255., 144./255., 246./255.};; 3598 Double_t green[9] = { 9./255., 24./255., 55./255., 87./255., 118./255., 150./255., 180./255., 200./255., 222./255.};; 3599 Double_t blue[9] = { 30./255., 96./255., 112./255., 114./255., 112./255., 101./255., 72./255., 35./255., 0./255.};; 3600 Idx = TColor::CreateGradientColorTable(9, stops, red, green, blue, 255, alpha);; 3601 }; 3602 break;; 3603 ; 3604 // Cividis; 3605 case 113:; 3606 {; 3607 Double_t red[9] = { 0./255., 5./255., 65./255., 97./255., 124./255., 156./255., 189./255., 224./255., 255./255.};; 3608 Double_t green[9] = { 32./255., 54./255., 77./255., 100./255., 123./255., 148./255., 175./255., 203./255., 234./255.};; 3609 Double_t blue[9] = { 77./255., 110./255., 107./255., 111./255., 120./255., 119./255., 111./255., 94./255., 70./255.};; 3610 Idx = TColor::CreateGradientColorTable(9, stops, red, green, blue, 255, alpha);; 3611 }; 3612 break;; 3613 ; 3614 default:; 3615 ::Error(""SetPalette"", ""Unknown palette number %d"", ncolors);; 3616 return;; 3617 }; 3618 paletteType = ncolors;; 3619 if (Idx>0) fgPalettesList.fArray[paletteType-51] = (Double_t)Idx;; 3620 else fgPalettesList.fArray[paletteType-51] = 0.;; 3621 if (alpha > 0.) fgPalettesList.fArray[paletteType-51] += alpha/10.0f;; 3622 return;; 3623 }; 3624 ; 3625 // set user defined palette; 3626 if (colors) {; 3627 fgPalette.Set(ncolors);; 3628 for (i=0;i<ncolors;i++) fgPalette.fArray[i] = colors[i];; 3629 } else {; 3630 fgPalette.Set(TMath::Min(50,ncolors));; 3631 for (i=0;i<TMath::Min(50,ncolors);i++) fgPalette.fArray[i] = palette[i];; 3632 }; 3633 paletteType = 3;; 3634}; 3635 ; 3636 ; 3637////////////////////////////////////////////////////////////////////////////////; 3638/// Invert the current color palette.; 3639/// The top of the palette becomes the bottom and vice versa.; 3640 ; 3641void TColor::InvertPalette(); 3642{; 3643 std::reverse(fgPalette.fArray, fgPalette.fArray + fgPalette.GetSize());",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TColor_8cxx_source.html:144363,green,green,144363,doc/master/TColor_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TColor_8cxx_source.html,1,['green'],['green']
Energy Efficiency," 260 ; 261 Settings::~Settings () ; 262 {; 263 }; 264 ; 265 ; 266 ; 267 ; 268 ; 269 ; 270 ; 271 ; 272 ; 273 ; 274 ; 275 ; 276 ; 277 ; 278 /** \brief action to be done when the training cycle is started (e.g. update some monitoring output); 279 *; 280 */; 281 void ClassificationSettings::startTrainCycle () ; 282 {; 283 if (fMonitoring); 284 {; 285 create (""ROC"", 100, 0, 1, 100, 0, 1);; 286 create (""Significance"", 100, 0, 1, 100, 0, 3);; 287 create (""OutputSig"", 100, 0, 1);; 288 create (""OutputBkg"", 100, 0, 1);; 289 fMonitoring->ProcessEvents ();; 290 }; 291 }; 292 ; 293 /** \brief action to be done when the training cycle is ended (e.g. update some monitoring output); 294 *; 295 */; 296 void ClassificationSettings::endTrainCycle (double /*error*/) ; 297 {; 298 if (fMonitoring) fMonitoring->ProcessEvents ();; 299 }; 300 ; 301 /** \brief action to be done after the computation of a test sample (e.g. update some monitoring output); 302 *; 303 */; 304 void ClassificationSettings::testSample (double /*error*/, double output, double target, double weight); 305 {; 306 ; 307 m_output.push_back (output);; 308 m_targets.push_back (target);; 309 m_weights.push_back (weight);; 310 }; 311 ; 312 ; 313 /** \brief action to be done when the test cycle is started (e.g. update some monitoring output); 314 *; 315 */; 316 void ClassificationSettings::startTestCycle () ; 317 {; 318 m_output.clear ();; 319 m_targets.clear ();; 320 m_weights.clear ();; 321 }; 322 ; 323 /** \brief action to be done when the training cycle is ended (e.g. update some monitoring output); 324 *; 325 */; 326 void ClassificationSettings::endTestCycle () ; 327 {; 328 if (m_output.empty ()); 329 return;; 330 double minVal = *std::min_element (begin (m_output), end (m_output));; 331 double maxVal = *std::max_element (begin (m_output), end (m_output));; 332 const size_t numBinsROC = 1000;; 333 const size_t numBinsData = 100;; 334 ; 335 std::vector<double> truePositives (numBinsROC+1, 0);; 336 std::vector<double> false",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/NeuralNet_8cxx_source.html:11645,monitor,monitoring,11645,doc/master/NeuralNet_8cxx_source.html,https://root.cern,https://root.cern/doc/master/NeuralNet_8cxx_source.html,1,['monitor'],['monitoring']
Energy Efficiency," 284 of file RVec.hxx. ◆ front() [2/2]. template<typename T > . const_reference ROOT::Internal::VecOps::SmallVectorTemplateCommon< T >::front ; (; ); const. inline . Definition at line 292 of file RVec.hxx. ◆ getFirstEl(). template<typename T > . void * ROOT::Internal::VecOps::SmallVectorTemplateCommon< T >::getFirstEl ; (; ); const. inlineprivate . Find the address of the first element. ; For this pointer math to be valid with small-size of 0 for T with lots of alignment, it's important that SmallVectorStorage is properly-aligned even for small-size of 0. ; Definition at line 212 of file RVec.hxx. ◆ grow_pod(). template<typename T > . void ROOT::Internal::VecOps::SmallVectorTemplateCommon< T >::grow_pod ; (; size_t ; MinSize, . size_t ; TSize . ). inlineprotected . Definition at line 222 of file RVec.hxx. ◆ isSmall(). template<typename T > . bool ROOT::Internal::VecOps::SmallVectorTemplateCommon< T >::isSmall ; (; ); const. inlineprotected . Return true if this is a smallvector which has not had dynamic memory allocated for it. ; Definition at line 226 of file RVec.hxx. ◆ max_size(). template<typename T > . size_type ROOT::Internal::VecOps::SmallVectorTemplateCommon< T >::max_size ; (; ); const. inlinenoexcept . Definition at line 275 of file RVec.hxx. ◆ rbegin() [1/2]. template<typename T > . const_reverse_iterator ROOT::Internal::VecOps::SmallVectorTemplateCommon< T >::rbegin ; (; ); const. inlinenoexcept . Definition at line 268 of file RVec.hxx. ◆ rbegin() [2/2]. template<typename T > . reverse_iterator ROOT::Internal::VecOps::SmallVectorTemplateCommon< T >::rbegin ; (; ). inlinenoexcept . Definition at line 267 of file RVec.hxx. ◆ rend() [1/2]. template<typename T > . const_reverse_iterator ROOT::Internal::VecOps::SmallVectorTemplateCommon< T >::rend ; (; ); const. inlinenoexcept . Definition at line 271 of file RVec.hxx. ◆ rend() [2/2]. template<typename T > . reverse_iterator ROOT::Internal::VecOps::SmallVectorTemplateCommon< T >::rend ; (; ). inlinenoexcept",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Internal_1_1VecOps_1_1SmallVectorTemplateCommon.html:10725,allocate,allocated,10725,doc/master/classROOT_1_1Internal_1_1VecOps_1_1SmallVectorTemplateCommon.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1VecOps_1_1SmallVectorTemplateCommon.html,1,['allocate'],['allocated']
Energy Efficiency," 2953////////////////////////////////////////////////////////////////////////////////; 2954/// If true, the current pdf is a selected component (for use in plotting); 2955 ; 2956bool RooAbsReal::isSelectedComp() const; 2957{; 2958 return _selectComp || _globalSelectComp ;; 2959}; 2960 ; 2961 ; 2962 ; 2963////////////////////////////////////////////////////////////////////////////////; 2964/// Global switch controlling the activation of the selectComp() functionality; 2965 ; 2966void RooAbsReal::globalSelectComp(bool flag); 2967{; 2968 _globalSelectComp = flag ;; 2969}; 2970 ; 2971 ; 2972 ; 2973 ; 2974////////////////////////////////////////////////////////////////////////////////; 2975/// Create an interface adaptor f(vars) that binds us to the specified variables; 2976/// (in arbitrary order). For example, calling bindVars({x1,x3}) on an object; 2977/// F(x1,x2,x3,x4) returns an object f(x1,x3) that is evaluated using the; 2978/// current values of x2 and x4. The caller takes ownership of the returned adaptor.; 2979 ; 2980RooFit::OwningPtr<RooAbsFunc> RooAbsReal::bindVars(const RooArgSet &vars, const RooArgSet* nset, bool clipInvalid) const; 2981{; 2982 auto binding = std::make_unique<RooRealBinding>(*this,vars,nset,clipInvalid);; 2983 if(!binding->isValid()) {; 2984 coutE(InputArguments) << ClassName() << ""::"" << GetName() << "":bindVars: cannot bind to "" << vars << std::endl ;; 2985 return nullptr;; 2986 }; 2987 return RooFit::makeOwningPtr(std::unique_ptr<RooAbsFunc>{std::move(binding)});; 2988}; 2989 ; 2990 ; 2991 ; 2992////////////////////////////////////////////////////////////////////////////////; 2993/// Copy the cached value of another RooAbsArg to our cache.; 2994/// Warning: This function just copies the cached values of source,; 2995/// it is the callers responsibility to make sure the cache is clean.; 2996 ; 2997void RooAbsReal::copyCache(const RooAbsArg* source, bool /*valueOnly*/, bool setValDirty); 2998{; 2999 auto other = static_cast<const RooAbsRea",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsReal_8cxx_source.html:129264,adapt,adaptor,129264,doc/master/RooAbsReal_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html,1,['adapt'],['adaptor']
Energy Efficiency," 32 (1957) 920]. The probability density function of the Vavilov distribution; as function of Landau's parameter is given by:; \f[ p(\lambda_L; \kappa, \beta^2) =; \frac{1}{2 \pi i}\int_{c-i\infty}^{c+i\infty} \phi(s) e^{\lambda_L s} ds\f]; where \f$\phi(s) = e^{C} e^{\psi(s)}\f$; with \f$ C = \kappa (1+\beta^2 \gamma )\f$; and \f$\psi(s)= s \ln \kappa + (s+\beta^2 \kappa); \cdot \left ( \int \limits_{0}^{1}; \frac{1 - e^{\frac{-st}{\kappa}}}{t} \,d t- \gamma \right ); - \kappa \, e^{\frac{-s}{\kappa}}\f$.; \f$ \gamma = 0.5772156649\dots\f$ is Euler's constant. For the class Vavilov,; Pdf returns the Vavilov distribution as function of Landau's parameter; \f$\lambda_L = \lambda_V/\kappa - \ln \kappa\f$,; which is the convention used in the CERNLIB routines, and in the tables; by S.M. Seltzer and M.J. Berger: Energy loss stragglin of protons and mesons:; Tabulation of the Vavilov distribution, pp 187-203; in: National Research Council (U.S.), Committee on Nuclear Science:; Studies in penetration of charged particles in matter,; Nat. Akad. Sci. Publication 1133,; Nucl. Sci. Series Report No. 39,; Washington (Nat. Akad. Sci.) 1964, 388 pp.; Available from; <A HREF=""http://books.google.de/books?id=kmMrAAAAYAAJ&lpg=PP9&pg=PA187#v=onepage&q&f=false"">Google books</A>. Therefore, for small values of \f$\kappa < 0.01\f$,; pdf approaches the Landau distribution. For values \f$\kappa > 10\f$, the Gauss approximation should be used; with \f$\mu\f$ and \f$\sigma\f$ given by Vavilov::Mean(kappa, beta2); and sqrt(Vavilov::Variance(kappa, beta2). The original Vavilov pdf is obtained by; v.Pdf(lambdaV/kappa-log(kappa))/kappa. Two subclasses are provided:; - VavilovFast uses the algorithm by; A. Rotondi and P. Montagna, Fast calculation of Vavilov distribution,; <A HREF=""http://dx.doi.org/10.1016/0168-583X(90)90749-K"">Nucl. Instr. and Meth. B47 (1990) 215-224</A>,; which has been implemented in; <A HREF=""http://wwwasdoc.web.cern.ch/wwwasdoc/shortwrupsdir/g115/top.html"">; CERNLIB (G11",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__Vavilov.html:1494,charge,charged,1494,root/html528/ROOT__Math__Vavilov.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__Vavilov.html,6,['charge'],['charged']
Energy Efficiency," 32./255., 58./255., 83./255., 119./255., 136./255., 173./255.};; 3479 Double_t blue[9] = { 5./255., 6./255., 7./255., 9./255., 9./255., 14./255., 17./255., 19./255., 24./255.};; 3480 Idx = TColor::CreateGradientColorTable(9, stops, red, green, blue, 255, alpha);; 3481 }; 3482 break;; 3483 ; 3484 // South West; 3485 case 101:; 3486 {; 3487 Double_t red[9] = { 82./255., 106./255., 126./255., 141./255., 155./255., 163./255., 142./255., 107./255., 66./255.};; 3488 Double_t green[9] = { 62./255., 44./255., 69./255., 107./255., 135./255., 152./255., 149./255., 132./255., 119./255.};; 3489 Double_t blue[9] = { 39./255., 25./255., 31./255., 60./255., 73./255., 68./255., 49./255., 72./255., 188./255.};; 3490 Idx = TColor::CreateGradientColorTable(9, stops, red, green, blue, 255, alpha);; 3491 }; 3492 break;; 3493 ; 3494 // Starry Night; 3495 case 102:; 3496 {; 3497 Double_t red[9] = { 18./255., 29./255., 44./255., 72./255., 116./255., 158./255., 184./255., 208./255., 221./255.};; 3498 Double_t green[9] = { 27./255., 46./255., 71./255., 105./255., 146./255., 177./255., 189./255., 190./255., 183./255.};; 3499 Double_t blue[9] = { 39./255., 55./255., 80./255., 108./255., 130./255., 133./255., 124./255., 100./255., 76./255.};; 3500 Idx = TColor::CreateGradientColorTable(9, stops, red, green, blue, 255, alpha);; 3501 }; 3502 break;; 3503 ; 3504 // Sunset; 3505 case 103:; 3506 {; 3507 Double_t red[9] = { 0./255., 48./255., 119./255., 173./255., 212./255., 224./255., 228./255., 228./255., 245./255.};; 3508 Double_t green[9] = { 0./255., 13./255., 30./255., 47./255., 79./255., 127./255., 167./255., 205./255., 245./255.};; 3509 Double_t blue[9] = { 0./255., 68./255., 75./255., 43./255., 16./255., 22./255., 55./255., 128./255., 245./255.};; 3510 Idx = TColor::CreateGradientColorTable(9, stops, red, green, blue, 255, alpha);; 3511 }; 3512 break;; 3513 ; 3514 // Temperature Map; 3515 case 104:; 3516 {; 3517 Double_t red[9] = { 34./255., 70./255., 129./255., 187./255., 225./255., 226./2",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TColor_8cxx_source.html:138320,green,green,138320,doc/master/TColor_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TColor_8cxx_source.html,1,['green'],['green']
Energy Efficiency," 3286 {; 3287 Double_t red[9] = { 19./255., 44./255., 74./255., 105./255., 137./255., 166./255., 194./255., 206./255., 220./255.};; 3288 Double_t green[9] = { 19./255., 28./255., 40./255., 55./255., 82./255., 110./255., 159./255., 181./255., 220./255.};; 3289 Double_t blue[9] = { 19./255., 42./255., 68./255., 96./255., 129./255., 157./255., 188./255., 203./255., 220./255.};; 3290 Idx = TColor::CreateGradientColorTable(9, stops, red, green, blue, 255, alpha);; 3291 }; 3292 break;; 3293 ; 3294 // Grey Yellow; 3295 case 82:; 3296 {; 3297 Double_t red[9] = { 33./255., 44./255., 70./255., 99./255., 140./255., 165./255., 199./255., 211./255., 216./255.};; 3298 Double_t green[9] = { 38./255., 50./255., 76./255., 105./255., 140./255., 165./255., 191./255., 189./255., 167./255.};; 3299 Double_t blue[9] = { 55./255., 67./255., 97./255., 124./255., 140./255., 166./255., 163./255., 129./255., 52./255.};; 3300 Idx = TColor::CreateGradientColorTable(9, stops, red, green, blue, 255, alpha);; 3301 }; 3302 break;; 3303 ; 3304 // Green Brown Terrain; 3305 case 83:; 3306 {; 3307 Double_t red[9] = { 0./255., 33./255., 73./255., 124./255., 136./255., 152./255., 159./255., 171./255., 223./255.};; 3308 Double_t green[9] = { 0./255., 43./255., 92./255., 124./255., 134./255., 126./255., 121./255., 144./255., 223./255.};; 3309 Double_t blue[9] = { 0./255., 43./255., 68./255., 76./255., 73./255., 64./255., 72./255., 114./255., 223./255.};; 3310 Idx = TColor::CreateGradientColorTable(9, stops, red, green, blue, 255, alpha);; 3311 }; 3312 break;; 3313 ; 3314 // Green Pink; 3315 case 84:; 3316 {; 3317 Double_t red[9] = { 5./255., 18./255., 45./255., 124./255., 193./255., 223./255., 205./255., 128./255., 49./255.};; 3318 Double_t green[9] = { 48./255., 134./255., 207./255., 230./255., 193./255., 113./255., 28./255., 0./255., 7./255.};; 3319 Double_t blue[9] = { 6./255., 15./255., 41./255., 121./255., 193./255., 226./255., 208./255., 130./255., 49./255.};; 3320 Idx = TColor::CreateGradientColorTabl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TColor_8cxx_source.html:128125,green,green,128125,doc/master/TColor_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TColor_8cxx_source.html,1,['green'],['green']
Energy Efficiency," 3296 {; 3297 Double_t red[9] = { 33./255., 44./255., 70./255., 99./255., 140./255., 165./255., 199./255., 211./255., 216./255.};; 3298 Double_t green[9] = { 38./255., 50./255., 76./255., 105./255., 140./255., 165./255., 191./255., 189./255., 167./255.};; 3299 Double_t blue[9] = { 55./255., 67./255., 97./255., 124./255., 140./255., 166./255., 163./255., 129./255., 52./255.};; 3300 Idx = TColor::CreateGradientColorTable(9, stops, red, green, blue, 255, alpha);; 3301 }; 3302 break;; 3303 ; 3304 // Green Brown Terrain; 3305 case 83:; 3306 {; 3307 Double_t red[9] = { 0./255., 33./255., 73./255., 124./255., 136./255., 152./255., 159./255., 171./255., 223./255.};; 3308 Double_t green[9] = { 0./255., 43./255., 92./255., 124./255., 134./255., 126./255., 121./255., 144./255., 223./255.};; 3309 Double_t blue[9] = { 0./255., 43./255., 68./255., 76./255., 73./255., 64./255., 72./255., 114./255., 223./255.};; 3310 Idx = TColor::CreateGradientColorTable(9, stops, red, green, blue, 255, alpha);; 3311 }; 3312 break;; 3313 ; 3314 // Green Pink; 3315 case 84:; 3316 {; 3317 Double_t red[9] = { 5./255., 18./255., 45./255., 124./255., 193./255., 223./255., 205./255., 128./255., 49./255.};; 3318 Double_t green[9] = { 48./255., 134./255., 207./255., 230./255., 193./255., 113./255., 28./255., 0./255., 7./255.};; 3319 Double_t blue[9] = { 6./255., 15./255., 41./255., 121./255., 193./255., 226./255., 208./255., 130./255., 49./255.};; 3320 Idx = TColor::CreateGradientColorTable(9, stops, red, green, blue, 255, alpha);; 3321 }; 3322 break;; 3323 ; 3324 // Island; 3325 case 85:; 3326 {; 3327 Double_t red[9] = { 180./255., 106./255., 104./255., 135./255., 164./255., 188./255., 189./255., 165./255., 144./255.};; 3328 Double_t green[9] = { 72./255., 126./255., 154./255., 184./255., 198./255., 207./255., 205./255., 190./255., 179./255.};; 3329 Double_t blue[9] = { 41./255., 120./255., 158./255., 188./255., 194./255., 181./255., 145./255., 100./255., 62./255.};; 3330 Idx = TColor::CreateGradientColo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TColor_8cxx_source.html:128656,green,green,128656,doc/master/TColor_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TColor_8cxx_source.html,1,['green'],['green']
Energy Efficiency," 3305 case 83:; 3306 {; 3307 Double_t red[9] = { 0./255., 33./255., 73./255., 124./255., 136./255., 152./255., 159./255., 171./255., 223./255.};; 3308 Double_t green[9] = { 0./255., 43./255., 92./255., 124./255., 134./255., 126./255., 121./255., 144./255., 223./255.};; 3309 Double_t blue[9] = { 0./255., 43./255., 68./255., 76./255., 73./255., 64./255., 72./255., 114./255., 223./255.};; 3310 Idx = TColor::CreateGradientColorTable(9, stops, red, green, blue, 255, alpha);; 3311 }; 3312 break;; 3313 ; 3314 // Green Pink; 3315 case 84:; 3316 {; 3317 Double_t red[9] = { 5./255., 18./255., 45./255., 124./255., 193./255., 223./255., 205./255., 128./255., 49./255.};; 3318 Double_t green[9] = { 48./255., 134./255., 207./255., 230./255., 193./255., 113./255., 28./255., 0./255., 7./255.};; 3319 Double_t blue[9] = { 6./255., 15./255., 41./255., 121./255., 193./255., 226./255., 208./255., 130./255., 49./255.};; 3320 Idx = TColor::CreateGradientColorTable(9, stops, red, green, blue, 255, alpha);; 3321 }; 3322 break;; 3323 ; 3324 // Island; 3325 case 85:; 3326 {; 3327 Double_t red[9] = { 180./255., 106./255., 104./255., 135./255., 164./255., 188./255., 189./255., 165./255., 144./255.};; 3328 Double_t green[9] = { 72./255., 126./255., 154./255., 184./255., 198./255., 207./255., 205./255., 190./255., 179./255.};; 3329 Double_t blue[9] = { 41./255., 120./255., 158./255., 188./255., 194./255., 181./255., 145./255., 100./255., 62./255.};; 3330 Idx = TColor::CreateGradientColorTable(9, stops, red, green, blue, 255, alpha);; 3331 }; 3332 break;; 3333 ; 3334 // Lake; 3335 case 86:; 3336 {; 3337 Double_t red[9] = { 57./255., 72./255., 94./255., 117./255., 136./255., 154./255., 174./255., 192./255., 215./255.};; 3338 Double_t green[9] = { 0./255., 33./255., 68./255., 109./255., 140./255., 171./255., 192./255., 196./255., 209./255.};; 3339 Double_t blue[9] = { 116./255., 137./255., 173./255., 201./255., 200./255., 201./255., 203./255., 190./255., 187./255.};; 3340 Idx = TColor::CreateGradient",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TColor_8cxx_source.html:129178,green,green,129178,doc/master/TColor_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TColor_8cxx_source.html,1,['green'],['green']
Energy Efficiency," 3334 Int_t maxcolors = 0, ncolors = 0;; 3335 ; 3336 // collect different image colors; 3337 int x, y;; 3338 for (x = 0; x < (int) gCws->fWidth; x++) {; 3339 for (y = 0; y < (int) gCws->fHeight; y++) {; 3340 ULong_t pixel = XGetPixel(image, x, y);; 3341 CollectImageColors(pixel, orgcolors, ncolors, maxcolors);; 3342 }; 3343 }; 3344 ; 3345 // get RGB values belonging to pixels; 3346 RXColor *xcol = new RXColor[ncolors];; 3347 ; 3348 int i;; 3349 for (i = 0; i < ncolors; i++) {; 3350 xcol[i].pixel = orgcolors[i];; 3351 xcol[i].red = xcol[i].green = xcol[i].blue = 0;; 3352 xcol[i].flags = DoRed | DoGreen | DoBlue;; 3353 }; 3354 QueryColors(fColormap, xcol, ncolors);; 3355 ; 3356 // create RGB arrays and store RGB's for each color and set number of colors; 3357 // (space must be delete by caller); 3358 R = new Int_t[ncolors];; 3359 G = new Int_t[ncolors];; 3360 B = new Int_t[ncolors];; 3361 ; 3362 for (i = 0; i < ncolors; i++) {; 3363 R[i] = xcol[i].red;; 3364 G[i] = xcol[i].green;; 3365 B[i] = xcol[i].blue;; 3366 }; 3367 ncol = ncolors;; 3368 ; 3369 // update image with indices (pixels) into the new RGB colormap; 3370 for (x = 0; x < (int) gCws->fWidth; x++) {; 3371 for (y = 0; y < (int) gCws->fHeight; y++) {; 3372 ULong_t pixel = XGetPixel(image, x, y);; 3373 Int_t idx = FindColor(pixel, orgcolors, ncolors);; 3374 XPutPixel(image, x, y, idx);; 3375 }; 3376 }; 3377 ; 3378 // cleanup; 3379 delete [] xcol;; 3380 ::operator delete(orgcolors);; 3381}; 3382 ; 3383////////////////////////////////////////////////////////////////////////////////; 3384/// Writes the current window into GIF file. Returns 1 in case of success,; 3385/// 0 otherwise.; 3386 ; 3387Int_t TGX11::WriteGIF(char *name); 3388{; 3389 Byte_t scline[2000], r[256], b[256], g[256];; 3390 Int_t *red, *green, *blue;; 3391 Int_t ncol, maxcol, i;; 3392 ; 3393 if (gXimage) {; 3394 XDestroyImage(gXimage);; 3395 gXimage = nullptr;; 3396 }; 3397 ; 3398 gXimage = XGetImage((Display*)fDisplay, gCws->fDrawing, 0, 0,; 3399",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGX11_8cxx_source.html:111739,green,green,111739,doc/master/TGX11_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGX11_8cxx_source.html,1,['green'],['green']
Energy Efficiency," 3475 case 100:; 3476 {; 3477 Double_t red[9] = { 99./255., 116./255., 154./255., 174./255., 200./255., 196./255., 201./255., 201./255., 230./255.};; 3478 Double_t green[9] = { 0./255., 0./255., 8./255., 32./255., 58./255., 83./255., 119./255., 136./255., 173./255.};; 3479 Double_t blue[9] = { 5./255., 6./255., 7./255., 9./255., 9./255., 14./255., 17./255., 19./255., 24./255.};; 3480 Idx = TColor::CreateGradientColorTable(9, stops, red, green, blue, 255, alpha);; 3481 }; 3482 break;; 3483 ; 3484 // South West; 3485 case 101:; 3486 {; 3487 Double_t red[9] = { 82./255., 106./255., 126./255., 141./255., 155./255., 163./255., 142./255., 107./255., 66./255.};; 3488 Double_t green[9] = { 62./255., 44./255., 69./255., 107./255., 135./255., 152./255., 149./255., 132./255., 119./255.};; 3489 Double_t blue[9] = { 39./255., 25./255., 31./255., 60./255., 73./255., 68./255., 49./255., 72./255., 188./255.};; 3490 Idx = TColor::CreateGradientColorTable(9, stops, red, green, blue, 255, alpha);; 3491 }; 3492 break;; 3493 ; 3494 // Starry Night; 3495 case 102:; 3496 {; 3497 Double_t red[9] = { 18./255., 29./255., 44./255., 72./255., 116./255., 158./255., 184./255., 208./255., 221./255.};; 3498 Double_t green[9] = { 27./255., 46./255., 71./255., 105./255., 146./255., 177./255., 189./255., 190./255., 183./255.};; 3499 Double_t blue[9] = { 39./255., 55./255., 80./255., 108./255., 130./255., 133./255., 124./255., 100./255., 76./255.};; 3500 Idx = TColor::CreateGradientColorTable(9, stops, red, green, blue, 255, alpha);; 3501 }; 3502 break;; 3503 ; 3504 // Sunset; 3505 case 103:; 3506 {; 3507 Double_t red[9] = { 0./255., 48./255., 119./255., 173./255., 212./255., 224./255., 228./255., 228./255., 245./255.};; 3508 Double_t green[9] = { 0./255., 13./255., 30./255., 47./255., 79./255., 127./255., 167./255., 205./255., 245./255.};; 3509 Double_t blue[9] = { 0./255., 68./255., 75./255., 43./255., 16./255., 22./255., 55./255., 128./255., 245./255.};; 3510 Idx = TColor::CreateGradientColorTable(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TColor_8cxx_source.html:138083,green,green,138083,doc/master/TColor_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TColor_8cxx_source.html,1,['green'],['green']
Energy Efficiency," 3506 {; 3507 Double_t red[9] = { 0./255., 48./255., 119./255., 173./255., 212./255., 224./255., 228./255., 228./255., 245./255.};; 3508 Double_t green[9] = { 0./255., 13./255., 30./255., 47./255., 79./255., 127./255., 167./255., 205./255., 245./255.};; 3509 Double_t blue[9] = { 0./255., 68./255., 75./255., 43./255., 16./255., 22./255., 55./255., 128./255., 245./255.};; 3510 Idx = TColor::CreateGradientColorTable(9, stops, red, green, blue, 255, alpha);; 3511 }; 3512 break;; 3513 ; 3514 // Temperature Map; 3515 case 104:; 3516 {; 3517 Double_t red[9] = { 34./255., 70./255., 129./255., 187./255., 225./255., 226./255., 216./255., 193./255., 179./255.};; 3518 Double_t green[9] = { 48./255., 91./255., 147./255., 194./255., 226./255., 229./255., 196./255., 110./255., 12./255.};; 3519 Double_t blue[9] = { 234./255., 212./255., 216./255., 224./255., 206./255., 110./255., 53./255., 40./255., 29./255.};; 3520 Idx = TColor::CreateGradientColorTable(9, stops, red, green, blue, 255, alpha);; 3521 }; 3522 break;; 3523 ; 3524 // Thermometer; 3525 case 105:; 3526 {; 3527 Double_t red[9] = { 30./255., 55./255., 103./255., 147./255., 174./255., 203./255., 188./255., 151./255., 105./255.};; 3528 Double_t green[9] = { 0./255., 65./255., 138./255., 182./255., 187./255., 175./255., 121./255., 53./255., 9./255.};; 3529 Double_t blue[9] = { 191./255., 202./255., 212./255., 208./255., 171./255., 140./255., 97./255., 57./255., 30./255.};; 3530 Idx = TColor::CreateGradientColorTable(9, stops, red, green, blue, 255, alpha);; 3531 }; 3532 break;; 3533 ; 3534 // Valentine; 3535 case 106:; 3536 {; 3537 Double_t red[9] = { 112./255., 97./255., 113./255., 125./255., 138./255., 159./255., 178./255., 188./255., 225./255.};; 3538 Double_t green[9] = { 16./255., 17./255., 24./255., 37./255., 56./255., 81./255., 110./255., 136./255., 189./255.};; 3539 Double_t blue[9] = { 38./255., 35./255., 46./255., 59./255., 78./255., 103./255., 130./255., 152./255., 201./255.};; 3540 Idx = TColor::CreateGradientColo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TColor_8cxx_source.html:139667,green,green,139667,doc/master/TColor_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TColor_8cxx_source.html,1,['green'],['green']
Energy Efficiency," 3535 case 106:; 3536 {; 3537 Double_t red[9] = { 112./255., 97./255., 113./255., 125./255., 138./255., 159./255., 178./255., 188./255., 225./255.};; 3538 Double_t green[9] = { 16./255., 17./255., 24./255., 37./255., 56./255., 81./255., 110./255., 136./255., 189./255.};; 3539 Double_t blue[9] = { 38./255., 35./255., 46./255., 59./255., 78./255., 103./255., 130./255., 152./255., 201./255.};; 3540 Idx = TColor::CreateGradientColorTable(9, stops, red, green, blue, 255, alpha);; 3541 }; 3542 break;; 3543 ; 3544 // Visible Spectrum; 3545 case 107:; 3546 {; 3547 Double_t red[9] = { 18./255., 72./255., 5./255., 23./255., 29./255., 201./255., 200./255., 98./255., 29./255.};; 3548 Double_t green[9] = { 0./255., 0./255., 43./255., 167./255., 211./255., 117./255., 0./255., 0./255., 0./255.};; 3549 Double_t blue[9] = { 51./255., 203./255., 177./255., 26./255., 10./255., 9./255., 8./255., 3./255., 0./255.};; 3550 Idx = TColor::CreateGradientColorTable(9, stops, red, green, blue, 255, alpha);; 3551 }; 3552 break;; 3553 ; 3554 // Water Melon; 3555 case 108:; 3556 {; 3557 Double_t red[9] = { 19./255., 42./255., 64./255., 88./255., 118./255., 147./255., 175./255., 187./255., 205./255.};; 3558 Double_t green[9] = { 19./255., 55./255., 89./255., 125./255., 154./255., 169./255., 161./255., 129./255., 70./255.};; 3559 Double_t blue[9] = { 19./255., 32./255., 47./255., 70./255., 100./255., 128./255., 145./255., 130./255., 75./255.};; 3560 Idx = TColor::CreateGradientColorTable(9, stops, red, green, blue, 255, alpha);; 3561 }; 3562 break;; 3563 ; 3564 // Cool; 3565 case 109:; 3566 {; 3567 Double_t red[9] = { 33./255., 31./255., 42./255., 68./255., 86./255., 111./255., 141./255., 172./255., 227./255.};; 3568 Double_t green[9] = { 255./255., 175./255., 145./255., 106./255., 88./255., 55./255., 15./255., 0./255., 0./255.};; 3569 Double_t blue[9] = { 255./255., 205./255., 202./255., 203./255., 208./255., 205./255., 203./255., 206./255., 231./255.};; 3570 Idx = TColor::CreateGradientColorTable(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TColor_8cxx_source.html:141237,green,green,141237,doc/master/TColor_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TColor_8cxx_source.html,1,['green'],['green']
Energy Efficiency," 37./255., 74./255., 113./255., 160./255., 221./255.};; 2989 Double_t blue[9] = { 28./255., 42./255., 59./255., 78./255., 98./255., 129./255., 154./255., 184./255., 221./255.};; 2990 Idx = TColor::CreateGradientColorTable(9, stops, red, green, blue, 255, alpha);; 2991 }; 2992 break;; 2993 ; 2994 // Grey Scale; 2995 case 52:; 2996 {; 2997 Double_t red[9] = { 0./255., 32./255., 64./255., 96./255., 128./255., 160./255., 192./255., 224./255., 255./255.};; 2998 Double_t green[9] = { 0./255., 32./255., 64./255., 96./255., 128./255., 160./255., 192./255., 224./255., 255./255.};; 2999 Double_t blue[9] = { 0./255., 32./255., 64./255., 96./255., 128./255., 160./255., 192./255., 224./255., 255./255.};; 3000 Idx = TColor::CreateGradientColorTable(9, stops, red, green, blue, 255, alpha);; 3001 }; 3002 break;; 3003 ; 3004 // Dark Body Radiator; 3005 case 53:; 3006 {; 3007 Double_t red[9] = { 0./255., 45./255., 99./255., 156./255., 212./255., 230./255., 237./255., 234./255., 242./255.};; 3008 Double_t green[9] = { 0./255., 0./255., 0./255., 45./255., 101./255., 168./255., 238./255., 238./255., 243./255.};; 3009 Double_t blue[9] = { 0./255., 1./255., 1./255., 3./255., 9./255., 8./255., 11./255., 95./255., 230./255.};; 3010 Idx = TColor::CreateGradientColorTable(9, stops, red, green, blue, 255, alpha);; 3011 }; 3012 break;; 3013 ; 3014 // Two-color hue (dark blue through neutral gray to bright yellow); 3015 case 54:; 3016 {; 3017 Double_t red[9] = { 0./255., 22./255., 44./255., 68./255., 93./255., 124./255., 160./255., 192./255., 237./255.};; 3018 Double_t green[9] = { 0./255., 16./255., 41./255., 67./255., 93./255., 125./255., 162./255., 194./255., 241./255.};; 3019 Double_t blue[9] = { 97./255., 100./255., 99./255., 99./255., 93./255., 68./255., 44./255., 26./255., 74./255.};; 3020 Idx = TColor::CreateGradientColorTable(9, stops, red, green, blue, 255, alpha);; 3021 }; 3022 break;; 3023 ; 3024 // Rain Bow; 3025 case 55:; 3026 {; 3027 Double_t red[9] = { 0./255., 5./255., 15./255., ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TColor_8cxx_source.html:112771,green,green,112771,doc/master/TColor_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TColor_8cxx_source.html,1,['green'],['green']
Energy Efficiency," 392 fSize = fNpoints;; 393 if (fHistogram) {; 394 delete fHistogram;; 395 fHistogram = nullptr;; 396 fDelaunay = nullptr;; 397 }; 398 return ipoint;; 399}; 400 ; 401////////////////////////////////////////////////////////////////////////////////; 402/// Set x, y and z values for point number i; 403 ; 404void TGraph2DErrors::SetPoint(Int_t i, Double_t x, Double_t y, Double_t z); 405{; 406 if (i < 0) return;; 407 if (i >= fNpoints) {; 408 // re-allocate the object; 409 Double_t *savex = new Double_t[i+1];; 410 Double_t *savey = new Double_t[i+1];; 411 Double_t *savez = new Double_t[i+1];; 412 Double_t *saveex = new Double_t[i+1];; 413 Double_t *saveey = new Double_t[i+1];; 414 Double_t *saveez = new Double_t[i+1];; 415 if (fNpoints > 0) {; 416 memcpy(savex, fX, fNpoints*sizeof(Double_t));; 417 memcpy(savey, fY, fNpoints*sizeof(Double_t));; 418 memcpy(savez, fZ, fNpoints*sizeof(Double_t));; 419 memcpy(saveex,fEX,fNpoints*sizeof(Double_t));; 420 memcpy(saveey,fEY,fNpoints*sizeof(Double_t));; 421 memcpy(saveez,fEZ,fNpoints*sizeof(Double_t));; 422 }; 423 if (fX) delete [] fX;; 424 if (fY) delete [] fY;; 425 if (fZ) delete [] fZ;; 426 if (fEX) delete [] fEX;; 427 if (fEY) delete [] fEY;; 428 if (fEZ) delete [] fEZ;; 429 fX = savex;; 430 fY = savey;; 431 fZ = savez;; 432 fEX = saveex;; 433 fEY = saveey;; 434 fEZ = saveez;; 435 fNpoints = i+1;; 436 }; 437 fX[i] = x;; 438 fY[i] = y;; 439 fZ[i] = z;; 440}; 441 ; 442 ; 443////////////////////////////////////////////////////////////////////////////////; 444/// Set ex, ey and ez values for point number i; 445 ; 446void TGraph2DErrors::SetPointError(Int_t i, Double_t ex, Double_t ey, Double_t ez); 447{; 448 if (i < 0) return;; 449 if (i >= fNpoints) {; 450 // re-allocate the object; 451 TGraph2DErrors::SetPoint(i,0,0,0);; 452 }; 453 fEX[i] = ex;; 454 fEY[i] = ey;; 455 fEZ[i] = ez;; 456}; 457 ; 458 ; 459////////////////////////////////////////////////////////////////////////////////; 460/// Stream an object of class TGraph2DErrors.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraph2DErrors_8cxx_source.html:13324,allocate,allocate,13324,doc/master/TGraph2DErrors_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraph2DErrors_8cxx_source.html,1,['allocate'],['allocate']
Energy Efficiency," 42 of file RooSpHarmonic.h. ◆ evaluate(). double RooSpHarmonic::evaluate ; (; ); const. overrideprivatevirtual . Note: P_0^0 = 1, so P_l^m = P_l^m P_0^0. ; Reimplemented from RooLegendre.; Definition at line 111 of file RooSpHarmonic.cxx. ◆ getAnalyticalIntegral(). Int_t RooSpHarmonic::getAnalyticalIntegral ; (; RooArgSet & ; allVars, . RooArgSet & ; analVars, . const char * ; rangeName = nullptr . ); const. overridevirtual . TODO: check that phi.max - phi.min = 2 pi... ctheta.max = +1, and ctheta.min = -1 we don't support indefinite integrals. ; maybe one day, when there is a use for it. ; Reimplemented from RooLegendre.; Definition at line 140 of file RooSpHarmonic.cxx. ◆ getMaxVal(). Int_t RooSpHarmonic::getMaxVal ; (; const RooArgSet & ; vars); const. overridevirtual . Advertise capability to determine maximum value of function for given set of observables. ; If no direct generator method is provided, this information will assist the accept/reject generator to operate more efficiently as it can skip the initial trial sampling phase to empirically find the function maximum ; Reimplemented from RooLegendre.; Definition at line 167 of file RooSpHarmonic.cxx. ◆ IsA(). TClass * RooSpHarmonic::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooLegendre.; Definition at line 42 of file RooSpHarmonic.h. ◆ maxVal(). double RooSpHarmonic::maxVal ; (; Int_t ; code); const. overridevirtual . Return maximum value for set of observables identified by code assigned in getMaxVal. ; Reimplemented from RooLegendre.; Definition at line 171 of file RooSpHarmonic.cxx. ◆ Streamer(). void RooSpHarmonic::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooLegendre. ◆ StreamerNVirtual(). void RooSpHarmonic::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 42 of file RooSpHarmonic.h. Member Data Documentation. ◆ _n. double RooSpHarmon",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooSpHarmonic.html:64865,efficient,efficiently,64865,doc/master/classRooSpHarmonic.html,https://root.cern,https://root.cern/doc/master/classRooSpHarmonic.html,1,['efficient'],['efficiently']
Energy Efficiency," 45namespace ROOT {; 46namespace Math {; 47 ; 48 ; 49//_____________________________________________________________________________________; 50/**; 51 User class for MathMore random numbers template on the Engine type.; 52 The API of this class followed that of the class ROOT::Math::Random; 53 It must be implemented using as Engine one of the derived classes of; 54 ROOT::Math::GSLQuasiRandomEngine, like ROOT::Math::GSLQrngSobol; 55 ; 56 @ingroup QuasiRandom; 57 ; 58*/; 59template < class Engine>; 60class QuasiRandom {; 61 ; 62public:; 63 ; 64 ; 65 /**; 66 Create a QuasiRandom generator. Use default engine constructor.; 67 Engine will be initialized via Initialize() function in order to; 68 allocate resources; 69 */; 70 QuasiRandom(unsigned int dimension = 1) {; 71 fEngine.Initialize(dimension);; 72 }; 73 ; 74 ; 75 /**; 76 Create a QuasiRandom generator based on a provided generic engine.; 77 Engine will be initialized via Initialize() function in order to; 78 allocate resources; 79 */; 80 explicit QuasiRandom(const Engine & e, unsigned int dimension = 1) : fEngine(e) {; 81 fEngine.Initialize(dimension);; 82 }; 83 ; 84 /**; 85 Destructor: call Terminate() function of engine to free any; 86 allocated resource; 87 */; 88 ~QuasiRandom() {; 89 fEngine.Terminate();; 90 }; 91 ; 92 /**; 93 Generate next quasi random numbers points; 94 */; 95 bool Next(double * x) {; 96 return fEngine(x);; 97 }; 98 ; 99 /**; 100 Generate next quasi random numbers point (1 - dimension); 101 */; 102 double Next() {; 103 return fEngine();; 104 }; 105 ; 106 /**; 107 Generate quasi random numbers between ]0,1[; 108 0 and 1 are excluded; 109 Function to be compatible with ROOT TRandom compatibility; 110 */; 111 double Rndm() {; 112 return fEngine();; 113 }; 114 ; 115 /**; 116 skip the next n number and jumb directly to the current state + n; 117 */; 118 bool Skip(unsigned int n) {; 119 return fEngine.Skip(n);; 120 }; 121 /**; 122 Generate an array of random numbers between ]0,1[; 123 Function to ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/QuasiRandom_8h_source.html:2756,allocate,allocate,2756,doc/master/QuasiRandom_8h_source.html,https://root.cern,https://root.cern/doc/master/QuasiRandom_8h_source.html,1,['allocate'],['allocate']
Energy Efficiency," 47 std::string name; ///< node name; 48 std::vector<int> chlds; ///< list of childs id; 49 int vis{0}; ///< visibility flag, 0 - off, 1 - only when level==0, 99 - always; 50 bool nochlds{false}; ///< how far in hierarchy depth should be scanned; 51 ; 52 std::string color; ///< rgb code in hex format; 53 std::string material; ///< name of the material; 54 int sortid{0}; ///<! place in sorted array, to check cuts, or id of original node when used search structures; 55 ; 56 RGeomNodeBase(int _id = 0) : id(_id) {}; 57 ; 58 bool IsVisible() const { return vis > 0; }; 59 ; 60 /** Returns argument for regexp */; 61 const char *GetArg(int kind); 62 {; 63 if (kind == 1) return color.c_str();; 64 if (kind == 2) return material.c_str();; 65 return name.c_str();; 66 }; 67};; 68 ; 69/** Full node description including matrices and other attributes */; 70 ; 71class RGeomNode : public RGeomNodeBase {; 72public:; 73 std::vector<float> matr; ///< matrix for the node, can have reduced number of elements; 74 double vol{0}; ///<! volume estimation; 75 int nfaces{0}; ///<! number of shape faces; 76 int idshift{-1}; ///<! used to jump over then scan all geom hierarchy; 77 bool useflag{false}; ///<! extra flag, used for selection; 78 float opacity{1.}; ///<! opacity of the color; 79 ; 80 RGeomNode(int _id = 0) : RGeomNodeBase(_id) {}; 81 ; 82 /** True when there is shape and it can be displayed */; 83 bool CanDisplay() const { return (vol > 0.) && (nfaces > 0); }; 84};; 85 ; 86/** \class RGeoItem; 87\ingroup rbrowser; 88\brief Representation of single item in the geometry browser; 89*/; 90 ; 91class RGeoItem : public Browsable::RItem {; 92 ; 93protected:; 94 // this is part for browser, visible for I/O; 95 int id{0}; ///< node id; 96 std::string color; ///< color; 97 std::string material; ///< material; 98 int vis{0}; ///< visibility of logical node; 99 int pvis{0}; ///< visibility of physical node; 100 bool top{false}; ///< indicates if node selected as top; 101 ; 102public:; 103 ; 104 /",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RGeomData_8hxx_source.html:2379,reduce,reduced,2379,doc/master/RGeomData_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RGeomData_8hxx_source.html,2,['reduce'],['reduced']
Energy Efficiency," 4780void TBranchElement::ResetAddress(); 4781{; 4782 for (Int_t i = 0; i < fNleaves; ++i) {; 4783 TLeaf* leaf = (TLeaf*) fLeaves.UncheckedAt(i);; 4784 //if (leaf) leaf->SetAddress(0);; 4785 leaf->SetAddress(nullptr);; 4786 }; 4787 ; 4788 // Note: We *must* do the sub-branches first, otherwise; 4789 // we may delete the object containing the sub-branches; 4790 // before giving them a chance to cleanup.; 4791 Int_t nbranches = fBranches.GetEntriesFast();; 4792 for (Int_t i = 0; i < nbranches; ++i) {; 4793 TBranch* br = (TBranch*) fBranches[i];; 4794 if (br) br->ResetAddress();; 4795 }; 4796 ; 4797 //; 4798 // SetAddress may have allocated an object.; 4799 //; 4800 ; 4801 ReleaseObject();; 4802 ; 4803 ResetBit(kAddressSet);; 4804 fAddress = nullptr;; 4805 fObject = nullptr;; 4806}; 4807 ; 4808////////////////////////////////////////////////////////////////////////////////; 4809/// Release ownership of any allocated objects.; 4810///; 4811/// Note: This interface was added so that clone trees could; 4812/// be told they do not own the allocated objects.; 4813 ; 4814void TBranchElement::ResetDeleteObject(); 4815{; 4816 ResetBit(kDeleteObject);; 4817 Int_t nb = fBranches.GetEntriesFast();; 4818 for (Int_t i = 0; i < nb; ++i) {; 4819 TBranch* br = (TBranch*) fBranches[i];; 4820 if (br->InheritsFrom(TBranchElement::Class())) {; 4821 ((TBranchElement*) br)->ResetDeleteObject();; 4822 }; 4823 }; 4824}; 4825 ; 4826////////////////////////////////////////////////////////////////////////////////; 4827/// \brief Reset offset and StreamerInfo information from this branch.; 4828/// \param[in] recurse When true call ResetInitInfo on all subbranches.; 4829///; 4830 ; 4831void TBranchElement::ResetInitInfo(bool recurse); 4832{; 4833 fInfo = nullptr;; 4834 fInit = false;; 4835 fInitOffsets = false;; 4836 fCurrentClass = nullptr;; 4837 delete fReadActionSequence;; 4838 fReadActionSequence = nullptr;; 4839 delete fFillActionSequence;; 4840 fFillActionSequence = nullptr;; 4841 ; 4842 if (",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TBranchElement_8cxx_source.html:178129,allocate,allocated,178129,doc/master/TBranchElement_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TBranchElement_8cxx_source.html,1,['allocate'],['allocated']
Energy Efficiency," 4961/// MyClass(); // Or a constructor with all its arguments defaulted.; 4962/// ~~~; 4963///; 4964/// When more than one pragma ioctortype is used, the first seen as priority; 4965/// For example with:; 4966/// ~~~ {.cpp}; 4967/// #pragma link C++ ioctortype UserClass1;; 4968/// #pragma link C++ ioctortype UserClass2;; 4969/// ~~~; 4970/// We look in the following order:; 4971/// ~~~ {.cpp}; 4972/// MyClass(UserClass1*);; 4973/// MyClass(UserClass2*);; 4974/// MyClass(TRootIOCtor*);; 4975/// MyClass(); // Or a constructor with all its arguments defaulted.; 4976/// ~~~; 4977 ; 4978void *TClass::New(ENewType defConstructor, Bool_t quiet) const; 4979{; 4980 auto obj = NewObject(defConstructor, quiet);; 4981 if (obj.GetPtr() && obj.GetAllocator()) {; 4982 // Register the object for special handling in the destructor.; 4983 RegisterAddressInRepository(""TClass::New"", obj.GetPtr(), this);; 4984 }; 4985 return obj.GetPtr();; 4986}; 4987 ; 4988// See TClass:New; 4989// returns a TClass::ObjectPtr which remembers if the object was allocated; 4990// via a TStreamerInfo.; 4991 ; 4992TClass::ObjectPtr TClass::NewObject(ENewType defConstructor, Bool_t quiet) const; 4993{; 4994 ObjectPtr p;; 4995 ; 4996 if (fNew) {; 4997 // We have the new operator wrapper function,; 4998 // so there is a dictionary and it was generated; 4999 // by rootcint, so there should be a default; 5000 // constructor we can call through the wrapper.; 5001 {; 5002 TClass__GetCallingNewRAII callingNew(defConstructor);; 5003 p = fNew(nullptr);; 5004 }; 5005 if (!p && !quiet) {; 5006 //Error(""New"", ""cannot create object of class %s version %d"", GetName(), fClassVersion);; 5007 Error(""New"", ""cannot create object of class %s"", GetName());; 5008 }; 5009 } else if (HasInterpreterInfo()) {; 5010 // We have the dictionary but do not have the; 5011 // constructor wrapper, so the dictionary was; 5012 // not generated by rootcint. Let's try to; 5013 // create the object by having the interpreter; 5014 // call the new ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TClass_8cxx_source.html:190167,allocate,allocated,190167,doc/v632/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/TClass_8cxx_source.html,1,['allocate'],['allocated']
Energy Efficiency," 5.8, 5.9, respectively. The achieved chi-square was 0.76732. Original spectrum. Fitted function. We have implemented the fitting function with matrix inversion based on Stiefel-Hestens method of the solution of the system of linear equations also for 2-dimensional data. The form of the function is as follows; char* Fit2Stiefel(float **source,; TSpectrumTwoDimFit* p,; int sizex,; int sizey);; This function fits the source spectrum. The calling program should fill in input parameters of the two_dim_fit structure The fitted parameters are written into structure pointed by two_dim_fit structure pointer and fitted data are written back into source spectrum.; Function parameters:. source pointer to the matrix of source spectrum; p pointer to the two_dim_fit structure pointer, see manual; sizex length x of source spectrum; sizey length y of source spectrum. The structure two_dim_fit is the same as in awmi function. The parameters power, fit_taylor are not applicable for this function; The results for small number of fitted parameters are the same as with awmi function. However it converges faster. The example for data given in Figure 5.6 (38 parameters) is presented in the following table:. # of iterations; Chi awmi; Chi-Stiefel. 1; 24.989; 10.415. 5; 20.546; 1.0553. 10; 6.256; 0.84383. 50; 1.0985; 0.64297. 100; 0.657; 1 0.64297. 500; 0.651; 94 0.64297. Again Stiefel-Hestens method converges faster. However its calculation is for this number of parameters approximately 3 times longer. For larger number of parameters the time needed to calculate the inversion grows with the cube of the number of fitted parameters. For example the fit of large number of parameters (2068) for data in Figure 5.8 using awmi algorithm lasted about 12 hours (using 450 MHz PC). The calculation using matrix inversion method is not realizable in reasonable time.; 6 TRANSFORMS; 6.1 1-DIMENSIONAL SPECTRA; Orthogonal transforms can be successfully used for the processing of nuclear spectra . They can b",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/guides/spectrum/Spectrum.html:53232,power,power,53232,root/html534/guides/spectrum/Spectrum.html,https://root.cern,https://root.cern/root/html534/guides/spectrum/Spectrum.html,1,['power'],['power']
Energy Efficiency," 5028/// MyClass(); // Or a constructor with all its arguments defaulted.; 5029/// ~~~; 5030///; 5031/// When more than one pragma ioctortype is used, the first seen as priority; 5032/// For example with:; 5033/// ~~~ {.cpp}; 5034/// #pragma link C++ ioctortype UserClass1;; 5035/// #pragma link C++ ioctortype UserClass2;; 5036/// ~~~; 5037/// We look in the following order:; 5038/// ~~~ {.cpp}; 5039/// MyClass(UserClass1*);; 5040/// MyClass(UserClass2*);; 5041/// MyClass(TRootIOCtor*);; 5042/// MyClass(); // Or a constructor with all its arguments defaulted.; 5043/// ~~~; 5044 ; 5045void *TClass::New(ENewType defConstructor, Bool_t quiet) const; 5046{; 5047 auto obj = NewObject(defConstructor, quiet);; 5048 if (obj.GetPtr() && obj.GetAllocator()) {; 5049 // Register the object for special handling in the destructor.; 5050 RegisterAddressInRepository(""TClass::New"", obj.GetPtr(), this);; 5051 }; 5052 return obj.GetPtr();; 5053}; 5054 ; 5055// See TClass:New; 5056// returns a TClass::ObjectPtr which remembers if the object was allocated; 5057// via a TStreamerInfo.; 5058 ; 5059TClass::ObjectPtr TClass::NewObject(ENewType defConstructor, Bool_t quiet) const; 5060{; 5061 ObjectPtr p;; 5062 ; 5063 if (fNew) {; 5064 // We have the new operator wrapper function,; 5065 // so there is a dictionary and it was generated; 5066 // by rootcint, so there should be a default; 5067 // constructor we can call through the wrapper.; 5068 {; 5069 TClass__GetCallingNewRAII callingNew(defConstructor);; 5070 p = fNew(nullptr);; 5071 }; 5072 if (!p && !quiet) {; 5073 //Error(""New"", ""cannot create object of class %s version %d"", GetName(), fClassVersion);; 5074 Error(""New"", ""cannot create object of class %s"", GetName());; 5075 }; 5076 } else if (HasInterpreterInfo()) {; 5077 // We have the dictionary but do not have the; 5078 // constructor wrapper, so the dictionary was; 5079 // not generated by rootcint. Let's try to; 5080 // create the object by having the interpreter; 5081 // call the new ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClass_8cxx_source.html:192918,allocate,allocated,192918,doc/master/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TClass_8cxx_source.html,1,['allocate'],['allocated']
Energy Efficiency," 503,; 14061 ""%s"",; 14062 ""Error: SSL forward not configured properly"");; 14063 mg_cry_internal(conn,; 14064 ""%s"",; 14065 ""Can not redirect to SSL, no SSL port available"");; 14066 }; 14067 return;; 14068 }; 14069 uri_len = (int)strlen(ri->local_uri);; 14070 ; 14071 /* 1.3. decode url (if config says so) */; 14072 if (should_decode_url(conn)) {; 14073 mg_url_decode(; 14074 ri->local_uri, uri_len, (char *)ri->local_uri, uri_len + 1, 0);; 14075 }; 14076 ; 14077 /* URL decode the query-string only if explicity set in the configuration */; 14078 if (conn->request_info.query_string) {; 14079 if (should_decode_query_string(conn)) {; 14080 url_decode_in_place((char *)conn->request_info.query_string);; 14081 }; 14082 }; 14083 ; 14084 /* 1.4. clean URIs, so a path like allowed_dir/../forbidden_file is not; 14085 * possible. The fact that we cleaned the URI is stored in that the; 14086 * pointer to ri->local_ur and ri->local_uri_raw are now different.; 14087 * ri->local_uri_raw still points to memory allocated in; 14088 * worker_thread_run(). ri->local_uri is private to the request so we; 14089 * don't have to use preallocated memory here. */; 14090 tmp = mg_strdup(ri->local_uri_raw);; 14091 if (!tmp) {; 14092 /* Out of memory. We cannot do anything reasonable here. */; 14093 return;; 14094 }; 14095 remove_dot_segments(tmp);; 14096 ri->local_uri = tmp;; 14097 ; 14098 /* step 1. completed, the url is known now */; 14099 DEBUG_TRACE(""URL: %s"", ri->local_uri);; 14100 ; 14101 /* 2. if this ip has limited speed, set it for this connection */; 14102 conn->throttle = set_throttle(conn->dom_ctx->config[THROTTLE],; 14103 &conn->client.rsa,; 14104 ri->local_uri);; 14105 ; 14106 /* 3. call a ""handle everything"" callback, if registered */; 14107 if (conn->phys_ctx->callbacks.begin_request != NULL) {; 14108 /* Note that since V1.7 the ""begin_request"" function is called; 14109 * before an authorization check. If an authorization check is; 14110 * required, use a request_handler instead. */; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:413069,allocate,allocated,413069,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,1,['allocate'],['allocated']
Energy Efficiency," 503,; 14062 ""%s"",; 14063 ""Error: SSL forward not configured properly"");; 14064 mg_cry_internal(conn,; 14065 ""%s"",; 14066 ""Can not redirect to SSL, no SSL port available"");; 14067 }; 14068 return;; 14069 }; 14070 uri_len = (int)strlen(ri->local_uri);; 14071 ; 14072 /* 1.3. decode url (if config says so) */; 14073 if (should_decode_url(conn)) {; 14074 mg_url_decode(; 14075 ri->local_uri, uri_len, (char *)ri->local_uri, uri_len + 1, 0);; 14076 }; 14077 ; 14078 /* URL decode the query-string only if explicity set in the configuration */; 14079 if (conn->request_info.query_string) {; 14080 if (should_decode_query_string(conn)) {; 14081 url_decode_in_place((char *)conn->request_info.query_string);; 14082 }; 14083 }; 14084 ; 14085 /* 1.4. clean URIs, so a path like allowed_dir/../forbidden_file is not; 14086 * possible. The fact that we cleaned the URI is stored in that the; 14087 * pointer to ri->local_ur and ri->local_uri_raw are now different.; 14088 * ri->local_uri_raw still points to memory allocated in; 14089 * worker_thread_run(). ri->local_uri is private to the request so we; 14090 * don't have to use preallocated memory here. */; 14091 tmp = mg_strdup(ri->local_uri_raw);; 14092 if (!tmp) {; 14093 /* Out of memory. We cannot do anything reasonable here. */; 14094 return;; 14095 }; 14096 remove_dot_segments(tmp);; 14097 ri->local_uri = tmp;; 14098 ; 14099 /* step 1. completed, the url is known now */; 14100 DEBUG_TRACE(""URL: %s"", ri->local_uri);; 14101 ; 14102 /* 2. if this ip has limited speed, set it for this connection */; 14103 conn->throttle = set_throttle(conn->dom_ctx->config[THROTTLE],; 14104 &conn->client.rsa,; 14105 ri->local_uri);; 14106 ; 14107 /* 3. call a ""handle everything"" callback, if registered */; 14108 if (conn->phys_ctx->callbacks.begin_request != NULL) {; 14109 /* Note that since V1.7 the ""begin_request"" function is called; 14110 * before an authorization check. If an authorization check is; 14111 * required, use a request_handler instead. */; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:413102,allocate,allocated,413102,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,1,['allocate'],['allocated']
Energy Efficiency," 5547 // not generated by rootcint. Let's try to; 5548 // delete the array by having the interpreter; 5549 // call the array delete operator, hopefully; 5550 // the class library is loaded and there will be; 5551 // a destructor we can call.; 5552 gCling->ClassInfo_DeleteArray(GetClassInfo(),ary, dtorOnly);; 5553 } else if (!HasInterpreterInfo() && fCollectionProxy) {; 5554 // There is no dictionary at all, so this is an emulated; 5555 // class; however we do have the services of a collection proxy,; 5556 // so this is an emulated STL class.; 5557 GetCollectionProxy()->DeleteArray(ary, dtorOnly);; 5558 } else if (!HasInterpreterInfo() && !fCollectionProxy) {; 5559 // There is no dictionary at all and we do not have; 5560 // the services of a collection proxy available, so; 5561 // use the streamer info to approximate calling the; 5562 // array destructor.; 5563 ; 5564 Bool_t inRepo = kTRUE;; 5565 Bool_t currentVersion = kFALSE;; 5566 ; 5567 // Was this array object allocated through TClass?; 5568 Version_t objVer = -1;; 5569 {; 5570 R__LOCKGUARD2(fOVRMutex);; 5571 RepoCont_t::iterator iter = fObjectVersionRepository.find(p);; 5572 if (iter == fObjectVersionRepository.end()) {; 5573 // No, it wasn't, we cannot know what to do.; 5574 //Error(""DeleteArray"", ""Attempt to delete unregistered array object, element type '%s', at address %p!"", GetName(), p);; 5575 inRepo = kFALSE;; 5576 } else {; 5577 for (; (iter != fObjectVersionRepository.end()) && (iter->first == p); ++iter) {; 5578 objVer = iter->second;; 5579 if (objVer == fClassVersion) {; 5580 currentVersion = kTRUE;; 5581 break;; 5582 }; 5583 }; 5584 }; 5585 }; 5586 ; 5587 if (!inRepo || currentVersion) {; 5588 // The object was allocated using code for the same class version; 5589 // as is loaded now. We may proceed without worry.; 5590 TVirtualStreamerInfo* si = GetStreamerInfo();; 5591 if (si) {; 5592 si->DeleteArray(ary, dtorOnly);; 5593 } else {; 5594 Error(""DeleteArray"", ""No streamer info available for class '%",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TClass_8cxx_source.html:213050,allocate,allocated,213050,doc/v632/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/TClass_8cxx_source.html,1,['allocate'],['allocated']
Energy Efficiency," 5614 // not generated by rootcint. Let's try to; 5615 // delete the array by having the interpreter; 5616 // call the array delete operator, hopefully; 5617 // the class library is loaded and there will be; 5618 // a destructor we can call.; 5619 gCling->ClassInfo_DeleteArray(GetClassInfo(),ary, dtorOnly);; 5620 } else if (!HasInterpreterInfo() && fCollectionProxy) {; 5621 // There is no dictionary at all, so this is an emulated; 5622 // class; however we do have the services of a collection proxy,; 5623 // so this is an emulated STL class.; 5624 GetCollectionProxy()->DeleteArray(ary, dtorOnly);; 5625 } else if (!HasInterpreterInfo() && !fCollectionProxy) {; 5626 // There is no dictionary at all and we do not have; 5627 // the services of a collection proxy available, so; 5628 // use the streamer info to approximate calling the; 5629 // array destructor.; 5630 ; 5631 Bool_t inRepo = kTRUE;; 5632 Bool_t currentVersion = kFALSE;; 5633 ; 5634 // Was this array object allocated through TClass?; 5635 Version_t objVer = -1;; 5636 {; 5637 R__LOCKGUARD2(fOVRMutex);; 5638 RepoCont_t::iterator iter = fObjectVersionRepository.find(p);; 5639 if (iter == fObjectVersionRepository.end()) {; 5640 // No, it wasn't, we cannot know what to do.; 5641 //Error(""DeleteArray"", ""Attempt to delete unregistered array object, element type '%s', at address %p!"", GetName(), p);; 5642 inRepo = kFALSE;; 5643 } else {; 5644 for (; (iter != fObjectVersionRepository.end()) && (iter->first == p); ++iter) {; 5645 objVer = iter->second;; 5646 if (objVer == fClassVersion) {; 5647 currentVersion = kTRUE;; 5648 break;; 5649 }; 5650 }; 5651 }; 5652 }; 5653 ; 5654 if (!inRepo || currentVersion) {; 5655 // The object was allocated using code for the same class version; 5656 // as is loaded now. We may proceed without worry.; 5657 TVirtualStreamerInfo* si = GetStreamerInfo();; 5658 if (si) {; 5659 si->DeleteArray(ary, dtorOnly);; 5660 } else {; 5661 Error(""DeleteArray"", ""No streamer info available for class '%",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClass_8cxx_source.html:215801,allocate,allocated,215801,doc/master/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TClass_8cxx_source.html,1,['allocate'],['allocated']
Energy Efficiency," 57./255., 59./255., 75./255., 106./255., 142./255., 173./255.};; 3269 Double_t blue[9] = { 78./255., 55./255., 46./255., 40./255., 39./255., 39./255., 40./255., 41./255., 47./255.};; 3270 Idx = TColor::CreateGradientColorTable(9, stops, red, green, blue, 255, alpha);; 3271 }; 3272 break;; 3273 ; 3274 // Fruit Punch; 3275 case 80:; 3276 {; 3277 Double_t red[9] = { 243./255., 222./255., 201./255., 185./255., 165./255., 158./255., 166./255., 187./255., 219./255.};; 3278 Double_t green[9] = { 94./255., 108./255., 132./255., 135./255., 125./255., 96./255., 68./255., 51./255., 61./255.};; 3279 Double_t blue[9] = { 7./255., 9./255., 12./255., 19./255., 45./255., 89./255., 118./255., 146./255., 118./255.};; 3280 Idx = TColor::CreateGradientColorTable(9, stops, red, green, blue, 255, alpha);; 3281 }; 3282 break;; 3283 ; 3284 // Fuchsia; 3285 case 81:; 3286 {; 3287 Double_t red[9] = { 19./255., 44./255., 74./255., 105./255., 137./255., 166./255., 194./255., 206./255., 220./255.};; 3288 Double_t green[9] = { 19./255., 28./255., 40./255., 55./255., 82./255., 110./255., 159./255., 181./255., 220./255.};; 3289 Double_t blue[9] = { 19./255., 42./255., 68./255., 96./255., 129./255., 157./255., 188./255., 203./255., 220./255.};; 3290 Idx = TColor::CreateGradientColorTable(9, stops, red, green, blue, 255, alpha);; 3291 }; 3292 break;; 3293 ; 3294 // Grey Yellow; 3295 case 82:; 3296 {; 3297 Double_t red[9] = { 33./255., 44./255., 70./255., 99./255., 140./255., 165./255., 199./255., 211./255., 216./255.};; 3298 Double_t green[9] = { 38./255., 50./255., 76./255., 105./255., 140./255., 165./255., 191./255., 189./255., 167./255.};; 3299 Double_t blue[9] = { 55./255., 67./255., 97./255., 124./255., 140./255., 166./255., 163./255., 129./255., 52./255.};; 3300 Idx = TColor::CreateGradientColorTable(9, stops, red, green, blue, 255, alpha);; 3301 }; 3302 break;; 3303 ; 3304 // Green Brown Terrain; 3305 case 83:; 3306 {; 3307 Double_t red[9] = { 0./255., 33./255., 73./255., 124./255., 136./255",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TColor_8cxx_source.html:127306,green,green,127306,doc/master/TColor_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TColor_8cxx_source.html,1,['green'],['green']
Energy Efficiency," 6235 1147 87.5 0.333 5 5.095 44.16 0 0 0 2; 10 5218 1018 87.5 0.333 12 4.983 40.99 0 2 0 0; 11 4193 1025 87.5 0.667 53 5.229 37.5 0 0 4 0; 12 3299 893.8 88.8 0.333 6 -4.058 54.27 0 0 1 1; 13 2458 841.2 88.8 0.333 7 -4.155 48.73 0 1 0 1; 14 1933 524.7 88.8 0.333 13 -3.291 48.45 0 1 1 0; 15 1675 258.1 88.8 0.5 19 4.211 14.56 1 0 0 2; 16 1334 340.6 88.8 0.5 26 -4.731 15.22 1 1 0 1; 17 1079 255.5 88.8 0.5 33 3.953 16.35 1 0 2 0; 18 788.2 290.4 88.8 0.5 34 4.687 13.22 1 2 0 0; 19 709.2 78.94 89.4 0.5 21 2.23 15.88 0 1 1 1; 20 473.4 235.8 89.4 0.5 23 -3.543 18.78 1 0 1 1; 21 235.4 238 89.4 0.5 28 -3.976 15.06 1 1 1 0; Results of Parameterisation:; ----------------------------; Total reduction of square residuals 5.063e+05; Relative precision obtained: 0.01185; Error obtained: 235.4; Multiple correlation coefficient: 0.9995; Reduced Chi square over sample: 0.4975; Maximum residual value: 3.243; Minimum residual value: -2.59; Estimated root mean square: 0.6862; Maximum powers used: 1 2 4 2 ; Function codes of candidate functions.; 1: considered, 2: too little contribution, 3: accepted.; 3333333333 1133311113 1313113131 1113311111 1111111111 1113111111; 1111111111 1111111111 1111111111 1111111111 1111111111 1111111111; 111111; Loop over candidates stopped because max allowed studies reached; ; Coefficients:; -------------; # Value Error Powers; ---------------------------------------; 0 -4.371 0.08798 0 0 0 0; 1 43.15 0.1601 1 0 0 0; 2 13.43 0.08032 0 0 0 1; 3 13.46 0.07805 0 0 1 0; 4 13.4 0.08054 0 1 0 0; 5 13.33 0.1423 1 1 0 0; 6 13.3 0.1367 1 0 0 1; 7 13.35 0.1331 1 0 1 0; 8 4.497 0.1511 0 0 0 2; 9 4.639 0.1585 0 2 0 0; 10 4.89 0.164 0 0 4 0; 11 -3.7 0.1364 0 0 1 1; 12 -3.986 0.1438 0 1 0 1; 13 -3.862 0.1458 0 1 1 0; 14 4.361 0.2614 1 0 0 2; 15 -4.026 0.2555 1 1 0 1; 16 4.57 0.2477 1 0 2 0; 17 4.698 0.2729 1 2 0 0; 18 2.838 0.2525 0 1 1 1; 19 -3.489 0.2292 1 0 1 1; 20 -3.976 0.2566 1 1 1 0; ; Results of Fit:; ---------------; Test sample size: 2100; Multiple correlation c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/multidimfit_8C.html:2448,power,powers,2448,doc/master/multidimfit_8C.html,https://root.cern,https://root.cern/doc/master/multidimfit_8C.html,1,['power'],['powers']
Energy Efficiency," 7112 UInt_t newBsize = UInt_t(bsize);; 7113 if (pass) { // only on the second pass so that it doesn't interfere with scaling; 7114 // If there is an entry offset, it will be stored in the same buffer as the object data; hence,; 7115 // we must bump up the size of the branch to account for this extra footprint.; 7116 // If fAutoFlush is not set yet, let's assume that it is 'in the process of being set' to; 7117 // the value of GetEntries().; 7118 Long64_t clusterSize = (fAutoFlush > 0) ? fAutoFlush : branch->GetEntries();; 7119 if (branch->GetEntryOffsetLen()) {; 7120 newBsize = newBsize + (clusterSize * sizeof(Int_t) * 2);; 7121 }; 7122 // We used ATLAS fully-split xAOD for testing, which is a rather unbalanced TTree, 10K branches,; 7123 // with 8K having baskets smaller than 512 bytes. To achieve good I/O performance ATLAS uses auto-flush 100,; 7124 // resulting in the smallest baskets being ~300-400 bytes, so this change increases their memory by about 8k*150B =~ 1MB,; 7125 // at the same time it significantly reduces the number of total baskets because it ensures that all 100 entries can be; 7126 // stored in a single basket (the old optimization tended to make baskets too small). In a toy example with fixed sized; 7127 // structures we found a factor of 2 fewer baskets needed in the new scheme.; 7128 // rounds up, increases basket size to ensure all entries fit into single basket as intended; 7129 newBsize = newBsize - newBsize%512 + 512;; 7130 }; 7131 if (newBsize < sizeOfOneEntry) newBsize = sizeOfOneEntry;; 7132 if (newBsize < bmin) newBsize = bmin;; 7133 if (newBsize > 10000000) newBsize = bmax;; 7134 if (pass) {; 7135 if (pDebug) Info(""OptimizeBaskets"", ""Changing buffer size from %6d to %6d bytes for %s\n"",oldBsize,newBsize,branch->GetName());; 7136 branch->SetBasketSize(newBsize);; 7137 }; 7138 newMemsize += newBsize;; 7139 // For this number to be somewhat accurate when newBsize is 'low'; 7140 // we do not include any space for meta data in the requested ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8cxx_source.html:279365,reduce,reduces,279365,doc/master/TTree_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTree_8cxx_source.html,1,['reduce'],['reduces']
Energy Efficiency," 754-2008 16-bit) float fields. This can be enabled through RField<float>::SetHalfPrecision(). On reading, values of such fields are represented as regular, 32-bit floats.; A new RNTupleInspector utility class has been added, to provide information about the on-disk metadata of an RNTuple.; A new RNTupleParallelWriter class has been added, providing (initial) support for parallel writing of RNTuples.; A new static method RFieldBase::Check() has been added, which produces a support status report of a type with regards to RNTuple I/O.; A new internal RNTupleMerger class has been added, enabling the merging of different page sources into one page sink. This also means that RNTuples can be merged through hadd.; Zero-copy bulk reading has been added, with extra optimizations for ROOT::RVec fields.; It is now possible to use the RNTupleView with an external address with type erasure, e.g.:; std::shared_ptr<void> data{new float()};; auto view = reader->GetView(""pt"", data);; This enables use cases such as reading one specific entry of one specific field into a previously allocated memory location.; Further integration with RDataFrame: it is now possible to create RDataFrame for chains of RNTuples. This addition also comes with improvements to the multi-threaded work scheduling.; Many additional bug fixes and improvements. Please, report any issues regarding the above mentioned features should you encounter them. RNTuple is still in pre-production. The on-disk format is scheduled to be finalized by the end of 2024. Thus, we appreciate feedback and suggestions for improvement.; Histogram Libraries. Implement the FLT_MAX mechanism for THStack::GetMaximum() and THStack::GetMiniumum().; Print a warning when the range given to TAxis::SetRange is invalid.; Fix projection name in TH3 as requested here. Parallelism. The ROOT::Experimental::TFuture template has been removed. RooFit Libraries; New CPU likelihood evaluation backend by default; The new vectorizing CPU evaluation backend ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/release-notes.html:7179,allocate,allocated,7179,doc/v632/release-notes.html,https://root.cern,https://root.cern/doc/v632/release-notes.html,1,['allocate'],['allocated']
Energy Efficiency," 85./255., 101./255., 138./255., 163./255., 122./255., 51./255., 39./255.};; 3249 Double_t blue[9] = { 121./255., 101./255., 58./255., 44./255., 47./255., 55./255., 57./255., 44./255., 43./255.};; 3250 Idx = TColor::CreateGradientColorTable(9, stops, red, green, blue, 255, alpha);; 3251 }; 3252 break;; 3253 ; 3254 // Dark Terrain; 3255 case 78:; 3256 {; 3257 Double_t red[9] = { 0./255., 41./255., 62./255., 79./255., 90./255., 87./255., 99./255., 140./255., 228./255.};; 3258 Double_t green[9] = { 0./255., 57./255., 81./255., 93./255., 85./255., 70./255., 71./255., 125./255., 228./255.};; 3259 Double_t blue[9] = { 95./255., 91./255., 91./255., 82./255., 60./255., 43./255., 44./255., 112./255., 228./255.};; 3260 Idx = TColor::CreateGradientColorTable(9, stops, red, green, blue, 255, alpha);; 3261 }; 3262 break;; 3263 ; 3264 // Fall; 3265 case 79:; 3266 {; 3267 Double_t red[9] = { 49./255., 59./255., 72./255., 88./255., 114./255., 141./255., 176./255., 205./255., 222./255.};; 3268 Double_t green[9] = { 78./255., 72./255., 66./255., 57./255., 59./255., 75./255., 106./255., 142./255., 173./255.};; 3269 Double_t blue[9] = { 78./255., 55./255., 46./255., 40./255., 39./255., 39./255., 40./255., 41./255., 47./255.};; 3270 Idx = TColor::CreateGradientColorTable(9, stops, red, green, blue, 255, alpha);; 3271 }; 3272 break;; 3273 ; 3274 // Fruit Punch; 3275 case 80:; 3276 {; 3277 Double_t red[9] = { 243./255., 222./255., 201./255., 185./255., 165./255., 158./255., 166./255., 187./255., 219./255.};; 3278 Double_t green[9] = { 94./255., 108./255., 132./255., 135./255., 125./255., 96./255., 68./255., 51./255., 61./255.};; 3279 Double_t blue[9] = { 7./255., 9./255., 12./255., 19./255., 45./255., 89./255., 118./255., 146./255., 118./255.};; 3280 Idx = TColor::CreateGradientColorTable(9, stops, red, green, blue, 255, alpha);; 3281 }; 3282 break;; 3283 ; 3284 // Fuchsia; 3285 case 81:; 3286 {; 3287 Double_t red[9] = { 19./255., 44./255., 74./255., 105./255., 137./255., 166./255., 194./",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TColor_8cxx_source.html:126263,green,green,126263,doc/master/TColor_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TColor_8cxx_source.html,1,['green'],['green']
Energy Efficiency," 88 return std::numeric_limits<double>::quiet_NaN();; 89 }; 90 double abs_alpha = std::abs(alpha);; 91 double C = n/abs_alpha * 1./(n-1.) * std::exp(-alpha*alpha/2.);; 92 double D = std::sqrt(M_PI/2.)*(1.+ROOT::Math::erf(abs_alpha/std::sqrt(2.)));; 93 double totIntegral = sigma*(C+D);; 94 ; 95 double integral = crystalball_integral(x,alpha,n,sigma,mean); ; 96 return (alpha > 0) ? integral/totIntegral : 1. - (integral/totIntegral); ; 97 }; 98 double crystalball_integral(double x, double alpha, double n, double sigma, double mean); 99 {; 100 // compute the integral of the crystal ball function (ROOT::Math::crystalball_function); 101 // If alpha > 0 the integral is the right tail integral.; 102 // If alpha < 0 is the left tail integrals which are always finite for finite x. ; 103 // parameters:; 104 // alpha : is non equal to zero, define the # of sigma from which it becomes a power-law function (from mean-alpha*sigma); 105 // n > 1 : is integrer, is the power of the low tail; 106 // add a value xmin for cases when n <=1 the integral diverges ; 107 if (sigma == 0) return 0;; 108 if (alpha==0); 109 {; 110 MATH_ERROR_MSG(""crystalball_integral"",""CrystalBall function not defined at alpha=0"");; 111 return 0.;; 112 }; 113 bool useLog = (n == 1.0); ; 114 if (n<=0) MATH_WARN_MSG(""crystalball_integral"",""No physical meaning when n<=0"");; 115 ; 116 double z = (x-mean)/sigma;; 117 if (alpha < 0 ) z = -z;; 118 ; 119 double abs_alpha = std::abs(alpha);; 120 ; 121 //double D = *(1.+ROOT::Math::erf(abs_alpha/std::sqrt(2.)));; 122 //double N = 1./(sigma*(C+D));; 123 double intgaus = 0.;; 124 double intpow = 0.;; 125 ; 126 const double sqrtpiover2 = std::sqrt(M_PI/2.);; 127 const double sqrt2pi = std::sqrt( 2.*M_PI); ; 128 const double oneoversqrt2 = 1./sqrt(2.);; 129 if (z <= -abs_alpha); 130 {; 131 double A = std::pow(n/abs_alpha,n) * std::exp(-0.5 * alpha*alpha);; 132 double B = n/abs_alpha - abs_alpha;; 133 ; 134 if (!useLog) {; 135 double C = (n/abs_alpha) * (1./(n-1)) * std::exp(-",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/ProbFuncMathCore_8cxx_source.html:3402,power,power-law,3402,doc/master/ProbFuncMathCore_8cxx_source.html,https://root.cern,https://root.cern/doc/master/ProbFuncMathCore_8cxx_source.html,2,['power'],"['power', 'power-law']"
Energy Efficiency," 93./255., 125./255., 162./255., 194./255., 241./255.};; 3019 Double_t blue[9] = { 97./255., 100./255., 99./255., 99./255., 93./255., 68./255., 44./255., 26./255., 74./255.};; 3020 Idx = TColor::CreateGradientColorTable(9, stops, red, green, blue, 255, alpha);; 3021 }; 3022 break;; 3023 ; 3024 // Rain Bow; 3025 case 55:; 3026 {; 3027 Double_t red[9] = { 0./255., 5./255., 15./255., 35./255., 102./255., 196./255., 208./255., 199./255., 110./255.};; 3028 Double_t green[9] = { 0./255., 48./255., 124./255., 192./255., 206./255., 226./255., 97./255., 16./255., 0./255.};; 3029 Double_t blue[9] = { 99./255., 142./255., 198./255., 201./255., 90./255., 22./255., 13./255., 8./255., 2./255.};; 3030 Idx = TColor::CreateGradientColorTable(9, stops, red, green, blue, 255, alpha);; 3031 }; 3032 break;; 3033 ; 3034 // Inverted Dark Body Radiator; 3035 case 56:; 3036 {; 3037 Double_t red[9] = { 242./255., 234./255., 237./255., 230./255., 212./255., 156./255., 99./255., 45./255., 0./255.};; 3038 Double_t green[9] = { 243./255., 238./255., 238./255., 168./255., 101./255., 45./255., 0./255., 0./255., 0./255.};; 3039 Double_t blue[9] = { 230./255., 95./255., 11./255., 8./255., 9./255., 3./255., 1./255., 1./255., 0./255.};; 3040 Idx = TColor::CreateGradientColorTable(9, stops, red, green, blue, 255, alpha);; 3041 }; 3042 break;; 3043 ; 3044 // Bird; 3045 case 57:; 3046 {; 3047 Double_t red[9] = { 0.2082, 0.0592, 0.0780, 0.0232, 0.1802, 0.5301, 0.8186, 0.9956, 0.9764};; 3048 Double_t green[9] = { 0.1664, 0.3599, 0.5041, 0.6419, 0.7178, 0.7492, 0.7328, 0.7862, 0.9832};; 3049 Double_t blue[9] = { 0.5293, 0.8684, 0.8385, 0.7914, 0.6425, 0.4662, 0.3499, 0.1968, 0.0539};; 3050 Idx = TColor::CreateGradientColorTable(9, stops, red, green, blue, 255, alpha);; 3051 }; 3052 break;; 3053 ; 3054 // Cubehelix; 3055 case 58:; 3056 {; 3057 Double_t red[9] = { 0.0000, 0.0956, 0.0098, 0.2124, 0.6905, 0.9242, 0.7914, 0.7596, 1.0000};; 3058 Double_t green[9] = { 0.0000, 0.1147, 0.3616, 0.5041, 0.4577, 0.4691,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TColor_8cxx_source.html:114387,green,green,114387,doc/master/TColor_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TColor_8cxx_source.html,1,['green'],['green']
Energy Efficiency," : TRangeCast{col != nullptr ? *col : ROOT::Internal::EmptyCollection()} {}; 317};; 318 ; 319/// @brief TRangeStaticCast is an adapter class that allows the typed iteration; 320/// through a TCollection. This requires the collection to contain elements; 321/// of the type requested (or a derived class). Any deviation from this expectation; 322/// will only be caught/reported by an assert in debug builds.; 323///; 324/// This is best used with a TClonesArray, for other cases prefered TRangeDynCast.; 325///; 326/// The typical use is:; 327/// ```{.cpp}; 328/// for(auto bcl : TRangeStaticCast<TBaseClass>( *tbaseClassClonesArrayPtr )) {; 329/// ... use bcl as a TBaseClass*; 330/// }; 331/// for(auto bcl : TRangeStaticCast<TBaseClass>( tbaseClassClonesArrayPtr )) {; 332/// ... use bcl as a TBaseClass*; 333/// }; 334/// ```; 335/// \tparam T The new type to convert to.; 336template <typename T>; 337using TRangeStaticCast = TRangeCast<T, false>;; 338 ; 339} // namespace Detail; 340} // namespace ROOT; 341 ; 342/// @brief TRangeDynCast is an adapter class that allows the typed iteration; 343/// through a TCollection.; 344///; 345/// The typical use is:; 346/// ```{.cpp}; 347/// for(auto bcl : TRangeDynCast<TBaseClass>( *cl->GetListOfBases() )) {; 348/// if (!bcl) continue;; 349/// ... use bcl as a TBaseClass*; 350/// }; 351/// for(auto bcl : TRangeDynCast<TBaseClass>( cl->GetListOfBases() )) {; 352/// if (!bcl) continue;; 353/// ... use bcl as a TBaseClass*; 354/// }; 355/// ```; 356/// \tparam T The new type to convert to.; 357template <typename T>; 358using TRangeDynCast = ROOT::Detail::TRangeCast<T, true>;; 359 ; 360#define R__COLL_COND_MUTEX(mutex) this->IsUsingRWLock() ? mutex : nullptr; 361 ; 362#define R__COLLECTION_READ_LOCKGUARD(mutex) ::ROOT::TReadLockGuard _R__UNIQUE_(R__readguard)(R__COLL_COND_MUTEX(mutex)); 363#define R__COLLECTION_READ_LOCKGUARD_NAMED(name,mutex) ::ROOT::TReadLockGuard _NAME2_(R__readguard,name)(R__COLL_COND_MUTEX(mutex)); 364 ; 365#define R__C",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCollection_8h_source.html:13374,adapt,adapter,13374,doc/master/TCollection_8h_source.html,https://root.cern,https://root.cern/doc/master/TCollection_8h_source.html,1,['adapt'],['adapter']
Energy Efficiency," : change the Marker attributes (color, appearance, thickness) see TAttMarkerEditor; This Tab has two different layouts. One is for a histogram which is not drawn from an ntuple. The other one is available for a histogram which is drawn from an ntuple. In this case the rebin algorithm can create a rebinned histogram from the original data i.e. the ntuple. To see te differences do: TFile f(""hsimple.root""); hpx->Draw(""BAR1""); // non ntuple histogram ntuple->Draw(""px""); // ntuple histogram Non ntuple histogram: 'Rebin': with the Slider the number of bins (shown in the field below the Slider) can be changed to any number which divides the number of bins of the original histogram. Pushing 'Apply' will delete the origin histogram and replace it by the rebinned one on the screen Pushing 'Ignore' the origin histogram will be restored Histogram drawn from an ntuple: 'Rebin' with the slider the number of bins can be enlarged by a factor of 2,3,4,5 (moving to the right) or reduced by a factor of 1/2, 1/3, 1/4, 1/5 'BinOffset': with the BinOffset slider the origin of the histogram can be changed within one binwidth Using this slider the effect of binning the data into bins can be made visible => statistical fluctuations 'Axis Range': with the DoubleSlider it is possible to zoom into the specified axis range. It is also possible to set the upper and lower limit in fields below the slider 'Delayed drawing': all the Binning sliders can set to delay draw mode. Then the changes on the histogram are only updated, when the Slider is released. This should be activated if the redrawing of the histogram is too time consuming. // ; Definition at line 33 of file TH1Editor.h. Public Member Functions;  TH1Editor (const TGWindow *p=nullptr, Int_t width=140, Int_t height=30, UInt_t options=kChildFrame, Pixel_t back=GetDefaultFrameBackground());  Constructor of histogram attribute GUI. ;  ;  ~TH1Editor () override;  Destructor of TH1 editor. ;  ; Bool_t AcceptModel (TObject *model) override;  Ch",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1Editor.html:3249,reduce,reduced,3249,doc/master/classTH1Editor.html,https://root.cern,https://root.cern/doc/master/classTH1Editor.html,1,['reduce'],['reduced']
Energy Efficiency," ; (; const char * ; name[], . Bool_t ; allocate = kTRUE . ). overridevirtual . Get the bin index for the n dimensional tuple addressed by ""name"", allocate one if it doesn't exist yet and ""allocate"" is true. ; Implements THnBase.; Definition at line 718 of file THnSparse.cxx. ◆ GetBin() [3/6]. Long64_t THnSparse::GetBin ; (; const Double_t * ; x); const. inlineoverridevirtual . Implements THnBase.; Definition at line 97 of file THnSparse.h. ◆ GetBin() [4/6]. Long64_t THnSparse::GetBin ; (; const Double_t * ; x, . Bool_t ; allocate = kTRUE . ). overridevirtual . Get the bin index for the n dimensional tuple x, allocate one if it doesn't exist yet and ""allocate"" is true. ; Implements THnBase.; Definition at line 702 of file THnSparse.cxx. ◆ GetBin() [5/6]. Long64_t THnSparse::GetBin ; (; const Int_t * ; idx); const. inlineoverridevirtual . Implements THnBase.; Definition at line 96 of file THnSparse.h. ◆ GetBin() [6/6]. Long64_t THnSparse::GetBin ; (; const Int_t * ; idx, . Bool_t ; allocate = kTRUE . ). overridevirtual . Get the bin index for the n dimensional coordinates coord, allocate one if it doesn't exist yet and ""allocate"" is true. ; Implements THnBase.; Definition at line 733 of file THnSparse.cxx. ◆ GetBinContent() [1/2]. Double_t THnSparse::GetBinContent ; (; const Int_t * ; idx); const. inline . Forwards to THnBase::GetBinContent() overload. ; Non-virtual, CINT-compatible replacement of a using declaration. ; Definition at line 121 of file THnSparse.h. ◆ GetBinContent() [2/2]. Double_t THnSparse::GetBinContent ; (; Long64_t ; idx, . Int_t * ; coord = nullptr . ); const. overridevirtual . Return the content of the filled bin number ""idx"". ; If coord is non-null, it will contain the bin's coordinates for each axis that correspond to the bin. ; Implements THnBase.; Definition at line 744 of file THnSparse.cxx. ◆ GetBinError2(). Double_t THnSparse::GetBinError2 ; (; Long64_t ; linidx); const. overridevirtual . Get square of the error of bin addressed by linidx",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHnSparse.html:34199,allocate,allocate,34199,doc/master/classTHnSparse.html,https://root.cern,https://root.cern/doc/master/classTHnSparse.html,1,['allocate'],['allocate']
Energy Efficiency," ; // Power law example; // -----------------; ; // Let's not look at another example: a power law \f[x^a\f].; RooRealVar a{""a"", ""a"", -0.3, -5.0, 5.0};; RooPowerSum powerlaw{""powerlaw"", ""powerlaw"", x, RooConst(1.0), a};; std::unique_ptr<RooAbsData> powerlawData{generateBinnedAsimov(powerlaw, x, 10000)};; ; // Again, if you do a vanilla fit, you'll get a bias; std::unique_ptr<RooFitResult> fit3{powerlaw.fitTo(*powerlawData, Save(), PrintLevel(-1), SumW2Error(false))};; fit3->Print();; ; // This time, the bias is not the same factor in each bin! This means our; // trick by sampling the integral in the same way doesn't cancel out the; // bias completely. The average bias is canceled, but there are per-bin; // biases that remain. Still, this method has some value: it is cheaper than; // rigurously correcting the bias by integrating the pdf in each bin. So if; // you know your per-bin bias variations are small or performance is an; // issue, this approach can be sufficient.; enableBinIntegrator(powerlaw, x.numBins());; std::unique_ptr<RooFitResult> fit4{powerlaw.fitTo(*powerlawData, Save(), PrintLevel(-1), SumW2Error(false))};; fit4->Print();; disableBinIntegrator(powerlaw);; ; // To get rid of the binning effects in the general case, one can use the; // IntegrateBins() command argument. Now, the pdf is not evaluated at the; // bin centers, but numerically integrated over each bin and divided by the; // bin width. The parameter for IntegrateBins() is the required precision; // for the numeric integrals. This is computationally expensive, but the; // bias is now not a problem anymore.; std::unique_ptr<RooFitResult> fit5{; powerlaw.fitTo(*powerlawData, IntegrateBins(1e-3), Save(), PrintLevel(-1), SumW2Error(false))};; fit5->Print();; ; // Improving numerical stability; // -----------------------------; ; // There is one more problem with binned fits that is related to the binning; // effects because often, a binned fit is affected by both problems.; //; // The issue is num",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf614__binned__fit__problems_8C.html:5087,power,powerlaw,5087,doc/master/rf614__binned__fit__problems_8C.html,https://root.cern,https://root.cern/doc/master/rf614__binned__fit__problems_8C.html,1,['power'],['powerlaw']
Energy Efficiency," ; 1166////////////////////////////////////////////////////////////////////////////////; 1167///Computes sample quantiles, corresponding to the given probabilities; 1168///; 1169/// \param[in] x the data sample; 1170/// \param[in] n its size; 1171/// \param[out] quantiles computed quantiles are returned in there; 1172/// \param[in] prob probabilities where to compute quantiles; 1173/// \param[in] nprob size of prob array; 1174/// \param[in] isSorted is the input array x sorted ?; 1175/// \param[in] index parameter index; 1176/// \param[in] type method to compute (from 1 to 9).; 1177///; 1178/// #### NOTE:; 1179/// When the input is not sorted, an array of integers of size n needs; 1180/// to be allocated. It can be passed by the user in parameter index,; 1181/// or, if not passed, it will be allocated inside the function; 1182///; 1183/// ### Following types are provided:; 1184/// - Discontinuous:; 1185/// - type=1 - inverse of the empirical distribution function; 1186/// - type=2 - like type 1, but with averaging at discontinuities; 1187/// - type=3 - SAS definition: nearest even order statistic; 1188/// - Piecewise linear continuous:; 1189/// - In this case, sample quantiles can be obtained by linear interpolation; 1190/// between the k-th order statistic and p(k).; 1191/// -type=4 - linear interpolation of empirical cdf, p(k)=k/n;; 1192/// - type=5 - a very popular definition, p(k) = (k-0.5)/n;; 1193/// - type=6 - used by Minitab and SPSS, p(k) = k/(n+1);; 1194/// - type=7 - used by S-Plus and R, p(k) = (k-1)/(n-1);; 1195/// - type=8 - resulting sample quantiles are approximately median unbiased; 1196/// regardless of the distribution of x. p(k) = (k-1/3)/(n+1/3);; 1197/// - type=9 - resulting sample quantiles are approximately unbiased, when; 1198/// the sample comes from Normal distribution. p(k)=(k-3/8)/(n+1/4);; 1199///; 1200/// default type = 7; 1201///; 1202/// ### References:; 1203/// 1. Hyndman, R.J and Fan, Y, (1996) ""Sample quantiles in statistical packa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMath_8cxx_source.html:38747,allocate,allocated,38747,doc/master/TMath_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TMath_8cxx_source.html,1,['allocate'],['allocated']
Energy Efficiency," ; 177 ; 178typedef QuasiRandom<ROOT::Math::GSLQRngSobol> QuasiRandomSobol;; 179typedef QuasiRandom<ROOT::Math::GSLQRngNiederreiter2> QuasiRandomNiederreiter;; 180 ; 181} // namespace Math; 182} // namespace ROOT; 183 ; 184 ; 185#endif /* ROOT_Math_QuasiRandom */; 186 ; 187 ; 188 ; GSLQuasiRandom.h; e#define e(i)Definition RSha256.hxx:103; ROOT::Math::QuasiRandomUser class for MathMore random numbers template on the Engine type.Definition QuasiRandom.h:60; ROOT::Math::QuasiRandom::QuasiRandomQuasiRandom(unsigned int dimension=1)Create a QuasiRandom generator.Definition QuasiRandom.h:70; ROOT::Math::QuasiRandom::Nextbool Next(double *x)Generate next quasi random numbers points.Definition QuasiRandom.h:95; ROOT::Math::QuasiRandom::fEngineEngine fEngineDefinition QuasiRandom.h:160; ROOT::Math::QuasiRandom::Skipbool Skip(unsigned int n)skip the next n number and jumb directly to the current state + nDefinition QuasiRandom.h:118; ROOT::Math::QuasiRandom::~QuasiRandom~QuasiRandom()Destructor: call Terminate() function of engine to free any allocated resource.Definition QuasiRandom.h:88; ROOT::Math::QuasiRandom::Namestd::string Name() constReturn the name of the generator.Definition QuasiRandom.h:154; ROOT::Math::QuasiRandom::Nextdouble Next()Generate next quasi random numbers point (1 - dimension)Definition QuasiRandom.h:102; ROOT::Math::QuasiRandom::RndmArraybool RndmArray(int n, double *array)Generate an array of random numbers between ]0,1[ Function to preserve ROOT Trandom compatibility The...Definition QuasiRandom.h:126; ROOT::Math::QuasiRandom::Rndmdouble Rndm()Generate quasi random numbers between ]0,1[ 0 and 1 are excluded Function to be compatible with ROOT ...Definition QuasiRandom.h:111; ROOT::Math::QuasiRandom::Typestd::string Type() constReturn the type (name) of the used generator.Definition QuasiRandom.h:133; ROOT::Math::QuasiRandom::EngineSizeunsigned int EngineSize() constReturn the size of the generator state.Definition QuasiRandom.h:140; ROOT::Math::Quas",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/QuasiRandom_8h_source.html:5825,allocate,allocated,5825,doc/master/QuasiRandom_8h_source.html,https://root.cern,https://root.cern/doc/master/QuasiRandom_8h_source.html,1,['allocate'],['allocated']
Energy Efficiency," ; 26 ; 27//___________________________________________________________________________________; 28/**; 29 Class describing the binned data sets :; 30 vectors of x coordinates, y values and optionally error on y values and error on coordinates; 31 The dimension of the coordinate is free; 32 There are 4 different options:; 33 - only coordinates and values (for binned likelihood fits) : kNoError; 34 - coordinate, values and error on values (for normal least square fits) : kValueError; 35 - coordinate, values, error on values and coordinates (for effective least square fits) : kCoordError; 36 - coordinate, values, error on coordinates and asymmetric error on values : kAsymError; 37 ; 38 In addition there is the option to construct Bindata copying the data in (using the DataVector class); 39 or using pointer to external data (DataWrapper) class.; 40 In general is found to be more efficient to copy the data.; 41 In case of really large data sets for limiting memory consumption then the other option can be used; 42 Specialized constructor exists for data up to 3 dimensions.; 43 ; 44 When the data are copying in the number of points can be set later (or re-set) using Initialize and; 45 the data are inserted one by one using the Add method.; 46 It is mandatory to set the size before using the Add method.; 47 ; 48 @ingroup FitData; 49*/; 50 ; 51 ; 52class BinData : public FitData {; 53 ; 54public :; 55 ; 56 enum ErrorType { kNoError, kValueError, kCoordError, kAsymError };; 57 ; 58 /**; 59 constructor from dimension of point and max number of points (to pre-allocate vector); 60 Give a zero value and then use Initialize later one if the size is not known; 61 */; 62 ; 63 explicit BinData(unsigned int maxpoints = 0, unsigned int dim = 1,; 64 ErrorType err = kValueError);; 65 ; 66 ; 67 /**; 68 constructor from option and default range; 69 */; 70 explicit BinData (const DataOptions & opt, unsigned int maxpoints = 0,; 71 unsigned int dim = 1, ErrorType err = kValueError);; 72 ; 73",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/BinData_8h_source.html:1726,consumption,consumption,1726,doc/master/BinData_8h_source.html,https://root.cern,https://root.cern/doc/master/BinData_8h_source.html,1,['consumption'],['consumption']
Energy Efficiency," ; 752 /*! \brief set the drop-out configuration (layer-wise); 753 *; 754 * \param begin begin of an array or vector denoting the drop-out probabilities for each layer; 755 * \param end end of an array or vector denoting the drop-out probabilities for each layer; 756 * \param _dropRepetitions denotes after how many repetitions the drop-out setting (which nodes are dropped out exactly) is changed; 757 */; 758 template <typename Iterator>; 759 void setDropOut (Iterator begin, Iterator end, size_t _dropRepetitions) { m_dropOut.assign (begin, end); m_dropRepetitions = _dropRepetitions; }; 760 ; 761 size_t dropRepetitions () const { return m_dropRepetitions; }; 762 const std::vector<double>& dropFractions () const { return m_dropOut; }; 763 ; 764 void setMonitoring (std::shared_ptr<Monitoring> ptrMonitoring) { fMonitoring = ptrMonitoring; } ///< prepared for monitoring; 765 ; 766 size_t convergenceSteps () const { return m_convergenceSteps; } ///< how many steps until training is deemed to have converged; 767 size_t batchSize () const { return m_batchSize; } ///< mini-batch size; 768 size_t testRepetitions () const { return m_testRepetitions; } ///< how often is the test data tested; 769 double factorWeightDecay () const { return m_factorWeightDecay; } ///< get the weight-decay factor; 770 ; 771 double learningRate () const { return fLearningRate; } ///< get the learning rate; 772 double momentum () const { return fMomentum; } ///< get the momentum (e.g. for SGD); 773 int repetitions () const { return fRepetitions; } ///< how many steps have to be gone until the batch is changed; 774 MinimizerType minimizerType () const { return fMinimizerType; } ///< which minimizer shall be used (e.g. SGD); 775 ; 776 ; 777 ; 778 ; 779 ; 780 ; 781 virtual void testSample (double /*error*/, double /*output*/, double /*target*/, double /*weight*/) {} ///< virtual function to be used for monitoring (callback); 782 virtual void startTrainCycle () ///< callback for monitoring and logging; 783",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/NeuralNet_8h_source.html:27392,monitor,monitoring,27392,doc/master/NeuralNet_8h_source.html,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html,1,['monitor'],['monitoring']
Energy Efficiency," ; : linearity property of this classifier is reflected in the ; : metric with which ""far apart"" and ""close vicinity"" are ; : determined: the covariance matrix of the discriminating; : variable space.); : ; : ␛[1m--- Performance optimisation:␛[0m; : ; : Optimal performance for the linear discriminant is obtained for ; : linearly correlated Gaussian-distributed variables. Any deviation; : from this ideal reduces the achievable separation power. In ; : particular, no discrimination at all is achieved for a variable; : that has the same sample mean for signal and background, even if ; : the shapes of the distributions are very different. Thus, the linear ; : discriminant often benefits from a suitable transformation of the ; : input variables. For example, if a variable x in [-1,1] has a ; : a parabolic signal distributions, and a uniform background; : distributions, their mean value is zero in both cases, leading ; : to no separation. The simple transformation x -> |x| renders this ; : variable powerful for the use in a linear discriminant.; : ; : ␛[1m--- Performance tuning via configuration options:␛[0m; : ; : <None>; : ; : <Suppress this message by specifying ""!H"" in the booking option>; : ␛[1m================================================================␛[0m; : ; LD : Results for LD coefficients:; : -----------------------; : Variable: Coefficient:; : -----------------------; : myvar1: -0.309; : myvar2: -0.102; : var3: -0.142; : var4: +0.705; : (offset): -0.055; : -----------------------; : Elapsed time for training with 2000 events: 0.00103 sec ; LD : [dataset] : Evaluation of LD on training sample (2000 events); : Elapsed time for evaluation of 2000 events: 0.000394 sec ; : <CreateMVAPdfs> Separation from histogram (PDF): 0.540 (0.000); : Dataset[dataset] : Evaluation of LD on training sample; : Creating xml weight file: ␛[0;36mdataset/weights/TMVAClassification_LD.weights.xml␛[0m; : Creating standalone class: ␛[0;36mdataset/weights/TMVAClassification_LD.class.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAClassification_8C.html:37092,power,powerful,37092,doc/master/TMVAClassification_8C.html,https://root.cern,https://root.cern/doc/master/TMVAClassification_8C.html,1,['power'],['powerful']
Energy Efficiency," ; Definition at line 94 of file TDecompSparse.cxx. ◆ TDecompSparse() [5/5]. TDecompSparse::TDecompSparse ; (; const TDecompSparse & ; another). Copy constructor. ; Definition at line 107 of file TDecompSparse.cxx. ◆ ~TDecompSparse(). TDecompSparse::~TDecompSparse ; (; ). inlineoverride . Definition at line 148 of file TDecompSparse.h. Member Function Documentation. ◆ Class(). static TClass * TDecompSparse::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TDecompSparse::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TDecompSparse::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 176 of file TDecompSparse.h. ◆ CopyUpperTriang(). void TDecompSparse::CopyUpperTriang ; (; const TMatrixDSparse & ; a, . Double_t * ; b . ). staticprotected . Static function, copying the non-zero entries in the upper triangle to array b . ; User should allocate enough memory for array b . ; Definition at line 139 of file TDecompSparse.cxx. ◆ DeclFileName(). static const char * TDecompSparse::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 176 of file TDecompSparse.h. ◆ Decompose(). Bool_t TDecompSparse::Decompose ; (; ). overridevirtual . Decomposition engine . ; If the decomposition succeeds, bit kDecomposed is set . ; Implements TDecompBase.; Definition at line 234 of file TDecompSparse.cxx. ◆ Det(). void TDecompSparse::Det ; (; Double_t & ; d1, . Double_t & ; d2 . ). inlineoverridevirtual . Matrix determinant det = d1*TMath::Power(2.,d2) ; Reimplemented from TDecompBase.; Definition at line 169 of file TDecompSparse.h. ◆ ErrorFlag(). Int_t TDecompSparse::ErrorFlag ; (; ). inlineprotected . Definition at line 124 of file TDecompSparse.h. ◆ Factor(). void TDecompSparse::Factor ; (; const Int_t ; n, . const Int_t ; nz, . TArrayI & ; Airn, . TArrayI & ; Aicn, . TArrayD & ; Aa, . T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDecompSparse.html:19734,allocate,allocate,19734,doc/master/classTDecompSparse.html,https://root.cern,https://root.cern/doc/master/classTDecompSparse.html,1,['allocate'],['allocate']
Energy Efficiency," ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Development Run the tests. Running the ROOT battery of tests; Running all ROOT tests on at least a platform before sending a PR or before pushing anything to the ROOT repository is mandatory.; The ROOT continuous integration infrastructure allows to automatically check the PR also on a battery of platform, for example including macos and linux boxes.; In order to be able to run all tests, the simple steps below need to be followed; Prepare your development area and build ROOT; mkdir RootDevelopment; cd RootDevelopment; git clone https://github.com/root-project/root; git clone https://github.com/root-project/roottest; mkdir build; cd build; echo Note the cmake options; cmake -DCMAKE_BUILD_TYPE=Debug -Dtesting=ON -Droottest=ON ../root. Inspect and run the tests; From within the build directory. List all tests: ctest -N; List all test matching a regex: ctest -N -R myregex; Run all tests on N cores: ctest -j N. Sitemap. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/run-tests.html:2137,battery,battery,2137,d/run-tests.html,https://root.cern,https://root.cern/d/run-tests.html,1,['battery'],['battery']
Energy Efficiency," ; Implements RooStats::IntervalCalculator.; Definition at line 104 of file BayesianCalculator.h. ◆ SetData(). void RooStats::BayesianCalculator::SetData ; (; RooAbsData & ; ). inlineoverridevirtual . Set the DataSet ( add to the workspace if not already there ?) ; Implements RooStats::IntervalCalculator.; Definition at line 72 of file BayesianCalculator.h. ◆ SetGlobalObservables(). virtual void RooStats::BayesianCalculator::SetGlobalObservables ; (; const RooArgSet & ; set). inlinevirtual . set the global observables which will be used when creating the NLL so the constraint pdf's will be normalized correctly on the global observables when computing the NLL ; Definition at line 96 of file BayesianCalculator.h. ◆ SetIntegrationType(). void RooStats::BayesianCalculator::SetIntegrationType ; (; const char * ; type). set the integration type (possible type are) : . 1D integration ( used when only one nuisance and when the posterior is scanned): adaptive , gauss, nonadaptive; multidim:; ADAPTIVE, adaptive numerical integration The parameter numIters (settable with SetNumIters) is the max number of function calls. It can be reduced to make the integration faster but it will be difficult to reach the required tolerance; VEGAS MC integration method based on importance sampling - numIters is number of function calls Extra Vegas parameter can be set using IntegratorMultiDimOptions class; MISER MC integration method based on stratified sampling See also http://en.wikipedia.org/wiki/Monte_Carlo_integration for VEGAS and MISER description; PLAIN simple MC integration method, where the max number of calls can be specified using SetNumIters(numIters). Extra integration types are:. TOYMC: evaluate posterior by generating toy MC for the nuisance parameters. It is a MC integration, where the function is sampled according to the nuisance. It is convenient to use when all the nuisance are uncorrelated and it is efficient to generate them The toy are generated by default for each poi v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1BayesianCalculator.html:30486,adapt,adaptive,30486,doc/master/classRooStats_1_1BayesianCalculator.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1BayesianCalculator.html,2,['adapt'],['adaptive']
Energy Efficiency," ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » ROOT 6 Analysis Workshop 10. Go Parallel!. Why you care; Number crunching takes time. If you look at top (open a terminal, type top) in Linux or your activity monitor on MacOS you will see that one core is really really busy with root. But only one core - and you have two or four or if you're lucky even more. What about getting much more data crunched in the same time, or reducing the arrival time of your analysis results by factors?; TSelector; ROOT offers Proof lite - multiple ROOT processes ""hacking away"" on the same analysis. For that to work your analysis must be written using the TSelector interface: it must publicly derive from it and implement SlaveBegin() where you create the histograms, Process(Long64_t entry) to process the data, and Terminate() to do fits etc. You can find an example for using a TTreeReader within a TSelector here; try to adapt to to our tree and our efficiency determination.; TChain; Proof lite will run the TSelector on several input files in parallel - actually, it chunks the input (even of one file) and sends these chunks to worker processes. You can combine TTrees from multiple files (if they have the same name and structure) using a TChain:; TChain* chain = new TChain(""MyTree"");; chain->AddFile(""http://root.cern.ch/root/files/tutorials/mockupx.root"");; chain->AddFile(""http://root.cern.ch/root/files/tutorials/mockupx_1.root"");; chain->AddFile(""http://root.cern.ch/root/files/tutorials/mockupx_2.root"");; chain->AddFile(""http://root.cern.ch/root/files/tutorials/mockupx_3.root"");; chain->Process(""MySelector.C+""); // if you have put your selector from above into MySelector.C. The last line will run the selector on the whole chain. O - but that takes ages! We need to:; Enable Proof Lite; There are two parts to using Proof lite: you need to create an instance and you need to tell the chain to ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/10-go-parallel.html:2716,adapt,adapt,2716,d/10-go-parallel.html,https://root.cern,https://root.cern/d/10-go-parallel.html,1,['adapt'],['adapt']
Energy Efficiency," ; [in]xclipl,yclipb,xclipr,ycliptClipping boundary . Definition at line 768 of file TPad.cxx. ◆ ClippingCode(). Int_t TPad::ClippingCode ; (; Double_t ; x, . Double_t ; y, . Double_t ; xcl1, . Double_t ; ycl1, . Double_t ; xcl2, . Double_t ; ycl2 . ). virtual . Compute the endpoint codes for TPad::Clip. ; Definition at line 901 of file TPad.cxx. ◆ ClipPolygon(). Int_t TPad::ClipPolygon ; (; Int_t ; n, . Double_t * ; x, . Double_t * ; y, . Int_t ; nn, . Double_t * ; xc, . Double_t * ; yc, . Double_t ; xclipl, . Double_t ; yclipb, . Double_t ; xclipr, . Double_t ; yclipt . ). virtual . Clip polygon using the Sutherland-Hodgman algorithm. ; Parameters. [in]nNumber of points in the polygon to be clipped ; [in]x,yPolygon x[n], y[n] do be clipped vertices ; [in]xclipl,yclipb,xclipr,ycliptClipping boundary ; [out]nnNumber of points in xc and yc ; [out]xc,ycClipped polygon vertices. The Int_t returned by this function is the number of points in the clipped polygon. These vectors must be allocated by the calling function. A size of 2*n for each is enough. Sutherland and Hodgman's polygon-clipping algorithm uses a divide-and-conquer strategy: It solves a series of simple and identical problems that, when combined, solve the overall problem. The simple problem is to clip a polygon against a single infinite clip edge. Four clip edges, each defining one boundary of the clip rectangle, successively clip a polygon against a clip rectangle.; Steps of Sutherland-Hodgman's polygon-clipping algorithm:. Polygons can be clipped against each edge of the window one at a time. Windows/edge intersections, if any, are easy to find since the X or Y coordinates are already known.; Vertices which are kept after clipping against one window edge are saved for clipping against the remaining edges.; Note that the number of vertices usually changes and will often increases. The clip boundary determines a visible and invisible region. The edges from vertex i to vertex i+1 can be one of four types:. C",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPad.html:63221,allocate,allocated,63221,doc/master/classTPad.html,https://root.cern,https://root.cern/doc/master/classTPad.html,1,['allocate'],['allocated']
Energy Efficiency," ;  ; TString fBoostedMethodName;  details of the boosted classifier ;  ; TString fBoostedMethodOptions;  options ;  ; TString fBoostedMethodTitle;  title ;  ; UInt_t fBoostNum;  Number of times the classifier is boosted. ;  ; TString fBoostType;  string specifying the boost type ;  ; Double_t fBoostWeight;  the weight used to boost the next classifier ;  ; std::vector< TH1 * > fBTrainBgdMVAHist;  ; std::vector< TH1 * > fBTrainSigMVAHist;  ; DataSetManager * fDataSetManager;  DSMTEST. ;  ; Bool_t fDetailedMonitoring;  produce detailed monitoring histograms (boost-wise) ;  ; Bool_t fHistoricBoolOption;  historic variable, only needed for ""CompatibilityOptions"" ;  ; TString fHistoricOption;  historic variable, only needed for ""CompatibilityOptions"" ;  ; Double_t fMethodError;  estimation of the level error of the classifier ;  ; Bool_t fMonitorBoostedMethod;  monitor the MVA response of every classifier ;  ; TTree * fMonitorTree;  tree to monitor values during the boosting ;  ; std::vector< Float_t > * fMVAvalues;  mva values for the last trained method ;  ; Double_t fOverlap_integral;  ; UInt_t fRandomSeed;  seed for random number generator used for bagging ;  ; Double_t fROC_training;  roc integral of last trained method (on training sample) ;  ; std::vector< TH1 * > fTestBgdMVAHist;  ; std::vector< TH1 * > fTestSigMVAHist;  ; std::vector< TH1 * > fTrainBgdMVAHist;  ; std::vector< TH1 * > fTrainSigMVAHist;  ; TString fTransformString;  min and max values for the classifier response ;  . Friends; class Experimental::Classification;  ; class Factory;  ; class Reader;  . Additional Inherited Members;  Public Types inherited from TMVA::MethodBase; enum  EWeightFileType { kROOT =0; , kTEXT; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodBoost.html:29247,monitor,monitoring,29247,doc/master/classTMVA_1_1MethodBoost.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBoost.html,3,['monitor'],"['monitor', 'monitoring']"
Energy Efficiency," ;   kMLeft; , kMCenter; , kMRight; , kBLeft; , ;   kBCenter; , kBRight. };  . Private Member Functions; void Align (void);  Compute alignment variables. ;  ; void CloseWindow1 ();  Delete current window. ;  ; void DrawImage (FT_Bitmap *source, ULong_t fore, ULong_t back, GdkImage *xim, Int_t bx, Int_t by);  Draw FT_Bitmap bitmap to xim image at position bx,by using specified foreground color. ;  ; Int_t FindColor (ULong_t pixel, ULong_t *orgcolors, Int_t ncolors);  Returns index in orgcolors (and new_colors) for pixel. ;  ; GdkImage * GetBackground (Int_t x, Int_t y, UInt_t w, UInt_t h);  Get the background of the current window in an XImage. ;  ; void ImgPickPalette (GdkImage *image, Int_t &ncol, Int_t *&R, Int_t *&G, Int_t *&B);  Returns in R G B the ncol colors of the palette used by the image. ;  ; Bool_t IsVisible (Int_t x, Int_t y, UInt_t w, UInt_t h);  Test if there is really something to render. ;  ; void MakeOpaqueColors (Int_t percent, ULong_t *orgcolors, Int_t ncolors);  Get RGB values for orgcolors, add percent neutral to the RGB and allocate new_colors. ;  ; void MapColorStruct (ColorStruct_t *color, GdkColor &xcolor);  Map a ColorStruct_t to a XColor structure. ;  ; void MapCursor (ECursor cursor, Int_t &xcursor);  ; void MapEvent (Event_t &ev, GdkEvent &xev, Bool_t tox=kTRUE);  Map Event_t structure to gdk_event structure. ;  ; void MapEventMask (UInt_t &emask, UInt_t &xemask, Bool_t tox=kTRUE);  Map event mask to or from gdk. ;  ; void MapGCValues (GCValues_t &gval, ULong_t &xmask, GdkGCValues &xgval, Bool_t tox=kTRUE);  Map a GCValues_t to a XCGValues structure if tox is true. ;  ; void MapKeySym (UInt_t &keysym, UInt_t &xkeysym, Bool_t tox=kTRUE);  Map to and from X key symbols. ;  ; void MapModifierState (UInt_t &state, UInt_t &xstate, Bool_t tox=kTRUE);  Map modifier key state to or from X. ;  ; void MapSetWindowAttributes (SetWindowAttributes_t *attr, ULong_t &xmask, GdkWindowAttr &xattr);  Map a SetWindowAttributes_t to a GdkWindowAttr structu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGWin32.html:49398,allocate,allocate,49398,doc/master/classTGWin32.html,https://root.cern,https://root.cern/doc/master/classTGWin32.html,1,['allocate'],['allocate']
Energy Efficiency," < allCoords.size(); i += 3) {; x[0] = allCoords[i + 0].first;; y[0] = allCoords[i + 0].second;; x[1] = allCoords[i + 1].first;; y[1] = allCoords[i + 1].second;; x[2] = allCoords[i + 2].first;; y[2] = allCoords[i + 2].second;; th2p->AddBin(3, x, y);; avg->AddBin(3, x, y);; err->AddBin(3, x, y);; }; ; // -------------------- Generate particles ------------------------; TRandom ran;; for (int j = 0; j < numEvents; ++j) {; Double_t r1 = ran.Gaus(0, 10);; Double_t r2 = ran.Gaus(0, 8);; Double_t rok = ran.Gaus(20, 2);; Double_t rbad1 = ran.Gaus(1, 2);; Double_t rbad2 = ran.Gaus(2, 0);; ; Double_t val = rok;; // -------------------- Malfunctioning panels -------------------; if (th2p->IsInsideBin(4, r1, r2)) val = rok - rbad1;; if (th2p->IsInsideBin(20, r1, r2)) val = rok - rbad2;; if (th2p->IsInsideBin(13, r1, r2)) val = rok + rbad1;; if (th2p->IsInsideBin(37, r1, r2)) val = rok + rbad2;; ; // -------------------- Fill histograms ------------------------; th2p->Fill(r1, r2, val);; avg->Fill(r1, r2, val);; err->Fill(r1, r2, val);; }; ; // -------------------- Display end state ------------------------; c1->cd(1);; th2p->SetStats(0);; th2p->SetTitle(""total hits"");; th2p->Draw(""COLZ"");; ; c1->cd(2);; avg->SetStats(0);; avg->SetTitle(""average charge"");; avg->Draw(""COLZ"");; ; c1->cd(3);; err->SetStats(0);; err->SetContentToError();; err->SetTitle(""error"");; err->Draw(""COLZ"");; }; b#define b(i)Definition RSha256.hxx:100; a#define a(i)Definition RSha256.hxx:99; Int_tint Int_tDefinition RtypesCore.h:45; Double_tdouble Double_tDefinition RtypesCore.h:59; gROOT#define gROOTDefinition TROOT.h:406; TCanvasThe Canvas class.Definition TCanvas.h:23; TH2Poly2D Histogram with Polygonal BinsDefinition TH2Poly.h:66; TProfile2Poly2D Profile Histogram with Polygonal Bins.Definition TProfile2Poly.h:58; TRandomThis is the base class for the ROOT Random number generators.Definition TRandom.h:27; TRandom::Gausvirtual Double_t Gaus(Double_t mean=0, Double_t sigma=1)Samples a random number from th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tprofile2polyRealisticModuleError_8C.html:2608,charge,charge,2608,doc/master/tprofile2polyRealisticModuleError_8C.html,https://root.cern,https://root.cern/doc/master/tprofile2polyRealisticModuleError_8C.html,1,['charge'],['charge']
Energy Efficiency," << ( 13 )). };  ;  Public Attributes inherited from TArrayF; Float_t * fArray;  ;  Public Attributes inherited from TArray; Int_t fN;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from TH3; static TH1D * DoProject1D (const TH3 &h, const char *name, const char *title, const TAxis *projX, bool computeErrors, bool originalRange, bool useUF, bool useOF);  static methdod performing the projection to 1D histogram ;  ; static TH2D * DoProject2D (const TH3 &h, const char *name, const char *title, const TAxis *projX, const TAxis *projY, bool computeErrors, bool originalRange, bool useUF, bool useOF);  static methdod performing the projection to 2D histogram ;  ;  Static Protected Member Functions inherited from TH1; static Int_t AutoP2GetBins (Int_t n);  Auxiliary function to get the next power of 2 integer value larger then n. ;  ; static Double_t AutoP2GetPower2 (Double_t x, Bool_t next=kTRUE);  Auxiliary function to get the power of 2 next (larger) or previous (smaller) a given x. ;  ; static bool CheckAxisLimits (const TAxis *a1, const TAxis *a2);  Check that the axis limits of the histograms are the same. ;  ; static bool CheckBinLabels (const TAxis *a1, const TAxis *a2);  Check that axis have same labels. ;  ; static bool CheckBinLimits (const TAxis *a1, const TAxis *a2);  Check bin limits. ;  ; static int CheckConsistency (const TH1 *h1, const TH1 *h2);  Check histogram compatibility. ;  ; static bool CheckConsistentSubAxes (const TAxis *a1, Int_t firstBin1, Int_t lastBin1, const TAxis *a2, Int_t firstBin2=0, Int_t lastBin2=0);  Check that two sub axis are the same. ;  ; static bool CheckEqualAxes (const TAxis *a1, const TAxis *a2);  Check that the axis are the same. ;  ; static Bool_t RecomputeAxisLimits (TAxis &destAxis, const TAxis &anAxis);  Finds new limits for the axis for the Merge function. ;  ; static Bool_t SameLimitsAndNBins (const TAxis &axis1, const TAxis &axis2);  S",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH3F.html:57462,power,power,57462,doc/master/classTH3F.html,https://root.cern,https://root.cern/doc/master/classTH3F.html,1,['power'],['power']
Energy Efficiency," << ( 13 )). };  ;  Public Attributes inherited from TArrayS; Short_t * fArray;  ;  Public Attributes inherited from TArray; Int_t fN;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from TH3; static TH1D * DoProject1D (const TH3 &h, const char *name, const char *title, const TAxis *projX, bool computeErrors, bool originalRange, bool useUF, bool useOF);  static methdod performing the projection to 1D histogram ;  ; static TH2D * DoProject2D (const TH3 &h, const char *name, const char *title, const TAxis *projX, const TAxis *projY, bool computeErrors, bool originalRange, bool useUF, bool useOF);  static methdod performing the projection to 2D histogram ;  ;  Static Protected Member Functions inherited from TH1; static Int_t AutoP2GetBins (Int_t n);  Auxiliary function to get the next power of 2 integer value larger then n. ;  ; static Double_t AutoP2GetPower2 (Double_t x, Bool_t next=kTRUE);  Auxiliary function to get the power of 2 next (larger) or previous (smaller) a given x. ;  ; static bool CheckAxisLimits (const TAxis *a1, const TAxis *a2);  Check that the axis limits of the histograms are the same. ;  ; static bool CheckBinLabels (const TAxis *a1, const TAxis *a2);  Check that axis have same labels. ;  ; static bool CheckBinLimits (const TAxis *a1, const TAxis *a2);  Check bin limits. ;  ; static int CheckConsistency (const TH1 *h1, const TH1 *h2);  Check histogram compatibility. ;  ; static bool CheckConsistentSubAxes (const TAxis *a1, Int_t firstBin1, Int_t lastBin1, const TAxis *a2, Int_t firstBin2=0, Int_t lastBin2=0);  Check that two sub axis are the same. ;  ; static bool CheckEqualAxes (const TAxis *a1, const TAxis *a2);  Check that the axis are the same. ;  ; static Bool_t RecomputeAxisLimits (TAxis &destAxis, const TAxis &anAxis);  Finds new limits for the axis for the Merge function. ;  ; static Bool_t SameLimitsAndNBins (const TAxis &axis1, const TAxis &axis2);  S",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH3S.html:57321,power,power,57321,doc/master/classTH3S.html,https://root.cern,https://root.cern/doc/master/classTH3S.html,1,['power'],['power']
Energy Efficiency," = """") const; Copy matrix data to array . It is assumed that array is of size >= fNelems. TMatrixTBase<Element> &TMatrixTSparse<Element> SetMatrixArray(Int_t nr_nonzeros, Int_t* irow, Int_t* icol, double* data); Copy nr elements from row/col index and data array to matrix . It is assumed; that arrays are of size >= nr. TMatrixTSparse<Element> &TMatrixTSparse<Element> SetSparseIndex(Int_t nelem_new); Increase/decrease the number of non-zero elements to nelems_new. TMatrixTSparse<Element> &TMatrixTSparse<Element> SetSparseIndex(const TMatrixTBase<double>& another); Use non-zero data of matrix source to set the sparse structure. TMatrixTSparse<Element> &TMatrixTSparse<Element> SetSparseIndexAB(const TMatrixTSparse<Element> &a,const TMatrixTSparse<Element> &b); Set the row/column indices to the ""sum"" of matrices a and b; It is checked that enough space has been allocated. TMatrixTSparse<Element> &TMatrixTSparse<Element> SetSparseIndexAB(const TMatrixT<Element> &a,const TMatrixTSparse<Element> &b); Set the row/column indices to the ""sum"" of matrices a and b; It is checked that enough space has been allocated. TMatrixTBase<Element> &TMatrixTSparse<Element> ResizeTo(Int_t nrows, Int_t ncols, Int_t nr_nonzeros = -1); Set size of the matrix to nrows x ncols with nr_nonzeros non-zero entries; if nr_nonzeros > 0 .; New dynamic elements are created, the overlapping part of the old ones are; copied to the new structures, then the old elements are deleted. TMatrixTBase<Element> &TMatrixTSparse<Element> ResizeTo(Int_t row_lwb, Int_t row_upb, Int_t col_lwb, Int_t col_upb, Int_t nr_nonzeros = -1); Set size of the matrix to [row_lwb:row_upb] x [col_lwb:col_upb] with nr_nonzeros; non-zero entries if nr_nonzeros > 0 .; New dynamic elemenst are created, the overlapping part of the old ones are; copied to the new structures, then the old elements are deleted. TMatrixTSparse<Element> &TMatrixTSparse<Element> Use(Int_t row_lwb, Int_t row_upb, Int_t col_lwb, Int_t col_upb, Int_t nr_nonzeros,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMatrixTSparse_double_.html:20522,allocate,allocated,20522,root/html528/TMatrixTSparse_double_.html,https://root.cern,https://root.cern/root/html528/TMatrixTSparse_double_.html,1,['allocate'],['allocated']
Energy Efficiency," = """" . ). virtual . Register the 'dataSet' on the cluster under the current user, group and the given 'dataSetName'. ; If a dataset with the same name already exists the action fails unless 'opts' contains 'O', in which case the old dataset is overwritten, or contains 'U', in which case 'newDataSet' is added to the existing dataset (duplications are ignored, if any). If 'opts' contains 'V' the dataset files are also verified (if the dataset manager is configured to allow so). By default the dataset is not verified. If 'opts' contains 'T' the in the dataset object (status bits, meta,...) is trusted, i.e. not reset (if the dataset manager is configured to allow so). If 'opts' contains 'S' validation would be run serially (meaningful only if validation is required). Returns kTRUE on success. ; Reimplemented in TProofLite.; Definition at line 10707 of file TProof.cxx. ◆ ReleaseMonitor(). void TProof::ReleaseMonitor ; (; TMonitor * ; mon). private . Release the used monitor to be used, making sure to delete newly created monitors. ; Definition at line 2654 of file TProof.cxx. ◆ Remove() [1/2]. Int_t TProof::Remove ; (; const char * ; ref, . Bool_t ; all = kFALSE . ). Send remove request for the query specified by ref. ; If all = TRUE remove also local copies of the query, if any. Generic method working for all queries known by the server. This method can be also used to reset the list of queries waiting to be processed: for that purpose use ref == ""cleanupqueue"". ; Definition at line 6034 of file TProof.cxx. ◆ Remove() [2/2]. Int_t TProof::Remove ; (; Int_t ; query, . Bool_t ; all = kFALSE . ). Send remove request for the qry-th query in fQueries. ; Definition at line 6013 of file TProof.cxx. ◆ RemoveChain(). void TProof::RemoveChain ; (; TChain * ; chain). Remove chain from data set. ; Definition at line 10231 of file TProof.cxx. ◆ RemoveDataSet(). Int_t TProof::RemoveDataSet ; (; const char * ; uri, . const char * ; optStr = """" . ). virtual . Remove the specified datas",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProof.html:131156,monitor,monitor,131156,doc/master/classTProof.html,https://root.cern,https://root.cern/doc/master/classTProof.html,2,['monitor'],"['monitor', 'monitors']"
Energy Efficiency," = ""S:"" or optStr = ""short:"".; To get the sub-dataset of files located on a given server(s) specify; the list of servers (comma-separated) in the 'optStr' field. void ShowDataSet(const char* dataset = """", const char* opt = ""M""); display meta-info for given dataset usi. Int_t RemoveDataSet(const char* dataset, const char* optStr = """"); Remove the specified dataset from the PROOF cluster.; Files are not deleted. TList* FindDataSets(const char* searchString, const char* optStr = """"); Find datasets, returns in a TList all found datasets. Int_t VerifyDataSet(const char* dataset, const char* optStr = """"); Verify if all files in the specified dataset are available.; Print a list and return the number of missing files. TMap * GetDataSetQuota(const char* optStr = """"); returns a map of the quotas of all groups. void ShowDataSetQuota(Option_t* opt = 0); shows the quota and usage of all groups; if opt contains ""U"" shows also distribution of usage on user-level. void InterruptCurrentMonitor(); If in active in a monitor set ready state. Int_t ActivateWorker(const char* ord); Make sure that the worker identified by the ordinal number 'ord' is; in the active list. The request will be forwarded to the master; in direct contact with the worker. If needed, this master will move; the worker from the inactive to the active list and rebuild the list; of unique workers.; Use ord = ""*"" to activate all inactive workers.; The string 'ord' can also be a comma-separated list of ordinal numbers the; status of which will be modified at once.; Return <0 if something went wrong (-2 if at least one worker was not found); or the number of workers with status change (on master; 0 on client). Int_t DeactivateWorker(const char* ord); Remove the worker identified by the ordinal number 'ord' from the; the active list. The request will be forwarded to the master; in direct contact with the worker. If needed, this master will move; the worker from the active to the inactive list and rebuild the list; of uni",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TProof.html:83827,monitor,monitor,83827,root/html530/TProof.html,https://root.cern,https://root.cern/root/html530/TProof.html,2,['monitor'],['monitor']
Energy Efficiency," = ""S:"" or optStr = ""short:"".; To get the sub-dataset of files located on a given server(s) specify; the list of servers (comma-separated) in the 'optStr' field. void ShowDataSet(const char* dataset = """", const char* opt = ""M""); display meta-info for given dataset usi. Int_t RemoveDataSet(const char* dataset, const char* optStr = """"); Remove the specified dataset from the PROOF cluster.; Files are not deleted. TList* FindDataSets(const char* searchString, const char* optStr = """"); Find datasets, returns in a TList all found datasets. Int_t VerifyDataSet(const char* dataset, const char* optStr = """"); Verify if all files in the specified dataset are available.; Print a list and return the number of missing files. TMap * GetDataSetQuota(const char* optStr = """"); returns a map of the quotas of all groups. void ShowDataSetQuota(Option_t* opt = 0); shows the quota and usage of all groups; if opt contains ""U"" shows also distribution of usage on user-level. void InterruptCurrentMonitor(); If in active in a monitor set ready state. void ActivateWorker(const char* ord); Make sure that the worker identified by the ordinal number 'ord' is; in the active list. The request will be forwarded to the master; in direct contact with the worker. If needed, this master will move; the worker from the inactive to the active list and rebuild the list; of unique workers.; Use ord = ""*"" to activate all inactive workers. void DeactivateWorker(const char* ord); Remove the worker identified by the ordinal number 'ord' from the; the active list. The request will be forwarded to the master; in direct contact with the worker. If needed, this master will move; the worker from the active to the inactive list and rebuild the list; of unique workers.; Use ord = ""*"" to deactivate all active workers. void ModifyWorkerLists(const char* ord, Bool_t add); Modify the worker active/inactive list by making the worker identified by; the ordinal number 'ord' active (add == TRUE) or inactive (add == FALSE).; If n",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProof.html:82807,monitor,monitor,82807,root/html528/TProof.html,https://root.cern,https://root.cern/root/html528/TProof.html,1,['monitor'],['monitor']
Energy Efficiency," = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. public:. UShort_t*fColorAlpha[fNumPoints] alpha at each anchor point; UShort_t*fColorBlue[fNumPoints] blue color at each anchor point; UShort_t*fColorGreen[fNumPoints] green color at each anchor point; UShort_t*fColorRed[fNumPoints] red color at each anchor point; UInt_tfNumPointsnumber of anchor points; Double_t*fPoints[fNumPoints] value of each anchor point [0..1]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TImagePalette(); Default constructor, sets all pointers to 0. TImagePalette(UInt_t numPoints); Constructor for a palette with numPoints anchor points.; It allocates the memory but does not set any colors. TImagePalette(const TImagePalette& palette); Copy constructor. TImagePalette(Int_t ncolors, Int_t* colors); Creates palette in the same way as TStyle::SetPalette. ~TImagePalette(); Destructor. TImagePalette & operator=(const TImagePalette& palette); Assignment operator. Int_t FindColor(UShort_t r, UShort_t g, UShort_t b); returns an index of the closest color. Int_t * GetRootColors(); Returns a list of ROOT colors. Could be used to set histogram palette.; See also http://root.cern.ch/root/htmldoc/TStyle.html#TStyle:SetPalette. » Author: Reiner Rohlfs 24/03/02 » Copyright (C) 2001-2002, Rene Brun, Fons Rademakers and Reiner Rohlfs *; » Last changed: root/graf:$Id: TAttImage.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2010-09-23 20:15; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TImagePalette.html:8181,allocate,allocates,8181,root/html528/TImagePalette.html,https://root.cern,https://root.cern/root/html528/TImagePalette.html,1,['allocate'],['allocates']
Energy Efficiency," = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. public:. UShort_t*fColorAlpha[fNumPoints] alpha at each anchor point; UShort_t*fColorBlue[fNumPoints] blue color at each anchor point; UShort_t*fColorGreen[fNumPoints] green color at each anchor point; UShort_t*fColorRed[fNumPoints] red color at each anchor point; UInt_tfNumPointsnumber of anchor points; Double_t*fPoints[fNumPoints] value of each anchor point [0..1]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TImagePalette(); Default constructor, sets all pointers to 0. TImagePalette(UInt_t numPoints); Constructor for a palette with numPoints anchor points.; It allocates the memory but does not set any colors. TImagePalette(const TImagePalette& palette); Copy constructor. TImagePalette(Int_t ncolors, Int_t* colors); Creates palette in the same way as TStyle::SetPalette. ~TImagePalette(); Destructor. TImagePalette & operator=(const TImagePalette& palette); Assignment operator. Int_t FindColor(UShort_t r, UShort_t g, UShort_t b); returns an index of the closest color. Int_t * GetRootColors(); Returns a list of ROOT colors. Could be used to set histogram palette.; See also http://root.cern.ch/root/htmldoc/TStyle.html#TStyle:SetPalette. » Author: Reiner Rohlfs 24/03/02 » Copyright (C) 2001-2002, Rene Brun, Fons Rademakers and Reiner Rohlfs *; » Last changed: root/graf:$Id: TAttImage.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2011-07-04 15:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TImagePalette.html:8250,allocate,allocates,8250,root/html530/TImagePalette.html,https://root.cern,https://root.cern/root/html530/TImagePalette.html,1,['allocate'],['allocates']
Energy Efficiency," = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. public:. UShort_t*fColorAlpha[fNumPoints] alpha at each anchor point; UShort_t*fColorBlue[fNumPoints] blue color at each anchor point; UShort_t*fColorGreen[fNumPoints] green color at each anchor point; UShort_t*fColorRed[fNumPoints] red color at each anchor point; UInt_tfNumPointsnumber of anchor points; Double_t*fPoints[fNumPoints] value of each anchor point [0..1]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TImagePalette(); Default constructor, sets all pointers to 0. TImagePalette(UInt_t numPoints); Constructor for a palette with numPoints anchor points.; It allocates the memory but does not set any colors. TImagePalette(const TImagePalette& palette); Copy constructor. TImagePalette(Int_t ncolors, Int_t* colors); Creates palette in the same way as TStyle::SetPalette. ~TImagePalette(); Destructor. TImagePalette & operator=(const TImagePalette& palette); Assignment operator. Int_t FindColor(UShort_t r, UShort_t g, UShort_t b); returns an index of the closest color. Int_t * GetRootColors(); Returns a list of ROOT colors. Could be used to set histogram palette.; See also http://root.cern.ch/root/htmldoc/TStyle.html#TStyle:SetPalette. » Author: Reiner Rohlfs 24/03/02 » Copyright (C) 2001-2002, Rene Brun, Fons Rademakers and Reiner Rohlfs *; » Last changed: root/graf:$Id: TAttImage.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2011-11-03 20:19; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TImagePalette.html:8250,allocate,allocates,8250,root/html532/TImagePalette.html,https://root.cern,https://root.cern/root/html532/TImagePalette.html,1,['allocate'],['allocates']
Energy Efficiency," = 0) const; Determine integration scenario. If no interpolation is used,; RooHistFunc can perform all integrals over its dependents; analytically via partial or complete summation of the input; histogram. If interpolation is used, only the integral; over all RooHistPdf observables is implemented. Double_t analyticalIntegral(Int_t code, const char* rangeName = 0) const; Return integral identified by 'code'. The actual integration; is deferred to RooDataHist::sum() which implements partial; or complete summation over the histograms contents. list<Double_t>* plotSamplingHint(RooAbsRealLValue& obs, Double_t xlo, Double_t xhi) const; Return sampling hint for making curves of (projections) of this function; as the recursive division strategy of RooCurve cannot deal efficiently; with the vertical lines that occur in a non-interpolated histogram. std::list<Double_t>* binBoundaries(RooAbsRealLValue& , Double_t , Double_t ) const; Return sampling hint for making curves of (projections) of this function; as the recursive division strategy of RooCurve cannot deal efficiently; with the vertical lines that occur in a non-interpolated histogram. Bool_t importWorkspaceHook(RooWorkspace& ws); Check if our datahist is already in the workspace. Bool_t areIdentical(const RooDataHist& dh1, const RooDataHist& dh2). void Streamer(TBuffer& ); Stream an object of class RooHistFunc. void ioStreamerPass2(); Schema evolution: if histObsList wasn't filled from persistence (v1); then fill it here. Can't be done in regular schema evolution in LinkDef; as _depList content is not guaranteed to be initialized there. TObject* clone(const char* newname) const; { return new RooHistFunc(*this,newname); }. RooDataHist& dataHist(); Return RooDataHist that is represented. const RooDataHist& dataHist() const; Return RooDataHist that is represented. void setInterpolationOrder(Int_t order); Set histogram interpolation order. Int_t getInterpolationOrder() const; Return histogram interpolation order. void setC",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooHistFunc.html:39555,efficient,efficiently,39555,root/html534/RooHistFunc.html,https://root.cern,https://root.cern/root/html534/RooHistFunc.html,3,['efficient'],['efficiently']
Energy Efficiency," = 0) const; Determine integration scenario. If no interpolation is used,; RooHistFunc can perform all integrals over its dependents; analytically via partial or complete summation of the input; histogram. If interpolation is used, only the integral; over all RooHistPdf observables is implemented. Double_t analyticalIntegral(Int_t code, const char* rangeName = 0) const; Return integral identified by 'code'. The actual integration; is deferred to RooDataHist::sum() which implements partial; or complete summation over the histograms contents. list<Double_t>* plotSamplingHint(RooAbsRealLValue& obs, Double_t xlo, Double_t xhi) const; Return sampling hint for making curves of (projections) of this function; as the recursive division strategy of RooCurve cannot deal efficiently; with the vertical lines that occur in a non-interpolated histogram. std::list<Double_t>* binBoundaries(RooAbsRealLValue& , Double_t , Double_t ) const; Return sampling hint for making curves of (projections) of this function; as the recursive division strategy of RooCurve cannot deal efficiently; with the vertical lines that occur in a non-interpolated histogram. void Streamer(TBuffer& b); Stream an object of class RooHistFunc. TObject* clone(const char* newname) const; { return new RooHistFunc(*this,newname); }. virtual ~RooHistFunc(); { }. RooDataHist& dataHist(); Return RooDataHist that is represented. const RooDataHist& dataHist() const; Return RooDataHist that is represented. void setInterpolationOrder(Int_t order); Set histogram interpolation order. Int_t getInterpolationOrder() const; Return histogram interpolation order. void setCdfBoundaries(Bool_t flag); Set use of special boundary conditions for c.d.f.s. Bool_t getCdfBoundaries() const; If true, special boundary conditions for c.d.f.s are used. Bool_t isBinnedDistribution(const RooArgSet& ) const; { return _intOrder==0 ; }. Double_t totalVolume() const. » Last changed: Fri Dec 2 14:26:50 2011 » Last generated: 2011-12-02 14:26; This pag",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooHistFunc.html:36683,efficient,efficiently,36683,root/html532/RooHistFunc.html,https://root.cern,https://root.cern/root/html532/RooHistFunc.html,1,['efficient'],['efficiently']
Energy Efficiency," = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Attributes inherited from TArrayL64; Long64_t * fArray;  ;  Public Attributes inherited from TArray; Int_t fN;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from TH3; static TH1D * DoProject1D (const TH3 &h, const char *name, const char *title, const TAxis *projX, bool computeErrors, bool originalRange, bool useUF, bool useOF);  static methdod performing the projection to 1D histogram ;  ; static TH2D * DoProject2D (const TH3 &h, const char *name, const char *title, const TAxis *projX, const TAxis *projY, bool computeErrors, bool originalRange, bool useUF, bool useOF);  static methdod performing the projection to 2D histogram ;  ;  Static Protected Member Functions inherited from TH1; static Int_t AutoP2GetBins (Int_t n);  Auxiliary function to get the next power of 2 integer value larger then n. ;  ; static Double_t AutoP2GetPower2 (Double_t x, Bool_t next=kTRUE);  Auxiliary function to get the power of 2 next (larger) or previous (smaller) a given x. ;  ; static bool CheckAxisLimits (const TAxis *a1, const TAxis *a2);  Check that the axis limits of the histograms are the same. ;  ; static bool CheckBinLabels (const TAxis *a1, const TAxis *a2);  Check that axis have same labels. ;  ; static bool CheckBinLimits (const TAxis *a1, const TAxis *a2);  Check bin limits. ;  ; static int CheckConsistency (const TH1 *h1, const TH1 *h2); ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH3L.html:57361,power,power,57361,doc/master/classTH3L.html,https://root.cern,https://root.cern/doc/master/classTH3L.html,1,['power'],['power']
Energy Efficiency," = 1.); Perform a rank 1 operation on the matrix:; A += alpha * v * v^T. TMatrixTSym<Element> &TMatrixTSym<Element> Similarity(const TMatrixT<Element> &b); Calculate B * (*this) * B^T , final matrix will be (nrowsb x nrowsb); This is a similarity transform when B is orthogonal . It is more; efficient than applying the actual multiplication because this; routine realizes that the final matrix is symmetric . TMatrixTSym<Element> &TMatrixTSym<Element> Similarity(const TMatrixTSym<Element> &b); Calculate B * (*this) * B^T , final matrix will be (nrowsb x nrowsb); This is a similarity transform when B is orthogonal . It is more; efficient than applying the actual multiplication because this; routine realizes that the final matrix is symmetric . Element TMatrixTSym<Element> Similarity(const TVectorT<double>& v) const; Calculate scalar v * (*this) * v^T. TMatrixTSym<Element> &TMatrixTSym<Element> SimilarityT(const TMatrixT<double>& n); Calculate B^T * (*this) * B , final matrix will be (ncolsb x ncolsb); It is more efficient than applying the actual multiplication because this; routine realizes that the final matrix is symmetric . TMatrixTSym<Element> &TMatrixTSym<Element> operator=(const TMatrixTSym<Element> &source). TMatrixTSym<Element> &TMatrixTSym<Element> operator=(const TMatrixTSymLazy<Element> &lazy_constructor). TMatrixTSym<Element> &TMatrixTSym<Element> operator=(Element val); Assign val to every element of the matrix. TMatrixTSym<Element> &TMatrixTSym<Element> operator+=(Element val); Add val to every element of the matrix. TMatrixTSym<Element> &TMatrixTSym<Element> operator-=(Element val); Subtract val from every element of the matrix. TMatrixTSym<Element> &TMatrixTSym<Element> operator*=(double val); Multiply every element of the matrix with val. TMatrixTSym<Element> &TMatrixTSym<Element> operator+=(const TMatrixTSym<Element> &source); Add the source matrix. TMatrixTSym<Element> &TMatrixTSym<Element> operator-=(const TMatrixTSym<Element> &source); Subtract the",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMatrixTSym_double_.html:19796,efficient,efficient,19796,root/html602/TMatrixTSym_double_.html,https://root.cern,https://root.cern/root/html602/TMatrixTSym_double_.html,2,['efficient'],['efficient']
Energy Efficiency," = 184; colors[17].blue = 20;; 84 colors[18].red = 235; colors[18].green = 235; colors[18].blue = 71;; 85 colors[19].red = 240; colors[19].green = 240; colors[19].blue = 117;; 86 colors[20].red = 138; colors[20].green = 15; colors[20].blue = 138;; 87 colors[21].red = 184; colors[21].green = 20; colors[21].blue = 184;; 88 colors[22].red = 235; colors[22].green = 71; colors[22].blue = 235;; 89 colors[23].red = 240; colors[23].green = 117; colors[23].blue = 240;; 90 colors[24].red = 15; colors[24].green = 138; colors[24].blue = 138;; 91 colors[25].red = 20; colors[25].green = 184; colors[25].blue = 184;; 92 colors[26].red = 71; colors[26].green = 235; colors[26].blue = 235;; 93 colors[27].red = 117; colors[27].green = 240; colors[27].blue = 240;; 94 }; 95 ; 96 ; 97 /*; 98 * Allocate memory for segments; 99 */; 100 ; 101 if (gSize3D.numSegs) {; 102 segs = (segment *) calloc (gSize3D.numSegs, sizeof (segment));; 103 if (!segs) {; 104 puts (""Unable to allocate memory for segments !"");; 105 ret = 0;; 106 }; 107 }; 108 ; 109 ; 110 /*; 111 * Allocate memory for polygons; 112 */; 113 ; 114 if (gSize3D.numPolys) {; 115 polys = (polygon *) calloc(gSize3D.numPolys, sizeof (polygon));; 116 if (!polys) {; 117 puts (""Unable to allocate memory for polygons !"");; 118 ret = 0;; 119 }; 120 }; 121 ; 122 /*; 123 * In case of error, free allocated memory; 124 */; 125 ; 126 ; 127 if (!ret) {; 128 if (points) free (points);; 129 if (colors) free (colors);; 130 if (segs) free (segs);; 131 if (polys) free (polys);; 132 ; 133 points = NULL;; 134 colors = NULL;; 135 segs = NULL;; 136 polys = NULL;; 137 }; 138 ; 139 return (ret);; 140}; 141 ; 142void FillX3DBuffer (X3DBuffer *buff); 143{; 144/******************************************************************************; 145 Read points, Read segments & Read polygons; 146******************************************************************************/; 147 ; 148 ; 149 int n, i, j, p, q, c;; 150 int oldNumOfPoints, oldNumOfSegments;; 151 ; 152 if (b",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/X3DBuffer_8c_source.html:3868,allocate,allocate,3868,doc/master/X3DBuffer_8c_source.html,https://root.cern,https://root.cern/doc/master/X3DBuffer_8c_source.html,1,['allocate'],['allocate']
Energy Efficiency," = df_iso.Define(""Electron_ip3d_el"", ""sqrt(Electron_dxy*Electron_dxy + Electron_dz*Electron_dz)""); df_el_sip3d = df_el_ip3d.Define(""Electron_sip3d_el"",; ""Electron_ip3d_el/sqrt(Electron_dxyErr*Electron_dxyErr + ""; ""Electron_dzErr*Electron_dzErr)""); df_el_track = df_el_sip3d.Filter(""All(Electron_sip3d_el<4) && All(abs(Electron_dxy)<0.5) &&""; "" All(abs(Electron_dz)<1.0)"",; ""Electron track close to primary vertex with small uncertainty""); df_mu_ip3d = df_el_track.Define(""Muon_ip3d_mu"", ""sqrt(Muon_dxy*Muon_dxy + Muon_dz*Muon_dz)""); ; df_mu_sip3d = df_mu_ip3d.Define(""Muon_sip3d_mu"",; ""Muon_ip3d_mu/sqrt(Muon_dxyErr*Muon_dxyErr + Muon_dzErr*Muon_dzErr)""); df_mu_track = df_mu_sip3d.Filter(""All(Muon_sip3d_mu<4) && All(abs(Muon_dxy)<0.5) && All(abs(Muon_dz)<1.0)"",; ""Muon track close to primary vertex with small uncertainty""); df_2p2n = df_mu_track.Filter(""Sum(Electron_charge)==0 && Sum(Muon_charge)==0"",; ""Two opposite charged electron and muon pairs""); ; return df_2p2n; ; ; def reco_higgs_to_4mu(df):; """"""Reconstruct Higgs from four muons""""""; # Filter interesting events; df_base = selection_4mu(df); ; # Reconstruct Z systems; df_z_idx = df_base.Define(""Z_idx"", ""reco_zz_to_4l(Muon_pt, Muon_eta, Muon_phi, Muon_mass, Muon_charge)""); ; # Cut on distance between muons building Z systems; df_z_dr = df_z_idx.Filter(""filter_z_dr(Z_idx, Muon_eta, Muon_phi)"", ""Delta R separation of muons building Z system""); ; # Compute masses of Z systems; df_z_mass = df_z_dr.Define(""Z_mass"", ""compute_z_masses_4l(Z_idx, Muon_pt, Muon_eta, Muon_phi, Muon_mass)""); ; # Cut on mass of Z candidates; df_z_cut = filter_z_candidates(df_z_mass); ; # Reconstruct H mass; df_h_mass = df_z_cut.Define(""H_mass"", ""compute_higgs_mass_4l(Z_idx, Muon_pt, Muon_eta, Muon_phi, Muon_mass)""); ; return df_h_mass; ; ; def selection_4mu(df):; """"""Select interesting events with four muons""""""; df_ge4m = df.Filter(""nMuon>=4"", ""At least four muons""); ; df_iso = df_ge4m.Filter(""All(abs(Muon_pfRelIso04_all)<0.40)"", ""Require good isolati",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/df103__NanoAODHiggsAnalysis_8py.html:4745,charge,charged,4745,doc/master/df103__NanoAODHiggsAnalysis_8py.html,https://root.cern,https://root.cern/doc/master/df103__NanoAODHiggsAnalysis_8py.html,1,['charge'],['charged']
Energy Efficiency," = r * v;; You can also use the Transform() method or the operator *= of the TVector3 class:; TVector3 v;; TRotation r;; v.Transform(r);; 17.4 TLorentzVector; TLorentzVector is a general four-vector class, which can be used either for the description of position and time (x, y, z, t) or momentum and energy (px, py, pz, E).; 17.4.1 Declaration; TLorentzVector has been implemented as a set a TVector3 and a Double_t variable. By default, all components are initialized by zero.; TLorentzVector v1; // initialized by (0.,0.,0.,0.); TLorentzVector v2(1.,1.,1.,1.);; TLorentzVector v3(v1);; TLorentzVector v4(TVector3(1.,2.,3.),4.);; For backward compatibility there are two constructors from a Double_t and Float_t array.; 17.4.2 Access to Components; There are two sets of access functions to the components of a TLorentzVector: X(), Y(), Z(), T() and Px(), Py(), Pz() and E(). Both sets return the same values but the first set is more relevant for use where TLorentzVector describes a combination of position and time and the second set is more relevant where TLorentzVector describes momentum and energy:; Double_t xx =v.X();; ...; Double_t tt = v.T();; Double_t px = v.Px();; ...; Double_t ee = v.E();; The components of TLorentzVector can also accessed by index:; xx = v(0);orxx = v[0];; yy = v(1);yy = v[1];; zz = v(2);zz = v[2];; tt = v(3);tt = v[3];; You can use the Vect() method to get the vector component of TLorentzVector:; TVector3 p = v.Vect();; For setting components there are two methods: SetX(),.., SetPx(),..:; v.SetX(1.); orv.SetPx(1.);; ......; v.SetT(1.);v.SetE(1.);; To set more the one component by one call you can use the SetVect() function for the TVector3 part or SetXYZT(), SetPxPyPzE(). For convenience there is also a SetXYZM():; v.SetVect(TVector3(1,2,3));; v.SetXYZT(x,y,z,t);; v.SetPxPyPzE(px,py,pz,e);; v.SetXYZM(x,y,z,m); // v = (x,y,z,e = Sqrt(x*x+y*y+z*z+m*m)); 17.4.3 Vector Components in Non-Cartesian Coordinates; There are a couple of methods to get and set ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:867172,energy,energy,867172,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['energy'],['energy']
Energy Efficiency," > RooAbsData::reduce ; (; const RooArgSet & ; varSubset, . const char * ; cut = nullptr . ); const. Create a subset of the data set by applying the given cut on the data points and reducing the dimensions to the specified set. ; The cut expression can refer to any variable in the data set. For cuts involving other variables, such as intermediate formula objects, use the equivalent reduce method specifying the as a RooFormulVar reference. ; Definition at line 500 of file RooAbsData.cxx. ◆ reduce() [3/5]. RooFit::OwningPtr< RooAbsData > RooAbsData::reduce ; (; const RooArgSet & ; varSubset, . const RooFormulaVar & ; cutVar . ); const. Create a subset of the data set by applying the given cut on the data points and reducing the dimensions to the specified set. ; The 'cutVar' formula variable is used to select the subset of data points to be retained in the reduced data collection. ; Definition at line 530 of file RooAbsData.cxx. ◆ reduce() [4/5]. RooFit::OwningPtr< RooAbsData > RooAbsData::reduce ; (; const RooCmdArg & ; arg1, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ); const. Create a reduced copy of this dataset. ; The caller takes ownership of the returned dataset; The following optional named arguments are accepted . SelectVars(const RooArgSet& vars) Only retain the listed observables in the output dataset . Cut(const char* expression) Only retain event surviving the given cut expression. . Cut(const RooFormulaVar& expr) Only retain event surviving the given cut formula. . CutRange(const char* name) Only retain events inside range with given name. Multiple CutRange arguments may be given to select multiple ranges. Note that this will also consider the variables that are not selected by SelectVars(). . EventRange(int lo, int hi) Only retain events with given sequential event nu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsData.html:63415,reduce,reduce,63415,doc/master/classRooAbsData.html,https://root.cern,https://root.cern/doc/master/classRooAbsData.html,1,['reduce'],['reduce']
Energy Efficiency," >;  CAlgebraicSumType;  CAlgebraicSumType< gen, vec >;  CAlgebraicSumType< sym, vec >;  CAlgebraicSumType< T, T >;  CAlgebraicSumType< vec, gen >;  CAlgebraicSumType< vec, sym >;  CAnalyticalGradientCalculator;  CBasicFunctionGradient;  ►CBasicFunctionMinimumResult of the minimization; both internal and external (MnUserParameterState) representation available For the parameters at the Minimum ;  CMnAboveMaxEdm;  CMnReachedCallLimit;  ►CBasicMinimumErrorInternal Class containing the error information on the estimated minimum : Error matrix + dcovar + additional flags for quality and validity checks ;  CMnHesseFailed;  CMnInvertFailed;  CMnMadePosDef;  CMnNotPosDef;  CBasicMinimumParameters;  CBasicMinimumSeed;  CBasicMinimumState;  CCombinedMinimizerCombined minimizer: combination of Migrad and Simplex ;  CCombinedMinimumBuilder;  CContoursError;  CDavidonErrorUpdatorUpdate of the covariance matrix for the Variable Metric minimizer (MIGRAD) ;  CFCNAdapterTemplate wrapped class for adapting to FCNBase signature ;  CFCNBaseInterface (abstract class) defining the function to be minimized, which has to be implemented by the user ;  CFCNGradAdapterTemplate wrapped class for adapting to FCNBase signature a IGradFunction ;  CFCNGradientBaseExtension of the FCNBase for providing the analytical Gradient of the function ;  CFlatRandomGen;  CFumiliBuilderBuilds the FunctionMinimum using the Fumili method ;  CFumiliChi2FCNExtension of the FCNBase for the Fumili method ;  CFumiliErrorUpdatorIn the case of the Fumili algorithm the Error matrix (or the Hessian matrix containing the (approximate) second derivatives) is calculated using a linearization of the model function negleting second derivatives ;  CFumiliFCNAdapterTemplate wrapped class for adapting to FumiliFCNBase signature ;  CFumiliFCNBaseExtension of the FCNBase for the Fumili method ;  CFumiliGradientCalculator;  CFumiliMaximumLikelihoodFCNExtension of the FCNBase for the Fumili method ;  CFumiliMinimizerInstantiates th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/annotated.html:55137,adapt,adapting,55137,doc/v608/annotated.html,https://root.cern,https://root.cern/doc/v608/annotated.html,3,['adapt'],['adapting']
Energy Efficiency," >;  CAlgebraicSumType;  CAlgebraicSumType< gen, vec >;  CAlgebraicSumType< sym, vec >;  CAlgebraicSumType< T, T >;  CAlgebraicSumType< vec, gen >;  CAlgebraicSumType< vec, sym >;  CAnalyticalGradientCalculator;  CBasicFunctionGradient;  ►CBasicFunctionMinimumResult of the minimization; both internal and external (MnUserParameterState) representation available For the parameters at the Minimum ;  CMnAboveMaxEdm;  CMnReachedCallLimit;  ►CBasicMinimumErrorInternal Class containing the error information on the estimated minimum : Error matrix + dcovar + additional flags for quality and validity checks ;  CMnHesseFailed;  CMnInvertFailed;  CMnMadePosDef;  CMnNotPosDef;  CBasicMinimumParameters;  CBasicMinimumSeed;  CBasicMinimumState;  CCombinedMinimizerCombined minimizer: combination of Migrad and Simplex ;  CCombinedMinimumBuilder;  CContoursError;  CDavidonErrorUpdatorUpdate of the covariance matrix for the Variable Metric minimizer (MIGRAD) ;  CFCNAdapterTemplate wrapped class for adapting to FCNBase signature ;  CFCNBaseInterface (abstract class) defining the function to be minimized, which has to be implemented by the user ;  CFCNGradAdapterTemplate wrapped class for adapting to FCNBase signature a IGradFunction ;  CFCNGradientBaseExtension of the FCNBase for providing the analytical Gradient of the function ;  CFumiliBuilderBuilds the FunctionMinimum using the Fumili method ;  CFumiliChi2FCNExtension of the FCNBase for the Fumili method ;  CFumiliErrorUpdatorIn the case of the Fumili algorithm the Error matrix (or the Hessian matrix containing the (approximate) second derivatives) is calculated using a linearization of the model function negleting second derivatives ;  CFumiliFCNAdapterTemplate wrapped class for adapting to FumiliFCNBase signature ;  CFumiliFCNBaseExtension of the FCNBase for the Fumili method ;  CFumiliGradientCalculator;  CFumiliMaximumLikelihoodFCNExtension of the FCNBase for the Fumili method ;  CFumiliMinimizerInstantiates the seed generator ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v612/annotated.html:61645,adapt,adapting,61645,doc/v612/annotated.html,https://root.cern,https://root.cern/doc/v612/annotated.html,1,['adapt'],['adapting']
Energy Efficiency," @param size maximum number of sub-intervals. IntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kADAPTIVE, double absTol = 1.E-9, double relTol = 1E-6, unsigned int ncall = 100000); Generic Constructor of multi dimensional Integrator passing a function. By default uses the adaptive integration method. @param f integration function (multi-dim interface); @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param ncall number of function calls (apply only to MC integratioon methods). SetFunction(const ROOT::Math::IMultiGenFunction& f). IntegratorMultiDim(const Function & f, unsigned int dim, IntegrationMultiDim::Type type = IntegrationMultiDim::kADAPTIVE, double absTol = 1.E-9, double relTol = 1E-6, unsigned int ncall = 100000); Template Constructor of multi dimensional Integrator passing a generic function. By default uses the adaptive integration method. @param f integration function (generic function implementin operator()(const double *); @param dim function dimension; @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param ncall number of function calls (apply only to MC integratioon methods). virtual ~IntegratorMultiDim(); destructor. IntegratorMultiDim & operator=(const ROOT::Math::IntegratorMultiDim& ); { return *this; }. double Integral(const double* xmin, const double* xmax). evaluate the integral with the previously given function between xmin[] and xmax[]. double Integral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); evaluate the integral passing a new function. double Result() const; return result of last integration. { return fIntegrator == 0 ? 0 : fIntegrator->Result(); }. double Error() const; return integration error. { return fIntegrator == 0 ? 0 : fIntegrator->Error(); }. in",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__IntegratorMultiDim.html:3536,adapt,adaptive,3536,root/html526/ROOT__Math__IntegratorMultiDim.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__IntegratorMultiDim.html,1,['adapt'],['adaptive']
Energy Efficiency," Aurora; 3145 case 67:; 3146 {; 3147 Double_t red[9] = { 46./255., 38./255., 61./255., 92./255., 113./255., 121./255., 132./255., 150./255., 191./255.};; 3148 Double_t green[9] = { 46./255., 36./255., 40./255., 69./255., 110./255., 135./255., 131./255., 92./255., 34./255.};; 3149 Double_t blue[9] = { 46./255., 80./255., 74./255., 70./255., 81./255., 105./255., 165./255., 211./255., 225./255.};; 3150 Idx = TColor::CreateGradientColorTable(9, stops, red, green, blue, 255, alpha);; 3151 }; 3152 break;; 3153 ; 3154 // Avocado; 3155 case 68:; 3156 {; 3157 Double_t red[9] = { 0./255., 4./255., 12./255., 30./255., 52./255., 101./255., 142./255., 190./255., 237./255.};; 3158 Double_t green[9] = { 0./255., 40./255., 86./255., 121./255., 140./255., 172./255., 187./255., 213./255., 240./255.};; 3159 Double_t blue[9] = { 0./255., 9./255., 14./255., 18./255., 21./255., 23./255., 27./255., 35./255., 101./255.};; 3160 Idx = TColor::CreateGradientColorTable(9, stops, red, green, blue, 255, alpha);; 3161 }; 3162 break;; 3163 ; 3164 // Beach; 3165 case 69:; 3166 {; 3167 Double_t red[9] = { 198./255., 206./255., 206./255., 211./255., 198./255., 181./255., 161./255., 171./255., 244./255.};; 3168 Double_t green[9] = { 103./255., 133./255., 150./255., 172./255., 178./255., 174./255., 163./255., 175./255., 244./255.};; 3169 Double_t blue[9] = { 49./255., 54./255., 55./255., 66./255., 91./255., 130./255., 184./255., 224./255., 244./255.};; 3170 Idx = TColor::CreateGradientColorTable(9, stops, red, green, blue, 255, alpha);; 3171 }; 3172 break;; 3173 ; 3174 // Black Body; 3175 case 70:; 3176 {; 3177 Double_t red[9] = { 243./255., 243./255., 240./255., 240./255., 241./255., 239./255., 186./255., 151./255., 129./255.};; 3178 Double_t green[9] = { 0./255., 46./255., 99./255., 149./255., 194./255., 220./255., 183./255., 166./255., 147./255.};; 3179 Double_t blue[9] = { 6./255., 8./255., 36./255., 91./255., 169./255., 235./255., 246./255., 240./255., 233./255.};; 3180 Idx = TColor::CreateGradient",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TColor_8cxx_source.html:120781,green,green,120781,doc/master/TColor_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TColor_8cxx_source.html,1,['green'],['green']
Energy Efficiency," Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » About Project Founders. Rene Brun ; ; Rene, a lifetime developer of ROOT. He joined CERN in 1973. While working with C. Rubbia at the ISR he developped the HBOOK package still in use today. In 1975 he followed Rubbia in the NA4 deep inelastic muon scattering experiment at the SPS where he was in charge of the simulation and reconstruction software and where GEANT1 and GEANT2 were created. In 1981, he joined OPAL at LEP, creating the GEANT3 detector simulation system, also pioneering the introduction of the first workstations like Apollos in Europe. In 1984 he coordinated the development of the PAW (Physics Analysis Workstation) data analysis system. Until 1994 he was in charge of the Application Software group in the computing division. In 1995, at a time when the majority of software gurus had decided to follow a dead-end line, he created the ROOT system while working for the NA49 heavy ion experiment at the SPS. Rene has led the ROOT project from 1995-2010.; ; . Fons Rademakers ; ; Fons received his Ph.D. in particle physics from the Univ. of Amsterdam in 1991 for his work on event displays and data analysis for the DELPHI experiment at CERN's LEP collider. Since then he has worked at CERN and been involved in designing and developing data analysis programs. In 1991 h",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/project-founders.html:2150,charge,charge,2150,d/project-founders.html,https://root.cern,https://root.cern/d/project-founders.html,1,['charge'],['charge']
Energy Efficiency," Bool_t newParticle = kTRUE;; gstep.step = 0.1;; gstep.destep = 0;; gstep.nmec = 0;; gstep.pid = 0;; ; //transport particles; for (Int_t i=0;i<10000;i++) {; //generate a new particle if necessary; if (newParticle) {; px = gRandom->Gaus(0,.02);; py = gRandom->Gaus(0,.02);; pz = gRandom->Gaus(0,.02);; p = TMath::Sqrt(px*px+py*py+pz*pz);; charge = 1; if (gRandom->Rndm() < 0.5) charge = -1;; gstep.pid += 1;; gstep.vect[0] = 0;; gstep.vect[1] = 0;; gstep.vect[2] = 0;; gstep.vect[3] = px/p;; gstep.vect[4] = py/p;; gstep.vect[5] = pz/p;; gstep.vect[6] = p*charge;; gstep.getot = TMath::Sqrt(p*p + mass*mass);; gstep.gekin = gstep.getot - mass;; newParticle = kFALSE;; }; ; // fill the Tree with current step parameters; t2.Fill();; ; //transport particle in magnetic field; helixStep(gstep.step, gstep.vect, vout); //make one step; ; //apply energy loss; gstep.destep = gstep.step*gRandom->Gaus(0.0002,0.00001);; gstep.gekin -= gstep.destep;; gstep.getot = gstep.gekin + mass;; gstep.vect[6] = charge*TMath::Sqrt(gstep.getot*gstep.getot - mass*mass);; gstep.vect[0] = vout[0];; gstep.vect[1] = vout[1];; gstep.vect[2] = vout[2];; gstep.vect[3] = vout[3];; gstep.vect[4] = vout[4];; gstep.vect[5] = vout[5];; gstep.nmec = (Int_t)(5*gRandom->Rndm());; for (Int_t l=0;l<gstep.nmec;l++) gstep.lmec[l] = l;; if (gstep.gekin < 0.001) newParticle = kTRUE;; if (TMath::Abs(gstep.vect[2]) > 30) newParticle = kTRUE;; }; ; //save the Tree header. The file will be automatically closed; //when going out of the function scope; t2.Write();; }; ; void tree2r(); {; //read the Tree generated by tree2w and fill one histogram; //we are only interested by the destep branch.; ; //note that we use ""new"" to create the TFile and TTree objects !; //because we want to keep these objects alive when we leave; //this function.; TFile *f = new TFile(""tree2.root"");; TTree *t2 = (TTree*)f->Get(""t2"");; static Float_t destep;; TBranch *b_destep = t2->GetBranch(""destep"");; b_destep->SetAddress(&destep);; ; //create one histog",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tree2_8C.html:3861,charge,charge,3861,doc/master/tree2_8C.html,https://root.cern,https://root.cern/doc/master/tree2_8C.html,1,['charge'],['charge']
Energy Efficiency," CERN/SFT,; Jonas Hahnfeld, CERN/SFT,; Emmanouil Michalainas, CERN/SFT,; Stephan Hageboeck, CERN/SFT,; Sergey Linev, GSI,; Javier Lopez-Gomez, CERN/SFT,; Pere Mato, CERN/SFT,; Lorenzo Moneta, CERN/SFT,; Alja Mrak-Tadel, UCSD/CMS,; Axel Naumann, CERN/SFT,; Vincenzo Eduardo Padulano, CERN/SFT and UPV,; Danilo Piparo, CERN/SFT,; Fons Rademakers, CERN/SFT,; Jonas Rembser, CERN/SFT,; Andrea Sciandra, SCIPP-UCSC/Atlas,; Oksana Shadura, UNL/CMS,; Enric Tejedor Saavedra, CERN/SFT,; Christian Tacke, GSI,; Matevz Tadel, UCSD/CMS,; Vassil Vassilev, Princeton/CMS,; Wouter Verkerke, NIKHEF/Atlas,; Stefan Wunsch, CERN/SFT; General; Deprecation and Removal. RooAbsReal::evaluateBatch() has been removed in favour of the faster evaluateSpan(). See section “RooFit Libraries” for instructions on how to use RooAbsReal::evaluateSpan().; TTreeProcessorMT::SetMaxTasksPerFilePerWorker has been deprecated in favour of TTreeProcessorMT::SetTasksPerWorkerHint. Header Dependency Reduction; As always, ROOT tries to reduce the amount of code exposed through its headers. To that end, #includes were replaced by forward declarations in several headers. This might cause compilation errors (“missing definition of type…”) in your code, if that code was relying on indirect includes, instead of including the required headers itself. Please correct that simply by including the required header directly.; Core Libraries; Due to internal changes required to comply with the deprecation of Intel TBB’s task_scheduler_init and related interfaces in recent TBB versions, as of v6.24 ROOT will not honor a maximum concurrency level set with tbb::task_scheduler_init but will require instead the usage of tbb::global_control:; //tbb::task_scheduler_init init(2); // does not affect the number of threads ROOT will use anymore. tbb::global_control c(tbb::global_control::max_allowed_parallelism, 2);; ROOT::TThreadExecutor p1; // will use 2 threads; ROOT::TThreadExecutor p2(/*nThreads=*/8); // will still use 2 threads; Note ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v624/release-notes.html:2937,reduce,reduce,2937,doc/v624/release-notes.html,https://root.cern,https://root.cern/doc/v624/release-notes.html,1,['reduce'],['reduce']
Energy Efficiency, Carlo study manager add-on module; RooAbsNumGenerator Abstract base class for numeric event generator algorithms; RooAbsOptTestStatistic Abstract base class for optimized test statistics; RooAbsPdf Abstract PDF with normalization support; RooAbsProxy Abstract proxy interface; RooAbsReal Abstract real-valued variable; RooAbsRealLValue Abstract modifiable real-valued object; RooAbsRootFinder Abstract interface for 1-dim real-valued function root finders; RooAbsSelfCachedPdf Abstract base class for self-caching p.d.f.s; RooAbsSelfCachedReal Abstract base class for self-caching functions; RooAbsString Abstract string-valued variable; RooAbsTestStatistic Abstract base class for real-valued test statistics; RooAcceptReject Context for generating a dataset from a PDF; RooAdaptiveGaussKronrodIntegrator1D 1-dimensional adaptive Gauss-Kronrod numerical integration engine; RooAdaptiveIntegratorND N-dimensional adaptive integration (interface to MathCore integrator); RooAddGenContext Specialized context for generating a dataset from a RooAddPdf; RooAddModel Resolution model representing a sum of resolution models; RooAddPdf PDF representing a sum of PDFs; RooAddition Sum of RooAbsReal objects; RooArgList Ordered list of RooAbsArg objects; RooArgProxy Abstract proxy for RooAbsArg objects; RooArgSet Set of RooAbsArg objects; RooArgusBG Argus background shape PDF; RooBCPEffDecay B Mixing decay PDF; RooBCPGenDecay B decay time distribution with CP violation; RooBDecay P.d.f of general description of B decay time distribution; RooBMixDecay B Mixing decay PDF; RooBernstein Bernstein polynomial PDF; RooBifurGauss Bifurcated Gaussian PDF; RooBinning Generic binning specification; RooBinningCategory RealVar-to-Category function defined by bin boundaries on input var; RooBlindTools Root implementation of BlindTools; RooBreitWigner Breit Wigner PDF; RooBrentRootFinder Abstract interface for 1-dim real-valued function root finders; RooBukinPdf Variation of Novosibirsk PDF; RooCBShape Cryst,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html524/ClassIndex.html:24971,adapt,adaptive,24971,root/html524/ClassIndex.html,https://root.cern,https://root.cern/root/html524/ClassIndex.html,2,['adapt'],['adaptive']
Energy Efficiency," Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; IntegratorMultiDim(ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); Generic constructor of multi dimensional Integrator. By default uses the Adaptive integration method. @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. In case no parameter values are passed the default ones used in IntegratorMultiDimOptions are used. IntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); Generic Constructor of multi dimensional Integrator passing a function. By default uses the adaptive integration method. @param f integration function (multi-dim interface); @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param ncall number of function calls (apply only to MC integratioon methods). SetFunction(const ROOT::Math::IMultiGenFunction& f). virtual ~IntegratorMultiDim(); remove template constructor since is ambigous; Template Constructor of multi dimensional Integrator passing a generic function. By default uses the adaptive integration method. @param f integration function (generic function implementin operator()(const double *); @param dim function dimension; @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param ncall number of function calls (apply only to MC integratioon methods). this is ambigous; template<class Function>; IntegratorMultiDim(Function & f, unsigned int dim, IntegrationMultiDim::Type type = IntegrationMultiDim::kADAPTIVE, double absTol = 1.E-9, double r",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__IntegratorMultiDim.html:3395,adapt,adaptive,3395,root/html528/ROOT__Math__IntegratorMultiDim.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__IntegratorMultiDim.html,6,['adapt'],['adaptive']
Energy Efficiency," Clip ==1 the segment has one point outside the boundary.; If Clip ==0 the segment is inside the boundary. _Input parameters:. x[2], y[2] : Segment coordinates; xclipl, yclipb, xclipr, yclipt : Clipping boundary. _Output parameters:. x[2], y[2] : New segment coordinates. Int_t ClippingCode(Double_t x, Double_t y, Double_t xcl1, Double_t ycl1, Double_t xcl2, Double_t ycl2); Compute the endpoint codes for TPad::Clip. Int_t ClipPolygon(Int_t n, Double_t* x, Double_t* y, Int_t nn, Double_t* xc, Double_t* yc, Double_t xclipl, Double_t yclipb, Double_t xclipr, Double_t yclipt); Clip polygon using the Sutherland-Hodgman algorithm. Input parameters:. n: Number of points in the polygon to be clipped; x[n], y[n] : Polygon do be clipped vertices; xclipl, yclipb, xclipr, yclipt : Clipping boundary. Output parameters:. nn: number of points in xc and yc; xc, yc: clipped polygon vertices. The Int_t returned by this function is; the number of points in the clipped polygon. These vectors must; be allocated by the calling function. A size of 2*n for each is; enough. Sutherland and Hodgman's polygon-clipping algorithm uses a divide-and-conquer; strategy: It solves a series of simple and identical problems that, when; combined, solve the overall problem. The simple problem is to clip a polygon; against a single infinite clip edge. Four clip edges, each defining one boundary; of the clip rectangle, successively clip a polygon against a clip rectangle. Steps of Sutherland-Hodgman's polygon-clipping algorithm:. * Polygons can be clipped against each edge of the window one at a time.; Windows/edge intersections, if any, are easy to find since the X or Y coordinates; are already known.; * Vertices which are kept after clipping against one window edge are saved for; clipping against the remaining edges.; * Note that the number of vertices usually changes and will often increases. The clip boundary determines a visible and invisible region. The edges from; vertex i to vertex i+1 can be one of",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TPad.html:34022,allocate,allocated,34022,root/html528/TPad.html,https://root.cern,https://root.cern/root/html528/TPad.html,6,['allocate'],['allocated']
Energy Efficiency," Create TGenericTable by TTableDescriptor pointer:. dsc - Pointer to the table descriptor; name - ""TGenericTable""; n - The initial number of allocated rows. TGenericTable(const TTableDescriptor& dsc, const char* name, Int_t n). Create TGenericTable by TTableDescriptor pointer:. dsc - Pointer to the table descriptor; name - The name of this object; n - The initial number of allocated rows. TGenericTable(const char* structName, const char* name). Create TGenericTable by C structure name provided:. dsc - Pointer to the table descriptor; name - The name of this object; n - The initial number of allocated rows. TGenericTable(const char* structName, Int_t n). Create TGenericTable by C structure name provided:. dsc - Pointer to the table descriptor; name - The name of this object; n - The initial number of allocated rows. TGenericTable(const char* structName, const char* name, Int_t n). Create TGenericTable by C structure name provided:. dsc - Pointer to the table descriptor; name - The name of this object; n - The initial number of allocated rows. ~TGenericTable(); destructor. TTableDescriptor * GetDescriptorPointer() const; { return fColDescriptors;}. void SetDescriptorPointer(TTableDescriptor* list); { fColDescriptors = list;}. void SetGenericType(); { TTable::SetType(GetDescriptorPointer()->GetName()); }. TGenericTable(); {SetType(""generic"");}. TGenericTable(const char* structName, const char* name); Create TGenericTable by C structure name provided. char * GetTable(Int_t i = 0) const; { return ((char *)GetArray())+i*GetRowSize();}. TTableDescriptor * GetTableDescriptors() const; { return GetDescriptorPointer();}. TTableDescriptor * GetRowDescriptors() const; { return GetDescriptorPointer();}. char & operator[](Int_t i); { assert(i>=0 && i < GetNRows()); return *GetTable(i); }. const char & operator[](Int_t i) const; { assert(i>=0 && i < GetNRows()); return *((const char *)(GetTable(i))); }. iterator begin(); { return ((const TGenericTable *)this)->begin();}. iterator b",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGenericTable.html:17564,allocate,allocated,17564,root/html528/TGenericTable.html,https://root.cern,https://root.cern/root/html528/TGenericTable.html,4,['allocate'],['allocated']
Energy Efficiency," Create TGenericTable by TTableDescriptor pointer:. dsc - Pointer to the table descriptor; name - ""TGenericTable""; n - The initial number of allocated rows. TGenericTable(const TTableDescriptor& dsc, const char* name, Int_t n). Create TGenericTable by TTableDescriptor pointer:. dsc - Pointer to the table descriptor; name - The name of this object; n - The initial number of allocated rows. TGenericTable(const char* structName, const char* name). Create TGenericTable by C structure name provided:. dsc - Pointer to the table descriptor; name - The name of this object; n - The initial number of allocated rows. TGenericTable(const char* structName, Int_t n). Create TGenericTable by C structure name provided:. dsc - Pointer to the table descriptor; name - The name of this object; n - The initial number of allocated rows. TGenericTable(const char* structName, const char* name, Int_t n). Create TGenericTable by C structure name provided:. dsc - Pointer to the table descriptor; name - The name of this object; n - The initial number of allocated rows. ~TGenericTable(); destructor. TTableDescriptor * GetDescriptorPointer() const; { return fColDescriptors;}. void SetDescriptorPointer(TTableDescriptor* list); { fColDescriptors = list;}. void SetGenericType(); { TTable::SetType(GetDescriptorPointer()->GetName()); }. iterator & operator=(const TGenericTable& ); { fRowSize = iter.fRowSize; fCurrentRow = iter.fCurrentRow; return *this;}. TGenericTable(); {SetType(""generic"");}. TGenericTable(const char* structName, const char* name); Create TGenericTable by C structure name provided. char * GetTable(Int_t i = 0) const; { return ((char *)GetArray())+i*GetRowSize();}. TTableDescriptor * GetTableDescriptors() const; { return GetDescriptorPointer();}. TTableDescriptor * GetRowDescriptors() const; { return GetDescriptorPointer();}. char & operator[](Int_t i); { assert(i>=0 && i < GetNRows()); return *GetTable(i); }. const char & operator[](Int_t i) const; { assert(i>=0 && i < GetNRows()); ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGenericTable.html:19060,allocate,allocated,19060,root/html602/TGenericTable.html,https://root.cern,https://root.cern/root/html602/TGenericTable.html,2,['allocate'],['allocated']
Energy Efficiency," Dark Terrain; 3255 case 78:; 3256 {; 3257 Double_t red[9] = { 0./255., 41./255., 62./255., 79./255., 90./255., 87./255., 99./255., 140./255., 228./255.};; 3258 Double_t green[9] = { 0./255., 57./255., 81./255., 93./255., 85./255., 70./255., 71./255., 125./255., 228./255.};; 3259 Double_t blue[9] = { 95./255., 91./255., 91./255., 82./255., 60./255., 43./255., 44./255., 112./255., 228./255.};; 3260 Idx = TColor::CreateGradientColorTable(9, stops, red, green, blue, 255, alpha);; 3261 }; 3262 break;; 3263 ; 3264 // Fall; 3265 case 79:; 3266 {; 3267 Double_t red[9] = { 49./255., 59./255., 72./255., 88./255., 114./255., 141./255., 176./255., 205./255., 222./255.};; 3268 Double_t green[9] = { 78./255., 72./255., 66./255., 57./255., 59./255., 75./255., 106./255., 142./255., 173./255.};; 3269 Double_t blue[9] = { 78./255., 55./255., 46./255., 40./255., 39./255., 39./255., 40./255., 41./255., 47./255.};; 3270 Idx = TColor::CreateGradientColorTable(9, stops, red, green, blue, 255, alpha);; 3271 }; 3272 break;; 3273 ; 3274 // Fruit Punch; 3275 case 80:; 3276 {; 3277 Double_t red[9] = { 243./255., 222./255., 201./255., 185./255., 165./255., 158./255., 166./255., 187./255., 219./255.};; 3278 Double_t green[9] = { 94./255., 108./255., 132./255., 135./255., 125./255., 96./255., 68./255., 51./255., 61./255.};; 3279 Double_t blue[9] = { 7./255., 9./255., 12./255., 19./255., 45./255., 89./255., 118./255., 146./255., 118./255.};; 3280 Idx = TColor::CreateGradientColorTable(9, stops, red, green, blue, 255, alpha);; 3281 }; 3282 break;; 3283 ; 3284 // Fuchsia; 3285 case 81:; 3286 {; 3287 Double_t red[9] = { 19./255., 44./255., 74./255., 105./255., 137./255., 166./255., 194./255., 206./255., 220./255.};; 3288 Double_t green[9] = { 19./255., 28./255., 40./255., 55./255., 82./255., 110./255., 159./255., 181./255., 220./255.};; 3289 Double_t blue[9] = { 19./255., 42./255., 68./255., 96./255., 129./255., 157./255., 188./255., 203./255., 220./255.};; 3290 Idx = TColor::CreateGradientColorTable",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TColor_8cxx_source.html:126548,green,green,126548,doc/master/TColor_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TColor_8cxx_source.html,1,['green'],['green']
Energy Efficiency," Data Members; public:. enum TFileHandler::[unnamed] { kRead; kWrite; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. intTFileHandler::fFileNumFile descriptor; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; intTFileHandler::fMaskEvent interest mask, either bit 1 (read), 2 (write) or both can be set; intTFileHandler::fReadyMaskReadiness mask, either bit 1 (read), 2 (write) or both can be set; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals. private:. TFileHandler*fHandlerHandler associated to the input socket; TSocket*fInputSockInput socket from client or master; static TXSocketHandler*fgSocketHandlerInput socket handler. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Bool_t Notify(); Set readiness on the monitor. TXSocketHandler * GetSocketHandler(TFileHandler* h = 0, TSocket* s = 0); Get an instance of the input socket handler with 'h' as handler,; connected to socket 's'.; Create the instance, if not already existing. void SetHandler(TFileHandler* h, TSocket* s); { fHandler = h; fInputSock = s; }. TXSocketHandler(TFileHandler* h, TSocket* s); { fHandler = h; fInputSock = s; }. virtual ~TXSocketHandler(); { }. Bool_t ReadNotify(); { return Notify(); }. » Author: G. Ganis Oct 2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/proofx:$Id: TXSocketHandler.h 26678 2008-12-05 14:53:23Z ganis $ » Last generated: 2010-09-23 20:22; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TXSocketHandler.html:10415,monitor,monitor,10415,root/html528/TXSocketHandler.html,https://root.cern,https://root.cern/root/html528/TXSocketHandler.html,1,['monitor'],['monitor']
Energy Efficiency," Data Members; public:. enum TFileHandler::[unnamed] { kRead; kWrite; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. intTFileHandler::fFileNumFile descriptor; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; intTFileHandler::fMaskEvent interest mask, either bit 1 (read), 2 (write) or both can be set; intTFileHandler::fReadyMaskReadiness mask, either bit 1 (read), 2 (write) or both can be set; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals. private:. TFileHandler*fHandlerHandler associated to the input socket; TSocket*fInputSockInput socket from client or master; static TXSocketHandler*fgSocketHandlerInput socket handler. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Bool_t Notify(); Set readiness on the monitor. TXSocketHandler * GetSocketHandler(TFileHandler* h = 0, TSocket* s = 0); Get an instance of the input socket handler with 'h' as handler,; connected to socket 's'.; Create the instance, if not already existing. void SetHandler(TFileHandler* h, TSocket* s); { fHandler = h; fInputSock = s; }. TXSocketHandler(TFileHandler* h, TSocket* s); { fHandler = h; fInputSock = s; }. virtual ~TXSocketHandler(); { }. Bool_t ReadNotify(); { return Notify(); }. » Author: G. Ganis Oct 2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/proofx:$Id: TXSocketHandler.h 26678 2008-12-05 14:53:23Z ganis $ » Last generated: 2011-07-04 15:39; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TXSocketHandler.html:10484,monitor,monitor,10484,root/html530/TXSocketHandler.html,https://root.cern,https://root.cern/root/html530/TXSocketHandler.html,1,['monitor'],['monitor']
Energy Efficiency," Data Members; public:. enum TFileHandler::[unnamed] { kRead; kWrite; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. intTFileHandler::fFileNumFile descriptor; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; intTFileHandler::fMaskEvent interest mask, either bit 1 (read), 2 (write) or both can be set; intTFileHandler::fReadyMaskReadiness mask, either bit 1 (read), 2 (write) or both can be set; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals. private:. TFileHandler*fHandlerHandler associated to the input socket; TSocket*fInputSockInput socket from client or master; static TXSocketHandler*fgSocketHandlerInput socket handler. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Bool_t Notify(); Set readiness on the monitor. TXSocketHandler * GetSocketHandler(TFileHandler* h = 0, TSocket* s = 0); Get an instance of the input socket handler with 'h' as handler,; connected to socket 's'.; Create the instance, if not already existing. void SetHandler(TFileHandler* h, TSocket* s); { fHandler = h; fInputSock = s; }. TXSocketHandler(TFileHandler* h, TSocket* s); { fHandler = h; fInputSock = s; }. virtual ~TXSocketHandler(); { }. Bool_t ReadNotify(); { return Notify(); }. » Author: G. Ganis Oct 2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/proofx:$Id: TXSocketHandler.h 26678 2008-12-05 14:53:23Z ganis $ » Last generated: 2011-12-02 14:29; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TXSocketHandler.html:10484,monitor,monitor,10484,root/html532/TXSocketHandler.html,https://root.cern,https://root.cern/root/html532/TXSocketHandler.html,1,['monitor'],['monitor']
Energy Efficiency," Deconstructor. ; Definition at line 326 of file TGondzioSolver.cxx. Member Function Documentation. ◆ Class(). static TClass * TGondzioSolver::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGondzioSolver::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGondzioSolver::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 103 of file TGondzioSolver.h. ◆ DeclFileName(). static const char * TGondzioSolver::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 103 of file TGondzioSolver.h. ◆ DefMonitor(). void TGondzioSolver::DefMonitor ; (; TQpDataBase * ; data, . TQpVar * ; vars, . TQpResidual * ; resids, . Double_t ; alpha, . Double_t ; sigma, . Int_t ; i, . Double_t ; mu, . Int_t ; status_code, . Int_t ; level . ). overridevirtual . Print information about the optimization process and monitor the convergence status of thye algorithm. ; Implements TQpSolverBase.; Definition at line 276 of file TGondzioSolver.cxx. ◆ IsA(). TClass * TGondzioSolver::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 103 of file TGondzioSolver.h. ◆ operator=(). TGondzioSolver & TGondzioSolver::operator= ; (; const TGondzioSolver & ; source). Assignment operator. ; Definition at line 337 of file TGondzioSolver.cxx. ◆ Reset_parameters(). virtual void TGondzioSolver::Reset_parameters ; (; ). inlinevirtual . Definition at line 95 of file TGondzioSolver.h. ◆ Solve(). Int_t TGondzioSolver::Solve ; (; TQpDataBase * ; prob, . TQpVar * ; iterate, . TQpResidual * ; resid . ). overridevirtual . Solve the quadratic programming problem as formulated through prob, store the final solution in iterate->fX . ; Monitor the residuals during the iterations through resid . The status is returned as defined in TQpSolverBase::E",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGondzioSolver.html:15695,monitor,monitor,15695,doc/master/classTGondzioSolver.html,https://root.cern,https://root.cern/doc/master/classTGondzioSolver.html,1,['monitor'],['monitor']
Energy Efficiency," Define new text attributes for the label value ""labValue"". ; It allows to do a fine tuning of the labels. All the attributes can be changed, even the label text itself.; Parameters. [in]labValueAxis value to be changed ; [in]labAngleNew angle value ; [in]labSizeNew size (0 erase the label) ; [in]labAlignNew alignment value ; [in]labColorNew label color ; [in]labFontNew label font ; [in]labTextNew label text. Example:; {; auto c = new TCanvas(""c1"",""Examples of TGaxis"",900,100);; c->Range(-6,-0.1,6,0.1);; auto *axis = new TGaxis(-5.5,0.,5.5,0.,0.0,100,510,""S"");; axis->SetName(""axis1"");; axis->SetTitle(""Axis Title"");; axis->SetTitleSize(0.2);; axis->SetLabelSize(0.2);; axis->SetTickSize(0.15);; axis->SetTitleColor(kBlue);; axis->SetTitleFont(42);; axis->ChangeLabelByValue(0., -1, -1, -1, kRed);; axis->ChangeLabelByValue(20., -1, 0);; axis->ChangeLabelByValue(40., 30.);; axis->ChangeLabelByValue(50., -1, -1, -1, kBlue, -1, ""blue for 50."");; axis->ChangeLabelByValue(90., -1, -1, -1, kGreen, -1, ""green for 90."");; axis->Draw();; }; kGreen@ kGreenDefinition Rtypes.h:66. Notes:. If an attribute should not be changed just give the value ""-1"".; To erase a label set labSize to 0; If labText is not specified or is an empty string, the text label is not changed. . Definition at line 2813 of file TGaxis.cxx. ◆ Class(). static TClass * TGaxis::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGaxis::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGaxis::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 136 of file TGaxis.h. ◆ CleanupModLabs(). void TGaxis::CleanupModLabs ; (; ). protected . Correctly cleanup fModLabs - delete content when owned by TGaxis. ; Definition at line 881 of file TGaxis.cxx. ◆ DeclFileName(). static const char * TGaxis::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declarati",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGaxis.html:65124,green,green,65124,doc/master/classTGaxis.html,https://root.cern,https://root.cern/doc/master/classTGaxis.html,1,['green'],['green']
Energy Efficiency," Definition at line 2374 of file TGraph.cxx. ◆ SetStats(). void TGraph::SetStats ; (; Bool_t ; stats = kTRUE). virtual . Set statistics option on/off. ; By default, the statistics box is drawn. The paint options can be selected via gStyle->SetOptStat. This function sets/resets the kNoStats bit in the graph object. It has priority over the Style option. ; Definition at line 2431 of file TGraph.cxx. ◆ SetTitle(). void TGraph::SetTitle ; (; const char * ; title = """"). overridevirtual . Change (i.e. ; set) the title; if title is in the form stringt;stringx;stringy;stringz the graph title is set to stringt, the x axis title to stringx, the y axis title to stringy, and the z axis title to stringz.; To insert the character ; in one of the titles, one should use #; or #semicolon. ; Reimplemented from TNamed.; Definition at line 2397 of file TGraph.cxx. ◆ ShrinkAndCopy(). Double_t ** TGraph::ShrinkAndCopy ; (; Int_t ; size, . Int_t ; oend . ). protected . if size*2 <= fMaxSize allocate new arrays of size points, copy points [0,oend). ; Return newarray (passed or new instance if it was zero and allocations are needed) ; Definition at line 2453 of file TGraph.cxx. ◆ Sort(). void TGraph::Sort ; (; Bool_t(*)(const TGraph *, Int_t, Int_t) ; greaterfunc = &TGraph::CompareX, . Bool_t ; ascending = kTRUE, . Int_t ; low = 0, . Int_t ; high = -1111 . ). virtual . Sorts the points of this TGraph using in-place quicksort (see e.g. ; older glibc). To compare two points the function parameter greaterfunc is used (see TGraph::CompareX for an example of such a method, which is also the default comparison function for Sort). After the sort, greaterfunc(this, i, j) will return kTRUE for all i>j if ascending == kTRUE, and kFALSE otherwise.; The last two parameters are used for the recursive quick sort, stating the range to be sorted; Examples: // sort points along x axis; graph->Sort();; // sort points along their distance to origin; graph->Sort(&TGraph::CompareRadius);; ; Bool_t CompareErrors",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraph.html:72714,allocate,allocate,72714,doc/master/classTGraph.html,https://root.cern,https://root.cern/doc/master/classTGraph.html,1,['allocate'],['allocate']
Energy Efficiency," Definition at line 350 of file TFileMerger.cxx. ◆ OutputFile() [5/5]. Bool_t TFileMerger::OutputFile ; (; std::unique_ptr< TFile > ; file). virtual . Set an output file opened externally by the users. ; Definition at line 318 of file TFileMerger.cxx. ◆ PartialMerge(). Bool_t TFileMerger::PartialMerge ; (; Int_t ; in_type = kAll | kIncremental). virtual . Merge the files. ; If no output file was specified it will write into the file ""FileMerger.root"" in the working directory. Returns true on success, false in case of error. The type is defined by the bit values in EPartialMergeType: kRegular : normal merge, overwritting the output file kIncremental : merge the input file with the content of the output file (if already exising) (default) kResetable : merge only the objects with a MergeAfterReset member function. kNonResetable : merge only the objects without a MergeAfterReset member function. kDelayWrite : delay the TFile write (to reduce the number of write when reusing the file) kAll : merge all type of objects (default) kAllIncremental : merge incrementally all type of objects. kOnlyListed : merge only the objects specified in fObjectNames list kSkipListed : skip objects specified in fObjectNames list kKeepCompression: keep compression level unchanged for each input; If the type is not set to kIncremental, the output file is deleted at the end of this operation. ; Definition at line 926 of file TFileMerger.cxx. ◆ PrintFiles(). void TFileMerger::PrintFiles ; (; Option_t * ; options). virtual . Print list of files being merged. ; Definition at line 360 of file TFileMerger.cxx. ◆ RecursiveRemove(). void TFileMerger::RecursiveRemove ; (; TObject * ; obj). overridevirtual . Intercept the case where the output TFile is deleted! ; Reimplemented from TObject.; Definition at line 1087 of file TFileMerger.cxx. ◆ Reset(). void TFileMerger::Reset ; (; ). virtual . Reset merger file list. ; Definition at line 119 of file TFileMerger.cxx. ◆ SetCWD(). virtual Bool_t TFileMerger:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFileMerger.html:24383,reduce,reduce,24383,doc/master/classTFileMerger.html,https://root.cern,https://root.cern/doc/master/classTFileMerger.html,1,['reduce'],['reduce']
Energy Efficiency," Double_t &sy, Double_t &syErr);  This function gets the tail parameters and their errors. ;  ; void GetVolumeErrors (Double_t *volumeErrors);  This function gets errors of the volumes of fitted 2D peaks. ;  ; void GetVolumes (Double_t *volumes);  This function gets the volumes of fitted 2D peaks. ;  ; TClass * IsA () const override;  ; void SetBackgroundParameters (Double_t a0Init, Bool_t fixA0, Double_t axInit, Bool_t fixAx, Double_t ayInit, Bool_t fixAy);  This function sets the following fitting parameters of background: ;  ; void SetFitParameters (Int_t xmin, Int_t xmax, Int_t ymin, Int_t ymax, Int_t numberIterations, Double_t alpha, Int_t statisticType, Int_t alphaOptim, Int_t power, Int_t fitTaylor);  This function sets the following fitting parameters: ;  ; void SetPeakParameters (Double_t sigmaX, Bool_t fixSigmaX, Double_t sigmaY, Bool_t fixSigmaY, Double_t ro, Bool_t fixRo, const Double_t *positionInitX, const Bool_t *fixPositionX, const Double_t *positionInitY, const Bool_t *fixPositionY, const Double_t *positionInitX1, const Bool_t *fixPositionX1, const Double_t *positionInitY1, const Bool_t *fixPositionY1, const Double_t *ampInit, const Bool_t *fixAmp, const Double_t *ampInitX1, const Bool_t *fixAmpX1, const Double_t *ampInitY1, const Bool_t *fixAmpY1);  This function sets the following fitting parameters of peaks: ;  ; void SetTailParameters (Double_t tInitXY, Bool_t fixTxy, Double_t tInitX, Bool_t fixTx, Double_t tInitY, Bool_t fixTy, Double_t bInitX, Bool_t fixBx, Double_t bInitY, Bool_t fixBy, Double_t sInitXY, Bool_t fixSxy, Double_t sInitX, Bool_t fixSx, Double_t sInitY, Bool_t fixSy);  This function sets the following fitting parameters of tails of peaks. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TName",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSpectrum2Fit.html:5421,power,power,5421,doc/master/classTSpectrum2Fit.html,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html,1,['power'],['power']
Energy Efficiency," Double_tTQpSolverBase::fPhimerit function, defined as the sum of the complementarity gap; Double_t*TQpSolverBase::fPhi_history[fMaxit] history of values of phi obtained on all iterations to date; Double_t*TQpSolverBase::fPhi_min_history[fMaxit] the i-th entry of this array contains the minimum value of phi; Int_tfPrintlevelparameter in range [0,100] determines verbosity. (Higher value; Double_t*TQpSolverBase::fRnorm_history[fMaxit] history of values of residual norm obtained on all iterations to date; TQpVar*fStepstorage for step vectors; TQpLinSolverBase*TQpSolverBase::fSys; Double_tfTsigexponent in Mehrotra's centering parameter, which is usually. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TMehrotraSolver(); Default constructor. TMehrotraSolver(TQpProbBase* of, TQpDataBase* prob, Int_t verbose = 0); Constructor. TMehrotraSolver(const TMehrotraSolver& another); Copy constructor. Int_t Solve(TQpDataBase* prob, TQpVar* iterate, TQpResidual* resid); Solve the quadratic programming problem as formulated through prob, store; the final solution in iterate->fX . Monitor the residuals during the iterations; through resid . The status is returned as defined in TQpSolverBase::ETerminationCode . void DefMonitor(TQpDataBase* data, TQpVar* vars, TQpResidual* resids, Double_t alpha, Double_t sigma, Int_t i, Double_t mu, Int_t status_code, Int_t level); Print information about the optimization process and monitor the convergence; status of thye algorithm. ~TMehrotraSolver(); Deconstructor. TMehrotraSolver & operator=(const TMehrotraSolver& source); Assignment operator. » Author: Eddy Offermann May 2004 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/quadp:$Id: TMehrotraSolver.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2010-09-23 20:18; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMehrotraSolver.html:8730,monitor,monitor,8730,root/html528/TMehrotraSolver.html,https://root.cern,https://root.cern/root/html528/TMehrotraSolver.html,1,['monitor'],['monitor']
Energy Efficiency," Double_tTQpSolverBase::fPhimerit function, defined as the sum of the complementarity gap; Double_t*TQpSolverBase::fPhi_history[fMaxit] history of values of phi obtained on all iterations to date; Double_t*TQpSolverBase::fPhi_min_history[fMaxit] the i-th entry of this array contains the minimum value of phi; Int_tfPrintlevelparameter in range [0,100] determines verbosity. (Higher value; Double_t*TQpSolverBase::fRnorm_history[fMaxit] history of values of residual norm obtained on all iterations to date; TQpVar*fStepstorage for step vectors; TQpLinSolverBase*TQpSolverBase::fSys; Double_tfTsigexponent in Mehrotra's centering parameter, which is usually. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TMehrotraSolver(); Default constructor. TMehrotraSolver(TQpProbBase* of, TQpDataBase* prob, Int_t verbose = 0); Constructor. TMehrotraSolver(const TMehrotraSolver& another); Copy constructor. Int_t Solve(TQpDataBase* prob, TQpVar* iterate, TQpResidual* resid); Solve the quadratic programming problem as formulated through prob, store; the final solution in iterate->fX . Monitor the residuals during the iterations; through resid . The status is returned as defined in TQpSolverBase::ETerminationCode . void DefMonitor(TQpDataBase* data, TQpVar* vars, TQpResidual* resids, Double_t alpha, Double_t sigma, Int_t i, Double_t mu, Int_t status_code, Int_t level); Print information about the optimization process and monitor the convergence; status of thye algorithm. ~TMehrotraSolver(); Deconstructor. TMehrotraSolver & operator=(const TMehrotraSolver& source); Assignment operator. » Author: Eddy Offermann May 2004 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/quadp:$Id: TMehrotraSolver.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2011-07-04 15:35; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMehrotraSolver.html:8799,monitor,monitor,8799,root/html530/TMehrotraSolver.html,https://root.cern,https://root.cern/root/html530/TMehrotraSolver.html,1,['monitor'],['monitor']
Energy Efficiency," Double_tTQpSolverBase::fPhimerit function, defined as the sum of the complementarity gap; Double_t*TQpSolverBase::fPhi_history[fMaxit] history of values of phi obtained on all iterations to date; Double_t*TQpSolverBase::fPhi_min_history[fMaxit] the i-th entry of this array contains the minimum value of phi; Int_tfPrintlevelparameter in range [0,100] determines verbosity. (Higher value; Double_t*TQpSolverBase::fRnorm_history[fMaxit] history of values of residual norm obtained on all iterations to date; TQpVar*fStepstorage for step vectors; TQpLinSolverBase*TQpSolverBase::fSys; Double_tfTsigexponent in Mehrotra's centering parameter, which is usually. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TMehrotraSolver(); Default constructor. TMehrotraSolver(TQpProbBase* of, TQpDataBase* prob, Int_t verbose = 0); Constructor. TMehrotraSolver(const TMehrotraSolver& another); Copy constructor. Int_t Solve(TQpDataBase* prob, TQpVar* iterate, TQpResidual* resid); Solve the quadratic programming problem as formulated through prob, store; the final solution in iterate->fX . Monitor the residuals during the iterations; through resid . The status is returned as defined in TQpSolverBase::ETerminationCode . void DefMonitor(TQpDataBase* data, TQpVar* vars, TQpResidual* resids, Double_t alpha, Double_t sigma, Int_t i, Double_t mu, Int_t status_code, Int_t level); Print information about the optimization process and monitor the convergence; status of thye algorithm. ~TMehrotraSolver(); Deconstructor. TMehrotraSolver & operator=(const TMehrotraSolver& source); Assignment operator. » Author: Eddy Offermann May 2004 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/quadp:$Id: TMehrotraSolver.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2011-11-03 20:20; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TMehrotraSolver.html:8799,monitor,monitor,8799,root/html532/TMehrotraSolver.html,https://root.cern,https://root.cern/root/html532/TMehrotraSolver.html,1,['monitor'],['monitor']
Energy Efficiency," EY; format = ""%lg %lg %lg %lg"" read only 4 first columns into X,Y,EX,EY. ~TGraphErrors(); TGraphErrors default destructor. void Apply(TF1* f); apply function to all the data points; y = f(x,y). The error is calculated as ey=(f(x,y+ey)-f(x,y-ey))/2; This is the same as error(fy) = df/dy * ey for small errors. For generic functions the symmetric errors might become non-symmetric; and are averaged here. Use TGraphAsymmErrors if desired. error on x doesn't change; function suggested/implemented by Miroslav Helbich <helbich@mail.desy.de>. Int_t CalculateScanfFields(const char* fmt); Calculate scan fields. void ComputeRange(Double_t& xmin, Double_t& ymin, Double_t& xmax, Double_t& ymax) const; Compute range. void CopyAndRelease(Double_t** newarrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy and release. Bool_t CopyPoints(Double_t** arrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy errors from fEX and fEY to arrays[0] and arrays[1]; or to fX and fY. Copy points. Bool_t CtorAllocate(); Constructor allocate. void FillZero(Int_t begin, Int_t end, Bool_t from_ctor = kTRUE); Set zero values for point arrays in the range [begin, end]. Double_t GetErrorX(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorY(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along Y at point i. Double_t GetErrorXhigh(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorXlow(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorYhigh(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorYlow(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. void Print(Option_t* chopt = """") const; Print graph and errors values. void SavePrimitiv",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGraphErrors.html:17440,allocate,allocate,17440,root/html528/TGraphErrors.html,https://root.cern,https://root.cern/root/html528/TGraphErrors.html,2,['allocate'],['allocate']
Energy Efficiency," Entries; For each TTree entry, you will add the current event's size to the data member. This, too, happens in Process() - after you have set the current event from the TTree. After the TSelector has processed the tree it will thus contain the sum of all event sizes.; Bool_t EventSelector::Process(Long64_t entry); {; //... // Tell the TTree reader to get the data for; // the entry number ""entry"" in the current tree:; fReader.SetLocalEntry(entry);. // We can still print some informations about the current event; //printf(""Size of Event %ld = %d Bytes\n"", entry, *fCurrentEventSize);. // compute the total size of all events; dereference the TTreeReaderValue; // using '*' to get the value it refers to, just like an iterator.; fTotalDataSize += *fCurrentEventSize;. return kTRUE;; }. Accessing the Analysis Result; In your selector's Terminate() function, print the sum of all event sizes. This sum shows you the real power of a TTree: even though you can analyze large amounts of data (our example tree with 22MB is tiny!) ROOT needs just a few MB of your RAM, no matter how many events you analyze. Imagine what it would be like if you had to load all data into memory, e.g. using a simple vector!; void EventSelector::Terminate(); {; // ... int sizeInMB = fTotalDataSize/1024/1024;; printf(""Total size of all events: %d MB\n"", sizeInMB);; }. If, for any reason, you don't manage to get it to work, you can download a working selector file here: CountEventSelector.C; Here again, if you are using ROOT via ssh, you have to download the file with wget from your remote directory:; wget http://root-mirror.github.io/training/intro/CountEventSelector.C; Note: You will have to use it that way:; EventTree->Process(""CountEventSelector.C""). . ‹ Compiling Your Code (also known as ACLiC); up; Histogramming in a Selector ›. Navigate through this book; Meet a TTree; Accessing a TTree With a TBrowser; Using TTree::Draw() to access a TTree; TTree and Its Data; Using a Macro to Read a TTree; Histogra",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/accessing-ttree-tselector.html:7972,power,power,7972,d/accessing-ttree-tselector.html,https://root.cern,https://root.cern/d/accessing-ttree-tselector.html,1,['power'],['power']
Energy Efficiency," Enumeration Documentation. ◆ anonymous enum. anonymous enum. private . EnumeratorkIsOnHeap object is on heap . Definition at line 43 of file TStorage.h. Constructor & Destructor Documentation. ◆ ~TStorage(). virtual TStorage::~TStorage ; (; ). inlinevirtual . Definition at line 52 of file TStorage.h. Member Function Documentation. ◆ Alloc(). void * TStorage::Alloc ; (; size_t ; size). static . Allocate a block of memory, that later can be resized using TStorage::ReAlloc(). ; Definition at line 152 of file TStorage.cxx. ◆ Class(). static TClass * TStorage::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TStorage::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TStorage::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 85 of file TStorage.h. ◆ Dealloc(). void TStorage::Dealloc ; (; void * ; ptr). static . De-allocate block of memory, that was allocated via TStorage::Alloc(). ; Definition at line 170 of file TStorage.cxx. ◆ DeclFileName(). static const char * TStorage::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 85 of file TStorage.h. ◆ EnableStatistics(). void TStorage::EnableStatistics ; (; int ; size = -1, . int ; ix = -1 . ). static . Enable memory usage statistics gathering. ; Size is the size of the memory block that should be trapped and ix is after how many such allocations the trap should happen. ; Definition at line 412 of file TStorage.cxx. ◆ EnterStat(). void TStorage::EnterStat ; (; size_t ; size, . void * ; p . ). static . Register a memory allocation operation. ; If desired one can trap an allocation of a certain size in case one tries to find a memory leak of that particular size. This function is only called via the ROOT custom new operators. ; Definition at line 99 of file TStorage.cxx. ◆ FilledByObjectAlloc(). Bool_t TStorage::FilledB",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTStorage.html:5185,allocate,allocate,5185,doc/master/classTStorage.html,https://root.cern,https://root.cern/doc/master/classTStorage.html,2,['allocate'],"['allocate', 'allocated']"
Energy Efficiency," GdkColor *colors, Int_t ncolors);  Returns the current RGB value for the pixel in the XColor structure. ;  ; void UpdateFillColor ();  ; void UpdateFillStyle ();  Set fill area style index. ;  ; void UpdateLineColor ();  ; void UpdateLineStyle ();  Update line style. ;  ; void UpdateMarkerColor ();  ; void UpdateMarkerStyle ();  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Int_t fBlueDiv;  Blue value divider. ;  ; Int_t fBlueShift;  Bits to left shift blue. ;  ; Float_t fCharacterUpX;  Character Up vector along X. ;  ; Float_t fCharacterUpY;  Character Up vector along Y. ;  ; GdkColormap * fColormap;  Default colormap, 0 if b/w. ;  ; Int_t fDepth;  Number of color planes. ;  ; Bool_t fFillColorModified;  ; Bool_t fFillStyleModified;  ; Int_t fGreenDiv;  Green value divider. ;  ; Int_t fGreenShift;  Bits to left shift green. ;  ; Bool_t fHasTTFonts;  True when TrueType fonts are used. ;  ; Bool_t fLineColorModified;  ; Bool_t fMarkerColorModified;  ; Bool_t fMarkerStyleModified;  ; Bool_t fPenModified;  line syle || width modified ;  ; Int_t fRedDiv;  Red value divider, -1 if no TrueColor visual. ;  ; Int_t fRedShift;  Bits to left shift red, -1 if no TrueColor visual. ;  ; TObject * fRefreshTimer;  TGWin32RefreshTimer for GUI thread message handler. ;  ; Int_t fScreenNumber;  Screen number. ;  ; Int_t fTextAlign;  Text alignment (set in SetTextAlign) ;  ; Int_t fTextAlignH;  Text Alignment Horizontal. ;  ; Int_t fTextAlignV;  Text Alignment Vertical. ;  ; Float_t fTextMagnitude;  Text Magnitude. ;  ; Bool_t fUseSysPointers;  True when using system mouse pointers. ;  ; GdkVisual * fVisual;  ; Handle_t fXEvent;  Current native (GDK) event. ;  ;  Protected Attributes inherited from TVirtualX; EDrawMode fDrawMode;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TStr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGWin32.html:46562,green,green,46562,doc/master/classTGWin32.html,https://root.cern,https://root.cern/doc/master/classTGWin32.html,1,['green'],['green']
Energy Efficiency," GetCheckSum(ECheckSum code=kCurrentCheckSum) constCall GetCheckSum with validity check.Definition TClass.cxx:6572; TClass::Streamervoid Streamer(void *obj, TBuffer &b, const TClass *onfile_class=nullptr) constDefinition TClass.h:607; TClass::GetDataMemberTDataMember * GetDataMember(const char *datamember) constReturn pointer to datamember object with name ""datamember"".Definition TClass.cxx:3506; TClass::CanSplitBool_t CanSplit() constReturn true if the data member of this TClass can be saved separately.Definition TClass.cxx:2386; TClass::GetCollectionTypeROOT::ESTLType GetCollectionType() constReturn the 'type' of the STL the TClass is representing.Definition TClass.cxx:2953; TClass::GetStreamerInfoAbstractEmulatedTVirtualStreamerInfo * GetStreamerInfoAbstractEmulated(Int_t version=0) constFor the case where the requestor class is emulated and this class is abstract, returns a pointer to t...Definition TClass.cxx:4776; TClass::Newvoid * New(ENewType defConstructor=kClassNew, Bool_t quiet=kFALSE) constReturn a pointer to a newly allocated object of this class.Definition TClass.cxx:5045; TClass::CopyCollectionProxyvoid CopyCollectionProxy(const TVirtualCollectionProxy &)Replaces the collection proxy for this class.Definition TClass.cxx:2537; TClass::HasCustomStreamerMemberBool_t HasCustomStreamerMember() constThe class has a Streamer method and it is implemented by the user or an older (not StreamerInfo based...Definition TClass.h:508; TClass::Destructorvoid Destructor(void *obj, Bool_t dtorOnly=kFALSE)Explicitly call destructor for object.Definition TClass.cxx:5467; TClass::GetStreamerTClassStreamer * GetStreamer() constReturn the Streamer Class allowing streaming (if any).Definition TClass.cxx:2981; TClass::BuildRealDatavoid BuildRealData(void *pointer=nullptr, Bool_t isTransient=kFALSE)Build a full list of persistent data members.Definition TClass.cxx:2098; TClass::GetListOfDataMembersTList * GetListOfDataMembers(Bool_t load=kTRUE)Return list containing the TDataM",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TBranchElement_8cxx_source.html:281870,allocate,allocated,281870,doc/master/TBranchElement_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TBranchElement_8cxx_source.html,1,['allocate'],['allocated']
Energy Efficiency," GetCov_Full( void ); compute full covariance matrix from sum of within and between matrices. void GetFisherCoeff( void ); Fisher = Sum { [coeff]*[variables] }. let Xs be the array of the mean values of variables for signal evts; let Xb be the array of the mean values of variables for backgd evts; let InvWith be the inverse matrix of the 'within class' correlation matrix. then the array of Fisher coefficients is; [coeff] =sqrt(fNsig*fNbgd)/fNevt*transpose{Xs-Xb}*InvWith. void GetDiscrimPower( void ); computation of discrimination power indicator for each variable; small values of ""fWith"" indicates little compactness of sig & of backgd; big values of ""fBetw"" indicates large separation between sig & backgd. we want signal & backgd classes as compact and separated as possible; the discriminating power is then defined as the ration ""fBetw/fWith"". const TMVA::Ranking* CreateRanking(); computes ranking of input variables. void PrintCoefficients( void ); display Fisher coefficients and discriminating power for each variable; check maximum length of variable name. void ReadWeightsFromStream(istream& i); read Fisher coefficients from weight file. void AddWeightsXMLTo(void* parent) const; create XML description of Fisher classifier. void ReadWeightsFromXML(void* wghtnode); read Fisher coefficients from xml weight file. void MakeClassSpecific(ostream& , const TString& ) const; write Fisher-specific classifier response. void GetHelpMessage() const; get help message text. typical length of text line:; ""|--------------------------------------------------------------|"". EFisherMethod GetFisherMethod( void ); { return fFisherMethod; }. » Author: Andreas Hoecker, Xavier Prudent, Joerg Stelzer, Helge Voss, Kai Voss » Copyright (c) 2005: *; » Last changed: root/tmva $Id: MethodFisher.h 36966 2010-11-26 09:50:13Z evt $ » Last generated: 2010-12-10 17:05; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a m",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__MethodFisher.html:20958,power,power,20958,root/html528/TMVA__MethodFisher.html,https://root.cern,https://root.cern/root/html528/TMVA__MethodFisher.html,1,['power'],['power']
Energy Efficiency," GetCov_Full( void ); compute full covariance matrix from sum of within and between matrices. void GetFisherCoeff( void ); Fisher = Sum { [coeff]*[variables] }. let Xs be the array of the mean values of variables for signal evts; let Xb be the array of the mean values of variables for backgd evts; let InvWith be the inverse matrix of the 'within class' correlation matrix. then the array of Fisher coefficients is; [coeff] =sqrt(fNsig*fNbgd)/fNevt*transpose{Xs-Xb}*InvWith. void GetDiscrimPower( void ); computation of discrimination power indicator for each variable; small values of ""fWith"" indicates little compactness of sig & of backgd; big values of ""fBetw"" indicates large separation between sig & backgd. we want signal & backgd classes as compact and separated as possible; the discriminating power is then defined as the ration ""fBetw/fWith"". const TMVA::Ranking* CreateRanking(); computes ranking of input variables. void PrintCoefficients( void ); display Fisher coefficients and discriminating power for each variable; check maximum length of variable name. void ReadWeightsFromStream(istream& i); read Fisher coefficients from weight file. void AddWeightsXMLTo(void* parent) const; create XML description of Fisher classifier. void ReadWeightsFromXML(void* wghtnode); read Fisher coefficients from xml weight file. void MakeClassSpecific(ostream& , const TString& ) const; write Fisher-specific classifier response. void GetHelpMessage() const; get help message text. typical length of text line:; ""|--------------------------------------------------------------|"". EFisherMethod GetFisherMethod( void ); { return fFisherMethod; }. » Author: Andreas Hoecker, Xavier Prudent, Joerg Stelzer, Helge Voss, Kai Voss » Copyright (c) 2005: *; » Last changed: root/tmva $Id: MethodFisher.h 39395 2011-05-26 10:05:54Z moneta $ » Last generated: 2011-07-04 15:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA__MethodFisher.html:21578,power,power,21578,root/html530/TMVA__MethodFisher.html,https://root.cern,https://root.cern/root/html530/TMVA__MethodFisher.html,1,['power'],['power']
Energy Efficiency," GetCov_Full( void ); compute full covariance matrix from sum of within and between matrices. void GetFisherCoeff( void ); Fisher = Sum { [coeff]*[variables] }. let Xs be the array of the mean values of variables for signal evts; let Xb be the array of the mean values of variables for backgd evts; let InvWith be the inverse matrix of the 'within class' correlation matrix. then the array of Fisher coefficients is; [coeff] =sqrt(fNsig*fNbgd)/fNevt*transpose{Xs-Xb}*InvWith. void GetDiscrimPower( void ); computation of discrimination power indicator for each variable; small values of ""fWith"" indicates little compactness of sig & of backgd; big values of ""fBetw"" indicates large separation between sig & backgd. we want signal & backgd classes as compact and separated as possible; the discriminating power is then defined as the ration ""fBetw/fWith"". const TMVA::Ranking* CreateRanking(); computes ranking of input variables. void PrintCoefficients( void ); display Fisher coefficients and discriminating power for each variable; check maximum length of variable name. void ReadWeightsFromStream(istream& i); read Fisher coefficients from weight file. void AddWeightsXMLTo(void* parent) const; create XML description of Fisher classifier. void ReadWeightsFromXML(void* wghtnode); read Fisher coefficients from xml weight file. void MakeClassSpecific(ostream& , const TString& ) const; write Fisher-specific classifier response. void GetHelpMessage() const; get help message text. typical length of text line:; ""|--------------------------------------------------------------|"". EFisherMethod GetFisherMethod( void ); { return fFisherMethod; }. » Author: Andreas Hoecker, Xavier Prudent, Joerg Stelzer, Helge Voss, Kai Voss » Copyright (c) 2005: *; » Last changed: root/tmva $Id: MethodFisher.h 40005 2011-06-27 15:29:10Z stelzer $ » Last generated: 2011-11-03 20:19; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TMVA__MethodFisher.html:21578,power,power,21578,root/html532/TMVA__MethodFisher.html,https://root.cern,https://root.cern/root/html532/TMVA__MethodFisher.html,1,['power'],['power']
Energy Efficiency," GetCov_Full( void ); compute full covariance matrix from sum of within and between matrices. void GetFisherCoeff( void ); Fisher = Sum { [coeff]*[variables] }. let Xs be the array of the mean values of variables for signal evts; let Xb be the array of the mean values of variables for backgd evts; let InvWith be the inverse matrix of the 'within class' correlation matrix. then the array of Fisher coefficients is; [coeff] =sqrt(fNsig*fNbgd)/fNevt*transpose{Xs-Xb}*InvWith. void GetDiscrimPower( void ); computation of discrimination power indicator for each variable; small values of ""fWith"" indicates little compactness of sig & of backgd; big values of ""fBetw"" indicates large separation between sig & backgd. we want signal & backgd classes as compact and separated as possible; the discriminating power is then defined as the ration ""fBetw/fWith"". const TMVA::Ranking* CreateRanking(); computes ranking of input variables. void PrintCoefficients( void ); display Fisher coefficients and discriminating power for each variable; check maximum length of variable name. void ReadWeightsFromStream(istream& i); read Fisher coefficients from weight file. void AddWeightsXMLTo(void* parent) const; create XML description of Fisher classifier. void ReadWeightsFromXML(void* wghtnode); read Fisher coefficients from xml weight file. void MakeClassSpecific(ostream& , const TString& ) const; write Fisher-specific classifier response. void GetHelpMessage() const; get help message text. typical length of text line:; ""|--------------------------------------------------------------|"". MethodFisher(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& dsi, const TString& theOption = ""Fisher"", TDirectory* theTargetDir = 0). EFisherMethod GetFisherMethod( void ); { return fFisherMethod; }. » Author: Andreas Hoecker, Xavier Prudent, Joerg Stelzer, Helge Voss, Kai Voss » Copyright (c) 2005: *; » Last changed: root/tmva $Id$ » Last generated: 2015-06-02 16:17; This page has been automa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TMVA__MethodFisher.html:22885,power,power,22885,root/html604/TMVA__MethodFisher.html,https://root.cern,https://root.cern/root/html604/TMVA__MethodFisher.html,1,['power'],['power']
Energy Efficiency," GetCov_Full( void ); compute full covariance matrix from sum of within and between matrices. void GetFisherCoeff( void ); Fisher = Sum { [coeff]*[variables] }. let Xs be the array of the mean values of variables for signal evts; let Xb be the array of the mean values of variables for backgd evts; let InvWith be the inverse matrix of the 'within class' correlation matrix. then the array of Fisher coefficients is; [coeff] =sqrt(fNsig*fNbgd)/fNevt*transpose{Xs-Xb}*InvWith. void GetDiscrimPower( void ); computation of discrimination power indicator for each variable; small values of ""fWith"" indicates little compactness of sig & of backgd; big values of ""fBetw"" indicates large separation between sig & backgd. we want signal & backgd classes as compact and separated as possible; the discriminating power is then defined as the ration ""fBetw/fWith"". const TMVA::Ranking* CreateRanking(); computes ranking of input variables. void PrintCoefficients( void ); display Fisher coefficients and discriminating power for each variable; check maximum length of variable name. void ReadWeightsFromStream(istream& i); read Fisher coefficients from weight file. void AddWeightsXMLTo(void* parent) const; create XML description of Fisher classifier. void ReadWeightsFromXML(void* wghtnode); read Fisher coefficients from xml weight file. void MakeClassSpecific(ostream& , const TString& ) const; write Fisher-specific classifier response. void GetHelpMessage() const; get help message text. typical length of text line:; ""|--------------------------------------------------------------|"". MethodFisher(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& dsi, const TString& theOption = ""Fisher"", TDirectory* theTargetDir = 0). EFisherMethod GetFisherMethod( void ); { return fFisherMethod; }. » Author: Andreas Hoecker, Xavier Prudent, Joerg Stelzer, Helge Voss, Kai Voss » Copyright (c) 2005: *; » Last changed: root/tmva $Id$ » Last generated: 2015-06-30 15:16; This page has been automa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__MethodFisher.html:22877,power,power,22877,root/html602/TMVA__MethodFisher.html,https://root.cern,https://root.cern/root/html602/TMVA__MethodFisher.html,1,['power'],['power']
Energy Efficiency," GetFunctionDeleteTwoIterators(Bool_t read=kTRUE)=0; TVirtualCollectionProxy::Sizevirtual UInt_t Size() const =0Return the current number of elements in the container.; TVirtualCollectionProxy::NewArrayvirtual void * NewArray(Int_t nElements) constConstruct an array of nElements container objects and return the base address of the array.Definition TVirtualCollectionProxy.h:126; TVirtualCollectionProxy::DeleteTwoIterators_tvoid(* DeleteTwoIterators_t)(void *begin, void *end)Definition TVirtualCollectionProxy.h:245; TVirtualCollectionProxy::DeleteIterator_tvoid(* DeleteIterator_t)(void *iter)If the size of the iterator is greater than fgIteratorArenaSize, call delete on the addresses; otherw...Definition TVirtualCollectionProxy.h:244; TVirtualCollectionProxy::Newvirtual void * New(void *arena) constConstruct a new container object at the address given by arenaDefinition TVirtualCollectionProxy.h:113; TVirtualCollectionProxy::fgIteratorArenaSizestatic const Int_t fgIteratorArenaSizeThe size of a small buffer that can be allocated on the stack to store iterator-specific information.Definition TVirtualCollectionProxy.h:207; TVirtualCollectionProxy::Generatevirtual TVirtualCollectionProxy * Generate() const =0Returns a clean object of the actual class that derives from TVirtualCollectionProxy.; TVirtualCollectionProxy::Resetvirtual Bool_t Reset()Reset the information gathered from StreamerInfos and value's TClass.Definition TVirtualCollectionProxy.h:95; TVirtualCollectionProxy::fPropertiesUInt_t fPropertiesDefinition TVirtualCollectionProxy.h:59; TVirtualCollectionProxy::GetFunctionCreateIteratorsvirtual CreateIterators_t GetFunctionCreateIterators(Bool_t read=kTRUE)=0Return a pointer to a function that can create an iterator pair, where each iterator points to the be...; TVirtualCollectionProxy::NewObjectArrayvirtual TClass::ObjectPtr NewObjectArray(Int_t nElements, void *arena) constConstruct an array of nElements container objects at the address given by arenaDefinitio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TVirtualCollectionProxy_8h_source.html:22554,allocate,allocated,22554,doc/master/TVirtualCollectionProxy_8h_source.html,https://root.cern,https://root.cern/doc/master/TVirtualCollectionProxy_8h_source.html,1,['allocate'],['allocated']
Energy Efficiency," GetTextColor GetTextSize void char Point_t Rectangle_t srcDefinition TGWin32VirtualXProxy.cxx:164; qfloat * qDefinition THbookFile.cxx:89; ROOT::Math::DisplacementVector3DClass describing a generic displacement vector in 3 dimensions.Definition DisplacementVector3D.h:58; ROOT::Math::DisplacementVector3D::Mag2Scalar Mag2() constMagnitute squared ( r^2 in spherical coordinate)Definition DisplacementVector3D.h:323; ROOT::Math::LorentzVectorClass describing a generic LorentzVector in the 4D space-time, using the specified coordinate system ...Definition LorentzVector.h:59; ROOT::Math::LorentzVector::pzScalar pz() constDefinition LorentzVector.h:648; ROOT::Math::LorentzVector::ZScalar Z() constDefinition LorentzVector.h:290; ROOT::Math::LorentzVector::EScalar E() constreturn 4-th component (time, or energy for a 4-momentum vector)Definition LorentzVector.h:294; ROOT::Math::LorentzVector::thetaScalar theta() constDefinition LorentzVector.h:651; ROOT::Math::LorentzVector::EtScalar Et() constreturn the transverse energyDefinition LorentzVector.h:349; ROOT::Math::LorentzVector::YScalar Y() constDefinition LorentzVector.h:285; ROOT::Math::LorentzVector::SetPzLorentzVector< CoordSystem > & SetPz(Scalar a)Definition LorentzVector.h:681; ROOT::Math::LorentzVector::TScalar T() constDefinition LorentzVector.h:295; ROOT::Math::LorentzVector::GetCoordinatesvoid GetCoordinates(Scalar dest[]) constget internal data into an array of 4 Scalar numbersDefinition LorentzVector.h:211; ROOT::Math::LorentzVector::BoostToCMBetaVector BoostToCM() constThe beta vector for the boost that would bring this vector into its center of mass frame (zero moment...Definition LorentzVector.h:555; ROOT::Math::LorentzVector::operator==bool operator==(const LorentzVector &rhs) constExact equality.Definition LorentzVector.h:257; ROOT::Math::LorentzVector::MScalar M() constreturn magnitude (mass) using the (-,-,-,+) metric.Definition LorentzVector.h:306; ROOT::Math::LorentzVector::rhoScalar rho() constDefiniti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/GenVector_2LorentzVector_8h_source.html:27278,energy,energyDefinition,27278,doc/master/GenVector_2LorentzVector_8h_source.html,https://root.cern,https://root.cern/doc/master/GenVector_2LorentzVector_8h_source.html,1,['energy'],['energyDefinition']
Energy Efficiency," Grey; 3095 case 62:; 3096 {; 3097 Double_t red[9] = { 0./255., 0./255., 0./255., 70./255., 148./255., 231./255., 235./255., 237./255., 244./255.};; 3098 Double_t green[9] = { 0./255., 0./255., 0./255., 0./255., 0./255., 69./255., 67./255., 216./255., 244./255.};; 3099 Double_t blue[9] = { 0./255., 102./255., 228./255., 231./255., 177./255., 124./255., 137./255., 20./255., 244./255.};; 3100 Idx = TColor::CreateGradientColorTable(9, stops, red, green, blue, 255, alpha);; 3101 }; 3102 break;; 3103 ; 3104 // Alpine; 3105 case 63:; 3106 {; 3107 Double_t red[9] = { 50./255., 56./255., 63./255., 68./255., 93./255., 121./255., 165./255., 192./255., 241./255.};; 3108 Double_t green[9] = { 66./255., 81./255., 91./255., 96./255., 111./255., 128./255., 155./255., 189./255., 241./255.};; 3109 Double_t blue[9] = { 97./255., 91./255., 75./255., 65./255., 77./255., 103./255., 143./255., 167./255., 217./255.};; 3110 Idx = TColor::CreateGradientColorTable(9, stops, red, green, blue, 255, alpha);; 3111 }; 3112 break;; 3113 ; 3114 // Aquamarine; 3115 case 64:; 3116 {; 3117 Double_t red[9] = { 145./255., 166./255., 167./255., 156./255., 131./255., 114./255., 101./255., 112./255., 132./255.};; 3118 Double_t green[9] = { 158./255., 178./255., 179./255., 181./255., 163./255., 154./255., 144./255., 152./255., 159./255.};; 3119 Double_t blue[9] = { 190./255., 199./255., 201./255., 192./255., 176./255., 169./255., 160./255., 166./255., 190./255.};; 3120 Idx = TColor::CreateGradientColorTable(9, stops, red, green, blue, 255, alpha);; 3121 }; 3122 break;; 3123 ; 3124 // Army; 3125 case 65:; 3126 {; 3127 Double_t red[9] = { 93./255., 91./255., 99./255., 108./255., 130./255., 125./255., 132./255., 155./255., 174./255.};; 3128 Double_t green[9] = { 126./255., 124./255., 128./255., 129./255., 131./255., 121./255., 119./255., 153./255., 173./255.};; 3129 Double_t blue[9] = { 103./255., 94./255., 87./255., 85./255., 80./255., 85./255., 107./255., 120./255., 146./255.};; 3130 Idx = TColor::CreateGrad",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TColor_8cxx_source.html:118160,green,green,118160,doc/master/TColor_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TColor_8cxx_source.html,1,['green'],['green']
Energy Efficiency," Histograms tutorials. Detailed Description; Show the slice of a TH2 following the mouse position. . ; ; void DynamicSlice(); {; // Create a new canvas.; TCanvas* c1 = new TCanvas(""c1"",""Dynamic Slice Example"", 10, 10, 700, 500);; ; //create a 2-d histogram, fill and draw it; TH2F *hpxpy = new TH2F(""hpxpy"", ""py vs px"", 40,-4,4, 40,-4,4);; hpxpy->SetStats(0);; Double_t px,py;; for (Int_t i = 0; i < 50000; i++) {; gRandom->Rannor(px,py);; hpxpy->Fill(px,py);; }; hpxpy->Draw(""col"");; ; //Add a TExec object to the canvas; c1->AddExec(""dynamic"", ""DynamicExec()"");; }; ; void DynamicExec(); {; // Example of function called when a mouse event occurs in a pad.; // When moving the mouse in the canvas, a second canvas shows the; // projection along X of the bin corresponding to the Y position; // of the mouse. The resulting histogram is fitted with a gaussian.; // A ""dynamic"" line shows the current bin position in Y.; // This more elaborated example can be used as a starting point; // to develop more powerful interactive applications exploiting Cling; // as a development engine.; ; static int pyold = 0;; ; float uxmin = gPad->GetUxmin();; float uxmax = gPad->GetUxmax();; int pxmin = gPad->XtoAbsPixel(uxmin);; int pxmax = gPad->XtoAbsPixel(uxmax);; int px = gPad->GetEventX();; int py = gPad->GetEventY();; TObject *select = gPad->GetSelected();; ; gPad->GetCanvas()->FeedbackMode(kTRUE);; if (pyold) {; // erase line at old position; gVirtualX->DrawLine(pxmin, pyold, pxmax, pyold);; pyold = 0;; }; ; if(!select || !select->InheritsFrom(TH2::Class())); return;; ; TH2 *h = (TH2*)select;; ; // draw a line at current position; gVirtualX->DrawLine(pxmin, py, pxmax, py);; pyold = py;; ; Float_t upy = gPad->AbsPixeltoY(py);; Float_t y = gPad->PadtoY(upy);; ; //create or set the new canvas c2; TVirtualPad *padsav = gPad;; TCanvas *c2 = (TCanvas*)gROOT->GetListOfCanvases()->FindObject(""c2"");; if(c2) delete c2->GetPrimitive(""Projection"");; else c2 = new TCanvas(""c2"",""Projection Canvas"",710,10,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/DynamicSlice_8C.html:1179,power,powerful,1179,doc/master/DynamicSlice_8C.html,https://root.cern,https://root.cern/doc/master/DynamicSlice_8C.html,1,['power'],['powerful']
Energy Efficiency," I/O buffer. Returns the number of; long longs read. If argument is a 0 pointer then space will be; allocated for the array. Int_t ReadArray(Float_t *&f); Read array of floats from the I/O buffer. Returns the number of floats; read. If argument is a 0 pointer then space will be allocated for the; array. Int_t ReadArray(Double_t *&d); Read array of doubles from the I/O buffer. Returns the number of doubles; read. If argument is a 0 pointer then space will be allocated for the; array. Int_t ReadArrayFloat16(Float_t*& f, TStreamerElement* ele = 0); Read array of floats (written as truncated float) from the I/O buffer.; Returns the number of floats read.; If argument is a 0 pointer then space will be allocated for the array.; see comments about Float16_t encoding at TBufferFile::WriteFloat16. Int_t ReadArrayDouble32(Double_t*& d, TStreamerElement* ele = 0); Read array of doubles (written as float) from the I/O buffer.; Returns the number of doubles read.; If argument is a 0 pointer then space will be allocated for the array.; see comments about Double32_t encoding at TBufferFile::WriteDouble32. Int_t ReadStaticArray(Bool_t *b); Read array of bools from the I/O buffer. Returns the number of bools; read. Int_t ReadStaticArray(Char_t *c); Read array of characters from the I/O buffer. Returns the number of; characters read. Int_t ReadStaticArray(Short_t *h); Read array of shorts from the I/O buffer. Returns the number of shorts; read. Int_t ReadStaticArray(Int_t *ii); Read array of ints from the I/O buffer. Returns the number of ints; read. Int_t ReadStaticArray(Long_t *ll); Read array of longs from the I/O buffer. Returns the number of longs; read. Int_t ReadStaticArray(Long64_t *ll); Read array of long longs from the I/O buffer. Returns the number of; long longs read. Int_t ReadStaticArray(Float_t *f); Read array of floats from the I/O buffer. Returns the number of floats; read. Int_t ReadStaticArray(Double_t *d); Read array of doubles from the I/O buffer. Returns the num",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TBufferFile.html:27299,allocate,allocated,27299,root/html526/TBufferFile.html,https://root.cern,https://root.cern/root/html526/TBufferFile.html,1,['allocate'],['allocated']
Energy Efficiency," I/O buffer. Returns the number of; long longs read. If argument is a 0 pointer then space will be; allocated for the array. Int_t ReadArray(Float_t*& f); Read array of floats from the I/O buffer. Returns the number of floats; read. If argument is a 0 pointer then space will be allocated for the; array. Int_t ReadArray(Double_t*& d); Read array of doubles from the I/O buffer. Returns the number of doubles; read. If argument is a 0 pointer then space will be allocated for the; array. Int_t ReadArrayFloat16(Float_t*& f, TStreamerElement* ele = 0); Read array of floats (written as truncated float) from the I/O buffer.; Returns the number of floats read.; If argument is a 0 pointer then space will be allocated for the array.; see comments about Float16_t encoding at TBufferFile::WriteFloat16. Int_t ReadArrayDouble32(Double_t*& d, TStreamerElement* ele = 0); Read array of doubles (written as float) from the I/O buffer.; Returns the number of doubles read.; If argument is a 0 pointer then space will be allocated for the array.; see comments about Double32_t encoding at TBufferFile::WriteDouble32. Int_t ReadStaticArray(Bool_t* b); Read array of bools from the I/O buffer. Returns the number of bools; read. Int_t ReadStaticArray(Char_t* c); Read array of characters from the I/O buffer. Returns the number of; characters read. Int_t ReadStaticArray(Short_t* h); Read array of shorts from the I/O buffer. Returns the number of shorts; read. Int_t ReadStaticArray(Int_t* i); Read array of ints from the I/O buffer. Returns the number of ints; read. Int_t ReadStaticArray(Long_t* l); Read array of longs from the I/O buffer. Returns the number of longs; read. Int_t ReadStaticArray(Long64_t* l); Read array of long longs from the I/O buffer. Returns the number of; long longs read. Int_t ReadStaticArray(Float_t* f); Read array of floats from the I/O buffer. Returns the number of floats; read. Int_t ReadStaticArray(Double_t* d); Read array of doubles from the I/O buffer. Returns the number",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TBufferFile.html:28593,allocate,allocated,28593,root/html528/TBufferFile.html,https://root.cern,https://root.cern/root/html528/TBufferFile.html,6,['allocate'],['allocated']
Energy Efficiency," If an I/O error occurs, the function returns -1. If the Tree has friends, also read the friends entry. To activate/deactivate one or more branches, use TBranch::SetBranchStatus; For example, if you have a Tree with several hundred branches, and you; are interested only by branches named ""a"" and ""b"", do; mytree.SetBranchStatus(""*"",0); //disable all branches; mytree.SetBranchStatus(""a"",1);; mytree.SetBranchStatus(""b"",1);; when calling mytree.GetEntry(i); only branches ""a"" and ""b"" will be read. WARNING!!; If your Tree has been created in split mode with a parent branch ""parent."",; mytree.SetBranchStatus(""parent"",1);; will not activate the sub-branches of ""parent"". You should do:; mytree.SetBranchStatus(""parent*"",1);. Without the trailing dot in the branch creation you have no choice but to; call SetBranchStatus explicitly for each of the sub branches. An alternative is to call directly; brancha.GetEntry(i); branchb.GetEntry(i);. IMPORTANT NOTE. By default, GetEntry reuses the space allocated by the previous object; for each branch. You can force the previous object to be automatically; deleted if you call mybranch.SetAutoDelete(kTRUE) (default is kFALSE).; Example:; Consider the example in $ROOTSYS/test/Event.h; The top level branch in the tree T is declared with:; Event *event = 0; //event must be null or point to a valid object; //it must be initialized; T.SetBranchAddress(""event"",&event);; When reading the Tree, one can choose one of these 3 options:. OPTION 1. for (Long64_t i=0;i<nentries;i++) {; T.GetEntry(i);; // the object event has been filled at this point; }; The default (recommended). At the first entry an object of the class; Event will be created and pointed by event. At the following entries,; event will be overwritten by the new data. All internal members that are; TObject* are automatically deleted. It is important that these members; be in a valid state when GetEntry is called. Pointers must be correctly; initialized. However these internal members wil",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TTree.html:96012,allocate,allocated,96012,root/html534/TTree.html,https://root.cern,https://root.cern/root/html534/TTree.html,3,['allocate'],['allocated']
Energy Efficiency," Inheritance diagram for TGInputDialog:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TGInputDialog() [1/2]. TGInputDialog::TGInputDialog ; (; const TGInputDialog & ; ). privatedelete . ◆ TGInputDialog() [2/2]. TGInputDialog::TGInputDialog ; (; const TGWindow * ; p = nullptr, . const TGWindow * ; main = nullptr, . const char * ; prompt = nullptr, . const char * ; defval = nullptr, . char * ; retstr = nullptr, . UInt_t ; options = kVerticalFrame . ). Create simple input dialog. ; It is important to know that the case where the constructor in which all the variables are initialized to their default values is only used for the TBrowser to inspect on the classes. For normal use the only variable that should be free is options.; Variables prompt, defval are the content of the input dialog while retstr has to be initialized to a char[256]. In case these are not initialized, they will show default values while retstr will be automatically allocated by the dialog. However this will make impossible to retrieve the value entered by the dialog.; To see TGInputDialog in use see: $ROOTSYS/tutorials/testInputDialog.cxx ; Definition at line 48 of file TGInputDialog.cxx. ◆ ~TGInputDialog(). TGInputDialog::~TGInputDialog ; (; ). override . Cleanup dialog. ; Definition at line 134 of file TGInputDialog.cxx. Member Function Documentation. ◆ Class(). static TClass * TGInputDialog::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGInputDialog::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGInputDialog::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 43 of file TGInputDialog.h. ◆ DeclFileName(). static const char * TGInputDialog::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 43 o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGInputDialog.html:37701,allocate,allocated,37701,doc/master/classTGInputDialog.html,https://root.cern,https://root.cern/doc/master/classTGInputDialog.html,1,['allocate'],['allocated']
Energy Efficiency," Inheritance diagram for TMVA::DNN::Settings:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ Settings(). TMVA::DNN::Settings::Settings ; (; TString ; name, . size_t ; _convergenceSteps = 15, . size_t ; _batchSize = 10, . size_t ; _testRepetitions = 7, . double ; _factorWeightDecay = 1e-5, . TMVA::DNN::EnumRegularization ; _regularization = TMVA::DNN::EnumRegularization::NONE, . MinimizerType ; _eMinimizerType = MinimizerType::fSteepest, . double ; _learningRate = 1e-5, . double ; _momentum = 0.3, . int ; _repetitions = 3, . bool ; _multithreading = true . ). c'tor ; Definition at line 232 of file NeuralNet.cxx. ◆ ~Settings(). TMVA::DNN::Settings::~Settings ; (; ). virtual . d'tor ; Definition at line 261 of file NeuralNet.cxx. Member Function Documentation. ◆ addPoint() [1/2]. void TMVA::DNN::Settings::addPoint ; (; std::string ; histoName, . double ; x . ). inline . for monitoring ; Definition at line 821 of file NeuralNet.h. ◆ addPoint() [2/2]. void TMVA::DNN::Settings::addPoint ; (; std::string ; histoName, . double ; x, . double ; y . ). inline . for monitoring ; Definition at line 822 of file NeuralNet.h. ◆ batchSize(). size_t TMVA::DNN::Settings::batchSize ; (; ); const. inline . mini-batch size ; Definition at line 767 of file NeuralNet.h. ◆ clear(). void TMVA::DNN::Settings::clear ; (; std::string ; histoName). inline . for monitoring ; Definition at line 824 of file NeuralNet.h. ◆ computeResult(). virtual void TMVA::DNN::Settings::computeResult ; (; const Net & ; , . std::vector< double > & ;  . ). inlinevirtual . callback for monitoring and logging ; Definition at line 809 of file NeuralNet.h. ◆ convergenceCount(). size_t TMVA::DNN::Settings::convergenceCount ; (; ); const. inline . returns the current convergence count ; Definition at line 827 of file NeuralNet.h. ◆ convergenceSteps(). size_t TMVA::DNN::Settings::convergenceSteps ; (; ); const. inline . how many ste",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1Settings.html:5645,monitor,monitoring,5645,doc/master/classTMVA_1_1DNN_1_1Settings.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1Settings.html,1,['monitor'],['monitoring']
Energy Efficiency," Inherited Members; Includes; Libraries. Function documentation; TEvePolygonSetProjected(const char* n = ""TEvePolygonSetProjected"", const char* t = """"); Constructor. ~TEvePolygonSetProjected(); Destructor. void ComputeBBox(); Override of virtual method from TAttBBox. void SetProjection(TEveProjectionManager* mng, TEveProjectable* model); This is virtual method from base-class TEveProjected. void SetDepthLocal(Float_t d); Set depth (z-coordinate) of the projected points. void UpdateProjection(); This is virtual method from base-class TEveProjected. Bool_t IsFirstIdxHead(Int_t s0, Int_t s1); Compare the two segments and check if the first index of first segment is starting. Int_t* ProjectAndReducePoints(); Project and reduce buffer points. Float_t AddPolygon(list<Int_t,std::allocator<Int_t> >& pp, list<TEvePolygonSetProjected::Polygon_t,allocator<TEvePolygonSetProjected::Polygon_t> >& p); Check if polygon has dimensions above TEveProjection::fgEps and add it; to a list if it is not a duplicate. Float_t MakePolygonsFromBP(Int_t* idxMap); Build polygons from list of buffer polygons. Float_t MakePolygonsFromBS(Int_t* idxMap); Build polygons from the set of buffer segments.; First creates a segment pool according to reduced and projected points; and then build polygons from the pool. void ProjectBuffer3D(); Project current buffer. Float_t PolygonSurfaceXY(const TEvePolygonSetProjected::Polygon_t& poly) const; Calculate XY surface of a polygon. void DumpPolys() const; Dump information about built polygons. void DumpBuffer3D(); Dump information about currenty projected buffer. TEvePolygonSetProjected(const TEvePolygonSetProjected& ). TEvePolygonSetProjected& operator=(const TEvePolygonSetProjected& ). TEveElement* GetProjectedAsElement(); { return this; }. » Last changed: root/eve:$Id$ » Last generated: 2015-03-13 19:22; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TEvePolygonSetProjected.html:24687,reduce,reduced,24687,root/html534/TEvePolygonSetProjected.html,https://root.cern,https://root.cern/root/html534/TEvePolygonSetProjected.html,1,['reduce'],['reduced']
Energy Efficiency," Instead they are attached to an internal; // clone of the supplied set of arguments; ; // Fill d with dummy values; Int_t i;; for (i = 0; i < 1000; i++) {; x = i / 50 - 10;; y = sqrt(1.0 * i);; c.setLabel((i % 2) ? ""Plus"" : ""Minus"");; ; // We must explicitly refer to x,y,c here to pass the values because; // d is not linked to them (as explained above); d.add(RooArgSet(x, y, c));; }; d.Print(""v"");; cout << endl;; ; // The get() function returns a pointer to the internal copy of the RooArgSet(x,y,c); // supplied in the constructor; const RooArgSet *row = d.get();; row->Print(""v"");; cout << endl;; ; // Get with an argument loads a specific data point in row and returns; // a pointer to row argset. get() always returns the same pointer, unless; // an invalid row number is specified. In that case a null ptr is returned; d.get(900)->Print(""v"");; cout << endl;; ; // R e d u c i n g , A p p e n d i n g a n d M e r g i n g; // -------------------------------------------------------------; ; // The reduce() function returns a new dataset which is a subset of the original; cout << endl << "">> d1 has only columns x,c"" << endl;; std::unique_ptr<RooAbsData> d1{d.reduce({x, c})};; d1->Print(""v"");; ; cout << endl << "">> d2 has only column y"" << endl;; std::unique_ptr<RooAbsData> d2{d.reduce({y})};; d2->Print(""v"");; ; cout << endl << "">> d3 has only the points with y>5.17"" << endl;; std::unique_ptr<RooAbsData> d3{d.reduce(""y>5.17"")};; d3->Print(""v"");; ; cout << endl << "">> d4 has only columns x,c for data points with y>5.17"" << endl;; std::unique_ptr<RooAbsData> d4{d.reduce({x, c}, ""y>5.17"")};; d4->Print(""v"");; ; // The merge() function adds two data set column-wise; cout << endl << "">> merge d2(y) with d1(x,c) to form d1(x,c,y)"" << endl;; static_cast<RooDataSet&>(*d1).merge(&static_cast<RooDataSet&>(*d2));; d1->Print(""v"");; ; // The append() function adds two datasets row-wise; cout << endl << "">> append data points of d3 to d1"" << endl;; static_cast<RooDataSet&>(*d1).append(stat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf402__datahandling_8C.html:2411,reduce,reduce,2411,doc/master/rf402__datahandling_8C.html,https://root.cern,https://root.cern/doc/master/rf402__datahandling_8C.html,1,['reduce'],['reduce']
Energy Efficiency," Int_t ; percent). virtual . Sets opacity of the current window. ; This image manipulation routine works by adding to a percent amount of neutral to each pixels RGB. Since it requires quite some additional color map entries is it only supported on displays with more than > 8 color planes (> 256 colors). ; Reimplemented in TGQuartz, TGWin32, TGWin32VirtualXProxy, and TGX11.; Definition at line 868 of file TVirtualX.cxx. ◆ SetPrimarySelectionOwner(). void TVirtualX::SetPrimarySelectionOwner ; (; Window_t ; id). virtual . Makes the window ""id"" the current owner of the primary selection. ; That is the window in which, for example some text is selected. ; Reimplemented in TGWin32, TGWin32VirtualXProxy, TGX11, and TGCocoa.; Definition at line 1978 of file TVirtualX.cxx. ◆ SetRGB(). void TVirtualX::SetRGB ; (; Int_t ; cindex, . Float_t ; r, . Float_t ; g, . Float_t ; b . ). virtual . Sets color intensities the specified color index ""cindex"". ; Parameters. [in]cindexcolor index ; [in]r,g,bthe red, green, blue intensities between 0.0 and 1.0 . Reimplemented in TGCocoa, TGWin32, TGWin32VirtualXProxy, and TGX11.; Definition at line 878 of file TVirtualX.cxx. ◆ SetSelectionOwner(). Bool_t TVirtualX::SetSelectionOwner ; (; Window_t ; , . Atom_t & ;  . ). virtual . Changes the owner and last-change time for the specified selection. ; Reimplemented in TGCocoa, TGWin32, TGWin32VirtualXProxy, and TGX11.; Definition at line 2439 of file TVirtualX.cxx. ◆ SetTextAlign(). void TVirtualX::SetTextAlign ; (; Short_t ; talign = 11). overridevirtual . Sets the text alignment. ; Parameters. [in]taligntext alignment.; talign = txalh horizontal text alignment; talign = txalv vertical text alignment . Reimplemented from TAttText.; Definition at line 890 of file TVirtualX.cxx. ◆ SetTextColor(). void TVirtualX::SetTextColor ; (; Color_t ; cindex). overridevirtual . Sets the color index ""cindex"" for text. ; Reimplemented from TAttText.; Definition at line 897 of file TVirtualX.cxx. ◆ SetTextFont() [",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualX.html:126841,green,green,126841,doc/master/classTVirtualX.html,https://root.cern,https://root.cern/doc/master/classTVirtualX.html,1,['green'],['green']
Energy Efficiency," Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ; 'integSet' is the set of dependents for which integration is requested. The function should copy the subset of dependents it can analytically integrate to anaIntSet and return a unique identification code for this integration configuration. If no integration can be performed, zero should be returned. ; Reimplemented from RooAbsReal.; Definition at line 2366 of file RooProdPdf.cxx. ◆ getAnalyticalIntegralWN(). Int_t RooFixedProdPdf::getAnalyticalIntegralWN ; (; RooArgSet & ; allDeps, . RooArgSet & ; analDeps, . const RooArgSet * ; normSet, . const char * ; rangeName = nullptr . ); const. inlineoverridevirtual . Variant of getAnalyticalIntegral that is also passed the normalization set that should be applied to the integrand of which the integral is requested. ; For certain operator p.d.f it is useful to overload this function rather than analyticalIntegralWN() as the additional normalization information may be useful in determining a more efficient decomposition of the requested integral. ; Reimplemented from RooAbsReal.; Definition at line 2361 of file RooProdPdf.cxx. ◆ initialize(). void RooFixedProdPdf::initialize ; (; ). inlineprivate . Definition at line 2380 of file RooProdPdf.cxx. ◆ selfNormalized(). bool RooFixedProdPdf::selfNormalized ; (; ); const. inlineoverridevirtual . Shows if a PDF is self-normalized, which means that no attempt is made to add a normalization term. ; Always returns false, unless a PDF overrides this function. ; Reimplemented from RooAbsPdf.; Definition at line 2334 of file RooProdPdf.cxx. ◆ translate(). void RooFixedProdPdf::translate ; (; RooFit::Detail::CodeSquashContext & ; ctx); const. inlineoverridevirtual . This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ; The function adds the code represented by each class as an std::string (that is later concatenated",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFixedProdPdf.html:78475,efficient,efficient,78475,doc/master/classRooFixedProdPdf.html,https://root.cern,https://root.cern/doc/master/classRooFixedProdPdf.html,1,['efficient'],['efficient']
Energy Efficiency," LaplaceDist(Double_t x, Double_t alpha=0, Double_t beta=1)Computes the probability density function of Laplace distribution at point x, with location parameter...Definition TMath.cxx:2364; TMath::LogDouble_t Log(Double_t x)Returns the natural logarithm of x.Definition TMath.h:756; TMath::ErfcDouble_t Erfc(Double_t x)Computes the complementary error function erfc(x).Definition TMath.cxx:199; TMath::VavilovIDouble_t VavilovI(Double_t x, Double_t kappa, Double_t beta2)Returns the value of the Vavilov cumulative distribution function (lower tail integral of the probabi...Definition TMath.cxx:2815; TMath::BetaDouble_t Beta(Double_t p, Double_t q)Calculates Beta-function Gamma(p)*Gamma(q)/Gamma(p+q).Definition TMath.cxx:2011; TMath::PoissonDouble_t Poisson(Double_t x, Double_t par)Computes the Poisson distribution function for (x,par).Definition TMath.cxx:587; TMath::SqrtDouble_t Sqrt(Double_t x)Returns the square root of x.Definition TMath.h:662; TMath::PowerLongDouble_t Power(LongDouble_t x, LongDouble_t y)Returns x raised to the power y.Definition TMath.h:721; TMath::BesselJ0Double_t BesselJ0(Double_t x)Modified Bessel function K_1(x)Definition TMath.cxx:1634; TMath::GammaDouble_t Gamma(Double_t z)Computation of gamma(z) for all z.Definition TMath.cxx:353; TMath::MinShort_t Min(Short_t a, Short_t b)Returns the smallest of a and b.Definition TMathBase.h:198; TMath::StruveL0Double_t StruveL0(Double_t x)Struve functions of order 1.Definition TMath.cxx:1923; TMath::NormQuantileDouble_t NormQuantile(Double_t p)Computes quantiles for standard normal distribution N(0, 1) at probability p.Definition TMath.cxx:2456; TMath::GamCfDouble_t GamCf(Double_t a, Double_t x)Computation of the incomplete gamma function P(a,x) via its continued fraction representation.Definition TMath.cxx:380; TMath::HypotDouble_t Hypot(Double_t x, Double_t y)Returns sqrt(x*x + y*y)Definition TMath.cxx:59; TMath::CosDouble_t Cos(Double_t)Returns the cosine of an angle of x radians.Definition TMath.h:594; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMath_8cxx_source.html:126212,power,power,126212,doc/master/TMath_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TMath_8cxx_source.html,1,['power'],['power']
Energy Efficiency," List of all members ; ROOT::Math::OneDimMultiFunctionAdapter< MultiFuncType > Class Template ReferenceMath » MathCore » Function Classes and Interfaces » Generic Function Evaluation Interfaces. ; template<class MultiFuncType = const ROOT::Math::IMultiGenFunction &>; class ROOT::Math::OneDimMultiFunctionAdapter< MultiFuncType >OneDimMultiFunctionAdapter class to wrap a multidimensional function in one dimensional one. ; Given a f(x1,x2,x3,....xn) transforms in a f( x_i) given the coordinate intex i and the vector x[] of the coordinates. It provides the possibility to copy and own the data array of the coordinates or to maintain internally a pointer to an external array for being more efficient. In this last case the user must guarantee the life of the given passed pointer ; Definition at line 56 of file OneDimFunctionAdapter.h. Public Member Functions;  OneDimMultiFunctionAdapter (const OneDimMultiFunctionAdapter &rhs);  ;  OneDimMultiFunctionAdapter (MultiFuncType f, const double *x, unsigned int icoord=0, const double *p=nullptr);  Constructor from the function object , pointer to an external array of x values and coordinate we want to adapt. ;  ;  OneDimMultiFunctionAdapter (MultiFuncType f, unsigned int dim=1, unsigned int icoord=0, const double *p=nullptr);  Constructor from the function object , dimension of the function and and coordinate we want to adapt. ;  ;  ~OneDimMultiFunctionAdapter () override;  Destructor (no operations) ;  ; OneDimMultiFunctionAdapter * Clone () const override;  clone ;  ; void SetCoord (int icoord);  ; void SetX (const double *x);  set values ;  ; void SetX (double *x);  set pointer without copying the values ;  ; template<class Iterator > ; void SetX (Iterator begin, Iterator end);  Set X values in case vector is own, iterator size must match previous set dimension. ;  ;  Public Member Functions inherited from ROOT::Math::IBaseFunctionOneDim; virtual ~IBaseFunctionOneDim ()=default;  ; virtual bool HasGradient () const;  ; double o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1OneDimMultiFunctionAdapter.html:1426,adapt,adapt,1426,doc/master/classROOT_1_1Math_1_1OneDimMultiFunctionAdapter.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1OneDimMultiFunctionAdapter.html,1,['adapt'],['adapt']
Energy Efficiency," LorentzVector.h. ◆ GetCoordinates() [4/4]. template<class CoordSystem > . void ROOT::Math::LorentzVector< CoordSystem >::GetCoordinates ; (; Scalar ; dest[]); const. inline . get internal data into an array of 4 Scalar numbers ; Definition at line 211 of file LorentzVector.h. ◆ isLightlike(). template<class CoordSystem > . bool ROOT::Math::LorentzVector< CoordSystem >::isLightlike ; (; Scalar ; tolerance = 100*std::numeric_limits<Scalar>::epsilon()); const. inline . Determine if momentum-energy can represent a massless particle. ; Definition at line 535 of file LorentzVector.h. ◆ isSpacelike(). template<class CoordSystem > . bool ROOT::Math::LorentzVector< CoordSystem >::isSpacelike ; (; ); const. inline . Determine if momentum-energy is spacelike, and represents a tachyon. ; Definition at line 545 of file LorentzVector.h. ◆ isTimelike(). template<class CoordSystem > . bool ROOT::Math::LorentzVector< CoordSystem >::isTimelike ; (; ); const. inline . Determine if momentum-energy can represent a physical massive particle. ; Definition at line 528 of file LorentzVector.h. ◆ M(). template<class CoordSystem > . Scalar ROOT::Math::LorentzVector< CoordSystem >::M ; (; ); const. inline . return magnitude (mass) using the (-,-,-,+) metric. ; If M2 is negative (space-like vector) a GenVector_exception is suggested and if continuing, - sqrt( -M2) is returned ; Definition at line 306 of file LorentzVector.h. ◆ M2(). template<class CoordSystem > . Scalar ROOT::Math::LorentzVector< CoordSystem >::M2 ; (; ); const. inline . return magnitude (mass) squared M2 = T**2 - X**2 - Y**2 - Z**2 (we use -,-,-,+ metric) ; Definition at line 300 of file LorentzVector.h. ◆ mag(). template<class CoordSystem > . Scalar ROOT::Math::LorentzVector< CoordSystem >::mag ; (; ); const. inline . Definition at line 658 of file LorentzVector.h. ◆ mag2(). template<class CoordSystem > . Scalar ROOT::Math::LorentzVector< CoordSystem >::mag2 ; (; ); const. inline . Definition at line 657 of file LorentzVecto",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1LorentzVector.html:18175,energy,energy,18175,doc/master/classROOT_1_1Math_1_1LorentzVector.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1LorentzVector.html,1,['energy'],['energy']
Energy Efficiency," Members; public:. enum EInterest { kRead; kWrite; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals. private:. TList*fActivelist of sockets to monitor; TList*fDeActivelist of (temporary) disabled sockets; Bool_tfInterruptflags an interrupt to Select; Bool_tfMainLooptrue if monitoring sockets within the main event loop; TSocket*fReadysocket which is ready to be read or written. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TMonitor(Bool_t mainloop = kTRUE); Create a monitor object. If mainloop is true the monitoring will be; done in the main event loop. TMonitor(const TMonitor& m); Copy constructor. ~TMonitor(); Cleanup the monitor object. Does not delete sockets being monitored. void Add(TSocket* sock, Int_t interest = kRead); Add socket to the monitor's active list. If interest=kRead then we; want to monitor the socket for read readiness, if interest=kWrite; then we monitor the socket for write readiness, if interest=kRead|kWrite; then we monitor both read and write readiness. void SetInterest(TSocket* sock, Int_t interest = kRead); Set interest mask for socket sock to interest. If the socket is not; in the active list move it or add it there.; If interest=kRead then we want to monitor the socket for read readiness,; if interest=kWrite then we monitor the socket for write readiness,; if interest=kRead|kWrite then we monitor both read and write readiness. void Remove(TSocket* sock); Remove a socket from the monitor. voi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMonitor.html:10084,monitor,monitor,10084,root/html528/TMonitor.html,https://root.cern,https://root.cern/root/html528/TMonitor.html,4,['monitor'],['monitor']
Energy Efficiency," Plotting control. LineStyle(Int_t style) -- Select line style by ROOT line style code, default is solid; LineColor(Int_t color) -- Select line color by ROOT color code, default is blue; LineWidth(Int_t width) -- Select line with in pixels, default is 3; FillStyle(Int_t style) -- Select fill style, default is not filled. If a filled style is selected, also use VLines(); to add vertical downward lines at end of curve to ensure proper closure; FillColor(Int_t color) -- Select fill color by ROOT color code; Range(const char* name) -- Only draw curve in range defined by given name; Range(double lo, double hi) -- Only draw curve in specified range; VLines() -- Add vertical lines to y=0 at end points of curve; Precision(Double_t eps) -- Control precision of drawn curve w.r.t to scale of plot, default is 1e-3. Higher precision; will result in more and more densely spaced curve points; A negative precision value will disable adaptive point spacing and restrict sampling to; the grid point of points defined by the binning of the plotted observabled (recommended for; expensive functions such as profile likelihoods); Invisble(Bool_t flag) -- Add curve to frame, but do not display. Useful in combination AddTo(). RooPlot* plotOn(RooPlot* frame, RooAbsReal::PlotOpt o) const; Plot oneself on 'frame'. In addition to features detailed in RooAbsReal::plotOn(),; the scale factor for a PDF can be interpreted in three different ways. The interpretation; is controlled by ScaleType. Relative - Scale factor is applied on top of PDF normalization scale factor; NumEvent - Scale factor is interpreted as a number of events. The surface area; under the PDF curve will match that of a histogram containing the specified; number of event; Raw - Scale factor is applied to the raw (projected) probability density.; Not too useful, option provided for completeness. RooPlot* paramOn(RooPlot* frame, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsPdf.html:78497,adapt,adaptive,78497,root/html534/RooAbsPdf.html,https://root.cern,https://root.cern/root/html534/RooAbsPdf.html,3,['adapt'],['adaptive']
Energy Efficiency," ProjectionY. ;  ; virtual TH1D * DoQuantiles (bool onX, const char *name, Double_t prob) const;  Implementation of quantiles for x or y. ;  ; Int_t Fill (const char *, Double_t) override;  Increment bin with namex with a weight w. ;  ; Int_t Fill (Double_t) override;  Invalid Fill method. ;  ; Double_t Interpolate (Double_t x) const override;  illegal for a TH2 ;  ;  Protected Member Functions inherited from TH1;  TH1 ();  Histogram default constructor. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins);  Constructor for variable bin size histograms using an input array of type double. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, const Float_t *xbins);  Constructor for variable bin size histograms using an input array of type float. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup);  Constructor for fix bin size histograms. ;  ; virtual Int_t AutoP2FindLimits (Double_t min, Double_t max);  Buffer-based estimate of the histogram range using the power of 2 algorithm. ;  ; Int_t AxisChoice (Option_t *axis) const;  Choose an axis according to ""axis"". ;  ; virtual void DoFillN (Int_t ntimes, const Double_t *x, const Double_t *w, Int_t stride=1);  Internal method to fill histogram content from a vector called directly by TH1::BufferEmpty. ;  ; virtual Double_t DoIntegral (Int_t ix1, Int_t ix2, Int_t iy1, Int_t iy2, Int_t iz1, Int_t iz2, Double_t &err, Option_t *opt, Bool_t doerr=kFALSE) const;  Internal function compute integral and optionally the error between the limits specified by the bin number values working for all histograms (1D, 2D and 3D) ;  ; virtual Bool_t FindNewAxisLimits (const TAxis *axis, const Double_t point, Double_t &newMin, Double_t &newMax);  finds new limits for the axis so that point is within the range and the limits are compatible with the previous ones (see TH1::Merge). ;  ; UInt_t GetAxisLabelStatus () const;  Internal function used in TH1::Fill to see ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH2.html:48523,power,power,48523,doc/master/classTH2.html,https://root.cern,https://root.cern/doc/master/classTH2.html,7,['power'],['power']
Energy Efficiency," Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  . Protected Member Functions; Double_t ** Allocate (Int_t size) override;  Allocate internal data structures for newsize points. ;  ; void CopyAndRelease (Double_t **newarrays, Int_t ibegin, Int_t iend, Int_t obegin) override;  Copy and release. ;  ; Bool_t CopyPoints (Double_t **arrays, Int_t ibegin, Int_t iend, Int_t obegin) override;  Copy errors from fEX and fEY to arrays[0] and arrays[1] or to fEX and fEY if arrays == 0 and ibegin != iend. ;  ; Bool_t CtorAllocate ();  Constructor allocate. ;  ; Bool_t DoMerge (const TGraph *g) override;  Protected function to perform the merge operation of a graph with errors. ;  ; void FillZero (Int_t begin, Int_t end, Bool_t from_ctor=kTRUE) override;  Set zero values for point arrays in the range [begin, end]. ;  ; void SwapPoints (Int_t pos1, Int_t pos2) override;  Swap points. ;  ; void UpdateArrays (const std::vector< Int_t > &sorting_indices, Int_t numSortedPoints, Int_t low) override;  Update the fX, fY, fEX, and fEY arrays with the sorted values. ;  ;  Protected Member Functions inherited from TGraph; Double_t ** AllocateArrays (Int_t Narrays, Int_t arraySize);  Allocate arrays. ;  ; Bool_t CtorAllocate ();  In constructors set fNpoints than call this method. ;  ; Double_t ** ExpandAndCopy (Int_t size, Int_t iend);  if size > fMaxSize allocate new arrays of 2*size points and copy iend first points. ;  ; TString SaveArray (std::ostream &out, const char *suffix, Int_t frameNumber, Double_t *arr);  Save a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphErrors.html:29795,allocate,allocate,29795,doc/master/classTGraphErrors.html,https://root.cern,https://root.cern/doc/master/classTGraphErrors.html,1,['allocate'],['allocate']
Energy Efficiency," Public Member Functions;  BinData (const BinData &rhs);  copy constructors ;  ;  BinData (const DataOptions &opt, const DataRange &range, unsigned int maxpoints=0, unsigned int dim=1, ErrorType err=kValueError);  constructor from options and range default is 1D and value errors ;  ;  BinData (const DataOptions &opt, unsigned int maxpoints=0, unsigned i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html:2241,allocate,allocate,2241,doc/master/classROOT_1_1Fit_1_1BinData.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html,1,['allocate'],['allocate']
Energy Efficiency," RField.cxx:611; ROOT::Experimental::RNTupleFillContext::fSinkstd::unique_ptr< Internal::RPageSink > fSinkDefinition RNTupleFillContext.hxx:56; ROOT::Experimental::RNTupleModel::Createstatic std::unique_ptr< RNTupleModel > Create()Definition RNTupleModel.cxx:249; ROOT::Experimental::RNTupleWriteOptionsCommon user-tunable settings for storing ntuples.Definition RNTupleWriteOptions.hxx:48; ROOT::Experimental::RNTupleWriteOptions::GetUseBufferedWritebool GetUseBufferedWrite() constDefinition RNTupleWriteOptions.hxx:127; ROOT::Experimental::RNTupleWriteOptions::EImplicitMT::kDefault@ kDefault; ROOT::Experimental::RNTupleWriterAn RNTuple that gets filled with entries (data) and writes them to storage.Definition RNTupleWriter.hxx:60; ROOT::Experimental::RNTupleWriter::RNTupleWriterRNTupleWriter(std::unique_ptr< RNTupleModel > model, std::unique_ptr< Internal::RPageSink > sink)Definition RNTupleWriter.cxx:32; ROOT::Experimental::RNTupleWriter::fZipTasksstd::unique_ptr< Internal::RPageStorage::RTaskScheduler > fZipTasksThe page sink's parallel page compression scheduler if IMT is on.Definition RNTupleWriter.hxx:68; ROOT::Experimental::RNTupleWriter::Createstatic std::unique_ptr< RNTupleWriter > Create(std::unique_ptr< RNTupleModel > model, std::unique_ptr< Internal::RPageSink > sink, const RNTupleWriteOptions &options)Create a writer, potentially wrapping the sink in a RPageSinkBuf.Definition RNTupleWriter.cxx:58; ROOT::Experimental::RNTupleWriter::CommitClusterGroupvoid CommitClusterGroup()Definition RNTupleWriter.cxx:102; ROOT::Experimental::RNTupleWriter::fMetricsDetail::RNTupleMetrics fMetricsDefinition RNTupleWriter.hxx:70; ROOT::Experimental::RNTupleWriter::~RNTupleWriter~RNTupleWriter()Definition RNTupleWriter.cxx:47; ROOT::Experimental::RNTupleWriter::Recreatestatic std::unique_ptr< RNTupleWriter > Recreate(std::unique_ptr< RNTupleModel > model, std::string_view ntupleName, std::string_view storage, const RNTupleWriteOptions &options=RNTupleWriteOptions())Throws an ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RNTupleWriter_8cxx_source.html:7682,schedul,scheduler,7682,doc/master/RNTupleWriter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RNTupleWriter_8cxx_source.html,1,['schedul'],['scheduler']
Energy Efficiency," ROOT file; TFileCacheRead TFile cache when reading; TFileCacheWrite TFile cache when writing; TFileCollection Collection of TFileInfo objects; TFileDrawMap Draw a 2-d map of the objects in a file; TFileHandler Handles events on file descriptors; TFileInfo Describes generic file info including meta data information; TFileInfoMeta Describes TFileInfo meta data; TFileIter TFile class iterator; TFileMergeInfo ; TFileMerger File copying and merging services; TFilePrefetch File block prefetcher; TFileSet TDataSet class to read the native file system directory structure in; TFileStager ABC defining interface to a stager; TFitEditor Fit Panel interface; TFitParametersDialog Fit function parameters dialog; TFitResult Class holding the result of the fit ; TFitResultPtr indirection to TFitResult; TFitter The ROOT standard fitter based on TMinuit; TFitterFumili Fitter based on new Fumili method (Fumili2); TFitterMinuit The ROOT fitter based on new Minuit (Minuit2); TFoam General purpose self-adapting Monte Carlo event generator; TFoamCell Single cell of FOAM; TFoamIntegrand n-dimensional real positive integrand of FOAM; TFoamMaxwt Controlling of the MC weight (maximum weight); TFoamSampler ; TFoamVect n-dimensional vector with dynamical allocation; TFolder Describe a folder: a list of objects and folders; TFormula The formula base class f(x,y,z,par); TFormulaPrimitive The primitive formula ; TFractionFitter Fits MC fractions to data histogram; TFrame Pad graphics frame; TFrameEditor editor of TFrame objects; TFree Description of free segments on a file; TFriendElement A friend element of another TTree; TFumili The FUMILI Minimization package; TFumiliMinimizer Implementation of Minimizer interface using TFumili ; TFunction Dictionary for global function; TFunctionParametersDialog Function parameters dialog; TG16ColorSelector 16 color cells; TGApplication GUI application singleton; TGButton Button widget abstract base class; TGButtonGroup Organizes TGButtons in a group; TGCanvas ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ClassIndex.html:72430,adapt,adapting,72430,root/html530/ClassIndex.html,https://root.cern,https://root.cern/root/html530/ClassIndex.html,3,['adapt'],['adapting']
Energy Efficiency," ROOT objects hierarchyDefinition THttpServer.h:36; THttpServer::SetTimervoid SetTimer(Long_t milliSec=100, Bool_t mode=kTRUE)Create timer which will invoke ProcessRequests() function periodically.Definition THttpServer.cxx:490; THttpServer::ProcessBatchHoldervirtual void ProcessBatchHolder(std::shared_ptr< THttpCallArg > &arg)Process special http request for root_batch_holder.js script.Definition THttpServer.cxx:799; THttpServer::fWSHandlersstd::vector< std::shared_ptr< THttpWSHandler > > fWSHandlers! list of WS handlersDefinition THttpServer.h:61; THttpServer::~THttpServervirtual ~THttpServer()destructorDefinition THttpServer.cxx:245; THttpServer::SetTerminatevoid SetTerminate()set termination flag, no any further requests will be processedDefinition THttpServer.cxx:277; THttpServer::MissedRequestvirtual void MissedRequest(THttpCallArg *arg)Method called when THttpServer cannot process request.Definition THttpServer.cxx:788; THttpServer::fOwnThreadBool_t fOwnThread! true when specialized thread allocated for processing requestsDefinition THttpServer.h:40; THttpServer::SetSniffervoid SetSniffer(TRootSniffer *sniff)Set TRootSniffer to the server.Definition THttpServer.cxx:267; THttpServer::IsFileRequestedBool_t IsFileRequested(const char *uri, TString &res) constCheck if file is requested, thread safe.Definition THttpServer.cxx:612; THttpServer::SetReadOnlyvoid SetReadOnly(Bool_t readonly=kTRUE)Set read-only mode for the server (default on)Definition THttpServer.cxx:296; THttpServer::GetItemFieldconst char * GetItemField(const char *fullname, const char *name)Get item field from sniffer.Definition THttpServer.cxx:1471; THttpServer::GetCorsconst char * GetCors() constReturns specified CORS domain.Definition THttpServer.h:115; THttpServer::fThrdstd::thread fThrd! own threadDefinition THttpServer.h:41; THttpServer::StopServerThreadvoid StopServerThread()Stop server thread.Definition THttpServer.cxx:547; THttpServer::ProcessRequestsInt_t ProcessRequests()Process submitt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THttpServer_8cxx_source.html:58665,allocate,allocated,58665,doc/master/THttpServer_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THttpServer_8cxx_source.html,2,['allocate'],['allocated']
Energy Efficiency," ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. rf902_numgenconfig.C File ReferenceTutorials » RooFit Tutorials. Detailed Description; Numeric algorithm tuning: configuration and customization of how MC sampling algorithms on specific pdfs are executed ; ; #include ""RooRealVar.h""; #include ""RooDataSet.h""; #include ""RooChebychev.h""; #include ""TCanvas.h""; #include ""TAxis.h""; #include ""RooPlot.h""; #include ""RooNumGenConfig.h""; #include ""RooArgSet.h""; #include <iomanip>; using namespace RooFit;; ; void rf902_numgenconfig(); {; ; // A d j u s t g l o b a l MC s a m p l i n g s t r a t e g y; // ------------------------------------------------------------------; ; // Example pdf for use below; RooRealVar x(""x"", ""x"", 0, 10);; RooChebychev model(""model"", ""model"", x, RooArgList(0, 0.5, -0.1));; ; // Change global strategy for 1D sampling problems without conditional observable; // (1st false) and without discrete observable (2nd false) from RooFoamGenerator,; // ( an interface to the TFoam MC generator with adaptive subdivisioning strategy ) to RooAcceptReject,; // a plain accept/reject sampling algorithm [ RooFit default before ROOT 5.23/04 ]; RooAbsPdf::defaultGeneratorConfig()->method1D(false, false).setLabel(""RooAcceptReject"");; ; // Generate 10Kevt using RooAcceptReject; std::unique_ptr<RooDataSet> data_ar{model.generate(x, 10000, Verbose(true))};; data_ar->Print();; ; // A d j u s t i n g d e f a u l t c o n f i g f o r a s p e c i f i c p d f; // -------------------------------------------------------------------------------------; ; // Another possibility: associate custom MC sampling configuration as default for object 'model'; // The true argument will install a clone of the default configuration as specialized configuration; // for this model if none existed so far; model.specialGeneratorConfig(true)->method1D(false, false).setLabel(""RooFoamGenerator"");; ; // A d j u s t i n g p a r a m e t e r s o f a s p e c i f i c t e c h n i q ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf902__numgenconfig_8C.html:1109,adapt,adaptive,1109,doc/master/rf902__numgenconfig_8C.html,https://root.cern,https://root.cern/doc/master/rf902__numgenconfig_8C.html,1,['adapt'],['adaptive']
Energy Efficiency," ROOT::Math::OneDimMultiFunctionAdapter< MultiFuncType >OneDimMultiFunctionAdapter class to wrap a multidimensional function in one dimensional one. ; Given a f(x1,x2,x3,....xn) transforms in a f( x_i) given the coordinate intex i and the vector x[] of the coordinates. It provides the possibility to copy and own the data array of the coordinates or to maintain internally a pointer to an external array for being more efficient. In this last case the user must guarantee the life of the given passed pointer ; Definition at line 56 of file OneDimFunctionAdapter.h. Public Member Functions;  OneDimMultiFunctionAdapter (const OneDimMultiFunctionAdapter &rhs);  ;  OneDimMultiFunctionAdapter (MultiFuncType f, const double *x, unsigned int icoord=0, const double *p=nullptr);  Constructor from the function object , pointer to an external array of x values and coordinate we want to adapt. ;  ;  OneDimMultiFunctionAdapter (MultiFuncType f, unsigned int dim=1, unsigned int icoord=0, const double *p=nullptr);  Constructor from the function object , dimension of the function and and coordinate we want to adapt. ;  ;  ~OneDimMultiFunctionAdapter () override;  Destructor (no operations) ;  ; OneDimMultiFunctionAdapter * Clone () const override;  clone ;  ; void SetCoord (int icoord);  ; void SetX (const double *x);  set values ;  ; void SetX (double *x);  set pointer without copying the values ;  ; template<class Iterator > ; void SetX (Iterator begin, Iterator end);  Set X values in case vector is own, iterator size must match previous set dimension. ;  ;  Public Member Functions inherited from ROOT::Math::IBaseFunctionOneDim; virtual ~IBaseFunctionOneDim ()=default;  ; virtual bool HasGradient () const;  ; double operator() (const double *x) const;  Evaluate the function at a point x[]. ;  ; double operator() (double x) const;  Evaluate the function at a point x. ;  . Private Member Functions; double DoEval (double x) const override;  evaluate function at the values x[] given in the",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1OneDimMultiFunctionAdapter.html:1649,adapt,adapt,1649,doc/master/classROOT_1_1Math_1_1OneDimMultiFunctionAdapter.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1OneDimMultiFunctionAdapter.html,1,['adapt'],['adapt']
Energy Efficiency," Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Development How to use the ROOT Jenkins. The ROOT project uses a Jenkins instance to schedule a number of software development procedures (nightly builds, production of releases, documentation generation, etc.). Practical information about the service can be found here. The purpose of this page is to document the different existing procedures for the ROOT project and basic interaction with them to obtain most of the information.; SFT Jenkins Service; Access and accounts; Everybody with a CERN account has automatically read access to Jenkins service instance. For write access (e.g. to be able to stop and launch new jobs) please send a request to Patricia Mendez to obtain an account.; ROOT jobs; Each project in the SFT Jenkins has a specific 'tab' for the defined project jobs. The ROOT tab contains all the defined jobs for ROOT. They are organized as follow:. nightly builds: The jobs are named root-nightly-<version> and they are implemented as multi-configuration project. They are run once a day (around after midnight CET) but they can be started by hand at any time of the day (see later) and select for what c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/how-use-root-jenkins.html:1949,schedul,schedule,1949,d/how-use-root-jenkins.html,https://root.cern,https://root.cern/d/how-use-root-jenkins.html,1,['schedul'],['schedule']
Energy Efficiency," RooAbsReal; RooRealBinding Function binding to RooAbsReal object; RooRealConstant RooRealVar constants factory; RooRealIntegral Real-valued function representing an integral over a RooAbsReal object; RooRealMPFE Multi-process front-end for parallel calculation of a real valued function ; RooRealProxy Proxy for a RooAbsReal object; RooRealSumPdf PDF constructed from a sum of (non-pdf) functions; RooRealVar Real-valued variable ; RooRealVarSharedProperties Shared properties of a RooRealVar clone set; RooRecursiveFraction Recursive fraction formula f1*(1-f2)*(1-f3) etc...; RooRefCountList RooLinkedList with reference counting; RooResolutionModel Abstract Resolution Model; RooScaledFunc Function binding applying scaling to another function binding; RooSegmentedIntegrator1D 1-dimensional piece-wise numerical integration engine; RooSegmentedIntegrator2D 2-dimensional piece-wise numerical integration engine; RooSentinel ; RooSetPair Utility class holding a pair of RooArgSet pointers; RooSetProxy Proxy class for a RooArgSet; RooSharedProperties Abstract interface for shared property implementations; RooSharedPropertiesList Manager for shared properties among clones of certain RooAbsArg-derived types; RooSimGenContext Context for efficiently generating a dataset from a RooSimultaneous PDF; RooSimPdfBuilder RooSimultaneous PDF Builder (obsolete); RooSimWSTool Workspace oriented tool for customized cloning of p.d.f. into a simultaneous p.d.f; RooSimWSTool::BuildConfig Build configuration object for RooSimWSTool; RooSimWSTool::MultiBuildConfig Build configuration object for RooSimWSTool with multiple prototype p.d.f.; RooSimWSTool::ObjBuildConfig Validated RooSimWSTool build configuration; RooSimWSTool::ObjSplitRule Validated RooSimWSTool split rule; RooSimWSTool::SplitRule Split rule specification for prototype p.d.f; RooSimultaneous Simultaneous operator p.d.f, functions like C++ 'switch()' on input p.d.fs operating on index category5A; RooSpHarmonic SpHarmonic polynomial; Ro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ClassIndex.html:42590,efficient,efficiently,42590,root/html528/ClassIndex.html,https://root.cern,https://root.cern/root/html528/ClassIndex.html,2,['efficient'],['efficiently']
Energy Efficiency," RooAbsReal; RooRealBinding Function binding to RooAbsReal object; RooRealConstant RooRealVar constants factory; RooRealIntegral Real-valued function representing an integral over a RooAbsReal object; RooRealMPFE Multi-process front-end for parallel calculation of a real valued function ; RooRealProxy Proxy for a RooAbsReal object; RooRealSumPdf PDF constructed from a sum of (non-pdf) functions; RooRealVar Real-valued variable ; RooRealVarSharedProperties Shared properties of a RooRealVar clone set; RooRecursiveFraction Recursive fraction formula f1*(1-f2)*(1-f3) etc...; RooRefCountList RooLinkedList with reference counting; RooResolutionModel Abstract Resolution Model; RooScaledFunc Function binding applying scaling to another function binding; RooSegmentedIntegrator1D 1-dimensional piece-wise numerical integration engine; RooSegmentedIntegrator2D 2-dimensional piece-wise numerical integration engine; RooSentinel ; RooSetPair Utility class holding a pair of RooArgSet pointers; RooSetProxy Proxy class for a RooArgSet; RooSharedProperties Abstract interface for shared property implementations; RooSharedPropertiesList Manager for shared properties among clones of certain RooAbsArg-derived types; RooSimGenContext Context for efficiently generating a dataset from a RooSimultaneous PDF; RooSimPdfBuilder RooSimultaneous PDF Builder (obsolete); RooSimWSTool Workspace oriented tool for customized cloning of p.d.f. into a simultaneous p.d.f; RooSimWSTool::BuildConfig Build configuration object for RooSimWSTool; RooSimWSTool::MultiBuildConfig Build configuration object for RooSimWSTool with multiple prototype p.d.f.; RooSimWSTool::ObjBuildConfig Validated RooSimWSTool build configuration; RooSimWSTool::ObjSplitRule Validated RooSimWSTool split rule; RooSimWSTool::SplitRule Split rule specification for prototype p.d.f; RooSimultaneous Simultaneous operator p.d.f, functions like C++ 'switch()' on input p.d.fs operating on index category5A; RooStats ; RooStats::AcceptanceRegion A",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html524/ClassIndex.html:40801,efficient,efficiently,40801,root/html524/ClassIndex.html,https://root.cern,https://root.cern/root/html524/ClassIndex.html,2,['efficient'],['efficiently']
Energy Efficiency," RooMultiVarGaussian(); RooMultiVarGaussian(const RooMultiVarGaussian& other, const char* name = 0); RooMultiVarGaussian(const char* name, const char* title, const RooArgList& xvec, const TMatrixDSym& covMatrix); RooMultiVarGaussian(const char* name, const char* title, const RooArgList& xvec, const RooArgList& mu, const TMatrixDSym& covMatrix); RooMultiVarGaussian(const char* name, const char* title, const RooArgList& xvec, const RooFitResult& fr, Bool_t reduceToConditional = kTRUE); RooMultiVarGaussian(const char* name, const char* title, const RooArgList& xvec, const TVectorD& mu, const TMatrixDSym& covMatrix); virtual~RooMultiVarGaussian(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual Double_tanalyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tRooAbsPdf::analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; virtual voidTObject::AppendPad(Option_t* option = """"); TF1*RooAbsReal::asTF(const RooArgList& obs, const RooArgList& pars = RooArgList(), const RooArgSet& nset = RooArgSet()) const; voidRooAbsArg::attachDataSet(const RooAbsData& set)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooMultiVarGaussian.html:873,reduce,reduceToConditional,873,root/html534/RooMultiVarGaussian.html,https://root.cern,https://root.cern/root/html534/RooMultiVarGaussian.html,1,['reduce'],['reduceToConditional']
Energy Efficiency," RooMultiVarGaussian(); RooMultiVarGaussian(const RooMultiVarGaussian& other, const char* name = 0); RooMultiVarGaussian(const char* name, const char* title, const RooArgList& xvec, const TMatrixDSym& covMatrix); RooMultiVarGaussian(const char* name, const char* title, const RooArgList& xvec, const RooFitResult& fr, Bool_t reduceToConditional = kTRUE); RooMultiVarGaussian(const char* name, const char* title, const RooArgList& xvec, const RooArgList& mu, const TMatrixDSym& covMatrix); RooMultiVarGaussian(const char* name, const char* title, const RooArgList& xvec, const TVectorD& mu, const TMatrixDSym& covMatrix); virtual~RooMultiVarGaussian(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual Double_tanalyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tRooAbsPdf::analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; virtual voidTObject::AppendPad(Option_t* option = """"); TF1*RooAbsReal::asTF(const RooArgList& obs, const RooArgList& pars = RooArgList(), const RooArgSet& nset = RooArgSet()) const; voidRooAbsArg::attachDataSet(const RooAbsData& set)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooMultiVarGaussian.html:739,reduce,reduceToConditional,739,root/html532/RooMultiVarGaussian.html,https://root.cern,https://root.cern/root/html532/RooMultiVarGaussian.html,1,['reduce'],['reduceToConditional']
Energy Efficiency," Scalar Et2() const. transverse energy squared. Scalar Et() const. transverse energy. Scalar Phi() const. azimuthal angle. Scalar Theta() const. polar angle. Scalar Eta() const. pseudorapidity. void SetPx(ROOT::Math::PxPyPzM4D<Double32_t>::Scalar px); --------- Set Coordinates of this system ---------------. set X value. void SetPy(ROOT::Math::PxPyPzM4D<Double32_t>::Scalar py). set Y value. void SetPz(ROOT::Math::PxPyPzM4D<Double32_t>::Scalar pz). set Z value. void SetM(ROOT::Math::PxPyPzM4D<Double32_t>::Scalar m). set T value. void SetPxPyPzE(ROOT::Math::PxPyPzM4D<Double32_t>::Scalar px, ROOT::Math::PxPyPzM4D<Double32_t>::Scalar py, ROOT::Math::PxPyPzM4D<Double32_t>::Scalar pz, ROOT::Math::PxPyPzM4D<Double32_t>::Scalar e). set all values. void Negate(); ------ Manipulations -------------. negate the 4-vector - Note that the energy cannot be negate (would need an additional data member); therefore negate will work only on the spatial components.; One would need to use negate only with vectors having the energy as data members. void Scale(const ROOT::Math::PxPyPzM4D<Double32_t>::Scalar& a). scale coordinate values by a scalar quantity a. Scalar x() const; ============= Compatibility section ==================; The following make this coordinate system look enough like a CLHEP; vector that an assignment member template can work with either. { return X(); }. Scalar y() const; { return Y(); }. Scalar z() const; { return Z(); }. Scalar t() const; { return E(); }. void SetPt(Double32_t pt); ====== Set member functions for coordinates in other systems =======. void SetEta(Double32_t eta). void SetPhi(Double32_t phi). void SetE(Double32_t energy). void RestrictNegMass(); restrict the value of negative mass to avoid unphysical negative E2 values; M2 must be less than P2 for the tachionic particles - otherwise use positive values. » Last changed: root/mathcore:$Id: 464c29f33a8bbd8462a3e15b7e4c30c6f5b74a30 $ » Last generated: 2015-09-08 17:00; This page has been automatically g",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Math__PxPyPzM4D_Double32_t_.html:7908,energy,energy,7908,root/html534/ROOT__Math__PxPyPzM4D_Double32_t_.html,https://root.cern,https://root.cern/root/html534/ROOT__Math__PxPyPzM4D_Double32_t_.html,1,['energy'],['energy']
Energy Efficiency," Scalar Et2() const. transverse energy squared. Scalar Et() const. transverse energy. Scalar Phi() const. azimuthal angle. Scalar Theta() const. polar angle. Scalar Eta() const. pseudorapidity. void SetPx(ROOT::Math::PxPyPzM4D<Double32_t>::Scalar px); --------- Set Coordinates of this system ---------------. set X value. void SetPy(ROOT::Math::PxPyPzM4D<Double32_t>::Scalar py). set Y value. void SetPz(ROOT::Math::PxPyPzM4D<Double32_t>::Scalar pz). set Z value. void SetM(ROOT::Math::PxPyPzM4D<Double32_t>::Scalar m). set T value. void SetPxPyPzE(ROOT::Math::PxPyPzM4D<Double32_t>::Scalar px, ROOT::Math::PxPyPzM4D<Double32_t>::Scalar py, ROOT::Math::PxPyPzM4D<Double32_t>::Scalar pz, ROOT::Math::PxPyPzM4D<Double32_t>::Scalar e). set all values. void Negate(); ------ Manipulations -------------. negate the 4-vector - Note that the energy cannot be negate (would need an additional data member); therefore negate will work only on the spatial components.; One would need to use negate only with vectors having the energy as data members. void Scale(const ROOT::Math::PxPyPzM4D<Double32_t>::Scalar& a). scale coordinate values by a scalar quantity a. Scalar x() const; ============= Compatibility section ==================; The following make this coordinate system look enough like a CLHEP; vector that an assignment member template can work with either. { return X(); }. Scalar y() const; { return Y(); }. Scalar z() const; { return Z(); }. Scalar t() const; { return E(); }. void SetPt(Double32_t pt); ====== Set member functions for coordinates in other systems =======. void SetEta(Double32_t eta). void SetPhi(Double32_t phi). void SetE(Double32_t energy). void RestrictNegMass(); restrict the value of negative mass to avoid unphysical negative E2 values; M2 must be less than P2 for the tachionic particles - otherwise use positive values. » Last changed: root/mathcore:$Id: PxPyPzM4D.h 30568 2009-10-06 07:17:59Z moneta $ » Last generated: 2009-12-07 13:44; This page has been automatica",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__PxPyPzM4D_Double32_t_.html:7906,energy,energy,7906,root/html526/ROOT__Math__PxPyPzM4D_Double32_t_.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__PxPyPzM4D_Double32_t_.html,1,['energy'],['energy']
Energy Efficiency," Scalar Et2() const. transverse energy squared. Scalar Et() const. transverse energy. Scalar Phi() const. azimuthal angle. Scalar Theta() const. polar angle. Scalar Eta() const. pseudorapidity. void SetPx(ROOT::Math::PxPyPzM4D<Double32_t>::Scalar px); --------- Set Coordinates of this system ---------------. set X value. void SetPy(ROOT::Math::PxPyPzM4D<Double32_t>::Scalar py). set Y value. void SetPz(ROOT::Math::PxPyPzM4D<Double32_t>::Scalar pz). set Z value. void SetM(ROOT::Math::PxPyPzM4D<Double32_t>::Scalar m). set T value. void SetPxPyPzE(ROOT::Math::PxPyPzM4D<Double32_t>::Scalar px, ROOT::Math::PxPyPzM4D<Double32_t>::Scalar py, ROOT::Math::PxPyPzM4D<Double32_t>::Scalar pz, ROOT::Math::PxPyPzM4D<Double32_t>::Scalar e). set all values. void Negate(); ------ Manipulations -------------. negate the 4-vector - Note that the energy cannot be negate (would need an additional data member); therefore negate will work only on the spatial components.; One would need to use negate only with vectors having the energy as data members. void Scale(const ROOT::Math::PxPyPzM4D<Double32_t>::Scalar& a). scale coordinate values by a scalar quantity a. Scalar x() const; ============= Compatibility section ==================; The following make this coordinate system look enough like a CLHEP; vector that an assignment member template can work with either. { return X(); }. Scalar y() const; { return Y(); }. Scalar z() const; { return Z(); }. Scalar t() const; { return E(); }. void SetPt(Double32_t pt); ====== Set member functions for coordinates in other systems =======. void SetEta(Double32_t eta). void SetPhi(Double32_t phi). void SetE(Double32_t energy). void RestrictNegMass(); restrict the value of negative mass to avoid unphysical negative E2 values; M2 must be less than P2 for the tachionic particles - otherwise use positive values. » Last changed: root/mathcore:$Id: PxPyPzM4D.h 31938 2009-12-18 14:49:38Z moneta $ » Last generated: 2010-09-23 19:56; This page has been automatica",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__PxPyPzM4D_Double32_t_.html:7906,energy,energy,7906,root/html528/ROOT__Math__PxPyPzM4D_Double32_t_.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__PxPyPzM4D_Double32_t_.html,1,['energy'],['energy']
Energy Efficiency," Scalar Et2() const. transverse energy squared. Scalar Et() const. transverse energy. Scalar Phi() const. azimuthal angle. Scalar Theta() const. polar angle. Scalar Eta() const. pseudorapidity. void SetPx(ROOT::Math::PxPyPzM4D<Double32_t>::Scalar px); --------- Set Coordinates of this system ---------------. set X value. void SetPy(ROOT::Math::PxPyPzM4D<Double32_t>::Scalar py). set Y value. void SetPz(ROOT::Math::PxPyPzM4D<Double32_t>::Scalar pz). set Z value. void SetM(ROOT::Math::PxPyPzM4D<Double32_t>::Scalar m). set T value. void SetPxPyPzE(ROOT::Math::PxPyPzM4D<Double32_t>::Scalar px, ROOT::Math::PxPyPzM4D<Double32_t>::Scalar py, ROOT::Math::PxPyPzM4D<Double32_t>::Scalar pz, ROOT::Math::PxPyPzM4D<Double32_t>::Scalar e). set all values. void Negate(); ------ Manipulations -------------. negate the 4-vector - Note that the energy cannot be negate (would need an additional data member); therefore negate will work only on the spatial components.; One would need to use negate only with vectors having the energy as data members. void Scale(const ROOT::Math::PxPyPzM4D<Double32_t>::Scalar& a). scale coordinate values by a scalar quantity a. Scalar x() const; ============= Compatibility section ==================; The following make this coordinate system look enough like a CLHEP; vector that an assignment member template can work with either. { return X(); }. Scalar y() const; { return Y(); }. Scalar z() const; { return Z(); }. Scalar t() const; { return E(); }. void SetPt(Double32_t pt); ====== Set member functions for coordinates in other systems =======. void SetEta(Double32_t eta). void SetPhi(Double32_t phi). void SetE(Double32_t energy). void RestrictNegMass(); restrict the value of negative mass to avoid unphysical negative E2 values; M2 must be less than P2 for the tachionic particles - otherwise use positive values. » Last changed: root/mathcore:$Id: PxPyPzM4D.h 31938 2009-12-18 14:49:38Z moneta $ » Last generated: 2011-07-04 15:19; This page has been automatica",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ROOT__Math__PxPyPzM4D_Double32_t_.html:7908,energy,energy,7908,root/html530/ROOT__Math__PxPyPzM4D_Double32_t_.html,https://root.cern,https://root.cern/root/html530/ROOT__Math__PxPyPzM4D_Double32_t_.html,1,['energy'],['energy']
Energy Efficiency," Scalar Et2() const. transverse energy squared. Scalar Et() const. transverse energy. Scalar Phi() const. azimuthal angle. Scalar Theta() const. polar angle. Scalar Eta() const. pseudorapidity. void SetPx(ROOT::Math::PxPyPzM4D<Double32_t>::Scalar px); --------- Set Coordinates of this system ---------------. set X value. void SetPy(ROOT::Math::PxPyPzM4D<Double32_t>::Scalar py). set Y value. void SetPz(ROOT::Math::PxPyPzM4D<Double32_t>::Scalar pz). set Z value. void SetM(ROOT::Math::PxPyPzM4D<Double32_t>::Scalar m). set T value. void SetPxPyPzE(ROOT::Math::PxPyPzM4D<Double32_t>::Scalar px, ROOT::Math::PxPyPzM4D<Double32_t>::Scalar py, ROOT::Math::PxPyPzM4D<Double32_t>::Scalar pz, ROOT::Math::PxPyPzM4D<Double32_t>::Scalar e). set all values. void Negate(); ------ Manipulations -------------. negate the 4-vector - Note that the energy cannot be negate (would need an additional data member); therefore negate will work only on the spatial components.; One would need to use negate only with vectors having the energy as data members. void Scale(const ROOT::Math::PxPyPzM4D<Double32_t>::Scalar& a). scale coordinate values by a scalar quantity a. Scalar x() const; ============= Compatibility section ==================; The following make this coordinate system look enough like a CLHEP; vector that an assignment member template can work with either. { return X(); }. Scalar y() const; { return Y(); }. Scalar z() const; { return Z(); }. Scalar t() const; { return E(); }. void SetPt(Double32_t pt); ====== Set member functions for coordinates in other systems =======. void SetEta(Double32_t eta). void SetPhi(Double32_t phi). void SetE(Double32_t energy). void RestrictNegMass(); restrict the value of negative mass to avoid unphysical negative E2 values; M2 must be less than P2 for the tachionic particles - otherwise use positive values. » Last changed: root/mathcore:$Id: PxPyPzM4D.h 31938 2009-12-18 14:49:38Z moneta $ » Last generated: 2011-11-03 20:05; This page has been automatica",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ROOT__Math__PxPyPzM4D_Double32_t_.html:7908,energy,energy,7908,root/html532/ROOT__Math__PxPyPzM4D_Double32_t_.html,https://root.cern,https://root.cern/root/html532/ROOT__Math__PxPyPzM4D_Double32_t_.html,1,['energy'],['energy']
Energy Efficiency," Scalar Theta() const. polar angle. Scalar Eta() const. pseudorapidity. void SetPx(ROOT::Math::PxPyPzM4D<Double32_t>::Scalar px); --------- Set Coordinates of this system ---------------. set X value. void SetPy(ROOT::Math::PxPyPzM4D<Double32_t>::Scalar py). set Y value. void SetPz(ROOT::Math::PxPyPzM4D<Double32_t>::Scalar pz). set Z value. void SetM(ROOT::Math::PxPyPzM4D<Double32_t>::Scalar m). set T value. void SetPxPyPzE(ROOT::Math::PxPyPzM4D<Double32_t>::Scalar px, ROOT::Math::PxPyPzM4D<Double32_t>::Scalar py, ROOT::Math::PxPyPzM4D<Double32_t>::Scalar pz, ROOT::Math::PxPyPzM4D<Double32_t>::Scalar e). set all values. void Negate(); ------ Manipulations -------------. negate the 4-vector - Note that the energy cannot be negate (would need an additional data member); therefore negate will work only on the spatial components.; One would need to use negate only with vectors having the energy as data members. void Scale(const ROOT::Math::PxPyPzM4D<Double32_t>::Scalar& a). scale coordinate values by a scalar quantity a. Scalar x() const; ============= Compatibility section ==================; The following make this coordinate system look enough like a CLHEP; vector that an assignment member template can work with either. { return X(); }. Scalar y() const; { return Y(); }. Scalar z() const; { return Z(); }. Scalar t() const; { return E(); }. void SetPt(Double32_t pt); ====== Set member functions for coordinates in other systems =======. void SetEta(Double32_t eta). void SetPhi(Double32_t phi). void SetE(Double32_t energy). void RestrictNegMass(); restrict the value of negative mass to avoid unphysical negative E2 values; M2 must be less than P2 for the tachionic particles - otherwise use positive values. » Last changed: root/mathcore:$Id: 464c29f33a8bbd8462a3e15b7e4c30c6f5b74a30 $ » Last generated: 2015-09-08 17:00; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Math__PxPyPzM4D_Double32_t_.html:8548,energy,energy,8548,root/html534/ROOT__Math__PxPyPzM4D_Double32_t_.html,https://root.cern,https://root.cern/root/html534/ROOT__Math__PxPyPzM4D_Double32_t_.html,1,['energy'],['energy']
Energy Efficiency," Scholz, M.A. Stephens ""k-Sample Anderson-Darling Test"".; The test is implemented in root in the ROOT::Math::GoFTest class It is the same formula ( (6) in the paper), and also shown in this preprint; Binned data are considered as un-binned data with identical observation happening in the bin center.; Parameters. [in]h2Pointer to 1D histogram ; [in]optionis a character string to specify options; ""D"" Put out a line of ""Debug"" printout; ""T"" Return the normalized A-D test statistic. Note1: Underflow and overflow are not considered in the test; Note2: The test works only for un-weighted histogram (i.e. representing counts); Note3: The histograms are not required to have the same X axis; Note4: The test works only for 1-dimensional histograms . Definition at line 8062 of file TH1.cxx. ◆ AutoP2FindLimits(). Int_t TH1::AutoP2FindLimits ; (; Double_t ; xmi, . Double_t ; xma . ). protectedvirtual . Buffer-based estimate of the histogram range using the power of 2 algorithm. ; Used by the autobin power of 2 algorithm.; Works on arguments (min and max from fBuffer) and internal inputs: fXmin, fXmax, NBinsX (from fXaxis), ... Result save internally in fXaxis.; Overloaded by TH2 and TH3.; Return -1 if internal inputs are inconsistent, 0 otherwise. ; Definition at line 1343 of file TH1.cxx. ◆ AutoP2GetBins(). Int_t TH1::AutoP2GetBins ; (; Int_t ; n). inlinestaticprotected . Auxiliary function to get the next power of 2 integer value larger then n. ; Used by the autobin power of 2 algorithm ; Definition at line 1321 of file TH1.cxx. ◆ AutoP2GetPower2(). Double_t TH1::AutoP2GetPower2 ; (; Double_t ; x, . Bool_t ; next = kTRUE . ). inlinestaticprotected . Auxiliary function to get the power of 2 next (larger) or previous (smaller) a given x. ; next = kTRUE : next larger next = kFALSE : previous smaller; Used by the autobin power of 2 algorithm ; Definition at line 1308 of file TH1.cxx. ◆ AxisChoice(). Int_t TH1::AxisChoice ; (; Option_t * ; axis); const. protected . Choose an axis ac",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1.html:81349,power,power,81349,doc/master/classTH1.html,https://root.cern,https://root.cern/doc/master/classTH1.html,1,['power'],['power']
Energy Efficiency," SetSniffer(TRootSniffer* sniff); Set TRootSniffer to the server; Server takes ownership over sniffer. Bool_t IsReadOnly() const; returns read-only mode. void SetReadOnly(Bool_t readonly); Set read-only mode for the server (default on); In read-only server is not allowed to change any ROOT object, registered to the server; Server also cannot execute objects method via exe.json request. void AddLocation(const char* prefix, const char* path); add files location, which could be used in the server; one could map some system folder to the server like AddLocation(""mydir/"",""/home/user/specials"");; Than files from this directory could be addressed via server like; http://localhost:8080/mydir/myfile.root. void SetJSROOT(const char* location); Set location of JSROOT to use with the server; One could specify address like:; https://root.cern.ch/js/3.3; http://web-docs.gsi.de/~linev/js/3.3; This allows to get new JSROOT features with old server,; reduce load on THttpServer instance, also startup time can be improved; When empty string specified (default), local copy of JSROOT is used (distributed with ROOT). void SetDefaultPage(const char* filename); Set file name of HTML page, delivered by the server when; http address is opened in the browser.; By default, $ROOTSYS/etc/http/files/online.htm page is used; When empty filename is specified, default page will be used. void SetDrawPage(const char* filename); Set file name of HTML page, delivered by the server when; objects drawing page is requested from the browser; By default, $ROOTSYS/etc/http/files/draw.htm page is used; When empty filename is specified, default page will be used. Bool_t CreateEngine(const char* engine); factory method to create different http engines; At the moment two engine kinds are supported:; civetweb (default) and fastcgi; Examples:; ""civetweb:8080"" or ""http:8080"" or "":8080"" - creates civetweb web server with http port 8080; ""fastcgi:9000"" - creates fastcgi server with port 9000; ""dabc:1237"" - create DABC",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/THttpServer.html:10031,reduce,reduce,10031,root/html534/THttpServer.html,https://root.cern,https://root.cern/root/html534/THttpServer.html,2,['reduce'],['reduce']
Energy Efficiency," Short_tTEveElement::fImpliedHighlighted!; Short_tTEveElement::fImpliedSelected!; TArrayI*TEvePointSet::fIntIdsOptional array of integer ideices.; Int_tTEvePointSet::fIntIdsPerPointNumber of integer indices assigned to each point.; TEveElement::sLTI_tTEveElement::fItems! Set of list-tree-items.; Int_tTPolyMarker3D::fLastPointThe index of the last filled point; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Color_t*TEveElement::fMainColorPtrPointer to main-color variable.; TEveTrans*TEveElement::fMainTransPointer to main transformation matrix.; Char_tTEveElement::fMainTransparencyMain-transparency variable.; TEveProjectionManager*TEveProjected::fManagermanager; Color_tTAttMarker::fMarkerColorMarker color index; Size_tTAttMarker::fMarkerSizeMarker size; Style_tTAttMarker::fMarkerStyleMarker style; Int_tTPolyMarker3D::fNNumber of allocated points; TStringTPolyMarker3D::fNameName of polymarker; Int_tTEveElement::fNumChildren!; TStringTPolyMarker3D::fOptionOptions; Bool_tTPointSet3D::fOwnIdsFlag specifying id-objects are owned by the point-set; Float_t*TPolyMarker3D::fP[3*fN] Array of X,Y,Z coordinates; Int_tTEveElement::fParentIgnoreCnt! Counter for parents that are ignored in ref-counting.; TEveElement::List_tTEveElement::fParentsList of parents.; Bool_tTEveElement::fPickable; TEveProjectable*TEveProjected::fProjectablelink to original object; TEveProjectable::ProjList_tTEveProjectable::fProjectedListreferences to projected instances.; Bool_tTEveElement::fRnrChildrenRender children of this element.; Bool_tTEveElement::fRnrSelfRender this element.; Bool_tTEveElement::fSelected!; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; TRefTEveElement::fSourceExternal object that is represented by this element.; TEvePointSelectorConsumer::ETreeVarType_eTEvePointSelectorConsumer::fSourceCSCoordinate-System of the source tree variables; TStringTEvePointSet::fTitleTitle/",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEvePointSetProjected.html:26483,allocate,allocated,26483,root/html602/TEvePointSetProjected.html,https://root.cern,https://root.cern/root/html602/TEvePointSetProjected.html,2,['allocate'],['allocated']
Energy Efficiency," Streamer method; 6078/// kInstrumented: the class does have a Streamer method; 6079/// kExternal: the class has a free standing way of streaming itself; 6080/// kEmulatedStreamer: the class is missing its shared library.; 6081/// ~~~; 6082///; 6083/// Implementation note: the data member fProperty has the value -1; 6084/// until it is initialized.; 6085 ; 6086Long_t TClass::Property() const; 6087{; 6088 // Check if we can return without taking the lock,; 6089 // this is valid since fProperty is atomic and set as; 6090 // the last operation before return.; 6091 if (fProperty!=(-1)) return fProperty;; 6092 ; 6093 R__LOCKGUARD(gInterpreterMutex);; 6094 ; 6095 // Check if another thread set fProperty while we; 6096 // were waiting.; 6097 if (fProperty!=(-1)) return fProperty;; 6098 ; 6099 // Avoid asking about the class when it is still building; 6100 if (TestBit(kLoading)) return fProperty;; 6101 ; 6102 // When called via TMapFile (e.g. Update()) make sure that the dictionary; 6103 // gets allocated on the heap and not in the mapped file.; 6104 TMmallocDescTemp setreset;; 6105 ; 6106 TClass *kl = const_cast<TClass*>(this);; 6107 ; 6108 kl->fStreamerType = TClass::kDefault;; 6109 kl->fStreamerImpl = &TClass::StreamerDefault;; 6110 ; 6111 if (InheritsFrom(TObject::Class())) {; 6112 kl->SetBit(kIsTObject);; 6113 ; 6114 // Is it DIRECT inheritance from TObject?; 6115 Int_t delta = kl->GetBaseClassOffsetRecurse(TObject::Class());; 6116 if (delta==0) kl->SetBit(kStartWithTObject);; 6117 ; 6118 kl->fStreamerType = kTObject;; 6119 kl->fStreamerImpl = &TClass::StreamerTObject;; 6120 }; 6121 ; 6122 if (HasInterpreterInfo()) {; 6123 ; 6124 // This code used to use ClassInfo_Has|IsValidMethod but since v6; 6125 // they return true if the routine is defined in the class or any of; 6126 // its parent. We explicitly want to know whether the function is; 6127 // defined locally.; 6128 if (!const_cast<TClass*>(this)->GetClassMethodWithPrototype(""Streamer"",""TBuffer&"",kFALSE)) {; 6129 ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TClass_8cxx_source.html:234738,allocate,allocated,234738,doc/v632/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/TClass_8cxx_source.html,1,['allocate'],['allocated']
Energy Efficiency," Streamer method; 6145/// kInstrumented: the class does have a Streamer method; 6146/// kExternal: the class has a free standing way of streaming itself; 6147/// kEmulatedStreamer: the class is missing its shared library.; 6148/// ~~~; 6149///; 6150/// Implementation note: the data member fProperty has the value -1; 6151/// until it is initialized.; 6152 ; 6153Long_t TClass::Property() const; 6154{; 6155 // Check if we can return without taking the lock,; 6156 // this is valid since fProperty is atomic and set as; 6157 // the last operation before return.; 6158 if (fProperty!=(-1)) return fProperty;; 6159 ; 6160 R__LOCKGUARD(gInterpreterMutex);; 6161 ; 6162 // Check if another thread set fProperty while we; 6163 // were waiting.; 6164 if (fProperty!=(-1)) return fProperty;; 6165 ; 6166 // Avoid asking about the class when it is still building; 6167 if (TestBit(kLoading)) return fProperty;; 6168 ; 6169 // When called via TMapFile (e.g. Update()) make sure that the dictionary; 6170 // gets allocated on the heap and not in the mapped file.; 6171 TMmallocDescTemp setreset;; 6172 ; 6173 TClass *kl = const_cast<TClass*>(this);; 6174 ; 6175 kl->fStreamerType = TClass::kDefault;; 6176 kl->fStreamerImpl = &TClass::StreamerDefault;; 6177 ; 6178 if (InheritsFrom(TObject::Class())) {; 6179 kl->SetBit(kIsTObject);; 6180 ; 6181 // Is it DIRECT inheritance from TObject?; 6182 Int_t delta = kl->GetBaseClassOffsetRecurse(TObject::Class());; 6183 if (delta==0) kl->SetBit(kStartWithTObject);; 6184 ; 6185 kl->fStreamerType = kTObject;; 6186 kl->fStreamerImpl = &TClass::StreamerTObject;; 6187 }; 6188 ; 6189 if (HasInterpreterInfo()) {; 6190 ; 6191 // This code used to use ClassInfo_Has|IsValidMethod but since v6; 6192 // they return true if the routine is defined in the class or any of; 6193 // its parent. We explicitly want to know whether the function is; 6194 // defined locally.; 6195 if (!const_cast<TClass*>(this)->GetClassMethodWithPrototype(""Streamer"",""TBuffer&"",kFALSE)) {; 6196 ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClass_8cxx_source.html:237489,allocate,allocated,237489,doc/master/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TClass_8cxx_source.html,1,['allocate'],['allocated']
Energy Efficiency," T > &v);  . Additional Inherited Members;  Protected Member Functions inherited from ROOT::Detail::VecOps::RVecImpl< T >;  RVecImpl (unsigned N);  ;  Protected Member Functions inherited from ROOT::Internal::VecOps::SmallVectorTemplateBase< T, bool >;  SmallVectorTemplateBase (size_t Size);  ; void grow (size_t MinSize=0);  Grow the allocated memory (without initializing new elements), doubling the size of the allocated memory. ;  ;  Protected Member Functions inherited from ROOT::Internal::VecOps::SmallVectorTemplateCommon< T >;  SmallVectorTemplateCommon (size_t Size);  ; void grow_pod (size_t MinSize, size_t TSize);  ; bool isSmall () const;  Return true if this is a smallvector which has not had dynamic memory allocated for it. ;  ; void resetToSmall ();  Put this vector in a state of being small. ;  ;  Protected Member Functions inherited from ROOT::Internal::VecOps::SmallVectorBase;  SmallVectorBase ()=delete;  ;  SmallVectorBase (void *FirstEl, size_t TotalCapacity);  ; void grow_pod (void *FirstEl, size_t MinSize, size_t TSize);  This is an implementation of the grow() method which only works on POD-like data types and is out of line to reduce code duplication. ;  ; bool Owns () const;  If false, the RVec is in ""memory adoption"" mode, i.e. it is acting as a view on a memory buffer it does not own. ;  ;  Static Protected Member Functions inherited from ROOT::Internal::VecOps::SmallVectorTemplateBase< T, bool >; static void destroy_range (T *S, T *E);  ; template<typename It1 , typename It2 > ; static void uninitialized_copy (It1 I, It1 E, It2 Dest);  Copy the range [I, E) onto the uninitialized memory starting with ""Dest"", constructing elements as needed. ;  ; template<typename It1 , typename It2 > ; static void uninitialized_move (It1 I, It1 E, It2 Dest);  Move the range [I, E) into the uninitialized memory starting with ""Dest"", constructing elements as needed. ;  ;  Static Protected Member Functions inherited from ROOT::Internal::VecOps::SmallVectorBase; st",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1VecOps_1_1RVec.html:18808,reduce,reduce,18808,doc/v632/classROOT_1_1VecOps_1_1RVec.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1VecOps_1_1RVec.html,2,['reduce'],['reduce']
Energy Efficiency," TBranchElement *sub = (TBranchElement*) fBranches[i];; 4846 sub->ResetInitInfo(true);; 4847 }; 4848 }; 4849}; 4850 ; 4851////////////////////////////////////////////////////////////////////////////////; 4852/// Point this branch at an object.; 4853///; 4854/// For a sub-branch, addr is a pointer to the branch object.; 4855///; 4856/// For a top-level branch the meaning of addr is as follows:; 4857///; 4858/// If addr is zero, then we allocate a branch object; 4859/// internally and the branch is the owner of the allocated; 4860/// object, not the caller. However the caller may obtain; 4861/// a pointer to the branch object with GetObject().; 4862/// The pointer is reset to zero (nullptr) when the relevant; 4863/// branch object is destroyed.; 4864///; 4865/// Example:; 4866/// ~~~ {.cpp}; 4867/// branch->SetAddress(0);; 4868/// Event* event = branch->GetObject();; 4869/// ... Do some work.; 4870/// ~~~; 4871/// If addr is not zero, but the pointer addr points at is; 4872/// zero, then we allocate a branch object and set the passed; 4873/// pointer to point at the allocated object. The caller; 4874/// owns the allocated object and is responsible for deleting; 4875/// it when it is no longer needed.; 4876///; 4877/// Example:; 4878/// ~~~ {.cpp}; 4879/// Event* event = 0;; 4880/// branch->SetAddress(&event);; 4881/// ... Do some work.; 4882/// delete event;; 4883/// event = 0;; 4884/// ~~~; 4885/// If addr is not zero and the pointer addr points at is; 4886/// also not zero, then the caller has allocated a branch; 4887/// object and is asking us to use it. The caller owns it; 4888/// and must delete it when it is no longer needed.; 4889///; 4890/// Example:; 4891/// ~~~ {.cpp}; 4892/// Event* event = new Event();; 4893/// branch->SetAddress(&event);; 4894/// ... Do some work.; 4895/// delete event;; 4896/// event = 0;; 4897/// ~~~; 4898/// These rules affect users of TTree::Branch(),; 4899/// TTree::SetBranchAddress(), and TChain::SetBranchAddress(); 4900/// as well b",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TBranchElement_8cxx_source.html:180200,allocate,allocate,180200,doc/master/TBranchElement_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TBranchElement_8cxx_source.html,2,['allocate'],"['allocate', 'allocated']"
Energy Efficiency," TCudaDeviceReference< AFloat > operator() (size_t i, size_t j, size_t k, size_t l) const;  ; TCudaTensor & operator= (const TCudaTensor &)=default;  ; TCudaTensor & operator= (TCudaTensor &&)=default;  ; TCudaMatrix< AFloat > operator[] (size_t i) const;  ; void Print (const char *name=""Tensor"", bool truncate=false) const;  ; void PrintShape (const char *name=""Tensor"") const;  ; TCudaTensor< AFloat > Reshape (const Shape_t &newShape) const;  ; void ReshapeInPlace (const Shape_t &newShape);  ; void SetComputeStream (cudaStream_t stream);  ; void SetConstVal (const AFloat constVal);  ; void SetTensorDescriptor ();  ; void Zero ();  . Static Public Member Functions; static std::vector< std::size_t > ComputeStridesFromShape (const std::vector< std::size_t > &shape, bool rowmajorLayout);  This information is needed for the multi-dimensional indexing. ;  . Private Member Functions; void InitializeCuda ();  Initializes all shared devices resource and makes sure that a sufficient number of curand states are allocated on the device and initialized as well as that the one-vector for the summation over columns has the right size. ;  ; void InitializeCurandStates ();  . Private Attributes; int fDevice;  Device associated with current tensor instance. ;  ; TCudaDeviceBuffer< AFloat > fElementBuffer;  ; MemoryLayout fMemoryLayout;  ; size_t fNDim;  Dimension of the tensor (first dimension is the batch size, second is the no. channels) ;  ; Shape_t fShape;  The shape vector (size of dimensions) needs to be ordered as no. ;  ; size_t fSize;  No. of elements. ;  ; int fStreamIndx;  Cuda stream associated with current instance. ;  ; Shape_t fStrides;  Strides between tensor dimensions (always assume dense, non overlapping tensor) ;  ; std::shared_ptr< TensorDescriptor > fTensorDescriptor;  . Static Private Attributes; static std::vector< int > fInstances;  For each GPU device keep the CUDA streams in which tensors are used. ;  . #include <TMVA/DNN/Architectures/Cuda/CudaTensor.h>; M",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TCudaTensor.html:4324,allocate,allocated,4324,doc/master/classTMVA_1_1DNN_1_1TCudaTensor.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TCudaTensor.html,1,['allocate'],['allocated']
Energy Efficiency," TF1 class has several additions for its use from Python, which are also available in its subclasses TF2 and TF3.; First, TF1 instance can be initialized with user-defined Python functions. Given a generic Python callable, the following can performed:; def func(x: numpy.ndarray, pars: numpy.ndarray) -> float:; return pars[0] * x[0] * x[0] + x[1] * pars[0]; ; my_func = ROOT.TF1(""my_func"", func, -10, 10, npar=2, ndim=2); Second, after performing the initialisation with a Python functor, the TF1 instance can be evaluated using the Pythonized TF1::EvalPar function. The pythonization allows passing in 1D(single set of x variables) or 2D(a dataset) NumPy arrays.; The following example shows how we can create a TF1 instance with a Python function and evaluate it on a dataset:; import ROOT; import math; import numpy as np; ; def pyf_tf1_coulomb(x, p):; return p[1] * x[0] * x[1] / (p[0]**2) * math.exp(-p[2] / p[0]); ; rtf1_coulomb = ROOT.TF1(""my_func"", pyf_tf1_coulomb, -10, 10, ndims = 2, npars = 3); ; # x dataset: 5 pairs of particle charges; x = np.array([; [1.0, 10, 2.0],; [1.5, 10, 2.5],; [2.0, 10, 3.0],; [2.5, 10, 3.5],; [3.0, 10, 4.0]; ]); ; params = np.array([; [1.0], # Distance between charges r; [8.99e9], # Coulomb constant k (in N·m²/C²); [0.1] # Additional factor for modulation; ]); ; # Slice to avoid the dummy column of 10's; res = rtf1_coulomb.EvalPar(x[:, ::2], params). Definition at line 233 of file TF1.h. Classes; struct  TF1FunctorPointer;  ; struct  TF1FunctorPointerImpl;  . Public Types; enum class  EAddToList { kDefault; , kAdd; , kNo; };  Add to list behavior. More...;  ; enum  EStatusBits { kNotGlobal = (1ULL << ( 10 )); , kNotDraw = (1ULL << ( 9 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; en",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTF1.html:9060,charge,charges,9060,doc/master/classTF1.html,https://root.cern,https://root.cern/doc/master/classTF1.html,1,['charge'],['charges']
Energy Efficiency," TF1Parameters::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 130 of file TF1.h. ◆ DeclFileName(). static const char * TF1Parameters::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 130 of file TF1.h. ◆ GetParameter() [1/2]. Double_t TF1Parameters::GetParameter ; (; const char * ; name); const. inline . Definition at line 84 of file TF1.h. ◆ GetParameter() [2/2]. Double_t TF1Parameters::GetParameter ; (; Int_t ; iparam); const. inline . Definition at line 80 of file TF1.h. ◆ GetParameters(). const Double_t * TF1Parameters::GetParameters ; (; ); const. inline . Definition at line 88 of file TF1.h. ◆ GetParName(). const char * TF1Parameters::GetParName ; (; Int_t ; iparam); const. inline . Definition at line 99 of file TF1.h. ◆ GetParNumber(). Int_t TF1Parameters::GetParNumber ; (; const char * ; name); const. Returns the parameter number given a name not very efficient but list of parameters is typically small could use a map if needed. ; Definition at line 3846 of file TF1.cxx. ◆ IsA(). virtual TClass * TF1Parameters::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Definition at line 130 of file TF1.h. ◆ operator=(). TF1Parameters & TF1Parameters::operator= ; (; const TF1Parameters & ; rhs). inline . Definition at line 70 of file TF1.h. ◆ ParamsVec(). const std::vector< double > & TF1Parameters::ParamsVec ; (; ); const. inline . Definition at line 92 of file TF1.h. ◆ SetParameter() [1/2]. void TF1Parameters::SetParameter ; (; const char * ; name, . Double_t ; value . ). inline . Definition at line 118 of file TF1.h. ◆ SetParameter() [2/2]. void TF1Parameters::SetParameter ; (; Int_t ; iparam, . Double_t ; value . ). inline . Definition at line 106 of file TF1.h. ◆ SetParameters() [1/2]. void TF1Parameters::SetParameters ; (; const Double_t * ; params). inline . Definition at line 111 of file TF1.h. ◆ SetParameters() [2/2]. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTF1Parameters.html:3845,efficient,efficient,3845,doc/master/classTF1Parameters.html,https://root.cern,https://root.cern/doc/master/classTF1Parameters.html,1,['efficient'],['efficient']
Energy Efficiency," TGenPhaseSpace.h. ◆ GetWtMax(). Double_t TGenPhaseSpace::GetWtMax ; (; ); const. inline . Definition at line 37 of file TGenPhaseSpace.h. ◆ IsA(). TClass * TGenPhaseSpace::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 39 of file TGenPhaseSpace.h. ◆ operator=(). TGenPhaseSpace & TGenPhaseSpace::operator= ; (; const TGenPhaseSpace & ; gen). Assignment operator. ; Definition at line 76 of file TGenPhaseSpace.cxx. ◆ PDK(). Double_t TGenPhaseSpace::PDK ; (; Double_t ; a, . Double_t ; b, . Double_t ; c . ). private . The PDK function. ; Definition at line 35 of file TGenPhaseSpace.cxx. ◆ SetDecay(). Bool_t TGenPhaseSpace::SetDecay ; (; TLorentzVector & ; P, . Int_t ; nt, . const Double_t * ; mass, . Option_t * ; opt = """" . ). Input: . TLorentzVector &P: decay particle (Momentum, Energy units are Gev/C, GeV); Int_t nt: number of decay products; Double_t *mass: array of decay product masses; Option_t *opt: default -> constant cross section ""Fermi"" -> Fermi energy dependence Return value:; kTRUE: the decay is permitted by kinematics; kFALSE: the decay is forbidden by kinematics . Definition at line 193 of file TGenPhaseSpace.cxx. ◆ Streamer(). void TGenPhaseSpace::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TGenPhaseSpace::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 39 of file TGenPhaseSpace.h. Member Data Documentation. ◆ fBeta. Double_t TGenPhaseSpace::fBeta[3]. private . Definition at line 19 of file TGenPhaseSpace.h. ◆ fDecPro. TLorentzVector TGenPhaseSpace::fDecPro[18]. private . Definition at line 22 of file TGenPhaseSpace.h. ◆ fMass. Double_t TGenPhaseSpace::fMass[18]. private . Definition at line 18 of file TGenPhaseSpace.h. ◆ fNt. Int_t TGenPhaseSpace::fNt. private . Definition at line 17 of file TGenPhaseSpace.h. ◆ fTeCmTm. Double_t TG",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGenPhaseSpace.html:14287,energy,energy,14287,doc/master/classTGenPhaseSpace.html,https://root.cern,https://root.cern/doc/master/classTGenPhaseSpace.html,1,['energy'],['energy']
Energy Efficiency," TGeoHelix(); TGeoHelix(Double_t curvature, Double_t step, Int_t charge = 1); virtual~TGeoHelix(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; Double_tComputeSafeStep(Double_t epsil = 1E-6) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoHelix.html:1449,charge,charge,1449,root/html534/TGeoHelix.html,https://root.cern,https://root.cern/root/html534/TGeoHelix.html,1,['charge'],['charge']
Energy Efficiency," TGeoHelix(); TGeoHelix(const TGeoHelix&); TGeoHelix(Double_t curvature, Double_t step, Int_t charge = 1); virtual~TGeoHelix(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; Double_tComputeSafeStep(Double_t epsil = 1E-6) const; virtual voidTObject::Copy(TObject& object) const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoHelix.html:1478,charge,charge,1478,root/html528/TGeoHelix.html,https://root.cern,https://root.cern/root/html528/TGeoHelix.html,3,['charge'],['charge']
Energy Efficiency," TH1.cxx:9707; TH1S::AddBinContentvoid AddBinContent(Int_t bin) overrideIncrement bin content by 1.Definition TH1.cxx:9724; TH1TH1 is the base class of all histogram classes in ROOT.Definition TH1.h:59; TH1::~TH1~TH1() overrideHistogram default destructor.Definition TH1.cxx:643; TH1::SetLabelFontvirtual void SetLabelFont(Style_t font=62, Option_t *axis=""X"")Set font number used to draw axis labels.Definition Haxis.cxx:249; TH1::SetErrorvirtual void SetError(const Double_t *error)Replace bin errors by values in array error.Definition TH1.cxx:8951; TH1::SetDirectoryvirtual void SetDirectory(TDirectory *dir)By default, when a histogram is created, it is added to the list of histogram objects in the current ...Definition TH1.cxx:8937; TH1::FitPanelvirtual void FitPanel()Display a panel with all histogram fit options.Definition TH1.cxx:4284; TH1::fBufferDouble_t * fBuffer[fBufferSize] entry bufferDefinition TH1.h:108; TH1::AutoP2FindLimitsvirtual Int_t AutoP2FindLimits(Double_t min, Double_t max)Buffer-based estimate of the histogram range using the power of 2 algorithm.Definition TH1.cxx:1343; TH1::SetStatOverflowsvoid SetStatOverflows(EStatOverflows statOverflows)See GetStatOverflows for more information.Definition TH1.h:417; TH1::GetEffectiveEntriesvirtual Double_t GetEffectiveEntries() constNumber of effective entries of the histogram.Definition TH1.cxx:4448; TH1::GetObjectInfochar * GetObjectInfo(Int_t px, Int_t py) const overrideRedefines TObject::GetObjectInfo.Definition TH1.cxx:4502; TH1::Smoothvirtual void Smooth(Int_t ntimes=1, Option_t *option="""")Smooth bin contents of this histogram.Definition TH1.cxx:6879; TH1::SetNormFactorvirtual void SetNormFactor(Double_t factor=1)Definition TH1.h:410; TH1::GetBinCentervirtual Double_t GetBinCenter(Int_t bin) constReturn bin center for 1D histogram.Definition TH1.cxx:9141; TH1::Rebuildvirtual void Rebuild(Option_t *option="""")Using the current bin info, recompute the arrays for contents and errors.Definition TH1.cxx:7087; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH1_8h_source.html:51708,power,power,51708,doc/master/TH1_8h_source.html,https://root.cern,https://root.cern/doc/master/TH1_8h_source.html,1,['power'],['power']
Energy Efficiency," THnF (typedef for THnT<Float_t>): bin content held by a Float_t,; 141 THnL (typedef for THnT<Long64_t>): bin content held by a Long64_t,; 142 THnI (typedef for THnT<Int_t>): bin content held by an Int_t,; 143 THnS (typedef for THnT<Short_t>): bin content held by a Short_t,; 144 THnC (typedef for THnT<Char_t>): bin content held by a Char_t,; 145 ; 146They take name and title, the number of dimensions, and for each dimension; 147the number of bins, the minimal, and the maximal value on the dimension's; 148axis. A TH2F h(""h"",""h"",10, 0., 10., 20, -5., 5.) would correspond to; 149 ; 150 Int_t bins[2] = {10, 20};; 151 Double_t xmin[2] = {0., -5.};; 152 Double_t xmax[2] = {10., 5.};; 153 THnF hn(""hn"", ""hn"", 2, bins, xmin, xmax);; 154 ; 155## Filling; 156A THn is filled just like a regular histogram, using; 157THn::Fill(x, weight), where x is a n-dimensional Double_t value.; 158To take errors into account, Sumw2() must be called before filling the; 159histogram.; 160Storage is allocated when the first bin content is stored.; 161 ; 162## Projections; 163The dimensionality of a THn can be reduced by projecting it to; 1641, 2, 3, or n dimensions, which can be represented by a TH1, TH2, TH3, or; 165a THn. See the Projection() members. To only project parts of the; 166histogram, call; 167 ; 168 hn->GetAxis(12)->SetRange(from_bin, to_bin);; 169 ; 170## Conversion from other histogram classes; 171The static factory function THn::CreateHn() can be used to create a THn; 172from a TH1, TH2, TH3, THnSparse and (for copying) even from a THn. The; 173created THn will have compatble storage type, i.e. calling CreateHn() on; 174a TH2F will create a THnF.; 175*/; 176 ; 177ClassImp(THn);; 178 ; 179////////////////////////////////////////////////////////////////////////////////; 180/// Construct a THn.; 181 ; 182THn::THn(const char* name, const char* title,; 183 Int_t dim, const Int_t* nbins,; 184 const Double_t* xmin, const Double_t* xmax):; 185 THnBase(name, title, dim, nbins, xmin, xmax),",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THn_8cxx_source.html:5961,allocate,allocated,5961,doc/master/THn_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THn_8cxx_source.html,1,['allocate'],['allocated']
Energy Efficiency," THnSparse vs TH1/2/3/nF for different numbers of dimensions and bins per dimension ;  statsEditing.C Edit statistics box ;  testSmooth.C Histogram smoothing ;  th2polyBoxes.C This tutorial illustrates how to create an histogram with polygonal bins (TH2Poly) ;  th2polyEurope.C This tutorial illustrates how to create an histogram with polygonal bins (TH2Poly), fill it and draw it ;  th2polyHoneycomb.C This tutorial illustrates how to create an histogram with hexagonal bins (TH2Poly) ;  th2polyUSA.C This tutorial illustrates how to create an histogram with polygonal bins (TH2Poly), fill it and draw it using the col option ;  thstack2palettecolor.C Palette coloring for 2D histograms' stack is activated thanks to the option PFC (Palette Fill Color) ;  thstackpalettecolor.C Palette coloring for histograms' stack is activated thanks to the options PFC (Palette Fill Color), PLC (Palette Line Color) and AMC (Palette Marker Color) ;  tprofile2polyRealistic.C Different charges depending on region ;  tprofile2polyRealisticModuleError.C Simulate faulty detector panel w.r.t ;  transpad.C Example of a canvas showing two histograms with different scales ;  twoscales.C Example of macro illustrating how to superimpose two histograms with different scales in the ""same"" pad ;  twoscales.py Example of macro illustrating how to superimpose two histograms with different scales in the ""same"" pad ;  xyplot.C Example showing how to produce a plot with an orthogonal axis system centered at (0,0) ;  ► histfactory;  example.C;  example.py;  makeExample.C;  makeQuickModel.py;  ModifyInterpolation.C;  ► html;  MakeTutorials.C;  ► http;  custom.CThis program creates and fills one and two dimensional histogram Macro used to demonstrate usage of custom HTML page in custom.htm One can use plain JavaScript to assign different actions with HTML buttons ;  histfitserver.CThis program demonstrates simultaneous update of histogram and fitted function ;  httpaccess.CThis program demonstrates access control",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v612/files.html:125570,charge,charges,125570,doc/v612/files.html,https://root.cern,https://root.cern/doc/v612/files.html,3,['charge'],['charges']
Energy Efficiency," THnSparse with ""dim"" dimensions,; with chunksize as the size of the chunks.; ""nbins"" holds the number of bins for each dimension;; ""xmin"" and ""xmax"" the minimal and maximal value for each dimension.; The arrays ""xmin"" and ""xmax"" can be NULL; in that case SetBinEdges(); must be called for each dimension. ~THnSparse(); Destruct a THnSparse. void AddBinContent(Long64_t bin, Double_t v = 1.); Add ""v"" to the content of bin with index ""bin"". THnSparseArrayChunk* AddChunk(); Create a new chunk of bin content. void InitStorage(Int_t* nbins, Int_t chunkSize); Initialize the storage of a histogram created via Init(). void FillExMap(); We have been streamed; set up fBins. void Reserve(Long64_t nbins); Initialize storage for nbins. Long64_t GetBin(const Double_t* x, Bool_t allocate = kTRUE); Get the bin index for the n dimensional tuple x,; allocate one if it doesn't exist yet and ""allocate"" is true. Long64_t GetBin(const char* name[], Bool_t allocate /* = kTRUE */); Get the bin index for the n dimensional tuple addressed by ""name"",; allocate one if it doesn't exist yet and ""allocate"" is true. Long64_t GetBin(const Int_t* idx, Bool_t allocate = kTRUE); Get the bin index for the n dimensional coordinates coord,; allocate one if it doesn't exist yet and ""allocate"" is true. Double_t GetBinContent(Long64_t bin, Int_t* idx = 0) const; Return the content of the filled bin number ""idx"".; If coord is non-null, it will contain the bin's coordinates for each axis; that correspond to the bin. Double_t GetBinError2(Long64_t linidx) const; Get square of the error of bin addressed by linidx as. If errors are not enabled (via Sumw2() or CalculateErrors()); return contents. Long64_t GetBinIndexForCurrentBin(Bool_t allocate); Return the index for fCurrentBinIndex.; If it doesn't exist then return -1, or allocate a new bin if allocate is set. THnSparseCompactBinCoord* GetCompactCoord() const; Return THnSparseCompactBinCoord object. Double_t GetSparseFractionBins() const; Return the amount of fil",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/THnSparse.html:18297,allocate,allocate,18297,root/html602/THnSparse.html,https://root.cern,https://root.cern/root/html602/THnSparse.html,6,['allocate'],['allocate']
Energy Efficiency," THnSparseArrayChunk::THnSparseArrayChunkTHnSparseArrayChunk()Definition THnSparse_Internal.h:37; THnSparseArrayChunk::fCoordinatesSizeInt_t fCoordinatesSizeSize of the bin coordinate buffer.Definition THnSparse_Internal.h:46; THnSparseArrayChunk::fSingleCoordinateSizeInt_t fSingleCoordinateSizeSize of a single bin coordinate.Definition THnSparse_Internal.h:45; THnSparseArrayChunk::Sumw2void Sumw2()Turn on support of errors.Definition THnSparse.cxx:480; THnSparseArrayChunk::fCoordinatesChar_t * fCoordinates[fCoordinatesSize] compact bin coordinate bufferDefinition THnSparse_Internal.h:47; THnSparseArrayChunk::fContentTArray * fContentBin content.Definition THnSparse_Internal.h:48; THnSparseArrayChunk::GetEntriesInt_t GetEntries() constDefinition THnSparse_Internal.h:58; THnSparseArrayChunk::AddBinvoid AddBin(Int_t idx, const Char_t *idxbuf)Create a new bin in this chunk.Definition THnSparse.cxx:450; THnSparseArrayChunk::fCoordinateAllocationSizeInt_t fCoordinateAllocationSize! Size of the allocated coordinate buffer; -1 means none or fCoordinatesSizeDefinition THnSparse_Internal.h:44; THnSparseCompactBinCoordTHnSparseCompactBinCoord is a class used by THnSparse internally.Definition THnSparse.cxx:351; THnSparseCompactBinCoord::THnSparseCompactBinCoordTHnSparseCompactBinCoord(Int_t dim, const Int_t *nbins)Initialize a THnSparseCompactBinCoord object with ""dim"" dimensions and ""bins"" holding the number of b...Definition THnSparse.cxx:391; THnSparseCompactBinCoord::GetHashULong64_t GetHash() constDefinition THnSparse.cxx:357; THnSparseCompactBinCoord::GetCoordInt_t * GetCoord()Definition THnSparse.cxx:355; THnSparseCompactBinCoord::GetBufferconst Char_t * GetBuffer() constDefinition THnSparse.cxx:356; THnSparseCompactBinCoord::~THnSparseCompactBinCoord~THnSparseCompactBinCoord()destruct a THnSparseCompactBinCoordDefinition THnSparse.cxx:406; THnSparseCompactBinCoord::fCoordBufferChar_t * fCoordBufferDefinition THnSparse.cxx:378; THnSparseCompactBinCoord::THnSparseCompac",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THnSparse_8cxx_source.html:42597,allocate,allocated,42597,doc/master/THnSparse_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THnSparse_8cxx_source.html,1,['allocate'],['allocated']
Energy Efficiency," TMCParticle(); TMCParticle(const TMCParticle&); TMCParticle(Int_t kS, Int_t kF, Int_t parent, Int_t firstchild, Int_t lastchild, Float_t px, Float_t py, Float_t pz, Float_t energy, Float_t mass, Float_t vx, Float_t vy, Float_t vz, Float_t time, Float_t lifetime); virtual~TMCParticle(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMCParticle.html:530,energy,energy,530,root/html528/TMCParticle.html,https://root.cern,https://root.cern/root/html528/TMCParticle.html,3,['energy'],['energy']
Energy Efficiency, TMVA::MethodBDT::fLowSigCut. private . Definition at line 284 of file MethodBDT.h. ◆ fMaxDepth. UInt_t TMVA::MethodBDT::fMaxDepth. private . max depth ; Definition at line 242 of file MethodBDT.h. ◆ fMinLinCorrForFisher. Double_t TMVA::MethodBDT::fMinLinCorrForFisher. private . the minimum linear correlation between two variables demanded for use in fisher criterium in node splitting ; Definition at line 237 of file MethodBDT.h. ◆ fMinNodeEvents. Int_t TMVA::MethodBDT::fMinNodeEvents. private . min number of events in node ; Definition at line 231 of file MethodBDT.h. ◆ fMinNodeSize. Float_t TMVA::MethodBDT::fMinNodeSize. private . min percentage of training events in node ; Definition at line 232 of file MethodBDT.h. ◆ fMinNodeSizeS. TString TMVA::MethodBDT::fMinNodeSizeS. private . string containing min percentage of training events in node ; Definition at line 233 of file MethodBDT.h. ◆ fMonitorNtuple. TTree* TMVA::MethodBDT::fMonitorNtuple. private . monitoring ntuple ; Definition at line 264 of file MethodBDT.h. ◆ fNCuts. Int_t TMVA::MethodBDT::fNCuts. private . grid used in cut applied in node splitting ; Definition at line 235 of file MethodBDT.h. ◆ fNegWeightTreatment. TString TMVA::MethodBDT::fNegWeightTreatment. private . variable that holds the option of how to treat negative event weights in training ; Definition at line 255 of file MethodBDT.h. ◆ fNNodesMax. UInt_t TMVA::MethodBDT::fNNodesMax. private . max # of nodes ; Definition at line 241 of file MethodBDT.h. ◆ fNodePurityLimit. Double_t TMVA::MethodBDT::fNodePurityLimit. private . purity limit for sig/bkg nodes ; Definition at line 240 of file MethodBDT.h. ◆ fNoNegWeightsInTraining. Bool_t TMVA::MethodBDT::fNoNegWeightsInTraining. private . ignore negative event weights in the training ; Definition at line 256 of file MethodBDT.h. ◆ fNTrees. Int_t TMVA::MethodBDT::fNTrees. private . number of decision trees requested ; Definition at line 211 of file MethodBDT.h. ◆ fPairNegWeightsGlobal. Bool_t TMV,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html:66090,monitor,monitoring,66090,doc/master/classTMVA_1_1MethodBDT.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html,1,['monitor'],['monitoring']
Energy Efficiency," TMatrixTSym<Element> &TMatrixTSym<Element> Invert(Double_t* det = 0); Invert the matrix and calculate its determinant; Notice that the LU decomposition is used instead of Bunch-Kaufman; Bunch-Kaufman guarantees a symmetric inverted matrix but is slower than LU .; The user can access Bunch-Kaufman through the TDecompBK class . TMatrixTSym<Element> &TMatrixTSym<Element> InvertFast(Double_t* det = 0); Invert the matrix and calculate its determinant. TMatrixTSym<Element> &TMatrixTSym<Element> Transpose(const TMatrixTSym<double>& source); Transpose a matrix. TMatrixTSym<Element> &TMatrixTSym<Element> Rank1Update(const TVectorT<double>& v, double alpha = 1.0); Perform a rank 1 operation on the matrix:; A += alpha * v * v^T. TMatrixTSym<Element> &TMatrixTSym<Element> Similarity(const TMatrixT<Element> &b); Calculate B * (*this) * B^T , final matrix will be (nrowsb x nrowsb); This is a similarity transform when B is orthogonal . It is more; efficient than applying the actual multiplication because this; routine realizes that the final matrix is symmetric . TMatrixTSym<Element> &TMatrixTSym<Element> Similarity(const TMatrixTSym<Element> &b); Calculate B * (*this) * B^T , final matrix will be (nrowsb x nrowsb); This is a similarity transform when B is orthogonal . It is more; efficient than applying the actual multiplication because this; routine realizes that the final matrix is symmetric . Element TMatrixTSym<Element> Similarity(const TVectorT<double>& v) const; Calculate scalar v * (*this) * v^T. TMatrixTSym<Element> &TMatrixTSym<Element> SimilarityT(const TMatrixT<double>& n); Calculate B^T * (*this) * B , final matrix will be (ncolsb x ncolsb); It is more efficient than applying the actual multiplication because this; routine realizes that the final matrix is symmetric . TMatrixTSym<Element> &TMatrixTSym<Element> operator=(const TMatrixTSym<Element> &source). TMatrixTSym<Element> &TMatrixTSym<Element> operator=(const TMatrixTSymLazy<Element> &lazy_constructor). TMatrixT",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMatrixTSym_double_.html:18073,efficient,efficient,18073,root/html528/TMatrixTSym_double_.html,https://root.cern,https://root.cern/root/html528/TMatrixTSym_double_.html,4,['efficient'],['efficient']
Energy Efficiency," TObject and if the start of the TObject parts is at the very beginning of the objects. ;  ; Bool_t IsSyntheticPair () const;  ; Bool_t IsTObject () const;  Return kTRUE is the class inherits from TObject. ;  ; Bool_t IsVersioned () const;  ; void ls (Option_t *opt="""") const override;  The ls function lists the contents of a class on stdout. ;  ; void MakeCustomMenuList ();  Makes a customizable version of the popup menu list, i.e. ;  ; Bool_t MatchLegacyCheckSum (UInt_t checksum) const;  Return true if the checksum passed as argument is one of the checksum value produced by the older checksum calculation algorithm. ;  ; void Move (void *arenaFrom, void *arenaTo) const;  Register the fact that an object was moved from the memory location 'arenaFrom' to the memory location 'arenaTo'. ;  ; void * New (ENewType defConstructor=kClassNew, Bool_t quiet=kFALSE) const;  Return a pointer to a newly allocated object of this class. ;  ; void * New (void *arena, ENewType defConstructor=kClassNew) const;  Return a pointer to a newly allocated object of this class. ;  ; void * NewArray (Long_t nElements, ENewType defConstructor=kClassNew) const;  Return a pointer to a newly allocated array of objects of this class. ;  ; void * NewArray (Long_t nElements, void *arena, ENewType defConstructor=kClassNew) const;  Return a pointer to a newly allocated object of this class. ;  ; ObjectPtr NewObject (ENewType defConstructor=kClassNew, Bool_t quiet=kFALSE) const;  ; ObjectPtr NewObject (void *arena, ENewType defConstructor=kClassNew) const;  Return a pointer to a newly allocated object of this class. ;  ; ObjectPtr NewObjectArray (Long_t nElements, ENewType defConstructor=kClassNew) const;  Return a pointer to a newly allocated array of objects of this class. ;  ; ObjectPtr NewObjectArray (Long_t nElements, void *arena, ENewType defConstructor=kClassNew) const;  Return a pointer to a newly allocated object of this class. ;  ; virtual void PostLoadCheck ();  Do the initialization that can ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTClass.html:20159,allocate,allocated,20159,doc/v632/classTClass.html,https://root.cern,https://root.cern/doc/v632/classTClass.html,3,['allocate'],['allocated']
Energy Efficiency," TQpVar* step); Implements a version of Mehrotra starting point heuristic,; modified to ensure identical steps in the primal and dual variables. void DoMonitor(TQpDataBase* data, TQpVar* vars, TQpResidual* resids, Double_t alpha, Double_t sigma, Int_t i, Double_t mu, Int_t stop_code, Int_t level); Monitor progress / convergence aat each interior-point iteration. Int_t DoStatus(TQpDataBase* data, TQpVar* vars, TQpResidual* resids, Int_t i, Double_t mu, Int_t level); Tests for termination. Unless the user supplies a specific termination; routine, this method calls another method defaultStatus, which returns; a code indicating the current convergence status. Int_t DefStatus(TQpDataBase* data, TQpVar* vars, TQpResidual* resids, Int_t i, Double_t mu, Int_t level); Default status method. TQpSolverBase & operator=(const TQpSolverBase& source); Assignment operator. Int_t Solve(TQpDataBase* prob, TQpVar* iterate, TQpResidual* resids); alternative starting point heuristic: sets the; ""complementary"" variables to a large positive value; (based on the norm of the problem data) and the; remaining variables to zero. void DefMonitor(TQpDataBase* data, TQpVar* vars, TQpResidual* resids, Double_t alpha, Double_t sigma, Int_t i, Double_t mu, Int_t stop_code, Int_t level); perform monitor operation at each interior-point iteration. TQpLinSolverBase * GetLinearSystem(); default method for checking status. May be replaced; by a user-defined method. { return fSys; }. void SetMuTol(Double_t m); { fMutol = m; }. Double_t GetMuTol(); { return fMutol; }. void SetArTol(Double_t ar); { fArtol = ar; }. Double_t GetArTol(); { return fArtol; }. Double_t DataNorm(); { return fDnorm; }. » Author: Eddy Offermann May 2004 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/quadp:$Id$ » Last generated: 2015-03-14 16:48; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TQpSolverBase.html:9924,monitor,monitor,9924,root/html534/TQpSolverBase.html,https://root.cern,https://root.cern/root/html534/TQpSolverBase.html,1,['monitor'],['monitor']
Energy Efficiency," TQpVar* step); Implements a version of Mehrotra starting point heuristic,; modified to ensure identical steps in the primal and dual variables. void DoMonitor(TQpDataBase* data, TQpVar* vars, TQpResidual* resids, Double_t alpha, Double_t sigma, Int_t i, Double_t mu, Int_t stop_code, Int_t level); Monitor progress / convergence aat each interior-point iteration. Int_t DoStatus(TQpDataBase* data, TQpVar* vars, TQpResidual* resids, Int_t i, Double_t mu, Int_t level); Tests for termination. Unless the user supplies a specific termination; routine, this method calls another method defaultStatus, which returns; a code indicating the current convergence status. Int_t DefStatus(TQpDataBase* data, TQpVar* vars, TQpResidual* resids, Int_t i, Double_t mu, Int_t level); Default status method. TQpSolverBase & operator=(const TQpSolverBase& source); Assignment operator. Int_t Solve(TQpDataBase* prob, TQpVar* iterate, TQpResidual* resids); alternative starting point heuristic: sets the; ""complementary"" variables to a large positive value; (based on the norm of the problem data) and the; remaining variables to zero. void DefMonitor(TQpDataBase* data, TQpVar* vars, TQpResidual* resids, Double_t alpha, Double_t sigma, Int_t i, Double_t mu, Int_t stop_code, Int_t level); perform monitor operation at each interior-point iteration. TQpLinSolverBase * GetLinearSystem(); default method for checking status. May be replaced; by a user-defined method. { return fSys; }. void SetMuTol(Double_t m); { fMutol = m; }. Double_t GetMuTol(); { return fMutol; }. void SetArTol(Double_t ar); { fArtol = ar; }. Double_t GetArTol(); { return fArtol; }. Double_t DataNorm(); { return fDnorm; }. » Author: Eddy Offermann May 2004 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/quadp:$Id$ » Last generated: 2015-06-02 16:31; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TQpSolverBase.html:10593,monitor,monitor,10593,root/html604/TQpSolverBase.html,https://root.cern,https://root.cern/root/html604/TQpSolverBase.html,1,['monitor'],['monitor']
Energy Efficiency," TQpVar* step); Implements a version of Mehrotra starting point heuristic,; modified to ensure identical steps in the primal and dual variables. void DoMonitor(TQpDataBase* data, TQpVar* vars, TQpResidual* resids, Double_t alpha, Double_t sigma, Int_t i, Double_t mu, Int_t stop_code, Int_t level); Monitor progress / convergence aat each interior-point iteration. Int_t DoStatus(TQpDataBase* data, TQpVar* vars, TQpResidual* resids, Int_t i, Double_t mu, Int_t level); Tests for termination. Unless the user supplies a specific termination; routine, this method calls another method defaultStatus, which returns; a code indicating the current convergence status. Int_t DefStatus(TQpDataBase* data, TQpVar* vars, TQpResidual* resids, Int_t i, Double_t mu, Int_t level); Default status method. TQpSolverBase & operator=(const TQpSolverBase& source); Assignment operator. Int_t Solve(TQpDataBase* prob, TQpVar* iterate, TQpResidual* resids); alternative starting point heuristic: sets the; ""complementary"" variables to a large positive value; (based on the norm of the problem data) and the; remaining variables to zero. void DefMonitor(TQpDataBase* data, TQpVar* vars, TQpResidual* resids, Double_t alpha, Double_t sigma, Int_t i, Double_t mu, Int_t stop_code, Int_t level); perform monitor operation at each interior-point iteration. TQpLinSolverBase * GetLinearSystem(); default method for checking status. May be replaced; by a user-defined method. { return fSys; }. void SetMuTol(Double_t m); { fMutol = m; }. Double_t GetMuTol(); { return fMutol; }. void SetArTol(Double_t ar); { fArtol = ar; }. Double_t GetArTol(); { return fArtol; }. Double_t DataNorm(); { return fDnorm; }. » Author: Eddy Offermann May 2004 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/quadp:$Id$ » Last generated: 2015-06-30 15:29; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TQpSolverBase.html:10593,monitor,monitor,10593,root/html602/TQpSolverBase.html,https://root.cern,https://root.cern/root/html602/TQpSolverBase.html,1,['monitor'],['monitor']
Energy Efficiency," TSeqCollection::Merge, we no longer delete the object in the case where the original collection is marked as a owner.; Global resources.; Several tweaks to if and when, resources held by the global ROOT object (TROOT, TApplication) are deleted. When the default TApplication is replaced by a user provide TApplication, do not call EndOfProcessCleanups and co. and thus do not delete TFiles, TSockets or TColors that have already been created. In EndOfProcessCleanups, we now delete the objects held in TROOT’s TDirectory part. If the libCling library is unloaded, this now induces an immediate tear down of the ROOT resources; consequently objects might be deleted sooner in the process tear down process on some platforms.; TObject instances allocated as part of an array and made part of a collection, as for example the TCanvas instances into the global list of instances, are not longer deleted if the content of the collection is deleted. Technically the element of the array are now treated by collections as if they have been allocated on the stack. This fixes the issue described at ROOT-7846.; Code Cleanups.; Several definition where moved from the global or ROOT namespace to the ROOT::Internal namespace as they are not intended to be used outside of ROOT, including: gROOTLocal and related functions, TSchemaHelper, TSchemaMatch, TSchemaType, RStl, ROOT::TROOTAllocator, TSchemaRuleProcessor, TStdBitsetHelper, TInitBehavior, TDefaultInitBehavior, DefineBehavior, THnBaseBrowsable, THnBaseBinIter, GenericShowMembers, TOperatorNewHelper and BranchProxy implementations classes.; Several definition where moved from the global or ROOT namespace to the ROOT::Details namespace as they are intended to be used in ‘expert’ level code and have a lower level of backward compatibility requirement. This includes TCollectionProxyInfo, TSchemaRuleSet.; Interpreter; ROOT can now dump the context of STL collections, for instance map<string,int>. A few ROOT types print their content, too.; Fixed",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v606/release-notes.html:6037,allocate,allocated,6037,doc/v606/release-notes.html,https://root.cern,https://root.cern/doc/v606/release-notes.html,1,['allocate'],['allocated']
Energy Efficiency," TSpectrum3 *s = new TSpectrum3();; for (i = 0; i < nbinsx; i++){; for (j = 0; j < nbinsy; j++){; for (k = 0; k < nbinsz; k++){; source[i][j][k] = decon_in->GetBinContent(i + 1,j + 1,k + 1);; resp[i][j][k] = decon_resp->GetBinContent(i + 1,j + 1,k + 1);; }; }; }; s->Deconvolution(source,resp,nbinsx,nbinsy,nbinsz,100,1,1);; for (i = 0; i < nbinsx; i++){; for (j = 0; j < nbinsy; j++){; for (k = 0; k < nbinsz; k++){; decon_in->SetBinContent(i + 1,j + 1,k + 1, source[i][j][k]);; }; }; }; decon_in->Draw("""");; }; TSpectrum3::Deconvolutionconst char * Deconvolution(Double_t ***source, const Double_t ***resp, Int_t ssizex, Int_t ssizey, Int_t ssizez, Int_t numberIterations, Int_t numberRepetitions, Double_t boost)This function calculates deconvolution from source spectrum according to response spectrum The result...Definition TSpectrum3.cxx:1599. Example 2 - script Decon_hr.c :; This example illustrates repeated Gold deconvolution with boosting. After every 10 iterations we apply power function with exponent = 2 to the spectrum given in Fig. 2. Fig. 4 Spectrum from Fig. 2 after boosted deconvolution (10 iterations repeated 10 times). It decomposes completely cluster of peaks from Fig 2.; Script:; Example to illustrate the Gold deconvolution (class TSpectrum3). To execute this example, do:; root > .x Decon3_hr.C; void Decon3_hr() {; Int_t i, j, k;; Int_t nbinsx = 32;; Int_t nbinsy = 32;; Int_t nbinsz = 32;; Int_t xmin = 0;; Int_t xmax = nbinsx;; Int_t ymin = 0;; Int_t ymax = nbinsy;; Int_t zmin = 0;; Int_t zmax = nbinsz;; Double_t*** source = new Double_t**[nbinsx];; Double_t*** resp = new Double_t**[nbinsx];; for(i=0;i<nbinsx;i++){; source[i]=new Double_t*[nbinsy];; for(j=0;j<nbinsy;j++); source[i][j]=new Double_t[nbinsz];; }; for(i=0;i<nbinsx;i++){; resp[i]=new Double_t*[nbinsy];; for(j=0;j<nbinsy;j++); resp[i][j]=new Double_t[nbinsz];; }; TH3F *decon_in = new TH3F(""decon_in"",""Deconvolution"",nbinsx,xmin,xmax,nbinsy,ymin,ymax,nbinsz,zmin,zmax);; TH3F *decon_resp = new TH3F(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSpectrum3.html:29127,power,power,29127,doc/master/classTSpectrum3.html,https://root.cern,https://root.cern/doc/master/classTSpectrum3.html,1,['power'],['power']
Energy Efficiency," TStorage::HasCustomNewDelete ; (; ). static . return the has custom delete flag ; Definition at line 434 of file TStorage.cxx. ◆ IsA(). virtual TClass * TStorage::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Definition at line 85 of file TStorage.h. ◆ ObjectAlloc() [1/2]. void * TStorage::ObjectAlloc ; (; size_t ; sz). static . Used to allocate a TObject on the heap (via TObject::operator new()). ; Directly after this routine one can call (in the TObject ctor) TStorage::FilledByObjectAlloc() to find out if the just created object is on the heap. This technique is necessary as there is one stack per thread and we can not rely on comparison with the current stack memory position. ; Definition at line 291 of file TStorage.cxx. ◆ ObjectAlloc() [2/2]. void * TStorage::ObjectAlloc ; (; size_t ; size, . void * ; vp . ). static . Used to allocate a TObject on the heap (via TObject::operator new(size_t,void*)) in position vp. ; vp is already allocated (maybe on heap, maybe on stack) so just return. ; Definition at line 314 of file TStorage.cxx. ◆ ObjectAllocArray(). void * TStorage::ObjectAllocArray ; (; size_t ; sz). static . Used to allocate array of TObject on the heap (via TObject::operator new[]()). ; Unlike the 'singular' ObjectAlloc, we do not mark those object has being allocated on the heap as they can not be individually deleted. ; Definition at line 303 of file TStorage.cxx. ◆ ObjectDealloc() [1/2]. void TStorage::ObjectDealloc ; (; void * ; vp). static . Used to deallocate a TObject on the heap (via TObject::operator delete()). ; Definition at line 322 of file TStorage.cxx. ◆ ObjectDealloc() [2/2]. void TStorage::ObjectDealloc ; (; void * ; vp, . void * ; ptr . ). static . Used to deallocate a TObject on the heap (via TObject::operator delete(void*,void*)). ; Definition at line 331 of file TStorage.cxx. ◆ PrintStatistics(). void TStorage::PrintStatistics ; (; ). static . Print memory usage statistics. ; Definition at line 368 of f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTStorage.html:7728,allocate,allocated,7728,doc/master/classTStorage.html,https://root.cern,https://root.cern/doc/master/classTStorage.html,1,['allocate'],['allocated']
Energy Efficiency," TTree::MakeClass() that generates skeleton code for RooAbsPdf and RooAbsReal functions given a list of input parameter names ;  CClassFacIFace;  CRooCmdArgRooCmdArg is a named container for two doubles, two integers two object points and three string pointers that can be passed as generic named arguments to a variety of RooFit end user methods ;  CRooCmdConfigClass RooCmdConfig is a configurable parser for RooCmdArg named arguments ;  CRooCompositeDataStoreRooCompositeDataStore is the abstract base class for data collection that use a TTree as internal storage mechanism ;  CRooConstraintSumRooConstraintSum calculates the sum of the -(log) likelihoods of a set of RooAbsPfs that represent constraint functions ;  CRooConstVarRooConstVar represent a constant real-valued object ;  CRooConvCoefVarRooConvCoefVar is an auxilary class that represents the coefficient of a RooAbsAnaConvPdf implementation as a separate RooAbsReal object to be able to interface these coefficient terms with the generic RooRealIntegral integration mechanism ;  CRooConvGenContextRooConvGenContext is an efficient implementation of the generator context specific for RooAbsAnaConvPdf objects ;  CRooConvIntegrandBindingImplementation of RooAbsFunc that represent the the integrand of a generic (numeric) convolution A (x) B so that it can be passed to a numeric integrator ;  CRooCurveA RooCurve is a one-dimensional graphical representation of a real-valued function ;  ►CRooCustomizer;  CCustIFace;  CRooDataHistRooDataSet is a container class to hold N-dimensional binned data ;  CRooDataHistSliceIterRooDataHistSliceIter iterates over all bins in a RooDataHist that occur in a slice defined by the bin coordinates of the input sliceSet ;  CRooDataProjBindingAdaptor that projects a real function via summation of states provided in a dataset ;  CRooDataSetRooDataSet is a container class to hold unbinned data ;  CRooDataWeightedAverageClass RooDataWeightedAverage calculate a weighted average of a function or p.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v610/annotated.html:95526,efficient,efficient,95526,doc/v610/annotated.html,https://root.cern,https://root.cern/doc/v610/annotated.html,4,['efficient'],['efficient']
Energy Efficiency," The mean value is then automatically calculated by using the sum of values contained in the buffer divided by their count. To disable automatic mean calculation, simply call SetBufferSize with a zero argument ; Definition at line 322 of file TGSpeedo.cxx. ◆ SetDisplayText(). void TGSpeedo::SetDisplayText ; (; const char * ; text1, . const char * ; text2 = """" . ). Set small display text (two lines). ; Definition at line 347 of file TGSpeedo.cxx. ◆ SetLabelText(). void TGSpeedo::SetLabelText ; (; const char * ; text1, . const char * ; text2 = """" . ). Set main label text (two lines). ; Definition at line 361 of file TGSpeedo.cxx. ◆ SetMeanValue(). void TGSpeedo::SetMeanValue ; (; Float_t ; mean). inline . Definition at line 96 of file TGSpeedo.h. ◆ SetMinMaxScale(). void TGSpeedo::SetMinMaxScale ; (; Float_t ; min, . Float_t ; max . ). Set min and max scale values. ; Definition at line 377 of file TGSpeedo.cxx. ◆ SetOdoValue(). void TGSpeedo::SetOdoValue ; (; Int_t ; val). Set actual value of odo meter. ; Definition at line 334 of file TGSpeedo.cxx. ◆ SetScaleValue() [1/2]. void TGSpeedo::SetScaleValue ; (; Float_t ; val). Set actual scale (needle position) value. ; Definition at line 393 of file TGSpeedo.cxx. ◆ SetScaleValue() [2/2]. void TGSpeedo::SetScaleValue ; (; Float_t ; val, . Int_t ; damping . ). Set actual scale (needle position) value. ; Definition at line 441 of file TGSpeedo.cxx. ◆ SetThresholdColors(). void TGSpeedo::SetThresholdColors ; (; EGlowColor ; col1, . EGlowColor ; col2, . EGlowColor ; col3 . ). inline . Definition at line 87 of file TGSpeedo.h. ◆ SetThresholds(). void TGSpeedo::SetThresholds ; (; Float_t ; th1 = 0.0, . Float_t ; th2 = 0.0, . Float_t ; th3 = 0.0 . ). inline . Definition at line 85 of file TGSpeedo.h. ◆ StepScale(). void TGSpeedo::StepScale ; (; Float_t ; step). Increment/decrement scale (needle position) of ""step"" value. ; Definition at line 484 of file TGSpeedo.cxx. ◆ Streamer(). void TGSpeedo::Streamer ; (; TBuffer & ; R__b). o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGSpeedo.html:37957,meter,meter,37957,doc/master/classTGSpeedo.html,https://root.cern,https://root.cern/doc/master/classTGSpeedo.html,1,['meter'],['meter']
Energy Efficiency," The results are compared with what is obtained using TRandom or TF1::GetRandom The macro is divided in 3 parts: ;  unuranFoamTest.CThis program must be compiled and executed with Aclic as follows ;  ► v7;  box.cxxThis ROOT 7 example demonstrates how to create a ROOT 7 canvas (RCanvas) and draw ROOT 7 boxes in it (RBox) ;  concurrentfill.cxx;  draw.cxx;  draw_mt.cxxThis macro demonstrate usage of ROOT7 graphics from many threads Three different canvases in three different threads are started and regularly updated ;  draw_rh1.cxxThis macro generates a small V7 TH1D, fills it and draw it in a V7 canvas ;  draw_subpads.cxx;  draw_v6.cxx;  fitpanel.cxx;  histops.cxx;  line.cxxThis ROOT 7 example demonstrates how to create a ROOT 7 canvas (RCanvas) and draw ROOT 7 lines in it (RLine) ;  lineStyle.cxx;  lineWidth.cxx;  markerStyle.cxx;  pad.cxx;  perf.cxx;  perfcomp.cxx;  simple.cxx;  text.cxx;  ► vecops;  vo001_AdoptOrOwnMemory.C In this tutorial we learn how the RVec class can be used to adopt existing memory or allocate some ;  vo001_AdoptOrOwnMemory.py In this tutorial we learn how the RVec class can be used to adopt existing memory or allocate some ;  vo002_VectorCalculations.C In this tutorial we learn how the RVec class can be used to express easily mathematical operations involving arrays and scalars ;  vo003_LogicalOperations.C In this tutorial we learn how the RVec class can be used to express logical operations ;  vo004_SortAndSelect.C In this tutorial we learn how elements of an RVec can be easily sorted and selected ;  vo004_SortAndSelect.py In this tutorial we learn how elements of an RVec can be easily sorted and selected ;  vo005_Combinations.C In this tutorial we learn how combinations of RVecs can be build ;  vo005_Combinations.py In this tutorial we learn how combinations of RVecs can be build ;  vo006_IndexManipulation.C In this tutorial we demonstrate RVec helpers for index manipulation ;  ► xml;  DOMParsePerson.C ROOT implementation of a XML DOM Parse",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v616/files.html:172150,allocate,allocate,172150,doc/v616/files.html,https://root.cern,https://root.cern/doc/v616/files.html,1,['allocate'],['allocate']
Energy Efficiency," Therefore, the; user is asked to provide a minimum relative error ; (TMultiDimFit::SetMinRelativeError), and ; will be considered minimized when. Optionally, the user may impose a functional expression by specifying; the powers of each variable in specified functions ; (TMultiDimFit::SetPowers). In that case, only the; coefficients is calculated by the class. Limiting the Number of Terms. As always when dealing with fits, there's a real chance of; over fitting. As is well-known, it's always possible to fit an; polynomial in to points with ; , but; the polynomial is not likely to fit new data at all; [1]. Therefore, the user is asked to provide an upper; limit, to the number of terms in ; (TMultiDimFit::SetMaxTerms). However, since there's an infinite number of to choose from, the; user is asked to give the maximum power. , of each variable; to be considered in the minimization of ; (TMultiDimFit::SetMaxPowers). One way of obtaining values for the maximum power in variable , is; to perform a regular fit to the dependent quantity , using a; polynomial only in . The maximum power is is then the; power that does not significantly improve the one-dimensional; least-square fit over to [5]. There are still a huge amount of possible choices for ; in fact; there are ; possible; choices. Obviously we need to limit this. To this end, the user is; asked to set a power control limit, ; (TMultiDimFit::SetPowerLimit), and a function; is only accepted if. where is the leading power of variable in function; . (TMultiDimFit::MakeCandidates). So the number of; functions increase with (1, 2 is fine, 5 is way out). Gram-Schmidt Orthogonalisation. To further reduce the number of functions in the final expression,; only those functions that significantly reduce is chosen. What; `significant' means, is chosen by the user, and will be; discussed below (see 2.3). The functions are generally not orthogonal, which means one will; have to evaluate all possible 's over all data-points before; fi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMultiDimFit.html:3993,power,power,3993,root/html528/TMultiDimFit.html,https://root.cern,https://root.cern/root/html528/TMultiDimFit.html,3,['power'],['power']
Energy Efficiency," This class can convolve any PDF; with any other PDF; ; This class should not be used blindly as numeric convolution is computing; intensive and prone to stability fitting problems. If an analytic convolution; can be calculated, you should use that or implement it if not available.; RooNumConvolution implements reasonable defaults that should convolve most; functions reasonably well, but results strongly depend on the shape of your; input PDFS so always check your result.; The default integration engine for the numeric convolution is the; adaptive Gauss-Kronrod method, which empirically seems the most robust; for this task. You can override the convolution integration settings via; the RooNumIntConfig object reference returned by the convIntConfig() member; function; ; By default the numeric convolution is integrated from -infinity to; +infinity through a x -> 1/x coordinate transformation of the; tails. For convolution with a very small bandwidth it may be; advantageous (for both CPU consumption and stability) if the; integration domain is limited to a finite range. The function; setConvolutionWindow(mean,width,scale) allows to set a sliding; window around the x value to be calculated taking a RooAbsReal; expression for an offset and a width to be taken around the x; value. These input expression can be RooFormulaVars or other; function objects although the 3d 'scale' argument 'scale'; multiplies the width RooAbsReal expression given in the 2nd; argument, allowing for an appropriate window definition for most; cases without need for a RooFormulaVar object: e.g. a Gaussian; resolution PDF do setConvolutionWindow(gaussMean,gaussSigma,5); Note that for a 'wide' Gaussian the -inf to +inf integration; may converge more quickly than that over a finite range!; ; The default numeric precision is 1e-7, i.e. the global default for; numeric integration but you should experiment with this value to; see if it is sufficient for example by studying the number of function; calls t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooNumConvolution.html:1370,consumption,consumption,1370,root/html526/RooNumConvolution.html,https://root.cern,https://root.cern/root/html526/RooNumConvolution.html,7,['consumption'],['consumption']
Energy Efficiency," This macro provides a simple example on how to use the trained regression MVAs within an analysis module ;  ► tree;  basic.C Read data from an ascii file and create a root file with an histogram and an ntuple ;  basic2.C Create can ntuple reading data from an ascii file ;  bill.C Benchmark comparing row-wise and column-wise storage performance ;  cernbuild.C Read data (CERN staff) from an ascii file and create a root file with a Tree ;  cernstaff.C Playing with a Tree containing variables of type character ;  circular.C Example of a circular Tree ;  clonesA_Event.CExample to write & read a Tree built with a complex class inheritance tree ;  clonesA_Event.cxx;  clonesA_Event.h;  copytree.C Copy a subset of a Tree to a new Tree ;  copytree2.C Copy a subset of a Tree to a new Tree, one branch in a separate file ;  copytree3.C Example of Root macro to copy a subset of a Tree to a new Tree, selecting entries ;  drawsparse.C Convert a THnSparse to a TTree using efficient iteration through the THnSparse and draw a THnSparse using TParallelCoord ;  h1analysis.C Example of analysis class for the H1 data ;  h1analysis.h;  h1analysisProxy.CExample of analysis class for the H1 data using code generated by MakeProxy ;  h1analysisProxy.h;  h1analysisProxyCut.C;  h1analysisTreeReader.C H1 analysis example expressed in terms of TTreeReader ;  h1analysisTreeReader.h;  h1chain.C Creates a TChain to be used by the h1analysis.C class the symbol H1 must point to a directory where the H1 data sets have been installed ;  hsimpleProxy.C ;  hsimpleProxyDriver.C This is the driver of the hsimpleProxy example It provides the infrastructure to run that code on an ntuple To be run from the tutorials directory ;  hsimpleReader.C TTreeReader simplest example ;  htest.C Save histograms in Tree branches ;  hvector.C Write and read STL vectors in a tree ;  JetEvent.cxx;  JetEvent.h;  jets.CUsage of a Tree using the JetEvent class ;  ntuple1.C Simple tree analysis ;  parallelcoord.C Script illustrati",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v616/files.html:167718,efficient,efficient,167718,doc/v616/files.html,https://root.cern,https://root.cern/doc/v616/files.html,1,['efficient'],['efficient']
Energy Efficiency," This macro provides a simple example on how to use the trained regression MVAs within an analysis module ;  ► tree;  basic.C Read data from an ascii file and create a root file with an histogram and an ntuple ;  basic2.C Create can ntuple reading data from an ascii file ;  bill.C Benchmark comparing row-wise and column-wise storage performance ;  cernbuild.C Read data (CERN staff) from an ascii file and create a root file with a Tree ;  cernstaff.C Playing with a Tree containing variables of type character ;  circular.C Example of a circular Tree ;  clonesA_Event.CExample to write & read a Tree built with a complex class inheritance tree ;  clonesA_Event.cxx;  clonesA_Event.h;  copytree.C Copy a subset of a Tree to a new Tree ;  copytree2.C Copy a subset of a Tree to a new Tree, one branch in a separate file ;  copytree3.C Example of Root macro to copy a subset of a Tree to a new Tree, selecting entries ;  drawsparse.C Convert a THnSparse to a TTree using efficient iteration through the THnSparse and draw a THnSparse using TParallelCoord ;  h1analysis.C Example of analysis class for the H1 data ;  h1analysis.h;  h1analysisProxy.CExample of analysis class for the H1 data using code generated by MakeProxy ;  h1analysisProxy.h;  h1analysisProxyCut.C;  h1analysisTreeReader.C;  h1analysisTreeReader.h;  h1chain.C Creates a TChain to be used by the h1analysis.C class the symbol H1 must point to a directory where the H1 data sets have been installed ;  hsimpleProxy.C ;  hsimpleProxyDriver.C This is the driver of the hsimpleProxy example It provides the infrastructure to run that code on an ntuple To be run from the tutorials directory ;  hsimpleReader.C TTreeReader simplest example ;  htest.C Save histograms in Tree branches ;  hvector.C Write and read STL vectors in a tree ;  JetEvent.cxx;  JetEvent.h;  jets.CUsage of a Tree using the JetEvent class ;  ntuple1.C Simple tree analysis ;  parallelcoord.C Script illustrating the use of the TParalleCoord class ;  parallelcoordt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/files.html:155515,efficient,efficient,155515,doc/v608/files.html,https://root.cern,https://root.cern/doc/v608/files.html,4,['efficient'],['efficient']
Energy Efficiency," This sample needn't be representive of the problem at hand.; Please note, that if no error is given Poisson statistics is; assumed and the square error is set to the value of dependent; quantity. See also the; class description. void Browse(TBrowser* b); Browse the TMultiDimFit object in the TBrowser. void Clear(Option_t* option = """"); Clear internal structures and variables. Double_t Eval(const Double_t* x, const Double_t* coeff = 0) const; Evaluate parameterization at point x. Optional argument coeff is; a vector of coefficients for the parameterisation, fNCoefficients; elements long. Double_t EvalError(const Double_t* x, const Double_t* coeff = 0) const; Evaluate parameterization error at point x. Optional argument coeff is; a vector of coefficients for the parameterisation, fNCoefficients; elements long. Double_t EvalControl(const Int_t* powers) const; PRIVATE METHOD:; Calculate the control parameter from the passed powers. Double_t EvalFactor(Int_t p, Double_t x) const; PRIVATE METHOD:; Evaluate function with power p at variable value x. void FindParameterization(Option_t* option = """"); Find the parameterization. Options:; None so far. For detailed description of what this entails, please refer to the; class description. void Fit(Option_t* option = """"); Try to fit the found parameterisation to the test sample. Options; M use Minuit to improve coefficients. Also, refer to; class description. TMultiDimFit* Instance(); Return the static instance. void MakeCandidates(); PRIVATE METHOD:; Create list of candidate functions for the parameterisation. See; also; class description. Double_t MakeChi2(const Double_t* coeff = 0); Calculate Chi square over either the test sample. The optional; argument coeff is a vector of coefficients to use in the; evaluation of the parameterisation. If coeff == 0, then the found; coefficients is used.; Used my MINUIT for fit (see TMultDimFit::Fit). void MakeCode(const char* functionName = ""MDF"", Option_t* option = """"); Generate the file <",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMultiDimFit.html:27296,power,power,27296,root/html528/TMultiDimFit.html,https://root.cern,https://root.cern/root/html528/TMultiDimFit.html,6,['power'],['power']
Energy Efficiency," Throw(); 518 // mechanism or at least load a NAN if not.; 519 const Scalar ee = E();; 520 const Scalar pp = P();; 521 using std::log;; 522 return Scalar(0.5) * log((ee + pp) / (ee - pp));; 523 }; 524 ; 525 /**; 526 Determine if momentum-energy can represent a physical massive particle; 527 */; 528 bool isTimelike( ) const {; 529 Scalar ee = E(); Scalar pp = P(); return ee*ee > pp*pp;; 530 }; 531 ; 532 /**; 533 Determine if momentum-energy can represent a massless particle; 534 */; 535 bool isLightlike( Scalar tolerance; 536 = 100*std::numeric_limits<Scalar>::epsilon() ) const {; 537 Scalar ee = E(); Scalar pp = P(); Scalar delta = ee-pp;; 538 if ( ee==0 ) return pp==0;; 539 return delta*delta < tolerance * ee*ee;; 540 }; 541 ; 542 /**; 543 Determine if momentum-energy is spacelike, and represents a tachyon; 544 */; 545 bool isSpacelike( ) const {; 546 Scalar ee = E(); Scalar pp = P(); return ee*ee < pp*pp;; 547 }; 548 ; 549 typedef DisplacementVector3D< Cartesian3D<Scalar> > BetaVector;; 550 ; 551 /**; 552 The beta vector for the boost that would bring this vector into; 553 its center of mass frame (zero momentum); 554 */; 555 BetaVector BoostToCM( ) const {; 556 if (E() == 0) {; 557 if (P() == 0) {; 558 return BetaVector();; 559 } else {; 560 // TODO - should attempt to Throw with msg about; 561 // boostVector computed for LorentzVector with t=0; 562 return -Vect()/E();; 563 }; 564 }; 565 if (M2() <= 0) {; 566 // TODO - should attempt to Throw with msg about; 567 // boostVector computed for a non-timelike LorentzVector; 568 }; 569 return -Vect()/E();; 570 }; 571 ; 572 /**; 573 The beta vector for the boost that would bring this vector into; 574 its center of mass frame (zero momentum); 575 */; 576 template <class Other4Vector>; 577 BetaVector BoostToCM(const Other4Vector& v ) const {; 578 Scalar eSum = E() + v.E();; 579 DisplacementVector3D< Cartesian3D<Scalar> > vecSum = Vect() + v.Vect();; 580 if (eSum == 0) {; 581 if (vecSum.Mag2() == 0) {; 582 return BetaVecto",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/GenVector_2LorentzVector_8h_source.html:16950,energy,energy,16950,doc/master/GenVector_2LorentzVector_8h_source.html,https://root.cern,https://root.cern/doc/master/GenVector_2LorentzVector_8h_source.html,3,['energy'],['energy']
Energy Efficiency," Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Development Release Checklist. Steps to be followed to produce a new ROOT release are:; Prerequisites. Get the 'green' light from all main developers; Check that all the Jenkins builds / CDash builds are green; Verify that no performance regressions exist in the benchmark system; Update versions in JIRA. 'Release' the version in the project configuration; Create the next development version. root.git. Update the release notes in README/ReleaseNotes/vXXX/index.md. Edit release notes patches section; From the list the versions in JIRA, select the version and then 'release notes'; git commit README/ReleaseNotes/vXXX/index.md. Modify version number and modify all necessary files. edit build/version_number (even patch number for releases); Run from the build directory $ make version. Tag main ROOT repository. $ git tag -a vX-YY-ZZ; Run $ cmake . to update etc/gitinfo.txt. Create the source tarball. Run from the build directory $ make distsrc not on a MacOS machine; $ scp ../root_vX.YY.ZZ.source.tar.gz sftnight@root:/home/www/root/download. Update the release notes in README/ReleaseNotes/vXXX/index.md again. edit README/ReleaseNotes/vXXX/index.md; possibly copying from README/ReleaseNotes/em",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/release-checklist.html:1966,green,green,1966,d/release-checklist.html,https://root.cern,https://root.cern/d/release-checklist.html,2,['green'],['green']
Energy Efficiency," ULongptr_t ; pix, . UInt_t ; w, . UInt_t ; h . ). overridevirtual . register pixmap created by TGWin32GLManager ; Reimplemented from TVirtualX.; Definition at line 7436 of file TGWin32.cxx. ◆ AddWindow(). Int_t TGWin32::AddWindow ; (; ULongptr_t ; qwid, . UInt_t ; w, . UInt_t ; h . ). overridevirtual . Register a window created by Qt as a ROOT window (like InitWindow()). ; Reimplemented from TVirtualX.; Definition at line 7479 of file TGWin32.cxx. ◆ Align(). void TGWin32::Align ; (; void ; ). private . Compute alignment variables. ; The alignment is done on the horizontal string then the rotation is applied on the alignment variables. SetRotation and LayoutGlyphs should have been called before. ; Definition at line 1203 of file TGWin32.cxx. ◆ AllocColor() [1/2]. Bool_t TGWin32::AllocColor ; (; Colormap_t ; cmap, . ColorStruct_t & ; color . ). overridevirtual . Find and allocate a color cell according to the color values specified in the ColorStruct_t. ; If no cell could be allocated it returns kFALSE, otherwise kTRUE. ; Reimplemented from TVirtualX.; Definition at line 5756 of file TGWin32.cxx. ◆ AllocColor() [2/2]. Bool_t TGWin32::AllocColor ; (; GdkColormap * ; cmap, . GdkColor * ; color . ). protected . Allocate color in colormap. ; If we are on an <= 8 plane machine we will use XAllocColor. If we are on a >= 15 (15, 16 or 24) plane true color machine we will calculate the pixel value using: for 15 and 16 bit true colors have 6 bits precision per color however only the 5 most significant bits are used in the color index. Except for 16 bits where green uses all 6 bits. I.e.: 15 bits = rrrrrgggggbbbbb 16 bits = rrrrrggggggbbbbb for 24 bits each r, g and b are represented by 8 bits.; Since all colors are set with a max of 65535 (16 bits) per r, g, b we just right shift them by 10, 11 and 10 bits for 16 planes, and (10, 10, 10 for 15 planes) and by 8 bits for 24 planes. Returns kFALSE in case color allocation failed. ; Definition at line 1159 of file TGWin32.cxx. ◆ ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGWin32.html:54009,allocate,allocated,54009,doc/master/classTGWin32.html,https://root.cern,https://root.cern/doc/master/classTGWin32.html,1,['allocate'],['allocated']
Energy Efficiency," We test for the kObject and kAny types to support; 5413 // the (unwise) choice of inheriting from an STL container.; 5414 Error(""SetAddress"", ""Embedded STL container given a zero address for branch '%s'"", GetName());; 5415 } else {; 5416 // We are either a top-level branch or sub-branch which is a pointer to an STL container.; 5417 // Streamer type should be -1 (for a top-level branch) or kSTLp here.; 5418 if ((fStreamerType != -1) && (fStreamerType != TVirtualStreamerInfo::kSTLp)) {; 5419 Error(""SetAddress"",; 5420 ""Branch %s is a split STL container (fStreamerType is: %d), the address can not be set directly."",; 5421 GetName(), fStreamerType);; 5422 } else if (fStreamerType == -1) {; 5423 // -- We are a top-level branch, allocate.; 5424 SetBit(kDeleteObject);; 5425 fObject = (char*) proxy->New();; 5426 if (fObject) {; 5427 fAddress = (char*) &fObject;; 5428 } else {; 5429 Error(""SetAddress"", ""Failed to allocate STL container for branch '%s'"", GetName());; 5430 // FIXME: Should we do this? Lots of other code wants; 5431 // fAddress to be zero if no fObject, but is; 5432 // that a good thing?; 5433 fAddress = nullptr;; 5434 ResetBit(kAddressSet);; 5435 }; 5436 } else {; 5437 // -- We are a sub-branch which is a pointer to an STL container.; 5438 Error(""SetAddress"", ""Embedded pointer to an STL container given a zero address for branch '%s'"", GetName());; 5439 }; 5440 }; 5441 }; 5442 } else if (fType == 41) {; 5443 // -- We are an STL container sub-branch.; 5444 // Initialize fCollProxy.; 5445 GetCollectionProxy();; 5446 // We are not at top-level branch.; 5447 fObject = fAddress;; 5448 } else if (fID < 0) {; 5449 // -- We are a top-level branch.; 5450 char** pp = (char**) fAddress;; 5451 if (pp && *pp) {; 5452 // -- Caller provided an i/o buffer for us to use.; 5453 fObject = *pp;; 5454 } else {; 5455 // -- Caller did not provide an i/o buffer for us to use, we must make one for ourselves.; 5456 if (clOfBranch) {; 5457 if (!pp) {; 5458 // -- Caller wants us to own the",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TBranchElement_8cxx_source.html:201831,allocate,allocate,201831,doc/master/TBranchElement_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TBranchElement_8cxx_source.html,1,['allocate'],['allocate']
Energy Efficiency," X(), Y(), X() and M() ; Definition at line 78 of file PxPyPzM4D.h. ◆ PxPyPzM4D() [4/4]. template<class ScalarType = double> . ROOT::Math::PxPyPzM4D< ScalarType >::PxPyPzM4D ; (; const PxPyPzM4D< ScalarType > & ; v). inline . copy constructor ; Definition at line 87 of file PxPyPzM4D.h. Member Function Documentation. ◆ E(). template<class ScalarType = double> . Scalar ROOT::Math::PxPyPzM4D< ScalarType >::E ; (; ); const. inline . Energy. ; Definition at line 160 of file PxPyPzM4D.h. ◆ E2(). template<class ScalarType = double> . Scalar ROOT::Math::PxPyPzM4D< ScalarType >::E2 ; (; ); const. inline . energy squared ; Definition at line 189 of file PxPyPzM4D.h. ◆ Et(). template<class ScalarType = double> . Scalar ROOT::Math::PxPyPzM4D< ScalarType >::Et ; (; ); const. inline . transverse energy ; Definition at line 241 of file PxPyPzM4D.h. ◆ Et2(). template<class ScalarType = double> . Scalar ROOT::Math::PxPyPzM4D< ScalarType >::Et2 ; (; ); const. inline . transverse energy squared ; Definition at line 232 of file PxPyPzM4D.h. ◆ Eta(). template<class ScalarType = double> . Scalar ROOT::Math::PxPyPzM4D< ScalarType >::Eta ; (; ); const. inline . pseudorapidity ; Definition at line 260 of file PxPyPzM4D.h. ◆ GetCoordinates() [1/2]. template<class ScalarType = double> . void ROOT::Math::PxPyPzM4D< ScalarType >::GetCoordinates ; (; Scalar & ; px, . Scalar & ; py, . Scalar & ; pz, . Scalar & ; m . ); const. inline . get internal data into 4 Scalar numbers ; Definition at line 140 of file PxPyPzM4D.h. ◆ GetCoordinates() [2/2]. template<class ScalarType = double> . void ROOT::Math::PxPyPzM4D< ScalarType >::GetCoordinates ; (; Scalar ; dest[]); const. inline . get internal data into an array of 4 Scalar numbers ; Definition at line 126 of file PxPyPzM4D.h. ◆ M(). template<class ScalarType = double> . Scalar ROOT::Math::PxPyPzM4D< ScalarType >::M ; (; ); const. inline . Definition at line 150 of file PxPyPzM4D.h. ◆ M2(). template<class ScalarType = double> . Scalar ROOT::Math::PxP",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1PxPyPzM4D.html:6233,energy,energy,6233,doc/master/classROOT_1_1Math_1_1PxPyPzM4D.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1PxPyPzM4D.html,1,['energy'],['energy']
Energy Efficiency," [rowLwb..rowUpb][colLwb..colUpb] becomes [rowLwb+row_shift..rowUpb+row_shift][colLwb+col_shift..colUpb+col_shift] ; Reimplemented from TMatrixTBase< Element >.; Definition at line 756 of file TMatrixTSym.cxx. ◆ Similarity() [1/3]. template<class Element > . TMatrixTSym< Element > & TMatrixTSym< Element >::Similarity ; (; const TMatrixT< Element > & ; b). Calculate B * (*this) * B^T , final matrix will be (nrowsb x nrowsb) This is a similarity transform when B is orthogonal . ; It is more efficient than applying the actual multiplication because this routine realizes that the final matrix is symmetric . ; Definition at line 1099 of file TMatrixTSym.cxx. ◆ Similarity() [2/3]. template<class Element > . TMatrixTSym< Element > & TMatrixTSym< Element >::Similarity ; (; const TMatrixTSym< Element > & ; b). Calculate B * (*this) * B^T , final matrix will be (nrowsb x nrowsb) This is a similarity transform when B is orthogonal . ; It is more efficient than applying the actual multiplication because this routine realizes that the final matrix is symmetric . ; Definition at line 1190 of file TMatrixTSym.cxx. ◆ Similarity() [3/3]. template<class Element > . Element TMatrixTSym< Element >::Similarity ; (; const TVectorT< Element > & ; v); const. Calculate scalar v * (*this) * v^T. ; Definition at line 1292 of file TMatrixTSym.cxx. ◆ SimilarityT(). template<class Element > . TMatrixTSym< Element > & TMatrixTSym< Element >::SimilarityT ; (; const TMatrixT< Element > & ; n). Calculate B^T * (*this) * B , final matrix will be (ncolsb x ncolsb) It is more efficient than applying the actual multiplication because this routine realizes that the final matrix is symmetric . ; Definition at line 1327 of file TMatrixTSym.cxx. ◆ Streamer(). template<class Element > . void TMatrixTSym< Element >::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TMatrixTSym. ; Reimplemented from TMatrixTBase< Element >.; Definition at line 2037 of file TMatrixTSym.cxx. ◆ Streamer",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMatrixTSym.html:43851,efficient,efficient,43851,doc/master/classTMatrixTSym.html,https://root.cern,https://root.cern/doc/master/classTMatrixTSym.html,1,['efficient'],['efficient']
Energy Efficiency," \frac{E^2 p_{\perp}^2 }{ |p|^2 } } X sign(E) \f]. { return fCoordinates.Et(); }. Scalar Phi() const. azimuthal Angle. { return fCoordinates.Phi();}. Scalar Theta() const. polar Angle. { return fCoordinates.Theta(); }. Scalar Eta() const. pseudorapidity; \f[ \eta = - \ln { \tan { \frac { \theta} {2} } } \f]. { return fCoordinates.Eta(); }. return operator*(const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<Double32_t> >::Scalar& a) const; LorentzVector<CoordinateType> v(*this);; v.Negate();. Scalar Rapidity() const; ---- Relativistic Properties ----. Rapidity relative to the Z axis: .5 log [(E+Pz)/(E-Pz)]. Scalar ColinearRapidity() const. Rapidity in the direction of travel: atanh (|P|/E)=.5 log[(E+P)/(E-P)]. bool isTimelike() const. Determine if momentum-energy can represent a physical massive particle. bool isLightlike(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<Double32_t> >::Scalar tolerance = 100*std::numeric_limits<Scalar>::epsilon()) const. Determine if momentum-energy can represent a massless particle. bool isSpacelike() const. Determine if momentum-energy is spacelike, and represents a tachyon. BetaVector BoostToCM() const. The beta vector for the boost that would bring this vector into; its center of mass frame (zero momentum). return - Vect() const; TODO - should attempt to Throw with msg about; boostVector computed for LorentzVector with t=0. Scalar Beta() const; beta and gamma. Return beta scalar value. Scalar Gamma() const. Return Gamma scalar value. Scalar x() const; Method providing limited backward name compatibility with CLHEP ----. { return fCoordinates.Px(); }. Scalar y() const; { return fCoordinates.Py(); }. Scalar z() const; { return fCoordinates.Pz(); }. Scalar t() const; { return fCoordinates.E(); }. Scalar px() const; { return fCoordinates.Px(); }. Scalar py() const; { return fCoordinates.Py(); }. Scalar pz() const; { return fCoordinates.Pz(); }. Scalar e() const; { return fCoordinates.E(); }. Scalar theta() const; { return fCoordinat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__LorentzVector_-p1PxPyPzE4D_Double32_t___.html:15760,energy,energy,15760,root/html526/ROOT__Math__LorentzVector_-p1PxPyPzE4D_Double32_t___.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__LorentzVector_-p1PxPyPzE4D_Double32_t___.html,1,['energy'],['energy']
Energy Efficiency," \frac{E^2 p_{\perp}^2 }{ |p|^2 } } X sign(E) \f]. { return fCoordinates.Et(); }. Scalar Phi() const. azimuthal Angle. { return fCoordinates.Phi();}. Scalar Theta() const. polar Angle. { return fCoordinates.Theta(); }. Scalar Eta() const. pseudorapidity; \f[ \eta = - \ln { \tan { \frac { \theta} {2} } } \f]. { return fCoordinates.Eta(); }. return operator*(const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<Double32_t> >::Scalar& a) const; LorentzVector<CoordinateType> v(*this);; v.Negate();. Scalar Rapidity() const; ---- Relativistic Properties ----. Rapidity relative to the Z axis: .5 log [(E+Pz)/(E-Pz)]. Scalar ColinearRapidity() const. Rapidity in the direction of travel: atanh (|P|/E)=.5 log[(E+P)/(E-P)]. bool isTimelike() const. Determine if momentum-energy can represent a physical massive particle. bool isLightlike(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<Double32_t> >::Scalar tolerance = 100*std::numeric_limits<Scalar>::epsilon()) const. Determine if momentum-energy can represent a massless particle. bool isSpacelike() const. Determine if momentum-energy is spacelike, and represents a tachyon. BetaVector BoostToCM() const. The beta vector for the boost that would bring this vector into; its center of mass frame (zero momentum). return - Vect() const; TODO - should attempt to Throw with msg about; boostVector computed for LorentzVector with t=0. Scalar Beta() const; beta and gamma. Return beta scalar value. Scalar Gamma() const. Return Gamma scalar value. Scalar x() const; Method providing limited backward name compatibility with CLHEP ----. { return fCoordinates.Px(); }. Scalar y() const; { return fCoordinates.Py(); }. Scalar z() const; { return fCoordinates.Pz(); }. Scalar t() const; { return fCoordinates.E(); }. Scalar px() const; { return fCoordinates.Px(); }. Scalar py() const; { return fCoordinates.Py(); }. Scalar pz() const; { return fCoordinates.Pz(); }. Scalar e() const; { return fCoordinates.E(); }. Scalar theta() const; { return fCoordinat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__LorentzVector_-p1PxPyPzM4D_Double32_t___.html:15760,energy,energy,15760,root/html526/ROOT__Math__LorentzVector_-p1PxPyPzM4D_Double32_t___.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__LorentzVector_-p1PxPyPzM4D_Double32_t___.html,1,['energy'],['energy']
Energy Efficiency," a RooRealvar is created and the arg list is interpreted as follows:; If list has two args, these are interpreted as xmin,xmax; If list has three args, these are interpreted as xinit,xmin,xmax; If list has one arg, this is interpreted as xinit and the variable is set as constant . Definition at line 1267 of file RooFactoryWSTool.cxx. ◆ processExpression(). std::string RooFactoryWSTool::processExpression ; (; const char * ; token). Process a single high-level expression or list of expressions. ; The returned string a the reduced expression where all inline object creations have been executed and substituted with the name of the created object. e.g. RooGaussian::g(x,m,s) --> g; e.g. {x(-10,10),s} --> {x,s} . Definition at line 882 of file RooFactoryWSTool.cxx. ◆ processListExpression(). string RooFactoryWSTool::processListExpression ; (; const char * ; arg). protected . Process a list of high-level expression. ; The returned string a the reduced expression list where all inline object creations have been executed and substituted with the name of the created object. E.g. {x(-10,10),s} --> {x,s} . Definition at line 1118 of file RooFactoryWSTool.cxx. ◆ processMetaArg(). std::string RooFactoryWSTool::processMetaArg ; (; std::string & ; func, . std::vector< std::string > & ; args . ). protected . Concatenate list of args into comma separated string. ; Definition at line 1385 of file RooFactoryWSTool.cxx. ◆ processSingleExpression(). std::string RooFactoryWSTool::processSingleExpression ; (; const char * ; arg). protected . Process a single high-level expression. ; The returned string a the reduced expression where all inline object creations have been executed and substituted with the name of the created object. e.g. RooGaussian::g(x,m,s) --> g; e.g. x[-10,10] --> x . Definition at line 972 of file RooFactoryWSTool.cxx. ◆ prod(). RooProdPdf * RooFactoryWSTool::prod ; (; const char * ; objName, . const char * ; pdfList . ). Definition at line 560 of file RooFactoryWSTool.c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFactoryWSTool.html:40380,reduce,reduced,40380,doc/master/classRooFactoryWSTool.html,https://root.cern,https://root.cern/doc/master/classRooFactoryWSTool.html,1,['reduce'],['reduced']
Energy Efficiency," a cartesian metric is used. ; re-implement by derived classes if needed to be modified ; Definition at line 66 of file GSLSimAnnealing.cxx. ◆ Energy(). double ROOT::Math::GSLSimAnFunc::Energy ; (; ); const. virtual . evaluate the energy ( objective function value) re-implement by derived classes if needed to be modified ; Definition at line 50 of file GSLSimAnnealing.cxx. ◆ FastCopy(). GSLSimAnFunc & ROOT::Math::GSLSimAnFunc::FastCopy ; (; const GSLSimAnFunc & ; f). virtual . fast copy method called by GSL simulated annealing internally copy only the things which have been changed must be re-implemented by derived classes if needed ; Definition at line 96 of file GSLSimAnnealing.cxx. ◆ NDim(). unsigned int ROOT::Math::GSLSimAnFunc::NDim ; (; ); const. inline . Definition at line 135 of file GSLSimAnnealing.h. ◆ Print(). void ROOT::Math::GSLSimAnFunc::Print ; (; ). virtual . print the position in the standard output std::ostream GSL prints in addition n iteration, n function calls, temperature and energy re-implement by derived classes if necessary ; Definition at line 83 of file GSLSimAnnealing.cxx. ◆ Scale(). double ROOT::Math::GSLSimAnFunc::Scale ; (; unsigned int ; i); const. inline . Definition at line 141 of file GSLSimAnnealing.h. ◆ SetX() [1/3]. void ROOT::Math::GSLSimAnFunc::SetX ; (; const double * ; x). inline . change the x values (used by sim annealing to take a step) ; Definition at line 126 of file GSLSimAnnealing.h. ◆ SetX() [2/3]. template<class IT > . void ROOT::Math::GSLSimAnFunc::SetX ; (; IT ; begin, . IT ; end . ). inline . Definition at line 131 of file GSLSimAnnealing.h. ◆ SetX() [3/3]. void ROOT::Math::GSLSimAnFunc::SetX ; (; unsigned int ; i, . double ; x . ). inline . Definition at line 143 of file GSLSimAnnealing.h. ◆ Step(). void ROOT::Math::GSLSimAnFunc::Step ; (; const GSLRandomEngine & ; r, . double ; maxstep . ). virtual . change the x[i] value using a random value urndm generated between [0,1] up to a maximum value maxstep re-implem",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnFunc.html:5603,energy,energy,5603,doc/master/classROOT_1_1Math_1_1GSLSimAnFunc.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnFunc.html,1,['energy'],['energy']
Energy Efficiency," added so that clone trees could; be told they do not own the allocated objects. void SetAddress(void* addobj); -- Point this branch at an object. For a sub-branch, addr is a pointer to the branch object. For a top-level branch the meaning of addr is as follows:. If addr is zero, then we allocate a branch object; internally and the branch is the owner of the allocated; object, not the caller. However the caller may obtain; a pointer to the branch object with GetObject(). Example:. branch->SetAddress(0);; Event* event = branch->GetObject();; ... Do some work. If addr is not zero, but the pointer addr points at is; zero, then we allocate a branch object and set the passed; pointer to point at the allocated object. The caller; owns the allocated object and is responsible for deleting; it when it is no longer needed. Example:. Event* event = 0;; branch->SetAddress(&event);; ... Do some work.; delete event;; event = 0;. If addr is not zero and the pointer addr points at is; also not zero, then the caller has allocated a branch; object and is asking us to use it. The caller owns it; and must delete it when it is no longer needed. Example:. Event* event = new Event();; branch->SetAddress(&event);; ... Do some work.; delete event;; event = 0;. These rules affect users of TTree::Branch(),; TTree::SetBranchAddress(), and TChain::SetBranchAddress(); as well because those routines call this one. An example of a tree with branches with objects allocated; and owned by us:. TFile* f1 = new TFile(""myfile_original.root"");; TTree* t1 = (TTree*) f->Get(""MyTree"");; TFile* f2 = new TFile(""myfile_copy.root"", ""recreate"");; TTree* t2 = t1->Clone(0);; for (Int_t i = 0; i < 10; ++i) {; t1->GetEntry(i);; t2->Fill();; }; t2->Write(); delete f2;; f2 = 0;; delete f1;; f1 = 0;. An example of a branch with an object allocated by us,; but owned by the caller:. TFile* f = new TFile(""myfile.root"", ""recreate"");; TTree* t = new TTree(""t"", ""A test tree.""); Event* event = 0;; TBranchElement* br = t->Branc",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TBranchElement.html:24627,allocate,allocated,24627,root/html526/TBranchElement.html,https://root.cern,https://root.cern/root/html526/TBranchElement.html,7,['allocate'],['allocated']
Energy Efficiency," addobj). overridevirtual . Set address of this branch. ; Reimplemented from TBranch.; Definition at line 325 of file TBranchObject.cxx. ◆ SetAutoDelete(). void TBranchObject::SetAutoDelete ; (; bool ; autodel = true). overridevirtual . Set the AutoDelete bit. ; This function can be used to instruct Root in TBranchObject::ReadBasket to not delete the object referenced by a branchobject before reading a new entry. By default, the object is deleted.; If autodel is true, this existing object will be deleted, a new object created by the default constructor, then object->Streamer called.; If autodel is false, the existing object is not deleted. Root assumes that the user is taking care of deleting any internal object or array This can be done in Streamer itself.; If this branch has sub-branches, the function sets autodel for these branches as well. We STRONGLY suggest to activate this option by default when you create the top level branch. This will make the read phase more efficient because it minimizes the numbers of new/delete operations. Once this option has been set and the Tree is written to a file, it is not necessary to specify the option again when reading, unless you want to set the opposite mode. . Reimplemented from TBranch.; Definition at line 517 of file TBranchObject.cxx. ◆ SetBasketSize(). void TBranchObject::SetBasketSize ; (; Int_t ; buffsize). overridevirtual . Reset basket size for all subbranches of this branch. ; Reimplemented from TBranch.; Definition at line 531 of file TBranchObject.cxx. ◆ SetupAddresses(). void TBranchObject::SetupAddresses ; (; ). overridevirtual . – If the branch address is not set, we set all addresses starting with the top level parent branch. ; This is required to be done in order for GetOffset to be correct and for GetEntry to run. ; Reimplemented from TBranch.; Definition at line 594 of file TBranchObject.cxx. ◆ Streamer(). void TBranchObject::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TB",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBranchObject.html:34811,efficient,efficient,34811,doc/master/classTBranchObject.html,https://root.cern,https://root.cern/doc/master/classTBranchObject.html,1,['efficient'],['efficient']
Energy Efficiency," all its leaf nodes, fill max depth reached in the tree at the same time. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static BinarySearchTree * CreateFromXML (void *node, UInt_t tmva_Version_Code=262657);  re-create a new tree (decision tree or search tree) from XML ;  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::BinaryTree; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Private Member Functions; void DestroyNode (BinarySearchTreeNode *);  ; void Insert (const Event *, Node *);  private internal function to insert a event (node) at the proper position ;  ; Bool_t InVolume (const std::vector< Float_t > &, Volume *) const;  test if the data points are in the given volume ;  ; void NormalizeTree (std::vector< std::pair< Double_t, const TMVA::Event * > >::iterator, std::vector< std::pair< Double_t, const TMVA::Event * > >::iterator, UInt_t);  normalises the binary-search tree to reduce the branch length and hence speed up the search procedure (on average). ;  ; BinarySearchTreeNode * Search (Event *, Node *) const;  Private, recursive, function for searching. ;  ; Double_t SearchVolume (Node *, Volume *, Int_t, std::vector< const TMVA::BinarySearchTreeNode * > *events);  recursively walk through the daughter nodes and add up all weights of events that lie within the given volume ;  . Private Attributes; Bool_t fCanNormalize;  the tree can be normalised ;  ; UInt_t fCurrentDepth;  internal variable, counting the depth of the tree during insertion ;  ; std::vector< Float_t > fMax [2];  RMS for signal and background for each variable. ;  ; std::vector< Float_t > fMeans [2];  mean for signal and background for each variable ;  ; std::vector< Float_t ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1BinarySearchTree.html:5397,reduce,reduce,5397,doc/master/classTMVA_1_1BinarySearchTree.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1BinarySearchTree.html,1,['reduce'],['reduce']
Energy Efficiency," along Y . Definition at line 386 of file TCanvas.cxx. ◆ CopyPixmaps(). void TCanvas::CopyPixmaps ; (; ). overrideprivatevirtual . Copy the canvas pixmap of the pad to the canvas. ; Implements TVirtualPad.; Definition at line 833 of file TCanvas.cxx. ◆ CreatePainter(). void TCanvas::CreatePainter ; (; ). private . Probably, TPadPainter must be placed in a separate ROOT module - ""padpainter"" (the same as ""histpainter""). ; But now, it's directly in a gpad dir, so, in case of default painter, no *.so should be loaded, no need in plugin managers. May change in future. ; Definition at line 2582 of file TCanvas.cxx. ◆ DeclFileName(). static const char * TCanvas::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 238 of file TCanvas.h. ◆ Delete(). void TCanvas::Delete ; (; Option_t * ; option = """"). inlineoverridevirtual . Delete this object. ; Typically called as a command via the interpreter. Normally use ""delete"" operator when object has been allocated on the heap. ; Reimplemented from TObject.; Definition at line 120 of file TCanvas.h. ◆ DeleteCanvasPainter(). void TCanvas::DeleteCanvasPainter ; (; ). assert on IsBatch() == false? ; Definition at line 2613 of file TCanvas.cxx. ◆ Destructor(). void TCanvas::Destructor ; (; ). Actual canvas destructor. ; Definition at line 692 of file TCanvas.cxx. ◆ DisconnectWidget(). void TCanvas::DisconnectWidget ; (; ). Used by friend class TCanvasImp. ; Definition at line 2545 of file TCanvas.cxx. ◆ Draw(). void TCanvas::Draw ; (; Option_t * ; option = """"). overridevirtual . Draw a canvas. ; If a canvas with the name is already on the screen, the canvas is repainted. This function is useful when a canvas object has been saved in a Root file. One can then do: Root > TFile::Open(""file.root"");; Root > canvas->Draw();; TFile::Openstatic TFile * Open(const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledD",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTCanvas.html:69532,allocate,allocated,69532,doc/v632/classTCanvas.html,https://root.cern,https://root.cern/doc/v632/classTCanvas.html,1,['allocate'],['allocated']
Energy Efficiency," along Y . Definition at line 389 of file TCanvas.cxx. ◆ CopyPixmaps(). void TCanvas::CopyPixmaps ; (; ). overrideprivatevirtual . Copy the canvas pixmap of the pad to the canvas. ; Implements TVirtualPad.; Definition at line 836 of file TCanvas.cxx. ◆ CreatePainter(). void TCanvas::CreatePainter ; (; ). private . Probably, TPadPainter must be placed in a separate ROOT module - ""padpainter"" (the same as ""histpainter""). ; But now, it's directly in a gpad dir, so, in case of default painter, no *.so should be loaded, no need in plugin managers. May change in future. ; Definition at line 2595 of file TCanvas.cxx. ◆ DeclFileName(). static const char * TCanvas::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 238 of file TCanvas.h. ◆ Delete(). void TCanvas::Delete ; (; Option_t * ; option = """"). inlineoverridevirtual . Delete this object. ; Typically called as a command via the interpreter. Normally use ""delete"" operator when object has been allocated on the heap. ; Reimplemented from TObject.; Definition at line 120 of file TCanvas.h. ◆ DeleteCanvasPainter(). void TCanvas::DeleteCanvasPainter ; (; ). assert on IsBatch() == false? ; Definition at line 2626 of file TCanvas.cxx. ◆ Destructor(). void TCanvas::Destructor ; (; ). Actual canvas destructor. ; Definition at line 695 of file TCanvas.cxx. ◆ DisconnectWidget(). void TCanvas::DisconnectWidget ; (; ). Used by friend class TCanvasImp. ; Definition at line 2558 of file TCanvas.cxx. ◆ Draw(). void TCanvas::Draw ; (; Option_t * ; option = """"). overridevirtual . Draw a canvas. ; If a canvas with the name is already on the screen, the canvas is repainted. This function is useful when a canvas object has been saved in a Root file. One can then do: Root > TFile::Open(""file.root"");; Root > canvas->Draw();; TFile::Openstatic TFile * Open(const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledD",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCanvas.html:69908,allocate,allocated,69908,doc/master/classTCanvas.html,https://root.cern,https://root.cern/doc/master/classTCanvas.html,1,['allocate'],['allocated']
Energy Efficiency," and loggging; 807 virtual void drawSample (const std::vector<double>& /*input*/, const std::vector<double>& /* output */, const std::vector<double>& /* target */, double /* patternWeight */) {} ///< callback for monitoring and logging; 808 ; 809 virtual void computeResult (const Net& /* net */, std::vector<double>& /* weights */) {} ///< callback for monitoring and logging; 810 ; 811 virtual bool hasConverged (double testError); ///< has this training converged already?; 812 ; 813 EnumRegularization regularization () const { return m_regularization; } ///< some regularization of the DNN is turned on?; 814 ; 815 bool useMultithreading () const { return m_useMultithreading; } ///< is multithreading turned on?; 816 ; 817 ; 818 void pads (int numPads) { if (fMonitoring) fMonitoring->pads (numPads); } ///< preparation for monitoring; 819 void create (std::string histoName, int bins, double min, double max) { if (fMonitoring) fMonitoring->create (histoName, bins, min, max); } ///< for monitoring; 820 void create (std::string histoName, int bins, double min, double max, int bins2, double min2, double max2) { if (fMonitoring) fMonitoring->create (histoName, bins, min, max, bins2, min2, max2); } ///< for monitoring; 821 void addPoint (std::string histoName, double x) { if (fMonitoring) fMonitoring->addPoint (histoName, x); } ///< for monitoring; 822 void addPoint (std::string histoName, double x, double y) {if (fMonitoring) fMonitoring->addPoint (histoName, x, y); } ///< for monitoring; 823 void plot (std::string histoName, std::string options, int pad, EColor color) { if (fMonitoring) fMonitoring->plot (histoName, options, pad, color); } ///< for monitoring; 824 void clear (std::string histoName) { if (fMonitoring) fMonitoring->clear (histoName); } ///< for monitoring; 825 bool exists (std::string histoName) { if (fMonitoring) return fMonitoring->exists (histoName); return false; } ///< for monitoring; 826 ; 827 size_t convergenceCount () const { return m_convergenceCount; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/NeuralNet_8h_source.html:30681,monitor,monitoring,30681,doc/master/NeuralNet_8h_source.html,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html,1,['monitor'],['monitoring']
Energy Efficiency," and wmat. If nlmat > 0 then wmat contains the proportion by; weights of each basic material in the mixture. If nlmat < 0 then wmat contains the number of atoms; of a given kind into the molecule of the compound.; In this case, wmat in output is changed to relative; weights. void Medium(Int_t& kmed, const char* name, Int_t nmat, Int_t isvol, Int_t ifield, Double_t fieldm, Double_t tmaxfd, Double_t stemax, Double_t deemax, Double_t epsil, Double_t stmin, Float_t* ubuf, Int_t nbuf); The same as previous but in double precision; Define a medium.; kmed tracking medium number assigned; name tracking medium name; nmat material number; isvol sensitive volume flag; ifield magnetic field:; - ifield = 0 if no magnetic field;; - ifield = -1 if user decision in guswim;; - ifield = 1 if tracking performed with g3rkuta;; - ifield = 2 if tracking; fieldm max. field value (kilogauss); tmaxfd max. angle due to field (deg/step); stemax max. step allowed; deemax max. fraction of energy lost in a step; epsil tracking precision (cm); stmin min. step due to continuous processes (cm); ubuf pointer to an array of user words; nbuf number of user words; performed with g3helix; ifield = 3 if tracking performed with g3helx3. void Matrix(Int_t& krot, Double_t thetaX, Double_t phiX, Double_t thetaY, Double_t phiY, Double_t thetaZ, Double_t phiZ); The same as previous but in double precision; Define a rotation matrix; krot rotation matrix number assigned; thetaX polar angle for axis X; phiX azimuthal angle for axis X; thetaY polar angle for axis Y; phiY azimuthal angle for axis Y; thetaZ polar angle for axis Z; phiZ azimuthal angle for axis Z. Int_t Gsvolu(const char* name, const char* shape, Int_t nmed, Double_t* upar, Int_t np). functions from GGEOM. Create a new volume; name Volume name; shape Volume type; nmed Tracking medium number; np Number of shape parameters; upar Vector containing shape parameters; The same as previous but in double precision. void Gsdvn2(const char* name, const char* mo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TVirtualMCGeometry.html:10807,energy,energy,10807,root/html528/TVirtualMCGeometry.html,https://root.cern,https://root.cern/root/html528/TVirtualMCGeometry.html,6,['energy'],['energy']
Energy Efficiency," arguments values, when command element clicked in the browser. Example of the command which executes arbitrary string in application via ProcessLine looks like:; serv->RegisterCommand(""/Process"", ""%arg1%"");; When registering command, one could specify icon name which will be displayed with the command.; serv->RegisterCommand(""/DoSomething"", ""SomeFunction()"", ""rootsys/icons/ed_execute.png"");; In example usage of images from $ROOTSYS/icons directory is shown. One could prepend button; string to the icon name to let browser show command as extra button. In last case one could hide command element from elements list:; serv->Hide(""/DoSomething"");; One can find example of command interface usage in tutorials/http/httpcontrol.C macro.; 1.5 Customize user interface; JSROOT is used to implement UI for the THttpServer. Default webpage shows list of registered objects on the left side and drawing area on the right side - see example. JSROOT allows to configure different parameters via URL - like monitoring interval or name of displayed items item=Files/job1.root/hpxpy&opt=colz&monitoring=1000.; Some of such parameters can be configured already on the server:; serv->SetItemField(""/"", ""_monitoring"", ""1000""); // monitoring interval in ms; serv->SetItemField(""/"", ""_drawitem"", ""Files/job1.root/hpxpy""); // item to draw; serv->SetItemField(""/"", ""_drawopt"", ""colz"");; In such case URL parameters are not required - specified item will be displayed automatically when web page is opened. One also can configure to display several items at once. For that one also can configure layout of the drawing area:; serv->SetItemField(""/"", ""_layout"", ""grid2x2""); // layout for drawing area; serv->SetItemField(""/"", ""_drawitem"", ""[Files/job1.root/hpxpy,Files/job1.root/hpx]""); // items; serv->SetItemField(""/"", ""_drawopt"", ""[colz,hist]""); // options; One also can change appearance of hierarchy browser on the left side of the web page:; serv->SetItemField(""/"", ""_browser"", ""off""); // allowed ""fix"" (default),",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/HttpServer/HttpServer.html:6265,monitor,monitoring,6265,root/htmldoc/guides/HttpServer/HttpServer.html,https://root.cern,https://root.cern/root/htmldoc/guides/HttpServer/HttpServer.html,1,['monitor'],['monitoring']
Energy Efficiency," as if Build or BuildOld was never called on it (usef...Definition TStreamerInfo.cxx:2616; TStreamerInfo::GetElementsTObjArray * GetElements() const overrideDefinition TStreamerInfo.h:163; TStreamerInfo::fSizeInt_t fSize!size of the persistent classDefinition TStreamerInfo.h:92; TStreamerInfo::GetTypedValueAuxstatic T GetTypedValueAux(Int_t type, void *ladd, int k, Int_t len)Get the value from inside a collection.Definition TStreamerInfo.cxx:4338; TStreamerInfo::GenerateDeclarationvoid GenerateDeclaration(FILE *fp, FILE *sfp, const TList *subClasses, Bool_t top=kTRUE)Write the Declaration of class.Definition TStreamerInfo.cxx:3668; TStreamerInfo::PrintValueAuxstatic void PrintValueAux(char *ladd, Int_t atype, TStreamerElement *aElement, Int_t aleng, Int_t *count)print value of element in object at pointer, type atype, leng aleng or *count The function may be cal...Definition TStreamerInfo.cxx:5429; TStreamerInfo::NewArrayvoid * NewArray(Long_t nElements, void *ary=nullptr) overrideAn array of emulated objects is created at address ary, if ary is null, we allocate memory for the ar...Definition TStreamerInfo.cxx:4918; TStreamerInfo::GetStreamerElementTStreamerElement * GetStreamerElement(const char *datamember, Int_t &offset) const overrideReturn the StreamerElement of ""datamember"" inside our class or any of its base classes.Definition TStreamerInfo.cxx:4212; TStreamerInfo::GetCheckSumUInt_t GetCheckSum() const overrideDefinition TStreamerInfo.h:159; TStreamerInfo::Compilevoid Compile() overrideloop on the TStreamerElement list regroup members with same type Store predigested information into l...Definition TStreamerInfoActions.cxx:2972; TStreamerInfo::BuildCheckvoid BuildCheck(TFile *file=nullptr, Bool_t load=kTRUE) overrideCheck if built and consistent with the class dictionary.Definition TStreamerInfo.cxx:729; TStreamerInfo::CompareContentBool_t CompareContent(TClass *cl, TVirtualStreamerInfo *info, Bool_t warn, Bool_t complete, TFile *file) overrideReturn True if",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TStreamerInfo_8cxx_source.html:287279,allocate,allocate,287279,doc/master/TStreamerInfo_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TStreamerInfo_8cxx_source.html,1,['allocate'],['allocate']
Energy Efficiency," as non-staged; I, nostagedcheck: do not check the actual stage status on selected files. 'process' field:; N, noaction: do nothing on the selected files; P, fullproc: open the selected files and extract the meta information; L, locateonly: only locate the selected files; S, stageonly: issue a stage request for the selected files not yet staged. 'auxiliary' field; V, verbose: notify the actions. Returns 0 on success, -1 if any failure occurs. Int_t ScanDataSet(const char* uri, UInt_t option = kReopen | kDebug); Scans the dataset indicated by <uri> and returns the number of missing files.; Returns -1 if any failure occurs.; For more details, see documentation of; ScanDataSet(TFileCollection *dataset, const char *option). void GetQuota(const char* group, const char* user, const char* dsName, TFileCollection* dataset). Gets quota information from this dataset. void ShowQuota(const char* opt); Display quota information. void PrintUsedSpace(). Prints the quota. void MonitorUsedSpace(TVirtualMonitoringWriter* monitoring). Log info to the monitoring server. Long64_t GetGroupUsed(const char* group). Returns the used space of that group. Long64_t GetGroupQuota(const char* group). returns the quota a group is allowed to have. void UpdateUsedSpace(); updates the used space maps. Int_t RegisterDataSet(const char* uri, TFileCollection* dataSet, const char* opt); Register a dataset, perfoming quota checkings, if needed.; Returns 0 on success, -1 on failure. Int_t NotifyUpdate(const char* group = 0, const char* user = 0, const char* dspath = 0, Long_t mtime = 0, const char* checksum = 0); Save into the <datasetdir>/dataset.list file the name of the last updated; or created or modified dataset; Returns 0 on success, -1 on error. Int_t ClearCache(const char* uri); Clear cached information matching uri. Int_t ShowCache(const char* uri); Show cached information matching uri. TString CreateUri(const char* dsGroup = 0, const char* dsUser = 0, const char* dsName = 0, const char* dsTree = ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TDataSetManager.html:15465,monitor,monitoring,15465,root/html602/TDataSetManager.html,https://root.cern,https://root.cern/root/html602/TDataSetManager.html,2,['monitor'],['monitoring']
Energy Efficiency," as well because those routines call this one. An example of a tree with branches with objects allocated; and owned by us:. TFile* f1 = new TFile(""myfile_original.root"");; TTree* t1 = (TTree*) f->Get(""MyTree"");; TFile* f2 = new TFile(""myfile_copy.root"", ""recreate"");; TTree* t2 = t1->Clone(0);; for (Int_t i = 0; i < 10; ++i) {; t1->GetEntry(i);; t2->Fill();; }; t2->Write(); delete f2;; f2 = 0;; delete f1;; f1 = 0;. An example of a branch with an object allocated by us,; but owned by the caller:. TFile* f = new TFile(""myfile.root"", ""recreate"");; TTree* t = new TTree(""t"", ""A test tree.""); Event* event = 0;; TBranchElement* br = t->Branch(""event."", &event);; for (Int_t i = 0; i < 10; ++i) {; ... Fill event with meaningful data in some way.; t->Fill();; }; t->Write();; delete event;; event = 0;; delete f;; f = 0;. Notice that the only difference between this example; and the following example is that the event pointer; is zero when the branch is created. An example of a branch with an object allocated and; owned by the caller:. TFile* f = new TFile(""myfile.root"", ""recreate"");; TTree* t = new TTree(""t"", ""A test tree.""); Event* event = new Event();; TBranchElement* br = t->Branch(""event."", &event);; for (Int_t i = 0; i < 10; ++i) {; ... Fill event with meaningful data in some way.; t->Fill();; }; t->Write();; delete event;; event = 0;; delete f;; f = 0;. If AutoDelete is on (see TBranch::SetAutoDelete),; the top level objet will be deleted and recreate; each time an entry is read, whether or not the; TTree owns the object. void SetBasketSize(Int_t buffsize); -- Reset the basket size for all sub-branches of this branch element. void SetBranchCount(TBranchElement* bre); -- Set the branch counter for this branch. Bool_t SetMakeClass(Bool_t decomposeObj = kTRUE); Set the branch in a mode where the object are decomposed; (Also known as MakeClass mode).; Return whether the setting was possible (it is not possible for; TBranch and TBranchObject). void SetObject(void* objadd); Set ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TBranchElement.html:29237,allocate,allocated,29237,root/html528/TBranchElement.html,https://root.cern,https://root.cern/root/html528/TBranchElement.html,6,['allocate'],['allocated']
Energy Efficiency," as well because those routines call this one. An example of a tree with branches with objects allocated; and owned by us:. TFile* f1 = new TFile(""myfile_original.root"");; TTree* t1 = (TTree*) f->Get(""MyTree"");; TFile* f2 = new TFile(""myfile_copy.root"", ""recreate"");; TTree* t2 = t1->Clone(0);; for (Int_t i = 0; i < 10; ++i) {; t1->GetEntry(i);; t2->Fill();; }; t2->Write(); delete f2;; f2 = 0;; delete f1;; f1 = 0;. An example of a branch with an object allocated by us,; but owned by the caller:. TFile* f = new TFile(""myfile.root"", ""recreate"");; TTree* t = new TTree(""t"", ""A test tree.""); Event* event = 0;; TBranchElement* br = t->Branch(""event."", &event);; for (Int_t i = 0; i < 10; ++i) {; ... Fill event with meaningful data in some way.; t->Fill();; }; t->Write();; delete event;; event = 0;; delete f;; f = 0;. Notice that the only difference between this example; and the following example is that the event pointer; is zero when the branch is created. An example of a branch with an object allocated and; owned by the caller:. TFile* f = new TFile(""myfile.root"", ""recreate"");; TTree* t = new TTree(""t"", ""A test tree.""); Event* event = new Event();; TBranchElement* br = t->Branch(""event."", &event);; for (Int_t i = 0; i < 10; ++i) {; ... Fill event with meaningful data in some way.; t->Fill();; }; t->Write();; delete event;; event = 0;; delete f;; f = 0;. If AutoDelete is on (see TBranch::SetAutoDelete),; the top level objet will be deleted and recreate; each time an entry is read, whether or not the; TTree owns the object. void SetBasketSize(Int_t buffsize); -- Reset the basket size for all sub-branches of this branch element. void SetBranchCount(TBranchElement* bre); -- Set the branch counter for this branch. void SetObject(void* objadd); Set object this branch is pointing to. void SetTargetClassName(const char* name); Set the name of the class of the in-memory object into which the data will; loaded. void SetupAddresses(); -- If the branch address is not set, we set all a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TBranchElement.html:25970,allocate,allocated,25970,root/html526/TBranchElement.html,https://root.cern,https://root.cern/root/html526/TBranchElement.html,1,['allocate'],['allocated']
Energy Efficiency," at a point x Use the private method DoDerivative. ; Definition at line 263 of file IFunction.h. ◆ DoDerivative(). virtual double ROOT::Math::IGradientFunctionOneDim::DoDerivative ; (; double ; x); const. privatepure virtual . Function to evaluate the derivative with respect each coordinate. To be implemented by the derived class. ; Implemented in ROOT::Math::WrappedTF1, ROOT::Math::GradFunctor1D, and ROOT::Math::Polynomial. ◆ FdF() [1/2]. void ROOT::Math::IGradientFunctionOneDim::FdF ; (; const double * ; x, . double & ; f, . double * ; df . ); const. inline . Compatibility method with multi-dimensional interface for Gradient and function evaluation. ; Definition at line 282 of file IFunction.h. ◆ FdF() [2/2]. virtual void ROOT::Math::IGradientFunctionOneDim::FdF ; (; double ; x, . double & ; f, . double & ; df . ); const. inlinevirtual . Optimized method to evaluate at the same time the function value and derivative at a point x. ; Often both value and derivatives are needed and it is often more efficient to compute them at the same time. Derived class should implement this method if performances play an important role and if it is faster to evaluate value and derivative at the same time. ; Reimplemented in ROOT::Math::WrappedTF1, and ROOT::Math::Polynomial.; Definition at line 275 of file IFunction.h. ◆ Gradient(). void ROOT::Math::IGradientFunctionOneDim::Gradient ; (; const double * ; x, . double * ; g . ); const. inline . Compatibility method with multi-dimensional interface for Gradient. ; Definition at line 269 of file IFunction.h. ◆ HasGradient(). bool ROOT::Math::IGradientFunctionOneDim::HasGradient ; (; ); const. inlineoverridevirtual . Reimplemented from ROOT::Math::IBaseFunctionOneDim.; Definition at line 284 of file IFunction.h. Libraries for ROOT::Math::IGradientFunctionOneDim:. [legend]; The documentation for this class was generated from the following file:; math/mathcore/inc/Math/IFunction.h. ROOTMathIGradientFunctionOneDim. ROOT master - Reference ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1IGradientFunctionOneDim.html:4614,efficient,efficient,4614,doc/master/classROOT_1_1Math_1_1IGradientFunctionOneDim.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IGradientFunctionOneDim.html,1,['efficient'],['efficient']
Energy Efficiency," at line 82 of file PtEtaPhiM4D.h. ◆ PtEtaPhiM4D() [4/4]. template<class ScalarType > . ROOT::Math::PtEtaPhiM4D< ScalarType >::PtEtaPhiM4D ; (; const PtEtaPhiM4D< ScalarType > & ; v). inline . copy constructor ; Definition at line 91 of file PtEtaPhiM4D.h. Member Function Documentation. ◆ E(). template<class ScalarType > . Scalar ROOT::Math::PtEtaPhiM4D< ScalarType >::E ; (; ); const. inline . Energy (timelike component of momentum-energy 4-vector) ; Definition at line 198 of file PtEtaPhiM4D.h. ◆ E2(). template<class ScalarType > . Scalar ROOT::Math::PtEtaPhiM4D< ScalarType >::E2 ; (; ); const. inline . energy squared ; Definition at line 189 of file PtEtaPhiM4D.h. ◆ Et(). template<class ScalarType > . Scalar ROOT::Math::PtEtaPhiM4D< ScalarType >::Et ; (; ); const. inline . transverse energy ; Definition at line 250 of file PtEtaPhiM4D.h. ◆ Et2(). template<class ScalarType > . Scalar ROOT::Math::PtEtaPhiM4D< ScalarType >::Et2 ; (; ); const. inline . transverse energy squared ; Definition at line 241 of file PtEtaPhiM4D.h. ◆ Eta(). template<class ScalarType > . Scalar ROOT::Math::PtEtaPhiM4D< ScalarType >::Eta ; (; ); const. inline . Definition at line 142 of file PtEtaPhiM4D.h. ◆ GetCoordinates() [1/2]. template<class ScalarType > . void ROOT::Math::PtEtaPhiM4D< ScalarType >::GetCoordinates ; (; Scalar & ; pt, . Scalar & ; eta, . Scalar & ; phi, . Scalar & ; mass . ); const. inline . get internal data into 4 Scalar numbers ; Definition at line 134 of file PtEtaPhiM4D.h. ◆ GetCoordinates() [2/2]. template<class ScalarType > . void ROOT::Math::PtEtaPhiM4D< ScalarType >::GetCoordinates ; (; Scalar ; dest[]); const. inline . get internal data into an array of 4 Scalar numbers ; Definition at line 118 of file PtEtaPhiM4D.h. ◆ M(). template<class ScalarType > . Scalar ROOT::Math::PtEtaPhiM4D< ScalarType >::M ; (; ); const. inline . M() is the invariant mass; in this coordinate system it can be negagative if set that way. ; Definition at line 148 of file PtEtaPhiM4D.h. ◆ ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1PtEtaPhiM4D.html:6518,energy,energy,6518,doc/master/classROOT_1_1Math_1_1PtEtaPhiM4D.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1PtEtaPhiM4D.html,1,['energy'],['energy']
Energy Efficiency," at once. multi.bin; perform several requests at once, return result in binary form. All data will be automatically zipped if ‘.gz’ extension is appended. Like:; [shell] wget http://localhost:8080/Objects/subfolder/obj/root.json.gz; If the access to the server is restricted with htdigest, it is recommended to use the curl program since only curl correctly implements such authentication method. The command will look like:; [shell] curl --user ""accout:password"" http://localhost:8080/Objects/subfolder/obj/root.json --digest -o root.json; 1.9.1 Objects data access in JSON format; Request root.json implemented with TBufferJSON class. TBufferJSON generates such object representation, which could be directly used in JSROOT for drawing. root.json request returns either complete object or just object member like:; [shell] wget http://localhost:8080/Objects/subfolder/obj/fTitle/root.json; The result will be: ""title"".; For the root.json request one could specify the ‘compact’ parameter, which allow to reduce the number of spaces and new lines without data lost. This parameter can have values from ‘0’ (no compression) till ‘3’ (no spaces and new lines at all). In addition, one can use simple compression algorithm for big arrays. If compact=‘10’, zero values in the begin and at the end of the array will be excluded. If compact=‘20’, similar values or large zero gaps in-between will be compressed. Such array compression support in JSROOT from version 4.8.2.; Usage of root.json request is about as efficient as binary root.bin request. Comparison of different request methods with TH2 histogram from hsimple.C shown in the table:. Request; Size. root.bin; 7672 bytes. root.bin.gz; 1582 bytes. root.json; 8570 bytes. root.json?compact=3; 6004 bytes. root.json?compact=23; 5216 bytes. root.json.gz?compact=23; 1855 bytes. One should remember that JSON representation always includes names of the data fields which are not present in the binary representation. Even then the size difference is ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/HttpServer/HttpServer.html:15693,reduce,reduce,15693,root/htmldoc/guides/HttpServer/HttpServer.html,https://root.cern,https://root.cern/root/htmldoc/guides/HttpServer/HttpServer.html,1,['reduce'],['reduce']
Energy Efficiency," auto validColumnNames = GetValidatedColumnNames(nColumns, columns);; 1647 CheckAndFillDSColumns(validColumnNames, ColTypes_t());; 1648 ; 1649 using Helper_t = RDFInternal::ForeachSlotHelper<F>;; 1650 using Action_t = RDFInternal::RAction<Helper_t, Proxied>;; 1651 ; 1652 auto action = std::make_unique<Action_t>(Helper_t(std::move(f)), validColumnNames, fProxiedPtr, fColRegister);; 1653 ; 1654 fLoopManager->Run();; 1655 }; 1656 ; 1657 // clang-format off; 1658 ////////////////////////////////////////////////////////////////////////////; 1659 /// \brief Execute a user-defined reduce operation on the values of a column.; 1660 /// \tparam F The type of the reduce callable. Automatically deduced.; 1661 /// \tparam T The type of the column to apply the reduction to. Automatically deduced.; 1662 /// \param[in] f A callable with signature `T(T,T)`; 1663 /// \param[in] columnName The column to be reduced. If omitted, the first default column is used instead.; 1664 /// \return the reduced quantity wrapped in a ROOT::RDF:RResultPtr.; 1665 ///; 1666 /// A reduction takes two values of a column and merges them into one (e.g.; 1667 /// by summing them, taking the maximum, etc). This action performs the; 1668 /// specified reduction operation on all processed column values, returning; 1669 /// a single value of the same type. The callable f must satisfy the general; 1670 /// requirements of a *processing function* besides having signature `T(T,T)`; 1671 /// where `T` is the type of column columnName.; 1672 ///; 1673 /// The returned reduced value of each thread (e.g. the initial value of a sum) is initialized to a; 1674 /// default-constructed T object. This is commonly expected to be the neutral/identity element for the specific; 1675 /// reduction operation `f` (e.g. 0 for a sum, 1 for a product). If a default-constructed T does not satisfy this; 1676 /// requirement, users should explicitly specify an initialization value for T by calling the appropriate `Reduce`; 1677 /// over",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RInterface_8hxx_source.html:93158,reduce,reduced,93158,doc/master/RInterface_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html,1,['reduce'],['reduced']
Energy Efficiency," avoid memory; fragmentation, but you worsen it because the TClonesArray itself; is a rather heavy structure, and there is quite some code in the; destructor, so you have more memory fragmentation and slower code. NOTE 2. When investigating misuse of TClonesArray, please make sure of the following:. * Use Clear() or Clear(""C"") instead of Delete(). This will improve; program execution time.; * TClonesArray object classes containing pointers allocate memory.; To avoid causing memory leaks, special Clear(""C"") must be used; for clearing TClonesArray. When option ""C"" is specified, ROOT; automatically executes the Clear() method (by default it is; empty contained in TObject). This method must be overridden in; the relevant TClonesArray object class, implementing the reset; procedure for pointer objects.; * If the objects are added using the placement new then the Clear must; deallocate the memory.; * If the objects are added using TClonesArray::ConstructedAt then the; heap-based memory can stay allocated and reused as the constructor is; not called for already constructed/added object.; * To reduce memory fragmentation, please make sure that the; TClonesArrays are not destroyed and created on every event. They; must only be constructed/destructed at the beginning/end of the; run. Function Members (Methods); public:. virtual~TClonesArray(); voidAbsorbObjects(TClonesArray* tc); voidAbsorbObjects(TClonesArray* tc, Int_t idx1, Int_t idx2); voidTObject::AbstractMethod(const char* method) const; virtual voidTObjArray::Add(TObject* obj); virtual voidAddAfter(const TObject*, TObject*); virtual voidTCollection::AddAll(const TCollection* col); virtual voidAddAt(TObject*, Int_t); virtual voidAddAtAndExpand(TObject*, Int_t); virtual Int_tAddAtFree(TObject*); virtual voidAddBefore(const TObject*, TObject*); virtual voidAddFirst(TObject*); virtual voidAddLast(TObject*); TObject*AddrAt(Int_t idx); voidTCollection::AddVector(TObject* obj1); virtual TObject*TObjArray::After(const TObject*",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TClonesArray.html:4420,allocate,allocated,4420,root/html604/TClonesArray.html,https://root.cern,https://root.cern/root/html604/TClonesArray.html,1,['allocate'],['allocated']
Energy Efficiency," axis.Definition TAxis.h:31; TAxis::GetTitleconst char * GetTitle() const overrideReturns title of object.Definition TAxis.h:135; TAxis::GetBinCentervirtual Double_t GetBinCenter(Int_t bin) constReturn center of bin.Definition TAxis.cxx:478; TAxis::GetXmaxDouble_t GetXmax() constDefinition TAxis.h:140; TAxis::FindBinvirtual Int_t FindBin(Double_t x)Find bin number corresponding to abscissa x.Definition TAxis.cxx:293; TAxis::SaveAttributesvoid SaveAttributes(std::ostream &out, const char *name, const char *subname) overrideSave axis attributes as C++ statement(s) on output stream out.Definition TAxis.cxx:710; TAxis::SetLimitsvirtual void SetLimits(Double_t xmin, Double_t xmax)Definition TAxis.h:164; TAxis::GetXminDouble_t GetXmin() constDefinition TAxis.h:139; TBrowserUsing a TBrowser one can browse all ROOT objects.Definition TBrowser.h:37; TBufferBuffer base class used for serializing objects.Definition TBuffer.h:43; TClass::Newvoid * New(ENewType defConstructor=kClassNew, Bool_t quiet=kFALSE) constReturn a pointer to a newly allocated object of this class.Definition TClass.cxx:5045; TCollection::SetOwnervirtual void SetOwner(Bool_t enable=kTRUE)Set whether this collection is the owner (enable==true) of its content.Definition TCollection.cxx:746; TF1AbsCompositionDefinition TF1AbsComposition.h:16; TF1AbsComposition::IsATClass * IsA() const overrideDefinition TF1AbsComposition.h:28; TF1ConvolutionClass wrapping convolution of two functions.Definition TF1Convolution.h:20; TF1Convolution::GetNparInt_t GetNpar() constDefinition TF1Convolution.h:68; TF1Convolution::GetParNameconst char * GetParName(Int_t ipar) constDefinition TF1Convolution.h:71; TF1NormSumClass adding two functions: c1*f1+c2*f2.Definition TF1NormSum.h:19; TF1NormSum::GetParNameconst char * GetParName(Int_t ipar) constDefinition TF1NormSum.h:66; TF1NormSum::GetParametersstd::vector< double > GetParameters() constReturn array of parameters.Definition TF1NormSum.cxx:289; TF1NormSum::GetNparInt_t GetNpar()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TF1_8cxx_source.html:171160,allocate,allocated,171160,doc/master/TF1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TF1_8cxx_source.html,1,['allocate'],['allocated']
Energy Efficiency," based on range.; 1586 /// \param[in] end Final entry number (excluded) considered for this range. 0 means that the range goes until the end of the dataset.; 1587 /// \return a node of the computation graph for which the range is defined.; 1588 ///; 1589 /// See the other Range overload for a detailed description.; 1590 // clang-format on; 1591 RInterface<RDFDetail::RRange<Proxied>, DS_t> Range(unsigned int end) { return Range(0, end, 1); }; 1592 ; 1593 // clang-format off; 1594 ////////////////////////////////////////////////////////////////////////////; 1595 /// \brief Execute a user-defined function on each entry (*instant action*).; 1596 /// \param[in] f Function, lambda expression, functor class or any other callable object performing user defined calculations.; 1597 /// \param[in] columns Names of the columns/branches in input to the user function.; 1598 ///; 1599 /// The callable `f` is invoked once per entry. This is an *instant action*:; 1600 /// upon invocation, an event loop as well as execution of all scheduled actions; 1601 /// is triggered.; 1602 /// Users are responsible for the thread-safety of this callable when executing; 1603 /// with implicit multi-threading enabled (i.e. ROOT::EnableImplicitMT).; 1604 ///; 1605 /// ### Example usage:; 1606 /// ~~~{.cpp}; 1607 /// myDf.Foreach([](int i){ std::cout << i << std::endl;}, {""myIntColumn""});; 1608 /// ~~~; 1609 // clang-format on; 1610 template <typename F>; 1611 void Foreach(F f, const ColumnNames_t &columns = {}); 1612 {; 1613 using arg_types = typename TTraits::CallableTraits<decltype(f)>::arg_types_nodecay;; 1614 using ret_type = typename TTraits::CallableTraits<decltype(f)>::ret_type;; 1615 ForeachSlot(RDFInternal::AddSlotParameter<ret_type>(f, arg_types()), columns);; 1616 }; 1617 ; 1618 // clang-format off; 1619 ////////////////////////////////////////////////////////////////////////////; 1620 /// \brief Execute a user-defined function requiring a processing slot index on each entry (*instant ac",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RInterface_8hxx_source.html:89767,schedul,scheduled,89767,doc/master/RInterface_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html,1,['schedul'],['scheduled']
Energy Efficiency," be a unit TVector3; by TRotation (see TRotation); TRotation r;; v.Transform(r); or v *= r; // Attention v=M*v; rOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t rDefinition TGWin32VirtualXProxy.cxx:168; TRotation<div class=""legacybox""><h2>Legacy Code</h2> TRotation is a legacy interface: there will be no bug fix...Definition TRotation.h:20. Misc; Angle between two vectors; Double_t a = v1.Angle(v2.Vect()); // get angle between v1 and v2; a#define a(i)Definition RSha256.hxx:99; Light-cone components; Member functions Plus() and Minus() return the positive and negative light-cone components:; Double_t pcone = v.Plus();; Double_t mcone = v.Minus();; CAVEAT: The values returned are T{+,-}Z. It is known that some authors find it easier to define these components as (T{+,-}Z)/sqrt(2). Thus check what definition is used in the physics you're working in and adapt your code accordingly.; Transformation by TLorentzRotation; A general Lorentz transformation see class TLorentzRotation can be used by the Transform() member function, the *= or operator of the TLorentzRotation class:; TLorentzRotation l;; v.Transform(l);; v = l*v; or v *= l; // Attention v = l*v; TLorentzRotation<div class=""legacybox""><h2>Legacy Code</h2> TLorentzRotation is a legacy interface: there will be no ...Definition TLorentzRotation.h:20; lTLine lDefinition textangle.C:4. Definition at line 31 of file TLorentzVector.h. Public Types; enum  { ;   kX =0; , kY =1; , kZ =2; , kT =3; , ;   kNUM_COORDINATES =4; , kSIZE =kNUM_COORDINATES. };  ; typedef Double_t Scalar;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTLorentzVector.html:7535,adapt,adapt,7535,doc/master/classTLorentzVector.html,https://root.cern,https://root.cern/doc/master/classTLorentzVector.html,1,['adapt'],['adapt']
Energy Efficiency," be fSizex*fSizey except for direct FOURIER, FOUR-WALSh, FOUR-HAAR. These need fSizex*2*fSizey length to store real and imaginary coefficients; fSizex,fSizey-basic dimensions of source and dest spectra. Transform methods; Goal: to analyse experimental data using orthogonal transforms. orthogonal transforms can be successfully used for the processing of nuclear spectra (not only); they can be used to remove high frequency noise, to increase signal-to-background ratio as well as to enhance low intensity components [1], to carry out e.g. Fourier analysis etc.; we have implemented the function for the calculation of the commonly used orthogonal transforms as well as functions for the filtration and enhancement of experimental data. References:; [1] C.V. Hampton, B. Lian, Wm. C. McHarris: Fast-Fourier-transform spectral enhancement techniques for gamma-ray spectroscopy. NIM A353 (1994) 280-284.; [2] Morhac M., Matouoek V., New adaptive Cosine-Walsh transform and its application to nuclear data compression, IEEE Transactions on Signal Processing 48 (2000) 2693.; [3] Morhac M., Matouoek V., Data compression using new fast adaptive Cosine-Haar transforms, Digital Signal Processing 8 (1998) 63.; [4] Morhac M., Matouoek V.: Multidimensional nuclear data compression using fast adaptive Walsh-Haar transform. Acta Physica Slovaca 51 (2001) 307. Example 1 - script Transform2.c:. Fig. 1 Original two-dimensional noisy spectrum. Fig. 2 Transformed spectrum from Fig. 1 using Cosine transform. Energy of the transformed data is concentrated around the beginning of the coordinate system; Script:; Example to illustrate Transform function (class TSpectrumTransform2). To execute this example, do; root > .x Transform2.C; void Transform2() {; Int_t i, j;; Int_t nbinsx = 256;; Int_t nbinsy = 256;; Int_t xmin = 0;; Int_t xmax = nbinsx;; Int_t ymin = 0;; Int_t ymax = nbinsy;; Double_t ** source = new Double_t *[nbinsx];; Double_t ** dest = new Double_t *[nbinsx];; for (i=0;i<nbinsx;i++); source[",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSpectrum2Transform.html:31514,adapt,adaptive,31514,doc/master/classTSpectrum2Transform.html,https://root.cern,https://root.cern/doc/master/classTSpectrum2Transform.html,1,['adapt'],['adaptive']
Energy Efficiency," been used at the training of the .xml weight file at hand ;  ; void DeclareOptions ();  ; void FindMVACut (MethodBase *method);  find the CUT on the individual MVA that defines an event as correct or misclassified (to be used in the boosting process) ;  ; Double_t GetBoostROCIntegral (Bool_t, Types::ETreeType, Bool_t CalcOverlapIntergral=kFALSE);  Calculate the ROC integral of a single classifier or even the whole boosted classifier. ;  ; void Init ();  ; void InitHistos ();  initialisation routine ;  ; void MonitorBoost (Types::EBoostStage stage, UInt_t methodIdx=0);  fill various monitoring histograms from information of the individual classifiers that have been boosted. ;  ; void PrintResults (const TString &, std::vector< Double_t > &, const Double_t) const;  ; void ProcessOptions ();  process user options ;  ; void ResetBoostWeights ();  resetting back the boosted weights of the events to 1 ;  ; Double_t SingleBoost (MethodBase *method);  ; void SingleTrain ();  initialization ;  ; virtual void TestClassification ();  initialization ;  ; virtual void WriteEvaluationHistosToFile (Types::ETreeType treetype);  writes all MVA evaluation histograms to file ;  ; void WriteMonitoringHistosToFile (void) const;  write special monitoring histograms to file dummy implementation here --------------— ;  . Private Attributes; Double_t fAdaBoostBeta;  ADA boost parameter, default is 1. ;  ; Double_t fBaggedSampleFraction;  rel.Size of bagged sample ;  ; TString fBoostedMethodName;  details of the boosted classifier ;  ; TString fBoostedMethodOptions;  options ;  ; TString fBoostedMethodTitle;  title ;  ; UInt_t fBoostNum;  Number of times the classifier is boosted. ;  ; TString fBoostType;  string specifying the boost type ;  ; Double_t fBoostWeight;  the weight used to boost the next classifier ;  ; std::vector< TH1 * > fBTrainBgdMVAHist;  ; std::vector< TH1 * > fBTrainSigMVAHist;  ; DataSetManager * fDataSetManager;  DSMTEST. ;  ; Bool_t fDetailedMonitoring;  produce detail",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodBoost.html:28486,monitor,monitoring,28486,doc/master/classTMVA_1_1MethodBoost.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBoost.html,1,['monitor'],['monitoring']
Energy Efficiency," binSampler.fitTo(data);; dataOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void dataDefinition TGWin32VirtualXProxy.cxx:104; RooBinSamplingPdfThe RooBinSamplingPdf is supposed to be used as an adapter between a continuous PDF and a binned dist...Definition RooBinSamplingPdf.h:28; RooBinSamplingPdf::integratorstd::unique_ptr< ROOT::Math::IntegratorOneDim > & integrator() constDirect access to the unique_ptr holding the integrator that's used to sample the bins.Definition RooBinSamplingPdf.cxx:278; RooBinSamplingPdf::observableconst RooAbsReal & observable() constDefinition RooBinSamplingPdf.h:111; When a PDF is wrapped with a RooBinSamplingPDF, just use the bin sampling PDF instead of the original one for fits or plotting etc. NoteThe binning will be taken from the observable. Make sure that this binning is the same as the one of the dataset that should be fit. Use RooRealVar::setBinning() to adapt it. Instruct test statistics to carry out this wrapping automatically: pdf.fitTo(data, IntegrateBins(<precision>));; RooAbsPdf::fitToRooFit::OwningPtr< RooFitResult > fitTo(RooAbsData &data, CmdArgs_t const &... cmdArgs)Fit PDF to given dataset.Definition RooAbsPdf.h:157; RooBinSamplingPdf::pdfconst RooAbsPdf & pdf() constDefinition RooBinSamplingPdf.h:110; This method is especially useful when used with a simultaneous PDF, since each component will automatically be wrapped, depending on the value of precision:; precision < 0.: None of the PDFs are touched, bin sampling is off.; precision = 0.: Continuous PDFs that are fit to a RooDataHist are wrapped into a RooBinSamplingPdf. The target precision forwarded to the integrator is 1.E-4 (the default argument of the constructor).; precision > 0.: All continuous PDFs are automatically wrapped into a RooBinSamplingPdf, regardless of what data they are fit to (see next paragraph). The same ‘'precision’` is used for all integ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBinSamplingPdf.html:2489,adapt,adapt,2489,doc/master/classRooBinSamplingPdf.html,https://root.cern,https://root.cern/doc/master/classRooBinSamplingPdf.html,1,['adapt'],['adapt']
Energy Efficiency," both and let the compile optimize it. */; 445#define ERROR_TRY_AGAIN(err) \; 446 (((err) == EAGAIN) || ((err) == EWOULDBLOCK) || ((err) == EINTR)); 447#endif; 448 ; 449#if defined(USE_ZLIB); 450#include ""zconf.h""; 451#include ""zlib.h""; 452#endif; 453 ; 454 ; 455/********************************************************************/; 456/* CivetWeb configuration defines */; 457/********************************************************************/; 458 ; 459/* Maximum number of threads that can be configured.; 460 * The number of threads actually created depends on the ""num_threads""; 461 * configuration parameter, but this is the upper limit. */; 462#if !defined(MAX_WORKER_THREADS); 463#define MAX_WORKER_THREADS (1024 * 64) /* in threads (count) */; 464#endif; 465 ; 466/* Timeout interval for select/poll calls.; 467 * The timeouts depend on ""*_timeout_ms"" configuration values, but long; 468 * timeouts are split into timouts as small as SOCKET_TIMEOUT_QUANTUM.; 469 * This reduces the time required to stop the server. */; 470#if !defined(SOCKET_TIMEOUT_QUANTUM); 471#define SOCKET_TIMEOUT_QUANTUM (2000) /* in ms */; 472#endif; 473 ; 474/* Do not try to compress files smaller than this limit. */; 475#if !defined(MG_FILE_COMPRESSION_SIZE_LIMIT); 476#define MG_FILE_COMPRESSION_SIZE_LIMIT (1024) /* in bytes */; 477#endif; 478 ; 479#if !defined(PASSWORDS_FILE_NAME); 480#define PASSWORDS_FILE_NAME "".htpasswd""; 481#endif; 482 ; 483/* Initial buffer size for all CGI environment variables. In case there is; 484 * not enough space, another block is allocated. */; 485#if !defined(CGI_ENVIRONMENT_SIZE); 486#define CGI_ENVIRONMENT_SIZE (4096) /* in bytes */; 487#endif; 488 ; 489/* Maximum number of environment variables. */; 490#if !defined(MAX_CGI_ENVIR_VARS); 491#define MAX_CGI_ENVIR_VARS (256) /* in variables (count) */; 492#endif; 493 ; 494/* General purpose buffer size. */; 495#if !defined(MG_BUF_LEN) /* in bytes */; 496#define MG_BUF_LEN (1024 * 8); 497#endif; 498 ; 499 ; 500/*",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:16661,reduce,reduces,16661,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,2,['reduce'],['reduces']
Energy Efficiency," branch, base class branch, data member branch, or top-level branch.; which do not have a branch count and are a counter. void ReadLeavesCustomStreamer(TBuffer& b); -- Read leaves into i/o buffers for this branch.; Non TObject, Non collection classes with a custom streamer. void ReleaseObject(); -- Delete any object we may have allocated on a previous call to SetAddress. void Reset(Option_t* option = """"); -- Reset a Branch. Existing i/o buffers are deleted.; Entries, max and min are reset. void ResetAddress(); Set branch address to zero and free all allocated memory. void ResetDeleteObject(); -- Release ownership of any allocated objects. Note: This interface was added so that clone trees could; be told they do not own the allocated objects. void SetAddress(void* addobj); -- Point this branch at an object. For a sub-branch, addr is a pointer to the branch object. For a top-level branch the meaning of addr is as follows:. If addr is zero, then we allocate a branch object; internally and the branch is the owner of the allocated; object, not the caller. However the caller may obtain; a pointer to the branch object with GetObject(). Example:. branch->SetAddress(0);; Event* event = branch->GetObject();; ... Do some work. If addr is not zero, but the pointer addr points at is; zero, then we allocate a branch object and set the passed; pointer to point at the allocated object. The caller; owns the allocated object and is responsible for deleting; it when it is no longer needed. Example:. Event* event = 0;; branch->SetAddress(&event);; ... Do some work.; delete event;; event = 0;. If addr is not zero and the pointer addr points at is; also not zero, then the caller has allocated a branch; object and is asking us to use it. The caller owns it; and must delete it when it is no longer needed. Example:. Event* event = new Event();; branch->SetAddress(&event);; ... Do some work.; delete event;; event = 0;. These rules affect users of TTree::Branch(),; TTree::SetBranchAddress(), ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TBranchElement.html:27164,allocate,allocate,27164,root/html528/TBranchElement.html,https://root.cern,https://root.cern/root/html528/TBranchElement.html,4,['allocate'],"['allocate', 'allocated']"
Energy Efficiency," by a Long64_t,; 142 THnI (typedef for THnT<Int_t>): bin content held by an Int_t,; 143 THnS (typedef for THnT<Short_t>): bin content held by a Short_t,; 144 THnC (typedef for THnT<Char_t>): bin content held by a Char_t,; 145 ; 146They take name and title, the number of dimensions, and for each dimension; 147the number of bins, the minimal, and the maximal value on the dimension's; 148axis. A TH2F h(""h"",""h"",10, 0., 10., 20, -5., 5.) would correspond to; 149 ; 150 Int_t bins[2] = {10, 20};; 151 Double_t xmin[2] = {0., -5.};; 152 Double_t xmax[2] = {10., 5.};; 153 THnF hn(""hn"", ""hn"", 2, bins, xmin, xmax);; 154 ; 155## Filling; 156A THn is filled just like a regular histogram, using; 157THn::Fill(x, weight), where x is a n-dimensional Double_t value.; 158To take errors into account, Sumw2() must be called before filling the; 159histogram.; 160Storage is allocated when the first bin content is stored.; 161 ; 162## Projections; 163The dimensionality of a THn can be reduced by projecting it to; 1641, 2, 3, or n dimensions, which can be represented by a TH1, TH2, TH3, or; 165a THn. See the Projection() members. To only project parts of the; 166histogram, call; 167 ; 168 hn->GetAxis(12)->SetRange(from_bin, to_bin);; 169 ; 170## Conversion from other histogram classes; 171The static factory function THn::CreateHn() can be used to create a THn; 172from a TH1, TH2, TH3, THnSparse and (for copying) even from a THn. The; 173created THn will have compatble storage type, i.e. calling CreateHn() on; 174a TH2F will create a THnF.; 175*/; 176 ; 177ClassImp(THn);; 178 ; 179////////////////////////////////////////////////////////////////////////////////; 180/// Construct a THn.; 181 ; 182THn::THn(const char* name, const char* title,; 183 Int_t dim, const Int_t* nbins,; 184 const Double_t* xmin, const Double_t* xmax):; 185 THnBase(name, title, dim, nbins, xmin, xmax),; 186 fSumw2(dim, nbins, kTRUE /*overflow*/); 187{; 188}; 189 ; 190THn::THn(const char *name, const char *title, Int_t dim",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THn_8cxx_source.html:6073,reduce,reduced,6073,doc/master/THn_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THn_8cxx_source.html,1,['reduce'],['reduced']
Energy Efficiency," cache observable is in nset then this is; the convolution observable plus; any member of nset that is either a RooCategory,; or was previously specified through setCacheObservables(). In case the cache observable is not in nset, then it is; the convolution observable plus; all member of nset that are observables of this p.d.f. . Implements RooAbsCachedPdf.; Definition at line 778 of file RooFFTConvPdf.cxx. ◆ actualParameters(). RooFit::OwningPtr< RooArgSet > RooFFTConvPdf::actualParameters ; (; const RooArgSet & ; nset); const. overrideprotectedvirtual . Return the parameters on which the cache depends given normalization set nset. ; For this p.d.f these are the parameters of the input p.d.f. but never the convolution variable, in case it is not part of nset. ; Implements RooAbsCachedPdf.; Definition at line 833 of file RooFFTConvPdf.cxx. ◆ bufferFraction(). double RooFFTConvPdf::bufferFraction ; (; ); const. inline . Return value of buffer fraction applied in FFT calculation array beyond either end of the observable domain to reduce cyclical effects. ; Definition at line 43 of file RooFFTConvPdf.h. ◆ bufferStrategy(). BufStrat RooFFTConvPdf::bufferStrategy ; (; ); const. inline . Return the strategy currently used to fill the buffer: 'Extend' means is that the input p.d.f convolution observable range is widened to include the buffer range 'Flat' means that the buffer is filled with the p.d.f. ; value at the boundary of the observable range 'Mirror' means that the buffer is filled with a mirror image of the p.d.f. around the convolution observable boundary ; Definition at line 52 of file RooFFTConvPdf.h. ◆ cacheObservables(). const RooArgSet & RooFFTConvPdf::cacheObservables ; (; ); const. inline . Definition at line 39 of file RooFFTConvPdf.h. ◆ calcParams(). void RooFFTConvPdf::calcParams ; (; ). protected . (Re)calculate effective parameters of this p.d.f. ; Definition at line 957 of file RooFFTConvPdf.cxx. ◆ Class(). static TClass * RooFFTConvPdf::Class ; (; ).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFFTConvPdf.html:88135,reduce,reduce,88135,doc/master/classRooFFTConvPdf.html,https://root.cern,https://root.cern/doc/master/classRooFFTConvPdf.html,1,['reduce'],['reduce']
Energy Efficiency," can access a file using the specified access mode.; NB: for the time being mode is ignored for XROOTD (just checks existence; of the file or directory).; Mode is the same as for the Unix access(2) function.; Attention, bizarre convention of return value!!. int Unlink(const char* path); Unlink 'path' on the remote server system.; Returns 0 on success, -1 otherwise. Bool_t IsOnline(const char* path); Check if the file defined by 'path' is ready to be used. Bool_t Prepare(const char* path, UChar_t opt = 8, UChar_t prio = 0); Issue a prepare request for file defined by 'path'. Int_t Prepare(TCollection* paths, UChar_t opt = 8, UChar_t prio = 0, TString* buf = 0); Issue a prepare request for a list of files defined by 'paths', which must; be of one of the following types: TFileInfo, TUrl, TObjString.; On output, bufout, if defined, points to a buffer form that can be used; with GetPathsInfo.; Return the number of paths found or -1 if any error occured. Bool_t GetPathsInfo(const char* paths, UChar_t* info); Retrieve status of a '\n'-separated list of files in 'paths'.; The information is returned as one UChar_t per file in 'info';; 'info' must be allocated by the caller. Bool_t IsPathLocal(const char* path); Returns TRUE if the url in 'path' points to the local file system.; This is used to avoid going through the NIC card for local operations. Int_t Locate(const char* path, TString& endurl); Get end-point url of a file. Info is returned in eurl.; The function returns 0 in case of success and 1 if the file could; not be stat'ed. void * GetDirPtr() const; { return fDirp; }. virtual ~TXNetSystem(); { }. » Author: Frank Winklmeier, Fabrizio Furano » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/netx:$Id: TXNetSystem.h 41574 2011-10-25 13:42:03Z ganis $ » Last generated: 2011-12-02 14:29; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TXNetSystem.html:22786,allocate,allocated,22786,root/html532/TXNetSystem.html,https://root.cern,https://root.cern/root/html532/TXNetSystem.html,1,['allocate'],['allocated']
Energy Efficiency," can be decoded by xml parser. Bool_t AddStyleSheet(XMLNodePointer_t parent, const char* href, const char* type = ""text/css"", const char* title = 0, int alternate = -1, const char* media = 0, const char* charset = 0); Adds style sheet definition to the specified node; Creates <?xml-stylesheet alternate=""yes"" title=""compact"" href=""small-base.css"" type=""text/css""?>; Attributes href and type must be supplied,; other attributes: title, alternate, media, charset are optional; if alternate==0, attribyte alternate=""no"" will be created,; if alternate>0, attribute alternate=""yes""; if alternate<0, attribute will not be created. Bool_t AddDocStyleSheet(XMLDocPointer_t xmldoc, const char* href, const char* type = ""text/css"", const char* title = 0, int alternate = -1, const char* media = 0, const char* charset = 0); Add style sheet definition on the top of document. void UnlinkNode(XMLNodePointer_t node); unlink (dettach) xml node from parent. void FreeNode(XMLNodePointer_t xmlnode); release all memory, allocated fro this node and; destroyes node itself. void UnlinkFreeNode(XMLNodePointer_t xmlnode); combined operation. Unlink node and free used memory. const char* GetNodeName(XMLNodePointer_t xmlnode); returns name of xmlnode. const char* GetNodeContent(XMLNodePointer_t xmlnode); get contents (if any) of xml node. XMLNodePointer_t GetChild(XMLNodePointer_t xmlnode); returns first child of xml node. XMLNodePointer_t GetParent(XMLNodePointer_t xmlnode); returns parent of xmlnode. XMLNodePointer_t GetNext(XMLNodePointer_t xmlnode); return next to xmlnode node. void ShiftToNext(XMLNodePointer_t& xmlnode, bool tonode = true); shifts specified node to next. Bool_t IsEmptyNode(XMLNodePointer_t xmlnode); return kTRUE is this is node with special data like comments to data processing instructions. void SkipEmpty(XMLNodePointer_t& xmlnode); Skip all current empty nodes and locate on first ""true"" node. void CleanNode(XMLNodePointer_t xmlnode); remove all childs node from xmlnode. XMLDocPoi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TXMLEngine.html:13105,allocate,allocated,13105,root/html528/TXMLEngine.html,https://root.cern,https://root.cern/root/html528/TXMLEngine.html,3,['allocate'],['allocated']
Energy Efficiency," can be decoded by xml parser. Bool_t AddStyleSheet(XMLNodePointer_t parent, const char* href, const char* type = ""text/css"", const char* title = 0, int alternate = -1, const char* media = 0, const char* charset = 0); Adds style sheet definition to the specified node; Creates <?xml-stylesheet alternate=""yes"" title=""compact"" href=""small-base.css"" type=""text/css""?>; Attributes href and type must be supplied,; other attributes: title, alternate, media, charset are optional; if alternate==0, attribyte alternate=""no"" will be created,; if alternate>0, attribute alternate=""yes""; if alternate<0, attribute will not be created. Bool_t AddDocStyleSheet(XMLDocPointer_t xmldoc, const char* href, const char* type = ""text/css"", const char* title = 0, int alternate = -1, const char* media = 0, const char* charset = 0); Add style sheet definition on the top of document. void UnlinkNode(XMLNodePointer_t node); unlink (dettach) xml node from parent. void FreeNode(XMLNodePointer_t xmlnode); release all memory, allocated fro this node and; destroyes node itself. void UnlinkFreeNode(XMLNodePointer_t xmlnode); combined operation. Unlink node and free used memory. const char* GetNodeName(XMLNodePointer_t xmlnode); returns name of xmlnode. const char* GetNodeContent(XMLNodePointer_t xmlnode); get contents (if any) of xml node. void SetNodeContent(XMLNodePointer_t xmlnode, const char* content, Int_t len = 0); set content of the xml node; if old node content was exists, it will be replaced. void AddNodeContent(XMLNodePointer_t xmlnode, const char* content, Int_t len = 0); add new content of the xml node; old content will be preserved, one could mix content with child nodes. XMLNodePointer_t GetChild(XMLNodePointer_t xmlnode, Bool_t realnode = kTRUE); returns first child of xml node. XMLNodePointer_t GetParent(XMLNodePointer_t xmlnode); returns parent of xmlnode. XMLNodePointer_t GetNext(XMLNodePointer_t xmlnode, Bool_t realnode = kTRUE); return next to xmlnode node; if realnode==kTRUE, any spe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TXMLEngine.html:13574,allocate,allocated,13574,root/html534/TXMLEngine.html,https://root.cern,https://root.cern/root/html534/TXMLEngine.html,3,['allocate'],['allocated']
Energy Efficiency," change unexpectedly. . Definition at line 277 of file RooDataSet.cxx. ◆ RooDataSet() [3/5]. RooDataSet::RooDataSet ; (; RooStringView ; name, . RooStringView ; title, . RooDataSet * ; dset, . const RooArgSet & ; vars, . const char * ; cuts = nullptr, . const char * ; wgtVarName = nullptr . ). Constructor of a data set from (part of) an existing data set. ; The dimensions of the data set are defined by the 'vars' RooArgSet, which can be identical to 'dset' dimensions, or a subset thereof. The 'cuts' string is an optional RooFormula expression and can be used to select the subset of the data points in 'dset' to be copied. The cut expression can refer to any variable in the source dataset. For cuts involving variables other than those contained in the source data set, such as intermediate formula objects, use the equivalent constructor accepting RooFormulaVar reference as cut specification.; For most uses the RooAbsData::reduce() wrapper function, which uses this constructor, is the most convenient way to create a subset of an existing data ; Definition at line 539 of file RooDataSet.cxx. ◆ RooDataSet() [4/5]. RooDataSet::RooDataSet ; (; RooStringView ; name, . RooStringView ; title, . RooDataSet * ; dset, . const RooArgSet & ; vars, . const RooFormulaVar & ; cutVar, . const char * ; wgtVarName = nullptr . ). Constructor of a data set from (part of) an existing data set. ; The dimensions of the data set are defined by the 'vars' RooArgSet, which can be identical to 'dset' dimensions, or a subset thereof. The 'cutVar' formula variable is used to select the subset of data points to be copied. For subsets without selection on the data points, or involving cuts operating exclusively and directly on the data set dimensions, the equivalent constructor with a string based cut expression is recommended.; For most uses the RooAbsData::reduce() wrapper function, which uses this constructor, is the most convenient way to create a subset of an existing data ; Definition at line 5",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooDataSet.html:40837,reduce,reduce,40837,doc/master/classRooDataSet.html,https://root.cern,https://root.cern/doc/master/classRooDataSet.html,1,['reduce'],['reduce']
Energy Efficiency, char * TMVA::OptimizeConfigParameters::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMVA::OptimizeConfigParameters::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 100 of file OptimizeConfigParameters.h. ◆ DeclFileName(). static const char * TMVA::OptimizeConfigParameters::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 100 of file OptimizeConfigParameters.h. ◆ EstimatorFunction(). Double_t TMVA::OptimizeConfigParameters::EstimatorFunction ; (; std::vector< Double_t > & ; pars). privatevirtual . return the estimator (from current FOM) for the fitting interface ; Implements TMVA::IFitterTarget.; Definition at line 307 of file OptimizeConfigParameters.cxx. ◆ GetBkgEffAtSigEff(). Double_t TMVA::OptimizeConfigParameters::GetBkgEffAtSigEff ; (; Double_t ; sigEff = 0.5). private . calculate the background efficiency for a given signal efficiency ; adapted by marc-.nosp@m.oliv.nosp@m.ier.b.nosp@m.ettl.nosp@m.er@ce.nosp@m.rn.c.nosp@m.h ; Definition at line 546 of file OptimizeConfigParameters.cxx. ◆ GetBkgRejAtSigEff(). Double_t TMVA::OptimizeConfigParameters::GetBkgRejAtSigEff ; (; Double_t ; sigEff = 0.5). private . calculate the background rejection for a given signal efficiency ; adapted by marc-.nosp@m.oliv.nosp@m.ier.b.nosp@m.ettl.nosp@m.er@ce.nosp@m.rn.c.nosp@m.h ; Definition at line 583 of file OptimizeConfigParameters.cxx. ◆ GetFOM(). Double_t TMVA::OptimizeConfigParameters::GetFOM ; (; ). private . Return the Figure of Merit (FOM) used in the parameter optimization process. ; Definition at line 350 of file OptimizeConfigParameters.cxx. ◆ GetMethod(). MethodBase * TMVA::OptimizeConfigParameters::GetMethod ; (; ). inlineprivate . Definition at line 72 of file OptimizeConfigParameters.h. ◆ GetMVADists(). void TMVA::OptimizeConfigParameters::GetMVADists ; (; ). private . fill the private histograms ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1OptimizeConfigParameters.html:6308,adapt,adapted,6308,doc/master/classTMVA_1_1OptimizeConfigParameters.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1OptimizeConfigParameters.html,1,['adapt'],['adapted']
Energy Efficiency," char *title, const RooArgList &funcObs, const RooArgList &histObs, const RooDataHist &dhist, Int_t intOrder=0);  Constructor from a RooDataHist. ;  ;  RooHistFunc (const char *name, const char *title, const RooArgList &pdfObs, const RooArgList &histObs, std::unique_ptr< RooDataHist > dhist, int intOrder=0);  ;  RooHistFunc (const char *name, const char *title, const RooArgSet &vars, const RooDataHist &dhist, Int_t intOrder=0);  Constructor from a RooDataHist. ;  ;  RooHistFunc (const char *name, const char *title, const RooArgSet &vars, std::unique_ptr< RooDataHist > dhist, int intOrder=0);  ;  RooHistFunc (const RooHistFunc &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooHistFunc () override;  ; double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const override;  Return integral identified by 'code'. ;  ; std::list< double > * binBoundaries (RooAbsRealLValue &, double, double) const override;  Return sampling hint for making curves of (projections) of this function as the recursive division strategy of RooCurve cannot deal efficiently with the vertical lines that occur in a non-interpolated histogram. ;  ; std::string buildCallToAnalyticIntegral (int code, const char *rangeName, RooFit::Detail::CodeSquashContext &ctx) const override;  This function defines the analytical integral translation for the class. ;  ; TObject * clone (const char *newname) const override;  ; RooDataHist * cloneAndOwnDataHist (const char *newname="""");  Replaces underlying RooDataHist with a clone, which is now owned, and returns the clone. ;  ; RooDataHist & dataHist ();  Return RooDataHist that is represented. ;  ; const RooDataHist & dataHist () const;  Return RooDataHist that is represented. ;  ; bool forceAnalyticalInt (const RooAbsArg &dep) const override;  ; Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const override;  Determine integration scenario. ;  ; Int_t getBin () const;  Compute bin numbe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooHistFunc.html:1744,efficient,efficiently,1744,doc/master/classRooHistFunc.html,https://root.cern,https://root.cern/doc/master/classRooHistFunc.html,1,['efficient'],['efficiently']
Energy Efficiency," clang; llvm / clang were updated to r227800. This includes everything from the clang 3.6 release.; Dictionary Generation; Detect usage of #pragma once for inlined headers.; Turn on verbosity of genreflex if the VERBOSE environment variable is defined.; Optimise forward declarations in rootmap files in order to make their interpretation faster.; Propagate attributes specified in xml selection files to selected classes even when selected through typedefs.; Optimise selection procedure caching selected declarations in the selection rules, therewith avoiding to query the AST twice.; Include in the PCH all the STL and C headers to guarantee portability of binaries from SLC6 to CC7.; I/O Libraries; I/O New functionalities. Support for forward_list and I/O of unordered stl containers.; Support for std::complex. I/O Behavior change. The I/O now properly skip the content of base class onfile that have been removed from the in-memory class layout.; The scheduling the I/O customization rules within a StreamerInfo is now as soon as possible, i.e. after all sources have been read. One significant consequence is that now when an object is stored in a split branch the rule is associtated with the branch of the last of the rule’s sources rather than the last of the object’s data member.; Properly support TStreamerInfo written by ROOT v4.00.; Fix the ordering of the keys in a TFile being written; in particular fixing the result of GetKey and FindKey which were no longer returning the lastest cycle for a TFile being written since v5.34/11. Networking Libraries; HTTP Server; Command Interface; One can now register an arbitrary command to the server, which become visible in the web browser. Then, when the item is clicked by the user, the command ends-up in a gROOT->ProcessLineSync() call.; Custom Properties; Custom properties can be configured for any item in the server. For example, one could configure an icon for each item visible in the browser. Or one could ‘hide’ any item from the",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v604/release-notes.html:8106,schedul,scheduling,8106,doc/v604/release-notes.html,https://root.cern,https://root.cern/doc/v604/release-notes.html,1,['schedul'],['scheduling']
Energy Efficiency," class . ◆ Class_Name(). static const char * RooNonCPEigenDecay::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooNonCPEigenDecay::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 119 of file RooNonCPEigenDecay.h. ◆ clone(). TObject * RooNonCPEigenDecay::clone ; (; const char * ; newname); const. inlineoverridevirtual . Implements RooAbsArg.; Definition at line 80 of file RooNonCPEigenDecay.h. ◆ coefAnalyticalIntegral(). double RooNonCPEigenDecay::coefAnalyticalIntegral ; (; Int_t ; coef, . Int_t ; code, . const char * ; rangeName = nullptr . ); const. overridevirtual . correct for the right/wrong charge... ; Reimplemented from RooAbsAnaConvPdf.; Definition at line 279 of file RooNonCPEigenDecay.cxx. ◆ coefficient(). double RooNonCPEigenDecay::coefficient ; (; Int_t ; basisIndex); const. overridevirtual . B0 : _tag == -1; B0bar : _tag == +1; rho+ : _rhoQ == +1; rho- : _rhoQ == -1; the charge correction factor ""_correctQ"" serves to implement misidentified charges . Implements RooAbsAnaConvPdf.; Definition at line 209 of file RooNonCPEigenDecay.cxx. ◆ DeclFileName(). static const char * RooNonCPEigenDecay::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 119 of file RooNonCPEigenDecay.h. ◆ generateEvent(). void RooNonCPEigenDecay::generateEvent ; (; Int_t ; code). overridevirtual . Interface for generation of an event using the algorithm corresponding to the specified code. ; The meaning of each code is defined by the getGenerator() implementation. The default implementation does nothing. ; Reimplemented from RooAbsPdf.; Definition at line 383 of file RooNonCPEigenDecay.cxx. ◆ getCoefAnalyticalIntegral(). Int_t RooNonCPEigenDecay::getCoefAnalyticalIntegral ; (; Int_t ; coef, . RooArgSet & ; allVars, . RooArgSet & ; analVars, . const char * ; rangeName = nullptr . ); const. overridevirtual . Default impl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooNonCPEigenDecay.html:81401,charge,charge,81401,doc/master/classRooNonCPEigenDecay.html,https://root.cern,https://root.cern/doc/master/classRooNonCPEigenDecay.html,2,['charge'],"['charge', 'charges']"
Energy Efficiency," class RooAbsReal that binds generic C(++) functions to a RooAbsReal argument thus allowing generic C++ functions to be used as RooFit functions ;  CRooFunctor1DPdfBinding;  CRooFunctorBindingRooCFunction1Binding is a templated implementation of class RooAbsReal that binds generic C(++) functions to a RooAbsReal argument thus allowing generic C++ functions to be used as RooFit functions ;  CRooFunctorPdfBinding;  CRooGammaImplementation of the Gamma PDF for RooFit/RooStats ;  CRooGaussianPlain Gaussian p.d.f ;  CRooGaussKronrodIntegrator1DRooGaussKronrodIntegrator1D implements the Gauss-Kronrod integration algorithm ;  CRooGaussModelClass RooGaussModel implements a RooResolutionModel that models a Gaussian distribution ;  CRooGenContextClass RooGenContext implement a universal generator context for all RooAbsPdf classes that do not have or need a specialized generator context ;  CRooGenericPdfRooGenericPdf is a concrete implementation of a probability density function, which takes a RooArgList of servers and a C++ expression string defining how its value should be calculated from the given list of servers ;  CRooGenFitStudyRooGenFitStudy is an abstract base class for RooStudyManager modules ;  CRooGenFunctionLightweight interface adaptor that exports a RooAbsReal as a ROOT::Math::IGenFunction ;  CRooGenPdfPdf;  CRooGenProdProjRooGenProdProj is an auxiliary class for RooProdPdf that calculates a general normalized projection of a product of non-factorizing PDFs, e.g ;  CRooGExpModelClass RooGExpModel is a RooResolutionModel implementation that models a resolution function that is the convolution of a Gaussian with a one-sided exponential ;  CRooGlobalFunc;  CRooGridRooGrid is a utility class for RooMCIntegrator which implements an adaptive multi-dimensional Monte Carlo numerical integration, following the VEGAS algorithm ;  CRooHashTableRooHashTable implements a hash table for TObjects ;  CRooHistA RooHist is a graphical representation of binned data based on the TGr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v616/annotated.html:115318,adapt,adaptor,115318,doc/v616/annotated.html,https://root.cern,https://root.cern/doc/v616/annotated.html,1,['adapt'],['adaptor']
Energy Efficiency," class charts. ROOT; » CORE; » BASE; » TQClass. class TQClass: public TQObject, public TClass. This is the ROOT implementation of the Qt object communication; mechanism (see also http://www.troll.no/qt/metaobjects.html). Signals and slots are used for communication between objects.; When an object has changed in some way that might be interesting; for the outside world, it emits a signal to tell whoever is; listening. All slots that are connected to this signal will be; activated (called). It is even possible to connect a signal; directly to another signal (this will emit the second signal; immediately whenever the first is emitted.) There is no limitation; on the number of slots that can be connected to a signal.; The slots will be activated in the order they were connected; to the signal. This mechanism allows objects to be easily reused,; because the object that emits a signal does not need to know; to which objects the signals are connected.; Together, signals and slots make up a powerfull component; programming mechanism. This implementation is provided by; Valeriy Onuchin (onuchin@sirius.ihep.su). Function Members (Methods); public:. TQClass(const char* name, Version_t cversion, const type_info& info, TVirtualIsAProxy* isa, ShowMembersFunc_t showmembers, const char* dfil = 0, const char* ifil = 0, Int_t dl = 0, Int_t il = 0); virtual~TQClass(); voidTObject::AbstractMethod(const char* method) const; static voidTClass::AddClass(TClass* cl); voidTClass::AddImplFile(const char* filename, int line); voidTClass::AddInstance(Bool_t heap = kFALSE); static Bool_tTClass::AddRule(const char* rule); voidTClass::AdoptMemberStreamer(const char* name, TMemberStreamer* strm); voidTClass::AdoptReferenceProxy(TVirtualRefProxy* proxy); voidTClass::AdoptSchemaRules(ROOT::TSchemaRuleSet* rules); voidTClass::AdoptStreamer(TClassStreamer* strm); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TQClass.html:1202,power,powerfull,1202,root/html534/TQClass.html,https://root.cern,https://root.cern/root/html534/TQClass.html,1,['power'],['powerfull']
Energy Efficiency," class charts. ROOT; » CORE; » BASE; » TQClass. class TQClass: public TQObject, public TClass. This is the ROOT implementation of the Qt object communication; mechanism (see also http://www.troll.no/qt/metaobjects.html). Signals and slots are used for communication between objects.; When an object has changed in some way that might be interesting; for the outside world, it emits a signal to tell whoever is; listening. All slots that are connected to this signal will be; activated (called). It is even possible to connect a signal; directly to another signal (this will emit the second signal; immediately whenever the first is emitted.) There is no limitation; on the number of slots that can be connected to a signal.; The slots will be activated in the order they were connected; to the signal. This mechanism allows objects to be easily reused,; because the object that emits a signal does not need to know; to which objects the signals are connected.; Together, signals and slots make up a powerfull component; programming mechanism. This implementation is provided by; Valeriy Onuchin (onuchin@sirius.ihep.su). Function Members (Methods); public:. TQClass(const char* name, Version_t cversion, const type_info& info, TVirtualIsAProxy* isa, ShowMembersFunc_t showmembers, const char* dfil = 0, const char* ifil = 0, Int_t dl = 0, Int_t il = 0); virtual~TQClass(); voidTObject::AbstractMethod(const char* method) const; static voidTClass::AddClass(TClass* cl); voidTClass::AddImplFile(const char* filename, int line); voidTClass::AddInstance(Bool_t heap = kFALSE); voidTClass::AddRef(TClassRef* ref); static Bool_tTClass::AddRule(const char* rule); voidTClass::AdoptMemberStreamer(const char* name, TMemberStreamer* strm); voidTClass::AdoptReferenceProxy(TVirtualRefProxy* proxy); voidTClass::AdoptSchemaRules(ROOT::TSchemaRuleSet* rules); voidTClass::AdoptStreamer(TClassStreamer* strm); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TQClass.html:1202,power,powerfull,1202,root/html528/TQClass.html,https://root.cern,https://root.cern/root/html528/TQClass.html,3,['power'],['powerfull']
Energy Efficiency," class charts. ROOT; » CORE; » BASE; » TQClass. class TQClass: public TQObject, public TClass. This is the ROOT implementation of the Qt object communication; mechanism (see also http://www.troll.no/qt/metaobjects.html). Signals and slots are used for communication between objects.; When an object has changed in some way that might be interesting; for the outside world, it emits a signal to tell whoever is; listening. All slots that are connected to this signal will be; activated (called). It is even possible to connect a signal; directly to another signal (this will emit the second signal; immediately whenever the first is emitted.) There is no limitation; on the number of slots that can be connected to a signal.; The slots will be activated in the order they were connected; to the signal. This mechanism allows objects to be easily reused,; because the object that emits a signal does not need to know; to which objects the signals are connected.; Together, signals and slots make up a powerfull component; programming mechanism. This implementation is provided by; Valeriy Onuchin (onuchin@sirius.ihep.su). Function Members (Methods); public:. virtual~TQClass(); voidTObject::AbstractMethod(const char* method) const; static voidTClass::AddClass(TClass* cl); static voidTClass::AddClassToDeclIdMap(TDictionary::DeclId_t id, TClass* cl); voidTClass::AddImplFile(const char* filename, int line); voidTClass::AddInstance(Bool_t heap = kFALSE); static Bool_tTClass::AddRule(const char* rule); voidTClass::AdoptMemberStreamer(const char* name, TMemberStreamer* strm); voidTClass::AdoptReferenceProxy(TVirtualRefProxy* proxy); voidTClass::AdoptSchemaRules(ROOT::TSchemaRuleSet* rules); voidTClass::AdoptStreamer(TClassStreamer* strm); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Int_tTClass::AutoBrowse(TObject* obj, TBrowser* browser); static Bool_tTQObject::BlockAllSignals(Bool_t b)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TQClass.html:1226,power,powerfull,1226,root/html602/TQClass.html,https://root.cern,https://root.cern/root/html602/TQClass.html,2,['power'],['powerfull']
Energy Efficiency," client activity on the cluster ;  CTProofMgrLiteBasic TProofMgr functionality implementation in the case of Lite session ;  ►CTProofMonSenderProvides the interface for PROOF monitoring to different writers ;  CTDSetPlet;  CTProofMonSenderMLTProofMonSender implementation for the ML writer ;  CTProofMonSenderSQLTProofMonSender implementation for the SQL writers ;  CTProofNodeInfoThe purpose of this class is to provide a complete node description for masters, submasters and workers ;  CTProofNodesPROOF worker node information ;  CTProofOutputFileClass to steer the merging of files produced on the workers ;  CTProofOutputListDerivation of TList with an overload of ls() and Print() allowing to filter out some of the variables ;  CTProofPerfAnalysisSet of tools to analyse the performance tree ;  ►CTProofPlayerInternal class steering processing in PROOF ;  CTCleanup;  CTProofPlayerLiteVersion of TProofPlayerRemote merges the functionality needed by clients and masters ;  CTProofPlayerLocal;  CTProofPlayerRemote;  CTProofPlayerSlave;  CTProofPlayerSuperMaster;  CTProofProgressDialog;  CTProofProgressInfo;  CTProofProgressLog;  CTProofProgressMemoryPlot;  CTProofProgressStatusContainer class for processing statistics ;  CTProofQueryResultTQueryResult version adapted to PROOF neeeds ;  CTProofResources;  CTProofResourcesStaticThe purpose of this class is to provide a standard interface to static config files ;  CTProofServClass providing the PROOF server ;  CTProofServLiteVersion of the PROOF worker server for local running ;  CTProofServLogHandler;  CTProofServLogHandlerGuard;  CTProofSuperMasterImplementation of TProof controlling PROOF federated clusters ;  CTProofVectorContainer;  ►CTProtoClassPersistent version of a TClass ;  CTProtoRealData;  CTPServerSocket;  CTPSocket;  CTPwdCtx;  CTPyArg;  CTPyClassGenerator;  CTPyDispatcher;  CTPyMultiGenFunction;  CTPyMultiGradFunction;  CTPyReturn;  CTPySelector;  ►CTPythia6TPythia is an interface class to F77 version of Pythia 6.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/annotated.html:179789,adapt,adapted,179789,doc/v608/annotated.html,https://root.cern,https://root.cern/doc/v608/annotated.html,4,['adapt'],['adapted']
Energy Efficiency," column. ; Template Parameters. FThe type of the reduce callable. Automatically deduced. ; TThe type of the column to apply the reduction to. Automatically deduced. . Parameters. [in]fA callable with signature T(T,T) ; [in]columnNameThe column to be reduced. If omitted, the first default column is used instead. ; [in]redIdentityThe reduced object of each thread is initialized to this value. . Returnsthe reduced quantity wrapped in a RResultPtr. Example usage:; auto sumOfIntColWithOffset = d.Reduce([](int x, int y) { return x + y; }, ""intCol"", 42);; See the description of the first Reduce overload for more information. ; Definition at line 1711 of file RInterface.hxx. ◆ Reduce() [2/2]. template<typename Proxied , typename DataSource = void> . template<typename F , typename T = typename TTraits::CallableTraits<F>::ret_type> . RResultPtr< T > ROOT::RDF::RInterface< Proxied, DataSource >::Reduce ; (; F ; f, . std::string_view ; columnName = """" . ). inline . Execute a user-defined reduce operation on the values of a column. ; Template Parameters. FThe type of the reduce callable. Automatically deduced. ; TThe type of the column to apply the reduction to. Automatically deduced. . Parameters. [in]fA callable with signature T(T,T) ; [in]columnNameThe column to be reduced. If omitted, the first default column is used instead. . Returnsthe reduced quantity wrapped in a ROOT::RDF:RResultPtr.; A reduction takes two values of a column and merges them into one (e.g. by summing them, taking the maximum, etc). This action performs the specified reduction operation on all processed column values, returning a single value of the same type. The callable f must satisfy the general requirements of a processing function besides having signature T(T,T) where T is the type of column columnName.; The returned reduced value of each thread (e.g. the initial value of a sum) is initialized to a default-constructed T object. This is commonly expected to be the neutral/identity element for the spe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:120351,reduce,reduce,120351,doc/master/classROOT_1_1RDF_1_1RInterface.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html,1,['reduce'],['reduce']
Energy Efficiency," component squared; ppv2 = v.Perp(v1); // get transverse component with respect; // to another vector; pp2v2 = v.Perp(v1);; there are two more set functions SetPtEtaPhiE(pt,eta,phi,e) and SetPtEtaPhiM(pt,eta,phi,m) for convenience.; 17.4.4 Arithmetic and Comparison Operators; The TLorentzVector class provides operators to add subtract or compare four-vectors:; v3 = -v1;; v1 = v2+v3;; v1+= v3;; v1 = v2 + v3;; v1-= v3;; if (v1 == v2) {...}; if (v1 != v3) {...}; 17.4.5 Magnitude/Invariant mass, beta, gamma, scalar product; The scalar product of two four-vectors is calculated with the (-,-,-,+)metric:; s = v1*v2 = t1*t2-x1*x2-y1*y2-z1*z2; The magnitude squared mag2 of a four-vector is therefore:; mag2 = v*v = t*t-x*x-y*y-z*z; If mag2 is negative: mag = -Sqrt(-mag*mag). The methods are:; Double_t s, s2;; s = v1.Dot(v2);// scalar product; s = v1*v2;// scalar product; s2 = v.Mag2();ors2 = v.M2();; s = v.Mag();s = v.M();; Since in case of momentum and energy the magnitude has the meaning of invariant mass TLorentzVector provides the more meaningful aliases M2() and M(). The methods Beta() and Gamma() returns beta and gamma = 1/Sqrt(1-beta*beta).; 17.4.6 Lorentz Boost; A boost in a general direction can be parameterized with three parameters which can be taken as the components of a three vector b=(bx,by,bz). With x=(x,y,z) and gamma=1/Sqrt(1-beta*beta) (beta being the module of vector b), an arbitrary active Lorentz boost transformation (from the rod frame to the original frame) can be written as:; x = x' + (gamma-1)/(beta*beta)*(b*x')*b + gamma*t'*b; t = gamma(t'+ b*x'); The Boost() method performs a boost transformation from the rod frame to the original frame. BoostVector() returns a TVector3 of the spatial components divided by the time component:; TVector3 b;; v.Boost(bx,by,bz);; v.Boost(b);; b = v.BoostVector();// b=(x/t,y/t,z/t); 17.4.7 Rotations; There are four sets of functions to rotate the TVector3 component of a TLorentzVector:; Around Axes:; v.RotateX(TMath::Pi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:869468,energy,energy,869468,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['energy'],['energy']
Energy Efficiency," const ROOT::Math::PtEtaPhiEVector p(lep_pt[i], lep_eta[i], lep_phi[i], lep_e[i]);; if (abs(z0[i] * sin(p.Theta())) < 0.5) {; if (idx == -1) idx = i;; else return -1; // Accept only events with exactly one good lepton; }; }; }; return idx;; }; """"""); ; for s in samples:; # Select events with electron or muon trigger and with a missing transverse energy above 30 GeV; df[s] = df[s].Filter(""trigE || trigM"")\; .Filter(""met_et > 30000""); ; # Perform preselection of highly isolated leptons; df[s] = df[s].Define(""goodlep"", ""lep_isTightID && lep_pt > 35000 && lep_ptcone30 / lep_pt < 0.1 && lep_etcone20 / lep_pt < 0.1"")\; .Filter(""ROOT::VecOps::Sum(goodlep) > 0""); ; # Find a single good lepton, otherwise return -1 as index; df[s] = df[s].Define(""idx_lep"", ""FindGoodLepton(goodlep, lep_type, lep_pt, lep_eta, lep_phi, lep_E, lep_trackd0pvunbiased, lep_tracksigd0pvunbiased, lep_z0)"")\; .Filter(""idx_lep != -1""); ; # Compute transverse mass of the W boson using the missing transverse energy and the good lepton; # Use only events with a transverse mass of the reconstructed W boson larger than 60 GeV; df[s] = df[s].Define(""mtw"", ""sqrt(2 * lep_pt[idx_lep] * met_et * (1 - cos(lep_phi[idx_lep] - met_phi)))"")\; .Filter(""mtw > 60000""); ; # Perform preselection of jets; df[s] = df[s].Filter(""ROOT::VecOps::Sum(jet_pt > 30000 && abs(jet_eta) < 2.5) > 0""); ; # Select events with two good jets and one b-jet and find the indices in the collections; df[s] = df[s].Define(""goodjet"", ""jet_pt > 60000 || abs(jet_eta) > 2.4 || jet_jvt > 0.59"")\; .Filter(""ROOT::VecOps::Sum(goodjet) == 2"")\; .Define(""goodbjet"", ""goodjet && jet_MV2c10 > 0.8244273"")\; .Filter(""ROOT::VecOps::Sum(goodbjet) == 1"")\; .Define(""idx_tagged"", ""ROOT::VecOps::ArgMax(goodjet && goodbjet)"")\; .Define(""idx_untagged"", ""ROOT::VecOps::ArgMax(goodjet && !goodbjet)""); ; # Select events based on the jet kinematics and the scalar sum of the transverse momentum; # from the lepton, jets and met above 195 GeV; df[s] = df[s].Filter(""abs(jet_eta[i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/df107__SingleTopAnalysis_8py.html:5353,energy,energy,5353,doc/master/df107__SingleTopAnalysis_8py.html,https://root.cern,https://root.cern/doc/master/df107__SingleTopAnalysis_8py.html,1,['energy'],['energy']
Energy Efficiency," const char * ; exclude . ). virtual . Partition dataset 'ds' accordingly to the servers. ; The returned TMap contains: <server> --> <subdataset> (TFileCollection) where <subdataset> is the subset of 'ds' on <server> The partitioning is done using all the URLs in the TFileInfo's, so the resulting datasets are not mutually exclusive. The string 'exclude' contains a comma-separated list of servers to exclude from the map. ; Definition at line 1006 of file TDataSetManager.cxx. ◆ GetUserUsedMap(). virtual TMap * TDataSetManager::GetUserUsedMap ; (; ). inlineprotectedvirtual . Definition at line 71 of file TDataSetManager.h. ◆ IsA(). TClass * TDataSetManager::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Reimplemented in TDataSetManagerFile.; Definition at line 158 of file TDataSetManager.h. ◆ MonitorUsedSpace(). void TDataSetManager::MonitorUsedSpace ; (; TVirtualMonitoringWriter * ; monitoring). virtual . Log info to the monitoring server. ; Definition at line 673 of file TDataSetManager.cxx. ◆ NotifyUpdate(). Int_t TDataSetManager::NotifyUpdate ; (; const char * ; group = 0, . const char * ; user = 0, . const char * ; dspath = 0, . Long_t ; mtime = 0, . const char * ; checksum = 0 . ). virtual . Save into the <datasetdir>/dataset.list file the name of the last updated or created or modified dataset Returns 0 on success, -1 on error. ; Reimplemented in TDataSetManagerFile.; Definition at line 773 of file TDataSetManager.cxx. ◆ operator=(). TDataSetManager & TDataSetManager::operator= ; (; const TDataSetManager & ; ). private . ◆ ParseDataSetSrvMaps(). TList * TDataSetManager::ParseDataSetSrvMaps ; (; const TString & ; srvmaps). static . Create a server mapping list from the content of 'srvmaps' Return the list (owned by the caller) or 0 if no valid info could be found) ; Definition at line 1867 of file TDataSetManager.cxx. ◆ ParseInitOpts(). void TDataSetManager::ParseInitOpts ; (; const char * ; opts).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDataSetManager.html:26899,monitor,monitoring,26899,doc/master/classTDataSetManager.html,https://root.cern,https://root.cern/doc/master/classTDataSetManager.html,1,['monitor'],['monitoring']
Energy Efficiency," const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Member Functions; void CalculatePrincipalComponents (const std::vector< Event * > &);  calculate the principal components for the signal and the background data it uses the MakePrincipal method of ROOT's TPrincipal class ;  ; void P2X (std::vector< Float_t > &, const std::vector< Float_t > &, Int_t cls) const;  Perform the back-transformation from the principal components pc, and return x It's the users responsibility to make sure that both x and pc are of the right size (i.e., memory must be allocated for p) ;  ; void X2P (std::vector< Float_t > &, const std::vector< Float_t > &, Int_t cls) const;  Calculate the principal components from the original data vector x, and return it in p (function extracted from TPrincipal::X2P) It's the users responsibility to make sure that both x and p are of the right size (i.e., memory must be allocated for p) ;  . Private Attributes; std::vector< TMatrixD * > fEigenVectors;  eigenvectors ;  ; std::vector< TVectorD * > fMeanValues;  mean values ;  . Additional Inherited Members;  Public Types inherited from TMVA::VariableTransformBase; typedef VectorOfCharAndInt::iterator ItVarTypeIdx;  ; typedef VectorOfCharAndInt::const_iterator ItVarTypeIdxConst;  ; typedef std::vector< std::pair< Char_t, UInt_t > > VectorOfCharAndInt;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; en",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1VariablePCATransform.html:13019,allocate,allocated,13019,doc/master/classTMVA_1_1VariablePCATransform.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1VariablePCATransform.html,1,['allocate'],['allocated']
Energy Efficiency," const char* cutSpec = 0, const char* cutRange = 0) const; { return moment(var,1,0,cutSpec,cutRange) ; }. Double_t sigma(RooRealVar& var, const char* cutSpec = 0, const char* cutRange = 0) const; { return sqrt(moment(var,2,cutSpec,cutRange)) ; }. Double_t skewness(RooRealVar& var, const char* cutSpec = 0, const char* cutRange = 0) const; { return standMoment(var,3,cutSpec,cutRange) ; }. Double_t kurtosis(RooRealVar& var, const char* cutSpec = 0, const char* cutRange = 0) const; { return standMoment(var,4,cutSpec,cutRange) ; }. Double_t covariance(RooRealVar& x, RooRealVar& y, const char* cutSpec = 0, const char* cutRange = 0) const; { return corrcov(x,y,cutSpec,cutRange,kFALSE) ; }. Double_t correlation(RooRealVar& x, RooRealVar& y, const char* cutSpec = 0, const char* cutRange = 0) const; { return corrcov(x,y,cutSpec,cutRange,kTRUE) ; }. TMatrixDSym* covarianceMatrix(const char* cutSpec = 0, const char* cutRange = 0) const; { return covarianceMatrix(*get(),cutSpec,cutRange) ; }. TMatrixDSym* correlationMatrix(const char* cutSpec = 0, const char* cutRange = 0) const; { return correlationMatrix(*get(),cutSpec,cutRange) ; }. TMatrixDSym* covarianceMatrix(const RooArgList& vars, const char* cutSpec = 0, const char* cutRange = 0) const; { return corrcovMatrix(vars,cutSpec,cutRange,kFALSE) ; }. TMatrixDSym* correlationMatrix(const RooArgList& vars, const char* cutSpec = 0, const char* cutRange = 0) const; { return corrcovMatrix(vars,cutSpec,cutRange,kTRUE) ; }. RooAbsData* cacheClone(const RooAbsArg* newCacheOwner, const RooArgSet* newCacheVars, const char* newName = 0). RooAbsData* reduceEng(const RooArgSet& varSubset, const RooFormulaVar* cutVar, const char* cutRange = 0, Int_t nStart = 0, Int_t nStop = 2000000000, Bool_t copyCache = kTRUE). » Last changed: Fri Dec 2 14:26:35 2011 » Last generated: 2011-12-02 14:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAbsData.html:38646,reduce,reduceEng,38646,root/html532/RooAbsData.html,https://root.cern,https://root.cern/root/html532/RooAbsData.html,1,['reduce'],['reduceEng']
Energy Efficiency," const char* cutSpec = 0, const char* cutRange = 0) const; { return moment(var,1,0,cutSpec,cutRange) ; }. Double_t sigma(RooRealVar& var, const char* cutSpec = 0, const char* cutRange = 0) const; { return sqrt(moment(var,2,cutSpec,cutRange)) ; }. Double_t skewness(RooRealVar& var, const char* cutSpec = 0, const char* cutRange = 0) const; { return standMoment(var,3,cutSpec,cutRange) ; }. Double_t kurtosis(RooRealVar& var, const char* cutSpec = 0, const char* cutRange = 0) const; { return standMoment(var,4,cutSpec,cutRange) ; }. Double_t covariance(RooRealVar& x, RooRealVar& y, const char* cutSpec = 0, const char* cutRange = 0) const; { return corrcov(x,y,cutSpec,cutRange,kFALSE) ; }. Double_t correlation(RooRealVar& x, RooRealVar& y, const char* cutSpec = 0, const char* cutRange = 0) const; { return corrcov(x,y,cutSpec,cutRange,kTRUE) ; }. TMatrixDSym* covarianceMatrix(const char* cutSpec = 0, const char* cutRange = 0) const; { return covarianceMatrix(*get(),cutSpec,cutRange) ; }. TMatrixDSym* correlationMatrix(const char* cutSpec = 0, const char* cutRange = 0) const; { return correlationMatrix(*get(),cutSpec,cutRange) ; }. TMatrixDSym* covarianceMatrix(const RooArgList& vars, const char* cutSpec = 0, const char* cutRange = 0) const; { return corrcovMatrix(vars,cutSpec,cutRange,kFALSE) ; }. TMatrixDSym* correlationMatrix(const RooArgList& vars, const char* cutSpec = 0, const char* cutRange = 0) const; { return corrcovMatrix(vars,cutSpec,cutRange,kTRUE) ; }. RooAbsData* cacheClone(const RooAbsArg* newCacheOwner, const RooArgSet* newCacheVars, const char* newName = 0). RooAbsData* reduceEng(const RooArgSet& varSubset, const RooFormulaVar* cutVar, const char* cutRange = 0, Int_t nStart = 0, Int_t nStop = 2000000000, Bool_t copyCache = kTRUE). » Last changed: Mon Dec 7 13:45:37 2009 » Last generated: 2009-12-07 13:45; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsData.html:37311,reduce,reduceEng,37311,root/html526/RooAbsData.html,https://root.cern,https://root.cern/root/html526/RooAbsData.html,1,['reduce'],['reduceEng']
Energy Efficiency," const char* cutSpec = 0, const char* cutRange = 0) const; { return moment(var,1,0,cutSpec,cutRange) ; }. Double_t sigma(RooRealVar& var, const char* cutSpec = 0, const char* cutRange = 0) const; { return sqrt(moment(var,2,cutSpec,cutRange)) ; }. Double_t skewness(RooRealVar& var, const char* cutSpec = 0, const char* cutRange = 0) const; { return standMoment(var,3,cutSpec,cutRange) ; }. Double_t kurtosis(RooRealVar& var, const char* cutSpec = 0, const char* cutRange = 0) const; { return standMoment(var,4,cutSpec,cutRange) ; }. Double_t covariance(RooRealVar& x, RooRealVar& y, const char* cutSpec = 0, const char* cutRange = 0) const; { return corrcov(x,y,cutSpec,cutRange,kFALSE) ; }. Double_t correlation(RooRealVar& x, RooRealVar& y, const char* cutSpec = 0, const char* cutRange = 0) const; { return corrcov(x,y,cutSpec,cutRange,kTRUE) ; }. TMatrixDSym* covarianceMatrix(const char* cutSpec = 0, const char* cutRange = 0) const; { return covarianceMatrix(*get(),cutSpec,cutRange) ; }. TMatrixDSym* correlationMatrix(const char* cutSpec = 0, const char* cutRange = 0) const; { return correlationMatrix(*get(),cutSpec,cutRange) ; }. TMatrixDSym* covarianceMatrix(const RooArgList& vars, const char* cutSpec = 0, const char* cutRange = 0) const; { return corrcovMatrix(vars,cutSpec,cutRange,kFALSE) ; }. TMatrixDSym* correlationMatrix(const RooArgList& vars, const char* cutSpec = 0, const char* cutRange = 0) const; { return corrcovMatrix(vars,cutSpec,cutRange,kTRUE) ; }. RooAbsData* cacheClone(const RooAbsArg* newCacheOwner, const RooArgSet* newCacheVars, const char* newName = 0). RooAbsData* reduceEng(const RooArgSet& varSubset, const RooFormulaVar* cutVar, const char* cutRange = 0, Int_t nStart = 0, Int_t nStop = 2000000000, Bool_t copyCache = kTRUE). » Last changed: Mon Jul 4 15:21:21 2011 » Last generated: 2011-07-04 15:21; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooAbsData.html:38121,reduce,reduceEng,38121,root/html530/RooAbsData.html,https://root.cern,https://root.cern/root/html530/RooAbsData.html,1,['reduce'],['reduceEng']
Energy Efficiency," const. overridevirtual . check if this PDF is a binned distribution in the given observable ; Reimplemented from RooAbsReal.; Definition at line 2922 of file RooLagrangianMorphFunc.cxx. ◆ isCouplingUsed(). bool RooLagrangianMorphFunc::isCouplingUsed ; (; const char * ; couplname). check if there is any morphing power provided for the given coupling morphing power is provided as soon as any two samples provide different, non-zero values for this coupling ; Definition at line 2634 of file RooLagrangianMorphFunc.cxx. ◆ isParameterConstant(). bool RooLagrangianMorphFunc::isParameterConstant ; (; const char * ; paramname); const. return true if the parameter with the given name is set constant, false otherwise ; Definition at line 2412 of file RooLagrangianMorphFunc.cxx. ◆ isParameterUsed(). bool RooLagrangianMorphFunc::isParameterUsed ; (; const char * ; paramname); const. check if there is any morphing power provided for the given parameter morphing power is provided as soon as any two samples provide different, non-zero values for this parameter ; Definition at line 2613 of file RooLagrangianMorphFunc.cxx. ◆ makeRatio(). std::unique_ptr< RooRatio > RooLagrangianMorphFunc::makeRatio ; (; const char * ; name, . const char * ; title, . RooArgList & ; nr, . RooArgList & ; dr . ). static . Return the RooRatio form of products and denominators of morphing functions. ; Definition at line 3023 of file RooLagrangianMorphFunc.cxx. ◆ nParameters(). int RooLagrangianMorphFunc::nParameters ; (; ); const. return the number of parameters in this morphing function ; Definition at line 2660 of file RooLagrangianMorphFunc.cxx. ◆ nPolynomials(). int RooLagrangianMorphFunc::nPolynomials ; (; ); const. return the number of samples in this morphing function ; Definition at line 2668 of file RooLagrangianMorphFunc.cxx. ◆ nSamples(). int RooLagrangianMorphFunc::nSamples ; (; ); const. inline . Definition at line 228 of file RooLagrangianMorphFunc.h. ◆ plotSamplingHint(). std::list< double >",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooLagrangianMorphFunc.html:86298,power,power,86298,doc/master/classRooLagrangianMorphFunc.html,https://root.cern,https://root.cern/doc/master/classRooLagrangianMorphFunc.html,2,['power'],['power']
Energy Efficiency, const; Method providing limited backward name compatibility with CLHEP ----. { return fCoordinates.Px(); }. Scalar y() const; { return fCoordinates.Py(); }. Scalar z() const; { return fCoordinates.Pz(); }. Scalar t() const; { return fCoordinates.E(); }. Scalar px() const; { return fCoordinates.Px(); }. Scalar py() const; { return fCoordinates.Py(); }. Scalar pz() const; { return fCoordinates.Pz(); }. Scalar e() const; { return fCoordinates.E(); }. Scalar theta() const; { return fCoordinates.Theta(); }. Scalar phi() const; { return fCoordinates.Phi(); }. Scalar rho() const; { return fCoordinates.Rho(); }. Scalar eta() const; { return fCoordinates.Eta(); }. Scalar pt() const; { return fCoordinates.Pt(); }. Scalar perp2() const; { return fCoordinates.Perp2(); }. Scalar mag2() const; { return fCoordinates.M2(); }. Scalar mag() const; { return fCoordinates.M(); }. Scalar mt() const; { return fCoordinates.Mt(); }. Scalar mt2() const; { return fCoordinates.Mt2(); }. Scalar energy() const; Methods requested by CMS ---. { return fCoordinates.E(); }. Scalar mass() const; { return fCoordinates.M(); }. Scalar mass2() const; { return fCoordinates.M2(); }. LorentzVector<CoordSystem>& SetE(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<Double32_t> >::Scalar a). Methods setting a Single-component; Work only if the component is one of which the vector is represented.; For example SetE will work for a PxPyPzE Vector but not for a PxPyPzM Vector. { fCoordinates.SetE (a); return *this; }. LorentzVector<CoordSystem>& SetEta(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<Double32_t> >::Scalar a); { fCoordinates.SetEta(a); return *this; }. LorentzVector<CoordSystem>& SetM(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<Double32_t> >::Scalar a); { fCoordinates.SetM (a); return *this; }. LorentzVector<CoordSystem>& SetPhi(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<Double32_t> >::Scalar a); { fCoordinates.SetPhi(a); return *this; }. LorentzVector<CoordSystem>& SetPt(ROOT::Math,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_Double32_t___.html:17543,energy,energy,17543,root/html526/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_Double32_t___.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_Double32_t___.html,5,['energy'],['energy']
Energy Efficiency, const; Method providing limited backward name compatibility with CLHEP ----. { return fCoordinates.Px(); }. Scalar y() const; { return fCoordinates.Py(); }. Scalar z() const; { return fCoordinates.Pz(); }. Scalar t() const; { return fCoordinates.E(); }. Scalar px() const; { return fCoordinates.Px(); }. Scalar py() const; { return fCoordinates.Py(); }. Scalar pz() const; { return fCoordinates.Pz(); }. Scalar e() const; { return fCoordinates.E(); }. Scalar theta() const; { return fCoordinates.Theta(); }. Scalar phi() const; { return fCoordinates.Phi(); }. Scalar rho() const; { return fCoordinates.Rho(); }. Scalar eta() const; { return fCoordinates.Eta(); }. Scalar pt() const; { return fCoordinates.Pt(); }. Scalar perp2() const; { return fCoordinates.Perp2(); }. Scalar mag2() const; { return fCoordinates.M2(); }. Scalar mag() const; { return fCoordinates.M(); }. Scalar mt() const; { return fCoordinates.Mt(); }. Scalar mt2() const; { return fCoordinates.Mt2(); }. Scalar energy() const; Methods requested by CMS ---. { return fCoordinates.E(); }. Scalar mass() const; { return fCoordinates.M(); }. Scalar mass2() const; { return fCoordinates.M2(); }. LorentzVector<CoordSystem>& SetE(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar a). Methods setting a Single-component; Work only if the component is one of which the vector is represented.; For example SetE will work for a PxPyPzE Vector but not for a PxPyPzM Vector. { fCoordinates.SetE (a); return *this; }. LorentzVector<CoordSystem>& SetEta(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar a); { fCoordinates.SetEta(a); return *this; }. LorentzVector<CoordSystem>& SetM(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar a); { fCoordinates.SetM (a); return *this; }. LorentzVector<CoordSystem>& SetPhi(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar a); { fCoordinates.SetPhi(a); return *this; }. LorentzVector<CoordSystem>& SetPt(ROOT::Math::LorentzVector<,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_double___.html:19815,energy,energy,19815,root/html526/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_double___.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_double___.html,9,['energy'],['energy']
Energy Efficiency, const; Method providing limited backward name compatibility with CLHEP ----. { return fCoordinates.Px(); }. Scalar y() const; { return fCoordinates.Py(); }. Scalar z() const; { return fCoordinates.Pz(); }. Scalar t() const; { return fCoordinates.E(); }. Scalar px() const; { return fCoordinates.Px(); }. Scalar py() const; { return fCoordinates.Py(); }. Scalar pz() const; { return fCoordinates.Pz(); }. Scalar e() const; { return fCoordinates.E(); }. Scalar theta() const; { return fCoordinates.Theta(); }. Scalar phi() const; { return fCoordinates.Phi(); }. Scalar rho() const; { return fCoordinates.Rho(); }. Scalar eta() const; { return fCoordinates.Eta(); }. Scalar pt() const; { return fCoordinates.Pt(); }. Scalar perp2() const; { return fCoordinates.Perp2(); }. Scalar mag2() const; { return fCoordinates.M2(); }. Scalar mag() const; { return fCoordinates.M(); }. Scalar mt() const; { return fCoordinates.Mt(); }. Scalar mt2() const; { return fCoordinates.Mt2(); }. Scalar energy() const; Methods requested by CMS ---. { return fCoordinates.E(); }. Scalar mass() const; { return fCoordinates.M(); }. Scalar mass2() const; { return fCoordinates.M2(); }. LorentzVector<CoordSystem>& SetE(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<Double32_t> >::Scalar a). Methods setting a Single-component; Work only if the component is one of which the vector is represented.; For example SetE will work for a PxPyPzE Vector but not for a PxPyPzM Vector. { fCoordinates.SetE (a); return *this; }. LorentzVector<CoordSystem>& SetEta(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<Double32_t> >::Scalar a); { fCoordinates.SetEta(a); return *this; }. LorentzVector<CoordSystem>& SetM(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<Double32_t> >::Scalar a); { fCoordinates.SetM (a); return *this; }. LorentzVector<CoordSystem>& SetPhi(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<Double32_t> >::Scalar a); { fCoordinates.SetPhi(a); return *this; }. LorentzVector<CoordSystem>& SetPt(ROOT::Math,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__LorentzVector_-p1PtEtaPhiM4D_Double32_t___.html:17543,energy,energy,17543,root/html526/ROOT__Math__LorentzVector_-p1PtEtaPhiM4D_Double32_t___.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__LorentzVector_-p1PtEtaPhiM4D_Double32_t___.html,5,['energy'],['energy']
Energy Efficiency, const; Method providing limited backward name compatibility with CLHEP ----. { return fCoordinates.Px(); }. Scalar y() const; { return fCoordinates.Py(); }. Scalar z() const; { return fCoordinates.Pz(); }. Scalar t() const; { return fCoordinates.E(); }. Scalar px() const; { return fCoordinates.Px(); }. Scalar py() const; { return fCoordinates.Py(); }. Scalar pz() const; { return fCoordinates.Pz(); }. Scalar e() const; { return fCoordinates.E(); }. Scalar theta() const; { return fCoordinates.Theta(); }. Scalar phi() const; { return fCoordinates.Phi(); }. Scalar rho() const; { return fCoordinates.Rho(); }. Scalar eta() const; { return fCoordinates.Eta(); }. Scalar pt() const; { return fCoordinates.Pt(); }. Scalar perp2() const; { return fCoordinates.Perp2(); }. Scalar mag2() const; { return fCoordinates.M2(); }. Scalar mag() const; { return fCoordinates.M(); }. Scalar mt() const; { return fCoordinates.Mt(); }. Scalar mt2() const; { return fCoordinates.Mt2(); }. Scalar energy() const; Methods requested by CMS ---. { return fCoordinates.E(); }. Scalar mass() const; { return fCoordinates.M(); }. Scalar mass2() const; { return fCoordinates.M2(); }. LorentzVector<CoordSystem>& SetE(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar a). Methods setting a Single-component; Work only if the component is one of which the vector is represented.; For example SetE will work for a PxPyPzE Vector but not for a PxPyPzM Vector. { fCoordinates.SetE (a); return *this; }. LorentzVector<CoordSystem>& SetEta(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar a); { fCoordinates.SetEta(a); return *this; }. LorentzVector<CoordSystem>& SetM(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar a); { fCoordinates.SetM (a); return *this; }. LorentzVector<CoordSystem>& SetPhi(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar a); { fCoordinates.SetPhi(a); return *this; }. LorentzVector<CoordSystem>& SetPt(ROOT::Math::LorentzVector<,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__LorentzVector_-p1PtEtaPhiM4D_double___.html:19077,energy,energy,19077,root/html526/ROOT__Math__LorentzVector_-p1PtEtaPhiM4D_double___.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__LorentzVector_-p1PtEtaPhiM4D_double___.html,9,['energy'],['energy']
Energy Efficiency, const; Method providing limited backward name compatibility with CLHEP ----. { return fCoordinates.Px(); }. Scalar y() const; { return fCoordinates.Py(); }. Scalar z() const; { return fCoordinates.Pz(); }. Scalar t() const; { return fCoordinates.E(); }. Scalar px() const; { return fCoordinates.Px(); }. Scalar py() const; { return fCoordinates.Py(); }. Scalar pz() const; { return fCoordinates.Pz(); }. Scalar e() const; { return fCoordinates.E(); }. Scalar theta() const; { return fCoordinates.Theta(); }. Scalar phi() const; { return fCoordinates.Phi(); }. Scalar rho() const; { return fCoordinates.Rho(); }. Scalar eta() const; { return fCoordinates.Eta(); }. Scalar pt() const; { return fCoordinates.Pt(); }. Scalar perp2() const; { return fCoordinates.Perp2(); }. Scalar mag2() const; { return fCoordinates.M2(); }. Scalar mag() const; { return fCoordinates.M(); }. Scalar mt() const; { return fCoordinates.Mt(); }. Scalar mt2() const; { return fCoordinates.Mt2(); }. Scalar energy() const; Methods requested by CMS ---. { return fCoordinates.E(); }. Scalar mass() const; { return fCoordinates.M(); }. Scalar mass2() const; { return fCoordinates.M2(); }. LorentzVector<CoordSystem>& SetE(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<Double32_t> >::Scalar a). Methods setting a Single-component; Work only if the component is one of which the vector is represented.; For example SetE will work for a PxPyPzE Vector but not for a PxPyPzM Vector. { fCoordinates.SetE (a); return *this; }. LorentzVector<CoordSystem>& SetEta(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<Double32_t> >::Scalar a); { fCoordinates.SetEta(a); return *this; }. LorentzVector<CoordSystem>& SetM(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<Double32_t> >::Scalar a); { fCoordinates.SetM (a); return *this; }. LorentzVector<CoordSystem>& SetPhi(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<Double32_t> >::Scalar a); { fCoordinates.SetPhi(a); return *this; }. LorentzVector<CoordSystem>& SetPt(ROOT::Math::Lorent,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__LorentzVector_-p1PxPyPzE4D_Double32_t___.html:17257,energy,energy,17257,root/html526/ROOT__Math__LorentzVector_-p1PxPyPzE4D_Double32_t___.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__LorentzVector_-p1PxPyPzE4D_Double32_t___.html,5,['energy'],['energy']
Energy Efficiency, const; Method providing limited backward name compatibility with CLHEP ----. { return fCoordinates.Px(); }. Scalar y() const; { return fCoordinates.Py(); }. Scalar z() const; { return fCoordinates.Pz(); }. Scalar t() const; { return fCoordinates.E(); }. Scalar px() const; { return fCoordinates.Px(); }. Scalar py() const; { return fCoordinates.Py(); }. Scalar pz() const; { return fCoordinates.Pz(); }. Scalar e() const; { return fCoordinates.E(); }. Scalar theta() const; { return fCoordinates.Theta(); }. Scalar phi() const; { return fCoordinates.Phi(); }. Scalar rho() const; { return fCoordinates.Rho(); }. Scalar eta() const; { return fCoordinates.Eta(); }. Scalar pt() const; { return fCoordinates.Pt(); }. Scalar perp2() const; { return fCoordinates.Perp2(); }. Scalar mag2() const; { return fCoordinates.M2(); }. Scalar mag() const; { return fCoordinates.M(); }. Scalar mt() const; { return fCoordinates.Mt(); }. Scalar mt2() const; { return fCoordinates.Mt2(); }. Scalar energy() const; Methods requested by CMS ---. { return fCoordinates.E(); }. Scalar mass() const; { return fCoordinates.M(); }. Scalar mass2() const; { return fCoordinates.M2(); }. LorentzVector<CoordSystem>& SetE(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar a). Methods setting a Single-component; Work only if the component is one of which the vector is represented.; For example SetE will work for a PxPyPzE Vector but not for a PxPyPzM Vector. { fCoordinates.SetE (a); return *this; }. LorentzVector<CoordSystem>& SetEta(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar a); { fCoordinates.SetEta(a); return *this; }. LorentzVector<CoordSystem>& SetM(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar a); { fCoordinates.SetM (a); return *this; }. LorentzVector<CoordSystem>& SetPhi(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar a); { fCoordinates.SetPhi(a); return *this; }. LorentzVector<CoordSystem>& SetPt(ROOT::Math::LorentzVector<ROOT::Ma,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__LorentzVector_-p1PxPyPzE4D_double___.html:20653,energy,energy,20653,root/html526/ROOT__Math__LorentzVector_-p1PxPyPzE4D_double___.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__LorentzVector_-p1PxPyPzE4D_double___.html,9,['energy'],['energy']
Energy Efficiency, const; Method providing limited backward name compatibility with CLHEP ----. { return fCoordinates.Px(); }. Scalar y() const; { return fCoordinates.Py(); }. Scalar z() const; { return fCoordinates.Pz(); }. Scalar t() const; { return fCoordinates.E(); }. Scalar px() const; { return fCoordinates.Px(); }. Scalar py() const; { return fCoordinates.Py(); }. Scalar pz() const; { return fCoordinates.Pz(); }. Scalar e() const; { return fCoordinates.E(); }. Scalar theta() const; { return fCoordinates.Theta(); }. Scalar phi() const; { return fCoordinates.Phi(); }. Scalar rho() const; { return fCoordinates.Rho(); }. Scalar eta() const; { return fCoordinates.Eta(); }. Scalar pt() const; { return fCoordinates.Pt(); }. Scalar perp2() const; { return fCoordinates.Perp2(); }. Scalar mag2() const; { return fCoordinates.M2(); }. Scalar mag() const; { return fCoordinates.M(); }. Scalar mt() const; { return fCoordinates.Mt(); }. Scalar mt2() const; { return fCoordinates.Mt2(); }. Scalar energy() const; Methods requested by CMS ---. { return fCoordinates.E(); }. Scalar mass() const; { return fCoordinates.M(); }. Scalar mass2() const; { return fCoordinates.M2(); }. LorentzVector<CoordSystem>& SetE(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<Double32_t> >::Scalar a). Methods setting a Single-component; Work only if the component is one of which the vector is represented.; For example SetE will work for a PxPyPzE Vector but not for a PxPyPzM Vector. { fCoordinates.SetE (a); return *this; }. LorentzVector<CoordSystem>& SetEta(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<Double32_t> >::Scalar a); { fCoordinates.SetEta(a); return *this; }. LorentzVector<CoordSystem>& SetM(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<Double32_t> >::Scalar a); { fCoordinates.SetM (a); return *this; }. LorentzVector<CoordSystem>& SetPhi(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<Double32_t> >::Scalar a); { fCoordinates.SetPhi(a); return *this; }. LorentzVector<CoordSystem>& SetPt(ROOT::Math::Lorent,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__LorentzVector_-p1PxPyPzM4D_Double32_t___.html:17257,energy,energy,17257,root/html526/ROOT__Math__LorentzVector_-p1PxPyPzM4D_Double32_t___.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__LorentzVector_-p1PxPyPzM4D_Double32_t___.html,5,['energy'],['energy']
