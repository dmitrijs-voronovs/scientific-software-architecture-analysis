quality_attribute,sentence,source,author,repo,version,id,keyword,matched_word,match_idx,wiki,url,total_similar,target_keywords,target_matched_words
Energy Efficiency,"@tsexton, yes, it's a pity that the name `Z` which should properly be `int` atomic number has devolved into `float` nuclear charge. I support all documentation clarifications. You can even edit [them](https://github.com/psi4/psi4/blob/master/psi4/src/export_mints.cc#L985-L993) online with the little pencil. GH will turn your edits into a pull request.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/909#issuecomment-363505467:124,charge,charge,124,https://psicode.org,https://github.com/psi4/psi4/issues/909#issuecomment-363505467,1,['charge'],['charge']
Energy Efficiency,"@wadejong, the trick is that some of our codes can't handle symmetry, so; frequently users ask for C1 even though they really don't mean it, due to; parts of the code being C1 only (although maybe some recent code I added; fixes this?). Most of these users will want the symmetric solution because; it tends to be more free of unphysical values for properties like; vibrational frequencies. The situation is analogous to running a closed shell molecule with UHF. It; will always give the RHF solution, not a UHF solution, unless the user; intervenes and deliberately breaks the alpha / beta symmetry that is; naturally there. Some programs have special keywords to do this. Or do; you automatically mix alpha and beta in NWChem when a user asks for UHF on; a closed shell molecule?. On Dec 5, 2017 7:52 PM, ""Bert de Jong"" <notifications@github.com> wrote:. Communicating with Daniel, the challenge is that the solver somehow was; sticking to a symmetry solution inherent in the molecule, this while a no; symmetry solution was requested. I would expect a symmetry broken solution; if I tell the calculation to assume a symmetry lower than possible; (assuming there is a lower energy solution in the symmetry broken case). > On Dec 5, 2017, at 4:46 PM, Lori A. Burns <notifications@github.com>; wrote:; >; > FYI, @wadejong. Are you more concerned with accessing the symmetry-broken; sol'n (perhaps through geometry tweaks or stability analysis) or with it; being the default sol'n?; >; > —; > You are receiving this because you were mentioned. > Reply to this email directly, view it on GitHub, or mute the thread.; >. —; You are receiving this because you commented. Reply to this email directly, view it on GitHub; <https://github.com/psi4/psi4/issues/875#issuecomment-349492637>, or mute; the thread; <https://github.com/notifications/unsubscribe-auth/AC9Qdkqkvy84OvbrJRm6E6z73AM6ZWBXks5s9eU_gaJpZM4Q25IB>; .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/875#issuecomment-349516046:1176,energy,energy,1176,https://psicode.org,https://github.com/psi4/psi4/issues/875#issuecomment-349516046,1,['energy'],['energy']
Energy Efficiency,"@ymshi449, when you post error reports, _please_ be explicit. We need to know exactly what you are asking and exactly what the problem is. Including the details is more important than the grammar. > > Also, it seems that for `sadno`, `guess_mix` is not implemented.; > ; > wym? It should work out-of-the-box, since the `sadno` guess has orbitals like GWH. `huckel` is another possible choice. It might be that DIIS just pulls you back into the spin-restricted solution... @susilehtola ; Using your H2 example. ```; ==> Pre-Iterations <== . SCF Guess: Superposition of Atomic Densities' Natural Orbitals via on-the-fly atomic UHF (doi:10.1021/acs.jctc.8b01089). -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A 10 10 1 1 1 0 ; -------------------------------------------------------; Total 10 10 1 1 1 0 ; -------------------------------------------------------. ==> Iterations <== . Total Energy Delta E RMS |[F,P]|. @DF-UHF iter 1: -0.82625214180248 -8.26252e-01 1.90467e-03 DIIS; @DF-UHF iter 2: -0.82648067782379 -2.28536e-04 2.30464e-04 DIIS; @DF-UHF iter 3: -0.82648407824246 -3.40042e-06 4.94088e-07 DIIS; @DF-UHF iter 4: -0.82648407827432 -3.18513e-11 3.29102e-08 DIIS; @DF-UHF iter 5: -0.82648407827446 -1.41887e-13 2.57430e-14 DIIS; Energy and wave function converged.; ```. Even though `set guess_mix True` is set in my input file, the output that _should_ appear (and does for `guess gwh` instead of `guess sadno`) when `guess_mix` runs does not.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2410#issuecomment-1016642737:996,Energy,Energy,996,https://psicode.org,https://github.com/psi4/psi4/issues/2410#issuecomment-1016642737,2,['Energy'],['Energy']
Energy Efficiency,"@yxie326 how much should the SAPT(HF) from your calcs match a conventional SAPT0? Below, the ""Total HF"" from a SAPT0 and the ""Total HF"" from your ""SAPT(HF) Results"" match exactly and the induction terms nearly but not so much the elst or exch. Can the deltaHF join the Induction section?. I assume the differences in labels btwn HF and DFT SAPT (Elst10 vs Elst1, Ind20,r vs Ind2,r) are correct since that's what I recall from Molpro, too, but now would be a good time to look over them and confirm that all differences are intentional. wfn sapt input; ```; molecule dimer {; Ne; --; Ar 1 6.5; units bohr; }. set {; basis aug-cc-pvdz; scf_type df; }; energy(""sapt0""); ```. wfn sapt output; ```; SAPT Results ; --------------------------------------------------------------------------------------------------------; Electrostatics -0.08863776 [mEh] -0.05562103 [kcal/mol] -0.23271841 [kJ/mol]; Elst10,r -0.08863776 [mEh] -0.05562103 [kcal/mol] -0.23271841 [kJ/mol]. Exchange 0.32126855 [mEh] 0.20159906 [kcal/mol] 0.84349046 [kJ/mol]; Exch10 0.32126855 [mEh] 0.20159906 [kcal/mol] 0.84349046 [kJ/mol]; Exch10(S^2) 0.32120420 [mEh] 0.20155868 [kcal/mol] 0.84332151 [kJ/mol]. Induction -0.01300161 [mEh] -0.00815863 [kcal/mol] -0.03413572 [kJ/mol]; Ind20,r -0.09189525 [mEh] -0.05766514 [kcal/mol] -0.24127094 [kJ/mol]; Exch-Ind20,r 0.09502640 [mEh] 0.05962997 [kcal/mol] 0.24949178 [kJ/mol]; delta HF,r (2) -0.01613276 [mEh] -0.01012346 [kcal/mol] -0.04235656 [kJ/mol]. Dispersion -0.26779778 [mEh] -0.16804565 [kcal/mol] -0.70310299 [kJ/mol]; Disp20 -0.28239464 [mEh] -0.17720531 [kcal/mol] -0.74142701 [kJ/mol]; Exch-Disp20 0.01459685 [mEh] 0.00915966 [kcal/mol] 0.03832403 [kJ/mol]; Disp20 (SS) -0.14119732 [mEh] -0.08860265 [kcal/mol] -0.37071351 [kJ/mol]; Disp20 (OS) -0.14119732 [mEh] -0.08860265 [kcal/mol] -0.37071351 [kJ/mol]; Exch-Disp20 (SS) 0.00826777 [mEh] 0.00518811 [kcal/mol] 0.02170704 [kJ/mol]; Exch-Disp20 (OS) 0.00632908 [mEh] 0.00397156 [kcal/mol] 0.01661699 [kJ/mol]. Total HF 0.21",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1865#issuecomment-707400670:650,energy,energy,650,https://psicode.org,https://github.com/psi4/psi4/pull/1865#issuecomment-707400670,1,['energy'],['energy']
Energy Efficiency,"@zachglick reports he was able to get the same seg fault with just ; `conda create -n test_env4 -c psi4 python=3.7 psi4==1.5+e9f4d6d`; and ; ```; molecule mol {; 0 1 ; O ; H 1 1.0 ; H 1 1.0 2 109.5; }. set basis sto-3g; energy, wfn = energy(""HF"", return_wfn=True); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2593#issuecomment-1145503237:220,energy,energy,220,https://psicode.org,https://github.com/psi4/psi4/issues/2593#issuecomment-1145503237,2,['energy'],['energy']
Energy Efficiency,"@zachglick this is just about how you calculate a range-separated functional. The point is that when you have a functional that has A% exact exchange at the short-range and B% exact exchange in the long-range, you can evaluate it either as B% full Hartree-Fock exchange and (A-B)% short-range exchange, or as A% full Hartree-Fock exchange and (B-A)% long-range exchange. Psi4 is currently doing it the latter way. My intuition is that the former way of using short-range integrals would be more efficient for screening, since fewer terms can contribute at the short range and the more numerous long-range terms are killed by the range separation, but it might also be that since exchange integrals die off more rapidly in the long range than Coulomb integrals, the evaluating the long-range part is faster than the short-range part. Of course, if you have both long- and short-range exchange, then you anyway have to evaluate the full exact exchange and the speedup isn't going to be mind-blowing. But, some functionals like HSE are short-range-only, and there it might make a difference if you don't have to evaluate the long-range part at all. I guess the optimal implementation would include both and pick on a case by case basis: e.g. if you only have short-range exchange, then just do the short-range part and skip the full exact exchange.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1499#issuecomment-497468619:495,efficient,efficient,495,https://psicode.org,https://github.com/psi4/psi4/pull/1499#issuecomment-497468619,1,['efficient'],['efficient']
Energy Efficiency,"A -1.493579 ; 13A -1.493578 14A -0.152702 15A -0.050078 ; 16A -0.050072 17A -0.050066 . Virtual: . 18A 0.078304 19A 0.097245 20A 0.097248 ; 21A 0.097249 22A 0.112922 23A 0.112923 ; 24A 0.112923 25A 0.113993 26A 0.116451 ; 27A 0.116452 28A 0.133456 29A 0.133457 ; 30A 0.133457 31A 0.144405 32A 0.154794 ; 33A 0.154799 34A 0.154803 35A 0.171872 ; 36A 0.171874 37A 0.171880 38A 0.182327 ; 39A 0.182328 40A 0.195145 41A 0.195148 ; 42A 0.195151 43A 0.207055 44A 0.266927 ; 45A 0.266928 46A 0.283654 47A 0.283658 ; 48A 0.283662 49A 0.288897 50A 0.288898 ; 51A 0.288899 52A 0.333946 53A 0.337328 ; 54A 0.337329 55A 0.337330 56A 0.383705 ; 57A 0.383705 58A 0.383706 59A 0.424706 ; 60A 0.424707 61A 0.470452 62A 0.470453 ; 63A 0.470455 64A 0.472868 65A 0.509891 ; 66A 0.538119 67A 0.538120 68A 0.538121 ; 69A 0.791769 70A 0.791770 71A 0.831182 ; 72A 0.831183 73A 0.831185 . Final Occupation by Irrep:; A ; DOCC [ 17 ]. Energy converged. @RHF Final Energy: -787.84782771441280. => Energetics <=. Nuclear Repulsion Energy = 46.2526770994017653; One-Electron Energy = -1168.6473048717509755; Two-Electron Energy = 334.5468000579363661; DFT Exchange-Correlation Energy = 0.0000000000000000; Empirical Dispersion Energy = 0.0000000000000000; PCM Polarization Energy = 0.0000000000000000; EFP Energy = 0.0000000000000000; Total Energy = -787.8478277144128015. Alert: EFP and PCM quantities not currently incorporated into SCF psivars. Properties will be evaluated at 0.000000, 0.000000, 0.000000 Bohr. Properties computed using the SCF density matrix. Nuclear Dipole Moment: (a.u.); X: 0.0000 Y: -0.0000 Z: -0.0000. Electronic Dipole Moment: (a.u.); X: 0.0001 Y: -0.0001 Z: 0.0000. Dipole Moment: (a.u.); X: 0.0001 Y: -0.0001 Z: 0.0000 Total: 0.0002. Dipole Moment: (Debye); X: 0.0003 Y: -0.0002 Z: 0.0000 Total: 0.0004. *** tstop() called on dx7-lehtola.chem.helsinki.fi at Wed Oct 25 21:00:40 2017; Module time:; 	user time = 2.36 seconds = 0.04 minutes; 	system time = 0.04 seconds = 0.00 minutes; 	total time = 3",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/828#issuecomment-339418202:6703,Energy,Energy,6703,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339418202,1,['Energy'],['Energy']
Energy Efficiency,"A 0.023031 11A 0.076058 12A 0.080886; 13A 0.080887 14A 0.110657 15A 0.110658; 16A 0.173580 17A 0.360176 18A 0.370157; 19A 0.370158 20A 0.455135 21A 0.455137; 22A 0.543892 23A 0.571369 24A 0.610757; 25A 0.610759 26A 0.613674 27A 0.623635; 28A 0.623637 29A 0.682101 30A 0.875957; 31A 1.031832 32A 1.031833 33A 1.292103; 34A 1.292104 35A 1.442476 36A 1.448632; 37A 1.662612 38A 1.675074 39A 1.675078; 40A 1.685189 41A 1.685192 42A 1.745843; 43A 1.745846 44A 1.748838 45A 1.953626; 46A 1.953628 47A 2.104265 48A 2.256310; 49A 2.256312 50A 2.286838 51A 2.457344; 52A 2.457345 53A 2.522627 54A 2.738613; 55A 2.803606 56A 2.803611 57A 2.896284; 58A 2.896288 59A 5.038202 60A 5.264241. Final Occupation by Irrep:; A; DOCC [ 9 ]; NA [ 9 ]; NB [ 9 ]. @DF-RKS Final Energy: -79.32647565991985. => Energetics <=. Nuclear Repulsion Energy = 42.0362430486042129; One-Electron Energy = -188.7935335064416904; Two-Electron Energy = 79.9597081286466675; DFT Exchange-Correlation Energy = -12.5288933307290371; Empirical Dispersion Energy = 0.0000000000000000; VV10 Nonlocal Energy = 0.0000000000000000; Total Energy = -79.3264756599198506. Computation Completed. Properties will be evaluated at 0.000000, 0.000000, 0.000000 [a0]. Properties computed using the SCF density matrix. Multipole Moments:. ------------------------------------------------------------------------------------; Multipole Electronic (a.u.) Nuclear (a.u.) Total (a.u.); ------------------------------------------------------------------------------------. L = 1. Multiply by 2.5417464519 to convert [e a0] to [Debye]; Dipole X : 0.0000185 -0.0000189 -0.0000004; Dipole Y : -0.0000204 0.0000189 -0.0000015; Dipole Z : -0.0000155 0.0000189 0.0000034; Magnitude : 0.0000037. ------------------------------------------------------------------------------------. *** tstop() called on baldr at Tue Mar 28 17:20:52 2023; Module time:; user time = 6.85 seconds = 0.11 minutes; system time = 0.17 seconds = 0.00 minutes; total time = 1 seconds = 0.02 m",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2911:8715,Energy,Energy,8715,https://psicode.org,https://github.com/psi4/psi4/issues/2911,1,['Energy'],['Energy']
Energy Efficiency,"A 0.086764 10A 0.103920 ; 11A 0.198954 12A 0.198954 13A 0.208977 ; 14A 0.208977 15A 0.256823 16A 0.270230 ; 17A 0.318044 18A 0.318044 19A 0.402166 ; 20A 0.450346 21A 0.450346 22A 0.540514 ; 23A 0.606544 24A 0.606544 25A 0.613724 ; 26A 0.613724 27A 0.838452 28A 1.281252 ; 29A 1.826605 30A 1.826605 31A 1.850798 ; 32A 4.179388 . Beta Occupied: . . Beta Virtual: . 1A 0.006309 2A 0.013514 3A 0.013821 ; 4A 0.013821 5A 0.037931 6A 0.065570 ; 7A 0.070561 8A 0.070561 9A 0.090473 ; 10A 0.171679 11A 0.207466 12A 0.207466 ; 13A 0.209492 14A 0.209492 15A 0.257933 ; 16A 0.287508 17A 0.331720 18A 0.331720 ; 19A 0.427501 20A 0.478623 21A 0.478623 ; 22A 0.598357 23A 0.612674 24A 0.612674 ; 25A 0.614564 26A 0.614564 27A 0.921140 ; 28A 1.322779 29A 1.926318 30A 1.926318 ; 31A 1.947876 32A 4.183965 . Final Occupation by Irrep:; A ; DOCC [ 0 ]; SOCC [ 1 ]. @DF-UHF Final Energy: -0.49935164423756. => Energetics <=. Nuclear Repulsion Energy = 0.0000000000000000; One-Electron Energy = -0.4993516442375593; Two-Electron Energy = 0.0000000000000000; Total Energy = -0.4993516442375593. UHF NO Occupations:; HONO-0 : 1 A 1.0000000; LUNO+0 : 2 A 0.0000000; LUNO+1 : 3 A 0.0000000; LUNO+2 : 4 A 0.0000000; LUNO+3 : 5 A 0.0000000. Computation Completed. Properties will be evaluated at 0.000000, 0.000000, 0.000000 [a0]. Properties computed using the SCF density matrix. Nuclear Dipole Moment: [e a0]; X: 0.0000 Y: 0.0000 Z: 1.8897. Electronic Dipole Moment: [e a0]; X: 0.0000 Y: -0.0000 Z: -1.8895. Dipole Moment: [e a0]; X: 0.0000 Y: -0.0000 Z: 0.0002 Total: 0.0002. Dipole Moment: [D]; X: 0.0000 Y: -0.0000 Z: 0.0006 Total: 0.0006. *** tstop() called on filip-ThinkPad-E495 at Wed Mar 4 16:29:33 2020; Module time:; 	user time = 0.55 seconds = 0.01 minutes; 	system time = 0.01 seconds = 0.00 minutes; 	total time = 0 seconds = 0.00 minutes; Total time:; 	user time = 1.79 seconds = 0.03 minutes; 	system time = 0.07 seconds = 0.00 minutes; 	total time = 2 seconds = 0.03 minutes; Constructing Basis Sets for SAP",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1830:10771,Energy,Energy,10771,https://psicode.org,https://github.com/psi4/psi4/issues/1830,1,['Energy'],['Energy']
Energy Efficiency,"A 0.785076 57A 0.814891 58A 0.822500 ; 59A 0.837421 60A 0.837786 61A 0.896368 ; 62A 0.911715 63A 0.939819 64A 1.013440 ; 65A 1.043686 66A 1.043717 67A 1.079379 ; 68A 1.110213 69A 1.243320 70A 1.248770 ; 71A 1.249096 72A 1.325143 73A 1.325198 ; 74A 1.395025 75A 1.397495 76A 1.442305 ; 77A 1.442695 78A 1.456897 79A 1.504332 ; 80A 1.639667 81A 1.641352 82A 1.668110 ; 83A 1.705574 84A 1.784410 85A 1.840841 ; 86A 1.841701 87A 1.932164 88A 2.090833 ; 89A 2.093816 90A 2.132735 91A 2.154837 ; 92A 2.180250 93A 2.253444 94A 2.481160 ; 95A 2.481328 96A 2.496342 97A 2.793920 ; 98A 2.848632 99A 2.969349 100A 2.969418 ; 101A 3.337134 102A 3.399821 103A 3.400315 ; 104A 3.528082 105A 4.155988 106A 5.476938 ; 107A 5.786400 108A 6.199146 109A 7.337445 ; 110A 8.481836 111A 8.867663 . Final Occupation by Irrep:; A ; DOCC [ 16 ]; NA [ 16 ]; NB [ 16 ]. @DF-RKS Final Energy: -43.40748214051649. => Energetics <=. Nuclear Repulsion Energy = 93.7538801503397679; One-Electron Energy = -245.6257702779177521; Two-Electron Energy = 115.6223560816475100; DFT Exchange-Correlation Energy = -7.1485657255274635; Empirical Dispersion Energy = -0.0093823690585561; VV10 Nonlocal Energy = 0.0000000000000000; Total Energy = -43.4074821405164926. Computation Completed. Properties will be evaluated at 0.000000, 0.000000, 0.000000 [a0]. Properties computed using the SCF density matrix. Multipole Moments:. ------------------------------------------------------------------------------------; Multipole Electronic (a.u.) Nuclear (a.u.) Total (a.u.); ------------------------------------------------------------------------------------. L = 1. Multiply by 2.5417464519 to convert [e a0] to [Debye]; Dipole X : -0.0030364 0.0030278 -0.0000086; Dipole Y : 0.0588791 -0.0477754 0.0111036; Dipole Z : -0.0335702 0.0272773 -0.0062929; Magnitude : 0.0127629. ------------------------------------------------------------------------------------. *** tstop() called on agincourt.lan at Mon Sep 16 22:17:38 2024; Module time:; 	use",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3221:13870,Energy,Energy,13870,https://psicode.org,https://github.com/psi4/psi4/issues/3221,1,['Energy'],['Energy']
Energy Efficiency,"A 0.915524 57A 0.915721 58A 0.916478 ; 59A 0.958476 60A 0.958532 61A 0.986377 ; 62A 1.033004 63A 1.062720 64A 1.062956 ; 65A 1.089893 66A 1.194156 67A 1.194624 ; 68A 1.260967 69A 1.272575 70A 1.297678 ; 71A 1.297926 72A 1.359441 73A 1.359571 ; 74A 1.502783 75A 1.503340 76A 1.596335 ; 77A 1.617548 78A 1.617829 79A 1.669742 ; 80A 1.669811 81A 1.778057 82A 1.778197 ; 83A 1.861590 84A 1.904708 85A 1.905302 ; 86A 1.932619 87A 1.933506 88A 1.984745 ; 89A 2.223699 90A 2.225628 91A 2.225668 ; 92A 2.494202 93A 2.559162 94A 2.559231 ; 95A 2.694381 96A 2.694493 97A 2.699523 ; 98A 2.989001 99A 2.989072 100A 3.239982 ; 101A 3.409966 102A 3.418072 103A 3.418110 ; 104A 3.811009 105A 4.348714 106A 5.581608 ; 107A 6.661779 108A 7.322224 109A 7.404171 ; 110A 8.435277 111A 8.975985 . Final Occupation by Irrep:; A ; DOCC [ 16 ]; NA [ 16 ]; NB [ 16 ]. @DF-RKS Final Energy: -42.04595197988089. => Energetics <=. Nuclear Repulsion Energy = 93.4549456916637951; One-Electron Energy = -246.7432156290641103; Two-Electron Energy = 118.6378186354417608; DFT Exchange-Correlation Energy = -7.3862953798450999; Empirical Dispersion Energy = -0.0092052980772349; VV10 Nonlocal Energy = 0.0000000000000000; Total Energy = -42.0459519798808898. Computation Completed. Properties will be evaluated at 0.000000, 0.000000, 0.000000 [a0]. Properties computed using the SCF density matrix. Multipole Moments:. ------------------------------------------------------------------------------------; Multipole Electronic (a.u.) Nuclear (a.u.) Total (a.u.); ------------------------------------------------------------------------------------. L = 1. Multiply by 2.5417464519 to convert [e a0] to [Debye]; Dipole X : -7.8209495 8.4115446 0.5905951; Dipole Y : -2.3244093 2.4977096 0.1733003; Dipole Z : -4.0798888 4.3904336 0.3105448; Magnitude : 0.6894009. ------------------------------------------------------------------------------------. *** tstop() called on agincourt.lan at Mon Sep 16 22:19:42 2024; Module time:; 	user ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3221:25770,Energy,Energy,25770,https://psicode.org,https://github.com/psi4/psi4/issues/3221,1,['Energy'],['Energy']
Energy Efficiency,"A 1.079379 ; 68A 1.110213 69A 1.243320 70A 1.248770 ; 71A 1.249096 72A 1.325143 73A 1.325198 ; 74A 1.395025 75A 1.397495 76A 1.442305 ; 77A 1.442695 78A 1.456897 79A 1.504332 ; 80A 1.639667 81A 1.641352 82A 1.668110 ; 83A 1.705574 84A 1.784410 85A 1.840841 ; 86A 1.841701 87A 1.932164 88A 2.090833 ; 89A 2.093816 90A 2.132735 91A 2.154837 ; 92A 2.180250 93A 2.253444 94A 2.481160 ; 95A 2.481328 96A 2.496342 97A 2.793920 ; 98A 2.848632 99A 2.969349 100A 2.969418 ; 101A 3.337134 102A 3.399821 103A 3.400315 ; 104A 3.528082 105A 4.155988 106A 5.476938 ; 107A 5.786400 108A 6.199146 109A 7.337445 ; 110A 8.481836 111A 8.867663 . Final Occupation by Irrep:; A ; DOCC [ 16 ]; NA [ 16 ]; NB [ 16 ]. @DF-RKS Final Energy: -43.40748214051649. => Energetics <=. Nuclear Repulsion Energy = 93.7538801503397679; One-Electron Energy = -245.6257702779177521; Two-Electron Energy = 115.6223560816475100; DFT Exchange-Correlation Energy = -7.1485657255274635; Empirical Dispersion Energy = -0.0093823690585561; VV10 Nonlocal Energy = 0.0000000000000000; Total Energy = -43.4074821405164926. Computation Completed. Properties will be evaluated at 0.000000, 0.000000, 0.000000 [a0]. Properties computed using the SCF density matrix. Multipole Moments:. ------------------------------------------------------------------------------------; Multipole Electronic (a.u.) Nuclear (a.u.) Total (a.u.); ------------------------------------------------------------------------------------. L = 1. Multiply by 2.5417464519 to convert [e a0] to [Debye]; Dipole X : -0.0030364 0.0030278 -0.0000086; Dipole Y : 0.0588791 -0.0477754 0.0111036; Dipole Z : -0.0335702 0.0272773 -0.0062929; Magnitude : 0.0127629. ------------------------------------------------------------------------------------. *** tstop() called on agincourt.lan at Mon Sep 16 22:17:38 2024; Module time:; 	user time = 9.63 seconds = 0.16 minutes; 	system time = 0.15 seconds = 0.00 minutes; 	total time = 10 seconds = 0.17 minutes; Total time:; 	user time = 9",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3221:14021,Energy,Energy,14021,https://psicode.org,https://github.com/psi4/psi4/issues/3221,1,['Energy'],['Energy']
Energy Efficiency,"A 1.194624 ; 68A 1.260967 69A 1.272575 70A 1.297678 ; 71A 1.297926 72A 1.359441 73A 1.359571 ; 74A 1.502783 75A 1.503340 76A 1.596335 ; 77A 1.617548 78A 1.617829 79A 1.669742 ; 80A 1.669811 81A 1.778057 82A 1.778197 ; 83A 1.861590 84A 1.904708 85A 1.905302 ; 86A 1.932619 87A 1.933506 88A 1.984745 ; 89A 2.223699 90A 2.225628 91A 2.225668 ; 92A 2.494202 93A 2.559162 94A 2.559231 ; 95A 2.694381 96A 2.694493 97A 2.699523 ; 98A 2.989001 99A 2.989072 100A 3.239982 ; 101A 3.409966 102A 3.418072 103A 3.418110 ; 104A 3.811009 105A 4.348714 106A 5.581608 ; 107A 6.661779 108A 7.322224 109A 7.404171 ; 110A 8.435277 111A 8.975985 . Final Occupation by Irrep:; A ; DOCC [ 16 ]; NA [ 16 ]; NB [ 16 ]. @DF-RKS Final Energy: -42.04595197988089. => Energetics <=. Nuclear Repulsion Energy = 93.4549456916637951; One-Electron Energy = -246.7432156290641103; Two-Electron Energy = 118.6378186354417608; DFT Exchange-Correlation Energy = -7.3862953798450999; Empirical Dispersion Energy = -0.0092052980772349; VV10 Nonlocal Energy = 0.0000000000000000; Total Energy = -42.0459519798808898. Computation Completed. Properties will be evaluated at 0.000000, 0.000000, 0.000000 [a0]. Properties computed using the SCF density matrix. Multipole Moments:. ------------------------------------------------------------------------------------; Multipole Electronic (a.u.) Nuclear (a.u.) Total (a.u.); ------------------------------------------------------------------------------------. L = 1. Multiply by 2.5417464519 to convert [e a0] to [Debye]; Dipole X : -7.8209495 8.4115446 0.5905951; Dipole Y : -2.3244093 2.4977096 0.1733003; Dipole Z : -4.0798888 4.3904336 0.3105448; Magnitude : 0.6894009. ------------------------------------------------------------------------------------. *** tstop() called on agincourt.lan at Mon Sep 16 22:19:42 2024; Module time:; 	user time = 6.43 seconds = 0.11 minutes; 	system time = 0.11 seconds = 0.00 minutes; 	total time = 6 seconds = 0.10 minutes; Total time:; 	user time = 6.43",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3221:25921,Energy,Energy,25921,https://psicode.org,https://github.com/psi4/psi4/issues/3221,1,['Energy'],['Energy']
Energy Efficiency,"A 2.270343; > 210A 2.290240 211A 2.296245 212A 2.304338; > 213A 2.316737 214A 2.379290 215A 2.453589; > 216A 2.461743 217A 2.495632 218A 2.498678; > 219A 2.519294 220A 2.562708 221A 2.608244; > 222A 2.726412 223A 2.739216 224A 2.753717; > 225A 2.766537 226A 2.769494 227A 2.781755; > 228A 2.786035 229A 2.802889 230A 2.877816; > 231A 2.934217 232A 2.946283 233A 2.971176; > 234A 2.978125 235A 3.021450 236A 3.025068; > 237A 3.055308 238A 3.105407 239A 3.192416; > 240A 3.230170 241A 3.237091 242A 3.270263; > 243A 3.501427 244A 3.509120 245A 3.988816; > 246A 4.002956; > ; > Final Occupation by Irrep:; > A; > DOCC [ 47 ]; > ; > Energy converged.; > ; > @RHF https://github.com/RHF Final Energy: -535.97469065986820; > ; > => Energetics <=; > ; > Nuclear Repulsion Energy = 697.1131782964378090; > One-Electron Energy = -2106.2189353611356637; > Two-Electron Energy = 873.1310664048263561; > DFT Exchange-Correlation Energy = 0.0000000000000000; > Empirical Dispersion Energy = 0.0000000000000000; > Total Energy = -535.9746906598714986; > ; > Properties will be evaluated at 0.000000, 0.000000, 0.000000 Bohr; > ==> Properties <==; > ; > Properties computed using the SCF density density matrix; > Nuclear Dipole Moment: (a.u.); > X: 0.0000 Y: 0.0000 Z: 0.0000; > ; > Electronic Dipole Moment: (a.u.); > X: -0.0000 Y: 0.0000 Z: 0.0000; > ; > Dipole Moment: (a.u.); > X: -0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000; > ; > Dipole Moment: (Debye); > X: -0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000; > ; > Saving occupied orbitals to File 180.; > ; > **\* tstop() called on shukla-pc.localdomain at Thu Oct 9 10:48:21 2014; > Module time:; > user time = 515.17 seconds = 8.59 minutes; > system time = 10.04 seconds = 0.17 minutes; > total time = 527 seconds = 8.78 minutes; > Total time:; > user time = 515.17 seconds = 8.59 minutes; > system time = 10.04 seconds = 0.17 minutes; > total time = 527 seconds = 8.78 minutes; > ; > **\* tstart() called on shukla-pc.localdomain; > **\* at Thu Oct 9 10:48:21 201",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/61#issuecomment-58650322:15395,Energy,Energy,15395,https://psicode.org,https://github.com/psi4/psi4/issues/61#issuecomment-58650322,1,['Energy'],['Energy']
Energy Efficiency,"A [recent PR](https://github.com/psi4/psi4/pull/2780#event-7959038316) changed `detci` so that it crashes when the user specified more roots than the basis set allows. @susilehtola proposed that instead, `detci` take as many roots as possible. What do we want to do?. I'll quote Lori's analysis of our options. > 1. Focus on segfault -> error msg first, as Jonathon has done and as eomcc should do. no contracts violated. compute time wasted.; > ; > 2. Reset nroots as needed. Change read_options descriptions to ""max roots sought; may be adjusted downwards for small basis sets"". nroots contract violated. could be troublesome for machine returned results since roots array length != nroots requested. good for throughput calcs & no compute time wasted. (resetting nroots may not be so easy if arrays are allocated based on option.); > ; > 3. Same as (2) but py-side it detects nroots change and throws a specialized error (like we do for convergence) with full output and completed wfn attached, so no compute or results lost. no contracts violated. automated runs can recover.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2825:806,allocate,allocated,806,https://psicode.org,https://github.com/psi4/psi4/issues/2825,1,['allocate'],['allocated']
Energy Efficiency,"A clean version of 287272b showed that when `full_hess_every` is enabled in an optimization, the data is corrupted. Every time a hessian is taken, it appears to be taken from the starting geometry, not the current geometry in the optimization. optking thinks the ""reference"" of the hessian it gets should be the starting point for the next step for purposes of convergence criteria output, but not for purposes of the internal coordinate step. In this example, every odd displacement has exactly the same energy. To me, this screams that `intco.dat` is being handled correctly, but some other file is not. Input file:; ```; molecule h2o { ; symmetry c1; O ; H 1 1.0 ; H 1 1.0 2 104.5 ; }. set {; basis sto-3g; e_convergence 10; d_convergence 10; points 3; geom_maxiter 50; full_hess_every 2 ; }. optimize('scf', dertype = 0); ```. We direly need `full_hess_every` coverage in the test suite. `grep` says the only test covering it is `opt10`, which isn't even built when I build all the tests, for some reason. The exact commit number is probably not integral to this problem.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1298:505,energy,energy,505,https://psicode.org,https://github.com/psi4/psi4/issues/1298,1,['energy'],['energy']
Energy Efficiency,"A couple thoughts before a more thorough review:. Can you add some test cases to verify that this doesn't change the SCF energy? That set of test molecules from yesterday would be good, plus a few larger molecules. Could you do some timing to verify that this does in fact speed the SCF code up? A comparison of system size, density threshold, timing, and energy error would be good. It appears that you're calculating integrals within the master loop and doing redundant work, possibly more than the original algorithm. I think you want to calculate all (NM|NM) shells outside of the loop and use those integrals within the loop.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2062#issuecomment-743352546:121,energy,energy,121,https://psicode.org,https://github.com/psi4/psi4/pull/2062#issuecomment-743352546,2,['energy'],['energy']
Energy Efficiency,"A good test of when this is fixed: the `scf-property` test line `#compare_values(-39.14134740550916, variable('B3LYP TOTaL ENERGY'), 6, ""B3LYP energy"") #TEST # waiting for dft fctl psivars` should pass, uncommented.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2477#issuecomment-1068078956:123,ENERGY,ENERGY,123,https://psicode.org,https://github.com/psi4/psi4/issues/2477#issuecomment-1068078956,2,"['ENERGY', 'energy']","['ENERGY', 'energy']"
Energy Efficiency,"A little worried damping is not being applied correctly. We build JK matrices from C matrices and not the density, the only time the density is used is in the DIIS error vector and for the energy. We probably need to scale the Fock matrices as well. @jturney @andysim Did I miss something here?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/422#issuecomment-228439151:189,energy,energy,189,https://psicode.org,https://github.com/psi4/psi4/pull/422#issuecomment-228439151,1,['energy'],['energy']
Energy Efficiency,"A minor DCT bug that is on my to-fix list when I move the control logic to Python:; The code often prints energies to the output file that were created using outdated intermediates, so they aren't the energy you would actually get using the current cumulant and orbital parameters. This means that even for variational parameters, lowering the residual produces a higher (reported) energy. The two offenders I've noticed are not updating the tau intermediate after a cumulant update and not re-computing the 1RDM and separable contributions to the energy after updating tau. In `dcft_oo_UHF.cc:run_simult_dcft_oo`, for instance, the cumulant is updated on [this line](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dcft/dcft_oo_UHF.cc#L133), but tau never gets recomputed (`build_tau` and `refine_tau`) until the next iteration of the loop, by which point the energy has already been printed. You can see both problems in the twostep algorithm. Even if it was recomputed, `dcft_compute_uhf:compute_energy_UHF` is never called until the next iteration of the loop either. That function is responsible for re-computing the tau-dependent terms, so the tau-energy contribution would still be one iteration behind. The control logic will need to be re-organized.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1511:201,energy,energy,201,https://psicode.org,https://github.com/psi4/psi4/issues/1511,5,['energy'],['energy']
Energy Efficiency,"A molecule like the one below with charged monoA and neutral monoB gets confused when monoB ghosted b/c charge (interpreted as ""overall charge"") applied to each of monomers, but no electrons in monoB to even up count. This has bitten at least four users and developers and been declared to be bug, not feature. This is not a beginner's ticket, as it involves the dreaded `Molecule::create_molecule_from_string` function, but it needs to be fixed. I'd recc. writing the test cases first. ```; molecule mol {; units Angstrom; no_com; no_reorient; -1 1; C 0.033732944853 -1.125511797114 1.580406987928; C 0.784732944853 -1.165511797114 0.291406987928; O 0.666732944853 -0.174511797114 -0.463593012072; O 1.521732944853 -2.153511797114 0.048406987928; H -1.041267055147 -1.075511797114 1.390406987928; H 0.317732944853 -0.230511797114 2.136406987928; H 0.264722944853 -2.016378797114 2.182900987928; -- # toggle this line to comment to fix; #0 1; Gh(C) -2.103267055147 2.116488202886 -0.821593012072; Gh(O) -0.712267055147 2.192488202886 -0.525593012072; Gh(H) -0.329267055147 1.293488202886 -0.603593012072; Gh(H) -2.471267055147 1.129488202886 -0.531593012072; Gh(H) -2.632087055147 2.887778202886 -0.242406012072; Gh(H) -2.239007055147 2.240855802886 -1.906078012072. }; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/114:35,charge,charged,35,https://psicode.org,https://github.com/psi4/psi4/issues/114,3,['charge'],"['charge', 'charged']"
Energy Efficiency,"A rather important issue for @bozkaya. The test suite documents that energies computed with DFOCC can be internally inconsistent. `dfomp2p5-2` demonstrates the problem. The final energy computed via Lagrangian is [-75.7907](https://github.com/psi4/psi4/blob/master/tests/dfomp2p5-2/output.ref#L498). The final energy is reported as [-75.7914](https://github.com/psi4/psi4/blob/master/tests/dfomp2p5-2/output.ref#L530) hartrees, which are inconsistent. The discrepancy disappeared upon elimination of [the lines in dfocc that allow for the user-specified energy convergence criteria to be overridden](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dfocc/occ_iterations.cc#L278-L281), per issue #1143. The relevant part of the output file is:. ```; ============================================================================== ; ================ Performing DF-OMP2.5 iterations... ========================== ; ============================================================================== ; Minimizing DF-MP2.5-L Functional ; ------------------------------ ; Iter E_total DE RMS MO Grad MAX MO Grad RMS T2 ; ---- --------------- ---------- ----------- ----------- ---------- ; 1 -75.7906384498 -7.38e-04 1.89e-03 7.57e-03 5.95e-06 ; 2 -75.7907030487 -6.46e-05 6.80e-04 3.45e-03 1.29e-06 ; 3 -75.7907190240 -1.60e-05 4.26e-04 1.69e-03 5.72e-07 ; 4 -75.7907244154 -5.39e-06 2.25e-04 1.39e-03 2.96e-07 ; 5 -75.7907266815 -2.27e-06 1.20e-04 1.13e-03 1.64e-07 ; 6 -75.7907291572 -2.48e-06 9.37e-05 4.54e-04 2.34e-07 ; 7 -75.7907295719 -4.15e-07 2.53e-05 2.18e-04 7.57e-08 . ============================================================================== ; ======================== DF-OMP2.5 ITERATIONS ARE CONVERGED ================== ; ============================================================================== . Computing DF-MP2.5 energy using optimized MOs... ; ======================================================================= ; Nuclear Repulsion Energy (a.u.) : 9.18738645758982; SCF E",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1509:179,energy,energy,179,https://psicode.org,https://github.com/psi4/psi4/issues/1509,3,['energy'],['energy']
Energy Efficiency,"A recent [forum issue](http://forum.psicode.org/t/fatal-error-wavefunction-unable-to-obtain-mo-coefficients/2204/14) about obtaining dipoles has been complicated by the question of what the name of the variable to call them is. For example:. ```; wfn = psi4.properties(""scf"", properties=['dipole'], return_wfn=True)[1]; prop_dipole = wfn.variable(""SCF DIPOLE""). wfn = energy(""scf"", return_wfn=True)[1]; psi4.oeprop(wfn, ""DIPOLE""); oeprop_dipole = wfn.variable(""DIPOLE""); ```. These two methods of obtaining the dipole save it to the wavefunction under different names. Is there some way to make this more standardized?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2203:368,energy,energy,368,https://psicode.org,https://github.com/psi4/psi4/issues/2203,1,['energy'],['energy']
Energy Efficiency,"A segfaulting test case; ```; molecule {; 0 2; H; }; set reference uhf; set df_scf_guess false; set scf_type direct. basis {; assign test. [test]; spherical; ****; H 0; P 1 1.0; 1.0 1.0; ****; }; energy('scf'); ```. I have found one issue and fixed it in hf.cc; ```; diff --git a/psi4/src/psi4/libscf_solver/hf.cc b/psi4/src/psi4/libscf_solver/hf.cc; index fec5efaa4..c462addab 100644; --- a/psi4/src/psi4/libscf_solver/hf.cc; +++ b/psi4/src/psi4/libscf_solver/hf.cc; @@ -705,9 +705,15 @@ void HF::form_Shalf() {; ; // Convert the eigenvales to 1/sqrt(eigenvalues); const Dimension& dimpi = eigval->dimpi();; - double min_S = std::fabs(eigval->get(0, 0));; + // Cannot assume that (0,0) is a valid reference; + bool min_S_initialized = false;; + double min_S;; for (int h = 0; h < nirrep_; ++h) {; for (int i = 0; i < dimpi[h]; ++i) {; + if(!min_S_initialized) {; + min_S = eigval->get(h, i);; + min_S_initialized = true;; + }; ```; but now the code crashes somewhere in pybind11.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1694:196,energy,energy,196,https://psicode.org,https://github.com/psi4/psi4/issues/1694,1,['energy'],['energy']
Energy Efficiency,"A simple input fails to run:; ```; # Any line starting with the # character is a comment line; #! Sample HF/cc-pVDZ H2O computation. memory 250 mb. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; energy('scf'); ```; a; And here is the error message:. ```; [henrique@localhost ~] $ psi4 teste.dat ; An error has occurred python-side. Traceback (most recent call last):. File ""<string>"", line 7, in <module>. File ""/usr/share/psi4/python/driver.py"", line 45, in <module>; import driver_util. File ""/usr/share/psi4/python/driver_util.py"", line 30, in <module>; from procedures import *. File ""/usr/share/psi4/python/procedures/__init__.py"", line 1, in <module>; from proc_table import procedures, hooks, energy_only_methods. File ""/usr/share/psi4/python/procedures/proc_table.py"", line 198, in <module>; for ssuper in proc.superfunctional_list():. File ""/usr/share/psi4/python/procedures/functional.py"", line 3605, in superfunctional_list; sup = superfunctionals[key](key, 1, 1). File ""/usr/share/psi4/python/procedures/functional.py"", line 1953, in build_b3lypd1_superfunctional; sup = build_b3lyp_superfunctional(name, npoints, deriv). File ""/usr/share/psi4/python/procedures/functional.py"", line 1224, in build_b3lyp_superfunctional; sup = psi4.SuperFunctional.blank(). TypeError: No to_python (by-value) converter found for C++ type: boost::shared_ptr<psi::SuperFunctional>. ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/531:218,energy,energy,218,https://psicode.org,https://github.com/psi4/psi4/issues/531,1,['energy'],['energy']
Energy Efficiency,"A single basis function only covers a single center, but an element of a density matrix is made up of two basis functions which can exist on separate centers. You may need to define a core density more, but usually we think of the ""core"" as molecular orbitals (not basis functions) that do not belong in the valence. In general you can remove the `n` lowest eigenvalues from a density as follows:; ```; Da = np.array(wfn.Da()); Ca = np.array(wfn.Ca()). ncore = 5; D_valence = Da - np.einsum('pi,qi->pq', Ca[:, : ncore], Ca[:, : ncore]). # psi4.core.Matrix.from_array(D_valence) # Convert back to a Psi4 matrix object.; ```. The lowest energy eigenvalues are typically the `S` densities close to a nuclei. From the above molecule we see an eigenvalue spectrum:. ```; Doubly Occupied:. 1A -481.016510 2A -61.827320 3A -55.742925; 4A -55.738646 5A -55.738646 6A -9.947341; 7A -8.413043 8A -6.292052 9A -6.277230; 10A -6.277230 11A -2.489635 12A -2.485739; ```. Where 1A/2A are the 1S/2S core molecular orbitals and 3A-5A is the first P shell. I would not guess the others without plotting.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1311#issuecomment-436440670:635,energy,energy,635,https://psicode.org,https://github.com/psi4/psi4/issues/1311#issuecomment-436440670,1,['energy'],['energy']
Energy Efficiency,"A solution for multi-invocation tests going forward would be much appreciated. We used to incorporate this into the Makefile build system (https://github.com/psi4/psi4/blob/4.0b5/tests/pywrap-freq-e-sowreap/Makefile.in), but I never got around to converting it for CMake. I modified the old script (below) and checked the tests file, and it still looks ok. ``` bash; >>> psi4/tests/pywrap-freq-e-sowreap: bash script.sh ; Performing finite difference calculations by energies; 13 displacements needed.; Performing finite difference calculations by energies; 13 displacements needed.; Computation complete.; Frequencies.......................................................PASSED; ZPVE..............................................................PASSED; SP energy.........................................................PASSED; SP NRE............................................................PASSED; SP NRE............................................................PASSED; SP NRE............................................................PASSED; >>> psi4/tests/pywrap-freq-e-sowreap: cat script.sh ; PSIDATADIR=../../lib. ../../objdir2/bin/psi4 -p PSIDATADIR input.dat ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-1.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-2.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-3.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-4.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-5.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-6.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-7.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-8.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-9.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-10.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-11.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-12.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-13.in ; /bin/cat tests >> FREQ-master.in; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-master.in ; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/168#issuecomment-157541405:758,energy,energy,758,https://psicode.org,https://github.com/psi4/psi4/issues/168#issuecomment-157541405,1,['energy'],['energy']
Energy Efficiency,"A state: 1.0720010 (a.u.), 29.1706341 (eV); 	9 A state: 1.1388267 (a.u.), 30.9890538 (eV); 	10 A state: 1.1821020 (a.u.), 32.1666340 (eV); 	11 A state: 1.1875445 (a.u.), 32.3147310 (eV); 	12 A state: 1.1982557 (a.u.), 32.6061991 (eV); 	13 A state: 1.1992474 (a.u.), 32.6331833 (eV); 	14 A state: 1.2585194 (a.u.), 34.2460572 (eV); 	15 A state: 1.2767037 (a.u.), 34.7408785 (eV); 	16 A state: 1.2815731 (a.u.), 34.8733809 (eV); 	17 A state: 1.3132971 (a.u.), 35.7366340 (eV); 	18 A state: 1.3296420 (a.u.), 36.1814011 (eV); 	19 A state: 1.3540510 (a.u.), 36.8456048 (eV); 	20 A state: 1.3585131 (a.u.), 36.9670246 (eV); ```. ### **QChem 5.1.1 energies output**; ```; Excitation energy: 9.604199 eV; Excitation energy: 11.471817 eV; Excitation energy: 12.351230 eV; Excitation energy: 14.275101 eV; Excitation energy: 15.537288 eV; Excitation energy: 19.185085 eV; Excitation energy: 28.691037 eV; Excitation energy: 29.170632 eV; Excitation energy: 30.989051 eV; Excitation energy: 32.166632 eV; Excitation energy: 32.314728 eV; Excitation energy: 32.606197 eV; Excitation energy: 32.633181 eV; Excitation energy: 34.246055 eV; Excitation energy: 34.740876 eV; Excitation energy: 34.873378 eV; Excitation energy: 35.736631 eV; Excitation energy: 36.181398 eV; Excitation energy: 36.845602 eV; Excitation energy: 36.967022 eV; ```. Running the ADC(2) test in both programs showed some slight deviation in energies, but nothing alarming.; ### **QChem 5.1.1 - adc(2) test energies**; ```; Excitation energy: 6.951866 eV; Excitation energy: 6.951866 eV; ```. ### **Psi4 1.3.2 -- adc(2) test energies**; ```; ->	1 A state : 0.2557608 (a.u.), 6.9596066 (eV); Non-iterative: 0.2559128 (a.u.), 6.9637417 (eV); ->	2 A state : 0.2557608 (a.u.), 6.9596066 (eV); Non-iterative: 0.2559128 (a.u.), 6.9637417 (eV); ```. Further, we set up calculations for the systems in [this work](https://aip.scitation.org/doi/10.1063/1.1504708). Please find the calculations for HF and N2 below; I am happy to provide data on the ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1033#issuecomment-510952344:1866,energy,energy,1866,https://psicode.org,https://github.com/psi4/psi4/issues/1033#issuecomment-510952344,1,['energy'],['energy']
Energy Efficiency,"A state: 1.3296420 (a.u.), 36.1814011 (eV); 	19 A state: 1.3540510 (a.u.), 36.8456048 (eV); 	20 A state: 1.3585131 (a.u.), 36.9670246 (eV); ```. ### **QChem 5.1.1 energies output**; ```; Excitation energy: 9.604199 eV; Excitation energy: 11.471817 eV; Excitation energy: 12.351230 eV; Excitation energy: 14.275101 eV; Excitation energy: 15.537288 eV; Excitation energy: 19.185085 eV; Excitation energy: 28.691037 eV; Excitation energy: 29.170632 eV; Excitation energy: 30.989051 eV; Excitation energy: 32.166632 eV; Excitation energy: 32.314728 eV; Excitation energy: 32.606197 eV; Excitation energy: 32.633181 eV; Excitation energy: 34.246055 eV; Excitation energy: 34.740876 eV; Excitation energy: 34.873378 eV; Excitation energy: 35.736631 eV; Excitation energy: 36.181398 eV; Excitation energy: 36.845602 eV; Excitation energy: 36.967022 eV; ```. Running the ADC(2) test in both programs showed some slight deviation in energies, but nothing alarming.; ### **QChem 5.1.1 - adc(2) test energies**; ```; Excitation energy: 6.951866 eV; Excitation energy: 6.951866 eV; ```. ### **Psi4 1.3.2 -- adc(2) test energies**; ```; ->	1 A state : 0.2557608 (a.u.), 6.9596066 (eV); Non-iterative: 0.2559128 (a.u.), 6.9637417 (eV); ->	2 A state : 0.2557608 (a.u.), 6.9596066 (eV); Non-iterative: 0.2559128 (a.u.), 6.9637417 (eV); ```. Further, we set up calculations for the systems in [this work](https://aip.scitation.org/doi/10.1063/1.1504708). Please find the calculations for HF and N2 below; I am happy to provide data on the other systems if needed.; Basis set & geometry information for HF and N2 were found in [this work](https://aip.scitation.org/doi/abs/10.1063/1.1386415). ### **HF**; For ADC(1) results, we continue to see no remarkable error. In the ADC(2) results, the HF system's excitation energies calculated by QChem reproduce the results provided in the Trofimov, Stelter, Schirmer paper. However, the energies provided by Psi4 seem to have an inconsistent deviation from the values: for so",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1033#issuecomment-510952344:2356,energy,energy,2356,https://psicode.org,https://github.com/psi4/psi4/issues/1033#issuecomment-510952344,1,['energy'],['energy']
Energy Efficiency,"A troubling example:; ```; molecule {; 0 2; Mg; F 1 2.8 ; }. set reference uhf ; set soscf true; set soscf_print true; set stability_analysis follow. energy('hf/cc-pvdz'); ```. Even towards the end, we're seeing non-monotonic convergence.; ```; -----------------------------------------------------; Iter Residual RMS Max RMS Remain Time [s]; -----------------------------------------------------; Guess 1.771e+00 1.771e+00 1 0; 1 5.715e-01 5.715e-01 1 0; 2 4.809e-01 4.809e-01 1 0; 3 2.494e-01 2.494e-01 1 0; 4 2.512e-01 2.512e-01 1 0; -----------------------------------------------------; ```. This should be impossible for CG, preconditioned or otherwise, applied to a positive-semidefinite problem. But stability analysis swears we're PSD.; ```; DLUSolver converged. Wavefunction stable under totally symmetric rotations.; Lowest totally symmetric eigenvalue: 0.018307; Lowest UHF->UHF stability eigenvalues:; B2 0.018307 B1 0.018307 A1 0.038290 A2 0.424251; ```. I'm chalking this up to a bug somewhere in our SOSCF code. _siiiiiiiiigh_",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2204#issuecomment-868509190:150,energy,energy,150,https://psicode.org,https://github.com/psi4/psi4/issues/2204#issuecomment-868509190,1,['energy'],['energy']
Energy Efficiency,"A user on the forums [reported](http://forum.psicode.org/t/psio-error-during-adc-2/1338) a PSIO error when using ADC(2). The input file is; ```; #! ADC/def-2SVP on BODIPY-Phe . molecule bodphe {; 0 1 ; N 0.07895 0.63049 2.21156; N 0.40701 -1.77253 2.18386; C 0.85975 -1.61894 0.87368; C 1.93462 -2.51476 0.66009; C 0.25153 -0.54266 0.07529; C 0.60747 0.60802 0.92030; C 1.47746 1.72071 0.77028; C 1.38234 2.45311 1.95195; C 2.07438 -3.24863 1.84094; C 0.53652 1.71840 2.84134; C 1.13424 -2.73093 2.77791; H 2.76916 -4.06657 2.02914; H 0.98002 -2.99119 3.82431; H 2.46553 -2.64393 -0.28198; H -0.76107 1.52726 -1.36025; C -0.87740 0.55157 -1.84231; C -0.42668 -0.61486 -1.17553; C -0.59367 -1.86931 -1.81442; H -0.24902 -2.77578 -1.30769; C -1.18278 -1.94632 -3.07591; H -1.30041 -2.92327 -3.55316; C -1.60723 -0.78659 -3.74115; H -2.04665 -0.85123 -4.73942; C -1.45720 0.45654 -3.10859; H -1.78685 1.36634 -3.61791; B -0.55985 -0.69534 2.82439; F -0.40573 -0.68314 4.19154; H 0.27433 1.92595 3.87885; H 1.84952 3.41187 2.17639; H 2.03049 1.96835 -0.13399; F -1.84936 -0.86321 2.39539; symmetry c1 ; }. set {; reference rhf; basis def2-svp; freeze_core true; guess auto ; roots_per_irrep [2] ; }. ref_energy = -906.2735763050857258 ; adc_energy = energy('adc'); ```. The (OV|VV) integral transformation completes, and then `file4_mat_irrep_rd_block` raises the following error:; ```; PSIO_ERROR: Can't find TOC Entry MO Ints V1243); PSIO_ERROR: unit = 61, errval = 13; PSIO_ERROR: 13 (no such TOC entry); ```. This may be a large system, but user's tests indicate scratch usage is at 10% at the time of the crash, and this error message isn't what PSIO normally displays during a memory problem.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1596:1246,energy,energy,1246,https://psicode.org,https://github.com/psi4/psi4/issues/1596,1,['energy'],['energy']
Energy Efficiency,"AC; @UHF iter 5: -98.96468336105178 -3.27194e+00 1.08919e-02 DIIS/FRAC; @UHF iter 6: -99.16143874023540 -1.96755e-01 9.82232e-04 DIIS/FRAC; @UHF iter 7: -99.16448800785139 -3.04927e-03 2.62203e-04 DIIS/FRAC; @UHF iter 8: -99.16466805777382 -1.80050e-04 9.94209e-05 DIIS/FRAC; @UHF iter 9: -99.16470603597492 -3.79782e-05 8.45894e-06 DIIS/FRAC; @UHF iter 10: -99.16470620018562 -1.64211e-07 6.74767e-07 DIIS/FRAC; Energy and wave function converged.; ```; and the final energy is close to my fully numerical value `-99.164711346`. However, if you remove `symmetry c1`, it is not using fractional occupations at all:; ```; ==> Fractionally-Occupied SCF Iterations <==. Alpha orbital 3 will contain 1.000E+00 electron.; Alpha orbital 4 will contain 1.000E+00 electron.; Alpha orbital 5 will contain 1.000E+00 electron.; Beta orbital 3 will contain 6.667E-01 electron.; Beta orbital 4 will contain 6.667E-01 electron.; Beta orbital 5 will contain 6.667E-01 electron. @UHF iter 1: -85.83418494094745 -8.58342e+01 2.89307e-01 DIIS; Occupation by irrep:; Ag B1g B2g B3g Au B1u B2u B3u ; DOCC [ 2, 0, 0, 0, 0, 1, 1, 1 ]; SOCC [ 0, 0, 0, 0, 0, 0, 0, 0 ]. @UHF iter 2: -87.14703249342156 -1.31285e+00 8.61028e-02 FRAC; @UHF iter 3: -94.44949400540921 -7.30246e+00 1.33943e-01 DIIS/FRAC; @UHF iter 4: -88.66303583515608 5.78646e+00 7.46716e-02 DIIS/FRAC; @UHF iter 5: -97.45982782482486 -8.79679e+00 7.49420e-02 DIIS/FRAC; @UHF iter 6: -99.09220877420857 -1.63238e+00 2.78679e-02 DIIS/FRAC; @UHF iter 7: -99.44918068528692 -3.56972e-01 3.39613e-03 DIIS/FRAC; @UHF iter 8: -99.45912394307129 -9.94326e-03 7.68176e-04 DIIS/FRAC; @UHF iter 9: -99.45934128713316 -2.17344e-04 2.22026e-04 DIIS/FRAC; @UHF iter 10: -99.45935820610052 -1.69190e-05 3.31546e-05 DIIS/FRAC; @UHF iter 11: -99.45935869140743 -4.85307e-07 2.94426e-06 DIIS/FRAC; @UHF iter 12: -99.45935870608619 -1.46788e-08 1.74098e-06 DIIS/FRAC; @UHF iter 13: -99.45935871335570 -7.26951e-09 2.09073e-07 DIIS/FRAC; Energy and wave function converged.; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1673:4939,Energy,Energy,4939,https://psicode.org,https://github.com/psi4/psi4/issues/1673,1,['Energy'],['Energy']
Energy Efficiency,ADIIS minimization failed for wB97M-V energy computation with modified VV10 parameters,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2641:38,energy,energy,38,https://psicode.org,https://github.com/psi4/psi4/issues/2641,1,['energy'],['energy']
Energy Efficiency,"AJ made this comment:. My implementation involved handling cases where the user sets a hf reference and calls a dft method. For example if the input is,. set reference rhf. energy('b3lyp). the reference option will be set to rks. The goal there was to keep the energy('method') interface user friendly. If/when psi4public/118 is implemented the smart-reference should be able to handle those conflicts and my checks for these conflicts can probably be removed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/118#issuecomment-170147040:173,energy,energy,173,https://psicode.org,https://github.com/psi4/psi4/issues/118#issuecomment-170147040,2,['energy'],['energy']
Energy Efficiency,"AL; Keyword: BASIS; atoms 1, 3-8 entry C line 117 (ECP: line 2345) file /Users/cwagen/.../.pixi/envs/dev/share/psi4/basis/vdzp.gbs ; atoms 2, 9-11 entry H line 22 file /Users/cwagen/.../.pixi/envs/dev/share/psi4/basis/vdzp.gbs . !!! WARNING: ECP capability is in beta. Please check occupations closely. !!!. => WB97X3C: Empirical Dispersion <=. Grimme's -D4 (BJ-damping) Dispersion Correction with ATM; Caldeweyher, E.; Ehlert, S.; Hansen, A.; Neugebauer, H.; Spicher, S.; Bannwarth, C.; Grimmme, S., J. Chem. Phys. 150, 154122 (2019). a1 = 0.246400; a2 = 4.737000; alp = 16.000000; s6 = 1.000000; s8 = 0.000000; s9 = 1.000000; ga = 3.000000; gc = 2.000000; wf = 6.000000. ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith; RKS Reference; 1 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c1; Full point group: C1. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; C -3.385689447328 -1.019909032022 -1.749453831407 12.000000000000; H -4.303799447328 -1.298729032022 -2.222123831407 1.007825032230; C -2.336629447328 -0.701769032022 -1.209473831407 12.000000000000; C -1.177199447328 -0.351139032022 -0.612463831407 12.000000000000; C -0.119169447328 -0.031909032022 -0.066563831407 12.000000000000; C 1.038150552672 0.314670967978 0.533526168593 12.000000000000; C 2.088230552672 0.627260967978 1.081186168593 12.000000000000; C 3.329350552672 0.995630967978 1.729406168593 12.000000000000; H 3.940040552672 1.640920967978 1.078936168593 1.007825032230; H 3.139820552672 1.543830967978 2.665426168593 1.007825032230; H 3.926960552672 0.104360967978 1.976426168593 1.007825032230. Running in c1 symmetry. Rotational constants: A = 5.27900 B = 0.02592 C = 0.02592 [cm^-1]; Rotational constants: A = 158260.38795 B = 777.17946 C = 777",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3221:18932,charge,charge,18932,https://psicode.org,https://github.com/psi4/psi4/issues/3221,1,['charge'],['charge']
Energy Efficiency,Access to terms in the MP2 energy from Python,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/642:27,energy,energy,27,https://psicode.org,https://github.com/psi4/psi4/issues/642,1,['energy'],['energy']
Energy Efficiency,"According to [the documentation](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/petitelist.h#L329-L330) of `sotoao()`, the function is supposed to return the inverse of `PetiteList.aotoso()`. This matrix is not guaranteed to be invertible. If the matrix is _not_ invertible, multiplying `sotoao()` and `aotoso()` together does not yield the identity matrix. The problem is that `aotoso()` isn't even guaranteed to be square. The SO space will always be [the number of basis functions](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/petitelist.h#622-L639). The AO space will be [the number of basis functions or the number of atomic orbitals ](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/petitelist.h#615-L620), depending on whether `include_pure_transform_` is set. In other words, you may be transforming from either Cartesian or pure angular momentum functions to symmetry-adapted pure angular momentum functions. If `d` or higher angular momentum functions are present, then choosing to transform from Cartesian functions means you have more atomic orbitals than basis functions, so the row and column dimensions don't match. The transformation isn't even square, let alone invertible, so of course `sotoao()` returns nonsense. The following input file almost demonstrates the problem. You'll need to PyBind the `PetiteList` initializer over as well for it to run. ```; molecule mol {; 0 3; symmetry c1; C 0.0000000000 0.0000000000 -0.5928430915; H -0.0000000000 0.9469373770 -1.1509808737; H 0.0000000000 -0.9469373770 -1.1509808737; }. basis = core.BasisSet.build(mol, ""ORBITAL"", ""cc-pvdz"", quiet=True); factory = core.IntegralFactory(basis). # np.dot(so2ao, ao2so) should always be the identity. The functions are inverses. # We have a problem!; petite = core.PetiteList(basis, factory, True); so2ao = petite.sotoao().nph[0]; print(so2ao); print(so2ao.shape) # (24, 25) ; ao2so = petite.aotoso().nph[0]; print(np.dot(so2ao, ao2so)). # Works ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1763:929,adapt,adapted,929,https://psicode.org,https://github.com/psi4/psi4/issues/1763,1,['adapt'],['adapted']
Energy Efficiency,"According to [the forums](http://forum.psicode.org/t/windows-anaconda-nightly-build-failing-on-sapt0-calculations/2353/4), the following simple input file raises `PSIO_ERROR: unit = 193, errval = 8` AKA trying to close file 193 when it's not even open:. ```; memory 4 GB. molecule water_dimer {; 0 1; O -1.551007 -0.114520 0.000000; H -1.934259 0.762503 0.000000; H -0.599677 0.040712 0.000000; --; 0 1; O 1.350625 0.111469 0.000000; H 1.680398 -0.373741 -0.758561; H 1.680398 -0.373741 0.758561. units angstrom; no_reorient; symmetry c1; }. set basis jun-cc-pvdz. energy('sapt0'); ```. Possibly of importance is that the reporter supplied `-n 10` to the computation, so threading may be involved.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2342:565,energy,energy,565,https://psicode.org,https://github.com/psi4/psi4/issues/2342,1,['energy'],['energy']
Energy Efficiency,"Actually @awvwgk, i am just trying to set the D4 paramters and notice that also the charge-scaling parameters need to be adjusted. Not sure how to do that with the current setup. The QCEngine supports those parameters?. also `r2scan3c` is not recognized by the dftd4 binary?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2121#issuecomment-1367996918:84,charge,charge-scaling,84,https://psicode.org,https://github.com/psi4/psi4/issues/2121#issuecomment-1367996918,1,['charge'],['charge-scaling']
Energy Efficiency,"Actually, it seems the ordering is *still* wrong. Comparing coefficients with and without symmetry, there are huge differences. I'm at my wit's end... So, for a simple test case; ```; molecule {; H 0.0 0.0 0.0; H 0.0 1.0 0.0; H 0.0 0.0 1000.0; H 0.0 1.0 1000.0; }. set basis 6-31G; scf_e, scf_wfn = energy('s_x', return_wfn=True). set reference rhf; set r_convergence 1e-10; set dump_vectors true; energy('fci', ref_wfn=scf_wfn); ```; when run without symmetry, the 00000202 configuration turns up with zero weight. When symmetry is used, however, the configuration gets an amplitude of 5.949876123577e-04...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/700#issuecomment-301289886:299,energy,energy,299,https://psicode.org,https://github.com/psi4/psi4/pull/700#issuecomment-301289886,2,['energy'],['energy']
Energy Efficiency,"Actually, the stability without symmetry is missing the lower eigenvalue. That can happen when the guess for the Davidson solver does not contain the solution you are looking for. The following input:. ```; molecule fluorine {; 0 1; F; F 1 1.4113. symmetry c1; }. set globals {; basis cc-pvdz; reference uhf; scf_type pk; e_convergence 10; d_convergence 10; stability_analysis follow; solver_n_guess 6; }. energy ('scf'); ```. finds the wavefunction is unstable with the eigenvalue -0.098916 and then reoptimizes the SCF in the non-totally symmetric state to get to the stable solution.; (This is also documented in the manual along with what to do when the Davidson solver does not converge.); Maybe we should increase `solver_n_guess` default ? I don't know how the number of guess vectors to include scales with system size though. And I would expect this kind of problem to appear only in very symmetric systems.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1125#issuecomment-412417037:406,energy,energy,406,https://psicode.org,https://github.com/psi4/psi4/issues/1125#issuecomment-412417037,1,['energy'],['energy']
Energy Efficiency,Adapt PSIMRCC to compute_energy standard,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1854:0,Adapt,Adapt,0,https://psicode.org,https://github.com/psi4/psi4/pull/1854,1,['Adapt'],['Adapt']
Energy Efficiency,Added MBIS Charge Partitioning Scheme,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1961:11,Charge,Charge,11,https://psicode.org,https://github.com/psi4/psi4/pull/1961,1,['Charge'],['Charge']
Energy Efficiency,Added isapt-charged example,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2950:12,charge,charged,12,https://psicode.org,https://github.com/psi4/psi4/pull/2950,1,['charge'],['charged']
Energy Efficiency,"Adding purely for the sake of search results for anyone else who goes down this rabbit hole:. If you are getting a mismatch between Orca and Psi4 on, say, a dimer interaction energy, and your system contains Xe or I, and you've been tearing your hair out trying to reconcile the difference, **this is probably why**. Orca removes the ECPs on ghost sites.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1968#issuecomment-1764917353:175,energy,energy,175,https://psicode.org,https://github.com/psi4/psi4/issues/1968#issuecomment-1764917353,1,['energy'],['energy']
Energy Efficiency,"Admittedly the error message should be updated to be more informative, but; the short answer is a single atom doesn't have a vibrational frequency. More generally any molecular system has 3 times the number of atoms, total; degrees of freedom; the difference between that and the number of external; degrees of freedom is the internal degrees of freedom, i.e. the; vibrations. An atom has three external degrees of freedom and thus in turn; has 0 internal degrees of freedom. Hope that helps.; On Mar 31, 2016 8:07 PM, ""drhaney"" notifications@github.com wrote:. > Attempting frequency() on atomic species fails irrespective of charge,; > multiplicity, and reference type.; > ; > Typical error message:; > ; > 1 displacements needed.; > 1; > ; > An error has occurred. Traceback:; > : basic_string::replace: File """", line 26, in; > ; > File ""/home/drhaney/miniconda/share/psi4/python/driver.py"", line 1840, in; > frequency; > psi4.thermo(wfn, wfn.frequencies()); > ; > Thanks,; > -drhaney, -- that's ""D. R."", not Doctor.; > ; > Typical input file attached (C atom, neutral triplet).; > C.txt https://github.com/psi4/psi4/files/198782/C.txt; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/332",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/332#issuecomment-204210196:627,charge,charge,627,https://psicode.org,https://github.com/psi4/psi4/issues/332#issuecomment-204210196,1,['charge'],['charge']
Energy Efficiency,"After further investigation, I've learned a few things. First, I was mistaken about the PCG convergence guarantees. Each iteration guarantees that you are closer to the correct solution vector. It does _not_ guarantee that your residual RMS is smaller. For a simple model, just think of z=500x^2+y^2. (1, 0) is closer to the minimum than (0, 10), but (0, 10) gives a smaller value of `z`. In this particular case, you are indeed getting close to the right `x` value, even as your residual increases. Second, when I throw exact MO hessian diagonalization at the problem, they aren't converging well either. The problem is that the MO hessian often has small, negative eigenvalues along the optimization path, causing steps that can be large and energy increasing. While I think this points out a need for more robust convergence algorithms, the behavior I'm seeing does not need an implementation error to be explained. As such, I'm inclined to close this issue and mark an item on the developer wishlist. #2183 is worth separate investigation. @susilehtola, any objections?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2204#issuecomment-869014790:744,energy,energy,744,https://psicode.org,https://github.com/psi4/psi4/issues/2204#issuecomment-869014790,1,['energy'],['energy']
Energy Efficiency,"After memory profiling, I've discovered that this PR _improves_ memory efficiency. For my 384 basis function DF-DCT system, memory requirements plummet from 14.0 GB to 7.8 GB. I've run some tests on a single benzene system instead of a two benzene system, and I understand the behavior:. This isn't due to shifting to Python, but shifting how we clear some large arrays. The C-DIIS code uses `clear()`, which [doesn't necessarily de-allocate the memory.](https://www.cplusplus.com/reference/vector/vector/clear/) PyDIIS makes that not our problem. On taking the existing C-side code and forcibly de-allocating the memory, I observe a memory profile indistinguishable from the PyDIIS one. The large change in memory is most likely because C-DIIS was keeping the allocation space for multiple T2 tensors.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2369#issuecomment-994862260:433,allocate,allocate,433,https://psicode.org,https://github.com/psi4/psi4/pull/2369#issuecomment-994862260,1,['allocate'],['allocate']
Energy Efficiency,"After rebase, `cookbook-manual-fd-hess-grad` and `cookbook-manual-fd-hess-energy` fail due to `set_frequencies` missing. Is there something I should replace those with? I don't see an alternative recommended in the deprecation notice.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2727#issuecomment-1332578549:74,energy,energy,74,https://psicode.org,https://github.com/psi4/psi4/pull/2727#issuecomment-1332578549,1,['energy'],['energy']
Energy Efficiency,"After the changes in #2254, the input fails with; ```. psi4.driver.qcdb.exceptions.ValidationError: Gaussian94BasisSetParser::parse: Unable to match an exponent with one contraction: line 4: 1 3.386500000000E+01 2.549380000000E-02. Printing out the relevant lines from the Psithon --> Python processed input file:; """"""; return basstrings; qcdb.libmintsbasisset.basishorde['ANONYMOUSF8B47625'] = basisspec_psi4_yo__anonymousf8b47625; core.set_global_option(""BASIS"", ""anonymousf8b47625""); core.set_global_option(""STABILITY_ANALYSIS"", ""check""); --> energy('scf'). !----------------------------------------------------------------------------------!; ! !; ! Gaussian94BasisSetParser::parse: Unable to match an exponent with one !; ! contraction: line 4: 1 3.386500000000E+01 2.549380000000E-02 !; ! !; !----------------------------------------------------------------------------------!; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2253#issuecomment-882953081:546,energy,energy,546,https://psicode.org,https://github.com/psi4/psi4/issues/2253#issuecomment-882953081,1,['energy'],['energy']
Energy Efficiency,"Ah yes, this is an issue. Neither of the three works as one would expect them to work: the first two don't do anything as the fctl stage is not specified, and the third one does a full extrapolation. I'm not sure what the first two cases should return - neither of those requests anything resembling a ""total energy""; ; - aborting with a warning would be in order, ; - or we can do the same as for correlated methods, where the fctl step is implied as a non-extrapolated one with highest. For the third case, this is clearly a bug which I'll work on fixing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2132#issuecomment-965333017:309,energy,energy,309,https://psicode.org,https://github.com/psi4/psi4/pull/2132#issuecomment-965333017,1,['energy'],['energy']
Energy Efficiency,"Ah yes, this is no longer a used test case in wavefunction_pass. @psi-rking is it possible to reduce the basis set to something fairly quick?. > On Feb 15, 2016, at 9:01 AM, Justin Turney notifications@github.com wrote:; > ; > opt10 is too big for a test case: 15 atoms, C1 symmetry, 322 basis functions, requests 32 GB of memory, and performing a transition state geometry optimization with an initial Hessian by finite difference of gradients. The calculation timed out on the 13 of 79 gradient displacements of the initial Hessian. The only thing that does help is that it's a DF-MP2 calculation.; > ; > —; > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4/issues/253#issuecomment-184219439.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/253#issuecomment-184220315:94,reduce,reduce,94,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-184220315,1,['reduce'],['reduce']
Energy Efficiency,"Ah yes, when you set `active` you are effectively setting `RAS 2`. What you really want to do is set the restricted space like so:. `restricted_uocc [12]`. From the output:. The CI space requires 876 (8.76E+02) determinants and 6 blocks. Cheers,; Daniel Smith. > On Feb 1, 2017, at 22:03, Susi Lehtola <notifications@github.com> wrote:; > ; > molecule {; > 1 1; > symmetry c1; > O; > O 1 R1; > O 2 R2 1 A1; > H 3 R3 2 A2 1 D1; > ; > R1=1.228; > R2=1.587; > R3=0.968; > A1=109.80; > A2=97.10; > D1=180.0; > }; > ; > set basis 6-31G; > set reference rohf; > set scf_type pk; > set nat_orbs true; > scf_e, scf_wfn = energy('scf', return_wfn=True); > ; > set restricted_docc [7]; > set active [10]; > set qc_module detci; > ci_e, ci_wfn = energy('cisd', return_wfn=True, ref_wfn=scf_wfn); > has Nmo = 29 and docc = 12, so a (10e,10o) active space.; > ; > I get with cisd; > ; > There are 252 alpha and 252 beta strings; > The CI space requires 63504 (6.35E+04) determinants and 1 blocks; > with cisdt; > ; > There are 252 alpha and 252 beta strings; > The CI space requires 63504 (6.35E+04) determinants and 1 blocks; > and with cisdtq; > ; > There are 252 alpha and 252 beta strings; > The CI space requires 63504 (6.35E+04) determinants and 1 blocks; > 63504 is the dimension of the FCI space.; > ; > —; > You are receiving this because you commented.; > Reply to this email directly, view it on GitHub <https://github.com/psi4/psi4/issues/600#issuecomment-276855493>, or mute the thread <https://github.com/notifications/unsubscribe-auth/ABsBcV_cGQ1EW9w8Oa9ZEN44L9ON6ReZks5rYUeagaJpZM4LzeQz>.; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/600#issuecomment-276856487:613,energy,energy,613,https://psicode.org,https://github.com/psi4/psi4/issues/600#issuecomment-276856487,2,['energy'],['energy']
Energy Efficiency,"Ah yes, you can't have an electron kinetic energy if you don't have electrons...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3156#issuecomment-2066957346:43,energy,energy,43,https://psicode.org,https://github.com/psi4/psi4/issues/3156#issuecomment-2066957346,1,['energy'],['energy']
Energy Efficiency,"Ah, ok it just sounded like there was a bug in the JK `out_of_core` algorithm. I wouldn't worry about that too much, we have a new DF class coming along that will be able to handle these kinds of things very efficiently.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/437#issuecomment-233000428:208,efficient,efficiently,208,https://psicode.org,https://github.com/psi4/psi4/pull/437#issuecomment-233000428,1,['efficient'],['efficiently']
Energy Efficiency,"Ah, we recently changed some Psi4 infrastructure and there is no longer a global wavefunction as the error mentions. This is either occurring because:; 1) Your PSIDATADIR path is pointing to an older library version; 2) You wrote a custom plugin that still uses this functionality. Please view the following topic: http://forum.psicode.org/t/wavefunction-passing-update/139. Cheers,; Daniel Smith. > On Mar 10, 2016, at 9:58 AM, hernan3009 notifications@github.com wrote:; > ; > It was possible to compile and install psi4 without problems, but the make command returned; > ; > hernan@carlos:~/Power Method/Psi4/pluginintegrales$ make; > /usr/bin/g++ -DHAVE_MM_MALLOC_H -DENABLE_CHEMPS2=1 -DFC_SYMBOL=2 -DHAVE_SYSTEM_NATIVE_LAPACK -DHAVE_SYSTEM_NATIVE_BLAS -DHAS_CXX11_VARIADIC_TEMPLATES -DHAS_CXX11_STATIC_ASSERT -DHAS_CXX11_SIZEOF_MEMBER -DHAS_CXX11_RVALUE_REFERENCES -DHAS_CXX11_NULLPTR -DHAS_CXX11_LONG_LONG -DHAS_CXX11_LAMBDA -DHAS_CXX11_INITIALIZER_LIST -DHAS_CXX11_DECLTYPE -DHAS_CXX11_CSTDINT_H -DHAS_CXX11_CONSTEXPR -DHAS_CXX11_AUTO_RET_TYPE -DHAS_CXX11_AUTO -DHAS_CXX11_FUNC -DHAS_CXX11 -DSYS_LINUX -DRESTRICT=**restrict** -Xlinker -export-dynamic -fPIC -std=c++11 -fopenmp -O3 -DNDEBUG -Wno-unused -I/home/hernan/Programas/psi4/instalacion/interfaces/include -I/home/hernan/Programas/psi4/instalacion/src/lib -I/home/hernan/Programas/psi4/psi4/src/lib -I/home/hernan/Programas/psi4/psi4/include -I/home/hernan/Programas/psi4/instalacion/include -I/home/hernan/Programas/psi4/instalacion/boost/include -I/usr/include/python2.7 -I/usr/include -I/usr/include -I/usr/include -I/usr/include -c pluginintegrales.cc; > pluginintegrales.cc: In function ‘psi::PsiReturnType psi::pluginintegrales::pluginintegrales(psi::Options&)’:; > pluginintegrales.cc:63:64: error: ‘class psi::Process::Environment’ has no member named ‘wavefunction’; > boost::shared_ptr<Wavefunction> wfn = Process::environment.wavefunction();; > ^; > make: **\* [pluginintegrales.o] Error 1; > ; > —; > Reply to this email dire",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/308#issuecomment-194993406:594,Power,Power,594,https://psicode.org,https://github.com/psi4/psi4/issues/308#issuecomment-194993406,1,['Power'],['Power']
Energy Efficiency,"Ah, yes you are right. I have a class wrapper around psi4 that sets the initial configurations and that has the default value 64. That must be why I have the spikes. Because psi4 knows that is available to it because I requested it in the initial configurations. . Okay so I set up tests where I am generating an interaction energy surface scan for a dimer. I am using `mp2/cc-pvqz-ri`. I didn't know if the resolution identity error was implied like gaussian or if I had to explicitly state it. It's about 72 point single point energy scans. . **Test 1**. I reduced down the `64` to `16`. ```bash; -pe smp 16; ```. Reset the default where this is happening to set the thread to one. with the OMP and MKL flags set in the job submission script. . ```bash; export MKL_NUM_THREADS=12; export OMP_NUM_THREADS=12; ```; ```python. psi4.set_num_threads(1). ```; **Test 2**. Only rely on the flags in the job submission script. ```; export MKL_NUM_THREADS=12; export OMP_NUM_THREADS=12; ```. ```python. # psi4.set_num_threads(1); ```. It seems like so far the loads seem to be continuously used. I will get some graphs in the morning for you to look at.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2747#issuecomment-1278373201:325,energy,energy,325,https://psicode.org,https://github.com/psi4/psi4/issues/2747#issuecomment-1278373201,3,"['energy', 'reduce']","['energy', 'reduced']"
Energy Efficiency,"Ahhh. Commenting it out was a bad idea indeed. Thank you for pointing this out @susilehtola. It looks like the simplest way I can enable the functionality I need without breaking other things is to add a new protected variable `persistent_external_potentials_` and associated public methods `push_back_persistent_external_potential()` and `clear_persistent_external_potential()` to the `HF` class. Then the persistent potentials will not be cleared at each iteration. However, then we would have three mechanisms for doing nearly the same thing: `HF::external_potentials_` for dealing with PCM/DDX/PE, `HF::persistent_external_potentials_` for my user-supplied one-electron operators, and the `ExternalPotential` class for external point charges. Perhaps a better strategy would be to extend the `ExternalPotential` capabilities? It does seem to already allow for a diffuse charge density expanded in an auxiliary bases, but I couldn't find an example that uses this option.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3228#issuecomment-2391707920:738,charge,charges,738,https://psicode.org,https://github.com/psi4/psi4/pull/3228#issuecomment-2391707920,2,['charge'],"['charge', 'charges']"
Energy Efficiency,"All right, bug fixed, and IncFock tests added! The new IncFock efficiency tests compare against an SCF ITERATIONS value of x+3, where x is the number of SCF iterations observed in the corresponding non-IncFock run (which also matches the iteration count seen in each output.ref file). I can reduce the 3 component down to something else if desired.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2792#issuecomment-1329450057:291,reduce,reduce,291,https://psicode.org,https://github.com/psi4/psi4/pull/2792#issuecomment-1329450057,1,['reduce'],['reduce']
Energy Efficiency,"All tests ran through except for:; FAILED tests/fsapt1/test_input.py::test_fsapt1 - AssertionError: Traceback (most recent call last):; with the message:; E !----------------------------------------------------------------------------------!; E ! !; E ! Fatal Error: SCF_SUBTYPE=INCORE was specified, but there is not enough memory to !; E ! do in-core! Increase the amount of memory allocated to Psi4 or allow for !; E ! out-of-core to be used. !; E ! Error occurred in file: /home/conda/feedstock_root/build_artifacts/psi4nm_171103 !; E ! 8779956/work/psi4/src/psi4/lib3index/dfhelper.cc on line: 261 !; E ! The most recent 5 function calls were: !; E ! psi::PsiException::PsiException(std::__cxx11::basic_string<char, !; E ! std::char_traits<char>, std::allocator<char> >, char const*, int) !; E ! psi::DFHelper::initialize() !; E ! !; E !----------------------------------------------------------------------------------!. I think this is independent of this PR and the PR would be good to go",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3148#issuecomment-2013170817:384,allocate,allocated,384,https://psicode.org,https://github.com/psi4/psi4/pull/3148#issuecomment-2013170817,1,['allocate'],['allocated']
Energy Efficiency,"All the CTests have passed, except two that are not related to this PR; 1.) sapt7 (Error Message: `'psi4.core.UHF' object has no attribute 'diis_manager'`). 2.) scf-cholesky-basis (Error message: `Energy with Cholesky 1e-7: computed value (-230.6415254470) does not match (-230.6415254327) to atol=1e-08 by difference (-0.0000000142).`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2155#issuecomment-946304560:197,Energy,Energy,197,https://psicode.org,https://github.com/psi4/psi4/pull/2155#issuecomment-946304560,1,['Energy'],['Energy']
Energy Efficiency,"Alright, I'm having a go at this - fixing the number of calculations is trivial, but knowing what we want to print is not. For the `bsse_type=[""nocp""]` case, we want to calculate `AB in AB`, `A in A` and `B in B`. We can print the total no-CP energy at nbody(1) = `A in A` + `B in B`, nbody(2) = `AB in AB`, and the interaction energy is the difference of the two. For the `bsse_type=[""cp""]` case, we want `AB in AB`, `A in AB` and `B in AB`. We _cannot_ print any total CP energies, because for those we need the monomer terms. But we _can_ print the CP interaction energy. In my view, the table as printed by the driver currently is wrong for `bsse_type=[""cp""]` case. Also, the `return_total_data` keyword has no effect on the returned energy, or the ""CURRENT ENERGY"" in the returned `wfn` object. For the `bsse_type=[""cp"", ""nocp""]` case, we want to calculate `A in A` and `B in B` in addition to the above. This allows us to calculate the counterpoise corrections to the total energies for A and B, and by extension, to AB. I think the table should be modified so that only total energies are printed in the total energies column, which means printing an empty column for `bsse_type=""cp""`, but a populated column for `bsse_type=[""cp"", ""nocp""]`. Also, it might make sense if `return_total_data=""True""` with `bsse_type=""cp""` triggered calculation essentially equivalent to `bsse_type=[""cp"", ""nocp""]`, or at least printed an error that total energies are not available with only `bsse_type=""cp""`. Thoughts?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1691#issuecomment-869394243:243,energy,energy,243,https://psicode.org,https://github.com/psi4/psi4/issues/1691#issuecomment-869394243,5,"['ENERGY', 'energy']","['ENERGY', 'energy']"
Energy Efficiency,"Also I'm not sure how to deal with the ambivalence between DDX and PCM in terms of the user-facing flags to enable the models and the Psi variables to store results / energy terms. PCMsolver can do PCM and COSMO, but DDX can provide domain-decomposition variants of these plus in the future linearised Poisson-Boltzmann (LPB), which is in some sense an extension to PCM. So looking ahead it feels weird to have a flag PCM to decide whether LPB is run. Similar DDX and PCMsolver will not give the same values for the solvation energy, but are still sort of doing the same thing (continuum solvation models). Any thoughts?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2767#issuecomment-1326705824:167,energy,energy,167,https://psicode.org,https://github.com/psi4/psi4/pull/2767#issuecomment-1326705824,2,['energy'],['energy']
Energy Efficiency,"Also, @rmcgibbo, did you want to settle on `energy('sns-mp2')` or `energy('nnmp2')` for the call? I'm guessing the former, so changing w/i the p4 test suite. Latter appears [here](https://github.com/DEShawResearch/sns-mp2/blob/master/tests/2x%7BCC%7D.in#L30-L35). (Note that unless you're doing something I didn't notice, setting memory w/i `set ...` isn't valid; memory is a plain `memory 7 gb` statement.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/850#issuecomment-345778933:44,energy,energy,44,https://psicode.org,https://github.com/psi4/psi4/pull/850#issuecomment-345778933,2,['energy'],['energy']
Energy Efficiency,"Also, Psi4 is probably not going to get much help from the additional screening, since IIRC range-separated functionals aren't evaluated using the short-range kernel that leads to efficient screening, but the long-range kernels that **don't** become sparse even the exchange is very short-range. :disappointed:",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1499#issuecomment-458518083:180,efficient,efficient,180,https://psicode.org,https://github.com/psi4/psi4/pull/1499#issuecomment-458518083,1,['efficient'],['efficient']
Energy Efficiency,"Also, how have you verified correctness? While I'm not familiar with these methods, ""can induce an energy difference of over 2 _hartrees_ even at conservative cutoffs"" does not seem safe.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2155#issuecomment-821086361:99,energy,energy,99,https://psicode.org,https://github.com/psi4/psi4/pull/2155#issuecomment-821086361,1,['energy'],['energy']
Energy Efficiency,"Also; ```; mol = psi4.core.Molecule.from_arrays([0, 0, -0.01, 0, 0, 0.01], elez=[2,2]); activate(mol); set basis ugbs; energy('scf'); ```; fails with; ```; qcelemental.exceptions.ValidationError: Following atoms are too close: [(0, 1, 0.0)]; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1843#issuecomment-595613132:119,energy,energy,119,https://psicode.org,https://github.com/psi4/psi4/pull/1843#issuecomment-595613132,1,['energy'],['energy']
Energy Efficiency,"Ambitious to hand-format read_options :-). What's wrong with the c-f of it, though? I can see that things like the below might need adjustment, but at a glance, it looked pretty respectful. line-break formatting isn't conveyed to the manual anyways. ```; options.add_str(""CFOUR_BASIS"", ""SPECIAL"",; ""STO-3G 3-21G 4-31G 6-31G 6-31G* 6-31G** 6-311G 6-311G* 6-311G** DZ DZP TZ TZP TZ2P PVDZ PVTZ ""; ""PVQZ PV5Z PV6Z PCVDZ PCVTZ PCVQZ PCV5Z PCV6Z AUG-PVDZ AUG-PVTZ AUG-PVTZ AUG-PVQZ AUG-PV5Z ""; ""AUG-PV6Z D-AUG-PVDZ D-AUG-PVTZ D-AUG-PVQZ D-AUG-PV5Z D-AUG-PV6Z cc-pVDZ cc-pVTZ cc-pVQZ ""; ""cc-pV5Z cc-pV6Z cc-pCVDZ cc-pCVTZ cc-pCVQZ cc-pCV5Z cc-pCV6Z PWCVDZ PWCVTZ PWCVQZ PWCV5Z ""; ""PWCV6Z PwCVDZ PwCVTZ PwCVQZ PwCV5Z PwCV6Z svp dzp tzp tzp2p qz2p pz3d2f 13s9p4d3f WMR ANO0 ""; ""ANO1 ANO2 EVEN_TEMPERED SPECIAL"");; ```. ```; if (name == ""FINDIF"" || options.read_globals()) {; /*- MODULEDESCRIPTION Performs finite difference computations of energy derivative, with respect to nuclear; displacements; for geometry optimizations and vibrational frequency analyses, where the required analytical derivatives are; not; available. -*/; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1192#issuecomment-417061812:932,energy,energy,932,https://psicode.org,https://github.com/psi4/psi4/pull/1192#issuecomment-417061812,1,['energy'],['energy']
Energy Efficiency,"An error which is very high on my to-fix list, but where the fix is very involved. DF-DCT properties as present are not correct. I've tested against my own Python code and the Psi code and found disagreements in the fifth and sixth decimal place between finite difference and analytic properties. I've spoken with the code authors, and we are aware of two sources of disagreement.; 1. For gradients, the RDMs are contracted against the conventional derivative integrals, not the density fitted derivative integrals.; 2. Due to a subtle point in the derivation, the DF-DCT cumulant stationarity conditions are not variational minimization of the energy, as they are in conventional DCT. Accordingly, you're missing a cumulant response term for gradients and other properties. The fix for point 1 will hopefully just be marking the wavefunction as density fitted and leave the contractions to the `Deriv` object. However, DCT at present interferes with RDM processing in `libtrans`, so the fix will be likely be more involved. The fix for point 2 is not clear. I'm aware of three options:; * Change the DF-DCFT stationarity conditions to be variational minimization of the energy; * Change which terms are to be contracted against JKFIT integrals and which against RIFIT integrals, so the stationarity conditions are ""fixed"" automatically; * Add a cumulant response term. (Please don't make me do this.). I favor option B, but it'll take time to see what B does to energies.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1579:645,energy,energy,645,https://psicode.org,https://github.com/psi4/psi4/issues/1579,2,['energy'],['energy']
Energy Efficiency,"An input deck would be nice. I'm sure Ed Hohenstein could probably answer; in more detail, but the SAPT codes in PSI4 are designed for SMP parallelism; on a single node, using a mix of OpenMP and threaded BLAS. Moreover, with; high-level SAPT jobs (2+3, etc), there is a non-trivial amount of I/O to be; performed (certainly much less than without DF, but still non-trivial).; Using a build with icpc/MKL, a dedicated scratch array, 64 GB of memory,; and 6 or 8 cores (a single i7 or two quad-core Xeons), we are able to run; SAPT2+3(CCD) jobs with up to 1100 nbf/30 atoms (in an aTZ basis) in about a; week of wall time. Much larger than this and the memory will certainly; become rate limiting. Are you guys trying to run this over a pNFS or something? What BLAS are you; linking against?. -Rob. On Mon, Apr 28, 2014 at 8:03 PM, rxk900 notifications@github.com wrote:. > Hello,; > One of our users hit a problem last year on our supercomputer with his; > SAPT (energy('sapt2+3-ct')) jobs. Our sysadmins flagged low cpu utilisation; > for his jobs for which we decided that 4 cpus would give him optimum; > efficiency. However, the jobs were large enough as to take > 1000 hours; > (also frowned upon by our sysadmins) so I was asked to look into whether he; > could make better parallel use of the processors. We had some teething; > problems bringing our new supercomputer on line last year so I wanted to; > rule out issues on our side and I think I have now ruled out issues with; > IO, memory and threading (that had affected other programs).; > Furthermore, during the investigations we noticed that ""top"" showed an; > almost equal alternation between one cpu and maximum cpus thus averaging; > above/below 50% use no matter how many cpus were requested. Roger Amos and; > I had a quick look at the SAPT papers and decided there wasn't anything; > intrinsic about the method that wouldn't allow it to parallel or would; > cause this behaviour (note I initially thought it might be a load imbala",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/57#issuecomment-41629946:963,energy,energy,963,https://psicode.org,https://github.com/psi4/psi4/issues/57#issuecomment-41629946,1,['energy'],['energy']
Energy Efficiency,"An issue relevant to `reference_wavefunction_` is how post-scf codes are getting their ref energy. Many are pulling from initialized wfn's `energy()`. As more post-scf codes set `energy_` (e.g., dfmp2, which returns a `RHFWavefunction`), this is not always guaranteed to be the expected `HF TOTAL ENERGY`. See https://github.com/psi4/psi4/pull/1381#discussion_r237680985 for a scenario.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1292#issuecomment-443474152:91,energy,energy,91,https://psicode.org,https://github.com/psi4/psi4/issues/1292#issuecomment-443474152,3,"['ENERGY', 'energy']","['ENERGY', 'energy']"
Energy Efficiency,"An updated script that works with current master:; ```; from qcengine.programs.dftd3 import get_dispersion_aliases; from qcengine.programs.dftd3 import dashcoeff; from psi4.driver.procrouting.dft import dft_builder; from psi4.driver import procedures; import psi4. for dtype in dashcoeff.keys() :; for func in dashcoeff[dtype][""definitions""]:; check=func in procedures['energy']; if check == False:; check=""{0:s}-{1:s}"".format(func,dtype) in procedures['energy']; if check == False:; alt= psi4.p4util.find_approximate_string_matches(func,dft_builder.dict_functionals,3); print(dtype, func.upper(), ""not found! maybe? :"",alt); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/996#issuecomment-481998433:370,energy,energy,370,https://psicode.org,https://github.com/psi4/psi4/issues/996#issuecomment-481998433,2,['energy'],['energy']
Energy Efficiency,"And in this special case, we can probably bypass most of the energy computation, except for some integral generation.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2713#issuecomment-1239555559:61,energy,energy,61,https://psicode.org,https://github.com/psi4/psi4/issues/2713#issuecomment-1239555559,1,['energy'],['energy']
Energy Efficiency,"And with #2336 one can easily build the atomic overlap matrices, which are the only thing needed to implement generalized Pipek-Mezey of [J. Chem. Theory Comput. 10, 642 (2014)](https://doi.org/10.1021/ct401016x). All variants of generalized Pipek-Mezey (Mulliken charges, IAO charges, Becke charges) should have the share the same implementation; the only difference is how the overlap matrix is defined.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2379#issuecomment-988891390:264,charge,charges,264,https://psicode.org,https://github.com/psi4/psi4/issues/2379#issuecomment-988891390,3,['charge'],['charges']
Energy Efficiency,"Another instance of triggering the same ""Failed to converge"" print message, carried forward from [the forums](http://forum.psicode.org/t/failed-to-converge-error/1811). ```; memory 48 Gb. molecule {; 0 1; Au 0.456697 -1.333264 0.040916; C 2.603870 -0.838096 0.229755; H 2.763370 -0.719170 1.301892; C 2.477106 -2.135791 -0.222006; H 2.550111 -2.348345 -1.284567; H 2.591715 -2.990149 0.439107; B 2.865868 0.484463 -0.740811; F 1.800945 0.626222 -1.684345; F 2.929814 1.631672 0.055078; F 4.060740 0.285067 -1.428702. units angstrom; no_reorient; symmetry c1; }. set globals {; basis def2-svpd; }. energy('scf'); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1856#issuecomment-638995737:597,energy,energy,597,https://psicode.org,https://github.com/psi4/psi4/issues/1856#issuecomment-638995737,1,['energy'],['energy']
Energy Efficiency,"Another problematic case:; ```; molecule {; 0 2; C 0.000000000000 0.000000000000 -0.645482303943; N 0.000000000000 0.000000000000 0.553149090326; }. set basis cc-pcvdz; set reference uhf . energy('scf'); ```. I can converge the SCF if I delay DIIS start until a few iterations in, but I cannot converge the SCF with the default settings.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/888#issuecomment-509672801:189,energy,energy,189,https://psicode.org,https://github.com/psi4/psi4/issues/888#issuecomment-509672801,1,['energy'],['energy']
Energy Efficiency,"Another small test case, from the W4-11 benchmark set of atomisation energies.; Converges with `SOSCF` just fine, but otherwise struggles. . ```; molecule mol {; 0 2; O 1.143943 0.075354 0.000000; O 0.000000 0.576945 0.000000; O -1.082114 -0.493872 0.000000; H -0.494634 -1.267419 0.000000; }. memory 2 GiB; set {; ints_tolerance 1e-12; basis aug-cc-pVTZ; # soscf true; reference uhf; }; energy('scf'); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/888#issuecomment-512354183:388,energy,energy,388,https://psicode.org,https://github.com/psi4/psi4/issues/888#issuecomment-512354183,1,['energy'],['energy']
Energy Efficiency,"Any computation that attempts to compute frequencies of a density fitted method will crash unless the symmetry is explicitly set to c1. Gradients do not have this problem. The below input file demonstrates the problem and has been taken from the test cases. The only modifications are changing gradients to frequencies and CCSD(T) to MP2. The bug is there with both methods, and also CCSD. I haven't checked other DF methods. ```; #! DF-MP2 cc-pVDZ energy for the H2O molecule. molecule h2o {; 0 1; o; h 1 0.958; h 1 0.958 2 104.4776 ; }. set {; basis cc-pvdz; df_basis_scf cc-pvdz-jkfit; df_basis_cc cc-pvdz-ri; scf_type df; guess sad ; freeze_core true; cc_type df; qc_module occ ; }. frequencies('mp2', dertype=0); ```; The crash gives the following error message:; ```; Traceback (most recent call last):; File ""/Users/jonathonmisiewicz/psi4/objdir2/stage/usr/local/psi4/bin/psi4"", line 264, in <module>; exec(content); File ""<string>"", line 36, in <module>; File ""/Users/jonathonmisiewicz/psi4/objdir2/stage/usr/local/psi4/lib/psi4/driver/driver.py"", line 1774, in frequency; H, wfn = hessian(lowername, return_wfn=True, molecule=molecule, **kwargs); File ""/Users/jonathonmisiewicz/psi4/objdir2/stage/usr/local/psi4/lib/psi4/driver/driver.py"", line 1595, in hessian; E, wfn = energy(lowername, return_wfn=True, molecule=moleculeclone, **kwargs); File ""/Users/jonathonmisiewicz/psi4/objdir2/stage/usr/local/psi4/lib/psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/jonathonmisiewicz/psi4/objdir2/stage/usr/local/psi4/lib/psi4/driver/procrouting/proc.py"", line 858, in select_ccsd_t_; return func(name, **kwargs); File ""/Users/jonathonmisiewicz/psi4/objdir2/stage/usr/local/psi4/lib/psi4/driver/procrouting/proc.py"", line 1608, in run_dfocc; ""RIFIT"", core.get_global_option(""BASIS"")); File ""/Users/jonathonmisiewicz/psi4/objdir2/stage/usr/local/psi4/lib/psi4/driver/p4util/python_helpers.py"", line 99, in pybui",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1093:449,energy,energy,449,https://psicode.org,https://github.com/psi4/psi4/issues/1093,1,['energy'],['energy']
Energy Efficiency,"Anyone getting this should change the `SCF` and `SCF TOTAL ENERGY` in https://github.com/psi4/psi4/blob/master/share/python/driver_cbs.py#L430 to `HF` and `HF TOTAL ENERGY` like in the ""ccsd"" entry just below. I'll prepare a PR fix.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/455#issuecomment-237962287:59,ENERGY,ENERGY,59,https://psicode.org,https://github.com/psi4/psi4/issues/455#issuecomment-237962287,2,['ENERGY'],['ENERGY']
Energy Efficiency,"Anyway, the logical place to start debugging is SAD and the first iteration after it. |System|Difference in SAD energy|Difference in energy of first iteration|; |----------|----------------------------------|-----------------------------------------------|; |1| 2.387e-12|-1.405e-03|; |2| 6.253e-12|-3.704e+00|; |3| 1.364e-11|-5.389e-01|; |4| 8.868e-12|-1.833e+00|; |5|-8.868e-12|-3.321e+00|. The SAD energies are an exact match, so one would assume that the SAD densities also agree exactly. Something is causing the energy of the first iteration to change by quite a lot. This shouldn't happen: if the SAD density matrices are the same, the Fock matrices built from the SAD density matrices should also match; the orbitals in the first iteration should be practically the same. One can't compare after the first iteration, since the orbitals and densities will not be the same. So, here are the possibilities for disagreeing results. 1. Atoms in SAD converge to different solutions; 2. SAD Fock matrix is not computed properly (same input density leads to differences between runs); 3. First Fock matrix is not computed properly (same input density leads to differences between runs). 1 and 2 are unlikely, since the SAD energies agree.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2114#issuecomment-779554766:112,energy,energy,112,https://psicode.org,https://github.com/psi4/psi4/issues/2114#issuecomment-779554766,3,['energy'],['energy']
Energy Efficiency,"Apart from #442, the PRs are normally quite small so it's not much work to review them. I think we should have at least three or four signees, especially given that most of the recent PRs have had feedback from many developers anyway. If we start high, we can reduce the demands if it becomes too burdensome.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/459#issuecomment-238314013:260,reduce,reduce,260,https://psicode.org,https://github.com/psi4/psi4/issues/459#issuecomment-238314013,1,['reduce'],['reduce']
Energy Efficiency,"Apparently the problem is not completely fixed. Running (H2O)30 results in:. ```; 	MO spaces... . 	 FC OCC VIR FV ; 	----------------------; 	 30 120 570 0. 	Number of basis functions in the DF-CC basis: 2520. 	Available memory : 667572.02 MB ; 	Memory requirement for 3-index ints : 7838.47 MB ; 	Memory requirement for DF-CC int trans: 24103.73 MB ; 	Memory requirement for CC contractions: 142778.32 MB ; 	Total memory requirement for DF+CC int: 150616.79 MB ; 	Memory requirement for Wabef term : 49600.59 MB . Traceback (most recent call last):; File ""/users/damatthews/apps/psi4/bin/psi4"", line 289, in <module>; exec(content); File ""<string>"", line 121, in <module>; File ""/users/damatthews/apps/psi4/lib/psi4/driver/driver.py"", line 561, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/users/damatthews/apps/psi4/lib/psi4/driver/procrouting/proc.py"", line 333, in select_mp3; return func(name, **kwargs); File ""/users/damatthews/apps/psi4/lib/psi4/driver/procrouting/proc.py"", line 1620, in run_dfocc; dfocc_wfn = core.dfocc(ref_wfn). MemoryError: std::bad_array_new_length; ```. Any ideas where to look next?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1764#issuecomment-562216701:749,energy,energy,749,https://psicode.org,https://github.com/psi4/psi4/issues/1764#issuecomment-562216701,2,['energy'],['energy']
Energy Efficiency,Apparently very easy to fall into endless recursion with MBIS volumes due to some necessary inputs also calculated by `oeprop()` and involving calls to `energy()`. You're interested in MBIS CHARGES as standalone (w/o volumes and extents) to avoid the cost of all the atomic calcs since you don't need the volume?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2272#issuecomment-896976501:153,energy,energy,153,https://psicode.org,https://github.com/psi4/psi4/issues/2272#issuecomment-896976501,2,"['CHARGE', 'energy']","['CHARGES', 'energy']"
Energy Efficiency,"Are both solutions stable ? For UHF computations, it seems to me always; more safe to do a stability analysis. In some cases, it allowed me to; eliminate the higher energy solution as unstable. However, in other cases, both solutions are actually SCF minima... Trying; with different guesses then seems the only way to find the lowest energy; solution. 2016-01-14 2:42 GMT-05:00 Rob Parrish notifications@github.com:. > I have seen this before (for this exact system) - the SAD guess converges; > to the correct root, but Core does not. Not really much more to it than; > that.; > ; > -Rob; > ; > On Wed, Jan 13, 2016 at 11:33 PM, Roberto Di Remigio <; > notifications@github.com> wrote:; > ; > > Choosing a SAD or a core guess for an UHF/cc-pVDZ calculation on H2O+; > > gives very different energies.; > > The following input with the core guess gives a total energy of; > > -75.5488580481183476; > > ; > > memory 250 mb; > > molecule h2o {; > > symmetry c1; > > 1 2; > > O 0.0000000000 0.0000000000 -0.2249058930; > > H 1.4523499293 0.0000000000 0.8996235720; > > H -1.4523499293 0.0000000000 0.8996235720; > > units bohr; > > no_reorient; > > no_com; > > }; > > ; > > set {; > > basis cc-pVDZ; > > scf_type direct; > > guess core; > > reference uhf; > > e_convergence 7; > > d_convergence 7; > > }; > > ; > > energy_scf1 = energy('scf'); > > ; > > while this input with the SAD guess gives a total energy of; > > -75.6330881795159655; > > ; > > memory 250 mb; > > molecule h2o {; > > symmetry c1; > > 1 2; > > O 0.0000000000 0.0000000000 -0.2249058930; > > H 1.4523499293 0.0000000000 0.8996235720; > > H -1.4523499293 0.0000000000 0.8996235720; > > units bohr; > > no_reorient; > > no_com; > > }; > > ; > > set {; > > basis cc-pVDZ; > > scf_type direct; > > guess sad; > > reference uhf; > > e_convergence 7; > > d_convergence 7; > > }; > > ; > > energy_scf1 = energy('scf'); > > ; > > Of course, the initial guess has always a huge impact on the calculation,; > > but is the reported difference ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/211#issuecomment-171646769:165,energy,energy,165,https://psicode.org,https://github.com/psi4/psi4/issues/211#issuecomment-171646769,3,['energy'],['energy']
Energy Efficiency,"Are there other ways to deal with Douglas-Kroll-Hess (DKH) Hamiltonian? When running dk input:. molecule {; Mg; }; set basis aug-cc-pvdz-dk; set relativistic dkh; energy('scf'). ---. I got this error output:; Traceback (most recent call last):; File ""<string>"", line 20, in <module>; RuntimeError: DKH is not a valid choice",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/149#issuecomment-124904274:163,energy,energy,163,https://psicode.org,https://github.com/psi4/psi4/issues/149#issuecomment-124904274,1,['energy'],['energy']
Energy Efficiency,"Are you thinking equilibrium and dissociated points along a potential energy curve for the standard testing suite? I favor a couple single points since couple dozen methods * 3 ref * E/G/H accumulates a lot of reference data. A hydrogen-only could be a good system to throw a high AM basis at to check puream, provided d&f make a material change.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2371#issuecomment-986977719:70,energy,energy,70,https://psicode.org,https://github.com/psi4/psi4/issues/2371#issuecomment-986977719,1,['energy'],['energy']
Energy Efficiency,"Are you trying to use a Libint2 release? Keep in mind that Psi4 needs changes to the upstream buildsystem (these can be worked around) and changes to the default upstream build configuration (such that a built library won't work with any other open-source QC package). I'll collect some links here since it's worth having an issue open on this for packagers to consult (hence pinging @mbanck, @susilehtola). * https://github.com/psi4/psi4/issues/2300 (search ""multidimensional"") for background and conda-forge; * https://github.com/evaleev/libint/issues/190 for the general open-source conundrum and current psi4 prospects toward the end; * https://github.com/psi4/psi4/blob/master/external/upstream/libint2/CMakeLists.txt#L1-L25 for libint2 build constraints for Psi4. Steps toward Psi4 using a upstream Libint2 release in common with other open-source QC programs:; - [x] transition psi4 TEI #1721; - [ ] reconcile LAB's l2 cmake (that psi uses at present) https://github.com/loriab/libint/tree/l2cmake with EFV's adaptations https://github.com/evaleev/libint/pull/205; - [ ] merge https://github.com/evaleev/libint/pull/205 and release; - [ ] expand current integrals config requirements beyond current set in notes (needed before #2388); - [ ] transition psi4 OEI #2388 ; - [ ] transition psi4 integral ordering from `gss` to `sss`; - [ ] coordinate with packagers and other QC programs for a AM and integrals types l2 config options set that is adequate for all. If I'm off base @yurivict and you're already using a psi-configured l2 and this is simply a detection issue, let me know.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2398#issuecomment-1008078498:1016,adapt,adaptations,1016,https://psicode.org,https://github.com/psi4/psi4/issues/2398#issuecomment-1008078498,1,['adapt'],['adaptations']
Energy Efficiency,"Are you using a detected pre-build pybind11? Pybind11 changes so often just now (we usually update to their HEAD once a month and need to adapt the Psi4 code) that we can't guarantee that any but the [tag](https://github.com/psi4/psi4/blob/master/external/pybind11/CMakeLists.txt#L11) works. In case you're alarmed by the fork, the alterations are just changes to the build, not to pybind.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/522#issuecomment-261727164:138,adapt,adapt,138,https://psicode.org,https://github.com/psi4/psi4/issues/522#issuecomment-261727164,1,['adapt'],['adapt']
Energy Efficiency,"As a note our general take it to shuffle more up to the Python layer as well, especially [solvers](https://github.com/psi4/psi4/blob/master/psi4/driver/p4util/solvers.py). The plugin approach is defiantly the best solution I think. It has been a bit, but we should be able to register codes with Psi4 automatically to gain functionality through `psi4.energy/gradient/etc`. @loriab Can make the final call, but I suspect if adcc is on conda, we will just add it to our meta package of `psi4-rt` that will pull down all the run time dependancies (including this one) so there shouldn't be too much of a need for close coupling. . --. The Wavefunction object has the ability to store arrays, matrices, and values in a key:value fashion. Can you give a bit of a description of how complex your return objects are? You may want to consider adding to the MolSSI [QCSchema](https://github.com/MolSSI/QCSchema) project the properties that you are returning so that we can have a schema-based definition of these objects that other codes can use and conform to. --. This looks really amazing, it is awesome to see projects adopt this kind of project structure.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1744#issuecomment-547410509:351,energy,energy,351,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547410509,1,['energy'],['energy']
Energy Efficiency,"As discussed in #2204, Psi's current second-order SCF technology is the straightforward Newton-Raphson approach. This is prone to fail in cases where the MO hessian has a small, negative eigenvalue near the minimum, and it would be good if we had a modified second-order method that could handle this. As a test case, this eigenstructure problem causes the convergence failure of. ```; molecule {; 0 2; Mg; F 1 3.0; }. set reference uhf ; set soscf true ; set soscf_print true ; set soscf_max_iter 10; set stability_analysis follow. energy('hf/cc-pvdz'); ```. as confirmed by running the system with the Psi4Numpy SOSCF code. @susilehtola suggested a level shift as a possible fix, but I'm open to alternatives.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2212:533,energy,energy,533,https://psicode.org,https://github.com/psi4/psi4/issues/2212,1,['energy'],['energy']
Energy Efficiency,"As it never worked before, it is also not crucial to add this again. For large grids the OpenMP speedup at this place would be nearly perfect, because it parallelizes quite trivially. It would lead to a linear speedup in something like an ESP charge fit (the sample code does thankfully not use this function yet, but a rather very slow write to disk, read from disk cycle, so fallout should be quite minimal). It would be quite simple for me to add threading back to this function if required. The only thing necessary (in my opinion, need to check the code better) would be to make the buffer object in OneBodyAOInt thread-local.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1900#issuecomment-633045614:243,charge,charge,243,https://psicode.org,https://github.com/psi4/psi4/pull/1900#issuecomment-633045614,1,['charge'],['charge']
Energy Efficiency,As long as the threads are only reduced during the PK steps it would only have benefits. No threads that do no work and allocate memory (Even if it doesn't matter in practice). The automatic selection probably ensures the in-core algorithm for these small calculations but could you test `pk_algo = YOSHIMINE/REORDER` and `PK_NO_INCORE True` as well? We probably have no test coverage.; Limiting `nthreads` in the PKManager https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/PKmanagers.cc#L154 might solve headaches in the other algorithms. I saw a `ntask < nthreads` check in Yoshimine. If that exceeds time you planned to invest for the PK bug fix that is also fine.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2763#issuecomment-1298619970:32,reduce,reduced,32,https://psicode.org,https://github.com/psi4/psi4/pull/2763#issuecomment-1298619970,2,"['allocate', 'reduce']","['allocate', 'reduced']"
Energy Efficiency,"As mentioned [here](http://forum.psicode.org/t/manual-update-dfocc-requires-scf-type-disk-df/904/3), users can set `scf_type` in the SCF local namespace which will really mess with a great deal of our logic. I think this should be extracted and placed in globals only similar to `CC_TYPE` and the like. @loriab any thoughts?. ```; set scf {; scf_type df; }; energy('ccsd(t)/aug-cc-pvtz'); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1019:358,energy,energy,358,https://psicode.org,https://github.com/psi4/psi4/issues/1019,1,['energy'],['energy']
Energy Efficiency,"As mentioned in the documentation @loriab quotes above, there is also a test case available of a QM computation in an MM point-charge field, the extern1 test case (psi4/tests/extern1).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/341#issuecomment-209534925:127,charge,charge,127,https://psicode.org,https://github.com/psi4/psi4/issues/341#issuecomment-209534925,1,['charge'],['charge']
Energy Efficiency,"As mentioned on Slack (#newdev 2018/03/27), RHF tests with Au+ and Cu+ yield the same total energies in G09 and Psi4 (8 decimals) with both CCSD(T) and HF using the cc-pvdz-PP basis sets. These basis tests both have `0.0` coefficient in the `N+1`th shell. The orbital eigenvalues match as well. Unless we need more testing, I'm satisfied with this - the discrepancy in the ionisation energy is clearly coming from the open-shell part (and likely not from the basis set).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/937#issuecomment-376595463:384,energy,energy,384,https://psicode.org,https://github.com/psi4/psi4/pull/937#issuecomment-376595463,1,['energy'],['energy']
Energy Efficiency,"As per Slack conversation (@JonathonMisiewicz) here is a tough example where finding the lowest ROHF solution is challenging:; [psi4_recalc1.log](https://github.com/psi4/psi4/files/9389493/psi4_recalc1.log). Psi4 goes into an oscillation far from the lowest solution and never converges anywhere. This cannot be solved by any amount of damping, I have tried 99% (!!) and it still oscillated, which is strange.; [psi4_recalc1_damp.log](https://github.com/psi4/psi4/files/9389567/psi4_recalc1_damp.log). I think I managed to get convergence to an unstable solution with a combination of SOSCF and 90% damping, but I don't have the exact parameters on hand. The set of known (but possibly unstable) HF solutions found via Molpro 2015 for this geometry/basis are:; ```; -190.0232936; -190.0354652; -189.8590420; -190.0766531; -190.1033611; -189.9953074; ```; The lowest known energy is -190.103361091599, and here are its orbital energies and other details:; ```; !RHF STATE 1.1 Energy -190.103361091599; Nuclear energy 39.33359221; One-electron energy -337.18531326; Two-electron energy 107.74835997; Virial quotient -1.00211661; !RHF STATE 1.1 Dipole moment 51.33626033 0.20512167 -0.68287708; Dipole moment /Debye 130.47521252 0.52133315 -1.73558673. Orbital energies:. 1.1 2.1 3.1 4.1 5.1 6.1 7.1 8.1 9.1 10.1; -20.681373 -20.622776 -11.413662 -1.456025 -1.307146 -0.981471 -0.775682 -0.689298 -0.660029 -0.644029. 11.1 12.1 13.1 14.1 15.1 16.1; -0.579569 -0.536873 -0.172695 -0.647339 -0.168304 0.026142; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/888#issuecomment-1221579303:872,energy,energy,872,https://psicode.org,https://github.com/psi4/psi4/issues/888#issuecomment-1221579303,5,"['Energy', 'energy']","['Energy', 'energy']"
Energy Efficiency,"As the above posts have stated Ag is your problem. That being said STO-3G is defined for Ag, without an ECP, so the calculation you are trying to do should work with the correct set of options (and if it doesn't that's a bug). I suspect the problem is that conv-mp2 is still trying to use a DF-HF reference, so let's turn that off too. Try this input:. ```; molecule {; 1 1; Ag 0.37900000 -2.54600000 8.09100000; }. set{; basis sto-3g; df_scf_guess false; scf_type direct; guess sad; }; energy('conv-mp2'); set molden_write true; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/105#issuecomment-144746819:487,energy,energy,487,https://psicode.org,https://github.com/psi4/psi4/issues/105#issuecomment-144746819,1,['energy'],['energy']
Energy Efficiency,"As the title stated, I want to perform fsapt calculation on a system that contains iodine atoms. At the begining I used the aug-cc-tzvp but it didn't contain the parameter for iodine.So I use the basis set def2-tzvp which contains the parameter for iodine. But when I run the calculation, it sent out such error message:; ```; Traceback (most recent call last):; File ""/pubhome/zchen02/miniconda3/envs/psi4/bin/psi4"", line 287, in <module>; exec(content); File ""<string>"", line 141, in <module>; File ""/pubhome/zchen02/miniconda3/envs/psi4/lib//python3.7/site-packages/psi4/driver/driver.py"", line 556, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/pubhome/zchen02/miniconda3/envs/psi4/lib//python3.7/site-packages/psi4/driver/procrouting/proc.py"", line 3631, in run_fisapt; core.get_global_option(""MINAO_BASIS"")); File ""/pubhome/zchen02/miniconda3/envs/psi4/lib//python3.7/site-packages/psi4/driver/p4util/python_helpers.py"", line 80, in _pybuild_basis; mol.to_dict(), key, resolved_target, fitrole, other, return_dict=True, return_atomlist=return_atomlist); File ""/pubhome/zchen02/miniconda3/envs/psi4/lib//python3.7/site-packages/psi4/driver/qcdb/libmintsbasisset.py"", line 679, in pyconstruct; verbose=verbose); File ""/pubhome/zchen02/miniconda3/envs/psi4/lib//python3.7/site-packages/psi4/driver/qcdb/libmintsbasisset.py"", line 897, in construct; (at + 1, key, text2)). psi4.driver.qcdb.exceptions.BasisSetNotFound: BasisSet::construct: Unable to find a basis set for atom 106 for key BASIS among:; Shell Entries: ['I']; Basis Sets: [('CC-PVTZ-MINAO', 'CC-PVTZ-MINAO', None)]; ```; Is there any method to solve this problem?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2291:606,energy,energy,606,https://psicode.org,https://github.com/psi4/psi4/issues/2291,2,['energy'],['energy']
Energy Efficiency,Asinine energy with DF-FNO-CCSD(T) energy,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1545:8,energy,energy,8,https://psicode.org,https://github.com/psi4/psi4/issues/1545,2,['energy'],['energy']
Energy Efficiency,"Assume I have the electron density represented as the expansion coefficients under an DF auxiliary basis (which come from machine learning prediction). Although the kinetic energy cannot be evaluated without an AO basis, theoretically the Kohn-Sham effective potential has no kinetic term and should be able to be constructed from DF density (assume we are using PBE). Then we might restart the DFT from this effective potential. Is this possible for psi4? And if so, may I have some hints on how to do this?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3070:173,energy,energy,173,https://psicode.org,https://github.com/psi4/psi4/issues/3070,1,['energy'],['energy']
Energy Efficiency,"At least the speed issue is probably fundamental. Calculating the potential and the field at a grid point amounts to calculating a full set of one-electron Coulomb integrals for every one of these points. (Physically, the potential caused by a distribution of electron density onto a point r is the same as evaluating the effect of a charged nucleus at r onto the distribution of electrons.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1614#issuecomment-487980493:334,charge,charged,334,https://psicode.org,https://github.com/psi4/psi4/issues/1614#issuecomment-487980493,1,['charge'],['charged']
Energy Efficiency,"Attempting frequency() for atomic species fails irrespective of charge, multiplicity, and reference type. Typical error message:. > 1 displacements needed.; > 1; > ; > An error has occurred. Traceback:; > <type 'exceptions.IndexError'>: basic_string::replace: File ""<string>"", line 26, in <module>; > ; > File ""/home/drhaney/miniconda/share/psi4/python/driver.py"", line 1840, in frequency; > psi4.thermo(wfn, wfn.frequencies()). Thanks,; -drhaney, -- that's ""D. R."", not Doctor. Typical input file attached (C atom, neutral triplet).; [C.txt](https://github.com/psi4/psi4/files/198782/C.txt)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/332:64,charge,charge,64,https://psicode.org,https://github.com/psi4/psi4/issues/332,1,['charge'],['charge']
Energy Efficiency,"Attempts to use both density fitting and the quadratically convergent algorithm in DCT crash Psi. In particular, the following input file. ```; molecule adduct {; O; H 1 1 ; H 1 1 2 104.5; }. set {; basis sto-3g; reference uhf ; dcft_type df; }. set dcft {; algorithm qc; }. energy('dcft'); ```. raises the following error. ```; Traceback (most recent call last):; File ""/opt/vulcan/opt/vulcan/linux-x86_64/intel-16.0.1/psi4-master-avducsgnonqrcpftiesq432gagal6y7r/bin/psi4"", line 272, in <module>; exec(content); File ""<string>"", line 28, in <module>; File ""/opt/vulcan/opt/vulcan/linux-x86_64/intel-16.0.1/psi4-master-avducsgnonqrcpftiesq432gagal6y7r/lib/psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/opt/vulcan/opt/vulcan/linux-x86_64/intel-16.0.1/psi4-master-avducsgnonqrcpftiesq432gagal6y7r/lib/psi4/driver/procrouting/proc.py"", line 1489, in run_dcft; dcft_wfn = core.dcft(ref_wfn). RuntimeError: ; Fatal Error: PSIO Error; Error occurred in file: /home/vulcan/vadmin/programs/psi4/psi4/src/psi4/libpsio/error.cc on line: 128 ; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::PSIO::read(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::IWL::fetch(); ```. Public Enemy No. 2, we meet again... My hunch is that this was never implemented, and an error just needs to be raised until it is implemented. However, it may actually be implemented, but just suffering from a bug. I'll be leaving this error message here until I can figure out which - that will take a while.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1353:275,energy,energy,275,https://psicode.org,https://github.com/psi4/psi4/issues/1353,3,['energy'],['energy']
Energy Efficiency,"Awesome. I'll merge this into my PR and rebase tomorrow morning. On Tue, Mar 7, 2017 at 11:05 PM, Lori A. Burns <notifications@github.com>; wrote:. > @rmcgibbo <https://github.com/rmcgibbo>, I made a PR; > <https://github.com/rmcgibbo/psi4public/pull/1> to your PR so that; > variable labels stay consistent. This/your PR also needs rebasing. So; > please either (a) pull in my PR and rebase this one or (b) let me know, and; > I'll rebase my branch and do a PR (with your commit) directly. Thanks for; > the contribution kick-starting our Wavefunction.variables_ work.; >; > Btw, the git history rewrite this fall reduced repo size by 90%. If you; > wanted much quicker clones, you could delete your fork and re-fork.; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/pull/643#issuecomment-284940969>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AAnI_gsl1aKAenbQoYI_7elUN9aYliQyks5rjikCgaJpZM4MWI2g>; > .; >. -- ; -Robert",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/643#issuecomment-284949491:615,reduce,reduced,615,https://psicode.org,https://github.com/psi4/psi4/pull/643#issuecomment-284949491,1,['reduce'],['reduced']
Energy Efficiency,"B2u 0.442532 2B3u 0.442532 2B1u 0.442532; 3Ag 0.485648 4Ag 1.228480 1B3g 1.228480; 5Ag 1.228480 1B2g 1.228480 1B1g 1.228480; 3B3u 1.526002 3B2u 1.526002 3B1u 1.526002; 6Ag 2.051155 7Ag 3.283338 2B2g 3.283338; 2B3g 3.283338 2B1g 3.283338 8Ag 3.283338; 4B2u 3.331721 4B3u 3.331721 1Au 3.331721; 4B1u 3.331721 5B3u 3.331721 5B2u 3.331721; 5B1u 3.331721 6B2u 5.672254 6B1u 5.672254; 6B3u 5.672254 7B1u 9.267994 7B2u 9.267994; 7B3u 9.267994 8B1u 9.267994 8B3u 9.267994; 2Au 9.267994 8B2u 9.267994 9Ag 9.745165; 3B2g 9.745165 3B1g 9.745165 3B3g 9.745165; 10Ag 9.745165 11Ag 10.965644. Final Occupation by Irrep:; Ag B1g B2g B3g Au B1u B2u B3u; DOCC [ 2, 0, 0, 0, 0, 1, 1, 1 ]; ```. Energy converged. @RHF Final Energy: -99.45080702230226. => Energetics <=. ```; Nuclear Repulsion Energy = 0.0000000000000000; One-Electron Energy = -143.9965313656634294; Two-Electron Energy = 44.5457243433611438; DFT Exchange-Correlation Energy = 0.0000000000000000; Empirical Dispersion Energy = 0.0000000000000000; PCM Polarization Energy = 0.0000000000000000; EFP Energy = 0.0000000000000000; Total Energy = -99.4508070223022855. Alert: EFP and PCM quantities not currently incorporated into SCF psivars.; ```. Properties will be evaluated at 0.000000, 0.000000, 0.000000 Bohr; ==> Properties <==. Properties computed using the SCF density matrix. Nuclear Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 0.0000. Electronic Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 0.0000. Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000. Dipole Moment: (Debye); X: 0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000. Saving occupied orbitals to File 180. **\* tstop() called on node5-027-06 at Fri Jan 8 13:56:55 2016; Module time:; user time = 10.33 seconds = 0.17 minutes; system time = 0.28 seconds = 0.00 minutes; total time = 2 seconds = 0.03 minutes; Total time:; user time = 10.33 seconds = 0.17 minutes; system time = 0.28 seconds = 0.00 minutes; total time = 2 seconds = 0.03 minutes. **\* tstart() called on node5-",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/204:8128,Energy,Energy,8128,https://psicode.org,https://github.com/psi4/psi4/issues/204,1,['Energy'],['Energy']
Energy Efficiency,"B3u -0.075684 1B3g -0.003943 1B1g -0.003943; 4Ag -0.003943 1B2g -0.003943 5Ag -0.003943; 3B1u 0.121472 3B3u 0.121472 3B2u 0.121472; 6Ag 0.225602 7Ag 0.375520 8Ag 0.375520; 2B3g 0.375520 2B2g 0.375520 2B1g 0.375520; 4B2u 0.414098 1Au 0.414098 4B3u 0.414098; 5B3u 0.414098 4B1u 0.414098 5B2u 0.414098; 5B1u 0.414098 6B1u 1.165651 6B2u 1.165651; 6B3u 1.165651 9Ag 1.739906 10Ag 1.739906; 3B3g 1.739906 3B1g 1.739906 3B2g 1.739906; 7B1u 1.850114 8B1u 1.850114 7B3u 1.850114; 8B3u 1.850114 7B2u 1.850114 2Au 1.850114; 8B2u 1.850114 11Ag 2.783091. Final Occupation by Irrep:; Ag B1g B2g B3g Au B1u B2u B3u; DOCC [ 2, 0, 0, 0, 0, 0, 0, 0 ]; ```. Energy converged. @RHF Final Energy: -24.23681570008748. => Energetics <=. ```; Nuclear Repulsion Energy = 0.0000000000000000; One-Electron Energy = -30.3554852212569273; Two-Electron Energy = 6.1186695211694495; DFT Exchange-Correlation Energy = 0.0000000000000000; Empirical Dispersion Energy = 0.0000000000000000; PCM Polarization Energy = 0.0000000000000000; EFP Energy = 0.0000000000000000; Total Energy = -24.2368157000874760. Alert: EFP and PCM quantities not currently incorporated into SCF psivars.; ```. Properties will be evaluated at 0.000000, 0.000000, 0.000000 Bohr; ==> Properties <==. Properties computed using the SCF density matrix. Nuclear Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 0.0000. Electronic Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 0.0000. Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000. Dipole Moment: (Debye); X: 0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000. Saving occupied orbitals to File 180. **\* tstop() called on node5-027-10 at Sat Jan 9 01:41:54 2016; Module time:; user time = 14.36 seconds = 0.24 minutes; system time = 0.33 seconds = 0.01 minutes; total time = 3 seconds = 0.05 minutes; Total time:; user time = 14.36 seconds = 0.24 minutes; system time = 0.33 seconds = 0.01 minutes; total time = 3 seconds = 0.05 minutes. **\* tstart() called on node5-027-10; **\* at Sat Jan 9 01:41:54 2016.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/204#issuecomment-170152270:7344,Energy,Energy,7344,https://psicode.org,https://github.com/psi4/psi4/issues/204#issuecomment-170152270,1,['Energy'],['Energy']
Energy Efficiency,"BS_BASIS cc-pvtz-f12-optri; DF_BASIS_F12 aug-cc-pvtz-ri; F12_TYPE df; CABS_SINGLES true; }. energy('mp2-f12'); ```. ### Timings; Timings and maxvmem are an average over 50 runs.; Orbital basis set (OBS) is cc-pVTZ-F12 (VTZ-F12) and CABS is cc-pVTZ-F12-OPTRI. For DF, auxiliary basis set (AUX) is aug-cc-pVTZ-RI. Timings and Max RAM Usage for MP2-F12/3C(FIX):; VTZ-F12 | NOBS | NCABS | Total (s) | Total (min) | maxvmem (GB); -- | -- | -- | -- | -- | --; CH4 | 125 | 239 | 176.48 | 2.94 | 27.554; NH3 | 107 | 198 | 96.64 | 1.61 | 15.060; H2O | 89 | 157 | 53.02 | 0.88 | 7.828; HF | 71 | 116 | 17.96 | 0.30 | 4.081. Timings and Max RAM Usage for DF-MP2-F12/3C(FIX):; VTZ-F12 | NOBS | NCABS | NAUX | Total (s) | maxvmem (GB); -- | -- | -- | -- | -- | --; CH4 | 125 | 239 | 290 | 6.24 | 3.219; NH3 | 107 | 198 | 244 | 4.91 | 2.763; H2O | 89 | 157 | 198 | 2.13 | 2.282; HF | 71 | 116 | 152 | 1.18 | 2.128. ### VTune Analysis for MP2-F12/3C(FIX); Memory consumption is most egregious in the `form_teints` where the allocation of the AO ERI is quite large with the largest AO being (NOBS, NOBS, NRI, NRI) e.g. CH4 would be (125, 125, 364, 364); ![image](https://github.com/psi4/psi4/assets/52012150/7483bfd5-b2ec-4a32-a5a8-1f905d745054). CPU Time all goes back to the `form_teints` function and specifically the `two_body_ao_computer`; ![image](https://github.com/psi4/psi4/assets/52012150/07eedb8d-5e89-4614-a4f3-315a7f669f27). ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [X] MP2-F12 single-point energy. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [X] Computes in-core MP2-F12/3C(FIX) energy; - [X] Computes disk MP2-F12/3C(FIX) energy; - [X] Computes in-core DF-MP2-F12/3C(FIX) energy; -",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3110:2008,consumption,consumption,2008,https://psicode.org,https://github.com/psi4/psi4/pull/3110,1,['consumption'],['consumption']
Energy Efficiency,"BTW the energy agreement b/w PySCF and psi4 for Ethane with the above script is up to 1e-11 a.u. so I guess, this is as good as it is gonna get.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2911#issuecomment-1487635966:8,energy,energy,8,https://psicode.org,https://github.com/psi4/psi4/issues/2911#issuecomment-1487635966,1,['energy'],['energy']
Energy Efficiency,"Back to the examples from https://github.com/psi4/psi4/issues/817#issuecomment-351739145, @robertodr has a scheme that won't get the dir right from within the psi input file, but it will fix the dir upon completion of psi4 execution, as shown below. Would that fix your pipeline for now?. ```; >>> cat test.py; import os. geometry('H -.5 0 0\nH .5 0 0\nsymmetry c1'). pcm = { ; Medium { Solvent = Water }; Cavity { Type = GePol }; }. energy('HF/3-21G'). print(os.getcwd()). >>> psi4 test.py ; /tmp/psi.12147.pcmsolver.604855c3; >>> pwd; /home/raimis/debug/psi4_PCM; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/817#issuecomment-356990910:434,energy,energy,434,https://psicode.org,https://github.com/psi4/psi4/issues/817#issuecomment-356990910,1,['energy'],['energy']
Energy Efficiency,"Based on the output file, `nalpha` and `nbeta` are obviously wrong (up from 5 to 6 for this computation), presumably due to `num_frozen_docc` handling. I doubt this second issue is related to the `num_frozen_docc` segfault. ```; Charge = 0; Multiplicity = 1; Electrons = 10; Nalpha = 5; Nbeta = 5. ... ==> Pre-Iterations <==. SCF Guess: Orbitals guess was supplied from a previous computation. -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A 28 28 6 6 6 0; -------------------------------------------------------; Total 28 28 6 6 6 0; -------------------------------------------------------; ```. I can look into what's contaminating the occupation count for (2), but #2619 needs to come in first. Is there anything _else_ that's wrong in my summary?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2631#issuecomment-1209930732:229,Charge,Charge,229,https://psicode.org,https://github.com/psi4/psi4/issues/2631#issuecomment-1209930732,1,['Charge'],['Charge']
Energy Efficiency,"Because the fno code is an efficient implementation of mp2 natural orbitals, it'd make a whole lot of sense to have ""fno"" variants of detci keywords, which would just trigger the detci calculation in the MP2 NO basis. The better starting guess would make CASSCF and RASSCF calculations converge a lot more quickly.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/829:27,efficient,efficient,27,https://psicode.org,https://github.com/psi4/psi4/issues/829,1,['efficient'],['efficient']
Energy Efficiency,"Because this would be a very lengthy digression in the eventual PR, I'll include this here:; One of the hard parts of implementing this PR is accounting for reorientation. Consider the following input:; ```; molecule {; noreorient; nocom; 0 2; N; C 1 r1; H 2 r2 1 a1 ; H 2 r2 1 a1 3 d1. r1 = 1.0 ; r2 = 1.0 ; a1 = 120 ; d1 = 180 ; }. set {; basis cc-pvdz; reference uhf ; }. energy('scf'); clean(). molecule {; noreorient; nocom; 0 2; N; C 1 r1; H 2 r2 1 a1 ; H 2 r2 1 a1 3 d1. r1 = 1.0 ; r2 = 1.0 ; a1 = 120 ; d1 = 178 ; }. energy('scf'); clean(). molecule {; noreorient; nocom; 0 2; N; C 1 r1; H 2 r2 1 a1 ; H 2 r2 1 a2 3 d1. r1 = 1.0 ; r2 = 1.0 ; a1 = 120 ; a2 = 118 ; d1 = 180 ; }. energy('scf'); ```. Although these molecules only differ by two degrees, Psi puts them in different coordinate systems. Molecule 2 swaps the y and z axes compared to Molecule 1. The y axis of Molecule 1 becomes the -x axis of Molecule 3. Accordingly, correlation tables will fail to correlate the point groups properly. Both molecules have reflection across the z-axis as a symmetry element. Those correlate to y-reflection and x-reflection respectively for Molecule 1, which has no z-reflection. Findif displacements preserve orientation because `fix_orientation` is applied to a clone of the reference molecule in `driver.py` before the displaced geometry is loaded, and the geometries loaded are Cartesian. ZMAT geometries are automatically reoriented in `reinterpret_coordinates`. So in the easily forseeable cases that a user wants to use a displaced ZMAT, or the molecule reading orbitals isn't a geometry-shifted clone of the molecule the guess came from, reorientation must be explicitly accounted for.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1297#issuecomment-443296950:375,energy,energy,375,https://psicode.org,https://github.com/psi4/psi4/issues/1297#issuecomment-443296950,3,['energy'],['energy']
Energy Efficiency,"Before anyone else tries to track down what's going on: I've found the ""problem"", working on a sustainable fix with @loriab 😬",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1604#issuecomment-806174930:95,sustainab,sustainable,95,https://psicode.org,https://github.com/psi4/psi4/issues/1604#issuecomment-806174930,1,['sustainab'],['sustainable']
Energy Efficiency,"Before, ""SAPT0 DISP ENERGY"" did not match ""SAPT DISP ENERGY"" for a SAPT0 job. Now, the values are identical.; [waterdim_oldsatpvar.txt](https://github.com/psi4/psi4/files/366399/waterdim_oldsatpvar.txt); [waterdim_newsaptvar.txt](https://github.com/psi4/psi4/files/366400/waterdim_newsaptvar.txt)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/433#issuecomment-232994845:20,ENERGY,ENERGY,20,https://psicode.org,https://github.com/psi4/psi4/pull/433#issuecomment-232994845,2,['ENERGY'],['ENERGY']
Energy Efficiency,Btw according to Henrik Koch's recent paper [doi:10.1021/acs.jctc.0c00686](https://pubs.acs.org/doi/10.1021/acs.jctc.0c00686) the CC3 implementation in Psi4 is slower by an order or two of magnitude than the most efficient implementations in other codes...,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2085#issuecomment-763014073:213,efficient,efficient,213,https://psicode.org,https://github.com/psi4/psi4/pull/2085#issuecomment-763014073,1,['efficient'],['efficient']
Energy Efficiency,"Bumping up just the eri3 for energy to 8 would likely be manageable, but I don't know about 10 or 12. I'm curious what EFV thinks at your query https://github.com/evaleev/libint/issues/250",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1341#issuecomment-1124275738:29,energy,energy,29,https://psicode.org,https://github.com/psi4/psi4/issues/1341#issuecomment-1124275738,1,['energy'],['energy']
Energy Efficiency,But the energy is still going down all the time!,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1716#issuecomment-530374708:8,energy,energy,8,https://psicode.org,https://github.com/psi4/psi4/issues/1716#issuecomment-530374708,1,['energy'],['energy']
Energy Efficiency,"By the way, @ajmisquitta, I noticed you have a fork of psi4 from last summer. In October we re-wrote our git history to reduce the repository size by 90%. This makes pre-history-rewrite and post-history-rewrite repositories unreconcilable. If this is the source you are compiling from and you want to continue with psi4 1.0 era code, stick with your repository. Likewise if you have local development associated with your psi4 fork. Otherwise, I strongly recommend deleting your repository and re-forking. This will give you access to 1.1 era code and can interact with the main psi4/psi4 repo. (It will cut off access to building 1.0.) There's some significant build changes with 1.1, but a lot of [good features](https://github.com/psi4/psi4/issues/485), too.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/626#issuecomment-281235825:120,reduce,reduce,120,https://psicode.org,https://github.com/psi4/psi4/issues/626#issuecomment-281235825,1,['reduce'],['reduce']
Energy Efficiency,CBS hessian behaves differently than energy and grad,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1897:37,energy,energy,37,https://psicode.org,https://github.com/psi4/psi4/issues/1897,1,['energy'],['energy']
Energy Efficiency,"CCSD calculations on the N and F atoms result in segmentation faults for me (gcc 4.8.1, boost 1.53, python 3.3.2). I used the input file:. ```; molecule f { ; f 0.00 0.00 0.00; }; set basis cc-pVTZ; set scf reference uhf ; energy('ccsd'); ```. (and similarly for N). I tried increasing the memory and changing basis set to no avail (some basis sets caused a back trace rather than just a segmentation fault). Curiously CCSD calculations with a UHF reference on the rest of the period 2 atoms ran without a problem. Running psi4 through gdb and the backtraces indicate the problem is with freeing an invalid pointer when closing a dpd buffer in ccenergy/pair_energies.cc. Full backtrace from gdb:. ```; (gdb) where; #0 0x00007ffff45e62a4 in free () from /usr/lib/libc.so.6; #1 0x000000000136b8bc in psi::free_int_matrix (array=0x29d1fc0) at /home/james/projects/psi4/src/lib/libciomr/int_array.cc:134; #2 0x00000000012edea5 in psi::DPD::buf4_close (this=<optimized out>, Buf=Buf@entry=0x7fffffffd630); at /home/james/projects/psi4/src/lib/libdpd/buf4_close.cc:50; #3 0x000000000082dbf8 in psi::ccenergy::pair_energies (epair_aa=epair_aa@entry=0x7fffffffd7c8, epair_ab=epair_ab@entry=0x7fffffffd7d0); at /home/james/projects/psi4/src/bin/ccenergy/pair_energies.cc:99; #4 0x000000000086b797 in psi::ccenergy::ccenergy (options=...) at /home/james/projects/psi4/src/bin/ccenergy/ccenergy.cc:307; #5 0x000000000086f4a5 in psi::ccenergy::CCEnergyWavefunction::compute_energy (this=0x293b760) at /home/james/projects/psi4/src/bin/ccenergy/ccenergy.cc:171; #6 0x00000000007004f4 in py_psi_ccenergy () at /home/james/projects/psi4/src/bin/psi4/python.cc:429; #7 0x00000000007080f7 in invoke<boost::python::to_python_value<double const&>, double (*)()> (rc=..., f=<optimized out>); at /usr/include/boost/python/detail/invoke.hpp:75; #8 operator() (args_=<optimized out>, this=<optimized out>) at /usr/include/boost/python/detail/caller.hpp:223; #9 boost::python::objects::caller_py_function_impl<boost::python::",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/12:223,energy,energy,223,https://psicode.org,https://github.com/psi4/psi4/issues/12,1,['energy'],['energy']
Energy Efficiency,"CH 14 A 15 D180; C 16 RCs 17 A 14 D180; H 18 RCH 16 A 17 D180; H 18 RCH 16 A 19 D180. RCs=1.45; RCd=1.36; RCH=1.08; A=120.0; D=0.0; D180=180.0; }. set basis STO-3G; set reference rohf; set scf_type pk; set docc [ 28, 4 ]; set socc [ 0, 1 ]; set e_convergence 1e-13; set d_convergence 1e-13; set ints_tolerance 0.0; # Include 20% old density; set damping_percentage 20; # and stop damping once density has converged to 1e-3; set damping_convergence 1e-3. set dmrg_irrep 1; set dmrg_multiplicity 2; set restricted_docc [ 9, 0 ]; set active [ 38, 9 ]. set dmrg_sweep_states [ 250, 250 ]; set dmrg_sweep_energy_conv [ 1e-8, 1e-8 ]; set dmrg_sweep_max_sweeps [ 10, 10 ]; set dmrg_sweep_noise_prefac [ 0.05, 0.00 ]; set dmrg_sweep_dvdson_rtol [ 1e-5, 1e-8 ]; set dmrg_print_corr false; set dmrg_mps_write false. set dmrg_scf_active_space loc; set dmrg_local_init true. set dmrg_molden_write true # DMRG-CI pseudocanonical orbitals; set dmrg_opdm_ao_print true # DMRG-CI density in the AO basis. energy('dmrg-ci'); ```. ```; @ROHF iter 32: -342.84910912994206 -1.13687e-13 7.97882e-15 DIIS; @ROHF iter 33: -342.84910912994206 0.00000e+00 5.47136e-15 DIIS; ```. ```; Psi4 symmetry group was found to be <cs>.; wfn_irrep = 1; wfn_multp = 2; numOrbitals = [ 47 , 9 ]; R(O)HF DOCC = [ 28 , 4 ]; R(O)HF SOCC = [ 0 , 1 ]; frozen_docc = [ 9 , 0 ]; active = [ 38 , 9 ]; virtual = [ 0 , 0 ]; nElectrons = 65; nEl. active = 47; ###########################################################; ### ###; ### DMRG-SCF ###; ### ###; ### CheMPS2 by Sebastian Wouters ###; ### https://github.com/SebWouters/CheMPS2 ###; ### Comput. Phys. Commun. 185 (6), 1501-1514 (2014) ###; ### ###; ###########################################################. Number of variables in the x-matrix = 342; CheMPS2 output is temporarily written to the file susi2.out.chemps2 and will be copied here.; Presorting SO-basis two-electron integrals.; Sorting File: SO Ints (nn|nn) nbuckets = 1; Transforming the one-electron integrals and constructi",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/464#issuecomment-244580097:1528,energy,energy,1528,https://psicode.org,https://github.com/psi4/psi4/issues/464#issuecomment-244580097,1,['energy'],['energy']
Energy Efficiency,"CISD(T) = 0.29 mb. ==> Define tiling <==. v(ab,cd) diagrams will be evaluated in 1 blocks.; v(ab,ci) diagrams will be evaluated in 1 blocks over ov2.; v(ab,ci) diagrams will be evaluated in 1 blocks over ov. Allocate cpu memory ( 0.49 mb).....done.; Initialize cpu memory..................done. Begin CISD iterations. Iter DIIS Energy d(Energy) |d(T)| time; 0 0 1 -0.1998551539 -0.3267843769 0.1994563594 0; 1 1 1 -0.1953653583 0.0044897956 0.0261066660 0; 2 2 1 -0.1998807440 -0.0045153857 0.0092191040 0; 3 3 1 -0.2002563980 -0.0003756540 0.0033933116 0; 4 4 1 -0.2003267260 -0.0000703281 0.0005902038 0; 5 5 1 -0.2003284394 -0.0000017134 0.0001874109 0; 6 6 1 -0.2003286037 -0.0000001643 0.0000507167 0; 7 7 1 -0.2003286166 -0.0000000128 0.0000118947 0; 8 8 1 -0.2003286173 -0.0000000007 0.0000025104 0; 9 8 2 -0.2003286173 -0.0000000000 0.0000005766 0; 10 8 3 -0.2003286173 -0.0000000000 0.0000001177 0; 11 8 4 -0.2003286173 -0.0000000000 0.0000000230 0. CISD iterations converged!. CISD variational energy: -0.200328617292; CISD transition energy: -0.200328617850. OS SCS-MP2 correlation energy: -0.179813193864; SS SCS-MP2 correlation energy: -0.016670275217; SCS-MP2 correlation energy: -0.196483469081; * SCS-MP2 total energy: -76.213780024364. OS MP2 correlation energy: -0.149844328220; SS MP2 correlation energy: -0.050010825651; MP2 correlation energy: -0.199855153871; * MP2 total energy: -76.217151709154. OS CISD correlation energy: -0.158048399059; SS CISD correlation energy: -0.042280218791; CISD correlation energy: -0.200328617292; * CISD total energy: -76.217625172575. Total time for CISD iterations: 0.06 s (user); 0.11 s (system); 0 s (total). Time per iteration: 0.01 s (user); 0.01 s (system); 0.00 s (total). *** tstop() called on mac-psinet.sherrill.chemistry.gatech.ed at Wed Oct 25 13:40:59 2017; Module time:; 	user time = 0.06 seconds = 0.00 minutes; 	system time = 0.11 seconds = 0.00 minutes; 	total time = 0 seconds = 0.00 minutes; Total time:; 	user time = 0.52 sec",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/828#issuecomment-339412812:11497,energy,energy,11497,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339412812,1,['energy'],['energy']
Energy Efficiency,CIWave: Fixes occasional power issue with the MCSCF DIIS object,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/610:25,power,power,25,https://psicode.org,https://github.com/psi4/psi4/pull/610,1,['power'],['power']
Energy Efficiency,"CSD(T): 36451.32 mb. ==> Input parameters <==. Freeze core orbitals? yes; Use frozen natural orbitals? yes; r_convergence: 1.000e-07; e_convergence: 1.000e-06; Number of DIIS vectors: 8; Number of frozen core orbitals: 26; Number of active occupied orbitals: 74; Number of active virtual orbitals: 640; Number of frozen virtual orbitals: 38. Begin singles and doubles coupled cluster iterations. Iter DIIS Energy d(Energy) |d(T)| time; 0 0 2 0.0000000000 0.0000000000 0.0000000000 393. CCSD iterations converged!. T1 diagnostic: 0.000000000000; D1 diagnostic: 0.000000000000. OS MP2 FNO correction: -3.045395864164; SS MP2 FNO correction: -1.111907331006; MP2 FNO correction: -4.157303195170. OS MP2 correlation energy: -3.045395864164; SS MP2 correlation energy: -1.111907331006; MP2 correlation energy: -4.157303195170; * MP2 total energy: -1500.355601695273. OS CCSD correlation energy: -3.045395864164; SS CCSD correlation energy: -1.111907331006; CCSD correlation energy: -4.157303195170; * CCSD total energy: -1500.355601695273. Total time for CCSD iterations: 3404.15 s (user); 270.93 s (system); 607 s (total). Time per iteration: inf s (user); inf s (system); inf s (total). *** tstop() called on r3546 at Mon Feb 10 14:43:17 2014; Module time:; user time = 31046.70 seconds = 517.45 minutes; system time = 945.63 seconds = 15.76 minutes; total time = 5144 seconds = 85.73 minutes; Total time:; user time = 33202.74 seconds = 553.38 minutes; system time = 990.31 seconds = 16.51 minutes; total time = 5317 seconds = 88.62 minutes. *** tstart() called on r3546; *** at Mon Feb 10 14:57:28 2014. *******************************************************; * *; * CCSD(T) *; * *; *******************************************************. num_threads = 16; available memory = 83711.64 mb; memory requirements = 36451.32 mb. ```. PSIO error (from stderr). ```; PSIO_ERROR: unit = 260, errval = 18; PSIO_ERROR: 18 (Incorrect block end address); Traceback (most recent call last):; File ""<string>"", line",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/34:2350,energy,energy,2350,https://psicode.org,https://github.com/psi4/psi4/issues/34,1,['energy'],['energy']
Energy Efficiency,CUBEPROP: Compute adaptive isocontour range for cube files,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/864:18,adapt,adaptive,18,https://psicode.org,https://github.com/psi4/psi4/pull/864,1,['adapt'],['adaptive']
Energy Efficiency,"Can confirm it, but had to fiddle with the input to see the error because coordinates were returning all 0s (integer rounding). This input work on my machine:; ```; molecule mol {; 0 1; symmetry c1; H 0.0 0.0 0.0; H 0.0 0.0 R1; H 0.0 0.0 R2; H 0.0 0.0 R3; }. set basis STO-3G; set ci_maxiter 100. # This crashes at R=0.68; #for ir in range(60, 80, 2):; # This crashes at R=0.74; for ir in range(68, 80, 2):; mol.R1 = 1.*(float(ir)/100.); mol.R2 = 2.*(float(ir)/100.); mol.R3 = 3.*(float(ir)/100.); ci_e=energy('fci'); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/759#issuecomment-313824229:503,energy,energy,503,https://psicode.org,https://github.com/psi4/psi4/issues/759#issuecomment-313824229,1,['energy'],['energy']
Energy Efficiency,Can you add the water dimer and excitation energy tests back in? Meta-GGA UKS should be fixed in latest master.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/880#issuecomment-360958436:43,energy,energy,43,https://psicode.org,https://github.com/psi4/psi4/pull/880#issuecomment-360958436,1,['energy'],['energy']
Energy Efficiency,"Can you clarify what was giving you trouble? A buf4_init() call shouldn't yield any data, because it doesn't attempt to allocate memory for the tensor data itself, just meta-data like row/column lookups. The underlying file4_init() call *can* be associated with data that's already in cache (in which case I wouldn't describe it as ""loading"", just assigning a pointer to data in memory). Sorry to be picky; I just want to the docs to match what's happening in the code.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/550#issuecomment-267189874:120,allocate,allocate,120,https://psicode.org,https://github.com/psi4/psi4/pull/550#issuecomment-267189874,1,['allocate'],['allocate']
Energy Efficiency,"Cannot replicate this bug. Iterations are oscillating like crazy, but no; singularity. I get similar oscillations for singlet cation in cc-pVDZ; (eventually converges) with both DF and ID. -Rob. On Fri, Apr 29, 2016 at 1:54 PM, Rob Parrish robparrish@gmail.com wrote:. > Does the singlet cation exhibit the same failure with RHF/SAD? Could be a; > bad eigenvalue in the DF metric, though I have traps in for this. Compiling; > a fork to check this out.; > ; > -Rob; > ; > On Fri, Apr 29, 2016 at 12:56 PM, Daniel Smith notifications@github.com; > wrote:; > ; > > The following either gives NaN energy or (positive) 60,000 [Eh]; > > depending on MKL version and compile options. All basis sets smaller than; > > aug-cc-pVQZ seem to check out, did not try larger.; > > ; > > molecule mol {; > > 0 2; > > C -2.83891 -0.84747 -0.20778; > > N -2.06959 -0.27604 0.77905; > > C -0.85937 -0.82512 0.74757; > > N -0.82980 -1.74677 -0.21226; > > C -2.05910 -1.77487 -0.83179; > > C -2.45490 0.86620 1.59959; > > C 0.35903 -2.49473 -0.61265; > > F -1.01767 1.46174 -1.11980; > > B 0.28985 1.63764 -0.63648; > > F 0.23738 1.82826 0.77419; > > F 0.89453 2.73957 -1.24020; > > F 1.05039 0.46734 -0.88673; > > H -0.02604 -0.54755 1.38339; > > H -2.27287 -2.45330 -1.64959; > > H -3.86751 -0.55086 -0.37733; > > H -3.45079 0.68580 2.01748; > > H -1.72185 0.98138 2.40249; > > H -2.44673 1.75972 0.96603; > > H 0.98379 -1.85263 -1.24323; > > H 0.91655 -2.78676 0.28358; > > H 0.03922 -3.39046 -1.15377; > > C 2.81822 0.12352 1.52490; > > C 3.26768 -0.78277 0.56145; > > H 3.28632 0.11977 2.50813; > > H 2.01109 0.81253 1.27433; > > N 3.64537 -1.55240 -0.23308; > > }; > > ; > > set {; > > basis cc-pVQZ; > > scf_type df; > > guess gwh; > > reference rohf; > > }; > > ; > > energy('SCF'); > > ; > > —; > > You are receiving this because you are subscribed to this thread.; > > Reply to this email directly or view it on GitHub; > > https://github.com/psi4/psi4/issues/371",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/371#issuecomment-215889548:594,energy,energy,594,https://psicode.org,https://github.com/psi4/psi4/issues/371#issuecomment-215889548,2,['energy'],['energy']
Energy Efficiency,"Carlos is going to look into writing us a few test cases that make sure that all MP2 methods and all CC methods in Psi4 give consistent energies. - [ ] DF-MP2: Rob's code vs dfnocc is already in test case test/fnocc4, at the end. Split this part out to a new test case that compares these two as well as from the occ module. set qc_module occ will run Ugur's code (give it method 'mp2').; - [ ] Conventional MP2: Crawford's code vs fnocc vs occ; - [ ] DF-CCSD and DF-CCSD(T): Eugene's code with no FNO (df-fnocc), Ugur's code; - [ ] CCSD and CCSD(T): fnocc vs Crawford's code (ccenergy); - [ ] CEPA comparison: energy('cepa(0)') vs LCCD if available for non-OO, and vs DCFT [FYI some CEPA definitions have singles, others don't]",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/714:611,energy,energy,611,https://psicode.org,https://github.com/psi4/psi4/issues/714,1,['energy'],['energy']
Energy Efficiency,"Carried forward from [forum](http://forum.psicode.org/t/fatal-error-wavefunction-unable-to-obtain-mo-coefficients/2204/12). Even with SOSCF, I'm not able to converge MgF at 3 Angstroms. Several of the iterations display non-monotonic decrease of the residual, sometimes increasing after PCG iterations. This is surprising but I don't think mathematically inpossible, if the MO Hessian isn't positive semi-definite, in which case, CG methods fail. If that was all, we should look into alternate SOSCF methods. But even when convergence is monotonic, one sees an energy improvement on the order of 1e-4 hartrees, and negligible drop in the residual. What's going wrong here? I have a memory that the SOSCF step isn't being taken correctly (by exponentiation), so that's worth looking into. Probably a weekend project for me...",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2204:561,energy,energy,561,https://psicode.org,https://github.com/psi4/psi4/issues/2204,1,['energy'],['energy']
Energy Efficiency,"Carried forward from [forums](http://forum.psicode.org/t/cfour-outfile-inconsistent-with-cfour-grd/1642). I haven't run this myself, but the output file the reporter gave is from 1.3.2 release, and I don't think the CFOUR driver has been touched since then. @loriab, correct me if I'm wrong. See the following input file:; ```; memory 2 gb. molecule co2 {; C; O 1 1.163; O 1 1.163 2 180; }. set basis aug-cc-pvdz; set CFOUR_ABCDTYPE AOBASIS; set CFOUR_CC_PROGRAM ecc; set cfour_anharmonic VIBROT; set cfour_vibration findif. optimize('c4-ccsd(t)'); ```. Psi will do a sanity check at the end of the computation, that the nuclear repulsion energy harvested from CFOUR output agrees with the same as computed from CFOUR's GRD file. In this case, they disagree. The output harvested quantity is the _undisplaced geometry_, where the GRD harvest is the last displacement to run, which is a _displaced geometry_. Unsurprisingly, the nuclear repulsion energies disagree between the two, and Psi reports a [validation error](https://github.com/psi4/psi4/blob/master/psi4/driver/qcdb/cfour.py#L597).",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1784:639,energy,energy,639,https://psicode.org,https://github.com/psi4/psi4/issues/1784,1,['energy'],['energy']
Energy Efficiency,"Carried forward from [the forums](http://forum.psicode.org/t/a-roots-per-irrep-value-crashes-cc3/1826). The following input file. ```; molecule radical {; 0 2; O 0.0000000000 0.0000000000 0.1081705869; H 0.0000000000 0.0000000000 -0.8651605869; units angstrom; symmetry C1; }; set {; basis ""6-31+G(d)""; reference ""uhf""; freeze_core true; roots_per_irrep [3] ; }; energy('eom-cc3'); ```. gives the error `Parameter 3 was incorrect on entry to DGEBAL.` and then segfaults. Initial debugging attempts indicate that at the time [this line is executed](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/cc/cceom/diag.cc#L555) `G[0][0] = NaN`, causing the subsequent matrix diagonalization to fail. Determining why `G[0][0] = NaN` will require expert attention. If there is some legitimate reason for the failure, a more helpful error message should be printed instead. The only one I can think of is if we were capturing only one state of a degenerate pair. But as the original poster remarked, setting `roots_per_irrep` to other numbers like 2 or 4 worked just fine, and when I set `roots_per_irrep` to 4, none of the roots had the same EOM energy. That seems to eliminate the ""degenerate pair"" hypothesis.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1931:363,energy,energy,363,https://psicode.org,https://github.com/psi4/psi4/issues/1931,2,['energy'],['energy']
Energy Efficiency,"Carried forward from a forum report. Consider the following input file designed to use a custom SCF guess. (And unfortunately, there isn't a much cleaner way to do this.). ```; import numpy as np. memory 4 GB. molecule mymol {; symmetry C1; no_reorient; 0 1; H1 0.00000000 0.00000000 0.00000000; H2 0.00000000 0.00000000 0.60000000; }. set {; basis sto-3g; scf_type pk; reference rhf; maxiter 1; }. mo_coeff = np.array([; [ 3.12018412E-01, 2.77605634E-01, 3.12018412E-01, 2.77605634E-01],; [ 8.82705828E-02, 2.02527493E+00, -8.82705828E-02, -2.02527493E+00],; [ 7.20615388E-01, -6.53699105E-01, 7.20615388E-01, -6.53699105E-01],; [ -1.21367472E+00, 1.40100934E+00, 1.21367472E+00, -1.40100934E+00]; ]).T. try:; energy('scf'); except SCFConvergenceError as e:; scf_wfn = e.wfn; scf_wfn.Ca().from_array(mo_coeff); scf_wfn.to_file(scf_wfn.get_scratch_filename(180)); set guess read; set maxiter 200; energy('scf'); ```. The `set guess read` is ignored because Psi internally set the SCF local option to be read, causing the global option to be ignored. To fix this, first, we'll need to _find_ where Psi is setting this internally. Which seems like a simple enough fix. From there, we'll need to make sure that the setting is only temporary through the use of OptionsStash objects, as done frequently throughout `driver/procrouting.py`. I'm marking this as `new_dev` friendly.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2110:711,energy,energy,711,https://psicode.org,https://github.com/psi4/psi4/issues/2110,2,['energy'],['energy']
Energy Efficiency,"Carrying forward a recent [forum report](http://forum.psicode.org/t/df-casscf-energy-not-equal-to-those-of-other-programs/2064/4). The report has a working example of the behavior. Suppose you compute a DF-CASSCF wavefunction with an initial DF-HF wavefunction, and an initial conventional-integral HF wavefunction. In both cases, you change the orbitals because you have a better initial guess. The CASSCF energy should be the same in both cases, as long as the two attempts converge to the same state. No way these two initial wavefunctions differ should change the final result, not even their different initial Fock matrices. But for the reporter's example, the two have an energy difference of 14 microHartrees.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2119:78,energy,energy-not-equal-to-those-of-other-programs,78,https://psicode.org,https://github.com/psi4/psi4/issues/2119,3,['energy'],"['energy', 'energy-not-equal-to-those-of-other-programs']"
Energy Efficiency,"Carrying forward an issue from the [forums](http://forum.psicode.org/t/failed-to-converge-in-sapt-calculation/1506/6). A user reported an SCF they couldn't converge. Even on the newest master and using SOSCF, I can't converge it. The specific way in which it fails to converge indicates there is something wrong with Psi. I've included my test file below, using basis sets taken from EMSL.; [scf_demo.txt](https://github.com/psi4/psi4/files/3600864/scf_demo.txt). The SOSCF iterations look like:; ```; Total Energy Delta E RMS |[F,P]|. @DF-ROHF iter SAD: -1924.11724276608629 -1.92412e+03 0.00000e+00 ; @DF-ROHF iter 1: -1928.28933947889254 -4.17210e+00 2.53544e-03 DIIS ; @DF-ROHF iter 2: -1928.45146002818092 -1.62121e-01 1.47486e-03 DIIS ; @DF-ROHF iter 3: -1928.51413649707683 -6.26765e-02 1.68876e-04 SOSCF, nmicro=5; @DF-ROHF iter 4: -1928.51791993729876 -3.78344e-03 1.54401e-05 SOSCF, nmicro=5; @DF-ROHF iter 5: -1928.51821178601676 -2.91849e-04 1.97203e-05 SOSCF, nmicro=5; @DF-ROHF iter 6: -1928.51827252226894 -6.07363e-05 2.98751e-06 SOSCF, nmicro=5; @DF-ROHF iter 7: -1928.51828987200679 -1.73497e-05 5.27601e-06 SOSCF, nmicro=5; @DF-ROHF iter 8: -1928.51829604915929 -6.17715e-06 1.67929e-06 SOSCF, nmicro=5; @DF-ROHF iter 9: -1928.51830046281020 -4.41365e-06 3.51665e-06 SOSCF, nmicro=5; @DF-ROHF iter 10: -1928.51830387234213 -3.40953e-06 1.32956e-06 SOSCF, nmicro=5; @DF-ROHF iter 11: -1928.51830692139856 -3.04906e-06 3.05868e-06 SOSCF, nmicro=5; @DF-ROHF iter 12: -1928.51830971085883 -2.78946e-06 1.20987e-06 SOSCF, nmicro=5; @DF-ROHF iter 13: -1928.51831235087457 -2.64002e-06 2.86336e-06 SOSCF, nmicro=5; @DF-ROHF iter 14: -1928.51831487022673 -2.51935e-06 1.14965e-06 SOSCF, nmicro=5; @DF-ROHF iter 15: -1928.51831729563537 -2.42541e-06 2.74681e-06 SOSCF, nmicro=5; @DF-ROHF iter 16: -1928.51831963922041 -2.34359e-06 1.10840e-06 SOSCF, nmicro=5; @DF-ROHF iter 17: -1928.51832191065023 -2.27143e-06 2.65960e-06 SOSCF, nmicro=5; @DF-ROHF iter 18: -1928.51832411656915 -2.20592e-0",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1716:508,Energy,Energy,508,https://psicode.org,https://github.com/psi4/psi4/issues/1716,1,['Energy'],['Energy']
Energy Efficiency,"Carrying forward another case that SOSCF can't get. It can converge to a saddle point on the orbital surface, but not to a minimum. This is yet another case that originates from open-shell SAPT on the forums. We'll need to investigate whether the numerical problem is simply ill-conditioned, or if this means we need to improve open-shell SOSCF. ```; molecule {; 0 3; C 2.146191145 -2.250869610 -0.229432545; H 2.796153988 -3.111981487 -0.362347932; H 1.465215175 -2.173397551 -1.073297820; H 1.533174247 -2.389665597 0.657575818; C 2.900923223 -0.952856733 -0.096839038; O 2.324207776 0.122438123 0.059749704; N 4.251556346 -1.050359417 -0.161457007; H 4.652507974 -1.960893396 -0.290972105; C 5.119798458 0.101611043 -0.052013925; H 4.483304328 0.969911486 0.082770682; H 5.785387965 0.010155845 0.804078956; H 5.714264181 0.231031532 -0.954273112; --; 0 1; O -0.392018453 -0.384718737 0.076071325; H -0.911460851 0.413812040 0.177648774; H 0.524903820 -0.068484694 0.090511364; }. set {; reference uhf; basis jun-cc-pVDZ; maxiter 200; stability_analysis follow; soscf true; soscf_print true; soscf_max_iter 50; soscf_conv 1e-4; }. energy('hf'); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1716#issuecomment-546623859:1134,energy,energy,1134,https://psicode.org,https://github.com/psi4/psi4/issues/1716#issuecomment-546623859,1,['energy'],['energy']
Energy Efficiency,"Carrying forward from [a forum post](http://forum.psicode.org/t/memory-leak-in-psi4-energy/1230/). . A user reported memory leaks in Psi4. Terminating the following sample code prematurely; ```; import psi4; psi4.set_memory('1000 MB'). mol = psi4.geometry('''; O; H 1 0.96; H 1 0.96 2 104.5; '''). psi4.set_options({'basis' : 'cc-pVDZ'}); EHF, wfn = psi4.energy('scf', return_wfn='on'); for i in range(10000):; psi4.energy('detci', ref_wfn=wfn); ```; I get the following memory usage graph using developer Psi, which spans several iterations:. ![detci_mem](https://user-images.githubusercontent.com/29777889/52713199-aac84f00-2f64-11e9-9069-0bdda9ee6ac6.png). User reported another, smaller memory leak in the `scf` code. That, I have not attempted to reproduce. There may be _other_ memory leaks, and it would be worthwhile to check for them.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1532:84,energy,energy,84,https://psicode.org,https://github.com/psi4/psi4/issues/1532,3,['energy'],['energy']
Energy Efficiency,"Carrying forward from [forum report](http://forum.psicode.org/t/slight-mismatching-of-casscf-between-total-mcscf-energy-and-mcscf-root-0-energy/1693). `detci` reports a different `MCSCF Root 0 Energy` than its `Total MCSCF Energy`. This is possibly the same root issue as #2119, but debugging is needed to confirm.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2258:113,energy,energy-and-mcscf-root-,113,https://psicode.org,https://github.com/psi4/psi4/issues/2258,4,"['Energy', 'energy']","['Energy', 'energy', 'energy-and-mcscf-root-']"
Energy Efficiency,"Carrying forward from [the forums](http://forum.psicode.org/t/problem-when-passing-a-reference-wavefunction-to-df-ccsd-in-the-fnocc-module/1346). . The following input file leads to a PSIO error:; ```; molecule {; O; H 1 r; H 1 r 2 a. r=0.958; a=104.5. symmetry c1; }. set scf_type df; set cc_type df; set df_ints_io save; eng, wfn = psi4.energy('hf/cc-pvdz', return_wfn=True); cc_eng = psi4.energy('ccsd/cc-pvdz', ref_wfn=wfn); ```. The following workaround input file runs fine:; ```; molecule {; O; H 1; H 1 r 2 a; r=0.958; a=104.5; symmetry c1; }. set basis cc-pvdz; set scf_type df; set cc_type df; set df_ints_io save; eng, wfn = psi4.energy(‘hf’, return_wfn=True); cc_eng = psi4.energy(‘ccsd’, ref_wfn=wfn); ```. Still, it would be good to figure out what is differing between these two cases.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1604:339,energy,energy,339,https://psicode.org,https://github.com/psi4/psi4/issues/1604,4,['energy'],['energy']
Energy Efficiency,"Case in point, I was doing a CAS(4,6)CI calculation on HBr at 1.5A/cc-pVDZ/cc-pVDZ-JKFIT (default DF basis), and DETCI returned a ~700 mEh correclation energy from the tiny 16-determinant CAS. @JonathonMisiewicz quickly figured out DETCI wasn't using DF integrals. It turned out that cc-pVDZ-JKFIT is a very bad DF basis for Br, and should probably not have been used anyway, but it would have been nice to at least get a CASCI energy consistent with the SCF calculation, imho.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2883#issuecomment-1440866212:152,energy,energy,152,https://psicode.org,https://github.com/psi4/psi4/issues/2883#issuecomment-1440866212,2,['energy'],['energy']
Energy Efficiency,Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------		 ------------ ----------------- ----------------- ----------------- -----------------; O 0.000000000000 0.000000000000 -0.057517917037 15.994914619570		 O 0.000000000000 0.000000000000 -0.057517917037 15.994914619570; H 0.000000000000 0.000000000000 0.912851082963 1.007825032230		 H 0.000000000000 0.000000000000 0.912851082963 1.007825032230. Running in c2v symmetry.										 Running in c2v symmetry. Rotational constants: A = ************ B = 18.88315 C = 18.88315 [cm^-1]			 Rotational constants: A = ************ B = 18.88315 C = 18.88315 [cm^-1]; Rotational constants: A = ************ B = 566102.67788 C = 566102.67788 [MHz]			 Rotational constants: A = ************ B = 566102.67788 C = 566102.67788 [MHz]; Nuclear repulsion = 4.362688508557055								 Nuclear repulsion = 4.362688508557055. Charge = 0											 Charge = 0; Multiplicity = 2											 Multiplicity = 2; Electrons = 9											 Electrons = 9; Nalpha = 5											 Nalpha = 5; Nbeta = 4											 Nbeta = 4. ==> Algorithm <==											 ==> Algorithm <==. SCF Algorithm Type is PK.										 SCF Algorithm Type is PK.; DIIS enabled.												 DIIS enabled.; MOM disabled.												 MOM disabled.; Fractional occupation disabled.									 Fractional occupation disabled.; Guess Type is SAD.											 Guess Type is SAD.; Energy threshold = 1.00e-06										 Energy threshold = 1.00e-06; Density threshold = 1.00e-06										 Density threshold = 1.00e-06; Integral threshold = 1.00e-12										 Integral threshold = 1.00e-12. ==> Primary Basis <==											 ==> Primary Basis <==. Basis Set: DZ												 Basis Set: DZ; Blend: DZ												 Blend: DZ; Number of shells: 8											 Number of shells: 8; Number of basis functions: 12									 Number of basis functions: 12; Number of Cartesian functions: 12									 Number of Cartesian functions: 12; Spherical Harmonics?: false										 Spherical Harm,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2264#issuecomment-890681284:10038,Charge,Charge,10038,https://psicode.org,https://github.com/psi4/psi4/pull/2264#issuecomment-890681284,2,['Charge'],['Charge']
Energy Efficiency,"Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; F 1.054979085535 0.279491800552 0.000000000000 18.998403162730; C -0.000320914465 -0.577108199448 0.000000000000 12.000000000000; C -1.279120914465 0.226491800552 0.000000000000 12.000000000000; H 0.072379085535 -1.206508199448 -0.891000000000 1.007825032230; H 0.072279085535 -1.206508199448 0.891000000000 1.007825032230; H -2.153920914465 -0.429408199448 -0.000100000000 1.007825032230; H -1.322020914465 0.874191800552 0.881000000000 1.007825032230; H -1.321920914465 0.874291800552 -0.880900000000 1.007825032230. Running in c1 symmetry. Rotational constants: A = 1.21162 B = 0.32319 C = 0.28216 [cm^-1]; Rotational constants: A = 36323.59189 B = 9689.02155 C = 8459.03982 [MHz]; Nuclear repulsion = 80.019990391667150; ```. Reading this into IQmol and running ""Symmetrize geometry"", I get; ```; ==> Geometry <==. Molecular point group: cs; Full point group: Cs. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; F -0.264271602373 1.058895456489 0.000000000000 18.998403162730; C 0.577048397627 -0.008634543511 0.000000000000 12.000000000000; C -0.244891602373 -1.275724543511 0.000000000000 12.000000000000; H 1.207428397627 0.054945456489 -0.891000000000 1.007825032230; H 1.207428397627 0.054945456489 0.891000000000 1.007825032230; H 0.398348397627 -2.159884543511 0.000000000000 1.007825032230; H -0.893191602373 -1.309244543511 0.880950000000 1.007825032230; H -0.893191602373 -1.309244543511 -0.880950000000 1.007825032230. Running in cs symmetry. Rotational constants: A = 1.21161 B = 0.32319 C = 0.28216 [cm^-1]; Rotational constants: A = 36323.26201 B = 9689.02376 C = 8459.02361 [MHz]; Nuclear repulsion = 80.019847421417836; ```. However, the HF/cc-pVDZ energies appear almost identical: `-178.08964068212876` for the pubchem structure vs `-178.08964078908636` for th",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2463#issuecomment-1062277252:1232,charge,charge,1232,https://psicode.org,https://github.com/psi4/psi4/issues/2463#issuecomment-1062277252,1,['charge'],['charge']
Energy Efficiency,"Certainly the flexibility of the optimizer oughtn't be reduced. In the absence of fixed/frozen keywords or user supplied/edited intco (do you need a keyword to signal do-read-intco instead of accepting any it finds?), it's probably reasonable to assume a full optimization is desired. Maybe `grep '~'` needs to catch a `gradient.rms()`, too, next to the optking-active rms gradient.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/310#issuecomment-196021110:55,reduce,reduced,55,https://psicode.org,https://github.com/psi4/psi4/issues/310#issuecomment-196021110,1,['reduce'],['reduced']
Energy Efficiency,"Certainly. Polluted might have been too harsh, cluttered may be a more appropriate word for it. All variables are currently declared at the beginning of the function. Depending on the type of sort requested, some of them may never be initialized/used, but because they are declared at the top they are always visible and mutable inside the switch cases, loops, etc. This makes debugging more challenging than it has to be, as it is not possible to tell at a glance which of the variables with suspicious (negative or power-of-two) values are just uninitialized, as seen in the stack trace in https://github.com/psi4/psi4/issues/2261#issuecomment-1227164277 . In general variables should enter scope when they are needed and go out of scope when they are no longer required, and be `const` if they are never modified.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2717#issuecomment-1243470370:517,power,power-of-two,517,https://psicode.org,https://github.com/psi4/psi4/pull/2717#issuecomment-1243470370,1,['power'],['power-of-two']
Energy Efficiency,Change energy() function reference to be clickable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/493#issuecomment-258531474:7,energy,energy,7,https://psicode.org,https://github.com/psi4/psi4/pull/493#issuecomment-258531474,1,['energy'],['energy']
Energy Efficiency,"Change:. scf_type pk. Justin Turney, Ph.D.; Senior Research Scientist; CCQC/UGA. On Thu, Oct 1, 2015 at 10:50 AM, mberdakin notifications@github.com wrote:. > I don't want to take more of your time.; > I tried the input that you sent me and the calculation ends with the; > ; > ## following error; > ; > PSIO_ERROR: Can't find TOC Entry IWL Buffers; > PSIO_ERROR: unit = 33, errval = 13; > PSIO_ERROR: 13 (no such TOC entry); > Traceback (most recent call last):; > File """", line 23, in; > File ""/home/matias/anaconda/share/psi/python/driver.py"", line 637, in; > energy; > procedures['energy']lowername http://lowername,%20**kwargs; > File ""/home/matias/anaconda/share/psi/python/proc.py"", line 582, in run_mp2; > run_conv_omp2(name, **kwargs); > File ""/home/matias/anaconda/share/psi/python/proc.py"", line 538, in; > run_conv_omp2; > psi4.occ(); > ; > ## RuntimeError: PSIO Error; > ; > In the input you used some keywords that i'm not familiar with, so i have; > to study the manual a little more, to understand the error.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/105#issuecomment-144750805.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/105#issuecomment-144751892:563,energy,energy,563,https://psicode.org,https://github.com/psi4/psi4/issues/105#issuecomment-144751892,2,['energy'],['energy']
Energy Efficiency,"Changing the nuclear charge is the easiest thing to do. But it makes me; nervous because now the nuclear charge is not really the nuclear charge,; and others who are not ""in the know"" could fail to take account of this; when accessing the nuclear charge. On Apr 19, 2017 8:58 PM, ""fevangelista"" <notifications@github.com> wrote:. > @andysim <https://github.com/andysim>: I am super excited about this; > code! I was wondering if you could answer a few questions so that I can; > start to think about how to write the interface with forte. How do you; > handle the reduced number of electrons? Do you redefine the atomic charge; > (Z) or just subtract the number of core electrons? Is this info available; > from Wavefunction? Let us know if we can be of any help!; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/pull/681#issuecomment-295521147>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AC9QducGsSjAdZ3Wa5g8-sa46HZa75tbks5rxq3MgaJpZM4NCEGk>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/681#issuecomment-295524802:21,charge,charge,21,https://psicode.org,https://github.com/psi4/psi4/pull/681#issuecomment-295524802,6,"['charge', 'reduce']","['charge', 'reduced']"
Energy Efficiency,Charge-aware frozen core,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1350:0,Charge,Charge-aware,0,https://psicode.org,https://github.com/psi4/psi4/pull/1350,1,['Charge'],['Charge-aware']
Energy Efficiency,Check convergence of FCI energy/residual,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/394:25,energy,energy,25,https://psicode.org,https://github.com/psi4/psi4/issues/394,1,['energy'],['energy']
Energy Efficiency,Check the output for the water+_homo-4.out in the Psi4 1.4(...) version. **That's the converged energy in PSI4!** Hence this issue. Its clearly converging to some crazy unphysical state. I would not worry if it was just a strange energy... MOM is like that. But this is an impossible energy!. The whole PySCF thing is a different ordeal that probably has to do with some weird reordering in the .fchk writer.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1692#issuecomment-518740195:96,energy,energy,96,https://psicode.org,https://github.com/psi4/psi4/issues/1692#issuecomment-518740195,3,['energy'],['energy']
Energy Efficiency,"Choosing a SAD or a core guess for an UHF/cc-pVDZ calculation on H2O+ gives very different energies.; The following input with the core guess gives a total energy of -75.5488580481183476. ```; memory 250 mb; molecule h2o {; symmetry c1; 1 2; O 0.0000000000 0.0000000000 -0.2249058930; H 1.4523499293 0.0000000000 0.8996235720; H -1.4523499293 0.0000000000 0.8996235720; units bohr; no_reorient; no_com; }. set {; basis cc-pVDZ; scf_type direct ; guess core ; reference uhf; e_convergence 7; d_convergence 7; }. energy_scf1 = energy('scf'); ```. while this input with the SAD guess gives a total energy of -75.6330881795159655. ```; memory 250 mb; molecule h2o {; symmetry c1; 1 2; O 0.0000000000 0.0000000000 -0.2249058930; H 1.4523499293 0.0000000000 0.8996235720; H -1.4523499293 0.0000000000 0.8996235720; units bohr; no_reorient; no_com; }. set {; basis cc-pVDZ; scf_type direct ; guess sad ; reference uhf; e_convergence 7; d_convergence 7; }. energy_scf1 = energy('scf'); ```. Of course, the initial guess has always a huge impact on the calculation, but is the reported difference reasonable for a system as small as H2O+?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/211:156,energy,energy,156,https://psicode.org,https://github.com/psi4/psi4/issues/211,4,['energy'],['energy']
Energy Efficiency,"Closing the issue because of ADIIS. The first example here converges with ADIIS and/or a better SCF guess.; The second example here converges with a suitable basis set (please use augmented functions for anions). With a slight (ADIIS-enabled) modification of the original input file:; ```; molecule LiF {; symmetry c1; 1 1; Li 0.000000000 0.000000000 0.000000000; --; -1 1; F 16.000000000 0.000000000 0.000000000; }; set basis cc-pVDZ; set stability_analysis follow; set reference uhf ; set max_attempts 5; set SCF_INITIAL_START_DIIS_TRANSITION 1e-2. energy('scf'); ```. I converge to a solution with an instability eigenvalue of: -0.000001. Given the choice between using a physical basis set or trying to deal with _that_ instability, I'd rather use the physical basis set.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1433#issuecomment-1156915793:551,energy,energy,551,https://psicode.org,https://github.com/psi4/psi4/issues/1433#issuecomment-1156915793,1,['energy'],['energy']
Energy Efficiency,"Commenting out an extra cmake line fixes the `coreNone` to `core.so`. Basic, but works. ```; >>> (1.3.x) ll stage/lib/psi4/; total 25704; -rwxr-xr-x. 1 psilocaluser psilocaluser 26286096 Nov 1 16:43 core.so; drwxr-xr-x. 7 psilocaluser psilocaluser 4096 Nov 1 15:58 driver; -rw-r--r--. 1 psilocaluser psilocaluser 5898 Nov 1 15:08 extras.py; -rw-r--r--. 1 psilocaluser psilocaluser 2934 Nov 1 14:50 header.py; -rw-r--r--. 1 psilocaluser psilocaluser 3693 Nov 1 15:08 __init__.py; -rw-r--r--. 1 psilocaluser psilocaluser 1144 Nov 1 16:43 metadata.py; drwxrwxr-x. 2 psilocaluser psilocaluser 4096 Nov 1 16:14 __pycache__; drwxrwxr-x. 2 psilocaluser psilocaluser 4096 Nov 1 15:20 tests; ```; ```; >>> (1.3.x) stage/bin/psi4 ../tests/tu1-h2o-energy/input.dat ; 	SCF energy........................................................PASSED; ```; ```; >>> (1.3.x) git diff; diff --git a/psi4/src/CMakeLists.txt b/psi4/src/CMakeLists.txt; index da11518..b287b0d 100644; --- a/psi4/src/CMakeLists.txt; +++ b/psi4/src/CMakeLists.txt; @@ -134,6 +134,6 @@ message(STATUS ""Psi4 rpath: ${psi4_RPATH}""); set_target_properties(core PROPERTIES PREFIX ""${PYTHON_MODULE_PREFIX}"" # for python module; OUTPUT_NAME core; EXPORT_NAME core; - SUFFIX ""${PYTHON_MODULE_EXTENSION}"" # for python module; + #SUFFIX ""${PYTHON_MODULE_EXTENSION}"" # for python module; INSTALL_RPATH ""${psi4_RPATH}""; BUILD_WITH_INSTALL_RPATH ON); diff --git a/psi4/src/create_new_plugin.cc b/psi4/src/create_new_plugin.cc; index 3734a7b..6f2bde2 100644; --- a/psi4/src/create_new_plugin.cc; +++ b/psi4/src/create_new_plugin.cc; @@ -32,6 +32,7 @@; #include <regex>; #include <sstream>; #include <string>; +#include <iterator>; ; #include ""psi4/psi4-dec.h""; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2656#issuecomment-1299120848:737,energy,energy,737,https://psicode.org,https://github.com/psi4/psi4/issues/2656#issuecomment-1299120848,2,['energy'],['energy']
Energy Efficiency,"Communicating with Daniel, the challenge is that the solver somehow was sticking to a symmetry solution inherent in the molecule, this while a no symmetry solution was requested. I would expect a symmetry broken solution if I tell the calculation to assume a symmetry lower than possible (assuming there is a lower energy solution in the symmetry broken case). > On Dec 5, 2017, at 4:46 PM, Lori A. Burns <notifications@github.com> wrote:; > ; > FYI, @wadejong. Are you more concerned with accessing the symmetry-broken sol'n (perhaps through geometry tweaks or stability analysis) or with it being the default sol'n?; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub, or mute the thread.; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/875#issuecomment-349492637:315,energy,energy,315,https://psicode.org,https://github.com/psi4/psi4/issues/875#issuecomment-349492637,1,['energy'],['energy']
Energy Efficiency,Compute both gradient and energy,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2878:26,energy,energy,26,https://psicode.org,https://github.com/psi4/psi4/issues/2878,1,['energy'],['energy']
Energy Efficiency,"Conceptual questions before I start a proper review: is it possible to have a J and K algorithm where implementing the two _in a single algorithm_ is more efficient than implementing both in a mix-and-match fashion? If so, how are going to take advantage of the efficiency gains from combining them?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2762#issuecomment-1302399200:155,efficient,efficient,155,https://psicode.org,https://github.com/psi4/psi4/pull/2762#issuecomment-1302399200,1,['efficient'],['efficient']
Energy Efficiency,Confirmed this bug. The CI DIPOLE and CI QUADROPOLE is exactly zero. Probably not getting set in the code. . Energy is correct.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/126#issuecomment-121706906:109,Energy,Energy,109,https://psicode.org,https://github.com/psi4/psi4/issues/126#issuecomment-121706906,1,['Energy'],['Energy']
Energy Efficiency,"Confirmed to also be broken on `1.2a1.dev508` which is pre-DFHelper and pre-gau2grid. Psi's `molinstance.Z(atomindex)` returns nuclear charge (so `0.0` for ghosts), not atomic number (as one might think from the function name), so I can see room for programming error there. But I'm not seeing anywhere that CAM is singled out from other functional, so I share your confusion.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/900#issuecomment-360582523:135,charge,charge,135,https://psicode.org,https://github.com/psi4/psi4/issues/900#issuecomment-360582523,1,['charge'],['charge']
Energy Efficiency,"Consider the following input file:; ```; molecule = geometry(""""""; H; H 1 1.0 ; """"""). set basis sto-3g. wfn = energy('b3lyp', return_wfn=True)[1]; assert isinstance(wfn, core.RHF). c1_molecule = molecule.clone(); c1_molecule.reset_point_group('c1'); c1_molecule.fix_orientation(True); c1_molecule.fix_com(True); c1_molecule.update_geometry(); c1_basis = core.BasisSet.build(c1_molecule, ""ORBITAL"", core.get_global_option('BASIS'), quiet=True). new_wfn = wfn.c1_deep_copy(c1_basis); ```. The computation crashed with an error message about the functional being ""unpolarized for UV reference."" The problem is on [this line](https://github.com/psi4/psi4/blob/c57375a3f02b6b339e028516ea44c6911c2e9e22/psi4/src/psi4/libscf_solver/hf.cc#L271). The reference is RHF, not RKS, so the if-statement makes the wrong choice.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2335:109,energy,energy,109,https://psicode.org,https://github.com/psi4/psi4/issues/2335,1,['energy'],['energy']
Energy Efficiency,"Consider the following input file:; ```; molecule h2o {; symmetry c1; 0 1 ; O; H 1 0.957119; H 1 0.957119 2 104.225; }. set {; basis cc-pVDZ; freeze_core true; pair_energies_print true; cachelevel 1; }. energy('ccsd'); energy('ccsd'); ```. The second time the MP2 orbital energies are printed, they use the CCSD values. This is because the MP2 values are initialized from the [tau amplitudes](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/cc/ccenergy/pair_energies.cc#L69), but those initialize to the values from the first computation. I attempted to fix this by changing the line in question to read amplitudes from the DPD file ""tauIjAb (MP2)"", but this caused a test failure for low values of `cachelevel`, as the MP2 amplitudes are not saved, but the CCSD amplitudes were, for reasons that are unclear to me. The correct fix is also unclear to me.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2457:203,energy,energy,203,https://psicode.org,https://github.com/psi4/psi4/issues/2457,2,['energy'],['energy']
Energy Efficiency,"Consider the following input file:; ```; molecule {; O; H 1 1.0 ; H 1 1.0 2 104.5; }. set scf_type pk; set basis 6-31+G(d); set r_convergence 12. energy, wfn = energy('hf', return_wfn = True); NBOWriter(wfn).write('input.47'); ```. This is the NBO test case, except I have replaced the basis set with a Pople basis. When I run the produced input file through NBO, the result I get does not match QChem. The fault is with Psi. Just look at the unphysical energy gap in the d NAOs:; ```; 15 O 1 dxy Ryd( 3d) 0.00000 0.22545; 16 O 1 dxz Ryd( 3d) 0.00196 0.22862; 17 O 1 dyz Ryd( 3d) 0.00518 0.52493; 18 O 1 dx2y2 Ryd( 3d) 0.00125 2.36883; 19 O 1 dz2 Ryd( 3d) 0.00227 2.02191; ```. For comparison, QChem gives; ```; 15 O 1 dxy Ryd( 3d) 0.00000 2.02907; 16 O 1 dxz Ryd( 3d) 0.00518 2.71710; 17 O 1 dyz Ryd( 3d) 0.00196 2.05762; 18 O 1 dx2y2 Ryd( 3d) 0.00125 2.36883; 19 O 1 dz2 Ryd( 3d) 0.00227 2.02191; ```. I suspect the error has to do with Pople basis sets being defined in cartesians and not spherical. This is the only reason I can think of for agreement with QChem being basis-set dependent, and it also agrees nicely with the fact that ""Input basis functions are not normalized; fixed"" appears in the Psi-NBO output file. While I'll likely end up fixing this, this is very low on my priority list. If anybody else wants to take this, feel free. Just post here.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1698:146,energy,energy,146,https://psicode.org,https://github.com/psi4/psi4/issues/1698,3,['energy'],['energy']
Energy Efficiency,"Consider the following simple input file:; ```; molecule { ; symmetry c1; 0 2; C ; N 1 r1 . r1 = 1.17; }. set reference uhf ; set diis_start 3; set stability_analysis follow; energy('hf/cc-pvdz'); ```. Stability analysis gives ; ```; => Iterations <=. Iter Converged Subspace Residual; DLU 1 0 1 6.419E-01; DLU 2 0 2 3.750E-01; DLU 3 0 3 2.147E-01; DLU 4 0 4 1.520E-01; DLU 5 0 5 8.829E-02; DLU 6 0 6 2.804E-02; DLU 7 0 7 5.664E-03; DLU 8 0 8 2.645E-03; DLU 9 0 9 6.334E-04; DLU 10 0 10 1.096E-04; DLU 11 0 11 1.377E-05; DLU 12 0 12 3.046E-06; DLU 13 1 13 4.870E-07. DLUSolver converged. Wavefunction stable under totally symmetric rotations.; Lowest totally symmetric eigenvalue: 0.136742; Lowest UHF->UHF stability eigenvalues:; A 0.136742; ```. If you add symmetry, you get; ```; => Iterations <=. Iter Converged Subspace Residual; DLU 1 0 1 2.389E-01; DLU 2 0 2 8.290E-02; DLU 3 0 3 5.100E-02; ```; ...; ```; DLU 79 0 13 2.402E-05; DLU 80 0 3 2.963E-06; DLU 81 0 4 3.426E-06; DLU 82 1 5 8.990E-07. DLUSolver converged. Wavefunction stable under totally symmetric rotations.; Lowest totally symmetric eigenvalue: -0.000000; Lowest UHF->UHF stability eigenvalues:; B2 -0.000000 B1 -0.000000 A2 -0.000000 A1 0.110020; ```. For reference, the conventional integral analysis gives lowest eigenvalues of `B2 0.136642 B1 0.136642 A2 0.163586 A1 0.163586`, so the `0.110020` number is simply _wrong_. Of course, the real fix for this issue is #1005, but I call Roberto saying that symmetry and DF integrals weren't working in TD-DFT using the new solvers either. Time for me to do more yak shaving, then.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2122:175,energy,energy,175,https://psicode.org,https://github.com/psi4/psi4/issues/2122,1,['energy'],['energy']
Energy Efficiency,"Consider the following:; ```; molecule {; O; H 1 1.0 ; H 1 1.0 2 104.5; }. set maxiter 2; energy(""scf/cc-pvdz""); set guess sadno; energy(""scf/cc-pvdz""); ```. The second run does not use the new guess type, but the guess type will update if the absurdly low `set maxiter` is removed.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2458:90,energy,energy,90,https://psicode.org,https://github.com/psi4/psi4/issues/2458,2,['energy'],['energy']
Energy Efficiency,"Constrained optimizations are so often poorly (overly) interpreted and; erratic (dependent on initial guess, finite steps, ...) in their behavior; that I have never invested much time into them. It would not surprise me; if there were a problem with them in PSI4. However, I don't understand the; point of your first plot. The HF energies of the structures are fine, but; the MM ones are way too high? Or are these plots of different structures?. On Thu, Mar 23, 2017 at 7:06 PM, Chaya Stern <notifications@github.com>; wrote:. > First, your initial geometry has a dihedral of 180, but your initial step; > is 0, so that's an enormous perturbation to introduce through constraints;; > setting start_angle = 181.0; >; > I also added symmetry c1 to the molecule definition section, to make sure; > weird things don't happen as the symmetry changes.; >; > I had done both of these things too (Sorry, I probably should've posted; > that too) and while the optimizations did converge (although not for all; > structures), the structures were still of very high energy when compared to; > the molecular mechanics energy of the optimized structure. When I generated; > the starting structures outside of psi4, the molecular mechanics energies; > were much closer to the QM energies (as it should be since the parameters; > were fit to reproduce this scan); >; > Here; > <https://github.com/ChayaSt/torsionfit/blob/ddg/examples/butane/torsion_scans/psi4_archive/Psi4_QM_MM_comparison.pdf>; > is a figure comparing the QM and MM energies from structures generated with; > psi4; > Here; > <https://github.com/ChayaSt/torsionfit/blob/ddg/examples/butane/torsion_scans/psi4_archive/Pymol_scan_comparison.pdf>; > is one comparing QM and MM energies from structures generated outside of; > psi4.; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/647#issuecomment-288896856>, or mute; > the thread; > <https://git",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/647#issuecomment-288899031:1056,energy,energy,1056,https://psicode.org,https://github.com/psi4/psi4/issues/647#issuecomment-288899031,2,['energy'],['energy']
Energy Efficiency,"Continuation of #2012 . Users report large errors with the default frozen core settings because the ""core"" orbitals we freeze are at the energy of ""valence"" orbitals. (simply put). Valuable comments from other issue:; https://github.com/psi4/psi4/issues/2012#issuecomment-702870857; https://github.com/psi4/psi4/issues/2012#issuecomment-702811354. Possibly we want what `freeze_core -2` does for all alkali metals?; Same for the earth alkali?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2343:137,energy,energy,137,https://psicode.org,https://github.com/psi4/psi4/issues/2343,1,['energy'],['energy']
Energy Efficiency,"Cool, glad to see these updates. Thanks for pinging me about the naming. I don't have a strong preference for POL vs IND. I suppose being; consistent with IND is a good thing. Does it make sense to alias these; variables so either version works? Might be less confusing for people; consulting the EFP docs. I don't really like EFP_AI_XXX. I do like pre-pending with EFP so that all; EFP keywords start with that. But AI connotes Artificial Intelligence more; easily than ab initio, which I assume it's supposed to mean. I think I; like QM better. (EFP_QM_XXX). This makes sense in a QM/MM context, which; this basically is (EFP being a very advanced MM method). Additionally, I'm not sure the docs are not totally clear... I'm not; totally sure what this means:. /*- Do include polarization energy term in EFP computation? (QMEFP_POL c.; v1.1) -*/. Is this the polarization of the EFP by the QM region, or the polarization; of the QM region by the EFP?. On Tue, May 1, 2018 at 10:38 AM, Lori A. Burns <notifications@github.com>; wrote:. > @CDSherrill <https://github.com/CDSherrill>, you might want the; > opportunity to weigh in on this commit; > <https://github.com/psi4/psi4/pull/993/commits/609a84f64a50e5dee8728fcaa9a19cfaebffb4c2>,; > as it involves keyword names for EFP and our compromise between SAPT-like; > and libefp-like. Please see top post of PR for discussion.; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/pull/993#issuecomment-385686547>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AC9QdlhxccTVCdSWeK_EOxZgrE6MEQvnks5tuHNogaJpZM4TsPv1>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/993#issuecomment-385707749:791,energy,energy,791,https://psicode.org,https://github.com/psi4/psi4/pull/993#issuecomment-385707749,1,['energy'],['energy']
Energy Efficiency,"Cool, no worries - convincing the scientific community to accept ARM as normal will be a slog in every field, but it seems like the direction the world is going. There are real energy efficiency arguments for ditching x86, as I'm sure you know, and it's likely that hyperscalers will try to promote ARM more and more.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3198#issuecomment-2285262248:177,energy,energy,177,https://psicode.org,https://github.com/psi4/psi4/issues/3198#issuecomment-2285262248,1,['energy'],['energy']
Energy Efficiency,"Correction (I have a very bad cold at the moment so my mind is even less reliable than usual):; The spherical harmonics expressed in terms of cartesians in the th transformation matrix in gdma.f90 are not normalized to unity but they should be orthogonal with respect to integration over a sphere. Note that the x^i y^j z^k are not the normalized v(i,j,k) of Schlegel and Frisch but literal products of powers of x, y and z.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1574#issuecomment-472388875:403,power,powers,403,https://psicode.org,https://github.com/psi4/psi4/issues/1574#issuecomment-472388875,1,['power'],['powers']
Energy Efficiency,"Correction to the above: ; You can converge the max MO gradient for that example upon fixing of #1143, if you are willing to go through many iterations, including several where the gradient is effectively unchanged. See steps 27-32 for one of many, many examples. Note that due to this, the previous input reported energy convergence in the 10th decimal place, when careful convergence shows it is not even converged to the 8th.; ```; Iter E_total DE RMS MO Grad MAX MO Grad RMS T2 ; ---- --------------- ---------- ----------- ----------- ---------- ; 1 -74.6982915209 -5.23e-04 3.51e-03 8.93e-03 1.79e-04 ; 2 -74.6983423996 -5.09e-05 1.67e-03 4.17e-03 3.54e-05 ; 3 -74.6983595520 -1.72e-05 1.00e-03 2.68e-03 2.02e-05 ; 4 -74.6983666105 -7.06e-06 6.72e-04 1.69e-03 1.02e-05 ; 5 -74.6983696889 -3.08e-06 4.49e-04 1.09e-03 6.05e-06 ; 6 -74.6983714517 -1.76e-06 3.21e-04 8.17e-04 6.97e-06 ; 7 -74.6983719578 -5.06e-07 3.01e-04 7.10e-04 3.32e-06 ; 8 -74.6983718807 7.71e-08 2.62e-04 6.15e-04 1.69e-06 ; 9 -74.6983718914 -1.07e-08 2.90e-04 6.78e-04 4.24e-07 ; 10 -74.6983718846 6.82e-09 2.89e-04 6.75e-04 6.90e-08 ; 11 -74.6983718499 3.47e-08 3.11e-04 7.23e-04 2.75e-07 ; 12 -74.6983717213 1.29e-07 3.74e-04 8.64e-04 8.61e-07 ; 13 -74.6983721102 -3.89e-07 1.12e-04 2.83e-04 3.81e-06 ; 14 -74.6983721230 -1.27e-08 1.45e-04 3.69e-04 7.65e-07 ; 15 -74.6983721226 3.91e-10 1.45e-04 3.69e-04 8.53e-08 ; 16 -74.6983721232 -6.62e-10 1.44e-04 3.66e-04 5.95e-08 ; 17 -74.6983721249 -1.62e-09 1.43e-04 3.63e-04 1.28e-08 ; 18 -74.6983721237 1.19e-09 1.44e-04 3.66e-04 1.20e-08 ; 19 -74.6983721440 -2.03e-08 1.22e-04 3.12e-04 1.67e-07 ; 20 -74.6983721946 -5.06e-08 7.60e-05 1.77e-04 8.39e-07 ; 21 -74.6983721957 -1.12e-09 8.62e-05 2.01e-04 1.88e-07 ; 22 -74.6983721958 -1.55e-11 8.64e-05 2.02e-04 3.63e-08 ; 23 -74.6983721957 9.48e-12 8.65e-05 2.02e-04 1.27e-08 ; 24 -74.6983721957 5.68e-13 8.65e-05 2.02e-04 3.17e-09 ; 25 -74.6983721958 -9.09e-11 8.63e-05 2.01e-04 2.19e-09 ; 26 -74.6983722093 -1.35e-08 5.20e-05 1.2",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1371#issuecomment-450269266:315,energy,energy,315,https://psicode.org,https://github.com/psi4/psi4/issues/1371#issuecomment-450269266,1,['energy'],['energy']
Energy Efficiency,"Could you edit your post to have the right inputs? Right now both cases specify `angstrom` (your zipped inputs are different). > The atomic charge is specified in atomic units, and the coordinates always use the same units as the geometry specification in the regular QM region. Which means your charge sits at different positions in case1/2 since in both you use `x-coordinate = 1.0`. Unless I misunderstand the problem at hand.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1881#issuecomment-625214232:140,charge,charge,140,https://psicode.org,https://github.com/psi4/psi4/issues/1881#issuecomment-625214232,2,['charge'],['charge']
Energy Efficiency,"Could you try running:. ```; scf_energy, scf_wfn = energy('scf', return_wfn=True); energy('dmrg-ci', ref_wfn=scf_wfn); ```. I see this error quite a bit, but it is usually because I forget to use an scf_type that writes the integrals to disk. I am not really confident that this would work, but it is worth a shot. . The other thing you could do is. ```; scf_energy, scf_wfn = energy('scf', return_wfn=True); mints(scf_wfn); energy('dmrg-ci', ref_wfn=scf_wfn); ```. I may have the syntax wrong for the above calls. The main thing you need to do is make sure the integrals are actually written to disk.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/464#issuecomment-244579713:51,energy,energy,51,https://psicode.org,https://github.com/psi4/psi4/issues/464#issuecomment-244579713,4,['energy'],['energy']
Energy Efficiency,"Currently the scf-guess suite only checks final energies, which is simple but also not very useful. There should be a variant of the tests that check the energy of the first iteration, which will tell us if a test gets broken or not.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3040:154,energy,energy,154,https://psicode.org,https://github.com/psi4/psi4/issues/3040,1,['energy'],['energy']
Energy Efficiency,"Currently, PCM settings can not be set via QCEngine using the schema interface, passing a task like this from QCEngine results in an error ; ```python; {'schema_name': 'qcschema_input',; 'schema_version': 1,; 'molecule': Molecule(name='H2O', formula='H2O', hash='941bd29'),; 'driver': 'energy',; 'model': {'method': 'SCF', 'basis': 'sto-3g'},; 'protocols': {'wavefunction': 'orbitals_and_eigenvalues'},; 'keywords': {'scf_type': 'df',; 'pcm_scf_type': 'total',; 'pcm': {'Units': 'Angstrom',; 'Medium': {'SolverType': 'IEFPCM', 'Solvent': 'Water'},; 'Cavity': {'RadiiSet': 'UFF',; 'Type': 'GePol',; 'Scaling': False,; 'Area': 0.3,; 'Mode': 'Implicit'}}}}; ```; as it tries to pass the dictionary of settings to the `core.set_global` function. . Extending the `set_options` function [here](https://github.com/psi4/psi4/blob/5de566ed7d4bf51816c673c4ea1def449e4e8618/psi4/driver/p4util/python_helpers.py#L423) to handle the `pcm` keyword should fix this issue. tagging @loriab following the slack discussion.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1986:286,energy,energy,286,https://psicode.org,https://github.com/psi4/psi4/issues/1986,1,['energy'],['energy']
Energy Efficiency,"Currently, Psi4 supports meta-GGAs that depend on the kinetic energy density. However, some meta-GGA functionals depend on the laplacian of the electron density in addition to or instead of the kinetic energy density. The missing pieces should be added so that also laplacian functionals could be used in Psi4.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1734:62,energy,energy,62,https://psicode.org,https://github.com/psi4/psi4/issues/1734,2,['energy'],['energy']
Energy Efficiency,"Cv 2.981 [cal/(mol K)] 12.472 [J/(mol K)] 0.00475022 [mEh/K]; Rotational Cv 2.981 [cal/(mol K)] 12.472 [J/(mol K)] 0.00475022 [mEh/K]; Vibrational Cv 58.770 [cal/(mol K)] 245.894 [J/(mol K)] 0.09365622 [mEh/K]; Total Cv 64.732 [cal/(mol K)] 270.838 [J/(mol K)] 0.10315665 [mEh/K]; Correction Cv 0.000 [cal/(mol K)] 0.000 [J/(mol K)] 0.00000000 [mEh/K]. Constant pressure heat capacity, Cp; Electronic Cp 0.000 [cal/(mol K)] 0.000 [J/(mol K)] 0.00000000 [mEh/K]; Translational Cp 4.968 [cal/(mol K)] 20.786 [J/(mol K)] 0.00791703 [mEh/K]; Rotational Cp 2.981 [cal/(mol K)] 12.472 [J/(mol K)] 0.00475022 [mEh/K]; Vibrational Cp 58.770 [cal/(mol K)] 245.894 [J/(mol K)] 0.09365622 [mEh/K]; Total Cp 66.719 [cal/(mol K)] 279.152 [J/(mol K)] 0.10632347 [mEh/K]; Correction Cp 0.000 [cal/(mol K)] 0.000 [J/(mol K)] 0.00000000 [mEh/K]. ==> Thermochemistry Energy Analysis <==. Raw electronic energy, E0; Total E0, Electronic energy at well bottom at 0 [K] -1226.44775184 [Eh]. Zero-point energy, ZPE_vib = Sum_i nu_i / 2; Electronic ZPE 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Translational ZPE 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Rotational ZPE 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Vibrational ZPE 164.391 [kcal/mol] 687.812 [kJ/mol] 0.26197380 [Eh] 57496.603 [cm^-1]; Correction ZPE 164.391 [kcal/mol] 687.812 [kJ/mol] 0.26197380 [Eh] 57496.603 [cm^-1]; Total ZPE, Electronic energy at 0 [K] -1226.18577804 [Eh]. Thermal Energy, E (includes ZPE); Electronic E 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Translational E 0.889 [kcal/mol] 3.718 [kJ/mol] 0.00141628 [Eh]; Rotational E 0.889 [kcal/mol] 3.718 [kJ/mol] 0.00141628 [Eh]; Vibrational E 174.027 [kcal/mol] 728.129 [kJ/mol] 0.27732956 [Eh]; Correction E 175.804 [kcal/mol] 735.566 [kJ/mol] 0.28016212 [Eh]; Total E, Electronic energy at 298.15 [K] -1226.16758972 [Eh]. Enthalpy, H_trans = E_trans + k_B * T; Electronic H 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Translational H 1.481 [kcal/mol] 6.197 [",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2297#issuecomment-925160079:6350,energy,energy,6350,https://psicode.org,https://github.com/psi4/psi4/issues/2297#issuecomment-925160079,1,['energy'],['energy']
Energy Efficiency,"D', 'EOM-CC2', 'EOM-CC3', 'EOM-CCSDT']. energies = {method: {state: [] for state in range(1, num_states + 1)} for method in methods_to_try}; wfns = {method: {state: [] for state in range(1, num_states + 1)} for method in methods_to_try}. for bond_length in bond_lengths:; casscf_energies, casscf_wfns = compute_energies(bond_length, num_states, methods_to_try); for method in methods_to_try:; for state in range(1, num_states + 1):; energies[method][state].append(casscf_energies[method][state]); wfns[method][state].append(casscf_wfns[method][state]). return bond_lengths, energies, wfns. # Generate potential energy curves; bond_lengths, energies, wfns = generate_potential_energy_curves(). # Compute ground state energies for plotting; ground_state_energies = [compute_energy(bond_length) for bond_length in bond_lengths]. # Writing data to a file 'PEC_data_CF.csv' for the first excited state; with open('PEC_data_CF.csv', 'w') as f:; f.write('# Bond Length (Angstrom), Ground State Energy (Hartree)\n'); for i, bond_length in enumerate(bond_lengths):; f.write(f'{bond_length:.6f}, {ground_state_energies[i]:.8f}\n'). # Plotting potential energy curves; plt.figure(figsize=(10, 6)); plt.plot(bond_lengths, ground_state_energies, label='Ground State', color='black'); for method in energies:; for state in range(1, num_states + 1):; plt.plot(bond_lengths, energies[method][state], label=f'{method}, State {state}'). plt.xlabel('Bond Length (Angstrom)'); plt.ylabel('Energy (Hartree)'); plt.title('Potential Energy Curves for CF Molecule'); plt.legend(); plt.grid(True); plt.tight_layout(). # Saving the plot as an image file; plt.savefig('potential_energy_curve_CF.png'). # Displaying the plot; plt.show(). Here's one of the error I got after several modifications. Please I need serious help on this right now.; Error computing energies at bond length 1.0: 'NoneType' object has no attribute 'group'; Error computing energies at bond length 1.2: 'NoneType' object has no attribute 'group'; Error ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181#issuecomment-2172329824:3374,Energy,Energy,3374,https://psicode.org,https://github.com/psi4/psi4/issues/3181#issuecomment-2172329824,1,['Energy'],['Energy']
Energy Efficiency,"D: 28503; PSI4DATADIR: /usr/local/psi4/share/psi4; Memory level set to 256.000 MB. ==> Input File <==. --------------------------------------------------------------------------; #! Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. ; # Print; # the path to a trajectory file for visualization; # in Jmol.; # grep '@IRC' on the output to see a nice printout; # of the progress of your IRC computation. molecule h2o2 {; H 0.0000000000 0.9803530335 -0.8498671785; O 0.0000000000 0.6988545188 0.0536419016; O 0.0000000000 -0.6988545188 0.0536419016; H 0.0000000000 -0.9803530335 -0.8498671785; }. # g_convergence needs to be tight for IRCs:; set g_convergence gau_verytight. set {; basis dzp; opt_type irc; geom_maxiter 50; irc_direction backward; }. frequencies('scf'). # Lower point group from C2v to C2; h2o2.reset_point_group('c2'). energy = optimize('scf'). compare_values(-150.8200278868627, energy, 5, ""Energy of last IRC point"") #TEST; --------------------------------------------------------------------------; hessian() will perform analytic frequency computation.; There are an even number of electrons - assuming singlet.; Specify the multiplicity in the molecule input block. *** tstart() called on mrabsence-Ubuntu; *** at Mon Aug 22 01:48:07 2016. ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, and Andy Simmonett; RHF Reference; 1 Threads, 256 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c2v; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; H -0.000000000000 0.980353033500 -0.849954236217 1.007825032070; O -0.000000000000 0.698854518800 0.053554843883 15.994914619560; O 0.000000000000 -0.698854518800 0.053554843883 15.994914619560; H 0.000000000000 -0.980353033500 -0.849954236217 1.007825032070. Running in c",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/463:2047,energy,energy,2047,https://psicode.org,https://github.com/psi4/psi4/issues/463,2,"['Energy', 'energy']","['Energy', 'energy']"
Energy Efficiency,"DCT gradients fail with the traceback below when ROHF starting orbitals are used. The same result is obtained for all DCT functionals w/ analytic gradients (ODC-13, ODC-12, ODC-06, DC-06). The calculation runs fine with UHF starting orbitals. Furthermore identical energies are obtained for the UHF calculation and the ROHF calculation, but the ROHF calculation fails out before computing the gradient. . ``` Molecular point group: c2v; Full point group: C2v. Geometry (in Bohr), charge = 0, multiplicity = 1:. Center X Y Z; ------------ ----------------- ----------------- -----------------; O 0.000000000000 0.000000000000 -0.124297814551; H 0.000000000000 -1.434419280484 0.986348258811; H 0.000000000000 1.434419280484 0.986348258811. Traceback (most recent call last):; File ""/home/mmd01986/anaconda3/envs/psi4/bin/psi4"", line 269, in <module>; exec(content); File ""<string>"", line 31, in <module>; File ""/home/mmd01986/anaconda3/envs/psi4/lib//python3.6/site-packages/psi4/driver/driver.py"", line 638, in gradient; wfn = procedures['gradient'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/mmd01986/anaconda3/envs/psi4/lib//python3.6/site-packages/psi4/driver/procrouting/proc.py"", line 1501, in run_dcft_gradient; grad = derivobj.compute(). RuntimeError:; Fatal Error: PSIO Error; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1532493090788/work/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:. psi::PSIO::read(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::PSIO::read_entry(unsigned long, char const*, char*, unsigned long). Psi4 stopped on: Friday, 18 January 2019 09:58AM; Psi4 wall time for execution: 0:00:01.14. *** Psi4 encountered an error. Buy a developer more coffee!; *** Resources and help at github.com/psi4/psi4.; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1482:480,charge,charge,480,https://psicode.org,https://github.com/psi4/psi4/issues/1482,1,['charge'],['charge']
Energy Efficiency,"DETCI was designed in the old Psi days where each module simply terminated; after it executed. So, something like your example was never envisioned,; and if the user wanted the TPDM, they had to request that in the input; before executing DETCI. DETCI can generate an awful lot of intermediate and; bookkeeping data, which is why all that stuff gets blown away after each; energy call. Do you just want the TPDM on disk? If so you could just set the expert; user option 'tpdm' to 'true'. If you somehow need to be able to form it through this kind of API, then I; don't have an immediate answer other than to say it sounds like Daniel or I; would have to dig into the details. The decode matrix itself is not really; so large and so if that's literally the only problem, maybe it could be; kept around. But I suspect that there is other stuff that would be needed; that isn't being kept. On Fri, Feb 14, 2020 at 1:08 PM Jonathon Misiewicz <notifications@github.com>; wrote:. > The following input file segfaults:; >; > molecule {; > symmetry c1; > H; > H 1 1.0; > }; >; > set basis cc-pvdz; > e, wfn = energy('fci', return_wfn=True); > wfn.form_tpdm(); >; > The issue is that the driver cleans up DETCI after every energy call; > <https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/proc.py#L3579>.; > That cleanup frees the decode matrix; > <https://github.com/psi4/psi4/blob/master/psi4/src/psi4/detci/ciwave.cc#L458>.; > But form_tpdm works by creating a new CI vector; > <https://github.com/psi4/psi4/blob/master/psi4/src/psi4/detci/tpdm.cc#L56>,; > which is set with the decode matrix; > <https://github.com/psi4/psi4/blob/master/psi4/src/psi4/detci/civect.cc#L115>,; > which the driver freed, giving rise to a bad access exception.; >; > So which code is supposed to be responsible for DETCI cleanup? If that's; > the responsibility of procrouting, then form_tpdm is always going to; > segfault, so form_tpdm shouldn't be exposed to Python at all, and the; > user should have the TP",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1812#issuecomment-586421160:373,energy,energy,373,https://psicode.org,https://github.com/psi4/psi4/issues/1812#issuecomment-586421160,1,['energy'],['energy']
Energy Efficiency,"DF used to default for OMP2/OMP3/OMP2.5/OCEPA(0). However, CONV is default for them now due to default mp2_type/mp_type/cepa_type options. I think it would be better to choose DF as default for OO methods since all DF-OO methods have both energy and gradients (RHF and UHF) and significantly faster than conventional ones. @loriab @CDSherrill",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/279:239,energy,energy,239,https://psicode.org,https://github.com/psi4/psi4/issues/279,1,['energy'],['energy']
Energy Efficiency,DF-CASSCF: Diff. Input Wfn. + Same CASSCF Soln. = Diff. Energy,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2119:56,Energy,Energy,56,https://psicode.org,https://github.com/psi4/psi4/issues/2119,1,['Energy'],['Energy']
Energy Efficiency,"DF-CC freaks out when linear dependencies are present, and i tracked the issue to an inconsistency between reference_wavefunction_->nmopi() and reference_wavefunction_->Ca()->coldim(). The latter has the correct value when linear dependencies are removed. . Should nmopi() and Ca()->coldim() be consistent in this case?. Minimal input:; ```; molecule { ; o ; h 1 1.0; h 1 1.0 2 104.5; }. set {; basis 'aug-cc-pvtz'; scf_type df; cc_type df; s_tolerance 1e-3; }; energy('ccsd'); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2120:462,energy,energy,462,https://psicode.org,https://github.com/psi4/psi4/issues/2120,1,['energy'],['energy']
Energy Efficiency,DFOCC's Final Energy Dependent on Whether User Energy Convergence Criteria Met,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1509:14,Energy,Energy,14,https://psicode.org,https://github.com/psi4/psi4/issues/1509,2,['Energy'],['Energy']
Energy Efficiency,DIIS			 |	 @UHF iter 2: -75.38394424152474 -1.75622e-02 7.43115e-03 DIIS; @UHF iter 3: -75.38582621410333 -1.88197e-03 2.33008e-03 DIIS			 |	 @UHF iter 3: -75.38582621410339 -1.88197e-03 2.33008e-03 DIIS; @UHF iter 4: -75.38619478049240 -3.68566e-04 9.29768e-04 DIIS			 |	 @UHF iter 4: -75.38619478049243 -3.68566e-04 9.29768e-04 DIIS; @UHF iter 5: -75.38629447046014 -9.96900e-05 3.08853e-04 DIIS			 |	 @UHF iter 5: -75.38629447046023 -9.96900e-05 3.08853e-04 DIIS; @UHF iter 6: -75.38630883426671 -1.43638e-05 1.16185e-04 DIIS			 |	 @UHF iter 6: -75.38630883426674 -1.43638e-05 1.16185e-04 DIIS; @UHF iter 7: -75.38631113759388 -2.30333e-06 2.55403e-05 DIIS			 |	 @UHF iter 7: -75.38631113759392 -2.30333e-06 2.55403e-05 DIIS; @UHF iter 8: -75.38631121690256 -7.93087e-08 5.57003e-06 DIIS			 |	 @UHF iter 8: -75.38631121690257 -7.93086e-08 5.57003e-06 DIIS; @UHF iter 9: -75.38631122050272 -3.60016e-09 6.77022e-07 DIIS			 |	 @UHF iter 9: -75.38631122050275 -3.60018e-09 6.77022e-07 DIIS; Energy and wave function converged.									 Energy and wave function converged. ==> Post-Iterations <==										 ==> Post-Iterations <==. @Spin Contamination Metric: 4.301100511E-03							 @Spin Contamination Metric: 4.301100511E-03; @S^2 Expected: 7.500000000E-01							 @S^2 Expected: 7.500000000E-01; @S^2 Observed: 7.543011005E-01							 @S^2 Observed: 7.543011005E-01; @S Expected: 5.000000000E-01							 @S Expected: 5.000000000E-01; @S Observed: 5.000000000E-01							 @S Observed: 5.000000000E-01. Orbital Energies [Eh]										 Orbital Energies [Eh]; ---------------------										 ---------------------. Alpha Occupied: 				 Alpha Occupied: . 1A1 -20.635786 2A1 -1.392584 3A1 -0.673509 					 1A1 -20.635786 2A1 -1.392584 3A1 -0.673509 ; 1B2 -0.647734 1B1 -0.561066 							 |	 1B1 -0.647734 1B2 -0.561066 . Alpha Virtual: 				 Alpha Virtual: . 4A1 0.223681 2B2 0.784656 2B1 0.835171 				 |	 4A1 0.223681 2B1 0.784656 2B2 0.835171 ; 5A1 0.887882 6A1 1.122186 7A1 1.471866 					 5A1 0.887882 6A1 1.1,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2264#issuecomment-890681284:14949,Energy,Energy,14949,https://psicode.org,https://github.com/psi4/psi4/pull/2264#issuecomment-890681284,1,['Energy'],['Energy']
Energy Efficiency,"DIIS; @DF-RKS iter 4: -76.33541666733151 -4.32022e-05 7.02182e-05 DIIS; @DF-RKS iter 5: -76.33541734518556 -6.77854e-07 7.73497e-06 DIIS; @DF-RKS iter 6: -76.33541735566205 -1.04765e-08 1.19390e-06 DIIS; @DF-RKS iter 7: -76.33541735595242 -2.90370e-10 2.40194e-07 DIIS. ==> Post-Iterations <==. Orbital Energies (a.u.); -----------------------. Doubly Occupied: . 1A -19.184718 2A -1.000452 3A -0.509499 ; 4A -0.360493 5A -0.281933 . Virtual: . 6A 0.113651 7A 0.212439 8A 0.827371 ; 9A 0.915633 10A 0.937398 11A 0.938267 ; 12A 1.123156 13A 1.234184 14A 1.763048 ; 15A 1.774444 16A 1.811716 17A 2.329295 ; 18A 2.632599 19A 3.611500 . Final Occupation by Irrep:; A ; DOCC [ 5 ]. Energy converged. @DF-RKS Final Energy: -76.33541735595242. => Energetics <=. Nuclear Repulsion Energy = 8.9272515369995578; One-Electron Energy = -122.8414514085261118; Two-Electron Energy = 44.6070248999700425; DFT Exchange-Correlation Energy = -7.0282423843959076; Empirical Dispersion Energy = 0.0000000000000000; PCM Polarization Energy = 0.0000000000000000; EFP Energy = 0.0000000000000000; Total Energy = -76.3354173559524156. Alert: EFP and PCM quantities not currently incorporated into SCF psivars. Properties will be evaluated at 0.000000, 0.000000, 0.000000 Bohr; ==> Properties <==. Properties computed using the SCF density matrix. Nuclear Dipole Moment: (a.u.); X: 14.2834 Y: 0.0000 Z: -23.5602. Electronic Dipole Moment: (a.u.); X: -15.1523 Y: -0.0000 Z: 23.6231. Dipole Moment: (a.u.); X: -0.8689 Y: -0.0000 Z: 0.0628 Total: 0.8712. Dipole Moment: (Debye); X: -2.2085 Y: -0.0000 Z: 0.1597 Total: 2.2143. Saving occupied orbitals to File 180. *** tstop() called on machtiani1 at Wed Feb 10 19:35:42 2016; Module time:; user time = 23.90 seconds = 0.40 minutes; system time = 1.02 seconds = 0.02 minutes; total time = 4 seconds = 0.07 minutes; Total time:; user time = 23.90 seconds = 0.40 minutes; system time = 1.02 seconds = 0.02 minutes; total time = 4 seconds = 0.07 minutes; [Error prints before oeprop",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/240#issuecomment-182660528:8225,Energy,Energy,8225,https://psicode.org,https://github.com/psi4/psi4/issues/240#issuecomment-182660528,1,['Energy'],['Energy']
Energy Efficiency,"DIIS; @DF-UHF iter 8: -0.49762403116031 -7.77156e-16 2.10910e-10 DIIS; @DF-UHF iter 9: -0.49762403116032 -8.88178e-16 2.91582e-11 DIIS; @DF-UHF iter 10: -0.49762403116032 -6.66134e-16 1.10373e-14 DIIS; Energy and wave function converged. ==> Post-Iterations <==. @Spin Contamination Metric: 0.000000000E+00; @S^2 Expected: 7.500000000E-01; @S^2 Observed: 7.500000000E-01; @S Expected: 5.000000000E-01; @S Observed: 5.000000000E-01. Orbital Energies [Eh]; ---------------------. Alpha Occupied: . 1A -0.497624 . Alpha Virtual: . 2A 0.048719 3A 0.066612 4A 0.066612 ; 5A 0.098792 6A 0.253872 7A 0.387743 ; 8A 0.387743 9A 0.427498 10A 1.213680 ; 11A 3.852115 . Beta Occupied: . . Beta Virtual: . 1A 0.020894 2A 0.058417 3A 0.068354 ; 4A 0.068354 5A 0.183800 6A 0.269157 ; 7A 0.391375 8A 0.391375 9A 0.451441 ; 10A 1.378124 11A 3.853058 . Final Occupation by Irrep:; A ; DOCC [ 0 ]; SOCC [ 1 ]. @DF-UHF Final Energy: -0.49762403116032. => Energetics <=. Nuclear Repulsion Energy = 0.0000000000000000; One-Electron Energy = -0.4976240311603163; Two-Electron Energy = 0.0000000000000000; Total Energy = -0.4976240311603163. UHF NO Occupations:; HONO-0 : 1 A 1.0000000; LUNO+0 : 2 A 0.0000000; LUNO+1 : 3 A 0.0000000; LUNO+2 : 4 A 0.0000000; LUNO+3 : 5 A 0.0000000. Computation Completed. //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//; // SCF //; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<//. => Loading Basis Set <=. Name: AUG-CC-PVDZ; Role: ORBITAL; Keyword: BASIS; atoms 1 entry LI line 68 file /home/filip/software/psi4-1.4rc/share/psi4/basis/aug-cc-pvdz.gbs ; atoms 2 entry H line 40 file /home/filip/software/psi4-1.4rc/share/psi4/basis/aug-cc-pvdz.gbs . ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith; UHF Reference; 1 Threads, 976 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c1; Full point group: C_inf_v. Geometry (in Angstrom), charge = 0, multiplicity = 2",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1830:5229,Energy,Energy,5229,https://psicode.org,https://github.com/psi4/psi4/issues/1830,1,['Energy'],['Energy']
Energy Efficiency,"DISP ENERGY"": -0.26658499, #TEST; > ""CURRENT ENERGY"": -0.01126250} #TEST; > ; > Eref_h_fixed = {""SAPT ELST ENERGY"": -0.10197193, #TEST; > ""SAPT EXCH ENERGY"": 0.36569812, #TEST; > ""SAPT IND ENERGY"": -0.00840370, #TEST; > ""SAPT DISP ENERGY"": -0.26605283, #TEST; > ""CURRENT ENERGY"": -0.01073034} #TEST; > ; > molecule dimer {; > Ne; > --; > Ar 1 6.5; > units bohr; > }; > ; > set {; > basis aug-cc-pvdz; > scf_type df; > sapt_dft_grac_shift_a 0.203293; > sapt_dft_grac_shift_b 0.138264; > }; > ; > # No hybrid kernel & no exch-disp scaling & no deltaHF; > set SAPT_DFT_DO_DHF False; > set SAPT_DFT_DO_HYBRID False; > set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; > energy('sapt(dft)', molecule=dimer); > for k, v in Eref_nh.items(): #TEST; > if k in [""SAPT IND ENERGY"", ""CURRENT ENERGY""]:; > ref = (v - DHF) / 1000.0; > else:; > ref = v / 1000.0; > compare_values(ref, psi4.variable(k), 6, ""!hyb, xd=none, !dHF: "" + k) #TEST; > ; > # No hybrid kernel & no exch-disp scaling; > set SAPT_DFT_DO_DHF True; > set SAPT_DFT_DO_HYBRID False; > set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; > energy('sapt(dft)', molecule=dimer); > for k, v in Eref_nh.items(): #TEST; > compare_values(v / 1000.0, psi4.variable(k), 6, ""!hyb, xd=none, dHF: "" + k) #TEST; > ; > # Hybrid kernel & exch-disp scaling (DISP); > set SAPT_DFT_DO_HYBRID True; > set SAPT_DFT_EXCH_DISP_SCALE_SCHEME disp; > energy('sapt(dft)', molecule=dimer); > for k, v in Eref_h_disp.items(): #TEST; > compare_values(v / 1000.0, psi4.variable(k), 6, ""hyb, xd=disp, dHF: "" + k) #TEST; > ; > # Hybrid kernel & exch-disp scaling (FIXED); > set SAPT_DFT_DO_HYBRID True; > set SAPT_DFT_EXCH_DISP_SCALE_SCHEME fixed ; > set SAPT_DFT_EXCH_DISP_FIXED_SCALE 0.770; > energy('sapt(dft)', molecule=dimer); > for k, v in Eref_h_fixed.items(): #TEST; > compare_values(v / 1000.0, psi4.variable(k), 6, ""hyb, xd=fixed, dHF: "" + k) #TEST; > ```; > ; > * I think it should be clear from the output file what exch-disp scheme/scale is applied. So perhaps add a couple lines to t",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2481#issuecomment-1284653967:2491,energy,energy,2491,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1284653967,1,['energy'],['energy']
Energy Efficiency,"DZ; Role: ORBITAL; Keyword: BASIS; atoms 1 entry O line 198 file /Users/vandanrevanur/anaconda3/envs/psi4_env_36/share/psi4/basis/cc-pvdz.gbs ; atoms 2-3 entry H line 22 file /Users/vandanrevanur/anaconda3/envs/psi4_env_36/share/psi4/basis/cc-pvdz.gbs . ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith; RHF Reference; 1 Threads, 476 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c2v; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; O 0.000000000000 0.000000000000 -0.065775570547 15.994914619570; H 0.000000000000 -0.759061990794 0.521953018286 1.007825032230; H 0.000000000000 0.759061990794 0.521953018286 1.007825032230. Running in c2v symmetry. Rotational constants: A = 27.26297 B = 14.51533 C = 9.47217 [cm^-1]; Rotational constants: A = 817323.21126 B = 435158.60141 C = 283968.37536 [MHz]; Nuclear repulsion = 9.168193296424349. Charge = 0; Multiplicity = 1; Electrons = 10; Nalpha = 5; Nbeta = 5. ==> Algorithm <==. SCF Algorithm Type is DF.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is SAD.; Energy threshold = 1.00e-06; Density threshold = 1.00e-06; Integral threshold = 1.00e-12. ==> Primary Basis <==. Basis Set: CC-PVDZ; Blend: CC-PVDZ; Number of shells: 12; Number of basis functions: 24; Number of Cartesian functions: 25; Spherical Harmonics?: true; Max angular momentum: 2. => Loading Basis Set <=. Name: (CC-PVDZ AUX); Role: JKFIT; Keyword: DF_BASIS_SCF; atoms 1 entry O line 221 file /Users/vandanrevanur/anaconda3/envs/psi4_env_36/share/psi4/basis/cc-pvdz-jkfit.gbs ; atoms 2-3 entry H line 51 file /Users/vandanrevanur/anaconda3/envs/psi4_env_36/share/psi4/basis/cc-pvdz-jkfit.gbs . Process finished with exit code 139 (interrupted by signal 11: SIGSEGV); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2930:2091,Charge,Charge,2091,https://psicode.org,https://github.com/psi4/psi4/issues/2930,2,"['Charge', 'Energy']","['Charge', 'Energy']"
Energy Efficiency,"D]; X: 0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000. *** tstop() called on scychon-OptiPlex-7010 at Wed Jun 13 11:12:27 2018; Module time:; user time = 0.92 seconds = 0.02 minutes; system time = 0.03 seconds = 0.00 minutes; total time = 1 seconds = 0.02 minutes; Total time:; user time = 0.92 seconds = 0.02 minutes; system time = 0.03 seconds = 0.00 minutes; total time = 1 seconds = 0.02 minutes; Ne: PBE...........................................................PASSED. *** tstart() called on scychon-OptiPlex-7010; *** at Wed Jun 13 11:12:27 2018. => Loading Basis Set <=. Name: CC-PVDZ; Role: ORBITAL; Keyword: BASIS; atoms 1 entry NE line 258 file /root/psi4/build/stage/share/psi4/share/psi4/basis/cc-pvdz.gbs. ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel Smith; RKS Reference; 1 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: d2h; Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass; ------------ ----------------- ----------------- ----------------- -----------------; NE 0.000000000000 0.000000000000 0.000000000000 19.992440175420. Running in d2h symmetry. Rotational constants: A = ************ B = ************ C = ************ [cm^-1]; Rotational constants: A = ************ B = ************ C = ************ [MHz]; Nuclear repulsion = 0.000000000000000. Charge = 0; Multiplicity = 1; Electrons = 10; Nalpha = 5; Nbeta = 5. ==> Algorithm <==. SCF Algorithm Type is DIRECT.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is CORE.; Energy threshold = 1.00e-06; Density threshold = 1.00e-06; Integral threshold = 0.00e+00. ==> Primary Basis <==. Basis Set: CC-PVDZ; Blend: CC-PVDZ; Number of shells: 6; Number of basis function: 14; Number of Cartesian functions: 15; Spherical Harmonics?: true; Max angular momentum: 2. ==> DFT Potential <==. => Composite Functional: BLYP <=. BLYP GGA Excha",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1038#issuecomment-396997775:8961,charge,charge,8961,https://psicode.org,https://github.com/psi4/psi4/issues/1038#issuecomment-396997775,1,['charge'],['charge']
Energy Efficiency,"D]; X: 0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000. *** tstop() called on scychon-OptiPlex-7010 at Wed Jun 13 11:12:28 2018; Module time:; user time = 0.92 seconds = 0.02 minutes; system time = 0.02 seconds = 0.00 minutes; total time = 1 seconds = 0.02 minutes; Total time:; user time = 1.84 seconds = 0.03 minutes; system time = 0.05 seconds = 0.00 minutes; total time = 2 seconds = 0.03 minutes; Ne: BLYP..........................................................PASSED. *** tstart() called on scychon-OptiPlex-7010; *** at Wed Jun 13 11:12:28 2018. => Loading Basis Set <=. Name: CC-PVDZ; Role: ORBITAL; Keyword: BASIS; atoms 1 entry NE line 258 file /root/psi4/build/stage/share/psi4/share/psi4/basis/cc-pvdz.gbs. ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel Smith; RKS Reference; 1 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: d2h; Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass; ------------ ----------------- ----------------- ----------------- -----------------; NE 0.000000000000 0.000000000000 0.000000000000 19.992440175420. Running in d2h symmetry. Rotational constants: A = ************ B = ************ C = ************ [cm^-1]; Rotational constants: A = ************ B = ************ C = ************ [MHz]; Nuclear repulsion = 0.000000000000000. Charge = 0; Multiplicity = 1; Electrons = 10; Nalpha = 5; Nbeta = 5. ==> Algorithm <==. SCF Algorithm Type is DIRECT.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is CORE.; Energy threshold = 1.00e-06; Density threshold = 1.00e-06; Integral threshold = 0.00e+00. ==> Primary Basis <==. Basis Set: CC-PVDZ; Blend: CC-PVDZ; Number of shells: 6; Number of basis function: 14; Number of Cartesian functions: 15; Spherical Harmonics?: true; Max angular momentum: 2. ==> DFT Potential <==. => Composite Functional: FT97 <=. FT97 GGA Excha",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1038#issuecomment-396997775:13995,charge,charge,13995,https://psicode.org,https://github.com/psi4/psi4/issues/1038#issuecomment-396997775,1,['charge'],['charge']
Energy Efficiency,"Dear @dgasmith: currently, optimisations with VV10, LC-VV10 and B97M-V fail due to the lack of the analytical gradients for VV10. This can be, of course, circumvented by passing `dertype=""energy""` to the optimize command. However, it's not necessary to do this for wB97M-V and wB97M-X - they do numerical gradients automatically. I was wondering if it's possible to set the default for VV10 etc. in the meantime?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/897#issuecomment-361602213:188,energy,energy,188,https://psicode.org,https://github.com/psi4/psi4/pull/897#issuecomment-361602213,1,['energy'],['energy']
Energy Efficiency,"Dear Anthony,. Thank you for the detailed explanation. In terms of spherical harmonics in Psi4, there are no hard coded terms anywhere as far as I can remember: all integrals are transformed on the fly, using a general regular solid harmonic generating routine. Therefore, G and H functions are both handled by the same arbitrary-order transformation code. Your illness-addled brain is still more powerful than mine, so apologies if I'm wrong here, but I think I have confirmed my error diagnosis from last night. I found my old Mathematica code for generating (real) regular solid harmonics and can exactly match the [L=5 transformation coefficients](https://git.uis.cam.ac.uk/x/ch-stone/u/ajs1/gdma.git/blob/HEAD:/src/gdma.f90#l275), as well as the the coefficients listed in Table 1 of the GDMA manual. However, for the L<5 coefficients in gdma.f90 my RSH generating code does not match. I can get exact agreement for these lower angular momentum terms by adding a factor of; ![image](https://user-images.githubusercontent.com/201881/54278407-a47bc180-4568-11e9-8875-e9ea637c3c1b.png); to the generating code. Therefore it appears that there is an inconsistency in the Cartesian normalization convention between the {s,p,d,f,g} and the {h} functions in gdma.f90. I hope this helps,. Best regards,. Andy",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1574#issuecomment-472403253:397,power,powerful,397,https://psicode.org,https://github.com/psi4/psi4/issues/1574#issuecomment-472403253,1,['power'],['powerful']
Energy Efficiency,"Dear Developers, . I compiled successfully psi4-0.5 but obtain an error when running psi4 :. ```; Psi4: An Open-Source Ab Initio Electronic Structure Package; Psi4 (no tag) Driver. Git: Rev {detached?} 8e01b1f . J. M. Turney, A. C. Simmonett, R. M. Parrish, E. G. Hohenstein,; F. A. Evangelista, J. T. Fermann, B. J. Mintz, L. A. Burns, J. J. Wilke,; M. L. Abrams, N. J. Russ, M. L. Leininger, C. L. Janssen, E. T. Seidl,; W. D. Allen, H. F. Schaefer, R. A. King, E. F. Valeev, C. D. Sherrill,; and T. D. Crawford, WIREs Comput. Mol. Sci. 2, 556-565 (2012); (doi: 10.1002/wcms.93). Additional Contributions by; A. E. DePrince, M. Saitow, U. Bozkaya, A. Yu. Sokolov; -----------------------------------------------------------------------. Psi4 started on: Thu Feb 18 17:21:00 2016. Process ID: 63254; PSI4DATADIR: /home/LUCA/psi-master/psi4public/lib; Memory level set to 256.000 MB; ```. ==> Input File <==. ---; # ! Sample UHF/6-31G*\* CH2 computation. memory 250 mb. molecule ch2 {; 0 3; C ; H 1 R; H 1 R 2 A. R = 1.075; A = 133.93; }. set basis 6-31G**; set reference uhf; energy ('scf'). ---. Memory set to 250.000 MiB by Python script. An error has occurred Py-side; Traceback:; <class 'Boost.Python.ArgumentError'>: Python argument types in; psi4.scf(NoneType, NoneType); did not match C++ signature:; scf(boost::shared_ptrpsi::Wavefunction, _object_, _object_): File ""<string>"", line 29, in <module>. File ""/home/LUCA/psi-master/psi4public/lib/python/driver.py"", line 576, in energy; procedures['energy'][lowername](lowername, **kwargs). File ""/home/LUCA/psi-master/psi4public/lib/python/proc.py"", line 932, in run_scf; scf_helper(name, **kwargs). File ""/home/LUCA/psi-master/psi4public/lib/python/proc.py"", line 1138, in scf_helper; e_scf = psi4.scf(precallback, postcallback). Best wishes; LUCA",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/266:1077,energy,energy,1077,https://psicode.org,https://github.com/psi4/psi4/issues/266,3,['energy'],['energy']
Energy Efficiency,"Dear Developers, . I try to calculate excited states of H2 molecule using this input file : . molecule H2 { ; H -0.3836975 0.0000000 0.0000000 ; H 0.3836975 0.0000000 0.0000000; units ang; }. set basis aug-cc-pvqz ; set scf_type df; #set guess sad; set reference rhf; set e_convergence 1e-06; set d_convergence 1e-06; set ints_tolerance 1e-08. set freeze_core true; set roots_per_irrep [4,4,4,4,4,4,4,4]; set maxiter 100000. property('eom-ccsd', properties=['oscillator_strength']); ---------------------------------------------------------------------------------------------; However, for some of excited states i obtain 0 eV !. Excitation Energy OS RS RS Einstein A; 	State (eV) (cm^-1) (nm) (au) (l,au) (v,au) (s^-1); 	 1 Ag 12.964 104563.7 95.6 0.476427 0.0000 0.0000 0.0000 0.000000E+00; 	 2 Ag 16.771 135268.5 73.9 0.616329 0.0000 0.0000 0.0000 0.000000E+00; 	 3 Ag 18.773 151418.0 66.0 0.689911 0.0000 0.0000 0.0000 0.000000E+00; 	 4 Ag 25.910 208979.2 47.9 0.952179 0.0000 0.0000 0.0000 0.000000E+00; 	 1B1g 16.855 135946.4 73.6 0.619417 0.0000 0.0000 0.0000 0.000000E+00; 	 2B1g 19.351 156077.5 64.1 0.711142 0.0000 0.0000 0.0000 0.000000E+00; 	 3B1g 19.458 156942.8 63.7 0.715084 0.0000 0.0000 0.0000 0.000000E+00; 	 4B1g 19.513 157382.5 63.5 0.717087 0.0000 0.0000 0.0000 0.000000E+00; 	 1B2g 0.000 0.0 287864613790050.6 0.000000 0.0000 0.0000 0.0000 0.000000E+00; 	 2B2g 0.000 0.0 168701352313695.2 0.000000 0.0000 0.0000 0.0000 0.000000E+00; 	 3B2g 0.000 0.0 111616374313896.7 0.000000 0.0000 0.0000 0.0000 0.000000E+00; 	 4B2g 0.000 0.0 95015600179548.7 0.000000 0.0000 0.0000 0.0000 0.000000E+00; 	 1B3g 0.000 0.0 276652168953733.3 0.000000 0.0000 0.0000 0.0000 0.000000E+00; 	 2B3g 0.000 0.0 202756770901990.0 0.000000 0.0000 0.0000 0.0000 0.000000E+00; 	 3B3g 0.000 0.0 135821991365655.0 0.000000 0.0000 0.0000 0.0000 0.000000E+00; 	 4B3g 0.000 0.0 114346140595797.4 0.000000 0.0000 0.0000 0.0000 0.000000E+00. 	 1 Au 0.000 0.0 300704927659592.6 0.000000 0.0000 0.0000 0.0000 0.00000",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/521:642,Energy,Energy,642,https://psicode.org,https://github.com/psi4/psi4/issues/521,1,['Energy'],['Energy']
Energy Efficiency,"Dear Developers,. I would like to perform counterpoise-corrected DBOC computations at the CCSD level, using psi4-1.9.1. For this purpose, I wrote the following input:. ```; molecule dimer {; 0 1; N 1.608094757 -0.561155368 0.000000000; N 2.389700473 0.210989439 0.000000000; --; 0 1; N -2.389700473 -0.210989439 0.000000000; N -1.608094757 0.561155368 0.000000000; }. set globals {; cfour_dboc on; basis cc-pvdz; d_convergence 11; }. e_cp = energy('c4-ccsd',bsse_type='cp', return_total_data=True); ```. When I tried to run this input, I received a segmentation fault, without any further information. If I replace `c4-ccsd` with `c4-hf`, then there occurs another segmentation fault, which is more verbose than the previous one:. `QcdbException: Psi4/Cfour gradients with ghost atoms no longer supported. Use QCEngine or QCDB where they are.`. There is a simple warning, as well, which I am not sure what to do with:. `Using qcdb.align.B787instead ofqcelemental.molutil.B787 is deprecated, and as soon as 1.5 it will stop working`. Could you please help me how to modify this input for a successful execution?. Thank you in advance for your help. Best regards,. Roland",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3217:441,energy,energy,441,https://psicode.org,https://github.com/psi4/psi4/issues/3217,1,['energy'],['energy']
Energy Efficiency,"Dear Jonathon,. The idea is that ones orbitals are optimized there is no need to rotate MOs further. Hence, just semi-canolicalize MOs and compute energies. However, after original implementation there has been lot of revisions in convergence criteria. I think during these modifications the equality of Lagrangian and usual energy is somewhat slightly broken. I will update DFOCC module in this week and push it to Lori's repo. During this update I will fix this issue. @JonathonMisiewicz . Best regards,; Ugur.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1509#issuecomment-459946532:325,energy,energy,325,https://psicode.org,https://github.com/psi4/psi4/issues/1509#issuecomment-459946532,1,['energy'],['energy']
Energy Efficiency,"Dear PSI4 developers. I use psi4 MOLDEN output (along with ORCA, QCHEM, etc.) as input for CASINO QMC program https://vallico.net/casinoqmc/ . For very simple system as Be, B, C atoms well proven that if we add 2s->2p excitation to the ground state than we improve wfn quality. PSI4, ORCA and other code gives me MOLDEN orbitals and coefficients for most important determinants. I can take it and check with CASINO QMC if energy of this multi-determinant configuration is the same as in conventional QMC codes. For the B output from Psi4 it isn't so.; Psi4 determinant coeffs is; ```; The 20 most important determinants:. * 1 0.972153 ( 0, 0) 2AX 3AA.; * 2 0.165709 ( 4, 3) 3AA 5AX.; * 3 0.165709 ( 2, 2) 3AA 4AX.; ```. but should be (as in the ORCA and other programs):; ```; The 20 most important determinants:. * 1 0.972153 ( 0, 0) 2AX 3AA.; * 2 -0.165709 ( 4, 3) 3AA 5AX.; * 3 -0.165709 ( 2, 2) 3AA 4AX.; ```; And if I change sign by hand in PSI4 output i get right energy in CASINO QMC for this multi-determinant configuration, same as PAS4 Total MCSCF energy. Can You check whether the signs of coefficients are correct. Best, Vladimir. PS Git: Rev {HEAD} add49b9. PPS; ```; memory 2 Gb. molecule b {; 0 2; symmetry c1; B 0.000000000000 0.000000000000 0.000000000000; }. set {; basis cc-pVQZ; reference rohf; restricted_docc [ 1 ]; active [ 4 ]; }. cas_e, cas_wfn = energy('casscf', return_wfn=True); molden(cas_wfn, 'molden.dat'); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/796:422,energy,energy,422,https://psicode.org,https://github.com/psi4/psi4/issues/796,4,['energy'],['energy']
Energy Efficiency,"Dear Psi4 developer, ; I'm using v1.4rc2. I find very convenient to use the QCSchema for submitting my `energy` calculations, but it is not clear to me what is currently implemented for this input method.; Using `{""basis"": ""aug-cc-pv[tq]z"", ""method"": ""MP2""}`, results in the error; ```; npsi4.driver.qcdb.exceptions.BasisSetNotFound: BasisSet::construct: ; Unable to find a basis set for atom 1 for key BASIS among:; Shell Entries: ['N']; Basis Sets: [('AUG-CC-PV[TQ]Z', 'AUG-CC-PV[TQ]Z', None)]; ```; which makes me think that CompeteBasisSet (CBS) extrapolations are not yet implemented.; My goal would be to submit even more advanced extrapolation protocols like `mp2/cc-pv[tq]z + D:ccsd(t)/cc-pvdz`.; Is there a way to do this with the current implementation of the QCSchema? Or do you see it possible in a near-future release?. Thank you very much for your help!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2198:104,energy,energy,104,https://psicode.org,https://github.com/psi4/psi4/issues/2198,1,['energy'],['energy']
Energy Efficiency,"Dear Vladimir,. We have two kind of orbital-optimized (OO) methods now. The old codes are using conventional integrals and they can be called by energy('conv-omp2'), energy('omp3'), energy('omp2.5'), and energy('ocepa). All these methods are available in the OCC module and all methods of the OCC module take advantages of real Abelian point group symmetry. Recently, I have introduced a new module for OO methods as well as standard MP and CC methods, which is called as DFOCC module. In DFOCC module, we have density-fitting and Cholesky decomposition approximations for molecular integrals. Hence, the OO methods of DFOCC module are df-omp2, cd-omp2, df-omp3, cd-omp3, df-omp2.5, and cd-omp2.5. Df/cd-ocepa methods are coming soon. These methods can be called by energy('df-omp2'), energy('df-omp3'), energy('df-omp2.5'), and cd versions can be run similarly. All methods of DFOCC module has energy and gradients (RHF and UHF). Please note that when you asked df and cd methods you should set ""scf_type df"" and ""scf_type cd"", respectively. Further, DFOCC module does NOT use the molecular symmetry. All DFOCC methods are greatly faster than their conventional counterparts. For a discussion of timing for OMP2, OO-RI-MP2 of orca, and our new DF/CD-OMP2 you may want to read our recent paper, J. Chem. Theory Comput., 2014, 10 (6), pp 2371–2378 (DOI:10.1021/ct500231c). Finally, please note when you set energy('omp2') the df-omp2 code runs, for old code you should use energy('conv-omp2'). For more details please refer to our manual section OCC/DFOCC. . As a conclusion, do not worry about the symmetry if your main concern is the efficiency . The present DF/CD-OO methods are greatly faster than the conventional OO methods. Best regards,; Ugur Bozkaya",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/186#issuecomment-152699151:145,energy,energy,145,https://psicode.org,https://github.com/psi4/psi4/issues/186#issuecomment-152699151,10,['energy'],['energy']
Energy Efficiency,"Dear all, . I started to use psi4 last week, to run the sapt calculation, but maybe I am doing something wrong because the results are not what I expected. I run the system H2O-H2 using the following input:. #! SAPT0 aug-cc-pVQZ computation of the h2o-h2 interaction energy,. molecule {; 0 1; O	-0.00497112320277 0.00000000000 -0.00324242498004 ; H	-0.00635802533704 0.00000000000 1.80786893363963 ; H	1.74732087529567 0.00000000000 -0.46100056491475 ; --; 0 1; H	-5.31435149256189 0.00000000000 -3.57188290957646 ; H	-4.14192596170216 0.00000000000 -2.81859073952601 ; units angstrom; }. set {; basis aug-cc-pvqz; guess sad; scf_type df; puream true; print 1; basis_guess true; }. energy('sapt2+3(ccd)'). Eelst = psi4.get_variable(""SAPT ELST ENERGY""); Eexch = psi4.get_variable(""SAPT EXCH ENERGY""); Eind = psi4.get_variable(""SAPT IND ENERGY""); Edisp = psi4.get_variable(""SAPT DISP ENERGY""); ET = psi4.get_variable(""SAPT0 TOTAL ENERGY""). And I got the following results:. Total HF -0.23285527 [mEh] -0.14611889 [kcal/mol] -0.61136150 [kJ/mol]; Total SAPT0 -0.31237291 [mEh] -0.19601697 [kcal/mol] -0.82013509 [kJ/mol]; Total SAPT2 -0.22375789 [mEh] -0.14041020 [kcal/mol] -0.58747633 [kJ/mol]; Total SAPT2+ -0.21063053 [mEh] -0.13217266 [kcal/mol] -0.55301046 [kJ/mol]; Total SAPT2+(3) -0.18566214 [mEh] -0.11650476 [kcal/mol] -0.48745596 [kJ/mol]; Total SAPT2+3 -0.18495027 [mEh] -0.11605805 [kcal/mol] -0.48558693 [kJ/mol]; Total SAPT2+(CCD) -0.19261506 [mEh] -0.12086778 [kcal/mol] -0.50571084 [kJ/mol]; Total SAPT2+(3)(CCD) -0.16764667 [mEh] -0.10519988 [kcal/mol] -0.44015633 [kJ/mol]; Total SAPT2+3(CCD) -0.16693480 [mEh] -0.10475317 [kcal/mol] -0.43828731 [kJ/mol]. Special recipe for scaled SAPT0 (see Manual):; Electrostatics sSAPT0 -0.21426853 [mEh] -0.13445554 [kcal/mol] -0.56256203 [kJ/mol]; Exchange sSAPT0 0.00071398 [mEh] 0.00044803 [kcal/mol] 0.00187454 [kJ/mol]; Induction sSAPT0 -0.01930071 [mEh] -0.01211138 [kcal/mol] -0.05067402 [kJ/mol]; Dispersion sSAPT0 -0.07951765 [mEh] -0.0",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/938:267,energy,energy,267,https://psicode.org,https://github.com/psi4/psi4/issues/938,7,"['ENERGY', 'energy']","['ENERGY', 'energy']"
Energy Efficiency,"Dear all,. I am new at psi4, and I want to run sapt using the mid-bonds. I pick up the sapt3 example to test it, but I got the following error . Memory set to 953.674 MiB by Python driver.; SAPT does not make use of molecular symmetry, further calculations in C1 point group. Traceback (most recent call last):; File ""/opt/psi4/bin/psi4"", line 248, in <module>; exec(content); File ""<string>"", line 43, in <module>; File ""/opt/psi4/lib//python3.6/site-packages/psi4/driver/driver.py"", line 460, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/opt/psi4/lib//python3.6/site-packages/psi4/driver/procrouting/proc.py"", line 3151, in run_sapt; raise ValidationError('SAPT requires active molecule to have 2 fragments, not %s.' % (nfrag)). ValidationError: SAPT requires active molecule to have 2 fragments, not 3. Can somebody tell me what I am doing wrong?. Thanks",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/936:498,energy,energy,498,https://psicode.org,https://github.com/psi4/psi4/issues/936,2,['energy'],['energy']
Energy Efficiency,"Dear all,. I am trying to make FCI/aug-cc-pVTZ calculation on a fluoride-anion. The input file is:. memory 48000 mb; molecule h2o {; -1 1; F .0000000000 .0000000000 -.000000000; units bohr; }; set globals {; basis aug-cc-pVTZ; icore 0; }; thisenergy = energy('fci'). I am running it on a node with 12 cores and 48 GiB of RAM and gets the following:. ..........; There are 1370754 alpha strings; There are 1370754 beta strings; CI space contains 8 blocks. CI space requires 234872686232 determinants. Check SCF Energy from 1- and 2-electron integrals. SCF Energy (ref): -99.4508070223; Nuclear repulsion energy: 0.0000000000; One-electron energy: -143.9965314821; Two-electron energy: 44.5457244598; Dropped core energy: 0.0000000000; Total electronic energy: -99.4508070223; Total SCF energy: -99.4508070223. CI vector/subblock length = 29726587396; init_array: trouble allocating memory; size = 29726587396. If the length is in bytes, then it seems, that I need ~30 GiB, while I have 48. What is the reason, why the job fails? What can I do to make it work?. Thank you in advance. Best regards,; Michael Medvedev. ---. The full output:; -----------------------------------------------------------------------; Psi4: An Open-Source Ab Initio Electronic Structure Package; Psi4 (no tag) Driver. ```; Git: Rev {(no tag)}. J. M. Turney, A. C. Simmonett, R. M. Parrish, E. G. Hohenstein,; F. A. Evangelista, J. T. Fermann, B. J. Mintz, L. A. Burns, J. J. Wilke,; M. L. Abrams, N. J. Russ, M. L. Leininger, C. L. Janssen, E. T. Seidl,; W. D. Allen, H. F. Schaefer, R. A. King, E. F. Valeev, C. D. Sherrill,; and T. D. Crawford, WIREs Comput. Mol. Sci. 2, 556-565 (2012); (doi: 10.1002/wcms.93). Additional Contributions by; A. E. DePrince, M. Saitow, U. Bozkaya, A. Yu. Sokolov; -----------------------------------------------------------------------. Psi4 started on: Fri Jan 8 13:56:46 2016. Process ID: 11885; PSI4DATADIR: ./lib; Memory level set to 256.000 MB; ```. ==> Input File <==. ---; # ! 6-31G H",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/204:252,energy,energy,252,https://psicode.org,https://github.com/psi4/psi4/issues/204,9,"['Energy', 'energy']","['Energy', 'energy']"
Energy Efficiency,"Dear all,. I try to obtain molecular orbitals for a converged calculation. I use the following input:; ```python; set guess sad; set scf_type df; set reference rhf. psi4_io.set_specific_path(180, './'); psi4_io.set_specific_retention(180, True). energy('scf'); ```; and start psi4 with the ""-m"" flag. However, I do not get this file. Is there another command/way that I have to use?. thanks,; Christopher",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/918:246,energy,energy,246,https://psicode.org,https://github.com/psi4/psi4/issues/918,1,['energy'],['energy']
Energy Efficiency,"Dear developers,. I am currently running SA-CASSCF calculations on the formaldimine molecule. I am particularly interested by the determinant decomposition of the ground and first excited state of the molecule (singlet symmetry). However, I think I have noticed a pb concerning the sign of the determinants in the output. First, I give you my INPUT in python : . pes_origin = [1.498047, 1.066797, 0.987109, 118.359375]; variables = pes_origin[:] + [90, 90]; psi4.geometry(; """"""; N; C 1 {0}; H 2 {1} 1 {3}; H 2 {1} 1 {3} 3 180; H 1 {2} 2 {4} 3 {5}; symmetry c1"""""".format(*variables) ); ; psi4.set_options({ 'basis': 'cc-pvdz',; 'DETCI_FREEZE_CORE' : False,; 'reference': 'RHF',; 'num_roots': 2,; 'frozen_docc':[0],; 'restricted_docc': [6],; 'active': [3],; 'restricted_uocc': [11], ; 'frozen_uocc': [23],; 'mcscf_maxiter': 1000, ; 'avg_states' : [ 0, 1],; 'avg_weights' : [ 0.5, 0.5 ]; }); ; sacasscf, sacasscf_wfn = psi4.energy('casscf',return_wfn=True); E0_sacasscf = psi4.variable('CI ROOT 0 TOTAL ENERGY'); E1_sacasscf = psi4.variable('CI ROOT 1 TOTAL ENERGY') . Then, I give you from the OUTPUT FILE the decomposition I obtain : . *******************************************************************; *******************************************************************; ==> MCSCF root 0 information <==. MCSCF Root 0 energy = -93.931448649953467. Active Space Natural occupation numbers:. A 2.000000 A 1.000000 A 1.000000. The 9 most important determinants:. * 1 0.691216 ( 0, 1) 7AX 8AA 9AB ; * 2 0.691216 ( 1, 0) 7AX 8AB 9AA ; * 3 -0.149064 ( 1, 2) 7AA 8AB 9AX ; * 4 -0.149064 ( 2, 1) 7AB 8AA 9AX ; * 5 0.000000 ( 0, 0) 7AX 8AX ; * 6 0.000000 ( 0, 2) 7AA 8AX 9AB ; * 7 0.000000 ( 2, 0) 7AB 8AX 9AA ; * 8 -0.000000 ( 2, 2) 8AX 9AX ; * 9 -0.000000 ( 1, 1) 7AX 9AX . ==> MCSCF root 1 information <==. MCSCF Root 1 energy = -93.902550337672878. Active Space Natural occupation numbers:. A 1.999537 A 1.843676 A 0.156787. The 9 most important determinants:. * 1 -0.887365 ( 0, 0) 7AX 8AX ; * 2 -0.2911",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2008:921,energy,energy,921,https://psicode.org,https://github.com/psi4/psi4/issues/2008,1,['energy'],['energy']
Energy Efficiency,"Dear developers,. I am interested in wave functions and electron densities of molecules solvated by PCM. However, the current implementation of PCM in PSI4 (Psi4 0.3.131 Driver, Git: Rev {master} 7a8bad0 dirty) provides inconsistent electronic properties (e.g. dipole moment) for restricted and unrestricted HF/DFT methods. Obviously, both approaches should converge to the same values for the closed shell systems, but in both cases, the final wave functions and density matrices are perhaps wrong. Dipole moments calculated by electric field perturbation method differ from dipoles calculated from SCF density matrices. It can be illustrated by running the attached input.; [input.txt](https://github.com/psi4/psi4public/files/72199/input.txt). I am not expert in PCM methods or in the QM codes, but I suspect this piece of code in hf.cc:. ```; 540 #ifdef HAVE_PCMSOLVER; 541 if(pcm_enabled_) {; 542 // Prepare the density; 543 SharedMatrix D_pcm;; 544 if(same_a_b_orbs()) {; 545 D_pcm = Da_;; 546 D_pcm->scale(2.0); // PSI4's density doesn't include the occupation; 547 }; 548 else {; 549 D_pcm = Da_;; 550 D_pcm->add(Db_);; 551 }; 552 ; 553 // Add the PCM potential to the Fock matrix; 554 SharedMatrix V_pcm;; 555 V_pcm = hf_pcm_->compute_V();; 556 if(same_a_b_orbs()) Fa_->add(V_pcm);; 557 else {; 558 Fa_->add(V_pcm);; 559 Fb_->add(V_pcm);; 560 }; 561 }; 562 #endif; ```. If these lines are disabled, the dipole moments calculated from density matrices agree with those from finite electric field perturbation calculations. Moreover, convergence for restricted and unrestricted HF/DFT is restored, but the polarization energy and total energy reported by psi4 is not affected. Perhaps some double-counting of PCM contributions takes place in the code. I would be very grateful if this part of the code is reviewed by developers. Regards,. Jiri Vymetal",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/198:1626,energy,energy,1626,https://psicode.org,https://github.com/psi4/psi4/issues/198,2,['energy'],['energy']
Energy Efficiency,"Dear devs,. I've been running some dihedral-constrained optimizations on capped dipeptides, and a small percentage of them fail. Examples are attached. In the first example, the optimizer takes a huge step and ends up in a crazy geometry. I worked around it by setting `intrafrag_step_limit 0.1`. Unfortunately I lost the .intco file, but the output file shows that two dihedrals have been constrained. https://dl.dropboxusercontent.com/u/5381783/psi4-opt/optimize.dat; https://dl.dropboxusercontent.com/u/5381783/psi4-opt/optimize.out; https://dl.dropboxusercontent.com/u/5381783/psi4-opt/optimize.xyz. In the second example, the energy oscillates with periodicity 3. . https://dl.dropboxusercontent.com/u/5381783/psi4-opt/optimize-1.dat; https://dl.dropboxusercontent.com/u/5381783/psi4-opt/optimize-1.out; https://dl.dropboxusercontent.com/u/5381783/psi4-opt/optimize-1.xyz; https://dl.dropboxusercontent.com/u/5381783/psi4-opt/optimize-1.THR.intco. I'll try to work around this by using `step_type nr`, but thought it was worth reporting nonetheless. Thanks,; - Lee-Ping Wang (Postdoc, Stanford)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/18:631,energy,energy,631,https://psicode.org,https://github.com/psi4/psi4/issues/18,1,['energy'],['energy']
Energy Efficiency,"Delta E Res. Norm Conv?; 1 0.3243015959 -1.66e-08 3.58e-06 N; 2 0.3285655309 1.79e-09 9.85e-06 N; Iter=32 L=8 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016034 7.49e-09 2.77e-06 N; 2 0.3285655292 -1.67e-09 8.87e-06 N; Iter=33 L=10 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016058 2.42e-09 1.52e-06 N; 2 0.3285655299 6.91e-10 7.75e-06 N; Iter=34 L=12 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016030 -2.78e-09 9.27e-07 Y; 2 0.3285655320 2.15e-09 6.23e-06 N; Iter=35 L=13 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016033 2.53e-10 9.26e-07 Y; 2 0.3285655298 -2.26e-09 4.11e-06 N; Iter=36 L=14 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016026 -6.98e-10 9.41e-07 Y; 2 0.3285655295 -2.30e-10 3.70e-06 N; Iter=37 L=15 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016027 1.05e-10 9.64e-07 Y; 2 0.3285655298 2.71e-10 3.50e-06 N; Iter=38 L=16 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016031 4.09e-10 9.77e-07 Y; 2 0.3285655296 -2.10e-10 3.48e-06 N; Iter=39 L=17 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016034 2.70e-10 8.97e-07 Y; 2 0.3285655295 -6.61e-11 3.51e-06 N; Iter=40 L=18 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016049 1.54e-09 8.13e-07 Y; 2 0.3285655298 2.62e-10 3.34e-06 N; Iter=41 L=19 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016050 1.05e-10 7.91e-07 Y; 2 0.3285655298 -2.41e-11 3.31e-06 N; Iter=42 L=20 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016056 5.33e-10 7.73e-07 Y; 2 0.3285655297 -9.36e-11 3.26e-06 N; Iter=43 L=21 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016050 -5.70e-10 7.66e-07 Y; 2 0.3285655297 1.62e-11 3.26e-06 N; Iter=44 L=22 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016043 -7.30e-10 7.68e-07 Y; 2 0.3285655297 -2.33e-11 3.26e-06 N; Iter=45 L=23 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016047 4.83e-10 7.73e-07 Y; 2 0.3285655297 -1.39e-12 3.26e-06 N; Collapsing to only 2 vector(s). Procedure converged for 1 root(s). Algorithm failure: No vectors could be added, though not all",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/603#issuecomment-279097344:2150,Energy,Energy,2150,https://psicode.org,https://github.com/psi4/psi4/issues/603#issuecomment-279097344,1,['Energy'],['Energy']
Energy Efficiency,"Delta E Res. Norm Conv?; 1 0.3243016058 2.42e-09 1.52e-06 N; 2 0.3285655299 6.91e-10 7.75e-06 N; Iter=34 L=12 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016030 -2.78e-09 9.27e-07 Y; 2 0.3285655320 2.15e-09 6.23e-06 N; Iter=35 L=13 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016033 2.53e-10 9.26e-07 Y; 2 0.3285655298 -2.26e-09 4.11e-06 N; Iter=36 L=14 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016026 -6.98e-10 9.41e-07 Y; 2 0.3285655295 -2.30e-10 3.70e-06 N; Iter=37 L=15 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016027 1.05e-10 9.64e-07 Y; 2 0.3285655298 2.71e-10 3.50e-06 N; Iter=38 L=16 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016031 4.09e-10 9.77e-07 Y; 2 0.3285655296 -2.10e-10 3.48e-06 N; Iter=39 L=17 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016034 2.70e-10 8.97e-07 Y; 2 0.3285655295 -6.61e-11 3.51e-06 N; Iter=40 L=18 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016049 1.54e-09 8.13e-07 Y; 2 0.3285655298 2.62e-10 3.34e-06 N; Iter=41 L=19 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016050 1.05e-10 7.91e-07 Y; 2 0.3285655298 -2.41e-11 3.31e-06 N; Iter=42 L=20 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016056 5.33e-10 7.73e-07 Y; 2 0.3285655297 -9.36e-11 3.26e-06 N; Iter=43 L=21 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016050 -5.70e-10 7.66e-07 Y; 2 0.3285655297 1.62e-11 3.26e-06 N; Iter=44 L=22 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016043 -7.30e-10 7.68e-07 Y; 2 0.3285655297 -2.33e-11 3.26e-06 N; Iter=45 L=23 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016047 4.83e-10 7.73e-07 Y; 2 0.3285655297 -1.39e-12 3.26e-06 N; Collapsing to only 2 vector(s). Procedure converged for 1 root(s). Algorithm failure: No vectors could be added, though not all roots converged!. EOM CCSD R0 for root 0 = 0.00000000000. Final Energetic Summary for Converged Roots of Irrep B1g; Excitation Energy Total Energy; (eV) (cm^-1) (au) (au); EOM State 1 8.825 71176.0 0.3243016047 -231.251027700721. Largest components of ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/603#issuecomment-279097344:2403,Energy,Energy,2403,https://psicode.org,https://github.com/psi4/psi4/issues/603#issuecomment-279097344,1,['Energy'],['Energy']
Energy Efficiency,Delta E Res. Norm Conv?; 1 0.3243016099 4.24e-09 2.38e-05 N; 2 0.3285655293 5.00e-16 6.43e-07 Y; Iter=25 L=20 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016127 2.80e-09 1.56e-05 N; 2 0.3285655293 -3.89e-16 6.43e-07 Y; Iter=26 L=21 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016234 1.06e-08 9.79e-06 N; 2 0.3285655293 -1.11e-16 6.43e-07 Y; Iter=27 L=22 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016107 -1.26e-08 5.76e-06 N; 2 0.3285655293 2.78e-16 6.43e-07 Y; Iter=28 L=23 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016097 -1.01e-09 3.48e-06 N; 2 0.3285655293 -1.11e-16 6.43e-07 Y; Iter=29 L=24 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016125 2.73e-09 3.28e-06 N; 2 0.3285655293 -5.55e-17 6.43e-07 Y; Iter=30 L=4 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016125 8.40e-14 3.28e-06 N; 2 0.3285655291 -2.62e-10 9.81e-06 N; Iter=31 L=6 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243015959 -1.66e-08 3.58e-06 N; 2 0.3285655309 1.79e-09 9.85e-06 N; Iter=32 L=8 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016034 7.49e-09 2.77e-06 N; 2 0.3285655292 -1.67e-09 8.87e-06 N; Iter=33 L=10 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016058 2.42e-09 1.52e-06 N; 2 0.3285655299 6.91e-10 7.75e-06 N; Iter=34 L=12 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016030 -2.78e-09 9.27e-07 Y; 2 0.3285655320 2.15e-09 6.23e-06 N; Iter=35 L=13 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016033 2.53e-10 9.26e-07 Y; 2 0.3285655298 -2.26e-09 4.11e-06 N; Iter=36 L=14 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016026 -6.98e-10 9.41e-07 Y; 2 0.3285655295 -2.30e-10 3.70e-06 N; Iter=37 L=15 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016027 1.05e-10 9.64e-07 Y; 2 0.3285655298 2.71e-10 3.50e-06 N; Iter=38 L=16 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016031 4.09e-10 9.77e-07 Y; 2 0.3285655296 -2.10e-10 3.48e-06 N; Iter=39 L=17 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016034 2.70e-10 8.97e-07 Y; 2 0.3285655295 -6.61e-11 3.51e-06 N; I,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/603#issuecomment-279097344:1262,Energy,Energy,1262,https://psicode.org,https://github.com/psi4/psi4/issues/603#issuecomment-279097344,1,['Energy'],['Energy']
Energy Efficiency,Delta E Res. Norm Conv?; 1 0.3243016127 2.80e-09 1.56e-05 N; 2 0.3285655293 -3.89e-16 6.43e-07 Y; Iter=26 L=21 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016234 1.06e-08 9.79e-06 N; 2 0.3285655293 -1.11e-16 6.43e-07 Y; Iter=27 L=22 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016107 -1.26e-08 5.76e-06 N; 2 0.3285655293 2.78e-16 6.43e-07 Y; Iter=28 L=23 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016097 -1.01e-09 3.48e-06 N; 2 0.3285655293 -1.11e-16 6.43e-07 Y; Iter=29 L=24 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016125 2.73e-09 3.28e-06 N; 2 0.3285655293 -5.55e-17 6.43e-07 Y; Iter=30 L=4 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016125 8.40e-14 3.28e-06 N; 2 0.3285655291 -2.62e-10 9.81e-06 N; Iter=31 L=6 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243015959 -1.66e-08 3.58e-06 N; 2 0.3285655309 1.79e-09 9.85e-06 N; Iter=32 L=8 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016034 7.49e-09 2.77e-06 N; 2 0.3285655292 -1.67e-09 8.87e-06 N; Iter=33 L=10 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016058 2.42e-09 1.52e-06 N; 2 0.3285655299 6.91e-10 7.75e-06 N; Iter=34 L=12 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016030 -2.78e-09 9.27e-07 Y; 2 0.3285655320 2.15e-09 6.23e-06 N; Iter=35 L=13 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016033 2.53e-10 9.26e-07 Y; 2 0.3285655298 -2.26e-09 4.11e-06 N; Iter=36 L=14 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016026 -6.98e-10 9.41e-07 Y; 2 0.3285655295 -2.30e-10 3.70e-06 N; Iter=37 L=15 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016027 1.05e-10 9.64e-07 Y; 2 0.3285655298 2.71e-10 3.50e-06 N; Iter=38 L=16 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016031 4.09e-10 9.77e-07 Y; 2 0.3285655296 -2.10e-10 3.48e-06 N; Iter=39 L=17 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016034 2.70e-10 8.97e-07 Y; 2 0.3285655295 -6.61e-11 3.51e-06 N; Iter=40 L=18 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016049 1.54e-09 8.13e-07 Y; 2 0.3285655298 2.62e-10 3.34e-06 N; It,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/603#issuecomment-279097344:1389,Energy,Energy,1389,https://psicode.org,https://github.com/psi4/psi4/issues/603#issuecomment-279097344,1,['Energy'],['Energy']
Energy Efficiency,"Depends on how impatient the user is :) Actually, very nice, example.; Thanks!. On Fri, Apr 12, 2019 at 6:02 PM Lori A. Burns <notifications@github.com>; wrote:. > *still going*; >; > @psi-rking <https://github.com/psi-rking>, here's an example where; > dynamic level 2 might have kicked in a bit early?; >; > base) psilocaluser@bash:psinet:/home/psilocaluser/gits/hrw-quaternary/objdir37: (1.3.x) grep '~' bgobbi_wb97x.out; > --------------------------------------------------------------------------------------------- ~; > Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; > --------------------------------------------------------------------------------------------- ~; > Convergence Criteria 1.00e-06 * 3.00e-04 * o 1.20e-03 * o ~; > --------------------------------------------------------------------------------------------- ~; > 1 -1771.54871790 -1.77e+03 8.23e-03 1.77e-03 o 2.50e-01 2.94e-02 o ~; > 2 -1771.54896434 -2.46e-04 4.20e-03 7.85e-04 o 3.99e-02 7.34e-03 o ~; > 3 -1771.54708256 1.88e-03 1.22e-02 2.75e-03 o 3.09e-02 7.32e-03 o ~; > 4 -1771.54962420 -2.54e-03 1.84e-03 4.35e-04 o 5.76e-02 7.34e-03 o ~; > 5 -1771.54991808 -2.94e-04 6.10e-04 1.42e-04 o 4.66e-02 7.34e-03 o ~; > 6 -1771.54999493 -7.68e-05 5.40e-04 1.21e-04 o 1.40e-02 1.83e-03 o ~; > 7 -1771.55001819 -2.33e-05 4.51e-04 8.25e-05 o 1.89e-02 1.84e-03 o ~; > 8 -1771.55002275 -4.56e-06 3.95e-04 7.58e-05 o 4.60e-03 4.59e-04 o ~; > 9 -1771.55002699 -4.24e-06 3.75e-04 4.74e-05 o 4.74e-03 4.59e-04 o ~; > 10 -1771.55002919 -2.20e-06 3.62e-04 3.71e-05 o 1.53e-02 1.38e-03 o ~; > 11 -1771.55003367 -4.48e-06 3.38e-04 3.16e-05 o 1.53e-02 1.38e-03 o ~; > 12 -1771.55003620 -2.53e-06 3.26e-04 3.22e-05 o 1.56e-02 1.38e-03 o ~; > 13 -1771.55003691 -7.15e-07 * 3.21e-04 3.16e-05 o 3.92e-03 3.44e-04 o ~; > 14 -1771.55003705 -1.33e-07 * 3.23e-04 2.89e-05 o 9.90e-04 * 8.66e-05 o ~; > 15 -1771.55003766 -6.15e-07 * 3.24e-04 2.84e-05 o 2.99e-03 2.58e-04 o ~; > 	Raising dynamic level to 2. ~; > ------------------",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1590#issuecomment-482755167:537,Energy,Energy,537,https://psicode.org,https://github.com/psi4/psi4/issues/1590#issuecomment-482755167,1,['Energy'],['Energy']
Energy Efficiency,"Di Remigio, R. M. Richard, J. F. Gonthier, A. M. James,; H. R. McAlexander, A. Kumar, M. Saitow, X. Wang, B. P. Pritchard,; P. Verma, H. F. Schaefer III, K. Patkowski, R. A. King, E. F. Valeev,; F. A. Evangelista, J. M. Turney, T. D. Crawford, and C. D. Sherrill,; J. Chem. Theory Comput. 13(7) pp 3185--3197 (2017).; (doi: 10.1021/acs.jctc.7b00174). Additional Contributions by; P. Kraus, H. Kruse, M. H. Lechner, M. C. Schieber, R. A. Shaw,; A. Alenaizan, R. Galvelis, Z. L. Glick, S. Lehtola, and J. P. Misiewicz. -----------------------------------------------------------------------. Psi4 started on: Monday, 29 April 2019 07:36PM. Process ID: 6146; Host: molmod00.ugent.be; PSIDATADIR: /home/toon/miniconda3/envs/p4dev/share/psi4; Memory: 500.0 MiB; Threads: 1; ; ==> Input File <==. --------------------------------------------------------------------------; molecule {; H; }. set {; scf_type pk; basis ano-rcc; relativistic x2c; reference uhf; }. energy('hf'); --------------------------------------------------------------------------. *** tstart() called on molmod00.ugent.be; *** at Mon Apr 29 19:36:44 2019. => Loading Basis Set <=. Name: ANO-RCC; Role: ORBITAL; Keyword: BASIS; atoms 1 entry H line 16 file /home/toon/Downloads/jobs/basis/ano-rcc.gbs . ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith; UHF Reference; 1 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: d2h; Geometry (in Angstrom), charge = 0, multiplicity = 2:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; H 0.000000000000 0.000000000000 0.000000000000 1.007825032230. Running in d2h symmetry. Rotational constants: A = ************ B = ************ C = ************ [cm^-1]; Rotational constants: A = ************ B = ************ C = ************ [MHz]; Nuclear repulsion = 0.000000000000000. Cha",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1613#issuecomment-487675807:2076,energy,energy,2076,https://psicode.org,https://github.com/psi4/psi4/issues/1613#issuecomment-487675807,1,['energy'],['energy']
Energy Efficiency,"Diazonium, I believe your assessment is correct and I have little to add here unfortunately. While thread safety in the pthread code has been improved recently, OpenMP is still considered the safer option. (Though you could try a pthread build - ideally of the current ""develop"" branch that should soon become the 0.3.0 release - with USE_SIMPLE_THREADED_LEVEL3=1 which should work around at least some of the remaining bugs.) ; Please create issues for any OpenBLAS bugs you find, ideally with some standalone code that makes it easy to reproduce and track down the problem. I am anything but an expert on multithreading, but at least there are powerful debugging tools available now that simply did not exist when K.Goto wrote; the library that OpenBLAS builds upon. ; (Incidentally my own involvement with OpenBLAS came about through dft as well, though in my case it is condensed matter codes like Elk and Wien2k)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1009#issuecomment-390436926:646,power,powerful,646,https://psicode.org,https://github.com/psi4/psi4/issues/1009#issuecomment-390436926,1,['power'],['powerful']
Energy Efficiency,"Did you compile the code with a Fortran compiler? One is required for using DKH. > On Jul 25, 2015, at 6:07 PM, Hassenky notifications@github.com wrote:; > ; > Are there other ways to deal with Douglas-Kroll-Hess (DKH) Hamiltonian? When running dk input:; > ; > molecule {; > Mg; > }; > set basis aug-cc-pvdz-dk; > set relativistic dkh; > energy('scf'); > ; > I got this error output:; > Traceback (most recent call last):; > File """", line 20, in ; > RuntimeError: DKH is not a valid choice; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/149#issuecomment-124907212:339,energy,energy,339,https://psicode.org,https://github.com/psi4/psi4/issues/149#issuecomment-124907212,1,['energy'],['energy']
Energy Efficiency,Disable CC46 to keep full tests green on 1.2rc1,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1002:32,green,green,32,https://psicode.org,https://github.com/psi4/psi4/pull/1002,1,['green'],['green']
Energy Efficiency,"Discovered on a build of 8db12d6 while investigating [a forum post](http://forum.psicode.org/t/ri-mp2-def2-tzvppd-convergence-issue-for-calculations-with-iodide/1106/5). The user's input file crashes during the MP2 computation with traceback:. ```; Traceback (most recent call last):; File ""/opt/vulcan/opt/vulcan/linux-x86_64/intel-16.0.1/psi4-master-avducsgnonqrcpftiesq432gagal6y7r/bin/psi4"", line 272, in <module>; exec(content); File ""<string>"", line 100, in <module>; File ""/opt/vulcan/opt/vulcan/linux-x86_64/intel-16.0.1/psi4-master-avducsgnonqrcpftiesq432gagal6y7r/lib/psi4/driver/driver.py"", line 431, in energy; return driver_nbody.nbody_gufunc(energy, name, ptype='energy', **kwargs); File ""/opt/vulcan/opt/vulcan/linux-x86_64/intel-16.0.1/psi4-master-avducsgnonqrcpftiesq432gagal6y7r/lib/psi4/driver/driver_nbody.py"", line 225, in nbody_gufunc; component_results = compute_nbody_components(func, method_string, metadata); File ""/opt/vulcan/opt/vulcan/linux-x86_64/intel-16.0.1/psi4-master-avducsgnonqrcpftiesq432gagal6y7r/lib/psi4/driver/driver_nbody.py"", line 411, in compute_nbody_components; current_mol = molecule.extract_subsets(list(pair[0]), ghost). RuntimeError: ; Fatal Error: Coordinates have been set in the wrong order; Error occurred in file: /home/vulcan/vadmin/programs/psi4/psi4/src/psi4/libmints/coordentry.cc on line: 239 ; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::Molecule::operator=(psi::Molecule const&); psi::Molecule::Molecule(psi::Molecule const&); ```. Given that the user's problem is failure for the SCF to converge, I can only assume some change since the 1.2.1 release is at fault. I've been able to get the crash with the following simplified input file:; ```; molecule dimer {; 1 1; C1 0.000000 0.513942 0.000000; N2 0.628754 1.703580 0.000000; H3 0.109407 2.571793 0.000000; H4 1.638743 1.762759 0.000000; N5 -1.342220 0",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1325:615,energy,energy,615,https://psicode.org,https://github.com/psi4/psi4/issues/1325,3,['energy'],['energy']
Energy Efficiency,"Distance on x-axis, energy on y-axis. Calculations done using Psi4 1.7.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2901#issuecomment-1473309599:20,energy,energy,20,https://psicode.org,https://github.com/psi4/psi4/issues/2901#issuecomment-1473309599,1,['energy'],['energy']
Energy Efficiency,"Do you happen to know if there's a lit citation for extrapolating the def2 basis sets or if they need a different extrapolation formula? I know Orca does def2 extrapolations; I've just never looked up how or what procedure they use. I'd defer the -PP fallbacks from this PR. That means changing the basis set compositing which is a huge pain. I'm hoping the MolSSI basisset project can be API-accessed to cover this (very sensible) case. Hand-pieced, other program, or `energy(cbs, ...)` call with calculator spot-checks will do fine for tests. If def2's need their own extrapolation formula, tests should probably check that those default correctly.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/963#issuecomment-381265832:470,energy,energy,470,https://psicode.org,https://github.com/psi4/psi4/pull/963#issuecomment-381265832,1,['energy'],['energy']
Energy Efficiency,"Do you have the equations for reintegrating the kinetic energy density from grid to AO space? I could likely guess, but best to be sure.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1734#issuecomment-541328605:56,energy,energy,56,https://psicode.org,https://github.com/psi4/psi4/issues/1734#issuecomment-541328605,1,['energy'],['energy']
Energy Efficiency,"Doc some changes after the OCC open-heart surgery series of #1789 (series), even up scs treatment between mp2-capable modules. * [ ] test scs, sns(n), sos somewhere on a closed-shell and open-shell; * [ ] even up custom-scs-mp2 commands to dfmp2, cc, maybe dfocc; * [ ] table. | | 2 | o2 | 2.5 | o2.5 | 3 | o3 | lccd | olccd |; | --- | --- | --- | --- | --- | --- | --- | --- | --- |; | plain | y | y | y | y | y | y | y | y |; | scs | y | y | | | y | y | | |; | scs(n) | y | | | | | | | |; | scsvdw | y | | | | | | | |; | sos | y | y | | | | y | | |; | sos-pi | y | | | | | | | |; | custom | y | y | y | y | y | y | y | y | . * [ ] the energy docstring needs to be updated, as does the occ/dfocc manual page, which needed to be updated anyways.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1796:637,energy,energy,637,https://psicode.org,https://github.com/psi4/psi4/issues/1796,1,['energy'],['energy']
Energy Efficiency,"Does the overall energy look sensible when you've got the additional diffuse functions? . I occasionally find that def2-TZVPD converges to some odd state with strange properties (energy, dipole etc). I'd put it down to some form of numerical difficulties as I could usually use a mixed basis of def2-TZVP on some atoms and def2-TZVPD on others and get logical values (identity of which atoms to change was system dependent, but often H is the main culprit).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3135#issuecomment-1954490698:17,energy,energy,17,https://psicode.org,https://github.com/psi4/psi4/issues/3135#issuecomment-1954490698,2,['energy'],['energy']
Energy Efficiency,"Does the singlet cation exhibit the same failure with RHF/SAD? Could be a; bad eigenvalue in the DF metric, though I have traps in for this. Compiling; a fork to check this out. -Rob. On Fri, Apr 29, 2016 at 12:56 PM, Daniel Smith notifications@github.com; wrote:. > The following either gives NaN energy or (positive) 60,000 [Eh] depending; > on MKL version and compile options. All basis sets smaller than aug-cc-pVQZ; > seem to check out, did not try larger.; > ; > molecule mol {; > 0 2; > C -2.83891 -0.84747 -0.20778; > N -2.06959 -0.27604 0.77905; > C -0.85937 -0.82512 0.74757; > N -0.82980 -1.74677 -0.21226; > C -2.05910 -1.77487 -0.83179; > C -2.45490 0.86620 1.59959; > C 0.35903 -2.49473 -0.61265; > F -1.01767 1.46174 -1.11980; > B 0.28985 1.63764 -0.63648; > F 0.23738 1.82826 0.77419; > F 0.89453 2.73957 -1.24020; > F 1.05039 0.46734 -0.88673; > H -0.02604 -0.54755 1.38339; > H -2.27287 -2.45330 -1.64959; > H -3.86751 -0.55086 -0.37733; > H -3.45079 0.68580 2.01748; > H -1.72185 0.98138 2.40249; > H -2.44673 1.75972 0.96603; > H 0.98379 -1.85263 -1.24323; > H 0.91655 -2.78676 0.28358; > H 0.03922 -3.39046 -1.15377; > C 2.81822 0.12352 1.52490; > C 3.26768 -0.78277 0.56145; > H 3.28632 0.11977 2.50813; > H 2.01109 0.81253 1.27433; > N 3.64537 -1.55240 -0.23308; > }; > ; > set {; > basis cc-pVQZ; > scf_type df; > guess gwh; > reference rohf; > }; > ; > energy('SCF'); > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/371",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/371#issuecomment-215879353:298,energy,energy,298,https://psicode.org,https://github.com/psi4/psi4/issues/371#issuecomment-215879353,2,['energy'],['energy']
Energy Efficiency,"Doesn't really look like a bug. Either we up the convergence criterion or; we check only 5 decimals. On Tue, Mar 1, 2016 at 5:14 PM, Lori A. Burns notifications@github.com; wrote:. > Sorry @avcopan https://github.com/avcopan, I saw all the @IRCs in that; > gist above and thought opt7 was an unlabeled IRC. But that was for; > opt-irc-2, which should be fixed now.; > ; > opt7 fails on a few systems (; > https://testboard.org/cdash/testSummary.php?project=3&name=opt7&date=2016-03-01).; > This (https://testboard.org/cdash/testDetails.php?test=7810317&build=63640); > looks like the most coherent error message (also copied below), if; > @psi-rking https://github.com/psi-rking would like to examine it.; > ; > Optimizer: Optimization complete!; > Int. Coord. RHF opt of HOOH with O-H fixed to 0.95, energy........PASSED; > Optimizer: Optimization complete!; > Int. Coord. RHF opt of HOOH with O-O-H fixed to 105, energy: computed value (-150.7861731) does not match (-150.7861769) to 6 decimal places.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/253#issuecomment-190956405.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/253#issuecomment-191034927:801,energy,energy,801,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-191034927,2,['energy'],['energy']
Energy Efficiency,"Doesn't seem to be working too great; I get on my machine; ```; $ psi4 -n 8 ; 	SAPT0 energy with Ca2+, without ECP: computed value (-0.095615678) does not match (-0.095616042) to 8 digits.; Traceback (most recent call last):; File ""/home/work/psi4/install.susi/bin/psi4"", line 287, in <module>; exec(content); File ""<string>"", line 38, in <module>; File ""/home/work/psi4/install.susi/lib/psi4/driver/p4util/util.py"", line 230, in compare_values; raise TestComparisonError(message). TestComparisonError: 	SAPT0 energy with Ca2+, without ECP: computed value (-0.095615678) does not match (-0.095616042) to 8 digits.; ```; and the result is the same regardless of the guess...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1350#issuecomment-455380290:85,energy,energy,85,https://psicode.org,https://github.com/psi4/psi4/pull/1350#issuecomment-455380290,2,['energy'],['energy']
Energy Efficiency,"During an optimization where an initial hessian by finite difference is requested, the gradient is requested at the starting geometry _twice_. Once by the optimizer and once to determine what modes should be projected in the finite difference treatment. The SCF and final energies agree, but for some reason, the estimated MP2 energies disagree, and the RMS lambda errors don't match either. In this example, the MP2 correlation energy the first time is -0.018978215515226, but the MP2 correlation energy the second time is -0.017979235543976. An MP2 computation agreed with the first correlation energy. Minimal input file below. I've seen this bug on systems with UHF and systems of C1 symmetry. I want this fixed ASAP, just in case the bug does affect energies in some way I haven't seen, so I'll take this myself.; ```; molecule mol {; 0 1 ; units bohr; H; H 1 1.8 ; }. set {; reference rhf ; basis sto-3g; scf_type pk; dcft_functional odc-12; full_hess_every 0; }. optimize('dcft'); ````",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1309:429,energy,energy,429,https://psicode.org,https://github.com/psi4/psi4/issues/1309,3,['energy'],['energy']
Energy Efficiency,"During debugging of the failing (on Windows) test in #1235, I have noticed the following:; ```; (psi4-dev-cbs_dict) kraus@dream:~/psi4/tests/cbs-xtpl-freq::psi4 -n 1 -i in.dat -o n1.out; 	Nuclear repulsion energy..........................................PASSED; 6 displacements needed.; 1 2 3 4 5 6; 	SCF/cc-pVDZ Frequency 1...........................................PASSED; 	SCF/cc-pVDZ Frequency 2...........................................PASSED; 	SCF/cc-pVDZ Frequency 3...........................................PASSED; (psi4-dev-cbs_dict) kraus@dream:~/psi4/tests/cbs-xtpl-freq::psi4 -n 4 -i in.dat -o n4.out; 	Nuclear repulsion energy..........................................PASSED; 9 displacements needed.; 1 2 3 4 5 6 7 8 9; Warning: used thermodynamics relations inappropriate for low-frequency modes: ['476.8559' '479.2930' '484.2715']; 	SCF/cc-pVDZ Frequency 1: computed value (1809.246) does not match (476.856) to 2 digits.; Traceback (most recent call last):; File ""/home/kraus/Applications/psi4-cbs_dict/bin/psi4"", line 271, in <module>; exec(content); File ""<string>"", line 34, in <module>; File ""/home/kraus/Applications/psi4-cbs_dict/lib/psi4/driver/p4util/util.py"", line 227, in compare_values; raise TestComparisonError(message). TestComparisonError: 	SCF/cc-pVDZ Frequency 1: computed value (1809.246) does not match (476.856) to 2 digits.; ```; The in.dat, n1.out and n2.out files are attached.; [in.txt](https://github.com/psi4/psi4/files/2488549/in.txt); [n1.txt](https://github.com/psi4/psi4/files/2488550/n1.txt); [n4.txt](https://github.com/psi4/psi4/files/2488551/n4.txt). The number of SALC's in the parallel version (see line 362) is wrong: it should be 3, it is 6. @JonathonMisiewicz , ideas?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1295:206,energy,energy,206,https://psicode.org,https://github.com/psi4/psi4/issues/1295,2,['energy'],['energy']
Energy Efficiency,"E psi4.driver.qcdb.exceptions.Dftd3Error: Unsuccessful run. Possibly -D variant not available in dftd3 version. ../lib/python3.6/site-packages/psi4/driver/qcdb/intf_dftd3/runner.py:301: Dftd3Error. The above exception was the direct cause of the following exception:. @pytest.mark.smoke; @using_dftd3; @using_gcp; def test_grimme_3c():. s16di = psi4.geometry(""""""; C 0.000000 -0.667578 -2.124659; C 0.000000 0.667578 -2.124659; H 0.923621 -1.232253 -2.126185; H -0.923621 -1.232253 -2.126185; H -0.923621 1.232253 -2.126185; H 0.923621 1.232253 -2.126185; --; C 0.000000 0.000000 2.900503; C 0.000000 0.000000 1.693240; H 0.000000 0.000000 0.627352; H 0.000000 0.000000 3.963929; symmetry c1; """"""). > ene = psi4.energy('pbeh3c', bsse_type='nocp'). ../lib/python3.6/site-packages/psi4/tests/test_addons.py:830:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; ../lib/python3.6/site-packages/psi4/driver/driver.py:494: in energy; return driver_nbody.nbody_gufunc(energy, name, ptype='energy', **kwargs); ../lib/python3.6/site-packages/psi4/driver/driver_nbody.py:266: in nbody_gufunc; component_results = compute_nbody_components(func, method_string, metadata); ../lib/python3.6/site-packages/psi4/driver/driver_nbody.py:475: in compute_nbody_components; ptype_dict[pair], wfn = func(method_string, molecule=current_mol, return_wfn=True, **kwargs); ../lib/python3.6/site-packages/psi4/driver/driver.py:556: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); ../lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:2002: in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); ../lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1351: in scf_helper; disp_energy = scf_wfn._disp_functor.compute_energy(scf_wfn.molecule()); ../lib/python3.6/site-packages/psi4/driver/procrouting/empirical_dispersion.py:195: in compute_energy; verbose=1); _ _ _ _ _ _ _ _ _ _ _ _ _ _ ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:17694,energy,energy,17694,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846,1,['energy'],['energy']
Energy Efficiency,"E: Libint2ErfERI (eri.h:300); ==2802== by 0x1CC3A0EE: psi::Libint2ErfERI::clone() const (eri.h:305); ==2802== by 0x1C740620: psi::DFHelper::prepare_AO_wK_core() (dfhelper.cc:571); ==2802== by 0xD265ED2: __kmp_invoke_microtask (in /u/andysim/anaconda3/envs/psi4dev/lib/libiomp5.so); ==2802== by 0xD228725: __kmp_invoke_task_func (in /u/andysim/anaconda3/envs/psi4dev/lib/libiomp5.so); ==2802== by 0xD22771B: __kmp_launch_thread (in /u/andysim/anaconda3/envs/psi4dev/lib/libiomp5.so); ==2802== by 0xD26630A: _INTERNAL_26_______src_z_Linux_util_cpp_20354e55::__kmp_launch_worker(void*) (in /u/andysim/anaconda3/envs/psi4dev/lib/libiomp5.so); ==2802== by 0x4E3EEA4: start_thread (in /usr/lib64/libpthread-2.17.so); ==2802== by 0x51519FC: clone (in /usr/lib64/libc-2.17.so); ==2802== Address 0x2866b120 is 0 bytes after a block of size 73,440 alloc'd; ==2802== at 0x4C2A593: operator new(unsigned long) (vg_replace_malloc.c:344); ==2802== by 0x1CA85F62: allocate (new_allocator.h:104); ==2802== by 0x1CA85F62: allocate (alloc_traits.h:491); ==2802== by 0x1CA85F62: _M_allocate (stl_vector.h:170); ==2802== by 0x1CA85F62: _M_fill_insert (vector.tcc:491); ==2802== by 0x1CA85F62: std::vector<long, std::allocator<long> >::insert(__gnu_cxx::__normal_iterator<long const*, std::vector<long, std::allocator<long> > >, unsigned long, long const&) (stl_vector.h:1054); ==2802== by 0x1CA7E37F: resize (stl_vector.h:696); ==2802== by 0x1CA7E37F: psi::TwoBodyAOInt::create_sieve_pair_info(std::shared_ptr<psi::BasisSet>, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > >&, bool) (twobody.cc:244); ```; This is a harmless copy construction of a vector that is well defined. I tried to remove the AVX2 code path using the [MKL options](https://software.intel.com/content/www/us/en/develop/documentation/onemkl-developer-reference-c/top/support-functions/miscellaneous/mkl-enable-instructions.html) but the problem persisted. Finding an old pre-AVX box and running on there did the trick, and Valg",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2283#issuecomment-904787207:2802,allocate,allocate,2802,https://psicode.org,https://github.com/psi4/psi4/pull/2283#issuecomment-904787207,1,['allocate'],['allocate']
Energy Efficiency,"ECP calculations work as well as ordinary ones, so this can finally be merged. Here's the HF/def2-SVP calculation on Xe; ```; Initial Atomic UHF Energy: -315.3634326754. Total Energy Delta E Density RMS. @Atomic UHF iteration 1 energy: -280.36015363156582 35.00327904384721 0.17438162869310; @Atomic UHF iteration 2 energy: -260.70364549276712 19.65650813879870 0.20108587638483; @Atomic UHF iteration 3 energy: -320.59517730813167 -59.89153181536454 0.01619483472434; @Atomic UHF iteration 4 energy: -320.87131145782928 -0.27613414969761 0.00341002372407; @Atomic UHF iteration 5 energy: -320.87922264084102 -0.00791118301174 0.00056898557067; @Atomic UHF iteration 6 energy: -320.87957561560631 -0.00035297476529 0.00008011419372; @Atomic UHF iteration 7 energy: -320.87958210143461 -0.00000648582829 0.00000325221580; @Atomic UHF Final Energy for atom XE: -320.87958210143461; Finished UHF Computation!. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-RHF iter 0: -324.53314738271274 -3.24533e+02 0.00000e+00 ; @DF-RHF iter 1: -328.19660724674617 -3.66346e+00 2.76741e-02 DIIS; @DF-RHF iter 2: -328.28542700545580 -8.88198e-02 1.26940e-02 DIIS; @DF-RHF iter 3: -328.29832629846925 -1.28993e-02 5.50180e-04 DIIS; @DF-RHF iter 4: -328.29835689704061 -3.05986e-05 4.43928e-05 DIIS; @DF-RHF iter 5: -328.29835733022713 -4.33187e-07 3.97861e-06 DIIS; @DF-RHF iter 6: -328.29835733491979 -4.69265e-09 2.37557e-07 DIIS; Energy converged.; ```; Works as well as in UGBS; ```; Initial Atomic UHF Energy: -5427.3786402080. Total Energy Delta E Density RMS. @Atomic UHF iteration 1 energy: -6483.96999842770038 -1056.59135821971540 1.04255411296391; @Atomic UHF iteration 2 energy: -6453.45541954978944 30.51457887791094 0.40784617759788; @Atomic UHF iteration 3 energy: -7117.90198205644811 -664.44656250665867 0.36315248442566; @Atomic UHF iteration 4 energy: -7267.18887860081304 -149.28689654436494 0.12758818454125; @Atomic UHF iteration 5 energy: -7299.46498016141504 -32.27610156060200 0.0150",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1458#issuecomment-454279590:145,Energy,Energy,145,https://psicode.org,https://github.com/psi4/psi4/pull/1458#issuecomment-454279590,11,"['Energy', 'energy']","['Energy', 'energy']"
Energy Efficiency,"Edit: from forum post: http://forum.psicode.org/t/error-for-sapt-dmp2-calculation/1691; running `psi4 -p myprefix <input_file>` for a delta_mp2 SAPT calculations results in:. ```; PSIO_ERROR: Can't find TOC Entry DFMP2 Jm12; PSIO_ERROR: unit = 97, errval = 13; PSIO_ERROR: 13 (no such TOC entry); ```. uncommenting [this](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libpsio/change_namespace.cc#L69) , applied [here](https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/proc.py#L3918) reveals (at least); the 97 file (the Jm12 metric) still uses the default prefix (`psi`):. ```; /Users/kruse/scratch/PSI4/psi.44624.dimer.97; /Users/kruse/scratch/PSI4/psi.44624.monomerA.97; ```. ---; example input; ```; molecule water_dimer {; 0 1; O -0.003244 1.511274 0.000000; H 0.070125 0.540684 0.000000; H 0.900899 1.845934 0.000000; --; 0 1; O -0.003244 -1.375885 0.000000; H -0.459556 -1.734864 0.771839; H -0.459556 -1.734864 -0.771839. units angstrom; no_reorient; symmetry c1; }; set basis sto-3g; energy('sapt2+(3)dmp2'); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1874:1016,energy,energy,1016,https://psicode.org,https://github.com/psi4/psi4/issues/1874,1,['energy'],['energy']
Energy Efficiency,"Eh (Hartree energy) is the [atomic unit of energy](https://physics.nist.gov/cgi-bin/cuu/Value?thr), while a0 (Bohr radius) is the [atomic unit of length](https://physics.nist.gov/cgi-bin/cuu/Value?tbohrrada0|search_for=nonsi_in!)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/815#issuecomment-333639899:12,energy,energy,12,https://psicode.org,https://github.com/psi4/psi4/issues/815#issuecomment-333639899,2,['energy'],['energy']
Energy Efficiency,"Either both of the below attempts to read a wfn in for an SCF gradient should be trapped by an error, or neither should. Right now, the first works fine, but the bottom segfaults. ```; h2o = psi4.geometry(""""""; O ; H 1 0.96; H 1 0.96 2 104.5; """"""); wfn=psi4.energy('scf/def2-svp', molecule=h2o, return_wfn=True)[1]; # No segfault with the un-serialized wfn.; psi4.gradient('scf/def2-svp', molecule=wfn.molecule(), ref_wfn=wfn). wfn.to_file('my_wfn'); wfn_new = psi4.core.Wavefunction.from_file('my_wfn'); # Segfault with the un-serialized wfn.; psi4.gradient('scf/def2-svp', molecule=wfn_new.molecule(), ref_wfn=wfn_new) # Segfault here.; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2712:257,energy,energy,257,https://psicode.org,https://github.com/psi4/psi4/issues/2712,1,['energy'],['energy']
Energy Efficiency,"Either of those dft gradients calls works, though I exclusively use the former. They work b/c all functionals are added to procedures[‘energy’] and all but dh are added to procedures[‘gradient’]. (see snippet below.) (They’re missing from procedures['property’] and that should probably be remedied. So DFT is generally in good shape: energies work, gradients work (analytic except findif for dh), r/u ks set exclusively by option. You can use ‘scf’ to mean HF, and then it works just the same as DFT. I’d advocate thoroughly adding ‘hf’ (that is not just to energy() like it has been) so it’s on-par with DFT. The r/u/ro options were a nice thought, but not thoroughly carried out, with disturbing consequences, as you found. # Integrate DFT with driver routines. for ssuper in superfunctional_list():; procedures['energy'][ssuper.name().lower()] = run_dft. for ssuper in superfunctional_list():; if ((not ssuper.is_c_hybrid()) and (not ssuper.is_c_lrc()) and (not ssuper.is_x_lrc())):; procedures['gradient'][ssuper.name().lower()] = run_dft_gradient. > On Jun 8, 2015, at 9:49 PM, David Sherrill notifications@github.com wrote:; > ; > Is there an advantage to doing; > ; > gradient('b3lyp'); > ; > instead of; > ; > set reference rks; > set dft_functional b3lyp; > gradient('scf')?; > ; > I guess the former is certainly shorter. But primarily I'm wondering; > whether one is easier to check than the other regarding whether the; > gradient is available. We need to know on a functional-by-functional basis; > whether we have analytic gradients or not. If that's much easier to handle; > with one style vs the other, that would be an argument for doing it that; > way. Then we can decide what to do with the HF cases to make them play; > nicely with our desired solution for the DFT ones.; > ; > David; > ; > On Mon, Jun 8, 2015 at 8:46 PM, Lori A. Burns notifications@github.com; > wrote:; > ; > > Without The-7 (hf/rhf/uhf/rohf/rscf/roscf/uscf), one can do:; > > ; > > # (a) for HF; > > ; > > ene",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/103#issuecomment-110199772:135,energy,energy,135,https://psicode.org,https://github.com/psi4/psi4/issues/103#issuecomment-110199772,3,['energy'],['energy']
Energy Efficiency,Eliminate unused psimrcc file to reduce compile time #525,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/544:33,reduce,reduce,33,https://psicode.org,https://github.com/psi4/psi4/pull/544,1,['reduce'],['reduce']
Energy Efficiency,Error computing atomization energy of Al atom,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2858:28,energy,energy,28,https://psicode.org,https://github.com/psi4/psi4/issues/2858,1,['energy'],['energy']
Energy Efficiency,"Error is; ```; Traceback (most recent call last):; File ""/usr/bin/psi4"", line 287, in <module>; exec(content); File ""<string>"", line 29, in <module>; File ""/usr/lib64//python3.9/site-packages/psi4/driver/driver.py"", line 556, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/usr/lib64//python3.9/site-packages/psi4/driver/procrouting/proc.py"", line 2002, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/usr/lib64//python3.9/site-packages/psi4/driver/procrouting/proc.py"", line 1272, in scf_helper; p4util.banner(name.upper()). AttributeError: 'dict' object has no attribute 'upper'. Printing out the relevant lines from the Psithon --> Python processed input file:; ""x_functionals"": {""GGA_X_PBE"": {}},; ""c_functionals"": {""GGA_C_PBE"": {}}; }; core.set_global_option(""BASIS"", ""pcseg-2""); core.set_global_option(""BASIS_GUESS"", ""true""); --> energy('scf', dft_functional=my_pbe); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2199#issuecomment-867164975:229,energy,energy,229,https://psicode.org,https://github.com/psi4/psi4/issues/2199#issuecomment-867164975,3,['energy'],['energy']
Energy Efficiency,"Even using **guess huckel**, I am getting _Fatal Error: Monomer B: A Matrix is not SPD_ while calculatin SAPT(0) energy with UHF reference.; Using Psi4 1.3.2",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1747#issuecomment-549455459:113,energy,energy,113,https://psicode.org,https://github.com/psi4/psi4/issues/1747#issuecomment-549455459,1,['energy'],['energy']
Energy Efficiency,"Even when using all the parameters suggested by @PhillCli in a test sript, the calculation does not complete. The SCF part is executed, but it seems that there is a problem when building the basis set for the SAPT calculation. Calculation stops at this point. ![Screenshot from 2023-06-27 09-54-28](https://github.com/psi4/psi4/assets/17604953/24f20f18-3708-46dc-b80b-681a98083799). Displaying the following message in the executation terminal. ![Screenshot from 2023-06-27 09-57-24](https://github.com/psi4/psi4/assets/17604953/6fdd54b8-3210-4b4e-a000-ed640f187e7c). The script I am using for the test . ```python; import psi4; import time; psi4.core.set_output_file('output.dat', False). he2_geometry = """"""; He; --; He 1 {0}; """""". Rvals = [2.5, 3.0,]. start = time.time(); psi4.set_num_threads(4); psi4.set_memory(""30000 MB""). psi4.set_options(; {; ""reference"": ""uhf"",; ""scf_type"": ""direct"",; ""df_basis_scf"": ""def2-universal-JKFIT"",; ""df_basis_sapt"": ""aug-cc-pv6z-ri"",; ""basis_guess"": ""aug-cc-pvdz"",; ""basis"": ""d-aug-cc-pv5z"",; ""guess"": ""sad"",; ""maxiter"": 300,; ""e_convergence"": 1e-10,; ""d_convergence"": 1e-10,; }; ). ecp = {}. for R in Rvals:; he2 = psi4.geometry(he2_geometry.format(R)); ecp[R] = psi4.energy('sapt0', molecule=he2). # Prints to screen; print(""Interaction Energies\n\n""); print("" R E_int ""); print(""---------------------------------------------------------""); for R in Rvals:; e = ecp[R] ; print("" {:3.1f} {:1.6f}"".format(R, e)); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2989#issuecomment-1609461172:1206,energy,energy,1206,https://psicode.org,https://github.com/psi4/psi4/issues/2989#issuecomment-1609461172,1,['energy'],['energy']
Energy Efficiency,"Example input below. Seems method and integral-type independent. Using `ref_wfn` with an existing wfn works. The issue thus seems caused by the writing or reading. I tested few other modules (fnocc, ccenergy, dfmp2) and those seem fine. (found through http://forum.psicode.org/t/post-scf-with-custom-matrices/1701). ```; molecule water6 {; 0 1; O -1.551007 -0.114520 0.000000; H -1.934259 0.762503 0.000000; H -0.599677 0.040712 0.000000; symmetry c1; }. memory 2 GiB; set {; ints_tolerance 1e-10; basis def2-SVP; }. set mp2_type df; set cc_type df; set qc_module occ; set scf_type df; e,wfn=energy('scf',return_wfn=True); wfn.to_file('my_wfn'); wfn_new = Wavefunction.from_file('my_wfn'); energy('mp2',ref_wfn=wfn_new); #energy('MP2',ref_wfn=wfn) # <-- works; ```. results in segmentation fault after printing the MO space.; For example for conventional MP2:; ```; IRREP FC OCC VIR FV; ==============================; A 0 5 19 0; ==============================. Memory is 2147 MB; Cost of iabc is 0 MB; Cost of abcd is 0 MB; Switching to the incore algorithm for iabc..; Switching to the incore algorithm for abcd.. /Users/kruse/bin/psi4dev: line 1: 80585 Segmentation fault: 11 /Users/kruse/qc/psi4.bin/bin/psi4 -s . $@; ```. as per wish, pinging @JonathonMisiewicz",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1851:592,energy,energy,592,https://psicode.org,https://github.com/psi4/psi4/issues/1851,3,['energy'],['energy']
Energy Efficiency,"Example: [molden_cartesian.zip](https://github.com/psi4/psi4/files/4988043/molden_cartesian.zip). The ZIP file contains a trivial HF/6-31G* calculation on water with PSI4 and Gaussian. To allow for a one-on-one comparison, symmetry, reorientation etc. are disabled. The molden file written out by PSI4 results in the wrong total charge when it is loaded into Molden, which shows there is a problem:. ```; Mulliken Charges; ================; ; O -0.8774; H 0.4308; H 0.4316; ; Sum of Mulliken Charges: -0.0150; ```. Repeating the calculation in Gaussian and loading the log file into Molden gives:. ```; Mulliken Charges; ================; ; O -0.8652; H 0.4323; H 0.4329; ; Sum of Mulliken Charges: -0.0000; ```. I've written out the orbitals from the Gaussian log back into a Molden file with Molden, to allow for a one-on-one comparison of the orbital coefficients. This revealed that coefficients 13, 14 and 15 of each orbital in the Molden file written by PSI4 are a factor **sqrt(3)** too large compared to what they should be. These are coefficients for the `xy`, `xz` and `yz` basis functions in a d shell. Other d functions are fine. I'll check for g and f functions as well...",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1973:329,charge,charge,329,https://psicode.org,https://github.com/psi4/psi4/issues/1973,5,"['Charge', 'charge']","['Charges', 'charge']"
Energy Efficiency,"Example:; ```; frame_metadata = {; 'system_name': '{C#N}_O'; }. molecule {; 0 1; C 0.0000000000 0.0000000000 0.0000000000; N -0.3650589000 0.4281249000 1.0136910000; H 0.2430928700 -0.5101510800 -0.9168319000. symmetry c1; no_com; no_reorient; }. energy(""hf""); ```. The psithon interpreter turns this into ; ```; import psi4; from psi4 import *; from psi4.core import *; from psi4.driver.diatomic import anharmonicity; from psi4.driver.gaussian_n import *; from psi4.driver.aliases import *; from psi4.driver.driver_cbs import xtpl_highest_1, scf_xtpl_helgaker_2, scf_xtpl_helgaker_3, corl_xtpl_helgaker_2; from psi4.driver.wrapper_database import database, db, DB_RGT, DB_RXN; from psi4.driver.wrapper_autofrag import auto_fragments; from psi4.driver.constants.physconst import *; psi4_io = core.IOManager.shared_object(); psi4_io.set_default_path(""/state/partition1/tmp/""); geometry(""""""; 0 1; H; H 1 0.74; """""",""blank_molecule_psi4_yo""); frame_metadata = {; 'system_name': '{; }; core.efp_init(); geometry(""""""; 0 1; C 0.0000000000 0.0000000000 0.0000000000; N -0.3650589000 0.4281249000 1.0136910000; H 0.2430928700 -0.5101510800 -0.9168319000. symmetry c1; no_com; no_reorient; """"""); core.IO.set_default_namespace(""""); energy(""hf""); ```. Which unsurprisingly gives a syntax error.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/655:247,energy,energy,247,https://psicode.org,https://github.com/psi4/psi4/issues/655,2,['energy'],['energy']
Energy Efficiency,"Example; ```; molecule {; 0 1; Ne; }. set basis aug-cc-pV5Z; set dft_spherical_points 974; set dft_radial_points 450. camlda0 = {; ""name"": ""CAM-LDA0"",; ""xc_functionals"": { ""HYB_LDA_XC_CAM_LDA0"": {""use_libxc"": True} }; }; lda0 = {; ""name"": ""LDA0"",; ""xc_functionals"": { ""HYB_LDA_XC_LDA0"": {""use_libxc"": True} }; }; ```; I've just merged these into libxc master. The hybrid LDA family and these two functionals will appear in the next (major?) release. Unfortunately, these aren't available anywhere else, so I can't be 100% sure the functionals themselves are correct. I just checked that the energies appear to be sane, i.e. the Ne energy is somewhere around -128 hartree.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1645#issuecomment-492620323:631,energy,energy,631,https://psicode.org,https://github.com/psi4/psi4/pull/1645#issuecomment-492620323,1,['energy'],['energy']
Energy Efficiency,"Excellent, thanks, Rollin. Daniel Smith brought up the possibility that we might add a little function; to the driver to automate dihedral scans. That seems like a good idea.; This input isn't super complicated, but nevertheless I suspect some users; would appreciate automating these loops in a pre-packaged library routine. On Mon, Mar 28, 2016 at 4:55 PM, Rollin King notifications@github.com; wrote:. > I've just issued a pull request with some changes to the fixed-coordinate; > optimizations. With that code, I am able to get a good dihedral scan for; > HOOH in C2 with the input below. (A reminder that, in general, such scans; > can have erratic jumps since this is not following an IRC, but HOOH is so; > well-behaved the result is smooth and symmetric anyway.); > ; > molecule HOOH {; > 0 1; > H; > O 1 0.90; > O 2 1.40 1 100.0; > H 3 0.90 2 100.0 1 -175.0; > }; > ; > set {; > basis 6-31G*; > scf_type df; > guess sad; > ints_tolerance 1.0E-8; > }; > ; > start_angle = -175.0; > steps = 36; > step_size = 10; > ; > dihedrals = [""1 2 3 4 {}"".format((counter \* step_size) + start_angle) for counter in range(0, steps)]; > ; > SCF_Energies = []; > ; > for dihedral in dihedrals:; > set optking { fixed_dihedral = $dihedral }; > optimize('scf'); > SCF_Energies.append( psi4.get_variable('CURRENT ENERGY') ); > ; > for i in range(steps):; > print ""%10s%20.10f"" % (start_angle+i*step_size, SCF_Energies[i]); > ; > Note that at present the optimizer does not of its own volition head; > through the discontinuity at 180, even if that path is the shortest to the; > fixed value. Thus, I began at -175 and started up.; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/10#issuecomment-202577523",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/10#issuecomment-202622738:1304,ENERGY,ENERGY,1304,https://psicode.org,https://github.com/psi4/psi4/issues/10#issuecomment-202622738,1,['ENERGY'],['ENERGY']
Energy Efficiency,F = yes NO DFILE = no; MPN = no MPN SCHMIDT = no; ZAPTN = no MPN WIGNER = no; PERT Z = 1.0000 FOLLOW ROOT = 0; NUM THREADS = 12; VECS WRITE = no NUM VECS WRITE = 0; FILTER GUESS = no SF RESTRICT = no; OPDM = no TRANS DENSITY= no. FILES = 50 51 52 53. EX ALLOW = 1 1 1 1; STATE AVERAGE = 1(1.00); STATE AVERAGE = 1(1.00). ORBITALS:; NMO = 46; FROZEN CORE = 0 RESTR CORE = 0; FROZEN VIRT = 0 RESTR VIRT = 0; DROPPED CORE = 0 DROPPED VIRT = 0; EXPLICIT CORE= 0 ORBS IN CI = 46; NUM ALP = 2 NUM BET = 2; NUM ALP EXPL = 2 NUM BET EXPL = 2; IOPEN = no; RAS1 LVL = 1 A RAS3 MAX = 2; RAS1 MIN = 0 B RAS3 MAX = 2; A RAS1 LVL = 1 RAS4 LVL = 46; A RAS1 MIN = 0 A RAS4 MAX = 0; A RAS1 MAX = 2 B RAS4 MAX = 0; B RAS1 LVL = 1 RAS4 MAX = 0; B RAS1 MIN = 0 A RAS34 MAX = 2; B RAS1 MAX = 2 B RAS34 MAX = 2; RAS3 LVL = 2 RAS34 MAX = 4; RAS3 MAX = 4. DOCC = 2 0 0 0 0 0 0 0; SOCC = 0 0 0 0 0 0 0 0. FROZEN DOCC = 0 0 0 0 0 0 0 0; RESTRICTED DOCC = 0 0 0 0 0 0 0 0; RAS 1 = 2 0 0 0 0 0 0 0; RAS 2 = 0 0 0 0 0 0 0 0; RAS 3 = 9 3 3 3 2 8 8 8; RAS 4 = 0 0 0 0 0 0 0 0; RESTRICTED UOCC = 0 0 0 0 0 0 0 0; FROZEN UOCC = 0 0 0 0 0 0 0 0. ---. There are 1035 alpha strings; There are 1035 beta strings; CI space contains 8 blocks. CI space requires 136181 determinants. Check SCF Energy from 1- and 2-electron integrals. SCF Energy (ref): -24.2368157001; Nuclear repulsion energy: 0.0000000000; One-electron energy: -30.3554851372; Two-electron energy: 6.1186694371; Dropped core energy: 0.0000000000; Total electronic energy: -24.2368157001; Total SCF energy: -24.2368157001. CI vector/subblock length = 22201. **\* H0 Block Eigenvalue = -24.29689697. Find the roots by the Simultaneous Expansion Method (Block Davidson Method); Energy convergence = 1e-06; RMS CI vector convergence = 0.0001. Using 1 initial trial vectors; Iter 0 Root 1 = -24.296896966 Delta_E -2.430E+01 Delta_C 3.387E-01; Iter 1 Root 1 = -24.303610361 Delta_E -6.713E-03 Delta_C 2.586E-02; Iter 2 Root 1 = -24.303663850 Delta_E -5.349E-05 Delta_C 2.296E-03,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/204#issuecomment-170152270:12225,Energy,Energy,12225,https://psicode.org,https://github.com/psi4/psi4/issues/204#issuecomment-170152270,9,"['Energy', 'energy']","['Energy', 'energy']"
Energy Efficiency,"F-RKS iter 5: -76.33541734518556 -6.77854e-07 7.73497e-06 DIIS; @DF-RKS iter 6: -76.33541735566205 -1.04765e-08 1.19390e-06 DIIS; @DF-RKS iter 7: -76.33541735595242 -2.90370e-10 2.40194e-07 DIIS. ==> Post-Iterations <==. Orbital Energies (a.u.); -----------------------. Doubly Occupied: . 1A -19.184718 2A -1.000452 3A -0.509499 ; 4A -0.360493 5A -0.281933 . Virtual: . 6A 0.113651 7A 0.212439 8A 0.827371 ; 9A 0.915633 10A 0.937398 11A 0.938267 ; 12A 1.123156 13A 1.234184 14A 1.763048 ; 15A 1.774444 16A 1.811716 17A 2.329295 ; 18A 2.632599 19A 3.611500 . Final Occupation by Irrep:; A ; DOCC [ 5 ]. Energy converged. @DF-RKS Final Energy: -76.33541735595242. => Energetics <=. Nuclear Repulsion Energy = 8.9272515369995578; One-Electron Energy = -122.8414514085261118; Two-Electron Energy = 44.6070248999700425; DFT Exchange-Correlation Energy = -7.0282423843959076; Empirical Dispersion Energy = 0.0000000000000000; PCM Polarization Energy = 0.0000000000000000; EFP Energy = 0.0000000000000000; Total Energy = -76.3354173559524156. Alert: EFP and PCM quantities not currently incorporated into SCF psivars. Properties will be evaluated at 0.000000, 0.000000, 0.000000 Bohr; ==> Properties <==. Properties computed using the SCF density matrix. Nuclear Dipole Moment: (a.u.); X: 14.2834 Y: 0.0000 Z: -23.5602. Electronic Dipole Moment: (a.u.); X: -15.1523 Y: -0.0000 Z: 23.6231. Dipole Moment: (a.u.); X: -0.8689 Y: -0.0000 Z: 0.0628 Total: 0.8712. Dipole Moment: (Debye); X: -2.2085 Y: -0.0000 Z: 0.1597 Total: 2.2143. Saving occupied orbitals to File 180. *** tstop() called on machtiani1 at Wed Feb 10 19:35:42 2016; Module time:; user time = 23.90 seconds = 0.40 minutes; system time = 1.02 seconds = 0.02 minutes; total time = 4 seconds = 0.07 minutes; Total time:; user time = 23.90 seconds = 0.40 minutes; system time = 1.02 seconds = 0.02 minutes; total time = 4 seconds = 0.07 minutes; [Error prints before oeprop]; ```. The other crash I saw was just the input/output from the conda inst",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/240#issuecomment-182660528:8293,Energy,Energy,8293,https://psicode.org,https://github.com/psi4/psi4/issues/240#issuecomment-182660528,1,['Energy'],['Energy']
Energy Efficiency,FISAPT: Charge on A is incompatible with singlet,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2870:8,Charge,Charge,8,https://psicode.org,https://github.com/psi4/psi4/issues/2870,1,['Charge'],['Charge']
Energy Efficiency,"FWIW B3LYP/def2-SVP converges in 24 iterations from the default SAD guess, yielding S^2 = 0.7528. PBE/def2-SVP also converges in 25 iterations to S^2 = 0.7538. . The weird convergence is a combination of the non-physical guess which lacks core electrons, combined with the unnecessary use of the second-order scheme which appears to have converged to an extremely high-lying saddle point: the log file on the forum has a B3LYP/def2-SVP energy of -1803.88405461301363 after 77 SOKS iterations, while I get -1820.53977771750078, which is SEVENTEEN HARTREE lower....",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1972#issuecomment-664938620:436,energy,energy,436,https://psicode.org,https://github.com/psi4/psi4/issues/1972#issuecomment-664938620,1,['energy'],['energy']
Energy Efficiency,"FWIW, the `VV10` energy contribution is added to the `DFT FUNCTIONAL TOTAL ENERGY` here:; https://github.com/psi4/psi4/blob/9a1853f004977d79b333a89b5fda237732aafe83/psi4/driver/procrouting/scf_proc/scf_iterator.py#L705; so implementing the change would be trivial.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2132#issuecomment-801585881:17,energy,energy,17,https://psicode.org,https://github.com/psi4/psi4/pull/2132#issuecomment-801585881,2,"['ENERGY', 'energy']","['ENERGY', 'energy']"
Energy Efficiency,"FYI I tried 64 GB but still the same issue. I guess I will have to stick with a CAS(16,14) as my reference energy (without orbital optimization).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1959#issuecomment-660888557:107,energy,energy,107,https://psicode.org,https://github.com/psi4/psi4/issues/1959#issuecomment-660888557,1,['energy'],['energy']
Energy Efficiency,"FYI, although `Psi4 1.4a2.dev215 dfb86f5` is the latest mac developer version on conda. It is already 5 months old now. There have been improvements and fixes to the SAD guess compared to `v1.3.2`. Though the SAD energy here seems to be equal. ; That's the first difference that comes to my mind now.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1878#issuecomment-623930205:213,energy,energy,213,https://psicode.org,https://github.com/psi4/psi4/issues/1878#issuecomment-623930205,1,['energy'],['energy']
Energy Efficiency,"FYI, surround terminal output with triple backticks, ` ``` ` to get easy-to-read formatting. Trouble arises through the way you're specifying fitting basis sets. You don't usually don't need to be explicit, as they'll default sensibly via [this table](http://psicode.org/psi4manual/master/basissets_byfamily.html). But because you're setting _orbital_ basis sets into _fitting_ roles, the code runs out of basis functions. Your input runs fine as-is if change Li+ to Li–. But what you really want is for proper JKFIT and RIFIT bases to be used, so the below runs fine as cation. ```; molecule HeLi {; 0 1; He 0.000000000 0.000000000 0.000000000; --; 1 1; Li 3.300000000 0.000000000 0.000000000. units angstrom; no_reorient; }. set globals {; basis aug-cc-pVDZ; }. set_memory(32000000000); energy('sapt2+3(ccd)dmp2'); ```; ```. Total HF -0.48110602 [mEh] -0.30189858 [kcal/mol] -1.26314367 [kJ/mol]; Total SAPT0 -0.48230804 [mEh] -0.30265287 [kcal/mol] -1.26629959 [kJ/mol]; Total SAPT2 -0.49001572 [mEh] -0.30748951 [kcal/mol] -1.28653610 [kJ/mol]; Total SAPT2+ -0.49022506 [mEh] -0.30762087 [kcal/mol] -1.28708572 [kJ/mol]; Total SAPT2+(3) -0.49058180 [mEh] -0.30784473 [kcal/mol] -1.28802234 [kJ/mol]; Total SAPT2+3 -0.49061857 [mEh] -0.30786780 [kcal/mol] -1.28811889 [kJ/mol]; Total SAPT2+dMP2 -0.49489433 [mEh] -0.31055088 [kcal/mol] -1.29934488 [kJ/mol]; Total SAPT2+(3)dMP2 -0.49525107 [mEh] -0.31077474 [kcal/mol] -1.30028149 [kJ/mol]; Total SAPT2+3dMP2 -0.49524933 [mEh] -0.31077365 [kcal/mol] -1.30027694 [kJ/mol]; Total SAPT2+(CCD) -0.49023349 [mEh] -0.30762616 [kcal/mol] -1.28710786 [kJ/mol]; Total SAPT2+(3)(CCD) -0.49059023 [mEh] -0.30785002 [kcal/mol] -1.28804448 [kJ/mol]; Total SAPT2+3(CCD) -0.49062701 [mEh] -0.30787309 [kcal/mol] -1.28814102 [kJ/mol]; Total SAPT2+(CCD)dMP2 -0.49490276 [mEh] -0.31055617 [kcal/mol] -1.29936701 [kJ/mol]; Total SAPT2+(3)(CCD)dMP2 -0.49525950 [mEh] -0.31078003 [kcal/mol] -1.30030363 [kJ/mol]; Total SAPT2+3(CCD)dMP2 -0.49525776 [mEh] -0.31077894 [kc",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1564#issuecomment-468953723:789,energy,energy,789,https://psicode.org,https://github.com/psi4/psi4/issues/1564#issuecomment-468953723,1,['energy'],['energy']
Energy Efficiency,Fail in Psi4 energy decomposition analysis,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2866:13,energy,energy,13,https://psicode.org,https://github.com/psi4/psi4/issues/2866,1,['energy'],['energy']
Energy Efficiency,"Fails on methyl chloride, succeeds on diatomic chlorine.; Did not test larger alkyl groups.; CH3Cl was pre-optimized at HF/6-31G(d). ; Attempted RHF single point energy failed to converge with these basis sets:. > 6-311g(3df); > 6-311g(3df,p); > 6-311g(3df,2p); > 6-311g(3df,2pd); > 6-311g(3df,3pd); > aug-cc-pV(D+d)Z; > aug-cc-pV(Q+d)Z; > aug-cc-pV(T+d)Z; > g3mp2large. They all have at least 3df polarization, some more. Not all heavily polarized 6-311G(*) basis sets contain both C, Cl so these basis sets are only 5 of the 51 6-311?G(etc) sets. Doubtless, the other 10 sets with diffuse functions (e.g., 6-311++G(3df)) will fail but take longer at it. Though large, the 7152 Mb memory allocation requirement did not exhaust available shared memory. G3(MP2) method requires the g3mp2large basis set and the Wilson Group's cc-CA methods require the aug-cc-pV([DQT]+d)Z basis sets. Minimal test case attached.; [CH3Cl-3df-fail.zip](https://github.com/psi4/psi4/files/214171/CH3Cl-3df-fail.zip)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/340:162,energy,energy,162,https://psicode.org,https://github.com/psi4/psi4/issues/340,1,['energy'],['energy']
Energy Efficiency,"Fantastic job on this PR, @EricaCMitchell! It took me a while (I apologize), but I finally translated @mkodrycka 's dispersion-F12 code to an MP2-F12 one and, after some tweaking, was able to reproduce your DF-MP2-F12 correlation energy exactly. . I learned quite a bit in the process: initially, our implementations (both based on the formulas from the same Werner-Adler-Manby paper) gave minimally different results, and I found out that our programmed expressions differ by several terms that vanish in the GBC approximation. This approximation is pretty good but neither one of us makes it explicitly in the implementation (no elements of the Fock matrix are zeroed). I think this is completely OK. One avenue to possibly speed up the code is fully exploiting the fact that our F12 amplitudes are diagonal and we don't need to compute off-diagonal elements of some matrices. For example, out of the entire B matrix, we only use terms of the form `B(i,j,i,j)` and `B(i,j,j,i)`. I know computing just the diagonal elements is easier said than done, but I think there is room for speedup there. Finally, I know this was not directly a part of this PR, but do you happen to know the source of the 6-Gaussian fit of the Slater correlation factor? Here's what Psi4 uses for `GEM_BETA == 1.0`:. https://github.com/psi4/psi4/blob/f20a7c61ca0f4939885aa28f96d7d88058a71816/psi4/src/psi4/libmints/mintshelper.cc#L930-L933. and this is what Molpro 2012.1 prints out (I don't have a newer version):; ` Alpha: 0.19532 0.81920 2.85917 9.50073 35.69989 197.79328`; ` Coeff: 0.27070 0.30552 0.18297 0.10986 0.06810 0.04224`. This discrepancy, if not removed, does lead to small differences in the final results.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3110#issuecomment-1941533669:230,energy,energy,230,https://psicode.org,https://github.com/psi4/psi4/pull/3110#issuecomment-1941533669,1,['energy'],['energy']
Energy Efficiency,"Fewer compilers working is less of an issue as we push more users towards; the binary distribution. And is only a temporary problem, anyway. Is icpc; 15.0 recent enough to support all the standards we need?. On Wed, Feb 10, 2016 at 3:50 PM, Ben Pritchard notifications@github.com; wrote:. > For me the biggest pro of C++11 is that is reduces the amount of code I; > have to write/maintain/debug.; > - Defaulted (and deleted) constructors and assignment operators; > (mentiond by @dgasmith https://github.com/dgasmith); > - Liberal use of STL containers and unique_ptr means you should rarely; > have to write a destructor, and often don't have to write a copy constructor; > - Constructor delegation; > ; > Cons:; > - Template programming results in nasty compiler error messages that; > take experience to figure out; > - Overuse of templates, auto, decltype, etc, can result unreadable; > code; > - This can somewhat be fixed in the new PR workflow. Don't accept; > PRs which are a mess; > - Some C++11 patterns can be intimidating to people who are still; > learning basic C++; > ; > As more libraries require C++11 (I think Ambit, TiledArray, and Cyclops; > all do), it should generally be embraced, with some reservations.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/238#issuecomment-182577836.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/238#issuecomment-182588993:334,reduce,reduces,334,https://psicode.org,https://github.com/psi4/psi4/issues/238#issuecomment-182588993,1,['reduce'],['reduces']
Energy Efficiency,"File ""/home/work/psi4/install/lib/psi4/driver/driver.py"", line 1594, in frequency; H, wfn = hessian(name, return_wfn=True, molecule=molecule, **kwargs); File ""/home/work/psi4/install/lib/psi4/driver/driver.py"", line 1431, in hessian; plan.compute(); File ""/home/work/psi4/install/lib/psi4/driver/driver_findif.py"", line 1314, in compute; t.compute(client=client); File ""/home/work/psi4/install/lib/psi4/driver/task_base.py"", line 179, in compute; self.result = qcng.compute(; File ""/home/susi/.conda/envs/p4env/lib/python3.10/site-packages/qcengine/compute.py"", line 108, in compute; output_data = executor.compute(input_data, config); File ""/home/susi/.conda/envs/p4env/lib/python3.10/site-packages/qcengine/programs/psi4.py"", line 233, in compute; output_data = psi4.schema_wrapper.run_qcschema(input_model, postclean=False).dict(); File ""/home/work/psi4/install/lib/psi4/driver/schema_wrapper.py"", line 460, in run_qcschema; ret_data = run_json_qcschema(input_model.dict(), clean, False, keep_wfn=keep_wfn); File ""/home/work/psi4/install/lib/psi4/driver/schema_wrapper.py"", line 626, in run_json_qcschema; val, wfn = methods_dict_[json_data[""driver""]](method, **kwargs); File ""/home/work/psi4/install/lib/psi4/driver/driver.py"", line 525, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/work/psi4/install/lib/psi4/driver/procrouting/proc.py"", line 1386, in select_mrcc; return func(name, **kwargs); File ""/home/work/psi4/install/lib/psi4/driver/procrouting/proc.py"", line 4935, in run_mrcc; ref_wfn = scf_helper(name, **kwargs); File ""/home/work/psi4/install/lib/psi4/driver/procrouting/proc.py"", line 1887, in scf_helper; e_scf = scf_wfn.compute_energy(); File ""/home/work/psi4/install/lib/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 82, in scf_compute_energy; self.initialize(); File ""/home/work/psi4/install/lib/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 223, in scf_initialize; self.guess(); KeyboardInterrupt; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3159:9522,energy,energy,9522,https://psicode.org,https://github.com/psi4/psi4/issues/3159,2,['energy'],['energy']
Energy Efficiency,"File ""<string>"", line 46, in <module>; File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/driver.py"", line 526, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 5424, in run_detcas; ref_wfn = scf_helper(name, **kwargs); File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 1769, in scf_helper; scf_wfn = scf_wavefunction_factory(name, base_wfn, core.get_option('SCF', 'REFERENCE'), **kwargs); File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 1437, in scf_wavefunction_factory; wfn = core.ROHF(ref_wfn, superfunc). RuntimeError:; Fatal Error: Input DOCC array has the wrong dimensions; Error occurred in file: /home/conda/feedstock_root/build_artifacts/psi4_1683815705191/work/psi4/src/psi4/libscf_solver/hf.cc on line: 146; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int). Printing out the relevant lines from the Psithon --> Python processed input file:; F 1 {}; symmetry c2v; """""".format(R)). --> energy('casscf'). ecp[R] = [get_variable('ci root 0 total energy'),; get_variable('ci root 1 total energy'),; get_variable('ci root 2 total energy')]. !----------------------------------------------------------------------------------!; ! !; ! Fatal Error: Input DOCC array has the wrong dimensions !; ! Error occurred in file: /home/conda/feedstock_root/build_artifacts/psi4_16838157 !; ! 05191/work/psi4/src/psi4/libscf_solver/hf.cc on line: 146 !; ! The most recent 5 function calls were: !; ! psi::PsiException::PsiException(std::__cxx11::basic_string<char, !; ! std::char_traits<char>, std::allocator<char> >, char const*, int) !; ! !; !----------------------------------------------------------------------------------!; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181:2659,energy,energy,2659,https://psicode.org,https://github.com/psi4/psi4/issues/3181,4,['energy'],['energy']
Energy Efficiency,"First of all, most structures don't converge. Only a few do. So that is an issue too. When I generated my own structures to calculate the torsion drive, one half of the molecule was ; fixed while I rotated the other half (around the fixed central bond). In that case, most structures converged and when I compared those structures to a molecular mechanics energy (which were fit to reproduce a torsion drive at the same level of QM theory) the energies were very close.; When I used optiking, and looked at the structures, it seemed like both sides of the molecule were bending to achieve the fixed dihedral angle (not sure if I'm being clear here) and when I compared the energy of the structures that did converge to the molecular mechanics energy, the energies were higher by a factor of ~10.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/647#issuecomment-286920989:356,energy,energy,356,https://psicode.org,https://github.com/psi4/psi4/issues/647#issuecomment-286920989,3,['energy'],['energy']
Energy Efficiency,"First, let's make sure we're agreed on what this metadata should look like. I'm envisioning the following skeleton:. ```; {; ""step"": { # Read from here if a displacement doesn't have its own step field; ""units"": str, # ""bohr"" or ""angstroms""; ""size"": float; },; ""stencil_size"": int, # 3 or 5, currently ; ""displacement_space"": str, # ""SALC"", ""normal"", ""internal"", ""cartesian""... always ""SALC"" for us; ""project_translations"": bool,; ""project_rotations"": bool,; ""geoms"": collections.OrderedDict([; disp_label: {; ""geometry"": np.ndarray,; ""energy"": float,; ""gradient"": np.ndarray, # May not be present!; ""step"": step dictionary defined above, # May not be present!; }; ]); }; ```. Feedback greatly appreciated. disp_label is going to be a bit tricky. `GRAD_0_X_+2` is a reasonable way to say the double displacement of atom 0 in the X coordinate, but if you're displacing CdSALCs, it won't do. We can either give labels so abstract they don't care about the coordinate_space, or we can give each coordinate_space its own labels. Either way, we need to specify which basis vector(s) in displacement space are being displaced and how much. Perhaps a tuple of ints? `(2, 0, 0, 0, 0, 0, 0, 0, 0)` would be the analogue of `GRAD_0_X_+2`. I like the abstraction, but typing all those extra 0's gets obnoxious, and it does not scale well with system size. A frozen dictionary might work, which would instead be `{0: 2}`, but frozen dictionaries aren't in the Python standard library.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1148#issuecomment-415834747:536,energy,energy,536,https://psicode.org,https://github.com/psi4/psi4/issues/1148#issuecomment-415834747,1,['energy'],['energy']
Energy Efficiency,Fix MCSCF Final CI Energy Mismatch,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2259:19,Energy,Energy,19,https://psicode.org,https://github.com/psi4/psi4/pull/2259,1,['Energy'],['Energy']
Energy Efficiency,Fix SAD guess energy printout,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1493:14,energy,energy,14,https://psicode.org,https://github.com/psi4/psi4/pull/1493,1,['energy'],['energy']
Energy Efficiency,Fix energy return value of optimize() for IRC jobs.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/292:4,energy,energy,4,https://psicode.org,https://github.com/psi4/psi4/pull/292,1,['energy'],['energy']
Energy Efficiency,"Fix looks good, thanks!. For the test, could you edit it to trigger your original problem and test the solution? I think it's still like extern2 at the moment. > In principle mol.set_nuclear_charge(0,7.05) should work to modify Z. Yeah, I tried for a couple hours once to see about setting fractional nuclear charges in Molecule that made a difference to a calculation; no luck.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1993#issuecomment-683299239:309,charge,charges,309,https://psicode.org,https://github.com/psi4/psi4/pull/1993#issuecomment-683299239,1,['charge'],['charges']
Energy Efficiency,"Fixed by 6f6d3aa1d039e4501bc5c5dc4190da1758e1c889 though I rather think now that defining hf/rhf/uhf/rohf/rsch/roscf/uscf for energy() was a bad idea (by me) a few years ago (except for ""hf"" itself). Nevertheless, as this ticket points out, having defined these names only for energy() confounds the driver logic. These convenience names are now in place for gradient() and property(). I'd be glad to rip out the lot (except for ""hf"") from energy(), grad(), prop() if others concur with my present assessment.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/103#issuecomment-109846967:126,energy,energy,126,https://psicode.org,https://github.com/psi4/psi4/issues/103#issuecomment-109846967,3,['energy'],['energy']
Energy Efficiency,"Fixes #1196. As an example, the following input file:; ```; memory 600 mb. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; energy('scf'). foo = [1, 2]; print(foo[3]); ```. ...now prints the following upon termination... ```; *** tstop() called on Jonathons-MacBook-Pro.local at Tue Sep 4 13:22:51 2018; Module time:; user time = 0.52 seconds = 0.01 minutes; system time = 0.05 seconds = 0.00 minutes; total time = 0 seconds = 0.00 minutes; Total time:; user time = 0.52 seconds = 0.01 minutes; system time = 0.05 seconds = 0.00 minutes; total time = 0 seconds = 0.00 minutes. Traceback (most recent call last):; File ""/Users/jonathonmisiewicz/psi4/objdirfindif/stage/usr/local/psi4/bin/psi4"", line 270, in <module>; exec(content); File ""<string>"", line 30, in <module>. IndexError: list index out of range. Printing out the relevant lines from the post-processed input file:; """""",""h2o""); core.IO.set_default_namespace(""h2o""); core.set_global_option(""BASIS"", ""cc-pVDZ""); energy('scf'); foo = [1, 2]; --> print(foo[3]). Psi4 stopped on: Tuesday, 04 September 2018 01:22PM; Psi4 wall time for execution: 0:00:00.78. *** Psi4 encountered an error. Buy a developer more coffee!; *** Resources and help at github.com/psi4/psi4.; ```. ## Todos; - [x] Fixes #1196 - if an error occurs Py-side, the post-processed line of output that called it is displayed, plus five back and forwards, for context. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1214:145,energy,energy,145,https://psicode.org,https://github.com/psi4/psi4/pull/1214,2,['energy'],['energy']
Energy Efficiency,Fixes #2940. Closes #2921. @mnottoli Could you quickly give this a second pair of eyes to check what I'm doing [here when I'm lowering the tolerance](https://github.com/psi4/psi4/blob/6173fba2dc820bba05918f3dfa599550704de4f5/tests/pytests/test_ddx.py#L112) is reasonable --- I'm thinking this is the escaped charge problem for this small system. Maybe we should just remove the test alltogether?. ## Checklist; - [X] Tests added for any new features; - [X] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [X] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2952:308,charge,charge,308,https://psicode.org,https://github.com/psi4/psi4/pull/2952,1,['charge'],['charge']
Energy Efficiency,Fixing integral overflow problem in (T) energy code,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/706:40,energy,energy,40,https://psicode.org,https://github.com/psi4/psi4/pull/706,1,['energy'],['energy']
Energy Efficiency,"Following from https://github.com/psi4/psi4/pull/1896#issuecomment-633623036, we observe that MKL 2020.1 (from conda) produces different answers at about 1e-8 in run-to-run execution for DF-HF at any basis set on Intel processors. https://software.intel.com/content/www/us/en/develop/documentation/mkl-windows-developer-guide/top/obtaining-numerically-reproducible-results/specifying-code-branches.html. Relevant envvar is `MKL_CBWR`. In the CI we're preempting with `MKL_CBWR=AUTO`. Will monitor future MKL releases. Please add to affected test list as you find them. * always passes: `COMPATIBLE`, `SSE2`, `AVX`, `AUTO`; * mixed pass/fail: `MKL_CBWR` unset; * always fails: `SSE4_2`. #### known affected test cases. * scf-cholesky-basis; * psimrcc-ccsd_t-4; * one of the IRCs",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1906:489,monitor,monitor,489,https://psicode.org,https://github.com/psi4/psi4/issues/1906,1,['monitor'],['monitor']
Energy Efficiency,"Following the discussion https://github.com/psi4/psi4/issues/1113, it'd be useful to add to the comment line of cube files (found in [libcubeprop](https://github.com/psi4/psi4/tree/master/psi4/src/psi4/libcubeprop)) info about the number of core electrons treated by ECP and _not_ to be found in the electron density of the cube file. * Note that not all types of cubes will need this (e.g., not HOMO/LUMO cubes); * Since the Chargemol input needs number of electrons and number of core electrons _per atom_, should identify which atom(s) cores belong to. (e.g., `Total core: 10 [e] from atom 4 (6) and 8 (4)`. I'm not sure where the 0-/1-indexing notice should go.)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1136:426,Charge,Chargemol,426,https://psicode.org,https://github.com/psi4/psi4/issues/1136,1,['Charge'],['Chargemol']
Energy Efficiency,"Follows from discussion in https://github.com/psi4/psi4public/issues/103 and a bit in https://github.com/psi4/psi4private/issues/101. We'd like reference `rhf`, `rohf`, etc. to behave exactly as they do at present, that is cry foul if inappropriate for active molecule or unavailable for the method at hand. But we'd like a new value `auto` for `reference` keyword that is the default and switches between rhf and uhf>rohf as appropriate, depending solely on the molecule. . Exactly how to this this is up for discussion. It's most appropriately done at activate-molecule-time, but don't have the machinery to track and undo that setting in the activalte molecule code. Maybe a generic function that's called in each run_\* in proc.py with inputs of the most restrictive reference setting among the called modules (e.g., rhf/rohf for run_detci that traverses scf _and_ detci modules). Then the generic function sets the reference to something legit (e.g., `rhf`) for the scope of the energy/grad/etc call. And the optstash object in each of the proc.py routines can be used to undo the driver-level reference setting and return to the user or default setting.; - [ ] implement above. break this into smaller bullets as needed.; - [ ] also, warn in output that reference changing",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/118:984,energy,energy,984,https://psicode.org,https://github.com/psi4/psi4/issues/118,1,['energy'],['energy']
Energy Efficiency,"For CI you can do:. ```; set NAT_ORBS true; cas_wfn, cas_e = energy('CASSCF', return_wfn =True). # Set new active space; energy('CASSCF', ref_wfn=True); ```. MP2 is a bit of a toss up as its difficult to get MP2 densities out of Psi4 at the moment. With the current version of Psi4, DF-MP2 Natural Orbitals are the default guess. A stop gap would be to use OMP2 guess orbitals.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/556#issuecomment-271442227:61,energy,energy,61,https://psicode.org,https://github.com/psi4/psi4/issues/556#issuecomment-271442227,2,['energy'],['energy']
Energy Efficiency,"For Psi4 1.0.54 [Git: Rev {master} 8d4cec3 dirty]; Hi,. When executing `energy(cbs,...)` and `delta_basis` equals a `corl_basis`, then the final MP2/CBS value is clearly wrong, and as a result the CBS value as well. Either E(CBS) will be too large or too small.; A typical output:. ```; ---------------------------------------------------------------------------------------------------------; scf hf / jun-cc-pvqz -152.13112737 xtpl_highest_1; corl mp2 / jun-cc-pv[tq]z 110.40871391 corl_xtpl_helgaker_2; delta fno-ccsd(t) - mp2 / jun-cc-pvtz -0.02698189 xtpl_highest_1; total CBS -41.74939535 ; -----------------------------------------------------------------------------------; ```. The previous values (""Stages"", ""Components"") all look ok at a glance. ```; Eg:; molecule test {; 0 1; O -1.551007 -0.114520 0.000000; H -1.934259 0.762503 0.000000; H -0.599677 0.040712 0.000000; O -1.551007 -0.114520 8.000000; H -1.934259 0.762503 8.000000; H -0.599677 0.040712 8.000000; }. memory 55 GB. set global {; cc_type df; INTS_TOLERANCE 1e-11; freeze_core true; }. # ok; #energy(cbs,scf_basis='jun-cc-pVQZ',corl_wfn='mp2', corl_basis='jun-cc-pv[tq]z',corl_scheme=corl_xtpl_helgaker_2,delta_wfn='fno-ccsd(t)',delta_basis='jun-cc-pVDZ'). # print error; energy(cbs,scf_basis='jun-cc-pVQZ',corl_wfn='mp2',corl_basis='jun-cc-pv[tq]z',corl_scheme=corl_xtpl_helgaker_2,delta_wfn='fno-ccsd(t)',delta_basis='jun-cc-pVTZ'). # error2, although this calc makes less sense...; #energy(cbs,scf_basis='aug-cc-pVQZ',corl_wfn='mp2',corl_basis='jun-cc-pv[tq]z',corl_scheme=corl_xtpl_helgaker_2,delta_wfn='fno-ccsd(t)',delta_basis='jun-cc-pVQZ'). ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/528:72,energy,energy,72,https://psicode.org,https://github.com/psi4/psi4/issues/528,4,['energy'],['energy']
Energy Efficiency,"For QM/MM, since you have many thousands of points, most QM programs use a simple external file for point charges so one does not have to send everything through the slower-but-smarter ""molecule recognition"" machinery. Besides, these external files are easier to write by the MM program interface as well.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1881#issuecomment-625891857:106,charge,charges,106,https://psicode.org,https://github.com/psi4/psi4/issues/1881#issuecomment-625891857,1,['charge'],['charges']
Energy Efficiency,"For comparison, this is ""Before"":; ```; ==> Energy Analysis <== . Raw electronic energy, E0; Total E0, Electronic energy at well bottom at 0 [K] -76.02703273 [Eh]. Zero-point energy, ZPE_vib = Sum_i nu_i / 2; Electronic ZPE 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Translational ZPE 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Rotational ZPE 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Vibrational ZPE 14.440 [kcal/mol] 60.419 [kJ/mol] 0.02301225 [Eh] 5050.605 [cm^-1]; Correction ZPE 14.440 [kcal/mol] 60.419 [kJ/mol] 0.02301225 [Eh] 5050.605 [cm^-1]; Total ZPE, Electronic energy at 0 [K] -76.00402048 [Eh]. Thermal Energy, E (includes ZPE); Electronic E 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Translational E 0.889 [kcal/mol] 3.718 [kJ/mol] 0.00141628 [Eh]; Rotational E 0.889 [kcal/mol] 3.718 [kJ/mol] 0.00141628 [Eh]; Vibrational E 14.441 [kcal/mol] 60.423 [kJ/mol] 0.02301378 [Eh]; Correction E 16.219 [kcal/mol] 67.860 [kJ/mol] 0.02584634 [Eh]; Total E, Electronic energy at 298.15 [K] -76.00118639 [Eh]. Enthalpy, H_trans = E_trans + k_B * T; Electronic H 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Translational H 1.481 [kcal/mol] 6.197 [kJ/mol] 0.00236046 [Eh]; Rotational H 0.889 [kcal/mol] 3.718 [kJ/mol] 0.00141628 [Eh]; Vibrational H 14.441 [kcal/mol] 60.423 [kJ/mol] 0.02301378 [Eh]; Correction H 16.811 [kcal/mol] 70.339 [kJ/mol] 0.02679052 [Eh]; Total H, Enthalpy at 298.15 [K] -76.00024221 [Eh]. Gibbs free energy, G = H - T * S; Electronic G -0.000 [kcal/mol] -0.000 [kJ/mol] -0.00000000 [Eh]; Translational G -8.837 [kcal/mol] -36.975 [kJ/mol] -0.01408306 [Eh]; Rotational G -2.205 [kcal/mol] -9.226 [kJ/mol] -0.00351384 [Eh]; Vibrational G 14.440 [kcal/mol] 60.418 [kJ/mol] 0.02301206 [Eh]; Correction G 3.398 [kcal/mol] 14.218 [kJ/mol] 0.00541516 [Eh]; Total G, Free enthalpy at 298.15 [K] -76.02161757 [Eh]; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2969#issuecomment-1562015995:44,Energy,Energy,44,https://psicode.org,https://github.com/psi4/psi4/pull/2969#issuecomment-1562015995,8,"['Energy', 'energy']","['Energy', 'energy']"
Energy Efficiency,"For fun, I computed the SCF energy from these DUMP files and both sum to the same SCF energy. It looks more like a representation issue than an actual bug. Its probably worth running these through a downstream program and seeing the result.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/980#issuecomment-384474917:28,energy,energy,28,https://psicode.org,https://github.com/psi4/psi4/issues/980#issuecomment-384474917,2,['energy'],['energy']
Energy Efficiency,"For me the biggest pro of C++11 is that is reduces the amount of code I have to write/maintain/debug.; - Defaulted (and deleted) constructors and assignment operators (mentiond by @dgasmith); - Liberal use of STL containers and `unique_ptr` means you should rarely have to write a destructor, and often don't have to write a copy constructor; - Constructor delegation. Cons:; - Template programming results in nasty compiler error messages that take experience to figure out; - Overuse of templates, auto, decltype, etc, can result unreadable code; - This can somewhat be fixed in the new PR workflow. Don't accept PRs which are a mess; - Some C++11 patterns can be intimidating to people who are still learning basic C++. As more libraries require C++11 (I think Ambit, TiledArray, and Cyclops all do), it should generally be embraced, with some reservations.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/238#issuecomment-182577836:43,reduce,reduces,43,https://psicode.org,https://github.com/psi4/psi4/issues/238#issuecomment-182577836,1,['reduce'],['reduces']
Energy Efficiency,"For methods (or methods in certain circumstances, say reference or conv/df) only available through an external add-on, do we want those opt-in? That is, certainly the external must be (1) installed and detectable. But do we also want to (2) require the user to `set qc_module=mrcc|adcc|chemps2` ? CheMPS2 has a long history of not requiring (2). ADCC has a shorter history of being the preferred backend and automatic choice, if present. I just switched MRCC syntax in #2731 to yes require (2). That was in keeping with the user opt-ing in via `energy(""mrccsd"")`. I can go either way, and I guess I'm now leaning toward not requiring (2) and adjusting MRCC accordingly. But it seems like something to discuss and settle on a consistent treatment.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2737#issuecomment-1268969031:545,energy,energy,545,https://psicode.org,https://github.com/psi4/psi4/pull/2737#issuecomment-1268969031,1,['energy'],['energy']
Energy Efficiency,For new methods list we should include followings (all of them were completed):; - DF-CCSD energy and gradient (RHF) ; - DF-CCD energy and gradient (RHF) ; - DF-\LambdaCCSD(T) energy; - DF-MP2.5 energy and gradient (RHF and UHF); - DF-MP3 energy and gradient (RHF and UHF); - DF-LCCD energy and gradient (RHF and UHF); - DF-OMP2.5 energy and gradient (RHF and UHF); - DF-OMP3 energy and gradient (RHF and UHF); - DF-OLCCD energy and gradient (RHF and UHF),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/367#issuecomment-214211172:91,energy,energy,91,https://psicode.org,https://github.com/psi4/psi4/issues/367#issuecomment-214211172,9,['energy'],['energy']
Energy Efficiency,"For some reason, `detci` is silently ignoring when the user supplies `num_frozen_uocc`. While [there are keywords that arrive it](https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html#term-FROZEN_UOCC-GLOBALS), they shouldn't be present here. Minimal Not-Working Example:. ```; import psi4; psi4.set_memory('500 MB'); be2 = psi4.geometry(""""""; 0 1; Be 0.000000 0.000000 -1.200000; Be 0.000000 0.000000 1.200000; symmetry d2h ; """"""); psi4.set_options({'basis' : 'sto-3g',; 'scf_type' : 'pk',; 'reference' : 'rhf',; 'e_convergence' : 1e-12,; 'd_convergence' : 1e-12,; 'num_frozen_docc' : 2,; 'num_frozen_uocc' : 3; }) ; psi4.core.set_output_file('output.dat', False); p4_Escf, p4_wfn = psi4.energy('SCF', return_wfn=True); fci_e, fci_wfn = psi4.energy('FCI', return_wfn=True); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2295:704,energy,energy,704,https://psicode.org,https://github.com/psi4/psi4/issues/2295,2,['energy'],['energy']
Energy Efficiency,"For some reason, the following script raises a segfault:. ```; molecule {; O; H 1 1.0 ; H 1 1.0 2 104.5; }. set {; reference rohf; basis cc-pVDZ; scf_type pk; freeze_core true; }. _, wfn = energy('bccd(t)',return_wfn = True); energy('mrccsdt', ref_wfn=wfn); ```. It runs fine when I use RHF Brueckner or ROHF SCF, so it's the ROHF Brueckner combination that's guilty.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2308:189,energy,energy,189,https://psicode.org,https://github.com/psi4/psi4/issues/2308,2,['energy'],['energy']
Energy Efficiency,"For the ""print error"" line, I get the below on a recent version. ```; ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Energy [Eh] Scheme; ---------------------------------------------------------------------------------------------------------; scf hf / jun-cc-pvqz -152.13112737 xtpl_highest_1; corl mp2 / jun-cc-pv[tq]z -0.59785921 corl_xtpl_helgaker_2; delta fno-ccsd(t) - mp2 / jun-cc-pvtz -0.02698189 xtpl_highest_1; total CBS -152.75596848 ; ---------------------------------------------------------------------------------------------------------; ```. The above looks ok to me, so I suspect you've hit #455 . You can easily patch your installation by doing https://github.com/psi4/psi4/commit/2e6b373102294cd59faf47d68044ff2402376e73 , no recompile required. Let me know if you think yours is a different issue.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/528#issuecomment-263048284:198,Energy,Energy,198,https://psicode.org,https://github.com/psi4/psi4/issues/528#issuecomment-263048284,1,['Energy'],['Energy']
Energy Efficiency,"For the `fnocc` modules, [`cepa(0)` means `lccsd`](https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/proc.py#L4655-L4660). I have only ever heard of `cepa(0)` meaning `lccd`. It is `lccd` in the `dct` module, it is `lccd` in the `occ` module, and it is `lccd` in the `dfocc` module. Can we make this consistent, or at least print a warning?. CEPA(0) is very important to my own research, and I had only ever heard of it as `lccd`. After doing some more digging, I've come across some sources that equate CEPA(0) and `lccsd`, but it seems to me to be a minority position. . Making this even more complicated, all requests for `cepa(0)` go to `fnocc`. `occ` and `dfocc` require `lccd`. `dct` also requires `cepa0`, but as a keyword rather than the energy name. Obligatory ping of @edeprince3 for `fnocc` issues and @loriab for defining methods consistently across modules and @jturney because this has been causing problems at CCQC.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1872:761,energy,energy,761,https://psicode.org,https://github.com/psi4/psi4/issues/1872,1,['energy'],['energy']
Energy Efficiency,"For the below molecule I get very strange MBIS charges with the combination of DDX implicit solvent and the `def2-TZVPPD` basis set compared to using `def2-TZVP`. I also only see this happen for molecules containing Iodine.; ```python; from qcelemental.models.common_models import Model; from qcelemental.models import AtomicInput, Molecule; import qcengine; import numpy. qc_mol = Molecule.from_data(; """"""; 0 1; C -2.770566610000 0.138041700000 0.070178320000; C -1.574766790000 -2.182402580000 0.041630990000; C 1.033304570000 -2.323434390000 -0.024422900000; C 2.435037490000 -0.121299970000 -0.061679550000; C 1.259017560000 2.209348470000 -0.033641890000; C -1.350150920000 2.328080550000 0.032456990000; I 6.389923580000 -0.318582790000 -0.161855610000; H -4.794725900000 0.238941070000 0.121450260000; H -2.664958600000 -3.891956620000 0.070604800000; H 1.951364020000 -4.127647160000 -0.046322210000; H 2.351710440000 3.913369620000 -0.062674850000; H -2.265188840000 4.137542080000 0.054275640000; units bohr; no_com; no_reorient; """"""; ); # create the psi4 job; spec = Model(method=""PBE0"", basis=""def2-TZVPPD""); task = AtomicInput(; molecule=qc_mol,; driver=""properties"",; keywords={; ""function_kwargs"": {; ""properties"": [; # ""dipole_polarizabilities"",; ""mbis_charges"",; ""quadrupole"",; ""mulliken_charges"",; ""dipole"",; ""lowdin_charges"",; ""wiberg_lowdin_indices"",; ""mayer_indices"",; ]; },; ""ddx"": True,; ""ddx_model"": ""pcm"",; ""ddx_solvent_epsilon"": 4.0,; ""ddx_solvent"": ""water"",; },; model=spec,; ); result = qcengine.compute(; input_data=task, raise_error=True, task_config={""ncores"": 4}, program=""psi4""; ); print(result.extras[""qcvars""][""MBIS CHARGES""]); ```; `def2-TZVPPD`; > [[ 2.5896714 ]; [ 0.9083468 ]; [ 0.96984483]; [ 1.82049044]; [ 1.84275851]; [ 1.27477756]; [-0.33630084]; [ 0.9999906 ]; [-0.6920741 ]; [-7.79483929]; [-2.0360328 ]; [ 0.45360942]]. `def2-TZVP`; >[[-0.14122935]; [-0.13601096]; [-0.12667168]; [-0.07069663]; [-0.12664356]; [-0.13593726]; [-0.05171043]; [ 0.15172393];",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3135:47,charge,charges,47,https://psicode.org,https://github.com/psi4/psi4/issues/3135,1,['charge'],['charges']
Energy Efficiency,"For the reduced PBS file, I think you'll want something like the below. For psidatadir, just ensure non-interference. need to have psipath existing before appending. and jobname must match pbs name. i've tested it on dftd3 at least. ```; #!/bin/tcsh; #PBS -j oe; #PBS -l pmem=2120mb; #PBS -N jobname; #PBS -V. setenv OMP_NUM_THREADS 4; setenv MKL_NUM_THREADS 4; cd $PBS_O_WORKDIR; setenv myscratch /scratch/user/psi4.$PBS_JOBID. foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Creating scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; ssh $i mkdir -p $myscratch; end. unsetenv PSI4DATADIR; unsetenv PSIDATADIR; setenv PSI_SCRATCH $myscratch; if ! ( $?PSIPATH ) setenv PSIPATH """"; setenv PSIPATH /path/to/external/modules:${PSIPATH}; setenv PSIPATH /path/to/python/modules:${PSIPATH}; /psi/install/directory/bin/psi4 -i jobname.in -o jobname.out. foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Removing scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; end; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/361#issuecomment-212251160:8,reduce,reduced,8,https://psicode.org,https://github.com/psi4/psi4/pull/361#issuecomment-212251160,1,['reduce'],['reduced']
Energy Efficiency,"For very heavy atoms, the innermost electrons experience a very high charge from the nucleus and have enough kinetic energy that relativistic effects are significant. They're also so tightly bound that they don't matter in most chemical applications, so it's better to treat them using a term that can properly handle these 'core' electrons, and remove them from the calculation. Therefore, only the valence electrons contribute to the density when ECPs are present so there must be some way to tell Chargemol that this is the case.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1113#issuecomment-412870923:69,charge,charge,69,https://psicode.org,https://github.com/psi4/psi4/issues/1113#issuecomment-412870923,3,"['Charge', 'charge', 'energy']","['Chargemol', 'charge', 'energy']"
Energy Efficiency,"For your first point, do you mean damping or level shifting? Remember that ""level shifting"" in `occ` is a misnomer. It has nothing to do with increasing the energy gap between occupied and virtual orbitals but is a _damping_ scheme that scales the diagonal elements of the DIIS B matrix. I was sloppy about this distinction when I first posted this.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1783#issuecomment-575614107:157,energy,energy,157,https://psicode.org,https://github.com/psi4/psi4/pull/1783#issuecomment-575614107,1,['energy'],['energy']
Energy Efficiency,"Forcing to disk_jk fixes the spherical-cartesian issue, but reproduces the same incorrect energy for the `dft-bench-ionization`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/961#issuecomment-385260107:90,energy,energy,90,https://psicode.org,https://github.com/psi4/psi4/pull/961#issuecomment-385260107,1,['energy'],['energy']
Energy Efficiency,"Forewarning that the [documentation in occ/dfocc](http://www.psicode.org/psi4manual/master/occ.html#) needed reworking even _before_ this commit, and it certainly will afterwards. I'll hold off on rewriting that (and updating the `driver.energy` docstring) until the rest of the PR looks good. How I decide to rewrite the manual will depend on if I need to make other changes, and the docstring updates will depend on the manual changes... Aren't dependencies fun?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1789#issuecomment-578806742:238,energy,energy,238,https://psicode.org,https://github.com/psi4/psi4/pull/1789#issuecomment-578806742,1,['energy'],['energy']
Energy Efficiency,"From discussion today, the following tasks to wrap up https://github.com/psi4/psi4public/issues/103; - [x] In driver.py, delete reference-bearing methods from procedures table (multiple places). Delete table:energy_scf rst table and its analogies. Salvage 'hf' from them and move it into the main rst table.; - [x] In proc.py, remove much of parse_scf_cases, maybe drop that fn and move it back into the run_scf\* as it was early this year.; - [x] Inspect test cases for removed functionality and adapt them. Check that the uhf that originally prompted this post is still working. Check that every energy/gradient rhf/uhf/rohf/cuhf/etc scf/hf/b3lyp does something sensible or exits gracefully.; - [x] Check the docs to see if they reference this functionality and adapt them.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/117:497,adapt,adapt,497,https://psicode.org,https://github.com/psi4/psi4/issues/117,3,"['adapt', 'energy']","['adapt', 'energy']"
Energy Efficiency,"From discussion today, the following tasks:; - [ ] In `driver.py`, delete reference-bearing methods from procedures table (multiple places). Delete `table:energy_scf` rst table and its analogies. Salvage `'hf'` from them and move it into the main rst table.; - [ ] In `proc.py`, remove much of `parse_scf_cases`, maybe drop that fn and move it back into the run_scf\* as it was early this year.; - [ ] Inspect test cases for removed functionality and adapt them. Check that the uhf that originally prompted this post is still working. Check that every energy/gradient rhf/uhf/rohf/cuhf/etc scf/hf/b3lyp does something sensible or exits gracefully.; - [ ] Check the docs to see if they reference this functionality and adapt them.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/103#issuecomment-121430626:451,adapt,adapt,451,https://psicode.org,https://github.com/psi4/psi4/issues/103#issuecomment-121430626,3,"['adapt', 'energy']","['adapt', 'energy']"
Energy Efficiency,"From the manual for Chargemol, eg on page 12 for CP2K input:; ```; <number of core electrons>; 36 28 <-- First number is the element number and second number is num_core; 47 30 <-- First number is the element number and second number is num_core; </number of core electrons>; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1113#issuecomment-412872503:20,Charge,Chargemol,20,https://psicode.org,https://github.com/psi4/psi4/issues/1113#issuecomment-412872503,1,['Charge'],['Chargemol']
Energy Efficiency,Full tests pass except DCFT5/6 which attempts to compare the energy to 10 decimal places. On that note it looks like the SCF/CCSD energy difference is about 5.e-10 or so. Not too surprising since the one-electron integrals are slightly different. Might try to rig up a test where we check the norm between the current and previous versions matrix elements for large basis sets and heavy atoms. ```; # 6 core update; nbf ntrial ao_overlap ao_kinetic ao_potential so_overlap so_kinetic so_potential; 0 28 1275 0.001758 0.000034 0.001248 0.001832 0.000177 0.001438; 1 98 104 0.002072 0.000253 0.004509 0.002503 0.000808 0.005072; 2 168 35 0.002780 0.000696 0.017807 0.003713 0.001938 0.019500; 3 238 17 0.003789 0.001310 0.044333 0.005827 0.003503 0.047694; 4 308 10 0.005321 0.002705 0.093579 0.009500 0.006423 0.096568; 5 378 6 0.007993 0.004080 0.178422 0.012842 0.009268 0.173306; 6 448 4 0.011465 0.006115 0.276808 0.017397 0.012930 0.282091; 7 518 3 0.015315 0.007962 0.426757 0.023739 0.018704 0.436435; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/592#issuecomment-277145466:61,energy,energy,61,https://psicode.org,https://github.com/psi4/psi4/pull/592#issuecomment-277145466,2,['energy'],['energy']
Energy Efficiency,"Further note that importing numpy first won't fix everything. Accelerate-linked `import psi4` can still break numpy linalg. Whether it's fixed by Accelerate to Numpy or Accelerate to mkl-rt-linked Numpy is undetermined. Seen in evec of degen pair of hessian ; ```projhess = np.array([[ 0.0159, 0.0000, 0.0000, -0.0069, -0.0000, 0.0000, -0.0069, -0.0000, 0.0000],; [ 0.0000, 0.0159, 0.0000, -0.0000, -0.0069, 0.0000, 0.0000, -0.0069, 0.0000],; [ 0.0000, 0.0000, 0.1832, 0.0000, 0.0000, -0.0793, 0.0000, 0.0000, -0.0793],; [-0.0069, -0.0000, 0.0000, 0.0030, 0.0000, 0.0000, 0.0030, 0.0000, 0.0000],; [-0.0000, -0.0069, 0.0000, 0.0000, 0.0030, 0.0000, -0.0000, 0.0030, 0.0000],; [ 0.0000, 0.0000, -0.0793, 0.0000, 0.0000, 0.0777, 0.0000, 0.0000, -0.0090],; [-0.0069, 0.0000, 0.0000, 0.0030, -0.0000, 0.0000, 0.0030, -0.0000, 0.0000],; [-0.0000, -0.0069, 0.0000, 0.0000, 0.0030, 0.0000, -0.0000, 0.0030, 0.0000],; [ 0.0000, 0.0000, -0.0793, 0.0000, 0.0000, -0.0090, 0.0000, 0.0000, 0.0777]]); ```. And the code turned out to be fully up-to-date. My foolishness was in not using the dev env that properly sets up MKL from conda and instead just using Mac built-ins. CMake does not have the power to select/reject dependencies based on their `ldd` profile.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/748#issuecomment-340284447:1185,power,power,1185,https://psicode.org,https://github.com/psi4/psi4/issues/748#issuecomment-340284447,1,['power'],['power']
Energy Efficiency,"Further to our discussion at Slack and e-mail, I made some tests on molecules with ECP's. Please see the attached G09 and psi4 input and log files. To obtain the psi4 results, the g- and h- shell coefficient of 0.000 in the Xe/Hg ECP has been replaced with 1D-10. A simple trapping of `tsum==0` in `erd_normalize_shell()` in `libmintsgshell.py` doesn't work properly - the term has to be sanity-checked in the loop before on lines 241-252. . For Hg, the `libmintsbasissetparser.py` had to be extended at line 202 to include the H-shell (thanks, Jesse). ![image](https://user-images.githubusercontent.com/5336995/36932575-1957f002-1ecb-11e8-84dc-b365f16b84b3.png). As can be seen from the table above, the absolute energies of the dimers are fine when compared to G09. The `nocp` interaction energy is also OK, however when CP-correction is involved, the results are not good - I imagine the ECP doesn't get properly ghosted. Finally, the psi4 calculations crash as `libmintsbasisset.py` is not able to find the basis sets for some reason - perhaps the basis set file is not passed into the routine properly? This also occurs when the basis set is defined in the job file using `basis { ... }`. [ECP-test.zip](https://github.com/psi4/psi4/files/1777311/ECP-test.zip)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/926:791,energy,energy,791,https://psicode.org,https://github.com/psi4/psi4/issues/926,1,['energy'],['energy']
Energy Efficiency,"Further, df-mp2 with conventional HF works for energy if user set the ""READ_SCF_3INDEX FALSE"" option. However, for analytic gradients it does not work. @loriab",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/245#issuecomment-186302823:47,energy,energy,47,https://psicode.org,https://github.com/psi4/psi4/issues/245#issuecomment-186302823,1,['energy'],['energy']
Energy Efficiency,GY; ---------------------------------------------------------------------------------------------------------. ==> Stages <==. ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Wt Energy [Eh] Scheme; ---------------------------------------------------------------------------------------------------------; scf hf / heavy-aug-cc-pv(q+d)z 1 -149.66713397 xtpl_highest_1; corl mp2 / heavy-aug-cc-pv([tq]+d)z 1 -150.20675446 corl_xtpl_helgaker_2; corl hf / heavy-aug-cc-pv([tq]+d)z -1 -149.67460090 corl_xtpl_helgaker_2; delta1 ccsd(t) / heavy-aug-cc-pv(d+d)z 1 -150.02005663 xtpl_highest_1; delta1 mp2 / heavy-aug-cc-pv(d+d)z -1 -150.01845040 xtpl_highest_1; ---------------------------------------------------------------------------------------------------------. ==> CBS <==. ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Energy [Eh] Scheme; ---------------------------------------------------------------------------------------------------------; scf hf / heavy-aug-cc-pv(q+d)z -149.66713397 xtpl_highest_1; corl mp2 / heavy-aug-cc-pv([tq]+d)z -0.53215356 corl_xtpl_helgaker_2; delta1 ccsd(t) - mp2 / heavy-aug-cc-pv(d+d)z -0.00160622 xtpl_highest_1; total CBS -150.20089375; ---------------------------------------------------------------------------------------------------------; ```; Which as an aside does have some weird duplicates like ; ```hf / heavy-aug-cc-pv(d+d)z 0.00000000 HF TOTAL ENERGY```. The order is a bit a different but everything does seem to match. But the mp2 energies are not the same. mp2/dz from the singlepoint:. ```delta1 mp2 / heavy-aug-cc-pv(d+d)z -1 -150.01871638 xtpl_highest_1```. mp2/dz from the hessian:; ```mp2 / heavy-aug-cc-pv(d+d)z * -150.01845040 MP2 TOTAL ENERGY```. The hessian mp2 energy comes from this df-mp2 calculation. This should be a conventional mp2 calculation afaik; ```; //>>>>>>>>>,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1897:5225,Energy,Energy,5225,https://psicode.org,https://github.com/psi4/psi4/issues/1897,1,['Energy'],['Energy']
Energy Efficiency,"GY; ---------------------------------------------------------------------------------------------------------. ==> Stages <==. ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Wt Energy [Eh] Scheme; ---------------------------------------------------------------------------------------------------------; scf hf / heavy-aug-cc-pv(q+d)z 1 -149.66713397 xtpl_highest_1; corl mp2 / heavy-aug-cc-pv([tq]+d)z 1 -150.20675446 corl_xtpl_helgaker_2; corl hf / heavy-aug-cc-pv([tq]+d)z -1 -149.67460090 corl_xtpl_helgaker_2; delta1 ccsd(t) / heavy-aug-cc-pv(d+d)z 1 -150.02005663 xtpl_highest_1; delta1 mp2 / heavy-aug-cc-pv(d+d)z -1 -150.01871638 xtpl_highest_1; ---------------------------------------------------------------------------------------------------------. ==> CBS <==. ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Energy [Eh] Scheme; ---------------------------------------------------------------------------------------------------------; scf hf / heavy-aug-cc-pv(q+d)z -149.66713397 xtpl_highest_1; corl mp2 / heavy-aug-cc-pv([tq]+d)z -0.53215356 corl_xtpl_helgaker_2; delta1 ccsd(t) - mp2 / heavy-aug-cc-pv(d+d)z -0.00134025 xtpl_highest_1; total CBS -150.20062777; ---------------------------------------------------------------------------------------------------------; ```. For an energy/gradient cbs uses df-mp2 for the cc-pv[t,q]z portion and conventional mp2 which I believe is pulled out of the CCSD(T) calculation. no df-CCSD(T) available ☹️ ; When I compute the Hessian, instead of doing a conventional MP2/DZ singlepoint it looks like a separate, df-mp2 calculation is performed. . Here's the Hessian CBS summary:. ```; ---------------------------------------------------------------------------------------------------------; Method / Basis Rqd Energy [Eh] Variable; ------------------------------------------------",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1897:2383,Energy,Energy,2383,https://psicode.org,https://github.com/psi4/psi4/issues/1897,1,['Energy'],['Energy']
Energy Efficiency,"GaTech has known that dftd3-version returns wrong energy from one of the C++ functional calls, leading to a failed test, when build _for_ (not necessarily _on_) 5930 processor family. Fundamental cause is a different number of DFT grid points. @lazaroid at [the forum](http://forum.psicode.org/t/different-dft-grid-behaviour-on-different-machines-very-different-dft-enrgies/460/5) has given a good analysis of the problem. This issue admits that there is a problem.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/677:50,energy,energy,50,https://psicode.org,https://github.com/psi4/psi4/issues/677,1,['energy'],['energy']
Energy Efficiency,"General philosophy has been that something in the energy/grad/etc call can silently trump an option ( otherwise reference rhf + energy b3lyp wouldn’t work). I think that holds for method, basis, fc, etc for g2. The hf3c isn’t so clear cut imo b/c the basis set is constant, so easy to switch out. Though as peter points out, it’s no longer hf3c then and shouldn’t get the “hf3c total energy “ set, only perhaps “scf total energy”. Comes down to does a method suggest or require certain options. . At one point, fc in this g2 sequence were behaving very strangely for me.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1530#issuecomment-486231622:50,energy,energy,50,https://psicode.org,https://github.com/psi4/psi4/issues/1530#issuecomment-486231622,4,['energy'],['energy']
Energy Efficiency,"Geom looks reasonable, and the calculation performed with the ghost atoms as *real* atoms goes just fine. Just this portion of the counterpoise-corrected intene goes off the rails. I've tested in both 1.6.x and 1.7.x; I don't have 1.8.x installed but if someone else does it's a very light weight calc to try. . Input:; ```set {; freeze_core true; basis def2-tzvppd; guess sad; }; molecule mol {; -1 1; @O -2.9015 2.0339 4.0653; @H -3.02228 2.5785 4.8759; @H -2.16632 1.41862 4.28713; O 0.0 0.0 0.0; C -0.67479 0.41341 -1.01466; O -0.87615 -0.42222 -1.96207; C -1.21823 1.79557 -1.10284; C -0.61745 2.829 -0.07843; H -1.1042 2.21706 -2.12009; H -2.30161 1.7313 -0.88466; H 0.4692 2.99187 -0.17478; H -0.84409 2.57987 0.97189; H -1.13803 3.76616 -0.33793; units angstrom; no_reorient; no_com; symmetry c1; }; energy('wb97m-v'); ```. Output:. ```. -----------------------------------------------------------------------; Psi4: An Open-Source Ab Initio Electronic Structure Package; Psi4 (inplace). Git: Rev (inplace). D. G. A. Smith, L. A. Burns, A. C. Simmonett, R. M. Parrish,; M. C. Schieber, R. Galvelis, P. Kraus, H. Kruse, R. Di Remigio,; A. Alenaizan, A. M. James, S. Lehtola, J. P. Misiewicz, M. Scheurer,; R. A. Shaw, J. B. Schriber, Y. Xie, Z. L. Glick, D. A. Sirianni,; J. S. O'Brien, J. M. Waldrop, A. Kumar, E. G. Hohenstein,; B. P. Pritchard, B. R. Brooks, H. F. Schaefer III, A. Yu. Sokolov,; K. Patkowski, A. E. DePrince III, U. Bozkaya, R. A. King,; F. A. Evangelista, J. M. Turney, T. D. Crawford, C. D. Sherrill,; J. Chem. Phys. 152(18) 184108 (2020). https://doi.org/10.1063/5.0006002. Additional Code Authors; E. T. Seidl, C. L. Janssen, E. F. Valeev, M. L. Leininger,; J. F. Gonthier, R. M. Richard, H. R. McAlexander, M. Saitow, X. Wang,; P. Verma, M. H. Lechner, A. Jiang, S. Behnle, A. G. Heide,; M. F. Herbst, and D. L. Poole. Previous Authors, Complete List of Code Contributors,; and Citations for Specific Modules; https://github.com/psi4/psi4/blob/master/codemeta.json; htt",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3051:808,energy,energy,808,https://psicode.org,https://github.com/psi4/psi4/issues/3051,1,['energy'],['energy']
Energy Efficiency,"Geometric direct minimization (GDM) has been described in [Mol. Phys. 100, 1713 (2002)](https://doi.org/10.1080/00268970110103642) for RHF and UHF, as well as [J. Theor. Comput. Chem. 1, 255 (2002)](https://doi.org/10.1142/S0219633602000233) for ROHF. The idea is to simply minimize the total energy with respect to orbital rotations, employing an approximate preconditioner obtained by block-diagonalization of the molecular orbital Fock matrix. The approach is pretty straightforward, and implementing it would go a long way to solving #888. Its implementation would also be feasible for a new Psi4 developer.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2214:293,energy,energy,293,https://psicode.org,https://github.com/psi4/psi4/issues/2214,1,['energy'],['energy']
Energy Efficiency,Geometry not updated for energy surface scan with dummy atoms,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2880:25,energy,energy,25,https://psicode.org,https://github.com/psi4/psi4/issues/2880,1,['energy'],['energy']
Energy Efficiency,"Ghost atoms should only carry basis functions (and in case of DFT xc quadrature grid points) but not ECPs. Psi4 does not remove the ECP. Tested for Psi4 Version 1.4a2.dev839+e273d32 installed via anaconda. Example: HF/def2-SVP for He-Xe dimer at 1 Angstrom separation, Xe as ghost atom. Expected energy: -2.855863 Hartree; Psi4: -2.818142 Hartree. Expected energy is obtained when removing ECP information from basis set file. Input file used for calculation:; ```; import psi4. geo = """"""; 0 1; he 0.0 0.0 0.0; @xe 1.0 0.0 0.0; """""". method = ""hf/def2-svp""; mol = psi4.geometry(geo). psi4.set_options({; 'scf_type': 'direct'; }). e = psi4.energy(method, molecule=mol); ```; Output file is attached.; [he-xe_ghost_hf_def2-svp_sp.log](https://github.com/psi4/psi4/files/4978823/he-xe_ghost_hf_def2-svp_sp.log)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1968:296,energy,energy,296,https://psicode.org,https://github.com/psi4/psi4/issues/1968,3,['energy'],['energy']
Energy Efficiency,"Gibbs and scf-guess work on clang but not gcc?!. Gibbs fails due to; ```; Traceback (most recent call last):; File ""/home/travis/build/psi4/psi4/build/stage/bin/psi4"", line 287, in <module>; exec(content); File ""<string>"", line 69, in <module>; File ""/home/travis/build/psi4/psi4/build/stage/lib/psi4/driver/driver.py"", line 1026, in optimize; """"""input, such as DOCC, is correct."""""" % (current_sym, initial_sym)). ValidationError: Point group changed! (cs <-- c2v) You should restart using the last geometry in the output, after carefully making sure all symmetry-dependent input, such as DOCC, is correct.; ```; Fixing by setting c2v symmetry. scf-guess fails due to; ```; TestComparisonError: 	UHF energy, SAD guess (a.u.): computed value (-99.3839116) does not match (-99.5312257) to 6 digits.; ```; Fixing by setting right occupations.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1429#issuecomment-449589237:700,energy,energy,700,https://psicode.org,https://github.com/psi4/psi4/pull/1429#issuecomment-449589237,1,['energy'],['energy']
Energy Efficiency,"Given the following input; ```; molecule {; symmetry c1; He 0.0 0.0 0.0; He 0.0 0.0 1000.0; }. set basis 6-31G; set GUESS_VECTOR UNIT; set NUM_DETS_PRINT 4000000000000; set e_convergence 1e-10; set r_convergence 1e-10; #set diag_method rsp; energy('fci'); ```. I get the same energy with SEM and RSP, but the wave functions are totally different: SEM yields; ```; The 36 most important determinants:. * 1 -0.995668 ( 0, 0) 1AX 2AX ; * 2 0.065607 ( 3, 3) 1AX 4AX ; * 3 0.065607 ( 2, 2) 2AX 3AX ; * 4 -0.004323 ( 5, 5) 3AX 4AX ; * 5 0.002076 ( 0, 3) 1AX 2AA 4AB ; * 6 0.002076 ( 3, 0) 1AX 2AB 4AA ; * 7 -0.002076 ( 0, 2) 1AA 2AX 3AB ; * 8 -0.002076 ( 2, 0) 1AB 2AX 3AA ; * 9 0.000137 ( 2, 5) 2AA 3AX 4AB ; * 10 0.000137 ( 5, 2) 2AB 3AX 4AA ; * 11 -0.000137 ( 3, 5) 1AA 3AB 4AX ; * 12 -0.000137 ( 5, 3) 1AB 3AA 4AX ; * 13 0.000004 ( 2, 3) 1AB 2AA 3AA 4AB ; * 14 0.000004 ( 3, 2) 1AA 2AB 3AB 4AA ; * 15 -0.000004 ( 0, 5) 1AA 2AA 3AB 4AB ; * 16 -0.000004 ( 5, 0) 1AB 2AB 3AA 4AA ; ```. while RSP gives; ```; The 36 most important determinants:. * 1 0.995668 ( 0, 0) 1AX 2AX ; * 2 0.089327 ( 2, 3) 1AB 2AA 3AA 4AB ; * 3 -0.023675 ( 2, 2) 2AX 3AX ; * 4 0.009265 ( 0, 4) 1AA 2AX 4AB ; * 5 0.004289 ( 5, 5) 3AX 4AX ; * 6 -0.000549 ( 4, 4) 2AX 4AX ; * 7 0.000262 ( 4, 3) 1AB 2AA 4AX ; * 8 0.000159 ( 0, 3) 1AX 2AA 4AB ; * 9 -0.000043 ( 2, 4) 2AX 3AA 4AB ; ```. The RSP solution is obviously wrong, since the quadruple excitation should be possible to write in terms of independent singles/doubles.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/558:241,energy,energy,241,https://psicode.org,https://github.com/psi4/psi4/issues/558,2,['energy'],['energy']
Energy Efficiency,"Good day Sir,. Please I am still finding it difficult to generate the potential energy; data for the CF molecule. Would you be pleased to be of help? I don't mind; having a virtual meeting with you so you can assist me. I am the one one; doing this kind of research in my school and my supervisor doesn't know; much in this area. Please help 🙏 me.; If you request any information pertaining this, I will send it across; immediately. Thank you in anticipation. Kind regards; Sanctus. On Tue, Jun 18, 2024, 02:27 Jonathon Misiewicz ***@***.***>; wrote:. > Based on your writing, I assume you're a student researcher.; >; > Posting error messages *like this* is not a good way to get help. Large; > input files like this make it difficult for developers to find the actual; > problem. It's best practice to simplify the input file as much possible; > while still making the error clear. Sometimes, doing that can tell *you*; > where the problem is. If you don't know how to do this kind of; > troubleshooting, consult your seniors in your research group or your; > professor.; >; > I've played around with your latest input file and can confirm that you; > have made a fairly straightforward mistake, but you've discarded important; > information. As an exercise, please post a *simplified* input that; > reproduces your problem, and a *complete* error message. Once you've done; > that, I'll update the error message to be more explicit and offer some; > advice on how to bypass this. (Though once you understand the error, it's; > fairly straightforward.); >; > —; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/3181#issuecomment-2174102955>, or; > unsubscribe; > <https://github.com/notifications/unsubscribe-auth/BA3DXYANKY74HK5CYFXZ6YLZH4TB5AVCNFSM6AAAAABI5T5SNGVHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMZDCNZUGEYDEOJVGU>; > .; > You are receiving this because you authored the thread.Message ID:; > ***@***.***>; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181#issuecomment-2184941549:80,energy,energy,80,https://psicode.org,https://github.com/psi4/psi4/issues/3181#issuecomment-2184941549,1,['energy'],['energy']
Energy Efficiency,"Good idea, now you mention it. I think I would go ahead and spell out `ENERGY`, though. Haven't been sparing characters in psivars thus far. LGTM",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/480#issuecomment-253110825:71,ENERGY,ENERGY,71,https://psicode.org,https://github.com/psi4/psi4/pull/480#issuecomment-253110825,1,['ENERGY'],['ENERGY']
Energy Efficiency,"Good news: it works fine for me. The patch below (n/c from @mlestep, I don't think) gives the output below (it just needed to be told to compute something).; ```; -; - outfile->Printf( ""\nProperties computed using the %s density matrix\n\n"", title_.c_str());; + if (title_ == """") {; + outfile->Printf(""OEProp: No title given, name of density matrix used for the following properties is %s\n"", Da_so_->name().c_str());; + } else {; + outfile->Printf( ""\nProperties computed using the %s density matrix\n\n"", title_.c_str());; + }; ```; ```; e, wfn = energy('MP2', return_wfn=True); oeprop(wfn, ""MULTIPOLES(1)""); ```; ```; Properties will be evaluated at 0.000000, 0.000000, 0.000000 [a0]; OEProp: No title given, name of density matrix used for the following properties is SCF density. Multipole Moments:. ------------------------------------------------------------------------------------; Multipole Electric (a.u.) Nuclear (a.u.) Total (a.u.); ------------------------------------------------------------------------------------. L = 1. Multiply by 2.5417462300 to convert to Debye; Dipole X : 0.0000000 0.0000000 0.0000000; Dipole Y : 0.0000000 0.0000000 0.0000000; Dipole Z : -0.2704549 1.1770271 0.9065722. --------------------------------------------------------------------------------; ```. Bad news: we [lost a test](https://github.com/psi4/psi4/commit/71bf174e60bc54b6a7424ce13dd28cef264fa850) (one of the two cc properties ones) and it fails. @amjames or TDC group, could you take a look?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1068#issuecomment-402301904:549,energy,energy,549,https://psicode.org,https://github.com/psi4/psi4/pull/1068#issuecomment-402301904,1,['energy'],['energy']
Energy Efficiency,"Good point -- @jeffschriber understands the issue and plans to address it sometime. The summary is that the new MBIS volume ratio functionality is only half available. The `energy(); oeprop(..., ""MBIS_VOLUME_RATIOS"")` route is fine, but `set scf_properties [mbis_volume_ratios]; energy()` fails b/c some necessary data (free atom volumes) isn't available. This isn't a regression. It'd just be nice to even up the capabilities, esp. as a qcschema run can only use the second form.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2299#issuecomment-926645575:173,energy,energy,173,https://psicode.org,https://github.com/psi4/psi4/issues/2299#issuecomment-926645575,2,['energy'],['energy']
Energy Efficiency,"Good to know on the `CMAKE_PREFIX_PATH` for python detection. That should probably become the preferred way to detect Anaconda python. To have multiple items in that var, use something like `-DCMAKE_PREFIX_PATH=""${PFXE}/install-libefp-so;${PFXE}/install-libint-6-so;${PFXE}/install-pcmsolver""`, in case you hadn't already worked that out. Quite right about 2.7. At some point I stopped adapting my dictionary comprehensions for the 2.6 folks. I'm guessing it will build/link, but you'd get driver errors at runtime. Should be detecting a 2.7 minimum in cmake. One thing we want to do really soon is allow/switch to 3.5, switch to pythonlibsnew cmake module, and probably to offload python library detection to pybind11, so don't spend too much time playing around with the current python cmake, except for your own edification. Do feel free to switch that line you linked to to 2.7 .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-249720030:386,adapt,adapting,386,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-249720030,1,['adapt'],['adapting']
Energy Efficiency,"Good, I agree that is the best way to fix the documentation. I just put this in the example as a test:. ```; molecule {; 0 1; O 1.01646 0.05097 0.09714; H 1.98435 0.06069 0.05173; H 0.73761 0.24513 -0.81034; }. set basis cc-pVTZ. E, wfn = properties('ccsd', properties=['dipole'], return_wfn=True). nmopi = wfn.nmopi(); Da_so = wfn.Da(); SCa = core.Matrix(""Overlap times Ca"", nmopi, nmopi); SCa.gemm(False, False, 1.0, wfn.S(), wfn.Ca(), 0.0); Da_mo = Matrix.triplet(SCa, Da_so, SCa, True, False, False); molden(wfn, 'ccsd_no.molden', density_a=Da_mo); ```. and the corresponding output from Molden:. ```; COORDINATES; used for orbitals/density. X Y Z. 1 O -0.103043 0.072862 0.000000; 2 H -0.015287 -1.756185 0.000000; 3 H 1.650657 0.599812 0.000000; ; Mulliken Charges; ================; ; O -0.4661; H 0.2332; H 0.2332; ; Sum of Mulliken Charges: 0.0003; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1485#issuecomment-456160965:763,Charge,Charges,763,https://psicode.org,https://github.com/psi4/psi4/issues/1485#issuecomment-456160965,2,['Charge'],['Charges']
Energy Efficiency,"Gradient and geometry are as follows:; ```; 	 C 0.0000000000 0.0000000000 0.0000000000; 	 H 0.0000000000 1.7065081419 -1.2066834793; 	 H 1.7065081419 0.0000000000 1.2066834793; 	 H -1.7065081419 0.0000000000 1.2066834793; 	 H 0.0000000000 -1.7065081419 -1.2066834793; 	 -0.0000000000 0.0000000000 -0.0000000011; 	 -0.0000000000 0.0054395963 -0.0038463766; 	 0.0054395971 0.0000000000 0.0038463771; 	 -0.0054395971 -0.0000000000 0.0038463771; 	 0.0000000000 -0.0054395963 -0.0038463766; ```. The YZ plane shift surprised me at first, but then I remembered [orientation is discontinuous in Psi](https://github.com/psi4/psi4/issues/1297#issuecomment-443296950). The shift still surprises me. I should have been clearer: it is the very first step that reduces the computational point group. So yes, the point group does change per geometry iteration.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1474#issuecomment-454249120:748,reduce,reduces,748,https://psicode.org,https://github.com/psi4/psi4/issues/1474#issuecomment-454249120,1,['reduce'],['reduces']
Energy Efficiency,Gradients on point charges (C++),MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2472:19,charge,charges,19,https://psicode.org,https://github.com/psi4/psi4/issues/2472,1,['charge'],['charges']
Energy Efficiency,"Great thanks! I'll add the tests right away. . And for `energy()` vs `tdscf()`, I don't feel too strongly either way. I like the simplicity of `energy()`, particularly since tdscf is only returning energies for now. `tdscf()` may be the way to go eventually since it is more flexible. One option is to have both work, easy to do since `energy()` is just calling a `tdscf()` function in `run_scf`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1885#issuecomment-626759803:56,energy,energy,56,https://psicode.org,https://github.com/psi4/psi4/pull/1885#issuecomment-626759803,3,['energy'],['energy']
Energy Efficiency,"Great! confirmed that `ctest` on libxc itself is clean for me. and in psi4, above error cleaned up, and `C_DSYEV` error cleaned up, too. For status, the 4 failing ctests are below. I'll run pytests next. ```. Printing out the relevant lines from the Psithon --> Python processed input file:; reference_wpbe_4 = -75.27504649361143; reference_wpbe_5 = -75.28530313989565; reference_wpbe_6 = -75.29249565176227; core.set_global_option(""DFT_OMEGA"", 0.4); func_call = energy('SCF', dft_functional=""wPBE""); --> compare_values(reference_wpbe_4, func_call, 6, ""wPBE0 omega=0.4""); core.set_global_option(""DFT_OMEGA"", 0.5); func_call = energy('SCF', dft_functional=""wPBE""); compare_values(reference_wpbe_5, func_call, 6, ""wPBE0 omega=0.5""); core.set_global_option(""DFT_OMEGA"", 0.6); func_call = energy('SCF', dft_functional=""wPBE""). !----------------------------------------------------------------------------------!; ! !; ! wPBE0 omega=0.4: computed value (-79.03914662) does not match !; ! (-75.27504649) to atol=1e-06 by difference (-3.76410013). !; ! !; !----------------------------------------------------------------------------------!. Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); <end of output>; Test time = 16.57 sec; ----------------------------------------------------------; Test Failed.; ""dft-custom"" end time: Jan 05 15:36 EST; ""dft-custom"" time elapsed: 00:00:16; ----------------------------------------------------------; ```. ```; Printing out the relevant lines from the Psithon --> Python processed input file:; core.IO.set_default_namespace(""ne""); core.set_global_option(""DFT_SPHERICAL_POINTS"", 770); core.set_global_option(""D_CONVERGENCE"", 1e-5); core.set_global_option(""BASIS"", ""cc-pvdz""); activate(ne); --> edft = energy(""ft97""); compare_values(-128.850056371480, edft, 4, ""Ne: FT97""). !-------------------------------------------------------!; ! !; ! Could not converge SCF iterations in 100 iterations. !; ! !; !------------------------------------",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-754900620:463,energy,energy,463,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-754900620,3,['energy'],['energy']
Energy Efficiency,"Greeting friends,; As you may have heard we are in the process of several fundamental Psi4 change. These include: rewriting the build system, removing Boost from Psi4, the ""inversion"", and a history rewrite. Read below for summaries of each step and where to find more detailed information. If you have any questions please ask them here or email us directly.; ## Steps. **Build system:**; The build system has moved to a ""super build"" strategy which reduces total compilation time and makes it much easier to add additional external libraries in the future. Developers will also see a reduction in the amount of time it takes to compile internal Psi4 changes and Psi4 can now link all external dependancies (libint for examples). Note that much of the github wiki on building psi4 is now plain wrong. Consult the top-level CMakeLists.txt to get building again. See [here](https://github.com/psi4/psi4/pull/442) for more information. . **Boost:**; Much of the Boost functionality that we have depended on in Psi4 has been implemented in C++11. In order to keep Psi4 up to date with best C++11 practices, reduce complexity, and generally remove several headaches, Boost has been removed from Psi4. The C++ Python bindings have been moved to PyBind11. See [here](https://github.com/psi4/psi4/issues/450) for more information. **Inversion:**; Currently the hybrid Python/C++ architecture of Psi4 is in an odd spot where Psi4 itself is a C++ program that calls an input file as a Python executable. This circular process will be removed and Psi4 itself will become a Python library capable of being imported just like any other module. This will allow Psi4 to be used in a normal python workflow with other scientific python programs like OpenMM, iPython, MolDesign, etc. In addition, python-based error messages will be more expressive and accurate. For users who enjoy the current Psithon interface the current Psi4 Psithon parsing equipment will be moved to a script named ""psi4"" in the binary location",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468:451,reduce,reduces,451,https://psicode.org,https://github.com/psi4/psi4/issues/468,1,['reduce'],['reduces']
Energy Efficiency,"Greetings, all. It's time to schedule Kill the Boost week! There are three major parts of this, as I see it: BoostPy, BoostNonPy, and FilterBranch. These are defined in the addendum to the top post of this ticket. I imagine the in-person and through-hangout times will be focused on the BoostPy target, though we should all be working on the BoostNonPy as convenient. So, please to add your availability to the weeks below. Reply or feel free to edit this comment. **Aug 15:** LAB, Jet-ok, best for andy; **Aug 22 (ACS Nat'l Mtg):** LAB, Jet-ok, works for andy; **Aug 29:** LAB, Jet-ok, andy traveling",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/450#issuecomment-237669294:29,schedul,schedule,29,https://psicode.org,https://github.com/psi4/psi4/issues/450#issuecomment-237669294,1,['schedul'],['schedule']
Energy Efficiency,"Guess I'll heed the aggressive `DeprecationWarning`. Anyways, confirmed that your conda setup looks good. Input also segfaults for me locally with a compiled copy, so it's a general psi issue and not isolated to the binary. Your trouble is that the input geometry isn't symmetric enough, so it's optimizing near-linear angles, which the optimizer DoesNotLike. When you clean up the geometry, it optimizes cleanly. ```; >>> cat i1265.in ; molecule PCl5 {; 0 1; P -0.001250 0.001863 -0.000253; Cl -0.017313 2.126472 -0.026384; Cl -0.005958 -2.126884 0.029666; Cl 0.991147 -0.031176 -1.764481; Cl -2.029231 -0.007514 0.039738; Cl 1.062458 0.037458 1.721684; }. PCl5.update_geometry(); PCl5.symmetrize(0.05). set basis def2-tzvp. optimize(""b3lyp""); ```. ```; >>> grep '~' i1265.out ; --------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------- ~; Convergence Criteria 1.00e-06 * 3.00e-04 * o 1.20e-03 * o ~; --------------------------------------------------------------------------------------------- ~; 1 -2642.57856550 -2.64e+03 8.58e-03 4.73e-03 o 3.65e-02 1.72e-02 o ~; 2 -2642.57939174 -8.26e-04 2.66e-03 1.41e-03 o 1.48e-02 7.24e-03 o ~; 3 -2642.57947730 -8.56e-05 4.34e-04 1.79e-04 o 1.87e-03 8.01e-04 o ~; 4 -2642.57947965 -2.35e-06 3.44e-04 1.27e-04 o 4.29e-03 1.56e-03 o ~; 5 -2642.57948325 -3.60e-06 1.41e-04 * 5.08e-05 o 2.69e-03 9.60e-04 o ~; 6 -2642.57948452 -1.27e-06 2.69e-05 * 1.27e-05 o 1.57e-04 * 6.33e-05 o ~; --------------------------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------------------------- ~; 1 -2642.578565499663 -2642.578565499663 0.00857526 0.00473269 0.03653776 0.0172",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1265#issuecomment-424906851:888,Energy,Energy,888,https://psicode.org,https://github.com/psi4/psi4/issues/1265#issuecomment-424906851,1,['Energy'],['Energy']
Energy Efficiency,H	32.47104	36.21876	90.76503; H	34.11454	35.52935	90.89115; H	33.84377	37.22581	91.29056; N	32.90475	37.13782	88.34874; C	33.15782	37.60052	86.97934; C	33.86886	38.96454	87.03422; O	34.80991	39.18532	86.28033; C	31.84528	37.71848	86.17268; C	32.03912	38.31152	84.79977; C	32.40330	37.64936	83.66144; C	31.91466	39.69401	84.43479; N	32.47754	38.52922	82.60241; C	32.22560	39.79734	83.05872; C	31.60991	40.86835	85.14938; C	32.23753	41.02592	82.38040; C	31.61276	42.08300	84.47411; C	31.93451	42.15430	83.10915; H	31.95003	36.90694	88.59560; H	33.86469	36.93525	86.48382; H	31.13951	38.33626	86.73028; H	31.39547	36.72527	86.09622; H	32.59682	36.59842	83.51011; H	32.83616	38.29956	81.69424; H	31.31032	40.82332	86.18651; H	32.49069	41.08281	81.32702; H	31.33751	42.98458	85.00576; H	31.93577	43.12034	82.61529; N	33.40238	39.87548	87.93259; C	33.95021	41.22796	88.13235; H	32.55100	39.65063	88.42989; H	33.33418	41.72562	88.88051; H	34.98535	41.18000	88.47977; H	33.91805	41.79950	87.20131; --; 0 1; C	24.40765	37.90938	79.56994; C	25.83546	38.31759	79.18785; O	26.04547	39.41352	78.66119; H	24.31593	36.86662	79.87982; H	24.08304	38.55074	80.39153; H	23.76087	38.10682	78.71472; N	26.80694	37.42577	79.45991; C	28.22549	37.63124	79.13952; C	28.56576	36.80191	77.91575; O	28.83057	35.60470	78.02521; C	29.13237	37.29707	80.33956; C	28.88026	38.15181	81.54233; N	28.83455	39.53680	81.45341; C	28.66488	37.79159	82.82840; C	28.59991	39.96651	82.68069; N	28.48108	38.95420	83.54114; H	26.56791	36.56463	79.92396; H	28.31093	38.69230	78.89909; H	30.16951	37.39398	79.98760; H	29.00411	36.24597	80.60454; H	28.96585	40.09061	80.62516; H	28.63154	36.81370	83.28055; H	28.52541	41.00151	82.97633; N	28.48465	37.43528	76.73944; C	28.68712	36.79551	75.44087; H	28.15661	38.38779	76.75046; H	28.43260	37.51232	74.66125; H	29.72488	36.47603	75.31892; H	28.05066	35.91312	75.34470; }. set {; scf_type DF; freeze_core True; basis aug-cc-pVDZ; }. energy('sapt2+'); ```; I'm using psi4 1.1rc1 Git: Rev {HEAD} 6db9b1f,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1828:5657,energy,energy,5657,https://psicode.org,https://github.com/psi4/psi4/issues/1828,1,['energy'],['energy']
Energy Efficiency,"H 1 1.2 2 104; > H 1 1.2 2 105 3 120; > F 1 1.3 2 106 4 121; > }; > ; > # reference start NRE, E, G; > ; > norm_nre_start = 37.6824945882 # Q-Chem; > norm_e_start = -139.5307182946 # Q-Chem; > norm_g_start = psi4.Matrix(5, 3) # Q-Chem; > contents = [ # have to swap x & y, and -x; > [ -0.07990533, -0.00642920, -0.00348020, 0.04874047, 0.04107426],; > [ -0.04900557, -0.00240633, 0.05677652, -0.03006882, 0.02470420],; > [ -0.06715450, 0.05113530, -0.00508959, -0.00643364, 0.02754243]]; > norm_g_start.set(zip(*contents)); > norm_rmsg_start = 0.041309 # Q-Chem; > ; > # Full Analytical Gradient of MP2 Energy (in au.); > ; > # 1 2 3 4 5; > ; > # 1 -0.04900557 -0.00240633 0.05677652 -0.03006882 0.02470420; > ; > # 2 0.07990533 0.00642920 0.00348020 -0.04874047 -0.04107426; > ; > # 3 -0.06715450 0.05113530 -0.00508959 -0.00643364 0.02754243; > ; > # reference optimized NRE, E (G should be 0); > ; > nre_opt = 37.5276022922 # Q-Chem; > e_opt = -139.5573922 # Q-Chem; > #norm_g_opt # Q-Chem; > ; > # Full Analytical Gradient of MP2 Energy (in au.); > ; > # 1 2 3 4 5; > ; > # 1 0.00000025 -0.00000001 -0.00000021 -0.00000007 0.00000005; > ; > # 2 0.00000010 0.00000008 0.00000000 0.00000001 -0.00000020; > ; > # 3 0.00000038 -0.00000005 -0.00000006 -0.00000023 -0.00000003; > ; > def test_norm_start(mol):; > g0 = gradient('mp2', molecule=mol); > compare_values(norm_nre_start, mol.nuclear_repulsion_energy(), 3, 'start nre'); > compare_values(norm_e_start, get_variable('CURRENT ENERGY'), 5, 'start ene'); > compare_values(norm_rmsg_start, g0.rms(), 4, 'start rms grad'); > compare_matrices(norm_g_start, g0, 3, 'start grad'); > ; > def test_zero_grad(mol):; > e, wfn = optimize('mp2', return_wfn=True, molecule=mol); > g = wfn.gradient(); > g.print_out(); > compare_values(nre_opt, mol.nuclear_repulsion_energy(), 3, 'opt nre'); > compare_values(e_opt, get_variable('CURRENT ENERGY'), 5, 'opt ene'); > compare_matrices(zerograd, g, 3, 'opt ZERO grad'); > ; > def test_odd_start(mol):; > g0 = grad",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/310#issuecomment-195966638:2567,Energy,Energy,2567,https://psicode.org,https://github.com/psi4/psi4/issues/310#issuecomment-195966638,1,['Energy'],['Energy']
Energy Efficiency,"H, wfn2 = psi4.hessian('b3lyp', return_wfn=True); wfn2.to_file(). Traceback (most recent call last):; File ""/root/.pycharm_helpers/pydev/pydevconsole.py"", line 364, in runcode; coro = func(); File ""<input>"", line 1, in <module>; File ""/opt/anaconda3/envs/py310/lib/python3.10/site-packages/psi4/driver/p4util/python_helpers.py"", line 360, in _core_wavefunction_to_file; 'Ca': wfn.Ca().to_array() if wfn.Ca() else None,; RuntimeError: ; Fatal Error: Wavefunction::Ca: Unable to obtain MO coefficients.; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1683589981287/work/psi4/src/psi4/libmints/wavefunction.cc on line: 804; The most recent 5 function calls were:; psi::Wavefunction::Ca() const. this error doesn't happen when calculating energy",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3068:761,energy,energy,761,https://psicode.org,https://github.com/psi4/psi4/issues/3068,1,['energy'],['energy']
Energy Efficiency,"HF iter 20: -87.74745909582182 3.42916e-01 1.57938e+00; 20A 2.235682 21A 2.639750 22A 4.068870	 |	 @DF-RHF iter 21: -49.76413449146133 3.79833e+01 2.29697e+01; 23A 4.230928 24A 4.338550 25A 32.834338	 |	 @DF-RHF iter 22: -77.94619510085352 -2.81821e+01 6.69706e+00; Final Occupation by Irrep:						 |	 @DF-RHF iter 23: -80.45392024701042 -2.50773e+00 4.59655e+00; A								 |	 @DF-RHF iter 24: -76.07267063391218 4.38125e+00 9.18998e+00; DOCC [ 4 ]							 |	 @DF-RHF iter 25: -61.85382425940151 1.42188e+01 1.05928e+01; NA [ 4 ]							 |	 @DF-RHF iter 26: -86.77218963929283 -2.49184e+01 2.75808e+00; NB [ 4 ]							 |	 @DF-RHF iter 27: -77.43543931232399 9.33675e+00 3.96819e+00; @DF-RHF Final Energy: -35.61046747457991				 |	 @DF-RHF iter 28: -83.24663680738689 -5.81120e+00 3.02602e+00; => Energetics <=							 |	 @DF-RHF iter 29: -84.59007629023938 -1.34344e+00 2.49302e+00; Nuclear Repulsion Energy = 0.0000000000000000		 |	 @DF-RHF iter 30: -86.14724570488455 -1.55717e+00 1.56145e+00; One-Electron Energy = -54.3510785737621944		 |	 @DF-RHF iter 31: -78.57013959925717 7.57711e+00 2.04327e+00; Two-Electron Energy = 18.7406110991822779		 |	 @DF-RHF iter 32: -85.83622153869187 -7.26608e+00 3.17187e+00; Total Energy = -35.6104674745799201		 |	 @DF-RHF iter 33: -87.27348788185634 -1.43727e+00 1.46175e+00; Computation Completed							 |	 @DF-RHF iter 34: -76.35072049818045 1.09228e+01 3.97637e+00; Properties will be evaluated at 0.000000, 0.000000, 0.000000 [a0	 |	 @DF-RHF iter 35: -70.56903511141743 5.78169e+00 1.24567e+01; Properties computed using the SCF density matrix			 |	 @DF-RHF iter 36: -75.56024107699382 -4.99121e+00 7.54313e+00; Multipole Moments:							 |	 @DF-RHF iter 37: 153.64365441909877 2.29204e+02 6.36152e+01; ---------------------------------------------------------------------	 |	 @DF-RHF iter 38: -73.57749835218766 -2.27221e+02 1.31647e+01; Multipole Electronic (a.u.) Nuclear (a.u.) 	 |	 @DF-RHF iter 39: -85.87858242035303 -1.23011e+01 1.51536e+00; -----------",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3072:10190,Energy,Energy,10190,https://psicode.org,https://github.com/psi4/psi4/issues/3072,1,['Energy'],['Energy']
Energy Efficiency,"HF iteration 4 energy: -320.87131145782928 -0.27613414969761 0.00341002372407; @Atomic UHF iteration 5 energy: -320.87922264084102 -0.00791118301174 0.00056898557067; @Atomic UHF iteration 6 energy: -320.87957561560631 -0.00035297476529 0.00008011419372; @Atomic UHF iteration 7 energy: -320.87958210143461 -0.00000648582829 0.00000325221580; @Atomic UHF Final Energy for atom XE: -320.87958210143461; Finished UHF Computation!. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-RHF iter 0: -324.53314738271274 -3.24533e+02 0.00000e+00 ; @DF-RHF iter 1: -328.19660724674617 -3.66346e+00 2.76741e-02 DIIS; @DF-RHF iter 2: -328.28542700545580 -8.88198e-02 1.26940e-02 DIIS; @DF-RHF iter 3: -328.29832629846925 -1.28993e-02 5.50180e-04 DIIS; @DF-RHF iter 4: -328.29835689704061 -3.05986e-05 4.43928e-05 DIIS; @DF-RHF iter 5: -328.29835733022713 -4.33187e-07 3.97861e-06 DIIS; @DF-RHF iter 6: -328.29835733491979 -4.69265e-09 2.37557e-07 DIIS; Energy converged.; ```; Works as well as in UGBS; ```; Initial Atomic UHF Energy: -5427.3786402080. Total Energy Delta E Density RMS. @Atomic UHF iteration 1 energy: -6483.96999842770038 -1056.59135821971540 1.04255411296391; @Atomic UHF iteration 2 energy: -6453.45541954978944 30.51457887791094 0.40784617759788; @Atomic UHF iteration 3 energy: -7117.90198205644811 -664.44656250665867 0.36315248442566; @Atomic UHF iteration 4 energy: -7267.18887860081304 -149.28689654436494 0.12758818454125; @Atomic UHF iteration 5 energy: -7299.46498016141504 -32.27610156060200 0.01509870939289; @Atomic UHF iteration 6 energy: -7299.96418197356979 -0.49920181215475 0.00107318606111; @Atomic UHF iteration 7 energy: -7299.97095115772936 -0.00676918415957 0.00050931817172; @Atomic UHF iteration 8 energy: -7299.97187492498688 -0.00092376725752 0.00008205774167; @Atomic UHF iteration 9 energy: -7299.97190856036286 -0.00003363537598 0.00000350327835; @Atomic UHF iteration 10 energy: -7299.97190876705281 -0.00000020668995 0.00000049737307; @Atomic UHF Final En",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1458#issuecomment-454279590:1500,Energy,Energy,1500,https://psicode.org,https://github.com/psi4/psi4/pull/1458#issuecomment-454279590,1,['Energy'],['Energy']
Energy Efficiency,"HREADS'] = str(ncores); os.environ[""OPENBLAS_NUM_THREADS""] = str(ncores) # export OPENBLAS_NUM_THREADS=4; os.environ[""MKL_NUM_THREADS""] = str(ncores) # export MKL_NUM_THREADS=4; os.environ[""VECLIB_MAXIMUM_THREADS""] = str(ncores) # export VECLIB_MAXIMUM_THREADS=4; os.environ[""NUMEXPR_NUM_THREADS""] = str(ncores) # export NUMEXPR_NUM_THREADS=4; # Set the max memory for PySCF; os.environ[""PYSCF_MAX_MEMORY""] = str(120000). import psi4; psi4.set_memory(int(120000*1e6)); numpy_memory = 40; import pyscf; from pyscf import dft; # pyscf.lib.misc.num_threads(n=8). xyzFilename = 'Decane_C10H22.xyz'. with open(xyzFilename,""r"") as f:; xyz_string = f.read(). psi4_geo = psi4.core.Molecule.from_string(xyz_string, dtype='xyz',fix_symmetry='c1', fix_orientation=True,fix_com=True). # run psi4 calculation; psi4.core.set_num_threads(ncores); psi4.set_options(; {; ""scf__reference"": ""rks"",; ""scf_type"": ""df"",; ""scf__maxiter"": 50,; ""basis"": 'def2-svp',; ""df_basis_scf"": 'def2-universal-jfit',; ""puream"":False,; ""guess"": ""sap"",; ""SCF_INITIAL_ACCELERATOR"":""none"",; ""dft_spherical_points"":302,; ""dft_radial_points"" :75,; ""diis_max_vecs"" : 6,; #""DFT_NUCLEAR_SCHEME"":""becke"",; ""E_CONVERGENCE"":1e-7,; }; ); energy = psi4.energy(name=""scf"",dft_functional=""svwn"", molecule=psi4_geo, return_wfn=False); energy = 0. # run PySCF calculation; mol = pyscf.M(; atom=xyzFilename, ; basis=""def2-svp"",; symmetry=False,; verbose=4,; cart=True,; ); # mol.max_memory = 10_000; mf = dft.rks.RKS(mol, xc=""LDA,VWNRPA"").density_fit(auxbasis='def2-universal-jfit'); mf.init_guess = 'vsap'; # mf.grids.level = 5; mf.verbose = 4; mf.grids.prune = None; mf.grids.atom_grid = (75, 302); mf.grids.becke_scheme = dft.gen_grid.stratmann; mf.small_rho_cutoff = 1e-15; mf.conv_tol = 1e-7; mf.kernel(); print('Nuc-Nuc PySCF= ', mol.energy_nuc()); print('One electron integrals energy',mf.scf_summary['e1']); print('Coulomb energy ',mf.scf_summary['coul']); print('EXC ',mf.scf_summary['exc']); ```. Is there any further advice that you might have?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2911#issuecomment-1487278053:1542,energy,energy,1542,https://psicode.org,https://github.com/psi4/psi4/issues/2911#issuecomment-1487278053,5,['energy'],['energy']
Energy Efficiency,"Happy to help. I'll reopen this issue as I believe there is a a todo item:. The `np.mean(rvals)` is probably not the best idea as a first guess of `r_e` for the fit. We should probably find the minimum of energy along the `rvals`, and then look at how symmetrically the points are distributed around it: I'd suggest if we have less than 3 points at either side of the minimum, we raise a warning. We could also rise the minimum number of points to 7... Another quick check would be to make sure there's only one minimum in the provided data, but I guess that might be a bit more involved.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1600#issuecomment-483556131:205,energy,energy,205,https://psicode.org,https://github.com/psi4/psi4/issues/1600#issuecomment-483556131,1,['energy'],['energy']
Energy Efficiency,Have energy derivatives intercept missing analytic methods on auto,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1149:5,energy,energy,5,https://psicode.org,https://github.com/psi4/psi4/issues/1149,1,['energy'],['energy']
Energy Efficiency,Have you been using UHF for open-shell? Looks like the diagnostics are defined for RHF and ROHF ([Lee article](https://www.sciencedirect.com/science/article/pii/S0009261403004354) agrees). I get the following print patterns by varying reference. ```. molecule {; #-1 1; 0 2; O 0.0 0.0 0.0; H 1.0 0.0 0.0; }. set {; scf_type pk; e_convergence 8; r_convergence 6; basis cc-pvdz; #reference rhf; #reference rohf; reference uhf; }. energy('ccsd'). print_variables(). # <<< RHF -1 1; #; # Solving CC Amplitude Equations; # ------------------------------; # Iter Energy RMS T1Diag D1Diag New D1Diag D2Diag; # ---- --------------------- --------- ---------- ---------- ---------- --------; # 0 -0.197723974784437 0.000e+00 0.000000 0.000000 0.000000 0.116770; # 1 -0.200886440649593 2.613e-02 0.003711 0.010524 0.010524 0.124980; # 2 -0.204664297940221 9.774e-03 0.004249 0.012062 0.012062 0.132065; # 3 -0.205054447874144 2.517e-03 0.004541 0.012898 0.012898 0.134019; # 4 -0.205079571860144 5.102e-04 0.004543 0.012929 0.012929 0.134351; # 5 -0.205083329294564 8.900e-05 0.004542 0.012931 0.012931 0.134394; # 6 -0.205082593077830 2.128e-05 0.004542 0.012931 0.012931 0.134399; # 7 -0.205082451507967 3.672e-06 0.004542 0.012931 0.012931 0.134400; # 8 -0.205082414774114 9.732e-07 0.004542 0.012932 0.012932 0.134400; # 9 -0.205082388497871 3.442e-07 0.004542 0.012932 0.012932 0.134400; # 10 -0.205082395296112 1.014e-07 0.004542 0.012932 0.012932 0.134400; # 11 -0.205082394755246 2.995e-08 0.004542 0.012932 0.012932 0.134400. # <<< ROHF -1 1; #; # Solving CC Amplitude Equations; # ------------------------------; # Iter Energy RMS T1Diag D1Diag New D1Diag D2Diag; # ---- --------------------- --------- ---------- ---------- ---------- --------; # 0 -0.197723974731951 0.000e+00 0.000000 0.000000 0.000000 0.000000; # 1 -0.200886440618237 3.243e-02 0.003711 0.010524 0.010524 0.000000; # 2 -0.204564275493213 1.028e-02 0.004234 0.012020 0.012020 0.000000; # 3 -0.205087135995954 3.025e-03 0.004542 0.0,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1681#issuecomment-516138878:428,energy,energy,428,https://psicode.org,https://github.com/psi4/psi4/issues/1681#issuecomment-516138878,2,"['Energy', 'energy']","['Energy', 'energy']"
Energy Efficiency,"Have you tested this against Python 2, too? I'm getting the following error at execution time on my Mac with Python 2.7:. ```; Traceback (most recent call last):; File ""<string>"", line 29, in <module>; File ""/Users/jturney/Code/Chemistry/psi4/source/lib/python/driver.py"", line 618, in energy; procedures['energy'][lowername](lowername, **kwargs); File ""/Users/jturney/Code/Chemistry/psi4/source/lib/python/proc.py"", line 2123, in run_adc; scf_helper(name, **kwargs); File ""/Users/jturney/Code/Chemistry/psi4/source/lib/python/proc.py"", line 1457, in scf_helper; e_scf = psi4.scf(precallback, postcallback); TypeError: No registered converter was able to produce a C++ rvalue of type std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > from this Python object of type unicode; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/160#issuecomment-130013400:286,energy,energy,286,https://psicode.org,https://github.com/psi4/psi4/pull/160#issuecomment-130013400,2,['energy'],['energy']
Energy Efficiency,"Having recently been fiddling about with orbital coefficients, I've discovered that for ""reference = rhf or rohf"", the name of the Matrix returned by Ca() of a Wavefunction object, i.e. wfn.Ca().name is ""Beta MO coefficients"" and also printed by wfn.Ca().print_out(). wfn.Cb().name is ""Beta MO coefficients"", as expected in these cases. For at least rhf (and also rohf?), alpha and beta should be the same (the matrices returned by Da() and Db() are simply named ""SCF density"" for ""reference = rhf"".) Having had a quick look, Cb is mostly just a copy of Ca, so I'm not quite sure where the (re)naming to ""Beta"" occurs for Ca. For ""reference = uhf or cuhf"", Ca() and Cb() return the names Alpha and Beta, as expected. Very simple input file to reproduce:. molecule water{; 0 1; O 0.000000 0.000000 0.135446; H -0.000000 0.866812 -0.541782; H -0.000000 -0.866812 -0.541782; }. set {; reference rhf; }. e, wfn = energy('hf/3-21G', return_wfn=True). wfn.Ca().print_out(); print(wfn.Ca().name). wfn.Da().print_out(); print(wfn.Da().name). wfn.Fa().print_out(); print(wfn.Fa().name)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2587:909,energy,energy,909,https://psicode.org,https://github.com/psi4/psi4/issues/2587,1,['energy'],['energy']
Energy Efficiency,"Having rerun my systems, I'm getting the same answers as before. Here's a sample input file.; ```; molecule {; 0 3; S -0.3387469593 0.0000000000 -1.1908558477; O 0.8847472382 0.0000000000 -0.3445279161; --; 0 1; H 0.4210342108 0.0000000000 1.7275935987; O -0.2480570158 0.0000000000 2.4179317954; H 0.2472257748 0.0000000000 3.2385953098; symmetry c1; no_reorient; no_com; }. set {; reference uhf; scf_type direct; guess sad; basis jun-cc-pV(D+d)Z; df_basis_sapt jun-cc-pV(D+d)Z-ri; }. energy('sapt0'); ```. The output file confirms that I'm running on `2d342fe`, and the SAPT output file is displaying `Open-shell: Jérôme Gonthier`, so this should be running your new code... but it's getting the same answers. Is there a reason for this? Perhaps this bug will only appear for two open-shell systems, but not for one open-shell and one closed-shell?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1948#issuecomment-656211542:486,energy,energy,486,https://psicode.org,https://github.com/psi4/psi4/pull/1948#issuecomment-656211542,1,['energy'],['energy']
Energy Efficiency,Having similar convergence problems in a different method trying to run SAPT2+ as a function of distance between two ions. Frozen core on or off does not fix the problem. Has this been fixed in master? Using 1.2.1 for now. Input:. molecule LiF {; 1 1; Li 0.000000000 0.000000000 0.000000000; --; -1 1; F 16.000000000 0.000000000 0.000000000. units angstrom; no_reorient; }; set globals {; basis cc-pVTZ; freeze_core false; df_scf_guess false; }; set_memory(32000000000); energy('sapt2+'). Output:. @DF-RHF iter 96: -105.75609224148533 -5.68434e-14 1.64830e-02 DIIS; @DF-RHF iter 97: -105.75609224148535 -1.42109e-14 1.64830e-02 DIIS; @DF-RHF iter 98: -105.75609224148535 0.00000e+00 1.64830e-02 DIIS; @DF-RHF iter 99: -105.75609224148502 3.26850e-13 1.64830e-02 DIIS; @DF-RHF iter 100: -105.75609224148509 -7.10543e-14 1.64830e-02 DIIS. ==> Post-Iterations <==. Failed to converge.; Iterations did not converge.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1433#issuecomment-465485877:471,energy,energy,471,https://psicode.org,https://github.com/psi4/psi4/issues/1433#issuecomment-465485877,1,['energy'],['energy']
Energy Efficiency,Heap left redzone: fa; Freed heap region: fd; Stack left redzone: f1; Stack mid redzone: f2; Stack right redzone: f3; Stack after return: f5; Stack use after scope: f8; Global redzone: f9; Global init order: f6; Poisoned by user: f7; Container overflow: fc; Array cookie: ac; Intra object redzone: bb; ASan internal: fe; Left alloca redzone: ca; Right alloca redzone: cb; ==10081==ABORTING; Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ). =================================================================; ==10025==ERROR: LeakSanitizer: detected memory leaks. Direct leak of 282802 byte(s) in 124 object(s) allocated from:; #0 0x7f0f92dd6afc in __interceptor_malloc /opt/conda/conda-bld/compilers_linux-64_1520532893746/work/.build/src/gcc-7.2.0/libsanitizer/asan/asan_malloc_linux.cc:62; #1 0x557f1794b8b3 in PyObject_Malloc (/shared/raimis/opt/miniconda/envs/psi4/bin/python3.6+0xe88b3). Direct leak of 2 byte(s) in 2 object(s) allocated from:; #0 0x7f0f92dd6afc in __interceptor_malloc /opt/conda/conda-bld/compilers_linux-64_1520532893746/work/.build/src/gcc-7.2.0/libsanitizer/asan/asan_malloc_linux.cc:62; #1 0x557f17949fe0 in _PyObject_Alloc.isra.0 (/shared/raimis/opt/miniconda/envs/psi4/bin/python3.6+0xe6fe0). Indirect leak of 19819 byte(s) in 22 object(s) allocated from:; #0 0x7f0f92dd6afc in __interceptor_malloc /opt/conda/conda-bld/compilers_linux-64_1520532893746/work/.build/src/gcc-7.2.0/libsanitizer/asan/asan_malloc_linux.cc:62; #1 0x557f1794b8b3 in PyObject_Malloc (/shared/raimis/opt/miniconda/envs/psi4/bin/python3.6+0xe88b3). Indirect leak of 648 byte(s) in 1 object(s) allocated from:; #0 0x7f0f92dd6df8 in __interceptor_realloc /opt/conda/conda-bld/compilers_linux-64_1520532893746/work/.build/src/gcc-7.2.0/libsanitizer/asan/asan_malloc_linux.cc:75; #1 0x557f1797673c in _PyObject_GC_Resize (/shared/raimis/opt/miniconda/envs/psi4/bin/python3.6+0x11373c). SUMMARY: AddressSanitizer: 303271 byte(s) leaked in 149 allocation(s). 0% tests passed,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1220#issuecomment-421335756:18153,allocate,allocated,18153,https://psicode.org,https://github.com/psi4/psi4/pull/1220#issuecomment-421335756,1,['allocate'],['allocated']
Energy Efficiency,"Hello David. Single determinant PSI4 output works pretty well and have been tested.; There is nothing special in the code for PSI4 converter https://github.com/Konjkov/molden2qmc/blob/master/molden2qmc.py#L962. CASINO multi-determinant extension composes from some single determinant (i.e. PSI4 CASSCF(3,4) MOLDEN output) and electron promotion data.; 1-st determinant:; ground state; 2-nd determinant:; up electron promote from 2 orbital to 4; down electron promote from 2 orbital to 4; 3-rd determinant:; up electron promote from 2 orbital to 5; down electron promote from 2 orbital to 5; The first determinant is taken into account with the weighting factor = 0.972153; 2-nd with = 0.165709; 3-rd with = 0.165709; as described in PSI4 output:. MCSCF Root 0 energy = -24.563671749133171. Active Space Natural occupation numbers:; ; A 1.890162 A 1.000000 A 0.054919; A 0.054919; ; The 20 most important determinants:; ; * 1 0.972153 ( 0, 0) 2AX 3AA.; * 2 0.165709 ( 4, 3) 3AA 5AX.; * 3 0.165709 ( 2, 2) 3AA 4AX. symmetry is turned out.; For this multi-determinant configuration CASINO outputs (roughly). E = -24.431(1) ; var = 5.3(1) ; Total CASINO CPU time ::: 181.2400 seconds. if I take 2-nd and 3-rd determinants with weighting factor = -0.165709; CASINO outputs (roughly). E = -24.565(1) ; var = 5.0(1) ; Total CASINO CPU time ::: 256.1500 seconds. which very well coincides with the PSI4 output energy. Best, Vladimir.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/796#issuecomment-331682241:760,energy,energy,760,https://psicode.org,https://github.com/psi4/psi4/issues/796#issuecomment-331682241,2,['energy'],['energy']
Energy Efficiency,"Hello Francesco. I didn't check exactly the sign. I will try this with very small basis like STO-3G.; But I can take the orbitals from MOLDEN output and coefficients (with signs) and put it into CASINO program input, as I usually do this many times for another systems. Then I can recalculate energy with variational monte calro (VMC) method. I have to get the same energy but I didn't in the case of Boron.; Than I changed coefficients signs by hands and get the right VMC energy.; It makes me think that the sign was wrong. would you suggest a way to check quickly if the sign of coefficients is correct. I will use it. Best, Vladimir.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/796#issuecomment-326840681:293,energy,energy,293,https://psicode.org,https://github.com/psi4/psi4/issues/796#issuecomment-326840681,3,['energy'],['energy']
Energy Efficiency,"Hello Francesco.; I don't quite understand you. The only matrix determine orbital coefficients is [MO] section data of the MOLDEN file and different determinants have only different occupation numbers of there orbitals.; I only sort MO orbitals by energy if required before feed it into CASINO. I will upload MOLDEN outputs for CASSCF and ROHF cases approximately in 2 hours when I will have access to the server. But you can also create these files easily from my inputs or you talk about some other matrices. Best, Vladimir.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/796#issuecomment-331875695:248,energy,energy,248,https://psicode.org,https://github.com/psi4/psi4/issues/796#issuecomment-331875695,1,['energy'],['energy']
Energy Efficiency,"Hello Psi4 community,; I was trying to simulate a simple reference model, pentacene on two layers of NaCl but cannot get it to converge. I am posting here instead of the Psi4 forum, since it does not support https, but I hope that someone can help me with this issue and see if I made any wrong assumptions. . In the input file I fixed the coordinated of the lower most NaCl monolayer and I use the OptKing solver (maybe geomeTRIC is more efficient here but did not know the input) with b3lyp-d3 (in hope to have a vdW-correction) and 6-31G as the basis set. I think that in itself b3lyp is not ideal for the surface, but I think that a plane-wave approach is better for the crystal itself. I'm interested in the electronic structure of the molecule in presence of the insulating layer, compared to gas-phase and in the atomic positions of the relaxed system. Any kind of help is much appreciated! Thank you in advance. My output file is the following:; ```; ==> Input File <==. --------------------------------------------------------------------------; memory 25 GB. set basis 6-31G. molecule {; 0 1; H 3.7651778770 9.5503410836 -1.8903043554 ; H 3.7651778770 7.0753410836 -1.8903043554 ; H 17.8091778770 7.0753410836 -1.8903043554 ; H 17.8091778770 9.5503410836 -1.8903043554 ; C 4.7039778770 9.0113410836 -1.8890043554 ; C 4.7039778770 7.6143410836 -1.8890043554 ; C 16.8703778770 7.6143410836 -1.8890043554 ; C 16.8703778770 9.0113410836 -1.8890043554 ; H 5.8910778770 10.7979410836 -1.8875043554 ; H 5.8910778770 5.8277410836 -1.8875043554 ; H 15.6832778770 5.8277410836 -1.8875043554 ; H 15.6832778770 10.7979410836 -1.8875043554 ; C 5.9119778770 9.7145410836 -1.8874043554 ; C 5.9119778770 6.9110410836 -1.8874043554 ; C 15.6623778770 6.9110410836 -1.8874043554 ; C 15.6623778770 9.7145410836 -1.8874043554 ; C 7.1332778770 9.0207410836 -1.8859043554 ; C 7.1332778770 7.6048410836 -1.8859043554 ; C 14.4410778770 9.0207410836 -1.8859043554 ; C 14.4410778770 7.6048410836 -1.8859043554 ; H 8.34",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2709:439,efficient,efficient,439,https://psicode.org,https://github.com/psi4/psi4/issues/2709,1,['efficient'],['efficient']
Energy Efficiency,"Hello all; I've tried to load molecular geometry from XYZ-file. 3; 0 2; C 0.000000000000 0.000000000000 0.000000000000; C 0.000000000000 0.000000000000 1.211315440000; H 0.000000000000 0.000000000000 2.275843410000. charge = 0 multiplicity = 2. my input. memory 2 Gb; qmol = qcdb.Molecule.init_with_xyz('mol.xyz'); lmol = geometry(qmol.create_psi4_string_from_molecule()); set basis cc-pVQZ; set reference uhf; hf_e, hf_wfn = energy('scf', return_wfn=True); molden(hf_wfn, 'molden.dat'). I've got the following issue:. ```; Traceback (most recent call last):; File ""/home/vladimir/psi4conda/bin/psi4"", line 248, in <module>; exec(content); File ""<string>"", line 21, in <module>; File ""/home/vladimir/psi4conda/lib//python3.5/site-packages/psi4/driver/qcdb/molecule.py"", line 147, in init_with_xyz; instance.add_atom(el2z[fileAtom], fileX, fileY, fileZ, fileAtom, el2mass[fileAtom], el2z[fileAtom]); File ""/home/vladimir/psi4conda/lib//python3.5/site-packages/psi4/driver/qcdb/libmintsmolecule.py"", line 1173, in add_atom; raise ValidationError(""Molecule::add_atom: Adding atom on top of an existing atom.""); ```; this exception raises after H atom insertions.; my version Git: Rev {HEAD} add49b9. when I rearranged my XYZ-file to the following. 3; 0 2; H 0.000000000000 0.000000000000 2.275843410000; C 0.000000000000 0.000000000000 0.000000000000; C 0.000000000000 0.000000000000 1.211315440000. all works fine. Best wishes, Vladimir.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/804:216,charge,charge,216,https://psicode.org,https://github.com/psi4/psi4/issues/804,2,"['charge', 'energy']","['charge', 'energy']"
Energy Efficiency,"Hello folks, . I am trying to obtain some multipoles using `psi4.gdma`. While using psi4 `1.6.1` I am able to run [this](https://github.com/psi4/psi4/blob/master/samples/gdma/gdma1/input.dat) example. ; Unfortunately, the program unexpectedly fails when running the **Python** snippet shown below, resulting in no information. . Any advice on how to troubleshoot this issue?; Thanks :). Here's what I'm running:. ```; import psi4; #psi4.core.be_quiet(). water = psi4.geometry(""""""; O 0.000000 0.000000 0.117176; H -0.000000 -0.756950 -0.468706; H -0.000000 0.756950 -0.468706; noreorient; nocom; """"""). psi4.set_options({""scf_type"" : ""pk"",; ""basis"" : ""cc-pvtz"",; ""d_convergence"" : 10,; }). psi4.set_options({ ""gdma_switch"" : 0,; ""gdma_radius"" : [ ""H"", 0.65 ],; ""gdma_limit"" : 2,; ""gdma_origin"" : [0.0, 0.0, 0.117176]. }). e, wfn = psi4.energy(""scf"", return_wfn=True, molecule=water); psi4.gdma(wfn). print(""I did not die while attempting to generate multipoles""); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2706:834,energy,energy,834,https://psicode.org,https://github.com/psi4/psi4/issues/2706,1,['energy'],['energy']
Energy Efficiency,"Hello, ; I am using Psi4 to perform QM/MM simulations, but I failed to find the gradient for the point charges.; So is there any way to get the gradient of point charges in QM/MM calculations? ; Thanks in advance",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2244:103,charge,charges,103,https://psicode.org,https://github.com/psi4/psi4/issues/2244,2,['charge'],['charges']
Energy Efficiency,"Hello, I have been trying to geometry optimize >100 dimer pairs of organic molecules. I have a 60% success rate. I am struggling with the 40% that fail. I have tried using second order convergence and level shifting. Below is an example of a citric acid dimer that fails to converge in 100 scf iterations. The systems all seem to follow the same trend. The first couple of iterations converge the wavefunction, but eventually the scf fails to converge. The starting dimer configuration is generated using a steepest descent MM energy minimization. I can provide the entire log file, or other files as well. On other runs I have tried using LEVEL_SHIFT, but it did not help. ```; molecule dimer {; C 999.407602 1002.751600 1001.828601; C 1000.887601 1002.788600 1001.459601; O 1001.420601 1002.207601 1000.537601; O 1001.632601 1003.490600 1002.306601; C 998.553602 1001.680601 1001.080601; C 997.058603 1001.817601 1001.472601; C 996.802603 1001.523601 1002.938600; O 996.673603 1002.368601 1003.793600; O 996.522603 1000.257601 1003.219600; C 999.058602 1000.222601 1001.385601; O 999.978601 999.942601 1002.133601; O 998.491602 999.266602 1000.641601; O 998.619602 1001.964601 999.673602; H 999.003602 1003.752600 1001.641601; H 999.352602 1002.590600 1002.911600; H 1002.505600 1003.321600 1001.914601; H 996.453603 1001.125601 1000.874601; H 996.697603 1002.829600 1001.259601; H 996.300603 1000.363601 1004.159600; H 999.068602 998.498602 1000.848601; H 999.237602 1001.315601 999.248602; --; C 1000.474601 997.570602 997.565602; C 999.917601 998.148602 996.273603; O 1000.520601 998.883602 995.519603; O 998.741602 997.650602 995.912603; C 1001.785601 998.271602 998.044602; C 1002.427600 997.524602 999.252602; C 1001.663601 997.719602 1000.554601; O 1000.490601 997.439602 1000.697601; O 1002.249601 998.561602 1001.401601; C 1001.507601 999.774602 998.424602; O 1000.400601 1000.275601 998.494602; O 1002.573600 1000.457601 998.849602; O 1002.730600 998.191602 996.966603; H 1000.645601 996.5",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2338:527,energy,energy,527,https://psicode.org,https://github.com/psi4/psi4/issues/2338,1,['energy'],['energy']
Energy Efficiency,"Hello, I'm the developer who implemented ADIIS in Psi4. Thanks for your patience. Between some life changes and issues compiling Psi4, I haven't been able to look at this issue previously. 1. Following Susi's suggestion, B3LYP converges straightforwardly. The SCF iterations takes one bad step early on, but this happens whether ADIIS is on or off.; 2. If I disable ADIIS completely using your original functional, it _still_ fails. Once the energy gets to around 284 Eh, it doesn't become negative again. **Contrary to the topic title, ADIIS is not at fault**.; 3. The title suggests that you've had previous ADIIS issues previously. If so, please send me specific examples. My experience has been that ADIIS itself is fine, but can break when other parts of the code are badly behaved. I'll do some digging to see if I can suggest an alternate protocol that will actually converge.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3051#issuecomment-1748931430:442,energy,energy,442,https://psicode.org,https://github.com/psi4/psi4/issues/3051#issuecomment-1748931430,1,['energy'],['energy']
Energy Efficiency,"Hello,. Somehow the `pytest` module is imported during the DFT calculation with dispersion correction and crashes Psi4 if `pytest` is missing. It can be fixed simply by installing the missing module, but I thought that it's worth reporting still in order to patch the packaging. Psi4: v.1.8 from `conda-forge` (installed in a clean env using ` conda install psi4 python=3.10 -c conda-forge/label/libint_dev -c conda-forge `). Code to reproduce:. ```python; molecule {; 0 1; O 0.0 0.5 0.0; H 0.5 0.0 0.0; H -0.5 0.0 0.0. no_reorient; symmetry c1; }. memory 8GB; set_num_threads(2); set freeze_core True. E, wfn = energy('wb97x-d/6-311g**',return_wfn=True); ```. Fails with the following error:. ```; Traceback (most recent call last):; File ""/home/q-posev/miniconda3/envs/psi4-v18/bin/psi4"", line 372, in <module>; exec(content); File ""<string>"", line 31, in <module>; File ""/home/q-posev/miniconda3/envs/psi4-v18/lib/python3.10/site-packages/psi4/driver/driver.py"", line 526, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/q-posev/miniconda3/envs/psi4-v18/lib/python3.10/site-packages/psi4/driver/procrouting/proc.py"", line 2574, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/home/q-posev/miniconda3/envs/psi4-v18/lib/python3.10/site-packages/psi4/driver/procrouting/proc.py"", line 1769, in scf_helper; scf_wfn = scf_wavefunction_factory(name, base_wfn, core.get_option('SCF', 'REFERENCE'), **kwargs); File ""/home/q-posev/miniconda3/envs/psi4-v18/lib/python3.10/site-packages/psi4/driver/procrouting/proc.py"", line 1430, in scf_wavefunction_factory; superfunc, _disp_functor = build_functional_and_disp(name, restricted=(reference in [""RKS"", ""RHF""]), **kwargs); File ""/home/q-posev/miniconda3/envs/psi4-v18/lib/python3.10/site-packages/psi4/driver/procrouting/proc.py"", line 1407, in build_functional_and_disp; _disp_functor = empirical_dispersion.EmpiricalDispersion(name_hint=superfunc.name(),; File ""/home/q-posev/mi",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3003:612,energy,energy,612,https://psicode.org,https://github.com/psi4/psi4/issues/3003,1,['energy'],['energy']
Energy Efficiency,"Hello,. We have developed software around psi4 to perform potential energy scans. We submit psi4 jobs to our cluster. Our cluster architecture is allocated where each node has 64 cores with each core having 1 thread enabled. My psi4 is installed pythonically. . When I submit jobs I request how many predicted cores I need:. ```bash; -pe smp 64; ```. Initially, when I submitted the jobs, I would pass this flag into `psi4.set_num_threads` but since each core has 1 thread it only used 1 the whole scan. Which would not work for our purpose, it's too slow. . When reading the documentation I can set the OMP and MKL flags prior to running the script. ```bash; export MKL_NUM_THREADS=48; export OMP_NUM_THREADS=48; ```. I saw that psi4 started spreading the loads across the cores but it looks like there are spikes where it clocks over the 48 requested cores that I thought is what tell psi4 what is available to it. . We record our results on ganglia on the performance and here are the screenshots down below:. ![n131](https://user-images.githubusercontent.com/11812946/195706024-72bf740f-be03-4348-8a08-8f7e5d90178c.png). So my question is how do I control pythonically psi4, it's allocation to cores, and set the limit where it doesn't spike a node. If that makes sense?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2747:68,energy,energy,68,https://psicode.org,https://github.com/psi4/psi4/issues/2747,2,"['allocate', 'energy']","['allocated', 'energy']"
Energy Efficiency,"Hello,. You should be able to bump up the version of chemps2 used in psi4 to 1.6 without any other modifications. It contains many performance improvements. In 1.7 (not released yet) there will be API changes. So the dmrgscf/dmrgci routine will need to be adapted simultaneously with the version tag. And it will also contain DMRG-CASPT2!. Best wishes,; Sebastian",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/263:256,adapt,adapted,256,https://psicode.org,https://github.com/psi4/psi4/issues/263,1,['adapt'],['adapted']
Energy Efficiency,"Hello,; One of our users hit a problem last year on our supercomputer with his SAPT (energy('sapt2+3-ct')) jobs. Our sysadmins flagged low cpu utilisation for his jobs for which we decided that 4 cpus would give him optimum efficiency. However, the jobs were large enough as to take > 1000 hours (also frowned upon by our sysadmins) so I was asked to look into whether he could make better parallel use of the processors. We had some teething problems bringing our new supercomputer on line last year so I wanted to rule out issues on our side and I think I have now ruled out issues with IO, memory and threading (that had affected other programs).; Furthermore, during the investigations we noticed that ""top"" showed an almost equal alternation between one cpu and maximum cpus thus averaging above/below 50% use no matter how many cpus were requested. Roger Amos and I had a quick look at the SAPT papers and decided there wasn't anything intrinsic about the method that wouldn't allow it to parallel or would cause this behaviour (note I initially thought it might be a load imbalance between monomer basis and dimer basis calculations but it isn't). Also, subsequently we were asked to look into the performance of energy('fno-df-ccsd(t)') and that doesn't show this serial/parallel alternation.; Do you have any thoughts on this and have suggestions for determining optimum number of processors (does it depend on memory?) for this sort of calculation?; Thanks.; Rika; PS Do you need an input deck for this? Originally, the smallest case he had showing this behaviour took 230 hrs (seemed to be ok for his 60 hr SAPT job) but since then I think I have a 48 hr test case that will also display this behaviour. I'll need to ask the user for permission to pass it on first though.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/57:85,energy,energy,85,https://psicode.org,https://github.com/psi4/psi4/issues/57,2,['energy'],['energy']
Energy Efficiency,"Hello,; This is Jason from Monash Uni again. Thought I'd post my issue here instead of emailing everyone. I'm getting a PSIO error for some FNO-CD-CCSD(T) calculations and I'm hoping someone could help solve my problem. See below for the details. Cheers,; Jason. Input. ```; memory 126 Gb; molecule complex {; *** Atomic coordinates omitted ***; }. set globals {; basis aug-cc-pVDZ; scf_type df; df_basis_cc cholesky; freeze_core True; guess sad; basis_guess 3-21G; }; energy('fno-df-ccsd(t)'); ```. End of calculation output. ```; *** at Mon Feb 10 13:17:33 2014. *******************************************************; * *; * DF-CCSD *; * Density-fitted CCSD *; * *; * Eugene DePrince *; * *; *******************************************************. ==> 3-index integrals <==. Generating Cholesky vectors ...; Cholesky decomposition threshold: 1.00e-04; Number of Cholesky vectors: 2784. ==> Frozen Natural Orbitals <==. Doubles contribution to MP2 energy in full space: -4.157303195170. Cutoff for significant NO occupancy: 1.000e-06. Number of virtual orbitals in original space: 678; Number of virtual orbitals in truncated space: 640. ==> Memory <==. Total memory requirements: 78825.79 mb; 3-index integrals: 10109.75 mb; CCSD intermediates: 68716.04 mb. <<< warning! >>> switched to low-memory (t) algorithm. memory requirements for CCSD(T): 36451.32 mb. ==> Input parameters <==. Freeze core orbitals? yes; Use frozen natural orbitals? yes; r_convergence: 1.000e-07; e_convergence: 1.000e-06; Number of DIIS vectors: 8; Number of frozen core orbitals: 26; Number of active occupied orbitals: 74; Number of active virtual orbitals: 640; Number of frozen virtual orbitals: 38. Begin singles and doubles coupled cluster iterations. Iter DIIS Energy d(Energy) |d(T)| time; 0 0 2 0.0000000000 0.0000000000 0.0000000000 393. CCSD iterations converged!. T1 diagnostic: 0.000000000000; D1 diagnostic: 0.000000000000. OS MP2 FNO correction: -3.045395864164; SS MP2 FNO correction: -1.111907331006; MP",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/34:469,energy,energy,469,https://psicode.org,https://github.com/psi4/psi4/issues/34,2,['energy'],['energy']
Energy Efficiency,Here an input file : it simply crashes with no specific error. molecule c2h3 {; C .049798 -.576272 .000000; C .049798 .710988 .000000; H -.876750 -1.151844 .000000; H .969183 -1.154639 .000000; H -.690013 1.498185 .000000; units ang; symmetry c1; }; set basis cc-pvdz ; set scf_type df; set cc_type df. set guess GWH; set reference rohf; set MAXITER 1000. set e_convergence 1e-6; set d_convergence 1e-6; set ints_tolerance 1e-8. set FROZEN_DOCC [1]; set frozen_uocc [10]; set roots_per_irrep [4]; energy('eom-cc3'),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/462#issuecomment-240187176:497,energy,energy,497,https://psicode.org,https://github.com/psi4/psi4/issues/462#issuecomment-240187176,1,['energy'],['energy']
Energy Efficiency,"Here are my results from two failed runs, I only see a difference at the CD-MP2 line:. ```; Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)... ; ======================================================================= ; Nuclear Repulsion Energy (a.u.) : 4.91953818754669; CD-HF Energy (a.u.) : -25.94513055914818; REF Energy (a.u.) : -25.94513055914818; Alpha-Alpha Contribution (a.u.) : -0.00171224383410; Alpha-Beta Contribution (a.u.) : -0.05664222895157; Beta-Beta Contribution (a.u.) : -0.00005535848549; Scaled_SS Correlation Energy (a.u.): -0.00058920077319; Scaled_OS Correlation Energy (a.u.): -0.06797067474188; CD-SCS-MP2 Total Energy (a.u.) : -26.01369043466326; CD-SOS-MP2 Total Energy (a.u.) : -26.01876545678522; CD-SCSN-MP2 Total Energy (a.u.) : -25.94824153923064; CD-MP2 Correlation Energy (a.u.) : -0.02055603315430; CD-MP2 Total Energy (a.u.) : -25.96568659230248; ======================================================================= ; ```. ```; Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)... ; ======================================================================= ; Nuclear Repulsion Energy (a.u.) : 4.91953818754669; CD-HF Energy (a.u.) : -25.94513055914819; REF Energy (a.u.) : -25.94513055914819; Alpha-Alpha Contribution (a.u.) : -0.00171224383410; Alpha-Beta Contribution (a.u.) : -0.05664222895157; Beta-Beta Contribution (a.u.) : -0.00005535848549; Scaled_SS Correlation Energy (a.u.): -0.00058920077319; Scaled_OS Correlation Energy (a.u.): -0.06797067474188; CD-SCS-MP2 Total Energy (a.u.) : -26.01369043466327; CD-SOS-MP2 Total Energy (a.u.) : -26.01876545678523; CD-SCSN-MP2 Total Energy (a.u.) : -25.94824153923066; CD-MP2 Correlation Energy (a.u.) : -0.05918204371032; CD-MP2 Total Energy (a.u.) : -26.00431260285851; ======================================================================= ; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/244#issuecomment-183520260:109,energy,energy,109,https://psicode.org,https://github.com/psi4/psi4/issues/244#issuecomment-183520260,22,"['Energy', 'energy']","['Energy', 'energy']"
Energy Efficiency,Here is another example of this error. ```memory 2 GB; molecule {; 8 0.0000079789 0.0000000002 3.3734612294; 1 -0.7693027984 -0.0000000004 3.9669401984; 1 0.7691761670 -0.0000000031 3.9671249871; }. energy('pbe0/aug-cc-pVDZ'); ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/948#issuecomment-1315662300:199,energy,energy,199,https://psicode.org,https://github.com/psi4/psi4/issues/948#issuecomment-1315662300,1,['energy'],['energy']
Energy Efficiency,"Here's a few more refs and the original discussion http://forum.psicode.org/t/naming-considerations-for-cepa-0/156 . And more ways it can confuse ppl http://forum.psicode.org/t/cepa-0-singles/1525/11 . My main consideration is that `energy(""cepa(0)"")` is running the same method in all modules. That's what's currently forced by cepa(0) directing all traffic to fnocc (since that's the only module that can do lccsd). `lccd` properly manages direction to fnocc/occ. If the opinion of `cepa0 --> lccsd` has shifted over the years to `cepa0 --> lccd`, that's ok with me, and with a lot of warnings, we can shift the definition. Or, if you'd like `cepa0` to always raise an error and demand sd/d distinction, that's ok, too. Or maybe dct could adjust to the current scheme. Basically, I think the current way is sane. But then I don't use cepa. And the current setup has shown itself to be confusing to new (thread above) and experienced (AED, Jonathon) practitioners. So strong feelings from multiple other parties could overcome my symlink.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1872#issuecomment-616805230:233,energy,energy,233,https://psicode.org,https://github.com/psi4/psi4/issues/1872#issuecomment-616805230,1,['energy'],['energy']
Energy Efficiency,"Here's a minimal reproducible example (`mp_test.py`):. ```python; import multiprocessing as mp; import psi4. def run_psi4():; print(""start""); psi4.geometry(""""""; O; H 1 0.96; H 1 0.96 2 104.5; """"""). psi4.energy(""scf/sto-3g""); print(""done""); return. if __name__ == ""__main__"":; proc = mp.Process(target=run_psi4); # proc.run(); proc.start(); proc.join(); ```. This script doesn't run successfully on an Ubuntu machine, where `multiprocessing` uses `fork` to start new processes - it just dies silently partway through starting out. . Here's the output: ; ```; $ python mp_test.py; start. Scratch directory: /tmp/; => Libint2 <=. Primary basis highest AM E, G, H: 6, 6, 3; Auxiliary basis highest AM E, G, H: 7, 7, 4; Onebody basis highest AM E, G, H: -, -, -; Solid Harmonics ordering: Gaussian. *** tstart() called on 4f210325e2d9; *** at Tue Jul 2 19:27:19 2024. => Loading Basis Set <=. Name: STO-3G; Role: ORBITAL; Keyword: BASIS; atoms 1 entry O line 81 file /opt/conda/share/psi4/basis/sto-3g.gbs; atoms 2-3 entry H line 19 file /opt/conda/share/psi4/basis/sto-3g.gbs. ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith; RHF Reference; 1 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c2v; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass; ------------ ----------------- ----------------- ----------------- -----------------; O 0.000000000000 0.000000000000 -0.065775570547 15.994914619570; H 0.000000000000 -0.759061990794 0.521953018286 1.007825032230; H 0.000000000000 0.759061990794 0.521953018286 1.007825032230. Running in c2v symmetry. Rotational constants: A = 27.26297 B = 14.51533 C = 9.47217 [cm^-1]; Rotational constants: A = 817323.21126 B = 435158.60141 C = 283968.37536 [MHz]; Nuclear repulsion = 9.168193296424349. Charge = 0; Multiplicity = 1; Electrons = 10; Nalpha = 5; Nb",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3189:203,energy,energy,203,https://psicode.org,https://github.com/psi4/psi4/issues/3189,1,['energy'],['energy']
Energy Efficiency,"Here's a torture rack example that doesn't work in Psi4.; ```; set sad_scf_type direct; set scf_type direct; set df_scf_guess false; set sad_print 2; set guess sad. molecule xe1 {; 0 1; Xe; }; basis {; assign Xe 3-21G; }; energy('scf'). molecule xe2 {; 0 1; Xe; }; basis {; assign Xe def2-SVP; }; energy('scf'). molecule xe12 {; 0 1; Xe1; Xe2 1 100.0; }. basis {; assign Xe1 3-21G; assign Xe2 def2-SVP; }; energy('scf'); ```. The first calculation in 3-21G gives -7200.75273615335664; the SAD guess is already converged. The second calculation in def2-SVP gives -324.58820001177179 as the SAD guess energy, and -328.29839367561794 as the converged energy. The guess should also be fully converged here, so there some issue must still remain in the guess code. However, the real issue is the third calculation: now, instead of -7200.75273615335664, the SAD for the first atom gives -7200.18106523988899, so there's a 0.6 Hartree difference. The SAD for the second atom gives -2516.58141792475817? Also, SCF on the dimer fails to converge; this is probably an issue with the ECP.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1497:222,energy,energy,222,https://psicode.org,https://github.com/psi4/psi4/issues/1497,5,['energy'],['energy']
Energy Efficiency,"Here's an update on the effects of your #1988, @JonathonMisiewicz. On the OCC LCCD bullet, no change, since it doesn't hit that mograd code. On the OCC OLCCD bullet, you can see the before and after below of the final iteration of nine cases. No change in number of iterations (final integer) because convergence is energy limited (first inequality) rather than mograd limited (second inequality). Do you think adjusting https://github.com/psi4/psi4/blob/master/psi4/src/psi4/occ/occwave.cc#L144-L155 is in order?. ### olccd conv ae r/u/ro dz/adz/qz2p. pre-1988 WRONG; ```; iter: abs( 3.92e-07) < 1.00e-06 9.61e-08 < 1.00e-04 8; iter: abs( 8.96e-07) < 1.00e-06 2.68e-07 < 1.00e-04 8; iter: abs( 4.92e-07) < 1.00e-06 2.32e-08 < 1.00e-04 10; iter: abs( 1.04e-09) < 1.00e-06 4.03e-07 < 1.00e-04 10; iter: abs( 8.83e-07) < 1.00e-06 1.84e-07 < 1.00e-04 10; iter: abs( 1.94e-07) < 1.00e-06 3.62e-07 < 1.00e-04 9; iter: abs( 1.29e-07) < 1.00e-06 8.37e-07 < 1.00e-04 9; iter: abs( 4.13e-07) < 1.00e-06 1.17e-07 < 1.00e-04 11; iter: abs( 4.27e-07) < 1.00e-06 1.04e-07 < 1.00e-04 11; ```; post-1988 RIGHT; ```; iter: abs( 3.92e-07) < 1.00e-06 8.04e-07 < 1.00e-04 8; iter: abs( 8.96e-07) < 1.00e-06 2.11e-06 < 1.00e-04 8; iter: abs( 4.92e-07) < 1.00e-06 2.03e-07 < 1.00e-04 10; iter: abs( 1.04e-09) < 1.00e-06 2.32e-06 < 1.00e-04 10; iter: abs( 8.83e-07) < 1.00e-06 1.45e-06 < 1.00e-04 10; iter: abs( 1.94e-07) < 1.00e-06 3.03e-06 < 1.00e-04 9; iter: abs( 1.29e-07) < 1.00e-06 4.81e-06 < 1.00e-04 9; iter: abs( 4.13e-07) < 1.00e-06 9.22e-07 < 1.00e-04 11; iter: abs( 4.27e-07) < 1.00e-06 9.10e-07 < 1.00e-04 11; ```. By the way, there's more of those rms formulas. Look suspicious to you, too?. ```; >>> grep sqrt ../psi4/src/psi4/occ/* | grep rms_; ../psi4/src/psi4/occ/iterate_t2o1_amplitudes.cc: rms_t2 = std::sqrt(rms_t2 / nElements);; ../psi4/src/psi4/occ/iterate_t2o1_amplitudes.cc: rms_t2AA = std::sqrt(rms_t2AA) / nElements;; ../psi4/src/psi4/occ/iterate_t2o1_amplitudes.cc: rms_t2BB = std::sqrt(rms_t2BB",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1980#issuecomment-682100500:316,energy,energy,316,https://psicode.org,https://github.com/psi4/psi4/pull/1980#issuecomment-682100500,1,['energy'],['energy']
Energy Efficiency,"Here's another case where the energy stagnates but there's still large DIIS error. I don't really understand how this is possible.; ```; memory 8 gb. molecule {; Cr 0.47834117238031 0.45636471654971 0.09285402419506; O 1.55111099616190 1.09138241759496 -0.82993325785254; O -0.61796524632964 1.38903190796852 0.67056903439165; Cl -0.44331553251777 -1.03073713008178 -0.94412856229465; Cl 1.43568861030522 -0.43101191203143 1.65244876156047; }. set basis 6-31G**; set df_basis_scf def2-svp-jfit; set geom_maxiter 250. # Use a (75,302) quadrature grid; set dft_radial_points 75; set dft_spherical_points 302. my_dft = {; ""name"": ""my lda"",; ""x_functionals"": {""lda_x"": {}},; ""c_functionals"": {""lda_c_pw"": {}}; }; energy('scf', dft_functional=my_dft); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/888#issuecomment-869728286:30,energy,energy,30,https://psicode.org,https://github.com/psi4/psi4/issues/888#issuecomment-869728286,2,['energy'],['energy']
Energy Efficiency,"Here's another example of a hard geometry optimization problem. Psi4 1.3.2 crashes/segfaults; @psi-rking's pyoptking also gives up.; ```; import optking; memory 8 gb. molecule {; Mn -1.19858918223104 -0.08207133498850 -0.13371354096607; N -0.41561138019044 1.27599387849124 0.21223826269367; O 0.14600552164730 2.25554129585451 0.46379448621401; C -2.77325495017405 0.77903635981534 -0.46993705135304; C -0.09036086226268 -0.50949483218465 -1.52013938052672; O 0.61690491558852 -0.75191770614607 -2.38035917189752; O -3.74228303591446 1.34350620162321 -0.67446015379883; C -2.08944770913093 -1.62303880517967 -0.52670173551821; C -0.89694974294004 -0.80918135325017 1.51325120318508; O -2.64631747328247 -2.58917480422090 -0.77666675977250; O -0.69173610111097 -1.23796889981931 2.54918384173987; }. set basis STO-3G; set geom_maxiter 250. # Use a (75,302) quadrature grid; set dft_radial_points 75; set dft_spherical_points 302. # Psi4 has problems converging the first SCF with PBE so we initialize; # with Hartree-Fock orbitals; set df_basis_scf def2-svp-jkfit; energy('scf'); set df_basis_scf def2-svp-jfit; set guess read. optimize('pbe') # Crashes in psi4 1.3.2; #optking.optimize_psi4('pbe') # Also crashes; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2213:1065,energy,energy,1065,https://psicode.org,https://github.com/psi4/psi4/issues/2213,1,['energy'],['energy']
Energy Efficiency,"Here's one sample case; ```; molecule {; 0 2; V 0.000000 0.000000 0.000000 ; N -0.009654 1.561722 1.062138 ; N 0.009654 -1.561722 1.062138 ; N -1.561722 -0.009654 -1.062138 ; N 1.561722 0.009654 -1.062138 ; C -1.219978 2.113945 1.655979 ; C 1.219978 -2.113945 1.655979 ; C -2.113945 -1.219978 -1.655979 ; C 2.113945 1.219978 -1.655979 ; C 1.188278 2.080402 1.709075 ; C -1.188278 -2.080402 1.709075 ; C -2.080402 1.188278 -1.709075 ; C 2.080402 -1.188278 -1.709075 ; H -2.112996 1.691813 1.177356 ; H 2.112996 -1.691813 1.177356 ; H -1.691813 -2.112996 -1.177356 ; H 1.691813 2.112996 -1.177356 ; H 2.089441 1.627028 1.275983 ; H -2.089441 -1.627028 1.275983 ; H -1.627028 2.089441 -1.275983 ; H 1.627028 -2.089441 -1.275983 ; H -1.254235 3.214541 1.536136 ; H 1.254235 -3.214541 1.536136 ; H -1.905317 -1.281383 -2.742242 ; H 1.905317 1.281383 -2.742242 ; H 1.192045 1.877111 2.798018 ; H -1.192045 -1.877111 2.798018 ; H -3.178469 1.263762 -1.584921 ; H 3.178469 -1.263762 -1.584921 ; H -1.281383 1.905317 2.742242 ; H 1.281383 -1.905317 2.742242 ; H -3.214541 -1.254235 -1.536136 ; H 3.214541 1.254235 -1.536136 ; H 1.263762 3.178469 1.584921 ; H -1.263762 -3.178469 1.584921 ; H -1.877111 1.192045 -2.798018 ; H 1.877111 -1.192045 -2.798018; }. memory 24 gb; set basis aug-pcseg-1; set reference uhf; set guess sad; set scf_type direct; set df_scf_guess false; set diis_rms_error true; set ints_tolerance 1e-14; energy('scf'). set guess read; set diis_rms_error false; energy('scf'); ```. The first step converges as; ```; @UHF iter 19: -1477.30511799303667 -5.87622e-07 5.94954e-07 DIIS; Energy converged.; ```; where the second starts out as; ```; Total Energy Delta E MAX |[F,P]|. @UHF iter 0: -1477.30511823973779 -1.47731e+03 3.66064e-05 ; @UHF iter 1: -1477.30511827087457 -3.11368e-08 2.33361e-05 DIIS; ```; so the absolute norm is larger by two orders of magnitude. And this is still a relatively small system.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1460#issuecomment-452429783:1416,energy,energy,1416,https://psicode.org,https://github.com/psi4/psi4/pull/1460#issuecomment-452429783,4,"['Energy', 'energy']","['Energy', 'energy']"
Energy Efficiency,"Here's same job with more ""normal"" input. ```; memory 2500 mb. molecule struct {; units angstrom; 0 1; C 0.008240 0.001327 0.000310; C 1.553694 0.001373 0.000036; N -0.700795 -1.157242 -0.001319; N -2.008585 -1.428031 0.002174; N -0.699812 1.158389 -0.000832; N -2.008322 1.432822 0.001677; N 2.267238 1.156444 -0.001011; N 3.565803 1.436891 0.001896; N 2.266013 -1.155613 -0.000583; N 3.563003 -1.435099 0.001415; B -1.131831 -2.605160 -0.011643; B -1.129410 2.608511 -0.010295; B 2.669048 -2.603366 -0.007508; B 2.671738 2.604971 -0.007555; }. set basis 6-31G*; optimize('scf'); ```. and output. ```; --------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------- ~; Convergence Criteria 1.00e-06 * 3.00e-04 * o 1.20e-03 * o ~; --------------------------------------------------------------------------------------------- ~; 1 -609.21574955 -6.09e+02 4.65e-02 1.39e-02 o 1.70e-01 5.38e-02 o ~; 2 -609.24416188 -2.84e-02 1.95e-02 4.94e-03 o 3.67e-01 6.90e-02 o ~; 3 -609.26373458 -1.96e-02 4.03e-02 1.34e-02 o 4.00e-01 1.12e-01 o ~; 4 -609.29180689 -2.81e-02 4.13e-02 1.19e-02 o 3.28e-01 7.61e-02 o ~; 5 -609.31034726 -1.85e-02 6.99e-02 1.39e-02 o 3.38e-01 6.27e-02 o ~; 6 -609.33098015 -2.06e-02 4.29e-02 1.03e-02 o 4.77e-01 7.89e-02 o ~; 7 -609.36524125 -3.43e-02 4.11e-02 7.82e-03 o 7.04e-01 1.05e-01 o ~; 8 -609.41234162 -4.71e-02 4.58e-02 8.89e-03 o 5.68e-01 1.12e-01 o ~; 9 -609.44676585 -3.44e-02 4.83e-02 1.17e-02 o 6.15e-01 9.91e-02 o ~; 10 -609.49528129 -4.85e-02 4.44e-02 1.07e-02 o 4.17e-01 1.12e-01 o ~; 11 -609.37833924 1.17e-01 1.22e-01 3.06e-02 o 2.26e-01 6.51e-02 o ~; 12 -609.49194948 -1.14e-01 6.74e-02 1.50e-02 o 2.98e-01 6.15e-02 o ~; 13 -609.50472895 -1.28e-02 4.41e-02 7.46e-03 o 6.15e-01 9.60e-02 o ~; 14 -609.49299554 1.17e-02 5.21e-02 1.31e-02 o 4.25e-01 7.90e-02 o ~; 15 -609.51",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/153#issuecomment-126177998:711,Energy,Energy,711,https://psicode.org,https://github.com/psi4/psi4/issues/153#issuecomment-126177998,1,['Energy'],['Energy']
Energy Efficiency,"Here, I kind of feel like for the returned `jobrec` the dispersion energy is the correct thing for the current energy. I would hazard that this is an issue in reintegration of this energy down the line.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1470#issuecomment-455797642:67,energy,energy,67,https://psicode.org,https://github.com/psi4/psi4/pull/1470#issuecomment-455797642,3,['energy'],['energy']
Energy Efficiency,"Hey PSI4 developers,. I am writing a plugin to test a JK algorithm. I want to run SCF in my plugin and test the new JK algorithm. . Even though I pass a converged scf wavefunction to the plugin, the SCF procedure doesn't converge. It seems that the wavefunction passing is messed up here. . Here is the basic structure of the plugin:. ```; SharedWavefunction kevin_plugin(SharedWavefunction ref_wfn, Options& options); {; boost::shared_ptr<Wavefunction> scf(new scf::RHF(ref_wfn, options, PSIO::shared_object()));; double scf_energy = scf->compute_energy();; } ; ```. I run the plugin as follows:. ```; import kevin_plugin. molecule H20 {; 0 1; H; O 1 1.08; H 2 1.08 1 107.5; units bohr; }. set globals {; basis sto-3g; df_basis_scf cc-pvdz-jkfit; df_basis_mp2 cc-pvdz-ri; scf_type df; reference RHF; }; refenergy, refwfn = energy('scf', return_wfn=True); energy('kevin_plugin', ref_wfn=refwfn); ```. Here is the first scf:. ```; ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-RHF iter 0: -75.66716318225211 -7.56672e+01 7.87344e-01; @DF-RHF iter 1: -73.90687341477560 1.76029e+00 2.74191e-02; @DF-RHF iter 2: -73.91391789759025 -7.04448e-03 3.08278e-03 DIIS; @DF-RHF iter 3: -73.91403288011436 -1.14983e-04 4.69651e-04 DIIS; @DF-RHF iter 4: -73.91403606558048 -3.18547e-06 5.07365e-05 DIIS; @DF-RHF iter 5: -73.91403611477740 -4.91969e-08 6.26518e-06 DIIS; @DF-RHF iter 6: -73.91403611547619 -6.98790e-10 5.20238e-09 DIIS; ```. Here is the scf after my plugin is called:. ```; @DF-RHF iter 1: 15.38889387804263 1.53889e+01 0.00000e+00; @DF-RHF iter 2: -72.40376803946150 -8.77927e+01 3.34064e-01 DIIS; @DF-RHF iter 3: -72.40376803946153 -2.84217e-14 3.34064e-01 DIIS; @DF-RHF iter 4: -72.40376803946151 1.42109e-14 3.34064e-01 DIIS; @DF-RHF iter 5: -72.40376803946153 -1.42109e-14 3.34064e-01 DIIS; @DF-RHF iter 6: -72.40376803946153 0.00000e+00 3.34064e-01 DIIS; @DF-RHF iter 7: -72.40376803946148 4.26326e-14 3.34064e-01 DIIS; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/419:824,energy,energy,824,https://psicode.org,https://github.com/psi4/psi4/issues/419,3,"['Energy', 'energy']","['Energy', 'energy']"
Energy Efficiency,"Hey,. Q1: The current code can only perturb along the specified axis. We could adapt it to handle rotations we'd just have to be careful with symmetry; it shouldn't be difficult. Q2: Any code that uses the `MintsHelper::so_potential` (not `MintsHelper::ao_potential`) will have the perturbation applied. I had tested this a few years ago for MP2 and CCSD. Might be a good idea to make sure there's a test included for it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/302#issuecomment-192282809:79,adapt,adapt,79,https://psicode.org,https://github.com/psi4/psi4/issues/302#issuecomment-192282809,1,['adapt'],['adapt']
Energy Efficiency,"Hi @JonathonMisiewicz,; Have you heard about the ESCDF library? It might be better adapted to what you want to do. It is also based on HDF5, but it is more low-level and flexible than TREXIO. See https://th.fhi-berlin.mpg.de/site/uploads/Publications/Oliveira_The_CECAM_electronic.pdf section G page 153.; I have never tried it, so I have no opinion on how easy it is to use.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2847#issuecomment-1429418466:83,adapt,adapted,83,https://psicode.org,https://github.com/psi4/psi4/issues/2847#issuecomment-1429418466,1,['adapt'],['adapted']
Energy Efficiency,"Hi @hokru, I uploaded `psi4/label/dev::dftd4-3.5.0` packages (py intf present, so these are equiv to `conda-forge::dftd4-python` and tried out this branch with a mix of packages so that I could add some more helpful error messages. So there's one commit here and two over at qcengine. Also I hopefully got around all the CI checks here, but we'll see. Locally, this passes with `c-f::gcp-correction` and `psi4::dftd4`. ```; # Any line starting with the # character is a comment line; #! Sample HF/cc-pVDZ H2O computation. memory 600 mb. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; ene = energy('r2scan-d4'); compare_values(-76.38149185, ene, 6, 'asdf'). energy('r2scan-3c/') # slash unsets basis from above; compare_values(-76.41834614, variable('SCF TOTAL ENERGY'), 6, 'SCF energy') #TEST; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2842#issuecomment-1444523360:613,energy,energy,613,https://psicode.org,https://github.com/psi4/psi4/pull/2842#issuecomment-1444523360,4,"['ENERGY', 'energy']","['ENERGY', 'energy']"
Energy Efficiency,"Hi @jminuse, thanks for the informative bug report. I'm almost certain that this suspicious 1.4rc1 behavior was fixed in 1.4rc2 by #2139, which tightened the integral screening after we switched integral engines from `libint` to `libint2`. . Your observations are consistent with what we saw: very wrong and/or oscillatory SCF energies. I also checked that your test case gives a reasonable energy with 1.4rc1 when I set the keyword `INTS_TOLERANCE` to 0, which was the temporary workaround for that bug.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2211#issuecomment-869217302:391,energy,energy,391,https://psicode.org,https://github.com/psi4/psi4/issues/2211#issuecomment-869217302,1,['energy'],['energy']
Energy Efficiency,"Hi @kzinovjev great job adding this. . @loriab It would be great to have these available via the qcengine interface so we could store them in QCArchive when MBIS charges are requested on a calculation, can you adviseif any other changes would be needed to be made to make this possible?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3102#issuecomment-1860206635:162,charge,charges,162,https://psicode.org,https://github.com/psi4/psi4/pull/3102#issuecomment-1860206635,1,['charge'],['charges']
Energy Efficiency,"Hi @loriab and @robertodr,. Thanks for your effort!. Regarding `Psithon` and `PsiAPI`, we are using both. For older products (e.g. https://github.com/Acellera/htmd/blob/master/htmd/qm/psi4.py), it is still `Psithon`, but will change to `PsiAPI` eventually. For new development, we (at least me) are already using `PsiAPI.` So ideal, the both should work consistently. Regarding a simple specific usage from https://github.com/Acellera/htmd/blob/master/htmd/qm/psi4.py, we have two scripts:; ```bash; $ cat run.sh; #!/bin/sh. export HTMD_PSI4_WORKDIR=$(pwd); psi4 -i psi4.in -o psi4.out &> psi4.log; ```; ```python; $ cat psi4.in; set_num_threads( 8 ); memory 2.000000 gb. set { reference rks }; set { basis cc-pVDZ }. molecule MOL {; 0 1; noreorient; nocom; symmetry c1; O 1.014300 -0.002300 0.060500; O 2.462400 -0.107500 -0.002400; H 0.821200 -0.823600 -0.430600; H 2.655500 0.713700 0.488700; }. pcm = { ; Medium { Solvent = Water }; Cavity { Type = GePol }; }. set optking { dynamic_level = 1 }. energy, wfn = optimize('B3LYP-D3', return_wfn=True). import os; os.chdir(os.environ['HTMD_PSI4_WORKDIR']). oeprop(wfn, 'DIPOLE', 'QUADRUPOLE', 'MULLIKEN_CHARGES'). with open('psi4out.xyz', 'w') as f:; f.write('4 ' ); f.write('%.12f\n' % energy); f.write(MOL.save_string_xyz()); ```; We need that the working directory to be not changed after `optimize` (and `energy`) returns as we do some analysis and write a few files in general (in this case just `psi4out.xyz`). So, we have an ugly hack to fix it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/817#issuecomment-357208169:1000,energy,energy,1000,https://psicode.org,https://github.com/psi4/psi4/issues/817#issuecomment-357208169,3,['energy'],['energy']
Energy Efficiency,"Hi @loriab, I was just wondering if there are any updates on this issue please? I'm not sure how easy it would be to revert to behaviour before PR #2127? - at this point we had fully functioning access to both MBIS charges and atomic volumes. The calculation of the free atom volumes does not seem like a key feature to me (they can be easily tabulated). Thanks for your help.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2272#issuecomment-925810175:215,charge,charges,215,https://psicode.org,https://github.com/psi4/psi4/issues/2272#issuecomment-925810175,1,['charge'],['charges']
Energy Efficiency,"Hi @loriab,. I promise I will find a consolidation way to reduce the source code as much as possible when I find a free time to work on it. Presently, I am more focused on the implementation and adding some new features to DFOCC. Even If we suppose that there are some redundant codes in DFOCC, it is a not big problem. It may just take a few more minutes of building time and a slightly additional storage. Further, I think the relatively large body of DFOCC w.r.t. some other modules is understandable since DFOCC includes many post-HF methods (standard and OO) including energies and gradients, and most of them are implemented for RHF and UHF refs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/382#issuecomment-221381893:58,reduce,reduce,58,https://psicode.org,https://github.com/psi4/psi4/pull/382#issuecomment-221381893,1,['reduce'],['reduce']
Energy Efficiency,"Hi @susilehtola, I was looking around the Fedora packaging site to see if there was a download counter. Didn't find one but did notice a few details from your build scripts that could be updated:. * http://pkgs.fedoraproject.org/cgit/rpms/psi4.git/tree/psi4.spec#n45 actually need Py >= 2.7, as I'm not holding back from dictionary comprehensions; * http://pkgs.fedoraproject.org/cgit/rpms/psi4.git/tree/psi4.spec#n19 more simply, `psi4/psi4`, though github re-directs; * http://pkgs.fedoraproject.org/cgit/rpms/psi4.git/tree/psi4.spec#n107 It's on by default anyway, so no change, but wrong variable https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L99; * http://pkgs.fedoraproject.org/cgit/rpms/psi4.git/tree/psi4.spec#n109 not sure if this is still working. May need to be `-DLAPACK_LIBRARIES=...`. Is there actually a monitor that you know of for Fedora package downloads? We like to track them for grant reviews.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/631#issuecomment-284125806:829,monitor,monitor,829,https://psicode.org,https://github.com/psi4/psi4/issues/631#issuecomment-284125806,1,['monitor'],['monitor']
Energy Efficiency,"Hi @susilehtola, I've been following Libxc v5.1 https://gitlab.com/libxc/libxc/-/issues/186 with interest. When I compiled this branch (after rebase; including your fixes from the spring, thanks!) in late December against the the Libxc 5.0 branch, I got about the same Psi4 test results as recorded above -- lots of `Matrix::power: C_DSYEV failed`. However, when I compile this branch against the new Libxc 5.1 hotfix branch, I don't even get that far. After disabling OpenMP, I get segfaults (dft-psivar):; ```; (gdb) bt; #0 0x00007ffff78351d7 in raise () from /lib64/libc.so.6; #1 0x00007ffff78368c8 in abort () from /lib64/libc.so.6; #2 0x00007ffff782e146 in __assert_fail_base () from /lib64/libc.so.6; #3 0x00007ffff782e1f2 in __assert_fail () from /lib64/libc.so.6; #4 0x00007fffed70db12 in xc_mix_func (func=func@entry=0x555556ca7500, np=np@entry=255, rho=rho@entry=0x555556e575c0, sigma=sigma@entry=0x555556ccda80, lapl=lapl@entry=0x0, tau=tau@entry=0x0, zk=0x555556771300, vrho=0x55555e164460, vsigma=0x555556c12720, vlapl=0x0, vtau=0x0, v2rho2=0x0, v2rhosigma=0x0, v2rholapl=0x0, v2rhotau=0x0, v2sigma2=0x0, ; v2sigmalapl=0x0, v2sigmatau=0x0, v2lapl2=0x0, v2lapltau=0x0, v2tau2=0x0, v3rho3=0x0, v3rho2sigma=0x0, v3rho2lapl=0x0, v3rho2tau=0x0, v3rhosigma2=0x0, v3rhosigmalapl=0x0, v3rhosigmatau=0x0, v3rholapl2=0x0, v3rholapltau=0x0, v3rhotau2=0x0, v3sigma3=0x0, v3sigma2lapl=0x0, v3sigma2tau=0x0, v3sigmalapl2=0x0, v3sigmalapltau=0x0, v3sigmatau2=0x0, ; v3lapl3=0x0, v3lapl2tau=0x0, v3lapltau2=0x0, v3tau3=0x0, v4rho4=0x0, v4rho3sigma=0x0, v4rho3lapl=0x0, v4rho3tau=0x0, v4rho2sigma2=0x0, v4rho2sigmalapl=0x0, v4rho2sigmatau=0x0, v4rho2lapl2=0x0, v4rho2lapltau=0x0, v4rho2tau2=0x0, v4rhosigma3=0x0, v4rhosigma2lapl=0x0, v4rhosigma2tau=0x0, v4rhosigmalapl2=0x0, v4rhosigmalapltau=0x0, ; v4rhosigmatau2=0x0, v4rholapl3=0x0, v4rholapl2tau=0x0, v4rholapltau2=0x0, v4rhotau3=0x0, v4sigma4=0x0, v4sigma3lapl=0x0, v4sigma3tau=0x0, v4sigma2lapl2=0x0, v4sigma2lapltau=0x0, v4sigma2tau2=0x0, v4sigmala",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-754391084:325,power,power,325,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-754391084,1,['power'],['power']
Energy Efficiency,"Hi All, . I see that this issue is still open. I was wondering if there is a current work around? I tried some simple experiments to see if it was still producing the incorrect output:; `> psi4 --version`; `1.7`; input file contents:; ```; mol = psi4.geometry(""""""; H 0.000 0.000 0.000; H 0.000 0.000 0.740; Symmetry c1; """"""); psi4.set_options({'basis': 'sto-3g'}); scf_e, wfn = psi4.energy('SCF', return_wfn=True); print(""MO coefficients""); print(wfn.Ca().to_array()); print(""Fock in the AO basis""); print(wfn.Fa_subset(""AO"").to_array()); print(""Fock in the MO basis""); print(wfn.Fa_subset(""MO"").to_array()); ```; this gives the following output:; ```; MO coefficients ; [[ 0.54884228 1.21245192]; [ 0.54884228 -1.21245192]]; Fock in the AO basis; [[-0.36607883 -0.59428702]; [-0.59428702 -0.36607883]]; Fock in the MO basis; [[-1.59408547e+00 8.04278118e-16]; [ 7.39285035e-16 7.76197397e-02]]; ```; and in the output file; ```; Orbital Energies [Eh]; ---------------------; Doubly Occupied: ; 1A -0.578578 ; Virtual: ; 2A 0.670950 ; @DF-RHF Final Energy: -1.11678331788308; ```; the orbital energies in the output file are correct, which should be the diagonal elements of the Fock matrix in the MO basis, but these are different. . I check the AO and MO coefficients produced by two other QM programs (pyscf is below) to see where the inconsistency might be, they both produced the ""correct"" Fock matrix (i.e. the diagnoal elements in the MO basis are the orbital energies) with the following MO coefficients:; pyscf input; ```; import numpy; from pyscf import gto, scf, lo. geometry = '''; H 0.000 0.000 0.000; H 0.000 0.000 0.740; ''' . mol = gto.M(atom=geometry,; basis='STO-3G') ; mf = scf.RHF(mol); mf.kernel(); print(mf.kernel()); Fao = mf.get_fock(); print(""MO coefficients""); print(mf.mo_coeff); print(""Fock in AO basis""); print(Fao); Fmo = mf.mo_coeff.T @ Fao @ mf.mo_coeff; print(""Fock in MO basis""); print(Fmo); ```; ```; converged SCF energy = -1.11675930739643; -1.1167593073964255; MO",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1989#issuecomment-1533272699:383,energy,energy,383,https://psicode.org,https://github.com/psi4/psi4/issues/1989#issuecomment-1533272699,1,['energy'],['energy']
Energy Efficiency,"Hi Daniele. This combination is not supported. I think this functionality request is perhaps better aimed at the QCSchema developers (https://github.com/MolSSI/QCSchema/issues). One main issue is the ambiguity of what an extrapolation (or a composite recipe) actually means. Running CBS jobs via QCSchema is not implemented in Psi4, and my personal opinion is that it likely won't be implemented in Psi4 itself anytime soon. What may happen is that someone will take the CBS functionality out of Psi4, adapt it to create ""schema"" jobs for each calculation required in a similar way we do internally in the CBS wrapper, and then combine the individual atomic results to arrive at the composite result.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2198#issuecomment-868806792:502,adapt,adapt,502,https://psicode.org,https://github.com/psi4/psi4/issues/2198#issuecomment-868806792,1,['adapt'],['adapt']
Energy Efficiency,"Hi David,. Previously I was saving MOs just after energy computation, before gradients. Now, I move it to end of the code. Hence, presently I am saving MOs when everything is completely finished.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/127#issuecomment-121961115:50,energy,energy,50,https://psicode.org,https://github.com/psi4/psi4/issues/127#issuecomment-121961115,1,['energy'],['energy']
Energy Efficiency,"Hi Jerome,; It was mostly a difficulty in getting the DFT orbital-Hessian vector code accessible in the right places. I had planned on improving that section so it could do mixed input Wavefunctions (RKS, UHF, ROHF, etc). Probably will not get around to it now. . It's also a neat experiment in mixing of high and low level languages in relation to the readability of code. . -Daniel Smith; Sent from my iPhone. . > On May 10, 2017, at 15:34, jgonthier <notifications@github.com> wrote:; > ; > Very impressive work... I'm happy SAPT(DFT) is done. I don't have time to check the details of the equations but I'm confident you did it right. I didn't see any problems after a quick overview of the SAPT code, at least.; > ; > Is there a specific reason why you chose to rewrite the SAPT JK energy terms (electrostatic, exchange, induction) in Python instead of having a new function call on the C++ side like you did for dispersion ?; > ; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub, or mute the thread.; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/698#issuecomment-300648648:787,energy,energy,787,https://psicode.org,https://github.com/psi4/psi4/pull/698#issuecomment-300648648,1,['energy'],['energy']
Energy Efficiency,"Hi Lori,. In one of the functions, ccsd_WabefT2_cd(), I use CD factors for (ab|cd) integrals while for all the other 4-index integrals DF factors are used. In the second function, ccsd_WabefT2(), I use only DF factors for all 4-index integrals. Further, the explicit form of W_abef tensors are different for each functions. Hence, although both functions looks repeating each other, they are not in fact. At the theoretical point of view, there are significant differences between them. Hence, I prefer to keep them separate. However, it is possible to merge them. But in that case I will need if-else blocks at several places. Of course, I create common functions if I need something repeatedly. However, if I see theoretically significant difference between two functions, then I prefer separate functions. For example, instead of merged CCD and CCSD codes, I prefer to keep them separate, which looks me better organised. Alternatively, it is possible to merge all MP2, MP3, MP2.5, LCCD, and CCD into CCSD code with many if-else blocks or switch-case blocks. For each different method creating different functions appears to me more systematic and better organised. . I agree with you about avoiding repetitive codes for the sake of maintenance and build time. Presently, I am busy with CCSD(T) gradients. When I get some free time I will try to reduce repetitive codes if there are any, except for the similarities between high-order and lower-order methods, such as CCSD and MP3. @loriab",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/382#issuecomment-220426701:1349,reduce,reduce,1349,https://psicode.org,https://github.com/psi4/psi4/pull/382#issuecomment-220426701,1,['reduce'],['reduce']
Energy Efficiency,"Hi Lori,. Let us start with your first question for the HF molecule. I run your job, and it terminates ""normally"". Since it is a gradient job I do not simply grab integrals from SCF, but I compute both JKFIT and RI basis DF integrals. Hence, it does not matter to start with the conventional integrals the df-mp2 code proceeds. However, the gradient is not correct because the MO coefficients are from conventional SCF, but it should be from DF-SCF. I think in the case df-mp2 gradients, if user set the conventional SCF, then we should throw an error. Alternatively we may change the reference to DF-SCF and throw a warning for user to explain what we did. Both solutions are okay for me. DFOCC uses frozen cores properly in energy and gradients. I did not add the froze virtuals yet. But I will add them soon for FNO-DF-CCSD gradients. However, OCC does not use frozen cores in the energy and gradients. In case of OCC the problem is that you need to define different MO class with libtrans, which is not obvious how to do it. I know it is possible now. Andy explained it for me. As a result, there is no plan for OCC module. However, frozen virtuals will be added to DFOCC. In fact, I am waiting for RC1 release, then I will implement add it to Psi4. For the final question, your reference gradient is wrong (mp2tot_vals). This is a very good example how 3-point numeric gradients are unreliable for challenging systems. I reproduce problem with your input. However, if I use ""points 5"", all numeric gradient computations give the same result with the analytic gradients. I also run the same job with gausssian 09 with analytic gradients, which gives the same result with our analytic gradient. Here is the G09 result:. ---. Center Atomic Forces (Hartrees/Bohr); Number Number X Y Z. ---. ```; 1 1 0.000000000 0.000000000 -0.002819339; 2 9 0.000000000 0.000000000 0.002819339; ```. ---. and our analytic gradients:. -Total gradient:; Atom X Y Z; ------ ----------------- ----------------- ---------",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/245#issuecomment-192875912:726,energy,energy,726,https://psicode.org,https://github.com/psi4/psi4/issues/245#issuecomment-192875912,2,['energy'],['energy']
Energy Efficiency,"Hi Lori,. Thank you very much for your help. I have updated my tensor class. Further, I have added delte-MP2 corrections to the energy of the method, hence it is saved to PsiVar now. I think, you may add it public repo now. However, when try to make a push I got the following error:. remote: Permission to loriab/psi4.git denied to bozkaya.; fatal: unable to access 'https://github.com/loriab/psi4.git/': The requested URL returned error: 403. As I understand you should allow me to push my changes. Let me know if we need anything else. @loriab",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1390#issuecomment-446552988:128,energy,energy,128,https://psicode.org,https://github.com/psi4/psi4/pull/1390#issuecomment-446552988,1,['energy'],['energy']
Energy Efficiency,"Hi Luca,. Yes, Sebastian is right, freezing molecular orbitals unfortunately does not allow you to reduce the number of atomic orbital integrals to compute. That's because every atomic orbital integral can contribute to a molecular orbital integral, unless special tricks are used. Such tricks are not really trivial and require some significant work to utilize. David",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/98#issuecomment-122110515:99,reduce,reduce,99,https://psicode.org,https://github.com/psi4/psi4/issues/98#issuecomment-122110515,1,['reduce'],['reduce']
Energy Efficiency,"Hi Psi4 developers,. I'd like to open discussion on making Psi4 packages on `conda-forge`. We at OpenFF have some projects that make heavy use of Psi4 and that we'd like to roll out to production alongside a pretty length list of other packages. Unfortunately, one or of our other dependencies is a somewhat monolithic and tangled web of FORTRAN and legacy code that regularly produces conflicts on macOS and sometimes causes deployment issues on Linux. (Others may have more comments on other deployment issues). We've been able to [resolve this](https://github.com/psi4/psi4/issues/2024) in the past, and we've also filled up the packaging channel on Slack on more than a few occasions. However, it may be more sustainable in the long run (for us and presumably other users) if we can get conda packaging for the Psi4 stack moved over to `conda-forge` - something we'd be happy to take a role in. * **Would this be useful for Psi4 developers and/or users?** I have personally had good experiences with migrations, both as a developer/maintainer and user. Getting everything on one channel (and using `conda-forge`'s existing automation) should help with dependency resolution/compatibility and in principle should also make build processes smoother. It would unblock some production issues with our software and be generally valuable for us - but we absolutely don't want to make life harder on for Psi4 developers/maintainers.; * **What technical blockers exist?** In the past we have gotten over some large hurdles (migrating OpenMM included contributing a recipe for CUDA toolkits) and more tedious blockers (migrating the OpenFF stack involved contributing something like 10-20 separate packages, piece by piece). `conda-forge` has [some tooling](https://conda-forge.org/docs/maintainer/knowledge_base.html#using-cmake) built around CMake, including MKL and some number of compilers. (Sorry - I'm not really an expert in packaging compiled code so I can't say much more about this - others may c",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2300:713,sustainab,sustainable,713,https://psicode.org,https://github.com/psi4/psi4/issues/2300,1,['sustainab'],['sustainable']
Energy Efficiency,"Hi Psi4 team,. I've seen some strange problems with the FCHK file in recent versions of Psi4. This includes 1.2 (release) and v1.3a1-405-gdcb0159 from github.; I am using the following commands to write out the FCHK file: . > energy, wfn = energy('PBE0', return_wfn=True); > ; > fchk_writer = psi4.FCHKWriter(wfn); > fchk_writer.write('TNB_n2_A.fchk'). This works correctly for small systems like H2O: all expected fields in the FCHK file are present. But for larger systems like TNB (file enclosed below), the following are missing:; 1) Alpha MO coefficients (Beta is present); 2) No orbital energies are present. There may be more fields missing, but these are the ones I know of. . What is odd is that the problem is not apparently systematic: the FCHK file is correct for the RDX molecule (all fields are present), but not TNB. . I need both the MO coefficients and MO energies for subsequent SAPT(DFT) calculations in CamCASP. We never had problems with Psi4 1.1, but need the AC in 1.2/3. Unfortunately this problem arises. . I hope this can be fixed and the structure/fields in the FCHK file made consistent with the specs. ; All the best,; Alston. **Input file:**. > memory 61440 MB; > ; > basis {; > assign aug-cc-pvdz; > }; > ; > molecule TNB_1 {; > no_reorient; > no_com; > units bohr; > 0 1; > O1 1.09555107 3.76703629 -7.83852576; > O2 1.12573623 6.36725616 -4.70326928; > O3 -2.95373205 4.13977831 3.05907653; > O4 -4.81462989 0.53449898 3.42022641; > O5 -3.04576492 -4.23365310 -7.04056005; > O6 -4.88147857 -5.23919973 -3.54614660; > N1 0.56718784 4.39077285 -5.70465171; > N2 -3.61888234 2.10279732 2.26585157; > N3 -3.68554450 -3.82553238 -4.88515975; > C1 -0.89474878 2.57110902 -4.18157565; > C2 -1.53597193 3.21430712 -1.73399499; > C3 -2.90523393 1.47230460 -0.35362235; > C4 -3.63263104 -0.83708361 -1.32968698; > C5 -2.93743373 -1.37538831 -3.78771254; > C6 -1.56886658 0.29097245 -5.25919020; > H1 -0.98802906 5.00949031 -0.93088016; > H2 -4.70324490 -2.17020139 -0.21423238; ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1501:226,energy,energy,226,https://psicode.org,https://github.com/psi4/psi4/issues/1501,2,['energy'],['energy']
Energy Efficiency,"Hi Rolling,. Thank you very much for the explanation. I have calculated number of perturbed geometries assuming 3-point formulas are used for the Hessian. Therefore the calculated number of 930 appeared to me too large. However, considering the formula used for off-diagonal elements, it is no more a 3-point formula. . For efficient computation of frequencies we need to implement mode=sow for findif of gradients, which would dramatically decrease the cost of frequencies. @loriab @psi-rking",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/145#issuecomment-122027995:324,efficient,efficient,324,https://psicode.org,https://github.com/psi4/psi4/issues/145#issuecomment-122027995,1,['efficient'],['efficient']
Energy Efficiency,"Hi Susi, I made a new PR to fix the underlying SAD issue. However, READ casting between symmetries will need to wait for Psi4 1.2 as its fixed there. Changing the multiplicity/charge is trickier as its not clear the priority order for occupations (read/guess/eigenvalue ordering). Please note that [this](https://github.com/psi4/psi4/issues/483) ticket attempts to address these issues.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/586#issuecomment-275673604:176,charge,charge,176,https://psicode.org,https://github.com/psi4/psi4/issues/586#issuecomment-275673604,1,['charge'],['charge']
Energy Efficiency,"Hi Susi,. Yes, SCF will always complete at least one iteration. This is mostly due to the fact that `guess read` may pass in junk orbitals and it is not considered a ""real"" iteration, hence `iteration 0`. You can accomplish what you want with the following:. ```; scf_e, scf_wfn = energy('bp86', return_wfn=True); energy('casscf', ref_wfn=scf_wfn); ```. Here, we completely bypass SCF and go directly into the `CASSCF` procedure with the `BP86` orbitals. This will work with any reference, including smaller CAS spaces or a MP2 natural orbital procedure.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/556#issuecomment-271011656:281,energy,energy,281,https://psicode.org,https://github.com/psi4/psi4/issues/556#issuecomment-271011656,2,['energy'],['energy']
Energy Efficiency,"Hi Vladimir,. Thank you for your interest for our OO codes. . In fact, I am working on df-ocepa implementation now. This week I will leave the city for a conference and then I will join a workshop camp for our chemistry olympiad students, I am teaching physical chemistry for chemistry olympiad team. All these will take a two-weeks period. Then, I can finish and release it. I guess a few weeks later the code will be ready for public release. Also note that I will prefer the ""orbital-optimized linearized coupled-cluster doubles"" as the name of new code because cepa is mixed up with other cepa variants. Hence, the new code will be called by energy('df-olccd'). You may follow the psi4public for the new release. Alternatively, I can inform you when it has been released if you provide me your e-mail address. Best regards,; Ugur.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/185#issuecomment-152814498:646,energy,energy,646,https://psicode.org,https://github.com/psi4/psi4/issues/185#issuecomment-152814498,1,['energy'],['energy']
Energy Efficiency,"Hi Yi,. Thanks for your work and the comments. I've been discussing some with Jonathon, and I think if you could do the below, that will clarify all the scaling factor and testing aspects of the PR, so we can move on to the I/O optimization and routing logic parts. Please let me know of any concerns. * accept the various GH suggestions clarifying the scaling scheme changes (only if you agree with them, of course). Feel free to make the changes locally, rather than through the GH interface, if that makes the git operations easier.; * edit sapt-dft1 test to be something like the below. This adds an extra section without the deltaHF correction. The analogous value in test sapt-dft2 is `DHF = -1.42620815`. This passes on master for me, so having the dHF=False pass on your PR will help verify the separate routing logic you added. With this in place, there won't be a need to separate out tests into another PR.; ```; #! SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. DHF = -0.01189736 #TEST; Eref_nh = {""SAPT ELST ENERGY"": -0.10190449, #TEST; ""SAPT EXCH ENERGY"": 0.36545706, #TEST; ""SAPT IND ENERGY"": -0.00840483, #TEST; ""SAPT DISP ENERGY"": -0.24398704, #TEST; ""CURRENT ENERGY"": 0.01122234} #TEST. Eref_h_disp = {""SAPT ELST ENERGY"": -0.10197193, #TEST; ""SAPT EXCH ENERGY"": 0.36569812, #TEST; ""SAPT IND ENERGY"": -0.00840370, #TEST; ""SAPT DISP ENERGY"": -0.26658499, #TEST; ""CURRENT ENERGY"": -0.01126250} #TEST. Eref_h_fixed = {""SAPT ELST ENERGY"": -0.10197193, #TEST; ""SAPT EXCH ENERGY"": 0.36569812, #TEST; ""SAPT IND ENERGY"": -0.00840370, #TEST; ""SAPT DISP ENERGY"": -0.26605283, #TEST; ""CURRENT ENERGY"": -0.01073034} #TEST. molecule dimer {; Ne; --; Ar 1 6.5; units bohr; }. set {; basis aug-cc-pvdz; scf_type df; sapt_dft_grac_shift_a 0.203293; sapt_dft_grac_shift_b 0.138264; }. # No hybrid kernel & no exch-disp scaling & no deltaHF; set SAPT_DFT_DO_DHF False; set SAPT_DFT_DO_HYBRID False; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; energy('sapt(dft)', molecule=dimer); for k",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216:961,energy,energy,961,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216,1,['energy'],['energy']
Energy Efficiency,"Hi all, ; I followed the tutorial to install the latest PSI4. However, when I used the cp command, it would show ""name 'cp' is not defined"". (if I use other function, such as energy, then there is no this kind of issue). could you help me solve this problem? Thank you.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/653:175,energy,energy,175,https://psicode.org,https://github.com/psi4/psi4/issues/653,1,['energy'],['energy']
Energy Efficiency,"Hi all,. I am getting the following error while running a DMRG calculation. I am using version 1.1rc1. > `###########################################################; > ### ###; > ### DMRG-SCF ###; > ### ###; > ### CheMPS2 by Sebastian Wouters ###; > ### https://github.com/SebWouters/CheMPS2 ###; > ### Comput. Phys. Commun. 185 (6), 1501-1514 (2014) ###; > ### ###; > ###########################################################; > ; > Number of variables in the x-matrix = 22549; > CheMPS2 output is temporarily written to the file singlet.dmrg.out.chemps2 and will be copied here.; > Presorting SO-basis two-electron integrals.; > Sorting File: SO Ints (nn|nn) nbuckets = 47; > ; > Traceback (most recent call last):; > File ""/home/AzureUser/psi4conda/bin/psi4"", line 247, in <module>; > exec(content); > File ""<string>"", line 100, in <module>; > File ""/home/AzureUser/psi4conda/lib//python3.5/site-packages/psi4/driver/driver.py"", line 454, in energy; > wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); > File ""/home/AzureUser/psi4conda/lib//python3.5/site-packages/psi4/driver/procrouting/proc.py"", line 3081, in run_dmrgci; > dmrg_wfn = core.dmrg(ref_wfn); > ; > RuntimeError:; > Fatal Error: PSIO Error; > Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1491459515796/work/psi4/src/psi4/libpsio/error.cc on line: 128; > The most recent 5 function calls were:; > ; > psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); > psi::psio_error(unsigned int, unsigned int); > psi::PSIO::rw(unsigned int, char*, psi::psio_address, unsigned long, int); > psi::IntegralTransform::presort_so_tei(); > psi::IntegralTransform::transform_tei_first_half(std::shared_ptr<psi::MOSpace>, std::shared_ptr<psi::MOSpace>); > ; > ; > *** Psi4 encountered an error. Buy a developer more coffee!; > *** Resources and help at github.com/psi4/psi4.`",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2102:948,energy,energy,948,https://psicode.org,https://github.com/psi4/psi4/issues/2102,2,['energy'],['energy']
Energy Efficiency,"Hi all,. I am trying Psi4 4.0.0-beta4 today, but encountered a problem when parsing input and fetching corresponding basis set info. Here is a sample input file,; # =======================; # ! sample input. memory 500 mb. molecule test {; Li 0.000 0.000 0.000; }. set reference uhf; set globals = {; scf_type direct; basis 6-31G; e_convergence 10; }. this_energy = energy('scf'); # =======================. running with Psi 4.0.0-beta4 on Linux, compiled with intel composer xe 2013 (x86-64). The error message is: ; # =======================. Traceback (most recent call last):; File ""<string>"", line 36, in <module>; File ""/home/ren/soft/Psi4/share/psi/python/driver.py"", line 526, in energy; procedures['energy'][lowername](lowername, **kwargs); File ""/home/ren/soft/Psi4/share/psi/python/proc.py"", line 489, in run_scf; scf_helper(name, **kwargs); File ""/home/ren/soft/Psi4/share/psi/python/proc.py"", line 707, in scf_helper; e_scf = PsiMod.scf(precallback, postcallback); RuntimeError: sanity check failed! Gaussian94BasisSetParser::parser: Unable to find the basis set for LI; file: /home/ren/soft/psi4.0b4/src/lib/libmints/basisset_parser.cc; line: 339; # =======================. Is it a but or am I wrong anywhere?; I appreciate any help and suggestions,; Hao",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/7:366,energy,energy,366,https://psicode.org,https://github.com/psi4/psi4/issues/7,3,['energy'],['energy']
Energy Efficiency,"Hi all,. I have been benchmarking energy calculations of various organic small-molecule dimers in Psi4. These dimers have minimum monomer separations (closest intermolecular contact) up to 15 Å. To determine which method produces interaction energies closest to coupled cluster results, I have graphed the partial crystal lattice energy contributions (a scaled sum of the dimer interaction energies) for subsets of dimers with monomer separations between (n, n+1). Odd behavior arose when analyzing results of benzene. PBEh-3c returned errors _much_ larger than any other method. To investigate these results, PBE, PBEh, and PBEh-3c were run in ORCA (5.0.1) and Psi4 (1.4rc3). Results are shown below. Methods denoted with an asterisk are those which use a fine grid (total points = 6340328). Methods without an asterisk used the default grid (Psi4 total points = 253270; ORCA total points = 56510). ![subplot-8](https://user-images.githubusercontent.com/87093097/134976005-f5bf7501-27d2-40c0-b033-06b33126f8dc.png). The graph shows that while PBE generally agrees in Psi4 and ORCA, PBEh and PBEh-3c disagree when comparing the two software packages and default grid points are used. When Psi4 uses a fine grid, the results align more-so with ORCA -- and the coupled cluster results. Two individual dimers have been chosen to highlight the differences in interaction energies:. | Benzene Dimer | Min. Monomer Separation (Å) | Interaction Energy (kJ/mol) | Software | Spherical Points | Radial Points | Total Points |; |---|---|---|---|---|---|---|; | 2mer-0+1 | 2.544 | -6.01017169 | ORCA | 194 | OptM3 with GC (2021) | 56510 |; | | | -6.09347943 | Psi4 | 302 | 75 | 253270 |; | | | -6.06158176 | Psi4 | 5810 | 99 | 6340328 |; | 2mer-0+77 | 11.016 | -0.03777130 | ORCA | 194 | OptM3 with GC (2021) | 56510 |; | | | -0.09279455 | Psi4 | 302 | 75 | 253270 |; | | | -0.03957357 | Psi4 | 5810 | 99 | 6340328 |. To me, this seems to be a systematic issue with Psi4 calculating interaction energies with PBE",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2304:34,energy,energy,34,https://psicode.org,https://github.com/psi4/psi4/issues/2304,2,['energy'],['energy']
Energy Efficiency,"Hi all,. I have test PSI4 1.3.1 in Win10/WSL, the tests with test_snsmp2 & test_psi4_cc failed:. ```; ____________________________________________________ test_snsmp2 ______________________________________________________. @pytest.mark.smoke; @using_snsmp2; def test_snsmp2():; """"""snsmp2/he-he"""""". HeHe = psi4.geometry(""""""; 0 1; He 0 0 0; --; He 2 0 0; """"""). > e = psi4.energy('sns-mp2'). miniconda3/envs/psi/lib/python3.6/site-packages/psi4/tests/test_addons.py:935:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; miniconda3/envs/psi/lib/python3.6/site-packages/psi4/driver/driver.py:556: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); miniconda3/envs/psi/lib/python3.6/site-packages/snsmp2/snsmp2.py:81: in run_sns_mp2; m1mhigh = c.compute('m1', 'm', 'high', mp2=True, mp2_dm=True); miniconda3/envs/psi/lib/python3.6/site-packages/snsmp2/wavefunctioncache.py:386: in compute; self._init_ns(calc); miniconda3/envs/psi/lib/python3.6/site-packages/snsmp2/wavefunctioncache.py:143: in _init_ns; return self._init_upcast_C(oldcalc=candidate, calc=calc); miniconda3/envs/psi/lib/python3.6/site-packages/snsmp2/wavefunctioncache.py:172: in _init_upcast_C; new_wfn = self._basis_projection(oldcalc, calc); miniconda3/envs/psi/lib/python3.6/site-packages/snsmp2/wavefunctioncache.py:187: in _basis_projection; old_wfn = core.Wavefunction.from_file(read_filename); miniconda3/envs/psi/lib/python3.6/site-packages/psi4/driver/p4util/python_helpers.py:156: in _core_wavefunction_from_file; wfn_data = np.load(wfn_data).item(); miniconda3/envs/psi/lib/python3.6/site-packages/numpy/lib/npyio.py:447: in load; pickle_kwargs=pickle_kwargs); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. fp = <_io.BufferedReader name='pytest_output.m1-m-low.14086.180.npy'>, allow_pickle = False; pickle_kwargs = {'encoding': 'ASCII', 'fi",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1611:370,energy,energy,370,https://psicode.org,https://github.com/psi4/psi4/issues/1611,3,['energy'],['energy']
Energy Efficiency,"Hi all,. I just built Psi4 on mac os x, and everything seem to build and test fine. However, in doing a calculation I received the following error: . ```; An error has occurred Py-side; Traceback:; <class 'Boost.Python.ArgumentError'>: Python argument types in; OEProp.__init__(OEProp, str); did not match C++ signature:; __init__(_object*, boost::shared_ptr<psi::Wavefunction>): File ""<string>"", line 28, in <module>. File ""/usr/local/psi4/share/psi4/python/p4util/util.py"", line 41, in oeprop; oe = psi4.OEProp(wfn); ```. Input was:. ```; import psi4. molecule {; C 0.012220093121 -0.717626540721 0.000000000000; O -0.062545506204 0.679938040344 0.000000000000; H 0.518735639503 -1.098516178616 0.883563931671; H 0.518735639503 -1.098516178616 -0.883563931671; H -1.002097021106 -1.091505681690 0.000000000000; H 0.811765758420 1.042084199023 0.000000000000; }. set globals {; basis 6-31g*; }. energy('scf'); oeprop(""MULLIKEN_CHARGES""); ```. Commenting out the `oeprop` line not surprisingly gets rid of the error. . I doubt any of the rest of this matters, but... I did get two errors building, in case they're relevant, but I've seen them in other open issues:. ```; The following tests FAILED:; 254 - pywrap-opt-sowreap (Failed); 263 - sapt4 (Failed); Errors while running CTest; make: *** [test] Error 8; ```. Command used to configure: `./setup -DBUILD_CUSTOM_BOOST=TRUE --python /usr/bin/python objdir`; Compiler: gcc/g++/gfortran from hpc.sourceforge.net; OS: OS X 10.10.5",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/260:896,energy,energy,896,https://psicode.org,https://github.com/psi4/psi4/issues/260,1,['energy'],['energy']
Energy Efficiency,"Hi all,. I was using the MRCC interface to compute the CCSDT energy of a trimer at the quadruplet spin state. Psi4 seems to initiate the computation correctly, but the MRCC computation stops after printing; `Calculation of MP denominators...`; without performing the CC iterations, but still printing `Normal termination of mrcc.` ; I tried the water example provided in the MRCC interface manual:; `molecule h2o {; O; H 1 1.0; H 1 1.0 2 104.5; }; set {; basis cc-pVDZ; }; energy('mrccsdt')`; It works fine as is, it also works fine if I change the multiplicity to `0 3` with `reference uhf` but not if I change it to `1 4` with `reference uhf`. It then fails at the same point than my original trimer computation. I notice that the output file of the successful triplet computation prints `Spin multiplicity: 3` twice whereas this line is missing in the failing quadruplet computations (see attached files).; [test.out.txt](https://github.com/psi4/psi4/files/1713187/test.out.txt); [test_quad.out.txt](https://github.com/psi4/psi4/files/1713188/test_quad.out.txt). Running the quadruplet directly through MRCC using their input file works fine.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/915:61,energy,energy,61,https://psicode.org,https://github.com/psi4/psi4/issues/915,2,['energy'],['energy']
Energy Efficiency,"Hi all,. I've been running x2c calculations and when I checked for a simple Fe atom I encountered a bug I guess, as the energy is plain wrong with x2c in the cc-pVDZ basis when ```puream = false```. Here is the script I use:. ```; import psi4; ; psi4.geometry(""""""; Fe 0. 0. 0.; symmetry c1; """"""); psi4.set_options({'basis':""cc-pvdz-decon"",; 'basis_relativistic': ""cc-pvdz-decon"",; 'reference': ""rhf"",; 'relativistic': ""X2C"",; 'puream':""false""}). scf_e, scf_wfn = psi4.energy('scf', return_wfn=True); print(""Hartree-Fock energy: {}"".format(scf_e)); ```. Just replacing ```puream = true``` fixes the issue. Any idea of the reason of this ?; Note that ```sto-3g-decon``` works like a charm with ```puream = false```, so it might be a problem in the f shell ?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1908:120,energy,energy,120,https://psicode.org,https://github.com/psi4/psi4/issues/1908,3,['energy'],['energy']
Energy Efficiency,"Hi all,. Running the following per the docs works as expected:; ```; >>> conda create -n p4env psi4 -c psi4; >>> conda activate p4env; >>> psi4 --version; 1.6.1; ```. And I'm able to use psi4 in PsiAPI mode as expected (can run the h2o geometry opt and freq calcs) after entering a python shell. However, when I try to use Psi4 in Psithon mode like so, I obtain an error:. ```; >>> psi4 -i input.dat -o output.dat; A NumPy version >=1.16.5 and <1.23.0 is required for this version of SciPy (detected version 1.23.1; ```. Is this a compile issue in the Psi4 executable on conda?. In case it's helpful, I'm using a Mac (v.11.3.1) and running conda (4.12.0) with python 3.9.13. The input file I was trying to use contains:. ```; memory 600 mb. molecule h2o {; O; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; energy('scf'); ```. The tests module ran 92 / 4121 tests, and two failed (test_gdma and test_psi4_cc), but these seem unrelated to the current issue.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2661:810,energy,energy,810,https://psicode.org,https://github.com/psi4/psi4/issues/2661,1,['energy'],['energy']
Energy Efficiency,"Hi everyone,. I was testing the ADC(2) code in Psi4 on small molecules and noticed that the results I obtained were significantly different from Q-Chem. The SCF and MP2 energies match very well. For N2 (r = 1.2 A) with cc-pVDZ basis, here's a summary of the energies for the 8 lowest-lying singlet states from Q-Chem 4.4.1 compared to Psi4 1.1:. Q-Chem 4.4.1:; MP2 ground-state energy: -109.2579498247; Excitation energy: 8.385211 eV; Excitation energy: 8.385211 eV; Excitation energy: 8.832813 eV; Excitation energy: 9.441957 eV; Excitation energy: 9.441957 eV; Excitation energy: 13.868446 eV; Excitation energy: 13.868446 eV; Excitation energy: 14.791430 eV. Psi4 1.1: ; MP2 ground-state energy: -109.25794982519506; ->	1 A state : 0.3113289 (a.u.), 8.4716885 (eV); ->	2 A state : 0.3113289 (a.u.), 8.4716885 (eV); ->	3 A state : 0.3343892 (a.u.), 9.0991916 (eV); ->	4 A state : 0.3565394 (a.u.), 9.7019279 (eV); ->	5 A state : 0.3565394 (a.u.), 9.7019279 (eV); ->	6 A state : 0.5069575 (a.u.), 13.7950140 (eV); ->	7 A state : 0.5069575 (a.u.), 13.7950140 (eV); ->	8 A state : 0.5127312 (a.u.), 13.9521243 (eV). The Q-Chem energies agree with my standalone code. For N2 with STO-3G basis I simply get zero excitation energies with Psi4:. ==> ADC(2) Computation <== ; ; -> 1 A state : 0.0000000 (a.u.), 0.0000000 (eV); Non-iterative: 0.3864160 (a.u.), 10.5149136 (eV); ┆ ┆ Occ Vir Coefficient ; --------------------------------------------- ; ; Converged in 2 iteration. ; Squared norm of the S component: 1.0000000 ; The S vector is rotated up to 90.000 (deg.) ; #WARNING: Strongly rotated from the CIS state! ; ; -> 2 A state : 0.0000000 (a.u.), 0.0000000 (eV); Non-iterative: 0.4145495 (a.u.), 11.2804653 (eV); ┆ ┆ Occ Vir Coefficient ; --------------------------------------------- ; ; Converged in 2 iteration. ; Squared norm of the S component: 1.0000000 ; The S vector is rotated up to 90.000 (deg.) ; #WARNING: Strongly rotated from the CIS state! . Any idea about what's going on? . My inpu",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1033:378,energy,energy,378,https://psicode.org,https://github.com/psi4/psi4/issues/1033,10,['energy'],['energy']
Energy Efficiency,"Hi everyone,. I'm on 1.4 and have cherry-picked in the changes from 9163cbd08865d26129cfbaf5c302fc14f870f30f. I'm building from source, as may be relevant to the MKL issues listed in #2283 I'm building with mkl/2019.0.117 (and stuck here for a bit because of my need for MKL_DEBUG_CPU_TYPE to continue to _work_). In addition, I have gcc/9.2.0 and icc/2020.2-108 going in my build env, with the C and CXX and Fortran compilers set to the intel compilers in my cmake config options. I'm running calculations with wB97M-V and was noticing the same issues @jminuse was. After cherry-picking and recompiling the issue persists. Adding `set wcombine false`, as suggested by @andysim makes the issue go away. . Without `set wcombine false`:; ```...; ==> Integral Setup <==; ; DFHelper Memory: AOs need 4.329 GiB; user supplied 4.329 GiB. Using in-core AOs.; ...; ==> Iterations <==; ; Total Energy Delta E RMS |[F,P]|; ; @DF-RKS iter SAD: -306.90903258181044 -3.06909e+02 0.00000e+00 ; @DF-RKS iter 1: -308.38044687527724 -1.47141e+00 1.27547e-03 DIIS; @DF-RKS iter 2: -308.40241691478502 -2.19700e-02 1.31335e-03 DIIS; @DF-RKS iter 3: -308.53663731037796 -1.34220e-01 4.92966e-04 DIIS; @DF-RKS iter 4: -308.55582354785412 -1.91862e-02 1.78690e-04 DIIS; @DF-RKS iter 5: -308.55841981379780 -2.59627e-03 4.24843e-05 DIIS; @DF-RKS iter 6: -308.55870799442886 -2.88181e-04 2.96248e-05 DIIS; @DF-RKS iter 7: -308.55881660865606 -1.08614e-04 1.50957e-05 DIIS; @DF-RKS iter 8: -308.55887443471090 -5.78261e-05 8.58740e-06 DIIS; @DF-RKS iter 9: -308.55891429039167 -3.98557e-05 5.23007e-06 DIIS ; @DF-RKS iter 10: -308.55893438187678 -2.00915e-05 3.97102e-06 DIIS ; @DF-RKS iter 11: -308.55897076821287 -3.63863e-05 3.09810e-06 DIIS ; @DF-RKS iter 12: -308.55899251437626 -2.17462e-05 1.29222e-06 DIIS ; @DF-RKS iter 13: -308.55899611302931 -3.59865e-06 5.63064e-07 DIIS ; @DF-RKS iter 14: -308.55899645885273 -3.45823e-07 2.29741e-07 DIIS ; Energy and wave function converged.; ```. And with `set wcombine false`:",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2279#issuecomment-931478182:885,Energy,Energy,885,https://psicode.org,https://github.com/psi4/psi4/issues/2279#issuecomment-931478182,1,['Energy'],['Energy']
Energy Efficiency,"Hi everyone,. When I run the following input I get different energies depending on the diag_method. While RSP gives the correct zeroth root of H0 as the ground state energy, the default one gives the first root energy as the ground state energy. With RSP Total CI energy = -149.601664883615285; with the default one Total CI energy = -149.577513236489096. İnput:; ```; molecule {; 0 1; O; O 1 1.2156; symmetry c1; }. set {; basis 6-311++G(d); reference rohf; frozen_docc [7]; frozen_uocc [35]; diag_method rsp; }; energy('detci'); ```; @dgasmith @CDSherrill",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1281:166,energy,energy,166,https://psicode.org,https://github.com/psi4/psi4/issues/1281,6,['energy'],['energy']
Energy Efficiency,"Hi guys,. @raimis found this bug and we are adapting to it on our code, but I find it kind of an ugly workaround. Have you experienced it?. @raimis, can you provide some more details? Thanks!. João",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/817:44,adapt,adapting,44,https://psicode.org,https://github.com/psi4/psi4/issues/817,1,['adapt'],['adapting']
Energy Efficiency,"Hi psi4 developers. I want to get amplitudes of CI after finishing CISD calculation.; My input:. memory 2 Gb. molecule acetaldehyde {; 0 1; C 0.000000000000 0.000000000000 0.000000000000; O 0.000000000000 0.000000000000 1.208802240800; H 0.956843585468 0.000000000000 -0.556162423200; C -1.240787823813 0.000000000000 -0.847327118586; H -2.129446365838 0.000000000000 -0.220697345202; H -1.237161750186 0.878440322927 -1.496548823107; H -1.237161750186 -0.878440322927 -1.496548823107; }. set {; basis cc-pVDZ; freeze_core true; ciblks_print true; }; energy('cisd'). I set an option **ciblks_print true** but nothing has changed.; How do I get CI amplitudes (or 20 first one) properly?. Best, Vladimir.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/696:551,energy,energy,551,https://psicode.org,https://github.com/psi4/psi4/issues/696,1,['energy'],['energy']
Energy Efficiency,"Hi there, thanks a lot for including me on this. :) . Transition state optimization is implemented, but we have not tested it extensively against other codes. It does work quite well for in-house applications containing 50+ atoms. I'm very interested to see how you run these optimizations directly in Psi4. It should be a lot more efficient than calling Psi4 repeatedly on the command line. Also happy to provide examples of constrained optimization. Let me know if you need any.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1813#issuecomment-615052462:332,efficient,efficient,332,https://psicode.org,https://github.com/psi4/psi4/pull/1813#issuecomment-615052462,1,['efficient'],['efficient']
Energy Efficiency,"Hi! I'm following the [official tutorial](https://psicode.org/psi4manual/master/psiapi.html) to run a simple HF computation using Psi4:; ```; H2 = psi4.geometry(""""""; units au; H 0 0 0; H 1.4 0 0; """"""; ). psi4.set_module_options('scf', {'e_convergence': '1e-3'}). psi4.energy('scf/cc-pvdz'); ```. However, it seems that after I manually set the energy convergence threshold to `1e-3`, the program still used the default value `1e-6` for the computation based on its output log: ; ```; ==> Algorithm <==. SCF Algorithm Type is DF.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is SAD.; Energy threshold = 1.00e-06; Density threshold = 1.00e-06; Integral threshold = 1.00e-12; ```. Did I use the wrong method to change the option (even though it's recommended in the same tutorial)? If so, what is the correct way to do it in Python? Thank you!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2990:268,energy,energy,268,https://psicode.org,https://github.com/psi4/psi4/issues/2990,3,"['Energy', 'energy']","['Energy', 'energy']"
Energy Efficiency,"Hi!. there is a bug in energy() function: both; energy('scf') ; and; energy('scf', dft_functional='b3lyp'); produce exactly the same results in psi4conda. This fact is inconsistent with http://www.psicode.org/psi4manual/master/dft.html where it is said that the latter syntax is absolutely valid.; See attached archieves for complete input and output files.; [1cc1.z437604.hippodrome.zip](https://github.com/psi4/psi4/files/1777480/1cc1.z437604.hippodrome.zip); [1cc1.z437605.hippodrome.zip](https://github.com/psi4/psi4/files/1777481/1cc1.z437605.hippodrome.zip)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/927:23,energy,energy,23,https://psicode.org,https://github.com/psi4/psi4/issues/927,3,['energy'],['energy']
Energy Efficiency,"Hi, . I was doing the Energy surface scan in PSI4. . The surface scan worked well when there is no dummy atom in the z-matrix.; However, when I added a dummy atom in the z-matrix, the geometries are updated correctly. ; I have attached the input and output files with a dummy atom. . Thank you. Yiling . Input ; ```; # water and na, R is the distance variable for Rvals; memory 1000 mb. molecule dimer {; 0 1; O1 4.70071 0.00000 0.00000; H1 4.11483 0.00000 0.75695; H2 4.11483 0.00000 -0.75695; --; 1 1; X O1 R H1 125.25 H2 180.0; NA X 0.1 O1 180.0 H2 180.0; }. # set the scan variable of R above, ex: distance, manually/automatically assign; # ----------------------------------------------------------------; def frange(start, stop, step): ## do not change the section of def frange; 	i = start; 	while i < stop:; 		yield i; 		i += step; # ----------------------------------------------------------------; # Rvals=[2.5, 3.0, 4.0] ## manually assign the variable, ex: distance at 2.5, 3.0 and 4.0 anstrom; Rvals=[]; for j in frange(1.4, 1.9, 0.1): ## automatically assign the variable; the endpoint will not be performed; 	Rvals.append(round(j,2)) ## decimal is 2. ; # basis set; # ----------------------------------------------------------------; ##set basis <basisset>; set basis 6-31G(d). set guess sad; set scf_type df; set freeze_core false ## false for ions; ####cp(""df-mp2"") ## moved to below. # get the energy at each variable; # ----------------------------------------------------------------------------; # Initialize a blank dictionary of counterpoise corrected energies; # (Need this for the syntax below to work). ecp = {}; for R in Rvals:; dimer.R = R; ecp[R] = energy(""mp2"", bsse_type = ""cp"") ## for new version; #ecp[R] = cp(""df-mp2"") ## for beta version; e= ecp[R] * psi_hartree2kcalmol; psi4.print_out(""R, E_int [kcal/mol]: %3.1f %10.6f\n"" % (R, e)). # print out all the energies; # ----------------------------------------------------------------------------; psi4.print_out(""\n"")",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2880:22,Energy,Energy,22,https://psicode.org,https://github.com/psi4/psi4/issues/2880,1,['Energy'],['Energy']
Energy Efficiency,"Hi, I am doing DFT calculations and get results like this:. @Final double-hybrid DFT total energy = -76.4165290991355590. Since a double precision floating point number can only store 15 decimals I wonder where the other decimals come from?; ; The excess of precision is a problem if I try to read the output files using a C++ program and the energy is truncated, which of course I can work around but that should not be necessary, right?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1733:91,energy,energy,91,https://psicode.org,https://github.com/psi4/psi4/issues/1733,2,['energy'],['energy']
Energy Efficiency,"Hi, I am trying to compute energy and force scans for some diatomic compounds using psi4.gradeint. In this case, a NO radical is used, with MP2 and the aug-cc-pvtz basis. The energy is not a smooth function of the distance, however all the calculations have converged SCF. Complete input script which takes a few minutes to run is attached as well as output. There are more examples. Am I missing something in checking for convergence? The main part of the script is here:; ```; converged = True; try:; grad, wfn = psi4.gradient(""MP2"", molecule=geom, return_wfn=True); except psi4.driver.SCFConvergenceError as ex:; converged = False; print(""SCF convergence error at r = %g converged = %s"" % (r, str(converged))); if converged:; myener = wfn.energy(); forces = grad.to_array(); table.append([r, myener, -forces[0][2]]); ```. I would be thankful for any input!. ![energy](https://user-images.githubusercontent.com/3735358/225842500-985ebc66-c219-455b-8ada-39eba9729b88.png); [psi4energy.zip](https://github.com/psi4/psi4/files/10998961/psi4energy.zip)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2901:27,energy,energy,27,https://psicode.org,https://github.com/psi4/psi4/issues/2901,4,['energy'],['energy']
Energy Efficiency,"Hi, I created brand new `conda` environment and then installed `psi4` with:. ```; conda install psi4 psi4-rt python=3.6 -c psi4; ```. and then tried to run a test input, like so:. ```; # Any line starting with the # character is a comment line; #! Sample HF/cc-pVDZ H2O computation. memory 600 mb. molecule h2o {; O; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; energy('scf'); ```. I receive a segmentation fault and see the following Traceback:. ```TraceBack; psi4 test.in test.out; Traceback (most recent call last):; File ""/xxx/anaconda3/envs/psi4/bin/psi4"", line 177, in <module>; import psi4; File ""/xxx/anaconda3/envs/psi4/lib//python3.6/site-packages/psi4/__init__.py"", line 82, in <module>; from .driver import endorsed_plugins; File ""/xxx/anaconda3/envs/psi4/lib//python3.6/site-packages/psi4/driver/endorsed_plugins.py"", line 33, in <module>; import v2rdm_casscf; File ""/xxx/anaconda3/envs/psi4/lib//python3.6/site-packages/v2rdm_casscf/__init__.py"", line 45, in <module>; psi4.core.plugin_load(sofile); RuntimeError:; Fatal Error: load_plugin: Cannot open library: core.so: cannot open shared object file: No such file or directory; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1563933640427/work/psi4/src/psi4/libplugin/load_plugin.cc on line: 52; The most recent 5 function calls were:. forrtl: severe (174): SIGSEGV, segmentation fault occurred; ```. This also happens if I make the input file use the Python API. This is using:. - `conda` 4.8.3; - RHEL 7.6. Yikes. I just typed `psi4 --version` to grab the version and also received the Traceback, so something deep inside psi4 appears to be broken. I wasn't able to find a similar issue on GitHub, so apologies if this is already known. I tried to update `libint` based on this [thread](https://github.com/psi4/psi4/issues/1533), but that didn't fix this.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1984:367,energy,energy,367,https://psicode.org,https://github.com/psi4/psi4/issues/1984,1,['energy'],['energy']
Energy Efficiency,"Hi, I noticed some odd ghosting behavior when doing interaction energy calculations on molecules containing Iodine. . When manually doing the counterpoise correction for a non-I-containing molecule, Psi4 reads the ghosted atoms properly and computes a sensible interaction energy (see `correctly-ghosted.txt`). However, when manually doing the counterpoise correction for an I-containing molecule, Psi4 does not ghost the atoms at all, and does the exact same calculation three times, resulting in an incorrect interaction energy (see `incorrectly-ghosted.txt`). The (much easier) workaround here is to counterpoise correct using the bsse_type=""cp"" interface, but I wanted to bring this to your attention anyways. [correctly-ghosted.txt](https://github.com/psi4/psi4/files/1458283/correctly-ghosted.txt); [incorrectly-ghosted.txt](https://github.com/psi4/psi4/files/1458284/incorrectly-ghosted.txt). Thanks!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/843:64,energy,energy,64,https://psicode.org,https://github.com/psi4/psi4/issues/843,3,['energy'],['energy']
Energy Efficiency,"Hi, I used the following code to do the dual descriptor analysis and with vmd for visualization. i think the visualization result is pretty nice. But dont know how to get the atom level contribution for the dual descriptor? i mean i want to get a dual descriptor value for each atom based on this analysis. please let me know whether is actionable or not, if yes, how to do this. memory 16GB. set {; basis def2-tzvp; scf_type df; cubeprop_tasks ['DUAL_DESCRIPTOR']; }. molecule {; 0 1; O 0.0079 -1.9528 -0.0005; C -2.5157 -0.6433 0.0011; C 2.5068 -0.5969 -0.0025; C -1.1805 0.1195 0.0002; C 1.1968 0.1198 -0.0018; C -0.0047 -0.5887 -0.0004; C -1.2319 1.4923 -0.0006; C 1.1838 1.5146 -0.0026; C -3.6879 0.3616 0.0011; C -2.6068 -1.5297 1.2621; C -2.7079 -1.5687 -1.2217; C 2.5070 -1.9923 0.7039; C 3.0017 -0.8662 -1.4567; C 3.6063 0.2376 0.7231; C -0.0305 2.2009 -0.0020; C -0.0443 3.6922 -0.0027; H -2.1329 2.0904 -0.0043; H 2.0930 2.1046 -0.0334; H -3.7145 0.9835 -0.9019; H -3.7037 0.9949 0.8966; H -4.6437 -0.1797 0.0141; H -1.9229 -2.3824 1.2564; H -3.6157 -1.9476 1.3668; H -2.4027 -0.9472 2.1687; H -2.0011 -2.4024 -1.2484; H -2.5837 -1.0072 -2.1552; H -3.7124 -2.0084 -1.2299; H 3.5334 -2.3099 0.9302; H 1.9732 -1.9611 1.6607; H 2.1098 -2.8008 0.0833; H 3.1163 0.0724 -2.0117; H 3.9714 -1.3768 -1.4592; H 2.2900 -1.4879 -2.0116; H 4.5299 -0.3429 0.8400; H 3.8984 1.1317 0.1617; H 3.2837 0.5402 1.7263; H -0.8758 4.0777 0.5971; H -0.1445 4.0662 -1.0265; H 0.8759 4.1009 0.4287; H 0.3642 -2.2241 -0.8650; }. E, wfn = energy('PBE0', return_wfn=True); fchk(wfn, ""orbital.fchk""); cubeprop(wfn); ![Uploading bht_dual_descriptor_visualization_by_vmd.png…]()",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3108:1522,energy,energy,1522,https://psicode.org,https://github.com/psi4/psi4/issues/3108,1,['energy'],['energy']
Energy Efficiency,"Hi, I'm new with Psi4 so my problem could be a little naive, I'm dealing with a similar issue than @autolife , when I try to run the energy calculation of a silver containing molecule, I get stuck with basis set error (STO-3G). In the following lines I have pasted a simplified input.in and the error message. . Thanks in advance ; Matias . ---. molecule {; 1 1; Ag 0.37900000 -2.54600000 8.09100000; }. set basis sto-3g; energy('df-mp2'); set molden_write true. ## property('df-mp2', properties=['MULLIKEN_CHARGES']). qcdb.exceptions.BasisSetNotFound: BasisSet::construct: Unable to find a basis set for atom 1 for role JKFIT among:; Shell Entries: ['AG']; Basis Sets: ['cc-pvdz-ri', 'def2-qzvpp-jkfit']; File Path: , /home/matias/anaconda/share/psi/basis; Input Blocks:",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/105#issuecomment-144729559:133,energy,energy,133,https://psicode.org,https://github.com/psi4/psi4/issues/105#issuecomment-144729559,2,['energy'],['energy']
Energy Efficiency,"Hi, Lori. I've written and re-written a response to this out of concern for the definition of the correlation energy, but ultimately I've decided that the existing standard is reasonable (if not perfect, but I guess nothing is in this case). I also agree with your tightening of convergence criteria and the improvement of the docs, which look correct to me.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2708#issuecomment-1232380915:110,energy,energy,110,https://psicode.org,https://github.com/psi4/psi4/pull/2708#issuecomment-1232380915,1,['energy'],['energy']
Energy Efficiency,"Hi, PSI4 developers. My input:. ```; memory 1000 mb; molecule naphtalene {; 0 1; H -3.36584264 1.24097876 0.00000000; H -3.36584264 -1.24097876 0.00000000; C -2.42446866 -0.70593661 0.00000000; C -2.42446866 0.70593661 0.00000000; H -1.23966218 -2.48102176 0.00000000; C -1.24087056 -1.39724699 0.00000000; H -1.23966218 2.48102176 0.00000000; C -1.24087056 1.39724699 0.00000000; C 0.00000000 -0.71416200 0.00000000; C 0.00000000 0.71416200 0.00000000; H 1.23966218 -2.48102176 0.00000000; C 1.24087056 -1.39724699 0.00000000; H 1.23966218 2.48102176 0.00000000; C 1.24087056 1.39724699 0.00000000; C 2.42446866 -0.70593661 0.00000000; C 2.42446866 0.70593661 0.00000000; H 3.36584264 1.24097876 0.00000000; H 3.36584264 -1.24097876 0.00000000; }. set {; basis sto-3g; scf_type df; ROOTS_PER_IRREP = [ 0, 0, 0, 0, 0, 0, 1, 1 ]; }. energy('eom-cc3'); ```. crash on second excitation state calculation with error:. ```; PSIO_ERROR: unit = 128, errval = 18; PSIO_ERROR: 18 (Incorrect block end address). An error has occurred. Traceback:; <type 'exceptions.RuntimeError'>:.; Fatal Error: PSIO Error; Error occurred in file: /home/vladimir/git/psi4public/src/lib/libpsio/error.cc on line: 123; The most recent 5 function calls were:. psi::PsiException::PsiException(std::string, char const*, int); psi::psio_error(unsigned int, unsigned int); psi::PSIO::read(unsigned int, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::psio_read(unsigned int, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::DPD::file4_mat_irrep_rd(psi::dpdfile4*, int); : File ""<string>"", line 43, in <module>. File ""/usr/local/psi4/share/psi4/python/driver.py"", line 586, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs). File ""/usr/local/psi4/share/psi4/python/proc.py"", line 2243, in run_eom_cc; psi4.cceom(ref_wfn); ```. with respect, Vladimir.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/307:832,energy,energy,832,https://psicode.org,https://github.com/psi4/psi4/issues/307,3,['energy'],['energy']
Energy Efficiency,"Hi, PSI4 users.; I run OMP2/OMP3/OCEPA for cubane molecule (Molecular point group: d2h, Full point group: Oh).; And found that OMP2 didn't use symmetry in SCF run, but OMP3/OCEPA does.; Using symmetry significantly accelerates calculation. . My input:. > # ; > ; > memory 1000 mb; > molecule cubane {; > 0 1; > H 1.4194 -1.4194 1.4194; > C 0.7855 -0.7855 0.7855; > H 1.4194 -1.4194 -1.4194; > C 0.7855 -0.7855 -0.7855; > H 1.4194 1.4194 1.4194; > C 0.7855 0.7855 0.7855; > H 1.4194 1.4194 -1.4194; > C 0.7855 0.7855 -0.7855; > H -1.4194 1.4194 -1.4194; > C -0.7855 0.7855 -0.7855; > H -1.4194 1.4194 1.4194; > C -0.7855 0.7855 0.7855; > H -1.4194 -1.4194 1.4194; > C -0.7855 -0.7855 0.7855; > H -1.4194 -1.4194 -1.4194; > C -0.7855 -0.7855 -0.7855; > }; > ; > set {; > basis cc-pVDZ; > scf_type pk; > E_CONVERGENCE 10; > D_CONVERGENCE 10; > molden_write true; > }; > ; > energy('omp2'). Git: Rev {master} 521f06adb441ac1e2f1732eb1cd090190b409c49. Vladimir",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/186:871,energy,energy,871,https://psicode.org,https://github.com/psi4/psi4/issues/186,1,['energy'],['energy']
Energy Efficiency,"Hi, all! I mentioned this issue yesterday at the Psi4 Dev meeting, and I wanted to post the issue here, with more collected information. The crux of the issue, as I have determined, is that the COSX code, when using the ROBUST grid pruning scheme in conjunction with 146 spherical points on either of its grids (initial or final), simply breaks. Consider the following input:; ```; molecule mol {; 0 1; O; H 1 0.96; H 1 0.96 2 104.5; symmetry c1; no_reorient; no_com; }. set {; scf_type cosx; df_scf_guess false; basis aug-cc-pVDZ; e_convergence 1.0e-10; incfock true; incfock_full_fock_every 4; ints_tolerance 1.0e-12; cosx_spherical_points_final 146; cosx_radial_points_final 50; cosx_pruning_scheme robust; }. energy = energy('scf'); ```. A simple expansion of the final COSX grid compared to default. This calculation breaks upon entering the final SCF iteration (where the tight grid is used) with the following error:; ```; !----------------------------------------------------------------------------------!; ! !; ! ADIIS minimization failed. File a bug, and include your entire input and output !; ! files. !; ! !; !----------------------------------------------------------------------------------!; ```. The following input, an expansion of both the initial and final grids, also fails:; ```; molecule mol {; 0 1; O; H 1 0.96; H 1 0.96 2 104.5; symmetry c1; no_reorient; no_com; }. set {; scf_type cosx; df_scf_guess false; basis aug-cc-pVDZ; e_convergence 1.0e-10; incfock true; incfock_full_fock_every 4; ints_tolerance 1.0e-12; cosx_spherical_points_initial 146 ; cosx_radial_point_initial 50 ; cosx_spherical_points_final 302; cosx_radial_points_final 75 ; cosx_pruning_scheme robust; }. energy = energy('scf'); ```. This one fails in the SAD-guess iteration, with the following error:; ```; !----------------------------------------------------------------------------------!; ! !; ! Fatal Error: Matrix::diagonalize: DSYEV failed! !; ! Error occurred in file: !; ! /theoryfs2/ds/dpoole",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2890:713,energy,energy,713,https://psicode.org,https://github.com/psi4/psi4/issues/2890,2,['energy'],['energy']
Energy Efficiency,"Hi, thanks for the quick answer. Could be: as I was starting MOM within very few iterations, the impact of the guess may have been decisive. However, changing the guess (specifically from sad to read, taking the orbitals from the previous RHF calculation) did not work. What apparently fixes the issue, independently of the guess, was increasing the number of SCF iterations before activating MOM. So I don't really know what is it. . Also note that, while my inputs may seem very strange (and, quite possibly, messy), the HF/UHF case is the most simple one. Converging these states with large basis sets in DFT is a true pain, and often requires a lot of toying around). As an additional note, the energy that the program was giving with that output is exactly 9.3609016111309238, the nuclear repulsion energy. So, for whatever reason, the electronic energy is 0 in that state.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1692#issuecomment-518487956:699,energy,energy,699,https://psicode.org,https://github.com/psi4/psi4/issues/1692#issuecomment-518487956,3,['energy'],['energy']
Energy Efficiency,"Hi,. Against a build of HEAD, using the following input:. ```; set basis $BASIS_SET$. molecule MOL {; 0 1; C 0.0 0.00000 0.00000; symmetry c1; }. energy('scf'); oeprop(""GRID_ESP"", ""GRID_FIELD""); ```. When $BASIS_SET$ is set to ""6-31G*"", PSI4 runs to completion, correctly outputting grid_esp.dat and grid_field.dat files. However, when set to ""cc-pvdz"", PSI4 fails in oeprop(), with the errror:. ```; Traceback (most recent call last):; File ""<string>"", line 22, in <module>; File ""/usr/local/psi4/share/psi//python/p4util/util.py"", line 46, in oeprop; oe.compute(); RuntimeError: Matrix::vector_dot: Dimensions do not match!. ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/84:146,energy,energy,146,https://psicode.org,https://github.com/psi4/psi4/issues/84,1,['energy'],['energy']
Energy Efficiency,"Hi,. Forgive me if this is elementary. I want to compute reaction rates between an open and closed ring in a molecule. . <img width=""489"" alt=""Screenshot 2023-11-15 at 9 53 43 AM"" src=""https://github.com/psi4/psi4/assets/11812946/02f6b424-9ad0-41ab-9994-2fe667eb1232"">. If we take a z-matrix of the input and output. <img width=""159"" alt=""Screenshot 2023-11-15 at 9 56 05 AM"" src=""https://github.com/psi4/psi4/assets/11812946/9857d904-2867-4d84-b201-b72500bf796b"">. And pass it through the psi4 code:. ```python. import psi4 . psi4.set_options({; 'scf_type': 'df',; 'g_convergence': 'gau_tight',; 'freeze_core': 'true',; }). zmatrix = ''. molecule = psi4.geometry(zmatrix); molecule.update_geometry(). energy, wave_function = psi4.energy(; 'mp2/cc-pvqz',; return_wfn=True,; molecule=molecule; ). frequency = psi4.frequencies(; ' mp2/cc-pvqz',; ref_gradient=wave_function.gradient(),; molecule=molecule; ). ```. I can run the thermo package and obtain energies in both closed/open states but I was wondering how, thermodynamically (the different energetic terms: Thermal Energy, Enthalpy, Gibbs Free Energy), this relates to the erying equation. . Is the enthalpy of activation = enthalpy of closed - enthalpy of open.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3077:702,energy,energy,702,https://psicode.org,https://github.com/psi4/psi4/issues/3077,4,"['Energy', 'energy']","['Energy', 'energy']"
Energy Efficiency,"Hi,. Hope you don't mind me asking if there's an ETA for the 1.1.0 release?; I ask only because I'd like to co-ordinate with the release schedule of our own software that has a dependency on Psi4. Thanks,. Matt",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/608:137,schedul,schedule,137,https://psicode.org,https://github.com/psi4/psi4/issues/608,1,['schedul'],['schedule']
Energy Efficiency,"Hi,. I am new to psi4 and am having a question about how to read in initial guess wfn. Below is my input:; ```; memory 4000 mb; molecule mol {; 0 3; 	O 1.09800 -0.01685 0.05354; 	O 2.24893 -0.01685 0.05354; }; set basis 6-31g*; set puream false; set reference uhf; set scf_type direct; set guess read; e, wfn = energy('scf', molecule=mol, return_wfn=True, restart_file=""./psi-wfn.npy"") ; molden(wfn, 'psi4-out.molden'); wfn.to_file('psi-wfn-new'); ```; But it does not seem to use the guess wfn (psi-wfn.npy) and still need 12 cycles to converge (I kept the same basis set and method in this test).; ```; SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF.; ```. I also did a comparison test where I have these two subsequential jobs in the same input file, and I found the second job loaded the wfn file from the previous job. Do I need to change the naming of the wfn file to a specific format? Or does psi4 currently support reading .npy (or other types of the wfn files) from different jobs? Thanks in advance for you help!. Best,; Chenru",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1936:311,energy,energy,311,https://psicode.org,https://github.com/psi4/psi4/issues/1936,1,['energy'],['energy']
Energy Efficiency,"Hi,. I am now using the developer version 1.4a2.dev215, and I realized that some of my calculation are not giving the same results as before. I asked someone to do the same calculation with the release version of psi4 and we indeed have something really different. We did H4, square shape. I enclose the output of both files. Note that this was done with the OpenFermion-Psi4 interface and the output contains HF, CISD, FCI and CCSD calculations. I do not see any difference in the settings, so I don't understand why I get wrong HF energy for instance. Can anyone see something or knows something about it ?. [version_1.4a2.dev215.txt](https://github.com/psi4/psi4/files/4579640/version_1.4a2.dev215.txt); [release_1.3.2.txt](https://github.com/psi4/psi4/files/4579639/release_1.3.2.txt)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1878:533,energy,energy,533,https://psicode.org,https://github.com/psi4/psi4/issues/1878,1,['energy'],['energy']
Energy Efficiency,"Hi,. I am running Psi4 on Microsoft Azure. We have a 32 CPU and 128 GB of memory for running our workflow Ubuntu 20.04. When I run our code I get for optimizing `psi4.optimize` I get an initial segmentation fault. Python version 3.7, and psi4 version 1.7. It's odd because with . psi4.set_memory('128GB'); psi4.get_memory(). I can see psi4 has that allocated memory. When I run:. `psi4 --test`. ```; /_pytest/config/__init__.py"", line 620, in _importconftest; assert mod not in mods; AssertionError; ```. This gets returned. What is going on here, any hints?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3154:349,allocate,allocated,349,https://psicode.org,https://github.com/psi4/psi4/issues/3154,1,['allocate'],['allocated']
Energy Efficiency,"Hi,. I am trying to do a large CASCI (16e,16o) but I get an error which I don't understand. Note that the CAS(16e,14o) worked perfectly. Here is the error:; ```; PSIO_ERROR: unit = 53, errval = 12; PSIO_ERROR: 12 (error writing to file); Traceback (most recent call last):; File ""/marisdata/senjean/Git_repo/SA-OO-VQE//intersection_coniques.py"", line 47, in <module>; en0_casci,en1_casci = get_energies_formaldimine(alpha,phi); File ""/marisdata/senjean/Git_repo/SA-OO-VQE//intersection_coniques.py"", line 35, in get_energies_formaldimine; E0_casci = psi4.energy('fci'); File ""/home/senjean/psi4conda/lib/python3.7/site-packages/psi4/driver/driver.py"", line 556, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/senjean/psi4conda/lib/python3.7/site-packages/psi4/driver/procrouting/proc.py"", line 2998, in run_detci; ciwfn = core.detci(ref_wfn); RuntimeError:; Fatal Error: PSIO Error; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1557940846948/work/psi4/src/psi4/libpsio/error.cc on line: 128; The most recent 5 function calls were:. psi::PSIO::rw(unsigned long, char*, psi::psio_address, unsigned long, int); psi::PSIO::write_entry(unsigned long, char const*, char*, unsigned long); ```. and here is the script:. ```; import os; import numpy as np; psi4.set_memory(int(2e9)). # Conical intersection in Formaldimine; pes_origin = [1.498047, 1.066797, 0.987109, 118.359375]; psi4.core.set_output_file(""formaldimine.txt"", False); # sto-3g : 13 orbitals, cc-pVDZ: 43, cc-pVTZ: 102. Nelec: 16. def get_energies_formaldimine(alpha,phi):; #name = ""formaldimine_alpha"" + str(alpha) + "".txt""; #psi4.core.set_output_file(name, False); psi4.core.clean(); variables = pes_origin[:] + [alpha, phi]; psi4.geometry(; """"""0 1; N; C 1 {0}; H 2 {1} 1 {3}; H 2 {1} 1 {3} 3 180; H 1 {2} 2 {4} 3 {5}; symmetry c1"""""".format(*variables)); psi4.set_options({'basis': 'cc-pVDZ',; 'reference': 'rhf',; 'scf_type': 'pk', # set e_convergence and d_",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1959:555,energy,energy,555,https://psicode.org,https://github.com/psi4/psi4/issues/1959,3,['energy'],['energy']
Energy Efficiency,"Hi,. I am wondering if it is possible to run a torsion scan from the python API using cartesian coordinates. . For example, can the following be executed solely from python?; (copying code from here : https://psicode.org/psi4manual/master/optking.html?highlight=torsion+scan#constrained-optimizations). ```; molecule hooh {; 0 1; H; O 1 0.95; O 2 1.39 1 103; H 3 0.95 2 103 1 D. D = 99. units ang; }. set {; basis cc-pvdz; intrafrag_step_limit 0.1; frozen_dihedral ("" 1 2 3 4 ""); }. dihedrals = [100, 110, 120, 130, 140, 150]; PES = []. for phi in dihedrals:; hooh.D = phi; E = optimize('scf'); PES.append((phi, E)). print(""\n\tcc-pVDZ SCF energy as a function of phi\n""); for point in PES:; print(""\t%5.1f%20.10f"" % (point[0], point[1])); ```. Thanks,; Erik",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2910:640,energy,energy,640,https://psicode.org,https://github.com/psi4/psi4/issues/2910,1,['energy'],['energy']
Energy Efficiency,"Hi,. I have a molecule that has Gallium ion approaching the surface of an aromatic ring. There are 3 in the structure. I want to perform UV excitation on them to get an initial wavelength but running into problems. Is my error so far. My code looks something like this:. ```python. psi4.set_options({; 'scf_type': 'df',; 'g_convergence': 'gau',; 'freeze_core': 'true',; 'reference': 'uhf',; 'save_jk': True,; 'fail_on_maxiter': 'false'; }). molecule = 'X'. energy, wave_function = psi4.energy(; 'hf/6-311g',; return_wfn=True,; molecule=self.molecule; ). rpa = tdscf_excitations(wave_function, states=[10]); poles = [r[""EXCITATION ENERGY""] for r in rpa]; opa_residues = [np.linalg.norm(r[""ELECTRIC DIPOLE TRANSITION MOMENT (LEN)""])**2 for r in rpa]; ecd_residues = [r[""ROTATORY STRENGTH (LEN)""] for r in rpa]; opa_spectrum = spectrum(poles=poles, residues=opa_residues, gamma=0.01, out_units=""nm""); ```. Stacktrace Error:. ```python; File ""/home/sulstice/software/miniconda2/envs/qmpython3/lib/python3.9/site-packages/psi4/driver/procrouting/response/scf_response.py"", line 720, in tdscf_excitations; res_1 = _solve_loop(wfn, ptype, solve_function, singlets_per_irrep, maxiter, restricted, ""singlet""); File ""/home/sulstice/software/miniconda2/envs/qmpython3/lib/python3.9/site-packages/psi4/driver/procrouting/response/scf_response.py"", line 326, in _solve_loop; ret = solve_function(engine, nstates, guess_, maxiter); File ""/home/sulstice/software/miniconda2/envs/qmpython3/lib/python3.9/site-packages/psi4/driver/procrouting/response/scf_response.py"", line 690, in rpa_solver; return solvers.hamiltonian_solver(engine=e,; File ""/home/sulstice/software/miniconda2/envs/qmpython3/lib/python3.9/site-packages/psi4/driver/p4util/solvers.py"", line 989, in hamiltonian_solver; raise RuntimeError(msg); RuntimeError: The H2 matrix is not Positive Definite. This means the reference state is not stable.; ```. Running things I would maybe predict at UHF is not right and I don't think this is a coordinate op",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3134:457,energy,energy,457,https://psicode.org,https://github.com/psi4/psi4/issues/3134,3,"['ENERGY', 'energy']","['ENERGY', 'energy']"
Energy Efficiency,"Hi,. I just started to use PSI4 and wanted to test whether my installation is able to work with CFOUR. When running PSI4 with the following input:. ```. #!CFOUR test. molecule {; O; H 1 R; H 1 R 2 A. R=0.958; A=104.5; }. set {; cfour_CALC_level=CCSD(T); cfour_BASIS=AUG-PVQZ; cfour_SCF_CONV=12; cfour_CC_CONV=12; }. energy(‘cfour’); ```. Psi4 is complaining about the basis set:. QcdbException BasisSetNotFound: BasisSet::construct: Unable to find a basis set for atom 1 for key BASIS among:; Shell Entries: [‘O’]; Basis Sets: [(’(AUTO)’, ‘(AUTO)’, None)]; File Path: /scr/tobias/psi.1379622…cfour.14c28cc5, /scr/tobias/psi.1379622…cfour.14c28cc5, /xstorage/tobias/bin/psi4/share/psi4/basis; Input Blocks:. Traceback (most recent call last):; File “/xstorage/tobias/bin/psi4/bin/psi4”, line 338, in; exec(content); File “”, line 31, in; File “/xstorage/tobias/bin/psi4/lib//python3.8/site-packages/psi4/driver/driver.py”, line 501, in energy; wfn = procedures[‘energy’][lowername](lowername, molecule=molecule, **kwargs); File “/xstorage/tobias/bin/psi4/lib//python3.8/site-packages/psi4/driver/procrouting/interface_cfour.py”, line 185, in run_cfour; cfour_infile.write(write_zmat(lowername, dertype, molecule)); File “/xstorage/tobias/bin/psi4/lib//python3.8/site-packages/psi4/driver/procrouting/interface_cfour.py”, line 461, in write_zmat; qbs = core.BasisSet.build(molecule, “BASIS”, core.get_global_option(‘BASIS’)); File “/xstorage/tobias/bin/psi4/lib//python3.8/site-packages/psi4/driver/p4util/python_helpers.py”, line 85, in _pybuild_basis; bs, basisdict = qcdb.BasisSet.pyconstruct(mol.to_dict(),; File “/xstorage/tobias/bin/psi4/lib//python3.8/site-packages/psi4/driver/qcdb/libmintsbasisset.py”, line 696, in pyconstruct; bs, msg, ecp = BasisSet.construct(parser, mol,; File “/xstorage/tobias/bin/psi4/lib//python3.8/site-packages/psi4/driver/qcdb/libmintsbasisset.py”, line 918, in construct; raise BasisSetNotFound(f’BasisSet::construct: Unable to find a basis set for atom {at + 1} fo",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2608:316,energy,energy,316,https://psicode.org,https://github.com/psi4/psi4/issues/2608,3,['energy'],['energy']
Energy Efficiency,"Hi,. I just updated my psi4 conda installation using:. `conda install psi4 python=3.10 -c conda-forge/label/libint_dev -c conda-forge `. imports seem to work fine:. ```; import psi4; import forte; ```; however, when I run the following:. ```; psi4.set_memory('500 MB'); numpy_memory = 2 # No NumPy array can exceed 2 MB in size; psi4.core.set_output_file('output.dat', False); # specify the basis; basis = 'cc-pVTZ'; # Set computation options; psi4.set_options({'basis': basis,; 'scf_type': 'pk',; 'save_jk': 'true',; 'guess': 'core',; 'print' : 5,; 'FREEZE_CORE' : 'True',; 'e_convergence': 1e-8,; 'd_convergence': 1e-10,; 'LOCAL_MAXITER':10000}); geometry = '''; O -4.6674893014 0.2942847846 3.0623807031; H -3.892960984 0.903739148 3.0964143699; H -4.4005368234 -0.1221007613 2.241525046; '''; mol = psi4.geometry(geometry+""symmetry c1""); SCF_E_psi = psi4.energy('scf'); ```; it fails with:. ```; File ~/opt/miniconda3/envs/psi4/lib/python3.10/site-packages/psi4/driver/p4util/procutil.py:531, in prepare_options_for_set_options(); 529 current_module = psi_options.get_current_module(); 530 # Get the current Forte options from Forte; --> 531 forte_options = forte.ForteOptions(); 532 forte.register_forte_options(forte_options); 533 psi_options.set_current_module(""FORTE""). AttributeError: module 'forte' has no attribute 'ForteOptions'; ```. I can minimally reproduce the error with:. ```; mport forte; forte_options = forte.ForteOptions(); ---------------------------------------------------------------------------; AttributeError Traceback (most recent call last); Cell In[7], line 2; 1 import forte; ----> 2 forte_options = forte.ForteOptions(); AttributeError: module 'forte' has no attribute 'ForteOptions'; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3010:859,energy,energy,859,https://psicode.org,https://github.com/psi4/psi4/issues/3010,1,['energy'],['energy']
Energy Efficiency,"Hi,. I suspect that this problem is related to the definition of your basis set. The `basis` block in your input file is part of psi4's special syntax to define [custom, mixed basis sets](https://psicode.org/psi4manual/1.5.0/basissets.html#mixing-basis-sets):; ```; basis {; assign def2-SVP; }; ```. I can run your inputs successfully if I swap out that `basis` block for the standard basis syntax:; ```; set {; basis def2-SVP; }; ```. Here's the SCF output from the second input, which starts the SCF from the serialized orbitals:; ```; ==> Iterations <== . Total Energy Delta E RMS |[F,P]|. @DF-RKS iter 0: -270.15381570481316 -2.70154e+02 1.44676e-07 ; @DF-RKS iter 1: -270.15381570483822 -2.50679e-11 1.66794e-07 DIIS; Energy and wave function converged.; ```. This fix should be sufficient if all of your calculations require standard, pre-defined basis sets. If you do need to use custom, mixed basis sets, we'll need to investigate this error further.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2571#issuecomment-1120477445:565,Energy,Energy,565,https://psicode.org,https://github.com/psi4/psi4/issues/2571#issuecomment-1120477445,2,['Energy'],['Energy']
Energy Efficiency,"Hi,. I'm trying to run some CASSCF calculations for systems where the HF reference is terrible. What I'd like to do is use e.g. BP86 orbitals to run CASSCF. However, when I use. energy('bp86'); set guess read; set maxiter 0; set fail_on_maxiter 0; energy('casscf'). it still runs a single HF iteration even though maxiter=0. Would it be possible to change the behavior of maxiter so that maxiter=0 only recomputes the energy and orbital eigenvalues, but does not update the orbitals? (Pseudocanonization should be OK.)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/556:178,energy,energy,178,https://psicode.org,https://github.com/psi4/psi4/issues/556,3,['energy'],['energy']
Energy Efficiency,"Hi,. MBIS calculation fails for iodine containing molecules with DZVP basis set using `psi4 1.4.1` and `psi4 1.6.1`. Here is a minimal reproducible example:; ```; molecule dummyol {; 0 1; C 0. -1.94 0.; I 0. 0.24 0.; H -1.04 -2.27 0.; H 0.52 -2.27 0.90; H 0.52 -2.27 -0.90; }; set {; guess sad; scf_type df; basis DZVP # works for def2-svp; e_convergence 8; d_convergence 8; }; e, wfn = energy('scf', return_wfn=True); oeprop(wfn, ""MBIS_VOLUME_RATIOS"", 'MBIS_CHARGES', title='CH3I-dzvp'). ```; The error message reads:; ```; Traceback (most recent call last):; File ""/home/anaconda3/envs/psi4-09-26-22/bin/psi4"", line 338, in <module>; exec(content); File ""<string>"", line 33, in <module>; File ""/home/anaconda3/envs/psi4-09-26-22/lib//python3.10/site-packages/psi4/driver/p4util/util.py"", line 72, in oeprop; free_atom_volumes(wfn); File ""/home/anaconda3/envs/psi4-09-26-22/lib//python3.10/site-packages/psi4/driver/p4util/prop_util.py"", line 121, in free_atom_volumes; psi4.oeprop(at_wfn, 'MBIS_CHARGES', title=a_sym + "" "" + method, free_atom=True); File ""/home/anaconda3/envs/psi4-09-26-22/lib//python3.10/site-packages/psi4/driver/p4util/util.py"", line 74, in oeprop; oe.compute(). RuntimeError: ; Fatal Error: Atomic Number 53 unsupported by MBIS; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1657298395608/work/psi4/src/psi4/libmints/oeprop.cc on line: 1871; The most recent 5 function calls were:. psi::OEProp::compute_mbis_multipoles(bool); psi::OEProp::compute(). Printing out the relevant lines from the Psithon --> Python processed input file:; core.set_global_option(""SCF_TYPE"", ""df""); core.set_global_option(""BASIS"", ""DZVP""); core.set_global_option(""E_CONVERGENCE"", 8); core.set_global_option(""D_CONVERGENCE"", 8); e, wfn = energy('scf', return_wfn=True); --> oeprop(wfn, ""MBIS_VOLUME_RATIOS"", 'MBIS_CHARGES', title='CH3I-dzvp'). !----------------------------------------------------------------------------------!; ! !; ! Fatal Error: Atomic Number 53 unsuppor",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2728:387,energy,energy,387,https://psicode.org,https://github.com/psi4/psi4/issues/2728,1,['energy'],['energy']
Energy Efficiency,"Hi,. The input file for the problem described below:. ```; molecule C6H6 {; 0 1; C 0.0 1.855 0.0; C 0.0 -1.855 0.0; C 1.6064771240201337 0.9275 0.0; C 1.6064771240201337 -0.9275 0.0; C -1.6064771240201337 0.9275 0.0; C -1.6064771240201337 -0.9275 0.0; H 0.0 3.289 0.0; H 0.0 -3.289 0.0; H 2.848357553047019 1.6445 0.0; H 2.848357553047019 -1.6445 0.0; H -2.848357553047019 1.6445 0.0; H -2.848357553047019 -1.6445 0.0; units au; }. set basis cc-pVDZ; set reference rhf; set e_convergence 1e-12; set d_convergence 1e-12; set ints_tolerance 0.0. optimize('b3lyp'); ```. When you run the geometry optimization in the /tmp folder, the geometry of the SCF doesn't get updated:. First SCF:. ```; Geometry (in Bohr), charge = 0, multiplicity = 1:. Center X Y Z ; ------------ ----------------- ----------------- -----------------; C -0.000000000000 1.855000000000 0.000000000000; C 0.000000000000 -1.855000000000 0.000000000000; C 1.606477124020 0.927500000000 0.000000000000; C 1.606477124020 -0.927500000000 0.000000000000; C -1.606477124020 0.927500000000 0.000000000000; C -1.606477124020 -0.927500000000 0.000000000000; H -0.000000000000 3.289000000000 0.000000000000; H 0.000000000000 -3.289000000000 0.000000000000; H 2.848357553047 1.644500000000 0.000000000000; H 2.848357553047 -1.644500000000 0.000000000000; H -2.848357553047 1.644500000000 0.000000000000; H -2.848357553047 -1.644500000000 0.000000000000; ```. At the end of optking:. ```; Writing optimization data to binary file.; Structure for next step:; Cartesian Geometry (in Angstrom); C -0.0000000000 0.9816237969 0.0000000000; C 0.0000000000 -0.9816237969 0.0000000000; C 0.8501111451 0.4908118984 0.0000000000; C 0.8501111451 -0.4908118984 0.0000000000; C -0.8501111451 0.4908118984 0.0000000000; C -0.8501111451 -0.4908118984 0.0000000000; H -0.0000000000 1.7404639720 0.0000000000; H 0.0000000000 -1.7404639720 -0.0000000000; H 1.5072860141 0.8702319860 0.0000000000; H 1.5072860141 -0.8702319860 0.0000000000; H -1.5072860141 0.8702",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/66:710,charge,charge,710,https://psicode.org,https://github.com/psi4/psi4/issues/66,1,['charge'],['charge']
Energy Efficiency,"Hi,. With Git: Rev {master} 81f120d the following input file:. ```; molecule chromium_dimer{; 0 1; symmetry d2h; Cr 0.0000 0.0000 0.0000; Cr 0.0000 0.0000 1.6788; }. set {; basis cc-pvdz. guess sad; scf_type pk; reference rhf; INTS_TOLERANCE 0.0; D_CONVERGENCE 1e-12; E_CONVERGENCE 1e-12; }. energy('scf'); ```. hangs for more than 1 hour on. ```; SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF.; ```. pyscf and molpro take only seconds (the total number of orbitals is 86). Best wishes,; Sebastian",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/156:292,energy,energy,292,https://psicode.org,https://github.com/psi4/psi4/issues/156,1,['energy'],['energy']
Energy Efficiency,"Hi,. we were recently reviving a PSI4 plugin that was used with an older version of PSI4. Now, we wanted to adapt it to the current development version and realized that the AOIntegralsIterator is hidden (?) in the library. Our fix was to add PSI_API to the class definition in `src/psi4/libmints/integral.h` . . However, for us, it would be easier if it would be accessible by default (mainly to use the conda install and avoid compilation every time). Is there a specific reason, why that class is excluded or hidden in the library? If no, we would be very grateful, if a developer would add it to the header file. . Thank you!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2239:108,adapt,adapt,108,https://psicode.org,https://github.com/psi4/psi4/issues/2239,1,['adapt'],['adapt']
Energy Efficiency,"Hi,; I am just wondering if anyone could provide an example/instruction how to carry out (or if it is feasible to carry out) MRCI calculation using Psi4. In this paper (https://doi.org/10.1063/1.1867379), it sounded like that it was possible to carry out MRCI on Psi 3.2, but I couldn't find much information on the Psi4 manual (nor on the Psi3 manual) on how to do that calculation. I was able to obtain CASSCF energies and wavefunctions, and was going to just use the CASSCF wavefunction as the reference for MRCI calculation, but had little success in doing so. The followings are my code (python), trying to optimize the energy for the C state of the C2 molecule (which has two main configurations near its equilibrium bond length). The paper included above deals with the X, B, and B' state of C2, but those are not the states that I want. (I want the singlet C state). ## geometry; c2=psi4.geometry(""""""; 0 1; c ; c 1 1.25; symmetry d2h; """"""); ##. ## use the C-state main electron configuration as the reference for CASSCF; psi4.set_options({; 'basis': 'cc-pVdz',; 'reference': 'rohf',; 'docc': [2, 0, 0, 0, 0, 1, 0, 1],; 'socc': [0, 0, 0, 0, 0, 1, 1, 0],; 'restricted_docc': [1, 0, 0, 0, 0, 1, 0, 0],; 'active': [2, 0, 1, 1, 0, 2, 1, 1],; 'mcscf_r_convergence': 5.e-6; }). psi4.set_module_options('detci',{; 'num_roots': 1,; 'calc_s_squared': True; }). casscf_energy, casscf_wfn = psi4.energy('casscf', return_wfn=True). #the code works up to this point. ## my way of feeding the casscf_wfn for another round of CI, but it did not work at all; psi4.set_options({; 'wfn': 'detci',; 'guess': 'gwh',; 'basis': 'cc-pVDZ',; 'restricted_docc': [1, 0, 0, 0, 0, 1, 0, 0],; 'active': [2, 0, 1, 1, 0, 2, 1, 1],; 'e_convergence': 10,; 'd_convergence': 10; }). thisenergy = psi4.energy('detci',ref_wfn=casscf_wfn). When I did the second round of CI, psi4 crashed. It got stuck at the ""Starting CI iterations"" part, with the error message ""Segmentation fault: 11"". I am quite new to Psi4, but hopefully I am ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1907:625,energy,energy,625,https://psicode.org,https://github.com/psi4/psi4/issues/1907,1,['energy'],['energy']
Energy Efficiency,"Hi,; I am using the psi4/label/dev build from anaconda, and I noticed that the molden file produced by the following snippet does not write the [7F] line indicating spherical harmonic F-type basis functions to the molden file. [5D] and [9G] are there, so I'm assuming this isn't intentional. ```; import psi4. mol = psi4.geometry(""""""; N 0.0000000000 0.0000000000 0.548756750; N 0.0000000000 0.0000000000 -0.548756750; """"""). E, wfn = psi4.energy('scf/aug-cc-pvtz', return_wfn=True); psi4.molden(wfn, 'n2.molden'); ```; I'm not sure if this has been fixed elsewhere, but I didn't find it reported on here so I thought I would share. I have attached the molden file as well. [n2.molden.txt](https://github.com/psi4/psi4/files/6773734/n2.molden.txt)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2238:438,energy,energy,438,https://psicode.org,https://github.com/psi4/psi4/issues/2238,1,['energy'],['energy']
Energy Efficiency,"Hi,; I try to do a bunch of DFT single point energy calculations of small fragments on the university HPC cluster with a custom basis set.; After the first 20 or so calculations ran smoothly, every subsequent one failed with:; ```. PSIO_ERROR: unit = 35, errval = 5; PSIO_ERROR: 5 (file not open or open call failed); PSIO_ERROR:; PSIO_ERROR: Check the location of your scratch directory which can be; PSIO_ERROR: specified via the $PSI_SCRATCH environment variable or in; PSIO_ERROR: the $HOME/.psi4rc file.; PSIO_ERROR:; PSIO_ERROR: Please note that the scratch directory must exist and be; PSIO_ERROR: writable by Psi4; ```; Thats one example input:; ```; molecule {; 0 1; N -1.4457680611716 -1.1047188295845 0.49148092386593; C -0.19168175766337 -0.75584211512691 0.20898275954952; S 1.16737932640644 -1.82766284403922 0.14616844519932; C 2.16597045357598 -0.42448441793899 -0.26698146976982; N 1.54724741904672 0.67798068286713 -0.34204940942266; C 0.21550144939676 0.55519535899526 -0.0839857520715; C -0.70195776564886 1.65045791061703 -0.10441352532731; O -1.89802765802088 1.54782198311403 0.1259571991072; H -2.11563998092643 -0.33690782979021 0.4823163098176; H -1.71164622110861 -2.0497008550553 0.69762302601465; H 3.21537348272138 -0.55453850454389 -0.43220307841028; H -0.24675068660743 2.6223994604856 -0.34875937387462. no_reorient; no_com; }. # Set the basis set; set {; basis sdzhf; }. # Compute the energy and return the wavefunction; E, wfn = energy('WB97X-D', return_wfn=True). # Save the wavefunction to a file; wfn.to_file(""mol.wfn""); ```; and thats the last portion of the out:; ```; ==> Integral Setup <==. Traceback (most recent call last):; File ""/software/all/PSI4/1.3.2-foss-2020b/bin/psi4"", line 287, in <module>; exec(content); File ""<string>"", line 38, in <module>; File ""/software/all/PSI4/1.3.2-foss-2020b/lib//python3.8/site-packages/psi4/driver/driver.py"", line 556, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3069:45,energy,energy,45,https://psicode.org,https://github.com/psi4/psi4/issues/3069,1,['energy'],['energy']
Energy Efficiency,"Hi,; I was trying the MRCC interface in Psi4 to run energy('mrccsd(t)_l') but I run into a PSIO_ERROR. Input. ```; memory 126 Gb; molecule complex {; 0 1; C 0.028824000 0.102541000 0.329511000; H -0.846717000 0.257672000 -0.295811000; C 1.368536000 0.016176000 0.003655000; H 1.872535000 0.082040000 -0.957212000; N -0.055760000 -0.031179000 1.697636000; C 1.178669000 -0.178253000 2.203240000; H 1.426085000 -0.303457000 3.252661000; N 2.052611000 -0.167236000 1.184832000; C 3.504230000 -0.205550000 1.365908000; H 3.698001000 -0.576769000 2.380482000; H 3.898020000 0.813550000 1.260411000; H 3.939232000 -0.884942000 0.619049000; C -1.256640000 0.100763000 2.523448000; H -1.529670000 1.162452000 2.578623000; H -1.007837000 -0.272600000 3.525198000; H -2.062908000 -0.500349000 2.079371000; F 1.181657000 2.676729000 1.439625000; B 1.518848000 2.859437000 2.791181000; F 1.689389000 4.189751000 3.137207000; F 0.482658000 2.259079000 3.612149000; F 2.731761000 2.111893000 3.070818000; C 1.992235000 1.241852000 8.156885000; H 1.485477000 1.176688000 9.116348000; C 3.332840000 1.154673000 7.834922000; H 4.206519000 0.999649000 8.462845000; N 1.311649000 1.424993000 6.973626000; C 2.188563000 1.435214000 5.957752000; H 1.944614000 1.560136000 4.907488000; N 3.421451000 1.288054000 6.467033000; C 4.624491000 1.154329000 5.644658000; H 4.896627000 0.092348000 5.590783000; H 4.378873000 1.527036000 4.641881000; H 5.430033000 1.755038000 6.090598000; C -0.139438000 1.464529000 6.788437000; H -0.534567000 0.445964000 6.893963000; H -0.329914000 1.835298000 5.773051000; H -0.575851000 2.145114000 7.533419000; F 2.193639000 -1.420051000 6.719505000; B 1.853598000 -1.602720000 5.368653000; F 1.684676000 -2.933106000 5.022169000; F 2.887295000 -1.000476000 4.545917000; F 0.639066000 -0.856861000 5.091564000; }; set globals {; basis aug-cc-pVDZ; scf_type direct; freeze_core True; guess sad; basis_guess 3-21G; }; energy('mrccsd(t)_l'); ```. End of output. ```; *** tstart() called on r3584;",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/35:52,energy,energy,52,https://psicode.org,https://github.com/psi4/psi4/issues/35,1,['energy'],['energy']
Energy Efficiency,"Hi,; Sorry about the accidental break of features. I can fix this next week but for now trajectory information can be accessed like this. `E, history = psi4.optimize('hf/6-31G', molecule=h2o_suboptimal, return_history=True)`. This is what history looks like; ```; history = {; 'energy': [step.E for step in opt_object.history.steps],; 'gradient': [step.cart_grad for step in opt_object.history.steps],; 'coordinates': [step.geom for step in opt_object.history.steps],; }; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3074#issuecomment-1806363687:278,energy,energy,278,https://psicode.org,https://github.com/psi4/psi4/issues/3074#issuecomment-1806363687,1,['energy'],['energy']
Energy Efficiency,"Hi,; for odd cases where there is no electron in either alpha or beta block, sapt0 solver for UHF will result in segfault due to ```zero``` dimension passed to some of the procedures, e.g. ```C_DGEMM``` calls. minimal working example; ```Python; import psi4. psi4.set_memory(""1024 MB""); geo_string = """"""; 0 2; Li 0.000 0.000 -1.000; --; 0 2; H 0.000 0.000 +1.000. no_reorient; no_com; units angstrom; symmetry c1; """""".strip(). BASIS = ""aug-cc-pvdz""; REFERENCE = ""uhf""; BASIS_GUESS = ""3-21G""; GUESS = ""sad""; dimer = psi4.geometry(geo_string). psi4.set_options(; {; ""basis"": BASIS,; ""reference"": REFERENCE,; ""basis_guess"": BASIS_GUESS,; ""guess"": GUESS,; ""scf_type"": ""mem_df"",; ""e_convergence"": 1e-12,; ""d_convergence"": 1e-12,; }; ). psi4.energy(""sapt0"", return_wfn=True, molecule=dimer); ```. result:; ```; Role: ORBITAL; Keyword: BASIS; atoms 1 entry LI line 35 file /home/filip/software/psi4-1.4rc/share/psi4/basis/3-21g.gbs ; atoms 2 entry H line 21 file /home/filip/software/psi4-1.4rc/share/psi4/basis/3-21g.gbs . ---------------------------------------------------------; SCF Castup computation ; ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith; UHF Reference; 1 Threads, 976 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c1; Full point group: C_inf_v. Geometry (in Angstrom), charge = 0, multiplicity = 2:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; Gh(LI) 0.000000000000 0.000000000000 -1.000000000000 7.016003436600; H 0.000000000000 0.000000000000 1.000000000000 1.007825032230. Running in c1 symmetry. Rotational constants: A = ************ B = 2.10095 C = 2.10095 [cm^-1]; Rotational constants: A = ************ B = 62984.77227 C = 62984.77227 [MHz]; Nuclear repulsion = 0.000000000000000. Charge = 0; Multiplicity = 2; Electrons = 1; Nalpha = 1; Nbeta = 0. ==> Algorithm <==. S",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1830:736,energy,energy,736,https://psicode.org,https://github.com/psi4/psi4/issues/1830,1,['energy'],['energy']
Energy Efficiency,"Hm, this is a bit odd. The failing function (`free_atom_volumes(wfn)`) really shouldn't be called since you're only requesting the charges. I've created a PR to fix this, in addition to fixing the larger issue with computing MBIS volume ratios via scf_properties. Interestingly, this code fails in your case since you pass a wavefunction to oeprop that doesn't have 'CURRENT ENERGY' as a set variable. My PR doesn't address that, though I could help out if you also want to compute the volume ratios.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2299#issuecomment-984168833:131,charge,charges,131,https://psicode.org,https://github.com/psi4/psi4/issues/2299#issuecomment-984168833,2,"['ENERGY', 'charge']","['ENERGY', 'charges']"
Energy Efficiency,"Hmm, I can reproduce this using just `energy(""mp2/cc-pvtz"", bsse_type=""cp"")`. However, I don't think the issue here is the same as for SAPT (where the number of frozen core orbitals for a dimer was not the sum of the frozen core orbitals for monomers): here we freeze 7 orbitals on NaCN (2+2+10 el), 2 orbitals on F2 (2+2 el), and 9 on the dimer. . The problem is of course freezing those 10 electrons on Na. Currently the only way around that is to use `freeze_core -2`, which only freezes 1 orbital in NaCN and 1 orbital in the dimer, or do the calculations separately (with `NUM_FROZEN_DOCC 3` for NaCN and `5` for the dimer), as we have no way of specifying per-monomer numbers of frozen orbitals, yet.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2012#issuecomment-960513679:38,energy,energy,38,https://psicode.org,https://github.com/psi4/psi4/issues/2012#issuecomment-960513679,1,['energy'],['energy']
Energy Efficiency,"Hmm, I'm struggling to get my tests to give me a good agreement. From the [original publication](http://dx.doi.org/10.1007/s00214-005-0681-9) for the cc-pvdz-PP pseudopotentials for the Cu (and other) metals, the ionisation energy of Cu should be 165.26 kcal/mol with CCSD(T). In Gaussian 09, with the basis set downloaded from EMSL, I get an energy of 165.75 kcal/mol, which I suppose is reasonable. In Psi4, I get an energy of 166.02 kcal/mol. In case of Au ionisation energy, the difference (200.23 kcal/mol in the paper, 202.92 kcal/mol in Psi4) is more than 1%. I'm quite stumped. If anyone has any idea what's going on, please let me know.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/937#issuecomment-376531582:224,energy,energy,224,https://psicode.org,https://github.com/psi4/psi4/pull/937#issuecomment-376531582,4,['energy'],['energy']
Energy Efficiency,"Hmm, looks like I missed this option. Ill create a patch for it. For now you can do the following:. ``` python; e, wfn = energy('detci', return_wfn=True); wfn.get_opdm(-1, -1, ""SUM"", False).print_out(); wfn.get_tpdm(""SUM"", False).print_out(); ```. OPDM signature is as follows:. ```; /**!; * Obtains the OPDM <Iroot| Epq |Jroot> from the ciwave object. If Jroot is; * negative then Iroot == Jroot, if both roots are -1 then the ""special"" CI; * OPDM is returned.; * @param Iroot Left root; * @param Jroot Right root; * @param spin Selects which spin to return: A, B, or SUM; * @param full_space If false return only the active OPDM else return full OPDM; * @return OPDM or TDM shared matrix; **/; SharedMatrix get_opdm(int Iroot=-1, int Jroot=-1, const std::string& spin=""SUM"",; bool full_space=false);; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/477#issuecomment-251968634:121,energy,energy,121,https://psicode.org,https://github.com/psi4/psi4/issues/477#issuecomment-251968634,1,['energy'],['energy']
Energy Efficiency,"Hmm, might want to just print the alias when you call energy to see what is printed out. For the other two functionals we popped them out of the functional list as we do not have dispersion terms from them I think.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/922#issuecomment-370256118:54,energy,energy,54,https://psicode.org,https://github.com/psi4/psi4/pull/922#issuecomment-370256118,1,['energy'],['energy']
Energy Efficiency,"Hmm, there seems to be an issue with temporary files being left behind in the `energy` and `gradient` calls if they're not routed through the `cbs_gufunc` routines. If I call `clean()` in between the failing tests [like so for `cbs-xtpl-energy`](https://github.com/psi4/psi4/files/1886155/cbs-xtpl-energy-mod.txt), the test passes fine. `_cbs_gufunc()` calls `clean()` for single calls here:; https://github.com/psi4/psi4/blob/c1bb2fef750fc7a214fd873f8a7c095780017bf9/psi4/driver/driver_cbs.py#L1571-L1580",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/949#issuecomment-379446318:79,energy,energy,79,https://psicode.org,https://github.com/psi4/psi4/pull/949#issuecomment-379446318,3,['energy'],"['energy', 'energy-mod']"
Energy Efficiency,"Hmm, well thats interesting. Would you mind running the boroxine test case with the DF-MP2 module and post the result? Best way to access this module is to simply request 'energy('MP2')`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/408#issuecomment-225929051:172,energy,energy,172,https://psicode.org,https://github.com/psi4/psi4/issues/408#issuecomment-225929051,1,['energy'],['energy']
Energy Efficiency,"Hmmm. The fnocc2 can be explained by the following diff.... ```; -energy('g2'); -refg2 = -76.332048016380 #TEST; -refgibbs = -76.349644827450 #TEST; +energy('g2',dertype=1); +refg2 = -76.332048079709 #TEST; +refgibbs = -76.349644891507 #TEST; ```. that was part of my last set of commits. I updated the reference values to reflect that I'd switched to analytic Hessians. Then when I committed it, I realized that analytic Hessians require angular momentum beyond what Travis can handle, so I switched back to finite differences but forgot to roll back the reference values. Feel free to revert the reference values, and that'll be fine. The other two problems appear to be a seg fault, so I'll try to check out your changes and see if I can reproduce. Sorry for the hassle.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-235102762:66,energy,energy,66,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235102762,2,['energy'],['energy']
Energy Efficiency,"How about something like this:. - Perform SCF; - Check instability; - If unstable, rotate in the direction of the most unstable vector, according to some user-specified magnitude then...; - Compute the deviation of the new SCF energy from the 2nd order Taylor prediction, as well as the new SCF gradient; - If the 2nd order Taylor prediction was accurate enough (within some user-specified tolerance), and the magnitude of the gradient is within a comfortable range (another pair of parameters sadly...), then start SOSCF which should hopefully start going downhill.; - If the gradient is too low, increase the rotation magnitude, if too large decrease it. Recompute the new SCF energy and gradient, repeat the checks above.; - If the 2nd order Taylor prediction was inaccurate, decrease rotation magnitude. Recompute the new SCF energy and gradient, repeat the checks above.; - If the 2nd order Taylor prediction was inaccurate, **and** the gradient is too low, accept the orbital rotation, recompute the orbital Hessian at the new location (which is no longer exactly a saddle point), and repeat the entire follow process, until we find a point we can start SOSCF from. This could of course get quite expensive if a lot of Hessian recomputes are required, and relies on SOSCF not climbing back up to the saddle point, but to me it sounds easier to implement. With that said, I cannot help but feel like we are trying to reinvent a wheel. Surely, one would think that other people have already spent a lot of time thinking about the best ways to climb down from saddle points.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3045#issuecomment-1706817277:227,energy,energy,227,https://psicode.org,https://github.com/psi4/psi4/issues/3045#issuecomment-1706817277,3,['energy'],['energy']
Energy Efficiency,"How are you able to tell that it does not converge? I ran the input you posted and It was able to converge fine. . You should see a section like this in the output file showing the EOM code working away at the root. ; ```; Symmetry of ground state: Ag; Symmetry of excited state: Ag; Symmetry of right eigenvector: Ag; Seeking states with multiplicity of 1; Obtaining initial guess from singles-singles block of Hbar...Done. Iter=1 L=1 Root EOM Energy Delta E Res. Norm Conv?; 1 0.4128588902 4.13e-01 3.16e-01 N; Iter=2 L=2 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3340136980 -7.88e-02 5.54e-02 N; Iter=3 L=3 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3311169492 -2.90e-03 2.75e-02 N; Iter=4 L=4 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3303034550 -8.13e-04 1.53e-02 N; Iter=5 L=5 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3299847862 -3.19e-04 9.33e-03 N; Iter=6 L=6 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3299158588 -6.89e-05 4.43e-03 N; Iter=7 L=7 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3299119405 -3.92e-06 1.74e-03 N; Iter=8 L=8 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3299103467 -1.59e-06 6.71e-04 N; Iter=9 L=9 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3299072934 -3.05e-06 3.17e-04 N; Iter=10 L=10 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3299064524 -8.41e-07 1.45e-04 N; Iter=11 L=11 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3299063854 -6.69e-08 9.39e-05 Y; Collapsing to only 1 vector(s). Procedure converged for 1 root(s).; Energy written to CC_INFO:Etot -231.2454217333; States per irrep written to CC_INFO.; EOM CCSD R0 for root 0 = -0.03232771150. Final Energetic Summary for Converged Roots of Irrep Ag; Excitation Energy Total Energy; (eV) (cm^-1) (au) (au); EOM State 1 8.977 72406.1 0.3299063854 -231.245421733323; ```. Summary at the end of the file also shows:; ```; 	 Excitation Energy OS RS RS Einstein A; 	State (eV) (cm^-1) (nm) (au) (l,au) (v,au) (s^-1); 	 1 Ag 8.977 72406.1 138.1 0.329906 0.0000 0.0000 0.0000 0.000000E+00; ```. If yo",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/603#issuecomment-278675637:445,Energy,Energy,445,https://psicode.org,https://github.com/psi4/psi4/issues/603#issuecomment-278675637,7,['Energy'],['Energy']
Energy Efficiency,"How much leeway do I have to break the old sow/reap code? It would simplify things for me if I could abstract the contents of the loop where we compute the energy derivative at the displacement into its own function. Writing that becomes simpler if I can just remove or comment out the now-useless sow/reap code. With this function, it becomes simple to loop over every displacement in our displacement dictionary and only then compute for the reference geometry, which will be in a separate part of the metadata, per Andy's suggestion today.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1148#issuecomment-426850441:156,energy,energy,156,https://psicode.org,https://github.com/psi4/psi4/issues/1148#issuecomment-426850441,1,['energy'],['energy']
Energy Efficiency,How much work would be involved in switching from use of long-range exchange to short-range exchange which can be screened more efficiently?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1499#issuecomment-497381460:128,efficient,efficiently,128,https://psicode.org,https://github.com/psi4/psi4/pull/1499#issuecomment-497381460,1,['efficient'],['efficiently']
Energy Efficiency,"However, now my test run crashes with the message below. Is it trying to write a file in a directory where I don't have permissions or so?. Traceback (most recent call last):; File ""/home/apps/psi/psi4conda/bin/psi4"", line 248, in <module>; exec(content); File ""<string>"", line 31, in <module>; File ""/home/apps/psi/psi4conda/lib//python3.6/site-packages/psi4/driver/driver.py"", line 460, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/apps/psi/psi4conda/lib//python3.6/site-packages/psi4/driver/procrouting/proc.py"", line 860, in select_ccsd_t_; return func(name, **kwargs); File ""/home/apps/psi/psi4conda/lib//python3.6/site-packages/psi4/driver/procrouting/proc.py"", line 2197, in run_ccenergy; core.cctransort(ref_wfn). RuntimeError: ; Fatal Error: PSIO Error; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1495014881710/work/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::psio_error(unsigned int, unsigned int); psi::PSIO::rw(unsigned int, char*, psi::psio_address, unsigned long, int); psi::psio_write(unsigned int, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::DPD::file4_mat_irrep_wrt(psi::dpdfile4*, int). *** Psi4 encountered an error. Buy a developer more coffee!; *** Resources and help at github.com/psi4/psi4.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1557#issuecomment-467172255:392,energy,energy,392,https://psicode.org,https://github.com/psi4/psi4/issues/1557#issuecomment-467172255,2,['energy'],['energy']
Energy Efficiency,"Huh, never mind the jobname bit then. I was changing various things so I must have been mistaken on that point. Ah, in tutorial.rst, there's a sentence below. That `sec:install_III_7` link is to a long-deceased file. Please replace that link with one to the ""7."" on the wiki page or anywhere else you think best covers the subject. ```; ""For your convenience, the above example can be found in :srcsample:`tu1-h2o-energy`. You can run it if you wish. Once |PSIfour| is in your path (see the :ref:`User Configuration <sec:install_III_7>` section""; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/361#issuecomment-212422557:414,energy,energy,414,https://psicode.org,https://github.com/psi4/psi4/pull/361#issuecomment-212422557,1,['energy'],['energy']
Energy Efficiency,"I *think* this'll do it, but my memory can be very bad.. ```; scf_e, scf_wfn = energy('bp86', guess_wfn=scf_wfn, return_wfn=True); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/612#issuecomment-278548121:79,energy,energy,79,https://psicode.org,https://github.com/psi4/psi4/issues/612#issuecomment-278548121,1,['energy'],['energy']
Energy Efficiency,"I _suspect_ I've found the bug. The culprits are lines like [these](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/occ/t2_2nd_general.cc#L197-L203). I'm going to give a simplified presentation of the theory to explain why this particular bug caused T2 convergence problems but no other obvious problems:; In OMP3 theory, you write a Lagrangian energy functional, which is the OMP2 Lagrangian energy functional plus additional terms. In OMP2.5, you multiply those new terms by a factor of 1/2. The terms enforcing the first order amplitude constraint are all in the OMP2 part of the Lagrangian, and the terms enforcing the second order amplitude constraint are all in the additional terms of the Lagrangian. Now, the OMP2.5 in `occ` is the OMP3 implementation _except_; (1) additional terms not containing second order amplitudes are explicitly halved, and; (2) additional terms containing second order amplitudes are implicitly halved by halving the second order T2 amplitudes. Let's imagine we got the exactly right second order T2 amplitudes. We then halve them, per step 2 above. On the next iteration, of course we're going to find our second order amplitudes are off!. I've made the changes on a local branch. OMP3 tests all pass, but `omp2p5-grad2` has changed in the fifth decimal place, which is enough to cause a failure. This could indicate a problem with my changes, or that there was error in the test gradients because the second order amplitudes were not well converged. While a finite difference test should resolve this, I can't converge the relevant OMP equations in the current Psi implementation sufficiently tightly to test... I'm going to hack out a Psi4Numpy implementation to settle the matter. In the meantime, obligatory ping of @bozkaya in case I've missed something.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1808#issuecomment-583900866:352,energy,energy,352,https://psicode.org,https://github.com/psi4/psi4/issues/1808#issuecomment-583900866,2,['energy'],['energy']
Energy Efficiency,"I agree that option B is the best. The effect of the fix will be very minor. This can be easily tested by comparing to DCT code with conventional integrals (and we have done this in the past). Also, current version of the code should recover the exact DCT energy and gradient when using a very large auxiliary basis set.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1579#issuecomment-474901373:256,energy,energy,256,https://psicode.org,https://github.com/psi4/psi4/issues/1579#issuecomment-474901373,1,['energy'],['energy']
Energy Efficiency,"I agree that with no charges the function that I changed should not be called. I am running the benchmark on a shared cluster, so the differences in the speedup with no charges reflect the uncertainty in the benchmark. Although the pairs of columns with and without charges are run on the same node in the same job. I ran the benchmark again using `schedule(dynamic)` to directly compare to `schedule(guided)` copied from my last comment. Cores | Guided, no charges | Guided, with charges | Dynamic, no charges | Dynamic, with charges; ---- | ---- | ---- | ---- | ----; 1 | 1.00 | 1.00 | 1.00 | 1.00; 2 | 1.67 | 1.29 | 1.60 | 1.26; 4 | 2.72 | 2.18 | 2.66 | 2.07; 8 | 3.92 | 3.57 | 3.74 | 3.40; 16 | 4.87 | 5.04 | 4.68 | 5.06; 32 | 5.80 | 7.21 | 5.11 | 7.16. It looks like `dynamic` is slightly lower speedup than `guided`, but the two results are probably indistinguishable given the precision of my benchmark. This might also depend on the system and basis set used. The heaviest atom in my system is an oxygen with a jun-cc-pVDZ basis.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1946#issuecomment-656907868:21,charge,charges,21,https://psicode.org,https://github.com/psi4/psi4/pull/1946#issuecomment-656907868,9,"['charge', 'schedul']","['charges', 'schedule']"
Energy Efficiency,"I agree with @andysim --- Rollin's bug was only uncovered with debug flags; turned on, so it makes sense to retain at least one debug build. On Thu, Feb 11, 2016 at 8:56 AM, Andy Simmonett notifications@github.com; wrote:. > Thanks, @jgonthier https://github.com/jgonthier. Given that the Travis; > CI tests run every time somebody submits or merges a PR, we're going to be; > running that test a lot. If we don't see the problem again, it was probably; > just a strange artifact of the invalid read that was non-deterministic. If; > we keep seeing it after you have fixed that read, we probably just need to; > reduce the optimization level for that one routine. Either way, thanks for; > checking it.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/pull/237#issuecomment-182875337.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/237#issuecomment-182877975:612,reduce,reduce,612,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182877975,1,['reduce'],['reduce']
Energy Efficiency,"I agree with Holger about Psithon vs PsiAPI: work primarily in PsiAPI, but translate an input file to Psithon to show you _can_. Lori's topic list is a good one. Explicitly mention how to get orbitals and how to get variables (like the correlation energy) off the wavefunction.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2339#issuecomment-957650298:248,energy,energy,248,https://psicode.org,https://github.com/psi4/psi4/issues/2339#issuecomment-957650298,1,['energy'],['energy']
Energy Efficiency,"I agree with all of the above, especially a sanity check on the number of points provided and the use of the minimum as a guess. One very minor correction: the ""bottom of the well"" dissociation energy `De` is the difference between the minimized energy and the dissociated products. The zero-point corrected value (which is what's really measured in experiments, because the molecule cannot reach the bottom of the well), is `D0` and comes from subtracting the `ZPVE(nu)` value reported in the dictionary from `De`. For the record, that ZPVE is `0.5 we - 0.25 wexe`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1600#issuecomment-483629512:194,energy,energy,194,https://psicode.org,https://github.com/psi4/psi4/issues/1600#issuecomment-483629512,2,['energy'],['energy']
Energy Efficiency,"I agree with others that scheme 1 is preferable (fewer brackets than scheme; 2), and that ""module"" is clearer than ""local"". Also agree we need to plan ahead to simplifying options handling in general. On Thu, Nov 10, 2016 at 9:07 PM, Daniel Smith notifications@github.com; wrote:. > I was thinking a head a bit where we would be able to kill off globals or; > at least provide a way to reduce them. I was hopeful that this scheme would; > be able to fill that roll as well to prevent duplication.; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/511#issuecomment-259862684, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AC9Qdho874ynQJnwqQU-HSnHhpY_hwN5ks5q883MgaJpZM4Ku0ap; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/511#issuecomment-259863279:386,reduce,reduce,386,https://psicode.org,https://github.com/psi4/psi4/pull/511#issuecomment-259863279,1,['reduce'],['reduce']
Energy Efficiency,"I agree with the point that the code should go through and report zeros, so; we can do database stuff, etc. I think the thermo code can easily be fixed for this (in fact Brandon has a; new version that has already been tested for atoms). Looks like the first; failure we're hitting is in finite differences. @psi-rking should give; that some thought. David. On Thu, Mar 31, 2016 at 11:31 PM, drhaney notifications@github.com wrote:. > Mac's Beer & Wine confirms that they will happily reserve gift cards for; > you at the register, and you developers need to do better if you want that; > beer.; > ; > Usually, a QC app 'fails' gracefully on atomic systems.; > By 'fail', I mean that it should: _handle stupid requests gracefully._; > ; > In practice, the app returns ZPE, Ethermal, Hthermal = 0.0,0.0,0.0, and a; > reasonable total entropy 30 < S <40 cal/mol-K. Granted, Stotal = Strans and; > may be of little value. The user adds in some Boltzmann kT multiples to; > internal E,H as needed.; > ; > Total energies and enthalpies of atoms are needed for calculating; > molecular enthalpies of formation by the atomization method. I want this; > because I'm writing composite method modules for Psi4 with the goal of; > replicating Gaussian and GAMESS results.; > ; > It may be invidious to point out that Gaussian, GAMESS, and Nwchem are all; > well-behaved on the atomic cases, but those applications are why I'm here.; > [rant on egregious software licenses and general dislike of Fortran; > redacted]; > ; > Next up: CCSD(T) and the H2 molecule, MP2 correlation energy of the; > hydrogen atom. (joke!); > Thanks to all.; > -drh; > ; > —; > You are receiving this because you commented.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/332#issuecomment-204230882",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/332#issuecomment-204388708:1566,energy,energy,1566,https://psicode.org,https://github.com/psi4/psi4/issues/332#issuecomment-204388708,1,['energy'],['energy']
Energy Efficiency,"I agree, may as well test. Here's a slight extension of your original problem input. ```; molecule ne2 {; 0 1; Ne 0 0 0; --; 0 1; Ne 0 0 2; }. set {; scf_type df; mp2_type df; cc_type df; e_convergence 7; reference rhf; }. def unaug_focal(func, label, **kwargs):; kwargs['scf_basis'] = kwargs.get('scf_basis', 'cc-pVQZ'); kwargs['scf_scheme'] = kwargs.get('scf_scheme', driver_cbs.xtpl_highest_1). kwargs['corl_wfn'] = kwargs.get('corl_wfn', 'mp2'); kwargs['corl_basis'] = kwargs.get('corl_basis', 'cc-pV[TQ]Z'); kwargs['corl_scheme'] = kwargs.get('corl_scheme', driver_cbs.corl_xtpl_helgaker_2). kwargs['delta_wfn'] = kwargs.get('delta_wfn', 'ccsd(t)'); kwargs['delta_wfn_lesser'] = kwargs.get('delta_wfn_lesser', 'mp2'); kwargs['delta_basis'] = kwargs.get('delta_basis', 'cc-pV[dT]Z'); kwargs['delta_scheme'] = kwargs.get('delta_scheme', driver_cbs.corl_xtpl_helgaker_2). if label == 'custom_function':; label = 'Unaug Focal'; return driver_cbs.cbs(func, label, **kwargs). ans = 0.0131014 #TEST; E_func = energy(unaug_focal, bsse_type=""nocp""); E_method_basis = energy(""MP2/cc-pv[tq]z + D:CCSD(T)/cc-pv[dt]z"", bsse_type=""nocp""); E_cbs = energy(cbs, bsse_type=""nocp"", corl_wfn=""mp2"", corl_basis=""cc-pv[tq]z"",; delta_wfn=""ccsd(t)"", delta_basis=""cc-pv[dt]z""). compare_values(ans, E_method_basis, 6, ""IE mtd/bas"") #TEST; compare_values(ans, E_cbs, 6, ""IE cbs"") #TEST; compare_values(ans, E_func, 6, ""IE func"") #TEST; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1119#issuecomment-410490928:1007,energy,energy,1007,https://psicode.org,https://github.com/psi4/psi4/pull/1119#issuecomment-410490928,3,['energy'],['energy']
Energy Efficiency,"I agree. Largely reorg and infrastructure. https://github.com/PCMSolver/pcmsolver/blob/v1.2.0/CHANGELOG.md. Can Psi4 hit the Green's function changes, @robertodr?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/988#issuecomment-385086354:125,Green,Green,125,https://psicode.org,https://github.com/psi4/psi4/pull/988#issuecomment-385086354,1,['Green'],['Green']
Energy Efficiency,"I also like scheme 1, and `module_options` over `local_options` is a great idea. . > As a note we are looking into ways to override global options. For example, the following could be a scheme that would accomplish this. Don't module level options already override global options? In a standard input file doing this:. ``` python; # molecule stuff; set ccenergy print 1; set globals print 3; energy('ccsd'); ```. Would have print=2 for the scf and print=1 for ccsd. Is that not the case when you do it with python? Like:. ``` python; # molecule stuff; psi4.core.set_local_option(""ccenergy"", ""print"", 1); psi4.core.set_global_option(""print"",3); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/511#issuecomment-259776780:392,energy,energy,392,https://psicode.org,https://github.com/psi4/psi4/pull/511#issuecomment-259776780,1,['energy'],['energy']
Energy Efficiency,I also noticed like an hour ago that running energy('cisd') triggers for some reason a frozen natural orbital calculation. I don't think this should be happening..?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/828#issuecomment-339397438:45,energy,energy,45,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339397438,1,['energy'],['energy']
Energy Efficiency,I also ran a full test suite; nothing DFT related fails; ```; 	102 - cubeprop (Failed); 	103 - cubeprop-frontier (Failed); 	368 - cubeprop-esp (Failed); 	385 - psi4numpy-cphf (Failed); 	386 - psi4numpy-dfmp2 (Failed); 	387 - psi4numpy-rhf (Failed); 	388 - psi4numpy-rhf-gradient (Failed); 	389 - psi4numpy-rhf-hessian (Failed); 	390 - psi4numpy-fci (Failed); 	392 - python-energy (Failed); 	393 - python-curve (Failed); 	394 - python-pubchem (Failed); 	395 - python-mints9 (Failed); 	396 - python-mints2 (Failed); 	397 - python-cc54 (Failed); 	398 - python-3-index-transforms (Failed); 	399 - python-vibanalysis (Failed); 	400 - python-mints13 (Failed); 	401 - python-memdfjk (Failed); 	402 - json-v11-energy (Failed); 	403 - json-v11-gradient (Failed); 	404 - json-schema-1-energy (Failed); 	405 - json-schema-1-ghost (Failed); 	406 - json-schema-1-orient (Failed); 	407 - json-schema-1-throws (Failed); 	408 - json-schema-1-gradient (Failed); 	409 - json-schema-1-properties (Failed); 	469 - chemps2-scf-n2 (Failed); 	470 - chemps2-ci-h2o (Failed); 	471 - chemps2-caspt2-n2 (Failed); 	472 - chemps2-natural-orbital (Failed); 	473 - chemps2-caspt2-small (Failed); ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1260#issuecomment-424435249:373,energy,energy,373,https://psicode.org,https://github.com/psi4/psi4/pull/1260#issuecomment-424435249,3,['energy'],['energy']
Energy Efficiency,"I am a bit struggling with the `component` keyword, if it is not 'dft'. Does the following work as I think it does?; ```; # only extrapolate PT2 part?; energy(cbs, cbs_metadata=[{'wfn': ""b2plyp-d3"", 'basis': ""cc-pv[dt]z"", 'component': ""dh""}]). # only ""extrapolate"" D3 part? It is doing a 2-step then or taking the highest energy?; energy(cbs, cbs_metadata=[{'wfn': ""b2plyp-d3"", 'basis': ""cc-pv[dt]z"", 'component': ""disp""}]). # Excluding PT2 part from the extrapolation?; energy(cbs, cbs_metadata=[{'wfn': ""b2plyp-d3"", 'basis': ""cc-pv[dt]z"", 'component': ""fctl""}]); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2132#issuecomment-964872345:152,energy,energy,152,https://psicode.org,https://github.com/psi4/psi4/pull/2132#issuecomment-964872345,4,['energy'],['energy']
Energy Efficiency,"I am attempting run a frequency calculation with Psi4 (version 1.5) and Python 3.7.10. All other calculations (optimization, single point energy, etc.) work well. However, when I attempt to run a frequency calculation with the command `psi4.frequency(""B3LYP/cc-pVDZ"", molecule=molecule_xyz, return_wfn=True, dertype='gradient')`, I get the following error. From [what I've seen on Stack Overflow](https://stackoverflow.com/questions/69564817/typeerror-load-missing-1-required-positional-argument-loader-in-google-col), this may be an issue with psi4 compatibility. How can I navigate this issue? . ```; ---------------------------------------------------------------------------; TypeError Traceback (most recent call last); [<ipython-input-13-13c5f85efa27>](https://localhost:8080/#) in <module>(); 4 ; 5 psi4.set_output_file(F'{molecule_name}_frequency_analysis.dat', False); ----> 6 psi4.frequency(""B3LYP/cc-pVDZ"", molecule=molecule_xyz, return_wfn=True, dertype='gradient'); 7 correction_g = parse_free_energy(F'{molecule_name}_frequency_analysis.dat'); 8 print(""Correction G: "", correction_g). 21 frames; [/usr/local/lib/python3.7/site-packages/psi4/driver/driver.py](https://localhost:8080/#) in frequency(name, **kwargs); 1772 ; 1773 # Compute the hessian; -> 1774 H, wfn = hessian(name, return_wfn=True, molecule=molecule, **kwargs); 1775 ; 1776 # Project final frequencies?. [/usr/local/lib/python3.7/site-packages/psi4/driver/driver.py](https://localhost:8080/#) in hessian(name, **kwargs); 1493 # Check if this is a CBS extrapolation; 1494 elif gradient_type == ""cbs_gufunc"":; -> 1495 return driver_cbs._cbs_gufunc(hessian, name.lower(), **kwargs, ptype=""hessian""); 1496 elif gradient_type == ""cbs_wrapper"":; 1497 return driver_cbs.cbs(hessian, ""cbs"", **kwargs, ptype=""hessian""). [/usr/local/lib/python3.7/site-packages/psi4/driver/driver_cbs.py](https://localhost:8080/#) in _cbs_gufunc(func, total_method_name, **kwargs); 1963 optstash = p4util.OptionsState(['BASIS']); 1964 core.set_glob",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2510:138,energy,energy,138,https://psicode.org,https://github.com/psi4/psi4/issues/2510,1,['energy'],['energy']
Energy Efficiency,"I am currently building a high throughput program to calculate various one electron properties of large sets of molecules. . I am using psi4 1.81 and interacting with the program via the python API. First I optimise the geometry using the QCEngine wrapper, and then run a single point calculation with psi4.energy() where I return the wfn object and run psi4.oeprop(wfn). I am currently using the PBE0/def2-TZVPPD with the DDX solvent model DDX-4.0 level of theory. However, I began noticing the calculation would hang at a certain point, regardless of the level of theory and usage of the ddx solvent model (but seemed to hang quicker with more expansive methods), where the calculation would indefinitely stop at this stage:. ```; ==> Primary Basis <==. Basis Set: DEF2-TZVPPD; Blend: DEF2-TZVPPD; Number of shells: 136; Number of basis functions: 358; Number of Cartesian functions: 398; Spherical Harmonics?: true; Max angular momentum: 3; ```. I suspected a memory leak so I logged with memory usage at each stage of the calculation with:. ```; def log_memory_usage():; process = psutil.Process(); print(f""Memory Usage: {process.memory_info().rss / 1024 ** 2} MB"", flush=False); ```. When applying this function to this section of my code:. ``` ; print('memory use before E wfn'); log_memory_usage() ; E, wfn = psi4.energy(f'{settings.method}/{settings.basis}', molecule = molecule_psi4, return_wfn = True); print('memory use after E wfn'); log_memory_usage() ; psi4.oeprop(wfn,""GRID_ESP"",""GRID_FIELD"",""MULLIKEN_CHARGES"", ""LOWDIN_CHARGES"", ""DIPOLE"",""QUADRUPOLE"", ""MBIS_CHARGES""); print('memory use after oeprop'); log_memory_usage() ; ``` ; The output to my file with the above logging was:. ```; memory use before E wfn; Memory Usage: 3715.3828125 MB; --; memory use after E wfn; Memory Usage: 3783.52734375 MB; --; memory use after oeprop; Memory Usage: 3802.50390625 MB; --; memory use before wfn interaction; Memory Usage: 3802.50390625 MB; memory use after wfn interaction; Memory Usage: 380",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3146:307,energy,energy,307,https://psicode.org,https://github.com/psi4/psi4/issues/3146,1,['energy'],['energy']
Energy Efficiency,"I am encountering a problem when doing CCSD(T)/aug-cc-pvtz single point calculations with ghost atoms.; Here is an example input python script:; ```; import psi4; geo = """"""; 1 1; N -0.319514960239 -0.379524306855 0.559765629138; C 0.352425639761 0.409233493145 -0.624276970862; H 0.896212339761 1.229129293145 -0.190264570862; H -0.369712060239 1.007481593145 -1.165777070862; H -0.938830632741 -1.202223388474 0.119295063837; H 0.486503344736 -0.886226229665 1.149670412527; H -0.828245898402 0.406267805382 1.174683175564; H 0.972884518932 -0.173541567396 -1.382567158105; @H 0.158794175371 0.181939104529 -0.283074336970; @H -0.134424730413 -0.162256050585 0.233613708927; """""". mol = psi4.geometry(geo); model = ""ccsd(t)/aug-cc-pvtz"". psi4.set_memory('13GB'). psi4.set_num_threads(8). psi4.core.set_output_file(""psi4_ccsdt.outp""). psi4.set_options({; }); e = psi4.energy(model, molecule=mol). print(e); ```. The SCF converges, but then the calculation crashes, with the following output at the end of the log file (I have attached the full log file to the issue.):; ```; Wfn Parameters:; --------------------; Wavefunction = CCSD_T; Number of irreps = 1; Number of MOs = 275; Number of active MOs = 275; AO-Basis = NONE; Semicanonical = false; Reference = RHF; Print Level = 1. IRREP # MOs # FZDC # DOCC # SOCC # VIRT # FZVR; ----- ----- ------ ------ ------ ------ ------; A 275 0 9 0 266 0; Transforming integrals...; IWL integrals will be deleted.; (OO|OO)...; Presorting SO-basis two-electron integrals.; Sorting File: SO Ints (nn|nn) nbuckets = 1; Constructing frozen core operators; Row and column block dimensions of A; (n = 1): 275 ; (n = 1): 275 ; Row and column block dimensions of B; (n = 1): 276 ; (n = 1): 275 ; Row and column block dimensions of C; (n = 1): 275 ; (n = 1): 275 ; Asym: 0, Bsym: 0, Csym: 0; Mismatch in index Ha = 0; ```. Additionally, the following error message is given:; ```; Traceback (most recent call last):; File ""/oasis/tscc/scratch/ebullvul/projects/POPC/timi",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2916:867,energy,energy,867,https://psicode.org,https://github.com/psi4/psi4/issues/2916,1,['energy'],['energy']
Energy Efficiency,"I am getting an error in Psi4 1.5 that I believe is a bug. Here is a minimal script to reproduce it. ```python; import psi4; psi4.set_options({'reference': 'uhf', 'stability_analysis': 'follow'}); mol = psi4.geometry(""""""; 0 1; O; """""");; psi4.energy('wB97M-D3BJ/def2-TZVPPD', molecule=mol); ```. It throws the exception. ```; psi4.driver.p4util.exceptions.ValidationError: Stability analysis root following is only available for UHF; ```. Since the script does use UHF, the error doesn't make sense.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2577:242,energy,energy,242,https://psicode.org,https://github.com/psi4/psi4/issues/2577,1,['energy'],['energy']
Energy Efficiency,"I am having some trouble with test case simint-scf5 failing, specifically in the singlet CUKS PK case. In principle, my changes should not have affected this test case, and so I wonder if it is a problem with the test case. I recall that at one time we had removed testing of CUKS because we found it to be numerically unstable and Rob wasn't able to remove the numerical instability. But we decided to leave in CUKS as a feature because it worked most of the time and therefore could be helpful to users. This particular test case is a bit strange ... we are testing O2 for a singlet with CUKS? While one *can* run CUKS on a singlet, this seems like a really odd thing to do... What seems to be happening is that the guess orbitals are core Hamiltonian, and they are high-spin open-shell. This being the case, the CUHF runs and happily leaves the computation high-spin open-shell. Then obviously the triplet state obtained has a different energy than the singlet state energy that is being compared. I am not sure why we are getting a high-spin open-shell guess, since the computation knows it's a singlet. Charge = 0; Multiplicity = 1; Electrons = 16; Nalpha = 8; Nbeta = 8. ==> Algorithm <==. SCF Algorithm Type is PK.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is CORE. ... Occupation by irrep:; Ag B1g B2g B3g Au B1u B2u B3u; DOCC [ 3, 0, 0, 0, 0, 2, 1, 1 ]; SOCC [ 0, 0, 1, 1, 0, 0, 0, 0 ]. @CUHF iter 1: -129.99407460698782 -1.29994e+02 3.58550e-01; @CUHF iter 2: -138.94369344094056 -8.94962e+00 1.91667e-01 DIIS; @CUHF iter 3: -149.19229734982372 -1.02486e+01 5.23276e-02 DIIS; @CUHF iter 4: -149.61401801756168 -4.21721e-01 8.25602e-03 DIIS; @CUHF iter 5: -149.62784456434520 -1.38265e-02 7.20728e-04 DIIS; @CUHF iter 6: -149.62803800931584 -1.93445e-04 1.87787e-04 DIIS; @CUHF iter 7: -149.62804359068420 -5.58137e-06 2.42248e-05 DIIS; @CUHF iter 8: -149.62804290255499 6.88129e-07 3.86408e-06 DIIS; @CUHF iter 9: -149.62804316316681 -2.60612e-07 2.79748e-07",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/738:940,energy,energy,940,https://psicode.org,https://github.com/psi4/psi4/issues/738,2,['energy'],['energy']
Energy Efficiency,"I am just wondering whether this composite ab initio method is available in PSI4?. If I give energy('ccCA-PS3') for a molecule then; from the output error message I recognize that this keyword is not available. . psi4.driver.p4util.exceptions.ValidationError: Energy method ""ccca-ps3"" is not available. Either I maybe making some mistakes or if you could share some sample input file related; to this composite method then it would be helpful.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2157:93,energy,energy,93,https://psicode.org,https://github.com/psi4/psi4/issues/2157,2,"['Energy', 'energy']","['Energy', 'energy']"
Energy Efficiency,"I am looking to update the failing dft test where absolute energies are tested. Looking for opinions and advice:. options:; * A) reduce the comparison thresholds, where necessary. Down to 5 or 6 (from 7 or even higher); * B) make new reference values using the new BS radii. Perhaps cleanest test history about the origin of the numbers and best for gradients; * C) a mixture of both. these `ctest -L dft` fail on my machine:; 157 - dft-grad-lr1 (Failed); 159 - dft-grad-lr3 (Failed); 167 - dft-grad-meta (Failed); 169 - dft-grad1 (Failed); 170 - dft-grad2 (Failed); 171 - dft-psivar (Failed); 173 - dft1 (Failed); 174 - dft-vv10 (Failed); 178 - dft-omega (Failed); 390 - dft-custom-mgga (Failed); 423 - dftd3-grad (Failed); 431 - pcmsolver-dft (Failed)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1591#issuecomment-494012739:129,reduce,reduce,129,https://psicode.org,https://github.com/psi4/psi4/pull/1591#issuecomment-494012739,1,['reduce'],['reduce']
Energy Efficiency,"I am new to Psi4 and quantum chemistry in general. The [PsiAPI tutorial](https://psicode.org/psi4manual/master/psiapi.html) is helpful in getting started, but doesn't mention use of `psi4.core.clean()`. I can't find any mention of this function in the docs, except [here](https://psicode.org/psi4manual/master/api/psi4.core.clean.html). A newbie like me may try to run two calculations in series. In my case, I got:; ```; Traceback (most recent call last):; File ""test.py"", line 47, in <module>; h2oi = energyFromGeometryFile('geometries/01.xyz', method=""ccsd""); File ""test.py"", line 27, in energyFromGeometryFile; return calculateEnergy(text, method, basis); File ""test.py"", line 12, in calculateEnergy; e = psi4.energy(method + '/' + basis); File ""/home/ubuntu/build/build/stage/lib/psi4/driver/driver.py"", line 525, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/ubuntu/build/build/stage/lib/psi4/driver/procrouting/proc.py"", line 871, in select_ccsd; return func(name, **kwargs); File ""/home/ubuntu/build/build/stage/lib/psi4/driver/procrouting/proc.py"", line 2894, in run_ccenergy; ref_wfn = scf_helper(name, **kwargs) # C1 certified; File ""/home/ubuntu/build/build/stage/lib/psi4/driver/procrouting/proc.py"", line 1887, in scf_helper; e_scf = scf_wfn.compute_energy(); File ""/home/ubuntu/build/build/stage/lib/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 82, in scf_compute_energy; self.initialize(); File ""/home/ubuntu/build/build/stage/lib/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 197, in scf_initialize; self.form_H(); RuntimeError: ; Fatal Error: PSIO_ERROR: 18 (Incorrect block end address). Practical advice: This error is probably disk related. First, check that your scratch isn’t full.; Second, make sure that you’re setting scratch (""psi4 -s"" or ""export PSI_SCRATCH"") rather than letting it ; default to /tmp. Third, run the job again to see if the error is reproducible.; If it persists, finally, file a",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3164:503,energy,energyFromGeometryFile,503,https://psicode.org,https://github.com/psi4/psi4/issues/3164,5,['energy'],"['energy', 'energyFromGeometryFile']"
Energy Efficiency,"I am only doing DFT for now Susi, thanks for the tip about those basis sets. . I've determined that the bug was definitely introduced in the libint2 PR (#1721). Prior to that PR, `INTS_TOLERANCE` worked as expected: a value of 1e-12 led to a minor speed up and a negligible change in the energy. I further narrowed the problem down to the `engine_precision` parameter passed to the libint2 engine:. https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/eri.cc#L182. If I instead set `engine_precision` to `max_precision`, the SCF calculation proceeds normally. This suggests that the current value of `engine_precision` is too loose. Does anyone know more about what this parameter is, and where the current formula comes from? I assume the `-4` is for the four indexes of an ERI.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2114#issuecomment-782463778:288,energy,energy,288,https://psicode.org,https://github.com/psi4/psi4/issues/2114#issuecomment-782463778,1,['energy'],['energy']
Energy Efficiency,"I am reviewing a paper related to some calculations on transition metal complexes, and I noticed a pretty significant difference in the convergence for these systems. With the fix, I get decent convergence; ```; ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-UKS iter SAD: -1560.62324919175876 -1.56062e+03 0.00000e+00 ; @DF-UKS iter 1: -1504.03705732702224 5.65862e+01 3.11225e-02 ADIIS/DIIS; @DF-UKS iter 2: -1487.30385546810771 1.67332e+01 4.19089e-02 ADIIS/DIIS; @DF-UKS iter 3: -1595.07318567437824 -1.07769e+02 1.91720e-02 ADIIS/DIIS; @DF-UKS iter 4: -1564.30445668282618 3.07687e+01 3.31275e-02 ADIIS/DIIS; @DF-UKS iter 5: -1603.11290614082509 -3.88084e+01 1.87126e-02 ADIIS/DIIS; @DF-UKS iter 6: -1602.92895467184917 1.83951e-01 1.71826e-02 ADIIS/DIIS; @DF-UKS iter 7: -1614.51158717592830 -1.15826e+01 1.03141e-02 ADIIS/DIIS; @DF-UKS iter 8: -1616.83699931720344 -2.32541e+00 6.19589e-03 ADIIS/DIIS; @DF-UKS iter 9: -1616.50013867709094 3.36861e-01 6.18683e-03 ADIIS/DIIS; @DF-UKS iter 10: -1617.89286983906686 -1.39273e+00 3.54362e-03 ADIIS/DIIS; @DF-UKS iter 11: -1618.25105941096376 -3.58190e-01 1.44948e-03 ADIIS/DIIS; @DF-UKS iter 12: -1618.30666617824772 -5.56068e-02 8.16936e-04 ADIIS/DIIS; @DF-UKS iter 13: -1618.32906595120630 -2.23998e-02 3.05210e-04 ADIIS/DIIS; @DF-UKS iter 14: -1618.33209488701596 -3.02894e-03 1.11579e-04 ADIIS/DIIS; @DF-UKS iter 15: -1618.33246925032131 -3.74363e-04 5.16022e-05 DIIS; @DF-UKS iter 16: -1618.33255204306215 -8.27927e-05 2.40611e-05 DIIS; @DF-UKS iter 17: -1618.33257421168014 -2.21686e-05 6.92474e-06 DIIS; @DF-UKS iter 18: -1618.33257596491853 -1.75324e-06 3.51398e-06 DIIS; @DF-UKS iter 19: -1618.33257648667177 -5.21753e-07 1.67910e-06 DIIS; @DF-UKS iter 20: -1618.33257663986774 -1.53196e-07 9.10475e-07 DIIS; Energy and wave function converged.; ```; while the original code is just not getting anywhere; ```; ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-UKS iter SAD: -1617.72517858542346 -1.61773e+03 0.00000e+00 ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3137#issuecomment-1968754473:238,Energy,Energy,238,https://psicode.org,https://github.com/psi4/psi4/issues/3137#issuecomment-1968754473,1,['Energy'],['Energy']
Energy Efficiency,"I am seeing large differences in wB97X-D3BJ energy between 1.4.0 and 1.3.2, and between different 1.4.0 installations. It seems that installing 1.4.0 with `-c anaconda` can cause the differences between 1.4.0 installations, possibly because it replaces the default linear algebra libraries with MKL versions. Such an installation runs 50% faster, but also gives wrong energies in some situations, sometimes by more than a Hartree. I've only seen the problem with clusters and large basis sets, which suggests it's a numerical issue. I've tested PBE, M06-2X, and wB97X-D3BJ, and so far it only appears in wB97X-D3BJ. Also, the error goes away if less RAM is provided (say, 10 GB instead of 32 GB). This suggests it may be related to the new ability of Psi4 1.4.0 to do in-core omega integrals (https://github.com/psi4/psi4/pull/1749). Working env: `conda create --name psi4_v1.4.0 python=3.8 psi4 psi4-rt -c psi4 -y`. Broken env: `conda create --name psi4_v1.4.0_mkl python=3.8 psi4 psi4-rt -c psi4 -c anaconda -y`. Example script: https://drive.google.com/file/d/1c0wZO47h9ooRXQMzTW9eETLWozo4MT_O/view?usp=sharing. To reproduce: install psi4 via conda with `-c anaconda` as shown, activate the env, then run the provided script `python psi4_1.4.0_omega_issue.py`. The energy should be approximately -1965.2319, but will instead give something like -1963.3023.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2279:44,energy,energy,44,https://psicode.org,https://github.com/psi4/psi4/issues/2279,2,['energy'],['energy']
Energy Efficiency,"I am trying to calculate DF-MP2 counterpoise-corrected energies for some dimers.; PSI4 gives some weird results for aug-cc-pvtz and aug-cc-pvqz (while all seems well for aug-cc-pvdz). First I provide the results for the benzene-benzene dimer.; ![benzene_benzene](https://cloud.githubusercontent.com/assets/4300354/16049263/4eba59cc-3257-11e6-9fb4-7270fba551ed.png); I plot 4 points of the dissociation curve, show both HF and DF-MP2 interaction energies for the three basis sets mentioned earlier and compare with MOLPRO. Here everything seems to be perfectly fine. However when I do exactly the same for the boroxine dimer, things look different:; ![boroxine_boroxine_rot60](https://cloud.githubusercontent.com/assets/4300354/16049322/92511392-3257-11e6-9e03-9e2922fe86e6.png); Clearly PSI4 produces some weird results for the DF-MP2 energy in the case of aug-cc-pvtz and aug-cc-pvqz.; I attach the input/output for one case where PSI4 does something weird. (Note that you can skip the CC part to reproduce the problem). [cbs.in.txt](https://github.com/psi4/psi4/files/314339/cbs.in.txt); [cbs.out.txt](https://github.com/psi4/psi4/files/314340/cbs.out.txt). My PSI4 version is Git: Rev {master} e4070d002474257",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/408:835,energy,energy,835,https://psicode.org,https://github.com/psi4/psi4/issues/408,1,['energy'],['energy']
Energy Efficiency,"I am trying to run Psi4 on [Summit](https://docs.olcf.ornl.gov/systems/summit_user_guide.html) and as there are no conda builds for `ppc64le`, I had to manually compile it on Summit. When running `ωB97M-D3BJ/def2-TZVPPD` for an Arginine molecule, I get vastly different energies in the SCF steps locally and final converge energy and gradients. I have attached the Psi4 output files for both the local run and the one on Summit and I was hoping to get some advice on what could be going on here. Also, the run time on Summit takes incredibly long (6 hours) vs about 5 minutes on my laptop, even with 128 threads and 512GB of RAM allocated on a single node calculation. Any idea why this might be the case?. [Arginine_output_local.txt](https://github.com/user-attachments/files/17094043/Arginine_output_local.txt); [Arginine_output_summit.txt](https://github.com/user-attachments/files/17094044/Arginine_output_summit.txt)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3223:323,energy,energy,323,https://psicode.org,https://github.com/psi4/psi4/issues/3223,2,"['allocate', 'energy']","['allocated', 'energy']"
Energy Efficiency,"I and my colleagues are trying to transition into using JSON in- and output files for Psi4 to add another layer of structure to our database. We understand that this is a work in progress, but I can't find any examples of what would work for optimization and/or frequency calculations in the examples dir (https://github.com/psi4/psi4/tree/master/tests/json). I tried changing one of the example input files to adapt it to our own type of calculations, but I just get errors while running it using the --qcschema flag as I can't seem to get the structure of the JSON file right. Is there an unfinished guide on how to create these JSON files?. Let say I have a non-JSON file that looks like the following:; ```; molecule mol_water {; 0 1; O 0.000000000 0.000000000 0.117000000; H 0.000000000 0.763400000 -0.468100000; H 0.000000000 -0.763400000 -0.468100000. units angstrom; no_reorient; }. set globals {; basis aug-cc-pVTZ; dft_spherical_points 434; dft_radial_points 85; }. set_memory(25000000000). try:; optimize('pwpb95-d3bj'); except SCFConvergenceError as e:; unconverged_scf_wfn = e.wfn; unconverged_scf_wfn.to_file(unconverged_scf_wfn.get_scratch_filename(180)); set guess read; optimize('pwpb95-d3bj'). E, wfn = frequency('pwpb95-d3bj', return_wfn=True); print(wfn.frequencies().get(0, 0)); ```. How would it be expressed as a valid JSON file?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2117:411,adapt,adapt,411,https://psicode.org,https://github.com/psi4/psi4/issues/2117,1,['adapt'],['adapt']
Energy Efficiency,"I appreciate the `E` vs. `ENERGY` reasoning, but I think I still favor the latter. Text in the output file shows that it was written by a dozen coders, while the psivars have some unifying properties, including spelling out energy. We can just patch it later, if you'd rather not bother.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/480#issuecomment-253958928:26,ENERGY,ENERGY,26,https://psicode.org,https://github.com/psi4/psi4/pull/480#issuecomment-253958928,2,"['ENERGY', 'energy']","['ENERGY', 'energy']"
Energy Efficiency,"I believe that the issue https://github.com/psi4/psi4/issues/2238 was misleading. When I produce a Molden file in self-compiled Psi4 1.6 using this code; ```; molecule {; 0 1; He; }. set basis cc-pVTZ. [E, wfn] = energy('scf', return_wfn=True). wfn.write_molden('He.molden'); ```; the flags written to the file are; ```; [5D]; [7F]; [9G]; ```; However, this seems to be in conflict with the [Molden format specification](https://www.theochem.ru.nl/molden/molden_format.html), where `[7F]` means ""Cartesian d-functions and spherical f-functions"". Also, the *HISTORY* file from Molden 7.1 distribution contains the following summary, dated to Molden 4.1:; ```; - default is 6D and 10F; - [5D7F] means 5D and 7F; - [5D10F] means 5D and 10F; - [7F] means 6D and 7F. for backwards compatibility, [5D] still means 5D and 7F.; ```; See also this excerpt from Molden 7.1, subroutine `prtmold` (output of a Molden file from Molden):; ```fortran; if (ido5d.eq.1.and.ido7f.eq.1) then; write(iun3,'(a)') '[5D7F]'; elseif (ido5d.eq.1.and.ido7f.eq.0) then; write(iun3,'(a)') '[5D10F]'; elseif (ido5d.eq.0.and.ido7f.eq.1) then; write(iun3,'(a)') '[7F]'; elseif (ido9g.eq.1) then; write(iun3,'(a)') '[9G]'; endif; ```; and the subroutine `rdmodd` (input of a Molden file into Molden):; ```fortran; call srchmf(line,'[5D',istat); if (istat.eq.1) then; if (icdex(line,'[5D]').ne.0.or.; & icdex(line,'[5D7F]').ne.0) then; ido5d = 1; ido7f = 1; elseif (icdex(line,'[5D10F]').ne.0) then; ido5d = 1; endif; endif; call rewmf; call srchmf(line,'[7F]',istat); if (istat.eq.1) ido7f = 1; call rewmf; call srchmf(line,'[9G]',istat); if (istat.eq.1) ido9g = 1. ```; To sum up, it appears to me that a correct Molden file; - no longer uses `[5D]` in the first place,; - uses `[7F]` to mean ""Cartesian d-functions, spherical f-functions"" and; - uses `[5D7F]` and `[5D10F]` for spherical d-functions and Cartesian or spherical f-functions, respectively. When I use the legacy writer; ```; molden(wfn, 'He.molden'); ```; the output ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2612:213,energy,energy,213,https://psicode.org,https://github.com/psi4/psi4/issues/2612,1,['energy'],['energy']
Energy Efficiency,"I believe this PR fixes the bug in #976 correctly, without adverse side effects (famous last words). Does the overall charge (from the charge/multiplicity entries) affect `Z` values of the component atoms? What happens when one would - perhaps foolishly - try to do a ""frozen core"" `Li^2+` calculation?. However, I am wondering whether our approach to core freezing is perhaps a bit simplistic: a point was raised on the forums that one might want to be able to automatically detect when the valence shell is empty (eg. alkali metal cations), and then perhaps unfreeze the previous shell. Similarly, some other QM packages allow freezing up to `N-th` previous rare gas shell (the current behaviour is `N=1`).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/978#issuecomment-385869940:118,charge,charge,118,https://psicode.org,https://github.com/psi4/psi4/pull/978#issuecomment-385869940,2,['charge'],['charge']
Energy Efficiency,"I believe we have had this problem in the past. Take a symmetric molecule who's optimal wavefunction should contain less symmetry:. ```python; import numpy as np. mol = psi4.geometry(""""""; 0 1; C 0.0 0.0 0.673055; C 0.0 0.0 -0.673055; H 0.0 0.934981 1.246807; H 0.0 -0.934981 1.246807; H 0.934981 0.0 -1.246807; H -0.934981 0.0 -1.246807; symmetry c1; """"""). # Set reference and guess.; psi4.set_options({; ""reference"": ""rhf"",; ""guess"": ""sad"",; ""basis"": ""DZP"",; ""soscf"": ""true"",; # ""sad_frac_occ"": ""true""; }). e_scf = energy('scf'); if np.allclose(e_scf, -77.87781349420317):; print(""Found non-symmetric minima! Success!""); elif np.allclose(e_scf, -77.84789770426966):; print(""Found symmetric minima... failure.""); else:; print(""You found something... wrong.""); ```. The `-77.847` result should be found when the molecule is constrained to symmetry. However, without that constraint there is a lower SCF result to be found. The kicker is even without the symmetry restraint (computation in `c1`) we fairly consistently end up with a symmetric wavefunction. Any ideas on how to avoid this?. Note 1: The stability analysis is showing that it is indeed finding the wrong answer and there are negative eigenvalues present. We should be able to follow these once the py-scf iterations are finished. Note 2: This is not deterministic for which result we land in (whoo!). Note 3: Moving an atom out of place by 1e-14 or so seems to ensure we find the correct energy. Really any noise lets the diagonalizer break out of its self-imposed symmetry constraints.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/875:516,energy,energy,516,https://psicode.org,https://github.com/psi4/psi4/issues/875,2,['energy'],['energy']
Energy Efficiency,I bet this is a problem with all minimal basis sets like STO-3G and STO-6G. Maybe something has changed in the SCF loop and the final energy is not stored if the density did not change in the first SCF iteration?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2760#issuecomment-1295073395:134,energy,energy,134,https://psicode.org,https://github.com/psi4/psi4/issues/2760#issuecomment-1295073395,1,['energy'],['energy']
Energy Efficiency,I can believe it. Good idea. I think one can just check the procedures dictionary. ```; >>> 'b3lyp-d3bj' in psi4.driver.procedures['energy']; True; >>> 'asdf-d3bj' in psi4.driver.procedures['energy']; False; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/996#issuecomment-385788395:132,energy,energy,132,https://psicode.org,https://github.com/psi4/psi4/issues/996#issuecomment-385788395,2,['energy'],['energy']
Energy Efficiency,"I can confirm this issue. The code seg faults only when calling gradient(df-mp2). If I run energy(dfmp2), it seems to work fine.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/119#issuecomment-130327172:91,energy,energy,91,https://psicode.org,https://github.com/psi4/psi4/issues/119#issuecomment-130327172,1,['energy'],['energy']
Energy Efficiency,"I can only strongly recommend to use a build system. I'm involved with [Easybuild](https://hpcugent.github.io/easybuild/) which has support for psi4. Building psi4 with the GCC 5 is reduced to a one line command: it will build everything, starting from binutils and gcc. It only requires a non-ancient version of gcc to be present (I think, no lower than 3.0 or so).; With the help of modules, you can easily support multiple versions of compilers (and software) Our HPC systems currently has 5 version of GCC available (4.6-5.1) and 11 versions of intel compiler (11-2015.1).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/97#issuecomment-105170511:182,reduce,reduced,182,https://psicode.org,https://github.com/psi4/psi4/pull/97#issuecomment-105170511,1,['reduce'],['reduced']
Energy Efficiency,"I can reproduce this on master.; ```; ==> X2C Options <==. Computational Basis: CC-PVDZ-DECON; X2C Basis: CC-PVDZ-DECON; The X2C Hamiltonian will be computed in the X2C Basis. The 1-norm of |H_X2C - H_Dirac| is: 1040988.405696207308. WARNING: The X2C and Dirac Hamiltonians have substatially different eigenvalues!; This is probably caused by the recontraction of the basis set.; ```; The energy is indeed plain wrong:; ```; ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-RHF iter 1: 483.09851658637217 4.83099e+02 6.47211e-01 DIIS; @DF-RHF iter 2: 48.89367873325060 -4.34205e+02 2.53817e-03 DIIS; @DF-RHF iter 3: 48.74097828423334 -1.52700e-01 5.96653e-04 DIIS; @DF-RHF iter 4: 48.72809517290153 -1.28831e-02 1.39212e-04 DIIS; @DF-RHF iter 5: 48.72728746065854 -8.07712e-04 2.56404e-05 DIIS; @DF-RHF iter 6: 48.72725943229844 -2.80284e-05 2.44921e-06 DIIS; @DF-RHF iter 7: 48.72725920400116 -2.28297e-07 3.81928e-07 DIIS; Energy and wave function converged.; ```; but it would be good to have a correct reference value...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1908#issuecomment-634507089:389,energy,energy,389,https://psicode.org,https://github.com/psi4/psi4/issues/1908#issuecomment-634507089,3,"['Energy', 'energy']","['Energy', 'energy']"
Energy Efficiency,"I checked all the optimization tests. I saw no major problems. A few of the cases now converge a bit faster. . opt-lindep-change/input.dat could be updated to the current energy after 3 steps, but this is not essential as we don't fully optimize this case. for opt10: we've changed basis sets, which is the reason for the different energy in the new output.ref. For some of the older cases, the testing criterion should be tightened. Specifically for ; opt1, opt1-fd, opt4, and opt5. The default SCF algorithm changed from PK->DF, and these output's are older. So I expect someone simply reduced the checking to only 3 decimals to maintain a PASS. We should tighten this up and be able to get 6 decimals in the energy - at least 5 - in a full optimization, at least. Note for tests such as opt 2, pk is specified and 6 decimals are checked already.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/315#issuecomment-197012335:171,energy,energy,171,https://psicode.org,https://github.com/psi4/psi4/pull/315#issuecomment-197012335,4,"['energy', 'reduce']","['energy', 'reduced']"
Energy Efficiency,"I checked your calculation just for fun with a two-week old snapshot. I get; ```; ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @RHF iter SAD: -1.10951830992328 -1.10952e+00 0.00000e+00 ; @RHF iter 1: -1.54125526228531 -4.31737e-01 0.00000e+00 DIIS; @RHF iter 2: -1.54125526228531 0.00000e+00 0.00000e+00 DIIS; Energy and wave function converged.; ```; which is the same solution as you reported with 1.3.2, only it converges in 2 iterations instead of 8. `guess huckel` and `guess core` also converge in 2 iterations, and they don't need the extra Fock build at the beginning.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1878#issuecomment-623943795:108,Energy,Energy,108,https://psicode.org,https://github.com/psi4/psi4/issues/1878#issuecomment-623943795,2,['Energy'],['Energy']
Energy Efficiency,"I compiled psi4, got coffee, and cmake decided it was time to recompile from scratch in case someone ninja edited my build. Cmake always has your back. . -Daniel Smith; Sent from my iPhone. . > On Apr 18, 2016, at 19:16, Lori A. Burns notifications@github.com wrote:; > ; > It would be valuable to developers, nightly builds, and CI testing if libint could be compiled once, then linked in as needed, like we can do for Boost. Much developer anger when CMake spontaneously decides the integrals need recompiling could be soothed! We could test molecules larger than He with density-fitted quad-zeta! The next NSF green initiative could applaud our energy savings!; > ; > Who dares to decouple libint from our build system such that it could become a detectable ExternalProject_Add CMake module? I think we need to be able to pass in MAX_AM, and it would be nice to have it build both static and shared libraries.; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly or view it on GitHub",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/355#issuecomment-211638331:613,green,green,613,https://psicode.org,https://github.com/psi4/psi4/issues/355#issuecomment-211638331,2,"['energy', 'green']","['energy', 'green']"
Energy Efficiency,"I confirmed that sapt8 got broken because we stopped storing `Ind20,u` in the `Ind20,r` variable in usapt0.cc. I am not sure where the `SAPT IND ENERGY` variable that is used for the test is defined. Does open-shell SAPT0 even go through `sapt_jk_terms.py` ? It seems like the code flow changed a bit since I implemented it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/908#issuecomment-364678447:145,ENERGY,ENERGY,145,https://psicode.org,https://github.com/psi4/psi4/pull/908#issuecomment-364678447,1,['ENERGY'],['ENERGY']
Energy Efficiency,"I couldn't pull up the old psi4/psi4private#14 that @loriab mentioned, but; does CC have a follow_root equivalent? Can you optimize the 3rd EOM-CCSD; root? There seems to be a CC3_FOLLOW_ROOT (CCEOM) option, that is not; really documented (documentation doesn't explain what this does). Maybe; @lothian can shed some light on this. David. On Wed, Nov 16, 2016 at 10:58 AM, Lori A. Burns notifications@github.com; wrote:. > ## _@loriab_ commented on this pull request.; > ; > In psi4/share/psi4/fsapt/fsaptdiff.py; > https://github.com/psi4/psi4/pull/519:; > ; > > ```; > > printOrder2(stuffA['order2'], stuffA['fragkeys']); > > ```; > > - print ' => Reduced Analysis <=\n'; > > - print(' => Reduced Analysis <=\n'); > > printOrder2(stuffA['order2r'], stuffA['fragkeysr']); > ; > @amjames https://github.com/amjames , yeah, specifying the trio of; > INTERP, LIBS, and HEADERS is the only surefire way I know to get fully; > consistent python.; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/519, or mute the thread; > https://github.com/notifications/unsubscribe-auth/AC9QdsQnxkGJc8o-ke-GfW4Qg-6yWExXks5q-ygKgaJpZM4KzjCV; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/519#issuecomment-260985515:650,Reduce,Reduced,650,https://psicode.org,https://github.com/psi4/psi4/pull/519#issuecomment-260985515,2,['Reduce'],['Reduced']
Energy Efficiency,"I couldn't reproduce the results using the def2-SVP basis, so I ran the same computation as in #1596 but with the 6-31G basis (all other parameters being the same). I attach Q-Chem output file.; [BODIPY.txt](https://github.com/psi4/psi4/files/3073222/BODIPY.txt). Here's the summary of ADC(2) results from Q-Chem (can't quite figure out how to format this on GitHub):; --------------------------------------------------------------------------------; HF Summary ; --------------------------------------------------------------------------------; Energy: -906.6356657873 a.u.; Dip. moment [a.u.]: [ 3.494726, -0.033111, -1.462926]; Total dipole [Debye]: 9.629954; <r^2> [a.u.]: [2923.854114, 1346.264718, 630.542572]; Total <r^2> [a.u.]: 4900.661404; --------------------------------------------------------------------------------. --------------------------------------------------------------------------------; MP(2) Summary ; --------------------------------------------------------------------------------; Energy contribution: -1.8309391560 a.u.; Total energy: -908.4666049433 a.u.; Dip. moment [a.u.]: [ 3.265989, -0.052169, -1.229851]; Total dipole [Debye]: 8.871367; <r^2> [a.u.]: [2923.192179, 1346.473546, 629.676198]; Total <r^2> [a.u.]: 4899.341924; --------------------------------------------------------------------------------; Starting Davidson ... ; --------------------------------------------------------------------------------; It NVec Conv Avg. Norm Max. Norm Conv. states Remark; --------------------------------------------------------------------------------; 2 0 3.605e-01 5.138e-01 0.1878 n n Guess.; 1 4 0 1.105e-01 1.726e-01 0.0174 n n ; 2 6 0 3.198e-02 5.191e-02 0.0066 n n ; 3 8 0 1.563e-02 2.479e-02 0.0049 n n ; 4 10 0 9.895e-03 1.453e-02 0.0045 n n ; 5 12 0 6.530e-03 1.034e-02 0.0043 n n ; 6 14 0 5.263e-03 8.300e-03 0.0043 n n ; 7 16 0 5.542e-03 1.031e-02 0.0042 n n ; 8 18 0 3.255e-02 6.506e-02 0.0042 n n ; 9 20 0 1.320e-02 2.638e-02 0.0042 n n ; 10 4 0 9.744e-",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1599#issuecomment-482557190:546,Energy,Energy,546,https://psicode.org,https://github.com/psi4/psi4/pull/1599#issuecomment-482557190,2,['Energy'],['Energy']
Energy Efficiency,"I couldn’t say concretely, but some other programs will switch to an appropriate reference for open-shell. For psi4, it would have to be rhf/rks because we don’t have roks. This would be convenient at times, for instance, running databases of mixed closed/open shell. Propositions to be considered:. (i) Keeping reference in one place, that is, as a keyword. Consequences: retire rhf/uhf/rohf & rscf/uscf/roscf. (ii) If molecule is open-shell _and_ no reference has been specified, switch to uhf. This could be tricky b/c we’re not set up to do this driver-side. Also, there’d still be no way to use r/ro, as appropriate, in a series of molecules w/o explicitly setting reference. Lori. > On Jun 8, 2015, at 10:48 AM, David Sherrill notifications@github.com wrote:; > ; > Is the proposal to replace uhf/rhf/rohf -> hf for energy(), grad(), etc?; > That sounds ok to me (then reference just has to be defined properly).; > ; > What about DFT, do we define functional properly and do energy('dft'), etc.?; > ; > David; > ; > On Sun, Jun 7, 2015 at 11:04 PM, Lori A. Burns notifications@github.com; > wrote:; > ; > > Fixed by 6f6d3aa; > > https://github.com/psi4/psi4public/commit/6f6d3aa1d039e4501bc5c5dc4190da1758e1c889; > > though I rather think now that defining hf/rhf/uhf/rohf/rsch/roscf/uscf for; > > energy() was a bad idea (by me) a few years ago (except for ""hf"" itself).; > > Nevertheless, as this ticket points out, having defined these names only; > > for energy() confounds the driver logic. These convenience names are now in; > > place for gradient() and property().; > > ; > > I'd be glad to rip out the lot (except for ""hf"") from energy(), grad(),; > > prop() if others concur with my present assessment.; > > ; > > —; > > Reply to this email directly or view it on GitHub; > > https://github.com/psi4/psi4public/issues/103#issuecomment-109846967.; > > ; > > —; > > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4public/issues/103#issuecomment-110021718.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/103#issuecomment-110183382:2407,energy,energy,2407,https://psicode.org,https://github.com/psi4/psi4/issues/103#issuecomment-110183382,3,['energy'],['energy']
Energy Efficiency,I definitely see screening for the potential on the surface in other programs. Involving a point-charge approximation of the integral I think.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1280#issuecomment-438821342:97,charge,charge,97,https://psicode.org,https://github.com/psi4/psi4/issues/1280#issuecomment-438821342,1,['charge'],['charge']
Energy Efficiency,"I did some comparison against G09 with and without FC for the Kr-OCS system. The total and correlation energy for the non-FC calculation agrees reasonably well:; ```; G09 vs Psi4; E_tot: -973.44895912 vs -973.44870301; E_corr: -0.9107877120 vs -0.9106736313; ```; while for the FC calculation there is a difference:; ```; G09 vs Psi4; E_tot: -973.33875833 vs -973.37470156; E_corr: -0.8005869194 vs -0.8366721825; ```; This difference seems to be coming mainly from the same-spin parts. When I calculate the Kr atom only, psi4 results do not differ whether I use MP2 with or without frozen core; in Gaussian, the full core correlation is `-0.283`, while FC-correlation is only `-0.242` Eh. I believe Gaussian freezes 4 electron pairs (3s + 3p) in addition to the 10 electrons substituted by the ECP (1s + 2s + 2p).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/976#issuecomment-383722121:103,energy,energy,103,https://psicode.org,https://github.com/psi4/psi4/issues/976#issuecomment-383722121,1,['energy'],['energy']
Energy Efficiency,"I did some testing with both files. When loading them into molden (version 5.1), the program prints the Mulliken charges on screen. The results are odd:. molden file from ORCA:; N 1.3673; H 0.0711; H 0.2191; H 0.3448; Sum of Mulliken Charges: 2.0024. molden file from PSI4:; N 1.3673; H 0.0711; H 0.2191; H 0.3448; Sum of Mulliken Charges: 2.0024. Obviously, both are wrong. Apparently, the D orbitals have very little influence on the Mulliken charges.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/60#issuecomment-53036550:113,charge,charges,113,https://psicode.org,https://github.com/psi4/psi4/issues/60#issuecomment-53036550,4,"['Charge', 'charge']","['Charges', 'charges']"
Energy Efficiency,"I didn't think of that, @loriab. These Hessians come in peace (although they could well impart the occasional seg fault). I was within epsilon of having the code done last week (literally; I screwed up some orbital energy scaling term somehow) so I came very close to beating `1.0`. Still, this code is almost useless until we get DF and KS terms in there, so no sense in hurrying it into a new release version.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/437#issuecomment-230548237:215,energy,energy,215,https://psicode.org,https://github.com/psi4/psi4/pull/437#issuecomment-230548237,1,['energy'],['energy']
Energy Efficiency,"I do agree on most counts. Although, I think its worth pointing out that properties through OEProp are quite trivial; however, any other properties are going require linear response in some way or another which divorces itself quite radically from standard `energy` calls.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/286#issuecomment-189700565:258,energy,energy,258,https://psicode.org,https://github.com/psi4/psi4/pull/286#issuecomment-189700565,1,['energy'],['energy']
Energy Efficiency,"I do not have the latest revision. However, with the revision I have (Psi4 0.3.431) I removed ""set mp2_type cd"" and use energy('cd-mp2'), then I get . CD-MP2 Correlation Energy (a.u.) : -0.05840983042460. Hence, with my version it appears to be okay. @loriab @CDSherrill",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/244#issuecomment-183508678:120,energy,energy,120,https://psicode.org,https://github.com/psi4/psi4/issues/244#issuecomment-183508678,2,"['Energy', 'energy']","['Energy', 'energy']"
Energy Efficiency,"I don't get it, I ran another geom opt using B3LYP/6-31G* with the last coordinates of the previous attempt, and it converged 1st iteration. ```; **** Optimization is complete! (in 1 steps) ****. ==> Optimization Summary <==. Measures of convergence in internal coordinates in au.; --------------------------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------------------------- ~; 1 -1520.121971894730 -1520.121971894730 0.00006927 0.00001834 0.00081821 0.00021391 ~; --------------------------------------------------------------------------------------------------------------- ~; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2338#issuecomment-957945866:408,Energy,Energy,408,https://psicode.org,https://github.com/psi4/psi4/issues/2338#issuecomment-957945866,1,['Energy'],['Energy']
Energy Efficiency,"I don't know how you are reading in the Hessian here, since I don't know how to automatically read files like ""hooh.21221.hess"" now that we have pid's in the name. (BTW, it appears the current psi4 test cases actually use an empirical Hessian.). These jobs are failing because the ""Point 1"" on the IRC is being judged 'converged' immediately before a gradient is even run. (The logic in the code is messy, since the optimizer doesn't actually call the gradient.) So optking needs to do displacements from the TS (where the gradient is zero) but return a not-converged signal to the python optimize. This usually works. I tried the following:. ```; set {; g_convergence gau_verytight; basis dzp; opt_type irc; cart_hess_read true; hessian_write true; }. hessian('scf', dertype=1); h2o2.reset_point_group('c2'); energy = optimize('scf'). ```; and everything worked fine. The problem in my testing is not indeterminism. There is something about the calculation setup that is causing optking not to compute the gradient after the first irc_step(). Perhaps @avcopan could figure out what is going on?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/860#issuecomment-346373530:810,energy,energy,810,https://psicode.org,https://github.com/psi4/psi4/issues/860#issuecomment-346373530,1,['energy'],['energy']
Energy Efficiency,"I don't see any wB97X-D3/def2-TZVP energies from Psi4 1.4.1 in your data, just wB97X-D/def2-SVP. . Looking at the data you have from Psi4 1.4.1, the wB97X-D/def2-SVP energies relative to the minimum energy conformer for each molecule are similar to the relative energies from ORCA. Though some conformers have significant differences for the relative energy from ORCA vs from Psi4, most differences are around 1 kcal/mol or less. I would expect similar deviations between wB97X-D/def2-SVP and wB97X-D/def2-TZVP results that were both computed using the same software. The energy is sensitive to the quality of the basis set. Using a different dispersion correction than the 'reference' ORCA energies doesn't help either. The differences compound with different implementations of various algorithms between different software packages. For molecules with conformers that are all close in energy, these deviations will bring the r<sup>2</sup> way down.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2351#issuecomment-974333804:199,energy,energy,199,https://psicode.org,https://github.com/psi4/psi4/issues/2351#issuecomment-974333804,4,['energy'],['energy']
Energy Efficiency,"I don't see much more I can do here. The convergence behavior seems perfectly reasonable to me. It's just an annoying case where the next step changing the energy by less than 1e-6 doesn't mean you're within 1e-6 of the converged energy. Do you just need me to check if I agree with the new treatment of `occ` convergence?. The other point which may be valuable for test suite purposes is that there are multiple LCCD energy functions. There's the projective function (linearize the normal CCD energy function) and the variational function (just use the Lagrangian). The projective function is simple but non-variational, where the variational function is variational but as implemented in `occ` reads multiple V^4 quantities from disk. I believe the variational functional is the default in fnocc, but I'd need to read over the code to be certain. I assume Eugene's version doesn't run into the V^4 problem... If you want to try the variational function in the test suite, `set ccl_energy true`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1980#issuecomment-682990959:156,energy,energy,156,https://psicode.org,https://github.com/psi4/psi4/pull/1980#issuecomment-682990959,4,['energy'],['energy']
Energy Efficiency,"I don't understand what you're asking. What do you mean by ""my psi4 does not reflect the methods that comes with it"", and how does that lead to ""I can't calculate the potential energy""?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181#issuecomment-2191721109:177,energy,energy,177,https://psicode.org,https://github.com/psi4/psi4/issues/3181#issuecomment-2191721109,1,['energy'],['energy']
Energy Efficiency,"I don't want to take more of your time.; I tried the input that you sent me and the calculation ends with the following error. ---. PSIO_ERROR: Can't find TOC Entry IWL Buffers; PSIO_ERROR: unit = 33, errval = 13; PSIO_ERROR: 13 (no such TOC entry); Traceback (most recent call last):; File ""<string>"", line 23, in <module>; File ""/home/matias/anaconda/share/psi/python/driver.py"", line 637, in energy; procedures['energy'][lowername](lowername, **kwargs); File ""/home/matias/anaconda/share/psi/python/proc.py"", line 582, in run_mp2; run_conv_omp2(name, **kwargs); File ""/home/matias/anaconda/share/psi/python/proc.py"", line 538, in run_conv_omp2; psi4.occ(); RuntimeError: PSIO Error. ---. In the input you used some keywords that i'm not familiar with, so i have to study the manual a little more, to understand the error.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/105#issuecomment-144750805:395,energy,energy,395,https://psicode.org,https://github.com/psi4/psi4/issues/105#issuecomment-144750805,2,['energy'],['energy']
Energy Efficiency,"I dont have access to that paper at the moment, but a few notes for you:; - If you need to tweak functionals (@susilehtola this is a good example) please checkout [this](https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/dft_funcs/hyb_superfuncs.py#L230) example. - For VV10 you can specify it via the python interface:; ```python; def build_myvv10_superfunctional(name, npoints, deriv, restricted):; sup = core.SuperFunctional.blank(); sup.set_name('HF+VV10'); sup.set_x_alpha(1.0). # Set VV10 parameters. If these are changed we assume you want VV10.; sup.vv10_b(...); sup.vv10_c(...). return sup. func_call = energy('SCF', dft_functional= build_myvv10_superfunctional); ```. The DFT code is likely the most class/inheritance/convoluted C++ code we have besides perhaps integrals. So probably not a great place to start in :). . - Post-SCF only VV10 is a good idea and just a matter of code logic. We need a flag somewhere that computes [this](https://github.com/psi4/psi4/blob/f03a896a2d70eac47137cf471dda4805e483586d/psi4/src/psi4/libfock/v.cc#L213) at the end of a SCF computation. The SCF iterations are in a bit of a state of flux due to the python porting; however, this should be pretty easy once merged as we have access to that Py-side.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/870#issuecomment-347998008:626,energy,energy,626,https://psicode.org,https://github.com/psi4/psi4/issues/870#issuecomment-347998008,1,['energy'],['energy']
Energy Efficiency,"I echo Daniel on using the Wavefunction.variables map for storage of the pcm energy. Eventually, Wfn.variables will be primary and P::e dropped, but for now, make them mirror. https://github.com/psi4/psi4/blob/master/doc/sphinxman/source/pcmsolver.rst seems a good place for all Psi4+PCMSolver documentation. And maybe mention on the CC page that CC+PCM is available if PCMSolver enabled.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/683#issuecomment-296845920:77,energy,energy,77,https://psicode.org,https://github.com/psi4/psi4/pull/683#issuecomment-296845920,1,['energy'],['energy']
Energy Efficiency,"I encountered this problem with wB97X-D3BJ/def2-TZVPD, but PBE/def2-TZVPD shows the same, with the added problem that the erroneously low energy is also oscillatory. The psi4=1.4rc2 energy is -1144.303 Hartree, and the psi4=1.4rc1 energy oscillates between -1146.416 and -1146.534 Hartree. . Once again, this problem is specific to the algorithm that uses in-core AOs. If scf_type DF is provided with less RAM (say 10 GiB) such that it uses disk, the energy is correct (-1144.303 Hartree). I note that PBE requires only 20 GiB to run in-core, and thus might be easier for testing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2211#issuecomment-869060258:138,energy,energy,138,https://psicode.org,https://github.com/psi4/psi4/issues/2211#issuecomment-869060258,4,['energy'],['energy']
Energy Efficiency,"I figure this was probably caught already, but I thought I should submit a report just in case. I was running some test calculations in psi4 (v 0.4.0, Ubuntu) and I got the following error while trying to calculate Mulliken charges:. ```; [Screen output]. Traceback (most recent call last):; File ""<string>"", line 58, in <module>; File ""/home/kratz/bin/miniconda/share/psi4/python/p4util/util.py"", line 41, in oeprop; oe = psi4.OEProp(wfn); Boost.Python.ArgumentError: Python argument types in; OEProp.__init__(OEProp, str); did not match C++ signature:; __init__(P7_object, N5boost10shared_ptrIN3psi12WavefunctionEEE); ```. The DFT calculation that ran before the Mulliken charges completed. Just the oeprop command failed. This did not happen with an older copy on a different computer (PSI4 v 0.3.593, CentOS). As I was typing this report I tried to reinstall psi4 from conda on my CentOS machine, and I got a failure during the SAPT0 test calculations as well:. ```; [Conda output]. Report problems at http://forum.psicode.org/t/report-conda-update-psi4-oddities-here/32. Traceback (most recent call last):; File ""<string>"", line 36, in <module>; File ""/wsu/home/ft/ft08/ft0805/work/exec/miniconda/miniconda/pkgs/psi4-0.3.593-py27_gab46761/share/psi4/python/driver.py"", line 647, in energy; procedures['energy'][lowername](lowername, **kwargs); File ""/wsu/home/ft/ft08/ft0805/work/exec/miniconda/miniconda/pkgs/psi4-0.3.593-py27_gab46761/share/psi4/python/proc.py"", line 3072, in run_sapt; e_dimer = scf_helper('RHF', **kwargs); File ""/wsu/home/ft/ft08/ft0805/work/exec/miniconda/miniconda/pkgs/psi4-0.3.593-py27_gab46761/share/psi4/python/proc.py"", line 1972, in scf_helper; e_scf = psi4.scf(precallback, postcallback); Boost.Python.ArgumentError: Python argument types in; psi4.scf(NoneType, NoneType); did not match C++ signature:; scf(N5boost10shared_ptrIN3psi12WavefunctionEEE, P7_object, P7_object); ```. -kratz",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/240:224,charge,charges,224,https://psicode.org,https://github.com/psi4/psi4/issues/240,4,"['charge', 'energy']","['charges', 'energy']"
Energy Efficiency,"I find it troubling that on my computer the nuclear repulsion energy is ""inf"":. ```; Running in c1 symmetry. Rotational constants: A = 0.00468 B = 0.00339 C = 0.00276 [cm^-1]; Rotational constants: A = 140.36411 B = 101.76200 C = 82.71015 [MHz]; Nuclear repulsion = inf; ```. Looking at your input I see duplicated atoms. I've modified my local copy of Psi4 to report the duplicated atoms:. ```; ERROR: Atom 51 near to atom 26.; ERROR: Atom 52 near to atom 27.; ERROR: Atom 53 near to atom 28.; ERROR: Atom 54 near to atom 29.; ERROR: Atom 55 near to atom 30.; ERROR: Atom 56 near to atom 31.; ERROR: Atom 57 near to atom 32.; ERROR: Atom 58 near to atom 33.; ERROR: Atom 59 near to atom 34.; ERROR: Atom 60 near to atom 35.; ERROR: Atom 61 near to atom 36.; ERROR: Atom 62 near to atom 37.; ERROR: Atom 63 near to atom 38.; ERROR: Atom 64 near to atom 39.; ERROR: Atom 65 near to atom 40.; ERROR: Atom 66 near to atom 41.; ERROR: Atom 67 near to atom 42.; ERROR: Atom 68 near to atom 43.; ERROR: Atom 69 near to atom 44.; ERROR: Atom 70 near to atom 45.; ERROR: Atom 71 near to atom 46.; ERROR: Atom 72 near to atom 47.; ERROR: Atom 73 near to atom 48.; ERROR: Atom 74 near to atom 49.; ERROR: Atom 75 near to atom 50.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/158#issuecomment-129556718:62,energy,energy,62,https://psicode.org,https://github.com/psi4/psi4/issues/158#issuecomment-129556718,1,['energy'],['energy']
Energy Efficiency,"I forgot a rather important detail - when DFOCC says it is running all further computations in C1 symmetry, it does not just mean that spin-adapted orbitals won't be used. It even creates a C1 clone of the molecule. The `symmetrize_gradient` call symmetrizes to the C1 symmetry of the clone, not the symmetry of the molecule that went into the `gradient` call. As long as that symmetry-less molecule clone is used internally, I don't see how a fix for the issue would be possible.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1504#issuecomment-459012061:140,adapt,adapted,140,https://psicode.org,https://github.com/psi4/psi4/issues/1504#issuecomment-459012061,1,['adapt'],['adapted']
Energy Efficiency,"I found that in version=1.5 MintsHelper.ao_eri() does not work for multiple basis sets, such as MintsHelper.ao_eri(BasisA, BasisA, BasisB, BasisB).; In 1.5, I ran this:; ```python; print(""python=%s, \npsi4=%s""%(sys.version, psi4.__version__)); H = psi4.geometry(; """"""; nocom; noreorient; H -1 0 0; units bohr; symmetry c1""""""; ); O = psi4.geometry(; """"""; nocom; noreorient; O 1 0 0; units bohr; symmetry c1""""""; ); psi4.set_options({""reference"": ""uhf""}); EH, wfnH = psi4.energy(""scf/sto-3g"", molecule=H, return_wfn=True); EO, wfnO = psi4.energy(""scf/sto-3g"", molecule=O, return_wfn=True); mints = psi4.core.MintsHelper(wfnH.basisset()); aoeriHO = np.array(mints.ao_eri(wfnO.basisset(), wfnO.basisset(), wfnH.basisset(), wfnH.basisset())); aoeriHO.shape; ```; ==>; ```; python=3.8.12 (default, Oct 12 2021, 13:49:34) ; [GCC 7.5.0], ; psi4=1.5; RuntimeError Traceback (most recent call last); /tmp/ipykernel_845/2933828549.py in <module>; ----> 1 aoeriHO = np.array(mints.ao_eri(wfnO.basisset(), wfnO.basisset(), wfnH.basisset(), wfnH.basisset())); 2 aoeriHO.shape. RuntimeError: ; Fatal Error: Unexpected integral type (aa|bb) in setup_sieve(); Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1638121835567/work/psi4/src/psi4/libmints/twobody.cc on line: 249; The most recent 5 function calls were:. psi::TwoBodyAOInt::setup_sieve(); psi::IntegralFactory::eri(int, bool, bool); ```; But in 1.3.2, the same code gave me; ```; python=3.7.11 (default, Jul 27 2021, 14:32:16) ; [GCC 7.5.0], ; psi4=1.3.2; (5, 5, 1, 1); ```; I am not sure if this was an issue with my python or my WSL2 or psi4. Thanks!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2439:469,energy,energy,469,https://psicode.org,https://github.com/psi4/psi4/issues/2439,2,['energy'],['energy']
Energy Efficiency,"I gave this a try (using Psi4 1.9.1) and noticed that the energy converged to a state ~20 hartrees below the def2-TZVP result. I think the def2-TZVP is the ""correct"" state as it converges to this state in vacuum and with PCMSolver using def2-TZVPPD, as well as using ddX with def2-TZVPP. . I tried changing the guess to Huckel which seems to have resolved the issue for this particular case. I also tried changing the convergence algorithm (e.g. using damping, not using ADIIS, etc), as well as other guesses, but only the Huckel guess was able to converge to the same state as the def2-TZVP. . I would think that the specific solution isn't necessarily transferrable to all other systems, but that fiddling with the convergence/guess settings may help in general. Result:; ```; MBIS Charges: (a.u.); Center Symbol Z Pop. Charge; 1 C 6 6.139025 -0.139025; 2 C 6 6.133511 -0.133511; 3 C 6 6.122876 -0.122876; 4 C 6 6.070789 -0.070789; 5 C 6 6.122873 -0.122873; 6 C 6 6.133418 -0.133418; 7 I 25 25.053866 -0.053866; 8 H 1 0.850991 0.149009; 9 H 1 0.849569 0.150431; 10 H 1 0.836862 0.163138; 11 H 1 0.836785 0.163215; 12 H 1 0.849450 0.150550; ```. Input:; ```; molecule test {; 0 1; C -2.770566610000 0.138041700000 0.070178320000; C -1.574766790000 -2.182402580000 0.041630990000; C 1.033304570000 -2.323434390000 -0.024422900000; C 2.435037490000 -0.121299970000 -0.061679550000; C 1.259017560000 2.209348470000 -0.033641890000; C -1.350150920000 2.328080550000 0.032456990000; I 6.389923580000 -0.318582790000 -0.161855610000; H -4.794725900000 0.238941070000 0.121450260000; H -2.664958600000 -3.891956620000 0.070604800000; H 1.951364020000 -4.127647160000 -0.046322210000; H 2.351710440000 3.913369620000 -0.062674850000; H -2.265188840000 4.137542080000 0.054275640000; units bohr; no_com; no_reorient; }. set {; basis def2-TZVPPD; ddx true; ddx_model pcm; ddx_solvent_epsilon 4.0; guess huckel; }. energy('pbe0'); properties('pbe0',properties= [""mbis_charges"",""quadrupole"",""mulliken_charges"",""d",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3135#issuecomment-2349712230:58,energy,energy,58,https://psicode.org,https://github.com/psi4/psi4/issues/3135#issuecomment-2349712230,3,"['Charge', 'energy']","['Charge', 'Charges', 'energy']"
Energy Efficiency,"I get a segfault when doing an upcast between custom basis sets, while everything works fine when doing an upcast between built-in basis sets. I've been poking around in GDB, but I haven't figured out the issue yet. Here's an example:. ```; molecule {; O ; H 1 0.96; H 1 0.96 2 104.5; }. basis low {; assign sto-3g; }; basis high {; assign cc-pvdz; }. core.IO.set_default_namespace(""low""); set basis low; energy('hf'). core.IO.set_default_namespace('high'); core.IO.change_file_namespace(180, 'low', 'high'); set guess read; set basis high; energy('hf'). ```. Merely replacing `set basis low` with `set basis sto-3g` and `set basis high` with `set basis cc-pvdz` fixes the segfault.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/719:405,energy,energy,405,https://psicode.org,https://github.com/psi4/psi4/issues/719,2,['energy'],['energy']
Energy Efficiency,"I get the following output with request to submit a bug report:; ```; Threads set to 4 by Python driver. Memory set to 11.176 GiB by Python driver.; Traceback (most recent call last):; File ""/var/lib/slurm/slurmd/job23834122/slurm_script"", line 16, in <module>; myener = psi4.energy(""WB97X/aug-cc-pvqz"", molecule=geom); File ""/home/x_davva/wd/miniconda3/envs/ACT/lib/python3.9/site-packages/psi4/driver/driver.py"", line 501, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/x_davva/wd/miniconda3/envs/ACT/lib/python3.9/site-packages/psi4/driver/procrouting/proc.py"", line 2455, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/home/x_davva/wd/miniconda3/envs/ACT/lib/python3.9/site-packages/psi4/driver/procrouting/proc.py"", line 1670, in scf_helper; e_scf = scf_wfn.compute_energy(); File ""/home/x_davva/wd/miniconda3/envs/ACT/lib/python3.9/site-packages/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 86, in scf_compute_energy; self.iterations(); File ""/home/x_davva/wd/miniconda3/envs/ACT/lib/python3.9/site-packages/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 429, in scf_iterate; self.form_C(); RuntimeError: ; Fatal Error: Count 8 alpha electrons, expected 7.; This is a bug. Please file a report.; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1657298395608/work/psi4/src/psi4/libscf_solver/hf.cc on line: 482; ```; from this input; ```; #!/usr/bin/env python3; import psi4 as psi4; psi4.core.set_num_threads(4); psi4.set_memory(12000000000); psi4.core.set_output_file('Al.out', False); psi4_io = psi4.core.IOManager.shared_object(); psi4_io.set_default_path('/tmp/'); geometry= """"""; 0 2; Al 0 0 0; """"""; psi4.set_options({'reference': 'uhf'}); geom = psi4.geometry(geometry); myener = psi4.energy(""WB97X/aug-cc-pvqz"", molecule=geom); with open('atomization_energy.dat', 'w') as aefile:; aefile.write('Atomization energy %g\n' % myener); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2858:276,energy,energy,276,https://psicode.org,https://github.com/psi4/psi4/issues/2858,5,['energy'],['energy']
Energy Efficiency,"I get this error:; > OMP: Info #270: omp_set_nested routine deprecated, please use omp_set_max_active_levels instead. Using this as an input:. ```; molecule {; He 0 0 0; --; He 2 0 0; }; import snsmp2; energy('sns-mp2'); ```. I have installed it from conda channel of psi4:. > conda create -n psi4 psi4 snsmp2 -c psi4. I also did. > conda update psi4 -c psi4. as advised on the [psi4 website](http://www.psicode.org/psi4manual/master/build_obtaining.html#faq-binarypackage) . Package versions:; ```; >>> import psi4; >>> psi4.__version__; '1.3.2'; >>> snsmp2.__version__; '1.0.1.dev24'; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1820:202,energy,energy,202,https://psicode.org,https://github.com/psi4/psi4/issues/1820,1,['energy'],['energy']
Energy Efficiency,"I had a long day of travel back from the conference, and used the ensuing boredom as an excuse to code up the DF second derivatives. The code is not completely terrible, and gives correct answers. We need an efficient out of core code eventually, but what do you think about adding it to this PR?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/437#issuecomment-231902272:208,efficient,efficient,208,https://psicode.org,https://github.com/psi4/psi4/pull/437#issuecomment-231902272,1,['efficient'],['efficient']
Energy Efficiency,"I had another look and I believe the problem is, that in a `ptype == ""gradient""` calculation, we first do a normal energy calculation (where . ```jobrec['qcvars']['CURRENT ENERGY'] = copy.deepcopy(jobrec['qcvars']['DISPERSION CORRECTION ENERGY'])```. might be the correct thing to do), and then we do a gradient, where i don't think it is...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1470#issuecomment-459121633:115,energy,energy,115,https://psicode.org,https://github.com/psi4/psi4/pull/1470#issuecomment-459121633,3,"['ENERGY', 'energy']","['ENERGY', 'energy']"
Energy Efficiency,"I had looked into the integer overflow issues in the DF code with MP3 as an example several months ago. The negative memory values reported are of course integral overflows and one can fix the printing of memory requirements by changing the int to a type that holds larger integers. But the actual problem happens later when, if I understand correctly, an array index becomes bigger than 2,147,483,647. . In my DF-MP3 test calculation this happened in the main loop in mp3_WabefT2. . Memory for I, Vs, Va, Ts, and Ta was successfully allocated, but then the quantity a * navirA * nQ became too large. I forced it to long or long-long, so the product could be evaluated (and printed printed out) as 2148655392 (as opposed to -2146311904 with int) but this positive value ""anavirAnQ3"" was illegal for the subsequent contraction. I->contract(false, true, navirA * nb, navirA, nQ, K, K, 0, anavirAnQ3, 1.0, 0.0);. So, it is the array index, and not the array value, that is bigger than the 32-bit integer. And our math libraries index arrays with the 32-bit integer type! . I tried to compile Psi against MKL and OpenBLAS with 64-bit index arrays (the ILP64 interface) but the resulting program was not stable. So, if my thinking is correct, I am afraid we do not have an easy fix as long as Psi4 expects math libraries with 32-bit integer indices. I can share some debug code (modified dfocc.h, df_ref.cc, tei_grad_corr.cc, df_corr.cc, ref_grad.cc, and mp3_W_intr.cc with some long int and printf statements) and sample outputs if anybody thinks this is helpful.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1764#issuecomment-561544849:534,allocate,allocated,534,https://psicode.org,https://github.com/psi4/psi4/issues/1764#issuecomment-561544849,1,['allocate'],['allocated']
Energy Efficiency,"I had put this together as I was building v1.4, so may as well share here. ### `psi4`. project | req'd | linux | osx | win | noarch | lang; -----|-----|-----|-----|-----|-----|-----; libint2 | yes | psi4 | psi4 | psi4 | | C++; libxc | yes | psi4 | psi4 | c-f | | C; gau2grid | yes | psi4 | psi4 | c-f | | C; qcelemental | yes | | | | psi4 copied from c-f | Py; qcengine | yes | | | | psi4 copied from c-f | Py; ambit | no | psi4 | psi4 | --- | | C++; chemps2 | no | psi4 | psi4 | --- | | C++; dftd3 | no | psi4 | psi4 | psi4 | | Fortran; dkh | no | psi4 | psi4 | --- | | Fortran; gcp | no | psi4 | psi4 | psi4 | | Fortran; gdma | no | psi4 | psi4 | --- | | Fortran; pcmsolver | no | psi4 | psi4 | --- | | C++, Fortran; simint | no | psi4 | psi4 | --- | | C++. * not req'd means present in Linux conda package but not required for a minimal conda package; * gcp should switch to mctc-gcp already on c-f for L but needs a MKL build; * gdma is a little behind in releases b/c psi actually uses a home-adapted library instead of the executable; * pcmsolver latest (v1.3, I think) can't work with psi4 after core-developer of both gave a medium-effort try. But there's a slight problem with previous release v1.2, too, so psi4 uses an unpublished v1.2.1.1 (or something like that). a patch in the conda-recipe from v1.2.1 upstream is probably the better sol'n; * simint is peculiar in that you need to choose a target instruction set at compile time. usual psi default may not be general enough for c-f. ### `psi4-rt`. project | req'd | linux | osx | win | noarch | lang; -----|-----|-----|-----|-----|-----|-----; libtensorlight | no | psi4 copied from adcc | psi4 copied from adcc | --- | | C++; adcc | no | psi4 copied from adcc | psi4 copied from adcc | --- | | C++; fockci | no | | | | psi4 | Py; mp2d | no | psi4 | psi4 | --- | | C++; openfermion | no | | | | psi4 | Py; openfermionpsi4 | no | | | | psi4 | Py; pycppe | no | psi4 | psi4 | --- | | C++; pylibefp | no | psi4 | psi4 | --- | | C++; libef",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2300#issuecomment-945995900:998,adapt,adapted,998,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-945995900,1,['adapt'],['adapted']
Energy Efficiency,"I had the same issue when I tested cdomp2-2. Here's the list of all my failed tests:; 76:cdomp2-2; 123:dfmp2-grad2; 125:dfmp2-grad4; 127:dfomp2-2; 129:dfomp2-4; 131:dfomp2-grad2; 303:stability2. I am using Ubuntu 14.04 with ATLAS for BLAS and LAPACK. Update:; After I changed to Intel MKL, the only failed case in tests is 303:stability2. Because it's just a value off, I just ignore it and continue installing. > ## Output:; > ; > Nuclear repulsion energy..........................................PASSED; > Reference energy..................................................PASSED; > Stability eigenvalues with symmetry: computed value (0.094068) does not match (0.0940977919192).; > Check your output file for reporting of the matrices.; > An error has occurred python-side. Traceback (most recent call last):; > ; > File ""<string>"", line 58, in <module>; > ; > File ""/home/mrabsence/Downloads/soft/psi4/share/python/p4util/util.py"", line 209, in compare_matrices; > raise TestComparisonError(""\n""); > ; > TestComparisonError: ; > ; > Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); > <end of output>; > Test time = 1.80 sec",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/391#issuecomment-223730550:450,energy,energy,450,https://psicode.org,https://github.com/psi4/psi4/issues/391#issuecomment-223730550,2,['energy'],['energy']
Energy Efficiency,"I have a dimer complex in z-matrix form that I am calculating the interaction energy. I have two scripts, one is the an object that lives inside my software and the other is an external script that I use for testing the configurations for psi4. . When I run the python on the external script, the function returns the total energy:. ```python; dimer_energy = psi4.energy(; theory,; molecule=dimer2,; bsse='cp'; ); ```; However, if I run this programmatically, although the same result in terms of the output file but the dimer energy returned is the interaction energy. . I am running this on `hf/6-31g*' so not SAPT. Is there something that I am missing where psi4 decides to return the interaction energy over the dimer energy and why would I see this inconsistency in my code. Kind of lost on this one.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2730:78,energy,energy,78,https://psicode.org,https://github.com/psi4/psi4/issues/2730,7,['energy'],['energy']
Energy Efficiency,"I have a patch written -- I can see that `initialize_lebedev` actually gets called, and when I inspect `lebedev_mapping_`'s values at a breakpoint, things look reasonable. ...I also see no changes in the energy anywhere. In fact, I don't see any evidence of any use of `order_` at all, except in one printing function. Is this intentional? . Anyway, PR incoming. I am OK not understanding the mysteries of `order_`, as long as I no longer get 1/1000 hangs when trying to run large workflows.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2735#issuecomment-1267820055:204,energy,energy,204,https://psicode.org,https://github.com/psi4/psi4/issues/2735#issuecomment-1267820055,1,['energy'],['energy']
Energy Efficiency,"I have been modifying my gdma code so that it can handle h functions. It's a fairly straightforward change, but I found that I got errors in the multipoles when there were h functions in the basis. In particular, the total charge was always nonzero. Repeated checks found no errors in the gdma code. Finally I found that there is a bug in the treatment of h functions in Psi4, or at least an inconsistency with d, f and g. If the normalization factor for z^2 exp(-zeta r^2) is N, then the factor for xy exp(-zeta r^2) is \sqrt(3)N -- it needs the extra sqrt(3). Similarly z^5, xz^4, x^2z^3, xyz^3 and x^2y^2z cartesian h functions all need different normalization factors. If the gdma code takes account of these as it does for d, f and g, I get the errors. If however I treat them all as having the same normalization factor as z^5, I get sensible results -- total charges are now zero. Whether the results are correct, however, is doubtful, because the normalization error probably affects the wavefunction. Using an fchk file from Gaussian16 gives the same errors. Was the Psi4 fchk code derived from gaussian?. My revised version of gdma is available at https://git.uis.cam.ac.uk/x/ch-stone/u/ajs1/gdma.git",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1574:223,charge,charge,223,https://psicode.org,https://github.com/psi4/psi4/issues/1574,2,['charge'],"['charge', 'charges']"
Energy Efficiency,"I have did a quick research and I couldn't find anything relevant. Are you planning on supporting Windows? Without using Windows PowerShell. Thanks,; João",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933:129,Power,PowerShell,129,https://psicode.org,https://github.com/psi4/psi4/issues/933,1,['Power'],['PowerShell']
Energy Efficiency,"I have fixed the code that connects the initial, separated fragments in; optking. The CH3F case now runs fine. The code was very much in error. I; will submit the correction whenever the main psi4 trunk runs again. At the; moment, the python there seems broken. On Sun, Mar 13, 2016 at 2:52 PM, Rollin King rking@bethel.edu wrote:. > The current code detected 4 different fragments for the extended CH3F.; > Then it tried to connect them. It really should have been able to do so.; > I don't see why it didn't work, and I'm looking for a bug.; > ; > On Sun, Mar 13, 2016 at 2:00 PM, Lori A. Burns notifications@github.com; > wrote:; > ; > > Certainly the flexibility of the optimizer oughtn't be reduced. In the; > > absence of fixed/frozen keywords or user supplied/edited intco (do you need; > > a keyword to signal do-read-intco instead of accepting any it finds?), it's; > > probably reasonable to assume a full optimization is desired. Maybe grep; > > '~' needs to catch a gradient.rms(), too, next to the optking-active rms; > > gradient.; > > ; > > —; > > Reply to this email directly or view it on GitHub; > > https://github.com/psi4/psi4/issues/310#issuecomment-196021110.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/310#issuecomment-196087369:696,reduce,reduced,696,https://psicode.org,https://github.com/psi4/psi4/issues/310#issuecomment-196087369,1,['reduce'],['reduced']
Energy Efficiency,"I have recently noticed a weird problem for a handful of Psi4 output. Psi4 occasionally terminates the output file with two consecutive ""Buy a developer a beer!"" statements as you can see here:. ```; Psi4 stopped on: Sunday, 12 August 2018 05:55PM; Psi4 wall time for execution: 0:00:50.18. *** Psi4 exiting successfully. Buy a developer a beer!; ecution: 0:00:50.91. *** Psi4 exiting successfully. Buy a developer a beer!; ```. The worst output was that one time I got two summaries for CBS energies at the end of the file, and the results were different. ```; ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Energy [Eh] Scheme; ---------------------------------------------------------------------------------------------------------; scf hf / aug-cc-pvqz -1007.18544968 xtpl_highest_1; corl mp2 / aug-cc-pv[tq]z -3.93422466 corl_xtpl_helgaker_2; delta fno-ccsd(t) - mp2 / aug-cc-pvdz -0.15577370 xtpl_highest_1; total CBS -1011.27544804; ---------------------------------------------------------------------------------------------------------; => Loading Basis Set <=. Name: DEF2-SVP; Role: ORBITAL; Keyword: BASIS; atoms 1, 3, 5, 13, 15, 17 entry N line 110 file /theoryfs2/ds/cdsgroup/psi4-install/psi4-group-multiarch-c12/share/psi4/basis/def2-svp.gbs; atoms 2, 4, 6, 14, 16, 18 entry C line 90 file /theoryfs2/ds/cdsgroup/psi4-install/psi4-group-multiarch-c12/share/psi4/basis/def2-svp.gbs; atoms 7, 9, 11, 19, 21, 23 entry O line 130 file /theoryfs2/ds/cdsgroup/psi4-install/psi4-group-multiarch-c12/share/psi4/basis/def2-svp.gbs; atoms 8, 10, 12, 20, 22, 24 entry H line 15 file /theoryfs2/ds/cdsgroup/psi4-install/psi4-group-multiarch-c12/share/psi4/basis/def2-svp.gbs. Psi4 stopped on: Tuesday, 18 September 2018 03:03PM; Psi4 wall time for execution: 1 day, 4:22:27.10. *** Psi4 exiting successfully. Buy a developer a beer!; ----------------------------------------------------------------------------------",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1279:690,Energy,Energy,690,https://psicode.org,https://github.com/psi4/psi4/issues/1279,1,['Energy'],['Energy']
Energy Efficiency,"I have retested this atop a Libint2-based branch, and all's well. cores | old, no charges | old, with charges | PR, no charges | PR, with charges; ---- | ---- | ---- | ---- | ----; 1 | 344 | 600 | 351 | 479; 6 | 117 | 386 | 114 | 160. ```; memory 20 gb. molecule {; 0 1; N 0.9350155 -0.0279801 -0.3788916; C 1.6739638 -0.0357766 0.7424316; C 3.0747955 -0.0094480 0.5994562; C 3.5646109 0.0195446 -0.7059872; N 2.8531510 0.0258031 -1.8409596; C 1.5490760 0.0012569 -1.5808009; N 4.0885824 -0.0054429 1.5289786; C 5.1829921 0.0253971 0.7872176; N 4.9294871 0.0412404 -0.5567274; N 1.0716177 -0.0765366 1.9391390; H 0.8794435 0.0050260 -2.4315709; H 6.1882591 0.0375542 1.1738824; H 5.6035368 0.0648755 -1.3036811; H 0.0586915 -0.0423765 2.0039181; H 1.6443796 -0.0347395 2.7619159; --; 0 1; N -3.9211729 -0.0009646 -1.5163659; C -4.6136833 0.0169051 -0.3336520; C -3.9917387 0.0219348 0.8663338; C -2.5361367 0.0074651 0.8766724; N -1.9256484 -0.0110593 -0.3638948; C -2.5395897 -0.0149474 -1.5962357; C -4.7106131 0.0413373 2.1738637; O -1.8674730 0.0112093 1.9120833; O -1.9416783 -0.0291878 -2.6573783; H -4.4017172 -0.0036078 -2.4004924; H -0.8838255 -0.0216168 -0.3784269; H -5.6909220 0.0269347 -0.4227183; H -4.4439282 -0.8302573 2.7695655; H -4.4267056 0.9186178 2.7530256; H -5.7883971 0.0505530 2.0247280; units angstrom; }. Chrgfield = QMMM(). for i in range(25):; for j in range(25):; Chrgfield.extern.addCharge(-0.834, i * 3.0 + 1.649232019048, 0.0, j * 3.0 + -2.356023604706); Chrgfield.extern.addCharge( 0.417, i * 3.0 + 0.544757019107, 0.0, j * 3.0 + -3.799961446760); Chrgfield.extern.addCharge( 0.417, i * 3.0 + 0.544757019107, 0.0, j * 3.0 + -0.912085762652). psi4.set_global_option_python('EXTERN', Chrgfield.extern). energy(""sapt0/jun-cc-pvdz""); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1946#issuecomment-765017796:82,charge,charges,82,https://psicode.org,https://github.com/psi4/psi4/pull/1946#issuecomment-765017796,5,"['charge', 'energy']","['charges', 'energy']"
Energy Efficiency,"I have seen folks try the following several times:. ```; e, wfn = energy('MP2', return_wfn=True); oeprop(wfn); ```. which will return the HF properties as MP2 densities are costly to compute, the same is true with CCSD and others. To help alleviate confusion I would add a few lines [here](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/oeprop.cc#L866) in the OEProp compute call that would highlight the name of the density matrix. A line like the following could be appropriate:. ```; if (title_ == """"){; outfile->Printf(""OEProp: No title given, name of density matrix used for the following properties is %s\n"", Da_so_->name().c_str());; }; ```. This should give folks some hint that things may not be as they appear.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1055:66,energy,energy,66,https://psicode.org,https://github.com/psi4/psi4/issues/1055,1,['energy'],['energy']
Energy Efficiency,"I have seen the same result in both v1.7 and v1.9. Below is my input:. ```; molecule {; C 43.447574615 4.402106285 18.442501068; Cl 43.539905548 3.305690527 19.834751129; H 43.777095795 3.891677380 17.581066132; H 42.397209167 4.711723328 18.365312576; H 44.039062500 5.304682255 18.653499603; Na 43.090690613 5.591814041 21.935888290; 1 1; }; set print 2; set basis def2-TZVPPD; set gradient_write on; G, wfn = gradient(""WB97M-D3BJ"", return_wfn=True); wfn.energy(); wfn.gradient().print_out(); ```. Output:; [psi 1.7](https://github.com/psi4/psi4/files/15100254/dimer_0001.txt); [psi 1.9](https://github.com/psi4/psi4/files/15100255/test.txt). Output gradient:. ```; -Total Gradient:; Atom X Y Z; ------ ----------------- ----------------- -----------------; 1 0.017612153536 -0.030226835448 -0.016364611072; 2 -0.001951550496 0.000510350455 -0.012196966883; 3 -0.006845878529 0.008632172968 0.016317898785; 4 -0.007830360016 0.005006082123 0.005314350686; 5 -0.000151463183 0.010716793785 0.004937148905; 6 -0.000804674189 0.005151834777 0.001952651442; ```. The total gradient of the geometry is (in Hatree/Bohr):. ```; 0.000028227123 -0.00020960134 -0.000039528137; ```. This seems quite large! When converted to kcal/mol/A, it's almost 0.25 kcal/mol/A. I am training a machine learning potential, which needs data in high accuracy. To find the source, I set `set print 2`, and found the source is XC Gradient. Other parts are good. ```; -XC Gradient: ; Atom X Y Z ; ------ ----------------- ----------------- ----------------- ; 1 0.023413713156 -0.034618654043 0.016561407807 ; 2 0.004295152287 -0.082574073389 0.110502690803 ; 3 0.057058934205 -0.084984859487 -0.155578605215 ; 4 -0.165454990449 0.054800035457 -0.007744542989 ; 5 0.081560548449 0.141475784522 0.033034928588 ; 6 -0.000845130524 0.005692165589 0.003184592861 ; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3161:457,energy,energy,457,https://psicode.org,https://github.com/psi4/psi4/issues/3161,1,['energy'],['energy']
Energy Efficiency,"I have seen this before (for this exact system) - the SAD guess converges; to the correct root, but Core does not. Not really much more to it than; that. -Rob. On Wed, Jan 13, 2016 at 11:33 PM, Roberto Di Remigio <; notifications@github.com> wrote:. > Choosing a SAD or a core guess for an UHF/cc-pVDZ calculation on H2O+; > gives very different energies.; > The following input with the core guess gives a total energy of; > -75.5488580481183476; > ; > memory 250 mb; > molecule h2o {; > symmetry c1; > 1 2; > O 0.0000000000 0.0000000000 -0.2249058930; > H 1.4523499293 0.0000000000 0.8996235720; > H -1.4523499293 0.0000000000 0.8996235720; > units bohr; > no_reorient; > no_com; > }; > ; > set {; > basis cc-pVDZ; > scf_type direct; > guess core; > reference uhf; > e_convergence 7; > d_convergence 7; > }; > ; > energy_scf1 = energy('scf'); > ; > while this input with the SAD guess gives a total energy of; > -75.6330881795159655; > ; > memory 250 mb; > molecule h2o {; > symmetry c1; > 1 2; > O 0.0000000000 0.0000000000 -0.2249058930; > H 1.4523499293 0.0000000000 0.8996235720; > H -1.4523499293 0.0000000000 0.8996235720; > units bohr; > no_reorient; > no_com; > }; > ; > set {; > basis cc-pVDZ; > scf_type direct; > guess sad; > reference uhf; > e_convergence 7; > d_convergence 7; > }; > ; > energy_scf1 = energy('scf'); > ; > Of course, the initial guess has always a huge impact on the calculation,; > but is the reported difference reasonable for a system as small as H2O+?; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/211.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/211#issuecomment-171564200:413,energy,energy,413,https://psicode.org,https://github.com/psi4/psi4/issues/211#issuecomment-171564200,4,['energy'],['energy']
Energy Efficiency,"I have situations where I want to manually specify the number of frozen core orbitals using `num_frozen_docc`, do some work, then calculate some MBIS properties including the volume ratios. The latter causes psi4 to automatically calculate the free-atom volumes in the same method as the last-run calculation (in my case, `wb97m-d3bj`) and inherits all the settings... including `num_frozen_docc`. I can insert a `set num_frozen_docc 0; set freeze_core true` right before the `oeprop(wfn, 'MULLIKEN_CHARGES')` call and make things go away, but what worries me is just _how_ things fail. Well, sometimes things are in fact _perfectly fine_. Other times, psi4 **segfaults**. The behavior depends on _just how large_ `num_frozen_docc` is -- I think if it ends up exceeding some other quality dependent on the calculation, things go belly-up. Here's the relevant line from a coredump. ```; #0 0x00002b4f362ef958 in psi::scf::HF::compute_fcpi (this=0x223c06c0) at [snip]/psi4/psi4/src/psi4/libscf_solver/hf.cc:830; 830 for (int i = 0; i < nfzc; ++i) frzcpi_[pairs[i].second]++;; ```. And here's a minimum working example of the issue that MBIS_VOLUME_RATIOS runs into, as a standalone calc:. ```; set num_frozen_docc 20; set basis def2-tzvppd; set reference uks; molecule mol {; 0 2; H 0 0 0; units angstrom; }; E, wf = energy('wb97m-d3bj',return_wfn=True,); ```. If you flip `num_frozen_docc` to 18, _it works_. (19 works for me on some machines, not on others -- eek!). In all cases I'm invoking psi4 the same way: `psi4 -n1 -i run.in --memory 500MB`. . I'm building off of 1.6.X, using icc/2020.2-108-02c7; I don't _think_ I have anything ""special"" set in my compile environment besides `buildtype=RelWithDebInfo`. I didn't mess with any optimization flags, for sure.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2631:1315,energy,energy,1315,https://psicode.org,https://github.com/psi4/psi4/issues/2631,1,['energy'],['energy']
Energy Efficiency,"I have tried to run the following input:. molecule no3 {; 0 2; N -0.000000289178 0.000000000000 -0.107371527464; O 0.000000787144 0.000000000000 1.265621161075; O 1.089067344013 0.000000000000 -0.585809671624; O -1.089067877991 0.000000000000 -0.585810897335; symmetry c1; }. set globals {; basis cc-pvtz; #df_basis_scf cc-pvtz-jkfit; #df_basis_cc cc-pvtz-ri; reference uhf; scf_type df; guess gwh; e_convergence 8; d_convergence 6; mo_maxiter 400; cepa_type df; qc_module occ; }; energy('cepa(0)'). Then, I get the following error:. PsiException: Error: cepa(0) requires ""reference rhf"". An error has occurred Py-side; Traceback:; <class 'p4xcpt.ValidationError'>: Error: cepa(0) requires ""reference rhf"".: File ""<string>"", line 37, in <module>. File ""/usr/local/programs/psi4intel/share/psi/python/driver.py"", line 629, in energy; procedures['energy'][lowername](lowername, **kwargs). File ""/usr/local/programs/psi4intel/share/psi/python/proc.py"", line 3783, in run_cepa; raise ValidationError(""Error: %s requires \""reference rhf\""."" % lowername). Something should be wrong in proc.py or I missed something. @loriab",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/273:481,energy,energy,481,https://psicode.org,https://github.com/psi4/psi4/issues/273,3,['energy'],['energy']
Energy Efficiency,"I have two versions of Psi4: one compiled with the Intel compiler (18.0.1 20171018) and linked with MKL, the other compiled with GCC 6.4.0 and linked with system BLAS/LAPACK. Both versions use Python 3.6.4. The following input script to run MRCC through Psi4 runs fine with both:; ```python; import psi4. psi4.set_output_file('uhf_example_mrcc_h2o.dat', False); psi4.set_num_threads(1). R_ref = 0.96735; theta_ref = 102.799. mol_string = """"""; symmetry c2v; 0 1; O; H 1 {R}; H 1 {R} 2 {theta}; units angstrom; """""". basis = 'jun-cc-pVDZ'; mol = psi4.geometry(mol_string.format(R=2.0*R_ref, theta=theta_ref), name='h2o'); molname = mol.name(); psi4.set_options({; 'SCF_TYPE': 'PK',; 'BASIS': basis,; 'E_CONVERGENCE': 1e-09,; 'D_CONVERGENCE': 1e-09,; 'REFERENCE': 'UHF',; 'STABILITY_ANALYSIS': 'FOLLOW'; }); scf_e, scf_wfn = psi4.energy('scf', molecule=mol, return_wfn=True); e_psi4 = psi4.energy('ccsd', ref_wfn=scf_wfn); e_mrcc = psi4.energy('mrccsd', ref_wfn=scf_wfn, keep=True); print('CCSD from Psi4 {:20.12f}, CCSD from MRCC {:20.12f}'.format(e_psi4, e_mrcc)); psi4.core.clean_options(); psi4.core.clean(); ```. However, when setting a higher number of threads only the GCC-compiled version runs fine. The Intel version hangs right after emitting the input files for MRCC, _e.g._ after the call to [`mrcc_generate_input`](https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/proc.py#L3734) This function is bound to Python in [`core.cc`](https://github.com/psi4/psi4/blob/master/psi4/src/core.cc#L299-L302) and defined in [`mrcc.cc`](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/mrcc/mrcc.cc#L677-L1003). The last sign of activity from the Intel-compiled version is the printing of the timer (invoked by the `tstop()` before `return Success` in the function in `mrcc.cc`), if I put a print statement in `proc.py` right after, nothing happens, as if the function never returns. Ideas on how to debug?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1132:826,energy,energy,826,https://psicode.org,https://github.com/psi4/psi4/issues/1132,3,['energy'],['energy']
Energy Efficiency,"I just made a fool of myself on the GAMESS-US forum by thinking there was a basis set issue in a calculation, since I couldn't reproduce the energy with Psi4. The problem is the following: if I input a wrong format, e.g.; ```; H 0; S 3 1.0; 1 3.386500000000E+01 2.549380000000E-02; 2 5.094790000000E+00 1.903730000000E-01; 3 1.158790000000E+00 8.521610000000E-01; S 1 1.0; 1 3.258400000000E-01 1.000000000000E+00; S 1 1.0; 1 1.027410000000E-01 1.000000000000E+00; P 1 1.0; 1 1.500000000000E+00 1.000000000000E+00; P 1 1.0; 1 3.750000000000E-01 1.000000000000E+00; ****; ```; this flies through Psi4; it does not check whether the basis set format is correct. Obviously, here it is not since there is an additional enumeration in every entry.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2253:141,energy,energy,141,https://psicode.org,https://github.com/psi4/psi4/issues/2253,1,['energy'],['energy']
Energy Efficiency,"I just refactored my code to reduce code duplicity (Ran all C-Tests, still passed). I changed the build_JK function by adding two boolean switches that determine whether to build J and/or K. So the function header is now; `build_JK(ints, D, J, K, do_J, do_K)`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2359#issuecomment-977378952:29,reduce,reduce,29,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-977378952,1,['reduce'],['reduce']
Energy Efficiency,"I just removed opt10 from all ctest labels. Its still present, but will not run unless you specifically request it. It looks like the reference opt10 ran in about 45 minutes on 8 threads. @psi-rking If you are just testing angular dependancies can you reduce this to something like 6-31G?. Edit: Whoops, misread timing data. > On Feb 15, 2016, at 9:27 AM, Justin Turney notifications@github.com wrote:; > ; > Yeah, we should have that mechanism to leave it as a longertest. Maybe that's what @dgasmith https://github.com/dgasmith has already done.; > ; > —; > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4/issues/253#issuecomment-184228286.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/253#issuecomment-184233000:252,reduce,reduce,252,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-184233000,1,['reduce'],['reduce']
Energy Efficiency,"I keep hearing about this ""problem"" also elsewhere, but the fact is that the regular grid for cube files is ill fitted for integrating the density of steep regions (e.g. at the nuclei). ; python-based integrator for testing: https://gist.github.com/hokru/71c61f5afb2e5921b5b4955fed70f5db. cubes were made for visualization not for further analysis, iirc. Does chargemol only work with cube files?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1311#issuecomment-433074513:360,charge,chargemol,360,https://psicode.org,https://github.com/psi4/psi4/issues/1311#issuecomment-433074513,1,['charge'],['chargemol']
Energy Efficiency,"I know next to nothing about nbody, I just did a quick keyword search to see if there is anything optking could set and didn't find anything. I'll also confess to not entirely following the thread so this could be completely unhelpful. optking gave up all non schema communication so in order for us to ""easily"" set `return_total_data` it would either need to be:. 1. A keyword we / the user can set in an `AtomicInput`; 2. An optional parameter in `psi4.run_qcschema()` - optking would likely force the user to use the `optking -> psi4` path instead of the `optking -> qcengine -> psi4` path to make sure this gets set correctly. Otherwise optking would either need to:; 1. go back to making gradient calls directly - at least if needed; 2. Make the user go through `psi4.optimize()` where `gradient(..., bsse_type=[args])` might get called explicitly - I don't know what is envisioned for this. I would hope a user would figure out that the energy is several orders of magnitude off, but regardless of the solution, the optimizer could certainly do a sanity check of the energy after the first step. I don't think an IE is ever going to be large enough to be mistaken for the total electronic energy. Optking could check the magnitude of the energy, direct the user to the correct way of performing the optimization and quit so as not to waste computer time.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1691#issuecomment-870050704:943,energy,energy,943,https://psicode.org,https://github.com/psi4/psi4/issues/1691#issuecomment-870050704,4,['energy'],['energy']
Energy Efficiency,"I leave most of the environment variable stuff for PSI4 in the hands of conda. I have a modified/compiled version of PSI4 on just one of my machines, but PSI4 crashes on all of them for one electron properties. I saw the crash while I was running a testing script, so I know that it printed correct results for HF, PBE0, gradient, and PBE0+point-charges calculations. The only test of mine that failed involved recovering charges from a QM calculation. ```; [input file]. set_num_threads(8); memory 256 mb; set reference rhf; set basis 6-31G*; set guess sad; set scf_type df. psi4_io.set_specific_path(32,'./'); psi4_io.set_specific_retention(32,True); psi4_io.set_specific_path(180,'./'); psi4_io.set_specific_retention(180,True). molecule LICHM_0 {; 0 1; O 0.87273600000000 0.00000000000000 -1.2467539999999; H 0.28827300000000 0.00000000000000 -2.0108530000000; H 0.28827300000000 0.00000000000000 -0.4826550000000; symmetry c1; no_reorient; no_com; }. Chrgfield = QMMM(); Chrgfield.extern.addCharge(-1.3062266666666,-0.6489658001839,0.00000001660701,1.10730418839000); Chrgfield.extern.addCharge(0.35180666666666,-0.7534241883900,-0.0000000536004,1.26252019981607); Chrgfield.extern.addCharge(0.86636000000000,-0.7788030060160,0.13229430272998,1.13268305579077); Chrgfield.extern.addCharge(-1.3062266666666,-0.9086401998160,-0.0000000166070,1.15806181160999); Chrgfield.extern.addCharge(0.10176666666666,-0.8041818116099,0.00000005360047,1.00284580018392); Chrgfield.extern.addCharge(0.86636000000000,-0.7788029939839,-0.1322943027299,1.13268294420922); Chrgfield.extern.addCharge(0.51284666666666,-0.7965191998160,0.76409898339298,1.73166981160999); Chrgfield.extern.addCharge(-1.7440911751517,-0.6778443974775,0.64528811991560,1.64918444879139); Chrgfield.extern.addCharge(0.85696271562354,-0.6894742127334,0.82228626070531,1.58968679653742); Chrgfield.extern.addCharge(0.51284666666666,-0.5368448001839,0.76409901660701,1.68091218839000); Chrgfield.extern.addCharge(-0.5989622639259,-0.65551960",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/240#issuecomment-182660528:346,charge,charges,346,https://psicode.org,https://github.com/psi4/psi4/issues/240#issuecomment-182660528,2,['charge'],['charges']
Energy Efficiency,"I looked into this yesterday. On my laptop when I disable DKH, I still obtain a large total energy difference:. ```; @ROHF Final Energy: -1262.91530042362160; @ROHF Final Energy: -1259.00365041946634; ```. I emailed one of the issue reporters directly and waiting to hear a response. At least with my compilation (master/debug) it doesn't appear to be a DKH issue.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/899#issuecomment-360224837:92,energy,energy,92,https://psicode.org,https://github.com/psi4/psi4/issues/899#issuecomment-360224837,3,"['Energy', 'energy']","['Energy', 'energy']"
Energy Efficiency,"I made a little progress and briefly want to summarise` briefly:. - `ADC(2)` is denoted as `adc` inside the Psi4 source code. This does not really make sense to me, since there are now plenty of more ADC methods, so I renamed it to `adc(2)`. `adc` now no longer exists as a method.; - I'm a bit confused about the `mtd_type`. If I get it right, neither the builtin (nor adcc) supports anything but `CONV`(entional) ERIs. But I might be wrong about the builtin code. I copied the value from `MP_TYPE`, since after all the energies returned by the `energy(adcN)` calls are `MP(N)` energies (ADC(n) is constructed for excited states building on top of an MP(n) ground state)). Still, one could introduce `ADC_TYPE` ... you're call.; - I have not registered `run_adcc` for MP(2) and MP(3), but I could because we can compute these energies (and a few properties), too. Not sure that's worth the effort, however.; - For determining frozen core and frozen virtual orbital count I used `Wavefunction.frzcpi` and `Wavefunction.frzvpi`, but it feels a bit strange to do it this way. Is there a better method?; - I added quite a couple of extra options. Is the only way to register them, to add them to the `C++` `read_options.cc`?; - adcc prints by default to `sys.stdout`, but can be easily redirected such that all output goes to another python stream. Psi4 wants to print via `core.print_out`, which takes only a string, so I'm forced to redirect a python stream to a text string. That could become messy unless there's a better option on the Psi4 end. Again thanks for your help :smile:",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1744#issuecomment-548144326:547,energy,energy,547,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-548144326,1,['energy'],['energy']
Energy Efficiency,"I made a pass at the docs, very minimal. Not sure how extensive it should be. @maxscheurer the pe-tdscf test for RHF does not pass on my mac with cppe via pip. Excitation energy number 3 is off, rest is fine. No idea why, right now. ```; !----------------------------------------------------------------------------------!; ! !; ! PE OSCILLATOR STRENGTH: computed value does not match to atol=1e-05. !; ! Expected: !; ! [0.000004406911 0.000089321058 0.432081257 0.113168661 0.0190262828 ] !; ! Observed: !; ! [0.000004444431 0.000089181257 0.432105919683 0.113174232326 0.019027243438] !; ! Difference (passed elements are zeroed): !; ! [0.000000000000e+00 0.000000000000e+00 2.466268274193e-05 0.000000000000e+00 !; ! 0.000000000000e+00] !; ! !; !----------------------------------------------------------------------------------!; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2006#issuecomment-694478253:171,energy,energy,171,https://psicode.org,https://github.com/psi4/psi4/pull/2006#issuecomment-694478253,1,['energy'],['energy']
Energy Efficiency,"I may be doing something wrong, but the outputs I get seems unexpected. When running the following example with or without point charge, the same energy is computed:. ```; # Simple example to test QMMM charges. molecule {; 0 1; He 0.0 0.0 0.0; symmetry c1; }. Chrgfield = QMMM(); Chrgfield.extern.addCharge(0.0,0.0,5.0,-1.0); psi4.set_global_option_python('EXTERN', Chrgfield.extern). set {; basis aug-cc-pvtz; }. energy('scf'); ```. Either with or without, the energy is: -2.8612063084748378 Hartree. ```; grep ""Total Energy ="" *.out; with.out: Total Energy = -2.8612063084748378; without.out: Total Energy = -2.8612063084748378; ```. Full in and outputs are attached: [qmmm_test.zip](https://github.com/psi4/psi4/files/3884810/qmmm_test.zip) These are based on the documentation here: http://www.psicode.org/psi4manual/1.2/scf.html#external-potentials-and-qm-mm",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1757:129,charge,charge,129,https://psicode.org,https://github.com/psi4/psi4/issues/1757,8,"['Energy', 'charge', 'energy']","['Energy', 'charge', 'charges', 'energy']"
Energy Efficiency,"I mean, a correlation coefficient of 0.62 is ridiculous. The calculations really should be nearly identical. Are you sure the molecular charges and multiplicities are set correctly?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2351#issuecomment-968768906:136,charge,charges,136,https://psicode.org,https://github.com/psi4/psi4/issues/2351#issuecomment-968768906,1,['charge'],['charges']
Energy Efficiency,I noticed that sapt8 test case is broken (no idea if it's because of me or not). It has 0.0 stored in `SAPT IND ENERGY` Psivar instead of the actual uncoupled value. I tried to modify sapt_util.py to make it compute the uncoupled induction energy for `SAPT IND ENERGY`but that did not fix the test case. I don't see where else `SAPT IND ENERGY` is set. Are the uncoupled energy values even available to sapt_util.py ?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/908#issuecomment-364643141:112,ENERGY,ENERGY,112,https://psicode.org,https://github.com/psi4/psi4/pull/908#issuecomment-364643141,5,"['ENERGY', 'energy']","['ENERGY', 'energy']"
Energy Efficiency,"I noticed that the code for the nonapproximated E(20)exch-disp saves its final result in `variable('sapt exch-disp20(s^inf) energy')` as it should, but never actually prints the result to the output file. For example, when I run the test in `tests/sapt-exch-disp-inf`, the comparison of values with the reference passes, but I never learn from the output what the actual result is. The simple fix is to change the do_print option to True [when the nonapproximated E(20)exch-disp code is called.](https://github.com/psi4/psi4/blob/3d2403c43e2cf8df699ff6e382a4ae2e3a0a5faa/psi4/driver/procrouting/sapt/sapt_mp2_terms.py#L282). I can make this fix myself - look out for a simple PR.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2317:124,energy,energy,124,https://psicode.org,https://github.com/psi4/psi4/issues/2317,1,['energy'],['energy']
Energy Efficiency,"I overlooked this when previously checking the documentation. The CI/MCSCF example from the following page does not work: http://www.psicode.org/psi4manual/1.3/molden.html. A minor issue is that `'ci'` is not a valid method. The second problem is that the `wfn.opdm` method should be replaced by `wfn.get_opdm`. (A useful example can be found in the source tree: `tests/molden2/input.dat`). I believe this is a correct example, but it would be nice if someone more familiar with the CI code could confirm and explain a few questions below. (I would be happy to make a PR with updated documentation.). ```; molecule {; 0 1; H 0.0 0.0 0.0; H 0.0 0.0 1.0; }. set basis cc-pVTZ; set opdm true. E, wfn = energy('fci', return_wfn=True); molden(wfn, 'no_root1.molden', density_a=wfn.get_opdm(0, 0, ""A"", True)); ```. Main questions:; - Is this example correct? It runs and seems to give sensible results.; - Which levels of theory (other than FCI and CASSCF) can be used? (CISD gives an error: `AttributeError: 'psi4.core.Wavefunction' object has no attribute 'get_opdm'`.); - How can one use the first two arguments to `get_opdm`? They are documented here in the source code: https://github.com/psi4/psi4/blob/880f87f5b2765ed00efaf6dd63c406b574c40157/psi4/src/psi4/detci/ciwave.h#L141 but setting anything else than `0, 0` for the first two arguments does not work: `Fatal Error: CIWavefunction::get_opdm: Requested OPDM was not formed!` I tried to add `set tdm true`, but this had no effect. (Also, I guess writing out a transition density matrix to a Molden file makes little sense.); - When the last argument is `True`, does this mean the frozen-core is included in the density matrix?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1638:699,energy,energy,699,https://psicode.org,https://github.com/psi4/psi4/issues/1638,1,['energy'],['energy']
Energy Efficiency,"I ran `sapt1` on an s390x box now and compared the output to `output.ref` and one thing is weird:. ```; - Geometry (in Bohr), charge = 0, multiplicity = 1:; + Geometry (in Bohr), charge = 0, multiplicity = 2:; ```. Nothing else much stands out besides `output.ref` being from an older version so having some other strings here and there. When SAPT would start. ```; - SAPT0 ; - Ed Hohenstein; - 6 June 2009; ```; I immediately get the backtrace:; ```; +Traceback (most recent call last):; + File ""/usr/bin/psi4"", line 269, in <module>; + exec(content); + File ""<string>"", line 53, in <module>; + File ""/usr/lib/s390x-linux-gnu/psi4/driver/driver.py"", line 492, in energy; + wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); + File ""/usr/lib/s390x-linux-gnu/psi4/driver/procrouting/proc.py"", line 3438, in run_sapt; + e_sapt = core.sapt(dimer_wfn, monomerA_wfn, monomerB_wfn); +; +RuntimeError: ; +Fatal Error: Laplace Quadrature requested for (E_HUMO - E_LOMO)/(E_LUMO-E_HOMO) > 7.0 * 10^12, quadratures are not designed for this range.; ```. I checked and adding `DENOMINATOR_ALGORITHM CHOLESKY` to `input.dat` makes the test pass:. ```; Nuclear Repulsion Energy..........................................PASSED; SAPT0 Eelst.......................................................PASSED; SAPT0 Eexch.......................................................PASSED; SAPT0 Eind........................................................PASSED; SAPT0 Edisp.......................................................PASSED; SAPT0 Etotal......................................................PASSED; ```. I'll try to step through the code first before I start recompiling with the patches you suggested.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1462#issuecomment-451695207:126,charge,charge,126,https://psicode.org,https://github.com/psi4/psi4/issues/1462#issuecomment-451695207,5,"['Energy', 'charge', 'energy']","['Energy', 'charge', 'energy']"
Energy Efficiency,"I really like @dgasmith's proposal for dictionary passing of options, i.e.,. ``` python; opt = {'SCF_TYPE':'DF', ...}; psi4.energy('scf', molecule=mol, options=opt); ```. I think this really supports the interactive Psi4 that has only been possible post-inversion, which folks (including myself) will be excited about. I like scheme 1 for the same reason -- conceivably, you could have . ``` python; scf_opt1 = {'SCF_TYPE':'DF'}; scf_opt2 = {'SCF_TYPE':'DF','DIIS_MAX_VECS':8}. psi4.energy('scf', molecule=mol, options=scf_opt, module_options={'SCF':scf_opt1}); ```. where even the `module_options` could be interchanged.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/511#issuecomment-259857520:124,energy,energy,124,https://psicode.org,https://github.com/psi4/psi4/pull/511#issuecomment-259857520,2,['energy'],['energy']
Energy Efficiency,"I recall that the restriction arises from an assumption I made about storage requirements. I think I was assuming that o^4 and o^3v arrays could be stored in a block of memory the size of t2, but I can’t be sure without looking through the code a bit. I’m not sure how difficult it would be to remove this restriction, but I will look into it. > On Oct 25, 2017, at 3:44 PM, David Sherrill <notifications@github.com> wrote:; > ; > Well, yes, he relative sizes would effect efficiency of contraction order,; > but I don't see why they would make the code not working at all... I; > suppose this restriction is in there somewhere but I don't see why.; > ; > On Oct 25, 2017 3:40 PM, ""Susi Lehtola"" <notifications@github.com> wrote:; > ; > @CDSherrill <https://github.com/cdsherrill> @edeprince3; > <https://github.com/edeprince3> could it be that that nvirt > ndocc is an; > assumption that's made in the contraction order? If nvirt < ndocc then it; > might be more efficient to contract first over the occupied orbitals?; > ; > —; > You are receiving this because you were mentioned.; > ; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/828#issuecomment-339447402>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AC9Qdui004ARGwSkbS7HK_Zd_43SDnHZks5sv466gaJpZM4QGSFE>; > .; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub <https://github.com/psi4/psi4/issues/828#issuecomment-339448378>, or mute the thread <https://github.com/notifications/unsubscribe-auth/AClSGmYfMcECV7ZQzR0tDtg_pRqgv-OTks5sv4-MgaJpZM4QGSFE>.; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/828#issuecomment-339458114:964,efficient,efficient,964,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339458114,1,['efficient'],['efficient']
Energy Efficiency,"I recently found an issue when using DETCI to compute roots of LiCN with CIS/6-31G*, which may have uncovered some deeper problems. the main issue: the lowest-energy solution as predicted by GAMESS (and my own code, which diagonalizes the Hamiltonian by simply calling `np.linalg.eigh`) is completely skipped by Psi4, despite the following roots being the same. GAMESS predicts the following first six excited state energies (the RHF energy matching to 6 decimals):; ```; GAMESS LiCN/6-31G*; CONVERGED STATE 1 ENERGY= -99.5348374214; CONVERGED STATE 2 ENERGY= -99.5315000308; CONVERGED STATE 3 ENERGY= -99.5315000308; CONVERGED STATE 4 ENERGY= -99.5258078193; CONVERGED STATE 5 ENERGY= -99.5258078193; CONVERGED STATE 6 ENERGY= -99.5095744807; ```; while Psi4 predicts:; ```; Psi4 LiCN/6-31G* (symmetry c1, default [Davidson] solver); CI ROOT 1 TOTAL ENERGY:-99.5315015582624; CI ROOT 2 TOTAL ENERGY:-99.53150155297872; CI ROOT 3 TOTAL ENERGY:-99.52581092386518; CI ROOT 4 TOTAL ENERGY:-99.52581092379563; CI ROOT 5 TOTAL ENERGY:-99.5096013650753; CI ROOT 6 TOTAL ENERGY:-99.48378441050741; ````; this result doesn't change with or without frozen core, but the results are fine with STO-3G, as well as water with 6-31G*. the results also match GAMESS if I perturb the linear geometry of LiCN, as suggested by @psi-rking , which suggests maybe an issue with finding roots of whatever symmetry the first excited state is; however, adding more roots (or running with/without symmetry) doesn't resolve the issue. in fact, running in `c2v` produces different energies, but they don't match GAMESS or the `symmetry c1` case:; ```; Psi4 LiCN/6-31G* (symmetry c2v, default [Davidson] solver); CI ROOT 1 TOTAL ENERGY:-99.52581092382692; CI ROOT 2 TOTAL ENERGY:-99.50960136455492; CI ROOT 3 TOTAL ENERGY:-99.47046293582866; CI ROOT 4 TOTAL ENERGY:-99.43820506440449; CI ROOT 5 TOTAL ENERGY:-99.39012366739456; CI ROOT 6 TOTAL ENERGY:-99.37979350854745; ```; maybe it's a preconditioner issue? the Davidson seems",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3083:159,energy,energy,159,https://psicode.org,https://github.com/psi4/psi4/issues/3083,12,"['ENERGY', 'energy']","['ENERGY', 'energy']"
Energy Efficiency,"I reduced the active space of the `dmrg-caspt2-n2` testcase (see http://anonscm.debian.org/viewvc/debichem/unstable/psi4/debian/patches/relax_dmrg_caspt2_test.patch?view=markup), and (now?) some architectures show slightly different results, e.g. powerpc:. ```; DMRG-SCF Energy...................................................PASSED; DMRG-CASPT2 Energy: computed value (-107.5036885) does not match (-107.5036855) to 6 decimal places.; ```. See https://buildd.debian.org/status/fetch.php?pkg=psi4&arch=powerpc&ver=1%3A1.0~rc-2&stamp=1464563141 for the full log. This also happened on arm64, i386 (x86-32) and ppc64. The differences are quite small, but mentioning here nevertheless.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/384#issuecomment-222506368:2,reduce,reduced,2,https://psicode.org,https://github.com/psi4/psi4/issues/384#issuecomment-222506368,5,"['Energy', 'power', 'reduce']","['Energy', 'powerpc', 'reduced']"
Energy Efficiency,"I see memory usage significantly above `psi4.set_memory()` limit. I do see the note in the documentation that memory usage might be _slightly_ higher, but if I even request within 20% of a node's total memory (requesting 300 out of ~376 GB), I risk crashing the entire node. Even now, running with `psi4.set_memory(""200 GB"")`, I see persistent VIRT usage of 259 GB and RES 256 GB. I know that determining the _actual_ amount of [memory consumed by a process is tricky](https://stackoverflow.com/questions/131303/how-to-measure-actual-memory-usage-of-an-application-or-process), but this is important to me to prevent the scheduler from killing my jobs. After some troubleshooting, I am requesting 300 GB from the scheduler, but 200 GB from psi4, and end up with ~260 GB used. Is this expected? . Relatedly, but separate, is there a way to estimate what the scratch file size may be? I was planning to use node-local storage until I found out my scratch files are 1.5+ TB. Any rule of thumb way of estimating this ahead of time (number of atoms × level of theory × some magic thing?)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1985:621,schedul,scheduler,621,https://psicode.org,https://github.com/psi4/psi4/issues/1985,2,['schedul'],['scheduler']
Energy Efficiency,"I see the same issue with Psi4 installed on Ubuntu 16.04.1 LTS, compiled with gcc 5.4.0. It is also using ATLAS for BLAS/LAPACK, and my build is a debug build. The following test cases fail:; 77 - cdomp2-2 (Failed); 125 - dfmp2-grad2 (Failed); 127 - dfmp2-grad4 (Failed); 129 - dfomp2-2 (Failed); 131 - dfomp2-4 (Failed); 133 - dfomp2-grad2 (Failed). I'll update as I switch to another BLAS/LAPACK.; Other test cases fail but they might be related to different problems:; 188 - mints9 (Failed); 268 - pywrap-checkrun-rhf (Failed); 269 - pywrap-checkrun-rohf (Failed); 270 - pywrap-checkrun-uhf (Failed); 314 - fsapt1 (Timeout); 321 - python-energy (Failed); 322 - python-curve (Failed); 323 - python-pubchem (Failed); 324 - json-energy (Failed); 325 - json-gradient (Failed)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/391#issuecomment-277545780:641,energy,energy,641,https://psicode.org,https://github.com/psi4/psi4/issues/391#issuecomment-277545780,2,['energy'],['energy']
Energy Efficiency,"I see three different questions here:; 1. Is it possible to carry out MRCI in Psi?; 2. Can we get an error message better than a segfault, or for this not to segfault?; 3. Does the energy error indicate you've landed on the wrong electronic state? If so, how do you land on the right one?. My thoughts:. 1. Reading that paper, it looks like Sherrill and Piecuch did (as you suspected), a two-step computation. First, they did a CASSCF computation. Then they used the orbitals from that computation to do a RASCI computation. Then they fed those orbitals into a RAS computation to do their MRCI. That said, I cannot figure out what keywords they might have used to specify the right excitation levels. None of the keywords in the manual level.; 2. I would expect that the program should be able to accept orbitals this way. Unless another developer more experienced in detci sees otherwise, this looks to me a like a bug. I'll give some time for them to comment before investigating further myself.; 3. Just to be clear, do you have any reason to think that you landed on the C electronic state? If not, you may have landed on a different electronic state entirely. I recommend you look at the section of your SCF computation marked ""Final Occupation by Irrep"". Is that consistent with your desired electronic state? Is there any other low-lying electronic state that occupation could match?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1907#issuecomment-634602517:181,energy,energy,181,https://psicode.org,https://github.com/psi4/psi4/issues/1907#issuecomment-634602517,1,['energy'],['energy']
Energy Efficiency,"I see your results, too. What's the overall intent of the `num_frozen_docc` here? Are you wanting plain frozen core or is this preparation for something more complex? Note that we did address frozen core in sapt fairly recently, https://github.com/psi4/psi4/pull/2271, and that solution in itself is making use of `num_frozen_docc`. When I switch your first line to `set freeze_core true`, water is reasonable again. ```; > grep -e ""Final E"" lizsapt2.out ; @DF-RHF Final Energy: -272.35982173084625; @DF-RHF Final Energy: -196.32485863378869; @DF-RHF Final Energy: -76.03485411063548; @DF-RHF Final Energy: -272.35997062909757; @DF-RHF Final Energy: -196.32485863377360; @DF-RHF Final Energy: -76.03485447822362; ```. In SAPT, frozen-core will influence a delta-MP2 correction (irrelevant here) and possibly (I'm not sure if there are conditions) dispersion https://github.com/psi4/psi4/blob/master/tests/sapt10/input.dat#L59-L63 since those are mp2-like terms. You're right that HF energies themselves should be indifferent. Without experimenting much, I venture that the presence of the sapt fc correction and all the wfn passing w/i sapt is causing the bad QC. Possibly `num_frozen_docc` should be disabled for SAPT, if newly fixed `freeze_core=True` works for you. Or else `num_frozen_docc` needs a separate fix.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2631#issuecomment-1207141235:471,Energy,Energy,471,https://psicode.org,https://github.com/psi4/psi4/issues/2631#issuecomment-1207141235,6,['Energy'],['Energy']
Energy Efficiency,"I suspect that in several of these, the problem is that the downstream; codes need the (conventional or DF) integrals written to disk. This got; handled by some logic where necessary for scf_type = disk_df, apparently,; but did not get handled for mem_df. Works ok for ccenergy? It also needs conventional integrals written to; disk. Maybe that is getting intercepted correctly. On Mon, May 14, 2018 at 6:14 PM, Lori A. Burns <notifications@github.com>; wrote:. > Posting Dom's very nice summary for easier perusal and searchability.; > Effective scf_type df Testing: mem_df & disk_df; >; > All tests listed below examine calls to both energy() and gradient() when; > employing the scf_type mem_df and scf_type disk_df settings. Each test; > employs a different model chemistry (indicated in the test description); > and the; > Physicists' water molecule, unless otherwise indicated.; >; > 1. Physicists' water, HF/6-31G; > - *TEST FAILED*; > - Error message:; >; > Traceback (most recent call last):; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; > exec(content); > File ""<string>"", line 30, in <module>; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 444, in energy; > return driver_cbs._cbs_gufunc(energy, name, ptype='energy', **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver_cbs.py"", line 1818, in _cbs_gufunc; > ptype_value, wfn = func(method_name, return_wfn=True, molecule=molecule, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; > wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 2038, in run_scf; > scf_wfn = scf_helper(name, post_scf=False, **kwargs)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1021#issuecomment-389018128:636,energy,energy,636,https://psicode.org,https://github.com/psi4/psi4/issues/1021#issuecomment-389018128,1,['energy'],['energy']
Energy Efficiency,"I suspect we just never got around to adapting the higher order codes. But; maybe @tparker36 has numerical evidence that it's not as big a deal as we; thought?. On Wednesday, March 16, 2016, Lori A. Burns notifications@github.com; wrote:. > Hmm, so either; > - the case of running higher-order SAPT on heavy atoms was never; > considered, in which case the DF_BASIS_ELST code needs copying over; > - the heavy atom failure mode doesn't appear in higher-order SAPT b/c; > higher-order terms compensate or because the larger basis-sets targeted do; > their job (RI > JK for higher-zeta basis sets). Actually, this may have; > been what @tparker36 https://github.com/tparker36 was recalling.; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/317#issuecomment-197550795",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/317#issuecomment-197551790:38,adapt,adapting,38,https://psicode.org,https://github.com/psi4/psi4/issues/317#issuecomment-197551790,1,['adapt'],['adapting']
Energy Efficiency,"I tend to agree that turning off the projection in that case is the most sensible. The fock matrix projection in ORCA seems to 'work' in the sense that it convergences to the same result as the default guess (PModel) in some fewer iterations. The guess energy is quite far off, though. General robustness is thus questionable.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1972#issuecomment-664961848:253,energy,energy,253,https://psicode.org,https://github.com/psi4/psi4/issues/1972#issuecomment-664961848,1,['energy'],['energy']
Energy Efficiency,"I think I didn't convey what I meant here. . The earlier problem I reported in this issue was that the Ethane LDA energies were not matching, which got resolved by using the correct functional. But I had stated there that the energies only matched up to 6 decimal places. Later on with your and @JonathonMisiewicz 's advice I posted a new script comparing the energies for a different molecule (Decane) with the two programs. There I stated that the energy difference was 35 uH. And then as a side note, I have mentioned that for a smaller Ethane molecule, however, the difference is only 1e-11 H **_using the same script_**. . Edit: Ahh, I didn't notice your edited reply. Yes, I just changed the system. Currently, for my needs the difference in energies is acceptable. But I would definitely keep investigating more systems or different functionals.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2911#issuecomment-1488616136:450,energy,energy,450,https://psicode.org,https://github.com/psi4/psi4/issues/2911#issuecomment-1488616136,1,['energy'],['energy']
Energy Efficiency,I think I found out what is going on. Both ORCA and PSI4 are indeed writing the wrong contraction coefficients. I've done the same computation with Gaussian. Then I loaded the Gaussian log file into molden and wrote out a molden file. That one can be loaded back as an input for molden and it gives the right Mulliken charges:. N 0.0380; H -0.2742; H 0.0121; H 0.2242; Sum of Mulliken Charges: 0.0001. It seems that the the molden format uses exactly the same normalization conventions of Gaussian. (Gaussian prints the same contraction coefficients in the log file when the gfinput option is used.) These number seem to follow the same conventions as the Gaussian94 basis set format. (See the EMSL database for some examples.). I've update the archive file:. https://dl.dropboxusercontent.com/u/4871688/moldenbug.tar.bz2. Now it also contains the Gaussian calculation and the molden file made with molden.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/60#issuecomment-53039792:318,charge,charges,318,https://psicode.org,https://github.com/psi4/psi4/issues/60#issuecomment-53039792,2,"['Charge', 'charge']","['Charges', 'charges']"
Energy Efficiency,I think I got it in the new PR I am working on right now (#1770). Here are the X2C energies w and w/o the field. I think the difference looks similar to DKH. ```; x2c_0.out: Total Energy = -2.8613053511779594; x2c_p.out: Total Energy = -2.8679759489083452; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1758#issuecomment-566550950:180,Energy,Energy,180,https://psicode.org,https://github.com/psi4/psi4/issues/1758#issuecomment-566550950,2,['Energy'],['Energy']
Energy Efficiency,I think charge comes first among the arguments. https://github.com/psi4/psi4/blob/master/tests/extern1/input.dat#L24 Your input possibly interpreted as no charge.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1757#issuecomment-557979152:8,charge,charge,8,https://psicode.org,https://github.com/psi4/psi4/issues/1757#issuecomment-557979152,2,['charge'],['charge']
Energy Efficiency,"I think in terms of trying not to interrupt a high throughput scenario that we should still return an error in the `OptimizationResult` and set `""success"": ""false""` to warn the user that trying to grab something from `""return_result""` won't work. If we're giving json output back, optking failing shouldn't result in an error being returned to the user. They should be able to keep going naturally. If they try to check `'return_result'` though without checking for success they'd likely get a `NoneType` error or something which could kill whatever scripts they're running. The question in my mind is whether we should actually run a simple energy calc at the requested level of theory an place the `AtomicResult` in the `""trajectory""` so that they have some results to work with.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2971#issuecomment-1570349119:642,energy,energy,642,https://psicode.org,https://github.com/psi4/psi4/issues/2971#issuecomment-1570349119,1,['energy'],['energy']
Energy Efficiency,"I think it's a bad interaction between mixed-cart/zmat + counterpoise. The below triggers it, but it's fine w/o cp or with pure zmat frags. ```; molecule {; He 0 0 0; He 1 0 0; He 2 0 0; --; He 1 2.0 2 90.0 3 176.0; }. basis {; assign He def2-tzvpp; }. energy(""mp2"", bsse_type=""cp""); ```. A bug, but probably one to be warded off rather than hunted down?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1325#issuecomment-434799053:253,energy,energy,253,https://psicode.org,https://github.com/psi4/psi4/issues/1325#issuecomment-434799053,1,['energy'],['energy']
Energy Efficiency,I think pywrap-alias does use some of detci's more obscure methods (below). I was also remembering a bad bout I had with ddd before last Christmas where Windows only hung up for detci mp5 run only by exe or by api. ```; (py38) >>> grep -e 'PASSED' -e 'D E T C I' ../tests/pywrap-alias/input.out ; [1] Au std...........................................................................PASSED; [2] MP2 sp...........................................................................PASSED; MP2 route check.................................................................PASSED; [3] MP3 occ..........................................................................PASSED; MP3 route check.................................................................PASSED; [4] MP3 detci (energy and route check)...............................................PASSED; [5] MP4 fnocc........................................................................PASSED; (a 'D E T C I' module); [6] MP11 sp..........................................................................PASSED; (a 'D E T C I' module); [7] ZAPT4 sp.........................................................................PASSED; (a 'D E T C I' module); [8] FCI sp...........................................................................PASSED; [9] MP2.5 sp.........................................................................PASSED; [10] cbs()............................................................................PASSED; [11] db().............................................................................PASSED; [12] CISD sp..........................................................................PASSED; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1991#issuecomment-683898544:767,energy,energy,767,https://psicode.org,https://github.com/psi4/psi4/pull/1991#issuecomment-683898544,1,['energy'],['energy']
Energy Efficiency,"I think that should be sufficient, the differences are nominal enough. On this note can you quantify the energy differences (both absolute and relative) so that we can mention this in the release notes?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1591#issuecomment-494793194:105,energy,energy,105,https://psicode.org,https://github.com/psi4/psi4/pull/1591#issuecomment-494793194,1,['energy'],['energy']
Energy Efficiency,"I think the ADC(2) code has some special corrections it can apply, but I; would have thought that those were turned off by default... On Wed, Jun 6, 2018 at 3:52 PM Alexander Sokolov <notifications@github.com>; wrote:. > Hi everyone,; >; > I was testing the ADC(2) code in Psi4 on small molecules and noticed that; > the results I obtained were significantly different from Q-Chem. The SCF; > and MP2 energies match very well.; >; > For N2 (r = 1.2 A) with cc-pVDZ basis, here's a summary of the energies; > for the 8 lowest-lying singlet states from Q-Chem 4.4.1 compared to Psi4; > 1.1:; >; > Q-Chem 4.4.1:; > MP2 ground-state energy: -109.2579498247; > Excitation energy: 8.385211 eV; > Excitation energy: 8.385211 eV; > Excitation energy: 8.832813 eV; > Excitation energy: 9.441957 eV; > Excitation energy: 9.441957 eV; > Excitation energy: 13.868446 eV; > Excitation energy: 13.868446 eV; > Excitation energy: 14.791430 eV; >; > Psi4 1.1:; > MP2 ground-state energy: -109.25794982519506; > -> 1 A state : 0.3113289 (a.u.), 8.4716885 (eV); > -> 2 A state : 0.3113289 (a.u.), 8.4716885 (eV); > -> 3 A state : 0.3343892 (a.u.), 9.0991916 (eV); > -> 4 A state : 0.3565394 (a.u.), 9.7019279 (eV); > -> 5 A state : 0.3565394 (a.u.), 9.7019279 (eV); > -> 6 A state : 0.5069575 (a.u.), 13.7950140 (eV); > -> 7 A state : 0.5069575 (a.u.), 13.7950140 (eV); > -> 8 A state : 0.5127312 (a.u.), 13.9521243 (eV); >; > The Q-Chem energies agree with my standalone code. For N2 with STO-3G; > basis I simply get zero excitation energies with Psi4:; >; > ==> ADC(2) Computation <==; >; > -> 1 A state : 0.0000000 (a.u.), 0.0000000 (eV); > Non-iterative: 0.3864160 (a.u.), 10.5149136 (eV); > ┆ ┆ Occ Vir Coefficient; > ---------------------------------------------; >; > Converged in 2 iteration.; > Squared norm of the S component: 1.0000000; > The S vector is rotated up to 90.000 (deg.); > #WARNING: Strongly rotated from the CIS state!; >; > -> 2 A state : 0.0000000 (a.u.), 0.0000000 (eV); > Non-iterative: 0.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1033#issuecomment-395444918:629,energy,energy,629,https://psicode.org,https://github.com/psi4/psi4/issues/1033#issuecomment-395444918,10,['energy'],['energy']
Energy Efficiency,"I think there might be advantages to modifying nuclear charges (e.g. to compute interactions with point charges, nuclear-nuclear repulsion, etc.) Perhaps we could have an effective or ecp nuclear charge stored for each atom.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/681#issuecomment-295538468:55,charge,charges,55,https://psicode.org,https://github.com/psi4/psi4/pull/681#issuecomment-295538468,3,['charge'],"['charge', 'charges']"
Energy Efficiency,"I think this is causing jobs to die on long-running remote servers:. ```; File ""/app/.pixi/envs/default/lib/python3.12/site-packages/psi4/driver/driver.py"", line 525, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; File ""/app/.pixi/envs/default/lib/python3.12/site-packages/psi4/driver/procrouting/proc.py"", line 2588, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; File ""/app/.pixi/envs/default/lib/python3.12/site-packages/psi4/driver/procrouting/proc.py"", line 1887, in scf_helper; e_scf = scf_wfn.compute_energy(); ^^^^^^^^^^^^^^^^^^^^^^^^; File ""/app/.pixi/envs/default/lib/python3.12/site-packages/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 82, in scf_compute_energy; self.initialize(); File ""/app/.pixi/envs/default/lib/python3.12/site-packages/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 193, in scf_initialize; self.initialize_jk(self.memory_jk_, jk=jk); File ""/app/.pixi/envs/default/lib/python3.12/site-packages/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 128, in initialize_jk; jk.initialize(); MemoryError: std::bad_alloc; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3207#issuecomment-2442428123:170,energy,energy,170,https://psicode.org,https://github.com/psi4/psi4/issues/3207#issuecomment-2442428123,2,['energy'],['energy']
Energy Efficiency,"I think you're confusing NR-root finding algorithms with instability following. Your answer makes sense only in the context of a different problem. In the instability following problem, we start at a saddle point and compute both a negative eigenvalue of the orbital Hessian and the corresponding eigenvector. The eigenvector gives us the search direction. In the search direction, an orbital instability analysis alone gives us a second-order Taylor expansion of the energy that is in the shape of a parabola. We are starting at its _maximum_ (because the eigenvalue is negative), and it possesses no minimum. The eigenvalue magnitude gives us the parabola steepness, but neither I nor Psi4 have any idea how to use that information to give us a step size. Hence the need for a user-supplied step length at present. The proposal here is that we use the energy and gradient information at another point along the line to fit the third and potentially fourth terms of the Taylor expansion, so we get a function that has a chance of having a minimum.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3045#issuecomment-1706714963:468,energy,energy,468,https://psicode.org,https://github.com/psi4/psi4/issues/3045#issuecomment-1706714963,2,['energy'],['energy']
Energy Efficiency,"I threw a +1 behind lori's comments about checking the SCF energy in the test, but otherwise. LGTM",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/520#issuecomment-265447202:59,energy,energy,59,https://psicode.org,https://github.com/psi4/psi4/pull/520#issuecomment-265447202,1,['energy'],['energy']
Energy Efficiency,"I tried freezing the cartesian coordinates of the dihedral atoms and it seems to work. The optimization converged within 10 iterations. I also used `consecutive_backsteps = 2`. However, since the bonds and angles can't relax, the energy of the converged structure is higher. I'll try your approach of first optimizing with a lower level of theory. . ```; frozen_string = """"""; 4 xyz; 10 xyz; 11 xyz; 6 xyz; """"""; set optking { opt_coordinates = cartesian; frozen_cartesian = $frozen_string; consecutive_backsteps = 2; geom_maxiter = 250; print_trajectory_xyz_file = True }. optimize('MP2/aug-cc-PVTZ'); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/858#issuecomment-344630452:230,energy,energy,230,https://psicode.org,https://github.com/psi4/psi4/issues/858#issuecomment-344630452,1,['energy'],['energy']
Energy Efficiency,"I tried running a CISD/STO-3G job on benzene (structure borrowed from the [psi4 input file samples](https://github.com/psi4/psi4/blob/master/samples/props3/input.dat)) using the following input:; ```; molecule benzene {; C 0.710500000000 0.000000000000 -1.230622098778; C 1.421000000000 0.000000000000 0.000000000000; C 0.710500000000 0.000000000000 1.230622098778; C -0.710500000000 0.000000000000 1.230622098778; C -0.710500000000 0.000000000000 -1.230622098778; C -1.421000000000 0.000000000000 0.000000000000; H 1.254500000000 0.000000000000 -2.172857738095; H -1.254500000000 0.000000000000 2.172857738095; H 2.509000000000 0.000000000000 0.000000000000; H 1.254500000000 0.000000000000 2.172857738095; H -1.254500000000 0.000000000000 -2.172857738095; H -2.509000000000 0.000000000000 0.000000000000; }. set basis sto-3g. energy('cisd', molecule=benzene); ```; Psi4 returned the following error:; ```; Traceback (most recent call last):; File ""/usr/local/psi4/bin/psi4"", line 248, in <module>; exec(content); File ""<string>"", line 36, in <module>; File ""/usr/local/psi4/lib/psi4/driver/driver.py"", line 460, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/usr/local/psi4/lib/psi4/driver/procrouting/proc.py"", line 949, in select_cisd; return func(name, **kwargs); File ""/usr/local/psi4/lib/psi4/driver/procrouting/proc.py"", line 4238, in run_cepa; fnocc_wfn = core.fnocc(ref_wfn). RuntimeError: ; Fatal Error: ndocc must be less than nvirt; Error occurred in file: /home/shouck/psi4/psi4/src/psi4/fnocc/ccsd.cc on line: 142; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::fnocc::CoupledCluster::common_init(); psi::fnocc::CoupledCluster::CoupledCluster(std::shared_ptr<psi::Wavefunction>, psi::Options&); psi::fnocc::CoupledPair::CoupledPair(std::shared_ptr<psi::Wavefunction>, psi::Options&); psi::fnocc::fnocc(std:",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/828:828,energy,energy,828,https://psicode.org,https://github.com/psi4/psi4/issues/828,1,['energy'],['energy']
Energy Efficiency,"I tried this; ```python; psi4.set_options({""REFERENCE"": ""uhf"", ; ""guess"": ""SADNO"",; ""e_convergence"": 12,; ""basis"": ""cc-pvdz"",; ""guess_mix "": True,; }); ```; and got this; ```; ==> Pre-Iterations <==. SCF Guess: Superposition of Atomic Densities' Natural Orbitals via on-the-fly atomic UHF (doi:10.1021/acs.jctc.8b01089). -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A 10 10 1 1 1 0; -------------------------------------------------------; Total 10 10 1 1 1 0; -------------------------------------------------------. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-UHF iter 1: -0.82625214180248 -8.26252e-01 1.90467e-03 DIIS; @DF-UHF iter 2: -0.82648067782379 -2.28536e-04 2.30464e-04 DIIS; @DF-UHF iter 3: -0.82648407824247 -3.40042e-06 4.94088e-07 DIIS; @DF-UHF iter 4: -0.82648407827432 -3.18503e-11 3.29102e-08 DIIS; @DF-UHF iter 5: -0.82648407827446 -1.41664e-13 5.92889e-13 DIIS; ```; There seems no mixing operation and the resulting energy is different compared with GWH:; ```; ==> Pre-Iterations <==. SCF Guess: Generalized Wolfsberg-Helmholtz. Mixing alpha HOMO/LUMO orbitals (1,2). -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A 10 10 1 1 1 0; -------------------------------------------------------; Total 10 10 1 1 1 0; -------------------------------------------------------. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-UHF iter 1: -0.99581369630316 -9.95814e-01 5.27581e-03 DIIS; @DF-UHF iter 2: -0.99858566020747 -2.77196e-03 9.67632e-04 DIIS; @DF-UHF iter 3: -0.99871839991550 -1.32740e-04 1.28446e-04 DIIS; @DF-UHF iter 4: -0.99872134564656 -2.94573e-06 6.44177e-06 DIIS; @DF-UHF iter 5: -0.99872135071512 -5.06856e-09 1.24087e-06 DIIS; @DF-UHF iter 6: -0.99872135104152 -3.26405e-10 1.50846e-07 DIIS; @DF-UHF iter 7: -0.99872135104495 -3.4",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2410#issuecomment-1016645676:653,Energy,Energy,653,https://psicode.org,https://github.com/psi4/psi4/issues/2410#issuecomment-1016645676,1,['Energy'],['Energy']
Energy Efficiency,"I tried using this code to generate the potential energy curve for the CF molecule and I got this error message: . ```; import psi4; import numpy as np. psi4.set_options({; 'basis': 'cc-pVtz',; 'reference': 'rohf',; 'docc': [3, 0, 0, 0, 0, 1, 1, 0],; 'socc': [0, 0, 0, 0, 0, 1, 0, 1],; 'restricted_docc': [1, 0, 0, 0, 0, 1, 0, 0],; 'active': [2, 0, 1, 1, 0, 2, 1, 1],; 'MCSCF_MAXITER': 100; }). psi4.set_memory('8000 MB'). cf_geometry = """"""; 0 2; C; F 1 {0}; symmetry c2v; """""". a_end = 1.325; b_start = 1.355; b_num = 20; aa = np.linspace(1, 1.2, 6); a = np.linspace(1.25, a_end, 3); b = np.linspace(b_start, 2.5, b_num); c = np.linspace(2.6, 10, 8); Rvals = np.concatenate((aa, a, b, c), axis=None). ecp = {}. for R in Rvals:; if R <= a_end:; psi4.set_module_options('detci', {'num_roots': 3, 'follow_root': 0, 'NUM_DETS_PRINT': 40}); elif R >= b_start:; psi4.set_module_options('detci', {'num_roots': 3, 'follow_root': 1, 'NUM_DETS_PRINT': 40}). cf = psi4.geometry(cf_geometry.format(R)); casscf_energy = psi4.energy('casscf'); ecp[R] = [; casscf_energy,; psi4.core.variable('ci root %d TOTAL ENERGY' % 0),; psi4.core.variable('ci root %d TOTAL ENERGY' % 1),; psi4.core.variable('ci root %d TOTAL ENERGY' % 2); ]; psi4.core.clean(); ```. The error message I got is:. ```; Traceback (most recent call last):; File ""/home/sanctus/psi4conda/bin/psi4"", line 372, in <module>; exec(content); File ""<string>"", line 46, in <module>; File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/driver.py"", line 526, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 5424, in run_detcas; ref_wfn = scf_helper(name, **kwargs); File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 1769, in scf_helper; scf_wfn = scf_wavefunction_factory(name, base_wfn, core.get_option('SCF', 'REFERENCE'), **kwargs); File ""/home/sanctu",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181:50,energy,energy,50,https://psicode.org,https://github.com/psi4/psi4/issues/3181,1,['energy'],['energy']
Energy Efficiency,"I understand, but my logic in that case was that the Psi vars would appear exactly like the associated quantity in the output file, just to decrease possible confusion arising form all these different quantities.; If you'd prefer to have `ENERGY` spelled out for homogeneity reasons in the Psi vars, just let me know and I'll make the change, though.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/480#issuecomment-253120506:239,ENERGY,ENERGY,239,https://psicode.org,https://github.com/psi4/psi4/pull/480#issuecomment-253120506,1,['ENERGY'],['ENERGY']
Energy Efficiency,I updated the `energy` function docstring to include the boolean option of write_orbitals,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2190#issuecomment-873261074:15,energy,energy,15,https://psicode.org,https://github.com/psi4/psi4/pull/2190#issuecomment-873261074,1,['energy'],['energy']
Energy Efficiency,"I uploaded my code, psi4 running log and result analysis to google drive: https://drive.google.com/file/d/1yifEuHhVXDsQh30toR0C69HzhE8rYqpn/view?usp=sharing. > ""I mean, a correlation coefficient of 0.62 is ridiculous. The calculations really should be nearly identical. Are you sure the molecular charges and multiplicities are set correctly?"". Conformer benchmark provides the charge of each molecule, multiplicity is set to 1 by default. (Psi4-Test/main.py line 63) ; @PeterKraus . > ""Set d_convergence. The default is 1e-6. You could set it to smaller numbers and see if the correlation improves. If you set it too low, the equations may not converge. You will see this problem if you try to set it below 1e-12, but you will probably see it at a larger number."". I tried to set d_convergence to 1e-7, but the calculation results are the same as the results of d_convergence=1e-6. The file I uploaded contains the running logs of both. (Psi4-Test/psi4_energy.csv, Psi4-Test/psi4_energy_tight.csv, Psi4-Test/conformer_benchmark/psi4_log); @JonathonMisiewicz . > ""I've only skimmed paper associated with the benchmarking data, but it looks like they used wB97X-D3/def2-TZVP, not wB97X-D/def2-SVP. They only refer to wB97X-D once, and use wB97X-D3 everywhere else. In section 4.2, they say that only B3LYP-D3BJ and PBE-D3BJ were selected to be tested with def2-SVP."". The file I uploaded contains the calculation results of wB97X-D3/def2-TZVP and wB97X-D/def2-SVP. (Psi4-Test/psi4_energy.csv, Psi4-Test/psi4_energy_tight.csv, Psi4-Test/conformer_benchmark/psi4_log); @ajs99778 . > ""Are you able to reproduce the benchmark energy for any conformer using wB97X-D/def2-SVP or wB97X-D3/def2-TZVP in ORCA 4.0.1? "" ""Also, ORCA 4.0.1 is several years old. I don't know if ORCA had any bug fixes/changes over the years that would impact their results, but you might want to compare to ORCA 5.0.1 energies as well."". Unfortunately, I don’t have ORCA license, so I can’t use ORCA.; @ajs99778",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2351#issuecomment-973862383:297,charge,charges,297,https://psicode.org,https://github.com/psi4/psi4/issues/2351#issuecomment-973862383,3,"['charge', 'energy']","['charge', 'charges', 'energy']"
Energy Efficiency,"I use the following block of code to do CCSD(T) calculations; ```; psi4_atom_task = qcelemental.models.ResultInput (; molecule= mol,; driver=""energy"",; model= {""method"": ""ccsd"", ""basis"": ""6-31g""},; ); ret=qcengine.compute(psi4_atom_task, ""psi4""). ret.dict()['extras']; ````. If the `mol` is restricted shell, then the result in 'extras' includes non-zero values of the `CC D1 DIAGNOSTIC` and `CC D2 DIAGNOSTIC`. The example output of water molecule at singlet state is:. ```; {'qcvars': {'-D ENERGY': 0.0,; 'CC D1 DIAGNOSTIC': 0.015061336005482073,; 'CC D2 DIAGNOSTIC': 0.12393617164619228,; 'CC NEW D1 DIAGNOSTIC': 0.015061336005482073,; 'CC T1 DIAGNOSTIC': 0.006755831075299291,; 'CCSD CORRELATION ENERGY': -0.13940696350922102,; 'CCSD OPPOSITE-SPIN CORRELATION ENERGY': -0.11488872459315766,; 'CCSD SAME-SPIN CORRELATION ENERGY': -0.02451823891606328,; 'CCSD TOTAL ENERGY': -76.1195648218788,; ```. However, if the calculation is for an open shell system, `CC D1 DIAGNOSTIC` and `CC D2 DIAGNOSTIC` will always be zero regardless of molecule species. I suspect that QCEngine is not parsing out the D1 and D2 values for these calculation, resulting in zero values all the time.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1681:142,energy,energy,142,https://psicode.org,https://github.com/psi4/psi4/issues/1681,6,"['ENERGY', 'energy']","['ENERGY', 'energy']"
Energy Efficiency,"I used Psi4 to calculate the energy of molecules in Conformer Benchmark dataset ( https://github.com/ghutchis/conformer-benchmark/ 702 molecules, each molecule has about 10 conformations). I tried three versions of Psi4 respectively, including V1.3.2, V1.4 and V1.4.1, and then calculated the correlation between the results of the three versions. The results are shown in the following table. The consistency is not high, especially v1.4.1, which is greatly different from the other two versions. Why are the calculation results of different versions so different?. In addition, I also calculated the correlation between Psi4 results and Orca results (from Conformer benchmark), the correlation is not high, why?. ![image](https://user-images.githubusercontent.com/16797849/141259545-c20d1c6c-6fe1-44ec-a0de-1bb8980db327.png). my code:; ```Python; def run_psi4_calc(xyz_str, dtype='xyz', basis_set='WB97X-D/def2-SVP', reference='uks', max_iter=100):. psi4.set_options({; 'reference': reference,; 'maxiter': max_iter; }). mol = psi4.core.Molecule.from_string(xyz_str, dtype=dtype); energy = psi4.energy(basis_set, molecule=mol). return energy. # get molecular 3d coordinates from Conformer benchmark; xyz_str = get_xyz_str(). energy = run_psi4_calc(; xyz_str=xyz_str,; dtype='xyz+',; basis_set='WB97X-D/def2-SVP',; reference='uks',; max_iter=100; ); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2351:29,energy,energy,29,https://psicode.org,https://github.com/psi4/psi4/issues/2351,5,['energy'],['energy']
Energy Efficiency,"I used the PSI4 to run SAPT0-D3 calculation. I tested both D3 and D3mbj correction, however, they all have the errors. The error is the assertion error: pairwise sum = -0.17086444... ! =energy -0.17086561.; The key word i used in my script is the following : ; set {; scf_type DF; freeze_core True; basis jun-cc-pVDZ; soscf true; soscf_max_iter 30; }; energy(""sapt0-d3"")",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2914:186,energy,energy,186,https://psicode.org,https://github.com/psi4/psi4/issues/2914,2,['energy'],['energy']
Energy Efficiency,"I want to install psi4 on my openff environment since OpenFF Recharge requires it to generate electrostatic charges (https://docs.openforcefield.org/projects/recharge/en/stable/getting-started/installation.html). . I have used mamba to install openff, following steps 3 and 4 [https://docs.openforcefield.org/en/latest/install.html](here). I tried to install psi4 via mamba with the following commad:; `mamba install psi4=1.8.1 -c conda-forge/label/libint_dev -c conda-forge`. However, I got several warnings about incompatible packages:. `blas [2.4|2.5|2.6|2.7] would require; │ │ └─ libblas [3.8.0 4_openblas|3.8.0 5_openblas|3.8.0 6_openblas|3.8.0 7_openblas], which requires; │ │ └─ openblas 0.3.5.* , which does not exist (perhaps a missing channel);; `; and; ` psi4 1.8.1 would require; │ ├─ libblas * *mkl, which requires; │ │ └─ blas * mkl, which conflicts with any installable versions previously reported;; │ └─ mkl >=2022.2.1,<2023.0a0 , which conflicts with any installable versions previously reported;; `. I also attempted to install psi4=1.7, but this also led to a similar conflicts issue:. `psi4 1.7** is not installable because it requires; └─ blas 1.0 mkl, which conflicts with any installable versions previously reported.; `; I believe I need psi4 installed on my openff environment for it to be usable for openff's wrappers. I've tried installing the blas dependencies explicitly:. `mamba conda install -c conda-forge openblas` ; but this tells me the package is already installed. . and:. `mamba install 'libblas * *mkl' -c conda-forge -c defaults` which results in the same `openblas 0.3.5.* , which does not exist (perhaps a missing channel);` error. . Any ideas? I must admit I am relatively new to using mamba + managing environments, but I believe it is just a reimplementation of conda.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3046:108,charge,charges,108,https://psicode.org,https://github.com/psi4/psi4/issues/3046,1,['charge'],['charges']
Energy Efficiency,"I want to optimize base-pairs in Cs symmetry and DFT, but the optimization fails/produces a wrong minimum. Moreoever, the optimization goes a bit crazy. DF-B3LYP-D3/def2-QZVP gives some form of this with most options (including cart.) for the optimizer:; ```; Convergence Criteria 1.00e-06 * 3.00e-04 * o 1.20e-03 * o ~; --------------------------------------------------------------------------------------------- ~; 1 -1089.49118380 -1.09e+03 9.40e-02 1.22e-02 o 1.04e-01 1.41e-02 o ~; 2 -1089.49529350 -4.11e-03 5.45e-02 7.48e-03 o 9.20e-02 1.41e-02 o ~; 3 -1089.49300118 2.29e-03 4.10e-02 5.60e-03 o 8.58e-02 1.41e-02 o ~; 4 -1089.48886131 4.14e-03 3.02e-02 4.05e-03 o 8.07e-02 1.41e-02 o ~. ```. The default optimizer keeps increasing the energy and ends up in a wrong minimum. The option `DYNAMIC_LEVEL 2` tries to fix things, but it goes nowhere in the end. See output for further details: [dynamic.txt](https://github.com/psi4/psi4/files/2196749/dynamic.txt) . While at first I thought the optimizer just has weird troubles, from the below notes it seems the gradient might be faulty. And computing the numerical gradient shows some values a bit too far off. ; [grad.txt](https://github.com/psi4/psi4/files/2197616/grad.txt) (both next to each other at the bottom); E.g. compare the row for Atom 38. Additional notes/remarks; * Turbomole (RI-JK) and Gaussian converge smoothly. No increase in energy.; * smaller basis sets (def2-TZVP) converge as they should; * DFT grid increase does not change anything to the better; * same convergence issue with other (similar) structures; * revPBE0/def2-QZVP shows the same incorrect behavior; * `scf_type direct` seems to converge as it should (slow, still running); * DF-B3LYP gradient vs. FD gradients for water seems okay; * Not a symmetry problem; * Same with DF-HF; * Psi4 1.2 release; Git: Rev {HEAD} 9d4a61c (conda install)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1095:744,energy,energy,744,https://psicode.org,https://github.com/psi4/psi4/issues/1095,2,['energy'],['energy']
Energy Efficiency,"I was able to get the CHNO molecule to converge to something reasonable with pbe0/def2-TZVPPD/pcm by setting `dft_bs_radius_alpha 5.0`. Doing this with the I-containing molecule works partly, but I found that I was only able to get reasonable MBIS charges when switching to the LRC functional wb97x/def2-TZVPPD/pcm. Simply adding d3bj onto pbe0 did not seem to work. I was also able to reproduce the issue with multiple DFT methods; HF seemed ""stable"" other than some convergence issues.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3135#issuecomment-2407274343:248,charge,charges,248,https://psicode.org,https://github.com/psi4/psi4/issues/3135#issuecomment-2407274343,1,['charge'],['charges']
Energy Efficiency,"I was able to get the potential energy curve (PEC) for the ground state of the CF molecule but then once I include a method that could get the PEC for the excited state I kept getting an error. Then I wrote a script that could check the available methods and options for the excited states, I got a return message showing the available options but no available methods was shown. Here's the script I ran to obtain the ground state PEC:. import numpy as np; import psi4; import matplotlib.pyplot as plt. # Set Psi4 memory; psi4.set_memory('2 GB'). def compute_energy(bond_length):; molecule = psi4.geometry(f""""""; 0 2; C 0.000000000 0.000000000 0.000000000; F 0.000000000 0.000000000 {bond_length:.6f}; """"""). psi4.set_options({; 'basis': 'cc-pVTZ',; 'reference': 'uhf', # Use UHF for open-shell systems; 'scf_type': 'pk',; 'maxiter': 100,; 'e_convergence': 1e-8,; 'd_convergence': 1e-8; }). # Compute SCF energy; energy = psi4.energy('scf'); return energy. def generate_potential_energy_curve():; bond_lengths = np.arange(0.7, 5.02, 0.02); energies = []. for bond_length in bond_lengths:; try:; energy = compute_energy(bond_length); energies.append(energy); print(f""Bond length: {bond_length:.2f}, Energy: {energy:.8f}""); except Exception as e:; print(f""Error at bond length {bond_length}: {e}""); energies.append(float('nan')). return bond_lengths, energies. # Generate potential energy curve; bond_lengths, energies = generate_potential_energy_curve(). # Save bond lengths and energies to a text file; data_file = 'CF_PEC_0_data.csv'; with open(data_file, 'w') as file:; file.write(""Bond Length (Angstrom) Energy (Hartree)\n""); for length, energy in zip(bond_lengths, energies):; file.write(f""{length:.6f} {energy:.8f}\n""). print(f""Potential energy data saved to {data_file}""). # Plot the potential energy curve; plt.figure(figsize=(8, 6)); plt.plot(bond_lengths, energies, marker='o', linestyle='-', color='b', label='SCF Energy Curve'); plt.xlabel('Bond Length (Angstrom)'); plt.ylabel('Energy (Hartr",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181#issuecomment-2192730845:32,energy,energy,32,https://psicode.org,https://github.com/psi4/psi4/issues/3181#issuecomment-2192730845,5,['energy'],['energy']
Energy Efficiency,"I was attempting to run an IRC, only to receive a rather confusing error message that `symm_matrix_inv : opt_symm_matrix_eig could not diagonalize`. After spending far too much time trying to figure out why various matrices were filled with NaN, I realized the problem was that I had supplied an energy minimum, not a transition state. (The SI that I was following put in a wrong geometry.) I've attached my input file. The IRC code saw the gradient was about zero and tried to follow the lowest mode... which was a translational mode. If the new PyOptking is given an initial hessian for an IRC, could it double-check that there's actually an imaginary mode?. [input.txt](https://github.com/psi4/psi4/files/2019016/input.txt)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1025:296,energy,energy,296,https://psicode.org,https://github.com/psi4/psi4/issues/1025,1,['energy'],['energy']
Energy Efficiency,"I was doing a calculation of eda of transition metal complex by FISAPT, with three-body partition. A fatal error ocurred as followed. But the fragment A (0 1) is simply phenylacetylene, how could the error happen? ; Actrually, I have successfully done the eda of the same complex with two-body partition. The basis sets were exactly the same. Thanks in advance. ```; RuntimeError: ; Fatal Error: FISAPT: Charge on A is incompatible with singlet; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1670993662927/work/psi4/src/psi4/fisapt/fisapt.cc on line: 393; The most recent 5 function calls were:; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2870:404,Charge,Charge,404,https://psicode.org,https://github.com/psi4/psi4/issues/2870,1,['Charge'],['Charge']
Energy Efficiency,"I was having a problem with DF-CCSD(T) calculations. The issue was that the CC density was not present in the fchk file. Only the SCF density was printed out. My input file looks like this:; ; ```; memory 55 GB. molecule water {; 0 1; O 0.000000 0.119325 0.000000; H 0.763133 -0.477420 0.000000; H -0.763133 -0.477177 0.000000. symmetry c1; no_com; no_reorient; }. set {; basis aug-cc-pVTZ; scf_type df; cc_type df; }. set_num_threads(6). #e, wfn1 = energy('ccsd(t)', return_wfn=True,); grad, wfn = gradient('ccsd(t)', return_wfn=True). fchk_writer = psi4.FCHKWriter(wfn); fchk_writer.write('water.fchk'); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2275:450,energy,energy,450,https://psicode.org,https://github.com/psi4/psi4/issues/2275,1,['energy'],['energy']
Energy Efficiency,"I was looking at the DIIS code to determine whether it properly handles the case of linear dependencies. For instance, the UHF code is; ```; if (initialized_diis_manager_ == false) {; diis_manager_ = std::make_shared<DIISManager>(max_diis_vectors, ""HF DIIS vector"", DIISManager::LargestError,; DIISManager::OnDisk);; diis_manager_->set_error_vector_size(2, DIISEntry::Matrix, gradient_a.get(), DIISEntry::Matrix,; gradient_b.get());; diis_manager_->set_vector_size(2, DIISEntry::Matrix, Fa_.get(), DIISEntry::Matrix, Fb_.get());; initialized_diis_manager_ = true;; }. diis_manager_->add_entry(4, gradient_a.get(), gradient_b.get(), Fa_.get(), Fb_.get());; ```; whereas extrapolation is handled by; ```; bool UHF::diis() { return diis_manager_->extrapolate(2, Fa_.get(), Fb_.get()); }; ```; To me, this looks like the code does **not** project linearly dependent eigenvectors out. This might certainly explain many SCF convergence problems seen with Psi4, in which the energy apparently converges but the DIIS error stagnates to a large value. Note that the fix was already in Pulay's original paper. In [Chem. Phys. Lett. 73, 393 (1980)](https://doi.org/10.1016/0009-2614(80)80396-4) he writes; > An even better choice is the use of Fock matrix elements transformed to an orthonormal basis, such as `S^-1/2 F S^-1/2` where `S` is the overlap matrix. This takes into account that a charge shift from a basis function to another is less important physically if the two functions overlap strongly. Obviously, `S^-1/2` is the orthogonalizing matrix `X`; alternatively, the molecular orbital coefficients `C` can also be used.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2217:968,energy,energy,968,https://psicode.org,https://github.com/psi4/psi4/issues/2217,2,"['charge', 'energy']","['charge', 'energy']"
Energy Efficiency,"I was originally thinking the interface would be more like:; ```python; tddft(""B3LYP/cc-pVDZ""); ```; or ; ```python; ref_e, ref_wfn = psi4.energy(""B3LYP/cc-pVDZ"", return_wfn=True); tddft(ref_wfn); ```. I would be curious as to others thoughts on this.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1885#issuecomment-626327302:139,energy,energy,139,https://psicode.org,https://github.com/psi4/psi4/pull/1885#issuecomment-626327302,1,['energy'],['energy']
Energy Efficiency,I was running `mp2/cc-pvqz-ri` and also `mp2/cc-pvqz` and saw the difference in the energy and was thinking I needed to explicitly set ri. . Thanks for clarifying that. Really helps before I scale. . Will update soon with some test results.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2747#issuecomment-1279098432:84,energy,energy,84,https://psicode.org,https://github.com/psi4/psi4/issues/2747#issuecomment-1279098432,1,['energy'],['energy']
Energy Efficiency,"I was running the following input as a test:. ```set memory 4GB. molecule {; 0 3; O -0.5974387171 -0.0000000000 0.0000000000; O 0.5974387171 0.0000000000 0.0000000000. }. set {; reference rohf; d_convergence 10; e_convergence 10; basis_guess True; max_force_g_convergence 1e-7; freeze_core True; }. E = energy('mp2/heavy-aug-cc-pv([tq]+d)z + D:ccsd(t)/heavy-aug-cc-pv(d+d)z'); H = frequency('mp2/heavy-aug-cc-pv([tq]+d)z + D:ccsd(t)/heavy-aug-cc-pv(d+d)z', mode='continuous', dertype=0); ```. When computing the energy I get the following CBS summary. Everything looks good to me, matches what I get manually computing these (what I was testing). ``` ; ---------------------------------------------------------------------------------------------------------; Method / Basis Rqd Energy [Eh] Variable; ---------------------------------------------------------------------------------------------------------; hf / heavy-aug-cc-pv(t+d)z * -149.65690150 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(t+d)z * -150.13698909 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(q+d)z * -150.17732219 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(d+d)z -149.62212747 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(d+d)z * -150.01871638 MP2 TOTAL ENERGY; ccsd / heavy-aug-cc-pv(d+d)z -150.00685110 CCSD TOTAL ENERGY; ccsd(t) / heavy-aug-cc-pv(d+d)z * -150.02005663 CCSD(T) TOTAL ENERGY; ---------------------------------------------------------------------------------------------------------. ==> Stages <==. ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Wt Energy [Eh] Scheme; ---------------------------------------------------------------------------------------------------------; scf hf / heavy-aug-cc-pv(q+d)z 1 -149.66713397 xtpl_highest_1; corl mp2 / heavy-aug-cc-pv([tq]+d)z 1 -150.20675446 corl_xtpl_helgaker_2; corl hf / heavy-aug-cc-pv([tq]+d)z -1 -149.67460090 corl_xtpl_helgaker_2; delta",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1897:303,energy,energy,303,https://psicode.org,https://github.com/psi4/psi4/issues/1897,4,"['ENERGY', 'Energy', 'energy']","['ENERGY', 'Energy', 'energy']"
Energy Efficiency,I was thinking a head a bit where we would be able to kill off globals or at least provide a way to reduce them. I was hopeful that this scheme would be able to fill that roll as well to prevent duplication.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/511#issuecomment-259862684:100,reduce,reduce,100,https://psicode.org,https://github.com/psi4/psi4/pull/511#issuecomment-259862684,1,['reduce'],['reduce']
Energy Efficiency,"I was trying to run a Gaussian-2 energy calculation for hydrogen disulfide, which appears in the original G2 test set: http://scitation.aip.org/content/aip/journal/jcp/94/11/10.1063/1.460205. The job terminated after calculating the MP4(SDTQ) total energy, with message:. RuntimeError: sanity check failed! Gaussian94BasisSetParser::parser: Unable to find the basis set for S in /opt/science/psi/psi4/share/psi/basis/6-311g_2df_p_.gbs. When I examine the 6-311g_2df_p_.gbs file, I see that it only has entries for H, He, Li, Be, B, C, N, O, F, Ne, K, Ca. According to the comment at the top of the file it's supposed to have been merged from 6-311G*\* and 6-311G on the EMSL Basis Set Exchange. I double checked on the BSE and these basis sets also have entries for Na, Mg, Al, Si, P, S, Cl, Ar, Ga, Ge, As, Se, Br, Kr, I, as expected.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/58:33,energy,energy,33,https://psicode.org,https://github.com/psi4/psi4/issues/58,2,['energy'],['energy']
Energy Efficiency,"I was trying to run a calculation using the following composite method:. energy('MP2/aug-cc-pV([T, Q]+d)Z + D:FNO-CCSD(T)/aug-cc-pV(T+d)Z', bsse_type = 'cp') . The calculation seems to run fine, but the final energy table looks wrong. ---. ```; Method / Basis Rqd Energy [Eh] Variable; ```. ---. ```; mp2 / aug-cc-pv(q+d)z * -709.56313021 MP2 TOTAL ENERGY; hf / aug-cc-pv(q+d)z * -707.60123747 HF TOTAL ENERGY; scf / aug-cc-pv(t+d)z -707.58023768 SCF TOTAL ENERGY; mp2 / aug-cc-pv(t+d)z * -709.35534062 MP2 TOTAL ENERGY; fno-ccsd(t) / aug-cc-pv(t+d)z * -709.50405507 CCSD(T) TOTAL ENERGY; ccsd / aug-cc-pv(t+d)z -709.42134394 CCSD TOTAL ENERGY; ```. ---. ==> Stages <==. ---. ```; Stage Method / Basis Wt Energy [Eh] Scheme; ```. ---. ```; scf hf / aug-cc-pv(q+d)z 1 -707.60123747 xtpl_highest_1; corl mp2 / aug-cc-pv([tq]+d)z 1 -709.71476045 corl_xtpl_helgaker_2; corl hf / aug-cc-pv([tq]+d)z -1 -1223.95889724 corl_xtpl_helgaker_2; delta fno-ccsd(t) / aug-cc-pv(t+d)z 1 -709.50405507 xtpl_highest_1; delta mp2 / aug-cc-pv(t+d)z -1 -709.35534062 xtpl_highest_1; ```. ---. ==> CBS <==. ---. ```; Stage Method / Basis Energy [Eh] Scheme; ```. ---. ```; scf hf / aug-cc-pv(q+d)z -707.60123747 xtpl_highest_1; corl mp2 / aug-cc-pv([tq]+d)z 514.24413679 corl_xtpl_helgaker_2; delta fno-ccsd(t) - mp2 / aug-cc-pv(t+d)z -0.14871446 xtpl_highest_1; total CBS -193.50581514; ```. ---. [363_2_in.txt](https://github.com/psi4/psi4/files/404462/363_2_in.txt); [363_2_out.txt](https://github.com/psi4/psi4/files/404463/363_2_out.txt)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/455:73,energy,energy,73,https://psicode.org,https://github.com/psi4/psi4/issues/455,11,"['ENERGY', 'Energy', 'energy']","['ENERGY', 'Energy', 'energy']"
Energy Efficiency,"I was using psi4.0 version. However i just compiled the newest version of psi4 from github and obtain now just for one symmetry non-sense : . ```; Excitation Energy OS RS RS Einstein A; State (eV) (cm^-1) (nm) (au) (l,au) (v,au) (s^-1); 1 Ag 12.964 104563.5 95.6 0.476427 0.0000 0.0000 0.0000 0.000000E+00; 2 Ag 16.771 135268.1 73.9 0.616327 0.0000 0.0000 0.0000 0.000000E+00; 3 Ag 18.773 151417.7 66.0 0.689910 0.0000 0.0000 0.0000 0.000000E+00; 4 Ag 25.910 208978.9 47.9 0.952178 0.0000 0.0000 0.0000 0.000000E+00; 1B1g 16.855 135946.1 73.6 0.619416 0.0000 0.0000 0.0000 0.000000E+00; 2B1g 26.177 211129.5 47.4 0.961977 0.0000 0.0000 0.0000 0.000000E+00; 3B1g 30.589 246713.1 40.5 1.124108 0.0000 0.0000 0.0000 0.000000E+00; 4B1g 36.015 290484.5 34.4 1.323545 0.0000 0.0000 0.0000 0.000000E+00; 1B2g 16.855 135946.1 73.6 0.619416 0.0000 0.0000 0.0000 0.000000E+00; 2B2g 26.177 211129.5 47.4 0.961977 0.0000 0.0000 0.0000 0.000000E+00; 3B2g 30.589 246713.1 40.5 1.124108 0.0000 0.0000 0.0000 0.000000E+00; 4B2g 36.015 290484.5 34.4 1.323545 0.0000 0.0000 0.0000 0.000000E+00; 1B3g 0.000 0.0 30667796364.5 0.000000 0.0000 0.0000 0.0000 0.000000E+00; 2B3g 0.000 0.0 20136140996.1 0.000000 0.0000 0.0000 0.0000 0.000000E+00; 3B3g 0.000 0.0 18363592897.3 0.000000 0.0000 0.0000 0.0000 0.000000E+00; 4B3g 0.000 0.0 9232632432.8 0.000000 0.0000 0.0000 0.0000 0.000000E+00; 1 Au 28.127 226859.8 44.1 1.033649 0.0000 0.0000 0.0000 0.000000E+00; 2 Au 38.607 311383.0 32.1 1.418765 0.0000 0.0000 0.0000 0.000000E+00; 3 Au 40.680 328106.5 30.5 1.494963 0.0000 0.0000 0.0000 0.000000E+00; 4 Au 46.518 375194.6 26.7 1.709513 0.0000 0.0000 0.0000 0.000000E+00; 1B1u 13.809 111376.2 89.8 0.507467 0.3270 0.0000 0.0000 2.705606E+09; 2B1u 26.345 212486.8 47.1 0.968161 0.2787 0.0000 0.0000 8.394111E+09; 3B1u 28.418 229205.6 43.6 1.044338 0.0041 0.0000 0.0000 1.426430E+08; 4B1u 34.059 274701.9 36.4 1.251634 0.0003 0.0000 0.0000 1.670004E+07; 1B2u 13.809 111376.2 89.8 0.507467 0.3270 0.0000 0.0000 2.705606E+09; 2B2",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/521#issuecomment-261643092:158,Energy,Energy,158,https://psicode.org,https://github.com/psi4/psi4/issues/521#issuecomment-261643092,1,['Energy'],['Energy']
Energy Efficiency,"I will leave the fix in PSI4 to someone else if you don't mind. I've added a workaround for this issue in our Molden parser. Feel free to take a look: https://github.com/theochem/iodata/blob/596cac8db3d3795eaed704b35c99b71b25447bc1/iodata/formats/molden.py#L506-L536 . If someone wants to code a Python version of the Molden writer, please do so with regression tests. I've gone through some trouble to fix small bugs in the C++ code in previous PRs and it would be a shame to reintroduce similar bugs in a Python rewrite. (It is easy to introduce small mistakes.) In general, to test the generated molden files, one can always load them into the Molden program and check if the total charge is correct, as well as the Mulliken charges, which can be compared to the output of `psi4.oeprop(wfn, ""MULLIKEN_CHARGES"")`. This can be verified with increasing angular momentum of the AO basis and pure versus Cartesian conventions.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1973#issuecomment-665087544:685,charge,charge,685,https://psicode.org,https://github.com/psi4/psi4/issues/1973#issuecomment-665087544,2,['charge'],"['charge', 'charges']"
Energy Efficiency,"I would add that lately we have seen a lot of problems with UHF and ROHF; converging on a wrong state for open-shells in Psi4. Although new stability; analysis code helps a lot in fixing some of the problems (for UHF), for; many of these systems finding the lowest root is quite non-trivial and is; accompanied by many SCF convergence issues, as well as symmetry-breaking; issues (UHF). Things get a lot worse for transition metal compounds (even; simple ones, like Fe(CO)5). The most helpful solution is to start with; basis set projection from a small basis, but this strategy doesn't always; work. Sometimes, combining stability analysis root search and basis set; projection helps. Indeed, other codes (particularly, MOLPRO) sometimes do better job in; finding lowest-energy solutions for systems of this type. Usually, after; investing some time, it is possible to find the necessary solution for; these non-trivial cases with Psi4, but it may be worth investigating some; of these systems for possible improvements in the code. Best wishes,. Alexander. On Thu, Jan 14, 2016 at 9:25 AM, jgonthier notifications@github.com wrote:. > @lothian https://github.com/lothian I guess these other codes are using; > some other convergence accelerator than Psi4 ? I would not be surprised if; > SOSCF with a core guess would converge on the right solution.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/211#issuecomment-171656770.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/211#issuecomment-171659792:772,energy,energy,772,https://psicode.org,https://github.com/psi4/psi4/issues/211#issuecomment-171659792,1,['energy'],['energy']
Energy Efficiency,"I would consider not making VV10 throw an error, since it has negligible effects on the electron density. Najibi and Goerigk write in [doi:10.1021/acs.jctc.8b00842](https://doi.org/10.1021/acs.jctc.8b00842). > While in a strictest sense, energy calculations with vdW-DFAs should be carried out fully self-consistently, we demonstrate conclusively for a total of 11 methods that such a strategy only increases the computational time eﬀort without having any signiﬁcant eﬀect on energetic properties, electron densities, or orbital-energy diﬀerences. The recent analytical frequencies study by Feng, Liang and Head-Gordon in [arXiv:2208.14639](https://arxiv.org/abs/2208.14639) states. > The contribution of VV10 to simulating harmonic frequencies is shown to be small for small molecules but important for systems where weak interactions are important, such as water clusters. That manuscript does have analytical second derivatives, so I guess one could extend it to TDDFT as well?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2849#issuecomment-1380190083:238,energy,energy,238,https://psicode.org,https://github.com/psi4/psi4/pull/2849#issuecomment-1380190083,2,['energy'],['energy']
Energy Efficiency,"I would expect the two attached calculations to give the same result but they don't. The difference is that in one input, the geometry is in angstroms, while in the other the same geometry is specified in Bohr. Somehow, the term `Additional nuclear repulsion` is computed very differently:. ```; $ grep ""nuclear"" */psi4.out; case1/psi4.out: Old nuclear repulsion = 0.529177210670000; case1/psi4.out: Additional nuclear repulsion = 0.330403525088017; case1/psi4.out: Total nuclear repulsion = 0.859580735758017; case2/psi4.out: Old nuclear repulsion = 0.529177525830478; case2/psi4.out: Additional nuclear repulsion = 0.793766288745717; case2/psi4.out: Total nuclear repulsion = 1.322943814576195; ```. In- and outputs attached: [cases.zip](https://github.com/psi4/psi4/files/4586584/cases.zip). Input files for convenience:. `case1/psi4.in`. ```; molecule mol {; 0 1; H 0.0 0.0 0.0; H 0.0 0.0 1.0; units angstrom; symmetry c1; no_reorient; no_com; }. set basis 3-21G. chfield = QMMM(); chfield.extern.addCharge(1.0, 0.0, 0.0, 3.77945); psi4.set_global_option_python('EXTERN', chfield.extern). energy(""SCF""); ```. `case2/psi4.in`. ```; molecule mol {; 0 1; H 0.0 0.0 0.0; H 0.0 0.0 1.889725; units bohr; symmetry c1; no_reorient; no_com; }. set basis 3-21G. chfield = QMMM(); chfield.extern.addCharge(1.0, 0.0, 0.0, 3.77945); psi4.set_global_option_python('EXTERN', chfield.extern). energy(""SCF""); ```. The results for `case2` seem correct while `case1` seems wrong. In both cases, the output mentions the same position of the external charge in atomic untis:. `case1/psi4.out`. ```; ...; => External Potential Field: <= . > Charges [a.u.] < . Z x y z; 1.00000 0.00000 0.00000 3.77945; ...; ```. `case2/psi4.out`. ```; ...; => External Potential Field: <= . > Charges [a.u.] < . Z x y z; 1.00000 0.00000 0.00000 3.77945; ...; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1881:1093,energy,energy,1093,https://psicode.org,https://github.com/psi4/psi4/issues/1881,5,"['Charge', 'charge', 'energy']","['Charges', 'charge', 'energy']"
Energy Efficiency,"I would keep the ""COSX"" for recognition. This PR implements 2 grids instead of 3? That Turbomole team showed it worked well, just asking. I am in general for a simple way of setting quadrature grids, psi4-specific named grids. That is a bigger project though.; Here it would be enough to have an efficient default and in the manual a suggestion how to make a tight/accurate one.; After we gain experience with the psi4 COSX we can make a couple useful defaults. Couple of things about grids later.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2567#issuecomment-1115769652:296,efficient,efficient,296,https://psicode.org,https://github.com/psi4/psi4/pull/2567#issuecomment-1115769652,1,['efficient'],['efficient']
Energy Efficiency,"I would like to implement a faster way to do ESP fits than what is found here:; https://github.com/psi4/psi4numpy/tree/master/One-Electron-Property/Restrained-Electrostatic-Potential. The solution above is writing multiple grids on disk, yet the strength of the python and C++ APIs of Psi4 should be to have these in memory and allow for fast multithreaded evaluations. My development proposal would be a little more involved, but also give the Psi4 API a lot more power. I would split the whole OEProp class into:. OEPropCalc; This class will get all currently existing logic to calculate the requested properties. Most properties are already calculated as SharedMatrix. This class will not be allowed to have any kind of output, unless a bulk property is requested (such as a grid).; OEProp; This class gets all output handling, it will only call the respective OEPropCalc functions and then use the existing code for output. Data will be passed between OEPropCalc and OEProp as SharedPointer and therefore not cost overhead. Exception to this rule would be the functions writing grids, which will get an in-memory and a direct write solution.; Reason:; Currently OEProp sometimes exposes data in memory (such as Mulliken charges using wfn.set_array) and sometimes not (such as Multipoles only via stdout or outfile). The approach above would allow internal code use of SharedMatrices directly (OEPropCalc would get a public python API) and keep existing functionality untouched. Once the split is done, I would also split the GridEvaluation routines to either write a grid-XXX.dat (the existing functionality) or to keep the grids in memory (new functionality) and generate them with a grid taken from memory using the existing GridIterator interface. Are there any objections or is somebody else currently working on this?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1116:465,power,power,465,https://psicode.org,https://github.com/psi4/psi4/issues/1116,2,"['charge', 'power']","['charges', 'power']"
Energy Efficiency,I would like to run minimizations with an additional harmonic constraint such that the input coordinates are favored. The use case is for computing strain energy against a decreasing force.; I am currently running many of these calculations after modifying the code as described here:; http://forum.psicode.org/t/optimization-with-additional-harmonic-constraints/404/2. In essence we are changing lines 196 and 197 in Molecule.cc to this:; // Increase force constant by 5% of initial value per iteration; k = Opt_params.fixed_coord_force_constant;; H[cnt][cnt] += k;; Note: that the forum post has a minor bug: it is not adding the fc to H but just replacing the element in H. Would it be possible to have this as an option in the official build of Psi4? I think this would be useful for other people. Thanks so much!; Alberto,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1079:155,energy,energy,155,https://psicode.org,https://github.com/psi4/psi4/issues/1079,1,['energy'],['energy']
Energy Efficiency,"I would love to see an algorithm for trying to locate the global minimum of the SCF energy, preferably an automated one. This feature would be especially useful for using Psi4 as a backend for _ab-initio_ MD applications. The random orbital rotation scheme (described in [10.1021/acs.jctc.7b00011](https://dx.doi.org/10.1021/acs.jctc.7b00011)) seems like a simple and sensible approach, as it can nudge the SCF out of saddle points, as well as local minima.; This method might also be useful as a last-resort option for cases where the SCF seems impossible to converge: random rotations could be applied to the initial guess. A reference implementation is available at https://github.com/ReiherGroup/OrbitalPerturbation. (under LGPL3, so no worries there)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/888#issuecomment-352274531:84,energy,energy,84,https://psicode.org,https://github.com/psi4/psi4/issues/888#issuecomment-352274531,1,['energy'],['energy']
Energy Efficiency,"I wouldn't know about that, since this patch solved my convergence problems on ROHF calculations, e.g. the example in #423 . Sure, I can switch out the for loops to the versions you suggested; I just adapted the routines from rhf.cc.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/422#issuecomment-228449211:200,adapt,adapted,200,https://psicode.org,https://github.com/psi4/psi4/pull/422#issuecomment-228449211,1,['adapt'],['adapted']
Energy Efficiency,I'd be happy to pick this one up if no one else is working on it. I just want to clarify is the desired behavior of something like this:. set dft_functional b3lyp; energy('scf'). Should this run the dft or HF calculation? (amusing the user or the solution to #118 has set the reference properly) Currently this would do the the HF.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/117#issuecomment-121810936:164,energy,energy,164,https://psicode.org,https://github.com/psi4/psi4/issues/117#issuecomment-121810936,1,['energy'],['energy']
Energy Efficiency,"I'd just like to point out that the `""stage""` keyword can be set to anything (not only `""deltan""`), and it's used only to name the stage within the printing script. Perhaps prepending `""CBS {GRAND_NEED[dc]['d_stage'].upper()} TOTAL ENERGY""` might be safer to avoid possible clashing / overwriting of existing energies by the user?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2034#issuecomment-803274548:232,ENERGY,ENERGY,232,https://psicode.org,https://github.com/psi4/psi4/pull/2034#issuecomment-803274548,1,['ENERGY'],['ENERGY']
Energy Efficiency,"I'd prefer @dgasmith option. As for storage of excitations, I was thinking to modify the return value of the solver to a data structure collecting energy, response vectors, and transition moments for each excitation. `Wavefunction` could hold a dictionary of these, with labeling by irrep (`f""STATE {n} in IRREP {m}""`) or by energy (`f""STATE {n}""`) I think the latter could be more intuitive.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1885#issuecomment-626346287:147,energy,energy,147,https://psicode.org,https://github.com/psi4/psi4/pull/1885#issuecomment-626346287,2,['energy'],['energy']
Energy Efficiency,"I'd prefer not needing to throw in a prefactor at all, but I suppose that's necessary given that `occ` and `dfocc` measure the ""residual"" as the size of the first order update, not the size of the residual proper. No issues there. My thoughts about the CEPA issue are unchanged from my previous comment; as best as I can tell, the energy being within convergence tolerance does not mean all of its spin components are. As for why this doesn't afflict other modules:; * `fnocc` and `occ` compute the energy differently. `fnocc` uses an energy functional that is variational in the amplitudes, where `occ` uses the normal CCD-like energy functional. They'll both agree at convergence, but not at other amplitudes. This difference seems to give `fnocc` its better behaved spin-components.; * There don't seem to be `dfocc` LCCD eneries in the standard suite, so of course those aren't raising errors.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1980#issuecomment-676587339:331,energy,energy,331,https://psicode.org,https://github.com/psi4/psi4/pull/1980#issuecomment-676587339,4,['energy'],['energy']
Energy Efficiency,"I'd prefer sticking to the `energy` call though I can see the appeal of using `tddft(ref_wfn)`. `energy(""TD-B3LYP/c-pVDZ"")` and `energy(""TDA-B3LYP/cc-pVDZ"")` would be cool.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1885#issuecomment-626334781:28,energy,energy,28,https://psicode.org,https://github.com/psi4/psi4/pull/1885#issuecomment-626334781,3,['energy'],['energy']
Energy Efficiency,"I'll defer a more thorough review until after GA Tech's pass, but I do want some input on this, to make sure that properties stay sane. A few preliminary comments. 1. ""ATOMIC_VOLUMES"" computations will fail unless the user has already run ""MBIS_CHARGES"", since grid_, rho_a_points_, rho_a_0_points_, and distances_ won't even be meaningfully defined. Good luck calling the `blocks` method of `nullptr`.; 2. You are making `grid_`, `rho_a_points_`, `rho_a_0_points_`, and `distances_` new members of `PopulationAnalysisCalc`, but these are only needed for MBIS multipoles. Both of these indicate that MBIS_CHARGES and ATOMIC_VOLUMES are more tightly coupled than can be captured with a model of independent property calculations used throughout the rest of the class. Might I suggest that you move atomic volumes to be computed during an MBIS charge calculation, rather than as an independent property?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2056#issuecomment-742530038:842,charge,charge,842,https://psicode.org,https://github.com/psi4/psi4/pull/2056#issuecomment-742530038,1,['charge'],['charge']
Energy Efficiency,"I'm a bit late to this party, but what strikes me as interesting (as Jet; says) is that the spin components printed look OK, but the various; summations at the very bottom of the table are wrong. That smells vaguely; like corruption in one of the summations. -Rob. On Fri, Feb 12, 2016 at 4:02 PM, Ugur Bozkaya notifications@github.com; wrote:. > Now I have install a fresh binary version (Psi4 0.4.16) and run the same; > input and get:; > ; > Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)...; > =======================================================================; > Nuclear Repulsion Energy (a.u.) : 4.91953818754669; > CD-HF Energy (a.u.) : -25.94513055914770; > REF Energy (a.u.) : -25.94513055914770; > Alpha-Alpha Contribution (a.u.) : -0.00171224403804; > Alpha-Beta Contribution (a.u.) : -0.05664223456972; > Beta-Beta Contribution (a.u.) : -0.00005535856885; > Scaled_SS Correlation Energy (a.u.): -0.00058920086896; > Scaled_OS Correlation Energy (a.u.): -0.06797068148366; > CD-SCS-MP2 Total Energy (a.u.) : -26.01369044150033; > CD-SOS-MP2 Total Energy (a.u.) : -26.01876546408834; > CD-SCSN-MP2 Total Energy (a.u.) : -25.94824153973583; > CD-MP2 Correlation Energy (a.u.) : -0.02151506744300; > CD-MP2 Total Energy (a.u.) : -25.96664562659070; > =======================================================================; > ; > I also tried with another older version (Psi4 0.3.137) I still get the; > correct result. Hence, the new version yields wrong result while older; > versions give the correct result. Therefore, it should be related to the; > recent changes were made. I do not know how to fix it.; > @loriab https://github.com/loriab @CDSherrill; > https://github.com/CDSherrill @andysim https://github.com/andysim; > @jturney https://github.com/jturney; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/244#issuecomment-183535595.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/244#issuecomment-183540864:462,energy,energy,462,https://psicode.org,https://github.com/psi4/psi4/issues/244#issuecomment-183540864,11,"['Energy', 'energy']","['Energy', 'energy']"
Energy Efficiency,"I'm a bit puzzled by CAS. The following input; ```; molecule {; 0 1; symmetry c1; C; C 1 1.0; }. set basis cc-pVDZ; set scf_type pk; set restricted_docc [2]; set restricted_uocc [16]; set active [10]; set wfn detci; set NUM_DETS_PRINT 40000; set e_convergence 1e-10; set r_convergence 1e-10; set ci_maxiter 1000; set mcscf_maxiter 100; set nat_orbs true. cas_e, cas_wfn = energy('casscf', return_wfn=True). energy('casscf', ref_wfn=cas_wfn); ```; should do what you suggest, but when I look at the determinants output; ```; * 1 0.817064 ( 1, 1) 3AX 4AX 5AX 7AX ; * 2 -0.477071 ( 2, 2) 3AX 4AX 6AX 7AX ; * 3 -0.081234 ( 15, 15) 3AX 4AX 5AX 9AX ; * 4 -0.079478 ( 10, 10) 3AX 5AX 7AX 8AX ; * 5 0.075356 ( 3, 9) 3AX 4AB 5AA 6AA 7AX 8AB ; ```; the Aufbau determinant has a tiny weight: -5.602591646315e-03. If it's really using NOs, the Aufbau determinant should have significant weight, right?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/556#issuecomment-275616670:372,energy,energy,372,https://psicode.org,https://github.com/psi4/psi4/issues/556#issuecomment-275616670,2,['energy'],['energy']
Energy Efficiency,"I'm able to confirm the report and also simplify the example. (We appreciate the report. We also appreciate examples that are as simple as possible.). ```; ### Setup. molecule dimer {; He; X 1 R ; He 2 1.0 1 180 ; }. set basis 6-31G(d). Rvals = [1.4, 1.5]. ### Compute; ecp = {}; for R in Rvals:; dimer.R = R ; ecp[R] = energy(""mp2""). ### Printout; psi4.print_out(""\n""); psi4.print_out("" R [Ang] E_int [kcal/mol] \n""); psi4.print_out(""-----------------------------------------------------\n""). for R in Rvals:; psi4.print_out("" %3.1f %10.6f\n"" % (R, ecp[R])); ```. The position of atoms defined relative to a dummy atom in a Z-matrix aren't getting updated, it seems. @loriab",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2880#issuecomment-1438951744:320,energy,energy,320,https://psicode.org,https://github.com/psi4/psi4/issues/2880#issuecomment-1438951744,1,['energy'],['energy']
Energy Efficiency,"I'm adding the caution below to the SAPT docs. Together with the caution @robparrish included at the end of the FISAPT docs, it should clarify the situation, as well as summarize this thread. I'm going to close this ticket and add higher-order SAPT to a general Cholesky wishlist ticket. Speak up if there are any objections. ```; .. caution:: To density fit the dispersion terms in SAPT, the RI auxiliary basis ; controlled through |sapt__df_basis_sapt| set performs well. For Fock-type; terms (*i.e.*, electrostatics, exchange, induction, and core Fock matrix; elements in exchange-dispersion), the density-fitting auxiliary basis in; the :ref:`SAPT module<sec:sapt>` (both SAPT0 and higher-order) is RI (more; efficient for the small basis sets at which SAPT0 performs best) while the; :ref:`FISAPT module<sec:fisapt>` uses the more appropriate JKFIT. For; heavier elements (*i.e.*, second-row and beyond), the RI is unsound; (insufficiently flexible). For SAPT0 in the :ref:`SAPT module<sec:sapt>`,; a workaround is to set |sapt__df_basis_elst| (which controls Elst10 and; Exch10 terms) to a JKFIT basis. For higher-order methods in :ref:`SAPT; module<sec:sapt>`, there is no workaround; on-the-fly construction of an; auxiliary basis through Cholesky decomposition (not implemented) is the; long-term solution.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/317#issuecomment-250948669:713,efficient,efficient,713,https://psicode.org,https://github.com/psi4/psi4/issues/317#issuecomment-250948669,1,['efficient'],['efficient']
Energy Efficiency,"I'm afraid it didn't work for me. After printing ""Using old T1 amplitudes"" psi4 goes into solving the amplitudes again and performs the same 18 steps it did in the first interrupted run:. <pre>; Using old T1 amplitudes.; Solving CC Amplitude Equations; ------------------------------; Iter Energy RMS T1Diag D1Diag New D1Diag D2Diag; ---- --------------------- --------- ---------- ---------- ---------- --------; 0 -1.235360138318377 0.000e+00 0.000000 0.000000 0.000000 0.135205; 1 -1.258496281454846 1.123e-01 0.012365 0.042410 0.042410 0.142648; 2 -1.293057476483294 4.944e-02 0.013001 0.044484 0.044484 0.157500; 3 -1.308609725361918 3.006e-02 0.017430 0.062504 0.062504 0.166792; 4 -1.308744865230533 9.227e-03 0.018476 0.067628 0.067628 0.169514; 5 -1.309149882270872 4.350e-03 0.019044 0.071228 0.071228 0.170429; 6 -1.309354583622632 1.527e-03 0.019182 0.072401 0.072401 0.170400; 7 -1.309289325269788 6.083e-04 0.019195 0.072771 0.072771 0.170246; 8 -1.309311983140765 2.175e-04 0.019204 0.072902 0.072902 0.170205; 9 -1.309317616625639 9.166e-05 0.019206 0.072942 0.072942 0.170191; 10 -1.309311723074096 4.260e-05 0.019204 0.072947 0.072947 0.170180; 11 -1.309314106752320 2.049e-05 0.019204 0.072952 0.072952 0.170178; 12 -1.309314722212116 8.774e-06 0.019205 0.072954 0.072954 0.170179; 13 -1.309315551023014 3.974e-06 0.019205 0.072954 0.072954 0.170180; 14 -1.309315536441650 1.739e-06 0.019205 0.072955 0.072955 0.170180; 15 -1.309315490258709 7.682e-07 0.019205 0.072954 0.072954 0.170180; 16 -1.309315447546901 3.279e-07 0.019205 0.072955 0.072955 0.170180; 17 -1.309315455352626 1.686e-07 0.019205 0.072955 0.072955 0.170180; 18 -1.309315454431369 8.202e-08 0.019205 0.072955 0.072955 0.170180; Iterations converged.; </pre>. Am I forgetting about some other restart keyword besides those I mentioned in my first post?. Cheers,; Bartek",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/27#issuecomment-30089484:290,Energy,Energy,290,https://psicode.org,https://github.com/psi4/psi4/issues/27#issuecomment-30089484,1,['Energy'],['Energy']
Energy Efficiency,"I'm attempting to compute the energies of halogens, and keep having convergence problems with B97-3c. Using the below input works with any reasonable functional/basis combination, but not B97-3c. ```python; molecule {; 0 2; Br; }. set reference UHF. # Successful; energy(""HF/6-31G*""); energy(""B3LYP/6-31G*""); energy(""HF-3C""); energy(""B97-3/def2-mTZVP""); energy(""r2SCAN-3c""); energy(""wB97X-3c""). # Fails; energy(""B97-3c""); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3218:264,energy,energy,264,https://psicode.org,https://github.com/psi4/psi4/issues/3218,7,['energy'],['energy']
Energy Efficiency,"I'm finding non-deterministic energies for cd-mp2, depending on amount of extraneous stuff commented in the input file. For example, the below works as is, but gives a different answer when the unused molecules are commented out (not only molecules, but irrelevant keywords can cause the problem, too). The problem shows up in the final output as correlation energy has wrong sign and not matching sum of aa, ab, bb contributions. At first I though it was because you're setting `EcorlL` but printing `Ecorl`, @bozkaya , but that turns out to be innocent. I've got a valgrind if that'll help. ```; molecule methane {; C 0.0000000 0.0000000 3.0826195; H 0.5868776 0.8381742 3.4463772; H -1.0193189 0.0891638 3.4463772; H 0.0000000 0.0000000 1.9966697; H 0.4324413 -0.9273380 3.4463772; }. molecule hf {; H; F 1 0.917; }. molecule bh_h2p {; 1 2; B 0.10369114 0.00000000 0.00000000; H -1.13269886 0.00000000 0.00000000; H 3.00000000 0.37149000 0.00000000; H 3.00000000 -0.37149000 0.00000000; }. set basis cc-pvdz; set scf_type df; set guess sad; set freeze_core true; set e_convergence 8; set d_convergence 7. set reference uhf; set mp2_type cd; energy('mp2'); print_variables(). compare_values(-0.058409837177, get_variable('mp2 correlation energy'), 6, 'mp2 uhf cd: 1 occ*') #TEST. ```. ```; Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)... ; ======================================================================= ; Nuclear Repulsion Energy (a.u.) : 4.91953818754669; CD-HF Energy (a.u.) : -25.94513055914741; REF Energy (a.u.) : -25.94513055914741; Alpha-Alpha Contribution (a.u.) : -0.00171224403804; Alpha-Beta Contribution (a.u.) : -0.05664223456972; Beta-Beta Contribution (a.u.) : -0.00005535856885; Scaled_SS Correlation Energy (a.u.): -0.00058920086896; Scaled_OS Correlation Energy (a.u.): -0.06797068148366; CD-SCS-MP2 Total Energy (a.u.) : -26.01369044150004; CD-SOS-MP2 Total Energy (a.u.) : -26.01876546408805; CD-SCSN-MP2 Total Energy (a.u.) : -25.94824153973553; CD-MP2 Corr",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/244:359,energy,energy,359,https://psicode.org,https://github.com/psi4/psi4/issues/244,1,['energy'],['energy']
Energy Efficiency,"I'm going a bit of topic. I tried to understand how the unit conventions were handled in PSI4 and I'd like to share the things I ran into. I'd suggest to keep it simple and use atomic units everywhere by default. It would be very helpful when any deviation from such a basic rule is made explicit. To keep it simple, the usage of non-atomic units can further limited to reading inputs or writing output files. At the moment, this does not seem to be the case, which is confusing. Some examples:. - The point that confused me in this issue: changing the unit to Angstrom in the molecule section also affects units in the QMMM charges. The latter is an implicit unit convention. I'm glad this is being fixed. If you want to support Angstrom from QMMM charges, add an explicit option for it. Something along the following lines could already be a simple solution:; ```python; embedding_charges = [; [1.0, array([0.0, 0.0, 2.0])*angstrom],; ]; ```. - In `case1/psi4.out`, the positions of the QMMM charges are printed in Angstrom while the preceding header mentions a.u. Also here, the unit convention is implicit, easily leading to confusion. - When looking e.g. at libmints, there seem to be unit conversions buried deep into the code, e.g. related to this issue: https://github.com/psi4/psi4/blob/bf127d90c4b40f2ab6471bd6de4f312c9a149b1d/psi4/src/psi4/libmints/extern.cc#L306-L323; That is just asking for trouble. The only good reason not to use atomic units is to interface with human beings or certain data containers following other conventions. I would suggest to avoid dragging unit conventions all the way into computational parts of the code.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1881#issuecomment-625654314:625,charge,charges,625,https://psicode.org,https://github.com/psi4/psi4/issues/1881#issuecomment-625654314,3,['charge'],['charges']
Energy Efficiency,"I'm going over DFOCC now. It may not help, but certainly won't hurt. The reduced dependencies will improve parallelization, which may not help on Travis but will locally. The redundant files list is super useful, @dgasmith. We should certainly make sure that any functions contained therein are either tested (DFOCC, PSIMRCC, CC*, etc.) or removed (libqt, libciomr).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/525#issuecomment-262127128:73,reduce,reduced,73,https://psicode.org,https://github.com/psi4/psi4/issues/525#issuecomment-262127128,1,['reduce'],['reduced']
Energy Efficiency,"I'm going to adapt the sample file, too, afterwards this can be merged.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2393#issuecomment-1006506830:13,adapt,adapt,13,https://psicode.org,https://github.com/psi4/psi4/pull/2393#issuecomment-1006506830,1,['adapt'],['adapt']
Energy Efficiency,"I'm hoping to do atomic MCHF calculations with Psi4, which amount to small CASSCF calculations. However, I can't get DETCI to run the calculations for me. Take the oxygen atom for example. The 3P state has 4 electrons on the P shell. DETCI correctly determines that there is 1 alpha string (since the shell is fully occupied) and 3 beta strings, but then it says that the CI space only has a single determinant and crashes. Example inputs. ```; molecule {; 0 3; O; }. set basis cc-pVDZ; set reference rohf; set restricted_docc [2, 0, 0, 0, 0, 0, 0, 0]; set active [0, 0, 0, 0, 0, 1, 1, 1]; energy('casscf'); ```; or a lower symmetry; ```; molecule {; symmetry c2h; 0 3; O; }. set basis cc-pVDZ; set reference rohf; set restricted_docc [2, 0, 0, 0]; set active [0, 0, 1, 2]; energy('casscf'); ```. I guess the problem is that DETCI can't find a proper symmetry? Is there a way to circumvent this issue? @CDSherrill ?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1778:590,energy,energy,590,https://psicode.org,https://github.com/psi4/psi4/issues/1778,2,['energy'],['energy']
Energy Efficiency,"I'm not familiar with Chargemol, but it must have some mechanism for providing information about core electrons (the `ncore` that is listed as zero in your provided output); to my knowledge there is no place in the cube file format for this information. The problem you are experiencing is almost certainly because the 28 'missing' electrons are accounted for by an ECP for the iodine atom, so we need some way to tell Chargemol about those.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1113#issuecomment-412845397:22,Charge,Chargemol,22,https://psicode.org,https://github.com/psi4/psi4/issues/1113#issuecomment-412845397,2,['Charge'],['Chargemol']
Energy Efficiency,"I'm not sure I understand how the numbers are different for the case of no charges. If this routine is only computing the potential from external point charges (i.e. not the nuclei), then the routine shouldn't be run at all if there are no external point charges!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1946#issuecomment-656570890:75,charge,charges,75,https://psicode.org,https://github.com/psi4/psi4/pull/1946#issuecomment-656570890,3,['charge'],['charges']
Energy Efficiency,"I'm not sure how often `oeprop` really gets called directly in an input, so this is an interesting case. I'm actually tempted to say this is ""expected"" behavior - if you're not calling `oeprop` within the pre-built workflow of another method, maybe it shouldn't get a name unless you specify one. . the only issue is you may not be confident in _how_ the dipole was calculated - e.g. if you run a CCSD energy calculation, then call `oeprop`, does it form the CCSD density and contract with the dipole integrals? generally we only update the density in `properties`, so I'd wager you would actually get the SCF dipole back out. if I recall, it should be printed in the output file which density is used, but if you pull results directly from the python output then you won't necessarily know.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2203#issuecomment-869187545:402,energy,energy,402,https://psicode.org,https://github.com/psi4/psi4/issues/2203#issuecomment-869187545,1,['energy'],['energy']
Energy Efficiency,"I'm not sure if there are any Gaussian codes that have the Yukawa kernels. However, I do have the Yukawa kernels in HelFEM for atomic calculations, and for `hyb_gga_xc_camy_b3lyp` I get the following energies. | atom | energy |; |--------|-----------|; | He | -2.90309239 |; | N | -54.59195697 |; | Ne | -128.96948058 |. If you run the calculations in Psi4 with the AHGBS-9 basis (available from the BSE) and a large quadrature grid like (250, 590), you should be able to match these to sub-microhartree accuracy.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2386#issuecomment-997412944:219,energy,energy,219,https://psicode.org,https://github.com/psi4/psi4/pull/2386#issuecomment-997412944,1,['energy'],['energy']
Energy Efficiency,I'm not sure what you're asking... Do you want to calculate the kinetic energy matrix T using DFT quadrature?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1734#issuecomment-541356534:72,energy,energy,72,https://psicode.org,https://github.com/psi4/psi4/issues/1734#issuecomment-541356534,1,['energy'],['energy']
Energy Efficiency,"I'm not sure why the Aufbau determinant has such a small weight, so that's; a bit of a mystery. But I'm a little surprised you would want to run this; particular procedure. If you ran a CASSCF and got its natural orbitals, and then fed those; orbitals to a CASSCF, you should get exactly the same energy, because the; natural orbitals of a CAS just rotate the active space orbitals amongst; themselves, and the CAS energy is (by definition) invariant to rotations; within the active space. I suppose you could do this if you just wanted to; see how the CI coefficients changed if you used natural orbitals as the; one-particle basis. More typical, if you had trouble converging the CASSCF, would be to run an; initial MP2 or CISD (with no frozen virtuals) and get natural orbitals out; of that, and then do a CAS with those starting orbitals. As Daniel says, we may not have a great mechanism right now to do this with; MP2 NO's (we'll have to work on that). But, if it's a small molecule,; running a CISD initially and getting NO's from that should work. Although,; again, you'd need to be sure to change the keywords ... something like this:. set restricted_uocc [0]; ci_e, ci_wfn = energy('cisd', return_wfn=True). set restricted_uocc [16]; energy('casscf', ref_wfn=ci_wfn). Regarding the original question, though, do you get the same energy out of; the 2nd CASSCF (within convergence criteria)?. On Fri, Jan 27, 2017 at 3:51 AM, Susi Lehtola <notifications@github.com>; wrote:. > I'm a bit puzzled by CAS. The following input; >; > molecule {; > 0 1; > symmetry c1; > C; > C 1 1.0; > }; >; > set basis cc-pVDZ; > set scf_type pk; > set restricted_docc [2]; > set restricted_uocc [16]; > set active [10]; > set wfn detci; > set NUM_DETS_PRINT 40000; > set e_convergence 1e-10; > set r_convergence 1e-10; > set ci_maxiter 1000; > set mcscf_maxiter 100; > set nat_orbs true; >; > cas_e, cas_wfn = energy('casscf', return_wfn=True); >; > energy('casscf', ref_wfn=cas_wfn); >; > should do what you sug",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/556#issuecomment-275696618:297,energy,energy,297,https://psicode.org,https://github.com/psi4/psi4/issues/556#issuecomment-275696618,2,['energy'],['energy']
Energy Efficiency,"I'm running a single point energy calculation with `psi4.energy(""ccsd(t)/aug-cc-pvdz"")`. . The input is simple. Just:. ```; import psi4; from psi4 import *. psi4.core.set_output_file('xxx.dat', False). psi4.set_memory('200 GB'); psi4_io = core.IOManager.shared_object(); psi4_io.set_default_path(""xxx""); psi4.set_num_threads(24); ```; followed by the molecule specification with `psi4.geometry()` and then; ```; psi4.energy(""ccsd(t)/aug-cc-pvdz""); ```. (I know this will take a lot of memory and disk space, but I believe the memory limit should stand.). - psi4 version 1.3.2 in a new python 3.7 conda environment; - RHEL 7.6",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1985#issuecomment-679407019:27,energy,energy,27,https://psicode.org,https://github.com/psi4/psi4/issues/1985#issuecomment-679407019,3,['energy'],['energy']
Energy Efficiency,"I'm seeing a crash in cdomp2-2 for 1.0rc on Debian unstable:. ```; Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)...; =======================================================================; Nuclear Repulsion Energy (a.u.) : 25.59060766929188; CD-HF Energy (a.u.) : -129.25927206477397; REF Energy (a.u.) : -129.25927206477397; Alpha-Alpha Contribution (a.u.) : -0.03921205696199; Alpha-Beta Contribution (a.u.) : -0.20476196654188; Beta-Beta Contribution (a.u.) : -0.03692010667753; Scaled_SS Correlation Energy (a.u.): -0.02537738787984; Scaled_OS Correlation Energy (a.u.): -0.24571435985026; CD-SCS-MP2 Total Energy (a.u.) : -129.53036381250408; CD-SOS-MP2 Total Energy (a.u.) : -129.52546262127842; CD-SCSN-MP2 Total Energy (a.u.) : -129.39326467277954; CD-MP2 Correlation Energy (a.u.) : -0.28089413018141; CD-MP2 Total Energy (a.u.) : -129.54016619495539; =======================================================================. Number of alpha independent-pairs:172; Number of beta independent-pairs :157. ==============================================================================; ================ Performing CD-OMP2 iterations... ============================; ==============================================================================; Minimizing CD-MP2-L Functional; ------------------------------; Iter E_total DE RMS MO Grad MAX MO Grad RMS T2; ---- --------------- ---------- ----------- ----------- ----------; 1 2171897840405125233095316875881590551467307175332860142219670350830780702696283291230457729657914921746891661667264776735054294112163359650172177568018543474023361651834998812756231127668278305330007498940536320077394375160362584676926576578513365418212288803914428069938462720.0000000000 2.17e+276 inf 1.41e+183 8.10e+89; An error has occurred python-side. Traceback (most recent call last):. File ""<string>"", line 40, in <module>. File ""/build/psi4-lIOjn9/psi4-1.0~rc/share/python/driver.py"", line 444, in energy; wfn = procedures['energy'][lowername](l",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/391:84,energy,energy,84,https://psicode.org,https://github.com/psi4/psi4/issues/391,11,"['Energy', 'energy']","['Energy', 'energy']"
Energy Efficiency,"I'm sorry, but the issue does not seem to be fully solved... Yes now the atom nr in the header of the cube file is correct:; ```; Psi4 Gaussian Cube File.; Property: Dt [e/a0^3]. Isocontour range for 85% of the density: (0.0571983,0); 5 -12.329260 -10.002258 -9.679907; 131 0.160000 0.000000 0.000000; 120 0.000000 0.160000 0.000000; 122 0.000000 0.000000 0.160000; 53 0.000000 0.438284 -0.000000 -0.000001; 6 0.000000 -3.552440 -0.000000 -0.000001; 1 0.000000 -4.296614 -1.929221 -0.000001; 1 0.000000 -4.296803 0.964516 1.670895; 1 0.000000 -4.296614 0.964705 -1.670708. ```; But the integrated electrons in the cube file still misses alot of electrons. I use the cube file as input for the Chargemol code, and it works perfect for all other than molecules with Iodine as in this example. ```; Starting DDEC program; 2018/08/14 12:53:41; Copyright (c) 2014, 2015, 2016 by Thomas A. Manz and Nidia Gabaldon Limas. Rights reserved.; ; **************** THREAD INFORMATION ******************; Job running using OpenMP.; The number of parallel threads is: 4; ; ******************************************************; ; /home/termo/chargemol_09_26_2017/atomic_densities/ ; ; ******************** TIME CONTROL ********************; Starting format_total_cube_density; ******************************************************; ; inputfile = ""total_density.cube""; parameters; 5.0000000000000000 -12.329260000000000 -10.002257999999999 -9.6799070000000000 ; 131.00000000000000 0.16000000000000000 0.0000000000000000 0.0000000000000000 ; 120.00000000000000 0.0000000000000000 0.16000000000000000 0.0000000000000000 ; 122.00000000000000 0.0000000000000000 0.0000000000000000 0.16000000000000000 ; sum_negative_density= 0.0000000000000000 ; center_nabc =; 80 63 60; 55 63 60; 50 50 60; 50 69 71; 50 69 50; delta_na= 61; delta_nb= 61; delta_nc= 61; ; ******************** TIME CONTROL ********************; Starting check_grid_spacing; ******************************************************; ; The grid spacing in y",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1113#issuecomment-412835074:693,Charge,Chargemol,693,https://psicode.org,https://github.com/psi4/psi4/issues/1113#issuecomment-412835074,1,['Charge'],['Chargemol']
Energy Efficiency,"I'm sure Stanton knows what he is talking about here, but I am not sure; there is a discrepancy between what he is saying and what I am saying.; Perhaps he never coded the minimal displacement approach, as we have never; coded it either. He may have decided the robustness and simplicity of +2/3; gradients was better than the complexity and complication of solving all; these little equations. I don't see a problem with you going ahead as you; are planning for pyvib2. We could revisit to try to reduce the; computational cost slightly at a later time. On Fri, Jan 19, 2018 at 12:43 PM, Lori A. Burns <notifications@github.com>; wrote:. > @psi-rking <https://github.com/psi-rking>, my concern is your insistence; > that the rot SALCs *aren't* needed at non-stationary geometries (""3; > rotational degrees for which the energy is invariant"", ""don't have to do; > the extra displacements"") vs. Stanton's insistence that they *are* (""At a; > stationary point on the potential energy surface, both options will give; > equivalent harmonic force fields, but OFF [retains the rotational degrees; > of freedom] should be used at non-stationary points."" Since pyvib2 has to; > start from Cartesian Hessians (findif or anal.), I'm just trying to gauge; > what situations the former is valid for.; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/884#issuecomment-359053844>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/ADguTPrMzI8UDltN7yLjOYyEfycGPrnAks5tMOJIgaJpZM4REtHr>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/884#issuecomment-359059459:498,reduce,reduce,498,https://psicode.org,https://github.com/psi4/psi4/issues/884#issuecomment-359059459,3,"['energy', 'reduce']","['energy', 'reduce']"
Energy Efficiency,"I'm taking a look at this in pyoptking and hit the scf issue described above (after deactivating the torsion error). @loriab `""guess"" : ""read""` is being sent to psi4 in the `AtomicInput`. Is `read` expected to work with a standard energy call followed by a call through `run_qcschema`?. I get:; `Unable to find file 180, defaulting to SAD guess.` . If psi4 is looking in `$PSI_SCRATCH` I don't see file 180 there.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2213#issuecomment-870088078:231,energy,energy,231,https://psicode.org,https://github.com/psi4/psi4/issues/2213#issuecomment-870088078,1,['energy'],['energy']
Energy Efficiency,"I'm trying to calculate a potential energy surface for H2O double dissociation in a (4e,4o) active space using the input; ```; molecule h2o {; 0 1; symmetry c1; units bohr; O; H 1 R; H 1 R 2 110.6; }. R0=1.84345. set basis cc-pVTZ; set scf_type pk; h2o.R=3*R0; scf_e, scf_wfn = energy('scf', return_wfn=True). set frozen_docc [ 3 ]; set active [ 4 ]; set qc_module detci; set r_convergence 1e-8; set e_convergence 1e-10; set ci_maxiter 1000; set mcscf_algorithm ah. for ir in range(30, 7, -1):; h2o.R=R0*ir/10; print(h2o.R); if ir == 30:; cas_e, cas_wfn = energy('casscf', ref_wfn=scf_wfn, return_wfn=True); else:; cas_e, cas_wfn = energy('casscf', ref_wfn=cas_wfn, return_wfn=True); ```. Judging from output.dat, the run appears to crash in DiskJK for the third step. Somewhat oddly, if I look at the occupation numbers for the second step, I see; ```; Active Space Natural occupation numbers:. A 1620.561712 A 1145.170647 A 761.060310; A 410.061564; ```; whereas in the first step they're still sane; ```; Active Space Natural occupation numbers:. A 1.119206 A 1.083963 A 0.916038; A 0.880793; ```. What's going on here?!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/758:36,energy,energy,36,https://psicode.org,https://github.com/psi4/psi4/issues/758,4,['energy'],['energy']
Energy Efficiency,"I'm trying to perform SAPT calculations with the aug-cc-PV5Z bases set for the interaction between helium gas and ammonia. However, getting the error describe below. Memory set to 26.077 GiB by Python driver.; Threads set to 12 by Python driver. QcdbException BasisSetNotFound: BasisSet::construct: Unable to find a basis set for atom 5 for key JKFIT among:; Shell Entries: ['HE']; Basis Sets: [('aug-cc-pv5z-jkfit', 'aug-cc-pv5z-jkfit', None)]; File Path: /home/sandro/Desktop/teste_He-aug-cc-pv5z, /home/sandro/Desktop/teste_He-aug-cc-pv5z, /home/sandro/miniconda3/envs/venv_psi4/share/psi4/basis; Input Blocks: . Traceback (most recent call last):; File ""run_GN_NH3_inter_var.py"", line 402, in <module>; eel = calcula_energia(metodo, base, dimero, fator_conv)[0]; File ""run_GN_NH3_inter_var.py"", line 73, in calcula_energia; psi4.energy(f'{metodo}/{base}'); File ""/home/sandro/miniconda3/envs/venv_psi4/lib/python3.8/site-packages/psi4/driver/driver.py"", line 501, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/sandro/miniconda3/envs/venv_psi4/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 4394, in run_sapt; dimer_wfn = scf_helper('RHF', molecule=sapt_dimer, **kwargs); File ""/home/sandro/miniconda3/envs/venv_psi4/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 1576, in scf_helper; scf_wfn = scf_wavefunction_factory(name, base_wfn, core.get_option('SCF', 'REFERENCE'), **kwargs); File ""/home/sandro/miniconda3/envs/venv_psi4/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 1231, in scf_wavefunction_factory; aux_basis = core.BasisSet.build(wfn.molecule(), ""DF_BASIS_SCF"",; File ""/home/sandro/miniconda3/envs/venv_psi4/lib/python3.8/site-packages/psi4/driver/p4util/python_helpers.py"", line 85, in _pybuild_basis; bs, basisdict = qcdb.BasisSet.pyconstruct(mol.to_dict(),; File ""/home/sandro/miniconda3/envs/venv_psi4/lib/python3.8/site-packages/psi4/driver/qcdb/libmintsbasisset.p",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2989:833,energy,energy,833,https://psicode.org,https://github.com/psi4/psi4/issues/2989,1,['energy'],['energy']
Energy Efficiency,"I'm trying to reproduce some dmrg calculations in the literature on polyenes in the STO-3G basis set. However, I get the following error. ```; ###########################################################; ### ###; ### DMRG-SCF ###; ### ###; ### CheMPS2 by Sebastian Wouters ###; ### https://github.com/SebWouters/CheMPS2 ###; ### Comput. Phys. Commun. 185 (6), 1501-1514 (2014) ###; ### ###; ###########################################################. Number of variables in the x-matrix = 342; CheMPS2 output is temporarily written to the file output.dat.chemps2 and will be copied here.; iwl_buf_init: Can't open file 33; An error has occurred python-side. Traceback (most recent call last):. File ""<string>"", line 80, in <module>. File ""/global/home/groups-sw/mhg/psi4/install/share/psi4/python/driver.py"", line 444, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs). File ""/global/home/groups-sw/mhg/psi4/install/share/psi4/python/procedures/proc.py"", line 2686, in run_dmrgci; dmrg_wfn = psi4.dmrg(ref_wfn). RuntimeError: ; Fatal Error: PSIO Error; Error occurred in file: /global/home/groups-sw/mhg/psi4/psi4.git/src/lib/libpsio/error.cc on line: 128; The most recent 5 function calls were:. psi::PsiException::PsiException(std::string, char const*, int); psi::psio_error(unsigned int, unsigned int); psi::PSIO::read(unsigned int, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::IWL::fetch(); psi::DiskJK::compute_JK(); ```. when I try to run a calculation with. ```; numOrbitals = [ 47 , 9 ]; R(O)HF DOCC = [ 28 , 4 ]; R(O)HF SOCC = [ 0 , 1 ]; frozen_docc = [ 9 , 0 ]; active = [ 38 , 9 ]; virtual = [ 0 , 0 ]; nElectrons = 65; nEl. active = 47; ```. I'm having trouble seeing why this would fail. First of all, the scratch partition on the node has over 2 TB of free space, and second, there are only 65 basis functions in the system, so even if one didn't use any kind of symmetries for the repulsion integrals, one would",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/464:823,energy,energy,823,https://psicode.org,https://github.com/psi4/psi4/issues/464,2,['energy'],['energy']
Energy Efficiency,"I'm trying to run some FCI calculations without symmetry to ensure I land on the ground state. However, the SCF is sometimes very hard to do without symmetry, so I'd like to run SCF with symmetry, switch symmetry off and check if I'm still at a stable solution. However, I find I'm unable to change my molecule for symmetry constraints (or charge/multiplicity for that matter). The following input; ```; molecule sym {; 0 1; H 0.459619 0.000000 0.000000; H 0.000000 0.459619 0.000000; }. set basis STO-3G; energy('scf'). molecule nosym {; 0 1; H 0.459619 0.000000 0.000000; H 0.000000 0.459619 0.000000; }. set scf guess read; energy('scf'); ```; runs the first SCF, but crashes on the second with; ```; RuntimeError: ; Fatal Error: SCF guess was set to SAD, but sad_basissets_ was empty!. Error occurred in file: /home/work/psi4/psi4/psi4/src/psi4/libscf_solver/sad.cc on line: 659; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::scf::HF::compute_SAD_guess(); psi::scf::HF::guess(); psi::scf::HF::initialize(); psi::scf::HF::compute_energy(); ```; Oddly, it appear that while in the second run; ```; ==> Algorithm <==. SCF Algorithm Type is DF.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is READ.; Energy threshold = 1.00e-06; Density threshold = 1.00e-06; Integral threshold = 0.00e+00; ```; the initialization uses; ```; ==> Integral Setup <==. ==> DFJK: Density-Fitted J/K Matrices <==. J tasked: Yes; K tasked: Yes; wK tasked: No; OpenMP threads: 1; Integrals threads: 1; Memory (MB): 375; Algorithm: Core; Integral Cache: NONE; Schwarz Cutoff: 1E-12; Fitting Condition: 1E-12. => Auxiliary Basis Set <=. Basis Set: file /home/work/psi4/install/share/psi4/basis/def2-svp-jkfit.gbs; Number of shells: 12; Number of basis function: 36; Number of Cartesian functions: 40; Spherical Harmonics?: true; Max angular momentum: 2. Minimum eige",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/586:340,charge,charge,340,https://psicode.org,https://github.com/psi4/psi4/issues/586,3,"['charge', 'energy']","['charge', 'energy']"
Energy Efficiency,"I'm trying to run some simple x2c jobs using the new Karlsruhe x2c basis sets. The SVP jobs run fine, but the larger basis sets cause problems. For instance,; ```; molecule {; units bohr; 0 1; Ag; Ag 1 4.60; }. set basis x2c-TZVPall-decon; set basis_relativistic x2c-TZVPall-decon; set relativistic x2c; set scf_type direct; set df_scf_guess false; set dft_radial_points 99; set dft_spherical_points 590. energy('svwn'); ```; fails to converge. For SVP, I get; ```; The 1-norm of |H_X2C - H_Dirac| is: 0.000000088631; ```; but for TZVP; ```; The 1-norm of |H_X2C - H_Dirac| is: 181094.365380967443. WARNING: The X2C and Dirac Hamiltonians have substatially different eigenvalues!; This is probably caused by the recontraction of the basis set.; ```. This must be related to linear dependencies in the basis. pyscf appears to run the same calculations without problems. It uses a threshold for small exponents for the small exponents (https://programtalk.com/vs2/python/12572/pyscf/scf/x2c.py/ line 68); maybe one should also be used in psi4?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/868:405,energy,energy,405,https://psicode.org,https://github.com/psi4/psi4/issues/868,1,['energy'],['energy']
Energy Efficiency,"I'm trying to use the orbitals from one SCF as the guess for computations on similar structures. I'm trying to follow this procedure: [https://psicode.org/psi4manual/master/scf.html#restarting-the-scf](https://psicode.org/psi4manual/master/scf.html#restarting-the-scf). I'm using Psi4 1.5 e9f4d6d on windows subsystem linux. The input file for the initial energy is:; ```py; set_num_threads(8); basis {; assign def2-SVP; }. molecule {; 0 1; C 1.13408 -0.39513 0.82671; C 0.24384 -0.10727 1.77918; C 1.25947 0.48184 -0.37564; C -1.70320 -0.60897 -0.07371; C -1.08313 0.35853 -0.75350; O 0.15798 0.21455 -1.28105; H 1.61155 -1.37871 0.79725; H -0.00411 -0.81057 2.57479; H -0.26633 0.85763 1.80344; H 2.16195 0.28247 -0.96305; H 1.24281 1.54792 -0.09693; H -1.24645 -1.58985 0.04960; H -2.69979 -0.44218 0.33707; H -1.53347 1.35513 -0.87676; }. nrg, wfn = energy('M06-2X', return_wfn=True); wfn.to_file(""test_restart""); ```. This creates a ""test_restart.npy"" file. I then try to compute the energy for the same molecule using this test_restart.npy file and a different input file:. ```py; set_num_threads(8); basis {; assign def2-SVP; }. molecule {; 0 1; C 1.13408 -0.39513 0.82671; C 0.24384 -0.10727 1.77918; C 1.25947 0.48184 -0.37564; C -1.70320 -0.60897 -0.07371; C -1.08313 0.35853 -0.75350; O 0.15798 0.21455 -1.28105; H 1.61155 -1.37871 0.79725; H -0.00411 -0.81057 2.57479; H -0.26633 0.85763 1.80344; H 2.16195 0.28247 -0.96305; H 1.24281 1.54792 -0.09693; H -1.24645 -1.58985 0.04960; H -2.69979 -0.44218 0.33707; H -1.53347 1.35513 -0.87676; }. nrg, wfn = energy('M06-2X', return_wfn=True, restart_file=""test_restart""); ```. However, I get the following error :. ```; Traceback (most recent call last):; File ""/home/tony/psi4conda/bin/psi4"", line 333, in <module>; exec(content); File ""<string>"", line 44, in <module>; File ""/home/tony/psi4conda/lib//python3.8/site-packages/psi4/driver/driver.py"", line 599, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **k",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2571:356,energy,energy,356,https://psicode.org,https://github.com/psi4/psi4/issues/2571,2,['energy'],['energy']
Energy Efficiency,"I'm using icpc 16.0.1 and I get the same failing test, scf5 with:. ```; PsiException: Singlet PK CUHF energy: computed value (-149.6304503) does not match (-149.5905972) to 6 decimal places.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/322#issuecomment-227418754:102,energy,energy,102,https://psicode.org,https://github.com/psi4/psi4/issues/322#issuecomment-227418754,1,['energy'],['energy']
Energy Efficiency,"I'm using psi4 through the Python API. I want to compute both the energy and the gradient for a molecule. I can do that by calling `psi4.energy()` and `psi4.gradient()`, but that repeats the entire calculation and takes twice as long as it needs to. How can I retrieve both of them without having to repeat the calculation?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2878:66,energy,energy,66,https://psicode.org,https://github.com/psi4/psi4/issues/2878,2,['energy'],['energy']
Energy Efficiency,"I've PR'd to this PR a fix for all the recent ghost/ECP issues (https://github.com/PeterKraus/psi4/pull/2). This is all sidestepping the true problem, which is that we're overloading `mol->Z()` to be atomic number, ghostedness, and non-ECP charge. Errors downstream of libmints Molecule are going to keep popping up, methinks. In fact, I should probably check the mol->json procedure. Thoughts on a forward strategy?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1109#issuecomment-409411582:240,charge,charge,240,https://psicode.org,https://github.com/psi4/psi4/pull/1109#issuecomment-409411582,1,['charge'],['charge']
Energy Efficiency,"I've added a new test called fsapt-ext that uses a water trimer, performing F-SAPT on two waters and representing the third as an external potential with TIP3P charges. The test runs in less than a minute on my machine. I've left the fsapt-ref folder as this is part of the output of the FISAPT module. I also verified that the test breaks without my revisions.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1608#issuecomment-492705223:160,charge,charges,160,https://psicode.org,https://github.com/psi4/psi4/pull/1608#issuecomment-492705223,1,['charge'],['charges']
Energy Efficiency,I've built a 10 once for Susi. Compilation time isn't too bad when it's only energy ints -- Hessians are painful. The real obstacle is storage space for the conda pkg. But maybe EFV knows reasons to be suspicious.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1341#issuecomment-1124284720:77,energy,energy,77,https://psicode.org,https://github.com/psi4/psi4/issues/1341#issuecomment-1124284720,1,['energy'],['energy']
Energy Efficiency,"I've finally managed to get your branch to compile on my machine (Libint was throwing a fit like it always does whenever I want to do anything), so hopefully I can get to the bottom of the non-zero values soon. I get the correct SCF energy with libecpint through my (non-Psi4) code, so it has to be a wrapping issue. Edit: see below - it was indeed a wrapping issue.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2135#issuecomment-803690980:233,energy,energy,233,https://psicode.org,https://github.com/psi4/psi4/pull/2135#issuecomment-803690980,1,['energy'],['energy']
Energy Efficiency,"I've got trouble calculation H2:. ``` python; import numpy as np; memory 50 Gb. molecule H2 {; 0 1; H; H 1 R; units au; }. set {; SCF_TYPE PK; diag_method rsp; MAXITER 40; NUM_ROOTS 5; basis cc-pvdz; }. rlist = np.arange(1.00, 10.1, 0.1). for r in rlist:; H2.R = r; energy('fci'); ```. It calculates the first point and then I get:. ``` python; PSIO_ERROR: unit = 53, errval = 13; PSIO_ERROR: 13 (no such TOC entry); Traceback (most recent call last):; File ""<string>"", line 36, in <module>; File ""share/psi/python/driver.py"", line 576, in energy; procedures['energy'][lowername](lowername, **kwargs); File ""share/psi/python/proc.py"", line 1969, in run_detci; psi4.detci(); RuntimeError: PSIO Error; ```. This is done with 14c78eab",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/83:266,energy,energy,266,https://psicode.org,https://github.com/psi4/psi4/issues/83,3,['energy'],['energy']
Energy Efficiency,"I've just issued a pull request with some changes to the fixed-coordinate optimizations. With that code, I am able to get a good dihedral scan for HOOH in C2 with the input below. (A reminder that, in general, such scans can have erratic jumps since this is not following an IRC, but HOOH is so well-behaved the result is smooth and symmetric anyway.). ```; molecule HOOH {; 0 1; H; O 1 0.90; O 2 1.40 1 100.0; H 3 0.90 2 100.0 1 -175.0; }. set {; basis 6-31G*; scf_type df; guess sad; ints_tolerance 1.0E-8; }. start_angle = -175.0; steps = 36; step_size = 10. dihedrals = [""1 2 3 4 {}"".format((counter * step_size) + start_angle) for counter in range(0, steps)]. SCF_Energies = []. for dihedral in dihedrals:; set optking { fixed_dihedral = $dihedral }; optimize('scf'); SCF_Energies.append( psi4.get_variable('CURRENT ENERGY') ). for i in range(steps):; print ""%10s%20.10f"" % (start_angle+i*step_size, SCF_Energies[i]); ```. Note that at present the optimizer does not of its own volition head through the discontinuity at 180, even if that path is the shortest to the fixed value. Thus, I began at -175 and started up.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/10#issuecomment-202577523:821,ENERGY,ENERGY,821,https://psicode.org,https://github.com/psi4/psi4/issues/10#issuecomment-202577523,1,['ENERGY'],['ENERGY']
Energy Efficiency,"I've just noticed that this is meant for the 1.3 release. I'll have another look at it and will implement both `freeze_core True/False` and `freeze_core 0/-1/-2/-3` options, where `False == 0` witout FC, `True` is the ""smart handling"" (previous rare gas of each atom, taking into account charge), and `-1/-2/-3` would be ""strict"" N-th previous rare gas, ignoring charge but throwing a reasonable error when all electrons are frozen. I will have it done by Monday, if that's OK?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1350#issuecomment-451187734:288,charge,charge,288,https://psicode.org,https://github.com/psi4/psi4/pull/1350#issuecomment-451187734,2,['charge'],['charge']
Energy Efficiency,"I've looked at this a little more. The issue is that DETCI was written assuming that one wants to find a; wavefunction of a definite irreducible representation. So, within D2H, or; C2H, your 3 determinants have different symmetries. I think the only; subgroup in which they will have the same irrep is if it is run in C1. So, I tried setting it up in C1. It runs, but it just gives the HF energy; back. Why? Well, even if we tell the program ""C1"", the system still has; the underlying atomic symmetry (D2H being the highest Abelian subgroup).; Under D2H symmetry, those 3 determinants won't mix, and they don't. Of course, the *true* symmetry of the molecule is atomic symmetry, higher; than D2H. But unfortunately we only have Abelian subgroups in Psi. I am not sure offhand if one could force a mixing by deliberately breaking; the symmetry of the orbitals, or by using a different guess CI vector. I'd; have to think about that a little more. It might be that to do what you; are trying to do and get a fully-spin-adapted multi-configurational; wavefunction, one would need to use actual spherical harmonic atomic; orbitals, not the Cartesian representations p_x, p_y, p_z. On Wed, Jan 8, 2020 at 1:52 PM David Sherrill <prof.david.sherrill@gmail.com>; wrote:. > Hm, nope, that doesn't get around the problem. I'll see if I can take a; > look if I get a minute free later.; >; > On Wed, Jan 8, 2020 at 1:46 PM David Sherrill <; > prof.david.sherrill@gmail.com> wrote:; >; >> This is one of those rare cases where the HF reference actually has some; >> influence. (Usually, we say that the HF is ""irrelevant"" in a CASSCF; >> computation). The issue is that the code can't determine what irrep; >> your target wavefunction is supposed to be, because you haven't given it; >> information about the orbital occupancy of the reference HF wavefunction.; >> I think if you specified docc [] and socc [] arrays for the reference; >> high-spin triplet, the code would have a much better chance to figure out",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1778#issuecomment-572253043:389,energy,energy,389,https://psicode.org,https://github.com/psi4/psi4/issues/1778#issuecomment-572253043,1,['energy'],['energy']
Energy Efficiency,"I've made changes and then had only the opt-irc-2 test case fail. Now I notice that others are having problems: https://testboard.org/cdash/testSummary.php?project=3&name=opt-irc-2&date=2016-02-27 . This is only a slight discrepancies at the end of a long IRC. In my case, at least, the number of IRC steps is the same. Do convergence keyword need tightening to preserve the reference progress of the IRC? Or does the compare_values check just need loosening to account for variance after many many optimization cycles? @avcopan, could you investigate?. Energy of last IRC point: computed value (-92.869134) does not match (-92.868907) to 5 decimal places.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/290:554,Energy,Energy,554,https://psicode.org,https://github.com/psi4/psi4/issues/290,1,['Energy'],['Energy']
Energy Efficiency,"I've merged all your changes into the development repository. (Except for the grendel changes- there would have been some doubly defined functions, and I think grendel is only intended to work with Python 2.7. There's no test cases for it.) fd-freq-energy is fixed, too. It just needed comments instead of an exit(). Your changes will appear in the next release (and we'll try not to re-introduce the Python 2 syntax), but if it would help your github stats, we can merge your pull requests into the psi4release flat repo. I'll keep your format_kwargs_for_input suggestion in mind. The file written by that has to pass through the inputparser minimally scathed, which might be tricker in binary. I suspect the whole process needs to be rejiggered (for python 3 and other considerations). We've considered setting up nightly builds/tests/valgrinds of the code. Buildbot certainly looks well-suited for this, and I'll bring it up the next time we're contemplating this. One complication for its use from your intent is that the research groups actively stifle variety in architecture/OS/library versions for sanity in running jobs. Most development is done on Mac laptops, and most production runs are on various Linux flavors/intel compilers/Python 2.6/2.7. But automated testing is certainly something we should do, if we can gather a suitable variety of unused boxes. I'm glad to hear you're a convert to psi4. Please do let us know of any other problems you find or features that would be particularly useful.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/9#issuecomment-20587095:249,energy,energy,249,https://psicode.org,https://github.com/psi4/psi4/pull/9#issuecomment-20587095,1,['energy'],['energy']
Energy Efficiency,"I've never really liked having `def property(` out on it's own. That is, I think it needs to be for driver routing purposes for the same reason `def run_dfmp2` and `def run_dfmp2_gradient` are different. For user-facing, I find `energy('mp2')` and `property('mp2')` too alike. I'd rather `properties=[]` was just a kwarg passed on to any of e(), g(), o(), f(), h() (with the understanding that an extra calc would be taken at the end of o()). But that's a large can of worms, so I'll just mention it as why I like properties as a kwarg. So I like the kwarg for that reason. I don't mind the look of `*args` in oeprop, as certainly that the most important info being conveyed to the fn, though we scarcely ever use `*args` otherwise. I think the syntax of the c-side option is rather ungainly. Python-wise I'd love to do getters and setters on the CubeProp object so it acts more like the functional object. But what worries me is users not knowing where to go to specify what they want done– c-side options, kwargs, args, methods on object. Right now, you can do most any calc with the name argument to e(), etc. plus c-side options. . But a more object-based API procedure in future will require more explicit options passing. And cubeprop, oeprop, moldenwriter are all very light-weight objects. So maybe going ahead and exporting and using all the getters and setters for these objects is the route. Figure out what the best syntax would be for that route, then use that to figure out a convenient one-line call to handle most use cases with minimal options spec. Maybe guided by the vml_cube script. Sorry, this is a ramble. Certainly I'm not clear on what's best to do to accomodate all styles.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/286#issuecomment-189699831:229,energy,energy,229,https://psicode.org,https://github.com/psi4/psi4/pull/286#issuecomment-189699831,1,['energy'],['energy']
Energy Efficiency,I've only run `ctest -L smoke` in the `build/` directory and it all seems to pass:; ```; Test project /gpfs/alpine2/scratch/jslj23/chm205/psi4/build; Start 6: casscf-sp; 1/20 Test #6: casscf-sp ........................ Passed 12.07 sec; Start 21: cc1; 2/20 Test #21: cc1 .............................. Passed 6.74 sec; Start 138: dfmp2-1; 3/20 Test #138: dfmp2-1 .......................... Passed 78.01 sec; Start 228: fcidump; 4/20 Test #228: fcidump .......................... Passed 4.32 sec; Start 385: sapt1; 5/20 Test #385: sapt1 ............................ Passed 59.83 sec; Start 419: scf-property; 6/20 Test #419: scf-property ..................... Passed 9.06 sec; Start 434: tu1-h2o-energy; 7/20 Test #434: tu1-h2o-energy ................... Passed 2.56 sec; Start 470: tdscf-1; 8/20 Test #470: tdscf-1 .......................... Passed 5.19 sec; Start 471: tdscf-2; 9/20 Test #471: tdscf-2 .......................... Passed 3.84 sec; Start 472: tdscf-3; 10/20 Test #472: tdscf-3 .......................... Passed 12.44 sec; Start 473: tdscf-4; 11/20 Test #473: tdscf-4 .......................... Passed 11.39 sec; Start 487: ddd-deriv; 12/20 Test #487: ddd-deriv ........................ Passed 17.49 sec; Start 492: psi4numpy-rhf; 13/20 Test #492: psi4numpy-rhf .................... Passed 2.68 sec; Start 494: psi4numpy-rhf-hessian; 14/20 Test #494: psi4numpy-rhf-hessian ............ Passed 2.55 sec; Start 499: python-energy; 15/20 Test #499: python-energy .................... Passed 2.27 sec; Start 514: json-schema-1-gradient; 16/20 Test #514: json-schema-1-gradient ........... Passed 2.83 sec; Start 518: dftd3-energy; 17/20 Test #518: dftd3-energy ..................... Passed 49.54 sec; Start 523: sapt0-d; 18/20 Test #523: sapt0-d .......................... Passed 379.12 sec; Start 524: fsapt-d; 19/20 Test #524: fsapt-d .......................... Passed 487.00 sec; Start 526: dftd4-energy; 20/20 Test #526: dftd4-energy ..................... Passed 128.98 sec. 100% tests p,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3223#issuecomment-2372776523:695,energy,energy,695,https://psicode.org,https://github.com/psi4/psi4/issues/3223#issuecomment-2372776523,2,['energy'],['energy']
Energy Efficiency,"I've only skimmed paper associated with the benchmarking data, but it looks like they used wB97X-D3/def2-TZVP, not wB97X-D/def2-SVP. They only refer to wB97X-D once, and use wB97X-D3 everywhere else. In section 4.2, they say that only B3LYP-D3BJ and PBE-D3BJ were selected to be tested with def2-SVP. Are you able to reproduce the benchmark energy for any conformer using wB97X-D/def2-SVP or wB97X-D3/def2-TZVP in ORCA 4.0.1? I believe the ORCA input would have; ```; ! wB97X def2-SVP D2; ```; or ; ```; ! wB97X-D3 def2-TZVP; ```. In addition to using the newer version of Psi4 that fixes the bug Jonathon mentioned, ensure that you are comparing like-for-like by spot checking a few of the energies in the benchmark data set using the same software and settings. Using a different dispersion correction and basis set would explain the poor agreement between Psi4 1.4.1 and ORCA 4.0.1. Also, ORCA 4.0.1 is several years old. I don't know if ORCA had any bug fixes/changes over the years that would impact their results, but you might want to compare to ORCA 5.0.1 energies as well.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2351#issuecomment-971118827:341,energy,energy,341,https://psicode.org,https://github.com/psi4/psi4/issues/2351#issuecomment-971118827,1,['energy'],['energy']
Energy Efficiency,"I've rebased this so that dev psi4 is working with dev libxc (soon to be libxc v5). Haven't tried fixing up psi for xc changes in the last year+, so there are failing tests at present. * Libxc master is still labeled 4.3.4, which is the same as the very different release branch current psi is accustomed to. Probably the easiest way to work with clones of both projects and be sure of what you're getting is to build libxc master (`-DBUILD_SHARED_LIBS=ON`), install it, edit the `ConfigVersion.cmake` file to `4.4`, go to psi, force uninstall libxc conda package if libxc is in your active env, edit external/upstream/libxc/CM to 4.4, build psi passing `-DLibxc_DIR=/path/to/dir/of/ConfigVersion`, build psi, check you've got the right one with `ldd stage/lib/psi4/core`.; * Errors at present:; ```; 	158 - dft-grad-lr1 (Failed); 	159 - dft-grad-lr2 (Failed); 	160 - dft-grad-lr3 (Failed); 	175 - dft1 (Failed); 	177 - dft1-alt (Failed); 	179 - dft3 (Failed); 	180 - dft-omega (Failed); 	213 - frac-ip-fitting (Failed); 	338 - sapt-dft-lrc (Failed); 	364 - soscf-dft (Failed); 	397 - dft-custom-hybrid (Failed); 	399 - dft-custom-gga (Failed); 	443 - dftd3-energy (Failed); ```; ```; >>> pytest ../tests/pytests/test_dft_benchmarks.py -rws -v -n12; [gw8] [ 5%] FAILED ../tests/pytests/test_dft_benchmarks.py::test_dft_bench_ionization[B5050LYP- - ]; [gw7] [ 18%] FAILED ../tests/pytests/test_dft_benchmarks.py::test_dft_bench_ionization[MN12-SX- - ]; [gw5] [ 22%] FAILED ../tests/pytests/test_dft_benchmarks.py::test_dft_bench_ionization[SCAN0- - ]; [gw8] [ 33%] FAILED ../tests/pytests/test_dft_benchmarks.py::test_dft_bench_ionization[wB97- - ]; [gw6] [ 36%] FAILED ../tests/pytests/test_dft_benchmarks.py::test_dft_bench_ionization[wB97X-D- - ]; [gw6] [ 43%] FAILED ../tests/pytests/test_dft_benchmarks.py::test_dft_bench_ionization[wB97X-V- - ]; [gw2] [ 47%] FAILED ../tests/pytests/test_dft_benchmarks.py::test_dft_bench_ionization[SCAN- - ]; [gw8] [ 54%] FAILED ../tests/pytests/test_dft_benchm",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-601509105:1158,energy,energy,1158,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-601509105,1,['energy'],['energy']
Energy Efficiency,"I've run full tests with both py27 & py36 and both report the following. The last two are b/c hungarian not installed – not a problem. The first two are b/c MemDFJK isn't handling Cartesian basis sets right. I'm not sure how those other errors you were seeing came about, @schiebermc. Was there a point in this branch where full tests was clean? There's been upheaval to `master`, so we could reason from there. ```; The following tests FAILED:; 	187 - fd-freq-energy-large (Failed); 	212 - mints8 (Failed); 	375 - pywrap-align (Failed); 	376 - pywrap-align-chiral (Failed); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/961#issuecomment-384197920:461,energy,energy-large,461,https://psicode.org,https://github.com/psi4/psi4/pull/961#issuecomment-384197920,1,['energy'],['energy-large']
Energy Efficiency,"I've seen this happen, though not on identical codebases. Added scf5 to quicktests so we could monitor with TravisCI. Then I saw it on Blueridge (https://testboard.org/cdash/testDetails.php?test=8074282&build=66614) to be mysteriously healed the next day (https://testboard.org/cdash/testDetails.php?test=7019761&build=66801). Then @bennybp reported it happens intermittantly on an identical codebase (https://github.com/psi4/psi4/issues/321#issuecomment-198631685). So now I believe it exists. Compilers (in my case) were Intel 2015.0.3.187.; - `Singlet PK CUHF energy: computed value (-149.6304503) does not match (-149.5905972) to 6 decimal places.`; - `Singlet PK UHF energy: computed value (-149.6484410) does not match (-149.5905972) to 6 decimal places`; - In my case, I think the guess occupancy spontaneously changed.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/322:95,monitor,monitor,95,https://psicode.org,https://github.com/psi4/psi4/issues/322,3,"['energy', 'monitor']","['energy', 'monitor']"
Energy Efficiency,"I've tried ROHF molden output from PSI4 input:. memory 2 Gb. molecule be {; 0 2; symmetry c1; B 0.000000000000 0.000000000000 0.000000000000; }. set {; basis cc-pVQZ; reference rohf; }. hf_e, hf_wfn = energy('scf', return_wfn=True); molden(hf_wfn, 'molden.dat'). Total Energy = -24.5289623832308834. Single determinant CASINO output:. E = -24.529(1) ; var = 4.89(8). 3 determinants with weighting factors:; 1-st 0.972153; 2-nd 0.165709; 3-rd 0.165709. CASINO output:. E = -24.459(1) ; var = 5.1(2) . 3 determinants with weighting factors:; 1-st 0.972153; 2-nd -0.165709; 3-rd -0.165709. CASINO output:. E = -24.535(1) ; var = 5.0(1) . The last determinant composition has lowest energy so I would like to know is multi-determinant construction convention PS4's and CASINO are equal. Best, Vladimir.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/796#issuecomment-331683153:201,energy,energy,201,https://psicode.org,https://github.com/psi4/psi4/issues/796#issuecomment-331683153,3,"['Energy', 'energy']","['Energy', 'energy']"
Energy Efficiency,"I've tried this out, and tests are clean. However, the output is confusing with no iterations printed. Fortunately, the same effect can be had with `fail_on_maxiter=False`. Then the output is:. ```. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @RKS iter 0: -128.84964605391272 -1.28850e+02 1.60374e-02. PsiException: Could not converge SCF iterations in 0 iterations. Energy and/or wave function did not converge, but proceeding anyway.; ```. Function reorganization is good, imo. I'll suggest edits.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2073#issuecomment-767629805:225,Energy,Energy,225,https://psicode.org,https://github.com/psi4/psi4/pull/2073#issuecomment-767629805,2,['Energy'],['Energy']
Energy Efficiency,"I've turned up some much nastier behavior then a segfault -- incorrect QM... Take the attached input file [run.txt](https://github.com/psi4/psi4/files/9274229/run.txt) and note that `set num_frozen_docc 6` at the top there should potentially cause issues for the water molecule in the dimer. The alkane is perfectly OK with this, however, but should num_frozen_docc even be coming into play in a HF-level calc? I thought not, isn't it just for correlated calculations? . Anyway, in the run, the first SAPT0 step runs just fine -- really, the HF Is what we're looking at, and we get sensible numbers for the interaction:; ```; Total HF -0.10898644 [mEh] -0.06839003 [kcal/mol] -0.28614386 [kJ/mol]; Total SAPT0 -0.27387960 [mEh] -0.17186205 [kcal/mol] -0.71907080 [kJ/mol]; ```; ; And the underlying HF energies are:; ```; Total Energy = -272.3598217308123139; Total Energy = -196.3248586337326458; Total Energy = -76.0348541106373688; ```. But something goes Very Wrong in the second calculation. The water has _moved_, sure, but it's not done anything dramatic, really. It's still a water. The alkane hasn't moved at all. And yet... ```; Total HF -510.71908624 [mEh] -320.48106505 [kcal/mol] -1340.89277619 [kJ/mol]; Total SAPT0 -512.45472131 [mEh] -321.57019251 [kcal/mol] -1345.44968545 [kJ/mol]; ```. That's no good. Where did we go wrong?. In the water monomer energy, in fact:; ```; Total Energy = -272.3599706292600899; Total Energy = -196.3248586336976587; Total Energy = -75.5243929093220743; ```. Note that the water there seems to be 1 _hartree_ too ""unstable"". . If we instead take the second geometry and run it stand-alone, _with the incorrect num_frozen_docc_, we get a perfectly cromulent result:. ```; Total HF -0.25751717 [mEh] -0.16159446 [kcal/mol] -0.67611123 [kJ/mol]; Total SAPT0 -0.62788646 [mEh] -0.39400470 [kcal/mol] -1.64851567 [kJ/mol]; ```. So something strange is going on here -- I'd expect either the incorrect num_frozen_docc to break everything, or to break nothing ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2631#issuecomment-1207127647:828,Energy,Energy,828,https://psicode.org,https://github.com/psi4/psi4/issues/2631#issuecomment-1207127647,3,['Energy'],['Energy']
Energy Efficiency,"I've tweaked the https://github.com/MolSSI/QCEngine/pull/393/files PR slightly, and I think it's ready for merge. Here, I've added a few tests (b97-3c, r2scan2-3c, and r2scan2-d4) and tried them with several combinations of old/new gcp, old/new dftd3, and 3.4/3.5 dftd4, so I'm semi-confident they run when they ought and give helpful errors when they can't. The tests I added cover energy and gradient, but they're purely internal -- no reference values from a separate implementation. What further tests are wanted?. The labels/selectors for pytest should be in good shape (that is, tests will skip if wrong gcp/d3/d4 detected). CTest selectors aren't in good shape, so if you get helpful ""can't run"" errors, that's expected; wrong values aren't expected.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2842#issuecomment-1672766348:383,energy,energy,383,https://psicode.org,https://github.com/psi4/psi4/pull/2842#issuecomment-1672766348,1,['energy'],['energy']
Energy Efficiency,"I've used the following input:. ``` python; molecule CO; {; C; O 1 R; units au; }. set {; basis sto-3g; guess read; }. Rrange= [ 0.6, 0.7, 0.8, 0.9, 1. , 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2. , 2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 3. , 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 4. , 4.1, 4.2, 4.3, 4.4, 4.5, 4.6, 4.7, 4.8, 4.9, 5. , 5.1, 5.2, 5.3, 5.4, 5.5, 5.6, 5.7, 5.8, 5.9, 6. , 6.1, 6.2, 6.3, 6.4, 6.5, 6.6, 6.7, 6.8, 6.9, 7. , 7.1, 7.2, 7.3, 7.4, 7.5, 7.6, 7.7, 7.8, 7.9, 8. , 8.1, 8.2, 8.3, 8.4, 8.5, 8.6, 8.7, 8.8, 8.9, 9. , 9.1, 9.2, 9.3, 9.4, 9.5, 9.6, 9.7, 9.8, 9.9, 10. ]. table=Table(rows=[""R""], cols=[""E(SCF)"", ""E(FCI)""]). for R in Rrange:; CO.R = R. energy('fci'); escf = get_variable('SCF TOTAL ENERGY'); efci = get_variable('CI TOTAL ENERGY'). table[R] = [escf, efci]. print table; ```. The results looks like:; ![Results plot](http://i.imgur.com/iupslMD.png). Full CI shouldn't fail in this case? This was done with f7e55f09f7",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/69:686,energy,energy,686,https://psicode.org,https://github.com/psi4/psi4/issues/69,3,"['ENERGY', 'energy']","['ENERGY', 'energy']"
Energy Efficiency,"I, too, am worried that dummy atoms and adjusted geometries weren't designed to work together, as none of the scanning examples use dummy atoms. (In which case we need an error message.) However, there is a workaround. You could define the molecule as a string, then instantiate the molecule anew for each step in the scan, like below. Would this help? Thanks for trying psi!. ```; sdimer = """"""; He; X 1 {R} ; He 2 1.0 1 180 ; """""". set basis 6-31G(d). Rvals = [1.4, 1.5]; ref_nre = {1.4: 0.8819620, 1.5: 0.8466835}. ### Compute; ecp = {}; nre = {}; for R in Rvals:; dimer = geometry(sdimer.format(R=R)); ene = energy(""mp2""); ecp[R] = ene; nre[R] = dimer.nuclear_repulsion_energy(); print(R, ene, dimer.nuclear_repulsion_energy()); ; for R in Rvals:; compare_values(ref_nre[R], nre[R], 5, f'nre {R}'). ```; ```; 1.4 -5.732454436415538 0.8819620177833327; 1.5 -5.7325858447838085 0.846683537072; nre 1.4...............................................................................PASSED; nre 1.5...............................................................................PASSED; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2880#issuecomment-1444654883:610,energy,energy,610,https://psicode.org,https://github.com/psi4/psi4/issues/2880#issuecomment-1444654883,1,['energy'],['energy']
Energy Efficiency,"IIRC a common problem with alkali and alkaline elements is that the core levels can lie higher up in energy than the valence electrons in other species. Defining the core levels via e.g. population analysis ([Rassolov et al, Chem. Phys. Lett. 350, 573 (2001)](https://doi.org/10.1016/S0009-2614(01)01345-8) can be used to avoid this problem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2012#issuecomment-702870857:101,energy,energy,101,https://psicode.org,https://github.com/psi4/psi4/issues/2012#issuecomment-702870857,1,['energy'],['energy']
Energy Efficiency,"IIS; @DF-UHF iter 3: -2.85520042767878 -4.31854e-09 3.18063e-07 DIIS; @DF-UHF iter 4: -2.85520042768697 -8.19389e-12 7.59854e-09 DIIS; @DF-UHF iter 5: -2.85520042768698 -6.66134e-15 1.13220e-11 DIIS; @DF-UHF iter 6: -2.85520042768698 -4.44089e-16 7.51303e-13 DIIS; Energy and wave function converged. ==> Post-Iterations <==. @Spin Contamination Metric: -4.440892099E-16; @S^2 Expected: 0.000000000E+00; @S^2 Observed: -4.440892099E-16; @S Expected: 0.000000000E+00; @S Observed: 0.000000000E+00. Orbital Energies [Eh]; ---------------------. Alpha Occupied: . 1A -0.914188 . Alpha Virtual: . 2A 0.431249 3A 1.399267 4A 2.524088 ; 5A 2.524090 6A 2.524090 7A 3.187532 ; 8A 3.187532 9A 3.187564 10A 4.214194 . Beta Occupied: . 1A -0.914188 . Beta Virtual: . 2A 0.431249 3A 1.399267 4A 2.524088 ; 5A 2.524090 6A 2.524090 7A 3.187532 ; 8A 3.187532 9A 3.187564 10A 4.214194 . Final Occupation by Irrep:; A ; DOCC [ 1 ]; SOCC [ 0 ]. @DF-UHF Final Energy: -2.85520042768698. => Energetics <=. Nuclear Repulsion Energy = 0.0000000000000000; One-Electron Energy = -3.8820241745672806; Two-Electron Energy = 1.0268237468803001; Total Energy = -2.8552004276869805. UHF NO Occupations:; HONO-0 : 1 A 2.0000000; LUNO+0 : 2 A 0.0000000; LUNO+1 : 3 A 0.0000000; LUNO+2 : 4 A 0.0000000; LUNO+3 : 5 A 0.0000000. Computation Completed. Properties will be evaluated at 0.000000, 0.000000, 0.000000 [a0]. Properties computed using the SCF density matrix. Nuclear Dipole Moment: [e a0]; X: 0.0000 Y: 0.0000 Z: -5.6000. Electronic Dipole Moment: [e a0]; X: -0.0000 Y: -0.0000 Z: 5.5998. Dipole Moment: [e a0]; X: -0.0000 Y: -0.0000 Z: -0.0002 Total: 0.0002. Dipole Moment: [D]; X: -0.0000 Y: -0.0000 Z: -0.0005 Total: 0.0005. /home/filip/software/intel-parallel/intelpython3/lib/python3.6/site-packages/numpy/lib/npyio.py:538: FutureWarning: Object arrays will not be saved by default in the future because `allow_pickle` will default to False. You should add `allow_pickle=True` explicitly to elminate this warning.; pick",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1706#issuecomment-524633282:9377,Energy,Energy,9377,https://psicode.org,https://github.com/psi4/psi4/pull/1706#issuecomment-524633282,1,['Energy'],['Energy']
Energy Efficiency,"If I am interpreting the data correctly, the new code has worse parallel scaling at high core counts if there are no external charges. (5.36 vs 4.24); And in general, the parallel scalings of the new code do not seem to follow Amdahl's law, note the drop in performance going from 8-->16 cores, then the sudden jump between 16 and 32. Even with charges, running on 16 cores only yields a 2.9x speedup, which is better than the old code, but much worse than using 8 cores.; My first guess would be either some sort of NUMA related issue, or false sharing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1946#issuecomment-656047836:126,charge,charges,126,https://psicode.org,https://github.com/psi4/psi4/pull/1946#issuecomment-656047836,2,['charge'],['charges']
Energy Efficiency,"If I guessed correctly, you're trying to go beyond simple electrostatic embedding, and compute the forces on the MM atoms due to the QM region? If that's the case, we don't currently support that directly (the QM/MM code is under active development and is quite experimental at this point). However, something like this _should_ get you what you need:; ```; molecule mol {; O 0.0000 0.0000 -0.0657; H -0.7590 0.0000 0.5219; H 0.7590 0.0000 0.5219; no_reorient; no_com; symmetry c1; }. # The mm charges, and positions; mm_qxyz = [; [ 1.3, 4.0, -5.3, 4.1],; [ 1.3, 4.0, 5.3, 4.1],; [-1.8,-3.2, 4.3,-3.3]; ]. Chrgfield = psi4.QMMM(); with open('grid.dat', 'w') as fp:; for qxyz in mm_qxyz:; Chrgfield.extern.addCharge(*qxyz); fp.write(""{} {} {}\n"".format(*qxyz[1:])). psi4.set_global_option_python('EXTERN', Chrgfield.extern). # Compute the energy with electrostatic embedding; e, wfn = psi4.energy('hf/dz', return_wfn=True). # Use the grid.dat file created above to define the mm positions at which we want; # to compute the electric field.; results are in grid_field.dat; oeprop(wfn, 'GRID_FIELD'). # Read in the fields that oeprop computed, and scale by each charge to get the force; fields = np.loadtxt('grid_field.dat'); mm_forces = np.zeros_like(fields); for atom, field in enumerate(fields):; q = mm_qxyz[atom][0]; mm_forces[atom,:] = q * field; print(mm_forces); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2244#issuecomment-879102699:494,charge,charges,494,https://psicode.org,https://github.com/psi4/psi4/issues/2244#issuecomment-879102699,4,"['charge', 'energy']","['charge', 'charges', 'energy']"
Energy Efficiency,"If I have Iodine in a molecule I get wrong atom (from I[53] to Mn[25]) in header in cube file:. example:; ```; molecule mol {; 0 1; I 1.05590 0.00000 0.00000; C -1.05590 0.00000 0.00000; H -1.44970 -1.02090 0.00000; H -1.44980 0.51040 0.88420; H -1.44970 0.51050 -0.88410; }. set scf_type df; set basis def2-SVP. E, wfn = energy('pbe',return_wfn=True); set cubeprop_tasks ['density']; set CUBIC_GRID_OVERAGE [8.0, 8.0, 8.0]; set CUBIC_GRID_SPACING [0.17, 0.17, 0.17]; cubeprop(wfn). ```. cube header:; ```. Psi4 Gaussian Cube File.; Property: Dt [e/a0^3]. Isocontour range for 85% of the density: (0.0575417,0); 5 -12.299260 -10.002258 -9.689907; 123 0.170000 0.000000 0.000000; 113 0.000000 0.170000 0.000000; 115 0.000000 0.000000 0.170000; 25 0.000000 0.438284 -0.000000 -0.000001; 6 0.000000 -3.552440 -0.000000 -0.000001; 1 0.000000 -4.296614 -1.929221 -0.000001; 1 0.000000 -4.296803 0.964516 1.670895; 1 0.000000 -4.296614 0.964705 -1.670708; ```; [CH3I.log](https://github.com/psi4/psi4/files/2245612/CH3I.log)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1113:322,energy,energy,322,https://psicode.org,https://github.com/psi4/psi4/issues/1113,1,['energy'],['energy']
Energy Efficiency,"If Psi is built with debug symbols, I observe that the `cc53` test fails randomly. Failure rate seems to be somewhere between 50% and 80%. If Psi is not built with debug symbols, the test works perfectly. When the bug appears, the LLDB reports `malloc: *** error for object 0x100000000: pointer being freed was not allocated`. The most relevant part of the stack trace is ; ```; frame #5: 0x00000001050d3b64 core.cpython-36m-darwin.so`psi::DPD::free_dpd_block(this=0x000000011485c9c0, array=0x000000011485cb50, n=3, m=3) at block_matrix.cc:176; frame #6: 0x0000000105124f85 core.cpython-36m-darwin.so`psi::DPD::file2_mat_close(this=0x000000011485c9c0, File=0x00007ffeefbf7718) at file2_mat_close.cc:46; frame #7: 0x0000000103c092dc core.cpython-36m-darwin.so`psi::cctriples::EaT_RHF() at EaT_RHF.cc:247; frame #8: 0x0000000103c5477f core.cpython-36m-darwin.so`psi::cctriples::cctriples(reference_wavefunction=std::__1::shared_ptr<psi::Wavefunction>::element_type @ 0x0000000102a00e00 strong=7 weak=2, options=0x00000001067bf240) at triples.cc:154; frame #9: 0x0000000103b45e93 core.cpython-36m-darwin.so`psi::cclambda::CCLambdaWavefunction::compute_energy(this=0x00000001018f4e18) at cclambda.cc:324; ```. I'll leave this bug to somebody familiar with the CC code.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1376:315,allocate,allocated,315,https://psicode.org,https://github.com/psi4/psi4/issues/1376,1,['allocate'],['allocated']
Energy Efficiency,"If `/Users/hugomacdermott/Desktop/dev/psi4_build/` is your `CMAKE_INSTALL_PREFIX`, then this is fine, but you can make development a little easier by skipping the `install` step. In your `objdir/` is a `stage/` dir with a complete install that gets updated with every `make`. It's this installation that gets run with `ctest`. I'd seek that, then run the results of `objdir/stage/bin/psi4 --psiapi` and check that the `which` & `python -c ` commands returns paths in `objdir/stage/`. This way there's a quick turnaround between edit/make/test. I don't see anything necessarily wrong with what you posted. The above is just a setup that can reduce confusion if you forget the install step.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2775#issuecomment-1314638646:640,reduce,reduce,640,https://psicode.org,https://github.com/psi4/psi4/pull/2775#issuecomment-1314638646,1,['reduce'],['reduce']
Energy Efficiency,"If a user decides to do a DFT computation on an open-shell molecule via the Python API, say on OH (doublet), but forgets to specify the reference, there is a strange memory effect that require restarting the kernel. Here is an example. Suppose we run this code in a cell:; ```python; import psi4; psi4.geometry(""""""; O; H 1 1.0; """"""); psi4.energy(""B3LYP/def2-SVP""); ```; This will yield the error message:; ```; RuntimeError: ; Fatal Error: RHF: RHF reference is only for singlets.; Error occurred in file: /home/jovyan/psi4/psi4/src/psi4/libscf_solver/rhf.cc on line: 94; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); ```. If we try to fix the error by specifying the correct reference, i.e., by **adding a new cell** with the following code:; ```python; psi4.set_options({'REFERENCE' : 'UKS'}); psi4.energy(""B3LYP/def2-SVP""); ```; we still give the same error message. This problem does not affect HF computations.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2372:339,energy,energy,339,https://psicode.org,https://github.com/psi4/psi4/issues/2372,2,['energy'],['energy']
Energy Efficiency,"If a user wants to make a potential energy curve or surface, it is very easy to generate nonsense when using cartesian coordinates. Using nocom and no_reorient fixes this, so maybe the driver should be setting these options if it detects such a case. ``` python; molecule beh2 {; Be 0.0 0.0 z; H 0.0 1.0 0.0; H 0.0 -1.0 0.0; }; molecule beh2_nocom {; Be 0.0 0.0 z; H 0.0 1.0 0.0; H 0.0 -1.0 0.0; nocom; no_reorient; }; activate(beh2); set basis sto-3g; set guess sad; for i in range (1,41):; z = i*0.1; beh2.z = z; e = energy('scf'); print z,e; set guess read; print ''. activate(beh2_nocom); set basis sto-3g; set guess sad; for i in range (1,41):; z = i*0.1; beh2_nocom.z = z; e = energy('scf'); print z,e; set guess read; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/59:36,energy,energy,36,https://psicode.org,https://github.com/psi4/psi4/issues/59,3,['energy'],['energy']
Energy Efficiency,"If during a BCCD(T) calculation CCENERGY errors out due to the CC iterations not converging, Psi4 crashes with an error due to a timer not being on. Cut down input that intentionally triggers the issue:; ```; memory 8 GiB; molecule {; 0 2; H 3.14661583 0.50221279 16.95640639; H -2.34237367 -1.18278602 -9.14879752; H -1.21364759 -0.97589031 -7.97279014; H -0.76962046 -0.48732090 -9.68891324; H -2.68966560 0.90001402 -8.13713011; O 3.52147514 -0.34931909 16.40682068; O -2.05471741 0.80770143 -8.67788722; C -1.63014171 -0.50652361 -8.79096870; symmetry c1; }. set basis aug-cc-pvdz; set reference rohf; set ints_tolerance 1e-14; set d_convergence 5e-9; set e_convergence 1e-10; set ccenergy maxiter 2. energy('BCCD(T)'); ```. Tail of the produced output:; ```; Solving CC Amplitude Equations; ------------------------------; Iter Energy RMS T1Diag D1Diag New D1Diag D2Diag; ---- --------------------- --------- ---------- ---------- ---------- --------; 0 -0.533075915819886 0.000e+00 0.006541 0.000000 0.000000 0.000000; 1 -0.556071307119493 7.982e-02 0.013677 0.000000 0.000000 0.000000; 2 -0.568751401183405 2.374e-02 0.014574 0.000000 0.000000 0.000000. ** Wave function not converged to 1.0e-07 ** . Traceback (most recent call last):; File ""/home/jzz/psi4conda/bin/psi4"", line 331, in <module>; exec(content); File ""<string>"", line 40, in <module>; File ""/home/jzz/psi4conda/lib//python3.7/site-packages/psi4/driver/driver.py"", line 570, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/jzz/psi4conda/lib//python3.7/site-packages/psi4/driver/procrouting/proc.py"", line 2673, in run_bccd; ref_wfn = core.ccenergy(ref_wfn). RuntimeError: ; Fatal Error: Timer ccenergy is not on.; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1584239292352/work/psi4/src/psi4/libqt/timer.cc on line: 1143; The most recent 5 function calls were:. psi::timer_off(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocato",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1864:705,energy,energy,705,https://psicode.org,https://github.com/psi4/psi4/issues/1864,2,"['Energy', 'energy']","['Energy', 'energy']"
Energy Efficiency,"If the SCF calculation raises a ``ConvergenceError``, the default ``SCF_TYPE`` option is not restored to the previous value. This means that if the exception is catched, and the program continues, all subsequent calculations might use a different SCF algorithm. I'm using ``psi4 1.8`` installed through ``conda-forge``. Minimal reproducible example; ```python; import numpy as np; import psi4; from psi4.driver.p4util import OptionsState. # Create water molecule.; positions = np.array([; [-0.2950, -0.2180, 0.1540],; [-0.0170, 0.6750, 0.4080],; [0.3120, -0.4570, -0.5630],; ], dtype=np.double); molecule = psi4.core.Molecule.from_arrays(geom=positions, units='angstrom', elem=['O', 'H', 'H']). # Configure.; psi4.core.be_quiet(); psi4.core.set_active_molecule(molecule); psi4.set_options(dict(basis='sto-3g', reference='RHF')). # Check scf type.; scf_type1 = psi4.core.get_global_option('SCF_TYPE'). # Run calculation.; psi4.energy(name='scf'). # Check scf type after converged calculation.; scf_type2 = psi4.core.get_global_option('SCF_TYPE'). # Now run an unconverged calculation.; option_stash = OptionsState(['MAXITER']); psi4.set_options(dict(maxiter=1)); try:; psi4.energy(name='scf'); except psi4.ConvergenceError:; pass; option_stash.restore(). # Check scf type after unconverged calculation.; scf_type3 = psi4.core.get_global_option('SCF_TYPE'). print(scf_type1, scf_type2, scf_type3); ```; output; ```; PK PK DF; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3000:926,energy,energy,926,https://psicode.org,https://github.com/psi4/psi4/issues/3000,2,['energy'],['energy']
Energy Efficiency,"If the argument to psi4.set_memory() is reduced to 2 GB (forcing the disk algorithm), the MKL install gives an energy for wB97X-D3BJ/6-31G* of -1964.4297 Hartree, which is reasonable. So I continue to believe that the in-core algorithm is implicated, or at least magnifying an existing problem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2279#issuecomment-900713515:40,reduce,reduced,40,https://psicode.org,https://github.com/psi4/psi4/issues/2279#issuecomment-900713515,2,"['energy', 'reduce']","['energy', 'reduced']"
Energy Efficiency,"If two atoms get within 0.5 Bohr of each other, psi4 crashes. I tracked this down to the overlap matrix having NAN in rows/columns involving AOs centered on the overlapping atom. This seems to be a problem in the part of the code that computes atom mappings, because when I change the tol in petitelist.h:62 to:; `int **compute_atom_map(const Molecule* mol, double tol = 0.1);`; (and the line above), the problem goes away. It seems the AO shells are not created for the overlapping atom, even though parts of the code expect them. Setting c1 symmetry does not help. Here's a small input deck that recreates the problem:. ```; #! H Ghost test. molecule h { ; -1 1; H 0.00000000 0.00000000 0.0; Gh(He) 0.0000000000 0.0000000000 0.2; }. set {; SCF_TYPE DIRECT; DF_SCF_GUESS FALSE; print 4; }. basis {; assign sto-3g; }; energy('scf'); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/195:818,energy,energy,818,https://psicode.org,https://github.com/psi4/psi4/issues/195,1,['energy'],['energy']
Energy Efficiency,"If you are doing an update of the documentation for Molecule.Z, it might be useful to consider possible user confusion between Molecule.Z (capital, gives the charge) and Molecule.z (lowercase, gives the z-coordinate). Both return floats, so no type mismatch, and it's not an obvious typo visually. Maybe a warning in the API would be helpful.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/909#issuecomment-363502006:158,charge,charge,158,https://psicode.org,https://github.com/psi4/psi4/issues/909#issuecomment-363502006,1,['charge'],['charge']
Energy Efficiency,"If you calculate higher roots : set roots_per_irrep [3,0,0,0,0,0,0,0]. you should get the followings : . Iter=49 L=36 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016108 3.23e-10 5.08e-07 Y; 2 0.3299082274 -4.27e-08 2.15e-05 N; 3 0.3364017920 3.03e-10 6.02e-07 Y; Iter=50 L=6 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016107 -4.16e-11 5.07e-07 Y; 2 0.3299082274 9.50e-12 2.15e-05 N; 3 0.3364017920 -1.83e-11 6.05e-07 Y; Iter=51 L=7 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016107 -7.15e-12 5.08e-07 Y; 2 0.3299081111 -1.16e-07 2.65e-05 N; 3 0.3364017920 5.08e-11 6.06e-07 Y; Iter=52 L=8 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016109 1.66e-10 5.11e-07 Y; 2 0.3299079665 -1.45e-07 1.51e-05 N; 3 0.3364017922 1.60e-10 6.04e-07 Y; Iter=53 L=9 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016134 2.49e-09 4.23e-07 Y; 2 0.3299076116 -3.55e-07 2.15e-05 N; 3 0.3364017922 -2.69e-11 6.01e-07 Y; Iter=54 L=10 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3031989513 -2.11e-02 2.19e-01 N; 2 0.3243016119 -5.61e-03 4.37e-07 N; 3 0.3299093542 -6.49e-03 4.01e-05 N; Iter=55 L=13 Root EOM Energy Delta E Res. Norm Conv?; 1 0.1959550539 -1.07e-01 1.77e-01 N; 2 0.3243016120 1.51e-10 2.03e-07 Y; 3 0.3299083008 -1.05e-06 1.35e-05 N; Iter=56 L=15 Root EOM Energy Delta E Res. Norm Conv?; 1 0.1704364933 -2.55e-02 7.63e-02 N; 2 0.3243016120 2.24e-11 1.99e-07 Y; 3 0.3299082189 -8.19e-08 1.11e-05 N; Iter=57 L=17 Root EOM Energy Delta E Res. Norm Conv?; 1 0.1646225593 -5.81e-03 4.39e-02 N; 2 0.3243016115 -5.11e-10 1.86e-07 Y; 3 0.3299081686 -5.03e-08 1.05e-05 N; Iter=58 L=19 Root EOM Energy Delta E Res. Norm Conv?; 1 0.1600433140 -4.58e-03 5.00e-02 N; 2 0.2894312372 -3.49e-02 2.35e-01 N; 3 0.3243016111 -5.61e-03 2.21e-07 N",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/603#issuecomment-279097143:127,Energy,Energy,127,https://psicode.org,https://github.com/psi4/psi4/issues/603#issuecomment-279097143,10,['Energy'],['Energy']
Energy Efficiency,"If you examine `Final Occupation by Irrep` you can see it changes eventually, causing a drastic change in the SCF energy.; It's not a technically issue but an electronic one. What you can try is set `psi4.set_options({'reference': 'uhf', 'guess':'read'})` after the first SCF is done and check if the state still changes. It should help a lot. (And think about which state you want, and/or check which is lower in energy).; Sometimes bond scans are more stable going from long to short distances.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2901#issuecomment-1473356455:114,energy,energy,114,https://psicode.org,https://github.com/psi4/psi4/issues/2901#issuecomment-1473356455,2,['energy'],['energy']
Energy Efficiency,"If you put a `clean()` between the `energy` calls, it'll work. The files used to transform ints in the two calls are somehow interfering with each other.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1288#issuecomment-429564670:36,energy,energy,36,https://psicode.org,https://github.com/psi4/psi4/issues/1288#issuecomment-429564670,1,['energy'],['energy']
Energy Efficiency,"If you supply two fragments to Psi4, it will assume the multiplicity of the combined system is the multiplicity of the first fragment, not the multiplicity of the high spin combination. For instance, Psi will attempt to treat the following molecule as a singlet rather than a triplet. Switching the order of the fragments will make Psi look for the triplet. Switching both to be triplets, where the high spin combination is a quintet, will have Psi look for triplets. I haven't tested how it handles more than two fragments. ```; molecule {; 0 1 ; H -0.7589216703 0.0000000000 3.1082565820; H 0.7589216703 0.0000000000 3.1082565820; O 0.0000000000 0.0000000000 2.5216012101; -- ; 0 3 ; S 0.0000000000 0.0000000000 -0.4748174225; O 0.0000000000 0.0000000000 -1.9641940526; symmetry c1; no_reorient; no_com; }. set {; reference uhf ; scf_type direct; basis cc-pVDZ; }. energy('scf'); ```; Attempted on `Git: Rev {master} 9994682`.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1106:867,energy,energy,867,https://psicode.org,https://github.com/psi4/psi4/issues/1106,1,['energy'],['energy']
Energy Efficiency,"If you're able to run psi outside Jupyter, could you try the below? It's your file with `clean()` added. It runs fine for me. It sounds like something you tried, so I want to confirm we're running the same circumstances. ```; import psi4 . basis_sets = ['STO-3G','6-31g','6-311g','6-31+G','6-31G*','6-31+G*',; '6-311G*','6-311+G**','cc-pVDZ','cc-pVTZ']. B = psi4.geometry(""""""; 0 2; B; """"""). bs, es, wfns = [], [], []. for basis_set in basis_sets:; ; psi4.core.clean(); psi4.set_options({'reference': 'uhf','basis': basis_set}); e, wfn = psi4.energy('hf',return_wfn=True); ; es.append(e); wfns.append(wfn.basisset().nbf()); bs.append(basis_set). print(bs); print(es); print(wfns); ```. ```; ['STO-3G', '6-31g', '6-311g', '6-31+G', '6-31G*', '6-31+G*', '6-311G*', '6-311+G**', 'cc-pVDZ', 'cc-pVTZ']; [-24.149116604634685, -24.519491417069652, -24.52701726771759, -24.52372741487474, -24.522035242682847, -24.526158480502467, -24.5300987020333, -24.53034517277682, -24.529958285088252, -24.532065412570194]; [5, 9, 13, 13, 15, 19, 18, 22, 14, 30]; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1794#issuecomment-581095759:542,energy,energy,542,https://psicode.org,https://github.com/psi4/psi4/issues/1794#issuecomment-581095759,1,['energy'],['energy']
Energy Efficiency,"If you're using libxc's camb3lyp, the energy should be something like -76.32981537.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/900#issuecomment-360596788:38,energy,energy,38,https://psicode.org,https://github.com/psi4/psi4/issues/900#issuecomment-360596788,1,['energy'],['energy']
Energy Efficiency,"Implement scheme whereby c-side modules can define minimum ('METHOD CORRELATION ENERGY') or full sets (corl, ref, & total) of psivars, then manager comes through and ; - fills in any blanks; - checks that definitions met and consistent (tot – corl = ref); - ensures that overlapping modules are using consistent names. The quantum chemical facts I've already got in programmatic form in pandas in qcdb, so it's mostly the psi4 interfacing and reconciliation to do. This is already done, small scale, for SAPT. Also, would be nice to autodoc the equations.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/239:80,ENERGY,ENERGY,80,https://psicode.org,https://github.com/psi4/psi4/issues/239,1,['ENERGY'],['ENERGY']
Energy Efficiency,"In [`oeprops.cc`](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/oeprop.cc#L1415), the function `compute_mulliken_charges()` is defined, which adds a vector of atom-centered Mulliken charges to the wavefunction's array variables:. ```c; void OEProp::compute_mulliken_charges() {; PAC::SharedStdVector Qa, Qb, apcs;; std::tie(Qa, Qb, apcs) = pac_.compute_mulliken_charges(true);; wfn_->set_atomic_point_charges(apcs);. auto vec_apcs = std::make_shared<Matrix>(""Mulliken Charges: (a.u.)"", 1, apcs->size());; for (size_t i = 0; i < apcs->size(); i++) {; vec_apcs->set(0, i, (*apcs)[i]);; }; wfn_->set_array_variable(""MULLIKEN CHARGES"", vec_apcs);; }; ```. It would be useful to also get spin densities here, which would just be `Qa - Qb`. Would it also be possible to add an array variable `MULLIKEN SPIN DENSITIES` which contains this value? (also perhaps for Lowdin populations too)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3211:200,charge,charges,200,https://psicode.org,https://github.com/psi4/psi4/issues/3211,3,"['CHARGE', 'Charge', 'charge']","['CHARGES', 'Charges', 'charges']"
Energy Efficiency,"In case anybody needs to refer back to this: the cause of the bug was that in one of the two ways of computing the energy, the SCF energy was added rather than the reference energy. These are different things in orbital optimized methods and afflicted all OMP2.5 and OMP3 computations. It was fixed by [this commit](https://github.com/psi4/psi4/pull/1772/commits/118f1967d348ec58265b6d3bb12b935730b5b8a6).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1509#issuecomment-571322592:115,energy,energy,115,https://psicode.org,https://github.com/psi4/psi4/issues/1509#issuecomment-571322592,3,['energy'],['energy']
Energy Efficiency,"In case of energy the situation is as simple as you suggested. However, in case of gradients the situation is much complicated. The DF-SCF orbitals are optimized at DF-SCF level, and these are different than that of conventional SCF. Hence, after DF-SCF if I try to compute gradients for conventional SCF I need to an extra term to MP2 Lagrangian to account for the orbital relaxation for SCF MOs. It may sound odd, but it is. Since the MOs of SCF are different than that of DF-SCF, we need to re-optimize orbitals for SCF or we need to modify our Z-vector equation sin SCF-MO gradient is not zero, but DF-SCF orbital gradient is zero. Hence, we need to modify MP2 Lagrangian for DF-SCF ref and add another term to account for orbital relaxation for SCF wfn. In summary, I recommend to use the conventional SCF for conventional MP2 gradients even though user asks a DF-SCF ref. @loriab @andysim @CDSherrill",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/245#issuecomment-183702993:11,energy,energy,11,https://psicode.org,https://github.com/psi4/psi4/issues/245#issuecomment-183702993,1,['energy'],['energy']
Energy Efficiency,"In general the Psi4 SCF solver is rather straightforward by just running through DIIS iterations until convergence is reached. Fortunately the `SCF` iterations have been moving Python side and doing a smart SCF solver should be much easier. A list of possible tricks:; - Automatic root following: If the energy has converged, but the Fock gradient remains large it would be good to detect this and take a Davidson step to get out of an odd minima.; - Automatic SOSCF detection: If very tight convergences are required (1e-10 or less) SOSCF steps after (1.e-5 density/energy) would be preferred.; - Pure first order stepping: In the case of guess`read` the density is diagonalized leading to steps that could take the result away from the minima. A better approach would be to take first order steps (MO Fock matrix over the energy denominators) so that radical changes in the density do not occur.; - Damp post-guess fluctuations: often after a SAD or GWH guess the energy and density will jump considerably before coming back to something near the initial guess. It could be good to take combinations of the next iteration and guess density to prevent such jumps. In the case of SAD this will mean more computations will be non-variational, but the tradeoff could be worth it.; - SCF shake: As discussed in #875 a small amount of noise added to the orbitals/density at the start of a SCF computation could be useful in finding different minima.; - Damping of wild oscillations: If large oscillations occur in the density this could be detected and damping could be turned on for a short time.; - Many more ideas are possible and a discussion of these could be very useful. Please note that not all tricks need to be implemented at once. I would very much encourage small steps at a time.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/888:304,energy,energy,304,https://psicode.org,https://github.com/psi4/psi4/issues/888,4,['energy'],['energy']
Energy Efficiency,"In general, psi4 is `DOCC`/`SOCC` _or_ `guess`. That is, guess won't respect DOCC/SOCC. Good point that this could be better documented. Actually fixing this is scheduled for further development of the Wavefunction object.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/420#issuecomment-227920484:161,schedul,scheduled,161,https://psicode.org,https://github.com/psi4/psi4/issues/420#issuecomment-227920484,1,['schedul'],['scheduled']
Energy Efficiency,"In hindsight, I should have noticed this earlier:; OPTKING numbers atoms starting from 1, so the value in your options dict should be `1 2`, not `0 1`. Due to how the optimizer works, it will treat `1 2` and `1 3` as symmetry equivalent, so for actual code, you would need to manually specify Cs symmetry if you really wanted to fix only one bond. When I run the optimization with that change, it works just fine. I'm guessing that OPTKING doesn't know how to handle a request to process ""atom 0,"" which leads us to the choose-your-own-error-message adventure. This is definitely not the most graceful way to handle an invalid atom request, but I'll leave it to the core devs to decide what fix would be most appropriate, since OPTKING is scheduled to be replaced soon anyways.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/989#issuecomment-385130211:739,schedul,scheduled,739,https://psicode.org,https://github.com/psi4/psi4/issues/989#issuecomment-385130211,1,['schedul'],['scheduled']
Energy Efficiency,"In my case, there is a dependency on Python 2.7 library in /usr/lib64. It might be the problem since when using Python 3.5 out of my miniconda, I had no problems with GCC. The only other thing that changes is my `PATH` variable where `/usr/bin` has a higher priority so that Python 2.7 is default instead of 3.5, but that should not change the library paths. My problem with `source activate` was indeed because of the `tcsh` shell. Finally, Psi4 with Python 2.7 compiled and tested successfully, only `psimrcc-fd-freq2` fails. With Python 3.5, there are more test failures, namely:; The following tests FAILED:; 9 - cbs-delta-energy (Failed); 10 - cbs-xtpl-energy (Failed); 12 - cbs-xtpl-gradient (Failed); 13 - cbs-xtpl-opt (Failed); 14 - cbs-xtpl-func (Failed); 15 - cbs-xtpl-wrapper (Failed); 118 - dfmp2-1 (Failed); 168 - freq-isotope (Failed); 170 - fnocc2 (Failed); 175 - gibbs (Failed); 192 - mp2-def2 (Failed); 202 - nbody-he-cluster (Failed); 203 - numpy-array-interface (Failed); 255 - psimrcc-fd-freq2 (Failed); 259 - psithon2 (Failed); 260 - pubchem1 (Failed); 261 - pubchem2 (Failed); 262 - pywrap-alias (Failed); 263 - pywrap-all (Failed); 265 - pywrap-cbs1 (Failed); 270 - pywrap-db1 (Failed); 271 - pywrap-db2 (Failed); 273 - pywrap-freq-e-sowreap (Failed); 274 - pywrap-freq-g-sowreap (Failed); 275 - pywrap-molecule (Failed); 276 - pywrap-opt-sowreap (Failed); 287 - sapt6 (Failed); 307 - tu6-cp-ne2 (Failed); 312 - options1 (Failed); 317 - psi4numpy-rhf (Failed); 318 - psi4numpy-dfmp2 (Failed); 319 - dftd3-energy (Failed); 320 - dftd3-grad (Failed); 321 - dftd3-psithon2 (Failed); 322 - dftd3-version (Failed). I looked at one of them and the problem was the formatting of some printing command. I didn't investigate further.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-252852440:627,energy,energy,627,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-252852440,3,['energy'],['energy']
Energy Efficiency,"In my view, the most important variables that get set in OCC are the `[SAME-SPIN|OPPOSITE-SPIN|SINGLES] [|O][MP2|MP3|MP2.5|LCCD] CORRELATION ENERGY`] ones both now and in future because all others can be constructed from these. yes, I think in future the main printing from OCC could be moved py-side, especially for quantities like SCS that OCC does nothing further with internally. I broadly plan that OCC would set the above variables and any totals that it likes, that OCC would print c-side the main energies that it's dealing with, then in proc.py, the return variables get sent to qcdb to be composed into `SCS(N)-MP2 TOTAL ENERGY` and anything else for which input pieces are present. the key thing about qcdb qcvar composition is that it also checks to make sure the SCS(N) built from components equals any SCS(N) passed in whole so ensures that OCC and qcdb are using the same definitions. I don't want to delete OCC's definitions before this check is active. So that plus leaving Ugur's printing mostly undisrupted is why I figured this could be put off. > If so, then the correct solution to the spin-redundancy problem is to eliminate the spin-component variables from occ. Are you meaning SCS(N) or SAME-/OPPOSITE-SPIN variables?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1789#issuecomment-581627355:141,ENERGY,ENERGY,141,https://psicode.org,https://github.com/psi4/psi4/pull/1789#issuecomment-581627355,2,['ENERGY'],['ENERGY']
Energy Efficiency,"In reply to @WDerricotte's last post. This runs on my laptop too. ```; basis cc-pvdz-decon; basis_relativistic cc-pvdz-decon; ```; but ; ```; basis cc-pvdz-dk-decon; basis_relativistic cc-pvdz-dk-decon; ```; does not. The second version (not working) should be the preferred one because the non-DK basis are not meant to be used for relativistic computations. This is the error that I get and it looks like a problem with DF, since if I add the keyword `scf_type = pk` it runs.; ```; CHE-FEVANGE-01I:x2c-double-decontract fevange$ psi4; Traceback (most recent call last):; File ""/Users/fevange/Source/psi4-fork-bin-Debug/bin/psi4"", line 247, in <module>; exec(content); File ""<string>"", line 29, in <module>; File ""/Users/fevange/Source/psi4-fork-bin-Debug/lib//psi4/driver/driver.py"", line 454, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/fevange/Source/psi4-fork-bin-Debug/lib//psi4/driver/procrouting/proc.py"", line 2794, in run_dft; scf_wfn = run_scf(name, **kwargs); File ""/Users/fevange/Source/psi4-fork-bin-Debug/lib//psi4/driver/procrouting/proc.py"", line 1938, in run_scf; scf_wfn = scf_helper(name, **kwargs); File ""/Users/fevange/Source/psi4-fork-bin-Debug/lib//psi4/driver/procrouting/proc.py"", line 1250, in scf_helper; scf_wfn = scf_wavefunction_factory(core.get_option('SCF', 'REFERENCE'), base_wfn); File ""/Users/fevange/Source/psi4-fork-bin-Debug/lib//psi4/driver/procrouting/proc.py"", line 1028, in scf_wavefunction_factory; puream=wfn.basisset().has_puream()); File ""/Users/fevange/Source/psi4-fork-bin-Debug/lib//psi4/driver/p4util/python_helpers.py"", line 64, in pybuild_basis; key, target, fitrole, other, return_atomlist=return_atomlist); File ""/Users/fevange/Source/psi4-fork-bin-Debug/lib//psi4/driver/qcdb/libmintsbasisset.py"", line 641, in pyconstruct; return_atomlist=return_atomlist); File ""/Users/fevange/Source/psi4-fork-bin-Debug/lib//psi4/driver/qcdb/libmintsbasisset.py"", line 742, in construct; tmp.append(c",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/662#issuecomment-288840729:799,energy,energy,799,https://psicode.org,https://github.com/psi4/psi4/issues/662#issuecomment-288840729,2,['energy'],['energy']
Energy Efficiency,Inconsistency between Psi4 Scripts Return Energy Function,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2730:42,Energy,Energy,42,https://psicode.org,https://github.com/psi4/psi4/issues/2730,1,['Energy'],['Energy']
Energy Efficiency,Inconsistent DF-CASSCF Energy Output,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2258:23,Energy,Energy,23,https://psicode.org,https://github.com/psi4/psi4/issues/2258,1,['Energy'],['Energy']
Energy Efficiency,Incorrect ghosting behavior for Iodine interaction energy calculations,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/843:51,energy,energy,51,https://psicode.org,https://github.com/psi4/psi4/issues/843,1,['energy'],['energy']
Energy Efficiency,"Input file:. ``` python; import molutil. molecule h2o {; 0 1; O; H 1 r; H 1 r 2 104.479848; units angstrom; }. molecule beh2 {; 0 1; Be 0 0 0 ; H 0 0 r; H 0 0 -r; units angstrom; }. set basis sto-3g. beh2.r=1; molutil.activate(beh2); energy('fci'). h2o.r=1; molutil.activate(h2o); energy('fci'); ```. will calculate the FCI energy of the BeH<sub>2</sub> molecule, then do the RHF of H<sub>2</sub>O but at start of the detci module it will give:. ``` python; Traceback (most recent call last):; File ""<string>"", line 40, in <module>; File ""/home/ward/opt/share/psi/python/driver.py"", line 576, in energy; procedures['energy'][lowername](lowername, **kwargs); File ""/home/ward/opt/share/psi/python/proc.py"", line 1975, in run_detci; psi4.detci(); RuntimeError: (matrix_element): nalp/nbet != init_nalp/nbet; ```. Seems like something should be reinitialized after activating a new molecule. Done with 521f06adb441ac1e2f1732eb1cd090190b409c49.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/92:234,energy,energy,234,https://psicode.org,https://github.com/psi4/psi4/issues/92,5,['energy'],['energy']
Energy Efficiency,"Input file:; ```; molecule h2o {; O; H 1 0.96; H 1 0.96 2 104.5; }; set {; basis roos-ano-dz; relativistic x2c; }; energy('scf'); ```; Error Info:; ```; Traceback (most recent call last):; File ""bin/psi4"", line 210, in <module>; exec(content); File ""<string>"", line 28, in <module>; File ""lib/psi4/driver/driver.py"", line 447, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""lib/psi4/driver/procedures/proc.py"", line 1917, in run_scf; scf_wfn = scf_helper(name, **kwargs); File ""lib/psi4/driver/procedures/proc.py"", line 1241, in scf_helper; scf_wfn = scf_wavefunction_factory(core.get_option('SCF', 'REFERENCE'), base_wfn); File ""lib/psi4/driver/procedures/proc.py"", line 1035, in scf_wavefunction_factory; puream=wfn.basisset().has_puream()); File ""lib/psi4/driver/p4util/python_helpers.py"", line 62, in pybuild_basis; key, target, fitrole, other, return_atomlist=return_atomlist); File ""lib/psi4/driver/qcdb/libmintsbasisset.py"", line 631, in pyconstruct; return_atomlist=return_atomlist); File ""lib/psi4/driver/qcdb/libmintsbasisset.py"", line 753, in construct; filename = cls.make_filename(basgbs); File ""lib/psi4/driver/qcdb/libmintsbasisset.py"", line 1292, in make_filename; basisname = basisname.lower(). AttributeError: 'NoneType' object has no attribute 'lower'; ```; This happens not only with roos-ano-dz basis, but also when a user-defined basis is used.; This problem is actually caused by line 726~730 in lib/psi4/driver/qcdb/libmintsbasisset.py. After line 730: seek['basis'] = [item for item in tmp if item != (None, None, None)], seek['basis'] have only one entry (None, None, BasisSet.decontract), which will cause basgbs == None at line 753.; Actually, after line 730, seek['basis'] should have an entry ('roos-ano-dz-decon', 'roos-ano-dz', BasisSet.decontract) for the program to run correctly. One possible solution is that add a guard:; ```; if basgbs == None:; continue; ```; before line 753: filename = cls.make_filename(basgbs)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/617:115,energy,energy,115,https://psicode.org,https://github.com/psi4/psi4/issues/617,3,['energy'],['energy']
Energy Efficiency,"Input:; ```; molecule no {; 1 2; F; H 1 0.9015; }. set {; basis cc-pvtz; reference rohf; guess sad; scf_type pk; df_scf_guess false; docc [ 3, 0, 0, 1 ]; socc [ 0, 0, 1, 0 ]; }; energy('scf'); ```; Output before:; ```; ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @ROHF iter 0: 37.35213783948360 3.73521e+01 0.00000e+00 ; @ROHF iter 1: -61.25773907843870 -9.86099e+01 2.31925e-01 ; @ROHF iter 2: -94.47417324752453 -3.32164e+01 1.02224e-01 DIIS; @ROHF iter 3: -98.93494550743969 -4.46077e+00 5.01802e-02 DIIS; @ROHF iter 4: -99.51385930181866 -5.78914e-01 5.73014e-03 DIIS; @ROHF iter 5: -99.52593866328210 -1.20794e-02 7.53133e-04 DIIS; @ROHF iter 6: -99.52616227812669 -2.23615e-04 1.38250e-04 DIIS; @ROHF iter 7: -99.52617115743607 -8.87931e-06 1.41516e-05 DIIS; @ROHF iter 8: -99.52617133422457 -1.76789e-07 4.22537e-06 DIIS; @ROHF iter 9: -99.52617135108980 -1.68652e-08 6.00763e-07 DIIS; Energy converged.; ```; Output now:; ```; ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @ROHF iter 0: 37.35213783948360 3.73521e+01 0.00000e+00 ; @ROHF iter 1: -98.88199282615329 -1.36234e+02 5.47587e-02 ; @ROHF iter 2: -99.37308671364974 -4.91094e-01 2.39373e-02 DIIS; @ROHF iter 3: -99.52506651519121 -1.51980e-01 1.60839e-03 DIIS; @ROHF iter 4: -99.52612487148851 -1.05836e-03 3.72093e-04 DIIS; @ROHF iter 5: -99.52617068447645 -4.58130e-05 3.55283e-05 DIIS; @ROHF iter 6: -99.52617130679994 -6.22323e-07 6.69049e-06 DIIS; @ROHF iter 7: -99.52617134939356 -4.25936e-08 1.37357e-06 DIIS; @ROHF iter 8: -99.52617135123231 -1.83874e-09 1.08978e-07 DIIS; Energy converged.; ```; so ROHF saves almost two iterations even in this simple case.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1429#issuecomment-450632700:178,energy,energy,178,https://psicode.org,https://github.com/psi4/psi4/pull/1429#issuecomment-450632700,5,"['Energy', 'energy']","['Energy', 'energy']"
Energy Efficiency,"Inspired by @CDSherrill's comment, I modified the plots to be a little more educational. The code now plots the harmonic and anharmonic (quartic) fits on top of each other, and shows the first few energy levels as well as a comparison of r_e and r_0. ![example plot](http://imgur.com/UPklaZW.png). The two commits have been squashed and rebased to the current master, so should be ready to go.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/515#issuecomment-260096464:197,energy,energy,197,https://psicode.org,https://github.com/psi4/psi4/pull/515#issuecomment-260096464,1,['energy'],['energy']
Energy Efficiency,"Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A 10 10 0 0 0 0; -------------------------------------------------------; Total 10 10 1 1 1 0; -------------------------------------------------------. ==> Integral Setup <==. DFHelper Memory: AOs need 0.000 GiB; user supplied 0.366 GiB. Using in-core AOs. ==> MemDFJK: Density-Fitted J/K Matrices <==. J tasked: Yes; K tasked: Yes; wK tasked: No; OpenMP threads: 1; Memory [MiB]: 375; Algorithm: Core; Schwarz Cutoff: 1E-12; Mask sparsity (%): 0.0000; Fitting Condition: 1E-10. => Auxiliary Basis Set <=. Basis Set: (JUN-CC-PVDZ AUX); Blend: DEF2-QZVPP-JKFIT; Number of shells: 18; Number of basis function: 46; Number of Cartesian functions: 50; Spherical Harmonics?: true; Max angular momentum: 2. Minimum eigenvalue in the overlap matrix is 3.6142168109E-01.; Using Symmetric Orthogonalization. SCF Guess: Orbitals guess was supplied from a previous computation. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-UHF iter 0: -2.85515015411516 -2.85515e+00 1.19401e-03 ; @DF-UHF iter 1: -2.85520007568163 -4.99216e-05 7.84987e-05 DIIS; @DF-UHF iter 2: -2.85520042336024 -3.47679e-07 7.68575e-06 DIIS; @DF-UHF iter 3: -2.85520042767878 -4.31854e-09 3.18063e-07 DIIS; @DF-UHF iter 4: -2.85520042768697 -8.19389e-12 7.59854e-09 DIIS; @DF-UHF iter 5: -2.85520042768698 -6.66134e-15 1.13220e-11 DIIS; @DF-UHF iter 6: -2.85520042768698 -4.44089e-16 7.51303e-13 DIIS; Energy and wave function converged. ==> Post-Iterations <==. @Spin Contamination Metric: -4.440892099E-16; @S^2 Expected: 0.000000000E+00; @S^2 Observed: -4.440892099E-16; @S Expected: 0.000000000E+00; @S Observed: 0.000000000E+00. Orbital Energies [Eh]; ---------------------. Alpha Occupied: . 1A -0.914188 . Alpha Virtual: . 2A 0.431249 3A 1.399267 4A 2.524088 ; 5A 2.524090 6A 2.524090 7A 3.187532 ; 8A 3.187532 9A 3.187564 10A 4.214194 . Beta Occupied: . 1A -0.914188 . Beta Virtual: . 2A 0.431249 3A 1.399267 4A 2.524088 ; 5A",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1706#issuecomment-524633282:8159,Energy,Energy,8159,https://psicode.org,https://github.com/psi4/psi4/pull/1706#issuecomment-524633282,1,['Energy'],['Energy']
Energy Efficiency,"Is ""PowerShell"" the Ubuntu Shell or Windows Subsystem for Linux? No, no real plans to try a native compile. Build is cmake, so at least that's windows friendly. Need c++11, so newish compiler. That should be ok if dropped py2. So no obvious barrier to Windows, but the dev community has no need or experience. I take it that Windows would be useful? By the way, would you be pained if py2.7 was dropped and min moved to 3.5?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-371308270:4,Power,PowerShell,4,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-371308270,1,['Power'],['PowerShell']
Energy Efficiency,"Is anyone presently working on this? I see it's gotten moved from milestone to milestone, just curious what priority level this is (or isn't). I've gotten some dimer interaction energy mismatches of >0.1 kcal/mol due to this bug in CP-corrected dimer interaction energies, though these errors are still << the error of DFT vs a CCSD(T)-level method, so it's not a big deal, just a little obnoxious.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1968#issuecomment-1764883227:178,energy,energy,178,https://psicode.org,https://github.com/psi4/psi4/issues/1968#issuecomment-1764883227,1,['energy'],['energy']
Energy Efficiency,"Is it possible to use `options=None` in the class definition? Then the options are mostly not required at all in the current commits above. Yes, I implemented the Client so that you always can calculate the current energy/force of the initialised molecule, which enables testing of the passed on configuration. When ipi is available, it will also be used for communicating back to the driver.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1057#issuecomment-654485806:215,energy,energy,215,https://psicode.org,https://github.com/psi4/psi4/pull/1057#issuecomment-654485806,1,['energy'],['energy']
Energy Efficiency,"Is that a new option? It's doesn't seem to have an effect in version 1.1.; ```; molecule {; -1 1; Mn -5.8534733333 1.3394733837 -0.4649497438; O -4.6678229246 2.7275455154 -0.8242237964; H -4.6340746874 3.3845395668 -0.1494211065; O -7.2789168965 2.1411811086 0.4215893334; H -7.8199772787 1.5357569391 0.8999611740; O -5.3067672331 -0.0431310925 0.6533689515; H -4.7858036361 -0.6983214503 0.2203485236; O -6.1585656429 0.5314683638 -2.1129873999; H -6.1687683674 1.1358176653 -2.8360759358; }. set basis aug-pcseg-0; set reference rhf; set ci_maxiter 100; set scf_type df; set mcscf_type df; set nat_orbs true. scf_e, scf_wfn = energy('scf', return_wfn = True). # 31 occ orbs; set restricted_docc [ 26 ]; set active [10]; set mcscf_algorithm ah; set mcscf_guess mp2; cas_e, cas_wfn = energy('casscf', ref_wfn = scf_wfn, return_wfn = True); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/829#issuecomment-339627123:630,energy,energy,630,https://psicode.org,https://github.com/psi4/psi4/issues/829#issuecomment-339627123,2,['energy'],['energy']
Energy Efficiency,"Is the ""it"" you're trying the original input file you posted, or the one that Lori posted?. Your input file may or may not demonstrate the problem. Noise in the energy single points leads to noise in the computed gradient leads to noise in the optimization step leads to noise in whether or not you get a problematic geometry. Lori's input file should reproduce the bug 100% of the time. I've been exploring Psi's symmetry handling for an unrelated issue, and it looks like Psi's symmetry detection assumes the symmetry operations can be oriented along the x-, y-, z- axes. I'm not surprised to see problems with symmetry detection if you don't let Psi center-of-mass-adjust the molecule. The symmetry elements would need to be translated in space.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/948#issuecomment-442804174:161,energy,energy,161,https://psicode.org,https://github.com/psi4/psi4/issues/948#issuecomment-442804174,1,['energy'],['energy']
Energy Efficiency,"Is the guess energy the same or does it change by a large amount when changing the Cholesky threshold?. So the SAD energies are correct which means the densities are *likely* similar, and tweaking the Cholesky doesn't help. Color me stumped. Maybe the SAD guess is picking up a odd symmetry with different diagonalizers, can you try `set sad_frac_occ true`?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/773#issuecomment-319246264:13,energy,energy,13,https://psicode.org,https://github.com/psi4/psi4/issues/773#issuecomment-319246264,1,['energy'],['energy']
Energy Efficiency,"Is the proposal to replace uhf/rhf/rohf -> hf for energy(), grad(), etc?; That sounds ok to me (then reference just has to be defined properly). What about DFT, do we define functional properly and do energy('dft'), etc.?. David. On Sun, Jun 7, 2015 at 11:04 PM, Lori A. Burns notifications@github.com; wrote:. > Fixed by 6f6d3aa; > https://github.com/psi4/psi4public/commit/6f6d3aa1d039e4501bc5c5dc4190da1758e1c889; > though I rather think now that defining hf/rhf/uhf/rohf/rsch/roscf/uscf for; > energy() was a bad idea (by me) a few years ago (except for ""hf"" itself).; > Nevertheless, as this ticket points out, having defined these names only; > for energy() confounds the driver logic. These convenience names are now in; > place for gradient() and property().; > ; > I'd be glad to rip out the lot (except for ""hf"") from energy(), grad(),; > prop() if others concur with my present assessment.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/103#issuecomment-109846967.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/103#issuecomment-110021718:50,energy,energy,50,https://psicode.org,https://github.com/psi4/psi4/issues/103#issuecomment-110021718,5,['energy'],['energy']
Energy Efficiency,"Is this problem restricted to CD-MP2, @loriab? If it's affecting the SCF energy too, it seems like it's a problem with the input parser not correctly handling the commented lines.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/244#issuecomment-183516602:73,energy,energy,73,https://psicode.org,https://github.com/psi4/psi4/issues/244#issuecomment-183516602,1,['energy'],['energy']
Energy Efficiency,"Issue carried over from [forums](http://forum.psicode.org/t/cant-run-relativistic-calcs-with-decontracted-basis-sets/1177). If the input basis set is decontracted, Psi will fail to recognize the basis set when trying to use a decontracted version of the input basis for relativistic computations. The following input file will fail due to the commented out line. ```; molecule {; 0 1; CL 0.000000000000 0.000000000000 -0.035925275852; H 0.000000000000 0.000000000000 1.246511684916; symmetry c1; }. basis {. set {; basis cc-pvdz-decon; #basis_relativistic cc-pvdz-decon; df_basis_scf cc-pvdz-jkfit; reference rhf ; e_convergence 1.e-10; relativistic x2c ; }. energy('scf'); ```. The bug itself is probably an easy fix once you know what information is not being handled/passed correctly in the basis set machinery. The hard part is knowing that machinery well enough to figure out where. Reporter also noted that this is a blind spot in the test suite, so additional tests here are welcome.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1471:659,energy,energy,659,https://psicode.org,https://github.com/psi4/psi4/issues/1471,1,['energy'],['energy']
Energy Efficiency,Issue causing pywrap-cbs1 to fail. Has existed for many months. Symptom:. ```; terminate called after throwing an instance of 'psi::PsiException'; what(): BasisSet::shell: requested shell is out-of-bounds.; ```. Can generate with:. ```; memory 250 mb. molecule {; O 0.0 0.0 0.0; H 1.0 0.0 0.0; H 0.0 1.0 0.0; O 3.0 3.0 3.0; H 4.0 3.0 3.0; H 3.0 4.0 3.0; }. set basis aug-cc-pvqz; set scf_type pk. energy('scf'); ```,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/50:397,energy,energy,397,https://psicode.org,https://github.com/psi4/psi4/issues/50,1,['energy'],['energy']
Energy Efficiency,"It [looks like](https://pubs.acs.org/doi/pdf/10.1021/jp9802432) the MP2 part should have the core correlated (even though the basis set is ill suited to describing the core), with the single point energy being performed with a frozen core. If that's prescribed by the method, setting the `freeze_core` keyword doesn't really make sense. Perhaps we can catch if it's been set and print an error message?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1530#issuecomment-462816339:197,energy,energy,197,https://psicode.org,https://github.com/psi4/psi4/issues/1530#issuecomment-462816339,1,['energy'],['energy']
Energy Efficiency,"It also might be an issue with the functional. In my experience with finite element calculations, the B97 functionals are not very well-behaved numerically. I would not be surprised if this was also a case where the functional is so un-smooth that it produces a Fock matrix that causes the energy to blow up. You can try adding damping or switching to another functional. You might have better success by preconverging the orbitals with something else like HF or a simpler density functional.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3051#issuecomment-1736077565:290,energy,energy,290,https://psicode.org,https://github.com/psi4/psi4/issues/3051#issuecomment-1736077565,1,['energy'],['energy']
Energy Efficiency,It appears that the (experimental) prune functions break the recently (PR #2743) introduced/re-activated lebedev_mapping:; https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/cubature.cc#L5112 . The pruning with functions reduces the number of points arbitrarily and then the attempt to infer the order from the number of points fails. Technically no entry is found in the std::map and an error or segfault occurs. This does **not** happen with the 'TREUTLER' or 'ROBUST' pruning as these reduce use well-defined orders for different regions.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2754:233,reduce,reduces,233,https://psicode.org,https://github.com/psi4/psi4/issues/2754,2,['reduce'],"['reduce', 'reduces']"
Energy Efficiency,"It appears that the syntax of most of the listed examples here: https://github.com/psi4/psi4/blob/master/psi4/driver/driver_cbs.py#L1377 is outdated.; A `name` and `label` is required. Possibly just `cbs()` to `energy(cbs,` and `cbs_params` to `cbs_metadata` in [7]. Mentioning `psi4.cbs` might need to be adjusted as well.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1544:211,energy,energy,211,https://psicode.org,https://github.com/psi4/psi4/issues/1544,1,['energy'],['energy']
Energy Efficiency,"It could just be that the optimization in GCC5 introduces some instability that doesn't always show up. I'd still crank it through valgrind if I were you, just to be safe. If we see this consistently, we may have to just reduce the optimization level for that file, to see if that fixes things.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/237#issuecomment-182597595:221,reduce,reduce,221,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182597595,1,['reduce'],['reduce']
Energy Efficiency,"It does for the [direct integrals](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/DirectJK.cc#L228), but not for one-electron integrals, or the disk-based TEIs. The one-electron integrals being slow was not a problem before we started adding external point charge fields like PCM.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1362#issuecomment-439913645:273,charge,charge,273,https://psicode.org,https://github.com/psi4/psi4/issues/1362#issuecomment-439913645,1,['charge'],['charge']
Energy Efficiency,"It is clear to me that, after a full-CI calculation, is possible to print out the two-particle density matrix (2PDM) in MO basis, BUT it is not clear to me if psi4 also allows to print out the 2PDM in AO basis. Could someone help me to solve this problem, please? I really need the 2PDM in AO basis!. Thanks in advance!. PS: this is the input file I am struggling with:. memory 256 mb. molecule h2o {; O; H 1 0.96; H 1 0.96 2 104.5; }. plugin_load(""/auto/store/ale/PSI/objdir/plugins/backtrans/backtrans.so""). set basis 6-31G; set print 5; set OPDM true; set OPDM_PRINT true; set TPDM true; set TPDM_PRINT true; energy('fci'). plugin(""/auto/store/ale/PSI/objdir/plugins/backtrans/backtrans.so"")",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/67:612,energy,energy,612,https://psicode.org,https://github.com/psi4/psi4/issues/67,1,['energy'],['energy']
Energy Efficiency,"It is my understanding that this currently cannot be done using a single `json` file with Psi4 only. The interface only exposes `energy`, `gradient`, or `hessian` calls. . I think the best way to do what you want is via the `qcengine` interface. There's an example of geometry optimization, where you specify a `rdkit` job inside a `geometric` job see here: . https://github.com/MolSSI/QCEngine/blob/master/examples/Examples.ipynb. That example would have to be adapted for `psi4`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2117#issuecomment-783103896:129,energy,energy,129,https://psicode.org,https://github.com/psi4/psi4/issues/2117#issuecomment-783103896,2,"['adapt', 'energy']","['adapted', 'energy']"
Energy Efficiency,"It is perhaps noteworthy that certain other codes converge this case even; with a core guess. -TDC. ## . Prof. T. Daniel Crawford; crawdad@vt.edu. On Thu, Jan 14, 2016 at 8:38 AM, jgonthier notifications@github.com wrote:. > Are both solutions stable ? For UHF computations, it seems to me always; > more safe to do a stability analysis. In some cases, it allowed me to; > eliminate the higher energy solution as unstable.; > ; > However, in other cases, both solutions are actually SCF minima... Trying; > with different guesses then seems the only way to find the lowest energy; > solution.; > ; > 2016-01-14 2:42 GMT-05:00 Rob Parrish notifications@github.com:; > ; > > I have seen this before (for this exact system) - the SAD guess converges; > > to the correct root, but Core does not. Not really much more to it than; > > that.; > > ; > > -Rob; > > ; > > On Wed, Jan 13, 2016 at 11:33 PM, Roberto Di Remigio <; > > notifications@github.com> wrote:; > > ; > > > Choosing a SAD or a core guess for an UHF/cc-pVDZ calculation on H2O+; > > > gives very different energies.; > > > The following input with the core guess gives a total energy of; > > > -75.5488580481183476; > > > ; > > > memory 250 mb; > > > molecule h2o {; > > > symmetry c1; > > > 1 2; > > > O 0.0000000000 0.0000000000 -0.2249058930; > > > H 1.4523499293 0.0000000000 0.8996235720; > > > H -1.4523499293 0.0000000000 0.8996235720; > > > units bohr; > > > no_reorient; > > > no_com; > > > }; > > > ; > > > set {; > > > basis cc-pVDZ; > > > scf_type direct; > > > guess core; > > > reference uhf; > > > e_convergence 7; > > > d_convergence 7; > > > }; > > > ; > > > energy_scf1 = energy('scf'); > > > ; > > > while this input with the SAD guess gives a total energy of; > > > -75.6330881795159655; > > > ; > > > memory 250 mb; > > > molecule h2o {; > > > symmetry c1; > > > 1 2; > > > O 0.0000000000 0.0000000000 -0.2249058930; > > > H 1.4523499293 0.0000000000 0.8996235720; > > > H -1.4523499293 0.0000000000 0.8996235720; > > > ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/211#issuecomment-171648923:394,energy,energy,394,https://psicode.org,https://github.com/psi4/psi4/issues/211#issuecomment-171648923,2,['energy'],['energy']
Energy Efficiency,"It is printed... I know which basis set I use, but would just like upfront; to make my chargemol job-control file ready for my basis set choise. Thank; you all!. On Tue, 14 Aug 2018, 15.59 David Sherrill, <notifications@github.com> wrote:. > If we don't print the number of implied core electrons in the output; > somewhere when using an ECP basis, it wouldn't be a bad idea to do so.; >; > On Tue, Aug 14, 2018 at 9:56 AM Peter Kraus <notifications@github.com>; > wrote:; >; > > Ideally, you should know what kind of basis set you're using, as you're; > > presumably going to cite it in your work; the details about the number of; > > core e-'s treated as effective potentials will be included there. There; > > are also all-electron basis sets available for almost any element; some; > of; > > them are shipped with Psi4 (eg. 3-21g). Psi4 tells you the basis has an; > ECP; > > in the => Loading Basis Set <= section, and the details are printed later; > > on under ==> Primary Basis <==.; > >; > > As for the question of 28 vs 36 electrons: the first 28 electrons are the; > > 1s2 + 2s2, 2p6 + 3s2, 3p6, 3d10 shells - ie. full 1st, 2nd and 3rd shell.; > > The additional 8 electrons you're thinking about are from the 4th period; > > shells, where the 4d10 part is in your 5th valence shell - so you don't; > > really want to replace any of those with a potential. (At least that's my; > > rather limited understanding.); > >; > > —; > > You are receiving this because you are subscribed to this thread.; > > Reply to this email directly, view it on GitHub; > > <https://github.com/psi4/psi4/issues/1113#issuecomment-412880178>, or; > mute; > > the thread; > > <; > https://github.com/notifications/unsubscribe-auth/AC9Qdo2cyTQSSl9yOfKzl_lCPspYyi6jks5uQtbpgaJpZM4VoV4l; > >; > > .; > >; >; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/1113#issuecomment-412881311>, or mute; > the thread; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1113#issuecomment-412883315:87,charge,chargemol,87,https://psicode.org,https://github.com/psi4/psi4/issues/1113#issuecomment-412883315,1,['charge'],['chargemol']
Energy Efficiency,"It is still possible to create the ""ADIIS minimization failed"" error with the input file below (only changes to the above are correcting the coordinates' units and changing VV10 parameters), but I imagine this is because the values for (b,c) are now so extreme that it's no longer physical. . ```; set num_frozen_docc 12; set {; dft_vv10_b 0.01; dft_vv10_c 0.01; }; set {; basis def2-tzvppd; guess sad; dft_nuclear_scheme SBECKE; dft_radial_scheme EM; dft_radial_points 99; dft_spherical_points 590; dft_vv10_radial_points 50; dft_vv10_spherical_points 194; dft_pruning_scheme robust; }; set {; wcombine False; }; molecule mol {; 0 1; C -0.49280516 -1.34928891 1.93251153; C 0.84810575 -1.10523761 2.10967679; C 1.26836829 0.29972931 2.0863085 ; C 0.33631373 1.28766879 2.06605249; C -1.0593442 1.02559068 1.99570094; C -1.46753033 -0.25217665 2.08599284; H -0.8366212 -2.3512709 1.85597882; H 1.65258993 -1.81487491 2.11488685; H 2.30066607 0.63566923 1.9769963 ; H 0.6336208 2.42220895 1.85607739; H -1.79244121 1.74937993 2.11242291; H -2.68362171 -0.43063144 2.07823169; C -0.8151077 -1.09341082 -1.9012646 ; C -1.16492239 0.31096713 -2.00016775; C -0.29873999 1.38082172 -1.68134071; C 0.91640784 1.08513712 -1.22645142; C 1.30080416 -0.26891269 -1.09865272; C 0.4588141 -1.39278819 -1.38251659; H -1.3834194 -1.9058937 -2.16792859; H -2.20012949 0.38972302 -2.19448924; H -0.48864896 2.51613661 -1.54574084; H 1.66750317 1.87858355 -1.04866167; H 2.23050409 -0.51844162 -0.70388782; H 0.9799473 -2.25156744 -1.27023577; units angstrom; no_reorient; no_com; symmetry c1; }; mol.update_geometry(); e, wf = energy('wb97m-v',return_wfn=True,); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2641#issuecomment-1192984871:1610,energy,energy,1610,https://psicode.org,https://github.com/psi4/psi4/issues/2641#issuecomment-1192984871,1,['energy'],['energy']
Energy Efficiency,It is; ```; molecule {; pubchem:91749189; }. memory 40 gb; set basis pcseg-0; energy('pbe'); ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1666#issuecomment-503139259:78,energy,energy,78,https://psicode.org,https://github.com/psi4/psi4/issues/1666#issuecomment-503139259,1,['energy'],['energy']
Energy Efficiency,"It looks like I forgot to add `CMAKE_BUILD_PARALLEL_LEVEL=2` to the docs CI. I learned that when a Ninja build of Psi4 gives up in the early 200s of 1200 files, it's because it's out of memory on CI nodes when compiling libmints. Ninja automatically oversubscribes the available cores, so throttling down to allocated cores helps. Docs were recently converted to Ninja CMake generator (from Makefiles CMake generator).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3123#issuecomment-1899318634:308,allocate,allocated,308,https://psicode.org,https://github.com/psi4/psi4/pull/3123#issuecomment-1899318634,1,['allocate'],['allocated']
Energy Efficiency,"It looks like the default screening thresholds are different for energy and gradient calculations:. https://github.com/psi4/psi4/blob/3057799cde5524432ed3978416748386e437f1fb/psi4/src/psi4/libfock/jk.cc#L199. https://github.com/psi4/psi4/blob/3057799cde5524432ed3978416748386e437f1fb/psi4/src/psi4/scfgrad/jk_grad.cc#L118. I don't know if this is intentional, but it seems reasonable since a small integral doesn't guarantee a small gradient. Either way, these defaults are overridden when `ints_tolerance` is explicitly set.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1540#issuecomment-464864482:65,energy,energy,65,https://psicode.org,https://github.com/psi4/psi4/issues/1540#issuecomment-464864482,1,['energy'],['energy']
Energy Efficiency,"It might not be in the code this way, but to me, the keyword `set basis something` sets a global-like value: everything that follows is expected to be calculated using that basis set. Both you and I know, that it is possible to change the code to allow:; ```; set basis sto-3g; energy('gaussian-2'); ```; to finish, and currently it even calculates a proper G2 energy. However, for example:; ```; set basis sto-3g; energy('pbeh-3c'); ```; doesn't - it will use `sto-3g` and it'll pretend it's doing `pbeh-3c`. If I pretend I'm someone who's never used Psi4 before, this is confusing. I believe we should change it, one way or another, but be consistent for composite methods. To answer your question, i'd suggest:; ```; molecule {; ...; }. energy('scf/sto-3g'); energy('gaussian-2'); ```; as a neat, unambiguous alternative.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1530#issuecomment-483020233:278,energy,energy,278,https://psicode.org,https://github.com/psi4/psi4/issues/1530#issuecomment-483020233,5,['energy'],['energy']
Energy Efficiency,"It seems that I am having some trouble with PSIO. . ```; Traceback (most recent call last):; File ""/Users/kevinhannon/Programs/psi4_test_cmake/Build/stage/Users/kevinhannon/Programs/psi4_test_cmake/Install/bin/psi4"", line 210, in <module>; exec(content); File ""<string>"", line 34, in <module>; File ""/Users/kevinhannon/Programs/psi4_test_cmake/Build/stage/Users/kevinhannon/Programs/psi4_test_cmake/Install/bin/../lib//psi4/driver/driver.py"", line 447, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File; ""/Users/kevinhannon/Programs/psi4_test_cmake/Build/stage/Users/kevinhannon/Programs/psi4_test_cmake/Install/bin/../lib//psi4/driver/procedures/proc.py"", line 4005, in run_detcas; ref_wfn = scf_helper(name, **kwargs); File ""/Users/kevinhannon/Programs/psi4_test_cmake/Build/stage/Users/kevinhannon/Programs/psi4_test_cmake/Install/bin/../lib//psi4/driver/procedures/proc.py"", line 1306, in scf_helper; e_scf = scf_wfn.compute_energy(). RuntimeError:; Fatal Error: PSIO Error; ```. This error is happening randomly. I had to run the ctest -R ""ao"" a few times to get this error. . @dgasmith, what should I change in proc.py for detcas if I want the JK object to handle the initialization of the integrals?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/520#issuecomment-261257394:456,energy,energy,456,https://psicode.org,https://github.com/psi4/psi4/pull/520#issuecomment-261257394,2,['energy'],['energy']
Energy Efficiency,"It seems that the process of creating the geometry was at fault—in particular, in a production run, I created molecules with the ""units angstrom"" tag, and then called `molecule.set_full_geometry(xyzs)` on each of them. This seems to have had the effect of assuming that the coordinates were in bohr, then converting them to angstroms (dividing by 1.889). This, I think, produces the rough factor of 2 difference observed. I had missed that set_full_geometry assumes that the coordinates are in Bohr. I will try rerunning the fixed version in production to see if I end up with any similar errors. It takes a rather long time to converge (currently at 35 iterations; it's not converged yet), and it is quite low in energy—currently, -905 Hartree.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2641#issuecomment-1192972026:714,energy,energy,714,https://psicode.org,https://github.com/psi4/psi4/issues/2641#issuecomment-1192972026,1,['energy'],['energy']
Energy Efficiency,"It seems there is a weird bug in Psi4 version 1.6.1 when using multithreading and PK as SCF algorithm, which results in essentially random results. I've attached a minimal example python script that runs the same calculation 10 times and prints the results to console. minimal_example.py:; ```; import psi4; import argparse. parser = argparse.ArgumentParser(); parser.add_argument('--num_threads', type=int, default=1); parser.add_argument('--scf_type', type=str, default='DF'); parser.add_argument('--element', type=int, default=1); parser.add_argument('--multiplicity', type=int, default=2); args = parser.parse_args(). psi4.core.be_quiet() # Silence output for clarity.; psi4.set_num_threads(args.num_threads, quiet=True); psi4.set_options({; 'REFERENCE': 'UHF',; 'SCF_TYPE': args.scf_type,; }). for i in range(10):; energy = psi4.energy(; 'pbe0/sto-3g',; molecule=psi4.core.Molecule.from_arrays(; geom=[0, 0, 0],; elez=[args.element],; molecular_charge=0,; molecular_multiplicity=args.multiplicity)); print(energy); ```. To reproduce the behaviour, run; `python minimal_example.py --num_threads 6 --scf_type PK --element 1 --multiplicity 2`. For me, the output of this is (the exact numbers change on re-runs):; > -0.41204465858903644; -0.18510932345625386; 0.18101301722463536; -0.17603191005094254; -0.1034126028084521; -0.04894812237658419; -0.2577286306987443; -0.3757350049677912; -0.26680604410405556; -0.26680604410405556. Interestingly, the issue is not present when using PK and a single thread,; `python test.py --num_threads 1 --scf_type PK --element 1 --multiplicity 2`. nor when using multiple threads, but DIRECT instead of PK; `python test.py --num_threads 6 --scf_type DIRECT --element 1 --multiplicity 2`. In both of these cases, I always get the same output:; > -0.46650913902090424; -0.46650913902090424; -0.46650913902090424; -0.46650913902090424; -0.46650913902090424; -0.46650913902090424; -0.46650913902090424; -0.46650913902090424; -0.46650913902090424; -0.4665091390209042",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2760:820,energy,energy,820,https://psicode.org,https://github.com/psi4/psi4/issues/2760,2,['energy'],['energy']
Energy Efficiency,"It should do but I'll check once the test suite with python 3 has finished and let you know. I am running the full test suite which is revealing a few more compatibility issues. Most are minor and easily fixed. The major problem is that iteritems and itervalues are used in several places. Unfortunately these have been (essentially) replaced in python 3 with the items and values methods, which return lists (rather than memory efficient generators) in python 2. I'm not sure what to do about this--one option is to just use the items and values methods, but that uses more memory in python 2. Another alternative is to write a function which returns iteritems in python 2 and items in python 3, but that's quite intrusive. Thoughts?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/9#issuecomment-20534484:429,efficient,efficient,429,https://psicode.org,https://github.com/psi4/psi4/pull/9#issuecomment-20534484,1,['efficient'],['efficient']
Energy Efficiency,"It was able to converge fine. . You should see a section like this in the output file showing the EOM code working away at the root. ; ```; Symmetry of ground state: Ag; Symmetry of excited state: Ag; Symmetry of right eigenvector: Ag; Seeking states with multiplicity of 1; Obtaining initial guess from singles-singles block of Hbar...Done. Iter=1 L=1 Root EOM Energy Delta E Res. Norm Conv?; 1 0.4128588902 4.13e-01 3.16e-01 N; Iter=2 L=2 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3340136980 -7.88e-02 5.54e-02 N; Iter=3 L=3 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3311169492 -2.90e-03 2.75e-02 N; Iter=4 L=4 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3303034550 -8.13e-04 1.53e-02 N; Iter=5 L=5 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3299847862 -3.19e-04 9.33e-03 N; Iter=6 L=6 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3299158588 -6.89e-05 4.43e-03 N; Iter=7 L=7 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3299119405 -3.92e-06 1.74e-03 N; Iter=8 L=8 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3299103467 -1.59e-06 6.71e-04 N; Iter=9 L=9 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3299072934 -3.05e-06 3.17e-04 N; Iter=10 L=10 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3299064524 -8.41e-07 1.45e-04 N; Iter=11 L=11 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3299063854 -6.69e-08 9.39e-05 Y; Collapsing to only 1 vector(s). Procedure converged for 1 root(s).; Energy written to CC_INFO:Etot -231.2454217333; States per irrep written to CC_INFO.; EOM CCSD R0 for root 0 = -0.03232771150. Final Energetic Summary for Converged Roots of Irrep Ag; Excitation Energy Total Energy; (eV) (cm^-1) (au) (au); EOM State 1 8.977 72406.1 0.3299063854 -231.245421733323; ```. Summary at the end of the file also shows:; ```; 	 Excitation Energy OS RS RS Einstein A; 	State (eV) (cm^-1) (nm) (au) (l,au) (v,au) (s^-1); 	 1 Ag 8.977 72406.1 138.1 0.329906 0.0000 0.0000 0.0000 0.000000E+00; ```. If you are seeing something different could you put your output in a gist, or pastebin?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/603#issuecomment-278675637:1156,Energy,Energy,1156,https://psicode.org,https://github.com/psi4/psi4/issues/603#issuecomment-278675637,7,['Energy'],['Energy']
Energy Efficiency,"It was possible to compile and install psi4 without problems, but the `make` command returned. `hernan@carlos:~/Power Method/Psi4/pluginintegrales$ make; /usr/bin/g++ -DHAVE_MM_MALLOC_H -DENABLE_CHEMPS2=1 -DFC_SYMBOL=2 -DHAVE_SYSTEM_NATIVE_LAPACK -DHAVE_SYSTEM_NATIVE_BLAS -DHAS_CXX11_VARIADIC_TEMPLATES -DHAS_CXX11_STATIC_ASSERT -DHAS_CXX11_SIZEOF_MEMBER -DHAS_CXX11_RVALUE_REFERENCES -DHAS_CXX11_NULLPTR -DHAS_CXX11_LONG_LONG -DHAS_CXX11_LAMBDA -DHAS_CXX11_INITIALIZER_LIST -DHAS_CXX11_DECLTYPE -DHAS_CXX11_CSTDINT_H -DHAS_CXX11_CONSTEXPR -DHAS_CXX11_AUTO_RET_TYPE -DHAS_CXX11_AUTO -DHAS_CXX11_FUNC -DHAS_CXX11 -DSYS_LINUX -DRESTRICT=__restrict__ -Xlinker -export-dynamic -fPIC -std=c++11 -fopenmp -O3 -DNDEBUG -Wno-unused -I/home/hernan/Programas/psi4/instalacion/interfaces/include -I/home/hernan/Programas/psi4/instalacion/src/lib -I/home/hernan/Programas/psi4/psi4/src/lib -I/home/hernan/Programas/psi4/psi4/include -I/home/hernan/Programas/psi4/instalacion/include -I/home/hernan/Programas/psi4/instalacion/boost/include -I/usr/include/python2.7 -I/usr/include -I/usr/include -I/usr/include -I/usr/include -c pluginintegrales.cc; pluginintegrales.cc: In function ‘psi::PsiReturnType psi::pluginintegrales::pluginintegrales(psi::Options&)’:; pluginintegrales.cc:63:64: error: ‘class psi::Process::Environment’ has no member named ‘wavefunction’; boost::shared_ptr<Wavefunction> wfn = Process::environment.wavefunction();; ^; make: *** [pluginintegrales.o] Error 1`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/308#issuecomment-194954608:112,Power,Power,112,https://psicode.org,https://github.com/psi4/psi4/issues/308#issuecomment-194954608,1,['Power'],['Power']
Energy Efficiency,"It was revealed that single point can behave a little differently between `set basis bas; energy(mtd)` and `energy(mtd/bas)` calls. (copied from #2575). https://github.com/psi4/psi4/pull/2575#discussion_r876092414. Pre-ddd, CBS wrapper issues a `clean()` btwn calcs. Plain string modelchem calcs like `energy('hf/cc-pvdz')` were getting caught and also being cleaned, meaning their behavior was slightly different than `set basis cc-pvdz \n energy('hf')`. With ddd, this is no longer happening, so for occasional string modelchem calcs (that is, `energy|gradient|hessian(""mtd/bas"")` only), you may need to add a clean in the input. A few test cases now sport extra cleans. Signatures of this problem are PSIO errors and, in an obscure case, CC amplitudes being all zeros when called as mtd/bas. An example is shown below, collected by modifying steps 6 & 7 of `cbs-xtpl-energy-conv` test:. | | master (pre-v1.6) | ddd (v1.6) |; |-------------------------------------|---------------------------------------------|---------------------------------------------|; | set basis bas; energy(mtd); clean() | ok | ok |; | set basis bas; energy(mtd) | `PSIO_ERROR: (Incorrect block end address)` | `PSIO_ERROR: (Incorrect block end address)` |; | energy(mtd/bas); clean() | ok | ok |; | energy(mtd/bas) | ok | `PSIO_ERROR: (Incorrect block end address)` |. So after DDD, the two approaches behave the same. But psio errors aren't user friendly. Should we reconsider whether to auto clean after an energy() call? Advanced users would need to save more files explicitly. Maybe should clean() _before_ an energy() call.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2583:90,energy,energy,90,https://psicode.org,https://github.com/psi4/psi4/issues/2583,12,['energy'],"['energy', 'energy-conv']"
Energy Efficiency,"It would be valuable to developers, nightly builds, and CI testing if libint could be compiled once, then linked in as needed, like we can do for Boost. Much developer anger when CMake spontaneously decides the integrals need recompiling could be soothed! We could test molecules larger than He with density-fitted quad-zeta! The next NSF green initiative could applaud our energy savings!. Who dares to decouple libint from our build system such that it could become a detectable `ExternalProject_Add` CMake module? I think we need to be able to pass in MAX_AM, and it would be nice to have it build both static and shared libraries.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/355:339,green,green,339,https://psicode.org,https://github.com/psi4/psi4/issues/355,2,"['energy', 'green']","['energy', 'green']"
Energy Efficiency,"It would be very handy to have the ability to read/write entire Wavefunctions. We do this somewhat awkwardly for the SCF `read` guess functionality on [this](https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/proc.py#L1384) line. . Some issues and solutions:; - Serializing basis sets could be problematic. Saving the Python dictionary representation of the basis is the likely solution see [here](https://github.com/psi4/psi4/blob/master/psi4/driver/p4util/python_helpers.py#L43) to get started.; - Molecule can be serialized to/from a string (future JSON) `core.Molecule.create_molecule_from_string(mol_string)`.; - Initializing a new Wavefunction could be done with a long signature call that looks something like `Wavefunction(std::map<str::string, SharedMatrix>, std::map<str::string, SharedVector>, std::map<str::string, Dimension>, ...`. This could help reduce the number of inputs required. Curious if anyone has suggestions to simplify the population of private data. Use cases:; - Write our RHF wavefunction, read in for many post-SCF methods.; - Save initial guesses for tricky to converge molecules.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/887:875,reduce,reduce,875,https://psicode.org,https://github.com/psi4/psi4/issues/887,1,['reduce'],['reduce']
Energy Efficiency,"It'd be good if your experience writing and running the code and some of the data from your technical document can be formed into some user documentation, @yxie326 . I suggest a section within https://raw.githubusercontent.com/psi4/psi4/master/doc/sphinxman/source/sapt.rst . No need to build the docs -- you can just edit the file, and I'll clean up any sphinx difficulties later. You'll want the section to help the user answer the questions of ""what is this method?"" and ""will it work for my application?"". Below are some specific aspects that might help the user. Anything in the style of the rest of that sapt.rst file would be helpful. * what references (rhf/uhf/rohf) does dft-sapt work for?; * what are the differences btwn this and molpro or sapt2000? implementations?; * hybrid disp is new. what accuracy advantages can it give? what's not coded (e.g., LRC)?; * what is the largest system it's been tried for?; * what is the big-O scaling wrt occ/virt orb/aux sizes?; * eligible scf_type both conv and df?; * S^2 treatment? is the approx always applied or can Patkowski's S inf be used?; * any needed or recommended keywords for running?; * influence of grid? default (75, 302) ok? any more sensitive than dft itself?; * probably mention charge-transfer and monomer-centered basis variants not applicable to dft-sapt; * when you'd want to use each of the disp_scale_scheme; * is GRAC pertinent? any additional data needed for molecular system?; * where (in literature) can I find the equations if I want to know more? (probably the answer is a few published papers and your WIP one that you can use a placeholder for)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1865#issuecomment-674974155:1248,charge,charge-transfer,1248,https://psicode.org,https://github.com/psi4/psi4/pull/1865#issuecomment-674974155,1,['charge'],['charge-transfer']
Energy Efficiency,"It'd be great if you wanted to work on this. I'm fine with the current behavior, that the `set dft_functional b3lyp\n energy('scf')` runs scf. It's the `energy('b3lyp')` notation that we want to be user friendly, and that's already satisfied. Ok to keep the `set dft_functional b3lyp` notation straightforward and less user-friendly.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/117#issuecomment-121817414:118,energy,energy,118,https://psicode.org,https://github.com/psi4/psi4/issues/117#issuecomment-121817414,2,['energy'],['energy']
Energy Efficiency,"It's a duplicate of #391 . Unfortunately, python3-numpy is linked to ATLAS on Debian, so it will not be very easy to get around this, but I have (again) confirmed that if I set `blas.so` and `lapack.so` to something else than ATLAS then the `cdomp2-2` test passes:. ```; 	CD-OMP2 Total Energy (a.u.).......................................PASSED; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1461#issuecomment-451659665:286,Energy,Energy,286,https://psicode.org,https://github.com/psi4/psi4/issues/1461#issuecomment-451659665,1,['Energy'],['Energy']
Energy Efficiency,"It's a feature not a bug?. Symmetric molecules are supposed to have symmetric wavefunctions (because; the Hamiltonian commutes with the symmetry operators). Certainly, the; exact wavefunction does has the full point group symmetry. Occasionally,; approximate QM methods can have lower-energy non-symmetric solutions.; Anytime the wavefunction has a lower symmetry than the molecule, this is; usually considered a bad thing and is often called ""artifactual (spatial); symmetry breaking."" Wes Allen and Daniel Crawford have some excellent; papers on this topic (I've made a couple contributions, also). In most applications, generally the high symmetry wavefunction is the one; that is actually desired, although it depends on the situation whether the; symmetric or non-symmetric solutions will give better predictions of; molecular properties. C2H4 is not a classic ""symmetry breaking molecule"" to my knowledge, so I'm; surprised that there is a symmetry-breaking solution to the SCF equations. On Tue, Dec 5, 2017 at 3:11 PM, Daniel Smith <notifications@github.com>; wrote:. > I believe we have had this problem in the past. Take a symmetric molecule; > who's optimal wavefunction should contain less symmetry:; >; > import numpy as np; >; > mol = psi4.geometry("""""" 0 1C 0.0 0.0 0.673055C 0.0 0.0 -0.673055H 0.0 0.934981 1.246807H 0.0 -0.934981 1.246807H 0.934981 0.0 -1.246807H -0.934981 0.0 -1.246807symmetry c1""""""); > # Set reference and guess.; > psi4.set_options({; > ""reference"": ""rhf"",; > ""guess"": ""sad"",; > ""basis"": ""DZP"",; > ""soscf"": ""true"",# ""sad_frac_occ"": ""true""; > }); >; > energy = energy('scf')if np.allclose(energy, -77.87781349420317):; > print(""Found non-symmetric minima! Success!"")elif np.allclose(energy, -77.84789770426966):; > print(""Found symmetric minima... failure."")else:; > print(""You found something... wrong.""); >; > The -77.847 result should be found when the molecule is constrained to; > symmetry. However, without that constraint there is a lower SCF result to; > be",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/875#issuecomment-349464469:285,energy,energy,285,https://psicode.org,https://github.com/psi4/psi4/issues/875#issuecomment-349464469,1,['energy'],['energy']
Energy Efficiency,"It's actually not in the molecule parsing, as the first `Mol.print_out()` is correct. So somewhere in the driver call. Investigating ... ```; molecule probe {; @H 0.0 0.0 0.0; @I 1.5 0.0 0.0; 0 1; H 0.0 3.0 0.0; F 1.5 3.0 0.0; noreorient; }; probe.update_geometry(); probe.print_out(); e_probe = energy('hf/def2-svpd'). clean(). molecule probe {; @H 0.0 0.0 0.0; @F 1.5 0.0 0.0; 0 1; H 0.0 3.0 0.0; F 1.5 3.0 0.0; noreorient; }; probe.update_geometry(); probe.print_out(); e_probe = energy('hf/def2-svpd'); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/843#issuecomment-397901527:296,energy,energy,296,https://psicode.org,https://github.com/psi4/psi4/issues/843#issuecomment-397901527,2,['energy'],['energy']
Energy Efficiency,"It's not immediately clear to me why no_com and no_reorient are required to get energies right in this case. Shouldn't the energy be invariant to the choice of coordinate system?. ## -Daniel . Prof. T. Daniel Crawford; crawdad@vt.edu; 540-231-7760. On May 19, 2014, at 10:01 AM, Eugene DePrince notifications@github.com wrote:. > If a user wants to make a potential energy curve or surface, it is very easy to generate nonsense when using cartesian coordinates. Using nocom and no_reorient fixes this, so maybe the driver should be setting these options if it detects such a case.; > ; > molecule beh2 {; > Be 0.0 0.0 z; > H 0.0 1.0 0.0; > H 0.0 -1.0 0.0; > }; > molecule beh2_nocom {; > Be 0.0 0.0 z; > H 0.0 1.0 0.0; > H 0.0 -1.0 0.0; > nocom; > no_reorient; > }; > activate(beh2); > set basis sto-3g; > set guess sad; > for i in range (1,41):; > z = i*0.1; > beh2.z = z; > e = energy('scf'); > print z,e; > set guess read; > print ''; > ; > activate(beh2_nocom); > set basis sto-3g; > set guess sad; > for i in range (1,41):; > z = i*0.1; > beh2_nocom.z = z; > e = energy('scf'); > print z,e; > set guess read; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/59#issuecomment-43508954:123,energy,energy,123,https://psicode.org,https://github.com/psi4/psi4/issues/59#issuecomment-43508954,4,['energy'],['energy']
Energy Efficiency,"It's not much advertised, but the cc* modules can do some density fitting. In particular, it's found that:; * df-cc2 rhf gradients run and equal findif gradients. #2137; * df-ccsd rhf gradients run and differ from conventional by <1.e-6 . Jonathon finds that not all terms make use of DF and not hooked up to DF gradient tech.; * df-ccsd rhf energies run and differ from fnocc by 2e-7 for correlation energy (inconsistent ref energy so printing and qcvars differ more); * df-ccsd uhf energies print NYI msg; * df-ccsd rohf energies run and are plausible compared to conventional. But plumbing-wise, these aren't ready to activate:; * ccenergy vs. (fnocc, dfocc) choose a different reference. ccenergy uses CONV as the ints are needed anyways. others choose DF since that's the SCF_TYPE setting; * is DF used thoroughly enough to match DF-only implementations? if not, is it used in the expensive places so that it's worth calling instead of the reliable CONV?; * does df-rohf need validation and if so, from where?. Current state of accessibility for DF CCENERGY is that CCSD has been barred by it being a managed method, while CC2 could be accessed by turning on `cc_type=df`. Probably any DF in CCENERGY is accessible through `energy(""ccenergy"")` with a lot of manual option setting. When I converted CC2 to a managed method (locally), that broke the DF-CC2 gradient test https://github.com/psi4/psi4/blob/master/tests/pytests/test_gradients.py#L41 and reminded me that DF in CCENERGY was semi-active. For now, I plan to add an escape clause to the CC2 managed gradient so that the test can run but otherwise leave DF CCENERGY inaccessible and out of stdsuite and capabilities tables.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2710:401,energy,energy,401,https://psicode.org,https://github.com/psi4/psi4/issues/2710,3,['energy'],['energy']
Energy Efficiency,"It's not too complicated. The below is equivalent and slightly preferred. ```; set {; basis sto-3g # minimal orbital basis set; df_scf_guess false # usually, psi4 saves time by doing most of the HF iterations using density fitting then only a few with the full integrals. Since fitting basis sets aren't available, this skips the density fitting iterations.; scf_type direct # selects a non-density-fitting algorithm for the HF; guess sad # a better guess to start the HF iterations; sad is nearly always the best guess; mp2_type conv # selects a non-density-fitting algorithm for the MP2; }; energy('mp2'); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/105#issuecomment-144769489:593,energy,energy,593,https://psicode.org,https://github.com/psi4/psi4/issues/105#issuecomment-144769489,1,['energy'],['energy']
Energy Efficiency,"It's sort of hard to follow the code. You should remove all the stuff about charges; the algorithm needs to do the memory estimate based on the actual occupied orbitals. You should separate the Coulomb and exchange bits, since Coulomb can be computed as a dot product, while exchange is a matrix multiplication. Range-separated exchange should be supported. You also can't assume that you can fit all the integrals into memory in a big system; you need to batch over the occupied orbitals based on the amount of memory that's available. . Please check Weigend's paper on how to do RI-HF optimally.; https://pubs.rsc.org/en/content/articlelanding/2002/cp/b204199p",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2040#issuecomment-733280957:76,charge,charges,76,https://psicode.org,https://github.com/psi4/psi4/pull/2040#issuecomment-733280957,1,['charge'],['charges']
Energy Efficiency,"It's too bad thus is not working properly!. If the Molden output from Psi is being used as input to the QMC, and the; wrong CI energy is obtained, then it may be that we have a bug in the; Molden output writer. (Are we sure the CAS orbitals are the ones being; written out, and not HF orbitals?). The signs on the determinants printed by Psi4 code are well tested, and so; I think it is extremely unlikely they could be wrong. It is much more; likely that there is some kind of mismatch between the orbitals being used; in the CAS and the orbitals being put into the QMC code. Possible due to a; bug in the Molden writer, or possibly due to some kind of enforced phase; convention in the QMC code that is incompatible with the phase of the; orbitals from Psi. On Sep 23, 2017 9:47 AM, ""Daniel Smith"" <notifications@github.com> wrote:. > @CDSherrill <https://github.com/cdsherrill> Perhaps you could comment on; > this?; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/796#issuecomment-331640263>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AC9QdiI93WW1UBA9Fg9JkauL9vxRKM6uks5slRnvgaJpZM4PK23n>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/796#issuecomment-331666710:127,energy,energy,127,https://psicode.org,https://github.com/psi4/psi4/issues/796#issuecomment-331666710,1,['energy'],['energy']
Energy Efficiency,"I’ve hit that myself. Add to the cmake command -DENABLE_simint=OFF. I’ll have another go at the simint ppl to get them to release a tarball with simint am8 so we can build both at once. Or, having pointed cmake toward an am8 libint prebuilt, reduce your min requested to 7.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1341#issuecomment-436999448:242,reduce,reduce,242,https://psicode.org,https://github.com/psi4/psi4/issues/1341#issuecomment-436999448,1,['reduce'],['reduce']
Energy Efficiency,"J/(mol K)] 0.00000000 [mEh/K]. Constant volume heat capacity, Cv; Electronic Cv 0.000 [cal/(mol K)] 0.000 [J/(mol K)] 0.00000000 [mEh/K]; Translational Cv 2.981 [cal/(mol K)] 12.472 [J/(mol K)] 0.00475022 [mEh/K]; Rotational Cv 2.981 [cal/(mol K)] 12.472 [J/(mol K)] 0.00475022 [mEh/K]; Vibrational Cv 58.770 [cal/(mol K)] 245.894 [J/(mol K)] 0.09365622 [mEh/K]; Total Cv 64.732 [cal/(mol K)] 270.838 [J/(mol K)] 0.10315665 [mEh/K]; Correction Cv 0.000 [cal/(mol K)] 0.000 [J/(mol K)] 0.00000000 [mEh/K]. Constant pressure heat capacity, Cp; Electronic Cp 0.000 [cal/(mol K)] 0.000 [J/(mol K)] 0.00000000 [mEh/K]; Translational Cp 4.968 [cal/(mol K)] 20.786 [J/(mol K)] 0.00791703 [mEh/K]; Rotational Cp 2.981 [cal/(mol K)] 12.472 [J/(mol K)] 0.00475022 [mEh/K]; Vibrational Cp 58.770 [cal/(mol K)] 245.894 [J/(mol K)] 0.09365622 [mEh/K]; Total Cp 66.719 [cal/(mol K)] 279.152 [J/(mol K)] 0.10632347 [mEh/K]; Correction Cp 0.000 [cal/(mol K)] 0.000 [J/(mol K)] 0.00000000 [mEh/K]. ==> Thermochemistry Energy Analysis <==. Raw electronic energy, E0; Total E0, Electronic energy at well bottom at 0 [K] -1226.44775184 [Eh]. Zero-point energy, ZPE_vib = Sum_i nu_i / 2; Electronic ZPE 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Translational ZPE 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Rotational ZPE 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Vibrational ZPE 164.391 [kcal/mol] 687.812 [kJ/mol] 0.26197380 [Eh] 57496.603 [cm^-1]; Correction ZPE 164.391 [kcal/mol] 687.812 [kJ/mol] 0.26197380 [Eh] 57496.603 [cm^-1]; Total ZPE, Electronic energy at 0 [K] -1226.18577804 [Eh]. Thermal Energy, E (includes ZPE); Electronic E 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Translational E 0.889 [kcal/mol] 3.718 [kJ/mol] 0.00141628 [Eh]; Rotational E 0.889 [kcal/mol] 3.718 [kJ/mol] 0.00141628 [Eh]; Vibrational E 174.027 [kcal/mol] 728.129 [kJ/mol] 0.27732956 [Eh]; Correction E 175.804 [kcal/mol] 735.566 [kJ/mol] 0.28016212 [Eh]; Total E, Electronic energy at 298.15 [K] -1226.1675",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2297#issuecomment-925160079:6218,Energy,Energy,6218,https://psicode.org,https://github.com/psi4/psi4/issues/2297#issuecomment-925160079,1,['Energy'],['Energy']
Energy Efficiency,"Jonathon has pointed out that def2-svp has an ECP but 3-21G does not, hence the massive energy difference, so no issue there. My bad.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/888#issuecomment-432353409:88,energy,energy,88,https://psicode.org,https://github.com/psi4/psi4/issues/888#issuecomment-432353409,1,['energy'],['energy']
Energy Efficiency,"Just a followup on the fnocc2 error. I had passed in the `dertype=1` flag to reduce AM requirements; that flag got lost in your merge of my PR. I think the current solution is better; we now use analytic frequencies in that test case because the AM requirements have been reduced since I fixed the erroneous AM check in libmints. The clang-3.8 failure is caused by two things: 1) the Boost detection fails and 2) building Boost fails because of [this bug](https://bugzilla.redhat.com/show_bug.cgi?id=1120995), which was fixed in clang 3.4. For some crazy reason, Travis is providing 3.4 even though we specifically request 3.8. I noticed that some of the tests do get version 3.8, so I'm not sure it's a problem with out YML but will poke around a little. This will all go away (and our build time will drop) when the Boost detection works with Travis again.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-235144008:77,reduce,reduce,77,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235144008,2,['reduce'],"['reduce', 'reduced']"
Energy Efficiency,"Just a quick note on the failing tests so I don't forget: `dft-smoke` fails because it includes DSD-PBEP86 (which was parametrised for -D2, now is parametrised without it); `dftd3-energy` fails because of `dashparams['sr8']` not being passed in. It would make sense to generalise that interface somewhat - set defaults and then update from the passed-in dict.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/922#issuecomment-370332915:180,energy,energy,180,https://psicode.org,https://github.com/psi4/psi4/pull/922#issuecomment-370332915,1,['energy'],['energy']
Energy Efficiency,"Just implemented some of Lori and Tibor's suggestions. I have also implemented SC-LMP2 for ""weak pairs"" to reduce the cost of the LCCSD computation, per the Sparse Maps II paper.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2915#issuecomment-1493167993:107,reduce,reduce,107,https://psicode.org,https://github.com/psi4/psi4/pull/2915#issuecomment-1493167993,1,['reduce'],['reduce']
Energy Efficiency,"Just observed a separate issue, commenting here to raise awareness before merge at the advice of @loriab. . If the OPTKING bad-step exception occurs in the highest dynamic level (7), e.g.,; ```; Current energy : -154.6485078443. Energy change for the previous step:; Projected : -0.0449999979; Actual : 0.0000000000; The BAD_STEP_EXCEPTion handler:; Energy has increased in a minimization. Dynamic level is 7.; Consecutive backsteps is 1.; The INTCO_EXCEPTion handler:; Too many bad steps.; Dynamic level is 7.; exc.g_really_quit() is 0. **** Optimization has failed! (in 9 steps) ****; --------------------------; OPTKING Finished Execution; --------------------------; ```; the error isn't translated to a Py-side exception, and the program prints the ""Buy a developer a beer!"" successful exit message even though the optimization has, in fact, failed. This should raise some error, akin to the new `ConvergenceError` exception, so that the output does not fly under the radar as successful. **UPDATE**: Migrated this comment to #800 to expedite the merging of this PR.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/798#issuecomment-330583293:203,energy,energy,203,https://psicode.org,https://github.com/psi4/psi4/pull/798#issuecomment-330583293,3,"['Energy', 'energy']","['Energy', 'energy']"
Energy Efficiency,"Just out of interest, can the power or R used in the Thole damping exponential be changed?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1922#issuecomment-641529045:30,power,power,30,https://psicode.org,https://github.com/psi4/psi4/pull/1922#issuecomment-641529045,1,['power'],['power']
Energy Efficiency,"Just out of interest, does this fix the `energy(cbs, ... , bsse_type=[...])` calls? The ""method/basis"" syntax for CBS works fine, but ""explicit"" returns the total energy. I'm not sure what's the expected behaviour, but I think it should be consistent:. ```; molecule ne2 {; 0 1; Ne 0 0 0; --; 0 1; Ne 0 0 2; }. set {; scf_type df; mp2_type df; cc_type df; e_convergence 7; reference rhf; }. E_method_basis = energy(""MP2/cc-pv[tq]z + D:CCSD(T)/cc-pv[dt]z"", bsse_type=""nocp""); E_cbs = energy(cbs, bsse_type=""nocp"", corl_wfn=""mp2"", corl_basis=""cc-pv[tq]z"",; delta_wfn=""ccsd(t)"", delta_basis=""cc-pv[dt]z""). compare_values(E_method_basis, E_cbs, 6, ""Interaction energy"") #TEST ; ```; returns:; ```; TestComparisonError: 	Interaction energy: computed value (445.7515388) does not match (0.0131014) to 6 digits.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/975#issuecomment-383597174:41,energy,energy,41,https://psicode.org,https://github.com/psi4/psi4/pull/975#issuecomment-383597174,6,['energy'],['energy']
Energy Efficiency,Just reporting that updating to the latest 1.9.1 package shows all green for me :-),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3144#issuecomment-2014049833:67,green,green,67,https://psicode.org,https://github.com/psi4/psi4/issues/3144#issuecomment-2014049833,1,['green'],['green']
Energy Efficiency,"Just to add to everyone else's guidance. Yes you can use cartesian coordinates. Just note that to update the geometry,without using a zmatrix, you'll want to use the `ranged_dihedral` keyword instead of `frozen_dihedral`. You can still freeze dihedrals with cartesian geometries, they just can't be set directly in the input file. `ranged_dihedral` sets a target value for the optimizer to optimize towards. . ```import psi4 ; ; hooh = psi4.geometry(""""""; 0 1 ; H 0.856507560196 0.771327307016 0.559729319002 ; O 0.121036132436 0.684379466849 -0.035268035646 ; O -0.121036132436 -0.684379466849 -0.035268035646 ; H -0.856507560196 -0.771327307016 0.559729319002 ; """""") ; ; psi4.set_options({ ; ""basis"": ""cc-pvdz"", ; ""intrafrag_step_limit"": 0.1, ; }) ; ; dihedrals = [100, 110, 120, 130, 140, 150] ; PES = [] ; ; for phi in dihedrals: ; psi4.set_options({""ranged_dihedral"": f""1 2 3 4 {phi - 0.0001} {phi + 0.0001}""}) ; E = psi4.optimize('scf', mol=hooh) ; PES.append((phi, E)) ; ; print(""\n\tcc-pVDZ SCF energy as a function of phi\n"") ; for point in PES: ; print(""\t%5.1f%20.10f"" % (point[0], point[1])) ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2910#issuecomment-1485848821:1002,energy,energy,1002,https://psicode.org,https://github.com/psi4/psi4/issues/2910#issuecomment-1485848821,1,['energy'],['energy']
Energy Efficiency,"Just to clarify, is the long-term plan to use Bohr for external charges irrespective of the molecule units? I'd rather have both specified in the same units to avoid confusion and to make input creation easy.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1881#issuecomment-625550371:64,charge,charges,64,https://psicode.org,https://github.com/psi4/psi4/issues/1881#issuecomment-625550371,1,['charge'],['charges']
Energy Efficiency,"Just to document this here as well, there's no convergence issue with any of the guesses with the default SCF options: SAD converges in 1+16 iterations, Huckel in 18. However, SAD lands on a saddle point, Huckel does not. The problem is the SCF after the stability analysis in SAD: the DIIS error starts out small at 8e-4, dips down, but soon comes back up and plateaus at 6e-4 all the while the energy converges. My first bet would be that something screws up orbital orthonormality in the stability code for UHF.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1747#issuecomment-548850482:396,energy,energy,396,https://psicode.org,https://github.com/psi4/psi4/issues/1747#issuecomment-548850482,1,['energy'],['energy']
Energy Efficiency,"Just to make sure I understand the issues here:; The first one is clear. A segfault occurs if `num_frozen_docc` is ""too large."" What exactly ""too large"" means is unclear, but more frozen docc pairs than electron pairs is sufficient.; The second one is less clear. Obviously, the QC variables controlling the HF energy are getting grabbed incorrectly, but are these two geometries supposed to be different?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2631#issuecomment-1209829933:311,energy,energy,311,https://psicode.org,https://github.com/psi4/psi4/issues/2631#issuecomment-1209829933,1,['energy'],['energy']
Energy Efficiency,"Just to prevent things falling in between the cracks, @loriab and I have discussed this issue on Slack a while ago, and the consensus was that while adding FC spec to `Molecule` might be attractive because it's easier to do, it really ought to belong to the `Wavefunction` object. . To paraphrase @loriab's comments, as the `Wavefunction` owns a `Basisset` which owns a `Molecule` anyway, it is the most logical place to plug this logic in. It should process options like `frozen_docc Int` or `freeze_core True` (or any possible `freeze_core N` spec where `N` is the N-th previous noble gas, or potential per-fragment `frozen_docc`). For the latter case (`freeze_core True`), it should take into account the fragment charge, or any electrons already frozen by ECP's, so that atoms such as Ca2+ with FC have some valence electrons.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1350#issuecomment-445241427:717,charge,charge,717,https://psicode.org,https://github.com/psi4/psi4/pull/1350#issuecomment-445241427,1,['charge'],['charge']
Energy Efficiency,"Just tried a water with direct scf in ERD, and it worked fine, including 2e- energy. This was a while ago in terms of how ERD integrates. And when ERD is expected to work (essentially scf_type=direct only) is now documented. So closing. Please reopen if reappears.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/173#issuecomment-272780463:77,energy,energy,77,https://psicode.org,https://github.com/psi4/psi4/issues/173#issuecomment-272780463,1,['energy'],['energy']
Energy Efficiency,"Justin, can you send me the input where you disabled DKH? An SCF read of converged orbitals from the same molecule should never provide such a bad guess that you get an energy error on the order of Hartrees. Even if it's a naughty molecule like FeH. This points to an error in the way that PSI4 is reading orbitals for the set scf guess read procedure.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/899#issuecomment-360834609:169,energy,energy,169,https://psicode.org,https://github.com/psi4/psi4/issues/899#issuecomment-360834609,1,['energy'],['energy']
Energy Efficiency,"Kicking out Boost and libint has substantially reduced our compile time. However, we're still running up against Travis-CI's 50 min max (~10 min of that are in tests). So, here's the facts. Any suggestions for reducing compile time welcome. There are thoughts in the air of moving `bin`s to external projects, where they can be tested separately, but less drastic suggestions preferred. ```; psi4 5216.132 100%; ---------------------------------; dfocc 490.372 9.4%; ccdensity 489.191 9.4%; mints 327.399 6.3%; dpd 321.392 6.2%; psimrcc 297.722 5.7%; core 285.259 5.5%; ccenergy 242.782 4.7%; occ 227.323 4.4%; cclambda 167.325 3.2%; dcft 156.295 3.0%; cceom 156.036 3.0%; ccresponse 137.6 2.6%; fock 136.653 2.6%; sapt_solver 125.653 2.4%; detci 123.652 2.4%; optking 118.63 2.3%; ccsort 118.255 2.3%; cchbar 107.15 2.1%; mcscf 106.969 2.1%; cctriple 91.443 1.8%; iwl 90.624 1.7%; fnocc 77.272 1.5%; qt 69.421 1.3%; functional 65.807 1.3%; psio 59.924 1.1%; scf_solver 57.751 1.1%; trans 51.991 1.0%; cctransort 49.189 0.9%; ciomr 47.597 0.9%; 3index 45.95 0.9%; fisapt 39.127 0.8%; adc 37.382 0.7%; transqt2 34.06 0.7%; thce 33.156 0.6%; findif 31.708 0.6%; scfgrad 30.889 0.6%; moinfo 26.539 0.5%; parallel 23.011 0.4%; dfmp2 19.045 0.4%; options 12.27 0.2%; psi4util 11.808 0.2%; plugin 10.044 0.2%; cubeprop 9.776 0.2%; efp_solver 9.012 0.2%; diis 7.406 0.1%; dmrg 7.377 0.1%; mrcc 6.772 0.1%; gdma_interface 4.447 0.1%; disp 4.221 0.1%; sapt 4.092 0.1%; cholesky 3.863 0.1%; thermo 3.677 0.1%; efp_interface 3.21 0.1%; filesystem 0.613 0.0%. ```. Note to future (http://stackoverflow.com/questions/5962285/cmake-compilation-statistics):. ```; >>> cat time-icpc; #!/bin/bash; { time /path/to/icpc ""$@""; } 2> >(cat <(echo ""/path/to/icpc $@"") - >> /path/to/timeresults.txt); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/525:47,reduce,reduced,47,https://psicode.org,https://github.com/psi4/psi4/issues/525,1,['reduce'],['reduced']
Energy Efficiency,"Last request for the night: Can you take scf5 and run it a bunch of times in a row (maybe 20 times)? On my Ivy Bridge machine, it will sometimes pass, sometimes fail.... ```; Singlet PK UHF energy: computed value (-149.6484410) does not match (-149.5905972) to 6 decimal places; ```. Is this what you're seeing? Or is this an unrelated problem?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/321#issuecomment-198631685:190,energy,energy,190,https://psicode.org,https://github.com/psi4/psi4/issues/321#issuecomment-198631685,1,['energy'],['energy']
Energy Efficiency,"Let me make sure I have this right: you're plotting energy errors on the order of 1e-7, but you only converged the energy to 1e-6? If so, then your plots are pure noise. If not, then what am I getting wrong?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2155#issuecomment-821212583:52,energy,energy,52,https://psicode.org,https://github.com/psi4/psi4/pull/2155#issuecomment-821212583,2,['energy'],['energy']
Energy Efficiency,"Let's start with the basics: Should it be possible to let a user do an SCF computation and then a G2 computation? I would think yes, but I can't see how that would be possible with your proposal. The obvious input is. ```; molecule {; h; h 1 1.0; }. set basis sto-3g; energy('scf'); energy('gaussian-2'); ```. If you don't set basis, SCF crashed. If you do, then under your proposal, the gaussian-2 would.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1530#issuecomment-483017069:268,energy,energy,268,https://psicode.org,https://github.com/psi4/psi4/issues/1530#issuecomment-483017069,2,['energy'],['energy']
Energy Efficiency,"Li -0.7149951920 -1.4193774032 -0.1334886497; Li -3.3605940408 2.8558659134 -1.8910238414; }. set basis aug-pcseg-0; set reference rhf; set ci_maxiter 100; set scf_type pk; set nat_orbs true. scf_e, scf_wfn = energy('scf', return_wfn = True); ci_e, ci_wfn = energy('cisd', ref_wfn = scf_wfn, return_wfn = True); --------------------------------------------------------------------------. *** tstart() called on dx7-lehtola.chem.helsinki.fi; *** at Wed Oct 25 21:00:37 2017. => Loading Basis Set <=. Name: AUG-PCSEG-0; Role: ORBITAL; Keyword: BASIS; atoms 1 entry SC line 478 file /usr/share/psi4/basis/aug-pcseg-0.gbs ; atoms 2-5 entry LI line 30 file /usr/share/psi4/basis/aug-pcseg-0.gbs . ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, and Andy Simmonett; RHF Reference; 1 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c1; Full point group: C1. Geometry (in Angstrom), charge = -1, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; SC 0.000001136523 -0.000001388204 -0.000001405076 44.955911909000; LI -2.044618384077 -0.224733439504 2.531043817924 7.016004548000; LI 2.527134792823 1.896398821596 0.808962637124 7.016004548000; LI 1.081537578823 -2.973449901804 -0.791231130076 7.016004548000; LI -1.564061269977 1.301793414796 -2.548766321776 7.016004548000. Running in c1 symmetry. Rotational constants: A = 0.08471 B = 0.08471 C = 0.08471 [cm^-1]; Rotational constants: A = 2539.41412 B = 2539.41051 C = 2539.40513 [MHz]; Nuclear repulsion = 46.252677099401765. Charge = -1; Multiplicity = 1; Electrons = 34; Nalpha = 17; Nbeta = 17. ==> Algorithm <==. SCF Algorithm Type is PK.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is SAD.; Energy threshold = 1.00e-06; Density threshold = 1.00e-06; Integral threshold = 0.00e+00. ==> Primary Basis <==. Basis Set: AUG-PC",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/828#issuecomment-339418202:2264,charge,charge,2264,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339418202,1,['charge'],['charge']
Energy Efficiency,"Look at iteration 1: we're seeing a change in the iteration energy of over a mH due to this integral screening. This strongly suggests a bona fide bug. If you have additional systems that fail, this seems like a bug that is going to afflict a _lot_ of our users. I highly suggest we fast-track this for investigation but I would rather avoid being the one to debug this directly. (I'm trying to get into paper-writing mode.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2114#issuecomment-779483755:60,energy,energy,60,https://psicode.org,https://github.com/psi4/psi4/issues/2114#issuecomment-779483755,1,['energy'],['energy']
Energy Efficiency,"Looking at the output while SOSCF is active, it seems like the SO step is taken even if the microiterations do not converge. Assuming that is true, perhaps it would be a good idea to add some damping if we are taking an unconverged SO step.; Maybe increase the damping if the previous SO step increased the energy.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2212#issuecomment-1189482561:307,energy,energy,307,https://psicode.org,https://github.com/psi4/psi4/issues/2212#issuecomment-1189482561,1,['energy'],['energy']
Energy Efficiency,"Looking at your GitHub account, I suspect that you have a background in machine learning rather than quantum chemistry, so I'll try to keep this simple. DFT methods (like WB97X-D) rely on an expensive numerical integration procedure, and different codes use different integration grids with different schemes to remove points to reduce computational time. Chemists are usually interested in _differences_ of energies and will prune points if doing so means energy _differences_ are unchanged, even if individual energies changes. Fair comparisons of DFT energies across different programs, like Psi4 and ORCA, are thus very difficult and can only be reliably accomplished by an expert. Your data for 1.3.2 vs 1.4 does not convince me that anything is wrong. Maybe you're just observing noise because you haven't converged the equations fully tightly. Report the largest differences between the 1.4.1 energy and the 1.4 energies. Since you have the full dataset, that should be a simple Python script to write. If we're seeing differences much above the convergence thresholds, then we should look deeper into this. There was a [bugfix](https://github.com/psi4/psi4/pull/2283) between 1.4 and 1.4.1 that specifically affected computations with density-fitted integrals (which you use by default), an omega functional, and a linearly dependent auxiliary basis set like you would see in large systems. @andysim would know more, but the 1.4.1 numbers should be more reliable than the 1.3.2 or 1.4 numbers.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2351#issuecomment-966269475:329,reduce,reduce,329,https://psicode.org,https://github.com/psi4/psi4/issues/2351#issuecomment-966269475,3,"['energy', 'reduce']","['energy', 'reduce']"
Energy Efficiency,"Looks good! Defaulting to semicanonical MO's is probably a good idea. Can you think of a reason that we wouldnt want to do this?. We may want to add some sort of test to this just to ensure that we are not actually changing the energy. One idea would to be in a test to do:. ```; # Solve and leave the Wavefunction active; set MCSCF_CI_CLEANUP False; set MCSCF_DPD_CLEANUP False; cas_e, cas_wfn = energy(""CASSCF"", return_wfn=True). # Update energy; cas_wfn.transform_mcscf_integrals(approx_integrals_only); nci_iter = cas_wfn.diag_h(1.e-10, 1.e-10); current_energy = core.get_variable(""MCSCF TOTAL ENERGY""). # Compare the energy; compare_values(cas_e, cas_wfn, 8, ""Rotated Orbital Energy Invariance""); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/722#issuecomment-304474246:228,energy,energy,228,https://psicode.org,https://github.com/psi4/psi4/pull/722#issuecomment-304474246,6,"['ENERGY', 'Energy', 'energy']","['ENERGY', 'Energy', 'energy']"
Energy Efficiency,"Looks like everything is on track to finish with a single exception: `EXTERN`. This keyword is used to supply QM/MM charges through the `ExternalPotential` object to a variety of internal programs. Currently the `EXTERN` keyword is a PythonObject which is then cast to a `ExternalPotential` object in the C++ layer. When pushing pybind11 out of the layers I had deleted the ability to add Python objects to the options object (apparently I grepped in too deep of a folder). I think the following are solutions:. - Add the PythonObjects back to the `options` object. This will unwind most of the work in this PR as pybind11 will go back into basically every Psi file and add ~10 minutes to the compile.; - Add a new class to the options object that takes `void*`'s and then cast as is currently done. This is about as safe as currently done as there is currently no typechecking on the PyObject cast.; - Bind Python objects to the Options object Python-side and then insert these objects into the class members in the driver layer. I object a bit to the first as I really think we need to keep pybind11 out of Psi except in the `export` layer. The second and third are about the same to me. Although in the last one we gain all the C++ type checking at the cost of a few more lines in the driver. . One more thing to think about: I pulled out the `__getitem__` functionality for the Matrix and Vector objects. We can add this back fairly trivially, but should we add it back through the `get` and `set` attributes or through the NumPy interface? Going through the NumPy interface will allow all of the slicing routines to work; however, this gets a little awkward for irreped objects. Hence, the `np` and `nph` accessors.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/736#issuecomment-307629750:116,charge,charges,116,https://psicode.org,https://github.com/psi4/psi4/pull/736#issuecomment-307629750,1,['charge'],['charges']
Energy Efficiency,"Looks like psi4 is not following instabilities with ROHF. The issue is present in the current master. Debug case:; ```; molecule mol {; 0 1; H 0.530330 0.000000 0.0; H 0.000000 0.530330 0.0; H -0.530330 0.000000 0.0; H -0.000000 -0.530330 0.0; }. memory 31500 mb. set basis aug-pcseg-1; set reference rohf; set guess core; set scf_type pk; set stability_analysis follow; scf_e, scf_wfn = energy('scf', return_wfn = True); ```. This converges as; ```; @ROHF iter 1: -1.35786249373809 -1.35786e+00 3.29066e-02 ; @ROHF iter 2: -1.76576328233758 -4.07901e-01 2.42353e-03 DIIS; @ROHF iter 3: -1.76782078804299 -2.05751e-03 6.21952e-04 DIIS; @ROHF iter 4: -1.76802124530854 -2.00457e-04 4.60781e-05 DIIS; @ROHF iter 5: -1.76802266421582 -1.41891e-06 3.48831e-06 DIIS; @ROHF iter 6: -1.76802267513349 -1.09177e-08 6.89002e-07 DIIS; SO Integrals not on disk, computing...done.; Presorting SO-basis two-electron integrals.; Sorting File: SO Ints (nn|nn) nbuckets = 1; Transforming the one-electron integrals and constructing Fock matrices; Starting first half-transformation.; Sorting half-transformed integrals.; First half integral transformation complete.; Starting second half-transformation.; Two-electron integral transformation complete.; Starting first half-transformation.; Sorting half-transformed integrals.; First half integral transformation complete.; Starting second half-transformation.; Two-electron integral transformation complete.; Lowest ROHF->ROHF stability eigenvalues:-; B1g -0.022531 B2u 0.142418 B3g 0.159990 B1g 0.196160 ; ```; The lowest eigenvalue is significantly negative, and the solution is indeed a saddle point. However, the program does **not** proceed by a SCF restart from displaced orbitals.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/816:388,energy,energy,388,https://psicode.org,https://github.com/psi4/psi4/issues/816,1,['energy'],['energy']
Energy Efficiency,"Looks like there are a few test cases where SAD may converge onto a different solution than the previously used guess. Namely, on my computer the tests that fail on CI run just fine, and the SAD guess gives the same solution, only with a slightly lower energy in a fewer number of iterations. ROHF is tricky due to the existence of many local minima.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1429#issuecomment-447636721:253,energy,energy,253,https://psicode.org,https://github.com/psi4/psi4/pull/1429#issuecomment-447636721,1,['energy'],['energy']
Energy Efficiency,"Looks like there are some unrelated test failures, but this one is ready to go. As shown by the changes in the pytest guess energies, the new code reaches a considerably lower SAD guess energy for the HF molecule: -100.02909951427 vs -99.63941801281894. Large improvements are expected especially for systems containing hydrogen atoms, since the existing code only includes 0.5 electrons on those atoms.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3138#issuecomment-2149267707:186,energy,energy,186,https://psicode.org,https://github.com/psi4/psi4/pull/3138#issuecomment-2149267707,1,['energy'],['energy']
Energy Efficiency,Looks like this isnt handling custom basis sets correctly and a few other python pieces like inline for-based lists and dicts. Failing tests are:. ```; The following tests FAILED:; 	 60 - cc49 (Failed); 	 93 - cubeprop (Failed); 	120 - dfmp2-1 (Failed); 	187 - mints2 (Failed); 	206 - mp2-property (Failed); 	235 - opt1 (Failed); 	256 - psimrcc-ccsd_t-1 (Failed); 	257 - psimrcc-ccsd_t-2 (Failed); 	258 - psimrcc-ccsd_t-3 (Failed); 	262 - psimrcc-pt2 (Failed); 	263 - psimrcc-sp1 (Failed); 	268 - pywrap-alias (Failed); 	310 - stability1 (Failed); 	322 - options1 (Failed); 	335 - dftd3-energy (Failed); 	339 - gdma-gdma1 (Failed); ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/658#issuecomment-289183019:587,energy,energy,587,https://psicode.org,https://github.com/psi4/psi4/pull/658#issuecomment-289183019,1,['energy'],['energy']
Energy Efficiency,Loosen `json-schema-1-energy` Sensitivity to SCF Procedure,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2323:22,energy,energy,22,https://psicode.org,https://github.com/psi4/psi4/pull/2323,1,['energy'],['energy']
Energy Efficiency,"Lori and I had a discussion about this a while back. I _think_ my; conclusion was to remove ROHF MP4 as a listed capability. _Technically_; DETCI can run it, but it will fail for any but the very tiniest of systems,; and in my opinion this will cause more user grief than it would to say we; can't do it. I think the correct solution is to get rid of MP4 in the; Psi4Education module... which one was it?. David. On Fri, Feb 26, 2016 at 8:41 AM, Justin Turney notifications@github.com; wrote:. > One of our students has been working through the Psi4Education site and; > one of the labs requires the user to run MP4 on boron.; > ; > If I'm reading the managed method matrix; > http://psicode.org/psi4manual/master/proc_py.html#table-managedmethods; > correctly then the user should specify an ROHF reference and Psi4 will use; > DETCI. However on we receive the following error:; > ; > Input file: h2o_mp4.txt; > https://github.com/psi4/psi4/files/148253/h2o_mp4.txt; > ; > An error has occurred Py-side; > Traceback:; > <class 'p4xcpt.ManagedMethodError'>: select_mp4: Method 'mp4' with MP_TYPE 'CONV' and REFERENCE 'ROHF' not available: File ""<string>"", line 27, in <module>; > ; > File ""/Users/jturney/Code/Chemistry/psi4/source/share/python/driver.py"", line 586, in energy; > wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); > ; > File ""/Users/jturney/Code/Chemistry/psi4/source/share/python/proc.py"", line 831, in select_mp4; > raise ManagedMethodError(['select_mp4', name, 'MP_TYPE', mtd_type, reference, module]); > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/282.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/282#issuecomment-189282404:1270,energy,energy,1270,https://psicode.org,https://github.com/psi4/psi4/issues/282#issuecomment-189282404,2,['energy'],['energy']
Energy Efficiency,"Lori, This is a problem that I have long wished to solve. Perhaps we can do it together. I've scribbled down some notes on the attached pdf. The primary problem is that the transformation to the cartesian hessian is not a linear one at non-stationary points. However, given the constraint that the energy is independent of rotations and translations, we don't have to do the extra displacements. The bad news is that it is not trivial. We need the 'derivative B matrix' or the second derivative of the external coordinates wrt cartesian displacements. Perhaps these are 0 for the COM coordinates, and your scheme will therefore work out of the box. But they are not for rotations. However, if we can find them or figure them out, then we can construct the Cartesian Hessian from a minimal number of displacements. Solving a 6x6 for each element is a good tradeoff I would say. The only real pain I forsee might be accommodating the linear molecules. In those cases one might be able to revert to not projecting the rotations at all as you planned. My notation is an inconsistent compromise between what I'm used to and the notation in WDA, JCP, 98, 1993. [cartesian hessians.pdf](https://github.com/psi4/psi4/files/1644627/cartesian.hessians.pdf)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/884#issuecomment-358800415:298,energy,energy,298,https://psicode.org,https://github.com/psi4/psi4/issues/884#issuecomment-358800415,1,['energy'],['energy']
Energy Efficiency,"M=) | `83.80% <0.00%> (-10.63%)` | :arrow_down: |; | [psi4/src/psi4/libfock/sap.cc](https://codecov.io/gh/psi4/psi4/pull/1351/diff?src=pr&el=tree#diff-cHNpNC9zcmMvcHNpNC9saWJmb2NrL3NhcC5jYw==) | `80.00% <0.00%> (-9.29%)` | :arrow_down: |; | [psi4/src/psi4/scfgrad/scf\_grad.cc](https://codecov.io/gh/psi4/psi4/pull/1351/diff?src=pr&el=tree#diff-cHNpNC9zcmMvcHNpNC9zY2ZncmFkL3NjZl9ncmFkLmNj) | `95.09% <0.00%> (-1.19%)` | :arrow_down: |; | [psi4/src/psi4/liboptions/liboptions.cc](https://codecov.io/gh/psi4/psi4/pull/1351/diff?src=pr&el=tree#diff-cHNpNC9zcmMvcHNpNC9saWJvcHRpb25zL2xpYm9wdGlvbnMuY2M=) | `56.26% <0.00%> (-0.91%)` | :arrow_down: |; | [psi4/src/psi4/libmints/vector.cc](https://codecov.io/gh/psi4/psi4/pull/1351/diff?src=pr&el=tree#diff-cHNpNC9zcmMvcHNpNC9saWJtaW50cy92ZWN0b3IuY2M=) | `62.27% <0.00%> (-0.60%)` | :arrow_down: |; | [psi4/src/psi4/libfock/points.cc](https://codecov.io/gh/psi4/psi4/pull/1351/diff?src=pr&el=tree#diff-cHNpNC9zcmMvcHNpNC9saWJmb2NrL3BvaW50cy5jYw==) | `72.24% <0.00%> (-0.27%)` | :arrow_down: |; | [psi4/src/core.cc](https://codecov.io/gh/psi4/psi4/pull/1351/diff?src=pr&el=tree#diff-cHNpNC9zcmMvY29yZS5jYw==) | `82.19% <0.00%> (-0.25%)` | :arrow_down: |; | [psi4/driver/driver.py](https://codecov.io/gh/psi4/psi4/pull/1351/diff?src=pr&el=tree#diff-cHNpNC9kcml2ZXIvZHJpdmVyLnB5) | `79.10% <0.00%> (-0.22%)` | :arrow_down: |; | ... and [106 more](https://codecov.io/gh/psi4/psi4/pull/1351/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/psi4/psi4/pull/1351?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/psi4/psi4/pull/1351?src=pr&el=footer). Last update [7d35d14...6e36f6b](https://codecov.io/gh/psi4/psi4/pull/1351?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-505723097:3228,Power,Powered,3228,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-505723097,1,['Power'],['Powered']
Energy Efficiency,MBIS core and valence charges,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3140:22,charge,charges,22,https://psicode.org,https://github.com/psi4/psi4/issues/3140,1,['charge'],['charges']
Energy Efficiency,MBIS valence charges,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3226:13,charge,charges,13,https://psicode.org,https://github.com/psi4/psi4/pull/3226,1,['charge'],['charges']
Energy Efficiency,MP2 Gradient Incorrect with QMMM charges,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/618:33,charge,charges,33,https://psicode.org,https://github.com/psi4/psi4/issues/618,1,['charge'],['charges']
Energy Efficiency,"Mac's Beer & Wine confirms that they will happily reserve gift cards for you at the register, and you developers need to do better if you want that beer. Usually, a QC app 'fails' gracefully on atomic systems.; By 'fail', I mean that it should: **_handle stupid requests gracefully._**. In practice, the app returns ZPE, Ethermal, Hthermal = 0.0,0.0,0.0, and a reasonable total entropy 30 < S <40 cal/mol-K. Granted, Stotal = Strans and may be of little value. The user adds in some Boltzmann kT multiples to internal E,H as needed. Total energies and enthalpies of atoms are needed for calculating molecular enthalpies of formation by the atomization method. I want this because I'm writing composite method modules for Psi4 with the goal of replicating Gaussian and GAMESS results. It may be invidious to point out that Gaussian, GAMESS, and Nwchem are all well-behaved on the atomic cases, but those applications are why I'm here. [rant on egregious software licenses and general dislike of Fortran redacted]. Next up: CCSD(T) and the H2 molecule, MP2 correlation energy of the hydrogen atom. (joke!); Thanks to all.; -drh",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/332#issuecomment-204230882:1067,energy,energy,1067,https://psicode.org,https://github.com/psi4/psi4/issues/332#issuecomment-204230882,1,['energy'],['energy']
Energy Efficiency,Making Mulliken and Lowdin charge output more consistent,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/334:27,charge,charge,27,https://psicode.org,https://github.com/psi4/psi4/pull/334,1,['charge'],['charge']
Energy Efficiency,"Matt,. You accidentally typed. scf(‘energy’). instead of. energy(‘scf’). Normally you’d get a more useful python error related to calling an undefined function but, unfortunately, the scf function does exist in this case so you got a more obscure error message. Andy. > On Apr 19, 2015, at 9:53 PM, Matt Ernst notifications@github.com wrote:; > ; > Normally Psi4 gives me helpful error messages but in this case I have poked around a bit and can't figure out how to fix my input. I'm trying to create input files with all basis data supplied from within the file itself, so old jobs are self-documenting. I am trying to run the input below with the latest binary installed via conda. It crashes with the message; > ; > Traceback (most recent call last):; > File ""<string>"", line 59, in <module>; > Boost.Python.ArgumentError: Python argument types in; > psi4.scf(str); > did not match C++ signature:; > scf(void); > scf(P7_object, P7_object); > Here is the input I am trying to run. I've made some mistake trying to implement what I read in the docs, but I can't figure out what. I retrieved the basis set data in Gaussian 94 format from the EMSL Basis Set Exchange.; > ; > #methane test; > ; > molecule {; > #charge multiplicity; > 0 1; > C0 0.000000 0.000000 0.000000; > H0 1.092199 0.000000 -0.000001; > H0 -0.364063 0.138497 1.020380; > H0 -0.364067 -0.952923 -0.390247; > H0 -0.364068 0.814425 -0.630132; > }; > ; > set globals {; > reference RHF; > maxiter 999; > }; > ; > basis {; > assign C0 C0bas; > assign H0 H0bas; > #C 3-21G; > [ C0bas ]; > cartesian; > ; > ---; > ; > C 0 ; > S 3 1.00; > 172.2560000 0.0617669 ; > 25.9109000 0.3587940 ; > 5.5333500 0.7007130 ; > SP 2 1.00; > 3.6649800 -0.3958970 0.2364600 ; > 0.7705450 1.2158400 0.8606190 ; > SP 1 1.00; > 0.1958570 1.0000000 1.0000000 ; > ; > ---; > ; > #H 3-21G; > [ H0bas ]; > cartesian; > ; > ---; > ; > H 0 ; > S 2 1.00; > 5.4471780 0.1562850 ; > 0.8245470 0.9046910 ; > S 1 1.00; > 0.1831920 1.0000000 ; > ; > ---; > ; > }; > ; > ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/79#issuecomment-94352477:36,energy,energy,36,https://psicode.org,https://github.com/psi4/psi4/issues/79#issuecomment-94352477,2,['energy'],['energy']
Energy Efficiency,"Maybe @dgasmith can clarify exactly how the orbitals are generated in cases; like this for CASSCF. Are they CAS NO's? Perhaps the most important; determinants are printed prior to the natural orbital procedure (in which; case there would be a mismatch between the orbitals and the determinant; printout)? Or, alternatively, I wonder if we enforce any kind of phase; convention in our MOLDEN writer that the CASSCF code is unaware of?. David. On Mon, Sep 25, 2017 at 9:09 AM, Vladimir <notifications@github.com> wrote:. > Hello Francesco.; > I don't quite understand you. The only matrix determine orbital; > coefficients is [MO] section data of the MOLDEN file and different; > determinants have only different occupation numbers of there orbitals.; > I only sort MO orbitals by energy if required before feed it into CASINO.; >; > I will upload MOLDEN outputs for CASSCF and ROHF cases approximately in 2; > hours when I will have access to the server.; >; > But you can also create these files easily from my inputs or you can talk; > about some other matrices.; >; > Best, Vladimir.; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/796#issuecomment-331875695>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AC9QdmmLQf_1IbwlTRBWBbjSYBFKBN2eks5sl6YbgaJpZM4PK23n>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/796#issuecomment-331884804:779,energy,energy,779,https://psicode.org,https://github.com/psi4/psi4/issues/796#issuecomment-331884804,1,['energy'],['energy']
Energy Efficiency,"Memory usage seems to climb upon repeating calculations in the same process. Here's my test script:. ```; import os; import psi4; import psutil. def check_resources():; process = psutil.Process(os.getpid()); return f""Memory used by process: {process.memory_info().rss / (1024 ** 2):.2f} MB"". cyanamide = psi4.geometry(""""""; C 0.000 0.239 0.000; N -0.044 1.395 0.000; N 0.134 -1.155 0.000; H -0.315 -1.556 0.837; H -0.315 -1.556 -0.837; """"""). for n in range(21):; psi4.energy(""r2scan-3c""); psi4.core.clean(). with open(""psi4.log"", ""a"") as f2:; f2.write(f""{n}: {check_resources()}\n""); ```. Here's what I get:. ```; 0: Memory used by process: 498.48 MB; 1: Memory used by process: 463.73 MB; 2: Memory used by process: 538.73 MB; 3: Memory used by process: 610.47 MB; 4: Memory used by process: 726.72 MB; 5: Memory used by process: 788.34 MB; 6: Memory used by process: 848.44 MB; 7: Memory used by process: 904.81 MB; 8: Memory used by process: 912.50 MB; 9: Memory used by process: 912.62 MB; 10: Memory used by process: 1016.02 MB; 11: Memory used by process: 1022.06 MB; 12: Memory used by process: 1037.52 MB; 13: Memory used by process: 1037.52 MB; 14: Memory used by process: 1036.77 MB; 15: Memory used by process: 1039.41 MB; 16: Memory used by process: 1039.16 MB; 17: Memory used by process: 1039.16 MB; 18: Memory used by process: 1039.16 MB; 19: Memory used by process: 1092.38 MB; 20: Memory used by process: 1094.72 MB; ```. After the first call, only about 500 MB of memory have been claimed; after 10 calls, this has crept up to over 1 GB. This could cause issues e.g. in an *ab initio* MD context, or simply in a lengthy optimization...",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3207:467,energy,energy,467,https://psicode.org,https://github.com/psi4/psi4/issues/3207,1,['energy'],['energy']
Energy Efficiency,"Mentioned in PR #975 . The behaviour between the two equivalent CBS modes is inconsistent when passed through nbody driver:. ```; molecule ne2 {; 0 1; Ne 0 0 0; --; 0 1; Ne 0 0 2; }. set {; scf_type df; mp2_type df; cc_type df; e_convergence 7; reference rhf; }. E_method_basis = energy(""MP2/cc-pv[tq]z + D:CCSD(T)/cc-pv[dt]z"", bsse_type=""nocp""); E_cbs = energy(cbs, bsse_type=""nocp"", corl_wfn=""mp2"", corl_basis=""cc-pv[tq]z"",; delta_wfn=""ccsd(t)"", delta_basis=""cc-pv[dt]z""). compare_values(E_method_basis, E_cbs, 6, ""Interaction energy"") #TEST ; ``` . In the first case, `name = ""MP2/[...]""` so the sequence is:; ```; energy() -> _nbody_gufunc() -> [-> _cbs_gufunc() -> cbs()] * n => recurse back; ```; In the second case, `name = cbs` which has `__call__`, so:; ```; energy() -> cbs() -> [-> energy() -> _nbody_gufunc()] * x => recurse back; ```; I am not sure what the best way of solving this is: ; - option 1) is to extend the n-body driver to accept `__call__`-able `name`s, ; - option 2) is to bounce out of cbs() when `bsse_type` is passed in, but this would require generating a string-based representation of the cbs method anyway. I don't mind having a go at this once I know which is the preferred solution!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/977:280,energy,energy,280,https://psicode.org,https://github.com/psi4/psi4/issues/977,6,['energy'],['energy']
Energy Efficiency,"Michał Hapka's (JCP 2012) dev molpro code with SAPT0(UKS), which can be force to run CPUHF, but it would be a comparison with code without density fitting. I had these results laying around, with larger than usual fitting basis set. ```python; import time; import psi4. geometry = """"""; 0 1; O 0.0000 0.00000 3.175060; H 0.0000 0.75750 2.587994; H 0.0000 -0.75750 2.587994; --; 0 2; O 0.0000 0.00000 0.000000; O 0.0000 1.32501 0.000000; H 0.0000 -0.22470 -0.973420. units angstrom; no_reorient; no_com; symmetry c1; """""". BASIS = ""aug-cc-pvdz""; MEMORY = ""20000 MB""; THREADS = 4. psi4.set_memory(MEMORY); psi4.core.set_num_threads(THREADS); psi4.set_options(; {; ""reference"": ""uhf"",; ""scf_type"": ""mem_df"",; ""stability_analysis"": ""follow"",; ""d_convergence"": 1e-10,; ""e_convergence"": 1e-10,; ""guess"": ""sad"",; ""basis"": BASIS,; ""df_basis_sapt"": ""aug-cc-pv5z-ri"",; ""df_basis_scf"": ""aug-cc-pv5z-jkfit"",; }; ). def compute_s2():; time_start = time.time(); dimer = psi4.geometry(geometry); psi4.energy(""sapt0"", molecule=dimer). if __name__ == ""__main__"":; compute_s2(); ```. run on top of `2d342fe`. ```shell; SAPT Results; --------------------------------------------------------------------------------------------------------; Electrostatics -3.76447859 [mEh] -2.36224598 [kcal/mol] -9.88363717 [kJ/mol]; Elst10,r -3.76447859 [mEh] -2.36224598 [kcal/mol] -9.88363717 [kJ/mol]. Exchange 2.19095680 [mEh] 1.37484615 [kcal/mol] 5.75235628 [kJ/mol]; Exch10 2.19095680 [mEh] 1.37484615 [kcal/mol] 5.75235628 [kJ/mol]; Exch10(S^2) 2.18871598 [mEh] 1.37344002 [kcal/mol] 5.74647303 [kJ/mol]. Induction -0.46899705 [mEh] -0.29430009 [kcal/mol] -1.23135159 [kJ/mol]; Ind20,r -0.81555155 [mEh] -0.51176632 [kcal/mol] -2.14123029 [kJ/mol]; Exch-Ind20,r 0.51152243 [mEh] 0.32098517 [kcal/mol] 1.34300196 [kJ/mol]; delta HF,r (2) -0.16496793 [mEh] -0.10351894 [kcal/mol] -0.43312325 [kJ/mol]. Dispersion -1.62383455 [mEh] -1.01897156 [kcal/mol] -4.26337702 [kJ/mol]; Disp20 -1.79467532 [mEh] -1.12617576 [kcal/mol] -4.711",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1948#issuecomment-656278624:1018,energy,energy,1018,https://psicode.org,https://github.com/psi4/psi4/pull/1948#issuecomment-656278624,1,['energy'],['energy']
Energy Efficiency,Migrate energy-based `cc` tests to new standard,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2440:8,energy,energy-based,8,https://psicode.org,https://github.com/psi4/psi4/pull/2440,1,['energy'],['energy-based']
Energy Efficiency,"Minimal example; ```; molecule {; 0 1; Ne; }. my_pbe = {; ""name"": ""my pbe functional"",; ""x_functionals"" : {; ""GGA_X_PBE"" : {}; },; ""c_functionals"" : {; ""GGA_C_PBE"" : {}; }; }. set basis pcseg-1; set basis_guess pcseg-0 # Works	without	this line; energy('scf', dft_functional=my_pbe); ```. The error I get in psi4 1.3.2 is; ```; Traceback (most recent call last):; File ""/usr/bin/psi4"", line 287, in <module>; exec(content); File ""<string>"", line 35, in <module>; File ""/usr/lib64/psi4/driver/driver.py"", line 556, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/usr/lib64/psi4/driver/procrouting/proc.py"", line 2002, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/usr/lib64/psi4/driver/procrouting/proc.py"", line 1272, in scf_helper; p4util.banner(name.upper()). AttributeError: 'dict' object has no attribute 'upper'. Printing out the relevant lines from the Psithon --> Python processed input file:; ""GGA_C_PBE"" : {}; }; }; core.set_global_option(""BASIS"", ""pcseg-1""); core.set_global_option(""BASIS_GUESS"", ""pcseg-0""); --> energy('scf', dft_functional=my_pbe); ```; and the same issue is also present in `master`.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1876:246,energy,energy,246,https://psicode.org,https://github.com/psi4/psi4/issues/1876,4,['energy'],['energy']
Energy Efficiency,"Most (83%) fail. I've been using tu1 and scf5 in particular. Of all the test cases, only mrcc-ccsdt, mrcc-ccsdt_q_, psimrcc-pt2, cc36, cc55, dcft[12348], docs-*, fd-freq-energy, fd-freq-gradient, matrix1, mints[23459], mcscf1, mcscf3, mom, mp2-grad1, omp2-1, omp2-grad1, props1, psithon1, various pywraps, rasci-h2o, rasscf-sp, pubchem1, scf[34], zaptn-nh2 _do_ pass. And that's _with_ the aforementioned commenting.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/321#issuecomment-198629513:170,energy,energy,170,https://psicode.org,https://github.com/psi4/psi4/issues/321#issuecomment-198629513,1,['energy'],['energy']
Energy Efficiency,"Moving the finite-difference code into Python seems like a good idea. I'm sure it could be much cleaner. For geometry optimization purposes, one only ever really needs cartesian Hessian -> internal coordinate Hessian. This capability is in the C++ and also now in the Python optking - including the gradient.derivative B term (with the derivative-B matrix elements computed analytically). I think that the challenge I ran into (long ago) in the referenced commented-out code in generating a cartesian Hessian using a finite-difference derivative B matrix for this term was in the Sayvetz/Eckart conditions. The rotations/translations are projected out (now by cdsalc) for the original, undisplaced geometry - but then will not be exactly so at the displaced geometries. I don't recall if my motivation for using finite-difference derivative-B elements at the time was for reduced computational expense, because the analytic derivative-B elements were not yet coded, or to try to avoid discontinuity problems in the derivative formulas. The f-d option might be a good capability to have; I'm not sure offhand if it is worth doing. On the coordinate transformation of course Wesley Allen is the guru.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/884#issuecomment-352449546:872,reduce,reduced,872,https://psicode.org,https://github.com/psi4/psi4/issues/884#issuecomment-352449546,1,['reduce'],['reduced']
Energy Efficiency,"My best guess (with the latest development version 6833bd5645022b232b82e4ffc84496e5be143506) would be as follows, for a CCSD calculation:. molecule test {; N -0.0074552142 0.0447633077 0.0549133281; H 0.7912317854 0.0113343077 0.0235803281; H -0.3132442140 -0.8795806918 0.2831263280; H -0.3744022140 0.2462893076 -1.0696916713; units angstrom; }; set {; basis cc-pVDZ; freeze_core True; guess sad; }; e, wfn = energy('CCSD', return_wfn=True); molden(wfn, 'ccsd_no.molden', density_a=wfn.Da()). However, the file `ccsd_no.molden` does not give reasonable charges when loaded into Molden:. Mulliken Charges; ================; ; N -0.0793; H -0.4048; H -0.2581; H -0.5537; ; Sum of Mulliken Charges: -1.2959. (There were no such problems with Molden files from plain SCF calculations.). The sum of the occupation numbers in the Molden file is 6.0465. Shouldn't that sum be 10 in this example? Furthermore, with a too-low sum of occupation numbers, I would expect a positive sum of Mulliken charges, so presumably, there is something else going wrong too. I'm not sure if `wfn.Da()` is the right way to get the density matrix? That was just a guess.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/504:411,energy,energy,411,https://psicode.org,https://github.com/psi4/psi4/issues/504,5,"['Charge', 'charge', 'energy']","['Charges', 'charges', 'energy']"
Energy Efficiency,"My collaborators are trying to compute the SCF energy with an external one-electron potential added to the Fock matrix (this potential does NOT result from a set of point charges). We were trying to use the `wfn.push_back_external_potential()` functionality to accomplish this, but the external potential is ignored. I tracked down the issue to [this line in `scf_iterator.py`](https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/scf_proc/scf_iterator.py#L312) which erases the provided external potential, resulting in only potentials from `PCM/DDX/PE`, added immediately afterwards, being allowed. The problem is completely fixed (at least in our case) by commenting out the aforementioned line of code. I will submit a one-liner PR to do this.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3227:47,energy,energy,47,https://psicode.org,https://github.com/psi4/psi4/issues/3227,2,"['charge', 'energy']","['charges', 'energy']"
Energy Efficiency,"My feeling is that gradient('mp2') should probably default to DF in the SCF; and the MP2, so that we have a nice user experience. We know very well by; now that the DF errors are essentially zero, and the DF algorithm is way; faster. We should print some warning to the user to explain what we did, because; admittedly this solution will cause some degree of confusion. For more advanced users, they should be able to specify where they want; conventional integrals for the SCF and/or MP2. And if they pick an; unsupported combination (conventional SCF plus DF MP2 gradients) we should; print an error message explaining that's not available. Are we still defaulting to DF for SCF? (at least when there is no post HF; module that wants the conventional ints)? Probably should until / unless; we get efficient conventional SCF, and arguably even then. David. On Sunday, March 6, 2016, Ugur Bozkaya notifications@github.com wrote:. > Hi Lori,; > ; > Let us start with your first question for the HF molecule. I run your job,; > and it terminates ""normally"". Since it is a gradient job I do not simply; > grab integrals from SCF, but I compute both JKFIT and RI basis DF; > integrals. Hence, it does not matter to start with the conventional; > integrals the df-mp2 code proceeds. However, the gradient is not correct; > because the MO coefficients are from conventional SCF, but it should be; > from DF-SCF. I think in the case df-mp2 gradients, if user set the; > conventional SCF, then we should throw an error. Alternatively we may; > change the reference to DF-SCF and throw a warning for user to explain what; > we did. Both solutions are okay for me.; > ; > DFOCC uses frozen cores properly in energy and gradients. I did not add; > the froze virtuals yet. But I will add them soon for FNO-DF-CCSD gradients.; > However, OCC does not use frozen cores in the energy and gradients. In case; > of OCC the problem is that you need to define different MO class with; > libtrans, which is not obvious ho",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/245#issuecomment-192920861:799,efficient,efficient,799,https://psicode.org,https://github.com/psi4/psi4/issues/245#issuecomment-192920861,1,['efficient'],['efficient']
Energy Efficiency,"My goal is to use `psi4` for a mixed QM/MM simulation (mechanical and electrostatic embedding). I am aware of a previous issue (https://github.com/psi4/psi4/issues/341), however, I have a MD engine at hand and would like to use `psi4` as QM engine only (i.e. energies and gradients on a given molecule with external potential). In that regard, I am wondering what is the best way to use `psi4` to calculate gradients on external point charges from C++. . I am aware of the class `ExternalPotential`, which is demonstrated from the Python side here: https://github.com/psi4/psi4/tree/master/tests/extern1. It looks to me like the following function will return gradients on a given molecule caused by the points charges but not the other way round:. ```C++; /// Compute the gradients due to the external potential; SharedMatrix computePotentialGradients(std::shared_ptr<BasisSet> basis, std::shared_ptr<Matrix> Dt);; ```. However, I could not find any corresponding function that computes gradients on point charges. In case the functionality is not implemented yet, I am happy to volunteer code.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2472:435,charge,charges,435,https://psicode.org,https://github.com/psi4/psi4/issues/2472,3,['charge'],['charges']
Energy Efficiency,"My guess is that the performance would be better with fewer threads, since too much parallellization can hurt performance. The 50 Hartree difference in energy suggests that the compilation on Summit is not good. Did you run the Psi4 test suite?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3223#issuecomment-2367489965:152,energy,energy,152,https://psicode.org,https://github.com/psi4/psi4/issues/3223#issuecomment-2367489965,1,['energy'],['energy']
Energy Efficiency,"My guess is that you are only allowing contributions when both basis functions are on the same center which removes the density where basis functions are on different centers. ```; import numpy as np; np.set_printoptions(suppress=True, precision=4, linewidth=150). mol = psi4.geometry(""""""; O 0.000000000000 0.000000000000 -0.071143036192; H 0.000000000000 -0.758215806856 0.564545805801; H 0.000000000000 0.758215806856 0.564545805801; symmetry c1; """"""). psi4.set_options({""BASIS"": ""cc-pVDZ"",; ""DFT_BLOCK_MAX_POINTS"": 2048,; ""DFT_BASIS_TOLERANCE"": 1.e-14}). method = ""PBE""; e, wfn = psi4.energy(method, return_wfn=True); Da = np.array(wfn.Da()); Ca = np.array(wfn.Ca()). # Grab objects; basis = wfn.basisset(); Vpot = wfn.V_potential(); points_func = Vpot.properties()[0]. center = 2. for center in range(3):; # Loop over the blocks; nelectrons = 0.0; for b in range(Vpot.nblocks()):. # Metadata; block = Vpot.get_block(b); npoints = block.npoints(); lpos = np.array(block.functions_local_to_global()); nlocal_basis = lpos.shape[0]. oncenter = np.array([basis.function_to_center(x) == center for x in lpos]); lpos = lpos[oncenter]. # Obtain the grid weight; w = np.array(block.w()). # Compute phi!; points_func.compute_points(block); phi = np.array(points_func.basis_values()[""PHI""])[:npoints, :nlocal_basis]; phi = phi[:, oncenter]. # Build a local density; localDa = Da[(lpos[:, None], lpos)]. # Copmute rho; rho = 2.0 * np.einsum('pm,mn,pn->p', phi, localDa, phi, optimize=True); nelectrons += np.dot(w, rho); print(center, nelectrons); ```. ```; 0 7.59001168019781; 1 0.5717653447775689; 2 0.5717641193430182; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1311#issuecomment-436430963:588,energy,energy,588,https://psicode.org,https://github.com/psi4/psi4/issues/1311#issuecomment-436430963,1,['energy'],['energy']
Energy Efficiency,"My thoughts on the questions:; > How much validation do we want?. I would think that input would need to be validated always as the source is unknown, and output should be validated as part of the test suite, but then does not need to be validated at run-time before they are returned since (ideally) the test-suite ensures that our output jsons always adhere to the schema. Is there a best practice followed by applications using JSON APIs? For example does the JSON ""consumer"" always hold responsibility for checking that the object received is valid, or is it up to the JSON ""producer"" to ensure that objects are valid before sending them? . >A full test suite should like come from the schema itself?. Not sure what you mean here. Should the schema project provide functionality to validate objects that can be used by applications adhering to the schema to test that their JSON generating functions are generating valid objects? That would be great, and would reduce the amount of work that needs to be done by devs of individual QC packages to adopt the interface. > How we will we handle extra psi vars? Is the current setup sufficient.; If the schema allows for extra/arbitrary fields somewhere, we could provide all psivars/arrays there. If not then I guess we can just add handling of additional psivars in the future as they apply to new revisions of the schema?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/979#issuecomment-384995562:965,reduce,reduce,965,https://psicode.org,https://github.com/psi4/psi4/pull/979#issuecomment-384995562,1,['reduce'],['reduce']
Energy Efficiency,"My understanding is that there are two issues:; 1. All correlated densities are written to ""CC Density"". The reference Lori linked (http://wild.life.nctu.edu.tw/~jsyu/compchem/g09/g09ur/f_formchk.htm) says there are separate density sections for MP2, CI, and CC. Susi said it's adequate for the correlated density to be written to one of the three. Forum posters want the densities sent to the ""proper"" place. I don't know whether the current behavior is adequate for Gaussian or not, but I can easily believe this would confuse some other program that consumes FCHK files. I am not convinced that this is an aesthetic issue and that FCHK is ""undefined"" in this regard. Again, would it be possible to use the `name` attribute of a wavefunction to figure out the right density title?; 2. Sometimes a correlated wavefunction displays as having a ""density"" which is really the SCF density (http://forum.psicode.org/t/density-labels-in-fchk-files/1445/3) and sometimes the correlated density overwrites the reference density (http://forum.psicode.org/t/problems-with-wavefunction-object-and-fchk-interface/532/13). Issue #1478 mentions this but doesn't go into details. In particular, I'm bothered by the fact that forum users report CC density does not override, but Susi reports that CC density does override. The difference is probably that Susi ran a property computation, but the forum user may have just run an energy computation. This part should be moved to #1478, with a caveat that whoever fixes this should check whether it fixes FCHK problems or not.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1272#issuecomment-533691631:1413,energy,energy,1413,https://psicode.org,https://github.com/psi4/psi4/issues/1272#issuecomment-533691631,1,['energy'],['energy']
Energy Efficiency,"NTERACTION ENERGY THROUGH {nb}-BODY"", 1.7),; ""VMFC-CORRECTED {nb}-BODY INTERACTION ENERGY"": (""VMFC-CORRECTED INTERACTION ENERGY THROUGH {nb}-BODY"", 1.7),; ""COUNTERPOISE CORRECTED TOTAL ENERGY"": (""CP-CORRECTED TOTAL ENERGY"", 1.7),; ""COUNTERPOISE CORRECTED INTERACTION ENERGY"": (""CP-CORRECTED INTERACTION ENERGY"", 1.7),; ""NON-COUNTERPOISE CORRECTED TOTAL ENERGY"": (""NOCP-CORRECTED TOTAL ENERGY"", 1.7),; ""NON-COUNTERPOISE CORRECTED INTERACTION ENERGY"": (""NOCP-CORRECTED INTERACTION ENERGY"", 1.7),; ""VALIRON-MAYER FUNCTION COUTERPOISE TOTAL ENERGY"": (""VALIRON-MAYER FUNCTION COUNTERPOISE TOTAL ENERGY"", 1.7), # note misspelling; ""VALIRON-MAYER FUNCTION COUTERPOISE INTERACTION ENERGY"": (""VMFC-CORRECTED INTERACTION ENERGY"", 1.7),; ``` ; - [x] added managed mode for scf gradient. it's not wholly effective at consolidating code, though, since only triggers for `gradient(""hf"")`, not `gradient(correlated)`. digits to compare has to be relaxed, but this has been seen with other qc programs, too.; - [x] Distributed driver should not be advertised for use with QCFractal at this time. It hasn't been tested in a while, and mem, cores, etc. setting may need tweaking in a non-continuous mode. Use it experimentally and report back.; - [x] n-body wrapper can no longer do embedding with internally calculated Mulliken charges. Charges must now be provided with `embedding_charges` kwarg.; - [x] stdsuite: consolidated the caller fn to remove duplicate code. added HF Hessian testing, through DF can't be uncommented until refs released in qcng.; - [x] the addition of ccsd iterations qcvar to dfocc could maybe be reverted. ## Questions; - [x] Any critical eye or independent tests that you can bring to the manybody wrapper much appreciated, @jeffschriber. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2575:7473,charge,charges,7473,https://psicode.org,https://github.com/psi4/psi4/pull/2575,2,"['Charge', 'charge']","['Charges', 'charges']"
Energy Efficiency,"NW-Chem. ```; closed-shell vwn_3 Total DFT energy = -76.407526614389; closde-shell vwn_1_rpa (def.) Total DFT energy = -76.444577160243; open-shell vwn_3 Total DFT energy = -75.940741067166; open-shell vwn_1_rpa (def.) Total DFT energy = -75.974154693676; ```. Psi4. ```; closed-shell VWN3RPA_C -76.4445772372 # matches NW closed VWN_1_RPA; closed-shell VWN5RPA_C -76.4445772372 # """"; closed-shell VWN3_C -76.4075266923 # matches NW closed VWN3; closed-shell VWN5_C -76.4075266923 # """". open-shell VWN3RPA_C -75.9741548527 # matches NW open VWN_1_RPA; open-shell VWN5RPA_C -75.9744079442; open-shell VWN3_C -75.9404785496; open-shell VWN5_C -75.9407528036 # ~matches NW open VWN_3; ```. Conditions. ```; aug-cc-pvdz. #0 1 # closed; 1 2 # open; O -1.551007 -0.114520 0.000000; H -1.934259 0.762503 0.000000; H -0.599677 0.040712 0.000000; ```. Summary; Looks like psi's b3lyp3 should remain with `VWN3RPA_C` and its b3lyp5 should use `VWN5_C` in order to match NW-Chem with both open- and closed-shell.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/339#issuecomment-209252377:43,energy,energy,43,https://psicode.org,https://github.com/psi4/psi4/pull/339#issuecomment-209252377,4,['energy'],['energy']
Energy Efficiency,NaN energy for a reasonable sized DF-SCF computation,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/371:4,energy,energy,4,https://psicode.org,https://github.com/psi4/psi4/issues/371,1,['energy'],['energy']
Energy Efficiency,"Nevermind:; ```; molecule {; 0 1; H 0.43774 1.07383 -0.88985; O -0.04657 -0.75634 0.00000; H 0.86440 -1.05180 0.00000; }. set basis pcseg-1; set reference rhf; set s_tolerance 1e-5; set guess sad; scf_en, scf_wfn = energy('scf', return_wfn=True); fchk(scf_wfn, ""scf.fchk""); ccsd_en, ccsd_wfn = properties('ccsd', properties=['dipole'], return_wfn=True, ref_wfn=scf_wfn); fchk(ccsd_wfn, ""ccsd.fchk""); ```; shows that the density matrix **does** change from SCF to CCSD. Now, I would need a function in the Wavefunction class that would get me the SCF density matrix.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1475#issuecomment-454119809:215,energy,energy,215,https://psicode.org,https://github.com/psi4/psi4/pull/1475#issuecomment-454119809,1,['energy'],['energy']
Energy Efficiency,"Nice @loriab! As we, very briefly, discussed at WWDC: ; 1. I had to rework the way the PCM potential is added to the Fock matrix in `hf.cc` in #810. I ended up adding a `std::vector<SharedMatrix> external_potentials_` to the base HF objects to store the PCM potential computer at each iteration. This data member is then used in `form_F()` in the derived classes. This is in `rohf.cc`, for example:; ```; // ... some more code ... if (!external_potentials_.empty()) {; std::for_each(external_potentials_.begin(), external_potentials_.end(),; [this](SharedMatrix Vext) { Fa_->add(Vext); });; }. // ... some more code ... if (!external_potentials_.empty()) {; std::for_each(external_potentials_.begin(), external_potentials_.end(),; [this](SharedMatrix Vext) { Fb_->add(Vext); });; }; ```; For the PCM (and I'm pretty sure also EFP) potential, this is enough: these do not need to distinguish between alpha and beta.; The caveat of this approach is that `compute_E()` cannot rely on tracing the Fock matrix with the density matrix to calculate the energy anymore, since there might be more (or less) polarization energy included in that way. In the mentioned PR, I modified the `compute_E()` functions to only use traces of one- and two-electron integrals to calculate the energy. I think this approach could be ported Python side and would fit very nicely with the infrastructure changes you are proposing.; 2. Since PCMSolver itself is quite far from being pybind-able, I suggest I pybind the wrapper within Psi4 (`libpsipcm/psipcm.h` and `libpsipcm/psipcm.cc`)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/847#issuecomment-343481294:1046,energy,energy,1046,https://psicode.org,https://github.com/psi4/psi4/pull/847#issuecomment-343481294,3,['energy'],['energy']
Energy Efficiency,"No UHF-MP2 gradients in my code. Sorry. -Rob. On Mon, Jul 13, 2015 at 3:30 PM, Lori A. Burns notifications@github.com; wrote:. > for df-mp2, these are the cases:; > uhf energy: good, this is is Rob's code (we're pretty sure; test); > rohf energy: we think this may be in Rob's code, but not verified vs other; > codes; > uhf grad: we think this may be in Rob's code, but not verified vs other; > codes; > rohf grad: no good. Ugur doesn't support rohf scf being fed into his omp2; > w/o subsequent opt; > ; > ticket task: verify the above with the code and with the authors. if; > needed, re-route in driver (see mp2_type as example in proc.py. If; > anything looks to hard or want to defer, create a new ticket for it, and do; > all you can to close out this one.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/107.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/107#issuecomment-121080590:169,energy,energy,169,https://psicode.org,https://github.com/psi4/psi4/issues/107#issuecomment-121080590,2,['energy'],['energy']
Energy Efficiency,"No reason it needs to be 'roa'. The point is that the code which executes; right now when one selects 'roa' is already doing the IR intensities; correctly. If we otherwise have IR intensities working, then just ignore; this post. I did MP2 because Spartan and Psi could. Presumably with the; new CCSD gradient with fields check-in last weekend, the CCSD intensities; would work too, but I haven't checked that. The input file could certainly; be simplified, including trying to eliminate some of the restrictions and; seeing if there is any impact on the IR intensities. I thought it might be; helpful if someone else would like to start from that point. On Mon, Nov 27, 2017 at 9:22 AM, Lori A. Burns <notifications@github.com>; wrote:. > @psi-rking <https://github.com/psi-rking>, great, thanks for the; > prototype. Maybe put your post at #402; > <https://github.com/psi4/psi4/issues/402> and mention it in the newdev; > slack channel. Also,; >; > - is there anything particular to MP2 or is that just what you tested; > against?; > - general fyi is that there's multi-QC-package vib outputs in the; > isotope-1 test cases that also may have some intensities; > - how rigorous is that c1/no_com/no_reorient req. in your input file.; > Absolutely required to get the right charge origin? Or could we run with; > symmetry if we knew how to transform the Hessian or perturbation vectors; > into better frame? Is it different for charged species?; > - why ""roa""? Just because it brings dipole derivatives for free?; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/347#issuecomment-347215160>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/ADguTMMsKLuYghtYIPsfAYOmbk9WBCBXks5s6tPSgaJpZM4II2n7>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/347#issuecomment-347240852:1275,charge,charge,1275,https://psicode.org,https://github.com/psi4/psi4/issues/347#issuecomment-347240852,2,['charge'],"['charge', 'charged']"
Energy Efficiency,"No rush. I've put off doing this for at least 10 years :), and I'm; swamped. I think I've convinced myself your scheme will work after all; (since the derivative B matrix for a COM displacement coordinate is zero).; However, one doesn't need 3N-3 gradients, because there are 3 rotational; degrees for which the energy is invariant. How many programs like C4; exploit this I couldn't say. Ultimately, might be nice to have it either; way. 3 more gradients, or else N_atoms^2 * small matrix operation. --; Dr. Rollin A. King; Professor and Chair of Chemistry; Bethel University; rking@bethel.edu. On Thu, Jan 18, 2018 at 5:08 PM, Lori A. Burns <notifications@github.com>; wrote:. > I'd like to, @psi-rking <https://github.com/psi-rking>, but I really; > don't dare take up anything else until after ACS. Actually seeking the; > minimal stuff to do before sending pyvib2 to general review.; >; > Thanks for the notes. It's a very user-knowledge view, but I'm not; > understanding your ""don't have to do the extra displacements, vs. the; > FD_PROJECT keyword from Cfour; > <http://slater.chemie.uni-mainz.de/cfour/index.php?n=Main.ListOfKeywordsInAlphabeticalOrder>.; > Different strategies?; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/884#issuecomment-358812718>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/ADguTFqGHSAeT4cqjgXz_oF86JmR_ccMks5tL87bgaJpZM4REtHr>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/884#issuecomment-358814330:312,energy,energy,312,https://psicode.org,https://github.com/psi4/psi4/issues/884#issuecomment-358814330,1,['energy'],['energy']
Energy Efficiency,No worries. I quoted the manual above. The external charge unit coordinates should change according to the coordinates in the input yes. . The output seems inconsistent to the manual statement.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1881#issuecomment-625236495:52,charge,charge,52,https://psicode.org,https://github.com/psi4/psi4/issues/1881#issuecomment-625236495,1,['charge'],['charge']
Energy Efficiency,"No, the same compound:. ```; molecule LiF {; 0 1; Li; F 1 1.5; }. set {; basis cc-pv5z; df_scf_guess false; freeze_core false; }; set_memory(32000000000). energy('ccsd(t)'); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1557#issuecomment-467161493:155,energy,energy,155,https://psicode.org,https://github.com/psi4/psi4/issues/1557#issuecomment-467161493,1,['energy'],['energy']
Energy Efficiency,"Normal CCSD and CCSD(T) calculations work fine with big basis sets up to aug-cc-pV5Z but SAPT crashes for me with:. QcdbException BasisSetNotFound: BasisSet::construct: Unable to find a basis set for atom 1 for key BASIS among:; Shell Entries: ['LI']; Basis Sets: [('AUG-CC-PV5Z', 'AUG-CC-PV5Z', None)]. Input:. ```; molecule LiF {; 1 1; Li 0.000000000 0.000000000 0.000000000; --; -1 1; F 0.500000000 0.000000000 0.000000000. units angstrom; no_reorient; }. set globals {; basis aug-cc-pv5z; }. set_memory(32000000000); energy('sapt2+3(ccd)dmp2'); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1557:521,energy,energy,521,https://psicode.org,https://github.com/psi4/psi4/issues/1557,1,['energy'],['energy']
Energy Efficiency,"Normally Psi4 gives me helpful error messages but in this case I have poked around a bit and can't figure out how to fix my input. I'm trying to create input files with all basis data supplied from within the file itself, so old jobs are self-documenting. I am trying to run the input below with the latest binary installed via conda. It crashes with the message. ```; Traceback (most recent call last):; File ""<string>"", line 59, in <module>; Boost.Python.ArgumentError: Python argument types in; psi4.scf(str); did not match C++ signature:; scf(void); scf(P7_object, P7_object); ```. Here is the input I am trying to run. I've made some mistake trying to implement what I read in the docs, but I can't figure out what. I retrieved the basis set data in Gaussian 94 format from the EMSL Basis Set Exchange. ```; #methane test. molecule {; #charge multiplicity; 0 1; C0 0.000000 0.000000 0.000000; H0 1.092199 0.000000 -0.000001; H0 -0.364063 0.138497 1.020380; H0 -0.364067 -0.952923 -0.390247; H0 -0.364068 0.814425 -0.630132; }. set globals {; reference RHF; maxiter 999; }. basis {; assign C0 C0bas; assign H0 H0bas; #C 3-21G; [ C0bas ]; cartesian; ****; C 0 ; S 3 1.00; 172.2560000 0.0617669 ; 25.9109000 0.3587940 ; 5.5333500 0.7007130 ; SP 2 1.00; 3.6649800 -0.3958970 0.2364600 ; 0.7705450 1.2158400 0.8606190 ; SP 1 1.00; 0.1958570 1.0000000 1.0000000 ; ****; #H 3-21G; [ H0bas ]; cartesian; ****; H 0 ; S 2 1.00; 5.4471780 0.1562850 ; 0.8245470 0.9046910 ; S 1 1.00; 0.1831920 1.0000000 ; ****; }. scf('energy'); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/79:841,charge,charge,841,https://psicode.org,https://github.com/psi4/psi4/issues/79,2,"['charge', 'energy']","['charge', 'energy']"
Energy Efficiency,"Not so keen on extra psivars. Just detangling how `DFT TOTAL ENERGY`/`DFT FUNCTIONAL TOTAL ENERGY` or `SAPT EXCH-IND22 ENERGY`/`SAPT EXCH-IND20,R ENERGY` are different is enough without considering aliasing. And then we'd have to consider same for options. And they all have to fit through the [math](https://github.com/psi4/psi4/blob/master/psi4/share/psi4/python/qcdb/psivardefs.py). Not adamant, if everyone likes the idea, but not in favor.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/480#issuecomment-253959628:61,ENERGY,ENERGY,61,https://psicode.org,https://github.com/psi4/psi4/pull/480#issuecomment-253959628,4,['ENERGY'],['ENERGY']
Energy Efficiency,"Not that I can tell. It's key to note that it did not re-use the T2 amplitudes, as those are far more important in the correlation procedure. I'm sorry for the trouble, but restarts are one of the trickiest parts of the code because, if not done correctly, they can make the convergence even slower. ## -TDC. Prof. T. Daniel Crawford; crawdad@vt.edu; 540-231-7760. On Dec 8, 2013, at 11:20 AM, sbart76 notifications@github.com wrote:. > I'm afraid it didn't work for me. After printing ""Using old T1 amplitudes"" psi4 goes into solving the amplitudes again and performs the same 18 steps it did in the first interrupted run:; > ; > ```; > Using old T1 amplitudes.; > Solving CC Amplitude Equations; > ------------------------------; > ```; > ; > Iter Energy RMS T1Diag D1Diag New D1Diag D2Diag; > ; > ---; > ; > ```; > 0 -1.235360138318377 0.000e+00 0.000000 0.000000 0.000000 0.135205; > 1 -1.258496281454846 1.123e-01 0.012365 0.042410 0.042410 0.142648; > 2 -1.293057476483294 4.944e-02 0.013001 0.044484 0.044484 0.157500; > 3 -1.308609725361918 3.006e-02 0.017430 0.062504 0.062504 0.166792; > 4 -1.308744865230533 9.227e-03 0.018476 0.067628 0.067628 0.169514; > 5 -1.309149882270872 4.350e-03 0.019044 0.071228 0.071228 0.170429; > 6 -1.309354583622632 1.527e-03 0.019182 0.072401 0.072401 0.170400; > 7 -1.309289325269788 6.083e-04 0.019195 0.072771 0.072771 0.170246; > 8 -1.309311983140765 2.175e-04 0.019204 0.072902 0.072902 0.170205; > 9 -1.309317616625639 9.166e-05 0.019206 0.072942 0.072942 0.170191; > 10 -1.309311723074096 4.260e-05 0.019204 0.072947 0.072947 0.170180; > 11 -1.309314106752320 2.049e-05 0.019204 0.072952 0.072952 0.170178; > 12 -1.309314722212116 8.774e-06 0.019205 0.072954 0.072954 0.170179; > 13 -1.309315551023014 3.974e-06 0.019205 0.072954 0.072954 0.170180; > 14 -1.309315536441650 1.739e-06 0.019205 0.072955 0.072955 0.170180; > 15 -1.309315490258709 7.682e-07 0.019205 0.072954 0.072954 0.170180; > 16 -1.309315447546901 3.279e-07 0.019205 0.072955 0.07295",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/27#issuecomment-30089575:750,Energy,Energy,750,https://psicode.org,https://github.com/psi4/psi4/issues/27#issuecomment-30089575,1,['Energy'],['Energy']
Energy Efficiency,"Not that I'm aware of. There are three reasons somebody might be tempted to use a manual `compute_gradient` call.; 1. _Method developer reason_. You are a plugin developer and don't know you can edit `proc_table` to tell `gradient` how to run for your new method. Not a good reason because you actually can.; 2. _Method developer reason_. You are writing a gradient method and want your gradient function to enter the C-code to do your energy, return to the driver, then re-enter the C-code to do your gradient. This is the best reason I've come up with, and while I'm sympathetic, I just don't think it's worth the danger of exposing this function to completely general Python use. The gradient machinery should only ever be called after your energy computation finishes.; 3. _User reason_. You want to run some additional commands between your energy and your gradient computation. I just can't imagine a use case for this _other than_ bypassing some sanity check. There isn't a case where separating the calls saves times. Even if there were, shoving intermediates onto a `wfn` only works for SCF (not sure about general DFT functionals). Even MP2 gradient theory needs intermediates too large to store on the `wfn`. The best I've come up with is that you're doing SCF, serialize the wavefunction for later analysis, and then decide you want a gradient after that later analysis. But even in that case, the serialized wavefunction has the converged orbitals, so just use `gradient`. I would expect minor computational overhead for the energy step. (I suppose there is the cost of re-building the TEI?). Since this would affect Forte and heads off a possible bug in relativistic computations, it's probably worth asking @fevangelista for input on this.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2223#issuecomment-870536209:436,energy,energy,436,https://psicode.org,https://github.com/psi4/psi4/issues/2223#issuecomment-870536209,4,['energy'],['energy']
Energy Efficiency,"Note that I just tacked on `Wfn.energy_` / `Wfn.variables_[""CURRENT ENERGY""]` syncing as discussed. https://github.com/psi4/psi4/pull/1575/commits/89f6490ef54e419fb181ee19af361550591f1ad4 if you want to re-evaluate.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1575#issuecomment-472564147:68,ENERGY,ENERGY,68,https://psicode.org,https://github.com/psi4/psi4/pull/1575#issuecomment-472564147,1,['ENERGY'],['ENERGY']
Energy Efficiency,"Note this is only a psivars issue -- printed energies are fine. singles contributions to UHF & ROHF CCSD (https://github.com/psi4/psi4/blob/master/psi4/src/psi4/cc/ccenergy/energy.cc#L132-L137) and below) aren't getting stored in psivars. in consequence, `CCSD SAME-SPIN CORRELATION ENERGY` and `CCSD OPPOSITE-SPIN CORRELATION ENERGY` don't sum to `CCSD CORRELATION ENERGY`. * [ ] for the CC people out there -- speak up if the CCSD analogs of the following definitions offend. they're [what qcschema is using](https://github.com/MolSSI/QCSchema/blob/a4329e626903ec0391d21179f0754bdc65e6831b/qcschema/dev/properties/cc_properties.py#L7-L38); ```; qcvardefs['MP2 SAME-SPIN CORRELATION ENERGY'] = {; 'units': 'Eh',; 'glossary': r""""""; The unscaled portion of the MP2 correlation energy; from same-spin or triplet doubles correlations. canonical_corl(os_scale=1, ss_scale=1) = singles + os_scale * (tot_corl - ss_corl) + ss_scale * ss_corl; :math:`E_{\text{SS}}` in Eq. :eq:`MP2corl`.; """"""}. qcvardefs['MP2 OPPOSITE-SPIN CORRELATION ENERGY'] = {; 'units': 'Eh',; 'glossary': r""""""; The unscaled portion of the MP2 correlation energy; from opposite-spin or singlet doubles correlations.; :math:`E_{\text{OS}}` in Eq. :eq:`MP2corl`.; """"""}. qcvardefs['MP2 SINGLES ENERGY'] = {; 'units': 'Eh',; 'glossary': r""""""; The singles portion of the MP2 correlation energy.; Zero except in ROHF.; :math:`E_{\text{S}}` in Eq. :eq:`MP2corl`.; """"""}. qcvardefs['MP2 DOUBLES ENERGY'] = {; 'units': 'Eh',; 'glossary': r""""""; The doubles portion of the MP2 correlation energy; including same-spin and opposite-spin correlations.; :math:`E_{\text{D}}` in Eq. :eq:`MP2corl`.; """"""}; ```. - [ ] let us implement storing singles for all three refs in cc* modules (only rohf will be nonzero).; - [ ] let us implement storing all three consistently in any other cc codes; - [ ] let us make sure to place these var on wfn, not in `P::e`.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1702:173,energy,energy,173,https://psicode.org,https://github.com/psi4/psi4/issues/1702,12,"['ENERGY', 'energy']","['ENERGY', 'energy']"
Energy Efficiency,"Now I have install a fresh binary version (Psi4 0.4.16) and run the same input and get:. ```; Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)...; =======================================================================; Nuclear Repulsion Energy (a.u.) : 4.91953818754669; CD-HF Energy (a.u.) : -25.94513055914770; REF Energy (a.u.) : -25.94513055914770; Alpha-Alpha Contribution (a.u.) : -0.00171224403804; Alpha-Beta Contribution (a.u.) : -0.05664223456972; Beta-Beta Contribution (a.u.) : -0.00005535856885; Scaled_SS Correlation Energy (a.u.): -0.00058920086896; Scaled_OS Correlation Energy (a.u.): -0.06797068148366; CD-SCS-MP2 Total Energy (a.u.) : -26.01369044150033; CD-SOS-MP2 Total Energy (a.u.) : -26.01876546408834; CD-SCSN-MP2 Total Energy (a.u.) : -25.94824153973583; CD-MP2 Correlation Energy (a.u.) : -0.02151506744300; CD-MP2 Total Energy (a.u.) : -25.96664562659070; =======================================================================; ```. I also tried with another older version (Psi4 0.3.137) I still get the correct result. Hence, the new version yields wrong result while older versions give the correct result. Therefore, it should be related to the recent changes were made. I do not know how to fix it. ; @loriab @CDSherrill @andysim @jturney",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/244#issuecomment-183535595:111,energy,energy,111,https://psicode.org,https://github.com/psi4/psi4/issues/244#issuecomment-183535595,11,"['Energy', 'energy']","['Energy', 'energy']"
Energy Efficiency,"Now that I can run some VTune tests myself, there is definitely an efficiency hit from this PR. The explicit copy in the last commit contributes a _lot_ of overhead. If we want to flatten the tuples, this should be done in the index itself, not in the `IndexIterator`. With that commit reverted, we're looking at 62.4 seconds (pre-PR) vs 75.5 seconds (post-PR) for an Mk-MRCCSD(T) single point with 82 basis functions divided into irreps of 53 and 29, in serial. I can give more detailed machine diagnostics if needed, but I think the point is clear. I'll work on getting the speed restored while waiting for reviews on my other live PR. This is a good opportunity to learn about how to make C++ code efficient, at least.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1901#issuecomment-640146254:701,efficient,efficient,701,https://psicode.org,https://github.com/psi4/psi4/pull/1901#issuecomment-640146254,1,['efficient'],['efficient']
Energy Efficiency,"Now that I can see the log, I notice that you're building with AM=5. If you plan to add some CBS tests that need _h_ functions, we should bump the Travis setup. If not, we should reduce Disteli's AM, to speed it up.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/449#issuecomment-235419669:179,reduce,reduce,179,https://psicode.org,https://github.com/psi4/psi4/pull/449#issuecomment-235419669,1,['reduce'],['reduce']
Energy Efficiency,"NumPY-1.24.0 got released in late December, and Debian's psi4 (still based on 1.3 due to LibInt) now fails (most of) the testsuite like this:. ```; 133/143 Test #406: python-curve .....................***Failed 0.42 sec; Traceback (most recent call last):; File ""/<<PKGBUILDDIR>>/tests/python/curve/input.py"", line 21, in <module>; out[d] = psi4.energy('SCF', molecule=geom); ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; File ""/<<PKGBUILDDIR>>/builddir/stage/lib/x86_64-linux-gnu/psi4/driver/driver.py"", line 556, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; File ""/<<PKGBUILDDIR>>/builddir/stage/lib/x86_64-linux-gnu/psi4/driver/procrouting/proc.py"", line 2002, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; File ""/<<PKGBUILDDIR>>/builddir/stage/lib/x86_64-linux-gnu/psi4/driver/procrouting/proc.py"", line 1276, in scf_helper; base_wfn = core.Wavefunction.build(scf_molecule, core.get_global_option('BASIS')); ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; File ""/<<PKGBUILDDIR>>/builddir/stage/lib/x86_64-linux-gnu/psi4/driver/p4util/python_helpers.py"", line 115, in _core_wavefunction_build; basis = core.BasisSet.build(mol, ""ORBITAL"", basis); ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; File ""/<<PKGBUILDDIR>>/builddir/stage/lib/x86_64-linux-gnu/psi4/driver/p4util/python_helpers.py"", line 79, in _pybuild_basis; bs, basisdict = qcdb.BasisSet.pyconstruct(; ^^^^^^^^^^^^^^^^^^^^^^^^^^; File ""/<<PKGBUILDDIR>>/builddir/stage/lib/x86_64-linux-gnu/psi4/driver/qcdb/libmintsbasisset.py"", line 635, in pyconstruct; mol = Molecule(mol); ^^^^^^^^^^^^^; File ""/<<PKGBUILDDIR>>/builddir/stage/lib/x86_64-linux-gnu/psi4/driver/qcdb/molecule.py"", line 143, in __init__; self._internal_from_dict(molrec, verbose=verbose); File ""/<<PKGBUILDDIR>>/builddir/stage/lib/x86_64-linux-gnu/psi4/driver/qcdb/molecule.py"", l",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2865:346,energy,energy,346,https://psicode.org,https://github.com/psi4/psi4/issues/2865,3,['energy'],['energy']
Energy Efficiency,"OK I've checked both energies and gradients. The returned quantities are what they should be, but the number of calcs was not - but it is with #2221. I am attaching the results below:. cmd | bsse_type | return_total_data | should perform | 1.4a2.dev923 | master + #2221; ---- | ---- | ---- | ---- | ---- | ---- |; energy | cp | true | 5 ene, return CP tot | 5 | 5 |; energy | cp | false (default) | 3 ene, return CP IE | **5** | **3** |; energy | nocp | true | 3 ene, return tot E | 3 | 3 |; energy | nocp | false (default) | 3 ene, return IE | 3 | 3; energy | cp, nocp | true | 5 ene, return CP tot | 5 | 5 |; energy | cp, nocp | false (default) | 5 ene, return CP IE | 5 | 5 |; gradient | cp | true | 5 grad, return CP tot G | 5 | 5 |; gradient | cp | false (default) | 3 grad, return CP IE G | **5** | **3** |; gradient | nocp | true | 3 grad, return tot G | 3 | 3 |; gradient | nocp | false (default) | 3 grad, return IE G | 3 | 3 |; gradient | cp, uncp | true | 5 grad, return CP tot G | 5 | 5 |; gradient | cp, uncp | false (default) | 5 grad, return CP IE G | 5 | 5 |. I am in favour of switching the default `return_total_data` from `False` to `True` when gradients or Hessians are requested from `nbody_gufunc`. I've checked that this also correctly propagates to finite difference gradients, meaning that:. ```; gradient( ..., return_total_data = True); gradient( ..., return_total_data = True, dertype = 0); gradient( ..., ); gradient( ..., dertype = 0); ```. all return the gradient of the total energy (CP-corrected, if requested). The interaction energy gradient can be asked for using `return_total_data = False`, and works also for `dertype=0`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1691#issuecomment-870398772:314,energy,energy,314,https://psicode.org,https://github.com/psi4/psi4/issues/1691#issuecomment-870398772,8,['energy'],['energy']
Energy Efficiency,"OK, I can confirm it only fails with ATLAS - works fine with refblas. If I run it with `mpirun -n 1`, it does not crash, but the result is bad:. ```; Nuclear Repulsion Energy (a.u.)...................................PASSED; CD-HF Energy (a.u.)...............................................PASSED; CD-OMP2 Total Energy (a.u.): computed value (-129.5432868) does not match (-129.5897884) to 6 decimal places.; ```. If I switch to `mpirun -n 2`, it crashes as indicated before, so that might be a hint.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/391#issuecomment-222325997:168,Energy,Energy,168,https://psicode.org,https://github.com/psi4/psi4/issues/391#issuecomment-222325997,3,['Energy'],['Energy']
Energy Efficiency,"OK, I think I've got it working on my local machine. Using the Psi4 input file you provided I obtain the following Mulliken charges:. ```; Mulliken Charges; ================; N 0.0380; H -0.2743; H 0.0121; H 0.2242. Sum of Mulliken Charges: 0.0000; ```. I'll get the patch pushed in shortly.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/60#issuecomment-54483620:124,charge,charges,124,https://psicode.org,https://github.com/psi4/psi4/issues/60#issuecomment-54483620,3,"['Charge', 'charge']","['Charges', 'charges']"
Energy Efficiency,"OK, from my point of view this one is ready for a review. The old syntax (`freeze_core true/false`) is equivalent to `freeze_core 1/0`, with `1` being positive-charge-aware; it simply un-freezes another full shell in that case. The new syntax of `freeze_core -1/-2/-3` attempts to freeze Nth previous noble gas on each atom, and throws an exception if no valence electrons remain in the fragment (due to charge).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1350#issuecomment-451587094:160,charge,charge-aware,160,https://psicode.org,https://github.com/psi4/psi4/pull/1350#issuecomment-451587094,2,['charge'],"['charge', 'charge-aware']"
Energy Efficiency,"OK, then I suggest that for all cases where we're switching basis sets, we should do a `clean()` - it's done in the CBS routine which is used for `energy()` and `gradient()` (as the CBS routines can handle ""method/basis"" syntax), we might as well do it for `properties()`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/949#issuecomment-379562043:147,energy,energy,147,https://psicode.org,https://github.com/psi4/psi4/pull/949#issuecomment-379562043,1,['energy'],['energy']
Energy Efficiency,"OK. I'm also not sure about the automatic root following bit... If the energy has converged, the Fock gradient *has to* be small, since it is the orbital gradient. This is if you use DIIS. If, however, you use orbital rotation techniques with gradient descent methods, this can happen in case the preconditioning isn't working properly. But even in such cases most chemical models don't cause problems; it's orbital-dependent models that tend to be hairy.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/888#issuecomment-450748956:71,energy,energy,71,https://psicode.org,https://github.com/psi4/psi4/issues/888#issuecomment-450748956,1,['energy'],['energy']
Energy Efficiency,ONV = 1.00e-06 MIXED4 = yes; OEI FILE = 35 R4S = no; REPL OTF = no; TEI FILE = 72 DIAG METHOD = SEM; PRECONDITIONER= DAVIDSON UPDATE = DAVIDSON; S = 0.0000 Ms0 = yes; MAX NUM VECS = 13; RESTART = no; GUESS VECTOR = H0BLOCK OPENTYPE = NONE; REF SYM = auto; COLLAPSE SIZE = 1 HD AVG = EVANGELISTI; LSE = no LSE ITER = 0; HD OTF = yes NO DFILE = no; MPN = no MPN SCHMIDT = no; ZAPTN = no MPN WIGNER = no; PERT Z = 1.0000 FOLLOW ROOT = 0; NUM THREADS = 12; VECS WRITE = no NUM VECS WRITE = 0; FILTER GUESS = no SF RESTRICT = no; OPDM = no TRANS DENSITY= no. FILES = 50 51 52 53. EX ALLOW = 1 1 1 1 1 1 1 1 1 1; STATE AVERAGE = 1(1.00); STATE AVERAGE = 1(1.00). ORBITALS:; NMO = 46; FROZEN CORE = 0 RESTR CORE = 0; FROZEN VIRT = 0 RESTR VIRT = 0; DROPPED CORE = 0 DROPPED VIRT = 0; EXPLICIT CORE= 0 ORBS IN CI = 46; NUM ALP = 5 NUM BET = 5; NUM ALP EXPL = 5 NUM BET EXPL = 5; IOPEN = no; RAS1 LVL = 4 A RAS3 MAX = 5; RAS1 MIN = 0 B RAS3 MAX = 5; A RAS1 LVL = 4 RAS4 LVL = 46; A RAS1 MIN = 0 A RAS4 MAX = 0; A RAS1 MAX = 5 B RAS4 MAX = 0; B RAS1 LVL = 4 RAS4 MAX = 0; B RAS1 MIN = 0 A RAS34 MAX = 5; B RAS1 MAX = 5 B RAS34 MAX = 5; RAS3 LVL = 5 RAS34 MAX = 10; RAS3 MAX = 10. DOCC = 2 0 0 0 0 1 1 1; SOCC = 0 0 0 0 0 0 0 0. FROZEN DOCC = 0 0 0 0 0 0 0 0; RESTRICTED DOCC = 0 0 0 0 0 0 0 0; RAS 1 = 2 0 0 0 0 1 1 1; RAS 2 = 0 0 0 0 0 0 0 0; RAS 3 = 9 3 3 3 2 7 7 7; RAS 4 = 0 0 0 0 0 0 0 0; RESTRICTED UOCC = 0 0 0 0 0 0 0 0; FROZEN UOCC = 0 0 0 0 0 0 0 0. ---. There are 1370754 alpha strings; There are 1370754 beta strings; CI space contains 8 blocks. CI space requires 234872686232 determinants. Check SCF Energy from 1- and 2-electron integrals. SCF Energy (ref): -99.4508070223; Nuclear repulsion energy: 0.0000000000; One-electron energy: -143.9965314821; Two-electron energy: 44.5457244598; Dropped core energy: 0.0000000000; Total electronic energy: -99.4508070223; Total SCF energy: -99.4508070223. CI vector/subblock length = 29726587396; init_array: trouble allocating memory; size = 29726587396,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/204:13070,Energy,Energy,13070,https://psicode.org,https://github.com/psi4/psi4/issues/204,8,"['Energy', 'energy']","['Energy', 'energy']"
Energy Efficiency,ORCA kindly provides a table with their definitions: https://sites.google.com/site/orcainputlibrary/frozen-core-calculations. We could possible adapt it after checking it out.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2343#issuecomment-961182012:144,adapt,adapt,144,https://psicode.org,https://github.com/psi4/psi4/issues/2343#issuecomment-961182012,1,['adapt'],['adapt']
Energy Efficiency,Occurs also for automatic counterpoise calculations as reported in the forum: http://forum.psicode.org/t/non-covalent-bond-energy-in-solution-potential-pcmsolver-bug/1896/3,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1656#issuecomment-670418149:123,energy,energy-in-solution-potential-pcmsolver-bug,123,https://psicode.org,https://github.com/psi4/psi4/issues/1656#issuecomment-670418149,1,['energy'],['energy-in-solution-potential-pcmsolver-bug']
Energy Efficiency,"Of the recent SCF PRs that may have had an impact on SAD and this bug, the relevant one would have been https://github.com/psi4/psi4/pull/2848, I think. In making that PR, I ran into a bug where the code would throw an exception with `SCF_TYPE=MEM_DF` + `SCF_SUBTYPE=INCORE`, even if enough memory was allocated to run in-core. The issue was that there is a point in DFHelper (the `get_core_size()` function) at which the SCF subalgorithm is determined via `AO_core()`, before the memory is actually allocated to the JK object. Some of the commits in https://github.com/psi4/psi4/pull/2848 (specifically, commits e8f8bdad573f43aaf1a1eca5871606b29a77ae50 and 3d3f138eb53e3ee4abe8b8c8d23ad6e457fa68ef) deal with fixing this bug. If it was the SCF PRs that fixed the cc44 bug, it is likely that range of commits in https://github.com/psi4/psi4/pull/2848.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2576#issuecomment-1540856066:302,allocate,allocated,302,https://psicode.org,https://github.com/psi4/psi4/issues/2576#issuecomment-1540856066,2,['allocate'],['allocated']
Energy Efficiency,"Oh right, the issue is that due to `freeze_core = True`, there is only one active electron. So yeah, it would be nice if MP2 did not crash but returned the HF energy, since the MP2 correction is zero.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2976#issuecomment-1573525851:159,energy,energy,159,https://psicode.org,https://github.com/psi4/psi4/issues/2976#issuecomment-1573525851,1,['energy'],['energy']
Energy Efficiency,"Oh since I mentioned gradients in the title. When I was running some optimizations, gradient behavior did match that of the energy",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1897#issuecomment-632693068:124,energy,energy,124,https://psicode.org,https://github.com/psi4/psi4/issues/1897#issuecomment-632693068,1,['energy'],['energy']
Energy Efficiency,"Oh wow, I had no idea there were already so many moving parts or I wouldn't have suggested it. I don't have any strong opinion, but I think `ENERGY` seems like the more consistent label.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/480#issuecomment-253961421:141,ENERGY,ENERGY,141,https://psicode.org,https://github.com/psi4/psi4/pull/480#issuecomment-253961421,1,['ENERGY'],['ENERGY']
Energy Efficiency,"Oh, I see its only if its cast and no other scenario. @bwb314 Can you add a *single* cast to `tests/dftd3/energy/input.dat`?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/769#issuecomment-316857100:106,energy,energy,106,https://psicode.org,https://github.com/psi4/psi4/pull/769#issuecomment-316857100,1,['energy'],['energy']
Energy Efficiency,"Ok I got the following test failures:. ```; 252:nbody-convergence; 306:psimrcc-ccsd_t-4; 420:psi4numpy-cphf; 421:psi4numpy-dfmp2; 422:psi4numpy-rhf; 423:psi4numpy-rhf-gradient; 424:psi4numpy-rhf-hessian; 425:psi4numpy-fci; 429:python-energy; 430:python-curve; 431:python-pubchem; 432:python-mints9; 433:python-mints2; 434:python-cc54; 435:python-3-index-transforms; 436:python-mints13; 437:python-cc_amps; 438:json-schema-1-energy; 439:json-schema-1-ghost; 440:json-schema-1-orient; 441:json-schema-1-throws; 442:json-schema-1-gradient; 443:json-schema-1-properties; 444:gcp-pbeh3c; 445:gcp-hf3c; 446:gcp-hf3c-gradient; 447:gcp-hf3c-hessian; 448:gcp-dft-custom-hybrid; ```. And now my problem is on the import psi4. I tried adding the correct PYTHONPATH as follows:. ```; export PATH=/usr/local/bin:$PATH # python interpreter; export PATH=/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/bin:$PATH # psi4 executable; export PYTHONPATH=/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib//:$PYTHONPATH # psi4 pymodule; ```. But I get a new kind of error. Any idea how to fix it? :. ```; >>> import psi4; Traceback (most recent call last):; File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/__init__.py"", line 55, in <module>; from . import core; ImportError: dlopen(/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37m-darwin.so, 2): Symbol not found: __gfortran_concat_string; Referenced from: /Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37m-darwin.so; Expected in: flat namespace; in /Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37m-darwin.so. During handling of the above exception, another exception occurred:. Traceback (most recent call last):; File ""<stdin>"", line 1, in <module>; File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/__init__.py"", line 60, in <module>; raise ImportError(""{0}"".format(err)); Im",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1870#issuecomment-614773796:234,energy,energy,234,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-614773796,2,['energy'],['energy']
Energy Efficiency,"Ok thanks for the summary. I agree the current behavior is logical, and; also that there is an inconsistency between Zmat and Cartesians that could; confuse a user. I am very happy there is a little warning printed by the; code if the user is updating the Cartesian coordinates. Perhaps that; warning could be updated to say something like ""(multipole moments of; charged molecules may be affected)"" or something? And/or a sentence or two; in whatever section of the manual might cover something like this?. I also recommend expanding the comment in the props2/input.dat from ""#; Force COM for pole computation"" to the more detailed ""# Force COM; translation so multipoles of charged molecule will match reference values"". On Tue, Sep 26, 2017 at 2:50 PM, Daniel Smith <notifications@github.com>; wrote:. > Im still not completely sure that there is a way to bridge the two.; > Ultimately the modification in-place leads to quite a few errors; however,; > the Psithon API make the in-place a logical operation.; >; > It would be better to do something like:; >; > new_mol = molecule.update({""var1"": 5, ""var2"": 6}); >; > or something similar. Getting that across in something like Psithon would; > be difficult I think.; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/782#issuecomment-332298418>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AC9Qdlu-db-VElBfiw-oAMiX7_n0LAOsks5smUeIgaJpZM4O79qb>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/782#issuecomment-332340271:364,charge,charged,364,https://psicode.org,https://github.com/psi4/psi4/issues/782#issuecomment-332340271,2,['charge'],['charged']
Energy Efficiency,"Ok the build is finally over with the new options I provided in the configure steps and now it works ! It was indeed, as many of you suggested already, this libgfortran.dylib issue. After some trials and errors (that's why I took so much time, sorry about that), here is the configure options that worked for me:. ```; cmake -H. -Bobjdir -DOpenMP_LIBRARY_DIRS=/opt/intel/lib -DCMAKE_Fortran_FLAGS=""-L/usr/local/opt/gcc@8/lib/gcc/8 -lgfortran""; ```. @JonathonMisiewicz now the restart with ```'fci'``` works ! But for ```'casscf'``` I get the following error:. ```; Could not find requested basisset (DF_BASIS_SCF).Traceback (most recent call last):; File ""PSI4_CAS_sim.py"", line 89, in <module>; CASSCF_energy = psi4.energy('casscf', molecule=mol, ref_wfn=original_wfn, return_wfn=False); File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/driver/driver.py"", line 570, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 4804, in run_detcas; ciwfn = mcscf.mcscf_solver(ref_wfn); File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/driver/procrouting/mcscf/mcscf_solver.py"", line 100, in mcscf_solver; mcscf_obj = ciwfn.mcscf_object(); RuntimeError: ; Fatal Error: Wavefunction::get_basisset: Requested basis set (DF_BASIS_SCF) was not set!. Error occurred in file: /Users/bsenjean/Documents/Git_repositories/psi4/psi4/src/psi4/libmints/wavefunction.cc on line: 670; ```. Though that's not related to the issue here so I guess I can ask it on the forum or in another github issue ?. Thanks a lot, all of you, for your precious help !",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1870#issuecomment-615271611:717,energy,energy,717,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-615271611,3,['energy'],['energy']
Energy Efficiency,"Ok, I have a PR to this branch that fixes it. Here's some information for those reviewing. The code that's causing the issue is the stuff that handles symmetry-dependent input arrays, such as DOCC, SOCC, making sure that they are mapped correctly if the molecule is displaced to a lower symmetry point group. The dimension `nirreps` is the current (displaced) symmetry and may be lower than the parent symmetry `nirreps_ref`. The problem came from re-use of the arrays that handle docc and frozen orbitals. In the first step they are read from wfn (which relays the info in the reduced symmetry so no mapping is needed). Then, after accumulating the info from wfn, the same arrays are used to query the input file, which has the full dimensions so the arrays should be resized. @raimis correctly identified the mismatch in the dimensioning and his idea of increasing the dimensions to `nirreps_ref` is correct; the conversion routine just doesn't do this correctly without reading past the end of the wfn's reduced dimension arrays. This fix just handles the wfn quantities first, then resizes for the mrcc parsing step. There are a few comments in there to help clarify what's happening. I think this section just failed to keep up with the many changes to how wfn handles things over the last decade. Thanks very much for your help, @raimis .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1521#issuecomment-462803965:578,reduce,reduced,578,https://psicode.org,https://github.com/psi4/psi4/pull/1521#issuecomment-462803965,2,['reduce'],['reduced']
Energy Efficiency,"Ok, checked a AM=4 from the current state against a pre-CMakeRewrite AM=4. Conclusion, we're dealing with the same-sized library.; - `libint.h` and `libderiv.h` identical; - generated libint and libderiv file lists identical. Nevertheless, there _is_ a problem. The AM catches in libmints/eribase.cc are up for discussion; - AM=4, as-is: 'quick' all pass. 'full' all but the usual ones pass but only irc (deriv catch) cases report a ERI AM problem; - @andysim changed all the checks recently from `>=` to `>` in https://github.com/psi4/psi4/commit/fb42b53e3aec742cf0c45b7ff3c35f4051b77b81#diff-911b4dff3a9d02cf3541610b10f56ea3L1811; - If I change the _energy_ check back to `>=` and build as AM=4, cbs-xtpl-wrapper and dft-b2plyp (both int catches) join the irc tests in reporting ERI AM problems. So they're fixed by undoing the comparison change.; - But there are still some tests (scf11-freq-freom-energies, fd-freq-energy-large, opt-lindep-change) that fail at AM=4 _without_ reporting an ERI error, in fact they just quit after `=> Auxiliary Basis Set <=` block, yet these tests work just fine with AM=5, so their problem (a) is a AM one and (b) was reported as a AM one pre-CMakeRewrite. So, (1) what led to those changes to the AM comparisons, Andy, and is it possible you're more confident about one than about all? (2) What else are we not comparing right to still have lindep-change, etc. broken?. Ryan, add the '=' back, and in practical terms, you should be back in business.; For the future, irc test cases are failing for me (once they have sufficient AM), probably because they're not playing nicely with the analytic Hessian. Get @avcopan to investigate once code is in a more useable state.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-240647129:919,energy,energy-large,919,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-240647129,1,['energy'],['energy-large']
Energy Efficiency,"Ok, four failures:. ```; The following tests FAILED:; 	269 - props2 (Failed); 	270 - props3 (Failed); 	324 - soscf-dft (Failed); 	349 - scf-coverage (Failed); ```. props3 and scf-coverage could be healed by slight relaxation:; ```; TestComparisonError: 	Lithium anion stability: computed value (-7.4168185) does not match (-7.4168196) to 6 digits.; ```. ```; TestComparisonError: 	64-pole ZZZZZZ: computed value (-20544.12046) does not match (-20544.12057) to 4 digits.; ```. But props2 is really off:; ```; TestComparisonError: Y Component of Dipole 0: computed value (21.592762) does not match (17.775955) to 5 digits.; ```. And soscf-dft is fine energy-wise but oscillates more that the test allows on iterations in the next-to-last (PBE) subtest:; ```; @DF-RKS iter 0: -148.97585698578987 -1.48976e+02 2.56136e-01 ; @DF-RKS iter 1: -148.95093820938956 2.49188e-02 1.50011e-01 ; @DF-RKS iter 2: -149.39705073850598 -4.46113e-01 1.11947e-01 DIIS; @DF-RKS iter 3: -150.12875309470365 -7.31702e-01 7.57889e-03 DIIS; @DF-RKS iter 4: -150.12714697276095 1.60612e-03 1.00558e-02 SOKS, nmicro = 4; @DF-RKS iter 5: -150.13120148446785 -4.05451e-03 1.42232e-05 DIIS; @DF-RKS iter 6: -150.12700529520501 4.19619e-03 1.02055e-02 SOKS, nmicro = 4; @DF-RKS iter 7: -150.13120147305844 -4.19618e-03 2.10040e-05 DIIS; @DF-RKS iter 8: -150.12394657944893 7.25489e-03 1.34190e-02 SOKS, nmicro = 4; @DF-RKS iter 9: -150.13120141103812 -7.25483e-03 4.21385e-05 DIIS; @DF-RKS iter 10: -150.12366619982981 7.53521e-03 1.36759e-02 SOKS, nmicro = 4; @DF-RKS iter 11: -150.13120140228156 -7.53520e-03 4.43841e-05 DIIS; @DF-RKS iter 12: -150.11089835193317 2.03031e-02 2.24444e-02 SOKS, nmicro = 4; @DF-RKS iter 13: -150.13120064244808 -2.03023e-02 1.38615e-04 DIIS; @DF-RKS iter 14: -150.10407305304250 2.71276e-02 2.59404e-02 SOKS, nmicro = 4; @DF-RKS iter 15: -150.13119989205700 -2.71268e-02 1.91309e-04 DIIS; @DF-RKS iter 16: -150.08734658173793 4.38533e-02 3.29682e-02 SOKS, nmicro = 5; @DF-RKS iter 17: -150.13119968",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/773#issuecomment-321913106:649,energy,energy-wise,649,https://psicode.org,https://github.com/psi4/psi4/issues/773#issuecomment-321913106,1,['energy'],['energy-wise']
Energy Efficiency,"Ok, since last review round, this adds tests for CCSD gradients and CCSD(T) energies. As there's more items stored and printed from the cc* modules (i.e., mp2 & ccsd singles), @lothian should have a chance to review. All conventional values actively compared against cfour downstream. All matchable except for _CCSD_ energy in the course of _CCSD(T)_ energy for ROHF FC (see below), though this is the realm where differences expected. I haven't experimented much, but if these differences surprise anyone or if more toggles besides canonicalize come to mind, I'd be glad to hear of them. ```; AssertionError: 	test_ccsd_prt_pr_energy_module[ccsd_t_ rohf conv fc: * ccenergy-dz-ene0] CCSD CORRELATION ENERGY: computed value (-0.08256310) does not match (-0.08256719) to atol=1e-06 by difference (0.00000409).; AssertionError: 	test_ccsd_prt_pr_energy_module[ccsd_t_ rohf conv fc: * ccenergy-adz-ene0] CCSD CORRELATION ENERGY: computed value (-0.17599322) does not match (-0.17598849) to atol=1e-06 by difference (-0.00000473).; AssertionError: 	test_ccsd_prt_pr_energy_module[ccsd_t_ rohf conv fc: * ccenergy-qz2p-ene0] CCSD CORRELATION ENERGY: computed value (-0.19283228) does not match (-0.19282621) to atol=1e-06 by difference (-0.00000607).; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1850#issuecomment-627499447:317,energy,energy,317,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-627499447,5,"['ENERGY', 'energy']","['ENERGY', 'energy']"
Energy Efficiency,"Ok, that was an interesting problem for this version of psi4 ! I now got the very last one and things work fine again:. ```; Total Energy Delta E RMS |[F,P]| ; ; @RHF iter SAD: -1.10951830992328 -1.10952e+00 0.00000e+00 ; @RHF iter 1: -1.42989087630227 -3.20373e-01 2.63944e-02 DIIS; @RHF iter 2: -1.48669699030023 -5.68061e-02 1.49695e-02 DIIS; @RHF iter 3: -1.52194618795963 -3.52492e-02 1.34968e-02 DIIS; @RHF iter 4: -1.53906330108634 -1.71171e-02 5.44189e-03 DIIS; @RHF iter 5: -1.54087887085299 -1.81557e-03 2.40827e-03 DIIS; @RHF iter 6: -1.54117109557693 -2.92225e-04 1.16803e-03 DIIS; @RHF iter 7: -1.54123744472211 -6.63491e-05 5.44231e-04 DIIS; @RHF iter 8: -1.54125234553558 -1.49008e-05 2.21654e-04 DIIS; @RHF iter 9: -1.54125494714724 -2.60161e-06 7.30916e-05 DIIS; @RHF iter 10: -1.54125524201882 -2.94872e-07 1.85602e-05 DIIS; @RHF iter 11: -1.54125526151990 -1.95011e-08 3.60860e-06 DIIS; @RHF iter 12: -1.54125526228451 -7.64613e-10 1.18266e-07 DIIS; Energy and wave function converged. ; ; SO Integrals not on disk. Computing...done.; Presorting SO-basis two-electron integrals.; Sorting File: SO Ints (nn|nn) nbuckets = 1; Transforming the one-electron integrals and constructing Fock matrices; Starting first half-transformation.; Sorting half-transformed integrals.; First half integral transformation complete.; Starting second half-transformation.; Two-electron integral transformation complete.; Starting first half-transformation.; Sorting half-transformed integrals.; First half integral transformation complete.; Starting second half-transformation.; Two-electron integral transformation complete.; Lowest singlet (RHF->RHF) stability eigenvalues:-; A 0.118946 A 0.152195 A 0.527951 A 0.790910 ; ; Lowest triplet (RHF->UHF) stability eigenvalues:-; A -0.429230 A -0.408687 A 0.114615 A 0.215652 ; ```. Thank you for your help ! I'll close the issue.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1878#issuecomment-623974761:131,Energy,Energy,131,https://psicode.org,https://github.com/psi4/psi4/issues/1878#issuecomment-623974761,2,['Energy'],['Energy']
Energy Efficiency,"Ok, the problem arises because in `psivardefs.py` the `SAPT0 IND ENERGY` variable is always defined in terms of coupled induction. I remember we had discussions about that at the time. Since usapt0.cc does not put uncoupled induction in the coupled induction variables, the `SAPT0 IND ENERGY` is not defined properly any more. Possible solution: define uncoupled variants of the variables in `psivardefs.py`, and when we create `SAPT IND ENERGY` (in `proc.py`) we copy `SAPT0 IND,U ENERGY` value if `SAPT0 IND ENERGY` is not defined. ; - Would that work ?; - Is there a way to check whether a Psivar is defined other than checking if it is exactly 0 ?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/908#issuecomment-364679625:65,ENERGY,ENERGY,65,https://psicode.org,https://github.com/psi4/psi4/pull/908#issuecomment-364679625,5,['ENERGY'],['ENERGY']
Energy Efficiency,"Ok, this was changed in Nov 2019 in #1351 (unmerged) to ""extern object units are bohr, not whatever the Molecule was."" And in that branch Mol units ang/bohr + extern units bohr are behaving sensibly:. ```; molecule mol {; 0 1; H 0.0 0.0 0.0; H 0.0 0.0 1.0; units angstrom; symmetry c1; no_reorient; no_com; }. set basis 3-21G. embedding_charges = [; [1.0, [0.0, 0.0, 3.77945]],; ]. energy(""SCF"", embedding_charges=embedding_charges); ```. ```; >>> diff toon1.out toon2.out ; 40,41c40,41; < H 0.0 0.0 1.0; < units angstrom; ---; > H 0.0 0.0 1.889725; > units bohr; 85c85; < Geometry (in Angstrom), charge = 0, multiplicity = 1:; ---; > Geometry (in Bohr), charge = 0, multiplicity = 1:; 90c90; < H 0.000000000000 0.000000000000 1.000000000000 1.007825032230; ---; > H 0.000000000000 0.000000000000 1.889725000000 1.007825032230; 94,96c94,96; < Rotational constants: A = ************ B = 16.72674 C = 16.72674 [cm^-1]; < Rotational constants: A = ************ B = 501455.10648 C = 501455.10648 [MHz]; < Nuclear repulsion = 0.529177210670000; ---; > Rotational constants: A = ************ B = 16.72676 C = 16.72676 [cm^-1]; > Rotational constants: A = ************ B = 501455.70378 C = 501455.70378 [MHz]; > Nuclear repulsion = 0.529177525830478; 165,167c165,167; < Old nuclear repulsion = 0.529177210670000; < Additional nuclear repulsion = 0.793766603906570; < Total nuclear repulsion = 1.322943814576570; ---; > Old nuclear repulsion = 0.529177525830478; > Additional nuclear repulsion = 0.793766288745717; > Total nuclear repulsion = 1.322943814576195 ; 215c215; < @DF-RHF Final Energy: -1.12042760680024; ---; > @DF-RHF Final Energy: -1.12042770344228; 219,222c219,222; < Nuclear Repulsion Energy = 1.3229438145765702; < One-Electron Energy = -3.0366720199640036; < Two-Electron Energy = 0.5933005985871914; < Total Energy = -1.1204276068002419; ---; > Nuclear Repulsion Energy = 1.3229438145761949; > One-Electron Energy = -3.0366721911846972; > Two-Electron Energy = 0.5933006731662177; > Total En",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1881#issuecomment-625260115:382,energy,energy,382,https://psicode.org,https://github.com/psi4/psi4/issues/1881#issuecomment-625260115,3,"['charge', 'energy']","['charge', 'energy']"
Energy Efficiency,"Okay, I got something to run, but it's getting inf's and nan's. Looks like built-in basis sets cause errors, while with custom ones the calculation runs, but something weird happens. The matrices look alright: the Cholesky procedure builds MOs, the Fock matrix is built and looks fine, but in the next iteration the density and Fock matrices are full of NaNs....; ```; import psi4. mol = psi4.core.Molecule.from_arrays(; elez=[2, 4, 2],; #fix_com=True,; #fix_orientation=True,; fix_symmetry='c1',; tooclose=1.e-6,; real=[True, False, True],; geom=[; 1.0, 0.0, -0.05,; 1.0, 0.0, 0.0,; 1.0, 0.0, 0.05]); activate(mol); set s_orthogonalization partialcholesky; set df_scf_guess false; set scf_type direct; set basis ugbs; #set basis cc-pvdz # fails with SOBasis: shell changed; #set basis cc-pvdz-decon # fails with SOBasis: shell changed; set debug 10; set guess core; energy('scf'); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1843#issuecomment-595998279:867,energy,energy,867,https://psicode.org,https://github.com/psi4/psi4/pull/1843#issuecomment-595998279,1,['energy'],['energy']
Energy Efficiency,"Okay, I think (hope) I sorted it out. My test was checking the last computed energy, not the last converged IRC point. The latter should be more robust. The mechanism that checks for a minimum runs on the first step of the next IRC-point optimization -- that was the energy being compared. Since the gradient is small so near the minimum, I guess it isn't surprising that that step direction isn't well-defined. My changes are [here](https://github.com/avcopan/psi4/commit/ab07fd3e1c5242ca58bba12230ce7f1077392102). If tests pass on my machine and you approve (@loriab), I'll do a pull request.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/290#issuecomment-189916188:77,energy,energy,77,https://psicode.org,https://github.com/psi4/psi4/issues/290#issuecomment-189916188,2,['energy'],['energy']
Energy Efficiency,"Okay, onto the next problem. I want to run a DFT calculation on a system where converging even HF takes SOSCF to work. However, reading in the HF orbitals fails. ; ```; molecule {; 0 1; symmetry c1; Mn -0.0128264866 -0.0002779912 -0.1091894544; O -1.1037647823 1.0246639195 -1.2821459116; O -0.4319309790 -1.5910632792 -1.0423314985; N 0.7243918073 1.6205280457 0.7709992473; N 1.3008767173 -0.9287768925 1.0635839133; C -1.2886186814 2.2834208702 -1.2181338272; C -0.7050865946 3.1821062059 -0.3604271375; C 0.3534920334 2.8195308082 0.5207059889; C 0.2177419816 -2.6945497951 -0.9662726987; C 1.2181378357 -3.0250490115 -0.0961995911; C 1.7180430400 -2.1229929449 0.8899899444; C 1.9393113446 1.3525171542 1.5367699106; C 1.8333722479 -0.0604962603 2.1055467704; H 0.8908035853 3.6241374839 1.0039698993; H 2.5024254412 -2.4854165868 1.5399007635; H 2.7858100041 1.4098930461 0.8661311665; H 1.1490336627 -0.0652673733 2.9502674019; H 2.0638511115 2.0769335299 2.3353274192; H 2.7993768711 -0.4085469833 2.4534782102; H -1.9892347032 2.6686747336 -1.9454961675; H -0.0986239324 -3.4441353556 -1.6764363233; Cl 1.8821942342 0.3098852687 -1.6599082362; O -1.1395010178 -0.1703680057 0.9263551082; H -0.9312248148 4.2251864392 -0.4696082573; H 1.6695378989 -3.9953914470 -0.1633815245; }. # Run SCF, initialize in smaller basis; set basis 6-31G*; set basis_guess 3-21G; set scf_type pk; set soscf true; scf_e, scf_wfn = energy('scf', return_wfn=True). # Rerun with BP86 to get better density; set scf guess read; scf_e, scf_wfn = energy('bp86', return_wfn=True); ```. outputs in the BP86 part; ```; Warning! Guess was READ without Ca set, switching to CORE!; This option should have been configured at the driver level. SCF Guess: Core (One-Electron) Hamiltonian.; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/612:1419,energy,energy,1419,https://psicode.org,https://github.com/psi4/psi4/issues/612,2,['energy'],['energy']
Energy Efficiency,"On ECP front, input:; ```; memory 12 gb. set basis def2-qzvp; set basis_guess def2-svp. database('b3lyp-d2', 'heavy28'); ```; yields:; ```; ==> Requested Energy <==. --------------------------------------------------------------------------------------------------------------------------; Reaction Reaction Energy Reaction Error Reagent 1 Reagent 2 Reagent 3; Ref Calc [kcal/mol] [kJ/mol] [Eh] Wt [Eh] Wt [Eh] Wt; --------------------------------------------------------------------------------------------------------------------------; HEAVY28-1 1.2900 0.1427 -1.1473 -4.8005 -432.98126591 -1 -216.49051929 2; HEAVY28-2 2.4200 2.6044 0.1844 0.7717 -292.96755189 -1 -216.49051929 1 -76.47288217 1; HEAVY28-3 1.4000 0.7130 -0.6870 -2.8744 -615.93287983 -1 -216.49051929 1 -399.44122431 1; HEAVY28-4 0.8500 0.2787 -0.5713 -2.3904 -677.34282211 -1 -216.49051929 1 -460.85185870 1; HEAVY28-5 1.1600 0.5208 -0.6392 -2.6745 -2791.33529091 -1 -216.49051929 1 -2574.84394169 1; HEAVY28-6 1.4200 0.3997 -1.0203 -4.2690 -514.89833461 -1 -216.49051929 1 -298.40717839 1; HEAVY28-7 0.6900 0.3720 -0.3180 -1.3306 -273.08491143 -1 -216.49051929 1 -56.59379936 1; HEAVY28-8 1.3200 0.0652 -1.2548 -5.2502 -390.55270102 -1 -195.27629857 2; HEAVY28-9 0.6800 -0.0169 -0.6969 -2.9160 -411.76679086 -1 -195.27629857 1 -216.49051929 1; HEAVY28-10 0.4400 0.1562 -0.2838 -1.1876 -271.74942958 -1 -195.27629857 1 -76.47288217 1; HEAVY28-11 0.8000 0.1821 -0.6179 -2.5853 -656.12844746 -1 -195.27629857 1 -460.85185870 1; HEAVY28-12 1.0400 0.4064 -0.6336 -2.6510 -2770.12088792 -1 -195.27629857 1 -2574.84394169 1; HEAVY28-13 1.2900 0.0679 -1.2221 -5.1133 -493.68358516 -1 -195.27629857 1 -298.40717839 1; HEAVY28-14 0.7000 0.1020 -0.5980 -2.5019 -464.58500012 -1 -195.27629857 1 -269.30853894 1; HEAVY28-15 1.3000 0.2426 -1.0574 -4.4240 -484.24282026 -1 -242.12121680 2; HEAVY28-16 1.7000 1.7156 0.0156 0.0653 -318.59683296 -1 -242.12121680 1 -76.47288217 1; HEAVY28-17 1.1400 0.7054 -0.4346 -1.8184 -641.56356522 -1 -242.121",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/795#issuecomment-326351281:154,Energy,Energy,154,https://psicode.org,https://github.com/psi4/psi4/pull/795#issuecomment-326351281,2,['Energy'],['Energy']
Energy Efficiency,"On my computer, there's no problem with huge integers (edit: yes there is). Also, that bug is unrelated to the algorithm: I don't use the Cholesky decomposed overlap, the only thing that matter are the pivot indices. So, looks like the problem is that in the 5th symmetry block, the Windows build picks up the 3rd SO basis function, while my build picks up the 12th basis function, thus leading to a different energy. The other blocks are the same.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1760#issuecomment-571256793:410,energy,energy,410,https://psicode.org,https://github.com/psi4/psi4/pull/1760#issuecomment-571256793,1,['energy'],['energy']
Energy Efficiency,"On my wishlist is the addition of the D3(ABC) term (`dftd3 -abc`). I haven't really gone through all the changes, but it should now be easier to add now, right?. Envisioning `energy('pbe-d3bjabc')`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1151#issuecomment-416132986:175,energy,energy,175,https://psicode.org,https://github.com/psi4/psi4/pull/1151#issuecomment-416132986,1,['energy'],['energy']
Energy Efficiency,"On the `-std=gnu++11`, we're scheduled to suppress that soon with [this line](https://github.com/psi4/psi4/pull/627/files#diff-af3b638bc2a3e6c650974192a53c7291R176), as the issue came up with cmake >=3.6 and Intel compilers. I see what you mean about return type of [`std::bind`](http://en.cppreference.com/w/cpp/utility/functional/bind) being deprecated in c++17.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/631#issuecomment-283067827:29,schedul,scheduled,29,https://psicode.org,https://github.com/psi4/psi4/issues/631#issuecomment-283067827,1,['schedul'],['scheduled']
Energy Efficiency,"On the `clean` issue, I don't see a change in behavior from your PR. The below (on master) also requires the intervening `clean()` to avoid a PSIO error. Maybe the rules of how much the user should need to call clean need rethinking, but at least they are steady (one used to have to call it after practically everything). ```; molecule ne2 {; 0 1; Ne 0 0 0; --; 0 1; Ne 2 0 0; }. set basis cc-pvdz; sapt_global = energy(""sapt2+(3)"", molecule=ne2). clean() # PSIO error without this line. # these two calls are equivalent; #cbs_string = energy(""mp2/6-311++G** + D:ccsd/6-311+G""); cbs_string = energy(cbs, corl_wfn='mp2', corl_basis='6-311++G**', delta_wfn='ccsd', delta_basis='6-311+G'); compare_values(-257.50097969, cbs_string, 5, 'cbs'); ```. On the caspt2, runs fine for me, too. If you want to see the error try [looking in the testing log file](http://psicode.org/psi4manual/master/build_planning.html#faq-testsoutput). But it's certainly outside the scope of this PR.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/949#issuecomment-379830469:414,energy,energy,414,https://psicode.org,https://github.com/psi4/psi4/pull/949#issuecomment-379830469,3,['energy'],['energy']
Energy Efficiency,"On the one hand, for cases like SAPT/auto-CP/etc, I'd be fine with just disabling `num_frozen_docc` -- it's clearly inappropriate in any supersystem calculation where the user knows at the `energy` call that it's going to run sub-systems. But going upthread back to the original issue, there's use-cases like `MBIS_VOLUME_RATIOS` that are an add-on to what would otherwise be a valid standalone calculation to use `num_frozen_docc` with (a monomer calc), and there's still the question of what should happen there. You can't just guess based on calc name, because you don't know if the user is going to call `oeprop` down-stream. Disabling `num_frozen_docc` for any calculation where this *could* happen would effectively ban the keyword. . A reasonableness check, or a good guess, could be inserted before any calculation done on a new mol if `num_frozen_docc` is set in the global scope -- with a warning. Or simply error out if a new mol is calculated without `num_frozen_docc` having been updated (not sure how reasonable that is?). . This is but one user's thoughts, of course.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2631#issuecomment-1212141916:190,energy,energy,190,https://psicode.org,https://github.com/psi4/psi4/issues/2631#issuecomment-1212141916,1,['energy'],['energy']
Energy Efficiency,"On the test suite error, it's a good idea to turn convergences way down (e.g., 10 or 12) to compute the reference values, then remove conv settings for the final test case and do the compare_values check to the number or fewer decimals than the default for the calc type (energy, gradient, etc.). You're checking the latter to 6, so probably better ref vals will do the trick.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1346#issuecomment-437675136:272,energy,energy,272,https://psicode.org,https://github.com/psi4/psi4/pull/1346#issuecomment-437675136,1,['energy'],['energy']
Energy Efficiency,"One feature I'd like to add (later) is the ability to do something like:. ```; my_new_method = { ""name"": ""my_func"", ... functional_dictionary ... }; my_superfunctional = add_functional_from_dictionary(my_new_method); energy(""my_func""); ```; That way one can fit dispersion parameters or benchmark functionals in a simple loop... However, I think it is a bit of work, so I'd prefer to leave that for later. The PR can be pulled in as is from my point of view.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/922#issuecomment-376409454:217,energy,energy,217,https://psicode.org,https://github.com/psi4/psi4/pull/922#issuecomment-376409454,1,['energy'],['energy']
Energy Efficiency,"One more tiny bug:; ```; molecule {; 0 2 ; H 0.0 0.0 0.000000; H 0.0 0.0 0.500000; H 0.0 0.0 1.000000; }. set basis STO-3G; set reference rohf; set ci_maxiter 100; set scf_type pk; set fail_on_maxiter false; set nat_orbs true; ci_e, ci_wfn=energy('fci', return_wfn=True). # Rerun to get true solution; set num_roots 3; set e_convergence 1e-10; set r_convergence 1e-8; energy('fci', ref_wfn=ci_wfn); ```; prints out; ```; $ psi4; (H0block_setup): Can't find CI block!; (H0block_setup): Can't find CI block!; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/588#issuecomment-275884420:240,energy,energy,240,https://psicode.org,https://github.com/psi4/psi4/pull/588#issuecomment-275884420,2,['energy'],['energy']
Energy Efficiency,"One more try... The two RASSCF tests fail because the energy is not invariant with respect to arbitrary rotations of active orbitals. I'll put an if statement that checks if a calculation type is RASSCF. The DFCASSCF test was affected by the new algorithm to compute CI natural orbitals. The new one does not scramble different orbital classes, which is what I suspect happened with the old code. All the entries in the `nov0` array are the same but are sorted differently.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/722#issuecomment-304748159:54,energy,energy,54,https://psicode.org,https://github.com/psi4/psi4/pull/722#issuecomment-304748159,1,['energy'],['energy']
Energy Efficiency,"One of our students has been working through the Psi4Education site and one of the labs requires the user to run MP4 on boron. If I'm reading the [managed method matrix](http://psicode.org/psi4manual/master/proc_py.html#table-managedmethods) correctly then the user should specify an ROHF reference and Psi4 will use DETCI. However we receive the following error:. Input file: [h2o_mp4.txt](https://github.com/psi4/psi4/files/148253/h2o_mp4.txt). ```; An error has occurred Py-side; Traceback:; <class 'p4xcpt.ManagedMethodError'>: select_mp4: Method 'mp4' with MP_TYPE 'CONV' and REFERENCE 'ROHF' not available: File ""<string>"", line 27, in <module>. File ""/Users/jturney/Code/Chemistry/psi4/source/share/python/driver.py"", line 586, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs). File ""/Users/jturney/Code/Chemistry/psi4/source/share/python/proc.py"", line 831, in select_mp4; raise ManagedMethodError(['select_mp4', name, 'MP_TYPE', mtd_type, reference, module]); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/282:738,energy,energy,738,https://psicode.org,https://github.com/psi4/psi4/issues/282,2,['energy'],['energy']
Energy Efficiency,"One of the [limitations](https://psicode.org/psi4manual/master/tdscf.html#known-limitations) of Psi's TDSCF implementation is that it raises an error upon requesting TDDFT triplets from a restricted reference. To understand the problem, it's easiest to work with a toy system. I'm choosing the following:; ```; molecule {; O; H 1 1.0 ; H 1 1.0 2 104.5; }. mtd = ""hf/sto-6g"". set tdscf_tda true; set reference uks ; set tdscf_states [0, 0, 2, 0]. energy(""td-"" + mtd). set reference rks ; set tdscf_states [0, 0, 1, 0]; energy(""td-"" + mtd). set tdscf_triplets only; energy(""td-"" + mtd); ```. Within the TDA approximation, we need to find the roots of a Hermitian matrix. This matrix has the structure J + V + X. J consists of _Coulomb integrals_, V consists of _the exchange correlation second derivative elements_, and X is everything else - it's not relevant for this problem. Because of the spin-properties of the Hamiltonian (and approximate DFT functionals), the matrix becomes block-diagonal upon transforming the basis states (i-a) α and (i-a) β into their normalized plus and minus combinations. The plus eigenvectors correspond to singlets, and the negative eigenvectors to triplets. Matrix elements take the form 1/2 * [(α|α) ± (α|β) ± (β|α) + (β|β)], where parentheses denote a spin-dependent matrix element. Upon exploiting spin-restriction, this reduces to [(α|α) ± (α|β)]. Now, J matrix elements are spinfree, i.e., the Coulomb integral (pq|pq) doesn't care whether the bra and the ket have the same spin-index or not, so long as p and q have the same spinindex. Therefore, the plus spin combination reduces to 2 * (pq|pq), and the minus spin combination reduces to 0. The V matrix elements are not spinfree. Whether you differentiate with respect to an alpha excitation twice or an alpha followed by a beta produces different integrals. The formula [(α|α) ± (α|β)] does not simplify. Unfortunately, Psi combines the V terms into the J terms. Psi currently computes the + case of the V ter",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2841:446,energy,energy,446,https://psicode.org,https://github.com/psi4/psi4/issues/2841,3,['energy'],['energy']
Energy Efficiency,"One reason ghosted masses may be nonzero is we didn't want the frame to change btwn a fully real dimer and its counterpoise variants? wouldn't be surprised if sapt relies on this. That brings to mind a question I had on the Hessian analysis of whether frame should be changing upon isotopic substitution. Center of charge frame would solve that but not a frame-change-upon-ghosting issue. Upshot is that some uses require ghost Z be zero (nuclear repulsion energy), some require ghost Z be atomic number (reading off element identity), some require ghost mass be zero (molecular mass), some require ghost mass be real (frame stability for dimer subsetting). So may as well provide a Mol function with a required argument to choose each case (like ACS & DGAS recently imposed for nuclear_repulsion_energy) to make sure consumers are aware of the differences and are using the right one. Python export can defuault to something sensible (hopefully the current behavior).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/909#issuecomment-363484400:315,charge,charge,315,https://psicode.org,https://github.com/psi4/psi4/issues/909#issuecomment-363484400,2,"['charge', 'energy']","['charge', 'energy']"
Energy Efficiency,"One smart feature would be to check whether the energy decreases when changing configurations. This could be a configurable setting in the solver. That is, when the Aufbau principle would lead to changing the configuration, the program should check whether the new occupations lead to a lower energy with the current orbitals than the old occupations with the same orbitals. Although this requires one additional energy evaluation, it probably saves quite a bit of iterations by preventing switches to less-good occupations.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/888#issuecomment-879347426:48,energy,energy,48,https://psicode.org,https://github.com/psi4/psi4/issues/888#issuecomment-879347426,3,['energy'],['energy']
Energy Efficiency,"One ugly way around this issue:. ```; set {; fail_on_maxiter false; maxiter 0; }. # Note: my_wfn.npy is a locally saved, previously written wfn file; e, wfn = energy('scf', return_wfn=True, restart_file='my_wfn') ; gradient('scf', ref_wfn=wfn); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2713#issuecomment-1240833143:159,energy,energy,159,https://psicode.org,https://github.com/psi4/psi4/issues/2713#issuecomment-1240833143,1,['energy'],['energy']
Energy Efficiency,"Oops, I missed your comment. The old `addBasis` still works the same way, and the normalization associated with it is appropriate for external basis functions derived from density fitting. In QM/MM we normally want some Gaussians at different points in space, and in this case we want unit normalization so that the charges, dipoles, etc. specified don't need to be adjusted. Essentially there are two use cases, and I just added a new one here. Not really a bug fix, but also harmless if we want it in 1.4 - entirely up to you. It gives us a backend that can be tested for the multipole interface at least :)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2069#issuecomment-771874219:316,charge,charges,316,https://psicode.org,https://github.com/psi4/psi4/pull/2069#issuecomment-771874219,1,['charge'],['charges']
Energy Efficiency,Optking's powers of alchemy are [known](https://github.com/psi4/psi4/issues/1082). Lori could say more about the specifics of how ECPs are causing trouble.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1114#issuecomment-409361281:10,power,powers,10,https://psicode.org,https://github.com/psi4/psi4/issues/1114#issuecomment-409361281,1,['power'],['powers']
Energy Efficiency,"Original report: http://forum.psicode.org/t/tdscf-calculation-for-large-system/2407. Contrary to the forum report I found no issue with B3LYP.; Only the combination of range-separated functionals and `mem_df` seems to give wrong results.; Note, for current PSI4 v1.5 the `wcombine` option is turned off https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/jk.cc#L111. H2O2 example:; ```; from psi4.driver.procrouting.response.scf_response import tdscf_excitations; mol = geometry(""""""; 0 1; O 0.000000000000 0.695000000000 -0.049338363732; O 0.000000000000 -0.695000000000 -0.049338363732; H -0.388142000000 0.895249000000 0.783035636268; H 0.388142000000 -0.895249000000 0.783035636268; symmetry c1; """"""); psi4.set_options({; 'basis':'def2-SVP',; 'scf_type':'mem_df',; 'save_jk': True,; 'tdscf_tda':True,; }); e, wfn = psi4.energy(""cam-b3lyp"", return_wfn=True, molecule=mol); res = tdscf_excitations(wfn, states=2,tda=True,r_convergence=2e-7); ```. [H2O2_memDF.txt](https://github.com/psi4/psi4/files/8027476/H2O2_memDF.txt); [H2O2_PK.txt](https://github.com/psi4/psi4/files/8027475/H2O2_PK.txt); [H2O2_diskDF.txt](https://github.com/psi4/psi4/files/8027477/H2O2_diskDF.txt). ---. QCHEM results; ```; Excited state 1: excitation energy (eV) = 6.5611; Excited state 2: excitation energy (eV) = 6.7734; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2431:834,energy,energy,834,https://psicode.org,https://github.com/psi4/psi4/issues/2431,3,['energy'],['energy']
Energy Efficiency,"P.S. The following two similar inputs do work, but correspond to different calculations, I assume:. ```; molecule {; H; }. set {; scf_type pk; basis ano-rcc; basis_relativistic ano-rcc; relativistic x2c; reference uhf; }. energy('hf'); ```. and . ```; molecule {; H; }. set {; scf_type pk; basis ano-rcc; reference uhf; }. energy('hf'); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1613#issuecomment-487622646:222,energy,energy,222,https://psicode.org,https://github.com/psi4/psi4/issues/1613#issuecomment-487622646,2,['energy'],['energy']
Energy Efficiency,"P2.5 Total Energy (a.u.) : -75.79072957315965; ======================================================================= . ======================================================================= ; ================ DF-OMP2.5 FINAL RESULTS ============================== ; ======================================================================= ; Nuclear Repulsion Energy (a.u.) : 9.18738645758982; DF-HF Energy (a.u.) : -75.63188585944289; REF Energy (a.u.) : -75.63118855740093; DF-OMP2.5 Correlation Energy (a.u.): -0.15884371245450; Edfomp2.5 - Eref (a.u.) : -0.15954101449645; DF-OMP2.5 Total Energy (a.u.) : -75.79072957189739; ======================================================================= ; ```. The Lagrangian energy and the final energy now agree perfectly, despite only a tiny change in the Lagrangian energy. However, the key is to note that the lines; ```; 	Orbitals are optimized now.; 	Transforming MOs to the semicanonical basis... ; Switching to the standard DF-MP2 computation... ; ```; are present in the reference output file but not in the output file that I posted. This is due to the if clause [here](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dfocc/manager.cc#L2648), which requires `std::fabs(DE) >= tol_Eod`, i.e., that the observed delta E is _greater than_ the user-specified convergence criteria. This situation is precisely what the fix to #1143 no longer allows for, so I must conclude that the code in that if suite is what is responsible for the discrepancy. It looks like this code in this if suite is re-computing the energy using the orbitals and T-amplitudes computed during the Lagrangian optimization. Hence the discrepancy is that when the user's energy convergence criteria isn't met, the Lagrangian information was overwritten with the orbital-and-amplitude formalism. Is this correct? Why does this code only run if the user's energy convergence criteria isn't met? Shouldn't we warn the user that these kinds of discrepancies are possible?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1509:3965,energy,energy,3965,https://psicode.org,https://github.com/psi4/psi4/issues/1509,3,['energy'],['energy']
Energy Efficiency,"P; }. molecule {; 0 1; C -4.203390 -0.066910 -0.001310; C -4.193940 -1.465920 -0.000650; C -2.996540 0.640780 -0.000920; C -1.780230 -0.050540 0.000130; C -1.770780 -1.449550 0.000790; C -2.977630 -2.157240 0.000400; H -2.970320 -3.239550 0.000910; H -0.829810 -1.984370 0.001610; H -5.127590 -2.013410 -0.000960; H -5.144360 0.467920 -0.002130; H -0.846580 0.496950 0.000440; H -3.003850 1.723100 -0.001430; }. nrg, wfn = optimize('B3LYP', return_wfn=True); ```. top of output file for psi4 version (I'm using psi4 in WSL, reinstalled today by running the commands on http://www.psicode.org/downloads.html):; ```; Psi4 1.3.2 release. Git: Rev {HEAD} ecbda83 ; ```. towards the end of the output:; ```; ==> Convergence Check <==. Measures of convergence in internal coordinates in au.; Criteria marked as inactive (o), active & met (*), and active & unmet ( ).; ---------------------------------------------------------------------------------------------; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ; ---------------------------------------------------------------------------------------------; Convergence Criteria 1.00e-06 * 3.00e-04 * o 1.20e-03 * o; ---------------------------------------------------------------------------------------------; 2 -232.08477729 -4.57e-04 2.31e-04 * 9.07e-05 o 6.20e-04 * 2.31e-04 o ~; ---------------------------------------------------------------------------------------------. **** Optimization is complete! (in 2 steps) ****. ==> Optimization Summary <==. Measures of convergence in internal coordinates in au.; --------------------------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------------------------- ~; 1 -232.084319861329 -232.084319861329 0.00763634 0.00254450 0.02132377 0.00710535 ~; 2 -232.084777290884 -0.000457429555 0.00023",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1947:1158,Energy,Energy,1158,https://psicode.org,https://github.com/psi4/psi4/issues/1947,1,['Energy'],['Energy']
Energy Efficiency,"PBEh-3c passes the wrong energy into Optking or Findif, sometimes, for some molecules. It happens for O2(s) but not for C3H8. See the O2(s) log posted here:. [O2 logfile](https://github.com/psi4/psi4/files/2573213/o2.txt). As @hokru pointed out, it's the D3 dispersion energy of O2 that gets forwarded instead of the total energy, the most likely culprit (as identified by @andysim) is here:. https://github.com/psi4/psi4/blob/8cb0765c2735b0735fc3468d210d258de476a72b/psi4/driver/qcdb/intf_dftd3/runner.py#L88",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1356:25,energy,energy,25,https://psicode.org,https://github.com/psi4/psi4/issues/1356,3,['energy'],['energy']
Energy Efficiency,PBEh-3c: wrong energy passed into findif/gradient,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1356:15,energy,energy,15,https://psicode.org,https://github.com/psi4/psi4/issues/1356,1,['energy'],['energy']
Energy Efficiency,"PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Internal code has been replaced by an external Python module, QCManyBody; - [x] Several n-body efficiency improvements and a new option `supersystem_ie_only` that computes the IE rather than MBE, useful for trimers and larger.; - [x] bug fix for gradient or Hessian vmfc for max_nbody >=3. ## Dev notes & details; * Unrelated; - [x] updated basis_set_exchange to v0.10 and probably fixed the internal build; - [x] switched internal build of optking to a tag that can work with py312; - [x] qcvar `GEOMETRY ITERATIONS` wasn't actually getting set. `OPTIMIZATION ITERATIONS` is actually listed in the docs glossary, so switched to that and set it.; - [x] added `resp` to the codedeps now that it's on c-f, and thus to the ecosystem testing; - [x] fixed previously excused docs links to qcfractal; - [x] added back dftd4 to ecosystem for py312; * QCManyBody: build; - [x] Adds a new pure-python required dependency, `qcmanybody`, available from c-f or pypi; * QCManyBody: BSSE efficiency improvements/bug fixes; - [x] `bsse_type=cp` + `return_total_data=True` (not default for energy) will now no longer do every species in both supersystem (for cp) and natural (for uncp) basis sets. It will do everything in the supersystem basis (since cp requested) and only monomers in the monomer basis (for rtd=T).; - [x] `driver=g/h` + `return_total_data=False`, an unlikely combination, won't just fail with syntax error; - [x] `bsse_type=vmfc` + `driver=g/h + `max_nbody`>2 are now computed correctly. Previously (at least since v1.6), only the two highest-body terms were getting summed into the contribution, so values were wrong for trimers and above (assuming max_nbody=fragment count).; - [x] `bsse_type=vmfc` + multilevel were running unnecessary calculations, so now more efficient; * QCManyBody output; - [x] the internal driver_nbody code had been setting a lot of terse qcvariables like ""2"", ""3CP"", ""GRADIENT 1"". ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3160:1521,energy,energy,1521,https://psicode.org,https://github.com/psi4/psi4/pull/3160,1,['energy'],['energy']
Energy Efficiency,PSIO_ERROR during fnocc energy calculation,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/34:24,energy,energy,24,https://psicode.org,https://github.com/psi4/psi4/issues/34,1,['energy'],['energy']
Energy Efficiency,"Pair energies computed by `fnocc` have some issues:. 1. They're not computed consistently across methods. DF-CCSD has them, but non-DF methods do not, for some reason.; 2. `fnocc` computes spin-summed pair energies. The convention we agreed upon at the conference call was to separate same-spin and opposite-spin pair energies.; 3. `fnocc` stores the pair energies with the convention that \sum_{ij} e_ij should equal the correlation energy. As agreed upon at the conference call, we want e_ij to be the total energy of the (i, j) pair. If i != j, the current convention is off by a factor of 2.; 4. The `fnocc` pair energies do not include the delta MP2 correction, so \sum_{ij} e_ij does not equal the correlation energy if FNOs are used. I'll be the one to deal with at least the three items on this list, but obligatory @edeprince3 ping.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2560:434,energy,energy,434,https://psicode.org,https://github.com/psi4/psi4/issues/2560,3,['energy'],['energy']
Energy Efficiency,"Pardon my asking and not looking at the code and `timer.dat`s, but right now we always calc the ind-exch(s^2) and disp-exch(s^2) and optionally the (s^inf) variants if requested by `DO_IND_EXCH_SINF` and/or `DO_DISP_EXCH_SINF`, right?. This arrangement is great for probing the terms, but does it make sense to define a route whereby the s^2 terms are skipped, the s^inf terms computed instead and `energy(sapt0)` returns the inf totals?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1490#issuecomment-458285252:399,energy,energy,399,https://psicode.org,https://github.com/psi4/psi4/pull/1490#issuecomment-458285252,1,['energy'],['energy']
Energy Efficiency,Passed 1.04 sec; Start 410: skeletonsointegrals; 379/411 Test #220: mints-helper ..................... Passed 1.15 sec; Start 387: python-energy; 380/411 Test #222: mints10 .......................... Passed 1.24 sec; Start 378: mints12; 381/411 Test #309: pywrap-molecule .................. Passed 1.14 sec; Start 383: psi4numpy-rhf-gradient; 382/411 Test #404: json-schema-1-properties ......... Passed 1.17 sec; Start 353: tu1-h2o-energy; 383/411 Test #190: fci-coverage ..................... Passed 1.91 sec; Start 214: mints3; 384/411 Test #410: skeletonsointegrals .............. Passed 0.90 sec; Start 349: sapt-sf1; 385/411 Test #406: skeletonaointegrals .............. Passed 0.93 sec; Start 396: python-memdfjk; 386/411 Test #387: python-energy .................... Passed 0.72 sec; Start 352: stability2; 387/411 Test #378: mints12 .......................... Passed 1.15 sec; Start 188: fci-tdm; 388/411 Test #396: python-memdfjk ................... Passed 0.88 sec; Start 354: tu2-ch2-energy; 389/411 Test #214: mints3 ........................... Passed 0.99 sec; Start 382: psi4numpy-rhf; 390/411 Test #383: psi4numpy-rhf-gradient ........... Passed 1.07 sec; Start 308: pywrap-db3; 391/411 Test #349: sapt-sf1 ......................... Passed 1.10 sec; Start 334: scf3; 392/411 Test #353: tu1-h2o-energy ................... Passed 1.26 sec; Start 209: mcscf1; 393/411 Test #352: stability2 ....................... Passed 1.16 sec; Start 211: mcscf3; 394/411 Test #188: fci-tdm .......................... Passed 0.77 sec; Start 409: skeletonscf; 395/411 Test #308: pywrap-db3 ....................... Passed 0.70 sec; Start 175: docs-dft; 396/411 Test #382: psi4numpy-rhf .................... Passed 0.83 sec; Start 174: docs-bases; 397/411 Test #354: tu2-ch2-energy ................... Passed 0.86 sec; Start 216: mints5; 398/411 Test #334: scf3 ............................. Passed 0.73 sec; Start 208: matrix1; 399/411 Test #209: mcscf1 ........................... Passed 0.69 sec; Star,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1078#issuecomment-408900195:36351,energy,energy,36351,https://psicode.org,https://github.com/psi4/psi4/pull/1078#issuecomment-408900195,1,['energy'],['energy']
Energy Efficiency,Passed 2.37 sec; Start 104: decontract; 367/413 Test #354: stability2 ....................... Passed 1.07 sec; Start 290: psimrcc-ccsd_t-2; 368/413 Test #382: psi4numpy-cphf ................... Passed 1.29 sec; Start 190: fci-tdm; 369/413 Test #123: dfccdl1 .......................... Passed 1.45 sec; Start 223: mints9; 370/413 Test #358: scf-response1 .................... Passed 2.27 sec; Start 384: psi4numpy-rhf; 371/413 Test #120: dfcasscf-fzc-sp .................. Passed 1.74 sec; Start 355: tu1-h2o-energy; 372/413 Test #224: mints10 .......................... Passed 1.32 sec; Start 347: dfep2-2; 373/413 Test #291: psimrcc-ccsd_t-3 ................. Passed 1.56 sec; Start 330: scf-upcast-custom-basis; 374/413 Test #190: fci-tdm .......................... Passed 0.85 sec; Start 351: sapt-sf1; 375/413 Test #313: rasci-h2o ........................ Passed 1.13 sec; Start 222: mints-helper; 376/413 Test #132: dfmp2-2 .......................... Passed 1.70 sec; Start 356: tu2-ch2-energy; 377/413 Test #329: scf-guess-read1 .................. Passed 1.55 sec; Start 8: castup1; 378/413 Test #289: psimrcc-ccsd_t-1 ................. Passed 1.46 sec; Start 332: scf-bs; 379/413 Test #384: psi4numpy-rhf .................... Passed 0.97 sec; Start 216: mints3; 380/413 Test #380: mints12 .......................... Passed 1.30 sec; Start 336: scf3; 381/413 Test #104: decontract ....................... Passed 1.30 sec; Start 300: pubchem2; 382/413 Test #355: tu1-h2o-energy ................... Passed 1.26 sec; Start 212: mcscf2; 383/413 Test #290: psimrcc-ccsd_t-2 ................. Passed 1.63 sec; Start 213: mcscf3; 384/413 Test #356: tu2-ch2-energy ................... Passed 0.86 sec; Start 218: mints5; 385/413 Test #330: scf-upcast-custom-basis .......... Passed 1.54 sec; Start 241: numpy-array-interface; 386/413 Test #351: sapt-sf1 ......................... Passed 1.06 sec; Start 217: mints4; 387/413 Test #222: mints-helper ..................... Passed 1.14 sec; Start 366: optio,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1264#issuecomment-425525678:35433,energy,energy,35433,https://psicode.org,https://github.com/psi4/psi4/pull/1264#issuecomment-425525678,1,['energy'],['energy']
Energy Efficiency,Passed 339.46 sec; Start 183: fsapt-allterms; 22/413 Test #229: mp2-def2 ......................... Passed 401.24 sec; Start 195: fd-freq-energy-large; 23/413 Test #13: cbs-xtpl-alpha ................... Passed 339.68 sec; Start 197: fd-freq-gradient-large; 24/413 Test #59: cc41 ............................. Passed 137.70 sec; Start 280: opt13; 25/413 Test #45: cc29 ............................. Passed 218.43 sec; Start 375: dft-custom-mgga; 26/413 Test #61: cc43 ............................. Passed 139.20 sec; Start 71: cc52; 27/413 Test #46: cc3 .............................. Passed 1535.28 sec; Start 28: cc13c; 28/413 Test #184: isapt1 ........................... Passed 416.48 sec; Start 283: opt-irc-2; 29/413 Test #114: dcft6 ............................ Passed 212.86 sec; Start 361: tu6-cp-ne2; 30/413 Test #306: pywrap-checkrun-rhf .............. Passed 1024.50 sec; Start 98: cisd-opt-fd; 31/413 Test #307: pywrap-checkrun-rohf ............. Passed 516.10 sec; Start 322: sapt6; 32/413 Test #11: cbs-delta-energy ................. Passed 271.51 sec; Start 92: cepa-module; 33/413 Test #112: dcft4 ............................ Passed 1638.41 sec; Start 263: omp3-5; 34/413 Test #28: cc13c ............................ Passed 116.00 sec; Start 388: cookbook-rohf-orb-rot; 35/413 Test #308: pywrap-checkrun-uhf .............. Passed 885.27 sec; Start 106: dcft-grad2; 36/413 Test #71: cc52 ............................. Passed 147.28 sec; Start 160: dfscf-bz2; 37/413 Test #375: dft-custom-mgga .................. Passed 190.68 sec; Start 262: omp3-4; 38/413 Test #283: opt-irc-2 ........................ Passed 158.88 sec; Start 27: cc13b; 39/413 Test #263: omp3-5 ........................... Passed 76.35 sec; Start 261: omp3-3; 40/413 Test #92: cepa-module ...................... Passed 99.34 sec; Start 146: dfomp2-grad2; 41/413 Test #98: cisd-opt-fd ...................... Passed 156.92 sec; Start 31: cc15; 42/413 Test #106: dcft-grad2 ....................... Passed 99.47 sec; Sta,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1239#issuecomment-425082026:3358,energy,energy,3358,https://psicode.org,https://github.com/psi4/psi4/pull/1239#issuecomment-425082026,1,['energy'],['energy']
Energy Efficiency,Passed 571.32 sec; Start 42: cc27; 14/411 Test #394: python-vibanalysis ............... Passed 966.42 sec; Start 76: cc7; 15/411 Test #40: cc25 ............................. Passed 480.63 sec; Start 18: cbs-xtpl-func; 16/411 Test #36: cc21 ............................. Passed 484.30 sec; Start 181: fsapt-allterms; 17/411 Test #38: cc23 ............................. Passed 495.58 sec; Start 193: fd-freq-energy-large; 18/411 Test #42: cc27 ............................. Passed 441.98 sec; Start 195: fd-freq-gradient-large; 19/411 Test #76: cc7 .............................. Passed 452.44 sec; Start 278: opt13; 20/411 Test #305: pywrap-checkrun-rohf ............. Passed 627.45 sec; Start 111: dcft5; 21/411 Test #110: dcft4 ............................ Passed 890.57 sec; Start 145: dfomp2-grad3; 22/411 Test #195: fd-freq-gradient-large ........... Passed 305.38 sec; Start 240: ocepa-freq1; 23/411 Test #111: dcft5 ............................ Passed 303.53 sec; Start 373: dft-custom-mgga; 24/411 Test #193: fd-freq-energy-large ............. Passed 541.73 sec; Start 112: dcft6; 25/411 Test #373: dft-custom-mgga .................. Passed 188.78 sec; Start 114: dcft8; 26/411 Test #181: fsapt-allterms ................... Passed 611.68 sec; Start 359: tu6-cp-ne2; 27/411 Test #178: fsapt1 ........................... Passed 2082.73 sec; Start 29: cc14; 28/411 Test #112: dcft6 ............................ Passed 211.14 sec; Start 320: sapt6; 29/411 Test #240: ocepa-freq1 ...................... Passed 484.94 sec; Start 155: dfscf-bz2; 30/411 Test #278: opt13 ............................ Passed 786.51 sec; Start 97: cisd-opt-fd; 31/411 Test #145: dfomp2-grad3 ..................... Passed 797.94 sec; Start 183: isapt2; 32/411 Test #320: sapt6 ............................ Passed 170.76 sec; Start 379: cc-module; 33/411 Test #155: dfscf-bz2 ........................ Passed 133.50 sec; Start 13: cbs-xtpl-alpha; 34/411 Test #359: tu6-cp-ne2 ....................... Passed 352.85 sec; Star,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1077#issuecomment-409911901:2480,energy,energy-large,2480,https://psicode.org,https://github.com/psi4/psi4/pull/1077#issuecomment-409911901,1,['energy'],['energy-large']
Energy Efficiency,Passed 8.00 sec; Start 200: freq-isotope2; 260/413 Test #99: cisd-sp .......................... Passed 7.83 sec; Start 390: python-curve; 261/413 Test #374: dft-custom-hybrid ................ Passed 9.30 sec; Start 401: json-schema-1-energy; 262/413 Test #134: dfmp2-4 .......................... Passed 5.04 sec; Start 399: json-v11-energy; 263/413 Test #270: opt2-fd .......................... Passed 8.68 sec; Start 143: dfomp2-3; 264/413 Test #89: cepa2 ............................ Passed 3.44 sec; Start 15: cbs-xtpl-freq; 265/413 Test #343: soscf-ref ........................ Passed 5.84 sec; Start 182: fsapt-terms; 266/413 Test #337: scf4 ............................. Passed 7.11 sec; Start 125: dfccsd1; 267/413 Test #390: python-curve ..................... Passed 2.27 sec; Start 372: scf-coverage; 268/413 Test #3: casscf-fzc-sp .................... Passed 4.38 sec; Start 137: dfmp2-grad2; 269/413 Test #297: psithon1 ......................... Passed 4.83 sec; Start 187: fci-h2o; 270/413 Test #401: json-schema-1-energy ............. Passed 2.54 sec; Start 4: casscf-semi; 271/413 Test #399: json-v11-energy .................. Passed 2.20 sec; Start 257: omp2p5-grad1; 272/413 Test #200: freq-isotope2 .................... Passed 4.35 sec; Start 87: cepa0-grad2; 273/413 Test #143: dfomp2-3 ......................... Passed 4.36 sec; Start 186: fci-dipole; 274/413 Test #163: dft-ghost ........................ Passed 8.01 sec; Start 393: python-mints2; 275/413 Test #9: castup2 .......................... Passed 7.47 sec; Start 264: omp3-grad1; 276/413 Test #369: scf-hess1 ........................ Passed 8.45 sec; Start 331: scf-guess-read2; 277/413 Test #125: dfccsd1 .......................... Passed 5.83 sec; Start 253: omp2-grad1; 278/413 Test #372: scf-coverage ..................... Passed 6.09 sec; Start 267: opt1; 279/413 Test #393: python-mints2 .................... Passed 2.54 sec; Start 387: psi4numpy-fci; 280/413 Test #182: fsapt-terms ...................... Passed 7.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1264#issuecomment-425525678:25315,energy,energy,25315,https://psicode.org,https://github.com/psi4/psi4/pull/1264#issuecomment-425525678,1,['energy'],['energy']
Energy Efficiency,Passed 9.61 sec; Start 211: mcscf2; 361/412 Test #290: psimrcc-ccsd_t-3 ................. Passed 3.94 sec; Start 363: x2c3; 362/412 Test #225: molden2 .......................... Passed 14.23 sec; Start 355: tu2-ch2-energy; 363/412 Test #409: skeletonmointegrals .............. Passed 3.09 sec; Start 222: mints9; 364/412 Test #97: cisd-h2o-clpse ................... Passed 3.65 sec; Start 223: mints10; 365/412 Test #289: psimrcc-ccsd_t-2 ................. Passed 3.79 sec; Start 411: skeletonsointegrals; 366/412 Test #382: psi4numpy-dfmp2 .................. Passed 2.36 sec; Start 396: python-mints13; 367/412 Test #189: fci-tdm .......................... Passed 2.50 sec; Start 221: mints-helper; 368/412 Test #391: python-mints9 .................... Passed 1.96 sec; Start 384: psi4numpy-rhf-gradient; 369/412 Test #362: x2c2 ............................. Passed 3.13 sec; Start 354: tu1-h2o-energy; 370/412 Test #331: scf-bs ........................... Passed 2.33 sec; Start 103: decontract; 371/412 Test #355: tu2-ch2-energy ................... Passed 1.51 sec; Start 288: psimrcc-ccsd_t-1; 372/412 Test #353: stability2 ....................... Passed 2.45 sec; Start 381: psi4numpy-cphf; 373/412 Test #224: molden1 .......................... Passed 14.30 sec; Start 405: json-schema-1-properties; 374/412 Test #222: mints9 ........................... Passed 1.97 sec; Start 401: json-schema-1-ghost; 375/412 Test #211: mcscf2 ........................... Passed 2.51 sec; Start 397: python-memdfjk; 376/412 Test #411: skeletonsointegrals .............. Passed 1.93 sec; Start 299: pubchem2; 377/412 Test #384: psi4numpy-rhf-gradient ........... Passed 1.52 sec; Start 388: python-energy; 378/412 Test #221: mints-helper ..................... Passed 1.67 sec; Start 399: json-v11-gradient; 379/412 Test #223: mints10 .......................... Passed 2.18 sec; Start 335: scf3; 380/412 Test #396: python-mints13 ................... Passed 1.96 sec; Start 212: mcscf3; 381/412 Test #363: x2c3 ..,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1221#issuecomment-419096646:34911,energy,energy,34911,https://psicode.org,https://github.com/psi4/psi4/pull/1221#issuecomment-419096646,1,['energy'],['energy']
Energy Efficiency,"People at the forum have kindly supplied Turbomole and G\* values for further comparison. They are encoded into the test case below, which passes using this PR branch (that reenables b3lyp5 with `VWN5_C`). The open-shell b3lyp5 in psi4 matches turbochem rather better than nwchem. ```; set scf_type pk; set e_convergence 9; set basis aug-cc-pvdz; set dft_spherical_points 590; set dft_radial_points 99. molecule cswater {; 0 1; O -1.551007 -0.114520 0.000000; H -1.934259 0.762503 0.000000; H -0.599677 0.040712 0.000000; }. oswater = cswater.clone(); oswater.set_multiplicity(2); oswater.set_molecular_charge(1). e = energy('b3lyp', molecule=cswater); compare_values(-76.444577160243, e, 5, 'clsd-shell: b3lyp (vwn3rpa) vs NWChem (vwn_1_rpa; default)'). set reference uhf; e = energy('b3lyp', molecule=oswater); compare_values(-75.974154693676, e, 5, 'open-shell: b3lyp (vwn3rpa) vs NWChem (vwn_1_rpa; default)'); compare_values(-75.97415476252, e, 5, 'open-shell: b3lyp (vwn3rpa) vs Turbomole (vwn3)'); compare_values(-75.9741544303, e, 5, 'open-shell: b3lyp (vwn3rpa) vs Gaussian (default)'). set reference rks; e = energy('b3lyp5', molecule=cswater); compare_values(-76.407526614389, e, 5, 'clsd-shell: b3lyp5 (vwn5) vs NWChem (vwn_3)'). set reference uks; e = energy('b3lyp5', molecule=oswater); compare_values(-75.940741067166, e, 4, 'open-shell: b3lyp5 (vwn5) vs NWChem (vwn_3)'); compare_values(-75.94075271487, e, 5, 'open-shell: b3lyp5 (vwn5) vs Turbomole (vwn5; default)'); # this one doesn't match quite so well; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/339#issuecomment-209503911:618,energy,energy,618,https://psicode.org,https://github.com/psi4/psi4/pull/339#issuecomment-209503911,4,['energy'],['energy']
Energy Efficiency,"Please guys, I am still battling with how I can generate potential energy curves for the CF molecule for at 5 excited states. Here's the code I am trying to debug it's error.; import numpy as np; import matplotlib.pyplot as plt; import psi4. def compute_energy(bond_length):; molecule = psi4.geometry(f""""""; 0 2; C 0.000000000 0.000000000 0.000000000; F 0.000000000 0.000000000 {bond_length:.6f}; """"""). psi4.set_options({; 'basis': 'cc-pVTZ',; 'reference': 'rohf',; 'maxiter': 500,; 'restricted_docc': [1, 0, 1, 0],; 'active': [3, 1, 2, 2],; 'mcscf_max_iter': 1000,; 'num_roots': 1,; 'avg_states': [0],; 'avg_weights': [1],; 'e_convergence': 1e-8,; 'd_convergence': 1e-8,; 'guess': 'sad'; }). try:; energy = psi4.energy('scf'); return energy; except Exception as e:; print(f""Error computing ground state energy at bond length {bond_length}: {str(e)}""); return float('nan'). def compute_energies(bond_length, num_states, methods_to_try):; psi4.core.set_output_file('output.dat', False); ; cf_molecule = psi4.geometry(f""""""; 0 2; C; F 1 {bond_length}; symmetry c1; units angstrom; """"""). psi4.set_options({; 'basis': 'cc-pvtz',; 'reference': 'uhf',; 'scf_type': 'pk',; 'e_convergence': 1e-8,; 'd_convergence': 1e-8,; 'maxiter': 500,; }). energies = {method: {state: [] for state in range(1, num_states + 1)} for method in methods_to_try}; wfns = {method: {state: [] for state in range(1, num_states + 1)} for method in methods_to_try}. try:; scf_e, scf_wfn = psi4.energy('scf', return_wfn=True). for method in methods_to_try:; psi4.set_options({f'{method.lower()}__nroots': num_states}); energy, wfn = psi4.energy(method, return_wfn=True); for state in range(1, num_states + 1):; if energy is not None: # Check if energy calculation was successful; energies[method][state].append(energy[state - 1]); wfns[method][state].append(wfn[state - 1]); else:; energies[method][state].append(float('nan')); wfns[method][state].append(None). except Exception as e:; print(f""Error computing energies at bond length {bo",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181#issuecomment-2172329824:67,energy,energy,67,https://psicode.org,https://github.com/psi4/psi4/issues/3181#issuecomment-2172329824,5,['energy'],['energy']
Energy Efficiency,"Please include either the full input, or a reduced test case.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2870#issuecomment-1411969749:43,reduce,reduced,43,https://psicode.org,https://github.com/psi4/psi4/issues/2870#issuecomment-1411969749,1,['reduce'],['reduced']
Energy Efficiency,Please note that `libdiis` did not exist when the DIIS code was written in the `cc` modules. Convergence difficulties in `cclambda` are not due to DIIS difficulties but due to the fact that linear equations become poorly conditioned for excited states that are relatively close in energy.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2519#issuecomment-1089612589:281,energy,energy,281,https://psicode.org,https://github.com/psi4/psi4/issues/2519#issuecomment-1089612589,1,['energy'],['energy']
Energy Efficiency,"Please try the latest 1.4 release. 61K is the size of the aux basis, 12k basis functions in the orbital basis.; It is still a huge(!) calculation and PSI4 is not optimised to deal with that.; Usually negligible matrices can become large enough that our memory estimates are off.; Maybe the memory of your machine ran out. The aux basis can probably be reduced by 20K functions without loss in accuracy with some smart manipulations of the aux basis.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2288#issuecomment-911433216:352,reduce,reduced,352,https://psicode.org,https://github.com/psi4/psi4/issues/2288#issuecomment-911433216,1,['reduce'],['reduced']
Energy Efficiency,"Possibly the following could (also) be due to my misunderstanding of how the input is supposed to work. My apologies if that is the case. In the following example, the perturbation with the external field seems to be ignored:. ```; molecule {; 0 1; He 0.0 0.0 0.0; symmetry c1 # field breaks symmetry; }. set {; reference rhf; basis aug-cc-pvtz; relativistic x2c; perturb_h true; perturb_with dipole; perturb_dipole [0.0, 0.0, 0.1]; }. energy('scf'); ```. I've attached a series of examples, with non-relativistic, dkh and x2c calculations on a dummy test case: [reltest.zip](https://github.com/psi4/psi4/files/3884841/reltest.zip). ```; grep ""Total Energy ="" *.out; dkh_0.out: Total Energy = -2.8613053380694344; dkh_p.out: Total Energy = -2.8679760471040372; nrl_0.out: Total Energy = -2.8612063084748343; nrl_p.out: Total Energy = -2.8678772073375063; x2c_0.out: Total Energy = -2.8613053511779820; x2c_p.out: Total Energy = -2.8613053511779745; ```. The suffix `_0` and `_p` stand for ""no field"" and ""dipolar field"" respectively.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1758:436,energy,energy,436,https://psicode.org,https://github.com/psi4/psi4/issues/1758,8,"['Energy', 'energy']","['Energy', 'energy']"
Energy Efficiency,"Posting Dom's very nice summary for easier perusal and searchability. Effective `scf_type df` Testing: `mem_df` & `disk_df`; =====================================================. All tests listed below examine calls to both `energy()` and `gradient()` when; employing the `scf_type mem_df` and `scf_type disk_df` settings. Each test; employs a different model chemistry (indicated in the test description) and the; Physicists' water molecule, unless otherwise indicated. 1. Physicists' water, HF/6-31G; - **TEST FAILED**; - Error message:; ```; Traceback (most recent call last):; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; exec(content); File ""<string>"", line 30, in <module>; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 444, in energy; return driver_cbs._cbs_gufunc(energy, name, ptype='energy', **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver_cbs.py"", line 1818, in _cbs_gufunc; ptype_value, wfn = func(method_name, return_wfn=True, molecule=molecule, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 2038, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1363, in scf_helper; e_scf = scf_wfn.compute_energy(); ; RuntimeError:; Fatal Error: DFHelper (MemDFJK): cannot do cartesian auxiliary functions; Error occurred in file: /Users/dasirianni/Gits/psi4/psi4/src/psi4/libfock/MemDFJK.cc on line: 89; The most recent 5 function calls were:; ```; 2. HF/cc-pVDZ: Passed; 3. AO DF",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1021#issuecomment-388980081:226,energy,energy,226,https://psicode.org,https://github.com/psi4/psi4/issues/1021#issuecomment-388980081,4,['energy'],['energy']
Energy Efficiency,Potential Energy Curves of the CF molecule,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181:10,Energy,Energy,10,https://psicode.org,https://github.com/psi4/psi4/issues/3181,1,['Energy'],['Energy']
Energy Efficiency,"Previously, the following input file would have ran a combination of DFJK and DiskJK calculations. Now it seems to run DiskJK calculations twice. ```; molecule acetone {; 0 1; H 0.000000 2.136732 -0.112445; H 0.000000 -2.136732 -0.112445; H -0.881334 1.333733 -1.443842; H 0.881334 -1.333733 -1.443842; H -0.881334 -1.333733 -1.443842; H 0.881334 1.333733 -1.443842; C 0.000000 0.000000 0.000000; C 0.000000 1.287253 -0.795902; C 0.000000 -1.287253 -0.795902; O 0.000000 0.000000 1.227600; units angstrom; }. set globals {; df_scf_guess true; scf_type PK; basis 3-21g; docc [8, 1, 2, 5]; guess GWH; reference RHF; e_convergence 12; }. energy('scf'); ```. ```; ==> Primary Basis <==. Basis Set: 3-21G; Number of shells: 32; Number of basis function: 48; Number of Cartesian functions: 48; Spherical Harmonics?: false; Max angular momentum: 1. ==> Pre-Iterations <==. -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A1 21 21 8 8 8 0; A2 4 4 1 1 1 0; B1 8 8 2 2 2 0; B2 15 15 5 5 5 0; -------------------------------------------------------; Total 48 48 16 16 16 0; -------------------------------------------------------. ==> Integral Setup <==. Batch 1 pq = [ 0, 397] index = [ 0,79003]; ==> DiskJK: Disk-Based J/K Matrices <==. J tasked: Yes; K tasked: Yes; wK tasked: No; Memory (MB): 715; Schwarz Cutoff: 1E-12. Minimum eigenvalue in the overlap matrix is 1.5083126009E-02.; Using Symmetric Orthogonalization.; SCF Guess: Generalized Wolfsberg-Helmholtz. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @RHF iter 1: -187.27391666424671 -1.87274e+02 1.12539e-01; @RHF iter 2: -180.35110679174790 6.92281e+00 1.03058e-01 DIIS; @RHF iter 3: -189.00974758567247 -8.65864e+00 7.17009e-02 DIIS; @RHF iter 4: -190.36715264104453 -1.35741e+00 3.48777e-02 DIIS; @RHF iter 5: -190.83292951413978 -4.65777e-01 9.44992e-03 DIIS; @RHF iter 6: -190.87826214635624 -4.53326e-02 3.45136e-03 DIIS; @RHF i",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/281:635,energy,energy,635,https://psicode.org,https://github.com/psi4/psi4/issues/281,1,['energy'],['energy']
Energy Efficiency,"Previously, this was returning the last computed energy. Now, it returns the energy of the last IRC point. This should fix the test cases, which were failing on some systems.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/292:49,energy,energy,49,https://psicode.org,https://github.com/psi4/psi4/pull/292,2,['energy'],['energy']
Energy Efficiency,"Proline energy: -400.01014403056064 Hartrees, time taken: 8.192189529000018 seconds.; Serine energy: -397.9050930788871 Hartrees, time taken: 6.108175248000009 seconds.; Threonine energy: -437.0635748952652 Hartrees, time taken: 8.374118565999936 seconds.; Tryptophan energy: -684.4098345276545 Hartrees, time taken: 37.255489416000046 seconds.; Tyrosine energy: -628.2533259038854 Hartrees, time taken: 25.399482511999963 seconds.; Valine energy: -401.1991694876506 Hartrees, time taken: 10.574376873999995 seconds.; ```. ## Summit stdout:; ```; Alanine energy: -322.83024417229103 Hartrees, time taken: 68.54604168608785 seconds.; Arginine energy: -605.1514689384549 Hartrees, time taken: 215.84501126222312 seconds.; Asparagine energy: -491.04432100071995 Hartrees, time taken: 177.1454620063305 seconds.; Aspartic_acid energy: -510.3043230853464 Hartrees, time taken: 198.31190185248852 seconds.; Cysteine energy: -720.4219957102104 Hartrees, time taken: 151.35190648585558 seconds.; Glutamic_acid energy: -549.4951112606502 Hartrees, time taken: 136.0041107479483 seconds.; Glutamine energy: -530.2261895601027 Hartrees, time taken: 136.45657246001065 seconds.; Glycine energy: -283.5893524874689 Hartrees, time taken: 110.86536369845271 seconds.; Histidine energy: -547.1545219389225 Hartrees, time taken: 190.28457425907254 seconds.; Isoleucine energy: -440.3258760616588 Hartrees, time taken: 176.21623157337308 seconds.; Leucine energy: -440.33076955681287 Hartrees, time taken: 154.9296657089144 seconds.; Lysine energy: -495.8966574116915 Hartrees, time taken: 167.91756228543818 seconds.; Methionine energy: -798.7987813339455 Hartrees, time taken: 157.03161489591002 seconds.; Phenylalanine energy: -553.1290149756642 Hartrees, time taken: 190.91649591736495 seconds.; Proline energy: -399.96754183927425 Hartrees, time taken: 141.14360310696065 seconds.; Serine energy: -397.8017752608608 Hartrees, time taken: 112.12268372066319 seconds.; Threonine energy: -437.0180950733486 Hartrees, ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3223#issuecomment-2375594595:2708,energy,energy,2708,https://psicode.org,https://github.com/psi4/psi4/issues/3223#issuecomment-2375594595,1,['energy'],['energy']
Energy Efficiency,"Pruning Scheme = FLAT; Nuclear Scheme = TREUTLER. BS radius alpha = 1; Pruning alpha = 1; Radial Points = 99; Spherical Points = 770; Total Points = 66220; Total Blocks = 555; Max Points = 253; Max Functions = 14. ==> Pre-Iterations <==. -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; Ag 5 5 0 0 0 0; B1g 1 1 0 0 0 0; B2g 1 1 0 0 0 0; B3g 1 1 0 0 0 0; Au 0 0 0 0 0 0; B1u 2 2 0 0 0 0; B2u 2 2 0 0 0 0; B3u 2 2 0 0 0 0; -------------------------------------------------------; Total 14 14 5 5 5 0; -------------------------------------------------------. ==> Integral Setup <==. ==> DirectJK: Integral-Direct J/K Matrices <==. J tasked: Yes; K tasked: No; wK tasked: No; Integrals threads: 1; Schwarz Cutoff: 1E-12. Minimum eigenvalue in the overlap matrix is 1.9330486283E-01.; Using Symmetric Orthogonalization. SCF Guess: Core (One-Electron) Hamiltonian. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @RKS iter 1: -122.97213766263802 -1.22972e+02 5.13141e-01; @RKS iter 2: -124.26578841108680 -1.29365e+00 6.24312e-01 DIIS; @RKS iter 3: -128.75874780675335 -4.49296e+00 6.03176e-02 DIIS; @RKS iter 4: -128.79292051117602 -3.41727e-02 3.60017e-03 DIIS; @RKS iter 5: -128.79304881103522 -1.28300e-04 3.68316e-04 DIIS; @RKS iter 6: -128.79305011369129 -1.30266e-06 6.11487e-06 DIIS; @RKS iter 7: -128.79305011405475 -3.63457e-10 1.42312e-08 DIIS. ==> Post-Iterations <==. Orbital Energies [Eh]; ---------------------. Doubly Occupied:. 1Ag -30.472472 2Ag -1.291608 1B2u -0.442005; 1B3u -0.442005 1B1u -0.442005. Virtual:. 2B1u 1.309754 2B3u 1.309754 2B2u 1.309754; 3Ag 1.759040 4Ag 4.620812 1B1g 4.620812; 1B2g 4.620812 1B3g 4.620812 5Ag 4.620812. Final Occupation by Irrep:; Ag B1g B2g B3g Au B1u B2u B3u; DOCC [ 2, 0, 0, 0, 0, 1, 1, 1 ]. Energy converged. @RKS Final Energy: -128.79305011405475. => Energetics <=. Nuclear Repulsion Energy = 0.0000000000000000; One-Electron Energy = -",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1038#issuecomment-396997775:6359,Energy,Energy,6359,https://psicode.org,https://github.com/psi4/psi4/issues/1038#issuecomment-396997775,1,['Energy'],['Energy']
Energy Efficiency,"Pruning Scheme = FLAT; Nuclear Scheme = TREUTLER. BS radius alpha = 1; Pruning alpha = 1; Radial Points = 99; Spherical Points = 770; Total Points = 66220; Total Blocks = 555; Max Points = 253; Max Functions = 14. ==> Pre-Iterations <==. -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; Ag 5 5 0 0 0 0; B1g 1 1 0 0 0 0; B2g 1 1 0 0 0 0; B3g 1 1 0 0 0 0; Au 0 0 0 0 0 0; B1u 2 2 0 0 0 0; B2u 2 2 0 0 0 0; B3u 2 2 0 0 0 0; -------------------------------------------------------; Total 14 14 5 5 5 0; -------------------------------------------------------. ==> Integral Setup <==. ==> DirectJK: Integral-Direct J/K Matrices <==. J tasked: Yes; K tasked: No; wK tasked: No; Integrals threads: 1; Schwarz Cutoff: 1E-12. Minimum eigenvalue in the overlap matrix is 1.9330486283E-01.; Using Symmetric Orthogonalization. SCF Guess: Core (One-Electron) Hamiltonian. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @RKS iter 1: -123.05635077157466 -1.23056e+02 5.15651e-01; @RKS iter 2: -123.10132047688978 -4.49697e-02 6.79382e-01 DIIS; @RKS iter 3: -128.77814169956412 -5.67682e+00 1.11592e-01 DIIS; @RKS iter 4: -128.89363525981292 -1.15494e-01 1.11421e-02 DIIS; @RKS iter 5: -128.89481463928649 -1.17938e-03 2.07054e-03 DIIS; @RKS iter 6: -128.89485608871536 -4.14494e-05 8.00321e-05 DIIS; @RKS iter 7: -128.89485614958289 -6.08675e-08 1.05214e-05 DIIS; @RKS iter 8: -128.89485615065263 -1.06974e-09 2.89771e-07 DIIS. ==> Post-Iterations <==. Orbital Energies [Eh]; ---------------------. Doubly Occupied:. 1Ag -30.509932 2Ag -1.282862 1B3u -0.438441; 1B2u -0.438441 1B1u -0.438441. Virtual:. 2B3u 1.301627 2B2u 1.301627 2B1u 1.301627; 3Ag 1.757418 1B1g 4.636294 1B2g 4.636294; 1B3g 4.636294 4Ag 4.636294 5Ag 4.636294. Final Occupation by Irrep:; Ag B1g B2g B3g Au B1u B2u B3u; DOCC [ 2, 0, 0, 0, 0, 1, 1, 1 ]. Energy converged. @RKS Final Energy: -128.89485615065263. => Energetics <=. Nuclea",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1038#issuecomment-396997775:11329,Energy,Energy,11329,https://psicode.org,https://github.com/psi4/psi4/issues/1038#issuecomment-396997775,1,['Energy'],['Energy']
Energy Efficiency,"Pruning Scheme = FLAT; Nuclear Scheme = TREUTLER. BS radius alpha = 1; Pruning alpha = 1; Radial Points = 99; Spherical Points = 770; Total Points = 66220; Total Blocks = 555; Max Points = 253; Max Functions = 14. ==> Pre-Iterations <==. -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; Ag 5 5 0 0 0 0; B1g 1 1 0 0 0 0; B2g 1 1 0 0 0 0; B3g 1 1 0 0 0 0; Au 0 0 0 0 0 0; B1u 2 2 0 0 0 0; B2u 2 2 0 0 0 0; B3u 2 2 0 0 0 0; -------------------------------------------------------; Total 14 14 5 5 5 0; -------------------------------------------------------. ==> Integral Setup <==. ==> DirectJK: Integral-Direct J/K Matrices <==. J tasked: Yes; K tasked: No; wK tasked: No; Integrals threads: 1; Schwarz Cutoff: 1E-12. Minimum eigenvalue in the overlap matrix is 1.9330486283E-01.; Using Symmetric Orthogonalization. SCF Guess: Core (One-Electron) Hamiltonian. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @RKS iter 1: -123.06827227634659 -1.23068e+02 5.10480e-01; @RKS iter 2: -124.48927326489800 -1.42100e+00 6.09229e-01 DIIS; @RKS iter 3: -128.81236257833254 -4.32309e+00 6.22777e-02 DIIS; @RKS iter 4: -128.84986583076252 -3.75033e-02 3.18114e-03 DIIS; @RKS iter 5: -128.84995056097870 -8.47302e-05 1.63856e-03 DIIS; @RKS iter 6: -128.84997750974767 -2.69488e-05 1.32063e-04 DIIS; @RKS iter 7: -128.84997753200267 -2.22550e-08 1.18126e-04 DIIS; @RKS iter 8: -128.84997768193202 -1.49929e-07 1.19984e-05 DIIS; @RKS iter 9: -128.84997768349052 -1.55850e-09 7.58989e-06 DIIS; @RKS iter 10: -128.84997768334148 1.49043e-10 1.04995e-05 DIIS; @RKS iter 11: -128.84997768341361 -7.21343e-11 4.72686e-06 DIIS; @RKS iter 12: -128.84997768353034 -1.16728e-10 5.01495e-06 DIIS; @RKS iter 13: -128.84997768351695 1.33866e-11 2.51483e-06 DIIS; @RKS iter 14: -128.84997768351064 6.30962e-12 4.66979e-06 DIIS; @RKS iter 15: -128.84997768347296 3.76872e-11 1.34665e-06 DIIS; @RKS iter 16: -128.849977",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1038#issuecomment-396997775:16309,Energy,Energy,16309,https://psicode.org,https://github.com/psi4/psi4/issues/1038#issuecomment-396997775,1,['Energy'],['Energy']
Energy Efficiency,"Psi4 0.3.62 Driver Git: Rev {master} 1b48d22; compiled with ""setup --fc gfortran --erd on"". HF calculation for H2O exists after 2 SCF iterations; no energy change.; output states ""Two-Electron Energy = 0.0000000000000000"" . I specified ""INTEGRAL_PACKAGE ERD"" in the input.; It is the case for DF and direct SCF. PK gives a non-converging, oscillating SCF. Did not try the other options. ""INTEGRAL_PACKAGE libint"" works normally. Let me know if I should report more data. cheers.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/173:149,energy,energy,149,https://psicode.org,https://github.com/psi4/psi4/issues/173,2,"['Energy', 'energy']","['Energy', 'energy']"
Energy Efficiency,"Psi4 1.4a2.dev66, Git: Rev {master} 6e67529. see topic. Only recently noticed this. It used to do only dimer-basis calculations. ```; molecule ne2 {; 0 1; Ne 0 0 0; --; 0 1; Ne 0 0 2; }; set scf_type pk; energy('scf/3-21G', bsse_type=""cp""); ```. output:; ``` ===> N-Body Interaction Abacus <===; BSSE Treatment: cp; Number of 1-body computations: 4; Number of 2-body computations: 1; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1691:204,energy,energy,204,https://psicode.org,https://github.com/psi4/psi4/issues/1691,1,['energy'],['energy']
Energy Efficiency,"Psi4 LiCN/6-31G* (symmetry c1, default [Davidson] solver); CI ROOT 1 TOTAL ENERGY:-99.5315015582624; CI ROOT 2 TOTAL ENERGY:-99.53150155297872; CI ROOT 3 TOTAL ENERGY:-99.52581092386518; CI ROOT 4 TOTAL ENERGY:-99.52581092379563; CI ROOT 5 TOTAL ENERGY:-99.5096013650753; CI ROOT 6 TOTAL ENERGY:-99.48378441050741; ````; this result doesn't change with or without frozen core, but the results are fine with STO-3G, as well as water with 6-31G*. the results also match GAMESS if I perturb the linear geometry of LiCN, as suggested by @psi-rking , which suggests maybe an issue with finding roots of whatever symmetry the first excited state is; however, adding more roots (or running with/without symmetry) doesn't resolve the issue. in fact, running in `c2v` produces different energies, but they don't match GAMESS or the `symmetry c1` case:; ```; Psi4 LiCN/6-31G* (symmetry c2v, default [Davidson] solver); CI ROOT 1 TOTAL ENERGY:-99.52581092382692; CI ROOT 2 TOTAL ENERGY:-99.50960136455492; CI ROOT 3 TOTAL ENERGY:-99.47046293582866; CI ROOT 4 TOTAL ENERGY:-99.43820506440449; CI ROOT 5 TOTAL ENERGY:-99.39012366739456; CI ROOT 6 TOTAL ENERGY:-99.37979350854745; ```; maybe it's a preconditioner issue? the Davidson seems to converge in just one step for c1 and c2v. I suppose it's possible the guess space just isn't grabbing roots for all symmetries, but increasing the number of roots to 30 doesn't change the results. perhaps more disturbing, though, is that the in-core diagonization routine `RSP` gives yet another set of results:; ```; Psi4 LiCN/6-31G* (symmetry c1, RSP solver); CI ROOT 1 TOTAL ENERGY:-99.58887523722994; CI ROOT 2 TOTAL ENERGY:-99.56069933848028; CI ROOT 3 TOTAL ENERGY:-99.56069933848008; CI ROOT 4 TOTAL ENERGY:-99.53483755106353; CI ROOT 5 TOTAL ENERGY:-99.53483755106343; CI ROOT 6 TOTAL ENERGY:-99.53418772103414; ```; here, we find 3 roots lower in energy than either GAMESS or the default Psi4 routines, and we also recover the -99.534837 E_h root, but this time a",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3083:1787,ENERGY,ENERGY,1787,https://psicode.org,https://github.com/psi4/psi4/issues/3083,1,['ENERGY'],['ENERGY']
Energy Efficiency,"Psi4 changes directory if **DFT-D3** is used:; ```python; import os; import psi4. print(psi4.__version__). print(os.getcwd()). psi4.set_output_file('/dev/null'); psi4.geometry('He 0 0 0'); psi4.energy('PBE-D3/3-21G'). print(os.getcwd()); ```; ```bash; $ python test1.py ; 1.2rc3; /shared/raimis/debug/psi4; /home/tmp/psi.15136..dftd3.a9f60419; ```; This does not happen if **DFT-D2** is used:; ```python; import os; import psi4. print(psi4.__version__). print(os.getcwd()). psi4.set_output_file('/dev/null'); psi4.geometry('He 0 0 0'); psi4.energy('PBE-D2/3-21G'). print(os.getcwd()); ```; ```bash; $ python test2.py ; 1.2rc3; /shared/raimis/debug/psi4; /shared/raimis/debug/psi4; ```; A small detail, but it is messing up our pipelines. And it is similar to #817.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1064:194,energy,energy,194,https://psicode.org,https://github.com/psi4/psi4/issues/1064,2,['energy'],['energy']
Energy Efficiency,"Psi4 forgets socc when guess=core. Reduced test case. molecule {; 0 2; Li; }. set basis STO-3G; set reference rohf; set guess sad; set docc [ 1, 0, 0, 0, 0, 0, 0, 0 ]; set socc [ 1, 0, 0, 0, 0, 0, 0, 0 ]; energy('scf'). With SAD guess, one gets. ```; Final Occupation by Irrep:; Ag B1g B2g B3g Au B1u B2u B3u ; DOCC [ 1, 0, 0, 0, 0, 0, 0, 0 ]; SOCC [ 0, 0, 0, 0, 0, 0, 0, 0 ]; ```. Energy converged. @DF-ROHF Final Energy: -7.13546721504551. With core guess, one gets. ```; Final Occupation by Irrep:; Ag B1g B2g B3g Au B1u B2u B3u ; DOCC [ 1, 0, 0, 0, 0, 0, 0, 0 ]; SOCC [ 1, 0, 0, 0, 0, 0, 0, 0 ]; ```. Energy converged. @DF-ROHF Final Energy: -7.31554523444454",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/420:35,Reduce,Reduced,35,https://psicode.org,https://github.com/psi4/psi4/issues/420,6,"['Energy', 'Reduce', 'energy']","['Energy', 'Reduced', 'energy']"
Energy Efficiency,"Psi4 is primarily a QM program. We have a ""qmmm"" module for adding external charges into a QM calc, http://psicode.org/psi4manual/master/scf.html#external-potentials-and-qm-mm . There's support for single-point calculations of EFP fragments alone or embedded into QM calcs, http://psicode.org/psi4manual/master/libefp.html . And there are a couple pure-MM projects simmering. But right now we don't support any particular MM software packages.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/341#issuecomment-208966398:76,charge,charges,76,https://psicode.org,https://github.com/psi4/psi4/issues/341#issuecomment-208966398,1,['charge'],['charges']
Energy Efficiency,"Psi4 modules writing their variable to globals should be moved to Wavefunction local variables. This is part of the general ""localization"" of Psi4 to assist in complex Psi4 runs involving multiple computations and to further promote the API. . The general plan is as follows:; 1) Add a bit of code that dumps all local Wavefunction variables to global variables at the end of each *driver* computation `energy/gradient/Hessian/etc`. The small code snippet looks like the following:. ```python; scf_e, wfn = psi4.energy(""HF"", return_wfn=True); for k, v in wfn.variables().items():; core.set_variable(k, v); ```; Thats it! Just need to be called at the right places in the driver to ensure we do not miss a crucial export. This will keep the global variables working as expected. 2) Replace all `Process::environment.globals[""name""] = variable` calls with `Wavefunction->set_variable(""name"", variable)` for modules.; 3) Keep in mind some modules may grab variables from these global options. Some thought will be needed in these cases so this is not a blanket find and replace.; 4) @loriab Are there going to be doc issues when we do this?. I would not do this all in one go due to point 3. So I would recommend a series of PR's:; - PR 1: Do (1) and apply (2) to adc, dfep2, dfmp2, detci, and libsapt_solver modules (in that order, testing in between!).; - PR 2 (may be multiple): Apply (2) to major module blocks one at a time CC*, occ, dfocc, etc.; - PR 3: Clean up any remaining module global exports.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/883:403,energy,energy,403,https://psicode.org,https://github.com/psi4/psi4/issues/883,2,['energy'],['energy']
Energy Efficiency,"Psi4 seems to be unable to recognize the symmetry of molecules that should be Cs.; Minimal input:; ```; molecule {; pubchem:fluoroethane ; }; set basis cc-pVDZ; energy('scf'); ```; Output is attached. [Cs_test.log](https://github.com/psi4/psi4/files/8209874/Cs_test.log); I have tried overriding this by manually specifying a Cs symmetry, but that results in an error:; ```; !----------------------------------------------------------------------------------!; ! !; ! Fatal Error: User specified point group (Cs(X)) is not a subgroup of the highest !; ! detected point group (C1). If this is because the symmetry increased, try to !; ! start the calculation again from the last geometry, after checking any !; ! symmetry-dependent input, such as DOCC. !; ! Error occurred in file: /scratch/psilocaluser/conda- !; ! builds/psi4-multiout_1645476997931/work/psi4/src/psi4/libmints/molecule.cc !; ! on line: 2011 !; ! The most recent 5 function calls were: !; ! psi::Molecule::find_point_group(double) const !; ! psi::Molecule::update_geometry() !; ! from_dict(pybind11::dict) !; ! !; !----------------------------------------------------------------------------------!; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2463:161,energy,energy,161,https://psicode.org,https://github.com/psi4/psi4/issues/2463,1,['energy'],['energy']
Energy Efficiency,"Psi4-1.2.1 on Debian shows several test suite failures on non-Intel hardware in the SAPT code that go like this:. ```; 90/140 Test #315: sapt1 ............................***Failed 7.40 sec; Traceback (most recent call last):; File ""/<<PKGBUILDDIR>>/builddir/stage/usr/bin/psi4"", line 269, in <module>; exec(content); File ""<string>"", line 53, in <module>; File ""/<<PKGBUILDDIR>>/builddir/stage/usr/lib/s390x-linux-gnu/psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/<<PKGBUILDDIR>>/builddir/stage/usr/lib/s390x-linux-gnu/psi4/driver/procrouting/proc.py"", line 3438, in run_sapt; e_sapt = core.sapt(dimer_wfn, monomerA_wfn, monomerB_wfn). RuntimeError: ; Fatal Error: Laplace Quadrature requested for (E_HUMO - E_LOMO)/(E_LUMO-E_HOMO) > 7.0 * 10^12, quadratures are not designed for this range.; Error occurred in file: /<<PKGBUILDDIR>>/psi4/src/psi4/lib3index/denominator.cc on line: 609; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int). Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); ```; See https://buildd.debian.org/status/fetch.php?pkg=psi4&arch=s390x&ver=1%3A1.2.1-2&stamp=1546705364&raw=0 for the full log. Failing test cases from `quicktests` are `sapt1`, `sapt-dft1`, `tu5-sapt` and `pywrap-db1`, failing architectures are (so far) `s390x` and `powerpc`. Anything I can do to investigate?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1462:456,energy,energy,456,https://psicode.org,https://github.com/psi4/psi4/issues/1462,3,"['energy', 'power']","['energy', 'powerpc']"
Energy Efficiency,"PyTuple_Type)>::check(_object*) in export_mints.cc.o; boost::python::detail::tuple_base::call(boost::python::api::object const&) in libboost_python-1_57.a(tuple.o); boost::python::detail::register_tuple_pytype_ptr::register_tuple_pytype_ptr() in libboost_python-1_57.a(tuple.o); boost::python::converter::pyobject_type<boost::python::tuple, &(PyTuple_Type)>::get_pytype() in libboost_python-1_57.a(pickle_support.o); ""_PyType_GenericAlloc"", referenced from:; boost::python::objects::class_type_object in libboost_python-1_57.a(class.o); ""_PyType_IsSubtype"", referenced from:; boost::python::instance_holder::install(_object*) in libboost_python-1_57.a(class.o); boost::python::objects::find_instance_impl(_object*, boost::python::type_info, bool) in libboost_python-1_57.a(class.o); boost::python::objects::(anonymous namespace)::new_class(char const*, unsigned long, boost::python::type_info const*, char const*) in libboost_python-1_57.a(class.o); boost::python::instance_holder::allocate(_object*, unsigned long, unsigned long) in libboost_python-1_57.a(class.o); boost::python::instance_holder::deallocate(_object*, void*) in libboost_python-1_57.a(class.o); boost::python::converter::(anonymous namespace)::complex_rvalue_from_python::extract(_object*) in libboost_python-1_57.a(builtin_converters.o); boost::python::converter::(anonymous namespace)::complex_rvalue_from_python::get_slot(_object*) in libboost_python-1_57.a(builtin_converters.o); ...; ""_PyType_Ready"", referenced from:; boost::python::objects::static_data() in libboost_python-1_57.a(class.o); boost::python::objects::class_metatype() in libboost_python-1_57.a(class.o); boost::python::objects::class_type() in libboost_python-1_57.a(class.o); boost::python::objects::function::function(boost::python::objects::py_function const&, boost::python::detail::keyword const*, unsigned int) in libboost_python-1_57.a(function.o); boost::python::objects::make_nurse_and_patient(_object*, _object*) in libboost_python-1_57.a(life_support.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/164#issuecomment-131149225:71160,allocate,allocate,71160,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131149225,1,['allocate'],['allocate']
Energy Efficiency,"Python/ceval.c:4187; #41 0x55e0616ae01b in PyEval_EvalCode /tmp/build/80754af9/python_1546130271559/work/Python/ceval.c:731; #42 0x55e0617303c3 in run_mod /tmp/build/80754af9/python_1546130271559/work/Python/pythonrun.c:1025; #43 0x55e0617307c0 in PyRun_FileExFlags /tmp/build/80754af9/python_1546130271559/work/Python/pythonrun.c:978; #44 0x55e0617309c2 in PyRun_SimpleFileExFlags /tmp/build/80754af9/python_1546130271559/work/Python/pythonrun.c:419; #45 0x55e0617344b2 in run_file /tmp/build/80754af9/python_1546130271559/work/Modules/main.c:340; #46 0x55e0617344b2 in Py_Main /tmp/build/80754af9/python_1546130271559/work/Modules/main.c:811; #47 0x55e0615fd02d in main /tmp/build/80754af9/python_1546130271559/work/Programs/python.c:69; #48 0x7fdb59a14412 in __libc_start_main (/lib64/libc.so.6+0x24412); #49 0x55e0616dde0d (/home/raimis/opt/conda/envs/psi4/bin/python3.6+0x1c3e0d). 0x60700011cc20 is located 0 bytes to the right of 80-byte region [0x60700011cbd0,0x60700011cc20); allocated by thread T0 here:; #0 0x7fdb59cac49f in __interceptor_malloc /opt/conda/conda-bld/compilers_linux-64_1534514838838/work/.build/x86_64-conda_cos6-linux-gnu/src/gcc/libsanitizer/asan/asan_malloc_linux.cc:86; #1 0x7fdb48229e3a in psi::init_int_array(int) /home/raimis/prj/psi4.git/psi4/src/psi4/libciomr/int_array.cc:65; #2 0x7fdb48ee97f2 in psi::IntegralTransform::initialize() /home/raimis/prj/psi4.git/psi4/src/psi4/libtrans/integraltransform.cc:211; #3 0x7fdb48ee65cf in psi::IntegralTransform::IntegralTransform(std::shared_ptr<psi::Wavefunction>, std::vector<std::shared_ptr<psi::MOSpace>, std::allocator<std::shared_ptr<psi::MOSpace> > >, psi::IntegralTransform::TransformationType, psi::IntegralTransform::OutputType, psi::IntegralTransform::MOOrdering, psi::IntegralTransform::FrozenOrbitals, bool) /home/raimis/prj/psi4.git/psi4/src/psi4/libtrans/integraltransform.cc:110; #4 0x7fdb46dc8b1a in psi::cctransort::cctransort(std::shared_ptr<psi::Wavefunction>, psi::Options&) /home/raimis/prj/psi4.git/",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1488#issuecomment-456410401:7718,allocate,allocated,7718,https://psicode.org,https://github.com/psi4/psi4/pull/1488#issuecomment-456410401,1,['allocate'],['allocated']
Energy Efficiency,"Python/ceval.c:4187; #47 0x564ef0b4b01b in PyEval_EvalCode /tmp/build/80754af9/python_1546130271559/work/Python/ceval.c:731; #48 0x564ef0bcd3c3 in run_mod /tmp/build/80754af9/python_1546130271559/work/Python/pythonrun.c:1025; #49 0x564ef0bcd7c0 in PyRun_FileExFlags /tmp/build/80754af9/python_1546130271559/work/Python/pythonrun.c:978; #50 0x564ef0bcd9c2 in PyRun_SimpleFileExFlags /tmp/build/80754af9/python_1546130271559/work/Python/pythonrun.c:419; #51 0x564ef0bd14b2 in run_file /tmp/build/80754af9/python_1546130271559/work/Modules/main.c:340; #52 0x564ef0bd14b2 in Py_Main /tmp/build/80754af9/python_1546130271559/work/Modules/main.c:811; #53 0x564ef0a9a02d in main /tmp/build/80754af9/python_1546130271559/work/Programs/python.c:69; #54 0x7f7bba2d9412 in __libc_start_main (/lib64/libc.so.6+0x24412); #55 0x564ef0b7ae0d (/home/raimis/opt/conda/envs/psi4/bin/python3.6+0x1c3e0d). 0x6030001fb1a8 is located 0 bytes to the right of 24-byte region [0x6030001fb190,0x6030001fb1a8); allocated by thread T0 here:; #0 0x7f7bba57149f in __interceptor_malloc /opt/conda/conda-bld/compilers_linux-64_1534514838838/work/.build/x86_64-conda_cos6-linux-gnu/src/gcc/libsanitizer/asan/asan_malloc_linux.cc:86; #1 0x7f7ba935bb96 in psi::Matrix::matrix(int, int) /home/raimis/prj/psi4.git/psi4/src/psi4/libmints/matrix.cc:245; #2 0x7f7ba93613f6 in psi::Matrix::alloc() /home/raimis/prj/psi4.git/psi4/src/psi4/libmints/matrix.cc:486; #3 0x7f7ba9359c77 in psi::Matrix::Matrix(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, psi::Dimension const&, psi::Dimension const&, int) /home/raimis/prj/psi4.git/psi4/src/psi4/libmints/matrix.cc:196; #4 0x7f7ba975bd94 in void __gnu_cxx::new_allocator<psi::Matrix>::construct<psi::Matrix, char const (&) [23], psi::Dimension const&, psi::Dimension const&>(psi::Matrix*, char const (&) [23], psi::Dimension const&, psi::Dimension const&) /home/raimis/opt/conda/envs/psi4/x86_64-conda_cos6-linux-gnu/include/c++/7.3.0/ext/new_allocator.h:",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1489#issuecomment-456415881:10766,allocate,allocated,10766,https://psicode.org,https://github.com/psi4/psi4/pull/1489#issuecomment-456415881,1,['allocate'],['allocated']
Energy Efficiency,QMMM charges seem to have no effect,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1757:5,charge,charges,5,https://psicode.org,https://github.com/psi4/psi4/issues/1757,1,['charge'],['charges']
Energy Efficiency,"Quicktests fail on Fedora rawhide i686. The test case output is. Testing pywrap-freq-e-sowreap...; Performing finite difference calculations by energies; 13 displacements needed.; Computation complete.; Frequencies.......................................................PASSED; ZPVE..............................................................PASSED; SP energy.........................................................PASSED; SP NRE............................................................PASSED; SP NRE............................................................PASSED; SP NRE............................................................PASSED; Testing cc8...; \tFAILED; Testing cc18...; Nuclear repulsion energy..........................................PASSED; SCF energy........................................................PASSED; CCSD correlation energy...........................................PASSED; CCSD total energy.................................................PASSED; \tFAILED; Testing cc19...; \tFAILED; Testing cc28...; \tFAILED; Testing cc49...; \tFAILED. The cc??.test files are empty, but the output.dat's seem sane...",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/13:354,energy,energy,354,https://psicode.org,https://github.com/psi4/psi4/issues/13,5,['energy'],['energy']
Energy Efficiency,"RHF iter 2: -75.97384127453083 -1.95023e-02 1.55795e-02 DIIS; 401: @DF-RHF iter 3: -75.97992825374592 -6.08698e-03 1.86735e-03 DIIS; 401: @DF-RHF iter 4: -75.98012170651255 -1.93453e-04 4.06200e-04 DIIS; 401: @DF-RHF iter 5: -75.98014095901934 -1.92525e-05 8.89529e-05 DIIS; 401: @DF-RHF iter 6: -75.98014186620988 -9.07191e-07 9.85581e-06 DIIS; 401: @DF-RHF iter 7: -75.98014187224302 -6.03315e-09 1.00607e-06 DIIS; 401: @DF-RHF iter 8: -75.98014187231389 -7.08695e-11 1.20203e-07 DIIS; 401: ; 401: ==> Post-Iterations <==; 401: ; 401: Orbital Energies [Eh]; 401: ---------------------; 401: ; 401: Doubly Occupied: ; 401: ; 401: 1A1 -20.568888 2A1 -1.334711 1B2 -0.686874 ; 401: 3A1 -0.554298 1B1 -0.499284 ; 401: ; 401: Virtual: ; 401: ; 401: 4A1 0.193417 2B2 0.287599 3B2 1.041506 ; 401: 5A1 1.130379 2B1 1.164432 6A1 1.220999 ; 401: 4B2 1.368964 7A1 1.693510 ; 401: ; 401: Final Occupation by Irrep:; 401: A1 A2 B1 B2 ; 401: DOCC [ 3, 0, 1, 1 ]; 401: ; 401: Energy converged.; 401: ; 401: @DF-RHF Final Energy: -75.98014187231389; 401: ; 401: => Energetics <=; 401: ; 401: Nuclear Repulsion Energy = 8.8014620606294294; 401: One-Electron Energy = -122.2750929709242769; 401: Two-Electron Energy = 37.4934890379809431; 401: Total Energy = -75.9801418723139079; 401: ; 401: ; 401: ; 401: Properties will be evaluated at 0.000000, 0.000000, 0.000000 [a0]; 401: ; 401: Properties computed using the HF density matrix; 401: ; 401: Nuclear Dipole Moment: [e a0]; 401: X: 0.0000 Y: 0.0000 Z: 1.0191; 401: ; 401: Electronic Dipole Moment: [e a0]; 401: X: 0.0000 Y: 0.0000 Z: 0.0213; 401: ; 401: Dipole Moment: [e a0]; 401: X: 0.0000 Y: 0.0000 Z: 1.0404 Total: 1.0404; 401: ; 401: Dipole Moment: [D]; 401: X: 0.0000 Y: 0.0000 Z: 2.6444 Total: 2.6444; 401: ; 401: Quadrupole Moment: [D A]; 401: XX: -7.3007 YY: -4.1363 ZZ: -5.8725; 401: XY: -0.0000 XZ: 0.0000 YZ: -0.0000; 401: ; 401: Traceless Quadrupole Moment: [D A]; 401: XX: -1.5309 YY: 1.6335 ZZ: -0.1027; 401: XY: -0.0000 XZ: 0.0000 YZ: -0.0000; 40",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-403466174:6343,Energy,Energy,6343,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-403466174,1,['Energy'],['Energy']
Energy Efficiency,"RHF iter 8: -24.23681570008684 7.96382e-07 6.89584e-08 DIIS; @RHF iter 9: -24.23681570008748 -6.39488e-13 7.72849e-09 DIIS. ==> Post-Iterations <==. ```; Orbital Energies (a.u.); -----------------------. Doubly Occupied:. 1Ag -8.185320 2Ag -0.873753. Virtual:. 1B3u -0.275716 1B1u -0.275716 1B2u -0.275716; 3Ag -0.110068 2B1u -0.075684 2B2u -0.075684; 2B3u -0.075684 1B3g -0.003943 1B1g -0.003943; 4Ag -0.003943 1B2g -0.003943 5Ag -0.003943; 3B1u 0.121472 3B3u 0.121472 3B2u 0.121472; 6Ag 0.225602 7Ag 0.375520 8Ag 0.375520; 2B3g 0.375520 2B2g 0.375520 2B1g 0.375520; 4B2u 0.414098 1Au 0.414098 4B3u 0.414098; 5B3u 0.414098 4B1u 0.414098 5B2u 0.414098; 5B1u 0.414098 6B1u 1.165651 6B2u 1.165651; 6B3u 1.165651 9Ag 1.739906 10Ag 1.739906; 3B3g 1.739906 3B1g 1.739906 3B2g 1.739906; 7B1u 1.850114 8B1u 1.850114 7B3u 1.850114; 8B3u 1.850114 7B2u 1.850114 2Au 1.850114; 8B2u 1.850114 11Ag 2.783091. Final Occupation by Irrep:; Ag B1g B2g B3g Au B1u B2u B3u; DOCC [ 2, 0, 0, 0, 0, 0, 0, 0 ]; ```. Energy converged. @RHF Final Energy: -24.23681570008748. => Energetics <=. ```; Nuclear Repulsion Energy = 0.0000000000000000; One-Electron Energy = -30.3554852212569273; Two-Electron Energy = 6.1186695211694495; DFT Exchange-Correlation Energy = 0.0000000000000000; Empirical Dispersion Energy = 0.0000000000000000; PCM Polarization Energy = 0.0000000000000000; EFP Energy = 0.0000000000000000; Total Energy = -24.2368157000874760. Alert: EFP and PCM quantities not currently incorporated into SCF psivars.; ```. Properties will be evaluated at 0.000000, 0.000000, 0.000000 Bohr; ==> Properties <==. Properties computed using the SCF density matrix. Nuclear Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 0.0000. Electronic Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 0.0000. Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000. Dipole Moment: (Debye); X: 0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000. Saving occupied orbitals to File 180. **\* tstop() called on node5-027-10 at Sat Jan 9 01:41:",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/204#issuecomment-170152270:6977,Energy,Energy,6977,https://psicode.org,https://github.com/psi4/psi4/issues/204#issuecomment-170152270,1,['Energy'],['Energy']
Energy Efficiency,ROHF energy inconsistency,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/210:5,energy,energy,5,https://psicode.org,https://github.com/psi4/psi4/issues/210,1,['energy'],['energy']
Energy Efficiency,"Realistically I'm not going to have the bandwidth to get full (i.e. production quality) DFT hessians up and running in one shot, so I'm in favor of incremental PRs. This one does two things: 1) sets up the CPKS stuff we'll need for all restricted DFT methods and 2) paves the way for GGA Hessians, by adding all the appropriate hooks for the various derivative terms. It currently needs 3 x Natom x nbf^2 memory for the Fock derivatives, but that will be easy to fix in the future. Therefore, my preference is to get this PR in as-is, so that I (and, hopefully, others) can build on it by adding the GGA terms and making it more memory efficient. I'd be very happy to guide any interested people on the refactoring front, but will do it myself if needed; either way, it's something that's much easier to do when there's at least something that works in place already. The main review questions I have were already sorted out in the great feedback I've had so far: @loriab told me exactly where, and how, to hook into the driver. You (@dgasmith) have pointed out a good source of inspiration for the refactoring pass, so I think my questions are answered at this point. Once this is merged, I'll continue to work on the restricted GGA terms so that we're well poised for a brainstorming session to make the code more efficient.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1664#issuecomment-502410715:636,efficient,efficient,636,https://psicode.org,https://github.com/psi4/psi4/pull/1664#issuecomment-502410715,2,['efficient'],['efficient']
Energy Efficiency,Reduce code triplication in Molecule::atom_at_position,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2464:0,Reduce,Reduce,0,https://psicode.org,https://github.com/psi4/psi4/pull/2464,1,['Reduce'],['Reduce']
Energy Efficiency,Reduce the number of tests on Appveyor,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1249:0,Reduce,Reduce,0,https://psicode.org,https://github.com/psi4/psi4/pull/1249,1,['Reduce'],['Reduce']
Energy Efficiency,Reduce the scope pollution in DPD::buf4_sort,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2716:0,Reduce,Reduce,0,https://psicode.org,https://github.com/psi4/psi4/pull/2716,1,['Reduce'],['Reduce']
Energy Efficiency,"Reduced @dspoel test case; ```; molecule LiF {; 1 1; Li 0.000000000 0.000000000 0.000000000; --; -1 1; F 16.000000000 0.000000000 0.000000000; }; set basis cc-pVDZ; set df_scf_guess false; set scf_type direct. energy('scf'); ```; Ends up in ; ```; @RHF iter 99: -93.26608062600357 7.76623e-11 9.86087e-02 DIIS; @RHF iter 100: -93.26608062574179 2.61778e-10 9.86087e-02 DIIS; ```. If you use an augmented basis set, the calculation converges.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1433#issuecomment-465488934:0,Reduce,Reduced,0,https://psicode.org,https://github.com/psi4/psi4/issues/1433#issuecomment-465488934,2,"['Reduce', 'energy']","['Reduced', 'energy']"
Energy Efficiency,Reduced atom overlap tolerence to 0.1 to fix #195,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/283:0,Reduce,Reduced,0,https://psicode.org,https://github.com/psi4/psi4/pull/283,1,['Reduce'],['Reduced']
Energy Efficiency,Reduced the number of travis CI cases,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/237:0,Reduce,Reduced,0,https://psicode.org,https://github.com/psi4/psi4/pull/237,1,['Reduce'],['Reduced']
Energy Efficiency,Reevaluate whether to clean after energy() etc.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2583:34,energy,energy,34,https://psicode.org,https://github.com/psi4/psi4/issues/2583,1,['energy'],['energy']
Energy Efficiency,"Regarding over-riding, as long as the `energy(..., options={'BASIS', 'STO-3G'})` are executed as actual `psi4.core.set_global_option(...)` commands, there shouldn't be any special treatment needed for overriding options. This is still the global options object that's being set, though, yes? So those `options` are going to need to be reset and revoked in an `OptionsState` before return. Sorry if this is out of place – with all the ""overriding"", I'm not quite following if it's the user-facing or programming process that's under discussion.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/511#issuecomment-259860494:39,energy,energy,39,https://psicode.org,https://github.com/psi4/psi4/pull/511#issuecomment-259860494,1,['energy'],['energy']
Energy Efficiency,"Regarding the PTE test case, I get the following `Integral setup` running the code on `master`:; ```; Using in-core PK algorithm.; Calculation information:; Number of atoms: 1; Number of AO shells: 8; Number of primitives: 50; Number of atomic orbitals: 19; Number of basis functions: 18; ; Integral cutoff 1.00e-12; Number of threads: 1; ```; while this one with the code on this PR:; ```; Using in-core PK algorithm.; Calculation information:; Number of atoms: 1; Number of AO shells: 8; Number of primitives: 55; Number of atomic orbitals: 19; Number of basis functions: 18; Integral cutoff 1.00e-12; Number of threads: 1; ```; The SCF results are the same within 10^-11 The CC results are different already at the first iteration of the T amplitude solver, _i.e._ the MP2 correlation energy. This despite the fact that the SCF energies reported by the two versions at the end of cctransort are the same.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/728#issuecomment-308221334:788,energy,energy,788,https://psicode.org,https://github.com/psi4/psi4/pull/728#issuecomment-308221334,1,['energy'],['energy']
Energy Efficiency,"Related issue: [2577](https://github.com/psi4/psi4/issues/2577). Using a similar script as the previous reporter (using Psi4 1.9.1 and this build; `conda install -n $VENV_PSI4 psi4 numpy scipy dftd3-python dftd4-python gcp-correction python=$PYTHON_VERSION -c conda-forge`); ```; import psi4; psi4.set_options({'reference': 'uhf', 'stability_analysis': 'check'}); mol = psi4.geometry(""""""; 0 1; O; """""");; psi4.energy('wB97X-D3BJ/def2-TZVPD', molecule=mol); ```. I get the NYI message:; `psi4.driver.p4util.exceptions.ValidationError: Stability analysis not yet supported for XC functionals.`. Is the implementation of stability check for DFT on the roadmap for the near future? This would be very helpful especially when running UKS as we have observed that open shell systems often have instabilities in the SCF. . I also tried with `PBE/6-31G` and still get this exception. However, this [merged PR](https://github.com/psi4/psi4/pull/2849) implemented stability check for GGA functionals - is this a bug? The NYI message looks like it's triggered for every DFT functional ([see this line](https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/scf_proc/scf_iterator.py#L578)), whereas [here](https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/scf_proc/subclass_methods.py#L129) the program only raises the error if the functional is meta or needs vv10.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3236:409,energy,energy,409,https://psicode.org,https://github.com/psi4/psi4/issues/3236,1,['energy'],['energy']
Energy Efficiency,"Removed the DETCI refs from the docs table, and in select ccsd. . I also updated occ psivars. It was setting `CURRENT CORRELATION ENERGY` for `{df/cd}-ccsd(t)` but it was not setting `CCSD(T) CORRELATION ENERGY`. The test now runs through a more complete set of cross checking. Testing conv (fnocc, ccenergy) and df/cd (fnocc, occ) both with and without frozen core. . Note: The changes to occ required a rebuild, and I am noticing when doing df/cd (either occ or fnocc module) I get a message printed to `stdout`""No atoms detected, returning"". Are we aware of this?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/966#issuecomment-381827387:130,ENERGY,ENERGY,130,https://psicode.org,https://github.com/psi4/psi4/pull/966#issuecomment-381827387,2,['ENERGY'],['ENERGY']
Energy Efficiency,"Reposted from forum with modification. The following attempt at open-shell SAPT fails with segfault `forrtl: severe (174): SIGSEGV, segmentation fault occurred`. Original reporter concluded it was a problem with Calcium, as modifying it to Chlorine (along with the charges) resulted in a successful computation. The example molecule is reduced from the original report, for ease of reproduction. 40 GB is (hopefully) enough to indicate this is not a problem of needing more memory. ```memory 40 gb; molecule {; 0 1; H -0.803001 1.098737 0.000360; H -0.919454 -1.089722 0.000521; O -0.035537 -0.067631 0.000218; --; 2 1; Ca 2.281447 -0.004247 -0.000154; units angstrom; no_reorient; symmetry c1; }. set globals {; scf_type df; FREEZE_CORE true; }. basis {; assign aug-cc-pVTZ; assign Ca def2-TZVPP; }. df_basis_scf {; assign aug-cc-pVTZ-jkfit; assign Ca def2-TZVPP-jkfit; }. df_basis_sapt {; assign aug-cc-pVTZ-RI; assign Ca def2-TZVPP-ri; }. energy('sapt0')```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1271:265,charge,charges,265,https://psicode.org,https://github.com/psi4/psi4/issues/1271,3,"['charge', 'energy', 'reduce']","['charges', 'energy', 'reduced']"
Energy Efficiency,"Reposted from the forum. I can't investigate this myself, due to being banned by Gaussian. 1. The MO and Density blocks are being mislabeled, for all levels of theory as far as I can tell. This prevents 3rd party apps from parsing the files correctly. The labels for the MO orbital energy and coefficients blocks should always be as follows:. Alpha Orbital Energies; Alpha MO Coefficients; Beta Orbital Energies; Beta MO Coefficients. Title case is important. The Density blocks should be labeled according to the level of theory as follows:. Total SCF Density (this should be the label for both HF and DFT); Total MP2 Density (don’t prepend ‘DF’ to any methods when using density-fitting); Total MP3 Density; Total MP4 Density; Total CC Density; Total CI Density. Spin Density should be labeled similarly:. Spin SCF Density (this should be the label for HF, DFT, and CASSCF); Spin MP2 Density; Spin MP3 Density; Spin MP4 Density; Spin CC Density; Spin CI Density. 2. Don’t write the Beta blocks for RHF jobs, as their presence makes 3rd party apps think that the level of theory is UHF, and that in turn leads to unnecessarily expensive calcs. 3. If canonical orbitals have been removed from the basis due to S_TOLERANCE, then the “number of independent functions” in the .fchk file should be the resulting number of canonical orbitals. Currently the “number of independent functions” always seems to be equal to the “number of basis functions”, which screws up parsing because the matrices aren’t nbasis x nbasis in this case. 4. This wasn’t happening in v1.1, but in v1.2, writing the .fchk file triggers printing of the MOs to the output file, which bloats the file tremendously. I can’t figure out how to turn this off, but it is undesirable as a default behavior.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1272:282,energy,energy,282,https://psicode.org,https://github.com/psi4/psi4/issues/1272,1,['energy'],['energy']
Energy Efficiency,"Returning 0.0 works fine for the interrim, however the issue will need to be revisited eventually. The following are excerpts from Hessian runs from two other QM apps. **Nwchem** reports the following for atomic Boron as a neutral doublet:. > Zero-Point correction to Energy = 0.000 kcal/mol ( 0.000000 au); > Thermal correction to Energy = 0.888 kcal/mol ( 0.001416 au); > Thermal correction to Enthalpy = 1.481 kcal/mol ( 0.002359 au); > ; > Total Entropy = 33.126 cal/mol-K; > - Translational = 33.126 cal/mol-K (mol. weight = 11.0093); > - Rotational = 0.000 cal/mol-K (symmetry # = 1); > - Vibrational = 0.000 cal/mol-K; > ; > Cv (constant volume heat capacity) = 2.979 cal/mol-K; > - Translational = 2.979 cal/mol-K; > - Rotational = 0.000 cal/mol-K; > - Vibrational = 0.000 cal/mol-K. **GAMESS'** authors include electronic properties. Kcal and cal/mol-K units are omitted since the markdown can't handle them easily. . | | E | H | G | CV | CP | S |; | --- | --- | --- | --- | --- | --- | --- |; | ELEC. | 0.000 | 0.000 | -0.411 | 0.000 | 0.000 | 1.377 |; | TRANS. | 0.889 | 1.481 | -8.400 | 2.981 | 4.968 | 33.141 |; | ROT. | 0.000 | 0.000 | 0.000 | 0.000 | 0.000 | 0.000 |; | VIB. | 0.000 | 0.000 | 0.000 | 0.000 | 0.000 | 0.000 |; | TOTAL | 0.889 | 1.481 | -8.810 | 2.981 | 4.968 | 34.518 |",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/332#issuecomment-204559936:268,Energy,Energy,268,https://psicode.org,https://github.com/psi4/psi4/issues/332#issuecomment-204559936,2,['Energy'],['Energy']
Energy Efficiency,"Right now, our SCF instability following algorithm is the following, very dumb one:; * Perform SCF; * Check instability; * If unstable, rotate in the direction of the unstable vector, according to some user-specified magnitude, then repeat; * If unstable _with a new eigenvalue_, increment the magnitude. It must have been bad. We can guess more intelligently. A _smarter_ algorithm would look like:; * Perform SCF; * Check instability; * If unstable, rotate in the direction of the unstable vector, according to some user-specified magnitude, then...; * Do a line fit of the SCF energy in the direction of the unstable vector. The instability analysis gave us the first two terms of the Taylor expansion, analytically. Given that, we can then use the SCF energy at the rotated build to fit the _third_ derivative. It may also be possible to project the SCF gradient into the unstable direction. We can then use both pieces of information to fit the third and fourth derivative. (Some numerical tests will be necessary to determine whether the fourth dimensional fit is worthwhile, and good rotation magnitudes.); * We then find the zeroes of f'(x)/x. This is a quadratic, and we can solve the roots analytically. If both are real, evaluate f at both zeroes to find a guess for the true minimum, and continue SCF at the guess rotation. If both are imaginary, a degree four polynomial fit predicts that f(x) has no zeroes, and our fit is unreliable. Print a warning and the current orbitals.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3045:580,energy,energy,580,https://psicode.org,https://github.com/psi4/psi4/issues/3045,2,['energy'],['energy']
Energy Efficiency,"Right, I guess I was a bit tired. The Taylor expansion of the energy in the orbital rotation. $$ E(\boldsymbol{\theta})=E_{0}+\boldsymbol{\theta}\cdot\boldsymbol{g}+\frac{1}{2}\boldsymbol{\theta}\cdot\boldsymbol{H}\cdot\boldsymbol{\theta} + \mathcal{O}(\boldsymbol{\theta}^3) $$. where . $$ \boldsymbol{g} = \nabla_{\boldsymbol{\theta}}E\Big|_{\boldsymbol{\theta}=\boldsymbol{0}} $$. is the orbital gradient and. $$ \boldsymbol{H} = \nabla_{\boldsymbol{\theta}}\nabla_{\boldsymbol{\theta}}E\Big|_{\boldsymbol{\theta}=\boldsymbol{0}} $$. is the orbital Hessian reduces to . $$ E(\boldsymbol{\theta}) \approx E_{0} + \frac{1}{2}\boldsymbol{\theta}\cdot\boldsymbol{H}\cdot\boldsymbol{\theta} $$. around a SCF solution determined by $\boldsymbol{g}=\boldsymbol{0}$. Diagonalizing $\boldsymbol{H}$ only gives you directions $\boldsymbol{\theta}$ in which the energy goes up or down, and you need to conduct a line search to find the minimum along a direction of descent. The line search is pretty simple to carry out, though; you can use the quasiperiodicity of the orthogonal rotation matrix to determine a good trial step size, see e.g. our work on self-interaction corrected calculations in [J. Chem. Theory Comput. 12, 3195 (2016)](https://doi.org/10.1021/acs.jctc.6b00347). In my experience, a trial step of 1/5 of the shortest period of oscillation (see [Abrudan et al](https://doi.org/10.1016/j.sigpro.2009.03.015)) works well; this is slightly shorter than the theoretical value of 1/4: since you know that the function value is going down at zero step length (it is a descent direction), the minimum would be at pi/2 which is 1/4. Because of non-linear effects, the actual step should be shorter. Employing this trick is key to achieving robust convergence for orbital rotation techniques, and will be used throughout in my upcoming orbital optimizer library.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3045#issuecomment-1707919955:62,energy,energy,62,https://psicode.org,https://github.com/psi4/psi4/issues/3045#issuecomment-1707919955,3,"['energy', 'reduce']","['energy', 'reduces']"
Energy Efficiency,"Run:; ```; molecule h2o {; 0 1; o; h 1 0.958; h 1 0.958 2 104.4776 ; }. wfn = energy('scf/cc-pvdz', return_wfn=True)[1]; print(wfn.Fa_subset(""MO"").nph); ```. The result MO basis Fock matrix is not diagonal, as expected. The correct way to transform the SO basis Fock matrix into the MO basis matrix is contraction against the C coefficient matrices. This is not what the `Fa_subset` function does. It instead goes through [a series of matrix mulitplications involving the overlap matrix](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/wavefunction.cc#L1047-L1050). This is the correct transformation rule for the density matrix. Not-so-coincidentally, `Da_subset` goes through exactly the same function, where this behavior is correct. If you try to use the same logic for both helpers, you're going to get one of them wrong, guaranteed. While the mechanism of the bug is clear to me, I'm not sure what the best fix should be. Perhaps we should intercept ""MO"" as a special case in `Fa_subset` so it never sees the `matrix_subset_helper`? Under the hood, the code would return `Fa_->transform(Ca_)`.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1989:78,energy,energy,78,https://psicode.org,https://github.com/psi4/psi4/issues/1989,1,['energy'],['energy']
Energy Efficiency,Running `ctest -L quick` results in:. ```; Test project /gpfs/alpine2/scratch/jslj23/chm205/psi4/build; Start 2: casscf-fzc-sp; 1/185 Test #2: casscf-fzc-sp .................... Passed 3.47 sec; Start 3: casscf-semi; 2/185 Test #3: casscf-semi ...................... Passed 2.70 sec; Start 4: casscf-sa-sp; 3/185 Test #4: casscf-sa-sp ..................... Passed 18.40 sec; Start 5: ao-casscf-sp; 4/185 Test #5: ao-casscf-sp ..................... Passed 3.72 sec; Start 6: casscf-sp; 5/185 Test #6: casscf-sp ........................ Passed 8.16 sec; Start 7: castup1; 6/185 Test #7: castup1 .......................... Passed 2.61 sec; Start 10: cbs-delta-energy; 7/185 Test #10: cbs-delta-energy ................. Passed 21.39 sec; Start 13: cbs-xtpl-energy; 8/185 Test #13: cbs-xtpl-energy .................. Passed 23.30 sec; Start 14: cbs-xtpl-freq; 9/185 Test #14: cbs-xtpl-freq .................... Passed 44.45 sec; Start 15: cbs-xtpl-gradient; 10/185 Test #15: cbs-xtpl-gradient ................ Passed 12.67 sec; Start 20: cbs-xtpl-dict; 11/185 Test #20: cbs-xtpl-dict .................... Passed 45.25 sec; Start 21: cc1; 12/185 Test #21: cc1 .............................. Passed 6.13 sec; Start 27: cc13b; 13/185 Test #27: cc13b ............................ Passed 7.25 sec; Start 31: cc15; 14/185 Test #31: cc15 ............................. Passed 4.23 sec; Start 33: cc17; 15/185 Test #33: cc17 ............................. Passed 8.09 sec; Start 34: cc18; 16/185 Test #34: cc18 ............................. Passed 45.65 sec; Start 44: cc28; 17/185 Test #44: cc28 ............................. Passed 274.18 sec; Start 48: cc31; 18/185 Test #48: cc31 ............................. Passed 367.81 sec; Start 49: cc32; 19/185 Test #49: cc32 ............................. Passed 3.80 sec; Start 57: cc4; 20/185 Test #57: cc4 .............................. Passed 9.40 sec; Start 67: cc49; 21/185 Test #67: cc49 ............................. Passed 18.04 sec; Start 79: cc8; 22/185 Test #,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3223#issuecomment-2373056930:657,energy,energy,657,https://psicode.org,https://github.com/psi4/psi4/issues/3223#issuecomment-2373056930,4,['energy'],['energy']
Energy Efficiency,"Running a cam-b3lyp calculation with ghost atoms leads to severe scf problems. ```; molecule wat {; @O -0.031788188689 -0.057762343755 -2.500000000000; @H -0.415040188689 0.819260656245 -2.500000000000; @H 0.919541811311 0.097469656245 -2.500000000000; O -0.031788188689 -0.057762343755 2.500000000000; H -0.415040188689 0.819260656245 2.500000000000; H 0.919541811311 0.097469656245 2.500000000000; }. set {; basis def2-SVP; }; energy('cam-b3lyp'); ```. Gives:. ```; ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-RKS iter 0: -76.28416922601539 -7.62842e+01 3.25937e-02 ; @DF-RKS iter 1: 42.90914490853778 1.19193e+02 1.57477e-01 ; @DF-RKS iter 2: -67.59424772229025 -1.10503e+02 6.97022e-02 DIIS; @DF-RKS iter 3: -5.92023271767882 6.16740e+01 1.67018e-01 DIIS; @DF-RKS iter 4: -25.53109522421165 -1.96109e+01 1.22988e-01 DIIS; @DF-RKS iter 5: -6.43807826871483 1.90930e+01 1.58323e-01 DIIS; @DF-RKS iter 6: 29.17875295082399 3.56168e+01 1.24341e-01 DIIS; @DF-RKS iter 7: 29.14675833982615 -3.19946e-02 1.24329e-01 DIIS; @DF-RKS iter 8: 29.14518341499436 -1.57492e-03 1.24344e-01 DIIS; @DF-RKS iter 9: 29.15167484147237 6.49143e-03 1.24371e-01 DIIS; @DF-RKS iter 10: -25.72021965887588 -5.48719e+01 1.20627e-01 DIIS; @DF-RKS iter 11: -25.72793758296909 -7.71792e-03 1.20619e-01 DIIS; @DF-RKS iter 12: -26.38471390876281 -6.56776e-01 1.23180e-01 DIIS; @DF-RKS iter 13: -6.54455688045927 1.98402e+01 1.57065e-01 DIIS. ```. Other LRC functionals like `lrc-wpbe` seem to work fine. . The first energy is in the correct ballpark, so I guess something is wrong with the potential. But how would ghost atoms come into play? And why seemingly just for CAM-style?. -----. edit:; seemingly working ""LC"" versions:; LRC-wPBE; CAMY-B3LYP ; LCY-BLYP",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/900:429,energy,energy,429,https://psicode.org,https://github.com/psi4/psi4/issues/900,3,"['Energy', 'energy']","['Energy', 'energy']"
Energy Efficiency,Running a single point calc on a HCl dimer; [hcl2.zip](https://github.com/psi4/psi4/files/11093879/hcl2.zip); at the CCSD(T)/aug-cc-pvtz level of theory crashes with; ```; Total cached: 139345.9 kB; MRU = 31; LRU = 32; #LRU deletions = 0; #Low-priority deletions = 0; Core max size: 48000000.0 kB; Core used: 47999971.9 kB; Core available: 28.1 kB; Core cached: 139345.9 kB; Locked cached: 139345.9 kB; Most recent entry = 31; Least recent entry = 32; dpd_block_matrix: n = 18 m = 324; Error in: dpd_block_matrix: No memory left.; ```; The program gets allocated 48 Gb of memory and 16 cores. Cache level was set to 1. Any other suggestions?; Script is attached as a zip file.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2913:553,allocate,allocated,553,https://psicode.org,https://github.com/psi4/psi4/issues/2913,1,['allocate'],['allocated']
Energy Efficiency,Running in c2v symmetry.										 Running in c2v symmetry. Rotational constants: A = ************ B = 18.88315 C = 18.88315 [cm^-1]			 Rotational constants: A = ************ B = 18.88315 C = 18.88315 [cm^-1]; Rotational constants: A = ************ B = 566102.67788 C = 566102.67788 [MHz]			 Rotational constants: A = ************ B = 566102.67788 C = 566102.67788 [MHz]; Nuclear repulsion = 4.362688508557055								 Nuclear repulsion = 4.362688508557055. Charge = 0											 Charge = 0; Multiplicity = 2											 Multiplicity = 2; Electrons = 9											 Electrons = 9; Nalpha = 5											 Nalpha = 5; Nbeta = 4											 Nbeta = 4. ==> Algorithm <==											 ==> Algorithm <==. SCF Algorithm Type is PK.										 SCF Algorithm Type is PK.; DIIS enabled.												 DIIS enabled.; MOM disabled.												 MOM disabled.; Fractional occupation disabled.									 Fractional occupation disabled.; Guess Type is SAD.											 Guess Type is SAD.; Energy threshold = 1.00e-06										 Energy threshold = 1.00e-06; Density threshold = 1.00e-06										 Density threshold = 1.00e-06; Integral threshold = 1.00e-12										 Integral threshold = 1.00e-12. ==> Primary Basis <==											 ==> Primary Basis <==. Basis Set: DZ												 Basis Set: DZ; Blend: DZ												 Blend: DZ; Number of shells: 8											 Number of shells: 8; Number of basis functions: 12									 Number of basis functions: 12; Number of Cartesian functions: 12									 Number of Cartesian functions: 12; Spherical Harmonics?: false										 Spherical Harmonics?: false; Max angular momentum: 1										 Max angular momentum: 1. ==> Integral Setup <==										 ==> Integral Setup <==. Using in-core PK algorithm.										 Using in-core PK algorithm.; Calculation information:										 Calculation information:; Number of atoms: 2								 Number of atoms: 2; Number of AO shells: 8								 Number of AO shells: 8; Number of primitives: 18								 Number of primitives: 18; Number of atomic orbitals: 12		,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2264#issuecomment-890681284:10579,Energy,Energy,10579,https://psicode.org,https://github.com/psi4/psi4/pull/2264#issuecomment-890681284,1,['Energy'],['Energy']
Energy Efficiency,"Running my example with a debug build and #2700 results in this log:; ```; LSEEK failed. Error description from the OS: : Bad file descriptor; Error in PSIO_WT_TOCLEN()! Cannot seek vol[0] to its beginning, unit 102. Traceback (most recent call last):; File ""/home/gytibor/orca_bcc/../p4debug/bin/psi4"", line 338, in <module>; exec(content); File ""<string>"", line 192, in <module>; File ""/home/gytibor/p4debug/lib/psi4/driver/driver.py"", line 501, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/gytibor/p4debug/lib/psi4/driver/procrouting/proc.py"", line 2820, in run_bccd; sort_func(ref_wfn). RuntimeError:; Fatal Error: PSIO Error; Error occurred in file: /home/gytibor/psi4/psi4/src/psi4/libpsio/toclen.cc on line: 113; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::PSIO::wt_toclen(unsigned long, unsigned long); psi::PSIO::write(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::DPD::file4_mat_irrep_wrt(psi::dpdfile4*, int). Printing out the relevant lines from the Psithon --> Python processed input file:; core.set_global_option(""REFERENCE"", ""RHF""); core.set_global_option(""SCF_TYPE"", ""PK""); core.set_global_option(""INTS_TOLERANCE"", 1.0E-14); core.set_global_option(""E_CONVERGENCE"", 1.0E-10); core.set_global_option(""D_CONVERGENCE"", 1.0E-10); --> energy('BCCD'). !----------------------------------------------------------------------------------!; ! !; ! Fatal Error: PSIO Error !; ! Error occurred in file: /home/gytibor/psi4/psi4/src/psi4/libpsio/toclen.cc on !; ! line: 113 !; ! The most recent 5 function calls were: !; ! psi::PsiException::PsiException(std::__cxx11::basic_string<char, !; ! std::char_traits<char>, std::allocator<char> >, char const*, int) !; ! psi::PSIO::wt_toclen(unsigned long, unsigned long) !; ! psi::PSIO::write(unsigned long, char con",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2261#issuecomment-1226239204:451,energy,energy,451,https://psicode.org,https://github.com/psi4/psi4/issues/2261#issuecomment-1226239204,2,['energy'],['energy']
Energy Efficiency,"Running the following input. ```; molecule mol {; 0 1; H 0.0 0.0 0.000000; H 0.0 0.0 0.700000; H 0.0 0.0 1.400000; H 0.0 0.0 2.100000; H 0.0 0.0 2.800000; H 0.0 0.0 3.500000; }. memory 3500 mb. set basis aug-cc-pVDZ; set reference rohf; set guess core; set scf_type df. scf_e, scf_wfn = energy('scf', return_wfn = True). set restricted_docc [ 0, 0, 0, 0, 0, 0, 0, 0 ]; set restricted_uocc [ 0, 0, 6, 6, 0, 0, 6, 6 ]; set qc_module detci; set nat_orbs true. ci_e, ci_wfn = energy('cisd', ref_wfn = scf_wfn, return_wfn = True); ```. crashes with; ```; RuntimeError: ; Fatal Error: Matrix::doublet: Dimension mismatch; Error occurred in file: /builddir/build/BUILD/psi4-add49b95b6be2441c522f71bddb47f1371e16958/psi4/src/psi4/libmints/matrix.cc on line: 1517; ```. both in the Fedora package of Psi4 1.1 as well as the conda package. The script runs without errors in the up-to-date trunk. Could this issue be fixed in the conda package? Alternatively, is there a conda channel for the development version?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/764:287,energy,energy,287,https://psicode.org,https://github.com/psi4/psi4/issues/764,2,['energy'],['energy']
Energy Efficiency,"Running the following input; ```; molecule {; symmetry c2v; 0 1; N; N 1 1.50; }. set basis cc-pCVDZ; set reference rohf. set restricted_docc [2, 0, 0, 0]; set ras1 [0, 0, 0, 0]; set ras2 [4, 0, 2, 2]; set ras3 [0, 0, 0, 0]; E, cas_wfn = energy('rasscf', return_wfn = True). set restricted_docc [0, 0, 0, 0]; set ras1 [2, 0, 0, 0]; set ras2 [4, 0, 2, 2]; set ras3 [4, 0, 2, 2]; E, ras_wfn = energy('detci', ref_wfn = cas_wfn, return_wfn = True); ```; results in a successful run but; ```; $ psi4 NN_1.50.in ; free(): invalid size; Aborted (core dumped); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2309:237,energy,energy,237,https://psicode.org,https://github.com/psi4/psi4/issues/2309,2,['energy'],['energy']
Energy Efficiency,"Running this input results in a PSIO error in version 1.3.2.; ```; molecule h2o {; 0 1; O 0.000000 0.000000 0.000000; H 0.000000 0.000000 0.956914; H 0.926363 0.000000 -0.239868; }. molecule ch3 {; 0 2; C 0.000000 0.000000 0.000000; H 0.000000 1.078000 0.000000; H 0.933000 -0.539000 0.000000; H -0.933000 -0.539000 0.000000; }. set basis 6-31G*. activate(h2o); set reference rhf; energy('b3lyp'). activate(ch3); set reference uhf; energy('b3lyp'); ```. However, if one switches the runs the other way around; ```; molecule h2o {; 0 1; O 0.000000 0.000000 0.000000; H 0.000000 0.000000 0.956914; H 0.926363 0.000000 -0.239868; }. molecule ch3 {; 0 2; C 0.000000 0.000000 0.000000; H 0.000000 1.078000 0.000000; H 0.933000 -0.539000 0.000000; H -0.933000 -0.539000 0.000000; }. set basis 6-31G*. activate(ch3); set reference uhf; energy('b3lyp'). activate(h2o); set reference rhf; energy('b3lyp'); ```; the calculation succeeds.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2174:381,energy,energy,381,https://psicode.org,https://github.com/psi4/psi4/issues/2174,4,['energy'],['energy']
Energy Efficiency,"Running version 0.3, I see. SCF Energy (ref): -1.4267662531; Nuclear repulsion energy: 1.1382844453; One-electron energy: -2.8081568717; Two-electron energy: 0.5202338704; Dropped core energy: 0.0000000000; Total electronic energy: -2.2879230012; Total SCF energy: -1.1496385559. **\* Calculated Energy Differs from SCF Energy in CHKPT ! ***. input.dat as follows. molecule {; 0 2; H 0.000000 0.889899 0.000000; H 0.889899 0.000000 0.000000; H 0.000000 -0.889899 0.000000; }. set basis STO-3G; set reference rohf; set NUM_ROOTS 3; energy('fci')",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/210:32,Energy,Energy,32,https://psicode.org,https://github.com/psi4/psi4/issues/210,10,"['Energy', 'energy']","['Energy', 'energy']"
Energy Efficiency,"S; @RHF iter 12: -2058.62669482462434 -1.82716e-01 2.82478e-03 DIIS; @RHF iter 13: -2058.70818041849816 -8.14856e-02 4.77369e-04 DIIS; @RHF iter 14: -2058.71254091207129 -4.36049e-03 2.19998e-04 DIIS; @RHF iter 15: -2058.71333247888015 -7.91567e-04 1.06203e-04 DIIS; @RHF iter 16: -2058.71385812449535 -5.25646e-04 7.34977e-05 DIIS; @RHF iter 17: -2058.71419440133604 -3.36277e-04 6.51060e-05 DIIS; @RHF iter 18: -2058.71480929891686 -6.14898e-04 5.06877e-05 DIIS; @RHF iter 19: -2058.71557380138074 -7.64502e-04 2.56577e-05 DIIS; @RHF iter 20: -2058.71570264423553 -1.28843e-04 1.10771e-05 DIIS; @RHF iter 21: -2058.71571795960836 -1.53154e-05 6.56999e-06 DIIS; @RHF iter 22: -2058.71572010000091 -2.14039e-06 4.19181e-06 DIIS; @RHF iter 23: -2058.71572133933978 -1.23934e-06 2.84272e-06 DIIS; @RHF iter 24: -2058.71572216216646 -8.22827e-07 1.46190e-06 DIIS; @RHF iter 25: -2058.71572235289977 -1.90733e-07 6.37553e-07 DIIS; Energy converged.; ```; After:; ```; ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @RHF iter 0: -2027.61462571415450 -2.02761e+03 0.00000e+00 ; @RHF iter 1: -2047.54782267664223 -1.99332e+01 3.19491e-02 ; @RHF iter 2: -1955.99273532148004 9.15551e+01 6.70510e-02 DIIS; @RHF iter 3: -2057.53819937519893 -1.01545e+02 9.02846e-03 DIIS; @RHF iter 4: -2058.54743414181848 -1.00923e+00 4.31560e-03 DIIS; @RHF iter 5: -2058.67427146292175 -1.26837e-01 1.67738e-03 DIIS; @RHF iter 6: -2058.68592550112453 -1.16540e-02 1.96127e-03 DIIS; @RHF iter 7: -2058.71313050125491 -2.72050e-02 2.22231e-04 DIIS; @RHF iter 8: -2058.71421043177043 -1.07993e-03 1.00804e-04 DIIS; @RHF iter 9: -2058.71444510627452 -2.34675e-04 6.14040e-05 DIIS; @RHF iter 10: -2058.71464094420026 -1.95838e-04 5.39836e-05 DIIS; @RHF iter 11: -2058.71503691077487 -3.95967e-04 4.33684e-05 DIIS; @RHF iter 12: -2058.71567587119080 -6.38960e-04 2.33421e-05 DIIS; @RHF iter 13: -2058.71571904189250 -4.31707e-05 1.03865e-05 DIIS; @RHF iter 14: -2058.71572200714991 -2.96526e-06 2.57224e-06 DIIS; @RHF iter 1",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1451#issuecomment-450756309:3088,Energy,Energy,3088,https://psicode.org,https://github.com/psi4/psi4/pull/1451#issuecomment-450756309,1,['Energy'],['Energy']
Energy Efficiency,"S; @RHF iter 15: -99.45080702229581 -2.23110e-12 2.66726e-07 DIIS; @RHF iter 16: -99.45080702230226 -6.45173e-12 5.58591e-09 DIIS. ==> Post-Iterations <==. ```; Orbital Energies (a.u.); -----------------------. Doubly Occupied:. 1Ag -25.833682 2Ag -1.076019 1B3u -0.180947; 1B2u -0.180947 1B1u -0.180947. Virtual:. 2B2u 0.442532 2B3u 0.442532 2B1u 0.442532; 3Ag 0.485648 4Ag 1.228480 1B3g 1.228480; 5Ag 1.228480 1B2g 1.228480 1B1g 1.228480; 3B3u 1.526002 3B2u 1.526002 3B1u 1.526002; 6Ag 2.051155 7Ag 3.283338 2B2g 3.283338; 2B3g 3.283338 2B1g 3.283338 8Ag 3.283338; 4B2u 3.331721 4B3u 3.331721 1Au 3.331721; 4B1u 3.331721 5B3u 3.331721 5B2u 3.331721; 5B1u 3.331721 6B2u 5.672254 6B1u 5.672254; 6B3u 5.672254 7B1u 9.267994 7B2u 9.267994; 7B3u 9.267994 8B1u 9.267994 8B3u 9.267994; 2Au 9.267994 8B2u 9.267994 9Ag 9.745165; 3B2g 9.745165 3B1g 9.745165 3B3g 9.745165; 10Ag 9.745165 11Ag 10.965644. Final Occupation by Irrep:; Ag B1g B2g B3g Au B1u B2u B3u; DOCC [ 2, 0, 0, 0, 0, 1, 1, 1 ]; ```. Energy converged. @RHF Final Energy: -99.45080702230226. => Energetics <=. ```; Nuclear Repulsion Energy = 0.0000000000000000; One-Electron Energy = -143.9965313656634294; Two-Electron Energy = 44.5457243433611438; DFT Exchange-Correlation Energy = 0.0000000000000000; Empirical Dispersion Energy = 0.0000000000000000; PCM Polarization Energy = 0.0000000000000000; EFP Energy = 0.0000000000000000; Total Energy = -99.4508070223022855. Alert: EFP and PCM quantities not currently incorporated into SCF psivars.; ```. Properties will be evaluated at 0.000000, 0.000000, 0.000000 Bohr; ==> Properties <==. Properties computed using the SCF density matrix. Nuclear Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 0.0000. Electronic Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 0.0000. Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000. Dipole Moment: (Debye); X: 0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000. Saving occupied orbitals to File 180. **\* tstop() called on node5-027-06 at Fri Jan 8 13:5",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/204:7792,Energy,Energy,7792,https://psicode.org,https://github.com/psi4/psi4/issues/204,1,['Energy'],['Energy']
Energy Efficiency,"SCF calculations on the formaldimine molecule. I am particularly interested by the determinant decomposition of the ground and first excited state of the molecule (singlet symmetry). However, I think I have noticed a pb concerning the sign of the determinants in the output. First, I give you my INPUT in python : . pes_origin = [1.498047, 1.066797, 0.987109, 118.359375]; variables = pes_origin[:] + [90, 90]; psi4.geometry(; """"""; N; C 1 {0}; H 2 {1} 1 {3}; H 2 {1} 1 {3} 3 180; H 1 {2} 2 {4} 3 {5}; symmetry c1"""""".format(*variables) ); ; psi4.set_options({ 'basis': 'cc-pvdz',; 'DETCI_FREEZE_CORE' : False,; 'reference': 'RHF',; 'num_roots': 2,; 'frozen_docc':[0],; 'restricted_docc': [6],; 'active': [3],; 'restricted_uocc': [11], ; 'frozen_uocc': [23],; 'mcscf_maxiter': 1000, ; 'avg_states' : [ 0, 1],; 'avg_weights' : [ 0.5, 0.5 ]; }); ; sacasscf, sacasscf_wfn = psi4.energy('casscf',return_wfn=True); E0_sacasscf = psi4.variable('CI ROOT 0 TOTAL ENERGY'); E1_sacasscf = psi4.variable('CI ROOT 1 TOTAL ENERGY') . Then, I give you from the OUTPUT FILE the decomposition I obtain : . *******************************************************************; *******************************************************************; ==> MCSCF root 0 information <==. MCSCF Root 0 energy = -93.931448649953467. Active Space Natural occupation numbers:. A 2.000000 A 1.000000 A 1.000000. The 9 most important determinants:. * 1 0.691216 ( 0, 1) 7AX 8AA 9AB ; * 2 0.691216 ( 1, 0) 7AX 8AB 9AA ; * 3 -0.149064 ( 1, 2) 7AA 8AB 9AX ; * 4 -0.149064 ( 2, 1) 7AB 8AA 9AX ; * 5 0.000000 ( 0, 0) 7AX 8AX ; * 6 0.000000 ( 0, 2) 7AA 8AX 9AB ; * 7 0.000000 ( 2, 0) 7AB 8AX 9AA ; * 8 -0.000000 ( 2, 2) 8AX 9AX ; * 9 -0.000000 ( 1, 1) 7AX 9AX . ==> MCSCF root 1 information <==. MCSCF Root 1 energy = -93.902550337672878. Active Space Natural occupation numbers:. A 1.999537 A 1.843676 A 0.156787. The 9 most important determinants:. * 1 -0.887365 ( 0, 0) 7AX 8AX ; * 2 -0.291143 ( 0, 2) 7AA 8AX 9AB ; * 3 -0.291143 ( 2, 0)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2008:1055,ENERGY,ENERGY,1055,https://psicode.org,https://github.com/psi4/psi4/issues/2008,1,['ENERGY'],['ENERGY']
Energy Efficiency,"Sebastian, my apologies for the forthcoming long response, which probably goes far beyond the answer you need. However, this question seems common enough that I wanted to write a thorough response that we could then link to in the future when it inevitably comes up again. That being said a disclaimer of sorts is in order. The comments herein are meant to be helpful to a wide reaching audience and many may not be directly applicable to you. Additionally, the comments should not be thought of as targeting you (with the obvious exception being that this post will tell you how to actually print). Since the decision to prepare/adapt Psi4 for/to MPI parallelism, it has become essential to micromanage resources (presently circularly defined as any aspect of normal program execution that the program may want to control, including, but not limited to: printing, memory, disk, threads, MPI processes) in a more controlled manner than before. One of these resources is the output. Under the MPI paradigm, each process generates its own output and Psi4 is hence responsible for ensuring that the output is logged in a logical manner (i.e. you don't get the same output, once for each processes, in the same file, in an incomprehensible mess). . In a traditional object-oriented coding paradigm, each problem is handled by a dedicated object, and the problem of printing is no exception. Therefore, within Psi4 we have created the `psi::PsiOutStream` class, of which `psi::outfile` is an instance. Of particular importance `psi::outfile` is an instance that always redirects output to where the user asked. To use `psi::outfile` in your code, ensure `#include ""psi4-dec.h""` is at the top of your file and then proceed in one of two manners: :. ``` c++; #include ""psi4-dec.h""; //Option 1 (takes the same format strings as C's printf function); psi::outfile->Printf(<format_string>,<Message>);. //Option 2 (the C++ way); (*psi::outfile)<<""My Message in C++ form""<<std::endl;; ```. The choice of which of ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/77#issuecomment-83041867:630,adapt,adapt,630,https://psicode.org,https://github.com/psi4/psi4/issues/77#issuecomment-83041867,1,['adapt'],['adapt']
Energy Efficiency,"Sebastian,. Using 'set guess sad' I get:. Final Occupation by Irrep:; Ag B1g B2g B3g Au B1u B2u B3u; DOCC [ 3, 0, 0, 0, 0, 2, 1, 1 ]; Energy converged.; @RHF Final Energy: -107.49356712900621. But I agree, your case with default guess is quite worrying. Best wishes,. Alexander. On Thu, Nov 6, 2014 at 11:29 AM, Sebastian Wouters <notifications@github.com. > wrote:; > ; > There are many ways to converge RHF, and sometimes you can get stuck in a; > local minmum, that's true. However, the following case is quite striking.; > ; > ## My input:; > ; > molecule N2 {; > N 0.000000000000 0.000000000000 0.000000000000; > N 0.000000000000 0.000000000000 2.060000000000; > units au; > }; > ; > plugin_load(""./mointegrals.so""); > ; > set basis sto-3g; > set mointegrals print 1; > set reference rhf; > ; > scf(); > plugin(""mointegrals.so""); > ; > I use the MO integrals for a subsequent FCI calculation (in a self-written; > program). When I start from the RHF determinant given by Psi4:; > ; > DOCC [ 2, 0, 1, 0, 0, 2, 1, 1 ]; > Total Energy = -106.7540443603229363; > ; > the FCI energy converges to the wrong answer. When I look at the energies; > from all possible determinants with Sz=0; irrep Ag; and N=14 electrons in; > the MO single-particle basis from Psi4, there is a determinant (in that MO; > basis!) with an energy which is lower: E = -107.488903265175 . The FCI; > energy then does converge to the right answer when this determinant is; > given as input for Davidson iterations.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/63.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/63#issuecomment-62010043:134,Energy,Energy,134,https://psicode.org,https://github.com/psi4/psi4/issues/63#issuecomment-62010043,6,"['Energy', 'energy']","['Energy', 'energy']"
Energy Efficiency,"Setting MKL_CBWR=AUTO for Intel machines (CI runs on intel for now, right?) seems reasonable. . I am all for moving forward with this as it blocks other PRs.; We could make an issue about MKL instabilities and keep monitoring it for now?. With supercomputers getting build with AMD Epyc we might need to consider supporting an AMD-oriented build in the future and switch to another BLAS library for it. (i'm not up to date on BLAS stuff there, but things have been improving i think)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1896#issuecomment-633701524:215,monitor,monitoring,215,https://psicode.org,https://github.com/psi4/psi4/pull/1896#issuecomment-633701524,1,['monitor'],['monitoring']
Energy Efficiency,"Setup: Install Psi4 rc1 for Linux with python 3.9 via the installer from https://psicode.org/installs/v14rc1/. Result: This installation appears to work fine for most molecules, but then has an issue with systems with linear dependencies, specifically when running the in-core DF algorithm. The provided file, `psi4_issue.py`, when run with sufficient memory to run in-core (~40 GB), gives an energy that is low by more than 2 Hartree (should be -1145.943, but gives -1148.711). With scf_type DF and less RAM (thus causing the disk algorithm to run), the energy is correct. Setting s_tolerance to 1e-4 also fixes the problem, at the cost of a little accuracy loss (5e-4 Hartree). I have reproduced this error on several computers, both CentOS and Ubuntu. The next version, psi4 rc2, does not show this problem. It would be nice to know whether this was deliberately fixed, or might still be around. `psi4_issue.py`: https://drive.google.com/file/d/1RTSVVfmXwJNpS4CHtvMYOTBU63J8Z85j/view?usp=sharing",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2211:393,energy,energy,393,https://psicode.org,https://github.com/psi4/psi4/issues/2211,2,['energy'],['energy']
Energy Efficiency,"Several downstream codes do not recognize the new SCF types `mem_DF` and `disk_DF` (introduced in #961) when set directly within the input file. I've attached [a tarball](https://github.com/psi4/psi4/files/2002517/eff-scftype-df.tar.gz) containing several such tests, adapted directly from the existing Psi4 test suite, which attempt to highlight these problems. I've also attached the summary file (from the tarball) separately for easy web viewing [here](https://github.com/psi4/psi4/files/2002535/summary.txt). Additionally worth note is that a few of these downstream codes fail gracefully (e.g., FNOCC for `scf_type mem_df`, as it assumes a disk algorithm) with helpful error messages, but others do not (e.g., CISD energies fail with PSIO errors and DLDF+D09 gradients segfault). However, if failure is unavoidable, we should probably at least be verbose in the error message.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1021:268,adapt,adapted,268,https://psicode.org,https://github.com/psi4/psi4/issues/1021,1,['adapt'],['adapted']
Energy Efficiency,"Show seg faults, buffer overflows, and doubly linked list errors: https://travis-ci.org/psi4/psi4/jobs/471402754. Azure Gibbs failure looks like:; ```; 2018-12-23T01:04:44.9842835Z 61/142 Test #210: gibbs ............................***Failed 33.09 sec; 2018-12-23T01:04:44.9843015Z Optimizer: Optimization complete!; 2018-12-23T01:04:44.9843106Z 	N2 Gibbs Free Energy..............................................PASSED; 2018-12-23T01:04:44.9843160Z Optimizer: Optimization complete!; 2018-12-23T01:04:44.9843216Z 	H2O Gibbs Free Energy.............................................PASSED; 2018-12-23T01:04:44.9843489Z Optimizer: Optimization complete!; 2018-12-23T01:04:44.9843563Z 	NH3 Gibbs Free Energy.............................................PASSED; 2018-12-23T01:04:44.9843609Z Traceback (most recent call last):; 2018-12-23T01:04:44.9843656Z File ""D:/a/1/b/build/stage/bin/psi4"", line 287, in <module>; 2018-12-23T01:04:44.9843903Z exec(content); 2018-12-23T01:04:44.9843947Z File ""<string>"", line 71, in <module>; 2018-12-23T01:04:44.9843996Z File ""D:\a\1\b\build\stage\lib\psi4\driver\driver.py"", line 1096, in optimize; 2018-12-23T01:04:44.9844066Z moleculeclone.update_geometry(); 2018-12-23T01:04:44.9844095Z ; 2018-12-23T01:04:44.9844134Z RuntimeError: ; 2018-12-23T01:04:44.9844201Z Fatal Error: User specified point group (C2v(Z)) is not a subgroup of the highest detected point group (Cs(Z)). If this is because the symmetry increased, try to start the calculation again from the last geometry, after checking any symmetry-dependent input, such as DOCC.; 2018-12-23T01:04:44.9844301Z Error occurred in file: D:\a\1\s\psi4\src\psi4\libmints\molecule.cc on line: 2016; 2018-12-23T01:04:44.9844337Z ; 2018-12-23T01:04:44.9844403Z Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); ```. as shown in the logs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1429#issuecomment-449670954:362,Energy,Energy,362,https://psicode.org,https://github.com/psi4/psi4/pull/1429#issuecomment-449670954,3,['Energy'],['Energy']
Energy Efficiency,"Side issue, just checking that `mp2/cc-pvqz-ri` is your shorthand, and that you're not actually running `energy('mp2/cc-pvqz-ri')`? That would be bad b/c cc-pvqz-ri isn't designed as a primary/orbital basis. It will be used automatcally as an auxiliary/fitting basis in a calc like `energy('mp2/cc-pvqz')` [good].",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2747#issuecomment-1279094276:105,energy,energy,105,https://psicode.org,https://github.com/psi4/psi4/issues/2747#issuecomment-1279094276,2,['energy'],['energy']
Energy Efficiency,"Similar to pull request #497 but should fix all broken links, not only those to energy/optimize/frequency. Removed unnecessary line break.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/500#issuecomment-258539160:80,energy,energy,80,https://psicode.org,https://github.com/psi4/psi4/pull/500#issuecomment-258539160,1,['energy'],['energy']
Energy Efficiency,Simplified test case; ```; molecule dimer {; 0 1; Ne 0.0 0.0 0.0; --; 0 1; Xe 0.0 0.0 3.0; }. set {; basis def2-svp; print 2; }. set guess core; Eall = energy('scf'); ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1433#issuecomment-447940882:152,energy,energy,152,https://psicode.org,https://github.com/psi4/psi4/issues/1433#issuecomment-447940882,1,['energy'],['energy']
Energy Efficiency,"Since nobody answered this yet, let me do so and bump this thread... You are right Lori, at present the s^2 variants are always computed, and the s^inf variants are computed in addition if the respective variables are True. As the new addition makes it possible to run complete SAPT0 without the s^2 approximation, it definitely makes sense to create a route that does exactly that, skipping the s^2 calculations altogether. However, it probably needs a new name (`energy('sapt0-sinf')` or similar) so the meaning of the standard and widely used `energy('sapt0')` is unchanged. It might also make sense to define new optional routes for higher-order SAPT that combine SAPT0-level s^inf exchange corrections with higher-level s^2 exchange corrections. I don't have a good name for such routes though: `energy('sapt2-sinf')` is not a good idea because it's not _all_ s^inf.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1490#issuecomment-465308052:465,energy,energy,465,https://psicode.org,https://github.com/psi4/psi4/pull/1490#issuecomment-465308052,3,['energy'],['energy']
Energy Efficiency,Since the energy is considerably higher in the failing example I wonder if the geometry is okay?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2338#issuecomment-952844434:10,energy,energy,10,https://psicode.org,https://github.com/psi4/psi4/issues/2338#issuecomment-952844434,1,['energy'],['energy']
Energy Efficiency,"Since the energy usually goes up from the SAD value in the first iteration, I would take the first update step from GDM; otherwise I'd use ADIIS/EDIIS+DIIS by default (see discussion in #2235). However, there should be also a setting that if the energy hasn't going down in N consecutive iterations (N=2 or N=3 are reasonable values) that the program should automatically switch to GDM.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/888#issuecomment-874494530:10,energy,energy,10,https://psicode.org,https://github.com/psi4/psi4/issues/888#issuecomment-874494530,2,['energy'],['energy']
Energy Efficiency,"Since we are only interested in the density with a SAD guess we can lower our expectations in terms of accuracy. So lets just do the easy solution: I trimmed `AM=5` out of the Weigend basis to make a `SAD-FIT` basis. While the energy of a given atom can deviate up to 1% (!) due to the errors in the fitting basis the densities look similar. For example, hydrobromic acid/aug-cc-pV5Z:. ```; SAD DF-basis aug-cc-pV5Z-jkfit; @DF-RHF iter 0: -2573.11546127243219 -2.57312e+03 1.30325e-02; @DF-RHF iter 6: -2573.05212026634626 -9.92310e-06 3.01845e-06 DIIS; ```. ```; SAD DF-basis SAD-FIT; @DF-RHF iter 0: -2572.77288633232229 -2.57277e+03 2.28224e-02; @DF-RHF iter 6: -2573.05212044674045 -2.02440e-07 7.83243e-07 DIIS; ```. This represents a worst-case example as the `SAD-FIT` basis is 10x smaller than `aug-cc-pV5Z-jkfit` for bromine. I think this represents a happy medium, 150 orbital basis functions on a single atom runs in about 3 seconds and we neatly circumvent the AM issues (Psi4 minimal AM is 4). As a note this optimization takes 11 iterations with a CORE guess to achieve the same level of convergence. Going to run with this for now. Unless someone has ideas of what went wrong with the CDJK spherical vs cartesian issue I'm just going to rip this out.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/400#issuecomment-224644390:227,energy,energy,227,https://psicode.org,https://github.com/psi4/psi4/pull/400#issuecomment-224644390,1,['energy'],['energy']
Energy Efficiency,"Sir, I just noticed that my psi4 does not reflect the methods that comes with it. Because of this, I can't calculate the potential energy data for the first excited states of the CF molecule. How can I add different methods to the Psi4 I already have compiled and installed?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181#issuecomment-2191716280:131,energy,energy,131,https://psicode.org,https://github.com/psi4/psi4/issues/3181#issuecomment-2191716280,1,['energy'],['energy']
Energy Efficiency,"So I was thinking about getting rid of `""component""` too. The difference between something like ""MP2"" and ""B2PLYP"" is that while there's a name for the SCF component of MP2 (it's HF), there's no such thing for the SCF part of B2PLYP. Also, before components were introduced, the keys in the `VARH` dict had to be valid methods, having a check against component gets around this issue. I think a much cleaner interface may be to rework how the extrapolation functions (`corl_xtpl_helgaker_2` etc.) work. Rather than passing in an energy/gradient/Hessian, we could pass in the `wfn` + the variable to extrapolate, and instead of trying to shoehorn the dft extrapolation into the existing interface, it could be neatly contained in a single extrapolation function. The only issue I see with this is that the printing of the CBS stages would have to move from `cbs()` into the extrapolation function itself. This is perhaps better discussed once DDD is in?. ------. I have made changes to the duplication detection, merging the two loops. Instead of a simple counter, it's now an array of job-indices, with the first element being the highest priority (ie the one with the matching wfn). Also, @hokru your ""requested"" syntax now works, see the added test which combines components arbitrarily. `ctest -L cbs` passes.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2132#issuecomment-973871657:529,energy,energy,529,https://psicode.org,https://github.com/psi4/psi4/pull/2132#issuecomment-973871657,1,['energy'],['energy']
Energy Efficiency,"So for the record, this would be:. ```; molecule N2 {; N 0.0000 0.0000 0.0000; N 0.0000 0.0000 2.1180; units au; }. set basis cc-pVDZ; set reference rhf; set e_convergence 1e-12; set d_convergence 1e-12. set dmrg wfn_irrep 0; set dmrg wfn_multp 1; set dmrg frozen_docc [ 1 , 0 , 0 , 0 , 0 , 1 , 0 , 0 ]; set dmrg active [ 2 , 0 , 1 , 1 , 0 , 2 , 1 , 1 ]. set dmrg dmrg_states [ 500, 1000]; set dmrg dmrg_e_convergence [ 1e-10, 1e-10]; set dmrg dmrg_dvdson_rtol [ 1e-5, 1e-10]; set dmrg dmrg_maxsweeps [ 5, 5]; set dmrg dmrg_noiseprefactors [ 0.05, 0.00]; set dmrg dmrg_print_corr false; set dmrg dmrg_chkpt false. set dmrg dmrg_d_convergence 1e-6; set dmrg dmrg_store_unit true; set dmrg dmrg_do_diis true; set dmrg dmrg_diis_branch 1e-2; set dmrg dmrg_store_diis false. set dmrg dmrg_which_root 1 # Ground state; set dmrg dmrg_state_avg false; set dmrg dmrg_active_space NO # INPUT; NO; LOC; set dmrg dmrg_loc_random false. set dmrg dmrg_caspt2_orb pseudocanonical; set dmrg dmrg_ipea 0.0; set dmrg dmrg_imag_shift 0.0. energy(""dmrg-caspt2""). compare_values(-109.103502335253, get_variable(""DMRG-SCF ENERGY""), 6, ""DMRG-SCF Energy"") #TEST; compare_values(-109.311041321133, get_variable(""CURRENT ENERGY""), 6, ""DMRG-CASPT2 Energy"") #TEST; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/388#issuecomment-223891395:1021,energy,energy,1021,https://psicode.org,https://github.com/psi4/psi4/pull/388#issuecomment-223891395,5,"['ENERGY', 'Energy', 'energy']","['ENERGY', 'Energy', 'energy']"
Energy Efficiency,"So here is the output file for 64 GB:. [formaldimine.txt](https://github.com/psi4/psi4/files/4948227/formaldimine.txt). and the error:. ```; PSIO_ERROR: unit = 51, errval = 12; PSIO_ERROR: 12 (error writing to file); Traceback (most recent call last):; File ""/marisdata/senjean/Git_repo/SA-OO-VQE//intersection_coniques.py"", line 47, in <module>; en0_casci,en1_casci = get_energies_formaldimine(alpha,phi); File ""/marisdata/senjean/Git_repo/SA-OO-VQE//intersection_coniques.py"", line 35, in get_energies_formaldimine; E0_casci = psi4.energy('fci'); File ""/home/senjean/psi4conda/lib/python3.7/site-packages/psi4/driver/driver.py"", line 556, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/senjean/psi4conda/lib/python3.7/site-packages/psi4/driver/procrouting/proc.py"", line 2998, in run_detci; ciwfn = core.detci(ref_wfn); RuntimeError:; Fatal Error: PSIO Error; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1557940846948/work/psi4/src/psi4/libpsio/error.cc on line: 128; The most recent 5 function calls were:. psi::PSIO::rw(unsigned long, char*, psi::psio_address, unsigned long, int); psi::PSIO::write_entry(unsigned long, char const*, char*, unsigned long); ```. and I confirm the 64 GB used : ` Memory set to 64.000 GiB by Python driver.`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1959#issuecomment-661069874:534,energy,energy,534,https://psicode.org,https://github.com/psi4/psi4/issues/1959#issuecomment-661069874,3,['energy'],['energy']
Energy Efficiency,"So here's another weird issue with PES scans in Psi4. Namely, it looks like the scan crashes in the SCF cycle every 4 or 5 points, even when I'm not feeding in the previous scf solution. If you try a new calculation in the point where it failed to converge, there's no problem. Test input; ```; molecule mol {; 0 1; symmetry c1; H 0.0 0.0 0.0; H 0.0 0.0 R1; H 0.0 0.0 R2; H 0.0 0.0 R3; } ; ; set basis STO-3G; set ci_maxiter 100. # This crashes at R=0.68; #for ir in range(60, 80, 2):; # This crashes at R=0.74; for ir in range(68, 80, 2):; mol.R1 = 1*(ir/100); mol.R2 = 2*(ir/100); mol.R3 = 3*(ir/100); ci_e=energy('fci'); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/759:609,energy,energy,609,https://psicode.org,https://github.com/psi4/psi4/issues/759,1,['energy'],['energy']
Energy Efficiency,"So in addition to setting `mf.small_rho_cutoff = 1e-15` in PySCF you also need to use a smaller threshold for the basis function screening. The default density screening threshold in Psi4 comes from Libxc, which is usually `1e-15`. I think there is another keyword for controlling the basis function threshold. I recently looked at the density threshold in finite element calculations on atoms in [arXiv:2302.06284](https://arxiv.org/abs/2302.06284). `1e-11` was sufficient to converge the total energy for all functionals to 1e-7 Hartree. The results for molecules may be different, though, since one might have larger regions of space with low electron density. Usually one is able to get different programs to agree beyond 1 uEh in DFT total energies, when the calculations are converged with respect to all numerical parameters. I usually only look at small calculations, though, since my usual interest is just to check that a functional is implemented the same way. Here that is not an issue since libxc provides the density functional to both Psi4 and PySCF, which is a huge boon for reproducibility.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2911#issuecomment-1487436664:496,energy,energy,496,https://psicode.org,https://github.com/psi4/psi4/issues/2911#issuecomment-1487436664,1,['energy'],['energy']
Energy Efficiency,"So one does a frequency calc, either by energies or gradients. ```; #! Optimization followed by frequencies H2O HF/cc-pVDZ. memory 250 mb. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; optimize('scf'); #frequencies('scf', dertype='energy') # TOGGLE; frequencies('scf', dertype='gradient') # TOGGLE. eval = psi4.get_frequencies(); eval.print_out(); evec = psi4.get_normalmodes(); evec.print_out(). ref_freqs = psi4.Vector(3) #TEST; ref_freqs.set(0, 0, 1775.65) #TEST; ref_freqs.set(0, 1, 4113.38) #TEST; ref_freqs.set(0, 2, 4212.18) #TEST. fd_freqs = psi4.wavefunction().frequencies() #TEST; compare_vectors(ref_freqs, fd_freqs, 1, ""Reference vs computed frequencies to 0.1 cm^-1"") #TEST; ```. Both versions pass the frequencies check. But if you diff their printed normal modes, as below, the coordinate system seems unaligned. This job doesn't have the sow/reap complication, though it does have the zmat one. Basically, is this expected or correctable?. ```; Frequency: 1775.58 | Frequency: 1775.65; Force constant: 0.1193 Force constant: 0.1193; X Y Z mass X Y Z mass ; O 0.000 0.000 -0.068 15.994915 | O 0.000 0.000 -0.270 15.994915; H 0.000 0.416 0.536 1.007825 | H 0.000 0.417 0.538 1.007825; H 0.000 -0.416 0.536 1.007825 | H 0.000 -0.417 0.538 1.007825. Frequency: 4113.41 | Frequency: 4113.38; Force constant: 0.6403 Force constant: 0.6403; X Y Z mass X Y Z mass ; O 0.000 0.000 0.049 15.994915 | O 0.000 0.000 0.197 15.994915; H 0.000 0.569 -0.392 1.007825 | H 0.000 0.571 -0.393 1.007825; H 0.000 -0.569 -0.392 1.007825 | H 0.000 -0.571 -0.393 1.007825. Frequency: 4212.15 | Frequency: 4212.18; Force constant: 0.6714 Force constant: 0.6714; X Y Z mass X Y Z mass ; O 0.000 0.068 0.000 15.994915 | O 0.000 0.271 0.000 15.994915; H 0.000 -0.537 0.414 1.007825 | H 0.000 -0.539 0.416 1.007825; H 0.000 -0.537 -0.414 1.007825 | H 0.000 -0.539 -0.416 1.007825. ... # # # #; Irrep: 1 Irrep: 1; 1: 1775.5835048 | 1: 1775.6479720; 2: 4113.4094219 | 2: 4113.3793970; 3: 4212",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/225:255,energy,energy,255,https://psicode.org,https://github.com/psi4/psi4/issues/225,1,['energy'],['energy']
Energy Efficiency,"So, this Ni(CO)3 calculation from #2209 currently fails in at least in STO-3G, def2-SVP, def2-QZVP and pcseg-0; ```; memory 8 gb. molecule {; Ni -0.593245 2.410696 -0.537392; C 0.947231 2.245835 0.358715; C -0.875896 1.446101 -2.018123; C -1.856239 3.533688 0.051349; O -1.061878 0.818754 -2.971879; O 1.943046 2.139891 0.937442; O -2.673940 4.257626 0.432247; }. set basis STO-3G; energy('pbe'); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/888#issuecomment-869292864:382,energy,energy,382,https://psicode.org,https://github.com/psi4/psi4/issues/888#issuecomment-869292864,1,['energy'],['energy']
Energy Efficiency,"So... looks like it works; DIIS just takes it to the wrong solution; ```; Total Energy Delta E RMS |[F,P]|. @DF-UHF iter SAD: -0.70872378254081 -7.08724e-01 0.00000e+00 ; Mixing alpha HOMO/LUMO orbitals (1,2). @DF-UHF iter 1: -0.82640393434897 -1.17680e-01 1.12200e-03 DIIS; @DF-UHF iter 2: -0.97800267490794 -1.51599e-01 1.18746e-02 DIIS; @DF-UHF iter 3: -0.82673929652084 1.51263e-01 9.92192e-04 DIIS; @DF-UHF iter 4: -0.82768446534307 -9.45169e-04 2.11271e-03 DIIS; @DF-UHF iter 5: -0.82648408142877 1.20038e-03 9.77585e-06 DIIS; @DF-UHF iter 6: -0.82648447847074 -3.97042e-07 3.83550e-05 DIIS; @DF-UHF iter 7: -0.82648407869393 3.99777e-07 1.24969e-06 DIIS; @DF-UHF iter 8: -0.82648407827585 4.18083e-10 7.42903e-08 DIIS; @DF-UHF iter 9: -0.82648407827446 1.38667e-12 8.54867e-10 DIIS; @DF-UHF iter 10: -0.82648407827446 7.77156e-16 1.13025e-12 DIIS; Energy and wave function converged.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2411#issuecomment-1016618643:80,Energy,Energy,80,https://psicode.org,https://github.com/psi4/psi4/pull/2411#issuecomment-1016618643,2,['Energy'],['Energy']
Energy Efficiency,"Some bottlenecks that should be easy to fix:. 1.) osrecur.cc:998 Allocates (a tiny bit) of space on the heap. Can be fixed with an array on the stack; 2.) The calculate_f function; 3.) It might help to allocate just a contiguous array of memory in ""init_box"", etc. Just changing the allocation of F from heap to stack improved the timings by 10-20% for overlap, up to 50% for ao_potential in my tests (would be interesting if you can verify that). Thread scaling is better, but could still be improved I think. I may need to get timings for bigger tests",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/592#issuecomment-276222956:65,Allocate,Allocates,65,https://psicode.org,https://github.com/psi4/psi4/pull/592#issuecomment-276222956,2,"['Allocate', 'allocate']","['Allocates', 'allocate']"
Energy Efficiency,"Some comments for posterity:; * The Coulomb terms also come from the derivatives of two-electron integrals. You can (and for efficiency should) contract the TEI derivatives against the 1RDM to get the Coulomb terms. Conceptually, this is the interaction of an orbital with the mean field of all orbitals. It's not a pure one-electron interaction, but it's close enough.; * For purposes of thinking about the implementation, this issue is two very different ones: (1) exposing the existing pieces of the SCF gradient and (2) further decomposing those pieces into per-orbital contributions, where applicable. (1) is as easy as setting array variables on the wavefunction. Per-orbital contributions aren't even computed, as they shouldn't be in an efficient code, so (2) is non-trivial.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2130#issuecomment-797125091:745,efficient,efficient,745,https://psicode.org,https://github.com/psi4/psi4/issues/2130#issuecomment-797125091,1,['efficient'],['efficient']
Energy Efficiency,"Some more information:; As I said above, for H2O the orbital energies and coeffcients are printed out in the FCHK file, but the field headers are not standard. They are:. - orbital energies ; - MO coefficients. This is not the case for Psi4 1.1 where these headers are; - Alpha Orbital Energies; - Alpha MO coefficients. Why was this change made? . Input file below:. > memory 61440 MB; > ; > basis {; > assign aug-cc-pvdz; > }; > ; > molecule H2O_1 {; > no_reorient; > no_com; > units bohr; > 0 1; > O1 0.0 0.0 0.1246319249; > H1 -1.4536519623 0.0 -0.9970553993; > H2 1.4536519623 0.0 -0.9970553993; > }; > set {; > s_tolerance 1.0E-08; > ints_tolerance 1.0E-10; > }; > ; > energy, wfn = energy('PBE0', return_wfn=True); > ; > fchk_writer = psi4.FCHKWriter(wfn); > fchk_writer.write('H2O_minimal.fchk')",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1501#issuecomment-458640727:675,energy,energy,675,https://psicode.org,https://github.com/psi4/psi4/issues/1501#issuecomment-458640727,2,['energy'],['energy']
Energy Efficiency,"Some tests from the original issue on a 48 core Intel Xeon Gold 5120 Linux box, with OneAPI compilers (version 2021.2.0) as well as GCC 7.1, with and without the bug fixed:. | Compiler | #Threads | wcombine | Bug fixed? | Energy (Eh) | Still Bad? |; |----------|----------|----------|------------|--------------------|----|; | OneAPI | 1 | True | False | -1963.7577 8206 1252* | yes |; | OneAPI | 8 | True | False | did not converge | yes |; | OneAPI | 1 | False | False | -1963.7615 9009 8066 |; | OneAPI | 8 | False | False | -1962.6864 3082 1442 | yes |; | OneAPI | 1 | True | True | -1963.7615 2234 6426 |; | OneAPI | 8 | True | True | -1963.7615 2417 8940 |; | OneAPI | 1 | False | True | -1963.7615 5899 4243 |; | OneAPI | 8 | False | True | -1963.7615 5898 3752 |; | GCC | 1 | True | False | -1963.7587 7038 0348 | yes |; | GCC | 8 | True | False | -1963.7587 7038 0374 | yes |; | GCC | 1 | False | False | -1963.7615 8294 3193 |; | GCC | 8 | False | False | -1963.7615 8294 3197 |; | GCC | 1 | True | True | -1963.7615 8460 3790 |; | GCC | 8 | True | True | -1963.7615 8460 3791 |; | GCC | 1 | False | True | -1963.7615 5884 0375 |; | GCC | 8 | False | True | -1963.7615 5884 0376 |",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2283#issuecomment-904776872:222,Energy,Energy,222,https://psicode.org,https://github.com/psi4/psi4/pull/2283#issuecomment-904776872,1,['Energy'],['Energy']
Energy Efficiency,"Some things to add to the wishlist from my end:. - [ ] Update COSX to support arbitrary grids via modification of X-matrix handling (see https://github.com/psi4/psi4/issues/2890 for further details).; * Susi notes: I don’t think one needs a separate formulation, just propagating the sign to the A tensor would suffice since it carries a grid index; * Further update: this wish is now addressed in https://github.com/psi4/psi4/pull/2931.; - [ ] Add CFMM and/or DF-CFMM to Psi4 officially. These already exist in Psi4 development branches, but need to be updated to match modern Psi4 developments (e.g., current formulations of CompositeJK) and actually put into Psi4. The first PR for these methods already exists (https://github.com/psi4/psi4/pull/2665).; - [ ] Support for [J-Engine](https://doi.org/10.1063/1.470986). J-Engine is a nice algorithm by the Head-Gordon group to help reduce the prefactor of J-build calculations via reformulation of how integral intermediates are formed and contracted with the density matrix to form Coulomb matrix elements. As it deals with shuffling around how integral intermediates are formed and combined with the density, any J-Engine effort will likely require coordination with the Valeev group and development within Libint2 itself (although the Valeev group did seem interested in J-Engine from what discussions I had with their researchers). ; - [ ] Support for mixed basis sets in TwoBodyAOInt sieving.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/402#issuecomment-1509131763:883,reduce,reduce,883,https://psicode.org,https://github.com/psi4/psi4/issues/402#issuecomment-1509131763,1,['reduce'],['reduce']
Energy Efficiency,"Something is ... not right. I'm looking into this now, but the basis guess gives a PBE energy of `-13988.27302270776818` Eh, both on my workstation and on our cluster ... trying to track this down now.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/888#issuecomment-432344773:87,energy,energy,87,https://psicode.org,https://github.com/psi4/psi4/issues/888#issuecomment-432344773,1,['energy'],['energy']
Energy Efficiency,"Something like this is an excellent idea. On Tue, Jun 26, 2018 at 11:15 AM Daniel Smith <notifications@github.com>; wrote:. > I have seen folks try the following several times:; >; > e, wfn = energy('MP2', return_wfn=True); > oeprop(wfn); >; > which will return the HF properties as MP2 densities are costly to; > compute, the same is true with CCSD and others. To help alleviate confusion; > I would add a few lines here; > <https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/oeprop.cc#L866>; > in the OEProp compute call that would highlight the name of the density; > matrix. A line like the following could be appropriate:; >; > if (title_ == """"){; > outfile->Printf(""OEProp: No title given, name of density matrix used for the following properties is %s\n"", Da_so_->name().c_str());; > }; >; > This should give folks some hint that things may not be as they appear.; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/1055>, or mute the thread; > <https://github.com/notifications/unsubscribe-auth/AC9Qdm83GNlNX1pZQY31qL_iHYoua4E4ks5uAlAGgaJpZM4U4J0b>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1055#issuecomment-400498443:192,energy,energy,192,https://psicode.org,https://github.com/psi4/psi4/issues/1055#issuecomment-400498443,1,['energy'],['energy']
Energy Efficiency,"Somewhat related to issue 556 and pull 588, if you set nat_orbs to true and run a CI calculation, you don't get the natural orbital occupations in the output, whereas if you're running CASSCF you get a nice printout. . I'm guessing the NOONs should get printed out, since the output file does say; ```; Computing CI Natural Orbitals; !Warning: New orbitals will be sorted by occuption number,; orbital spaces (occ/act/vir) may change.; ```. Example input; ```; molecule {; 0 1; symmetry c1; C; C 1 1.0; }. set basis cc-pVDZ; set scf_type pk; set nat_orbs true; set wfn detci; set restricted_docc [2]. # Run CISDT; cas_e, cas_wfn = energy('cisdt', return_wfn=True); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/590:631,energy,energy,631,https://psicode.org,https://github.com/psi4/psi4/issues/590,1,['energy'],['energy']
Energy Efficiency,"Sorry @avcopan, I saw all the `@IRC`s in that gist above and thought opt7 was an unlabeled IRC. But that was for opt-irc-2, which should be fixed now. opt7 fails on a few systems (https://testboard.org/cdash/testSummary.php?project=3&name=opt7&date=2016-03-01). This (https://testboard.org/cdash/testDetails.php?test=7810317&build=63640) looks like the most coherent error message (also copied below), if @psi-rking would like to examine it. ```; Optimizer: Optimization complete!; Int. Coord. RHF opt of HOOH with O-H fixed to 0.95, energy........PASSED; Optimizer: Optimization complete!; Int. Coord. RHF opt of HOOH with O-O-H fixed to 105, energy: computed value (-150.7861731) does not match (-150.7861769) to 6 decimal places.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/253#issuecomment-190956405:534,energy,energy,534,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-190956405,2,['energy'],['energy']
Energy Efficiency,"Sorry I realize my example was incomplete.; I used the following options:. ```; psi4.set_options({'basis': 'STO-3G-DECON',; 'reference': 'rohf',; 'scf_type': 'direct',; 'guess': 'sad',; 'puream':true}); ```. I then used @hokru 's trick to set the ```DF_BASIS_SCF``` object. I modified the active space (using ```RESTRICTED_DOCC``` instead of ```FROZEN_DOCC``` and only 4 active orbitals) and I also get the Segmentation Fault in the property section. But the energy is there, which is already good enough for me right now, so thanks for the tip !",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1871#issuecomment-615494761:459,energy,energy,459,https://psicode.org,https://github.com/psi4/psi4/issues/1871#issuecomment-615494761,1,['energy'],['energy']
Energy Efficiency,"Sorry for messing the fix up, and thanks for diagnosing it, @jgonthier . No, it doesn't look like the driver is touching `df_scf_guess`. read_options defaults it to `on`, but otherwise only `hf.cc` handles that option. Ah, yes, I see what you mean at L1969. If the path to resolve this is clear to you, then yes, please, go ahead and do so, @jgonthier . I'm sort of with @fevangelista that I don't see that we need to facilitate `df_scf_guess` for non-`direct` since it doesn't change the convergence behaviour or reduce quantities to compute. Maybe also change. ``` c++; /*- Use DF integrals tech to converge the SCF before switching to a conventional tech -*/; options.add_bool(""DF_SCF_GUESS"", true);; ```. to. ``` c++; /*- Use DF integrals tech to converge the SCF before switching to a conventional tech; in a |scf__scf_type| ``DIRECT`` calculation -*/; options.add_bool(""DF_SCF_GUESS"", true);; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/281#issuecomment-189416253:514,reduce,reduce,514,https://psicode.org,https://github.com/psi4/psi4/issues/281#issuecomment-189416253,1,['reduce'],['reduce']
Energy Efficiency,"Sorry for not checking the PRs for a few days. Yes, this is ready to go and I think it should be merged because it does reduce the MRPT memory usage. The transition from IWL that we mentioned should be done at some point for consistency with other codes, but it won't gain any new functionality.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/296#issuecomment-208381486:120,reduce,reduce,120,https://psicode.org,https://github.com/psi4/psi4/pull/296#issuecomment-208381486,1,['reduce'],['reduce']
Energy Efficiency,"Sorry for taking such a long time on this. @loriab the `input.dat` in `pcmsolver/scf` now shows how to recover files from scratch:; ```python; pid = str(os.getpid()); scratch_dir = os.path.join(core.IOManager.shared_object().get_default_path(), 'psi.' + pid + '.pcmsolver'); pcm_save = reduce(lambda l1, l2 : l1 + l2, (glob.glob(t) for t in [scratch_dir + '*/' + x for x in ['cavity.off__' + pid, 'PEDRA.OUT__' + pid, 'cavity.npz']])); filter(lambda x : shutil.copy(x, psi4.extras.get_input_directory()), pcm_save); ```; Maybe it's an interesting bit for `p4util/util.py`.; The `input.dat` for the `pcmsolver/dipole` test now uses the `perturb_h`, `perturb_with` and `perturb_dipole` parameters. Surprise, surprise, the test is **failing**. After checking the PCM set up, basis, SCF start guess and all other obvious culprits, I found out that the nuclear energy is **different** from the one in the reference file. Do you and/or @andysim and/or @dgasmith have any idea why this could be?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/665#issuecomment-291492708:286,reduce,reduce,286,https://psicode.org,https://github.com/psi4/psi4/pull/665#issuecomment-291492708,2,"['energy', 'reduce']","['energy', 'reduce']"
Energy Efficiency,"Sorry to keep making you write, but is the ""big picture"" view of nbody documented _anywhere_? I can't follow what `energy_body_dict` means, or why the value of one of its entries is coupled to whether the total energy is available. I fear this is a case where there is a _lot_ of ""developer was only coding to be comprehensible to themselves"" code debt.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2221#issuecomment-871765509:211,energy,energy,211,https://psicode.org,https://github.com/psi4/psi4/pull/2221#issuecomment-871765509,1,['energy'],['energy']
Energy Efficiency,"Sorry, I only just saw this thread. I don't know if this is useful, but here's some code that computes a DFT wavefunction as a simple way to set up a DFT integration grid. It then uses that integration grid to integrate the electron density at the HF level in this example. Most of this was stolen from @dgasmith ; ``` python; import psi4; import numpy as np; np.set_printoptions(suppress=True, precision=4, linewidth=150). mol = psi4.geometry(""""""; O 0.000000000000 0.000000000000 -0.071143036192; H 0.000000000000 -0.758215806856 0.564545805801; H 0.000000000000 0.758215806856 0.564545805801; symmetry c1; """"""). psi4.set_options({""BASIS"": ""sto-3g"",; ""DFT_BLOCK_MAX_POINTS"": 2048,; ""DFT_BASIS_TOLERANCE"": 1.e-10}). method = ""HF""; e, wfn = psi4.energy(method, return_wfn=True); Da = np.array(wfn.Da()). # Vpot builder; _, wfn_V = psi4.energy(""SVWN"", return_wfn=True, molecule=mol); Vpot = wfn_V.V_potential(). points_func = Vpot.properties()[0]. # Loop over the blocks; nelectrons = 0.0; for b in range(Vpot.nblocks()):. # Metadata; block = Vpot.get_block(b); npoints = block.npoints(); lpos = np.array(block.functions_local_to_global()). # Obtain the grid weight; w = np.array(block.w()). # Compute phi!; points_func.compute_points(block); phi = np.array(points_func.basis_values()[""PHI""])[:npoints, :lpos.shape[0]]. # Build a local density; localDa = wfn.Da().np[(lpos[:, None], lpos)]. # Copmute rho; rho = 2.0 * np.einsum('pm,mn,pn->p', phi, localDa, phi, optimize=True); nelectrons += np.dot(w, rho); print(nelectrons); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1311#issuecomment-435946428:745,energy,energy,745,https://psicode.org,https://github.com/psi4/psi4/issues/1311#issuecomment-435946428,2,['energy'],['energy']
Energy Efficiency,"Sounds good. Check for natom==1, and if true assume for rovibrations only 1 state/no energy or entropy.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/332#issuecomment-204475629:85,energy,energy,85,https://psicode.org,https://github.com/psi4/psi4/issues/332#issuecomment-204475629,1,['energy'],['energy']
Energy Efficiency,"Sounds like a version mismatch. The `cp()` function was deprecated sometime last spring in favor of a `bsse_type='cp'` argument to `energy()`, as shown in [this section of the tutorial](http://psicode.org/psi4manual/master/tutorial.html#potential-surface-scans-and-counterpoise-correction-made-easy-with-psithon). It sounds like you've got a new version of Psi4 (latest ones [here](https://github.com/psi4/psi4/issues/466#issuecomment-272589229) but an old version of the tutorial. Use the latest versions of both and all should be well. If not, tell me more about what you're running (`psi4 --version`).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/653#issuecomment-287394510:132,energy,energy,132,https://psicode.org,https://github.com/psi4/psi4/issues/653#issuecomment-287394510,1,['energy'],['energy']
Energy Efficiency,"Standardized handling of ""/"" in method name between frequency, hessian, gradient, properties and energy. ## Description; - Use of `_cbs_gufunc` helper function consistently across `energy`, `hessian`, `gradient`, `frequency` and `properties`; - `_cbs_gufunc` throws an exception for unsupported ""true"" CBS calls to `frequency` and `properties`, ""method/basis"" syntax works; - all relevant tests pass, see below; - modified regex in `_parse_cbs_gufunc_string()` to correctly handle `sapt2+(3)/basis` calls or `method/6-311++G` calls; splitting now only happens on variants of `+ D:`. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Fix for #934 . ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/949:97,energy,energy,97,https://psicode.org,https://github.com/psi4/psi4/pull/949,2,['energy'],['energy']
Energy Efficiency,Start 243: ocepa-grad2; 89/412 Test #58: cc40 ............................. Passed 75.15 sec; Start 60: cc42; 90/412 Test #82: cc9 .............................. Passed 62.16 sec; Start 108: dcft1; 91/412 Test #57: cc4 .............................. Passed 57.29 sec; Start 35: cc19; 92/412 Test #114: dcft7 ............................ Passed 393.99 sec; Start 66: cc48; 93/412 Test #69: cc50 ............................. Passed 73.08 sec; Start 101: ci-property; 94/412 Test #78: cc8 .............................. Passed 58.53 sec; Start 65: cc47; 95/412 Test #245: ocepa2 ........................... Passed 85.34 sec; Start 28: cc13c; 96/412 Test #251: omp2-5 ........................... Passed 85.48 sec; Start 67: cc49; 97/412 Test #80: cc8b ............................. Passed 50.08 sec; Start 55: cc38; 98/412 Test #298: pubchem1 ......................... Passed 62.79 sec; Start 257: omp2p5-grad2; 99/412 Test #60: cc42 ............................. Passed 63.53 sec; Start 72: cc53; 100/412 Test #193: fd-freq-energy ................... Passed 94.52 sec; Start 157: dfomp2p5-grad2; 101/412 Test #35: cc19 ............................. Passed 71.33 sec; Start 148: dfomp3-2; 102/412 Test #101: ci-property ...................... Passed 60.88 sec; Start 163: dft-grad-meta; 103/412 Test #66: cc48 ............................. Passed 63.96 sec; Start 27: cc13b; 104/412 Test #243: ocepa-grad2 ...................... Passed 84.44 sec; Start 74: cc55; 105/412 Test #108: dcft1 ............................ Passed 97.71 sec; Start 19: cbs-xtpl-nbody; 106/412 Test #55: cc38 ............................. Passed 58.64 sec; Start 300: pywrap-alias; 107/412 Test #65: cc47 ............................. Passed 80.60 sec; Start 141: dfomp2-2; 108/412 Test #67: cc49 ............................. Passed 72.11 sec; Start 171: dft1-alt; 109/412 Test #72: cc53 ............................. Passed 57.83 sec; Start 73: cc54; 110/412 Test #26: cc13a ............................ Passed 508.31 sec; Star,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1221#issuecomment-419096646:9555,energy,energy,9555,https://psicode.org,https://github.com/psi4/psi4/pull/1221#issuecomment-419096646,1,['energy'],['energy']
Energy Efficiency,Start 325: scf-bz2; 7/411 Test #205: frac-traverse .................... Passed 247.88 sec; Start 1: adc1; 8/411 Test #1: adc1 ............................. Passed 27.30 sec; Start 2: adc2; 9/411 Test #113: dcft7 ............................ Passed 318.32 sec; Start 3: casscf-fzc-sp; 10/411 Test #3: casscf-fzc-sp .................... Passed 6.14 sec; Start 4: casscf-semi; 11/411 Test #4: casscf-semi ...................... Passed 2.45 sec; Start 5: casscf-sa-sp; 12/411 Test #2: adc2 ............................. Passed 46.87 sec; Start 6: ao-casscf-sp; 13/411 Test #394: python-vibanalysis ............... Passed 861.59 sec; Start 7: casscf-sp; 14/411 Test #6: ao-casscf-sp ..................... Passed 4.76 sec; Start 8: castup1; 15/411 Test #8: castup1 .......................... Passed 1.98 sec; Start 9: castup2; 16/411 Test #5: casscf-sa-sp ..................... Passed 10.00 sec; Start 10: castup3; 17/411 Test #9: castup2 .......................... Passed 8.90 sec; Start 11: cbs-delta-energy; 18/411 Test #325: scf-bz2 .......................... Passed 137.96 sec; Start 12: cbs-parser; 19/411 Test #7: casscf-sp ........................ Passed 13.43 sec; Start 13: cbs-xtpl-alpha; 20/411 Test #10: castup3 .......................... Passed 9.55 sec; Start 14: cbs-xtpl-energy; 21/411 Test #14: cbs-xtpl-energy .................. Passed 15.41 sec; Start 15: cbs-xtpl-freq; 22/411 Test #15: cbs-xtpl-freq .................... Passed 9.22 sec; Start 16: cbs-xtpl-gradient; 23/411 Test #12: cbs-parser ....................... Passed 34.00 sec; Start 17: cbs-xtpl-opt; 24/411 Test #16: cbs-xtpl-gradient ................ Passed 27.35 sec; Start 19: cbs-xtpl-wrapper; 25/411 Test #278: opt13 ............................ Passed 937.76 sec; Start 20: cc1; 26/411 Test #11: cbs-delta-energy ................. Passed 87.39 sec; Start 21: cc10; 27/411 Test #20: cc1 .............................. Passed 39.26 sec; Start 22: cc11; 28/411 Test #21: cc10 ............................. Passed 16.76 se,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1091#issuecomment-409148219:1852,energy,energy,1852,https://psicode.org,https://github.com/psi4/psi4/pull/1091#issuecomment-409148219,1,['energy'],['energy']
Energy Efficiency,Start 383: psi4numpy-rhf-gradient; 363/411 Test #328: scf-upcast-custom-basis .......... Passed 1.36 sec; Start 408: skeletonmointegrals; 364/411 Test #8: castup1 .......................... Passed 1.23 sec; Start 362: x2c3; 365/411 Test #395: python-mints13 ................... Passed 1.90 sec; Start 398: json-v11-gradient; 366/411 Test #390: python-mints9 .................... Passed 1.91 sec; Start 352: stability2; 367/411 Test #383: psi4numpy-rhf-gradient ........... Passed 0.97 sec; Start 353: tu1-h2o-energy; 368/411 Test #408: skeletonmointegrals .............. Passed 0.95 sec; Start 96: cisd-h2o-clpse; 369/411 Test #221: mints9 ........................... Passed 1.94 sec; Start 403: json-schema-1-gradient; 370/411 Test #398: json-v11-gradient ................ Passed 0.96 sec; Start 327: scf-guess-read1; 371/411 Test #352: stability2 ....................... Passed 0.88 sec; Start 333: scf2; 372/411 Test #362: x2c3 ............................. Passed 1.46 sec; Start 334: scf3; 373/411 Test #353: tu1-h2o-energy ................... Passed 1.10 sec; Start 288: psimrcc-ccsd_t-2; 374/411 Test #96: cisd-h2o-clpse ................... Passed 1.20 sec; Start 400: json-schema-1-ghost; 375/411 Test #334: scf3 ............................. Passed 0.73 sec; Start 287: psimrcc-ccsd_t-1; 376/411 Test #403: json-schema-1-gradient ........... Passed 1.22 sec; Start 289: psimrcc-ccsd_t-3; 377/411 Test #333: scf2 ............................. Passed 1.28 sec; Start 410: skeletonsointegrals; 378/411 Test #327: scf-guess-read1 .................. Passed 1.34 sec; Start 210: mcscf2; 379/411 Test #400: json-schema-1-ghost .............. Passed 1.01 sec; Start 411: skeletonwavefunction; 380/411 Test #288: psimrcc-ccsd_t-2 ................. Passed 1.53 sec; Start 229: mp2-grad2; 381/411 Test #287: psimrcc-ccsd_t-1 ................. Passed 1.31 sec; Start 298: pubchem2; 382/411 Test #289: psimrcc-ccsd_t-3 ................. Passed 1.35 sec; Start 102: decontract; 383/411 Test #410: skeleton,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1075#issuecomment-409598225:34787,energy,energy,34787,https://psicode.org,https://github.com/psi4/psi4/pull/1075#issuecomment-409598225,1,['energy'],['energy']
Energy Efficiency,Start 399: json-schema-1-energy; 314/411 Test #351: dft-reference .................... Passed 4.90 sec; Start 384: psi4numpy-rhf-hessian; 315/411 Test #377: pywrap-align-chiral .............. Passed 3.04 sec; Start 136: dfmp2-grad3; 316/411 Test #116: ao-dfcasscf-sp ................... Passed 6.35 sec; Start 225: mom; 317/411 Test #310: rasci-c2-active .................. Passed 9.23 sec; Start 213: mints2; 318/411 Test #385: psi4numpy-fci .................... Passed 9.16 sec; Start 397: json-v11-energy; 319/411 Test #370: scf-coverage ..................... Passed 11.16 sec; Start 328: scf-upcast-custom-basis; 320/411 Test #135: dfmp2-grad2 ...................... Passed 15.32 sec; Start 327: scf-guess-read1; 321/411 Test #314: sad1 ............................. Passed 5.26 sec; Start 391: python-mints2; 322/411 Test #234: mp3-grad2 ........................ Passed 9.93 sec; Start 362: x2c3; 323/411 Test #284: props1 ........................... Passed 7.76 sec; Start 228: mp2-grad1; 324/411 Test #399: json-schema-1-energy ............. Passed 5.52 sec; Start 271: opt5; 325/411 Test #384: psi4numpy-rhf-hessian ............ Passed 3.49 sec; Start 233: mp3-grad1; 326/411 Test #213: mints2 ........................... Passed 2.95 sec; Start 262: omp3-grad1; 327/411 Test #85: cepa0-grad1 ...................... Passed 9.67 sec; Start 121: dfccdl1; 328/411 Test #328: scf-upcast-custom-basis .......... Passed 2.52 sec; Start 356: scf-response1; 329/411 Test #190: fci-coverage ..................... Passed 13.09 sec; Start 361: x2c2; 330/411 Test #327: scf-guess-read1 .................. Passed 2.57 sec; Start 246: omp2-1; 331/411 Test #397: json-v11-energy .................. Passed 3.24 sec; Start 255: omp2p5-grad1; 332/411 Test #225: mom .............................. Passed 3.92 sec; Start 332: scf-occ; 333/411 Test #391: python-mints2 .................... Passed 2.61 sec; Start 345: dfep2-2; 334/411 Test #362: x2c3 ............................. Passed 2.55 sec; Start 229: mp2-g,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1072#issuecomment-406602307:30441,energy,energy,30441,https://psicode.org,https://github.com/psi4/psi4/pull/1072#issuecomment-406602307,1,['energy'],['energy']
Energy Efficiency,"Still a problem with new CI code. Full error:. ```; PSIO_ERROR: Can't find TOC Entry buffer_ 0; PSIO_ERROR: unit = 53, errval = 13; PSIO_ERROR: 13 (no such TOC entry); Traceback (most recent call last):; File ""<string>"", line 41, in <module>; File ""/theoryfs2/ds/richard/SrcFiles/psi4clean/lib/python/driver.py"", line 647, in energy; procedures['energy'][lowername](lowername, **kwargs); File ""/theoryfs2/ds/richard/SrcFiles/psi4clean/lib/python/proc.py"", line 2797, in run_detci; psi4.detci(); RuntimeError: ; Fatal Error: PSIO Error; Error occurred in file: /theoryfs2/ds/richard/SrcFiles/psi4clean/src/lib/libpsio/error.cc on line: 123; The most recent 5 function calls were:. psi::PsiException::PsiException(std::string, char const*, int); psi::psio_error(unsigned int, unsigned int); psi::PSIO::read(unsigned int, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::psio_read(unsigned int, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::psio_read_entry(unsigned int, char const*, char*, unsigned long); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/83#issuecomment-170686261:326,energy,energy,326,https://psicode.org,https://github.com/psi4/psi4/issues/83#issuecomment-170686261,2,['energy'],['energy']
Energy Efficiency,Strange MBIS charges for molecules with Iodine when using DDX and def2-TZVPPD basis,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3135:13,charge,charges,13,https://psicode.org,https://github.com/psi4/psi4/issues/3135,1,['charge'],['charges']
Energy Efficiency,"Suppose we are performing an IRC starting from a transition state that is very tightly converged. An IRC will converge to that transition state, rather than the minima. ## Psi4 Internals Explanation. optking.cc::349 will call the irc_step function beginning opt_data.cc::98. Now proceed to line opt_data.cc::221. The lines below that will return true if the molecule is converged. Because the transition state was tightly converged, the function will return true. **Comparison with a non-bugged case shows this is unexpected behavior.**. converged is true and this is an IRC type optimization, so we enter optking.cc::392, the point_converged function. molecule_irc_step.cc::83 shows this causes an IRC step to be taken immediately - before the energy or the gradient have been updated from the last step. OPTKING then sees we are not at the first step but the gradient is zero and assumes we have truly converged. It terminates the IRC. ## Previous Fix Attempts. I attempted to fix this just by having the IRC return false for Step 0 of an IRC, but in some cases I found that it would converge on Step 1 instead. We'll need a smarter way to make sure we don't converge to a TS, possibly checking for negative Hessian eigenvalues. I would do this myself, but after some of the other Optking issues I've run into this, this is much less of a personal priority. Hopefully, PyOptKing will automatically take care of this. ## Minimal Demonstration Files. Demonstrated for four atoms at the SCF level. Even including the Hessian calculation, this took less than two minutes on our cluster. [input.txt](https://github.com/psi4/psi4/files/1471977/input.txt); [output.txt](https://github.com/psi4/psi4/files/1471978/output.txt)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/859:745,energy,energy,745,https://psicode.org,https://github.com/psi4/psi4/issues/859,1,['energy'],['energy']
Energy Efficiency,"Sure! I need to calculate the integrals of AOs ERI between different molecules at different locations. Eventually, I need to calculate Hartree-like energy BETWEEN two molecules, i.e. $\int drdr' \frac{n_{mol1}(r)n_{mol2}(r')}{|r-r'|}$.; I can define a Psi4 geometry and basis set of two molecules together and calculate the ao_eri of that entire basis set. But this will take a little more calculation and memory.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2439#issuecomment-1038496348:148,energy,energy,148,https://psicode.org,https://github.com/psi4/psi4/issues/2439#issuecomment-1038496348,1,['energy'],['energy']
Energy Efficiency,"Sure, go ahead and add to this PR. Branch is in my acct now so you can push to it. . Yeah, the distelli thing is weird. So fat, always fails first time, always passes second time. . Sent from my iPhone. > On Sep 23, 2016, at 9:23 AM, Daniel Smith notifications@github.com wrote:; > ; > @loriab It looks like I forget to reimplement in driver. My plan was to move it to energy/gradient/etc so that it would be universal. I need to add MOWriter to proc/scf_helper and probably proc/mcscf as well. Should I just add it to this PR?; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub, or mute the thread.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/472#issuecomment-249195924:369,energy,energy,369,https://psicode.org,https://github.com/psi4/psi4/pull/472#issuecomment-249195924,1,['energy'],['energy']
Energy Efficiency,"Sure, here is the script:. ```; import time; import sys; import os; import json. import psi4. def run_fxyz(fxyz, theory='wB97X-D3/def2-TZVP'):; '''; fxyz: absolute path to an xyz file; '''; elements, xyz = [], []; with open(fxyz) as f:; line = next(f); numb_atoms = int(line.split()[0]); line = next(f); charge, multiplicity = map(int, line.split()); for i in range(numb_atoms):; line = next(f); elmnt, x, y, z = line.split() ; elements.append(elmnt); xyz.append((float(x), float(y), float(z))). fxyz = os.path.basename(fxyz); base, ext = os.path.splitext(fxyz). name = base + '_wB97XD3_def2-TZVP'. geom_string = '\n'.join(['%s %f %f %f' % (e, x, y, z) for e, (x, y, z) in zip(elements, xyz)]); geom_string = str(charge) + ' ' + str(multiplicity) + '\n' + geom_string; print(""geom_string"", geom_string). outfile = name + '.psi4'; psi4.core.set_output_file(outfile, False); geom = psi4.geometry(geom_string); settings = {; 'scf_type': 'DF',; 'dft_basis_tolerance': 1e-10,; 'ints_tolerance': 1e-10,; 'dft_pruning_scheme':'robust',; 'S_ORTHOGONALIZATION': 'PARTIALCHOLESKY',; 'S_CHOLESKY_TOLERANCE': 1e-6,; 'wcombine': False,; }; psi4.set_options(settings); start_time = time.time(); grad = psi4.gradient(theory) ; psi4.core.print_variables(); energy = psi4.variable(""SCF TOTAL ENERGY""); psi4.core.clean(); jobtime = time.time() - start; results = {; ""time"": float(jobtime),; ""energy"": energy,; ""gradient"": grad; }. with open(name + "".json"", ""w"") as fout:; json.dump(results, fout, indent=4). print(""Job %s completed in %.2f seconds with energy %.10f"" % (base, jobtime, energy)). def main(args):; assert args[1].endswith("".xyz""); psi4.set_num_threads(1); run_fxyz(args[1]). if __name__ == '__main__':; main(sys.argv); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2548#issuecomment-1100260046:304,charge,charge,304,https://psicode.org,https://github.com/psi4/psi4/issues/2548#issuecomment-1100260046,8,"['ENERGY', 'charge', 'energy']","['ENERGY', 'charge', 'energy']"
Energy Efficiency,"Sure, we can add a failure just like SCF if DETCI does not converge. We can also increase the number of default iterations. At the same time, this is a fairly difficult CI case with the hydrogens very extended, I'm not sure we want defaults to cover this area as in many other cases 100 CI iterations would indicate some sort of failure. . In two-step MCSCF exact CI iterations are not really all that desirable. Unless a user loosens the MCSCF gradient threshold significantly this likely has no bearing on MCSCF computations as the previous guess CI vector is nearly exact with respect to energy near solution. Even then, delta energy convergence conditions should pick this up.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/394#issuecomment-222842020:591,energy,energy,591,https://psicode.org,https://github.com/psi4/psi4/issues/394#issuecomment-222842020,2,['energy'],['energy']
Energy Efficiency,"Sure, we get a NaN because an occupied and a virtual eigenvalue have the exact same energy. Its an unphysical reference that we didn't anticipate. We probably wont patch this as its an extreme edge case.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/561#issuecomment-271457794:84,energy,energy,84,https://psicode.org,https://github.com/psi4/psi4/issues/561#issuecomment-271457794,1,['energy'],['energy']
Energy Efficiency,"Sure. When you do a complex Psi4 job with multiple computations and one global variable space, there's nothing preventing a fci/sto-3g followed by a hf/cc-pvqz from getting a value from `get_variable('FCI TOTAL ENERGY')` or a `DISPERSION CORRECTION` after a CC job. Whereas for `P::e.globals` you'd have to deliberately `clean_variables()`, variable attached to a wavefunction are more likely rationally related. (Though not always. We still have to delete `MP2 TOTAL ENERGY` after a double-hybrid DFT job.). Whereas the psi4 driver operates a lot with ""wavefunction passing"" with `return_wfn` and most useful info (primary return val, psivars, basisset, orbital info, mol) stored on it, the analogy with generic objects (e.g., no `psi4.core.Matrix`) is a QCSchema dictionary being passed around via `return_json` holding psivars (or ""qcvars"" to be generic). Multiple json/wfn structures can be organized into a CBS dict record to describe extrapolations or a findif dict record as you have done. This ""dict passing"" is how qcdb works. So `P::e.globals` --> `Wfn.variables_` gets quantities localized onto calculations. Then `Wfn.variables_` --> QCSchema `psi4:variables` gets quantities generic and serializable. Let me know if anything needs elaboration.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1375#issuecomment-441865136:211,ENERGY,ENERGY,211,https://psicode.org,https://github.com/psi4/psi4/issues/1375#issuecomment-441865136,2,['ENERGY'],['ENERGY']
Energy Efficiency,"Sure. ```; molecule {; 0 2; C; H 1 RCH; H 1 RCH 2 A; C 1 RCd 3 A 2 D180; H 4 RCH 1 A 3 D; C 4 RCs 5 A 2 D180; H 6 RCH 4 A 5 D180; C 6 RCd 7 A 4 D180; H 8 RCH 6 A 7 D180; C 8 RCs 9 A 6 D180; H 10 RCH 8 A 9 D180; C 10 RCd 11 A 8 D180; H 12 RCH 10 A 11 D180; C 12 RCs 13 A 10 D180; H 14 RCH 12 A 13 D180; C 14 RCd 15 A 12 D180; H 16 RCH 14 A 15 D180; C 16 RCs 17 A 14 D180; H 18 RCH 16 A 17 D180; H 18 RCH 16 A 19 D180. RCs=1.45; RCd=1.36; RCH=1.08; A=120.0; D=0.0; D180=180.0; }. set basis STO-3G; set reference rohf; set scf_type pk; set docc [ 28, 4 ]; set socc [ 0, 1 ]; set e_convergence 1e-13; set d_convergence 1e-13; set ints_tolerance 0.0; # Include 20% old density; set damping_percentage 20; # and stop damping once density has converged to 1e-3; set damping_convergence 1e-3. set dmrg wfn_irrep 1; set dmrg wfn_multp 2; set dmrg frozen_docc [ 9, 0 ]; set dmrg active [ 38, 9 ]. set dmrg dmrg_states [ 250, 250 ]; set dmrg dmrg_e_convergence [ 1e-8, 1e-8 ]; set dmrg dmrg_maxsweeps [ 10, 10 ]; set dmrg dmrg_noiseprefactors [ 0.05, 0.00 ]; set dmrg dmrg_dvdson_rtol [ 1e-5, 1e-8 ]; set dmrg dmrg_print_corr false; set dmrg dmrg_chkpt false. set dmrg dmrg_active_space loc; set dmrg dmrg_loc_random true. set dmrg dmrg_molden true # DMRG-CI pseudocanonical orbitals; set dmrg dmrg_density_ao true # DMRG-CI density in the AO basis. energy('dmrg-ci'); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/464#issuecomment-244575544:1339,energy,energy,1339,https://psicode.org,https://github.com/psi4/psi4/issues/464#issuecomment-244575544,1,['energy'],['energy']
Energy Efficiency,"Surprising that the low memory algorithm is faster! . I think in that case the output should be adapted to avoid confusion as there are warnings printed. Maybe also 'regular algorithm' can have a different name, but it's what other programs do, I suppose. https://github.com/psi4/psi4/blob/master/psi4/src/psi4/fnocc/lowmemory_triples.cc#L72; https://github.com/psi4/psi4/blob/master/psi4/src/psi4/fnocc/df_ccsd.cc#L659-L661; https://github.com/psi4/psi4/blob/master/psi4/src/psi4/fnocc/ccsd.cc#L780",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2003#issuecomment-687585556:96,adapt,adapted,96,https://psicode.org,https://github.com/psi4/psi4/pull/2003#issuecomment-687585556,1,['adapt'],['adapted']
Energy Efficiency,"Suspicious thing: the crash happens when `dpd_block_matrix` is called to allocate a 2612*12544 (~250 MiB) matrix, and it tries to ""Delete cache entries until there's enough memory or no more cache"". But that should not happen to begin with, especially with 16 GB of memory!. This means that _somehow_ this condition `((dpd_main.memory - dpd_main.memused) < size)` is evaluating `true`, when it probably should not. I am not sure why `dpd_block_matrix` uses this expression to check the amount of free memory instead of calling `dpd_memfree`:; ```; extern long int dpd_memfree() {; return dpd_main.memory - (dpd_main.memused - dpd_main.memcache + dpd_main.memlocked);; }; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2261#issuecomment-1247399130:73,allocate,allocate,73,https://psicode.org,https://github.com/psi4/psi4/issues/2261#issuecomment-1247399130,1,['allocate'],['allocate']
Energy Efficiency,"TEST; > ""SAPT DISP ENERGY"": -0.24398704, #TEST; > ""CURRENT ENERGY"": 0.01122234} #TEST; > ; > Eref_h_disp = {""SAPT ELST ENERGY"": -0.10197193, #TEST; > ""SAPT EXCH ENERGY"": 0.36569812, #TEST; > ""SAPT IND ENERGY"": -0.00840370, #TEST; > ""SAPT DISP ENERGY"": -0.26658499, #TEST; > ""CURRENT ENERGY"": -0.01126250} #TEST; > ; > Eref_h_fixed = {""SAPT ELST ENERGY"": -0.10197193, #TEST; > ""SAPT EXCH ENERGY"": 0.36569812, #TEST; > ""SAPT IND ENERGY"": -0.00840370, #TEST; > ""SAPT DISP ENERGY"": -0.26605283, #TEST; > ""CURRENT ENERGY"": -0.01073034} #TEST; > ; > molecule dimer {; > Ne; > --; > Ar 1 6.5; > units bohr; > }; > ; > set {; > basis aug-cc-pvdz; > scf_type df; > sapt_dft_grac_shift_a 0.203293; > sapt_dft_grac_shift_b 0.138264; > }; > ; > # No hybrid kernel & no exch-disp scaling & no deltaHF; > set SAPT_DFT_DO_DHF False; > set SAPT_DFT_DO_HYBRID False; > set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; > energy('sapt(dft)', molecule=dimer); > for k, v in Eref_nh.items(): #TEST; > if k in [""SAPT IND ENERGY"", ""CURRENT ENERGY""]:; > ref = (v - DHF) / 1000.0; > else:; > ref = v / 1000.0; > compare_values(ref, psi4.variable(k), 6, ""!hyb, xd=none, !dHF: "" + k) #TEST; > ; > # No hybrid kernel & no exch-disp scaling; > set SAPT_DFT_DO_DHF True; > set SAPT_DFT_DO_HYBRID False; > set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; > energy('sapt(dft)', molecule=dimer); > for k, v in Eref_nh.items(): #TEST; > compare_values(v / 1000.0, psi4.variable(k), 6, ""!hyb, xd=none, dHF: "" + k) #TEST; > ; > # Hybrid kernel & exch-disp scaling (DISP); > set SAPT_DFT_DO_HYBRID True; > set SAPT_DFT_EXCH_DISP_SCALE_SCHEME disp; > energy('sapt(dft)', molecule=dimer); > for k, v in Eref_h_disp.items(): #TEST; > compare_values(v / 1000.0, psi4.variable(k), 6, ""hyb, xd=disp, dHF: "" + k) #TEST; > ; > # Hybrid kernel & exch-disp scaling (FIXED); > set SAPT_DFT_DO_HYBRID True; > set SAPT_DFT_EXCH_DISP_SCALE_SCHEME fixed ; > set SAPT_DFT_EXCH_DISP_FIXED_SCALE 0.770; > energy('sapt(dft)', molecule=dimer); > for k, v in Eref_h_fixed.i",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2481#issuecomment-1284653967:2171,ENERGY,ENERGY,2171,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1284653967,2,['ENERGY'],['ENERGY']
Energy Efficiency,Tagging @JonathonMisiewicz : ; [3he.txt](https://github.com/psi4/psi4/files/5140334/3he.txt); ```; 	IRREP FC AOCC BOCC AVIR BVIR FV ; 	==========================================; 	 Ag 0 2 0 0 2 0; 	 B1g 0 0 0 0 0 0; 	 B2g 0 0 0 0 0 0; 	 B3g 0 0 0 0 0 0; 	 Au 0 0 0 0 0 0; 	 B1u 0 0 0 1 1 0; 	 B2u 0 0 0 1 1 0; 	 B3u 0 0 0 1 1 0; 	==========================================. 	Computing MP2 energy using SCF MOs (Canonical MP2)... ; 	============================================================================== ; 	Nuclear Repulsion Energy (a.u.) : 0.00000000000000; 	SCF Energy (a.u.) : -1.40116327670131; 	REF Energy (a.u.) : -1.40116327670131; 	Alpha-Alpha Contribution (a.u.) : 0.00000000000000; 	Alpha-Beta Contribution (a.u.) : 0.00000000000000; 	Beta-Beta Contribution (a.u.) : 0.00000000000000; 	Scaled_SS Correlation Energy (a.u.): 0.00000000000000; 	Scaled_OS Correlation Energy (a.u.): 0.00000000000000; 	SCS-MP2 Total Energy (a.u.) : -1.40116327670131; 	SOS-MP2 Total Energy (a.u.) : -1.40116327670131; 	SCSN-MP2 Total Energy (a.u.) : -1.40116327670131; 	SCS-MP2-VDW Total Energy (a.u.) : -1.40116327670131; 	SOS-PI-MP2 Total Energy (a.u.) : -1.40116327670131; 	MP2 Correlation Energy (a.u.) : 0.00000000000000; 	MP2 Total Energy (a.u.) : -1.40116327670131; 	============================================================================== ; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1995#issuecomment-682348770:389,energy,energy,389,https://psicode.org,https://github.com/psi4/psi4/issues/1995#issuecomment-682348770,13,"['Energy', 'energy']","['Energy', 'energy']"
Energy Efficiency,"Take the following input script:. ```; molecule mol {; He 0 0 4; --; He 0 0 0; }. mol.update_geometry(); mol.print_out(). new_mol = mol.clone(); new_mol.print_out(); ```. and examine the output:. ```; Molecular point group: d2h; Full point group: D_inf_h. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass; ------------ ----------------- ----------------- ----------------- -----------------; HE 0.000000000000 0.000000000000 2.000000000000 4.002603254150; HE 0.000000000000 0.000000000000 -2.000000000000 4.002603254150. Full point group: D_inf_h. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass; ------------ ----------------- ----------------- ----------------- -----------------; HE 0.000000000000 0.000000000000 2.000000000000 4.002603254150; HE 0.000000000000 0.000000000000 -2.000000000000 4.002603254150; ```. The Molecule Point group does not get carried through, and some piece of data is missing so that `update_geometry` does not fix this either. In some circumstances this will cause a seg fault. Note that the clone function is somewhat awkward in molecule and causes both the copy and assignment constructors to be called. In the meantime we can use the following syntax:. ```; new_mol = psi4.Molecule.create_molecule_from_string(mol.create_psi4_string_from_molecule()); ```. Note, if you are running this on psi4/public you will probably notice that the `new_mol` does not have atoms, this bug has been fixed inside the wavefunction_pass update.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/235:280,charge,charge,280,https://psicode.org,https://github.com/psi4/psi4/issues/235,2,['charge'],['charge']
Energy Efficiency,Taking the Krypton dimer at 3 angstroms with the def2-QZVP basis we get:. ```; SCF Energy difference: 7.1e-10 [hartree]; AO potential norm: 2.1e-8; AO max diff: 5.1e-9. AO ERI norm: 4.6e-8; AO ERI max diff: 2.0e-9; ```. Kr is nice and heavy with up to G functions. We could test something like aug-cc-pVDZ-RI for H and I functions.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/592#issuecomment-277770423:83,Energy,Energy,83,https://psicode.org,https://github.com/psi4/psi4/pull/592#issuecomment-277770423,1,['Energy'],['Energy']
Energy Efficiency,Test #149: dfomp3-grad2 ..................... Passed 250.21 sec; Start 185: fci-h2o; 207/411 Test #71: cc53 ............................. Passed 97.98 sec; Start 252: omp2-grad2; 208/411 Test #376: pywrap-align ..................... Passed 4.72 sec; Start 107: dcft1; 209/411 Test #15: cbs-xtpl-freq .................... Passed 7.87 sec; Start 248: omp2-3; 210/411 Test #185: fci-h2o .......................... Passed 5.91 sec; Start 89: cepa3; 211/411 Test #20: cc1 .............................. Passed 198.16 sec; Start 147: dfomp3-2; 212/411 Test #89: cepa3 ............................ Passed 11.07 sec; Start 192: fd-freq-energy; 213/411 Test #144: dfomp2-grad2 ..................... Passed 87.37 sec; Start 37: cc22; 214/411 Test #248: omp2-3 ........................... Passed 19.53 sec; Start 341: soscf-ref; 215/411 Test #252: omp2-grad2 ....................... Passed 24.12 sec; Start 360: x2c1; 216/411 Test #151: dfomp2p5-2 ....................... Passed 29.24 sec; Start 81: cc9; 217/411 Test #192: fd-freq-energy ................... Passed 9.41 sec; Start 73: cc55; 218/411 Test #30: cc15 ............................. Passed 38.58 sec; Start 179: fsapt2; 219/411 Test #179: fsapt2 ........................... Passed 5.20 sec; Start 82: cc9a; 220/411 Test #341: soscf-ref ........................ Passed 9.34 sec; Start 10: castup3; 221/411 Test #37: cc22 ............................. Passed 22.33 sec; Start 77: cc8; 222/411 Test #10: castup3 .......................... Passed 20.61 sec; Start 80: cc8c; 223/411 Test #107: dcft1 ............................ Passed 58.98 sec; Start 171: dft2; 224/411 Test #171: dft2 ............................. Passed 6.62 sec; Start 266: opt1-fd; 225/411 Test #147: dfomp3-2 ......................... Passed 64.94 sec; Start 23: cc12; 226/411 Test #266: opt1-fd .......................... Passed 34.40 sec; Start 140: dfomp2-2; 227/411 Test #360: x2c1 ............................. Passed 82.77 sec; Start 313: rasscf-sp; 228/411 Test #73: cc55 .,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1089#issuecomment-408103972:20366,energy,energy,20366,https://psicode.org,https://github.com/psi4/psi4/pull/1089#issuecomment-408103972,1,['energy'],['energy']
Energy Efficiency,Test #3: casscf-fzc-sp .................... Passed 13.41 sec; Start 4: casscf-semi; 11/411 Test #4: casscf-semi ...................... Passed 9.02 sec; Start 5: casscf-sa-sp; 12/411 Test #325: scf-bz2 .......................... Passed 127.53 sec; Start 6: ao-casscf-sp; 13/411 Test #2: adc2 ............................. Passed 44.92 sec; Start 7: casscf-sp; 14/411 Test #6: ao-casscf-sp ..................... Passed 6.87 sec; Start 8: castup1; 15/411 Test #8: castup1 .......................... Passed 2.39 sec; Start 9: castup2; 16/411 Test #5: casscf-sa-sp ..................... Passed 19.18 sec; Start 10: castup3; 17/411 Test #9: castup2 .......................... Passed 9.54 sec; Start 11: cbs-delta-energy; 18/411 Test #10: castup3 .......................... Passed 18.56 sec; Start 12: cbs-parser; 19/411 Test #7: casscf-sp ........................ Passed 28.77 sec; Start 13: cbs-xtpl-alpha; 20/411 Test #394: python-vibanalysis ............... Passed 875.05 sec; Start 14: cbs-xtpl-energy; 21/411 Test #14: cbs-xtpl-energy .................. Passed 13.09 sec; Start 15: cbs-xtpl-freq; 22/411 Test #15: cbs-xtpl-freq .................... Passed 12.78 sec; Start 16: cbs-xtpl-gradient; 23/411 Test #278: opt13 ............................ Passed 926.59 sec; Start 17: cbs-xtpl-opt; 24/411 Test #16: cbs-xtpl-gradient ................ Passed 41.42 sec; Start 19: cbs-xtpl-wrapper; 25/411 Test #316: sapt2 ............................ Passed 364.06 sec; Start 20: cc1; 26/411 Test #12: cbs-parser ....................... Passed 96.67 sec; Start 21: cc10; 27/411 Test #21: cc10 ............................. Passed 41.74 sec; Start 22: cc11; 28/411 Test #19: cbs-xtpl-wrapper ................. Passed 87.45 sec; Start 23: cc12; 29/411 Test #17: cbs-xtpl-opt ..................... Passed 124.67 sec; Start 24: cc13; 30/411 Test #23: cc12 ............................. Passed 40.19 sec; Start 26: cc13b; 31/411 Test #22: cc11 ............................. Passed 65.06 sec; Start 27: cc13c; 32/411,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1067#issuecomment-409148828:2139,energy,energy,2139,https://psicode.org,https://github.com/psi4/psi4/pull/1067#issuecomment-409148828,2,['energy'],['energy']
Energy Efficiency,"Test case 32 from the FH51 subset of [GMTKN55](http://www.thch.uni-bonn.de/tc.old/downloads/GMTKN/GMTKN55/FH51ref.html) computes the isomerization energy between H2C-C5-CH2 and heptatriyne. So as to not to bury the lede: very strange energies result when running H2C-C5-CH2 with wB97X-3c, which I suspect are tied to this message:. ```; !!! WARNING: ECP capability is in beta. Please check occupations closely. !!!; ``` . The energy of H2C-C5-CH2 is computed to be -43.4074821405164926 Eh, and the energy of heptatriyne is computed to be -42.0459519798808898, leading to a predicted ∆E of -854 kcal/mol. The ""correct"" high-level value is -14.30 kcal/mol, and the authors of the wB97X-3c paper report an energy of -13.17 kcal/mol for this system. Similar results are seen when using B3LYP-D4/vDZP or r2SCAN-D4/vDZP, suggesting that vDZP is the common factor here. The orbital occupancies for H2C-C5-CH2 do seem a bit odd to me? I'm not used to seeing such low-energy virtual orbitals... ```; Orbital Energies [Eh]; ---------------------. Doubly Occupied: . 1A -1.094498 2A -1.062498 3A -1.041834 ; 4A -1.016695 5A -0.963137 6A -0.898331 ; 7A -0.834072 8A -0.703197 9A -0.700832 ; 10A -0.661618 11A -0.660116 12A -0.605235 ; 13A -0.596357 14A -0.526703 15A -0.507419 ; 16A -0.419207 . Virtual: . 17A -0.218606 18A -0.112811 19A -0.091525 ; 20A 0.037195 21A 0.048637 22A 0.051338 ; 23A 0.054059 24A 0.105612 25A 0.106004 ; 26A 0.174431 27A 0.193680 28A 0.196900 ; ```. Not sure what ECP factors could be driving these issues, or how to fix this, but thought I should raise an issue. Here's all the input and output files:. Input file for H2C-C5-CH2:; ```; molecule {; C -2.556271805455 -0.181690364655 -0.026620796492 ; C -1.282011805455 -0.085620364655 -0.016410796492 ; C -0.000441805455 0.006819635345 -0.003870796492 ; C 1.281348194545 0.095909635345 0.010599203508 ; C 2.556298194545 0.180969635345 0.026599203508 ; C 3.872538194545 0.268679635345 0.044049203508 ; H 4.487898194545 -0.251640364655 -",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3221:147,energy,energy,147,https://psicode.org,https://github.com/psi4/psi4/issues/3221,5,['energy'],['energy']
Energy Efficiency,"Test case:; ```; molecule {; 0 3; O; }. set reference rohf; set basis pcseg-1; set guess sad; energy('scf'); ```. Output before changes:; ```. Total Energy Delta E RMS |[F,P]|. @DF-ROHF iter 0: 28.43955367824759 2.84396e+01 0.00000e+00 ; @DF-ROHF iter 1: -74.75118310291205 -1.03191e+02 1.84153e-02 DIIS; @DF-ROHF iter 2: -74.75844495846947 -7.26186e-03 6.55338e-03 DIIS; @DF-ROHF iter 3: -74.75962778267566 -1.18282e-03 8.89743e-04 DIIS; @DF-ROHF iter 4: -74.75966293836538 -3.51557e-05 7.52761e-05 DIIS; @DF-ROHF iter 5: -74.75966326690698 -3.28542e-07 1.44805e-05 DIIS; @DF-ROHF iter 6: -74.75966327706121 -1.01542e-08 4.33092e-07 DIIS; Energy and wave function converged.; ```. Output after changes; ```; ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-ROHF iter SAD: -73.85293189670189 -7.38529e+01 0.00000e+00 ; @DF-ROHF iter 1: -74.75118310291205 -8.98251e-01 1.84153e-02 DIIS; @DF-ROHF iter 2: -74.75844495846947 -7.26186e-03 6.55338e-03 DIIS; @DF-ROHF iter 3: -74.75962778267566 -1.18282e-03 8.89743e-04 DIIS; @DF-ROHF iter 4: -74.75966293836538 -3.51557e-05 7.52761e-05 DIIS; @DF-ROHF iter 5: -74.75966326690698 -3.28542e-07 1.44805e-05 DIIS; @DF-ROHF iter 6: -74.75966327706121 -1.01542e-08 4.33092e-07 DIIS; Energy and wave function converged.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1493#issuecomment-457500670:94,energy,energy,94,https://psicode.org,https://github.com/psi4/psi4/pull/1493#issuecomment-457500670,5,"['Energy', 'energy']","['Energy', 'energy']"
Energy Efficiency,"Test subjects:; * `thread.py` from above (uses psi4 and np internally); * PsiAPI – has to import both; * Psithon – comment out both good and bad blocks above; * `tu1.py` below (uses psi4 internally so imports it); * Psi4 1.1 (add49) and current devel head Psi4. Findings:; * The SCF (tu1.py) scales as expected; * Psithon doesn't care if Numpy imported in bin/psi4; * Psithon takes orders from `psi4 -nN`; * Psithon & PsiAPI take orders preferentially from `psi4.set_num_threads(N)`; * Psithon & PsiAPI ignore :envvar:`MKL_NUM_THREADS`; * The DGEMM scaling thest (thread.py) behaves as previously described; * Psithon and PsiAPI thread if through the file itself or through bin/psi4 (if relevant) NumPy is imported before Psi4; * Psithon and PsiAPI _don't_ thread otherwise; * No difference btwn 1.1 and head (bad news for @schiebermc whose tests indicate something happened around June 14-15); * This contradicts @rmcgibbo's findings above, so maybe my MKLs are fighting; * Seem to be ok on most use cases, but not if doing detailed thread setting from input. ```; import psi4; #psi4.set_num_threads(6). def test_psi4_basic():; """"""tu1-h2o-energy""""""; #! Sample HF/cc-pVDZ H2O computation. h2o = psi4.geometry(""""""; O; H 1 0.96; H 1 0.96 2 104.5; """"""). psi4.set_options({'basis': ""aug-cc-pV5Z""}); psi4.energy('scf'). if __name__ == '__main__':; test_psi4_basic(); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/755#issuecomment-312397812:1140,energy,energy,1140,https://psicode.org,https://github.com/psi4/psi4/issues/755#issuecomment-312397812,2,['energy'],['energy']
Energy Efficiency,"Testing some calculations, I ran into very odd behavior in Psi4 1.3.2. The input; ```; molecule {; 0 2; Y; }. set basis seg-cc-pv5z-pp; set scf_type direct; set df_scf_guess false; set reference uhf; energy('scf'); ```; leads to the output; ```; ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. Occupation by irrep:; Ag B1g B2g B3g Au B1u B2u B3u ; DOCC [ 2, 0, 0, 0, 0, 1, 1, 1 ]; SOCC [ 0, 0, 0, 0, 0, 1, 0, 0 ]. @UHF iter 1: -33.78761858648352 -3.37876e+01 4.53671e-02 DIIS; Occupation by irrep:; Ag B1g B2g B3g Au B1u B2u B3u ; DOCC [ 1, 0, 0, 0, 0, 1, 1, 1 ]; SOCC [ 1, 1, 0, 1, 0, 0, 0, 0 ]. @UHF iter 2: -36.39804695906182 -2.61043e+00 2.16710e-02 DIIS; ```. For some reason, the occupation update changes the spin state from a doublet (one unpaired electron) to hextet (3 unpaired electrons). Basis set is attached. [seg-cc-pv5z-pp.gbs.txt](https://github.com/psi4/psi4/files/8247541/seg-cc-pv5z-pp.gbs.txt)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2476:200,energy,energy,200,https://psicode.org,https://github.com/psi4/psi4/issues/2476,2,"['Energy', 'energy']","['Energy', 'energy']"
Energy Efficiency,"Thank you for bring this to our attention! I was also able to recreate the bug using your example. I looked into it a little bit, and found something interesting. Particularly, it seems the presence of randomness is dependent on the size of the basis set. When one switches the basis set in your minimal example from STO-3G to STO-6G:. ```; diff minimal_example.py my_minimal_example.py ; 20c20; < 'pbe0/sto-3g',; ---; > 'pbe0/sto-6g',; ```. One seems randomness in the final answer, but to a decreased amount:. ```; python3 my_minimal_example.py --num_threads 6 --scf_type PK --element 1 --multiplicity 2; -0.18948320502566343; -0.18948320502566343; -0.19856521894753998; -0.18948320502566343; -0.18948320502566343; -0.3347954277756876; -0.18948320502566343; -0.18948320502566343; -0.18948320502566343; -0.18948320502566343; ```. That said, the answer PK commonly converges to here seems wrong anyway, as using DIRECT leads to an answer of -0.47102563660383534 h, and DF leads to the close answer of -0.4711430783826256 h. . When switching to the 3-21G basis set:; ```; diff minimal_example.py my_minimal_example.py ; 20c20; < 'pbe0/sto-3g',; ---; > 'pbe0/3-21g',; ```. Everything seems to look good:. ```; python3 my_minimal_example.py --num_threads 6 --scf_type PK --element ; 1 --multiplicity 2; -0.4964017399794977; -0.4964017399794977; -0.4964017399794977; -0.4964017399794977; -0.4964017399794977; -0.4964017399794977; -0.4964017399794977; -0.4964017399794977; -0.4964017399794977; -0.4964017399794977; ```. Consistent answers, and closely matching the DIRECT energy of -0.4964017399788503 h. These findings lead me to suspect that the issue you pointed out here is due to PK having issues handling calculations with extremely small basis function counts. Regardless, I shall look into this more. Thank you again for bringing this to our attention!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2760#issuecomment-1293529896:1567,energy,energy,1567,https://psicode.org,https://github.com/psi4/psi4/issues/2760#issuecomment-1293529896,1,['energy'],['energy']
Energy Efficiency,"Thank you for letting me know!. Regarding parallelization, nothing seems especially amiss. I can see `schedule(guided)` being preferred over `schedule(dynamic)` here. The comments look largely good to me, as well!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2824#issuecomment-1337777780:102,schedul,schedule,102,https://psicode.org,https://github.com/psi4/psi4/pull/2824#issuecomment-1337777780,2,['schedul'],['schedule']
Energy Efficiency,"Thank you for posting this!. I was looking into this some, and something popped up that quite troubled me. When I make the following changes to your minimal reproducing script:. ```; (p4devcf) dpoole34@ds6:~/Documents/Codes/psi4-scftype-bugfix/samples (master)$ diff scftype_bug_example.py scftype_bug_example_edit2.py ; 16c16; < psi4.set_options(dict(basis='sto-3g', reference='RHF')) ; ---; > psi4.set_options(dict(basis='sto-3g', reference='RHF', save_jk=True)) ; 22c22; < psi4.energy(name='scf'); ---; > energy, wfn = psi4.energy(name='scf', return_wfn=True); 25a26; > scf_type2x5 = type(wfn.jk()); 39c40; < print(scf_type1, scf_type2, scf_type3); ---; > print(scf_type1, scf_type2, scf_type2x5, scf_type3); ```. The type of the JK object that is returned is a MemDFJK class, as seen in the following output: `PK PK <class 'psi4.core.MemDFJK'> DF` It seems that the initial call to `psi4.energy` actually uses `SCF_TYPE=DF`. This can be confirmed by commenting out the call to `psi4.core.be_quiet()` in your script and observing the resulting output of the first call:. ```; ==> Algorithm <==. SCF Algorithm Type is DF.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is SAD.; Energy threshold = 1.00e-06; Density threshold = 1.00e-06; Integral threshold = 1.00e-12; ```. It's as if Psi4 is internally using an `SCF_TYPE` of `DF` for the initial calls, even though the returned `SCF_TYPE` from your calls to `get_global_options` is of `PK`. Possibly, the code not converging causes the internal and returned `SCF_TYPE` values to realign, causing the bug you see in your script. But I can't say for sure exactly the cause at the moment, and I am looking into it moreso. . If this is a bug that is actively causing problems within any production runs you are doing, one thing I noticed that resolves the issue is if you explicitly define `SCF_TYPE` in the `psi4.set_options` call:. ```; (p4devcf) dpoole34@ds6:~/Documents/Codes/psi4-scftype-bugfix/samples (master)$ diff s",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3000#issuecomment-1618885662:481,energy,energy,481,https://psicode.org,https://github.com/psi4/psi4/issues/3000#issuecomment-1618885662,4,['energy'],['energy']
Energy Efficiency,"Thank you for suggesting the dev version. It worked without any further errors or warnings. Cheers!. That is a good point, David. In this case we just wanted to optimize the energy, not the structure, and we already had scripts to do so for larger molecules. Thank you for the heads-up!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1995#issuecomment-682599493:174,energy,energy,174,https://psicode.org,https://github.com/psi4/psi4/issues/1995#issuecomment-682599493,1,['energy'],['energy']
Energy Efficiency,"Thank you for the info and recommendation, @hokru! Results are still not perfect, but much better. | Benzene Dimer | Min. Monomer Separation (Å) | Energy (kJ/mol) | Software | Spherical Points | Radial Points | Total Points | Notes |; |---|---|---|---|---|---|---|---|; | 2mer+0-1 | 2.544 | -6.06459045 | ORCA | 590 | OptM3 with GC (2021) | 277814 | |; | | | -6.06828307 | Psi4 | 590 | 99 | 451461 | pruning = robust |; | | | -5.99965831 | Psi4 | | | | benchmark (CC) |; | 2mer+0-77 | 11.016 | -0.03793439 | ORCA | 590 | OptM3 with GC (2021) | 277814 | |; | | | -0.04297074 | Psi4 | 590 | 99 | 451461 | pruning = robust |; | | | -0.03186856 | Psi4 | | | | benchmark (CC) |",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2304#issuecomment-937245506:147,Energy,Energy,147,https://psicode.org,https://github.com/psi4/psi4/issues/2304#issuecomment-937245506,1,['Energy'],['Energy']
Energy Efficiency,"Thank you very much for your answer! The second link you give really explains how to convert Wavefunction to dictionary and vice versa. And it is indeed possible to change necessary things in the dictionary.; Concerning the first link, I didn't find there anything about wavefunction. That might be my problem, I often do not see things just in front of my eyes.; However, there is an example when it is difficult modify a wavefunction in a desired manner. If I have normal wavefunction resulting from; ```SCF_E_psi, scf_wfn = psi4.energy('SCF', return_wfn=True)```; And after that I want to change 1) nuclear charges in the molecule; 2) number of occupied states; 3) orbitals and density;; the conversion to dictionary and back does not work because psi4 thinks that charge, multiplicity and the number of occupied states are inconsistent (which is not in fact true). By the way, special thanks to you for the possibility to set arbitrary fractional nuclear charges!!! ; When I found it, I felt really really lucky! It is crucial for the approach I am trying implement.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2086#issuecomment-762756780:532,energy,energy,532,https://psicode.org,https://github.com/psi4/psi4/issues/2086#issuecomment-762756780,4,"['charge', 'energy']","['charge', 'charges', 'energy']"
Energy Efficiency,"Thank you very much, @loriab. Is there a rough schedule whether and if yes, when this will make it into the master? We are currently preparing a paper which makes use of this code and it would be nice if it was available publicly in the not-too-far future :innocent:. Is there anything i can do for speeding up this progress?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2633#issuecomment-1197787105:47,schedul,schedule,47,https://psicode.org,https://github.com/psi4/psi4/pull/2633#issuecomment-1197787105,1,['schedul'],['schedule']
Energy Efficiency,"Thank you. I have seen the example. But I don't quite understand the code below. Are they a part of input file for psi4? And what is the function of these code in F-SAPT calculation?; ```keys = ['Enuc', 'Eelst', 'Eexch', 'Eind', 'Edisp', 'Etot'] #TEST. Eref = { #TEST; 'Enuc' : 805.1177369, #TEST; 'Eelst' : -0.01449385168, #TEST; 'Eexch' : +0.01572480431, #TEST; 'Eind' : -0.00445604001, #TEST; 'Edisp' : -0.00815025022, #TEST; 'Etot' : -0.01137533761, #TEST; } #TEST. Epsi = { #TEST; 'Enuc' : mol.nuclear_repulsion_energy(), #TEST; 'Eelst' : variable(""SAPT ELST ENERGY""), #TEST; 'Eexch' : variable(""SAPT EXCH ENERGY""), #TEST; 'Eind' : variable(""SAPT IND ENERGY""), #TEST; 'Edisp' : variable(""SAPT DISP ENERGY""), #TEST; 'Etot' : variable(""SAPT0 TOTAL ENERGY""), #TEST; } #TEST. for key in keys: #TEST; compare_values(Eref[key], Epsi[key], 6, key) #TEST```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2281#issuecomment-902397145:564,ENERGY,ENERGY,564,https://psicode.org,https://github.com/psi4/psi4/issues/2281#issuecomment-902397145,5,['ENERGY'],['ENERGY']
Energy Efficiency,Thanks @andysim. #1257 is in so there is nothing blocking this anymore. Third reviewer is free to merge! (once everything is green),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1206#issuecomment-424377712:125,green,green,125,https://psicode.org,https://github.com/psi4/psi4/pull/1206#issuecomment-424377712,1,['green'],['green']
Energy Efficiency,"Thanks @loriab , I'll make a note to schedule that against our March release. We're using psi4 as part of a force-field parameteristion tool (see https://github.com/Acellera/htmd ). It's Python 3 only and distributed via conda so we have to do some nastry tricks to ship the py2 psi4.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/608#issuecomment-278480471:37,schedul,schedule,37,https://psicode.org,https://github.com/psi4/psi4/issues/608#issuecomment-278480471,1,['schedul'],['schedule']
Energy Efficiency,Thanks @loriab and @edeprince3 It's green! 🎉,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/872#issuecomment-355381185:36,green,green,36,https://psicode.org,https://github.com/psi4/psi4/pull/872#issuecomment-355381185,1,['green'],['green']
Energy Efficiency,"Thanks @loriab, I don't think I'd have found where this is handled. What puzzles me is: how does `extract_subsets` work? I see we tag the whole molecule as `Absent` first and then the appropriate fragments as `Ghost` second (in molecule.cc - `Molecule::extract_subsets`). We then loop over the atoms in molecule.cc `Molecule::reinterpret_coordentries` and apply `set_ghosted` on them, but how does this translate into modifying `Z`?. Incidentally, why don't we just apply `set_ghosted` to each coordentry that's actually ghosted, instead of messing with Z and charge in `Molecule::create_molecule_from_string`?. Edit: ah, my grep-fu is failing me - the actual ghosting for `extract_subsets` is done on lines https://github.com/psi4/psi4/blob/5b23c2f9643137a43a066f0c3b45b4362d47d70f/psi4/src/psi4/libmints/coordentry.cc#L94-L100",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1109#issuecomment-409455167:560,charge,charge,560,https://psicode.org,https://github.com/psi4/psi4/pull/1109#issuecomment-409455167,1,['charge'],['charge']
Energy Efficiency,"Thanks a lot @hokru! ; I will fix the mistake first and then see about the basis set and functional change. Can you provide me with some literature where I can read up on those things? Also this point charge embedding is new to me. This would only work if I was not interested in the shifted lattice positions, but how much cheaper would that be?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2709#issuecomment-1233101316:201,charge,charge,201,https://psicode.org,https://github.com/psi4/psi4/issues/2709#issuecomment-1233101316,1,['charge'],['charge']
Energy Efficiency,"Thanks a lot for the detailed feedback, and input file to reproduce the problem. I'll look into this, and try to get a patch together,. cheers,. Andy. On Aug 6, 2013, at 10:21 AM, James Spencer notifications@github.com wrote:. > CCSD calculations on the N and F atoms result in segmentation faults for me (gcc 4.8.1, boost 1.53, python 3.3.2). I used the input file:; > ; > molecule f { ; > f 0.00 0.00 0.00; > }; > set basis cc-pVTZ; > set scf reference uhf ; > energy('ccsd'); > (and similarly for N). I tried increasing the memory and changing basis set to no avail (some basis sets caused a back trace rather than just a segmentation fault).; > ; > Curiously CCSD calculations with a UHF reference on the rest of the period 2 atoms ran without a problem.; > ; > Running psi4 through gdb and the backtraces indicate the problem is with freeing an invalid pointer when closing a dpd buffer in ccenergy/pair_energies.cc.; > ; > Full backtrace from gdb:; > ; > (gdb) where; > #0 0x00007ffff45e62a4 in free () from /usr/lib/libc.so.6; > #1 0x000000000136b8bc in psi::free_int_matrix (array=0x29d1fc0) at /home/james/projects/psi4/src/lib/libciomr/int_array.cc:134; > #2 0x00000000012edea5 in psi::DPD::buf4_close (this=<optimized out>, Buf=Buf@entry=0x7fffffffd630); > at /home/james/projects/psi4/src/lib/libdpd/buf4_close.cc:50; > #3 0x000000000082dbf8 in psi::ccenergy::pair_energies (epair_aa=epair_aa@entry=0x7fffffffd7c8, epair_ab=epair_ab@entry=0x7fffffffd7d0); > at /home/james/projects/psi4/src/bin/ccenergy/pair_energies.cc:99; > #4 0x000000000086b797 in psi::ccenergy::ccenergy (options=...) at /home/james/projects/psi4/src/bin/ccenergy/ccenergy.cc:307; > #5 0x000000000086f4a5 in psi::ccenergy::CCEnergyWavefunction::compute_energy (this=0x293b760) at /home/james/projects/psi4/src/bin/ccenergy/ccenergy.cc:171; > #6 0x00000000007004f4 in py_psi_ccenergy () at /home/james/projects/psi4/src/bin/psi4/python.cc:429; > #7 0x00000000007080f7 in invoke<boost::python::to_python_value<double co",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/12#issuecomment-22188141:463,energy,energy,463,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22188141,1,['energy'],['energy']
Energy Efficiency,"Thanks a lot, it now works for scf calculation. now i try to do a dmrg-scf as explained here : http://sebwouters.github.io/CheMPS2/interfaces.html ; but end up with . An error has occurred Py-side; Traceback:; <class 'Boost.Python.ArgumentError'>: Python argument types in; psi4.plugin(str); did not match C++ signature:; plugin(std::string, boost::shared_ptrpsi::Wavefunction): File ""<string>"", line 48, in <module>. File ""/home/LUCA/psi-master_18_02.2016/psi4-0.5/share/python/driver.py"", line 586, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs). File ""./../dmrg/pymodule.py"", line 52, in run_dmrg; returnvalue = psi4.plugin('dmrg.so'). LUCA",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/266#issuecomment-185833831:504,energy,energy,504,https://psicode.org,https://github.com/psi4/psi4/issues/266#issuecomment-185833831,2,['energy'],['energy']
Energy Efficiency,"Thanks all for the thorough reviews. I've added the OS/SS decomposition of the DLPNO-MP2 correlation energy and verified that SCS-DLPNO-MP2 works correctly. As far as I know, this PR is ready to be merged.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2093#issuecomment-932616184:101,energy,energy,101,https://psicode.org,https://github.com/psi4/psi4/pull/2093#issuecomment-932616184,1,['energy'],['energy']
Energy Efficiency,"Thanks for pointing me to the slack channel. I usually don't use slack, but I'll try to get something set up. > There are different levels of integration. An independent plugin, a deep C-layer integration and a; > python-level integration. Some of the questions depends on what you want to aim for (or need). Well, also depends a bit what you guys have in mind and how deep we want the integration to be. My thoughts:; - A **C-layer integration** is possible, but might be quite hard, since our iterative solvers are written in `python`. Given one falls back to solvers in C from psi4, in theory one can integrate adcc into the C core as well at the moment, but our long-term plan is to shuffle more and more to the python layer, so it's most likely not going to be a very sustainable idea. On the upside it would lead to a deep integration of the codes and allow to re-use parts of adcc elsewhere, e.g. the tensor library we are using (I know you are working on xtensor, but just an example).; - **Independent plugin** or **python-level integration**. I'm not sure what the difference is. Maybe you can detail?; What I primarily had in mind was to be able to use adcc from psi4 integrating with the psi4-way to set up and run calculations. My ideas was to be able to use the psi4 interface to setup ADC-related settings for adcc and transfer defaults or preferences from the psi4 setup to adcc. Right now you can already use psi4 SCF results in adcc (see e.g. [this example](https://github.com/adc-connect/adcc/blob/master/examples/water/psi4_ccpvdz_adc2_spectrum.py)), but some parameters (like convergence tolerances) need to be manually tweaked to agreement in both programs. That's an annoyance I'd like to see resolved.; In turn the results from adcc are right now in our own python datastructure. From this they could be easily transformed in some other datastructure more useful / agreeing with the rest of psi4. So far I was, however, unable to deduce what this would be from the psi4 code ba",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1744#issuecomment-547385797:773,sustainab,sustainable,773,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547385797,1,['sustainab'],['sustainable']
Energy Efficiency,"Thanks for the analysis. After the wavefunction pass, I haven't revisited sow/reap operation at all, and I don't actually expect any of them to be working. Since you've obliged with an official ticket, I'll make a list of things to do :-); - [ ] grad by fd energy s/r; - [ ] freq by fd energy s/r; - [ ] freq by fd gradient s/r (new capability); - [ ] in opt by fd energy, make sure optdata is being carried along, rather than opt restarting from step 1 everytime.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/291#issuecomment-190004493:257,energy,energy,257,https://psicode.org,https://github.com/psi4/psi4/issues/291#issuecomment-190004493,3,['energy'],['energy']
Energy Efficiency,Thanks for the clarification! Revising the error message should reduce confusion.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2577#issuecomment-1126191477:64,reduce,reduce,64,https://psicode.org,https://github.com/psi4/psi4/issues/2577#issuecomment-1126191477,1,['reduce'],['reduce']
Energy Efficiency,Thanks for the code snippet @dgasmith ! I added the text wrapping. It adapts to the length of the message up to a maximum value of 80. One can set a different maximum via optional argument. I renamed the function to a more general `message_box` in case one wants to use it for something else. For testing: [wrap.py.txt](https://github.com/psi4/psi4/files/4457324/wrap.py.txt),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1862#issuecomment-611615058:70,adapt,adapts,70,https://psicode.org,https://github.com/psi4/psi4/pull/1862#issuecomment-611615058,1,['adapt'],['adapts']
Energy Efficiency,"Thanks for the feedback, @CDSherrill, I'll fix it tomorrow. One quick point:. There are two ways to fix the geometry optimization issue:; - we can toggle `return_total_data=True` if `ptype != 'energy'` (meaning total G/H are calculated and returned); - or we can add the monomers-in-monomers if `ptype != 'energy'` (meaning E/G/H are available, but interaction energies are returned).; I don't think either of those is consistent with 1.3.2's behaviour, though!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1691#issuecomment-869894520:193,energy,energy,193,https://psicode.org,https://github.com/psi4/psi4/issues/1691#issuecomment-869894520,2,['energy'],['energy']
Energy Efficiency,"Thanks for the insightful comments. @fevangelista @loriab @susilehtola Would QM/MM point charges entering the Hamiltonian or other perturbations have similar issues? Also, when computing derivatives of the energy, e.g. forces on nuclei, these will also be affected by the relativistic corrections.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1758#issuecomment-558485452:89,charge,charges,89,https://psicode.org,https://github.com/psi4/psi4/issues/1758#issuecomment-558485452,2,"['charge', 'energy']","['charges', 'energy']"
Energy Efficiency,"Thanks for the pointers from all of you, I feel I have a much better idea what to do. Btw: Great plugin system, but after thinking about it for a bit I am no longer too sure it is the best solution for this case. --. On first sight [snsmp2](https://github.com/DEShawResearch/sns-mp2/blob/master/snsmp2/) seems to be a good example project to orient along. So I would make another python module, `psi2adcc` say, and in it implement the routing between psi4 and adcc. Then adcc is one of its `setup.py` dependencies. In this python module I will need to adapt `psi4.driver.procedures['energy']['adc2']` and similar and add my energy function. So far, so good. Now the problem I see is that in a vanilla Psi4 version without adcc-support, `psi4.driver.procedures['energy']['adc2']` is assigned to `run_adc`, which rightfully runs the ADC(2) implementation in Psi4. If my plugin is loaded, however, this should become a `select_adc2` method, which either picks the `run_adc` in my plugin or the `run_adc` in Psi4, depending on some user settings. One option to resolve this is to give the adcc methods a different name, e.g. `adcc-adc(2)`. This is roughly what is done e.g. in the `gpu_dfcc` plugin to distinguish against the CPU versions if I understand correctly. For me this solution does not feel very satisfying, however, because now it's again the user's responsibility to select the right ADC implementation.; Another option is to implement a dummy `select_adc` in Psi4, which does no branching and always falls to the built-in implementation. This could then be monkey-patched in my plugin by wrapping it somehow ... but that is not clean either. . Alternative is to integrate deeper into the python layer and subject to the availablity of the `adcc` module either have two branches in `select_adc` or just one. That's what I will pursue now if there are no other thoughts. --. About the wavefunction object: I have not looked at the Psi4 implementation details (or the schema) so far, but roughly",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1744#issuecomment-547652584:552,adapt,adapt,552,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547652584,4,"['adapt', 'energy']","['adapt', 'energy']"
Energy Efficiency,"Thanks for the quick response, that makes sense!. >You're interested in MBIS CHARGES as standalone (w/o volumes and extents) to avoid the cost of all the atomic calcs since you don't need the volume?. Sort of the only bit I need is the charges and volumes but not the volume ratio so not the free atom calculations added in #2127. So basically the performance before that PR my idea would be that the ratios are only calculated if something like `MBIS RATIOS` is passed which like you say would also avoid the cost of the extra calculations.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2272#issuecomment-896987117:77,CHARGE,CHARGES,77,https://psicode.org,https://github.com/psi4/psi4/issues/2272#issuecomment-896987117,2,"['CHARGE', 'charge']","['CHARGES', 'charges']"
Energy Efficiency,"Thanks for the replies! Just FYI that the ""other software"" that I tested, which seemingly worked (at least converged to a reasonable energy with the similar spin-square value) are ORCA and Terachem, as you may wonder. And yes, for Psi4 calculations from scratch for both basis sets work can converge to the same results. The issue only happens when I tried to do the project as I want to ensure the convergence to the same electronic state.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1972#issuecomment-665093036:133,energy,energy,133,https://psicode.org,https://github.com/psi4/psi4/issues/1972#issuecomment-665093036,1,['energy'],['energy']
Energy Efficiency,"Thanks for the reply - I have suspected the existence of an error in DFT gradients for more than a year because I have previously seen unexpected behavior in geomeTRIC / Psi4 geometry optimizations of organic molecules using DFT (B3LYP-D3/DZVP) in which the optimization fails to converge and the structure from the optimization trajectory appears to be tumbling (see attached movie). The behavior is more common when running optimizations with constraints. I suspected the DFT contribution because there is some literature on the lack of rotational invariance in DFT energies due to the grid, but I had not tested a constrained optimization on the same system using HF. I haven't made an issue report for this problem because I felt I lacked a test case that was compelling enough. . I thought the current issue had the same root cause as the organic molecule constrained optimizations, but I might be wrong about that. If you are seeing the gradient error in HF then I agree the current issue is not likely due to the DFT contribution to the energy. . https://github.com/psi4/psi4/assets/1441560/80f2b42d-fed2-4667-809d-f3a2550603fb",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3066#issuecomment-1783717909:1044,energy,energy,1044,https://psicode.org,https://github.com/psi4/psi4/issues/3066#issuecomment-1783717909,1,['energy'],['energy']
Energy Efficiency,"Thanks for the report!. I suspect you've been caught out by our rapidly changing DFT code. If you're using psi4conda, that's the last published release, so 1.1, which uses our home-grown DFT functionals before we switched out to Libxc (and added nifty things like `energy(..., dft_functional='b3lyp')`). You can check to confirm with `psi4 --version`. The 1.1 manual is at http://www.psicode.org/psi4manual/1.1/dft.html#advanced-functional-use-and-manipulation. See [here](http://psicode.org/psi4manual/master/conda.html#how-to-install-a-psi4-binary-into-an-ana-miniconda-distribution) for updating (still with conda) to the pre-1.2 development branch, for which your two commands should behave differently.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/927#issuecomment-370153860:265,energy,energy,265,https://psicode.org,https://github.com/psi4/psi4/issues/927#issuecomment-370153860,1,['energy'],['energy']
Energy Efficiency,"Thanks for the report. I've been able to reproduce the crash. (I observe a fifth decimal place disagreement in DF-RKS SAD energy and a third decimal place disagreement in all iteration energies.) There are two things that worry me here:. 1. The crash itself. I struggle to imagine why the ADIIS optimization problem is so difficult to solve here.; 2. The abhorrent SCF energies. The energy jumps 138 hartrees after the guess! If I remember correctly, the SAD energy isn't the energy corresponding to a particular set of orbitals, but this is still astounding. @susilehtola may have some insight on this. I can poke on this, but the first step will be to try and reproduce this with a smaller system. I don't have access to 14 threads, so I'll have trouble running this repeatedly.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2641#issuecomment-1192851164:122,energy,energy,122,https://psicode.org,https://github.com/psi4/psi4/issues/2641#issuecomment-1192851164,4,['energy'],['energy']
Energy Efficiency,"Thanks for the update, @loriab, I appreciate it. At the moment, I'm running outside of `jupyter` and that is fine for now (I didn't have a chance to try installing `psi4` and `jupyter` into separate environments and then adjusting the latter's path to include `psi4` modules). . At the risk of going off topic, I have a tangentially related question. I'm trying to do a torsion scan to derive a potential energy surface and I believe that `psi4` is running really slowly, although since I don't have experience running `psi4`, I don't have a good baseline. I externally created the structures, so `psi4` is really just doing a geometry optimization with `set optking fixed_dihedral = ...` and single point energy for each file, one at a time. Without going into all the details, I'm running at a pretty low level of theory (in my opinion) of B3LYP/3-21G, and for the structures that converge, I'm seeing ~8 hours per file, after allocating 12 cores and 8 GB of memory to `psi4`. So my question is whether there is any speed or efficiency difference of calling the `psi4` executable directly from bash versus through Python / Psithon. . (As a comparative data point, I did the ""same"" calculation with Gaussian 09 on 16 cores and it completed the scan overnight. I say ""same"" because I let Gaussian do the hard work of scanning the dihedral itself, beginning from the initial coordinates instead of using separate files, and I used HF/6-31G.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/862#issuecomment-347710296:405,energy,energy,405,https://psicode.org,https://github.com/psi4/psi4/issues/862#issuecomment-347710296,2,['energy'],['energy']
Energy Efficiency,"Thanks for this!. Bullet points before an in-depth review:; * Why have separate `form_C` and `form_C_level_shift`? I could imagine a single `form_C` function that takes a level shift `int` that defaults to 0.; * This needs user docs on when to use level shifts, how to select a good level shift, and whether this will change the converged energy/orbitals/density-matrix/Fock-matrix; * To get the build working, please commit the `CMakeLists.txt` file for `scf-level-shift-rks`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2225#issuecomment-871767934:339,energy,energy,339,https://psicode.org,https://github.com/psi4/psi4/pull/2225#issuecomment-871767934,1,['energy'],['energy']
Energy Efficiency,"Thanks for trying out Psi4 and the Psi4/Cfour interface, @tobirolinew. I can probably fix your immediate problem, but please read on. :-). There's three ways of running a Cfour calc through a more flexible front-end right now:; * QCEngine (already present in a Psi4 installation. takes a dictionary as input. geometry must be in Cartesians.); * QCDB (extra install. depends on QCEngine. inputs look much like Psi4/Cfour only `psi4.` becomes `qcdb.`. can use Z-Matrices.); * Psi4/Cfour (the first in time of these three. what you're trying now.). I'm trying to deprecate this last one in favor of the better maintained first ones. Your job would look something like the below through QCEngine (code below not tested). ```; import psi4; import qcengine as qcng. h2o = psi4.geometry(""""""; O; H 1 R; H 1 R 2 A. R=0.958; A=104.5; """"""). atomicinput = {; ""driver"": ""energy"",; ""molecule"": h2o.to_schema(dtype=2),; ""model"": {; ""method"": ""ccsd(t)"",; ""basis"": ""aug-pvqz"",; },; ""keywords"": {; ""SCF_CONV"": 12,; ""CC_CONV"": 12,; },; }. atomicresult = qcng.compute(atomicinput, ""cfour""). import pprint; pprint.pprint(atomic_result.dict()); ```. What types of calcs are you ultimately looking to run? How would you like to proceed: the QCEngine or Psi4/Cfour route? Thanks!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2608#issuecomment-1155480883:858,energy,energy,858,https://psicode.org,https://github.com/psi4/psi4/issues/2608#issuecomment-1155480883,1,['energy'],['energy']
Energy Efficiency,"Thanks for your answer! But can I use this file for a restart? This seems not to work:. `energy('scf',restart_file=""./output.default.17274.180.npz""); ` . thanks,; Christopher",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/918#issuecomment-365643972:89,energy,energy,89,https://psicode.org,https://github.com/psi4/psi4/issues/918#issuecomment-365643972,1,['energy'],['energy']
Energy Efficiency,"Thanks for your comments. I've changed `schedule(dynamic)` to `schedule(guided)` in the OpenMP loop.; I think @TiborGY is right that there is false sharing. I changed the code to create a copy of the output matrix `V_charge` for each thread and then sum them at the end. New timings are:. Cores | New code, no charges | New code, with charges; ---- | ---- | ----; 1 | 1.00 | 1.00; 2 | 1.67 | 1.29; 4 | 2.72 | 2.18; 8 | 3.92 | 3.57; 16 | 4.87 | 5.04; 32 | 5.80 | 7.21",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1946#issuecomment-656390401:40,schedul,schedule,40,https://psicode.org,https://github.com/psi4/psi4/pull/1946#issuecomment-656390401,4,"['charge', 'schedul']","['charges', 'schedule']"
Energy Efficiency,"Thanks for your interest in Psi4. The SMD model offers an empirical parametrization of the nonelectrostatic contributions to the solvation energy (cavitation, dispersion, repulsion and hydrogen bonding effects) to add on top of the electrostatic contribution calculated by means of the IEFPCM or CPCM (COSMO) models. The nonelectrostatic contributions are added _a posteriori_ to the energy calculated self-consistently including the purely electrostatic reaction field. As such, SMD is very suitable for an independent implementation _via_ a Psi4 plugin. Both the IEFPCM and CPCM (COSMO) models are available in Psi4 using the interface to the PCMSolver library.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/227#issuecomment-175470082:139,energy,energy,139,https://psicode.org,https://github.com/psi4/psi4/issues/227#issuecomment-175470082,2,['energy'],['energy']
Energy Efficiency,"Thanks for your patience with the late response. Take this especially simple example with DF-OMP2; ```; molecule {; 1 2; units bohr; O 0.000000000000 0.000000000000 -0.143225816552; H 0.000000000000 1.638036840407 1.136548822547; H 0.000000000000 -1.638036840407 1.136548822547; }. set reference uhf ; set basis sto-3g; set MAX_MOGRAD_CONVERGENCE 8; set e_convergence 10. energy('omp2'); ```. I have not found any alteration of `hess_type` lets me converge the maximum MO gradient below 1e-4. I am attempting to verify the correctness of my Psi4Numpy-type implementation of DF-OMP2, which converges to `-74.698372226179` in only 5 iterations using the exact MO hessian. This disagrees with Psi in the eighth decimal place, but the Psi answer's MO gradient is not adequately converged to determine if this is an error in my code. I have attempted swapping my guess orbitals for a few systems, and I have not once found that helpful in getting the MO gradient well converged. I'll be able to post some non-toy examples sometime in January.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1371#issuecomment-449754680:372,energy,energy,372,https://psicode.org,https://github.com/psi4/psi4/issues/1371#issuecomment-449754680,1,['energy'],['energy']
Energy Efficiency,"Thanks for your quick reply, with 1.2.1 and an augmented basis set I still have problems in another system, see below. But do I understand correctly that master should work?. molecule ClCl {; -1 1; Cl 0.000000000 0.000000000 0.000000000; --; -1 1; Cl 0.700000000 0.000000000 0.000000000. units angstrom; no_reorient; }; set globals {; basis aug-cc-pVTZ; }; set_memory(32000000000); energy('sapt2+3(ccd)dmp2')",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1433#issuecomment-465492870:382,energy,energy,382,https://psicode.org,https://github.com/psi4/psi4/issues/1433#issuecomment-465492870,1,['energy'],['energy']
Energy Efficiency,"Thanks, @VHchavez, that'd be a great help. I think PsiAPI is the better framework to describe more advanced topics like wfn. (The exception is the two mirrored tutorials in PSIthon and PsiAPI that we try to keep in sync.) Topics include how to get wfn, things on wfn, things not on wfn (e.g., amplitudes in most cases), when wfn might be inconsistent (energy is mp2, while orbitals are scf), numpy serialization (python_helpers.py), schema serialization (schema_wrapper.py), etc. Another thing is feel free to be more of a clearinghouse where you collect links to the p4n tutorial, the serialization code, the psi4.core.Wavefunction API docs, various test cases that use things off the wfn. All those other places are autogen or tested, so are a better place than docs for big code snippets. And folks interested in wfn are usually able and willing to read python code if directed, just not willing to sift through 1M lines to find it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2339#issuecomment-956508121:352,energy,energy,352,https://psicode.org,https://github.com/psi4/psi4/issues/2339#issuecomment-956508121,1,['energy'],['energy']
Energy Efficiency,"Thanks, @avcopan. On my system, your changes make it an order of magnitude closer to the check. If I back the compare_values up to 4, it passes. ```; Energy of last IRC point: computed value (-92.874363) does not match (-92.874374) to 5 decimal places.; ```. The only other thing that concerns me is `thisenergy = old_wfn.energy()`. Though `.energy()` is definitely the future, preferable way, right now `thisenergy = psi4.get_variable('CURRENT ENERGY')`, as you see right above at the gradient() call, is far more reliable, as so few methods properly set the energy member datum of Wavefunction. So if the `4` and `CURRENT ENERGY` changes sound good to you, go ahead and make them. If you put ""fixes psi4/psi4#290"" in the commit message, it'll close the ticket when it gets merged.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/292#issuecomment-189992984:150,Energy,Energy,150,https://psicode.org,https://github.com/psi4/psi4/pull/292#issuecomment-189992984,6,"['ENERGY', 'Energy', 'energy']","['ENERGY', 'Energy', 'energy']"
Energy Efficiency,"Thanks, @jgonthier. Given that the Travis CI tests run every time somebody submits or merges a PR, we're going to be running that test a lot. If we don't see the problem again, it was probably just a strange artifact of the invalid read that was non-deterministic. If we keep seeing it after you have fixed that read, we probably just need to reduce the optimization level for that one routine. Either way, thanks for checking it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/237#issuecomment-182875337:343,reduce,reduce,343,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182875337,1,['reduce'],['reduce']
Energy Efficiency,"Thanks, Lori. I’m still tied up with work in St Louis, but will get on this as soon as I get back to UT. It should be easy to find, I hope. > On Jul 18, 2015, at 12:46 AM, Lori A. Burns notifications@github.com wrote:; > ; > here's a minimal input for debugging; > ; > molecule {; > efp c6h6 0.0 0.0 0.0 0.0 0.0 0.0; > --; > O 4.0 0.0 0.0; > H 4.7 0.7 0.0; > H 3.3 -0.7 0.0; > --; > efp h2o -4.0 0.0 0.0 0.0 0.0 0.0; > }; > ; > set basis cc-pvdz; > energy('scf'); > —; > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4public/issues/115#issuecomment-122486808.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/115#issuecomment-122544746:449,energy,energy,449,https://psicode.org,https://github.com/psi4/psi4/issues/115#issuecomment-122544746,1,['energy'],['energy']
Energy Efficiency,"Thanks, although this was a reduced input file - I'm running with much more virtual states in the DMRG.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/464#issuecomment-244672286:28,reduce,reduced,28,https://psicode.org,https://github.com/psi4/psi4/issues/464#issuecomment-244672286,1,['reduce'],['reduced']
Energy Efficiency,"Thanks, the basis set name makes sense. I will start naming my basis sets, but would it be possible to use a deterministic name for basis sets instead of a random one?. The `gradient` method does not use the `restart_file` keyword. I tried it, and it defaulted to the SAD guess. the SCF took 13 iterations to converge for the molecule in the original input file. As far as I can tell, only `energy` will utilize the guess from the restart file. I suppose I could call `energy(..., restart_file=X)`, then use `set guess read`, and then call `gradient`. That feels like more juggling than should be necessary.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2571#issuecomment-1121436485:391,energy,energy,391,https://psicode.org,https://github.com/psi4/psi4/issues/2571#issuecomment-1121436485,2,['energy'],['energy']
Energy Efficiency,"Thanks. We're planning to work on synchronizing `dfocc` back with the rest of Psi after the 1.6 release later this month, so I'm hopeful we can get this moving again. Depending on what my schedule looks like, I may be able to split this PR up so that we can get the `occ` part in, while we're waiting on `dfocc`. @loriab",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2354#issuecomment-1118547077:188,schedul,schedule,188,https://psicode.org,https://github.com/psi4/psi4/pull/2354#issuecomment-1118547077,1,['schedul'],['schedule']
Energy Efficiency,"That DFT interface hasn't changed in years, so I'm inclined to think it's a Boost version thing. A temporary workaround (if you don't need DFT) is to comment out in `driver.py`. ``` python; # Integrate DFT with driver routines; for ssuper in superfunctional_list():; procedures['energy'][ssuper.name().lower()] = run_dft; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/230#issuecomment-178857878:279,energy,energy,279,https://psicode.org,https://github.com/psi4/psi4/issues/230#issuecomment-178857878,1,['energy'],['energy']
Energy Efficiency,"That does make some sense. And by this, I don't mean that it's ideal, just that it appears consistent about what we know about the chips. The main differences in M1 Pro and Max are not the CPU itself (unless you count the 8-core binned M1 Pro), but other things like the GPU core count and media encoders. The CPU itself is the same for the two chips. It seems like the extra memory bandwidth advertised for the M1 Max is somehow reserved for other parts of the chip, with the CPU memory bandwidth being about the same as that of the Pro. I don't see whether the author of the linked article used the 24 or 32 core GPU M1 Max model. I wonder how the CPU memory bandwidth would differ between the two models. i.e. whether getting the 24 core model ""frees up"" more bandwidth for the CPU or whether the total shared bandwidth is just decreased. Who knows. That seems like it would be a very expensive experiment at the very least. Another interesting question would be whether the M1 Pro CPU can fully utilize all 200 GB/s, or whether that's slashed in half as well. It seems like the 400 GB/s marketing claim has to come with this asterisk. It's a real shame that executives and marketing teams at large companies sometimes get in the way of the innovations their engineering teams produce, to the detriment of consumers and developers. EDIT: I also wonder if the memory bandwidth bottleneck is something that is built into in the silicon, or if somehow the operating system is making decisions as how to allocate memory to different parts of the chip. I think it's now possible to install Linux on M1:https://asahilinux.org/2021/10/progress-report-september-2021/, so I wonder if that would result in memory being allocated to the CPU differently.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2333#issuecomment-956470448:1503,allocate,allocate,1503,https://psicode.org,https://github.com/psi4/psi4/issues/2333#issuecomment-956470448,2,['allocate'],"['allocate', 'allocated']"
Energy Efficiency,That is fine. I have some test cases with chargemol where I believe it can be very useful. Please ping me on the PR,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1138#issuecomment-416927479:42,charge,chargemol,42,https://psicode.org,https://github.com/psi4/psi4/pull/1138#issuecomment-416927479,1,['charge'],['chargemol']
Energy Efficiency,"That was just stubs in case I ever got around to it. No significant code; along those lines was completed. -Rob. On Mon, Jul 13, 2015 at 3:35 PM, psi4 notifications@github.com wrote:. > We saw some `!restricted` in src/bin/dfmp2/corr_grad.cc and were; > hopeful. Were we mistaken or was it not finished or not tested, or what’s; > the status.; > ; > Anyway ok, can re-route through Ugur’s code.; > ; > Lori; > ; > > On Jul 13, 2015, at 6:32 PM, Rob Parrish notifications@github.com; > > wrote:; > > ; > > No UHF-MP2 gradients in my code. Sorry.; > > ; > > -Rob; > > ; > > On Mon, Jul 13, 2015 at 3:30 PM, Lori A. Burns <notifications@github.com; > > <mailto:notifications@github.com>>; > > wrote:; > > ; > > > for df-mp2, these are the cases:; > > > uhf energy: good, this is is Rob's code (we're pretty sure; test); > > > rohf energy: we think this may be in Rob's code, but not verified vs; > > > other; > > > codes; > > > uhf grad: we think this may be in Rob's code, but not verified vs other; > > > codes; > > > rohf grad: no good. Ugur doesn't support rohf scf being fed into his; > > > omp2; > > > w/o subsequent opt; > > > ; > > > ticket task: verify the above with the code and with the authors. if; > > > needed, re-route in driver (see mp2_type as example in proc.py. If; > > > anything looks to hard or want to defer, create a new ticket for it,; > > > and do; > > > all you can to close out this one.; > > > ; > > > —; > > > Reply to this email directly or view it on GitHub; > > > <https://github.com/psi4/psi4public/issues/107 <; > > > https://github.com/psi4/psi4public/issues/107>>.; > > > ; > > > —; > > > Reply to this email directly or view it on GitHub <; > > > https://github.com/psi4/psi4public/issues/107#issuecomment-121080590>.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/107#issuecomment-121081025.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/107#issuecomment-121081364:754,energy,energy,754,https://psicode.org,https://github.com/psi4/psi4/issues/107#issuecomment-121081364,2,['energy'],['energy']
Energy Efficiency,"That was me playing around, trying to figure out when to use the different dertypes. The level of theory I will be using is w97X-D DFT perhaps in the future but with Hartree-Fock I wanted to test the code that I obtain something back. . I've always used the default before when calculating single point energy scans so when to apply to which different level of theory is a little lost on me. . ```python. dertype='energy'; dertype'gradient'. ```. How would I get around this issue? In my mind. **Option 1**. Give it more juice (like CPU). If i have nodes on a cluster how do I distribute the job between the nodes perhaps. . **Option 2**. Play around with option parameters and maybe obtain orbitals from previous geometry? Is that faster?. https://psicode.org/psi4manual/master/autodir_options_c/scf__guess.html. Should I be changing into the `guess` parameter?. **Update 1** . I was playing around a bit more:. ```; Module time:; 	user time = 221.38 seconds = 3.69 minutes; 	system time = 8.88 seconds = 0.15 minutes; 	total time = 38 seconds = 0.63 minutes; ```. The time decreased when I set the configurations to ` 'g_convergence': 'gau_loose'` I think from `gau_tight`? `dertype` is still `gradient`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3125#issuecomment-1908613936:303,energy,energy,303,https://psicode.org,https://github.com/psi4/psi4/issues/3125#issuecomment-1908613936,2,['energy'],['energy']
Energy Efficiency,"That's a lot of package managers you've mentioned. :-). Judging from [ubuntu packages](https://packages.ubuntu.com/search?keywords=psi4&searchon=names&suite=all&section=all), the latest version available through `apt-get` is `v1.2.1`. Conda has `v1.3.2`. Unless the Linux package managers have adapted to conda while I wasn't looking, ubuntu is going to be running your system python (probably `/usr/bin/python`) not the conda distribution python. Presuming your apt-get psi4 is using system python, you should be able to apt-get install pytest. You'll want to run something like `which python psi4 pytest` to see if everything's where you expect. You're definitely better off installing a conda psi4 (either ""installer"" or ""conda"" from [here](https://admiring-tesla-08529a.netlify.com/installs/v132/)) because it's newer, optimized for more architectures, and uses a decent BLAS (MKL, not generic). psi4 pulls from the `defaults` and `psi4` channels, not `conda-forge`, but in any case, install time is trivial compared to calculation time. :-)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1705#issuecomment-524453814:294,adapt,adapted,294,https://psicode.org,https://github.com/psi4/psi4/issues/1705#issuecomment-524453814,1,['adapt'],['adapted']
Energy Efficiency,"That's right. I made three different mistakes in the units (missed the section you pointed out, didn't realize you were converting _to_ not _from_ SI at the end, and mixed up the probability-from-mean-intensity definition vs. the probability-from-energy-density definition of the Einstein B.). Documentation updated.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2525#issuecomment-1084589177:247,energy,energy-density,247,https://psicode.org,https://github.com/psi4/psi4/pull/2525#issuecomment-1084589177,1,['energy'],['energy-density']
Energy Efficiency,"That's still only if you're just looking at the density itself. If you want properties, then a O(1e-12) error in the NO coefficients can still yield noticable errors in matrix elements, since those get weighted by exponents. E.g. tight core exponents will have huge kinetic energy elements T_{ij}, but very small expansion coefficients. Still, the product of the two may well be significant.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1485#issuecomment-456181584:274,energy,energy,274,https://psicode.org,https://github.com/psi4/psi4/issues/1485#issuecomment-456181584,1,['energy'],['energy']
Energy Efficiency,"The FNOCC module includes CEPA/LCCSD/CISD codes, and I suppose FNOCC’s version of CISD is default. That code assumes the number of virtual orbitals is greater than the number of occupied orbitals and won’t work in this case. You can invoke DETCI’s CISD code instead with . set ex_level 2; energy(‘detci’). > On Oct 25, 2017, at 12:55 PM, Susi Lehtola <notifications@github.com> wrote:; > ; > I also noticed like an hour ago that running energy('cisd') triggers for some reason a frozen natural orbital calculation. I don't think this should be happening..?; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub <https://github.com/psi4/psi4/issues/828#issuecomment-339397438>, or mute the thread <https://github.com/notifications/unsubscribe-auth/AClSGkBj9d5B7EnoRZvyETzQg7vKsysdks5sv2gegaJpZM4QGSFE>.; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/828#issuecomment-339405629:289,energy,energy,289,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339405629,2,['energy'],['energy']
Energy Efficiency,"The L=l format parsing can be added simply by changing libmintsbasissetparser.py to; ```; if len(shell_type) == 1 or len(shell_type)>2:; if(len(shell_type) == 1):; # AM defined as character ; am = shell_to_am[shell_type[0]]; else:; # AM defined explicitly with L=l ; if(shell_type[0:2].lower()!=""l=""):; raise ValidationError(""""""Gaussian94BasisSetParser::parse: Invalid shell definition: line %d: %s"""""" % (lineno, line)); am = int(shell_type[2:]). ```. but in addition the shell regexp needs to be adapted to also accept the other format :S",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/628#issuecomment-282102859:497,adapt,adapted,497,https://psicode.org,https://github.com/psi4/psi4/issues/628#issuecomment-282102859,1,['adapt'],['adapted']
Energy Efficiency,"The MBIS implementation is great! Would it be possible to add the ability to partition the charge into core and valence components like they do in the [original paper](https://pubs.acs.org/doi/10.1021/acs.jctc.6b00456)? This is essential to use the ""valence width"" parameter that is currently calculated for any electrostatic potential or electrostatic interaction energy calculation that includes a charge penetration correction!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3140:91,charge,charge,91,https://psicode.org,https://github.com/psi4/psi4/issues/3140,3,"['charge', 'energy']","['charge', 'energy']"
Energy Efficiency,"The MBIS regression reported in #2272 was fixed via #2273, but there's still a few items to tackle. This part needn't be backported. - [ ] oeprop(wfn, ""MBIS_VOLUME_RATIOS"") should be fine (indep oeprop fn), but set scf_properties mbis_volume_ratios; energy(""scf"") will still fail as MBIS fails via QCEngine #2272 reported because those are OEProp class instantiations called from proc.py, and the free atom volumes aren't available. The oeprop.cc code could exit gracefully when free atom volumes aren't available, but having different properties lists for the two calling routes isn't good.; - [ ] so why not add the loc from oeprop() to OEProps in proc.py so that atom volumes are available? nice thought, but the fn that produces them itself calls oeprop() and energy() and descends into endless recursion. I haven't sought the logic that makes this all work together.; - [ ] add tests.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2299:250,energy,energy,250,https://psicode.org,https://github.com/psi4/psi4/issues/2299,2,['energy'],['energy']
Energy Efficiency,"The NBody driver will need a similar fix as the SAPT driver, I think. http://forum.psicode.org/t/why-is-interaction-energy-of-a-halogen-bonded-complex-unexpectedly-and-surprisingly-positive/2352 shows that we freeze to many electrons on Na",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2012#issuecomment-957296211:116,energy,energy-of-a-halogen-bonded-complex-unexpectedly-and-surprisingly-positive,116,https://psicode.org,https://github.com/psi4/psi4/issues/2012#issuecomment-957296211,1,['energy'],['energy-of-a-halogen-bonded-complex-unexpectedly-and-surprisingly-positive']
Energy Efficiency,"The PBE/STO-3G calculation on Ni(CO)3 does not converge.; ```; memory 8 gb. molecule {; Ni -0.593245 2.410696 -0.537392; C 0.947231 2.245835 0.358715; C -0.875896 1.446101 -2.018123; C -1.856239 3.533688 0.051349; O -1.061878 0.818754 -2.971879; O 1.943046 2.139891 0.937442; O -2.673940 4.257626 0.432247; }. set basis STO-3G; energy('pbe'); ```; DIIS apparently gets stuck alternating between two different configurations, which is shown in the oscillating energy. I think this should be a relatively simple system for DFT; still, the default accelerator is unable to handle it.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2209:328,energy,energy,328,https://psicode.org,https://github.com/psi4/psi4/issues/2209,2,['energy'],['energy']
Energy Efficiency,"The PSI4 (0.3.183, 5427c0a) gradient routine does not seem to be giving the correct values when an external field is defined using the QMMM module. I attached two test calculations:; 1) A water dimer with 1 water QM and the second represented as point charges. ```; memory 1 gb; set reference rks; set basis 6-31++G**; set guess sad; set scf_type df. molecule QMregion {; 0 1; O -0.778803000000 0.000000000000 1.132683000000; H -0.666682000000 0.764099000000 1.706291000000; H -0.666682000000 -0.764099000000 1.706290000000; symmetry c1; no_reorient; no_com; }. gradient(""PBE0""). Chrgfield = QMMM(); Chrgfield.extern.addCharge(-0.834,1.649232019048,0.0,-2.356023604706); Chrgfield.extern.addCharge(0.417,0.544757019107,0.0,-3.799961446760); Chrgfield.extern.addCharge(0.417,0.544757019107,0.0,-0.912085762652); psi4.set_global_option_python('EXTERN',Chrgfield.extern). gradient(""PBE0""); ```. 2) A helium atom with a point charge (q=-1) 1 Angstrom away. ```; memory 1 gb; set reference rks; set basis 6-31G*; set guess sad; set scf_type df. molecule QMregion {; 0 1; He 0.0 0.0 0.0; symmetry c1; no_reorient; no_com; }. gradient(""PBE0""). Chrgfield = QMMM(); Chrgfield.extern.addCharge(-1,0.0,0.0,1.8897261245650618); psi4.set_global_option_python('EXTERN',Chrgfield.extern). gradient(""PBE0""); ```. For test 1, the gradient from the water and the water+charges are different, but they do not agree with the forces returned by an equivalent calculation with Gaussian. The isolated water molecule has gradients that agree with the Gaussian forces, but once the charges are added the Gaussian and PSI4 calculations return different results. For test 2, the PSI4 gradient is zero for the for the helium with and without the point charge. The charge has no effect on the results. When I repeated the calculation with Gaussian, there was a finite force on the helium atom when a charge was included. Here are the gradient results I pulled from the output files:. ```; Water+Charges (TIP3P charges: O->-0.834, ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/184:252,charge,charges,252,https://psicode.org,https://github.com/psi4/psi4/issues/184,2,['charge'],"['charge', 'charges']"
Energy Efficiency,"The Pb2Me6 test case from GMTKN55/HEAVYSB11 fails to converge with larger `def2-` basis sets. The `def2-sv(p)` case below doesn't crash, but the ""Fails to converge"" print [here](https://github.com/psi4/psi4/blob/f9ce6e0cdb181e741483350f0fe22cf6cff79dc1/psi4/src/psi4/libmints/ecpint.cc#L492) is triggered. With QZ basis sets, the SCF doesn't converge at all.; ```; molecule {; 0 1; PB 0.00000000 0.00000000 1.43749842; PB 0.00000000 0.00000000 -1.43749842; C 1.79821215 1.03819827 2.26869728; C 0.00000000 -2.07639654 2.26869728; C -1.79821215 1.03819827 2.26869728; C 1.79821215 -1.03819827 -2.26869728; C 0.00000000 2.07639654 -2.26869728; C -1.79821215 -1.03819827 -2.26869728; H 1.74634800 1.00825449 3.35718999; H 2.70027335 0.53041629 1.92961075; H 1.80949065 2.07329717 1.92961075; H 0.00000000 2.01650898 -3.35718999; H -0.89078269 2.60371346 -1.92961075; H 0.89078269 2.60371346 -1.92961075; H -1.74634800 -1.00825449 -3.35718999; H -1.80949065 -2.07329717 -1.92961075; H -2.70027335 -0.53041629 -1.92961075; H -1.80949065 2.07329717 1.92961075; H -2.70027335 0.53041629 1.92961075; H -1.74634800 1.00825449 3.35718999; H 1.74634800 -1.00825449 -3.35718999; H 2.70027335 -0.53041629 -1.92961075; H 1.80949065 -2.07329717 -1.92961075; H -0.89078269 -2.60371346 1.92961075; H 0.89078269 -2.60371346 1.92961075; H 0.00000000 -2.01650898 3.35718999; }; energy(""pbe-d3bj/def2-sv(p)""); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1856:1358,energy,energy,1358,https://psicode.org,https://github.com/psi4/psi4/issues/1856,1,['energy'],['energy']
Energy Efficiency,"The Psithon input could be made more powerful if it could accept a python dictionary. For example, this could be useful when the user wants to specify orbital spaces:; ```; docc = {'a1' : 3, 'b2' : 1, 'b2' : 1} # converted internally to an option of the form [['a1',3], ['b1',1], ['b2',1]]; ```; There are probably several other potential uses for this feature.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1944:37,power,powerful,37,https://psicode.org,https://github.com/psi4/psi4/issues/1944,1,['power'],['powerful']
Energy Efficiency,"The SAPT(DFT) module runs correctly using hybrid functionals like PBE0, but cannot be run with GGAs like PBE. I have used the commands:; _set {; scf_type df; sapt_dft_functional PBE; sapt_dft_do_dHF False; sapt_dft_grac_shift_a 0.12589; sapt_dft_grac_shift_b 0.12589; }_. to obtain PBE in this module, but this results in the error message:. _=> Auxiliary Basis Set <=; ; Basis Set: ANONYMOUS400E6A7D; Blend: AUG-CC-PVDZ-JKFIT + MB-SET-RI; Number of shells: 478; Number of basis function: 1452; Number of Cartesian functions: 1697; Spherical Harmonics?: true; Max angular momentum: 4; ; ; Traceback (most recent call last):; File ""/home/alston/Psi4/install/1.2-gcc/bin/psi4"", line 259, in <module>; exec(content); File ""<string>"", line 71, in <module>; File ""/home/alston/Psi4/install/1.2-gcc/lib//psi4/driver/driver.py"", line 460, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/alston/Psi4/install/1.2-gcc/lib//psi4/driver/procrouting/sapt/sapt_proc.py"", line 234, in run_sapt_dft; cache = sapt_jk_terms.build_sapt_jk_cache(wfn_A, wfn_B, sapt_jk, True); File ""/home/alston/Psi4/install/1.2-gcc/lib//psi4/driver/procrouting/sapt/sapt_jk_terms.py"", line 108, in build_sapt_jk_cache; cache[""K_A""] = jk.K()[0].clone(); ; IndexError: list index out of range; ; *** Psi4 encountered an error. Buy a developer more coffee!; *** Resources and help at github.com/psi4/psi4._. **Perhaps jk.K() is not filled for a GGA?** While GGAs are not expected to yield accurate SAPT(DFT) interaction energies it will be useful to have the ability to use them, if only for testing and benchmarking purposes.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/911:835,energy,energy,835,https://psicode.org,https://github.com/psi4/psi4/issues/911,2,['energy'],['energy']
Energy Efficiency,"The `dct` module does not seem to like linear dependencies. Example 1:; ```; molecule { ; o ; h 1 1.0 ; h 1 1.0 2 104.5; }. set {; basis 'aug-cc-pvtz'; s_tolerance 1e-3; }. energy('dct'); ```. The computation runs to completion and gives energies that are at least _plausible_. But the output file is littered with; ```; There was a problem correcting the MO phases.; If this does not converge, try ALGORITHM=TWOSTEP; ```; and `stderr` receives several MKL errors. Example 2:; ```; molecule { ; o ; h 1 1.0 ; h 1 1.0 2 104.5; }. set {; basis 'aug-cc-pvtz'; dct_type df; s_tolerance 1e-3; }. energy('dct'); ```. Using the DF code triggers a segfault. There may well be more examples I haven't found yet as I venture into other parts of the module. Either way, I'm going to be fixing this.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2231:173,energy,energy,173,https://psicode.org,https://github.com/psi4/psi4/issues/2231,2,['energy'],['energy']
Energy Efficiency,"The `dfocc` module has had problems converging MOs tightly. My experience with orbital optimization tells me the problem can be cured by coupling the DIIS iterations for orbital steps and amplitude steps, as is done in the `dct` module and in the `occ` module. There should be an option (I'd suggest making this the default option) to couple the DIIS steps, so examples like the following converge:. ```; molecule {; 1 2; units bohr; O 0.000000000000 0.000000000000 -0.143225816552; H 0.000000000000 1.638036840407 1.136548822547; H 0.000000000000 -1.638036840407 1.136548822547; }. set reference uhf ; set basis sto-3g; set MAX_MOGRAD_CONVERGENCE 8; set e_convergence 10. energy('omp2'); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2215:673,energy,energy,673,https://psicode.org,https://github.com/psi4/psi4/issues/2215,1,['energy'],['energy']
Energy Efficiency,"The `dmrg/caspt2-n2` is quite large compared to the quicktests. I am no expert in DMRG, but maybe scaling down the active space to 6 orbitals would be ok for code-coverage?. I use the following patch in Debian:. ```; --- ./tests/dmrg/caspt2-n2/input.dat.orig 2016-09-23 21:52:13.874684018 +0200; +++ ./tests/dmrg/caspt2-n2/input.dat 2016-09-23 21:58:45.226670772 +0200; @@ -13,8 +13,8 @@. set dmrg_irrep 0; set dmrg_multiplicity 1; -set restricted_docc [ 1 , 0 , 0 , 0 , 0 , 1 , 0 , 0 ]; -set active [ 4 , 0 , 1 , 1 , 0 , 4 , 1 , 1 ]; +set restricted_docc [ 3 , 0 , 0 , 0 , 0 , 3 , 0 , 0 ]; +set active [ 1 , 0 , 1 , 1 , 0 , 1 , 1 , 1 ]. set dmrg_sweep_states [ 500, 1000]; set dmrg_sweep_energy_conv [ 1e-10, 1e-10]; @@ -41,6 +41,6 @@. energy(""dmrg-caspt2""). -compare_values(-109.15104350802, get_variable(""DMRG-SCF ENERGY""), 6, ""DMRG-SCF Energy"") #TEST; -compare_values(-109.2680229921, get_variable(""CURRENT ENERGY""), 6, ""DMRG-CASPT2 Energy"") #TEST; +compare_values(-107.2576689206, get_variable(""DMRG-SCF ENERGY""), 6, ""DMRG-SCF Energy"") #TEST; +compare_values(-107.5036855148, get_variable(""CURRENT ENERGY""), 6, ""DMRG-CASPT2 Energy"") #TEST; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/474:737,energy,energy,737,https://psicode.org,https://github.com/psi4/psi4/issues/474,9,"['ENERGY', 'Energy', 'energy']","['ENERGY', 'Energy', 'energy']"
Energy Efficiency,"The `gradient` call is using the whole CBS function for the displacements. Thus getting MP2 ""for free"". Looks like `ptype=energy` is run in `cbs()` because one does not get the `GRADIENT` label, while for the `hessian()` we get `ptype=hessian` which calculates a hessian for each component(?). The separation of MP2 and CCSD(T) for the `:D` part then uses DF-MP2.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1897#issuecomment-632827953:122,energy,energy,122,https://psicode.org,https://github.com/psi4/psi4/issues/1897#issuecomment-632827953,1,['energy'],['energy']
Energy Efficiency,"The `pcg_convergence` behavior is a change for the better. Your analysis of the issue is right, but I'd rather couple `pcg_convergence` to `r_convergence`, how tightly the residual equations are satisfied. The CEPA is a touch trickier. My initial tests say that the energy convergence is working just fine. What isn't within convergence tolerance is the decomposition of correlation energy into same-spin and opposite-spin components. Is that what you're seeing? I can investigate, but this may not be an implementation issue, just a quirk of the equations.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1980#issuecomment-676411057:266,energy,energy,266,https://psicode.org,https://github.com/psi4/psi4/pull/1980#issuecomment-676411057,2,['energy'],['energy']
Energy Efficiency,"The `pip` numpy probably doesn't use MKL (you'd have to `otool -L` one of numpy's internal `.dylib`s to figure out where it's getting blas and what threading library it's using), so that can interact very badly (wrong answers or n-thread-dependent answers) with a psi4 that does use MKL. If your aim is solely psithon (running psi as executable), you may want to backtrack to before the triple export when ~all the testsuite besides the psiapi (start with json/psi4numpy/python) was working, run `which python psi4` to confirm you're running what you expect, check the multithreaded answers to make sure that's not wrong, then work with that until I get a recent nightly build up. What you're doing (Mac + GCC + indep numpy) should be perfectly do-able, but Psi needs MKL for best performance (and it's easy to get _wrong_ performance from other libs) and that means numpy needs to be MKL (whichever symbols of numpy or psi loaded first are what the other one has to use, so it's best if they're identical) so we encourage the conda groove for numpy. The psi4-dev (w/o --clang/intel/gcc) that Holger mentioned will help compiling with conda python, numpy, libint, etc. But it isn't powerful enough to counteract the gomp that gcc will try to impose.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1870#issuecomment-614809204:1182,power,powerful,1182,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-614809204,1,['power'],['powerful']
Energy Efficiency,"The analytic and numerical MP2 gradients disagree when a QMMM charge field is used, while the same calculation runs correctly at the HF level. [psi4 version 1.0.0]. I found a similar issue which has already been resolved with the RKS gradient: https://github.com/psi4/psi4/issues/184 . My test case is one QM water molecule in the presence of two TIP3P-charge waters. ```; memory 400 mb. molecule water {; 0 1; O -0.167787 1.645761 0.108747; H 0.613411 1.10262 0.113724; H -0.093821 2.20972 -0.643619; symmetry c1; no_reorient; no_com; }. chgfield = QMMM(). chgfield.extern.addCharge(-0.834, -1.350388, -0.964879, -0.092208); chgfield.extern.addCharge(0.417, -1.908991, -1.211298, 0.626207); chgfield.extern.addCharge(0.417, -1.263787, -0.018107, -0.055536); chgfield.extern.addCharge(-0.834, 1.517569, -0.667424, -0.080674); chgfield.extern.addCharge(0.417, 1.989645, -1.098799, 0.612047); chgfield.extern.addCharge(0.417, 0.668397, -1.091798, -0.139744); psi4.set_global_option_python('EXTERN', chgfield.extern). set basis aug-cc-pvtz; set scf_type df; set freeze_core True. grad_fd = gradient('mp2', molecule=water, dertype=0); grad_an = gradient('mp2', molecule=water); compare_matrices(grad_an, grad_fd, 5, ""TESTING finite-diff vs. analytic gradient""); ```; The identical input file replacing ""mp2"" with ""hf"" runs successfully. It seems strange to me, since as far as I understand the external charges should only modify the core contribution to the Fock matrix. Is there a possibility that gradient('mp2') somehow fails to include the external potential gradients that are correctly computed in gradient('hf')?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/618:62,charge,charge,62,https://psicode.org,https://github.com/psi4/psi4/issues/618,3,['charge'],"['charge', 'charges']"
Energy Efficiency,"The atomic UHF solver code doesn't include ECP elements in its core Hamiltonian operator at present. Likewise, ECPs aren't taken into account in the spin state determination for the SAD state. (This is not a problem for #1458 though since it switches the default to spin-averaged densities.). For instance,; ```; molecule {; 0 1; Xe; }. set guess sad; set basis def2-svp; set sad_print 2; energy('scf'); ```. gives; ```; @Atomic UHF Final Energy for atom XE: -2507.62764642306365; Finished UHF Computation!. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-RHF iter 0: 285.32485664068048 2.85325e+02 0.00000e+00 ; @DF-RHF iter 1: -189.84500624892323 -4.75170e+02 8.80223e-01 DIIS; @DF-RHF iter 2: -290.52105276490687 -1.00676e+02 4.66004e-01 DIIS; @DF-RHF iter 3: -328.09971971455047 -3.75787e+01 4.86655e-02 DIIS; @DF-RHF iter 4: -328.29180563637317 -1.92086e-01 6.06357e-03 DIIS; @DF-RHF iter 5: -328.29809735789945 -6.29172e-03 1.54650e-03 DIIS; @DF-RHF iter 6: -328.29834344170320 -2.46084e-04 2.46581e-04 DIIS; @DF-RHF iter 7: -328.29835685761799 -1.34159e-05 4.28492e-05 DIIS; @DF-RHF iter 8: -328.29835732243424 -4.64816e-07 4.48232e-06 DIIS; @DF-RHF iter 9: -328.29835733488505 -1.24508e-08 4.61031e-07 DIIS; Energy converged.; ```. so it's only a small 2200 Hartree difference between the calculations :tongue:",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1473:389,energy,energy,389,https://psicode.org,https://github.com/psi4/psi4/issues/1473,4,"['Energy', 'energy']","['Energy', 'energy']"
Energy Efficiency,"The attached input uses basis_guess to specify a basis set for the initial guess: [sapt.zip](https://github.com/psi4/psi4/files/557209/sapt.zip). This worked with a previous PSI4 release. I guess that was 4.0b6 back then. With a recent development version of PSI4 (commit 7e4ecf968ec7920ab404cb357de827cf3785a254, Wed Oct 19 16:52:24 2016 -0400), I get the following error:. ```; toon@molmod49 ~/sapt> psi4 sapt.in . QcdbException BasisSetNotFound: BasisSet::construct: Unable to find a basis set for atom 1 for role JKFIT among:; Shell Entries: [u'N']; Basis Sets: [(u'1', u'1', None)]; File Path: /home/toon/sapt, /home/toon/sapt, /home/toon/.local/share/psi4/basis; Input Blocks: . Traceback (most recent call last):; File ""/home/toon/.local/bin/psi4"", line 161, in <module>; exec(content); File ""<string>"", line 53, in <module>; File ""/home/toon/.local/bin/../lib/psi4/driver/driver.py"", line 447, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/toon/.local/bin/../lib/psi4/driver/procedures/proc.py"", line 3133, in run_sapt; dimer_wfn = scf_helper('RHF', molecule=sapt_dimer, **kwargs); File ""/home/toon/.local/bin/../lib/psi4/driver/procedures/proc.py"", line 1199, in scf_helper; ref_wfn = scf_wavefunction_factory(core.get_option('SCF', 'REFERENCE'), base_wfn); File ""/home/toon/.local/bin/../lib/psi4/driver/procedures/proc.py"", line 1028, in scf_wavefunction_factory; puream=wfn.basisset().has_puream()); File ""/home/toon/.local/lib/psi4/driver/p4util/python_helpers.py"", line 60, in pybuild_basis; key, target, fitrole, other, return_atomlist=return_atomlist); File ""/home/toon/.local/bin/../lib/psi4/driver/qcdb/libmintsbasisset.py"", line 631, in pyconstruct; return_atomlist=return_atomlist); File ""/home/toon/.local/bin/../lib/psi4/driver/qcdb/libmintsbasisset.py"", line 805, in construct; (at + 1, role, text2)); psi4.driver.qcdb.exceptions.BasisSetNotFound: BasisSet::construct: Unable to find a basis set for atom 1 for role JKFIT ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/484:905,energy,energy,905,https://psicode.org,https://github.com/psi4/psi4/issues/484,2,['energy'],['energy']
Energy Efficiency,The basis set taken from https://github.com/HPQC-LABS/AI_ENERGIES/blob/master/GENBAS is here (just change the suffix): [aV10Z-FELLER_H.txt](https://github.com/psi4/psi4/files/5132469/aV10Z-FELLER_H.txt). Example input; ```; molecule {; 0 1; H; H 1 0.74; }. memory 8 gb; set basis aV10Z-FELLER; set scf_type direct; energy('scf'); ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1992#issuecomment-681083674:315,energy,energy,315,https://psicode.org,https://github.com/psi4/psi4/issues/1992#issuecomment-681083674,1,['energy'],['energy']
Energy Efficiency,"The benefits of the SAD guess are pretty humongous over the current default. E.g. ; ```; molecule {; 0 2; V 0.000000 0.000000 0.000000 ; N -0.009654 1.561722 1.062138 ; N 0.009654 -1.561722 1.062138 ; N -1.561722 -0.009654 -1.062138 ; N 1.561722 0.009654 -1.062138 ; C -1.219978 2.113945 1.655979 ; C 1.219978 -2.113945 1.655979 ; C -2.113945 -1.219978 -1.655979 ; C 2.113945 1.219978 -1.655979 ; C 1.188278 2.080402 1.709075 ; C -1.188278 -2.080402 1.709075 ; C -2.080402 1.188278 -1.709075 ; C 2.080402 -1.188278 -1.709075 ; H -2.112996 1.691813 1.177356 ; H 2.112996 -1.691813 1.177356 ; H -1.691813 -2.112996 -1.177356 ; H 1.691813 2.112996 -1.177356 ; H 2.089441 1.627028 1.275983 ; H -2.089441 -1.627028 1.275983 ; H -1.627028 2.089441 -1.275983 ; H 1.627028 -2.089441 -1.275983 ; H -1.254235 3.214541 1.536136 ; H 1.254235 -3.214541 1.536136 ; H -1.905317 -1.281383 -2.742242 ; H 1.905317 1.281383 -2.742242 ; H 1.192045 1.877111 2.798018 ; H -1.192045 -1.877111 2.798018 ; H -3.178469 1.263762 -1.584921 ; H 3.178469 -1.263762 -1.584921 ; H -1.281383 1.905317 2.742242 ; H 1.281383 -1.905317 2.742242 ; H -3.214541 -1.254235 -1.536136 ; H 3.214541 1.254235 -1.536136 ; H 1.263762 3.178469 1.584921 ; H -1.263762 -3.178469 1.584921 ; H -1.877111 1.192045 -2.798018 ; H 1.877111 -1.192045 -2.798018; }. set basis pcseg-1; set reference uhf; set scf_type direct; set sad_print 2; set guess sad; set sad_spin_average false; set df_scf_guess false; energy('scf'); ```. | Guess | Num iter | Energy |; | -- | -- | -- |; | fractional SAD, ground spin state | 13 | -1477.26833028686269 |; | fractional SAD, spin-averaged occupations | 14 | -1477.26833044972045 |; | gwh | 62 | -1477.12773301260950 |; | core | >100 | |. so not only is the number of iterations reduced by almost a factor of 5, it also yields a lower solution.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1458#issuecomment-451607232:1452,energy,energy,1452,https://psicode.org,https://github.com/psi4/psi4/pull/1458#issuecomment-451607232,3,"['Energy', 'energy', 'reduce']","['Energy', 'energy', 'reduced']"
Energy Efficiency,"The big difference between AO and plane wave methods is that plane-wave bases are **verbose**. The reason why plane-wave methods don't accelerate convergence using the Fock matrix is that **it is typically never built** since it could not be stored. Instead, it is always contracted right away with trial vectors, as in traditional configuration interaction approaches, for example. The acceleration based on Fock matrix extrapolation is much more efficient than one based on the electron density.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3065#issuecomment-1784887073:448,efficient,efficient,448,https://psicode.org,https://github.com/psi4/psi4/issues/3065#issuecomment-1784887073,1,['efficient'],['efficient']
Energy Efficiency,"The calculation I'm trying to run is; ```; molecule {; 0 1; symmetry c1; Mn -0.0128264866 -0.0002779912 -0.1091894544; O -1.1037647823 1.0246639195 -1.2821459116; O -0.4319309790 -1.5910632792 -1.0423314985; N 0.7243918073 1.6205280457 0.7709992473; N 1.3008767173 -0.9287768925 1.0635839133; C -1.2886186814 2.2834208702 -1.2181338272; C -0.7050865946 3.1821062059 -0.3604271375; C 0.3534920334 2.8195308082 0.5207059889; C 0.2177419816 -2.6945497951 -0.9662726987; C 1.2181378357 -3.0250490115 -0.0961995911; C 1.7180430400 -2.1229929449 0.8899899444; C 1.9393113446 1.3525171542 1.5367699106; C 1.8333722479 -0.0604962603 2.1055467704; H 0.8908035853 3.6241374839 1.0039698993; H 2.5024254412 -2.4854165868 1.5399007635; H 2.7858100041 1.4098930461 0.8661311665; H 1.1490336627 -0.0652673733 2.9502674019; H 2.0638511115 2.0769335299 2.3353274192; H 2.7993768711 -0.4085469833 2.4534782102; H -1.9892347032 2.6686747336 -1.9454961675; H -0.0986239324 -3.4441353556 -1.6764363233; Cl 1.8821942342 0.3098852687 -1.6599082362; O -1.1395010178 -0.1703680057 0.9263551082; H -0.9312248148 4.2251864392 -0.4696082573; H 1.6695378989 -3.9953914470 -0.1633815245; }. # Run SCF; set basis 3-21G; set scf_type pk; set soscf true; scf_e, scf_wfn = energy('scf', return_wfn=True). # Guess active space orbitals: (20e,40o); set restricted_docc [49]; set active [40]; set nat_orbs true; ci_e, ci_wfn = energy('cisd', ref_wfn=scf_wfn, return_wfn=True). # Run (10e,10o) CASSCF; set frozen_docc [0]; set restricted_docc [64]; set active [10]; set nat_orbs true; cas_e, cas_wfn = energy('casscf', ref_wfn=ci_wfn, return_wfn=True); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/598#issuecomment-276286479:1240,energy,energy,1240,https://psicode.org,https://github.com/psi4/psi4/issues/598#issuecomment-276286479,3,['energy'],['energy']
Energy Efficiency,"The calculation; ```; molecule {; 0 2; Li; }. set basis cc-pVDZ; set reference rohf; set scf_type pk; set DOCC [ 1, 0, 0, 0, 0, 0, 0, 0 ]; set SOCC [ 0, 0, 0, 0, 1, 0, 0, 0 ]; energy('scf'); ```; produces a segfault when run. All the other ways of distributing the single electron work.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/597:176,energy,energy,176,https://psicode.org,https://github.com/psi4/psi4/issues/597,1,['energy'],['energy']
Energy Efficiency,"The ccenergy & detci shortcuts are basically there for the small subset of users (maybe 2) who know psi3 better than psi4 and for debugging. They were faintly documented here https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/proc_table.py#L103-L117 (first and last lines) but not advertised since it didn't match the psi4 philosophy of specific method. The `ex_level` wasn't intended to be used directly. Is it `energy(""ci5"")` that you're after? detci can do so many arbitrary orders (inefficiently) that we didn't want to clutter up the procedures dict (this was pre-dft days).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2282#issuecomment-904256592:427,energy,energy,427,https://psicode.org,https://github.com/psi4/psi4/issues/2282#issuecomment-904256592,1,['energy'],['energy']
Energy Efficiency,"The code checks the number of GPUs and throws an exception if there are none. Regarding the memory, the code in its current form requires at least as much CPU memory as the GPU has. For GP100, that is 16 GB. I’ll reduce this test case to 16 GB, but I need to think carefully how to reduce it safely to a “normal” amount. > On Jun 14, 2018, at 11:16 AM, Lori A. Burns <notifications@github.com> wrote:; > ; > @loriab commented on this pull request.; > ; > In tests/gpu_dfcc/gpu_dfcc1/input.dat <https://github.com/psi4/psi4/pull/997#discussion_r195463106>:; > ; > > @@ -0,0 +1,34 @@; > +#! cc-pvdz (H2O)2 Test DF-CCSD vs GPU-DF-CCSD; > +; > +sys.path.insert(0,'../../../.'); > +; > +import gpu_dfcc; > +; > +molecule {; > + O 0.000000000000 0.000000000000 -0.068516219310 ; > + H 0.000000000000 -0.790689573744 0.543701060724 ; > + H 0.000000000000 0.790689573744 0.543701060724 ; > +}; > +; > +memory 32000 mb; > What happens on a computer with only CPUs? Do we need to disable if hardware not detected? Only import the plugin if num_gpus>1? Or is it just harmless or non-obliging if no GPUs to work with? Clearly I've just no experience with hardware-dependent tests.; > ; > In any case, I hope memory req. can be toned down?; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub <https://github.com/psi4/psi4/pull/997#pullrequestreview-128837847>, or mute the thread <https://github.com/notifications/unsubscribe-auth/AClSGg6UFdaiUjSouvB5u5K8uNAWsj5mks5t8n5DgaJpZM4Tutpb>.; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/997#issuecomment-397334449:213,reduce,reduce,213,https://psicode.org,https://github.com/psi4/psi4/pull/997#issuecomment-397334449,2,['reduce'],['reduce']
Energy Efficiency,"The code is correct, but I haven't put much effort into making it memory efficient. The [second derivative terms](https://github.com/andysim/psi4/blob/hessians/src/bin/scfgrad/jk_grad.cc#L1593-L2336) allocate some large matrices up top (could still do some pretty large calculations with these in core), and the [Fock derivative terms](https://github.com/andysim/psi4/blob/hessians/src/bin/scfgrad/response.cc#L443-L779) also allocate large chunks. The Fock derivative code does at least handle the 3_N_nso*nso results in a batched way. The biggest problem is that I lazily recompute some quantities that @robparrish wrote efficient routines for handling out of core, particularly `(A|ij)` and `(A|B)^{-1}(B|ij)`. If anybody wants to have a stab a refactoring the current code, be my guest. I'll be able to get to it some day, but not in the next couple of months. The aim of this implementation is really just to have something that works, to serve as a guideline for our efforts to get Hessians for many other methods. I know that @bozkaya and @lothian were interested in getting Hessians into their codes, and I'm more than happy to work with them to get this code adapted for their needs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/437#issuecomment-232996171:73,efficient,efficient,73,https://psicode.org,https://github.com/psi4/psi4/pull/437#issuecomment-232996171,5,"['adapt', 'allocate', 'efficient']","['adapted', 'allocate', 'efficient']"
Energy Efficiency,"The code looks anodyne, but I would appreciate information about how this fixes #2272. From my understanding, #2272 is that when QCEngine tasks Psi with computing MBIS charges, Psi (a) would try to compute atom volumes but (b) would not have set some necessary variables. I would like to understand _why_ the call coming from QCEngine rather than a Psi input file means we get both (a) and (b) and how this PR disrupts that mechanism.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2273#issuecomment-926617520:168,charge,charges,168,https://psicode.org,https://github.com/psi4/psi4/pull/2273#issuecomment-926617520,1,['charge'],['charges']
Energy Efficiency,"The code still needs to go through at least one iteration of the CC equations in order to confirm that the wfn it used from disk is actually converged. . ## -TDC. Prof. T. Daniel Crawford; crawdad@vt.edu; 540-231-7760. On Dec 5, 2013, at 3:13 AM, sbart76 notifications@github.com wrote:. > Well, there is a progress. I have set the filename and force_restart keywords. This results in:; > ; > ```; > **************************; > * *; > * CCENERGY *; > * *; > **************************; > ; > Nuclear Rep. energy (chkpt) = 327.121621300020024; > SCF energy (chkpt) = -1150.463735394306923; > Reference energy (file100) = -1150.463735394307605; > ; > Input parameters:; > -----------------; > Wave function = CC3; > Reference wfn = RHF; > Memory (Mbytes) = 8192.0; > Maxiter = 50; > R_Convergence = 1.0e-07; > E_Convergence = 1.0e-06; > Restart = Yes; > DIIS = Yes; > AO Basis = NONE; > ABCD = NEW; > Cache Level = 2; > Cache Type = LOW; > Print Level = 5; > Num. of threads = 8; > # Amps to Print = 10; > Print MP2 Amps? = No; > Analyze T2 Amps = No; > Print Pair Ener = No; > Local CC = No; > T3 Ws incore = No; > SCS-MP2 = False; > SCSN-MP2 = False; > SCS-CCSD = False; > ; > Using old T1 amplitudes.; > Solving CC Amplitude Equations; > ------------------------------; > ```; > ; > Iter Energy RMS T1Diag D1Diag New D1Diag D2Diag; > ; > ---; > ; > ```; > 0 -1.235360138318377 0.000e+00 0.000000 0.000000 0.000000 0.135205; > ```; > ; > So it seems to reuse the old T1 amplitudes, but still goes to solving the equations anyway - I was rather expecting it to skip this step - as this is the most time consuming part and there is nothing changed in the system since the crash.; > ; > Bartek; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/27#issuecomment-29895339:507,energy,energy,507,https://psicode.org,https://github.com/psi4/psi4/issues/27#issuecomment-29895339,4,"['Energy', 'energy']","['Energy', 'energy']"
Energy Efficiency,"The context of this issue is that I got a report from @bennybp that a number of QCArchive geometry optimizations were failing, in which geomeTRIC was used to optimize the geometry by calling Psi4 (through QCEngine) for single point energies and gradients. The optimizations are part of a dataset of transition metal complexes with initial structures taken from the CSD / ICSD and pre-minimized with a semiempirical model. . Ben sent the QCArchive job specification to my student @hjnpark who converted it to a Psi4 input file (see attached input.dat in data.zip). Using this I was able to reproduce the optimization failure using geomeTRIC's command line calling Psi4 directly. We weren't sure whether the issue was due to geomeTRIC's optimization algorithm or an inaccuracy in the gradient from Psi4, so I computed the numerical gradient using finite difference of the energy and compared it with the analytic gradient. I found several components of the gradient where the difference exceeds 3e-4 and the largest difference exceeds 1e-3. The result is consistent when I use two different step sizes for the finite difference (1e-3 and 1e-4 a.u., both using central (3-point) finite difference; see fd-ana-grad.txt file in attached data.zip). By contrast, for a different system (a water dimer calculated at HF/STO-3G), the max difference between numerical and analytic gradients using a 1e-3 step size is around 1e-6. I've attached a picture where the numerical gradient, analytic gradient, and the difference are visualized. The difference is mainly on the La and Br atoms, with smaller components on the other atoms. These forces do not appear to be purely translational/rotational, but I think there is a translational/rotational component because the ""trajectory"" of the optimization appears to include some translational/rotational motion as well as distortion (attached qce_optim.xyz in data.zip). ![1](https://github.com/psi4/psi4/assets/1441560/e3dea159-d922-40c8-bad9-868b20f710e3). Although",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3066:870,energy,energy,870,https://psicode.org,https://github.com/psi4/psi4/issues/3066,1,['energy'],['energy']
Energy Efficiency,"The contraption you show above could also be written as `if procedures['energy'][method_name] in [proc.run_scf, proc.run_tdscf_energy]:`. Regarding the nirrep>1 problem, it sounds like the backtransformation is either not numerically sound or is not being applied correctly. I didn't see anything wrong in the first pass through but I'll look again.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-644786185:72,energy,energy,72,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-644786185,1,['energy'],['energy']
Energy Efficiency,"The conversion to traceless form can be done for any order of multipole, but I'm not really sure it's got a use case at this point. Quadrupoles in traceless form can be useful for force field definitions. Our CFMM code uses very high orders of multipoles, but they're converted to spherical harmonics to work with all the efficient machinery we've developed so that doesn't need the traceless definition.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2485#issuecomment-1075088445:322,efficient,efficient,322,https://psicode.org,https://github.com/psi4/psi4/pull/2485#issuecomment-1075088445,1,['efficient'],['efficient']
Energy Efficiency,"The crash is also reproducible with a slightly smaller input; ```; molecule {; 0 1; symmetry c1; Mn -0.0128264866 -0.0002779912 -0.1091894544; O -1.1037647823 1.0246639195 -1.2821459116; O -0.4319309790 -1.5910632792 -1.0423314985; N 0.7243918073 1.6205280457 0.7709992473; N 1.3008767173 -0.9287768925 1.0635839133; C -1.2886186814 2.2834208702 -1.2181338272; C -0.7050865946 3.1821062059 -0.3604271375; C 0.3534920334 2.8195308082 0.5207059889; C 0.2177419816 -2.6945497951 -0.9662726987; C 1.2181378357 -3.0250490115 -0.0961995911; C 1.7180430400 -2.1229929449 0.8899899444; C 1.9393113446 1.3525171542 1.5367699106; C 1.8333722479 -0.0604962603 2.1055467704; H 0.8908035853 3.6241374839 1.0039698993; H 2.5024254412 -2.4854165868 1.5399007635; H 2.7858100041 1.4098930461 0.8661311665; H 1.1490336627 -0.0652673733 2.9502674019; H 2.0638511115 2.0769335299 2.3353274192; H 2.7993768711 -0.4085469833 2.4534782102; H -1.9892347032 2.6686747336 -1.9454961675; H -0.0986239324 -3.4441353556 -1.6764363233; Cl 1.8821942342 0.3098852687 -1.6599082362; O -1.1395010178 -0.1703680057 0.9263551082; H -0.9312248148 4.2251864392 -0.4696082573; H 1.6695378989 -3.9953914470 -0.1633815245; }. # Run SCF, initialize in smaller basis; set basis 3-21G; set scf_type pk; set soscf true; scf_e, scf_wfn = energy('scf', return_wfn=True). # Get CISD active space guess. 69 occupied orbitals, out of which 32; # are core electrons. Leaves No=37 orbitals, excitable into Nv=110; # virtuals. Let's take only the first 40 virtuals; set restricted_docc [32]; set restricted_uocc [70]; set qc_module detci; set nat_orbs true; ci_e, ci_wfn = energy('cisd', ref_wfn=scf_wfn, return_wfn=True); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/606#issuecomment-277491791:1293,energy,energy,1293,https://psicode.org,https://github.com/psi4/psi4/issues/606#issuecomment-277491791,2,['energy'],['energy']
Energy Efficiency,"The current code detected 4 different fragments for the extended CH3F.; Then it tried to connect them. It really should have been able to do so.; I don't see why it didn't work, and I'm looking for a bug. On Sun, Mar 13, 2016 at 2:00 PM, Lori A. Burns notifications@github.com; wrote:. > Certainly the flexibility of the optimizer oughtn't be reduced. In the; > absence of fixed/frozen keywords or user supplied/edited intco (do you need; > a keyword to signal do-read-intco instead of accepting any it finds?), it's; > probably reasonable to assume a full optimization is desired. Maybe grep; > '~' needs to catch a gradient.rms(), too, next to the optking-active rms; > gradient.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/310#issuecomment-196021110.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/310#issuecomment-196036551:343,reduce,reduced,343,https://psicode.org,https://github.com/psi4/psi4/issues/310#issuecomment-196036551,1,['reduce'],['reduced']
Energy Efficiency,"The eps file doc/progman/svn/svn.eps.in is 1.4 MB and takes a long time to render in Gnome evince. Furthermore, it has the following commtens inside:. %%Copyright: Copyright(C)2000-2003 Adobe Systems, Inc. All Rights Reserved.; %%Copyright: Copyright(C)1997-2005 Adobe Systems, Inc. All Rights Reserved. Apparently, doc/progman/svn.fig is the source for a previous version of this .eps. As the progman Makefile is no longer generated by configure.ac, maybe the whole directory could be yanked or the .eps regenerated with fig2dev (which also reduces the size to a few kilobytes)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/26:542,reduce,reduces,542,https://psicode.org,https://github.com/psi4/psi4/issues/26,1,['reduce'],['reduces']
Energy Efficiency,"The error I get is; ```; ==> Starting MCSCF iterations <==. Iter Total Energy Delta E Orb RMS CI RMS NCI NORB. Traceback (most recent call last):; File ""/home/work/psi4/install/bin/psi4"", line 223, in <module>; exec(content); File ""<string>"", line 35, in <module>; File ""/home/work/psi4/install/lib/psi4/driver/driver.py"", line 447, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/work/psi4/install/lib/psi4/driver/procedures/proc.py"", line 4025, in run_detcas; ciwfn = mcscf.mcscf_solver(ref_wfn); File ""/home/work/psi4/install/lib/psi4/driver/procedures/mcscf/mcscf_solver.py"", line 153, in mcscf_solver; nci_iter = ciwfn.diag_h(abs(ediff) * 1.e-2, orb_grad_rms * 1.e-3). RuntimeError: ; Fatal Error: PSIO Error; Error occurred in file: /home/work/psi4/psi4/psi4/src/psi4/libpsio/error.cc on line: 128; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::psio_error(unsigned int, unsigned int); psi::PSIO::read(unsigned int, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::psio_read(unsigned int, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::psio_read_entry(unsigned int, char const*, char*, unsigned long); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/588#issuecomment-275790678:71,Energy,Energy,71,https://psicode.org,https://github.com/psi4/psi4/pull/588#issuecomment-275790678,3,"['Energy', 'energy']","['Energy', 'energy']"
Energy Efficiency,"The farther the waters are apart the more positive the energy gets. Energy also stays essentially constant then. ```; @DF-RKS iter 4: -76.32981119020519 -1.12735e-04 7.24826e-05 DIIS; @DF-RKS iter 5: 119.53415655216450 1.95864e+02 4.45340e-01 DIIS; @DF-RKS iter 6: 119.53415655216457 7.10543e-14 4.45340e-01 DIIS; @DF-RKS iter 7: 119.53415655216453 -4.26326e-14 4.45340e-01 DIIS. ```. They are 5 A apart in the original example, quite far already. Putting them at 3 A leads to SCF convergence.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/900#issuecomment-360585139:55,energy,energy,55,https://psicode.org,https://github.com/psi4/psi4/issues/900#issuecomment-360585139,2,"['Energy', 'energy']","['Energy', 'energy']"
Energy Efficiency,"The first SAD energy gives you a general feeling of how well SAD is doing. We do mark this as ""Iteration 0"", but we could bump up the documentation level there. Either way very much not in favor of removing it wholesale.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1493#issuecomment-457198710:14,energy,energy,14,https://psicode.org,https://github.com/psi4/psi4/pull/1493#issuecomment-457198710,1,['energy'],['energy']
Energy Efficiency,"The following attempt at an IRC fails. The mode I'm following lowers symmetry from C2v to Cs:; ```import os; import shutil. memory 7 gb. molecule ts {; symmetry csx; 0 3; O; H 1 r1; O 1 r2 2 a1; H 1 r1 3 a1 2 d1; S 1 r3 2 a1 4 d2. r1 = 0.966761443523761; r2 = 3.122239629907337; a1 = 51.253600445125215; d1 = 180.000000000000000; r3 = 4.641761974905505; d2 = 0.000000000000000; }. hessname = ""output.ts.{}.hess"".format(os.getpid()); shutil.copy(""FCMFINAL"",hessname). set {; opt_type irc; irc_direction backward; basis aug-cc-pV(D+d)Z; maxiter 300; g_convergence gau_verytight; geom_maxiter 1000; cart_hess_read true; dynamic_level 1; reference uhf; irc_step_size 0.01; ensure_bt_convergence true; normal_modes_write true; print_trajectory_xyz_file true; }. energy = optimize('b3lyp'); ```. The problem is in the following snippet of output:; ```; @IRC; @IRC Point Sphere Step Energy DE MAX Force RMS Force MAX Disp RMS Disp; @IRC -----------------------------------------------------------------------------------------------------------; @IRC 1 1 -549.84523511 -1.42e-05 o 3.60e-03 9.91e-04 4.76e-03 2.20e-03 ~; -----------------------------------------------------------------------------------------------------------. Successfully symmetrized geometry.; Writing optimization data to binary file.; Structure for next step:; Cartesian Geometry (in Angstrom); O 0.0000000000 0.0006522925 -3.0256582351; H 0.0000000000 -0.7545860178 -2.4217783475; O 0.0000000000 0.0004273016 0.0969091320; H 0.0000000000 0.7536033792 -2.4213898491; S 0.0000000000 -0.0000969555 1.6158069683; --------------------------; OPTKING Finished Execution; --------------------------. Structure for next step:; Molecular point group: cs; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 3:. O; H 1 r1; O 1 r2 2 a1; H 1 r1 3 a1 2 d1; S 1 r3 2 a1 4 d2. a1 = 51.3453210949; d1 = -180.0000000000; d2 = -0.0000000000; r1 = 0.9654406358; r2 = 3.1225673752; r3 = 4.6414652638. gradient() will perform analyti",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1126:757,energy,energy,757,https://psicode.org,https://github.com/psi4/psi4/issues/1126,2,"['Energy', 'energy']","['Energy', 'energy']"
Energy Efficiency,"The following calculation; ```; molecule {; 0 1; He 0.0 0.0 -0.01; Gh(Be) 0.0 0.0 0.0; He 0.0 0.0 0.01; }. set basis ugbs; energy('scf'); ```; crashes with; ```; qcelemental.exceptions.ValidationError: Following atoms are too close: [(0, 1, 0.0), (0, 2, 0.0), (1, 2, 0.0)]; ```; Something in the code (QCElemental?) is bastardizing the input so that the atoms that are well-separated are placed on top of each other. @loriab @dgasmith",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1843#issuecomment-595606978:123,energy,energy,123,https://psicode.org,https://github.com/psi4/psi4/pull/1843#issuecomment-595606978,1,['energy'],['energy']
Energy Efficiency,"The following command fails for me on Mac: `pytest test_detci_opdm.py test_molden_writer.py::test_H2O_molden[orbso_detci]` as the CI for molden test fails to converge on Mac with current master. The test passes when `test_detci_opdm.py` is removed. I've attached outputs from the failing Molden tests in both cases. Options appear the same. The warning ""(H0block_setup): Can't find CI block!"" appears in both files but is clearly suspicious. The ""H0 block eigenvalue"" is the first iteration energy in the correct output, but not in the buggy output. [errored_case.output.log](https://github.com/psi4/psi4/files/8952917/errored_case.output.log); [correct.output.log](https://github.com/psi4/psi4/files/8952926/correct.output.log)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2618:491,energy,energy,491,https://psicode.org,https://github.com/psi4/psi4/issues/2618,1,['energy'],['energy']
Energy Efficiency,"The following either gives `NaN` energy or (positive) 60,000 [Eh] depending on MKL version and compile options. All basis sets smaller than aug-cc-pVQZ seem to check out, did not try larger. Other guesses, `s_tolerence`, or fitting basis appear to have no effect on this error. UHF works fine. ```; molecule mol {; 0 2; C -2.83891 -0.84747 -0.20778; N -2.06959 -0.27604 0.77905; C -0.85937 -0.82512 0.74757; N -0.82980 -1.74677 -0.21226; C -2.05910 -1.77487 -0.83179; C -2.45490 0.86620 1.59959; C 0.35903 -2.49473 -0.61265; F -1.01767 1.46174 -1.11980; B 0.28985 1.63764 -0.63648; F 0.23738 1.82826 0.77419; F 0.89453 2.73957 -1.24020; F 1.05039 0.46734 -0.88673; H -0.02604 -0.54755 1.38339; H -2.27287 -2.45330 -1.64959; H -3.86751 -0.55086 -0.37733; H -3.45079 0.68580 2.01748; H -1.72185 0.98138 2.40249; H -2.44673 1.75972 0.96603; H 0.98379 -1.85263 -1.24323; H 0.91655 -2.78676 0.28358; H 0.03922 -3.39046 -1.15377; C 2.81822 0.12352 1.52490; C 3.26768 -0.78277 0.56145; H 3.28632 0.11977 2.50813; H 2.01109 0.81253 1.27433; N 3.64537 -1.55240 -0.23308; }. set {; basis aug-cc-pVQZ; scf_type df; guess gwh; reference rohf; }. energy('SCF'); ```. An example of initial convergence can be seen for UHF/aQZ:. ```; Total Energy Delta E RMS |[F,P]|. @DF-UHF iter 1: -716.29320215568873 -7.16293e+02 1.25967e-02; @DF-UHF iter 2: 27.48017620380119 7.43773e+02 1.97120e-02 DIIS; @DF-UHF iter 3: -561.81810445462588 -5.89298e+02 9.53326e-03 DIIS; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/371:33,energy,energy,33,https://psicode.org,https://github.com/psi4/psi4/issues/371,3,"['Energy', 'energy']","['Energy', 'energy']"
Energy Efficiency,"The following input ; ```; molecule {; 0 1 ; S 0.0904282062 -0.4095883553 0.0000000000; O 1.3547506908 0.3023925212 0.0000000000; O -0.7450974916 0.1927054620 1.2404690507; H -0.3631668951 1.0551025998 1.4663407894; O -0.7450974916 0.1927054620 -1.2404690507; H -0.3631668951 1.0551025998 -1.4663407894; }. set basis cc-pV(D+d)Z. en, wfn = energy('b3lyp', return_wfn = True); nbo = NBOWriter(wfn); nbo.write(""input.47""); ```; produces an absolute nonsense NBO analysis, with heavily delocalized core orbitals, orbital energies over 350, and 1000+ strong donor-acceptor interactions. When you add `symmetry c1`, all is normal again. I haven't been successful in finding the minimal possible example input that displays the problem. Water, for instance, seems to be just fine.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1566:340,energy,energy,340,https://psicode.org,https://github.com/psi4/psi4/issues/1566,1,['energy'],['energy']
Energy Efficiency,"The following input crashes with a Segfault:. ```; molecule HeLi {; 	0 1; 	He 0.000000000 0.000000000 0.000000000; 	--; 	1 1; 	Li 3.300000000 0.000000000 0.000000000. 	units angstrom; 	no_reorient; }. set globals {; 	basis aug-cc-pVDZ; 	df_basis_scf aug-cc-pVDZ; 	df_basis_sapt aug-cc-pVDZ; 	df_basis_mp2 aug-cc-pVDZ; }. set_memory(32000000000); energy('sapt2+3(ccd)dmp2'); ```. ```; /home/apps/psi/psi4conda/lib/python3.6/site-packages/v2rdm_casscf/v2rdm_casscf.so loaded.; forrtl: severe (174): SIGSEGV, segmentation fault occurred; Image PC Routine Line Source ; libpcm.so.1 00002B46FE54BA15 Unknown Unknown Unknown; libpcm.so.1 00002B46FE549637 Unknown Unknown Unknown; ```; etcetera. Output stops suddenly:; ```; <snip>; ==> CCD Dispersion <==. Beginning Monomer A CCD. Iter Energy (H) dE (H) RMS (H); 1 -0.02083174 0.020831739 0.000000000; 2 -0.02587434 0.005042604 0.000504656; 3 -0.02710324 0.001228894 0.000126313; 4 -0.02740459 0.000301348 0.000031758; 5 -0.02747899 0.000074401 0.000008016 DIIS; 6 -0.02750358 0.000024596 0.000002027 DIIS; 7 -0.02750357 -0.000000016 0.000000004 DIIS; 8 -0.02750358 0.000000015 0.000000002 DIIS; 9 -0.02750358 0.000000001 0.000000000 DIIS. Beginning Monomer B CCD; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1564:346,energy,energy,346,https://psicode.org,https://github.com/psi4/psi4/issues/1564,2,"['Energy', 'energy']","['Energy', 'energy']"
Energy Efficiency,"The following input fails with a segfault; ```; molecule {; 0 5; Fe; }. set basis pcseg-0; set reference rohf; set scf_type pk; set mcscf_type conv; # Full space is [ 9, 2, 2, 2, 0, 3, 3, 3]. # Ar core; set restricted_docc [3, 0, 0, 0, 0, 2, 2, 2]; # spd active space; set ras1 [0, 0, 0, 0, 0, 0, 0, 0]; set ras2 [3, 1, 1, 1, 0, 1, 1, 1]; set ras3 [3, 1, 1, 1, 0, 0, 0, 0]; cas_e, cas_wfn = energy('rasscf', return_wfn=True). # Dynamical correlation from Ar core; set restricted_docc [0, 0, 0, 0, 0, 0, 0, 0]; set ras1 [3, 0, 0, 0, 0, 2, 2, 2]; ras_e, ras_wfn = energy('detci', ref_wfn=cas_wfn, return_wfn=True); ```. There's something wrong in the input or the code, since there's an error message in the log file; ```; ==> Setting up CI strings <==. There are 2730 alpha and 105 beta strings; (subgr_lex_addr): Impossible walk!; The CI space requires 18211 (1.82E+04) determinants and 44 blocks; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1693:391,energy,energy,391,https://psicode.org,https://github.com/psi4/psi4/issues/1693,2,['energy'],['energy']
Energy Efficiency,The following input file breaks `inputparser.py`. ```; $ cat input.dat; # ccansmi: O=C(C#C)C=O. molecule h2 {; H; H 1 0.9; }. set basis 6-31G**; energy('scf'); ```. The exception is. ```; $ psi4 input.dat; Input error: Unmatched (; ```. The error is specific to the fact that the comment appears on the first line of the file.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/86:145,energy,energy,145,https://psicode.org,https://github.com/psi4/psi4/pull/86,1,['energy'],['energy']
Energy Efficiency,"The following input file crashes; ```; molecule {; F; F 1 1.4613; }. set freeze_core true; set basis cc-pvdz; set detci ex_level 5 . energy('ci'); ```. Traceback:; ```; Traceback (most recent call last):; File ""/opt/psi/4/master/bin/psi4"", line 331, in <module>; exec(content); File ""<string>"", line 28, in <module>; File ""/opt/psi/4/master/lib/psi4/driver/driver.py"", line 570, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/opt/psi/4/master/lib/psi4/driver/procrouting/proc.py"", line 3600, in run_detci; level = kwargs['level']. KeyError: 'level'; ```. If this isn't intended usage, we need to update docs.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2282:133,energy,energy,133,https://psicode.org,https://github.com/psi4/psi4/issues/2282,3,['energy'],['energy']
Energy Efficiency,"The following input file fails with the following message:. ```; Traceback (most recent call last):; File ""/Users/francesco/Source/psi4/lib/python/inputparser.py"", line 732, in process_input; temp = re.sub('^from __future__ import .*$', future_replace, temp, flags=re.MULTILINE); TypeError: sub() got an unexpected keyword argument 'flags'; ```. I was wondering: is it possible that recent changes to python affect the ability to read user-defined basis sets from input files?. ```; molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; }. basis {; cartesian; H 0; S 3 1.00; 3.42525091 0.15432897; 0.62391373 0.53532814; 0.16885540 0.44463454; ****; O 0; S 3 1.00; 130.7093200 0.15432897; 23.8088610 0.53532814; 6.4436083 0.44463454; SP 3 1.00; 5.0331513 -0.09996723 0.15591627; 1.1695961 0.39951283 0.60768372; 0.3803890 0.70011547 0.39195739; ****; }. energy('scf'); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/169:850,energy,energy,850,https://psicode.org,https://github.com/psi4/psi4/issues/169,1,['energy'],['energy']
Energy Efficiency,"The following input file fails:; ```; set {; reference rhf ; basis cc-pVDZ; scf_type pk; freeze_core true; }. _, wfn = energy('mp2',return_wfn = True); energy('mrccsd', ref_wfn=wfn); ```. The problem is that `run_mrcc` expects [the ""CURRENT SCF ENERGY""](https://github.com/psi4/psi4/blob/2d33c3f83bee2d2b87b7a9ee4eb0c5d230b65403/psi4/driver/procrouting/proc.py#L4572) variable to be set in core, which was wiped [as soon as the energy call ran](https://github.com/psi4/psi4/blob/2d33c3f83bee2d2b87b7a9ee4eb0c5d230b65403/psi4/driver/driver.py#L546). @loriab, is there any reason _not_ to grab this variable from the incoming wavefunction?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2305:119,energy,energy,119,https://psicode.org,https://github.com/psi4/psi4/issues/2305,4,"['ENERGY', 'energy']","['ENERGY', 'energy']"
Energy Efficiency,The following input file for H10 runs but gives an energy that is not converged:. ```; molecule {; 0 1; H 0.000 0.000 0.0000; H 0.000 0.000 2.5001; H 0.000 0.000 5.0003; H 0.000 0.000 7.5006; H 0.000 0.000 10.0011; H 0.000 0.000 12.5015; H 0.000 0.000 15.0021; H 0.000 0.000 17.5023; H 0.000 0.000 20.0030; H 0.000 0.000 22.5040; symmetry c1; }. set globals {; reference rhf; basis sto-3g; }. energy('fci'); ```. with output. ```; Find the roots by the Simultaneous Expansion Method (Block Davidson Method); Using 1 initial trial vectors; Iter 0 Root 1 = -4.093847469 Delta_E -8.176E+00 Delta_C 5.250E-01; ...; Iter 10 Root 1 = -4.680023014 Delta_E -1.423E-05 Delta_C 4.880E-03; Iter 11 Root 1 = -4.680047623 Delta_E -2.461E-05 Delta_C 7.532E-03; Iter 12 Root 1 = -4.680121394 Delta_E -7.377E-05 Delta_C 1.166E-02. Maximum number of CI iterations reached. * ROOT 1 CI total energy = -4.6801213940684; ```. **Problem:**. The final energy is far from being converged but the user is not warned. The correct converged energy is about 0.0007 Eh below (-4.680868674 Eh). This value can be obtain by adding `set detci maxiter 100` to the input file. . **Feature requested:**; - [ ] Increase the maximum number of iterations in DETCI (currently 12); - [ ] Warn the user/do not print final energy if DETCI does not converge; - [ ] Confirm that failure to converge DETCI does not affect CASSCF computations,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/394:51,energy,energy,51,https://psicode.org,https://github.com/psi4/psi4/issues/394,6,['energy'],['energy']
Energy Efficiency,"The following input file from [forums](http://forum.psicode.org/t/error-in-psio-wt-toclen/2234/5) gives a PSIO error `Error in PSIO_WT_TOCLEN()!` in up-to-date master. Reported said they could also reproduce with CCSD, but I haven't tried this myself. Setting `cachelevel 0` was a workaround, but not one that should be necessary. ```memory 5 gb. molecule = {; 0 2; Cl; O 1 R1; O 2 R2 1 A; R1=2.03230554; R2=1.20810395; A=115.36876732. }. set {; reference rohf; basis aug-cc-pwcvqz; print_MOs true; print 2; scf_type pk; guess sad; freeze_core -2; }. energy(‘bccd’); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2261:551,energy,energy,551,https://psicode.org,https://github.com/psi4/psi4/issues/2261,1,['energy'],['energy']
Energy Efficiency,"The following input file gives absurd results using the current dev version of Psi:; ```; memory 1000 mb. molecule {; -1 1; I; }. basis {; assign I def2-tzvppd; }. set basis_guess true. energy('scf'); ```. The small basis computation ends with; ```; Final Occupation by Irrep:; Ag B1g B2g B3g Au B1u B2u B3u ; DOCC [ 9, 2, 2, 2, 0, 4, 4, 4 ] . @DF-RHF Final Energy: -6892.35157729932507; ```. Here's how the large basis computation went:; ```; @DF-RHF iter 0: 590.08005432721836 5.90080e+02 2.80084e-01; Occupation by irrep:; Ag B1g B2g B3g Au B1u B2u B3u ; DOCC [ 5, 2, 2, 2, 1, 5, 5, 5 ] . @DF-RHF iter 1: -67.13552163426122 -6.57216e+02 3.44500e-01 ; Occupation by irrep:; Ag B1g B2g B3g Au B1u B2u B3u ; DOCC [ 7, 2, 2, 2, 0, 5, 4, 5 ] . @DF-RHF iter 2: -5.42420113211885 6.17113e+01 6.71875e-01 DIIS; @DF-RHF iter 3: -208.00917694080209 -2.02585e+02 3.53265e-01 DIIS; Occupation by irrep:; Ag B1g B2g B3g Au B1u B2u B3u ; DOCC [ 8, 2, 2, 3, 0, 4, 4, 4 ] . @DF-RHF iter 4: -213.73836050769307 -5.72918e+00 3.05852e-01 DIIS; @DF-RHF iter 5: -229.29046486569237 -1.55521e+01 1.60752e-01 DIIS; @DF-RHF iter 6: -231.83352362698204 -2.54306e+00 8.54643e-02 DIIS; @DF-RHF iter 7: -233.14739556085581 -1.31387e+00 1.00459e-02 DIIS; @DF-RHF iter 8: -233.26115993293257 -1.13764e-01 6.01984e-03 DIIS; @DF-RHF iter 9: -233.30679760470645 -4.56377e-02 2.25206e-03 DIIS; @DF-RHF iter 10: -233.31593146369286 -9.13386e-03 6.80191e-04 DIIS; @DF-RHF iter 11: -233.31660737631540 -6.75913e-04 2.28951e-04 DIIS; @DF-RHF iter 12: -233.31678610778147 -1.78731e-04 1.58902e-04 DIIS; @DF-RHF iter 13: -233.31696020659965 -1.74099e-04 1.02174e-04 DIIS; @DF-RHF iter 14: -233.31707462571032 -1.14419e-04 1.37466e-05 DIIS; @DF-RHF iter 15: -233.31707485378129 -2.28071e-07 3.16438e-06 DIIS; @DF-RHF iter 16: -233.31707486465362 -1.08723e-08 5.35650e-07 DIIS; Energy converged.; ```. (Are ECP electrons supposed to be included in DOCC?). The listed doubly occupied orbitals are; ```; Doubly Occupied:. 1Ag -1.892135 1B1u 0",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1439:186,energy,energy,186,https://psicode.org,https://github.com/psi4/psi4/issues/1439,2,"['Energy', 'energy']","['Energy', 'energy']"
Energy Efficiency,"The following input file raises the error: `Cannot set element 12 since there are only 12 elements.` Somewhere, Psi is trying to set a non-existing vector element. I'm very curious why tests didn't catch this. ```; memory 2 GB. molecule {; 0 1; C 1.741722 -1.200108 -0.733703; C 1.723351 -1.235440 0.673033; C 1.741208 -0.034341 1.406196; C 1.720430 1.201594 0.733472; C 1.738484 1.236058 -0.673301; C 1.720301 0.035400 -1.407211; H 1.811924 -2.125930 -1.299462; H 1.810840 -2.187236 1.191603; H 1.810814 -0.061176 2.490913; H 1.805598 2.126733 1.298598; H 1.806257 2.188975 -1.192470; H 1.805027 0.062415 -2.491005; --; 2 1; Ba -1.306490 -0.000406 0.000195; }; basis {; assign jun-cc-pVDZ; assign Ba GENECP. [GENECP]; cartesian; ****; Ba 0 ; S 3 1.00; 0.8699000 -2.2549747 ; 0.6676000 2.5145786 ; 0.1982000 0.5775184 ; S 4 1.00; 0.8699000 2.0391383 ; 0.6676000 -2.3717712 ; 0.1982000 -1.2758006 ; 0.0823000 1.1703346 ; S 1 1.00; 0.0231000 1.0000000 ; P 3 1.00; 1.6050000 -0.1626403 ; 0.4790000 0.6971289 ; 0.1818000 0.4505107 ; P 2 1.00; 0.1804000 -0.2642537 ; 0.0476000 1.1347212 ; P 1 1.00; 0.0192000 1.0000000 ; ****; }. energy('sapt0'); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2853:1125,energy,energy,1125,https://psicode.org,https://github.com/psi4/psi4/issues/2853,1,['energy'],['energy']
Energy Efficiency,"The following input file segfaults:; ```; molecule {; symmetry c1; H; H 1 1.0 ; }. set basis cc-pvdz; e, wfn = energy('fci', return_wfn=True); wfn.form_tpdm(); ```. The issue is that the driver [cleans up DETCI after every energy call](https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/proc.py#L3579). That cleanup [frees the decode matrix](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/detci/ciwave.cc#L458). But `form_tpdm` works by [creating a new CI vector](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/detci/tpdm.cc#L56), which is [set with the decode matrix](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/detci/civect.cc#L115), which the driver freed, giving rise to a bad access exception. So which code is supposed to be responsible for DETCI cleanup? If that's the responsibility of `procrouting`, then `form_tpdm` is always going to segfault, so `form_tpdm` shouldn't be exposed to Python at all, and the user should have the TPDM be formed and kept via `set tpdm true`. If cleanup is not the responsibility of `procrouting`, then which code is supposed to be responsible for it? Leave it to the destructor?. DETCI design decisions are above my pay grade, so I'm leaving this to DGAS and CDS. The 1.4 paper is of course higher priority, but I need this feature working very badly, so I will start pinging on Tuesday.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1812:111,energy,energy,111,https://psicode.org,https://github.com/psi4/psi4/issues/1812,2,['energy'],['energy']
Energy Efficiency,"The following input file:; ```; molecule fluorine {; 0 1 ; F; F 1 1.4113; }. set globals {; basis cc-pvdz; reference uhf ; scf_type pk ; e_convergence 10 ; d_convergence 10 ; stability_analysis follow; }. energy ('scf'); ```; reports a B1u eigenvalue of -0.098916 at an SCF energy of -198.685730305942 hartrees. After disabling symmetry, I found a perfectly stable wavefunction at... -198.685730305942 hartrees. So why is the use of D2h symmetry ""creating"" a negative orbital hessian eigenvalue that wasn't there when no symmetry was used?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1125:205,energy,energy,205,https://psicode.org,https://github.com/psi4/psi4/issues/1125,2,['energy'],['energy']
Energy Efficiency,"The following input file:; ```; molecule h2o {; H; C 1 r1; O 2 r2 1 a1 ; O 2 r2 1 a1 3 180 . r1 = 1.085; r2 = 1.249; a1 = 123.8; }. set reference uhf ; set basis sto-3g. set SOCC [0, 0, 0, 1]. energy('scf'); ```; gives an SCF with a single electron. At present, Psi seems to assume `DOCC` is zero if `DOCC` isn't set but `SOCC` is.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1370:193,energy,energy,193,https://psicode.org,https://github.com/psi4/psi4/issues/1370,1,['energy'],['energy']
Energy Efficiency,"The following input file; ```; molecule mol {; 0 1 ; units bohr; O 0 0 -0.143225816552; H 0 1.638036840407 1.136548822547; H 0 -1.638036840407 1.136548822547; }. set {; reference uhf ; basis sto-3g; scf_type pk; mp2_type conv; dcft_functional odc-12; }. energy('omp2'); energy('dcft'); ```; crashes with error; ```; PSIO_ERROR: Attempt to write into next entry: 61, MO Ints (OO|OV); PSIO_ERROR: unit = 61, errval = 18; PSIO_ERROR: 18 (Incorrect block end address); Traceback (most recent call last):; File ""/Users/jonathonmisiewicz/psi4/objdir/stage/bin/psi4"", line 271, in <module>; exec(content); File ""<string>"", line 33, in <module>; File ""/Users/jonathonmisiewicz/psi4/objdir/stage/lib/psi4/driver/driver.py"", line 493, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/jonathonmisiewicz/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 1479, in run_dcft; dcft_wfn = core.dcft(ref_wfn). RuntimeError: ; Fatal Error: PSIO Error; Error occurred in file: /Users/jonathonmisiewicz/psi4/psi4/src/psi4/libpsio/error.cc on line: 128; The most recent 5 function calls were:; ```; Modifying the input file showed the following:. - The error resolves when changing the reference from UHF to RHF; - Both ODC-06 and ODC-12 will trigger the error, but neither DC-06 nor DC-12 will; - Both OMP2 and OLCCD before the ODC will trigger the error, but neither MP2 nor LCCD will",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1288:254,energy,energy,254,https://psicode.org,https://github.com/psi4/psi4/issues/1288,4,['energy'],['energy']
Energy Efficiency,"The following input runs a CISD computation and crashes with the current version of psi4 (fe3ab0d). ```; molecule {; O; H 1 R; H 1 R 2 A. R = .9; A = 104.5; symmetry c1; }. set basis sto-3g; energy('cisd'); ```. Here is the console output:. ```; Traceback (most recent call last):; File ""/Users/francesco/Source/psi4-fork-bin-Debug/bin/psi4"", line 210, in <module>; exec(content); File ""<string>"", line 30, in <module>; File ""/Users/francesco/Source/psi4-fork-bin-Debug/bin/../lib//psi4/driver/driver.py"", line 447, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/francesco/Source/psi4-fork-bin-Debug/bin/../lib//psi4/driver/procedures/proc.py"", line 946, in select_cisd; return func(name, **kwargs); File ""/Users/francesco/Source/psi4-fork-bin-Debug/bin/../lib//psi4/driver/procedures/proc.py"", line 3949, in run_cepa; fnocc_wfn = core.fnocc(ref_wfn). RuntimeError: ; Fatal Error: ndocc must be less than nvirt; Error occurred in file: /Users/francesco/Source/psi4-fork/psi4/src/psi4/fnocc/ccsd.cc on line: 142; The most recent 5 function calls were:; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/546:191,energy,energy,191,https://psicode.org,https://github.com/psi4/psi4/issues/546,3,['energy'],['energy']
Energy Efficiency,"The following input, given to me via email, gives a 'bad' dMP2 correction for SAPT:; ```; delta HF,r (2) -18.53850185 [mEh] -11.63308554 [kcal/mol] -48.67282991 [kJ/mol]; delta MP2,r (2) 141.03839795 [mEh] 88.50293088 [kcal/mol] 370.29626281 [kJ/mol]; ```. ```; molecule {; 0 1; F 0.00000000 0.00000000 2.96216000; I 0.00000000 0.00000000 0.96704400; --; 0 1; C 0.00000000 0.00000000 -2.52999200; N 0.00000000 0.00000000 -1.35165800; Na 0.00000000 0.00000000 -4.84283500; units angstrom; no_reorient; symmetry c1; }; memory 20 GiB; set {; basis def2-TZVP; freeze_core true; }; energy('sapt2+dMP2'); energy('mp2',bsse_type=['nocp']); ```. The issue is reproducible for MP2/CCSD post-SCF methods. It is not directly `DF` nor `ghost` atom related. (besides a possibly small error due to https://github.com/psi4/psi4/issues/1968). And not a module specific issue. Using different ECPs (LANL2DZ) or an all electron basis (x2c-SVPall, no rel. effects.) with global `FC=on` seems to give 'better' results in the sense that MP2 interaction energy is negative. One, and perhaps only, issue is `frozen_core`.; Turning `FC = off` only for the supermolecular MP2 part gives OK results. For the NaCN fragment we are freezing 10 electrons, while e.g. ORCA is freezing only 3. ; At least for this case, freezing the Ne-shell by default for Na is not a good choice. Tagging @PeterKraus. `freeze_core -2` makes the SAPT part crash because sth goes wrong for the `IF` fragment (fragment A):; ```; FOCC A = 18446744073709551611; FOCC B = 1; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2012:577,energy,energy,577,https://psicode.org,https://github.com/psi4/psi4/issues/2012,3,['energy'],['energy']
Energy Efficiency,"The following input:. ```; E, wfn = energy(cbs, cbs_metadata=[{""wfn"":""hf"", ""basis"": ""cc-pwcv[tq]z-pp""},; {""wfn"":""mp2"", ""basis"": ""cc-pwcvtz-pp""}],; molecule=dimer,; return_wfn=True, dertype=0,; bsse_type=""cp""); ```. crashes with `UnboundLocalError: local variable 'bsse' referenced before assignment`. This is related to the logic on line 665:. https://github.com/psi4/psi4/blob/8e9d6888d722d071a9043bd8707ded67df81d7d3/psi4/driver/driver_nbody.py#L661-L668. The first (and only) assignment into `bsse` comes after, on line 681:. https://github.com/psi4/psi4/blob/8e9d6888d722d071a9043bd8707ded67df81d7d3/psi4/driver/driver_nbody.py#L680-L685. I'm not sure what this logic is doing exactly, but I'm guessing just switching the order of the blocks might do the trick.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1649:36,energy,energy,36,https://psicode.org,https://github.com/psi4/psi4/issues/1649,1,['energy'],['energy']
Energy Efficiency,"The following input; ```; memory 10 gb. molecule {; units bohr; 0 3; H; H 1 1.401100; }. set basis cc-pVDZ; set num_roots 20; set e_convergence 1e-9; set r_convergence 1e-7; set diag_method rsp; set icore 1; set calc_s_squared true; set reference rohf; energy('fci'); ```; leads to garbage energies. It is surprising that this even runs, since there are only 11 determinants. This means that all the roots beyond 10 are spurious.; ```; ==> FCI root 11 information <==. FCI Root 11 energy = 0.713724930411819. The 11 most important determinants:. * 1 -0.034785 ( 25, 0) 1AgA 2B1uA ; * 2 0.022822 ( 26, 0) 2AgA 2B1uA ; * 3 0.011314 ( 31, 0) 1B3gA 1B2uA ; * 4 0.011314 ( 30, 0) 3AgA 3B1uA ; * 5 0.006836 ( 29, 0) 2AgA 3B1uA ; * 6 -0.003553 ( 28, 0) 1AgA 3B1uA ; * 7 -0.001178 ( 22, 0) 1AgA 1B1uA ; * 8 0.000527 ( 23, 0) 1B1uA 2AgA ; * 9 -0.000025 ( 27, 0) 3AgA 2B1uA ; * 10 -0.000022 ( 24, 0) 1B1uA 3AgA . ==> FCI root 12 information <==. FCI Root 12 energy = 0.713724930411819. The 11 most important determinants:. * 1 0.997978 ( 24, 0) 1B1uA 3AgA ; * 2 -0.044153 ( 23, 0) 1B1uA 2AgA ; * 3 0.035020 ( 25, 0) 1AgA 2B1uA ; * 4 0.016316 ( 22, 0) 1AgA 1B1uA ; * 5 0.015442 ( 27, 0) 3AgA 2B1uA ; * 6 0.010267 ( 31, 0) 1B3gA 1B2uA ; * 7 0.010267 ( 30, 0) 3AgA 3B1uA ; * 8 0.009433 ( 29, 0) 2AgA 3B1uA ; * 9 -0.007604 ( 28, 0) 1AgA 3B1uA ; * 10 0.000987 ( 26, 0) 2AgA 2B1uA . ==> FCI root 13 information <==. FCI Root 13 energy = 0.713724930411819. The 11 most important determinants:. * 1 9428415418299144033154400292021347105929105493743677660349912587242773315947068624452342728374216723512286367807081434394321801889849919042883561598345939692181343106349826374754254429319550145134592.000000 ( 32, 0) 1B2gA 1B3uA ; * 2 0.997807 ( 22, 0) 1AgA 1B1uA ; * 3 -0.047756 ( 23, 0) 1B1uA 2AgA ; * 4 -0.031275 ( 26, 0) 2AgA 2B1uA ; * 5 -0.027155 ( 25, 0) 1AgA 2B1uA ; * 6 -0.017321 ( 24, 0) 1B1uA 3AgA ; * 7 -0.007466 ( 29, 0) 2AgA 3B1uA ; * 8 -0.003632 ( 28, 0) 1AgA 3B1uA ; * 9 -0.003171 ( 27, 0) 3AgA 2B1uA ; * 1",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2779:253,energy,energy,253,https://psicode.org,https://github.com/psi4/psi4/issues/2779,3,['energy'],['energy']
Energy Efficiency,"The following input; ```; molecule {; 0 1; Li; Li 1 1.63; }. basis {; spherical; ****; Li 1; S 1 1.0; 20.0 1.0; S 1 1.0; 2.0 1.0; ****; Li 2; S 1 1.0; 10.0 1.0; S 1 1.0; 1.0 1.0; ****; }. energy('scf'); ```; should give me the first basis set on atom 1 and the second basis set on atom 2. What I get instead is. ```; $ psi4 . QcdbException BasisSetNotFound: BasisSet::construct: Unable to find a basis set for atom 1 for key BASIS among:; Shell Entries: ['LI']; Basis Sets: [('anonymous8452ca2a', 'anonymous8452ca2a', None)]; File Path: /tmp/crc, /tmp/crc, /home/work/psi4/install/share/psi4/basis; Input Blocks: anonymous8452ca2a. Traceback (most recent call last):; File ""/home/work/psi4/install/bin/psi4"", line 271, in <module>; exec(content); File ""<string>"", line 48, in <module>; File ""/home/work/psi4/install/lib/psi4/driver/driver.py"", line 493, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/work/psi4/install/lib/psi4/driver/procrouting/proc.py"", line 2006, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/home/work/psi4/install/lib/psi4/driver/procrouting/proc.py"", line 1266, in scf_helper; base_wfn = core.Wavefunction.build(scf_molecule, core.get_global_option('BASIS')); File ""/home/work/psi4/install/lib/psi4/driver/p4util/python_helpers.py"", line 115, in pybuild_wavefunction; basis = core.BasisSet.build(mol, ""ORBITAL"", basis); File ""/home/work/psi4/install/lib/psi4/driver/p4util/python_helpers.py"", line 77, in pybuild_basis; return_atomlist=return_atomlist); File ""/home/work/psi4/install/lib/psi4/driver/qcdb/libmintsbasisset.py"", line 683, in pyconstruct; verbose=verbose); File ""/home/work/psi4/install/lib/psi4/driver/qcdb/libmintsbasisset.py"", line 902, in construct; (at + 1, key, text2)). BasisSetNotFound: BasisSet::construct: Unable to find a basis set for atom 1 for key BASIS among:; Shell Entries: ['LI']; Basis Sets: [('anonymous8452ca2a', 'anonymous8452ca2a', None)]; File Path: /tmp/cr",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1270:188,energy,energy,188,https://psicode.org,https://github.com/psi4/psi4/issues/1270,3,['energy'],['energy']
Energy Efficiency,"The following job converges to a nonsensical CCSD correlation energy (about -4 hartrees) on our i7-5930 nodes. Even on iteration 2, the problem is manifesting:. ```; Iter DIIS Energy d(Energy) |d(T)| time; 0 0 1 -2.3661052959 -2.3661052959 0.8065388359 14; 1 1 1 -3.3098744652 -0.9437691693 1.5557928713 155; ```. ```; molecule{; C 2.072533 0.400337 0.000000 ; C 2.351068 -0.237230 -1.205081 ; C 2.351068 -0.237230 1.205081 ; C 2.908137 -1.512363 -1.205081 ; C 2.908137 -1.512363 1.205081 ; C 3.186672 -2.149930 0.000000 ; H 1.640169 1.390021 0.000000 ; H 2.134886 0.257612 -2.140393 ; H 2.134886 0.257612 2.140393 ; H 3.124320 -2.007205 -2.140393 ; H 3.124320 -2.007205 2.140393 ; H 3.619036 -3.139614 0.000000 ; C -1.382969 1.594698 0.000000 ; C -0.970087 2.154700 -1.205081 ; C -0.970087 2.154700 1.205081 ; C -0.144324 3.274703 -1.205081 ; C -0.144324 3.274703 1.205081 ; C 0.268558 3.834704 0.000000 ; H -2.023878 0.725418 0.000000 ; H -1.290542 1.720059 -2.140393 ; H -1.290542 1.720059 2.140393 ; H 0.176131 3.709343 -2.140393 ; H 0.176131 3.709343 2.140393 ; H 0.909467 4.703984 0.000000 ; C -0.689564 -1.995035 0.000000 ; C -1.380981 -1.917470 -1.205081 ; C -1.380981 -1.917470 1.205081 ; C -2.763814 -1.762339 -1.205081 ; C -2.763814 -1.762339 1.205081 ; C -3.455230 -1.684774 0.000000 ; H 0.383709 -2.115439 0.000000 ; H -0.844344 -1.977672 -2.140393 ; H -0.844344 -1.977672 2.140393 ; H -3.300450 -1.702138 -2.140393 ; H -3.300450 -1.702138 2.140393 ; H -4.528503 -1.564371 0.000000 ; }; memory 60 Gb; set{; basis cc-pvdz; freeze_core true; scf_type df; guess SAD; }. energy('FNO-DF-CCSD(T)'); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/209:62,energy,energy,62,https://psicode.org,https://github.com/psi4/psi4/issues/209,4,"['Energy', 'energy']","['Energy', 'energy']"
Energy Efficiency,The following smoketests are failing on the current master branch; ```; The following tests FAILED:; 	138 - dfmp2-1 (Failed); 	486 - ddd-deriv (Failed); 	491 - psi4numpy-rhf (Failed); 	493 - psi4numpy-rhf-hessian (Failed); 	498 - python-energy (Failed); 	513 - json-schema-1-gradient (Failed); ```; Are these failures reproducible?,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3028:237,energy,energy,237,https://psicode.org,https://github.com/psi4/psi4/issues/3028,1,['energy'],['energy']
Energy Efficiency,"The general plan here is to merge this likely before 1.3, but not hook this up to an external driver yet. So users curious in this code can still access it with a beta warning flag, but in general will not be accessible by non-power users. This will close #886.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1349#issuecomment-449586996:227,power,power,227,https://psicode.org,https://github.com/psi4/psi4/pull/1349#issuecomment-449586996,1,['power'],['power']
Energy Efficiency,"The grepable '@ROHF' in each iteration is printed incorrectly as '@DF-ROHF' if running PK algorithm after a previous DF computation. Example (input file below):; ```; ==> Integral Setup <==. Using in-core PK algorithm.; Calculation information:; Number of atoms: 11; Number of AO shells: 90; Number of primitives: 196; Number of atomic orbitals: 285; Number of basis functions: 250. Integral cutoff 1.00e-12; Number of threads: 8. Performing in-core PK; Using 984422000 doubles for integral storage.; We computed 8218442 shell quartets total.; Whereas there are 8386560 unique shell quartets. ==> DiskJK: Disk-Based J/K Matrices <==. J tasked: Yes; K tasked: Yes; wK tasked: No; Memory [MiB]: 11444; Schwarz Cutoff: 1E-12. OpenMP threads: 8. Minimum eigenvalue in the overlap matrix is 4.0355404199E-04.; Using Symmetric Orthogonalization. SCF Guess: Orbitals guess was supplied from a previous computation. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-ROHF iter 0: -341.07180740631509 -3.41072e+02 3.89250e-08; @DF-ROHF iter 1: -341.07180740660510 -2.90015e-10 2.49267e-06; @DF-ROHF iter 2: -341.07180758006677 -1.73462e-07 2.84695e-07 DIIS; ```; This input file produces the problem (edit: had the wrong molecule name). ```; memory 16 GB. molecule qr3 {; 0 2; O; C 1 1.24816; H 2 1.09517 1 120.2960; C 2 1.40976 1 123.9986 3 180.0; O 4 1.31711 2 123.7177 1 D1; O 5 1.41029 4 117.3948 2 D2; H 6 1.00462 5 103.4812 4 D3; C 4 1.48637 5 112.7653 2 180.0; H 8 1.08795 4 109.7238 2 0.00; H 8 1.09123 9 109.0482 4 -121.2; H 8 1.09132 9 109.0157 4 121.2; }. qr3.D1 = 0.0; qr3.D2 = 0.0; qr3.D3 = 0.0; qr3.update_geometry(). set {; basis cc-pvtz; reference uhf; }. set scf {; scf_type df; stability_analysis follow; soscf true; soscf_max_iter 20; max_attempts 5; }. energy('scf'). set scf {; reference rohf; guess read; stability_analysis none; }. energy('scf'); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1503:934,Energy,Energy,934,https://psicode.org,https://github.com/psi4/psi4/issues/1503,3,"['Energy', 'energy']","['Energy', 'energy']"
Energy Efficiency,"The guess energy changes by 0.018 H when changing the Cholesky threshold from 1e-6 to 1e-12. . Using `set sad_frac_occ true`, the job actually converges, and the guess energy from the source build and Conda binary are much more similar (within 0.0001 H):. Conda Binary:; `@DF-RKS iter 0: -1710.72967880925034 -1.71073e+03 1.05313e-01`. Source Build:; `@DF-RKS iter 0: -1710.72974672447867 -1.71073e+03 9.17594e-02`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/773#issuecomment-319403375:10,energy,energy,10,https://psicode.org,https://github.com/psi4/psi4/issues/773#issuecomment-319403375,2,['energy'],['energy']
Energy Efficiency,"The history rewrite is complete, at this point please remove all forks and clones. The git repository was reduced from 740MiB down to about 66MiB. All large files are now external projects so that we should not have to do this again.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-254947891:106,reduce,reduced,106,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-254947891,1,['reduce'],['reduced']
Energy Efficiency,"The input file:. ```; memory 1 Gb. molecule NO; {; 1 1; N; O 1 R; units au; }. set {; guess read. diag_method rsp. VECS_WRITE true; NUM_VECS_WRITE 1. basis sto-3g; }. NO.R = 2. energy('scf'). NO.R = 50. energy('fci'). set {; diag_method sem; GUESS_VECTOR IMPORT; }. energy('fci'); ```. I first calculated the RHF solution at 2 Bohr and use it as seed for the solution at 50 Bohr. The first `energy('fci')` uses exact diagonalization and produces the correct energy `-127.1625943265614`. The second call to `energy('fci')` uses Davidson with as start guess the CI vector from the previous calculation. This should immediately convergence yet it finds a ground state energy of `-1527.1801524600446`. Clearly very far below the actual lowest eigenvalue. Something goes terrible wrong here. . Any ideas?. It also would be nice if the docs would mention that building the OPDM, etc doesn't work if you use `diag_method rsp`.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/175:177,energy,energy,177,https://psicode.org,https://github.com/psi4/psi4/issues/175,7,['energy'],['energy']
Energy Efficiency,"The input; ```; molecule {; 0 2; Li; }. set basis def2-SVP; set reference uhf; set freeze_core True; set scf_type df; set mp2_type df. energy('mp2'); ```; results in a crash:; ```; !----------------------------------------------------------------------------------!; ! !; ! Fatal Error: There are no occupied orbitals with beta spin. !; ! Error occurred in file: /scratch/psilocaluser/conda- !; ! builds/psi4-multiout_1671346910751/work/psi4/src/psi4/dfmp2/mp2.cc on line: !; ! 206 !; ! The most recent 5 function calls were: !; ! !; !----------------------------------------------------------------------------------!; ```; even though there are occupied orbitals with beta spin; ```; --------------------------------------------------------; DF-MP2 ; 2nd-Order Density-Fitted Moller-Plesset Theory ; UMP2 Wavefunction, 1 Threads ; ; Rob Parrish, Justin Turney, Andy Simmonett, ; Ed Hohenstein, and C. David Sherrill ; --------------------------------------------------------. --------------------------------------------------------; NBF = 9, NAUX = 25; --------------------------------------------------------; CLASS FOCC OCC AOCC AVIR VIR FVIR; ALPHA 1 2 1 7 7 0; BETA 1 1 0 8 8 0; --------------------------------------------------------. ```; A related issue is that the hydrogen also fails with the same error. For hydrogen (or any one-electron system), MP2 should return the HF energy.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2976:135,energy,energy,135,https://psicode.org,https://github.com/psi4/psi4/issues/2976,2,['energy'],['energy']
Energy Efficiency,"The input; ```; molecule {; 0 5; Ar; }. set basis sto-3g; set reference rohf; energy('scf'); ```; gives a segfault in both Psi4 1.3.2 as well as the current master.; ```; Program terminated with signal SIGSEGV, Segmentation fault.; #0 0x00007fce90309923 in psi::scf::HF::find_occupation (this=0x55f4fdfe6140) at /home/work/psi4/psi4/psi4/src/psi4/libscf_solver/hf.cc:463; 463	 for (int i = 0; i < nalpha_; ++i) nalphapi_[pairs_a[i].second]++;; (gdb) bt; #0 0x00007fce90309923 in psi::scf::HF::find_occupation (this=0x55f4fdfe6140) at /home/work/psi4/psi4/psi4/src/psi4/libscf_solver/hf.cc:463; #1 0x00007fce903340b2 in psi::scf::ROHF::form_initial_C (this=0x55f4fdfe6140) at /home/work/psi4/psi4/psi4/src/psi4/libscf_solver/rohf.cc:465; #2 0x00007fce9031193d in psi::scf::HF::guess (this=0x55f4fdfe6140) at /home/work/psi4/psi4/psi4/src/psi4/libscf_solver/hf.cc:1157; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1981:78,energy,energy,78,https://psicode.org,https://github.com/psi4/psi4/issues/1981,1,['energy'],['energy']
Energy Efficiency,"The input; ```; molecule {; H; H 1 0.60; }. set basis cc-pVDZ; set docc [ 1, 0, 0, 0, 0, 0, 0, 0 ]; # STO-3G active space; set active [1, 0, 0, 0, 0, 1, 0, 0 ]; energy('casscf'); ```; fails with the up-to-date master branch with the error message; ```; Traceback (most recent call last):; File ""/home/work/psi4/install/bin/psi4"", line 387, in <module>; exec(content); File ""<string>"", line 26, in <module>; File ""/home/work/psi4/install/lib/psi4/driver/driver.py"", line 519, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/work/psi4/install/lib/psi4/driver/procrouting/proc.py"", line 5483, in run_detcas; ciwfn = mcscf.mcscf_solver(ref_wfn); File ""/home/work/psi4/install/lib/psi4/driver/procrouting/mcscf/mcscf_solver.py"", line 153, in mcscf_solver; nci_iter = ciwfn.diag_h(abs(ediff) * 1.e-2, orb_grad_rms * 1.e-3). RuntimeError: ; Fatal Error: DSYEV diagonalizer failed in DETCI SEM!; Error occurred in file: /home/work/psi4/psi4/src/psi4/detci/sem.cc on line: 561; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int). Printing out the relevant lines from the Psithon --> Python processed input file:; """"""); core.IO.set_default_namespace(""""); core.set_global_option(""BASIS"", ""cc-pVDZ""); core.set_global_option(""DOCC"", [ 1, 0, 0, 0, 0, 0, 0, 0 ]); core.set_global_option(""ACTIVE"", [1, 0, 0, 0, 0, 1, 0, 0 ]); --> energy('casscf'). !----------------------------------------------------------------------------------!; ! !; ! Fatal Error: DSYEV diagonalizer failed in DETCI SEM! !; ! Error occurred in file: /home/work/psi4/psi4/src/psi4/detci/sem.cc on line: 561 !; ! The most recent 5 function calls were: !; ! psi::PsiException::PsiException(std::__cxx11::basic_string<char, !; ! std::char_traits<char>, std::allocator<char> >, char const*, int) !; ! !; !----------------------------------------------------------------------",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3096:161,energy,energy,161,https://psicode.org,https://github.com/psi4/psi4/issues/3096,3,['energy'],['energy']
Energy Efficiency,"The input; ```; set basis pcseg-0; energy('scf'); ```; runs even though a molecule has not been set. It appears that Psi4 defaults to the hydrogen dimer. I don't think this functionality is a feature, since the behavior is unexpected.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3115:35,energy,energy,35,https://psicode.org,https://github.com/psi4/psi4/issues/3115,1,['energy'],['energy']
Energy Efficiency,The key information of the input file.; ```; memory 40 GB. molecule trimer {; 0 1; C 1.07154500 -0.44112100 1.91483900; C -0.17235900 -0.69652300 2.10370800; H -0.91485400 -1.28561300 2.61721300; C 2.45326100 -0.73511300 2.24630100; C 2.85437200 -2.08262200 2.30607700; C 3.40427800 0.27780800 2.45099100; C 4.18806600 -2.39739300 2.55990100; H 2.14221600 -2.86783100 2.07560500; C 4.73194500 -0.04754300 2.71722300; H 3.09893800 1.31634000 2.39879300; C 5.12929300 -1.38659800 2.76657000; H 4.48898800 -3.44096500 2.57307500; H 5.45915400 0.74482300 2.87386900; H 6.16909200 -1.63882200 2.95648300; --; 0 1; Ni 0.01252300 0.22250100 0.43479800; P -1.47081900 1.42539400 1.60377300; Br 1.54315200 -4.13099100 -0.43801300; ...; --; 0 1; P -1.40616300 -0.52452000 -1.14922700; ...; }. set {; scf_type DF; MAXITER 1000; freeze_core True; fisapt_do_plot true ; }. basis {; assign jun-cc-pvdz; assign Ni def2-svp; }. energy('fisapt0'); ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2870#issuecomment-1411945748:912,energy,energy,912,https://psicode.org,https://github.com/psi4/psi4/issues/2870#issuecomment-1411945748,1,['energy'],['energy']
Energy Efficiency,"The large number of digits was introduced to eliminate round-off errors completely. There are a few reasons:. - When testing software that post-processes the wavefunction, it is desirable to be able to validate the numerical algorithms in such codes. For example, this can be done by checking the total number of electrons on very fine integration grids in such post-processing codes. When doing so, all other sources of errors should be eliminated to avoid confusion. We noticed that this was especially problematic before #1510 with fractionally occupied natural orbitals.; - When deriving approximate electrostatic models from a wavefunction, satisfying charge neutrality is quite important for long-range interactions. I know you can always ""fix"" this *a posteriori* (e.g. by shifting partial charges to match the net charge), but avoiding the need for a fix is still preferable, just to rule out sources of error. So why 17? The number of significant digits from a double precision number varies between 15 and 17. See https://en.wikipedia.org/wiki/Double-precision_floating-point_format (For some numbers, digits 16 and/or 17 may be insignificant, but not always.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1973#issuecomment-747650817:657,charge,charge,657,https://psicode.org,https://github.com/psi4/psi4/issues/1973#issuecomment-747650817,3,['charge'],"['charge', 'charges']"
Energy Efficiency,"The lines you highlighted are completely valid since within [`dirprod`](https://github.com/psi4/psi4/blob/9618f2716c4ff16a6c48276bcd8e4b96adc29fec/psi4/src/psi4/libdpd/buf4_dirprd.cc#L55) for example:; - **lines 55+56**: memory is allocated for the elements of each tensor (one irrep at a time) , ; - **lines 57+58**: The elements are read from the file and used to populate the memory we just allocated ; - ** line 60**: the operation is performed for the block (irrep) we are working with.; - **line 63**: The modified elements are written back to disk, replacing the data that was read in on line 56; - **lines 64 + 65**: The memory for this irrep is freed. This is why I want to move away from talking about data at all in the comment string, `buf4_init` is not responsible for initializing the ""data"" you are talking about. That is by *design* so that operations can be performed over the tensors in chunks like I have outlined in the part above. The buffer holds the information necessary to get that data, *when it is explicitly told to*. . I am sorry for not being clear, but this stuff is very easy to get lost in. I meant that trying to access tensor elements directly after calling `buf4_init`. Getting back to the subject of this PR: . 1. Lets leave the comments in `file4_init` alone, since the `buf4/file2_init` functions are the ones being used externally, `file4_init`s are usually only found w/in DPD itself as far as I know.. ; 2. In `buf4_init()` and `file2_init()` We can put note/warning separate from the description of `label`, something to the tune of ; > Make sure that you use the correct `label` and `inputfile` if you *intend* to read from or write to an existing quantity on disk. If you *intend* to populate a new quantity on disk, ensure that the `label` is not already used in `inputfile`. PSIO::tocprint(int filenum) can be used to display the current list of labels in use in the outputfile. . BTW: That last hint is particularly useful for debugging I/O related erro",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/550#issuecomment-267512911:231,allocate,allocated,231,https://psicode.org,https://github.com/psi4/psi4/pull/550#issuecomment-267512911,2,['allocate'],['allocated']
Energy Efficiency,"The loop limits are the same in the basic recursion for the nuclear attraction integrals. The call to the Obara-Saika recursion in the 0th order integrals is (from potential.cc): . ``` C++; potential_recur_->compute(PA, PB, PC, gamma, am1, am2);; ```. whereas the call in the derivative code is:. ``` C++; potential_recur_->compute(PA, PB, PC, gamma, am1+1, am2+1);; ```. The code was adapted from PSI3's cints package and we know that code works. We also know the code as it is in PSI4 works as we have working derivative codes. The patch certainly looks like it cleans up the recursion. I'll commit it if the tests pass.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3#issuecomment-17312112:385,adapt,adapted,385,https://psicode.org,https://github.com/psi4/psi4/issues/3#issuecomment-17312112,1,['adapt'],['adapted']
Energy Efficiency,"The manual states that when NO_RESPONSE option is set, SAPT0 should print a warning that uncoupled induction is computed. There is no such warning and the final printing contains Ind20,r which seems to imply response. I can probably do the necessary changes but I create the issue so it does not get forgotten. Example input:. ```; import psi4; psi4.set_output_file(""output_ref.dat""); water_dimer = psi4.geometry(""""""; O -1.551007 -0.114520 0.000000; H -1.934259 0.762503 0.000000; H -0.599677 0.040712 0.000000; --; 0 1; O 1.350625 0.111469 0.000000; H 1.680398 -0.373741 -0.758561; H 1.680398 -0.373741 0.758561; units angstrom; no_com; no_reorient; symmetry c1; """"""). psi4.set_options({""BASIS"" : ""cc-pVDZ"",; ""SCF_TYPE"": ""DF"",; ""SAVE_JK"" : True,; ""NO_RESPONSE"" : True,; }). psi4.energy('sapt0'); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/907:780,energy,energy,780,https://psicode.org,https://github.com/psi4/psi4/issues/907,1,['energy'],['energy']
Energy Efficiency,The modification sounds fine to me. Will energy('hf') assume something about reference? e.g. rhf for closed shells and rohf for open shells. Or does the user have to always specify reference?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/103#issuecomment-110147470:41,energy,energy,41,https://psicode.org,https://github.com/psi4/psi4/issues/103#issuecomment-110147470,1,['energy'],['energy']
Energy Efficiency,"The new error printing in #1862 seems to struggle when the message it's trying to print contains newlines. Consider the following input file. ```; molecule {; symmetry c1; N; N 1.500; }; set {; basis cc-pVD; }; energy('scf'); ```. This will raise a syntax error because I have a malformed Z-matrix. The new box will print out. ```; !----------------------------------------------------------------------------------!; ! !; ! Unprocessable Molecule remanents under [psi4, xyz, xyz+, psi4+]: symmetry c1 N !; ! N 1.500 !; ! !; !----------------------------------------------------------------------------------!; ```. where the original error message is the more readable. ```; qcelemental.exceptions.MoleculeFormatError: Unprocessable Molecule remanents under [psi4, xyz, xyz+, psi4+]:; symmetry c1; N; N 1.500; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1867:211,energy,energy,211,https://psicode.org,https://github.com/psi4/psi4/issues/1867,1,['energy'],['energy']
Energy Efficiency,"The only remaining test suite failure now is:. ```; 22/140 Test #84: cdomp2-2 .........................***Failed 1.17 sec; 	Nuclear Repulsion Energy (a.u.)...................................PASSED; 	CD-HF Energy (a.u.)...............................................PASSED; 	CD-OMP2 Total Energy (a.u.): computed value (-129.5440268) does not match (-129.5897884) to 6 digits.; Traceback (most recent call last):; File ""/<<PKGBUILDDIR>>/builddir/stage/usr/bin/psi4"", line 269, in <module>; exec(content); File ""<string>"", line 39, in <module>; File ""/<<PKGBUILDDIR>>/builddir/stage/usr/lib/x86_64-linux-gnu/psi4/driver/p4util/util.py"", line 227, in compare_values; raise TestComparisonError(message). TestComparisonError: 	CD-OMP2 Total Energy (a.u.): computed value (-129.5440268) does not match (-129.5897884) to 6 digits.; Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); ```. _Originally posted by @mbanck in https://github.com/psi4/psi4/issues/1457#issuecomment-451647367_",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1461:142,Energy,Energy,142,https://psicode.org,https://github.com/psi4/psi4/issues/1461,4,['Energy'],['Energy']
Energy Efficiency,"The only test that failed in quicktests is x2c1, and I don't believe this PR is the culprit:. TestComparisonError: Non-relativistic CCSD energy: computed value (-76.2807318207) does not match (-76.2807318195) to 9 digits.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/981#issuecomment-384402964:137,energy,energy,137,https://psicode.org,https://github.com/psi4/psi4/pull/981#issuecomment-384402964,1,['energy'],['energy']
Energy Efficiency,"The overall intent is that we usually run psi4 from an outside workflow that runs exactly _one_ single-point energy per infile (or a scan of geometrically-related single point energies, e.g., a dimer being pulled apart). Usually, each of these calculations represents ONLY a monomer, or the dimer. We have a lookup table of how many orbitals we want to freeze in post-HF calculations, and the most visible way to apply that setting was to just set `num_frozen_docc`. For example, if we wanted to calculate the interaction energy of a water-alkane dimer at the MP2 level, we'd have three calculations:; - A in the AB basis with `num_frozen_docc` set accordingly for A; - B in the AB basis with `num_frozen_docc` set accordingly for B; - AB in the AB basis with `num_frozen_docc` set accordingly for AB. This scheme worked very well, until it came time to run SAPT0 calcs. As I admittedly hadn't thought through the effect of an incorrect `n_frozen_docc` on the monomer calcs done within the SAPT0 dimer calc (and presumed them to be at the HF level anyway), I didn't think to check for correct behavior. . The only place where our frozen-core lookup table disagrees with psi4's is for some more exotic elements (transition metals), so for now my solution is to just use `freeze_core true` for all SAPT0 calcs and go about my life. And when I thought the bad setting _just_ caused segfaults, I was fine to assume that all calculations that ran to completion were obviously OK. Now seeing that there's some shade of undefined behavior leading to memory corruption possibly going on, I'd like to understand what is going wrong so I can figure out what's likely impacted... cases where the energy is obviously and egregiously wrong (like above) are easy, but I'm worried more about subtle incorrectness. As for the general fix -- if `num_frozen_docc` is disabled for SAPT0, then it becomes impossible for a user to impose their own beliefs about frozen orbitals in tricky cases like transition metals, whic",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2631#issuecomment-1207254380:109,energy,energy,109,https://psicode.org,https://github.com/psi4/psi4/issues/2631#issuecomment-1207254380,2,['energy'],['energy']
Energy Efficiency,"The picture change transformation error should only be relevant in the nuclear region. If you have point charges in a QM/MM embedding fashion, these should be so far away from the QM regions that picture-change transforming that potential would have a negligible numerical effect. This is the approached used [here](https://pubs.acs.org/doi/10.1021/acs.jctc.7b00162) As far as I know, no one ever tested this assumption. The authors of this paper note:. > A note should be added regarding the use of X2C Hamiltonians. In this case, the one-electron part of the Fock matrix is transformed (see, e.g., ref 7 for details). Strictly, all external fields (including a field from a environment) should also be transformed. Currently, our PE-X2C-DFT implementation involves transformation only of the vacuum terms. Thus, the PE operator is left untransformed, and the untransformed operator is carried over to the linear response formalism described below (following the general implementation in the DIRAC program, all property operators are always transformed).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1758#issuecomment-558530297:105,charge,charges,105,https://psicode.org,https://github.com/psi4/psi4/issues/1758#issuecomment-558530297,1,['charge'],['charges']
Energy Efficiency,"The potential gradient function should be usable to compute gradients on point charges, since the gradient for a point charge is simply the charge multiplied by the potential gradient.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2472#issuecomment-1066175210:79,charge,charges,79,https://psicode.org,https://github.com/psi4/psi4/issues/2472#issuecomment-1066175210,3,['charge'],"['charge', 'charges']"
Energy Efficiency,"The problem appears to be as follows:. The Bozkaya OO code and the DCT OO code use different indexing conventions with libdpd. What one code says is a column index, the other says is a row index. Consequently, they conflict with each other when trying to pull files from libtrans. At the least, that is what is happening on [this line](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dcft/dcft_integrals_UHF.cc#L362) of the DCT code. While a user can fix this with `clean()` calls, an in-program fix is harder. If we put a `clean()` call at the end of the energy calls in `procrouting`, we obliterate the density matrices that may be needed if `energy` was called by `gradient`. The only solutions I can see are to unify the indexing conventions or to leave modification/sorting of `libtrans` files to `libtrans`. We had also best do _something_ to prevent this problem from recurring. What that looks like will depend on the fix we make. Either way, might I suggest we put this on the agenda for PsiCon?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1288#issuecomment-435137456:563,energy,energy,563,https://psicode.org,https://github.com/psi4/psi4/issues/1288#issuecomment-435137456,2,['energy'],['energy']
Energy Efficiency,"The problem is not IO issues from parallel testing. The problem is an actual, reproducible segfault on the testing machine. On psinet, this input:. ```; cdsgroup@bash:psinet:/scratch/cdsgroup/conda-builds/work/tests/fnocc2: cat alt.in ; molecule {; O 0.000000000000 0.000000000000 -0.066736129322; H 0.000000000000 -0.763241114523 0.529575400775; H 0.000000000000 0.763241114523 0.529575400775; }. set scf_type out_of_core; set basis 6-311G(D_P). energy('qcisd(t)'); ```. gives a valgrind output the end of which is:. ```; ==14111== ; ==14111== Process terminating with default action of signal 11 (SIGSEGV); ==14111== General Protection Fault; ==14111== at 0x13A3EBF: psi::fnocc::CoupledCluster::triples() (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0x686B882: __kmp_invoke_microtask (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0x6845324: __kmp_fork_call (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0x6826B2E: __kmpc_fork_call (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0x13A13D1: psi::fnocc::CoupledCluster::triples() (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0x134038C: psi::fnocc::CoupledCluster::compute_energy() (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0x1330A20: psi::fnocc::fnocc(psi::Options&) (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0xA5D569: py_psi_fnocc() (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0xA8C2AD: boost::python::objects::caller_py_function_impl<boost::python::detail::caller<double (*)(), boost::python::default_call_policies, boost::mpl::vector1<double> > >::operator()(_object*, _object*) (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0x55C4D9D: boost::python::objects::function::call(_object*, _object*) const (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0x55C4AD4: boost::detail::function::void_function_r",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/121#issuecomment-123755185:447,energy,energy,447,https://psicode.org,https://github.com/psi4/psi4/issues/121#issuecomment-123755185,1,['energy'],['energy']
Energy Efficiency,"The problem is that the pubchem structure does not appear to have Cs symmetry. The pubchem geometry gives; ```; ==> Geometry <==. Molecular point group: c1; Full point group: C1. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; F 1.054979085535 0.279491800552 0.000000000000 18.998403162730; C -0.000320914465 -0.577108199448 0.000000000000 12.000000000000; C -1.279120914465 0.226491800552 0.000000000000 12.000000000000; H 0.072379085535 -1.206508199448 -0.891000000000 1.007825032230; H 0.072279085535 -1.206508199448 0.891000000000 1.007825032230; H -2.153920914465 -0.429408199448 -0.000100000000 1.007825032230; H -1.322020914465 0.874191800552 0.881000000000 1.007825032230; H -1.321920914465 0.874291800552 -0.880900000000 1.007825032230. Running in c1 symmetry. Rotational constants: A = 1.21162 B = 0.32319 C = 0.28216 [cm^-1]; Rotational constants: A = 36323.59189 B = 9689.02155 C = 8459.03982 [MHz]; Nuclear repulsion = 80.019990391667150; ```. Reading this into IQmol and running ""Symmetrize geometry"", I get; ```; ==> Geometry <==. Molecular point group: cs; Full point group: Cs. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; F -0.264271602373 1.058895456489 0.000000000000 18.998403162730; C 0.577048397627 -0.008634543511 0.000000000000 12.000000000000; C -0.244891602373 -1.275724543511 0.000000000000 12.000000000000; H 1.207428397627 0.054945456489 -0.891000000000 1.007825032230; H 1.207428397627 0.054945456489 0.891000000000 1.007825032230; H 0.398348397627 -2.159884543511 0.000000000000 1.007825032230; H -0.893191602373 -1.309244543511 0.880950000000 1.007825032230; H -0.893191602373 -1.309244543511 -0.880950000000 1.007825032230. Running in cs symmetry. Rotational constants: A = 1.21161 B = 0.32319 C = 0.28216 [cm^-1]; Rotational constants: A",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2463#issuecomment-1062277252:203,charge,charge,203,https://psicode.org,https://github.com/psi4/psi4/issues/2463#issuecomment-1062277252,1,['charge'],['charge']
Energy Efficiency,"The problem is that the reference (UHF) is set only for the SCF reference wave function and not the CCSD wave function. If you change the input to use. set reference uhf. the code runs fine. . ## -TDC. Prof. T. Daniel Crawford; crawdad@vt.edu; 540-231-7760. On Aug 6, 2013, at 11:34 AM, andysim notifications@github.com wrote:. > Thanks a lot for the detailed feedback, and input file to reproduce the problem. I'll look into this, and try to get a patch together, ; > ; > cheers, ; > ; > Andy. ; > ; > On Aug 6, 2013, at 10:21 AM, James Spencer notifications@github.com wrote: ; > ; > > CCSD calculations on the N and F atoms result in segmentation faults for me (gcc 4.8.1, boost 1.53, python 3.3.2). I used the input file: ; > > ; > > molecule f { ; > > f 0.00 0.00 0.00 ; > > } ; > > set basis cc-pVTZ ; > > set scf reference uhf ; > > energy('ccsd') ; > > (and similarly for N). I tried increasing the memory and changing basis set to no avail (some basis sets caused a back trace rather than just a segmentation fault). ; > > ; > > Curiously CCSD calculations with a UHF reference on the rest of the period 2 atoms ran without a problem. ; > > ; > > Running psi4 through gdb and the backtraces indicate the problem is with freeing an invalid pointer when closing a dpd buffer in ccenergy/pair_energies.cc. ; > > ; > > Full backtrace from gdb: ; > > ; > > (gdb) where ; > > #0 0x00007ffff45e62a4 in free () from /usr/lib/libc.so.6 ; > > #1 0x000000000136b8bc in psi::free_int_matrix (array=0x29d1fc0) at /home/james/projects/psi4/src/lib/libciomr/int_array.cc:134 ; > > #2 0x00000000012edea5 in psi::DPD::buf4_close (this=<optimized out>, Buf=Buf@entry=0x7fffffffd630) ; > > at /home/james/projects/psi4/src/lib/libdpd/buf4_close.cc:50 ; > > #3 0x000000000082dbf8 in psi::ccenergy::pair_energies (epair_aa=epair_aa@entry=0x7fffffffd7c8, epair_ab=epair_ab@entry=0x7fffffffd7d0) ; > > at /home/james/projects/psi4/src/bin/ccenergy/pair_energies.cc:99 ; > > #4 0x000000000086b797 in psi::ccenergy::c",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/12#issuecomment-22192736:840,energy,energy,840,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22192736,1,['energy'],['energy']
Energy Efficiency,The question is how to run truncated CI most efficiently in detci.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/600#issuecomment-276765389:45,efficient,efficiently,45,https://psicode.org,https://github.com/psi4/psi4/issues/600#issuecomment-276765389,1,['efficient'],['efficiently']
Energy Efficiency,"The reference ground-state multiplicities, particularly for heavier elements, may not be correct. Also there is the larger question of whether to use the broken-symmetry ground-state densities, as is done here, or to use the spin-averaged ones as is done in the SAD code. In the original MBIS paper ([https://pubs.acs.org/doi/pdf/10.1021/acs.jctc.6b00456](url), sec 5), they explore both options, and find that the broken-symmetry, ground-state densities give more accurate dispersion coefficients (computed with the Tkatchenko-Scheffler method, which relies on these volume ratios) with the MBIS method. Given that these volume ratios are used for force field development, I wouldn't be too concerned with potential inaccuracies in the multiplicities of heavier elements. That said, I think the option to use either the broken-symmetry densities or the spin-averaged ones should be made possible. I think it would likely be cleanest for me to get the densities directly from SAD (since it can handle both cases already) and pass them to the MBIS code, rather than calling `energy` and `oeprop` as I've currently done.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2127#issuecomment-794000033:1074,energy,energy,1074,https://psicode.org,https://github.com/psi4/psi4/pull/2127#issuecomment-794000033,1,['energy'],['energy']
Energy Efficiency,"The reference is already somewhat off:. ```; Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)... ; ======================================================================= ; - Nuclear Repulsion Energy (a.u.) : 25.59060766929189; - CD-HF Energy (a.u.) : -129.25927207001686; - REF Energy (a.u.) : -129.25927207001686; - Alpha-Alpha Contribution (a.u.) : -0.04358607252482; - Alpha-Beta Contribution (a.u.) : -0.22869655849159; - Beta-Beta Contribution (a.u.) : -0.04274321396769; - Scaled_SS Correlation Energy (a.u.): -0.02877642883084; - Scaled_OS Correlation Energy (a.u.): -0.27443587018991; - CD-SCS-MP2 Total Energy (a.u.) : -129.56248436903761; - CD-SOS-MP2 Total Energy (a.u.) : -129.55657759605592; - CD-SCSN-MP2 Total Energy (a.u.) : -129.41121161424368; - CD-MP2 Correlation Energy (a.u.) : -0.31502584498410; - CD-MP2 Total Energy (a.u.) : -129.57429791500095; + Nuclear Repulsion Energy (a.u.) : 25.59060766929188; + CD-HF Energy (a.u.) : -129.25927206477397; + REF Energy (a.u.) : -129.25927206477397; + Alpha-Alpha Contribution (a.u.) : -0.03921205696199; + Alpha-Beta Contribution (a.u.) : -0.20476196654188; + Beta-Beta Contribution (a.u.) : -0.03692010667753; + Scaled_SS Correlation Energy (a.u.): -0.02537738787984; + Scaled_OS Correlation Energy (a.u.): -0.24571435985026; + CD-SCS-MP2 Total Energy (a.u.) : -129.53036381250408; + CD-SOS-MP2 Total Energy (a.u.) : -129.52546262127842; + CD-SCSN-MP2 Total Energy (a.u.) : -129.39326467277954; + CD-MP2 Correlation Energy (a.u.) : -0.28089413018141; + CD-MP2 Total Energy (a.u.) : -129.54016619495539; ======================================================================= . ```. Should I post the whole diff against output.ref? I just saw output.ref seems to have been generated with 0.5, can somebody confirm this is not a general problem on 1.0rc? All other tests in `quicktests` have passed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/391#issuecomment-222312734:62,energy,energy,62,https://psicode.org,https://github.com/psi4/psi4/issues/391#issuecomment-222312734,21,"['Energy', 'energy']","['Energy', 'energy']"
Energy Efficiency,"The relaxed density matrix is computed every time property() is executed. Some methods dump it to disk, but some only store it in memory. As to the charges, property() has the ability to compute Mulliken charges, and for most of the methods implemented it already prints them out at the end of the computation, even if not explicitly requested.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/40#issuecomment-38213986:148,charge,charges,148,https://psicode.org,https://github.com/psi4/psi4/issues/40#issuecomment-38213986,2,['charge'],['charges']
Energy Efficiency,The remaining problem would be that `H` is recalculated manually by directly calling [so_potential](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/mintshelper.cc#L1261) that only knows about DKH and not X2C. ; That means X2C is only included in the SCF energy and not in the Fock matrix in DF/CD-(FNO)-CC.; X2C did not crash the calculation. Either `H` is taken from the SCF wavefunction object like done elsewhere (e.g in [dfocc](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dfocc/get_moinfo.cc#L367) or the X2C potential needs to be added somehow. Direct use of `so_potential` is done here (as far as I could find):; https://github.com/psi4/psi4/blob/master/psi4/src/psi4/fnocc/frozen_natural_orbitals.cc#L1039; https://github.com/psi4/psi4/blob/master/psi4/src/psi4/fnocc/df_ccsd.cc#L714. The other occurrence I found is in the SCF template: https://github.com/psi4/psi4/blob/master/psi4/share/psi4/plugin/scf/scf.cc.template,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1791#issuecomment-580401788:270,energy,energy,270,https://psicode.org,https://github.com/psi4/psi4/issues/1791#issuecomment-580401788,1,['energy'],['energy']
Energy Efficiency,"The result of test has changed:; ```; $ ctest --output-on-failure -R cookbook-rohf-orb-rot; Test project /home/raimis/psi4.git/linux_build; Start 401: cookbook-rohf-orb-rot; 1/1 Test #401: cookbook-rohf-orb-rot ............***Failed 22.19 sec; 	X SCF energy......................................................PASSED; 	X CCSD energy.....................................................PASSED; 	A SCF energy......................................................PASSED; 	A CCSD energy.....................................................PASSED; 	X SCF energy......................................................PASSED; 	X CCSD energy.....................................................PASSED; 	A SCF energy: computed value (-150.1081361) does not match (-150.0872987) to 6 digits.; Traceback (most recent call last):; File ""/home/raimis/psi4.git/linux_build/stage/bin/psi4"", line 287, in <module>; exec(content); File ""<string>"", line 84, in <module>; File ""/home/raimis/psi4.git/linux_build/stage/lib/psi4/driver/p4util/util.py"", line 230, in compare_values; raise TestComparisonError(message). TestComparisonError: 	A SCF energy: computed value (-150.1081361) does not match (-150.0872987) to 6 digits.; Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ). 0% tests passed, 1 tests failed out of 1. Label Time Summary:; cart = 22.19 sec*proc (1 test); cookbook = 22.19 sec*proc (1 test); psi = 22.19 sec*proc (1 test). Total Test time (real) = 22.35 sec. The following tests FAILED:; 	401 - cookbook-rohf-orb-rot (Failed); Errors while running CTest; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1488#issuecomment-457158095:251,energy,energy,251,https://psicode.org,https://github.com/psi4/psi4/pull/1488#issuecomment-457158095,8,['energy'],['energy']
Energy Efficiency,"The solution to the problem is to call fchk instead of the FCHKWriter function. . With fchk(wfn, 'molecule.fchk'), the CC density is printed out successfully. . I just wanted to put this out to save other people the trouble. . ```; memory 55 GB. molecule water {; 0 1; O 0.000000 0.119325 0.000000; H 0.763133 -0.477420 0.000000; H -0.763133 -0.477177 0.000000. symmetry c1; no_com; no_reorient; }. set {; basis aug-cc-pVTZ; scf_type df; cc_type df; }. set_num_threads(6). #e, wfn1 = energy('ccsd(t)', return_wfn=True,); grad, wfn = gradient('ccsd(t)', return_wfn=True). fchk(wfn, 'molecule.fchk'). #fchk_writer = psi4.FCHKWriter(wfn); #fchk_writer.write('molecule.fchk'). ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2275#issuecomment-897965622:484,energy,energy,484,https://psicode.org,https://github.com/psi4/psi4/issues/2275#issuecomment-897965622,1,['energy'],['energy']
Energy Efficiency,"The sum of Mulliken charges should not be positive or negative, it should be zero for a charge neutral system.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/504#issuecomment-455882484:20,charge,charges,20,https://psicode.org,https://github.com/psi4/psi4/issues/504#issuecomment-455882484,2,['charge'],"['charge', 'charges']"
Energy Efficiency,"The symmetry detection does not try to symmetrize the geometry to my knowledge.; But there is a `symmetrize` function than can be explicitly called like this:. ```; molecule {; pubchem:fluoroethane; }; set basis cc-pVDZ; psi4.get_active_molecule().symmetrize(1e-2); # or <molecule_name>.symmetrize(1e-2) if a name was set; energy('scf'); ```. edit: Otherwise finding the point group with a lower tolerance can be done like this, I think. (Doesn't work in this case). ```; molecule {; pubchem:fluoroethane; }; set basis cc-pVDZ. mol = psi4.get_active_molecule(); tol = 1e-2; PG = mol.find_point_group(tol); print(PG.full_name()); mol.set_point_group(PG); energy('scf'); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2463#issuecomment-1062668003:323,energy,energy,323,https://psicode.org,https://github.com/psi4/psi4/issues/2463#issuecomment-1062668003,2,['energy'],['energy']
Energy Efficiency,"The test `pywrap-opt-sowreap` is failing for me with the following error message:. ```; Performing finite difference calculations; 5 displacements needed ...; An error has occurred Py-side; Traceback:; <type 'exceptions.TypeError'>: 'float' object is not iterable: File ""<string>"", line 25, in <module>. File ""/home/avcopan/Documents/code/github/psi4/share/python/driver.py"", line 1158, in optimize; G, wfn = gradient(name, return_wfn=True, molecule=moleculeclone, **kwargs). ```. I did some poking around and it looks like the problem is that this code (see [here](https://github.com/psi4/psi4/blob/master/share/python/driver.py#L1153)):. ```; def optimize(name, **kwargs):; # ...; G, wfn = gradient(name, return_wfn=True, molecule=moleculeclone, **kwargs); psi4.set_gradient(G); thisenergy = psi4.get_variable('CURRENT ENERGY'); ```. breaks when gradient is called in sow-reap mode because it returns `0.0` rather than a matrix-wavefunction tuple (see [here](https://github.com/psi4/psi4/blob/master/share/python/driver.py#L843)):. ```; def gradient(name, **kwargs):; # ...; if dertype == 1:; # ...; else:; # ...; if (opt_mode.lower() == 'sow'):; optstash.restore(); return 0.0; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/291:821,ENERGY,ENERGY,821,https://psicode.org,https://github.com/psi4/psi4/issues/291,1,['ENERGY'],['ENERGY']
Energy Efficiency,"The test is very like [sapt-dft1](https://github.com/psi4/psi4/blob/master/tests/sapt-dft1/input.dat) except He instead of Ar. I computed the grac-s of all three in molpro, and it still fails on iterations, though far better behaved. ```; #! SAPT(DFT) aug-cc-pVDZ interaction energy between He and Ar atoms. molecule dimer {; He; --; Ar 1 6.5; units bohr; }. set {; basis aug-cc-pvdz; scf_type df; sapt_dft_grac_shift_a 0.2316; sapt_dft_grac_shift_b 0.14208 #0.138264; }. # Molpro Ne,Ar: aug-cc-pvqz He: def2-qzvpp; # He 0.23160613844599998; # Ne 0.2069797945509999; # Ar 0.14207557000000004. energy('sapt(dft)', molecule=dimer); ```. ```; @DF-RKS iter 95: -0.14789452072560 -7.20653e-11 2.50590e-02 DIIS; @DF-RKS iter 96: -0.14789452081143 -8.58302e-11 2.50590e-02 DIIS; @DF-RKS iter 97: -0.14789452057679 2.34638e-10 2.50590e-02 DIIS; @DF-RKS iter 98: -0.14789452082882 -2.52026e-10 2.50590e-02 DIIS; @DF-RKS iter 99: -0.14789452079974 2.90820e-11 2.50590e-02 DIIS; @DF-RKS iter 100: -0.14789452100104 -2.01303e-10 2.50590e-02 DIIS; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1684#issuecomment-515629304:276,energy,energy,276,https://psicode.org,https://github.com/psi4/psi4/issues/1684#issuecomment-515629304,2,['energy'],['energy']
Energy Efficiency,"The two below should give the same freq analysis. They don't because though the `Molecule.set_mass()` _does_ reset the mass, it doesn't reset the symmetry. ```; molecule hdo {; units au; O 0.00000000 0.00000000 0.00000000; H@2.014101779 0.00000000 1.93042809 -1.10715266; H 0.00000000 -1.93042809 -1.10715266; }. set basis cc-pvdz; set print 3. e = energy('hf'); print 'mass in input string'; print e; print hdo.schoenflies_symbol(). frequency('hf'); ```. ```; molecule h2o {; units au; O 0.00000000 0.00000000 0.00000000; H 0.00000000 1.93042809 -1.10715266; H 0.00000000 -1.93042809 -1.10715266; }. set basis cc-pvdz; set print 3. hdo = h2o.clone(); hdo.set_mass(1, 2.014101779); print hdo.schoenflies_symbol(); hdo.update_geometry(); print hdo.schoenflies_symbol(). e = energy('hf', molecule=hdo); print 'mass through setter'; print e; print hdo.schoenflies_symbol(). frequency('hf'); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/346:349,energy,energy,349,https://psicode.org,https://github.com/psi4/psi4/issues/346,2,['energy'],['energy']
Energy Efficiency,"The two bottlenecks that you have identified are the computation of the ESP at the tesserae and then computing the contribution of the resulting charges back to the Fock matrix. Both terms use the exact same one-electron potential integrals, which are not very efficient in the current version and are computed in serial. The serial performance issue is addressed in #592, but we can probably do even more improvement of the OS recursions to speed up these one electron ints, whose cost is negligible in regular QM calcs. Unlike explicit water QM/MM runs, we can't really do much by way of screening here I don't think, but I haven't pursued that. A simple OpenMP parallelization will go a long we here, however. I'm also looking into how to implement ddCosmo as a backend; although PCMSolver is not the bottleneck here, it'd be really helpful to have analytic gradients with implicit solvent.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1280#issuecomment-438810742:145,charge,charges,145,https://psicode.org,https://github.com/psi4/psi4/issues/1280#issuecomment-438810742,2,"['charge', 'efficient']","['charges', 'efficient']"
Energy Efficiency,"The two installs are https://github.com/psi4/psi4/blob/master/psi4/CMakeLists.txt#L354-L355 and https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L315-L316 . The former copies the quadrature files into `<objdir>/stage/share/` and the latter copies the whole `<objdir>/stage/` into `CMAKE_INSTALL_PREFIX`. From the `find` output you posted and an earlier issue, I think your CMake build setup or the FreeBSD layout is doing something unexpected at the install. Short of understanding where that's happening, adapting your recipe to remove the extra dirs may be your best bet. ```; >>> objdir_py310_gcc: (sdftd3) find . -name ""1_xk01_1E1""; ./stage/share/psi4/quadratures/1_x/1_xk01_1E1; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1301#issuecomment-1325502085:513,adapt,adapting,513,https://psicode.org,https://github.com/psi4/psi4/issues/1301#issuecomment-1325502085,1,['adapt'],['adapting']
Energy Efficiency,"The unfortunate answer is Psi4's support for atoms past krypton (perhaps a bit optimistic) is very limited. In short this stems from our inability to handle effective core potentials. We are currently discussing how to better address this for the next major release of Psi4, which is likely a long ways away; however, in the meantime I think what you want to do is not possible with Psi4. My recommendation is to consider the Q-Chem package, which is also capable of performing SAPT (energy decomposition) and does have support for atoms past krypton.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/76#issuecomment-78986839:484,energy,energy,484,https://psicode.org,https://github.com/psi4/psi4/issues/76#issuecomment-78986839,1,['energy'],['energy']
Energy Efficiency,"The xyz format sometimes specifies atomic charges instead of atomic symbols, e.g. 6 0.0 0.0 0.0. instead of. C 0.0 0.0 0.0. If possible, it would be nice for the parser to be able to cope with this kind of a definition.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/418:42,charge,charges,42,https://psicode.org,https://github.com/psi4/psi4/issues/418,1,['charge'],['charges']
Energy Efficiency,Then I suspect that the degeneracy of the orbitals might be the cause of the problem. If the orbitals are degenerate then any arbitrary rotation would give you the same SCF energy but different CI wave functions. Am I missing something?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/700#issuecomment-301918898:173,energy,energy,173,https://psicode.org,https://github.com/psi4/psi4/pull/700#issuecomment-301918898,1,['energy'],['energy']
Energy Efficiency,"Then there is something that is not done correct with the new passed D2 matrix to points..; ```; molecule mol {; 0 1; O 0.000000 1.031228 1.125381; H 0.000000 1.785070 0.512177; H 0.000000 0.253722 0.542498; }; set scf_type df; set basis cc-pVTZ. E, wfn = energy('pbe',return_wfn=True); bas = wfn.basisset(); for x in range(bas.nshell()):; shell = bas.shell(x); nfunc = shell.nfunction; fi = shell.function_index; ce = shell.ncenter; print(""Basis {}, AM = {}, center {}, indices = {}"".format(x, shell.am, ce, range(fi, fi + nfunc))); ```; prints:; ```; Basis 0, AM = 0, center 0, indices = [0]; Basis 1, AM = 0, center 0, indices = [1]; Basis 2, AM = 0, center 0, indices = [2]; Basis 3, AM = 0, center 0, indices = [3]; Basis 4, AM = 1, center 0, indices = [4, 5, 6]; Basis 5, AM = 1, center 0, indices = [7, 8, 9]; Basis 6, AM = 1, center 0, indices = [10, 11, 12]; Basis 7, AM = 2, center 0, indices = [13, 14, 15, 16, 17]; Basis 8, AM = 2, center 0, indices = [18, 19, 20, 21, 22]; Basis 9, AM = 3, center 0, indices = [23, 24, 25, 26, 27, 28, 29]; Basis 10, AM = 0, center 1, indices = [30]; Basis 11, AM = 0, center 1, indices = [31]; Basis 12, AM = 0, center 1, indices = [32]; Basis 13, AM = 1, center 1, indices = [33, 34, 35]; Basis 14, AM = 1, center 1, indices = [36, 37, 38]; Basis 15, AM = 2, center 1, indices = [39, 40, 41, 42, 43]; Basis 16, AM = 0, center 2, indices = [44]; Basis 17, AM = 0, center 2, indices = [45]; Basis 18, AM = 0, center 2, indices = [46]; Basis 19, AM = 1, center 2, indices = [47, 48, 49]; Basis 20, AM = 1, center 2, indices = [50, 51, 52]; Basis 21, AM = 2, center 2, indices = [53, 54, 55, 56, 57]; ```. if I use all basis functions in indices:; ```; 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 ; number of electrons: 9.93018. ```; only Hydrogens:; ```; 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1311#issuecomment-436412695:256,energy,energy,256,https://psicode.org,https://github.com/psi4/psi4/issues/1311#issuecomment-436412695,1,['energy'],['energy']
Energy Efficiency,"There are a few issues here, first you set `soscf true` which will fail for the `bp86` computation so you would need to switch it off. In addition, `basis_guess` will override `guess read` so your input file should look like:. ```; set basis_guess false; set soscf false; set scf guess read; scf_e, scf_wfn = energy('bp86', return_wfn=True); ```. Both SCF taking guess Wavefunctions and the combination of read options all relate to issue #483. Without some discussion there on all of the possible use cases and how these options should interact with each other I probably will not make fundamental changes to how SCF guessing works.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/612#issuecomment-278680499:309,energy,energy,309,https://psicode.org,https://github.com/psi4/psi4/issues/612#issuecomment-278680499,1,['energy'],['energy']
Energy Efficiency,"There are many ways to converge RHF, and sometimes you can get stuck in a local minmum, that's true. However, the following case is quite striking. My input:. ---. molecule N2 {; N 0.000000000000 0.000000000000 0.000000000000; N 0.000000000000 0.000000000000 2.060000000000; units au; }. plugin_load(""./mointegrals.so""). set basis sto-3g; set mointegrals print 1; set reference rhf. scf(). plugin(""mointegrals.so""). ---. I use the MO integrals for a subsequent FCI calculation (in a self-written program). When I start from the RHF determinant given by Psi4:. DOCC [ 2, 0, 1, 0, 0, 2, 1, 1 ]; Total Energy = -106.7540443603229363. the FCI energy converges to the wrong answer. When I look at the energies from all possible determinants with Sz=0; irrep Ag; and N=14 electrons in the MO single-particle basis from Psi4, there is a determinant (in that MO basis!) with an energy which is lower: E = -107.488903265175 . The FCI energy then does converge to the right answer when this determinant is given as input for Davidson iterations.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/63:599,Energy,Energy,599,https://psicode.org,https://github.com/psi4/psi4/issues/63,4,"['Energy', 'energy']","['Energy', 'energy']"
Energy Efficiency,"There have been many issues in [PySCF ](https://github.com/pyscf/pyscf) with similar issues in that changing the number of threads results in significant changes in the SCF energy. The origin of these issues has always been an inconsistent set of OpenMP libraries, and my best guess is that that's also the case here.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3223#issuecomment-2429922482:173,energy,energy,173,https://psicode.org,https://github.com/psi4/psi4/issues/3223#issuecomment-2429922482,1,['energy'],['energy']
Energy Efficiency,"There is a problem ""Orbital basis argument must not be empty"" when calling fchk() after the method and basis are defined in the energy() function call.; This problem is found in the latest development version 1.4rc2.dev97.; v1.3.x did not have this problem. ```; molecule {; 0 1; O 3.031916 1.669683 2.276015; H 2.818359 1.127467 3.035217; H 2.894980 2.585172 2.519181; }; E, wfn = energy('mp2/6-311G**',properties=['dipole'],return_wfn=True); fchk(wfn, ""test4-dma.fchk""); clean(); ```. ```; Traceback (most recent call last):; File ""/home/zj2244/Public/Software/anaconda3/envs/p4dev1/bin/psi4"", line 332, in <module>; exec(content); File ""<string>"", line 69, in <module>; File ""/home/zj2244/Public/Software/anaconda3/envs/p4dev1/lib//python3.6/site-packages/psi4/driver/driver.py"", line 1993, in fchk; wfn_ = core.Wavefunction.build(wfn.molecule(), core.get_global_option('BASIS')); File ""/home/zj2244/Public/Software/anaconda3/envs/p4dev1/lib//python3.6/site-packages/psi4/driver/p4util/python_helpers.py"", line 125, in _core_wavefunction_build; basis = core.BasisSet.build(mol, ""ORBITAL"", basis); File ""/home/zj2244/Public/Software/anaconda3/envs/p4dev1/lib//python3.6/site-packages/psi4/driver/p4util/python_helpers.py"", line 90, in _pybuild_basis; return_atomlist=return_atomlist); File ""/home/zj2244/Public/Software/anaconda3/envs/p4dev1/lib//python3.6/site-packages/psi4/driver/qcdb/libmintsbasisset.py"", line 646, in pyconstruct; raise ValidationError(""""""Orbital basis argument must not be empty.""""""). psi4.driver.qcdb.exceptions.ValidationError: Orbital basis argument must not be empty. Printing out the relevant lines from the Psithon --> Python processed input file:; H 2.818359 1.127467 3.035217; H 2.894980 2.585172 2.519181; """"""); core.IO.set_default_namespace(""""); E, wfn = energy('mp2/6-311G**',properties=['dipole'],return_wfn=True); --> fchk(wfn, ""test4-dma.fchk""); clean(). !--------------------------------------------!; ! !; ! Orbital basis argument must not be empty. !; ! !; !-",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2177:128,energy,energy,128,https://psicode.org,https://github.com/psi4/psi4/issues/2177,2,['energy'],['energy']
Energy Efficiency,"There is a segfault when `set freeze_core true` is set before a `gaussian-2` computation. Note that because of how `gaussian-2` is defined, defining a basis set is not necessary. The segfault occurs after `CGRSolver converged.` prints. I'm not familiar enough with G2 to know whether frozen core G2 is defined, or if this keyword needs to be ignored. ```; molecule {; o; h 1 r1; h 1 r1 2 a1. r1 = 1.0 ; a1 = 104.5; }. set freeze_core true. energy('gaussian-2'); ```. @edeprince3",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1530:440,energy,energy,440,https://psicode.org,https://github.com/psi4/psi4/issues/1530,1,['energy'],['energy']
Energy Efficiency,"There is also the old-school way via orbital energy thresholds (below -3.5 eV works quite well). Could indirectly solve specific wants. per atom/fragment declaration could be useful perhaps and would be, I think, a stand-out feature.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1350#issuecomment-437595468:45,energy,energy,45,https://psicode.org,https://github.com/psi4/psi4/pull/1350#issuecomment-437595468,1,['energy'],['energy']
Energy Efficiency,"There is one slight problem, though. The orbitals appear to be blocked by symmetry group, so they don't come out in energy ordering. I would need to modify the bitstring part of the dump_vec routine to map the bitstrings into Aufbau order. I couldn't find with a quick look if there's already something that would give me a mapping between detci's orbital numbering vs. the energy ordering. I note that I could build the mapping from calcinfo's scfeigval members, but is there a cleaner way to do this?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/700#issuecomment-300683881:116,energy,energy,116,https://psicode.org,https://github.com/psi4/psi4/pull/700#issuecomment-300683881,2,['energy'],['energy']
Energy Efficiency,There is something wrong with the (ia|jb) block of integrals. This is probably why the first iteration of CCSD has zero correlation energy. Could you send your atomic coordinates so I can try to reproduce this?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/34#issuecomment-34625278:132,energy,energy,132,https://psicode.org,https://github.com/psi4/psi4/issues/34#issuecomment-34625278,1,['energy'],['energy']
Energy Efficiency,"There seems to be a wrong HOMO/LUMO mixing when SAD is used. ; ```python; H2 = psi4.geometry(f""""""; 0 1; H; H 1 3.0; symmetry c1; """"""); psi4.set_options({""REFERENCE"": ""uhf"", ; ""guess"": ""gwh"",; ""e_convergence"": 12,; ""basis"": ""cc-pvdz"",; ""guess_mix "": True,; }); E = psi4.energy(""scf"", molecule=H2); ```; It gives:; ```; Mixing alpha HOMO/LUMO orbitals (1,2); @DF-UHF iter 8: -0.99872135104496 -1.08802e-14 1.64991e-11 DIIS; ```; But for SAD; ```python; psi4.set_options({""REFERENCE"": ""uhf"", ; ""guess"": ""SAD"",; ""e_convergence"": 12,; ""basis"": ""cc-pvdz"",; ""guess_mix "": True,; }); E = psi4.energy(""scf"", molecule=H2); ```; It gives; ```; Mixing alpha HOMO/LUMO orbitals (2,3); @DF-UHF iter 5: -0.82648407827446 -6.66134e-15 5.36516e-14 DIIS; ```; My psi4.__version__ is 1.5.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2410:269,energy,energy,269,https://psicode.org,https://github.com/psi4/psi4/issues/2410,2,['energy'],['energy']
Energy Efficiency,"There will be a change to the next version of the PR: ROHF ADIIS/EDIIS ""capabilities"" will be removed. As best as I can tell, an ROHF adaptation for ADIIS and EDIIS was never published, my numerical results when I try an adaptation are lackluster, and the formulation is awkward when I try to couple regular DIIS with ADIIS and EDIIS. If anybody thinks they know how to make ADIIS/EDIIS work for ROHF, let me know. Otherwise, the next version of the PR is RHF/UHF/CUHF only.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2320#issuecomment-999915941:134,adapt,adaptation,134,https://psicode.org,https://github.com/psi4/psi4/pull/2320#issuecomment-999915941,2,['adapt'],['adaptation']
Energy Efficiency,"There's a big difference in speed between MemDFJK and DiskDFJK. For the former case, it would probably not be a bad idea to compress the DF integrals with Kállay's trick from [J. Chem. Phys. 141, 244113 (2014)](https://doi.org/10.1063/1.4905005), which can reduce the number of auxiliary functions. I assume the savings would be especially significant for small basis set calculations like 6-31G*.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3075:257,reduce,reduce,257,https://psicode.org,https://github.com/psi4/psi4/issues/3075,1,['reduce'],['reduce']
Energy Efficiency,"There's a bypass_scf=True argument to energy() that may help. Look in proc.py if I don't have the syntax quite right. . Sent from my iPhone. > On May 30, 2015, at 12:08 PM, wpoely86 notifications@github.com wrote:; > ; > It's not clear to me if it's possible to start from a previous calculated rhf result to do for example ccsd(t). Can this be done? If I keep the scratch dir, and use the -r parameters with guess read, it will start from the rhf solution of the previous run, but it will still do the rhf calculation and integral transformations. I would like it to directly start with the ccsd(t) calculation, and not redo the rhf calculation. Is this currently possible?; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/102#issuecomment-107072181:38,energy,energy,38,https://psicode.org,https://github.com/psi4/psi4/issues/102#issuecomment-107072181,1,['energy'],['energy']
Energy Efficiency,"There's a lot going on here, so bear with me. In DF algorithms we approximate `(ab|cd)≈(ab|P) M_PQ (Q|cd)`, where `M` is the inverse of the metric tensor `M = (P|Q)^{-1}`. For calculations involving symmetric densities (such as SCF energies), we can write the `M` quantity as a product of inverse square roots instead; multiplying one to the left and the other to the right gives two identical intermediates, saving memory. That symmetric approach is used in the conventional algorithms that existed pre-1.4. When computing the inverse square root that's needed, the [power() function](https://github.com/psi4/psi4/blob/98a085e31f5974769eec0d9b40e03645aaed1b7d/psi4/src/psi4/libmints/matrix.cc#L2284) is used; that function respects a cutoff that is used to eliminate (near) linear dependencies and increase stability (and was widely implemented by @susilehtola as part of an effort to increase stability of the code). In cases where the density involved is not totally symmetric, such as excited states, the symmetric DF intermediates are not used and instead the decomposition is asymmetric: `(ab|cd)≈[(ab|P)] [M_PQ (Q|cd)]`. This asymmetric decomposition is also used in the recently introduced `wcombine` algorithm that combines coulomb-attenuated integrals and conventional ERIs to speed up exchange evaluation. To generate the second intermediate in this approach, a full inverse of the metric is needed, instead of the inverse square root, and this is achieved by calling [general_invert()](https://github.com/psi4/psi4/blob/98a085e31f5974769eec0d9b40e03645aaed1b7d/psi4/src/psi4/libmints/matrix.cc#L2236). This matrix inversion does not eliminate (near) linear dependencies and the system reported in #2279 is susceptible (see comments below for a demo). The `wcombine` algorithm was implemented after @susilehtola's cleanup efforts and inadvertently failed to remove linear dependencies during metric inversion; this PR corrects this oversight.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2283#issuecomment-904773900:568,power,power,568,https://psicode.org,https://github.com/psi4/psi4/pull/2283#issuecomment-904773900,1,['power'],['power']
Energy Efficiency,"There's going to be planning on this this week, so this is the opportunity for others (particularly @dsirianni and @alenaizan) to chime in with requirements and wishes. consider this issue a scratchpad. ### haphazard notes; * overlap or replacement of the `QMMM` class; * serialization so can be called from json; * but we'd like to be able to specify polarizabilities at given sites, and have the SCF solver use those to figure out the magnitude of induced dipoles at the MM sites; * needs a subdict of points with (up to) anisotropic polarizability, subdict of point charges, subdict of diffuse points; * extensibility is important also - may need more info, such as damping factors to avoid singularities",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1541:569,charge,charges,569,https://psicode.org,https://github.com/psi4/psi4/issues/1541,1,['charge'],['charges']
Energy Efficiency,"There's some `xrange` that py3 wants converted to `range`. They don't look to be over big lists, so shouldn't hurt py2 performance. Py2 problem is . ```. Transforming MOs to the semicanonical basis; Traceback (most recent call last):; File ""/home/travis/build/psi4/psi4/build/stage/home/travis/build/psi4/psi4/Install/bin/psi4"", line 248, in <module>; exec(content); File ""<string>"", line 33, in <module>; File ""/home/travis/build/psi4/psi4/build/stage/home/travis/build/psi4/psi4/Install/lib//psi4/driver/driver.py"", line 460, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/travis/build/psi4/psi4/build/stage/home/travis/build/psi4/psi4/Install/lib//psi4/driver/procrouting/proc.py"", line 4340, in run_detcas; ciwfn = mcscf.mcscf_solver(ref_wfn); File ""/home/travis/build/psi4/psi4/build/stage/home/travis/build/psi4/psi4/Install/lib//psi4/driver/procrouting/mcscf/mcscf_solver.py"", line 409, in mcscf_solver; build_semicanonical_mos(ciwfn); File ""/home/travis/build/psi4/psi4/build/stage/home/travis/build/psi4/psi4/Install/lib//psi4/driver/procrouting/mcscf/mcscf_solver.py"", line 91, in build_semicanonical_mos; Cnew = core.Matrix.doublet(ciwfn.Ca(), U, False, False); RuntimeError: ; Fatal Error: Matrix::doublet: Dimension mismatch; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/722#issuecomment-304462078:531,energy,energy,531,https://psicode.org,https://github.com/psi4/psi4/pull/722#issuecomment-304462078,2,['energy'],['energy']
Energy Efficiency,"These commits allow (almost) all tests to pass under python 2 and python 3. I ran the tests under Arch Linux (gcc 4.8.1, python 2.7.5 and 3.3.2, netlib LAPACK+BLAS, boost 1.53.0). Outstanding issues:; - fd-freq-energy seg faults after printing out the 'Thermodynamic Analysis' banner under python 2 and 3. Is this a known issue?; - pywrap-db2, pywrap-opt-sowreap and pywrap-freq-e-sowreap fail to run under python 3 (maybe 3.3?). This is due to the pickle.dump in format_kwargs_for_input: under python 3, pickle.dump must write to a binary file (a restriction not present in python 2) and format_kwargs_for_input is always passed an open text file to write to. I haven't come up with a clean fix to this yet. I also haven't tested the plugins (I forgot to compile with support for them), dftd3 interface (the PSI4 documentation links to a required patch in the psi4 private repository) nor the mrcc interface (no license).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/9#issuecomment-20545979:211,energy,energy,211,https://psicode.org,https://github.com/psi4/psi4/pull/9#issuecomment-20545979,1,['energy'],['energy']
Energy Efficiency,"These definitions all look ok. It's correct that the CCSD energy should; not equal the sum of the same-spin and opposite-spin terms, b/c those terms; refer to the doubles, and singles are held out as separate (; https://aip.scitation.org/doi/10.1063/1.2883974 ). On Thu, Aug 15, 2019 at 5:50 PM Lori A. Burns <notifications@github.com>; wrote:. > Note this is only a psivars issue -- printed energies are fine.; >; > singles contributions to UHF & ROHF CCSD (; > https://github.com/psi4/psi4/blob/master/psi4/src/psi4/cc/ccenergy/energy.cc#L132-L137); > and below) aren't getting stored in psivars. in consequence, CCSD; > SAME-SPIN CORRELATION ENERGY and CCSD OPPOSITE-SPIN CORRELATION ENERGY; > don't sum to CCSD CORRELATION ENERGY.; >; > - for the CC people out there -- speak up if the CCSD analogs of the; > following definitions offend. they're what qcschema is using; > <https://github.com/MolSSI/QCSchema/blob/a4329e626903ec0391d21179f0754bdc65e6831b/qcschema/dev/properties/cc_properties.py#L7-L38>; >; > qcvardefs['MP2 SAME-SPIN CORRELATION ENERGY'] = {; > 'units': 'Eh',; > 'glossary': r""""""; > The unscaled portion of the MP2 correlation energy; > from same-spin or triplet doubles correlations.; >; > canonical_corl(os_scale=1, ss_scale=1) = singles + os_scale * (tot_corl - ss_corl) + ss_scale * ss_corl; > :math:`E_{\text{SS}}` in Eq. :eq:`MP2corl`.; > """"""}; >; > qcvardefs['MP2 OPPOSITE-SPIN CORRELATION ENERGY'] = {; > 'units': 'Eh',; > 'glossary': r""""""; > The unscaled portion of the MP2 correlation energy; > from opposite-spin or singlet doubles correlations.; > :math:`E_{\text{OS}}` in Eq. :eq:`MP2corl`.; > """"""}; >; > qcvardefs['MP2 SINGLES ENERGY'] = {; > 'units': 'Eh',; > 'glossary': r""""""; > The singles portion of the MP2 correlation energy.; > Zero except in ROHF.; > :math:`E_{\text{S}}` in Eq. :eq:`MP2corl`.; > """"""}; >; > qcvardefs['MP2 DOUBLES ENERGY'] = {; > 'units': 'Eh',; > 'glossary': r""""""; > The doubles portion of the MP2 correlation energy; > including same-spin",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1702#issuecomment-522097517:58,energy,energy,58,https://psicode.org,https://github.com/psi4/psi4/issues/1702#issuecomment-522097517,5,"['ENERGY', 'energy']","['ENERGY', 'energy']"
Energy Efficiency,"These tests are still failing with erd. Maybe I wasn't too clear before, but these are what fail when I set integral_package to erd in my psi4rc file. . 12 - cbs-xtpl-freq (Failed); 114 - dfccd-grad1 (Failed); 117 - dfccsd-grad1 (Failed); 122 - dfmp2-3 (Failed); 124 - dfmp2-grad1 (Failed); 125 - dfmp2-grad2 (Failed); 126 - dfmp2-grad3 (Failed); 127 - dfmp2-grad4 (Failed); 132 - dfomp2-grad1 (Failed); 133 - dfomp2-grad2 (Failed); 136 - dfomp3-grad1 (Failed); 137 - dfomp3-grad2 (Failed); 140 - dfomp2p5-grad1 (Failed); 141 - dfomp2p5-grad2 (Failed); 146 - dft-freq (Failed); 147 - dft-grad (Failed); 151 - dft1 (Failed); 152 - dft1-alt (Failed); 154 - dft3 (Failed); 157 - extern1 (Failed); 165 - fd-freq-energy-large (Failed); 168 - fd-gradient (Failed); 188 - mints9 (Failed); 196 - mp2-module (Failed); 229 - opt-lindep-change (Failed); 237 - opt6 (Failed); 238 - opt7 (Failed); 239 - opt8 (Failed); 240 - opt9 (Failed); 241 - opt11 (Failed); 242 - opt12 (Failed); 243 - opt13 (Timeout); 245 - opt-irc-1 (Failed); 246 - opt-irc-2 (Failed); 247 - opt_freeze_coords (Failed); 261 - pubchem1 (Failed); 268 - pywrap-checkrun-rhf (Failed); 269 - pywrap-checkrun-rohf (Failed); 270 - pywrap-checkrun-uhf (Failed); 272 - pywrap-db2 (Failed); 309 - tu3-h2o-opt (Failed); 310 - tu4-h2o-freq (Failed); 322 - cubeprop-esp (Failed)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/587#issuecomment-275696746:708,energy,energy-large,708,https://psicode.org,https://github.com/psi4/psi4/pull/587#issuecomment-275696746,1,['energy'],['energy-large']
Energy Efficiency,"This PR contains the implementation of XDM-enabled density functional theory calculations in psi4. XDM is a dispersion correction in which the dispersion coefficients that enter the asymptotic dispersion formula are calculated post-SCF from the self-consistent electron density and kinetic energy density. XDM maintains the simplicity and accuracy of a damped asymptotic dispersion correction while, at the same time, it calculates the dispersion coefficients from the self-consistent wavefunction. . The XDM energy and gradient are calculated by the [postg](https://github.com/aoterodelaroza/postg) external program, to which the new code interfaces. The implementation is very similar to the way in which psi4 currently interfaces to gCP. In addition, a few XDM-enabled functionals are provided to facilitate its use. A few tests, samples, and documentation are also included in the package. That said, I recommend that you check the XDM/postg documentation meets psi4 standards as I have no way to verify what it looks like in HTML form.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1699:290,energy,energy,290,https://psicode.org,https://github.com/psi4/psi4/pull/1699,2,['energy'],['energy']
Energy Efficiency,"This PR will have a merge conflict with my #2247. I wasn't comfortable touching the SCF code this close to 1.4 _then_, and I'm still not comfortable with it now. My vote is to keep this as a 1.5 target. I would prefer a dedicated option or keyword argument to `energy` for the short-circuit. Yes, this is a _reasonable_ behavior, but:. 1. Explicit is better than implicit.; 2. The SCF code is too complicated as-it-is due to overloading of the meaning of the `iterations_` variable. It was reasonable in one or two places, but becomes a mess as different parts of the code use it slightly differently. I'm paranoid of variable overloading, and having a special case of `maxiter = 0` is too close to that for comfort.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2073#issuecomment-885927352:261,energy,energy,261,https://psicode.org,https://github.com/psi4/psi4/pull/2073#issuecomment-885927352,1,['energy'],['energy']
Energy Efficiency,"This advice is fine. Try `opt_coordinates = 'cartesian'` (which worked for me); But I just tried with the psi4 on my macbook 1.4rc3.dev3, and the optimization ran perfectly smoothly. Also, there is a confusingly named but powerful keyword `dynamic_level = 1`. This will cause alternative optimization algorithm to run if the first one fails.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2208#issuecomment-868809362:222,power,powerful,222,https://psicode.org,https://github.com/psi4/psi4/issues/2208#issuecomment-868809362,1,['power'],['powerful']
Energy Efficiency,"This calculation fails in Psi4 1.3.2; ```; molecule {; Ne; }. my_pbe = {; ""name"": ""my pbe"",; ""x_functionals"": {""GGA_X_PBE"": {}},; ""c_functionals"": {""GGA_C_PBE"": {}}; }. set basis pcseg-2; set basis_guess true; energy('scf', dft_functional=my_pbe); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2199:210,energy,energy,210,https://psicode.org,https://github.com/psi4/psi4/issues/2199,1,['energy'],['energy']
Energy Efficiency,"This could explain some bugs we've been seeing lately. I don't know who introduced ""coldim"" and why it is needed if we already; have nmopi. On Tue, Feb 23, 2021 at 9:37 PM Eugene DePrince <notifications@github.com>; wrote:. > DF-CC freaks out when linear dependencies are present, and i tracked the; > issue to an inconsistency between reference_wavefunction_->nmopi() and; > reference_wavefunction_->Ca()->coldim(). The latter has the correct value; > when linear dependencies are removed.; >; > Should nmopi() and Ca()->coldim() be consistent in this case?; >; > Minimal input:; >; > molecule {; > o; > h 1 1.0; > h 1 1.0 2 104.5; > }; >; > set {; > basis 'aug-cc-pvtz'; > scf_type df; > cc_type df; > s_tolerance 1e-3; > }; > energy('ccsd'); >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/2120>, or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AAXVA5THGTZ2CCKELMGOIZ3TARQ5JANCNFSM4YDUMEUA>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2120#issuecomment-785511707:729,energy,energy,729,https://psicode.org,https://github.com/psi4/psi4/issues/2120#issuecomment-785511707,1,['energy'],['energy']
Energy Efficiency,This does not appear to be fixed with the new CI code. I now get an energy of -1492.0189996...; Likely related to issue #69,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/175#issuecomment-170681070:68,energy,energy,68,https://psicode.org,https://github.com/psi4/psi4/issues/175#issuecomment-170681070,1,['energy'],['energy']
Energy Efficiency,"This fixes #977 . ## Description; Make `energy(cbs, ..., bsse_type=[...])` calls work the expected way - calculating and returning overall interaction energies. . ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Fix for #977. ## Questions; - [ ] Do we need a test for this?. ## Checklist; - [ ] Tests added for any new features; - [x] [All tests (with the exception of 179, 376, 377 which t/o) run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1119:40,energy,energy,40,https://psicode.org,https://github.com/psi4/psi4/pull/1119,1,['energy'],['energy']
Energy Efficiency,"This input file:; ```; memory 5 GB. molecule uf4 {; 0 1; U; F 1 1.7; F 1 1.7 2 90.0; F 1 1.7 3 90.0 2 180.0; F 1 1.7 4 90.0 3 180.0; }. set basis LANL2DZ; set scf_type pk; set guess CORE; optimize('hf'); ```; produces the following output:; ``` ; Writing optimization data to binary file.; Final energy is -448.6902827985336; Final (previous) structure:; Cartesian Geometry (in Angstrom); SI 0.0000000000 0.0000000000 0.0000000000; F 0.0000000000 -1.4770587400 1.4786286784; F 0.0000000000 1.4770587400 1.4786286784; F 0.0000000000 1.4770587400 -1.4786286784; F 0.0000000000 -1.4770587400 -1.4786286784; Saving final (previous) structure.; Removing binary optimization data file.; --------------------------; OPTKING Finished Execution; --------------------------. Final optimized geometry and variables:; Molecular point group: d2h; Full point group: D2h. Geometry (in Angstrom), charge = 0, multiplicity = 1:. U; F 1 2.089987; F 1 2.089987 2 89.939134; F 1 2.089987 3 90.060866 2 -180.000000; F 1 2.089987 4 89.939134 3 -180.000000. Removing binary optimization data file.; Cleaning optimization helper files. Psi4 stopped on: Tuesday, 31 July 2018 04:29PM; Psi4 wall time for execution: 0:18:57.70. *** Psi4 exiting successfully. Buy a developer a beer!; ```. It seems that Psi4 is treating it as Uranium, as the energy is different from SiF4 at the same geometry, and is therefore just a printing problem.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1114:296,energy,energy,296,https://psicode.org,https://github.com/psi4/psi4/issues/1114,3,"['charge', 'energy']","['charge', 'energy']"
Energy Efficiency,"This input runs fine for HF, for me. Let me know if you need anything else. ```python; ref_nuc_energy = 5.176733562293478; ref_rel_energy = -100.10780818747669. molecule hf{; H; F 1 0.92; }. set {; scf_type pk; basis cc-pvdz-decon; basis_relativistic cc-pvdz-decon #Must Specify relativistic basis; #when using decontracted primary basis; relativistic x2c; }. testrel = energy('hf'). compare_values(ref_nuc_energy, hf.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST; compare_values(ref_rel_energy,testrel, 9, ""X2C relativistic SCF energy"") #TEST; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/662#issuecomment-288839643:370,energy,energy,370,https://psicode.org,https://github.com/psi4/psi4/issues/662#issuecomment-288839643,3,['energy'],['energy']
Energy Efficiency,"This is a Davidson error. Looks like as soon as the norm of the correction vector gets small enough an instability occurs causing a non-variational energy. Very hard to debug and/or fix. Dividing small numbers by small numbers is always tricky. If you are just after the energy (the only things the current CI code can do at the moment) the simplest option is to reduce your CI convergence threshold to something reasonable like `r_convergence 1.e-4` . You can also try setting `hd_avg hd_exact` in your settings. . Also, something like this really belongs on the [Psi forums](http://forum.psicode.org/latest).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/448#issuecomment-235024888:148,energy,energy,148,https://psicode.org,https://github.com/psi4/psi4/issues/448#issuecomment-235024888,3,"['energy', 'reduce']","['energy', 'reduce']"
Energy Efficiency,"This is a follow-up to #1608 (fisapt + external potentials). There might be something wrong when the molecule is specified in bohr. I'm not sure, so I thought I'd query @alenaizan and @CDSherrill about how suspicious the below makes you, and how likely you would have been to catch this in the testing process. First things, the `ExternalPotential.charges_` (holding charge and position) stores positions in the units of the molecule. For consistency for functions on the class, it translates the internal data to bohr before computing. This printing label https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/extern.cc#L70 is wrong (for positions; ok for charges). These comments suggest this might not have been clear in the earlier PR https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/extern.cc#L414-L416 and might have ramifications here https://github.com/psi4/psi4/blob/master/psi4/src/psi4/fisapt/fisapt.cc#L730-L735 . When I rewrite the fsapt-ext-abc test case so that the molecule and charges are again consistent in Bohr (below), the overall passes but the fragments don't. Also below is the fsapt.dat differences. Again, I can well believe that I'm doing something wrong or that the `fsapt.py` machinery has some built-in unit assumptions, but I'm glad of any input or we-checked-that information. The reason it's coming up now is that DDD ""fixes"" this peculiarity of `ExternalPotential` and _only_ stores the charge positions in Bohr. ```; memory 1 GB. # water prism: https://science.sciencemag.org/content/sci/suppl/2012/05/16/336.6083.897.DC1/Perez_SM.pdf; # Table S43. #mol = psi4.core.Molecule.from_arrays(; # elez=[1, 8, 1, 1, 8, 1, 1, 8, 1],; # fragment_separators=[3, 6],; # fix_com=True,; # fix_orientation=True,; # fix_symmetry='c1',; # geom=np.array([; # 0.0290, -1.1199, -1.5243,; # 0.9481, -1.3990, -1.3587,; # 1.4371, -0.5588, -1.3099,; # 1.0088, -1.5240, 0.5086,; # 1.0209, -1.1732, 1.4270,; # 1.5864, -0.3901, 1.3101,; # -1.0231, 1.6243, -0.8743,; #",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2330:367,charge,charge,367,https://psicode.org,https://github.com/psi4/psi4/issues/2330,2,['charge'],"['charge', 'charges']"
Energy Efficiency,"This is an actual representative of the failed (large) optimizations that I; constantly get forwarded to me! :) I don't choose them. Do we not have a; way to leave test cases, even 'longertests' in there without them; interfering in the normal course?. The purpose of this tests is that it has challenging quasi-linear angles in; it. I have no objection to reducing the calculation. Perhaps removing the; polarization functions would be enough?. -Rollin. ## . Dr. Rollin A. King; Professor and Chair of Chemistry; Bethel University; rking@bethel.edu. On Mon, Feb 15, 2016 at 8:04 AM, Daniel Smith notifications@github.com; wrote:. > Ah yes, this is no longer a used test cases in wavefunction_pass.; > @psi-rking is it possible to reduce the basis set to something fairly quick?; > ; > Daniel Smith; > malorian@me.com; > ; > > On Feb 15, 2016, at 9:01 AM, Justin Turney notifications@github.com; > > wrote:; > > ; > > opt10 is too big for a test case: 15 atoms, C1 symmetry, 322 basis; > > functions, requests 32 GB of memory, and performing a transition state; > > geometry optimization with an initial Hessian by finite difference of; > > gradients. The calculation timed out on the 13 of 79 gradient displacements; > > of the initial Hessian. The only thing that does help is that it's a DF-MP2; > > calculation.; > > ; > > —; > > Reply to this email directly or view it on GitHub <; > > https://github.com/psi4/psi4/issues/253#issuecomment-184219439>.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/253#issuecomment-184220315.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/253#issuecomment-184227998:731,reduce,reduce,731,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-184227998,1,['reduce'],['reduce']
Energy Efficiency,"This is pretty early days on this PR. The short is that a `Computer` can be `CBS/FindIf/N-Body/Single/etc` (?) so that you can nest them and where a `Single` is the only object that calls quantum chemistry. For example, a `N-Body` can be made up of `Single` computations or `CBS` computations where a CBS computation will be made up for two or more `Single` computations. In this case, calling `compute` on `N-Body` will call `compute` on all of its children which if is a `Single` will call a quantum chemistry computation or if `CBS` will call 2 or more single computations (or FindIf!) and then construct that data into an extrapolated energy which will be given to `N-Body`. The key here is that the `Single` can have three modes 1) a continuous computation on a single node 2) a sow/reap mode using files and 3) a sow/reap mode using [QCFractal](https://qcfractal.readthedocs.io/en/latest/). There will assuredly be many more docs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-437624744:639,energy,energy,639,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-437624744,1,['energy'],['energy']
Energy Efficiency,"This is ready for review. With my latest changes:; - The user specifies a number of roots to seek to converge. If the system has symmetry, we spread them around among the irreps. For example, 10 roots in C2v means `[3, 3, 2, 2]` in whatever order the irreps are for the given system. To have more granular control over what symmetries to seek roots in, the user can pass a list: `[10, 0, 0, 0]` will seek the 10 roots in the totally symmetric irrep.; - Option for triplets is now passed down to the solver correctly. `""none""` is the default (singlet roots only); `""also""` will compute as many singlet roots as triplet roots, so this makes the calculation cost twice as much (at least). Notable limitations:; - restricted triplets: RPA or TDA, Hartree-Fock only. Notes in code state that the XC kernel is only spin-adapted for singlets.; - unresctricted: RPA or TDA, Hartre-Fock and LDA only. Notes in code state that there is a bug for UKS beyond LDA, but aren't more specific than that. I am waiting on #1885 to be in to write docs. An example of PsiAPI usage:; ```python; import psi4. from psi4.driver.procrouting.response.scf_response import tdscf_excitations; from psi4.driver.p4util import spectrum. psi4.core.set_output_file(""moxy.out""). # structure from Pederson et al., CPL, submitted; moxy = psi4.geometry(""""""0 1; C 0.152133 -0.035800 0.485797; C -1.039475 0.615938 -0.061249; C 1.507144 0.097806 -0.148460; O -0.828215 -0.788248 -0.239431; H 0.153725 -0.249258 1.552136; H -1.863178 0.881921 0.593333; H -0.949807 1.214210 -0.962771; H 2.076806 -0.826189 -0.036671; H 2.074465 0.901788 0.325106; H 1.414895 0.315852 -1.212218; """""", name=""(S)-methyloxirane""). psi4.set_options({; 'save_jk': True,; }). method = 'HF'; basis = 'cc-pVDZ'; e, wfn = psi4.energy(f""{method}/{basis}"", return_wfn=True, molecule=moxy); res = tdscf_excitations(wfn, states=8, triplets=""also""). from typing import Tuple, Dict. import numpy as np; import pandas as pd; import altair as alt. def plot_spectrum(data: Dict,",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-632666226:814,adapt,adapted,814,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-632666226,1,['adapt'],['adapted']
Energy Efficiency,"This is the list of changes made for the wavefunction passing update. This is a very large change that modified virtually every file in Psi4, details of the why and what can be found [here](https://github.com/psi4/psi4public/wiki/Changes-to-Information-Passing-in-Psi4-%28Jan-2016%29). This is slightly long, but please read this fully as there is a decent chance that advanced users will have to make some tweaks to their existing input files. A quick rundown of the changes:; - Energy, gradient, etc now actually return a energy (a number), gradient (a matrix), etc. A good example of these changes is [this](https://github.com/psi4/psi4public/commit/a559003d1e4be8ac36107ba64751ee6db78c8f3b#diff-684250b9cfb2a0fa201f5dc123c90964L48) diff.; - All methods now take new kwargs (python variables):; - `return_wfn` - return the methods wavefunction: `scf_e, scf_wfn = energy('SCF', return_wfn=True)`; - `ref_wfn` - what wavefunction to use as reference: `mp2_e = energy('MP2', ref_wfn=scf_wfn)`; - `molecule` - give a molecule for the calculation to be run on (mostly an internal kwarg); - The global molecule is now only touched/modifed by the input file, the user parameter `activate` and by the optimize function.; - OEProp, cubewriter, and the molden writer all need to be explicitly passed a wavefunction python-side.; - These changes will allow for extremely complex workflows. Check out [`proc.py/run_sapt`](https://github.com/dgasmith/psi4public/blob/wavefunction_pass/share/python/proc.py#L2611) for an interesting case of passing wavefunctions and molecules into primary `proc.py` functions.; - `DF` and `RI` modifiers to methods are no longer valid (e.g., `energy('RI-MP2')`). Please use the `mp2_type` option instead.; - Fixed numerous bugs/oddities and moved everything towards a more object oriented workflow. ---. A few notable issues that people may run into:; - The `psi4/lib` folder has been moved to `psi4/share` please update all `PSIDATADIR` references accordingly.; - `Process::env",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/246:480,Energy,Energy,480,https://psicode.org,https://github.com/psi4/psi4/pull/246,4,"['Energy', 'energy']","['Energy', 'energy']"
Energy Efficiency,"This is the mega-issue for the cleanup of excited-state variables. I come to this as a spinoff of the cc modernization mega-issue, which is a spin-off of the density sanitizing mega-issue. The goal of this mega-issue is to synchronize variable names across TDDFT, EOM, and ADC, per the standard introduced in #2462 and amended slightly in #2475. ### The Standard; We support the following access patterns:; ```; f""{method} ROOT 0 ({initial_state}) -> ROOT {irrep_idx} ({target_state}) EXCITATION ENERGY""; f""{method} TD-HF ROOT 0 -> ROOT {global_idx} EXCITATION ENERGY; f""{method} ROOT 0 -> ROOT {global_idx} EXCITATION ENERGY - {transition} TRANSITION; ```. - `{method}` should include both the _family_ of the method and the _specific method_ used. For example, both `CC` and `CC3`.; - `{global_idx}` is the index of the root, ordered by energy, in the space of all roots.; - `{irrep_idx}`is the index of the root, ordered by energy, in the space of roots of that irrep. This should **never** be larger than `global_idx` and is identical `global_idx` for molecules without symmetry.; - `{initial_state} ^ {target_state} = {transition}`. ### The Status. - [x] DFT; - [x] #2462 - initial cleanup; - [x] (part of) #2477 - set TD-DFT variables with names starting TD-SCF or TD-DFT (maybr both?) in addition to TD-fctl; - [ ] EOM; - [x] #2475 - variables set directly in `cceom`; - [x] Variables set directly in `ccdensity`; - [x] #2514 - Oscillator strengths; - [x] #2525 - Einstein coefficients, rotation strengths; - [x] #2538 - All access patterns ; - [ ] Variables set indirectly, via oeprop; - [X] #2479 - remove mutlipole component variables from being set in oeprop; - [x] #2485 - condense multipole setting functions into one; - [ ] #2541 Rename multipole variables from `oeprop` according to the standard; - [x] ADCC; - [x] #2513 ; - [ ] Final cleanup pass",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2486:496,ENERGY,ENERGY,496,https://psicode.org,https://github.com/psi4/psi4/issues/2486,5,"['ENERGY', 'energy']","['ENERGY', 'energy']"
Energy Efficiency,"This is valuable, thank you. As you might suppose, we did one Python 3 compatibility pass some time ago, but none of the core developers regularly works in 3, to my knowledge.; - The fd-freq-energy segfault is because there was an exit() command in the input file. It's clean for me when I comment it out, and I've referred the test case to the appropriate developer.; - Thanks for the reckoning on what remains to be tested. The plugins don't have much exotic python, though I should probably check them for print(...), and for dftd3 and mrcc, one should work if the other does. Perhaps you were using the developers' documentation (http://sirius.chem.vt.edu/psi4manual/master/index.html) instead of users' (http://sirius.chem.vt.edu/psi4manual/latest/index.html)? The former links to the private repo and the latter to the public one. The patch is here (https://raw.github.com/psi4/psi4release/master/lib/scripts/patch_grimme_dftd3) and should be universally readable, if you ever want it.; - Those pywrap test cases fall within my purview. I've been considering re-doing the sow/reap routines that use format_*_for_input functions for a while. Python 3 compatibility will provide another impetus/constraint for that. I don't see a clean solution to it either.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/9#issuecomment-20548249:191,energy,energy,191,https://psicode.org,https://github.com/psi4/psi4/pull/9#issuecomment-20548249,1,['energy'],['energy']
Energy Efficiency,"This is very odd, indeed. With Q-Chem I get the following results. | | HF | MP2 |; |--|--|--|; |Kr2 dimer | -5478.3777659931 | -5478.43678797 |; |Kr atom | -2739.1975667825 | -2739.22713486 |; |interaction energy | 0.017368 | 0.017482 |. which are close to the original df values, so the new values are wrong.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1350#issuecomment-452700868:206,energy,energy,206,https://psicode.org,https://github.com/psi4/psi4/pull/1350#issuecomment-452700868,1,['energy'],['energy']
Energy Efficiency,"This is very strange! Yes, the CD-MP2 Correlation Energy is positive,; which is definitely wrong. I can't imagine why seemingly innocent; changes to the input file would change the result, unless there is; just a memory leak or something. Valgrind might be a good idea. On Fri, Feb 12, 2016 at 12:05 PM, Lori A. Burns notifications@github.com; wrote:. > I'm finding non-deterministic energies for cd-mp2, depending on amount of; > extraneous stuff commented in the input file. For example, the below works; > as is, but gives a different answer when the unused molecules are commented; > out (not only molecules, but irrelevant keywords can cause the problem,; > too). The problem shows up in the final output as correlation energy has; > wrong sign and not matching sum of aa, ab, bb contributions. At first I; > though it was because you're setting EcorlL but printing Ecorl, @bozkaya; > https://github.com/bozkaya , but that turns out to be innocent. I've; > got a valgrind if that'll help.; > ; > molecule methane {; > C 0.0000000 0.0000000 3.0826195; > H 0.5868776 0.8381742 3.4463772; > H -1.0193189 0.0891638 3.4463772; > H 0.0000000 0.0000000 1.9966697; > H 0.4324413 -0.9273380 3.4463772; > }; > ; > molecule hf {; > H; > F 1 0.917; > }; > ; > molecule bh_h2p {; > 1 2; > B 0.10369114 0.00000000 0.00000000; > H -1.13269886 0.00000000 0.00000000; > H 3.00000000 0.37149000 0.00000000; > H 3.00000000 -0.37149000 0.00000000; > }; > ; > set basis cc-pvdz; > set scf_type df; > set guess sad; > set freeze_core true; > set e_convergence 8; > set d_convergence 7; > ; > set reference uhf; > set mp2_type cd; > energy('mp2'); > print_variables(); > ; > compare_values(-0.058409837177, get_variable('mp2 correlation energy'), 6, 'mp2 uhf cd: 1 occ*') #TEST; > ; > ```; > Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)...; > =======================================================================; > Nuclear Repulsion Energy (a.u.) : 4.91953818754669; > CD-HF Energy (a.u.) : -25.945130559",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/244#issuecomment-183423323:50,Energy,Energy,50,https://psicode.org,https://github.com/psi4/psi4/issues/244#issuecomment-183423323,2,"['Energy', 'energy']","['Energy', 'energy']"
Energy Efficiency,"This is what I got and that looks good to me, too:; ```; *** tstop() called on larry at Mon Jan 30 20:51:46 2017; Module time:; user time = 0.35 seconds = 0.01 minutes; system time = 0.02 seconds = 0.00 minutes; total time = 1 seconds = 0.02 minutes; Total time:; user time = 24.96 seconds = 0.42 minutes; system time = 0.20 seconds = 0.00 minutes; total time = 28 seconds = 0.47 minutes; Finite difference (3-pt.) vs. analytic gradient to 10^-5..........PASSED; Finite difference energy..........................................PASSED; Analytic energy...................................................PASSED. *** Psi4 exiting successfully. Buy a developer a beer!; ```. What does this mean: `Exit Status: infile ( -6 )`?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/591#issuecomment-276601165:481,energy,energy,481,https://psicode.org,https://github.com/psi4/psi4/pull/591#issuecomment-276601165,2,['energy'],['energy']
Energy Efficiency,"This looks like a mismatch in the tolerance used to figure out the point group and the tolerance being used within the optimizer. For the HOOH case, adding `symmetry c2` to the molecule specification should be a simple workaround. Also, you can use `SCF_Energy = psi4.get_variable('CURRENT ENERGY')` to avoid running an extra energy calculation.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/10#issuecomment-201451437:290,ENERGY,ENERGY,290,https://psicode.org,https://github.com/psi4/psi4/issues/10#issuecomment-201451437,2,"['ENERGY', 'energy']","['ENERGY', 'energy']"
Energy Efficiency,"This looks like the same issue as #1924, except #1924 is a much quicker computation to run. Unfortunately, I don't know what the issue here is and can't recommend a way around it. The other person with a similar issue said that switching to Cartesian coordinates helped them?. I'll add that the ECP gradient terms took a suspiciously long time to compute, and that the SCF iterations should have gone much faster. It took about 13 iterations(!) for the SCF energy to be to lower than the initial SCF guess energy.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1921#issuecomment-640549188:457,energy,energy,457,https://psicode.org,https://github.com/psi4/psi4/issues/1921#issuecomment-640549188,2,['energy'],['energy']
Energy Efficiency,"This may be related to issue #420, but the read guess also behaves in a crazy fashion if you try to set docc and socc. Test case:. molecule neutral{; 0 2; Na; }. molecule cation {; 1 1; Na; }. activate(cation); set basis STO-3G; set reference rhf; set guess core; energy('scf'). activate(neutral); set basis STO-3G; set reference rohf; set guess read; set docc [ 2, 0, 0, 0, 0, 1, 1, 1 ]; set socc [ 1, 0, 0, 0, 0, 0, 0, 0 ]; energy('scf'). If one does not supply the latter step with the docc/socc specification, the result is. ```; Final Occupation by Irrep:; Ag B1g B2g B3g Au B1u B2u B3u ; DOCC [ 2, 0, 0, 0, 0, 1, 1, 1 ]; SOCC [ 1, 0, 0, 0, 0, 0, 0, 0 ]; ```. Energy converged. @DF-ROHF Final Energy: -159.66461226804716. If one does include the specification, the result is. ```; Final Occupation by Irrep:; Ag B1g B2g B3g Au B1u B2u B3u ; DOCC [ 2, 0, 0, 0, 0, 1, 1, 1 ]; SOCC [ 0, 0, 0, 0, 0, 0, 0, 0 ]; ```. Energy converged. @DF-ROHF Final Energy: -159.78073099020281. so the odd electron vanishes.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/421:264,energy,energy,264,https://psicode.org,https://github.com/psi4/psi4/issues/421,6,"['Energy', 'energy']","['Energy', 'energy']"
Energy Efficiency,"This might be rather an issue for https://github.com/piecuch-group/cct3 but will affect psi4 users nonetheless. The following is a minimal input:; ```; import cct3. set {; basis cc-pVDZ; ints_tolerance 1e-11; }. molecule eins {; units bohr; symmetry c1; h -1.000000000000 -2.414213562373 0.000000000000; h -1.000000000000 2.414213562373 0.000000000000; h 1.000000000000 -2.414213562373 0.000000000000; h 1.000000000000 2.414213562373 0.000000000000; }. molecule zwei {; units bohr; symmetry c1; h -2.514213562373 -1.000000000000 0.000000000000; h -2.514213562373 1.000000000000 0.000000000000; h 2.514213562373 -1.000000000000 0.000000000000; h 2.514213562373 1.000000000000 0.000000000000; h -1.000000000000 -2.414213562373 0.000000000000; h -1.000000000000 2.414213562373 0.000000000000; h 1.000000000000 -2.414213562373 0.000000000000; h 1.000000000000 2.414213562373 0.000000000000; }. energy(""cr-cc(2,3)"",molecule=eins); clean(); energy(""cr-cc(2,3)"",momlecule=zwei); ```. The error is:; ```; (base) kruse@sphinx1 /scratch/kruse/CCT3 $ psi4.git -v -s . -n 16 input.dat; forrtl: severe (104): incorrect RECL= specifier value for connected file, unit 250, file /scratch/kruse/CCT3/PA; Image PC Routine Line Source; libifcoremt.so.5 00002AD86592CE75 for__io_return Unknown Unknown; libifcoremt.so.5 00002AD8659522E0 for_open Unknown Unknown; cct3.so 00002AD865620EDF integrals_mp_load Unknown Unknown; cct3.so 00002AD86562C3EB solver_mp_solve_c Unknown Unknown; cct3.so 00002AD8655F75A6 driver_mp_run_cc_ Unknown Unknown; cct3.so 00002AD86563683E cc_ Unknown Unknown; cct3.so 00002AD85AD0AAE1 cct3 Unknown Unknown; ```. The `PA` file is opened for _writing_ with a record length `recl` using orbital dimensions.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2009:890,energy,energy,890,https://psicode.org,https://github.com/psi4/psi4/issues/2009,2,['energy'],['energy']
Energy Efficiency,"This problem was already mentioned in passing here: https://github.com/psi4/psi4/issues/662#issuecomment-475861476. This is a simple example input file showing the problem:. ```; molecule {; H; }. set {; scf_type pk; basis ano-rcc; relativistic x2c; reference uhf; }. energy('hf'); ```. I have set my `$PSIPATH` to a directory containing the basis set file (downloaded from EMSL):. ```bash; ll $PSIPATH; total 2.1M; drwxr-xr-x. 2 toon toon 4.0K Apr 29 17:13 .; drwxr-xr-x. 7 toon toon 4.0K Apr 29 16:34 ..; -rw-r--r--. 1 toon toon 2.1M Apr 29 15:49 ano-rcc.gbs; ```. When running Psi4 on this input, I get the following error message:. ```; Traceback (most recent call last):; File ""/home/toon/miniconda3/envs/p4dev/bin/psi4"", line 287, in <module>; exec(content); File ""<string>"", line 26, in <module>; File ""/home/toon/miniconda3/envs/p4dev/lib/psi4/driver/driver.py"", line 561, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/toon/miniconda3/envs/p4dev/lib/psi4/driver/procrouting/proc.py"", line 2045, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/home/toon/miniconda3/envs/p4dev/lib/psi4/driver/procrouting/proc.py"", line 1281, in scf_helper; scf_wfn = scf_wavefunction_factory(name, base_wfn, core.get_option('SCF', 'REFERENCE'), **kwargs); File ""/home/toon/miniconda3/envs/p4dev/lib/psi4/driver/procrouting/proc.py"", line 1056, in scf_wavefunction_factory; puream=wfn.basisset().has_puream()); File ""/home/toon/miniconda3/envs/p4dev/lib/psi4/driver/p4util/python_helpers.py"", line 80, in _pybuild_basis; mol.to_dict(), key, resolved_target, fitrole, other, return_dict=True, return_atomlist=return_atomlist); File ""/home/toon/miniconda3/envs/p4dev/lib/psi4/driver/qcdb/libmintsbasisset.py"", line 679, in pyconstruct; verbose=verbose); File ""/home/toon/miniconda3/envs/p4dev/lib/psi4/driver/qcdb/libmintsbasisset.py"", line 838, in construct; filename = cls.make_filename(basgbs); File ""/home/toon/miniconda3/envs/p4",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1613:268,energy,energy,268,https://psicode.org,https://github.com/psi4/psi4/issues/1613,3,['energy'],['energy']
Energy Efficiency,"This question would probably be better asked on the [Matter Modeling sackexchange site](https://mattermodeling.stackexchange.com/), or maybe the Psi4 forum. But not as a Github issue. Make sure you are accounting for the fact that your cyclic molecule has 4 fewer hydrogen atoms! If you want to compute any kind of energy difference between those two molecules, those hydrogens need to go somewhere, your reaction needs to be balanced.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3077#issuecomment-1812895975:315,energy,energy,315,https://psicode.org,https://github.com/psi4/psi4/issues/3077#issuecomment-1812895975,1,['energy'],['energy']
Energy Efficiency,"This sounds like in the same class as too many roots for basis. They tend to segfault (example below) so should certainly be handled better. ```; molecule water {; 0 1; O; H 1 1.07; H 1 1.07 2 109.5; symmetry cs; }. set basis sto-3g; set roots_per_irrep [8, 8]. G, wfn = gradient('eom-ccsd', return_wfn=True); ans = wfn.energy(); ```. The user has issued two contradictory requests -- basis set and nroots. And part of the trouble is that psi only knows they're contradictory well into the calculation (e.g., post-GS-CCSD). That complicates issuing a prompt and specific error. I agree that Susi's preferred behavior is most likely what the user wants -- keep the basis set contract and violate the nroots request. A few paths:. 1. Focus on segfault -> error msg first, as Jonathon has done and as eomcc should do. no contracts violated. compute time wasted.; 2. Reset nroots as needed. Change read_options descriptions to ""max roots sought; may be adjusted downwards for small basis sets"". nroots contract violated. could be troublesome for machine returned results since roots array length != nroots requested. good for throughput calcs & no compute time wasted. (resetting nroots may not be so easy if arrays are allocated based on option.); 3. Same as (2) but py-side it detects nroots change and throws a specialized error (like we do for convergence) with full output and completed wfn attached, so no compute or results lost. no contracts violated. automated runs can recover. Likely most of this should be moved to an issue.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2780#issuecomment-1322391885:320,energy,energy,320,https://psicode.org,https://github.com/psi4/psi4/pull/2780#issuecomment-1322391885,2,"['allocate', 'energy']","['allocated', 'energy']"
Energy Efficiency,"This works for me on the main trunk. Haven't tested beta4. -TDC. On Jun 14, 2013, at 1:10 PM, renh notifications@github.com wrote:. > Hi all,; > ; > I am trying Psi4 4.0.0-beta4 today, but encountered a problem when parsing input and fetching corresponding basis set info. Here is a sample input file,; > ; > #=======================; > #! sample input; > memory 500 mb; > ; > molecule test {; > Li 0.000 0.000 0.000; > }; > ; > set reference uhf; > set globals = {; > scf_type direct; > basis 6-31G; > e_convergence 10; > }; > ; > this_energy = energy('scf'); > #=======================; > ; > running with Psi 4.0.0-beta4 on Linux, compiled with intel composer xe 2013 (x86-64); > ; > The error message is: ; > #=======================; > Traceback (most recent call last):; > File """", line 36, in ; > File ""/home/ren/soft/Psi4/share/psi/python/driver.py"", line 526, in energy; > procedures['energy']lowername; > File ""/home/ren/soft/Psi4/share/psi/python/proc.py"", line 489, in run_scf; > scf_helper(name, **kwargs); > File ""/home/ren/soft/Psi4/share/psi/python/proc.py"", line 707, in scf_helper; > e_scf = PsiMod.scf(precallback, postcallback); > RuntimeError: sanity check failed! Gaussian94BasisSetParser::parser: Unable to find the basis set for LI; > file: /home/ren/soft/psi4.0b4/src/lib/libmints/basisset_parser.cc; > line: 339; > #=======================; > ; > Is it a but or am I wrong anywhere?; > I appreciate any help and suggestions,; > Hao; > ; > —; > Reply to this email directly or view it on GitHub. ## . Prof. T. Daniel Crawford; crawdad@vt.edu; 540-231-7760",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/7#issuecomment-19470461:546,energy,energy,546,https://psicode.org,https://github.com/psi4/psi4/issues/7#issuecomment-19470461,3,['energy'],['energy']
Energy Efficiency,Threaded external charge potential,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1946:18,charge,charge,18,https://psicode.org,https://github.com/psi4/psi4/pull/1946,1,['charge'],['charge']
Energy Efficiency,"Time to start working on the Psi4 1.0 release notes, #hype! Please read through and update as needed @psi4/p4manage. Loosely organized at the moment, feel free to re-do. These notes span from the Psi4 beta5 release to the official Psi4 1.0 release.; ## User improvements; - Created binary linux distribution of Psi4 for users through conda; - Automatic extrapolations at the driver layer: `energy('MP2/aug-cc-pv[D,T]Z')`,`optimize('SCF/cc-pV[D,T,Q]Z')`.; - New N-Body wrapper capable of computing non-CP, CP and VMFC energies and gradients. The `cp` wrapper has been deprecated and CP can now be called as an optional argument to an energy call: `energy('SCF/cc-pVDZ', bsse_type='CP')`.; - New cmake build system for developers; - More sophisticated user input for one-electron property analysis; - More user-friendly error checking: If the user specifies an unknown keyword, the program will print that this keyword is unknown and will suggest possible alternatives that are close in spelling; - Added code to output cube files for orbitals, densities, etc.; - Added automatic defaults for auxiliary basis sets; - Improvements to the reporting of SAPT summary information, and enhancements to obtain SAPT methods reported in doi: 10.1063/1.4867135.; - The `properties` call now has a uniform interface for SCF, DFT, MP2, CI, MCSCF methods; ## Infrastructure improvements; - The Wavefunction object is now returnable for all psi4 methods. This Wavefunction object can be passed to other codes or directly manipulated; - Driver has been refactored into a new recursive scheme (as opposed to the previous nested scheme) to better facilitate more complex calls; - The MOLDEN writer now accepts density matrices for writing natural orbitals; - Added command-line arguments -l to specify PSIDATADIR (for developers) and -s to specify location of scratch directories (overrides PSI_SCRATCH); - Internal upgrades to the direct product decomposition library, libdpd, especially regarding density fitting; - Al",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/367:390,energy,energy,390,https://psicode.org,https://github.com/psi4/psi4/issues/367,3,['energy'],['energy']
Energy Efficiency,"Timings test indicate that re-allocation cost is negligible. All these quantities are `n^2`, and a 5000 x 5000 matrix takes about 0.11 seconds to allocate on my laptop. That's nothing in comparison to the diagonalization time. I no longer see a barrier to merging this in.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2319#issuecomment-944352419:146,allocate,allocate,146,https://psicode.org,https://github.com/psi4/psi4/pull/2319#issuecomment-944352419,1,['allocate'],['allocate']
Energy Efficiency,"Title is kept general, but this is especially relevant for the newer DSD double hybrids. Issue made from short discussion in slacks. For example: http://onlinelibrary.wiley.com/doi/10.1002/jcc.23391/full ; Different functional compositions for the exchange, correlation, mp2 parts for (among others) -D2 and -D3BJ. The dashparam.py functionality cannot handle these multiple versions, but; `energy('dsd-pbepbe')`, `energy('dsd-pbepbe-d2') `or `energy('dsd-pbepbe-d3bj')` should provide the proposed parameters automatically. . A possible workaround is to define everything, including the e.g. the -D parameters, in the superfunctional object and either avoid the ""dash"" in the method name or avoid invoking the dashparam functionality for specific names.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/920:391,energy,energy,391,https://psicode.org,https://github.com/psi4/psi4/issues/920,3,['energy'],['energy']
Energy Efficiency,"To Jerome's point, I would agree that for UHF doing stability analysis; helps a lot. However, we have also seen cases when stability analysis; severely breaks spin symmetry and converges on the wrong (or mixed) spin; state instead of the lowest energy root of desired spin. So one should be; careful about this issue. Best wishes,. Alexander. On Thu, Jan 14, 2016 at 9:38 AM, Alexander Sokolov <; alexander.y.sokolov@gmail.com> wrote:. > I would add that lately we have seen a lot of problems with UHF and ROHF; > converging on a wrong state for open-shells in Psi4. Although new stability; > analysis code helps a lot in fixing some of the problems (for UHF), for; > many of these systems finding the lowest root is quite non-trivial and is; > accompanied by many SCF convergence issues, as well as symmetry-breaking; > issues (UHF). Things get a lot worse for transition metal compounds (even; > simple ones, like Fe(CO)5). The most helpful solution is to start with; > basis set projection from a small basis, but this strategy doesn't always; > work. Sometimes, combining stability analysis root search and basis set; > projection helps.; > ; > Indeed, other codes (particularly, MOLPRO) sometimes do better job in; > finding lowest-energy solutions for systems of this type. Usually, after; > investing some time, it is possible to find the necessary solution for; > these non-trivial cases with Psi4, but it may be worth investigating some; > of these systems for possible improvements in the code.; > ; > Best wishes,; > ; > Alexander.; > ; > On Thu, Jan 14, 2016 at 9:25 AM, jgonthier notifications@github.com; > wrote:; > ; > > @lothian https://github.com/lothian I guess these other codes are; > > using some other convergence accelerator than Psi4 ? I would not be; > > surprised if SOSCF with a core guess would converge on the right solution.; > > ; > > —; > > Reply to this email directly or view it on GitHub; > > https://github.com/psi4/psi4public/issues/211#issuecomment-171656770.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/211#issuecomment-171660919:245,energy,energy,245,https://psicode.org,https://github.com/psi4/psi4/issues/211#issuecomment-171660919,2,['energy'],['energy']
Energy Efficiency,"To answer your first question: `set guess read` does fix this problem. . I can not pass a wavefunction to a second scf call. ```; refscf, refwfn = energy('scf', return_wfn=True) ; energy('scf', ref_wfn=refwfn) ; ```. I get an error that scf_helper can not take a wavefunction. Not sure if this is what you wanted me to do. If I run two scf calls. ```; refscf, refwfn = energy('scf', return_wfn=True) ; energy('scf'); ```. This works fine. This has the same effect as set guess read, so I guess there is a check to see if a previous scf has ran. . So it seems that there is no problem with reading the orbitals, but passing them seems to be off.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/419#issuecomment-227802600:147,energy,energy,147,https://psicode.org,https://github.com/psi4/psi4/issues/419#issuecomment-227802600,4,['energy'],['energy']
Energy Efficiency,"To be fair, I don't understand big parts of nbody either - the whole factorial thing is a bit strange. Which is why if we'd like return an object containing all possible nbody x bsse_type results from the data calculated by the combination of bsse_type and return_total_data, it'd take me a lot of work to get there - and is probably not worth it before DDD is in. The problem with the link between `energy_body_dict` and the returned data is that it's copied to the results directly, and if the calculation cannot compute total energies, it only returns an intermediate. For most cases that's sort of OK (since the intermediate is 0), but in the case of counterpoise without calculating monomers in monomer basis, the intermediate is the interaction energy:. ```; 2CP = Etot,cp = E(AB)_AB - E(A)_AB - E(B)_AB + E(A)_A + E(B)_B; 2CP = Etot,cp = Eint,cp + monomer_energies; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2221#issuecomment-871913661:751,energy,energy,751,https://psicode.org,https://github.com/psi4/psi4/pull/2221#issuecomment-871913661,1,['energy'],['energy']
Energy Efficiency,"To confirm this explicitly:; * With the changes to method names, the energy docstring needs to be updated, as does the occ/dfocc manual page, which needed to be updated anyways. That is shifting to your responsibility in a future, but pre-1.4 PR.; * In another future PR of yours, QCDB will handle all spin-component quantities. At that time, we'll save singles contributions and spin components to `variables_`. For now, it's enough to remove the spin component globals in preparation for that and as part of the war on globals. We're losing many spin-component-related Psivars in the interim, but this is an acceptable loss. Also, will the future migration of spin-component treatment to QCDB mean `occ` no longer prints spin-component quantities? You implied that it would (""Going that far would necessitate rewriting the occ printing""). If so, then the correct solution to [the spin-redundancy problem](https://github.com/psi4/psi4/pull/1789#discussion_r373811576) is to eliminate the spin-component variables from `occ`. At that time, `occ`'s only use for spin-component scaled quantities is if spin scaling is being used in orbital optimization, which shouldn't require those variables anyways. We might as well get rid of them now, since the repeat typing will be gone before long.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1789#issuecomment-581142412:69,energy,energy,69,https://psicode.org,https://github.com/psi4/psi4/pull/1789#issuecomment-581142412,1,['energy'],['energy']
Energy Efficiency,"To give my 2 cents to the questions above:; - `freeze_core True` should be a best-effort solution, always freezing as much as possible, but ensuring there are valence electrons (ie. for Ca2+, [Ne] core is frozen instead of [Ar], while for Ca0, [Ar] is frozen; similarly for Ar- the whole [Ar] shell should be frozen). This one is charge aware. This option should never crash the code.; - `freeze_core N` where `N = [1,2,3...]` will always freeze the N-th previous full shell, ie for `N=1` the current behaviour in master. Validation error when no valence electrons remain, to avoid the non-helpful segfault in #1271.; - @JonathonMisiewicz's idea of per-atom frozen cores (or in my view even better: per-fragment frozen orbitals) is a good one, and I'd be keen to get that sorted, but it'd probably need changes to `molecule {}` or somewhere else.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1350#issuecomment-437594950:330,charge,charge,330,https://psicode.org,https://github.com/psi4/psi4/pull/1350#issuecomment-437594950,1,['charge'],['charge']
Energy Efficiency,"To give you the status: The traditional math detection libs that we have on the Autocmake [1] side are monolithic [2] and complex - for historical reasons and I am not happy with the code because it is hard to understand and modify and combine. My plan is to split those up into independent units which can be selected by the user (the user can be a programmer in another code). This effort has started [3] but is slow. So what I want to achieve is explicit over implicit, and simple and ""stupid"" and predictable rather than complex and powerful. My plan is to have one module for MKL, one for OpenBLAS, one for ACML, etc. Instead of a clever detection code which attempts a series of math library combinations, I want to delegate the choice to the user and split the code up. Ideas and contributions are always very welcome. [1] https://github.com/coderefinery/autocmake; [2] https://github.com/coderefinery/autocmake/blob/master/modules/math_libs.cmake; [3] https://github.com/coderefinery/autocmake/tree/master/modules/math",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/537#issuecomment-264418892:537,power,powerful,537,https://psicode.org,https://github.com/psi4/psi4/issues/537#issuecomment-264418892,1,['power'],['powerful']
Energy Efficiency,"To sum up the discussion so far:; * The original geometry was malformed. Not a Psi4 problem.; * We've noticed large changes in energy in the early iterations, with the malformed geometry and a SAD guess. Not a Psi4 problem. (See https://github.com/psi4/psi4/issues/2641#issuecomment-1192909620); * There's been some discussion over how appropriate custom setting DFT VV10 c parameters is. Not a Psi4 problem.; * It's still possible to cause A/EDIIS failure with a sufficiently non-physical Hamiltonian, whether due to DFT VV10 parameters or a compressed geometry. **This is a Psi4 problem.**. I'll see what I can do about the last one, but I suspect that my options will be very limited.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2641#issuecomment-1194129799:127,energy,energy,127,https://psicode.org,https://github.com/psi4/psi4/issues/2641#issuecomment-1194129799,1,['energy'],['energy']
Energy Efficiency,"To summarise, it seems that running DF-MP2/3-21G is a bad idea for these small systems. The value of the interaction energy one gets, even with `E_CONVERGENCE` and `D_CONVERGENCE` at 1.0e-12, differs in the 4th DP based on which `DF_FITTING_CONDITION` is used. This caused the change in the energy during this PR (`df_fitting_condition 1.0e-10 -> 1.0e-12`). The def2-svp basis set is not affected nearly as much, as its fitting basis is better suited for the purpose. Switching the basis set in the test and tightening the energy/density convergence criteria to 1e-10 passes agreement with 1e-12 reference to 8DP's.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1350#issuecomment-452840875:117,energy,energy,117,https://psicode.org,https://github.com/psi4/psi4/pull/1350#issuecomment-452840875,3,['energy'],['energy']
Energy Efficiency,"Tracked this down: `IMPORT` keyword is very specific to an export CI vector in an old format that is no longer supported, what you wanted was `DFILE` here so that it will read in the old D (or ""the"" current) CIVector. The `IMPORT` option and all associated content has been removed in an upcoming patch. The `DFILE` and `OPDM` options will now work as RSP will now write out CIVectors. Not entirely what was being read in, but it wasn't a real CIVector. Now, running this conventionally we still get an energy thats reasonable, but too high by about 5mH. This is apparently caused caused by the `EVANGELISTI` Hamiltonian diagonal approximation for some reason. We usually use this over the exact diagonal to avoid spin contamination, will try to look into this some. For now simply setting `HD_AVG HD_EXACT` will solve the above problems.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/175#issuecomment-217275131:503,energy,energy,503,https://psicode.org,https://github.com/psi4/psi4/issues/175#issuecomment-217275131,1,['energy'],['energy']
Energy Efficiency,"Transferred from the [forums](http://forum.psicode.org/t/sapt-dft-issues/1444). A user reports an SCF convergence failure during a SAPT(DFT) computation. While this _could_ be an example of a routine SCF convergence failure, the fact that it appears during SAPT(DFT) combined with how spectacular the convergence failure _is_ have me suspecting it's something more. When I run the user's input file on 1.3.2 release (see forum post), the failing SCF has iterations like this:; ```; @DF-RKS iter SAD: -2.88905500214392 -2.88906e+00 0.00000e+00 ; @DF-RKS iter 1: 0.79355642730661 3.68261e+00 8.89827e-02 DIIS ; @DF-RKS iter 2: -2.69913194172793 -3.49269e+00 1.70278e-02 DIIS ; @DF-RKS iter 3: 0.05174993763519 2.75088e+00 1.04154e-02 DIIS ; @DF-RKS iter 4: 4.56710002468099 4.51535e+00 8.67682e-02 DIIS ; @DF-RKS iter 5: 4.56708994805846 -1.00766e-05 8.67628e-02 DIIS ; @DF-RKS iter 6: 4.56706596773139 -2.39803e-05 8.67500e-02 DIIS; ```. The usual convergence tricks - playing with DIIS settings and damping - still leave a problem. Notice that iterations 1, 3, and 4 are terrible, going up in energy by _multiple Hartrees_ even after what should be a decent guess. The user reports that they are observing such problems for more complicated systems, but can reduce the problem to this two atom problem. You'd need to ask them to get the original systems, but this seems like a good starting point.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1684:1093,energy,energy,1093,https://psicode.org,https://github.com/psi4/psi4/issues/1684,2,"['energy', 'reduce']","['energy', 'reduce']"
Energy Efficiency,"Travis CI currently takes 2-6 (average 3) hours to complete depending on the current travis load, which is a bit on the long side. To help with this I am proposing that we reduce the number of build types from 15 to the following:; - Latest clang/gcc with both debug and release flags (4 cases); - Oldest supported clang/gcc with both debug and release flags (4 cases). It should be noted that travis CI typically runs the first 3-6 test cases immediately upon submission and then runs the rest in a general queue. The real time killer is when the 15th CI case does not start to run for 2-5 hours after initial submission. With the proposed changes we will hopefully be running through travis consistently in about an hour. . This will deteriorate our CI coverage a bit; however, I think this keeps with the CI spirit and should catch the corner cases that we really worry about. I am looking a bit into something like Docker in addition to Travis so that we can run a full test suite on a local box at the touch of a button. PS: Fiddling around with commits to practice squashing.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/237:172,reduce,reduce,172,https://psicode.org,https://github.com/psi4/psi4/pull/237,1,['reduce'],['reduce']
Energy Efficiency,"Trouble is nothing to do with Hessian (it's hanging at the preliminary energy calc) and everything to do with setting more than one thread. ```; (p4dev36) psilocaluser@bash:psinet:/home/psilocaluser/gits/hrw-qcdb/objdir-gnu36: ((detached from matt/SYMM_JK)) cat ../tests/psi4numpy/rhf-hessian/input.py ; # -*- coding: utf-8 -*- . import time; import numpy as np; np.set_printoptions(precision=15, linewidth=200, suppress=True); import psi4. #psi4.set_memory(int(1e9), False); #psi4.core.set_output_file('output.dat', False); psi4.core.set_num_threads(2). mol = psi4.geometry(""""""; O; H 1 1.1; H 1 1.1 2 104; symmetry c1; """"""). psi4.core.set_active_molecule(mol). options = {'BASIS':'STO-3G', 'SCF_TYPE':'PK',; 'E_CONVERGENCE':1e-10,; 'D_CONVERGENCE':1e-10; }. psi4.set_options(options). rhf_e, wfn = psi4.energy('SCF', return_wfn=True); ```. Debug traceback shows hang is in SAD guess at `DFHelper::contract_metric_AO_core_symm`. ```; (p4dev36) psilocaluser@bash:psinet:/home/psilocaluser/gits/hrw-qcdb/objdir-gnu36: ((detached from matt/SYMM_JK)) gdb --args python ../tests/psi4numpy/rhf-hessian/input.py ; GNU gdb (GDB) Red Hat Enterprise Linux 7.6.1-94.el7; Copyright (C) 2013 Free Software Foundation, Inc.; License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>; This is free software: you are free to change and redistribute it.; There is NO WARRANTY, to the extent permitted by law. Type ""show copying""; and ""show warranty"" for details.; This GDB was configured as ""x86_64-redhat-linux-gnu"".; For bug reporting instructions, please see:; <http://www.gnu.org/software/gdb/bugs/>...; Reading symbols from /home/psilocaluser/toolchainconda/envs/p4dev36/bin/python3.6...done.; (gdb) run; Starting program: /home/psilocaluser/toolchainconda/envs/p4dev36/bin/python ../tests/psi4numpy/rhf-hessian/input.py; [Thread debugging using libthread_db enabled]; Using host libthread_db library ""/lib64/libthread_db.so.1"".; Missing separate debuginfo for /home/psilocaluser/toolchaincond",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/961#issuecomment-384510030:71,energy,energy,71,https://psicode.org,https://github.com/psi4/psi4/pull/961#issuecomment-384510030,2,['energy'],['energy']
Energy Efficiency,"Try out the following:. ``` python; molecule mol {; He; He 1 3.0; symmetry c1; }. scf_e, scf_wfn = energy('SCF/sto-3g', return_wfn=True). scf_wfn.Da().print_out(); scf_wfn.basisset().print_detail_out(). # Accessors for Da; print scf_wfn.Da().get(0, 0) # Python to C++ accessor; print scf_wfn.Da().np # Numpy accessor; ```. Using `C1` so that we get the AO basis set, SO->AO transformations are pretty simple as well. You can also run python-based help on a BasisSet object (`help(scf_wfn.basisset())`) to get a better idea of how to access it. The docs are pretty limited, but hopefully the function names are somewhat self explanatory.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/504#issuecomment-260372655:99,energy,energy,99,https://psicode.org,https://github.com/psi4/psi4/issues/504#issuecomment-260372655,1,['energy'],['energy']
Energy Efficiency,"Try sticking a clean() between the two calcs. There were some reasons we didn’t want to force this but instead leave it to the user/programmer. See if that helps. Lori. > On May 5, 2015, at 11:58 AM, wpoely86 notifications@github.com wrote:; > ; > Input file:; > ; > import molutil; > ; > molecule h2o {; > 0 1; > O; > H 1 r; > H 1 r 2 104.479848; > units angstrom; > }; > ; > molecule beh2 {; > 0 1; > Be 0 0 0 ; > H 0 0 r; > H 0 0 -r; > units angstrom; > }; > ; > set basis sto-3g; > ; > beh2.r=1; > molutil.activate(beh2); > energy('fci'); > ; > h2o.r=1; > molutil.activate(h2o); > energy('fci'); > will calculate the FCI energy of the BeH2 molecule, then do the RHF of H2O but at start of the detci module it will give:; > ; > Traceback (most recent call last):; > File ""<string>"", line 40, in <module>; > File ""/home/ward/opt/share/psi/python/driver.py"", line 576, in energy; > procedures['energy'][lowername](lowername, **kwargs); > File ""/home/ward/opt/share/psi/python/proc.py"", line 1975, in run_detci; > psi4.detci(); > RuntimeError: (matrix_element): nalp/nbet != init_nalp/nbet; > Seems like something should be reinitialized after activating a new molecule. Done with 521f06a https://github.com/psi4/psi4public/commit/521f06adb441ac1e2f1732eb1cd090190b409c49.; > ; > —; > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4public/issues/92.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/92#issuecomment-99127921:528,energy,energy,528,https://psicode.org,https://github.com/psi4/psi4/issues/92#issuecomment-99127921,5,['energy'],['energy']
Energy Efficiency,"Trying out the SCF plugin with the current master branch I get the error; ```; $ psi4 h2o.in; Traceback (most recent call last):; File ""/home/work/psi4/install/bin/psi4"", line 387, in <module>; exec(content); File ""<string>"", line 26, in <module>; File ""/home/work/psi4/install/lib/psi4/driver/driver.py"", line 519, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/work/openorbital/openorbital/psi4/scf/myplugin/pymodule.py"", line 60, in run_myplugin; psi4.set_scalar_variable('CURRENT ENERGY', myplugin_wfn.energy()). AttributeError: module 'psi4' has no attribute 'set_scalar_variable'. Printing out the relevant lines from the Psithon --> Python processed input file:; H 0.866811766153153 0.601435735686679 0.000000000000000; H -0.866811766153153 0.601435735686679 0.000000000000000; """"""); core.IO.set_default_namespace(""""); core.set_global_option(""BASIS"", ""pcseg-1""); --> energy('myplugin'). !-------------------------------------------------------!; ! !; ! module 'psi4' has no attribute 'set_scalar_variable' !; ! !; !-------------------------------------------------------!. Segmentation fault (core dumped); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3093:319,energy,energy,319,https://psicode.org,https://github.com/psi4/psi4/issues/3093,5,"['ENERGY', 'energy']","['ENERGY', 'energy']"
Energy Efficiency,"Trying to debug why #1429 is failing, I realized that ```dfmp2-ecp``` is broken also in master. Namely, if you change the guess to ```core```, the output shows; ```; ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. Occupation by irrep:; A1 A2 B1 B2 ; DOCC [ 9, 1, 4, 4 ]. @DF-RHF iter 1: -308.91202925462852 -3.08912e+02 3.76534e-01 ; Occupation by irrep:; A1 A2 B1 B2 ; DOCC [ 8, 2, 4, 4 ]. @DF-RHF iter 2: -50.26696275258255 2.58645e+02 1.14194e-01 DIIS; @DF-RHF iter 3: -312.20691537679136 -2.61940e+02 3.74738e-01 DIIS; @DF-RHF iter 4: -312.28132654669946 -7.44112e-02 3.74788e-01 DIIS; @DF-RHF iter 5: -312.28135900254506 -3.24558e-05 3.74789e-01 DIIS; @DF-RHF iter 6: -312.69660060629286 -4.15242e-01 3.74879e-01 DIIS; @DF-RHF iter 7: -314.97714389188246 -2.28054e+00 3.75872e-01 DIIS; @DF-RHF iter 8: -315.30129310258837 -3.24149e-01 3.76020e-01 DIIS; @DF-RHF iter 9: -315.76973734256387 -4.68444e-01 3.76541e-01 DIIS; @DF-RHF iter 10: -314.13107099910633 1.63867e+00 3.75335e-01 DIIS; @DF-RHF iter 11: -314.88897775403694 -7.57907e-01 3.75895e-01 DIIS; @DF-RHF iter 12: -312.91138860100165 1.97759e+00 3.74941e-01 DIIS; @DF-RHF iter 13: -313.42095297268111 -5.09564e-01 3.75328e-01 DIIS; @DF-RHF iter 14: -314.00208386703940 -5.81131e-01 3.74845e-01 DIIS; @DF-RHF iter 15: -313.82934050347035 1.72743e-01 3.74976e-01 DIIS; @DF-RHF iter 16: -315.89990741359236 -2.07057e+00 3.76160e-01 DIIS; @DF-RHF iter 17: -313.12609734973461 2.77381e+00 3.74988e-01 DIIS; @DF-RHF iter 18: -312.92378783647285 2.02310e-01 3.74498e-01 DIIS; @DF-RHF iter 19: -317.24645796226451 -4.32267e+00 3.77492e-01 DIIS; @DF-RHF iter 20: -317.60418344797176 -3.57725e-01 3.78088e-01 DIIS; @DF-RHF iter 21: -316.25416490484400 1.35002e+00 3.76492e-01 DIIS; @DF-RHF iter 22: -315.51131292261630 7.42852e-01 3.75711e-01 DIIS; @DF-RHF iter 23: -315.37233230819385 1.38981e-01 3.75579e-01 DIIS; @DF-RHF iter 24: -315.37427315424492 -1.94085e-03 3.75585e-01 DIIS; @DF-RHF iter 25: -315.36730485039720 6.96830e-03 3.75579e-",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1433:192,Energy,Energy,192,https://psicode.org,https://github.com/psi4/psi4/issues/1433,1,['Energy'],['Energy']
Energy Efficiency,"Turns out the PCM polarisation energy was way too large when using ghost atoms. I compared with what ORCA gives and I found I had to change back to 'ghost atoms' here: https://github.com/psi4/psi4/pull/1977/files#diff-acd2a9822c706c971498ea1a2669bb7eR175; Didn't try to reproduce ORCA exactly (not sure what PCM settings are needed in detail, if possible at all), but it looks similar enough. @robertodr, can you have another look? static casting for the int<->double conversion OK for visibility?; Are there similar cases inside pcmsolver where one needs to differentiate between cavity-building-atoms and charge-carrying atoms?. I also manually checked the PEDRA outputs and the ghost atom-system uses the correct dimer-sized cavity.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1977#issuecomment-671224246:31,energy,energy,31,https://psicode.org,https://github.com/psi4/psi4/pull/1977#issuecomment-671224246,2,"['charge', 'energy']","['charge-carrying', 'energy']"
Energy Efficiency,"UHF iter 1: -2.83568840083719 -7.04164e-06 9.00011e-05 DIIS; @DF-UHF iter 2: -2.83568849893678 -9.80996e-08 1.09058e-05 DIIS; @DF-UHF iter 3: -2.83568850042063 -1.48385e-09 4.55093e-08 DIIS; @DF-UHF iter 4: -2.83568850042064 -1.28786e-14 1.52740e-10 DIIS; @DF-UHF iter 5: -2.83568850042064 -8.88178e-16 9.96306e-12 DIIS; @DF-UHF iter 6: -2.83568850042064 2.22045e-15 2.48440e-16 DIIS; Energy and wave function converged. ==> Post-Iterations <==. @Spin Contamination Metric: 4.440892099E-16; @S^2 Expected: 0.000000000E+00; @S^2 Observed: 4.440892099E-16; @S Expected: 0.000000000E+00; @S Observed: 0.000000000E+00. Orbital Energies [Eh]; ---------------------. Alpha Occupied: . 1A -0.903583 . Alpha Virtual: . 2A 0.556192 3A 2.081751 4A 5.330969 . Beta Occupied: . 1A -0.903583 . Beta Virtual: . 2A 0.556192 3A 2.081751 4A 5.330969 . Final Occupation by Irrep:; A ; DOCC [ 1 ]; SOCC [ 0 ]. @DF-UHF Final Energy: -2.83568850042064. => Energetics <=. Nuclear Repulsion Energy = 0.0000000000000000; One-Electron Energy = -3.8642104942204210; Two-Electron Energy = 1.0285219937997820; Total Energy = -2.8356885004206389. UHF NO Occupations:; HONO-0 : 1 A 2.0000000; LUNO+0 : 2 A 0.0000000; LUNO+1 : 3 A 0.0000000; LUNO+2 : 4 A 0.0000000. Computation Completed. //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//; // SCF //; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<//. => Loading Basis Set <=. Name: JUN-CC-PVDZ; Role: ORBITAL; Keyword: BASIS; atoms 1-2 entry HE line 46 file /home/filip/software/psi4-1.4rc-opt/share/psi4/basis/jun-cc-pvdz.gbs . ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith; UHF Reference; 1 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c1; Full point group: C_inf_v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; HE 0.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1706#issuecomment-524633282:5011,Energy,Energy,5011,https://psicode.org,https://github.com/psi4/psi4/pull/1706#issuecomment-524633282,1,['Energy'],['Energy']
Energy Efficiency,"Unfortunately for diagnosis, everything looks pretty much as it ought. I might need to bump min glibc from 2.7-->2.11, but you should still be ok with 2.12. I just tried out the installer on a RHEL 6.7 system (6.6 == rocks 6.2 on my chart) with glibc 2.12, and it worked fine. Not sure how to go about debugging this remotely. Psi4 folks, if any of you have a Rocks sys I can log into, please let me know. I'll be back in Atlanta Monday. In the meantime, please (1) try `conda remove v2rdm_casscf` and (2) (from your miniconda3 dir). ```; >>> which conda python psi4; >>> gdb --args python psi4 share/psi4/samples/tu1-h2o-energy/test.in; (gdb) run; ...; SegFault; (gdb) bt; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1088#issuecomment-404386592:622,energy,energy,622,https://psicode.org,https://github.com/psi4/psi4/issues/1088#issuecomment-404386592,1,['energy'],['energy']
Energy Efficiency,Unfortunately the DETCI code is primarily meant to do highly-correlated CI computations like Full CI. It is not super-efficient for CISD and can't handle systems this big.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/62#issuecomment-122011825:118,efficient,efficient,118,https://psicode.org,https://github.com/psi4/psi4/issues/62#issuecomment-122011825,1,['efficient'],['efficient']
Energy Efficiency,Unit inconsistency with QMMM charges,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1881:29,charge,charges,29,https://psicode.org,https://github.com/psi4/psi4/issues/1881,1,['charge'],['charges']
Energy Efficiency,"Update the SAPT output to conform with the recommendations of our systematic study in ``Levels of Symmetry Adapted Perturbation Theory (SAPT). I. Efficiency and Performance for Interaction Energies,'' T. M. Parker, L. A. Burns, R. M. Parrish, A. G. Ryno, and C. D. Sherrill, J. Chem. Phys. 140, 094106 (2014) [doi: 10.1063/1.4867135 ]",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/37:107,Adapt,Adapted,107,https://psicode.org,https://github.com/psi4/psi4/issues/37,1,['Adapt'],['Adapted']
Energy Efficiency,"Using psi4-1.4rc1, I was able to compute `MBIS_CHARGES` via QCEngine however after PR #2127 this now fails with the following error message. While this definitely needs fixing I think it might also be nice to have the option to turn off this feature and only calculate the ratio if passed as an scf property?; ```; RuntimeError: ; Fatal Error: Wavefunction::scalar_variable: Requested variable MBIS FREE ATOM O VOLUME was not set!; Error occurred in file: /Users/github/builds/conda-builds/psi4-multiout_1628080613326/work/psi4/src/psi4/libmints/wavefunction.cc on line: 1335; ```. MWE ; ```python; import qcelemental as qcel; from qcelemental.models import molecule; import qcengine as qcng. mol = qcel.models.Molecule.from_data(""""""; O 0.0 0.000 -0.129; H 0.0 -1.494 1.027; H 0.0 1.494 1.027; """"""). # build the mbis task; model = qcel.models.AtomicInput(; molecule=mol,; driver=""energy"",; model={""method"": ""SCF"", ""basis"": ""sto-3g""},; keywords={""scf_properties"": [""MBIS_CHARGES""]}; ). result = qcng.compute(model, ""psi4""). print(result.dict()); ```; versions; psi4-1.4+9485035 ; qcengine-0.19.0; qcelemental -0.21.0",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2272:880,energy,energy,880,https://psicode.org,https://github.com/psi4/psi4/issues/2272,1,['energy'],['energy']
Energy Efficiency,"Using version 1.2-rc2 from conda psi4/label/dev (and also several previous versions):. The following input crashes with a `RuntimeError: Fatal Error: Not enough memory` (logfile [attached](https://github.com/psi4/psi4/files/2000688/sapt0.txt)):. ```; molecule dimer {; 0 1; HE -3.175580423325 -0.517569032036 0.000000000000; --; 0 1; C -0.047607579372 0.489078465367 0.000000000000; O -0.621270272014 1.491611955637 0.000000000000; S 0.726228977971 -0.864990071157 0.000000000000. no_reorient; no_com; }. memory 20 Gb. dimer.update_geometry(); energy(""sapt0/jun-cc-pvdz"", molecule=dimer); ``` . When the He atom in the above is changed to, say, Ne, the calculation runs fine.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1018:544,energy,energy,544,https://psicode.org,https://github.com/psi4/psi4/issues/1018,1,['energy'],['energy']
Energy Efficiency,"V); 	13 A state: 1.1992474 (a.u.), 32.6331833 (eV); 	14 A state: 1.2585194 (a.u.), 34.2460572 (eV); 	15 A state: 1.2767037 (a.u.), 34.7408785 (eV); 	16 A state: 1.2815731 (a.u.), 34.8733809 (eV); 	17 A state: 1.3132971 (a.u.), 35.7366340 (eV); 	18 A state: 1.3296420 (a.u.), 36.1814011 (eV); 	19 A state: 1.3540510 (a.u.), 36.8456048 (eV); 	20 A state: 1.3585131 (a.u.), 36.9670246 (eV); ```. ### **QChem 5.1.1 energies output**; ```; Excitation energy: 9.604199 eV; Excitation energy: 11.471817 eV; Excitation energy: 12.351230 eV; Excitation energy: 14.275101 eV; Excitation energy: 15.537288 eV; Excitation energy: 19.185085 eV; Excitation energy: 28.691037 eV; Excitation energy: 29.170632 eV; Excitation energy: 30.989051 eV; Excitation energy: 32.166632 eV; Excitation energy: 32.314728 eV; Excitation energy: 32.606197 eV; Excitation energy: 32.633181 eV; Excitation energy: 34.246055 eV; Excitation energy: 34.740876 eV; Excitation energy: 34.873378 eV; Excitation energy: 35.736631 eV; Excitation energy: 36.181398 eV; Excitation energy: 36.845602 eV; Excitation energy: 36.967022 eV; ```. Running the ADC(2) test in both programs showed some slight deviation in energies, but nothing alarming.; ### **QChem 5.1.1 - adc(2) test energies**; ```; Excitation energy: 6.951866 eV; Excitation energy: 6.951866 eV; ```. ### **Psi4 1.3.2 -- adc(2) test energies**; ```; ->	1 A state : 0.2557608 (a.u.), 6.9596066 (eV); Non-iterative: 0.2559128 (a.u.), 6.9637417 (eV); ->	2 A state : 0.2557608 (a.u.), 6.9596066 (eV); Non-iterative: 0.2559128 (a.u.), 6.9637417 (eV); ```. Further, we set up calculations for the systems in [this work](https://aip.scitation.org/doi/10.1063/1.1504708). Please find the calculations for HF and N2 below; I am happy to provide data on the other systems if needed.; Basis set & geometry information for HF and N2 were found in [this work](https://aip.scitation.org/doi/abs/10.1063/1.1386415). ### **HF**; For ADC(1) results, we continue to see no remarkable error. In the",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1033#issuecomment-510952344:2097,energy,energy,2097,https://psicode.org,https://github.com/psi4/psi4/issues/1033#issuecomment-510952344,1,['energy'],['energy']
Energy Efficiency,"Very easily. ```; wfn, grad = psi4.gradient(method, return_wfn=True); en = wfn.variable(""CURRENT ENERGY""); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2878#issuecomment-1435413211:97,ENERGY,ENERGY,97,https://psicode.org,https://github.com/psi4/psi4/issues/2878#issuecomment-1435413211,1,['ENERGY'],['ENERGY']
Energy Efficiency,"Very happy to see this, it will be a nice addition!. Maybe @andysim and/or @robertodr can check some of the external potential; handling stuff. My group and I will look into some of the subtleties of FSAPT and ISAPT ...; off the top of my head, I think there may be some additional places; (induction) where the external potential needs to go. Maybe also the; dressing on the two-electron integrals. Best,; David. On Fri, Apr 26, 2019 at 11:29 AM chapincavender <notifications@github.com>; wrote:. > Description; >; > Include external potentials in the FISAPT module; > Todos; >; > Notable points (developer or user-interest) that this PR has or will; > accomplish.; >; > - Add interaction of external potential with nuclei to nuclear; > repulsion; > - Add interaction of external potential with basis functions to; > one-electron Hamiltonian for SCF calculations and calculation of HF; > interaction energy; > - Fixed minor typo in proc_util.py; >; > Questions; >; > - I added a method to the Wavefunction class to access the protected; > external_pot_ object. Was there some other way I could have accessed this; > object?; > - Adding the external potential directly to the one-electron potential; > matrices for each fragment leads to this potential being double-counted in; > some terms used to calculate the HF interaction energy. So I stored the; > external potential as an additional matrix, matrices_[""VE""], that is then; > added to the one-electron potential for the monomer SCF calculations and; > the HF term. Is there a better way to handle this problem that doesn't; > require storing an additional matrix?; > - I compared total SAPT0 energy for a 2-fragment F-SAPT calculation to; > the SAPT module. Is there a good way to check a 3-fragment I-SAPT energy; > with the SAPT module?; >; > Checklist; >; > - For a 2-fragment system, total SAPT0 energies with and without an; > external potential in FISAPT module agree with SAPT module; > - For a 3-fragment system, total SAPT0 energies wit",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1608#issuecomment-487221275:901,energy,energy,901,https://psicode.org,https://github.com/psi4/psi4/pull/1608#issuecomment-487221275,1,['energy'],['energy']
Energy Efficiency,"Very impressive work... I'm happy SAPT(DFT) is done. I don't have time to check the details of the equations but I'm confident you did it right. I didn't see any problems after a quick overview of the SAPT code, at least. Is there a specific reason why you chose to rewrite the SAPT JK energy terms (electrostatic, exchange, induction) in Python instead of having a new function call on the C++ side like you did for dispersion ?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/698#issuecomment-300589507:286,energy,energy,286,https://psicode.org,https://github.com/psi4/psi4/pull/698#issuecomment-300589507,1,['energy'],['energy']
Energy Efficiency,"Wait, what? Then how is Incremental Fock build set to energy tolerance on the order of 1e-9 giving you errors on the order of 1e-7?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2155#issuecomment-821209195:54,energy,energy,54,https://psicode.org,https://github.com/psi4/psi4/pull/2155#issuecomment-821209195,1,['energy'],['energy']
Energy Efficiency,"We can argue about whether the `dfmp2-ecp` test was or wasn't broken before PR #1350 was made, but the following point remains:. - the original part of the test is not touched by this PR, and by looking at `git blame` for the `input.dat` file, hasn't been touched in quite some time.; - as part of this PR, i have added a completely new section of tests, that are Kr--Kr interaction energies with DF-MP2/3-21G (no ECP's).; - a previous version of this PR, from around 2019-01-04, passed both the new and the old test.; - a later version of this PR, from until and excluding 2019-01-09, did not pass the new part of the test, but still passed the old test; - the current version of this PR has modified the new part of the test, after rebasing from master; it passes both the old test and the new test to 7 DP (I need to tighten convergence on the energy to pass it to 8 DP). A good diff to look at the issue is here:; https://github.com/psi4/psi4/pull/1350/commits/9e6329abb493ed79dbb6913ac4c1df957e9839ae#diff-32d6050d16bb770a64f7f94a67f26101; which compares the `output.ref` of the test for the version that passed on 2019-01-04 when the test was originally written, and passes the test now (locally) on 2019-01-09 with updated values. The puzzling thing is: what caused the change of the Kr--Kr interaction energies (and Kr MP2/3-21G energies converged to 1e-9)? What change would cause that, but not affect the first part of the test?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1350#issuecomment-452682935:847,energy,energy,847,https://psicode.org,https://github.com/psi4/psi4/pull/1350#issuecomment-452682935,1,['energy'],['energy']
Energy Efficiency,"We have an [example](http://forum.psicode.org/t/adiis-minimization-failed-file-a-bug/2524/4) of an ADIIS failure. Based on how _early_ minimization is failing, this looks like something other than numerical finickiness of the underlying numpy algorithm. The ADIIS problem is either 1-by-1 or 2-by-2 (I'd need to check which), and surely we can handle a 2D constrained optimization. ```; memory 5 gb. molecule dimer {; O -2.37598501 -5.25644515 4.84543259; H -2.38171765 -4.38257907 4.44628561; H -2.48821382 -4.94837176 5.80344789; --; @Br 2.24215713 -6.77867982 5.71107037; @Br 0.05511550 -6.05660413 5.30313985; units angstrom; }. set {; basis aug-cc-pvdz; scf_type pk ; sapt_dft_grac_shift_a 0.05731; sapt_dft_grac_shift_b 0.01680; SAPT_DFT_FUNCTIONAL REVSCAN; }. energy('revscan'); ```. ```; ==> Pre-Iterations <==. SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF (no occupation information). -------------------------; Irrep Nso Nmo; -------------------------; A 113 113; -------------------------; Total 113 113; -------------------------. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @RKS iter SAD: -76.04124004396280 -7.60412e+01 0.00000e+00. Traceback (most recent call last):; File ""/Users/jonathonmisiewicz/psi4/objdir/stage/bin//psi4"", line 338, in <module>; exec(content); File ""<string>"", line 35, in <module>; File ""/Users/jonathonmisiewicz/psi4/objdir/stage/lib/psi4/driver/driver.py"", line 501, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/jonathonmisiewicz/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 2455, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/Users/jonathonmisiewicz/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 1670, in scf_helper; e_scf = scf_wfn.compute_energy(); File ""/Users/jonathonmisiewicz/psi4/objdir/stage/lib/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 86, in scf_compute_energy; self.iterations(); F",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2609:767,energy,energy,767,https://psicode.org,https://github.com/psi4/psi4/issues/2609,1,['energy'],['energy']
Energy Efficiency,"We have discussed this previous, but didnt find a clean way to do it. In 1.2 we have the ability to write/read Wavefunctions from disk. Would it be sufficient if you could do the following:. ```; scf_e, scf_wfn = psi4.energy(""SCF/cc-pVDZ"", return_wfn=True); scf_wfn.to_file(""my_wave.npz""); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/646#issuecomment-285695742:218,energy,energy,218,https://psicode.org,https://github.com/psi4/psi4/issues/646#issuecomment-285695742,1,['energy'],['energy']
Energy Efficiency,"We have not coded explicitly the spin-adapted triplet states arising from; the EOM-CC equations starting from a singlet ground state. However, you; might be able to obtain the desired states by changing your reference to; UHF and still selecting a multiplicity of 1. The Hartree-Fock reference; should still be the same singlet state as you get from the corresponding; RHF calculation, and the EOM-CC _should_ yield both singlets and triplets.; You'll be able to sort out which is which (and make sure that everything is; running correctly) by comparing the results to the corresponding RHF-EOM-CC; calculation. -TDC. ## . Prof. T. Daniel Crawford; crawdad@vt.edu. On Sun, Nov 20, 2016 at 8:51 PM, lucamontana notifications@github.com; wrote:. > one further question :; > ; > i like to calculate the eom-ccsd triplet states starting from the; > Hartree-Fock singlet ground state.; > However i do not manage to set up an input file for such calculation.; > ; > with multiplicity 3, PSI4 starts from a triplet ground state that i do not; > want.; > Any idea how to start from the HF singlet state but calculate triplet; > excited state energies in eom-CCSD?; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/issues/523#issuecomment-261824508, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/ACtz7VgMGDHWFRa604RIVjYHaS0a3kseks5rAPk-gaJpZM4K3iYW; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/523#issuecomment-261831203:38,adapt,adapted,38,https://psicode.org,https://github.com/psi4/psi4/issues/523#issuecomment-261831203,1,['adapt'],['adapted']
Energy Efficiency,"We need _many_ more details. * What version of Psi4 are you using?; * When you say ""gradient for the point charges,"" do you mean derivative of the energy with respect to nuclear displacements i.e. geometry changes? This is needed for geometry optimizations and frequencies.; * What electronic structure method are you using? Is this some SCF?; * When you say ""failed to find"" do you mean that the gradient was the same with and without the point charges, or just that you can't find a section in the gradient breakdown labeled ""external potentials"" or ""point charges"".; * How are you creating the point charges? A simple input file that displays the problem would be helpful.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2244#issuecomment-879071662:107,charge,charges,107,https://psicode.org,https://github.com/psi4/psi4/issues/2244#issuecomment-879071662,5,"['charge', 'energy']","['charges', 'energy']"
Energy Efficiency,"We need the correlated procedure to run CASSCF and may adapt the code to use DF once the new Deriv code is available. In putting together this PR, my intention was to make very limited changes and only improve the functionality of the current code. Since I am not sure what plugins do, I just reproduced the old functionality as it was before. I'd be happy to delete some of the legacy code if we are certain it is not used.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1756#issuecomment-557580614:55,adapt,adapt,55,https://psicode.org,https://github.com/psi4/psi4/pull/1756#issuecomment-557580614,1,['adapt'],['adapt']
Energy Efficiency,"We now have [a reproducible example of the problem](http://forum.psicode.org/t/fatal-error-a-matrix-is-not-spd/1471/4?u=jmisiewicz)! As @jgonthier suspected, this indicates a negative eigenvalue in the orbital hessian. The following input will run into the problem. Stability analysis indicates a tiny negative eigenvalue in the MO hessian. When you follow the instability, SAPT completes with no problems. The error message should be rewritten to suggest the user adds stability following. If we want to collect pathological test cases for future SCF work, we should also recommend they post their failing inputs on the forums. ```; molecule {; 0 1; C -1.39179 -0.20044 0.00015; Cl -0.43716 1.29883 0.00009; F -1.08662 -0.91763 1.08111; F -1.08730 -0.91729 -1.08123; H -2.44780 0.05805 0.00053; --; 0 2; Cl 2.22327 -0.26007 -0.00012; }. set {; basis 6-311++G**; reference uhf; soscf true; soscf_max_iter 30; }. energy('sapt0'); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1682#issuecomment-532191893:912,energy,energy,912,https://psicode.org,https://github.com/psi4/psi4/issues/1682#issuecomment-532191893,1,['energy'],['energy']
Energy Efficiency,"We saw some `!restricted` in src/bin/dfmp2/corr_grad.cc and were hopeful. Were we mistaken or was it not finished or not tested, or what’s the status. Anyway ok, can re-route through Ugur’s code. Lori. > On Jul 13, 2015, at 6:32 PM, Rob Parrish notifications@github.com wrote:; > ; > No UHF-MP2 gradients in my code. Sorry.; > ; > -Rob; > ; > On Mon, Jul 13, 2015 at 3:30 PM, Lori A. Burns <notifications@github.com <mailto:notifications@github.com>>; > wrote:; > ; > > for df-mp2, these are the cases:; > > uhf energy: good, this is is Rob's code (we're pretty sure; test); > > rohf energy: we think this may be in Rob's code, but not verified vs other; > > codes; > > uhf grad: we think this may be in Rob's code, but not verified vs other; > > codes; > > rohf grad: no good. Ugur doesn't support rohf scf being fed into his omp2; > > w/o subsequent opt; > > ; > > ticket task: verify the above with the code and with the authors. if; > > needed, re-route in driver (see mp2_type as example in proc.py. If; > > anything looks to hard or want to defer, create a new ticket for it, and do; > > all you can to close out this one.; > > ; > > —; > > Reply to this email directly or view it on GitHub; > > <https://github.com/psi4/psi4public/issues/107 <https://github.com/psi4/psi4public/issues/107>>.; > > ; > > —; > > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4public/issues/107#issuecomment-121080590.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/107#issuecomment-121081025:512,energy,energy,512,https://psicode.org,https://github.com/psi4/psi4/issues/107#issuecomment-121081025,2,['energy'],['energy']
Energy Efficiency,"We're being a little more explicit about information-passing, and that influences oeprop. Change your ending lines to the below and all should be well. I'd say look at the installed samples, but I just remembered those didn't get updated until `0.4.3` or so, and our conda build machine is kaput so I can't update them for you. Sorry about that. I'll look into that SAPT install problem. ```; Eqm, wfn = energy('PBE0', return_wfn=True); print('Energy: '+`Eqm`); oeprop(wfn, 'MULLIKEN_CHARGES'); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/240#issuecomment-182667180:404,energy,energy,404,https://psicode.org,https://github.com/psi4/psi4/issues/240#issuecomment-182667180,2,"['Energy', 'energy']","['Energy', 'energy']"
Energy Efficiency,"We're going to go with no change here, and people will have to do the below to get df-omp3. Can revisit as density-fitting for >mp2 becomes more generally accepted and as other modules include more df algorithms alongside conv. ```; set mp_type df; energy('omp3'); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/279#issuecomment-212039726:249,energy,energy,249,https://psicode.org,https://github.com/psi4/psi4/issues/279#issuecomment-212039726,1,['energy'],['energy']
Energy Efficiency,"Welcome to psi4 and thanks for the PR. Could you add a regression test with your example? http://psicode.org/psi4manual/master/add_tests.html; E.g. a third `extern` version would do. If anything is unclear, please ask here or join us on slacks. edit: I forgot. Please rebase your fork to fix the CI. ---. I am wondering. In principle `mol.set_nuclear_charge(0,7.05)` should work to modify Z. However, the C molecule object doesn't get the changes only the python one. ```; molecule mol {; N 0. 0. 1.; N 0. 0. 0.; no_reorient; no_com; symmetry c1; 0 1; }. set basis 6-31G; set reference rhf. mol.set_nuclear_charge(0,7.05); print(mol.Z(0),mol.Z(1)); nn = mol.nuclear_repulsion_energy(); mol.update_geometry(); e, wfn = energy('scf',return_wfn=True); print(nn); print(wfn.variable('NUCLEAR REPULSION ENERGY')); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1993#issuecomment-682369777:718,energy,energy,718,https://psicode.org,https://github.com/psi4/psi4/pull/1993#issuecomment-682369777,2,"['ENERGY', 'energy']","['ENERGY', 'energy']"
Energy Efficiency,"Well the ""-3c""s are not in dashparam. And for adding new entries to dashparam it will be somewhat clear if psi4 has the functional or not (Why else add it). So maybe a cookbook recipe is all that is needed. ```; from psi4.driver.qcdb.dashparam import get_dispersion_aliases; from psi4.driver.qcdb.dashparam import dashcoeff; from psi4.driver.procrouting.dft_funcs import dict_builder. for dtype in dashcoeff.keys():; for func in dashcoeff[dtype]:; check=func in psi4.driver.procedures['energy']; if check == False:; alt= find_approximate_string_matches(func,dict_builder.dict_functionals,3); print(dtype, func.upper(), ""not found! maybe? :"",alt); ```. Above is already quite nice, showing potential fitting names.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/996#issuecomment-385938130:486,energy,energy,486,https://psicode.org,https://github.com/psi4/psi4/issues/996#issuecomment-385938130,1,['energy'],['energy']
Energy Efficiency,"Well, I needed to add a commit so that the code compiles, so I also made sure the `Ind20,u` Psivars are filled up whenever Ind20,u is available (i.e. always except in the closed-shell SAPT0 code). Also, I added all the energy components Psivars in the FISAPT code. Once the tests are done I'll commit.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/908#issuecomment-364640527:219,energy,energy,219,https://psicode.org,https://github.com/psi4/psi4/pull/908#issuecomment-364640527,1,['energy'],['energy']
Energy Efficiency,"Well, good news is that the functional and the psi version are irrelevant. It's purely a particular geometry that you hit that's confusing the symmetry detection. And only when not shifted to center-of-mass. Never seen that error before, so will definitely investigate. Below is minimal example. BTW, `1.2a1.dev600` is still 300-400 commits behind master, due to my conda negligence. If I can get #946 in, I'll have a minimal _new_ conda build on the `-c psi4/label/agg` subchannel that actually uses the `-ng`/gcc72 compilers. ```; molecule MOL {; 1 1; nocom # toggle for disaster; C 0.000000000445 -0.000000002634 -0.176009819382; C 0.017055492504 1.213674219316 0.519005187104; C 0.010905297833 1.207533611621 1.904879649273; C 0.000000001371 -0.000000001015 2.595491320593; C -0.010905296809 -1.207533610178 1.904879653967; C -0.017055492743 -1.213674218642 0.519005186244; C 0.000000000685 -0.000000001418 -1.643506768663; H -0.011074063554 2.157895826255 -0.014254560550; H 0.006037200834 2.144998257605 2.447030976059; H 0.000000002397 0.000000004130 3.679031777447; H -0.006037200687 -2.144998259786 2.447030974663; H 0.011074059226 -2.157895829902 -0.014254553860; N -0.738518375832 -0.879256115198 -2.298061241871; N 0.738518376065 0.879256115454 -2.298061238276; H 0.714314308196 0.973365270982 -3.302615035270; H 1.398512102453 1.450008704958 -1.792988230964; H -1.398512105220 -1.450008704099 -1.792988237236; H -0.714314307164 -0.973365267449 -3.302615039280. }. energy = energy('B3lyp/cc-pvdz'); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/948#issuecomment-379332937:1477,energy,energy,1477,https://psicode.org,https://github.com/psi4/psi4/issues/948#issuecomment-379332937,2,['energy'],['energy']
Energy Efficiency,"Well, it still fails for triplet helium, which is a case that is perfectly physical!; ```; molecule {; 0 3; He; }. set basis cc-pVTZ; set reference uhf; energy('mp2'); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1995#issuecomment-682069520:153,energy,energy,153,https://psicode.org,https://github.com/psi4/psi4/issues/1995#issuecomment-682069520,1,['energy'],['energy']
Energy Efficiency,"Well, the B3LYP/6-31G* had no issues with the SCF, it did hit 50 iterations and cancel because of that. It was clearly converging, albeit, very slowly. I am not sure why it stopped at 50 iterations considering I specify 100 iterations as my max? (Nevermind, that maxiter 100 is only for the SCF convergence). For B3LYP/6-31G* I used. ```; set {; basis 6-31G*; maxiter 100; g_convergence gau; opt_coordinates both; }; ```. ```; --------------------------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------------------------- ~; 1 -1520.084027420038 -1520.084027420038 0.01209684 0.00318489 0.09585970 0.02642430 ~; 2 -1520.101971720320 -0.017944300282 0.00752027 0.00158941 0.12994949 0.02669655 ~; 3 -1520.111617832344 -0.009646112024 0.00329597 0.00094589 0.09913642 0.01723322 ~; 4 -1520.114648443302 -0.003030610957 0.00216198 0.00062847 0.08202824 0.01366308 ~; 5 -1520.116031406611 -0.001382963310 0.00122597 0.00033545 0.05989395 0.01111816 ~; 6 -1520.116772315849 -0.000740909238 0.00131990 0.00033374 0.06203108 0.01396358 ~; 7 -1520.117591979154 -0.000819663305 0.00119721 0.00034756 0.09267135 0.02072228 ~; 8 -1520.118547103847 -0.000955124693 0.00156371 0.00030629 0.07994782 0.01866175 ~; 9 -1520.119170359052 -0.000623255205 0.00125623 0.00027764 0.06344987 0.01578896 ~; 10 -1520.119638965232 -0.000468606180 0.00067629 0.00021266 0.04981669 0.01425496 ~; 11 -1520.119963148907 -0.000324183675 0.00106241 0.00018459 0.03721107 0.01011712 ~; 12 -1520.120138724090 -0.000175575183 0.00077654 0.00015862 0.03691754 0.00896792 ~; 13 -1520.120303579945 -0.000164855855 0.00055434 0.00012476 0.03805513 0.00913406 ~; 14 -1520.120449457803 -0.000145877858 0.00082349 0.00014532 0.03164180 0.00803309 ~; 15 -1520.120569511735 -0.000120053932 0.00090778 0.00014097 0.03673389 0.00918033 ~; 16 -1520",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2338#issuecomment-957933503:553,Energy,Energy,553,https://psicode.org,https://github.com/psi4/psi4/issues/2338#issuecomment-957933503,1,['Energy'],['Energy']
Energy Efficiency,"Well, the initial energy is cray cray, e.g. ROHF on FH+ gives; ```; @ROHF iter 0: 37.35213783948360 3.73521e+01 0.00000e+00 ; @ROHF iter 1: -98.88199282615329 -1.36234e+02 5.47587e-02 ; @ROHF iter 2: -99.37308671364974 -4.91094e-01 2.39373e-02 DIIS; @ROHF iter 3: -99.52506651519121 -1.51980e-01 1.60839e-03 DIIS; @ROHF iter 4: -99.52612487148851 -1.05836e-03 3.72093e-04 DIIS; @ROHF iter 5: -99.52617068447645 -4.58130e-05 3.55283e-05 DIIS; @ROHF iter 6: -99.52617130679994 -6.22323e-07 6.69049e-06 DIIS; @ROHF iter 7: -99.52617134939356 -4.25936e-08 1.37357e-06 DIIS; @ROHF iter 8: -99.52617135123231 -1.83874e-09 1.08978e-07 DIIS; Energy converged.; ```; but the thing still works.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1429#issuecomment-450479977:18,energy,energy,18,https://psicode.org,https://github.com/psi4/psi4/pull/1429#issuecomment-450479977,2,"['Energy', 'energy']","['Energy', 'energy']"
Energy Efficiency,"Well, there is a progress. I have set the filename and force_restart keywords. This results in:. <pre>; **************************; * *; * CCENERGY *; * *; **************************; Nuclear Rep. energy (chkpt) = 327.121621300020024; SCF energy (chkpt) = -1150.463735394306923; Reference energy (file100) = -1150.463735394307605; Input parameters:; -----------------; Wave function = CC3; Reference wfn = RHF; Memory (Mbytes) = 8192.0; Maxiter = 50; R_Convergence = 1.0e-07; E_Convergence = 1.0e-06; Restart = Yes; DIIS = Yes; AO Basis = NONE; ABCD = NEW; Cache Level = 2; Cache Type = LOW; Print Level = 5; Num. of threads = 8; # Amps to Print = 10; Print MP2 Amps? = No; Analyze T2 Amps = No; Print Pair Ener = No; Local CC = No; T3 Ws incore = No; SCS-MP2 = False; SCSN-MP2 = False; SCS-CCSD = False; Using old T1 amplitudes.; Solving CC Amplitude Equations; ------------------------------; Iter Energy RMS T1Diag D1Diag New D1Diag D2Diag; ---- --------------------- --------- ---------- ---------- ---------- --------; 0 -1.235360138318377 0.000e+00 0.000000 0.000000 0.000000 0.135205; </pre>. So it seems to reuse the old T1 amplitudes, but still goes to solving the equations anyway - I was rather expecting it to skip this step - as this is the most time consuming part and there is nothing changed in the system since the crash. Bartek",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/27#issuecomment-29878672:197,energy,energy,197,https://psicode.org,https://github.com/psi4/psi4/issues/27#issuecomment-29878672,4,"['Energy', 'energy']","['Energy', 'energy']"
Energy Efficiency,"Well, yes, he relative sizes would effect efficiency of contraction order,; but I don't see why they would make the code not working at all... I; suppose this restriction is in there somewhere but I don't see why. On Oct 25, 2017 3:40 PM, ""Susi Lehtola"" <notifications@github.com> wrote:. @CDSherrill <https://github.com/cdsherrill> @edeprince3; <https://github.com/edeprince3> could it be that that nvirt > ndocc is an; assumption that's made in the contraction order? If nvirt < ndocc then it; might be more efficient to contract first over the occupied orbitals?. —; You are receiving this because you were mentioned. Reply to this email directly, view it on GitHub; <https://github.com/psi4/psi4/issues/828#issuecomment-339447402>, or mute; the thread; <https://github.com/notifications/unsubscribe-auth/AC9Qdui004ARGwSkbS7HK_Zd_43SDnHZks5sv466gaJpZM4QGSFE>; .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/828#issuecomment-339448378:510,efficient,efficient,510,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339448378,1,['efficient'],['efficient']
Energy Efficiency,"What about just the relaxed density matrix, and partial charges?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/40#issuecomment-38213099:56,charge,charges,56,https://psicode.org,https://github.com/psi4/psi4/issues/40#issuecomment-38213099,1,['charge'],['charges']
Energy Efficiency,"What method are you dealing with (that is, `energy(???)`)?. The aim is to have each job run max thread of node? That is, https://github.com/psi4/psi4/blob/master/tests/tu1-h2o-energy/output.ref#L67-L72 shows `Threads 48`? And the `-pe smp 64` is for one job running one Psi4 energy() call?. Were you setting `psi4.set_num_threads(1)` or `psi4.set_num_threads(64)`? I'd expect the latter if I'm reading your intentions right.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2747#issuecomment-1278199072:44,energy,energy,44,https://psicode.org,https://github.com/psi4/psi4/issues/2747#issuecomment-1278199072,3,['energy'],['energy']
Energy Efficiency,"What version of psi4 that you are using? The version info should be printed in the heading of the output file. . I ran your input using a build from the current master and I got the following results:. ```; Excitation Energy OS RS RS Einstein A ; State (eV) (cm^-1) (nm) (au) (l,au) (v,au) (s^-1); 1 Ag 12.964 104563.5 95.6 0.476427 0.0000 0.0000 0.0000 0.000000E+00; 2 Ag 16.771 135268.1 73.9 0.616327 0.0000 0.0000 0.0000 0.000000E+00; 3 Ag 18.773 151417.7 66.0 0.689910 0.0000 0.0000 0.0000 0.000000E+00; 4 Ag 25.910 208978.9 47.9 0.952178 0.0000 0.0000 0.0000 0.000000E+00; 1B1g 16.855 135946.1 73.6 0.619416 0.0000 0.0000 0.0000 0.000000E+00; 2B1g 26.177 211129.5 47.4 0.961977 0.0000 0.0000 0.0000 0.000000E+00; 3B1g 30.589 246713.1 40.5 1.124108 0.0000 0.0000 0.0000 0.000000E+00; 4B1g 36.015 290484.5 34.4 1.323545 0.0000 0.0000 0.0000 0.000000E+00; 1B2g 16.855 135946.1 73.6 0.619416 0.0000 0.0000 0.0000 0.000000E+00; 2B2g 26.177 211129.5 47.4 0.961977 0.0000 0.0000 0.0000 0.000000E+00; 3B2g 30.589 246713.1 40.5 1.124108 0.0000 0.0000 0.0000 0.000000E+00; 4B2g 36.015 290484.5 34.4 1.323545 0.0000 0.0000 0.0000 0.000000E+00; 1B3g 19.495 157235.3 63.6 0.716417 0.0000 0.0000 0.0000 0.000000E+00; 2B3g 19.585 157966.1 63.3 0.719747 0.0000 0.0000 0.0000 0.000000E+00; 3B3g 19.612 158178.3 63.2 0.720713 0.0000 0.0000 0.0000 0.000000E+00; 4B3g 19.626 158297.8 63.2 0.721258 0.0000 0.0000 0.0000 0.000000E+00; 1 Au 28.127 226859.8 44.1 1.033649 0.0000 0.0000 0.0000 0.000000E+00; 2 Au 38.607 311383.0 32.1 1.418765 0.0000 0.0000 0.0000 0.000000E+00; 3 Au 40.680 328106.5 30.5 1.494963 0.0000 0.0000 0.0000 0.000000E+00; 4 Au 46.518 375194.6 26.7 1.709513 0.0000 0.0000 0.0000 0.000000E+00; 1B1u 13.809 111376.2 89.8 0.507467 0.3270 0.0000 0.0000 2.705606E+09; 2B1u 26.345 212486.8 47.1 0.968161 0.2787 0.0000 0.0000 8.394111E+09; 3B1u 28.418 229205.6 43.6 1.044338 0.0041 0.0000 0.0000 1.426430E+08; 4B1u 34.059 274701.9 36.4 1.251634 0.0003 0.0000 0.0000 1.670003E+07; 1B2u 13.809 111376.2 89",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/521#issuecomment-261612983:218,Energy,Energy,218,https://psicode.org,https://github.com/psi4/psi4/issues/521#issuecomment-261612983,1,['Energy'],['Energy']
Energy Efficiency,"What's happening on (2) is as follows:; * For the supersystem computation, #2271 means that the supersystem frozen core is the sum of monomer A and monomer B frozen core. Both of those are set to zero right now, which is bad, but not the direct cause of the issue.; * **For both monomers, `num_frozen_docc 6` means Psi thinks there are 6 frozen orbitals when those monomer computations run**. That doesn't affect energies, but that does contaminate the wavefunction.; * All three wavefunctions are saved; * After reading the monomer B wavefunction, Psi asks monomer B for its occupied orbitals; * When computing its occupied orbitals, monomer B realizes it has 6 frozen orbitals, so it must be at least 6 and therefore returns 6 occupied orbitals; * With a garbage number of occupied orbitals, Psi computes a garbage SCF energy. The primary issue here is that for SAPT supersystem computations, Psi doesn't split `num_frozen_docc` into Monomer A frozen docc and Monomer B frozen docc. (nbody may well have the same problem.). Idea 1:; For _reasonable_ frozen cores, we could plausibly do the supersystem computation, assume the core orbitals are localized on monomers, see which monomers the core orbitals are localized on, and use that to work out the docc per subsystem. This is not distributed and will fail for large frozen cores, where the localization assumption fails. Idea 2:; `num_frozen_docc` simply should not be used for supersystem computations. We need a different keyword that has the user specify this for each elementary system. just like they do charges and spin multiplicities.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2631#issuecomment-1211894195:821,energy,energy,821,https://psicode.org,https://github.com/psi4/psi4/issues/2631#issuecomment-1211894195,2,"['charge', 'energy']","['charges', 'energy']"
Energy Efficiency,"When I did a calculation on a doublet, I got the following outputs during the convergence of CCSD. ```; MP2 correlation energy -0.3532279300684508; Solving CC Amplitude Equations; ------------------------------; Iter Energy RMS T1Diag D1Diag New D1Diag D2Diag; 0 -0.353227930068451 0.000e+00 0.000000 0.000000 0.000000 0.000000; 1 -0.372702747934713 9.484e-02 0.016815 0.000000 0.000000 0.000000; 2 -0.388397428813444 4.357e-02 0.025198 0.000000 0.000000 0.000000; 3 -0.394491992316835 2.808e-02 0.035707 0.000000 0.000000 0.000000; 4 -0.395063121334025 1.162e-02 0.041511 0.000000 0.000000 0.000000; 5 -0.395062761630612 3.231e-03 0.042317 0.000000 0.000000 0.000000; 6 -0.395097874139116 1.330e-03 0.042563 0.000000 0.000000 0.000000; 7 -0.395105439920260 5.176e-04 0.042615 0.000000 0.000000 0.000000; 8 -0.395105335262559 2.249e-04 0.042627 0.000000 0.000000 0.000000; 9 -0.395105487878768 1.167e-04 0.042635 0.000000 0.000000 0.000000; 10 -0.395106716028309 6.184e-05 0.042637 0.000000 0.000000 0.000000; 11 -0.395106616553506 2.856e-05 0.042640 0.000000 0.000000 0.000000; 12 -0.395107024185774 1.291e-05 0.042640 0.000000 0.000000 0.000000; 13 -0.395107014887657 5.342e-06 0.042641 0.000000 0.000000 0.000000; 14 -0.395106962475645 1.871e-06 0.042641 0.000000 0.000000 0.000000; 15 -0.395106957186010 7.159e-07 0.042641 0.000000 0.000000 0.000000; 16 -0.395106960040855 3.172e-07 0.042641 0.000000 0.000000 0.000000; 17 -0.395106969782621 1.352e-07 0.042641 0.000000 0.000000 0.000000; 18 -0.395106971659234 5.567e-08 0.042641 0.000000 0.000000 0.000000. Iterations converged.; ```. Hope this output could help to clarify the question.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1681#issuecomment-515176656:120,energy,energy,120,https://psicode.org,https://github.com/psi4/psi4/issues/1681#issuecomment-515176656,2,"['Energy', 'energy']","['Energy', 'energy']"
Energy Efficiency,"When I run this input file, the error message I get is `Killed: 9` which [often signifies being out of memory](https://stackoverflow.com/a/33978359). You've only allowed 2GB RAM for the entire program. We also know `DFHelper Memory: AOs need 0.898 GiB`. I haven't looked at the analytic hessian code, but being out of memory seems like the most likely culprit here. We can add ""get memory estimate of analytic hessian and reduce if possible"" to our to-do list, but for your computation, all you can do is give it more memory.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2297#issuecomment-925013890:422,reduce,reduce,422,https://psicode.org,https://github.com/psi4/psi4/issues/2297#issuecomment-925013890,1,['reduce'],['reduce']
Energy Efficiency,"When I try to run the input file from the X2C section, it fails.; ```; molecule {; H; F 1 0.92; }. set {; scf_type pk; basis cc-pvdz-decon; relativistic x2c; }. energy('hf'); ```. It runs fine if I either remove the `-decon`, remove the `relativistic x2c` option, or add the `basis_relativistic` option. The error I get is:; ```; Traceback (most recent call last):; File ""/usr/local/bin/psi4"", line 247, in <module>; exec(content); File ""<string>"", line 28, in <module>; File ""/usr/local/lib/psi4/driver/driver.py"", line 454, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/usr/local/lib/psi4/driver/procrouting/proc.py"", line 2797, in run_dft; scf_wfn = run_scf(name, **kwargs); File ""/usr/local/lib/psi4/driver/procrouting/proc.py"", line 1941, in run_scf; scf_wfn = scf_helper(name, **kwargs); File ""/usr/local/lib/psi4/driver/procrouting/proc.py"", line 1250, in scf_helper; scf_wfn = scf_wavefunction_factory(core.get_option('SCF', 'REFERENCE'), base_wfn); File ""/usr/local/lib/psi4/driver/procrouting/proc.py"", line 1035, in scf_wavefunction_factory; puream=wfn.basisset().has_puream()); File ""/usr/local/lib/psi4/driver/p4util/python_helpers.py"", line 64, in pybuild_basis; key, target, fitrole, other, return_atomlist=return_atomlist); File ""/usr/local/lib/psi4/driver/qcdb/libmintsbasisset.py"", line 641, in pyconstruct; return_atomlist=return_atomlist); File ""/usr/local/lib/psi4/driver/qcdb/libmintsbasisset.py"", line 770, in construct; filename = cls.make_filename(basgbs); File ""/usr/local/lib/psi4/driver/qcdb/libmintsbasisset.py"", line 1309, in make_filename; basisname = basisname.lower(). AttributeError: 'NoneType' object has no attribute 'lower'; ```. I'm guessing that this is related to issue #617.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/662:161,energy,energy,161,https://psicode.org,https://github.com/psi4/psi4/issues/662,3,['energy'],['energy']
Energy Efficiency,"When I was doing energy decomposition analysis with Bronze standard of a transition state involving a 3d metal Ni, the following error comes up. I wonder how to solve such a problem? Thanks. ```; BasisSet::construct: Unable to find a basis set for atom 24 for key BASIS ; among: ; Shell Entries: ['NI'] ; Basis Sets: [('JUN-CC-PVDZ', 'JUN-CC-PVDZ', None)] ; File Path: /gpfs/home/scms/zz/SAPT, /gpfs/home/scms/zz/SAPT, ; /gpfs/home/scms/zz/psi4conda/share/psi4/basis !; Input Blocks: ; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2866:17,energy,energy,17,https://psicode.org,https://github.com/psi4/psi4/issues/2866,1,['energy'],['energy']
Energy Efficiency,"When PSI4 updates in miniconda, the testing dialogue,. ```; Nuclear Repulsion Energy..........................................PASSED; SAPT0 Eelst.......................................................PASSED; SAPT0 Eexch.......................................................PASSED; SAPT0 Eind........................................................PASSED; SAPT0 Edisp.......................................................PASSED; SAPT0 Etotal......................................................PASSED; ```. prints as a single line which is wrapped by the terminal:. ```; Nuclear Repulsion Energy..........................................PASSED SAPT0 Eelst....; ...................................................PASSED SAPT0 Eexch...................; ....................................PASSED SAPT0 Eind...................................; .....................PASSED SAPT0 Edisp.................................................; ......PASSED SAPT0 Etotal......................................................PASSED; ```. It seems like there should be a newline after each ""PASSED"". I updated the post-link.sh script to print the test dialogue with cat instead of echo. This seems to fix the problem on my machines (Ubuntu and RedHat with Gnome terminal and Konsole). While I was updating the printing, I also added comments and made the script delete the temporary files after PSI4 is done running.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/191:78,Energy,Energy,78,https://psicode.org,https://github.com/psi4/psi4/pull/191,2,['Energy'],['Energy']
Energy Efficiency,"When a symmetric molecule is run explicitly in `C1` symmetry the `fnocc` DF-CCSD(T) calculations seems to initialise [Mintshelper](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/mintshelper.cc#L168) when accessing the 1e-integrals given the output below (molecule+detailed basis set info are printed). CONV-CCSD(T) does not print this, but its 1e-ints come from IWL files I think.; For DF-CC they are requested here:; https://github.com/psi4/psi4/blob/master/psi4/src/psi4/fnocc/df_ccsd.cc#L727. Maybe a problem with missing cached integrals and the re-computation triggers the Mintshelper init?. DF-CCSD(T) output example:; ```; ...; ==> Input parameters <==. Freeze core orbitals? no; Use frozen natural orbitals? yes; r_convergence: 1.000e-07; e_convergence: 1.000e-06; Number of DIIS vectors: 8; Number of frozen core orbitals: 0; Number of active occupied orbitals: 5; Number of active virtual orbitals: 8; Number of frozen virtual orbitals: 0. Molecular point group: c1; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass; ------------ ----------------- ----------------- ----------------- -----------------; O 0.000000000000 0.000000000000 -0.079135765818 15.994914619570; H 0.000000000000 -0.707106781187 0.627971015369 1.007825032230; H 0.000000000000 0.707106781187 0.627971015369 1.007825032230. -AO BASIS SET INFORMATION:; Name = 3-21G; Blend = 3-21G; Total number of shells = 9; Number of primitives = 15; ...; ```. example input:; ```; molecule mol {; symmetry c1; O; H 1 R; H 1 R 2 A; }; mol.R = 1.0; mol.A = 90.0. set cc_type df; energy('fno-ccsd(t)/3-21g'); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1957:1041,charge,charge,1041,https://psicode.org,https://github.com/psi4/psi4/issues/1957,2,"['charge', 'energy']","['charge', 'energy']"
Energy Efficiency,"When attempting to rerun this computation, I get a perfectly reasonable energy of -1802.809573 for the tungsten product listed here, and an overall energy of -11.3 kcal/mol for the reaction the user originally requested. This disagrees with Gaussian, but without more information (especially about density-fitting), I'm inclined to take the beer. Issue solved, presumably by a mix of ADIIS helping converge to the right state and/or ECP terms converging due to libecpint.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1338#issuecomment-1133754655:72,energy,energy,72,https://psicode.org,https://github.com/psi4/psi4/issues/1338#issuecomment-1133754655,2,['energy'],['energy']
Energy Efficiency,When one runs SAPT0 via the SAPT(DFT) pathway with the following options:; ```; set SAPT_DFT_FUNCTIONAL HF; set SAPT_DFT_MP2_DISP_ALG FISAPT; energy('sapt(dft)'); ```; the algorithm forgets to freeze the core in the exchange-dispersion term. This does not happen when `SAPT_DFT_MP2_DISP_ALG == 'FISAPT'`. I'll submit a PR with the fix very soon.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3141:142,energy,energy,142,https://psicode.org,https://github.com/psi4/psi4/issues/3141,1,['energy'],['energy']
Energy Efficiency,"When running Psi4 1.9.1, the following structure causes Psi4 to crash, but shifting it a little bit makes things work fine. ```; molecule {; C 0.0000000182 -0.0000000013 0.0000000175; H -0.6691384315 0.8462762237 -0.0845771730; H -0.3913180530 -0.8282585144 -0.5761431456; H 0.0839750469 -0.2910425067 1.0389058590; H 0.9764814973 0.2730248868 -0.3781855106; }. energy(""BP86/sto-3g""); ```. Traceback; ```; Traceback (most recent call last):; File ""/home/jevandezande/rowansci/peregrine/.pixi/envs/dev/bin/psi4"", line 387, in <module>; exec(content); File ""<string>"", line 26, in <module>; File ""/home/jevandezande/rowansci/peregrine/.pixi/envs/dev/lib/python3.12/site-packages/psi4/driver/driver.py"", line 525, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; File ""/home/jevandezande/rowansci/peregrine/.pixi/envs/dev/lib/python3.12/site-packages/psi4/driver/procrouting/proc.py"", line 2588, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; File ""/home/jevandezande/rowansci/peregrine/.pixi/envs/dev/lib/python3.12/site-packages/psi4/driver/procrouting/proc.py"", line 1778, in scf_helper; base_wfn = core.Wavefunction.build(scf_molecule, core.get_global_option('BASIS')); ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; File ""/home/jevandezande/rowansci/peregrine/.pixi/envs/dev/lib/python3.12/site-packages/psi4/driver/p4util/python_helpers.py"", line 217, in _core_wavefunction_build; basis = core.BasisSet.build(mol, ""ORBITAL"", basis, quiet=quiet); ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; File ""/home/jevandezande/rowansci/peregrine/.pixi/envs/dev/lib/python3.12/site-packages/psi4/driver/p4util/python_helpers.py"", line 157, in _pybuild_basis; bs, basisdict = qcdb.BasisSet.pyconstruct(mol.to_dict(),; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; File ""/home/jevandezande/rowansci/per",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3213:362,energy,energy,362,https://psicode.org,https://github.com/psi4/psi4/issues/3213,3,['energy'],['energy']
Energy Efficiency,"When running psi4 with the input file, i.e. psi4 h2.in h2.out. > memory 2500 mb; > ; > molecule h2 {; > H ; > H 1 0.75; > }; > ; > set basis def2-QZVPP; > set FCI true; > set OPDM true; > set OPDM_PRINT true; > set TPDM true; > set TPDM_PRINT true; > energy('detci'). no one-particle density matrix or two-particle density matrix is written to the output file h2.out and other files except the output file h2.out and timer.dat are created.; See also: http://www.psicode.org/psi4manual/master/autodoc_glossary_options_c.html#term-opdm-print-detci",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/477:251,energy,energy,251,https://psicode.org,https://github.com/psi4/psi4/issues/477,1,['energy'],['energy']
Energy Efficiency,"When trying to track down some nondeterminstic behavior, I encountered the following oddity. ```; import numpy as np. molecule {; 0 1; C1 0.00000000 0.00000000 0.00000000; H2 0.49111719 0.98252240 -0.05876775; H3 -0.72033644 -0.10038934 -0.82524990; H4 -0.52826663 -0.08928047 0.96070982; H5 0.75766207 -0.79379696 -0.07638440; }. set {; basis cc-pvdz; }. e_scf, wfn = energy('hf', return_wfn=True). print(wfn.occupation_a().np); print(np.asarray(wfn.occupation_a())); ```. Somewhat surprisingly, this is the output I see:. ```; [ 0.00000000e+000 0.00000000e+000 0.00000000e+000 -7.63277803e+283; 6.91698601e-310 6.91698623e-310 0.00000000e+000 0.00000000e+000; 0.00000000e+000 0.00000000e+000 0.00000000e+000 0.00000000e+000; 1.65169957e-220 6.91698602e-310 6.91697627e-310 -3.39981117e-158; 6.91697639e-310 6.91696828e-310 5.41141341e-041 6.91697626e-310; 6.91697724e-310 0.00000000e+000 0.00000000e+000 0.00000000e+000; -3.67112871e-197 6.91698601e-310 6.91696828e-310 2.99382801e+052; 6.91697697e-310 6.91697723e-310 0.00000000e+000 0.00000000e+000; 0.00000000e+000 4.42201243e+096]; [ 1. 1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.; 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]; ```. i.e., something funky is going on with `.np`.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/639:369,energy,energy,369,https://psicode.org,https://github.com/psi4/psi4/issues/639,1,['energy'],['energy']
Energy Efficiency,"When using H+ as the compound in a SAPT calculation it crashes with a divide by zero error:. ```; File ""/var/spool/slurm/d/job333055/slurm_script"", line 21, in <module>; myener = psi4.energy(""sapt2+(ccd)dmp2""); File ""/home/spoel/miniconda3/lib/python3.8/site-packages/psi4/driver/driver.py"", line 525, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/spoel/miniconda3/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 4581, in run_sapt; monomerA_wfn = scf_helper('RHF', molecule=monomerA, **kwargs); File ""/home/spoel/miniconda3/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 1887, in scf_helper; e_scf = scf_wfn.compute_energy(); File ""/home/spoel/miniconda3/lib/python3.8/site-packages/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 99, in scf_compute_energy; scf_energy = self.finalize_energy(); File ""/home/spoel/miniconda3/lib/python3.8/site-packages/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 692, in scf_finalize_energy; self.print_energies(); File ""/home/spoel/miniconda3/lib/python3.8/site-packages/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 804, in scf_print_energies; self.set_variable(""HF VIRIAL RATIO"", - potential / ke) # P::e SCF; ZeroDivisionError: float division by zero; ```. The script to reproduce this is below. ```; #!/usr/bin/env python3; import os; import numpy as np; import psi4 as psi4; psi4.core.set_num_threads(4); psi4.set_options({""cachelevel"": 1, ""print"": 1}); psi4.set_memory(12000000000); psi4_io = psi4.core.IOManager.shared_object(); psi4.core.set_output_file('hcl-sapt.log', False); geometry= """"""; 1 1; H -0.0 0.0 -1.36; --; -1 1; Cl 0.0 0.0 1; """"""; geom = psi4.geometry(geometry); psi4.basis_helper(""""""; assign aug-cc-pvtz; """"""); myener = psi4.energy(""sapt2+(ccd)dmp2""); for ener in [ 'SAPT ELST ENERGY', 'SAPT EXCH ENERGY', 'SAPT IND ENERGY', 'SAPT DISP ENERGY', 'SAPT TOTAL ENERGY' ]:; print(""%s %g"" % ( ener, psi4.variable(ener) )); ``",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3156:184,energy,energy,184,https://psicode.org,https://github.com/psi4/psi4/issues/3156,3,['energy'],['energy']
Energy Efficiency,"When using a custom basis set, `MBIS_VOLUME_RATIOS` throws an error, all other properties seem to work fine. It also works fine if the basis set is included in the call to `psi4.energy`. Using conda version of psi4 1.9.1 on Linux. Input:; ```python; import psi4. h2o = psi4.geometry(""""""; H 0 0 0; O 0 0 1; H 0 1 1; """""",""h2o""). def basisspec_psi4_MyBasis(mol, role):; mol.set_basis_all_atoms(""sto-3g"", role=role); return {}. psi4.qcdb.libmintsbasisset.basishorde[""MYBASIS""] = basisspec_psi4_MyBasis; psi4.core.set_global_option(""BASIS"", ""mybasis""). _, wfn = psi4.energy('hf', return_wfn=True, molecule=h2o). psi4.oeprop(wfn, ""MBIS_VOLUME_RATIOS""); ```. Error:; ```; QcdbException BasisSetNotFound: BasisSet::construct: Unable to find a basis set for atom 1 for key BASIS among:; Shell Entries: ['H']; Basis Sets: [('BASISSPEC_PSI4_MYBASIS', 'BASISSPEC_PSI4_MYBASIS', None)]; File Path: /home/jevandezande/tmp/psi4/basis, /home/jevandezande/tmp/psi4/basis, /home/jevandezande/progs/mamba/envs/peregrine/share/psi4/basis; Input Blocks:. Traceback (most recent call last):; File ""/home/jevandezande/tmp/psi4/basis/a.py"", line 18, in <module>; psi4.oeprop(wfn, ""MBIS_VOLUME_RATIOS""); File ""/home/jevandezande/progs/mamba/envs/peregrine/lib/python3.11/site-packages/psi4/driver/p4util/util.py"", line 85, in oeprop; free_atom_volumes(wfn); File ""/home/jevandezande/progs/mamba/envs/peregrine/lib/python3.11/site-packages/psi4/driver/p4util/prop_util.py"", line 119, in free_atom_volumes; at_e, at_wfn = psi4.energy(method, return_wfn=True); ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; File ""/home/jevandezande/progs/mamba/envs/peregrine/lib/python3.11/site-packages/psi4/driver/driver.py"", line 525, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; File ""/home/jevandezande/progs/mamba/envs/peregrine/lib/python3.11/site-packages/psi4/driver/procrouting/proc.py"", line 2588, in run_scf; scf_wfn = scf_",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3240:178,energy,energy,178,https://psicode.org,https://github.com/psi4/psi4/issues/3240,2,['energy'],['energy']
Energy Efficiency,"When using angstrom units, when parsing the molecule and including an external_potential, the geometry of the molecule gets scaled twice leading to incorrect energies. This only happens, when using python and not psithon.; This can easily be seen when adding a 0 charge far away of the molecule to the simulation, which changes energies significantly. I already prepared a PR to fix this, this is just for reference. To reproduce the problem, use the following:; ```; #! Python equivalent of extern5 test:; #! External potential sanity check with 0 charge far away; #! Checks if all units behave the same and energy is same as no; #! potential; import numpy as np; import psi4.core; import psi4. b2a=0.529177249; # Coordinates added in angstrom; coords = np.array([[ -0.778803000000 , 0.000000000000, 1.132683000000],; [ -0.666682000000, 0.764099000000, 1.706291000000],; [ -0.666682000000, -0.764099000000 , 1.706290000000]]); elements = [""O"",""H"",""H""]; molecule_ang = psi4.core.Molecule.from_arrays(geom=coords, elem=elements, fix_symmetry=""c1"", fix_com=True, fix_orientation=True); molecule_bohr = psi4.core.Molecule.from_arrays(geom=coords/b2a, elem=elements, fix_symmetry=""c1"", fix_com=True, fix_orientation=True, units=""Bohr""). external_potentials = [[0.00, np.array([10.0,10.0,10.0]) / b2a]]. psi4.set_options( {; ""scf_type"": ""df"",; ""d_convergence"": 12,; ""basis"": ""STO-3G"",; ""print"": 0,; ""debug"": 0,; }). ene_bohr_charges = psi4.energy('scf', molecule=molecule_bohr, external_potentials=external_potentials); ene_bohr_pure = psi4.energy('scf', molecule=molecule_bohr); psi4.compare_values(ene_bohr_charges, ene_bohr_pure, 6, ""Bohr geometry, charges vs no charges energy equality""). ene_ang_pure = psi4.energy('scf', molecule=molecule_ang); psi4.compare_values(ene_ang_pure, ene_bohr_pure, 6, ""No charges, Bohr vs Angstrom geometry energy equality""). ene_ang_charges = psi4.energy('scf', molecule=molecule_ang, external_potentials=external_potentials); psi4.compare_values(ene_ang_charges, ene_an",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3147:263,charge,charge,263,https://psicode.org,https://github.com/psi4/psi4/issues/3147,3,"['charge', 'energy']","['charge', 'energy']"
Energy Efficiency,"While attempting to run an ODC-12 computation, the correlation correction to the 1RDM (tau) didn't converge. I can't quite tell what ODC-12 did in response to this, but the effect was to zero the orbital gradient and make the energy negative NaN. The code should either recover gracefully if possible or, if not possible, quit ASAP. For the benefit of @mdav2 and @mlestep there's a side problem with the SCF converging to the wrong state. I'll add this as a post to the SCF topic when I've investigated further. I can tell you now that the ""true"" ground state seems to break CFOUR. [odc12_nan.txt](https://github.com/psi4/psi4/files/2254898/odc12_nan.txt)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1117:226,energy,energy,226,https://psicode.org,https://github.com/psi4/psi4/issues/1117,1,['energy'],['energy']
Energy Efficiency,"While running the tests for #2230, I encountered the following failures; - large-atoms is trying to run analytical ECP gradietns; - min-atoms fails in `KeyError: 'psi4.core.variable: Requested variable CURRENT ENERGY was not set!\n'`; - pywrap-freq-e-sowreap fails in `NameError: name 'get_frequencies' is not defined`; - pywrap-freq-g-sowreap fails in `NameError: name 'get_frequencies' is not defined`",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2234:210,ENERGY,ENERGY,210,https://psicode.org,https://github.com/psi4/psi4/issues/2234,1,['ENERGY'],['ENERGY']
Energy Efficiency,"While trying to reproduce some gaussian calculations with psi4, I noticed that the frequencies dependent on the dertype setting to a larger extend than anticipated: ; ```; molecule h2o {; units angstrom; H 0.000000 0.760300 -0.196100; O 0.000000 0.000000 0.392200; H 0.000000 -0.760300 -0.196100; }. set basis 6-311G**; set e_convergence 9; set g_convergence gau_verytight; set scf_type pk. optimize('scf', molecule=h2o). scf_e, scf_wfn = frequencies('scf', dertype='energy', return_wfn=True); scf_e, scf_wfn = frequencies('scf', dertype='gradient', return_wfn=True); scf_e, scf_wfn = frequencies('scf', dertype='hessian', return_wfn=True); ```; This generated the following frequencies:; ```; $ grep -A 3 'Vib. Freq' 'hf-6-311Gstarstar-freq.out'; No. Vib. Freq. [cm^-1] Vib. Temp. [K]; 1 1750.943 2519.214; 2 4142.104 5959.557; 3 4237.400 6096.666; --; No. Vib. Freq. [cm^-1] Vib. Temp. [K]; 1 1750.925 2519.188; 2 4142.111 5959.567; 3 4237.427 6096.704; --; No. Vib. Freq. [cm^-1] Vib. Temp. [K]; 1 1731.766 2491.623; 2 4136.243 5951.124; 3 4232.474 6089.579; ```; For reference these are the gaussian g09 frequencies:; ```; Frequencies -- 1750.9454 4142.1029 4237.3716; ```. I am using:; ```; $ rpm -qif /usr/bin/psi4 | egrep '^Version|^Source'; Version : 1.1; Source RPM : psi4-1.1-2.add49b9git.fc26.src.rpm; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/901:467,energy,energy,467,https://psicode.org,https://github.com/psi4/psi4/issues/901,1,['energy'],['energy']
Energy Efficiency,"Whoops,. ``` python; # Integrate DFT with driver routines; for ssuper in superfunctional_list():; procedures['energy'][ssuper.name().lower()] = run_dft. for ssuper in superfunctional_list():; if ((not ssuper.is_c_hybrid()) and (not ssuper.is_c_lrc()) and (not ssuper.is_x_lrc())):; procedures['gradient'][ssuper.name().lower()] = run_dft_gradient; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/230#issuecomment-178858441:110,energy,energy,110,https://psicode.org,https://github.com/psi4/psi4/issues/230#issuecomment-178858441,1,['energy'],['energy']
Energy Efficiency,"Will you tack this onto your PR, please? @PeterKraus, will you verify on your branch that `set e_convergence 10` and `set d_convergence 10` give these new ref values?. ```; diff --git a/tests/sapt-ecp/input.dat b/tests/sapt-ecp/input.dat; index 0aaa59f..36519f3 100644; --- a/tests/sapt-ecp/input.dat; +++ b/tests/sapt-ecp/input.dat; @@ -16,12 +16,12 @@ scf_type df; FREEZE_CORE true; }; ; -ref_lanl = -0.10472432075265364; -ref_321g = -0.09561604218297935; +ref_lanl = -0.10472408363385473; +ref_321g = -0.09561567751654523; ; E = energy('sapt0/3-21g'); -compare_values(ref_321g, E, 8, ""SAPT0 energy with Ca2+, without ECP"") #TEST; +compare_values(ref_321g, E, 6, ""SAPT0 energy with Ca2+, without ECP"") #TEST; E = energy('sapt0/lanl2dz'); -compare_values(ref_lanl, E, 8, ""SAPT0 energy with Ca2+, with ECP"") #TEST; +compare_values(ref_lanl, E, 6, ""SAPT0 energy with Ca2+, with ECP"") #TEST; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1481#issuecomment-455382870:532,energy,energy,532,https://psicode.org,https://github.com/psi4/psi4/pull/1481#issuecomment-455382870,6,['energy'],['energy']
Energy Efficiency,"With `MP2/cc-PVDZ`, the discrepancies seem to be within 1 Hartree when Summit is compared to local runs. I ran the compairisons for the 20 canonical amino acids (structures from `HF/6-31G*` geometry optimisation outputs). It takes anywhere from 10-30+ times longer on Summit even with the exact same resource request (16 threads and 16GB RAM). I've attached the psi4_outputs.dat for both if there's anything you might be able to notice that might be going wrong. ## Local stdout:; ```; Alanine energy: -322.83024417222833 Hartrees, time taken: 5.157728010000028 seconds.; Arginine energy: -605.2334551774346 Hartrees, time taken: 24.718217983999978 seconds.; Asparagine energy: -491.10483309674163 Hartrees, time taken: 10.41663564099997 seconds.; Aspartic_acid energy: -510.40430731923726 Hartrees, time taken: 9.22630813500001 seconds.; Cysteine energy: -720.516978697493 Hartrees, time taken: 8.705966620000027 seconds.; Glutamic_acid energy: -549.5881696345085 Hartrees, time taken: 12.724474364000002 seconds.; Glutamine energy: -530.2859605443301 Hartrees, time taken: 13.692237066000018 seconds.; Glycine energy: -283.6410604296507 Hartrees, time taken: 3.274363483000002 seconds.; Histidine energy: -547.2538448890515 Hartrees, time taken: 16.051534118999996 seconds.; Isoleucine energy: -440.38074256935386 Hartrees, time taken: 13.504395359 seconds.; Leucine energy: -440.3830677856804 Hartrees, time taken: 13.360224716999994 seconds.; Lysine energy: -495.9450901408551 Hartrees, time taken: 17.004098473 seconds.; Methionine energy: -798.8557355673612 Hartrees, time taken: 15.174141779999957 seconds.; Phenylalanine energy: -553.2067571527756 Hartrees, time taken: 21.84562706899999 seconds.; Proline energy: -400.01014403056064 Hartrees, time taken: 8.192189529000018 seconds.; Serine energy: -397.9050930788871 Hartrees, time taken: 6.108175248000009 seconds.; Threonine energy: -437.0635748952652 Hartrees, time taken: 8.374118565999936 seconds.; Tryptophan energy: -684.4098345276545 ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3223#issuecomment-2375594595:494,energy,energy,494,https://psicode.org,https://github.com/psi4/psi4/issues/3223#issuecomment-2375594595,6,['energy'],['energy']
Energy Efficiency,"With a recent master (1.3a2.dev179, Git: Rev {master} c46660a) the following calculation fails at least 1/10 times. AMD Ryzen, Intel2018 compiler, compiled again conda libraries. `for i in {1..10}; do psi4dev -s /scratch/ -n 6 water.in out ; done`. water.in:; ```memory 4 GiB; molecule water {; O 0.000000000000 -0.000000000000 0.065656839916 ; H -0.000000000000 0.758561000000 -0.521010847646 ; H 0.000000000000 -0.758561000000 -0.521010847646 ; }; set {; scf_type df; basis def2-QZVP; dft_spherical_points 590; dft_radial_points 100; }; energy('wb97X-V'); ```; The segfault's backtrace contains `psi.VBase.build_collocation_cache`.; Turning the collocation grid _off_ fixes the issue.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1366:539,energy,energy,539,https://psicode.org,https://github.com/psi4/psi4/issues/1366,1,['energy'],['energy']
Energy Efficiency,"With apologies for the vague title, there are some issues with the `compute_gradient` function. They're connected, so it's best to have a single topic for these:. 1. Not all modules that support gradients support the `compute_gradient` API. `dct` and Rob's `dfmp2` do, but most other modules don't. We learned in #2200 that RHF wavefunctions don't, though `SCFDeriv` and `Dispersion` ""wavefunctions"" seem to. (See `scfgrad` and `libdisp`, respectively.); 2. The `compute_gradient` calls coming out of `dct` and `dfmp2` don't even work without crashing! Minimal not-working example:; ```; molecule {; O; H 1 1.0 ; H 1 1.0 2 104.5; }. wfn = energy('mp2/sto-6g', return_wfn=True)[1] # Can switch ""mp2"" to ""dct"" and get a similar crash; wfn.compute_gradient(); ```; 3. Computing a derivative _reliably_ requires assumptions about what intermediates are available and what the Hamiltonian is. For example, we need to know that the file of ""T"" amplitudes is the same as that optimized during the energy computation, and that the energy was computed without relativistic corrections. We currently store whether the relativistic global is _currently_ enabled, but not whether relatvistic terms were added during the compute step. I'm open to alternatives, but I favor taking `compute_gradient` out of the API entirely. It's not consistently in the API, it doesn't get simple cases right when it's there, and the assumptions required by such a code don't make it a good candidate for being in the API in the first place.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2223:639,energy,energy,639,https://psicode.org,https://github.com/psi4/psi4/issues/2223,3,['energy'],['energy']
Energy Efficiency,"With the fixes and default cutoff, I get; ```; Begin singles and doubles coupled cluster iterations. Iter DIIS Energy d(Energy) |d(T)| time; 0 0 1 1512230731449.1877441406 1512230731449.1877441406 140929.0768005789 125; ```; which is not surprising. Setting `df_fitting_condition 1e-7` I get; ```; Iter DIIS Energy d(Energy) |d(T)| time; 0 0 1 -196270759150.0319519043 -196270759150.0319519043 89246.9451637544 129; ```; which is clearly different :laughing:",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1545#issuecomment-465300606:111,Energy,Energy,111,https://psicode.org,https://github.com/psi4/psi4/issues/1545#issuecomment-465300606,4,['Energy'],['Energy']
Energy Efficiency,"With the following input file, I noticed that there's an uncaught C++ exception that crashes the program hard; ```; $ cat input.dat ; memory 8640 Mb; molecule dimer {; 1 1; K -4.067042 -1.894214 0.002270; }; set dft_grid_name SG1; set dft_vv10_radial_points 50; set dft_vv10_spherical_points 194; set dft_nuclear_scheme treutler; set dft_radial_scheme EM; set basis def2-TZVPPD; ene = energy(""wB97M-V""); ```. Here's the error:. <details>; <summary> Expand </summary>. ```; $ psi4 input.dat ; terminate called after throwing an instance of 'psi::PsiException'; what(): ; Fatal Error: There is no SG-1 grid defined for the requested atomic number!; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1557940846948/work/psi4/src/psi4/libfock/cubature.cc on line: 2451; The most recent 5 function calls were:; forrtl: error (76): Abort trap signal; Image PC Routine Line Source ; libgdma.so 00007F895301610F for__signal_handl Unknown Unknown; libpthread-2.26.s 00007F895EC247E0 Unknown Unknown Unknown; libc-2.26.so 00007F895E89BB20 gsignal Unknown Unknown; libc-2.26.so 00007F895E89CFC8 abort Unknown Unknown; libint.so 00007F8933297319 _ZN9__gnu_cxx27__ Unknown Unknown; libint.so 00007F8933296839 _ZN10__cxxabiv111 Unknown Unknown; libint.so 00007F89332968D1 __cxa_call_termin Unknown Unknown; libint.so 00007F8933296600 __gxx_personality Unknown Unknown; libgcc_s.so.1 00007F895EEB9AAB Unknown Unknown Unknown; libgcc_s.so.1 00007F895EEB9F49 _Unwind_Resume Unknown Unknown; core.cpython-37m- 00007F8955C9BDC5 Unknown Unknown Unknown; core.cpython-37m- 00007F8955C94F6C Unknown Unknown Unknown; libiomp5.so 00007F8913F603F3 __kmp_invoke_micr Unknown Unknown; libiomp5.so 00007F8913EE4937 __kmp_fork_call Unknown Unknown; libiomp5.so 00007F8913EA8533 __kmpc_fork_call Unknown Unknown; core.cpython-37m- 00007F8955C947E1 Unknown Unknown Unknown; core.cpython-37m- 00007F8955CA73C0 Unknown Unknown Unknown; core.cpython-37m- 00007F8955CA62DC Unknown Unknown Unknown; core.cpython-37m",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2080:385,energy,energy,385,https://psicode.org,https://github.com/psi4/psi4/issues/2080,1,['energy'],['energy']
Energy Efficiency,"Without The-7 (hf/rhf/uhf/rohf/rscf/roscf/uscf), one can do:. # (a) for HF. energy(‘scf’). # (b) for unrestricted HF. set reference uhf; energy(‘scf’). # (c) for B3LYP. set dft_functional b3lyp; set reference rks; energy(‘scf’). # (d) also for B3LYP. energy(‘b3lyp’). # but this gets you HF (b/c ks reference is the hf/dft toggle control). set dft_functional b3lyp; energy(‘scf'). # (e) for unrestricted B3LYP. set dft_functional b3lyp; set reference uks; energy(‘scf’). # (f) also for unrestricted B3LYP. set reference uks; energy(‘b3lyp’). # (g) also for unrestricted B3LYP (since energy command trumps options, uhf gets translated to uks). set reference uhf; energy(‘b3lyp’). But most people do (a), (b), (d), and (f/g) I think. rhf/uhf/rohf let you wrap reference into the energy() call for HF. rscf/uscf/roscf let you wrap reference into the energy() call for HF or DFT (though for the latter you’d have to use dft_functional keyword. Francesco brings up a related and overdue point. If you specify an open-shell molecule and no reference, it complains at you b/c rhf (the default) is unsuitable. I couldn’t say concretely, but some other programs will switch to an appropriate reference for open-shell. For psi4, it would have to be rhf/rks because we don’t have roks. This would be convenient at times, for instance, running databases of mixed closed/open shell. Propositions to be considered:. (i) Keeping reference in one place, that is, as a keyword. Consequences: retire rhf/uhf/rohf & rscf/uscf/roscf. (ii) If molecule is open-shell _and_ no reference has been specified, switch to uhf. This could be tricky b/c we’re not set up to do this driver-side. Also, there’d still be no way to use r/ro, as appropriate, in a series of molecules w/o explicitly setting reference. Lori. > On Jun 8, 2015, at 10:48 AM, David Sherrill notifications@github.com wrote:; > ; > Is the proposal to replace uhf/rhf/rohf -> hf for energy(), grad(), etc?; > That sounds ok to me (then reference just has to be",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/103#issuecomment-110183382:76,energy,energy,76,https://psicode.org,https://github.com/psi4/psi4/issues/103#issuecomment-110183382,11,['energy'],['energy']
Energy Efficiency,"Without nocom, the first time the energy is computed, the center of mass is shifted to the origin, and all of the stored coordinates are updated. If change beh2.z to a new value, I might be expecting all of the other coordinates to still be where I specified them, not at their com-shifted values.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/59#issuecomment-43509699:34,energy,energy,34,https://psicode.org,https://github.com/psi4/psi4/issues/59#issuecomment-43509699,1,['energy'],['energy']
Energy Efficiency,"Wondering if it mightn't be better to just continue routing everything with a `/` to `driver_cbs._cbs_gufunc` only now with an extra kwarg `cbs_allowed=True` that is false for `def properties()`. I worry about not breaking (or complicating) recursive driver cases (where cbs and nbody function re-enter energy, hessian, properties etc. after being broken into smaller pieces (like `mp2/cc-pv[dt]z` --> `mp2/cc-pvdz`)).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/949#issuecomment-379562840:303,energy,energy,303,https://psicode.org,https://github.com/psi4/psi4/pull/949#issuecomment-379562840,1,['energy'],['energy']
Energy Efficiency,Would there be tests (names/descriptions) that need to be adapted?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1909#issuecomment-634844139:58,adapt,adapted,58,https://psicode.org,https://github.com/psi4/psi4/pull/1909#issuecomment-634844139,1,['adapt'],['adapted']
Energy Efficiency,"Would you mind teaching me if I have this right because I don't actually know and this is how far I got, I still can't seem to get intensities out. . ```python. import psi4; import textwrap; import numpy as np. psi4.core.set_num_threads(8); psi4.set_memory('30000mb'). psi4.set_options({; 'scf_type': 'df',; 'g_convergence': 'gau_tight',; 'reference': 'rhf',; 'freeze_core': 'true',; }). psi4.core.set_output_file('water.out', False). def run_calculation(molecule):; ; universe = psi4.geometry(molecule); universe.update_geometry(); mass = np.asarray([16.01, 1.0, 1.0]); geometry = np.asarray(universe.geometry()); irrep_labels = universe.irrep_labels(); dipole_derivatives = None; project_translation = True; project_rotation = True; symbols = [universe.symbol(at) for at in range(universe.natom())]; theory = 'mp2/aug-cc-pvdz'; ; energy, wave_function = psi4.optimize(; 'hf/6-31g*',; return_wfn = 'yes',; molecule=universe; ). hessian, wave_function_2 = psi4.hessian(; theory,; ref_gradient=wave_function.gradient(),; return_wfn= True; ). basisset = wave_function_2.basisset(). wave_function_2.hessian().print_out(). vibinfo, vibtext = psi4.driver.qcdb.vib.harmonic_analysis(; np.array(hessian),; geometry,; mass,; basisset,; irrep_labels,; dipole_derivatives,; project_translation,; project_rotation; ). print(vibtext); print(psi4.driver.qcdb.vib.print_vibs(vibinfo, shortlong=True, normco='q', atom_lbl=symbols)). if __name__ == '__main__':. water_zmatrix = '''\; O; H 1 0.9894093; H 1 0.9894093 2 100.02688; '''; run_calculation(textwrap.dedent(water_zmatrix)). ```. The output from the script for water is:. ```python. Vibration 7 8 9 ; Freq [cm^-1] 1563.0797 4068.4404 4208.3554 ; Irrep ; Reduced mass [u] 1.0740 1.0365 1.0684 ; Force const [mDyne/A] 1.5461 10.1080 11.1487 ; Turning point v=0 [a0] 0.2678 0.1690 0.1636 ; RMS dev v=0 [a0 u^1/2] 0.1962 0.1216 0.1196 ; Char temp [K] 2248.9237 5853.5800 6054.8864 ; --------------------------------------------------------------------------------",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2698#issuecomment-1226632650:832,energy,energy,832,https://psicode.org,https://github.com/psi4/psi4/issues/2698#issuecomment-1226632650,1,['energy'],['energy']
Energy Efficiency,"Wow, thanks for your work.; I'm completely fine with changing `REMP`/`OREMP` to `REMP2`/`OREMP2`.; (with the limitation that it's the 2nd order energy/1st order wavefunction, but this is equivalent in the case of MP2)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2633#issuecomment-1200115598:144,energy,energy,144,https://psicode.org,https://github.com/psi4/psi4/pull/2633#issuecomment-1200115598,1,['energy'],['energy']
Energy Efficiency,Wrong X2C energy when using cartesian functions,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1908:10,energy,energy,10,https://psicode.org,https://github.com/psi4/psi4/issues/1908,1,['energy'],['energy']
Energy Efficiency,"X 8AX ; * 6 0.000000 ( 0, 2) 7AA 8AX 9AB ; * 7 0.000000 ( 2, 0) 7AB 8AX 9AA ; * 8 -0.000000 ( 2, 2) 8AX 9AX ; * 9 -0.000000 ( 1, 1) 7AX 9AX . ==> MCSCF root 1 information <==. MCSCF Root 1 energy = -93.902550337672878. Active Space Natural occupation numbers:. A 1.999537 A 1.843676 A 0.156787. The 9 most important determinants:. * 1 -0.887365 ( 0, 0) 7AX 8AX ; * 2 -0.291143 ( 0, 2) 7AA 8AX 9AB ; * 3 -0.291143 ( 2, 0) 7AB 8AX 9AA ; * 4 0.206936 ( 2, 2) 8AX 9AX ; * 5 0.015212 ( 1, 1) 7AX 9AX ; * 6 0.000000 ( 1, 0) 7AX 8AB 9AA ; * 7 0.000000 ( 0, 1) 7AX 8AA 9AB ; * 8 -0.000000 ( 1, 2) 7AA 8AB 9AX ; * 9 -0.000000 ( 2, 1) 7AB 8AA 9AX ; *******************************************************************; *******************************************************************. As you can see, there is typically the same kind of sign for some determinants sharing a similar coefficient. For example, for the groundstate we have : 0.691216 ( 0, 1) 7AX 8AA 9AB and 0.691216 ( 1, 0) 7AX 8AB 9AA. However, in the context of a singlet spin symmetry, these determinants should present opposite signs. To check this, I used a personal code to build up from scratch the frozen core Hamiltonian associated to the (4,3) active space. I used for this the resulting Optimized MO coeff matrix obtained from SA-CASSCF Psi4. Diagonalizing this Hamiltonian gives the following two lowest states expressed in the active space : ; | Psi_0 > = 0.149|011011⟩ - 0.149|100111⟩ - 0.691|110110⟩ + 0.691|111001⟩; | Psi_1 > = 0.207|001111⟩ - 0.291|011110⟩ + 0.291|101101⟩ + 0.015|110011⟩ - 0.887|111100⟩; (NB : the HF determinant is |111100⟩ ). With this diagonalization, we clearly find same coefficients but with opposite signs. As a double check, I also computed the energy of these states and obtained : ; E_0 = -93.93144865003578 Ha; E_1 = -93.90255033754423 Ha. Which exactly coincides with the energy obtained in the Psi4 OUTPUT. Do you have a clue why such a pb arises in the Psi4 output ?. Thanks a lot for you answer",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2008:3371,energy,energy,3371,https://psicode.org,https://github.com/psi4/psi4/issues/2008,2,['energy'],['energy']
Energy Efficiency,Y; hf / heavy-aug-cc-pv(t+d)z * -149.65690150 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(t+d)z * -150.13698909 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(q+d)z * -150.17732219 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(t+d)z * -149.65690150 HF TOTAL ENERGY; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; hf / heavy-aug-cc-pv(d+d)z 0.00000000 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(d+d)z * -150.01845040 MP2 TOTAL ENERGY; ccsd / heavy-aug-cc-pv(d+d)z 0.00000000 CCSD TOTAL ENERGY; ccsd(t) / heavy-aug-cc-pv(d+d)z * -150.02005663 CCSD(T) TOTAL ENERGY; hf / heavy-aug-cc-pv(d+d)z 0.00000000 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(d+d)z * -150.01845040 MP2 TOTAL ENERGY; ---------------------------------------------------------------------------------------------------------. ==> Stages <==. ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Wt Energy [Eh] Scheme; ---------------------------------------------------------------------------------------------------------; scf hf / heavy-aug-cc-pv(q+d)z 1 -149.66713397 xtpl_highest_1; corl mp2 / heavy-aug-cc-pv([tq]+d)z 1 -150.20675446 corl_xtpl_helgaker_2; corl hf / heavy-aug-cc-pv([tq]+d)z -1 -149.67460090 corl_xtpl_helgaker_2; delta1 ccsd(t) / heavy-aug-cc-pv(d+d)z 1 -150.02005663 xtpl_highest_1; delta1 mp2 / heavy-aug-cc-pv(d+d)z -1 -150.01845040 xtpl_highest_1; ---------------------------------------------------------------------------------------------------------. ==> CBS <==. ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Energy [Eh] Scheme; ---------------------------------------------------------------------------------------------------------; scf hf / heavy-aug-cc-pv(q+d)z -149.66713397 xtpl_highest_1; corl mp2 / heavy-aug-cc-pv([tq]+d)z -0.53215356 corl_xtpl_helgaker_2; delta1 ccsd(t) - mp2 / heavy-aug-c,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1897:4500,Energy,Energy,4500,https://psicode.org,https://github.com/psi4/psi4/issues/1897,1,['Energy'],['Energy']
Energy Efficiency,"Yay, nesting levels reduced from 10 to 5 :-) . And I'm reassured to see ""3d"" in there. Looks like we're not doing wait-and-repeat anymore, but `MaxSeconds` available if travis habitually times out. LGTM",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/507#issuecomment-258979110:20,reduce,reduced,20,https://psicode.org,https://github.com/psi4/psi4/pull/507#issuecomment-258979110,1,['reduce'],['reduced']
Energy Efficiency,"Yeah did that. Now got; ```; + ctest -L smoketests; Test project /builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/tests; Start 7: casscf-sp; 1/12 Test #7: casscf-sp ........................***Failed 0.21 sec; Start 22: cc1; 2/12 Test #22: cc1 ..............................***Failed 0.06 sec; Start 132: dfmp2-1; 3/12 Test #132: dfmp2-1 ..........................***Failed 0.06 sec; Start 196: fcidump; 4/12 Test #196: fcidump ..........................***Failed 0.06 sec; Start 330: sapt1; 5/12 Test #330: sapt1 ............................***Failed 0.06 sec; Start 357: scf-property; 6/12 Test #357: scf-property .....................***Failed 0.06 sec; Start 372: tu1-h2o-energy; 7/12 Test #372: tu1-h2o-energy ...................***Failed 0.05 sec; Start 402: psi4numpy-rhf; 8/12 Test #402: psi4numpy-rhf .................... Passed 4.50 sec; Start 404: psi4numpy-rhf-hessian; 9/12 Test #404: psi4numpy-rhf-hessian ............ Passed 5.47 sec; Start 409: python-energy; 10/12 Test #409: python-energy .................... Passed 1.99 sec; Start 422: json-schema-1-gradient; 11/12 Test #422: json-schema-1-gradient ........... Passed 4.46 sec; Start 424: chemps2-scf-n2; 12/12 Test #424: chemps2-scf-n2 ...................***Failed 0.06 sec. 33% tests passed, 8 tests failed out of 12. Label Time Summary:; addon = 0.06 sec*proc (1 test); cart = 0.17 sec*proc (3 tests); casscf = 0.21 sec*proc (1 test); cc = 0.06 sec*proc (1 test); chemps2 = 0.06 sec*proc (1 test); df = 0.06 sec*proc (1 test); dfmp2 = 0.06 sec*proc (1 test); fcidump = 0.06 sec*proc (1 test); json = 4.46 sec*proc (1 test); properties = 0.06 sec*proc (1 test); psi = 17.03 sec*proc (12 tests); psi4numpy = 9.97 sec*proc (2 tests); python = 1.99 sec*proc (1 test); quicktests = 17.03 sec*proc (12 tests); sapt = 0.06 sec*proc (1 test); scf = 0.06 sec*proc (1 test); smoketests = 17.03 sec*proc (12 tests); tutorial = 0.05 sec*proc (1 test). Total Test time (real) = 17.19 sec. The following tests FAILED:; 	 7 - casscf-sp (Fai",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3020#issuecomment-1676514680:678,energy,energy,678,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1676514680,4,['energy'],['energy']
Energy Efficiency,"Yeah that unwanted root mentioned above, E = -75.086475619870, is a quintet apparently. You can get it directly by running this computation. set {; S 2.0; NUM_ROOTS 1; qc_module DETCI; calc_s_squared TRUE; r_convergence 3; }. Going directly for high-lying higher spin multiplicities can cause convergence problems (roundoff can cause the program to start to find lower-energy solutions of lower spin multiplicities). That is why I dropped the convergence criterion.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2075#issuecomment-770024893:369,energy,energy,369,https://psicode.org,https://github.com/psi4/psi4/issues/2075#issuecomment-770024893,1,['energy'],['energy']
Energy Efficiency,"Yeah we should sit down and try to sort out all the latest SAPT additions; and how they should be called. On Thu, Mar 5, 2020 at 12:56 PM Lori A. Burns <notifications@github.com>; wrote:. > right now, one gets (wfn) sapt0-inf through sapt(dft). in light of that; > new addition, plus outright sapt(dft) plus sapt0-d, take a wholistic looks; > at the arguments to energy(sapt*); >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/1835?email_source=notifications&email_token=AAXVA5X6PP6BNHUB4YWNW33RF7RTTA5CNFSM4LCPIX5KYY3PNVWWK3TUL52HS4DFUVEXG43VMWVGG33NNVSW45C7NFSM4IS3UY5Q>,; > or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AAXVA5TLWRLB4PCIU2BX74TRF7RTTANCNFSM4LCPIX5A>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1835#issuecomment-595374584:363,energy,energy,363,https://psicode.org,https://github.com/psi4/psi4/issues/1835#issuecomment-595374584,1,['energy'],['energy']
Energy Efficiency,"Yeah, I didn't think of higher multiplicity cases. There, the fix will be a little more involved I guess. `DF-MP2` (which is used also for DH-DFT) and CD MP2 in `DFOCC` crash, while conventional MP2 via `OCC` runs fine, but the correlation energy is 0 (Is that correct? Shouldn't there be some same-spin contribution?).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1995#issuecomment-682331057:240,energy,energy,240,https://psicode.org,https://github.com/psi4/psi4/issues/1995#issuecomment-682331057,1,['energy'],['energy']
Energy Efficiency,"Yeah, I'll dive into it when I get some free time. On Fri, Mar 24, 2017 at 10:40 PM, Daniel Smith <notifications@github.com>; wrote:. > Looks like this isnt handling custom basis sets correctly and a few other; > python pieces like inline for-based lists and dicts. Failing tests are:; >; > The following tests FAILED:; > 	 60 - cc49 (Failed); > 	 93 - cubeprop (Failed); > 	120 - dfmp2-1 (Failed); > 	187 - mints2 (Failed); > 	206 - mp2-property (Failed); > 	235 - opt1 (Failed); > 	256 - psimrcc-ccsd_t-1 (Failed); > 	257 - psimrcc-ccsd_t-2 (Failed); > 	258 - psimrcc-ccsd_t-3 (Failed); > 	262 - psimrcc-pt2 (Failed); > 	263 - psimrcc-sp1 (Failed); > 	268 - pywrap-alias (Failed); > 	310 - stability1 (Failed); > 	322 - options1 (Failed); > 	335 - dftd3-energy (Failed); > 	339 - gdma-gdma1 (Failed); >; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/pull/658#issuecomment-289183019>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AAnI_ue38d1uwecW7_m5NMmKhLLmUZyoks5rpH6agaJpZM4MjEU7>; > .; >. -- ; -Robert",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/658#issuecomment-289222048:756,energy,energy,756,https://psicode.org,https://github.com/psi4/psi4/pull/658#issuecomment-289222048,1,['energy'],['energy']
Energy Efficiency,"Yeah, it's perfectly fine to split things up into multiple PRs. One sensible order I can come up with is:. 1. Edit the incremental Fock in the derived `DirectJK` class so that it is efficient and maintainable (no SCF iteration counts associated with the object, minimal number of matrices cached on the object, etc.) [some other PR]; 2. Move this improved incremental Fock to the parent `JK` class. [this PR]. In a previous comment, I suggested doing away with the cached `J`/`K`/`wK`/`dJ`/`dK`/`dwK` matrices by changing the behavior of the `JK` object so that the buffers aren't cleared between SCF iterations. If you find that difficult to do, I think an acceptable compromise would be to retain those cached matrices, but initialize them in the SCF driver (rather than make them a property of the JK object).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2682#issuecomment-1231764838:182,efficient,efficient,182,https://psicode.org,https://github.com/psi4/psi4/pull/2682#issuecomment-1231764838,1,['efficient'],['efficient']
Energy Efficiency,"Yeah, that code isn't efficient to use. That's probably why it wasn't exported. Could we help you to update the code instead?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2239#issuecomment-876585963:22,efficient,efficient,22,https://psicode.org,https://github.com/psi4/psi4/issues/2239#issuecomment-876585963,1,['efficient'],['efficient']
Energy Efficiency,"Yeah, the use of `Z` is going beyond what it was intended to do and I'm to blame for the ECP instances of that. I think we need to track both the effective charge and the atomic number separately. And perhaps a different entry to handle ghostedness. Happy to help to fix this, but will need to consult with SAPT/CP folks first to make sure the design is right in terms of ghosted behavior. Sounds like a good conference call topic. Finding all usages and changing them will be easy with QtCreator.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1109#issuecomment-409423509:156,charge,charge,156,https://psicode.org,https://github.com/psi4/psi4/pull/1109#issuecomment-409423509,1,['charge'],['charge']
Energy Efficiency,"Yeah, this is just too big a problem for DETCI's poor CISD capabilities. I answered this in the forums. Basically, if you optimize the code to do full CI very efficiently, you can wind up with an algorithm that creates intermediate data that is small enough to work fine for full CI, but blows up for CISD and makes the code run out of memory. And indeed, that's how I wrote the code, because we didn't care about CISD when we wrote it. I'm pretty sure the molecule reported here is big enough to run into this problem. I issued a PR to update the documentation to warn users away from DETCI CISD unless it's a tiny molecule (with a small basis).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1685#issuecomment-515615749:159,efficient,efficiently,159,https://psicode.org,https://github.com/psi4/psi4/issues/1685#issuecomment-515615749,1,['efficient'],['efficiently']
Energy Efficiency,"Yeah, we should put a catch in the code to not allow frequency() on an atom. On Thu, Mar 31, 2016 at 10:15 PM, Ryan Richard notifications@github.com; wrote:. > Admittedly the error message should be updated to be more informative, but; > the short answer is a single atom doesn't have a vibrational frequency.; > ; > More generally any molecular system has 3 times the number of atoms, total; > degrees of freedom; the difference between that and the number of external; > degrees of freedom is the internal degrees of freedom, i.e. the; > vibrations. An atom has three external degrees of freedom and thus in turn; > has 0 internal degrees of freedom.; > ; > Hope that helps.; > On Mar 31, 2016 8:07 PM, ""drhaney"" notifications@github.com wrote:; > ; > > Attempting frequency() on atomic species fails irrespective of charge,; > > multiplicity, and reference type.; > > ; > > Typical error message:; > > ; > > 1 displacements needed.; > > 1; > > ; > > An error has occurred. Traceback:; > > : basic_string::replace: File """", line 26, in; > > ; > > File ""/home/drhaney/miniconda/share/psi4/python/driver.py"", line 1840, in; > > frequency; > > psi4.thermo(wfn, wfn.frequencies()); > > ; > > Thanks,; > > -drhaney, -- that's ""D. R."", not Doctor.; > > ; > > Typical input file attached (C atom, neutral triplet).; > > C.txt https://github.com/psi4/psi4/files/198782/C.txt; > > ; > > —; > > You are receiving this because you are subscribed to this thread.; > > Reply to this email directly or view it on GitHub; > > https://github.com/psi4/psi4/issues/332; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/332#issuecomment-204210196",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/332#issuecomment-204212411:819,charge,charge,819,https://psicode.org,https://github.com/psi4/psi4/issues/332#issuecomment-204212411,1,['charge'],['charge']
Energy Efficiency,"Yep, suggested change heals it. Matt or you can include it among your commits. ```; -#pragma omp parallel for num_threads(nthreads_) schedule(static, nao_ / nthreads_); +#pragma omp parallel for num_threads(nthreads_) schedule(static) //, nao_ / nthreads_); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/961#issuecomment-384640906:133,schedul,schedule,133,https://psicode.org,https://github.com/psi4/psi4/pull/961#issuecomment-384640906,2,['schedul'],['schedule']
Energy Efficiency,"Yep, what we have here is a casualty of one of my less favorite topics, the type A vs. type B ghost ([details](https://github.com/psi4/psi4/issues/909#issuecomment-363473061)). By subtracting out the ECP electrons [here](https://github.com/psi4/psi4/blob/master/psi4/src/export_mints.cc#L182) and resetting `Z`, it's wiping out the only evidence of those atoms being ghosted (compare `gh=1` for extract_subsets ghosting vs. `gh=0` for `@/Gh()` ghosting). Printing is `printf(""ECP: preZ=%f TAN=%d - ncore=%d = Z=%d gh=%d\n"", mol->Z(atom), mol->true_atomic_number(atom), ncore, Z, mol->atom_entry(atom)->is_ghosted());`. ```; # @/Gh() ghosted; ECP: preZ=0.000000 TAN=1 - ncore=0 = Z=1 gh=0; ECP: preZ=0.000000 TAN=53 - ncore=28 = Z=25 gh=0; ECP: preZ=1.000000 TAN=1 - ncore=0 = Z=1 gh=0; ECP: preZ=53.000000 TAN=53 - ncore=28 = Z=25 gh=0; # extract_subsets ghosted; ECP: preZ=0.000000 TAN=1 - ncore=0 = Z=1 gh=1; ECP: preZ=0.000000 TAN=53 - ncore=28 = Z=25 gh=1; ECP: preZ=1.000000 TAN=1 - ncore=0 = Z=1 gh=0; ECP: preZ=53.000000 TAN=53 - ncore=28 = Z=25 gh=0; >>> grep 'Final E' i843_c.out ; @DF-RHF Final Energy: -594.38702051330188; @DF-RHF Final Energy: -297.22774750033528; ```. ```; memory 1800 Mb; set guess core. molecule probe1 {; @H 0.0 0.0 0.0; @I 1.5 0.0 0.0; H 0.0 3.0 0.0; I 1.5 3.0 0.0; symmetry c1; noreorient; }; probe1.update_geometry(); probe1.print_out(); e_probe = energy('hf/def2-svpd'). clean(). molecule probe3 {; H 0.0 0.0 0.0; I 1.5 0.0 0.0; --; H 0.0 3.0 0.0; I 1.5 3.0 0.0; symmetry c1; noreorient; }; probe3.update_geometry(); probe3gh = probe3.extract_subsets(2, 1); probe3gh.update_geometry(); probe3gh.print_out(); e_probe = energy('hf/def2-svpd'); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/843#issuecomment-397970352:1105,Energy,Energy,1105,https://psicode.org,https://github.com/psi4/psi4/issues/843#issuecomment-397970352,4,"['Energy', 'energy']","['Energy', 'energy']"
Energy Efficiency,"Yes Peter, and then use density cube as valence_density.cube input - AND set non ECP using atoms to 0, as default in chargemol is having last nobel atom as core electrons",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1113#issuecomment-412874936:117,charge,chargemol,117,https://psicode.org,https://github.com/psi4/psi4/issues/1113#issuecomment-412874936,1,['charge'],['chargemol']
Energy Efficiency,"Yes, I was using Intel 2018 and GCC 5.2 and 7.2, so those are all fully C++11 compliant. If you'd like to prevent OpenBLAS from building with unsatisfactory compilers, you're welcome to adapt https://github.com/psi4/psi4/blob/master/cmake/custom_cxxstandard.cmake .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1009#issuecomment-392261658:186,adapt,adapt,186,https://psicode.org,https://github.com/psi4/psi4/issues/1009#issuecomment-392261658,1,['adapt'],['adapt']
Energy Efficiency,"Yes, IIRC we need to make sure that `CCEnergyWavefunction`'s vars is updated *not* `ref_wfn`'s ? but just in energy modules, lambda/density/eom/response do not have proper wfns so they need to update whatever wfn they were passed [*Warning: It might not have the same name in all of those modules*]",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/943#issuecomment-376675608:109,energy,energy,109,https://psicode.org,https://github.com/psi4/psi4/issues/943#issuecomment-376675608,1,['energy'],['energy']
Energy Efficiency,"Yes, adding a header=true is possible. What conv crit changed so you know? Geom opt, scf, cc, other? I suspect geom opt since we switched that out in Dec. . So in your Jupiter notebook, you're importing psi4, setting an output file (soon to incl header), running a single job(cclib consumable) closing that output file, processing or storing it, setting another output file, running another single job?. I ask b/c the Jupiter route usually amalgamates lots of outputs (that cclib won't like). Another route would be to have a node that prints the header at each energy/gradient/Hess/opt/freq call.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2893#issuecomment-1461056596:562,energy,energy,562,https://psicode.org,https://github.com/psi4/psi4/issues/2893#issuecomment-1461056596,1,['energy'],['energy']
Energy Efficiency,"Yes, but that needs to be done automatically when the user specifies -nl in the energy call.; I just cant picture all the work flow in my head right now. Maybe next week I have more time for this. As a side note: the current changes in compute_gradient+hessian in empirical_dispersion.py are not working correctly. (they should never be called since we need numerical gradients, but still...)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/914#issuecomment-369527099:80,energy,energy,80,https://psicode.org,https://github.com/psi4/psi4/pull/914#issuecomment-369527099,1,['energy'],['energy']
Energy Efficiency,"Yes, by testing the guess energy for H atom.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3138#issuecomment-2056135687:26,energy,energy,26,https://psicode.org,https://github.com/psi4/psi4/pull/3138#issuecomment-2056135687,1,['energy'],['energy']
Energy Efficiency,"Yes, it seems to run fine! I am calling DETCI multiple times within the test itself, since I wanted to test SF, SF-IP, and SF-EA cases; I can reduce it to just SF-IP if that will be more stable in the long run. I've also just added some docs; let me know if there's anything else I need to do. Thanks!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1855#issuecomment-607977205:142,reduce,reduce,142,https://psicode.org,https://github.com/psi4/psi4/pull/1855#issuecomment-607977205,1,['reduce'],['reduce']
Energy Efficiency,"Yes, most likely the DMRG code is not adapted to use density fitting, so it; has to go off and compute all the usual 2-electron integrals before it; starts up. On Tue, Nov 24, 2015 at 6:58 PM, Lori A. Burns notifications@github.com; wrote:. > I can't say exactly, but we usually put in that flag if the scf has been; > done DF, but the subsequent post-SCF needs for 2e- integrals.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/194#issuecomment-159443070.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/194#issuecomment-159447131:38,adapt,adapted,38,https://psicode.org,https://github.com/psi4/psi4/issues/194#issuecomment-159447131,1,['adapt'],['adapted']
Energy Efficiency,"Yes, one of the cases where a stability analysis is detrimental is; closed-shell benzene with UHF. The closed-shell solution is unstable and; the stable UHF solution looks like a singlet hexaradical... Unfortunately I; believe this is related to the intrinsic spin contamination in UHF. There; are specific methods that can constrain or project UHF solutions to; alleviate this problem.; ROHF also avoids spin contamination, but lacks description of spin; polarization, which may sometimes be of interest. 2016-01-14 9:43 GMT-05:00 ssh2 notifications@github.com:. > To Jerome's point, I would agree that for UHF doing stability analysis; > helps a lot. However, we have also seen cases when stability analysis; > severely breaks spin symmetry and converges on the wrong (or mixed) spin; > state instead of the lowest energy root of desired spin. So one should be; > careful about this issue.; > ; > Best wishes,; > ; > Alexander.; > ; > On Thu, Jan 14, 2016 at 9:38 AM, Alexander Sokolov <; > alexander.y.sokolov@gmail.com> wrote:; > ; > > I would add that lately we have seen a lot of problems with UHF and ROHF; > > converging on a wrong state for open-shells in Psi4. Although new; > > stability; > > analysis code helps a lot in fixing some of the problems (for UHF), for; > > many of these systems finding the lowest root is quite non-trivial and is; > > accompanied by many SCF convergence issues, as well as symmetry-breaking; > > issues (UHF). Things get a lot worse for transition metal compounds (even; > > simple ones, like Fe(CO)5). The most helpful solution is to start with; > > basis set projection from a small basis, but this strategy doesn't always; > > work. Sometimes, combining stability analysis root search and basis set; > > projection helps.; > > ; > > Indeed, other codes (particularly, MOLPRO) sometimes do better job in; > > finding lowest-energy solutions for systems of this type. Usually, after; > > investing some time, it is possible to find the necessary solution for",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/211#issuecomment-171662622:817,energy,energy,817,https://psicode.org,https://github.com/psi4/psi4/issues/211#issuecomment-171662622,1,['energy'],['energy']
Energy Efficiency,"Yes, one way is to compare your energies at the minimum (r_e) from the dissociated energy (eg. the 30 angstrom value) and correct by adding zero point energy:; ```; De = E(30A) - E(r_e) + ZPE; ```; Another way is to do a counterpoise-corrected calculation, which due to the charges is a little more tricky to set up:; ```; mol = psi4.core.Molecule.from_arrays(; elez=[7, 7],; fragment_separators=[1],; fix_com=True,; fix_orientation=True,; fix_symmetry='c1',; fragment_multiplicities=[2, 1],; fragment_charges=[0, 1],; molecular_charge=1,; molecular_multiplicity=2,; geom= [; 0.000, 0.000, 0.000000,; 0.000, 0.000, 1.080176]); activate(mol). ...; set reference uks; energy(""method/basis"", bsse_type=""cp""); ```; where 1.080176 is the `re` from above, and i'm using UKS assuming it's a DFT calc (for wavefunction theory the alternative is UHF). The other text is pretty self-explanatory. You still have to correct the resulting interaction energy by the ZPE of N2+, though. (I should note the energies calculated above are negative - i.e. the ""complexation"" of N with N+ is exothermic; in the paper they're quoting them as positive.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1600#issuecomment-483543201:83,energy,energy,83,https://psicode.org,https://github.com/psi4/psi4/issues/1600#issuecomment-483543201,5,"['charge', 'energy']","['charges', 'energy']"
Energy Efficiency,"Yes, that ""allow edits by maintainers"" checkbox confers surprising powers.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1017#issuecomment-388644453:67,power,powers,67,https://psicode.org,https://github.com/psi4/psi4/pull/1017#issuecomment-388644453,1,['power'],['powers']
Energy Efficiency,"Yes, that's a handy Molpro page to keep bookmarked, thanks!. sadly, `energy('zapt2')` is a different call with a different answer. . ``` ==> Starting MPn CI Computation <==. CalcInfo_->escf = -25.943614318544558; CalcInfo_->e0 = -20.492192306874799; CalcInfo_->enuc = 4.919538206883576; CalcInfo_->e1 = -10.370960218553336. n Corr. Energy E(ZAPTn) n Corr. Energy E(ZAPTn). 0 0.000000000000000 -15.572654099991222; 1 -10.370960218553336 -25.943614318544558; 1 -10.370960218555073 -25.943614318546295; 2 -0.059970897144711 -26.003585215689270 2 -0.059970897144711 -26.003585215689270; 3 -0.015564779310290 -26.019149994999559. ZAPT2 energy saved. EZAPTn = -26.0035852156893; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/311#issuecomment-597871392:69,energy,energy,69,https://psicode.org,https://github.com/psi4/psi4/issues/311#issuecomment-597871392,4,"['Energy', 'energy']","['Energy', 'energy']"
Energy Efficiency,"Yes, the shortcoming of (T) on non-equilibrium structures is know.; PSI4 has UBCC(T) `energy('bcc(t)')` on a ROHF reference, but only conventional integrals with the `ccenergy` module. Maybe you already found it. You may want to have a look at Piecuch's methods (and his group's general work) for which now there is a plugin available https://github.com/piecuch-group/psi4_cct3 .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1863#issuecomment-611923735:86,energy,energy,86,https://psicode.org,https://github.com/psi4/psi4/issues/1863#issuecomment-611923735,1,['energy'],['energy']
Energy Efficiency,"Yes, we have recently pushed a very large update to how data handling is passed in Psi4. Please change your input to the following:. ``` python; scf_e, scf_wfn = energy('scf', return_wfn=True); oeprop(scf_wfn, ""MULLIKEN_CHARGES""); ```. Effectively, there is no longer a global wavefunction and you must explicitly pass wavefunctions around. Sowreap should fail at the moment (has not had a wavefunction_pass update yet). Can you please post the sapt4 error and the git reference hash?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/260#issuecomment-184837562:162,energy,energy,162,https://psicode.org,https://github.com/psi4/psi4/issues/260#issuecomment-184837562,1,['energy'],['energy']
Energy Efficiency,"Yes, we're planning on a series of release candidates after the necessary features are in wherein only bug fixes permitted. For the most part, we work on a nightly build release schedule, but yes, we do want 1.0.0 to be durable. Thanks for the new term, ""brown-paperbag"".",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/213#issuecomment-178167204:178,schedul,schedule,178,https://psicode.org,https://github.com/psi4/psi4/issues/213#issuecomment-178167204,1,['schedul'],['schedule']
Energy Efficiency,"Yes, you can use `from_arrays` like below that takes [these arguments](https://github.com/MolSSI/QCElemental/blob/master/qcelemental/molparse/from_arrays.py#L136-L293). Then you have to either activate the molecule (`psi4.geometry()` does this behind the scenes) or pass the molecule explicitly to each calculation line. `from_arrays` is the same fn that `geometry()` is calling after parsing the string. If you want to get the arrays back out of a built molecule, there's a `to_dict()` fn. Let me know if there's other functionality that would be handy but you can't find. Also, be aware of running in schema mode with json in and json out. ```; h2o = psi4.core.Molecule.from_arrays(elem=[""O"", ""H"", ""H""], units=""Angstrom"", geom=[; 0.000000000000, 0.000000000000, -0.065775570538, ; 0.000000000000, -0.759061990794, 0.521953018295, ; 0.000000000000, 0.759061990794, 0.521953018295]) ; psi4.activate(h2o); # activate -or- pass into fn; psi4.energy(..., molecule=h2o); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2553#issuecomment-1105670625:940,energy,energy,940,https://psicode.org,https://github.com/psi4/psi4/issues/2553#issuecomment-1105670625,1,['energy'],['energy']
Energy Efficiency,"Yet another issue [rescued from the the forums](http://forum.psicode.org/t/problem-with-tungsten-dft-and-hf-scf-unreasonable-energies/1129/2). The user reports using conda's 1.2.1 to attempt to converge a molecule with ECPs and observes a spread in deltaE between reactant and product of over 1000 kcal/mol, depending on basis set. Suspecting some catastrophic case of landing on an excited state, I ran a modified version of the input file on the cluster, using 1.3a2.dev122. I doubled the memory allocation and replaced the attempt to unpickle with simply calling the energy with `'b3lyp'` directly. While I was able to reproduce his small-basis energy, the large-basis energy never even began. Psi segfaulted after `Total Energy Delta E RMS |[F,P]|`, and `std::cout` got hit with over 500 counts of `Failed to converge:`, which can only happen due to [this line](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/ecpint.cc#L492). So the ECP integrals won't even converge for me, and the SCF converges to garbage for our user. Because this is a transition metal, we can't immediately rule out excited state problems, but `Failed to converge:` points to ECP problems. User's Input File:; ```; # This is a psi4 input file auto-generated from the database() wrapper. core.print_out('\n'); p4util.banner(' Database MOR41 Computation: Reagent MOR41-PR07-reagent \n '); core.print_out('\n'). molecule dbmol {; units Angstrom; no_com; no_reorient; 0 1; W -0.000070400000 -0.017989600000 -0.146457100000; C 0.000157200000 1.955377300000 -0.631545200000; O 0.000411800000 3.068043100000 -0.986288700000; C 0.000004600000 0.271128000000 1.825131000000; O 0.000003100000 0.436870000000 2.983755900000; C 0.000079000000 -2.055167300000 -0.056719200000; O 0.000369700000 -3.220382300000 -0.103637600000; H 0.422788400000 -0.287137400000 -1.984721800000; H -0.422970800000 -0.287404200000 -1.985319300000; P -2.498968200000 0.054091800000 -0.052469100000; C -3.398360300000 -0.535031900000 -1.584174",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1338:570,energy,energy,570,https://psicode.org,https://github.com/psi4/psi4/issues/1338,4,"['Energy', 'energy']","['Energy', 'energy']"
Energy Efficiency,You also need to put the 2nd layer into the molecule section to have it enter the calculation.; Adding surrounding point charges in place of Na Cl atoms from missing layers/edges is a common way to do slabs in molecular codes (point charge embedding). Stabilises the electrostatics and reduces edge effects. Should help to converge the SCF as well. I'd suggest trying def2-SVP and a (meta)GGA and first see if you can converge the SCF before doing a geometry optimisation.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2709#issuecomment-1232961209:121,charge,charges,121,https://psicode.org,https://github.com/psi4/psi4/issues/2709#issuecomment-1232961209,3,"['charge', 'reduce']","['charge', 'charges', 'reduces']"
Energy Efficiency,"You can run it like this:; ```; set scf_type direct; energy('scf',df_functional='wb97x'). ```; But first I would carefully compare if the gradient is actually OK.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/867#issuecomment-346631515:53,energy,energy,53,https://psicode.org,https://github.com/psi4/psi4/issues/867#issuecomment-346631515,1,['energy'],['energy']
Energy Efficiency,"You clearly use the right git commit of psi4 (8e01b1f), but the plugin API is clearly wrong. The following is copied from a message above:. ```; An error has occurred Py-side; Traceback:; : Python argument types in; psi4.plugin(str); did not match C++ signature:; plugin(std::string, boost::shared_ptrpsi::Wavefunction): File """", line 48, in . File ""/home/LUCA/psi-master_18_02.2016/psi4-0.5/share/python/driver.py"", line 586, in energy; wfn = procedures['energy']lowername. File ""./../dmrg/pymodule.py"", line 52, in run_dmrg; returnvalue = psi4.plugin('dmrg.so'); ```. For the record I copy my file 'pymodule.py' here:. ```; import psi4; import re; import os; import inputparser; import math; import warnings; from driver import *; from wrappers import *; from molutil import *; import p4util; from p4xcpt import *. def run_dmrg(name, **kwargs):; r""""""Function encoding sequence of PSI module and plugin calls so that; dmrg can be called via :py:func:`~driver.energy`. For post-scf plugins. >>> energy('dmrg'). """"""; lowername = name.lower(); kwargs = p4util.kwargs_lower(kwargs). # Your plugin's psi4 run sequence goes here; #psi4.set_global_option('BASIS', 'sto-3g'); psi4.set_local_option('MYPLUGIN', 'PRINT', 1). # Compute a SCF reference, a wavefunction is return which holds the molecule used, orbitals; # Fock matrices, and more; print('Attention! This SCF is density-fitted.'); ref_wfn = kwargs.get('ref_wfn', None); if ref_wfn is None:; ref_wfn = scf_helper(name, **kwargs). # Call the Psi4 plugin; # Please note that setting the reference wavefunction in this way is ONLY for plugins; dmrg_wfn = psi4.plugin('dmrg.so', ref_wfn). return dmrg_wfn. # Integration with driver routines; procedures['energy']['dmrg'] = run_dmrg. def exampleFN():; # Your Python code goes here; pass; ```. As you can see it calls. ```; dmrg_wfn = psi4.plugin('dmrg.so', ref_wfn); ```. instead of. ```; returnvalue = psi4.plugin('dmrg.so'); ```. So have you generated the files **init**.py, pymodule.py etcetera with",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/266#issuecomment-186113504:2691,energy,energy,2691,https://psicode.org,https://github.com/psi4/psi4/issues/266#issuecomment-186113504,1,['energy'],['energy']
Energy Efficiency,"You may check energy and gradients with respect to DFOCC CD-OMP2.5 code. In the case of energy with CD tolerance of 10^-14, CD becomes exact. Hence, you may verify your changes with respect to DFOCC module. In the case of OMP2.5 gradient you may compute gradient with a 5 point formula again with CD-OMP2.5 energies. Alternatively, you may use DF-OMP2.5 gradient in a small primary basis set with a very large auxiliary basis. As long as you can reproduce my results in OMP2.5 paper (with CDS) or you can get the same results with CD-OMP2.5, you are welcome to make any change in OCC module. Frankly speaking, I have focused on DFOCC since 2014. @JonathonMisiewicz @loriab",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1808#issuecomment-592130784:14,energy,energy,14,https://psicode.org,https://github.com/psi4/psi4/issues/1808#issuecomment-592130784,2,['energy'],['energy']
Energy Efficiency,"You may verify your changes with respect to DFOCC CD-OMP2.5 code. In the case of energy with CD tolerance of 10^-14, CD becomes exact. Hence, you may verify your changes with respect to DFOCC module. As long as you can reproduce my results in OMP2.5 paper (with CDS) or you can get the same results with CD-OMP2.5, you are welcome to make any change in OCC module. Frankly speaking, I have focused on DFOCC since 2014. @JonathonMisiewicz @loriab",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1809#issuecomment-592131837:81,energy,energy,81,https://psicode.org,https://github.com/psi4/psi4/pull/1809#issuecomment-592131837,1,['energy'],['energy']
Energy Efficiency,"You mean a standard format for point charge files for QMMM? Not that I know of. ; I know the AMBER QM/MM interface a bit, and there are all kinds of formats for different QM programs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1881#issuecomment-625897093:37,charge,charge,37,https://psicode.org,https://github.com/psi4/psi4/issues/1881#issuecomment-625897093,1,['charge'],['charge']
Energy Efficiency,"You should not have made those graphs. All you know for sure is that the error is less than 1 micro hartree. You cannot tell the difference between 1.0 e-7 and 1.5 e-7, but people read graphs as if you can tell the difference between your data points. This is also why you can't just present graphs. You need to be absolutely sure that your labels are clear, and that somebody who isn't you will be able to figure out what the graph means. If you need to add a sentence to explain them, do so. I request additional benchmarks so we can get more precise estimates on how much error these techniques introduce. Can you increase energy convergence to `1e-10`?. Because this PR isn't coming in until 1.5 anyways, I'm going to turn my attention to other things for a while.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2155#issuecomment-821266004:626,energy,energy,626,https://psicode.org,https://github.com/psi4/psi4/pull/2155#issuecomment-821266004,1,['energy'],['energy']
Energy Efficiency,"You would need to make your own wfn file first. The serial-wfn test seems fine for testing:. ```; molecule mol {; 0 1; O 0.0 0.0 0.0; H 1.0 0.0 0.0; H -.7 0.7 0.0; symmetry c1; }; memory 4 GiB; set {; basis sto-3g; guess sad; active [7]; }; # make a wavefunction; e, wfn_old = energy('hf', return_wfn=True). # write the wavefunction to file; wfn_old.to_file('my_wfn'). # read wavefunction from file; wfn_new = Wavefunction.from_file('my_wfn'); #wfn_new.set_basisset(""DF_BASIS_SCF"", core.BasisSet.zero_ao_basis_set()); energy('casscf',ref_wfn=wfn_new); ```. I notice now that I get a segfault at the `Properties computed using the CASSCF density matrix`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1871#issuecomment-615439545:277,energy,energy,277,https://psicode.org,https://github.com/psi4/psi4/issues/1871#issuecomment-615439545,2,['energy'],['energy']
Energy Efficiency,"You're correct: DETCI only calculates excited states with the same irrep as the reference, and there is no keyword to select irrep symmetry directly. It's been a few years since I've had to worry about diatomic symmetry, but let's see if I remember how this works. The two lowest energy singlet Pi gerade states are going to be [Be]p+ap-b and [Be]p-ap+b. However, Psi4 doesn't believe in complex orbitals. Ignoring normalization, p+ = px + i py, and p- = px - i py. Then using multilinearity of determinants, our states become (pxa + i pya)(pxb - i pyb) and (pxa - i pya)(pxb + i pyb) equalling (pxa pxb + i pya pxb - i pxa pyb + pya pyb) and (pxa pxb - i pya pxb + i pxa pyb + pya pyb). However, Psi4 doesn't believe in imaginary numbers. Taking the plus linear combination gives us (pxa pxb + pya pyb), and taking the - linear combination and normalizing away i gives us (pya pxb + pxa pyb). The conclusion of all this math is that because Psi4 doesn't use complex orbitals or complex linear combinations, the electronic states you're looking for are simply **not** going to be well-described by a single (real) Slater Determinant. The only solution I see is to make peace with that and modify your target symmetry to match one of those determinants. pxa pxb does not look like a diradical to me.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1907#issuecomment-643464569:280,energy,energy,280,https://psicode.org,https://github.com/psi4/psi4/issues/1907#issuecomment-643464569,1,['energy'],['energy']
Energy Efficiency,"You're definitely interested in H-by-E, not H-by-G?. the ground rules; * Outright cc, mp2, hf, etc. calculations are controlled by cc_type, mp2_type, hf_type, etc. ; * In a CBS, if a needed component can be got for free, it is taken, regardless of type. ; * Practically, ""for free"" are only active for energies, since there's only one known separable gradient. ; * Also, it's not smart enough to harvest an mp2 findif derivative from a ccsd(t) findif derivative. I haven't studied your evidence in detail, but conv mp2 in energy(cbs), where it can be got from conv ccsd(t), and df mp2 in freq(cbs), where mp2 is an outright calc and thus governed by mp2_type, sounds plausible. I would expect gradient to behave like freq, though. Possible complications are that some modules are spotty about returning mp2 from ccsd(t), so I'd need to look into exactly what's running. #1850 fixes several of these and will probably heal the HF=0.0, too. df/conv not behaving as you expect is a larger issue. I have some plans for tighter control.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1897#issuecomment-632721824:522,energy,energy,522,https://psicode.org,https://github.com/psi4/psi4/issues/1897#issuecomment-632721824,1,['energy'],['energy']
Energy Efficiency,"Your analysis of inconsistency and proposed fix are totally reasonable. But I disagree and rather have the opposite complaint about the Molecule class – that Z returns 0 instead of atomic number for ghost atoms so that function is actually conflating two independent quantities. mass is doing the right thing. The reason nonzero quantities are stored for ghost atoms in a CoordEntry is because the atoms can change their ghostedness upon `extract_subsets`, `activate_all_fragments`, etc. This leads to two tiers of ghostedness. The first are those that are read in as ghosts `@C` and get 0 Z and charge from the start. The others are those that are read in as real, then have their ghostedness changed on the fly. Note that Molecule internal fns sometimes have to check both `Molecule.fragment_types_` and `CoordEntry.ghost_` to get the full state of the Molecule. I've taken the back-away-slowly approach to ghosts in Molecule. And I have some memory of full-real-mol --> ghost-fragment-mol --> full-real-mol not actually being able to accomplish that last step. We tend to clone-manipulate-discard Mols these days rather than transform them internally, so our tests may not have noticed. In the [molrec dictionary repr](https://github.com/loriab/psi4/blob/pyvib2/psi4/driver/qcdb/molparse/tofrom.py#L78-L113) of a molecule, I've dropped fragment_types and consolidated the ghostedness. I've tried to keep the fields either totally independent (Z from real) or tied together (Z and symbol; to a lesser extent A, Z, symbol, mass). As far as getting things working for you, i'm inclined to suggest letting sleeping ghosts lie as far as internal Molecule structure. But go ahead and write a `molecular_weight` fn that accounts for both types of ghostedness internally and has a required bool argument as to whether or not mass of ghosts should be accounted for. Other opinions or rebuttals welcome.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/909#issuecomment-362856324:596,charge,charge,596,https://psicode.org,https://github.com/psi4/psi4/issues/909#issuecomment-362856324,1,['charge'],['charge']
Energy Efficiency,"Yup - adding the missing ```reset_occ = True``` fixes the issue -- however, the guess energy becomes very bad. (I'm not sure this can be solved; you'd just want to use a basis guess from a smaller one with the same ECP!). Anyway, the fix is in the ```sad_rohf``` branch, which will be merged for #1429. Unfortunately, the merge doesn't appear to be going anywhere until the ECPs are fixed, since the ```dfmp2-ecp``` test is producing junk if you change the guess, see #1433 . And this is exactly what happens with your example as well - once the occupations have been changed, the calculation gives the nonsensical result; ```; @DF-RHF iter 100: -259.15000393594977 5.10693e-09 3.69243e-01 DIIS. PsiException: Could not converge SCF iterations in 100 iterations.; ```; It's looking very much like the ECP Hamiltonian is asymmetric. There's no way the DIIS error should be so large with such a small energy change.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1439#issuecomment-449015958:86,energy,energy,86,https://psicode.org,https://github.com/psi4/psi4/issues/1439#issuecomment-449015958,2,['energy'],['energy']
Energy Efficiency,"Yup, bet were hitting a `num_threads(nthreads_) schedule(static, 0)` there. We can add a bit of logic to ensure this doesn't go below 1. LLVM is smarter than GCC there apparently.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/961#issuecomment-384643478:48,schedul,schedule,48,https://psicode.org,https://github.com/psi4/psi4/pull/961#issuecomment-384643478,1,['schedul'],['schedule']
Energy Efficiency,[From forums.](http://forum.psicode.org/t/difficulties-converging-uks-energies/1757/2). ```; set_num_threads(8). molecule mol {; 1 2; C 0.81874699 0.86417234 0.18828612; H 1.46611361 1.71666767 0.34472141; C 1.36899712 -0.39052394 -0.06669818; H 2.44303637 -0.51186194 -0.11057444; C 0.53437860 -1.48849320 -0.27188804; H 0.96084825 -2.46156422 -0.47550749; C -0.84911561 -1.33050735 -0.21989643; H -1.49706942 -2.18186028 -0.37955321; C -1.39948546 -0.07603020 0.04043417; H -2.47268667 0.04490778 0.09338206; C -0.56529230 1.02140336 0.24227921; H -0.99255667 1.99366131 0.44625817; unit angstrom; }. set basis cc-pVDZ; set d_convergence 1e-9; set e_convergence 1e-9; set reference uks. energy('PBE0'); ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/888#issuecomment-619287285:689,energy,energy,689,https://psicode.org,https://github.com/psi4/psi4/issues/888#issuecomment-619287285,1,['energy'],['energy']
Energy Efficiency,[MBIS/Charge Partitioning Feature] Added The Calculation of Atomic Volumes,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2056:6,Charge,Charge,6,https://psicode.org,https://github.com/psi4/psi4/pull/2056,1,['Charge'],['Charge']
Energy Efficiency,"[MiB]: 375; Algorithm: Core; Integral Cache: NONE; Schwarz Cutoff: 1E-12; Fitting Condition: 1E-10. => Auxiliary Basis Set <=. Basis Set: (3-21G AUX); Blend: DEF2-SVP-JKFIT; Number of shells: 18; Number of basis function: 50; Number of Cartesian functions: 50; Spherical Harmonics?: false; Max angular momentum: 2. Minimum eigenvalue in the overlap matrix is 4.0357381281E-01.; Using Symmetric Orthogonalization. SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-UHF iter SAD: -2.83568135919461 -2.83568e+00 0.00000e+00 ; @DF-UHF iter 1: -2.83568840083719 -7.04164e-06 9.00011e-05 DIIS; @DF-UHF iter 2: -2.83568849893678 -9.80996e-08 1.09058e-05 DIIS; @DF-UHF iter 3: -2.83568850042063 -1.48385e-09 4.55093e-08 DIIS; @DF-UHF iter 4: -2.83568850042064 -1.28786e-14 1.52740e-10 DIIS; @DF-UHF iter 5: -2.83568850042064 -8.88178e-16 9.96306e-12 DIIS; @DF-UHF iter 6: -2.83568850042064 2.22045e-15 2.48440e-16 DIIS; Energy and wave function converged. ==> Post-Iterations <==. @Spin Contamination Metric: 4.440892099E-16; @S^2 Expected: 0.000000000E+00; @S^2 Observed: 4.440892099E-16; @S Expected: 0.000000000E+00; @S Observed: 0.000000000E+00. Orbital Energies [Eh]; ---------------------. Alpha Occupied: . 1A -0.903583 . Alpha Virtual: . 2A 0.556192 3A 2.081751 4A 5.330969 . Beta Occupied: . 1A -0.903583 . Beta Virtual: . 2A 0.556192 3A 2.081751 4A 5.330969 . Final Occupation by Irrep:; A ; DOCC [ 1 ]; SOCC [ 0 ]. @DF-UHF Final Energy: -2.83568850042064. => Energetics <=. Nuclear Repulsion Energy = 0.0000000000000000; One-Electron Energy = -3.8642104942204210; Two-Electron Energy = 1.0285219937997820; Total Energy = -2.8356885004206389. UHF NO Occupations:; HONO-0 : 1 A 2.0000000; LUNO+0 : 2 A 0.0000000; LUNO+1 : 3 A 0.0000000; LUNO+2 : 4 A 0.0000000. Computation Completed. //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//; // SCF //; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<//. => Loading Basis Set <=. Name: JUN-CC-PVDZ; ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1706#issuecomment-524633282:4386,Energy,Energy,4386,https://psicode.org,https://github.com/psi4/psi4/pull/1706#issuecomment-524633282,1,['Energy'],['Energy']
Energy Efficiency,"[Psi4 1.3a2.dev48 Git: Rev {master} cb34149]. Can anybody confirm or deny that SCF iterations are no longer printed as they finish, but instead only in bulk when everything is done (like a buffered output). . For testing if needed:; ```; molecule benzene {; symmetry c1; pubchem:benzene; }. memory 1 GiB; energy('hf/def2-QZVP'); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1284:305,energy,energy,305,https://psicode.org,https://github.com/psi4/psi4/issues/1284,1,['energy'],['energy']
Energy Efficiency,"[Recovered from the forums.](http://forum.psicode.org/t/segfault-projecting-wfn-onto-new-basis/945). User attempted a manual basis guess, with the following input file.; ```; molecule {; 0 5; FE 0.000000000000 0.000000000000 0.123274779640; F 1.565379000000 0.000000000000 -0.647320000000; F -0.000000000000 -1.700830000000 0.639825000000; F 0.000000000000 1.700830000000 0.639825000000; F -1.565379000000 -0.000000000000 -0.647320000000; }. set {; basis sto-3g; guess sad; scf_type direct; reference uhf; }. energy('hf'). basis {; assign 6-31++G**; assign Fe 6-31G**; }. set guess read; optimize('hf'); ```. The PSIO error that results is difficult to interpret. Can we catch the case of switching basis sets without cleaning and tell the user to either clean explicitly or use the `basis_guess` option, depending on what they're trying to do?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1329:509,energy,energy,509,https://psicode.org,https://github.com/psi4/psi4/issues/1329,1,['energy'],['energy']
Energy Efficiency,"[This block of code](https://github.com/psi4/psi4/blob/master/psi4/driver/qcdb/libmintsgshell.py#L222-L228) in libmintsgshell.py throws a UnboundLocalError when trying to recover from the ZeroDivisionError. ```; try:; norm = math.sqrt(1.0 / (tmp * e_sum)); except ZeroDivisionError:; self.PYcoef[i] = [1.0 for i in range(self.nprimitive())]; # Set the normalization; for i in range(self.nprimitive()):; self.PYcoef[i] *= norm; ```. Traceback; ```; Traceback (most recent call last):; File ""/prefix/bin/psi4"", line 260, in <module>; exec(content); File ""<string>"", line 27, in <module>; File ""/prefix/lib//psi4/driver/driver.py"", line 460, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/prefix/lib//psi4/driver/procrouting/proc.py"", line 1990, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/prefix/lib//psi4/driver/procrouting/proc.py"", line 1279, in scf_helper; base_wfn = core.Wavefunction.build(scf_molecule, core.get_global_option('BASIS')); File ""/prefix/lib//psi4/driver/p4util/python_helpers.py"", line 101, in pybuild_wavefunction; basis = core.BasisSet.build(mol, ""ORBITAL"", basis); File ""/prefix/lib//psi4/driver/p4util/python_helpers.py"", line 68, in pybuild_basis; key, resolved_target, fitrole, other, return_atomlist=return_atomlist); File ""/prefix/lib//psi4/driver/qcdb/libmintsbasisset.py"", line 661, in pyconstruct; return_atomlist=return_atomlist); File ""/prefix/lib//psi4/driver/qcdb/libmintsbasisset.py"", line 876, in construct; ecpbasisset = BasisSet(key, mol, ecp_atom_basis_shell); File ""/prefix/lib//psi4/driver/qcdb/libmintsbasisset.py"", line 148, in __init__; self.constructor_role_mol_shellmap(*args); File ""/prefix/lib//psi4/driver/qcdb/libmintsbasisset.py"", line 349, in constructor_role_mol_shellmap; n, xyz_ptr, bf_count, pt='Unnormalized', rpowers=rpowers[tst:tsp]); File ""/prefix/lib//psi4/driver/qcdb/libmintsgshell.py"", line 193, in __init__; self.normalize_shell(); File ""/prefix/lib//psi4/d",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/846:642,energy,energy,642,https://psicode.org,https://github.com/psi4/psi4/issues/846,2,['energy'],['energy']
Energy Efficiency,"[lowername](lowername, molecule=molecule, **kwargs); File ""/home/gytibor/p4debug/lib/psi4/driver/procrouting/proc.py"", line 2820, in run_bccd; sort_func(ref_wfn). RuntimeError:; Fatal Error: PSIO Error; Error occurred in file: /home/gytibor/psi4/psi4/src/psi4/libpsio/toclen.cc on line: 113; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::PSIO::wt_toclen(unsigned long, unsigned long); psi::PSIO::write(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::DPD::file4_mat_irrep_wrt(psi::dpdfile4*, int). Printing out the relevant lines from the Psithon --> Python processed input file:; core.set_global_option(""REFERENCE"", ""RHF""); core.set_global_option(""SCF_TYPE"", ""PK""); core.set_global_option(""INTS_TOLERANCE"", 1.0E-14); core.set_global_option(""E_CONVERGENCE"", 1.0E-10); core.set_global_option(""D_CONVERGENCE"", 1.0E-10); --> energy('BCCD'). !----------------------------------------------------------------------------------!; ! !; ! Fatal Error: PSIO Error !; ! Error occurred in file: /home/gytibor/psi4/psi4/src/psi4/libpsio/toclen.cc on !; ! line: 113 !; ! The most recent 5 function calls were: !; ! psi::PsiException::PsiException(std::__cxx11::basic_string<char, !; ! std::char_traits<char>, std::allocator<char> >, char const*, int) !; ! psi::PSIO::wt_toclen(unsigned long, unsigned long) !; ! psi::PSIO::write(unsigned long, char const*, char*, unsigned long, !; ! psi::psio_address, psi::psio_address*) !; ! psi::DPD::file4_mat_irrep_wrt(psi::dpdfile4*, int) !; ! !; !----------------------------------------------------------------------------------!; Traceback (most recent call last):; File ""/home/gytibor/orca_bcc/../p4debug/bin/psi4"", line 338, in <module>; exec(content); File ""<string>"", line 192, in <module>; File ""/home/gytibor/p4debug/lib/psi4/driver/driver.py"", line 501, in energy; wfn = procedures['ener",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2261#issuecomment-1226239204:1484,energy,energy,1484,https://psicode.org,https://github.com/psi4/psi4/issues/2261#issuecomment-1226239204,1,['energy'],['energy']
Energy Efficiency,"\psi4\basis\6-31g.gbs ; atoms 37-38, 41-42, 45-46, 49-50, 53-54, 57-58, 61-62, 65-66, 69-70, 73-74, 77-78, 81-82, 85-86, 89-90, 93-94, 97-98 entry CL line 294 file PATH\Anaconda3\envs\psi4\lib\share\psi4\basis\6-31g.gbs ; atoms 39-40, 43-44, 47-48, 51-52, 55-56, 59-60, 63-64, 67-68, 71-72, 75-76, 79-80, 83-84, 87-88, 91-92, 95-96, 99-100 entry NA line 162 file PATH\Anaconda3\envs\psi4\lib\share\psi4\basis\6-31g.gbs . => B3LYP-D3: Empirical Dispersion <=. Grimme's -D3 (zero-damping) Dispersion Correction; Grimme S.; Antony J.; Ehrlich S.; Krieg H. (2010), J. Chem. Phys., 132: 154104. s6 = 1.000000; s8 = 1.703000; sr6 = 1.261000; alpha6 = 14.000000; sr8 = 1.000000. ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith; RKS Reference; 4 Threads, -734 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c1; Full point group: C1. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; H -7.704981244071 -0.117458228320 -1.644374634432 1.007825032230; H -7.704981244071 -2.592458228320 -1.644374634432 1.007825032230; H 6.339018755929 -2.592458228320 -1.644374634432 1.007825032230; H 6.339018755929 -0.117458228320 -1.644374634432 1.007825032230; C -6.766181244071 -0.656458228320 -1.643074634432 12.000000000000; C -6.766181244071 -2.053458228320 -1.643074634432 12.000000000000; C 5.400218755929 -2.053458228320 -1.643074634432 12.000000000000; C 5.400218755929 -0.656458228320 -1.643074634432 12.000000000000; H -5.579081244071 1.130141771680 -1.641574634432 1.007825032230; H -5.579081244071 -3.840058228320 -1.641574634432 1.007825032230; H 4.213118755929 -3.840058228320 -1.641574634432 1.007825032230; H 4.213118755929 1.130141771680 -1.641574634432 1.007825032230; C -5.558181244071 0.046741771680 -1.641474634432 12.000000000000; C -5.5581812",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2709:10385,charge,charge,10385,https://psicode.org,https://github.com/psi4/psi4/issues/2709,1,['charge'],['charge']
Energy Efficiency,"_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. passfail = False, label = 'SCF energy', message = '\tSCF energy: computed value (-76.02663274) does not match (-176.02663273) to atol=1e-06 by difference (100.00000000).', return_message = False, quiet = False. def _psi4_true_raise_handler(passfail, label, message, return_message=False, quiet=False):; """"""Handle comparison result by printing to screen, printing to Psi output file, raising TestComparisonError, and (incidently) returning.""""""; ; width = 86; if passfail:; if not quiet:; core.print_out(f' {label:.<{width}}PASSED\n'); print(f' {label:.<{width}}PASSED'); sys.stdout.flush(); else:; core.print_out(f' {label:.<{width}}FAILED'); print(f' {label:.<{width}}FAILED'); sys.stdout.flush(); > raise TestComparisonError(message); E psi4.driver.p4util.exceptions.TestComparisonError: 	SCF energy: computed value (-76.02663274) does not match (-176.02663273) to atol=1e-06 by difference (100.00000000). stage/lib/psi4/driver/p4util/testing.py:195: TestComparisonError; ----------------------------------------------------------------------------------------------------------- Captured stdout call ------------------------------------------------------------------------------------------------------------; SCF energy............................................................................FAILED; ____________________________________________________________________________________________________________ test_tu1_h2o_energy ____________________________________________________________________________________________________________. @ctest_labeler(""tutorial;quick;smoke""); def test_tu1_h2o_energy():; > ctest_runner(__file__). stage/lib/psi4/tests/tu1-h2o-energy/test_input.py:5: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888:3832,energy,energy,3832,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888,1,['energy'],['energy']
Energy Efficiency,"_1546130271559/work/Python/pythonrun.c:978; #67 0x557a417649c2 in PyRun_SimpleFileExFlags /tmp/build/80754af9/python_1546130271559/work/Python/pythonrun.c:419; #68 0x557a417684b2 in run_file /tmp/build/80754af9/python_1546130271559/work/Modules/main.c:340; #69 0x557a417684b2 in Py_Main /tmp/build/80754af9/python_1546130271559/work/Modules/main.c:811; #70 0x557a4163102d in main /tmp/build/80754af9/python_1546130271559/work/Programs/python.c:69; #71 0x7f70116d2444 in __libc_start_main (/lib64/libc.so.6+0x22444); #72 0x557a41711e0d (/shared/raimis/opt/miniconda/envs/psi4/bin/python3.6+0x1c3e0d). 0x602000823db8 is located 0 bytes to the right of 8-byte region [0x602000823db0,0x602000823db8); allocated by thread T0 here:; #0 0x7f7011d4b94e in operator new(unsigned long) /opt/conda/conda-bld/compilers_linux-64_1534514838838/work/.build/x86_64-conda_cos6-linux-gnu/src/gcc/libsanitizer/asan/asan_new_delete.cc:90; #1 0x7f7003a3bf34 in __gnu_cxx::new_allocator<int>::allocate(unsigned long, void const*) /shared/raimis/opt/miniconda/envs/psi4/x86_64-conda_cos6-linux-gnu/include/c++/7.3.0/ext/new_allocator.h:111; #2 0x7f700394d042 in std::allocator_traits<std::allocator<int> >::allocate(std::allocator<int>&, unsigned long) /shared/raimis/opt/miniconda/envs/psi4/x86_64-conda_cos6-linux-gnu/include/c++/7.3.0/bits/alloc_traits.h:436; #3 0x7f70037a8b69 in std::_Vector_base<int, std::allocator<int> >::_M_allocate(unsigned long) /shared/raimis/opt/miniconda/envs/psi4/x86_64-conda_cos6-linux-gnu/include/c++/7.3.0/bits/stl_vector.h:172; #4 0x7f70037031ef in int* std::vector<int, std::allocator<int> >::_M_allocate_and_copy<__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > > >(unsigned long, __gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >) /shared/raimis/opt/miniconda/envs/psi4/x86_64-conda_cos6-linux-gnu/include/c++/7.3.0/bits/stl_vector.h:1260",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1521#issuecomment-460637418:11548,allocate,allocate,11548,https://psicode.org,https://github.com/psi4/psi4/pull/1521#issuecomment-460637418,1,['allocate'],['allocate']
Energy Efficiency,"_EvalCodeWithName Python/ceval.c:4166; #39 0x7fa9b529f30c in PyEval_EvalCodeEx Python/ceval.c:4187; #40 0x7fa9b529f35a in PyEval_EvalCode Python/ceval.c:731; #41 0x7fa9b52db3b1 in run_mod Python/pythonrun.c:1025; #42 0x7fa9b52db3b1 in PyRun_FileExFlags Python/pythonrun.c:978; #43 0x7fa9b52db516 in PyRun_SimpleFileExFlags Python/pythonrun.c:419; #44 0x7fa9b52f7b0c in run_file Modules/main.c:340; #45 0x7fa9b52f7b0c in Py_Main Modules/main.c:810; #46 0x400bbb in main Programs/python.c:69; #47 0x7fa9b422cfe9 in __libc_start_main (/lib64/libc.so.6+0x20fe9); #48 0x400c7c (/home/raimis/opt/conda/envs/psi4/bin/python3.6+0x400c7c). 0x60800007a380 is located 0 bytes to the right of 96-byte region [0x60800007a320,0x60800007a380); allocated by thread T0 here:; #0 0x7fa9b5721e10 in operator new(unsigned long) /opt/conda/conda-bld/compilers_linux-64_1520532893746/work/.build/src/gcc-7.2.0/libsanitizer/asan/asan_new_delete.cc:80; #1 0x7fa9944a3281 in __gnu_cxx::new_allocator<psi::cctriples::thread_data>::allocate(unsigned long, void const*) /usr/include/c++/7/ext/new_allocator.h:111; #2 0x7fa9944a2ba8 in std::allocator_traits<std::allocator<psi::cctriples::thread_data> >::allocate(std::allocator<psi::cctriples::thread_data>&, unsigned long) /usr/include/c++/7/bits/alloc_traits.h:436; #3 0x7fa9944a2892 in std::_Vector_base<psi::cctriples::thread_data, std::allocator<psi::cctriples::thread_data> >::_M_allocate(unsigned long) /usr/include/c++/7/bits/stl_vector.h:172; #4 0x7fa9944a2506 in std::_Vector_base<psi::cctriples::thread_data, std::allocator<psi::cctriples::thread_data> >::_M_create_storage(unsigned long) (/home/raimis/prj/psi4.git/linux_build/stage/lib/psi4/core.cpython-36m-x86_64-linux-gnu.so+0xcf0a506); #5 0x7fa9944a1e64 in std::_Vector_base<psi::cctriples::thread_data, std::allocator<psi::cctriples::thread_data> >::_Vector_base(unsigned long, std::allocator<psi::cctriples::thread_data> const&) /usr/include/c++/7/bits/stl_vector.h:138; #6 0x7fa9944a18a0 in std::vector<psi::c",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1438:6589,allocate,allocate,6589,https://psicode.org,https://github.com/psi4/psi4/pull/1438,1,['allocate'],['allocate']
Energy Efficiency,"______________________________________ test_v2rdm_casscf ________________________________________________. @using_v2rdm_casscf; def test_v2rdm_casscf():; """"""v2rdm_casscf/tests/v2rdm1""""""; #! cc-pvdz N2 (6,6) active space Test DQG. print(' N2 / cc-pVDZ / DQG(6,6), scf_type = CD / 1e-12, rNN = 0.5 A'). import v2rdm_casscf. n2 = psi4.geometry(""""""; 0 1; n; n 1 r; """"""). interloper = psi4.geometry(""""""; 0 1; O; H 1 1.0; H 1 1.0 2 90.0; """"""). psi4.set_options({; 'basis': 'cc-pvdz',; 'scf_type': 'cd',; 'cholesky_tolerance': 1e-12,; 'd_convergence': 1e-10,; 'maxiter': 500,; 'restricted_docc': [ 2, 0, 0, 0, 0, 2, 0, 0 ],; 'active': [ 1, 0, 1, 1, 0, 1, 1, 1 ],; }); ##psi4.set_module_options('v2rdm_casscf', {; psi4.set_options({; # 'positivity': 'dqg',; 'r_convergence': 1e-5,; 'e_convergence': 1e-6,; 'maxiter': 20000,; # #'orbopt_frequency': 1000,; # #'mu_update_frequency': 1000,; }). psi4.activate(n2). n2.r = 0.5; refscf = -103.04337420425350; refv2rdm = -103.086205379481. > psi4.energy('v2rdm-casscf', molecule=n2). /home/je714/psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py:741:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; /home/je714/psi4conda/lib/python3.5/site-packages/psi4/driver/driver.py:454: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. name = 'v2rdm-casscf', kwargs = {'molecule': <psi4.core.Molecule object at 0x7f8d89888e30>}; lowername = 'v2rdm-casscf', optstash = <psi4.driver.p4util.optproc.OptionsState object at 0x7f8d89888470>; ref_wfn = <psi4.core.RHF object at 0x7f8d897e56d0>, filename = '', scf_type = 'CD'. def run_v2rdm_casscf(name, **kwargs):; r""""""Function encoding sequence of PSI module and plugin calls so that; v2rdm_casscf can be called via :py:func:`~driver.energy`. For post-scf plugins. >>> energy('v2rdm_casscf",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/710:3480,energy,energy,3480,https://psicode.org,https://github.com/psi4/psi4/issues/710,1,['energy'],['energy']
Energy Efficiency,"______________________________________________________________. def test_psi4_cc():; """"""cc1""""""; #! RHF-CCSD 6-31G** all-electron optimization of the H2O molecule; ; h2o = psi4.geometry(""""""; O; H 1 0.97; H 1 0.97 2 103.0; """"""); ; psi4.set_options({""basis"": '6-31G**'}); ; > psi4.optimize('ccsd'). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py:63: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:1050: in optimize; G, wfn = gradient(lowername, return_wfn=True, molecule=moleculeclone, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:697: in gradient; E, wfn = energy(lowername, return_wfn=True, molecule=moleculeclone, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:460: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:752: in select_ccsd; return func(name, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:2953: in run_detci; ref_wfn = scf_helper(name, **kwargs) # C1 certified; /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1251: in scf_helper; scf_wfn = scf_wavefunction_factory(core.get_option('SCF', 'REFERENCE'), base_wfn); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . reference = 'RHF', ref_wfn = <psi4.core.Wavefunction object at 0x7f6fc4a59eb8>, functional = None. def scf_wavefunction_factory(reference, ref_wfn, functional=None):; """"""Builds the correct wavefunction from the provided information; """"""; ; if core.has_option_changed(""SCF"", ""DFT_DISPERSION_PARAMETERS""):; modified_disp_params = core.get_option(""SC",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/820:29092,energy,energy,29092,https://psicode.org,https://github.com/psi4/psi4/issues/820,2,['energy'],['energy']
Energy Efficiency,"_grac_shift_b 0.138264; }. # No hybrid kernel & no exch-disp scaling & no deltaHF; set SAPT_DFT_DO_DHF False; set SAPT_DFT_DO_HYBRID False; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; energy('sapt(dft)', molecule=dimer); for k, v in Eref_nh.items(): #TEST; if k in [""SAPT IND ENERGY"", ""CURRENT ENERGY""]:; ref = (v - DHF) / 1000.0; else:; ref = v / 1000.0; compare_values(ref, psi4.variable(k), 6, ""!hyb, xd=none, !dHF: "" + k) #TEST. # No hybrid kernel & no exch-disp scaling; set SAPT_DFT_DO_DHF True; set SAPT_DFT_DO_HYBRID False; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; energy('sapt(dft)', molecule=dimer); for k, v in Eref_nh.items(): #TEST; compare_values(v / 1000.0, psi4.variable(k), 6, ""!hyb, xd=none, dHF: "" + k) #TEST. # Hybrid kernel & exch-disp scaling (DISP); set SAPT_DFT_DO_HYBRID True; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME disp; energy('sapt(dft)', molecule=dimer); for k, v in Eref_h_disp.items(): #TEST; compare_values(v / 1000.0, psi4.variable(k), 6, ""hyb, xd=disp, dHF: "" + k) #TEST. # Hybrid kernel & exch-disp scaling (FIXED); set SAPT_DFT_DO_HYBRID True; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME fixed ; set SAPT_DFT_EXCH_DISP_FIXED_SCALE 0.770; energy('sapt(dft)', molecule=dimer); for k, v in Eref_h_fixed.items(): #TEST; compare_values(v / 1000.0, psi4.variable(k), 6, ""hyb, xd=fixed, dHF: "" + k) #TEST. ```; * I think it should be clear from the output file what exch-disp scheme/scale is applied. So perhaps add a couple lines to the printout like below. This should also satisfy Jonathon's request that the output file show the change in scaling defaults. ```; ==> E20 Dispersion (MP2) <==. Disp20 (MP2) -0.37881730 [mEh]; Exch-Disp20,u 0.02037338 [mEh]; Scaling Scheme: Disp; Scaling Factor: 0.707. SAPT(DFT) Results; ---------------------------------------------------------------------------------------------------------; Electrostatics -0.10197192 [mEh] -0.06398835 [kcal/mol] -0.26772724 [kJ/mol]; Elst1,r -0.10197192 [mEh] -0.06398835 [kcal/mol] -0.26772724 [kJ/mol]; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216:2939,energy,energy,2939,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216,1,['energy'],['energy']
Energy Efficiency,"_matrices(anl_grad, fd_grad, 4, ""Analytic vs FD CAM Gradients""). !----------------------------------------------------------------------------------!; ! !; ! root !; ! Arrays differ. _compare_recursive: computed value does not match to !; ! atol=1e-06. !; ! Expected: !; ! [[ 0. 0. -0.034683256669] !; ! [ 0. 0. 0.034649906885]] !; ! Observed: !; ! [[ 0. -0. -0.034681333539] !; ! [ 0. 0. 0.034680903324]] !; ! Difference (passed elements are zeroed): !; ! [[0.000000000000e+00 0.000000000000e+00 1.923130171867e-06] !; ! [0.000000000000e+00 0.000000000000e+00 3.099643936547e-05]] !; ! !; !----------------------------------------------------------------------------------!. Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); <end of output>; Test time = 47.89 sec; ----------------------------------------------------------; Test Failed.; ""dft-grad-lr2"" end time: Jan 05 15:36 EST; ""dft-grad-lr2"" time elapsed: 00:00:47; ----------------------------------------------------------; ```. ```. Printing out the relevant lines from the Psithon --> Python processed input file:; core.set_global_option(""DFT_RADIAL_POINTS"", 75); core.set_global_option(""SCF_TYPE"", ""df""); for k, v in test_dict.items():; if k == 'DSD-PBEP86-D3BJ' and 'dftd3' not in psi4.addons():; continue; --> ret = energy(k); compare_values(v, ret, 5, ""RKS 0 1 %15s Energy"" % k); pbe = {; ""name"": ""PBE-TEST"",; ""x_functionals"": { ""GGA_X_PBE"": {} },; ""c_functionals"": { ""GGA_C_PBE"": {} },. !-------------------------------------------------------!; ! !; ! Could not converge SCF iterations in 100 iterations. !; ! !; !-------------------------------------------------------!. Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); <end of output>; Test time = 106.86 sec; ----------------------------------------------------------; Test Failed.; ""dft-smoke"" end time: Jan 05 15:37 EST; ""dft-smoke"" time elapsed: 00:01:46; ----------------------------------------------------------; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-754900620:4237,energy,energy,4237,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-754900620,2,"['Energy', 'energy']","['Energy', 'energy']"
Energy Efficiency,"_scfproperty <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py FAILED. ==================================================================== FAILURES ====================================================================; ____________________________________________________________________ test_erd ____________________________________________________________________. @using_erd; def test_erd():; """"""erd/scf5""""""; ; psi4.set_options({'integral_package': 'ERD'}); > _test_scf5(). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py:617: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py:487: in _test_scf5; E = psi4.energy('scf', molecule=singlet_o2); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:460: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1942: in run_scf; scf_wfn = scf_helper(name, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1251: in scf_helper; scf_wfn = scf_wavefunction_factory(core.get_option('SCF', 'REFERENCE'), base_wfn); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . reference = 'RHF', ref_wfn = <psi4.core.Wavefunction object at 0x7f6fc4cd6b48>, functional = None. def scf_wavefunction_factory(reference, ref_wfn, functional=None):; """"""Builds the correct wavefunction from the provided information; """"""; ; if core.has_option_changed(""SCF"", ""DFT_DISPERSION_PARAMETERS""):; modified_disp_params = core.get_option(""SCF"", ""DFT_DISPERSION_PARAMETERS""); else:; modified_disp_params = None; ; # Figure out functional; if functional is None:; superfunc, disp_type = dft_f",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/820:6231,energy,energy,6231,https://psicode.org,https://github.com/psi4/psi4/issues/820,2,['energy'],['energy']
Energy Efficiency,"_still going_. @psi-rking, here's an example where dynamic level 2 might have kicked in a bit early?. ```; base) psilocaluser@bash:psinet:/home/psilocaluser/gits/hrw-quaternary/objdir37: (1.3.x) grep '~' bgobbi_wb97x.out ; --------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------- ~; Convergence Criteria 1.00e-06 * 3.00e-04 * o 1.20e-03 * o ~; --------------------------------------------------------------------------------------------- ~; 1 -1771.54871790 -1.77e+03 8.23e-03 1.77e-03 o 2.50e-01 2.94e-02 o ~; 2 -1771.54896434 -2.46e-04 4.20e-03 7.85e-04 o 3.99e-02 7.34e-03 o ~; 3 -1771.54708256 1.88e-03 1.22e-02 2.75e-03 o 3.09e-02 7.32e-03 o ~; 4 -1771.54962420 -2.54e-03 1.84e-03 4.35e-04 o 5.76e-02 7.34e-03 o ~; 5 -1771.54991808 -2.94e-04 6.10e-04 1.42e-04 o 4.66e-02 7.34e-03 o ~; 6 -1771.54999493 -7.68e-05 5.40e-04 1.21e-04 o 1.40e-02 1.83e-03 o ~; 7 -1771.55001819 -2.33e-05 4.51e-04 8.25e-05 o 1.89e-02 1.84e-03 o ~; 8 -1771.55002275 -4.56e-06 3.95e-04 7.58e-05 o 4.60e-03 4.59e-04 o ~; 9 -1771.55002699 -4.24e-06 3.75e-04 4.74e-05 o 4.74e-03 4.59e-04 o ~; 10 -1771.55002919 -2.20e-06 3.62e-04 3.71e-05 o 1.53e-02 1.38e-03 o ~; 11 -1771.55003367 -4.48e-06 3.38e-04 3.16e-05 o 1.53e-02 1.38e-03 o ~; 12 -1771.55003620 -2.53e-06 3.26e-04 3.22e-05 o 1.56e-02 1.38e-03 o ~; 13 -1771.55003691 -7.15e-07 * 3.21e-04 3.16e-05 o 3.92e-03 3.44e-04 o ~; 14 -1771.55003705 -1.33e-07 * 3.23e-04 2.89e-05 o 9.90e-04 * 8.66e-05 o ~; 15 -1771.55003766 -6.15e-07 * 3.24e-04 2.84e-05 o 2.99e-03 2.58e-04 o ~; 	Raising dynamic level to 2. ~; --------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------- ~; Con",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1590#issuecomment-482748016:331,Energy,Energy,331,https://psicode.org,https://github.com/psi4/psi4/issues/1590#issuecomment-482748016,1,['Energy'],['Energy']
Energy Efficiency,"_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); E psi::PCM::PCM(psi::Options&, std::shared_ptr<psi::PSIO>, int, std::shared_ptr<psi::BasisSet>); E psi::scf::HF::common_init(); E psi::scf::HF::HF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>, psi::Options&, std::shared_ptr<psi::PSIO>); E psi::scf::RHF::RHF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1008: RuntimeError; -------------------------------------------------------------- Captured stdout call --------------------------------------------------------------; Performing finite difference calculations; 5 displacements needed ... 1; ________________________________________________________________ test_psi4_dfmp2 _________________________________________________________________. def test_psi4_dfmp2():; """"""dfmp2-1""""""; #! Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy; #! using automatic counterpoise correction. Monomers are specified using Cartesian coordinates.; ; Enuc = 235.946620315069168; Ecp = -0.0224119246; ; formic_dim = psi4.geometry(""""""; 0 1; C -1.888896 -0.179692 0.000000; O -1.493280 1.073689 0.000000; O -1.170435 -1.166590 0.000000; H -2.979488 -0.258829 0.000000; H -0.498833 1.107195 0.000000; --; 0 1; C 1.888896 0.179692 0.000000; O 1.493280 -1.073689 0.000000; O 1.170435 1.166590 0.000000; H 2.979488 0.258829 0.000000; H 0.498833 -1.107195 0.000000; units angstrom; no_reorient; """"""); ; psi4.set_options({; 'basis': 'cc-pvdz',; 'df_basis_scf': 'cc-pvdz-jkfit',; 'df_basis_mp2': 'cc-pvdz-ri',; # not necessary to specify df_basis* for most basis sets; 'scf_type': 'df',; 'guess': 'sad',; 'd_convergence': 11,; }); ; > e_cp = psi4.energy('mp2', bsse_type='cp'). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py:112: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/820:32194,energy,energy,32194,https://psicode.org,https://github.com/psi4/psi4/issues/820,1,['energy'],['energy']
Energy Efficiency,"_type df. molecule QMregion {; 0 1; He 0.0 0.0 0.0; symmetry c1; no_reorient; no_com; }. gradient(""PBE0""). Chrgfield = QMMM(); Chrgfield.extern.addCharge(-1,0.0,0.0,1.8897261245650618); psi4.set_global_option_python('EXTERN',Chrgfield.extern). gradient(""PBE0""); ```. For test 1, the gradient from the water and the water+charges are different, but they do not agree with the forces returned by an equivalent calculation with Gaussian. The isolated water molecule has gradients that agree with the Gaussian forces, but once the charges are added the Gaussian and PSI4 calculations return different results. For test 2, the PSI4 gradient is zero for the for the helium with and without the point charge. The charge has no effect on the results. When I repeated the calculation with Gaussian, there was a finite force on the helium atom when a charge was included. Here are the gradient results I pulled from the output files:. ```; Water+Charges (TIP3P charges: O->-0.834, H->0.417). PSI4 gradient without charges:; 1 -0.000345685156 -0.000000503248 -0.001768512746; 2 0.000171019827 0.000099064969 0.000874930893; 3 0.000170945942 -0.000098562011 0.000874553581. Gaussian forces without charges:; 1 8 0.000342119 0.000000502 0.001755656; 2 1 -0.000171096 -0.000103970 -0.000878017; 3 1 -0.000171022 0.000103468 -0.000877640. PSI4 gradient with charges:; 1 0.001872262723 -0.000000506498 -0.002344911788; 2 -0.000937982580 -0.003306842432 0.001163140925; 3 -0.000938055973 0.003307348640 0.001162761678. Gaussian forces with charges:; 1 8 0.002079660 0.000000498 -0.002984605; 2 1 0.000413259 0.000612887 -0.001458686; 3 1 0.000413331 -0.000613388 -0.001458305. --------------------------------------------------------------------; He+Charge (q = -1.0, r = 1.0 Ang.). PSI4 gradient without charges:; 1 0.000000000000 0.000000000000 0.000000000000. Gaussian forces without charges:; 1 2 0.000000000 0.000000000 0.000000000. PSI4 gradient with charges:; 1 0.000000000000 0.000000000000 0.000000000000. Ga",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/184:2034,charge,charges,2034,https://psicode.org,https://github.com/psi4/psi4/issues/184,1,['charge'],['charges']
Energy Efficiency,"`. ## Summit stdout:; ```; Alanine energy: -322.83024417229103 Hartrees, time taken: 68.54604168608785 seconds.; Arginine energy: -605.1514689384549 Hartrees, time taken: 215.84501126222312 seconds.; Asparagine energy: -491.04432100071995 Hartrees, time taken: 177.1454620063305 seconds.; Aspartic_acid energy: -510.3043230853464 Hartrees, time taken: 198.31190185248852 seconds.; Cysteine energy: -720.4219957102104 Hartrees, time taken: 151.35190648585558 seconds.; Glutamic_acid energy: -549.4951112606502 Hartrees, time taken: 136.0041107479483 seconds.; Glutamine energy: -530.2261895601027 Hartrees, time taken: 136.45657246001065 seconds.; Glycine energy: -283.5893524874689 Hartrees, time taken: 110.86536369845271 seconds.; Histidine energy: -547.1545219389225 Hartrees, time taken: 190.28457425907254 seconds.; Isoleucine energy: -440.3258760616588 Hartrees, time taken: 176.21623157337308 seconds.; Leucine energy: -440.33076955681287 Hartrees, time taken: 154.9296657089144 seconds.; Lysine energy: -495.8966574116915 Hartrees, time taken: 167.91756228543818 seconds.; Methionine energy: -798.7987813339455 Hartrees, time taken: 157.03161489591002 seconds.; Phenylalanine energy: -553.1290149756642 Hartrees, time taken: 190.91649591736495 seconds.; Proline energy: -399.96754183927425 Hartrees, time taken: 141.14360310696065 seconds.; Serine energy: -397.8017752608608 Hartrees, time taken: 112.12268372066319 seconds.; Threonine energy: -437.0180950733486 Hartrees, time taken: 118.3724678363651 seconds.; Tryptophan energy: -684.3217131099059 Hartrees, time taken: 246.40932229347527 seconds.; Tyrosine energy: -628.1734628779933 Hartrees, time taken: 250.7947356943041 seconds.; Valine energy: -401.1469758245755 Hartrees, time taken: 182.75560629181564 seconds.; ```; [Local_psi4_outputs.tar.gz](https://github.com/user-attachments/files/17141527/Local_psi4_outputs.tar.gz); [Summit_psi4_outputs.tar.gz](https://github.com/user-attachments/files/17141532/Summit_psi4_outputs.tar.gz)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3223#issuecomment-2375594595:3229,energy,energy,3229,https://psicode.org,https://github.com/psi4/psi4/issues/3223#issuecomment-2375594595,9,['energy'],['energy']
Energy Efficiency,"`; mol = psi4.geometry(""""""; H 0.000 0.000 0.000; H 0.000 0.000 0.740; Symmetry c1; """"""); psi4.set_options({'basis': 'sto-3g'}); scf_e, wfn = psi4.energy('SCF', return_wfn=True); print(""MO coefficients""); print(wfn.Ca().to_array()); print(""Fock in the AO basis""); print(wfn.Fa_subset(""AO"").to_array()); print(""Fock in the MO basis""); print(wfn.Fa_subset(""MO"").to_array()); ```; this gives the following output:; ```; MO coefficients ; [[ 0.54884228 1.21245192]; [ 0.54884228 -1.21245192]]; Fock in the AO basis; [[-0.36607883 -0.59428702]; [-0.59428702 -0.36607883]]; Fock in the MO basis; [[-1.59408547e+00 8.04278118e-16]; [ 7.39285035e-16 7.76197397e-02]]; ```; and in the output file; ```; Orbital Energies [Eh]; ---------------------; Doubly Occupied: ; 1A -0.578578 ; Virtual: ; 2A 0.670950 ; @DF-RHF Final Energy: -1.11678331788308; ```; the orbital energies in the output file are correct, which should be the diagonal elements of the Fock matrix in the MO basis, but these are different. . I check the AO and MO coefficients produced by two other QM programs (pyscf is below) to see where the inconsistency might be, they both produced the ""correct"" Fock matrix (i.e. the diagnoal elements in the MO basis are the orbital energies) with the following MO coefficients:; pyscf input; ```; import numpy; from pyscf import gto, scf, lo. geometry = '''; H 0.000 0.000 0.000; H 0.000 0.000 0.740; ''' . mol = gto.M(atom=geometry,; basis='STO-3G') ; mf = scf.RHF(mol); mf.kernel(); print(mf.kernel()); Fao = mf.get_fock(); print(""MO coefficients""); print(mf.mo_coeff); print(""Fock in AO basis""); print(Fao); Fmo = mf.mo_coeff.T @ Fao @ mf.mo_coeff; print(""Fock in MO basis""); print(Fmo); ```; ```; converged SCF energy = -1.11675930739643; -1.1167593073964255; MO coefficients; [[ 0.54884228 -1.21245192]; [ 0.54884228 1.21245192]]; Fock in AO basis; [[-0.36602603 -0.59429997]; [-0.59429997 -0.36602603]]; Fock in MO basis; [[-5.78553860e-01 -2.43968808e-16]; [-2.12179326e-16 6.71143492e-01]]. ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1989#issuecomment-1533272699:1950,energy,energy,1950,https://psicode.org,https://github.com/psi4/psi4/issues/1989#issuecomment-1533272699,1,['energy'],['energy']
Energy Efficiency,"`NO_RESPONSE` is only for SAPT0, that's right. The open-shell SAPT0 uses a different implementation and a different variable (I think it's `COUPLED_INDUCTION`) that already issues the proper warning, so I thought it would be more consistent to have closed-shell SAPT0 do the same. Currently, when induction is uncoupled, the induction energy gets put in both an UNCOUPLED and a COUPLED induction Psivar, with a warning in the output file. Would you rather have us not set the COUPLED variables ? We could then delete the warning.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/908#issuecomment-362872366:335,energy,energy,335,https://psicode.org,https://github.com/psi4/psi4/pull/908#issuecomment-362872366,1,['energy'],['energy']
Energy Efficiency,```; $ ctest -j 1 -E dft-bench --timeout 3600 --output-on-failure; Test project /home/raimis/psi4.git/linux_build; Start 394: python-vibanalysis; 1/411 Test #394: python-vibanalysis ............... Passed 799.52 sec; Start 178: fsapt1; 2/411 Test #178: fsapt1 ........................... Passed 1815.94 sec; Start 182: isapt1; 3/411 Test #182: isapt1 ........................... Passed 406.26 sec; Start 18: cbs-xtpl-func; 4/411 Test #18: cbs-xtpl-func .................... Passed 407.07 sec; Start 181: fsapt-allterms; 5/411 Test #181: fsapt-allterms ................... Passed 652.29 sec; Start 193: fd-freq-energy-large; 6/411 Test #193: fd-freq-energy-large ............. Passed 433.67 sec; Start 195: fd-freq-gradient-large; 7/411 Test #195: fd-freq-gradient-large ........... Passed 248.39 sec; Start 278: opt13; 8/411 Test #278: opt13 ............................ Passed 644.29 sec; Start 25: cc13a; 9/411 Test #25: cc13a ............................ Passed 188.07 sec; Start 113: dcft7; 10/411 Test #113: dcft7 ............................ Passed 207.25 sec; Start 205: frac-traverse; 11/411 Test #205: frac-traverse .................... Passed 169.73 sec; Start 316: sapt2; 12/411 Test #316: sapt2 ............................ Passed 287.30 sec; Start 318: sapt4; 13/411 Test #318: sapt4 ............................ Passed 1746.35 sec; Start 325: scf-bz2; 14/411 Test #325: scf-bz2 .......................... Passed 117.02 sec; Start 1: adc1; 15/411 Test #1: adc1 ............................. Passed 21.02 sec; Start 2: adc2; 16/411 Test #2: adc2 ............................. Passed 38.38 sec; Start 3: casscf-fzc-sp; 17/411 Test #3: casscf-fzc-sp .................... Passed 2.85 sec; Start 4: casscf-semi; 18/411 Test #4: casscf-semi ...................... Passed 1.66 sec; Start 5: casscf-sa-sp; 19/411 Test #5: casscf-sa-sp ..................... Passed 8.72 sec; Start 6: ao-casscf-sp; 20/411 Test #6: ao-casscf-sp ..................... Passed 3.05 sec; Start 7: casscf-sp; 21/411 Test,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1071#issuecomment-407449972:610,energy,energy-large,610,https://psicode.org,https://github.com/psi4/psi4/pull/1071#issuecomment-407449972,2,['energy'],['energy-large']
Energy Efficiency,```; $ ctest -j 1 -E dft-bench --timeout 3600; Test project /home/raimis/psi4.git/linux_build; Start 394: python-vibanalysis; 1/411 Test #394: python-vibanalysis ............... Passed 513.47 sec; Start 178: fsapt1; 2/411 Test #178: fsapt1 ........................... Passed 1836.71 sec; Start 182: isapt1; 3/411 Test #182: isapt1 ........................... Passed 380.51 sec; Start 18: cbs-xtpl-func; 4/411 Test #18: cbs-xtpl-func .................... Passed 319.26 sec; Start 181: fsapt-allterms; 5/411 Test #181: fsapt-allterms ................... Passed 508.84 sec; Start 193: fd-freq-energy-large; 6/411 Test #193: fd-freq-energy-large ............. Passed 415.27 sec; Start 195: fd-freq-gradient-large; 7/411 Test #195: fd-freq-gradient-large ........... Passed 234.47 sec; Start 278: opt13; 8/411 Test #278: opt13 ............................ Passed 619.81 sec; Start 25: cc13a; 9/411 Test #25: cc13a ............................ Passed 191.63 sec; Start 113: dcft7; 10/411 Test #113: dcft7 ............................ Passed 204.32 sec; Start 205: frac-traverse; 11/411 Test #205: frac-traverse .................... Passed 171.24 sec; Start 316: sapt2; 12/411 Test #316: sapt2 ............................ Passed 293.30 sec; Start 318: sapt4; 13/411 Test #318: sapt4 ............................ Passed 1738.06 sec; Start 325: scf-bz2; 14/411 Test #325: scf-bz2 .......................... Passed 101.48 sec; Start 1: adc1; 15/411 Test #1: adc1 ............................. Passed 21.21 sec; Start 2: adc2; 16/411 Test #2: adc2 ............................. Passed 34.53 sec; Start 3: casscf-fzc-sp; 17/411 Test #3: casscf-fzc-sp .................... Passed 2.66 sec; Start 4: casscf-semi; 18/411 Test #4: casscf-semi ...................... Passed 1.72 sec; Start 5: casscf-sa-sp; 19/411 Test #5: casscf-sa-sp ..................... Passed 8.18 sec; Start 6: ao-casscf-sp; 20/411 Test #6: ao-casscf-sp ..................... Passed 3.12 sec; Start 7: casscf-sp; 21/411 Test #7: casscf-sp .....,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1073#issuecomment-406985370:590,energy,energy-large,590,https://psicode.org,https://github.com/psi4/psi4/pull/1073#issuecomment-406985370,2,['energy'],['energy-large']
Energy Efficiency,"```; $ ctest -j 16 -E ""dft-bench|dft-grad-disk"" --timeout 3600 --output-on-failure; Test project /home/raimis/psi4.git/linux_build; Start 245: nbody-convergence; Start 405: python-vibanalysis; Start 181: fsapt1; Start 11: cbs-delta-energy; Start 185: isapt1; Start 18: cbs-xtpl-func; Start 184: fsapt-allterms; Start 196: fd-freq-energy-large; Start 198: fd-freq-gradient-large; Start 287: opt13; Start 28: cc13b; Start 310: pywrap-all; Start 107: dcft-grad2; Start 22: cc1; Start 32: cc15; Start 45: cc28; 1/415 Test #184: fsapt-allterms ................... Passed 110.85 sec; Start 110: dcft1; 2/415 Test #287: opt13 ............................ Passed 189.62 sec; Start 79: cc8; 3/415 Test #45: cc28 ............................. Passed 206.85 sec; Start 152: dfomp3-grad2; 4/415 Test #32: cc15 ............................. Passed 210.28 sec; Start 233: mp2-module; 5/415 Test #22: cc1 .............................. Passed 218.85 sec; Start 35: cc18; 6/415 Test #28: cc13b ............................ Passed 229.19 sec; Start 312: pywrap-cbs1; 7/415 Test #110: dcft1 ............................ Passed 127.34 sec; Start 27: cc13a; 8/415 Test #107: dcft-grad2 ....................... Passed 252.96 sec; Start 116: dcft7; 9/415 Test #79: cc8 .............................. Passed 81.11 sec; Start 208: frac-traverse; 10/415 Test #185: isapt1 ........................... Passed 272.01 sec; Start 326: sapt2; 11/415 Test #35: cc18 ............................. Passed 60.66 sec; Start 328: sapt4; 12/415 Test #245: nbody-convergence ................ Passed 293.73 sec; Start 335: scf-bz2; 13/415 Test #152: dfomp3-grad2 ..................... Passed 117.47 sec; Start 251: ocepa-grad2; 14/415 Test #233: mp2-module ....................... Passed 120.91 sec; Start 68: cc49; 15/415 Test #326: sapt2 ............................ Passed 97.27 sec; Start 58: cc4; 16/415 Test #208: frac-traverse .................... Passed 108.53 sec; Start 390: cc-module; 17/415 Test #198: fd-freq-gradient-large ....",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1384#issuecomment-443227424:232,energy,energy,232,https://psicode.org,https://github.com/psi4/psi4/pull/1384#issuecomment-443227424,2,['energy'],"['energy', 'energy-large']"
Energy Efficiency,"```; $ ctest -j 16 -E ""dft-bench|dft-grad-disk"" --timeout 3600 --output-on-failure; Test project /home/raimis/psi4_2.git/build; Start 122: dfccdl1; Start 124: dfccsd1; Start 395: python-vibanalysis; Start 156: dft-grad-lr3; Start 104: dcft-grad1; Start 228: mp2-def2; Start 179: fsapt1; Start 111: dcft4; Start 301: pywrap-all; Start 39: cc23; Start 183: isapt1; Start 37: cc21; Start 36: cc2; Start 42: cc26; Start 46: cc3; Start 40: cc24; 1/412 Test #122: dfccdl1 .......................... Passed 6.36 sec; Start 18: cbs-xtpl-func; 2/412 Test #124: dfccsd1 .......................... Passed 10.68 sec; Start 182: fsapt-allterms; 3/412 Test #42: cc26 ............................. Passed 241.32 sec; Start 194: fd-freq-energy-large; 4/412 Test #36: cc2 .............................. Passed 267.40 sec; Start 196: fd-freq-gradient-large; 5/412 Test #40: cc24 ............................. Passed 276.21 sec; Start 279: opt13; 6/412 Test #37: cc21 ............................. Passed 307.87 sec; Start 241: ocepa-freq1; 7/412 Test #39: cc23 ............................. Passed 310.94 sec; Start 41: cc25; 8/412 Test #46: cc3 .............................. Passed 370.77 sec; Start 146: dfomp2-grad3; 9/412 Test #228: mp2-def2 ......................... Passed 429.97 sec; Start 307: pywrap-checkrun-uhf; 10/412 Test #183: isapt1 ........................... Passed 436.25 sec; Start 305: pywrap-checkrun-rhf; 11/412 Test #156: dft-grad-lr3 ..................... Passed 470.44 sec; Start 112: dcft5; 12/412 Test #104: dcft-grad1 ....................... Passed 479.75 sec; Start 374: dft-custom-mgga; 13/412 Test #111: dcft4 ............................ Passed 507.03 sec; Start 43: cc27; 14/412 Test #301: pywrap-all ....................... Passed 521.85 sec; Start 113: dcft6; 15/412 Test #41: cc25 ............................. Passed 236.96 sec; Start 321: sapt6; 16/412 Test #241: ocepa-freq1 ...................... Passed 240.27 sec; Start 77: cc7; 17/412 Test #196: fd-freq-gradient-large ......",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1199#issuecomment-417683504:721,energy,energy-large,721,https://psicode.org,https://github.com/psi4/psi4/pull/1199#issuecomment-417683504,1,['energy'],['energy-large']
Energy Efficiency,"```; $ ctest -j 16 -E ""dft-bench|dft-grad-disk"" --timeout 3600 --output-on-failure; Test project /home/raimis/psi4_2.git/build; Start 394: python-vibanalysis; Start 178: fsapt1; Start 182: isapt1; Start 18: cbs-xtpl-func; Start 181: fsapt-allterms; Start 193: fd-freq-energy-large; Start 195: fd-freq-gradient-large; Start 278: opt13; Start 25: cc13a; Start 113: dcft7; Start 205: frac-traverse; Start 316: sapt2; Start 318: sapt4; Start 325: scf-bz2; Start 1: adc1; Start 2: adc2; 1/411 Test #1: adc1 ............................. Passed 23.85 sec; Start 3: casscf-fzc-sp; 2/411 Test #3: casscf-fzc-sp .................... Passed 4.04 sec; Start 4: casscf-semi; 3/411 Test #4: casscf-semi ...................... Passed 2.66 sec; Start 5: casscf-sa-sp; 4/411 Test #2: adc2 ............................. Passed 42.07 sec; Start 6: ao-casscf-sp; 5/411 Test #6: ao-casscf-sp ..................... Passed 4.18 sec; Start 7: casscf-sp; 6/411 Test #5: casscf-sa-sp ..................... Passed 16.65 sec; Start 8: castup1; 7/411 Test #8: castup1 .......................... Passed 2.19 sec; Start 9: castup2; 8/411 Test #9: castup2 .......................... Passed 8.79 sec; Start 10: castup3; 9/411 Test #7: casscf-sp ........................ Passed 13.45 sec; Start 11: cbs-delta-energy; 10/411 Test #10: castup3 .......................... Passed 5.96 sec; Start 12: cbs-parser; 11/411 Test #12: cbs-parser ....................... Passed 25.52 sec; Start 13: cbs-xtpl-alpha; 12/411 Test #11: cbs-delta-energy ................. Passed 63.99 sec; Start 14: cbs-xtpl-energy; 13/411 Test #325: scf-bz2 .......................... Passed 128.53 sec; Start 15: cbs-xtpl-freq; 14/411 Test #14: cbs-xtpl-energy .................. Passed 15.43 sec; Start 16: cbs-xtpl-gradient; 15/411 Test #15: cbs-xtpl-freq .................... Passed 11.30 sec; Start 17: cbs-xtpl-opt; 16/411 Test #16: cbs-xtpl-gradient ................ Passed 17.01 sec; Start 19: cbs-xtpl-wrapper; 17/411 Test #17: cbs-xtpl-opt ...............",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1087#issuecomment-408854538:268,energy,energy-large,268,https://psicode.org,https://github.com/psi4/psi4/pull/1087#issuecomment-408854538,1,['energy'],['energy-large']
Energy Efficiency,"```; $ ctest -j 16 -E ""dft-bench|dft-grad-disk"" --timeout 3600 --output-on-failure; Test project /home/raimis/psi4_2.git/build; Start 395: python-vibanalysis; Start 179: fsapt1; Start 183: isapt1; Start 18: cbs-xtpl-func; Start 182: fsapt-allterms; Start 194: fd-freq-energy-large; Start 196: fd-freq-gradient-large; Start 279: opt13; Start 26: cc13a; Start 114: dcft7; Start 206: frac-traverse; Start 317: sapt2; Start 319: sapt4; Start 326: scf-bz2; Start 1: adc1; Start 2: adc2; 1/412 Test #1: adc1 ............................. Passed 40.38 sec; Start 3: casscf-fzc-sp; 2/412 Test #3: casscf-fzc-sp .................... Passed 7.58 sec; Start 4: casscf-semi; 3/412 Test #4: casscf-semi ...................... Passed 3.39 sec; Start 5: casscf-sa-sp; 4/412 Test #2: adc2 ............................. Passed 68.12 sec; Start 6: ao-casscf-sp; 5/412 Test #5: casscf-sa-sp ..................... Passed 17.41 sec; Start 7: casscf-sp; 6/412 Test #6: ao-casscf-sp ..................... Passed 8.11 sec; Start 8: castup1; 7/412 Test #8: castup1 .......................... Passed 3.07 sec; Start 9: castup2; 8/412 Test #7: casscf-sp ........................ Passed 14.70 sec; Start 10: castup3; 9/412 Test #9: castup2 .......................... Passed 10.03 sec; Start 11: cbs-delta-energy; 10/412 Test #10: castup3 .......................... Passed 8.30 sec; Start 12: cbs-parser; 11/412 Test #12: cbs-parser ....................... Passed 37.55 sec; Start 13: cbs-xtpl-alpha; 12/412 Test #11: cbs-delta-energy ................. Passed 64.49 sec; Start 14: cbs-xtpl-energy; 13/412 Test #14: cbs-xtpl-energy .................. Passed 15.23 sec; Start 15: cbs-xtpl-freq; 14/412 Test #15: cbs-xtpl-freq .................... Passed 9.08 sec; Start 16: cbs-xtpl-gradient; 15/412 Test #326: scf-bz2 .......................... Passed 188.03 sec; Start 17: cbs-xtpl-opt; 16/412 Test #16: cbs-xtpl-gradient ................ Passed 24.11 sec; Start 19: cbs-xtpl-nbody; 17/412 Test #19: cbs-xtpl-nbody ...............",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1219#issuecomment-419060031:268,energy,energy-large,268,https://psicode.org,https://github.com/psi4/psi4/pull/1219#issuecomment-419060031,1,['energy'],['energy-large']
Energy Efficiency,"```; $ ctest -j 16 -E ""dft-bench|dft-grad-disk"" --timeout 3600 --output-on-failure; Test project /home/raimis/psi4_2.git/build; \ Start 394: python-vibanalysis; Start 178: fsapt1; Start 182: isapt1; Start 18: cbs-xtpl-func; Start 181: fsapt-allterms; Start 193: fd-freq-energy-large; Start 195: fd-freq-gradient-large; Start 278: opt13; Start 25: cc13a; Start 113: dcft7; Start 205: frac-traverse; Start 316: sapt2; Start 318: sapt4; Start 325: scf-bz2; Start 1: adc1; Start 2: adc2; 1/411 Test #1: adc1 ............................. Passed 40.70 sec; Start 3: casscf-fzc-sp; 2/411 Test #3: casscf-fzc-sp .................... Passed 4.05 sec; Start 4: casscf-semi; 3/411 Test #4: casscf-semi ...................... Passed 2.83 sec; Start 5: casscf-sa-sp; 4/411 Test #5: casscf-sa-sp ..................... Passed 16.78 sec; Start 6: ao-casscf-sp; 5/411 Test #2: adc2 ............................. Passed 66.82 sec; Start 7: casscf-sp; 6/411 Test #6: ao-casscf-sp ..................... Passed 9.16 sec; Start 8: castup1; 7/411 Test #8: castup1 .......................... Passed 2.71 sec; Start 9: castup2; 8/411 Test #7: casscf-sp ........................ Passed 13.94 sec; Start 10: castup3; 9/411 Test #9: castup2 .......................... Passed 7.77 sec; Start 11: cbs-delta-energy; 10/411 Test #10: castup3 .......................... Passed 7.44 sec; Start 12: cbs-parser; 11/411 Test #12: cbs-parser ....................... Passed 25.04 sec; Start 13: cbs-xtpl-alpha; 12/411 Test #11: cbs-delta-energy ................. Passed 58.74 sec; Start 14: cbs-xtpl-energy; 13/411 Test #14: cbs-xtpl-energy .................. Passed 14.17 sec; Start 15: cbs-xtpl-freq; 14/411 Test #325: scf-bz2 .......................... Passed 165.45 sec; Start 16: cbs-xtpl-gradient; 15/411 Test #15: cbs-xtpl-freq .................... Passed 12.40 sec; Start 17: cbs-xtpl-opt; 16/411 Test #16: cbs-xtpl-gradient ................ Passed 21.29 sec; Start 19: cbs-xtpl-wrapper; 17/411 Test #17: cbs-xtpl-opt .............",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1090#issuecomment-408925986:270,energy,energy-large,270,https://psicode.org,https://github.com/psi4/psi4/pull/1090#issuecomment-408925986,1,['energy'],['energy-large']
Energy Efficiency,"```; $ ctest -j 16 -E ""dft-bench|dft-grad-disk"" --timeout 3600 --output-on-failure; Test project /home/raimis/psi4_3.git/build; Start 394: python-vibanalysis; Start 178: fsapt1; Start 182: isapt1; Start 18: cbs-xtpl-func; Start 181: fsapt-allterms; Start 193: fd-freq-energy-large; Start 195: fd-freq-gradient-large; Start 278: opt13; Start 25: cc13a; Start 113: dcft7; Start 205: frac-traverse; Start 316: sapt2; Start 318: sapt4; Start 325: scf-bz2; Start 1: adc1; Start 2: adc2; 1/411 Test #1: adc1 ............................. Passed 24.09 sec; Start 3: casscf-fzc-sp; 2/411 Test #3: casscf-fzc-sp .................... Passed 2.52 sec; Start 4: casscf-semi; 3/411 Test #4: casscf-semi ...................... Passed 3.06 sec; Start 5: casscf-sa-sp; 4/411 Test #2: adc2 ............................. Passed 41.92 sec; Start 6: ao-casscf-sp; 5/411 Test #5: casscf-sa-sp ..................... Passed 13.45 sec; Start 7: casscf-sp; 6/411 Test #6: ao-casscf-sp ..................... Passed 4.76 sec; Start 8: castup1; 7/411 Test #8: castup1 .......................... Passed 1.92 sec; Start 9: castup2; 8/411 Test #7: casscf-sp ........................ Passed 9.38 sec; Start 10: castup3; 9/411 Test #9: castup2 .......................... Passed 5.54 sec; Start 11: cbs-delta-energy; 10/411 Test #10: castup3 .......................... Passed 5.87 sec; Start 12: cbs-parser; 11/411 Test #12: cbs-parser ....................... Passed 26.15 sec; Start 13: cbs-xtpl-alpha; 12/411 Test #11: cbs-delta-energy ................. Passed 55.75 sec; Start 14: cbs-xtpl-energy; 13/411 Test #14: cbs-xtpl-energy .................. Passed 11.20 sec; Start 15: cbs-xtpl-freq; 14/411 Test #325: scf-bz2 .......................... Passed 126.40 sec; Start 16: cbs-xtpl-gradient; 15/411 Test #15: cbs-xtpl-freq .................... Passed 6.79 sec; Start 17: cbs-xtpl-opt; 16/411 Test #16: cbs-xtpl-gradient ................ Passed 24.78 sec; Start 19: cbs-xtpl-wrapper; 17/411 Test #17: cbs-xtpl-opt .................",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1092#issuecomment-409185967:268,energy,energy-large,268,https://psicode.org,https://github.com/psi4/psi4/pull/1092#issuecomment-409185967,1,['energy'],['energy-large']
Energy Efficiency,```; $ ctest -j 32; Test project /home/raimis/psi4.git/linux_build; Start 401: json-schema_0_properties; Start 371: dft-bench-interaction; Start 370: dft-bench-ionization; Start 391: python-vibanalysis; Start 102: dcft-grad1; Start 174: fsapt1; Start 178: isapt1; Start 109: dcft4; Start 300: pywrap-checkrun-rhf; Start 302: pywrap-checkrun-uhf; Start 236: ocepa-freq1; Start 18: cbs-xtpl-func; Start 177: fsapt-allterms; Start 189: fd-freq-energy-large; Start 191: fd-freq-gradient-large; Start 274: opt13; Start 301: pywrap-checkrun-rohf; Start 144: dfomp2-grad3; Start 110: dcft5; Start 13: cbs-xtpl-alpha; Start 296: pywrap-all; Start 354: tu6-cp-ne2; Start 277: opt-irc-2; Start 111: dcft6; Start 113: dcft8; Start 42: cc27; Start 36: cc21; Start 45: cc3; Start 40: cc25; Start 383: cookbook-rohf-orb-rot; Start 75: cc7; Start 25: cc13a; 1/401 Test #401: json-schema_0_properties .........***Failed 3.21 sec; Start 112: dcft7; 2/401 Test #177: fsapt-allterms ................... Passed 136.27 sec; Start 201: frac-traverse; 3/401 Test #277: opt-irc-2 ........................ Passed 159.76 sec; Start 312: sapt2; 4/401 Test #111: dcft6 ............................ Passed 165.22 sec; Start 314: sapt4; 5/401 Test #383: cookbook-rohf-orb-rot ............ Passed 222.55 sec; Start 321: scf-bz2; 6/401 Test #312: sapt2 ............................ Passed 93.85 sec; Start 29: cc14; 7/401 Test #201: frac-traverse .................... Passed 121.71 sec; Start 164: dft1; 8/401 Test #274: opt13 ............................ Passed 292.05 sec; Start 38: cc23; 9/401 Test #178: isapt1 ........................... Passed 299.95 sec; Start 35: cc2; 10/401 Test #191: fd-freq-gradient-large ........... Passed 307.91 sec; Start 223: mp2-def2; 11/401 Test #189: fd-freq-energy-large ............. Passed 319.82 sec; Start 39: cc24; 12/401 Test #13: cbs-xtpl-alpha ................... Passed 330.09 sec; Start 24: cc13; 13/401 Test #321: scf-bz2 .......................... Passed 118.24 sec; Start 17: cbs-xt,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1071#issuecomment-402453832:441,energy,energy-large,441,https://psicode.org,https://github.com/psi4/psi4/pull/1071#issuecomment-402453832,1,['energy'],['energy-large']
Energy Efficiency,"```; $ ctest -j 8 -E ""dft-bench|dft-grad-disk"" --timeout 3600 --output-on-failure; Test project /home/raimis/psi4_2.git/build; Start 394: python-vibanalysis; Start 178: fsapt1; Start 182: isapt1; Start 18: cbs-xtpl-func; Start 181: fsapt-allterms; Start 193: fd-freq-energy-large; Start 195: fd-freq-gradient-large; Start 278: opt13; 1/411 Test #195: fd-freq-gradient-large ........... Passed 297.78 sec; Start 162: dft-grad-lr3; 2/411 Test #182: isapt1 ........................... Passed 469.93 sec; Start 227: mp2-def2; 3/411 Test #18: cbs-xtpl-func .................... Passed 485.98 sec; Start 25: cc13a; 4/411 Test #193: fd-freq-energy-large ............. Passed 551.44 sec; Start 113: dcft7; 5/411 Test #181: fsapt-allterms ................... Passed 652.63 sec; Start 205: frac-traverse; 6/411 Test #394: python-vibanalysis ............... Passed 680.49 sec; Start 316: sapt2; 7/411 Test #25: cc13a ............................ Passed 254.82 sec; Start 318: sapt4; 8/411 Test #162: dft-grad-lr3 ..................... Passed 489.85 sec; Start 325: scf-bz2; 9/411 Test #113: dcft7 ............................ Passed 278.82 sec; Start 373: dft-custom-mgga; 10/411 Test #278: opt13 ............................ Passed 847.95 sec; Start 320: sapt6; 11/411 Test #205: frac-traverse .................... Passed 221.61 sec; Start 155: dfscf-bz2; 12/411 Test #227: mp2-def2 ......................... Passed 440.79 sec; Start 183: isapt2; 13/411 Test #325: scf-bz2 .......................... Passed 127.53 sec; Start 347: sapt-dft2; 14/411 Test #320: sapt6 ............................ Passed 169.47 sec; Start 112: dcft6; 15/411 Test #155: dfscf-bz2 ........................ Passed 146.26 sec; Start 97: cisd-opt-fd; 16/411 Test #373: dft-custom-mgga .................. Passed 193.16 sec; Start 281: opt-irc-2; 17/411 Test #316: sapt2 ............................ Passed 360.69 sec; Start 300: pywrap-all; 18/411 Test #347: sapt-dft2 ........................ Passed 128.97 sec; Start 161: dft-grad-lr2;",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1089#issuecomment-408103972:267,energy,energy-large,267,https://psicode.org,https://github.com/psi4/psi4/pull/1089#issuecomment-408103972,2,['energy'],['energy-large']
Energy Efficiency,"```; $ ctest -j 8 -E ""dft-bench|dft-grad-disk"" --timeout 3600 --output-on-failure; Test project /home/raimis/psi4_2.git/build; Start 394: python-vibanalysis; Start 178: fsapt1; Start 182: isapt1; Start 18: cbs-xtpl-func; Start 181: fsapt-allterms; Start 193: fd-freq-energy-large; Start 195: fd-freq-gradient-large; Start 278: opt13; 1/411 Test #195: fd-freq-gradient-large ........... Passed 340.82 sec; Start 25: cc13a; 2/411 Test #18: cbs-xtpl-func .................... Passed 486.53 sec; Start 113: dcft7; 3/411 Test #182: isapt1 ........................... Passed 538.29 sec; Start 205: frac-traverse; 4/411 Test #193: fd-freq-energy-large ............. Passed 603.47 sec; Start 316: sapt2; 5/411 Test #25: cc13a ............................ Passed 281.79 sec; Start 318: sapt4; 6/411 Test #181: fsapt-allterms ................... Passed 716.17 sec; Start 325: scf-bz2; 7/411 Test #205: frac-traverse .................... Passed 235.66 sec; Start 1: adc1; 8/411 Test #1: adc1 ............................. Passed 27.11 sec; Start 2: adc2; 9/411 Test #113: dcft7 ............................ Passed 326.30 sec; Start 3: casscf-fzc-sp; 10/411 Test #3: casscf-fzc-sp .................... Passed 13.41 sec; Start 4: casscf-semi; 11/411 Test #4: casscf-semi ...................... Passed 9.02 sec; Start 5: casscf-sa-sp; 12/411 Test #325: scf-bz2 .......................... Passed 127.53 sec; Start 6: ao-casscf-sp; 13/411 Test #2: adc2 ............................. Passed 44.92 sec; Start 7: casscf-sp; 14/411 Test #6: ao-casscf-sp ..................... Passed 6.87 sec; Start 8: castup1; 15/411 Test #8: castup1 .......................... Passed 2.39 sec; Start 9: castup2; 16/411 Test #5: casscf-sa-sp ..................... Passed 19.18 sec; Start 10: castup3; 17/411 Test #9: castup2 .......................... Passed 9.54 sec; Start 11: cbs-delta-energy; 18/411 Test #10: castup3 .......................... Passed 18.56 sec; Start 12: cbs-parser; 19/411 Test #7: casscf-sp ......................",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1067#issuecomment-409148828:267,energy,energy-large,267,https://psicode.org,https://github.com/psi4/psi4/pull/1067#issuecomment-409148828,2,['energy'],['energy-large']
Energy Efficiency,"```; $ ctest -j 8 -E ""dft-bench|dft-grad-disk"" --timeout 3600 --output-on-failure; Test project /home/raimis/psi4_3.git/build; Start 243: ocepa1; Start 394: python-vibanalysis; Start 162: dft-grad-lr3; Start 227: mp2-def2; Start 178: fsapt1; Start 182: isapt1; Start 18: cbs-xtpl-func; Start 181: fsapt-allterms; 1/411 Test #243: ocepa1 ........................... Passed 1.89 sec; Start 193: fd-freq-energy-large; 2/411 Test #227: mp2-def2 ......................... Passed 436.21 sec; Start 195: fd-freq-gradient-large; 3/411 Test #182: isapt1 ........................... Passed 472.25 sec; Start 278: opt13; 4/411 Test #162: dft-grad-lr3 ..................... Passed 488.24 sec; Start 103: dcft-grad1; 5/411 Test #193: fd-freq-energy-large ............. Passed 507.09 sec; Start 300: pywrap-all; 6/411 Test #18: cbs-xtpl-func .................... Passed 512.61 sec; Start 304: pywrap-checkrun-rhf; 7/411 Test #181: fsapt-allterms ................... Passed 628.73 sec; Start 45: cc3; 8/411 Test #195: fd-freq-gradient-large ........... Passed 291.98 sec; Start 373: dft-custom-mgga; 9/411 Test #394: python-vibanalysis ............... Passed 771.15 sec; Start 320: sapt6; 10/411 Test #304: pywrap-checkrun-rhf .............. Passed 277.81 sec; Start 306: pywrap-checkrun-uhf; 11/411 Test #300: pywrap-all ....................... Passed 288.34 sec; Start 112: dcft6; 12/411 Test #45: cc3 .............................. Passed 192.30 sec; Start 155: dfscf-bz2; 13/411 Test #103: dcft-grad1 ....................... Passed 361.67 sec; Start 183: isapt2; 14/411 Test #306: pywrap-checkrun-uhf .............. Passed 99.74 sec; Start 39: cc24; 15/411 Test #373: dft-custom-mgga .................. Passed 186.38 sec; Start 305: pywrap-checkrun-rohf; 16/411 Test #320: sapt6 ............................ Passed 165.71 sec; Start 110: dcft4; 17/411 Test #112: dcft6 ............................ Passed 164.24 sec; Start 38: cc23; 18/411 Test #155: dfscf-bz2 ........................ Passed 143.19 sec; Start 4",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1078#issuecomment-408900195:401,energy,energy-large,401,https://psicode.org,https://github.com/psi4/psi4/pull/1078#issuecomment-408900195,2,['energy'],['energy-large']
Energy Efficiency,"```; $ ctest -j 8 -E ""dft-bench|dft-grad-disk"" --timeout 3600 --output-on-failure; Test project /home/raimis/psi4_3.git/build; Start 394: python-vibanalysis; Start 178: fsapt1; Start 182: isapt1; Start 18: cbs-xtpl-func; Start 181: fsapt-allterms; Start 193: fd-freq-energy-large; Start 195: fd-freq-gradient-large; Start 278: opt13; 1/411 Test #195: fd-freq-gradient-large ........... Passed 287.94 sec; Start 25: cc13a; 2/411 Test #182: isapt1 ........................... Passed 442.34 sec; Start 113: dcft7; 3/411 Test #193: fd-freq-energy-large ............. Passed 511.29 sec; Start 205: frac-traverse; 4/411 Test #181: fsapt-allterms ................... Passed 597.58 sec; Start 316: sapt2; 5/411 Test #205: frac-traverse .................... Passed 227.64 sec; Start 318: sapt4; 6/411 Test #278: opt13 ............................ Passed 764.00 sec; Start 325: scf-bz2; 7/411 Test #25: cc13a ............................ Passed 481.24 sec; Start 1: adc1; 8/411 Test #1: adc1 ............................. Passed 26.25 sec; Start 2: adc2; 9/411 Test #113: dcft7 ............................ Passed 392.65 sec; Start 3: casscf-fzc-sp; 10/411 Test #2: adc2 ............................. Passed 43.73 sec; Start 4: casscf-semi; 11/411 Test #4: casscf-semi ...................... Passed 11.68 sec; Start 5: casscf-sa-sp; 12/411 Test #3: casscf-fzc-sp .................... Passed 19.26 sec; Start 6: ao-casscf-sp; 13/411 Test #6: ao-casscf-sp ..................... Passed 8.25 sec; Start 7: casscf-sp; 14/411 Test #5: casscf-sa-sp ..................... Passed 23.99 sec; Start 8: castup1; 15/411 Test #8: castup1 .......................... Passed 2.23 sec; Start 9: castup2; 16/411 Test #325: scf-bz2 .......................... Passed 124.34 sec; Start 10: castup3; 17/411 Test #9: castup2 .......................... Passed 13.78 sec; Start 11: cbs-delta-energy; 18/411 Test #7: casscf-sp ........................ Passed 38.07 sec; Start 12: cbs-parser; 19/411 Test #10: castup3 .....................",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1115#issuecomment-411094637:267,energy,energy-large,267,https://psicode.org,https://github.com/psi4/psi4/pull/1115#issuecomment-411094637,2,['energy'],['energy-large']
Energy Efficiency,"```; $ ctest -j 8 -E ""dft-bench|dft-grad-disk"" --timeout 3600 --output-on-failure; Test project /home/raimis/psi4_3.git/build; Start 394: python-vibanalysis; Start 178: fsapt1; Start 182: isapt1; Start 18: cbs-xtpl-func; Start 181: fsapt-allterms; Start 193: fd-freq-energy-large; Start 195: fd-freq-gradient-large; Start 278: opt13; 1/411 Test #195: fd-freq-gradient-large ........... Passed 316.06 sec; Start 25: cc13a; 2/411 Test #182: isapt1 ........................... Passed 469.47 sec; Start 113: dcft7; 3/411 Test #193: fd-freq-energy-large ............. Passed 544.74 sec; Start 205: frac-traverse; 4/411 Test #181: fsapt-allterms ................... Passed 628.02 sec; Start 316: sapt2; 5/411 Test #25: cc13a ............................ Passed 336.73 sec; Start 318: sapt4; 6/411 Test #205: frac-traverse .................... Passed 224.53 sec; Start 325: scf-bz2; 7/411 Test #113: dcft7 ............................ Passed 351.15 sec; Start 1: adc1; 8/411 Test #278: opt13 ............................ Passed 840.66 sec; Start 2: adc2; 9/411 Test #1: adc1 ............................. Passed 25.01 sec; Start 3: casscf-fzc-sp; 10/411 Test #3: casscf-fzc-sp .................... Passed 11.82 sec; Start 4: casscf-semi; 11/411 Test #4: casscf-semi ...................... Passed 4.34 sec; Start 5: casscf-sa-sp; 12/411 Test #5: casscf-sa-sp ..................... Passed 18.34 sec; Start 6: ao-casscf-sp; 13/411 Test #2: adc2 ............................. Passed 44.45 sec; Start 7: casscf-sp; 14/411 Test #6: ao-casscf-sp ..................... Passed 5.43 sec; Start 8: castup1; 15/411 Test #8: castup1 .......................... Passed 1.92 sec; Start 9: castup2; 16/411 Test #325: scf-bz2 .......................... Passed 126.98 sec; Start 10: castup3; 17/411 Test #9: castup2 .......................... Passed 14.01 sec; Start 11: cbs-delta-energy; 18/411 Test #10: castup3 .......................... Passed 15.90 sec; Start 12: cbs-parser; 19/411 Test #7: casscf-sp ....................",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1112#issuecomment-409912325:267,energy,energy-large,267,https://psicode.org,https://github.com/psi4/psi4/pull/1112#issuecomment-409912325,2,['energy'],['energy-large']
Energy Efficiency,"```; $ ctest -j 8 -E ""dft-bench|dft-grad-disk"" --timeout 3600 --output-on-failure; Test project /home/raimis/psi4_3.git/build; Start 394: python-vibanalysis; Start 178: fsapt1; Start 182: isapt1; Start 18: cbs-xtpl-func; Start 181: fsapt-allterms; Start 193: fd-freq-energy-large; Start 195: fd-freq-gradient-large; Start 278: opt13; 1/411 Test #195: fd-freq-gradient-large ........... Passed 323.95 sec; Start 25: cc13a; 2/411 Test #18: cbs-xtpl-func .................... Passed 528.74 sec; Start 113: dcft7; 3/411 Test #182: isapt1 ........................... Passed 536.55 sec; Start 205: frac-traverse; 4/411 Test #193: fd-freq-energy-large ............. Passed 593.28 sec; Start 316: sapt2; 5/411 Test #25: cc13a ............................ Passed 297.32 sec; Start 318: sapt4; 6/411 Test #181: fsapt-allterms ................... Passed 736.98 sec; Start 325: scf-bz2; 7/411 Test #205: frac-traverse .................... Passed 247.88 sec; Start 1: adc1; 8/411 Test #1: adc1 ............................. Passed 27.30 sec; Start 2: adc2; 9/411 Test #113: dcft7 ............................ Passed 318.32 sec; Start 3: casscf-fzc-sp; 10/411 Test #3: casscf-fzc-sp .................... Passed 6.14 sec; Start 4: casscf-semi; 11/411 Test #4: casscf-semi ...................... Passed 2.45 sec; Start 5: casscf-sa-sp; 12/411 Test #2: adc2 ............................. Passed 46.87 sec; Start 6: ao-casscf-sp; 13/411 Test #394: python-vibanalysis ............... Passed 861.59 sec; Start 7: casscf-sp; 14/411 Test #6: ao-casscf-sp ..................... Passed 4.76 sec; Start 8: castup1; 15/411 Test #8: castup1 .......................... Passed 1.98 sec; Start 9: castup2; 16/411 Test #5: casscf-sa-sp ..................... Passed 10.00 sec; Start 10: castup3; 17/411 Test #9: castup2 .......................... Passed 8.90 sec; Start 11: cbs-delta-energy; 18/411 Test #325: scf-bz2 .......................... Passed 137.96 sec; Start 12: cbs-parser; 19/411 Test #7: casscf-sp .....................",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1091#issuecomment-409148219:267,energy,energy-large,267,https://psicode.org,https://github.com/psi4/psi4/pull/1091#issuecomment-409148219,2,['energy'],['energy-large']
Energy Efficiency,```; (psi4) [raimis@computer06 linux_build]$ ctest -j 16; Test project /home/raimis/psi4.git/linux_build; Start 371: dft-bench-interaction; Start 370: dft-bench-ionization; Start 391: python-vibanalysis; Start 174: fsapt1; Start 178: isapt1; Start 18: cbs-xtpl-func; Start 177: fsapt-allterms; Start 189: fd-freq-energy-large; Start 191: fd-freq-gradient-large; Start 274: opt13; Start 25: cc13a; Start 112: dcft7; Start 201: frac-traverse; Start 312: sapt2; Start 314: sapt4; Start 321: scf-bz2; 1/401 Test #312: sapt2 ............................ Passed 83.28 sec; Start 35: cc2; 2/401 Test #201: frac-traverse .................... Passed 108.95 sec; Start 45: cc3; 3/401 Test #321: scf-bz2 .......................... Passed 120.54 sec; Start 44: cc29; 4/401 Test #177: fsapt-allterms ................... Passed 137.88 sec; Start 39: cc24; 5/401 Test #314: sapt4 ............................ Passed 171.80 sec; Start 41: cc26; 6/401 Test #35: cc2 .............................. Passed 99.07 sec; Start 69: cc52; 7/401 Test #44: cc29 ............................. Passed 63.23 sec; Start 38: cc23; 8/401 Test #112: dcft7 ............................ Passed 242.47 sec; Start 40: cc25; 9/401 Test #69: cc52 ............................. Passed 63.01 sec; Start 61: cc44; 10/401 Test #39: cc24 ............................. Passed 117.59 sec; Start 36: cc21; 11/401 Test #25: cc13a ............................ Passed 261.95 sec; Start 75: cc7; 12/401 Test #274: opt13 ............................ Passed 266.64 sec; Start 74: cc6; 13/401 Test #45: cc3 .............................. Passed 162.14 sec; Start 29: cc14; 14/401 Test #41: cc26 ............................. Passed 100.81 sec; Start 42: cc27; 15/401 Test #189: fd-freq-energy-large ............. Passed 277.33 sec; Start 47: cc31; 16/401 Test #191: fd-freq-gradient-large ........... Passed 278.60 sec; Start 68: cc51; 17/401 Test #178: isapt1 ........................... Passed 294.68 sec; Start 296: pywrap-all; 18/401 Test #61: cc44 ...,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-402413637:313,energy,energy-large,313,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-402413637,1,['energy'],['energy-large']
Energy Efficiency,"```; - Both `disk_DF` and `mem_DF` gradients yield above segfault, no message in outfile or message printed to stdout; - PBE/cc-pVDZ: Passed; - wPBE/cc-pVDZ: **FAILED**; ```; Traceback (most recent call last):; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; exec(content); File ""<string>"", line 31, in <module>; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 444, in energy; return driver_cbs._cbs_gufunc(energy, name, ptype='energy', **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver_cbs.py"", line 1818, in _cbs_gufunc; ptype_value, wfn = func(method_name, return_wfn=True, molecule=molecule, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 2038, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1283, in scf_helper; scf_wfn = scf_wavefunction_factory(name, base_wfn, core.get_option('SCF', 'REFERENCE')); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1000, in scf_wavefunction_factory; superfunc, disp_type = dft_funcs.build_superfunctional(name, (reference in [""RKS"", ""RHF""])); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/dft_funcs/superfuncs.py"", line 130, in build_superfunctional; ""SCF: SCF_TYPE (%s) not supported for range-separated functionals."" % core.get_option(""SCF"", ""SCF_TYPE"")); ; ValidationError: SCF: SCF_TYPE (MEM_DF) not supported for",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1021#issuecomment-388980081:4953,energy,energy,4953,https://psicode.org,https://github.com/psi4/psi4/issues/1021#issuecomment-388980081,2,['energy'],['energy']
Energy Efficiency,"```; from psi4.driver.qcdb.dashparam import get_dispersion_aliases; from psi4.driver.qcdb.dashparam import dashcoeff. for dtype in get_dispersion_aliases():; for func in dashcoeff[dtype]:; check=func in psi4.driver.procedures['energy']; if check == False:; print(dtype, func.upper(), ""missing!""). ```. saving this little bit here for now.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/996#issuecomment-385800439:227,energy,energy,227,https://psicode.org,https://github.com/psi4/psi4/issues/996#issuecomment-385800439,1,['energy'],['energy']
Energy Efficiency,"```; h2o = psi4.geometry(""""""; O; H 1 0.96; H 1 0.96 2 104.5; """"""); e, wfn=psi4.energy('scf/def2-svp', molecule=h2o, return_wfn=True); wfn.to_file('my_wfn'); G, wfn_new = psi4.gradient('scf/def2-svp', return_wfn=True, restart_file='my_wfn'); ```. The `restart_file` keyword is silently ignored.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2713:79,energy,energy,79,https://psicode.org,https://github.com/psi4/psi4/issues/2713,1,['energy'],['energy']
Energy Efficiency,"```; molecule custom {; 0 1; AR 0.00000000 0.00000000 0.00000000; }. set basis def2-SVP; set DFT_VV10_B 4.0; pbe0 = {; ""name"": ""my_PBE0"",; ""x_functionals"": {""GGA_X_PBE"": {""alpha"": 0.75}},; ""x_hf"": {""alpha"": 0.25},; ""c_functionals"": {""GGA_C_PBE"": {}}; }; func_call = energy('SCF', dft_functional=pbe0); ```. Logic check for `isinstance(name, dict)` is missing, i think? I wasn't fully aware of how it works.; https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/dft_funcs/superfuncs.py#L113",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1188:266,energy,energy,266,https://psicode.org,https://github.com/psi4/psi4/issues/1188,1,['energy'],['energy']
Energy Efficiency,"```; molecule {; 0 1; symmetry c1; C; C 1 1.0; }. set basis cc-pVDZ; set scf_type pk; set nat_orbs true; set restricted_docc [2]; set qc_module detci. # Initial guess from CISD natural orbitals; ci_e, ci_wfn = energy('cisd', return_wfn=True). # Run CAS(10,10); set active [10]; cas_e, cas_wfn = energy('casscf', return_wfn=True, ref_wfn=ci_wfn); ```. crashes with 90cbafb2ad1e7a0a70780b26e5caa15c1ed02a60 applied. Without qc_module = detci, the CASSCF initial energy is the same as with HF, I guess the CISD module doesn't have NOs implemented?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/588#issuecomment-275790506:210,energy,energy,210,https://psicode.org,https://github.com/psi4/psi4/pull/588#issuecomment-275790506,3,['energy'],['energy']
Energy Efficiency,"```; molecule {; 0 1; symmetry c1; Mn -0.0128264866 -0.0002779912 -0.1091894544; O -1.1037647823 1.0246639195 -1.2821459116; O -0.4319309790 -1.5910632792 -1.0423314985; N 0.7243918073 1.6205280457 0.7709992473; N 1.3008767173 -0.9287768925 1.0635839133; C -1.2886186814 2.2834208702 -1.2181338272; C -0.7050865946 3.1821062059 -0.3604271375; C 0.3534920334 2.8195308082 0.5207059889; C 0.2177419816 -2.6945497951 -0.9662726987; C 1.2181378357 -3.0250490115 -0.0961995911; C 1.7180430400 -2.1229929449 0.8899899444; C 1.9393113446 1.3525171542 1.5367699106; C 1.8333722479 -0.0604962603 2.1055467704; H 0.8908035853 3.6241374839 1.0039698993; H 2.5024254412 -2.4854165868 1.5399007635; H 2.7858100041 1.4098930461 0.8661311665; H 1.1490336627 -0.0652673733 2.9502674019; H 2.0638511115 2.0769335299 2.3353274192; H 2.7993768711 -0.4085469833 2.4534782102; H -1.9892347032 2.6686747336 -1.9454961675; H -0.0986239324 -3.4441353556 -1.6764363233; Cl 1.8821942342 0.3098852687 -1.6599082362; O -1.1395010178 -0.1703680057 0.9263551082; H -0.9312248148 4.2251864392 -0.4696082573; H 1.6695378989 -3.9953914470 -0.1633815245; }. # Run SCF; set basis 6-31G*; set scf_type pk; set soscf true; scf_e, scf_wfn = energy('scf', return_wfn=True); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/596#issuecomment-276463125:1203,energy,energy,1203,https://psicode.org,https://github.com/psi4/psi4/issues/596#issuecomment-276463125,1,['energy'],['energy']
Energy Efficiency,"```; molecule {; 1 1; symmetry c1; O; O 1 R1; O 2 R2 1 A1; H 3 R3 2 A2 1 D1. R1=1.228; R2=1.587; R3=0.968; A1=109.80; A2=97.10; D1=180.0; }. set basis 6-31G; set reference rohf; set scf_type pk; set nat_orbs true; scf_e, scf_wfn = energy('scf', return_wfn=True). set restricted_docc [7]; set active [10]; set qc_module detci; ci_e, ci_wfn = energy('cisd', return_wfn=True, ref_wfn=scf_wfn); ```; has Nmo = 29 and docc = 12, so a (10e,10o) active space. I get with cisd; ```; There are 252 alpha and 252 beta strings; The CI space requires 63504 (6.35E+04) determinants and 1 blocks; ```; with cisdt; ```; There are 252 alpha and 252 beta strings; The CI space requires 63504 (6.35E+04) determinants and 1 blocks; ```; and with cisdtq; ```; There are 252 alpha and 252 beta strings; The CI space requires 63504 (6.35E+04) determinants and 1 blocks; ```. 63504 is the dimension of the FCI space.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/600#issuecomment-276855493:231,energy,energy,231,https://psicode.org,https://github.com/psi4/psi4/issues/600#issuecomment-276855493,2,['energy'],['energy']
Energy Efficiency,"```; molecule {; He; }. optimize(""scf/cc-pvdz""); ```. on `1.8a1.dev57` gives. ```; Traceback (most recent call last):; File ""/Users/jonathonmisiewicz/psi4/objdir/stage/bin//psi4"", line 345, in <module>; exec(content); File ""<string>"", line 22, in <module>; File ""/Users/jonathonmisiewicz/psi4/objdir/stage/lib/psi4/driver/driver.py"", line 1272, in optimize; opt_object.take_step(); File ""/Users/jonathonmisiewicz/psi4/objdir/stage/lib/optking/opt_helper.py"", line 174, in take_step; self.dq, self.step_str = self.opt_manager.take_step(self.fq, self._Hq, self.E, return_str=True); File ""/Users/jonathonmisiewicz/psi4/objdir/stage/lib/optking/optimize.py"", line 232, in take_step; achieved_dq, returned_str = self.opt_method.take_step(fq, H, energy, return_str=True). ValueError: not enough values to unpack (expected 2, got 0); ```. Something is wrong (or outright missing) for the single-atom case, which should be a straight ""no geometry to optimize.""",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2971:740,energy,energy,740,https://psicode.org,https://github.com/psi4/psi4/issues/2971,1,['energy'],['energy']
Energy Efficiency,"```; molecule {; O; H 1 1.0 ; H 1 1.0 2 104.5; }. wfn = energy(""mp2/sto-6g"", return_wfn=True)[1]; new_wfn = wfn.c1_deep_copy(wfn.basisset()); new_wfn.Ca(); ```. ```; !----------------------------------------------------------------------------------!; ! !; ! Fatal Error: Wavefunction::Ca: Unable to obtain MO coefficients. !; ! Error occurred in file: !; ! /Users/jonathonmisiewicz/psi4/psi4/src/psi4/libmints/wavefunction.cc on !; ! line: 810 !; ! The most recent 5 function calls were: !; ! !; !----------------------------------------------------------------------------------!; ```. Using `c1_deep_copy` on a non-HF wfn means the orbitals don't copy: that's handled by the constructor. This is causing problems in Francesco's group.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2777:56,energy,energy,56,https://psicode.org,https://github.com/psi4/psi4/issues/2777,1,['energy'],['energy']
Energy Efficiency,```; molecule {; symmetry c1; H 0.0 0.0 0.0; H 0.0 0.0 1000.0; }. set basis STO-3G; energy('fci'); ```. gives out NaNs after the first iteration.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/561:84,energy,energy,84,https://psicode.org,https://github.com/psi4/psi4/issues/561,1,['energy'],['energy']
Energy Efficiency,```; molecule {; symmetry c1; He 0.0 0.0 0.0; He 0.0 0.0 1000.0; }. set basis 6-31G; set GUESS_VECTOR UNIT; set NUM_DETS_PRINT 4000000000000; set e_convergence 1e-10; set r_convergence 1e-10; set diag_method mitrushenkov; energy('fci'); ```. segfaults.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/560:222,energy,energy,222,https://psicode.org,https://github.com/psi4/psi4/issues/560,1,['energy'],['energy']
Energy Efficiency,```; molecule {; symmetry c1; He 0.0 0.0 0.0; He 0.0 0.0 1000.0; }. set basis 6-31G; set GUESS_VECTOR UNIT; set NUM_DETS_PRINT 4000000000000; set e_convergence 1e-10; set r_convergence 1e-10; set diag_method olsen; energy('fci'); ```. gives either a segfault or; ```; *** H0 Block Eigenvalue = -5.71032085. Find the roots with Olsen's single vector algorithm; init_array: trouble allocating memory ; size = -1465995312; ```,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/559:215,energy,energy,215,https://psicode.org,https://github.com/psi4/psi4/issues/559,1,['energy'],['energy']
Energy Efficiency,"```; molecule {; units bohr; H; H 1 2.7; }. set scf_type pk. energy('fci/sto-6g'); ```. Above input file crashes with `Fatal Error: CIWavefunction: Iterations did not converge!` and lots of ""NAN"" in the output file.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2243:61,energy,energy,61,https://psicode.org,https://github.com/psi4/psi4/issues/2243,1,['energy'],['energy']
Energy Efficiency,"`bypass_scf` _should_ not work as there is no longer a global wavefunction. So this simply need to be purged from docs/driver/etc and replaced with:. ``` python; scf_e, scf_wfn = energy('SCF', return_wfn = True); energy('other_method', ref_wfn=scf_wfn); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/353#issuecomment-211380881:179,energy,energy,179,https://psicode.org,https://github.com/psi4/psi4/issues/353#issuecomment-211380881,2,['energy'],['energy']
Energy Efficiency,`c-hooo` from the W4-17 database fails to converge in many basis sets; here pcseg-0 for example:; ```; molecule {; 0 2; O 1.14394 0.07535 0.00000; O 0.00000 0.57695 0.00000; O -1.08211 -0.49387 0.00000; H -0.49463 -1.26742 0.00000; }. set basis pcseg-0; set reference uhf; energy('scf'); ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/888#issuecomment-619347930:273,energy,energy,273,https://psicode.org,https://github.com/psi4/psi4/issues/888#issuecomment-619347930,1,['energy'],['energy']
Energy Efficiency,`cc5` is a near duplicate of `cc5a`. The latter uses a smaller basis set as `cc5` is very slow.; `scf11-freq-from-energies` is a near duplicate of `fd-freq-energy-large` with a slightly different geometry. The former does not pass without adjusting findif stepsize settings.; `dft-pbe0-2` is duplicated verbatim in `dft-custom-dhdf`; `dft-dsd` is duplicated in `dft-custom-dhdf` with corrected reference values. Former does not pass.; `dft-dldf` is duplicated in `dft-custom-mgga` with corrected reference values. Former does not pass.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2655#issuecomment-1203164328:156,energy,energy-large,156,https://psicode.org,https://github.com/psi4/psi4/pull/2655#issuecomment-1203164328,1,['energy'],['energy-large']
Energy Efficiency,"`compute_gradient` after a `energy(""ccsd"")` and `gradient(""scf"")` also throw the wfn.h error, so no worries there. py-side `gradient(""ccsd"")` is what this PR misses catching, as I see it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2200#issuecomment-869809049:28,energy,energy,28,https://psicode.org,https://github.com/psi4/psi4/pull/2200#issuecomment-869809049,1,['energy'],['energy']
Energy Efficiency,`compute_gradient` is also in use py-side for dispersion. perhaps we could cease to export the fn for general wfn and only keep export for libdisp and dfmp2. that reduces the risk of relativistic misuse to one method.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2223#issuecomment-870586927:163,reduce,reduces,163,https://psicode.org,https://github.com/psi4/psi4/issues/2223#issuecomment-870586927,1,['reduce'],['reduces']
Energy Efficiency,"`density_a` must be the MO density while all quantities on the Wavefunction itself are in the AO basis. I can see how this could be confusing and have edited several parts of the documentation. In addition, most post-SCF methods do not build the density by default as this can be much more costly than the energy itself. Perhaps @amjames can give hints on extracting CC densities.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/504#issuecomment-258831635:306,energy,energy,306,https://psicode.org,https://github.com/psi4/psi4/issues/504#issuecomment-258831635,1,['energy'],['energy']
Energy Efficiency,`df_fitting_condition 1e-5` yields; ```; Iter DIIS Energy d(Energy) |d(T)| time; 0 0 1 -236767940236.2724609375 -236767940236.2724609375 64635.6718298420 130; ```. so something is still awry.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1545#issuecomment-465304144:51,Energy,Energy,51,https://psicode.org,https://github.com/psi4/psi4/issues/1545#issuecomment-465304144,2,['Energy'],['Energy']
Energy Efficiency,"`dfmp2-4` and `opt-irc-2` are currently failing as well. `dfmp2-4` just needs to adapt to syntax from PR #1789 and is easily fixed. `opt-irc-2` fails because the last IRC point does not have the expected energy. I suspect #1804 instigated this, but the true culprit is that optking cannot accurately say when the IRC converged. The IRC report when I run the test is. ```; @IRC ----------------------------------------------; @IRC **** IRC Report **** ; @IRC ----------------------------------------------; @IRC Step Energy Change in Energy ; @IRC ----------------------------------------------; @IRC 0 -92.810710767266 -92.810710767266; @IRC 1 -92.811778450261 -0.001067682995; @IRC 2 -92.814803984808 -0.003025534547; @IRC 3 -92.819270546903 -0.004466562095; @IRC 4 -92.824389153679 -0.005118606776; @IRC 5 -92.829383508727 -0.004994355049; @IRC 6 -92.833903705977 -0.004520197249; @IRC 7 -92.838018066774 -0.004114360797; @IRC 8 -92.841889747803 -0.003871681030; @IRC 9 -92.845625951635 -0.003736203832; @IRC 10 -92.849260395757 -0.003634444122; @IRC 11 -92.852777598444 -0.003517202687; @IRC 12 -92.856140015989 -0.003362417545; @IRC 13 -92.859308223013 -0.003168207024; @IRC 14 -92.862250220465 -0.002941997452; @IRC 15 -92.864943075409 -0.002692854944; @IRC 16 -92.867368006399 -0.002424930990; @IRC 17 -92.869505711996 -0.002137705597; @IRC 18 -92.871329201900 -0.001823489904; @IRC 19 -92.872798961306 -0.001469759406; @IRC 20 -92.873862613736 -0.001063652429; @IRC 21 -92.874464128325 -0.000601514589; @IRC 22 -92.874561860949 -0.000097732624; @IRC 23 -92.874559174537 0.000002686412; @IRC 24 -92.874584188151 -0.000025013614; @IRC 25 -92.874518478044 0.000065710108; @IRC 26 -92.874584083068 -0.000065605025; @IRC 27 -92.874584016106 0.000000066962; @IRC ----------------------------------------------; ```. Compared to the reference from 2017, the first step has an energy difference on the order of 1e-4, and the energy difference remains at or below 1e-4 up to step 22. If I had to guess, ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1793#issuecomment-592806226:81,adapt,adapt,81,https://psicode.org,https://github.com/psi4/psi4/issues/1793#issuecomment-592806226,4,"['Energy', 'adapt', 'energy']","['Energy', 'adapt', 'energy']"
Energy Efficiency,"`dft-grad-lr3` test fails with the current master (64aa80aa96983bec51d40732d18f3def5eb9e844):; ```; $ ctest -R dft-grad-lr3 --output-on-failure; Test project /home/raimis/psi4.git/linux_build; Start 158: dft-grad-lr3; 1/1 Test #158: dft-grad-lr3 .....................***Failed 85.00 sec; 	Analytic vs Reference wB97X-D Gradients...........................PASSED; Traceback (most recent call last):; File ""/home/raimis/psi4.git/linux_build/stage/bin/psi4"", line 290, in <module>; exec(content); File ""<string>"", line 74, in <module>; File ""/home/raimis/psi4.git/linux_build/stage/lib/psi4/driver/driver.py"", line 680, in gradient; wfn = procedures['gradient'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/raimis/psi4.git/linux_build/stage/lib/psi4/driver/procrouting/proc.py"", line 2084, in run_scf_gradient; ref_wfn = run_scf(name, **kwargs); File ""/home/raimis/psi4.git/linux_build/stage/lib/psi4/driver/procrouting/proc.py"", line 2022, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/home/raimis/psi4.git/linux_build/stage/lib/psi4/driver/procrouting/proc.py"", line 1363, in scf_helper; disp_energy = scf_wfn._disp_functor.compute_energy(scf_wfn.molecule()); File ""/home/raimis/psi4.git/linux_build/stage/lib/psi4/driver/procrouting/empirical_dispersion.py"", line 195, in compute_energy; verbose=1); File ""/home/raimis/psi4.git/linux_build/stage/lib/psi4/driver/qcdb/intf_dftd3/runner.py"", line 136, in run_dftd3_from_arrays; jobrec['qcvars']['CURRENT ENERGY'] = copy.deepcopy(jobrec['qcvars']['DISPERSION CORRECTION ENERGY']). KeyError: 'qcvars'; Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ). 0% tests passed, 1 tests failed out of 1. Label Time Summary:; dft = 85.00 sec*proc (1 test); psi = 85.00 sec*proc (1 test); scf = 85.00 sec*proc (1 test). Total Test time (real) = 85.06 sec. The following tests FAILED:; 	158 - dft-grad-lr3 (Failed); Errors while running CTest; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1418:1498,ENERGY,ENERGY,1498,https://psicode.org,https://github.com/psi4/psi4/issues/1418,2,['ENERGY'],['ENERGY']
Energy Efficiency,`energy('B3lyp/6-311++G**')` is another one the regex needs to be smarter for.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/934#issuecomment-379323814:1,energy,energy,1,https://psicode.org,https://github.com/psi4/psi4/issues/934#issuecomment-379323814,1,['energy'],['energy']
Energy Efficiency,"`energy('mp2.5')` recently defied us by not running in its fastest (DF) form. presently, <=MP2 defaults to DF in psi4 and >MP2 defaults to CONV. there is a proposal to shift that line to <=MP3. ### Data; * equal DF & CONV: mp2, mp3, mp2.5, lccd,; * strongly CONV: mp4, lccsd, ccsd, ccsd(t), cisd. ### Pro-shift; * by using ""MP"", you're after speed, not accuracy, particularly not DF vs. CONV level accuracy; * more commands run faster without options; * CDS wants it. ### Anti-shift; * how does lccd/lccsd fit in?; * will make re-run inputs change rather more than physconst or dft screening; * mp3 is a little harder to remember as a bright line in the methods than mp2. This issue made to collect opinions and to make sure a decision is made before v1.4. fwiw, I'm neutral.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1801:1,energy,energy,1,https://psicode.org,https://github.com/psi4/psi4/issues/1801,1,['energy'],['energy']
Energy Efficiency,"`maxiter = 0` is fundamentally different from `maxiter>0`. Again, in the former no SCF step is even taken; the code should just evaluate the energy. I think there's a limit to the stupidity we can assume from the users...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2073#issuecomment-784545976:141,energy,energy,141,https://psicode.org,https://github.com/psi4/psi4/pull/2073#issuecomment-784545976,1,['energy'],['energy']
Energy Efficiency,"`python; Python 3.6.3 | packaged by conda-forge | (default, Nov 4 2017, 10:10:56) ; [GCC 4.8.2 20140120 (Red Hat 4.8.2-15)] on linux; Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.; >>> import sys; >>> sys.executable; '/home/xxx/data/applications/anaconda3/envs/p4env/bin/python'; >>> sys.path; ['', '/home/xxx/data/applications/anaconda3/envs/p4env/lib/python36.zip', '/home/xxx/data/applications/anaconda3/envs/p4env/lib/python3.6', '/home/xxx/data/applications/anaconda3/envs/p4env/lib/python3.6/lib-dynload', '/home/xxx/data/applications/anaconda3/envs/p4env/lib/python3.6/site-packages']; >>> import psi4; /home/xxx/data/applications/anaconda3/envs/p4env/lib/python3.6/site-packages/v2rdm_casscf/v2rdm_casscf.so loaded.; ```. If I run inside a notebook, `sys.path` and `sys.executable` are the same, but when I `import psi4`, I get a message ""The kernel appears to have died. It will restart automatically."" In the terminal, I see: ; ```; [I 17:41:23.834 NotebookApp] Adapting to protocol v5.1 for kernel 56076279-b2b7-4f6a-8fb0-83b5b1f774c4; [IPKernelApp] ERROR | No such comm target registered: jupyter.widget.version; [IPKernelApp] ERROR | No such comm target registered: jupyter.widget.version; terminate called after throwing an instance of 'std::bad_cast'; what(): std::bad_cast; [I 17:41:41.146 NotebookApp] KernelRestarter: restarting kernel (1/5); ```. I think the first three lines are unrelated. The kernel never recovers and I can't import the module. Should I expect that Psi4 will work inside a `jupyter notebook` and if so, is there any way to get more information about what's going wrong?. **Edit:** I should add that to get `jupyter notebook` to see the `p4env` conda environment, I executed `conda install ipykernel --name p4env` and then `~/data/applications/psi4conda/envs/p4env/bin/python -m ipykernel install --user` (according to [these](https://github.com/jupyter/notebook/issues/1524) instructions). - CentOS Linux release 7.4.1708 (Core) ; - 3.1",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/862:1553,Adapt,Adapting,1553,https://psicode.org,https://github.com/psi4/psi4/issues/862,1,['Adapt'],['Adapting']
Energy Efficiency,"a CAS just rotate the active space orbitals amongst; themselves, and the CAS energy is (by definition) invariant to rotations; within the active space. I suppose you could do this if you just wanted to; see how the CI coefficients changed if you used natural orbitals as the; one-particle basis. More typical, if you had trouble converging the CASSCF, would be to run an; initial MP2 or CISD (with no frozen virtuals) and get natural orbitals out; of that, and then do a CAS with those starting orbitals. As Daniel says, we may not have a great mechanism right now to do this with; MP2 NO's (we'll have to work on that). But, if it's a small molecule,; running a CISD initially and getting NO's from that should work. Although,; again, you'd need to be sure to change the keywords ... something like this:. set restricted_uocc [0]; ci_e, ci_wfn = energy('cisd', return_wfn=True). set restricted_uocc [16]; energy('casscf', ref_wfn=ci_wfn). Regarding the original question, though, do you get the same energy out of; the 2nd CASSCF (within convergence criteria)?. On Fri, Jan 27, 2017 at 3:51 AM, Susi Lehtola <notifications@github.com>; wrote:. > I'm a bit puzzled by CAS. The following input; >; > molecule {; > 0 1; > symmetry c1; > C; > C 1 1.0; > }; >; > set basis cc-pVDZ; > set scf_type pk; > set restricted_docc [2]; > set restricted_uocc [16]; > set active [10]; > set wfn detci; > set NUM_DETS_PRINT 40000; > set e_convergence 1e-10; > set r_convergence 1e-10; > set ci_maxiter 1000; > set mcscf_maxiter 100; > set nat_orbs true; >; > cas_e, cas_wfn = energy('casscf', return_wfn=True); >; > energy('casscf', ref_wfn=cas_wfn); >; > should do what you suggest, but when I look at the determinants output; >; > * 1 0.817064 ( 1, 1) 3AX 4AX 5AX 7AX; > * 2 -0.477071 ( 2, 2) 3AX 4AX 6AX 7AX; > * 3 -0.081234 ( 15, 15) 3AX 4AX 5AX 9AX; > * 4 -0.079478 ( 10, 10) 3AX 5AX 7AX 8AX; > * 5 0.075356 ( 3, 9) 3AX 4AB 5AA 6AA 7AX 8AB; >; > the Aufbau determinant has a tiny weight: -5.602591646315e-03. If",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/556#issuecomment-275696618:1339,energy,energy,1339,https://psicode.org,https://github.com/psi4/psi4/issues/556#issuecomment-275696618,1,['energy'],['energy']
Energy Efficiency,a bug in energy() function,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/927:9,energy,energy,9,https://psicode.org,https://github.com/psi4/psi4/issues/927,1,['energy'],['energy']
Energy Efficiency,ability1 ....................... Passed 4.39 sec; Start 223: mints9; 369/413 Test #136: dfmp2-grad1 ...................... Passed 8.06 sec; Start 222: mints-helper; 370/413 Test #122: dfccd1 ........................... Passed 6.37 sec; Start 351: sapt-sf1; 371/413 Test #384: psi4numpy-rhf .................... Passed 1.01 sec; Start 347: dfep2-2; 372/413 Test #380: mints12 .......................... Passed 1.28 sec; Start 332: scf-bs; 373/413 Test #354: stability2 ....................... Passed 2.35 sec; Start 216: mints3; 374/413 Test #224: mints10 .......................... Passed 2.23 sec; Start 289: psimrcc-ccsd_t-1; 375/413 Test #190: fci-tdm .......................... Passed 1.59 sec; Start 329: scf-guess-read1; 376/413 Test #355: tu1-h2o-energy ................... Passed 1.51 sec; Start 336: scf3; 377/413 Test #222: mints-helper ..................... Passed 1.51 sec; Start 132: dfmp2-2; 378/413 Test #104: decontract ....................... Passed 1.91 sec; Start 356: tu2-ch2-energy; 379/413 Test #123: dfccdl1 .......................... Passed 3.74 sec; Start 300: pubchem2; 380/413 Test #120: dfcasscf-fzc-sp .................. Passed 3.87 sec; Start 313: rasci-h2o; 381/413 Test #332: scf-bs ........................... Passed 1.21 sec; Start 330: scf-upcast-custom-basis; 382/413 Test #290: psimrcc-ccsd_t-2 ................. Passed 2.12 sec; Start 212: mcscf2; 383/413 Test #351: sapt-sf1 ......................... Passed 1.63 sec; Start 8: castup1; 384/413 Test #223: mints9 ........................... Passed 2.14 sec; Start 218: mints5; 385/413 Test #216: mints3 ........................... Passed 1.20 sec; Start 241: numpy-array-interface; 386/413 Test #347: dfep2-2 .......................... Passed 2.13 sec; Start 366: options1; 387/413 Test #336: scf3 ............................. Passed 1.28 sec; Start 217: mints4; 388/413 Test #241: numpy-array-interface ............ Passed 0.68 sec; Start 213: mcscf3; 389/413 Test #218: mints5 ........................... Passe,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1246#issuecomment-425384085:35669,energy,energy,35669,https://psicode.org,https://github.com/psi4/psi4/pull/1246#issuecomment-425384085,1,['energy'],['energy']
Energy Efficiency,"ace, if that makes the git operations easier.; > * edit sapt-dft1 test to be something like the below. This adds an extra section without the deltaHF correction. The analogous value in test sapt-dft2 is `DHF = -1.42620815`. This passes on master for me, so having the dHF=False pass on your PR will help verify the separate routing logic you added. With this in place, there won't be a need to separate out tests into another PR.; > ; > ```; > #! SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms.; > ; > DHF = -0.01189736 #TEST; > Eref_nh = {""SAPT ELST ENERGY"": -0.10190449, #TEST; > ""SAPT EXCH ENERGY"": 0.36545706, #TEST; > ""SAPT IND ENERGY"": -0.00840483, #TEST; > ""SAPT DISP ENERGY"": -0.24398704, #TEST; > ""CURRENT ENERGY"": 0.01122234} #TEST; > ; > Eref_h_disp = {""SAPT ELST ENERGY"": -0.10197193, #TEST; > ""SAPT EXCH ENERGY"": 0.36569812, #TEST; > ""SAPT IND ENERGY"": -0.00840370, #TEST; > ""SAPT DISP ENERGY"": -0.26658499, #TEST; > ""CURRENT ENERGY"": -0.01126250} #TEST; > ; > Eref_h_fixed = {""SAPT ELST ENERGY"": -0.10197193, #TEST; > ""SAPT EXCH ENERGY"": 0.36569812, #TEST; > ""SAPT IND ENERGY"": -0.00840370, #TEST; > ""SAPT DISP ENERGY"": -0.26605283, #TEST; > ""CURRENT ENERGY"": -0.01073034} #TEST; > ; > molecule dimer {; > Ne; > --; > Ar 1 6.5; > units bohr; > }; > ; > set {; > basis aug-cc-pvdz; > scf_type df; > sapt_dft_grac_shift_a 0.203293; > sapt_dft_grac_shift_b 0.138264; > }; > ; > # No hybrid kernel & no exch-disp scaling & no deltaHF; > set SAPT_DFT_DO_DHF False; > set SAPT_DFT_DO_HYBRID False; > set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; > energy('sapt(dft)', molecule=dimer); > for k, v in Eref_nh.items(): #TEST; > if k in [""SAPT IND ENERGY"", ""CURRENT ENERGY""]:; > ref = (v - DHF) / 1000.0; > else:; > ref = v / 1000.0; > compare_values(ref, psi4.variable(k), 6, ""!hyb, xd=none, !dHF: "" + k) #TEST; > ; > # No hybrid kernel & no exch-disp scaling; > set SAPT_DFT_DO_DHF True; > set SAPT_DFT_DO_HYBRID False; > set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; > energy('sapt(d",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2481#issuecomment-1284653967:1524,ENERGY,ENERGY,1524,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1284653967,1,['ENERGY'],['ENERGY']
Energy Efficiency,ad1 ....................... Passed 1466.56 sec; Start 28: cc13c; 24/413 Test #114: dcft6 ............................ Passed 226.08 sec; Start 71: cc52; 25/413 Test #77: cc7 .............................. Passed 665.07 sec; Start 375: dft-custom-mgga; 26/413 Test #13: cbs-xtpl-alpha ................... Passed 425.08 sec; Start 98: cisd-opt-fd; 27/413 Test #28: cc13c ............................ Passed 157.23 sec; Start 307: pywrap-checkrun-rohf; 28/413 Test #46: cc3 .............................. Passed 1642.77 sec; Start 322: sapt6; 29/413 Test #242: ocepa-freq1 ...................... Passed 704.28 sec; Start 31: cc15; 30/413 Test #71: cc52 ............................. Passed 164.06 sec; Start 44: cc28; 31/413 Test #197: fd-freq-gradient-large ........... Passed 290.82 sec; Start 106: dcft-grad2; 32/413 Test #98: cisd-opt-fd ...................... Passed 155.65 sec; Start 146: dfomp2-grad2; 33/413 Test #375: dft-custom-mgga .................. Passed 183.50 sec; Start 11: cbs-delta-energy; 34/413 Test #112: dcft4 ............................ Passed 1745.55 sec; Start 160: dfscf-bz2; 35/413 Test #31: cc15 ............................. Passed 89.05 sec; Start 58: cc40; 36/413 Test #44: cc28 ............................. Passed 88.29 sec; Start 283: opt-irc-2; 37/413 Test #322: sapt6 ............................ Passed 158.72 sec; Start 117: dcft9; 38/413 Test #146: dfomp2-grad2 ..................... Passed 99.16 sec; Start 60: cc42; 39/413 Test #106: dcft-grad2 ....................... Passed 122.59 sec; Start 151: dfomp3-grad2; 40/413 Test #58: cc40 ............................. Passed 84.64 sec; Start 47: cc30; 41/413 Test #160: dfscf-bz2 ........................ Passed 131.53 sec; Start 349: sapt-dft2; 42/413 Test #60: cc42 ............................. Passed 81.75 sec; Start 251: omp2-4; 43/413 Test #151: dfomp3-grad2 ..................... Passed 88.57 sec; Start 261: omp3-3; 44/413 Test #195: fd-freq-energy-large ............. Passed 515.62 sec; Start 262: omp3-4,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1237#issuecomment-425038275:3495,energy,energy,3495,https://psicode.org,https://github.com/psi4/psi4/pull/1237#issuecomment-425038275,1,['energy'],['energy']
Energy Efficiency,ad2 ..................... Passed 28.08 sec; Start 204: frac-ip-fitting; 71/404 Test #299: pywrap-alias ..................... Passed 36.56 sec; Start 250: omp2-5; 72/404 Test #59: cc42 ............................. Passed 20.06 sec; Start 242: ocepa-grad2; 73/404 Test #373: dft-custom-mgga .................. Passed 57.03 sec; Start 183: isapt2; 74/404 Test #320: sapt6 ............................ Passed 55.07 sec; Start 244: ocepa2; 75/404 Test #57: cc40 ............................. Passed 21.98 sec; Start 153: dfomp2p5-grad2; 76/404 Test #250: omp2-5 ........................... Passed 25.71 sec; Start 249: omp2-4; 77/404 Test #242: ocepa-grad2 ...................... Passed 26.85 sec; Start 263: omp3-grad2; 78/404 Test #153: dfomp2p5-grad2 ................... Passed 20.54 sec; Start 170: dft1-alt; 79/404 Test #204: frac-ip-fitting .................. Passed 44.19 sec; Start 347: sapt-dft2; 80/404 Test #244: ocepa2 ........................... Passed 30.49 sec; Start 19: cbs-xtpl-wrapper; 81/404 Test #11: cbs-delta-energy ................. Passed 54.44 sec; Start 77: cc8; 82/404 Test #17: cbs-xtpl-opt ..................... Passed 56.20 sec; Start 43: cc28; 83/404 Test #249: omp2-4 ........................... Passed 21.37 sec; Start 147: dfomp3-2; 84/404 Test #263: omp3-grad2 ....................... Passed 20.20 sec; Start 107: dcft1; 85/404 Test #77: cc8 .............................. Passed 8.45 sec; Start 151: dfomp2p5-2; 86/404 Test #183: isapt2 ........................... Passed 47.88 sec; Start 46: cc30; 87/404 Test #147: dfomp3-2 ......................... Passed 14.61 sec; Start 276: opt11; 88/404 Test #151: dfomp2p5-2 ....................... Passed 13.89 sec; Start 82: cc9a; 89/404 Test #107: dcft1 ............................ Passed 14.95 sec; Start 371: dft-custom-dhdf; 90/404 Test #43: cc28 ............................. Passed 26.56 sec; Start 81: cc9; 91/404 Test #82: cc9a ............................. Passed 8.92 sec; Start 78: cc8a; 92/404 Test #46: cc30 ..,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-404174338:7651,energy,energy,7651,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-404174338,1,['energy'],['energy']
Energy Efficiency,adapt for pydantic v1 and v2,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3019:0,adapt,adapt,0,https://psicode.org,https://github.com/psi4/psi4/pull/3019,1,['adapt'],['adapt']
Energy Efficiency,added plot for Argon dimer showing oscillating energy (following the Ochsenfeld paper),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1591#issuecomment-481629474:47,energy,energy,47,https://psicode.org,https://github.com/psi4/psi4/pull/1591#issuecomment-481629474,1,['energy'],['energy']
Energy Efficiency,adds missing mp3 energy variables to dfocc and occ,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1707:17,energy,energy,17,https://psicode.org,https://github.com/psi4/psi4/pull/1707,1,['energy'],['energy']
Energy Efficiency,adient ........... Passed 1.31 sec; Start 388: python-energy; 380/412 Test #355: tu2-ch2-energy ................... Passed 1.33 sec; Start 310: pywrap-molecule; 381/412 Test #354: tu1-h2o-energy ................... Passed 1.74 sec; Start 335: scf3; 382/412 Test #221: mints-helper ..................... Passed 1.51 sec; Start 212: mcscf3; 383/412 Test #391: python-mints9 .................... Passed 2.12 sec; Start 217: mints5; 384/412 Test #396: python-mints13 ................... Passed 2.00 sec; Start 383: psi4numpy-rhf; 385/412 Test #222: mints9 ........................... Passed 2.10 sec; Start 210: mcscf1; 386/412 Test #405: json-schema-1-properties ......... Passed 1.36 sec; Start 240: numpy-array-interface; 387/412 Test #401: json-schema-1-ghost .............. Passed 1.16 sec; Start 175: docs-bases; 388/412 Test #381: psi4numpy-cphf ................... Passed 1.45 sec; Start 213: mints1; 389/412 Test #399: json-v11-gradient ................ Passed 1.47 sec; Start 309: pywrap-db3; 390/412 Test #388: python-energy .................... Passed 1.16 sec; Start 216: mints4; 391/412 Test #240: numpy-array-interface ............ Passed 0.92 sec; Start 209: matrix1; 392/412 Test #379: mints12 .......................... Passed 1.36 sec; Start 410: skeletonscf; 393/412 Test #310: pywrap-molecule .................. Passed 1.27 sec; Start 176: docs-dft; 394/412 Test #335: scf3 ............................. Passed 1.28 sec; Start 365: options1; 395/412 Test #383: psi4numpy-rhf .................... Passed 1.16 sec; Start 403: json-schema-1-throws; 396/412 Test #212: mcscf3 ........................... Passed 1.28 sec; Start 88: cepa1; 397/412 Test #217: mints5 ........................... Passed 1.25 sec; 398/412 Test #175: docs-bases ....................... Passed 0.78 sec; 399/412 Test #210: mcscf1 ........................... Passed 1.26 sec; 400/412 Test #397: python-memdfjk ................... Passed 1.51 sec; 401/412 Test #213: mints1 ........................... Passed 0.96 ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1220#issuecomment-419126068:36719,energy,energy,36719,https://psicode.org,https://github.com/psi4/psi4/pull/1220#issuecomment-419126068,1,['energy'],['energy']
Energy Efficiency,"agrams will be evaluated in 1 blocks over ov2.; v(ab,ci) diagrams will be evaluated in 1 blocks over ov. Allocate cpu memory ( 43.60 mb).....done.; Initialize cpu memory..................done. Begin CISD iterations. Iter DIIS Energy d(Energy) |d(T)| time; 0 0 1 -0.2857372527 -0.2857372527 0.4555767847 1; 1 1 1 -0.2414094495 0.0443278032 0.1511464352 0; 2 2 1 -0.2579356267 -0.0165261772 0.0652368320 0; 3 3 1 -0.2611541701 -0.0032185434 0.0125293726 1; 4 4 1 -0.2613216972 -0.0001675272 0.0032942797 0; 5 5 1 -0.2613427037 -0.0000210064 0.0012770712 0; 6 6 1 -0.2613456527 -0.0000029491 0.0004335425 1; 7 7 1 -0.2613460204 -0.0000003677 0.0001363866 0; 8 8 1 -0.2613460594 -0.0000000390 0.0000408574 1; 9 8 2 -0.2613460625 -0.0000000031 0.0000130842 0; 10 8 3 -0.2613460628 -0.0000000003 0.0000034499 0; 11 8 4 -0.2613460628 -0.0000000000 0.0000008461 1; 12 8 5 -0.2613460628 -0.0000000000 0.0000002627 0; 13 8 6 -0.2613460628 -0.0000000000 0.0000000942 1. CISD iterations converged!. CISD variational energy: -0.261346062815; CISD transition energy: -0.261346060539. OS MP2 FNO correction: -0.000000000000; SS MP2 FNO correction: -0.000000000000; MP2 FNO correction: -0.000000000000. OS SCS-MP2 correlation energy: -0.251080593983; SS SCS-MP2 correlation energy: -0.025501141462; SCS-MP2 correlation energy: -0.276581735444; * SCS-MP2 total energy: -788.124409449857. OS MP2 correlation energy: -0.209233828319; SS MP2 correlation energy: -0.076503424385; MP2 correlation energy: -0.285737252704; * MP2 total energy: -788.133564967117. OS CISD correlation energy: -0.198332372454; SS CISD correlation energy: -0.063013688085; CISD correlation energy: -0.261346062815; * CISD total energy: -788.109173777228. Total time for CISD iterations: 11.63 s (user); 1.47 s (system); 6 s (total). Time per iteration: 0.89 s (user); 0.11 s (system); 0.46 s (total). *** tstop() called on dx7-lehtola.chem.helsinki.fi at Wed Oct 25 21:00:49 2017; Module time:; 	user time = 11.63 seconds = 0.19 minutes; 	system",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/828#issuecomment-339418202:13544,energy,energy,13544,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339418202,1,['energy'],['energy']
Energy Efficiency,"aid, I don't know what is going on. You clearly use the right git commit of psi4 (8e01b1f), but the plugin API is clearly wrong. The following is copied from a message above:. ```; An error has occurred Py-side; Traceback:; : Python argument types in; psi4.plugin(str); did not match C++ signature:; plugin(std::string, boost::shared_ptrpsi::Wavefunction): File """", line 48, in . File ""/home/LUCA/psi-master_18_02.2016/psi4-0.5/share/python/driver.py"", line 586, in energy; wfn = procedures['energy']lowername. File ""./../dmrg/pymodule.py"", line 52, in run_dmrg; returnvalue = psi4.plugin('dmrg.so'); ```. For the record I copy my file 'pymodule.py' here:. ```; import psi4; import re; import os; import inputparser; import math; import warnings; from driver import *; from wrappers import *; from molutil import *; import p4util; from p4xcpt import *. def run_dmrg(name, **kwargs):; r""""""Function encoding sequence of PSI module and plugin calls so that; dmrg can be called via :py:func:`~driver.energy`. For post-scf plugins. >>> energy('dmrg'). """"""; lowername = name.lower(); kwargs = p4util.kwargs_lower(kwargs). # Your plugin's psi4 run sequence goes here; #psi4.set_global_option('BASIS', 'sto-3g'); psi4.set_local_option('MYPLUGIN', 'PRINT', 1). # Compute a SCF reference, a wavefunction is return which holds the molecule used, orbitals; # Fock matrices, and more; print('Attention! This SCF is density-fitted.'); ref_wfn = kwargs.get('ref_wfn', None); if ref_wfn is None:; ref_wfn = scf_helper(name, **kwargs). # Call the Psi4 plugin; # Please note that setting the reference wavefunction in this way is ONLY for plugins; dmrg_wfn = psi4.plugin('dmrg.so', ref_wfn). return dmrg_wfn. # Integration with driver routines; procedures['energy']['dmrg'] = run_dmrg. def exampleFN():; # Your Python code goes here; pass; ```. As you can see it calls. ```; dmrg_wfn = psi4.plugin('dmrg.so', ref_wfn); ```. instead of. ```; returnvalue = psi4.plugin('dmrg.so'); ```. So have you generated the files **",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/266#issuecomment-186113504:2656,energy,energy,2656,https://psicode.org,https://github.com/psi4/psi4/issues/266#issuecomment-186113504,1,['energy'],['energy']
Energy Efficiency,"ails:; ```; molecule mol {; N 0.0 0.0 0.0; N 0.0 0.0 1.0; 0 1; }. basis {; assign genbas; [genbas]; cartesian. ****; N 0; S 6 1.00; 0.4173511460D+04 0.1834772160D-02; 0.6274579110D+03 0.1399462700D-01; 0.1429020930D+03 0.6858655181D-01; 0.4023432930D+02 0.2322408730D+00; 0.1282021290D+02 0.4690699481D+00; 0.4390437010D+01 0.3604551991D+00; SP 3 1.00; 0.1162636186D+02 -0.1149611817D+00 0.6757974388D-01; 0.2716279807D+01 -0.1691174786D+00 0.3239072959D+00; 0.7722183966D+00 0.1145851947D+01 0.7408951398D+00; SP 1 1.00; 0.2120314975D+00 0.1000000000D+01 0.1000000000D+01; ****. }; e, wfn = energy('scf', return_wfn=True); ```; with message:; ```; Traceback (most recent call last):; File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/bin/psi4"", line 337, in <module>; exec(content); File ""<string>"", line 49, in <module>; File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/driver.py"", line 576, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 2250, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 1435, in scf_helper; base_wfn = core.Wavefunction.build(scf_molecule, core.get_global_option('BASIS')); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/p4util/python_helpers.py"", line 122, in _core_wavefunction_build; basis = core.BasisSet.build(mol, ""ORBITAL"", basis); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/p4util/python_helpers.py"", line 87, in _pybuild_basis; return_atomlist=return_atomlist); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/qcdb/libmintsbasisset.py"", line 680, in pyconstruct; verbose=verbose); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/qcdb/libmintsbasisset.py"", line 862, in construct; shells, msg,",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1996:1357,energy,energy,1357,https://psicode.org,https://github.com/psi4/psi4/issues/1996,2,['energy'],['energy']
Energy Efficiency,"al Energies [Eh]									 <; ---------------------									 <; 												 <; Doubly Occupied: 			 <; 												 <; 1Ag -30.481683 2Ag -1.294447 1B1u -0.437312 				 <; 1B3u -0.437312 1B2u -0.437308 							 <; 												 <; Virtual: 			 <; 												 <; 2B1u 1.320623 2B3u 1.320623 2B2u 1.320642 				 <; 3Ag 1.748199 4Ag 4.628379 1B2g 4.628379 				 <; 1B3g 4.628379 1B1g 4.628379 5Ag 4.628380 				 <. Final Occupation by Irrep:									 |	 @RKS iter 4: -64.85356066083639 1.85276e+00 2.38223e+04 DIIS; 												 >	 Occupation by irrep:; Ag B1g B2g B3g Au B1u B2u B3u 						 Ag B1g B2g B3g Au B1u B2u B3u ; DOCC [ 2, 0, 0, 0, 0, 1, 1, 1 ]						 DOCC [ 2, 0, 0, 0, 0, 1, 1, 1 ]. @RKS Final Energy: -128.85010519995217							 |	 @RKS iter 5: -6.75599189156451 5.80976e+01 1.01095e+00 DIIS; 												 |	 Occupation by irrep:; => Energetics <=										 |	 Ag B1g B2g B3g Au B1u B2u B3u ; 												 |	 DOCC [ 2, 1, 1, 1, 0, 0, 0, 0 ]; Nuclear Repulsion Energy = 0.0000000000000000					 <; One-Electron Energy = -182.5700580338770465					 <; Two-Electron Energy = 66.1959588591321619					 <; DFT Exchange-Correlation Energy = -12.4760060252072993					 <; Empirical Dispersion Energy = 0.0000000000000000					 <; VV10 Nonlocal Energy = 0.0000000000000000					 <; Total Energy = -128.8501051999521962					 <; 												 <; Computation Completed										 <; 												 <; 												 <; Properties will be evaluated at 0.000000, 0.000000, 0.000000 [a0]				 <; 												 <; Properties computed using the SCF density matrix						 <; 												 <; Nuclear Dipole Moment: [e a0]									 <; X: 0.0000 Y: 0.0000 Z: 0.0000					 <; 												 <; Electronic Dipole Moment: [e a0]								 <; X: 0.0000 Y: 0.0000 Z: 0.0000					 <; 												 <; Dipole Moment: [e a0]										 <; X: 0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000			 <; 												 <; Dipole Moment: [D]										 <; X: 0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000			 <. 												 >	 @RKS iter 6: -59.21347042486877 -5.24575e+01 ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-755088124:10607,Energy,Energy,10607,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-755088124,1,['Energy'],['Energy']
Energy Efficiency,"al/mol] -0.58747633 [kJ/mol]; Total SAPT2+ -0.21063053 [mEh] -0.13217266 [kcal/mol] -0.55301046 [kJ/mol]; Total SAPT2+(3) -0.18566214 [mEh] -0.11650476 [kcal/mol] -0.48745596 [kJ/mol]; Total SAPT2+3 -0.18495027 [mEh] -0.11605805 [kcal/mol] -0.48558693 [kJ/mol]; Total SAPT2+(CCD) -0.19261506 [mEh] -0.12086778 [kcal/mol] -0.50571084 [kJ/mol]; Total SAPT2+(3)(CCD) -0.16764667 [mEh] -0.10519988 [kcal/mol] -0.44015633 [kJ/mol]; Total SAPT2+3(CCD) -0.16693480 [mEh] -0.10475317 [kcal/mol] -0.43828731 [kJ/mol]. Special recipe for scaled SAPT0 (see Manual):; Electrostatics sSAPT0 -0.21426853 [mEh] -0.13445554 [kcal/mol] -0.56256203 [kJ/mol]; Exchange sSAPT0 0.00071398 [mEh] 0.00044803 [kcal/mol] 0.00187454 [kJ/mol]; Induction sSAPT0 -0.01930071 [mEh] -0.01211138 [kcal/mol] -0.05067402 [kJ/mol]; Dispersion sSAPT0 -0.07951765 [mEh] -0.04989808 [kcal/mol] -0.20877358 [kJ/mol]; Total sSAPT0 -0.31237291 [mEh] -0.19601697 [kcal/mol] -0.82013509 [kJ/mol]. But the energy should the higher, then I include the mid-bond to try to solve this problema . @He -2.068477419249695 0.0 -1.410916582253025 . and the results are, almost, the same:. Total HF -0.24001137 [mEh] -0.15060942 [kcal/mol] -0.63014986 [kJ/mol]; Total SAPT0 -0.31952707 [mEh] -0.20050627 [kcal/mol] -0.83891833 [kJ/mol]; Total SAPT2 -0.23090246 [mEh] -0.14489348 [kcal/mol] -0.60623440 [kJ/mol]; Total SAPT2+ -0.21777522 [mEh] -0.13665602 [kcal/mol] -0.57176884 [kJ/mol]; Total SAPT2+(3) -0.19281865 [mEh] -0.12099553 [kcal/mol] -0.50624536 [kJ/mol]; Total SAPT2+3 -0.19210713 [mEh] -0.12054905 [kcal/mol] -0.50437726 [kJ/mol]; Total SAPT2+(CCD) -0.19975973 [mEh] -0.12535113 [kcal/mol] -0.52446918 [kJ/mol]; Total SAPT2+(3)(CCD) -0.17480316 [mEh] -0.10969064 [kcal/mol] -0.45894570 [kJ/mol]; Total SAPT2+3(CCD) -0.17409164 [mEh] -0.10924416 [kcal/mol] -0.45707760 [kJ/mol]. Special recipe for scaled SAPT0 (see Manual):; Electrostatics sSAPT0 -0.21424647 [mEh] -0.13444170 [kcal/mol] -0.56250411 [kJ/mol]; Exchange sSAPT0 0.00070499 [mEh",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/938:2126,energy,energy,2126,https://psicode.org,https://github.com/psi4/psi4/issues/938,1,['energy'],['energy']
Energy Efficiency,"aled twice leading to incorrect energies. This only happens, when using python and not psithon.; This can easily be seen when adding a 0 charge far away of the molecule to the simulation, which changes energies significantly. I already prepared a PR to fix this, this is just for reference. To reproduce the problem, use the following:; ```; #! Python equivalent of extern5 test:; #! External potential sanity check with 0 charge far away; #! Checks if all units behave the same and energy is same as no; #! potential; import numpy as np; import psi4.core; import psi4. b2a=0.529177249; # Coordinates added in angstrom; coords = np.array([[ -0.778803000000 , 0.000000000000, 1.132683000000],; [ -0.666682000000, 0.764099000000, 1.706291000000],; [ -0.666682000000, -0.764099000000 , 1.706290000000]]); elements = [""O"",""H"",""H""]; molecule_ang = psi4.core.Molecule.from_arrays(geom=coords, elem=elements, fix_symmetry=""c1"", fix_com=True, fix_orientation=True); molecule_bohr = psi4.core.Molecule.from_arrays(geom=coords/b2a, elem=elements, fix_symmetry=""c1"", fix_com=True, fix_orientation=True, units=""Bohr""). external_potentials = [[0.00, np.array([10.0,10.0,10.0]) / b2a]]. psi4.set_options( {; ""scf_type"": ""df"",; ""d_convergence"": 12,; ""basis"": ""STO-3G"",; ""print"": 0,; ""debug"": 0,; }). ene_bohr_charges = psi4.energy('scf', molecule=molecule_bohr, external_potentials=external_potentials); ene_bohr_pure = psi4.energy('scf', molecule=molecule_bohr); psi4.compare_values(ene_bohr_charges, ene_bohr_pure, 6, ""Bohr geometry, charges vs no charges energy equality""). ene_ang_pure = psi4.energy('scf', molecule=molecule_ang); psi4.compare_values(ene_ang_pure, ene_bohr_pure, 6, ""No charges, Bohr vs Angstrom geometry energy equality""). ene_ang_charges = psi4.energy('scf', molecule=molecule_ang, external_potentials=external_potentials); psi4.compare_values(ene_ang_charges, ene_ang_pure, 6, ""Angstrom geometry, charges vs no charges energy equality""); ```; The last line should fail with the current psi4.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3147:1435,energy,energy,1435,https://psicode.org,https://github.com/psi4/psi4/issues/3147,12,"['charge', 'energy']","['charges', 'energy']"
Energy Efficiency,all nice exercises...but as chargemol can take wfx files I would first try to make such files from the psi4 molden files using https://github.com/zorkzou/Molden2AIM. ; Then you don't have to abuse cube files for data transfer. Or is this something else and not chargemol?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1311#issuecomment-436698161:28,charge,chargemol,28,https://psicode.org,https://github.com/psi4/psi4/issues/1311#issuecomment-436698161,2,['charge'],['chargemol']
Energy Efficiency,"als are doubly occupied.; (""docc"" = ""doubly occupied""). Also, if you're doing a RAS, you need to tell the code the max number of; holes in RAS I, and the max number of particles in RAS III. I forget the; keywords off the top of my head. Additionally, if it's high-spin open-shell, at least to keep the SCF; straight (can't remember if DETCI needs this or not), you probably should; be specifying the symmetries of the singly occupied orbitals with the SOCC; keyword. There may or may not be some additional problems. On Tue, Aug 13, 2019 at 6:42 AM Susi Lehtola <notifications@github.com>; wrote:. > The following input fails with a segfault; >; > molecule {; > 0 5; > Fe; > }; >; > set basis pcseg-0; > set reference rohf; > set scf_type pk; > set mcscf_type conv; > # Full space is [ 9, 2, 2, 2, 0, 3, 3, 3]; >; > # Ar core; > set restricted_docc [3, 0, 0, 0, 0, 2, 2, 2]; > # spd active space; > set ras1 [0, 0, 0, 0, 0, 0, 0, 0]; > set ras2 [3, 1, 1, 1, 0, 1, 1, 1]; > set ras3 [3, 1, 1, 1, 0, 0, 0, 0]; > cas_e, cas_wfn = energy('rasscf', return_wfn=True); >; > # Dynamical correlation from Ar core; > set restricted_docc [0, 0, 0, 0, 0, 0, 0, 0]; > set ras1 [3, 0, 0, 0, 0, 2, 2, 2]; > ras_e, ras_wfn = energy('detci', ref_wfn=cas_wfn, return_wfn=True); >; > There's something wrong in the input or the code, since there's an error; > message in the log file; >; > ==> Setting up CI strings <==; >; > There are 2730 alpha and 105 beta strings; > (subgr_lex_addr): Impossible walk!; > The CI space requires 18211 (1.82E+04) determinants and 44 blocks; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/1693?email_source=notifications&email_token=AAXVA5TD2EJDK5M4KQ6Q5TTQEKFYNA5CNFSM4ILJOWVKYY3PNVWWK3TUL52HS4DFUVEXG43VMWVGG33NNVSW45C7NFSM4HE5Q2AQ>,; > or mute the thread; > <https://github.com/notifications/unsubscribe-auth/AAXVA5QEYCCJVE5424DTXB3QEKFYNANCNFSM4ILJOWVA>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1693#issuecomment-520830260:1149,energy,energy,1149,https://psicode.org,https://github.com/psi4/psi4/issues/1693#issuecomment-520830260,2,['energy'],['energy']
Energy Efficiency,"amine dimers. With PBEh-3c, I've gotten some suspiciously large errors relative to CCSD(T)/CBS. I have used 590, 99 (spherical,radial) points, and I've also compared the energies to Orca (using defgrid3... after recommendations from issue #2304). Psi4 and Orca differ by as many as .3-.4 kJ/mol, depending on the dimer, which is a large percent error. One test case is summarized below:. | Program | Monomer A (H) | Monomer B (H) | Dimer AB (H)| $E_{int}$ (kcal/mol)| ; |---------|-------------|-------------|-----------|-----------|; | Psi4 | -453.84229689692728 | -453.84229689783353 | -907.68447385499462 | 0.075263339533 |; |Orca | -453.842841688023 | -453.842841698644 | -907.685688152560 | -0.002990642998 |. | Program | $E_{int}$ (kJ/mol)| Notes|; |---------|-------------| ----|; | Psi4 | 0.31490181 | |; |Orca | -0.01251285 | |; | Benchmark | -0.00315431 | Focal Point CCSD(T)/CBS with Psi4 |. I have noticed this warning in all of my Psi4 hexamine/PBEh-3c files:; `Warning: Molecule has a spherically-symmetric moment of charge but lacks icosahedral, octahedral, and tetrahedral symmetry.` . CDS figures this has something to do with the grid placement. Any ideas of how to alleviate this warning while keeping the same geometries and/or what the energy difference could be attributed to? I've tried different basis sets, different number of grid points, `symmetry c1`, `molecule.symmetrize(1e-3)`, no pruning scheme (rather than `robust`). The only time I have been able to get the warning to go away is when I use `bsse_type='cp'`, but I really shouldn't be running the calculation with cp correction because that is already included in the PBEh-3c calculation. Output files for the above example are attached, as well as a graph of Psi4 and Orca interaction energies for all dimers tested. . [Psi4-214-int.txt](https://github.com/psi4/psi4/files/9200713/Psi4-214-int.txt); [Orca-214-monA.txt](https://github.com/psi4/psi4/files/9200765/Orca-214-monA.txt); [Orca-214-monB.txt](https://git",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2647:1138,charge,charge,1138,https://psicode.org,https://github.com/psi4/psi4/issues/2647,1,['charge'],['charge']
Energy Efficiency,ams will be evaluated in 1 blocks over ov. Allocate cpu memory ( 0.49 mb).....done.; Initialize cpu memory..................done. Begin CISD iterations. Iter DIIS Energy d(Energy) |d(T)| time; 0 0 1 -0.1998551539 -0.3267843769 0.1994563594 0; 1 1 1 -0.1953653583 0.0044897956 0.0261066660 0; 2 2 1 -0.1998807440 -0.0045153857 0.0092191040 0; 3 3 1 -0.2002563980 -0.0003756540 0.0033933116 0; 4 4 1 -0.2003267260 -0.0000703281 0.0005902038 0; 5 5 1 -0.2003284394 -0.0000017134 0.0001874109 0; 6 6 1 -0.2003286037 -0.0000001643 0.0000507167 0; 7 7 1 -0.2003286166 -0.0000000128 0.0000118947 0; 8 8 1 -0.2003286173 -0.0000000007 0.0000025104 0; 9 8 2 -0.2003286173 -0.0000000000 0.0000005766 0; 10 8 3 -0.2003286173 -0.0000000000 0.0000001177 0; 11 8 4 -0.2003286173 -0.0000000000 0.0000000230 0. CISD iterations converged!. CISD variational energy: -0.200328617292; CISD transition energy: -0.200328617850. OS SCS-MP2 correlation energy: -0.179813193864; SS SCS-MP2 correlation energy: -0.016670275217; SCS-MP2 correlation energy: -0.196483469081; * SCS-MP2 total energy: -76.213780024364. OS MP2 correlation energy: -0.149844328220; SS MP2 correlation energy: -0.050010825651; MP2 correlation energy: -0.199855153871; * MP2 total energy: -76.217151709154. OS CISD correlation energy: -0.158048399059; SS CISD correlation energy: -0.042280218791; CISD correlation energy: -0.200328617292; * CISD total energy: -76.217625172575. Total time for CISD iterations: 0.06 s (user); 0.11 s (system); 0 s (total). Time per iteration: 0.01 s (user); 0.01 s (system); 0.00 s (total). *** tstop() called on mac-psinet.sherrill.chemistry.gatech.ed at Wed Oct 25 13:40:59 2017; Module time:; 	user time = 0.06 seconds = 0.00 minutes; 	system time = 0.11 seconds = 0.00 minutes; 	total time = 0 seconds = 0.00 minutes; Total time:; 	user time = 0.52 seconds = 0.01 minutes; 	system time = 0.20 seconds = 0.00 minutes; 	total time = 0 seconds = 0.00 minutes. *** Psi4 exiting successfully. Buy a developer a beer!; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/828#issuecomment-339412812:11679,energy,energy,11679,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339412812,10,['energy'],['energy']
Energy Efficiency,and all results are:. ```; Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)...; =======================================================================; Nuclear Repulsion Energy (a.u.) : 4.91953818754669; CD-HF Energy (a.u.) : -25.94513055914802; REF Energy (a.u.) : -25.94513055914802; Alpha-Alpha Contribution (a.u.) : -0.00171224398409; Alpha-Beta Contribution (a.u.) : -0.05664222782838; Beta-Beta Contribution (a.u.) : -0.00005535861213; Scaled_SS Correlation Energy (a.u.): -0.00058920086541; Scaled_OS Correlation Energy (a.u.): -0.06797067339406; CD-SCS-MP2 Total Energy (a.u.) : -26.01369043340749; CD-SOS-MP2 Total Energy (a.u.) : -26.01876545532492; CD-SCSN-MP2 Total Energy (a.u.) : -25.94824153971737; CD-MP2 Correlation Energy (a.u.) : -0.05840983042460; CD-MP2 Total Energy (a.u.) : -26.00354038957262; =======================================================================; ```. @loriab @CDSherrill,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/244#issuecomment-183509137:44,energy,energy,44,https://psicode.org,https://github.com/psi4/psi4/issues/244#issuecomment-183509137,11,"['Energy', 'energy']","['Energy', 'energy']"
Energy Efficiency,"anual) on how to do that calculation. I was able to obtain CASSCF energies and wavefunctions, and was going to just use the CASSCF wavefunction as the reference for MRCI calculation, but had little success in doing so. The followings are my code (python), trying to optimize the energy for the C state of the C2 molecule (which has two main configurations near its equilibrium bond length). The paper included above deals with the X, B, and B' state of C2, but those are not the states that I want. (I want the singlet C state). ## geometry; c2=psi4.geometry(""""""; 0 1; c ; c 1 1.25; symmetry d2h; """"""); ##. ## use the C-state main electron configuration as the reference for CASSCF; psi4.set_options({; 'basis': 'cc-pVdz',; 'reference': 'rohf',; 'docc': [2, 0, 0, 0, 0, 1, 0, 1],; 'socc': [0, 0, 0, 0, 0, 1, 1, 0],; 'restricted_docc': [1, 0, 0, 0, 0, 1, 0, 0],; 'active': [2, 0, 1, 1, 0, 2, 1, 1],; 'mcscf_r_convergence': 5.e-6; }). psi4.set_module_options('detci',{; 'num_roots': 1,; 'calc_s_squared': True; }). casscf_energy, casscf_wfn = psi4.energy('casscf', return_wfn=True). #the code works up to this point. ## my way of feeding the casscf_wfn for another round of CI, but it did not work at all; psi4.set_options({; 'wfn': 'detci',; 'guess': 'gwh',; 'basis': 'cc-pVDZ',; 'restricted_docc': [1, 0, 0, 0, 0, 1, 0, 0],; 'active': [2, 0, 1, 1, 0, 2, 1, 1],; 'e_convergence': 10,; 'd_convergence': 10; }). thisenergy = psi4.energy('detci',ref_wfn=casscf_wfn). When I did the second round of CI, psi4 crashed. It got stuck at the ""Starting CI iterations"" part, with the error message ""Segmentation fault: 11"". I am quite new to Psi4, but hopefully I am not talking complete non-sense here. Also, while the CASSCF bit worked, the CASSCF energy is much higher than I expected (by ~0.2 hartree). The C-state minimum lies above the 3P+3P limit, instead ~2-3 eV below it. So, it would also be helpful if someone could teach me the best way to carry out the CASSCF calculation on the C state. Thanks,. JJ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1907:1392,energy,energy,1392,https://psicode.org,https://github.com/psi4/psi4/issues/1907,3,['energy'],['energy']
Energy Efficiency,"ared_object().get_default_path()}); + local_options={""scratch_directory"": core.IOManager.shared_object().get_default_path(), ""ncores"": core.get_num_threads()}); gcp_part = core.Matrix.from_array(jobrec.return_result); dashd_part.add(gcp_part); ; ```. your script needed a couple tweaks, so here's a working version:; ```; import time; import sys; import os; import json. import psi4. def run_fxyz(fxyz, theory='wB97X-D3/def2-TZVP'):; '''; fxyz: absolute path to an xyz file; '''; elements, xyz = [], []; with open(fxyz) as f:; line = next(f); numb_atoms = int(line.split()[0]); line = next(f); charge, multiplicity = map(int, line.split()); for i in range(numb_atoms):; line = next(f); elmnt, x, y, z = line.split() ; elements.append(elmnt); xyz.append((float(x), float(y), float(z))). fxyz = os.path.basename(fxyz); base, ext = os.path.splitext(fxyz). name = base + '_wB97XD3_def2-TZVP'. geom_string = '\n'.join(['%s %f %f %f' % (e, x, y, z) for e, (x, y, z) in zip(elements, xyz)]); geom_string = str(charge) + ' ' + str(multiplicity) + '\n' + geom_string; print(""geom_string"", geom_string). outfile = name + '.psi4'; psi4.core.set_output_file(outfile, False); geom = psi4.geometry(geom_string); settings = {; 'scf_type': 'DF',; 'dft_basis_tolerance': 1e-10,; 'ints_tolerance': 1e-10,; 'dft_pruning_scheme':'robust',; 'S_ORTHOGONALIZATION': 'PARTIALCHOLESKY',; 'S_CHOLESKY_TOLERANCE': 1e-6,; 'wcombine': False,; }; psi4.set_options(settings); start_time = time.time(); grad = psi4.gradient(theory) ; psi4.core.print_variables(); energy = psi4.variable(""SCF TOTAL ENERGY""); psi4.core.clean(); jobtime = time.time() - start_time; results = {; ""time"": float(jobtime),; ""energy"": energy,; ""gradient"": grad.np.tolist(); }; print(f""{psi4.core.get_num_threads()=}""). with open(name + "".json"", ""w"") as fout:; json.dump(results, fout, indent=4). print(""Job %s completed in %.2f seconds with energy %.10f"" % (base, jobtime, energy)). def main(args):; assert args[1].endswith("".xyz""); psi4.set_num_threads(1); ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2548#issuecomment-1100294938:3821,charge,charge,3821,https://psicode.org,https://github.com/psi4/psi4/issues/2548#issuecomment-1100294938,1,['charge'],['charge']
Energy Efficiency,"arge = 0, multiplicity = 1:						 Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass 		 Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------		 ------------ ----------------- ----------------- ----------------- -----------------; NE 0.000000000000 0.000000000000 0.000000000000 19.992440176200		 NE 0.000000000000 0.000000000000 0.000000000000 19.992440176200. Running in d2h symmetry.										 Running in d2h symmetry. Rotational constants: A = ************ B = ************ C = ************ [cm^-1]			 Rotational constants: A = ************ B = ************ C = ************ [cm^-1]; Rotational constants: A = ************ B = ************ C = ************ [MHz]			 Rotational constants: A = ************ B = ************ C = ************ [MHz]; Nuclear repulsion = 0.000000000000000								 Nuclear repulsion = 0.000000000000000. Charge = 0											 Charge = 0; Multiplicity = 1											 Multiplicity = 1; Electrons = 10											 Electrons = 10; Nalpha = 5											 Nalpha = 5; Nbeta = 5											 Nbeta = 5. ==> Algorithm <==											 ==> Algorithm <==. SCF Algorithm Type is DIRECT.										 SCF Algorithm Type is DIRECT.; DIIS enabled.												 DIIS enabled.; MOM disabled.												 MOM disabled.; Fractional occupation disabled.									 Fractional occupation disabled.; Guess Type is CORE.											 Guess Type is CORE.; Energy threshold = 1.00e-06										 Energy threshold = 1.00e-06; Density threshold = 1.00e-05										 Density threshold = 1.00e-05; Integral threshold = 1.00e-12										 Integral threshold = 1.00e-12. ==> Primary Basis <==											 ==> Primary Basis <==. -AO BASIS SET INFORMATION:									 |	 Basis Set: CC-PVDZ; Name = CC-PVDZ								 |	 Blend: CC-PVDZ; Blend = CC-PVDZ								 |	 Number of shells: 6; Total number of shells = 6									 |	 Number of basis function: 14; Number of primitives = 22									 |	 Number of Cartesian functions: 15; Number of AO = 15							",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-755088124:2571,Charge,Charge,2571,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-755088124,2,['Charge'],['Charge']
Energy Efficiency,"arify all the scaling factor and testing aspects of the PR, so we can move on to the I/O optimization and routing logic parts. Please let me know of any concerns.; > ; > * accept the various GH suggestions clarifying the scaling scheme changes (only if you agree with them, of course). Feel free to make the changes locally, rather than through the GH interface, if that makes the git operations easier.; > * edit sapt-dft1 test to be something like the below. This adds an extra section without the deltaHF correction. The analogous value in test sapt-dft2 is `DHF = -1.42620815`. This passes on master for me, so having the dHF=False pass on your PR will help verify the separate routing logic you added. With this in place, there won't be a need to separate out tests into another PR.; > ; > ```; > #! SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms.; > ; > DHF = -0.01189736 #TEST; > Eref_nh = {""SAPT ELST ENERGY"": -0.10190449, #TEST; > ""SAPT EXCH ENERGY"": 0.36545706, #TEST; > ""SAPT IND ENERGY"": -0.00840483, #TEST; > ""SAPT DISP ENERGY"": -0.24398704, #TEST; > ""CURRENT ENERGY"": 0.01122234} #TEST; > ; > Eref_h_disp = {""SAPT ELST ENERGY"": -0.10197193, #TEST; > ""SAPT EXCH ENERGY"": 0.36569812, #TEST; > ""SAPT IND ENERGY"": -0.00840370, #TEST; > ""SAPT DISP ENERGY"": -0.26658499, #TEST; > ""CURRENT ENERGY"": -0.01126250} #TEST; > ; > Eref_h_fixed = {""SAPT ELST ENERGY"": -0.10197193, #TEST; > ""SAPT EXCH ENERGY"": 0.36569812, #TEST; > ""SAPT IND ENERGY"": -0.00840370, #TEST; > ""SAPT DISP ENERGY"": -0.26605283, #TEST; > ""CURRENT ENERGY"": -0.01073034} #TEST; > ; > molecule dimer {; > Ne; > --; > Ar 1 6.5; > units bohr; > }; > ; > set {; > basis aug-cc-pvdz; > scf_type df; > sapt_dft_grac_shift_a 0.203293; > sapt_dft_grac_shift_b 0.138264; > }; > ; > # No hybrid kernel & no exch-disp scaling & no deltaHF; > set SAPT_DFT_DO_DHF False; > set SAPT_DFT_DO_HYBRID False; > set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; > energy('sapt(dft)', molecule=dimer); > for k, v in Eref_nh.items(): #TEST",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2481#issuecomment-1284653967:1156,ENERGY,ENERGY,1156,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1284653967,1,['ENERGY'],['ENERGY']
Energy Efficiency,"armonics = TRUE. -Contraction Scheme:; Atom Type All Primitives // Shells:; ------ ------ --------------------------; 1 O 18s 5p 2d 1f // 4s 3p 2d 1f ; 2 O 18s 5p 2d 1f // 4s 3p 2d 1f . **PSI4:PCMSOLVER Interface Active**; __________________________________________________________________ test_simint ___________________________________________________________________. @using_simint; def test_simint():; """"""simint/scf5""""""; ; psi4.set_options({'integral_package': 'simint'}); > _test_scf5(). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py:625: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py:487: in _test_scf5; E = psi4.energy('scf', molecule=singlet_o2); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:460: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1942: in run_scf; scf_wfn = scf_helper(name, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1251: in scf_helper; scf_wfn = scf_wavefunction_factory(core.get_option('SCF', 'REFERENCE'), base_wfn); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . reference = 'RHF', ref_wfn = <psi4.core.Wavefunction object at 0x7f6fc4b93fc0>, functional = None. def scf_wavefunction_factory(reference, ref_wfn, functional=None):; """"""Builds the correct wavefunction from the provided information; """"""; ; if core.has_option_changed(""SCF"", ""DFT_DISPERSION_PARAMETERS""):; modified_disp_params = core.get_option(""SCF"", ""DFT_DISPERSION_PARAMETERS""); else:; modified_disp_params = None; ; # Figure out functional; if functional is None:; superfunc, disp_type = dft_f",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/820:11740,energy,energy,11740,https://psicode.org,https://github.com/psi4/psi4/issues/820,2,['energy'],['energy']
Energy Efficiency,art 325: scf-bz2; 7/411 Test #113: dcft7 ............................ Passed 351.15 sec; Start 1: adc1; 8/411 Test #278: opt13 ............................ Passed 840.66 sec; Start 2: adc2; 9/411 Test #1: adc1 ............................. Passed 25.01 sec; Start 3: casscf-fzc-sp; 10/411 Test #3: casscf-fzc-sp .................... Passed 11.82 sec; Start 4: casscf-semi; 11/411 Test #4: casscf-semi ...................... Passed 4.34 sec; Start 5: casscf-sa-sp; 12/411 Test #5: casscf-sa-sp ..................... Passed 18.34 sec; Start 6: ao-casscf-sp; 13/411 Test #2: adc2 ............................. Passed 44.45 sec; Start 7: casscf-sp; 14/411 Test #6: ao-casscf-sp ..................... Passed 5.43 sec; Start 8: castup1; 15/411 Test #8: castup1 .......................... Passed 1.92 sec; Start 9: castup2; 16/411 Test #325: scf-bz2 .......................... Passed 126.98 sec; Start 10: castup3; 17/411 Test #9: castup2 .......................... Passed 14.01 sec; Start 11: cbs-delta-energy; 18/411 Test #10: castup3 .......................... Passed 15.90 sec; Start 12: cbs-parser; 19/411 Test #7: casscf-sp ........................ Passed 33.11 sec; Start 13: cbs-xtpl-alpha; 20/411 Test #394: python-vibanalysis ............... Passed 918.91 sec; Start 14: cbs-xtpl-energy; 21/411 Test #14: cbs-xtpl-energy .................. Passed 12.98 sec; Start 15: cbs-xtpl-freq; 22/411 Test #15: cbs-xtpl-freq .................... Passed 13.65 sec; Start 16: cbs-xtpl-gradient; 23/411 Test #12: cbs-parser ....................... Passed 59.21 sec; Start 17: cbs-xtpl-opt; 24/411 Test #16: cbs-xtpl-gradient ................ Passed 35.82 sec; Start 19: cbs-xtpl-wrapper; 25/411 Test #316: sapt2 ............................ Passed 358.15 sec; Start 20: cc1; 26/411 Test #19: cbs-xtpl-wrapper ................. Passed 80.51 sec; Start 21: cc10; 27/411 Test #17: cbs-xtpl-opt ..................... Passed 109.54 sec; Start 22: cc11; 28/411 Test #20: cc1 .............................. Passed 109.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1112#issuecomment-409912325:1855,energy,energy,1855,https://psicode.org,https://github.com/psi4/psi4/pull/1112#issuecomment-409912325,1,['energy'],['energy']
Energy Efficiency,art 325: scf-bz2; 7/411 Test #25: cc13a ............................ Passed 481.24 sec; Start 1: adc1; 8/411 Test #1: adc1 ............................. Passed 26.25 sec; Start 2: adc2; 9/411 Test #113: dcft7 ............................ Passed 392.65 sec; Start 3: casscf-fzc-sp; 10/411 Test #2: adc2 ............................. Passed 43.73 sec; Start 4: casscf-semi; 11/411 Test #4: casscf-semi ...................... Passed 11.68 sec; Start 5: casscf-sa-sp; 12/411 Test #3: casscf-fzc-sp .................... Passed 19.26 sec; Start 6: ao-casscf-sp; 13/411 Test #6: ao-casscf-sp ..................... Passed 8.25 sec; Start 7: casscf-sp; 14/411 Test #5: casscf-sa-sp ..................... Passed 23.99 sec; Start 8: castup1; 15/411 Test #8: castup1 .......................... Passed 2.23 sec; Start 9: castup2; 16/411 Test #325: scf-bz2 .......................... Passed 124.34 sec; Start 10: castup3; 17/411 Test #9: castup2 .......................... Passed 13.78 sec; Start 11: cbs-delta-energy; 18/411 Test #7: casscf-sp ........................ Passed 38.07 sec; Start 12: cbs-parser; 19/411 Test #10: castup3 .......................... Passed 15.65 sec; Start 13: cbs-xtpl-alpha; 20/411 Test #316: sapt2 ............................ Passed 350.80 sec; Start 14: cbs-xtpl-energy; 21/411 Test #394: python-vibanalysis ............... Passed 958.22 sec; Start 15: cbs-xtpl-freq; 22/411 Test #14: cbs-xtpl-energy .................. Passed 14.64 sec; Start 16: cbs-xtpl-gradient; 23/411 Test #15: cbs-xtpl-freq .................... Passed 9.77 sec; Start 17: cbs-xtpl-opt; 24/411 Test #12: cbs-parser ....................... Passed 69.31 sec; Start 19: cbs-xtpl-wrapper; 25/411 Test #16: cbs-xtpl-gradient ................ Passed 32.38 sec; Start 20: cc1; 26/411 Test #19: cbs-xtpl-wrapper ................. Passed 84.37 sec; Start 21: cc10; 27/411 Test #17: cbs-xtpl-opt ..................... Passed 118.78 sec; Start 22: cc11; 28/411 Test #20: cc1 .............................. Passed 108.09,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1115#issuecomment-411094637:1856,energy,energy,1856,https://psicode.org,https://github.com/psi4/psi4/pull/1115#issuecomment-411094637,1,['energy'],['energy']
Energy Efficiency,art 43: cc28; 48/411 Test #97: cisd-opt-fd ...................... Passed 154.70 sec; Start 59: cc42; 49/411 Test #17: cbs-xtpl-opt ..................... Passed 90.29 sec; Start 347: sapt-dft2; 50/411 Test #373: dft-custom-mgga .................. Passed 178.76 sec; Start 26: cc13b; 51/411 Test #57: cc40 ............................. Passed 62.96 sec; Start 20: cc1; 52/411 Test #320: sapt6 ............................ Passed 163.15 sec; Start 30: cc15; 53/411 Test #107: dcft1 ............................ Passed 67.37 sec; Start 147: dfomp3-2; 54/411 Test #158: dfscf-bz2 ........................ Passed 135.99 sec; Start 74: cc5a; 55/411 Test #181: fsapt-allterms ................... Passed 571.01 sec; Start 69: cc51; 56/411 Test #386: cookbook-rohf-orb-rot ............ Passed 200.39 sec; Start 75: cc6; 57/411 Test #43: cc28 ............................. Passed 100.27 sec; Start 154: dft-grad-lr2; 58/411 Test #59: cc42 ............................. Passed 99.93 sec; Start 65: cc48; 59/411 Test #193: fd-freq-energy-large ............. Passed 499.88 sec; Start 168: dft1; 60/411 Test #183: isapt2 ........................... Passed 128.83 sec; Start 302: pywrap-cbs1; 61/411 Test #347: sapt-dft2 ........................ Passed 119.85 sec; Start 25: cc13a; 62/411 Test #147: dfomp3-2 ......................... Passed 126.78 sec; Start 113: dcft7; 63/411 Test #30: cc15 ............................. Passed 133.87 sec; Start 205: frac-traverse; 64/411 Test #20: cc1 .............................. Passed 139.89 sec; Start 316: sapt2; 65/411 Test #26: cc13b ............................ Passed 142.88 sec; Start 318: sapt4; 66/411 Test #74: cc5a ............................. Passed 110.18 sec; Start 325: scf-bz2; 67/411 Test #379: cc-module ........................ Passed 236.85 sec; Start 61: cc44; 68/411 Test #69: cc51 ............................. Passed 103.52 sec; Start 140: dfomp2-2; 69/411 Test #154: dft-grad-lr2 ..................... Passed 106.99 sec; Start 34: cc19; 70/411 Tes,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1124#issuecomment-411347383:5812,energy,energy-large,5812,https://psicode.org,https://github.com/psi4/psi4/pull/1124#issuecomment-411347383,1,['energy'],['energy-large']
Energy Efficiency,art 76: cc6; 65/412 Test #372: dft-custom-dhdf .................. Passed 94.74 sec; Start 27: cc13b; 66/412 Test #19: cbs-xtpl-nbody ................... Passed 29.27 sec; Start 31: cc15; 67/412 Test #27: cc13b ............................ Passed 12.53 sec; Start 70: cc51; 68/412 Test #279: opt13 ............................ Passed 803.57 sec; Start 28: cc13c; 69/412 Test #31: cc15 ............................. Passed 17.78 sec; Start 318: sapt3; 70/412 Test #28: cc13c ............................ Passed 24.56 sec; Start 145: dfomp2-grad2; 71/412 Test #76: cc6 .............................. Passed 63.00 sec; Start 264: omp3-grad2; 72/412 Test #280: opt14 ............................ Passed 90.98 sec; Start 250: omp2-4; 73/412 Test #317: sapt2 ............................ Passed 360.01 sec; Start 116: dcft9; 74/412 Test #145: dfomp2-grad2 ..................... Passed 24.12 sec; Start 261: omp3-4; 75/412 Test #264: omp3-grad2 ....................... Passed 21.01 sec; Start 193: fd-freq-energy; 76/412 Test #70: cc51 ............................. Passed 70.89 sec; Start 21: cc1; 77/412 Test #318: sapt3 ............................ Passed 80.34 sec; Start 320: sapt5; 78/412 Test #250: omp2-4 ........................... Passed 46.24 sec; Start 251: omp2-5; 79/412 Test #116: dcft9 ............................ Passed 66.57 sec; Start 20: cbs-xtpl-wrapper; 80/412 Test #21: cc1 .............................. Passed 59.47 sec; Start 262: omp3-5; 81/412 Test #261: omp3-4 ........................... Passed 70.83 sec; Start 243: ocepa-grad2; 82/412 Test #193: fd-freq-energy ................... Passed 73.69 sec; Start 293: psimrcc-fd-freq2; 83/412 Test #251: omp2-5 ........................... Passed 48.12 sec; Start 150: dfomp3-grad2; 84/412 Test #262: omp3-5 ........................... Passed 26.64 sec; Start 257: omp2p5-grad2; 85/412 Test #243: ocepa-grad2 ...................... Passed 24.41 sec; Start 245: ocepa2; 86/412 Test #150: dfomp3-grad2 ..................... Passed 20.75,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1225#issuecomment-419883272:7190,energy,energy,7190,https://psicode.org,https://github.com/psi4/psi4/pull/1225#issuecomment-419883272,1,['energy'],['energy']
Energy Efficiency,"ary of VibrationAspect objects (fields: lbl unit data comment); Also returns text suitable for printing; ; +---------------+--------------------------------------------+-----------+------------------------------------------------------+; | key | description (lbl & comment) | units | data (real/imaginary modes) |; +===============+============================================+===========+======================================================+; | omega | frequency | cm^-1 | np.array(ndof) complex (real/imag) |; | q | normal mode, normalized mass-weighted | a0 u^1/2 | np.array(ndof, ndof) float |; | w | normal mode, un-mass-weighted | a0 | np.array(ndof, ndof) float |; | x | normal mode, normalized un-mass-weighted | a0 | np.array(ndof, ndof) float |; | degeneracy | degree of degeneracy | | np.array(ndof) int |; | TRV | translation/rotation/vibration | | np.array(ndof) str 'TR' or 'V' or '-' for partial |; | gamma | irreducible representation | | np.array(ndof) str irrep or None if unclassifiable |; | mu | reduced mass | u | np.array(ndof) float (+/+) |; | k | force constant | mDyne/A | np.array(ndof) float (+/-) |; | DQ0 | RMS deviation v=0 | a0 u^1/2 | np.array(ndof) float (+/0) |; | Qtp0 | Turning point v=0 | a0 u^1/2 | np.array(ndof) float (+/0) |; | Xtp0 | Turning point v=0 | a0 | np.array(ndof) float (+/0) |; | theta_vib | char temp | K | np.array(ndof) float (+/0) |; ; Examples; --------; # displacement of first atom in highest energy mode; >>> vibinfo['x'].data[:, -1].reshape(nat, 3)[0]; ; # remove translations & rotations; >>> vibonly = filter_nonvib(vibinfo); ```; - [ ] Should we run a gradient before every freq to judge whether to project rotations? Right now freq on non-stationary structures are going to be way different than from findif because findif stuck with the (in PR analysis labeling) ""pre-proj"" vibs; - [ ] How to handle natural geometry shift the occurs upon isotopic substitution in geometry but not in reused Hessian? shift/rotate the Hessian? compu",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/834:14077,reduce,reduced,14077,https://psicode.org,https://github.com/psi4/psi4/pull/834,1,['reduce'],['reduced']
Energy Efficiency,"as written assuming that one wants to find a; wavefunction of a definite irreducible representation. So, within D2H, or; C2H, your 3 determinants have different symmetries. I think the only; subgroup in which they will have the same irrep is if it is run in C1. So, I tried setting it up in C1. It runs, but it just gives the HF energy; back. Why? Well, even if we tell the program ""C1"", the system still has; the underlying atomic symmetry (D2H being the highest Abelian subgroup).; Under D2H symmetry, those 3 determinants won't mix, and they don't. Of course, the *true* symmetry of the molecule is atomic symmetry, higher; than D2H. But unfortunately we only have Abelian subgroups in Psi. I am not sure offhand if one could force a mixing by deliberately breaking; the symmetry of the orbitals, or by using a different guess CI vector. I'd; have to think about that a little more. It might be that to do what you; are trying to do and get a fully-spin-adapted multi-configurational; wavefunction, one would need to use actual spherical harmonic atomic; orbitals, not the Cartesian representations p_x, p_y, p_z. On Wed, Jan 8, 2020 at 1:52 PM David Sherrill <prof.david.sherrill@gmail.com>; wrote:. > Hm, nope, that doesn't get around the problem. I'll see if I can take a; > look if I get a minute free later.; >; > On Wed, Jan 8, 2020 at 1:46 PM David Sherrill <; > prof.david.sherrill@gmail.com> wrote:; >; >> This is one of those rare cases where the HF reference actually has some; >> influence. (Usually, we say that the HF is ""irrelevant"" in a CASSCF; >> computation). The issue is that the code can't determine what irrep; >> your target wavefunction is supposed to be, because you haven't given it; >> information about the orbital occupancy of the reference HF wavefunction.; >> I think if you specified docc [] and socc [] arrays for the reference; >> high-spin triplet, the code would have a much better chance to figure out; >> what you want.; >>; >> On Wed, Jan 8, 2020 at 7:10 AM S",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1778#issuecomment-572253043:1017,adapt,adapted,1017,https://psicode.org,https://github.com/psi4/psi4/issues/1778#issuecomment-572253043,1,['adapt'],['adapted']
Energy Efficiency,assed 0.89 sec; Start 400: json-schema-1-ghost; 382/411 Test #288: psimrcc-ccsd_t-2 ................. Passed 1.47 sec; Start 353: tu1-h2o-energy; 383/411 Test #220: mints-helper ..................... Passed 1.12 sec; Start 330: scf-bs; 384/411 Test #411: skeletonwavefunction ............. Passed 0.90 sec; Start 378: mints12; 385/411 Test #398: json-v11-gradient ................ Passed 0.97 sec; Start 349: sapt-sf1; 386/411 Test #289: psimrcc-ccsd_t-3 ................. Passed 1.48 sec; Start 387: python-energy; 387/411 Test #404: json-schema-1-properties ......... Passed 1.01 sec; Start 309: pywrap-molecule; 388/411 Test #400: json-schema-1-ghost .............. Passed 1.03 sec; Start 293: psimrcc-pt2; 389/411 Test #353: tu1-h2o-energy ................... Passed 1.09 sec; Start 396: python-memdfjk; 390/411 Test #330: scf-bs ........................... Passed 0.85 sec; Start 354: tu2-ch2-energy; 391/411 Test #349: sapt-sf1 ......................... Passed 0.93 sec; Start 175: docs-dft; 392/411 Test #387: python-energy .................... Passed 0.82 sec; Start 382: psi4numpy-rhf; 393/411 Test #378: mints12 .......................... Passed 1.15 sec; Start 334: scf3; 394/411 Test #293: psimrcc-pt2 ...................... Passed 0.97 sec; Start 216: mints5; 395/411 Test #309: pywrap-molecule .................. Passed 1.09 sec; Start 208: matrix1; 396/411 Test #396: python-memdfjk ................... Passed 0.89 sec; Start 308: pywrap-db3; 397/411 Test #175: docs-dft ......................... Passed 0.57 sec; Start 364: options1; 398/411 Test #354: tu2-ch2-energy ................... Passed 0.81 sec; Start 215: mints4; 399/411 Test #382: psi4numpy-rhf .................... Passed 0.81 sec; Start 409: skeletonscf; 400/411 Test #208: matrix1 .......................... Passed 0.53 sec; Start 212: mints1; 401/411 Test #334: scf3 ............................. Passed 0.70 sec; Start 174: docs-bases; 402/411 Test #216: mints5 ........................... Passed 0.57 sec; Start 402: ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-405575064:36735,energy,energy,36735,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-405575064,1,['energy'],['energy']
Energy Efficiency,assed 1.49 sec; Start 288: psimrcc-ccsd_t-1; 362/412 Test #334: scf2 ............................. Passed 1.76 sec; Start 223: mints10; 363/412 Test #189: fci-tdm .......................... Passed 1.78 sec; Start 391: python-mints9; 364/412 Test #161: dft-grac ......................... Passed 1.88 sec; Start 222: mints9; 365/412 Test #362: x2c2 ............................. Passed 2.13 sec; Start 396: python-mints13; 366/412 Test #357: scf-response1 .................... Passed 2.24 sec; Start 411: skeletonsointegrals; 367/412 Test #211: mcscf2 ........................... Passed 1.93 sec; Start 354: tu1-h2o-energy; 368/412 Test #353: stability2 ....................... Passed 1.90 sec; Start 103: decontract; 369/412 Test #331: scf-bs ........................... Passed 1.66 sec; Start 221: mints-helper; 370/412 Test #299: pubchem2 ......................... Passed 1.60 sec; Start 215: mints3; 371/412 Test #363: x2c3 ............................. Passed 2.61 sec; Start 355: tu2-ch2-energy; 372/412 Test #382: psi4numpy-dfmp2 .................. Passed 2.24 sec; Start 384: psi4numpy-rhf-gradient; 373/412 Test #404: json-schema-1-gradient ........... Passed 1.74 sec; Start 405: json-schema-1-properties; 374/412 Test #223: mints10 .......................... Passed 1.62 sec; Start 381: psi4numpy-cphf; 375/412 Test #288: psimrcc-ccsd_t-1 ................. Passed 1.97 sec; Start 401: json-schema-1-ghost; 376/412 Test #411: skeletonsointegrals .............. Passed 1.40 sec; Start 399: json-v11-gradient; 377/412 Test #215: mints3 ........................... Passed 1.22 sec; Start 379: mints12; 378/412 Test #103: decontract ....................... Passed 1.68 sec; Start 397: python-memdfjk; 379/412 Test #384: psi4numpy-rhf-gradient ........... Passed 1.31 sec; Start 388: python-energy; 380/412 Test #355: tu2-ch2-energy ................... Passed 1.33 sec; Start 310: pywrap-molecule; 381/412 Test #354: tu1-h2o-energy ................... Passed 1.74 sec; Start 335: scf3; 382/412 Test,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1220#issuecomment-419126068:34946,energy,energy,34946,https://psicode.org,https://github.com/psi4/psi4/pull/1220#issuecomment-419126068,1,['energy'],['energy']
Energy Efficiency,assed 1366.40 sec; Start 380: cc-module; 18/412 Test #104: dcft-grad1 ....................... Passed 1482.58 sec; Start 18: cbs-xtpl-func; 19/412 Test #30: cc14 ............................. Passed 530.98 sec; Start 182: fsapt-allterms; 20/412 Test #42: cc26 ............................. Passed 719.24 sec; Start 194: fd-freq-energy-large; 21/412 Test #25: cc13 ............................. Passed 644.30 sec; Start 196: fd-freq-gradient-large; 22/412 Test #115: dcft8 ............................ Passed 792.13 sec; Start 279: opt13; 23/412 Test #45: cc29 ............................. Passed 353.43 sec; Start 374: dft-custom-mgga; 24/412 Test #36: cc2 .............................. Passed 842.78 sec; Start 32: cc16; 25/412 Test #183: isapt1 ........................... Passed 425.05 sec; Start 282: opt-irc-2; 26/412 Test #112: dcft5 ............................ Passed 486.74 sec; Start 113: dcft6; 27/412 Test #13: cbs-xtpl-alpha ................... Passed 538.76 sec; Start 11: cbs-delta-energy; 28/412 Test #111: dcft4 ............................ Passed 1785.19 sec; Start 71: cc52; 29/412 Test #380: cc-module ........................ Passed 446.77 sec; Start 321: sapt6; 30/412 Test #29: cc13d ............................ Passed 499.20 sec; Start 159: dfscf-bz2; 31/412 Test #387: cookbook-rohf-orb-rot ............ Passed 499.71 sec; Start 98: cisd-opt-fd; 32/412 Test #360: tu6-cp-ne2 ....................... Passed 503.92 sec; Start 348: sapt-dft2; 33/412 Test #282: opt-irc-2 ........................ Passed 181.33 sec; Start 48: cc31; 34/412 Test #32: cc16 ............................. Passed 186.69 sec; Start 184: isapt2; 35/412 Test #374: dft-custom-mgga .................. Passed 196.14 sec; Start 59: cc41; 36/412 Test #113: dcft6 ............................ Passed 189.44 sec; Start 169: dft1; 37/412 Test #11: cbs-delta-energy ................. Passed 156.32 sec; Start 155: dft-grad-lr2; 38/412 Test #71: cc52 ............................. Passed 137.50 sec; Start 61: cc,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1227#issuecomment-421362141:2992,energy,energy,2992,https://psicode.org,https://github.com/psi4/psi4/pull/1227#issuecomment-421362141,1,['energy'],['energy']
Energy Efficiency,assed 2.19 sec; Start 349: sapt-sf1; 363/411 Test #395: python-mints13 ................... Passed 1.96 sec; Start 96: cisd-h2o-clpse; 364/411 Test #408: skeletonmointegrals .............. Passed 1.03 sec; Start 233: mp3-grad1; 365/411 Test #157: dft-grac ......................... Passed 1.50 sec; Start 400: json-schema-1-ghost; 366/411 Test #229: mp2-grad2 ........................ Passed 1.50 sec; Start 333: scf2; 367/411 Test #349: sapt-sf1 ......................... Passed 1.13 sec; Start 353: tu1-h2o-energy; 368/411 Test #289: psimrcc-ccsd_t-3 ................. Passed 1.53 sec; Start 411: skeletonwavefunction; 369/411 Test #228: mp2-grad1 ........................ Passed 1.56 sec; Start 231: mp2p5-grad1; 370/411 Test #96: cisd-h2o-clpse ................... Passed 1.22 sec; Start 298: pubchem2; 371/411 Test #400: json-schema-1-ghost .............. Passed 1.05 sec; Start 102: decontract; 372/411 Test #233: mp3-grad1 ........................ Passed 1.31 sec; Start 410: skeletonsointegrals; 373/411 Test #353: tu1-h2o-energy ................... Passed 1.09 sec; Start 398: json-v11-gradient; 374/411 Test #411: skeletonwavefunction ............. Passed 0.99 sec; Start 210: mcscf2; 375/411 Test #333: scf2 ............................. Passed 1.33 sec; Start 330: scf-bs; 376/411 Test #231: mp2p5-grad1 ...................... Passed 1.46 sec; Start 354: tu2-ch2-energy; 377/411 Test #102: decontract ....................... Passed 1.11 sec; Start 406: skeletonaointegrals; 378/411 Test #410: skeletonsointegrals .............. Passed 1.06 sec; Start 222: mints10; 379/411 Test #330: scf-bs ........................... Passed 0.94 sec; Start 188: fci-tdm; 380/411 Test #398: json-v11-gradient ................ Passed 1.11 sec; Start 383: psi4numpy-rhf-gradient; 381/411 Test #298: pubchem2 ......................... Passed 1.60 sec; Start 387: python-energy; 382/411 Test #210: mcscf2 ........................... Passed 1.34 sec; Start 220: mints-helper; 383/411 Test #354: tu2-ch2-energy .,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1077#issuecomment-409911901:34882,energy,energy,34882,https://psicode.org,https://github.com/psi4/psi4/pull/1077#issuecomment-409911901,1,['energy'],['energy']
Energy Efficiency,assed 7.95 sec; Start 15: cbs-xtpl-freq; 247/401 Test #346: dft-reference .................... Passed 3.44 sec; Start 390: python-3-index-transforms; 248/401 Test #196: fnocc2 ........................... Passed 68.39 sec; Start 280: props1; 249/401 Test #85: cepa0-grad2 ...................... Passed 6.79 sec; Start 93: cisd-h2o+-1; 250/401 Test #258: omp3-grad1 ....................... Passed 6.75 sec; Start 287: psimrcc-fd-freq1; 251/401 Test #108: dcft3 ............................ Passed 26.99 sec; Start 126: dfccsdt1; 252/401 Test #311: sapt1 ............................ Passed 9.29 sec; Start 94: cisd-h2o+-2; 253/401 Test #93: cisd-h2o+-1 ...................... Passed 3.01 sec; Start 98: cisd-sp-2; 254/401 Test #121: dfccd-grad1 ...................... Passed 13.83 sec; Start 286: psimrcc-ccsd_t-4; 255/401 Test #302: pywrap-checkrun-uhf .............. Passed 947.45 sec; Start 307: rasci-h2o; 256/401 Test #280: props1 ........................... Passed 4.24 sec; Start 221: mom; 257/401 Test #14: cbs-xtpl-energy .................. Passed 9.40 sec; Start 228: mp2p5-grad2; 258/401 Test #140: dfomp2-3 ......................... Passed 6.80 sec; Start 291: psithon1; 259/401 Test #94: cisd-h2o+-2 ...................... Passed 2.70 sec; Start 129: dfmp2-2; 260/401 Test #390: python-3-index-transforms ........ Passed 6.25 sec; Start 267: opt5; 261/401 Test #98: cisd-sp-2 ........................ Passed 2.77 sec; Start 5: casscf-sa-sp; 262/401 Test #309: rasscf-sp ........................ Passed 37.02 sec; Start 176: fsapt-terms; 263/401 Test #48: cc32 ............................. Passed 24.10 sec; Start 225: mp2-grad2; 264/401 Test #362: scf-hess1 ........................ Passed 8.87 sec; Start 224: mp2-grad1; 265/401 Test #307: rasci-h2o ........................ Passed 2.28 sec; Start 84: cepa0-grad1; 266/401 Test #7: casscf-sp ........................ Passed 23.83 sec; Start 194: freq-isotope2; 267/401 Test #251: omp2p5-grad1 ..................... Passed 7.23 sec; Start ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1071#issuecomment-402453832:24432,energy,energy,24432,https://psicode.org,https://github.com/psi4/psi4/pull/1071#issuecomment-402453832,1,['energy'],['energy']
Energy Efficiency,"asses may also trigger the warning. c: [1.0, 0]; fc: [0.0]; m: [2]; fm: [3]; Following warning is harmless if you've altered chgmult through `set_molecular_change` or `set_multiplicity`. Such alterations are an expert feature. Specifying in the original molecule string is preferred. Nonphysical masses may also trigger the warning. c: [1.0, 0]; fc: [0.0]; m: [2]; fm: [3]; Following warning is harmless if you've altered chgmult through `set_molecular_change` or `set_multiplicity`. Such alterations are an expert feature. Specifying in the original molecule string is preferred. Nonphysical masses may also trigger the warning.; ...; ```. ```; c: [1.0, 0]; fc: [0.0]; m: [2]; fm: [3]; ```; steems from https://github.com/psi4/psi4/blob/master/psi4/driver/qcdb/molecule.py#L1646. and can be silenced by setting `verbose=-1`,; the other is 4 lines below:. https://github.com/psi4/psi4/blob/master/psi4/driver/qcdb/molecule.py#L1650. This PR, adds `quiet` param to `to_dict` in Molecule and `energy` in Driver, and uses that in `ip_fitting` not to post both of them out. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] removed noise from stdout while running `ip_tunning`. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] silences plain `print` from `Molecule.to_dict()` - `qcel.molparse.from_arrays` and warning around setting charge/multiplicity when running `ip_fitting`. This shouldn't change other code paths. ## Questions; - [ ] Do psi have any tests that test stdout with pytest?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## St",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3229:2028,energy,energy,2028,https://psicode.org,https://github.com/psi4/psi4/pull/3229,1,['energy'],['energy']
Energy Efficiency,"at 3:13 AM Holger Kruse <notifications@github.com>; wrote:. > The following input, given to me via email, gives a 'bad' dMP2 correction; > for SAPT:; >; > delta HF,r (2) -18.53850185 [mEh] -11.63308554 [kcal/mol] -48.67282991 [kJ/mol]; > delta MP2,r (2) 141.03839795 [mEh] 88.50293088 [kcal/mol] 370.29626281 [kJ/mol]; >; > molecule {; > 0 1; > F 0.00000000 0.00000000 2.96216000; > I 0.00000000 0.00000000 0.96704400; > --; > 0 1; > C 0.00000000 0.00000000 -2.52999200; > N 0.00000000 0.00000000 -1.35165800; > Na 0.00000000 0.00000000 -4.84283500; > units angstrom; > no_reorient; > symmetry c1; > }; > memory 20 GiB; > set {; > basis def2-TZVP; > freeze_core true; > }; > energy('sapt2+dMP2'); > energy('mp2',bsse_type=['nocp']); >; > The issue is reproducible for MP2/CCSD post-SCF methods. It is not; > directly DF nor ghost atom related. (besides a possibly small error due; > to #1968 <https://github.com/psi4/psi4/issues/1968>). And not a module; > specific issue.; >; > Using different ECPs (LANL2DZ) or an all electron basis (x2c-SVPall, no; > rel. effects.) with global FC=on seems to give 'better' results in the; > sense that MP2 interaction energy is negative.; >; > One, and perhaps only, issue is frozen_core.; > Turning FC = off only for the supermolecular MP2 part gives OK results.; > For the NaCN fragment we are freezing 10 electrons, while e.g. ORCA is; > freezing only 3.; > At least for this case, freezing the Ne-shell by default for Na is not a; > good choice.; >; > Tagging @PeterKraus <https://github.com/PeterKraus>.; >; > freeze_core -2 makes the SAPT part crash because sth goes wrong for the IF; > fragment (fragment A):; >; > FOCC A = 18446744073709551611; > FOCC B = 1; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/2012>, or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AAXVA5VFTGKRYGV72IUHFIDSIV4SRANCNFSM4SBLH6ZA>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2012#issuecomment-702811354:2049,energy,energy,2049,https://psicode.org,https://github.com/psi4/psi4/issues/2012#issuecomment-702811354,1,['energy'],['energy']
Energy Efficiency,"at 6:14 PM, Lori A. Burns <notifications@github.com>; wrote:. > Posting Dom's very nice summary for easier perusal and searchability.; > Effective scf_type df Testing: mem_df & disk_df; >; > All tests listed below examine calls to both energy() and gradient() when; > employing the scf_type mem_df and scf_type disk_df settings. Each test; > employs a different model chemistry (indicated in the test description); > and the; > Physicists' water molecule, unless otherwise indicated.; >; > 1. Physicists' water, HF/6-31G; > - *TEST FAILED*; > - Error message:; >; > Traceback (most recent call last):; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; > exec(content); > File ""<string>"", line 30, in <module>; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 444, in energy; > return driver_cbs._cbs_gufunc(energy, name, ptype='energy', **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver_cbs.py"", line 1818, in _cbs_gufunc; > ptype_value, wfn = func(method_name, return_wfn=True, molecule=molecule, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; > wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 2038, in run_scf; > scf_wfn = scf_helper(name, post_scf=False, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1363, in scf_helper; > e_scf = scf_wfn.compute_energy(); >; > RuntimeError:; > Fatal Error: DFHelper (MemDFJK): cannot do cartesian auxiliary functions; > Error occurred in file: /Users/dasirianni/Gits/psi4/psi4/src/psi4/libfock/MemDFJK.cc on line: 89; > The most recent 5 fun",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1021#issuecomment-389018128:1333,energy,energy,1333,https://psicode.org,https://github.com/psi4/psi4/issues/1021#issuecomment-389018128,2,['energy'],['energy']
Energy Efficiency,"at(fl); text += dftd3rec[field]. # parse energy output (could go further and break into E6, E8, E10 and Cn coeff); real = np.array(jobrec['molecule']['real']); full_nat = real.shape[0]; real_nat = np.sum(real). for ln in dftd3rec['stdout'].splitlines():; if re.search('DFTD3 V', ln):; version = ln.replace('DFTD3', '').replace('|', '').strip().lower(); elif re.match(' Edisp /kcal,au', ln):; ene = Decimal(ln.split()[3]); elif re.match(' normal termination of dftd3', ln):; break; else:; if not ((real_nat == 1) and (jobrec['driver'] == 'gradient')):; > raise Dftd3Error('Unsuccessful run. Possibly -D variant not available in dftd3 version.'); E psi4.driver.qcdb.exceptions.Dftd3Error: Unsuccessful run. Possibly -D variant not available in dftd3 version. ../lib/python3.6/site-packages/psi4/driver/qcdb/intf_dftd3/runner.py:301: Dftd3Error. The above exception was the direct cause of the following exception:. @pytest.mark.smoke; @using_dftd3; def test_dftd3():; """"""dftd3/energy""""""; #! Exercises the various DFT-D corrections, both through python directly and through c++. ref_d2 = [-0.00390110, -0.00165271, -0.00058118]; ref_d3zero = [-0.00285088, -0.00084340, -0.00031923]; ref_d3bj = [-0.00784595, -0.00394347, -0.00226683]. ref_pbe_d2 = [-0.00278650, -0.00118051, -0.00041513]; ref_pbe_d3zero = [-0.00175474, -0.00045421, -0.00016839]; ref_pbe_d3bj = [-0.00475937, -0.00235265, -0.00131239]. eneyne = psi4.geometry(""""""; C 0.000000 -0.667578 -2.124659; C 0.000000 0.667578 -2.124659; H 0.923621 -1.232253 -2.126185; H -0.923621 -1.232253 -2.126185; H -0.923621 1.232253 -2.126185; H 0.923621 1.232253 -2.126185; --; C 0.000000 0.000000 2.900503; C 0.000000 0.000000 1.693240; H 0.000000 0.000000 0.627352; H 0.000000 0.000000 3.963929; """"""). print(' -D correction from Py-side'); eneyne.update_geometry(); > E, G = eneyne.run_dftd3('b3lyp', 'd2'). ../lib/python3.6/site-packages/psi4/tests/test_addons.py:202:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:8195,energy,energy,8195,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846,1,['energy'],['energy']
Energy Efficiency,"ate I kept getting an error. Then I wrote a script that could check the available methods and options for the excited states, I got a return message showing the available options but no available methods was shown. Here's the script I ran to obtain the ground state PEC:. import numpy as np; import psi4; import matplotlib.pyplot as plt. # Set Psi4 memory; psi4.set_memory('2 GB'). def compute_energy(bond_length):; molecule = psi4.geometry(f""""""; 0 2; C 0.000000000 0.000000000 0.000000000; F 0.000000000 0.000000000 {bond_length:.6f}; """"""). psi4.set_options({; 'basis': 'cc-pVTZ',; 'reference': 'uhf', # Use UHF for open-shell systems; 'scf_type': 'pk',; 'maxiter': 100,; 'e_convergence': 1e-8,; 'd_convergence': 1e-8; }). # Compute SCF energy; energy = psi4.energy('scf'); return energy. def generate_potential_energy_curve():; bond_lengths = np.arange(0.7, 5.02, 0.02); energies = []. for bond_length in bond_lengths:; try:; energy = compute_energy(bond_length); energies.append(energy); print(f""Bond length: {bond_length:.2f}, Energy: {energy:.8f}""); except Exception as e:; print(f""Error at bond length {bond_length}: {e}""); energies.append(float('nan')). return bond_lengths, energies. # Generate potential energy curve; bond_lengths, energies = generate_potential_energy_curve(). # Save bond lengths and energies to a text file; data_file = 'CF_PEC_0_data.csv'; with open(data_file, 'w') as file:; file.write(""Bond Length (Angstrom) Energy (Hartree)\n""); for length, energy in zip(bond_lengths, energies):; file.write(f""{length:.6f} {energy:.8f}\n""). print(f""Potential energy data saved to {data_file}""). # Plot the potential energy curve; plt.figure(figsize=(8, 6)); plt.plot(bond_lengths, energies, marker='o', linestyle='-', color='b', label='SCF Energy Curve'); plt.xlabel('Bond Length (Angstrom)'); plt.ylabel('Energy (Hartree)'); plt.title('Potential Energy Curve for CF Molecule'); plt.grid(True); plt.legend(); plt.tight_layout(). # Save the plot as an image file; plot_file = 'CF_PEC_P",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181#issuecomment-2192730845:1147,energy,energy,1147,https://psicode.org,https://github.com/psi4/psi4/issues/3181#issuecomment-2192730845,1,['energy'],['energy']
Energy Efficiency,"ate: 0.4538994 (a.u.), 12.3512305 (eV); 	4 A state: 0.5246003 (a.u.), 14.2751021 (eV); 	5 A state: 0.5709848 (a.u.), 15.5372886 (eV); 	6 A state: 0.7050389 (a.u.), 19.1850862 (eV); 	7 A state: 1.0543763 (a.u.), 28.6910395 (eV); 	8 A state: 1.0720010 (a.u.), 29.1706341 (eV); 	9 A state: 1.1388267 (a.u.), 30.9890538 (eV); 	10 A state: 1.1821020 (a.u.), 32.1666340 (eV); 	11 A state: 1.1875445 (a.u.), 32.3147310 (eV); 	12 A state: 1.1982557 (a.u.), 32.6061991 (eV); 	13 A state: 1.1992474 (a.u.), 32.6331833 (eV); 	14 A state: 1.2585194 (a.u.), 34.2460572 (eV); 	15 A state: 1.2767037 (a.u.), 34.7408785 (eV); 	16 A state: 1.2815731 (a.u.), 34.8733809 (eV); 	17 A state: 1.3132971 (a.u.), 35.7366340 (eV); 	18 A state: 1.3296420 (a.u.), 36.1814011 (eV); 	19 A state: 1.3540510 (a.u.), 36.8456048 (eV); 	20 A state: 1.3585131 (a.u.), 36.9670246 (eV); ```. ### **QChem 5.1.1 energies output**; ```; Excitation energy: 9.604199 eV; Excitation energy: 11.471817 eV; Excitation energy: 12.351230 eV; Excitation energy: 14.275101 eV; Excitation energy: 15.537288 eV; Excitation energy: 19.185085 eV; Excitation energy: 28.691037 eV; Excitation energy: 29.170632 eV; Excitation energy: 30.989051 eV; Excitation energy: 32.166632 eV; Excitation energy: 32.314728 eV; Excitation energy: 32.606197 eV; Excitation energy: 32.633181 eV; Excitation energy: 34.246055 eV; Excitation energy: 34.740876 eV; Excitation energy: 34.873378 eV; Excitation energy: 35.736631 eV; Excitation energy: 36.181398 eV; Excitation energy: 36.845602 eV; Excitation energy: 36.967022 eV; ```. Running the ADC(2) test in both programs showed some slight deviation in energies, but nothing alarming.; ### **QChem 5.1.1 - adc(2) test energies**; ```; Excitation energy: 6.951866 eV; Excitation energy: 6.951866 eV; ```. ### **Psi4 1.3.2 -- adc(2) test energies**; ```; ->	1 A state : 0.2557608 (a.u.), 6.9596066 (eV); Non-iterative: 0.2559128 (a.u.), 6.9637417 (eV); ->	2 A state : 0.2557608 (a.u.), 6.9596066 (eV); Non-iterative: 0.255",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1033#issuecomment-510952344:1635,energy,energy,1635,https://psicode.org,https://github.com/psi4/psi4/issues/1033#issuecomment-510952344,1,['energy'],['energy']
Energy Efficiency,"ate: 1.1821020 (a.u.), 32.1666340 (eV); 	11 A state: 1.1875445 (a.u.), 32.3147310 (eV); 	12 A state: 1.1982557 (a.u.), 32.6061991 (eV); 	13 A state: 1.1992474 (a.u.), 32.6331833 (eV); 	14 A state: 1.2585194 (a.u.), 34.2460572 (eV); 	15 A state: 1.2767037 (a.u.), 34.7408785 (eV); 	16 A state: 1.2815731 (a.u.), 34.8733809 (eV); 	17 A state: 1.3132971 (a.u.), 35.7366340 (eV); 	18 A state: 1.3296420 (a.u.), 36.1814011 (eV); 	19 A state: 1.3540510 (a.u.), 36.8456048 (eV); 	20 A state: 1.3585131 (a.u.), 36.9670246 (eV); ```. ### **QChem 5.1.1 energies output**; ```; Excitation energy: 9.604199 eV; Excitation energy: 11.471817 eV; Excitation energy: 12.351230 eV; Excitation energy: 14.275101 eV; Excitation energy: 15.537288 eV; Excitation energy: 19.185085 eV; Excitation energy: 28.691037 eV; Excitation energy: 29.170632 eV; Excitation energy: 30.989051 eV; Excitation energy: 32.166632 eV; Excitation energy: 32.314728 eV; Excitation energy: 32.606197 eV; Excitation energy: 32.633181 eV; Excitation energy: 34.246055 eV; Excitation energy: 34.740876 eV; Excitation energy: 34.873378 eV; Excitation energy: 35.736631 eV; Excitation energy: 36.181398 eV; Excitation energy: 36.845602 eV; Excitation energy: 36.967022 eV; ```. Running the ADC(2) test in both programs showed some slight deviation in energies, but nothing alarming.; ### **QChem 5.1.1 - adc(2) test energies**; ```; Excitation energy: 6.951866 eV; Excitation energy: 6.951866 eV; ```. ### **Psi4 1.3.2 -- adc(2) test energies**; ```; ->	1 A state : 0.2557608 (a.u.), 6.9596066 (eV); Non-iterative: 0.2559128 (a.u.), 6.9637417 (eV); ->	2 A state : 0.2557608 (a.u.), 6.9596066 (eV); Non-iterative: 0.2559128 (a.u.), 6.9637417 (eV); ```. Further, we set up calculations for the systems in [this work](https://aip.scitation.org/doi/10.1063/1.1504708). Please find the calculations for HF and N2 below; I am happy to provide data on the other systems if needed.; Basis set & geometry information for HF and N2 were found in [this work](",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1033#issuecomment-510952344:1965,energy,energy,1965,https://psicode.org,https://github.com/psi4/psi4/issues/1033#issuecomment-510952344,1,['energy'],['energy']
Energy Efficiency,"ation choice that I haven't identified. Anyway, that's why those are separate entries (away from qcng) in `standard_suite_ref_local.py`; * In filling out the capabilities tables for Hessians, I tried to collect CD Hessians for HF and SVWN by FD of energies. They failed the per-element CD result ~= CONV result check. Not surprising since CD thresh is set at 1e-4. I didn't do anything about the failure (ref values deleted and tests are not active), so this is just to bring up that CD threshold is untuned for dertype or E_/D_/R_CONVERGENCE.; * refuted first two thirds of a prominent footnote: `DFT gradients only implemented for SCF type DF. LRC-DFT gradients not implemented yet. DH-DFT gradients not implemented.`; - [x] upgraded stdsuite runner to catch up with qcdb and qcengine last year by (1) implementing per-dertype and abs/rel comparison checks (nothing is actually loosened) and (2) dropping a dict summary of each test to a record file.; - [x] arranged for available `td-{dft}` calls to show up in the energy table, https://psicode.org/psi4manual/master/energy.html; - [x] fixed `energy(""psimrcc_scf"")` to use regular SCF as ref for PSIMRCC and added a test; - [x] rehabilitated `energy(""qchf"")` (which never had its initialism expanded in the whole of the codebase, btw) so it runs. added a test. it probably ought to be better integrated with regular SCF module. Regular SCF has a qchf option that is unused.; - [x] adjusted some qcvars in FNOCC to collect more components from cepa-like methods and to collect different perturbative triples for qcisd.; - [x] collected qcvars correctly in DFOCC for CCD and QCHF. (It was harvesting the CCD method that tipped me into the rabbit-hole that became this PR.). - [x] TODO `pytest -m quick` is still friendly to run (CI finished in reasonable time), but the additions to stdsuite have make ordinary full pytests expensive. I need to manipulate default marks so folks don't inadvertently start hours of tests. `pytest -v ../tests/pytests/",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2731:11630,energy,energy,11630,https://psicode.org,https://github.com/psi4/psi4/pull/2731,1,['energy'],['energy']
Energy Efficiency,"ation is applied in the `HF::form_H()` routine every time, which results in inaccurate EMBPOT matrices being added to the core Hamiltonian. In order to correct this in the current version of Psi4, I have removed the AO to SO transformation and call `BasisSet::compute_phi()` on an appropriately sized vector. I have also added numerical gradients over the EMBPOT potential using the gau2grid library. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] The user may supply an arbitrary potential evaluated on a numerical quadrature grid to an SCF calculation by saving the x, y, z, w, and v values to a human-readable `EMBPOT` file. The first line of the `EMBPOT` file must have the number of points inside of the file. The user must also include `set perturb_h true` and `set perturb_with embpot` in the Psi4 input. The potential will then be evaluated and included in the core Hamiltonian construction, and energy and gradient calculations. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Fixed the EMBPOT functionality in `HF::form_H()` by removing AO to SO transformation and supplying an appropriately sized vector to the `BasisSet::compute_phi()` call.; - [x] Added function `MintsHelper::embpot_grad()` to calculate the component of the gradient from the EMBPOT perturbation. ## Checklist; - [x] Added test `embpot1` to compare energies and gradients computed by including embedded point charges analytically, through the `external_potentials` keyword, and numerically, through the EMBPOT functionality.; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; -",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3239:1905,energy,energy,1905,https://psicode.org,https://github.com/psi4/psi4/pull/3239,1,['energy'],['energy']
Energy Efficiency,"ations:; HONO-0 : 1 A 2.0000000; LUNO+0 : 2 A 0.0000000; LUNO+1 : 3 A 0.0000000; LUNO+2 : 4 A 0.0000000; LUNO+3 : 5 A 0.0000000. Computation Completed. Properties will be evaluated at 0.000000, 0.000000, 0.000000 [a0]. Properties computed using the SCF density matrix. Nuclear Dipole Moment: [e a0]; X: 0.0000 Y: 0.0000 Z: -5.6000. Electronic Dipole Moment: [e a0]; X: -0.0000 Y: -0.0000 Z: 5.5998. Dipole Moment: [e a0]; X: -0.0000 Y: -0.0000 Z: -0.0002 Total: 0.0002. Dipole Moment: [D]; X: -0.0000 Y: -0.0000 Z: -0.0005 Total: 0.0005. /home/filip/software/intel-parallel/intelpython3/lib/python3.6/site-packages/numpy/lib/npyio.py:538: FutureWarning: Object arrays will not be saved by default in the future because `allow_pickle` will default to False. You should add `allow_pickle=True` explicitly to elminate this warning.; pickle_kwargs=pickle_kwargs); Traceback (most recent call last):; File ""minimal.py"", line 34, in <module>; scf_e_A, wfnA = psi4.energy(""SCF"", return_wfn=True, molecule=monomerA); File ""/home/filip/software/psi4-1.4rc-opt/lib/psi4/driver/driver.py"", line 561, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/filip/software/psi4-1.4rc-opt/lib/psi4/driver/procrouting/proc.py"", line 2058, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/home/filip/software/psi4-1.4rc-opt/lib/psi4/driver/procrouting/proc.py"", line 1423, in scf_helper; scf_wfn.to_file(write_filename); File ""/home/filip/software/psi4-1.4rc-opt/lib/psi4/driver/p4util/python_helpers.py"", line 303, in _core_wavefunction_to_file; np.save(filename, wfn_data); File ""/home/filip/software/intel-parallel/intelpython3/lib/python3.6/site-packages/numpy/lib/npyio.py"", line 538, in save; pickle_kwargs=pickle_kwargs); File ""/home/filip/software/intel-parallel/intelpython3/lib/python3.6/site-packages/numpy/lib/format.py"", line 637, in write_array; raise ValueError(""Object arrays cannot be saved when ""; ValueError: Object arrays canno",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1706#issuecomment-524633282:10497,energy,energy,10497,https://psicode.org,https://github.com/psi4/psi4/pull/1706#issuecomment-524633282,1,['energy'],['energy']
Energy Efficiency,"atomic UHF. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-RKS iter 0: -76.25426884215133 -7.62543e+01 8.25166e-02 ; @DF-RKS iter 1: -76.28225054480332 -2.79817e-02 2.00561e-02 ; @DF-RKS iter 2: -76.24994640870842 3.23041e-02 2.57661e-02 DIIS; @DF-RKS iter 3: -76.33537346510494 -8.54271e-02 5.64978e-04 DIIS; @DF-RKS iter 4: -76.33541666733151 -4.32022e-05 7.02182e-05 DIIS; @DF-RKS iter 5: -76.33541734518556 -6.77854e-07 7.73497e-06 DIIS; @DF-RKS iter 6: -76.33541735566205 -1.04765e-08 1.19390e-06 DIIS; @DF-RKS iter 7: -76.33541735595242 -2.90370e-10 2.40194e-07 DIIS. ==> Post-Iterations <==. Orbital Energies (a.u.); -----------------------. Doubly Occupied: . 1A -19.184718 2A -1.000452 3A -0.509499 ; 4A -0.360493 5A -0.281933 . Virtual: . 6A 0.113651 7A 0.212439 8A 0.827371 ; 9A 0.915633 10A 0.937398 11A 0.938267 ; 12A 1.123156 13A 1.234184 14A 1.763048 ; 15A 1.774444 16A 1.811716 17A 2.329295 ; 18A 2.632599 19A 3.611500 . Final Occupation by Irrep:; A ; DOCC [ 5 ]. Energy converged. @DF-RKS Final Energy: -76.33541735595242. => Energetics <=. Nuclear Repulsion Energy = 8.9272515369995578; One-Electron Energy = -122.8414514085261118; Two-Electron Energy = 44.6070248999700425; DFT Exchange-Correlation Energy = -7.0282423843959076; Empirical Dispersion Energy = 0.0000000000000000; PCM Polarization Energy = 0.0000000000000000; EFP Energy = 0.0000000000000000; Total Energy = -76.3354173559524156. Alert: EFP and PCM quantities not currently incorporated into SCF psivars. Properties will be evaluated at 0.000000, 0.000000, 0.000000 Bohr; ==> Properties <==. Properties computed using the SCF density matrix. Nuclear Dipole Moment: (a.u.); X: 14.2834 Y: 0.0000 Z: -23.5602. Electronic Dipole Moment: (a.u.); X: -15.1523 Y: -0.0000 Z: 23.6231. Dipole Moment: (a.u.); X: -0.8689 Y: -0.0000 Z: 0.0628 Total: 0.8712. Dipole Moment: (Debye); X: -2.2085 Y: -0.0000 Z: 0.1597 Total: 2.2143. Saving occupied orbitals to File 180. *** tstop() called on machtiani1 at Wed Feb 10 19",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/240#issuecomment-182660528:7890,Energy,Energy,7890,https://psicode.org,https://github.com/psi4/psi4/issues/240#issuecomment-182660528,1,['Energy'],['Energy']
Energy Efficiency,"atural orbitals out; of that, and then do a CAS with those starting orbitals. As Daniel says, we may not have a great mechanism right now to do this with; MP2 NO's (we'll have to work on that). But, if it's a small molecule,; running a CISD initially and getting NO's from that should work. Although,; again, you'd need to be sure to change the keywords ... something like this:. set restricted_uocc [0]; ci_e, ci_wfn = energy('cisd', return_wfn=True). set restricted_uocc [16]; energy('casscf', ref_wfn=ci_wfn). Regarding the original question, though, do you get the same energy out of; the 2nd CASSCF (within convergence criteria)?. On Fri, Jan 27, 2017 at 3:51 AM, Susi Lehtola <notifications@github.com>; wrote:. > I'm a bit puzzled by CAS. The following input; >; > molecule {; > 0 1; > symmetry c1; > C; > C 1 1.0; > }; >; > set basis cc-pVDZ; > set scf_type pk; > set restricted_docc [2]; > set restricted_uocc [16]; > set active [10]; > set wfn detci; > set NUM_DETS_PRINT 40000; > set e_convergence 1e-10; > set r_convergence 1e-10; > set ci_maxiter 1000; > set mcscf_maxiter 100; > set nat_orbs true; >; > cas_e, cas_wfn = energy('casscf', return_wfn=True); >; > energy('casscf', ref_wfn=cas_wfn); >; > should do what you suggest, but when I look at the determinants output; >; > * 1 0.817064 ( 1, 1) 3AX 4AX 5AX 7AX; > * 2 -0.477071 ( 2, 2) 3AX 4AX 6AX 7AX; > * 3 -0.081234 ( 15, 15) 3AX 4AX 5AX 9AX; > * 4 -0.079478 ( 10, 10) 3AX 5AX 7AX 8AX; > * 5 0.075356 ( 3, 9) 3AX 4AB 5AA 6AA 7AX 8AB; >; > the Aufbau determinant has a tiny weight: -5.602591646315e-03. If it's; > really using NOs, the Aufbau determinant should have significant weight,; > right?; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/556#issuecomment-275616670>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AC9QdrXQXwFMnyc3v9cHAYN_Mscy_dnmks5rWbAGgaJpZM4LdHsQ>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/556#issuecomment-275696618:1899,energy,energy,1899,https://psicode.org,https://github.com/psi4/psi4/issues/556#issuecomment-275696618,2,['energy'],['energy']
Energy Efficiency,"avg_states' : [ 0, 1],; >; > 'avg_weights' : [ 0.5, 0.5 ]; >; > }); >; >; >; > sacasscf, sacasscf_wfn = psi4.energy('casscf',return_wfn=True); >; > E0_sacasscf = psi4.variable('CI ROOT 0 TOTAL ENERGY'); >; > E1_sacasscf = psi4.variable('CI ROOT 1 TOTAL ENERGY'); >; >; > Then, I give you from the OUTPUT FILE the decomposition I obtain :; > ------------------------------; > ------------------------------; >; > ==> MCSCF root 0 information <==; >; >; >; > MCSCF Root 0 energy = -93.931448649953467; >; >; > Active Space Natural occupation numbers:; >; > A 2.000000 A 1.000000 A 1.000000; >; >; > The 9 most important determinants:; >; > * 1 0.691216 ( 0, 1) 7AX 8AA 9AB; >; > * 2 0.691216 ( 1, 0) 7AX 8AB 9AA; >; > * 3 -0.149064 ( 1, 2) 7AA 8AB 9AX; >; > * 4 -0.149064 ( 2, 1) 7AB 8AA 9AX; >; > * 5 0.000000 ( 0, 0) 7AX 8AX; >; > * 6 0.000000 ( 0, 2) 7AA 8AX 9AB; >; > * 7 0.000000 ( 2, 0) 7AB 8AX 9AA; >; > * 8 -0.000000 ( 2, 2) 8AX 9AX; >; > * 9 -0.000000 ( 1, 1) 7AX 9AX; >; >; > ==> MCSCF root 1 information <==; >; > MCSCF Root 1 energy = -93.902550337672878; >; >; > Active Space Natural occupation numbers:; >; > A 1.999537 A 1.843676 A 0.156787; >; >; > The 9 most important determinants:; >; > * 1 -0.887365 ( 0, 0) 7AX 8AX; >; > * 2 -0.291143 ( 0, 2) 7AA 8AX 9AB; >; > * 3 -0.291143 ( 2, 0) 7AB 8AX 9AA; >; > * 4 0.206936 ( 2, 2) 8AX 9AX; >; > * 5 0.015212 ( 1, 1) 7AX 9AX; >; > * 6 0.000000 ( 1, 0) 7AX 8AB 9AA; >; > * 7 0.000000 ( 0, 1) 7AX 8AA 9AB; >; > * 8 -0.000000 ( 1, 2) 7AA 8AB 9AX; >; > * 9 -0.000000 ( 2, 1) 7AB 8AA 9AX; >; >; > ------------------------------; > ------------------------------; >; > As you can see, there is typically the same kind of sign for some; > determinants sharing a similar coefficient. For example, for the; > groundstate we have : -0.691216 ( 0, 1) 7AX 8AA 9AB and -0.691216 ( 1, 0); > 7AX 8AB 9AA. However, in the context of a singlet spin symmetry, these; > determinants should present opposite signs. To check this, I used a; > personal code to bui",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2008#issuecomment-693738345:2805,energy,energy,2805,https://psicode.org,https://github.com/psi4/psi4/issues/2008#issuecomment-693738345,1,['energy'],['energy']
Energy Efficiency,b-rot; 372/411 Test #384: psi4numpy-rhf-hessian ............ Passed 3.48 sec; Start 387: python-energy; 373/411 Test #387: python-energy .................... Passed 1.23 sec; Start 388: python-curve; 374/411 Test #385: psi4numpy-fci .................... Passed 5.25 sec; Start 389: python-pubchem; 375/411 Test #388: python-curve ..................... Passed 2.96 sec; Start 390: python-mints9; 376/411 Test #390: python-mints9 .................... Passed 1.96 sec; Start 391: python-mints2; 377/411 Test #391: python-mints2 .................... Passed 2.41 sec; Start 392: python-cc54; 378/411 Test #320: sapt6 ............................ Passed 164.21 sec; Start 393: python-3-index-transforms; 379/411 Test #162: dft-grad-lr3 ..................... Passed 463.80 sec; Start 395: python-mints13; 380/411 Test #395: python-mints13 ................... Passed 1.91 sec; Start 396: python-memdfjk; 381/411 Test #396: python-memdfjk ................... Passed 0.94 sec; Start 397: json-v11-energy; 382/411 Test #393: python-3-index-transforms ........ Passed 10.61 sec; Start 398: json-v11-gradient; 383/411 Test #397: json-v11-energy .................. Passed 3.63 sec; Start 399: json-schema-1-energy; 384/411 Test #398: json-v11-gradient ................ Passed 2.08 sec; Start 400: json-schema-1-ghost; 385/411 Test #400: json-schema-1-ghost .............. Passed 1.34 sec; Start 401: json-schema-1-orient; 386/411 Test #392: python-cc54 ...................... Passed 22.48 sec; Start 402: json-schema-1-throws; 387/411 Test #399: json-schema-1-energy ............. Passed 3.15 sec; Start 403: json-schema-1-gradient; 388/411 Test #401: json-schema-1-orient ............. Passed 2.07 sec; Start 404: json-schema-1-properties; 389/411 Test #402: json-schema-1-throws ............. Passed 0.60 sec; Start 405: skeleton; 390/411 Test #404: json-schema-1-properties ......... Passed 1.09 sec; Start 406: skeletonaointegrals; 391/411 Test #403: json-schema-1-gradient ........... Passed 1.66 sec; Start 4,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1092#issuecomment-409185967:35737,energy,energy,35737,https://psicode.org,https://github.com/psi4/psi4/pull/1092#issuecomment-409185967,1,['energy'],['energy']
Energy Efficiency,b-rot; 373/412 Test #376: pywrap-bfs ....................... Passed 26.37 sec; Start 388: python-energy; 374/412 Test #388: python-energy .................... Passed 1.62 sec; Start 389: python-curve; 375/412 Test #386: psi4numpy-fci .................... Passed 9.39 sec; Start 390: python-pubchem; 376/412 Test #375: dft-custom-gga ................... Passed 34.06 sec; Start 391: python-mints9; 377/412 Test #389: python-curve ..................... Passed 4.70 sec; Start 392: python-mints2; 378/412 Test #391: python-mints9 .................... Passed 2.13 sec; Start 393: python-cc54; 379/412 Test #392: python-mints2 .................... Passed 3.94 sec; Start 394: python-3-index-transforms; 380/412 Test #321: sapt6 ............................ Passed 171.44 sec; Start 396: python-mints13; 381/412 Test #396: python-mints13 ................... Passed 1.98 sec; Start 397: python-memdfjk; 382/412 Test #397: python-memdfjk ................... Passed 1.74 sec; Start 398: json-v11-energy; 383/412 Test #394: python-3-index-transforms ........ Passed 12.36 sec; Start 399: json-v11-gradient; 384/412 Test #399: json-v11-gradient ................ Passed 1.56 sec; Start 400: json-schema-1-energy; 385/412 Test #398: json-v11-energy .................. Passed 4.06 sec; Start 401: json-schema-1-ghost; 386/412 Test #401: json-schema-1-ghost .............. Passed 1.76 sec; Start 402: json-schema-1-orient; 387/412 Test #402: json-schema-1-orient ............. Passed 2.50 sec; Start 403: json-schema-1-throws; 388/412 Test #400: json-schema-1-energy ............. Passed 5.58 sec; Start 404: json-schema-1-gradient; 389/412 Test #403: json-schema-1-throws ............. Passed 0.67 sec; Start 405: json-schema-1-properties; 390/412 Test #404: json-schema-1-gradient ........... Passed 2.22 sec; Start 406: skeleton; 391/412 Test #405: json-schema-1-properties ......... Passed 1.81 sec; Start 407: skeletonaointegrals; 392/412 Test #407: skeletonaointegrals .............. Passed 3.33 sec; Start 40,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1219#issuecomment-419060031:35876,energy,energy,35876,https://psicode.org,https://github.com/psi4/psi4/pull/1219#issuecomment-419060031,1,['energy'],['energy']
Energy Efficiency,"ba64751ee6db78c8f3b#diff-684250b9cfb2a0fa201f5dc123c90964L48) diff.; - All methods now take new kwargs (python variables):; - `return_wfn` - return the methods wavefunction: `scf_e, scf_wfn = energy('SCF', return_wfn=True)`; - `ref_wfn` - what wavefunction to use as reference: `mp2_e = energy('MP2', ref_wfn=scf_wfn)`; - `molecule` - give a molecule for the calculation to be run on (mostly an internal kwarg); - The global molecule is now only touched/modifed by the input file, the user parameter `activate` and by the optimize function.; - OEProp, cubewriter, and the molden writer all need to be explicitly passed a wavefunction python-side.; - These changes will allow for extremely complex workflows. Check out [`proc.py/run_sapt`](https://github.com/dgasmith/psi4public/blob/wavefunction_pass/share/python/proc.py#L2611) for an interesting case of passing wavefunctions and molecules into primary `proc.py` functions.; - `DF` and `RI` modifiers to methods are no longer valid (e.g., `energy('RI-MP2')`). Please use the `mp2_type` option instead.; - Fixed numerous bugs/oddities and moved everything towards a more object oriented workflow. ---. A few notable issues that people may run into:; - The `psi4/lib` folder has been moved to `psi4/share` please update all `PSIDATADIR` references accordingly.; - `Process::environment.wavefunction` no longer exists. This will break any input side `psi4.wavefunction` and `psi4.set_wavefunciton` calls. Please use the `return_wfn` and `ref_wfn` kwargs on methods instead.; - A consequence of this is we broke all of the plugins! Don't worry the fix is very simple please change your C++ signature from: ; `PsiReturnType skeleton(Options& options)`; to:; `SharedWavefunction skeleton(SharedWavefunction ref_wfn, Options& options)`; Every method in Psi4 now takes a Wavefunction and Options objects, this is to make plugins consistent as well. The python-side signature is now `psi4.plugin('skeleton.so', ref_wfn)`. Options passing has not yet been ha",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/246:1666,energy,energy,1666,https://psicode.org,https://github.com/psi4/psi4/pull/246,1,['energy'],['energy']
Energy Efficiency,"been adding some things that are correct but not full-stack hooked up. here are the reminders to do so:; - [ ] after #1491, add the ability to call ATM from functional., e.g. `energy('b3lyp-d3-atm`)`; - [ ] after #1491, MP2D gradients still need addressing; - [ ] after #1490, set up a `energy(sapt0inf)` call (if component anaylysis deems suitable) and add it to the qcvar parade. Also, figure out why it's only in fisapt and is called through dft-sapt.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/402#issuecomment-473124117:176,energy,energy,176,https://psicode.org,https://github.com/psi4/psi4/issues/402#issuecomment-473124117,2,['energy'],['energy']
Energy Efficiency,"been discussing some with Jonathon, and I think if you could do the below, that will clarify all the scaling factor and testing aspects of the PR, so we can move on to the I/O optimization and routing logic parts. Please let me know of any concerns.; > ; > * accept the various GH suggestions clarifying the scaling scheme changes (only if you agree with them, of course). Feel free to make the changes locally, rather than through the GH interface, if that makes the git operations easier.; > * edit sapt-dft1 test to be something like the below. This adds an extra section without the deltaHF correction. The analogous value in test sapt-dft2 is `DHF = -1.42620815`. This passes on master for me, so having the dHF=False pass on your PR will help verify the separate routing logic you added. With this in place, there won't be a need to separate out tests into another PR.; > ; > ```; > #! SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms.; > ; > DHF = -0.01189736 #TEST; > Eref_nh = {""SAPT ELST ENERGY"": -0.10190449, #TEST; > ""SAPT EXCH ENERGY"": 0.36545706, #TEST; > ""SAPT IND ENERGY"": -0.00840483, #TEST; > ""SAPT DISP ENERGY"": -0.24398704, #TEST; > ""CURRENT ENERGY"": 0.01122234} #TEST; > ; > Eref_h_disp = {""SAPT ELST ENERGY"": -0.10197193, #TEST; > ""SAPT EXCH ENERGY"": 0.36569812, #TEST; > ""SAPT IND ENERGY"": -0.00840370, #TEST; > ""SAPT DISP ENERGY"": -0.26658499, #TEST; > ""CURRENT ENERGY"": -0.01126250} #TEST; > ; > Eref_h_fixed = {""SAPT ELST ENERGY"": -0.10197193, #TEST; > ""SAPT EXCH ENERGY"": 0.36569812, #TEST; > ""SAPT IND ENERGY"": -0.00840370, #TEST; > ""SAPT DISP ENERGY"": -0.26605283, #TEST; > ""CURRENT ENERGY"": -0.01073034} #TEST; > ; > molecule dimer {; > Ne; > --; > Ar 1 6.5; > units bohr; > }; > ; > set {; > basis aug-cc-pvdz; > scf_type df; > sapt_dft_grac_shift_a 0.203293; > sapt_dft_grac_shift_b 0.138264; > }; > ; > # No hybrid kernel & no exch-disp scaling & no deltaHF; > set SAPT_DFT_DO_DHF False; > set SAPT_DFT_DO_HYBRID False; > set SAPT_DFT_EXCH_DISP_SCALE_",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2481#issuecomment-1284653967:1074,ENERGY,ENERGY,1074,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1284653967,1,['ENERGY'],['ENERGY']
Energy Efficiency,"bin/python3.6+0x1c0cb9); #33 0x561a73567458 in PyEval_EvalCodeEx (/shared/raimis/opt/miniconda/envs/psi4/bin/python3.6+0x199458); #34 0x561a735681eb in PyEval_EvalCode (/shared/raimis/opt/miniconda/envs/psi4/bin/python3.6+0x19a1eb); #35 0x561a735e29a3 in run_mod (/shared/raimis/opt/miniconda/envs/psi4/bin/python3.6+0x2149a3); #36 0x561a735e2da0 in PyRun_FileExFlags (/shared/raimis/opt/miniconda/envs/psi4/bin/python3.6+0x214da0); #37 0x561a735e2fa3 in PyRun_SimpleFileExFlags (/shared/raimis/opt/miniconda/envs/psi4/bin/python3.6+0x214fa3); #38 0x561a735e6a9d in Py_Main (/shared/raimis/opt/miniconda/envs/psi4/bin/python3.6+0x218a9d); #39 0x561a734ae4bd in main (/shared/raimis/opt/miniconda/envs/psi4/bin/python3.6+0xe04bd); #40 0x7f290458a444 in __libc_start_main (/lib64/libc.so.6+0x22444); #41 0x561a73595772 (/shared/raimis/opt/miniconda/envs/psi4/bin/python3.6+0x1c7772). 0x6030003bc668 is located 0 bytes to the right of 24-byte region [0x6030003bc650,0x6030003bc668); allocated by thread T0 here:; #0 0x7f2904bfbe10 in operator new(unsigned long) /opt/conda/conda-bld/compilers_linux-64_1520532893746/work/.build/src/gcc-7.2.0/libsanitizer/asan/asan_new_delete.cc:80; #1 0x7f28e2c07ef9 in __gnu_cxx::new_allocator<int>::allocate(unsigned long, void const*) /shared/raimis/opt/miniconda/envs/psi4/x86_64-conda_cos6-linux-gnu/include/c++/7.2.0/ext/new_allocator.h:111; #2 0x7f28e2c07ef9 in std::allocator_traits<std::allocator<int> >::allocate(std::allocator<int>&, unsigned long) /shared/raimis/opt/miniconda/envs/psi4/x86_64-conda_cos6-linux-gnu/include/c++/7.2.0/bits/alloc_traits.h:436; #3 0x7f28e2c07ef9 in std::_Vector_base<int, std::allocator<int> >::_M_allocate(unsigned long) /shared/raimis/opt/miniconda/envs/psi4/x86_64-conda_cos6-linux-gnu/include/c++/7.2.0/bits/stl_vector.h:172; #4 0x7f28e2c07ef9 in std::_Vector_base<int, std::allocator<int> >::_M_create_storage(unsigned long) /shared/raimis/opt/miniconda/envs/psi4/x86_64-conda_cos6-linux-gnu/include/c++/7.2.0/bits/stl_vec",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1220#issuecomment-421335756:9284,allocate,allocated,9284,https://psicode.org,https://github.com/psi4/psi4/pull/1220#issuecomment-421335756,1,['allocate'],['allocated']
Energy Efficiency,"bject src/CMakeFiles/core.dir/core.cc.o; cd /home/work/psi4/psi4/objdir/psi4-core-prefix/src/psi4-core-build/src && /usr/lib64/ccache/c++ -DUSING_CheMPS2 -DUSING_dkh -Dcore_EXPORTS -I/home/work/psi4/psi4/psi4/include -I/home/work/psi4/psi4/psi4/src -isystem /home/work/psi4/psi4/objdir/stage/include -I/home/work/psi4/install/include -isystem /usr/include/python3.6m -march=native -O2 -g -DNDEBUG -fPIC -fopenmp -fvisibility=hidden -std=c++11 -std=c++11 -o CMakeFiles/core.dir/core.cc.o -c /home/work/psi4/psi4/psi4/src/core.cc; In file included from /home/work/psi4/install/include/pybind11/stl_bind.h:13,; from /home/work/psi4/psi4/psi4/include/psi4/pybind11.h:40,; from /home/work/psi4/psi4/psi4/src/core.cc:34:; /home/work/psi4/install/include/pybind11/operators.h:78:76: warning: inline declaration of ‘pybind11::detail::op_<(pybind11::detail::op_id)0, (pybind11::detail::op_type)0, pybind11::detail::self_t, pybind11::detail::self_t> pybind11::detail::operator+(const pybind11::detail::self_t&, const pybind11::detail::self_t&)’ follows declaration with attribute ‘noinline’ [-Wattributes]; inline op_<op_##id, op_l, self_t, self_t> op(const self_t &, const self_t &) { \; ^; /home/work/psi4/install/include/pybind11/operators.h:109:1: note: in expansion of macro ‘PYBIND11_BINARY_OPERATOR’; PYBIND11_BINARY_OPERATOR(add, radd, operator+, l + r); ^~~~~~~~~~~~~~~~~~~~~~~~; In file included from /home/work/psi4/install/include/pybind11/cast.h:15,; from /home/work/psi4/install/include/pybind11/attr.h:13,; from /home/work/psi4/install/include/pybind11/pybind11.h:36,; from /home/work/psi4/psi4/psi4/include/psi4/pybind11.h:38,; from /home/work/psi4/psi4/psi4/src/core.cc:34:; /home/work/psi4/install/include/pybind11/descr.h:116:36: note: previous definition of ‘pybind11::detail::descr pybind11::detail::operator+(pybind11::detail::descr&&, pybind11::detail::descr&&)’ was here; PYBIND11_NOINLINE descr friend operator+(descr &&d1, descr &&d2) {; ^~~~~~~~; In file included from /home/work/psi",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1256:1221,Watt,Wattributes,1221,https://psicode.org,https://github.com/psi4/psi4/issues/1256,1,['Watt'],['Wattributes']
Energy Efficiency,"bltinmodule.c.h:283; #35 0x7fa9b5205c1d in _PyCFunction_FastCallDict Objects/methodobject.c:234; #36 0x7fa9b529f0d9 in call_function Python/ceval.c:4837; #37 0x7fa9b52a2901 in _PyEval_EvalFrameDefault Python/ceval.c:3335; #38 0x7fa9b529ecdd in _PyEval_EvalCodeWithName Python/ceval.c:4166; #39 0x7fa9b529f30c in PyEval_EvalCodeEx Python/ceval.c:4187; #40 0x7fa9b529f35a in PyEval_EvalCode Python/ceval.c:731; #41 0x7fa9b52db3b1 in run_mod Python/pythonrun.c:1025; #42 0x7fa9b52db3b1 in PyRun_FileExFlags Python/pythonrun.c:978; #43 0x7fa9b52db516 in PyRun_SimpleFileExFlags Python/pythonrun.c:419; #44 0x7fa9b52f7b0c in run_file Modules/main.c:340; #45 0x7fa9b52f7b0c in Py_Main Modules/main.c:810; #46 0x400bbb in main Programs/python.c:69; #47 0x7fa9b422cfe9 in __libc_start_main (/lib64/libc.so.6+0x20fe9); #48 0x400c7c (/home/raimis/opt/conda/envs/psi4/bin/python3.6+0x400c7c). 0x60800007a380 is located 0 bytes to the right of 96-byte region [0x60800007a320,0x60800007a380); allocated by thread T0 here:; #0 0x7fa9b5721e10 in operator new(unsigned long) /opt/conda/conda-bld/compilers_linux-64_1520532893746/work/.build/src/gcc-7.2.0/libsanitizer/asan/asan_new_delete.cc:80; #1 0x7fa9944a3281 in __gnu_cxx::new_allocator<psi::cctriples::thread_data>::allocate(unsigned long, void const*) /usr/include/c++/7/ext/new_allocator.h:111; #2 0x7fa9944a2ba8 in std::allocator_traits<std::allocator<psi::cctriples::thread_data> >::allocate(std::allocator<psi::cctriples::thread_data>&, unsigned long) /usr/include/c++/7/bits/alloc_traits.h:436; #3 0x7fa9944a2892 in std::_Vector_base<psi::cctriples::thread_data, std::allocator<psi::cctriples::thread_data> >::_M_allocate(unsigned long) /usr/include/c++/7/bits/stl_vector.h:172; #4 0x7fa9944a2506 in std::_Vector_base<psi::cctriples::thread_data, std::allocator<psi::cctriples::thread_data> >::_M_create_storage(unsigned long) (/home/raimis/prj/psi4.git/linux_build/stage/lib/psi4/core.cpython-36m-x86_64-linux-gnu.so+0xcf0a506); #5 0x7fa9944a1e64 in std",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1438:6313,allocate,allocated,6313,https://psicode.org,https://github.com/psi4/psi4/pull/1438,1,['allocate'],['allocated']
Energy Efficiency,"bly Occupied:. 1A -9.811979 2A -9.811957 3A -0.686974; 4A -0.549234 5A -0.403737 6A -0.403737; 7A -0.338480 8A -0.310133 9A -0.310133. Virtual:. 10A 0.023031 11A 0.076058 12A 0.080886; 13A 0.080887 14A 0.110657 15A 0.110658; 16A 0.173580 17A 0.360176 18A 0.370157; 19A 0.370158 20A 0.455135 21A 0.455137; 22A 0.543892 23A 0.571369 24A 0.610757; 25A 0.610759 26A 0.613674 27A 0.623635; 28A 0.623637 29A 0.682101 30A 0.875957; 31A 1.031832 32A 1.031833 33A 1.292103; 34A 1.292104 35A 1.442476 36A 1.448632; 37A 1.662612 38A 1.675074 39A 1.675078; 40A 1.685189 41A 1.685192 42A 1.745843; 43A 1.745846 44A 1.748838 45A 1.953626; 46A 1.953628 47A 2.104265 48A 2.256310; 49A 2.256312 50A 2.286838 51A 2.457344; 52A 2.457345 53A 2.522627 54A 2.738613; 55A 2.803606 56A 2.803611 57A 2.896284; 58A 2.896288 59A 5.038202 60A 5.264241. Final Occupation by Irrep:; A; DOCC [ 9 ]; NA [ 9 ]; NB [ 9 ]. @DF-RKS Final Energy: -79.32647565991985. => Energetics <=. Nuclear Repulsion Energy = 42.0362430486042129; One-Electron Energy = -188.7935335064416904; Two-Electron Energy = 79.9597081286466675; DFT Exchange-Correlation Energy = -12.5288933307290371; Empirical Dispersion Energy = 0.0000000000000000; VV10 Nonlocal Energy = 0.0000000000000000; Total Energy = -79.3264756599198506. Computation Completed. Properties will be evaluated at 0.000000, 0.000000, 0.000000 [a0]. Properties computed using the SCF density matrix. Multipole Moments:. ------------------------------------------------------------------------------------; Multipole Electronic (a.u.) Nuclear (a.u.) Total (a.u.); ------------------------------------------------------------------------------------. L = 1. Multiply by 2.5417464519 to convert [e a0] to [Debye]; Dipole X : 0.0000185 -0.0000189 -0.0000004; Dipole Y : -0.0000204 0.0000189 -0.0000015; Dipole Z : -0.0000155 0.0000189 0.0000034; Magnitude : 0.0000037. ------------------------------------------------------------------------------------. *** tstop() called on baldr at Tue Mar 2",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2911:8563,Energy,Energy,8563,https://psicode.org,https://github.com/psi4/psi4/issues/2911,1,['Energy'],['Energy']
Energy Efficiency,"bly by making the non-S^2 E(20)exch-ind,resp and E(20)exch-disp available as part of energy('sapt0'). This is the topic that probably needs most discussion between @konpat and @CDSherrill, particularly as sapt-dft is now involved. Agreed that split ""non-s^2"" is an unsatisfactory state of affairs. perhaps psicon?. > What should go into aggregate SAPT energy values, S^2 or non-S^2? I made the code pick the non-S^2 value of E(30)exch-ind,resp if available, but I'd be happy to revert it back to picking E(30)exch-ind,resp(S^2). At present, I don't think the non-S^2 values of E(20)exch-ind,resp and E(20)exch-disp are ever included in total SAPT numbers, maybe they should?. I think we've accumulated enough changes for another adjustment to psi's SAPT definitions -- 3 non-S^2 for S^2 terms and evening up the fit basis sets btwn Ed/Rob so that sapt0 is exactly the same from both. > Finally, the option names such as do_ind30_exch_sinf are somewhat unfortunate because they propagate the misconception that you include effects all the way to S^infinity. In reality, the largest power of overlap integral S you ever need is min(NelA,NelB) - after that, you run out of electrons to exchange between A and B. Nonapproximated, Nonexpanded, and beyond-S^2 are all formally more correct names than S^infinity. I'm mostly concerned with the qcvars that need terse names. And it looks like only pure-exch vars have been given S^2 designations https://github.com/psi4/psi4/blob/3d2403c43e2cf8df699ff6e382a4ae2e3a0a5faa/psi4/driver/qcdb/psivardefs.py . So we'd need some existing vars to turn into two flavors `SAPT EXCH-IND30,R ENERGY` --> `SAPT EXCH-IND30,R(S^2) ENERGY` and `SAPT EXCH-IND30,R(!S^2) ENERGY`, perhaps? We have clean aliasing+deprecation warning capability now for qcvars. And the sinf option names I think could be safely renamed due to narrow use in the wild. Maybe `do_ind30_exch_full` or `do_ind30_exch_nons2`. Or, if ""non-s^2"" becomes the norm, the option can be `do_ind30_exch_s2` :-)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2314#issuecomment-938713375:1368,power,power,1368,https://psicode.org,https://github.com/psi4/psi4/pull/2314#issuecomment-938713375,4,"['ENERGY', 'power']","['ENERGY', 'power']"
Energy Efficiency,"bly come a little closer to the borderline where this issue does/does not occur. Seems like it's not related to the low-memory algorithm (I've been using some 500gb RAM machines where the following jobs fit nicely). The first snippet of output completes successfully, the second does not... They are both very similarly sized, which is why I think they might be helpful. As you can see, these jobs are very lengthy... I would be more than happy to supply the inputs, however be mindful that they were running with 64 threads (32 physical cores, hyperthreaded) and 500Gb of ram. ```; *** at Fri Mar 7 12:33:06 2014. *******************************************************; * *; * DF-CCSD *; * Density-fitted CCSD *; * *; * Eugene DePrince *; * *; *******************************************************. ==> 3-index integrals <==. Generating Cholesky vectors ...; Cholesky decomposition threshold: 1.00e-04; Number of Cholesky vectors: 2690. ==> Frozen Natural Orbitals <==. Doubles contribution to MP2 energy in full space: -3.880037726326. Cutoff for significant NO occupancy: 1.000e-06. Number of virtual orbitals in original space: 686; Number of virtual orbitals in truncated space: 651. ==> Memory <==. Total memory requirements: 66851.24 mb; 3-index integrals: 10270.29 mb; CCSD intermediates: 56580.95 mb. memory requirements for CCSD(T): 433739.41 mb. ==> Input parameters <==. Freeze core orbitals? yes; Use frozen natural orbitals? yes; r_convergence: 1.000e-07; e_convergence: 1.000e-06; Number of DIIS vectors: 8; Number of frozen core orbitals: 26; Number of active occupied orbitals: 66; Number of active virtual orbitals: 651; Number of frozen virtual orbitals: 35. Begin singles and doubles coupled cluster iterations. Iter DIIS Energy d(Energy) |d(T)| time; 0 0 2 -3.8800058514 -3.8800058514 1.0189008044 626; 1 1 3 -3.8152481717 0.0647576797 0.2191661023 24884; 2 2 4 -3.9577344796 -0.1424863079 0.0847277058 25298; 3 3 5 -3.9682900741 -0.0105555944 0.0382308599 25123; 4 4 6 -3.968",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/34#issuecomment-38020193:1050,energy,energy,1050,https://psicode.org,https://github.com/psi4/psi4/issues/34#issuecomment-38020193,1,['energy'],['energy']
Energy Efficiency,"bstart = 0; bstart < nb; bstart += max_b) {; size_t nbblock = (bstart + max_b >= nb ? nb - bstart : max_b);				 size_t nbblock = (bstart + max_b >= nb ? nb - bstart : max_b);. dfh->fill_tensor(""Abs"", Abs, {bstart, bstart + nbblock});					 dfh->fill_tensor(""Abs"", Abs, {bstart, bstart + nbblock});; dfh->fill_tensor(""Bbr"", Bbr, {bstart, bstart + nbblock});				 |	 dfh->fill_tensor(""Bbs"", Bbs, {bstart, bstart + nbblock});; dfh->fill_tensor(""Cbr"", Cbr, {bstart, bstart + nbblock});					 dfh->fill_tensor(""Cbr"", Cbr, {bstart, bstart + nbblock});; dfh->fill_tensor(""Fbs"", Dbs, {bstart, bstart + nbblock});				 |	 dfh->fill_tensor(""Dbr"", Dbr, {bstart, bstart + nbblock});; 												 >	 dfh->fill_tensor(""Ebs"", Ebs, {bstart, bstart + nbblock});. long int nab = nablock * nbblock;								 long int nab = nablock * nbblock;. #pragma omp parallel for schedule(dynamic) reduction(+ : Disp20, ExchDisp20)			 |	#pragma omp parallel for schedule(dynamic) reduction(+ : Disp20, CompleteDisp20); for (long int ab = 0L; ab < nab; ab++) {							 for (long int ab = 0L; ab < nab; ab++) {; int a = ab / nbblock;									 int a = ab / nbblock;; int b = ab % nbblock;									 int b = ab % nbblock;. int thread = 0;										 int thread = 0;; #ifdef _OPENMP												#ifdef _OPENMP; thread = omp_get_thread_num();								 thread = omp_get_thread_num();; #endif													#endif. double** Trsp = Trs[thread]->pointer();							 double** Trsp = Trs[thread]->pointer();; double** Vrsp = Vrs[thread]->pointer();							 double** Vrsp = Vrs[thread]->pointer();. // => Amplitudes, Disp20 <= //								 // => Amplitudes, Disp20 <= //. C_DGEMM('N', 'T', nr, ns, nQ, 1.0, Aarp[(a)*nr], nQ, Absp[(b)*ns], nQ, 0.0, Vrsp	 C_DGEMM('N', 'T', nr, ns, nQ, 1.0, Aarp[(a)*nr], nQ, Absp[(b)*ns], nQ, 0.0, Vrsp. for (int r = 0; r < nr; r++) {								 for (int r = 0; r < nr; r++) {; for (int s = 0; s < ns; s++) {							 for (int s = 0; s < ns; s++) {; Trsp[r][s] = Vrsp[r][s] / (eap[a + astart] + ebp[b + bstart] - erp[r] - 	 Trsp[r][s",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1490#issuecomment-456614790:28831,schedul,schedule,28831,https://psicode.org,https://github.com/psi4/psi4/pull/1490#issuecomment-456614790,2,['schedul'],['schedule']
Energy Efficiency,"buntu machine, where `multiprocessing` uses `fork` to start new processes - it just dies silently partway through starting out. . Here's the output: ; ```; $ python mp_test.py; start. Scratch directory: /tmp/; => Libint2 <=. Primary basis highest AM E, G, H: 6, 6, 3; Auxiliary basis highest AM E, G, H: 7, 7, 4; Onebody basis highest AM E, G, H: -, -, -; Solid Harmonics ordering: Gaussian. *** tstart() called on 4f210325e2d9; *** at Tue Jul 2 19:27:19 2024. => Loading Basis Set <=. Name: STO-3G; Role: ORBITAL; Keyword: BASIS; atoms 1 entry O line 81 file /opt/conda/share/psi4/basis/sto-3g.gbs; atoms 2-3 entry H line 19 file /opt/conda/share/psi4/basis/sto-3g.gbs. ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith; RHF Reference; 1 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c2v; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass; ------------ ----------------- ----------------- ----------------- -----------------; O 0.000000000000 0.000000000000 -0.065775570547 15.994914619570; H 0.000000000000 -0.759061990794 0.521953018286 1.007825032230; H 0.000000000000 0.759061990794 0.521953018286 1.007825032230. Running in c2v symmetry. Rotational constants: A = 27.26297 B = 14.51533 C = 9.47217 [cm^-1]; Rotational constants: A = 817323.21126 B = 435158.60141 C = 283968.37536 [MHz]; Nuclear repulsion = 9.168193296424349. Charge = 0; Multiplicity = 1; Electrons = 10; Nalpha = 5; Nbeta = 5. ==> Algorithm <==. SCF Algorithm Type is DF.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is SAD.; Energy threshold = 1.00e-06; Density threshold = 1.00e-06; Integral threshold = 1.00e-12. ==> Primary Basis <==. Basis Set: STO-3G; Blend: STO-3G; Number of shells: 5; Number of basis functions: 7; Number of Cartesian functions: 7; Spherical Harmonics?: true; Max ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3189:1400,charge,charge,1400,https://psicode.org,https://github.com/psi4/psi4/issues/3189,1,['charge'],['charge']
Energy Efficiency,"by Justin Turney, Rob Parrish, Andy Simmonett; 401: and Daniel Smith; 401: RHF Reference; 401: 1 Threads, 500 MiB Core; 401: ---------------------------------------------------------; 401: ; 401: ==> Geometry <==; 401: ; 401: Molecular point group: c2v; 401: Full point group: C2v; 401: ; 401: Geometry (in Bohr), charge = 0, multiplicity = 1:; 401: ; 401: Center X Y Z Mass ; 401: ------------ ----------------- ----------------- ----------------- -----------------; 401: O 0.000000000000 0.000000000000 -0.129476941194 15.994914619560; 401: H 0.000000000000 -1.494187339480 1.027446507924 1.007825032070; 401: H -0.000000000000 1.494187339480 1.027446507924 1.007825032070; 401: ; 401: Running in c2v symmetry.; 401: ; 401: Rotational constants: A = 25.12553 B = 13.37732 C = 8.72954 [cm^-1]; 401: Rotational constants: A = 753244.47204 B = 401041.84791 C = 261705.04646 [MHz]; 401: Nuclear repulsion = 8.801462060629429; 401: ; 401: Charge = 0; 401: Multiplicity = 1; 401: Electrons = 10; 401: Nalpha = 5; 401: Nbeta = 5; 401: ; 401: ==> Algorithm <==; 401: ; 401: SCF Algorithm Type is DF.; 401: DIIS enabled.; 401: MOM disabled.; 401: Fractional occupation disabled.; 401: Guess Type is SAD.; 401: Energy threshold = 1.00e-06; 401: Density threshold = 1.00e-06; 401: Integral threshold = 0.00e+00; 401: ; 401: ==> Primary Basis <==; 401: ; 401: Basis Set: 6-31G; 401: Blend: 6-31G; 401: Number of shells: 9; 401: Number of basis function: 13; 401: Number of Cartesian functions: 13; 401: Spherical Harmonics?: false; 401: Max angular momentum: 1; 401: ; 401: => Loading Basis Set <=; 401: ; 401: Name: (6-31G AUX); 401: Role: JKFIT; 401: Keyword: DF_BASIS_SCF; 401: atoms 1 entry O line 221 file /home/raimis/psi4.git/linux_build/stage/home/raimis/psi4.git/linux_install/share/psi4/basis/cc-pvdz-jkfit.gbs ; 401: atoms 2-3 entry H line 51 file /home/raimis/psi4.git/linux_build/stage/home/raimis/psi4.git/linux_install/share/psi4/basis/cc-pvdz-jkfit.gbs ; 401: ; 401: ==> Pre-Iterations <==; 401",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-403466174:2821,Charge,Charge,2821,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-403466174,1,['Charge'],['Charge']
Energy Efficiency,"c++.so.6 => /cluster/apps/gcc/5.2.0/lib64/libstdc++.so.6 (0x00007f1a73366000); libm.so.6 => /lib64/libm.so.6 (0x00007f1a730e1000); libgomp.so.1 => /cluster/apps/gcc/5.2.0/lib64/libgomp.so.1 (0x00007f1a72ec0000); libgcc_s.so.1 => /cluster/apps/gcc/5.2.0/lib64/libgcc_s.so.1 (0x00007f1a72caa000); libpthread.so.0 => /lib64/libpthread.so.0 (0x00007f1a72a8c000); libc.so.6 => /lib64/libc.so.6 (0x00007f1a726f8000); libutil.so.1 => /lib64/libutil.so.1 (0x00007f1a724f5000); /lib64/ld-linux-x86-64.so.2 (0x00007f1a78d6a000); libgfortran.so.3 => /cluster/apps/gcc/5.2.0/lib64/libgfortran.so.3 (0x00007f1a721d5000); librt.so.1 => /lib64/librt.so.1 (0x00007f1a71fcd000); libquadmath.so.0 => /cluster/apps/gcc/5.2.0/lib/../lib64/libquadmath.so.0 (0x00007f1a71d8d000); [sfux@develop01 x86_64]$ ; ```. I did a quick test with. ```; #! Sample UHF/6-31G** CH2 computation. memory 250 mb. molecule ch2 {; 0 3; C; H 1 R; H 1 R 2 A. R = 1.075; A = 133.93; }. set basis 6-31G**; set reference uhf; energy ('scf'); ```; to verify that the installation does not crash on startup. So far everything looks fine. I have a comment about the shebang line in the psi4 python script. After the installation it was set to an absolute path:. #!/cluster/apps/python/2.7.12/x86_64/bin/python. On larger clusters, there are usually multiple python versions installed in non-standard locations. Therefore when I install executable python scripts on our cluster, I usually change the shebang line to. #!/usr/bin/env python. This way, it takes the first python interpreter that is found in $PATH. This can be convenient for systems with multiple python versions. On our cluster, we use environment modules to manage different versions of the same software. If I have a python script with the generic shebang line, I can choose the Python interpreter by loading the corresponding module; ```. [sfux@euler04 ~]$ module load python/2.7.6; Autoloading openblas/0.2.13_seq; [sfux@euler04 ~]$ /usr/bin/env python -V; Python 2.7.6; [sfux@eule",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/580#issuecomment-275104849:1610,energy,energy,1610,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-275104849,1,['energy'],['energy']
Energy Efficiency,c-sp; 2/412 Test #3: casscf-fzc-sp .................... Passed 7.58 sec; Start 4: casscf-semi; 3/412 Test #4: casscf-semi ...................... Passed 3.39 sec; Start 5: casscf-sa-sp; 4/412 Test #2: adc2 ............................. Passed 68.12 sec; Start 6: ao-casscf-sp; 5/412 Test #5: casscf-sa-sp ..................... Passed 17.41 sec; Start 7: casscf-sp; 6/412 Test #6: ao-casscf-sp ..................... Passed 8.11 sec; Start 8: castup1; 7/412 Test #8: castup1 .......................... Passed 3.07 sec; Start 9: castup2; 8/412 Test #7: casscf-sp ........................ Passed 14.70 sec; Start 10: castup3; 9/412 Test #9: castup2 .......................... Passed 10.03 sec; Start 11: cbs-delta-energy; 10/412 Test #10: castup3 .......................... Passed 8.30 sec; Start 12: cbs-parser; 11/412 Test #12: cbs-parser ....................... Passed 37.55 sec; Start 13: cbs-xtpl-alpha; 12/412 Test #11: cbs-delta-energy ................. Passed 64.49 sec; Start 14: cbs-xtpl-energy; 13/412 Test #14: cbs-xtpl-energy .................. Passed 15.23 sec; Start 15: cbs-xtpl-freq; 14/412 Test #15: cbs-xtpl-freq .................... Passed 9.08 sec; Start 16: cbs-xtpl-gradient; 15/412 Test #326: scf-bz2 .......................... Passed 188.03 sec; Start 17: cbs-xtpl-opt; 16/412 Test #16: cbs-xtpl-gradient ................ Passed 24.11 sec; Start 19: cbs-xtpl-nbody; 17/412 Test #19: cbs-xtpl-nbody ................... Passed 51.60 sec; Start 20: cbs-xtpl-wrapper; 18/412 Test #17: cbs-xtpl-opt ..................... Passed 74.20 sec; Start 21: cc1; 19/412 Test #206: frac-traverse .................... Passed 282.86 sec; Start 22: cc10; 20/412 Test #21: cc1 .............................. Passed 20.69 sec; Start 23: cc11; 21/412 Test #13: cbs-xtpl-alpha ................... Passed 156.06 sec; Start 24: cc12; 22/412 Test #24: cc12 ............................. Passed 18.96 sec; Start 25: cc13; 23/412 Test #22: cc10 ............................. Passed 22.32 sec; Start 27: cc13b,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1219#issuecomment-419060031:1561,energy,energy,1561,https://psicode.org,https://github.com/psi4/psi4/pull/1219#issuecomment-419060031,2,['energy'],['energy']
Energy Efficiency,c13 ............................. Passed 308.71 sec; Start 228: mp2-def2; 19/412 Test #30: cc14 ............................. Passed 283.21 sec; Start 360: tu6-cp-ne2; 20/412 Test #13: cbs-xtpl-alpha ................... Passed 280.85 sec; Start 179: fsapt1; 21/412 Test #36: cc2 .............................. Passed 443.73 sec; Start 387: cookbook-rohf-orb-rot; 22/412 Test #29: cc13d ............................ Passed 66.58 sec; Start 380: cc-module; 23/412 Test #360: tu6-cp-ne2 ....................... Passed 75.72 sec; Start 45: cc29; 24/412 Test #387: cookbook-rohf-orb-rot ............ Passed 66.55 sec; Start 183: isapt1; 25/412 Test #380: cc-module ........................ Passed 44.91 sec; Start 32: cc16; 26/412 Test #112: dcft5 ............................ Passed 141.21 sec; Start 11: cbs-delta-energy; 27/412 Test #45: cc29 ............................. Passed 106.00 sec; Start 71: cc52; 28/412 Test #32: cc16 ............................. Passed 96.05 sec; Start 282: opt-irc-2; 29/412 Test #11: cbs-delta-energy ................. Passed 76.41 sec; Start 113: dcft6; 30/412 Test #71: cc52 ............................. Passed 78.85 sec; Start 18: cbs-xtpl-func; 31/412 Test #282: opt-irc-2 ........................ Passed 104.33 sec; Start 182: fsapt-allterms; 32/412 Test #113: dcft6 ............................ Passed 130.50 sec; Start 194: fd-freq-energy-large; 33/412 Test #395: python-vibanalysis ............... Passed 734.63 sec; Start 196: fd-freq-gradient-large; 34/412 Test #156: dft-grad-lr3 ..................... Passed 451.76 sec; Start 279: opt13; 35/412 Test #228: mp2-def2 ......................... Passed 428.14 sec; Start 374: dft-custom-mgga; 36/412 Test #183: isapt1 ........................... Passed 433.43 sec; Start 321: sapt6; 37/412 Test #374: dft-custom-mgga .................. Passed 185.89 sec; Start 48: cc31; 38/412 Test #196: fd-freq-gradient-large ........... Passed 270.86 sec; Start 98: cisd-opt-fd; 39/412 Test #48: cc31 ........................,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1225#issuecomment-419883272:2895,energy,energy,2895,https://psicode.org,https://github.com/psi4/psi4/pull/1225#issuecomment-419883272,1,['energy'],['energy']
Energy Efficiency,"c8033186fb3c68c1b96f19688a939#diff-9e8e3243e87430585c59e5a407f6bf69R654) when it was just defined up above [here](https://github.com/psi4/psi4/pull/339/commits/cfcbf085305c8033186fb3c68c1b96f19688a939#diff-9e8e3243e87430585c59e5a407f6bf69R603). Ok to delete 2nd definition as done in this PR?; - [x] minor ?: why is `bp86d1` building upon b3lyp as [here](https://github.com/psi4/psi4/pull/339/commits/cfcbf085305c8033186fb3c68c1b96f19688a939#diff-9e8e3243e87430585c59e5a407f6bf69R2114)? Ok to make it build upon bp86 as done in this PR?; ## Status; - [x] Ready to go. B3LYP3/5 test input. You'll need [this](https://raw.githubusercontent.com/drhaney/psi4/master/share/basis/6-31g_2df_p_.gbs) basis set. ```; # all non-psi4 references from http://forum.psicode.org/t/b3lyp-defect-compatibility-with-gamess-and-gaussian/193. # @jamont conditions. molecule {; 0 1; O; H 1 rOH; H 1 rOH 2 aHOH. rOH = 0.9622; aHOH = 103.84; }. set basis 6-311g(d); set scf_type pk; set e_convergence 9. e = energy('b3lyp'); compare_values(-76.4338100903, e, 7, 'b3lyp3 vs Gaussian'); compare_values(-76.4338100577, e, 7, 'b3lyp3 vs Gamess'). clean(). # @drhaney conditions. set basis 6-31G(2df,p); #set dft_spherical_points 590; #set dft_radial_points 99. e = energy('b3lyp'); compare_values(-76.4293315991, e, 5, 'b3lyp3 vs Gamess'); # GAMESS-VWNrpa_1 -76.4293 3159 91; # Psi4-VWNrpa_3 -76.4293 5426 98; # Gaussian-09 -76.4256 2566 74; # LAB psi4 -76.4293 4111 93 # large grid VWN3RPA_C VWN5RPA_C. e = energy('b3lyp5'); compare_values(-76.39221287, e, 5, 'b3lyp5 vs NWChem'); # GAMESS-VWN_5 -76.3922 0295 70; # Nchem-VWN_3 -76.3922 1287 ; # Psi4-VWN_3 -76.3922 2551 29; # LAB psi4 -76.3922 1237 09 # large grid VWN3_C VWN5_C. clean(). # @hokru conditions. molecule {; O -1.769142 -0.076181 0.000000; H -2.065745 0.837492 0.000000; H -0.809034 0.001317 0.000000; }. ### e = energy('b3lyp'); ### compare_values(-76.46290368244, e, 5, 'b3lyp3 vs Turbomole'); ### #For VWN3 (same as Gaussian) I get; ### #-76.46290368244 (Turb",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/339:2108,energy,energy,2108,https://psicode.org,https://github.com/psi4/psi4/pull/339,1,['energy'],['energy']
Energy Efficiency,c; Start 18: cbs-xtpl-func; 20/413 Test #229: mp2-def2 ......................... Passed 374.64 sec; Start 183: fsapt-allterms; 21/413 Test #242: ocepa-freq1 ...................... Passed 672.14 sec; Start 195: fd-freq-energy-large; 22/413 Test #29: cc13d ............................ Passed 269.25 sec; Start 197: fd-freq-gradient-large; 23/413 Test #48: cc31 ............................. Passed 195.21 sec; Start 280: opt13; 24/413 Test #45: cc29 ............................. Passed 176.04 sec; Start 361: tu6-cp-ne2; 25/413 Test #113: dcft5 ............................ Passed 343.29 sec; Start 375: dft-custom-mgga; 26/413 Test #46: cc3 .............................. Passed 1717.81 sec; Start 59: cc41; 27/413 Test #307: pywrap-checkrun-rohf ............. Passed 670.21 sec; Start 388: cookbook-rohf-orb-rot; 28/413 Test #13: cbs-xtpl-alpha ................... Passed 329.60 sec; Start 322: sapt6; 29/413 Test #114: dcft6 ............................ Passed 222.96 sec; Start 381: cc-module; 30/413 Test #11: cbs-delta-energy ................. Passed 275.19 sec; Start 283: opt-irc-2; 31/413 Test #112: dcft4 ............................ Passed 1796.11 sec; Start 61: cc43; 32/413 Test #59: cc41 ............................. Passed 103.24 sec; Start 71: cc52; 33/413 Test #396: python-vibanalysis ............... Passed 1038.97 sec; Start 98: cisd-opt-fd; 34/413 Test #184: isapt1 ........................... Passed 413.67 sec; Start 160: dfscf-bz2; 35/413 Test #361: tu6-cp-ne2 ....................... Passed 174.82 sec; Start 28: cc13c; 36/413 Test #61: cc43 ............................. Passed 78.23 sec; Start 92: cepa-module; 37/413 Test #322: sapt6 ............................ Passed 166.76 sec; Start 304: pywrap-cbs1; 38/413 Test #381: cc-module ........................ Passed 141.83 sec; Start 106: dcft-grad2; 39/413 Test #375: dft-custom-mgga .................. Passed 184.62 sec; Start 349: sapt-dft2; 40/413 Test #388: cookbook-rohf-orb-rot ............ Passed 186.42 sec; Start,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1246#issuecomment-425384085:3206,energy,energy,3206,https://psicode.org,https://github.com/psi4/psi4/pull/1246#issuecomment-425384085,1,['energy'],['energy']
Energy Efficiency,c; Start 297: psimrcc-ccsd_t-1; 128/415 Test #363: stability2 ....................... Passed 1.67 sec; Start 398: python-energy; 129/415 Test #356: dfep2-2 .......................... Passed 2.54 sec; Start 367: scf-response1; 130/415 Test #324: sad1 ............................. Passed 3.08 sec; Start 364: tu1-h2o-energy; 131/415 Test #303: psimrcc-pt2 ...................... Passed 1.68 sec; Start 212: mcscf1; 132/415 Test #414: json-schema-1-gradient ........... Passed 1.69 sec; Start 365: tu2-ch2-energy; 133/415 Test #392: psi4numpy-dfmp2 .................. Passed 1.94 sec; Start 394: psi4numpy-rhf-gradient; 134/415 Test #401: python-mints9 .................... Passed 2.41 sec; Start 344: scf3; 135/415 Test #406: python-mints13 ................... Passed 2.29 sec; Start 319: pywrap-molecule; 136/415 Test #337: scf-guess-read1 .................. Passed 3.82 sec; Start 407: python-memdfjk; 137/415 Test #360: sapt-sf1 ......................... Passed 3.67 sec; Start 393: psi4numpy-rhf; 138/415 Test #398: python-energy .................... Passed 3.51 sec; Start 215: mints1; 139/415 Test #319: pywrap-molecule .................. Passed 1.48 sec; Start 375: options1; 140/415 Test #297: psimrcc-ccsd_t-1 ................. Passed 4.15 sec; Start 248: numpy-array-interface; 141/415 Test #365: tu2-ch2-energy ................... Passed 3.75 sec; Start 211: matrix1; 142/415 Test #212: mcscf1 ........................... Passed 3.86 sec; Start 1: adc1; 143/415 Test #364: tu1-h2o-energy ................... Passed 3.91 sec; Start 2: adc2; 144/415 Test #344: scf3 ............................. Passed 2.32 sec; Start 9: castup2; 145/415 Test #367: scf-response1 .................... Passed 4.22 sec; Start 10: castup3; 146/415 Test #394: psi4numpy-rhf-gradient ........... Passed 3.17 sec; Start 12: cbs-parser; 147/415 Test #375: options1 ......................... Passed 1.05 sec; Start 13: cbs-xtpl-alpha; 148/415 Test #407: python-memdfjk ................... Passed 1.54 sec; Start 17: ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1384#issuecomment-443227424:13352,energy,energy,13352,https://psicode.org,https://github.com/psi4/psi4/pull/1384#issuecomment-443227424,1,['energy'],['energy']
Energy Efficiency,c; Start 396: python-memdfjk; 380/411 Test #383: psi4numpy-rhf-gradient ........... Passed 1.25 sec; Start 411: skeletonwavefunction; 381/411 Test #293: psimrcc-pt2 ...................... Passed 1.38 sec; Start 408: skeletonmointegrals; 382/411 Test #108: dcft2 ............................ Passed 2.92 sec; Start 410: skeletonsointegrals; 383/411 Test #400: json-schema-1-ghost .............. Passed 1.34 sec; Start 352: stability2; 384/411 Test #405: skeleton ......................... Passed 1.30 sec; Start 354: tu2-ch2-energy; 385/411 Test #396: python-memdfjk ................... Passed 0.93 sec; Start 330: scf-bs; 386/411 Test #398: json-v11-gradient ................ Passed 1.38 sec; Start 382: psi4numpy-rhf; 387/411 Test #406: skeletonaointegrals .............. Passed 1.11 sec; Start 387: python-energy; 388/411 Test #411: skeletonwavefunction ............. Passed 0.91 sec; Start 209: mcscf1; 389/411 Test #408: skeletonmointegrals .............. Passed 0.89 sec; Start 188: fci-tdm; 390/411 Test #354: tu2-ch2-energy ................... Passed 0.76 sec; Start 308: pywrap-db3; 391/411 Test #352: stability2 ....................... Passed 0.85 sec; Start 211: mcscf3; 392/411 Test #410: skeletonsointegrals .............. Passed 0.91 sec; Start 334: scf3; 393/411 Test #382: psi4numpy-rhf .................... Passed 0.82 sec; Start 239: numpy-array-interface; 394/411 Test #330: scf-bs ........................... Passed 0.83 sec; Start 409: skeletonscf; 395/411 Test #387: python-energy .................... Passed 0.72 sec; Start 175: docs-dft; 396/411 Test #209: mcscf1 ........................... Passed 0.65 sec; Start 216: mints5; 397/411 Test #188: fci-tdm .......................... Passed 0.82 sec; Start 208: matrix1; 398/411 Test #308: pywrap-db3 ....................... Passed 0.67 sec; Start 212: mints1; 399/411 Test #409: skeletonscf ...................... Passed 0.60 sec; Start 364: options1; 400/411 Test #239: numpy-array-interface ............ Passed 0.64 sec; Start ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1089#issuecomment-408103972:36565,energy,energy,36565,https://psicode.org,https://github.com/psi4/psi4/pull/1089#issuecomment-408103972,1,['energy'],['energy']
Energy Efficiency,c; Start 80: cc9; 43/401 Test #303: pywrap-db1 ....................... Passed 31.39 sec; Start 70: cc53; 44/401 Test #27: cc13c ............................ Passed 72.66 sec; Start 332: scf5; 45/401 Test #51: cc35 ............................. Passed 15.14 sec; Start 78: cc8b; 46/401 Test #49: cc33 ............................. Passed 14.41 sec; Start 54: cc38; 47/401 Test #55: cc39 ............................. Passed 19.02 sec; Start 43: cc28; 48/401 Test #63: cc47 ............................. Passed 22.87 sec; Start 77: cc8a; 49/401 Test #226: mp2-module ....................... Passed 75.91 sec; Start 298: pywrap-cbs1; 50/401 Test #72: cc55 ............................. Passed 24.10 sec; Start 79: cc8c; 51/401 Test #81: cc9a ............................. Passed 25.08 sec; Start 288: psimrcc-fd-freq2; 52/401 Test #80: cc9 .............................. Passed 21.90 sec; Start 99: ci-property; 53/401 Test #70: cc53 ............................. Passed 19.97 sec; Start 23: cc12; 54/401 Test #11: cbs-delta-energy ................. Passed 127.44 sec; Start 37: cc22; 55/401 Test #54: cc38 ............................. Passed 18.35 sec; Start 65: cc49; 56/401 Test #78: cc8b ............................. Passed 23.61 sec; Start 30: cc15; 57/401 Test #332: scf5 ............................. Passed 32.95 sec; Start 21: cc10; 58/401 Test #77: cc8a ............................. Passed 30.77 sec; Start 16: cbs-xtpl-gradient; 59/401 Test #23: cc12 ............................. Passed 20.30 sec; Start 295: pywrap-alias; 60/401 Test #37: cc22 ............................. Passed 20.74 sec; Start 22: cc11; 61/401 Test #79: cc8c ............................. Passed 26.19 sec; Start 165: dft-vv10; 62/401 Test #99: ci-property ...................... Passed 24.29 sec; Start 71: cc54; 63/401 Test #43: cc28 ............................. Passed 46.96 sec; Start 26: cc13b; 64/401 Test #65: cc49 ............................. Passed 35.49 sec; Start 128: dfmp2-1; 65/401 Test #21: cc10 ....,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-402413637:5176,energy,energy,5176,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-402413637,1,['energy'],['energy']
Energy Efficiency,casscf-semi ...................... Passed 11.68 sec; Start 5: casscf-sa-sp; 12/411 Test #3: casscf-fzc-sp .................... Passed 19.26 sec; Start 6: ao-casscf-sp; 13/411 Test #6: ao-casscf-sp ..................... Passed 8.25 sec; Start 7: casscf-sp; 14/411 Test #5: casscf-sa-sp ..................... Passed 23.99 sec; Start 8: castup1; 15/411 Test #8: castup1 .......................... Passed 2.23 sec; Start 9: castup2; 16/411 Test #325: scf-bz2 .......................... Passed 124.34 sec; Start 10: castup3; 17/411 Test #9: castup2 .......................... Passed 13.78 sec; Start 11: cbs-delta-energy; 18/411 Test #7: casscf-sp ........................ Passed 38.07 sec; Start 12: cbs-parser; 19/411 Test #10: castup3 .......................... Passed 15.65 sec; Start 13: cbs-xtpl-alpha; 20/411 Test #316: sapt2 ............................ Passed 350.80 sec; Start 14: cbs-xtpl-energy; 21/411 Test #394: python-vibanalysis ............... Passed 958.22 sec; Start 15: cbs-xtpl-freq; 22/411 Test #14: cbs-xtpl-energy .................. Passed 14.64 sec; Start 16: cbs-xtpl-gradient; 23/411 Test #15: cbs-xtpl-freq .................... Passed 9.77 sec; Start 17: cbs-xtpl-opt; 24/411 Test #12: cbs-parser ....................... Passed 69.31 sec; Start 19: cbs-xtpl-wrapper; 25/411 Test #16: cbs-xtpl-gradient ................ Passed 32.38 sec; Start 20: cc1; 26/411 Test #19: cbs-xtpl-wrapper ................. Passed 84.37 sec; Start 21: cc10; 27/411 Test #17: cbs-xtpl-opt ..................... Passed 118.78 sec; Start 22: cc11; 28/411 Test #20: cc1 .............................. Passed 108.09 sec; Start 23: cc12; 29/411 Test #21: cc10 ............................. Passed 56.95 sec; Start 24: cc13; 30/411 Test #22: cc11 ............................. Passed 46.44 sec; Start 26: cc13b; 31/411 Test #23: cc12 ............................. Passed 31.76 sec; Start 27: cc13c; 32/411 Test #11: cbs-delta-energy ................. Passed 277.77 sec; Start 28: cc13d; 33/411 Test #26: c,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1115#issuecomment-411094637:2273,energy,energy,2273,https://psicode.org,https://github.com/psi4/psi4/pull/1115#issuecomment-411094637,1,['energy'],['energy']
Energy Efficiency,cc13b ............................ Passed 76.46 sec; Start 148: dfomp3-2; 74/412 Test #17: cbs-xtpl-opt ..................... Passed 87.77 sec; Start 58: cc40; 75/412 Test #157: dfomp2p5-grad2 ................... Passed 63.86 sec; Start 163: dft-grad-meta; 76/412 Test #298: pubchem1 ......................... Passed 62.78 sec; Start 101: ci-property; 77/412 Test #251: omp2-5 ........................... Passed 64.13 sec; Start 264: omp3-grad2; 78/412 Test #32: cc16 ............................. Passed 140.13 sec; Start 303: pywrap-cbs1; 79/412 Test #390: python-pubchem ................... Passed 63.68 sec; Start 145: dfomp2-grad2; 80/412 Test #20: cbs-xtpl-wrapper ................. Passed 71.38 sec; Start 231: mp2-module; 81/412 Test #47: cc30 ............................. Passed 73.41 sec; Start 171: dft1-alt; 82/412 Test #257: omp2p5-grad2 ..................... Passed 60.64 sec; Start 61: cc43; 83/412 Test #163: dft-grad-meta .................... Passed 53.44 sec; Start 193: fd-freq-energy; 84/412 Test #44: cc28 ............................. Passed 82.41 sec; Start 150: dfomp3-grad2; 85/412 Test #148: dfomp3-2 ......................... Passed 63.71 sec; Start 82: cc9; 86/412 Test #101: ci-property ...................... Passed 57.32 sec; Start 260: omp3-3; 87/412 Test #58: cc40 ............................. Passed 66.56 sec; Start 220: mints-benchmark; 88/412 Test #59: cc41 ............................. Passed 107.46 sec; Start 83: cc9a; 89/412 Test #105: dcft-grad2 ....................... Passed 101.83 sec; Start 19: cbs-xtpl-nbody; 90/412 Test #261: omp3-4 ........................... Passed 87.40 sec; Start 243: ocepa-grad2; 91/412 Test #171: dft1-alt ......................... Passed 53.53 sec; Start 132: dfmp2-3; 92/412 Test #264: omp3-grad2 ....................... Passed 71.89 sec; Start 262: omp3-5; 93/412 Test #220: mints-benchmark .................. Passed 42.98 sec; Start 277: opt11; 94/412 Test #145: dfomp2-grad2 ..................... Passed 91.70 sec; Star,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1199#issuecomment-417683504:8124,energy,energy,8124,https://psicode.org,https://github.com/psi4/psi4/pull/1199#issuecomment-417683504,1,['energy'],['energy']
Energy Efficiency,cc25; 7/411 Test #162: dft-grad-lr3 ..................... Passed 412.33 sec; Start 38: cc23; 8/411 Test #182: isapt1 ........................... Passed 416.77 sec; Start 76: cc7; 9/411 Test #304: pywrap-checkrun-rhf .............. Passed 243.61 sec; Start 36: cc21; 10/411 Test #39: cc24 ............................. Passed 229.63 sec; Start 35: cc2; 11/411 Test #76: cc7 .............................. Passed 204.63 sec; Start 240: ocepa-freq1; 12/411 Test #40: cc25 ............................. Passed 228.58 sec; Start 41: cc26; 13/411 Test #38: cc23 ............................. Passed 232.18 sec; Start 42: cc27; 14/411 Test #306: pywrap-checkrun-uhf .............. Passed 316.81 sec; Start 111: dcft5; 15/411 Test #394: python-vibanalysis ............... Passed 760.31 sec; Start 18: cbs-xtpl-func; 16/411 Test #36: cc21 ............................. Passed 216.12 sec; Start 181: fsapt-allterms; 17/411 Test #41: cc26 ............................. Passed 181.93 sec; Start 193: fd-freq-energy-large; 18/411 Test #35: cc2 .............................. Passed 207.82 sec; Start 195: fd-freq-gradient-large; 19/411 Test #42: cc27 ............................. Passed 170.28 sec; Start 278: opt13; 20/411 Test #240: ocepa-freq1 ...................... Passed 209.57 sec; Start 114: dcft8; 21/411 Test #111: dcft5 ............................ Passed 162.07 sec; Start 305: pywrap-checkrun-rohf; 22/411 Test #114: dcft8 ............................ Passed 63.15 sec; Start 112: dcft6; 23/411 Test #305: pywrap-checkrun-rohf ............. Passed 76.19 sec; Start 320: sapt6; 24/411 Test #112: dcft6 ............................ Passed 119.43 sec; Start 373: dft-custom-mgga; 25/411 Test #195: fd-freq-gradient-large ........... Passed 259.17 sec; Start 29: cc14; 26/411 Test #320: sapt6 ............................ Passed 144.05 sec; Start 155: dfscf-bz2; 27/411 Test #29: cc14 ............................. Passed 51.56 sec; Start 281: opt-irc-2; 28/411 Test #373: dft-custom-mgga ...............,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-405575064:1914,energy,energy-large,1914,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-405575064,1,['energy'],['energy-large']
Energy Efficiency,"ce, M. Saitow, U. Bozkaya, A. Yu. Sokolov; -----------------------------------------------------------------------. Psi4 started on: Sat Jan 9 01:41:42 2016. Process ID: 17178; PSI4DATADIR: ./lib; Memory level set to 256.000 MB; ```. ==> Input File <==. ---. #! 6-31G H2O Test FCI Energy Point. memory 48000 mb. molecule B {; 1 1; B .0000000000 .0000000000 -.000000000; units bohr; }. set globals {; basis aug-cc-pVTZ; icore 0; }. thisenergy = energy('fci'). ---. Input file to run:; from psi4 import *; from p4const import *; from p4util import *; from molutil import *; from aliases import *; psi4_io = psi4.IOManager.shared_object(); psi4.efp_init(); psi4_io.set_default_path(""/tmp""); geometry(""""""; 0 1; H; H 1 0.74; """""",""blank_molecule_psi4_yo""). psi4.set_memory(48000000000). psi4.efp_init(); B = geometry(""""""; 1 1; B .0000000000 .0000000000 -.000000000; units bohr; """""",""B""); psi4.IO.set_default_namespace(""B""); psi4.set_global_option(""BASIS"", ""aug-cc-pVTZ""); psi4.set_global_option(""ICORE"", 0); thisenergy = energy('fci'). Memory set to 48.000 GiB by Python script. **\* tstart() called on node5-027-10; **\* at Sat Jan 9 01:41:51 2016. ```; ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, and Andy Simmonett; RHF Reference; 12 Threads, 48000 MiB Core; ---------------------------------------------------------; ```. ==> Geometry <==. ```; Molecular point group: d2h; Geometry (in Bohr), charge = 1, multiplicity = 1:. Center X Y Z; ------------ ----------------- ----------------- -----------------; B 0.000000000000 0.000000000000 0.000000000000; ```. Running in d2h symmetry. Rotational constants: A = ***********\* B = ***********\* C = ***********\* [cm^-1]; Rotational constants: A = ***********\* B = ***********\* C = ***********\* [MHz]; Nuclear repulsion = 0.000000000000000. Charge = 1; Multiplicity = 1; Electrons = 4; Nalpha = 2; Nbeta = 2. ==> Algorithm <==. SCF Algorithm Type is PK.; DIIS enabled.; MOM disabled.; Fractional occup",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/204#issuecomment-170152270:2401,energy,energy,2401,https://psicode.org,https://github.com/psi4/psi4/issues/204#issuecomment-170152270,1,['energy'],['energy']
Energy Efficiency,"ced. All its contents should be considered experimental and subject to change.; - [x] Dipole derivatives through finite difference of dipoles added, so IR intensities available; - [x] The dummy wavefunctions returned from wrappers always had some questionable properties (e.g., single method for mixed method, largeset HF basis for cbs wavefunction) can be even less realistic (e.g., always def2-svp basis for cbs).; - [x] n-body qcvars renamed (grace period applies); ```; ""CP-CORRECTED {nb}-BODY INTERACTION ENERGY"": (""CP-CORRECTED INTERACTION ENERGY THROUGH {nb}-BODY"", 1.7),; ""NOCP-CORRECTED {nb}-BODY INTERACTION ENERGY"": (""NOCP-CORRECTED INTERACTION ENERGY THROUGH {nb}-BODY"", 1.7),; ""VMFC-CORRECTED {nb}-BODY INTERACTION ENERGY"": (""VMFC-CORRECTED INTERACTION ENERGY THROUGH {nb}-BODY"", 1.7),; ""COUNTERPOISE CORRECTED TOTAL ENERGY"": (""CP-CORRECTED TOTAL ENERGY"", 1.7),; ""COUNTERPOISE CORRECTED INTERACTION ENERGY"": (""CP-CORRECTED INTERACTION ENERGY"", 1.7),; ""NON-COUNTERPOISE CORRECTED TOTAL ENERGY"": (""NOCP-CORRECTED TOTAL ENERGY"", 1.7),; ""NON-COUNTERPOISE CORRECTED INTERACTION ENERGY"": (""NOCP-CORRECTED INTERACTION ENERGY"", 1.7),; ""VALIRON-MAYER FUNCTION COUTERPOISE TOTAL ENERGY"": (""VALIRON-MAYER FUNCTION COUNTERPOISE TOTAL ENERGY"", 1.7), # note misspelling; ""VALIRON-MAYER FUNCTION COUTERPOISE INTERACTION ENERGY"": (""VMFC-CORRECTED INTERACTION ENERGY"", 1.7),; ``` ; - [x] added managed mode for scf gradient. it's not wholly effective at consolidating code, though, since only triggers for `gradient(""hf"")`, not `gradient(correlated)`. digits to compare has to be relaxed, but this has been seen with other qc programs, too.; - [x] Distributed driver should not be advertised for use with QCFractal at this time. It hasn't been tested in a while, and mem, cores, etc. setting may need tweaking in a non-continuous mode. Use it experimentally and report back.; - [x] n-body wrapper can no longer do embedding with internally calculated Mulliken charges. Charges must now be provided with `",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2575:6515,ENERGY,ENERGY,6515,https://psicode.org,https://github.com/psi4/psi4/pull/2575,2,['ENERGY'],['ENERGY']
Energy Efficiency,"cessful run. Possibly -D variant not available in dftd3 version. ../lib/python3.6/site-packages/psi4/driver/qcdb/intf_dftd3/runner.py:301: Dftd3Error. The above exception was the direct cause of the following exception:. @pytest.mark.smoke; @using_dftd3; @using_gcp; def test_grimme_3c():. s16di = psi4.geometry(""""""; C 0.000000 -0.667578 -2.124659; C 0.000000 0.667578 -2.124659; H 0.923621 -1.232253 -2.126185; H -0.923621 -1.232253 -2.126185; H -0.923621 1.232253 -2.126185; H 0.923621 1.232253 -2.126185; --; C 0.000000 0.000000 2.900503; C 0.000000 0.000000 1.693240; H 0.000000 0.000000 0.627352; H 0.000000 0.000000 3.963929; symmetry c1; """"""). > ene = psi4.energy('pbeh3c', bsse_type='nocp'). ../lib/python3.6/site-packages/psi4/tests/test_addons.py:830:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; ../lib/python3.6/site-packages/psi4/driver/driver.py:494: in energy; return driver_nbody.nbody_gufunc(energy, name, ptype='energy', **kwargs); ../lib/python3.6/site-packages/psi4/driver/driver_nbody.py:266: in nbody_gufunc; component_results = compute_nbody_components(func, method_string, metadata); ../lib/python3.6/site-packages/psi4/driver/driver_nbody.py:475: in compute_nbody_components; ptype_dict[pair], wfn = func(method_string, molecule=current_mol, return_wfn=True, **kwargs); ../lib/python3.6/site-packages/psi4/driver/driver.py:556: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); ../lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:2002: in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); ../lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1351: in scf_helper; disp_energy = scf_wfn._disp_functor.compute_energy(scf_wfn.molecule()); ../lib/python3.6/site-packages/psi4/driver/procrouting/empirical_dispersion.py:195: in compute_energy; verbose=1); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:17735,energy,energy,17735,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846,2,['energy'],['energy']
Energy Efficiency,cf-sa-sp ..................... Passed 14.84 sec; Start 368: scf-freq1; 225/411 Test #217: mints6 ........................... Passed 11.92 sec; Start 285: props2; 226/411 Test #226: mp2-1 ............................ Passed 8.62 sec; Start 98: cisd-sp; 227/411 Test #143: dfomp2-grad1 ..................... Passed 9.47 sec; Start 201: fnocc3; 228/411 Test #7: casscf-sp ........................ Passed 18.41 sec; Start 14: cbs-xtpl-energy; 229/411 Test #23: cc12 ............................. Passed 18.39 sec; Start 139: dfomp2-1; 230/411 Test #368: scf-freq1 ........................ Passed 11.13 sec; Start 122: dfccd-grad1; 231/411 Test #338: scf7 ............................. Passed 13.09 sec; Start 268: opt2-fd; 232/411 Test #98: cisd-sp .......................... Passed 9.44 sec; Start 369: dft-jk; 233/411 Test #139: dfomp2-1 ......................... Passed 8.89 sec; Start 127: dfccsdt1; 234/411 Test #285: props2 ........................... Passed 14.75 sec; Start 372: dft-custom-hybrid; 235/411 Test #14: cbs-xtpl-energy .................. Passed 14.69 sec; Start 101: cubeprop; 236/411 Test #201: fnocc3 ........................... Passed 17.46 sec; Start 393: python-3-index-transforms; 237/411 Test #268: opt2-fd .......................... Passed 12.91 sec; Start 266: opt1-fd; 238/411 Test #122: dfccd-grad1 ...................... Passed 13.35 sec; Start 141: dfomp2-3; 239/411 Test #127: dfccsdt1 ......................... Passed 7.70 sec; Start 192: fd-freq-energy; 240/411 Test #369: dft-jk ........................... Passed 13.09 sec; Start 197: freq-isotope1; 241/411 Test #141: dfomp2-3 ......................... Passed 6.05 sec; Start 15: cbs-xtpl-freq; 242/411 Test #101: cubeprop ......................... Passed 10.02 sec; Start 357: tu4-h2o-freq; 243/411 Test #372: dft-custom-hybrid ................ Passed 11.78 sec; Start 132: dfmp2-4; 244/411 Test #393: python-3-index-transforms ........ Passed 9.38 sec; Start 90: cepa1; 245/411 Test #266: opt1-fd ................,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-405575064:21905,energy,energy,21905,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-405575064,1,['energy'],['energy']
Energy Efficiency,"ch I believe is pulled out of the CCSD(T) calculation. no df-CCSD(T) available ☹️ ; When I compute the Hessian, instead of doing a conventional MP2/DZ singlepoint it looks like a separate, df-mp2 calculation is performed. . Here's the Hessian CBS summary:. ```; ---------------------------------------------------------------------------------------------------------; Method / Basis Rqd Energy [Eh] Variable; ---------------------------------------------------------------------------------------------------------; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; hf / heavy-aug-cc-pv(t+d)z * -149.65690150 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(t+d)z * -150.13698909 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(q+d)z * -150.17732219 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(t+d)z * -149.65690150 HF TOTAL ENERGY; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; hf / heavy-aug-cc-pv(d+d)z 0.00000000 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(d+d)z * -150.01845040 MP2 TOTAL ENERGY; ccsd / heavy-aug-cc-pv(d+d)z 0.00000000 CCSD TOTAL ENERGY; ccsd(t) / heavy-aug-cc-pv(d+d)z * -150.02005663 CCSD(T) TOTAL ENERGY; hf / heavy-aug-cc-pv(d+d)z 0.00000000 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(d+d)z * -150.01845040 MP2 TOTAL ENERGY; ---------------------------------------------------------------------------------------------------------. ==> Stages <==. ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Wt Energy [Eh] Scheme; ---------------------------------------------------------------------------------------------------------; scf hf / heavy-aug-cc-pv(q+d)z 1 -149.66713397 xtpl_highest_1; corl mp2 / heavy-aug-cc-pv([tq]+d)z 1 -150.20675446 corl_xtpl_helgaker_2; corl hf / heavy-aug-cc-pv([tq]+d)z -1 -149.67460090 corl_xtpl_helgaker_2; delta1 ccsd(t) / heavy-aug-cc-pv(d+d)z 1 -150.02005663 xtpl_highest_1; delta1 mp2 / heavy-aug-cc-pv(d+d)z",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1897:3930,ENERGY,ENERGY,3930,https://psicode.org,https://github.com/psi4/psi4/issues/1897,1,['ENERGY'],['ENERGY']
Energy Efficiency,"changes suggested by the modern C++ best-practices and are explained in detail in Scott Meyers' [Effective Modern C++]. . ## Why?; #### Prefer `std::make_shared` to direct use of `new`; Using `std::make_shared`:; 1. Reduces code verbosity, especially when coupled with `auto`:; ```; std::shared_ptr<Matrix> F = std::shared_ptr<Matrix>(new Matrix(""Fock matrix"", nso, nso)); // Type information written down 3 TIMES!!!; std::shared_ptr<Matrix> F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); // So much typing...; auto F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); // Much better!!!!; ```; 2. Ensures exception safety and prevents resource leaks.; 3. Improves efficiency:; ```; // Performs TWO allocations; std::shared_ptr<Matrix> F = std::shared_ptr<Matrix>(new Matrix(""Fock matrix"", nso, nso)); ; // Performs ONE allocation; auto F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); ; ```. _Reference_: Item 21 in [Effective Modern C++].; #### Prefer `auto` to explicit type declarations; Using `auto` reduces and/or avoids:; 1. Verbosity in variable declarations:; ```; std::shared_ptr<Matrix> F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); // So much typing...; auto F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); // Much better!; ```; 2. Problems with uninitialized variables. `auto` works like template type deduction, hence the right-hand side of the declaration **needs to have** an initializer:; ```; int x1; // fine, but initialized :(; auto x2; // WON'T COMPILE!!!; auto x3 = 1; // fine and initialized; ```; 3. Problems with unintended type casts and type mismatches that are hard to impossible to catch:; ```; std::vector<int> v;; // !!! The size of a vector is of type std::vector<int>::size_type and is compiler- AND architecture-DEPENDENT; unsigned sz = v.size(); // might not be correct on some compiler/machines; auto size = v.size(); // size is ALWAYS of the correct type; ```; _Reference_: Items 2 and 5 in [Effective Modern C++].; #### Prefer `null",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/836:1365,reduce,reduces,1365,https://psicode.org,https://github.com/psi4/psi4/pull/836,1,['reduce'],['reduces']
Energy Efficiency,chema-1-gradient; 371/412 Test #407: skeletonaointegrals .............. Passed 16.90 sec; Start 396: python-mints13; 372/412 Test #288: psimrcc-ccsd_t-1 ................. Passed 17.50 sec; Start 299: pubchem2; 373/412 Test #8: castup1 .......................... Passed 17.96 sec; Start 223: mints10; 374/412 Test #331: scf-bs ........................... Passed 17.01 sec; Start 354: tu1-h2o-energy; 375/412 Test #391: python-mints9 .................... Passed 18.84 sec; Start 411: skeletonsointegrals; 376/412 Test #222: mints9 ........................... Passed 17.91 sec; Start 221: mints-helper; 377/412 Test #404: json-schema-1-gradient ........... Passed 16.86 sec; Start 103: decontract; 378/412 Test #396: python-mints13 ................... Passed 17.37 sec; Start 381: psi4numpy-cphf; 379/412 Test #299: pubchem2 ......................... Passed 16.12 sec; Start 384: psi4numpy-rhf-gradient; 380/412 Test #223: mints10 .......................... Passed 16.21 sec; Start 355: tu2-ch2-energy; 381/412 Test #354: tu1-h2o-energy ................... Passed 16.19 sec; Start 397: python-memdfjk; 382/412 Test #411: skeletonsointegrals .............. Passed 15.60 sec; Start 215: mints3; 383/412 Test #221: mints-helper ..................... Passed 15.41 sec; Start 405: json-schema-1-properties; 384/412 Test #103: decontract ....................... Passed 15.43 sec; Start 399: json-v11-gradient; 385/412 Test #381: psi4numpy-cphf ................... Passed 14.94 sec; Start 401: json-schema-1-ghost; 386/412 Test #384: psi4numpy-rhf-gradient ........... Passed 14.67 sec; Start 379: mints12; 387/412 Test #355: tu2-ch2-energy ................... Passed 14.64 sec; Start 310: pywrap-molecule; 388/412 Test #397: python-memdfjk ................... Passed 14.35 sec; Start 388: python-energy; 389/412 Test #405: json-schema-1-properties ......... Passed 14.49 sec; Start 335: scf3; 390/412 Test #215: mints3 ........................... Passed 15.09 sec; Start 217: mints5; 391/412 Test #399: json-v,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1225#issuecomment-419883272:35719,energy,energy,35719,https://psicode.org,https://github.com/psi4/psi4/pull/1225#issuecomment-419883272,2,['energy'],['energy']
Energy Efficiency,chiral; 363/411 Test #377: pywrap-align-chiral .............. Passed 3.38 sec; Start 378: mints12; 364/411 Test #378: mints12 .......................... Passed 1.36 sec; Start 379: cc-module; 365/411 Test #305: pywrap-checkrun-rohf ............. Passed 197.70 sec; Start 380: psi4numpy-cphf; 366/411 Test #380: psi4numpy-cphf ................... Passed 1.32 sec; Start 381: psi4numpy-dfmp2; 367/411 Test #381: psi4numpy-dfmp2 .................. Passed 2.03 sec; Start 382: psi4numpy-rhf; 368/411 Test #382: psi4numpy-rhf .................... Passed 1.00 sec; Start 383: psi4numpy-rhf-gradient; 369/411 Test #383: psi4numpy-rhf-gradient ........... Passed 1.50 sec; Start 384: psi4numpy-rhf-hessian; 370/411 Test #375: pywrap-bfs ....................... Passed 25.30 sec; Start 385: psi4numpy-fci; 371/411 Test #374: dft-custom-gga ................... Passed 29.94 sec; Start 386: cookbook-rohf-orb-rot; 372/411 Test #384: psi4numpy-rhf-hessian ............ Passed 3.48 sec; Start 387: python-energy; 373/411 Test #387: python-energy .................... Passed 1.23 sec; Start 388: python-curve; 374/411 Test #385: psi4numpy-fci .................... Passed 5.25 sec; Start 389: python-pubchem; 375/411 Test #388: python-curve ..................... Passed 2.96 sec; Start 390: python-mints9; 376/411 Test #390: python-mints9 .................... Passed 1.96 sec; Start 391: python-mints2; 377/411 Test #391: python-mints2 .................... Passed 2.41 sec; Start 392: python-cc54; 378/411 Test #320: sapt6 ............................ Passed 164.21 sec; Start 393: python-3-index-transforms; 379/411 Test #162: dft-grad-lr3 ..................... Passed 463.80 sec; Start 395: python-mints13; 380/411 Test #395: python-mints13 ................... Passed 1.91 sec; Start 396: python-memdfjk; 381/411 Test #396: python-memdfjk ................... Passed 0.94 sec; Start 397: json-v11-energy; 382/411 Test #393: python-3-index-transforms ........ Passed 10.61 sec; Start 398: json-v11-gradient; 383/411,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1092#issuecomment-409185967:34846,energy,energy,34846,https://psicode.org,https://github.com/psi4/psi4/pull/1092#issuecomment-409185967,2,['energy'],['energy']
Energy Efficiency,chiral; 371/411 Test #306: pywrap-checkrun-uhf .............. Passed 336.85 sec; Start 378: mints12; 372/411 Test #378: mints12 .......................... Passed 1.19 sec; Start 379: cc-module; 373/411 Test #376: pywrap-align ..................... Passed 3.89 sec; Start 380: psi4numpy-cphf; 374/411 Test #377: pywrap-align-chiral .............. Passed 3.14 sec; Start 381: psi4numpy-dfmp2; 375/411 Test #380: psi4numpy-cphf ................... Passed 1.28 sec; Start 382: psi4numpy-rhf; 376/411 Test #381: psi4numpy-dfmp2 .................. Passed 1.74 sec; Start 383: psi4numpy-rhf-gradient; 377/411 Test #382: psi4numpy-rhf .................... Passed 0.90 sec; Start 384: psi4numpy-rhf-hessian; 378/411 Test #383: psi4numpy-rhf-gradient ........... Passed 1.33 sec; Start 385: psi4numpy-fci; 379/411 Test #300: pywrap-all ....................... Passed 393.32 sec; Start 386: cookbook-rohf-orb-rot; 380/411 Test #384: psi4numpy-rhf-hessian ............ Passed 2.92 sec; Start 387: python-energy; 381/411 Test #387: python-energy .................... Passed 1.22 sec; Start 388: python-curve; 382/411 Test #385: psi4numpy-fci .................... Passed 4.83 sec; Start 389: python-pubchem; 383/411 Test #375: pywrap-bfs ....................... Passed 24.54 sec; Start 390: python-mints9; 384/411 Test #388: python-curve ..................... Passed 3.58 sec; Start 391: python-mints2; 385/411 Test #390: python-mints9 .................... Passed 1.95 sec; Start 392: python-cc54; 386/411 Test #391: python-mints2 .................... Passed 2.61 sec; Start 393: python-3-index-transforms; 387/411 Test #304: pywrap-checkrun-rhf .............. Passed 379.62 sec; Start 395: python-mints13; 388/411 Test #395: python-mints13 ................... Passed 1.90 sec; Start 396: python-memdfjk; 389/411 Test #396: python-memdfjk ................... Passed 1.11 sec; Start 397: json-v11-energy; 390/411 Test #392: python-cc54 ...................... Passed 8.91 sec; Start 398: json-v11-gradient; 391/411 T,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1115#issuecomment-411094637:35504,energy,energy,35504,https://psicode.org,https://github.com/psi4/psi4/pull/1115#issuecomment-411094637,2,['energy'],['energy']
Energy Efficiency,"chwarz Cutoff: 1E-12; Fitting Condition: 1E-12							 Fitting Condition: 1E-12. => Auxiliary Basis Set <=								 => Auxiliary Basis Set <=. Basis Set: (6-31G AUX)								 Basis Set: (6-31G AUX); Blend: CC-PVDZ-JKFIT								 Blend: CC-PVDZ-JKFIT; Number of shells: 42								 Number of shells: 42; Number of basis function: 131							 Number of basis function: 131; Number of Cartesian functions: 131							 Number of Cartesian functions: 131; Spherical Harmonics?: false								 Spherical Harmonics?: false; Max angular momentum: 3								 Max angular momentum: 3. Minimum eigenvalue in the overlap matrix is 6.8158211762E-02.				 Minimum eigenvalue in the overlap matrix is 6.8158211762E-02.; Using Symmetric Orthogonalization.							 Using Symmetric Orthogonalization. SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF.		 SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF. ==> Iterations <==									 ==> Iterations <==. Total Energy Delta E RMS |[F,P]|			 Total Energy Delta E RMS |[F,P]|. @DF-UKS iter 0: -71.60680989524471 -7.16068e+01 1.41427e-01 		 |	 @DF-UKS iter 0: -71.93847658446015 -7.19385e+01 1.43012e-01 ; @DF-UKS iter 1: -75.52774517284402 -3.92094e+00 8.33781e-02 		 |	 Occupation by irrep:; @DF-UKS iter 2: -75.47183403287708 5.59111e-02 8.91835e-02 DIIS	 |	 Ap App ; @DF-UKS iter 3: -75.87814618269091 -4.06312e-01 2.70648e-03 DIIS	 |	 DOCC [ 4, 0 ]; @DF-UKS iter 4: -75.87860013991410 -4.53957e-04 1.85656e-04 DIIS	 |	 SOCC [ 0, 1 ]; @DF-UKS iter 5: -75.87860479400773 -4.65409e-06 5.17609e-05 DIIS	 |; @DF-UKS iter 6: -75.87860525313432 -4.59127e-07 6.18748e-06 DIIS	 |	 @DF-UKS iter 1: -75.69919988631725 -3.76072e+00 8.89804e-02 ; @DF-UKS iter 7: -75.87860525835350 -5.21918e-09 1.04046e-06 DIIS	 |	 @DF-UKS iter 2: -75.57133352451177 1.27866e-01 1.11758e-01 DIIS; @DF-UKS iter 8: -75.87860525846337 -1.09864e-10 1.13063e-07 DIIS	 |	 @DF-UKS iter 3: -76.19695131159150 -6.25618e-01 4.05977e-03 DIIS; @DF-UKS iter 9: -75.87860525846484",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/802#issuecomment-383210085:1670,Energy,Energy,1670,https://psicode.org,https://github.com/psi4/psi4/pull/802#issuecomment-383210085,2,['Energy'],['Energy']
Energy Efficiency,"ck with one of the basis sets that has already worked, it will run. However if I try it with one of the basis sets that did not work, it will raise the RuntimeError shown below. I have tried placing inside the loop all combinations of `psi4.core.clean()`, `psi4.core.clean_variables()`, and `psi4.core.clean_options()`, but it still does not work. I believe my installation to be fine, as I can manually restart the kernel and obtain all the basis sets required, albeit only after restarting the kernel each time. #### Version; `psi4.__version__`: '1.4a2.dev313'. ```python; --------------------------------------------------------------------; RuntimeError Traceback (most recent call last); <ipython-input-7-95f03e942086> in <module>; 9 ; 10 psi4.set_options({'reference': 'uhf','basis': basis_set}); ---> 11 e, wfn = psi4.energy('hf',return_wfn=True); 12 ; 13 print(""energy ="",e,"" and number of basis functions ="", wfn.basisset().nbf()). /usr/local/psi4/lib/psi4/driver/driver.py in energy(name, **kwargs); 568 shutil.copy(item, targetfile); 569 ; --> 570 wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); 571 ; 572 for postcallback in hooks['energy']['post']:. /usr/local/psi4/lib/psi4/driver/procrouting/proc.py in run_scf(name, **kwargs); 2180 ; 2181 ; -> 2182 scf_wfn = scf_helper(name, post_scf=False, **kwargs); 2183 returnvalue = scf_wfn.energy(); 2184 . /usr/local/psi4/lib/psi4/driver/procrouting/proc.py in scf_helper(name, post_scf, **kwargs); 1511 ); 1512 ; -> 1513 e_scf = scf_wfn.compute_energy(); 1514 for obj in [core, scf_wfn]:; 1515 for pv in [""SCF TOTAL ENERGY"", ""CURRENT ENERGY"", ""CURRENT REFERENCE ENERGY""]:. /usr/local/psi4/lib/psi4/driver/procrouting/scf_proc/scf_iterator.py in scf_compute_energy(self); 81 self.initialize_jk(self.memory_jk_); 82 else:; ---> 83 self.initialize(); 84 ; 85 try:. /usr/local/psi4/lib/psi4/driver/procrouting/scf_proc/scf_iterator.py in scf_initialize(self); 195 mints.set_rel_basisset(self.get_basisset('BASIS_RELA",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1794:1603,energy,energy,1603,https://psicode.org,https://github.com/psi4/psi4/issues/1794,1,['energy'],['energy']
Energy Efficiency,"ckport of dftd3-running tech from qcdb. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] libdisp's -D2 made more flexible so it can use same s6/alpha6/sr6 params as Grimme's -D2. existing D2 dict defs needed filling in further; - [x] no more d2p4/d2gr. that choice now made through `energy(..., engine='dftd3|libdisp')`; - [x] _all_ dispersions served out of dashparam for dftd3/libdisp/nl. accordingly much of the metadata from EmpiricalDispersion moved to dashcoeff.; - [x] EmpiricalDispersion much reduced, sorry. On the other hand, I suspect it's now the slim unification class DGAS actually wanted, if it hadn't needed to contort around run_dftd3.; - [x] All the different combos of fctl/dash/fctl-dash/params/default-params/partial-user-params sorted out in `dashparam.from_arrays()`. This is used as the backend to everything. `qcdb.Molecule.run_dftd3()`, `psi4.core.Molecule.run_dftd3()`, `qcdb.energy('b3lyp-d3')`, `psi4.energy('b3lyp-d3')`, `EmpiricalDispersion.compute_energy()`; - [x] Use QCJson_Schema model to drive and harvest from dftd3 rather than one big function.; - [x] This passes all existing tests. However, I've devised one it doesn't pass (user-def fctl incl. disp). Working on that.; - [x] Not yet begun to trace how citations are passed around.; - [x] Yes, I need to rebase to get Jonathan's findif changes incorporated.; - [x] Bump pylibefp to 0.4 and finish its c->py transition in build paraphernalia.; - [x] current commits are rich in docstrings but actual docs need a pass. some stuff, notably DFT_DISPERSION_PARAMETERS is out of date. ## Questions; - [ ] This touches a lot of people's code. I'm fairly happy that this is a simplification and a workable design. But it's just a better starting point, and others may have new ideas and improvements. Or see holes in my logic and planning. ## Checklist; - [x] Tests added for any new features; - [x] All full tests run. ## Status; - [x] Ready for review; - [x] Ready fo",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1151:1431,energy,energy,1431,https://psicode.org,https://github.com/psi4/psi4/pull/1151,1,['energy'],['energy']
Energy Efficiency,"cks.; v(ab,ci) diagrams will be evaluated in 1 blocks over ov2.; v(ab,ci) diagrams will be evaluated in 1 blocks over ov. Allocate cpu memory ( 0.49 mb).....done.; Initialize cpu memory..................done. Begin CISD iterations. Iter DIIS Energy d(Energy) |d(T)| time; 0 0 1 -0.1998551539 -0.3267843769 0.1994563594 0; 1 1 1 -0.1953653583 0.0044897956 0.0261066660 0; 2 2 1 -0.1998807440 -0.0045153857 0.0092191040 0; 3 3 1 -0.2002563980 -0.0003756540 0.0033933116 0; 4 4 1 -0.2003267260 -0.0000703281 0.0005902038 0; 5 5 1 -0.2003284394 -0.0000017134 0.0001874109 0; 6 6 1 -0.2003286037 -0.0000001643 0.0000507167 0; 7 7 1 -0.2003286166 -0.0000000128 0.0000118947 0; 8 8 1 -0.2003286173 -0.0000000007 0.0000025104 0; 9 8 2 -0.2003286173 -0.0000000000 0.0000005766 0; 10 8 3 -0.2003286173 -0.0000000000 0.0000001177 0; 11 8 4 -0.2003286173 -0.0000000000 0.0000000230 0. CISD iterations converged!. CISD variational energy: -0.200328617292; CISD transition energy: -0.200328617850. OS SCS-MP2 correlation energy: -0.179813193864; SS SCS-MP2 correlation energy: -0.016670275217; SCS-MP2 correlation energy: -0.196483469081; * SCS-MP2 total energy: -76.213780024364. OS MP2 correlation energy: -0.149844328220; SS MP2 correlation energy: -0.050010825651; MP2 correlation energy: -0.199855153871; * MP2 total energy: -76.217151709154. OS CISD correlation energy: -0.158048399059; SS CISD correlation energy: -0.042280218791; CISD correlation energy: -0.200328617292; * CISD total energy: -76.217625172575. Total time for CISD iterations: 0.06 s (user); 0.11 s (system); 0 s (total). Time per iteration: 0.01 s (user); 0.01 s (system); 0.00 s (total). *** tstop() called on mac-psinet.sherrill.chemistry.gatech.ed at Wed Oct 25 13:40:59 2017; Module time:; 	user time = 0.06 seconds = 0.00 minutes; 	system time = 0.11 seconds = 0.00 minutes; 	total time = 0 seconds = 0.00 minutes; Total time:; 	user time = 0.52 seconds = 0.01 minutes; 	system time = 0.20 seconds = 0.00 minutes; 	total time = 0 secon",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/828#issuecomment-339412812:11586,energy,energy,11586,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339412812,1,['energy'],['energy']
Energy Efficiency,concerning http://forum.psicode.org/t/fatal-error-a-matrix-is-not-spd/1471. Decent looking results are obtained with `guess huckel` and no extra options. Instability analysis shows the SCF lands in a minimum.; For `SAP` the SCF does not land SCF in a minimum. However there are differences between `SAD+instability analysis` and `huckel` (see induction energy).; Possibly an issue with a bugged instability following (suggested by @JonathonMisiewicz ). [huckel.txt](https://github.com/psi4/psi4/files/3798367/huckel.txt); [huckel_stability.txt](https://github.com/psi4/psi4/files/3798368/huckel_stability.txt); [sap_stability.txt](https://github.com/psi4/psi4/files/3798380/sap_stability.txt); [sap.txt](https://github.com/psi4/psi4/files/3798381/sap.txt),MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1747:353,energy,energy,353,https://psicode.org,https://github.com/psi4/psi4/issues/1747,1,['energy'],['energy']
Energy Efficiency,"conda binary, for an executable, and as a shared library that can be imported from Python. There was a ton of redundancy between the latter two and I consolidated them into one. Now all builds that are not making the conda binary, also produce callable Python bindings and an executable. This is simply done by packaging Psi4 up into a giant .so that we then link psi4.cc against. Because I am liable to forget here is an example of using Psi4 from python now, assuming `${CMAKE_INSTALL_PREFIX}/psi4/lib/psi4.so` is in your `PYTHONPATH`:. ``` .py; from psi4 import *; initialize(); #This has to come after initialize or else the global variables aren't right; import driver; set_global_option('BASIS', 'CC-PVDZ'); xyzstring = """"""; units angstrom; O 0.0000000000 0.0000000000 -0.0711762954; H 0.0000000000 -0.8916195680 0.5648097613; H 0.0000000000 0.8916195680 0.5648097613; """"""; efp_init(); my_mol = Molecule.create_molecule_from_string(xyzstring); my_mol.update_geometry(); driver.energy('scf',molecule=my_mol); ```. It would be nice to consolidate this somewhat, but I'll leave that for later. The segfault discussed on the forums is still present with this.; ## Fortran Name Mangling. This is a perpetual problem. The previous CMake build relied on the Fortran/C interface capabilities of CMake to generate a header. This seemed to work well, but as I understand it, it assumes that the Fortran compiler CMake is currently using is the one that compiled all Fortran libraries. Consequentially this does _NOT_ necessarily provide you with the correct mangling for externally compiled Fortran libraries. For Fortran libraries that we may are building, like ERD, DKH, etc. the name mangling should go through the CMake mangling detection mechanisms and the resulting header file included with the library. This allows other projects to link to these libraries without having to know the mangling scheme.; ## BLAS and LAPACK. Somewhat related to the previous point, Psi4 proper needs to know the mangl",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442:8932,energy,energy,8932,https://psicode.org,https://github.com/psi4/psi4/pull/442,1,['energy'],['energy']
Energy Efficiency,"conda release: py36hf231b52_0 ; Psi4 1.2.1 ; Rev {HEAD} 406f4de . The DF-CCSD iterations with the FNOCC and DFOCC modules diverge for a repulsive, C2-symmetric methanol dimer depending on how I read the geometry (it seems).; The first CCSD energy is already completely wrong. ```; Iter DIIS Energy d(Energy) |d(T)| time; 0 0 1 28.8732411379 28.8732411379 7.9419493294 0; 1 1 1 -305.0567532225 -333.9299943603 62248.5081330950 2; 2 2 1 -392.6124818532 -87.5557286307 1852579.6071174063 3; 3 3 1 -337.1095996214 55.5028822317 1639881736.6452949047 2; ```. The conventional CCSD shows no problems (fnocc/ccenergy tested). The (assumed) dependence on the input revealed itself while making a clean input for reporting.; The SCF part does not show anything odd. Geometry is correctly recognized. Attached tgz file contains the working and faulting input/output.; [tball.tar.gz](https://github.com/psi4/psi4/files/2240627/tball.tar.gz)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1110:240,energy,energy,240,https://psicode.org,https://github.com/psi4/psi4/issues/1110,3,"['Energy', 'energy']","['Energy', 'energy']"
Energy Efficiency,"convergence 10; basis_guess True; max_force_g_convergence 1e-7; freeze_core True; }. E = energy('mp2/heavy-aug-cc-pv([tq]+d)z + D:ccsd(t)/heavy-aug-cc-pv(d+d)z'); H = frequency('mp2/heavy-aug-cc-pv([tq]+d)z + D:ccsd(t)/heavy-aug-cc-pv(d+d)z', mode='continuous', dertype=0); ```. When computing the energy I get the following CBS summary. Everything looks good to me, matches what I get manually computing these (what I was testing). ``` ; ---------------------------------------------------------------------------------------------------------; Method / Basis Rqd Energy [Eh] Variable; ---------------------------------------------------------------------------------------------------------; hf / heavy-aug-cc-pv(t+d)z * -149.65690150 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(t+d)z * -150.13698909 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(q+d)z * -150.17732219 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(d+d)z -149.62212747 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(d+d)z * -150.01871638 MP2 TOTAL ENERGY; ccsd / heavy-aug-cc-pv(d+d)z -150.00685110 CCSD TOTAL ENERGY; ccsd(t) / heavy-aug-cc-pv(d+d)z * -150.02005663 CCSD(T) TOTAL ENERGY; ---------------------------------------------------------------------------------------------------------. ==> Stages <==. ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Wt Energy [Eh] Scheme; ---------------------------------------------------------------------------------------------------------; scf hf / heavy-aug-cc-pv(q+d)z 1 -149.66713397 xtpl_highest_1; corl mp2 / heavy-aug-cc-pv([tq]+d)z 1 -150.20675446 corl_xtpl_helgaker_2; corl hf / heavy-aug-cc-pv([tq]+d)z -1 -149.67460090 corl_xtpl_helgaker_2; delta1 ccsd(t) / heavy-aug-cc-pv(d+d)z 1 -150.02005663 xtpl_highest_1; delta1 mp2 / heavy-aug-cc-pv(d+d)z -1 -150.01871638 xtpl_highest_1; --------------------------------------------------------------------------------",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1897:1202,ENERGY,ENERGY,1202,https://psicode.org,https://github.com/psi4/psi4/issues/1897,1,['ENERGY'],['ENERGY']
Energy Efficiency,cphf; 370/411 Test #405: skeleton ......................... Passed 0.94 sec; Start 190: fci-coverage; 371/411 Test #102: decontract ....................... Passed 1.14 sec; Start 398: json-v11-gradient; 372/411 Test #96: cisd-h2o-clpse ................... Passed 1.11 sec; Start 411: skeletonwavefunction; 373/411 Test #229: mp2-grad2 ........................ Passed 1.37 sec; Start 220: mints-helper; 374/411 Test #298: pubchem2 ......................... Passed 1.45 sec; Start 222: mints10; 375/411 Test #380: psi4numpy-cphf ................... Passed 1.09 sec; Start 309: pywrap-molecule; 376/411 Test #231: mp2p5-grad1 ...................... Passed 1.18 sec; Start 404: json-schema-1-properties; 377/411 Test #411: skeletonwavefunction ............. Passed 0.97 sec; Start 406: skeletonaointegrals; 378/411 Test #398: json-v11-gradient ................ Passed 1.04 sec; Start 410: skeletonsointegrals; 379/411 Test #220: mints-helper ..................... Passed 1.15 sec; Start 387: python-energy; 380/411 Test #222: mints10 .......................... Passed 1.24 sec; Start 378: mints12; 381/411 Test #309: pywrap-molecule .................. Passed 1.14 sec; Start 383: psi4numpy-rhf-gradient; 382/411 Test #404: json-schema-1-properties ......... Passed 1.17 sec; Start 353: tu1-h2o-energy; 383/411 Test #190: fci-coverage ..................... Passed 1.91 sec; Start 214: mints3; 384/411 Test #410: skeletonsointegrals .............. Passed 0.90 sec; Start 349: sapt-sf1; 385/411 Test #406: skeletonaointegrals .............. Passed 0.93 sec; Start 396: python-memdfjk; 386/411 Test #387: python-energy .................... Passed 0.72 sec; Start 352: stability2; 387/411 Test #378: mints12 .......................... Passed 1.15 sec; Start 188: fci-tdm; 388/411 Test #396: python-memdfjk ................... Passed 0.88 sec; Start 354: tu2-ch2-energy; 389/411 Test #214: mints3 ........................... Passed 0.99 sec; Start 382: psi4numpy-rhf; 390/411 Test #383: psi4numpy-rhf-gradient ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1078#issuecomment-408900195:35493,energy,energy,35493,https://psicode.org,https://github.com/psi4/psi4/pull/1078#issuecomment-408900195,1,['energy'],['energy']
